; ModuleID = 'regcomp.c'
source_filename = "regcomp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.p5rx = type { %struct.regexp*, i32, i32, %union.anon.7 }
%struct.regexp = type { %struct.hv*, %union._xmgu, i64, %union.anon.6, %struct.regexp_engine*, %struct.p5rx*, %struct.hv*, i32, i64, i64, i64, %struct.reg_substr_data*, i32, i32, i8*, i32, i32, %struct.regexp_paren_pair*, i8*, %struct.sv*, i64, i64, i64, i64, i16, %struct.cv* }
%union._xmgu = type { %struct.magic* }
%struct.magic = type { %struct.magic*, %struct.mgvtbl*, i16, i8, i8, i64, %struct.sv*, i8* }
%struct.mgvtbl = type { i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*, %struct.sv*, i8*, i32)*, i32 (%struct.magic*, %struct.clone_params*)*, i32 (%struct.sv*, %struct.magic*)* }
%struct.clone_params = type { %struct.av*, i64, %struct.interpreter*, %struct.interpreter*, %struct.av* }
%struct.interpreter = type { i8 }
%struct.av = type { %struct.xpvav*, i32, i32, %union.anon.3 }
%struct.xpvav = type { %struct.hv*, %union._xmgu, i64, i64, %struct.sv** }
%union.anon.3 = type { i8* }
%union.anon.6 = type { i64 }
%struct.regexp_engine = type { {}*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i8* (%struct.p5rx*, %struct.sv*, i8*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, %struct.sv* (%struct.p5rx*)*, void (%struct.p5rx*)*, void (%struct.p5rx*, i32, %struct.sv*)*, void (%struct.p5rx*, i32, %struct.sv*)*, i32 (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* }
%struct.hv = type { %struct.xpvhv*, i32, i32, %union.anon.5 }
%struct.xpvhv = type { %struct.hv*, %union._xmgu, i64, i64 }
%union.anon.5 = type { i8* }
%struct.reg_substr_data = type { i8, [3 x %struct.reg_substr_datum] }
%struct.reg_substr_datum = type { i64, i64, %struct.sv*, %struct.sv*, i64 }
%struct.regexp_paren_pair = type { i64, i64, i64 }
%struct.cv = type { %struct.xpvcv*, i32, i32, %union.anon.2 }
%struct.xpvcv = type { %struct.hv*, %union._xmgu, i64, %union.anon.9, %struct.hv*, %union.anon.10, %union.anon.11, %union.anon.12, i8*, %union.anon.13, %struct.cv*, i32, i32, i32 }
%union.anon.9 = type { i64 }
%union.anon.10 = type { %struct.op* }
%struct.op = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8 }
%union.anon.11 = type { %struct.op* }
%union.anon.12 = type { %struct.gv* }
%struct.gv = type { %struct.xpvgv*, i32, i32, %union.anon.4 }
%struct.xpvgv = type { %struct.hv*, %union._xmgu, i64, %union.anon.8, %union._xivu, %union._xnvu }
%union.anon.8 = type { i64 }
%union._xivu = type { i64 }
%union._xnvu = type { double }
%union.anon.4 = type { i8* }
%union.anon.13 = type { %struct.padlist* }
%struct.padlist = type { i64, %struct.av**, i32, i32 }
%union.anon.2 = type { i8* }
%union.anon.7 = type { i8* }
%struct.sv = type { i8*, i32, i32, %union.anon }
%union.anon = type { i8* }
%struct.re_scream_pos_data_s = type { i8**, i64* }
%struct.cop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, i32, %struct.hv*, %struct.gv*, i32, i32, i64*, %struct.refcounted_he* }
%struct.refcounted_he = type { %struct.refcounted_he*, %struct.hek*, %union.anon.16, i32, [1 x i8] }
%struct.hek = type { i32, i32, [1 x i8] }
%union.anon.16 = type { i64 }
%struct.scan_data_t = type { i64, i64, %struct.sv*, i64, i64, i64, %struct.sv**, %struct.sv*, i64, i64*, i32, %struct.sv*, i64, i64, i64*, i64, i32, i32, i64*, %struct.regnode_ssc* }
%struct.regnode_ssc = type { i8, i8, i16, i32, [32 x i8], i32, %struct.sv* }
%struct.pmop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op*, %struct.p5rx*, i32, %union.anon.22, %union.anon.23, %struct.op* }
%union.anon.22 = type { %struct.op* }
%union.anon.23 = type { %struct.op* }
%struct.stackinfo = type { %struct.av*, %struct.context*, %struct.stackinfo*, %struct.stackinfo*, i32, i32, i32, i32 }
%struct.context = type { %union.anon.38 }
%union.anon.38 = type { %struct.subst }
%struct.subst = type { i8, i8, i16, i32, i64, i64, i8*, %struct.sv*, %struct.sv*, i8*, i8*, i8*, i8*, %struct.p5rx* }
%struct.regexp_internal = type { i32, %union.anon.18, %struct.regnode*, %struct.reg_data*, %struct.reg_code_block*, i32, [1 x %struct.regnode] }
%union.anon.18 = type { i32* }
%struct.regnode = type { i8, i8, i16 }
%struct.reg_data = type { i32, i8*, [1 x i8*] }
%struct.reg_code_block = type { i64, i64, %struct.op*, %struct.p5rx* }
%struct._reg_ac_data = type { i32, i32, i32*, %struct._reg_trie_state* }
%struct._reg_trie_state = type { i16, %union.anon.21 }
%union.anon.21 = type { %struct._reg_trie_trans_list_elem* }
%struct._reg_trie_trans_list_elem = type { i16, i32 }
%struct._reg_trie_data = type { i32, i32, i16*, %struct._reg_trie_state*, %struct._reg_trie_trans*, i8*, i16*, %struct.reg_trie_wordinfo*, i16, i32, i64, i64, i32, i32, i32 }
%struct._reg_trie_trans = type { i32, i32 }
%struct.reg_trie_wordinfo = type { i16, i32, i32 }
%struct.xpvmg = type { %struct.hv*, %union._xmgu, i64, %union.anon.20, %union._xivu, %union._xnvu }
%union.anon.20 = type { i64 }
%struct.RExC_state_t = type { i32, i32, i8*, %struct.p5rx*, %struct.regexp*, %struct.regexp_internal*, i8*, i8*, i8*, i64, %struct.regnode*, %struct.regnode*, %struct.regnode*, %struct.regnode_ssc, i32, i32, i32, i64, i32, i32, i32, i32, %struct.regnode**, %struct.regnode**, %struct.regnode*, i32, i32, i32, %struct.hv*, %struct.regnode**, i32, i8*, i32, i32, i32, i32, i32, i32, %struct.reg_code_block*, i32, i32, i64, %struct.scan_frame*, %struct.scan_frame*, i32, i32, %struct.sv* }
%struct.scan_frame = type { %struct.regnode*, %struct.regnode*, i32, i32, i32, %struct.scan_frame*, %struct.scan_frame*, %struct.scan_frame* }
%struct.listop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op* }
%struct.svop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.sv* }
%struct.xpv = type { %struct.hv*, %union._xmgu, i64, %union.anon.19 }
%union.anon.19 = type { i64 }
%struct.regnode_2 = type { i8, i8, i16, i16, i16 }
%struct.regnode_1 = type { i8, i8, i16, i32 }
%struct.regnode_string = type { i8, i8, i16, [1 x i8] }
%struct.regnode_2L = type { i8, i8, i16, i32, i32 }
%struct.gp = type { %struct.sv*, %struct.io*, %struct.cv*, i32, i32, %struct.hv*, %struct.av*, %struct.cv*, %struct.gv*, i32, %struct.hek* }
%struct.io = type { %struct.xpvio*, i32, i32, %union.anon.1 }
%struct.xpvio = type { %struct.hv*, %union._xmgu, i64, %union.anon.14, %union._xivu, %struct._PerlIO**, %union.anon.15, i64, i64, i64, i8*, %struct.gv*, i8*, %struct.gv*, i8*, %struct.gv*, i8, i8 }
%union.anon.14 = type { i64 }
%struct._PerlIO = type opaque
%union.anon.15 = type { %struct.__dirstream* }
%struct.__dirstream = type opaque
%union.anon.1 = type { i8* }
%struct.xpviv = type { %struct.hv*, %union._xmgu, i64, %union.anon.17, %union._xivu }
%union.anon.17 = type { i64 }
%struct.xpvnv = type { %struct.hv*, %union._xmgu, i64, %union.anon.45, %union._xivu, %union._xnvu }
%union.anon.45 = type { i64 }
%struct.he = type { %struct.he*, %struct.hek*, %union.anon.0 }
%union.anon.0 = type { %struct.sv* }
%struct.regnode_charclass = type { i8, i8, i16, i32, [32 x i8] }
%struct.regnode_charclass_class = type { i8, i8, i16, i32, [32 x i8], i32 }
%struct.xpvinvlist = type { %struct.hv*, %union._xmgu, i64, %union.anon.46, i64, i64, i8 }
%union.anon.46 = type { i64 }
%struct.xpvuv = type { %struct.hv*, %union._xmgu, i64, %union.anon.24, %union._xivu }
%union.anon.24 = type { i64 }
%struct.regmatch_info = type { %struct.p5rx*, i8*, i8*, i8*, %struct.sv*, i8*, i8*, %struct.regmatch_info_aux*, %struct.regmatch_info_aux_eval*, i32, i32, i64, i8, i8, i8, i8 }
%struct.regmatch_info_aux = type { %struct.regmatch_info_aux_eval*, %struct.regmatch_state*, %struct.regmatch_slab*, i8* }
%struct.regmatch_state = type { i32, i8*, %union.anon.25 }
%union.anon.25 = type { %struct.anon.37 }
%struct.anon.37 = type { i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, %struct.regnode*, %struct.regnode*, [14 x i8], [14 x i8] }
%struct.regmatch_slab = type { [33 x %struct.regmatch_state], %struct.regmatch_slab*, %struct.regmatch_slab* }
%struct.regmatch_info_aux_eval = type { %struct.regexp*, %struct.pmop*, %struct.sv*, i8*, i64, i64, i64, %struct.magic*, i64, i8 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.xpvhv_aux = type { %union._xhvnameu, %struct.av*, %struct.he*, i32, i32, %struct.mro_meta*, i32, i32, i32, i32 }
%union._xhvnameu = type { %struct.hek* }
%struct.mro_meta = type { %struct.hv*, %struct.sv*, %struct.hv*, i32, i32, %struct.mro_alg*, %struct.hv*, %struct.hv*, i32 }
%struct.mro_alg = type { %struct.av* (%struct.hv*, i32)*, i8*, i16, i16, i32 }

@PL_regkind = dso_local constant [134 x i8] c"\00\00\02\02\04\04\04\07\08\08\08\08\0C\0C\0C\0C\10\10\10\13\13\15\15\15\15\19\19\19\19\1D\1E\1F\1F\1F\1F\1F\1F\1F\1F\1F((*+,,,,0123333333333=>>>>>CDEF>HHHHLMNOPQQQTTTTTTZ[(]HHDD//0000000000\1E\1E....??,,,,,,XXVVWWYYZZ", align 16
@.str = private unnamed_addr constant [4 x i8] c"END\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"SUCCEED\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"SBOL\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"MBOL\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"SEOL\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"MEOL\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"EOS\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"GPOS\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"BOUND\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"BOUNDL\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"BOUNDU\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"BOUNDA\00", align 1
@.str.12 = private unnamed_addr constant [7 x i8] c"NBOUND\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"NBOUNDL\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"NBOUNDU\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"NBOUNDA\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"REG_ANY\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"SANY\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"CANY\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"ANYOF\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"ANYOFL\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"POSIXD\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"POSIXL\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"POSIXU\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"POSIXA\00", align 1
@.str.25 = private unnamed_addr constant [8 x i8] c"NPOSIXD\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c"NPOSIXL\00", align 1
@.str.27 = private unnamed_addr constant [8 x i8] c"NPOSIXU\00", align 1
@.str.28 = private unnamed_addr constant [8 x i8] c"NPOSIXA\00", align 1
@.str.29 = private unnamed_addr constant [6 x i8] c"CLUMP\00", align 1
@.str.30 = private unnamed_addr constant [7 x i8] c"BRANCH\00", align 1
@.str.31 = private unnamed_addr constant [6 x i8] c"EXACT\00", align 1
@.str.32 = private unnamed_addr constant [7 x i8] c"EXACTL\00", align 1
@.str.33 = private unnamed_addr constant [7 x i8] c"EXACTF\00", align 1
@.str.34 = private unnamed_addr constant [8 x i8] c"EXACTFL\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c"EXACTFU\00", align 1
@.str.36 = private unnamed_addr constant [8 x i8] c"EXACTFA\00", align 1
@.str.37 = private unnamed_addr constant [11 x i8] c"EXACTFU_SS\00", align 1
@.str.38 = private unnamed_addr constant [10 x i8] c"EXACTFLU8\00", align 1
@.str.39 = private unnamed_addr constant [16 x i8] c"EXACTFA_NO_TRIE\00", align 1
@.str.40 = private unnamed_addr constant [8 x i8] c"NOTHING\00", align 1
@.str.41 = private unnamed_addr constant [5 x i8] c"TAIL\00", align 1
@.str.42 = private unnamed_addr constant [5 x i8] c"STAR\00", align 1
@.str.43 = private unnamed_addr constant [5 x i8] c"PLUS\00", align 1
@.str.44 = private unnamed_addr constant [6 x i8] c"CURLY\00", align 1
@.str.45 = private unnamed_addr constant [7 x i8] c"CURLYN\00", align 1
@.str.46 = private unnamed_addr constant [7 x i8] c"CURLYM\00", align 1
@.str.47 = private unnamed_addr constant [7 x i8] c"CURLYX\00", align 1
@.str.48 = private unnamed_addr constant [7 x i8] c"WHILEM\00", align 1
@.str.49 = private unnamed_addr constant [5 x i8] c"OPEN\00", align 1
@.str.50 = private unnamed_addr constant [6 x i8] c"CLOSE\00", align 1
@.str.51 = private unnamed_addr constant [4 x i8] c"REF\00", align 1
@.str.52 = private unnamed_addr constant [5 x i8] c"REFF\00", align 1
@.str.53 = private unnamed_addr constant [6 x i8] c"REFFL\00", align 1
@.str.54 = private unnamed_addr constant [6 x i8] c"REFFU\00", align 1
@.str.55 = private unnamed_addr constant [6 x i8] c"REFFA\00", align 1
@.str.56 = private unnamed_addr constant [5 x i8] c"NREF\00", align 1
@.str.57 = private unnamed_addr constant [6 x i8] c"NREFF\00", align 1
@.str.58 = private unnamed_addr constant [7 x i8] c"NREFFL\00", align 1
@.str.59 = private unnamed_addr constant [7 x i8] c"NREFFU\00", align 1
@.str.60 = private unnamed_addr constant [7 x i8] c"NREFFA\00", align 1
@.str.61 = private unnamed_addr constant [8 x i8] c"LONGJMP\00", align 1
@.str.62 = private unnamed_addr constant [8 x i8] c"BRANCHJ\00", align 1
@.str.63 = private unnamed_addr constant [8 x i8] c"IFMATCH\00", align 1
@.str.64 = private unnamed_addr constant [8 x i8] c"UNLESSM\00", align 1
@.str.65 = private unnamed_addr constant [8 x i8] c"SUSPEND\00", align 1
@.str.66 = private unnamed_addr constant [7 x i8] c"IFTHEN\00", align 1
@.str.67 = private unnamed_addr constant [7 x i8] c"GROUPP\00", align 1
@.str.68 = private unnamed_addr constant [5 x i8] c"EVAL\00", align 1
@.str.69 = private unnamed_addr constant [7 x i8] c"MINMOD\00", align 1
@.str.70 = private unnamed_addr constant [8 x i8] c"LOGICAL\00", align 1
@.str.71 = private unnamed_addr constant [6 x i8] c"RENUM\00", align 1
@.str.72 = private unnamed_addr constant [5 x i8] c"TRIE\00", align 1
@.str.73 = private unnamed_addr constant [6 x i8] c"TRIEC\00", align 1
@.str.74 = private unnamed_addr constant [12 x i8] c"AHOCORASICK\00", align 1
@.str.75 = private unnamed_addr constant [13 x i8] c"AHOCORASICKC\00", align 1
@.str.76 = private unnamed_addr constant [6 x i8] c"GOSUB\00", align 1
@.str.77 = private unnamed_addr constant [8 x i8] c"GOSTART\00", align 1
@.str.78 = private unnamed_addr constant [8 x i8] c"NGROUPP\00", align 1
@.str.79 = private unnamed_addr constant [7 x i8] c"INSUBP\00", align 1
@.str.80 = private unnamed_addr constant [8 x i8] c"DEFINEP\00", align 1
@.str.81 = private unnamed_addr constant [8 x i8] c"ENDLIKE\00", align 1
@.str.82 = private unnamed_addr constant [7 x i8] c"OPFAIL\00", align 1
@.str.83 = private unnamed_addr constant [7 x i8] c"ACCEPT\00", align 1
@.str.84 = private unnamed_addr constant [5 x i8] c"VERB\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"PRUNE\00", align 1
@.str.86 = private unnamed_addr constant [10 x i8] c"MARKPOINT\00", align 1
@.str.87 = private unnamed_addr constant [5 x i8] c"SKIP\00", align 1
@.str.88 = private unnamed_addr constant [7 x i8] c"COMMIT\00", align 1
@.str.89 = private unnamed_addr constant [9 x i8] c"CUTGROUP\00", align 1
@.str.90 = private unnamed_addr constant [6 x i8] c"KEEPS\00", align 1
@.str.91 = private unnamed_addr constant [8 x i8] c"LNBREAK\00", align 1
@.str.92 = private unnamed_addr constant [10 x i8] c"OPTIMIZED\00", align 1
@.str.93 = private unnamed_addr constant [7 x i8] c"PSEUDO\00", align 1
@.str.94 = private unnamed_addr constant [10 x i8] c"TRIE_next\00", align 1
@.str.95 = private unnamed_addr constant [15 x i8] c"TRIE_next_fail\00", align 1
@.str.96 = private unnamed_addr constant [8 x i8] c"EVAL_AB\00", align 1
@.str.97 = private unnamed_addr constant [13 x i8] c"EVAL_AB_fail\00", align 1
@.str.98 = private unnamed_addr constant [11 x i8] c"CURLYX_end\00", align 1
@.str.99 = private unnamed_addr constant [16 x i8] c"CURLYX_end_fail\00", align 1
@.str.100 = private unnamed_addr constant [13 x i8] c"WHILEM_A_pre\00", align 1
@.str.101 = private unnamed_addr constant [18 x i8] c"WHILEM_A_pre_fail\00", align 1
@.str.102 = private unnamed_addr constant [13 x i8] c"WHILEM_A_min\00", align 1
@.str.103 = private unnamed_addr constant [18 x i8] c"WHILEM_A_min_fail\00", align 1
@.str.104 = private unnamed_addr constant [13 x i8] c"WHILEM_A_max\00", align 1
@.str.105 = private unnamed_addr constant [18 x i8] c"WHILEM_A_max_fail\00", align 1
@.str.106 = private unnamed_addr constant [13 x i8] c"WHILEM_B_min\00", align 1
@.str.107 = private unnamed_addr constant [18 x i8] c"WHILEM_B_min_fail\00", align 1
@.str.108 = private unnamed_addr constant [13 x i8] c"WHILEM_B_max\00", align 1
@.str.109 = private unnamed_addr constant [18 x i8] c"WHILEM_B_max_fail\00", align 1
@.str.110 = private unnamed_addr constant [12 x i8] c"BRANCH_next\00", align 1
@.str.111 = private unnamed_addr constant [17 x i8] c"BRANCH_next_fail\00", align 1
@.str.112 = private unnamed_addr constant [9 x i8] c"CURLYM_A\00", align 1
@.str.113 = private unnamed_addr constant [14 x i8] c"CURLYM_A_fail\00", align 1
@.str.114 = private unnamed_addr constant [9 x i8] c"CURLYM_B\00", align 1
@.str.115 = private unnamed_addr constant [14 x i8] c"CURLYM_B_fail\00", align 1
@.str.116 = private unnamed_addr constant [10 x i8] c"IFMATCH_A\00", align 1
@.str.117 = private unnamed_addr constant [15 x i8] c"IFMATCH_A_fail\00", align 1
@.str.118 = private unnamed_addr constant [18 x i8] c"CURLY_B_min_known\00", align 1
@.str.119 = private unnamed_addr constant [23 x i8] c"CURLY_B_min_known_fail\00", align 1
@.str.120 = private unnamed_addr constant [12 x i8] c"CURLY_B_min\00", align 1
@.str.121 = private unnamed_addr constant [17 x i8] c"CURLY_B_min_fail\00", align 1
@.str.122 = private unnamed_addr constant [12 x i8] c"CURLY_B_max\00", align 1
@.str.123 = private unnamed_addr constant [17 x i8] c"CURLY_B_max_fail\00", align 1
@.str.124 = private unnamed_addr constant [12 x i8] c"COMMIT_next\00", align 1
@.str.125 = private unnamed_addr constant [17 x i8] c"COMMIT_next_fail\00", align 1
@.str.126 = private unnamed_addr constant [15 x i8] c"MARKPOINT_next\00", align 1
@.str.127 = private unnamed_addr constant [20 x i8] c"MARKPOINT_next_fail\00", align 1
@.str.128 = private unnamed_addr constant [10 x i8] c"SKIP_next\00", align 1
@.str.129 = private unnamed_addr constant [15 x i8] c"SKIP_next_fail\00", align 1
@.str.130 = private unnamed_addr constant [14 x i8] c"CUTGROUP_next\00", align 1
@.str.131 = private unnamed_addr constant [19 x i8] c"CUTGROUP_next_fail\00", align 1
@.str.132 = private unnamed_addr constant [11 x i8] c"KEEPS_next\00", align 1
@.str.133 = private unnamed_addr constant [16 x i8] c"KEEPS_next_fail\00", align 1
@PL_reg_name = dso_local constant [134 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.80, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.90, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.92, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.102, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.106, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.108, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.114, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.116, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.120, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.122, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.128, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.133, i32 0, i32 0)], align 16
@.str.134 = private unnamed_addr constant [10 x i8] c"MULTILINE\00", align 1
@.str.135 = private unnamed_addr constant [11 x i8] c"SINGLELINE\00", align 1
@.str.136 = private unnamed_addr constant [5 x i8] c"FOLD\00", align 1
@.str.137 = private unnamed_addr constant [9 x i8] c"EXTENDED\00", align 1
@.str.138 = private unnamed_addr constant [14 x i8] c"EXTENDED_MORE\00", align 1
@.str.139 = private unnamed_addr constant [10 x i8] c"NOCAPTURE\00", align 1
@.str.140 = private unnamed_addr constant [9 x i8] c"KEEPCOPY\00", align 1
@.str.141 = private unnamed_addr constant [9 x i8] c"CHARSET0\00", align 1
@.str.142 = private unnamed_addr constant [9 x i8] c"CHARSET1\00", align 1
@.str.143 = private unnamed_addr constant [9 x i8] c"CHARSET2\00", align 1
@.str.144 = private unnamed_addr constant [7 x i8] c"STRICT\00", align 1
@.str.145 = private unnamed_addr constant [6 x i8] c"SPLIT\00", align 1
@.str.146 = private unnamed_addr constant [14 x i8] c"UNUSED_BIT_12\00", align 1
@.str.147 = private unnamed_addr constant [14 x i8] c"UNUSED_BIT_13\00", align 1
@.str.148 = private unnamed_addr constant [14 x i8] c"UNUSED_BIT_14\00", align 1
@.str.149 = private unnamed_addr constant [14 x i8] c"UNUSED_BIT_15\00", align 1
@.str.150 = private unnamed_addr constant [17 x i8] c"NO_INPLACE_SUBST\00", align 1
@.str.151 = private unnamed_addr constant [10 x i8] c"EVAL_SEEN\00", align 1
@.str.152 = private unnamed_addr constant [26 x i8] c"UNBOUNDED_QUANTIFIER_SEEN\00", align 1
@.str.153 = private unnamed_addr constant [10 x i8] c"CHECK_ALL\00", align 1
@.str.154 = private unnamed_addr constant [11 x i8] c"MATCH_UTF8\00", align 1
@.str.155 = private unnamed_addr constant [16 x i8] c"USE_INTUIT_NOML\00", align 1
@.str.156 = private unnamed_addr constant [14 x i8] c"USE_INTUIT_ML\00", align 1
@.str.157 = private unnamed_addr constant [12 x i8] c"INTUIT_TAIL\00", align 1
@.str.158 = private unnamed_addr constant [12 x i8] c"IS_ANCHORED\00", align 1
@.str.159 = private unnamed_addr constant [10 x i8] c"COPY_DONE\00", align 1
@.str.160 = private unnamed_addr constant [13 x i8] c"TAINTED_SEEN\00", align 1
@.str.161 = private unnamed_addr constant [8 x i8] c"TAINTED\00", align 1
@.str.162 = private unnamed_addr constant [11 x i8] c"START_ONLY\00", align 1
@.str.163 = private unnamed_addr constant [10 x i8] c"SKIPWHITE\00", align 1
@.str.164 = private unnamed_addr constant [6 x i8] c"WHITE\00", align 1
@.str.165 = private unnamed_addr constant [5 x i8] c"NULL\00", align 1
@PL_reg_extflags_name = dso_local constant [32 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.138, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.140, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.142, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.144, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.146, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.148, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.150, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.151, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.152, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.153, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.154, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.155, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.156, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.157, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.159, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.162, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.163, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.164, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.165, i32 0, i32 0)], align 16
@.str.166 = private unnamed_addr constant [9 x i8] c"IMPLICIT\00", align 1
@.str.167 = private unnamed_addr constant [8 x i8] c"NAUGHTY\00", align 1
@.str.168 = private unnamed_addr constant [13 x i8] c"VERBARG_SEEN\00", align 1
@.str.169 = private unnamed_addr constant [14 x i8] c"CUTGROUP_SEEN\00", align 1
@.str.170 = private unnamed_addr constant [12 x i8] c"USE_RE_EVAL\00", align 1
@.str.171 = private unnamed_addr constant [7 x i8] c"NOSCAN\00", align 1
@.str.172 = private unnamed_addr constant [10 x i8] c"CANY_SEEN\00", align 1
@.str.173 = private unnamed_addr constant [10 x i8] c"GPOS_SEEN\00", align 1
@.str.174 = private unnamed_addr constant [11 x i8] c"GPOS_FLOAT\00", align 1
@.str.175 = private unnamed_addr constant [10 x i8] c"ANCH_MBOL\00", align 1
@.str.176 = private unnamed_addr constant [10 x i8] c"ANCH_SBOL\00", align 1
@.str.177 = private unnamed_addr constant [10 x i8] c"ANCH_GPOS\00", align 1
@PL_reg_intflags_name = dso_local constant [13 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.166, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.167, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.168, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.170, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.171, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.172, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.173, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.174, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.175, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.176, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.177, i32 0, i32 0)], align 16
@PL_varies = dso_local constant [23 x i8] c"\1D\1E*+,-./03456789:;<>AB\00", align 16
@PL_varies_bitmask = dso_local constant [12 x i8] c"\00\00\00`\00\FC\F9_\06\00\00\00", align 1
@PL_simple = dso_local constant [14 x i8] c"\10\11\12\13\14\15\16\17\18\19\1A\1B\1C\00", align 1
@PL_simple_bitmask = dso_local constant <{ i8, i8, i8, i8, [8 x i8] }> <{ i8 0, i8 0, i8 -1, i8 31, [8 x i8] zeroinitializer }>, align 1
@PL_core_reg_engine = dso_local constant { %struct.p5rx* (%struct.sv*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i8* (%struct.p5rx*, %struct.sv*, i8*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, %struct.sv* (%struct.p5rx*)*, void (%struct.p5rx*)*, void (%struct.p5rx*, i32, %struct.sv*)*, void (%struct.p5rx*, i32, %struct.sv*)*, i32 (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* } { %struct.p5rx* (%struct.sv*, i32)* @Perl_re_compile, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)* @Perl_regexec_flags, i8* (%struct.p5rx*, %struct.sv*, i8*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)* @Perl_re_intuit_start, %struct.sv* (%struct.p5rx*)* @Perl_re_intuit_string, void (%struct.p5rx*)* @Perl_regfree_internal, void (%struct.p5rx*, i32, %struct.sv*)* @Perl_reg_numbered_buff_fetch, void (%struct.p5rx*, i32, %struct.sv*)* @Perl_reg_numbered_buff_store, i32 (%struct.p5rx*, %struct.sv*, i32)* @Perl_reg_numbered_buff_length, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)* @Perl_reg_named_buff, %struct.sv* (%struct.p5rx*, %struct.sv*, i32)* @Perl_reg_named_buff_iter, %struct.sv* (%struct.p5rx*)* @Perl_reg_qr_package, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* @Perl_re_op_compile }, align 8
@.str.178 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@PL_colors = external dso_local global [6 x i8*], align 16
@PL_colorset = external dso_local global i8, align 1
@PL_curcop = external dso_local global %struct.cop*, align 8
@PL_compiling = external dso_local global %struct.cop, align 8
@PL_hintgv = external dso_local global %struct.gv*, align 8
@.str.179 = private unnamed_addr constant [8 x i8] c"regcomp\00", align 1
@PL_AboveLatin1 = external dso_local global %struct.sv*, align 8
@AboveLatin1_invlist = internal constant [5 x i64] [i64 2, i64 148565664, i64 1, i64 0, i64 256], align 16
@Latin1_invlist = internal constant [5 x i64] [i64 2, i64 148565664, i64 0, i64 0, i64 256], align 16
@PL_Latin1 = external dso_local global %struct.sv*, align 8
@UpperLatin1_invlist = internal constant [6 x i64] [i64 3, i64 148565664, i64 1, i64 0, i64 128, i64 256], align 16
@PL_UpperLatin1 = external dso_local global %struct.sv*, align 8
@_Perl_Any_Folds_invlist = internal constant [238 x i64] [i64 235, i64 148565664, i64 1, i64 0, i64 65, i64 91, i64 97, i64 123, i64 181, i64 182, i64 192, i64 215, i64 216, i64 247, i64 248, i64 305, i64 306, i64 312, i64 313, i64 397, i64 398, i64 411, i64 412, i64 426, i64 428, i64 442, i64 444, i64 446, i64 447, i64 448, i64 452, i64 545, i64 546, i64 564, i64 570, i64 597, i64 598, i64 600, i64 601, i64 602, i64 603, i64 605, i64 608, i64 610, i64 611, i64 612, i64 613, i64 615, i64 616, i64 618, i64 619, i64 621, i64 623, i64 624, i64 625, i64 627, i64 629, i64 630, i64 637, i64 638, i64 640, i64 641, i64 643, i64 644, i64 647, i64 653, i64 658, i64 659, i64 670, i64 671, i64 700, i64 701, i64 702, i64 703, i64 768, i64 770, i64 775, i64 777, i64 778, i64 779, i64 780, i64 781, i64 787, i64 788, i64 817, i64 818, i64 834, i64 835, i64 837, i64 838, i64 880, i64 884, i64 886, i64 888, i64 891, i64 894, i64 895, i64 896, i64 902, i64 903, i64 904, i64 907, i64 908, i64 909, i64 910, i64 930, i64 931, i64 978, i64 981, i64 1014, i64 1015, i64 1020, i64 1021, i64 1154, i64 1162, i64 1328, i64 1329, i64 1367, i64 1377, i64 1416, i64 4256, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 7545, i64 7546, i64 7549, i64 7550, i64 7680, i64 7836, i64 7838, i64 7839, i64 7840, i64 7958, i64 7960, i64 7966, i64 7968, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8062, i64 8064, i64 8117, i64 8118, i64 8125, i64 8126, i64 8127, i64 8130, i64 8133, i64 8134, i64 8141, i64 8144, i64 8148, i64 8150, i64 8156, i64 8160, i64 8173, i64 8178, i64 8181, i64 8182, i64 8189, i64 8486, i64 8487, i64 8490, i64 8492, i64 8498, i64 8499, i64 8526, i64 8527, i64 8544, i64 8576, i64 8579, i64 8581, i64 9398, i64 9450, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11377, i64 11378, i64 11380, i64 11381, i64 11383, i64 11390, i64 11492, i64 11499, i64 11503, i64 11506, i64 11508, i64 11520, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 42560, i64 42606, i64 42624, i64 42652, i64 42786, i64 42800, i64 42802, i64 42864, i64 42873, i64 42888, i64 42891, i64 42894, i64 42896, i64 42900, i64 42902, i64 42926, i64 42928, i64 42930, i64 64256, i64 64263, i64 64275, i64 64280, i64 65313, i64 65339, i64 65345, i64 65371, i64 66560, i64 66640, i64 71840, i64 71904], align 16
@PL_utf8_foldable = external dso_local global %struct.sv*, align 8
@_Perl_Folds_To_Multi_Char_invlist = internal constant [62 x i64] [i64 59, i64 148565664, i64 1, i64 0, i64 223, i64 224, i64 304, i64 305, i64 329, i64 330, i64 496, i64 497, i64 912, i64 913, i64 944, i64 945, i64 1415, i64 1416, i64 7830, i64 7835, i64 7838, i64 7839, i64 8016, i64 8017, i64 8018, i64 8019, i64 8020, i64 8021, i64 8022, i64 8023, i64 8064, i64 8112, i64 8114, i64 8117, i64 8118, i64 8120, i64 8124, i64 8125, i64 8130, i64 8133, i64 8134, i64 8136, i64 8140, i64 8141, i64 8146, i64 8148, i64 8150, i64 8152, i64 8162, i64 8165, i64 8166, i64 8168, i64 8178, i64 8181, i64 8182, i64 8184, i64 8188, i64 8189, i64 64256, i64 64263, i64 64275, i64 64280], align 16
@PL_HasMultiCharFold = external dso_local global %struct.sv*, align 8
@PL_InBitmap = external dso_local global %struct.sv*, align 8
@PL_tainting = external dso_local global i8, align 1
@PL_tainted = external dso_local global i8, align 1
@.str.180 = private unnamed_addr constant [42 x i8] c"Eval-group in insecure regular expression\00", align 1
@.str.181 = private unnamed_addr constant [70 x i8] c"panic: reg returned NULL to re_op_compile for sizing pass, flags=%#lx\00", align 1
@.str.182 = private unnamed_addr constant [4 x i8] c"...\00", align 1
@.str.183 = private unnamed_addr constant [26 x i8] c"%s in regex m/%d%lu%4p%s/\00", align 1
@.str.184 = private unnamed_addr constant [20 x i8] c"Regexp out of space\00", align 1
@.str.185 = private unnamed_addr constant [7 x i8] c"msixxn\00", align 1
@.str.186 = private unnamed_addr constant [74 x i8] c"panic: reg returned NULL to re_op_compile for generation pass, flags=%#lx\00", align 1
@zero_scan_data = internal constant %struct.scan_data_t zeroinitializer, align 8
@regarglen = internal constant [94 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\00\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\02\00\00\01\01\09\01\09\02\00\01\01\01\00\00\01\01\01\01\01\01\01\00\00\00\00", align 16
@.str.187 = private unnamed_addr constant [2 x i8] c"f\00", align 1
@PL_sv_yes = external dso_local global %struct.sv, align 8
@PL_sv_no = external dso_local global %struct.sv, align 8
@.str.188 = private unnamed_addr constant [38 x i8] c"panic: Unknown flags %d in named_buff\00", align 1
@.str.189 = private unnamed_addr constant [43 x i8] c"panic: Unknown flags %d in named_buff_iter\00", align 1
@PL_sv_undef = external dso_local global %struct.sv, align 8
@.str.190 = private unnamed_addr constant [45 x i8] c"panic: Unknown flags %d in named_buff_scalar\00", align 1
@PL_curpm = external dso_local global %struct.pmop*, align 8
@PL_localizing = external dso_local global i8, align 1
@.str.191 = private unnamed_addr constant [7 x i8] c"Regexp\00", align 1
@.str.192 = private unnamed_addr constant [65 x i8] c"panic: Incorrect version for previously generated inversion list\00", align 1
@.str.193 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.194 = private unnamed_addr constant [16 x i8] c"%04lX\09INFINITY\0A\00", align 1
@.str.195 = private unnamed_addr constant [13 x i8] c"%04lX\09%04lX\0A\00", align 1
@.str.196 = private unnamed_addr constant [7 x i8] c"%04lX\0A\00", align 1
@.str.197 = private unnamed_addr constant [63 x i8] c"%sCan't dump inversion list because is in middle of iterating\0A\00", align 1
@.str.198 = private unnamed_addr constant [29 x i8] c"%s[%lu] 0x%04lX .. INFINITY\0A\00", align 1
@.str.199 = private unnamed_addr constant [28 x i8] c"%s[%lu] 0x%04lX .. 0x%04lX\0A\00", align 1
@.str.200 = private unnamed_addr constant [17 x i8] c"%s[%lu] 0x%04lX\0A\00", align 1
@PL_utf8_tofold = external dso_local global %struct.sv*, align 8
@.str.201 = private unnamed_addr constant [4 x i8] c"\E2\80\90\00", align 1
@PL_utf8_foldclosures = external dso_local global %struct.hv*, align 8
@.str.202 = private unnamed_addr constant [5 x i8] c"utf8\00", align 1
@.str.203 = private unnamed_addr constant [30 x i8] c"panic: regfree data code '%c'\00", align 1
@.str.204 = private unnamed_addr constant [32 x i8] c"Corrupted regexp opcode %d > %d\00", align 1
@.str.205 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@PL_defstash = external dso_local global %struct.hv*, align 8
@.str.206 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.207 = private unnamed_addr constant [38 x i8] c"Overloaded qr did not return a REGEXP\00", align 1
@PL_stack_sp = external dso_local global %struct.sv**, align 8
@PL_tmps_floor = external dso_local global i64, align 8
@PL_tmps_ix = external dso_local global i64, align 8
@PL_curstackinfo = external dso_local global %struct.stackinfo*, align 8
@PL_stack_base = external dso_local global %struct.sv**, align 8
@PL_curstack = external dso_local global %struct.av*, align 8
@PL_stack_max = external dso_local global %struct.sv**, align 8
@PL_errgv = external dso_local global %struct.gv*, align 8
@.str.208 = private unnamed_addr constant [4 x i8] c"%-p\00", align 1
@.str.209 = private unnamed_addr constant [2 x i8] c"d\00", align 1
@.str.210 = private unnamed_addr constant [2 x i8] c"l\00", align 1
@.str.211 = private unnamed_addr constant [2 x i8] c"u\00", align 1
@.str.212 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.213 = private unnamed_addr constant [3 x i8] c"aa\00", align 1
@.str.214 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.215 = private unnamed_addr constant [2 x i8] c"T\00", align 1
@.str.216 = private unnamed_addr constant [15 x i8] c"\12E_TRIE_MAXBUF\00", align 1
@.str.217 = private unnamed_addr constant [69 x i8] c"Quantifier unexpected on zero-length expression in regex m/%d%lu%4p/\00", align 1
@PL_XPosix_ptrs = external dso_local global [16 x %struct.sv*], align 16
@.str.218 = private unnamed_addr constant [43 x i8] c"Variable length lookbehind not implemented\00", align 1
@.str.219 = private unnamed_addr constant [66 x i8] c"Lookbehind longer than %lu not implemented in regex m/%d%lu%4p%s/\00", align 1
@PL_utf8skip = external dso_local constant [0 x i8], align 1
@PL_charclass = external dso_local constant [0 x i32], align 4
@.str.220 = private unnamed_addr constant [3 x i8] c"tu\00", align 1
@PL_fold_latin1 = external dso_local constant [0 x i8], align 1
@PL_fold = external dso_local constant [0 x i8], align 1
@.str.221 = private unnamed_addr constant [53 x i8] c"panic! In trie construction, unknown node type %u %s\00", align 1
@PL_latin1_lc = external dso_local constant [0 x i8], align 1
@.str.222 = private unnamed_addr constant [52 x i8] c"error creating/fetching widecharmap entry for 0x%lX\00", align 1
@.str.223 = private unnamed_addr constant [53 x i8] c"panic! In trie construction, no char mapping for %ld\00", align 1
@.str.224 = private unnamed_addr constant [154 x i8] c"Perl folding rules are not up-to-date for 0x%02X; please use the perlbug utility to report; in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.225 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.226 = private unnamed_addr constant [116 x i8] c"panic: attempting to append to an inversion list, but wasn't at the end of the list, final=%lu, start=%lu, match=%c\00", align 1
@.str.227 = private unnamed_addr constant [65 x i8] c"%s in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.228 = private unnamed_addr constant [50 x i8] c"In '(*VERB...)', the '(' and '*' must be adjacent\00", align 1
@.str.229 = private unnamed_addr constant [35 x i8] c"Unterminated verb pattern argument\00", align 1
@.str.230 = private unnamed_addr constant [26 x i8] c"Unterminated verb pattern\00", align 1
@.str.231 = private unnamed_addr constant [5 x i8] c"FAIL\00", align 1
@.str.232 = private unnamed_addr constant [5 x i8] c"MARK\00", align 1
@.str.233 = private unnamed_addr constant [5 x i8] c"THEN\00", align 1
@.str.234 = private unnamed_addr constant [32 x i8] c"Unknown verb pattern '%d%lu%4p'\00", align 1
@.str.235 = private unnamed_addr constant [63 x i8] c" in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.236 = private unnamed_addr constant [45 x i8] c"Verb pattern '%.*s' may not have an argument\00", align 1
@.str.237 = private unnamed_addr constant [45 x i8] c"Verb pattern '%.*s' has a mandatory argument\00", align 1
@.str.238 = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.239 = private unnamed_addr constant [46 x i8] c"In '(?...)', the '(' and '?' must be adjacent\00", align 1
@.str.240 = private unnamed_addr constant [32 x i8] c"Sequence %.3s... not terminated\00", align 1
@.str.241 = private unnamed_addr constant [34 x i8] c"Sequence (%.*s...) not recognized\00", align 1
@.str.242 = private unnamed_addr constant [32 x i8] c"Sequence (?%c... not terminated\00", align 1
@.str.243 = private unnamed_addr constant [35 x i8] c"panic: reg_scan_name returned NULL\00", align 1
@.str.244 = private unnamed_addr constant [49 x i8] c"panic: paren_name hash element allocation failed\00", align 1
@.str.245 = private unnamed_addr constant [34 x i8] c"Sequence (?%c...) not implemented\00", align 1
@.str.246 = private unnamed_addr constant [29 x i8] c"Sequence (?R) not terminated\00", align 1
@.str.247 = private unnamed_addr constant [31 x i8] c"Sequence (?&... not terminated\00", align 1
@.str.248 = private unnamed_addr constant [16 x i8] c"Illegal pattern\00", align 1
@.str.249 = private unnamed_addr constant [24 x i8] c"Expecting close bracket\00", align 1
@.str.250 = private unnamed_addr constant [31 x i8] c"Reference to nonexistent group\00", align 1
@.str.251 = private unnamed_addr constant [38 x i8] c"Sequence (%d%lu%4p...) not recognized\00", align 1
@.str.252 = private unnamed_addr constant [47 x i8] c"panic: Sequence (?{...}): no code block found\0A\00", align 1
@.str.253 = private unnamed_addr constant [49 x i8] c"Eval-group not allowed at runtime, use re 'eval'\00", align 1
@.str.254 = private unnamed_addr constant [3 x i8] c"rl\00", align 1
@.str.255 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@.str.256 = private unnamed_addr constant [33 x i8] c"Sequence (?(%c... not terminated\00", align 1
@.str.257 = private unnamed_addr constant [7 x i8] c"DEFINE\00", align 1
@.str.258 = private unnamed_addr constant [32 x i8] c"Switch condition not recognized\00", align 1
@.str.259 = private unnamed_addr constant [66 x i8] c"panic: regbranch returned NULL, flags=%#lx in regex m/%d%lu%4p%s/\00", align 1
@.str.260 = private unnamed_addr constant [40 x i8] c"(?(DEFINE)....) does not allow branches\00", align 1
@.str.261 = private unnamed_addr constant [39 x i8] c"Switch (?(condition)... not terminated\00", align 1
@.str.262 = private unnamed_addr constant [51 x i8] c"Switch (?(condition)... contains too many branches\00", align 1
@.str.263 = private unnamed_addr constant [34 x i8] c"Unknown switch condition (?(...))\00", align 1
@.str.264 = private unnamed_addr constant [23 x i8] c"Sequence (? incomplete\00", align 1
@S_reg.parens = internal constant [6 x i8] c"=!<,>\00", align 1
@.str.265 = private unnamed_addr constant [12 x i8] c"Unmatched (\00", align 1
@.str.266 = private unnamed_addr constant [12 x i8] c"Unmatched )\00", align 1
@.str.267 = private unnamed_addr constant [22 x i8] c"Junk on end of regexp\00", align 1
@.str.268 = private unnamed_addr constant [9 x i8] c"%d%lu%4p\00", align 1
@.str.269 = private unnamed_addr constant [9 x i8] c"reganode\00", align 1
@.str.270 = private unnamed_addr constant [50 x i8] c"panic: reg_node overrun trying to emit %d, %p>=%p\00", align 1
@.str.271 = private unnamed_addr constant [9 x i8] c"reg_node\00", align 1
@.str.272 = private unnamed_addr constant [31 x i8] c"Sequence (?#... not terminated\00", align 1
@.str.273 = private unnamed_addr constant [54 x i8] c"Group name must start with a non-digit word character\00", align 1
@.str.274 = private unnamed_addr constant [34 x i8] c"panic: no svname in reg_scan_name\00", align 1
@.str.275 = private unnamed_addr constant [37 x i8] c"Reference to nonexistent named group\00", align 1
@.str.276 = private unnamed_addr constant [37 x i8] c"panic: bad flag %lx in reg_scan_name\00", align 1
@.str.277 = private unnamed_addr constant [11 x i8] c"reg2Lanode\00", align 1
@.str.278 = private unnamed_addr constant [65 x i8] c"panic: regpiece returned NULL, flags=%#lx in regex m/%d%lu%4p%s/\00", align 1
@.str.279 = private unnamed_addr constant [64 x i8] c"panic: regatom returned NULL, flags=%#lx in regex m/%d%lu%4p%s/\00", align 1
@.str.280 = private unnamed_addr constant [26 x i8] c"Invalid quantifier in {,}\00", align 1
@.str.281 = private unnamed_addr constant [33 x i8] c"Quantifier in {,} bigger than %d\00", align 1
@.str.282 = private unnamed_addr constant [102 x i8] c"Quantifier {n,m} with n > m can't match in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.283 = private unnamed_addr constant [102 x i8] c"Useless use of greediness modifier '%c' in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.284 = private unnamed_addr constant [102 x i8] c"%d%lu%4p matches null string many times in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.285 = private unnamed_addr constant [19 x i8] c"Nested quantifiers\00", align 1
@.str.286 = private unnamed_addr constant [12 x i8] c"Unmatched [\00", align 1
@.str.287 = private unnamed_addr constant [76 x i8] c"panic: regclass returned NULL to regatom, flags=%#lx in regex m/%d%lu%4p%s/\00", align 1
@.str.288 = private unnamed_addr constant [71 x i8] c"panic: reg returned NULL to regatom, flags=%#lx in regex m/%d%lu%4p%s/\00", align 1
@.str.289 = private unnamed_addr constant [13 x i8] c"Internal urp\00", align 1
@.str.290 = private unnamed_addr constant [27 x i8] c"Quantifier follows nothing\00", align 1
@.str.291 = private unnamed_addr constant [79 x i8] c"\\C is deprecated in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.292 = private unnamed_addr constant [29 x i8] c"Missing right brace on \\%c{}\00", align 1
@.str.293 = private unnamed_addr constant [12 x i8] c"Empty \\%c{}\00", align 1
@.str.294 = private unnamed_addr constant [3 x i8] c"cb\00", align 1
@.str.295 = private unnamed_addr constant [36 x i8] c"'%d%lu%4p' is an unknown bound type\00", align 1
@.str.296 = private unnamed_addr constant [97 x i8] c"Using /u for '%.*s' instead of /%s in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.297 = private unnamed_addr constant [32 x i8] c"Sequence %.2s... not terminated\00", align 1
@.str.298 = private unnamed_addr constant [29 x i8] c"Reference to invalid group 0\00", align 1
@.str.299 = private unnamed_addr constant [27 x i8] c"Unterminated \\g... pattern\00", align 1
@.str.300 = private unnamed_addr constant [43 x i8] c"Reference to nonexistent or unclosed group\00", align 1
@.str.301 = private unnamed_addr constant [29 x i8] c"Unterminated \\g{...} pattern\00", align 1
@.str.302 = private unnamed_addr constant [11 x i8] c"Trailing \\\00", align 1
@.str.303 = private unnamed_addr constant [38 x i8] c"panic: grok_bslash_N set RESTART_UTF8\00", align 1
@PL_encoding = external dso_local global %struct.sv*, align 8
@PL_lex_encoding = external dso_local global %struct.sv*, align 8
@.str.304 = private unnamed_addr constant [103 x i8] c"Invalid escape in the specified encoding in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.305 = private unnamed_addr constant [103 x i8] c"Unrecognized escape \\%.*s passed through in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.306 = private unnamed_addr constant [122 x i8] c"Unescaped left brace in regex is deprecated, passed through in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@PL_NonL1NonFinalFold = external dso_local global %struct.sv*, align 8
@NonL1_Perl_Non_Final_Folds_invlist = internal constant [48 x i64] [i64 45, i64 148565664, i64 1, i64 0, i64 700, i64 701, i64 776, i64 777, i64 787, i64 788, i64 834, i64 835, i64 940, i64 941, i64 942, i64 943, i64 945, i64 946, i64 951, i64 952, i64 953, i64 954, i64 961, i64 962, i64 965, i64 966, i64 969, i64 970, i64 974, i64 975, i64 1381, i64 1382, i64 1396, i64 1397, i64 1406, i64 1407, i64 7936, i64 7944, i64 7968, i64 7976, i64 8032, i64 8040, i64 8048, i64 8049, i64 8052, i64 8053, i64 8060, i64 8061], align 16
@.str.307 = private unnamed_addr constant [18 x i8] c"Internal disaster\00", align 1
@.str.308 = private unnamed_addr constant [11 x i8] c"# comment\0A\00", align 1
@.str.309 = private unnamed_addr constant [116 x i8] c"POSIX syntax [%c %c] belongs inside character classes in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.310 = private unnamed_addr constant [59 x i8] c"\\N in a character class must be a named character: \\N{...}\00", align 1
@.str.311 = private unnamed_addr constant [17 x i8] c"Zero length \\N{}\00", align 1
@.str.312 = private unnamed_addr constant [107 x i8] c"Ignoring zero length \\N{} in character class in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.313 = private unnamed_addr constant [88 x i8] c"\\N{} in inverted character class or as a range end-point is restricted to one character\00", align 1
@.str.314 = private unnamed_addr constant [129 x i8] c"Using just the first character returned by \\N{} in character class in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.315 = private unnamed_addr constant [10 x i8] c"%s%.*s%s\0A\00", align 1
@.str.316 = private unnamed_addr constant [3 x i8] c"__\00", align 1
@.str.317 = private unnamed_addr constant [3 x i8] c"_i\00", align 1
@PL_curstash = external dso_local global %struct.hv*, align 8
@.str.318 = private unnamed_addr constant [31 x i8] c"Property '%d%lu%4p' is unknown\00", align 1
@.str.319 = private unnamed_addr constant [3 x i8] c"::\00", align 1
@.str.320 = private unnamed_addr constant [5 x i8] c"main\00", align 1
@.str.321 = private unnamed_addr constant [7 x i8] c"%s::%s\00", align 1
@.str.322 = private unnamed_addr constant [18 x i8] c"%cutf8::%d%lu%4p\0A\00", align 1
@.str.323 = private unnamed_addr constant [28 x i8] c"Need exactly 3 octal digits\00", align 1
@.str.324 = private unnamed_addr constant [41 x i8] c"Invalid escape in the specified encoding\00", align 1
@.str.325 = private unnamed_addr constant [43 x i8] c"Unrecognized escape \\%c in character class\00", align 1
@.str.326 = private unnamed_addr constant [120 x i8] c"Unrecognized escape \\%c in character class passed through in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.327 = private unnamed_addr constant [26 x i8] c"False [] range \22%d%lu%4p\22\00", align 1
@.str.328 = private unnamed_addr constant [88 x i8] c"False [] range \22%d%lu%4p\22 in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.329 = private unnamed_addr constant [28 x i8] c"Invalid [] range \22%d%lu%4p\22\00", align 1
@.str.330 = private unnamed_addr constant [23 x i8] c"False [] range \22%*.*s\22\00", align 1
@.str.331 = private unnamed_addr constant [85 x i8] c"False [] range \22%*.*s\22 in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.332 = private unnamed_addr constant [8 x i8] c"\\x{%lX}\00", align 1
@.str.333 = private unnamed_addr constant [107 x i8] c"Both or neither range ends should be Unicode in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.334 = private unnamed_addr constant [137 x i8] c"Ranges of ASCII printables should be some subset of \220-9\22, \22A-Z\22, or \22a-z\22 in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.335 = private unnamed_addr constant [115 x i8] c"Ranges of digits should be from the same group of 10 in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.336 = private unnamed_addr constant [108 x i8] c"\22%.*s\22 is more clearly written simply as \22%s\22 in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.337 = private unnamed_addr constant [3 x i8] c"?:\00", align 1
@.str.338 = private unnamed_addr constant [2 x i8] c"|\00", align 1
@.str.339 = private unnamed_addr constant [3 x i8] c"|[\00", align 1
@.str.340 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@.str.341 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.342 = private unnamed_addr constant [30 x i8] c"Unmatched '%c' in POSIX class\00", align 1
@.str.343 = private unnamed_addr constant [5 x i8] c"word\00", align 1
@.str.344 = private unnamed_addr constant [5 x i8] c"alph\00", align 1
@.str.345 = private unnamed_addr constant [5 x i8] c"spac\00", align 1
@.str.346 = private unnamed_addr constant [5 x i8] c"grap\00", align 1
@.str.347 = private unnamed_addr constant [5 x i8] c"asci\00", align 1
@.str.348 = private unnamed_addr constant [5 x i8] c"blan\00", align 1
@.str.349 = private unnamed_addr constant [5 x i8] c"cntr\00", align 1
@.str.350 = private unnamed_addr constant [5 x i8] c"alnu\00", align 1
@.str.351 = private unnamed_addr constant [5 x i8] c"lowe\00", align 1
@.str.352 = private unnamed_addr constant [5 x i8] c"uppe\00", align 1
@.str.353 = private unnamed_addr constant [5 x i8] c"digi\00", align 1
@.str.354 = private unnamed_addr constant [5 x i8] c"prin\00", align 1
@.str.355 = private unnamed_addr constant [5 x i8] c"punc\00", align 1
@.str.356 = private unnamed_addr constant [7 x i8] c"xdigit\00", align 1
@.str.357 = private unnamed_addr constant [33 x i8] c"POSIX class [:%d%lu%4p:] unknown\00", align 1
@.str.358 = private unnamed_addr constant [55 x i8] c"POSIX syntax [%c %c] is reserved for future extensions\00", align 1
@.str.359 = private unnamed_addr constant [29 x i8] c"Unmatched '[' in POSIX class\00", align 1
@.str.360 = private unnamed_addr constant [3 x i8] c"\\a\00", align 1
@.str.361 = private unnamed_addr constant [3 x i8] c"\\b\00", align 1
@.str.362 = private unnamed_addr constant [3 x i8] c"\\e\00", align 1
@.str.363 = private unnamed_addr constant [3 x i8] c"\\f\00", align 1
@.str.364 = private unnamed_addr constant [3 x i8] c"\\n\00", align 1
@.str.365 = private unnamed_addr constant [3 x i8] c"\\r\00", align 1
@.str.366 = private unnamed_addr constant [3 x i8] c"\\t\00", align 1
@.str.367 = private unnamed_addr constant [23 x i8] c"Missing braces on \\N{}\00", align 1
@.str.368 = private unnamed_addr constant [3 x i8] c"U+\00", align 1
@.str.369 = private unnamed_addr constant [39 x i8] c"\\N{NAME} must be resolved by the lexer\00", align 1
@.str.370 = private unnamed_addr constant [3 x i8] c".}\00", align 1
@.str.371 = private unnamed_addr constant [40 x i8] c"Invalid hexadecimal number in \\N{U+...}\00", align 1
@.str.372 = private unnamed_addr constant [4 x i8] c"\\x{\00", align 1
@.str.373 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@.str.374 = private unnamed_addr constant [77 x i8] c"panic: reg returned NULL to grok_bslash_N, flags=%#lx in regex m/%d%lu%4p%s/\00", align 1
@.str.375 = private unnamed_addr constant [23 x i8] c"Missing braces on \\o{}\00", align 1
@.str.376 = private unnamed_addr constant [27 x i8] c"Missing right brace on \\o{\00", align 1
@.str.377 = private unnamed_addr constant [22 x i8] c"Number with no digits\00", align 1
@.str.378 = private unnamed_addr constant [20 x i8] c"Non-octal character\00", align 1
@.str.379 = private unnamed_addr constant [50 x i8] c"Non-octal character '%c'.  Resolved as \22\\o{%.*s}\22\00", align 1
@.str.380 = private unnamed_addr constant [18 x i8] c"Non-hex character\00", align 1
@.str.381 = private unnamed_addr constant [45 x i8] c"Use \\x{...} for more than two hex characters\00", align 1
@.str.382 = private unnamed_addr constant [28 x i8] c"Missing right brace on \\x{}\00", align 1
@.str.383 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.384 = private unnamed_addr constant [49 x i8] c"Character following \22\\c\22 must be printable ASCII\00", align 1
@.str.385 = private unnamed_addr constant [26 x i8] c"Use \22%c\22 instead of \22\\c{\22\00", align 1
@.str.386 = private unnamed_addr constant [23 x i8] c"Sequence \22\\c{\22 invalid\00", align 1
@.str.387 = private unnamed_addr constant [46 x i8] c"\22\\c%c\22 is more clearly written simply as \22%s\22\00", align 1
@.str.388 = private unnamed_addr constant [32 x i8] c"'%.*s' resolved to '\\o{%.*s}%c'\00", align 1
@.str.389 = private unnamed_addr constant [29 x i8] c"(?[...]) not valid in locale\00", align 1
@.str.390 = private unnamed_addr constant [80 x i8] c"panic: regclass returned NULL to handle_sets, flags=%#lx in regex m/%d%lu%4p%s/\00", align 1
@.str.391 = private unnamed_addr constant [25 x i8] c"Syntax error in (?[...])\00", align 1
@.str.392 = private unnamed_addr constant [101 x i8] c"The regex_sets feature is experimental in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.393 = private unnamed_addr constant [33 x i8] c"panic: Read past end of '(?[ ])'\00", align 1
@.str.394 = private unnamed_addr constant [27 x i8] c"Expecting '(?flags:(?[...'\00", align 1
@.str.395 = private unnamed_addr constant [42 x i8] c"Unexpected '(' with no preceding operator\00", align 1
@.str.396 = private unnamed_addr constant [15 x i8] c"Unexpected ')'\00", align 1
@.str.397 = private unnamed_addr constant [58 x i8] c"Unexpected binary operator '%c' with no preceding operand\00", align 1
@.str.398 = private unnamed_addr constant [21 x i8] c"Unexpected character\00", align 1
@.str.399 = private unnamed_addr constant [35 x i8] c"Operand with no preceding operator\00", align 1
@.str.400 = private unnamed_addr constant [38 x i8] c"Incomplete expression within '(?[ ])'\00", align 1
@.str.401 = private unnamed_addr constant [16 x i8] c"\\x{%lX}-\\x{%lX}\00", align 1
@.str.402 = private unnamed_addr constant [51 x i8] c"Regexp modifier \22%c\22 may appear a maximum of twice\00", align 1
@.str.403 = private unnamed_addr constant [42 x i8] c"Regexp modifier \22%c\22 may not appear twice\00", align 1
@.str.404 = private unnamed_addr constant [54 x i8] c"Regexp modifiers \22%c\22 and \22%c\22 are mutually exclusive\00", align 1
@.str.405 = private unnamed_addr constant [50 x i8] c"Regexp modifier \22%c\22 may not appear after the \22-\22\00", align 1
@.str.406 = private unnamed_addr constant [98 x i8] c"Useless (%s%c) - %suse /%c modifier in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.407 = private unnamed_addr constant [3 x i8] c"?-\00", align 1
@.str.408 = private unnamed_addr constant [7 x i8] c"don't \00", align 1
@.str.409 = private unnamed_addr constant [97 x i8] c"Useless (%sc) - %suse /gc modifier in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.410 = private unnamed_addr constant [83 x i8] c"Useless use of (?-p) in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/\00", align 1
@.str.411 = private unnamed_addr constant [55 x i8] c"Having more than one /%c regexp modifier is deprecated\00", align 1
@.str.412 = private unnamed_addr constant [30 x i8] c"Sequence (?... not terminated\00", align 1
@reg_off_by_arg = internal constant <{ [72 x i8], [22 x i8] }> <{ [72 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\02\02\01\01\00\00\00\00\01", [22 x i8] zeroinitializer }>, align 16

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.p5rx* @Perl_re_compile(%struct.sv* %pattern, i32 %rx_flags) #0 {
entry:
  %pattern.addr = alloca %struct.sv*, align 8
  %rx_flags.addr = alloca i32, align 4
  %pat = alloca %struct.sv*, align 8
  store %struct.sv* %pattern, %struct.sv** %pattern.addr, align 8
  store i32 %rx_flags, i32* %rx_flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %pattern.addr, align 8
  store %struct.sv* %0, %struct.sv** %pat, align 8
  %1 = load i32, i32* %rx_flags.addr, align 4
  %call = call %struct.p5rx* @Perl_re_op_compile(%struct.sv** %pat, i32 1, %struct.op* null, %struct.regexp_engine* bitcast ({ %struct.p5rx* (%struct.sv*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i8* (%struct.p5rx*, %struct.sv*, i8*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, %struct.sv* (%struct.p5rx*)*, void (%struct.p5rx*)*, void (%struct.p5rx*, i32, %struct.sv*)*, void (%struct.p5rx*, i32, %struct.sv*)*, i32 (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* }* @PL_core_reg_engine to %struct.regexp_engine*), %struct.p5rx* null, i8* null, i32 %1, i32 0)
  ret %struct.p5rx* %call
}

declare dso_local i32 @Perl_regexec_flags(%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32) #1

declare dso_local i8* @Perl_re_intuit_start(%struct.p5rx*, %struct.sv*, i8*, i8*, i8*, i32, %struct.re_scream_pos_data_s*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_re_intuit_string(%struct.p5rx* %r) #0 {
entry:
  %r.addr = alloca %struct.p5rx*, align 8
  %prog = alloca %struct.regexp*, align 8
  store %struct.p5rx* %r, %struct.p5rx** %r.addr, align 8
  %0 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %call = call %struct.regexp* @S_ReANY(%struct.p5rx* %0)
  store %struct.regexp* %call, %struct.regexp** %prog, align 8
  %1 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %sv_flags = getelementptr inbounds %struct.p5rx, %struct.p5rx* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 536870912
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.regexp*, %struct.regexp** %prog, align 8
  %substrs = getelementptr inbounds %struct.regexp, %struct.regexp* %3, i32 0, i32 11
  %4 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs, align 8
  %data = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data, i64 0, i64 2
  %utf8_substr = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx, i32 0, i32 3
  %5 = load %struct.sv*, %struct.sv** %utf8_substr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.regexp*, %struct.regexp** %prog, align 8
  %substrs1 = getelementptr inbounds %struct.regexp, %struct.regexp* %6, i32 0, i32 11
  %7 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1, align 8
  %data2 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %7, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data2, i64 0, i64 2
  %substr = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx3, i32 0, i32 2
  %8 = load %struct.sv*, %struct.sv** %substr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %5, %cond.true ], [ %8, %cond.false ]
  ret %struct.sv* %cond
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_regfree_internal(%struct.p5rx* %rx) #0 {
entry:
  %rx.addr = alloca %struct.p5rx*, align 8
  %r = alloca %struct.regexp*, align 8
  %ri = alloca %struct.regexp_internal*, align 8
  %n = alloca i32, align 4
  %n5 = alloca i32, align 4
  %refcount = alloca i32, align 4
  %aho = alloca %struct._reg_ac_data*, align 8
  %refcount41 = alloca i32, align 4
  %trie = alloca %struct._reg_trie_data*, align 8
  store %struct.p5rx* %rx, %struct.p5rx** %rx.addr, align 8
  %0 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %call = call %struct.regexp* @S_ReANY(%struct.p5rx* %0)
  store %struct.regexp* %call, %struct.regexp** %r, align 8
  %1 = load %struct.regexp*, %struct.regexp** %r, align 8
  %pprivate = getelementptr inbounds %struct.regexp, %struct.regexp* %1, i32 0, i32 14
  %2 = load i8*, i8** %pprivate, align 8
  %3 = bitcast i8* %2 to %struct.regexp_internal*
  store %struct.regexp_internal* %3, %struct.regexp_internal** %ri, align 8
  %4 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %code_blocks = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %4, i32 0, i32 4
  %5 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks, align 8
  %tobool = icmp ne %struct.reg_code_block* %5, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load i32, i32* %n, align 4
  %7 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %num_code_blocks = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %7, i32 0, i32 5
  %8 = load i32, i32* %num_code_blocks, align 8
  %cmp = icmp slt i32 %6, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %code_blocks1 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %9, i32 0, i32 4
  %10 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks1, align 8
  %11 = load i32, i32* %n, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %10, i64 %idxprom
  %src_regex = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx, i32 0, i32 3
  %12 = load %struct.p5rx*, %struct.p5rx** %src_regex, align 8
  %13 = bitcast %struct.p5rx* %12 to i8*
  %14 = bitcast i8* %13 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %n, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %code_blocks2 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %16, i32 0, i32 4
  %17 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks2, align 8
  %18 = bitcast %struct.reg_code_block* %17 to i8*
  call void @Perl_safesysfree(i8* %18)
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %19 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %data = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %19, i32 0, i32 3
  %20 = load %struct.reg_data*, %struct.reg_data** %data, align 8
  %tobool3 = icmp ne %struct.reg_data* %20, null
  br i1 %tobool3, label %if.then4, label %if.end72

if.then4:                                         ; preds = %if.end
  %21 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %data6 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %21, i32 0, i32 3
  %22 = load %struct.reg_data*, %struct.reg_data** %data6, align 8
  %count = getelementptr inbounds %struct.reg_data, %struct.reg_data* %22, i32 0, i32 0
  %23 = load i32, i32* %count, align 8
  store i32 %23, i32* %n5, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.then4
  %24 = load i32, i32* %n5, align 4
  %dec = add nsw i32 %24, -1
  store i32 %dec, i32* %n5, align 4
  %cmp7 = icmp sge i32 %dec, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %25 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %data8 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %25, i32 0, i32 3
  %26 = load %struct.reg_data*, %struct.reg_data** %data8, align 8
  %what = getelementptr inbounds %struct.reg_data, %struct.reg_data* %26, i32 0, i32 1
  %27 = load i8*, i8** %what, align 8
  %28 = load i32, i32* %n5, align 4
  %idxprom9 = sext i32 %28 to i64
  %arrayidx10 = getelementptr inbounds i8, i8* %27, i64 %idxprom9
  %29 = load i8, i8* %arrayidx10, align 1
  %conv = zext i8 %29 to i32
  switch i32 %conv, label %sw.default [
    i32 97, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 83, label %sw.bb
    i32 117, label %sw.bb
    i32 102, label %sw.bb15
    i32 108, label %sw.bb20
    i32 76, label %sw.bb20
    i32 84, label %sw.bb21
    i32 116, label %sw.bb40
  ]

sw.bb:                                            ; preds = %while.body, %while.body, %while.body, %while.body, %while.body
  %30 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %data11 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %30, i32 0, i32 3
  %31 = load %struct.reg_data*, %struct.reg_data** %data11, align 8
  %data12 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %31, i32 0, i32 2
  %32 = load i32, i32* %n5, align 4
  %idxprom13 = sext i32 %32 to i64
  %arrayidx14 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data12, i64 0, i64 %idxprom13
  %33 = load i8*, i8** %arrayidx14, align 8
  %34 = bitcast i8* %33 to %struct.sv*
  %35 = bitcast %struct.sv* %34 to i8*
  %36 = bitcast i8* %35 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %36)
  br label %sw.epilog

sw.bb15:                                          ; preds = %while.body
  %37 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %data16 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %37, i32 0, i32 3
  %38 = load %struct.reg_data*, %struct.reg_data** %data16, align 8
  %data17 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %38, i32 0, i32 2
  %39 = load i32, i32* %n5, align 4
  %idxprom18 = sext i32 %39 to i64
  %arrayidx19 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data17, i64 0, i64 %idxprom18
  %40 = load i8*, i8** %arrayidx19, align 8
  call void @Perl_safesysfree(i8* %40)
  br label %sw.epilog

sw.bb20:                                          ; preds = %while.body, %while.body
  br label %sw.epilog

sw.bb21:                                          ; preds = %while.body
  %41 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %data22 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %41, i32 0, i32 3
  %42 = load %struct.reg_data*, %struct.reg_data** %data22, align 8
  %data23 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %42, i32 0, i32 2
  %43 = load i32, i32* %n5, align 4
  %idxprom24 = sext i32 %43 to i64
  %arrayidx25 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data23, i64 0, i64 %idxprom24
  %44 = load i8*, i8** %arrayidx25, align 8
  %45 = bitcast i8* %44 to %struct._reg_ac_data*
  store %struct._reg_ac_data* %45, %struct._reg_ac_data** %aho, align 8
  %46 = load %struct._reg_ac_data*, %struct._reg_ac_data** %aho, align 8
  %refcount26 = getelementptr inbounds %struct._reg_ac_data, %struct._reg_ac_data* %46, i32 0, i32 0
  %47 = load i32, i32* %refcount26, align 8
  %dec27 = add i32 %47, -1
  store i32 %dec27, i32* %refcount26, align 8
  store i32 %dec27, i32* %refcount, align 4
  %48 = load i32, i32* %refcount, align 4
  %tobool28 = icmp ne i32 %48, 0
  br i1 %tobool28, label %if.end39, label %if.then29

if.then29:                                        ; preds = %sw.bb21
  %49 = load %struct._reg_ac_data*, %struct._reg_ac_data** %aho, align 8
  %states = getelementptr inbounds %struct._reg_ac_data, %struct._reg_ac_data* %49, i32 0, i32 3
  %50 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states, align 8
  %51 = bitcast %struct._reg_trie_state* %50 to i8*
  call void @free(i8* %51) #5
  %52 = load %struct._reg_ac_data*, %struct._reg_ac_data** %aho, align 8
  %fail = getelementptr inbounds %struct._reg_ac_data, %struct._reg_ac_data* %52, i32 0, i32 2
  %53 = load i32*, i32** %fail, align 8
  %54 = bitcast i32* %53 to i8*
  call void @free(i8* %54) #5
  %55 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %data30 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %55, i32 0, i32 3
  %56 = load %struct.reg_data*, %struct.reg_data** %data30, align 8
  %data31 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %56, i32 0, i32 2
  %57 = load i32, i32* %n5, align 4
  %idxprom32 = sext i32 %57 to i64
  %arrayidx33 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data31, i64 0, i64 %idxprom32
  %58 = load i8*, i8** %arrayidx33, align 8
  call void @free(i8* %58) #5
  %59 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %regstclass = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %59, i32 0, i32 2
  %60 = load %struct.regnode*, %struct.regnode** %regstclass, align 8
  %tobool34 = icmp ne %struct.regnode* %60, null
  br i1 %tobool34, label %if.then35, label %if.end38

if.then35:                                        ; preds = %if.then29
  %61 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %regstclass36 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %61, i32 0, i32 2
  %62 = load %struct.regnode*, %struct.regnode** %regstclass36, align 8
  %63 = bitcast %struct.regnode* %62 to i8*
  call void @free(i8* %63) #5
  %64 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %regstclass37 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %64, i32 0, i32 2
  store %struct.regnode* null, %struct.regnode** %regstclass37, align 8
  br label %if.end38

if.end38:                                         ; preds = %if.then35, %if.then29
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %sw.bb21
  br label %sw.epilog

sw.bb40:                                          ; preds = %while.body
  %65 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %data42 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %65, i32 0, i32 3
  %66 = load %struct.reg_data*, %struct.reg_data** %data42, align 8
  %data43 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %66, i32 0, i32 2
  %67 = load i32, i32* %n5, align 4
  %idxprom44 = sext i32 %67 to i64
  %arrayidx45 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data43, i64 0, i64 %idxprom44
  %68 = load i8*, i8** %arrayidx45, align 8
  %69 = bitcast i8* %68 to %struct._reg_trie_data*
  store %struct._reg_trie_data* %69, %struct._reg_trie_data** %trie, align 8
  %70 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %refcount46 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %70, i32 0, i32 0
  %71 = load i32, i32* %refcount46, align 8
  %dec47 = add i32 %71, -1
  store i32 %dec47, i32* %refcount46, align 8
  store i32 %dec47, i32* %refcount41, align 4
  %72 = load i32, i32* %refcount41, align 4
  %tobool48 = icmp ne i32 %72, 0
  br i1 %tobool48, label %if.end63, label %if.then49

if.then49:                                        ; preds = %sw.bb40
  %73 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %charmap = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %73, i32 0, i32 2
  %74 = load i16*, i16** %charmap, align 8
  %75 = bitcast i16* %74 to i8*
  call void @free(i8* %75) #5
  %76 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states50 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %76, i32 0, i32 3
  %77 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states50, align 8
  %78 = bitcast %struct._reg_trie_state* %77 to i8*
  call void @free(i8* %78) #5
  %79 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %79, i32 0, i32 4
  %80 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans, align 8
  %81 = bitcast %struct._reg_trie_trans* %80 to i8*
  call void @free(i8* %81) #5
  %82 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %82, i32 0, i32 5
  %83 = load i8*, i8** %bitmap, align 8
  %tobool51 = icmp ne i8* %83, null
  br i1 %tobool51, label %if.then52, label %if.end54

if.then52:                                        ; preds = %if.then49
  %84 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap53 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %84, i32 0, i32 5
  %85 = load i8*, i8** %bitmap53, align 8
  call void @free(i8* %85) #5
  br label %if.end54

if.end54:                                         ; preds = %if.then52, %if.then49
  %86 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %86, i32 0, i32 6
  %87 = load i16*, i16** %jump, align 8
  %tobool55 = icmp ne i16* %87, null
  br i1 %tobool55, label %if.then56, label %if.end58

if.then56:                                        ; preds = %if.end54
  %88 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump57 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %88, i32 0, i32 6
  %89 = load i16*, i16** %jump57, align 8
  %90 = bitcast i16* %89 to i8*
  call void @free(i8* %90) #5
  br label %if.end58

if.end58:                                         ; preds = %if.then56, %if.end54
  %91 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %91, i32 0, i32 7
  %92 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo, align 8
  %93 = bitcast %struct.reg_trie_wordinfo* %92 to i8*
  call void @free(i8* %93) #5
  %94 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %data59 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %94, i32 0, i32 3
  %95 = load %struct.reg_data*, %struct.reg_data** %data59, align 8
  %data60 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %95, i32 0, i32 2
  %96 = load i32, i32* %n5, align 4
  %idxprom61 = sext i32 %96 to i64
  %arrayidx62 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data60, i64 0, i64 %idxprom61
  %97 = load i8*, i8** %arrayidx62, align 8
  call void @free(i8* %97) #5
  br label %if.end63

if.end63:                                         ; preds = %if.end58, %sw.bb40
  br label %sw.epilog

sw.default:                                       ; preds = %while.body
  %98 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %data64 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %98, i32 0, i32 3
  %99 = load %struct.reg_data*, %struct.reg_data** %data64, align 8
  %what65 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %99, i32 0, i32 1
  %100 = load i8*, i8** %what65, align 8
  %101 = load i32, i32* %n5, align 4
  %idxprom66 = sext i32 %101 to i64
  %arrayidx67 = getelementptr inbounds i8, i8* %100, i64 %idxprom66
  %102 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %102 to i32
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.203, i64 0, i64 0), i32 %conv68)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end63, %if.end39, %sw.bb20, %sw.bb15, %sw.bb
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %103 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %data69 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %103, i32 0, i32 3
  %104 = load %struct.reg_data*, %struct.reg_data** %data69, align 8
  %what70 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %104, i32 0, i32 1
  %105 = load i8*, i8** %what70, align 8
  call void @Perl_safesysfree(i8* %105)
  %106 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %data71 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %106, i32 0, i32 3
  %107 = load %struct.reg_data*, %struct.reg_data** %data71, align 8
  %108 = bitcast %struct.reg_data* %107 to i8*
  call void @Perl_safesysfree(i8* %108)
  br label %if.end72

if.end72:                                         ; preds = %while.end, %if.end
  %109 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %110 = bitcast %struct.regexp_internal* %109 to i8*
  call void @Perl_safesysfree(i8* %110)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_reg_numbered_buff_fetch(%struct.p5rx* %r, i32 %paren, %struct.sv* %sv) #0 {
entry:
  %r.addr = alloca %struct.p5rx*, align 8
  %paren.addr = alloca i32, align 4
  %sv.addr = alloca %struct.sv*, align 8
  %rx = alloca %struct.regexp*, align 8
  %s = alloca i8*, align 8
  %i = alloca i64, align 8
  %s1 = alloca i64, align 8
  %t1 = alloca i64, align 8
  %n = alloca i32, align 4
  %keepcopy = alloca i8, align 1
  %oldtainted = alloca i32, align 4
  %mg = alloca %struct.magic*, align 8
  %mgt = alloca %struct.magic*, align 8
  store %struct.p5rx* %r, %struct.p5rx** %r.addr, align 8
  store i32 %paren, i32* %paren.addr, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %call = call %struct.regexp* @S_ReANY(%struct.p5rx* %0)
  store %struct.regexp* %call, %struct.regexp** %rx, align 8
  store i8* null, i8** %s, align 8
  store i64 0, i64* %i, align 8
  %1 = load i32, i32* %paren.addr, align 4
  store i32 %1, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %cmp = icmp eq i32 %2, -5
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %n, align 4
  %cmp1 = icmp eq i32 %3, -3
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %n, align 4
  %cmp3 = icmp eq i32 %4, -4
  br i1 %cmp3, label %if.then, label %if.end19

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %5 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %extflags = getelementptr inbounds %struct.regexp, %struct.regexp* %5, i32 0, i32 7
  %6 = load i32, i32* %extflags, align 8
  %and = and i32 %6, 64
  %tobool = icmp ne i32 %and, 0
  %7 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  %tobool4 = icmp ne i32 %cond, 0
  %frombool = zext i1 %tobool4 to i8
  store i8 %frombool, i8* %keepcopy, align 1
  %8 = load i8, i8* %keepcopy, align 1
  %tobool5 = trunc i8 %8 to i1
  br i1 %tobool5, label %if.end15, label %if.then6

if.then6:                                         ; preds = %if.then
  %9 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %tobool7 = icmp ne %struct.pmop* %9, null
  br i1 %tobool7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then6
  %10 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %11 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %11, i32 0, i32 9
  %12 = load %struct.p5rx*, %struct.p5rx** %op_pmregexp, align 8
  %cmp8 = icmp eq %struct.p5rx* %10, %12
  br i1 %cmp8, label %if.then9, label %if.end

if.then9:                                         ; preds = %land.lhs.true
  %13 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %13, i32 0, i32 10
  %14 = load i32, i32* %op_pmflags, align 8
  %and10 = and i32 %14, 64
  %tobool11 = icmp ne i32 %and10, 0
  %15 = zext i1 %tobool11 to i64
  %cond12 = select i1 %tobool11, i32 1, i32 0
  %tobool13 = icmp ne i32 %cond12, 0
  %frombool14 = zext i1 %tobool13 to i8
  store i8 %frombool14, i8* %keepcopy, align 1
  br label %if.end

if.end:                                           ; preds = %if.then9, %land.lhs.true, %if.then6
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  %16 = load i8, i8* %keepcopy, align 1
  %tobool16 = trunc i8 %16 to i1
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %if.end15
  br label %ret_undef

if.end18:                                         ; preds = %if.end15
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %lor.lhs.false2
  %17 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %subbeg = getelementptr inbounds %struct.regexp, %struct.regexp* %17, i32 0, i32 18
  %18 = load i8*, i8** %subbeg, align 8
  %tobool20 = icmp ne i8* %18, null
  br i1 %tobool20, label %if.end22, label %if.then21

if.then21:                                        ; preds = %if.end19
  br label %ret_undef

if.end22:                                         ; preds = %if.end19
  %19 = load i32, i32* %n, align 4
  %cmp23 = icmp eq i32 %19, -3
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end22
  store i32 0, i32* %n, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %if.end22
  %20 = load i32, i32* %n, align 4
  %cmp26 = icmp eq i32 %20, -2
  br i1 %cmp26, label %land.lhs.true29, label %lor.lhs.false27

lor.lhs.false27:                                  ; preds = %if.end25
  %21 = load i32, i32* %n, align 4
  %cmp28 = icmp eq i32 %21, -5
  br i1 %cmp28, label %land.lhs.true29, label %if.else

land.lhs.true29:                                  ; preds = %lor.lhs.false27, %if.end25
  %22 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs = getelementptr inbounds %struct.regexp, %struct.regexp* %22, i32 0, i32 17
  %23 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs, align 8
  %arrayidx = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %23, i64 0
  %start = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx, i32 0, i32 0
  %24 = load i64, i64* %start, align 8
  %cmp30 = icmp ne i64 %24, -1
  br i1 %cmp30, label %if.then31, label %if.else

if.then31:                                        ; preds = %land.lhs.true29
  %25 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs32 = getelementptr inbounds %struct.regexp, %struct.regexp* %25, i32 0, i32 17
  %26 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs32, align 8
  %arrayidx33 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %26, i64 0
  %start34 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx33, i32 0, i32 0
  %27 = load i64, i64* %start34, align 8
  store i64 %27, i64* %i, align 8
  %28 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %subbeg35 = getelementptr inbounds %struct.regexp, %struct.regexp* %28, i32 0, i32 18
  %29 = load i8*, i8** %subbeg35, align 8
  store i8* %29, i8** %s, align 8
  br label %if.end78

if.else:                                          ; preds = %land.lhs.true29, %lor.lhs.false27
  %30 = load i32, i32* %n, align 4
  %cmp36 = icmp eq i32 %30, -1
  br i1 %cmp36, label %land.lhs.true39, label %lor.lhs.false37

lor.lhs.false37:                                  ; preds = %if.else
  %31 = load i32, i32* %n, align 4
  %cmp38 = icmp eq i32 %31, -4
  br i1 %cmp38, label %land.lhs.true39, label %if.else53

land.lhs.true39:                                  ; preds = %lor.lhs.false37, %if.else
  %32 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs40 = getelementptr inbounds %struct.regexp, %struct.regexp* %32, i32 0, i32 17
  %33 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs40, align 8
  %arrayidx41 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %33, i64 0
  %end = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx41, i32 0, i32 1
  %34 = load i64, i64* %end, align 8
  %cmp42 = icmp ne i64 %34, -1
  br i1 %cmp42, label %if.then43, label %if.else53

if.then43:                                        ; preds = %land.lhs.true39
  %35 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %subbeg44 = getelementptr inbounds %struct.regexp, %struct.regexp* %35, i32 0, i32 18
  %36 = load i8*, i8** %subbeg44, align 8
  %37 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %suboffset = getelementptr inbounds %struct.regexp, %struct.regexp* %37, i32 0, i32 21
  %38 = load i64, i64* %suboffset, align 8
  %idx.neg = sub i64 0, %38
  %add.ptr = getelementptr inbounds i8, i8* %36, i64 %idx.neg
  %39 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs45 = getelementptr inbounds %struct.regexp, %struct.regexp* %39, i32 0, i32 17
  %40 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs45, align 8
  %arrayidx46 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %40, i64 0
  %end47 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx46, i32 0, i32 1
  %41 = load i64, i64* %end47, align 8
  %add.ptr48 = getelementptr inbounds i8, i8* %add.ptr, i64 %41
  store i8* %add.ptr48, i8** %s, align 8
  %42 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %sublen = getelementptr inbounds %struct.regexp, %struct.regexp* %42, i32 0, i32 20
  %43 = load i64, i64* %sublen, align 8
  %44 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %suboffset49 = getelementptr inbounds %struct.regexp, %struct.regexp* %44, i32 0, i32 21
  %45 = load i64, i64* %suboffset49, align 8
  %add = add nsw i64 %43, %45
  %46 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs50 = getelementptr inbounds %struct.regexp, %struct.regexp* %46, i32 0, i32 17
  %47 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs50, align 8
  %arrayidx51 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %47, i64 0
  %end52 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx51, i32 0, i32 1
  %48 = load i64, i64* %end52, align 8
  %sub = sub nsw i64 %add, %48
  store i64 %sub, i64* %i, align 8
  br label %if.end77

if.else53:                                        ; preds = %land.lhs.true39, %lor.lhs.false37
  %49 = load i32, i32* %n, align 4
  %cmp54 = icmp sle i32 0, %49
  br i1 %cmp54, label %land.lhs.true55, label %if.else75

land.lhs.true55:                                  ; preds = %if.else53
  %50 = load i32, i32* %n, align 4
  %51 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %51, i32 0, i32 12
  %52 = load i32, i32* %nparens, align 8
  %cmp56 = icmp sle i32 %50, %52
  br i1 %cmp56, label %land.lhs.true57, label %if.else75

land.lhs.true57:                                  ; preds = %land.lhs.true55
  %53 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs58 = getelementptr inbounds %struct.regexp, %struct.regexp* %53, i32 0, i32 17
  %54 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs58, align 8
  %55 = load i32, i32* %n, align 4
  %idxprom = sext i32 %55 to i64
  %arrayidx59 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %54, i64 %idxprom
  %start60 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx59, i32 0, i32 0
  %56 = load i64, i64* %start60, align 8
  store i64 %56, i64* %s1, align 8
  %cmp61 = icmp ne i64 %56, -1
  br i1 %cmp61, label %land.lhs.true62, label %if.else75

land.lhs.true62:                                  ; preds = %land.lhs.true57
  %57 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs63 = getelementptr inbounds %struct.regexp, %struct.regexp* %57, i32 0, i32 17
  %58 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs63, align 8
  %59 = load i32, i32* %n, align 4
  %idxprom64 = sext i32 %59 to i64
  %arrayidx65 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %58, i64 %idxprom64
  %end66 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx65, i32 0, i32 1
  %60 = load i64, i64* %end66, align 8
  store i64 %60, i64* %t1, align 8
  %cmp67 = icmp ne i64 %60, -1
  br i1 %cmp67, label %if.then68, label %if.else75

if.then68:                                        ; preds = %land.lhs.true62
  %61 = load i64, i64* %t1, align 8
  %62 = load i64, i64* %s1, align 8
  %sub69 = sub nsw i64 %61, %62
  store i64 %sub69, i64* %i, align 8
  %63 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %subbeg70 = getelementptr inbounds %struct.regexp, %struct.regexp* %63, i32 0, i32 18
  %64 = load i8*, i8** %subbeg70, align 8
  %65 = load i64, i64* %s1, align 8
  %add.ptr71 = getelementptr inbounds i8, i8* %64, i64 %65
  %66 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %suboffset72 = getelementptr inbounds %struct.regexp, %struct.regexp* %66, i32 0, i32 21
  %67 = load i64, i64* %suboffset72, align 8
  %idx.neg73 = sub i64 0, %67
  %add.ptr74 = getelementptr inbounds i8, i8* %add.ptr71, i64 %idx.neg73
  store i8* %add.ptr74, i8** %s, align 8
  br label %if.end76

if.else75:                                        ; preds = %land.lhs.true62, %land.lhs.true57, %land.lhs.true55, %if.else53
  br label %ret_undef

if.end76:                                         ; preds = %if.then68
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.then43
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.then31
  %68 = load i64, i64* %i, align 8
  %cmp79 = icmp sge i64 %68, 0
  br i1 %cmp79, label %if.then80, label %if.else183

if.then80:                                        ; preds = %if.end78
  %69 = load i8, i8* @PL_tainted, align 1
  %tobool81 = trunc i8 %69 to i1
  %conv = zext i1 %tobool81 to i32
  store i32 %conv, i32* %oldtainted, align 4
  store i8 0, i8* @PL_tainted, align 1
  %70 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %71 = load i8*, i8** %s, align 8
  %72 = load i64, i64* %i, align 8
  call void @Perl_sv_setpvn(%struct.sv* %70, i8* %71, i64 %72)
  %73 = load i32, i32* %oldtainted, align 4
  %tobool82 = icmp ne i32 %73, 0
  %frombool83 = zext i1 %tobool82 to i8
  store i8 %frombool83, i8* @PL_tainted, align 1
  %74 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %intflags = getelementptr inbounds %struct.regexp, %struct.regexp* %74, i32 0, i32 13
  %75 = load i32, i32* %intflags, align 4
  %and84 = and i32 %75, 128
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then80
  %76 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %extflags86 = getelementptr inbounds %struct.regexp, %struct.regexp* %76, i32 0, i32 7
  %77 = load i32, i32* %extflags86, align 8
  %and87 = and i32 %77, 1048576
  %tobool88 = icmp ne i32 %and87, 0
  br i1 %tobool88, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.true
  %78 = load i64, i64* %i, align 8
  %tobool89 = icmp ne i64 %78, 0
  br i1 %tobool89, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %land.rhs
  %79 = load i8*, i8** %s, align 8
  %80 = load i64, i64* %i, align 8
  %call90 = call zeroext i1 @Perl_is_utf8_string(i8* %79, i64 %80)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %81 = phi i1 [ true, %land.rhs ], [ %call90, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %cond.true
  %82 = phi i1 [ false, %cond.true ], [ %81, %lor.end ]
  br i1 %82, label %if.then95, label %if.else96

cond.false:                                       ; preds = %if.then80
  %83 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %extflags92 = getelementptr inbounds %struct.regexp, %struct.regexp* %83, i32 0, i32 7
  %84 = load i32, i32* %extflags92, align 8
  %and93 = and i32 %84, 1048576
  %tobool94 = icmp ne i32 %and93, 0
  br i1 %tobool94, label %if.then95, label %if.else96

if.then95:                                        ; preds = %cond.false, %land.end
  %85 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 2
  %86 = load i32, i32* %sv_flags, align 4
  %or = or i32 %86, 536870912
  store i32 %or, i32* %sv_flags, align 4
  br label %if.end99

if.else96:                                        ; preds = %cond.false, %land.end
  %87 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags97 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags97, align 4
  %and98 = and i32 %88, -536870913
  store i32 %and98, i32* %sv_flags97, align 4
  br label %if.end99

if.end99:                                         ; preds = %if.else96, %if.then95
  %89 = load i8, i8* @PL_tainting, align 1
  %tobool100 = trunc i8 %89 to i1
  br i1 %tobool100, label %if.then101, label %if.end182

if.then101:                                       ; preds = %if.end99
  %90 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %extflags102 = getelementptr inbounds %struct.regexp, %struct.regexp* %90, i32 0, i32 7
  %91 = load i32, i32* %extflags102, align 8
  %and103 = and i32 %91, 67108864
  %tobool104 = icmp ne i32 %and103, 0
  br i1 %tobool104, label %if.then105, label %if.else172

if.then105:                                       ; preds = %if.then101
  %92 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags106 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 2
  %93 = load i32, i32* %sv_flags106, align 4
  %and107 = and i32 %93, 255
  %cmp108 = icmp uge i32 %and107, 7
  br i1 %cmp108, label %if.then110, label %if.else148

if.then110:                                       ; preds = %if.then105
  %94 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 0
  %95 = load i8*, i8** %sv_any, align 8
  %96 = bitcast i8* %95 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %96, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %97 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  store %struct.magic* %97, %struct.magic** %mg, align 8
  store i8 1, i8* @PL_tainted, align 1
  br label %do.body

do.body:                                          ; preds = %if.then110
  %98 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_moremagic = getelementptr inbounds %struct.magic, %struct.magic* %98, i32 0, i32 0
  %99 = load %struct.magic*, %struct.magic** %mg_moremagic, align 8
  %100 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any111 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 0
  %101 = load i8*, i8** %sv_any111, align 8
  %102 = bitcast i8* %101 to %struct.xpvmg*
  %xmg_u112 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %102, i32 0, i32 1
  %xmg_magic113 = bitcast %union._xmgu* %xmg_u112 to %struct.magic**
  store %struct.magic* %99, %struct.magic** %xmg_magic113, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body114

do.body114:                                       ; preds = %do.end
  %103 = load i8, i8* @PL_tainting, align 1
  %tobool115 = trunc i8 %103 to i1
  br i1 %tobool115, label %cond.true117, label %cond.false118

cond.true117:                                     ; preds = %do.body114
  br i1 true, label %if.then119, label %if.end134

cond.false118:                                    ; preds = %do.body114
  br i1 false, label %if.then119, label %if.end134

if.then119:                                       ; preds = %cond.false118, %cond.true117
  %104 = load i8, i8* @PL_tainted, align 1
  %tobool120 = trunc i8 %104 to i1
  br i1 %tobool120, label %cond.true122, label %cond.false123

cond.true122:                                     ; preds = %if.then119
  br i1 true, label %if.then124, label %if.end133

cond.false123:                                    ; preds = %if.then119
  br i1 false, label %if.then124, label %if.end133

if.then124:                                       ; preds = %cond.false123, %cond.true122
  br label %do.body125

do.body125:                                       ; preds = %if.then124
  %105 = load i8, i8* @PL_tainting, align 1
  %tobool126 = trunc i8 %105 to i1
  br i1 %tobool126, label %cond.true128, label %cond.false129

cond.true128:                                     ; preds = %do.body125
  br i1 true, label %if.then130, label %if.end131

cond.false129:                                    ; preds = %do.body125
  br i1 false, label %if.then130, label %if.end131

if.then130:                                       ; preds = %cond.false129, %cond.true128
  %106 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %106, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end131

if.end131:                                        ; preds = %if.then130, %cond.false129, %cond.true128
  br label %do.end132

do.end132:                                        ; preds = %if.end131
  br label %if.end133

if.end133:                                        ; preds = %do.end132, %cond.false123, %cond.true122
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %cond.false118, %cond.true117
  br label %do.end135

do.end135:                                        ; preds = %if.end134
  %107 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any136 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 0
  %108 = load i8*, i8** %sv_any136, align 8
  %109 = bitcast i8* %108 to %struct.xpvmg*
  %xmg_u137 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %109, i32 0, i32 1
  %xmg_magic138 = bitcast %union._xmgu* %xmg_u137 to %struct.magic**
  %110 = load %struct.magic*, %struct.magic** %xmg_magic138, align 8
  store %struct.magic* %110, %struct.magic** %mgt, align 8
  %tobool139 = icmp ne %struct.magic* %110, null
  br i1 %tobool139, label %if.then140, label %if.end147

if.then140:                                       ; preds = %do.end135
  %111 = load %struct.magic*, %struct.magic** %mgt, align 8
  %112 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_moremagic141 = getelementptr inbounds %struct.magic, %struct.magic* %112, i32 0, i32 0
  store %struct.magic* %111, %struct.magic** %mg_moremagic141, align 8
  br label %do.body142

do.body142:                                       ; preds = %if.then140
  %113 = load %struct.magic*, %struct.magic** %mg, align 8
  %114 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any143 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 0
  %115 = load i8*, i8** %sv_any143, align 8
  %116 = bitcast i8* %115 to %struct.xpvmg*
  %xmg_u144 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %116, i32 0, i32 1
  %xmg_magic145 = bitcast %union._xmgu* %xmg_u144 to %struct.magic**
  store %struct.magic* %113, %struct.magic** %xmg_magic145, align 8
  br label %do.end146

do.end146:                                        ; preds = %do.body142
  br label %if.end147

if.end147:                                        ; preds = %do.end146, %do.end135
  br label %if.end171

if.else148:                                       ; preds = %if.then105
  store i8 1, i8* @PL_tainted, align 1
  br label %do.body149

do.body149:                                       ; preds = %if.else148
  %117 = load i8, i8* @PL_tainting, align 1
  %tobool150 = trunc i8 %117 to i1
  br i1 %tobool150, label %cond.true152, label %cond.false153

cond.true152:                                     ; preds = %do.body149
  br i1 true, label %if.then154, label %if.end169

cond.false153:                                    ; preds = %do.body149
  br i1 false, label %if.then154, label %if.end169

if.then154:                                       ; preds = %cond.false153, %cond.true152
  %118 = load i8, i8* @PL_tainted, align 1
  %tobool155 = trunc i8 %118 to i1
  br i1 %tobool155, label %cond.true157, label %cond.false158

cond.true157:                                     ; preds = %if.then154
  br i1 true, label %if.then159, label %if.end168

cond.false158:                                    ; preds = %if.then154
  br i1 false, label %if.then159, label %if.end168

if.then159:                                       ; preds = %cond.false158, %cond.true157
  br label %do.body160

do.body160:                                       ; preds = %if.then159
  %119 = load i8, i8* @PL_tainting, align 1
  %tobool161 = trunc i8 %119 to i1
  br i1 %tobool161, label %cond.true163, label %cond.false164

cond.true163:                                     ; preds = %do.body160
  br i1 true, label %if.then165, label %if.end166

cond.false164:                                    ; preds = %do.body160
  br i1 false, label %if.then165, label %if.end166

if.then165:                                       ; preds = %cond.false164, %cond.true163
  %120 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %120, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end166

if.end166:                                        ; preds = %if.then165, %cond.false164, %cond.true163
  br label %do.end167

do.end167:                                        ; preds = %if.end166
  br label %if.end168

if.end168:                                        ; preds = %do.end167, %cond.false158, %cond.true157
  br label %if.end169

if.end169:                                        ; preds = %if.end168, %cond.false153, %cond.true152
  br label %do.end170

do.end170:                                        ; preds = %if.end169
  br label %if.end171

if.end171:                                        ; preds = %do.end170, %if.end147
  br label %if.end181

if.else172:                                       ; preds = %if.then101
  br label %do.body173

do.body173:                                       ; preds = %if.else172
  %121 = load i8, i8* @PL_tainting, align 1
  %tobool174 = trunc i8 %121 to i1
  br i1 %tobool174, label %cond.true176, label %cond.false177

cond.true176:                                     ; preds = %do.body173
  br i1 true, label %if.then178, label %if.end179

cond.false177:                                    ; preds = %do.body173
  br i1 false, label %if.then178, label %if.end179

if.then178:                                       ; preds = %cond.false177, %cond.true176
  %122 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_untaint(%struct.sv* %122)
  br label %if.end179

if.end179:                                        ; preds = %if.then178, %cond.false177, %cond.true176
  br label %do.end180

do.end180:                                        ; preds = %if.end179
  br label %if.end181

if.end181:                                        ; preds = %do.end180, %if.end171
  br label %if.end182

if.end182:                                        ; preds = %if.end181, %if.end99
  br label %if.end184

if.else183:                                       ; preds = %if.end78
  br label %ret_undef

ret_undef:                                        ; preds = %if.else183, %if.else75, %if.then21, %if.then17
  %123 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %123, %struct.sv* @PL_sv_undef, i32 1538)
  br label %if.end184

if.end184:                                        ; preds = %ret_undef, %if.end182
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_reg_numbered_buff_store(%struct.p5rx* %rx, i32 %paren, %struct.sv* %value) #0 {
entry:
  %rx.addr = alloca %struct.p5rx*, align 8
  %paren.addr = alloca i32, align 4
  %value.addr = alloca %struct.sv*, align 8
  store %struct.p5rx* %rx, %struct.p5rx** %rx.addr, align 8
  store i32 %paren, i32* %paren.addr, align 4
  store %struct.sv* %value, %struct.sv** %value.addr, align 8
  %0 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %1 = load i32, i32* %paren.addr, align 4
  %2 = load %struct.sv*, %struct.sv** %value.addr, align 8
  %3 = load i8, i8* @PL_localizing, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @Perl_croak_no_modify()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_reg_numbered_buff_length(%struct.p5rx* %r, %struct.sv* %sv, i32 %paren) #0 {
entry:
  %retval = alloca i32, align 4
  %r.addr = alloca %struct.p5rx*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %paren.addr = alloca i32, align 4
  %rx = alloca %struct.regexp*, align 8
  %i = alloca i32, align 4
  %s1 = alloca i32, align 4
  %t1 = alloca i32, align 4
  %keepcopy = alloca i8, align 1
  %s = alloca i8*, align 8
  %ep = alloca i8*, align 8
  %el = alloca i64, align 8
  store %struct.p5rx* %r, %struct.p5rx** %r.addr, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %paren, i32* %paren.addr, align 4
  %0 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %call = call %struct.regexp* @S_ReANY(%struct.p5rx* %0)
  store %struct.regexp* %call, %struct.regexp** %rx, align 8
  %1 = load i32, i32* %paren.addr, align 4
  %cmp = icmp eq i32 %1, -5
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %paren.addr, align 4
  %cmp1 = icmp eq i32 %2, -3
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %paren.addr, align 4
  %cmp3 = icmp eq i32 %3, -4
  br i1 %cmp3, label %if.then, label %if.end19

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %4 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %extflags = getelementptr inbounds %struct.regexp, %struct.regexp* %4, i32 0, i32 7
  %5 = load i32, i32* %extflags, align 8
  %and = and i32 %5, 64
  %tobool = icmp ne i32 %and, 0
  %6 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  %tobool4 = icmp ne i32 %cond, 0
  %frombool = zext i1 %tobool4 to i8
  store i8 %frombool, i8* %keepcopy, align 1
  %7 = load i8, i8* %keepcopy, align 1
  %tobool5 = trunc i8 %7 to i1
  br i1 %tobool5, label %if.end15, label %if.then6

if.then6:                                         ; preds = %if.then
  %8 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %tobool7 = icmp ne %struct.pmop* %8, null
  br i1 %tobool7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then6
  %9 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %10 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %10, i32 0, i32 9
  %11 = load %struct.p5rx*, %struct.p5rx** %op_pmregexp, align 8
  %cmp8 = icmp eq %struct.p5rx* %9, %11
  br i1 %cmp8, label %if.then9, label %if.end

if.then9:                                         ; preds = %land.lhs.true
  %12 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %12, i32 0, i32 10
  %13 = load i32, i32* %op_pmflags, align 8
  %and10 = and i32 %13, 64
  %tobool11 = icmp ne i32 %and10, 0
  %14 = zext i1 %tobool11 to i64
  %cond12 = select i1 %tobool11, i32 1, i32 0
  %tobool13 = icmp ne i32 %cond12, 0
  %frombool14 = zext i1 %tobool13 to i8
  store i8 %frombool14, i8* %keepcopy, align 1
  br label %if.end

if.end:                                           ; preds = %if.then9, %land.lhs.true, %if.then6
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  %15 = load i8, i8* %keepcopy, align 1
  %tobool16 = trunc i8 %15 to i1
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %if.end15
  br label %warn_undef

if.end18:                                         ; preds = %if.end15
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %lor.lhs.false2
  %16 = load i32, i32* %paren.addr, align 4
  switch i32 %16, label %sw.default [
    i32 -5, label %sw.bb
    i32 -2, label %sw.bb
    i32 -4, label %sw.bb30
    i32 -1, label %sw.bb30
  ]

sw.bb:                                            ; preds = %if.end19, %if.end19
  %17 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs = getelementptr inbounds %struct.regexp, %struct.regexp* %17, i32 0, i32 17
  %18 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs, align 8
  %arrayidx = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %18, i64 0
  %start = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx, i32 0, i32 0
  %19 = load i64, i64* %start, align 8
  %cmp20 = icmp ne i64 %19, -1
  br i1 %cmp20, label %if.then21, label %if.end29

if.then21:                                        ; preds = %sw.bb
  %20 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs22 = getelementptr inbounds %struct.regexp, %struct.regexp* %20, i32 0, i32 17
  %21 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs22, align 8
  %arrayidx23 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %21, i64 0
  %start24 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx23, i32 0, i32 0
  %22 = load i64, i64* %start24, align 8
  %conv = trunc i64 %22 to i32
  store i32 %conv, i32* %i, align 4
  %23 = load i32, i32* %i, align 4
  %cmp25 = icmp sgt i32 %23, 0
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.then21
  store i32 0, i32* %s1, align 4
  %24 = load i32, i32* %i, align 4
  store i32 %24, i32* %t1, align 4
  br label %getlen

if.end28:                                         ; preds = %if.then21
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %sw.bb
  store i32 0, i32* %retval, align 4
  br label %return

sw.bb30:                                          ; preds = %if.end19, %if.end19
  %25 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs31 = getelementptr inbounds %struct.regexp, %struct.regexp* %25, i32 0, i32 17
  %26 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs31, align 8
  %arrayidx32 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %26, i64 0
  %end = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx32, i32 0, i32 1
  %27 = load i64, i64* %end, align 8
  %cmp33 = icmp ne i64 %27, -1
  br i1 %cmp33, label %if.then35, label %if.end50

if.then35:                                        ; preds = %sw.bb30
  %28 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %sublen = getelementptr inbounds %struct.regexp, %struct.regexp* %28, i32 0, i32 20
  %29 = load i64, i64* %sublen, align 8
  %30 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs36 = getelementptr inbounds %struct.regexp, %struct.regexp* %30, i32 0, i32 17
  %31 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs36, align 8
  %arrayidx37 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %31, i64 0
  %end38 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx37, i32 0, i32 1
  %32 = load i64, i64* %end38, align 8
  %sub = sub nsw i64 %29, %32
  %conv39 = trunc i64 %sub to i32
  store i32 %conv39, i32* %i, align 4
  %33 = load i32, i32* %i, align 4
  %cmp40 = icmp sgt i32 %33, 0
  br i1 %cmp40, label %if.then42, label %if.end49

if.then42:                                        ; preds = %if.then35
  %34 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs43 = getelementptr inbounds %struct.regexp, %struct.regexp* %34, i32 0, i32 17
  %35 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs43, align 8
  %arrayidx44 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %35, i64 0
  %end45 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx44, i32 0, i32 1
  %36 = load i64, i64* %end45, align 8
  %conv46 = trunc i64 %36 to i32
  store i32 %conv46, i32* %s1, align 4
  %37 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %sublen47 = getelementptr inbounds %struct.regexp, %struct.regexp* %37, i32 0, i32 20
  %38 = load i64, i64* %sublen47, align 8
  %conv48 = trunc i64 %38 to i32
  store i32 %conv48, i32* %t1, align 4
  br label %getlen

if.end49:                                         ; preds = %if.then35
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %sw.bb30
  store i32 0, i32* %retval, align 4
  br label %return

sw.default:                                       ; preds = %if.end19
  %39 = load i32, i32* %paren.addr, align 4
  %40 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %40, i32 0, i32 12
  %41 = load i32, i32* %nparens, align 8
  %cmp51 = icmp sle i32 %39, %41
  br i1 %cmp51, label %land.lhs.true53, label %if.else

land.lhs.true53:                                  ; preds = %sw.default
  %42 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs54 = getelementptr inbounds %struct.regexp, %struct.regexp* %42, i32 0, i32 17
  %43 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs54, align 8
  %44 = load i32, i32* %paren.addr, align 4
  %idxprom = sext i32 %44 to i64
  %arrayidx55 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %43, i64 %idxprom
  %start56 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx55, i32 0, i32 0
  %45 = load i64, i64* %start56, align 8
  %conv57 = trunc i64 %45 to i32
  store i32 %conv57, i32* %s1, align 4
  %cmp58 = icmp ne i32 %conv57, -1
  br i1 %cmp58, label %land.lhs.true60, label %if.else

land.lhs.true60:                                  ; preds = %land.lhs.true53
  %46 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs61 = getelementptr inbounds %struct.regexp, %struct.regexp* %46, i32 0, i32 17
  %47 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs61, align 8
  %48 = load i32, i32* %paren.addr, align 4
  %idxprom62 = sext i32 %48 to i64
  %arrayidx63 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %47, i64 %idxprom62
  %end64 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx63, i32 0, i32 1
  %49 = load i64, i64* %end64, align 8
  %conv65 = trunc i64 %49 to i32
  store i32 %conv65, i32* %t1, align 4
  %cmp66 = icmp ne i32 %conv65, -1
  br i1 %cmp66, label %if.then68, label %if.else

if.then68:                                        ; preds = %land.lhs.true60
  %50 = load i32, i32* %t1, align 4
  %51 = load i32, i32* %s1, align 4
  %sub69 = sub nsw i32 %50, %51
  store i32 %sub69, i32* %i, align 4
  br label %getlen

if.else:                                          ; preds = %land.lhs.true60, %land.lhs.true53, %sw.default
  br label %warn_undef

warn_undef:                                       ; preds = %if.else, %if.then17
  %call70 = call zeroext i1 @Perl_ckwarn(i32 41)
  br i1 %call70, label %if.then71, label %if.end72

if.then71:                                        ; preds = %warn_undef
  %52 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_report_uninit(%struct.sv* %52)
  br label %if.end72

if.end72:                                         ; preds = %if.then71, %warn_undef
  store i32 0, i32* %retval, align 4
  br label %return

getlen:                                           ; preds = %if.then68, %if.then42, %if.then27
  %53 = load i32, i32* %i, align 4
  %cmp73 = icmp sgt i32 %53, 0
  br i1 %cmp73, label %land.lhs.true75, label %if.end87

land.lhs.true75:                                  ; preds = %getlen
  %54 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %extflags76 = getelementptr inbounds %struct.regexp, %struct.regexp* %54, i32 0, i32 7
  %55 = load i32, i32* %extflags76, align 8
  %and77 = and i32 %55, 1048576
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %if.then79, label %if.end87

if.then79:                                        ; preds = %land.lhs.true75
  %56 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %subbeg = getelementptr inbounds %struct.regexp, %struct.regexp* %56, i32 0, i32 18
  %57 = load i8*, i8** %subbeg, align 8
  %58 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %suboffset = getelementptr inbounds %struct.regexp, %struct.regexp* %58, i32 0, i32 21
  %59 = load i64, i64* %suboffset, align 8
  %idx.neg = sub i64 0, %59
  %add.ptr = getelementptr inbounds i8, i8* %57, i64 %idx.neg
  %60 = load i32, i32* %s1, align 4
  %idx.ext = sext i32 %60 to i64
  %add.ptr80 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext
  store i8* %add.ptr80, i8** %s, align 8
  %61 = load i32, i32* %t1, align 4
  %62 = load i32, i32* %s1, align 4
  %sub81 = sub nsw i32 %61, %62
  store i32 %sub81, i32* %i, align 4
  %63 = load i8*, i8** %s, align 8
  %64 = load i32, i32* %i, align 4
  %conv82 = sext i32 %64 to i64
  %call83 = call zeroext i1 @Perl_is_utf8_string_loclen(i8* %63, i64 %conv82, i8** %ep, i64* %el)
  br i1 %call83, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.then79
  %65 = load i64, i64* %el, align 8
  %conv85 = trunc i64 %65 to i32
  store i32 %conv85, i32* %i, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then84, %if.then79
  br label %if.end87

if.end87:                                         ; preds = %if.end86, %land.lhs.true75, %getlen
  %66 = load i32, i32* %i, align 4
  store i32 %66, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end87, %if.end72, %if.end50, %if.end29
  %67 = load i32, i32* %retval, align 4
  ret i32 %67
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_reg_named_buff(%struct.p5rx* %rx, %struct.sv* %key, %struct.sv* %value, i32 %flags) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %rx.addr = alloca %struct.p5rx*, align 8
  %key.addr = alloca %struct.sv*, align 8
  %value.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.p5rx* %rx, %struct.p5rx** %rx.addr, align 8
  store %struct.sv* %key, %struct.sv** %key.addr, align 8
  store %struct.sv* %value, %struct.sv** %value.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %value.addr, align 8
  %1 = load i32, i32* %flags.addr, align 4
  %and = and i32 %1, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %3 = load %struct.sv*, %struct.sv** %key.addr, align 8
  %4 = load i32, i32* %flags.addr, align 4
  %call = call %struct.sv* @Perl_reg_named_buff_fetch(%struct.p5rx* %2, %struct.sv* %3, i32 %4)
  store %struct.sv* %call, %struct.sv** %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %flags.addr, align 4
  %and1 = and i32 %5, 14
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then3, label %if.else4

if.then3:                                         ; preds = %if.else
  call void @Perl_croak_no_modify()
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.else4:                                         ; preds = %if.else
  %6 = load i32, i32* %flags.addr, align 4
  %and5 = and i32 %6, 16
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then7, label %if.else9

if.then7:                                         ; preds = %if.else4
  %7 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %8 = load %struct.sv*, %struct.sv** %key.addr, align 8
  %9 = load i32, i32* %flags.addr, align 4
  %call8 = call zeroext i1 @Perl_reg_named_buff_exists(%struct.p5rx* %7, %struct.sv* %8, i32 %9)
  %10 = zext i1 %call8 to i64
  %cond = select i1 %call8, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  store %struct.sv* %cond, %struct.sv** %retval, align 8
  br label %return

if.else9:                                         ; preds = %if.else4
  %11 = load i32, i32* %flags.addr, align 4
  %and10 = and i32 %11, 2048
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then12, label %if.else14

if.then12:                                        ; preds = %if.else9
  %12 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %13 = load i32, i32* %flags.addr, align 4
  %call13 = call %struct.sv* @Perl_reg_named_buff_all(%struct.p5rx* %12, i32 %13)
  store %struct.sv* %call13, %struct.sv** %retval, align 8
  br label %return

if.else14:                                        ; preds = %if.else9
  %14 = load i32, i32* %flags.addr, align 4
  %and15 = and i32 %14, 4128
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.else19

if.then17:                                        ; preds = %if.else14
  %15 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %16 = load i32, i32* %flags.addr, align 4
  %call18 = call %struct.sv* @Perl_reg_named_buff_scalar(%struct.p5rx* %15, i32 %16)
  store %struct.sv* %call18, %struct.sv** %retval, align 8
  br label %return

if.else19:                                        ; preds = %if.else14
  %17 = load i32, i32* %flags.addr, align 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.188, i64 0, i64 0), i32 %17)
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.else19, %if.then17, %if.then12, %if.then7, %if.then3, %if.then
  %18 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %18
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_reg_named_buff_iter(%struct.p5rx* %rx, %struct.sv* %lastkey, i32 %flags) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %rx.addr = alloca %struct.p5rx*, align 8
  %lastkey.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.p5rx* %rx, %struct.p5rx** %rx.addr, align 8
  store %struct.sv* %lastkey, %struct.sv** %lastkey.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %lastkey.addr, align 8
  %1 = load i32, i32* %flags.addr, align 4
  %and = and i32 %1, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %3 = load i32, i32* %flags.addr, align 4
  %call = call %struct.sv* @Perl_reg_named_buff_firstkey(%struct.p5rx* %2, i32 %3)
  store %struct.sv* %call, %struct.sv** %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %flags.addr, align 4
  %and1 = and i32 %4, 128
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then3, label %if.else5

if.then3:                                         ; preds = %if.else
  %5 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %6 = load i32, i32* %flags.addr, align 4
  %call4 = call %struct.sv* @Perl_reg_named_buff_nextkey(%struct.p5rx* %5, i32 %6)
  store %struct.sv* %call4, %struct.sv** %retval, align 8
  br label %return

if.else5:                                         ; preds = %if.else
  %7 = load i32, i32* %flags.addr, align 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.189, i64 0, i64 0), i32 %7)
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.else5, %if.then3, %if.then
  %8 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %8
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_reg_qr_package(%struct.p5rx* %rx) #0 {
entry:
  %rx.addr = alloca %struct.p5rx*, align 8
  store %struct.p5rx* %rx, %struct.p5rx** %rx.addr, align 8
  %0 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %call = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.191, i64 0, i64 0), i64 6)
  ret %struct.sv* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.p5rx* @Perl_re_op_compile(%struct.sv** %patternp, i32 %pat_count, %struct.op* %expr, %struct.regexp_engine* %eng, %struct.p5rx* %old_re, i8* %is_bare_re, i32 %orig_rx_flags, i32 %pm_flags) #0 {
entry:
  %retval = alloca %struct.p5rx*, align 8
  %patternp.addr = alloca %struct.sv**, align 8
  %pat_count.addr = alloca i32, align 4
  %expr.addr = alloca %struct.op*, align 8
  %eng.addr = alloca %struct.regexp_engine*, align 8
  %old_re.addr = alloca %struct.p5rx*, align 8
  %is_bare_re.addr = alloca i8*, align 8
  %orig_rx_flags.addr = alloca i32, align 4
  %pm_flags.addr = alloca i32, align 4
  %rx = alloca %struct.p5rx*, align 8
  %r = alloca %struct.regexp*, align 8
  %ri = alloca %struct.regexp_internal*, align 8
  %plen = alloca i64, align 8
  %exp = alloca i8*, align 8
  %scan = alloca %struct.regnode*, align 8
  %flags = alloca i32, align 4
  %minlen = alloca i64, align 8
  %rx_flags = alloca i32, align 4
  %pat = alloca %struct.sv*, align 8
  %code_blocksv = alloca %struct.sv*, align 8
  %new_patternp = alloca %struct.sv**, align 8
  %sawlookahead = alloca i32, align 4
  %sawplus = alloca i32, align 4
  %sawopen = alloca i32, align 4
  %sawminmod = alloca i32, align 4
  %initial_charset = alloca i32, align 4
  %recompile = alloca i8, align 1
  %runtime_code = alloca i8, align 1
  %data = alloca %struct.scan_data_t, align 8
  %RExC_state = alloca %struct.RExC_state_t, align 8
  %pRExC_state = alloca %struct.RExC_state_t*, align 8
  %restudied = alloca i32, align 4
  %copyRExC_state = alloca %struct.RExC_state_t, align 8
  %o = alloca %struct.op*, align 8
  %ncode = alloca i32, align 4
  %n = alloca i32, align 4
  %o40 = alloca %struct.op*, align 8
  %re = alloca %struct.sv*, align 8
  %ellipses = alloca i8*, align 8
  %len = alloca i64, align 8
  %n415 = alloca i32, align 4
  %has_p = alloca i8, align 1
  %has_charset = alloca i8, align 1
  %has_default = alloca i8, align 1
  %has_runon = alloca i8, align 1
  %reganch = alloca i16, align 2
  %fptr = alloca i8*, align 8
  %p = alloca i8*, align 8
  %wraplen = alloca i64, align 8
  %len496 = alloca i64, align 8
  %name = alloca i8*, align 8
  %ch = alloca i8, align 1
  %seen640 = alloca i32, align 4
  %fake = alloca i64, align 8
  %longest_float_length = alloca i64, align 8
  %longest_fixed_length = alloca i64, align 8
  %ch_class = alloca %struct.regnode_ssc, align 8
  %stclass_flag = alloca i32, align 4
  %last_close = alloca i64, align 8
  %first = alloca %struct.regnode*, align 8
  %first_next = alloca %struct.regnode*, align 8
  %type879 = alloca i32, align 4
  %n1166 = alloca i32, align 4
  %fake1331 = alloca i64, align 8
  %ch_class1332 = alloca %struct.regnode_ssc, align 8
  %last_close1333 = alloca i64, align 8
  %n1389 = alloca i32, align 4
  %first1497 = alloca %struct.regnode*, align 8
  %fop = alloca i8, align 1
  %next = alloca %struct.regnode*, align 8
  %nop = alloca i8, align 1
  %scan1601 = alloca %struct.regnode*, align 8
  store %struct.sv** %patternp, %struct.sv*** %patternp.addr, align 8
  store i32 %pat_count, i32* %pat_count.addr, align 4
  store %struct.op* %expr, %struct.op** %expr.addr, align 8
  store %struct.regexp_engine* %eng, %struct.regexp_engine** %eng.addr, align 8
  store %struct.p5rx* %old_re, %struct.p5rx** %old_re.addr, align 8
  store i8* %is_bare_re, i8** %is_bare_re.addr, align 8
  store i32 %orig_rx_flags, i32* %orig_rx_flags.addr, align 4
  store i32 %pm_flags, i32* %pm_flags.addr, align 4
  store i64 0, i64* %minlen, align 8
  store %struct.sv* null, %struct.sv** %code_blocksv, align 8
  %0 = load %struct.sv**, %struct.sv*** %patternp.addr, align 8
  store %struct.sv** %0, %struct.sv*** %new_patternp, align 8
  store i32 0, i32* %sawlookahead, align 4
  store i32 0, i32* %sawplus, align 4
  store i32 0, i32* %sawopen, align 4
  store i32 0, i32* %sawminmod, align 4
  %1 = load i32, i32* %orig_rx_flags.addr, align 4
  %call = call i32 @get_regex_charset(i32 %1)
  store i32 %call, i32* %initial_charset, align 4
  store i8 0, i8* %recompile, align 1
  store i8 0, i8* %runtime_code, align 1
  store %struct.RExC_state_t* %RExC_state, %struct.RExC_state_t** %pRExC_state, align 8
  store i32 0, i32* %restudied, align 4
  %2 = load %struct.sv*, %struct.sv** @PL_AboveLatin1, align 8
  %tobool = icmp ne %struct.sv* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([5 x i64], [5 x i64]* @AboveLatin1_invlist, i64 0, i64 0))
  store %struct.sv* %call1, %struct.sv** @PL_AboveLatin1, align 8
  %call2 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([5 x i64], [5 x i64]* @Latin1_invlist, i64 0, i64 0))
  store %struct.sv* %call2, %struct.sv** @PL_Latin1, align 8
  %call3 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([6 x i64], [6 x i64]* @UpperLatin1_invlist, i64 0, i64 0))
  store %struct.sv* %call3, %struct.sv** @PL_UpperLatin1, align 8
  %call4 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([238 x i64], [238 x i64]* @_Perl_Any_Folds_invlist, i64 0, i64 0))
  store %struct.sv* %call4, %struct.sv** @PL_utf8_foldable, align 8
  %call5 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([62 x i64], [62 x i64]* @_Perl_Folds_To_Multi_Char_invlist, i64 0, i64 0))
  store %struct.sv* %call5, %struct.sv** @PL_HasMultiCharFold, align 8
  %call6 = call %struct.sv* @Perl__new_invlist(i64 2)
  store %struct.sv* %call6, %struct.sv** @PL_InBitmap, align 8
  %3 = load %struct.sv*, %struct.sv** @PL_InBitmap, align 8
  %call7 = call %struct.sv* @Perl__add_range_to_invlist(%struct.sv* %3, i64 0, i64 255)
  store %struct.sv* %call7, %struct.sv** @PL_InBitmap, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %code_blocks = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %4, i32 0, i32 38
  store %struct.reg_code_block* null, %struct.reg_code_block** %code_blocks, align 8
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %num_code_blocks = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 39
  store i32 0, i32* %num_code_blocks, align 8
  %6 = load i8*, i8** %is_bare_re.addr, align 8
  %tobool8 = icmp ne i8* %6, null
  br i1 %tobool8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  %7 = load i8*, i8** %is_bare_re.addr, align 8
  store i8 0, i8* %7, align 1
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end
  %8 = load %struct.op*, %struct.op** %expr.addr, align 8
  %tobool11 = icmp ne %struct.op* %8, null
  br i1 %tobool11, label %land.lhs.true, label %if.end37

land.lhs.true:                                    ; preds = %if.end10
  %9 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 158
  br i1 %cmp, label %if.then19, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %10 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type12 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 4
  %bf.load13 = load i16, i16* %op_type12, align 8
  %bf.clear14 = and i16 %bf.load13, 511
  %bf.cast15 = zext i16 %bf.clear14 to i32
  %cmp16 = icmp eq i32 %bf.cast15, 0
  br i1 %cmp16, label %land.lhs.true17, label %if.end37

land.lhs.true17:                                  ; preds = %lor.lhs.false
  %11 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 3
  %12 = load i64, i64* %op_targ, align 8
  %cmp18 = icmp eq i64 %12, 158
  br i1 %cmp18, label %if.then19, label %if.end37

if.then19:                                        ; preds = %land.lhs.true17, %land.lhs.true
  store i32 0, i32* %ncode, align 4
  %13 = load %struct.op*, %struct.op** %expr.addr, align 8
  %14 = bitcast %struct.op* %13 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %14, i32 0, i32 7
  %15 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %15, %struct.op** %o, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then19
  %16 = load %struct.op*, %struct.op** %o, align 8
  %tobool20 = icmp ne %struct.op* %16, null
  br i1 %tobool20, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load %struct.op*, %struct.op** %o, align 8
  %op_type21 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 4
  %bf.load22 = load i16, i16* %op_type21, align 8
  %bf.clear23 = and i16 %bf.load22, 511
  %bf.cast24 = zext i16 %bf.clear23 to i32
  %cmp25 = icmp eq i32 %bf.cast24, 0
  br i1 %cmp25, label %land.lhs.true26, label %if.end29

land.lhs.true26:                                  ; preds = %for.body
  %18 = load %struct.op*, %struct.op** %o, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 5
  %19 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %19 to i32
  %and = and i32 %conv, 128
  %tobool27 = icmp ne i32 %and, 0
  br i1 %tobool27, label %if.then28, label %if.end29

if.then28:                                        ; preds = %land.lhs.true26
  %20 = load i32, i32* %ncode, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %ncode, align 4
  br label %if.end29

if.end29:                                         ; preds = %if.then28, %land.lhs.true26, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end29
  %21 = load %struct.op*, %struct.op** %o, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 1
  %22 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %22, i64 0
  store %struct.op* %add.ptr, %struct.op** %o, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %ncode, align 4
  %tobool30 = icmp ne i32 %23, 0
  br i1 %tobool30, label %if.then31, label %if.end36

if.then31:                                        ; preds = %for.end
  %24 = load i32, i32* %ncode, align 4
  %25 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %num_code_blocks32 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %25, i32 0, i32 39
  store i32 %24, i32* %num_code_blocks32, align 8
  %26 = load i32, i32* %ncode, align 4
  %conv33 = sext i32 %26 to i64
  %mul = mul i64 %conv33, 32
  %call34 = call i8* @Perl_safesysmalloc(i64 %mul)
  %27 = bitcast i8* %call34 to %struct.reg_code_block*
  %28 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %code_blocks35 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %28, i32 0, i32 38
  store %struct.reg_code_block* %27, %struct.reg_code_block** %code_blocks35, align 8
  br label %if.end36

if.end36:                                         ; preds = %if.then31, %for.end
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %land.lhs.true17, %lor.lhs.false, %if.end10
  %29 = load i32, i32* %pat_count.addr, align 4
  %tobool38 = icmp ne i32 %29, 0
  br i1 %tobool38, label %if.end98, label %if.then39

if.then39:                                        ; preds = %if.end37
  store i32 0, i32* %n, align 4
  %30 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type41 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 4
  %bf.load42 = load i16, i16* %op_type41, align 8
  %bf.clear43 = and i16 %bf.load42, 511
  %bf.cast44 = zext i16 %bf.clear43 to i32
  %cmp45 = icmp eq i32 %bf.cast44, 5
  br i1 %cmp45, label %if.then47, label %if.else

if.then47:                                        ; preds = %if.then39
  store i32 1, i32* %n, align 4
  br label %if.end65

if.else:                                          ; preds = %if.then39
  %31 = load %struct.op*, %struct.op** %expr.addr, align 8
  %32 = bitcast %struct.op* %31 to %struct.listop*
  %op_first48 = getelementptr inbounds %struct.listop, %struct.listop* %32, i32 0, i32 7
  %33 = load %struct.op*, %struct.op** %op_first48, align 8
  store %struct.op* %33, %struct.op** %o40, align 8
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc61, %if.else
  %34 = load %struct.op*, %struct.op** %o40, align 8
  %tobool50 = icmp ne %struct.op* %34, null
  br i1 %tobool50, label %for.body51, label %for.end64

for.body51:                                       ; preds = %for.cond49
  %35 = load %struct.op*, %struct.op** %o40, align 8
  %op_type52 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 4
  %bf.load53 = load i16, i16* %op_type52, align 8
  %bf.clear54 = and i16 %bf.load53, 511
  %bf.cast55 = zext i16 %bf.clear54 to i32
  %cmp56 = icmp eq i32 %bf.cast55, 5
  br i1 %cmp56, label %if.then58, label %if.end60

if.then58:                                        ; preds = %for.body51
  %36 = load i32, i32* %n, align 4
  %inc59 = add nsw i32 %36, 1
  store i32 %inc59, i32* %n, align 4
  br label %if.end60

if.end60:                                         ; preds = %if.then58, %for.body51
  br label %for.inc61

for.inc61:                                        ; preds = %if.end60
  %37 = load %struct.op*, %struct.op** %o40, align 8
  %op_sibling62 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 1
  %38 = load %struct.op*, %struct.op** %op_sibling62, align 8
  %add.ptr63 = getelementptr inbounds %struct.op, %struct.op* %38, i64 0
  store %struct.op* %add.ptr63, %struct.op** %o40, align 8
  br label %for.cond49

for.end64:                                        ; preds = %for.cond49
  br label %if.end65

if.end65:                                         ; preds = %for.end64, %if.then47
  %39 = load i32, i32* %n, align 4
  %conv66 = sext i32 %39 to i64
  %mul67 = mul i64 %conv66, 8
  %call68 = call i8* @Perl_safesysmalloc(i64 %mul67)
  %40 = bitcast i8* %call68 to %struct.sv**
  store %struct.sv** %40, %struct.sv*** %new_patternp, align 8
  %41 = load %struct.sv**, %struct.sv*** %new_patternp, align 8
  %42 = bitcast %struct.sv** %41 to i8*
  call void @Perl_save_pushptr(i8* %42, i32 10)
  %43 = load i32, i32* %n, align 4
  store i32 %43, i32* %pat_count.addr, align 4
  store i32 0, i32* %n, align 4
  %44 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type69 = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 4
  %bf.load70 = load i16, i16* %op_type69, align 8
  %bf.clear71 = and i16 %bf.load70, 511
  %bf.cast72 = zext i16 %bf.clear71 to i32
  %cmp73 = icmp eq i32 %bf.cast72, 5
  br i1 %cmp73, label %if.then75, label %if.else76

if.then75:                                        ; preds = %if.end65
  %45 = load %struct.op*, %struct.op** %expr.addr, align 8
  %46 = bitcast %struct.op* %45 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %46, i32 0, i32 7
  %47 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %48 = load %struct.sv**, %struct.sv*** %new_patternp, align 8
  %49 = load i32, i32* %n, align 4
  %idxprom = sext i32 %49 to i64
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %48, i64 %idxprom
  store %struct.sv* %47, %struct.sv** %arrayidx, align 8
  br label %if.end97

if.else76:                                        ; preds = %if.end65
  %50 = load %struct.op*, %struct.op** %expr.addr, align 8
  %51 = bitcast %struct.op* %50 to %struct.listop*
  %op_first77 = getelementptr inbounds %struct.listop, %struct.listop* %51, i32 0, i32 7
  %52 = load %struct.op*, %struct.op** %op_first77, align 8
  store %struct.op* %52, %struct.op** %o40, align 8
  br label %for.cond78

for.cond78:                                       ; preds = %for.inc93, %if.else76
  %53 = load %struct.op*, %struct.op** %o40, align 8
  %tobool79 = icmp ne %struct.op* %53, null
  br i1 %tobool79, label %for.body80, label %for.end96

for.body80:                                       ; preds = %for.cond78
  %54 = load %struct.op*, %struct.op** %o40, align 8
  %op_type81 = getelementptr inbounds %struct.op, %struct.op* %54, i32 0, i32 4
  %bf.load82 = load i16, i16* %op_type81, align 8
  %bf.clear83 = and i16 %bf.load82, 511
  %bf.cast84 = zext i16 %bf.clear83 to i32
  %cmp85 = icmp eq i32 %bf.cast84, 5
  br i1 %cmp85, label %if.then87, label %if.end92

if.then87:                                        ; preds = %for.body80
  %55 = load %struct.op*, %struct.op** %o40, align 8
  %56 = bitcast %struct.op* %55 to %struct.svop*
  %op_sv88 = getelementptr inbounds %struct.svop, %struct.svop* %56, i32 0, i32 7
  %57 = load %struct.sv*, %struct.sv** %op_sv88, align 8
  %58 = load %struct.sv**, %struct.sv*** %new_patternp, align 8
  %59 = load i32, i32* %n, align 4
  %inc89 = add nsw i32 %59, 1
  store i32 %inc89, i32* %n, align 4
  %idxprom90 = sext i32 %59 to i64
  %arrayidx91 = getelementptr inbounds %struct.sv*, %struct.sv** %58, i64 %idxprom90
  store %struct.sv* %57, %struct.sv** %arrayidx91, align 8
  br label %if.end92

if.end92:                                         ; preds = %if.then87, %for.body80
  br label %for.inc93

for.inc93:                                        ; preds = %if.end92
  %60 = load %struct.op*, %struct.op** %o40, align 8
  %op_sibling94 = getelementptr inbounds %struct.op, %struct.op* %60, i32 0, i32 1
  %61 = load %struct.op*, %struct.op** %op_sibling94, align 8
  %add.ptr95 = getelementptr inbounds %struct.op, %struct.op* %61, i64 0
  store %struct.op* %add.ptr95, %struct.op** %o40, align 8
  br label %for.cond78

for.end96:                                        ; preds = %for.cond78
  br label %if.end97

if.end97:                                         ; preds = %for.end96, %if.then75
  br label %if.end98

if.end98:                                         ; preds = %if.end97, %if.end37
  %62 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %num_code_blocks99 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %62, i32 0, i32 39
  %63 = load i32, i32* %num_code_blocks99, align 8
  %tobool100 = icmp ne i32 %63, 0
  br i1 %tobool100, label %land.lhs.true101, label %if.end112

land.lhs.true101:                                 ; preds = %if.end98
  %64 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type102 = getelementptr inbounds %struct.op, %struct.op* %64, i32 0, i32 4
  %bf.load103 = load i16, i16* %op_type102, align 8
  %bf.clear104 = and i16 %bf.load103, 511
  %bf.cast105 = zext i16 %bf.clear104 to i32
  %cmp106 = icmp ne i32 %bf.cast105, 5
  br i1 %cmp106, label %if.then108, label %if.end112

if.then108:                                       ; preds = %land.lhs.true101
  %65 = load %struct.op*, %struct.op** %expr.addr, align 8
  %66 = bitcast %struct.op* %65 to %struct.listop*
  %op_first109 = getelementptr inbounds %struct.listop, %struct.listop* %66, i32 0, i32 7
  %67 = load %struct.op*, %struct.op** %op_first109, align 8
  store %struct.op* %67, %struct.op** %expr.addr, align 8
  %68 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_sibling110 = getelementptr inbounds %struct.op, %struct.op* %68, i32 0, i32 1
  %69 = load %struct.op*, %struct.op** %op_sibling110, align 8
  %add.ptr111 = getelementptr inbounds %struct.op, %struct.op* %69, i64 0
  store %struct.op* %add.ptr111, %struct.op** %expr.addr, align 8
  br label %if.end112

if.end112:                                        ; preds = %if.then108, %land.lhs.true101, %if.end98
  %70 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %71 = load %struct.sv**, %struct.sv*** %new_patternp, align 8
  %72 = load i32, i32* %pat_count.addr, align 4
  %73 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call113 = call %struct.sv* @S_concat_pat(%struct.RExC_state_t* %70, %struct.sv* null, %struct.sv** %71, i32 %72, %struct.op* %73, i8* %recompile, %struct.sv* null)
  store %struct.sv* %call113, %struct.sv** %pat, align 8
  %74 = load %struct.sv*, %struct.sv** %pat, align 8
  store %struct.sv* %74, %struct.sv** %re, align 8
  %75 = load %struct.sv*, %struct.sv** %re, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 2
  %76 = load i32, i32* %sv_flags, align 4
  %and114 = and i32 %76, 2048
  %tobool115 = icmp ne i32 %and114, 0
  br i1 %tobool115, label %if.then116, label %if.end117

if.then116:                                       ; preds = %if.end112
  %77 = load %struct.sv*, %struct.sv** %re, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %78 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %78, %struct.sv** %re, align 8
  br label %if.end117

if.end117:                                        ; preds = %if.then116, %if.end112
  %79 = load %struct.sv*, %struct.sv** %re, align 8
  %sv_flags118 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 2
  %80 = load i32, i32* %sv_flags118, align 4
  %and119 = and i32 %80, 255
  %cmp120 = icmp eq i32 %and119, 8
  br i1 %cmp120, label %if.then122, label %if.end128

if.then122:                                       ; preds = %if.end117
  %81 = load i8*, i8** %is_bare_re.addr, align 8
  %tobool123 = icmp ne i8* %81, null
  br i1 %tobool123, label %if.then124, label %if.end125

if.then124:                                       ; preds = %if.then122
  %82 = load i8*, i8** %is_bare_re.addr, align 8
  store i8 1, i8* %82, align 1
  br label %if.end125

if.end125:                                        ; preds = %if.then124, %if.then122
  %83 = load %struct.sv*, %struct.sv** %re, align 8
  %84 = bitcast %struct.sv* %83 to i8*
  %85 = bitcast i8* %84 to %struct.sv*
  %call126 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %85)
  %86 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %code_blocks127 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %86, i32 0, i32 38
  %87 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks127, align 8
  %88 = bitcast %struct.reg_code_block* %87 to i8*
  call void @Perl_safesysfree(i8* %88)
  %89 = load %struct.sv*, %struct.sv** %re, align 8
  %90 = bitcast %struct.sv* %89 to %struct.p5rx*
  store %struct.p5rx* %90, %struct.p5rx** %retval, align 8
  br label %return

if.end128:                                        ; preds = %if.end117
  %91 = load %struct.sv*, %struct.sv** %pat, align 8
  %sv_flags129 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 2
  %92 = load i32, i32* %sv_flags129, align 4
  %and130 = and i32 %92, 2098176
  %cmp131 = icmp eq i32 %and130, 1024
  br i1 %cmp131, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end128
  %93 = load %struct.sv*, %struct.sv** %pat, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %93, i32 0, i32 0
  %94 = load i8*, i8** %sv_any, align 8
  %95 = bitcast i8* %94 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %95, i32 0, i32 2
  %96 = load i64, i64* %xpv_cur, align 8
  store i64 %96, i64* %plen, align 8
  %97 = load %struct.sv*, %struct.sv** %pat, align 8
  %sv_u133 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u133 to i8**
  %98 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end128
  %99 = load %struct.sv*, %struct.sv** %pat, align 8
  %call134 = call i8* @Perl_sv_2pv_flags(%struct.sv* %99, i64* %plen, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %98, %cond.true ], [ %call134, %cond.false ]
  store i8* %cond, i8** %exp, align 8
  %100 = load %struct.regexp_engine*, %struct.regexp_engine** %eng.addr, align 8
  %op_comp = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %100, i32 0, i32 11
  %101 = load %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)** %op_comp, align 8
  %tobool135 = icmp ne %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* %101, null
  br i1 %tobool135, label %if.end180, label %if.then136

if.then136:                                       ; preds = %cond.end
  %102 = load %struct.sv*, %struct.sv** %pat, align 8
  %sv_flags137 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 2
  %103 = load i32, i32* %sv_flags137, align 4
  %and138 = and i32 %103, 536870912
  %tobool139 = icmp ne i32 %and138, 0
  br i1 %tobool139, label %land.lhs.true140, label %lor.lhs.false143

land.lhs.true140:                                 ; preds = %if.then136
  %104 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %104, i32 0, i32 10
  %105 = load i32, i32* %cop_hints, align 8
  %add = add i32 %105, 0
  %and141 = and i32 %add, 8
  %tobool142 = icmp ne i32 %and141, 0
  br i1 %tobool142, label %if.then164, label %lor.lhs.false143

lor.lhs.false143:                                 ; preds = %land.lhs.true140, %if.then136
  %106 = load %struct.sv*, %struct.sv** %pat, align 8
  %sv_flags144 = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 2
  %107 = load i32, i32* %sv_flags144, align 4
  %and145 = and i32 %107, 2097152
  %tobool146 = icmp ne i32 %and145, 0
  br i1 %tobool146, label %if.then164, label %lor.lhs.false147

lor.lhs.false147:                                 ; preds = %lor.lhs.false143
  %108 = load %struct.sv*, %struct.sv** %pat, align 8
  %sv_flags148 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 2
  %109 = load i32, i32* %sv_flags148, align 4
  %and149 = and i32 %109, 2048
  %tobool150 = icmp ne i32 %and149, 0
  br i1 %tobool150, label %land.lhs.true151, label %if.end176

land.lhs.true151:                                 ; preds = %lor.lhs.false147
  %110 = load %struct.sv*, %struct.sv** %pat, align 8
  %sv_u152 = getelementptr inbounds %struct.sv, %struct.sv* %110, i32 0, i32 3
  %svu_rv153 = bitcast %union.anon* %sv_u152 to %struct.sv**
  %111 = load %struct.sv*, %struct.sv** %svu_rv153, align 8
  %sv_flags154 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 2
  %112 = load i32, i32* %sv_flags154, align 4
  %and155 = and i32 %112, 1048576
  %tobool156 = icmp ne i32 %and155, 0
  br i1 %tobool156, label %land.lhs.true157, label %if.end176

land.lhs.true157:                                 ; preds = %land.lhs.true151
  %113 = load %struct.sv*, %struct.sv** %pat, align 8
  %sv_u158 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 3
  %svu_rv159 = bitcast %union.anon* %sv_u158 to %struct.sv**
  %114 = load %struct.sv*, %struct.sv** %svu_rv159, align 8
  %sv_any160 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 0
  %115 = load i8*, i8** %sv_any160, align 8
  %116 = bitcast i8* %115 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %116, i32 0, i32 0
  %117 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags161 = getelementptr inbounds %struct.hv, %struct.hv* %117, i32 0, i32 2
  %118 = load i32, i32* %sv_flags161, align 4
  %and162 = and i32 %118, 268435456
  %tobool163 = icmp ne i32 %and162, 0
  br i1 %tobool163, label %if.then164, label %if.end176

if.then164:                                       ; preds = %land.lhs.true157, %lor.lhs.false143, %land.lhs.true140
  %119 = load i8*, i8** %exp, align 8
  %120 = load i64, i64* %plen, align 8
  %121 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints165 = getelementptr inbounds %struct.cop, %struct.cop* %121, i32 0, i32 10
  %122 = load i32, i32* %cop_hints165, align 8
  %add166 = add i32 %122, 0
  %and167 = and i32 %add166, 8
  %tobool168 = icmp ne i32 %and167, 0
  br i1 %tobool168, label %cond.true169, label %cond.false170

cond.true169:                                     ; preds = %if.then164
  br label %cond.end173

cond.false170:                                    ; preds = %if.then164
  %123 = load %struct.sv*, %struct.sv** %pat, align 8
  %sv_flags171 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 2
  %124 = load i32, i32* %sv_flags171, align 4
  %and172 = and i32 %124, 536870912
  br label %cond.end173

cond.end173:                                      ; preds = %cond.false170, %cond.true169
  %cond174 = phi i32 [ 0, %cond.true169 ], [ %and172, %cond.false170 ]
  %or = or i32 524288, %cond174
  %call175 = call %struct.sv* @Perl_newSVpvn_flags(i8* %119, i64 %120, i32 %or)
  store %struct.sv* %call175, %struct.sv** %pat, align 8
  br label %if.end176

if.end176:                                        ; preds = %cond.end173, %land.lhs.true157, %land.lhs.true151, %lor.lhs.false147
  %125 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %code_blocks177 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %125, i32 0, i32 38
  %126 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks177, align 8
  %127 = bitcast %struct.reg_code_block* %126 to i8*
  call void @Perl_safesysfree(i8* %127)
  %128 = load %struct.regexp_engine*, %struct.regexp_engine** %eng.addr, align 8
  %comp = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %128, i32 0, i32 0
  %comp178 = bitcast {}** %comp to %struct.p5rx* (%struct.sv*, i32)**
  %129 = load %struct.p5rx* (%struct.sv*, i32)*, %struct.p5rx* (%struct.sv*, i32)** %comp178, align 8
  %130 = load %struct.sv*, %struct.sv** %pat, align 8
  %131 = load i32, i32* %orig_rx_flags.addr, align 4
  %call179 = call %struct.p5rx* %129(%struct.sv* %130, i32 %131)
  store %struct.p5rx* %call179, %struct.p5rx** %retval, align 8
  br label %return

if.end180:                                        ; preds = %cond.end
  %132 = load i64, i64* %plen, align 8
  %cmp181 = icmp eq i64 %132, 0
  br i1 %cmp181, label %cond.true188, label %lor.lhs.false183

lor.lhs.false183:                                 ; preds = %if.end180
  %133 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints184 = getelementptr inbounds %struct.cop, %struct.cop* %133, i32 0, i32 10
  %134 = load i32, i32* %cop_hints184, align 8
  %add185 = add i32 %134, 0
  %and186 = and i32 %add185, 8
  %tobool187 = icmp ne i32 %and186, 0
  br i1 %tobool187, label %cond.true188, label %cond.false189

cond.true188:                                     ; preds = %lor.lhs.false183, %if.end180
  br label %cond.end192

cond.false189:                                    ; preds = %lor.lhs.false183
  %135 = load %struct.sv*, %struct.sv** %pat, align 8
  %sv_flags190 = getelementptr inbounds %struct.sv, %struct.sv* %135, i32 0, i32 2
  %136 = load i32, i32* %sv_flags190, align 4
  %and191 = and i32 %136, 536870912
  br label %cond.end192

cond.end192:                                      ; preds = %cond.false189, %cond.true188
  %cond193 = phi i32 [ 0, %cond.true188 ], [ %and191, %cond.false189 ]
  %137 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %orig_utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %137, i32 0, i32 26
  store i32 %cond193, i32* %orig_utf8, align 4
  %138 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %138, i32 0, i32 25
  store i32 %cond193, i32* %utf8, align 8
  %139 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %uni_semantics = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %139, i32 0, i32 27
  store i32 0, i32* %uni_semantics, align 8
  %140 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %contains_locale = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %140, i32 0, i32 34
  store i32 0, i32* %contains_locale, align 8
  %141 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %contains_i = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %141, i32 0, i32 35
  store i32 0, i32* %contains_i, align 4
  %142 = load i32, i32* %pm_flags.addr, align 4
  %and194 = and i32 %142, 1024
  %tobool195 = icmp ne i32 %and194, 0
  %143 = zext i1 %tobool195 to i64
  %cond196 = select i1 %tobool195, i32 1, i32 0
  %144 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %strict = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %144, i32 0, i32 45
  store i32 %cond196, i32* %strict, align 4
  %145 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %runtime_code_qr = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %145, i32 0, i32 46
  store %struct.sv* null, %struct.sv** %runtime_code_qr, align 8
  %146 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %frame_head = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %146, i32 0, i32 42
  store %struct.scan_frame* null, %struct.scan_frame** %frame_head, align 8
  %147 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %frame_last = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %147, i32 0, i32 43
  store %struct.scan_frame* null, %struct.scan_frame** %frame_last, align 8
  %148 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %frame_count = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %148, i32 0, i32 44
  store i32 0, i32* %frame_count, align 8
  br label %redo_first_pass

redo_first_pass:                                  ; preds = %if.then323, %if.then294, %cond.end192
  %149 = load i32, i32* %pm_flags.addr, align 4
  %and197 = and i32 %149, -2147483648
  %tobool198 = icmp ne i32 %and197, 0
  br i1 %tobool198, label %if.then205, label %lor.lhs.false199

lor.lhs.false199:                                 ; preds = %redo_first_pass
  %150 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp200 = icmp eq %struct.cop* %150, @PL_compiling
  br i1 %cmp200, label %land.lhs.true202, label %if.end207

land.lhs.true202:                                 ; preds = %lor.lhs.false199
  %151 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and203 = and i32 %151, 2097152
  %tobool204 = icmp ne i32 %and203, 0
  br i1 %tobool204, label %if.then205, label %if.end207

if.then205:                                       ; preds = %land.lhs.true202, %redo_first_pass
  %152 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %153 = load i8*, i8** %exp, align 8
  %154 = load i64, i64* %plen, align 8
  %call206 = call zeroext i1 @S_has_runtime_code(%struct.RExC_state_t* %152, i8* %153, i64 %154)
  %frombool = zext i1 %call206 to i8
  store i8 %frombool, i8* %runtime_code, align 1
  br label %if.end207

if.end207:                                        ; preds = %if.then205, %land.lhs.true202, %lor.lhs.false199
  %155 = load %struct.p5rx*, %struct.p5rx** %old_re.addr, align 8
  %tobool208 = icmp ne %struct.p5rx* %155, null
  br i1 %tobool208, label %land.lhs.true209, label %if.end269

land.lhs.true209:                                 ; preds = %if.end207
  %156 = load i8, i8* %recompile, align 1
  %tobool210 = trunc i8 %156 to i1
  br i1 %tobool210, label %if.end269, label %land.lhs.true211

land.lhs.true211:                                 ; preds = %land.lhs.true209
  %157 = load %struct.p5rx*, %struct.p5rx** %old_re.addr, align 8
  %sv_flags212 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %157, i32 0, i32 2
  %158 = load i32, i32* %sv_flags212, align 4
  %and213 = and i32 %158, 536870912
  %tobool214 = icmp ne i32 %and213, 0
  %lnot = xor i1 %tobool214, true
  %lnot215 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot215 to i32
  %159 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %utf8216 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %159, i32 0, i32 25
  %160 = load i32, i32* %utf8216, align 8
  %tobool217 = icmp ne i32 %160, 0
  %lnot218 = xor i1 %tobool217, true
  %lnot220 = xor i1 %lnot218, true
  %lnot.ext221 = zext i1 %lnot220 to i32
  %cmp222 = icmp eq i32 %lnot.ext, %lnot.ext221
  br i1 %cmp222, label %land.lhs.true224, label %if.end269

land.lhs.true224:                                 ; preds = %land.lhs.true211
  %161 = load %struct.p5rx*, %struct.p5rx** %old_re.addr, align 8
  %call225 = call %struct.regexp* @S_ReANY(%struct.p5rx* %161)
  %compflags = getelementptr inbounds %struct.regexp, %struct.regexp* %call225, i32 0, i32 24
  %bf.load226 = load i16, i16* %compflags, align 8
  %bf.lshr = lshr i16 %bf.load226, 4
  %bf.clear227 = and i16 %bf.lshr, 511
  %bf.cast228 = zext i16 %bf.clear227 to i32
  %162 = load i32, i32* %orig_rx_flags.addr, align 4
  %and229 = and i32 %162, 4095
  %cmp230 = icmp eq i32 %bf.cast228, %and229
  br i1 %cmp230, label %land.lhs.true232, label %if.end269

land.lhs.true232:                                 ; preds = %land.lhs.true224
  %163 = load %struct.p5rx*, %struct.p5rx** %old_re.addr, align 8
  %call233 = call %struct.regexp* @S_ReANY(%struct.p5rx* %163)
  %xpv_len_u = getelementptr inbounds %struct.regexp, %struct.regexp* %call233, i32 0, i32 3
  %xpvlenu_pv = bitcast %union.anon.6* %xpv_len_u to i8**
  %164 = load i8*, i8** %xpvlenu_pv, align 8
  %165 = load %struct.p5rx*, %struct.p5rx** %old_re.addr, align 8
  %call234 = call %struct.regexp* @S_ReANY(%struct.p5rx* %165)
  %pre_prefix = getelementptr inbounds %struct.regexp, %struct.regexp* %call234, i32 0, i32 24
  %bf.load235 = load i16, i16* %pre_prefix, align 8
  %bf.clear236 = and i16 %bf.load235, 15
  %bf.cast237 = zext i16 %bf.clear236 to i32
  %idx.ext = sext i32 %bf.cast237 to i64
  %add.ptr238 = getelementptr inbounds i8, i8* %164, i64 %idx.ext
  %tobool239 = icmp ne i8* %add.ptr238, null
  br i1 %tobool239, label %land.lhs.true240, label %if.end269

land.lhs.true240:                                 ; preds = %land.lhs.true232
  %166 = load %struct.p5rx*, %struct.p5rx** %old_re.addr, align 8
  %sv_any241 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %166, i32 0, i32 0
  %167 = load %struct.regexp*, %struct.regexp** %sv_any241, align 8
  %168 = bitcast %struct.regexp* %167 to %struct.xpv*
  %xpv_cur242 = getelementptr inbounds %struct.xpv, %struct.xpv* %168, i32 0, i32 2
  %169 = load i64, i64* %xpv_cur242, align 8
  %170 = load %struct.p5rx*, %struct.p5rx** %old_re.addr, align 8
  %call243 = call %struct.regexp* @S_ReANY(%struct.p5rx* %170)
  %pre_prefix244 = getelementptr inbounds %struct.regexp, %struct.regexp* %call243, i32 0, i32 24
  %bf.load245 = load i16, i16* %pre_prefix244, align 8
  %bf.clear246 = and i16 %bf.load245, 15
  %bf.cast247 = zext i16 %bf.clear246 to i32
  %conv248 = zext i32 %bf.cast247 to i64
  %sub = sub i64 %169, %conv248
  %sub249 = sub i64 %sub, 1
  %171 = load i64, i64* %plen, align 8
  %cmp250 = icmp eq i64 %sub249, %171
  br i1 %cmp250, label %land.lhs.true252, label %if.end269

land.lhs.true252:                                 ; preds = %land.lhs.true240
  %172 = load %struct.p5rx*, %struct.p5rx** %old_re.addr, align 8
  %call253 = call %struct.regexp* @S_ReANY(%struct.p5rx* %172)
  %xpv_len_u254 = getelementptr inbounds %struct.regexp, %struct.regexp* %call253, i32 0, i32 3
  %xpvlenu_pv255 = bitcast %union.anon.6* %xpv_len_u254 to i8**
  %173 = load i8*, i8** %xpvlenu_pv255, align 8
  %174 = load %struct.p5rx*, %struct.p5rx** %old_re.addr, align 8
  %call256 = call %struct.regexp* @S_ReANY(%struct.p5rx* %174)
  %pre_prefix257 = getelementptr inbounds %struct.regexp, %struct.regexp* %call256, i32 0, i32 24
  %bf.load258 = load i16, i16* %pre_prefix257, align 8
  %bf.clear259 = and i16 %bf.load258, 15
  %bf.cast260 = zext i16 %bf.clear259 to i32
  %idx.ext261 = sext i32 %bf.cast260 to i64
  %add.ptr262 = getelementptr inbounds i8, i8* %173, i64 %idx.ext261
  %175 = load i8*, i8** %exp, align 8
  %176 = load i64, i64* %plen, align 8
  %call263 = call i32 @memcmp(i8* %add.ptr262, i8* %175, i64 %176) #6
  %tobool264 = icmp ne i32 %call263, 0
  br i1 %tobool264, label %if.end269, label %land.lhs.true265

land.lhs.true265:                                 ; preds = %land.lhs.true252
  %177 = load i8, i8* %runtime_code, align 1
  %tobool266 = trunc i8 %177 to i1
  br i1 %tobool266, label %if.end269, label %if.then267

if.then267:                                       ; preds = %land.lhs.true265
  %178 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %code_blocks268 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %178, i32 0, i32 38
  %179 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks268, align 8
  %180 = bitcast %struct.reg_code_block* %179 to i8*
  call void @Perl_safesysfree(i8* %180)
  %181 = load %struct.p5rx*, %struct.p5rx** %old_re.addr, align 8
  store %struct.p5rx* %181, %struct.p5rx** %retval, align 8
  br label %return

if.end269:                                        ; preds = %land.lhs.true265, %land.lhs.true252, %land.lhs.true240, %land.lhs.true232, %land.lhs.true224, %land.lhs.true211, %land.lhs.true209, %if.end207
  %182 = load i32, i32* %orig_rx_flags.addr, align 4
  store i32 %182, i32* %rx_flags, align 4
  %183 = load i32, i32* %rx_flags, align 4
  %and270 = and i32 %183, 4
  %tobool271 = icmp ne i32 %and270, 0
  br i1 %tobool271, label %if.then272, label %if.end274

if.then272:                                       ; preds = %if.end269
  %184 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %contains_i273 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %184, i32 0, i32 35
  store i32 1, i32* %contains_i273, align 4
  br label %if.end274

if.end274:                                        ; preds = %if.then272, %if.end269
  %185 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %utf8275 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %185, i32 0, i32 25
  %186 = load i32, i32* %utf8275, align 8
  %tobool276 = icmp ne i32 %186, 0
  br i1 %tobool276, label %land.lhs.true277, label %if.end281

land.lhs.true277:                                 ; preds = %if.end274
  %187 = load i32, i32* %initial_charset, align 4
  %cmp278 = icmp eq i32 %187, 0
  br i1 %cmp278, label %if.then280, label %if.end281

if.then280:                                       ; preds = %land.lhs.true277
  call void @set_regex_charset(i32* %rx_flags, i32 2)
  br label %if.end281

if.end281:                                        ; preds = %if.then280, %land.lhs.true277, %if.end274
  %188 = load i8*, i8** %exp, align 8
  %189 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %189, i32 0, i32 2
  store i8* %188, i8** %precomp, align 8
  %190 = load i32, i32* %rx_flags, align 4
  %191 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %flags282 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %191, i32 0, i32 0
  store i32 %190, i32* %flags282, align 8
  %192 = load i32, i32* %pm_flags.addr, align 4
  %193 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %pm_flags283 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %193, i32 0, i32 1
  store i32 %192, i32* %pm_flags283, align 4
  %194 = load i8, i8* %runtime_code, align 1
  %tobool284 = trunc i8 %194 to i1
  br i1 %tobool284, label %if.then285, label %if.end297

if.then285:                                       ; preds = %if.end281
  %195 = load i8, i8* @PL_tainting, align 1
  %tobool286 = trunc i8 %195 to i1
  br i1 %tobool286, label %land.lhs.true288, label %if.end292

land.lhs.true288:                                 ; preds = %if.then285
  %196 = load i8, i8* @PL_tainted, align 1
  %tobool289 = trunc i8 %196 to i1
  br i1 %tobool289, label %if.then291, label %if.end292

if.then291:                                       ; preds = %land.lhs.true288
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.180, i64 0, i64 0))
  br label %if.end292

if.end292:                                        ; preds = %if.then291, %land.lhs.true288, %if.then285
  %197 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %198 = load i8*, i8** %exp, align 8
  %199 = load i64, i64* %plen, align 8
  %call293 = call zeroext i1 @S_compile_runtime_code(%struct.RExC_state_t* %197, i8* %198, i64 %199)
  br i1 %call293, label %if.end296, label %if.then294

if.then294:                                       ; preds = %if.end292
  %200 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %201 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %num_code_blocks295 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %201, i32 0, i32 39
  %202 = load i32, i32* %num_code_blocks295, align 8
  call void @S_pat_upgrade_to_utf8(%struct.RExC_state_t* %200, i8** %exp, i64* %plen, i32 %202)
  br label %redo_first_pass

if.end296:                                        ; preds = %if.end292
  br label %if.end297

if.end297:                                        ; preds = %if.end296, %if.end281
  %203 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %sawback = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %203, i32 0, i32 15
  store i32 0, i32* %sawback, align 4
  %204 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %204, i32 0, i32 16
  store i32 0, i32* %seen, align 8
  %205 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %maxlen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %205, i32 0, i32 41
  store i64 0, i64* %maxlen, align 8
  %206 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %in_lookbehind = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %206, i32 0, i32 33
  store i32 0, i32* %in_lookbehind, align 4
  %207 = load i8*, i8** %exp, align 8
  %208 = load i8, i8* %207, align 1
  %conv298 = sext i8 %208 to i32
  %cmp299 = icmp eq i32 %conv298, 94
  %209 = zext i1 %cmp299 to i64
  %cond301 = select i1 %cmp299, i32 -1, i32 0
  %210 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen_zerolen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %210, i32 0, i32 21
  store i32 %cond301, i32* %seen_zerolen, align 4
  %211 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %extralen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %211, i32 0, i32 20
  store i32 0, i32* %extralen, align 8
  %212 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %override_recoding = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %212, i32 0, i32 36
  store i32 0, i32* %override_recoding, align 8
  %213 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %in_multi_char_class = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %213, i32 0, i32 37
  store i32 0, i32* %in_multi_char_class, align 4
  %214 = load i8*, i8** %exp, align 8
  %215 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %215, i32 0, i32 8
  store i8* %214, i8** %parse, align 8
  %216 = load i8*, i8** %exp, align 8
  %217 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %217, i32 0, i32 6
  store i8* %216, i8** %start, align 8
  %218 = load i8*, i8** %exp, align 8
  %219 = load i64, i64* %plen, align 8
  %add.ptr302 = getelementptr inbounds i8, i8* %218, i64 %219
  %220 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %220, i32 0, i32 7
  store i8* %add.ptr302, i8** %end, align 8
  %221 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %naughty = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %221, i32 0, i32 14
  store i32 0, i32* %naughty, align 8
  %222 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %222, i32 0, i32 18
  store i32 1, i32* %npar, align 8
  %223 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %nestroot = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %223, i32 0, i32 19
  store i32 0, i32* %nestroot, align 4
  %224 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %224, i32 0, i32 17
  store i64 0, i64* %size, align 8
  %225 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %225, i32 0, i32 13
  %226 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %227 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %227, i32 0, i32 12
  store %struct.regnode* %226, %struct.regnode** %emit, align 8
  %228 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %whilem_seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %228, i32 0, i32 9
  store i64 0, i64* %whilem_seen, align 8
  %229 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %open_parens = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %229, i32 0, i32 22
  store %struct.regnode** null, %struct.regnode*** %open_parens, align 8
  %230 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %close_parens = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %230, i32 0, i32 23
  store %struct.regnode** null, %struct.regnode*** %close_parens, align 8
  %231 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %opend = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %231, i32 0, i32 24
  store %struct.regnode* null, %struct.regnode** %opend, align 8
  %232 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %paren_names = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %232, i32 0, i32 28
  store %struct.hv* null, %struct.hv** %paren_names, align 8
  %233 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %recurse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %233, i32 0, i32 29
  store %struct.regnode** null, %struct.regnode*** %recurse, align 8
  %234 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %study_chunk_recursed = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %234, i32 0, i32 31
  store i8* null, i8** %study_chunk_recursed, align 8
  %235 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %study_chunk_recursed_bytes = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %235, i32 0, i32 32
  store i32 0, i32* %study_chunk_recursed_bytes, align 8
  %236 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %recurse_count = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %236, i32 0, i32 30
  store i32 0, i32* %recurse_count, align 8
  %237 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %code_index = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %237, i32 0, i32 40
  store i32 0, i32* %code_index, align 4
  %238 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %code_blocks303 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %238, i32 0, i32 38
  %239 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks303, align 8
  %tobool304 = icmp ne %struct.reg_code_block* %239, null
  br i1 %tobool304, label %land.lhs.true305, label %if.end316

land.lhs.true305:                                 ; preds = %if.end297
  %240 = load %struct.sv*, %struct.sv** %code_blocksv, align 8
  %tobool306 = icmp ne %struct.sv* %240, null
  br i1 %tobool306, label %if.end316, label %if.then307

if.then307:                                       ; preds = %land.lhs.true305
  %call308 = call %struct.sv* @Perl_newSV_type(i32 3)
  store %struct.sv* %call308, %struct.sv** %code_blocksv, align 8
  %241 = load %struct.sv*, %struct.sv** %code_blocksv, align 8
  %242 = bitcast %struct.sv* %241 to i8*
  %243 = bitcast i8* %242 to %struct.sv*
  %244 = bitcast %struct.sv* %243 to i8*
  call void @Perl_save_pushptr(i8* %244, i32 11)
  br label %do.body

do.body:                                          ; preds = %if.then307
  %245 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %code_blocks309 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %245, i32 0, i32 38
  %246 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks309, align 8
  %247 = bitcast %struct.reg_code_block* %246 to i8*
  %248 = load %struct.sv*, %struct.sv** %code_blocksv, align 8
  %sv_u310 = getelementptr inbounds %struct.sv, %struct.sv* %248, i32 0, i32 3
  %svu_pv311 = bitcast %union.anon* %sv_u310 to i8**
  store i8* %247, i8** %svu_pv311, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body312

do.body312:                                       ; preds = %do.end
  %249 = load %struct.sv*, %struct.sv** %code_blocksv, align 8
  %sv_any313 = getelementptr inbounds %struct.sv, %struct.sv* %249, i32 0, i32 0
  %250 = load i8*, i8** %sv_any313, align 8
  %251 = bitcast i8* %250 to %struct.xpv*
  %xpv_len_u314 = getelementptr inbounds %struct.xpv, %struct.xpv* %251, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u314 to i64*
  store i64 1, i64* %xpvlenu_len, align 8
  br label %do.end315

do.end315:                                        ; preds = %do.body312
  br label %if.end316

if.end316:                                        ; preds = %do.end315, %land.lhs.true305, %if.end297
  %252 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %call317 = call %struct.regnode* @S_reg(%struct.RExC_state_t* %252, i32 0, i32* %flags, i32 1)
  %cmp318 = icmp eq %struct.regnode* %call317, null
  br i1 %cmp318, label %if.then320, label %if.end327

if.then320:                                       ; preds = %if.end316
  %253 = load i32, i32* %flags, align 4
  %and321 = and i32 %253, 32
  %tobool322 = icmp ne i32 %and321, 0
  br i1 %tobool322, label %if.then323, label %if.end325

if.then323:                                       ; preds = %if.then320
  %254 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %255 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %num_code_blocks324 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %255, i32 0, i32 39
  %256 = load i32, i32* %num_code_blocks324, align 8
  call void @S_pat_upgrade_to_utf8(%struct.RExC_state_t* %254, i8** %exp, i64* %plen, i32 %256)
  br label %redo_first_pass

if.end325:                                        ; preds = %if.then320
  %257 = load i32, i32* %flags, align 4
  %conv326 = sext i32 %257 to i64
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.181, i64 0, i64 0), i64 %conv326)
  br label %if.end327

if.end327:                                        ; preds = %if.end325, %if.end316
  %258 = load %struct.sv*, %struct.sv** %code_blocksv, align 8
  %tobool328 = icmp ne %struct.sv* %258, null
  br i1 %tobool328, label %if.then329, label %if.end335

if.then329:                                       ; preds = %if.end327
  br label %do.body330

do.body330:                                       ; preds = %if.then329
  %259 = load %struct.sv*, %struct.sv** %code_blocksv, align 8
  %sv_any331 = getelementptr inbounds %struct.sv, %struct.sv* %259, i32 0, i32 0
  %260 = load i8*, i8** %sv_any331, align 8
  %261 = bitcast i8* %260 to %struct.xpv*
  %xpv_len_u332 = getelementptr inbounds %struct.xpv, %struct.xpv* %261, i32 0, i32 3
  %xpvlenu_len333 = bitcast %union.anon.19* %xpv_len_u332 to i64*
  store i64 0, i64* %xpvlenu_len333, align 8
  br label %do.end334

do.end334:                                        ; preds = %do.body330
  br label %if.end335

if.end335:                                        ; preds = %do.end334, %if.end327
  %262 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %utf8336 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %262, i32 0, i32 25
  %263 = load i32, i32* %utf8336, align 8
  %tobool337 = icmp ne i32 %263, 0
  br i1 %tobool337, label %land.lhs.true341, label %lor.lhs.false338

lor.lhs.false338:                                 ; preds = %if.end335
  %264 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %uni_semantics339 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %264, i32 0, i32 27
  %265 = load i32, i32* %uni_semantics339, align 8
  %tobool340 = icmp ne i32 %265, 0
  br i1 %tobool340, label %land.lhs.true341, label %if.end346

land.lhs.true341:                                 ; preds = %lor.lhs.false338, %if.end335
  %266 = load i32, i32* %rx_flags, align 4
  %call342 = call i32 @get_regex_charset(i32 %266)
  %cmp343 = icmp eq i32 %call342, 0
  br i1 %cmp343, label %if.then345, label %if.end346

if.then345:                                       ; preds = %land.lhs.true341
  call void @set_regex_charset(i32* %rx_flags, i32 2)
  br label %if.end346

if.end346:                                        ; preds = %if.then345, %land.lhs.true341, %lor.lhs.false338
  %267 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size347 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %267, i32 0, i32 17
  %268 = load i64, i64* %size347, align 8
  %cmp348 = icmp sge i64 %268, 65536
  br i1 %cmp348, label %land.lhs.true350, label %if.else358

land.lhs.true350:                                 ; preds = %if.end346
  %269 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %extralen351 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %269, i32 0, i32 20
  %270 = load i32, i32* %extralen351, align 8
  %tobool352 = icmp ne i32 %270, 0
  br i1 %tobool352, label %if.then353, label %if.else358

if.then353:                                       ; preds = %land.lhs.true350
  %271 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %extralen354 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %271, i32 0, i32 20
  %272 = load i32, i32* %extralen354, align 8
  %conv355 = sext i32 %272 to i64
  %273 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size356 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %273, i32 0, i32 17
  %274 = load i64, i64* %size356, align 8
  %add357 = add nsw i64 %274, %conv355
  store i64 %add357, i64* %size356, align 8
  br label %if.end360

if.else358:                                       ; preds = %land.lhs.true350, %if.end346
  %275 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %extralen359 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %275, i32 0, i32 20
  store i32 0, i32* %extralen359, align 8
  br label %if.end360

if.end360:                                        ; preds = %if.else358, %if.then353
  %276 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %whilem_seen361 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %276, i32 0, i32 9
  %277 = load i64, i64* %whilem_seen361, align 8
  %cmp362 = icmp sgt i64 %277, 15
  br i1 %cmp362, label %if.then364, label %if.end366

if.then364:                                       ; preds = %if.end360
  %278 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %whilem_seen365 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %278, i32 0, i32 9
  store i64 15, i64* %whilem_seen365, align 8
  br label %if.end366

if.end366:                                        ; preds = %if.then364, %if.end360
  %call367 = call %struct.sv* @Perl_newSV_type(i32 8)
  %279 = bitcast %struct.sv* %call367 to %struct.p5rx*
  store %struct.p5rx* %279, %struct.p5rx** %rx, align 8
  %280 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call368 = call %struct.regexp* @S_ReANY(%struct.p5rx* %280)
  store %struct.regexp* %call368, %struct.regexp** %r, align 8
  %281 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size369 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %281, i32 0, i32 17
  %282 = load i64, i64* %size369, align 8
  %conv370 = trunc i64 %282 to i32
  %conv371 = zext i32 %conv370 to i64
  %mul372 = mul i64 %conv371, 4
  %add373 = add i64 48, %mul372
  %mul374 = mul i64 %add373, 1
  %call375 = call i8* @Perl_safesysmalloc(i64 %mul374)
  %283 = bitcast i8* %call375 to %struct.regexp_internal*
  store %struct.regexp_internal* %283, %struct.regexp_internal** %ri, align 8
  %284 = load %struct.regexp*, %struct.regexp** %r, align 8
  %cmp376 = icmp eq %struct.regexp* %284, null
  br i1 %cmp376, label %if.then381, label %lor.lhs.false378

lor.lhs.false378:                                 ; preds = %if.end366
  %285 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %cmp379 = icmp eq %struct.regexp_internal* %285, null
  br i1 %cmp379, label %if.then381, label %if.end402

if.then381:                                       ; preds = %lor.lhs.false378, %if.end366
  br label %do.body382

do.body382:                                       ; preds = %if.then381
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses, align 8
  %286 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %end383 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %286, i32 0, i32 7
  %287 = load i8*, i8** %end383, align 8
  %288 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %precomp384 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %288, i32 0, i32 2
  %289 = load i8*, i8** %precomp384, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %287 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %289 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %len, align 8
  %290 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit385 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %290, i32 0, i32 12
  %291 = load %struct.regnode*, %struct.regnode** %emit385, align 8
  %292 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit_dummy386 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %292, i32 0, i32 13
  %293 = bitcast %struct.regnode_ssc* %emit_dummy386 to %struct.regnode*
  %cmp387 = icmp eq %struct.regnode* %291, %293
  br i1 %cmp387, label %if.end390, label %if.then389

if.then389:                                       ; preds = %do.body382
  %294 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rx_sv = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %294, i32 0, i32 3
  %295 = load %struct.p5rx*, %struct.p5rx** %rx_sv, align 8
  %296 = bitcast %struct.p5rx* %295 to i8*
  %297 = bitcast i8* %296 to %struct.sv*
  %298 = bitcast %struct.sv* %297 to i8*
  call void @Perl_save_pushptr(i8* %298, i32 11)
  br label %if.end390

if.end390:                                        ; preds = %if.then389, %do.body382
  %299 = load i64, i64* %len, align 8
  %cmp391 = icmp sgt i64 %299, 127
  br i1 %cmp391, label %if.then393, label %if.end394

if.then393:                                       ; preds = %if.end390
  store i64 117, i64* %len, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses, align 8
  br label %if.end394

if.end394:                                        ; preds = %if.then393, %if.end390
  %300 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %utf8395 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %300, i32 0, i32 25
  %301 = load i32, i32* %utf8395, align 8
  %tobool396 = icmp ne i32 %301, 0
  %302 = zext i1 %tobool396 to i64
  %cond397 = select i1 %tobool396, i32 1, i32 0
  %tobool398 = icmp ne i32 %cond397, 0
  %303 = zext i1 %tobool398 to i64
  %cond399 = select i1 %tobool398, i32 1, i32 0
  %304 = load i64, i64* %len, align 8
  %305 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %precomp400 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %305, i32 0, i32 2
  %306 = load i8*, i8** %precomp400, align 8
  %307 = load i8*, i8** %ellipses, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.184, i64 0, i64 0), i32 %cond399, i64 %304, i8* %306, i8* %307)
  br label %do.end401

do.end401:                                        ; preds = %if.end394
  br label %if.end402

if.end402:                                        ; preds = %do.end401, %lor.lhs.false378
  %308 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %309 = bitcast %struct.regexp_internal* %308 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %309, i8 0, i64 48, i1 false)
  %310 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %311 = bitcast %struct.regexp_internal* %310 to i8*
  %312 = load %struct.regexp*, %struct.regexp** %r, align 8
  %pprivate = getelementptr inbounds %struct.regexp, %struct.regexp* %312, i32 0, i32 14
  store i8* %311, i8** %pprivate, align 8
  %313 = load %struct.regexp_engine*, %struct.regexp_engine** %eng.addr, align 8
  %314 = load %struct.regexp*, %struct.regexp** %r, align 8
  %engine = getelementptr inbounds %struct.regexp, %struct.regexp* %314, i32 0, i32 4
  store %struct.regexp_engine* %313, %struct.regexp_engine** %engine, align 8
  %315 = load i32, i32* %rx_flags, align 4
  %316 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags = getelementptr inbounds %struct.regexp, %struct.regexp* %316, i32 0, i32 7
  store i32 %315, i32* %extflags, align 8
  %317 = load i32, i32* %orig_rx_flags.addr, align 4
  %and403 = and i32 %317, 4095
  %318 = load %struct.regexp*, %struct.regexp** %r, align 8
  %compflags404 = getelementptr inbounds %struct.regexp, %struct.regexp* %318, i32 0, i32 24
  %319 = trunc i32 %and403 to i16
  %bf.load405 = load i16, i16* %compflags404, align 8
  %bf.value = and i16 %319, 511
  %bf.shl = shl i16 %bf.value, 4
  %bf.clear406 = and i16 %bf.load405, -8177
  %bf.set = or i16 %bf.clear406, %bf.shl
  store i16 %bf.set, i16* %compflags404, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %320 = load i32, i32* %pm_flags.addr, align 4
  %and407 = and i32 %320, 1073741824
  %tobool408 = icmp ne i32 %and407, 0
  br i1 %tobool408, label %if.then409, label %if.else414

if.then409:                                       ; preds = %if.end402
  %321 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %code_blocks410 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %321, i32 0, i32 38
  %322 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks410, align 8
  %323 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %code_blocks411 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %323, i32 0, i32 4
  store %struct.reg_code_block* %322, %struct.reg_code_block** %code_blocks411, align 8
  %324 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %num_code_blocks412 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %324, i32 0, i32 39
  %325 = load i32, i32* %num_code_blocks412, align 8
  %326 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %num_code_blocks413 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %326, i32 0, i32 5
  store i32 %325, i32* %num_code_blocks413, align 8
  br label %if.end435

if.else414:                                       ; preds = %if.end402
  store i32 0, i32* %n415, align 4
  br label %for.cond416

for.cond416:                                      ; preds = %for.inc431, %if.else414
  %327 = load i32, i32* %n415, align 4
  %328 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %num_code_blocks417 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %328, i32 0, i32 39
  %329 = load i32, i32* %num_code_blocks417, align 8
  %cmp418 = icmp slt i32 %327, %329
  br i1 %cmp418, label %for.body420, label %for.end433

for.body420:                                      ; preds = %for.cond416
  %330 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %code_blocks421 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %330, i32 0, i32 38
  %331 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks421, align 8
  %332 = load i32, i32* %n415, align 4
  %idxprom422 = sext i32 %332 to i64
  %arrayidx423 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %331, i64 %idxprom422
  %src_regex = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx423, i32 0, i32 3
  %333 = load %struct.p5rx*, %struct.p5rx** %src_regex, align 8
  %tobool424 = icmp ne %struct.p5rx* %333, null
  br i1 %tobool424, label %if.then425, label %if.end430

if.then425:                                       ; preds = %for.body420
  %334 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %code_blocks426 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %334, i32 0, i32 38
  %335 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks426, align 8
  %336 = load i32, i32* %n415, align 4
  %idxprom427 = sext i32 %336 to i64
  %arrayidx428 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %335, i64 %idxprom427
  %src_regex429 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx428, i32 0, i32 3
  %337 = load %struct.p5rx*, %struct.p5rx** %src_regex429, align 8
  %338 = bitcast %struct.p5rx* %337 to i8*
  %339 = bitcast i8* %338 to %struct.sv*
  %340 = bitcast %struct.sv* %339 to i8*
  call void @Perl_save_pushptr(i8* %340, i32 11)
  br label %if.end430

if.end430:                                        ; preds = %if.then425, %for.body420
  br label %for.inc431

for.inc431:                                       ; preds = %if.end430
  %341 = load i32, i32* %n415, align 4
  %inc432 = add nsw i32 %341, 1
  store i32 %inc432, i32* %n415, align 4
  br label %for.cond416

for.end433:                                       ; preds = %for.cond416
  %342 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %code_blocks434 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %342, i32 0, i32 38
  %343 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks434, align 8
  %344 = bitcast %struct.reg_code_block* %343 to i8*
  call void @Perl_save_pushptr(i8* %344, i32 10)
  br label %if.end435

if.end435:                                        ; preds = %for.end433, %if.then409
  %345 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags436 = getelementptr inbounds %struct.regexp, %struct.regexp* %345, i32 0, i32 7
  %346 = load i32, i32* %extflags436, align 8
  %and437 = and i32 %346, 64
  %cmp438 = icmp eq i32 %and437, 64
  %frombool440 = zext i1 %cmp438 to i8
  store i8 %frombool440, i8* %has_p, align 1
  %347 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags441 = getelementptr inbounds %struct.regexp, %struct.regexp* %347, i32 0, i32 7
  %348 = load i32, i32* %extflags441, align 8
  %call442 = call i32 @get_regex_charset(i32 %348)
  %cmp443 = icmp ne i32 %call442, 0
  %frombool445 = zext i1 %cmp443 to i8
  store i8 %frombool445, i8* %has_charset, align 1
  %349 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags446 = getelementptr inbounds %struct.regexp, %struct.regexp* %349, i32 0, i32 7
  %350 = load i32, i32* %extflags446, align 8
  %and447 = and i32 %350, 47
  %cmp448 = icmp ne i32 %and447, 47
  br i1 %cmp448, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end435
  %351 = load i8, i8* %has_charset, align 1
  %tobool450 = trunc i8 %351 to i1
  %lnot451 = xor i1 %tobool450, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end435
  %352 = phi i1 [ true, %if.end435 ], [ %lnot451, %lor.rhs ]
  %frombool453 = zext i1 %352 to i8
  store i8 %frombool453, i8* %has_default, align 1
  %353 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen454 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %353, i32 0, i32 16
  %354 = load i32, i32* %seen454, align 8
  %and455 = and i32 %354, 512
  %cmp456 = icmp eq i32 %and455, 512
  %frombool458 = zext i1 %cmp456 to i8
  store i8 %frombool458, i8* %has_runon, align 1
  %355 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags459 = getelementptr inbounds %struct.regexp, %struct.regexp* %355, i32 0, i32 7
  %356 = load i32, i32* %extflags459, align 8
  %and460 = and i32 %356, 47
  %shr = lshr i32 %and460, 0
  %conv461 = trunc i32 %shr to i16
  store i16 %conv461, i16* %reganch, align 2
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.185, i64 0, i64 0), i8** %fptr, align 8
  %357 = load i64, i64* %plen, align 8
  %358 = load i8, i8* %has_p, align 1
  %tobool462 = trunc i8 %358 to i1
  %conv463 = zext i1 %tobool462 to i64
  %add464 = add i64 %357, %conv463
  %359 = load i8, i8* %has_runon, align 1
  %tobool465 = trunc i8 %359 to i1
  %conv466 = zext i1 %tobool465 to i64
  %add467 = add i64 %add464, %conv466
  %360 = load i8, i8* %has_default, align 1
  %tobool468 = trunc i8 %360 to i1
  %conv469 = zext i1 %tobool468 to i64
  %add470 = add i64 %add467, %conv469
  %361 = load i8, i8* %has_charset, align 1
  %tobool471 = trunc i8 %361 to i1
  %362 = zext i1 %tobool471 to i64
  %cond473 = select i1 %tobool471, i32 2, i32 0
  %conv474 = sext i32 %cond473 to i64
  %add475 = add i64 %add470, %conv474
  %add476 = add i64 %add475, 6
  %add477 = add i64 %add476, 4
  store i64 %add477, i64* %wraplen, align 8
  %363 = load i64, i64* %wraplen, align 8
  %add478 = add i64 %363, 1
  %mul479 = mul i64 %add478, 1
  %call480 = call i8* @Perl_safesysmalloc(i64 %mul479)
  store i8* %call480, i8** %p, align 8
  %364 = load i8*, i8** %p, align 8
  %365 = load %struct.regexp*, %struct.regexp** %r, align 8
  %xpv_len_u481 = getelementptr inbounds %struct.regexp, %struct.regexp* %365, i32 0, i32 3
  %xpvlenu_pv482 = bitcast %union.anon.6* %xpv_len_u481 to i8**
  store i8* %364, i8** %xpvlenu_pv482, align 8
  %366 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %utf8483 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %366, i32 0, i32 25
  %367 = load i32, i32* %utf8483, align 8
  %tobool484 = icmp ne i32 %367, 0
  br i1 %tobool484, label %if.then485, label %if.end488

if.then485:                                       ; preds = %lor.end
  %368 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %sv_flags486 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %368, i32 0, i32 2
  %369 = load i32, i32* %sv_flags486, align 4
  %or487 = or i32 %369, 536870912
  store i32 %or487, i32* %sv_flags486, align 4
  br label %if.end488

if.end488:                                        ; preds = %if.then485, %lor.end
  %370 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %370, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  store i8 40, i8* %370, align 1
  %371 = load i8*, i8** %p, align 8
  %incdec.ptr489 = getelementptr inbounds i8, i8* %371, i32 1
  store i8* %incdec.ptr489, i8** %p, align 8
  store i8 63, i8* %371, align 1
  %372 = load i8, i8* %has_default, align 1
  %tobool490 = trunc i8 %372 to i1
  br i1 %tobool490, label %if.then491, label %if.end493

if.then491:                                       ; preds = %if.end488
  %373 = load i8*, i8** %p, align 8
  %incdec.ptr492 = getelementptr inbounds i8, i8* %373, i32 1
  store i8* %incdec.ptr492, i8** %p, align 8
  store i8 94, i8* %373, align 1
  br label %if.end493

if.end493:                                        ; preds = %if.then491, %if.end488
  %374 = load i8, i8* %has_charset, align 1
  %tobool494 = trunc i8 %374 to i1
  br i1 %tobool494, label %if.then495, label %if.end501

if.then495:                                       ; preds = %if.end493
  %375 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags497 = getelementptr inbounds %struct.regexp, %struct.regexp* %375, i32 0, i32 7
  %376 = load i32, i32* %extflags497, align 8
  %call498 = call i8* @get_regex_charset_name(i32 %376, i64* %len496)
  store i8* %call498, i8** %name, align 8
  %377 = load i8*, i8** %p, align 8
  %378 = load i8*, i8** %name, align 8
  %379 = load i64, i64* %len496, align 8
  %mul499 = mul i64 %379, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %377, i8* align 1 %378, i64 %mul499, i1 false)
  %380 = load i64, i64* %len496, align 8
  %381 = load i8*, i8** %p, align 8
  %add.ptr500 = getelementptr inbounds i8, i8* %381, i64 %380
  store i8* %add.ptr500, i8** %p, align 8
  br label %if.end501

if.end501:                                        ; preds = %if.then495, %if.end493
  %382 = load i8, i8* %has_p, align 1
  %tobool502 = trunc i8 %382 to i1
  br i1 %tobool502, label %if.then503, label %if.end505

if.then503:                                       ; preds = %if.end501
  %383 = load i8*, i8** %p, align 8
  %incdec.ptr504 = getelementptr inbounds i8, i8* %383, i32 1
  store i8* %incdec.ptr504, i8** %p, align 8
  store i8 112, i8* %383, align 1
  br label %if.end505

if.end505:                                        ; preds = %if.then503, %if.end501
  br label %while.cond

while.cond:                                       ; preds = %if.end513, %if.end505
  %384 = load i8*, i8** %fptr, align 8
  %incdec.ptr506 = getelementptr inbounds i8, i8* %384, i32 1
  store i8* %incdec.ptr506, i8** %fptr, align 8
  %385 = load i8, i8* %384, align 1
  store i8 %385, i8* %ch, align 1
  %tobool507 = icmp ne i8 %385, 0
  br i1 %tobool507, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %386 = load i16, i16* %reganch, align 2
  %conv508 = zext i16 %386 to i32
  %and509 = and i32 %conv508, 1
  %tobool510 = icmp ne i32 %and509, 0
  br i1 %tobool510, label %if.then511, label %if.end513

if.then511:                                       ; preds = %while.body
  %387 = load i8, i8* %ch, align 1
  %388 = load i8*, i8** %p, align 8
  %incdec.ptr512 = getelementptr inbounds i8, i8* %388, i32 1
  store i8* %incdec.ptr512, i8** %p, align 8
  store i8 %387, i8* %388, align 1
  br label %if.end513

if.end513:                                        ; preds = %if.then511, %while.body
  %389 = load i16, i16* %reganch, align 2
  %conv514 = zext i16 %389 to i32
  %shr515 = ashr i32 %conv514, 1
  %conv516 = trunc i32 %shr515 to i16
  store i16 %conv516, i16* %reganch, align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %390 = load i8*, i8** %p, align 8
  %incdec.ptr517 = getelementptr inbounds i8, i8* %390, i32 1
  store i8* %incdec.ptr517, i8** %p, align 8
  store i8 58, i8* %390, align 1
  %391 = load i8*, i8** %p, align 8
  %392 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %precomp518 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %392, i32 0, i32 2
  %393 = load i8*, i8** %precomp518, align 8
  %394 = load i64, i64* %plen, align 8
  %mul519 = mul i64 %394, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %391, i8* align 1 %393, i64 %mul519, i1 false)
  %395 = load i8*, i8** %p, align 8
  %396 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call520 = call %struct.regexp* @S_ReANY(%struct.p5rx* %396)
  %xpv_len_u521 = getelementptr inbounds %struct.regexp, %struct.regexp* %call520, i32 0, i32 3
  %xpvlenu_pv522 = bitcast %union.anon.6* %xpv_len_u521 to i8**
  %397 = load i8*, i8** %xpvlenu_pv522, align 8
  %sub.ptr.lhs.cast523 = ptrtoint i8* %395 to i64
  %sub.ptr.rhs.cast524 = ptrtoint i8* %397 to i64
  %sub.ptr.sub525 = sub i64 %sub.ptr.lhs.cast523, %sub.ptr.rhs.cast524
  %conv526 = trunc i64 %sub.ptr.sub525 to i32
  %398 = load %struct.regexp*, %struct.regexp** %r, align 8
  %pre_prefix527 = getelementptr inbounds %struct.regexp, %struct.regexp* %398, i32 0, i32 24
  %399 = trunc i32 %conv526 to i16
  %bf.load528 = load i16, i16* %pre_prefix527, align 8
  %bf.value529 = and i16 %399, 15
  %bf.clear530 = and i16 %bf.load528, -16
  %bf.set531 = or i16 %bf.clear530, %bf.value529
  store i16 %bf.set531, i16* %pre_prefix527, align 8
  %bf.result.cast532 = zext i16 %bf.value529 to i32
  %400 = load i64, i64* %plen, align 8
  %401 = load i8*, i8** %p, align 8
  %add.ptr533 = getelementptr inbounds i8, i8* %401, i64 %400
  store i8* %add.ptr533, i8** %p, align 8
  %402 = load i8, i8* %has_runon, align 1
  %tobool534 = trunc i8 %402 to i1
  br i1 %tobool534, label %if.then535, label %if.end537

if.then535:                                       ; preds = %while.end
  %403 = load i8*, i8** %p, align 8
  %incdec.ptr536 = getelementptr inbounds i8, i8* %403, i32 1
  store i8* %incdec.ptr536, i8** %p, align 8
  store i8 10, i8* %403, align 1
  br label %if.end537

if.end537:                                        ; preds = %if.then535, %while.end
  %404 = load i8*, i8** %p, align 8
  %incdec.ptr538 = getelementptr inbounds i8, i8* %404, i32 1
  store i8* %incdec.ptr538, i8** %p, align 8
  store i8 41, i8* %404, align 1
  %405 = load i8*, i8** %p, align 8
  store i8 0, i8* %405, align 1
  br label %do.body539

do.body539:                                       ; preds = %if.end537
  %406 = load i8*, i8** %p, align 8
  %407 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call540 = call %struct.regexp* @S_ReANY(%struct.p5rx* %407)
  %xpv_len_u541 = getelementptr inbounds %struct.regexp, %struct.regexp* %call540, i32 0, i32 3
  %xpvlenu_pv542 = bitcast %union.anon.6* %xpv_len_u541 to i8**
  %408 = load i8*, i8** %xpvlenu_pv542, align 8
  %sub.ptr.lhs.cast543 = ptrtoint i8* %406 to i64
  %sub.ptr.rhs.cast544 = ptrtoint i8* %408 to i64
  %sub.ptr.sub545 = sub i64 %sub.ptr.lhs.cast543, %sub.ptr.rhs.cast544
  %409 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %sv_any546 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %409, i32 0, i32 0
  %410 = load %struct.regexp*, %struct.regexp** %sv_any546, align 8
  %411 = bitcast %struct.regexp* %410 to %struct.xpv*
  %xpv_cur547 = getelementptr inbounds %struct.xpv, %struct.xpv* %411, i32 0, i32 2
  store i64 %sub.ptr.sub545, i64* %xpv_cur547, align 8
  br label %do.end548

do.end548:                                        ; preds = %do.body539
  %412 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags = getelementptr inbounds %struct.regexp, %struct.regexp* %412, i32 0, i32 13
  store i32 0, i32* %intflags, align 4
  %413 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar549 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %413, i32 0, i32 18
  %414 = load i32, i32* %npar549, align 8
  %sub550 = sub nsw i32 %414, 1
  %415 = load %struct.regexp*, %struct.regexp** %r, align 8
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %415, i32 0, i32 12
  store i32 %sub550, i32* %nparens, align 8
  %416 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen551 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %416, i32 0, i32 16
  %417 = load i32, i32* %seen551, align 8
  %and552 = and i32 %417, 32
  %tobool553 = icmp ne i32 %and552, 0
  br i1 %tobool553, label %if.then554, label %if.end565

if.then554:                                       ; preds = %do.end548
  %418 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar555 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %418, i32 0, i32 18
  %419 = load i32, i32* %npar555, align 8
  %conv556 = sext i32 %419 to i64
  %call557 = call i8* @Perl_safesyscalloc(i64 %conv556, i64 8)
  %420 = bitcast i8* %call557 to %struct.regnode**
  %421 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %open_parens558 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %421, i32 0, i32 22
  store %struct.regnode** %420, %struct.regnode*** %open_parens558, align 8
  %422 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %open_parens559 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %422, i32 0, i32 22
  %423 = load %struct.regnode**, %struct.regnode*** %open_parens559, align 8
  %424 = bitcast %struct.regnode** %423 to i8*
  call void @Perl_save_pushptr(i8* %424, i32 10)
  %425 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar560 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %425, i32 0, i32 18
  %426 = load i32, i32* %npar560, align 8
  %conv561 = sext i32 %426 to i64
  %call562 = call i8* @Perl_safesyscalloc(i64 %conv561, i64 8)
  %427 = bitcast i8* %call562 to %struct.regnode**
  %428 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %close_parens563 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %428, i32 0, i32 23
  store %struct.regnode** %427, %struct.regnode*** %close_parens563, align 8
  %429 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %close_parens564 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %429, i32 0, i32 23
  %430 = load %struct.regnode**, %struct.regnode*** %close_parens564, align 8
  %431 = bitcast %struct.regnode** %430 to i8*
  call void @Perl_save_pushptr(i8* %431, i32 10)
  br label %if.end565

if.end565:                                        ; preds = %if.then554, %do.end548
  %432 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen566 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %432, i32 0, i32 16
  %433 = load i32, i32* %seen566, align 8
  %and567 = and i32 %433, 2080
  %tobool568 = icmp ne i32 %and567, 0
  br i1 %tobool568, label %if.then569, label %if.end586

if.then569:                                       ; preds = %if.end565
  %434 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar570 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %434, i32 0, i32 18
  %435 = load i32, i32* %npar570, align 8
  %shr571 = ashr i32 %435, 3
  %436 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar572 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %436, i32 0, i32 18
  %437 = load i32, i32* %npar572, align 8
  %and573 = and i32 %437, 7
  %cmp574 = icmp ne i32 %and573, 0
  %conv575 = zext i1 %cmp574 to i32
  %add576 = add nsw i32 %shr571, %conv575
  %438 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %study_chunk_recursed_bytes577 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %438, i32 0, i32 32
  store i32 %add576, i32* %study_chunk_recursed_bytes577, align 8
  %439 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %study_chunk_recursed_bytes578 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %439, i32 0, i32 32
  %440 = load i32, i32* %study_chunk_recursed_bytes578, align 8
  %441 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar579 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %441, i32 0, i32 18
  %442 = load i32, i32* %npar579, align 8
  %mul580 = mul i32 %440, %442
  %conv581 = zext i32 %mul580 to i64
  %mul582 = mul i64 %conv581, 1
  %call583 = call i8* @Perl_safesysmalloc(i64 %mul582)
  %443 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %study_chunk_recursed584 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %443, i32 0, i32 31
  store i8* %call583, i8** %study_chunk_recursed584, align 8
  %444 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %study_chunk_recursed585 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %444, i32 0, i32 31
  %445 = load i8*, i8** %study_chunk_recursed585, align 8
  call void @Perl_save_pushptr(i8* %445, i32 10)
  br label %if.end586

if.end586:                                        ; preds = %if.then569, %if.end565
  %446 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size587 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %446, i32 0, i32 17
  %447 = load i64, i64* %size587, align 8
  %conv588 = trunc i64 %447 to i32
  %448 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %u = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %448, i32 0, i32 1
  %proglen = bitcast %union.anon.18* %u to i32*
  store i32 %conv588, i32* %proglen, align 8
  %449 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %450 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rx_sv589 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %450, i32 0, i32 3
  store %struct.p5rx* %449, %struct.p5rx** %rx_sv589, align 8
  %451 = load %struct.regexp*, %struct.regexp** %r, align 8
  %452 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rx590 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %452, i32 0, i32 4
  store %struct.regexp* %451, %struct.regexp** %rx590, align 8
  %453 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %454 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rxi = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %454, i32 0, i32 5
  store %struct.regexp_internal* %453, %struct.regexp_internal** %rxi, align 8
  %455 = load i32, i32* %rx_flags, align 4
  %456 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %flags591 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %456, i32 0, i32 0
  store i32 %455, i32* %flags591, align 8
  %457 = load i32, i32* %pm_flags.addr, align 4
  %458 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %pm_flags592 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %458, i32 0, i32 1
  store i32 %457, i32* %pm_flags592, align 4
  %459 = load i8*, i8** %exp, align 8
  %460 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %parse593 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %460, i32 0, i32 8
  store i8* %459, i8** %parse593, align 8
  %461 = load i8*, i8** %exp, align 8
  %462 = load i64, i64* %plen, align 8
  %add.ptr594 = getelementptr inbounds i8, i8* %461, i64 %462
  %463 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %end595 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %463, i32 0, i32 7
  store i8* %add.ptr594, i8** %end595, align 8
  %464 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %naughty596 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %464, i32 0, i32 14
  store i32 0, i32* %naughty596, align 8
  %465 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar597 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %465, i32 0, i32 18
  store i32 1, i32* %npar597, align 8
  %466 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %program = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %466, i32 0, i32 6
  %arraydecay = getelementptr inbounds [1 x %struct.regnode], [1 x %struct.regnode]* %program, i64 0, i64 0
  %467 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit_start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %467, i32 0, i32 10
  store %struct.regnode* %arraydecay, %struct.regnode** %emit_start, align 8
  %468 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %program598 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %468, i32 0, i32 6
  %arraydecay599 = getelementptr inbounds [1 x %struct.regnode], [1 x %struct.regnode]* %program598, i64 0, i64 0
  %469 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit600 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %469, i32 0, i32 12
  store %struct.regnode* %arraydecay599, %struct.regnode** %emit600, align 8
  %470 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %program601 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %470, i32 0, i32 6
  %arraydecay602 = getelementptr inbounds [1 x %struct.regnode], [1 x %struct.regnode]* %program601, i64 0, i64 0
  %471 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size603 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %471, i32 0, i32 17
  %472 = load i64, i64* %size603, align 8
  %add.ptr604 = getelementptr inbounds %struct.regnode, %struct.regnode* %arraydecay602, i64 %472
  %add.ptr605 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr604, i64 1
  %473 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit_bound = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %473, i32 0, i32 11
  store %struct.regnode* %add.ptr605, %struct.regnode** %emit_bound, align 8
  %474 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %code_index606 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %474, i32 0, i32 40
  store i32 0, i32* %code_index606, align 4
  %475 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %emit607 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %475, i32 0, i32 12
  %476 = load %struct.regnode*, %struct.regnode** %emit607, align 8
  %incdec.ptr608 = getelementptr inbounds %struct.regnode, %struct.regnode* %476, i32 1
  store %struct.regnode* %incdec.ptr608, %struct.regnode** %emit607, align 8
  %477 = bitcast %struct.regnode* %476 to i8*
  store i8 -100, i8* %477, align 1
  %478 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %call609 = call %struct.regnode* @S_reg(%struct.RExC_state_t* %478, i32 0, i32* %flags, i32 1)
  %cmp610 = icmp eq %struct.regnode* %call609, null
  br i1 %cmp610, label %if.then612, label %if.end614

if.then612:                                       ; preds = %if.end586
  %479 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %480 = bitcast %struct.p5rx* %479 to i8*
  %481 = bitcast i8* %480 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %481)
  %482 = load i32, i32* %flags, align 4
  %conv613 = sext i32 %482 to i64
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.186, i64 0, i64 0), i64 %conv613)
  br label %if.end614

if.end614:                                        ; preds = %if.then612, %if.end586
  %call615 = call i8* @Perl_safesysmalloc(i64 128)
  %483 = bitcast i8* %call615 to %struct.reg_substr_data*
  %484 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs = getelementptr inbounds %struct.regexp, %struct.regexp* %484, i32 0, i32 11
  store %struct.reg_substr_data* %483, %struct.reg_substr_data** %substrs, align 8
  %485 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %recurse_count616 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %485, i32 0, i32 30
  %486 = load i32, i32* %recurse_count616, align 8
  %tobool617 = icmp ne i32 %486, 0
  br i1 %tobool617, label %if.then618, label %if.end624

if.then618:                                       ; preds = %if.end614
  %487 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %recurse_count619 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %487, i32 0, i32 30
  %488 = load i32, i32* %recurse_count619, align 8
  %conv620 = sext i32 %488 to i64
  %call621 = call i8* @Perl_safesyscalloc(i64 %conv620, i64 8)
  %489 = bitcast i8* %call621 to %struct.regnode**
  %490 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %recurse622 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %490, i32 0, i32 29
  store %struct.regnode** %489, %struct.regnode*** %recurse622, align 8
  %491 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %recurse623 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %491, i32 0, i32 29
  %492 = load %struct.regnode**, %struct.regnode*** %recurse623, align 8
  %493 = bitcast %struct.regnode** %492 to i8*
  call void @Perl_save_pushptr(i8* %493, i32 10)
  br label %if.end624

if.end624:                                        ; preds = %if.then618, %if.end614
  br label %reStudy

reStudy:                                          ; preds = %if.then1352, %if.then940, %if.end624
  store i32 0, i32* %sawminmod, align 4
  store i32 0, i32* %sawopen, align 4
  store i32 0, i32* %sawplus, align 4
  store i32 0, i32* %sawlookahead, align 4
  store i64 0, i64* %minlen, align 8
  %494 = load %struct.regexp*, %struct.regexp** %r, align 8
  %minlen625 = getelementptr inbounds %struct.regexp, %struct.regexp* %494, i32 0, i32 8
  store i64 0, i64* %minlen625, align 8
  %495 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs626 = getelementptr inbounds %struct.regexp, %struct.regexp* %495, i32 0, i32 11
  %496 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs626, align 8
  %497 = bitcast %struct.reg_substr_data* %496 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %497, i8 0, i64 128, i1 false)
  %498 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %study_chunk_recursed627 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %498, i32 0, i32 31
  %499 = load i8*, i8** %study_chunk_recursed627, align 8
  %tobool628 = icmp ne i8* %499, null
  br i1 %tobool628, label %if.then629, label %if.end636

if.then629:                                       ; preds = %reStudy
  %500 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %study_chunk_recursed630 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %500, i32 0, i32 31
  %501 = load i8*, i8** %study_chunk_recursed630, align 8
  %502 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %study_chunk_recursed_bytes631 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %502, i32 0, i32 32
  %503 = load i32, i32* %study_chunk_recursed_bytes631, align 8
  %504 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar632 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %504, i32 0, i32 18
  %505 = load i32, i32* %npar632, align 8
  %mul633 = mul i32 %503, %505
  %conv634 = zext i32 %mul633 to i64
  %mul635 = mul i64 %conv634, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %501, i8 0, i64 %mul635, i1 false)
  br label %if.end636

if.end636:                                        ; preds = %if.then629, %reStudy
  %506 = load i32, i32* %restudied, align 4
  %tobool637 = icmp ne i32 %506, 0
  br i1 %tobool637, label %if.else639, label %if.then638

if.then638:                                       ; preds = %if.end636
  %507 = bitcast %struct.scan_data_t* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %507, i8* align 8 bitcast (%struct.scan_data_t* @zero_scan_data to i8*), i64 152, i1 false)
  %508 = bitcast %struct.RExC_state_t* %copyRExC_state to i8*
  %509 = bitcast %struct.RExC_state_t* %RExC_state to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %508, i8* align 8 %509, i64 344, i1 false)
  br label %if.end651

if.else639:                                       ; preds = %if.end636
  %510 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen641 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %510, i32 0, i32 16
  %511 = load i32, i32* %seen641, align 8
  store i32 %511, i32* %seen640, align 4
  %512 = bitcast %struct.RExC_state_t* %RExC_state to i8*
  %513 = bitcast %struct.RExC_state_t* %copyRExC_state to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %512, i8* align 8 %513, i64 344, i1 false)
  %514 = load i32, i32* %seen640, align 4
  %and642 = and i32 %514, 64
  %tobool643 = icmp ne i32 %and642, 0
  br i1 %tobool643, label %if.then644, label %if.else647

if.then644:                                       ; preds = %if.else639
  %515 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen645 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %515, i32 0, i32 16
  %516 = load i32, i32* %seen645, align 8
  %or646 = or i32 %516, 64
  store i32 %or646, i32* %seen645, align 8
  br label %if.end650

if.else647:                                       ; preds = %if.else639
  %517 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen648 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %517, i32 0, i32 16
  %518 = load i32, i32* %seen648, align 8
  %and649 = and i32 %518, -65
  store i32 %and649, i32* %seen648, align 8
  br label %if.end650

if.end650:                                        ; preds = %if.else647, %if.then644
  %519 = bitcast %struct.scan_data_t* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %519, i8* align 8 bitcast (%struct.scan_data_t* @zero_scan_data to i8*), i64 152, i1 false)
  br label %if.end651

if.end651:                                        ; preds = %if.end650, %if.then638
  %520 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %flags652 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %520, i32 0, i32 0
  %521 = load i32, i32* %flags652, align 8
  %522 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags653 = getelementptr inbounds %struct.regexp, %struct.regexp* %522, i32 0, i32 7
  store i32 %521, i32* %extflags653, align 8
  %523 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %utf8654 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %523, i32 0, i32 25
  %524 = load i32, i32* %utf8654, align 8
  %tobool655 = icmp ne i32 %524, 0
  br i1 %tobool655, label %cond.true656, label %cond.false657

cond.true656:                                     ; preds = %if.end651
  br i1 true, label %if.then658, label %if.end661

cond.false657:                                    ; preds = %if.end651
  br i1 false, label %if.then658, label %if.end661

if.then658:                                       ; preds = %cond.false657, %cond.true656
  %525 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %sv_flags659 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %525, i32 0, i32 2
  %526 = load i32, i32* %sv_flags659, align 4
  %or660 = or i32 %526, 536870912
  store i32 %or660, i32* %sv_flags659, align 4
  br label %if.end661

if.end661:                                        ; preds = %if.then658, %cond.false657, %cond.true656
  %527 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %regstclass = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %527, i32 0, i32 2
  store %struct.regnode* null, %struct.regnode** %regstclass, align 8
  %528 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %naughty662 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %528, i32 0, i32 14
  %529 = load i32, i32* %naughty662, align 8
  %cmp663 = icmp sge i32 %529, 10
  br i1 %cmp663, label %if.then665, label %if.end668

if.then665:                                       ; preds = %if.end661
  %530 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags666 = getelementptr inbounds %struct.regexp, %struct.regexp* %530, i32 0, i32 13
  %531 = load i32, i32* %intflags666, align 4
  %or667 = or i32 %531, 4
  store i32 %or667, i32* %intflags666, align 4
  br label %if.end668

if.end668:                                        ; preds = %if.then665, %if.end661
  %532 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %program669 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %532, i32 0, i32 6
  %arraydecay670 = getelementptr inbounds [1 x %struct.regnode], [1 x %struct.regnode]* %program669, i64 0, i64 0
  %add.ptr671 = getelementptr inbounds %struct.regnode, %struct.regnode* %arraydecay670, i64 1
  store %struct.regnode* %add.ptr671, %struct.regnode** %scan, align 8
  %533 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen672 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %533, i32 0, i32 16
  %534 = load i32, i32* %seen672, align 8
  %and673 = and i32 %534, 64
  %tobool674 = icmp ne i32 %and673, 0
  br i1 %tobool674, label %if.else1330, label %if.then675

if.then675:                                       ; preds = %if.end668
  store i64 0, i64* %last_close, align 8
  %535 = load %struct.regnode*, %struct.regnode** %scan, align 8
  store %struct.regnode* %535, %struct.regnode** %first, align 8
  %536 = load %struct.regnode*, %struct.regnode** %first, align 8
  %call676 = call %struct.regnode* @Perl_regnext(%struct.regnode* %536)
  store %struct.regnode* %call676, %struct.regnode** %first_next, align 8
  br label %while.cond677

while.cond677:                                    ; preds = %if.end753, %if.then675
  %537 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %537, i32 0, i32 1
  %538 = load i8, i8* %type, align 1
  %conv678 = zext i8 %538 to i32
  %cmp679 = icmp eq i32 %conv678, 49
  br i1 %cmp679, label %land.lhs.true681, label %lor.lhs.false682

land.lhs.true681:                                 ; preds = %while.cond677
  store i32 1, i32* %sawopen, align 4
  br i1 true, label %lor.end733, label %lor.lhs.false682

lor.lhs.false682:                                 ; preds = %land.lhs.true681, %while.cond677
  %539 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type683 = getelementptr inbounds %struct.regnode, %struct.regnode* %539, i32 0, i32 1
  %540 = load i8, i8* %type683, align 1
  %conv684 = zext i8 %540 to i32
  %cmp685 = icmp eq i32 %conv684, 30
  br i1 %cmp685, label %land.lhs.true687, label %lor.lhs.false692

land.lhs.true687:                                 ; preds = %lor.lhs.false682
  %541 = load %struct.regnode*, %struct.regnode** %first_next, align 8
  %type688 = getelementptr inbounds %struct.regnode, %struct.regnode* %541, i32 0, i32 1
  %542 = load i8, i8* %type688, align 1
  %conv689 = zext i8 %542 to i32
  %cmp690 = icmp ne i32 %conv689, 30
  br i1 %cmp690, label %lor.end733, label %lor.lhs.false692

lor.lhs.false692:                                 ; preds = %land.lhs.true687, %lor.lhs.false682
  %543 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type693 = getelementptr inbounds %struct.regnode, %struct.regnode* %543, i32 0, i32 1
  %544 = load i8, i8* %type693, align 1
  %conv694 = zext i8 %544 to i32
  %cmp695 = icmp eq i32 %conv694, 63
  br i1 %cmp695, label %land.lhs.true697, label %lor.lhs.false701

land.lhs.true697:                                 ; preds = %lor.lhs.false692
  %545 = load %struct.regnode*, %struct.regnode** %first, align 8
  %flags698 = getelementptr inbounds %struct.regnode, %struct.regnode* %545, i32 0, i32 0
  %546 = load i8, i8* %flags698, align 2
  %tobool699 = icmp ne i8 %546, 0
  br i1 %tobool699, label %lor.lhs.false701, label %land.lhs.true700

land.lhs.true700:                                 ; preds = %land.lhs.true697
  store i32 1, i32* %sawlookahead, align 4
  br i1 true, label %lor.end733, label %lor.lhs.false701

lor.lhs.false701:                                 ; preds = %land.lhs.true700, %land.lhs.true697, %lor.lhs.false692
  %547 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type702 = getelementptr inbounds %struct.regnode, %struct.regnode* %547, i32 0, i32 1
  %548 = load i8, i8* %type702, align 1
  %conv703 = zext i8 %548 to i32
  %cmp704 = icmp eq i32 %conv703, 43
  br i1 %cmp704, label %lor.end733, label %lor.lhs.false706

lor.lhs.false706:                                 ; preds = %lor.lhs.false701
  %549 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type707 = getelementptr inbounds %struct.regnode, %struct.regnode* %549, i32 0, i32 1
  %550 = load i8, i8* %type707, align 1
  %conv708 = zext i8 %550 to i32
  %cmp709 = icmp eq i32 %conv708, 69
  br i1 %cmp709, label %lor.end733, label %lor.lhs.false711

lor.lhs.false711:                                 ; preds = %lor.lhs.false706
  %551 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type712 = getelementptr inbounds %struct.regnode, %struct.regnode* %551, i32 0, i32 1
  %552 = load i8, i8* %type712, align 1
  %idxprom713 = zext i8 %552 to i64
  %arrayidx714 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom713
  %553 = load i8, i8* %arrayidx714, align 1
  %conv715 = zext i8 %553 to i32
  %cmp716 = icmp eq i32 %conv715, 44
  br i1 %cmp716, label %land.lhs.true718, label %lor.rhs722

land.lhs.true718:                                 ; preds = %lor.lhs.false711
  %554 = load %struct.regnode*, %struct.regnode** %first, align 8
  %555 = bitcast %struct.regnode* %554 to %struct.regnode_2*
  %arg1 = getelementptr inbounds %struct.regnode_2, %struct.regnode_2* %555, i32 0, i32 3
  %556 = load i16, i16* %arg1, align 2
  %conv719 = zext i16 %556 to i32
  %cmp720 = icmp sgt i32 %conv719, 0
  br i1 %cmp720, label %lor.end733, label %lor.rhs722

lor.rhs722:                                       ; preds = %land.lhs.true718, %lor.lhs.false711
  %557 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type723 = getelementptr inbounds %struct.regnode, %struct.regnode* %557, i32 0, i32 1
  %558 = load i8, i8* %type723, align 1
  %conv724 = zext i8 %558 to i32
  %cmp725 = icmp eq i32 %conv724, 40
  br i1 %cmp725, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs722
  %559 = load %struct.regnode*, %struct.regnode** %first_next, align 8
  %type727 = getelementptr inbounds %struct.regnode, %struct.regnode* %559, i32 0, i32 1
  %560 = load i8, i8* %type727, align 1
  %idxprom728 = zext i8 %560 to i64
  %arrayidx729 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom728
  %561 = load i8, i8* %arrayidx729, align 1
  %conv730 = zext i8 %561 to i32
  %cmp731 = icmp ne i32 %conv730, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs722
  %562 = phi i1 [ false, %lor.rhs722 ], [ %cmp731, %land.rhs ]
  br label %lor.end733

lor.end733:                                       ; preds = %land.end, %land.lhs.true718, %lor.lhs.false706, %lor.lhs.false701, %land.lhs.true700, %land.lhs.true687, %land.lhs.true681
  %563 = phi i1 [ true, %land.lhs.true718 ], [ true, %lor.lhs.false706 ], [ true, %lor.lhs.false701 ], [ true, %land.lhs.true700 ], [ true, %land.lhs.true687 ], [ true, %land.lhs.true681 ], [ %562, %land.end ]
  br i1 %563, label %while.body734, label %while.end756

while.body734:                                    ; preds = %lor.end733
  %564 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type735 = getelementptr inbounds %struct.regnode, %struct.regnode* %564, i32 0, i32 1
  %565 = load i8, i8* %type735, align 1
  %conv736 = zext i8 %565 to i32
  %cmp737 = icmp eq i32 %conv736, 43
  br i1 %cmp737, label %if.then739, label %if.else740

if.then739:                                       ; preds = %while.body734
  store i32 1, i32* %sawplus, align 4
  br label %if.end753

if.else740:                                       ; preds = %while.body734
  %566 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type741 = getelementptr inbounds %struct.regnode, %struct.regnode* %566, i32 0, i32 1
  %567 = load i8, i8* %type741, align 1
  %conv742 = zext i8 %567 to i32
  %cmp743 = icmp eq i32 %conv742, 69
  br i1 %cmp743, label %if.then745, label %if.end746

if.then745:                                       ; preds = %if.else740
  store i32 1, i32* %sawminmod, align 4
  br label %if.end746

if.end746:                                        ; preds = %if.then745, %if.else740
  %568 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type747 = getelementptr inbounds %struct.regnode, %struct.regnode* %568, i32 0, i32 1
  %569 = load i8, i8* %type747, align 1
  %idxprom748 = zext i8 %569 to i64
  %arrayidx749 = getelementptr inbounds [94 x i8], [94 x i8]* @regarglen, i64 0, i64 %idxprom748
  %570 = load i8, i8* %arrayidx749, align 1
  %conv750 = zext i8 %570 to i32
  %571 = load %struct.regnode*, %struct.regnode** %first, align 8
  %idx.ext751 = sext i32 %conv750 to i64
  %add.ptr752 = getelementptr inbounds %struct.regnode, %struct.regnode* %571, i64 %idx.ext751
  store %struct.regnode* %add.ptr752, %struct.regnode** %first, align 8
  br label %if.end753

if.end753:                                        ; preds = %if.end746, %if.then739
  %572 = load %struct.regnode*, %struct.regnode** %first, align 8
  %add.ptr754 = getelementptr inbounds %struct.regnode, %struct.regnode* %572, i64 1
  store %struct.regnode* %add.ptr754, %struct.regnode** %first, align 8
  %573 = load %struct.regnode*, %struct.regnode** %first, align 8
  %call755 = call %struct.regnode* @Perl_regnext(%struct.regnode* %573)
  store %struct.regnode* %call755, %struct.regnode** %first_next, align 8
  br label %while.cond677

while.end756:                                     ; preds = %lor.end733
  br label %again

again:                                            ; preds = %if.then878, %if.then847, %if.then833, %while.end756
  %574 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type757 = getelementptr inbounds %struct.regnode, %struct.regnode* %574, i32 0, i32 1
  %575 = load i8, i8* %type757, align 1
  %idxprom758 = zext i8 %575 to i64
  %arrayidx759 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom758
  %576 = load i8, i8* %arrayidx759, align 1
  %conv760 = zext i8 %576 to i32
  %cmp761 = icmp eq i32 %conv760, 31
  br i1 %cmp761, label %if.then763, label %if.else777

if.then763:                                       ; preds = %again
  %577 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type764 = getelementptr inbounds %struct.regnode, %struct.regnode* %577, i32 0, i32 1
  %578 = load i8, i8* %type764, align 1
  %conv765 = zext i8 %578 to i32
  %cmp766 = icmp eq i32 %conv765, 31
  br i1 %cmp766, label %if.then773, label %lor.lhs.false768

lor.lhs.false768:                                 ; preds = %if.then763
  %579 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type769 = getelementptr inbounds %struct.regnode, %struct.regnode* %579, i32 0, i32 1
  %580 = load i8, i8* %type769, align 1
  %conv770 = zext i8 %580 to i32
  %cmp771 = icmp eq i32 %conv770, 32
  br i1 %cmp771, label %if.then773, label %if.else774

if.then773:                                       ; preds = %lor.lhs.false768, %if.then763
  br label %if.end776

if.else774:                                       ; preds = %lor.lhs.false768
  %581 = load %struct.regnode*, %struct.regnode** %first, align 8
  %582 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %regstclass775 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %582, i32 0, i32 2
  store %struct.regnode* %581, %struct.regnode** %regstclass775, align 8
  br label %if.end776

if.end776:                                        ; preds = %if.else774, %if.then773
  br label %if.end896

if.else777:                                       ; preds = %again
  %583 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type778 = getelementptr inbounds %struct.regnode, %struct.regnode* %583, i32 0, i32 1
  %584 = load i8, i8* %type778, align 1
  %idxprom779 = zext i8 %584 to i64
  %arrayidx780 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom779
  %585 = load i8, i8* %arrayidx780, align 1
  %conv781 = zext i8 %585 to i32
  %cmp782 = icmp eq i32 %conv781, 72
  br i1 %cmp782, label %land.lhs.true784, label %if.else796

land.lhs.true784:                                 ; preds = %if.else777
  %586 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %data785 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %586, i32 0, i32 3
  %587 = load %struct.reg_data*, %struct.reg_data** %data785, align 8
  %data786 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %587, i32 0, i32 2
  %588 = load %struct.regnode*, %struct.regnode** %first, align 8
  %589 = bitcast %struct.regnode* %588 to %struct.regnode_1*
  %arg1787 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %589, i32 0, i32 3
  %590 = load i32, i32* %arg1787, align 4
  %idxprom788 = zext i32 %590 to i64
  %arrayidx789 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data786, i64 0, i64 %idxprom788
  %591 = load i8*, i8** %arrayidx789, align 8
  %592 = bitcast i8* %591 to %struct._reg_trie_data*
  %minlen790 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %592, i32 0, i32 10
  %593 = load i64, i64* %minlen790, align 8
  %cmp791 = icmp ugt i64 %593, 0
  br i1 %cmp791, label %if.then793, label %if.else796

if.then793:                                       ; preds = %land.lhs.true784
  %594 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %595 = load %struct.regnode*, %struct.regnode** %first, align 8
  %call794 = call %struct.regnode* @S_construct_ahocorasick_from_trie(%struct.RExC_state_t* %594, %struct.regnode* %595, i32 0)
  %596 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %regstclass795 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %596, i32 0, i32 2
  store %struct.regnode* %call794, %struct.regnode** %regstclass795, align 8
  br label %if.end895

if.else796:                                       ; preds = %land.lhs.true784, %if.else777
  %597 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type797 = getelementptr inbounds %struct.regnode, %struct.regnode* %597, i32 0, i32 1
  %598 = load i8, i8* %type797, align 1
  %conv798 = zext i8 %598 to i32
  %shr799 = ashr i32 %conv798, 3
  %idxprom800 = sext i32 %shr799 to i64
  %arrayidx801 = getelementptr inbounds [12 x i8], [12 x i8]* bitcast (<{ i8, i8, i8, i8, [8 x i8] }>* @PL_simple_bitmask to [12 x i8]*), i64 0, i64 %idxprom800
  %599 = load i8, i8* %arrayidx801, align 1
  %conv802 = zext i8 %599 to i32
  %600 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type803 = getelementptr inbounds %struct.regnode, %struct.regnode* %600, i32 0, i32 1
  %601 = load i8, i8* %type803, align 1
  %conv804 = zext i8 %601 to i32
  %and805 = and i32 %conv804, 7
  %shl = shl i32 1, %and805
  %and806 = and i32 %conv802, %shl
  %tobool807 = icmp ne i32 %and806, 0
  br i1 %tobool807, label %if.then808, label %if.else810

if.then808:                                       ; preds = %if.else796
  %602 = load %struct.regnode*, %struct.regnode** %first, align 8
  %603 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %regstclass809 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %603, i32 0, i32 2
  store %struct.regnode* %602, %struct.regnode** %regstclass809, align 8
  br label %if.end894

if.else810:                                       ; preds = %if.else796
  %604 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type811 = getelementptr inbounds %struct.regnode, %struct.regnode* %604, i32 0, i32 1
  %605 = load i8, i8* %type811, align 1
  %idxprom812 = zext i8 %605 to i64
  %arrayidx813 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom812
  %606 = load i8, i8* %arrayidx813, align 1
  %conv814 = zext i8 %606 to i32
  %cmp815 = icmp eq i32 %conv814, 8
  br i1 %cmp815, label %if.then824, label %lor.lhs.false817

lor.lhs.false817:                                 ; preds = %if.else810
  %607 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type818 = getelementptr inbounds %struct.regnode, %struct.regnode* %607, i32 0, i32 1
  %608 = load i8, i8* %type818, align 1
  %idxprom819 = zext i8 %608 to i64
  %arrayidx820 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom819
  %609 = load i8, i8* %arrayidx820, align 1
  %conv821 = zext i8 %609 to i32
  %cmp822 = icmp eq i32 %conv821, 12
  br i1 %cmp822, label %if.then824, label %if.else826

if.then824:                                       ; preds = %lor.lhs.false817, %if.else810
  %610 = load %struct.regnode*, %struct.regnode** %first, align 8
  %611 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %regstclass825 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %611, i32 0, i32 2
  store %struct.regnode* %610, %struct.regnode** %regstclass825, align 8
  br label %if.end893

if.else826:                                       ; preds = %lor.lhs.false817
  %612 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type827 = getelementptr inbounds %struct.regnode, %struct.regnode* %612, i32 0, i32 1
  %613 = load i8, i8* %type827, align 1
  %idxprom828 = zext i8 %613 to i64
  %arrayidx829 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom828
  %614 = load i8, i8* %arrayidx829, align 1
  %conv830 = zext i8 %614 to i32
  %cmp831 = icmp eq i32 %conv830, 2
  br i1 %cmp831, label %if.then833, label %if.else842

if.then833:                                       ; preds = %if.else826
  %615 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type834 = getelementptr inbounds %struct.regnode, %struct.regnode* %615, i32 0, i32 1
  %616 = load i8, i8* %type834, align 1
  %conv835 = zext i8 %616 to i32
  %cmp836 = icmp eq i32 %conv835, 3
  %617 = zext i1 %cmp836 to i64
  %cond838 = select i1 %cmp836, i32 1024, i32 2048
  %618 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags839 = getelementptr inbounds %struct.regexp, %struct.regexp* %618, i32 0, i32 13
  %619 = load i32, i32* %intflags839, align 4
  %or840 = or i32 %619, %cond838
  store i32 %or840, i32* %intflags839, align 4
  %620 = load %struct.regnode*, %struct.regnode** %first, align 8
  %add.ptr841 = getelementptr inbounds %struct.regnode, %struct.regnode* %620, i64 1
  store %struct.regnode* %add.ptr841, %struct.regnode** %first, align 8
  br label %again

if.else842:                                       ; preds = %if.else826
  %621 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type843 = getelementptr inbounds %struct.regnode, %struct.regnode* %621, i32 0, i32 1
  %622 = load i8, i8* %type843, align 1
  %conv844 = zext i8 %622 to i32
  %cmp845 = icmp eq i32 %conv844, 7
  br i1 %cmp845, label %if.then847, label %if.else851

if.then847:                                       ; preds = %if.else842
  %623 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags848 = getelementptr inbounds %struct.regexp, %struct.regexp* %623, i32 0, i32 13
  %624 = load i32, i32* %intflags848, align 4
  %or849 = or i32 %624, 4096
  store i32 %or849, i32* %intflags848, align 4
  %625 = load %struct.regnode*, %struct.regnode** %first, align 8
  %add.ptr850 = getelementptr inbounds %struct.regnode, %struct.regnode* %625, i64 1
  store %struct.regnode* %add.ptr850, %struct.regnode** %first, align 8
  br label %again

if.else851:                                       ; preds = %if.else842
  %626 = load i32, i32* %sawopen, align 4
  %tobool852 = icmp ne i32 %626, 0
  br i1 %tobool852, label %lor.lhs.false853, label %land.lhs.true856

lor.lhs.false853:                                 ; preds = %if.else851
  %627 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %sawback854 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %627, i32 0, i32 15
  %628 = load i32, i32* %sawback854, align 4
  %tobool855 = icmp ne i32 %628, 0
  br i1 %tobool855, label %if.end890, label %land.lhs.true856

land.lhs.true856:                                 ; preds = %lor.lhs.false853, %if.else851
  %629 = load i32, i32* %sawlookahead, align 4
  %tobool857 = icmp ne i32 %629, 0
  br i1 %tobool857, label %if.end890, label %land.lhs.true858

land.lhs.true858:                                 ; preds = %land.lhs.true856
  %630 = load %struct.regnode*, %struct.regnode** %first, align 8
  %type859 = getelementptr inbounds %struct.regnode, %struct.regnode* %630, i32 0, i32 1
  %631 = load i8, i8* %type859, align 1
  %conv860 = zext i8 %631 to i32
  %cmp861 = icmp eq i32 %conv860, 42
  br i1 %cmp861, label %land.lhs.true863, label %if.end890

land.lhs.true863:                                 ; preds = %land.lhs.true858
  %632 = load %struct.regnode*, %struct.regnode** %first, align 8
  %add.ptr864 = getelementptr inbounds %struct.regnode, %struct.regnode* %632, i64 1
  %type865 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr864, i32 0, i32 1
  %633 = load i8, i8* %type865, align 1
  %idxprom866 = zext i8 %633 to i64
  %arrayidx867 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom866
  %634 = load i8, i8* %arrayidx867, align 1
  %conv868 = zext i8 %634 to i32
  %cmp869 = icmp eq i32 %conv868, 16
  br i1 %cmp869, label %land.lhs.true871, label %if.end890

land.lhs.true871:                                 ; preds = %land.lhs.true863
  %635 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags872 = getelementptr inbounds %struct.regexp, %struct.regexp* %635, i32 0, i32 13
  %636 = load i32, i32* %intflags872, align 4
  %and873 = and i32 %636, 7168
  %tobool874 = icmp ne i32 %and873, 0
  br i1 %tobool874, label %if.end890, label %land.lhs.true875

land.lhs.true875:                                 ; preds = %land.lhs.true871
  %637 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %num_code_blocks876 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %637, i32 0, i32 39
  %638 = load i32, i32* %num_code_blocks876, align 8
  %tobool877 = icmp ne i32 %638, 0
  br i1 %tobool877, label %if.end890, label %if.then878

if.then878:                                       ; preds = %land.lhs.true875
  %639 = load %struct.regnode*, %struct.regnode** %first, align 8
  %add.ptr880 = getelementptr inbounds %struct.regnode, %struct.regnode* %639, i64 1
  %type881 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr880, i32 0, i32 1
  %640 = load i8, i8* %type881, align 1
  %conv882 = zext i8 %640 to i32
  %cmp883 = icmp eq i32 %conv882, 16
  %641 = zext i1 %cmp883 to i64
  %cond885 = select i1 %cmp883, i32 1024, i32 2048
  store i32 %cond885, i32* %type879, align 4
  %642 = load i32, i32* %type879, align 4
  %or886 = or i32 %642, 2
  %643 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags887 = getelementptr inbounds %struct.regexp, %struct.regexp* %643, i32 0, i32 13
  %644 = load i32, i32* %intflags887, align 4
  %or888 = or i32 %644, %or886
  store i32 %or888, i32* %intflags887, align 4
  %645 = load %struct.regnode*, %struct.regnode** %first, align 8
  %add.ptr889 = getelementptr inbounds %struct.regnode, %struct.regnode* %645, i64 1
  store %struct.regnode* %add.ptr889, %struct.regnode** %first, align 8
  br label %again

if.end890:                                        ; preds = %land.lhs.true875, %land.lhs.true871, %land.lhs.true863, %land.lhs.true858, %land.lhs.true856, %lor.lhs.false853
  br label %if.end891

if.end891:                                        ; preds = %if.end890
  br label %if.end892

if.end892:                                        ; preds = %if.end891
  br label %if.end893

if.end893:                                        ; preds = %if.end892, %if.then824
  br label %if.end894

if.end894:                                        ; preds = %if.end893, %if.then808
  br label %if.end895

if.end895:                                        ; preds = %if.end894, %if.then793
  br label %if.end896

if.end896:                                        ; preds = %if.end895, %if.end776
  %646 = load i32, i32* %sawplus, align 4
  %tobool897 = icmp ne i32 %646, 0
  br i1 %tobool897, label %land.lhs.true898, label %if.end913

land.lhs.true898:                                 ; preds = %if.end896
  %647 = load i32, i32* %sawminmod, align 4
  %tobool899 = icmp ne i32 %647, 0
  br i1 %tobool899, label %if.end913, label %land.lhs.true900

land.lhs.true900:                                 ; preds = %land.lhs.true898
  %648 = load i32, i32* %sawlookahead, align 4
  %tobool901 = icmp ne i32 %648, 0
  br i1 %tobool901, label %if.end913, label %land.lhs.true902

land.lhs.true902:                                 ; preds = %land.lhs.true900
  %649 = load i32, i32* %sawopen, align 4
  %tobool903 = icmp ne i32 %649, 0
  br i1 %tobool903, label %lor.lhs.false904, label %land.lhs.true907

lor.lhs.false904:                                 ; preds = %land.lhs.true902
  %650 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %sawback905 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %650, i32 0, i32 15
  %651 = load i32, i32* %sawback905, align 4
  %tobool906 = icmp ne i32 %651, 0
  br i1 %tobool906, label %if.end913, label %land.lhs.true907

land.lhs.true907:                                 ; preds = %lor.lhs.false904, %land.lhs.true902
  %652 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %num_code_blocks908 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %652, i32 0, i32 39
  %653 = load i32, i32* %num_code_blocks908, align 8
  %tobool909 = icmp ne i32 %653, 0
  br i1 %tobool909, label %if.end913, label %if.then910

if.then910:                                       ; preds = %land.lhs.true907
  %654 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags911 = getelementptr inbounds %struct.regexp, %struct.regexp* %654, i32 0, i32 13
  %655 = load i32, i32* %intflags911, align 4
  %or912 = or i32 %655, 1
  store i32 %or912, i32* %intflags911, align 4
  br label %if.end913

if.end913:                                        ; preds = %if.then910, %land.lhs.true907, %lor.lhs.false904, %land.lhs.true900, %land.lhs.true898, %if.end896
  %call914 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i64 0)
  %longest_fixed = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 7
  store %struct.sv* %call914, %struct.sv** %longest_fixed, align 8
  %call915 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i64 0)
  %longest_float = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  store %struct.sv* %call915, %struct.sv** %longest_float, align 8
  %call916 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i64 0)
  %last_found = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 2
  store %struct.sv* %call916, %struct.sv** %last_found, align 8
  %longest_fixed917 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 7
  %longest = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 6
  store %struct.sv** %longest_fixed917, %struct.sv*** %longest, align 8
  call void @Perl_push_scope()
  %longest_fixed918 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 7
  %656 = load %struct.sv*, %struct.sv** %longest_fixed918, align 8
  %657 = bitcast %struct.sv* %656 to i8*
  %658 = bitcast i8* %657 to %struct.sv*
  %659 = bitcast %struct.sv* %658 to i8*
  call void @Perl_save_pushptr(i8* %659, i32 11)
  %longest_float919 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  %660 = load %struct.sv*, %struct.sv** %longest_float919, align 8
  %661 = bitcast %struct.sv* %660 to i8*
  %662 = bitcast i8* %661 to %struct.sv*
  %663 = bitcast %struct.sv* %662 to i8*
  call void @Perl_save_pushptr(i8* %663, i32 11)
  %last_found920 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 2
  %664 = load %struct.sv*, %struct.sv** %last_found920, align 8
  %665 = bitcast %struct.sv* %664 to i8*
  %666 = bitcast i8* %665 to %struct.sv*
  %667 = bitcast %struct.sv* %666 to i8*
  call void @Perl_save_pushptr(i8* %667, i32 11)
  %668 = load %struct.regnode*, %struct.regnode** %scan, align 8
  store %struct.regnode* %668, %struct.regnode** %first, align 8
  %669 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %regstclass921 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %669, i32 0, i32 2
  %670 = load %struct.regnode*, %struct.regnode** %regstclass921, align 8
  %tobool922 = icmp ne %struct.regnode* %670, null
  br i1 %tobool922, label %if.else924, label %if.then923

if.then923:                                       ; preds = %if.end913
  %671 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  call void @S_ssc_init(%struct.RExC_state_t* %671, %struct.regnode_ssc* %ch_class)
  %start_class = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 19
  store %struct.regnode_ssc* %ch_class, %struct.regnode_ssc** %start_class, align 8
  store i32 2048, i32* %stclass_flag, align 4
  br label %if.end925

if.else924:                                       ; preds = %if.end913
  store i32 0, i32* %stclass_flag, align 4
  br label %if.end925

if.end925:                                        ; preds = %if.else924, %if.then923
  %last_closep = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 18
  store i64* %last_close, i64** %last_closep, align 8
  %672 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %673 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %674 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size926 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %674, i32 0, i32 17
  %675 = load i64, i64* %size926, align 8
  %add.ptr927 = getelementptr inbounds %struct.regnode, %struct.regnode* %673, i64 %675
  %676 = load i32, i32* %stclass_flag, align 4
  %or928 = or i32 9216, %676
  %677 = load i32, i32* %restudied, align 4
  %tobool929 = icmp ne i32 %677, 0
  %678 = zext i1 %tobool929 to i64
  %cond930 = select i1 %tobool929, i32 65536, i32 0
  %or931 = or i32 %or928, %cond930
  %call932 = call i64 @S_study_chunk(%struct.RExC_state_t* %672, %struct.regnode** %first, i64* %minlen, i64* %fake, %struct.regnode* %add.ptr927, %struct.scan_data_t* %data, i32 -1, i32 0, %struct.regnode_ssc* null, i32 %or931, i32 0)
  store i64 %call932, i64* %minlen, align 8
  br label %do.body933

do.body933:                                       ; preds = %if.end925
  %flags934 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 16
  %679 = load i32, i32* %flags934, align 8
  %and935 = and i32 %679, 16384
  %tobool936 = icmp ne i32 %and935, 0
  br i1 %tobool936, label %land.lhs.true937, label %if.end941

land.lhs.true937:                                 ; preds = %do.body933
  %680 = load i32, i32* %restudied, align 4
  %inc938 = add nsw i32 %680, 1
  store i32 %inc938, i32* %restudied, align 4
  %tobool939 = icmp ne i32 %680, 0
  br i1 %tobool939, label %if.end941, label %if.then940

if.then940:                                       ; preds = %land.lhs.true937
  call void @Perl_pop_scope()
  br label %reStudy

if.end941:                                        ; preds = %land.lhs.true937, %do.body933
  br label %do.end942

do.end942:                                        ; preds = %if.end941
  %681 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar943 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %681, i32 0, i32 18
  %682 = load i32, i32* %npar943, align 8
  %cmp944 = icmp eq i32 %682, 1
  br i1 %cmp944, label %land.lhs.true946, label %if.end971

land.lhs.true946:                                 ; preds = %do.end942
  %longest947 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 6
  %683 = load %struct.sv**, %struct.sv*** %longest947, align 8
  %longest_fixed948 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 7
  %cmp949 = icmp eq %struct.sv** %683, %longest_fixed948
  br i1 %cmp949, label %land.lhs.true951, label %if.end971

land.lhs.true951:                                 ; preds = %land.lhs.true946
  %last_start_min = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 4
  %684 = load i64, i64* %last_start_min, align 8
  %cmp952 = icmp eq i64 %684, 0
  br i1 %cmp952, label %land.lhs.true954, label %if.end971

land.lhs.true954:                                 ; preds = %land.lhs.true951
  %last_end = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 3
  %685 = load i64, i64* %last_end, align 8
  %cmp955 = icmp sgt i64 %685, 0
  br i1 %cmp955, label %land.lhs.true957, label %if.end971

land.lhs.true957:                                 ; preds = %land.lhs.true954
  %686 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen_zerolen958 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %686, i32 0, i32 21
  %687 = load i32, i32* %seen_zerolen958, align 4
  %tobool959 = icmp ne i32 %687, 0
  br i1 %tobool959, label %if.end971, label %land.lhs.true960

land.lhs.true960:                                 ; preds = %land.lhs.true957
  %688 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen961 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %688, i32 0, i32 16
  %689 = load i32, i32* %seen961, align 8
  %and962 = and i32 %689, 128
  %tobool963 = icmp ne i32 %and962, 0
  br i1 %tobool963, label %if.end971, label %land.lhs.true964

land.lhs.true964:                                 ; preds = %land.lhs.true960
  %690 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen965 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %690, i32 0, i32 16
  %691 = load i32, i32* %seen965, align 8
  %and966 = and i32 %691, 4
  %tobool967 = icmp ne i32 %and966, 0
  br i1 %tobool967, label %if.end971, label %if.then968

if.then968:                                       ; preds = %land.lhs.true964
  %692 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags969 = getelementptr inbounds %struct.regexp, %struct.regexp* %692, i32 0, i32 7
  %693 = load i32, i32* %extflags969, align 8
  %or970 = or i32 %693, 524288
  store i32 %or970, i32* %extflags969, align 8
  br label %if.end971

if.end971:                                        ; preds = %if.then968, %land.lhs.true964, %land.lhs.true960, %land.lhs.true957, %land.lhs.true954, %land.lhs.true951, %land.lhs.true946, %do.end942
  %694 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  call void @S_scan_commit(%struct.RExC_state_t* %694, %struct.scan_data_t* %data, i64* %minlen, i32 0)
  %695 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %utf8972 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %695, i32 0, i32 25
  %696 = load i32, i32* %utf8972, align 8
  %tobool973 = icmp ne i32 %696, 0
  br i1 %tobool973, label %cond.true974, label %cond.false975

cond.true974:                                     ; preds = %if.end971
  br i1 true, label %cond.true976, label %cond.false979

cond.false975:                                    ; preds = %if.end971
  br i1 false, label %cond.true976, label %cond.false979

cond.true976:                                     ; preds = %cond.false975, %cond.true974
  %longest_float977 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  %697 = load %struct.sv*, %struct.sv** %longest_float977, align 8
  %call978 = call i64 @Perl_sv_len_utf8(%struct.sv* %697)
  br label %cond.end983

cond.false979:                                    ; preds = %cond.false975, %cond.true974
  %longest_float980 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  %698 = load %struct.sv*, %struct.sv** %longest_float980, align 8
  %sv_any981 = getelementptr inbounds %struct.sv, %struct.sv* %698, i32 0, i32 0
  %699 = load i8*, i8** %sv_any981, align 8
  %700 = bitcast i8* %699 to %struct.xpv*
  %xpv_cur982 = getelementptr inbounds %struct.xpv, %struct.xpv* %700, i32 0, i32 2
  %701 = load i64, i64* %xpv_cur982, align 8
  br label %cond.end983

cond.end983:                                      ; preds = %cond.false979, %cond.true976
  %cond984 = phi i64 [ %call978, %cond.true976 ], [ %701, %cond.false979 ]
  store i64 %cond984, i64* %longest_float_length, align 8
  %longest_fixed985 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 7
  %702 = load %struct.sv*, %struct.sv** %longest_fixed985, align 8
  %sv_any986 = getelementptr inbounds %struct.sv, %struct.sv* %702, i32 0, i32 0
  %703 = load i8*, i8** %sv_any986, align 8
  %704 = bitcast i8* %703 to %struct.xpv*
  %xpv_cur987 = getelementptr inbounds %struct.xpv, %struct.xpv* %704, i32 0, i32 2
  %705 = load i64, i64* %xpv_cur987, align 8
  %tobool988 = icmp ne i64 %705, 0
  br i1 %tobool988, label %land.lhs.true989, label %land.lhs.true1001

land.lhs.true989:                                 ; preds = %cond.end983
  %offset_fixed = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 8
  %706 = load i64, i64* %offset_fixed, align 8
  %offset_float_min = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 12
  %707 = load i64, i64* %offset_float_min, align 8
  %cmp990 = icmp eq i64 %706, %707
  br i1 %cmp990, label %land.lhs.true992, label %land.lhs.true1001

land.lhs.true992:                                 ; preds = %land.lhs.true989
  %longest_fixed993 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 7
  %708 = load %struct.sv*, %struct.sv** %longest_fixed993, align 8
  %sv_any994 = getelementptr inbounds %struct.sv, %struct.sv* %708, i32 0, i32 0
  %709 = load i8*, i8** %sv_any994, align 8
  %710 = bitcast i8* %709 to %struct.xpv*
  %xpv_cur995 = getelementptr inbounds %struct.xpv, %struct.xpv* %710, i32 0, i32 2
  %711 = load i64, i64* %xpv_cur995, align 8
  %longest_float996 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  %712 = load %struct.sv*, %struct.sv** %longest_float996, align 8
  %sv_any997 = getelementptr inbounds %struct.sv, %struct.sv* %712, i32 0, i32 0
  %713 = load i8*, i8** %sv_any997, align 8
  %714 = bitcast i8* %713 to %struct.xpv*
  %xpv_cur998 = getelementptr inbounds %struct.xpv, %struct.xpv* %714, i32 0, i32 2
  %715 = load i64, i64* %xpv_cur998, align 8
  %cmp999 = icmp eq i64 %711, %715
  br i1 %cmp999, label %if.else1048, label %land.lhs.true1001

land.lhs.true1001:                                ; preds = %land.lhs.true992, %land.lhs.true989, %cond.end983
  %716 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %longest_float1002 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  %717 = load %struct.sv*, %struct.sv** %longest_float1002, align 8
  %718 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1003 = getelementptr inbounds %struct.regexp, %struct.regexp* %718, i32 0, i32 11
  %719 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1003, align 8
  %data1004 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %719, i32 0, i32 1
  %arrayidx1005 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1004, i64 0, i64 1
  %utf8_substr = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1005, i32 0, i32 3
  %720 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1006 = getelementptr inbounds %struct.regexp, %struct.regexp* %720, i32 0, i32 11
  %721 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1006, align 8
  %data1007 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %721, i32 0, i32 1
  %arrayidx1008 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1007, i64 0, i64 1
  %substr = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1008, i32 0, i32 2
  %722 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1009 = getelementptr inbounds %struct.regexp, %struct.regexp* %722, i32 0, i32 11
  %723 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1009, align 8
  %data1010 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %723, i32 0, i32 1
  %arrayidx1011 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1010, i64 0, i64 1
  %end_shift = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1011, i32 0, i32 4
  %lookbehind_float = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 15
  %724 = load i64, i64* %lookbehind_float, align 8
  %offset_float_min1012 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 12
  %725 = load i64, i64* %offset_float_min1012, align 8
  %minlen_float = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 14
  %726 = load i64*, i64** %minlen_float, align 8
  %727 = load i64, i64* %longest_float_length, align 8
  %flags1013 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 16
  %728 = load i32, i32* %flags1013, align 8
  %and1014 = and i32 %728, 48
  %tobool1015 = icmp ne i32 %and1014, 0
  %729 = zext i1 %tobool1015 to i64
  %cond1016 = select i1 %tobool1015, i32 1, i32 0
  %tobool1017 = icmp ne i32 %cond1016, 0
  %flags1018 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 16
  %730 = load i32, i32* %flags1018, align 8
  %and1019 = and i32 %730, 32
  %tobool1020 = icmp ne i32 %and1019, 0
  %731 = zext i1 %tobool1020 to i64
  %cond1021 = select i1 %tobool1020, i32 1, i32 0
  %tobool1022 = icmp ne i32 %cond1021, 0
  %call1023 = call zeroext i1 @S_setup_longest(%struct.RExC_state_t* %716, %struct.sv* %717, %struct.sv** %utf8_substr, %struct.sv** %substr, i64* %end_shift, i64 %724, i64 %725, i64* %726, i64 %727, i1 zeroext %tobool1017, i1 zeroext %tobool1022)
  br i1 %call1023, label %if.then1025, label %if.else1048

if.then1025:                                      ; preds = %land.lhs.true1001
  %offset_float_min1026 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 12
  %732 = load i64, i64* %offset_float_min1026, align 8
  %lookbehind_float1027 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 15
  %733 = load i64, i64* %lookbehind_float1027, align 8
  %sub1028 = sub nsw i64 %732, %733
  %734 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1029 = getelementptr inbounds %struct.regexp, %struct.regexp* %734, i32 0, i32 11
  %735 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1029, align 8
  %data1030 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %735, i32 0, i32 1
  %arrayidx1031 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1030, i64 0, i64 1
  %min_offset = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1031, i32 0, i32 0
  store i64 %sub1028, i64* %min_offset, align 8
  %offset_float_max = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 13
  %736 = load i64, i64* %offset_float_max, align 8
  %737 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1032 = getelementptr inbounds %struct.regexp, %struct.regexp* %737, i32 0, i32 11
  %738 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1032, align 8
  %data1033 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %738, i32 0, i32 1
  %arrayidx1034 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1033, i64 0, i64 1
  %max_offset = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1034, i32 0, i32 1
  store i64 %736, i64* %max_offset, align 8
  %offset_float_max1035 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 13
  %739 = load i64, i64* %offset_float_max1035, align 8
  %cmp1036 = icmp slt i64 %739, 9223372036854775807
  br i1 %cmp1036, label %if.then1038, label %if.end1045

if.then1038:                                      ; preds = %if.then1025
  %lookbehind_float1039 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 15
  %740 = load i64, i64* %lookbehind_float1039, align 8
  %741 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1040 = getelementptr inbounds %struct.regexp, %struct.regexp* %741, i32 0, i32 11
  %742 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1040, align 8
  %data1041 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %742, i32 0, i32 1
  %arrayidx1042 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1041, i64 0, i64 1
  %max_offset1043 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1042, i32 0, i32 1
  %743 = load i64, i64* %max_offset1043, align 8
  %sub1044 = sub nsw i64 %743, %740
  store i64 %sub1044, i64* %max_offset1043, align 8
  br label %if.end1045

if.end1045:                                       ; preds = %if.then1038, %if.then1025
  %longest_float1046 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 11
  %744 = load %struct.sv*, %struct.sv** %longest_float1046, align 8
  %745 = bitcast %struct.sv* %744 to i8*
  %746 = bitcast i8* %745 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %746, i32 0, i32 1
  %747 = load i32, i32* %sv_refcnt, align 8
  %inc1047 = add i32 %747, 1
  store i32 %inc1047, i32* %sv_refcnt, align 8
  br label %if.end1057

if.else1048:                                      ; preds = %land.lhs.true1001, %land.lhs.true992
  %748 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1049 = getelementptr inbounds %struct.regexp, %struct.regexp* %748, i32 0, i32 11
  %749 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1049, align 8
  %data1050 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %749, i32 0, i32 1
  %arrayidx1051 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1050, i64 0, i64 1
  %utf8_substr1052 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1051, i32 0, i32 3
  store %struct.sv* null, %struct.sv** %utf8_substr1052, align 8
  %750 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1053 = getelementptr inbounds %struct.regexp, %struct.regexp* %750, i32 0, i32 11
  %751 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1053, align 8
  %data1054 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %751, i32 0, i32 1
  %arrayidx1055 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1054, i64 0, i64 1
  %substr1056 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1055, i32 0, i32 2
  store %struct.sv* null, %struct.sv** %substr1056, align 8
  store i64 0, i64* %longest_float_length, align 8
  br label %if.end1057

if.end1057:                                       ; preds = %if.else1048, %if.end1045
  %752 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %utf81058 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %752, i32 0, i32 25
  %753 = load i32, i32* %utf81058, align 8
  %tobool1059 = icmp ne i32 %753, 0
  br i1 %tobool1059, label %cond.true1060, label %cond.false1061

cond.true1060:                                    ; preds = %if.end1057
  br i1 true, label %cond.true1062, label %cond.false1065

cond.false1061:                                   ; preds = %if.end1057
  br i1 false, label %cond.true1062, label %cond.false1065

cond.true1062:                                    ; preds = %cond.false1061, %cond.true1060
  %longest_fixed1063 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 7
  %754 = load %struct.sv*, %struct.sv** %longest_fixed1063, align 8
  %call1064 = call i64 @Perl_sv_len_utf8(%struct.sv* %754)
  br label %cond.end1069

cond.false1065:                                   ; preds = %cond.false1061, %cond.true1060
  %longest_fixed1066 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 7
  %755 = load %struct.sv*, %struct.sv** %longest_fixed1066, align 8
  %sv_any1067 = getelementptr inbounds %struct.sv, %struct.sv* %755, i32 0, i32 0
  %756 = load i8*, i8** %sv_any1067, align 8
  %757 = bitcast i8* %756 to %struct.xpv*
  %xpv_cur1068 = getelementptr inbounds %struct.xpv, %struct.xpv* %757, i32 0, i32 2
  %758 = load i64, i64* %xpv_cur1068, align 8
  br label %cond.end1069

cond.end1069:                                     ; preds = %cond.false1065, %cond.true1062
  %cond1070 = phi i64 [ %call1064, %cond.true1062 ], [ %758, %cond.false1065 ]
  store i64 %cond1070, i64* %longest_fixed_length, align 8
  %759 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %longest_fixed1071 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 7
  %760 = load %struct.sv*, %struct.sv** %longest_fixed1071, align 8
  %761 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1072 = getelementptr inbounds %struct.regexp, %struct.regexp* %761, i32 0, i32 11
  %762 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1072, align 8
  %data1073 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %762, i32 0, i32 1
  %arrayidx1074 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1073, i64 0, i64 0
  %utf8_substr1075 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1074, i32 0, i32 3
  %763 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1076 = getelementptr inbounds %struct.regexp, %struct.regexp* %763, i32 0, i32 11
  %764 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1076, align 8
  %data1077 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %764, i32 0, i32 1
  %arrayidx1078 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1077, i64 0, i64 0
  %substr1079 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1078, i32 0, i32 2
  %765 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1080 = getelementptr inbounds %struct.regexp, %struct.regexp* %765, i32 0, i32 11
  %766 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1080, align 8
  %data1081 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %766, i32 0, i32 1
  %arrayidx1082 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1081, i64 0, i64 0
  %end_shift1083 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1082, i32 0, i32 4
  %lookbehind_fixed = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 10
  %767 = load i32, i32* %lookbehind_fixed, align 8
  %conv1084 = sext i32 %767 to i64
  %offset_fixed1085 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 8
  %768 = load i64, i64* %offset_fixed1085, align 8
  %minlen_fixed = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 9
  %769 = load i64*, i64** %minlen_fixed, align 8
  %770 = load i64, i64* %longest_fixed_length, align 8
  %flags1086 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 16
  %771 = load i32, i32* %flags1086, align 8
  %and1087 = and i32 %771, 12
  %tobool1088 = icmp ne i32 %and1087, 0
  %772 = zext i1 %tobool1088 to i64
  %cond1089 = select i1 %tobool1088, i32 1, i32 0
  %tobool1090 = icmp ne i32 %cond1089, 0
  %flags1091 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 16
  %773 = load i32, i32* %flags1091, align 8
  %and1092 = and i32 %773, 8
  %tobool1093 = icmp ne i32 %and1092, 0
  %774 = zext i1 %tobool1093 to i64
  %cond1094 = select i1 %tobool1093, i32 1, i32 0
  %tobool1095 = icmp ne i32 %cond1094, 0
  %call1096 = call zeroext i1 @S_setup_longest(%struct.RExC_state_t* %759, %struct.sv* %760, %struct.sv** %utf8_substr1075, %struct.sv** %substr1079, i64* %end_shift1083, i64 %conv1084, i64 %768, i64* %769, i64 %770, i1 zeroext %tobool1090, i1 zeroext %tobool1095)
  br i1 %call1096, label %if.then1097, label %if.else1109

if.then1097:                                      ; preds = %cond.end1069
  %offset_fixed1098 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 8
  %775 = load i64, i64* %offset_fixed1098, align 8
  %lookbehind_fixed1099 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 10
  %776 = load i32, i32* %lookbehind_fixed1099, align 8
  %conv1100 = sext i32 %776 to i64
  %sub1101 = sub nsw i64 %775, %conv1100
  %777 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1102 = getelementptr inbounds %struct.regexp, %struct.regexp* %777, i32 0, i32 11
  %778 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1102, align 8
  %data1103 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %778, i32 0, i32 1
  %arrayidx1104 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1103, i64 0, i64 0
  %min_offset1105 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1104, i32 0, i32 0
  store i64 %sub1101, i64* %min_offset1105, align 8
  %longest_fixed1106 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 7
  %779 = load %struct.sv*, %struct.sv** %longest_fixed1106, align 8
  %780 = bitcast %struct.sv* %779 to i8*
  %781 = bitcast i8* %780 to %struct.sv*
  %sv_refcnt1107 = getelementptr inbounds %struct.sv, %struct.sv* %781, i32 0, i32 1
  %782 = load i32, i32* %sv_refcnt1107, align 8
  %inc1108 = add i32 %782, 1
  store i32 %inc1108, i32* %sv_refcnt1107, align 8
  br label %if.end1118

if.else1109:                                      ; preds = %cond.end1069
  %783 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1110 = getelementptr inbounds %struct.regexp, %struct.regexp* %783, i32 0, i32 11
  %784 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1110, align 8
  %data1111 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %784, i32 0, i32 1
  %arrayidx1112 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1111, i64 0, i64 0
  %utf8_substr1113 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1112, i32 0, i32 3
  store %struct.sv* null, %struct.sv** %utf8_substr1113, align 8
  %785 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1114 = getelementptr inbounds %struct.regexp, %struct.regexp* %785, i32 0, i32 11
  %786 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1114, align 8
  %data1115 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %786, i32 0, i32 1
  %arrayidx1116 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1115, i64 0, i64 0
  %substr1117 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1116, i32 0, i32 2
  store %struct.sv* null, %struct.sv** %substr1117, align 8
  store i64 0, i64* %longest_fixed_length, align 8
  br label %if.end1118

if.end1118:                                       ; preds = %if.else1109, %if.then1097
  call void @Perl_pop_scope()
  %787 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %regstclass1119 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %787, i32 0, i32 2
  %788 = load %struct.regnode*, %struct.regnode** %regstclass1119, align 8
  %tobool1120 = icmp ne %struct.regnode* %788, null
  br i1 %tobool1120, label %land.lhs.true1121, label %if.end1135

land.lhs.true1121:                                ; preds = %if.end1118
  %789 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %regstclass1122 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %789, i32 0, i32 2
  %790 = load %struct.regnode*, %struct.regnode** %regstclass1122, align 8
  %type1123 = getelementptr inbounds %struct.regnode, %struct.regnode* %790, i32 0, i32 1
  %791 = load i8, i8* %type1123, align 1
  %conv1124 = zext i8 %791 to i32
  %cmp1125 = icmp eq i32 %conv1124, 16
  br i1 %cmp1125, label %if.then1133, label %lor.lhs.false1127

lor.lhs.false1127:                                ; preds = %land.lhs.true1121
  %792 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %regstclass1128 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %792, i32 0, i32 2
  %793 = load %struct.regnode*, %struct.regnode** %regstclass1128, align 8
  %type1129 = getelementptr inbounds %struct.regnode, %struct.regnode* %793, i32 0, i32 1
  %794 = load i8, i8* %type1129, align 1
  %conv1130 = zext i8 %794 to i32
  %cmp1131 = icmp eq i32 %conv1130, 17
  br i1 %cmp1131, label %if.then1133, label %if.end1135

if.then1133:                                      ; preds = %lor.lhs.false1127, %land.lhs.true1121
  %795 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %regstclass1134 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %795, i32 0, i32 2
  store %struct.regnode* null, %struct.regnode** %regstclass1134, align 8
  br label %if.end1135

if.end1135:                                       ; preds = %if.then1133, %lor.lhs.false1127, %if.end1118
  %796 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1136 = getelementptr inbounds %struct.regexp, %struct.regexp* %796, i32 0, i32 11
  %797 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1136, align 8
  %data1137 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %797, i32 0, i32 1
  %arrayidx1138 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1137, i64 0, i64 0
  %substr1139 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1138, i32 0, i32 2
  %798 = load %struct.sv*, %struct.sv** %substr1139, align 8
  %tobool1140 = icmp ne %struct.sv* %798, null
  br i1 %tobool1140, label %lor.lhs.false1147, label %lor.lhs.false1141

lor.lhs.false1141:                                ; preds = %if.end1135
  %799 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1142 = getelementptr inbounds %struct.regexp, %struct.regexp* %799, i32 0, i32 11
  %800 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1142, align 8
  %data1143 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %800, i32 0, i32 1
  %arrayidx1144 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1143, i64 0, i64 0
  %utf8_substr1145 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1144, i32 0, i32 3
  %801 = load %struct.sv*, %struct.sv** %utf8_substr1145, align 8
  %tobool1146 = icmp ne %struct.sv* %801, null
  br i1 %tobool1146, label %lor.lhs.false1147, label %land.lhs.true1153

lor.lhs.false1147:                                ; preds = %lor.lhs.false1141, %if.end1135
  %802 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1148 = getelementptr inbounds %struct.regexp, %struct.regexp* %802, i32 0, i32 11
  %803 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1148, align 8
  %data1149 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %803, i32 0, i32 1
  %arrayidx1150 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1149, i64 0, i64 0
  %min_offset1151 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1150, i32 0, i32 0
  %804 = load i64, i64* %min_offset1151, align 8
  %tobool1152 = icmp ne i64 %804, 0
  br i1 %tobool1152, label %land.lhs.true1153, label %if.end1190

land.lhs.true1153:                                ; preds = %lor.lhs.false1147, %lor.lhs.false1141
  %805 = load i32, i32* %stclass_flag, align 4
  %tobool1154 = icmp ne i32 %805, 0
  br i1 %tobool1154, label %land.lhs.true1155, label %if.end1190

land.lhs.true1155:                                ; preds = %land.lhs.true1153
  %start_class1156 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 19
  %806 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1156, align 8
  %flags1157 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %806, i32 0, i32 0
  %807 = load i8, i8* %flags1157, align 8
  %conv1158 = zext i8 %807 to i32
  %and1159 = and i32 %conv1158, 1
  %tobool1160 = icmp ne i32 %and1159, 0
  br i1 %tobool1160, label %if.end1190, label %land.lhs.true1161

land.lhs.true1161:                                ; preds = %land.lhs.true1155
  %808 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %start_class1162 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 19
  %809 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1162, align 8
  %call1163 = call zeroext i1 @S_is_ssc_worth_it(%struct.RExC_state_t* %808, %struct.regnode_ssc* %809)
  br i1 %call1163, label %if.then1165, label %if.end1190

if.then1165:                                      ; preds = %land.lhs.true1161
  %810 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %call1167 = call i32 @S_add_data(%struct.RExC_state_t* %810, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.187, i64 0, i64 0), i32 1)
  store i32 %call1167, i32* %n1166, align 4
  %811 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %start_class1168 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 19
  %812 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1168, align 8
  call void @S_ssc_finalize(%struct.RExC_state_t* %811, %struct.regnode_ssc* %812)
  %call1169 = call i8* @Perl_safesysmalloc(i64 56)
  %813 = bitcast i8* %call1169 to %struct.regnode_ssc*
  %814 = bitcast %struct.regnode_ssc* %813 to i8*
  %815 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rxi1170 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %815, i32 0, i32 5
  %816 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi1170, align 8
  %data1171 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %816, i32 0, i32 3
  %817 = load %struct.reg_data*, %struct.reg_data** %data1171, align 8
  %data1172 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %817, i32 0, i32 2
  %818 = load i32, i32* %n1166, align 4
  %idxprom1173 = zext i32 %818 to i64
  %arrayidx1174 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data1172, i64 0, i64 %idxprom1173
  store i8* %814, i8** %arrayidx1174, align 8
  %819 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rxi1175 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %819, i32 0, i32 5
  %820 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi1175, align 8
  %data1176 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %820, i32 0, i32 3
  %821 = load %struct.reg_data*, %struct.reg_data** %data1176, align 8
  %data1177 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %821, i32 0, i32 2
  %822 = load i32, i32* %n1166, align 4
  %idxprom1178 = zext i32 %822 to i64
  %arrayidx1179 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data1177, i64 0, i64 %idxprom1178
  %823 = load i8*, i8** %arrayidx1179, align 8
  %824 = bitcast i8* %823 to %struct.regnode_ssc*
  %start_class1180 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 19
  %825 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1180, align 8
  %826 = bitcast %struct.regnode_ssc* %824 to i8*
  %827 = bitcast %struct.regnode_ssc* %825 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %826, i8* align 8 %827, i64 56, i1 false)
  %828 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rxi1181 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %828, i32 0, i32 5
  %829 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi1181, align 8
  %data1182 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %829, i32 0, i32 3
  %830 = load %struct.reg_data*, %struct.reg_data** %data1182, align 8
  %data1183 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %830, i32 0, i32 2
  %831 = load i32, i32* %n1166, align 4
  %idxprom1184 = zext i32 %831 to i64
  %arrayidx1185 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data1183, i64 0, i64 %idxprom1184
  %832 = load i8*, i8** %arrayidx1185, align 8
  %833 = bitcast i8* %832 to %struct.regnode*
  %834 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %regstclass1186 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %834, i32 0, i32 2
  store %struct.regnode* %833, %struct.regnode** %regstclass1186, align 8
  %835 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags1187 = getelementptr inbounds %struct.regexp, %struct.regexp* %835, i32 0, i32 13
  %836 = load i32, i32* %intflags1187, align 4
  %and1188 = and i32 %836, -2
  store i32 %and1188, i32* %intflags1187, align 4
  %start_class1189 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 19
  store %struct.regnode_ssc* null, %struct.regnode_ssc** %start_class1189, align 8
  br label %if.end1190

if.end1190:                                       ; preds = %if.then1165, %land.lhs.true1161, %land.lhs.true1155, %land.lhs.true1153, %lor.lhs.false1147
  %837 = load i64, i64* %longest_fixed_length, align 8
  %838 = load i64, i64* %longest_float_length, align 8
  %cmp1191 = icmp ugt i64 %837, %838
  br i1 %cmp1191, label %if.then1193, label %if.else1238

if.then1193:                                      ; preds = %if.end1190
  %839 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1194 = getelementptr inbounds %struct.regexp, %struct.regexp* %839, i32 0, i32 11
  %840 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1194, align 8
  %check_ix = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %840, i32 0, i32 0
  store i8 0, i8* %check_ix, align 8
  %841 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1195 = getelementptr inbounds %struct.regexp, %struct.regexp* %841, i32 0, i32 11
  %842 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1195, align 8
  %data1196 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %842, i32 0, i32 1
  %arrayidx1197 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1196, i64 0, i64 0
  %end_shift1198 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1197, i32 0, i32 4
  %843 = load i64, i64* %end_shift1198, align 8
  %844 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1199 = getelementptr inbounds %struct.regexp, %struct.regexp* %844, i32 0, i32 11
  %845 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1199, align 8
  %data1200 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %845, i32 0, i32 1
  %arrayidx1201 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1200, i64 0, i64 2
  %end_shift1202 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1201, i32 0, i32 4
  store i64 %843, i64* %end_shift1202, align 8
  %846 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1203 = getelementptr inbounds %struct.regexp, %struct.regexp* %846, i32 0, i32 11
  %847 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1203, align 8
  %data1204 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %847, i32 0, i32 1
  %arrayidx1205 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1204, i64 0, i64 0
  %substr1206 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1205, i32 0, i32 2
  %848 = load %struct.sv*, %struct.sv** %substr1206, align 8
  %849 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1207 = getelementptr inbounds %struct.regexp, %struct.regexp* %849, i32 0, i32 11
  %850 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1207, align 8
  %data1208 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %850, i32 0, i32 1
  %arrayidx1209 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1208, i64 0, i64 2
  %substr1210 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1209, i32 0, i32 2
  store %struct.sv* %848, %struct.sv** %substr1210, align 8
  %851 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1211 = getelementptr inbounds %struct.regexp, %struct.regexp* %851, i32 0, i32 11
  %852 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1211, align 8
  %data1212 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %852, i32 0, i32 1
  %arrayidx1213 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1212, i64 0, i64 0
  %utf8_substr1214 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1213, i32 0, i32 3
  %853 = load %struct.sv*, %struct.sv** %utf8_substr1214, align 8
  %854 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1215 = getelementptr inbounds %struct.regexp, %struct.regexp* %854, i32 0, i32 11
  %855 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1215, align 8
  %data1216 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %855, i32 0, i32 1
  %arrayidx1217 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1216, i64 0, i64 2
  %utf8_substr1218 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1217, i32 0, i32 3
  store %struct.sv* %853, %struct.sv** %utf8_substr1218, align 8
  %856 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1219 = getelementptr inbounds %struct.regexp, %struct.regexp* %856, i32 0, i32 11
  %857 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1219, align 8
  %data1220 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %857, i32 0, i32 1
  %arrayidx1221 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1220, i64 0, i64 0
  %min_offset1222 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1221, i32 0, i32 0
  %858 = load i64, i64* %min_offset1222, align 8
  %859 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1223 = getelementptr inbounds %struct.regexp, %struct.regexp* %859, i32 0, i32 11
  %860 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1223, align 8
  %data1224 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %860, i32 0, i32 1
  %arrayidx1225 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1224, i64 0, i64 2
  %max_offset1226 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1225, i32 0, i32 1
  store i64 %858, i64* %max_offset1226, align 8
  %861 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1227 = getelementptr inbounds %struct.regexp, %struct.regexp* %861, i32 0, i32 11
  %862 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1227, align 8
  %data1228 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %862, i32 0, i32 1
  %arrayidx1229 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1228, i64 0, i64 2
  %min_offset1230 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1229, i32 0, i32 0
  store i64 %858, i64* %min_offset1230, align 8
  %863 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags1231 = getelementptr inbounds %struct.regexp, %struct.regexp* %863, i32 0, i32 13
  %864 = load i32, i32* %intflags1231, align 4
  %and1232 = and i32 %864, 6144
  %tobool1233 = icmp ne i32 %and1232, 0
  br i1 %tobool1233, label %if.then1234, label %if.end1237

if.then1234:                                      ; preds = %if.then1193
  %865 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags1235 = getelementptr inbounds %struct.regexp, %struct.regexp* %865, i32 0, i32 13
  %866 = load i32, i32* %intflags1235, align 4
  %or1236 = or i32 %866, 64
  store i32 %or1236, i32* %intflags1235, align 4
  br label %if.end1237

if.end1237:                                       ; preds = %if.then1234, %if.then1193
  br label %if.end1281

if.else1238:                                      ; preds = %if.end1190
  %867 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1239 = getelementptr inbounds %struct.regexp, %struct.regexp* %867, i32 0, i32 11
  %868 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1239, align 8
  %check_ix1240 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %868, i32 0, i32 0
  store i8 1, i8* %check_ix1240, align 8
  %869 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1241 = getelementptr inbounds %struct.regexp, %struct.regexp* %869, i32 0, i32 11
  %870 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1241, align 8
  %data1242 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %870, i32 0, i32 1
  %arrayidx1243 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1242, i64 0, i64 1
  %end_shift1244 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1243, i32 0, i32 4
  %871 = load i64, i64* %end_shift1244, align 8
  %872 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1245 = getelementptr inbounds %struct.regexp, %struct.regexp* %872, i32 0, i32 11
  %873 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1245, align 8
  %data1246 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %873, i32 0, i32 1
  %arrayidx1247 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1246, i64 0, i64 2
  %end_shift1248 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1247, i32 0, i32 4
  store i64 %871, i64* %end_shift1248, align 8
  %874 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1249 = getelementptr inbounds %struct.regexp, %struct.regexp* %874, i32 0, i32 11
  %875 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1249, align 8
  %data1250 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %875, i32 0, i32 1
  %arrayidx1251 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1250, i64 0, i64 1
  %substr1252 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1251, i32 0, i32 2
  %876 = load %struct.sv*, %struct.sv** %substr1252, align 8
  %877 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1253 = getelementptr inbounds %struct.regexp, %struct.regexp* %877, i32 0, i32 11
  %878 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1253, align 8
  %data1254 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %878, i32 0, i32 1
  %arrayidx1255 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1254, i64 0, i64 2
  %substr1256 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1255, i32 0, i32 2
  store %struct.sv* %876, %struct.sv** %substr1256, align 8
  %879 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1257 = getelementptr inbounds %struct.regexp, %struct.regexp* %879, i32 0, i32 11
  %880 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1257, align 8
  %data1258 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %880, i32 0, i32 1
  %arrayidx1259 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1258, i64 0, i64 1
  %utf8_substr1260 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1259, i32 0, i32 3
  %881 = load %struct.sv*, %struct.sv** %utf8_substr1260, align 8
  %882 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1261 = getelementptr inbounds %struct.regexp, %struct.regexp* %882, i32 0, i32 11
  %883 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1261, align 8
  %data1262 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %883, i32 0, i32 1
  %arrayidx1263 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1262, i64 0, i64 2
  %utf8_substr1264 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1263, i32 0, i32 3
  store %struct.sv* %881, %struct.sv** %utf8_substr1264, align 8
  %884 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1265 = getelementptr inbounds %struct.regexp, %struct.regexp* %884, i32 0, i32 11
  %885 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1265, align 8
  %data1266 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %885, i32 0, i32 1
  %arrayidx1267 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1266, i64 0, i64 1
  %min_offset1268 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1267, i32 0, i32 0
  %886 = load i64, i64* %min_offset1268, align 8
  %887 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1269 = getelementptr inbounds %struct.regexp, %struct.regexp* %887, i32 0, i32 11
  %888 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1269, align 8
  %data1270 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %888, i32 0, i32 1
  %arrayidx1271 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1270, i64 0, i64 2
  %min_offset1272 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1271, i32 0, i32 0
  store i64 %886, i64* %min_offset1272, align 8
  %889 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1273 = getelementptr inbounds %struct.regexp, %struct.regexp* %889, i32 0, i32 11
  %890 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1273, align 8
  %data1274 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %890, i32 0, i32 1
  %arrayidx1275 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1274, i64 0, i64 1
  %max_offset1276 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1275, i32 0, i32 1
  %891 = load i64, i64* %max_offset1276, align 8
  %892 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1277 = getelementptr inbounds %struct.regexp, %struct.regexp* %892, i32 0, i32 11
  %893 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1277, align 8
  %data1278 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %893, i32 0, i32 1
  %arrayidx1279 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1278, i64 0, i64 2
  %max_offset1280 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1279, i32 0, i32 1
  store i64 %891, i64* %max_offset1280, align 8
  br label %if.end1281

if.end1281:                                       ; preds = %if.else1238, %if.end1237
  %894 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1282 = getelementptr inbounds %struct.regexp, %struct.regexp* %894, i32 0, i32 11
  %895 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1282, align 8
  %data1283 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %895, i32 0, i32 1
  %arrayidx1284 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1283, i64 0, i64 2
  %substr1285 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1284, i32 0, i32 2
  %896 = load %struct.sv*, %struct.sv** %substr1285, align 8
  %tobool1286 = icmp ne %struct.sv* %896, null
  br i1 %tobool1286, label %if.then1293, label %lor.lhs.false1287

lor.lhs.false1287:                                ; preds = %if.end1281
  %897 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1288 = getelementptr inbounds %struct.regexp, %struct.regexp* %897, i32 0, i32 11
  %898 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1288, align 8
  %data1289 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %898, i32 0, i32 1
  %arrayidx1290 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1289, i64 0, i64 2
  %utf8_substr1291 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1290, i32 0, i32 3
  %899 = load %struct.sv*, %struct.sv** %utf8_substr1291, align 8
  %tobool1292 = icmp ne %struct.sv* %899, null
  br i1 %tobool1292, label %if.then1293, label %if.end1321

if.then1293:                                      ; preds = %lor.lhs.false1287, %if.end1281
  %900 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags1294 = getelementptr inbounds %struct.regexp, %struct.regexp* %900, i32 0, i32 7
  %901 = load i32, i32* %extflags1294, align 8
  %or1295 = or i32 %901, 6291456
  store i32 %or1295, i32* %extflags1294, align 8
  %902 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1296 = getelementptr inbounds %struct.regexp, %struct.regexp* %902, i32 0, i32 11
  %903 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1296, align 8
  %data1297 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %903, i32 0, i32 1
  %arrayidx1298 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1297, i64 0, i64 2
  %substr1299 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1298, i32 0, i32 2
  %904 = load %struct.sv*, %struct.sv** %substr1299, align 8
  %tobool1300 = icmp ne %struct.sv* %904, null
  br i1 %tobool1300, label %cond.true1301, label %cond.false1306

cond.true1301:                                    ; preds = %if.then1293
  %905 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1302 = getelementptr inbounds %struct.regexp, %struct.regexp* %905, i32 0, i32 11
  %906 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1302, align 8
  %data1303 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %906, i32 0, i32 1
  %arrayidx1304 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1303, i64 0, i64 2
  %substr1305 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1304, i32 0, i32 2
  %907 = load %struct.sv*, %struct.sv** %substr1305, align 8
  br label %cond.end1311

cond.false1306:                                   ; preds = %if.then1293
  %908 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1307 = getelementptr inbounds %struct.regexp, %struct.regexp* %908, i32 0, i32 11
  %909 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1307, align 8
  %data1308 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %909, i32 0, i32 1
  %arrayidx1309 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1308, i64 0, i64 2
  %utf8_substr1310 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1309, i32 0, i32 3
  %910 = load %struct.sv*, %struct.sv** %utf8_substr1310, align 8
  br label %cond.end1311

cond.end1311:                                     ; preds = %cond.false1306, %cond.true1301
  %cond1312 = phi %struct.sv* [ %907, %cond.true1301 ], [ %910, %cond.false1306 ]
  %sv_flags1313 = getelementptr inbounds %struct.sv, %struct.sv* %cond1312, i32 0, i32 2
  %911 = load i32, i32* %sv_flags1313, align 4
  %and1314 = and i32 %911, -1073741824
  %cmp1315 = icmp eq i32 %and1314, -1073741824
  br i1 %cmp1315, label %if.then1317, label %if.end1320

if.then1317:                                      ; preds = %cond.end1311
  %912 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags1318 = getelementptr inbounds %struct.regexp, %struct.regexp* %912, i32 0, i32 7
  %913 = load i32, i32* %extflags1318, align 8
  %or1319 = or i32 %913, 8388608
  store i32 %or1319, i32* %extflags1318, align 8
  br label %if.end1320

if.end1320:                                       ; preds = %if.then1317, %cond.end1311
  br label %if.end1321

if.end1321:                                       ; preds = %if.end1320, %lor.lhs.false1287
  %914 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1322 = getelementptr inbounds %struct.regexp, %struct.regexp* %914, i32 0, i32 11
  %915 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1322, align 8
  %data1323 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %915, i32 0, i32 1
  %arrayidx1324 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1323, i64 0, i64 0
  %min_offset1325 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1324, i32 0, i32 0
  %916 = load i64, i64* %min_offset1325, align 8
  %917 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1326 = getelementptr inbounds %struct.regexp, %struct.regexp* %917, i32 0, i32 11
  %918 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1326, align 8
  %data1327 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %918, i32 0, i32 1
  %arrayidx1328 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1327, i64 0, i64 0
  %max_offset1329 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1328, i32 0, i32 1
  store i64 %916, i64* %max_offset1329, align 8
  br label %if.end1414

if.else1330:                                      ; preds = %if.end668
  store i64 0, i64* %last_close1333, align 8
  %919 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %program1334 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %919, i32 0, i32 6
  %arraydecay1335 = getelementptr inbounds [1 x %struct.regnode], [1 x %struct.regnode]* %program1334, i64 0, i64 0
  %add.ptr1336 = getelementptr inbounds %struct.regnode, %struct.regnode* %arraydecay1335, i64 1
  store %struct.regnode* %add.ptr1336, %struct.regnode** %scan, align 8
  %920 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  call void @S_ssc_init(%struct.RExC_state_t* %920, %struct.regnode_ssc* %ch_class1332)
  %start_class1337 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 19
  store %struct.regnode_ssc* %ch_class1332, %struct.regnode_ssc** %start_class1337, align 8
  %last_closep1338 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 18
  store i64* %last_close1333, i64** %last_closep1338, align 8
  %921 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %922 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %923 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %size1339 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %923, i32 0, i32 17
  %924 = load i64, i64* %size1339, align 8
  %add.ptr1340 = getelementptr inbounds %struct.regnode, %struct.regnode* %922, i64 %924
  %925 = load i32, i32* %restudied, align 4
  %tobool1341 = icmp ne i32 %925, 0
  %926 = zext i1 %tobool1341 to i64
  %cond1342 = select i1 %tobool1341, i32 65536, i32 0
  %or1343 = or i32 10240, %cond1342
  %call1344 = call i64 @S_study_chunk(%struct.RExC_state_t* %921, %struct.regnode** %scan, i64* %minlen, i64* %fake1331, %struct.regnode* %add.ptr1340, %struct.scan_data_t* %data, i32 -1, i32 0, %struct.regnode_ssc* null, i32 %or1343, i32 0)
  store i64 %call1344, i64* %minlen, align 8
  br label %do.body1345

do.body1345:                                      ; preds = %if.else1330
  %flags1346 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 16
  %927 = load i32, i32* %flags1346, align 8
  %and1347 = and i32 %927, 16384
  %tobool1348 = icmp ne i32 %and1347, 0
  br i1 %tobool1348, label %land.lhs.true1349, label %if.end1353

land.lhs.true1349:                                ; preds = %do.body1345
  %928 = load i32, i32* %restudied, align 4
  %inc1350 = add nsw i32 %928, 1
  store i32 %inc1350, i32* %restudied, align 4
  %tobool1351 = icmp ne i32 %928, 0
  br i1 %tobool1351, label %if.end1353, label %if.then1352

if.then1352:                                      ; preds = %land.lhs.true1349
  br label %reStudy

if.end1353:                                       ; preds = %land.lhs.true1349, %do.body1345
  br label %do.end1354

do.end1354:                                       ; preds = %if.end1353
  %929 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1355 = getelementptr inbounds %struct.regexp, %struct.regexp* %929, i32 0, i32 11
  %930 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1355, align 8
  %data1356 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %930, i32 0, i32 1
  %arrayidx1357 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1356, i64 0, i64 1
  %utf8_substr1358 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1357, i32 0, i32 3
  store %struct.sv* null, %struct.sv** %utf8_substr1358, align 8
  %931 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1359 = getelementptr inbounds %struct.regexp, %struct.regexp* %931, i32 0, i32 11
  %932 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1359, align 8
  %data1360 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %932, i32 0, i32 1
  %arrayidx1361 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1360, i64 0, i64 1
  %substr1362 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1361, i32 0, i32 2
  store %struct.sv* null, %struct.sv** %substr1362, align 8
  %933 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1363 = getelementptr inbounds %struct.regexp, %struct.regexp* %933, i32 0, i32 11
  %934 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1363, align 8
  %data1364 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %934, i32 0, i32 1
  %arrayidx1365 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1364, i64 0, i64 0
  %utf8_substr1366 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1365, i32 0, i32 3
  store %struct.sv* null, %struct.sv** %utf8_substr1366, align 8
  %935 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1367 = getelementptr inbounds %struct.regexp, %struct.regexp* %935, i32 0, i32 11
  %936 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1367, align 8
  %data1368 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %936, i32 0, i32 1
  %arrayidx1369 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1368, i64 0, i64 0
  %substr1370 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1369, i32 0, i32 2
  store %struct.sv* null, %struct.sv** %substr1370, align 8
  %937 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1371 = getelementptr inbounds %struct.regexp, %struct.regexp* %937, i32 0, i32 11
  %938 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1371, align 8
  %data1372 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %938, i32 0, i32 1
  %arrayidx1373 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1372, i64 0, i64 2
  %utf8_substr1374 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1373, i32 0, i32 3
  store %struct.sv* null, %struct.sv** %utf8_substr1374, align 8
  %939 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs1375 = getelementptr inbounds %struct.regexp, %struct.regexp* %939, i32 0, i32 11
  %940 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs1375, align 8
  %data1376 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %940, i32 0, i32 1
  %arrayidx1377 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data1376, i64 0, i64 2
  %substr1378 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx1377, i32 0, i32 2
  store %struct.sv* null, %struct.sv** %substr1378, align 8
  %start_class1379 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 19
  %941 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1379, align 8
  %flags1380 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %941, i32 0, i32 0
  %942 = load i8, i8* %flags1380, align 8
  %conv1381 = zext i8 %942 to i32
  %and1382 = and i32 %conv1381, 1
  %tobool1383 = icmp ne i32 %and1382, 0
  br i1 %tobool1383, label %if.end1413, label %land.lhs.true1384

land.lhs.true1384:                                ; preds = %do.end1354
  %943 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %start_class1385 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 19
  %944 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1385, align 8
  %call1386 = call zeroext i1 @S_is_ssc_worth_it(%struct.RExC_state_t* %943, %struct.regnode_ssc* %944)
  br i1 %call1386, label %if.then1388, label %if.end1413

if.then1388:                                      ; preds = %land.lhs.true1384
  %945 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %call1390 = call i32 @S_add_data(%struct.RExC_state_t* %945, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.187, i64 0, i64 0), i32 1)
  store i32 %call1390, i32* %n1389, align 4
  %946 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %start_class1391 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 19
  %947 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1391, align 8
  call void @S_ssc_finalize(%struct.RExC_state_t* %946, %struct.regnode_ssc* %947)
  %call1392 = call i8* @Perl_safesysmalloc(i64 56)
  %948 = bitcast i8* %call1392 to %struct.regnode_ssc*
  %949 = bitcast %struct.regnode_ssc* %948 to i8*
  %950 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rxi1393 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %950, i32 0, i32 5
  %951 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi1393, align 8
  %data1394 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %951, i32 0, i32 3
  %952 = load %struct.reg_data*, %struct.reg_data** %data1394, align 8
  %data1395 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %952, i32 0, i32 2
  %953 = load i32, i32* %n1389, align 4
  %idxprom1396 = zext i32 %953 to i64
  %arrayidx1397 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data1395, i64 0, i64 %idxprom1396
  store i8* %949, i8** %arrayidx1397, align 8
  %954 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rxi1398 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %954, i32 0, i32 5
  %955 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi1398, align 8
  %data1399 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %955, i32 0, i32 3
  %956 = load %struct.reg_data*, %struct.reg_data** %data1399, align 8
  %data1400 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %956, i32 0, i32 2
  %957 = load i32, i32* %n1389, align 4
  %idxprom1401 = zext i32 %957 to i64
  %arrayidx1402 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data1400, i64 0, i64 %idxprom1401
  %958 = load i8*, i8** %arrayidx1402, align 8
  %959 = bitcast i8* %958 to %struct.regnode_ssc*
  %start_class1403 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 19
  %960 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1403, align 8
  %961 = bitcast %struct.regnode_ssc* %959 to i8*
  %962 = bitcast %struct.regnode_ssc* %960 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %961, i8* align 8 %962, i64 56, i1 false)
  %963 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %rxi1404 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %963, i32 0, i32 5
  %964 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi1404, align 8
  %data1405 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %964, i32 0, i32 3
  %965 = load %struct.reg_data*, %struct.reg_data** %data1405, align 8
  %data1406 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %965, i32 0, i32 2
  %966 = load i32, i32* %n1389, align 4
  %idxprom1407 = zext i32 %966 to i64
  %arrayidx1408 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data1406, i64 0, i64 %idxprom1407
  %967 = load i8*, i8** %arrayidx1408, align 8
  %968 = bitcast i8* %967 to %struct.regnode*
  %969 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %regstclass1409 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %969, i32 0, i32 2
  store %struct.regnode* %968, %struct.regnode** %regstclass1409, align 8
  %970 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags1410 = getelementptr inbounds %struct.regexp, %struct.regexp* %970, i32 0, i32 13
  %971 = load i32, i32* %intflags1410, align 4
  %and1411 = and i32 %971, -2
  store i32 %and1411, i32* %intflags1410, align 4
  %start_class1412 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data, i32 0, i32 19
  store %struct.regnode_ssc* null, %struct.regnode_ssc** %start_class1412, align 8
  br label %if.end1413

if.end1413:                                       ; preds = %if.then1388, %land.lhs.true1384, %do.end1354
  br label %if.end1414

if.end1414:                                       ; preds = %if.end1413, %if.end1321
  %972 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen1415 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %972, i32 0, i32 16
  %973 = load i32, i32* %seen1415, align 8
  %and1416 = and i32 %973, 4096
  %tobool1417 = icmp ne i32 %and1416, 0
  br i1 %tobool1417, label %if.then1418, label %if.else1422

if.then1418:                                      ; preds = %if.end1414
  %974 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags1419 = getelementptr inbounds %struct.regexp, %struct.regexp* %974, i32 0, i32 7
  %975 = load i32, i32* %extflags1419, align 8
  %or1420 = or i32 %975, 262144
  store i32 %or1420, i32* %extflags1419, align 8
  %976 = load %struct.regexp*, %struct.regexp** %r, align 8
  %maxlen1421 = getelementptr inbounds %struct.regexp, %struct.regexp* %976, i32 0, i32 23
  store i64 32767, i64* %maxlen1421, align 8
  br label %if.end1425

if.else1422:                                      ; preds = %if.end1414
  %977 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %maxlen1423 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %977, i32 0, i32 41
  %978 = load i64, i64* %maxlen1423, align 8
  %979 = load %struct.regexp*, %struct.regexp** %r, align 8
  %maxlen1424 = getelementptr inbounds %struct.regexp, %struct.regexp* %979, i32 0, i32 23
  store i64 %978, i64* %maxlen1424, align 8
  br label %if.end1425

if.end1425:                                       ; preds = %if.else1422, %if.then1418
  %980 = load i64, i64* %minlen, align 8
  %981 = load %struct.regexp*, %struct.regexp** %r, align 8
  %minlenret = getelementptr inbounds %struct.regexp, %struct.regexp* %981, i32 0, i32 9
  store i64 %980, i64* %minlenret, align 8
  %982 = load %struct.regexp*, %struct.regexp** %r, align 8
  %minlen1426 = getelementptr inbounds %struct.regexp, %struct.regexp* %982, i32 0, i32 8
  %983 = load i64, i64* %minlen1426, align 8
  %984 = load i64, i64* %minlen, align 8
  %cmp1427 = icmp slt i64 %983, %984
  br i1 %cmp1427, label %if.then1429, label %if.end1431

if.then1429:                                      ; preds = %if.end1425
  %985 = load i64, i64* %minlen, align 8
  %986 = load %struct.regexp*, %struct.regexp** %r, align 8
  %minlen1430 = getelementptr inbounds %struct.regexp, %struct.regexp* %986, i32 0, i32 8
  store i64 %985, i64* %minlen1430, align 8
  br label %if.end1431

if.end1431:                                       ; preds = %if.then1429, %if.end1425
  %987 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen1432 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %987, i32 0, i32 16
  %988 = load i32, i32* %seen1432, align 8
  %and1433 = and i32 %988, 4
  %tobool1434 = icmp ne i32 %and1433, 0
  br i1 %tobool1434, label %if.then1435, label %if.end1438

if.then1435:                                      ; preds = %if.end1431
  %989 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags1436 = getelementptr inbounds %struct.regexp, %struct.regexp* %989, i32 0, i32 13
  %990 = load i32, i32* %intflags1436, align 4
  %or1437 = or i32 %990, 256
  store i32 %or1437, i32* %intflags1436, align 4
  br label %if.end1438

if.end1438:                                       ; preds = %if.then1435, %if.end1431
  %991 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen1439 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %991, i32 0, i32 16
  %992 = load i32, i32* %seen1439, align 8
  %and1440 = and i32 %992, 2
  %tobool1441 = icmp ne i32 %and1440, 0
  br i1 %tobool1441, label %if.then1442, label %if.end1445

if.then1442:                                      ; preds = %if.end1438
  %993 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags1443 = getelementptr inbounds %struct.regexp, %struct.regexp* %993, i32 0, i32 7
  %994 = load i32, i32* %extflags1443, align 8
  %or1444 = or i32 %994, 65536
  store i32 %or1444, i32* %extflags1443, align 8
  br label %if.end1445

if.end1445:                                       ; preds = %if.then1442, %if.end1438
  %995 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %num_code_blocks1446 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %995, i32 0, i32 39
  %996 = load i32, i32* %num_code_blocks1446, align 8
  %tobool1447 = icmp ne i32 %996, 0
  br i1 %tobool1447, label %if.then1448, label %if.end1451

if.then1448:                                      ; preds = %if.end1445
  %997 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags1449 = getelementptr inbounds %struct.regexp, %struct.regexp* %997, i32 0, i32 7
  %998 = load i32, i32* %extflags1449, align 8
  %or1450 = or i32 %998, 131072
  store i32 %or1450, i32* %extflags1449, align 8
  br label %if.end1451

if.end1451:                                       ; preds = %if.then1448, %if.end1445
  %999 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen1452 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %999, i32 0, i32 16
  %1000 = load i32, i32* %seen1452, align 8
  %and1453 = and i32 %1000, 16
  %tobool1454 = icmp ne i32 %and1453, 0
  br i1 %tobool1454, label %if.then1455, label %if.end1458

if.then1455:                                      ; preds = %if.end1451
  %1001 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags1456 = getelementptr inbounds %struct.regexp, %struct.regexp* %1001, i32 0, i32 13
  %1002 = load i32, i32* %intflags1456, align 4
  %or1457 = or i32 %1002, 128
  store i32 %or1457, i32* %intflags1456, align 4
  br label %if.end1458

if.end1458:                                       ; preds = %if.then1455, %if.end1451
  %1003 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen1459 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1003, i32 0, i32 16
  %1004 = load i32, i32* %seen1459, align 8
  %and1460 = and i32 %1004, 128
  %tobool1461 = icmp ne i32 %and1460, 0
  br i1 %tobool1461, label %if.then1462, label %if.end1467

if.then1462:                                      ; preds = %if.end1458
  %1005 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags1463 = getelementptr inbounds %struct.regexp, %struct.regexp* %1005, i32 0, i32 13
  %1006 = load i32, i32* %intflags1463, align 4
  %or1464 = or i32 %1006, 8
  store i32 %or1464, i32* %intflags1463, align 4
  %1007 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags1465 = getelementptr inbounds %struct.regexp, %struct.regexp* %1007, i32 0, i32 7
  %1008 = load i32, i32* %extflags1465, align 8
  %or1466 = or i32 %1008, 65536
  store i32 %or1466, i32* %extflags1465, align 8
  br label %if.end1467

if.end1467:                                       ; preds = %if.then1462, %if.end1458
  %1009 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %seen1468 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1009, i32 0, i32 16
  %1010 = load i32, i32* %seen1468, align 8
  %and1469 = and i32 %1010, 256
  %tobool1470 = icmp ne i32 %and1469, 0
  br i1 %tobool1470, label %if.then1471, label %if.end1474

if.then1471:                                      ; preds = %if.end1467
  %1011 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags1472 = getelementptr inbounds %struct.regexp, %struct.regexp* %1011, i32 0, i32 13
  %1012 = load i32, i32* %intflags1472, align 4
  %or1473 = or i32 %1012, 16
  store i32 %or1473, i32* %intflags1472, align 4
  br label %if.end1474

if.end1474:                                       ; preds = %if.then1471, %if.end1467
  %1013 = load i32, i32* %pm_flags.addr, align 4
  %and1475 = and i32 %1013, -2147483648
  %tobool1476 = icmp ne i32 %and1475, 0
  br i1 %tobool1476, label %if.then1477, label %if.end1480

if.then1477:                                      ; preds = %if.end1474
  %1014 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags1478 = getelementptr inbounds %struct.regexp, %struct.regexp* %1014, i32 0, i32 13
  %1015 = load i32, i32* %intflags1478, align 4
  %or1479 = or i32 %1015, 32
  store i32 %or1479, i32* %intflags1478, align 4
  br label %if.end1480

if.end1480:                                       ; preds = %if.then1477, %if.end1474
  %1016 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %paren_names1481 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1016, i32 0, i32 28
  %1017 = load %struct.hv*, %struct.hv** %paren_names1481, align 8
  %tobool1482 = icmp ne %struct.hv* %1017, null
  br i1 %tobool1482, label %if.then1483, label %if.else1487

if.then1483:                                      ; preds = %if.end1480
  %1018 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %paren_names1484 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1018, i32 0, i32 28
  %1019 = load %struct.hv*, %struct.hv** %paren_names1484, align 8
  %1020 = bitcast %struct.hv* %1019 to i8*
  %1021 = bitcast i8* %1020 to %struct.sv*
  %call1485 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %1021)
  %1022 = bitcast %struct.sv* %call1485 to i8*
  %1023 = bitcast i8* %1022 to %struct.hv*
  %1024 = load %struct.regexp*, %struct.regexp** %r, align 8
  %paren_names1486 = getelementptr inbounds %struct.regexp, %struct.regexp* %1024, i32 0, i32 6
  store %struct.hv* %1023, %struct.hv** %paren_names1486, align 8
  br label %if.end1489

if.else1487:                                      ; preds = %if.end1480
  %1025 = load %struct.regexp*, %struct.regexp** %r, align 8
  %paren_names1488 = getelementptr inbounds %struct.regexp, %struct.regexp* %1025, i32 0, i32 6
  store %struct.hv* null, %struct.hv** %paren_names1488, align 8
  br label %if.end1489

if.end1489:                                       ; preds = %if.else1487, %if.then1483
  %1026 = load %struct.regexp*, %struct.regexp** %r, align 8
  %intflags1490 = getelementptr inbounds %struct.regexp, %struct.regexp* %1026, i32 0, i32 13
  %1027 = load i32, i32* %intflags1490, align 4
  %and1491 = and i32 %1027, 7168
  %tobool1492 = icmp ne i32 %and1491, 0
  br i1 %tobool1492, label %if.then1493, label %if.end1496

if.then1493:                                      ; preds = %if.end1489
  %1028 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags1494 = getelementptr inbounds %struct.regexp, %struct.regexp* %1028, i32 0, i32 7
  %1029 = load i32, i32* %extflags1494, align 8
  %or1495 = or i32 %1029, 16777216
  store i32 %or1495, i32* %extflags1494, align 8
  br label %if.end1496

if.end1496:                                       ; preds = %if.then1493, %if.end1489
  %1030 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %program1498 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %1030, i32 0, i32 6
  %arraydecay1499 = getelementptr inbounds [1 x %struct.regnode], [1 x %struct.regnode]* %program1498, i64 0, i64 0
  %add.ptr1500 = getelementptr inbounds %struct.regnode, %struct.regnode* %arraydecay1499, i64 1
  store %struct.regnode* %add.ptr1500, %struct.regnode** %first1497, align 8
  %1031 = load %struct.regnode*, %struct.regnode** %first1497, align 8
  %type1501 = getelementptr inbounds %struct.regnode, %struct.regnode* %1031, i32 0, i32 1
  %1032 = load i8, i8* %type1501, align 1
  store i8 %1032, i8* %fop, align 1
  %1033 = load %struct.regnode*, %struct.regnode** %first1497, align 8
  %call1502 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1033)
  store %struct.regnode* %call1502, %struct.regnode** %next, align 8
  %1034 = load %struct.regnode*, %struct.regnode** %next, align 8
  %type1503 = getelementptr inbounds %struct.regnode, %struct.regnode* %1034, i32 0, i32 1
  %1035 = load i8, i8* %type1503, align 1
  store i8 %1035, i8* %nop, align 1
  %1036 = load i8, i8* %fop, align 1
  %idxprom1504 = zext i8 %1036 to i64
  %arrayidx1505 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom1504
  %1037 = load i8, i8* %arrayidx1505, align 1
  %conv1506 = zext i8 %1037 to i32
  %cmp1507 = icmp eq i32 %conv1506, 40
  br i1 %cmp1507, label %land.lhs.true1509, label %if.else1516

land.lhs.true1509:                                ; preds = %if.end1496
  %1038 = load i8, i8* %nop, align 1
  %conv1510 = zext i8 %1038 to i32
  %cmp1511 = icmp eq i32 %conv1510, 0
  br i1 %cmp1511, label %if.then1513, label %if.else1516

if.then1513:                                      ; preds = %land.lhs.true1509
  %1039 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags1514 = getelementptr inbounds %struct.regexp, %struct.regexp* %1039, i32 0, i32 7
  %1040 = load i32, i32* %extflags1514, align 8
  %or1515 = or i32 %1040, -2147483648
  store i32 %or1515, i32* %extflags1514, align 8
  br label %if.end1587

if.else1516:                                      ; preds = %land.lhs.true1509, %if.end1496
  %1041 = load i8, i8* %fop, align 1
  %conv1517 = zext i8 %1041 to i32
  %cmp1518 = icmp eq i32 %conv1517, 3
  br i1 %cmp1518, label %land.lhs.true1527, label %lor.lhs.false1520

lor.lhs.false1520:                                ; preds = %if.else1516
  %1042 = load i8, i8* %fop, align 1
  %conv1521 = zext i8 %1042 to i32
  %cmp1522 = icmp eq i32 %conv1521, 2
  br i1 %cmp1522, label %land.lhs.true1524, label %if.else1534

land.lhs.true1524:                                ; preds = %lor.lhs.false1520
  %1043 = load %struct.regnode*, %struct.regnode** %first1497, align 8
  %flags1525 = getelementptr inbounds %struct.regnode, %struct.regnode* %1043, i32 0, i32 0
  %1044 = load i8, i8* %flags1525, align 2
  %tobool1526 = icmp ne i8 %1044, 0
  br i1 %tobool1526, label %if.else1534, label %land.lhs.true1527

land.lhs.true1527:                                ; preds = %land.lhs.true1524, %if.else1516
  %1045 = load i8, i8* %nop, align 1
  %conv1528 = zext i8 %1045 to i32
  %cmp1529 = icmp eq i32 %conv1528, 0
  br i1 %cmp1529, label %if.then1531, label %if.else1534

if.then1531:                                      ; preds = %land.lhs.true1527
  %1046 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags1532 = getelementptr inbounds %struct.regexp, %struct.regexp* %1046, i32 0, i32 7
  %1047 = load i32, i32* %extflags1532, align 8
  %or1533 = or i32 %1047, 268435456
  store i32 %or1533, i32* %extflags1532, align 8
  br label %if.end1586

if.else1534:                                      ; preds = %land.lhs.true1527, %land.lhs.true1524, %lor.lhs.false1520
  %1048 = load i8, i8* %fop, align 1
  %conv1535 = zext i8 %1048 to i32
  %cmp1536 = icmp eq i32 %conv1535, 43
  br i1 %cmp1536, label %land.lhs.true1538, label %if.else1556

land.lhs.true1538:                                ; preds = %if.else1534
  %1049 = load i8, i8* %nop, align 1
  %idxprom1539 = zext i8 %1049 to i64
  %arrayidx1540 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom1539
  %1050 = load i8, i8* %arrayidx1540, align 1
  %conv1541 = zext i8 %1050 to i32
  %cmp1542 = icmp eq i32 %conv1541, 21
  br i1 %cmp1542, label %land.lhs.true1544, label %if.else1556

land.lhs.true1544:                                ; preds = %land.lhs.true1538
  %1051 = load %struct.regnode*, %struct.regnode** %next, align 8
  %flags1545 = getelementptr inbounds %struct.regnode, %struct.regnode* %1051, i32 0, i32 0
  %1052 = load i8, i8* %flags1545, align 2
  %conv1546 = zext i8 %1052 to i32
  %cmp1547 = icmp eq i32 %conv1546, 10
  br i1 %cmp1547, label %land.lhs.true1549, label %if.else1556

land.lhs.true1549:                                ; preds = %land.lhs.true1544
  %1053 = load i8, i8* %nop, align 1
  %conv1550 = zext i8 %1053 to i32
  %cmp1551 = icmp eq i32 %conv1550, 0
  br i1 %cmp1551, label %if.then1553, label %if.else1556

if.then1553:                                      ; preds = %land.lhs.true1549
  %1054 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags1554 = getelementptr inbounds %struct.regexp, %struct.regexp* %1054, i32 0, i32 7
  %1055 = load i32, i32* %extflags1554, align 8
  %or1555 = or i32 %1055, 1073741824
  store i32 %or1555, i32* %extflags1554, align 8
  br label %if.end1585

if.else1556:                                      ; preds = %land.lhs.true1549, %land.lhs.true1544, %land.lhs.true1538, %if.else1534
  %1056 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags1557 = getelementptr inbounds %struct.regexp, %struct.regexp* %1056, i32 0, i32 7
  %1057 = load i32, i32* %extflags1557, align 8
  %and1558 = and i32 %1057, 2048
  %tobool1559 = icmp ne i32 %and1558, 0
  br i1 %tobool1559, label %land.lhs.true1560, label %if.end1584

land.lhs.true1560:                                ; preds = %if.else1556
  %1058 = load i8, i8* %fop, align 1
  %conv1561 = zext i8 %1058 to i32
  %cmp1562 = icmp eq i32 %conv1561, 31
  br i1 %cmp1562, label %land.lhs.true1568, label %lor.lhs.false1564

lor.lhs.false1564:                                ; preds = %land.lhs.true1560
  %1059 = load i8, i8* %fop, align 1
  %conv1565 = zext i8 %1059 to i32
  %cmp1566 = icmp eq i32 %conv1565, 32
  br i1 %cmp1566, label %land.lhs.true1568, label %if.end1584

land.lhs.true1568:                                ; preds = %lor.lhs.false1564, %land.lhs.true1560
  %1060 = load %struct.regnode*, %struct.regnode** %first1497, align 8
  %1061 = bitcast %struct.regnode* %1060 to %struct.regnode_string*
  %str_len = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1061, i32 0, i32 0
  %1062 = load i8, i8* %str_len, align 2
  %conv1569 = zext i8 %1062 to i32
  %cmp1570 = icmp eq i32 %conv1569, 1
  br i1 %cmp1570, label %land.lhs.true1572, label %if.end1584

land.lhs.true1572:                                ; preds = %land.lhs.true1568
  %1063 = load %struct.regnode*, %struct.regnode** %first1497, align 8
  %1064 = bitcast %struct.regnode* %1063 to %struct.regnode_string*
  %string = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1064, i32 0, i32 3
  %arraydecay1573 = getelementptr inbounds [1 x i8], [1 x i8]* %string, i64 0, i64 0
  %1065 = load i8, i8* %arraydecay1573, align 2
  %conv1574 = sext i8 %1065 to i32
  %cmp1575 = icmp eq i32 %conv1574, 32
  br i1 %cmp1575, label %land.lhs.true1577, label %if.end1584

land.lhs.true1577:                                ; preds = %land.lhs.true1572
  %1066 = load i8, i8* %nop, align 1
  %conv1578 = zext i8 %1066 to i32
  %cmp1579 = icmp eq i32 %conv1578, 0
  br i1 %cmp1579, label %if.then1581, label %if.end1584

if.then1581:                                      ; preds = %land.lhs.true1577
  %1067 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags1582 = getelementptr inbounds %struct.regexp, %struct.regexp* %1067, i32 0, i32 7
  %1068 = load i32, i32* %extflags1582, align 8
  %or1583 = or i32 %1068, 1610612736
  store i32 %or1583, i32* %extflags1582, align 8
  br label %if.end1584

if.end1584:                                       ; preds = %if.then1581, %land.lhs.true1577, %land.lhs.true1572, %land.lhs.true1568, %lor.lhs.false1564, %if.else1556
  br label %if.end1585

if.end1585:                                       ; preds = %if.end1584, %if.then1553
  br label %if.end1586

if.end1586:                                       ; preds = %if.end1585, %if.then1531
  br label %if.end1587

if.end1587:                                       ; preds = %if.end1586, %if.then1513
  %1069 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %contains_locale1588 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1069, i32 0, i32 34
  %1070 = load i32, i32* %contains_locale1588, align 8
  %tobool1589 = icmp ne i32 %1070, 0
  br i1 %tobool1589, label %if.then1590, label %if.end1593

if.then1590:                                      ; preds = %if.end1587
  %1071 = load %struct.regexp*, %struct.regexp** %r, align 8
  %extflags1591 = getelementptr inbounds %struct.regexp, %struct.regexp* %1071, i32 0, i32 7
  %1072 = load i32, i32* %extflags1591, align 8
  %or1592 = or i32 %1072, 134217728
  store i32 %or1592, i32* %extflags1591, align 8
  br label %if.end1593

if.end1593:                                       ; preds = %if.then1590, %if.end1587
  %1073 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %name_list_idx = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %1073, i32 0, i32 0
  store i32 0, i32* %name_list_idx, align 8
  %1074 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %recurse_count1594 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1074, i32 0, i32 30
  %1075 = load i32, i32* %recurse_count1594, align 8
  %tobool1595 = icmp ne i32 %1075, 0
  br i1 %tobool1595, label %if.then1596, label %if.end1619

if.then1596:                                      ; preds = %if.end1593
  br label %for.cond1597

for.cond1597:                                     ; preds = %for.inc1616, %if.then1596
  %1076 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %recurse_count1598 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1076, i32 0, i32 30
  %1077 = load i32, i32* %recurse_count1598, align 8
  %tobool1599 = icmp ne i32 %1077, 0
  br i1 %tobool1599, label %for.body1600, label %for.end1618

for.body1600:                                     ; preds = %for.cond1597
  %1078 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %recurse1602 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1078, i32 0, i32 29
  %1079 = load %struct.regnode**, %struct.regnode*** %recurse1602, align 8
  %1080 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %recurse_count1603 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1080, i32 0, i32 30
  %1081 = load i32, i32* %recurse_count1603, align 8
  %sub1604 = sub nsw i32 %1081, 1
  %idxprom1605 = sext i32 %sub1604 to i64
  %arrayidx1606 = getelementptr inbounds %struct.regnode*, %struct.regnode** %1079, i64 %idxprom1605
  %1082 = load %struct.regnode*, %struct.regnode** %arrayidx1606, align 8
  store %struct.regnode* %1082, %struct.regnode** %scan1601, align 8
  %1083 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %open_parens1607 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1083, i32 0, i32 22
  %1084 = load %struct.regnode**, %struct.regnode*** %open_parens1607, align 8
  %1085 = load %struct.regnode*, %struct.regnode** %scan1601, align 8
  %1086 = bitcast %struct.regnode* %1085 to %struct.regnode_1*
  %arg11608 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %1086, i32 0, i32 3
  %1087 = load i32, i32* %arg11608, align 4
  %sub1609 = sub i32 %1087, 1
  %idxprom1610 = zext i32 %sub1609 to i64
  %arrayidx1611 = getelementptr inbounds %struct.regnode*, %struct.regnode** %1084, i64 %idxprom1610
  %1088 = load %struct.regnode*, %struct.regnode** %arrayidx1611, align 8
  %1089 = load %struct.regnode*, %struct.regnode** %scan1601, align 8
  %sub.ptr.lhs.cast1612 = ptrtoint %struct.regnode* %1088 to i64
  %sub.ptr.rhs.cast1613 = ptrtoint %struct.regnode* %1089 to i64
  %sub.ptr.sub1614 = sub i64 %sub.ptr.lhs.cast1612, %sub.ptr.rhs.cast1613
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub1614, 4
  %conv1615 = trunc i64 %sub.ptr.div to i32
  %1090 = load %struct.regnode*, %struct.regnode** %scan1601, align 8
  %1091 = bitcast %struct.regnode* %1090 to %struct.regnode_2L*
  %arg2 = getelementptr inbounds %struct.regnode_2L, %struct.regnode_2L* %1091, i32 0, i32 4
  store i32 %conv1615, i32* %arg2, align 4
  br label %for.inc1616

for.inc1616:                                      ; preds = %for.body1600
  %1092 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %recurse_count1617 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1092, i32 0, i32 30
  %1093 = load i32, i32* %recurse_count1617, align 8
  %dec = add nsw i32 %1093, -1
  store i32 %dec, i32* %recurse_count1617, align 8
  br label %for.cond1597

for.end1618:                                      ; preds = %for.cond1597
  br label %if.end1619

if.end1619:                                       ; preds = %for.end1618, %if.end1593
  %1094 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state, align 8
  %npar1620 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1094, i32 0, i32 18
  %1095 = load i32, i32* %npar1620, align 8
  %conv1621 = sext i32 %1095 to i64
  %call1622 = call i8* @Perl_safesyscalloc(i64 %conv1621, i64 24)
  %1096 = bitcast i8* %call1622 to %struct.regexp_paren_pair*
  %1097 = load %struct.regexp*, %struct.regexp** %r, align 8
  %offs = getelementptr inbounds %struct.regexp, %struct.regexp* %1097, i32 0, i32 17
  store %struct.regexp_paren_pair* %1096, %struct.regexp_paren_pair** %offs, align 8
  %1098 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  store %struct.p5rx* %1098, %struct.p5rx** %retval, align 8
  br label %return

return:                                           ; preds = %if.end1619, %if.then267, %if.end176, %if.end125
  %1099 = load %struct.p5rx*, %struct.p5rx** %retval, align 8
  ret %struct.p5rx* %1099
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_reginitcolors() #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %i, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @PL_colors, i64 0, i64 %idxprom
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %arrayidx, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i8 1, i8* @PL_colorset, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.regexp_engine* @Perl_current_re_engine() #0 {
entry:
  %retval = alloca %struct.regexp_engine*, align 8
  %table = alloca %struct.hv*, align 8
  %ptr = alloca %struct.sv**, align 8
  %ptr24 = alloca %struct.sv*, align 8
  %0 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp = icmp eq %struct.cop* %0, @PL_compiling
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %1, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %2 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %2, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 5
  %3 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  store %struct.hv* %3, %struct.hv** %table, align 8
  %4 = load %struct.hv*, %struct.hv** %table, align 8
  %tobool = icmp ne %struct.hv* %4, null
  br i1 %tobool, label %lor.lhs.false, label %if.then2

lor.lhs.false:                                    ; preds = %if.then
  %5 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and = and i32 %5, 131072
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.end, label %if.then2

if.then2:                                         ; preds = %lor.lhs.false, %if.then
  store %struct.regexp_engine* bitcast ({ %struct.p5rx* (%struct.sv*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i8* (%struct.p5rx*, %struct.sv*, i8*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, %struct.sv* (%struct.p5rx*)*, void (%struct.p5rx*)*, void (%struct.p5rx*, i32, %struct.sv*)*, void (%struct.p5rx*, i32, %struct.sv*)*, i32 (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* }* @PL_core_reg_engine to %struct.regexp_engine*), %struct.regexp_engine** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.hv*, %struct.hv** %table, align 8
  %call = call i8* @Perl_hv_common(%struct.hv* %6, %struct.sv* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.179, i64 0, i64 0), i64 7, i32 0, i32 32, %struct.sv* null, i32 0)
  %7 = bitcast i8* %call to %struct.sv**
  store %struct.sv** %7, %struct.sv*** %ptr, align 8
  %8 = load %struct.sv**, %struct.sv*** %ptr, align 8
  %tobool3 = icmp ne %struct.sv** %8, null
  br i1 %tobool3, label %land.lhs.true, label %if.then13

land.lhs.true:                                    ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %ptr, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %and4 = and i32 %11, 256
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %land.lhs.true6, label %if.then13

land.lhs.true6:                                   ; preds = %land.lhs.true
  %12 = load %struct.sv**, %struct.sv*** %ptr, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %14, 2097408
  %cmp9 = icmp eq i32 %and8, 256
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true6
  %15 = load %struct.sv**, %struct.sv*** %ptr, align 8
  %16 = load %struct.sv*, %struct.sv** %15, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any, align 8
  %18 = bitcast i8* %17 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %18, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %19 = load i64, i64* %xivu_iv, align 8
  %tobool10 = icmp ne i64 %19, 0
  br i1 %tobool10, label %if.end14, label %if.then13

cond.false:                                       ; preds = %land.lhs.true6
  %20 = load %struct.sv**, %struct.sv*** %ptr, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %call11 = call i64 @Perl_sv_2iv_flags(%struct.sv* %21, i32 2)
  %tobool12 = icmp ne i64 %call11, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %cond.false, %cond.true, %land.lhs.true, %if.end
  store %struct.regexp_engine* bitcast ({ %struct.p5rx* (%struct.sv*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i8* (%struct.p5rx*, %struct.sv*, i8*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, %struct.sv* (%struct.p5rx*)*, void (%struct.p5rx*)*, void (%struct.p5rx*, i32, %struct.sv*)*, void (%struct.p5rx*, i32, %struct.sv*)*, i32 (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* }* @PL_core_reg_engine to %struct.regexp_engine*), %struct.regexp_engine** %retval, align 8
  br label %return

if.end14:                                         ; preds = %cond.false, %cond.true
  %22 = load %struct.sv**, %struct.sv*** %ptr, align 8
  %23 = load %struct.sv*, %struct.sv** %22, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %24, 2097408
  %cmp17 = icmp eq i32 %and16, 256
  br i1 %cmp17, label %cond.true18, label %cond.false22

cond.true18:                                      ; preds = %if.end14
  %25 = load %struct.sv**, %struct.sv*** %ptr, align 8
  %26 = load %struct.sv*, %struct.sv** %25, align 8
  %sv_any19 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 0
  %27 = load i8*, i8** %sv_any19, align 8
  %28 = bitcast i8* %27 to %struct.xpviv*
  %xiv_u20 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %28, i32 0, i32 4
  %xivu_iv21 = bitcast %union._xivu* %xiv_u20 to i64*
  %29 = load i64, i64* %xivu_iv21, align 8
  br label %cond.end

cond.false22:                                     ; preds = %if.end14
  %30 = load %struct.sv**, %struct.sv*** %ptr, align 8
  %31 = load %struct.sv*, %struct.sv** %30, align 8
  %call23 = call i64 @Perl_sv_2iv_flags(%struct.sv* %31, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false22, %cond.true18
  %cond = phi i64 [ %29, %cond.true18 ], [ %call23, %cond.false22 ]
  %32 = inttoptr i64 %cond to %struct.regexp_engine*
  store %struct.regexp_engine* %32, %struct.regexp_engine** %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %33 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints_hash = getelementptr inbounds %struct.cop, %struct.cop* %33, i32 0, i32 13
  %34 = load %struct.refcounted_he*, %struct.refcounted_he** %cop_hints_hash, align 8
  %tobool25 = icmp ne %struct.refcounted_he* %34, null
  br i1 %tobool25, label %if.end27, label %if.then26

if.then26:                                        ; preds = %if.else
  store %struct.regexp_engine* bitcast ({ %struct.p5rx* (%struct.sv*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i8* (%struct.p5rx*, %struct.sv*, i8*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, %struct.sv* (%struct.p5rx*)*, void (%struct.p5rx*)*, void (%struct.p5rx*, i32, %struct.sv*)*, void (%struct.p5rx*, i32, %struct.sv*)*, i32 (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* }* @PL_core_reg_engine to %struct.regexp_engine*), %struct.regexp_engine** %retval, align 8
  br label %return

if.end27:                                         ; preds = %if.else
  %35 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints_hash28 = getelementptr inbounds %struct.cop, %struct.cop* %35, i32 0, i32 13
  %36 = load %struct.refcounted_he*, %struct.refcounted_he** %cop_hints_hash28, align 8
  %call29 = call %struct.sv* @Perl_refcounted_he_fetch_pvn(%struct.refcounted_he* %36, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.179, i64 0, i64 0), i64 7, i32 0, i32 0)
  store %struct.sv* %call29, %struct.sv** %ptr24, align 8
  %37 = load %struct.sv*, %struct.sv** %ptr24, align 8
  %tobool30 = icmp ne %struct.sv* %37, null
  br i1 %tobool30, label %land.lhs.true31, label %if.then47

land.lhs.true31:                                  ; preds = %if.end27
  %38 = load %struct.sv*, %struct.sv** %ptr24, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %39, 256
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %land.lhs.true35, label %if.then47

land.lhs.true35:                                  ; preds = %land.lhs.true31
  %40 = load %struct.sv*, %struct.sv** %ptr24, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %41, 2097408
  %cmp38 = icmp eq i32 %and37, 256
  br i1 %cmp38, label %cond.true39, label %cond.false44

cond.true39:                                      ; preds = %land.lhs.true35
  %42 = load %struct.sv*, %struct.sv** %ptr24, align 8
  %sv_any40 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any40, align 8
  %44 = bitcast i8* %43 to %struct.xpviv*
  %xiv_u41 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %44, i32 0, i32 4
  %xivu_iv42 = bitcast %union._xivu* %xiv_u41 to i64*
  %45 = load i64, i64* %xivu_iv42, align 8
  %tobool43 = icmp ne i64 %45, 0
  br i1 %tobool43, label %if.end48, label %if.then47

cond.false44:                                     ; preds = %land.lhs.true35
  %46 = load %struct.sv*, %struct.sv** %ptr24, align 8
  %call45 = call i64 @Perl_sv_2iv_flags(%struct.sv* %46, i32 2)
  %tobool46 = icmp ne i64 %call45, 0
  br i1 %tobool46, label %if.end48, label %if.then47

if.then47:                                        ; preds = %cond.false44, %cond.true39, %land.lhs.true31, %if.end27
  store %struct.regexp_engine* bitcast ({ %struct.p5rx* (%struct.sv*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i8* (%struct.p5rx*, %struct.sv*, i8*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, %struct.sv* (%struct.p5rx*)*, void (%struct.p5rx*)*, void (%struct.p5rx*, i32, %struct.sv*)*, void (%struct.p5rx*, i32, %struct.sv*)*, i32 (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* }* @PL_core_reg_engine to %struct.regexp_engine*), %struct.regexp_engine** %retval, align 8
  br label %return

if.end48:                                         ; preds = %cond.false44, %cond.true39
  %47 = load %struct.sv*, %struct.sv** %ptr24, align 8
  %sv_flags49 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags49, align 4
  %and50 = and i32 %48, 2097408
  %cmp51 = icmp eq i32 %and50, 256
  br i1 %cmp51, label %cond.true52, label %cond.false56

cond.true52:                                      ; preds = %if.end48
  %49 = load %struct.sv*, %struct.sv** %ptr24, align 8
  %sv_any53 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any53, align 8
  %51 = bitcast i8* %50 to %struct.xpviv*
  %xiv_u54 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %51, i32 0, i32 4
  %xivu_iv55 = bitcast %union._xivu* %xiv_u54 to i64*
  %52 = load i64, i64* %xivu_iv55, align 8
  br label %cond.end58

cond.false56:                                     ; preds = %if.end48
  %53 = load %struct.sv*, %struct.sv** %ptr24, align 8
  %call57 = call i64 @Perl_sv_2iv_flags(%struct.sv* %53, i32 2)
  br label %cond.end58

cond.end58:                                       ; preds = %cond.false56, %cond.true52
  %cond59 = phi i64 [ %52, %cond.true52 ], [ %call57, %cond.false56 ]
  %54 = inttoptr i64 %cond59 to %struct.regexp_engine*
  store %struct.regexp_engine* %54, %struct.regexp_engine** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end58, %if.then47, %if.then26, %cond.end, %if.then13, %if.then2
  %55 = load %struct.regexp_engine*, %struct.regexp_engine** %retval, align 8
  ret %struct.regexp_engine* %55
}

declare dso_local i8* @Perl_hv_common(%struct.hv*, %struct.sv*, i8*, i64, i32, i32, %struct.sv*, i32) #1

declare dso_local i64 @Perl_sv_2iv_flags(%struct.sv*, i32) #1

declare dso_local %struct.sv* @Perl_refcounted_he_fetch_pvn(%struct.refcounted_he*, i8*, i64, i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.p5rx* @Perl_pregcomp(%struct.sv* %pattern, i32 %flags) #0 {
entry:
  %pattern.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %eng = alloca %struct.regexp_engine*, align 8
  store %struct.sv* %pattern, %struct.sv** %pattern.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %call = call %struct.regexp_engine* @Perl_current_re_engine()
  store %struct.regexp_engine* %call, %struct.regexp_engine** %eng, align 8
  %0 = load %struct.regexp_engine*, %struct.regexp_engine** %eng, align 8
  %comp = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %0, i32 0, i32 0
  %comp1 = bitcast {}** %comp to %struct.p5rx* (%struct.sv*, i32)**
  %1 = load %struct.p5rx* (%struct.sv*, i32)*, %struct.p5rx* (%struct.sv*, i32)** %comp1, align 8
  %2 = load %struct.sv*, %struct.sv** %pattern.addr, align 8
  %3 = load i32, i32* %flags.addr, align 4
  %call2 = call %struct.p5rx* %1(%struct.sv* %2, i32 %3)
  ret %struct.p5rx* %call2
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_regex_charset(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %and = and i32 %0, 896
  %shr = lshr i32 %and, 7
  ret i32 %shr
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl__new_invlist_C_array(i64* %list) #0 {
entry:
  %list.addr = alloca i64*, align 8
  %length = alloca i64, align 8
  %version_id = alloca i64, align 8
  %offset = alloca i8, align 1
  %invlist = alloca %struct.sv*, align 8
  store i64* %list, i64** %list.addr, align 8
  %0 = load i64*, i64** %list.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 0
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %length, align 8
  %2 = load i64*, i64** %list.addr, align 8
  %arrayidx1 = getelementptr inbounds i64, i64* %2, i64 1
  %3 = load i64, i64* %arrayidx1, align 8
  store i64 %3, i64* %version_id, align 8
  %4 = load i64*, i64** %list.addr, align 8
  %arrayidx2 = getelementptr inbounds i64, i64* %4, i64 2
  %5 = load i64, i64* %arrayidx2, align 8
  %tobool = icmp ne i64 %5, 0
  %6 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  %tobool3 = icmp ne i32 %cond, 0
  %frombool = zext i1 %tobool3 to i8
  store i8 %frombool, i8* %offset, align 1
  %call = call %struct.sv* @Perl_newSV_type(i32 4)
  store %struct.sv* %call, %struct.sv** %invlist, align 8
  %7 = load i64, i64* %version_id, align 8
  %cmp = icmp ne i64 %7, 148565664
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.192, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %8 = load i64*, i64** %list.addr, align 8
  %add.ptr = getelementptr inbounds i64, i64* %8, i64 3
  %9 = bitcast i64* %add.ptr to i8*
  %10 = load %struct.sv*, %struct.sv** %invlist, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  store i8* %9, i8** %svu_pv, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body4

do.body4:                                         ; preds = %do.end
  %11 = load %struct.sv*, %struct.sv** %invlist, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any, align 8
  %13 = bitcast i8* %12 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  store i64 0, i64* %xpvlenu_len, align 8
  br label %do.end5

do.end5:                                          ; preds = %do.body4
  %14 = load i8, i8* %offset, align 1
  %tobool6 = trunc i8 %14 to i1
  %15 = load %struct.sv*, %struct.sv** %invlist, align 8
  %call7 = call i8* @S_get_invlist_offset_addr(%struct.sv* %15)
  %frombool8 = zext i1 %tobool6 to i8
  store i8 %frombool8, i8* %call7, align 1
  %16 = load %struct.sv*, %struct.sv** %invlist, align 8
  %17 = load i64, i64* %length, align 8
  %18 = load i8, i8* %offset, align 1
  %tobool9 = trunc i8 %18 to i1
  %conv = zext i1 %tobool9 to i64
  %sub = sub i64 %17, %conv
  %19 = load i8, i8* %offset, align 1
  %tobool10 = trunc i8 %19 to i1
  call void @S_invlist_set_len(%struct.sv* %16, i64 %sub, i1 zeroext %tobool10)
  %20 = load %struct.sv*, %struct.sv** %invlist, align 8
  call void @S_invlist_set_previous_index(%struct.sv* %20, i64 0)
  %21 = load %struct.sv*, %struct.sv** %invlist, align 8
  call void @S_invlist_iterfinish(%struct.sv* %21)
  %22 = load %struct.sv*, %struct.sv** %invlist, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags, align 4
  %or = or i32 %23, 134283264
  store i32 %or, i32* %sv_flags, align 4
  %24 = load %struct.sv*, %struct.sv** %invlist, align 8
  ret %struct.sv* %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl__new_invlist(i64 %initial_size) #0 {
entry:
  %initial_size.addr = alloca i64, align 8
  %new_list = alloca %struct.sv*, align 8
  store i64 %initial_size, i64* %initial_size.addr, align 8
  %0 = load i64, i64* %initial_size.addr, align 8
  %cmp = icmp slt i64 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 10, i64* %initial_size.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call = call %struct.sv* @Perl_newSV_type(i32 4)
  store %struct.sv* %call, %struct.sv** %new_list, align 8
  %1 = load %struct.sv*, %struct.sv** %new_list, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 268435456
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %new_list, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %6 = load i64, i64* %xpvlenu_len, align 8
  %7 = load i64, i64* %initial_size.addr, align 8
  %add = add nsw i64 %7, 1
  %mul = mul i64 %add, 8
  %add1 = add i64 %mul, 1
  %cmp2 = icmp ult i64 %6, %add1
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.end
  %8 = load %struct.sv*, %struct.sv** %new_list, align 8
  %9 = load i64, i64* %initial_size.addr, align 8
  %add3 = add nsw i64 %9, 1
  %mul4 = mul i64 %add3, 8
  %add5 = add i64 %mul4, 1
  %call6 = call i8* @Perl_sv_grow(%struct.sv* %8, i64 %add5)
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %10 = load %struct.sv*, %struct.sv** %new_list, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %11 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call6, %cond.true ], [ %11, %cond.false ]
  %12 = load %struct.sv*, %struct.sv** %new_list, align 8
  call void @S_invlist_set_len(%struct.sv* %12, i64 0, i1 zeroext false)
  %13 = load %struct.sv*, %struct.sv** %new_list, align 8
  %call7 = call i64* @S_get_invlist_iter_addr(%struct.sv* %13)
  store i64 -1, i64* %call7, align 8
  %14 = load %struct.sv*, %struct.sv** %new_list, align 8
  %call8 = call i64* @S_get_invlist_previous_index_addr(%struct.sv* %14)
  store i64 0, i64* %call8, align 8
  %15 = load %struct.sv*, %struct.sv** %new_list, align 8
  ret %struct.sv* %15
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl__add_range_to_invlist(%struct.sv* %invlist, i64 %start, i64 %end) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %invlist.addr = alloca %struct.sv*, align 8
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %range_invlist = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  store i64 %start, i64* %start.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %cmp = icmp eq %struct.sv* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call %struct.sv* @Perl__new_invlist(i64 2)
  store %struct.sv* %call, %struct.sv** %invlist.addr, align 8
  store i64 0, i64* %len, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call1 = call i64 @S__invlist_len(%struct.sv* %1)
  store i64 %call1, i64* %len, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %2 = load i64, i64* %len, align 8
  %cmp2 = icmp eq i64 %2, 0
  br i1 %cmp2, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %3 = load i64, i64* %len, align 8
  %sub = sub i64 %3, 1
  %and = and i64 %sub, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end7

land.lhs.true:                                    ; preds = %lor.lhs.false
  %4 = load i64, i64* %start.addr, align 8
  %5 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call3 = call i64* @S_invlist_array(%struct.sv* %5)
  %6 = load i64, i64* %len, align 8
  %sub4 = sub i64 %6, 1
  %arrayidx = getelementptr inbounds i64, i64* %call3, i64 %sub4
  %7 = load i64, i64* %arrayidx, align 8
  %cmp5 = icmp uge i64 %4, %7
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %land.lhs.true, %if.end
  %8 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %9 = load i64, i64* %start.addr, align 8
  %10 = load i64, i64* %end.addr, align 8
  call void @S__append_range_to_invlist(%struct.sv* %8, i64 %9, i64 %10)
  %11 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  store %struct.sv* %11, %struct.sv** %retval, align 8
  br label %return

if.end7:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %call8 = call %struct.sv* @Perl__new_invlist(i64 2)
  store %struct.sv* %call8, %struct.sv** %range_invlist, align 8
  %12 = load %struct.sv*, %struct.sv** %range_invlist, align 8
  %13 = load i64, i64* %start.addr, align 8
  %14 = load i64, i64* %end.addr, align 8
  call void @S__append_range_to_invlist(%struct.sv* %12, i64 %13, i64 %14)
  %15 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %16 = load %struct.sv*, %struct.sv** %range_invlist, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %15, %struct.sv* %16, i1 zeroext false, %struct.sv** %invlist.addr)
  %17 = load %struct.sv*, %struct.sv** %range_invlist, align 8
  %18 = bitcast %struct.sv* %17 to i8*
  %19 = bitcast i8* %18 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %19)
  %20 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  store %struct.sv* %20, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end7, %if.then6
  %21 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %21
}

declare dso_local i8* @Perl_safesysmalloc(i64) #1

declare dso_local void @Perl_save_pushptr(i8*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_concat_pat(%struct.RExC_state_t* %pRExC_state, %struct.sv* %pat, %struct.sv** %patternp, i32 %pat_count, %struct.op* %oplist, i8* %recompile_p, %struct.sv* %delim) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %pat.addr = alloca %struct.sv*, align 8
  %patternp.addr = alloca %struct.sv**, align 8
  %pat_count.addr = alloca i32, align 4
  %oplist.addr = alloca %struct.op*, align 8
  %recompile_p.addr = alloca i8*, align 8
  %delim.addr = alloca %struct.sv*, align 8
  %svp = alloca %struct.sv**, align 8
  %n = alloca i32, align 4
  %use_delim = alloca i8, align 1
  %alloced = alloca i8, align 1
  %sv = alloca %struct.sv*, align 8
  %rx = alloca %struct.sv*, align 8
  %orig_patlen = alloca i64, align 8
  %code = alloca i8, align 1
  %msv = alloca %struct.sv*, align 8
  %av = alloca %struct.av*, align 8
  %maxarg = alloca i64, align 8
  %array = alloca %struct.sv**, align 8
  %i = alloca i64, align 8
  %svp35 = alloca %struct.sv**, align 8
  %sv106 = alloca %struct.sv*, align 8
  %dlen = alloca i64, align 8
  %dst = alloca i8*, align 8
  %ri = alloca %struct.regexp_internal*, align 8
  %i283 = alloca i32, align 4
  %src = alloca %struct.reg_code_block*, align 8
  %dst300 = alloca %struct.reg_code_block*, align 8
  %offset = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.sv* %pat, %struct.sv** %pat.addr, align 8
  store %struct.sv** %patternp, %struct.sv*** %patternp.addr, align 8
  store i32 %pat_count, i32* %pat_count.addr, align 4
  store %struct.op* %oplist, %struct.op** %oplist.addr, align 8
  store i8* %recompile_p, i8** %recompile_p.addr, align 8
  store %struct.sv* %delim, %struct.sv** %delim.addr, align 8
  store i32 0, i32* %n, align 4
  store i8 0, i8* %use_delim, align 1
  store i8 0, i8* %alloced, align 1
  %0 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %pat_count.addr, align 4
  %cmp = icmp ne i32 %1, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %call = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i64 0)
  store %struct.sv* %call, %struct.sv** %pat.addr, align 8
  %2 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %3 = bitcast %struct.sv* %2 to i8*
  %4 = bitcast i8* %3 to %struct.sv*
  %5 = bitcast %struct.sv* %4 to i8*
  call void @Perl_save_pushptr(i8* %5, i32 11)
  store i8 1, i8* %alloced, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load %struct.sv**, %struct.sv*** %patternp.addr, align 8
  store %struct.sv** %6, %struct.sv*** %svp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc336, %if.end
  %7 = load %struct.sv**, %struct.sv*** %svp, align 8
  %8 = load %struct.sv**, %struct.sv*** %patternp.addr, align 8
  %9 = load i32, i32* %pat_count.addr, align 4
  %idx.ext = sext i32 %9 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %8, i64 %idx.ext
  %cmp1 = icmp ult %struct.sv** %7, %add.ptr
  br i1 %cmp1, label %for.body, label %for.end338

for.body:                                         ; preds = %for.cond
  store %struct.sv* null, %struct.sv** %rx, align 8
  store i64 0, i64* %orig_patlen, align 8
  store i8 0, i8* %code, align 1
  %10 = load i8, i8* %use_delim, align 1
  %tobool2 = trunc i8 %10 to i1
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %11 = load %struct.sv*, %struct.sv** %delim.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %12 = load %struct.sv**, %struct.sv*** %svp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %11, %cond.true ], [ %13, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %msv, align 8
  %14 = load %struct.sv*, %struct.sv** %msv, align 8
  %tobool3 = icmp ne %struct.sv* %14, null
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %cond.end
  store %struct.sv* @PL_sv_undef, %struct.sv** %msv, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %cond.end
  %15 = load i8, i8* %use_delim, align 1
  %tobool6 = trunc i8 %15 to i1
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.end5
  %16 = load %struct.sv**, %struct.sv*** %svp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %16, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %svp, align 8
  store i8 0, i8* %use_delim, align 1
  br label %if.end11

if.else:                                          ; preds = %if.end5
  %17 = load %struct.sv*, %struct.sv** %delim.addr, align 8
  %tobool8 = icmp ne %struct.sv* %17, null
  br i1 %tobool8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.else
  store i8 1, i8* %use_delim, align 1
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.then7
  %18 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags, align 4
  %and = and i32 %19, 255
  %cmp12 = icmp eq i32 %and, 11
  br i1 %cmp12, label %if.then13, label %if.end49

if.then13:                                        ; preds = %if.end11
  %20 = load %struct.sv*, %struct.sv** %msv, align 8
  %21 = bitcast %struct.sv* %20 to %struct.av*
  store %struct.av* %21, %struct.av** %av, align 8
  %22 = load %struct.av*, %struct.av** %av, align 8
  %23 = bitcast %struct.av* %22 to %struct.sv*
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %24, 8388608
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %cond.true17, label %cond.false19

cond.true17:                                      ; preds = %if.then13
  %25 = load %struct.av*, %struct.av** %av, align 8
  %26 = bitcast %struct.av* %25 to i8*
  %27 = bitcast i8* %26 to %struct.sv*
  %call18 = call i32 @Perl_mg_size(%struct.sv* %27)
  %conv = sext i32 %call18 to i64
  br label %cond.end20

cond.false19:                                     ; preds = %if.then13
  %28 = load %struct.av*, %struct.av** %av, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %28, i32 0, i32 0
  %29 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %29, i32 0, i32 2
  %30 = load i64, i64* %xav_fill, align 8
  br label %cond.end20

cond.end20:                                       ; preds = %cond.false19, %cond.true17
  %cond21 = phi i64 [ %conv, %cond.true17 ], [ %30, %cond.false19 ]
  %add = add nsw i64 %cond21, 1
  store i64 %add, i64* %maxarg, align 8
  %31 = load %struct.op*, %struct.op** %oplist.addr, align 8
  %tobool22 = icmp ne %struct.op* %31, null
  br i1 %tobool22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %cond.end20
  %32 = load %struct.op*, %struct.op** %oplist.addr, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 1
  %33 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr24 = getelementptr inbounds %struct.op, %struct.op* %33, i64 0
  store %struct.op* %add.ptr24, %struct.op** %oplist.addr, align 8
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %cond.end20
  %34 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags26 = getelementptr inbounds %struct.av, %struct.av* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %35, 8388608
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.then29, label %if.else42

if.then29:                                        ; preds = %if.end25
  %36 = load i64, i64* %maxarg, align 8
  %mul = mul i64 %36, 8
  %call30 = call i8* @Perl_safesysmalloc(i64 %mul)
  %37 = bitcast i8* %call30 to %struct.sv**
  store %struct.sv** %37, %struct.sv*** %array, align 8
  %38 = load %struct.sv**, %struct.sv*** %array, align 8
  %39 = bitcast %struct.sv** %38 to i8*
  call void @Perl_save_pushptr(i8* %39, i32 10)
  store i64 0, i64* %i, align 8
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc, %if.then29
  %40 = load i64, i64* %i, align 8
  %41 = load i64, i64* %maxarg, align 8
  %cmp32 = icmp slt i64 %40, %41
  br i1 %cmp32, label %for.body34, label %for.end

for.body34:                                       ; preds = %for.cond31
  %42 = load %struct.av*, %struct.av** %av, align 8
  %43 = load i64, i64* %i, align 8
  %call36 = call %struct.sv** @Perl_av_fetch(%struct.av* %42, i64 %43, i32 0)
  store %struct.sv** %call36, %struct.sv*** %svp35, align 8
  %44 = load %struct.sv**, %struct.sv*** %svp35, align 8
  %tobool37 = icmp ne %struct.sv** %44, null
  br i1 %tobool37, label %cond.true38, label %cond.false39

cond.true38:                                      ; preds = %for.body34
  %45 = load %struct.sv**, %struct.sv*** %svp35, align 8
  %46 = load %struct.sv*, %struct.sv** %45, align 8
  br label %cond.end40

cond.false39:                                     ; preds = %for.body34
  br label %cond.end40

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi %struct.sv* [ %46, %cond.true38 ], [ @PL_sv_undef, %cond.false39 ]
  %47 = load %struct.sv**, %struct.sv*** %array, align 8
  %48 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %47, i64 %48
  store %struct.sv* %cond41, %struct.sv** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %cond.end40
  %49 = load i64, i64* %i, align 8
  %inc = add nsw i64 %49, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond31

for.end:                                          ; preds = %for.cond31
  br label %if.end43

if.else42:                                        ; preds = %if.end25
  %50 = load %struct.av*, %struct.av** %av, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %50, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u to %struct.sv***
  %51 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %51, %struct.sv*** %array, align 8
  br label %if.end43

if.end43:                                         ; preds = %if.else42, %for.end
  %52 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %53 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %54 = load %struct.sv**, %struct.sv*** %array, align 8
  %55 = load i64, i64* %maxarg, align 8
  %conv44 = trunc i64 %55 to i32
  %56 = load i8*, i8** %recompile_p.addr, align 8
  %call45 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.206, i64 0, i64 0), i64 1, i32 2, i32 3)
  %sv_u46 = getelementptr inbounds %struct.gv, %struct.gv* %call45, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u46 to %struct.gp**
  %57 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr47 = getelementptr inbounds %struct.gp, %struct.gp* %57, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr47, i32 0, i32 0
  %58 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %call48 = call %struct.sv* @S_concat_pat(%struct.RExC_state_t* %52, %struct.sv* %53, %struct.sv** %54, i32 %conv44, %struct.op* null, i8* %56, %struct.sv* %58)
  store %struct.sv* %call48, %struct.sv** %pat.addr, align 8
  br label %for.inc336

if.end49:                                         ; preds = %if.end11
  %59 = load %struct.op*, %struct.op** %oplist.addr, align 8
  %tobool50 = icmp ne %struct.op* %59, null
  br i1 %tobool50, label %if.then51, label %if.end78

if.then51:                                        ; preds = %if.end49
  %60 = load %struct.op*, %struct.op** %oplist.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %60, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp52 = icmp eq i32 %bf.cast, 0
  br i1 %cmp52, label %land.lhs.true54, label %if.end75

land.lhs.true54:                                  ; preds = %if.then51
  %61 = load %struct.op*, %struct.op** %oplist.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 5
  %62 = load i8, i8* %op_flags, align 2
  %conv55 = zext i8 %62 to i32
  %and56 = and i32 %conv55, 128
  %tobool57 = icmp ne i32 %and56, 0
  br i1 %tobool57, label %if.then58, label %if.end75

if.then58:                                        ; preds = %land.lhs.true54
  %63 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %tobool59 = icmp ne %struct.sv* %63, null
  br i1 %tobool59, label %cond.true60, label %cond.false62

cond.true60:                                      ; preds = %if.then58
  %64 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %sv_any61 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 0
  %65 = load i8*, i8** %sv_any61, align 8
  %66 = bitcast i8* %65 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %66, i32 0, i32 2
  %67 = load i64, i64* %xpv_cur, align 8
  br label %cond.end63

cond.false62:                                     ; preds = %if.then58
  br label %cond.end63

cond.end63:                                       ; preds = %cond.false62, %cond.true60
  %cond64 = phi i64 [ %67, %cond.true60 ], [ 0, %cond.false62 ]
  %68 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %68, i32 0, i32 38
  %69 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks, align 8
  %70 = load i32, i32* %n, align 4
  %idxprom = sext i32 %70 to i64
  %arrayidx65 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %69, i64 %idxprom
  %start = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx65, i32 0, i32 0
  store i64 %cond64, i64* %start, align 8
  %71 = load %struct.op*, %struct.op** %oplist.addr, align 8
  %72 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks66 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %72, i32 0, i32 38
  %73 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks66, align 8
  %74 = load i32, i32* %n, align 4
  %idxprom67 = sext i32 %74 to i64
  %arrayidx68 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %73, i64 %idxprom67
  %block = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx68, i32 0, i32 2
  store %struct.op* %71, %struct.op** %block, align 8
  %75 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks69 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %75, i32 0, i32 38
  %76 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks69, align 8
  %77 = load i32, i32* %n, align 4
  %idxprom70 = sext i32 %77 to i64
  %arrayidx71 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %76, i64 %idxprom70
  %src_regex = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx71, i32 0, i32 3
  store %struct.p5rx* null, %struct.p5rx** %src_regex, align 8
  %78 = load i32, i32* %n, align 4
  %inc72 = add nsw i32 %78, 1
  store i32 %inc72, i32* %n, align 4
  store i8 1, i8* %code, align 1
  %79 = load %struct.op*, %struct.op** %oplist.addr, align 8
  %op_sibling73 = getelementptr inbounds %struct.op, %struct.op* %79, i32 0, i32 1
  %80 = load %struct.op*, %struct.op** %op_sibling73, align 8
  %add.ptr74 = getelementptr inbounds %struct.op, %struct.op* %80, i64 0
  store %struct.op* %add.ptr74, %struct.op** %oplist.addr, align 8
  br label %if.end75

if.end75:                                         ; preds = %cond.end63, %land.lhs.true54, %if.then51
  %81 = load %struct.op*, %struct.op** %oplist.addr, align 8
  %op_sibling76 = getelementptr inbounds %struct.op, %struct.op* %81, i32 0, i32 1
  %82 = load %struct.op*, %struct.op** %op_sibling76, align 8
  %add.ptr77 = getelementptr inbounds %struct.op, %struct.op* %82, i64 0
  store %struct.op* %add.ptr77, %struct.op** %oplist.addr, align 8
  br label %if.end78

if.end78:                                         ; preds = %if.end75, %if.end49
  %83 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_flags79 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 2
  %84 = load i32, i32* %sv_flags79, align 4
  %and80 = and i32 %84, 2097152
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %cond.true82, label %cond.false83

cond.true82:                                      ; preds = %if.end78
  br i1 true, label %land.rhs, label %land.end

cond.false83:                                     ; preds = %if.end78
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false83, %cond.true82
  %85 = load %struct.sv*, %struct.sv** %msv, align 8
  %call84 = call i32 @Perl_mg_get(%struct.sv* %85)
  %tobool85 = icmp ne i32 %call84, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false83, %cond.true82
  %86 = phi i1 [ false, %cond.false83 ], [ false, %cond.true82 ], [ %tobool85, %land.rhs ]
  %land.ext = zext i1 %86 to i32
  %87 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_flags86 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags86, align 4
  %and87 = and i32 %88, 2048
  %tobool88 = icmp ne i32 %and87, 0
  br i1 %tobool88, label %land.lhs.true89, label %if.end124

land.lhs.true89:                                  ; preds = %land.end
  %89 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_flags90 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 2
  %90 = load i32, i32* %sv_flags90, align 4
  %and91 = and i32 %90, 2048
  %tobool92 = icmp ne i32 %and91, 0
  br i1 %tobool92, label %land.lhs.true93, label %if.end124

land.lhs.true93:                                  ; preds = %land.lhs.true89
  %91 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_u94 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u94 to %struct.sv**
  %92 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags95 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 2
  %93 = load i32, i32* %sv_flags95, align 4
  %and96 = and i32 %93, 1048576
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %land.lhs.true98, label %if.end124

land.lhs.true98:                                  ; preds = %land.lhs.true93
  %94 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_u99 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 3
  %svu_rv100 = bitcast %union.anon* %sv_u99 to %struct.sv**
  %95 = load %struct.sv*, %struct.sv** %svu_rv100, align 8
  %sv_any101 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 0
  %96 = load i8*, i8** %sv_any101, align 8
  %97 = bitcast i8* %96 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %97, i32 0, i32 0
  %98 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags102 = getelementptr inbounds %struct.hv, %struct.hv* %98, i32 0, i32 2
  %99 = load i32, i32* %sv_flags102, align 4
  %and103 = and i32 %99, 268435456
  %tobool104 = icmp ne i32 %and103, 0
  br i1 %tobool104, label %if.then105, label %if.end124

if.then105:                                       ; preds = %land.lhs.true98
  %100 = load %struct.sv*, %struct.sv** %msv, align 8
  %call107 = call %struct.sv* @Perl_amagic_call(%struct.sv* %100, %struct.sv* @PL_sv_undef, i32 74, i32 9)
  store %struct.sv* %call107, %struct.sv** %sv106, align 8
  %101 = load %struct.sv*, %struct.sv** %sv106, align 8
  %tobool108 = icmp ne %struct.sv* %101, null
  br i1 %tobool108, label %if.then109, label %if.end123

if.then109:                                       ; preds = %if.then105
  %102 = load %struct.sv*, %struct.sv** %sv106, align 8
  %sv_flags110 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 2
  %103 = load i32, i32* %sv_flags110, align 4
  %and111 = and i32 %103, 2048
  %tobool112 = icmp ne i32 %and111, 0
  br i1 %tobool112, label %if.then113, label %if.end116

if.then113:                                       ; preds = %if.then109
  %104 = load %struct.sv*, %struct.sv** %sv106, align 8
  %sv_u114 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 3
  %svu_rv115 = bitcast %union.anon* %sv_u114 to %struct.sv**
  %105 = load %struct.sv*, %struct.sv** %svu_rv115, align 8
  store %struct.sv* %105, %struct.sv** %sv106, align 8
  br label %if.end116

if.end116:                                        ; preds = %if.then113, %if.then109
  %106 = load %struct.sv*, %struct.sv** %sv106, align 8
  %sv_flags117 = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 2
  %107 = load i32, i32* %sv_flags117, align 4
  %and118 = and i32 %107, 255
  %cmp119 = icmp ne i32 %and118, 8
  br i1 %cmp119, label %if.then121, label %if.end122

if.then121:                                       ; preds = %if.end116
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.207, i64 0, i64 0))
  br label %if.end122

if.end122:                                        ; preds = %if.then121, %if.end116
  %108 = load %struct.sv*, %struct.sv** %sv106, align 8
  store %struct.sv* %108, %struct.sv** %msv, align 8
  br label %if.end123

if.end123:                                        ; preds = %if.end122, %if.then105
  br label %if.end124

if.end124:                                        ; preds = %if.end123, %land.lhs.true98, %land.lhs.true93, %land.lhs.true89, %land.end
  %109 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %tobool125 = icmp ne %struct.sv* %109, null
  br i1 %tobool125, label %land.lhs.true126, label %if.else165

land.lhs.true126:                                 ; preds = %if.end124
  %110 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %sv_flags127 = getelementptr inbounds %struct.sv, %struct.sv* %110, i32 0, i32 2
  %111 = load i32, i32* %sv_flags127, align 4
  %and128 = and i32 %111, 2048
  %tobool129 = icmp ne i32 %and128, 0
  br i1 %tobool129, label %land.lhs.true130, label %lor.lhs.false

land.lhs.true130:                                 ; preds = %land.lhs.true126
  %112 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %sv_u131 = getelementptr inbounds %struct.sv, %struct.sv* %112, i32 0, i32 3
  %svu_rv132 = bitcast %union.anon* %sv_u131 to %struct.sv**
  %113 = load %struct.sv*, %struct.sv** %svu_rv132, align 8
  %sv_flags133 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 2
  %114 = load i32, i32* %sv_flags133, align 4
  %and134 = and i32 %114, 1048576
  %tobool135 = icmp ne i32 %and134, 0
  br i1 %tobool135, label %land.lhs.true136, label %lor.lhs.false

land.lhs.true136:                                 ; preds = %land.lhs.true130
  %115 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %sv_u137 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 3
  %svu_rv138 = bitcast %union.anon* %sv_u137 to %struct.sv**
  %116 = load %struct.sv*, %struct.sv** %svu_rv138, align 8
  %sv_any139 = getelementptr inbounds %struct.sv, %struct.sv* %116, i32 0, i32 0
  %117 = load i8*, i8** %sv_any139, align 8
  %118 = bitcast i8* %117 to %struct.xpvmg*
  %xmg_stash140 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %118, i32 0, i32 0
  %119 = load %struct.hv*, %struct.hv** %xmg_stash140, align 8
  %sv_flags141 = getelementptr inbounds %struct.hv, %struct.hv* %119, i32 0, i32 2
  %120 = load i32, i32* %sv_flags141, align 4
  %and142 = and i32 %120, 268435456
  %tobool143 = icmp ne i32 %and142, 0
  br i1 %tobool143, label %land.lhs.true161, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true136, %land.lhs.true130, %land.lhs.true126
  %121 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_flags144 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 2
  %122 = load i32, i32* %sv_flags144, align 4
  %and145 = and i32 %122, 2048
  %tobool146 = icmp ne i32 %and145, 0
  br i1 %tobool146, label %land.lhs.true147, label %if.else165

land.lhs.true147:                                 ; preds = %lor.lhs.false
  %123 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_u148 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 3
  %svu_rv149 = bitcast %union.anon* %sv_u148 to %struct.sv**
  %124 = load %struct.sv*, %struct.sv** %svu_rv149, align 8
  %sv_flags150 = getelementptr inbounds %struct.sv, %struct.sv* %124, i32 0, i32 2
  %125 = load i32, i32* %sv_flags150, align 4
  %and151 = and i32 %125, 1048576
  %tobool152 = icmp ne i32 %and151, 0
  br i1 %tobool152, label %land.lhs.true153, label %if.else165

land.lhs.true153:                                 ; preds = %land.lhs.true147
  %126 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_u154 = getelementptr inbounds %struct.sv, %struct.sv* %126, i32 0, i32 3
  %svu_rv155 = bitcast %union.anon* %sv_u154 to %struct.sv**
  %127 = load %struct.sv*, %struct.sv** %svu_rv155, align 8
  %sv_any156 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 0
  %128 = load i8*, i8** %sv_any156, align 8
  %129 = bitcast i8* %128 to %struct.xpvmg*
  %xmg_stash157 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %129, i32 0, i32 0
  %130 = load %struct.hv*, %struct.hv** %xmg_stash157, align 8
  %sv_flags158 = getelementptr inbounds %struct.hv, %struct.hv* %130, i32 0, i32 2
  %131 = load i32, i32* %sv_flags158, align 4
  %and159 = and i32 %131, 268435456
  %tobool160 = icmp ne i32 %and159, 0
  br i1 %tobool160, label %land.lhs.true161, label %if.else165

land.lhs.true161:                                 ; preds = %land.lhs.true153, %land.lhs.true136
  %132 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %133 = load %struct.sv*, %struct.sv** %msv, align 8
  %call162 = call %struct.sv* @Perl_amagic_call(%struct.sv* %132, %struct.sv* %133, i32 70, i32 4)
  store %struct.sv* %call162, %struct.sv** %sv, align 8
  %tobool163 = icmp ne %struct.sv* %call162, null
  br i1 %tobool163, label %if.then164, label %if.else165

if.then164:                                       ; preds = %land.lhs.true161
  %134 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %135 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %134, %struct.sv* %135, i32 1538)
  %136 = load i32, i32* %n, align 4
  %137 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %num_code_blocks = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %137, i32 0, i32 39
  %138 = load i32, i32* %num_code_blocks, align 8
  %sub = sub nsw i32 %138, %136
  store i32 %sub, i32* %num_code_blocks, align 8
  store i32 0, i32* %n, align 4
  br label %if.end268

if.else165:                                       ; preds = %land.lhs.true161, %land.lhs.true153, %land.lhs.true147, %lor.lhs.false, %if.end124
  br label %while.cond

while.cond:                                       ; preds = %land.end216, %if.else165
  %139 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_flags166 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 2
  %140 = load i32, i32* %sv_flags166, align 4
  %and167 = and i32 %140, 2048
  %tobool168 = icmp ne i32 %and167, 0
  br i1 %tobool168, label %land.lhs.true169, label %land.end206

land.lhs.true169:                                 ; preds = %while.cond
  %141 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_u170 = getelementptr inbounds %struct.sv, %struct.sv* %141, i32 0, i32 3
  %svu_rv171 = bitcast %union.anon* %sv_u170 to %struct.sv**
  %142 = load %struct.sv*, %struct.sv** %svu_rv171, align 8
  %sv_flags172 = getelementptr inbounds %struct.sv, %struct.sv* %142, i32 0, i32 2
  %143 = load i32, i32* %sv_flags172, align 4
  %and173 = and i32 %143, 1048576
  %tobool174 = icmp ne i32 %and173, 0
  br i1 %tobool174, label %land.lhs.true175, label %land.end206

land.lhs.true175:                                 ; preds = %land.lhs.true169
  %144 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_u176 = getelementptr inbounds %struct.sv, %struct.sv* %144, i32 0, i32 3
  %svu_rv177 = bitcast %union.anon* %sv_u176 to %struct.sv**
  %145 = load %struct.sv*, %struct.sv** %svu_rv177, align 8
  %sv_any178 = getelementptr inbounds %struct.sv, %struct.sv* %145, i32 0, i32 0
  %146 = load i8*, i8** %sv_any178, align 8
  %147 = bitcast i8* %146 to %struct.xpvmg*
  %xmg_stash179 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %147, i32 0, i32 0
  %148 = load %struct.hv*, %struct.hv** %xmg_stash179, align 8
  %sv_flags180 = getelementptr inbounds %struct.hv, %struct.hv* %148, i32 0, i32 2
  %149 = load i32, i32* %sv_flags180, align 4
  %and181 = and i32 %149, 268435456
  %tobool182 = icmp ne i32 %and181, 0
  br i1 %tobool182, label %land.lhs.true183, label %land.end206

land.lhs.true183:                                 ; preds = %land.lhs.true175
  %150 = load %struct.sv*, %struct.sv** %msv, align 8
  %call184 = call %struct.sv* @Perl_amagic_call(%struct.sv* %150, %struct.sv* @PL_sv_undef, i32 10, i32 9)
  store %struct.sv* %call184, %struct.sv** %sv, align 8
  %tobool185 = icmp ne %struct.sv* %call184, null
  br i1 %tobool185, label %land.lhs.true186, label %land.end206

land.lhs.true186:                                 ; preds = %land.lhs.true183
  %151 = load %struct.sv*, %struct.sv** %sv, align 8
  %152 = load %struct.sv*, %struct.sv** %msv, align 8
  %cmp187 = icmp ne %struct.sv* %151, %152
  br i1 %cmp187, label %land.rhs189, label %land.end206

land.rhs189:                                      ; preds = %land.lhs.true186
  %153 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_flags190 = getelementptr inbounds %struct.sv, %struct.sv* %153, i32 0, i32 2
  %154 = load i32, i32* %sv_flags190, align 4
  %and191 = and i32 %154, 2048
  %tobool192 = icmp ne i32 %and191, 0
  br i1 %tobool192, label %land.lhs.true193, label %land.end204

land.lhs.true193:                                 ; preds = %land.rhs189
  %155 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags194 = getelementptr inbounds %struct.sv, %struct.sv* %155, i32 0, i32 2
  %156 = load i32, i32* %sv_flags194, align 4
  %and195 = and i32 %156, 2048
  %tobool196 = icmp ne i32 %and195, 0
  br i1 %tobool196, label %land.rhs197, label %land.end204

land.rhs197:                                      ; preds = %land.lhs.true193
  %157 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_u198 = getelementptr inbounds %struct.sv, %struct.sv* %157, i32 0, i32 3
  %svu_rv199 = bitcast %union.anon* %sv_u198 to %struct.sv**
  %158 = load %struct.sv*, %struct.sv** %svu_rv199, align 8
  %159 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u200 = getelementptr inbounds %struct.sv, %struct.sv* %159, i32 0, i32 3
  %svu_rv201 = bitcast %union.anon* %sv_u200 to %struct.sv**
  %160 = load %struct.sv*, %struct.sv** %svu_rv201, align 8
  %cmp202 = icmp eq %struct.sv* %158, %160
  br label %land.end204

land.end204:                                      ; preds = %land.rhs197, %land.lhs.true193, %land.rhs189
  %161 = phi i1 [ false, %land.lhs.true193 ], [ false, %land.rhs189 ], [ %cmp202, %land.rhs197 ]
  %lnot = xor i1 %161, true
  br label %land.end206

land.end206:                                      ; preds = %land.end204, %land.lhs.true186, %land.lhs.true183, %land.lhs.true175, %land.lhs.true169, %while.cond
  %162 = phi i1 [ false, %land.lhs.true186 ], [ false, %land.lhs.true183 ], [ false, %land.lhs.true175 ], [ false, %land.lhs.true169 ], [ false, %while.cond ], [ %lnot, %land.end204 ]
  br i1 %162, label %while.body, label %while.end

while.body:                                       ; preds = %land.end206
  %163 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %163, %struct.sv** %msv, align 8
  %164 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_flags208 = getelementptr inbounds %struct.sv, %struct.sv* %164, i32 0, i32 2
  %165 = load i32, i32* %sv_flags208, align 4
  %and209 = and i32 %165, 2097152
  %tobool210 = icmp ne i32 %and209, 0
  br i1 %tobool210, label %cond.true211, label %cond.false212

cond.true211:                                     ; preds = %while.body
  br i1 true, label %land.rhs213, label %land.end216

cond.false212:                                    ; preds = %while.body
  br i1 false, label %land.rhs213, label %land.end216

land.rhs213:                                      ; preds = %cond.false212, %cond.true211
  %166 = load %struct.sv*, %struct.sv** %msv, align 8
  %call214 = call i32 @Perl_mg_get(%struct.sv* %166)
  %tobool215 = icmp ne i32 %call214, 0
  br label %land.end216

land.end216:                                      ; preds = %land.rhs213, %cond.false212, %cond.true211
  %167 = phi i1 [ false, %cond.false212 ], [ false, %cond.true211 ], [ %tobool215, %land.rhs213 ]
  %land.ext217 = zext i1 %167 to i32
  br label %while.cond

while.end:                                        ; preds = %land.end206
  %168 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_flags218 = getelementptr inbounds %struct.sv, %struct.sv* %168, i32 0, i32 2
  %169 = load i32, i32* %sv_flags218, align 4
  %and219 = and i32 %169, 2048
  %tobool220 = icmp ne i32 %and219, 0
  br i1 %tobool220, label %land.lhs.true221, label %if.end231

land.lhs.true221:                                 ; preds = %while.end
  %170 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_u222 = getelementptr inbounds %struct.sv, %struct.sv* %170, i32 0, i32 3
  %svu_rv223 = bitcast %union.anon* %sv_u222 to %struct.sv**
  %171 = load %struct.sv*, %struct.sv** %svu_rv223, align 8
  %sv_flags224 = getelementptr inbounds %struct.sv, %struct.sv* %171, i32 0, i32 2
  %172 = load i32, i32* %sv_flags224, align 4
  %and225 = and i32 %172, 255
  %cmp226 = icmp eq i32 %and225, 8
  br i1 %cmp226, label %if.then228, label %if.end231

if.then228:                                       ; preds = %land.lhs.true221
  %173 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_u229 = getelementptr inbounds %struct.sv, %struct.sv* %173, i32 0, i32 3
  %svu_rv230 = bitcast %union.anon* %sv_u229 to %struct.sv**
  %174 = load %struct.sv*, %struct.sv** %svu_rv230, align 8
  store %struct.sv* %174, %struct.sv** %msv, align 8
  br label %if.end231

if.end231:                                        ; preds = %if.then228, %land.lhs.true221, %while.end
  %175 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %tobool232 = icmp ne %struct.sv* %175, null
  br i1 %tobool232, label %if.then233, label %if.else256

if.then233:                                       ; preds = %if.end231
  %176 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %sv_flags234 = getelementptr inbounds %struct.sv, %struct.sv* %176, i32 0, i32 2
  %177 = load i32, i32* %sv_flags234, align 4
  %and235 = and i32 %177, 430018304
  %cmp236 = icmp eq i32 %and235, 1024
  br i1 %cmp236, label %cond.true238, label %cond.false242

cond.true238:                                     ; preds = %if.then233
  %178 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %sv_any239 = getelementptr inbounds %struct.sv, %struct.sv* %178, i32 0, i32 0
  %179 = load i8*, i8** %sv_any239, align 8
  %180 = bitcast i8* %179 to %struct.xpv*
  %xpv_cur240 = getelementptr inbounds %struct.xpv, %struct.xpv* %180, i32 0, i32 2
  %181 = load i64, i64* %xpv_cur240, align 8
  store i64 %181, i64* %dlen, align 8
  %182 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %sv_u241 = getelementptr inbounds %struct.sv, %struct.sv* %182, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u241 to i8**
  %183 = load i8*, i8** %svu_pv, align 8
  br label %cond.end244

cond.false242:                                    ; preds = %if.then233
  %184 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %call243 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %184, i64* %dlen, i32 0)
  br label %cond.end244

cond.end244:                                      ; preds = %cond.false242, %cond.true238
  %cond245 = phi i8* [ %183, %cond.true238 ], [ %call243, %cond.false242 ]
  store i8* %cond245, i8** %dst, align 8
  %185 = load i64, i64* %dlen, align 8
  store i64 %185, i64* %orig_patlen, align 8
  %186 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_flags246 = getelementptr inbounds %struct.sv, %struct.sv* %186, i32 0, i32 2
  %187 = load i32, i32* %sv_flags246, align 4
  %and247 = and i32 %187, 536870912
  %tobool248 = icmp ne i32 %and247, 0
  br i1 %tobool248, label %land.lhs.true249, label %if.end255

land.lhs.true249:                                 ; preds = %cond.end244
  %188 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %sv_flags250 = getelementptr inbounds %struct.sv, %struct.sv* %188, i32 0, i32 2
  %189 = load i32, i32* %sv_flags250, align 4
  %and251 = and i32 %189, 536870912
  %tobool252 = icmp ne i32 %and251, 0
  br i1 %tobool252, label %if.end255, label %if.then253

if.then253:                                       ; preds = %land.lhs.true249
  %190 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %191 = load i32, i32* %n, align 4
  call void @S_pat_upgrade_to_utf8(%struct.RExC_state_t* %190, i8** %dst, i64* %dlen, i32 %191)
  %192 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %193 = load i8*, i8** %dst, align 8
  %194 = load i64, i64* %dlen, align 8
  call void @Perl_sv_setpvn(%struct.sv* %192, i8* %193, i64 %194)
  %195 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %sv_flags254 = getelementptr inbounds %struct.sv, %struct.sv* %195, i32 0, i32 2
  %196 = load i32, i32* %sv_flags254, align 4
  %or = or i32 %196, 536870912
  store i32 %or, i32* %sv_flags254, align 4
  br label %if.end255

if.end255:                                        ; preds = %if.then253, %land.lhs.true249, %cond.end244
  %197 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %198 = load %struct.sv*, %struct.sv** %msv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %197, %struct.sv* %198, i32 0)
  %199 = load %struct.sv*, %struct.sv** %msv, align 8
  store %struct.sv* %199, %struct.sv** %rx, align 8
  br label %if.end257

if.else256:                                       ; preds = %if.end231
  %200 = load %struct.sv*, %struct.sv** %msv, align 8
  store %struct.sv* %200, %struct.sv** %pat.addr, align 8
  br label %if.end257

if.end257:                                        ; preds = %if.else256, %if.end255
  %201 = load i8, i8* %code, align 1
  %tobool258 = trunc i8 %201 to i1
  br i1 %tobool258, label %if.then259, label %if.end267

if.then259:                                       ; preds = %if.end257
  %202 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %sv_any260 = getelementptr inbounds %struct.sv, %struct.sv* %202, i32 0, i32 0
  %203 = load i8*, i8** %sv_any260, align 8
  %204 = bitcast i8* %203 to %struct.xpv*
  %xpv_cur261 = getelementptr inbounds %struct.xpv, %struct.xpv* %204, i32 0, i32 2
  %205 = load i64, i64* %xpv_cur261, align 8
  %sub262 = sub i64 %205, 1
  %206 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks263 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %206, i32 0, i32 38
  %207 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks263, align 8
  %208 = load i32, i32* %n, align 4
  %sub264 = sub nsw i32 %208, 1
  %idxprom265 = sext i32 %sub264 to i64
  %arrayidx266 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %207, i64 %idxprom265
  %end = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx266, i32 0, i32 1
  store i64 %sub262, i64* %end, align 8
  br label %if.end267

if.end267:                                        ; preds = %if.then259, %if.end257
  br label %if.end268

if.end268:                                        ; preds = %if.end267, %if.then164
  %209 = load %struct.sv*, %struct.sv** %rx, align 8
  %tobool269 = icmp ne %struct.sv* %209, null
  br i1 %tobool269, label %land.lhs.true270, label %if.end335

land.lhs.true270:                                 ; preds = %if.end268
  %210 = load %struct.sv*, %struct.sv** %rx, align 8
  %sv_flags271 = getelementptr inbounds %struct.sv, %struct.sv* %210, i32 0, i32 2
  %211 = load i32, i32* %sv_flags271, align 4
  %and272 = and i32 %211, 255
  %cmp273 = icmp eq i32 %and272, 8
  br i1 %cmp273, label %land.lhs.true275, label %if.end335

land.lhs.true275:                                 ; preds = %land.lhs.true270
  %212 = load %struct.sv*, %struct.sv** %rx, align 8
  %213 = bitcast %struct.sv* %212 to %struct.p5rx*
  %call276 = call %struct.regexp* @S_ReANY(%struct.p5rx* %213)
  %engine = getelementptr inbounds %struct.regexp, %struct.regexp* %call276, i32 0, i32 4
  %214 = load %struct.regexp_engine*, %struct.regexp_engine** %engine, align 8
  %op_comp = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %214, i32 0, i32 11
  %215 = load %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)** %op_comp, align 8
  %tobool277 = icmp ne %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* %215, null
  br i1 %tobool277, label %if.then278, label %if.end335

if.then278:                                       ; preds = %land.lhs.true275
  %216 = load %struct.sv*, %struct.sv** %rx, align 8
  %217 = bitcast %struct.sv* %216 to %struct.p5rx*
  %call279 = call %struct.regexp* @S_ReANY(%struct.p5rx* %217)
  %pprivate = getelementptr inbounds %struct.regexp, %struct.regexp* %call279, i32 0, i32 14
  %218 = load i8*, i8** %pprivate, align 8
  %219 = bitcast i8* %218 to %struct.regexp_internal*
  store %struct.regexp_internal* %219, %struct.regexp_internal** %ri, align 8
  %220 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %num_code_blocks280 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %220, i32 0, i32 5
  %221 = load i32, i32* %num_code_blocks280, align 8
  %tobool281 = icmp ne i32 %221, 0
  br i1 %tobool281, label %if.then282, label %if.end334

if.then282:                                       ; preds = %if.then278
  %222 = load i8*, i8** %recompile_p.addr, align 8
  store i8 1, i8* %222, align 1
  %223 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks284 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %223, i32 0, i32 38
  %224 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks284, align 8
  %225 = bitcast %struct.reg_code_block* %224 to i8*
  %226 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %num_code_blocks285 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %226, i32 0, i32 39
  %227 = load i32, i32* %num_code_blocks285, align 8
  %228 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %num_code_blocks286 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %228, i32 0, i32 5
  %229 = load i32, i32* %num_code_blocks286, align 8
  %add287 = add nsw i32 %227, %229
  %conv288 = sext i32 %add287 to i64
  %mul289 = mul i64 %conv288, 32
  %call290 = call i8* @Perl_safesysrealloc(i8* %225, i64 %mul289)
  %230 = bitcast i8* %call290 to %struct.reg_code_block*
  %231 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks291 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %231, i32 0, i32 38
  store %struct.reg_code_block* %230, %struct.reg_code_block** %code_blocks291, align 8
  %232 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %num_code_blocks292 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %232, i32 0, i32 5
  %233 = load i32, i32* %num_code_blocks292, align 8
  %234 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %num_code_blocks293 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %234, i32 0, i32 39
  %235 = load i32, i32* %num_code_blocks293, align 8
  %add294 = add nsw i32 %235, %233
  store i32 %add294, i32* %num_code_blocks293, align 8
  store i32 0, i32* %i283, align 4
  br label %for.cond295

for.cond295:                                      ; preds = %for.inc331, %if.then282
  %236 = load i32, i32* %i283, align 4
  %237 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %num_code_blocks296 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %237, i32 0, i32 5
  %238 = load i32, i32* %num_code_blocks296, align 8
  %cmp297 = icmp slt i32 %236, %238
  br i1 %cmp297, label %for.body299, label %for.end333

for.body299:                                      ; preds = %for.cond295
  %239 = load i64, i64* %orig_patlen, align 8
  %240 = load %struct.sv*, %struct.sv** %rx, align 8
  %241 = bitcast %struct.sv* %240 to %struct.p5rx*
  %call301 = call %struct.regexp* @S_ReANY(%struct.p5rx* %241)
  %pre_prefix = getelementptr inbounds %struct.regexp, %struct.regexp* %call301, i32 0, i32 24
  %bf.load302 = load i16, i16* %pre_prefix, align 8
  %bf.clear303 = and i16 %bf.load302, 15
  %bf.cast304 = zext i16 %bf.clear303 to i32
  %conv305 = zext i32 %bf.cast304 to i64
  %add306 = add i64 %239, %conv305
  store i64 %add306, i64* %offset, align 8
  %242 = load %struct.regexp_internal*, %struct.regexp_internal** %ri, align 8
  %code_blocks307 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %242, i32 0, i32 4
  %243 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks307, align 8
  %244 = load i32, i32* %i283, align 4
  %idxprom308 = sext i32 %244 to i64
  %arrayidx309 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %243, i64 %idxprom308
  store %struct.reg_code_block* %arrayidx309, %struct.reg_code_block** %src, align 8
  %245 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks310 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %245, i32 0, i32 38
  %246 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks310, align 8
  %247 = load i32, i32* %n, align 4
  %idxprom311 = sext i32 %247 to i64
  %arrayidx312 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %246, i64 %idxprom311
  store %struct.reg_code_block* %arrayidx312, %struct.reg_code_block** %dst300, align 8
  %248 = load %struct.reg_code_block*, %struct.reg_code_block** %src, align 8
  %start313 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %248, i32 0, i32 0
  %249 = load i64, i64* %start313, align 8
  %250 = load i64, i64* %offset, align 8
  %add314 = add i64 %249, %250
  %251 = load %struct.reg_code_block*, %struct.reg_code_block** %dst300, align 8
  %start315 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %251, i32 0, i32 0
  store i64 %add314, i64* %start315, align 8
  %252 = load %struct.reg_code_block*, %struct.reg_code_block** %src, align 8
  %end316 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %252, i32 0, i32 1
  %253 = load i64, i64* %end316, align 8
  %254 = load i64, i64* %offset, align 8
  %add317 = add i64 %253, %254
  %255 = load %struct.reg_code_block*, %struct.reg_code_block** %dst300, align 8
  %end318 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %255, i32 0, i32 1
  store i64 %add317, i64* %end318, align 8
  %256 = load %struct.reg_code_block*, %struct.reg_code_block** %src, align 8
  %block319 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %256, i32 0, i32 2
  %257 = load %struct.op*, %struct.op** %block319, align 8
  %258 = load %struct.reg_code_block*, %struct.reg_code_block** %dst300, align 8
  %block320 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %258, i32 0, i32 2
  store %struct.op* %257, %struct.op** %block320, align 8
  %259 = load %struct.reg_code_block*, %struct.reg_code_block** %src, align 8
  %src_regex321 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %259, i32 0, i32 3
  %260 = load %struct.p5rx*, %struct.p5rx** %src_regex321, align 8
  %261 = bitcast %struct.p5rx* %260 to %struct.sv*
  %tobool322 = icmp ne %struct.sv* %261, null
  br i1 %tobool322, label %cond.true323, label %cond.false325

cond.true323:                                     ; preds = %for.body299
  %262 = load %struct.reg_code_block*, %struct.reg_code_block** %src, align 8
  %src_regex324 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %262, i32 0, i32 3
  %263 = load %struct.p5rx*, %struct.p5rx** %src_regex324, align 8
  br label %cond.end326

cond.false325:                                    ; preds = %for.body299
  %264 = load %struct.sv*, %struct.sv** %rx, align 8
  %265 = bitcast %struct.sv* %264 to %struct.p5rx*
  br label %cond.end326

cond.end326:                                      ; preds = %cond.false325, %cond.true323
  %cond327 = phi %struct.p5rx* [ %263, %cond.true323 ], [ %265, %cond.false325 ]
  %266 = bitcast %struct.p5rx* %cond327 to i8*
  %267 = bitcast i8* %266 to %struct.sv*
  %call328 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %267)
  %268 = bitcast %struct.sv* %call328 to %struct.p5rx*
  %269 = load %struct.reg_code_block*, %struct.reg_code_block** %dst300, align 8
  %src_regex329 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %269, i32 0, i32 3
  store %struct.p5rx* %268, %struct.p5rx** %src_regex329, align 8
  %270 = load i32, i32* %n, align 4
  %inc330 = add nsw i32 %270, 1
  store i32 %inc330, i32* %n, align 4
  br label %for.inc331

for.inc331:                                       ; preds = %cond.end326
  %271 = load i32, i32* %i283, align 4
  %inc332 = add nsw i32 %271, 1
  store i32 %inc332, i32* %i283, align 4
  br label %for.cond295

for.end333:                                       ; preds = %for.cond295
  br label %if.end334

if.end334:                                        ; preds = %for.end333, %if.then278
  br label %if.end335

if.end335:                                        ; preds = %if.end334, %land.lhs.true275, %land.lhs.true270, %if.end268
  br label %for.inc336

for.inc336:                                       ; preds = %if.end335, %if.end43
  %272 = load %struct.sv**, %struct.sv*** %svp, align 8
  %incdec.ptr337 = getelementptr inbounds %struct.sv*, %struct.sv** %272, i32 1
  store %struct.sv** %incdec.ptr337, %struct.sv*** %svp, align 8
  br label %for.cond

for.end338:                                       ; preds = %for.cond
  %273 = load i8, i8* %alloced, align 1
  %tobool339 = trunc i8 %273 to i1
  br i1 %tobool339, label %if.then340, label %if.end349

if.then340:                                       ; preds = %for.end338
  br label %do.body

do.body:                                          ; preds = %if.then340
  %274 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %sv_flags341 = getelementptr inbounds %struct.sv, %struct.sv* %274, i32 0, i32 2
  %275 = load i32, i32* %sv_flags341, align 4
  %and342 = and i32 %275, 4194304
  %tobool343 = icmp ne i32 %and342, 0
  br i1 %tobool343, label %cond.true344, label %cond.false345

cond.true344:                                     ; preds = %do.body
  br i1 true, label %if.then346, label %if.end348

cond.false345:                                    ; preds = %do.body
  br i1 false, label %if.then346, label %if.end348

if.then346:                                       ; preds = %cond.false345, %cond.true344
  %276 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  %call347 = call i32 @Perl_mg_set(%struct.sv* %276)
  br label %if.end348

if.end348:                                        ; preds = %if.then346, %cond.false345, %cond.true344
  br label %do.end

do.end:                                           ; preds = %if.end348
  br label %if.end349

if.end349:                                        ; preds = %do.end, %for.end338
  %277 = load %struct.sv*, %struct.sv** %pat.addr, align 8
  ret %struct.sv* %277
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_SvREFCNT_inc(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %2, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  ret %struct.sv* %3
}

declare dso_local void @Perl_safesysfree(i8*) #1

declare dso_local i8* @Perl_sv_2pv_flags(%struct.sv*, i64*, i32) #1

declare dso_local %struct.sv* @Perl_newSVpvn_flags(i8*, i64, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_has_runtime_code(%struct.RExC_state_t* %pRExC_state, i8* %pat, i64 %plen) #0 {
entry:
  %retval = alloca i1, align 1
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %pat.addr = alloca i8*, align 8
  %plen.addr = alloca i64, align 8
  %n = alloca i32, align 4
  %s = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store i64 %plen, i64* %plen.addr, align 8
  store i32 0, i32* %n, align 4
  store i64 0, i64* %s, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %s, align 8
  %1 = load i64, i64* %plen.addr, align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %n, align 4
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %num_code_blocks = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %3, i32 0, i32 39
  %4 = load i32, i32* %num_code_blocks, align 8
  %cmp1 = icmp slt i32 %2, %4
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load i64, i64* %s, align 8
  %6 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %6, i32 0, i32 38
  %7 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks, align 8
  %8 = load i32, i32* %n, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %7, i64 %idxprom
  %start = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx, i32 0, i32 0
  %9 = load i64, i64* %start, align 8
  %cmp2 = icmp eq i64 %5, %9
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks3 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %10, i32 0, i32 38
  %11 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks3, align 8
  %12 = load i32, i32* %n, align 4
  %idxprom4 = sext i32 %12 to i64
  %arrayidx5 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %11, i64 %idxprom4
  %end = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx5, i32 0, i32 1
  %13 = load i64, i64* %end, align 8
  store i64 %13, i64* %s, align 8
  %14 = load i32, i32* %n, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %n, align 4
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body
  %15 = load i8*, i8** %pat.addr, align 8
  %16 = load i64, i64* %s, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %15, i64 %16
  %17 = load i8, i8* %arrayidx6, align 1
  %conv = sext i8 %17 to i32
  %cmp7 = icmp eq i32 %conv, 40
  br i1 %cmp7, label %land.lhs.true9, label %if.end40

land.lhs.true9:                                   ; preds = %if.end
  %18 = load i64, i64* %s, align 8
  %add = add i64 %18, 2
  %19 = load i64, i64* %plen.addr, align 8
  %cmp10 = icmp ule i64 %add, %19
  br i1 %cmp10, label %land.lhs.true12, label %if.end40

land.lhs.true12:                                  ; preds = %land.lhs.true9
  %20 = load i8*, i8** %pat.addr, align 8
  %21 = load i64, i64* %s, align 8
  %add13 = add i64 %21, 1
  %arrayidx14 = getelementptr inbounds i8, i8* %20, i64 %add13
  %22 = load i8, i8* %arrayidx14, align 1
  %conv15 = sext i8 %22 to i32
  %cmp16 = icmp eq i32 %conv15, 63
  br i1 %cmp16, label %land.lhs.true18, label %if.end40

land.lhs.true18:                                  ; preds = %land.lhs.true12
  %23 = load i8*, i8** %pat.addr, align 8
  %24 = load i64, i64* %s, align 8
  %add19 = add i64 %24, 2
  %arrayidx20 = getelementptr inbounds i8, i8* %23, i64 %add19
  %25 = load i8, i8* %arrayidx20, align 1
  %conv21 = sext i8 %25 to i32
  %cmp22 = icmp eq i32 %conv21, 123
  br i1 %cmp22, label %if.then39, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true18
  %26 = load i64, i64* %s, align 8
  %add24 = add i64 %26, 2
  %27 = load i64, i64* %plen.addr, align 8
  %cmp25 = icmp ule i64 %add24, %27
  br i1 %cmp25, label %land.lhs.true27, label %if.end40

land.lhs.true27:                                  ; preds = %lor.lhs.false
  %28 = load i8*, i8** %pat.addr, align 8
  %29 = load i64, i64* %s, align 8
  %add28 = add i64 %29, 2
  %arrayidx29 = getelementptr inbounds i8, i8* %28, i64 %add28
  %30 = load i8, i8* %arrayidx29, align 1
  %conv30 = sext i8 %30 to i32
  %cmp31 = icmp eq i32 %conv30, 63
  br i1 %cmp31, label %land.lhs.true33, label %if.end40

land.lhs.true33:                                  ; preds = %land.lhs.true27
  %31 = load i8*, i8** %pat.addr, align 8
  %32 = load i64, i64* %s, align 8
  %add34 = add i64 %32, 3
  %arrayidx35 = getelementptr inbounds i8, i8* %31, i64 %add34
  %33 = load i8, i8* %arrayidx35, align 1
  %conv36 = sext i8 %33 to i32
  %cmp37 = icmp eq i32 %conv36, 123
  br i1 %cmp37, label %if.then39, label %if.end40

if.then39:                                        ; preds = %land.lhs.true33, %land.lhs.true18
  store i1 true, i1* %retval, align 1
  br label %return

if.end40:                                         ; preds = %land.lhs.true33, %land.lhs.true27, %lor.lhs.false, %land.lhs.true12, %land.lhs.true9, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end40, %if.then
  %34 = load i64, i64* %s, align 8
  %inc41 = add i64 %34, 1
  store i64 %inc41, i64* %s, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %for.end, %if.then39
  %35 = load i1, i1* %retval, align 1
  ret i1 %35
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.regexp* @S_ReANY(%struct.p5rx* %re) #0 {
entry:
  %re.addr = alloca %struct.p5rx*, align 8
  store %struct.p5rx* %re, %struct.p5rx** %re.addr, align 8
  %0 = load %struct.p5rx*, %struct.p5rx** %re.addr, align 8
  %sv_u = getelementptr inbounds %struct.p5rx, %struct.p5rx* %0, i32 0, i32 3
  %svu_rx = bitcast %union.anon.7* %sv_u to %struct.regexp**
  %1 = load %struct.regexp*, %struct.regexp** %svu_rx, align 8
  ret %struct.regexp* %1
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_regex_charset(i32* %flags, i32 %cs) #0 {
entry:
  %flags.addr = alloca i32*, align 8
  %cs.addr = alloca i32, align 4
  store i32* %flags, i32** %flags.addr, align 8
  store i32 %cs, i32* %cs.addr, align 4
  %0 = load i32*, i32** %flags.addr, align 8
  %1 = load i32, i32* %0, align 4
  %and = and i32 %1, -897
  store i32 %and, i32* %0, align 4
  %2 = load i32, i32* %cs.addr, align 4
  %shl = shl i32 %2, 7
  %3 = load i32*, i32** %flags.addr, align 8
  %4 = load i32, i32* %3, align 4
  %or = or i32 %4, %shl
  store i32 %or, i32* %3, align 4
  ret void
}

declare dso_local void @Perl_croak(i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_compile_runtime_code(%struct.RExC_state_t* %pRExC_state, i8* %pat, i64 %plen) #0 {
entry:
  %retval = alloca i1, align 1
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %pat.addr = alloca i8*, align 8
  %plen.addr = alloca i64, align 8
  %qr = alloca %struct.sv*, align 8
  %n = alloca i32, align 4
  %s = alloca i64, align 8
  %p = alloca i8*, align 8
  %newpat = alloca i8*, align 8
  %newlen = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %qr_ref = alloca %struct.sv*, align 8
  %sp = alloca %struct.sv**, align 8
  %next = alloca %struct.stackinfo*, align 8
  %errsv = alloca %struct.sv*, align 8
  %sp171 = alloca %struct.sv**, align 8
  %prev = alloca %struct.stackinfo*, align 8
  %r2 = alloca %struct.regexp_internal*, align 8
  %new_block = alloca %struct.reg_code_block*, align 8
  %dst = alloca %struct.reg_code_block*, align 8
  %r1 = alloca %struct.RExC_state_t*, align 8
  %i1 = alloca i32, align 4
  %i2 = alloca i32, align 4
  %src = alloca %struct.reg_code_block*, align 8
  %is_qr = alloca i8, align 1
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store i64 %plen, i64* %plen.addr, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %runtime_code_qr = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 46
  %1 = load %struct.sv*, %struct.sv** %runtime_code_qr, align 8
  %tobool = icmp ne %struct.sv* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %runtime_code_qr1 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 46
  %3 = load %struct.sv*, %struct.sv** %runtime_code_qr1, align 8
  store %struct.sv* %3, %struct.sv** %qr, align 8
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %runtime_code_qr2 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %4, i32 0, i32 46
  store %struct.sv* null, %struct.sv** %runtime_code_qr2, align 8
  br label %if.end201

if.else:                                          ; preds = %entry
  store i32 0, i32* %n, align 4
  %5 = load i64, i64* %plen.addr, align 8
  %add = add i64 %5, 6
  %conv = trunc i64 %add to i32
  store i32 %conv, i32* %newlen, align 4
  %6 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %6, %struct.sv*** %sp, align 8
  store i64 0, i64* %s, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %7 = load i64, i64* %s, align 8
  %8 = load i64, i64* %plen.addr, align 8
  %cmp = icmp ult i64 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i8*, i8** %pat.addr, align 8
  %10 = load i64, i64* %s, align 8
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv4 = sext i8 %11 to i32
  %cmp5 = icmp eq i32 %conv4, 39
  br i1 %cmp5, label %if.then11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %12 = load i8*, i8** %pat.addr, align 8
  %13 = load i64, i64* %s, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i64 %13
  %14 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %14 to i32
  %cmp9 = icmp eq i32 %conv8, 92
  br i1 %cmp9, label %if.then11, label %if.end

if.then11:                                        ; preds = %lor.lhs.false, %for.body
  %15 = load i32, i32* %newlen, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %newlen, align 4
  br label %if.end

if.end:                                           ; preds = %if.then11, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i64, i64* %s, align 8
  %inc12 = add i64 %16, 1
  store i64 %inc12, i64* %s, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %newlen, align 4
  %conv13 = sext i32 %17 to i64
  %mul = mul i64 %conv13, 1
  %call = call i8* @Perl_safesysmalloc(i64 %mul)
  store i8* %call, i8** %newpat, align 8
  %18 = load i8*, i8** %newpat, align 8
  store i8* %18, i8** %p, align 8
  %19 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  store i8 113, i8* %19, align 1
  %20 = load i8*, i8** %p, align 8
  %incdec.ptr14 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %incdec.ptr14, i8** %p, align 8
  store i8 114, i8* %20, align 1
  %21 = load i8*, i8** %p, align 8
  %incdec.ptr15 = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %incdec.ptr15, i8** %p, align 8
  store i8 39, i8* %21, align 1
  store i64 0, i64* %s, align 8
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc49, %for.end
  %22 = load i64, i64* %s, align 8
  %23 = load i64, i64* %plen.addr, align 8
  %cmp17 = icmp ult i64 %22, %23
  br i1 %cmp17, label %for.body19, label %for.end51

for.body19:                                       ; preds = %for.cond16
  %24 = load i32, i32* %n, align 4
  %25 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %num_code_blocks = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %25, i32 0, i32 39
  %26 = load i32, i32* %num_code_blocks, align 8
  %cmp20 = icmp slt i32 %24, %26
  br i1 %cmp20, label %land.lhs.true, label %if.end34

land.lhs.true:                                    ; preds = %for.body19
  %27 = load i64, i64* %s, align 8
  %28 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %28, i32 0, i32 38
  %29 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks, align 8
  %30 = load i32, i32* %n, align 4
  %idxprom = sext i32 %30 to i64
  %arrayidx22 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %29, i64 %idxprom
  %start = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx22, i32 0, i32 0
  %31 = load i64, i64* %start, align 8
  %cmp23 = icmp eq i64 %27, %31
  br i1 %cmp23, label %if.then25, label %if.end34

if.then25:                                        ; preds = %land.lhs.true
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then25
  %32 = load i64, i64* %s, align 8
  %33 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks26 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %33, i32 0, i32 38
  %34 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks26, align 8
  %35 = load i32, i32* %n, align 4
  %idxprom27 = sext i32 %35 to i64
  %arrayidx28 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %34, i64 %idxprom27
  %end = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx28, i32 0, i32 1
  %36 = load i64, i64* %end, align 8
  %cmp29 = icmp ule i64 %32, %36
  br i1 %cmp29, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %37 = load i8*, i8** %p, align 8
  %incdec.ptr31 = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %incdec.ptr31, i8** %p, align 8
  store i8 95, i8* %37, align 1
  %38 = load i64, i64* %s, align 8
  %inc32 = add i64 %38, 1
  store i64 %inc32, i64* %s, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %39 = load i64, i64* %s, align 8
  %dec = add i64 %39, -1
  store i64 %dec, i64* %s, align 8
  %40 = load i32, i32* %n, align 4
  %inc33 = add nsw i32 %40, 1
  store i32 %inc33, i32* %n, align 4
  br label %for.inc49

if.end34:                                         ; preds = %land.lhs.true, %for.body19
  %41 = load i8*, i8** %pat.addr, align 8
  %42 = load i64, i64* %s, align 8
  %arrayidx35 = getelementptr inbounds i8, i8* %41, i64 %42
  %43 = load i8, i8* %arrayidx35, align 1
  %conv36 = sext i8 %43 to i32
  %cmp37 = icmp eq i32 %conv36, 39
  br i1 %cmp37, label %if.then44, label %lor.lhs.false39

lor.lhs.false39:                                  ; preds = %if.end34
  %44 = load i8*, i8** %pat.addr, align 8
  %45 = load i64, i64* %s, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %44, i64 %45
  %46 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %46 to i32
  %cmp42 = icmp eq i32 %conv41, 92
  br i1 %cmp42, label %if.then44, label %if.end46

if.then44:                                        ; preds = %lor.lhs.false39, %if.end34
  %47 = load i8*, i8** %p, align 8
  %incdec.ptr45 = getelementptr inbounds i8, i8* %47, i32 1
  store i8* %incdec.ptr45, i8** %p, align 8
  store i8 92, i8* %47, align 1
  br label %if.end46

if.end46:                                         ; preds = %if.then44, %lor.lhs.false39
  %48 = load i8*, i8** %pat.addr, align 8
  %49 = load i64, i64* %s, align 8
  %arrayidx47 = getelementptr inbounds i8, i8* %48, i64 %49
  %50 = load i8, i8* %arrayidx47, align 1
  %51 = load i8*, i8** %p, align 8
  %incdec.ptr48 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %incdec.ptr48, i8** %p, align 8
  store i8 %50, i8* %51, align 1
  br label %for.inc49

for.inc49:                                        ; preds = %if.end46, %while.end
  %52 = load i64, i64* %s, align 8
  %inc50 = add i64 %52, 1
  store i64 %inc50, i64* %s, align 8
  br label %for.cond16

for.end51:                                        ; preds = %for.cond16
  %53 = load i8*, i8** %p, align 8
  %incdec.ptr52 = getelementptr inbounds i8, i8* %53, i32 1
  store i8* %incdec.ptr52, i8** %p, align 8
  store i8 39, i8* %53, align 1
  %54 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %pm_flags = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %54, i32 0, i32 1
  %55 = load i32, i32* %pm_flags, align 4
  %and = and i32 %55, 8
  %tobool53 = icmp ne i32 %and, 0
  br i1 %tobool53, label %if.then54, label %if.end56

if.then54:                                        ; preds = %for.end51
  %56 = load i8*, i8** %p, align 8
  %incdec.ptr55 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %incdec.ptr55, i8** %p, align 8
  store i8 120, i8* %56, align 1
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %for.end51
  %57 = load i8*, i8** %p, align 8
  %incdec.ptr57 = getelementptr inbounds i8, i8* %57, i32 1
  store i8* %incdec.ptr57, i8** %p, align 8
  store i8 0, i8* %57, align 1
  %58 = load i8*, i8** %newpat, align 8
  %59 = load i8*, i8** %p, align 8
  %60 = load i8*, i8** %newpat, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %59 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %60 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = sub nsw i64 %sub.ptr.sub, 1
  %61 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %61, i32 0, i32 25
  %62 = load i32, i32* %utf8, align 8
  %tobool58 = icmp ne i32 %62, 0
  %63 = zext i1 %tobool58 to i64
  %cond = select i1 %tobool58, i32 536870912, i32 0
  %call59 = call %struct.sv* @Perl_newSVpvn_flags(i8* %58, i64 %sub, i32 %cond)
  store %struct.sv* %call59, %struct.sv** %sv, align 8
  %64 = load i8*, i8** %newpat, align 8
  call void @Perl_safesysfree(i8* %64)
  call void @Perl_push_scope()
  call void @Perl_save_strlen(i64* @PL_tmps_floor)
  %65 = load i64, i64* @PL_tmps_ix, align 8
  store i64 %65, i64* @PL_tmps_floor, align 8
  call void @Perl_save_re_context()
  br label %do.body

do.body:                                          ; preds = %if.end56
  %66 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %66, i32 0, i32 3
  %67 = load %struct.stackinfo*, %struct.stackinfo** %si_next, align 8
  store %struct.stackinfo* %67, %struct.stackinfo** %next, align 8
  %68 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %tobool60 = icmp ne %struct.stackinfo* %68, null
  br i1 %tobool60, label %if.end64, label %if.then61

if.then61:                                        ; preds = %do.body
  %call62 = call %struct.stackinfo* @Perl_new_stackinfo(i32 32, i32 22)
  store %struct.stackinfo* %call62, %struct.stackinfo** %next, align 8
  %69 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %70 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_prev = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %70, i32 0, i32 2
  store %struct.stackinfo* %69, %struct.stackinfo** %si_prev, align 8
  %71 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %72 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next63 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %72, i32 0, i32 3
  store %struct.stackinfo* %71, %struct.stackinfo** %si_next63, align 8
  br label %if.end64

if.end64:                                         ; preds = %if.then61, %do.body
  %73 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_type = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %73, i32 0, i32 6
  store i32 9, i32* %si_type, align 8
  %74 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %74, i32 0, i32 4
  store i32 -1, i32* %si_cxix, align 8
  %75 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %75, i32 0, i32 0
  %76 = load %struct.av*, %struct.av** %si_stack, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %76, i32 0, i32 0
  %77 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %77, i32 0, i32 2
  store i64 0, i64* %xav_fill, align 8
  br label %do.body65

do.body65:                                        ; preds = %if.end64
  %78 = load %struct.sv**, %struct.sv*** %sp, align 8
  %79 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast66 = ptrtoint %struct.sv** %78 to i64
  %sub.ptr.rhs.cast67 = ptrtoint %struct.sv** %79 to i64
  %sub.ptr.sub68 = sub i64 %sub.ptr.lhs.cast66, %sub.ptr.rhs.cast67
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub68, 8
  %80 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any69 = getelementptr inbounds %struct.av, %struct.av* %80, i32 0, i32 0
  %81 = load %struct.xpvav*, %struct.xpvav** %sv_any69, align 8
  %xav_fill70 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %81, i32 0, i32 2
  store i64 %sub.ptr.div, i64* %xav_fill70, align 8
  %82 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack71 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %82, i32 0, i32 0
  %83 = load %struct.av*, %struct.av** %si_stack71, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %83, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u to %struct.sv***
  %84 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %84, %struct.sv*** @PL_stack_base, align 8
  %85 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %86 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack72 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %86, i32 0, i32 0
  %87 = load %struct.av*, %struct.av** %si_stack72, align 8
  %sv_any73 = getelementptr inbounds %struct.av, %struct.av* %87, i32 0, i32 0
  %88 = load %struct.xpvav*, %struct.xpvav** %sv_any73, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %88, i32 0, i32 3
  %89 = load i64, i64* %xav_max, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %85, i64 %89
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_max, align 8
  %90 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %91 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack74 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %91, i32 0, i32 0
  %92 = load %struct.av*, %struct.av** %si_stack74, align 8
  %sv_any75 = getelementptr inbounds %struct.av, %struct.av* %92, i32 0, i32 0
  %93 = load %struct.xpvav*, %struct.xpvav** %sv_any75, align 8
  %xav_fill76 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %93, i32 0, i32 2
  %94 = load i64, i64* %xav_fill76, align 8
  %add.ptr77 = getelementptr inbounds %struct.sv*, %struct.sv** %90, i64 %94
  store %struct.sv** %add.ptr77, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr77, %struct.sv*** %sp, align 8
  %95 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack78 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %95, i32 0, i32 0
  %96 = load %struct.av*, %struct.av** %si_stack78, align 8
  store %struct.av* %96, %struct.av** @PL_curstack, align 8
  br label %do.end

do.end:                                           ; preds = %do.body65
  %97 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  store %struct.stackinfo* %97, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end79

do.end79:                                         ; preds = %do.end
  %98 = load %struct.sv*, %struct.sv** %sv, align 8
  %call80 = call i32 @Perl_eval_sv(%struct.sv* %98, i32 2050)
  %99 = load %struct.sv*, %struct.sv** %sv, align 8
  %100 = bitcast %struct.sv* %99 to i8*
  %101 = bitcast i8* %100 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %101)
  %102 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %102, %struct.sv*** %sp, align 8
  %103 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr81 = getelementptr inbounds %struct.sv*, %struct.sv** %103, i32 -1
  store %struct.sv** %incdec.ptr81, %struct.sv*** %sp, align 8
  %104 = load %struct.sv*, %struct.sv** %103, align 8
  store %struct.sv* %104, %struct.sv** %qr_ref, align 8
  %105 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %105, %struct.sv*** @PL_stack_sp, align 8
  %106 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u82 = getelementptr inbounds %struct.gv, %struct.gv* %106, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u82 to %struct.gp**
  %107 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr83 = getelementptr inbounds %struct.gp, %struct.gp* %107, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr83, i32 0, i32 0
  %108 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool84 = icmp ne %struct.sv* %108, null
  br i1 %tobool84, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end79
  %109 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u85 = getelementptr inbounds %struct.gv, %struct.gv* %109, i32 0, i32 3
  %svu_gp86 = bitcast %union.anon.4* %sv_u85 to %struct.gp**
  %110 = load %struct.gp*, %struct.gp** %svu_gp86, align 8
  %add.ptr87 = getelementptr inbounds %struct.gp, %struct.gp* %110, i64 0
  %gp_sv88 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr87, i32 0, i32 0
  br label %cond.end

cond.false:                                       ; preds = %do.end79
  %111 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %call89 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %111, i32 0)
  %sv_u90 = getelementptr inbounds %struct.gv, %struct.gv* %call89, i32 0, i32 3
  %svu_gp91 = bitcast %union.anon.4* %sv_u90 to %struct.gp**
  %112 = load %struct.gp*, %struct.gp** %svu_gp91, align 8
  %add.ptr92 = getelementptr inbounds %struct.gp, %struct.gp* %112, i64 0
  %gp_sv93 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr92, i32 0, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond94 = phi %struct.sv** [ %gp_sv88, %cond.true ], [ %gp_sv93, %cond.false ]
  %113 = load %struct.sv*, %struct.sv** %cond94, align 8
  store %struct.sv* %113, %struct.sv** %errsv, align 8
  %114 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 2
  %115 = load i32, i32* %sv_flags, align 4
  %and95 = and i32 %115, 2097152
  %tobool96 = icmp ne i32 %and95, 0
  br i1 %tobool96, label %cond.true97, label %cond.false98

cond.true97:                                      ; preds = %cond.end
  br i1 true, label %cond.true99, label %cond.false102

cond.false98:                                     ; preds = %cond.end
  br i1 false, label %cond.true99, label %cond.false102

cond.true99:                                      ; preds = %cond.false98, %cond.true97
  %116 = load %struct.sv*, %struct.sv** %errsv, align 8
  %call100 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %116, i32 2)
  br i1 %call100, label %if.then165, label %if.end167

cond.false102:                                    ; preds = %cond.false98, %cond.true97
  %117 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags103 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 2
  %118 = load i32, i32* %sv_flags103, align 4
  %and104 = and i32 %118, 65280
  %tobool105 = icmp ne i32 %and104, 0
  br i1 %tobool105, label %cond.false117, label %lor.lhs.false106

lor.lhs.false106:                                 ; preds = %cond.false102
  %119 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags107 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 2
  %120 = load i32, i32* %sv_flags107, align 4
  %and108 = and i32 %120, 255
  %cmp109 = icmp eq i32 %and108, 8
  br i1 %cmp109, label %cond.false117, label %lor.lhs.false111

lor.lhs.false111:                                 ; preds = %lor.lhs.false106
  %121 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags112 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 2
  %122 = load i32, i32* %sv_flags112, align 4
  %and113 = and i32 %122, 16826623
  %cmp114 = icmp eq i32 %and113, 16777226
  br i1 %cmp114, label %cond.false117, label %cond.true116

cond.true116:                                     ; preds = %lor.lhs.false111
  br i1 false, label %if.then165, label %if.end167

cond.false117:                                    ; preds = %lor.lhs.false111, %lor.lhs.false106, %cond.false102
  %123 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags118 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 2
  %124 = load i32, i32* %sv_flags118, align 4
  %and119 = and i32 %124, 1024
  %tobool120 = icmp ne i32 %and119, 0
  br i1 %tobool120, label %cond.true121, label %cond.false137

cond.true121:                                     ; preds = %cond.false117
  %125 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_any122 = getelementptr inbounds %struct.sv, %struct.sv* %125, i32 0, i32 0
  %126 = load i8*, i8** %sv_any122, align 8
  %127 = bitcast i8* %126 to %struct.xpv*
  %tobool123 = icmp ne %struct.xpv* %127, null
  br i1 %tobool123, label %land.lhs.true124, label %if.end167

land.lhs.true124:                                 ; preds = %cond.true121
  %128 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_any125 = getelementptr inbounds %struct.sv, %struct.sv* %128, i32 0, i32 0
  %129 = load i8*, i8** %sv_any125, align 8
  %130 = bitcast i8* %129 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %130, i32 0, i32 2
  %131 = load i64, i64* %xpv_cur, align 8
  %cmp126 = icmp ugt i64 %131, 1
  br i1 %cmp126, label %if.then165, label %lor.lhs.false128

lor.lhs.false128:                                 ; preds = %land.lhs.true124
  %132 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_any129 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 0
  %133 = load i8*, i8** %sv_any129, align 8
  %134 = bitcast i8* %133 to %struct.xpv*
  %xpv_cur130 = getelementptr inbounds %struct.xpv, %struct.xpv* %134, i32 0, i32 2
  %135 = load i64, i64* %xpv_cur130, align 8
  %tobool131 = icmp ne i64 %135, 0
  br i1 %tobool131, label %land.lhs.true132, label %if.end167

land.lhs.true132:                                 ; preds = %lor.lhs.false128
  %136 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_u133 = getelementptr inbounds %struct.sv, %struct.sv* %136, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u133 to i8**
  %137 = load i8*, i8** %svu_pv, align 8
  %138 = load i8, i8* %137, align 1
  %conv134 = sext i8 %138 to i32
  %cmp135 = icmp ne i32 %conv134, 48
  br i1 %cmp135, label %if.then165, label %if.end167

cond.false137:                                    ; preds = %cond.false117
  %139 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags138 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 2
  %140 = load i32, i32* %sv_flags138, align 4
  %and139 = and i32 %140, 768
  %tobool140 = icmp ne i32 %and139, 0
  br i1 %tobool140, label %cond.true141, label %cond.false162

cond.true141:                                     ; preds = %cond.false137
  %141 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags142 = getelementptr inbounds %struct.sv, %struct.sv* %141, i32 0, i32 2
  %142 = load i32, i32* %sv_flags142, align 4
  %and143 = and i32 %142, 256
  %tobool144 = icmp ne i32 %and143, 0
  br i1 %tobool144, label %land.lhs.true145, label %lor.lhs.false149

land.lhs.true145:                                 ; preds = %cond.true141
  %143 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_any146 = getelementptr inbounds %struct.sv, %struct.sv* %143, i32 0, i32 0
  %144 = load i8*, i8** %sv_any146, align 8
  %145 = bitcast i8* %144 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %145, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %146 = load i64, i64* %xivu_iv, align 8
  %cmp147 = icmp ne i64 %146, 0
  br i1 %cmp147, label %if.then165, label %lor.lhs.false149

lor.lhs.false149:                                 ; preds = %land.lhs.true145, %cond.true141
  %147 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags150 = getelementptr inbounds %struct.sv, %struct.sv* %147, i32 0, i32 2
  %148 = load i32, i32* %sv_flags150, align 4
  %and151 = and i32 %148, 512
  %tobool152 = icmp ne i32 %and151, 0
  br i1 %tobool152, label %land.lhs.true153, label %if.end167

land.lhs.true153:                                 ; preds = %lor.lhs.false149
  %149 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_any154 = getelementptr inbounds %struct.sv, %struct.sv* %149, i32 0, i32 0
  %150 = load i8*, i8** %sv_any154, align 8
  %151 = bitcast i8* %150 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %151, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %152 = load double, double* %xnv_nv, align 8
  %cmp155 = fcmp uno double %152, %152
  br i1 %cmp155, label %if.then165, label %lor.lhs.false156

lor.lhs.false156:                                 ; preds = %land.lhs.true153
  %153 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_any157 = getelementptr inbounds %struct.sv, %struct.sv* %153, i32 0, i32 0
  %154 = load i8*, i8** %sv_any157, align 8
  %155 = bitcast i8* %154 to %struct.xpvnv*
  %xnv_u158 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %155, i32 0, i32 5
  %xnv_nv159 = bitcast %union._xnvu* %xnv_u158 to double*
  %156 = load double, double* %xnv_nv159, align 8
  %cmp160 = fcmp une double %156, 0.000000e+00
  br i1 %cmp160, label %if.then165, label %if.end167

cond.false162:                                    ; preds = %cond.false137
  %157 = load %struct.sv*, %struct.sv** %errsv, align 8
  %call163 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %157, i32 0)
  br i1 %call163, label %if.then165, label %if.end167

if.then165:                                       ; preds = %cond.false162, %lor.lhs.false156, %land.lhs.true153, %land.lhs.true145, %land.lhs.true132, %land.lhs.true124, %cond.true116, %cond.true99
  %158 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks166 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %158, i32 0, i32 38
  %159 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks166, align 8
  %160 = bitcast %struct.reg_code_block* %159 to i8*
  call void @Perl_safesysfree(i8* %160)
  %161 = load %struct.sv*, %struct.sv** %errsv, align 8
  %162 = bitcast %struct.sv* %161 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.208, i64 0, i64 0), i8* %162)
  br label %if.end167

if.end167:                                        ; preds = %if.then165, %cond.false162, %lor.lhs.false156, %lor.lhs.false149, %land.lhs.true132, %lor.lhs.false128, %cond.true121, %cond.true116, %cond.true99
  %163 = load %struct.sv*, %struct.sv** %qr_ref, align 8
  %sv_u168 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u168 to %struct.sv**
  %164 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %164, %struct.sv** %qr, align 8
  %165 = load %struct.sv*, %struct.sv** %qr, align 8
  %166 = bitcast %struct.sv* %165 to i8*
  %167 = bitcast i8* %166 to %struct.sv*
  %call169 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %167)
  br label %do.body170

do.body170:                                       ; preds = %if.end167
  %168 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %168, %struct.sv*** %sp171, align 8
  %169 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_prev172 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %169, i32 0, i32 2
  %170 = load %struct.stackinfo*, %struct.stackinfo** %si_prev172, align 8
  store %struct.stackinfo* %170, %struct.stackinfo** %prev, align 8
  %171 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %tobool173 = icmp ne %struct.stackinfo* %171, null
  br i1 %tobool173, label %if.end175, label %if.then174

if.then174:                                       ; preds = %do.body170
  call void @Perl_croak_popstack()
  br label %if.end175

if.end175:                                        ; preds = %if.then174, %do.body170
  br label %do.body176

do.body176:                                       ; preds = %if.end175
  %172 = load %struct.sv**, %struct.sv*** %sp171, align 8
  %173 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast177 = ptrtoint %struct.sv** %172 to i64
  %sub.ptr.rhs.cast178 = ptrtoint %struct.sv** %173 to i64
  %sub.ptr.sub179 = sub i64 %sub.ptr.lhs.cast177, %sub.ptr.rhs.cast178
  %sub.ptr.div180 = sdiv exact i64 %sub.ptr.sub179, 8
  %174 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any181 = getelementptr inbounds %struct.av, %struct.av* %174, i32 0, i32 0
  %175 = load %struct.xpvav*, %struct.xpvav** %sv_any181, align 8
  %xav_fill182 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %175, i32 0, i32 2
  store i64 %sub.ptr.div180, i64* %xav_fill182, align 8
  %176 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack183 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %176, i32 0, i32 0
  %177 = load %struct.av*, %struct.av** %si_stack183, align 8
  %sv_u184 = getelementptr inbounds %struct.av, %struct.av* %177, i32 0, i32 3
  %svu_array185 = bitcast %union.anon.3* %sv_u184 to %struct.sv***
  %178 = load %struct.sv**, %struct.sv*** %svu_array185, align 8
  store %struct.sv** %178, %struct.sv*** @PL_stack_base, align 8
  %179 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %180 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack186 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %180, i32 0, i32 0
  %181 = load %struct.av*, %struct.av** %si_stack186, align 8
  %sv_any187 = getelementptr inbounds %struct.av, %struct.av* %181, i32 0, i32 0
  %182 = load %struct.xpvav*, %struct.xpvav** %sv_any187, align 8
  %xav_max188 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %182, i32 0, i32 3
  %183 = load i64, i64* %xav_max188, align 8
  %add.ptr189 = getelementptr inbounds %struct.sv*, %struct.sv** %179, i64 %183
  store %struct.sv** %add.ptr189, %struct.sv*** @PL_stack_max, align 8
  %184 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %185 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack190 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %185, i32 0, i32 0
  %186 = load %struct.av*, %struct.av** %si_stack190, align 8
  %sv_any191 = getelementptr inbounds %struct.av, %struct.av* %186, i32 0, i32 0
  %187 = load %struct.xpvav*, %struct.xpvav** %sv_any191, align 8
  %xav_fill192 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %187, i32 0, i32 2
  %188 = load i64, i64* %xav_fill192, align 8
  %add.ptr193 = getelementptr inbounds %struct.sv*, %struct.sv** %184, i64 %188
  store %struct.sv** %add.ptr193, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr193, %struct.sv*** %sp171, align 8
  %189 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack194 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %189, i32 0, i32 0
  %190 = load %struct.av*, %struct.av** %si_stack194, align 8
  store %struct.av* %190, %struct.av** @PL_curstack, align 8
  br label %do.end195

do.end195:                                        ; preds = %do.body176
  %191 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  store %struct.stackinfo* %191, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end196

do.end196:                                        ; preds = %do.end195
  %192 = load i64, i64* @PL_tmps_ix, align 8
  %193 = load i64, i64* @PL_tmps_floor, align 8
  %cmp197 = icmp sgt i64 %192, %193
  br i1 %cmp197, label %if.then199, label %if.end200

if.then199:                                       ; preds = %do.end196
  call void @Perl_free_tmps()
  br label %if.end200

if.end200:                                        ; preds = %if.then199, %do.end196
  call void @Perl_pop_scope()
  br label %if.end201

if.end201:                                        ; preds = %if.end200, %if.then
  %194 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8202 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %194, i32 0, i32 25
  %195 = load i32, i32* %utf8202, align 8
  %tobool203 = icmp ne i32 %195, 0
  br i1 %tobool203, label %if.end210, label %land.lhs.true204

land.lhs.true204:                                 ; preds = %if.end201
  %196 = load %struct.sv*, %struct.sv** %qr, align 8
  %sv_flags205 = getelementptr inbounds %struct.sv, %struct.sv* %196, i32 0, i32 2
  %197 = load i32, i32* %sv_flags205, align 4
  %and206 = and i32 %197, 536870912
  %tobool207 = icmp ne i32 %and206, 0
  br i1 %tobool207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %land.lhs.true204
  %198 = load %struct.sv*, %struct.sv** %qr, align 8
  %199 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %runtime_code_qr209 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %199, i32 0, i32 46
  store %struct.sv* %198, %struct.sv** %runtime_code_qr209, align 8
  store i1 false, i1* %retval, align 1
  br label %return

if.end210:                                        ; preds = %land.lhs.true204, %if.end201
  %200 = load %struct.sv*, %struct.sv** %qr, align 8
  %201 = bitcast %struct.sv* %200 to %struct.p5rx*
  %call211 = call %struct.regexp* @S_ReANY(%struct.p5rx* %201)
  %pprivate = getelementptr inbounds %struct.regexp, %struct.regexp* %call211, i32 0, i32 14
  %202 = load i8*, i8** %pprivate, align 8
  %203 = bitcast i8* %202 to %struct.regexp_internal*
  store %struct.regexp_internal* %203, %struct.regexp_internal** %r2, align 8
  %204 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.RExC_state_t* %204, %struct.RExC_state_t** %r1, align 8
  store i32 0, i32* %i1, align 4
  store i32 0, i32* %i2, align 4
  %205 = load %struct.regexp_internal*, %struct.regexp_internal** %r2, align 8
  %num_code_blocks212 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %205, i32 0, i32 5
  %206 = load i32, i32* %num_code_blocks212, align 8
  %tobool213 = icmp ne i32 %206, 0
  br i1 %tobool213, label %if.end215, label %if.then214

if.then214:                                       ; preds = %if.end210
  %207 = load %struct.sv*, %struct.sv** %qr, align 8
  %208 = bitcast %struct.sv* %207 to i8*
  %209 = bitcast i8* %208 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %209)
  store i1 true, i1* %retval, align 1
  br label %return

if.end215:                                        ; preds = %if.end210
  %210 = load %struct.RExC_state_t*, %struct.RExC_state_t** %r1, align 8
  %num_code_blocks216 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %210, i32 0, i32 39
  %211 = load i32, i32* %num_code_blocks216, align 8
  %212 = load %struct.regexp_internal*, %struct.regexp_internal** %r2, align 8
  %num_code_blocks217 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %212, i32 0, i32 5
  %213 = load i32, i32* %num_code_blocks217, align 8
  %add218 = add nsw i32 %211, %213
  %conv219 = sext i32 %add218 to i64
  %mul220 = mul i64 %conv219, 32
  %call221 = call i8* @Perl_safesysmalloc(i64 %mul220)
  %214 = bitcast i8* %call221 to %struct.reg_code_block*
  store %struct.reg_code_block* %214, %struct.reg_code_block** %new_block, align 8
  %215 = load %struct.reg_code_block*, %struct.reg_code_block** %new_block, align 8
  store %struct.reg_code_block* %215, %struct.reg_code_block** %dst, align 8
  br label %while.cond222

while.cond222:                                    ; preds = %cond.end281, %if.end215
  %216 = load i32, i32* %i1, align 4
  %217 = load %struct.RExC_state_t*, %struct.RExC_state_t** %r1, align 8
  %num_code_blocks223 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %217, i32 0, i32 39
  %218 = load i32, i32* %num_code_blocks223, align 8
  %cmp224 = icmp slt i32 %216, %218
  br i1 %cmp224, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond222
  %219 = load i32, i32* %i2, align 4
  %220 = load %struct.regexp_internal*, %struct.regexp_internal** %r2, align 8
  %num_code_blocks226 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %220, i32 0, i32 5
  %221 = load i32, i32* %num_code_blocks226, align 8
  %cmp227 = icmp slt i32 %219, %221
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond222
  %222 = phi i1 [ true, %while.cond222 ], [ %cmp227, %lor.rhs ]
  br i1 %222, label %while.body229, label %while.end285

while.body229:                                    ; preds = %lor.end
  store i8 0, i8* %is_qr, align 1
  %223 = load i32, i32* %i1, align 4
  %224 = load %struct.RExC_state_t*, %struct.RExC_state_t** %r1, align 8
  %num_code_blocks230 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %224, i32 0, i32 39
  %225 = load i32, i32* %num_code_blocks230, align 8
  %cmp231 = icmp eq i32 %223, %225
  br i1 %cmp231, label %if.then233, label %if.else238

if.then233:                                       ; preds = %while.body229
  %226 = load %struct.regexp_internal*, %struct.regexp_internal** %r2, align 8
  %code_blocks234 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %226, i32 0, i32 4
  %227 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks234, align 8
  %228 = load i32, i32* %i2, align 4
  %inc235 = add nsw i32 %228, 1
  store i32 %inc235, i32* %i2, align 4
  %idxprom236 = sext i32 %228 to i64
  %arrayidx237 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %227, i64 %idxprom236
  store %struct.reg_code_block* %arrayidx237, %struct.reg_code_block** %src, align 8
  store i8 1, i8* %is_qr, align 1
  br label %if.end270

if.else238:                                       ; preds = %while.body229
  %229 = load i32, i32* %i2, align 4
  %230 = load %struct.regexp_internal*, %struct.regexp_internal** %r2, align 8
  %num_code_blocks239 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %230, i32 0, i32 5
  %231 = load i32, i32* %num_code_blocks239, align 8
  %cmp240 = icmp eq i32 %229, %231
  br i1 %cmp240, label %if.then242, label %if.else247

if.then242:                                       ; preds = %if.else238
  %232 = load %struct.RExC_state_t*, %struct.RExC_state_t** %r1, align 8
  %code_blocks243 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %232, i32 0, i32 38
  %233 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks243, align 8
  %234 = load i32, i32* %i1, align 4
  %inc244 = add nsw i32 %234, 1
  store i32 %inc244, i32* %i1, align 4
  %idxprom245 = sext i32 %234 to i64
  %arrayidx246 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %233, i64 %idxprom245
  store %struct.reg_code_block* %arrayidx246, %struct.reg_code_block** %src, align 8
  br label %if.end269

if.else247:                                       ; preds = %if.else238
  %235 = load %struct.RExC_state_t*, %struct.RExC_state_t** %r1, align 8
  %code_blocks248 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %235, i32 0, i32 38
  %236 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks248, align 8
  %237 = load i32, i32* %i1, align 4
  %idxprom249 = sext i32 %237 to i64
  %arrayidx250 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %236, i64 %idxprom249
  %start251 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx250, i32 0, i32 0
  %238 = load i64, i64* %start251, align 8
  %239 = load %struct.regexp_internal*, %struct.regexp_internal** %r2, align 8
  %code_blocks252 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %239, i32 0, i32 4
  %240 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks252, align 8
  %241 = load i32, i32* %i2, align 4
  %idxprom253 = sext i32 %241 to i64
  %arrayidx254 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %240, i64 %idxprom253
  %start255 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx254, i32 0, i32 0
  %242 = load i64, i64* %start255, align 8
  %cmp256 = icmp ult i64 %238, %242
  br i1 %cmp256, label %if.then258, label %if.else263

if.then258:                                       ; preds = %if.else247
  %243 = load %struct.RExC_state_t*, %struct.RExC_state_t** %r1, align 8
  %code_blocks259 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %243, i32 0, i32 38
  %244 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks259, align 8
  %245 = load i32, i32* %i1, align 4
  %inc260 = add nsw i32 %245, 1
  store i32 %inc260, i32* %i1, align 4
  %idxprom261 = sext i32 %245 to i64
  %arrayidx262 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %244, i64 %idxprom261
  store %struct.reg_code_block* %arrayidx262, %struct.reg_code_block** %src, align 8
  br label %if.end268

if.else263:                                       ; preds = %if.else247
  %246 = load %struct.regexp_internal*, %struct.regexp_internal** %r2, align 8
  %code_blocks264 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %246, i32 0, i32 4
  %247 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks264, align 8
  %248 = load i32, i32* %i2, align 4
  %inc265 = add nsw i32 %248, 1
  store i32 %inc265, i32* %i2, align 4
  %idxprom266 = sext i32 %248 to i64
  %arrayidx267 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %247, i64 %idxprom266
  store %struct.reg_code_block* %arrayidx267, %struct.reg_code_block** %src, align 8
  store i8 1, i8* %is_qr, align 1
  br label %if.end268

if.end268:                                        ; preds = %if.else263, %if.then258
  br label %if.end269

if.end269:                                        ; preds = %if.end268, %if.then242
  br label %if.end270

if.end270:                                        ; preds = %if.end269, %if.then233
  %249 = load %struct.reg_code_block*, %struct.reg_code_block** %src, align 8
  %start271 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %249, i32 0, i32 0
  %250 = load i64, i64* %start271, align 8
  %251 = load %struct.reg_code_block*, %struct.reg_code_block** %dst, align 8
  %start272 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %251, i32 0, i32 0
  store i64 %250, i64* %start272, align 8
  %252 = load %struct.reg_code_block*, %struct.reg_code_block** %src, align 8
  %end273 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %252, i32 0, i32 1
  %253 = load i64, i64* %end273, align 8
  %254 = load %struct.reg_code_block*, %struct.reg_code_block** %dst, align 8
  %end274 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %254, i32 0, i32 1
  store i64 %253, i64* %end274, align 8
  %255 = load %struct.reg_code_block*, %struct.reg_code_block** %src, align 8
  %block = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %255, i32 0, i32 2
  %256 = load %struct.op*, %struct.op** %block, align 8
  %257 = load %struct.reg_code_block*, %struct.reg_code_block** %dst, align 8
  %block275 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %257, i32 0, i32 2
  store %struct.op* %256, %struct.op** %block275, align 8
  %258 = load i8, i8* %is_qr, align 1
  %tobool276 = trunc i8 %258 to i1
  br i1 %tobool276, label %cond.true278, label %cond.false280

cond.true278:                                     ; preds = %if.end270
  %259 = load %struct.sv*, %struct.sv** %qr, align 8
  %260 = bitcast %struct.sv* %259 to i8*
  %261 = bitcast i8* %260 to %struct.sv*
  %call279 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %261)
  %262 = bitcast %struct.sv* %call279 to %struct.p5rx*
  br label %cond.end281

cond.false280:                                    ; preds = %if.end270
  %263 = load %struct.reg_code_block*, %struct.reg_code_block** %src, align 8
  %src_regex = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %263, i32 0, i32 3
  %264 = load %struct.p5rx*, %struct.p5rx** %src_regex, align 8
  br label %cond.end281

cond.end281:                                      ; preds = %cond.false280, %cond.true278
  %cond282 = phi %struct.p5rx* [ %262, %cond.true278 ], [ %264, %cond.false280 ]
  %265 = load %struct.reg_code_block*, %struct.reg_code_block** %dst, align 8
  %src_regex283 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %265, i32 0, i32 3
  store %struct.p5rx* %cond282, %struct.p5rx** %src_regex283, align 8
  %266 = load %struct.reg_code_block*, %struct.reg_code_block** %dst, align 8
  %incdec.ptr284 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %266, i32 1
  store %struct.reg_code_block* %incdec.ptr284, %struct.reg_code_block** %dst, align 8
  br label %while.cond222

while.end285:                                     ; preds = %lor.end
  %267 = load %struct.regexp_internal*, %struct.regexp_internal** %r2, align 8
  %num_code_blocks286 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %267, i32 0, i32 5
  %268 = load i32, i32* %num_code_blocks286, align 8
  %269 = load %struct.RExC_state_t*, %struct.RExC_state_t** %r1, align 8
  %num_code_blocks287 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %269, i32 0, i32 39
  %270 = load i32, i32* %num_code_blocks287, align 8
  %add288 = add nsw i32 %270, %268
  store i32 %add288, i32* %num_code_blocks287, align 8
  %271 = load %struct.RExC_state_t*, %struct.RExC_state_t** %r1, align 8
  %code_blocks289 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %271, i32 0, i32 38
  %272 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks289, align 8
  %273 = bitcast %struct.reg_code_block* %272 to i8*
  call void @Perl_safesysfree(i8* %273)
  %274 = load %struct.reg_code_block*, %struct.reg_code_block** %new_block, align 8
  %275 = load %struct.RExC_state_t*, %struct.RExC_state_t** %r1, align 8
  %code_blocks290 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %275, i32 0, i32 38
  store %struct.reg_code_block* %274, %struct.reg_code_block** %code_blocks290, align 8
  %276 = load %struct.sv*, %struct.sv** %qr, align 8
  %277 = bitcast %struct.sv* %276 to i8*
  %278 = bitcast i8* %277 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %278)
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %while.end285, %if.then214, %if.then208
  %279 = load i1, i1* %retval, align 1
  ret i1 %279
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_pat_upgrade_to_utf8(%struct.RExC_state_t* %pRExC_state, i8** %pat_p, i64* %plen_p, i32 %num_code_blocks) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %pat_p.addr = alloca i8**, align 8
  %plen_p.addr = alloca i64*, align 8
  %num_code_blocks.addr = alloca i32, align 4
  %src = alloca i8*, align 8
  %dst = alloca i8*, align 8
  %d = alloca i8*, align 8
  %n = alloca i32, align 4
  %s = alloca i64, align 8
  %do_end = alloca i8, align 1
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i8** %pat_p, i8*** %pat_p.addr, align 8
  store i64* %plen_p, i64** %plen_p.addr, align 8
  store i32 %num_code_blocks, i32* %num_code_blocks.addr, align 4
  %0 = load i8**, i8*** %pat_p.addr, align 8
  %1 = load i8*, i8** %0, align 8
  store i8* %1, i8** %src, align 8
  store i32 0, i32* %n, align 4
  store i64 0, i64* %s, align 8
  store i8 0, i8* %do_end, align 1
  %2 = load i64*, i64** %plen_p.addr, align 8
  %3 = load i64, i64* %2, align 8
  %mul = mul i64 %3, 2
  %add = add i64 %mul, 1
  %mul1 = mul i64 %add, 1
  %call = call i8* @Perl_safesysmalloc(i64 %mul1)
  store i8* %call, i8** %dst, align 8
  %4 = load i8*, i8** %dst, align 8
  store i8* %4, i8** %d, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end26, %entry
  %5 = load i64, i64* %s, align 8
  %6 = load i64*, i64** %plen_p.addr, align 8
  %7 = load i64, i64* %6, align 8
  %cmp = icmp ult i64 %5, %7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i8*, i8** %src, align 8
  %9 = load i64, i64* %s, align 8
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 %9
  %10 = load i8, i8* %arrayidx, align 1
  call void @S_append_utf8_from_native_byte(i8 zeroext %10, i8** %d)
  %11 = load i32, i32* %n, align 4
  %12 = load i32, i32* %num_code_blocks.addr, align 4
  %cmp2 = icmp slt i32 %11, %12
  br i1 %cmp2, label %if.then, label %if.end26

if.then:                                          ; preds = %while.body
  %13 = load i8, i8* %do_end, align 1
  %tobool = trunc i8 %13 to i1
  br i1 %tobool, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %14 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %14, i32 0, i32 38
  %15 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks, align 8
  %16 = load i32, i32* %n, align 4
  %idxprom = sext i32 %16 to i64
  %arrayidx3 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %15, i64 %idxprom
  %start = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx3, i32 0, i32 0
  %17 = load i64, i64* %start, align 8
  %18 = load i64, i64* %s, align 8
  %cmp4 = icmp eq i64 %17, %18
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %land.lhs.true
  %19 = load i8*, i8** %d, align 8
  %20 = load i8*, i8** %dst, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %19 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %20 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = sub nsw i64 %sub.ptr.sub, 1
  %21 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks6 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %21, i32 0, i32 38
  %22 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks6, align 8
  %23 = load i32, i32* %n, align 4
  %idxprom7 = sext i32 %23 to i64
  %arrayidx8 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %22, i64 %idxprom7
  %start9 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx8, i32 0, i32 0
  store i64 %sub, i64* %start9, align 8
  store i8 1, i8* %do_end, align 1
  br label %if.end25

if.else:                                          ; preds = %land.lhs.true, %if.then
  %24 = load i8, i8* %do_end, align 1
  %tobool10 = trunc i8 %24 to i1
  br i1 %tobool10, label %land.lhs.true11, label %if.end

land.lhs.true11:                                  ; preds = %if.else
  %25 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks12 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %25, i32 0, i32 38
  %26 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks12, align 8
  %27 = load i32, i32* %n, align 4
  %idxprom13 = sext i32 %27 to i64
  %arrayidx14 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %26, i64 %idxprom13
  %end = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx14, i32 0, i32 1
  %28 = load i64, i64* %end, align 8
  %29 = load i64, i64* %s, align 8
  %cmp15 = icmp eq i64 %28, %29
  br i1 %cmp15, label %if.then16, label %if.end

if.then16:                                        ; preds = %land.lhs.true11
  %30 = load i8*, i8** %d, align 8
  %31 = load i8*, i8** %dst, align 8
  %sub.ptr.lhs.cast17 = ptrtoint i8* %30 to i64
  %sub.ptr.rhs.cast18 = ptrtoint i8* %31 to i64
  %sub.ptr.sub19 = sub i64 %sub.ptr.lhs.cast17, %sub.ptr.rhs.cast18
  %sub20 = sub nsw i64 %sub.ptr.sub19, 1
  %32 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks21 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %32, i32 0, i32 38
  %33 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks21, align 8
  %34 = load i32, i32* %n, align 4
  %idxprom22 = sext i32 %34 to i64
  %arrayidx23 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %33, i64 %idxprom22
  %end24 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx23, i32 0, i32 1
  store i64 %sub20, i64* %end24, align 8
  store i8 0, i8* %do_end, align 1
  %35 = load i32, i32* %n, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then16, %land.lhs.true11, %if.else
  br label %if.end25

if.end25:                                         ; preds = %if.end, %if.then5
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %while.body
  %36 = load i64, i64* %s, align 8
  %inc27 = add i64 %36, 1
  store i64 %inc27, i64* %s, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %37 = load i8*, i8** %d, align 8
  store i8 0, i8* %37, align 1
  %38 = load i8*, i8** %d, align 8
  %39 = load i8*, i8** %dst, align 8
  %sub.ptr.lhs.cast28 = ptrtoint i8* %38 to i64
  %sub.ptr.rhs.cast29 = ptrtoint i8* %39 to i64
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast28, %sub.ptr.rhs.cast29
  %40 = load i64*, i64** %plen_p.addr, align 8
  store i64 %sub.ptr.sub30, i64* %40, align 8
  %41 = load i8*, i8** %dst, align 8
  %42 = load i8**, i8*** %pat_p.addr, align 8
  store i8* %41, i8** %42, align 8
  %43 = load i8**, i8*** %pat_p.addr, align 8
  %44 = load i8*, i8** %43, align 8
  call void @Perl_save_pushptr(i8* %44, i32 10)
  %45 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %45, i32 0, i32 25
  store i32 1, i32* %utf8, align 8
  %46 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %orig_utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %46, i32 0, i32 26
  store i32 1, i32* %orig_utf8, align 4
  ret void
}

declare dso_local %struct.sv* @Perl_newSV_type(i32) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.regnode* @S_reg(%struct.RExC_state_t* %pRExC_state, i32 %paren, i32* %flagp, i32 %depth) #0 {
entry:
  %retval = alloca %struct.regnode*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %paren.addr = alloca i32, align 4
  %flagp.addr = alloca i32*, align 8
  %depth.addr = alloca i32, align 4
  %ret = alloca %struct.regnode*, align 8
  %br = alloca %struct.regnode*, align 8
  %lastbr = alloca %struct.regnode*, align 8
  %ender = alloca %struct.regnode*, align 8
  %parno = alloca i32, align 4
  %flags = alloca i32, align 4
  %oregflags = alloca i32, align 4
  %have_branch = alloca i8, align 1
  %is_open = alloca i8, align 1
  %freeze_paren = alloca i32, align 4
  %after_freeze = alloca i32, align 4
  %num = alloca i32, align 4
  %parse_start = alloca i8*, align 8
  %oregcomp_parse = alloca i8*, align 8
  %has_intervening_patws = alloca i8, align 1
  %start_verb = alloca i8*, align 8
  %verb_len = alloca i64, align 8
  %start_arg = alloca i8*, align 8
  %op = alloca i8, align 1
  %argok = alloca i32, align 4
  %internal_argval = alloca i32, align 4
  %offset = alloca i64, align 8
  %offset99 = alloca i64, align 8
  %offset155 = alloca i64, align 8
  %offset267 = alloca i64, align 8
  %offset325 = alloca i64, align 8
  %offset371 = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %offset447 = alloca i64, align 8
  %is_logical = alloca i8, align 1
  %seqstart = alloca i8*, align 8
  %endptr = alloca i8*, align 8
  %offset503 = alloca i64, align 8
  %name_start = alloca i8*, align 8
  %num561 = alloca i32, align 4
  %sv_dat = alloca %struct.sv*, align 8
  %offset586 = alloca i64, align 8
  %offset703 = alloca i64, align 8
  %name_start750 = alloca i8*, align 8
  %svname = alloca %struct.sv*, align 8
  %offset777 = alloca i64, align 8
  %he_str = alloca %struct.he*, align 8
  %sv_dat820 = alloca %struct.sv*, align 8
  %count = alloca i64, align 8
  %pv = alloca i32*, align 8
  %i = alloca i64, align 8
  %offset953 = alloca i64, align 8
  %ellipses = alloca i8*, align 8
  %len = alloca i64, align 8
  %sv_dat1023 = alloca %struct.sv*, align 8
  %offset1056 = alloca i64, align 8
  %offset1117 = alloca i64, align 8
  %is_neg = alloca i8, align 1
  %unum = alloca i64, align 8
  %offset1212 = alloca i64, align 8
  %offset1268 = alloca i64, align 8
  %offset1334 = alloca i64, align 8
  %offset1406 = alloca i64, align 8
  %n = alloca i32, align 4
  %cb = alloca %struct.reg_code_block*, align 8
  %ellipses1487 = alloca i8*, align 8
  %len1488 = alloca i64, align 8
  %ellipses1514 = alloca i8*, align 8
  %len1515 = alloca i64, align 8
  %o = alloca %struct.op*, align 8
  %eval = alloca %struct.regnode*, align 8
  %is_define = alloca i32, align 4
  %DEFINE_len = alloca i32, align 4
  %flag = alloca i32, align 4
  %tail = alloca %struct.regnode*, align 8
  %ch = alloca i8, align 1
  %name_start1668 = alloca i8*, align 8
  %num1671 = alloca i32, align 4
  %sv_dat1672 = alloca %struct.sv*, align 8
  %offset1698 = alloca i64, align 8
  %uv = alloca i64, align 8
  %sv_dat1814 = alloca %struct.sv*, align 8
  %c = alloca i8, align 1
  %tmp = alloca i8*, align 8
  %uv1846 = alloca i64, align 8
  %offset1888 = alloca i64, align 8
  %ellipses1937 = alloca i8*, align 8
  %len1938 = alloca i64, align 8
  %offset1988 = alloca i64, align 8
  %ellipses2035 = alloca i8*, align 8
  %len2036 = alloca i64, align 8
  %offset2089 = alloca i64, align 8
  %offset2135 = alloca i64, align 8
  %offset2214 = alloca i64, align 8
  %offset2264 = alloca i64, align 8
  %ellipses2366 = alloca i8*, align 8
  %len2367 = alloca i64, align 8
  %ellipses2484 = alloca i8*, align 8
  %len2485 = alloca i64, align 8
  %is_nothing = alloca i8, align 1
  %op2575 = alloca i8, align 1
  %opt = alloca %struct.regnode*, align 8
  %p = alloca i8*, align 8
  %node = alloca i8, align 1
  %flag2659 = alloca i32, align 4
  %offset2700 = alloca i64, align 8
  %offset2761 = alloca i64, align 8
  %ellipses2799 = alloca i8*, align 8
  %len2800 = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i32 %paren, i32* %paren.addr, align 4
  store i32* %flagp, i32** %flagp.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  store %struct.regnode* null, %struct.regnode** %ender, align 8
  store i32 0, i32* %parno, align 4
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 0
  %1 = load i32, i32* %flags1, align 8
  store i32 %1, i32* %oregflags, align 4
  store i8 0, i8* %have_branch, align 1
  store i8 0, i8* %is_open, align 1
  store i32 0, i32* %freeze_paren, align 4
  store i32 0, i32* %after_freeze, align 4
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 8
  %3 = load i8*, i8** %parse, align 8
  store i8* %3, i8** %parse_start, align 8
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %4, i32 0, i32 8
  %5 = load i8*, i8** %parse2, align 8
  store i8* %5, i8** %oregcomp_parse, align 8
  %6 = load i32*, i32** %flagp.addr, align 8
  store i32 0, i32* %6, align 4
  %7 = load i32, i32* %paren.addr, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.then, label %if.else2353

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %paren.addr, align 4
  %cmp = icmp eq i32 %8, 2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then
  %9 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse3 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %9, i32 0, i32 8
  %10 = load i8*, i8** %parse3, align 8
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 -1
  %11 = load i8, i8* %add.ptr, align 1
  %conv = sext i8 %11 to i32
  %cmp4 = icmp ne i32 %conv, 40
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %12 = phi i1 [ false, %if.then ], [ %cmp4, %land.rhs ]
  %frombool = zext i1 %12 to i8
  store i8 %frombool, i8* %has_intervening_patws, align 1
  %13 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse6 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %13, i32 0, i32 8
  %14 = load i8*, i8** %parse6, align 8
  %15 = load i8, i8* %14, align 1
  %conv7 = sext i8 %15 to i32
  %cmp8 = icmp eq i32 %conv7, 42
  br i1 %cmp8, label %if.then10, label %if.else483

if.then10:                                        ; preds = %land.end
  %16 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse11 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %16, i32 0, i32 8
  %17 = load i8*, i8** %parse11, align 8
  store i8* %17, i8** %start_verb, align 8
  store i64 0, i64* %verb_len, align 8
  store i8* null, i8** %start_arg, align 8
  store i8 0, i8* %op, align 1
  store i32 1, i32* %argok, align 4
  store i32 0, i32* %internal_argval, align 4
  %18 = load i8, i8* %has_intervening_patws, align 1
  %tobool12 = trunc i8 %18 to i1
  br i1 %tobool12, label %if.then13, label %if.end42

if.then13:                                        ; preds = %if.then10
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse14 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %19, i32 0, i32 8
  %20 = load i8*, i8** %parse14, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %incdec.ptr, i8** %parse14, align 8
  br label %do.body

do.body:                                          ; preds = %if.then13
  %21 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %21, i32 0, i32 12
  %22 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %23 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %23, i32 0, i32 13
  %24 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp15 = icmp eq %struct.regnode* %22, %24
  br i1 %cmp15, label %if.end, label %if.then17

if.then17:                                        ; preds = %do.body
  %25 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %25, i32 0, i32 3
  %26 = load %struct.p5rx*, %struct.p5rx** %rx_sv, align 8
  %27 = bitcast %struct.p5rx* %26 to i8*
  %28 = bitcast i8* %27 to %struct.sv*
  %29 = bitcast %struct.sv* %28 to i8*
  call void @Perl_save_pushptr(i8* %29, i32 11)
  br label %if.end

if.end:                                           ; preds = %if.then17, %do.body
  br label %do.body18

do.body18:                                        ; preds = %if.end
  %30 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse19 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %30, i32 0, i32 8
  %31 = load i8*, i8** %parse19, align 8
  %32 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %32, i32 0, i32 7
  %33 = load i8*, i8** %end, align 8
  %cmp20 = icmp ugt i8* %31, %33
  br i1 %cmp20, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body18
  %34 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end22 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %34, i32 0, i32 7
  %35 = load i8*, i8** %end22, align 8
  br label %cond.end

cond.false:                                       ; preds = %do.body18
  %36 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse23 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %36, i32 0, i32 8
  %37 = load i8*, i8** %parse23, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %35, %cond.true ], [ %37, %cond.false ]
  %38 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %38, i32 0, i32 2
  %39 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %cond to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %39 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %offset, align 8
  %40 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %40, i32 0, i32 25
  %41 = load i32, i32* %utf8, align 8
  %tobool24 = icmp ne i32 %41, 0
  %42 = zext i1 %tobool24 to i64
  %cond25 = select i1 %tobool24, i32 1, i32 0
  %tobool26 = icmp ne i32 %cond25, 0
  %43 = zext i1 %tobool26 to i64
  %cond27 = select i1 %tobool26, i32 1, i32 0
  %44 = load i64, i64* %offset, align 8
  %45 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp28 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %45, i32 0, i32 2
  %46 = load i8*, i8** %precomp28, align 8
  %47 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf829 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %47, i32 0, i32 25
  %48 = load i32, i32* %utf829, align 8
  %tobool30 = icmp ne i32 %48, 0
  %49 = zext i1 %tobool30 to i64
  %cond31 = select i1 %tobool30, i32 1, i32 0
  %tobool32 = icmp ne i32 %cond31, 0
  %50 = zext i1 %tobool32 to i64
  %cond33 = select i1 %tobool32, i32 1, i32 0
  %51 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end34 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %51, i32 0, i32 7
  %52 = load i8*, i8** %end34, align 8
  %53 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp35 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %53, i32 0, i32 2
  %54 = load i8*, i8** %precomp35, align 8
  %sub.ptr.lhs.cast36 = ptrtoint i8* %52 to i64
  %sub.ptr.rhs.cast37 = ptrtoint i8* %54 to i64
  %sub.ptr.sub38 = sub i64 %sub.ptr.lhs.cast36, %sub.ptr.rhs.cast37
  %55 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %sub.ptr.sub38, %55
  %56 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp39 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %56, i32 0, i32 2
  %57 = load i8*, i8** %precomp39, align 8
  %58 = load i64, i64* %offset, align 8
  %add.ptr40 = getelementptr inbounds i8, i8* %57, i64 %58
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.228, i64 0, i64 0), i32 %cond27, i64 %44, i8* %46, i32 %cond33, i64 %sub, i8* %add.ptr40)
  br label %do.end

do.end:                                           ; preds = %cond.end
  br label %do.end41

do.end41:                                         ; preds = %do.end
  br label %if.end42

if.end42:                                         ; preds = %do.end41, %if.then10
  br label %while.cond

while.cond:                                       ; preds = %if.end59, %if.end42
  %59 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse43 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %59, i32 0, i32 8
  %60 = load i8*, i8** %parse43, align 8
  %61 = load i8, i8* %60, align 1
  %conv44 = sext i8 %61 to i32
  %tobool45 = icmp ne i32 %conv44, 0
  br i1 %tobool45, label %land.rhs46, label %land.end51

land.rhs46:                                       ; preds = %while.cond
  %62 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse47 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %62, i32 0, i32 8
  %63 = load i8*, i8** %parse47, align 8
  %64 = load i8, i8* %63, align 1
  %conv48 = sext i8 %64 to i32
  %cmp49 = icmp ne i32 %conv48, 41
  br label %land.end51

land.end51:                                       ; preds = %land.rhs46, %while.cond
  %65 = phi i1 [ false, %while.cond ], [ %cmp49, %land.rhs46 ]
  br i1 %65, label %while.body, label %while.end

while.body:                                       ; preds = %land.end51
  %66 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse52 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %66, i32 0, i32 8
  %67 = load i8*, i8** %parse52, align 8
  %68 = load i8, i8* %67, align 1
  %conv53 = sext i8 %68 to i32
  %cmp54 = icmp eq i32 %conv53, 58
  br i1 %cmp54, label %if.then56, label %if.end59

if.then56:                                        ; preds = %while.body
  %69 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse57 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %69, i32 0, i32 8
  %70 = load i8*, i8** %parse57, align 8
  %add.ptr58 = getelementptr inbounds i8, i8* %70, i64 1
  store i8* %add.ptr58, i8** %start_arg, align 8
  br label %while.end

if.end59:                                         ; preds = %while.body
  %71 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse60 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %71, i32 0, i32 8
  %72 = load i8*, i8** %parse60, align 8
  %incdec.ptr61 = getelementptr inbounds i8, i8* %72, i32 1
  store i8* %incdec.ptr61, i8** %parse60, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then56, %land.end51
  %73 = load i8*, i8** %start_verb, align 8
  %incdec.ptr62 = getelementptr inbounds i8, i8* %73, i32 1
  store i8* %incdec.ptr62, i8** %start_verb, align 8
  %74 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse63 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %74, i32 0, i32 8
  %75 = load i8*, i8** %parse63, align 8
  %76 = load i8*, i8** %start_verb, align 8
  %sub.ptr.lhs.cast64 = ptrtoint i8* %75 to i64
  %sub.ptr.rhs.cast65 = ptrtoint i8* %76 to i64
  %sub.ptr.sub66 = sub i64 %sub.ptr.lhs.cast64, %sub.ptr.rhs.cast65
  store i64 %sub.ptr.sub66, i64* %verb_len, align 8
  %77 = load i8*, i8** %start_arg, align 8
  %tobool67 = icmp ne i8* %77, null
  br i1 %tobool67, label %if.then68, label %if.else

if.then68:                                        ; preds = %while.end
  %78 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse69 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %78, i32 0, i32 8
  %79 = load i8*, i8** %parse69, align 8
  %incdec.ptr70 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %incdec.ptr70, i8** %parse69, align 8
  br label %while.cond71

while.cond71:                                     ; preds = %while.body81, %if.then68
  %80 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse72 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %80, i32 0, i32 8
  %81 = load i8*, i8** %parse72, align 8
  %82 = load i8, i8* %81, align 1
  %conv73 = sext i8 %82 to i32
  %tobool74 = icmp ne i32 %conv73, 0
  br i1 %tobool74, label %land.rhs75, label %land.end80

land.rhs75:                                       ; preds = %while.cond71
  %83 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse76 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %83, i32 0, i32 8
  %84 = load i8*, i8** %parse76, align 8
  %85 = load i8, i8* %84, align 1
  %conv77 = sext i8 %85 to i32
  %cmp78 = icmp ne i32 %conv77, 41
  br label %land.end80

land.end80:                                       ; preds = %land.rhs75, %while.cond71
  %86 = phi i1 [ false, %while.cond71 ], [ %cmp78, %land.rhs75 ]
  br i1 %86, label %while.body81, label %while.end84

while.body81:                                     ; preds = %land.end80
  %87 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse82 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %87, i32 0, i32 8
  %88 = load i8*, i8** %parse82, align 8
  %incdec.ptr83 = getelementptr inbounds i8, i8* %88, i32 1
  store i8* %incdec.ptr83, i8** %parse82, align 8
  br label %while.cond71

while.end84:                                      ; preds = %land.end80
  %89 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse85 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %89, i32 0, i32 8
  %90 = load i8*, i8** %parse85, align 8
  %91 = load i8, i8* %90, align 1
  %conv86 = sext i8 %91 to i32
  %cmp87 = icmp ne i32 %conv86, 41
  br i1 %cmp87, label %if.then89, label %if.end135

if.then89:                                        ; preds = %while.end84
  br label %do.body90

do.body90:                                        ; preds = %if.then89
  %92 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit91 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %92, i32 0, i32 12
  %93 = load %struct.regnode*, %struct.regnode** %emit91, align 8
  %94 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy92 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %94, i32 0, i32 13
  %95 = bitcast %struct.regnode_ssc* %emit_dummy92 to %struct.regnode*
  %cmp93 = icmp eq %struct.regnode* %93, %95
  br i1 %cmp93, label %if.end97, label %if.then95

if.then95:                                        ; preds = %do.body90
  %96 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv96 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %96, i32 0, i32 3
  %97 = load %struct.p5rx*, %struct.p5rx** %rx_sv96, align 8
  %98 = bitcast %struct.p5rx* %97 to i8*
  %99 = bitcast i8* %98 to %struct.sv*
  %100 = bitcast %struct.sv* %99 to i8*
  call void @Perl_save_pushptr(i8* %100, i32 11)
  br label %if.end97

if.end97:                                         ; preds = %if.then95, %do.body90
  br label %do.body98

do.body98:                                        ; preds = %if.end97
  %101 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse100 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %101, i32 0, i32 8
  %102 = load i8*, i8** %parse100, align 8
  %103 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end101 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %103, i32 0, i32 7
  %104 = load i8*, i8** %end101, align 8
  %cmp102 = icmp ugt i8* %102, %104
  br i1 %cmp102, label %cond.true104, label %cond.false106

cond.true104:                                     ; preds = %do.body98
  %105 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end105 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %105, i32 0, i32 7
  %106 = load i8*, i8** %end105, align 8
  br label %cond.end108

cond.false106:                                    ; preds = %do.body98
  %107 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse107 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %107, i32 0, i32 8
  %108 = load i8*, i8** %parse107, align 8
  br label %cond.end108

cond.end108:                                      ; preds = %cond.false106, %cond.true104
  %cond109 = phi i8* [ %106, %cond.true104 ], [ %108, %cond.false106 ]
  %109 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp110 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %109, i32 0, i32 2
  %110 = load i8*, i8** %precomp110, align 8
  %sub.ptr.lhs.cast111 = ptrtoint i8* %cond109 to i64
  %sub.ptr.rhs.cast112 = ptrtoint i8* %110 to i64
  %sub.ptr.sub113 = sub i64 %sub.ptr.lhs.cast111, %sub.ptr.rhs.cast112
  store i64 %sub.ptr.sub113, i64* %offset99, align 8
  %111 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8114 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %111, i32 0, i32 25
  %112 = load i32, i32* %utf8114, align 8
  %tobool115 = icmp ne i32 %112, 0
  %113 = zext i1 %tobool115 to i64
  %cond116 = select i1 %tobool115, i32 1, i32 0
  %tobool117 = icmp ne i32 %cond116, 0
  %114 = zext i1 %tobool117 to i64
  %cond118 = select i1 %tobool117, i32 1, i32 0
  %115 = load i64, i64* %offset99, align 8
  %116 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp119 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %116, i32 0, i32 2
  %117 = load i8*, i8** %precomp119, align 8
  %118 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8120 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %118, i32 0, i32 25
  %119 = load i32, i32* %utf8120, align 8
  %tobool121 = icmp ne i32 %119, 0
  %120 = zext i1 %tobool121 to i64
  %cond122 = select i1 %tobool121, i32 1, i32 0
  %tobool123 = icmp ne i32 %cond122, 0
  %121 = zext i1 %tobool123 to i64
  %cond124 = select i1 %tobool123, i32 1, i32 0
  %122 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end125 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %122, i32 0, i32 7
  %123 = load i8*, i8** %end125, align 8
  %124 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp126 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %124, i32 0, i32 2
  %125 = load i8*, i8** %precomp126, align 8
  %sub.ptr.lhs.cast127 = ptrtoint i8* %123 to i64
  %sub.ptr.rhs.cast128 = ptrtoint i8* %125 to i64
  %sub.ptr.sub129 = sub i64 %sub.ptr.lhs.cast127, %sub.ptr.rhs.cast128
  %126 = load i64, i64* %offset99, align 8
  %sub130 = sub nsw i64 %sub.ptr.sub129, %126
  %127 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp131 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %127, i32 0, i32 2
  %128 = load i8*, i8** %precomp131, align 8
  %129 = load i64, i64* %offset99, align 8
  %add.ptr132 = getelementptr inbounds i8, i8* %128, i64 %129
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.229, i64 0, i64 0), i32 %cond118, i64 %115, i8* %117, i32 %cond124, i64 %sub130, i8* %add.ptr132)
  br label %do.end133

do.end133:                                        ; preds = %cond.end108
  br label %do.end134

do.end134:                                        ; preds = %do.end133
  br label %if.end135

if.end135:                                        ; preds = %do.end134, %while.end84
  %130 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse136 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %130, i32 0, i32 8
  %131 = load i8*, i8** %parse136, align 8
  %132 = load i8*, i8** %start_arg, align 8
  %cmp137 = icmp eq i8* %131, %132
  br i1 %cmp137, label %if.then139, label %if.end140

if.then139:                                       ; preds = %if.end135
  store i8* null, i8** %start_arg, align 8
  br label %if.end140

if.end140:                                        ; preds = %if.then139, %if.end135
  br label %if.end192

if.else:                                          ; preds = %while.end
  %133 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse141 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %133, i32 0, i32 8
  %134 = load i8*, i8** %parse141, align 8
  %135 = load i8, i8* %134, align 1
  %conv142 = sext i8 %135 to i32
  %cmp143 = icmp ne i32 %conv142, 41
  br i1 %cmp143, label %if.then145, label %if.end191

if.then145:                                       ; preds = %if.else
  br label %do.body146

do.body146:                                       ; preds = %if.then145
  %136 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit147 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %136, i32 0, i32 12
  %137 = load %struct.regnode*, %struct.regnode** %emit147, align 8
  %138 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy148 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %138, i32 0, i32 13
  %139 = bitcast %struct.regnode_ssc* %emit_dummy148 to %struct.regnode*
  %cmp149 = icmp eq %struct.regnode* %137, %139
  br i1 %cmp149, label %if.end153, label %if.then151

if.then151:                                       ; preds = %do.body146
  %140 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv152 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %140, i32 0, i32 3
  %141 = load %struct.p5rx*, %struct.p5rx** %rx_sv152, align 8
  %142 = bitcast %struct.p5rx* %141 to i8*
  %143 = bitcast i8* %142 to %struct.sv*
  %144 = bitcast %struct.sv* %143 to i8*
  call void @Perl_save_pushptr(i8* %144, i32 11)
  br label %if.end153

if.end153:                                        ; preds = %if.then151, %do.body146
  br label %do.body154

do.body154:                                       ; preds = %if.end153
  %145 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse156 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %145, i32 0, i32 8
  %146 = load i8*, i8** %parse156, align 8
  %147 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end157 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %147, i32 0, i32 7
  %148 = load i8*, i8** %end157, align 8
  %cmp158 = icmp ugt i8* %146, %148
  br i1 %cmp158, label %cond.true160, label %cond.false162

cond.true160:                                     ; preds = %do.body154
  %149 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end161 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %149, i32 0, i32 7
  %150 = load i8*, i8** %end161, align 8
  br label %cond.end164

cond.false162:                                    ; preds = %do.body154
  %151 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse163 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %151, i32 0, i32 8
  %152 = load i8*, i8** %parse163, align 8
  br label %cond.end164

cond.end164:                                      ; preds = %cond.false162, %cond.true160
  %cond165 = phi i8* [ %150, %cond.true160 ], [ %152, %cond.false162 ]
  %153 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp166 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %153, i32 0, i32 2
  %154 = load i8*, i8** %precomp166, align 8
  %sub.ptr.lhs.cast167 = ptrtoint i8* %cond165 to i64
  %sub.ptr.rhs.cast168 = ptrtoint i8* %154 to i64
  %sub.ptr.sub169 = sub i64 %sub.ptr.lhs.cast167, %sub.ptr.rhs.cast168
  store i64 %sub.ptr.sub169, i64* %offset155, align 8
  %155 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8170 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %155, i32 0, i32 25
  %156 = load i32, i32* %utf8170, align 8
  %tobool171 = icmp ne i32 %156, 0
  %157 = zext i1 %tobool171 to i64
  %cond172 = select i1 %tobool171, i32 1, i32 0
  %tobool173 = icmp ne i32 %cond172, 0
  %158 = zext i1 %tobool173 to i64
  %cond174 = select i1 %tobool173, i32 1, i32 0
  %159 = load i64, i64* %offset155, align 8
  %160 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp175 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %160, i32 0, i32 2
  %161 = load i8*, i8** %precomp175, align 8
  %162 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8176 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %162, i32 0, i32 25
  %163 = load i32, i32* %utf8176, align 8
  %tobool177 = icmp ne i32 %163, 0
  %164 = zext i1 %tobool177 to i64
  %cond178 = select i1 %tobool177, i32 1, i32 0
  %tobool179 = icmp ne i32 %cond178, 0
  %165 = zext i1 %tobool179 to i64
  %cond180 = select i1 %tobool179, i32 1, i32 0
  %166 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end181 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %166, i32 0, i32 7
  %167 = load i8*, i8** %end181, align 8
  %168 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp182 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %168, i32 0, i32 2
  %169 = load i8*, i8** %precomp182, align 8
  %sub.ptr.lhs.cast183 = ptrtoint i8* %167 to i64
  %sub.ptr.rhs.cast184 = ptrtoint i8* %169 to i64
  %sub.ptr.sub185 = sub i64 %sub.ptr.lhs.cast183, %sub.ptr.rhs.cast184
  %170 = load i64, i64* %offset155, align 8
  %sub186 = sub nsw i64 %sub.ptr.sub185, %170
  %171 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp187 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %171, i32 0, i32 2
  %172 = load i8*, i8** %precomp187, align 8
  %173 = load i64, i64* %offset155, align 8
  %add.ptr188 = getelementptr inbounds i8, i8* %172, i64 %173
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.230, i64 0, i64 0), i32 %cond174, i64 %159, i8* %161, i32 %cond180, i64 %sub186, i8* %add.ptr188)
  br label %do.end189

do.end189:                                        ; preds = %cond.end164
  br label %do.end190

do.end190:                                        ; preds = %do.end189
  br label %if.end191

if.end191:                                        ; preds = %do.end190, %if.else
  br label %if.end192

if.end192:                                        ; preds = %if.end191, %if.end140
  %174 = load i8*, i8** %start_verb, align 8
  %175 = load i8, i8* %174, align 1
  %conv193 = sext i8 %175 to i32
  switch i32 %conv193, label %sw.epilog [
    i32 65, label %sw.bb
    i32 67, label %sw.bb199
    i32 70, label %sw.bb207
    i32 58, label %sw.bb217
    i32 77, label %sw.bb217
    i32 80, label %sw.bb228
    i32 83, label %sw.bb236
    i32 84, label %sw.bb244
  ]

sw.bb:                                            ; preds = %if.end192
  %176 = load i64, i64* %verb_len, align 8
  %cmp194 = icmp eq i64 6, %176
  br i1 %cmp194, label %land.lhs.true, label %if.end198

land.lhs.true:                                    ; preds = %sw.bb
  %177 = load i8*, i8** %start_verb, align 8
  %call = call i32 @memcmp(i8* %177, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.83, i64 0, i64 0), i64 6) #6
  %tobool196 = icmp ne i32 %call, 0
  br i1 %tobool196, label %if.end198, label %if.then197

if.then197:                                       ; preds = %land.lhs.true
  store i8 83, i8* %op, align 1
  %178 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %nestroot = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %178, i32 0, i32 19
  %179 = load i32, i32* %nestroot, align 4
  store i32 %179, i32* %internal_argval, align 4
  br label %if.end198

if.end198:                                        ; preds = %if.then197, %land.lhs.true, %sw.bb
  br label %sw.epilog

sw.bb199:                                         ; preds = %if.end192
  %180 = load i64, i64* %verb_len, align 8
  %cmp200 = icmp eq i64 6, %180
  br i1 %cmp200, label %land.lhs.true202, label %if.end206

land.lhs.true202:                                 ; preds = %sw.bb199
  %181 = load i8*, i8** %start_verb, align 8
  %call203 = call i32 @memcmp(i8* %181, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i64 0, i64 0), i64 6) #6
  %tobool204 = icmp ne i32 %call203, 0
  br i1 %tobool204, label %if.end206, label %if.then205

if.then205:                                       ; preds = %land.lhs.true202
  store i8 88, i8* %op, align 1
  br label %if.end206

if.end206:                                        ; preds = %if.then205, %land.lhs.true202, %sw.bb199
  br label %sw.epilog

sw.bb207:                                         ; preds = %if.end192
  %182 = load i64, i64* %verb_len, align 8
  %cmp208 = icmp eq i64 %182, 1
  br i1 %cmp208, label %if.then215, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb207
  %183 = load i64, i64* %verb_len, align 8
  %cmp210 = icmp eq i64 4, %183
  br i1 %cmp210, label %land.lhs.true212, label %if.end216

land.lhs.true212:                                 ; preds = %lor.lhs.false
  %184 = load i8*, i8** %start_verb, align 8
  %call213 = call i32 @memcmp(i8* %184, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.231, i64 0, i64 0), i64 4) #6
  %tobool214 = icmp ne i32 %call213, 0
  br i1 %tobool214, label %if.end216, label %if.then215

if.then215:                                       ; preds = %land.lhs.true212, %sw.bb207
  store i8 82, i8* %op, align 1
  store i32 0, i32* %argok, align 4
  br label %if.end216

if.end216:                                        ; preds = %if.then215, %land.lhs.true212, %lor.lhs.false
  br label %sw.epilog

sw.bb217:                                         ; preds = %if.end192, %if.end192
  %185 = load i64, i64* %verb_len, align 8
  %cmp218 = icmp eq i64 %185, 0
  br i1 %cmp218, label %if.then226, label %lor.lhs.false220

lor.lhs.false220:                                 ; preds = %sw.bb217
  %186 = load i64, i64* %verb_len, align 8
  %cmp221 = icmp eq i64 4, %186
  br i1 %cmp221, label %land.lhs.true223, label %if.end227

land.lhs.true223:                                 ; preds = %lor.lhs.false220
  %187 = load i8*, i8** %start_verb, align 8
  %call224 = call i32 @memcmp(i8* %187, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.232, i64 0, i64 0), i64 4) #6
  %tobool225 = icmp ne i32 %call224, 0
  br i1 %tobool225, label %if.end227, label %if.then226

if.then226:                                       ; preds = %land.lhs.true223, %sw.bb217
  store i8 86, i8* %op, align 1
  store i32 -1, i32* %argok, align 4
  br label %if.end227

if.end227:                                        ; preds = %if.then226, %land.lhs.true223, %lor.lhs.false220
  br label %sw.epilog

sw.bb228:                                         ; preds = %if.end192
  %188 = load i64, i64* %verb_len, align 8
  %cmp229 = icmp eq i64 5, %188
  br i1 %cmp229, label %land.lhs.true231, label %if.end235

land.lhs.true231:                                 ; preds = %sw.bb228
  %189 = load i8*, i8** %start_verb, align 8
  %call232 = call i32 @memcmp(i8* %189, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i64 0, i64 0), i64 5) #6
  %tobool233 = icmp ne i32 %call232, 0
  br i1 %tobool233, label %if.end235, label %if.then234

if.then234:                                       ; preds = %land.lhs.true231
  store i8 85, i8* %op, align 1
  br label %if.end235

if.end235:                                        ; preds = %if.then234, %land.lhs.true231, %sw.bb228
  br label %sw.epilog

sw.bb236:                                         ; preds = %if.end192
  %190 = load i64, i64* %verb_len, align 8
  %cmp237 = icmp eq i64 4, %190
  br i1 %cmp237, label %land.lhs.true239, label %if.end243

land.lhs.true239:                                 ; preds = %sw.bb236
  %191 = load i8*, i8** %start_verb, align 8
  %call240 = call i32 @memcmp(i8* %191, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.87, i64 0, i64 0), i64 4) #6
  %tobool241 = icmp ne i32 %call240, 0
  br i1 %tobool241, label %if.end243, label %if.then242

if.then242:                                       ; preds = %land.lhs.true239
  store i8 87, i8* %op, align 1
  br label %if.end243

if.end243:                                        ; preds = %if.then242, %land.lhs.true239, %sw.bb236
  br label %sw.epilog

sw.bb244:                                         ; preds = %if.end192
  %192 = load i64, i64* %verb_len, align 8
  %cmp245 = icmp eq i64 4, %192
  br i1 %cmp245, label %land.lhs.true247, label %if.end251

land.lhs.true247:                                 ; preds = %sw.bb244
  %193 = load i8*, i8** %start_verb, align 8
  %call248 = call i32 @memcmp(i8* %193, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.233, i64 0, i64 0), i64 4) #6
  %tobool249 = icmp ne i32 %call248, 0
  br i1 %tobool249, label %if.end251, label %if.then250

if.then250:                                       ; preds = %land.lhs.true247
  store i8 89, i8* %op, align 1
  %194 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %194, i32 0, i32 16
  %195 = load i32, i32* %seen, align 8
  %or = or i32 %195, 256
  store i32 %or, i32* %seen, align 8
  br label %if.end251

if.end251:                                        ; preds = %if.then250, %land.lhs.true247, %sw.bb244
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end192, %if.end251, %if.end243, %if.end235, %if.end227, %if.end216, %if.end206, %if.end198
  %196 = load i8, i8* %op, align 1
  %tobool252 = icmp ne i8 %196, 0
  br i1 %tobool252, label %if.end309, label %if.then253

if.then253:                                       ; preds = %sw.epilog
  %197 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8254 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %197, i32 0, i32 25
  %198 = load i32, i32* %utf8254, align 8
  %tobool255 = icmp ne i32 %198, 0
  br i1 %tobool255, label %cond.true256, label %cond.false257

cond.true256:                                     ; preds = %if.then253
  br i1 true, label %cond.true258, label %cond.false261

cond.false257:                                    ; preds = %if.then253
  br i1 false, label %cond.true258, label %cond.false261

cond.true258:                                     ; preds = %cond.false257, %cond.true256
  %199 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse259 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %199, i32 0, i32 8
  %200 = load i8*, i8** %parse259, align 8
  %201 = load i8, i8* %200, align 1
  %idxprom = zext i8 %201 to i64
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %202 = load i8, i8* %arrayidx, align 1
  %conv260 = zext i8 %202 to i32
  br label %cond.end262

cond.false261:                                    ; preds = %cond.false257, %cond.true256
  br label %cond.end262

cond.end262:                                      ; preds = %cond.false261, %cond.true258
  %cond263 = phi i32 [ %conv260, %cond.true258 ], [ 1, %cond.false261 ]
  %203 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse264 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %203, i32 0, i32 8
  %204 = load i8*, i8** %parse264, align 8
  %idx.ext = sext i32 %cond263 to i64
  %add.ptr265 = getelementptr inbounds i8, i8* %204, i64 %idx.ext
  store i8* %add.ptr265, i8** %parse264, align 8
  br label %do.body266

do.body266:                                       ; preds = %cond.end262
  %205 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse268 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %205, i32 0, i32 8
  %206 = load i8*, i8** %parse268, align 8
  %207 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp269 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %207, i32 0, i32 2
  %208 = load i8*, i8** %precomp269, align 8
  %sub.ptr.lhs.cast270 = ptrtoint i8* %206 to i64
  %sub.ptr.rhs.cast271 = ptrtoint i8* %208 to i64
  %sub.ptr.sub272 = sub i64 %sub.ptr.lhs.cast270, %sub.ptr.rhs.cast271
  store i64 %sub.ptr.sub272, i64* %offset267, align 8
  %209 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit273 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %209, i32 0, i32 12
  %210 = load %struct.regnode*, %struct.regnode** %emit273, align 8
  %211 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy274 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %211, i32 0, i32 13
  %212 = bitcast %struct.regnode_ssc* %emit_dummy274 to %struct.regnode*
  %cmp275 = icmp eq %struct.regnode* %210, %212
  br i1 %cmp275, label %if.end279, label %if.then277

if.then277:                                       ; preds = %do.body266
  %213 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv278 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %213, i32 0, i32 3
  %214 = load %struct.p5rx*, %struct.p5rx** %rx_sv278, align 8
  %215 = bitcast %struct.p5rx* %214 to i8*
  %216 = bitcast i8* %215 to %struct.sv*
  %217 = bitcast %struct.sv* %216 to i8*
  call void @Perl_save_pushptr(i8* %217, i32 11)
  br label %if.end279

if.end279:                                        ; preds = %if.then277, %do.body266
  %218 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8280 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %218, i32 0, i32 25
  %219 = load i32, i32* %utf8280, align 8
  %tobool281 = icmp ne i32 %219, 0
  %220 = zext i1 %tobool281 to i64
  %cond282 = select i1 %tobool281, i32 1, i32 0
  %tobool283 = icmp ne i32 %cond282, 0
  %221 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8284 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %221, i32 0, i32 25
  %222 = load i32, i32* %utf8284, align 8
  %tobool285 = icmp ne i32 %222, 0
  %223 = zext i1 %tobool285 to i64
  %cond286 = select i1 %tobool285, i32 1, i32 0
  %tobool287 = icmp ne i32 %cond286, 0
  %224 = zext i1 %tobool287 to i64
  %cond288 = select i1 %tobool287, i32 1, i32 0
  %225 = load i64, i64* %verb_len, align 8
  %226 = load i8*, i8** %start_verb, align 8
  %227 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8289 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %227, i32 0, i32 25
  %228 = load i32, i32* %utf8289, align 8
  %tobool290 = icmp ne i32 %228, 0
  %229 = zext i1 %tobool290 to i64
  %cond291 = select i1 %tobool290, i32 1, i32 0
  %tobool292 = icmp ne i32 %cond291, 0
  %230 = zext i1 %tobool292 to i64
  %cond293 = select i1 %tobool292, i32 1, i32 0
  %231 = load i64, i64* %offset267, align 8
  %232 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp294 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %232, i32 0, i32 2
  %233 = load i8*, i8** %precomp294, align 8
  %234 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8295 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %234, i32 0, i32 25
  %235 = load i32, i32* %utf8295, align 8
  %tobool296 = icmp ne i32 %235, 0
  %236 = zext i1 %tobool296 to i64
  %cond297 = select i1 %tobool296, i32 1, i32 0
  %tobool298 = icmp ne i32 %cond297, 0
  %237 = zext i1 %tobool298 to i64
  %cond299 = select i1 %tobool298, i32 1, i32 0
  %238 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end300 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %238, i32 0, i32 7
  %239 = load i8*, i8** %end300, align 8
  %240 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp301 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %240, i32 0, i32 2
  %241 = load i8*, i8** %precomp301, align 8
  %sub.ptr.lhs.cast302 = ptrtoint i8* %239 to i64
  %sub.ptr.rhs.cast303 = ptrtoint i8* %241 to i64
  %sub.ptr.sub304 = sub i64 %sub.ptr.lhs.cast302, %sub.ptr.rhs.cast303
  %242 = load i64, i64* %offset267, align 8
  %sub305 = sub nsw i64 %sub.ptr.sub304, %242
  %243 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp306 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %243, i32 0, i32 2
  %244 = load i8*, i8** %precomp306, align 8
  %245 = load i64, i64* %offset267, align 8
  %add.ptr307 = getelementptr inbounds i8, i8* %244, i64 %245
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool283, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.234, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %cond288, i64 %225, i8* %226, i32 %cond293, i64 %231, i8* %233, i32 %cond299, i64 %sub305, i8* %add.ptr307)
  br label %do.end308

do.end308:                                        ; preds = %if.end279
  br label %if.end309

if.end309:                                        ; preds = %do.end308, %sw.epilog
  %246 = load i32, i32* %argok, align 4
  %tobool310 = icmp ne i32 %246, 0
  br i1 %tobool310, label %if.then311, label %if.else435

if.then311:                                       ; preds = %if.end309
  %247 = load i8*, i8** %start_arg, align 8
  %tobool312 = icmp ne i8* %247, null
  br i1 %tobool312, label %land.lhs.true313, label %if.else356

land.lhs.true313:                                 ; preds = %if.then311
  %248 = load i32, i32* %internal_argval, align 4
  %tobool314 = icmp ne i32 %248, 0
  br i1 %tobool314, label %if.then315, label %if.else356

if.then315:                                       ; preds = %land.lhs.true313
  br label %do.body316

do.body316:                                       ; preds = %if.then315
  %249 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit317 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %249, i32 0, i32 12
  %250 = load %struct.regnode*, %struct.regnode** %emit317, align 8
  %251 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy318 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %251, i32 0, i32 13
  %252 = bitcast %struct.regnode_ssc* %emit_dummy318 to %struct.regnode*
  %cmp319 = icmp eq %struct.regnode* %250, %252
  br i1 %cmp319, label %if.end323, label %if.then321

if.then321:                                       ; preds = %do.body316
  %253 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv322 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %253, i32 0, i32 3
  %254 = load %struct.p5rx*, %struct.p5rx** %rx_sv322, align 8
  %255 = bitcast %struct.p5rx* %254 to i8*
  %256 = bitcast i8* %255 to %struct.sv*
  %257 = bitcast %struct.sv* %256 to i8*
  call void @Perl_save_pushptr(i8* %257, i32 11)
  br label %if.end323

if.end323:                                        ; preds = %if.then321, %do.body316
  br label %do.body324

do.body324:                                       ; preds = %if.end323
  %258 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse326 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %258, i32 0, i32 8
  %259 = load i8*, i8** %parse326, align 8
  %260 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp327 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %260, i32 0, i32 2
  %261 = load i8*, i8** %precomp327, align 8
  %sub.ptr.lhs.cast328 = ptrtoint i8* %259 to i64
  %sub.ptr.rhs.cast329 = ptrtoint i8* %261 to i64
  %sub.ptr.sub330 = sub i64 %sub.ptr.lhs.cast328, %sub.ptr.rhs.cast329
  store i64 %sub.ptr.sub330, i64* %offset325, align 8
  %262 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8331 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %262, i32 0, i32 25
  %263 = load i32, i32* %utf8331, align 8
  %tobool332 = icmp ne i32 %263, 0
  %264 = zext i1 %tobool332 to i64
  %cond333 = select i1 %tobool332, i32 1, i32 0
  %tobool334 = icmp ne i32 %cond333, 0
  %265 = load i64, i64* %verb_len, align 8
  %266 = load i8*, i8** %start_verb, align 8
  %267 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8335 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %267, i32 0, i32 25
  %268 = load i32, i32* %utf8335, align 8
  %tobool336 = icmp ne i32 %268, 0
  %269 = zext i1 %tobool336 to i64
  %cond337 = select i1 %tobool336, i32 1, i32 0
  %tobool338 = icmp ne i32 %cond337, 0
  %270 = zext i1 %tobool338 to i64
  %cond339 = select i1 %tobool338, i32 1, i32 0
  %271 = load i64, i64* %offset325, align 8
  %272 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp340 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %272, i32 0, i32 2
  %273 = load i8*, i8** %precomp340, align 8
  %274 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8341 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %274, i32 0, i32 25
  %275 = load i32, i32* %utf8341, align 8
  %tobool342 = icmp ne i32 %275, 0
  %276 = zext i1 %tobool342 to i64
  %cond343 = select i1 %tobool342, i32 1, i32 0
  %tobool344 = icmp ne i32 %cond343, 0
  %277 = zext i1 %tobool344 to i64
  %cond345 = select i1 %tobool344, i32 1, i32 0
  %278 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end346 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %278, i32 0, i32 7
  %279 = load i8*, i8** %end346, align 8
  %280 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp347 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %280, i32 0, i32 2
  %281 = load i8*, i8** %precomp347, align 8
  %sub.ptr.lhs.cast348 = ptrtoint i8* %279 to i64
  %sub.ptr.rhs.cast349 = ptrtoint i8* %281 to i64
  %sub.ptr.sub350 = sub i64 %sub.ptr.lhs.cast348, %sub.ptr.rhs.cast349
  %282 = load i64, i64* %offset325, align 8
  %sub351 = sub nsw i64 %sub.ptr.sub350, %282
  %283 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp352 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %283, i32 0, i32 2
  %284 = load i8*, i8** %precomp352, align 8
  %285 = load i64, i64* %offset325, align 8
  %add.ptr353 = getelementptr inbounds i8, i8* %284, i64 %285
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool334, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.236, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i64 %265, i8* %266, i32 %cond339, i64 %271, i8* %273, i32 %cond345, i64 %sub351, i8* %add.ptr353)
  br label %do.end354

do.end354:                                        ; preds = %do.body324
  br label %do.end355

do.end355:                                        ; preds = %do.end354
  br label %if.end429

if.else356:                                       ; preds = %land.lhs.true313, %if.then311
  %286 = load i32, i32* %argok, align 4
  %cmp357 = icmp slt i32 %286, 0
  br i1 %cmp357, label %land.lhs.true359, label %if.else402

land.lhs.true359:                                 ; preds = %if.else356
  %287 = load i8*, i8** %start_arg, align 8
  %tobool360 = icmp ne i8* %287, null
  br i1 %tobool360, label %if.else402, label %if.then361

if.then361:                                       ; preds = %land.lhs.true359
  br label %do.body362

do.body362:                                       ; preds = %if.then361
  %288 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit363 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %288, i32 0, i32 12
  %289 = load %struct.regnode*, %struct.regnode** %emit363, align 8
  %290 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy364 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %290, i32 0, i32 13
  %291 = bitcast %struct.regnode_ssc* %emit_dummy364 to %struct.regnode*
  %cmp365 = icmp eq %struct.regnode* %289, %291
  br i1 %cmp365, label %if.end369, label %if.then367

if.then367:                                       ; preds = %do.body362
  %292 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv368 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %292, i32 0, i32 3
  %293 = load %struct.p5rx*, %struct.p5rx** %rx_sv368, align 8
  %294 = bitcast %struct.p5rx* %293 to i8*
  %295 = bitcast i8* %294 to %struct.sv*
  %296 = bitcast %struct.sv* %295 to i8*
  call void @Perl_save_pushptr(i8* %296, i32 11)
  br label %if.end369

if.end369:                                        ; preds = %if.then367, %do.body362
  br label %do.body370

do.body370:                                       ; preds = %if.end369
  %297 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse372 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %297, i32 0, i32 8
  %298 = load i8*, i8** %parse372, align 8
  %299 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp373 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %299, i32 0, i32 2
  %300 = load i8*, i8** %precomp373, align 8
  %sub.ptr.lhs.cast374 = ptrtoint i8* %298 to i64
  %sub.ptr.rhs.cast375 = ptrtoint i8* %300 to i64
  %sub.ptr.sub376 = sub i64 %sub.ptr.lhs.cast374, %sub.ptr.rhs.cast375
  store i64 %sub.ptr.sub376, i64* %offset371, align 8
  %301 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8377 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %301, i32 0, i32 25
  %302 = load i32, i32* %utf8377, align 8
  %tobool378 = icmp ne i32 %302, 0
  %303 = zext i1 %tobool378 to i64
  %cond379 = select i1 %tobool378, i32 1, i32 0
  %tobool380 = icmp ne i32 %cond379, 0
  %304 = load i64, i64* %verb_len, align 8
  %305 = load i8*, i8** %start_verb, align 8
  %306 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8381 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %306, i32 0, i32 25
  %307 = load i32, i32* %utf8381, align 8
  %tobool382 = icmp ne i32 %307, 0
  %308 = zext i1 %tobool382 to i64
  %cond383 = select i1 %tobool382, i32 1, i32 0
  %tobool384 = icmp ne i32 %cond383, 0
  %309 = zext i1 %tobool384 to i64
  %cond385 = select i1 %tobool384, i32 1, i32 0
  %310 = load i64, i64* %offset371, align 8
  %311 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp386 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %311, i32 0, i32 2
  %312 = load i8*, i8** %precomp386, align 8
  %313 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8387 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %313, i32 0, i32 25
  %314 = load i32, i32* %utf8387, align 8
  %tobool388 = icmp ne i32 %314, 0
  %315 = zext i1 %tobool388 to i64
  %cond389 = select i1 %tobool388, i32 1, i32 0
  %tobool390 = icmp ne i32 %cond389, 0
  %316 = zext i1 %tobool390 to i64
  %cond391 = select i1 %tobool390, i32 1, i32 0
  %317 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end392 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %317, i32 0, i32 7
  %318 = load i8*, i8** %end392, align 8
  %319 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp393 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %319, i32 0, i32 2
  %320 = load i8*, i8** %precomp393, align 8
  %sub.ptr.lhs.cast394 = ptrtoint i8* %318 to i64
  %sub.ptr.rhs.cast395 = ptrtoint i8* %320 to i64
  %sub.ptr.sub396 = sub i64 %sub.ptr.lhs.cast394, %sub.ptr.rhs.cast395
  %321 = load i64, i64* %offset371, align 8
  %sub397 = sub nsw i64 %sub.ptr.sub396, %321
  %322 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp398 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %322, i32 0, i32 2
  %323 = load i8*, i8** %precomp398, align 8
  %324 = load i64, i64* %offset371, align 8
  %add.ptr399 = getelementptr inbounds i8, i8* %323, i64 %324
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool380, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.237, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i64 %304, i8* %305, i32 %cond385, i64 %310, i8* %312, i32 %cond391, i64 %sub397, i8* %add.ptr399)
  br label %do.end400

do.end400:                                        ; preds = %do.body370
  br label %do.end401

do.end401:                                        ; preds = %do.end400
  br label %if.end428

if.else402:                                       ; preds = %land.lhs.true359, %if.else356
  %325 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %326 = load i8, i8* %op, align 1
  %327 = load i32, i32* %internal_argval, align 4
  %call403 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %325, i8 zeroext %326, i32 %327)
  store %struct.regnode* %call403, %struct.regnode** %ret, align 8
  %328 = load i32, i32* %internal_argval, align 4
  %tobool404 = icmp ne i32 %328, 0
  br i1 %tobool404, label %if.end427, label %land.lhs.true405

land.lhs.true405:                                 ; preds = %if.else402
  %329 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit406 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %329, i32 0, i32 12
  %330 = load %struct.regnode*, %struct.regnode** %emit406, align 8
  %331 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy407 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %331, i32 0, i32 13
  %332 = bitcast %struct.regnode_ssc* %emit_dummy407 to %struct.regnode*
  %cmp408 = icmp eq %struct.regnode* %330, %332
  br i1 %cmp408, label %if.end427, label %if.then410

if.then410:                                       ; preds = %land.lhs.true405
  %333 = load i8*, i8** %start_arg, align 8
  %tobool411 = icmp ne i8* %333, null
  br i1 %tobool411, label %if.then412, label %if.else424

if.then412:                                       ; preds = %if.then410
  %334 = load i8*, i8** %start_arg, align 8
  %335 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse413 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %335, i32 0, i32 8
  %336 = load i8*, i8** %parse413, align 8
  %337 = load i8*, i8** %start_arg, align 8
  %sub.ptr.lhs.cast414 = ptrtoint i8* %336 to i64
  %sub.ptr.rhs.cast415 = ptrtoint i8* %337 to i64
  %sub.ptr.sub416 = sub i64 %sub.ptr.lhs.cast414, %sub.ptr.rhs.cast415
  %call417 = call %struct.sv* @Perl_newSVpvn(i8* %334, i64 %sub.ptr.sub416)
  store %struct.sv* %call417, %struct.sv** %sv, align 8
  %338 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call418 = call i32 @S_add_data(%struct.RExC_state_t* %338, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.238, i64 0, i64 0), i32 1)
  %339 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %340 = bitcast %struct.regnode* %339 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %340, i32 0, i32 3
  store i32 %call418, i32* %arg1, align 4
  %341 = load %struct.sv*, %struct.sv** %sv, align 8
  %342 = bitcast %struct.sv* %341 to i8*
  %343 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %343, i32 0, i32 5
  %344 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi, align 8
  %data = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %344, i32 0, i32 3
  %345 = load %struct.reg_data*, %struct.reg_data** %data, align 8
  %data419 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %345, i32 0, i32 2
  %346 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %347 = bitcast %struct.regnode* %346 to %struct.regnode_1*
  %arg1420 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %347, i32 0, i32 3
  %348 = load i32, i32* %arg1420, align 4
  %idxprom421 = zext i32 %348 to i64
  %arrayidx422 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data419, i64 0, i64 %idxprom421
  store i8* %342, i8** %arrayidx422, align 8
  %349 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags423 = getelementptr inbounds %struct.regnode, %struct.regnode* %349, i32 0, i32 0
  store i8 0, i8* %flags423, align 2
  br label %if.end426

if.else424:                                       ; preds = %if.then410
  %350 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags425 = getelementptr inbounds %struct.regnode, %struct.regnode* %350, i32 0, i32 0
  store i8 1, i8* %flags425, align 2
  br label %if.end426

if.end426:                                        ; preds = %if.else424, %if.then412
  br label %if.end427

if.end427:                                        ; preds = %if.end426, %land.lhs.true405, %if.else402
  br label %if.end428

if.end428:                                        ; preds = %if.end427, %do.end401
  br label %if.end429

if.end429:                                        ; preds = %if.end428, %do.end355
  %351 = load i32, i32* %internal_argval, align 4
  %tobool430 = icmp ne i32 %351, 0
  br i1 %tobool430, label %if.end434, label %if.then431

if.then431:                                       ; preds = %if.end429
  %352 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen432 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %352, i32 0, i32 16
  %353 = load i32, i32* %seen432, align 8
  %or433 = or i32 %353, 128
  store i32 %or433, i32* %seen432, align 8
  br label %if.end434

if.end434:                                        ; preds = %if.then431, %if.end429
  br label %if.end481

if.else435:                                       ; preds = %if.end309
  %354 = load i8*, i8** %start_arg, align 8
  %tobool436 = icmp ne i8* %354, null
  br i1 %tobool436, label %if.then437, label %if.else478

if.then437:                                       ; preds = %if.else435
  br label %do.body438

do.body438:                                       ; preds = %if.then437
  %355 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit439 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %355, i32 0, i32 12
  %356 = load %struct.regnode*, %struct.regnode** %emit439, align 8
  %357 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy440 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %357, i32 0, i32 13
  %358 = bitcast %struct.regnode_ssc* %emit_dummy440 to %struct.regnode*
  %cmp441 = icmp eq %struct.regnode* %356, %358
  br i1 %cmp441, label %if.end445, label %if.then443

if.then443:                                       ; preds = %do.body438
  %359 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv444 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %359, i32 0, i32 3
  %360 = load %struct.p5rx*, %struct.p5rx** %rx_sv444, align 8
  %361 = bitcast %struct.p5rx* %360 to i8*
  %362 = bitcast i8* %361 to %struct.sv*
  %363 = bitcast %struct.sv* %362 to i8*
  call void @Perl_save_pushptr(i8* %363, i32 11)
  br label %if.end445

if.end445:                                        ; preds = %if.then443, %do.body438
  br label %do.body446

do.body446:                                       ; preds = %if.end445
  %364 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse448 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %364, i32 0, i32 8
  %365 = load i8*, i8** %parse448, align 8
  %366 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp449 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %366, i32 0, i32 2
  %367 = load i8*, i8** %precomp449, align 8
  %sub.ptr.lhs.cast450 = ptrtoint i8* %365 to i64
  %sub.ptr.rhs.cast451 = ptrtoint i8* %367 to i64
  %sub.ptr.sub452 = sub i64 %sub.ptr.lhs.cast450, %sub.ptr.rhs.cast451
  store i64 %sub.ptr.sub452, i64* %offset447, align 8
  %368 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8453 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %368, i32 0, i32 25
  %369 = load i32, i32* %utf8453, align 8
  %tobool454 = icmp ne i32 %369, 0
  %370 = zext i1 %tobool454 to i64
  %cond455 = select i1 %tobool454, i32 1, i32 0
  %tobool456 = icmp ne i32 %cond455, 0
  %371 = load i64, i64* %verb_len, align 8
  %372 = load i8*, i8** %start_verb, align 8
  %373 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8457 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %373, i32 0, i32 25
  %374 = load i32, i32* %utf8457, align 8
  %tobool458 = icmp ne i32 %374, 0
  %375 = zext i1 %tobool458 to i64
  %cond459 = select i1 %tobool458, i32 1, i32 0
  %tobool460 = icmp ne i32 %cond459, 0
  %376 = zext i1 %tobool460 to i64
  %cond461 = select i1 %tobool460, i32 1, i32 0
  %377 = load i64, i64* %offset447, align 8
  %378 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp462 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %378, i32 0, i32 2
  %379 = load i8*, i8** %precomp462, align 8
  %380 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8463 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %380, i32 0, i32 25
  %381 = load i32, i32* %utf8463, align 8
  %tobool464 = icmp ne i32 %381, 0
  %382 = zext i1 %tobool464 to i64
  %cond465 = select i1 %tobool464, i32 1, i32 0
  %tobool466 = icmp ne i32 %cond465, 0
  %383 = zext i1 %tobool466 to i64
  %cond467 = select i1 %tobool466, i32 1, i32 0
  %384 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end468 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %384, i32 0, i32 7
  %385 = load i8*, i8** %end468, align 8
  %386 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp469 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %386, i32 0, i32 2
  %387 = load i8*, i8** %precomp469, align 8
  %sub.ptr.lhs.cast470 = ptrtoint i8* %385 to i64
  %sub.ptr.rhs.cast471 = ptrtoint i8* %387 to i64
  %sub.ptr.sub472 = sub i64 %sub.ptr.lhs.cast470, %sub.ptr.rhs.cast471
  %388 = load i64, i64* %offset447, align 8
  %sub473 = sub nsw i64 %sub.ptr.sub472, %388
  %389 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp474 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %389, i32 0, i32 2
  %390 = load i8*, i8** %precomp474, align 8
  %391 = load i64, i64* %offset447, align 8
  %add.ptr475 = getelementptr inbounds i8, i8* %390, i64 %391
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool456, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.236, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i64 %371, i8* %372, i32 %cond461, i64 %377, i8* %379, i32 %cond467, i64 %sub473, i8* %add.ptr475)
  br label %do.end476

do.end476:                                        ; preds = %do.body446
  br label %do.end477

do.end477:                                        ; preds = %do.end476
  br label %if.end480

if.else478:                                       ; preds = %if.else435
  %392 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %393 = load i8, i8* %op, align 1
  %call479 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %392, i8 zeroext %393)
  store %struct.regnode* %call479, %struct.regnode** %ret, align 8
  br label %if.end480

if.end480:                                        ; preds = %if.else478, %do.end477
  br label %if.end481

if.end481:                                        ; preds = %if.end480, %if.end434
  %394 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call482 = call i8* @S_nextchar(%struct.RExC_state_t* %394)
  %395 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %395, %struct.regnode** %retval, align 8
  br label %return

if.else483:                                       ; preds = %land.end
  %396 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse484 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %396, i32 0, i32 8
  %397 = load i8*, i8** %parse484, align 8
  %398 = load i8, i8* %397, align 1
  %conv485 = sext i8 %398 to i32
  %cmp486 = icmp eq i32 %conv485, 63
  br i1 %cmp486, label %if.then488, label %if.else2315

if.then488:                                       ; preds = %if.else483
  store i8 0, i8* %is_logical, align 1
  %399 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse489 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %399, i32 0, i32 8
  %400 = load i8*, i8** %parse489, align 8
  store i8* %400, i8** %seqstart, align 8
  %401 = load i8, i8* %has_intervening_patws, align 1
  %tobool490 = trunc i8 %401 to i1
  br i1 %tobool490, label %if.then491, label %if.end539

if.then491:                                       ; preds = %if.then488
  %402 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse492 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %402, i32 0, i32 8
  %403 = load i8*, i8** %parse492, align 8
  %incdec.ptr493 = getelementptr inbounds i8, i8* %403, i32 1
  store i8* %incdec.ptr493, i8** %parse492, align 8
  br label %do.body494

do.body494:                                       ; preds = %if.then491
  %404 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit495 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %404, i32 0, i32 12
  %405 = load %struct.regnode*, %struct.regnode** %emit495, align 8
  %406 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy496 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %406, i32 0, i32 13
  %407 = bitcast %struct.regnode_ssc* %emit_dummy496 to %struct.regnode*
  %cmp497 = icmp eq %struct.regnode* %405, %407
  br i1 %cmp497, label %if.end501, label %if.then499

if.then499:                                       ; preds = %do.body494
  %408 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv500 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %408, i32 0, i32 3
  %409 = load %struct.p5rx*, %struct.p5rx** %rx_sv500, align 8
  %410 = bitcast %struct.p5rx* %409 to i8*
  %411 = bitcast i8* %410 to %struct.sv*
  %412 = bitcast %struct.sv* %411 to i8*
  call void @Perl_save_pushptr(i8* %412, i32 11)
  br label %if.end501

if.end501:                                        ; preds = %if.then499, %do.body494
  br label %do.body502

do.body502:                                       ; preds = %if.end501
  %413 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse504 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %413, i32 0, i32 8
  %414 = load i8*, i8** %parse504, align 8
  %415 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end505 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %415, i32 0, i32 7
  %416 = load i8*, i8** %end505, align 8
  %cmp506 = icmp ugt i8* %414, %416
  br i1 %cmp506, label %cond.true508, label %cond.false510

cond.true508:                                     ; preds = %do.body502
  %417 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end509 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %417, i32 0, i32 7
  %418 = load i8*, i8** %end509, align 8
  br label %cond.end512

cond.false510:                                    ; preds = %do.body502
  %419 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse511 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %419, i32 0, i32 8
  %420 = load i8*, i8** %parse511, align 8
  br label %cond.end512

cond.end512:                                      ; preds = %cond.false510, %cond.true508
  %cond513 = phi i8* [ %418, %cond.true508 ], [ %420, %cond.false510 ]
  %421 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp514 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %421, i32 0, i32 2
  %422 = load i8*, i8** %precomp514, align 8
  %sub.ptr.lhs.cast515 = ptrtoint i8* %cond513 to i64
  %sub.ptr.rhs.cast516 = ptrtoint i8* %422 to i64
  %sub.ptr.sub517 = sub i64 %sub.ptr.lhs.cast515, %sub.ptr.rhs.cast516
  store i64 %sub.ptr.sub517, i64* %offset503, align 8
  %423 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8518 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %423, i32 0, i32 25
  %424 = load i32, i32* %utf8518, align 8
  %tobool519 = icmp ne i32 %424, 0
  %425 = zext i1 %tobool519 to i64
  %cond520 = select i1 %tobool519, i32 1, i32 0
  %tobool521 = icmp ne i32 %cond520, 0
  %426 = zext i1 %tobool521 to i64
  %cond522 = select i1 %tobool521, i32 1, i32 0
  %427 = load i64, i64* %offset503, align 8
  %428 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp523 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %428, i32 0, i32 2
  %429 = load i8*, i8** %precomp523, align 8
  %430 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8524 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %430, i32 0, i32 25
  %431 = load i32, i32* %utf8524, align 8
  %tobool525 = icmp ne i32 %431, 0
  %432 = zext i1 %tobool525 to i64
  %cond526 = select i1 %tobool525, i32 1, i32 0
  %tobool527 = icmp ne i32 %cond526, 0
  %433 = zext i1 %tobool527 to i64
  %cond528 = select i1 %tobool527, i32 1, i32 0
  %434 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end529 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %434, i32 0, i32 7
  %435 = load i8*, i8** %end529, align 8
  %436 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp530 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %436, i32 0, i32 2
  %437 = load i8*, i8** %precomp530, align 8
  %sub.ptr.lhs.cast531 = ptrtoint i8* %435 to i64
  %sub.ptr.rhs.cast532 = ptrtoint i8* %437 to i64
  %sub.ptr.sub533 = sub i64 %sub.ptr.lhs.cast531, %sub.ptr.rhs.cast532
  %438 = load i64, i64* %offset503, align 8
  %sub534 = sub nsw i64 %sub.ptr.sub533, %438
  %439 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp535 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %439, i32 0, i32 2
  %440 = load i8*, i8** %precomp535, align 8
  %441 = load i64, i64* %offset503, align 8
  %add.ptr536 = getelementptr inbounds i8, i8* %440, i64 %441
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.239, i64 0, i64 0), i32 %cond522, i64 %427, i8* %429, i32 %cond528, i64 %sub534, i8* %add.ptr536)
  br label %do.end537

do.end537:                                        ; preds = %cond.end512
  br label %do.end538

do.end538:                                        ; preds = %do.end537
  br label %if.end539

if.end539:                                        ; preds = %do.end538, %if.then488
  %442 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse540 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %442, i32 0, i32 8
  %443 = load i8*, i8** %parse540, align 8
  %incdec.ptr541 = getelementptr inbounds i8, i8* %443, i32 1
  store i8* %incdec.ptr541, i8** %parse540, align 8
  %444 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse542 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %444, i32 0, i32 8
  %445 = load i8*, i8** %parse542, align 8
  %incdec.ptr543 = getelementptr inbounds i8, i8* %445, i32 1
  store i8* %incdec.ptr543, i8** %parse542, align 8
  %446 = load i8, i8* %445, align 1
  %conv544 = sext i8 %446 to i32
  store i32 %conv544, i32* %paren.addr, align 4
  store %struct.regnode* null, %struct.regnode** %ret, align 8
  %447 = load i32, i32* %paren.addr, align 4
  switch i32 %447, label %sw.default [
    i32 80, label %sw.bb545
    i32 60, label %sw.bb738
    i32 39, label %sw.bb751
    i32 61, label %sw.bb924
    i32 33, label %sw.bb926
    i32 124, label %sw.bb940
    i32 58, label %sw.bb942
    i32 62, label %sw.bb942
    i32 36, label %sw.bb943
    i32 64, label %sw.bb943
    i32 48, label %sw.bb984
    i32 82, label %sw.bb984
    i32 38, label %sw.bb1020
    i32 43, label %sw.bb1093
    i32 45, label %sw.bb1154
    i32 49, label %sw.bb1170
    i32 50, label %sw.bb1170
    i32 51, label %sw.bb1170
    i32 52, label %sw.bb1170
    i32 53, label %sw.bb1170
    i32 54, label %sw.bb1170
    i32 55, label %sw.bb1170
    i32 56, label %sw.bb1170
    i32 57, label %sw.bb1170
    i32 63, label %sw.bb1378
    i32 123, label %sw.bb1457
    i32 40, label %sw.bb1601
    i32 91, label %sw.bb2250
    i32 0, label %sw.bb2252
  ]

sw.bb545:                                         ; preds = %if.end539
  %448 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse546 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %448, i32 0, i32 8
  %449 = load i8*, i8** %parse546, align 8
  %incdec.ptr547 = getelementptr inbounds i8, i8* %449, i32 1
  store i8* %incdec.ptr547, i8** %parse546, align 8
  %450 = load i8, i8* %449, align 1
  %conv548 = sext i8 %450 to i32
  store i32 %conv548, i32* %paren.addr, align 4
  %451 = load i32, i32* %paren.addr, align 4
  %cmp549 = icmp eq i32 %451, 60
  br i1 %cmp549, label %if.then551, label %if.else552

if.then551:                                       ; preds = %sw.bb545
  br label %named_capture

if.else552:                                       ; preds = %sw.bb545
  %452 = load i32, i32* %paren.addr, align 4
  %cmp553 = icmp eq i32 %452, 62
  br i1 %cmp553, label %if.then555, label %if.else556

if.then555:                                       ; preds = %if.else552
  br label %named_recursion

if.else556:                                       ; preds = %if.else552
  %453 = load i32, i32* %paren.addr, align 4
  %cmp557 = icmp eq i32 %453, 61
  br i1 %cmp557, label %if.then559, label %if.end668

if.then559:                                       ; preds = %if.else556
  %454 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse560 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %454, i32 0, i32 8
  %455 = load i8*, i8** %parse560, align 8
  store i8* %455, i8** %name_start, align 8
  store i32 0, i32* %num561, align 4
  %456 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %457 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit562 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %457, i32 0, i32 12
  %458 = load %struct.regnode*, %struct.regnode** %emit562, align 8
  %459 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy563 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %459, i32 0, i32 13
  %460 = bitcast %struct.regnode_ssc* %emit_dummy563 to %struct.regnode*
  %cmp564 = icmp eq %struct.regnode* %458, %460
  %461 = zext i1 %cmp564 to i64
  %cond566 = select i1 %cmp564, i32 0, i32 2
  %call567 = call %struct.sv* @S_reg_scan_name(%struct.RExC_state_t* %456, i32 %cond566)
  store %struct.sv* %call567, %struct.sv** %sv_dat, align 8
  %462 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse568 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %462, i32 0, i32 8
  %463 = load i8*, i8** %parse568, align 8
  %464 = load i8*, i8** %name_start, align 8
  %cmp569 = icmp eq i8* %463, %464
  br i1 %cmp569, label %if.then576, label %lor.lhs.false571

lor.lhs.false571:                                 ; preds = %if.then559
  %465 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse572 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %465, i32 0, i32 8
  %466 = load i8*, i8** %parse572, align 8
  %467 = load i8, i8* %466, align 1
  %conv573 = sext i8 %467 to i32
  %cmp574 = icmp ne i32 %conv573, 41
  br i1 %cmp574, label %if.then576, label %if.end617

if.then576:                                       ; preds = %lor.lhs.false571, %if.then559
  br label %do.body577

do.body577:                                       ; preds = %if.then576
  %468 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit578 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %468, i32 0, i32 12
  %469 = load %struct.regnode*, %struct.regnode** %emit578, align 8
  %470 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy579 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %470, i32 0, i32 13
  %471 = bitcast %struct.regnode_ssc* %emit_dummy579 to %struct.regnode*
  %cmp580 = icmp eq %struct.regnode* %469, %471
  br i1 %cmp580, label %if.end584, label %if.then582

if.then582:                                       ; preds = %do.body577
  %472 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv583 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %472, i32 0, i32 3
  %473 = load %struct.p5rx*, %struct.p5rx** %rx_sv583, align 8
  %474 = bitcast %struct.p5rx* %473 to i8*
  %475 = bitcast i8* %474 to %struct.sv*
  %476 = bitcast %struct.sv* %475 to i8*
  call void @Perl_save_pushptr(i8* %476, i32 11)
  br label %if.end584

if.end584:                                        ; preds = %if.then582, %do.body577
  br label %do.body585

do.body585:                                       ; preds = %if.end584
  %477 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse587 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %477, i32 0, i32 8
  %478 = load i8*, i8** %parse587, align 8
  %479 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp588 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %479, i32 0, i32 2
  %480 = load i8*, i8** %precomp588, align 8
  %sub.ptr.lhs.cast589 = ptrtoint i8* %478 to i64
  %sub.ptr.rhs.cast590 = ptrtoint i8* %480 to i64
  %sub.ptr.sub591 = sub i64 %sub.ptr.lhs.cast589, %sub.ptr.rhs.cast590
  store i64 %sub.ptr.sub591, i64* %offset586, align 8
  %481 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8592 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %481, i32 0, i32 25
  %482 = load i32, i32* %utf8592, align 8
  %tobool593 = icmp ne i32 %482, 0
  %483 = zext i1 %tobool593 to i64
  %cond594 = select i1 %tobool593, i32 1, i32 0
  %tobool595 = icmp ne i32 %cond594, 0
  %484 = load i8*, i8** %parse_start, align 8
  %485 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8596 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %485, i32 0, i32 25
  %486 = load i32, i32* %utf8596, align 8
  %tobool597 = icmp ne i32 %486, 0
  %487 = zext i1 %tobool597 to i64
  %cond598 = select i1 %tobool597, i32 1, i32 0
  %tobool599 = icmp ne i32 %cond598, 0
  %488 = zext i1 %tobool599 to i64
  %cond600 = select i1 %tobool599, i32 1, i32 0
  %489 = load i64, i64* %offset586, align 8
  %490 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp601 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %490, i32 0, i32 2
  %491 = load i8*, i8** %precomp601, align 8
  %492 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8602 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %492, i32 0, i32 25
  %493 = load i32, i32* %utf8602, align 8
  %tobool603 = icmp ne i32 %493, 0
  %494 = zext i1 %tobool603 to i64
  %cond604 = select i1 %tobool603, i32 1, i32 0
  %tobool605 = icmp ne i32 %cond604, 0
  %495 = zext i1 %tobool605 to i64
  %cond606 = select i1 %tobool605, i32 1, i32 0
  %496 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end607 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %496, i32 0, i32 7
  %497 = load i8*, i8** %end607, align 8
  %498 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp608 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %498, i32 0, i32 2
  %499 = load i8*, i8** %precomp608, align 8
  %sub.ptr.lhs.cast609 = ptrtoint i8* %497 to i64
  %sub.ptr.rhs.cast610 = ptrtoint i8* %499 to i64
  %sub.ptr.sub611 = sub i64 %sub.ptr.lhs.cast609, %sub.ptr.rhs.cast610
  %500 = load i64, i64* %offset586, align 8
  %sub612 = sub nsw i64 %sub.ptr.sub611, %500
  %501 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp613 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %501, i32 0, i32 2
  %502 = load i8*, i8** %precomp613, align 8
  %503 = load i64, i64* %offset586, align 8
  %add.ptr614 = getelementptr inbounds i8, i8* %502, i64 %503
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool595, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.240, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i8* %484, i32 %cond600, i64 %489, i8* %491, i32 %cond606, i64 %sub612, i8* %add.ptr614)
  br label %do.end615

do.end615:                                        ; preds = %do.body585
  br label %do.end616

do.end616:                                        ; preds = %do.end615
  br label %if.end617

if.end617:                                        ; preds = %do.end616, %lor.lhs.false571
  %504 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit618 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %504, i32 0, i32 12
  %505 = load %struct.regnode*, %struct.regnode** %emit618, align 8
  %506 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy619 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %506, i32 0, i32 13
  %507 = bitcast %struct.regnode_ssc* %emit_dummy619 to %struct.regnode*
  %cmp620 = icmp eq %struct.regnode* %505, %507
  br i1 %cmp620, label %if.end634, label %if.then622

if.then622:                                       ; preds = %if.end617
  %508 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call623 = call i32 @S_add_data(%struct.RExC_state_t* %508, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.238, i64 0, i64 0), i32 1)
  store i32 %call623, i32* %num561, align 4
  %509 = load %struct.sv*, %struct.sv** %sv_dat, align 8
  %510 = bitcast %struct.sv* %509 to i8*
  %511 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi624 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %511, i32 0, i32 5
  %512 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi624, align 8
  %data625 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %512, i32 0, i32 3
  %513 = load %struct.reg_data*, %struct.reg_data** %data625, align 8
  %data626 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %513, i32 0, i32 2
  %514 = load i32, i32* %num561, align 4
  %idxprom627 = zext i32 %514 to i64
  %arrayidx628 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data626, i64 0, i64 %idxprom627
  store i8* %510, i8** %arrayidx628, align 8
  br label %do.body629

do.body629:                                       ; preds = %if.then622
  %515 = load %struct.sv*, %struct.sv** %sv_dat, align 8
  %tobool630 = icmp ne %struct.sv* %515, null
  br i1 %tobool630, label %if.then631, label %if.end632

if.then631:                                       ; preds = %do.body629
  %516 = load %struct.sv*, %struct.sv** %sv_dat, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %516, i32 0, i32 1
  %517 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %517, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end632

if.end632:                                        ; preds = %if.then631, %do.body629
  br label %do.end633

do.end633:                                        ; preds = %if.end632
  br label %if.end634

if.end634:                                        ; preds = %do.end633, %if.end617
  %518 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %sawback = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %518, i32 0, i32 15
  store i32 1, i32* %sawback, align 4
  %519 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %520 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags635 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %520, i32 0, i32 0
  %521 = load i32, i32* %flags635, align 8
  %and = and i32 %521, 4
  %tobool636 = icmp ne i32 %and, 0
  br i1 %tobool636, label %cond.true637, label %cond.false638

cond.true637:                                     ; preds = %if.end634
  br i1 true, label %cond.false640, label %cond.true639

cond.false638:                                    ; preds = %if.end634
  br i1 false, label %cond.false640, label %cond.true639

cond.true639:                                     ; preds = %cond.false638, %cond.true637
  br label %cond.end662

cond.false640:                                    ; preds = %cond.false638, %cond.true637
  %522 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags641 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %522, i32 0, i32 0
  %523 = load i32, i32* %flags641, align 8
  %call642 = call i32 @get_regex_charset(i32 %523)
  %cmp643 = icmp eq i32 %call642, 4
  br i1 %cmp643, label %cond.true645, label %cond.false646

cond.true645:                                     ; preds = %cond.false640
  br label %cond.end660

cond.false646:                                    ; preds = %cond.false640
  %524 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags647 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %524, i32 0, i32 0
  %525 = load i32, i32* %flags647, align 8
  %call648 = call i32 @get_regex_charset(i32 %525)
  %cmp649 = icmp uge i32 %call648, 2
  br i1 %cmp649, label %cond.true651, label %cond.false652

cond.true651:                                     ; preds = %cond.false646
  br label %cond.end658

cond.false652:                                    ; preds = %cond.false646
  %526 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags653 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %526, i32 0, i32 0
  %527 = load i32, i32* %flags653, align 8
  %call654 = call i32 @get_regex_charset(i32 %527)
  %cmp655 = icmp eq i32 %call654, 1
  %528 = zext i1 %cmp655 to i64
  %cond657 = select i1 %cmp655, i32 58, i32 57
  br label %cond.end658

cond.end658:                                      ; preds = %cond.false652, %cond.true651
  %cond659 = phi i32 [ 59, %cond.true651 ], [ %cond657, %cond.false652 ]
  br label %cond.end660

cond.end660:                                      ; preds = %cond.end658, %cond.true645
  %cond661 = phi i32 [ 60, %cond.true645 ], [ %cond659, %cond.end658 ]
  br label %cond.end662

cond.end662:                                      ; preds = %cond.end660, %cond.true639
  %cond663 = phi i32 [ 56, %cond.true639 ], [ %cond661, %cond.end660 ]
  %conv664 = trunc i32 %cond663 to i8
  %529 = load i32, i32* %num561, align 4
  %call665 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %519, i8 zeroext %conv664, i32 %529)
  store %struct.regnode* %call665, %struct.regnode** %ret, align 8
  %530 = load i32*, i32** %flagp.addr, align 8
  %531 = load i32, i32* %530, align 4
  %or666 = or i32 %531, 1
  store i32 %or666, i32* %530, align 4
  %532 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call667 = call i8* @S_nextchar(%struct.RExC_state_t* %532)
  %533 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %533, %struct.regnode** %retval, align 8
  br label %return

if.end668:                                        ; preds = %if.else556
  br label %if.end669

if.end669:                                        ; preds = %if.end668
  br label %if.end670

if.end670:                                        ; preds = %if.end669
  %534 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse671 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %534, i32 0, i32 8
  %535 = load i8*, i8** %parse671, align 8
  %incdec.ptr672 = getelementptr inbounds i8, i8* %535, i32 -1
  store i8* %incdec.ptr672, i8** %parse671, align 8
  %536 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse673 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %536, i32 0, i32 8
  %537 = load i8*, i8** %parse673, align 8
  %538 = load i8, i8* %537, align 1
  %tobool674 = icmp ne i8 %538, 0
  br i1 %tobool674, label %cond.false676, label %cond.true675

cond.true675:                                     ; preds = %if.end670
  br label %cond.end689

cond.false676:                                    ; preds = %if.end670
  %539 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8677 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %539, i32 0, i32 25
  %540 = load i32, i32* %utf8677, align 8
  %tobool678 = icmp ne i32 %540, 0
  br i1 %tobool678, label %cond.true679, label %cond.false680

cond.true679:                                     ; preds = %cond.false676
  br i1 true, label %cond.true681, label %cond.false686

cond.false680:                                    ; preds = %cond.false676
  br i1 false, label %cond.true681, label %cond.false686

cond.true681:                                     ; preds = %cond.false680, %cond.true679
  %541 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse682 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %541, i32 0, i32 8
  %542 = load i8*, i8** %parse682, align 8
  %543 = load i8, i8* %542, align 1
  %idxprom683 = zext i8 %543 to i64
  %arrayidx684 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom683
  %544 = load i8, i8* %arrayidx684, align 1
  %conv685 = zext i8 %544 to i32
  br label %cond.end687

cond.false686:                                    ; preds = %cond.false680, %cond.true679
  br label %cond.end687

cond.end687:                                      ; preds = %cond.false686, %cond.true681
  %cond688 = phi i32 [ %conv685, %cond.true681 ], [ 1, %cond.false686 ]
  br label %cond.end689

cond.end689:                                      ; preds = %cond.end687, %cond.true675
  %cond690 = phi i32 [ 0, %cond.true675 ], [ %cond688, %cond.end687 ]
  %545 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse691 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %545, i32 0, i32 8
  %546 = load i8*, i8** %parse691, align 8
  %idx.ext692 = sext i32 %cond690 to i64
  %add.ptr693 = getelementptr inbounds i8, i8* %546, i64 %idx.ext692
  store i8* %add.ptr693, i8** %parse691, align 8
  br label %do.body694

do.body694:                                       ; preds = %cond.end689
  %547 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit695 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %547, i32 0, i32 12
  %548 = load %struct.regnode*, %struct.regnode** %emit695, align 8
  %549 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy696 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %549, i32 0, i32 13
  %550 = bitcast %struct.regnode_ssc* %emit_dummy696 to %struct.regnode*
  %cmp697 = icmp eq %struct.regnode* %548, %550
  br i1 %cmp697, label %if.end701, label %if.then699

if.then699:                                       ; preds = %do.body694
  %551 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv700 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %551, i32 0, i32 3
  %552 = load %struct.p5rx*, %struct.p5rx** %rx_sv700, align 8
  %553 = bitcast %struct.p5rx* %552 to i8*
  %554 = bitcast i8* %553 to %struct.sv*
  %555 = bitcast %struct.sv* %554 to i8*
  call void @Perl_save_pushptr(i8* %555, i32 11)
  br label %if.end701

if.end701:                                        ; preds = %if.then699, %do.body694
  br label %do.body702

do.body702:                                       ; preds = %if.end701
  %556 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse704 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %556, i32 0, i32 8
  %557 = load i8*, i8** %parse704, align 8
  %558 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp705 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %558, i32 0, i32 2
  %559 = load i8*, i8** %precomp705, align 8
  %sub.ptr.lhs.cast706 = ptrtoint i8* %557 to i64
  %sub.ptr.rhs.cast707 = ptrtoint i8* %559 to i64
  %sub.ptr.sub708 = sub i64 %sub.ptr.lhs.cast706, %sub.ptr.rhs.cast707
  store i64 %sub.ptr.sub708, i64* %offset703, align 8
  %560 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8709 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %560, i32 0, i32 25
  %561 = load i32, i32* %utf8709, align 8
  %tobool710 = icmp ne i32 %561, 0
  %562 = zext i1 %tobool710 to i64
  %cond711 = select i1 %tobool710, i32 1, i32 0
  %tobool712 = icmp ne i32 %cond711, 0
  %563 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse713 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %563, i32 0, i32 8
  %564 = load i8*, i8** %parse713, align 8
  %565 = load i8*, i8** %seqstart, align 8
  %sub.ptr.lhs.cast714 = ptrtoint i8* %564 to i64
  %sub.ptr.rhs.cast715 = ptrtoint i8* %565 to i64
  %sub.ptr.sub716 = sub i64 %sub.ptr.lhs.cast714, %sub.ptr.rhs.cast715
  %566 = load i8*, i8** %seqstart, align 8
  %567 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8717 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %567, i32 0, i32 25
  %568 = load i32, i32* %utf8717, align 8
  %tobool718 = icmp ne i32 %568, 0
  %569 = zext i1 %tobool718 to i64
  %cond719 = select i1 %tobool718, i32 1, i32 0
  %tobool720 = icmp ne i32 %cond719, 0
  %570 = zext i1 %tobool720 to i64
  %cond721 = select i1 %tobool720, i32 1, i32 0
  %571 = load i64, i64* %offset703, align 8
  %572 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp722 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %572, i32 0, i32 2
  %573 = load i8*, i8** %precomp722, align 8
  %574 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8723 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %574, i32 0, i32 25
  %575 = load i32, i32* %utf8723, align 8
  %tobool724 = icmp ne i32 %575, 0
  %576 = zext i1 %tobool724 to i64
  %cond725 = select i1 %tobool724, i32 1, i32 0
  %tobool726 = icmp ne i32 %cond725, 0
  %577 = zext i1 %tobool726 to i64
  %cond727 = select i1 %tobool726, i32 1, i32 0
  %578 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end728 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %578, i32 0, i32 7
  %579 = load i8*, i8** %end728, align 8
  %580 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp729 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %580, i32 0, i32 2
  %581 = load i8*, i8** %precomp729, align 8
  %sub.ptr.lhs.cast730 = ptrtoint i8* %579 to i64
  %sub.ptr.rhs.cast731 = ptrtoint i8* %581 to i64
  %sub.ptr.sub732 = sub i64 %sub.ptr.lhs.cast730, %sub.ptr.rhs.cast731
  %582 = load i64, i64* %offset703, align 8
  %sub733 = sub nsw i64 %sub.ptr.sub732, %582
  %583 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp734 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %583, i32 0, i32 2
  %584 = load i8*, i8** %precomp734, align 8
  %585 = load i64, i64* %offset703, align 8
  %add.ptr735 = getelementptr inbounds i8, i8* %584, i64 %585
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool712, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.241, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i64 %sub.ptr.sub716, i8* %566, i32 %cond721, i64 %571, i8* %573, i32 %cond727, i64 %sub733, i8* %add.ptr735)
  br label %do.end736

do.end736:                                        ; preds = %do.body702
  br label %do.end737

do.end737:                                        ; preds = %do.end736
  br label %sw.bb738

sw.bb738:                                         ; preds = %if.end539, %do.end737
  %586 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse739 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %586, i32 0, i32 8
  %587 = load i8*, i8** %parse739, align 8
  %588 = load i8, i8* %587, align 1
  %conv740 = sext i8 %588 to i32
  %cmp741 = icmp eq i32 %conv740, 33
  br i1 %cmp741, label %if.then743, label %if.else744

if.then743:                                       ; preds = %sw.bb738
  store i32 44, i32* %paren.addr, align 4
  br label %if.end918

if.else744:                                       ; preds = %sw.bb738
  %589 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse745 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %589, i32 0, i32 8
  %590 = load i8*, i8** %parse745, align 8
  %591 = load i8, i8* %590, align 1
  %conv746 = sext i8 %591 to i32
  %cmp747 = icmp ne i32 %conv746, 61
  br i1 %cmp747, label %if.then749, label %if.end917

if.then749:                                       ; preds = %if.else744
  br label %named_capture

named_capture:                                    ; preds = %if.then749, %if.then551
  store i32 62, i32* %paren.addr, align 4
  br label %sw.bb751

sw.bb751:                                         ; preds = %if.end539, %named_capture
  %592 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse752 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %592, i32 0, i32 8
  %593 = load i8*, i8** %parse752, align 8
  store i8* %593, i8** %name_start750, align 8
  %594 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %595 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit753 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %595, i32 0, i32 12
  %596 = load %struct.regnode*, %struct.regnode** %emit753, align 8
  %597 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy754 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %597, i32 0, i32 13
  %598 = bitcast %struct.regnode_ssc* %emit_dummy754 to %struct.regnode*
  %cmp755 = icmp eq %struct.regnode* %596, %598
  %599 = zext i1 %cmp755 to i64
  %cond757 = select i1 %cmp755, i32 1, i32 0
  %call758 = call %struct.sv* @S_reg_scan_name(%struct.RExC_state_t* %594, i32 %cond757)
  store %struct.sv* %call758, %struct.sv** %svname, align 8
  %600 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse759 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %600, i32 0, i32 8
  %601 = load i8*, i8** %parse759, align 8
  %602 = load i8*, i8** %name_start750, align 8
  %cmp760 = icmp eq i8* %601, %602
  br i1 %cmp760, label %if.then767, label %lor.lhs.false762

lor.lhs.false762:                                 ; preds = %sw.bb751
  %603 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse763 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %603, i32 0, i32 8
  %604 = load i8*, i8** %parse763, align 8
  %605 = load i8, i8* %604, align 1
  %conv764 = sext i8 %605 to i32
  %606 = load i32, i32* %paren.addr, align 4
  %cmp765 = icmp ne i32 %conv764, %606
  br i1 %cmp765, label %if.then767, label %if.end814

if.then767:                                       ; preds = %lor.lhs.false762, %sw.bb751
  br label %do.body768

do.body768:                                       ; preds = %if.then767
  %607 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit769 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %607, i32 0, i32 12
  %608 = load %struct.regnode*, %struct.regnode** %emit769, align 8
  %609 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy770 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %609, i32 0, i32 13
  %610 = bitcast %struct.regnode_ssc* %emit_dummy770 to %struct.regnode*
  %cmp771 = icmp eq %struct.regnode* %608, %610
  br i1 %cmp771, label %if.end775, label %if.then773

if.then773:                                       ; preds = %do.body768
  %611 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv774 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %611, i32 0, i32 3
  %612 = load %struct.p5rx*, %struct.p5rx** %rx_sv774, align 8
  %613 = bitcast %struct.p5rx* %612 to i8*
  %614 = bitcast i8* %613 to %struct.sv*
  %615 = bitcast %struct.sv* %614 to i8*
  call void @Perl_save_pushptr(i8* %615, i32 11)
  br label %if.end775

if.end775:                                        ; preds = %if.then773, %do.body768
  br label %do.body776

do.body776:                                       ; preds = %if.end775
  %616 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse778 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %616, i32 0, i32 8
  %617 = load i8*, i8** %parse778, align 8
  %618 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp779 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %618, i32 0, i32 2
  %619 = load i8*, i8** %precomp779, align 8
  %sub.ptr.lhs.cast780 = ptrtoint i8* %617 to i64
  %sub.ptr.rhs.cast781 = ptrtoint i8* %619 to i64
  %sub.ptr.sub782 = sub i64 %sub.ptr.lhs.cast780, %sub.ptr.rhs.cast781
  store i64 %sub.ptr.sub782, i64* %offset777, align 8
  %620 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8783 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %620, i32 0, i32 25
  %621 = load i32, i32* %utf8783, align 8
  %tobool784 = icmp ne i32 %621, 0
  %622 = zext i1 %tobool784 to i64
  %cond785 = select i1 %tobool784, i32 1, i32 0
  %tobool786 = icmp ne i32 %cond785, 0
  %623 = load i32, i32* %paren.addr, align 4
  %cmp787 = icmp eq i32 %623, 62
  br i1 %cmp787, label %cond.true789, label %cond.false790

cond.true789:                                     ; preds = %do.body776
  br label %cond.end791

cond.false790:                                    ; preds = %do.body776
  %624 = load i32, i32* %paren.addr, align 4
  br label %cond.end791

cond.end791:                                      ; preds = %cond.false790, %cond.true789
  %cond792 = phi i32 [ 60, %cond.true789 ], [ %624, %cond.false790 ]
  %625 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8793 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %625, i32 0, i32 25
  %626 = load i32, i32* %utf8793, align 8
  %tobool794 = icmp ne i32 %626, 0
  %627 = zext i1 %tobool794 to i64
  %cond795 = select i1 %tobool794, i32 1, i32 0
  %tobool796 = icmp ne i32 %cond795, 0
  %628 = zext i1 %tobool796 to i64
  %cond797 = select i1 %tobool796, i32 1, i32 0
  %629 = load i64, i64* %offset777, align 8
  %630 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp798 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %630, i32 0, i32 2
  %631 = load i8*, i8** %precomp798, align 8
  %632 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8799 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %632, i32 0, i32 25
  %633 = load i32, i32* %utf8799, align 8
  %tobool800 = icmp ne i32 %633, 0
  %634 = zext i1 %tobool800 to i64
  %cond801 = select i1 %tobool800, i32 1, i32 0
  %tobool802 = icmp ne i32 %cond801, 0
  %635 = zext i1 %tobool802 to i64
  %cond803 = select i1 %tobool802, i32 1, i32 0
  %636 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end804 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %636, i32 0, i32 7
  %637 = load i8*, i8** %end804, align 8
  %638 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp805 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %638, i32 0, i32 2
  %639 = load i8*, i8** %precomp805, align 8
  %sub.ptr.lhs.cast806 = ptrtoint i8* %637 to i64
  %sub.ptr.rhs.cast807 = ptrtoint i8* %639 to i64
  %sub.ptr.sub808 = sub i64 %sub.ptr.lhs.cast806, %sub.ptr.rhs.cast807
  %640 = load i64, i64* %offset777, align 8
  %sub809 = sub nsw i64 %sub.ptr.sub808, %640
  %641 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp810 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %641, i32 0, i32 2
  %642 = load i8*, i8** %precomp810, align 8
  %643 = load i64, i64* %offset777, align 8
  %add.ptr811 = getelementptr inbounds i8, i8* %642, i64 %643
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool786, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.242, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %cond792, i32 %cond797, i64 %629, i8* %631, i32 %cond803, i64 %sub809, i8* %add.ptr811)
  br label %do.end812

do.end812:                                        ; preds = %cond.end791
  br label %do.end813

do.end813:                                        ; preds = %do.end812
  br label %if.end814

if.end814:                                        ; preds = %do.end813, %lor.lhs.false762
  %644 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit815 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %644, i32 0, i32 12
  %645 = load %struct.regnode*, %struct.regnode** %emit815, align 8
  %646 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy816 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %646, i32 0, i32 13
  %647 = bitcast %struct.regnode_ssc* %emit_dummy816 to %struct.regnode*
  %cmp817 = icmp eq %struct.regnode* %645, %647
  br i1 %cmp817, label %if.then819, label %if.end915

if.then819:                                       ; preds = %if.end814
  store %struct.sv* null, %struct.sv** %sv_dat820, align 8
  %648 = load %struct.sv*, %struct.sv** %svname, align 8
  %tobool821 = icmp ne %struct.sv* %648, null
  br i1 %tobool821, label %if.end823, label %if.then822

if.then822:                                       ; preds = %if.then819
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.243, i64 0, i64 0))
  br label %if.end823

if.end823:                                        ; preds = %if.then822, %if.then819
  %649 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %paren_names = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %649, i32 0, i32 28
  %650 = load %struct.hv*, %struct.hv** %paren_names, align 8
  %tobool824 = icmp ne %struct.hv* %650, null
  br i1 %tobool824, label %if.end830, label %if.then825

if.then825:                                       ; preds = %if.end823
  %call826 = call %struct.sv* @Perl_newSV_type(i32 12)
  %651 = bitcast %struct.sv* %call826 to i8*
  %652 = bitcast i8* %651 to %struct.hv*
  %653 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %paren_names827 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %653, i32 0, i32 28
  store %struct.hv* %652, %struct.hv** %paren_names827, align 8
  %654 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %paren_names828 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %654, i32 0, i32 28
  %655 = load %struct.hv*, %struct.hv** %paren_names828, align 8
  %656 = bitcast %struct.hv* %655 to i8*
  %657 = bitcast i8* %656 to %struct.sv*
  %call829 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %657)
  br label %if.end830

if.end830:                                        ; preds = %if.then825, %if.end823
  %658 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %paren_names831 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %658, i32 0, i32 28
  %659 = load %struct.hv*, %struct.hv** %paren_names831, align 8
  %660 = load %struct.sv*, %struct.sv** %svname, align 8
  %call832 = call i8* @Perl_hv_common(%struct.hv* %659, %struct.sv* %660, i8* null, i64 0, i32 0, i32 16, %struct.sv* null, i32 0)
  %661 = bitcast i8* %call832 to %struct.he*
  store %struct.he* %661, %struct.he** %he_str, align 8
  %662 = load %struct.he*, %struct.he** %he_str, align 8
  %tobool833 = icmp ne %struct.he* %662, null
  br i1 %tobool833, label %if.then834, label %if.end835

if.then834:                                       ; preds = %if.end830
  %663 = load %struct.he*, %struct.he** %he_str, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %663, i32 0, i32 2
  %hent_val = bitcast %union.anon.0* %he_valu to %struct.sv**
  %664 = load %struct.sv*, %struct.sv** %hent_val, align 8
  store %struct.sv* %664, %struct.sv** %sv_dat820, align 8
  br label %if.end835

if.end835:                                        ; preds = %if.then834, %if.end830
  %665 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %tobool836 = icmp ne %struct.sv* %665, null
  br i1 %tobool836, label %if.else838, label %if.then837

if.then837:                                       ; preds = %if.end835
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.244, i64 0, i64 0))
  br label %if.end914

if.else838:                                       ; preds = %if.end835
  %666 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %666, i32 0, i32 2
  %667 = load i32, i32* %sv_flags, align 4
  %and839 = and i32 %667, 1024
  %tobool840 = icmp ne i32 %and839, 0
  br i1 %tobool840, label %if.then841, label %if.else900

if.then841:                                       ; preds = %if.else838
  %668 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_flags842 = getelementptr inbounds %struct.sv, %struct.sv* %668, i32 0, i32 2
  %669 = load i32, i32* %sv_flags842, align 4
  %and843 = and i32 %669, 2097408
  %cmp844 = icmp eq i32 %and843, 256
  br i1 %cmp844, label %cond.true846, label %cond.false847

cond.true846:                                     ; preds = %if.then841
  %670 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %670, i32 0, i32 0
  %671 = load i8*, i8** %sv_any, align 8
  %672 = bitcast i8* %671 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %672, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %673 = load i64, i64* %xivu_iv, align 8
  br label %cond.end849

cond.false847:                                    ; preds = %if.then841
  %674 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %call848 = call i64 @Perl_sv_2iv_flags(%struct.sv* %674, i32 2)
  br label %cond.end849

cond.end849:                                      ; preds = %cond.false847, %cond.true846
  %cond850 = phi i64 [ %673, %cond.true846 ], [ %call848, %cond.false847 ]
  store i64 %cond850, i64* %count, align 8
  %675 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %675, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %676 = load i8*, i8** %svu_pv, align 8
  %677 = bitcast i8* %676 to i32*
  store i32* %677, i32** %pv, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end849
  %678 = load i64, i64* %i, align 8
  %679 = load i64, i64* %count, align 8
  %cmp851 = icmp slt i64 %678, %679
  br i1 %cmp851, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %680 = load i32*, i32** %pv, align 8
  %681 = load i64, i64* %i, align 8
  %arrayidx853 = getelementptr inbounds i32, i32* %680, i64 %681
  %682 = load i32, i32* %arrayidx853, align 4
  %683 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %683, i32 0, i32 18
  %684 = load i32, i32* %npar, align 8
  %cmp854 = icmp eq i32 %682, %684
  br i1 %cmp854, label %if.then856, label %if.end857

if.then856:                                       ; preds = %for.body
  store i64 0, i64* %count, align 8
  br label %for.end

if.end857:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end857
  %685 = load i64, i64* %i, align 8
  %inc858 = add nsw i64 %685, 1
  store i64 %inc858, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then856, %for.cond
  %686 = load i64, i64* %count, align 8
  %tobool859 = icmp ne i64 %686, 0
  br i1 %tobool859, label %if.then860, label %if.end899

if.then860:                                       ; preds = %for.end
  %687 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_flags861 = getelementptr inbounds %struct.sv, %struct.sv* %687, i32 0, i32 2
  %688 = load i32, i32* %sv_flags861, align 4
  %and862 = and i32 %688, 268435456
  %tobool863 = icmp ne i32 %and862, 0
  br i1 %tobool863, label %cond.true870, label %lor.lhs.false864

lor.lhs.false864:                                 ; preds = %if.then860
  %689 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_any865 = getelementptr inbounds %struct.sv, %struct.sv* %689, i32 0, i32 0
  %690 = load i8*, i8** %sv_any865, align 8
  %691 = bitcast i8* %690 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %691, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %692 = load i64, i64* %xpvlenu_len, align 8
  %693 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_any866 = getelementptr inbounds %struct.sv, %struct.sv* %693, i32 0, i32 0
  %694 = load i8*, i8** %sv_any866, align 8
  %695 = bitcast i8* %694 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %695, i32 0, i32 2
  %696 = load i64, i64* %xpv_cur, align 8
  %add = add i64 %696, 4
  %add867 = add i64 %add, 1
  %cmp868 = icmp ult i64 %692, %add867
  br i1 %cmp868, label %cond.true870, label %cond.false876

cond.true870:                                     ; preds = %lor.lhs.false864, %if.then860
  %697 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %698 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_any871 = getelementptr inbounds %struct.sv, %struct.sv* %698, i32 0, i32 0
  %699 = load i8*, i8** %sv_any871, align 8
  %700 = bitcast i8* %699 to %struct.xpv*
  %xpv_cur872 = getelementptr inbounds %struct.xpv, %struct.xpv* %700, i32 0, i32 2
  %701 = load i64, i64* %xpv_cur872, align 8
  %add873 = add i64 %701, 4
  %add874 = add i64 %add873, 1
  %call875 = call i8* @Perl_sv_grow(%struct.sv* %697, i64 %add874)
  br label %cond.end879

cond.false876:                                    ; preds = %lor.lhs.false864
  %702 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_u877 = getelementptr inbounds %struct.sv, %struct.sv* %702, i32 0, i32 3
  %svu_pv878 = bitcast %union.anon* %sv_u877 to i8**
  %703 = load i8*, i8** %svu_pv878, align 8
  br label %cond.end879

cond.end879:                                      ; preds = %cond.false876, %cond.true870
  %cond880 = phi i8* [ %call875, %cond.true870 ], [ %703, %cond.false876 ]
  %704 = bitcast i8* %cond880 to i32*
  store i32* %704, i32** %pv, align 8
  br label %do.body881

do.body881:                                       ; preds = %cond.end879
  %705 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_any882 = getelementptr inbounds %struct.sv, %struct.sv* %705, i32 0, i32 0
  %706 = load i8*, i8** %sv_any882, align 8
  %707 = bitcast i8* %706 to %struct.xpv*
  %xpv_cur883 = getelementptr inbounds %struct.xpv, %struct.xpv* %707, i32 0, i32 2
  %708 = load i64, i64* %xpv_cur883, align 8
  %add884 = add i64 %708, 4
  %709 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_any885 = getelementptr inbounds %struct.sv, %struct.sv* %709, i32 0, i32 0
  %710 = load i8*, i8** %sv_any885, align 8
  %711 = bitcast i8* %710 to %struct.xpv*
  %xpv_cur886 = getelementptr inbounds %struct.xpv, %struct.xpv* %711, i32 0, i32 2
  store i64 %add884, i64* %xpv_cur886, align 8
  br label %do.end887

do.end887:                                        ; preds = %do.body881
  %712 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar888 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %712, i32 0, i32 18
  %713 = load i32, i32* %npar888, align 8
  %714 = load i32*, i32** %pv, align 8
  %715 = load i64, i64* %count, align 8
  %arrayidx889 = getelementptr inbounds i32, i32* %714, i64 %715
  store i32 %713, i32* %arrayidx889, align 4
  br label %do.body890

do.body890:                                       ; preds = %do.end887
  %716 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_any891 = getelementptr inbounds %struct.sv, %struct.sv* %716, i32 0, i32 0
  %717 = load i8*, i8** %sv_any891, align 8
  %718 = bitcast i8* %717 to %struct.xpviv*
  %xiv_u892 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %718, i32 0, i32 4
  %xivu_iv893 = bitcast %union._xivu* %xiv_u892 to i64*
  %719 = load i64, i64* %xivu_iv893, align 8
  %add894 = add nsw i64 %719, 1
  %720 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_any895 = getelementptr inbounds %struct.sv, %struct.sv* %720, i32 0, i32 0
  %721 = load i8*, i8** %sv_any895, align 8
  %722 = bitcast i8* %721 to %struct.xpviv*
  %xiv_u896 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %722, i32 0, i32 4
  %xivu_iv897 = bitcast %union._xivu* %xiv_u896 to i64*
  store i64 %add894, i64* %xivu_iv897, align 8
  br label %do.end898

do.end898:                                        ; preds = %do.body890
  br label %if.end899

if.end899:                                        ; preds = %do.end898, %for.end
  br label %if.end913

if.else900:                                       ; preds = %if.else838
  %723 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_flags901 = getelementptr inbounds %struct.sv, %struct.sv* %723, i32 0, i32 2
  %724 = load i32, i32* %sv_flags901, align 4
  %and902 = and i32 %724, 255
  %cmp903 = icmp uge i32 %and902, 6
  br i1 %cmp903, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.else900
  %725 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  call void @Perl_sv_upgrade(%struct.sv* %725, i32 6)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.else900
  %726 = phi i1 [ true, %if.else900 ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %726 to i32
  %727 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %728 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar905 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %728, i32 0, i32 18
  %729 = bitcast i32* %npar905 to i8*
  call void @Perl_sv_setpvn(%struct.sv* %727, i8* %729, i64 4)
  %730 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_flags906 = getelementptr inbounds %struct.sv, %struct.sv* %730, i32 0, i32 2
  %731 = load i32, i32* %sv_flags906, align 4
  %or907 = or i32 %731, 4352
  store i32 %or907, i32* %sv_flags906, align 4
  br label %do.body908

do.body908:                                       ; preds = %lor.end
  %732 = load %struct.sv*, %struct.sv** %sv_dat820, align 8
  %sv_any909 = getelementptr inbounds %struct.sv, %struct.sv* %732, i32 0, i32 0
  %733 = load i8*, i8** %sv_any909, align 8
  %734 = bitcast i8* %733 to %struct.xpviv*
  %xiv_u910 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %734, i32 0, i32 4
  %xivu_iv911 = bitcast %union._xivu* %xiv_u910 to i64*
  store i64 1, i64* %xivu_iv911, align 8
  br label %do.end912

do.end912:                                        ; preds = %do.body908
  br label %if.end913

if.end913:                                        ; preds = %do.end912, %if.end899
  br label %if.end914

if.end914:                                        ; preds = %if.end913, %if.then837
  br label %if.end915

if.end915:                                        ; preds = %if.end914, %if.end814
  %735 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call916 = call i8* @S_nextchar(%struct.RExC_state_t* %735)
  store i32 1, i32* %paren.addr, align 4
  br label %capturing_parens

if.end917:                                        ; preds = %if.else744
  br label %if.end918

if.end918:                                        ; preds = %if.end917, %if.then743
  %736 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen919 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %736, i32 0, i32 16
  %737 = load i32, i32* %seen919, align 8
  %or920 = or i32 %737, 2
  store i32 %or920, i32* %seen919, align 8
  %738 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %in_lookbehind = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %738, i32 0, i32 33
  %739 = load i32, i32* %in_lookbehind, align 4
  %inc921 = add nsw i32 %739, 1
  store i32 %inc921, i32* %in_lookbehind, align 4
  %740 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse922 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %740, i32 0, i32 8
  %741 = load i8*, i8** %parse922, align 8
  %incdec.ptr923 = getelementptr inbounds i8, i8* %741, i32 1
  store i8* %incdec.ptr923, i8** %parse922, align 8
  br label %sw.bb924

sw.bb924:                                         ; preds = %if.end539, %if.end918
  %742 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %742, i32 0, i32 21
  %743 = load i32, i32* %seen_zerolen, align 4
  %inc925 = add nsw i32 %743, 1
  store i32 %inc925, i32* %seen_zerolen, align 4
  br label %sw.epilog2314

sw.bb926:                                         ; preds = %if.end539
  %744 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen927 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %744, i32 0, i32 21
  %745 = load i32, i32* %seen_zerolen927, align 4
  %inc928 = add nsw i32 %745, 1
  store i32 %inc928, i32* %seen_zerolen927, align 4
  %746 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse929 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %746, i32 0, i32 8
  %747 = load i8*, i8** %parse929, align 8
  %incdec.ptr930 = getelementptr inbounds i8, i8* %747, i32 -1
  store i8* %incdec.ptr930, i8** %parse929, align 8
  %748 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call931 = call i8* @S_nextchar(%struct.RExC_state_t* %748)
  %749 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse932 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %749, i32 0, i32 8
  %750 = load i8*, i8** %parse932, align 8
  %751 = load i8, i8* %750, align 1
  %conv933 = sext i8 %751 to i32
  %cmp934 = icmp eq i32 %conv933, 41
  br i1 %cmp934, label %if.then936, label %if.end939

if.then936:                                       ; preds = %sw.bb926
  %752 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call937 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %752, i8 zeroext 82)
  store %struct.regnode* %call937, %struct.regnode** %ret, align 8
  %753 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call938 = call i8* @S_nextchar(%struct.RExC_state_t* %753)
  %754 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %754, %struct.regnode** %retval, align 8
  br label %return

if.end939:                                        ; preds = %sw.bb926
  br label %sw.epilog2314

sw.bb940:                                         ; preds = %if.end539
  store i32 58, i32* %paren.addr, align 4
  %755 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar941 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %755, i32 0, i32 18
  %756 = load i32, i32* %npar941, align 8
  store i32 %756, i32* %freeze_paren, align 4
  store i32 %756, i32* %after_freeze, align 4
  br label %sw.epilog2314

sw.bb942:                                         ; preds = %if.end539, %if.end539
  br label %sw.epilog2314

sw.bb943:                                         ; preds = %if.end539, %if.end539
  br label %do.body944

do.body944:                                       ; preds = %sw.bb943
  %757 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit945 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %757, i32 0, i32 12
  %758 = load %struct.regnode*, %struct.regnode** %emit945, align 8
  %759 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy946 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %759, i32 0, i32 13
  %760 = bitcast %struct.regnode_ssc* %emit_dummy946 to %struct.regnode*
  %cmp947 = icmp eq %struct.regnode* %758, %760
  br i1 %cmp947, label %if.end951, label %if.then949

if.then949:                                       ; preds = %do.body944
  %761 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv950 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %761, i32 0, i32 3
  %762 = load %struct.p5rx*, %struct.p5rx** %rx_sv950, align 8
  %763 = bitcast %struct.p5rx* %762 to i8*
  %764 = bitcast i8* %763 to %struct.sv*
  %765 = bitcast %struct.sv* %764 to i8*
  call void @Perl_save_pushptr(i8* %765, i32 11)
  br label %if.end951

if.end951:                                        ; preds = %if.then949, %do.body944
  br label %do.body952

do.body952:                                       ; preds = %if.end951
  %766 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse954 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %766, i32 0, i32 8
  %767 = load i8*, i8** %parse954, align 8
  %768 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp955 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %768, i32 0, i32 2
  %769 = load i8*, i8** %precomp955, align 8
  %sub.ptr.lhs.cast956 = ptrtoint i8* %767 to i64
  %sub.ptr.rhs.cast957 = ptrtoint i8* %769 to i64
  %sub.ptr.sub958 = sub i64 %sub.ptr.lhs.cast956, %sub.ptr.rhs.cast957
  store i64 %sub.ptr.sub958, i64* %offset953, align 8
  %770 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8959 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %770, i32 0, i32 25
  %771 = load i32, i32* %utf8959, align 8
  %tobool960 = icmp ne i32 %771, 0
  %772 = zext i1 %tobool960 to i64
  %cond961 = select i1 %tobool960, i32 1, i32 0
  %tobool962 = icmp ne i32 %cond961, 0
  %773 = load i32, i32* %paren.addr, align 4
  %774 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8963 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %774, i32 0, i32 25
  %775 = load i32, i32* %utf8963, align 8
  %tobool964 = icmp ne i32 %775, 0
  %776 = zext i1 %tobool964 to i64
  %cond965 = select i1 %tobool964, i32 1, i32 0
  %tobool966 = icmp ne i32 %cond965, 0
  %777 = zext i1 %tobool966 to i64
  %cond967 = select i1 %tobool966, i32 1, i32 0
  %778 = load i64, i64* %offset953, align 8
  %779 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp968 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %779, i32 0, i32 2
  %780 = load i8*, i8** %precomp968, align 8
  %781 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8969 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %781, i32 0, i32 25
  %782 = load i32, i32* %utf8969, align 8
  %tobool970 = icmp ne i32 %782, 0
  %783 = zext i1 %tobool970 to i64
  %cond971 = select i1 %tobool970, i32 1, i32 0
  %tobool972 = icmp ne i32 %cond971, 0
  %784 = zext i1 %tobool972 to i64
  %cond973 = select i1 %tobool972, i32 1, i32 0
  %785 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end974 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %785, i32 0, i32 7
  %786 = load i8*, i8** %end974, align 8
  %787 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp975 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %787, i32 0, i32 2
  %788 = load i8*, i8** %precomp975, align 8
  %sub.ptr.lhs.cast976 = ptrtoint i8* %786 to i64
  %sub.ptr.rhs.cast977 = ptrtoint i8* %788 to i64
  %sub.ptr.sub978 = sub i64 %sub.ptr.lhs.cast976, %sub.ptr.rhs.cast977
  %789 = load i64, i64* %offset953, align 8
  %sub979 = sub nsw i64 %sub.ptr.sub978, %789
  %790 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp980 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %790, i32 0, i32 2
  %791 = load i8*, i8** %precomp980, align 8
  %792 = load i64, i64* %offset953, align 8
  %add.ptr981 = getelementptr inbounds i8, i8* %791, i64 %792
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool962, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.245, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %773, i32 %cond967, i64 %778, i8* %780, i32 %cond973, i64 %sub979, i8* %add.ptr981)
  br label %do.end982

do.end982:                                        ; preds = %do.body952
  br label %do.end983

do.end983:                                        ; preds = %do.end982
  br label %sw.epilog2314

sw.bb984:                                         ; preds = %if.end539, %if.end539
  %793 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse985 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %793, i32 0, i32 8
  %794 = load i8*, i8** %parse985, align 8
  %795 = load i8, i8* %794, align 1
  %conv986 = sext i8 %795 to i32
  %cmp987 = icmp ne i32 %conv986, 41
  br i1 %cmp987, label %if.then989, label %if.end1014

if.then989:                                       ; preds = %sw.bb984
  br label %do.body990

do.body990:                                       ; preds = %if.then989
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses, align 8
  %796 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end991 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %796, i32 0, i32 7
  %797 = load i8*, i8** %end991, align 8
  %798 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp992 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %798, i32 0, i32 2
  %799 = load i8*, i8** %precomp992, align 8
  %sub.ptr.lhs.cast993 = ptrtoint i8* %797 to i64
  %sub.ptr.rhs.cast994 = ptrtoint i8* %799 to i64
  %sub.ptr.sub995 = sub i64 %sub.ptr.lhs.cast993, %sub.ptr.rhs.cast994
  store i64 %sub.ptr.sub995, i64* %len, align 8
  %800 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit996 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %800, i32 0, i32 12
  %801 = load %struct.regnode*, %struct.regnode** %emit996, align 8
  %802 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy997 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %802, i32 0, i32 13
  %803 = bitcast %struct.regnode_ssc* %emit_dummy997 to %struct.regnode*
  %cmp998 = icmp eq %struct.regnode* %801, %803
  br i1 %cmp998, label %if.end1002, label %if.then1000

if.then1000:                                      ; preds = %do.body990
  %804 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1001 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %804, i32 0, i32 3
  %805 = load %struct.p5rx*, %struct.p5rx** %rx_sv1001, align 8
  %806 = bitcast %struct.p5rx* %805 to i8*
  %807 = bitcast i8* %806 to %struct.sv*
  %808 = bitcast %struct.sv* %807 to i8*
  call void @Perl_save_pushptr(i8* %808, i32 11)
  br label %if.end1002

if.end1002:                                       ; preds = %if.then1000, %do.body990
  %809 = load i64, i64* %len, align 8
  %cmp1003 = icmp sgt i64 %809, 127
  br i1 %cmp1003, label %if.then1005, label %if.end1006

if.then1005:                                      ; preds = %if.end1002
  store i64 117, i64* %len, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses, align 8
  br label %if.end1006

if.end1006:                                       ; preds = %if.then1005, %if.end1002
  %810 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81007 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %810, i32 0, i32 25
  %811 = load i32, i32* %utf81007, align 8
  %tobool1008 = icmp ne i32 %811, 0
  %812 = zext i1 %tobool1008 to i64
  %cond1009 = select i1 %tobool1008, i32 1, i32 0
  %tobool1010 = icmp ne i32 %cond1009, 0
  %813 = zext i1 %tobool1010 to i64
  %cond1011 = select i1 %tobool1010, i32 1, i32 0
  %814 = load i64, i64* %len, align 8
  %815 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1012 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %815, i32 0, i32 2
  %816 = load i8*, i8** %precomp1012, align 8
  %817 = load i8*, i8** %ellipses, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.246, i64 0, i64 0), i32 %cond1011, i64 %814, i8* %816, i8* %817)
  br label %do.end1013

do.end1013:                                       ; preds = %if.end1006
  br label %if.end1014

if.end1014:                                       ; preds = %do.end1013, %sw.bb984
  %818 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1015 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %818, i8 zeroext 77)
  store %struct.regnode* %call1015, %struct.regnode** %ret, align 8
  %819 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen1016 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %819, i32 0, i32 16
  %820 = load i32, i32* %seen1016, align 8
  %or1017 = or i32 %820, 2048
  store i32 %or1017, i32* %seen1016, align 8
  %821 = load i32*, i32** %flagp.addr, align 8
  %822 = load i32, i32* %821, align 4
  %or1018 = or i32 %822, 8
  store i32 %or1018, i32* %821, align 4
  %823 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1019 = call i8* @S_nextchar(%struct.RExC_state_t* %823)
  %824 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %824, %struct.regnode** %retval, align 8
  br label %return

sw.bb1020:                                        ; preds = %if.end539
  %825 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1021 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %825, i32 0, i32 8
  %826 = load i8*, i8** %parse1021, align 8
  %add.ptr1022 = getelementptr inbounds i8, i8* %826, i64 -1
  store i8* %add.ptr1022, i8** %parse_start, align 8
  br label %named_recursion

named_recursion:                                  ; preds = %sw.bb1020, %if.then555
  %827 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %828 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1024 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %828, i32 0, i32 12
  %829 = load %struct.regnode*, %struct.regnode** %emit1024, align 8
  %830 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1025 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %830, i32 0, i32 13
  %831 = bitcast %struct.regnode_ssc* %emit_dummy1025 to %struct.regnode*
  %cmp1026 = icmp eq %struct.regnode* %829, %831
  %832 = zext i1 %cmp1026 to i64
  %cond1028 = select i1 %cmp1026, i32 0, i32 2
  %call1029 = call %struct.sv* @S_reg_scan_name(%struct.RExC_state_t* %827, i32 %cond1028)
  store %struct.sv* %call1029, %struct.sv** %sv_dat1023, align 8
  %833 = load %struct.sv*, %struct.sv** %sv_dat1023, align 8
  %tobool1030 = icmp ne %struct.sv* %833, null
  br i1 %tobool1030, label %cond.true1031, label %cond.false1034

cond.true1031:                                    ; preds = %named_recursion
  %834 = load %struct.sv*, %struct.sv** %sv_dat1023, align 8
  %sv_u1032 = getelementptr inbounds %struct.sv, %struct.sv* %834, i32 0, i32 3
  %svu_pv1033 = bitcast %union.anon* %sv_u1032 to i8**
  %835 = load i8*, i8** %svu_pv1033, align 8
  %836 = bitcast i8* %835 to i32*
  %837 = load i32, i32* %836, align 4
  br label %cond.end1035

cond.false1034:                                   ; preds = %named_recursion
  br label %cond.end1035

cond.end1035:                                     ; preds = %cond.false1034, %cond.true1031
  %cond1036 = phi i32 [ %837, %cond.true1031 ], [ 0, %cond.false1034 ]
  store i32 %cond1036, i32* %num, align 4
  %838 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1037 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %838, i32 0, i32 8
  %839 = load i8*, i8** %parse1037, align 8
  %840 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1038 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %840, i32 0, i32 7
  %841 = load i8*, i8** %end1038, align 8
  %cmp1039 = icmp eq i8* %839, %841
  br i1 %cmp1039, label %if.then1046, label %lor.lhs.false1041

lor.lhs.false1041:                                ; preds = %cond.end1035
  %842 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1042 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %842, i32 0, i32 8
  %843 = load i8*, i8** %parse1042, align 8
  %844 = load i8, i8* %843, align 1
  %conv1043 = sext i8 %844 to i32
  %cmp1044 = icmp ne i32 %conv1043, 41
  br i1 %cmp1044, label %if.then1046, label %if.end1092

if.then1046:                                      ; preds = %lor.lhs.false1041, %cond.end1035
  br label %do.body1047

do.body1047:                                      ; preds = %if.then1046
  %845 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1048 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %845, i32 0, i32 12
  %846 = load %struct.regnode*, %struct.regnode** %emit1048, align 8
  %847 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1049 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %847, i32 0, i32 13
  %848 = bitcast %struct.regnode_ssc* %emit_dummy1049 to %struct.regnode*
  %cmp1050 = icmp eq %struct.regnode* %846, %848
  br i1 %cmp1050, label %if.end1054, label %if.then1052

if.then1052:                                      ; preds = %do.body1047
  %849 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1053 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %849, i32 0, i32 3
  %850 = load %struct.p5rx*, %struct.p5rx** %rx_sv1053, align 8
  %851 = bitcast %struct.p5rx* %850 to i8*
  %852 = bitcast i8* %851 to %struct.sv*
  %853 = bitcast %struct.sv* %852 to i8*
  call void @Perl_save_pushptr(i8* %853, i32 11)
  br label %if.end1054

if.end1054:                                       ; preds = %if.then1052, %do.body1047
  br label %do.body1055

do.body1055:                                      ; preds = %if.end1054
  %854 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1057 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %854, i32 0, i32 8
  %855 = load i8*, i8** %parse1057, align 8
  %856 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1058 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %856, i32 0, i32 7
  %857 = load i8*, i8** %end1058, align 8
  %cmp1059 = icmp ugt i8* %855, %857
  br i1 %cmp1059, label %cond.true1061, label %cond.false1063

cond.true1061:                                    ; preds = %do.body1055
  %858 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1062 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %858, i32 0, i32 7
  %859 = load i8*, i8** %end1062, align 8
  br label %cond.end1065

cond.false1063:                                   ; preds = %do.body1055
  %860 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1064 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %860, i32 0, i32 8
  %861 = load i8*, i8** %parse1064, align 8
  br label %cond.end1065

cond.end1065:                                     ; preds = %cond.false1063, %cond.true1061
  %cond1066 = phi i8* [ %859, %cond.true1061 ], [ %861, %cond.false1063 ]
  %862 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1067 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %862, i32 0, i32 2
  %863 = load i8*, i8** %precomp1067, align 8
  %sub.ptr.lhs.cast1068 = ptrtoint i8* %cond1066 to i64
  %sub.ptr.rhs.cast1069 = ptrtoint i8* %863 to i64
  %sub.ptr.sub1070 = sub i64 %sub.ptr.lhs.cast1068, %sub.ptr.rhs.cast1069
  store i64 %sub.ptr.sub1070, i64* %offset1056, align 8
  %864 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81071 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %864, i32 0, i32 25
  %865 = load i32, i32* %utf81071, align 8
  %tobool1072 = icmp ne i32 %865, 0
  %866 = zext i1 %tobool1072 to i64
  %cond1073 = select i1 %tobool1072, i32 1, i32 0
  %tobool1074 = icmp ne i32 %cond1073, 0
  %867 = zext i1 %tobool1074 to i64
  %cond1075 = select i1 %tobool1074, i32 1, i32 0
  %868 = load i64, i64* %offset1056, align 8
  %869 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1076 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %869, i32 0, i32 2
  %870 = load i8*, i8** %precomp1076, align 8
  %871 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81077 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %871, i32 0, i32 25
  %872 = load i32, i32* %utf81077, align 8
  %tobool1078 = icmp ne i32 %872, 0
  %873 = zext i1 %tobool1078 to i64
  %cond1079 = select i1 %tobool1078, i32 1, i32 0
  %tobool1080 = icmp ne i32 %cond1079, 0
  %874 = zext i1 %tobool1080 to i64
  %cond1081 = select i1 %tobool1080, i32 1, i32 0
  %875 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1082 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %875, i32 0, i32 7
  %876 = load i8*, i8** %end1082, align 8
  %877 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1083 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %877, i32 0, i32 2
  %878 = load i8*, i8** %precomp1083, align 8
  %sub.ptr.lhs.cast1084 = ptrtoint i8* %876 to i64
  %sub.ptr.rhs.cast1085 = ptrtoint i8* %878 to i64
  %sub.ptr.sub1086 = sub i64 %sub.ptr.lhs.cast1084, %sub.ptr.rhs.cast1085
  %879 = load i64, i64* %offset1056, align 8
  %sub1087 = sub nsw i64 %sub.ptr.sub1086, %879
  %880 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1088 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %880, i32 0, i32 2
  %881 = load i8*, i8** %precomp1088, align 8
  %882 = load i64, i64* %offset1056, align 8
  %add.ptr1089 = getelementptr inbounds i8, i8* %881, i64 %882
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.247, i64 0, i64 0), i32 %cond1075, i64 %868, i8* %870, i32 %cond1081, i64 %sub1087, i8* %add.ptr1089)
  br label %do.end1090

do.end1090:                                       ; preds = %cond.end1065
  br label %do.end1091

do.end1091:                                       ; preds = %do.end1090
  br label %if.end1092

if.end1092:                                       ; preds = %do.end1091, %lor.lhs.false1041
  br label %gen_recurse_regop

sw.bb1093:                                        ; preds = %if.end539
  %883 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1094 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %883, i32 0, i32 8
  %884 = load i8*, i8** %parse1094, align 8
  %arrayidx1095 = getelementptr inbounds i8, i8* %884, i64 0
  %885 = load i8, i8* %arrayidx1095, align 1
  %conv1096 = sext i8 %885 to i32
  %cmp1097 = icmp sge i32 %conv1096, 49
  br i1 %cmp1097, label %land.lhs.true1099, label %if.then1105

land.lhs.true1099:                                ; preds = %sw.bb1093
  %886 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1100 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %886, i32 0, i32 8
  %887 = load i8*, i8** %parse1100, align 8
  %arrayidx1101 = getelementptr inbounds i8, i8* %887, i64 0
  %888 = load i8, i8* %arrayidx1101, align 1
  %conv1102 = sext i8 %888 to i32
  %cmp1103 = icmp sle i32 %conv1102, 57
  br i1 %cmp1103, label %if.end1153, label %if.then1105

if.then1105:                                      ; preds = %land.lhs.true1099, %sw.bb1093
  %889 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1106 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %889, i32 0, i32 8
  %890 = load i8*, i8** %parse1106, align 8
  %incdec.ptr1107 = getelementptr inbounds i8, i8* %890, i32 1
  store i8* %incdec.ptr1107, i8** %parse1106, align 8
  br label %do.body1108

do.body1108:                                      ; preds = %if.then1105
  %891 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1109 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %891, i32 0, i32 12
  %892 = load %struct.regnode*, %struct.regnode** %emit1109, align 8
  %893 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1110 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %893, i32 0, i32 13
  %894 = bitcast %struct.regnode_ssc* %emit_dummy1110 to %struct.regnode*
  %cmp1111 = icmp eq %struct.regnode* %892, %894
  br i1 %cmp1111, label %if.end1115, label %if.then1113

if.then1113:                                      ; preds = %do.body1108
  %895 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1114 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %895, i32 0, i32 3
  %896 = load %struct.p5rx*, %struct.p5rx** %rx_sv1114, align 8
  %897 = bitcast %struct.p5rx* %896 to i8*
  %898 = bitcast i8* %897 to %struct.sv*
  %899 = bitcast %struct.sv* %898 to i8*
  call void @Perl_save_pushptr(i8* %899, i32 11)
  br label %if.end1115

if.end1115:                                       ; preds = %if.then1113, %do.body1108
  br label %do.body1116

do.body1116:                                      ; preds = %if.end1115
  %900 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1118 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %900, i32 0, i32 8
  %901 = load i8*, i8** %parse1118, align 8
  %902 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1119 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %902, i32 0, i32 7
  %903 = load i8*, i8** %end1119, align 8
  %cmp1120 = icmp ugt i8* %901, %903
  br i1 %cmp1120, label %cond.true1122, label %cond.false1124

cond.true1122:                                    ; preds = %do.body1116
  %904 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1123 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %904, i32 0, i32 7
  %905 = load i8*, i8** %end1123, align 8
  br label %cond.end1126

cond.false1124:                                   ; preds = %do.body1116
  %906 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1125 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %906, i32 0, i32 8
  %907 = load i8*, i8** %parse1125, align 8
  br label %cond.end1126

cond.end1126:                                     ; preds = %cond.false1124, %cond.true1122
  %cond1127 = phi i8* [ %905, %cond.true1122 ], [ %907, %cond.false1124 ]
  %908 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1128 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %908, i32 0, i32 2
  %909 = load i8*, i8** %precomp1128, align 8
  %sub.ptr.lhs.cast1129 = ptrtoint i8* %cond1127 to i64
  %sub.ptr.rhs.cast1130 = ptrtoint i8* %909 to i64
  %sub.ptr.sub1131 = sub i64 %sub.ptr.lhs.cast1129, %sub.ptr.rhs.cast1130
  store i64 %sub.ptr.sub1131, i64* %offset1117, align 8
  %910 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81132 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %910, i32 0, i32 25
  %911 = load i32, i32* %utf81132, align 8
  %tobool1133 = icmp ne i32 %911, 0
  %912 = zext i1 %tobool1133 to i64
  %cond1134 = select i1 %tobool1133, i32 1, i32 0
  %tobool1135 = icmp ne i32 %cond1134, 0
  %913 = zext i1 %tobool1135 to i64
  %cond1136 = select i1 %tobool1135, i32 1, i32 0
  %914 = load i64, i64* %offset1117, align 8
  %915 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1137 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %915, i32 0, i32 2
  %916 = load i8*, i8** %precomp1137, align 8
  %917 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81138 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %917, i32 0, i32 25
  %918 = load i32, i32* %utf81138, align 8
  %tobool1139 = icmp ne i32 %918, 0
  %919 = zext i1 %tobool1139 to i64
  %cond1140 = select i1 %tobool1139, i32 1, i32 0
  %tobool1141 = icmp ne i32 %cond1140, 0
  %920 = zext i1 %tobool1141 to i64
  %cond1142 = select i1 %tobool1141, i32 1, i32 0
  %921 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1143 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %921, i32 0, i32 7
  %922 = load i8*, i8** %end1143, align 8
  %923 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1144 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %923, i32 0, i32 2
  %924 = load i8*, i8** %precomp1144, align 8
  %sub.ptr.lhs.cast1145 = ptrtoint i8* %922 to i64
  %sub.ptr.rhs.cast1146 = ptrtoint i8* %924 to i64
  %sub.ptr.sub1147 = sub i64 %sub.ptr.lhs.cast1145, %sub.ptr.rhs.cast1146
  %925 = load i64, i64* %offset1117, align 8
  %sub1148 = sub nsw i64 %sub.ptr.sub1147, %925
  %926 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1149 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %926, i32 0, i32 2
  %927 = load i8*, i8** %precomp1149, align 8
  %928 = load i64, i64* %offset1117, align 8
  %add.ptr1150 = getelementptr inbounds i8, i8* %927, i64 %928
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.248, i64 0, i64 0), i32 %cond1136, i64 %914, i8* %916, i32 %cond1142, i64 %sub1148, i8* %add.ptr1150)
  br label %do.end1151

do.end1151:                                       ; preds = %cond.end1126
  br label %do.end1152

do.end1152:                                       ; preds = %do.end1151
  br label %if.end1153

if.end1153:                                       ; preds = %do.end1152, %land.lhs.true1099
  br label %parse_recursion

sw.bb1154:                                        ; preds = %if.end539
  %929 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1155 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %929, i32 0, i32 8
  %930 = load i8*, i8** %parse1155, align 8
  %arrayidx1156 = getelementptr inbounds i8, i8* %930, i64 0
  %931 = load i8, i8* %arrayidx1156, align 1
  %conv1157 = sext i8 %931 to i32
  %cmp1158 = icmp sge i32 %conv1157, 49
  br i1 %cmp1158, label %land.lhs.true1160, label %if.then1166

land.lhs.true1160:                                ; preds = %sw.bb1154
  %932 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1161 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %932, i32 0, i32 8
  %933 = load i8*, i8** %parse1161, align 8
  %arrayidx1162 = getelementptr inbounds i8, i8* %933, i64 0
  %934 = load i8, i8* %arrayidx1162, align 1
  %conv1163 = sext i8 %934 to i32
  %cmp1164 = icmp sle i32 %conv1163, 57
  br i1 %cmp1164, label %if.end1169, label %if.then1166

if.then1166:                                      ; preds = %land.lhs.true1160, %sw.bb1154
  %935 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1167 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %935, i32 0, i32 8
  %936 = load i8*, i8** %parse1167, align 8
  %incdec.ptr1168 = getelementptr inbounds i8, i8* %936, i32 -1
  store i8* %incdec.ptr1168, i8** %parse1167, align 8
  br label %parse_flags

if.end1169:                                       ; preds = %land.lhs.true1160
  br label %sw.bb1170

sw.bb1170:                                        ; preds = %if.end539, %if.end539, %if.end539, %if.end539, %if.end539, %if.end539, %if.end539, %if.end539, %if.end539, %if.end1169
  %937 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1171 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %937, i32 0, i32 8
  %938 = load i8*, i8** %parse1171, align 8
  %incdec.ptr1172 = getelementptr inbounds i8, i8* %938, i32 -1
  store i8* %incdec.ptr1172, i8** %parse1171, align 8
  br label %parse_recursion

parse_recursion:                                  ; preds = %sw.bb1170, %if.end1153
  store i8 0, i8* %is_neg, align 1
  %939 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1173 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %939, i32 0, i32 8
  %940 = load i8*, i8** %parse1173, align 8
  %add.ptr1174 = getelementptr inbounds i8, i8* %940, i64 -1
  store i8* %add.ptr1174, i8** %parse_start, align 8
  %941 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1175 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %941, i32 0, i32 8
  %942 = load i8*, i8** %parse1175, align 8
  %943 = load i8, i8* %942, align 1
  %conv1176 = sext i8 %943 to i32
  %cmp1177 = icmp eq i32 %conv1176, 45
  br i1 %cmp1177, label %if.then1179, label %if.end1182

if.then1179:                                      ; preds = %parse_recursion
  %944 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1180 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %944, i32 0, i32 8
  %945 = load i8*, i8** %parse1180, align 8
  %incdec.ptr1181 = getelementptr inbounds i8, i8* %945, i32 1
  store i8* %incdec.ptr1181, i8** %parse1180, align 8
  store i8 1, i8* %is_neg, align 1
  br label %if.end1182

if.end1182:                                       ; preds = %if.then1179, %parse_recursion
  %946 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1183 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %946, i32 0, i32 8
  %947 = load i8*, i8** %parse1183, align 8
  %call1184 = call zeroext i1 @Perl_grok_atoUV(i8* %947, i64* %unum, i8** %endptr)
  br i1 %call1184, label %land.lhs.true1186, label %if.else1192

land.lhs.true1186:                                ; preds = %if.end1182
  %948 = load i64, i64* %unum, align 8
  %cmp1187 = icmp ule i64 %948, 2147483647
  br i1 %cmp1187, label %if.then1189, label %if.else1192

if.then1189:                                      ; preds = %land.lhs.true1186
  %949 = load i64, i64* %unum, align 8
  %conv1190 = trunc i64 %949 to i32
  store i32 %conv1190, i32* %num, align 4
  %950 = load i8*, i8** %endptr, align 8
  %951 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1191 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %951, i32 0, i32 8
  store i8* %950, i8** %parse1191, align 8
  br label %if.end1193

if.else1192:                                      ; preds = %land.lhs.true1186, %if.end1182
  store i32 2147483647, i32* %num, align 4
  br label %if.end1193

if.end1193:                                       ; preds = %if.else1192, %if.then1189
  %952 = load i8, i8* %is_neg, align 1
  %tobool1194 = trunc i8 %952 to i1
  br i1 %tobool1194, label %if.then1195, label %if.end1197

if.then1195:                                      ; preds = %if.end1193
  %953 = load i32, i32* %num, align 4
  %sub1196 = sub nsw i32 0, %953
  store i32 %sub1196, i32* %num, align 4
  br label %if.end1197

if.end1197:                                       ; preds = %if.then1195, %if.end1193
  %954 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1198 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %954, i32 0, i32 8
  %955 = load i8*, i8** %parse1198, align 8
  %956 = load i8, i8* %955, align 1
  %conv1199 = sext i8 %956 to i32
  %cmp1200 = icmp ne i32 %conv1199, 41
  br i1 %cmp1200, label %if.then1202, label %if.end1248

if.then1202:                                      ; preds = %if.end1197
  br label %do.body1203

do.body1203:                                      ; preds = %if.then1202
  %957 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1204 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %957, i32 0, i32 12
  %958 = load %struct.regnode*, %struct.regnode** %emit1204, align 8
  %959 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1205 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %959, i32 0, i32 13
  %960 = bitcast %struct.regnode_ssc* %emit_dummy1205 to %struct.regnode*
  %cmp1206 = icmp eq %struct.regnode* %958, %960
  br i1 %cmp1206, label %if.end1210, label %if.then1208

if.then1208:                                      ; preds = %do.body1203
  %961 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1209 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %961, i32 0, i32 3
  %962 = load %struct.p5rx*, %struct.p5rx** %rx_sv1209, align 8
  %963 = bitcast %struct.p5rx* %962 to i8*
  %964 = bitcast i8* %963 to %struct.sv*
  %965 = bitcast %struct.sv* %964 to i8*
  call void @Perl_save_pushptr(i8* %965, i32 11)
  br label %if.end1210

if.end1210:                                       ; preds = %if.then1208, %do.body1203
  br label %do.body1211

do.body1211:                                      ; preds = %if.end1210
  %966 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1213 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %966, i32 0, i32 8
  %967 = load i8*, i8** %parse1213, align 8
  %968 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1214 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %968, i32 0, i32 7
  %969 = load i8*, i8** %end1214, align 8
  %cmp1215 = icmp ugt i8* %967, %969
  br i1 %cmp1215, label %cond.true1217, label %cond.false1219

cond.true1217:                                    ; preds = %do.body1211
  %970 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1218 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %970, i32 0, i32 7
  %971 = load i8*, i8** %end1218, align 8
  br label %cond.end1221

cond.false1219:                                   ; preds = %do.body1211
  %972 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1220 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %972, i32 0, i32 8
  %973 = load i8*, i8** %parse1220, align 8
  br label %cond.end1221

cond.end1221:                                     ; preds = %cond.false1219, %cond.true1217
  %cond1222 = phi i8* [ %971, %cond.true1217 ], [ %973, %cond.false1219 ]
  %974 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1223 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %974, i32 0, i32 2
  %975 = load i8*, i8** %precomp1223, align 8
  %sub.ptr.lhs.cast1224 = ptrtoint i8* %cond1222 to i64
  %sub.ptr.rhs.cast1225 = ptrtoint i8* %975 to i64
  %sub.ptr.sub1226 = sub i64 %sub.ptr.lhs.cast1224, %sub.ptr.rhs.cast1225
  store i64 %sub.ptr.sub1226, i64* %offset1212, align 8
  %976 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81227 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %976, i32 0, i32 25
  %977 = load i32, i32* %utf81227, align 8
  %tobool1228 = icmp ne i32 %977, 0
  %978 = zext i1 %tobool1228 to i64
  %cond1229 = select i1 %tobool1228, i32 1, i32 0
  %tobool1230 = icmp ne i32 %cond1229, 0
  %979 = zext i1 %tobool1230 to i64
  %cond1231 = select i1 %tobool1230, i32 1, i32 0
  %980 = load i64, i64* %offset1212, align 8
  %981 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1232 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %981, i32 0, i32 2
  %982 = load i8*, i8** %precomp1232, align 8
  %983 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81233 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %983, i32 0, i32 25
  %984 = load i32, i32* %utf81233, align 8
  %tobool1234 = icmp ne i32 %984, 0
  %985 = zext i1 %tobool1234 to i64
  %cond1235 = select i1 %tobool1234, i32 1, i32 0
  %tobool1236 = icmp ne i32 %cond1235, 0
  %986 = zext i1 %tobool1236 to i64
  %cond1237 = select i1 %tobool1236, i32 1, i32 0
  %987 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1238 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %987, i32 0, i32 7
  %988 = load i8*, i8** %end1238, align 8
  %989 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1239 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %989, i32 0, i32 2
  %990 = load i8*, i8** %precomp1239, align 8
  %sub.ptr.lhs.cast1240 = ptrtoint i8* %988 to i64
  %sub.ptr.rhs.cast1241 = ptrtoint i8* %990 to i64
  %sub.ptr.sub1242 = sub i64 %sub.ptr.lhs.cast1240, %sub.ptr.rhs.cast1241
  %991 = load i64, i64* %offset1212, align 8
  %sub1243 = sub nsw i64 %sub.ptr.sub1242, %991
  %992 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1244 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %992, i32 0, i32 2
  %993 = load i8*, i8** %precomp1244, align 8
  %994 = load i64, i64* %offset1212, align 8
  %add.ptr1245 = getelementptr inbounds i8, i8* %993, i64 %994
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.249, i64 0, i64 0), i32 %cond1231, i64 %980, i8* %982, i32 %cond1237, i64 %sub1243, i8* %add.ptr1245)
  br label %do.end1246

do.end1246:                                       ; preds = %cond.end1221
  br label %do.end1247

do.end1247:                                       ; preds = %do.end1246
  br label %if.end1248

if.end1248:                                       ; preds = %do.end1247, %if.end1197
  br label %gen_recurse_regop

gen_recurse_regop:                                ; preds = %if.end1248, %if.end1092
  %995 = load i32, i32* %paren.addr, align 4
  %cmp1249 = icmp eq i32 %995, 45
  br i1 %cmp1249, label %if.then1251, label %if.else1305

if.then1251:                                      ; preds = %gen_recurse_regop
  %996 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar1252 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %996, i32 0, i32 18
  %997 = load i32, i32* %npar1252, align 8
  %998 = load i32, i32* %num, align 4
  %add1253 = add nsw i32 %997, %998
  store i32 %add1253, i32* %num, align 4
  %999 = load i32, i32* %num, align 4
  %cmp1254 = icmp slt i32 %999, 1
  br i1 %cmp1254, label %if.then1256, label %if.end1304

if.then1256:                                      ; preds = %if.then1251
  %1000 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1257 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1000, i32 0, i32 8
  %1001 = load i8*, i8** %parse1257, align 8
  %incdec.ptr1258 = getelementptr inbounds i8, i8* %1001, i32 1
  store i8* %incdec.ptr1258, i8** %parse1257, align 8
  br label %do.body1259

do.body1259:                                      ; preds = %if.then1256
  %1002 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1260 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1002, i32 0, i32 12
  %1003 = load %struct.regnode*, %struct.regnode** %emit1260, align 8
  %1004 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1261 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1004, i32 0, i32 13
  %1005 = bitcast %struct.regnode_ssc* %emit_dummy1261 to %struct.regnode*
  %cmp1262 = icmp eq %struct.regnode* %1003, %1005
  br i1 %cmp1262, label %if.end1266, label %if.then1264

if.then1264:                                      ; preds = %do.body1259
  %1006 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1265 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1006, i32 0, i32 3
  %1007 = load %struct.p5rx*, %struct.p5rx** %rx_sv1265, align 8
  %1008 = bitcast %struct.p5rx* %1007 to i8*
  %1009 = bitcast i8* %1008 to %struct.sv*
  %1010 = bitcast %struct.sv* %1009 to i8*
  call void @Perl_save_pushptr(i8* %1010, i32 11)
  br label %if.end1266

if.end1266:                                       ; preds = %if.then1264, %do.body1259
  br label %do.body1267

do.body1267:                                      ; preds = %if.end1266
  %1011 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1269 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1011, i32 0, i32 8
  %1012 = load i8*, i8** %parse1269, align 8
  %1013 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1270 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1013, i32 0, i32 7
  %1014 = load i8*, i8** %end1270, align 8
  %cmp1271 = icmp ugt i8* %1012, %1014
  br i1 %cmp1271, label %cond.true1273, label %cond.false1275

cond.true1273:                                    ; preds = %do.body1267
  %1015 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1274 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1015, i32 0, i32 7
  %1016 = load i8*, i8** %end1274, align 8
  br label %cond.end1277

cond.false1275:                                   ; preds = %do.body1267
  %1017 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1276 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1017, i32 0, i32 8
  %1018 = load i8*, i8** %parse1276, align 8
  br label %cond.end1277

cond.end1277:                                     ; preds = %cond.false1275, %cond.true1273
  %cond1278 = phi i8* [ %1016, %cond.true1273 ], [ %1018, %cond.false1275 ]
  %1019 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1279 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1019, i32 0, i32 2
  %1020 = load i8*, i8** %precomp1279, align 8
  %sub.ptr.lhs.cast1280 = ptrtoint i8* %cond1278 to i64
  %sub.ptr.rhs.cast1281 = ptrtoint i8* %1020 to i64
  %sub.ptr.sub1282 = sub i64 %sub.ptr.lhs.cast1280, %sub.ptr.rhs.cast1281
  store i64 %sub.ptr.sub1282, i64* %offset1268, align 8
  %1021 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81283 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1021, i32 0, i32 25
  %1022 = load i32, i32* %utf81283, align 8
  %tobool1284 = icmp ne i32 %1022, 0
  %1023 = zext i1 %tobool1284 to i64
  %cond1285 = select i1 %tobool1284, i32 1, i32 0
  %tobool1286 = icmp ne i32 %cond1285, 0
  %1024 = zext i1 %tobool1286 to i64
  %cond1287 = select i1 %tobool1286, i32 1, i32 0
  %1025 = load i64, i64* %offset1268, align 8
  %1026 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1288 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1026, i32 0, i32 2
  %1027 = load i8*, i8** %precomp1288, align 8
  %1028 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81289 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1028, i32 0, i32 25
  %1029 = load i32, i32* %utf81289, align 8
  %tobool1290 = icmp ne i32 %1029, 0
  %1030 = zext i1 %tobool1290 to i64
  %cond1291 = select i1 %tobool1290, i32 1, i32 0
  %tobool1292 = icmp ne i32 %cond1291, 0
  %1031 = zext i1 %tobool1292 to i64
  %cond1293 = select i1 %tobool1292, i32 1, i32 0
  %1032 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1294 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1032, i32 0, i32 7
  %1033 = load i8*, i8** %end1294, align 8
  %1034 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1295 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1034, i32 0, i32 2
  %1035 = load i8*, i8** %precomp1295, align 8
  %sub.ptr.lhs.cast1296 = ptrtoint i8* %1033 to i64
  %sub.ptr.rhs.cast1297 = ptrtoint i8* %1035 to i64
  %sub.ptr.sub1298 = sub i64 %sub.ptr.lhs.cast1296, %sub.ptr.rhs.cast1297
  %1036 = load i64, i64* %offset1268, align 8
  %sub1299 = sub nsw i64 %sub.ptr.sub1298, %1036
  %1037 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1300 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1037, i32 0, i32 2
  %1038 = load i8*, i8** %precomp1300, align 8
  %1039 = load i64, i64* %offset1268, align 8
  %add.ptr1301 = getelementptr inbounds i8, i8* %1038, i64 %1039
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.250, i64 0, i64 0), i32 %cond1287, i64 %1025, i8* %1027, i32 %cond1293, i64 %sub1299, i8* %add.ptr1301)
  br label %do.end1302

do.end1302:                                       ; preds = %cond.end1277
  br label %do.end1303

do.end1303:                                       ; preds = %do.end1302
  br label %if.end1304

if.end1304:                                       ; preds = %do.end1303, %if.then1251
  br label %if.end1313

if.else1305:                                      ; preds = %gen_recurse_regop
  %1040 = load i32, i32* %paren.addr, align 4
  %cmp1306 = icmp eq i32 %1040, 43
  br i1 %cmp1306, label %if.then1308, label %if.end1312

if.then1308:                                      ; preds = %if.else1305
  %1041 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar1309 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1041, i32 0, i32 18
  %1042 = load i32, i32* %npar1309, align 8
  %1043 = load i32, i32* %num, align 4
  %add1310 = add nsw i32 %1042, %1043
  %sub1311 = sub nsw i32 %add1310, 1
  store i32 %sub1311, i32* %num, align 4
  br label %if.end1312

if.end1312:                                       ; preds = %if.then1308, %if.else1305
  br label %if.end1313

if.end1313:                                       ; preds = %if.end1312, %if.end1304
  %1044 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1045 = load i32, i32* %num, align 4
  %1046 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %recurse_count = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1046, i32 0, i32 30
  %1047 = load i32, i32* %recurse_count, align 8
  %call1314 = call %struct.regnode* @S_reg2Lanode(%struct.RExC_state_t* %1044, i8 zeroext 76, i32 %1045, i32 %1047)
  store %struct.regnode* %call1314, %struct.regnode** %ret, align 8
  %1048 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1315 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1048, i32 0, i32 12
  %1049 = load %struct.regnode*, %struct.regnode** %emit1315, align 8
  %1050 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1316 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1050, i32 0, i32 13
  %1051 = bitcast %struct.regnode_ssc* %emit_dummy1316 to %struct.regnode*
  %cmp1317 = icmp eq %struct.regnode* %1049, %1051
  br i1 %cmp1317, label %if.end1373, label %if.then1319

if.then1319:                                      ; preds = %if.end1313
  %1052 = load i32, i32* %num, align 4
  %1053 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1053, i32 0, i32 4
  %1054 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %1054, i32 0, i32 12
  %1055 = load i32, i32* %nparens, align 8
  %cmp1320 = icmp sgt i32 %1052, %1055
  br i1 %cmp1320, label %if.then1322, label %if.end1370

if.then1322:                                      ; preds = %if.then1319
  %1056 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1323 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1056, i32 0, i32 8
  %1057 = load i8*, i8** %parse1323, align 8
  %incdec.ptr1324 = getelementptr inbounds i8, i8* %1057, i32 1
  store i8* %incdec.ptr1324, i8** %parse1323, align 8
  br label %do.body1325

do.body1325:                                      ; preds = %if.then1322
  %1058 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1326 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1058, i32 0, i32 12
  %1059 = load %struct.regnode*, %struct.regnode** %emit1326, align 8
  %1060 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1327 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1060, i32 0, i32 13
  %1061 = bitcast %struct.regnode_ssc* %emit_dummy1327 to %struct.regnode*
  %cmp1328 = icmp eq %struct.regnode* %1059, %1061
  br i1 %cmp1328, label %if.end1332, label %if.then1330

if.then1330:                                      ; preds = %do.body1325
  %1062 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1331 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1062, i32 0, i32 3
  %1063 = load %struct.p5rx*, %struct.p5rx** %rx_sv1331, align 8
  %1064 = bitcast %struct.p5rx* %1063 to i8*
  %1065 = bitcast i8* %1064 to %struct.sv*
  %1066 = bitcast %struct.sv* %1065 to i8*
  call void @Perl_save_pushptr(i8* %1066, i32 11)
  br label %if.end1332

if.end1332:                                       ; preds = %if.then1330, %do.body1325
  br label %do.body1333

do.body1333:                                      ; preds = %if.end1332
  %1067 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1335 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1067, i32 0, i32 8
  %1068 = load i8*, i8** %parse1335, align 8
  %1069 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1336 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1069, i32 0, i32 7
  %1070 = load i8*, i8** %end1336, align 8
  %cmp1337 = icmp ugt i8* %1068, %1070
  br i1 %cmp1337, label %cond.true1339, label %cond.false1341

cond.true1339:                                    ; preds = %do.body1333
  %1071 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1340 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1071, i32 0, i32 7
  %1072 = load i8*, i8** %end1340, align 8
  br label %cond.end1343

cond.false1341:                                   ; preds = %do.body1333
  %1073 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1342 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1073, i32 0, i32 8
  %1074 = load i8*, i8** %parse1342, align 8
  br label %cond.end1343

cond.end1343:                                     ; preds = %cond.false1341, %cond.true1339
  %cond1344 = phi i8* [ %1072, %cond.true1339 ], [ %1074, %cond.false1341 ]
  %1075 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1345 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1075, i32 0, i32 2
  %1076 = load i8*, i8** %precomp1345, align 8
  %sub.ptr.lhs.cast1346 = ptrtoint i8* %cond1344 to i64
  %sub.ptr.rhs.cast1347 = ptrtoint i8* %1076 to i64
  %sub.ptr.sub1348 = sub i64 %sub.ptr.lhs.cast1346, %sub.ptr.rhs.cast1347
  store i64 %sub.ptr.sub1348, i64* %offset1334, align 8
  %1077 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81349 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1077, i32 0, i32 25
  %1078 = load i32, i32* %utf81349, align 8
  %tobool1350 = icmp ne i32 %1078, 0
  %1079 = zext i1 %tobool1350 to i64
  %cond1351 = select i1 %tobool1350, i32 1, i32 0
  %tobool1352 = icmp ne i32 %cond1351, 0
  %1080 = zext i1 %tobool1352 to i64
  %cond1353 = select i1 %tobool1352, i32 1, i32 0
  %1081 = load i64, i64* %offset1334, align 8
  %1082 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1354 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1082, i32 0, i32 2
  %1083 = load i8*, i8** %precomp1354, align 8
  %1084 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81355 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1084, i32 0, i32 25
  %1085 = load i32, i32* %utf81355, align 8
  %tobool1356 = icmp ne i32 %1085, 0
  %1086 = zext i1 %tobool1356 to i64
  %cond1357 = select i1 %tobool1356, i32 1, i32 0
  %tobool1358 = icmp ne i32 %cond1357, 0
  %1087 = zext i1 %tobool1358 to i64
  %cond1359 = select i1 %tobool1358, i32 1, i32 0
  %1088 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1360 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1088, i32 0, i32 7
  %1089 = load i8*, i8** %end1360, align 8
  %1090 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1361 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1090, i32 0, i32 2
  %1091 = load i8*, i8** %precomp1361, align 8
  %sub.ptr.lhs.cast1362 = ptrtoint i8* %1089 to i64
  %sub.ptr.rhs.cast1363 = ptrtoint i8* %1091 to i64
  %sub.ptr.sub1364 = sub i64 %sub.ptr.lhs.cast1362, %sub.ptr.rhs.cast1363
  %1092 = load i64, i64* %offset1334, align 8
  %sub1365 = sub nsw i64 %sub.ptr.sub1364, %1092
  %1093 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1366 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1093, i32 0, i32 2
  %1094 = load i8*, i8** %precomp1366, align 8
  %1095 = load i64, i64* %offset1334, align 8
  %add.ptr1367 = getelementptr inbounds i8, i8* %1094, i64 %1095
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.250, i64 0, i64 0), i32 %cond1353, i64 %1081, i8* %1083, i32 %cond1359, i64 %sub1365, i8* %add.ptr1367)
  br label %do.end1368

do.end1368:                                       ; preds = %cond.end1343
  br label %do.end1369

do.end1369:                                       ; preds = %do.end1368
  br label %if.end1370

if.end1370:                                       ; preds = %do.end1369, %if.then1319
  %1096 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %recurse_count1371 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1096, i32 0, i32 30
  %1097 = load i32, i32* %recurse_count1371, align 8
  %inc1372 = add nsw i32 %1097, 1
  store i32 %inc1372, i32* %recurse_count1371, align 8
  br label %if.end1373

if.end1373:                                       ; preds = %if.end1370, %if.end1313
  %1098 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen1374 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1098, i32 0, i32 16
  %1099 = load i32, i32* %seen1374, align 8
  %or1375 = or i32 %1099, 32
  store i32 %or1375, i32* %seen1374, align 8
  %1100 = load i32*, i32** %flagp.addr, align 8
  %1101 = load i32, i32* %1100, align 4
  %or1376 = or i32 %1101, 8
  store i32 %or1376, i32* %1100, align 4
  %1102 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1377 = call i8* @S_nextchar(%struct.RExC_state_t* %1102)
  %1103 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %1103, %struct.regnode** %retval, align 8
  br label %return

sw.bb1378:                                        ; preds = %if.end539
  store i8 1, i8* %is_logical, align 1
  %1104 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1379 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1104, i32 0, i32 8
  %1105 = load i8*, i8** %parse1379, align 8
  %1106 = load i8, i8* %1105, align 1
  %conv1380 = sext i8 %1106 to i32
  %cmp1381 = icmp ne i32 %conv1380, 123
  br i1 %cmp1381, label %if.then1383, label %if.end1452

if.then1383:                                      ; preds = %sw.bb1378
  %1107 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1384 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1107, i32 0, i32 8
  %1108 = load i8*, i8** %parse1384, align 8
  %1109 = load i8, i8* %1108, align 1
  %tobool1385 = icmp ne i8 %1109, 0
  br i1 %tobool1385, label %cond.false1387, label %cond.true1386

cond.true1386:                                    ; preds = %if.then1383
  br label %cond.end1400

cond.false1387:                                   ; preds = %if.then1383
  %1110 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81388 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1110, i32 0, i32 25
  %1111 = load i32, i32* %utf81388, align 8
  %tobool1389 = icmp ne i32 %1111, 0
  br i1 %tobool1389, label %cond.true1390, label %cond.false1391

cond.true1390:                                    ; preds = %cond.false1387
  br i1 true, label %cond.true1392, label %cond.false1397

cond.false1391:                                   ; preds = %cond.false1387
  br i1 false, label %cond.true1392, label %cond.false1397

cond.true1392:                                    ; preds = %cond.false1391, %cond.true1390
  %1112 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1393 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1112, i32 0, i32 8
  %1113 = load i8*, i8** %parse1393, align 8
  %1114 = load i8, i8* %1113, align 1
  %idxprom1394 = zext i8 %1114 to i64
  %arrayidx1395 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom1394
  %1115 = load i8, i8* %arrayidx1395, align 1
  %conv1396 = zext i8 %1115 to i32
  br label %cond.end1398

cond.false1397:                                   ; preds = %cond.false1391, %cond.true1390
  br label %cond.end1398

cond.end1398:                                     ; preds = %cond.false1397, %cond.true1392
  %cond1399 = phi i32 [ %conv1396, %cond.true1392 ], [ 1, %cond.false1397 ]
  br label %cond.end1400

cond.end1400:                                     ; preds = %cond.end1398, %cond.true1386
  %cond1401 = phi i32 [ 0, %cond.true1386 ], [ %cond1399, %cond.end1398 ]
  %1116 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1402 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1116, i32 0, i32 8
  %1117 = load i8*, i8** %parse1402, align 8
  %idx.ext1403 = sext i32 %cond1401 to i64
  %add.ptr1404 = getelementptr inbounds i8, i8* %1117, i64 %idx.ext1403
  store i8* %add.ptr1404, i8** %parse1402, align 8
  br label %do.body1405

do.body1405:                                      ; preds = %cond.end1400
  %1118 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1407 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1118, i32 0, i32 8
  %1119 = load i8*, i8** %parse1407, align 8
  %1120 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1408 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1120, i32 0, i32 2
  %1121 = load i8*, i8** %precomp1408, align 8
  %sub.ptr.lhs.cast1409 = ptrtoint i8* %1119 to i64
  %sub.ptr.rhs.cast1410 = ptrtoint i8* %1121 to i64
  %sub.ptr.sub1411 = sub i64 %sub.ptr.lhs.cast1409, %sub.ptr.rhs.cast1410
  store i64 %sub.ptr.sub1411, i64* %offset1406, align 8
  %1122 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1412 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1122, i32 0, i32 12
  %1123 = load %struct.regnode*, %struct.regnode** %emit1412, align 8
  %1124 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1413 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1124, i32 0, i32 13
  %1125 = bitcast %struct.regnode_ssc* %emit_dummy1413 to %struct.regnode*
  %cmp1414 = icmp eq %struct.regnode* %1123, %1125
  br i1 %cmp1414, label %if.end1418, label %if.then1416

if.then1416:                                      ; preds = %do.body1405
  %1126 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1417 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1126, i32 0, i32 3
  %1127 = load %struct.p5rx*, %struct.p5rx** %rx_sv1417, align 8
  %1128 = bitcast %struct.p5rx* %1127 to i8*
  %1129 = bitcast i8* %1128 to %struct.sv*
  %1130 = bitcast %struct.sv* %1129 to i8*
  call void @Perl_save_pushptr(i8* %1130, i32 11)
  br label %if.end1418

if.end1418:                                       ; preds = %if.then1416, %do.body1405
  %1131 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81419 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1131, i32 0, i32 25
  %1132 = load i32, i32* %utf81419, align 8
  %tobool1420 = icmp ne i32 %1132, 0
  %1133 = zext i1 %tobool1420 to i64
  %cond1421 = select i1 %tobool1420, i32 1, i32 0
  %tobool1422 = icmp ne i32 %cond1421, 0
  %1134 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81423 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1134, i32 0, i32 25
  %1135 = load i32, i32* %utf81423, align 8
  %tobool1424 = icmp ne i32 %1135, 0
  %1136 = zext i1 %tobool1424 to i64
  %cond1425 = select i1 %tobool1424, i32 1, i32 0
  %tobool1426 = icmp ne i32 %cond1425, 0
  %1137 = zext i1 %tobool1426 to i64
  %cond1427 = select i1 %tobool1426, i32 1, i32 0
  %1138 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1428 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1138, i32 0, i32 8
  %1139 = load i8*, i8** %parse1428, align 8
  %1140 = load i8*, i8** %seqstart, align 8
  %sub.ptr.lhs.cast1429 = ptrtoint i8* %1139 to i64
  %sub.ptr.rhs.cast1430 = ptrtoint i8* %1140 to i64
  %sub.ptr.sub1431 = sub i64 %sub.ptr.lhs.cast1429, %sub.ptr.rhs.cast1430
  %1141 = load i8*, i8** %seqstart, align 8
  %1142 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81432 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1142, i32 0, i32 25
  %1143 = load i32, i32* %utf81432, align 8
  %tobool1433 = icmp ne i32 %1143, 0
  %1144 = zext i1 %tobool1433 to i64
  %cond1434 = select i1 %tobool1433, i32 1, i32 0
  %tobool1435 = icmp ne i32 %cond1434, 0
  %1145 = zext i1 %tobool1435 to i64
  %cond1436 = select i1 %tobool1435, i32 1, i32 0
  %1146 = load i64, i64* %offset1406, align 8
  %1147 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1437 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1147, i32 0, i32 2
  %1148 = load i8*, i8** %precomp1437, align 8
  %1149 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81438 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1149, i32 0, i32 25
  %1150 = load i32, i32* %utf81438, align 8
  %tobool1439 = icmp ne i32 %1150, 0
  %1151 = zext i1 %tobool1439 to i64
  %cond1440 = select i1 %tobool1439, i32 1, i32 0
  %tobool1441 = icmp ne i32 %cond1440, 0
  %1152 = zext i1 %tobool1441 to i64
  %cond1442 = select i1 %tobool1441, i32 1, i32 0
  %1153 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1443 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1153, i32 0, i32 7
  %1154 = load i8*, i8** %end1443, align 8
  %1155 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1444 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1155, i32 0, i32 2
  %1156 = load i8*, i8** %precomp1444, align 8
  %sub.ptr.lhs.cast1445 = ptrtoint i8* %1154 to i64
  %sub.ptr.rhs.cast1446 = ptrtoint i8* %1156 to i64
  %sub.ptr.sub1447 = sub i64 %sub.ptr.lhs.cast1445, %sub.ptr.rhs.cast1446
  %1157 = load i64, i64* %offset1406, align 8
  %sub1448 = sub nsw i64 %sub.ptr.sub1447, %1157
  %1158 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1449 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1158, i32 0, i32 2
  %1159 = load i8*, i8** %precomp1449, align 8
  %1160 = load i64, i64* %offset1406, align 8
  %add.ptr1450 = getelementptr inbounds i8, i8* %1159, i64 %1160
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool1422, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.251, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %cond1427, i64 %sub.ptr.sub1431, i8* %1141, i32 %cond1436, i64 %1146, i8* %1148, i32 %cond1442, i64 %sub1448, i8* %add.ptr1450)
  br label %do.end1451

do.end1451:                                       ; preds = %if.end1418
  br label %if.end1452

if.end1452:                                       ; preds = %do.end1451, %sw.bb1378
  %1161 = load i32*, i32** %flagp.addr, align 8
  %1162 = load i32, i32* %1161, align 4
  %or1453 = or i32 %1162, 8
  store i32 %or1453, i32* %1161, align 4
  %1163 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1454 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1163, i32 0, i32 8
  %1164 = load i8*, i8** %parse1454, align 8
  %incdec.ptr1455 = getelementptr inbounds i8, i8* %1164, i32 1
  store i8* %incdec.ptr1455, i8** %parse1454, align 8
  %1165 = load i8, i8* %1164, align 1
  %conv1456 = sext i8 %1165 to i32
  store i32 %conv1456, i32* %paren.addr, align 4
  br label %sw.bb1457

sw.bb1457:                                        ; preds = %if.end539, %if.end1452
  store i32 0, i32* %n, align 4
  %1166 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen1458 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1166, i32 0, i32 21
  %1167 = load i32, i32* %seen_zerolen1458, align 4
  %inc1459 = add nsw i32 %1167, 1
  store i32 %inc1459, i32* %seen_zerolen1458, align 4
  %1168 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %num_code_blocks = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1168, i32 0, i32 39
  %1169 = load i32, i32* %num_code_blocks, align 8
  %tobool1460 = icmp ne i32 %1169, 0
  br i1 %tobool1460, label %lor.lhs.false1461, label %if.then1482

lor.lhs.false1461:                                ; preds = %sw.bb1457
  %1170 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_index = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1170, i32 0, i32 40
  %1171 = load i32, i32* %code_index, align 4
  %1172 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %num_code_blocks1462 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1172, i32 0, i32 39
  %1173 = load i32, i32* %num_code_blocks1462, align 8
  %cmp1463 = icmp sge i32 %1171, %1173
  br i1 %cmp1463, label %if.then1482, label %lor.lhs.false1465

lor.lhs.false1465:                                ; preds = %lor.lhs.false1461
  %1174 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1174, i32 0, i32 38
  %1175 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks, align 8
  %1176 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_index1466 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1176, i32 0, i32 40
  %1177 = load i32, i32* %code_index1466, align 4
  %idxprom1467 = sext i32 %1177 to i64
  %arrayidx1468 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %1175, i64 %idxprom1467
  %start = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %arrayidx1468, i32 0, i32 0
  %1178 = load i64, i64* %start, align 8
  %1179 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1469 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1179, i32 0, i32 8
  %1180 = load i8*, i8** %parse1469, align 8
  %add.ptr1470 = getelementptr inbounds i8, i8* %1180, i64 -3
  %1181 = load i8, i8* %is_logical, align 1
  %tobool1471 = trunc i8 %1181 to i1
  %1182 = zext i1 %tobool1471 to i64
  %cond1473 = select i1 %tobool1471, i32 1, i32 0
  %idx.ext1474 = sext i32 %cond1473 to i64
  %idx.neg = sub i64 0, %idx.ext1474
  %add.ptr1475 = getelementptr inbounds i8, i8* %add.ptr1470, i64 %idx.neg
  %1183 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start1476 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1183, i32 0, i32 6
  %1184 = load i8*, i8** %start1476, align 8
  %sub.ptr.lhs.cast1477 = ptrtoint i8* %add.ptr1475 to i64
  %sub.ptr.rhs.cast1478 = ptrtoint i8* %1184 to i64
  %sub.ptr.sub1479 = sub i64 %sub.ptr.lhs.cast1477, %sub.ptr.rhs.cast1478
  %cmp1480 = icmp ne i64 %1178, %sub.ptr.sub1479
  br i1 %cmp1480, label %if.then1482, label %if.end1539

if.then1482:                                      ; preds = %lor.lhs.false1465, %lor.lhs.false1461, %sw.bb1457
  %1185 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %pm_flags = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1185, i32 0, i32 1
  %1186 = load i32, i32* %pm_flags, align 4
  %and1483 = and i32 %1186, -2147483648
  %tobool1484 = icmp ne i32 %and1483, 0
  br i1 %tobool1484, label %if.then1485, label %if.end1512

if.then1485:                                      ; preds = %if.then1482
  br label %do.body1486

do.body1486:                                      ; preds = %if.then1485
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses1487, align 8
  %1187 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1489 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1187, i32 0, i32 7
  %1188 = load i8*, i8** %end1489, align 8
  %1189 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1490 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1189, i32 0, i32 2
  %1190 = load i8*, i8** %precomp1490, align 8
  %sub.ptr.lhs.cast1491 = ptrtoint i8* %1188 to i64
  %sub.ptr.rhs.cast1492 = ptrtoint i8* %1190 to i64
  %sub.ptr.sub1493 = sub i64 %sub.ptr.lhs.cast1491, %sub.ptr.rhs.cast1492
  store i64 %sub.ptr.sub1493, i64* %len1488, align 8
  %1191 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1494 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1191, i32 0, i32 12
  %1192 = load %struct.regnode*, %struct.regnode** %emit1494, align 8
  %1193 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1495 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1193, i32 0, i32 13
  %1194 = bitcast %struct.regnode_ssc* %emit_dummy1495 to %struct.regnode*
  %cmp1496 = icmp eq %struct.regnode* %1192, %1194
  br i1 %cmp1496, label %if.end1500, label %if.then1498

if.then1498:                                      ; preds = %do.body1486
  %1195 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1499 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1195, i32 0, i32 3
  %1196 = load %struct.p5rx*, %struct.p5rx** %rx_sv1499, align 8
  %1197 = bitcast %struct.p5rx* %1196 to i8*
  %1198 = bitcast i8* %1197 to %struct.sv*
  %1199 = bitcast %struct.sv* %1198 to i8*
  call void @Perl_save_pushptr(i8* %1199, i32 11)
  br label %if.end1500

if.end1500:                                       ; preds = %if.then1498, %do.body1486
  %1200 = load i64, i64* %len1488, align 8
  %cmp1501 = icmp sgt i64 %1200, 127
  br i1 %cmp1501, label %if.then1503, label %if.end1504

if.then1503:                                      ; preds = %if.end1500
  store i64 117, i64* %len1488, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses1487, align 8
  br label %if.end1504

if.end1504:                                       ; preds = %if.then1503, %if.end1500
  %1201 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81505 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1201, i32 0, i32 25
  %1202 = load i32, i32* %utf81505, align 8
  %tobool1506 = icmp ne i32 %1202, 0
  %1203 = zext i1 %tobool1506 to i64
  %cond1507 = select i1 %tobool1506, i32 1, i32 0
  %tobool1508 = icmp ne i32 %cond1507, 0
  %1204 = zext i1 %tobool1508 to i64
  %cond1509 = select i1 %tobool1508, i32 1, i32 0
  %1205 = load i64, i64* %len1488, align 8
  %1206 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1510 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1206, i32 0, i32 2
  %1207 = load i8*, i8** %precomp1510, align 8
  %1208 = load i8*, i8** %ellipses1487, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.252, i64 0, i64 0), i32 %cond1509, i64 %1205, i8* %1207, i8* %1208)
  br label %do.end1511

do.end1511:                                       ; preds = %if.end1504
  br label %if.end1512

if.end1512:                                       ; preds = %do.end1511, %if.then1482
  br label %do.body1513

do.body1513:                                      ; preds = %if.end1512
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses1514, align 8
  %1209 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1516 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1209, i32 0, i32 7
  %1210 = load i8*, i8** %end1516, align 8
  %1211 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1517 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1211, i32 0, i32 2
  %1212 = load i8*, i8** %precomp1517, align 8
  %sub.ptr.lhs.cast1518 = ptrtoint i8* %1210 to i64
  %sub.ptr.rhs.cast1519 = ptrtoint i8* %1212 to i64
  %sub.ptr.sub1520 = sub i64 %sub.ptr.lhs.cast1518, %sub.ptr.rhs.cast1519
  store i64 %sub.ptr.sub1520, i64* %len1515, align 8
  %1213 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1521 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1213, i32 0, i32 12
  %1214 = load %struct.regnode*, %struct.regnode** %emit1521, align 8
  %1215 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1522 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1215, i32 0, i32 13
  %1216 = bitcast %struct.regnode_ssc* %emit_dummy1522 to %struct.regnode*
  %cmp1523 = icmp eq %struct.regnode* %1214, %1216
  br i1 %cmp1523, label %if.end1527, label %if.then1525

if.then1525:                                      ; preds = %do.body1513
  %1217 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1526 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1217, i32 0, i32 3
  %1218 = load %struct.p5rx*, %struct.p5rx** %rx_sv1526, align 8
  %1219 = bitcast %struct.p5rx* %1218 to i8*
  %1220 = bitcast i8* %1219 to %struct.sv*
  %1221 = bitcast %struct.sv* %1220 to i8*
  call void @Perl_save_pushptr(i8* %1221, i32 11)
  br label %if.end1527

if.end1527:                                       ; preds = %if.then1525, %do.body1513
  %1222 = load i64, i64* %len1515, align 8
  %cmp1528 = icmp sgt i64 %1222, 127
  br i1 %cmp1528, label %if.then1530, label %if.end1531

if.then1530:                                      ; preds = %if.end1527
  store i64 117, i64* %len1515, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses1514, align 8
  br label %if.end1531

if.end1531:                                       ; preds = %if.then1530, %if.end1527
  %1223 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81532 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1223, i32 0, i32 25
  %1224 = load i32, i32* %utf81532, align 8
  %tobool1533 = icmp ne i32 %1224, 0
  %1225 = zext i1 %tobool1533 to i64
  %cond1534 = select i1 %tobool1533, i32 1, i32 0
  %tobool1535 = icmp ne i32 %cond1534, 0
  %1226 = zext i1 %tobool1535 to i64
  %cond1536 = select i1 %tobool1535, i32 1, i32 0
  %1227 = load i64, i64* %len1515, align 8
  %1228 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1537 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1228, i32 0, i32 2
  %1229 = load i8*, i8** %precomp1537, align 8
  %1230 = load i8*, i8** %ellipses1514, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.253, i64 0, i64 0), i32 %cond1536, i64 %1227, i8* %1229, i8* %1230)
  br label %do.end1538

do.end1538:                                       ; preds = %if.end1531
  br label %if.end1539

if.end1539:                                       ; preds = %do.end1538, %lor.lhs.false1465
  %1231 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_blocks1540 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1231, i32 0, i32 38
  %1232 = load %struct.reg_code_block*, %struct.reg_code_block** %code_blocks1540, align 8
  %1233 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_index1541 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1233, i32 0, i32 40
  %1234 = load i32, i32* %code_index1541, align 4
  %idxprom1542 = sext i32 %1234 to i64
  %arrayidx1543 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %1232, i64 %idxprom1542
  store %struct.reg_code_block* %arrayidx1543, %struct.reg_code_block** %cb, align 8
  %1235 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start1544 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1235, i32 0, i32 6
  %1236 = load i8*, i8** %start1544, align 8
  %1237 = load %struct.reg_code_block*, %struct.reg_code_block** %cb, align 8
  %end1545 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %1237, i32 0, i32 1
  %1238 = load i64, i64* %end1545, align 8
  %add.ptr1546 = getelementptr inbounds i8, i8* %1236, i64 %1238
  %1239 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1547 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1239, i32 0, i32 8
  store i8* %add.ptr1546, i8** %parse1547, align 8
  %1240 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1548 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1240, i32 0, i32 12
  %1241 = load %struct.regnode*, %struct.regnode** %emit1548, align 8
  %1242 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1549 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1242, i32 0, i32 13
  %1243 = bitcast %struct.regnode_ssc* %emit_dummy1549 to %struct.regnode*
  %cmp1550 = icmp eq %struct.regnode* %1241, %1243
  br i1 %cmp1550, label %if.end1581, label %if.then1552

if.then1552:                                      ; preds = %if.end1539
  %1244 = load %struct.reg_code_block*, %struct.reg_code_block** %cb, align 8
  %block = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %1244, i32 0, i32 2
  %1245 = load %struct.op*, %struct.op** %block, align 8
  store %struct.op* %1245, %struct.op** %o, align 8
  %1246 = load %struct.reg_code_block*, %struct.reg_code_block** %cb, align 8
  %src_regex = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %1246, i32 0, i32 3
  %1247 = load %struct.p5rx*, %struct.p5rx** %src_regex, align 8
  %tobool1553 = icmp ne %struct.p5rx* %1247, null
  br i1 %tobool1553, label %if.then1554, label %if.else1569

if.then1554:                                      ; preds = %if.then1552
  %1248 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1555 = call i32 @S_add_data(%struct.RExC_state_t* %1248, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.254, i64 0, i64 0), i32 2)
  store i32 %call1555, i32* %n, align 4
  %1249 = load %struct.reg_code_block*, %struct.reg_code_block** %cb, align 8
  %src_regex1556 = getelementptr inbounds %struct.reg_code_block, %struct.reg_code_block* %1249, i32 0, i32 3
  %1250 = load %struct.p5rx*, %struct.p5rx** %src_regex1556, align 8
  %1251 = bitcast %struct.p5rx* %1250 to %struct.sv*
  %1252 = bitcast %struct.sv* %1251 to i8*
  %1253 = bitcast i8* %1252 to %struct.sv*
  %call1557 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %1253)
  %1254 = bitcast %struct.sv* %call1557 to i8*
  %1255 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi1558 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1255, i32 0, i32 5
  %1256 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi1558, align 8
  %data1559 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %1256, i32 0, i32 3
  %1257 = load %struct.reg_data*, %struct.reg_data** %data1559, align 8
  %data1560 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %1257, i32 0, i32 2
  %1258 = load i32, i32* %n, align 4
  %idxprom1561 = zext i32 %1258 to i64
  %arrayidx1562 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data1560, i64 0, i64 %idxprom1561
  store i8* %1254, i8** %arrayidx1562, align 8
  %1259 = load %struct.op*, %struct.op** %o, align 8
  %1260 = bitcast %struct.op* %1259 to i8*
  %1261 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi1563 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1261, i32 0, i32 5
  %1262 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi1563, align 8
  %data1564 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %1262, i32 0, i32 3
  %1263 = load %struct.reg_data*, %struct.reg_data** %data1564, align 8
  %data1565 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %1263, i32 0, i32 2
  %1264 = load i32, i32* %n, align 4
  %add1566 = add i32 %1264, 1
  %idxprom1567 = zext i32 %add1566 to i64
  %arrayidx1568 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data1565, i64 0, i64 %idxprom1567
  store i8* %1260, i8** %arrayidx1568, align 8
  br label %if.end1580

if.else1569:                                      ; preds = %if.then1552
  %1265 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1266 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %pm_flags1570 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1266, i32 0, i32 1
  %1267 = load i32, i32* %pm_flags1570, align 4
  %and1571 = and i32 %1267, 268435456
  %tobool1572 = icmp ne i32 %and1571, 0
  %1268 = zext i1 %tobool1572 to i64
  %cond1573 = select i1 %tobool1572, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.255, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.210, i64 0, i64 0)
  %call1574 = call i32 @S_add_data(%struct.RExC_state_t* %1265, i8* %cond1573, i32 1)
  store i32 %call1574, i32* %n, align 4
  %1269 = load %struct.op*, %struct.op** %o, align 8
  %1270 = bitcast %struct.op* %1269 to i8*
  %1271 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi1575 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1271, i32 0, i32 5
  %1272 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi1575, align 8
  %data1576 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %1272, i32 0, i32 3
  %1273 = load %struct.reg_data*, %struct.reg_data** %data1576, align 8
  %data1577 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %1273, i32 0, i32 2
  %1274 = load i32, i32* %n, align 4
  %idxprom1578 = zext i32 %1274 to i64
  %arrayidx1579 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data1577, i64 0, i64 %idxprom1578
  store i8* %1270, i8** %arrayidx1579, align 8
  br label %if.end1580

if.end1580:                                       ; preds = %if.else1569, %if.then1554
  br label %if.end1581

if.end1581:                                       ; preds = %if.end1580, %if.end1539
  %1275 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %code_index1582 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1275, i32 0, i32 40
  %1276 = load i32, i32* %code_index1582, align 4
  %inc1583 = add nsw i32 %1276, 1
  store i32 %inc1583, i32* %code_index1582, align 4
  %1277 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1584 = call i8* @S_nextchar(%struct.RExC_state_t* %1277)
  %1278 = load i8, i8* %is_logical, align 1
  %tobool1585 = trunc i8 %1278 to i1
  br i1 %tobool1585, label %if.then1586, label %if.end1599

if.then1586:                                      ; preds = %if.end1581
  %1279 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1587 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %1279, i8 zeroext 70)
  store %struct.regnode* %call1587, %struct.regnode** %ret, align 8
  %1280 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1281 = load i32, i32* %n, align 4
  %1282 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1588 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1282, i32 0, i32 0
  %1283 = load i32, i32* %flags1588, align 8
  %and1589 = and i32 %1283, 2047
  %call1590 = call %struct.regnode* @S_reg2Lanode(%struct.RExC_state_t* %1280, i8 zeroext 68, i32 %1281, i32 %and1589)
  store %struct.regnode* %call1590, %struct.regnode** %eval, align 8
  %1284 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1591 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1284, i32 0, i32 12
  %1285 = load %struct.regnode*, %struct.regnode** %emit1591, align 8
  %1286 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1592 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1286, i32 0, i32 13
  %1287 = bitcast %struct.regnode_ssc* %emit_dummy1592 to %struct.regnode*
  %cmp1593 = icmp eq %struct.regnode* %1285, %1287
  br i1 %cmp1593, label %if.end1597, label %if.then1595

if.then1595:                                      ; preds = %if.then1586
  %1288 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags1596 = getelementptr inbounds %struct.regnode, %struct.regnode* %1288, i32 0, i32 0
  store i8 2, i8* %flags1596, align 2
  br label %if.end1597

if.end1597:                                       ; preds = %if.then1595, %if.then1586
  %1289 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1290 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1291 = load %struct.regnode*, %struct.regnode** %eval, align 8
  %1292 = load i32, i32* %depth.addr, align 4
  %add1598 = add i32 %1292, 1
  call void @S_regtail(%struct.RExC_state_t* %1289, %struct.regnode* %1290, %struct.regnode* %1291, i32 %add1598)
  %1293 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %1293, %struct.regnode** %retval, align 8
  br label %return

if.end1599:                                       ; preds = %if.end1581
  %1294 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1295 = load i32, i32* %n, align 4
  %call1600 = call %struct.regnode* @S_reg2Lanode(%struct.RExC_state_t* %1294, i8 zeroext 68, i32 %1295, i32 0)
  store %struct.regnode* %call1600, %struct.regnode** %ret, align 8
  %1296 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %1296, %struct.regnode** %retval, align 8
  br label %return

sw.bb1601:                                        ; preds = %if.end539
  store i32 0, i32* %is_define, align 4
  store i32 6, i32* %DEFINE_len, align 4
  %1297 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1602 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1297, i32 0, i32 8
  %1298 = load i8*, i8** %parse1602, align 8
  %arrayidx1603 = getelementptr inbounds i8, i8* %1298, i64 0
  %1299 = load i8, i8* %arrayidx1603, align 1
  %conv1604 = sext i8 %1299 to i32
  %cmp1605 = icmp eq i32 %conv1604, 63
  br i1 %cmp1605, label %if.then1607, label %if.else1648

if.then1607:                                      ; preds = %sw.bb1601
  %1300 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1608 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1300, i32 0, i32 8
  %1301 = load i8*, i8** %parse1608, align 8
  %arrayidx1609 = getelementptr inbounds i8, i8* %1301, i64 1
  %1302 = load i8, i8* %arrayidx1609, align 1
  %conv1610 = sext i8 %1302 to i32
  %cmp1611 = icmp eq i32 %conv1610, 61
  br i1 %cmp1611, label %if.then1631, label %lor.lhs.false1613

lor.lhs.false1613:                                ; preds = %if.then1607
  %1303 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1614 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1303, i32 0, i32 8
  %1304 = load i8*, i8** %parse1614, align 8
  %arrayidx1615 = getelementptr inbounds i8, i8* %1304, i64 1
  %1305 = load i8, i8* %arrayidx1615, align 1
  %conv1616 = sext i8 %1305 to i32
  %cmp1617 = icmp eq i32 %conv1616, 33
  br i1 %cmp1617, label %if.then1631, label %lor.lhs.false1619

lor.lhs.false1619:                                ; preds = %lor.lhs.false1613
  %1306 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1620 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1306, i32 0, i32 8
  %1307 = load i8*, i8** %parse1620, align 8
  %arrayidx1621 = getelementptr inbounds i8, i8* %1307, i64 1
  %1308 = load i8, i8* %arrayidx1621, align 1
  %conv1622 = sext i8 %1308 to i32
  %cmp1623 = icmp eq i32 %conv1622, 60
  br i1 %cmp1623, label %if.then1631, label %lor.lhs.false1625

lor.lhs.false1625:                                ; preds = %lor.lhs.false1619
  %1309 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1626 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1309, i32 0, i32 8
  %1310 = load i8*, i8** %parse1626, align 8
  %arrayidx1627 = getelementptr inbounds i8, i8* %1310, i64 1
  %1311 = load i8, i8* %arrayidx1627, align 1
  %conv1628 = sext i8 %1311 to i32
  %cmp1629 = icmp eq i32 %conv1628, 123
  br i1 %cmp1629, label %if.then1631, label %if.end1647

if.then1631:                                      ; preds = %lor.lhs.false1625, %lor.lhs.false1619, %lor.lhs.false1613, %if.then1607
  %1312 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1632 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %1312, i8 zeroext 70)
  store %struct.regnode* %call1632, %struct.regnode** %ret, align 8
  %1313 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1633 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1313, i32 0, i32 12
  %1314 = load %struct.regnode*, %struct.regnode** %emit1633, align 8
  %1315 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1634 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1315, i32 0, i32 13
  %1316 = bitcast %struct.regnode_ssc* %emit_dummy1634 to %struct.regnode*
  %cmp1635 = icmp eq %struct.regnode* %1314, %1316
  br i1 %cmp1635, label %if.end1639, label %if.then1637

if.then1637:                                      ; preds = %if.then1631
  %1317 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags1638 = getelementptr inbounds %struct.regnode, %struct.regnode* %1317, i32 0, i32 0
  store i8 1, i8* %flags1638, align 2
  br label %if.end1639

if.end1639:                                       ; preds = %if.then1637, %if.then1631
  %1318 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1319 = load i32, i32* %depth.addr, align 4
  %add1640 = add i32 %1319, 1
  %call1641 = call %struct.regnode* @S_reg(%struct.RExC_state_t* %1318, i32 1, i32* %flag, i32 %add1640)
  store %struct.regnode* %call1641, %struct.regnode** %tail, align 8
  %1320 = load i32, i32* %flag, align 4
  %and1642 = and i32 %1320, 32
  %tobool1643 = icmp ne i32 %and1642, 0
  br i1 %tobool1643, label %if.then1644, label %if.end1645

if.then1644:                                      ; preds = %if.end1639
  %1321 = load i32*, i32** %flagp.addr, align 8
  store i32 32, i32* %1321, align 4
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end1645:                                       ; preds = %if.end1639
  %1322 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1323 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1324 = load %struct.regnode*, %struct.regnode** %tail, align 8
  %1325 = load i32, i32* %depth.addr, align 4
  %add1646 = add i32 %1325, 1
  call void @S_regtail(%struct.RExC_state_t* %1322, %struct.regnode* %1323, %struct.regnode* %1324, i32 %add1646)
  br label %insert_if

if.end1647:                                       ; preds = %lor.lhs.false1625
  br label %if.end2189

if.else1648:                                      ; preds = %sw.bb1601
  %1326 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1649 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1326, i32 0, i32 8
  %1327 = load i8*, i8** %parse1649, align 8
  %arrayidx1650 = getelementptr inbounds i8, i8* %1327, i64 0
  %1328 = load i8, i8* %arrayidx1650, align 1
  %conv1651 = sext i8 %1328 to i32
  %cmp1652 = icmp eq i32 %conv1651, 60
  br i1 %cmp1652, label %if.then1660, label %lor.lhs.false1654

lor.lhs.false1654:                                ; preds = %if.else1648
  %1329 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1655 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1329, i32 0, i32 8
  %1330 = load i8*, i8** %parse1655, align 8
  %arrayidx1656 = getelementptr inbounds i8, i8* %1330, i64 0
  %1331 = load i8, i8* %arrayidx1656, align 1
  %conv1657 = sext i8 %1331 to i32
  %cmp1658 = icmp eq i32 %conv1657, 39
  br i1 %cmp1658, label %if.then1660, label %if.else1760

if.then1660:                                      ; preds = %lor.lhs.false1654, %if.else1648
  %1332 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1661 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1332, i32 0, i32 8
  %1333 = load i8*, i8** %parse1661, align 8
  %arrayidx1662 = getelementptr inbounds i8, i8* %1333, i64 0
  %1334 = load i8, i8* %arrayidx1662, align 1
  %conv1663 = sext i8 %1334 to i32
  %cmp1664 = icmp eq i32 %conv1663, 60
  %1335 = zext i1 %cmp1664 to i64
  %cond1666 = select i1 %cmp1664, i32 62, i32 39
  %conv1667 = trunc i32 %cond1666 to i8
  store i8 %conv1667, i8* %ch, align 1
  %1336 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1669 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1336, i32 0, i32 8
  %1337 = load i8*, i8** %parse1669, align 8
  %incdec.ptr1670 = getelementptr inbounds i8, i8* %1337, i32 1
  store i8* %incdec.ptr1670, i8** %parse1669, align 8
  store i8* %1337, i8** %name_start1668, align 8
  store i32 0, i32* %num1671, align 4
  %1338 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1339 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1673 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1339, i32 0, i32 12
  %1340 = load %struct.regnode*, %struct.regnode** %emit1673, align 8
  %1341 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1674 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1341, i32 0, i32 13
  %1342 = bitcast %struct.regnode_ssc* %emit_dummy1674 to %struct.regnode*
  %cmp1675 = icmp eq %struct.regnode* %1340, %1342
  %1343 = zext i1 %cmp1675 to i64
  %cond1677 = select i1 %cmp1675, i32 0, i32 2
  %call1678 = call %struct.sv* @S_reg_scan_name(%struct.RExC_state_t* %1338, i32 %cond1677)
  store %struct.sv* %call1678, %struct.sv** %sv_dat1672, align 8
  %1344 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1679 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1344, i32 0, i32 8
  %1345 = load i8*, i8** %parse1679, align 8
  %1346 = load i8*, i8** %name_start1668, align 8
  %cmp1680 = icmp eq i8* %1345, %1346
  br i1 %cmp1680, label %if.then1688, label %lor.lhs.false1682

lor.lhs.false1682:                                ; preds = %if.then1660
  %1347 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1683 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1347, i32 0, i32 8
  %1348 = load i8*, i8** %parse1683, align 8
  %1349 = load i8, i8* %1348, align 1
  %conv1684 = sext i8 %1349 to i32
  %1350 = load i8, i8* %ch, align 1
  %conv1685 = sext i8 %1350 to i32
  %cmp1686 = icmp ne i32 %conv1684, %conv1685
  br i1 %cmp1686, label %if.then1688, label %if.end1737

if.then1688:                                      ; preds = %lor.lhs.false1682, %if.then1660
  br label %do.body1689

do.body1689:                                      ; preds = %if.then1688
  %1351 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1690 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1351, i32 0, i32 12
  %1352 = load %struct.regnode*, %struct.regnode** %emit1690, align 8
  %1353 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1691 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1353, i32 0, i32 13
  %1354 = bitcast %struct.regnode_ssc* %emit_dummy1691 to %struct.regnode*
  %cmp1692 = icmp eq %struct.regnode* %1352, %1354
  br i1 %cmp1692, label %if.end1696, label %if.then1694

if.then1694:                                      ; preds = %do.body1689
  %1355 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1695 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1355, i32 0, i32 3
  %1356 = load %struct.p5rx*, %struct.p5rx** %rx_sv1695, align 8
  %1357 = bitcast %struct.p5rx* %1356 to i8*
  %1358 = bitcast i8* %1357 to %struct.sv*
  %1359 = bitcast %struct.sv* %1358 to i8*
  call void @Perl_save_pushptr(i8* %1359, i32 11)
  br label %if.end1696

if.end1696:                                       ; preds = %if.then1694, %do.body1689
  br label %do.body1697

do.body1697:                                      ; preds = %if.end1696
  %1360 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1699 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1360, i32 0, i32 8
  %1361 = load i8*, i8** %parse1699, align 8
  %1362 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1700 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1362, i32 0, i32 2
  %1363 = load i8*, i8** %precomp1700, align 8
  %sub.ptr.lhs.cast1701 = ptrtoint i8* %1361 to i64
  %sub.ptr.rhs.cast1702 = ptrtoint i8* %1363 to i64
  %sub.ptr.sub1703 = sub i64 %sub.ptr.lhs.cast1701, %sub.ptr.rhs.cast1702
  store i64 %sub.ptr.sub1703, i64* %offset1698, align 8
  %1364 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81704 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1364, i32 0, i32 25
  %1365 = load i32, i32* %utf81704, align 8
  %tobool1705 = icmp ne i32 %1365, 0
  %1366 = zext i1 %tobool1705 to i64
  %cond1706 = select i1 %tobool1705, i32 1, i32 0
  %tobool1707 = icmp ne i32 %cond1706, 0
  %1367 = load i8, i8* %ch, align 1
  %conv1708 = sext i8 %1367 to i32
  %cmp1709 = icmp eq i32 %conv1708, 62
  br i1 %cmp1709, label %cond.true1711, label %cond.false1712

cond.true1711:                                    ; preds = %do.body1697
  br label %cond.end1714

cond.false1712:                                   ; preds = %do.body1697
  %1368 = load i8, i8* %ch, align 1
  %conv1713 = sext i8 %1368 to i32
  br label %cond.end1714

cond.end1714:                                     ; preds = %cond.false1712, %cond.true1711
  %cond1715 = phi i32 [ 60, %cond.true1711 ], [ %conv1713, %cond.false1712 ]
  %1369 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81716 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1369, i32 0, i32 25
  %1370 = load i32, i32* %utf81716, align 8
  %tobool1717 = icmp ne i32 %1370, 0
  %1371 = zext i1 %tobool1717 to i64
  %cond1718 = select i1 %tobool1717, i32 1, i32 0
  %tobool1719 = icmp ne i32 %cond1718, 0
  %1372 = zext i1 %tobool1719 to i64
  %cond1720 = select i1 %tobool1719, i32 1, i32 0
  %1373 = load i64, i64* %offset1698, align 8
  %1374 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1721 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1374, i32 0, i32 2
  %1375 = load i8*, i8** %precomp1721, align 8
  %1376 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81722 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1376, i32 0, i32 25
  %1377 = load i32, i32* %utf81722, align 8
  %tobool1723 = icmp ne i32 %1377, 0
  %1378 = zext i1 %tobool1723 to i64
  %cond1724 = select i1 %tobool1723, i32 1, i32 0
  %tobool1725 = icmp ne i32 %cond1724, 0
  %1379 = zext i1 %tobool1725 to i64
  %cond1726 = select i1 %tobool1725, i32 1, i32 0
  %1380 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1727 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1380, i32 0, i32 7
  %1381 = load i8*, i8** %end1727, align 8
  %1382 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1728 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1382, i32 0, i32 2
  %1383 = load i8*, i8** %precomp1728, align 8
  %sub.ptr.lhs.cast1729 = ptrtoint i8* %1381 to i64
  %sub.ptr.rhs.cast1730 = ptrtoint i8* %1383 to i64
  %sub.ptr.sub1731 = sub i64 %sub.ptr.lhs.cast1729, %sub.ptr.rhs.cast1730
  %1384 = load i64, i64* %offset1698, align 8
  %sub1732 = sub nsw i64 %sub.ptr.sub1731, %1384
  %1385 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1733 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1385, i32 0, i32 2
  %1386 = load i8*, i8** %precomp1733, align 8
  %1387 = load i64, i64* %offset1698, align 8
  %add.ptr1734 = getelementptr inbounds i8, i8* %1386, i64 %1387
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool1707, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.256, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %cond1715, i32 %cond1720, i64 %1373, i8* %1375, i32 %cond1726, i64 %sub1732, i8* %add.ptr1734)
  br label %do.end1735

do.end1735:                                       ; preds = %cond.end1714
  br label %do.end1736

do.end1736:                                       ; preds = %do.end1735
  br label %if.end1737

if.end1737:                                       ; preds = %do.end1736, %lor.lhs.false1682
  %1388 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1738 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1388, i32 0, i32 8
  %1389 = load i8*, i8** %parse1738, align 8
  %incdec.ptr1739 = getelementptr inbounds i8, i8* %1389, i32 1
  store i8* %incdec.ptr1739, i8** %parse1738, align 8
  %1390 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1740 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1390, i32 0, i32 12
  %1391 = load %struct.regnode*, %struct.regnode** %emit1740, align 8
  %1392 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1741 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1392, i32 0, i32 13
  %1393 = bitcast %struct.regnode_ssc* %emit_dummy1741 to %struct.regnode*
  %cmp1742 = icmp eq %struct.regnode* %1391, %1393
  br i1 %cmp1742, label %if.end1758, label %if.then1744

if.then1744:                                      ; preds = %if.end1737
  %1394 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1745 = call i32 @S_add_data(%struct.RExC_state_t* %1394, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.238, i64 0, i64 0), i32 1)
  store i32 %call1745, i32* %num1671, align 4
  %1395 = load %struct.sv*, %struct.sv** %sv_dat1672, align 8
  %1396 = bitcast %struct.sv* %1395 to i8*
  %1397 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi1746 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1397, i32 0, i32 5
  %1398 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi1746, align 8
  %data1747 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %1398, i32 0, i32 3
  %1399 = load %struct.reg_data*, %struct.reg_data** %data1747, align 8
  %data1748 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %1399, i32 0, i32 2
  %1400 = load i32, i32* %num1671, align 4
  %idxprom1749 = zext i32 %1400 to i64
  %arrayidx1750 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data1748, i64 0, i64 %idxprom1749
  store i8* %1396, i8** %arrayidx1750, align 8
  br label %do.body1751

do.body1751:                                      ; preds = %if.then1744
  %1401 = load %struct.sv*, %struct.sv** %sv_dat1672, align 8
  %tobool1752 = icmp ne %struct.sv* %1401, null
  br i1 %tobool1752, label %if.then1753, label %if.end1756

if.then1753:                                      ; preds = %do.body1751
  %1402 = load %struct.sv*, %struct.sv** %sv_dat1672, align 8
  %sv_refcnt1754 = getelementptr inbounds %struct.sv, %struct.sv* %1402, i32 0, i32 1
  %1403 = load i32, i32* %sv_refcnt1754, align 8
  %inc1755 = add i32 %1403, 1
  store i32 %inc1755, i32* %sv_refcnt1754, align 8
  br label %if.end1756

if.end1756:                                       ; preds = %if.then1753, %do.body1751
  br label %do.end1757

do.end1757:                                       ; preds = %if.end1756
  br label %if.end1758

if.end1758:                                       ; preds = %do.end1757, %if.end1737
  %1404 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1405 = load i32, i32* %num1671, align 4
  %call1759 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %1404, i8 zeroext 78, i32 %1405)
  store %struct.regnode* %call1759, %struct.regnode** %ret, align 8
  br label %insert_if_check_paren

if.else1760:                                      ; preds = %lor.lhs.false1654
  %1406 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1761 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1406, i32 0, i32 7
  %1407 = load i8*, i8** %end1761, align 8
  %1408 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1762 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1408, i32 0, i32 8
  %1409 = load i8*, i8** %parse1762, align 8
  %sub.ptr.lhs.cast1763 = ptrtoint i8* %1407 to i64
  %sub.ptr.rhs.cast1764 = ptrtoint i8* %1409 to i64
  %sub.ptr.sub1765 = sub i64 %sub.ptr.lhs.cast1763, %sub.ptr.rhs.cast1764
  %cmp1766 = icmp sge i64 %sub.ptr.sub1765, 6
  br i1 %cmp1766, label %land.lhs.true1768, label %if.else1776

land.lhs.true1768:                                ; preds = %if.else1760
  %1410 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1769 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1410, i32 0, i32 8
  %1411 = load i8*, i8** %parse1769, align 8
  %call1770 = call i32 @strncmp(i8* %1411, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.257, i64 0, i64 0), i64 6) #6
  %tobool1771 = icmp ne i32 %call1770, 0
  br i1 %tobool1771, label %if.else1776, label %if.then1772

if.then1772:                                      ; preds = %land.lhs.true1768
  %1412 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1773 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %1412, i8 zeroext 80, i32 0)
  store %struct.regnode* %call1773, %struct.regnode** %ret, align 8
  %1413 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1774 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1413, i32 0, i32 8
  %1414 = load i8*, i8** %parse1774, align 8
  %add.ptr1775 = getelementptr inbounds i8, i8* %1414, i64 6
  store i8* %add.ptr1775, i8** %parse1774, align 8
  store i32 1, i32* %is_define, align 4
  br label %insert_if_check_paren

if.else1776:                                      ; preds = %land.lhs.true1768, %if.else1760
  %1415 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1777 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1415, i32 0, i32 8
  %1416 = load i8*, i8** %parse1777, align 8
  %arrayidx1778 = getelementptr inbounds i8, i8* %1416, i64 0
  %1417 = load i8, i8* %arrayidx1778, align 1
  %conv1779 = sext i8 %1417 to i32
  %cmp1780 = icmp eq i32 %conv1779, 82
  br i1 %cmp1780, label %if.then1782, label %if.else1833

if.then1782:                                      ; preds = %if.else1776
  %1418 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1783 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1418, i32 0, i32 8
  %1419 = load i8*, i8** %parse1783, align 8
  %incdec.ptr1784 = getelementptr inbounds i8, i8* %1419, i32 1
  store i8* %incdec.ptr1784, i8** %parse1783, align 8
  store i32 0, i32* %parno, align 4
  %1420 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1785 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1420, i32 0, i32 8
  %1421 = load i8*, i8** %parse1785, align 8
  %arrayidx1786 = getelementptr inbounds i8, i8* %1421, i64 0
  %1422 = load i8, i8* %arrayidx1786, align 1
  %conv1787 = sext i8 %1422 to i32
  %cmp1788 = icmp sge i32 %conv1787, 49
  br i1 %cmp1788, label %land.lhs.true1790, label %if.else1807

land.lhs.true1790:                                ; preds = %if.then1782
  %1423 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1791 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1423, i32 0, i32 8
  %1424 = load i8*, i8** %parse1791, align 8
  %arrayidx1792 = getelementptr inbounds i8, i8* %1424, i64 0
  %1425 = load i8, i8* %arrayidx1792, align 1
  %conv1793 = sext i8 %1425 to i32
  %cmp1794 = icmp sle i32 %conv1793, 57
  br i1 %cmp1794, label %if.then1796, label %if.else1807

if.then1796:                                      ; preds = %land.lhs.true1790
  %1426 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1797 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1426, i32 0, i32 8
  %1427 = load i8*, i8** %parse1797, align 8
  %call1798 = call zeroext i1 @Perl_grok_atoUV(i8* %1427, i64* %uv, i8** %endptr)
  br i1 %call1798, label %land.lhs.true1800, label %if.end1806

land.lhs.true1800:                                ; preds = %if.then1796
  %1428 = load i64, i64* %uv, align 8
  %cmp1801 = icmp ule i64 %1428, 2147483647
  br i1 %cmp1801, label %if.then1803, label %if.end1806

if.then1803:                                      ; preds = %land.lhs.true1800
  %1429 = load i64, i64* %uv, align 8
  %conv1804 = trunc i64 %1429 to i32
  store i32 %conv1804, i32* %parno, align 4
  %1430 = load i8*, i8** %endptr, align 8
  %1431 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1805 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1431, i32 0, i32 8
  store i8* %1430, i8** %parse1805, align 8
  br label %if.end1806

if.end1806:                                       ; preds = %if.then1803, %land.lhs.true1800, %if.then1796
  br label %if.end1831

if.else1807:                                      ; preds = %land.lhs.true1790, %if.then1782
  %1432 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1808 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1432, i32 0, i32 8
  %1433 = load i8*, i8** %parse1808, align 8
  %arrayidx1809 = getelementptr inbounds i8, i8* %1433, i64 0
  %1434 = load i8, i8* %arrayidx1809, align 1
  %conv1810 = sext i8 %1434 to i32
  %cmp1811 = icmp eq i32 %conv1810, 38
  br i1 %cmp1811, label %if.then1813, label %if.end1830

if.then1813:                                      ; preds = %if.else1807
  %1435 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1815 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1435, i32 0, i32 8
  %1436 = load i8*, i8** %parse1815, align 8
  %incdec.ptr1816 = getelementptr inbounds i8, i8* %1436, i32 1
  store i8* %incdec.ptr1816, i8** %parse1815, align 8
  %1437 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1438 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1817 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1438, i32 0, i32 12
  %1439 = load %struct.regnode*, %struct.regnode** %emit1817, align 8
  %1440 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1818 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1440, i32 0, i32 13
  %1441 = bitcast %struct.regnode_ssc* %emit_dummy1818 to %struct.regnode*
  %cmp1819 = icmp eq %struct.regnode* %1439, %1441
  %1442 = zext i1 %cmp1819 to i64
  %cond1821 = select i1 %cmp1819, i32 0, i32 2
  %call1822 = call %struct.sv* @S_reg_scan_name(%struct.RExC_state_t* %1437, i32 %cond1821)
  store %struct.sv* %call1822, %struct.sv** %sv_dat1814, align 8
  %1443 = load %struct.sv*, %struct.sv** %sv_dat1814, align 8
  %tobool1823 = icmp ne %struct.sv* %1443, null
  br i1 %tobool1823, label %cond.true1824, label %cond.false1827

cond.true1824:                                    ; preds = %if.then1813
  %1444 = load %struct.sv*, %struct.sv** %sv_dat1814, align 8
  %sv_u1825 = getelementptr inbounds %struct.sv, %struct.sv* %1444, i32 0, i32 3
  %svu_pv1826 = bitcast %union.anon* %sv_u1825 to i8**
  %1445 = load i8*, i8** %svu_pv1826, align 8
  %1446 = bitcast i8* %1445 to i32*
  %1447 = load i32, i32* %1446, align 4
  br label %cond.end1828

cond.false1827:                                   ; preds = %if.then1813
  br label %cond.end1828

cond.end1828:                                     ; preds = %cond.false1827, %cond.true1824
  %cond1829 = phi i32 [ %1447, %cond.true1824 ], [ 0, %cond.false1827 ]
  store i32 %cond1829, i32* %parno, align 4
  br label %if.end1830

if.end1830:                                       ; preds = %cond.end1828, %if.else1807
  br label %if.end1831

if.end1831:                                       ; preds = %if.end1830, %if.end1806
  %1448 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1449 = load i32, i32* %parno, align 4
  %call1832 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %1448, i8 zeroext 79, i32 %1449)
  store %struct.regnode* %call1832, %struct.regnode** %ret, align 8
  br label %insert_if_check_paren

if.else1833:                                      ; preds = %if.else1776
  %1450 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1834 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1450, i32 0, i32 8
  %1451 = load i8*, i8** %parse1834, align 8
  %arrayidx1835 = getelementptr inbounds i8, i8* %1451, i64 0
  %1452 = load i8, i8* %arrayidx1835, align 1
  %conv1836 = sext i8 %1452 to i32
  %cmp1837 = icmp sge i32 %conv1836, 49
  br i1 %cmp1837, label %land.lhs.true1839, label %if.end2185

land.lhs.true1839:                                ; preds = %if.else1833
  %1453 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1840 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1453, i32 0, i32 8
  %1454 = load i8*, i8** %parse1840, align 8
  %arrayidx1841 = getelementptr inbounds i8, i8* %1454, i64 0
  %1455 = load i8, i8* %arrayidx1841, align 1
  %conv1842 = sext i8 %1455 to i32
  %cmp1843 = icmp sle i32 %conv1842, 57
  br i1 %cmp1843, label %if.then1845, label %if.end2185

if.then1845:                                      ; preds = %land.lhs.true1839
  %1456 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1847 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1456, i32 0, i32 8
  %1457 = load i8*, i8** %parse1847, align 8
  %call1848 = call zeroext i1 @Perl_grok_atoUV(i8* %1457, i64* %uv1846, i8** %endptr)
  br i1 %call1848, label %land.lhs.true1850, label %if.end1856

land.lhs.true1850:                                ; preds = %if.then1845
  %1458 = load i64, i64* %uv1846, align 8
  %cmp1851 = icmp ule i64 %1458, 2147483647
  br i1 %cmp1851, label %if.then1853, label %if.end1856

if.then1853:                                      ; preds = %land.lhs.true1850
  %1459 = load i64, i64* %uv1846, align 8
  %conv1854 = trunc i64 %1459 to i32
  store i32 %conv1854, i32* %parno, align 4
  %1460 = load i8*, i8** %endptr, align 8
  %1461 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1855 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1461, i32 0, i32 8
  store i8* %1460, i8** %parse1855, align 8
  br label %if.end1856

if.end1856:                                       ; preds = %if.then1853, %land.lhs.true1850, %if.then1845
  %1462 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1463 = load i32, i32* %parno, align 4
  %call1857 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %1462, i8 zeroext 67, i32 %1463)
  store %struct.regnode* %call1857, %struct.regnode** %ret, align 8
  br label %insert_if_check_paren

insert_if_check_paren:                            ; preds = %if.end1856, %if.end1831, %if.then1772, %if.end1758
  %1464 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1858 = call i8* @S_nextchar(%struct.RExC_state_t* %1464)
  store i8* %call1858, i8** %tmp, align 8
  %1465 = load i8, i8* %call1858, align 1
  %conv1859 = sext i8 %1465 to i32
  %cmp1860 = icmp ne i32 %conv1859, 41
  br i1 %cmp1860, label %if.then1862, label %if.end1924

if.then1862:                                      ; preds = %insert_if_check_paren
  %1466 = load i8*, i8** %tmp, align 8
  %1467 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1863 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1467, i32 0, i32 8
  store i8* %1466, i8** %parse1863, align 8
  %1468 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81864 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1468, i32 0, i32 25
  %1469 = load i32, i32* %utf81864, align 8
  %tobool1865 = icmp ne i32 %1469, 0
  br i1 %tobool1865, label %cond.true1866, label %cond.false1867

cond.true1866:                                    ; preds = %if.then1862
  br i1 true, label %cond.true1868, label %cond.false1873

cond.false1867:                                   ; preds = %if.then1862
  br i1 false, label %cond.true1868, label %cond.false1873

cond.true1868:                                    ; preds = %cond.false1867, %cond.true1866
  %1470 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1869 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1470, i32 0, i32 8
  %1471 = load i8*, i8** %parse1869, align 8
  %1472 = load i8, i8* %1471, align 1
  %idxprom1870 = zext i8 %1472 to i64
  %arrayidx1871 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom1870
  %1473 = load i8, i8* %arrayidx1871, align 1
  %conv1872 = zext i8 %1473 to i32
  br label %cond.end1874

cond.false1873:                                   ; preds = %cond.false1867, %cond.true1866
  br label %cond.end1874

cond.end1874:                                     ; preds = %cond.false1873, %cond.true1868
  %cond1875 = phi i32 [ %conv1872, %cond.true1868 ], [ 1, %cond.false1873 ]
  %1474 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1876 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1474, i32 0, i32 8
  %1475 = load i8*, i8** %parse1876, align 8
  %idx.ext1877 = sext i32 %cond1875 to i64
  %add.ptr1878 = getelementptr inbounds i8, i8* %1475, i64 %idx.ext1877
  store i8* %add.ptr1878, i8** %parse1876, align 8
  br label %do.body1879

do.body1879:                                      ; preds = %cond.end1874
  %1476 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1880 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1476, i32 0, i32 12
  %1477 = load %struct.regnode*, %struct.regnode** %emit1880, align 8
  %1478 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1881 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1478, i32 0, i32 13
  %1479 = bitcast %struct.regnode_ssc* %emit_dummy1881 to %struct.regnode*
  %cmp1882 = icmp eq %struct.regnode* %1477, %1479
  br i1 %cmp1882, label %if.end1886, label %if.then1884

if.then1884:                                      ; preds = %do.body1879
  %1480 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1885 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1480, i32 0, i32 3
  %1481 = load %struct.p5rx*, %struct.p5rx** %rx_sv1885, align 8
  %1482 = bitcast %struct.p5rx* %1481 to i8*
  %1483 = bitcast i8* %1482 to %struct.sv*
  %1484 = bitcast %struct.sv* %1483 to i8*
  call void @Perl_save_pushptr(i8* %1484, i32 11)
  br label %if.end1886

if.end1886:                                       ; preds = %if.then1884, %do.body1879
  br label %do.body1887

do.body1887:                                      ; preds = %if.end1886
  %1485 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1889 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1485, i32 0, i32 8
  %1486 = load i8*, i8** %parse1889, align 8
  %1487 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1890 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1487, i32 0, i32 7
  %1488 = load i8*, i8** %end1890, align 8
  %cmp1891 = icmp ugt i8* %1486, %1488
  br i1 %cmp1891, label %cond.true1893, label %cond.false1895

cond.true1893:                                    ; preds = %do.body1887
  %1489 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1894 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1489, i32 0, i32 7
  %1490 = load i8*, i8** %end1894, align 8
  br label %cond.end1897

cond.false1895:                                   ; preds = %do.body1887
  %1491 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1896 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1491, i32 0, i32 8
  %1492 = load i8*, i8** %parse1896, align 8
  br label %cond.end1897

cond.end1897:                                     ; preds = %cond.false1895, %cond.true1893
  %cond1898 = phi i8* [ %1490, %cond.true1893 ], [ %1492, %cond.false1895 ]
  %1493 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1899 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1493, i32 0, i32 2
  %1494 = load i8*, i8** %precomp1899, align 8
  %sub.ptr.lhs.cast1900 = ptrtoint i8* %cond1898 to i64
  %sub.ptr.rhs.cast1901 = ptrtoint i8* %1494 to i64
  %sub.ptr.sub1902 = sub i64 %sub.ptr.lhs.cast1900, %sub.ptr.rhs.cast1901
  store i64 %sub.ptr.sub1902, i64* %offset1888, align 8
  %1495 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81903 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1495, i32 0, i32 25
  %1496 = load i32, i32* %utf81903, align 8
  %tobool1904 = icmp ne i32 %1496, 0
  %1497 = zext i1 %tobool1904 to i64
  %cond1905 = select i1 %tobool1904, i32 1, i32 0
  %tobool1906 = icmp ne i32 %cond1905, 0
  %1498 = zext i1 %tobool1906 to i64
  %cond1907 = select i1 %tobool1906, i32 1, i32 0
  %1499 = load i64, i64* %offset1888, align 8
  %1500 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1908 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1500, i32 0, i32 2
  %1501 = load i8*, i8** %precomp1908, align 8
  %1502 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81909 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1502, i32 0, i32 25
  %1503 = load i32, i32* %utf81909, align 8
  %tobool1910 = icmp ne i32 %1503, 0
  %1504 = zext i1 %tobool1910 to i64
  %cond1911 = select i1 %tobool1910, i32 1, i32 0
  %tobool1912 = icmp ne i32 %cond1911, 0
  %1505 = zext i1 %tobool1912 to i64
  %cond1913 = select i1 %tobool1912, i32 1, i32 0
  %1506 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1914 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1506, i32 0, i32 7
  %1507 = load i8*, i8** %end1914, align 8
  %1508 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1915 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1508, i32 0, i32 2
  %1509 = load i8*, i8** %precomp1915, align 8
  %sub.ptr.lhs.cast1916 = ptrtoint i8* %1507 to i64
  %sub.ptr.rhs.cast1917 = ptrtoint i8* %1509 to i64
  %sub.ptr.sub1918 = sub i64 %sub.ptr.lhs.cast1916, %sub.ptr.rhs.cast1917
  %1510 = load i64, i64* %offset1888, align 8
  %sub1919 = sub nsw i64 %sub.ptr.sub1918, %1510
  %1511 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1920 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1511, i32 0, i32 2
  %1512 = load i8*, i8** %precomp1920, align 8
  %1513 = load i64, i64* %offset1888, align 8
  %add.ptr1921 = getelementptr inbounds i8, i8* %1512, i64 %1513
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.258, i64 0, i64 0), i32 %cond1907, i64 %1499, i8* %1501, i32 %cond1913, i64 %sub1919, i8* %add.ptr1921)
  br label %do.end1922

do.end1922:                                       ; preds = %cond.end1897
  br label %do.end1923

do.end1923:                                       ; preds = %do.end1922
  br label %if.end1924

if.end1924:                                       ; preds = %do.end1923, %insert_if_check_paren
  br label %insert_if

insert_if:                                        ; preds = %if.end1924, %if.end1645
  %1514 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1515 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1516 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1925 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %1516, i8 zeroext 66, i32 0)
  %1517 = load i32, i32* %depth.addr, align 4
  %add1926 = add i32 %1517, 1
  call void @S_regtail(%struct.RExC_state_t* %1514, %struct.regnode* %1515, %struct.regnode* %call1925, i32 %add1926)
  %1518 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1519 = load i32, i32* %depth.addr, align 4
  %add1927 = add i32 %1519, 1
  %call1928 = call %struct.regnode* @S_regbranch(%struct.RExC_state_t* %1518, i32* %flags, i32 1, i32 %add1927)
  store %struct.regnode* %call1928, %struct.regnode** %br, align 8
  %1520 = load %struct.regnode*, %struct.regnode** %br, align 8
  %cmp1929 = icmp eq %struct.regnode* %1520, null
  br i1 %cmp1929, label %if.then1931, label %if.else1963

if.then1931:                                      ; preds = %insert_if
  %1521 = load i32, i32* %flags, align 4
  %and1932 = and i32 %1521, 32
  %tobool1933 = icmp ne i32 %and1932, 0
  br i1 %tobool1933, label %if.then1934, label %if.end1935

if.then1934:                                      ; preds = %if.then1931
  %1522 = load i32*, i32** %flagp.addr, align 8
  store i32 32, i32* %1522, align 4
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end1935:                                       ; preds = %if.then1931
  br label %do.body1936

do.body1936:                                      ; preds = %if.end1935
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses1937, align 8
  %1523 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1939 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1523, i32 0, i32 7
  %1524 = load i8*, i8** %end1939, align 8
  %1525 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1940 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1525, i32 0, i32 2
  %1526 = load i8*, i8** %precomp1940, align 8
  %sub.ptr.lhs.cast1941 = ptrtoint i8* %1524 to i64
  %sub.ptr.rhs.cast1942 = ptrtoint i8* %1526 to i64
  %sub.ptr.sub1943 = sub i64 %sub.ptr.lhs.cast1941, %sub.ptr.rhs.cast1942
  store i64 %sub.ptr.sub1943, i64* %len1938, align 8
  %1527 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1944 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1527, i32 0, i32 12
  %1528 = load %struct.regnode*, %struct.regnode** %emit1944, align 8
  %1529 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1945 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1529, i32 0, i32 13
  %1530 = bitcast %struct.regnode_ssc* %emit_dummy1945 to %struct.regnode*
  %cmp1946 = icmp eq %struct.regnode* %1528, %1530
  br i1 %cmp1946, label %if.end1950, label %if.then1948

if.then1948:                                      ; preds = %do.body1936
  %1531 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1949 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1531, i32 0, i32 3
  %1532 = load %struct.p5rx*, %struct.p5rx** %rx_sv1949, align 8
  %1533 = bitcast %struct.p5rx* %1532 to i8*
  %1534 = bitcast i8* %1533 to %struct.sv*
  %1535 = bitcast %struct.sv* %1534 to i8*
  call void @Perl_save_pushptr(i8* %1535, i32 11)
  br label %if.end1950

if.end1950:                                       ; preds = %if.then1948, %do.body1936
  %1536 = load i64, i64* %len1938, align 8
  %cmp1951 = icmp sgt i64 %1536, 127
  br i1 %cmp1951, label %if.then1953, label %if.end1954

if.then1953:                                      ; preds = %if.end1950
  store i64 117, i64* %len1938, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses1937, align 8
  br label %if.end1954

if.end1954:                                       ; preds = %if.then1953, %if.end1950
  %1537 = load i32, i32* %flags, align 4
  %conv1955 = sext i32 %1537 to i64
  %1538 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81956 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1538, i32 0, i32 25
  %1539 = load i32, i32* %utf81956, align 8
  %tobool1957 = icmp ne i32 %1539, 0
  %1540 = zext i1 %tobool1957 to i64
  %cond1958 = select i1 %tobool1957, i32 1, i32 0
  %tobool1959 = icmp ne i32 %cond1958, 0
  %1541 = zext i1 %tobool1959 to i64
  %cond1960 = select i1 %tobool1959, i32 1, i32 0
  %1542 = load i64, i64* %len1938, align 8
  %1543 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1961 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1543, i32 0, i32 2
  %1544 = load i8*, i8** %precomp1961, align 8
  %1545 = load i8*, i8** %ellipses1937, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.259, i64 0, i64 0), i64 %conv1955, i32 %cond1960, i64 %1542, i8* %1544, i8* %1545)
  br label %do.end1962

do.end1962:                                       ; preds = %if.end1954
  br label %if.end1966

if.else1963:                                      ; preds = %insert_if
  %1546 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1547 = load %struct.regnode*, %struct.regnode** %br, align 8
  %1548 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1964 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %1548, i8 zeroext 61, i32 0)
  %1549 = load i32, i32* %depth.addr, align 4
  %add1965 = add i32 %1549, 1
  call void @S_regtail(%struct.RExC_state_t* %1546, %struct.regnode* %1547, %struct.regnode* %call1964, i32 %add1965)
  br label %if.end1966

if.end1966:                                       ; preds = %if.else1963, %do.end1962
  %1550 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1967 = call i8* @S_nextchar(%struct.RExC_state_t* %1550)
  %1551 = load i8, i8* %call1967, align 1
  store i8 %1551, i8* %c, align 1
  %1552 = load i32, i32* %flags, align 4
  %and1968 = and i32 %1552, 1
  %tobool1969 = icmp ne i32 %and1968, 0
  br i1 %tobool1969, label %if.then1970, label %if.end1972

if.then1970:                                      ; preds = %if.end1966
  %1553 = load i32*, i32** %flagp.addr, align 8
  %1554 = load i32, i32* %1553, align 4
  %or1971 = or i32 %1554, 1
  store i32 %or1971, i32* %1553, align 4
  br label %if.end1972

if.end1972:                                       ; preds = %if.then1970, %if.end1966
  %1555 = load i8, i8* %c, align 1
  %conv1973 = sext i8 %1555 to i32
  %cmp1974 = icmp eq i32 %conv1973, 124
  br i1 %cmp1974, label %if.then1976, label %if.else2069

if.then1976:                                      ; preds = %if.end1972
  %1556 = load i32, i32* %is_define, align 4
  %tobool1977 = icmp ne i32 %1556, 0
  br i1 %tobool1977, label %if.then1978, label %if.end2024

if.then1978:                                      ; preds = %if.then1976
  br label %do.body1979

do.body1979:                                      ; preds = %if.then1978
  %1557 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1980 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1557, i32 0, i32 12
  %1558 = load %struct.regnode*, %struct.regnode** %emit1980, align 8
  %1559 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1981 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1559, i32 0, i32 13
  %1560 = bitcast %struct.regnode_ssc* %emit_dummy1981 to %struct.regnode*
  %cmp1982 = icmp eq %struct.regnode* %1558, %1560
  br i1 %cmp1982, label %if.end1986, label %if.then1984

if.then1984:                                      ; preds = %do.body1979
  %1561 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1985 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1561, i32 0, i32 3
  %1562 = load %struct.p5rx*, %struct.p5rx** %rx_sv1985, align 8
  %1563 = bitcast %struct.p5rx* %1562 to i8*
  %1564 = bitcast i8* %1563 to %struct.sv*
  %1565 = bitcast %struct.sv* %1564 to i8*
  call void @Perl_save_pushptr(i8* %1565, i32 11)
  br label %if.end1986

if.end1986:                                       ; preds = %if.then1984, %do.body1979
  br label %do.body1987

do.body1987:                                      ; preds = %if.end1986
  %1566 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1989 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1566, i32 0, i32 8
  %1567 = load i8*, i8** %parse1989, align 8
  %1568 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1990 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1568, i32 0, i32 7
  %1569 = load i8*, i8** %end1990, align 8
  %cmp1991 = icmp ugt i8* %1567, %1569
  br i1 %cmp1991, label %cond.true1993, label %cond.false1995

cond.true1993:                                    ; preds = %do.body1987
  %1570 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1994 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1570, i32 0, i32 7
  %1571 = load i8*, i8** %end1994, align 8
  br label %cond.end1997

cond.false1995:                                   ; preds = %do.body1987
  %1572 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1996 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1572, i32 0, i32 8
  %1573 = load i8*, i8** %parse1996, align 8
  br label %cond.end1997

cond.end1997:                                     ; preds = %cond.false1995, %cond.true1993
  %cond1998 = phi i8* [ %1571, %cond.true1993 ], [ %1573, %cond.false1995 ]
  %1574 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1999 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1574, i32 0, i32 2
  %1575 = load i8*, i8** %precomp1999, align 8
  %sub.ptr.lhs.cast2000 = ptrtoint i8* %cond1998 to i64
  %sub.ptr.rhs.cast2001 = ptrtoint i8* %1575 to i64
  %sub.ptr.sub2002 = sub i64 %sub.ptr.lhs.cast2000, %sub.ptr.rhs.cast2001
  store i64 %sub.ptr.sub2002, i64* %offset1988, align 8
  %1576 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82003 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1576, i32 0, i32 25
  %1577 = load i32, i32* %utf82003, align 8
  %tobool2004 = icmp ne i32 %1577, 0
  %1578 = zext i1 %tobool2004 to i64
  %cond2005 = select i1 %tobool2004, i32 1, i32 0
  %tobool2006 = icmp ne i32 %cond2005, 0
  %1579 = zext i1 %tobool2006 to i64
  %cond2007 = select i1 %tobool2006, i32 1, i32 0
  %1580 = load i64, i64* %offset1988, align 8
  %1581 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2008 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1581, i32 0, i32 2
  %1582 = load i8*, i8** %precomp2008, align 8
  %1583 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82009 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1583, i32 0, i32 25
  %1584 = load i32, i32* %utf82009, align 8
  %tobool2010 = icmp ne i32 %1584, 0
  %1585 = zext i1 %tobool2010 to i64
  %cond2011 = select i1 %tobool2010, i32 1, i32 0
  %tobool2012 = icmp ne i32 %cond2011, 0
  %1586 = zext i1 %tobool2012 to i64
  %cond2013 = select i1 %tobool2012, i32 1, i32 0
  %1587 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2014 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1587, i32 0, i32 7
  %1588 = load i8*, i8** %end2014, align 8
  %1589 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2015 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1589, i32 0, i32 2
  %1590 = load i8*, i8** %precomp2015, align 8
  %sub.ptr.lhs.cast2016 = ptrtoint i8* %1588 to i64
  %sub.ptr.rhs.cast2017 = ptrtoint i8* %1590 to i64
  %sub.ptr.sub2018 = sub i64 %sub.ptr.lhs.cast2016, %sub.ptr.rhs.cast2017
  %1591 = load i64, i64* %offset1988, align 8
  %sub2019 = sub nsw i64 %sub.ptr.sub2018, %1591
  %1592 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2020 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1592, i32 0, i32 2
  %1593 = load i8*, i8** %precomp2020, align 8
  %1594 = load i64, i64* %offset1988, align 8
  %add.ptr2021 = getelementptr inbounds i8, i8* %1593, i64 %1594
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.260, i64 0, i64 0), i32 %cond2007, i64 %1580, i8* %1582, i32 %cond2013, i64 %sub2019, i8* %add.ptr2021)
  br label %do.end2022

do.end2022:                                       ; preds = %cond.end1997
  br label %do.end2023

do.end2023:                                       ; preds = %do.end2022
  br label %if.end2024

if.end2024:                                       ; preds = %do.end2023, %if.then1976
  %1595 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call2025 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %1595, i8 zeroext 66, i32 0)
  store %struct.regnode* %call2025, %struct.regnode** %lastbr, align 8
  %1596 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1597 = load i32, i32* %depth.addr, align 4
  %add2026 = add i32 %1597, 1
  %call2027 = call %struct.regnode* @S_regbranch(%struct.RExC_state_t* %1596, i32* %flags, i32 1, i32 %add2026)
  %tobool2028 = icmp ne %struct.regnode* %call2027, null
  br i1 %tobool2028, label %if.end2061, label %if.then2029

if.then2029:                                      ; preds = %if.end2024
  %1598 = load i32, i32* %flags, align 4
  %and2030 = and i32 %1598, 32
  %tobool2031 = icmp ne i32 %and2030, 0
  br i1 %tobool2031, label %if.then2032, label %if.end2033

if.then2032:                                      ; preds = %if.then2029
  %1599 = load i32*, i32** %flagp.addr, align 8
  store i32 32, i32* %1599, align 4
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end2033:                                       ; preds = %if.then2029
  br label %do.body2034

do.body2034:                                      ; preds = %if.end2033
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses2035, align 8
  %1600 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2037 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1600, i32 0, i32 7
  %1601 = load i8*, i8** %end2037, align 8
  %1602 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2038 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1602, i32 0, i32 2
  %1603 = load i8*, i8** %precomp2038, align 8
  %sub.ptr.lhs.cast2039 = ptrtoint i8* %1601 to i64
  %sub.ptr.rhs.cast2040 = ptrtoint i8* %1603 to i64
  %sub.ptr.sub2041 = sub i64 %sub.ptr.lhs.cast2039, %sub.ptr.rhs.cast2040
  store i64 %sub.ptr.sub2041, i64* %len2036, align 8
  %1604 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2042 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1604, i32 0, i32 12
  %1605 = load %struct.regnode*, %struct.regnode** %emit2042, align 8
  %1606 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2043 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1606, i32 0, i32 13
  %1607 = bitcast %struct.regnode_ssc* %emit_dummy2043 to %struct.regnode*
  %cmp2044 = icmp eq %struct.regnode* %1605, %1607
  br i1 %cmp2044, label %if.end2048, label %if.then2046

if.then2046:                                      ; preds = %do.body2034
  %1608 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv2047 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1608, i32 0, i32 3
  %1609 = load %struct.p5rx*, %struct.p5rx** %rx_sv2047, align 8
  %1610 = bitcast %struct.p5rx* %1609 to i8*
  %1611 = bitcast i8* %1610 to %struct.sv*
  %1612 = bitcast %struct.sv* %1611 to i8*
  call void @Perl_save_pushptr(i8* %1612, i32 11)
  br label %if.end2048

if.end2048:                                       ; preds = %if.then2046, %do.body2034
  %1613 = load i64, i64* %len2036, align 8
  %cmp2049 = icmp sgt i64 %1613, 127
  br i1 %cmp2049, label %if.then2051, label %if.end2052

if.then2051:                                      ; preds = %if.end2048
  store i64 117, i64* %len2036, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses2035, align 8
  br label %if.end2052

if.end2052:                                       ; preds = %if.then2051, %if.end2048
  %1614 = load i32, i32* %flags, align 4
  %conv2053 = sext i32 %1614 to i64
  %1615 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82054 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1615, i32 0, i32 25
  %1616 = load i32, i32* %utf82054, align 8
  %tobool2055 = icmp ne i32 %1616, 0
  %1617 = zext i1 %tobool2055 to i64
  %cond2056 = select i1 %tobool2055, i32 1, i32 0
  %tobool2057 = icmp ne i32 %cond2056, 0
  %1618 = zext i1 %tobool2057 to i64
  %cond2058 = select i1 %tobool2057, i32 1, i32 0
  %1619 = load i64, i64* %len2036, align 8
  %1620 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2059 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1620, i32 0, i32 2
  %1621 = load i8*, i8** %precomp2059, align 8
  %1622 = load i8*, i8** %ellipses2035, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.259, i64 0, i64 0), i64 %conv2053, i32 %cond2058, i64 %1619, i8* %1621, i8* %1622)
  br label %do.end2060

do.end2060:                                       ; preds = %if.end2052
  br label %if.end2061

if.end2061:                                       ; preds = %do.end2060, %if.end2024
  %1623 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1624 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1625 = load %struct.regnode*, %struct.regnode** %lastbr, align 8
  %1626 = load i32, i32* %depth.addr, align 4
  %add2062 = add i32 %1626, 1
  call void @S_regtail(%struct.RExC_state_t* %1623, %struct.regnode* %1624, %struct.regnode* %1625, i32 %add2062)
  %1627 = load i32, i32* %flags, align 4
  %and2063 = and i32 %1627, 1
  %tobool2064 = icmp ne i32 %and2063, 0
  br i1 %tobool2064, label %if.then2065, label %if.end2067

if.then2065:                                      ; preds = %if.end2061
  %1628 = load i32*, i32** %flagp.addr, align 8
  %1629 = load i32, i32* %1628, align 4
  %or2066 = or i32 %1629, 1
  store i32 %or2066, i32* %1628, align 4
  br label %if.end2067

if.end2067:                                       ; preds = %if.then2065, %if.end2061
  %1630 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call2068 = call i8* @S_nextchar(%struct.RExC_state_t* %1630)
  %1631 = load i8, i8* %call2068, align 1
  store i8 %1631, i8* %c, align 1
  br label %if.end2070

if.else2069:                                      ; preds = %if.end1972
  store %struct.regnode* null, %struct.regnode** %lastbr, align 8
  br label %if.end2070

if.end2070:                                       ; preds = %if.else2069, %if.end2067
  %1632 = load i8, i8* %c, align 1
  %conv2071 = sext i8 %1632 to i32
  %cmp2072 = icmp ne i32 %conv2071, 41
  br i1 %cmp2072, label %if.then2074, label %if.end2172

if.then2074:                                      ; preds = %if.end2070
  %1633 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2075 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1633, i32 0, i32 8
  %1634 = load i8*, i8** %parse2075, align 8
  %1635 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2076 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1635, i32 0, i32 7
  %1636 = load i8*, i8** %end2076, align 8
  %cmp2077 = icmp ugt i8* %1634, %1636
  br i1 %cmp2077, label %if.then2079, label %if.else2125

if.then2079:                                      ; preds = %if.then2074
  br label %do.body2080

do.body2080:                                      ; preds = %if.then2079
  %1637 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2081 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1637, i32 0, i32 12
  %1638 = load %struct.regnode*, %struct.regnode** %emit2081, align 8
  %1639 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2082 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1639, i32 0, i32 13
  %1640 = bitcast %struct.regnode_ssc* %emit_dummy2082 to %struct.regnode*
  %cmp2083 = icmp eq %struct.regnode* %1638, %1640
  br i1 %cmp2083, label %if.end2087, label %if.then2085

if.then2085:                                      ; preds = %do.body2080
  %1641 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv2086 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1641, i32 0, i32 3
  %1642 = load %struct.p5rx*, %struct.p5rx** %rx_sv2086, align 8
  %1643 = bitcast %struct.p5rx* %1642 to i8*
  %1644 = bitcast i8* %1643 to %struct.sv*
  %1645 = bitcast %struct.sv* %1644 to i8*
  call void @Perl_save_pushptr(i8* %1645, i32 11)
  br label %if.end2087

if.end2087:                                       ; preds = %if.then2085, %do.body2080
  br label %do.body2088

do.body2088:                                      ; preds = %if.end2087
  %1646 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2090 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1646, i32 0, i32 8
  %1647 = load i8*, i8** %parse2090, align 8
  %1648 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2091 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1648, i32 0, i32 7
  %1649 = load i8*, i8** %end2091, align 8
  %cmp2092 = icmp ugt i8* %1647, %1649
  br i1 %cmp2092, label %cond.true2094, label %cond.false2096

cond.true2094:                                    ; preds = %do.body2088
  %1650 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2095 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1650, i32 0, i32 7
  %1651 = load i8*, i8** %end2095, align 8
  br label %cond.end2098

cond.false2096:                                   ; preds = %do.body2088
  %1652 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2097 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1652, i32 0, i32 8
  %1653 = load i8*, i8** %parse2097, align 8
  br label %cond.end2098

cond.end2098:                                     ; preds = %cond.false2096, %cond.true2094
  %cond2099 = phi i8* [ %1651, %cond.true2094 ], [ %1653, %cond.false2096 ]
  %1654 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2100 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1654, i32 0, i32 2
  %1655 = load i8*, i8** %precomp2100, align 8
  %sub.ptr.lhs.cast2101 = ptrtoint i8* %cond2099 to i64
  %sub.ptr.rhs.cast2102 = ptrtoint i8* %1655 to i64
  %sub.ptr.sub2103 = sub i64 %sub.ptr.lhs.cast2101, %sub.ptr.rhs.cast2102
  store i64 %sub.ptr.sub2103, i64* %offset2089, align 8
  %1656 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82104 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1656, i32 0, i32 25
  %1657 = load i32, i32* %utf82104, align 8
  %tobool2105 = icmp ne i32 %1657, 0
  %1658 = zext i1 %tobool2105 to i64
  %cond2106 = select i1 %tobool2105, i32 1, i32 0
  %tobool2107 = icmp ne i32 %cond2106, 0
  %1659 = zext i1 %tobool2107 to i64
  %cond2108 = select i1 %tobool2107, i32 1, i32 0
  %1660 = load i64, i64* %offset2089, align 8
  %1661 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2109 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1661, i32 0, i32 2
  %1662 = load i8*, i8** %precomp2109, align 8
  %1663 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82110 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1663, i32 0, i32 25
  %1664 = load i32, i32* %utf82110, align 8
  %tobool2111 = icmp ne i32 %1664, 0
  %1665 = zext i1 %tobool2111 to i64
  %cond2112 = select i1 %tobool2111, i32 1, i32 0
  %tobool2113 = icmp ne i32 %cond2112, 0
  %1666 = zext i1 %tobool2113 to i64
  %cond2114 = select i1 %tobool2113, i32 1, i32 0
  %1667 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2115 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1667, i32 0, i32 7
  %1668 = load i8*, i8** %end2115, align 8
  %1669 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2116 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1669, i32 0, i32 2
  %1670 = load i8*, i8** %precomp2116, align 8
  %sub.ptr.lhs.cast2117 = ptrtoint i8* %1668 to i64
  %sub.ptr.rhs.cast2118 = ptrtoint i8* %1670 to i64
  %sub.ptr.sub2119 = sub i64 %sub.ptr.lhs.cast2117, %sub.ptr.rhs.cast2118
  %1671 = load i64, i64* %offset2089, align 8
  %sub2120 = sub nsw i64 %sub.ptr.sub2119, %1671
  %1672 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2121 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1672, i32 0, i32 2
  %1673 = load i8*, i8** %precomp2121, align 8
  %1674 = load i64, i64* %offset2089, align 8
  %add.ptr2122 = getelementptr inbounds i8, i8* %1673, i64 %1674
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.261, i64 0, i64 0), i32 %cond2108, i64 %1660, i8* %1662, i32 %cond2114, i64 %sub2120, i8* %add.ptr2122)
  br label %do.end2123

do.end2123:                                       ; preds = %cond.end2098
  br label %do.end2124

do.end2124:                                       ; preds = %do.end2123
  br label %if.end2171

if.else2125:                                      ; preds = %if.then2074
  br label %do.body2126

do.body2126:                                      ; preds = %if.else2125
  %1675 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2127 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1675, i32 0, i32 12
  %1676 = load %struct.regnode*, %struct.regnode** %emit2127, align 8
  %1677 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2128 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1677, i32 0, i32 13
  %1678 = bitcast %struct.regnode_ssc* %emit_dummy2128 to %struct.regnode*
  %cmp2129 = icmp eq %struct.regnode* %1676, %1678
  br i1 %cmp2129, label %if.end2133, label %if.then2131

if.then2131:                                      ; preds = %do.body2126
  %1679 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv2132 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1679, i32 0, i32 3
  %1680 = load %struct.p5rx*, %struct.p5rx** %rx_sv2132, align 8
  %1681 = bitcast %struct.p5rx* %1680 to i8*
  %1682 = bitcast i8* %1681 to %struct.sv*
  %1683 = bitcast %struct.sv* %1682 to i8*
  call void @Perl_save_pushptr(i8* %1683, i32 11)
  br label %if.end2133

if.end2133:                                       ; preds = %if.then2131, %do.body2126
  br label %do.body2134

do.body2134:                                      ; preds = %if.end2133
  %1684 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2136 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1684, i32 0, i32 8
  %1685 = load i8*, i8** %parse2136, align 8
  %1686 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2137 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1686, i32 0, i32 7
  %1687 = load i8*, i8** %end2137, align 8
  %cmp2138 = icmp ugt i8* %1685, %1687
  br i1 %cmp2138, label %cond.true2140, label %cond.false2142

cond.true2140:                                    ; preds = %do.body2134
  %1688 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2141 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1688, i32 0, i32 7
  %1689 = load i8*, i8** %end2141, align 8
  br label %cond.end2144

cond.false2142:                                   ; preds = %do.body2134
  %1690 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2143 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1690, i32 0, i32 8
  %1691 = load i8*, i8** %parse2143, align 8
  br label %cond.end2144

cond.end2144:                                     ; preds = %cond.false2142, %cond.true2140
  %cond2145 = phi i8* [ %1689, %cond.true2140 ], [ %1691, %cond.false2142 ]
  %1692 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2146 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1692, i32 0, i32 2
  %1693 = load i8*, i8** %precomp2146, align 8
  %sub.ptr.lhs.cast2147 = ptrtoint i8* %cond2145 to i64
  %sub.ptr.rhs.cast2148 = ptrtoint i8* %1693 to i64
  %sub.ptr.sub2149 = sub i64 %sub.ptr.lhs.cast2147, %sub.ptr.rhs.cast2148
  store i64 %sub.ptr.sub2149, i64* %offset2135, align 8
  %1694 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82150 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1694, i32 0, i32 25
  %1695 = load i32, i32* %utf82150, align 8
  %tobool2151 = icmp ne i32 %1695, 0
  %1696 = zext i1 %tobool2151 to i64
  %cond2152 = select i1 %tobool2151, i32 1, i32 0
  %tobool2153 = icmp ne i32 %cond2152, 0
  %1697 = zext i1 %tobool2153 to i64
  %cond2154 = select i1 %tobool2153, i32 1, i32 0
  %1698 = load i64, i64* %offset2135, align 8
  %1699 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2155 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1699, i32 0, i32 2
  %1700 = load i8*, i8** %precomp2155, align 8
  %1701 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82156 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1701, i32 0, i32 25
  %1702 = load i32, i32* %utf82156, align 8
  %tobool2157 = icmp ne i32 %1702, 0
  %1703 = zext i1 %tobool2157 to i64
  %cond2158 = select i1 %tobool2157, i32 1, i32 0
  %tobool2159 = icmp ne i32 %cond2158, 0
  %1704 = zext i1 %tobool2159 to i64
  %cond2160 = select i1 %tobool2159, i32 1, i32 0
  %1705 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2161 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1705, i32 0, i32 7
  %1706 = load i8*, i8** %end2161, align 8
  %1707 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2162 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1707, i32 0, i32 2
  %1708 = load i8*, i8** %precomp2162, align 8
  %sub.ptr.lhs.cast2163 = ptrtoint i8* %1706 to i64
  %sub.ptr.rhs.cast2164 = ptrtoint i8* %1708 to i64
  %sub.ptr.sub2165 = sub i64 %sub.ptr.lhs.cast2163, %sub.ptr.rhs.cast2164
  %1709 = load i64, i64* %offset2135, align 8
  %sub2166 = sub nsw i64 %sub.ptr.sub2165, %1709
  %1710 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2167 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1710, i32 0, i32 2
  %1711 = load i8*, i8** %precomp2167, align 8
  %1712 = load i64, i64* %offset2135, align 8
  %add.ptr2168 = getelementptr inbounds i8, i8* %1711, i64 %1712
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.262, i64 0, i64 0), i32 %cond2154, i64 %1698, i8* %1700, i32 %cond2160, i64 %sub2166, i8* %add.ptr2168)
  br label %do.end2169

do.end2169:                                       ; preds = %cond.end2144
  br label %do.end2170

do.end2170:                                       ; preds = %do.end2169
  br label %if.end2171

if.end2171:                                       ; preds = %do.end2170, %do.end2124
  br label %if.end2172

if.end2172:                                       ; preds = %if.end2171, %if.end2070
  %1713 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call2173 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %1713, i8 zeroext 41)
  store %struct.regnode* %call2173, %struct.regnode** %ender, align 8
  %1714 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1715 = load %struct.regnode*, %struct.regnode** %br, align 8
  %1716 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %1717 = load i32, i32* %depth.addr, align 4
  %add2174 = add i32 %1717, 1
  call void @S_regtail(%struct.RExC_state_t* %1714, %struct.regnode* %1715, %struct.regnode* %1716, i32 %add2174)
  %1718 = load %struct.regnode*, %struct.regnode** %lastbr, align 8
  %tobool2175 = icmp ne %struct.regnode* %1718, null
  br i1 %tobool2175, label %if.then2176, label %if.else2181

if.then2176:                                      ; preds = %if.end2172
  %1719 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1720 = load %struct.regnode*, %struct.regnode** %lastbr, align 8
  %1721 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %1722 = load i32, i32* %depth.addr, align 4
  %add2177 = add i32 %1722, 1
  call void @S_regtail(%struct.RExC_state_t* %1719, %struct.regnode* %1720, %struct.regnode* %1721, i32 %add2177)
  %1723 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1724 = load %struct.regnode*, %struct.regnode** %lastbr, align 8
  %add.ptr2178 = getelementptr inbounds %struct.regnode, %struct.regnode* %1724, i64 1
  %add.ptr2179 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr2178, i64 1
  %1725 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %1726 = load i32, i32* %depth.addr, align 4
  %add2180 = add i32 %1726, 1
  call void @S_regtail(%struct.RExC_state_t* %1723, %struct.regnode* %add.ptr2179, %struct.regnode* %1725, i32 %add2180)
  br label %if.end2183

if.else2181:                                      ; preds = %if.end2172
  %1727 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1728 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1729 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %1730 = load i32, i32* %depth.addr, align 4
  %add2182 = add i32 %1730, 1
  call void @S_regtail(%struct.RExC_state_t* %1727, %struct.regnode* %1728, %struct.regnode* %1729, i32 %add2182)
  br label %if.end2183

if.end2183:                                       ; preds = %if.else2181, %if.then2176
  %1731 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1731, i32 0, i32 17
  %1732 = load i64, i64* %size, align 8
  %inc2184 = add nsw i64 %1732, 1
  store i64 %inc2184, i64* %size, align 8
  %1733 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %1733, %struct.regnode** %retval, align 8
  br label %return

if.end2185:                                       ; preds = %land.lhs.true1839, %if.else1833
  br label %if.end2186

if.end2186:                                       ; preds = %if.end2185
  br label %if.end2187

if.end2187:                                       ; preds = %if.end2186
  br label %if.end2188

if.end2188:                                       ; preds = %if.end2187
  br label %if.end2189

if.end2189:                                       ; preds = %if.end2188, %if.end1647
  %1734 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82190 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1734, i32 0, i32 25
  %1735 = load i32, i32* %utf82190, align 8
  %tobool2191 = icmp ne i32 %1735, 0
  br i1 %tobool2191, label %cond.true2192, label %cond.false2193

cond.true2192:                                    ; preds = %if.end2189
  br i1 true, label %cond.true2194, label %cond.false2199

cond.false2193:                                   ; preds = %if.end2189
  br i1 false, label %cond.true2194, label %cond.false2199

cond.true2194:                                    ; preds = %cond.false2193, %cond.true2192
  %1736 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2195 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1736, i32 0, i32 8
  %1737 = load i8*, i8** %parse2195, align 8
  %1738 = load i8, i8* %1737, align 1
  %idxprom2196 = zext i8 %1738 to i64
  %arrayidx2197 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom2196
  %1739 = load i8, i8* %arrayidx2197, align 1
  %conv2198 = zext i8 %1739 to i32
  br label %cond.end2200

cond.false2199:                                   ; preds = %cond.false2193, %cond.true2192
  br label %cond.end2200

cond.end2200:                                     ; preds = %cond.false2199, %cond.true2194
  %cond2201 = phi i32 [ %conv2198, %cond.true2194 ], [ 1, %cond.false2199 ]
  %1740 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2202 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1740, i32 0, i32 8
  %1741 = load i8*, i8** %parse2202, align 8
  %idx.ext2203 = sext i32 %cond2201 to i64
  %add.ptr2204 = getelementptr inbounds i8, i8* %1741, i64 %idx.ext2203
  store i8* %add.ptr2204, i8** %parse2202, align 8
  br label %do.body2205

do.body2205:                                      ; preds = %cond.end2200
  %1742 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2206 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1742, i32 0, i32 12
  %1743 = load %struct.regnode*, %struct.regnode** %emit2206, align 8
  %1744 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2207 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1744, i32 0, i32 13
  %1745 = bitcast %struct.regnode_ssc* %emit_dummy2207 to %struct.regnode*
  %cmp2208 = icmp eq %struct.regnode* %1743, %1745
  br i1 %cmp2208, label %if.end2212, label %if.then2210

if.then2210:                                      ; preds = %do.body2205
  %1746 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv2211 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1746, i32 0, i32 3
  %1747 = load %struct.p5rx*, %struct.p5rx** %rx_sv2211, align 8
  %1748 = bitcast %struct.p5rx* %1747 to i8*
  %1749 = bitcast i8* %1748 to %struct.sv*
  %1750 = bitcast %struct.sv* %1749 to i8*
  call void @Perl_save_pushptr(i8* %1750, i32 11)
  br label %if.end2212

if.end2212:                                       ; preds = %if.then2210, %do.body2205
  br label %do.body2213

do.body2213:                                      ; preds = %if.end2212
  %1751 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2215 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1751, i32 0, i32 8
  %1752 = load i8*, i8** %parse2215, align 8
  %1753 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2216 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1753, i32 0, i32 7
  %1754 = load i8*, i8** %end2216, align 8
  %cmp2217 = icmp ugt i8* %1752, %1754
  br i1 %cmp2217, label %cond.true2219, label %cond.false2221

cond.true2219:                                    ; preds = %do.body2213
  %1755 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2220 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1755, i32 0, i32 7
  %1756 = load i8*, i8** %end2220, align 8
  br label %cond.end2223

cond.false2221:                                   ; preds = %do.body2213
  %1757 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2222 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1757, i32 0, i32 8
  %1758 = load i8*, i8** %parse2222, align 8
  br label %cond.end2223

cond.end2223:                                     ; preds = %cond.false2221, %cond.true2219
  %cond2224 = phi i8* [ %1756, %cond.true2219 ], [ %1758, %cond.false2221 ]
  %1759 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2225 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1759, i32 0, i32 2
  %1760 = load i8*, i8** %precomp2225, align 8
  %sub.ptr.lhs.cast2226 = ptrtoint i8* %cond2224 to i64
  %sub.ptr.rhs.cast2227 = ptrtoint i8* %1760 to i64
  %sub.ptr.sub2228 = sub i64 %sub.ptr.lhs.cast2226, %sub.ptr.rhs.cast2227
  store i64 %sub.ptr.sub2228, i64* %offset2214, align 8
  %1761 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82229 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1761, i32 0, i32 25
  %1762 = load i32, i32* %utf82229, align 8
  %tobool2230 = icmp ne i32 %1762, 0
  %1763 = zext i1 %tobool2230 to i64
  %cond2231 = select i1 %tobool2230, i32 1, i32 0
  %tobool2232 = icmp ne i32 %cond2231, 0
  %1764 = zext i1 %tobool2232 to i64
  %cond2233 = select i1 %tobool2232, i32 1, i32 0
  %1765 = load i64, i64* %offset2214, align 8
  %1766 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2234 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1766, i32 0, i32 2
  %1767 = load i8*, i8** %precomp2234, align 8
  %1768 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82235 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1768, i32 0, i32 25
  %1769 = load i32, i32* %utf82235, align 8
  %tobool2236 = icmp ne i32 %1769, 0
  %1770 = zext i1 %tobool2236 to i64
  %cond2237 = select i1 %tobool2236, i32 1, i32 0
  %tobool2238 = icmp ne i32 %cond2237, 0
  %1771 = zext i1 %tobool2238 to i64
  %cond2239 = select i1 %tobool2238, i32 1, i32 0
  %1772 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2240 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1772, i32 0, i32 7
  %1773 = load i8*, i8** %end2240, align 8
  %1774 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2241 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1774, i32 0, i32 2
  %1775 = load i8*, i8** %precomp2241, align 8
  %sub.ptr.lhs.cast2242 = ptrtoint i8* %1773 to i64
  %sub.ptr.rhs.cast2243 = ptrtoint i8* %1775 to i64
  %sub.ptr.sub2244 = sub i64 %sub.ptr.lhs.cast2242, %sub.ptr.rhs.cast2243
  %1776 = load i64, i64* %offset2214, align 8
  %sub2245 = sub nsw i64 %sub.ptr.sub2244, %1776
  %1777 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2246 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1777, i32 0, i32 2
  %1778 = load i8*, i8** %precomp2246, align 8
  %1779 = load i64, i64* %offset2214, align 8
  %add.ptr2247 = getelementptr inbounds i8, i8* %1778, i64 %1779
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.263, i64 0, i64 0), i32 %cond2233, i64 %1765, i8* %1767, i32 %cond2239, i64 %sub2245, i8* %add.ptr2247)
  br label %do.end2248

do.end2248:                                       ; preds = %cond.end2223
  br label %do.end2249

do.end2249:                                       ; preds = %do.end2248
  br label %sw.bb2250

sw.bb2250:                                        ; preds = %if.end539, %do.end2249
  %1780 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1781 = load i32*, i32** %flagp.addr, align 8
  %1782 = load i32, i32* %depth.addr, align 4
  %1783 = load i8*, i8** %oregcomp_parse, align 8
  %call2251 = call %struct.regnode* @S_handle_regex_sets(%struct.RExC_state_t* %1780, %struct.sv** null, i32* %1781, i32 %1782, i8* %1783)
  store %struct.regnode* %call2251, %struct.regnode** %retval, align 8
  br label %return

sw.bb2252:                                        ; preds = %if.end539
  %1784 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2253 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1784, i32 0, i32 8
  %1785 = load i8*, i8** %parse2253, align 8
  %incdec.ptr2254 = getelementptr inbounds i8, i8* %1785, i32 -1
  store i8* %incdec.ptr2254, i8** %parse2253, align 8
  br label %do.body2255

do.body2255:                                      ; preds = %sw.bb2252
  %1786 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2256 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1786, i32 0, i32 12
  %1787 = load %struct.regnode*, %struct.regnode** %emit2256, align 8
  %1788 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2257 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1788, i32 0, i32 13
  %1789 = bitcast %struct.regnode_ssc* %emit_dummy2257 to %struct.regnode*
  %cmp2258 = icmp eq %struct.regnode* %1787, %1789
  br i1 %cmp2258, label %if.end2262, label %if.then2260

if.then2260:                                      ; preds = %do.body2255
  %1790 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv2261 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1790, i32 0, i32 3
  %1791 = load %struct.p5rx*, %struct.p5rx** %rx_sv2261, align 8
  %1792 = bitcast %struct.p5rx* %1791 to i8*
  %1793 = bitcast i8* %1792 to %struct.sv*
  %1794 = bitcast %struct.sv* %1793 to i8*
  call void @Perl_save_pushptr(i8* %1794, i32 11)
  br label %if.end2262

if.end2262:                                       ; preds = %if.then2260, %do.body2255
  br label %do.body2263

do.body2263:                                      ; preds = %if.end2262
  %1795 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2265 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1795, i32 0, i32 8
  %1796 = load i8*, i8** %parse2265, align 8
  %1797 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2266 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1797, i32 0, i32 7
  %1798 = load i8*, i8** %end2266, align 8
  %cmp2267 = icmp ugt i8* %1796, %1798
  br i1 %cmp2267, label %cond.true2269, label %cond.false2271

cond.true2269:                                    ; preds = %do.body2263
  %1799 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2270 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1799, i32 0, i32 7
  %1800 = load i8*, i8** %end2270, align 8
  br label %cond.end2273

cond.false2271:                                   ; preds = %do.body2263
  %1801 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2272 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1801, i32 0, i32 8
  %1802 = load i8*, i8** %parse2272, align 8
  br label %cond.end2273

cond.end2273:                                     ; preds = %cond.false2271, %cond.true2269
  %cond2274 = phi i8* [ %1800, %cond.true2269 ], [ %1802, %cond.false2271 ]
  %1803 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2275 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1803, i32 0, i32 2
  %1804 = load i8*, i8** %precomp2275, align 8
  %sub.ptr.lhs.cast2276 = ptrtoint i8* %cond2274 to i64
  %sub.ptr.rhs.cast2277 = ptrtoint i8* %1804 to i64
  %sub.ptr.sub2278 = sub i64 %sub.ptr.lhs.cast2276, %sub.ptr.rhs.cast2277
  store i64 %sub.ptr.sub2278, i64* %offset2264, align 8
  %1805 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82279 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1805, i32 0, i32 25
  %1806 = load i32, i32* %utf82279, align 8
  %tobool2280 = icmp ne i32 %1806, 0
  %1807 = zext i1 %tobool2280 to i64
  %cond2281 = select i1 %tobool2280, i32 1, i32 0
  %tobool2282 = icmp ne i32 %cond2281, 0
  %1808 = zext i1 %tobool2282 to i64
  %cond2283 = select i1 %tobool2282, i32 1, i32 0
  %1809 = load i64, i64* %offset2264, align 8
  %1810 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2284 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1810, i32 0, i32 2
  %1811 = load i8*, i8** %precomp2284, align 8
  %1812 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82285 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1812, i32 0, i32 25
  %1813 = load i32, i32* %utf82285, align 8
  %tobool2286 = icmp ne i32 %1813, 0
  %1814 = zext i1 %tobool2286 to i64
  %cond2287 = select i1 %tobool2286, i32 1, i32 0
  %tobool2288 = icmp ne i32 %cond2287, 0
  %1815 = zext i1 %tobool2288 to i64
  %cond2289 = select i1 %tobool2288, i32 1, i32 0
  %1816 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2290 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1816, i32 0, i32 7
  %1817 = load i8*, i8** %end2290, align 8
  %1818 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2291 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1818, i32 0, i32 2
  %1819 = load i8*, i8** %precomp2291, align 8
  %sub.ptr.lhs.cast2292 = ptrtoint i8* %1817 to i64
  %sub.ptr.rhs.cast2293 = ptrtoint i8* %1819 to i64
  %sub.ptr.sub2294 = sub i64 %sub.ptr.lhs.cast2292, %sub.ptr.rhs.cast2293
  %1820 = load i64, i64* %offset2264, align 8
  %sub2295 = sub nsw i64 %sub.ptr.sub2294, %1820
  %1821 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2296 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1821, i32 0, i32 2
  %1822 = load i8*, i8** %precomp2296, align 8
  %1823 = load i64, i64* %offset2264, align 8
  %add.ptr2297 = getelementptr inbounds i8, i8* %1822, i64 %1823
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.264, i64 0, i64 0), i32 %cond2283, i64 %1809, i8* %1811, i32 %cond2289, i64 %sub2295, i8* %add.ptr2297)
  br label %do.end2298

do.end2298:                                       ; preds = %cond.end2273
  br label %do.end2299

do.end2299:                                       ; preds = %do.end2298
  br label %sw.epilog2314

sw.default:                                       ; preds = %if.end539
  %1824 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2300 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1824, i32 0, i32 8
  %1825 = load i8*, i8** %parse2300, align 8
  %incdec.ptr2301 = getelementptr inbounds i8, i8* %1825, i32 -1
  store i8* %incdec.ptr2301, i8** %parse2300, align 8
  br label %parse_flags

parse_flags:                                      ; preds = %sw.default, %if.then1166
  %1826 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  call void @S_parse_lparen_question_flags(%struct.RExC_state_t* %1826)
  %1827 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2302 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1827, i32 0, i32 8
  %1828 = load i8*, i8** %parse2302, align 8
  %1829 = load i8, i8* %1828, align 1
  %conv2303 = zext i8 %1829 to i32
  %cmp2304 = icmp ne i32 %conv2303, 58
  br i1 %cmp2304, label %if.then2306, label %if.end2312

if.then2306:                                      ; preds = %parse_flags
  %1830 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2307 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1830, i32 0, i32 8
  %1831 = load i8*, i8** %parse2307, align 8
  %1832 = load i8, i8* %1831, align 1
  %tobool2308 = icmp ne i8 %1832, 0
  br i1 %tobool2308, label %if.then2309, label %if.end2311

if.then2309:                                      ; preds = %if.then2306
  %1833 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call2310 = call i8* @S_nextchar(%struct.RExC_state_t* %1833)
  br label %if.end2311

if.end2311:                                       ; preds = %if.then2309, %if.then2306
  %1834 = load i32*, i32** %flagp.addr, align 8
  store i32 16, i32* %1834, align 4
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end2312:                                       ; preds = %parse_flags
  store i32 58, i32* %paren.addr, align 4
  %1835 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call2313 = call i8* @S_nextchar(%struct.RExC_state_t* %1835)
  store %struct.regnode* null, %struct.regnode** %ret, align 8
  br label %parse_rest

sw.epilog2314:                                    ; preds = %do.end2299, %do.end983, %sw.bb942, %sw.bb940, %if.end939, %sw.bb924
  br label %if.end2351

if.else2315:                                      ; preds = %if.else483
  %1836 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2316 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1836, i32 0, i32 0
  %1837 = load i32, i32* %flags2316, align 8
  %and2317 = and i32 %1837, 32
  %tobool2318 = icmp ne i32 %and2317, 0
  br i1 %tobool2318, label %if.else2349, label %if.then2319

if.then2319:                                      ; preds = %if.else2315
  br label %capturing_parens

capturing_parens:                                 ; preds = %if.then2319, %if.end915
  %1838 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar2320 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1838, i32 0, i32 18
  %1839 = load i32, i32* %npar2320, align 8
  store i32 %1839, i32* %parno, align 4
  %1840 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar2321 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1840, i32 0, i32 18
  %1841 = load i32, i32* %npar2321, align 8
  %inc2322 = add nsw i32 %1841, 1
  store i32 %inc2322, i32* %npar2321, align 8
  %1842 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1843 = load i32, i32* %parno, align 4
  %call2323 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %1842, i8 zeroext 49, i32 %1843)
  store %struct.regnode* %call2323, %struct.regnode** %ret, align 8
  %1844 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2324 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1844, i32 0, i32 12
  %1845 = load %struct.regnode*, %struct.regnode** %emit2324, align 8
  %1846 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2325 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1846, i32 0, i32 13
  %1847 = bitcast %struct.regnode_ssc* %emit_dummy2325 to %struct.regnode*
  %cmp2326 = icmp eq %struct.regnode* %1845, %1847
  br i1 %cmp2326, label %if.end2348, label %if.then2328

if.then2328:                                      ; preds = %capturing_parens
  %1848 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %nestroot2329 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1848, i32 0, i32 19
  %1849 = load i32, i32* %nestroot2329, align 4
  %tobool2330 = icmp ne i32 %1849, 0
  br i1 %tobool2330, label %if.end2333, label %if.then2331

if.then2331:                                      ; preds = %if.then2328
  %1850 = load i32, i32* %parno, align 4
  %1851 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %nestroot2332 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1851, i32 0, i32 19
  store i32 %1850, i32* %nestroot2332, align 4
  br label %if.end2333

if.end2333:                                       ; preds = %if.then2331, %if.then2328
  %1852 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen2334 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1852, i32 0, i32 16
  %1853 = load i32, i32* %seen2334, align 8
  %and2335 = and i32 %1853, 32
  %tobool2336 = icmp ne i32 %and2335, 0
  br i1 %tobool2336, label %land.lhs.true2337, label %if.end2347

land.lhs.true2337:                                ; preds = %if.end2333
  %1854 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %open_parens = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1854, i32 0, i32 22
  %1855 = load %struct.regnode**, %struct.regnode*** %open_parens, align 8
  %1856 = load i32, i32* %parno, align 4
  %sub2338 = sub nsw i32 %1856, 1
  %idxprom2339 = sext i32 %sub2338 to i64
  %arrayidx2340 = getelementptr inbounds %struct.regnode*, %struct.regnode** %1855, i64 %idxprom2339
  %1857 = load %struct.regnode*, %struct.regnode** %arrayidx2340, align 8
  %tobool2341 = icmp ne %struct.regnode* %1857, null
  br i1 %tobool2341, label %if.end2347, label %if.then2342

if.then2342:                                      ; preds = %land.lhs.true2337
  %1858 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1859 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %open_parens2343 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1859, i32 0, i32 22
  %1860 = load %struct.regnode**, %struct.regnode*** %open_parens2343, align 8
  %1861 = load i32, i32* %parno, align 4
  %sub2344 = sub nsw i32 %1861, 1
  %idxprom2345 = sext i32 %sub2344 to i64
  %arrayidx2346 = getelementptr inbounds %struct.regnode*, %struct.regnode** %1860, i64 %idxprom2345
  store %struct.regnode* %1858, %struct.regnode** %arrayidx2346, align 8
  br label %if.end2347

if.end2347:                                       ; preds = %if.then2342, %land.lhs.true2337, %if.end2333
  br label %if.end2348

if.end2348:                                       ; preds = %if.end2347, %capturing_parens
  store i8 1, i8* %is_open, align 1
  br label %if.end2350

if.else2349:                                      ; preds = %if.else2315
  store i32 58, i32* %paren.addr, align 4
  store %struct.regnode* null, %struct.regnode** %ret, align 8
  br label %if.end2350

if.end2350:                                       ; preds = %if.else2349, %if.end2348
  br label %if.end2351

if.end2351:                                       ; preds = %if.end2350, %sw.epilog2314
  br label %if.end2352

if.end2352:                                       ; preds = %if.end2351
  br label %if.end2354

if.else2353:                                      ; preds = %entry
  store %struct.regnode* null, %struct.regnode** %ret, align 8
  br label %if.end2354

if.end2354:                                       ; preds = %if.else2353, %if.end2352
  br label %parse_rest

parse_rest:                                       ; preds = %if.end2354, %if.end2312
  %1862 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2355 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1862, i32 0, i32 8
  %1863 = load i8*, i8** %parse2355, align 8
  store i8* %1863, i8** %parse_start, align 8
  %1864 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1865 = load i32, i32* %depth.addr, align 4
  %add2356 = add i32 %1865, 1
  %call2357 = call %struct.regnode* @S_regbranch(%struct.RExC_state_t* %1864, i32* %flags, i32 1, i32 %add2356)
  store %struct.regnode* %call2357, %struct.regnode** %br, align 8
  %1866 = load %struct.regnode*, %struct.regnode** %br, align 8
  %cmp2358 = icmp eq %struct.regnode* %1866, null
  br i1 %cmp2358, label %if.then2360, label %if.end2392

if.then2360:                                      ; preds = %parse_rest
  %1867 = load i32, i32* %flags, align 4
  %and2361 = and i32 %1867, 32
  %tobool2362 = icmp ne i32 %and2361, 0
  br i1 %tobool2362, label %if.then2363, label %if.end2364

if.then2363:                                      ; preds = %if.then2360
  %1868 = load i32*, i32** %flagp.addr, align 8
  store i32 32, i32* %1868, align 4
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end2364:                                       ; preds = %if.then2360
  br label %do.body2365

do.body2365:                                      ; preds = %if.end2364
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses2366, align 8
  %1869 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2368 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1869, i32 0, i32 7
  %1870 = load i8*, i8** %end2368, align 8
  %1871 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2369 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1871, i32 0, i32 2
  %1872 = load i8*, i8** %precomp2369, align 8
  %sub.ptr.lhs.cast2370 = ptrtoint i8* %1870 to i64
  %sub.ptr.rhs.cast2371 = ptrtoint i8* %1872 to i64
  %sub.ptr.sub2372 = sub i64 %sub.ptr.lhs.cast2370, %sub.ptr.rhs.cast2371
  store i64 %sub.ptr.sub2372, i64* %len2367, align 8
  %1873 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2373 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1873, i32 0, i32 12
  %1874 = load %struct.regnode*, %struct.regnode** %emit2373, align 8
  %1875 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2374 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1875, i32 0, i32 13
  %1876 = bitcast %struct.regnode_ssc* %emit_dummy2374 to %struct.regnode*
  %cmp2375 = icmp eq %struct.regnode* %1874, %1876
  br i1 %cmp2375, label %if.end2379, label %if.then2377

if.then2377:                                      ; preds = %do.body2365
  %1877 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv2378 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1877, i32 0, i32 3
  %1878 = load %struct.p5rx*, %struct.p5rx** %rx_sv2378, align 8
  %1879 = bitcast %struct.p5rx* %1878 to i8*
  %1880 = bitcast i8* %1879 to %struct.sv*
  %1881 = bitcast %struct.sv* %1880 to i8*
  call void @Perl_save_pushptr(i8* %1881, i32 11)
  br label %if.end2379

if.end2379:                                       ; preds = %if.then2377, %do.body2365
  %1882 = load i64, i64* %len2367, align 8
  %cmp2380 = icmp sgt i64 %1882, 127
  br i1 %cmp2380, label %if.then2382, label %if.end2383

if.then2382:                                      ; preds = %if.end2379
  store i64 117, i64* %len2367, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses2366, align 8
  br label %if.end2383

if.end2383:                                       ; preds = %if.then2382, %if.end2379
  %1883 = load i32, i32* %flags, align 4
  %conv2384 = sext i32 %1883 to i64
  %1884 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82385 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1884, i32 0, i32 25
  %1885 = load i32, i32* %utf82385, align 8
  %tobool2386 = icmp ne i32 %1885, 0
  %1886 = zext i1 %tobool2386 to i64
  %cond2387 = select i1 %tobool2386, i32 1, i32 0
  %tobool2388 = icmp ne i32 %cond2387, 0
  %1887 = zext i1 %tobool2388 to i64
  %cond2389 = select i1 %tobool2388, i32 1, i32 0
  %1888 = load i64, i64* %len2367, align 8
  %1889 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2390 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1889, i32 0, i32 2
  %1890 = load i8*, i8** %precomp2390, align 8
  %1891 = load i8*, i8** %ellipses2366, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.259, i64 0, i64 0), i64 %conv2384, i32 %cond2389, i64 %1888, i8* %1890, i8* %1891)
  br label %do.end2391

do.end2391:                                       ; preds = %if.end2383
  br label %if.end2392

if.end2392:                                       ; preds = %do.end2391, %parse_rest
  %1892 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2393 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1892, i32 0, i32 8
  %1893 = load i8*, i8** %parse2393, align 8
  %1894 = load i8, i8* %1893, align 1
  %conv2394 = sext i8 %1894 to i32
  %cmp2395 = icmp eq i32 %conv2394, 124
  br i1 %cmp2395, label %if.then2397, label %if.else2417

if.then2397:                                      ; preds = %if.end2392
  %1895 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2398 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1895, i32 0, i32 12
  %1896 = load %struct.regnode*, %struct.regnode** %emit2398, align 8
  %1897 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2399 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1897, i32 0, i32 13
  %1898 = bitcast %struct.regnode_ssc* %emit_dummy2399 to %struct.regnode*
  %cmp2400 = icmp eq %struct.regnode* %1896, %1898
  br i1 %cmp2400, label %if.else2406, label %land.lhs.true2402

land.lhs.true2402:                                ; preds = %if.then2397
  %1899 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1899, i32 0, i32 20
  %1900 = load i32, i32* %extralen, align 8
  %tobool2403 = icmp ne i32 %1900, 0
  br i1 %tobool2403, label %if.then2404, label %if.else2406

if.then2404:                                      ; preds = %land.lhs.true2402
  %1901 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1902 = load %struct.regnode*, %struct.regnode** %br, align 8
  %1903 = load i32, i32* %depth.addr, align 4
  %add2405 = add i32 %1903, 1
  call void @S_reginsert(%struct.RExC_state_t* %1901, i8 zeroext 62, %struct.regnode* %1902, i32 %add2405)
  br label %if.end2408

if.else2406:                                      ; preds = %land.lhs.true2402, %if.then2397
  %1904 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1905 = load %struct.regnode*, %struct.regnode** %br, align 8
  %1906 = load i32, i32* %depth.addr, align 4
  %add2407 = add i32 %1906, 1
  call void @S_reginsert(%struct.RExC_state_t* %1904, i8 zeroext 30, %struct.regnode* %1905, i32 %add2407)
  br label %if.end2408

if.end2408:                                       ; preds = %if.else2406, %if.then2404
  store i8 1, i8* %have_branch, align 1
  %1907 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2409 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1907, i32 0, i32 12
  %1908 = load %struct.regnode*, %struct.regnode** %emit2409, align 8
  %1909 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2410 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1909, i32 0, i32 13
  %1910 = bitcast %struct.regnode_ssc* %emit_dummy2410 to %struct.regnode*
  %cmp2411 = icmp eq %struct.regnode* %1908, %1910
  br i1 %cmp2411, label %if.then2413, label %if.end2416

if.then2413:                                      ; preds = %if.end2408
  %1911 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen2414 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1911, i32 0, i32 20
  %1912 = load i32, i32* %extralen2414, align 8
  %add2415 = add nsw i32 %1912, 1
  store i32 %add2415, i32* %extralen2414, align 8
  br label %if.end2416

if.end2416:                                       ; preds = %if.then2413, %if.end2408
  br label %if.end2424

if.else2417:                                      ; preds = %if.end2392
  %1913 = load i32, i32* %paren.addr, align 4
  %cmp2418 = icmp eq i32 %1913, 58
  br i1 %cmp2418, label %if.then2420, label %if.end2423

if.then2420:                                      ; preds = %if.else2417
  %1914 = load i32, i32* %flags, align 4
  %and2421 = and i32 %1914, 2
  %1915 = load i32*, i32** %flagp.addr, align 8
  %1916 = load i32, i32* %1915, align 4
  %or2422 = or i32 %1916, %and2421
  store i32 %or2422, i32* %1915, align 4
  br label %if.end2423

if.end2423:                                       ; preds = %if.then2420, %if.else2417
  br label %if.end2424

if.end2424:                                       ; preds = %if.end2423, %if.end2416
  %1917 = load i8, i8* %is_open, align 1
  %tobool2425 = trunc i8 %1917 to i1
  br i1 %tobool2425, label %if.then2426, label %if.else2428

if.then2426:                                      ; preds = %if.end2424
  %1918 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1919 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1920 = load %struct.regnode*, %struct.regnode** %br, align 8
  %1921 = load i32, i32* %depth.addr, align 4
  %add2427 = add i32 %1921, 1
  call void @S_regtail(%struct.RExC_state_t* %1918, %struct.regnode* %1919, %struct.regnode* %1920, i32 %add2427)
  br label %if.end2433

if.else2428:                                      ; preds = %if.end2424
  %1922 = load i32, i32* %paren.addr, align 4
  %cmp2429 = icmp ne i32 %1922, 63
  br i1 %cmp2429, label %if.then2431, label %if.end2432

if.then2431:                                      ; preds = %if.else2428
  %1923 = load %struct.regnode*, %struct.regnode** %br, align 8
  store %struct.regnode* %1923, %struct.regnode** %ret, align 8
  br label %if.end2432

if.end2432:                                       ; preds = %if.then2431, %if.else2428
  br label %if.end2433

if.end2433:                                       ; preds = %if.end2432, %if.then2426
  %1924 = load i32, i32* %flags, align 4
  %and2434 = and i32 %1924, 13
  %1925 = load i32*, i32** %flagp.addr, align 8
  %1926 = load i32, i32* %1925, align 4
  %or2435 = or i32 %1926, %and2434
  store i32 %or2435, i32* %1925, align 4
  %1927 = load %struct.regnode*, %struct.regnode** %br, align 8
  store %struct.regnode* %1927, %struct.regnode** %lastbr, align 8
  br label %while.cond2436

while.cond2436:                                   ; preds = %if.end2510, %if.end2433
  %1928 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2437 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1928, i32 0, i32 8
  %1929 = load i8*, i8** %parse2437, align 8
  %1930 = load i8, i8* %1929, align 1
  %conv2438 = sext i8 %1930 to i32
  %cmp2439 = icmp eq i32 %conv2438, 124
  br i1 %cmp2439, label %while.body2441, label %while.end2514

while.body2441:                                   ; preds = %while.cond2436
  %1931 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2442 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1931, i32 0, i32 12
  %1932 = load %struct.regnode*, %struct.regnode** %emit2442, align 8
  %1933 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2443 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1933, i32 0, i32 13
  %1934 = bitcast %struct.regnode_ssc* %emit_dummy2443 to %struct.regnode*
  %cmp2444 = icmp eq %struct.regnode* %1932, %1934
  br i1 %cmp2444, label %if.end2454, label %land.lhs.true2446

land.lhs.true2446:                                ; preds = %while.body2441
  %1935 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen2447 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1935, i32 0, i32 20
  %1936 = load i32, i32* %extralen2447, align 8
  %tobool2448 = icmp ne i32 %1936, 0
  br i1 %tobool2448, label %if.then2449, label %if.end2454

if.then2449:                                      ; preds = %land.lhs.true2446
  %1937 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call2450 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %1937, i8 zeroext 61, i32 0)
  store %struct.regnode* %call2450, %struct.regnode** %ender, align 8
  %1938 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1939 = load %struct.regnode*, %struct.regnode** %lastbr, align 8
  %add.ptr2451 = getelementptr inbounds %struct.regnode, %struct.regnode* %1939, i64 1
  %add.ptr2452 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr2451, i64 1
  %1940 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %1941 = load i32, i32* %depth.addr, align 4
  %add2453 = add i32 %1941, 1
  call void @S_regtail(%struct.RExC_state_t* %1938, %struct.regnode* %add.ptr2452, %struct.regnode* %1940, i32 %add2453)
  br label %if.end2454

if.end2454:                                       ; preds = %if.then2449, %land.lhs.true2446, %while.body2441
  %1942 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2455 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1942, i32 0, i32 12
  %1943 = load %struct.regnode*, %struct.regnode** %emit2455, align 8
  %1944 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2456 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1944, i32 0, i32 13
  %1945 = bitcast %struct.regnode_ssc* %emit_dummy2456 to %struct.regnode*
  %cmp2457 = icmp eq %struct.regnode* %1943, %1945
  br i1 %cmp2457, label %if.then2459, label %if.end2462

if.then2459:                                      ; preds = %if.end2454
  %1946 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen2460 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1946, i32 0, i32 20
  %1947 = load i32, i32* %extralen2460, align 8
  %add2461 = add nsw i32 %1947, 2
  store i32 %add2461, i32* %extralen2460, align 8
  br label %if.end2462

if.end2462:                                       ; preds = %if.then2459, %if.end2454
  %1948 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call2463 = call i8* @S_nextchar(%struct.RExC_state_t* %1948)
  %1949 = load i32, i32* %freeze_paren, align 4
  %tobool2464 = icmp ne i32 %1949, 0
  br i1 %tobool2464, label %if.then2465, label %if.end2473

if.then2465:                                      ; preds = %if.end2462
  %1950 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar2466 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1950, i32 0, i32 18
  %1951 = load i32, i32* %npar2466, align 8
  %1952 = load i32, i32* %after_freeze, align 4
  %cmp2467 = icmp sgt i32 %1951, %1952
  br i1 %cmp2467, label %if.then2469, label %if.end2471

if.then2469:                                      ; preds = %if.then2465
  %1953 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar2470 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1953, i32 0, i32 18
  %1954 = load i32, i32* %npar2470, align 8
  store i32 %1954, i32* %after_freeze, align 4
  br label %if.end2471

if.end2471:                                       ; preds = %if.then2469, %if.then2465
  %1955 = load i32, i32* %freeze_paren, align 4
  %1956 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar2472 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1956, i32 0, i32 18
  store i32 %1955, i32* %npar2472, align 8
  br label %if.end2473

if.end2473:                                       ; preds = %if.end2471, %if.end2462
  %1957 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1958 = load i32, i32* %depth.addr, align 4
  %add2474 = add i32 %1958, 1
  %call2475 = call %struct.regnode* @S_regbranch(%struct.RExC_state_t* %1957, i32* %flags, i32 0, i32 %add2474)
  store %struct.regnode* %call2475, %struct.regnode** %br, align 8
  %1959 = load %struct.regnode*, %struct.regnode** %br, align 8
  %cmp2476 = icmp eq %struct.regnode* %1959, null
  br i1 %cmp2476, label %if.then2478, label %if.end2510

if.then2478:                                      ; preds = %if.end2473
  %1960 = load i32, i32* %flags, align 4
  %and2479 = and i32 %1960, 32
  %tobool2480 = icmp ne i32 %and2479, 0
  br i1 %tobool2480, label %if.then2481, label %if.end2482

if.then2481:                                      ; preds = %if.then2478
  %1961 = load i32*, i32** %flagp.addr, align 8
  store i32 32, i32* %1961, align 4
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end2482:                                       ; preds = %if.then2478
  br label %do.body2483

do.body2483:                                      ; preds = %if.end2482
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses2484, align 8
  %1962 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2486 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1962, i32 0, i32 7
  %1963 = load i8*, i8** %end2486, align 8
  %1964 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2487 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1964, i32 0, i32 2
  %1965 = load i8*, i8** %precomp2487, align 8
  %sub.ptr.lhs.cast2488 = ptrtoint i8* %1963 to i64
  %sub.ptr.rhs.cast2489 = ptrtoint i8* %1965 to i64
  %sub.ptr.sub2490 = sub i64 %sub.ptr.lhs.cast2488, %sub.ptr.rhs.cast2489
  store i64 %sub.ptr.sub2490, i64* %len2485, align 8
  %1966 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2491 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1966, i32 0, i32 12
  %1967 = load %struct.regnode*, %struct.regnode** %emit2491, align 8
  %1968 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2492 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1968, i32 0, i32 13
  %1969 = bitcast %struct.regnode_ssc* %emit_dummy2492 to %struct.regnode*
  %cmp2493 = icmp eq %struct.regnode* %1967, %1969
  br i1 %cmp2493, label %if.end2497, label %if.then2495

if.then2495:                                      ; preds = %do.body2483
  %1970 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv2496 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1970, i32 0, i32 3
  %1971 = load %struct.p5rx*, %struct.p5rx** %rx_sv2496, align 8
  %1972 = bitcast %struct.p5rx* %1971 to i8*
  %1973 = bitcast i8* %1972 to %struct.sv*
  %1974 = bitcast %struct.sv* %1973 to i8*
  call void @Perl_save_pushptr(i8* %1974, i32 11)
  br label %if.end2497

if.end2497:                                       ; preds = %if.then2495, %do.body2483
  %1975 = load i64, i64* %len2485, align 8
  %cmp2498 = icmp sgt i64 %1975, 127
  br i1 %cmp2498, label %if.then2500, label %if.end2501

if.then2500:                                      ; preds = %if.end2497
  store i64 117, i64* %len2485, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses2484, align 8
  br label %if.end2501

if.end2501:                                       ; preds = %if.then2500, %if.end2497
  %1976 = load i32, i32* %flags, align 4
  %conv2502 = sext i32 %1976 to i64
  %1977 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82503 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1977, i32 0, i32 25
  %1978 = load i32, i32* %utf82503, align 8
  %tobool2504 = icmp ne i32 %1978, 0
  %1979 = zext i1 %tobool2504 to i64
  %cond2505 = select i1 %tobool2504, i32 1, i32 0
  %tobool2506 = icmp ne i32 %cond2505, 0
  %1980 = zext i1 %tobool2506 to i64
  %cond2507 = select i1 %tobool2506, i32 1, i32 0
  %1981 = load i64, i64* %len2485, align 8
  %1982 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2508 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1982, i32 0, i32 2
  %1983 = load i8*, i8** %precomp2508, align 8
  %1984 = load i8*, i8** %ellipses2484, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.259, i64 0, i64 0), i64 %conv2502, i32 %cond2507, i64 %1981, i8* %1983, i8* %1984)
  br label %do.end2509

do.end2509:                                       ; preds = %if.end2501
  br label %if.end2510

if.end2510:                                       ; preds = %do.end2509, %if.end2473
  %1985 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1986 = load %struct.regnode*, %struct.regnode** %lastbr, align 8
  %1987 = load %struct.regnode*, %struct.regnode** %br, align 8
  %1988 = load i32, i32* %depth.addr, align 4
  %add2511 = add i32 %1988, 1
  call void @S_regtail(%struct.RExC_state_t* %1985, %struct.regnode* %1986, %struct.regnode* %1987, i32 %add2511)
  %1989 = load %struct.regnode*, %struct.regnode** %br, align 8
  store %struct.regnode* %1989, %struct.regnode** %lastbr, align 8
  %1990 = load i32, i32* %flags, align 4
  %and2512 = and i32 %1990, 13
  %1991 = load i32*, i32** %flagp.addr, align 8
  %1992 = load i32, i32* %1991, align 4
  %or2513 = or i32 %1992, %and2512
  store i32 %or2513, i32* %1991, align 4
  br label %while.cond2436

while.end2514:                                    ; preds = %while.cond2436
  %1993 = load i8, i8* %have_branch, align 1
  %tobool2515 = trunc i8 %1993 to i1
  br i1 %tobool2515, label %if.then2520, label %lor.lhs.false2517

lor.lhs.false2517:                                ; preds = %while.end2514
  %1994 = load i32, i32* %paren.addr, align 4
  %cmp2518 = icmp ne i32 %1994, 58
  br i1 %cmp2518, label %if.then2520, label %if.end2648

if.then2520:                                      ; preds = %lor.lhs.false2517, %while.end2514
  %1995 = load i32, i32* %paren.addr, align 4
  switch i32 %1995, label %sw.epilog2556 [
    i32 58, label %sw.bb2521
    i32 1, label %sw.bb2523
    i32 2, label %sw.bb2523
    i32 60, label %sw.bb2544
    i32 44, label %sw.bb2544
    i32 61, label %sw.bb2544
    i32 33, label %sw.bb2544
    i32 62, label %sw.bb2546
    i32 0, label %sw.bb2548
  ]

sw.bb2521:                                        ; preds = %if.then2520
  %1996 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call2522 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %1996, i8 zeroext 41)
  store %struct.regnode* %call2522, %struct.regnode** %ender, align 8
  br label %sw.epilog2556

sw.bb2523:                                        ; preds = %if.then2520, %if.then2520
  %1997 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1998 = load i32, i32* %parno, align 4
  %call2524 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %1997, i8 zeroext 50, i32 %1998)
  store %struct.regnode* %call2524, %struct.regnode** %ender, align 8
  %1999 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2525 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1999, i32 0, i32 12
  %2000 = load %struct.regnode*, %struct.regnode** %emit2525, align 8
  %2001 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2526 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2001, i32 0, i32 13
  %2002 = bitcast %struct.regnode_ssc* %emit_dummy2526 to %struct.regnode*
  %cmp2527 = icmp eq %struct.regnode* %2000, %2002
  br i1 %cmp2527, label %if.end2543, label %land.lhs.true2529

land.lhs.true2529:                                ; preds = %sw.bb2523
  %2003 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen2530 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2003, i32 0, i32 16
  %2004 = load i32, i32* %seen2530, align 8
  %and2531 = and i32 %2004, 32
  %tobool2532 = icmp ne i32 %and2531, 0
  br i1 %tobool2532, label %if.then2533, label %if.end2543

if.then2533:                                      ; preds = %land.lhs.true2529
  %2005 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %2006 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %close_parens = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2006, i32 0, i32 23
  %2007 = load %struct.regnode**, %struct.regnode*** %close_parens, align 8
  %2008 = load i32, i32* %parno, align 4
  %sub2534 = sub nsw i32 %2008, 1
  %idxprom2535 = sext i32 %sub2534 to i64
  %arrayidx2536 = getelementptr inbounds %struct.regnode*, %struct.regnode** %2007, i64 %idxprom2535
  store %struct.regnode* %2005, %struct.regnode** %arrayidx2536, align 8
  %2009 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %nestroot2537 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2009, i32 0, i32 19
  %2010 = load i32, i32* %nestroot2537, align 4
  %2011 = load i32, i32* %parno, align 4
  %cmp2538 = icmp eq i32 %2010, %2011
  br i1 %cmp2538, label %if.then2540, label %if.end2542

if.then2540:                                      ; preds = %if.then2533
  %2012 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %nestroot2541 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2012, i32 0, i32 19
  store i32 0, i32* %nestroot2541, align 4
  br label %if.end2542

if.end2542:                                       ; preds = %if.then2540, %if.then2533
  br label %if.end2543

if.end2543:                                       ; preds = %if.end2542, %land.lhs.true2529, %sw.bb2523
  br label %sw.epilog2556

sw.bb2544:                                        ; preds = %if.then2520, %if.then2520, %if.then2520, %if.then2520
  %2013 = load i32*, i32** %flagp.addr, align 8
  %2014 = load i32, i32* %2013, align 4
  %and2545 = and i32 %2014, -2
  store i32 %and2545, i32* %2013, align 4
  br label %sw.bb2546

sw.bb2546:                                        ; preds = %if.then2520, %sw.bb2544
  %2015 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call2547 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %2015, i8 zeroext 1)
  store %struct.regnode* %call2547, %struct.regnode** %ender, align 8
  br label %sw.epilog2556

sw.bb2548:                                        ; preds = %if.then2520
  %2016 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call2549 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %2016, i8 zeroext 0)
  store %struct.regnode* %call2549, %struct.regnode** %ender, align 8
  %2017 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2550 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2017, i32 0, i32 12
  %2018 = load %struct.regnode*, %struct.regnode** %emit2550, align 8
  %2019 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2551 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2019, i32 0, i32 13
  %2020 = bitcast %struct.regnode_ssc* %emit_dummy2551 to %struct.regnode*
  %cmp2552 = icmp eq %struct.regnode* %2018, %2020
  br i1 %cmp2552, label %if.end2555, label %if.then2554

if.then2554:                                      ; preds = %sw.bb2548
  %2021 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %2022 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %opend = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2022, i32 0, i32 24
  store %struct.regnode* %2021, %struct.regnode** %opend, align 8
  br label %if.end2555

if.end2555:                                       ; preds = %if.then2554, %sw.bb2548
  br label %sw.epilog2556

sw.epilog2556:                                    ; preds = %if.then2520, %if.end2555, %sw.bb2546, %if.end2543, %sw.bb2521
  %2023 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %2024 = load %struct.regnode*, %struct.regnode** %lastbr, align 8
  %2025 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %2026 = load i32, i32* %depth.addr, align 4
  %add2557 = add i32 %2026, 1
  call void @S_regtail(%struct.RExC_state_t* %2023, %struct.regnode* %2024, %struct.regnode* %2025, i32 %add2557)
  %2027 = load i8, i8* %have_branch, align 1
  %tobool2558 = trunc i8 %2027 to i1
  br i1 %tobool2558, label %land.lhs.true2560, label %if.end2647

land.lhs.true2560:                                ; preds = %sw.epilog2556
  %2028 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2561 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2028, i32 0, i32 12
  %2029 = load %struct.regnode*, %struct.regnode** %emit2561, align 8
  %2030 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2562 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2030, i32 0, i32 13
  %2031 = bitcast %struct.regnode_ssc* %emit_dummy2562 to %struct.regnode*
  %cmp2563 = icmp eq %struct.regnode* %2029, %2031
  br i1 %cmp2563, label %if.end2647, label %if.then2565

if.then2565:                                      ; preds = %land.lhs.true2560
  store i8 1, i8* %is_nothing, align 1
  %2032 = load i32, i32* %depth.addr, align 4
  %cmp2566 = icmp eq i32 %2032, 1
  br i1 %cmp2566, label %if.then2568, label %if.end2571

if.then2568:                                      ; preds = %if.then2565
  %2033 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen2569 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2033, i32 0, i32 16
  %2034 = load i32, i32* %seen2569, align 8
  %or2570 = or i32 %2034, 64
  store i32 %or2570, i32* %seen2569, align 8
  br label %if.end2571

if.end2571:                                       ; preds = %if.then2568, %if.then2565
  %2035 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %2035, %struct.regnode** %br, align 8
  br label %for.cond2572

for.cond2572:                                     ; preds = %for.inc2606, %if.end2571
  %2036 = load %struct.regnode*, %struct.regnode** %br, align 8
  %tobool2573 = icmp ne %struct.regnode* %2036, null
  br i1 %tobool2573, label %for.body2574, label %for.end2608

for.body2574:                                     ; preds = %for.cond2572
  %2037 = load %struct.regnode*, %struct.regnode** %br, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %2037, i32 0, i32 1
  %2038 = load i8, i8* %type, align 1
  %idxprom2576 = zext i8 %2038 to i64
  %arrayidx2577 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom2576
  %2039 = load i8, i8* %arrayidx2577, align 1
  store i8 %2039, i8* %op2575, align 1
  %2040 = load i8, i8* %op2575, align 1
  %conv2578 = zext i8 %2040 to i32
  %cmp2579 = icmp eq i32 %conv2578, 30
  br i1 %cmp2579, label %if.then2581, label %if.else2596

if.then2581:                                      ; preds = %for.body2574
  %2041 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %2042 = load %struct.regnode*, %struct.regnode** %br, align 8
  %add.ptr2582 = getelementptr inbounds %struct.regnode, %struct.regnode* %2042, i64 1
  %2043 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %2044 = load i32, i32* %depth.addr, align 4
  %add2583 = add i32 %2044, 1
  call void @S_regtail(%struct.RExC_state_t* %2041, %struct.regnode* %add.ptr2582, %struct.regnode* %2043, i32 %add2583)
  %2045 = load %struct.regnode*, %struct.regnode** %br, align 8
  %add.ptr2584 = getelementptr inbounds %struct.regnode, %struct.regnode* %2045, i64 1
  %type2585 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr2584, i32 0, i32 1
  %2046 = load i8, i8* %type2585, align 1
  %conv2586 = zext i8 %2046 to i32
  %cmp2587 = icmp ne i32 %conv2586, 40
  br i1 %cmp2587, label %if.then2594, label %lor.lhs.false2589

lor.lhs.false2589:                                ; preds = %if.then2581
  %2047 = load %struct.regnode*, %struct.regnode** %br, align 8
  %add.ptr2590 = getelementptr inbounds %struct.regnode, %struct.regnode* %2047, i64 1
  %call2591 = call %struct.regnode* @Perl_regnext(%struct.regnode* %add.ptr2590)
  %2048 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %cmp2592 = icmp ne %struct.regnode* %call2591, %2048
  br i1 %cmp2592, label %if.then2594, label %if.end2595

if.then2594:                                      ; preds = %lor.lhs.false2589, %if.then2581
  store i8 0, i8* %is_nothing, align 1
  br label %if.end2595

if.end2595:                                       ; preds = %if.then2594, %lor.lhs.false2589
  br label %if.end2605

if.else2596:                                      ; preds = %for.body2574
  %2049 = load i8, i8* %op2575, align 1
  %conv2597 = zext i8 %2049 to i32
  %cmp2598 = icmp eq i32 %conv2597, 62
  br i1 %cmp2598, label %if.then2600, label %if.end2604

if.then2600:                                      ; preds = %if.else2596
  %2050 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %2051 = load %struct.regnode*, %struct.regnode** %br, align 8
  %add.ptr2601 = getelementptr inbounds %struct.regnode, %struct.regnode* %2051, i64 1
  %add.ptr2602 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr2601, i64 1
  %2052 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %2053 = load i32, i32* %depth.addr, align 4
  %add2603 = add i32 %2053, 1
  call void @S_regtail(%struct.RExC_state_t* %2050, %struct.regnode* %add.ptr2602, %struct.regnode* %2052, i32 %add2603)
  store i8 0, i8* %is_nothing, align 1
  br label %if.end2604

if.end2604:                                       ; preds = %if.then2600, %if.else2596
  br label %if.end2605

if.end2605:                                       ; preds = %if.end2604, %if.end2595
  br label %for.inc2606

for.inc2606:                                      ; preds = %if.end2605
  %2054 = load %struct.regnode*, %struct.regnode** %br, align 8
  %call2607 = call %struct.regnode* @Perl_regnext(%struct.regnode* %2054)
  store %struct.regnode* %call2607, %struct.regnode** %br, align 8
  br label %for.cond2572

for.end2608:                                      ; preds = %for.cond2572
  %2055 = load i8, i8* %is_nothing, align 1
  %tobool2609 = icmp ne i8 %2055, 0
  br i1 %tobool2609, label %if.then2610, label %if.end2646

if.then2610:                                      ; preds = %for.end2608
  %2056 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %type2611 = getelementptr inbounds %struct.regnode, %struct.regnode* %2056, i32 0, i32 1
  %2057 = load i8, i8* %type2611, align 1
  %idxprom2612 = zext i8 %2057 to i64
  %arrayidx2613 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom2612
  %2058 = load i8, i8* %arrayidx2613, align 1
  %conv2614 = zext i8 %2058 to i32
  %cmp2615 = icmp ne i32 %conv2614, 30
  br i1 %cmp2615, label %cond.true2617, label %cond.false2619

cond.true2617:                                    ; preds = %if.then2610
  %2059 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %call2618 = call %struct.regnode* @Perl_regnext(%struct.regnode* %2059)
  br label %cond.end2620

cond.false2619:                                   ; preds = %if.then2610
  %2060 = load %struct.regnode*, %struct.regnode** %ret, align 8
  br label %cond.end2620

cond.end2620:                                     ; preds = %cond.false2619, %cond.true2617
  %cond2621 = phi %struct.regnode* [ %call2618, %cond.true2617 ], [ %2060, %cond.false2619 ]
  store %struct.regnode* %cond2621, %struct.regnode** %br, align 8
  %2061 = load %struct.regnode*, %struct.regnode** %br, align 8
  %type2622 = getelementptr inbounds %struct.regnode, %struct.regnode* %2061, i32 0, i32 1
  store i8 40, i8* %type2622, align 1
  %2062 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %type2623 = getelementptr inbounds %struct.regnode, %struct.regnode* %2062, i32 0, i32 1
  %2063 = load i8, i8* %type2623, align 1
  %conv2624 = zext i8 %2063 to i32
  %cmp2625 = icmp eq i32 %conv2624, 41
  br i1 %cmp2625, label %if.then2627, label %if.else2630

if.then2627:                                      ; preds = %cond.end2620
  %2064 = load %struct.regnode*, %struct.regnode** %br, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %2064, i32 0, i32 2
  store i16 0, i16* %next_off, align 2
  %2065 = load %struct.regnode*, %struct.regnode** %br, align 8
  %add.ptr2628 = getelementptr inbounds %struct.regnode, %struct.regnode* %2065, i64 1
  %2066 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2629 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2066, i32 0, i32 12
  store %struct.regnode* %add.ptr2628, %struct.regnode** %emit2629, align 8
  br label %if.end2645

if.else2630:                                      ; preds = %cond.end2620
  %2067 = load %struct.regnode*, %struct.regnode** %br, align 8
  %add.ptr2631 = getelementptr inbounds %struct.regnode, %struct.regnode* %2067, i64 1
  store %struct.regnode* %add.ptr2631, %struct.regnode** %opt, align 8
  br label %for.cond2632

for.cond2632:                                     ; preds = %for.inc2637, %if.else2630
  %2068 = load %struct.regnode*, %struct.regnode** %opt, align 8
  %2069 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %cmp2633 = icmp ult %struct.regnode* %2068, %2069
  br i1 %cmp2633, label %for.body2635, label %for.end2639

for.body2635:                                     ; preds = %for.cond2632
  %2070 = load %struct.regnode*, %struct.regnode** %opt, align 8
  %type2636 = getelementptr inbounds %struct.regnode, %struct.regnode* %2070, i32 0, i32 1
  store i8 92, i8* %type2636, align 1
  br label %for.inc2637

for.inc2637:                                      ; preds = %for.body2635
  %2071 = load %struct.regnode*, %struct.regnode** %opt, align 8
  %incdec.ptr2638 = getelementptr inbounds %struct.regnode, %struct.regnode* %2071, i32 1
  store %struct.regnode* %incdec.ptr2638, %struct.regnode** %opt, align 8
  br label %for.cond2632

for.end2639:                                      ; preds = %for.cond2632
  %2072 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %2073 = load %struct.regnode*, %struct.regnode** %br, align 8
  %sub.ptr.lhs.cast2640 = ptrtoint %struct.regnode* %2072 to i64
  %sub.ptr.rhs.cast2641 = ptrtoint %struct.regnode* %2073 to i64
  %sub.ptr.sub2642 = sub i64 %sub.ptr.lhs.cast2640, %sub.ptr.rhs.cast2641
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub2642, 4
  %conv2643 = trunc i64 %sub.ptr.div to i16
  %2074 = load %struct.regnode*, %struct.regnode** %br, align 8
  %next_off2644 = getelementptr inbounds %struct.regnode, %struct.regnode* %2074, i32 0, i32 2
  store i16 %conv2643, i16* %next_off2644, align 2
  br label %if.end2645

if.end2645:                                       ; preds = %for.end2639, %if.then2627
  br label %if.end2646

if.end2646:                                       ; preds = %if.end2645, %for.end2608
  br label %if.end2647

if.end2647:                                       ; preds = %if.end2646, %land.lhs.true2560, %sw.epilog2556
  br label %if.end2648

if.end2648:                                       ; preds = %if.end2647, %lor.lhs.false2517
  %2075 = load i32, i32* %paren.addr, align 4
  %tobool2649 = icmp ne i32 %2075, 0
  br i1 %tobool2649, label %land.lhs.true2650, label %if.end2673

land.lhs.true2650:                                ; preds = %if.end2648
  %2076 = load i32, i32* %paren.addr, align 4
  %call2651 = call i8* @strchr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @S_reg.parens, i64 0, i64 0), i32 %2076) #6
  store i8* %call2651, i8** %p, align 8
  %tobool2652 = icmp ne i8* %call2651, null
  br i1 %tobool2652, label %if.then2653, label %if.end2673

if.then2653:                                      ; preds = %land.lhs.true2650
  %2077 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast2654 = ptrtoint i8* %2077 to i64
  %sub.ptr.sub2655 = sub i64 %sub.ptr.lhs.cast2654, ptrtoint ([6 x i8]* @S_reg.parens to i64)
  %rem = srem i64 %sub.ptr.sub2655, 2
  %tobool2656 = icmp ne i64 %rem, 0
  %2078 = zext i1 %tobool2656 to i64
  %cond2657 = select i1 %tobool2656, i32 64, i32 63
  %conv2658 = trunc i32 %cond2657 to i8
  store i8 %conv2658, i8* %node, align 1
  %2079 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast2660 = ptrtoint i8* %2079 to i64
  %sub.ptr.sub2661 = sub i64 %sub.ptr.lhs.cast2660, ptrtoint ([6 x i8]* @S_reg.parens to i64)
  %cmp2662 = icmp sgt i64 %sub.ptr.sub2661, 1
  %conv2663 = zext i1 %cmp2662 to i32
  store i32 %conv2663, i32* %flag2659, align 4
  %2080 = load i32, i32* %paren.addr, align 4
  %cmp2664 = icmp eq i32 %2080, 62
  br i1 %cmp2664, label %if.then2666, label %if.end2667

if.then2666:                                      ; preds = %if.then2653
  store i8 65, i8* %node, align 1
  store i32 0, i32* %flag2659, align 4
  br label %if.end2667

if.end2667:                                       ; preds = %if.then2666, %if.then2653
  %2081 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %2082 = load i8, i8* %node, align 1
  %2083 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %2084 = load i32, i32* %depth.addr, align 4
  %add2668 = add i32 %2084, 1
  call void @S_reginsert(%struct.RExC_state_t* %2081, i8 zeroext %2082, %struct.regnode* %2083, i32 %add2668)
  %2085 = load i32, i32* %flag2659, align 4
  %conv2669 = trunc i32 %2085 to i8
  %2086 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags2670 = getelementptr inbounds %struct.regnode, %struct.regnode* %2086, i32 0, i32 0
  store i8 %conv2669, i8* %flags2670, align 2
  %2087 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %2088 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %2089 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call2671 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %2089, i8 zeroext 41)
  %2090 = load i32, i32* %depth.addr, align 4
  %add2672 = add i32 %2090, 1
  call void @S_regtail(%struct.RExC_state_t* %2087, %struct.regnode* %2088, %struct.regnode* %call2671, i32 %add2672)
  br label %if.end2673

if.end2673:                                       ; preds = %if.end2667, %land.lhs.true2650, %if.end2648
  %2091 = load i32, i32* %paren.addr, align 4
  %tobool2674 = icmp ne i32 %2091, 0
  br i1 %tobool2674, label %if.then2675, label %if.else2737

if.then2675:                                      ; preds = %if.end2673
  %2092 = load i32, i32* %oregflags, align 4
  %2093 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2676 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2093, i32 0, i32 0
  %2094 = load i32, i32* %flags2676, align 8
  %and2677 = and i32 %2094, 64
  %or2678 = or i32 %2092, %and2677
  %2095 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2679 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2095, i32 0, i32 0
  store i32 %or2678, i32* %flags2679, align 8
  %2096 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2680 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2096, i32 0, i32 8
  %2097 = load i8*, i8** %parse2680, align 8
  %2098 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2681 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2098, i32 0, i32 7
  %2099 = load i8*, i8** %end2681, align 8
  %cmp2682 = icmp uge i8* %2097, %2099
  br i1 %cmp2682, label %if.then2689, label %lor.lhs.false2684

lor.lhs.false2684:                                ; preds = %if.then2675
  %2100 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call2685 = call i8* @S_nextchar(%struct.RExC_state_t* %2100)
  %2101 = load i8, i8* %call2685, align 1
  %conv2686 = sext i8 %2101 to i32
  %cmp2687 = icmp ne i32 %conv2686, 41
  br i1 %cmp2687, label %if.then2689, label %if.end2736

if.then2689:                                      ; preds = %lor.lhs.false2684, %if.then2675
  %2102 = load i8*, i8** %oregcomp_parse, align 8
  %2103 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2690 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2103, i32 0, i32 8
  store i8* %2102, i8** %parse2690, align 8
  br label %do.body2691

do.body2691:                                      ; preds = %if.then2689
  %2104 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2692 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2104, i32 0, i32 12
  %2105 = load %struct.regnode*, %struct.regnode** %emit2692, align 8
  %2106 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2693 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2106, i32 0, i32 13
  %2107 = bitcast %struct.regnode_ssc* %emit_dummy2693 to %struct.regnode*
  %cmp2694 = icmp eq %struct.regnode* %2105, %2107
  br i1 %cmp2694, label %if.end2698, label %if.then2696

if.then2696:                                      ; preds = %do.body2691
  %2108 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv2697 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2108, i32 0, i32 3
  %2109 = load %struct.p5rx*, %struct.p5rx** %rx_sv2697, align 8
  %2110 = bitcast %struct.p5rx* %2109 to i8*
  %2111 = bitcast i8* %2110 to %struct.sv*
  %2112 = bitcast %struct.sv* %2111 to i8*
  call void @Perl_save_pushptr(i8* %2112, i32 11)
  br label %if.end2698

if.end2698:                                       ; preds = %if.then2696, %do.body2691
  br label %do.body2699

do.body2699:                                      ; preds = %if.end2698
  %2113 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2701 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2113, i32 0, i32 8
  %2114 = load i8*, i8** %parse2701, align 8
  %2115 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2702 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2115, i32 0, i32 7
  %2116 = load i8*, i8** %end2702, align 8
  %cmp2703 = icmp ugt i8* %2114, %2116
  br i1 %cmp2703, label %cond.true2705, label %cond.false2707

cond.true2705:                                    ; preds = %do.body2699
  %2117 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2706 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2117, i32 0, i32 7
  %2118 = load i8*, i8** %end2706, align 8
  br label %cond.end2709

cond.false2707:                                   ; preds = %do.body2699
  %2119 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2708 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2119, i32 0, i32 8
  %2120 = load i8*, i8** %parse2708, align 8
  br label %cond.end2709

cond.end2709:                                     ; preds = %cond.false2707, %cond.true2705
  %cond2710 = phi i8* [ %2118, %cond.true2705 ], [ %2120, %cond.false2707 ]
  %2121 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2711 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2121, i32 0, i32 2
  %2122 = load i8*, i8** %precomp2711, align 8
  %sub.ptr.lhs.cast2712 = ptrtoint i8* %cond2710 to i64
  %sub.ptr.rhs.cast2713 = ptrtoint i8* %2122 to i64
  %sub.ptr.sub2714 = sub i64 %sub.ptr.lhs.cast2712, %sub.ptr.rhs.cast2713
  store i64 %sub.ptr.sub2714, i64* %offset2700, align 8
  %2123 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82715 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2123, i32 0, i32 25
  %2124 = load i32, i32* %utf82715, align 8
  %tobool2716 = icmp ne i32 %2124, 0
  %2125 = zext i1 %tobool2716 to i64
  %cond2717 = select i1 %tobool2716, i32 1, i32 0
  %tobool2718 = icmp ne i32 %cond2717, 0
  %2126 = zext i1 %tobool2718 to i64
  %cond2719 = select i1 %tobool2718, i32 1, i32 0
  %2127 = load i64, i64* %offset2700, align 8
  %2128 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2720 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2128, i32 0, i32 2
  %2129 = load i8*, i8** %precomp2720, align 8
  %2130 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82721 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2130, i32 0, i32 25
  %2131 = load i32, i32* %utf82721, align 8
  %tobool2722 = icmp ne i32 %2131, 0
  %2132 = zext i1 %tobool2722 to i64
  %cond2723 = select i1 %tobool2722, i32 1, i32 0
  %tobool2724 = icmp ne i32 %cond2723, 0
  %2133 = zext i1 %tobool2724 to i64
  %cond2725 = select i1 %tobool2724, i32 1, i32 0
  %2134 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2726 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2134, i32 0, i32 7
  %2135 = load i8*, i8** %end2726, align 8
  %2136 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2727 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2136, i32 0, i32 2
  %2137 = load i8*, i8** %precomp2727, align 8
  %sub.ptr.lhs.cast2728 = ptrtoint i8* %2135 to i64
  %sub.ptr.rhs.cast2729 = ptrtoint i8* %2137 to i64
  %sub.ptr.sub2730 = sub i64 %sub.ptr.lhs.cast2728, %sub.ptr.rhs.cast2729
  %2138 = load i64, i64* %offset2700, align 8
  %sub2731 = sub nsw i64 %sub.ptr.sub2730, %2138
  %2139 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2732 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2139, i32 0, i32 2
  %2140 = load i8*, i8** %precomp2732, align 8
  %2141 = load i64, i64* %offset2700, align 8
  %add.ptr2733 = getelementptr inbounds i8, i8* %2140, i64 %2141
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.265, i64 0, i64 0), i32 %cond2719, i64 %2127, i8* %2129, i32 %cond2725, i64 %sub2731, i8* %add.ptr2733)
  br label %do.end2734

do.end2734:                                       ; preds = %cond.end2709
  br label %do.end2735

do.end2735:                                       ; preds = %do.end2734
  br label %if.end2736

if.end2736:                                       ; preds = %do.end2735, %lor.lhs.false2684
  br label %if.end2826

if.else2737:                                      ; preds = %if.end2673
  %2142 = load i32, i32* %paren.addr, align 4
  %tobool2738 = icmp ne i32 %2142, 0
  br i1 %tobool2738, label %if.end2825, label %land.lhs.true2739

land.lhs.true2739:                                ; preds = %if.else2737
  %2143 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2740 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2143, i32 0, i32 8
  %2144 = load i8*, i8** %parse2740, align 8
  %2145 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2741 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2145, i32 0, i32 7
  %2146 = load i8*, i8** %end2741, align 8
  %cmp2742 = icmp ult i8* %2144, %2146
  br i1 %cmp2742, label %if.then2744, label %if.end2825

if.then2744:                                      ; preds = %land.lhs.true2739
  %2147 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2745 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2147, i32 0, i32 8
  %2148 = load i8*, i8** %parse2745, align 8
  %2149 = load i8, i8* %2148, align 1
  %conv2746 = sext i8 %2149 to i32
  %cmp2747 = icmp eq i32 %conv2746, 41
  br i1 %cmp2747, label %if.then2749, label %if.else2797

if.then2749:                                      ; preds = %if.then2744
  %2150 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2750 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2150, i32 0, i32 8
  %2151 = load i8*, i8** %parse2750, align 8
  %incdec.ptr2751 = getelementptr inbounds i8, i8* %2151, i32 1
  store i8* %incdec.ptr2751, i8** %parse2750, align 8
  br label %do.body2752

do.body2752:                                      ; preds = %if.then2749
  %2152 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2753 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2152, i32 0, i32 12
  %2153 = load %struct.regnode*, %struct.regnode** %emit2753, align 8
  %2154 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2754 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2154, i32 0, i32 13
  %2155 = bitcast %struct.regnode_ssc* %emit_dummy2754 to %struct.regnode*
  %cmp2755 = icmp eq %struct.regnode* %2153, %2155
  br i1 %cmp2755, label %if.end2759, label %if.then2757

if.then2757:                                      ; preds = %do.body2752
  %2156 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv2758 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2156, i32 0, i32 3
  %2157 = load %struct.p5rx*, %struct.p5rx** %rx_sv2758, align 8
  %2158 = bitcast %struct.p5rx* %2157 to i8*
  %2159 = bitcast i8* %2158 to %struct.sv*
  %2160 = bitcast %struct.sv* %2159 to i8*
  call void @Perl_save_pushptr(i8* %2160, i32 11)
  br label %if.end2759

if.end2759:                                       ; preds = %if.then2757, %do.body2752
  br label %do.body2760

do.body2760:                                      ; preds = %if.end2759
  %2161 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2762 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2161, i32 0, i32 8
  %2162 = load i8*, i8** %parse2762, align 8
  %2163 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2763 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2163, i32 0, i32 7
  %2164 = load i8*, i8** %end2763, align 8
  %cmp2764 = icmp ugt i8* %2162, %2164
  br i1 %cmp2764, label %cond.true2766, label %cond.false2768

cond.true2766:                                    ; preds = %do.body2760
  %2165 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2767 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2165, i32 0, i32 7
  %2166 = load i8*, i8** %end2767, align 8
  br label %cond.end2770

cond.false2768:                                   ; preds = %do.body2760
  %2167 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2769 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2167, i32 0, i32 8
  %2168 = load i8*, i8** %parse2769, align 8
  br label %cond.end2770

cond.end2770:                                     ; preds = %cond.false2768, %cond.true2766
  %cond2771 = phi i8* [ %2166, %cond.true2766 ], [ %2168, %cond.false2768 ]
  %2169 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2772 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2169, i32 0, i32 2
  %2170 = load i8*, i8** %precomp2772, align 8
  %sub.ptr.lhs.cast2773 = ptrtoint i8* %cond2771 to i64
  %sub.ptr.rhs.cast2774 = ptrtoint i8* %2170 to i64
  %sub.ptr.sub2775 = sub i64 %sub.ptr.lhs.cast2773, %sub.ptr.rhs.cast2774
  store i64 %sub.ptr.sub2775, i64* %offset2761, align 8
  %2171 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82776 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2171, i32 0, i32 25
  %2172 = load i32, i32* %utf82776, align 8
  %tobool2777 = icmp ne i32 %2172, 0
  %2173 = zext i1 %tobool2777 to i64
  %cond2778 = select i1 %tobool2777, i32 1, i32 0
  %tobool2779 = icmp ne i32 %cond2778, 0
  %2174 = zext i1 %tobool2779 to i64
  %cond2780 = select i1 %tobool2779, i32 1, i32 0
  %2175 = load i64, i64* %offset2761, align 8
  %2176 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2781 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2176, i32 0, i32 2
  %2177 = load i8*, i8** %precomp2781, align 8
  %2178 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82782 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2178, i32 0, i32 25
  %2179 = load i32, i32* %utf82782, align 8
  %tobool2783 = icmp ne i32 %2179, 0
  %2180 = zext i1 %tobool2783 to i64
  %cond2784 = select i1 %tobool2783, i32 1, i32 0
  %tobool2785 = icmp ne i32 %cond2784, 0
  %2181 = zext i1 %tobool2785 to i64
  %cond2786 = select i1 %tobool2785, i32 1, i32 0
  %2182 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2787 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2182, i32 0, i32 7
  %2183 = load i8*, i8** %end2787, align 8
  %2184 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2788 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2184, i32 0, i32 2
  %2185 = load i8*, i8** %precomp2788, align 8
  %sub.ptr.lhs.cast2789 = ptrtoint i8* %2183 to i64
  %sub.ptr.rhs.cast2790 = ptrtoint i8* %2185 to i64
  %sub.ptr.sub2791 = sub i64 %sub.ptr.lhs.cast2789, %sub.ptr.rhs.cast2790
  %2186 = load i64, i64* %offset2761, align 8
  %sub2792 = sub nsw i64 %sub.ptr.sub2791, %2186
  %2187 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2793 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2187, i32 0, i32 2
  %2188 = load i8*, i8** %precomp2793, align 8
  %2189 = load i64, i64* %offset2761, align 8
  %add.ptr2794 = getelementptr inbounds i8, i8* %2188, i64 %2189
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.266, i64 0, i64 0), i32 %cond2780, i64 %2175, i8* %2177, i32 %cond2786, i64 %sub2792, i8* %add.ptr2794)
  br label %do.end2795

do.end2795:                                       ; preds = %cond.end2770
  br label %do.end2796

do.end2796:                                       ; preds = %do.end2795
  br label %if.end2824

if.else2797:                                      ; preds = %if.then2744
  br label %do.body2798

do.body2798:                                      ; preds = %if.else2797
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses2799, align 8
  %2190 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2801 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2190, i32 0, i32 7
  %2191 = load i8*, i8** %end2801, align 8
  %2192 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2802 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2192, i32 0, i32 2
  %2193 = load i8*, i8** %precomp2802, align 8
  %sub.ptr.lhs.cast2803 = ptrtoint i8* %2191 to i64
  %sub.ptr.rhs.cast2804 = ptrtoint i8* %2193 to i64
  %sub.ptr.sub2805 = sub i64 %sub.ptr.lhs.cast2803, %sub.ptr.rhs.cast2804
  store i64 %sub.ptr.sub2805, i64* %len2800, align 8
  %2194 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2806 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2194, i32 0, i32 12
  %2195 = load %struct.regnode*, %struct.regnode** %emit2806, align 8
  %2196 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2807 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2196, i32 0, i32 13
  %2197 = bitcast %struct.regnode_ssc* %emit_dummy2807 to %struct.regnode*
  %cmp2808 = icmp eq %struct.regnode* %2195, %2197
  br i1 %cmp2808, label %if.end2812, label %if.then2810

if.then2810:                                      ; preds = %do.body2798
  %2198 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv2811 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2198, i32 0, i32 3
  %2199 = load %struct.p5rx*, %struct.p5rx** %rx_sv2811, align 8
  %2200 = bitcast %struct.p5rx* %2199 to i8*
  %2201 = bitcast i8* %2200 to %struct.sv*
  %2202 = bitcast %struct.sv* %2201 to i8*
  call void @Perl_save_pushptr(i8* %2202, i32 11)
  br label %if.end2812

if.end2812:                                       ; preds = %if.then2810, %do.body2798
  %2203 = load i64, i64* %len2800, align 8
  %cmp2813 = icmp sgt i64 %2203, 127
  br i1 %cmp2813, label %if.then2815, label %if.end2816

if.then2815:                                      ; preds = %if.end2812
  store i64 117, i64* %len2800, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses2799, align 8
  br label %if.end2816

if.end2816:                                       ; preds = %if.then2815, %if.end2812
  %2204 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82817 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2204, i32 0, i32 25
  %2205 = load i32, i32* %utf82817, align 8
  %tobool2818 = icmp ne i32 %2205, 0
  %2206 = zext i1 %tobool2818 to i64
  %cond2819 = select i1 %tobool2818, i32 1, i32 0
  %tobool2820 = icmp ne i32 %cond2819, 0
  %2207 = zext i1 %tobool2820 to i64
  %cond2821 = select i1 %tobool2820, i32 1, i32 0
  %2208 = load i64, i64* %len2800, align 8
  %2209 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2822 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2209, i32 0, i32 2
  %2210 = load i8*, i8** %precomp2822, align 8
  %2211 = load i8*, i8** %ellipses2799, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.267, i64 0, i64 0), i32 %cond2821, i64 %2208, i8* %2210, i8* %2211)
  br label %do.end2823

do.end2823:                                       ; preds = %if.end2816
  br label %if.end2824

if.end2824:                                       ; preds = %do.end2823, %do.end2796
  br label %if.end2825

if.end2825:                                       ; preds = %if.end2824, %land.lhs.true2739, %if.else2737
  br label %if.end2826

if.end2826:                                       ; preds = %if.end2825, %if.end2736
  %2212 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %in_lookbehind2827 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2212, i32 0, i32 33
  %2213 = load i32, i32* %in_lookbehind2827, align 4
  %tobool2828 = icmp ne i32 %2213, 0
  br i1 %tobool2828, label %if.then2829, label %if.end2831

if.then2829:                                      ; preds = %if.end2826
  %2214 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %in_lookbehind2830 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2214, i32 0, i32 33
  %2215 = load i32, i32* %in_lookbehind2830, align 4
  %dec = add nsw i32 %2215, -1
  store i32 %dec, i32* %in_lookbehind2830, align 4
  br label %if.end2831

if.end2831:                                       ; preds = %if.then2829, %if.end2826
  %2216 = load i32, i32* %after_freeze, align 4
  %2217 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar2832 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2217, i32 0, i32 18
  %2218 = load i32, i32* %npar2832, align 8
  %cmp2833 = icmp sgt i32 %2216, %2218
  br i1 %cmp2833, label %if.then2835, label %if.end2837

if.then2835:                                      ; preds = %if.end2831
  %2219 = load i32, i32* %after_freeze, align 4
  %2220 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar2836 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2220, i32 0, i32 18
  store i32 %2219, i32* %npar2836, align 8
  br label %if.end2837

if.end2837:                                       ; preds = %if.then2835, %if.end2831
  %2221 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %2221, %struct.regnode** %retval, align 8
  br label %return

return:                                           ; preds = %if.end2837, %if.then2481, %if.then2363, %if.end2311, %sw.bb2250, %if.end2183, %if.then2032, %if.then1934, %if.then1644, %if.end1599, %if.end1597, %if.end1373, %if.end1014, %if.then936, %cond.end662, %if.end481
  %2222 = load %struct.regnode*, %struct.regnode** %retval, align 8
  ret %struct.regnode* %2222
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i8* @get_regex_charset_name(i32 %flags, i64* %lenp) #0 {
entry:
  %retval = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %lenp.addr = alloca i64*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i64* %lenp, i64** %lenp.addr, align 8
  %0 = load i64*, i64** %lenp.addr, align 8
  store i64 1, i64* %0, align 8
  %1 = load i32, i32* %flags.addr, align 4
  %call = call i32 @get_regex_charset(i32 %1)
  switch i32 %call, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
    i32 4, label %sw.bb4
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.209, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.210, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.211, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb3:                                           ; preds = %entry
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.212, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb4:                                           ; preds = %entry
  %2 = load i64*, i64** %lenp.addr, align 8
  store i64 2, i64* %2, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.213, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.epilog:                                        ; preds = %entry
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.214, i64 0, i64 0), i8** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %3 = load i8*, i8** %retval, align 8
  ret i8* %3
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i8* @Perl_safesyscalloc(i64, i64) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_dec(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rc = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end6

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end6

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  store i32 %2, i32* %rc, align 4
  %3 = load i32, i32* %rc, align 4
  %cmp1 = icmp ugt i32 %3, 1
  br i1 %cmp1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %if.then
  br i1 true, label %if.then4, label %if.else

cond.false3:                                      ; preds = %if.then
  br i1 false, label %if.then4, label %if.else

if.then4:                                         ; preds = %cond.false3, %cond.true2
  %4 = load i32, i32* %rc, align 4
  %sub = sub i32 %4, 1
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt5 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 1
  store i32 %sub, i32* %sv_refcnt5, align 8
  br label %if.end

if.else:                                          ; preds = %cond.false3, %cond.true2
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %7 = load i32, i32* %rc, align 4
  call void @Perl_sv_free2(%struct.sv* %6, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  br label %if.end6

if.end6:                                          ; preds = %if.end, %cond.false, %cond.true
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.regnode* @Perl_regnext(%struct.regnode* %p) #0 {
entry:
  %retval = alloca %struct.regnode*, align 8
  %p.addr = alloca %struct.regnode*, align 8
  %offset = alloca i32, align 4
  store %struct.regnode* %p, %struct.regnode** %p.addr, align 8
  %0 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %tobool = icmp ne %struct.regnode* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %1, i32 0, i32 1
  %2 = load i8, i8* %type, align 1
  %conv = zext i8 %2 to i32
  %cmp = icmp sgt i32 %conv, 93
  br i1 %cmp, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %3 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %type3 = getelementptr inbounds %struct.regnode, %struct.regnode* %3, i32 0, i32 1
  %4 = load i8, i8* %type3, align 1
  %conv4 = zext i8 %4 to i32
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.204, i64 0, i64 0), i32 %conv4, i32 93)
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %5 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %type6 = getelementptr inbounds %struct.regnode, %struct.regnode* %5, i32 0, i32 1
  %6 = load i8, i8* %type6, align 1
  %idxprom = zext i8 %6 to i64
  %arrayidx = getelementptr inbounds [94 x i8], [94 x i8]* bitcast (<{ [72 x i8], [22 x i8] }>* @reg_off_by_arg to [94 x i8]*), i64 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %conv7 = sext i8 %7 to i32
  %tobool8 = icmp ne i32 %conv7, 0
  br i1 %tobool8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end5
  %8 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %9 = bitcast %struct.regnode* %8 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %9, i32 0, i32 3
  %10 = load i32, i32* %arg1, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end5
  %11 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %11, i32 0, i32 2
  %12 = load i16, i16* %next_off, align 2
  %conv9 = zext i16 %12 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %10, %cond.true ], [ %conv9, %cond.false ]
  store i32 %cond, i32* %offset, align 4
  %13 = load i32, i32* %offset, align 4
  %cmp10 = icmp eq i32 %13, 0
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %cond.end
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end13:                                         ; preds = %cond.end
  %14 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  %15 = load i32, i32* %offset, align 4
  %idx.ext = sext i32 %15 to i64
  %add.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %14, i64 %idx.ext
  store %struct.regnode* %add.ptr, %struct.regnode** %retval, align 8
  br label %return

return:                                           ; preds = %if.end13, %if.then12, %if.then
  %16 = load %struct.regnode*, %struct.regnode** %retval, align 8
  ret %struct.regnode* %16
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.regnode* @S_construct_ahocorasick_from_trie(%struct.RExC_state_t* %pRExC_state, %struct.regnode* %source, i32 %depth) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %source.addr = alloca %struct.regnode*, align 8
  %depth.addr = alloca i32, align 4
  %trie_offset = alloca i32, align 4
  %trie = alloca %struct._reg_trie_data*, align 8
  %q = alloca i32*, align 8
  %ucharcount = alloca i32, align 4
  %numstates = alloca i32, align 4
  %ubound = alloca i32, align 4
  %q_read = alloca i32, align 4
  %q_write = alloca i32, align 4
  %charid = alloca i32, align 4
  %base = alloca i32, align 4
  %fail = alloca i32*, align 8
  %aho = alloca %struct._reg_ac_data*, align 8
  %data_slot = alloca i32, align 4
  %stclass = alloca %struct.regnode*, align 8
  %op = alloca %struct.regnode_1*, align 8
  %op7 = alloca %struct.regnode_charclass*, align 8
  %newstate = alloca i32, align 4
  %cur = alloca i32, align 4
  %ch_state = alloca i32, align 4
  %fail_state = alloca i32, align 4
  %fail_base = alloca i32, align 4
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode* %source, %struct.regnode** %source.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load %struct.regnode*, %struct.regnode** %source.addr, align 8
  %1 = bitcast %struct.regnode* %0 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %1, i32 0, i32 3
  %2 = load i32, i32* %arg1, align 4
  store i32 %2, i32* %trie_offset, align 4
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %3, i32 0, i32 5
  %4 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi, align 8
  %data = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %4, i32 0, i32 3
  %5 = load %struct.reg_data*, %struct.reg_data** %data, align 8
  %data1 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %5, i32 0, i32 2
  %6 = load i32, i32* %trie_offset, align 4
  %idxprom = zext i32 %6 to i64
  %arrayidx = getelementptr inbounds [1 x i8*], [1 x i8*]* %data1, i64 0, i64 %idxprom
  %7 = load i8*, i8** %arrayidx, align 8
  %8 = bitcast i8* %7 to %struct._reg_trie_data*
  store %struct._reg_trie_data* %8, %struct._reg_trie_data** %trie, align 8
  %9 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %9, i32 0, i32 8
  %10 = load i16, i16* %uniquecharcount, align 8
  %conv = zext i16 %10 to i32
  store i32 %conv, i32* %ucharcount, align 4
  %11 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %statecount = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %11, i32 0, i32 13
  %12 = load i32, i32* %statecount, align 4
  store i32 %12, i32* %numstates, align 4
  %13 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %lasttrans = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %13, i32 0, i32 1
  %14 = load i32, i32* %lasttrans, align 4
  %15 = load i32, i32* %ucharcount, align 4
  %add = add i32 %14, %15
  store i32 %add, i32* %ubound, align 4
  store i32 0, i32* %q_read, align 4
  store i32 0, i32* %q_write, align 4
  %16 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %16, i32 0, i32 3
  %17 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states, align 8
  %arrayidx2 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %17, i64 1
  %trans = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2, i32 0, i32 1
  %base3 = bitcast %union.anon.21* %trans to i32*
  %18 = load i32, i32* %base3, align 8
  store i32 %18, i32* %base, align 4
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call = call i32 @S_add_data(%struct.RExC_state_t* %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.215, i64 0, i64 0), i32 1)
  store i32 %call, i32* %data_slot, align 4
  %20 = load i32, i32* %depth.addr, align 4
  %21 = load %struct.regnode*, %struct.regnode** %source.addr, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %21, i32 0, i32 1
  %22 = load i8, i8* %type, align 1
  %conv4 = zext i8 %22 to i32
  %cmp = icmp eq i32 %conv4, 72
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call6 = call noalias i8* @calloc(i64 1, i64 8) #5
  %23 = bitcast i8* %call6 to %struct.regnode_1*
  store %struct.regnode_1* %23, %struct.regnode_1** %op, align 8
  %24 = load %struct.regnode_1*, %struct.regnode_1** %op, align 8
  %25 = load %struct.regnode*, %struct.regnode** %source.addr, align 8
  %26 = bitcast %struct.regnode* %25 to %struct.regnode_1*
  %27 = bitcast %struct.regnode_1* %24 to i8*
  %28 = bitcast %struct.regnode_1* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %27, i8* align 4 %28, i64 8, i1 false)
  %29 = load %struct.regnode_1*, %struct.regnode_1** %op, align 8
  %30 = bitcast %struct.regnode_1* %29 to %struct.regnode*
  store %struct.regnode* %30, %struct.regnode** %stclass, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %call8 = call noalias i8* @calloc(i64 1, i64 40) #5
  %31 = bitcast i8* %call8 to %struct.regnode_charclass*
  store %struct.regnode_charclass* %31, %struct.regnode_charclass** %op7, align 8
  %32 = load %struct.regnode_charclass*, %struct.regnode_charclass** %op7, align 8
  %33 = load %struct.regnode*, %struct.regnode** %source.addr, align 8
  %34 = bitcast %struct.regnode* %33 to %struct.regnode_charclass*
  %35 = bitcast %struct.regnode_charclass* %32 to i8*
  %36 = bitcast %struct.regnode_charclass* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %35, i8* align 4 %36, i64 40, i1 false)
  %37 = load %struct.regnode_charclass*, %struct.regnode_charclass** %op7, align 8
  %38 = bitcast %struct.regnode_charclass* %37 to %struct.regnode*
  store %struct.regnode* %38, %struct.regnode** %stclass, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %39 = load %struct.regnode*, %struct.regnode** %stclass, align 8
  %type9 = getelementptr inbounds %struct.regnode, %struct.regnode* %39, i32 0, i32 1
  %40 = load i8, i8* %type9, align 1
  %conv10 = zext i8 %40 to i32
  %add11 = add nsw i32 %conv10, 2
  %conv12 = trunc i32 %add11 to i8
  store i8 %conv12, i8* %type9, align 1
  %41 = load i32, i32* %data_slot, align 4
  %42 = load %struct.regnode*, %struct.regnode** %stclass, align 8
  %43 = bitcast %struct.regnode* %42 to %struct.regnode_1*
  %arg113 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %43, i32 0, i32 3
  store i32 %41, i32* %arg113, align 4
  %call14 = call noalias i8* @calloc(i64 1, i64 24) #5
  %44 = bitcast i8* %call14 to %struct._reg_ac_data*
  store %struct._reg_ac_data* %44, %struct._reg_ac_data** %aho, align 8
  %45 = load %struct._reg_ac_data*, %struct._reg_ac_data** %aho, align 8
  %46 = bitcast %struct._reg_ac_data* %45 to i8*
  %47 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi15 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %47, i32 0, i32 5
  %48 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi15, align 8
  %data16 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %48, i32 0, i32 3
  %49 = load %struct.reg_data*, %struct.reg_data** %data16, align 8
  %data17 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %49, i32 0, i32 2
  %50 = load i32, i32* %data_slot, align 4
  %idxprom18 = zext i32 %50 to i64
  %arrayidx19 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data17, i64 0, i64 %idxprom18
  store i8* %46, i8** %arrayidx19, align 8
  %51 = load i32, i32* %trie_offset, align 4
  %52 = load %struct._reg_ac_data*, %struct._reg_ac_data** %aho, align 8
  %trie20 = getelementptr inbounds %struct._reg_ac_data, %struct._reg_ac_data* %52, i32 0, i32 1
  store i32 %51, i32* %trie20, align 4
  %53 = load i32, i32* %numstates, align 4
  %conv21 = zext i32 %53 to i64
  %mul = mul i64 %conv21, 16
  %call22 = call noalias i8* @malloc(i64 %mul) #5
  %54 = bitcast i8* %call22 to %struct._reg_trie_state*
  %55 = load %struct._reg_ac_data*, %struct._reg_ac_data** %aho, align 8
  %states23 = getelementptr inbounds %struct._reg_ac_data, %struct._reg_ac_data* %55, i32 0, i32 3
  store %struct._reg_trie_state* %54, %struct._reg_trie_state** %states23, align 8
  %56 = load %struct._reg_ac_data*, %struct._reg_ac_data** %aho, align 8
  %states24 = getelementptr inbounds %struct._reg_ac_data, %struct._reg_ac_data* %56, i32 0, i32 3
  %57 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states24, align 8
  %58 = bitcast %struct._reg_trie_state* %57 to i8*
  %59 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states25 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %59, i32 0, i32 3
  %60 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states25, align 8
  %61 = bitcast %struct._reg_trie_state* %60 to i8*
  %62 = load i32, i32* %numstates, align 4
  %conv26 = zext i32 %62 to i64
  %mul27 = mul i64 %conv26, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %61, i64 %mul27, i1 false)
  %63 = load i32, i32* %numstates, align 4
  %conv28 = zext i32 %63 to i64
  %call29 = call i8* @Perl_safesyscalloc(i64 %conv28, i64 4)
  %64 = bitcast i8* %call29 to i32*
  store i32* %64, i32** %q, align 8
  %65 = load i32, i32* %numstates, align 4
  %conv30 = zext i32 %65 to i64
  %call31 = call noalias i8* @calloc(i64 %conv30, i64 4) #5
  %66 = bitcast i8* %call31 to i32*
  %67 = load %struct._reg_ac_data*, %struct._reg_ac_data** %aho, align 8
  %fail32 = getelementptr inbounds %struct._reg_ac_data, %struct._reg_ac_data* %67, i32 0, i32 2
  store i32* %66, i32** %fail32, align 8
  %68 = load %struct._reg_ac_data*, %struct._reg_ac_data** %aho, align 8
  %refcount = getelementptr inbounds %struct._reg_ac_data, %struct._reg_ac_data* %68, i32 0, i32 0
  store i32 1, i32* %refcount, align 8
  %69 = load %struct._reg_ac_data*, %struct._reg_ac_data** %aho, align 8
  %fail33 = getelementptr inbounds %struct._reg_ac_data, %struct._reg_ac_data* %69, i32 0, i32 2
  %70 = load i32*, i32** %fail33, align 8
  store i32* %70, i32** %fail, align 8
  %71 = load i32*, i32** %fail, align 8
  %arrayidx34 = getelementptr inbounds i32, i32* %71, i64 1
  store i32 1, i32* %arrayidx34, align 4
  %72 = load i32*, i32** %fail, align 8
  %arrayidx35 = getelementptr inbounds i32, i32* %72, i64 0
  store i32 1, i32* %arrayidx35, align 4
  store i32 0, i32* %charid, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %73 = load i32, i32* %charid, align 4
  %74 = load i32, i32* %ucharcount, align 4
  %cmp36 = icmp ult i32 %73, %74
  br i1 %cmp36, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %75 = load i32, i32* %base, align 4
  %76 = load i32, i32* %charid, align 4
  %add38 = add i32 %75, %76
  %77 = load i32, i32* %ucharcount, align 4
  %cmp39 = icmp uge i32 %add38, %77
  br i1 %cmp39, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %78 = load i32, i32* %base, align 4
  %79 = load i32, i32* %charid, align 4
  %add41 = add i32 %78, %79
  %80 = load i32, i32* %ubound, align 4
  %cmp42 = icmp ult i32 %add41, %80
  br i1 %cmp42, label %land.lhs.true44, label %cond.false

land.lhs.true44:                                  ; preds = %land.lhs.true
  %81 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans45 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %81, i32 0, i32 4
  %82 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans45, align 8
  %83 = load i32, i32* %base, align 4
  %84 = load i32, i32* %ucharcount, align 4
  %sub = sub i32 %83, %84
  %85 = load i32, i32* %charid, align 4
  %add46 = add i32 %sub, %85
  %idxprom47 = zext i32 %add46 to i64
  %arrayidx48 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %82, i64 %idxprom47
  %check = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx48, i32 0, i32 1
  %86 = load i32, i32* %check, align 4
  %cmp49 = icmp eq i32 1, %86
  br i1 %cmp49, label %land.lhs.true51, label %cond.false

land.lhs.true51:                                  ; preds = %land.lhs.true44
  %87 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans52 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %87, i32 0, i32 4
  %88 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans52, align 8
  %89 = load i32, i32* %base, align 4
  %90 = load i32, i32* %ucharcount, align 4
  %sub53 = sub i32 %89, %90
  %91 = load i32, i32* %charid, align 4
  %add54 = add i32 %sub53, %91
  %idxprom55 = zext i32 %add54 to i64
  %arrayidx56 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %88, i64 %idxprom55
  %next = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx56, i32 0, i32 0
  %92 = load i32, i32* %next, align 4
  %tobool = icmp ne i32 %92, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true51
  %93 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans57 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %93, i32 0, i32 4
  %94 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans57, align 8
  %95 = load i32, i32* %base, align 4
  %96 = load i32, i32* %ucharcount, align 4
  %sub58 = sub i32 %95, %96
  %97 = load i32, i32* %charid, align 4
  %add59 = add i32 %sub58, %97
  %idxprom60 = zext i32 %add59 to i64
  %arrayidx61 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %94, i64 %idxprom60
  %next62 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx61, i32 0, i32 0
  %98 = load i32, i32* %next62, align 4
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true51, %land.lhs.true44, %land.lhs.true, %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %98, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %newstate, align 4
  %99 = load i32, i32* %newstate, align 4
  %tobool63 = icmp ne i32 %99, 0
  br i1 %tobool63, label %if.then64, label %if.end71

if.then64:                                        ; preds = %cond.end
  %100 = load i32, i32* %newstate, align 4
  %101 = load i32*, i32** %q, align 8
  %102 = load i32, i32* %q_write, align 4
  %idxprom65 = zext i32 %102 to i64
  %arrayidx66 = getelementptr inbounds i32, i32* %101, i64 %idxprom65
  store i32 %100, i32* %arrayidx66, align 4
  %103 = load i32*, i32** %fail, align 8
  %104 = load i32*, i32** %q, align 8
  %105 = load i32, i32* %q_write, align 4
  %inc = add i32 %105, 1
  store i32 %inc, i32* %q_write, align 4
  %idxprom67 = zext i32 %105 to i64
  %arrayidx68 = getelementptr inbounds i32, i32* %104, i64 %idxprom67
  %106 = load i32, i32* %arrayidx68, align 4
  %idxprom69 = zext i32 %106 to i64
  %arrayidx70 = getelementptr inbounds i32, i32* %103, i64 %idxprom69
  store i32 1, i32* %arrayidx70, align 4
  br label %if.end71

if.end71:                                         ; preds = %if.then64, %cond.end
  br label %for.inc

for.inc:                                          ; preds = %if.end71
  %107 = load i32, i32* %charid, align 4
  %inc72 = add i32 %107, 1
  store i32 %inc72, i32* %charid, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %for.end238, %for.end
  %108 = load i32, i32* %q_read, align 4
  %109 = load i32, i32* %q_write, align 4
  %cmp73 = icmp ult i32 %108, %109
  br i1 %cmp73, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %110 = load i32*, i32** %q, align 8
  %111 = load i32, i32* %q_read, align 4
  %inc75 = add i32 %111, 1
  store i32 %inc75, i32* %q_read, align 4
  %112 = load i32, i32* %numstates, align 4
  %rem = urem i32 %111, %112
  %idxprom76 = zext i32 %rem to i64
  %arrayidx77 = getelementptr inbounds i32, i32* %110, i64 %idxprom76
  %113 = load i32, i32* %arrayidx77, align 4
  store i32 %113, i32* %cur, align 4
  %114 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states78 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %114, i32 0, i32 3
  %115 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states78, align 8
  %116 = load i32, i32* %cur, align 4
  %idxprom79 = zext i32 %116 to i64
  %arrayidx80 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %115, i64 %idxprom79
  %trans81 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx80, i32 0, i32 1
  %base82 = bitcast %union.anon.21* %trans81 to i32*
  %117 = load i32, i32* %base82, align 8
  store i32 %117, i32* %base, align 4
  store i32 0, i32* %charid, align 4
  br label %for.cond83

for.cond83:                                       ; preds = %for.inc236, %while.body
  %118 = load i32, i32* %charid, align 4
  %119 = load i32, i32* %ucharcount, align 4
  %cmp84 = icmp ult i32 %118, %119
  br i1 %cmp84, label %for.body86, label %for.end238

for.body86:                                       ; preds = %for.cond83
  %120 = load i32, i32* %base, align 4
  %121 = load i32, i32* %charid, align 4
  %add87 = add i32 %120, %121
  %122 = load i32, i32* %ucharcount, align 4
  %cmp88 = icmp uge i32 %add87, %122
  br i1 %cmp88, label %land.lhs.true90, label %cond.false118

land.lhs.true90:                                  ; preds = %for.body86
  %123 = load i32, i32* %base, align 4
  %124 = load i32, i32* %charid, align 4
  %add91 = add i32 %123, %124
  %125 = load i32, i32* %ubound, align 4
  %cmp92 = icmp ult i32 %add91, %125
  br i1 %cmp92, label %land.lhs.true94, label %cond.false118

land.lhs.true94:                                  ; preds = %land.lhs.true90
  %126 = load i32, i32* %cur, align 4
  %127 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans95 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %127, i32 0, i32 4
  %128 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans95, align 8
  %129 = load i32, i32* %base, align 4
  %130 = load i32, i32* %ucharcount, align 4
  %sub96 = sub i32 %129, %130
  %131 = load i32, i32* %charid, align 4
  %add97 = add i32 %sub96, %131
  %idxprom98 = zext i32 %add97 to i64
  %arrayidx99 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %128, i64 %idxprom98
  %check100 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx99, i32 0, i32 1
  %132 = load i32, i32* %check100, align 4
  %cmp101 = icmp eq i32 %126, %132
  br i1 %cmp101, label %land.lhs.true103, label %cond.false118

land.lhs.true103:                                 ; preds = %land.lhs.true94
  %133 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans104 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %133, i32 0, i32 4
  %134 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans104, align 8
  %135 = load i32, i32* %base, align 4
  %136 = load i32, i32* %ucharcount, align 4
  %sub105 = sub i32 %135, %136
  %137 = load i32, i32* %charid, align 4
  %add106 = add i32 %sub105, %137
  %idxprom107 = zext i32 %add106 to i64
  %arrayidx108 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %134, i64 %idxprom107
  %next109 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx108, i32 0, i32 0
  %138 = load i32, i32* %next109, align 4
  %tobool110 = icmp ne i32 %138, 0
  br i1 %tobool110, label %cond.true111, label %cond.false118

cond.true111:                                     ; preds = %land.lhs.true103
  %139 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans112 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %139, i32 0, i32 4
  %140 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans112, align 8
  %141 = load i32, i32* %base, align 4
  %142 = load i32, i32* %ucharcount, align 4
  %sub113 = sub i32 %141, %142
  %143 = load i32, i32* %charid, align 4
  %add114 = add i32 %sub113, %143
  %idxprom115 = zext i32 %add114 to i64
  %arrayidx116 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %140, i64 %idxprom115
  %next117 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx116, i32 0, i32 0
  %144 = load i32, i32* %next117, align 4
  br label %cond.end122

cond.false118:                                    ; preds = %land.lhs.true103, %land.lhs.true94, %land.lhs.true90, %for.body86
  %145 = load i32, i32* %cur, align 4
  %cmp119 = icmp eq i32 %145, 1
  %146 = zext i1 %cmp119 to i64
  %cond121 = select i1 %cmp119, i32 1, i32 0
  br label %cond.end122

cond.end122:                                      ; preds = %cond.false118, %cond.true111
  %cond123 = phi i32 [ %144, %cond.true111 ], [ %cond121, %cond.false118 ]
  store i32 %cond123, i32* %ch_state, align 4
  %147 = load i32, i32* %ch_state, align 4
  %tobool124 = icmp ne i32 %147, 0
  br i1 %tobool124, label %if.then125, label %if.end235

if.then125:                                       ; preds = %cond.end122
  %148 = load i32, i32* %cur, align 4
  store i32 %148, i32* %fail_state, align 4
  br label %do.body

do.body:                                          ; preds = %cond.end168, %if.then125
  %149 = load i32*, i32** %fail, align 8
  %150 = load i32, i32* %fail_state, align 4
  %idxprom126 = zext i32 %150 to i64
  %arrayidx127 = getelementptr inbounds i32, i32* %149, i64 %idxprom126
  %151 = load i32, i32* %arrayidx127, align 4
  store i32 %151, i32* %fail_state, align 4
  %152 = load %struct._reg_ac_data*, %struct._reg_ac_data** %aho, align 8
  %states128 = getelementptr inbounds %struct._reg_ac_data, %struct._reg_ac_data* %152, i32 0, i32 3
  %153 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states128, align 8
  %154 = load i32, i32* %fail_state, align 4
  %idxprom129 = zext i32 %154 to i64
  %arrayidx130 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %153, i64 %idxprom129
  %trans131 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx130, i32 0, i32 1
  %base132 = bitcast %union.anon.21* %trans131 to i32*
  %155 = load i32, i32* %base132, align 8
  store i32 %155, i32* %fail_base, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %156 = load i32, i32* %fail_base, align 4
  %157 = load i32, i32* %charid, align 4
  %add133 = add i32 %156, %157
  %158 = load i32, i32* %ucharcount, align 4
  %cmp134 = icmp uge i32 %add133, %158
  br i1 %cmp134, label %land.lhs.true136, label %cond.false164

land.lhs.true136:                                 ; preds = %do.cond
  %159 = load i32, i32* %fail_base, align 4
  %160 = load i32, i32* %charid, align 4
  %add137 = add i32 %159, %160
  %161 = load i32, i32* %ubound, align 4
  %cmp138 = icmp ult i32 %add137, %161
  br i1 %cmp138, label %land.lhs.true140, label %cond.false164

land.lhs.true140:                                 ; preds = %land.lhs.true136
  %162 = load i32, i32* %fail_state, align 4
  %163 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans141 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %163, i32 0, i32 4
  %164 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans141, align 8
  %165 = load i32, i32* %fail_base, align 4
  %166 = load i32, i32* %ucharcount, align 4
  %sub142 = sub i32 %165, %166
  %167 = load i32, i32* %charid, align 4
  %add143 = add i32 %sub142, %167
  %idxprom144 = zext i32 %add143 to i64
  %arrayidx145 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %164, i64 %idxprom144
  %check146 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx145, i32 0, i32 1
  %168 = load i32, i32* %check146, align 4
  %cmp147 = icmp eq i32 %162, %168
  br i1 %cmp147, label %land.lhs.true149, label %cond.false164

land.lhs.true149:                                 ; preds = %land.lhs.true140
  %169 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans150 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %169, i32 0, i32 4
  %170 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans150, align 8
  %171 = load i32, i32* %fail_base, align 4
  %172 = load i32, i32* %ucharcount, align 4
  %sub151 = sub i32 %171, %172
  %173 = load i32, i32* %charid, align 4
  %add152 = add i32 %sub151, %173
  %idxprom153 = zext i32 %add152 to i64
  %arrayidx154 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %170, i64 %idxprom153
  %next155 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx154, i32 0, i32 0
  %174 = load i32, i32* %next155, align 4
  %tobool156 = icmp ne i32 %174, 0
  br i1 %tobool156, label %cond.true157, label %cond.false164

cond.true157:                                     ; preds = %land.lhs.true149
  %175 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans158 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %175, i32 0, i32 4
  %176 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans158, align 8
  %177 = load i32, i32* %fail_base, align 4
  %178 = load i32, i32* %ucharcount, align 4
  %sub159 = sub i32 %177, %178
  %179 = load i32, i32* %charid, align 4
  %add160 = add i32 %sub159, %179
  %idxprom161 = zext i32 %add160 to i64
  %arrayidx162 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %176, i64 %idxprom161
  %next163 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx162, i32 0, i32 0
  %180 = load i32, i32* %next163, align 4
  br label %cond.end168

cond.false164:                                    ; preds = %land.lhs.true149, %land.lhs.true140, %land.lhs.true136, %do.cond
  %181 = load i32, i32* %fail_state, align 4
  %cmp165 = icmp eq i32 %181, 1
  %182 = zext i1 %cmp165 to i64
  %cond167 = select i1 %cmp165, i32 1, i32 0
  br label %cond.end168

cond.end168:                                      ; preds = %cond.false164, %cond.true157
  %cond169 = phi i32 [ %180, %cond.true157 ], [ %cond167, %cond.false164 ]
  %tobool170 = icmp ne i32 %cond169, 0
  %lnot = xor i1 %tobool170, true
  br i1 %lnot, label %do.body, label %do.end

do.end:                                           ; preds = %cond.end168
  %183 = load i32, i32* %fail_base, align 4
  %184 = load i32, i32* %charid, align 4
  %add171 = add i32 %183, %184
  %185 = load i32, i32* %ucharcount, align 4
  %cmp172 = icmp uge i32 %add171, %185
  br i1 %cmp172, label %land.lhs.true174, label %cond.false202

land.lhs.true174:                                 ; preds = %do.end
  %186 = load i32, i32* %fail_base, align 4
  %187 = load i32, i32* %charid, align 4
  %add175 = add i32 %186, %187
  %188 = load i32, i32* %ubound, align 4
  %cmp176 = icmp ult i32 %add175, %188
  br i1 %cmp176, label %land.lhs.true178, label %cond.false202

land.lhs.true178:                                 ; preds = %land.lhs.true174
  %189 = load i32, i32* %fail_state, align 4
  %190 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans179 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %190, i32 0, i32 4
  %191 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans179, align 8
  %192 = load i32, i32* %fail_base, align 4
  %193 = load i32, i32* %ucharcount, align 4
  %sub180 = sub i32 %192, %193
  %194 = load i32, i32* %charid, align 4
  %add181 = add i32 %sub180, %194
  %idxprom182 = zext i32 %add181 to i64
  %arrayidx183 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %191, i64 %idxprom182
  %check184 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx183, i32 0, i32 1
  %195 = load i32, i32* %check184, align 4
  %cmp185 = icmp eq i32 %189, %195
  br i1 %cmp185, label %land.lhs.true187, label %cond.false202

land.lhs.true187:                                 ; preds = %land.lhs.true178
  %196 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans188 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %196, i32 0, i32 4
  %197 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans188, align 8
  %198 = load i32, i32* %fail_base, align 4
  %199 = load i32, i32* %ucharcount, align 4
  %sub189 = sub i32 %198, %199
  %200 = load i32, i32* %charid, align 4
  %add190 = add i32 %sub189, %200
  %idxprom191 = zext i32 %add190 to i64
  %arrayidx192 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %197, i64 %idxprom191
  %next193 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx192, i32 0, i32 0
  %201 = load i32, i32* %next193, align 4
  %tobool194 = icmp ne i32 %201, 0
  br i1 %tobool194, label %cond.true195, label %cond.false202

cond.true195:                                     ; preds = %land.lhs.true187
  %202 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans196 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %202, i32 0, i32 4
  %203 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans196, align 8
  %204 = load i32, i32* %fail_base, align 4
  %205 = load i32, i32* %ucharcount, align 4
  %sub197 = sub i32 %204, %205
  %206 = load i32, i32* %charid, align 4
  %add198 = add i32 %sub197, %206
  %idxprom199 = zext i32 %add198 to i64
  %arrayidx200 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %203, i64 %idxprom199
  %next201 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx200, i32 0, i32 0
  %207 = load i32, i32* %next201, align 4
  br label %cond.end206

cond.false202:                                    ; preds = %land.lhs.true187, %land.lhs.true178, %land.lhs.true174, %do.end
  %208 = load i32, i32* %fail_state, align 4
  %cmp203 = icmp eq i32 %208, 1
  %209 = zext i1 %cmp203 to i64
  %cond205 = select i1 %cmp203, i32 1, i32 0
  br label %cond.end206

cond.end206:                                      ; preds = %cond.false202, %cond.true195
  %cond207 = phi i32 [ %207, %cond.true195 ], [ %cond205, %cond.false202 ]
  store i32 %cond207, i32* %fail_state, align 4
  %210 = load i32, i32* %fail_state, align 4
  %211 = load i32*, i32** %fail, align 8
  %212 = load i32, i32* %ch_state, align 4
  %idxprom208 = zext i32 %212 to i64
  %arrayidx209 = getelementptr inbounds i32, i32* %211, i64 %idxprom208
  store i32 %210, i32* %arrayidx209, align 4
  %213 = load %struct._reg_ac_data*, %struct._reg_ac_data** %aho, align 8
  %states210 = getelementptr inbounds %struct._reg_ac_data, %struct._reg_ac_data* %213, i32 0, i32 3
  %214 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states210, align 8
  %215 = load i32, i32* %ch_state, align 4
  %idxprom211 = zext i32 %215 to i64
  %arrayidx212 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %214, i64 %idxprom211
  %wordnum = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx212, i32 0, i32 0
  %216 = load i16, i16* %wordnum, align 8
  %tobool213 = icmp ne i16 %216, 0
  br i1 %tobool213, label %if.end230, label %land.lhs.true214

land.lhs.true214:                                 ; preds = %cond.end206
  %217 = load %struct._reg_ac_data*, %struct._reg_ac_data** %aho, align 8
  %states215 = getelementptr inbounds %struct._reg_ac_data, %struct._reg_ac_data* %217, i32 0, i32 3
  %218 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states215, align 8
  %219 = load i32, i32* %fail_state, align 4
  %idxprom216 = zext i32 %219 to i64
  %arrayidx217 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %218, i64 %idxprom216
  %wordnum218 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx217, i32 0, i32 0
  %220 = load i16, i16* %wordnum218, align 8
  %conv219 = zext i16 %220 to i32
  %tobool220 = icmp ne i32 %conv219, 0
  br i1 %tobool220, label %if.then221, label %if.end230

if.then221:                                       ; preds = %land.lhs.true214
  %221 = load %struct._reg_ac_data*, %struct._reg_ac_data** %aho, align 8
  %states222 = getelementptr inbounds %struct._reg_ac_data, %struct._reg_ac_data* %221, i32 0, i32 3
  %222 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states222, align 8
  %223 = load i32, i32* %fail_state, align 4
  %idxprom223 = zext i32 %223 to i64
  %arrayidx224 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %222, i64 %idxprom223
  %wordnum225 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx224, i32 0, i32 0
  %224 = load i16, i16* %wordnum225, align 8
  %225 = load %struct._reg_ac_data*, %struct._reg_ac_data** %aho, align 8
  %states226 = getelementptr inbounds %struct._reg_ac_data, %struct._reg_ac_data* %225, i32 0, i32 3
  %226 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states226, align 8
  %227 = load i32, i32* %ch_state, align 4
  %idxprom227 = zext i32 %227 to i64
  %arrayidx228 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %226, i64 %idxprom227
  %wordnum229 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx228, i32 0, i32 0
  store i16 %224, i16* %wordnum229, align 8
  br label %if.end230

if.end230:                                        ; preds = %if.then221, %land.lhs.true214, %cond.end206
  %228 = load i32, i32* %ch_state, align 4
  %229 = load i32*, i32** %q, align 8
  %230 = load i32, i32* %q_write, align 4
  %inc231 = add i32 %230, 1
  store i32 %inc231, i32* %q_write, align 4
  %231 = load i32, i32* %numstates, align 4
  %rem232 = urem i32 %230, %231
  %idxprom233 = zext i32 %rem232 to i64
  %arrayidx234 = getelementptr inbounds i32, i32* %229, i64 %idxprom233
  store i32 %228, i32* %arrayidx234, align 4
  br label %if.end235

if.end235:                                        ; preds = %if.end230, %cond.end122
  br label %for.inc236

for.inc236:                                       ; preds = %if.end235
  %232 = load i32, i32* %charid, align 4
  %inc237 = add i32 %232, 1
  store i32 %inc237, i32* %charid, align 4
  br label %for.cond83

for.end238:                                       ; preds = %for.cond83
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %233 = load i32*, i32** %fail, align 8
  %arrayidx239 = getelementptr inbounds i32, i32* %233, i64 1
  store i32 0, i32* %arrayidx239, align 4
  %234 = load i32*, i32** %fail, align 8
  %arrayidx240 = getelementptr inbounds i32, i32* %234, i64 0
  store i32 0, i32* %arrayidx240, align 4
  %235 = load i32*, i32** %q, align 8
  %236 = bitcast i32* %235 to i8*
  call void @Perl_safesysfree(i8* %236)
  %237 = load %struct.regnode*, %struct.regnode** %stclass, align 8
  ret %struct.regnode* %237
}

declare dso_local %struct.sv* @Perl_newSVpvn(i8*, i64) #1

declare dso_local void @Perl_push_scope() #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_ssc_init(%struct.RExC_state_t* %pRExC_state, %struct.regnode_ssc* %ssc) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %ssc.addr = alloca %struct.regnode_ssc*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode_ssc* %ssc, %struct.regnode_ssc** %ssc.addr, align 8
  %0 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %1 = bitcast %struct.regnode_ssc* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 56, i1 false)
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %type = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %2, i32 0, i32 1
  store i8 19, i8* %type, align 1
  %3 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %next_off = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %3, i32 0, i32 2
  store i16 1, i16* %next_off, align 2
  br label %do.end

do.end:                                           ; preds = %do.body
  %4 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %5 = bitcast %struct.regnode_ssc* %4 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %5, i32 0, i32 3
  store i32 -1, i32* %arg1, align 4
  %6 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  call void @S_ssc_anything(%struct.regnode_ssc* %6)
  %7 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %contains_locale = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %7, i32 0, i32 34
  %8 = load i32, i32* %contains_locale, align 8
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  br label %do.body1

do.body1:                                         ; preds = %if.then
  %9 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %10 = bitcast %struct.regnode_ssc* %9 to %struct.regnode_charclass_class*
  %classflags = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %10, i32 0, i32 5
  store i32 536870911, i32* %classflags, align 4
  br label %do.end2

do.end2:                                          ; preds = %do.body1
  br label %if.end

if.else:                                          ; preds = %do.end
  br label %do.body3

do.body3:                                         ; preds = %if.else
  %11 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %12 = bitcast %struct.regnode_ssc* %11 to %struct.regnode_charclass_class*
  %classflags4 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %12, i32 0, i32 5
  store i32 0, i32* %classflags4, align 4
  br label %do.end5

do.end5:                                          ; preds = %do.body3
  br label %if.end

if.end:                                           ; preds = %do.end5, %do.end2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_study_chunk(%struct.RExC_state_t* %pRExC_state, %struct.regnode** %scanp, i64* %minlenp, i64* %deltap, %struct.regnode* %last, %struct.scan_data_t* %data, i32 %stopparen, i32 %recursed_depth, %struct.regnode_ssc* %and_withp, i32 %flags, i32 %depth) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %scanp.addr = alloca %struct.regnode**, align 8
  %minlenp.addr = alloca i64*, align 8
  %deltap.addr = alloca i64*, align 8
  %last.addr = alloca %struct.regnode*, align 8
  %data.addr = alloca %struct.scan_data_t*, align 8
  %stopparen.addr = alloca i32, align 4
  %recursed_depth.addr = alloca i32, align 4
  %and_withp.addr = alloca %struct.regnode_ssc*, align 8
  %flags.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %min = alloca i64, align 8
  %pars = alloca i32, align 4
  %code = alloca i32, align 4
  %scan = alloca %struct.regnode*, align 8
  %next = alloca %struct.regnode*, align 8
  %delta = alloca i64, align 8
  %is_inf = alloca i32, align 4
  %is_inf_internal = alloca i32, align 4
  %is_par = alloca i32, align 4
  %data_fake = alloca %struct.scan_data_t, align 8
  %re_trie_maxbuff = alloca %struct.sv*, align 8
  %first_non_open = alloca %struct.regnode*, align 8
  %stopmin = alloca i64, align 8
  %frame = alloca %struct.scan_frame*, align 8
  %min_subtract = alloca i64, align 8
  %unfolded_multi_char = alloca i8, align 1
  %max = alloca i32, align 4
  %off = alloca i32, align 4
  %noff = alloca i32, align 4
  %n = alloca %struct.regnode*, align 8
  %minlen = alloca i64, align 8
  %deltanext = alloca i64, align 8
  %fake_last_close = alloca i64, align 8
  %f = alloca i32, align 4
  %max1 = alloca i64, align 8
  %min1 = alloca i64, align 8
  %num = alloca i64, align 8
  %accum = alloca %struct.regnode_ssc, align 8
  %startbranch = alloca %struct.regnode*, align 8
  %deltanext147 = alloca i64, align 8
  %minnext = alloca i64, align 8
  %fake = alloca i64, align 8
  %f148 = alloca i32, align 4
  %this_class = alloca %struct.regnode_ssc, align 8
  %made = alloca i32, align 4
  %cur = alloca %struct.regnode*, align 8
  %first = alloca %struct.regnode*, align 8
  %last322 = alloca %struct.regnode*, align 8
  %tail = alloca %struct.regnode*, align 8
  %trietype = alloca i8, align 1
  %count = alloca i32, align 4
  %noper = alloca %struct.regnode*, align 8
  %noper_type = alloca i8, align 1
  %noper_trietype = alloca i8, align 1
  %noper_next = alloca %struct.regnode*, align 8
  %noper_next_type = alloca i8, align 1
  %noper_next_trietype = alloca i8, align 1
  %opt = alloca %struct.regnode*, align 8
  %paren = alloca i32, align 4
  %start = alloca %struct.regnode*, align 8
  %end = alloca %struct.regnode*, align 8
  %my_recursed_depth = alloca i32, align 4
  %newframe = alloca %struct.scan_frame*, align 8
  %l = alloca i64, align 8
  %uc = alloca i64, align 8
  %s = alloca i8*, align 8
  %sv = alloca %struct.sv*, align 8
  %mg = alloca %struct.magic*, align 8
  %l854 = alloca i64, align 8
  %s857 = alloca i8*, align 8
  %EXACTF_invlist = alloca %struct.sv*, align 8
  %mincount = alloca i64, align 8
  %maxcount = alloca i64, align 8
  %minnext946 = alloca i64, align 8
  %deltanext947 = alloca i64, align 8
  %pos_before = alloca i64, align 8
  %fl = alloca i32, align 4
  %f948 = alloca i32, align 4
  %oscan = alloca %struct.regnode*, align 8
  %this_class949 = alloca %struct.regnode_ssc, align 8
  %oclass = alloca %struct.regnode_ssc*, align 8
  %next_is_eval = alloca i32, align 4
  %lp = alloca i32, align 4
  %nxt = alloca %struct.regnode*, align 8
  %nxt1 = alloca %struct.regnode*, align 8
  %nxt1313 = alloca %struct.regnode*, align 8
  %nxt2 = alloca %struct.regnode*, align 8
  %nxt11339 = alloca %struct.regnode*, align 8
  %nxt1386 = alloca %struct.regnode*, align 8
  %last_str = alloca %struct.sv*, align 8
  %last_chrs = alloca i64, align 8
  %counted = alloca i32, align 4
  %b = alloca i64, align 8
  %l1437 = alloca i64, align 8
  %s1438 = alloca i8*, align 8
  %old = alloca i64, align 8
  %sv1539 = alloca %struct.sv*, align 8
  %mg1541 = alloca %struct.magic*, align 8
  %sv1631 = alloca %struct.sv*, align 8
  %mg1633 = alloca %struct.magic*, align 8
  %invert = alloca i8, align 1
  %my_invlist = alloca %struct.sv*, align 8
  %namedclass = alloca i8, align 1
  %REG_ANY_invlist = alloca %struct.sv*, align 8
  %was_there = alloca i8, align 1
  %complement = alloca i32, align 4
  %deltanext1992 = alloca i64, align 8
  %minnext1993 = alloca i64, align 8
  %fake1994 = alloca i64, align 8
  %nscan = alloca %struct.regnode*, align 8
  %intrnl = alloca %struct.regnode_ssc, align 8
  %f1995 = alloca i32, align 4
  %ellipses = alloca i8*, align 8
  %len = alloca i64, align 8
  %ellipses2062 = alloca i8*, align 8
  %len2063 = alloca i64, align 8
  %trie_node = alloca %struct.regnode*, align 8
  %tail2285 = alloca %struct.regnode*, align 8
  %trie = alloca %struct._reg_trie_data*, align 8
  %max12293 = alloca i64, align 8
  %min12294 = alloca i64, align 8
  %accum2295 = alloca %struct.regnode_ssc, align 8
  %nextbranch = alloca %struct.regnode*, align 8
  %word = alloca i32, align 4
  %deltanext2312 = alloca i64, align 8
  %minnext2313 = alloca i64, align 8
  %f2314 = alloca i64, align 8
  %fake2315 = alloca i64, align 8
  %this_class2316 = alloca %struct.regnode_ssc, align 8
  %final_minlen = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode** %scanp, %struct.regnode*** %scanp.addr, align 8
  store i64* %minlenp, i64** %minlenp.addr, align 8
  store i64* %deltap, i64** %deltap.addr, align 8
  store %struct.regnode* %last, %struct.regnode** %last.addr, align 8
  store %struct.scan_data_t* %data, %struct.scan_data_t** %data.addr, align 8
  store i32 %stopparen, i32* %stopparen.addr, align 4
  store i32 %recursed_depth, i32* %recursed_depth.addr, align 4
  store %struct.regnode_ssc* %and_withp, %struct.regnode_ssc** %and_withp.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i64 0, i64* %min, align 8
  store i32 0, i32* %pars, align 4
  %0 = load %struct.regnode**, %struct.regnode*** %scanp.addr, align 8
  %1 = load %struct.regnode*, %struct.regnode** %0, align 8
  store %struct.regnode* %1, %struct.regnode** %scan, align 8
  store i64 0, i64* %delta, align 8
  %2 = load i32, i32* %flags.addr, align 4
  %and = and i32 %2, 1024
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %3, i32 0, i32 16
  %4 = load i32, i32* %flags1, align 8
  %and2 = and i32 %4, 64
  %tobool3 = icmp ne i32 %and2, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %5 = phi i1 [ false, %entry ], [ %tobool3, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  store i32 %land.ext, i32* %is_inf, align 4
  store i32 0, i32* %is_inf_internal, align 4
  %6 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %6, i32 0, i32 1
  %7 = load i8, i8* %type, align 1
  %conv = zext i8 %7 to i32
  %cmp = icmp eq i32 %conv, 49
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.end
  %8 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %9 = bitcast %struct.regnode* %8 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %9, i32 0, i32 3
  %10 = load i32, i32* %arg1, align 4
  br label %cond.end

cond.false:                                       ; preds = %land.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %10, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %is_par, align 4
  store %struct.sv* null, %struct.sv** %re_trie_maxbuff, align 8
  %11 = load %struct.regnode*, %struct.regnode** %scan, align 8
  store %struct.regnode* %11, %struct.regnode** %first_non_open, align 8
  store i64 9223372036854775807, i64* %stopmin, align 8
  store %struct.scan_frame* null, %struct.scan_frame** %frame, align 8
  %12 = load i32, i32* %depth.addr, align 4
  %cmp5 = icmp eq i32 %12, 0
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %13 = load %struct.regnode*, %struct.regnode** %first_non_open, align 8
  %tobool7 = icmp ne %struct.regnode* %13, null
  br i1 %tobool7, label %land.rhs8, label %land.end13

land.rhs8:                                        ; preds = %while.cond
  %14 = load %struct.regnode*, %struct.regnode** %first_non_open, align 8
  %type9 = getelementptr inbounds %struct.regnode, %struct.regnode* %14, i32 0, i32 1
  %15 = load i8, i8* %type9, align 1
  %conv10 = zext i8 %15 to i32
  %cmp11 = icmp eq i32 %conv10, 49
  br label %land.end13

land.end13:                                       ; preds = %land.rhs8, %while.cond
  %16 = phi i1 [ false, %while.cond ], [ %cmp11, %land.rhs8 ]
  br i1 %16, label %while.body, label %while.end

while.body:                                       ; preds = %land.end13
  %17 = load %struct.regnode*, %struct.regnode** %first_non_open, align 8
  %call = call %struct.regnode* @Perl_regnext(%struct.regnode* %17)
  store %struct.regnode* %call, %struct.regnode** %first_non_open, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end13
  br label %if.end

if.end:                                           ; preds = %while.end, %cond.end
  br label %fake_study_recurse

fake_study_recurse:                               ; preds = %if.then2507, %if.end
  br label %while.cond15

while.cond15:                                     ; preds = %if.end2503, %if.end2486, %if.end1705, %if.end716, %if.then628, %if.end573, %fake_study_recurse
  %18 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %tobool16 = icmp ne %struct.regnode* %18, null
  br i1 %tobool16, label %land.lhs.true, label %land.end24

land.lhs.true:                                    ; preds = %while.cond15
  %19 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type17 = getelementptr inbounds %struct.regnode, %struct.regnode* %19, i32 0, i32 1
  %20 = load i8, i8* %type17, align 1
  %conv18 = zext i8 %20 to i32
  %cmp19 = icmp ne i32 %conv18, 0
  br i1 %cmp19, label %land.rhs21, label %land.end24

land.rhs21:                                       ; preds = %land.lhs.true
  %21 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %22 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  %cmp22 = icmp ult %struct.regnode* %21, %22
  br label %land.end24

land.end24:                                       ; preds = %land.rhs21, %land.lhs.true, %while.cond15
  %23 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond15 ], [ %cmp22, %land.rhs21 ]
  br i1 %23, label %while.body26, label %while.end2505

while.body26:                                     ; preds = %land.end24
  store i64 0, i64* %min_subtract, align 8
  store i8 0, i8* %unfolded_multi_char, align 1
  %24 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type27 = getelementptr inbounds %struct.regnode, %struct.regnode* %24, i32 0, i32 1
  %25 = load i8, i8* %type27, align 1
  %idxprom = zext i8 %25 to i64
  %arrayidx = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom
  %26 = load i8, i8* %arrayidx, align 1
  %conv28 = zext i8 %26 to i32
  %cmp29 = icmp eq i32 %conv28, 31
  br i1 %cmp29, label %if.then31, label %if.end33

if.then31:                                        ; preds = %while.body26
  %27 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %28 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %29 = load i32, i32* %depth.addr, align 4
  %add = add i32 %29, 1
  %call32 = call i32 @S_join_exact(%struct.RExC_state_t* %27, %struct.regnode* %28, i64* %min_subtract, i8* %unfolded_multi_char, i32 0, %struct.regnode* null, i32 %add)
  br label %if.end33

if.end33:                                         ; preds = %if.then31, %while.body26
  %30 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type34 = getelementptr inbounds %struct.regnode, %struct.regnode* %30, i32 0, i32 1
  %31 = load i8, i8* %type34, align 1
  %conv35 = zext i8 %31 to i32
  %cmp36 = icmp ne i32 %conv35, 47
  br i1 %cmp36, label %if.then38, label %if.end95

if.then38:                                        ; preds = %if.end33
  %32 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type39 = getelementptr inbounds %struct.regnode, %struct.regnode* %32, i32 0, i32 1
  %33 = load i8, i8* %type39, align 1
  %idxprom40 = zext i8 %33 to i64
  %arrayidx41 = getelementptr inbounds [94 x i8], [94 x i8]* bitcast (<{ [72 x i8], [22 x i8] }>* @reg_off_by_arg to [94 x i8]*), i64 0, i64 %idxprom40
  %34 = load i8, i8* %arrayidx41, align 1
  %conv42 = sext i8 %34 to i32
  %tobool43 = icmp ne i32 %conv42, 0
  %35 = zext i1 %tobool43 to i64
  %cond44 = select i1 %tobool43, i32 2147483647, i32 65535
  store i32 %cond44, i32* %max, align 4
  %36 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type45 = getelementptr inbounds %struct.regnode, %struct.regnode* %36, i32 0, i32 1
  %37 = load i8, i8* %type45, align 1
  %idxprom46 = zext i8 %37 to i64
  %arrayidx47 = getelementptr inbounds [94 x i8], [94 x i8]* bitcast (<{ [72 x i8], [22 x i8] }>* @reg_off_by_arg to [94 x i8]*), i64 0, i64 %idxprom46
  %38 = load i8, i8* %arrayidx47, align 1
  %conv48 = sext i8 %38 to i32
  %tobool49 = icmp ne i32 %conv48, 0
  br i1 %tobool49, label %cond.true50, label %cond.false52

cond.true50:                                      ; preds = %if.then38
  %39 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %40 = bitcast %struct.regnode* %39 to %struct.regnode_1*
  %arg151 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %40, i32 0, i32 3
  %41 = load i32, i32* %arg151, align 4
  br label %cond.end54

cond.false52:                                     ; preds = %if.then38
  %42 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %42, i32 0, i32 2
  %43 = load i16, i16* %next_off, align 2
  %conv53 = zext i16 %43 to i32
  br label %cond.end54

cond.end54:                                       ; preds = %cond.false52, %cond.true50
  %cond55 = phi i32 [ %41, %cond.true50 ], [ %conv53, %cond.false52 ]
  store i32 %cond55, i32* %off, align 4
  %44 = load %struct.regnode*, %struct.regnode** %scan, align 8
  store %struct.regnode* %44, %struct.regnode** %n, align 8
  br label %while.cond56

while.cond56:                                     ; preds = %while.body83, %cond.end54
  %45 = load %struct.regnode*, %struct.regnode** %n, align 8
  %call57 = call %struct.regnode* @Perl_regnext(%struct.regnode* %45)
  store %struct.regnode* %call57, %struct.regnode** %n, align 8
  %tobool58 = icmp ne %struct.regnode* %call57, null
  br i1 %tobool58, label %land.lhs.true59, label %land.end81

land.lhs.true59:                                  ; preds = %while.cond56
  %46 = load %struct.regnode*, %struct.regnode** %n, align 8
  %type60 = getelementptr inbounds %struct.regnode, %struct.regnode* %46, i32 0, i32 1
  %47 = load i8, i8* %type60, align 1
  %idxprom61 = zext i8 %47 to i64
  %arrayidx62 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom61
  %48 = load i8, i8* %arrayidx62, align 1
  %conv63 = zext i8 %48 to i32
  %cmp64 = icmp eq i32 %conv63, 40
  br i1 %cmp64, label %land.lhs.true66, label %lor.lhs.false

land.lhs.true66:                                  ; preds = %land.lhs.true59
  %49 = load %struct.regnode*, %struct.regnode** %n, align 8
  %next_off67 = getelementptr inbounds %struct.regnode, %struct.regnode* %49, i32 0, i32 2
  %50 = load i16, i16* %next_off67, align 2
  %conv68 = zext i16 %50 to i32
  store i32 %conv68, i32* %noff, align 4
  %tobool69 = icmp ne i32 %conv68, 0
  br i1 %tobool69, label %land.rhs77, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true66, %land.lhs.true59
  %51 = load %struct.regnode*, %struct.regnode** %n, align 8
  %type70 = getelementptr inbounds %struct.regnode, %struct.regnode* %51, i32 0, i32 1
  %52 = load i8, i8* %type70, align 1
  %conv71 = zext i8 %52 to i32
  %cmp72 = icmp eq i32 %conv71, 61
  br i1 %cmp72, label %land.lhs.true74, label %land.end81

land.lhs.true74:                                  ; preds = %lor.lhs.false
  %53 = load %struct.regnode*, %struct.regnode** %n, align 8
  %54 = bitcast %struct.regnode* %53 to %struct.regnode_1*
  %arg175 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %54, i32 0, i32 3
  %55 = load i32, i32* %arg175, align 4
  store i32 %55, i32* %noff, align 4
  %tobool76 = icmp ne i32 %55, 0
  br i1 %tobool76, label %land.rhs77, label %land.end81

land.rhs77:                                       ; preds = %land.lhs.true74, %land.lhs.true66
  %56 = load i32, i32* %off, align 4
  %57 = load i32, i32* %noff, align 4
  %add78 = add nsw i32 %56, %57
  %58 = load i32, i32* %max, align 4
  %cmp79 = icmp slt i32 %add78, %58
  br label %land.end81

land.end81:                                       ; preds = %land.rhs77, %land.lhs.true74, %lor.lhs.false, %while.cond56
  %59 = phi i1 [ false, %land.lhs.true74 ], [ false, %lor.lhs.false ], [ false, %while.cond56 ], [ %cmp79, %land.rhs77 ]
  br i1 %59, label %while.body83, label %while.end85

while.body83:                                     ; preds = %land.end81
  %60 = load i32, i32* %noff, align 4
  %61 = load i32, i32* %off, align 4
  %add84 = add nsw i32 %61, %60
  store i32 %add84, i32* %off, align 4
  br label %while.cond56

while.end85:                                      ; preds = %land.end81
  %62 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type86 = getelementptr inbounds %struct.regnode, %struct.regnode* %62, i32 0, i32 1
  %63 = load i8, i8* %type86, align 1
  %idxprom87 = zext i8 %63 to i64
  %arrayidx88 = getelementptr inbounds [94 x i8], [94 x i8]* bitcast (<{ [72 x i8], [22 x i8] }>* @reg_off_by_arg to [94 x i8]*), i64 0, i64 %idxprom87
  %64 = load i8, i8* %arrayidx88, align 1
  %tobool89 = icmp ne i8 %64, 0
  br i1 %tobool89, label %if.then90, label %if.else

if.then90:                                        ; preds = %while.end85
  %65 = load i32, i32* %off, align 4
  %66 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %67 = bitcast %struct.regnode* %66 to %struct.regnode_1*
  %arg191 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %67, i32 0, i32 3
  store i32 %65, i32* %arg191, align 4
  br label %if.end94

if.else:                                          ; preds = %while.end85
  %68 = load i32, i32* %off, align 4
  %conv92 = trunc i32 %68 to i16
  %69 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %next_off93 = getelementptr inbounds %struct.regnode, %struct.regnode* %69, i32 0, i32 2
  store i16 %conv92, i16* %next_off93, align 2
  br label %if.end94

if.end94:                                         ; preds = %if.else, %if.then90
  br label %if.end95

if.end95:                                         ; preds = %if.end94, %if.end33
  %70 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type96 = getelementptr inbounds %struct.regnode, %struct.regnode* %70, i32 0, i32 1
  %71 = load i8, i8* %type96, align 1
  %conv97 = zext i8 %71 to i32
  %cmp98 = icmp eq i32 %conv97, 80
  br i1 %cmp98, label %if.then100, label %if.else106

if.then100:                                       ; preds = %if.end95
  store i64 0, i64* %minlen, align 8
  store i64 0, i64* %deltanext, align 8
  store i64 0, i64* %fake_last_close, align 8
  store i32 131072, i32* %f, align 4
  %72 = bitcast %struct.scan_data_t* %data_fake to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* align 8 bitcast (%struct.scan_data_t* @zero_scan_data to i8*), i64 152, i1 false)
  %73 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call101 = call %struct.regnode* @Perl_regnext(%struct.regnode* %73)
  store %struct.regnode* %call101, %struct.regnode** %scan, align 8
  %last_closep = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 18
  store i64* %fake_last_close, i64** %last_closep, align 8
  %74 = load i64*, i64** %minlenp.addr, align 8
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %minlen, align 8
  %76 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call102 = call %struct.regnode* @Perl_regnext(%struct.regnode* %76)
  store %struct.regnode* %call102, %struct.regnode** %next, align 8
  %77 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %77, i64 1
  %add.ptr103 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr, i64 1
  store %struct.regnode* %add.ptr103, %struct.regnode** %scan, align 8
  %78 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %79 = load %struct.regnode*, %struct.regnode** %next, align 8
  %80 = load i32, i32* %stopparen.addr, align 4
  %81 = load i32, i32* %recursed_depth.addr, align 4
  %82 = load i32, i32* %f, align 4
  %83 = load i32, i32* %depth.addr, align 4
  %add104 = add i32 %83, 1
  %call105 = call i64 @S_study_chunk(%struct.RExC_state_t* %78, %struct.regnode** %scan, i64* %minlen, i64* %deltanext, %struct.regnode* %79, %struct.scan_data_t* %data_fake, i32 %80, i32 %81, %struct.regnode_ssc* null, i32 %82, i32 %add104)
  %84 = load %struct.regnode*, %struct.regnode** %next, align 8
  store %struct.regnode* %84, %struct.regnode** %scan, align 8
  br label %if.end2503

if.else106:                                       ; preds = %if.end95
  %85 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type107 = getelementptr inbounds %struct.regnode, %struct.regnode* %85, i32 0, i32 1
  %86 = load i8, i8* %type107, align 1
  %conv108 = zext i8 %86 to i32
  %cmp109 = icmp eq i32 %conv108, 30
  br i1 %cmp109, label %if.then121, label %lor.lhs.false111

lor.lhs.false111:                                 ; preds = %if.else106
  %87 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type112 = getelementptr inbounds %struct.regnode, %struct.regnode* %87, i32 0, i32 1
  %88 = load i8, i8* %type112, align 1
  %conv113 = zext i8 %88 to i32
  %cmp114 = icmp eq i32 %conv113, 62
  br i1 %cmp114, label %if.then121, label %lor.lhs.false116

lor.lhs.false116:                                 ; preds = %lor.lhs.false111
  %89 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type117 = getelementptr inbounds %struct.regnode, %struct.regnode* %89, i32 0, i32 1
  %90 = load i8, i8* %type117, align 1
  %conv118 = zext i8 %90 to i32
  %cmp119 = icmp eq i32 %conv118, 66
  br i1 %cmp119, label %if.then121, label %if.else574

if.then121:                                       ; preds = %lor.lhs.false116, %lor.lhs.false111, %if.else106
  %91 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call122 = call %struct.regnode* @Perl_regnext(%struct.regnode* %91)
  store %struct.regnode* %call122, %struct.regnode** %next, align 8
  %92 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type123 = getelementptr inbounds %struct.regnode, %struct.regnode* %92, i32 0, i32 1
  %93 = load i8, i8* %type123, align 1
  %conv124 = zext i8 %93 to i32
  store i32 %conv124, i32* %code, align 4
  %94 = load %struct.regnode*, %struct.regnode** %next, align 8
  %type125 = getelementptr inbounds %struct.regnode, %struct.regnode* %94, i32 0, i32 1
  %95 = load i8, i8* %type125, align 1
  %conv126 = zext i8 %95 to i32
  %96 = load i32, i32* %code, align 4
  %cmp127 = icmp eq i32 %conv126, %96
  br i1 %cmp127, label %if.then132, label %lor.lhs.false129

lor.lhs.false129:                                 ; preds = %if.then121
  %97 = load i32, i32* %code, align 4
  %cmp130 = icmp eq i32 %97, 66
  br i1 %cmp130, label %if.then132, label %if.else564

if.then132:                                       ; preds = %lor.lhs.false129, %if.then121
  store i64 0, i64* %max1, align 8
  store i64 9223372036854775807, i64* %min1, align 8
  store i64 0, i64* %num, align 8
  %98 = load %struct.regnode*, %struct.regnode** %scan, align 8
  store %struct.regnode* %98, %struct.regnode** %startbranch, align 8
  %99 = load i32, i32* %flags.addr, align 4
  %and133 = and i32 %99, 1024
  %tobool134 = icmp ne i32 %and133, 0
  br i1 %tobool134, label %if.then135, label %if.end136

if.then135:                                       ; preds = %if.then132
  %100 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %101 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %102 = load i64*, i64** %minlenp.addr, align 8
  %103 = load i32, i32* %is_inf, align 4
  call void @S_scan_commit(%struct.RExC_state_t* %100, %struct.scan_data_t* %101, i64* %102, i32 %103)
  br label %if.end136

if.end136:                                        ; preds = %if.then135, %if.then132
  %104 = load i32, i32* %flags.addr, align 4
  %and137 = and i32 %104, 6144
  %tobool138 = icmp ne i32 %and137, 0
  br i1 %tobool138, label %if.then139, label %if.end140

if.then139:                                       ; preds = %if.end136
  %105 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  call void @S_ssc_init(%struct.RExC_state_t* %105, %struct.regnode_ssc* %accum)
  br label %if.end140

if.end140:                                        ; preds = %if.then139, %if.end136
  br label %while.cond141

while.cond141:                                    ; preds = %if.end226, %if.end140
  %106 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type142 = getelementptr inbounds %struct.regnode, %struct.regnode* %106, i32 0, i32 1
  %107 = load i8, i8* %type142, align 1
  %conv143 = zext i8 %107 to i32
  %108 = load i32, i32* %code, align 4
  %cmp144 = icmp eq i32 %conv143, %108
  br i1 %cmp144, label %while.body146, label %while.end227

while.body146:                                    ; preds = %while.cond141
  store i32 0, i32* %f148, align 4
  %109 = load i64, i64* %num, align 8
  %inc = add nsw i64 %109, 1
  store i64 %inc, i64* %num, align 8
  %110 = bitcast %struct.scan_data_t* %data_fake to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 bitcast (%struct.scan_data_t* @zero_scan_data to i8*), i64 152, i1 false)
  %111 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool149 = icmp ne %struct.scan_data_t* %111, null
  br i1 %tobool149, label %if.then150, label %if.else154

if.then150:                                       ; preds = %while.body146
  %112 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %whilem_c = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %112, i32 0, i32 17
  %113 = load i32, i32* %whilem_c, align 4
  %whilem_c151 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 17
  store i32 %113, i32* %whilem_c151, align 4
  %114 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_closep152 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %114, i32 0, i32 18
  %115 = load i64*, i64** %last_closep152, align 8
  %last_closep153 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 18
  store i64* %115, i64** %last_closep153, align 8
  br label %if.end156

if.else154:                                       ; preds = %while.body146
  %last_closep155 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 18
  store i64* %fake, i64** %last_closep155, align 8
  br label %if.end156

if.end156:                                        ; preds = %if.else154, %if.then150
  %116 = load i64, i64* %delta, align 8
  %pos_delta = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 1
  store i64 %116, i64* %pos_delta, align 8
  %117 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call157 = call %struct.regnode* @Perl_regnext(%struct.regnode* %117)
  store %struct.regnode* %call157, %struct.regnode** %next, align 8
  %118 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr158 = getelementptr inbounds %struct.regnode, %struct.regnode* %118, i64 1
  store %struct.regnode* %add.ptr158, %struct.regnode** %scan, align 8
  %119 = load i32, i32* %code, align 4
  %cmp159 = icmp ne i32 %119, 30
  br i1 %cmp159, label %if.then161, label %if.end163

if.then161:                                       ; preds = %if.end156
  %120 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr162 = getelementptr inbounds %struct.regnode, %struct.regnode* %120, i64 1
  store %struct.regnode* %add.ptr162, %struct.regnode** %scan, align 8
  br label %if.end163

if.end163:                                        ; preds = %if.then161, %if.end156
  %121 = load i32, i32* %flags.addr, align 4
  %and164 = and i32 %121, 6144
  %tobool165 = icmp ne i32 %and164, 0
  br i1 %tobool165, label %if.then166, label %if.end167

if.then166:                                       ; preds = %if.end163
  %122 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  call void @S_ssc_init(%struct.RExC_state_t* %122, %struct.regnode_ssc* %this_class)
  %start_class = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 19
  store %struct.regnode_ssc* %this_class, %struct.regnode_ssc** %start_class, align 8
  store i32 2048, i32* %f148, align 4
  br label %if.end167

if.end167:                                        ; preds = %if.then166, %if.end163
  %123 = load i32, i32* %flags.addr, align 4
  %and168 = and i32 %123, 8192
  %tobool169 = icmp ne i32 %and168, 0
  br i1 %tobool169, label %if.then170, label %if.end171

if.then170:                                       ; preds = %if.end167
  %124 = load i32, i32* %f148, align 4
  %or = or i32 %124, 8192
  store i32 %or, i32* %f148, align 4
  br label %if.end171

if.end171:                                        ; preds = %if.then170, %if.end167
  %125 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %126 = load i64*, i64** %minlenp.addr, align 8
  %127 = load %struct.regnode*, %struct.regnode** %next, align 8
  %128 = load i32, i32* %stopparen.addr, align 4
  %129 = load i32, i32* %recursed_depth.addr, align 4
  %130 = load i32, i32* %f148, align 4
  %131 = load i32, i32* %depth.addr, align 4
  %add172 = add i32 %131, 1
  %call173 = call i64 @S_study_chunk(%struct.RExC_state_t* %125, %struct.regnode** %scan, i64* %126, i64* %deltanext147, %struct.regnode* %127, %struct.scan_data_t* %data_fake, i32 %128, i32 %129, %struct.regnode_ssc* null, i32 %130, i32 %add172)
  store i64 %call173, i64* %minnext, align 8
  %132 = load i64, i64* %min1, align 8
  %133 = load i64, i64* %minnext, align 8
  %cmp174 = icmp sgt i64 %132, %133
  br i1 %cmp174, label %if.then176, label %if.end177

if.then176:                                       ; preds = %if.end171
  %134 = load i64, i64* %minnext, align 8
  store i64 %134, i64* %min1, align 8
  br label %if.end177

if.end177:                                        ; preds = %if.then176, %if.end171
  %135 = load i64, i64* %deltanext147, align 8
  %cmp178 = icmp eq i64 %135, 9223372036854775807
  br i1 %cmp178, label %if.then180, label %if.else181

if.then180:                                       ; preds = %if.end177
  store i32 1, i32* %is_inf_internal, align 4
  store i32 1, i32* %is_inf, align 4
  store i64 9223372036854775807, i64* %max1, align 8
  br label %if.end188

if.else181:                                       ; preds = %if.end177
  %136 = load i64, i64* %max1, align 8
  %137 = load i64, i64* %minnext, align 8
  %138 = load i64, i64* %deltanext147, align 8
  %add182 = add nsw i64 %137, %138
  %cmp183 = icmp slt i64 %136, %add182
  br i1 %cmp183, label %if.then185, label %if.end187

if.then185:                                       ; preds = %if.else181
  %139 = load i64, i64* %minnext, align 8
  %140 = load i64, i64* %deltanext147, align 8
  %add186 = add nsw i64 %139, %140
  store i64 %add186, i64* %max1, align 8
  br label %if.end187

if.end187:                                        ; preds = %if.then185, %if.else181
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %if.then180
  %141 = load %struct.regnode*, %struct.regnode** %next, align 8
  store %struct.regnode* %141, %struct.regnode** %scan, align 8
  %flags189 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 16
  %142 = load i32, i32* %flags189, align 8
  %and190 = and i32 %142, 384
  %tobool191 = icmp ne i32 %and190, 0
  br i1 %tobool191, label %if.then192, label %if.end194

if.then192:                                       ; preds = %if.end188
  %143 = load i32, i32* %pars, align 4
  %inc193 = add nsw i32 %143, 1
  store i32 %inc193, i32* %pars, align 4
  br label %if.end194

if.end194:                                        ; preds = %if.then192, %if.end188
  %flags195 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 16
  %144 = load i32, i32* %flags195, align 8
  %and196 = and i32 %144, 32768
  %tobool197 = icmp ne i32 %and196, 0
  br i1 %tobool197, label %if.then198, label %if.end210

if.then198:                                       ; preds = %if.end194
  %145 = load i64, i64* %stopmin, align 8
  %146 = load i64, i64* %minnext, align 8
  %cmp199 = icmp sgt i64 %145, %146
  br i1 %cmp199, label %if.then201, label %if.end203

if.then201:                                       ; preds = %if.then198
  %147 = load i64, i64* %min, align 8
  %148 = load i64, i64* %min1, align 8
  %add202 = add nsw i64 %147, %148
  store i64 %add202, i64* %stopmin, align 8
  br label %if.end203

if.end203:                                        ; preds = %if.then201, %if.then198
  %149 = load i32, i32* %flags.addr, align 4
  %and204 = and i32 %149, -1025
  store i32 %and204, i32* %flags.addr, align 4
  %150 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool205 = icmp ne %struct.scan_data_t* %150, null
  br i1 %tobool205, label %if.then206, label %if.end209

if.then206:                                       ; preds = %if.end203
  %151 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags207 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %151, i32 0, i32 16
  %152 = load i32, i32* %flags207, align 8
  %or208 = or i32 %152, 32768
  store i32 %or208, i32* %flags207, align 8
  br label %if.end209

if.end209:                                        ; preds = %if.then206, %if.end203
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %if.end194
  %153 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool211 = icmp ne %struct.scan_data_t* %153, null
  br i1 %tobool211, label %if.then212, label %if.end222

if.then212:                                       ; preds = %if.end210
  %flags213 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 16
  %154 = load i32, i32* %flags213, align 8
  %and214 = and i32 %154, 512
  %tobool215 = icmp ne i32 %and214, 0
  br i1 %tobool215, label %if.then216, label %if.end219

if.then216:                                       ; preds = %if.then212
  %155 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags217 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %155, i32 0, i32 16
  %156 = load i32, i32* %flags217, align 8
  %or218 = or i32 %156, 512
  store i32 %or218, i32* %flags217, align 8
  br label %if.end219

if.end219:                                        ; preds = %if.then216, %if.then212
  %whilem_c220 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 17
  %157 = load i32, i32* %whilem_c220, align 4
  %158 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %whilem_c221 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %158, i32 0, i32 17
  store i32 %157, i32* %whilem_c221, align 4
  br label %if.end222

if.end222:                                        ; preds = %if.end219, %if.end210
  %159 = load i32, i32* %flags.addr, align 4
  %and223 = and i32 %159, 6144
  %tobool224 = icmp ne i32 %and223, 0
  br i1 %tobool224, label %if.then225, label %if.end226

if.then225:                                       ; preds = %if.end222
  %160 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %161 = bitcast %struct.regnode_ssc* %this_class to %struct.regnode_charclass*
  call void @S_ssc_or(%struct.RExC_state_t* %160, %struct.regnode_ssc* %accum, %struct.regnode_charclass* %161)
  br label %if.end226

if.end226:                                        ; preds = %if.then225, %if.end222
  br label %while.cond141

while.end227:                                     ; preds = %while.cond141
  %162 = load i32, i32* %code, align 4
  %cmp228 = icmp eq i32 %162, 66
  br i1 %cmp228, label %land.lhs.true230, label %if.end234

land.lhs.true230:                                 ; preds = %while.end227
  %163 = load i64, i64* %num, align 8
  %cmp231 = icmp slt i64 %163, 2
  br i1 %cmp231, label %if.then233, label %if.end234

if.then233:                                       ; preds = %land.lhs.true230
  store i64 0, i64* %min1, align 8
  br label %if.end234

if.end234:                                        ; preds = %if.then233, %land.lhs.true230, %while.end227
  %164 = load i32, i32* %flags.addr, align 4
  %and235 = and i32 %164, 1024
  %tobool236 = icmp ne i32 %and235, 0
  br i1 %tobool236, label %if.then237, label %if.end256

if.then237:                                       ; preds = %if.end234
  %165 = load i64, i64* %min1, align 8
  %166 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %166, i32 0, i32 0
  %167 = load i64, i64* %pos_min, align 8
  %add238 = add nsw i64 %167, %165
  store i64 %add238, i64* %pos_min, align 8
  %168 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta239 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %168, i32 0, i32 1
  %169 = load i64, i64* %pos_delta239, align 8
  %170 = load i64, i64* %max1, align 8
  %171 = load i64, i64* %min1, align 8
  %sub = sub nsw i64 %170, %171
  %sub240 = sub nsw i64 9223372036854775807, %sub
  %cmp241 = icmp sge i64 %169, %sub240
  br i1 %cmp241, label %if.then243, label %if.else245

if.then243:                                       ; preds = %if.then237
  %172 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta244 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %172, i32 0, i32 1
  store i64 9223372036854775807, i64* %pos_delta244, align 8
  br label %if.end249

if.else245:                                       ; preds = %if.then237
  %173 = load i64, i64* %max1, align 8
  %174 = load i64, i64* %min1, align 8
  %sub246 = sub nsw i64 %173, %174
  %175 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta247 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %175, i32 0, i32 1
  %176 = load i64, i64* %pos_delta247, align 8
  %add248 = add nsw i64 %176, %sub246
  store i64 %add248, i64* %pos_delta247, align 8
  br label %if.end249

if.end249:                                        ; preds = %if.else245, %if.then243
  %177 = load i64, i64* %max1, align 8
  %178 = load i64, i64* %min1, align 8
  %cmp250 = icmp ne i64 %177, %178
  br i1 %cmp250, label %if.then254, label %lor.lhs.false252

lor.lhs.false252:                                 ; preds = %if.end249
  %179 = load i32, i32* %is_inf, align 4
  %tobool253 = icmp ne i32 %179, 0
  br i1 %tobool253, label %if.then254, label %if.end255

if.then254:                                       ; preds = %lor.lhs.false252, %if.end249
  %180 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_float = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %180, i32 0, i32 11
  %181 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %181, i32 0, i32 6
  store %struct.sv** %longest_float, %struct.sv*** %longest, align 8
  br label %if.end255

if.end255:                                        ; preds = %if.then254, %lor.lhs.false252
  br label %if.end256

if.end256:                                        ; preds = %if.end255, %if.end234
  %182 = load i64, i64* %min1, align 8
  %183 = load i64, i64* %min, align 8
  %add257 = add nsw i64 %183, %182
  store i64 %add257, i64* %min, align 8
  %184 = load i64, i64* %delta, align 8
  %cmp258 = icmp eq i64 %184, 9223372036854775807
  br i1 %cmp258, label %if.then266, label %lor.lhs.false260

lor.lhs.false260:                                 ; preds = %if.end256
  %185 = load i64, i64* %delta, align 8
  %sub261 = sub nsw i64 9223372036854775807, %185
  %186 = load i64, i64* %max1, align 8
  %187 = load i64, i64* %min1, align 8
  %sub262 = sub nsw i64 %186, %187
  %sub263 = sub nsw i64 %sub261, %sub262
  %cmp264 = icmp slt i64 %sub263, 0
  br i1 %cmp264, label %if.then266, label %if.else267

if.then266:                                       ; preds = %lor.lhs.false260, %if.end256
  store i64 9223372036854775807, i64* %delta, align 8
  br label %if.end270

if.else267:                                       ; preds = %lor.lhs.false260
  %188 = load i64, i64* %max1, align 8
  %189 = load i64, i64* %min1, align 8
  %sub268 = sub nsw i64 %188, %189
  %190 = load i64, i64* %delta, align 8
  %add269 = add nsw i64 %190, %sub268
  store i64 %add269, i64* %delta, align 8
  br label %if.end270

if.end270:                                        ; preds = %if.else267, %if.then266
  %191 = load i32, i32* %flags.addr, align 4
  %and271 = and i32 %191, 4096
  %tobool272 = icmp ne i32 %and271, 0
  br i1 %tobool272, label %if.then273, label %if.else280

if.then273:                                       ; preds = %if.end270
  %192 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %193 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class274 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %193, i32 0, i32 19
  %194 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class274, align 8
  %195 = bitcast %struct.regnode_ssc* %accum to %struct.regnode_charclass*
  call void @S_ssc_or(%struct.RExC_state_t* %192, %struct.regnode_ssc* %194, %struct.regnode_charclass* %195)
  %196 = load i64, i64* %min1, align 8
  %tobool275 = icmp ne i64 %196, 0
  br i1 %tobool275, label %if.then276, label %if.end279

if.then276:                                       ; preds = %if.then273
  %197 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %198 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class277 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %198, i32 0, i32 19
  %199 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class277, align 8
  %200 = load %struct.regnode_ssc*, %struct.regnode_ssc** %and_withp.addr, align 8
  %201 = bitcast %struct.regnode_ssc* %200 to %struct.regnode_charclass*
  call void @S_ssc_and(%struct.RExC_state_t* %197, %struct.regnode_ssc* %199, %struct.regnode_charclass* %201)
  %202 = load i32, i32* %flags.addr, align 4
  %and278 = and i32 %202, -6145
  store i32 %and278, i32* %flags.addr, align 4
  br label %if.end279

if.end279:                                        ; preds = %if.then276, %if.then273
  br label %if.end296

if.else280:                                       ; preds = %if.end270
  %203 = load i32, i32* %flags.addr, align 4
  %and281 = and i32 %203, 2048
  %tobool282 = icmp ne i32 %and281, 0
  br i1 %tobool282, label %if.then283, label %if.end295

if.then283:                                       ; preds = %if.else280
  %204 = load i64, i64* %min1, align 8
  %tobool284 = icmp ne i64 %204, 0
  br i1 %tobool284, label %if.then285, label %if.else288

if.then285:                                       ; preds = %if.then283
  %205 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %206 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class286 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %206, i32 0, i32 19
  %207 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class286, align 8
  %208 = bitcast %struct.regnode_ssc* %accum to %struct.regnode_charclass*
  call void @S_ssc_and(%struct.RExC_state_t* %205, %struct.regnode_ssc* %207, %struct.regnode_charclass* %208)
  %209 = load i32, i32* %flags.addr, align 4
  %and287 = and i32 %209, -6145
  store i32 %and287, i32* %flags.addr, align 4
  br label %if.end294

if.else288:                                       ; preds = %if.then283
  %call289 = call i8* @Perl_safesysmalloc(i64 56)
  %210 = bitcast i8* %call289 to %struct.regnode_ssc*
  store %struct.regnode_ssc* %210, %struct.regnode_ssc** %and_withp.addr, align 8
  %211 = load %struct.regnode_ssc*, %struct.regnode_ssc** %and_withp.addr, align 8
  %212 = bitcast %struct.regnode_ssc* %211 to i8*
  call void @Perl_save_pushptr(i8* %212, i32 10)
  %213 = load %struct.regnode_ssc*, %struct.regnode_ssc** %and_withp.addr, align 8
  %214 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class290 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %214, i32 0, i32 19
  %215 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class290, align 8
  %216 = bitcast %struct.regnode_ssc* %213 to i8*
  %217 = bitcast %struct.regnode_ssc* %215 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %216, i8* align 8 %217, i64 56, i1 false)
  %218 = load i32, i32* %flags.addr, align 4
  %and291 = and i32 %218, -2049
  store i32 %and291, i32* %flags.addr, align 4
  %219 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class292 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %219, i32 0, i32 19
  %220 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class292, align 8
  %221 = bitcast %struct.regnode_ssc* %220 to i8*
  %222 = bitcast %struct.regnode_ssc* %accum to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %221, i8* align 8 %222, i64 56, i1 false)
  %223 = load i32, i32* %flags.addr, align 4
  %or293 = or i32 %223, 4096
  store i32 %or293, i32* %flags.addr, align 4
  br label %if.end294

if.end294:                                        ; preds = %if.else288, %if.then285
  br label %if.end295

if.end295:                                        ; preds = %if.end294, %if.else280
  br label %if.end296

if.end296:                                        ; preds = %if.end295, %if.end279
  %224 = load %struct.regnode*, %struct.regnode** %startbranch, align 8
  %type297 = getelementptr inbounds %struct.regnode, %struct.regnode* %224, i32 0, i32 1
  %225 = load i8, i8* %type297, align 1
  %conv298 = zext i8 %225 to i32
  %cmp299 = icmp eq i32 %conv298, 30
  br i1 %cmp299, label %if.then301, label %if.end563

if.then301:                                       ; preds = %if.end296
  store i32 0, i32* %made, align 4
  %226 = load %struct.sv*, %struct.sv** %re_trie_maxbuff, align 8
  %tobool302 = icmp ne %struct.sv* %226, null
  br i1 %tobool302, label %if.end309, label %if.then303

if.then303:                                       ; preds = %if.then301
  %call304 = call %struct.sv* @Perl_get_sv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.216, i64 0, i64 0), i32 1)
  store %struct.sv* %call304, %struct.sv** %re_trie_maxbuff, align 8
  %227 = load %struct.sv*, %struct.sv** %re_trie_maxbuff, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %227, i32 0, i32 2
  %228 = load i32, i32* %sv_flags, align 4
  %and305 = and i32 %228, 256
  %tobool306 = icmp ne i32 %and305, 0
  br i1 %tobool306, label %if.end308, label %if.then307

if.then307:                                       ; preds = %if.then303
  %229 = load %struct.sv*, %struct.sv** %re_trie_maxbuff, align 8
  call void @Perl_sv_setiv(%struct.sv* %229, i64 65536)
  br label %if.end308

if.end308:                                        ; preds = %if.then307, %if.then303
  br label %if.end309

if.end309:                                        ; preds = %if.end308, %if.then301
  %230 = load %struct.sv*, %struct.sv** %re_trie_maxbuff, align 8
  %sv_flags310 = getelementptr inbounds %struct.sv, %struct.sv* %230, i32 0, i32 2
  %231 = load i32, i32* %sv_flags310, align 4
  %and311 = and i32 %231, 2097408
  %cmp312 = icmp eq i32 %and311, 256
  br i1 %cmp312, label %cond.true314, label %cond.false315

cond.true314:                                     ; preds = %if.end309
  %232 = load %struct.sv*, %struct.sv** %re_trie_maxbuff, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %232, i32 0, i32 0
  %233 = load i8*, i8** %sv_any, align 8
  %234 = bitcast i8* %233 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %234, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %235 = load i64, i64* %xivu_iv, align 8
  br label %cond.end317

cond.false315:                                    ; preds = %if.end309
  %236 = load %struct.sv*, %struct.sv** %re_trie_maxbuff, align 8
  %call316 = call i64 @Perl_sv_2iv_flags(%struct.sv* %236, i32 2)
  br label %cond.end317

cond.end317:                                      ; preds = %cond.false315, %cond.true314
  %cond318 = phi i64 [ %235, %cond.true314 ], [ %call316, %cond.false315 ]
  %cmp319 = icmp sge i64 %cond318, 0
  br i1 %cmp319, label %if.then321, label %if.end562

if.then321:                                       ; preds = %cond.end317
  store %struct.regnode* null, %struct.regnode** %first, align 8
  store %struct.regnode* null, %struct.regnode** %last322, align 8
  %237 = load %struct.regnode*, %struct.regnode** %scan, align 8
  store %struct.regnode* %237, %struct.regnode** %tail, align 8
  store i8 0, i8* %trietype, align 1
  store i32 0, i32* %count, align 4
  br label %while.cond323

while.cond323:                                    ; preds = %while.body328, %if.then321
  %238 = load %struct.regnode*, %struct.regnode** %tail, align 8
  %type324 = getelementptr inbounds %struct.regnode, %struct.regnode* %238, i32 0, i32 1
  %239 = load i8, i8* %type324, align 1
  %conv325 = zext i8 %239 to i32
  %cmp326 = icmp eq i32 %conv325, 41
  br i1 %cmp326, label %while.body328, label %while.end330

while.body328:                                    ; preds = %while.cond323
  %240 = load %struct.regnode*, %struct.regnode** %tail, align 8
  %call329 = call %struct.regnode* @Perl_regnext(%struct.regnode* %240)
  store %struct.regnode* %call329, %struct.regnode** %tail, align 8
  br label %while.cond323

while.end330:                                     ; preds = %while.cond323
  %241 = load %struct.regnode*, %struct.regnode** %startbranch, align 8
  store %struct.regnode* %241, %struct.regnode** %cur, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end330
  %242 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %243 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %cmp331 = icmp ne %struct.regnode* %242, %243
  br i1 %cmp331, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %244 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %add.ptr333 = getelementptr inbounds %struct.regnode, %struct.regnode* %244, i64 1
  store %struct.regnode* %add.ptr333, %struct.regnode** %noper, align 8
  %245 = load %struct.regnode*, %struct.regnode** %noper, align 8
  %type334 = getelementptr inbounds %struct.regnode, %struct.regnode* %245, i32 0, i32 1
  %246 = load i8, i8* %type334, align 1
  store i8 %246, i8* %noper_type, align 1
  %247 = load i8, i8* %noper_type, align 1
  %conv335 = zext i8 %247 to i32
  %cmp336 = icmp eq i32 40, %conv335
  br i1 %cmp336, label %cond.true338, label %cond.false339

cond.true338:                                     ; preds = %for.body
  br label %cond.end376

cond.false339:                                    ; preds = %for.body
  %248 = load i8, i8* %noper_type, align 1
  %conv340 = zext i8 %248 to i32
  %cmp341 = icmp eq i32 31, %conv340
  br i1 %cmp341, label %cond.true343, label %cond.false344

cond.true343:                                     ; preds = %cond.false339
  br label %cond.end374

cond.false344:                                    ; preds = %cond.false339
  %249 = load i8, i8* %noper_type, align 1
  %conv345 = zext i8 %249 to i32
  %cmp346 = icmp eq i32 35, %conv345
  br i1 %cmp346, label %cond.true352, label %lor.lhs.false348

lor.lhs.false348:                                 ; preds = %cond.false344
  %250 = load i8, i8* %noper_type, align 1
  %conv349 = zext i8 %250 to i32
  %cmp350 = icmp eq i32 37, %conv349
  br i1 %cmp350, label %cond.true352, label %cond.false353

cond.true352:                                     ; preds = %lor.lhs.false348, %cond.false344
  br label %cond.end372

cond.false353:                                    ; preds = %lor.lhs.false348
  %251 = load i8, i8* %noper_type, align 1
  %conv354 = zext i8 %251 to i32
  %cmp355 = icmp eq i32 36, %conv354
  br i1 %cmp355, label %cond.true357, label %cond.false358

cond.true357:                                     ; preds = %cond.false353
  br label %cond.end370

cond.false358:                                    ; preds = %cond.false353
  %252 = load i8, i8* %noper_type, align 1
  %conv359 = zext i8 %252 to i32
  %cmp360 = icmp eq i32 32, %conv359
  br i1 %cmp360, label %cond.true362, label %cond.false363

cond.true362:                                     ; preds = %cond.false358
  br label %cond.end368

cond.false363:                                    ; preds = %cond.false358
  %253 = load i8, i8* %noper_type, align 1
  %conv364 = zext i8 %253 to i32
  %cmp365 = icmp eq i32 38, %conv364
  %254 = zext i1 %cmp365 to i64
  %cond367 = select i1 %cmp365, i32 38, i32 0
  br label %cond.end368

cond.end368:                                      ; preds = %cond.false363, %cond.true362
  %cond369 = phi i32 [ 32, %cond.true362 ], [ %cond367, %cond.false363 ]
  br label %cond.end370

cond.end370:                                      ; preds = %cond.end368, %cond.true357
  %cond371 = phi i32 [ 36, %cond.true357 ], [ %cond369, %cond.end368 ]
  br label %cond.end372

cond.end372:                                      ; preds = %cond.end370, %cond.true352
  %cond373 = phi i32 [ 35, %cond.true352 ], [ %cond371, %cond.end370 ]
  br label %cond.end374

cond.end374:                                      ; preds = %cond.end372, %cond.true343
  %cond375 = phi i32 [ 31, %cond.true343 ], [ %cond373, %cond.end372 ]
  br label %cond.end376

cond.end376:                                      ; preds = %cond.end374, %cond.true338
  %cond377 = phi i32 [ 40, %cond.true338 ], [ %cond375, %cond.end374 ]
  %conv378 = trunc i32 %cond377 to i8
  store i8 %conv378, i8* %noper_trietype, align 1
  %255 = load i8, i8* %noper_trietype, align 1
  %conv379 = zext i8 %255 to i32
  %tobool380 = icmp ne i32 %conv379, 0
  br i1 %tobool380, label %land.lhs.true381, label %if.else486

land.lhs.true381:                                 ; preds = %cond.end376
  %256 = load i8, i8* %noper_trietype, align 1
  %conv382 = zext i8 %256 to i32
  %cmp383 = icmp eq i32 %conv382, 40
  br i1 %cmp383, label %land.lhs.true394, label %lor.lhs.false385

lor.lhs.false385:                                 ; preds = %land.lhs.true381
  %257 = load i8, i8* %trietype, align 1
  %conv386 = zext i8 %257 to i32
  %cmp387 = icmp eq i32 %conv386, 40
  br i1 %cmp387, label %land.lhs.true394, label %lor.lhs.false389

lor.lhs.false389:                                 ; preds = %lor.lhs.false385
  %258 = load i8, i8* %trietype, align 1
  %conv390 = zext i8 %258 to i32
  %259 = load i8, i8* %noper_trietype, align 1
  %conv391 = zext i8 %259 to i32
  %cmp392 = icmp eq i32 %conv390, %conv391
  br i1 %cmp392, label %land.lhs.true394, label %if.else486

land.lhs.true394:                                 ; preds = %lor.lhs.false389, %lor.lhs.false385, %land.lhs.true381
  %260 = load i32, i32* %count, align 4
  %cmp395 = icmp ult i32 %260, 65535
  br i1 %cmp395, label %if.then397, label %if.else486

if.then397:                                       ; preds = %land.lhs.true394
  %261 = load %struct.regnode*, %struct.regnode** %first, align 8
  %tobool398 = icmp ne %struct.regnode* %261, null
  br i1 %tobool398, label %if.else475, label %if.then399

if.then399:                                       ; preds = %if.then397
  %262 = load %struct.regnode*, %struct.regnode** %cur, align 8
  store %struct.regnode* %262, %struct.regnode** %first, align 8
  %263 = load i8, i8* %noper_trietype, align 1
  %conv400 = zext i8 %263 to i32
  %cmp401 = icmp eq i32 %conv400, 40
  br i1 %cmp401, label %if.then403, label %if.else473

if.then403:                                       ; preds = %if.then399
  %264 = load %struct.regnode*, %struct.regnode** %noper, align 8
  %call404 = call %struct.regnode* @Perl_regnext(%struct.regnode* %264)
  store %struct.regnode* %call404, %struct.regnode** %noper_next, align 8
  %265 = load %struct.regnode*, %struct.regnode** %noper_next, align 8
  %tobool405 = icmp ne %struct.regnode* %265, null
  br i1 %tobool405, label %land.lhs.true406, label %cond.false412

land.lhs.true406:                                 ; preds = %if.then403
  %266 = load %struct.regnode*, %struct.regnode** %noper_next, align 8
  %267 = load %struct.regnode*, %struct.regnode** %tail, align 8
  %cmp407 = icmp ne %struct.regnode* %266, %267
  br i1 %cmp407, label %cond.true409, label %cond.false412

cond.true409:                                     ; preds = %land.lhs.true406
  %268 = load %struct.regnode*, %struct.regnode** %noper_next, align 8
  %type410 = getelementptr inbounds %struct.regnode, %struct.regnode* %268, i32 0, i32 1
  %269 = load i8, i8* %type410, align 1
  %conv411 = zext i8 %269 to i32
  br label %cond.end413

cond.false412:                                    ; preds = %land.lhs.true406, %if.then403
  br label %cond.end413

cond.end413:                                      ; preds = %cond.false412, %cond.true409
  %cond414 = phi i32 [ %conv411, %cond.true409 ], [ 0, %cond.false412 ]
  %conv415 = trunc i32 %cond414 to i8
  store i8 %conv415, i8* %noper_next_type, align 1
  %270 = load i8, i8* %noper_next_type, align 1
  %conv416 = zext i8 %270 to i32
  %tobool417 = icmp ne i32 %conv416, 0
  br i1 %tobool417, label %cond.true418, label %cond.false462

cond.true418:                                     ; preds = %cond.end413
  %271 = load i8, i8* %noper_next_type, align 1
  %conv419 = zext i8 %271 to i32
  %cmp420 = icmp eq i32 40, %conv419
  br i1 %cmp420, label %cond.true422, label %cond.false423

cond.true422:                                     ; preds = %cond.true418
  br label %cond.end460

cond.false423:                                    ; preds = %cond.true418
  %272 = load i8, i8* %noper_next_type, align 1
  %conv424 = zext i8 %272 to i32
  %cmp425 = icmp eq i32 31, %conv424
  br i1 %cmp425, label %cond.true427, label %cond.false428

cond.true427:                                     ; preds = %cond.false423
  br label %cond.end458

cond.false428:                                    ; preds = %cond.false423
  %273 = load i8, i8* %noper_next_type, align 1
  %conv429 = zext i8 %273 to i32
  %cmp430 = icmp eq i32 35, %conv429
  br i1 %cmp430, label %cond.true436, label %lor.lhs.false432

lor.lhs.false432:                                 ; preds = %cond.false428
  %274 = load i8, i8* %noper_next_type, align 1
  %conv433 = zext i8 %274 to i32
  %cmp434 = icmp eq i32 37, %conv433
  br i1 %cmp434, label %cond.true436, label %cond.false437

cond.true436:                                     ; preds = %lor.lhs.false432, %cond.false428
  br label %cond.end456

cond.false437:                                    ; preds = %lor.lhs.false432
  %275 = load i8, i8* %noper_next_type, align 1
  %conv438 = zext i8 %275 to i32
  %cmp439 = icmp eq i32 36, %conv438
  br i1 %cmp439, label %cond.true441, label %cond.false442

cond.true441:                                     ; preds = %cond.false437
  br label %cond.end454

cond.false442:                                    ; preds = %cond.false437
  %276 = load i8, i8* %noper_next_type, align 1
  %conv443 = zext i8 %276 to i32
  %cmp444 = icmp eq i32 32, %conv443
  br i1 %cmp444, label %cond.true446, label %cond.false447

cond.true446:                                     ; preds = %cond.false442
  br label %cond.end452

cond.false447:                                    ; preds = %cond.false442
  %277 = load i8, i8* %noper_next_type, align 1
  %conv448 = zext i8 %277 to i32
  %cmp449 = icmp eq i32 38, %conv448
  %278 = zext i1 %cmp449 to i64
  %cond451 = select i1 %cmp449, i32 38, i32 0
  br label %cond.end452

cond.end452:                                      ; preds = %cond.false447, %cond.true446
  %cond453 = phi i32 [ 32, %cond.true446 ], [ %cond451, %cond.false447 ]
  br label %cond.end454

cond.end454:                                      ; preds = %cond.end452, %cond.true441
  %cond455 = phi i32 [ 36, %cond.true441 ], [ %cond453, %cond.end452 ]
  br label %cond.end456

cond.end456:                                      ; preds = %cond.end454, %cond.true436
  %cond457 = phi i32 [ 35, %cond.true436 ], [ %cond455, %cond.end454 ]
  br label %cond.end458

cond.end458:                                      ; preds = %cond.end456, %cond.true427
  %cond459 = phi i32 [ 31, %cond.true427 ], [ %cond457, %cond.end456 ]
  br label %cond.end460

cond.end460:                                      ; preds = %cond.end458, %cond.true422
  %cond461 = phi i32 [ 40, %cond.true422 ], [ %cond459, %cond.end458 ]
  br label %cond.end463

cond.false462:                                    ; preds = %cond.end413
  br label %cond.end463

cond.end463:                                      ; preds = %cond.false462, %cond.end460
  %cond464 = phi i32 [ %cond461, %cond.end460 ], [ 0, %cond.false462 ]
  %conv465 = trunc i32 %cond464 to i8
  store i8 %conv465, i8* %noper_next_trietype, align 1
  %279 = load i8, i8* %noper_next_trietype, align 1
  %tobool466 = icmp ne i8 %279, 0
  br i1 %tobool466, label %if.then467, label %if.else468

if.then467:                                       ; preds = %cond.end463
  %280 = load i8, i8* %noper_next_trietype, align 1
  store i8 %280, i8* %trietype, align 1
  br label %if.end472

if.else468:                                       ; preds = %cond.end463
  %281 = load i8, i8* %noper_next_type, align 1
  %tobool469 = icmp ne i8 %281, 0
  br i1 %tobool469, label %if.then470, label %if.end471

if.then470:                                       ; preds = %if.else468
  store %struct.regnode* null, %struct.regnode** %first, align 8
  br label %if.end471

if.end471:                                        ; preds = %if.then470, %if.else468
  br label %if.end472

if.end472:                                        ; preds = %if.end471, %if.then467
  br label %if.end474

if.else473:                                       ; preds = %if.then399
  %282 = load i8, i8* %noper_trietype, align 1
  store i8 %282, i8* %trietype, align 1
  br label %if.end474

if.end474:                                        ; preds = %if.else473, %if.end472
  br label %if.end481

if.else475:                                       ; preds = %if.then397
  %283 = load i8, i8* %trietype, align 1
  %conv476 = zext i8 %283 to i32
  %cmp477 = icmp eq i32 %conv476, 40
  br i1 %cmp477, label %if.then479, label %if.end480

if.then479:                                       ; preds = %if.else475
  %284 = load i8, i8* %noper_trietype, align 1
  store i8 %284, i8* %trietype, align 1
  br label %if.end480

if.end480:                                        ; preds = %if.then479, %if.else475
  %285 = load %struct.regnode*, %struct.regnode** %cur, align 8
  store %struct.regnode* %285, %struct.regnode** %last322, align 8
  br label %if.end481

if.end481:                                        ; preds = %if.end480, %if.end474
  %286 = load %struct.regnode*, %struct.regnode** %first, align 8
  %tobool482 = icmp ne %struct.regnode* %286, null
  br i1 %tobool482, label %if.then483, label %if.end485

if.then483:                                       ; preds = %if.end481
  %287 = load i32, i32* %count, align 4
  %inc484 = add i32 %287, 1
  store i32 %inc484, i32* %count, align 4
  br label %if.end485

if.end485:                                        ; preds = %if.then483, %if.end481
  br label %if.end508

if.else486:                                       ; preds = %land.lhs.true394, %lor.lhs.false389, %cond.end376
  %288 = load %struct.regnode*, %struct.regnode** %last322, align 8
  %tobool487 = icmp ne %struct.regnode* %288, null
  br i1 %tobool487, label %if.then488, label %if.end500

if.then488:                                       ; preds = %if.else486
  %289 = load i8, i8* %trietype, align 1
  %conv489 = zext i8 %289 to i32
  %tobool490 = icmp ne i32 %conv489, 0
  br i1 %tobool490, label %land.lhs.true491, label %if.end499

land.lhs.true491:                                 ; preds = %if.then488
  %290 = load i8, i8* %trietype, align 1
  %conv492 = zext i8 %290 to i32
  %cmp493 = icmp ne i32 %conv492, 40
  br i1 %cmp493, label %if.then495, label %if.end499

if.then495:                                       ; preds = %land.lhs.true491
  %291 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %292 = load %struct.regnode*, %struct.regnode** %startbranch, align 8
  %293 = load %struct.regnode*, %struct.regnode** %first, align 8
  %294 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %295 = load %struct.regnode*, %struct.regnode** %tail, align 8
  %296 = load i32, i32* %count, align 4
  %297 = load i8, i8* %trietype, align 1
  %conv496 = zext i8 %297 to i32
  %298 = load i32, i32* %depth.addr, align 4
  %add497 = add i32 %298, 1
  %call498 = call i32 @S_make_trie(%struct.RExC_state_t* %291, %struct.regnode* %292, %struct.regnode* %293, %struct.regnode* %294, %struct.regnode* %295, i32 %296, i32 %conv496, i32 %add497)
  br label %if.end499

if.end499:                                        ; preds = %if.then495, %land.lhs.true491, %if.then488
  store %struct.regnode* null, %struct.regnode** %last322, align 8
  br label %if.end500

if.end500:                                        ; preds = %if.end499, %if.else486
  %299 = load i8, i8* %noper_trietype, align 1
  %tobool501 = icmp ne i8 %299, 0
  br i1 %tobool501, label %if.then502, label %if.else503

if.then502:                                       ; preds = %if.end500
  store i32 1, i32* %count, align 4
  %300 = load %struct.regnode*, %struct.regnode** %cur, align 8
  store %struct.regnode* %300, %struct.regnode** %first, align 8
  %301 = load i8, i8* %noper_trietype, align 1
  store i8 %301, i8* %trietype, align 1
  br label %if.end507

if.else503:                                       ; preds = %if.end500
  %302 = load %struct.regnode*, %struct.regnode** %first, align 8
  %tobool504 = icmp ne %struct.regnode* %302, null
  br i1 %tobool504, label %if.then505, label %if.end506

if.then505:                                       ; preds = %if.else503
  store i32 0, i32* %count, align 4
  store %struct.regnode* null, %struct.regnode** %first, align 8
  store i8 0, i8* %trietype, align 1
  br label %if.end506

if.end506:                                        ; preds = %if.then505, %if.else503
  br label %if.end507

if.end507:                                        ; preds = %if.end506, %if.then502
  br label %if.end508

if.end508:                                        ; preds = %if.end507, %if.end485
  br label %for.inc

for.inc:                                          ; preds = %if.end508
  %303 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %call509 = call %struct.regnode* @Perl_regnext(%struct.regnode* %303)
  store %struct.regnode* %call509, %struct.regnode** %cur, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %304 = load %struct.regnode*, %struct.regnode** %last322, align 8
  %tobool510 = icmp ne %struct.regnode* %304, null
  br i1 %tobool510, label %land.lhs.true511, label %if.end561

land.lhs.true511:                                 ; preds = %for.end
  %305 = load i8, i8* %trietype, align 1
  %conv512 = zext i8 %305 to i32
  %tobool513 = icmp ne i32 %conv512, 0
  br i1 %tobool513, label %if.then514, label %if.end561

if.then514:                                       ; preds = %land.lhs.true511
  %306 = load i8, i8* %trietype, align 1
  %conv515 = zext i8 %306 to i32
  %cmp516 = icmp ne i32 %conv515, 40
  br i1 %cmp516, label %if.then518, label %if.else544

if.then518:                                       ; preds = %if.then514
  %307 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %308 = load %struct.regnode*, %struct.regnode** %startbranch, align 8
  %309 = load %struct.regnode*, %struct.regnode** %first, align 8
  %310 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %311 = load %struct.regnode*, %struct.regnode** %tail, align 8
  %312 = load i32, i32* %count, align 4
  %313 = load i8, i8* %trietype, align 1
  %conv519 = zext i8 %313 to i32
  %314 = load i32, i32* %depth.addr, align 4
  %add520 = add i32 %314, 1
  %call521 = call i32 @S_make_trie(%struct.RExC_state_t* %307, %struct.regnode* %308, %struct.regnode* %309, %struct.regnode* %310, %struct.regnode* %311, i32 %312, i32 %conv519, i32 %add520)
  store i32 %call521, i32* %made, align 4
  %315 = load i32, i32* %made, align 4
  %cmp522 = icmp eq i32 %315, 4
  br i1 %cmp522, label %land.lhs.true524, label %lor.lhs.false527

land.lhs.true524:                                 ; preds = %if.then518
  %316 = load %struct.regnode*, %struct.regnode** %startbranch, align 8
  %317 = load %struct.regnode*, %struct.regnode** %first, align 8
  %cmp525 = icmp eq %struct.regnode* %316, %317
  br i1 %cmp525, label %land.lhs.true530, label %lor.lhs.false527

lor.lhs.false527:                                 ; preds = %land.lhs.true524, %if.then518
  %318 = load %struct.regnode*, %struct.regnode** %first_non_open, align 8
  %319 = load %struct.regnode*, %struct.regnode** %first, align 8
  %cmp528 = icmp eq %struct.regnode* %318, %319
  br i1 %cmp528, label %land.lhs.true530, label %if.end543

land.lhs.true530:                                 ; preds = %lor.lhs.false527, %land.lhs.true524
  %320 = load i32, i32* %depth.addr, align 4
  %cmp531 = icmp eq i32 %320, 0
  br i1 %cmp531, label %if.then533, label %if.end543

if.then533:                                       ; preds = %land.lhs.true530
  %321 = load i32, i32* %flags.addr, align 4
  %or534 = or i32 %321, 16384
  store i32 %or534, i32* %flags.addr, align 4
  %322 = load %struct.regnode*, %struct.regnode** %startbranch, align 8
  %323 = load %struct.regnode*, %struct.regnode** %first, align 8
  %cmp535 = icmp eq %struct.regnode* %322, %323
  br i1 %cmp535, label %land.lhs.true537, label %if.end542

land.lhs.true537:                                 ; preds = %if.then533
  %324 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %325 = load %struct.regnode*, %struct.regnode** %tail, align 8
  %cmp538 = icmp eq %struct.regnode* %324, %325
  br i1 %cmp538, label %if.then540, label %if.end542

if.then540:                                       ; preds = %land.lhs.true537
  %326 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %326, i32 0, i32 16
  %327 = load i32, i32* %seen, align 8
  %and541 = and i32 %327, -65
  store i32 %and541, i32* %seen, align 8
  br label %if.end542

if.end542:                                        ; preds = %if.then540, %land.lhs.true537, %if.then533
  br label %if.end543

if.end543:                                        ; preds = %if.end542, %land.lhs.true530, %lor.lhs.false527
  br label %if.end560

if.else544:                                       ; preds = %if.then514
  %328 = load %struct.regnode*, %struct.regnode** %startbranch, align 8
  %329 = load %struct.regnode*, %struct.regnode** %first, align 8
  %cmp545 = icmp eq %struct.regnode* %328, %329
  br i1 %cmp545, label %if.then547, label %if.end559

if.then547:                                       ; preds = %if.else544
  %330 = load %struct.regnode*, %struct.regnode** %startbranch, align 8
  %type548 = getelementptr inbounds %struct.regnode, %struct.regnode* %330, i32 0, i32 1
  store i8 40, i8* %type548, align 1
  %331 = load %struct.regnode*, %struct.regnode** %tail, align 8
  %332 = load %struct.regnode*, %struct.regnode** %startbranch, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.regnode* %331 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.regnode* %332 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %conv549 = trunc i64 %sub.ptr.div to i16
  %333 = load %struct.regnode*, %struct.regnode** %startbranch, align 8
  %next_off550 = getelementptr inbounds %struct.regnode, %struct.regnode* %333, i32 0, i32 2
  store i16 %conv549, i16* %next_off550, align 2
  %334 = load %struct.regnode*, %struct.regnode** %startbranch, align 8
  %add.ptr551 = getelementptr inbounds %struct.regnode, %struct.regnode* %334, i64 1
  store %struct.regnode* %add.ptr551, %struct.regnode** %opt, align 8
  br label %for.cond552

for.cond552:                                      ; preds = %for.inc557, %if.then547
  %335 = load %struct.regnode*, %struct.regnode** %opt, align 8
  %336 = load %struct.regnode*, %struct.regnode** %tail, align 8
  %cmp553 = icmp ult %struct.regnode* %335, %336
  br i1 %cmp553, label %for.body555, label %for.end558

for.body555:                                      ; preds = %for.cond552
  %337 = load %struct.regnode*, %struct.regnode** %opt, align 8
  %type556 = getelementptr inbounds %struct.regnode, %struct.regnode* %337, i32 0, i32 1
  store i8 92, i8* %type556, align 1
  br label %for.inc557

for.inc557:                                       ; preds = %for.body555
  %338 = load %struct.regnode*, %struct.regnode** %opt, align 8
  %incdec.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %338, i32 1
  store %struct.regnode* %incdec.ptr, %struct.regnode** %opt, align 8
  br label %for.cond552

for.end558:                                       ; preds = %for.cond552
  br label %if.end559

if.end559:                                        ; preds = %for.end558, %if.else544
  br label %if.end560

if.end560:                                        ; preds = %if.end559, %if.end543
  br label %if.end561

if.end561:                                        ; preds = %if.end560, %land.lhs.true511, %for.end
  br label %if.end562

if.end562:                                        ; preds = %if.end561, %cond.end317
  br label %if.end563

if.end563:                                        ; preds = %if.end562, %if.end296
  br label %if.end573

if.else564:                                       ; preds = %lor.lhs.false129
  %339 = load i32, i32* %code, align 4
  %cmp565 = icmp eq i32 %339, 62
  br i1 %cmp565, label %if.then567, label %if.else570

if.then567:                                       ; preds = %if.else564
  %340 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr568 = getelementptr inbounds %struct.regnode, %struct.regnode* %340, i64 1
  %add.ptr569 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr568, i64 1
  store %struct.regnode* %add.ptr569, %struct.regnode** %scan, align 8
  br label %if.end572

if.else570:                                       ; preds = %if.else564
  %341 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr571 = getelementptr inbounds %struct.regnode, %struct.regnode* %341, i64 1
  store %struct.regnode* %add.ptr571, %struct.regnode** %scan, align 8
  br label %if.end572

if.end572:                                        ; preds = %if.else570, %if.then567
  br label %if.end573

if.end573:                                        ; preds = %if.end572, %if.end563
  br label %while.cond15

if.else574:                                       ; preds = %lor.lhs.false116
  %342 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type575 = getelementptr inbounds %struct.regnode, %struct.regnode* %342, i32 0, i32 1
  %343 = load i8, i8* %type575, align 1
  %conv576 = zext i8 %343 to i32
  %cmp577 = icmp eq i32 %conv576, 65
  br i1 %cmp577, label %if.then589, label %lor.lhs.false579

lor.lhs.false579:                                 ; preds = %if.else574
  %344 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type580 = getelementptr inbounds %struct.regnode, %struct.regnode* %344, i32 0, i32 1
  %345 = load i8, i8* %type580, align 1
  %conv581 = zext i8 %345 to i32
  %cmp582 = icmp eq i32 %conv581, 76
  br i1 %cmp582, label %if.then589, label %lor.lhs.false584

lor.lhs.false584:                                 ; preds = %lor.lhs.false579
  %346 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type585 = getelementptr inbounds %struct.regnode, %struct.regnode* %346, i32 0, i32 1
  %347 = load i8, i8* %type585, align 1
  %conv586 = zext i8 %347 to i32
  %cmp587 = icmp eq i32 %conv586, 77
  br i1 %cmp587, label %if.then589, label %if.else722

if.then589:                                       ; preds = %lor.lhs.false584, %lor.lhs.false579, %if.else574
  store i32 0, i32* %paren, align 4
  store %struct.regnode* null, %struct.regnode** %start, align 8
  store %struct.regnode* null, %struct.regnode** %end, align 8
  %348 = load i32, i32* %recursed_depth.addr, align 4
  store i32 %348, i32* %my_recursed_depth, align 4
  %349 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type590 = getelementptr inbounds %struct.regnode, %struct.regnode* %349, i32 0, i32 1
  %350 = load i8, i8* %type590, align 1
  %conv591 = zext i8 %350 to i32
  %cmp592 = icmp ne i32 %conv591, 65
  br i1 %cmp592, label %if.then594, label %if.else692

if.then594:                                       ; preds = %if.then589
  %351 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type595 = getelementptr inbounds %struct.regnode, %struct.regnode* %351, i32 0, i32 1
  %352 = load i8, i8* %type595, align 1
  %conv596 = zext i8 %352 to i32
  %cmp597 = icmp eq i32 %conv596, 76
  br i1 %cmp597, label %if.then599, label %if.else609

if.then599:                                       ; preds = %if.then594
  %353 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %354 = bitcast %struct.regnode* %353 to %struct.regnode_1*
  %arg1600 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %354, i32 0, i32 3
  %355 = load i32, i32* %arg1600, align 4
  store i32 %355, i32* %paren, align 4
  %356 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %357 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %recurse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %357, i32 0, i32 29
  %358 = load %struct.regnode**, %struct.regnode*** %recurse, align 8
  %359 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %360 = bitcast %struct.regnode* %359 to %struct.regnode_2L*
  %arg2 = getelementptr inbounds %struct.regnode_2L, %struct.regnode_2L* %360, i32 0, i32 4
  %361 = load i32, i32* %arg2, align 4
  %idxprom601 = sext i32 %361 to i64
  %arrayidx602 = getelementptr inbounds %struct.regnode*, %struct.regnode** %358, i64 %idxprom601
  store %struct.regnode* %356, %struct.regnode** %arrayidx602, align 8
  %362 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %open_parens = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %362, i32 0, i32 22
  %363 = load %struct.regnode**, %struct.regnode*** %open_parens, align 8
  %364 = load i32, i32* %paren, align 4
  %sub603 = sub nsw i32 %364, 1
  %idxprom604 = sext i32 %sub603 to i64
  %arrayidx605 = getelementptr inbounds %struct.regnode*, %struct.regnode** %363, i64 %idxprom604
  %365 = load %struct.regnode*, %struct.regnode** %arrayidx605, align 8
  store %struct.regnode* %365, %struct.regnode** %start, align 8
  %366 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %close_parens = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %366, i32 0, i32 23
  %367 = load %struct.regnode**, %struct.regnode*** %close_parens, align 8
  %368 = load i32, i32* %paren, align 4
  %sub606 = sub nsw i32 %368, 1
  %idxprom607 = sext i32 %sub606 to i64
  %arrayidx608 = getelementptr inbounds %struct.regnode*, %struct.regnode** %367, i64 %idxprom607
  %369 = load %struct.regnode*, %struct.regnode** %arrayidx608, align 8
  store %struct.regnode* %369, %struct.regnode** %end, align 8
  br label %if.end611

if.else609:                                       ; preds = %if.then594
  %370 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %370, i32 0, i32 5
  %371 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi, align 8
  %program = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %371, i32 0, i32 6
  %arraydecay = getelementptr inbounds [1 x %struct.regnode], [1 x %struct.regnode]* %program, i64 0, i64 0
  %add.ptr610 = getelementptr inbounds %struct.regnode, %struct.regnode* %arraydecay, i64 1
  store %struct.regnode* %add.ptr610, %struct.regnode** %start, align 8
  %372 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %opend = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %372, i32 0, i32 24
  %373 = load %struct.regnode*, %struct.regnode** %opend, align 8
  store %struct.regnode* %373, %struct.regnode** %end, align 8
  br label %if.end611

if.end611:                                        ; preds = %if.else609, %if.then599
  %374 = load i32, i32* %flags.addr, align 4
  %and612 = and i32 %374, 131072
  %tobool613 = icmp ne i32 %and612, 0
  br i1 %tobool613, label %if.then628, label %lor.lhs.false614

lor.lhs.false614:                                 ; preds = %if.end611
  %375 = load i32, i32* %is_inf_internal, align 4
  %tobool615 = icmp ne i32 %375, 0
  br i1 %tobool615, label %land.lhs.true624, label %lor.lhs.false616

lor.lhs.false616:                                 ; preds = %lor.lhs.false614
  %376 = load i32, i32* %is_inf, align 4
  %tobool617 = icmp ne i32 %376, 0
  br i1 %tobool617, label %land.lhs.true624, label %lor.lhs.false618

lor.lhs.false618:                                 ; preds = %lor.lhs.false616
  %377 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool619 = icmp ne %struct.scan_data_t* %377, null
  br i1 %tobool619, label %land.lhs.true620, label %if.end630

land.lhs.true620:                                 ; preds = %lor.lhs.false618
  %378 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags621 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %378, i32 0, i32 16
  %379 = load i32, i32* %flags621, align 8
  %and622 = and i32 %379, 64
  %tobool623 = icmp ne i32 %and622, 0
  br i1 %tobool623, label %land.lhs.true624, label %if.end630

land.lhs.true624:                                 ; preds = %land.lhs.true620, %lor.lhs.false616, %lor.lhs.false614
  %380 = load i32, i32* %flags.addr, align 4
  %and625 = and i32 %380, 7168
  %cmp626 = icmp eq i32 %and625, 0
  br i1 %cmp626, label %if.then628, label %if.end630

if.then628:                                       ; preds = %land.lhs.true624, %if.end611
  %381 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call629 = call %struct.regnode* @Perl_regnext(%struct.regnode* %381)
  store %struct.regnode* %call629, %struct.regnode** %scan, align 8
  br label %while.cond15

if.end630:                                        ; preds = %land.lhs.true624, %land.lhs.true620, %lor.lhs.false618
  %382 = load i32, i32* %recursed_depth.addr, align 4
  %tobool631 = icmp ne i32 %382, 0
  br i1 %tobool631, label %lor.lhs.false632, label %if.then641

lor.lhs.false632:                                 ; preds = %if.end630
  %383 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %study_chunk_recursed = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %383, i32 0, i32 31
  %384 = load i8*, i8** %study_chunk_recursed, align 8
  %385 = load i32, i32* %recursed_depth.addr, align 4
  %sub633 = sub i32 %385, 1
  %386 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %study_chunk_recursed_bytes = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %386, i32 0, i32 32
  %387 = load i32, i32* %study_chunk_recursed_bytes, align 8
  %mul = mul i32 %sub633, %387
  %idx.ext = zext i32 %mul to i64
  %add.ptr634 = getelementptr inbounds i8, i8* %384, i64 %idx.ext
  %388 = load i32, i32* %paren, align 4
  %shr = ashr i32 %388, 3
  %idxprom635 = sext i32 %shr to i64
  %arrayidx636 = getelementptr inbounds i8, i8* %add.ptr634, i64 %idxprom635
  %389 = load i8, i8* %arrayidx636, align 1
  %conv637 = zext i8 %389 to i32
  %390 = load i32, i32* %paren, align 4
  %and638 = and i32 %390, 7
  %shl = shl i32 1, %and638
  %and639 = and i32 %conv637, %shl
  %tobool640 = icmp ne i32 %and639, 0
  br i1 %tobool640, label %if.else678, label %if.then641

if.then641:                                       ; preds = %lor.lhs.false632, %if.end630
  %391 = load i32, i32* %recursed_depth.addr, align 4
  %tobool642 = icmp ne i32 %391, 0
  br i1 %tobool642, label %if.else648, label %if.then643

if.then643:                                       ; preds = %if.then641
  %392 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %study_chunk_recursed644 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %392, i32 0, i32 31
  %393 = load i8*, i8** %study_chunk_recursed644, align 8
  %394 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %study_chunk_recursed_bytes645 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %394, i32 0, i32 32
  %395 = load i32, i32* %study_chunk_recursed_bytes645, align 8
  %conv646 = zext i32 %395 to i64
  %mul647 = mul i64 %conv646, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %393, i8 0, i64 %mul647, i1 false)
  br label %if.end663

if.else648:                                       ; preds = %if.then641
  %396 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %study_chunk_recursed649 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %396, i32 0, i32 31
  %397 = load i8*, i8** %study_chunk_recursed649, align 8
  %398 = load i32, i32* %recursed_depth.addr, align 4
  %399 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %study_chunk_recursed_bytes650 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %399, i32 0, i32 32
  %400 = load i32, i32* %study_chunk_recursed_bytes650, align 8
  %mul651 = mul i32 %398, %400
  %idx.ext652 = zext i32 %mul651 to i64
  %add.ptr653 = getelementptr inbounds i8, i8* %397, i64 %idx.ext652
  %401 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %study_chunk_recursed654 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %401, i32 0, i32 31
  %402 = load i8*, i8** %study_chunk_recursed654, align 8
  %403 = load i32, i32* %recursed_depth.addr, align 4
  %sub655 = sub i32 %403, 1
  %404 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %study_chunk_recursed_bytes656 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %404, i32 0, i32 32
  %405 = load i32, i32* %study_chunk_recursed_bytes656, align 8
  %mul657 = mul i32 %sub655, %405
  %idx.ext658 = zext i32 %mul657 to i64
  %add.ptr659 = getelementptr inbounds i8, i8* %402, i64 %idx.ext658
  %406 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %study_chunk_recursed_bytes660 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %406, i32 0, i32 32
  %407 = load i32, i32* %study_chunk_recursed_bytes660, align 8
  %conv661 = zext i32 %407 to i64
  %mul662 = mul i64 %conv661, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr653, i8* align 1 %add.ptr659, i64 %mul662, i1 false)
  br label %if.end663

if.end663:                                        ; preds = %if.else648, %if.then643
  %408 = load i32, i32* %paren, align 4
  %and664 = and i32 %408, 7
  %shl665 = shl i32 1, %and664
  %409 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %study_chunk_recursed666 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %409, i32 0, i32 31
  %410 = load i8*, i8** %study_chunk_recursed666, align 8
  %411 = load i32, i32* %recursed_depth.addr, align 4
  %412 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %study_chunk_recursed_bytes667 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %412, i32 0, i32 32
  %413 = load i32, i32* %study_chunk_recursed_bytes667, align 8
  %mul668 = mul i32 %411, %413
  %idx.ext669 = zext i32 %mul668 to i64
  %add.ptr670 = getelementptr inbounds i8, i8* %410, i64 %idx.ext669
  %414 = load i32, i32* %paren, align 4
  %shr671 = ashr i32 %414, 3
  %idxprom672 = sext i32 %shr671 to i64
  %arrayidx673 = getelementptr inbounds i8, i8* %add.ptr670, i64 %idxprom672
  %415 = load i8, i8* %arrayidx673, align 1
  %conv674 = zext i8 %415 to i32
  %or675 = or i32 %conv674, %shl665
  %conv676 = trunc i32 %or675 to i8
  store i8 %conv676, i8* %arrayidx673, align 1
  %416 = load i32, i32* %recursed_depth.addr, align 4
  %add677 = add i32 %416, 1
  store i32 %add677, i32* %my_recursed_depth, align 4
  br label %if.end691

if.else678:                                       ; preds = %lor.lhs.false632
  %417 = load i32, i32* %flags.addr, align 4
  %and679 = and i32 %417, 1024
  %tobool680 = icmp ne i32 %and679, 0
  br i1 %tobool680, label %if.then681, label %if.end684

if.then681:                                       ; preds = %if.else678
  %418 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %419 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %420 = load i64*, i64** %minlenp.addr, align 8
  %421 = load i32, i32* %is_inf, align 4
  call void @S_scan_commit(%struct.RExC_state_t* %418, %struct.scan_data_t* %419, i64* %420, i32 %421)
  %422 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_float682 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %422, i32 0, i32 11
  %423 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest683 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %423, i32 0, i32 6
  store %struct.sv** %longest_float682, %struct.sv*** %longest683, align 8
  br label %if.end684

if.end684:                                        ; preds = %if.then681, %if.else678
  store i32 1, i32* %is_inf_internal, align 4
  store i32 1, i32* %is_inf, align 4
  %424 = load i32, i32* %flags.addr, align 4
  %and685 = and i32 %424, 4096
  %tobool686 = icmp ne i32 %and685, 0
  br i1 %tobool686, label %if.then687, label %if.end689

if.then687:                                       ; preds = %if.end684
  %425 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class688 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %425, i32 0, i32 19
  %426 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class688, align 8
  call void @S_ssc_anything(%struct.regnode_ssc* %426)
  br label %if.end689

if.end689:                                        ; preds = %if.then687, %if.end684
  %427 = load i32, i32* %flags.addr, align 4
  %and690 = and i32 %427, -6145
  store i32 %and690, i32* %flags.addr, align 4
  store %struct.regnode* null, %struct.regnode** %start, align 8
  br label %if.end691

if.end691:                                        ; preds = %if.end689, %if.end663
  br label %if.end695

if.else692:                                       ; preds = %if.then589
  %428 = load i32, i32* %stopparen.addr, align 4
  store i32 %428, i32* %paren, align 4
  %429 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr693 = getelementptr inbounds %struct.regnode, %struct.regnode* %429, i64 2
  store %struct.regnode* %add.ptr693, %struct.regnode** %start, align 8
  %430 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call694 = call %struct.regnode* @Perl_regnext(%struct.regnode* %430)
  store %struct.regnode* %call694, %struct.regnode** %end, align 8
  br label %if.end695

if.end695:                                        ; preds = %if.else692, %if.end691
  %431 = load %struct.regnode*, %struct.regnode** %start, align 8
  %tobool696 = icmp ne %struct.regnode* %431, null
  br i1 %tobool696, label %if.then697, label %if.end721

if.then697:                                       ; preds = %if.end695
  %432 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %frame_last = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %432, i32 0, i32 43
  %433 = load %struct.scan_frame*, %struct.scan_frame** %frame_last, align 8
  %tobool698 = icmp ne %struct.scan_frame* %433, null
  br i1 %tobool698, label %if.else702, label %if.then699

if.then699:                                       ; preds = %if.then697
  %call700 = call i8* @Perl_safesyscalloc(i64 1, i64 56)
  %434 = bitcast i8* %call700 to %struct.scan_frame*
  store %struct.scan_frame* %434, %struct.scan_frame** %newframe, align 8
  %435 = load %struct.scan_frame*, %struct.scan_frame** %newframe, align 8
  %436 = bitcast %struct.scan_frame* %435 to i8*
  call void @Perl_save_destructor_x(void (i8*)* @S_unwind_scan_frames, i8* %436)
  %437 = load %struct.scan_frame*, %struct.scan_frame** %newframe, align 8
  %438 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %frame_head = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %438, i32 0, i32 42
  store %struct.scan_frame* %437, %struct.scan_frame** %frame_head, align 8
  %439 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %frame_count = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %439, i32 0, i32 44
  %440 = load i32, i32* %frame_count, align 8
  %inc701 = add i32 %440, 1
  store i32 %inc701, i32* %frame_count, align 8
  br label %if.end716

if.else702:                                       ; preds = %if.then697
  %441 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %frame_last703 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %441, i32 0, i32 43
  %442 = load %struct.scan_frame*, %struct.scan_frame** %frame_last703, align 8
  %next_frame = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %442, i32 0, i32 7
  %443 = load %struct.scan_frame*, %struct.scan_frame** %next_frame, align 8
  %tobool704 = icmp ne %struct.scan_frame* %443, null
  br i1 %tobool704, label %if.else712, label %if.then705

if.then705:                                       ; preds = %if.else702
  %call706 = call i8* @Perl_safesyscalloc(i64 1, i64 56)
  %444 = bitcast i8* %call706 to %struct.scan_frame*
  store %struct.scan_frame* %444, %struct.scan_frame** %newframe, align 8
  %445 = load %struct.scan_frame*, %struct.scan_frame** %newframe, align 8
  %446 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %frame_last707 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %446, i32 0, i32 43
  %447 = load %struct.scan_frame*, %struct.scan_frame** %frame_last707, align 8
  %next_frame708 = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %447, i32 0, i32 7
  store %struct.scan_frame* %445, %struct.scan_frame** %next_frame708, align 8
  %448 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %frame_last709 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %448, i32 0, i32 43
  %449 = load %struct.scan_frame*, %struct.scan_frame** %frame_last709, align 8
  %450 = load %struct.scan_frame*, %struct.scan_frame** %newframe, align 8
  %prev_frame = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %450, i32 0, i32 6
  store %struct.scan_frame* %449, %struct.scan_frame** %prev_frame, align 8
  %451 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %frame_count710 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %451, i32 0, i32 44
  %452 = load i32, i32* %frame_count710, align 8
  %inc711 = add i32 %452, 1
  store i32 %inc711, i32* %frame_count710, align 8
  br label %if.end715

if.else712:                                       ; preds = %if.else702
  %453 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %frame_last713 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %453, i32 0, i32 43
  %454 = load %struct.scan_frame*, %struct.scan_frame** %frame_last713, align 8
  %next_frame714 = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %454, i32 0, i32 7
  %455 = load %struct.scan_frame*, %struct.scan_frame** %next_frame714, align 8
  store %struct.scan_frame* %455, %struct.scan_frame** %newframe, align 8
  br label %if.end715

if.end715:                                        ; preds = %if.else712, %if.then705
  br label %if.end716

if.end716:                                        ; preds = %if.end715, %if.then699
  %456 = load %struct.scan_frame*, %struct.scan_frame** %newframe, align 8
  %457 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %frame_last717 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %457, i32 0, i32 43
  store %struct.scan_frame* %456, %struct.scan_frame** %frame_last717, align 8
  %458 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call718 = call %struct.regnode* @Perl_regnext(%struct.regnode* %458)
  %459 = load %struct.scan_frame*, %struct.scan_frame** %newframe, align 8
  %next_regnode = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %459, i32 0, i32 1
  store %struct.regnode* %call718, %struct.regnode** %next_regnode, align 8
  %460 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  %461 = load %struct.scan_frame*, %struct.scan_frame** %newframe, align 8
  %last_regnode = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %461, i32 0, i32 0
  store %struct.regnode* %460, %struct.regnode** %last_regnode, align 8
  %462 = load i32, i32* %stopparen.addr, align 4
  %463 = load %struct.scan_frame*, %struct.scan_frame** %newframe, align 8
  %stopparen719 = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %463, i32 0, i32 3
  store i32 %462, i32* %stopparen719, align 4
  %464 = load i32, i32* %recursed_depth.addr, align 4
  %465 = load %struct.scan_frame*, %struct.scan_frame** %newframe, align 8
  %prev_recursed_depth = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %465, i32 0, i32 2
  store i32 %464, i32* %prev_recursed_depth, align 8
  %466 = load %struct.scan_frame*, %struct.scan_frame** %frame, align 8
  %467 = load %struct.scan_frame*, %struct.scan_frame** %newframe, align 8
  %this_prev_frame = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %467, i32 0, i32 5
  store %struct.scan_frame* %466, %struct.scan_frame** %this_prev_frame, align 8
  %468 = load %struct.scan_frame*, %struct.scan_frame** %newframe, align 8
  store %struct.scan_frame* %468, %struct.scan_frame** %frame, align 8
  %469 = load %struct.regnode*, %struct.regnode** %start, align 8
  store %struct.regnode* %469, %struct.regnode** %scan, align 8
  %470 = load i32, i32* %paren, align 4
  store i32 %470, i32* %stopparen.addr, align 4
  %471 = load %struct.regnode*, %struct.regnode** %end, align 8
  store %struct.regnode* %471, %struct.regnode** %last.addr, align 8
  %472 = load i32, i32* %depth.addr, align 4
  %add720 = add i32 %472, 1
  store i32 %add720, i32* %depth.addr, align 4
  %473 = load i32, i32* %my_recursed_depth, align 4
  store i32 %473, i32* %recursed_depth.addr, align 4
  br label %while.cond15

if.end721:                                        ; preds = %if.end695
  br label %if.end2501

if.else722:                                       ; preds = %lor.lhs.false584
  %474 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type723 = getelementptr inbounds %struct.regnode, %struct.regnode* %474, i32 0, i32 1
  %475 = load i8, i8* %type723, align 1
  %conv724 = zext i8 %475 to i32
  %cmp725 = icmp eq i32 %conv724, 31
  br i1 %cmp725, label %if.then732, label %lor.lhs.false727

lor.lhs.false727:                                 ; preds = %if.else722
  %476 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type728 = getelementptr inbounds %struct.regnode, %struct.regnode* %476, i32 0, i32 1
  %477 = load i8, i8* %type728, align 1
  %conv729 = zext i8 %477 to i32
  %cmp730 = icmp eq i32 %conv729, 32
  br i1 %cmp730, label %if.then732, label %if.else846

if.then732:                                       ; preds = %lor.lhs.false727, %if.else722
  %478 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %479 = bitcast %struct.regnode* %478 to %struct.regnode_string*
  %str_len = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %479, i32 0, i32 0
  %480 = load i8, i8* %str_len, align 2
  %conv733 = zext i8 %480 to i64
  store i64 %conv733, i64* %l, align 8
  %481 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %481, i32 0, i32 25
  %482 = load i32, i32* %utf8, align 8
  %tobool734 = icmp ne i32 %482, 0
  br i1 %tobool734, label %cond.true735, label %cond.false736

cond.true735:                                     ; preds = %if.then732
  br i1 true, label %if.then737, label %if.else749

cond.false736:                                    ; preds = %if.then732
  br i1 false, label %if.then737, label %if.else749

if.then737:                                       ; preds = %cond.false736, %cond.true735
  %483 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %484 = bitcast %struct.regnode* %483 to %struct.regnode_string*
  %string = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %484, i32 0, i32 3
  %arraydecay738 = getelementptr inbounds [1 x i8], [1 x i8]* %string, i64 0, i64 0
  store i8* %arraydecay738, i8** %s, align 8
  %485 = load i8*, i8** %s, align 8
  %486 = load i8*, i8** %s, align 8
  %487 = load i64, i64* %l, align 8
  %add.ptr739 = getelementptr inbounds i8, i8* %486, i64 %487
  %488 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast740 = ptrtoint i8* %add.ptr739 to i64
  %sub.ptr.rhs.cast741 = ptrtoint i8* %488 to i64
  %sub.ptr.sub742 = sub i64 %sub.ptr.lhs.cast740, %sub.ptr.rhs.cast741
  %call743 = call zeroext i1 @Perl_ckwarn_d(i32 44)
  %489 = zext i1 %call743 to i64
  %cond745 = select i1 %call743, i32 0, i32 -8161
  %call746 = call i64 @Perl_utf8n_to_uvchr(i8* %485, i64 %sub.ptr.sub742, i64* null, i32 %cond745)
  store i64 %call746, i64* %uc, align 8
  %490 = load i8*, i8** %s, align 8
  %491 = load i8*, i8** %s, align 8
  %492 = load i64, i64* %l, align 8
  %add.ptr747 = getelementptr inbounds i8, i8* %491, i64 %492
  %call748 = call i64 @Perl_utf8_length(i8* %490, i8* %add.ptr747)
  store i64 %call748, i64* %l, align 8
  br label %if.end753

if.else749:                                       ; preds = %cond.false736, %cond.true735
  %493 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %494 = bitcast %struct.regnode* %493 to %struct.regnode_string*
  %string750 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %494, i32 0, i32 3
  %arraydecay751 = getelementptr inbounds [1 x i8], [1 x i8]* %string750, i64 0, i64 0
  %495 = load i8, i8* %arraydecay751, align 2
  %conv752 = zext i8 %495 to i64
  store i64 %conv752, i64* %uc, align 8
  br label %if.end753

if.end753:                                        ; preds = %if.else749, %if.then737
  %496 = load i64, i64* %l, align 8
  %497 = load i64, i64* %min, align 8
  %add754 = add nsw i64 %497, %496
  store i64 %add754, i64* %min, align 8
  %498 = load i32, i32* %flags.addr, align 4
  %and755 = and i32 %498, 1024
  %tobool756 = icmp ne i32 %and755, 0
  br i1 %tobool756, label %if.then757, label %if.end821

if.then757:                                       ; preds = %if.end753
  %499 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_end = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %499, i32 0, i32 3
  %500 = load i64, i64* %last_end, align 8
  %cmp758 = icmp eq i64 %500, -1
  br i1 %cmp758, label %if.then760, label %if.end770

if.then760:                                       ; preds = %if.then757
  %501 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min761 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %501, i32 0, i32 0
  %502 = load i64, i64* %pos_min761, align 8
  %503 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %503, i32 0, i32 4
  store i64 %502, i64* %last_start_min, align 8
  %504 = load i32, i32* %is_inf, align 4
  %tobool762 = icmp ne i32 %504, 0
  br i1 %tobool762, label %cond.true763, label %cond.false764

cond.true763:                                     ; preds = %if.then760
  br label %cond.end768

cond.false764:                                    ; preds = %if.then760
  %505 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min765 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %505, i32 0, i32 0
  %506 = load i64, i64* %pos_min765, align 8
  %507 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta766 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %507, i32 0, i32 1
  %508 = load i64, i64* %pos_delta766, align 8
  %add767 = add nsw i64 %506, %508
  br label %cond.end768

cond.end768:                                      ; preds = %cond.false764, %cond.true763
  %cond769 = phi i64 [ 9223372036854775807, %cond.true763 ], [ %add767, %cond.false764 ]
  %509 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_max = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %509, i32 0, i32 5
  store i64 %cond769, i64* %last_start_max, align 8
  br label %if.end770

if.end770:                                        ; preds = %cond.end768, %if.then757
  %510 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %510, i32 0, i32 2
  %511 = load %struct.sv*, %struct.sv** %last_found, align 8
  %512 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %513 = bitcast %struct.regnode* %512 to %struct.regnode_string*
  %string771 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %513, i32 0, i32 3
  %arraydecay772 = getelementptr inbounds [1 x i8], [1 x i8]* %string771, i64 0, i64 0
  %514 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %515 = bitcast %struct.regnode* %514 to %struct.regnode_string*
  %str_len773 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %515, i32 0, i32 0
  %516 = load i8, i8* %str_len773, align 2
  %conv774 = zext i8 %516 to i64
  call void @Perl_sv_catpvn_flags(%struct.sv* %511, i8* %arraydecay772, i64 %conv774, i32 2)
  %517 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8775 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %517, i32 0, i32 25
  %518 = load i32, i32* %utf8775, align 8
  %tobool776 = icmp ne i32 %518, 0
  br i1 %tobool776, label %cond.true777, label %cond.false778

cond.true777:                                     ; preds = %if.end770
  br i1 true, label %if.then779, label %if.end783

cond.false778:                                    ; preds = %if.end770
  br i1 false, label %if.then779, label %if.end783

if.then779:                                       ; preds = %cond.false778, %cond.true777
  %519 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found780 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %519, i32 0, i32 2
  %520 = load %struct.sv*, %struct.sv** %last_found780, align 8
  %sv_flags781 = getelementptr inbounds %struct.sv, %struct.sv* %520, i32 0, i32 2
  %521 = load i32, i32* %sv_flags781, align 4
  %or782 = or i32 %521, 536870912
  store i32 %or782, i32* %sv_flags781, align 4
  br label %if.end783

if.end783:                                        ; preds = %if.then779, %cond.false778, %cond.true777
  %522 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found784 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %522, i32 0, i32 2
  %523 = load %struct.sv*, %struct.sv** %last_found784, align 8
  store %struct.sv* %523, %struct.sv** %sv, align 8
  %524 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags785 = getelementptr inbounds %struct.sv, %struct.sv* %524, i32 0, i32 2
  %525 = load i32, i32* %sv_flags785, align 4
  %and786 = and i32 %525, 536870912
  %tobool787 = icmp ne i32 %and786, 0
  br i1 %tobool787, label %land.lhs.true788, label %cond.false794

land.lhs.true788:                                 ; preds = %if.end783
  %526 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags789 = getelementptr inbounds %struct.sv, %struct.sv* %526, i32 0, i32 2
  %527 = load i32, i32* %sv_flags789, align 4
  %and790 = and i32 %527, 14680064
  %tobool791 = icmp ne i32 %and790, 0
  br i1 %tobool791, label %cond.true792, label %cond.false794

cond.true792:                                     ; preds = %land.lhs.true788
  %528 = load %struct.sv*, %struct.sv** %sv, align 8
  %call793 = call %struct.magic* @Perl_mg_find(%struct.sv* %528, i32 119)
  br label %cond.end795

cond.false794:                                    ; preds = %land.lhs.true788, %if.end783
  br label %cond.end795

cond.end795:                                      ; preds = %cond.false794, %cond.true792
  %cond796 = phi %struct.magic* [ %call793, %cond.true792 ], [ null, %cond.false794 ]
  store %struct.magic* %cond796, %struct.magic** %mg, align 8
  %529 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool797 = icmp ne %struct.magic* %529, null
  br i1 %tobool797, label %land.lhs.true798, label %if.end813

land.lhs.true798:                                 ; preds = %cond.end795
  %530 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %530, i32 0, i32 5
  %531 = load i64, i64* %mg_len, align 8
  %cmp799 = icmp sge i64 %531, 0
  br i1 %cmp799, label %if.then801, label %if.end813

if.then801:                                       ; preds = %land.lhs.true798
  %532 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %533 = bitcast %struct.regnode* %532 to %struct.regnode_string*
  %string802 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %533, i32 0, i32 3
  %arraydecay803 = getelementptr inbounds [1 x i8], [1 x i8]* %string802, i64 0, i64 0
  %534 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %535 = bitcast %struct.regnode* %534 to %struct.regnode_string*
  %string804 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %535, i32 0, i32 3
  %arraydecay805 = getelementptr inbounds [1 x i8], [1 x i8]* %string804, i64 0, i64 0
  %536 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %537 = bitcast %struct.regnode* %536 to %struct.regnode_string*
  %str_len806 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %537, i32 0, i32 0
  %538 = load i8, i8* %str_len806, align 2
  %conv807 = zext i8 %538 to i32
  %idx.ext808 = sext i32 %conv807 to i64
  %add.ptr809 = getelementptr inbounds i8, i8* %arraydecay805, i64 %idx.ext808
  %call810 = call i64 @Perl_utf8_length(i8* %arraydecay803, i8* %add.ptr809)
  %539 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len811 = getelementptr inbounds %struct.magic, %struct.magic* %539, i32 0, i32 5
  %540 = load i64, i64* %mg_len811, align 8
  %add812 = add i64 %540, %call810
  store i64 %add812, i64* %mg_len811, align 8
  br label %if.end813

if.end813:                                        ; preds = %if.then801, %land.lhs.true798, %cond.end795
  %541 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min814 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %541, i32 0, i32 0
  %542 = load i64, i64* %pos_min814, align 8
  %543 = load i64, i64* %l, align 8
  %add815 = add nsw i64 %542, %543
  %544 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_end816 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %544, i32 0, i32 3
  store i64 %add815, i64* %last_end816, align 8
  %545 = load i64, i64* %l, align 8
  %546 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min817 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %546, i32 0, i32 0
  %547 = load i64, i64* %pos_min817, align 8
  %add818 = add nsw i64 %547, %545
  store i64 %add818, i64* %pos_min817, align 8
  %548 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags819 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %548, i32 0, i32 16
  %549 = load i32, i32* %flags819, align 8
  %and820 = and i32 %549, -4
  store i32 %and820, i32* %flags819, align 8
  br label %if.end821

if.end821:                                        ; preds = %if.end813, %if.end753
  %550 = load i32, i32* %flags.addr, align 4
  %and822 = and i32 %550, 2048
  %tobool823 = icmp ne i32 %and822, 0
  br i1 %tobool823, label %if.then824, label %if.else832

if.then824:                                       ; preds = %if.end821
  %551 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class825 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %551, i32 0, i32 19
  %552 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class825, align 8
  %553 = load i64, i64* %uc, align 8
  call void @S_ssc_cp_and(%struct.regnode_ssc* %552, i64 %553)
  %554 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class826 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %554, i32 0, i32 19
  %555 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class826, align 8
  %flags827 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %555, i32 0, i32 0
  %556 = load i8, i8* %flags827, align 8
  %conv828 = zext i8 %556 to i32
  %and829 = and i32 %conv828, -2
  %conv830 = trunc i32 %and829 to i8
  store i8 %conv830, i8* %flags827, align 8
  %557 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class831 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %557, i32 0, i32 19
  %558 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class831, align 8
  call void @S_ssc_clear_locale(%struct.regnode_ssc* %558)
  br label %if.end844

if.else832:                                       ; preds = %if.end821
  %559 = load i32, i32* %flags.addr, align 4
  %and833 = and i32 %559, 4096
  %tobool834 = icmp ne i32 %and833, 0
  br i1 %tobool834, label %if.then835, label %if.end843

if.then835:                                       ; preds = %if.else832
  %560 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class836 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %560, i32 0, i32 19
  %561 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class836, align 8
  %562 = load i64, i64* %uc, align 8
  %563 = load i64, i64* %uc, align 8
  call void @S_ssc_add_range(%struct.regnode_ssc* %561, i64 %562, i64 %563)
  %564 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %565 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class837 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %565, i32 0, i32 19
  %566 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class837, align 8
  %567 = load %struct.regnode_ssc*, %struct.regnode_ssc** %and_withp.addr, align 8
  %568 = bitcast %struct.regnode_ssc* %567 to %struct.regnode_charclass*
  call void @S_ssc_and(%struct.RExC_state_t* %564, %struct.regnode_ssc* %566, %struct.regnode_charclass* %568)
  %569 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class838 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %569, i32 0, i32 19
  %570 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class838, align 8
  %flags839 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %570, i32 0, i32 0
  %571 = load i8, i8* %flags839, align 8
  %conv840 = zext i8 %571 to i32
  %and841 = and i32 %conv840, -2
  %conv842 = trunc i32 %and841 to i8
  store i8 %conv842, i8* %flags839, align 8
  br label %if.end843

if.end843:                                        ; preds = %if.then835, %if.else832
  br label %if.end844

if.end844:                                        ; preds = %if.end843, %if.then824
  %572 = load i32, i32* %flags.addr, align 4
  %and845 = and i32 %572, -6145
  store i32 %and845, i32* %flags.addr, align 4
  br label %if.end2500

if.else846:                                       ; preds = %lor.lhs.false727
  %573 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type847 = getelementptr inbounds %struct.regnode, %struct.regnode* %573, i32 0, i32 1
  %574 = load i8, i8* %type847, align 1
  %idxprom848 = zext i8 %574 to i64
  %arrayidx849 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom848
  %575 = load i8, i8* %arrayidx849, align 1
  %conv850 = zext i8 %575 to i32
  %cmp851 = icmp eq i32 %conv850, 31
  br i1 %cmp851, label %if.then853, label %if.else932

if.then853:                                       ; preds = %if.else846
  %576 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %577 = bitcast %struct.regnode* %576 to %struct.regnode_string*
  %str_len855 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %577, i32 0, i32 0
  %578 = load i8, i8* %str_len855, align 2
  %conv856 = zext i8 %578 to i64
  store i64 %conv856, i64* %l854, align 8
  %579 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %580 = bitcast %struct.regnode* %579 to %struct.regnode_string*
  %string858 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %580, i32 0, i32 3
  %arraydecay859 = getelementptr inbounds [1 x i8], [1 x i8]* %string858, i64 0, i64 0
  store i8* %arraydecay859, i8** %s857, align 8
  %581 = load i32, i32* %flags.addr, align 4
  %and860 = and i32 %581, 1024
  %tobool861 = icmp ne i32 %and860, 0
  br i1 %tobool861, label %if.then862, label %if.end863

if.then862:                                       ; preds = %if.then853
  %582 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %583 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %584 = load i64*, i64** %minlenp.addr, align 8
  %585 = load i32, i32* %is_inf, align 4
  call void @S_scan_commit(%struct.RExC_state_t* %582, %struct.scan_data_t* %583, i64* %584, i32 %585)
  br label %if.end863

if.end863:                                        ; preds = %if.then862, %if.then853
  %586 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8864 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %586, i32 0, i32 25
  %587 = load i32, i32* %utf8864, align 8
  %tobool865 = icmp ne i32 %587, 0
  br i1 %tobool865, label %cond.true866, label %cond.false867

cond.true866:                                     ; preds = %if.end863
  br i1 true, label %if.then868, label %if.end871

cond.false867:                                    ; preds = %if.end863
  br i1 false, label %if.then868, label %if.end871

if.then868:                                       ; preds = %cond.false867, %cond.true866
  %588 = load i8*, i8** %s857, align 8
  %589 = load i8*, i8** %s857, align 8
  %590 = load i64, i64* %l854, align 8
  %add.ptr869 = getelementptr inbounds i8, i8* %589, i64 %590
  %call870 = call i64 @Perl_utf8_length(i8* %588, i8* %add.ptr869)
  store i64 %call870, i64* %l854, align 8
  br label %if.end871

if.end871:                                        ; preds = %if.then868, %cond.false867, %cond.true866
  %591 = load i8, i8* %unfolded_multi_char, align 1
  %tobool872 = trunc i8 %591 to i1
  br i1 %tobool872, label %if.then873, label %if.end876

if.then873:                                       ; preds = %if.end871
  %592 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen874 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %592, i32 0, i32 16
  %593 = load i32, i32* %seen874, align 8
  %or875 = or i32 %593, 1024
  store i32 %or875, i32* %seen874, align 8
  br label %if.end876

if.end876:                                        ; preds = %if.then873, %if.end871
  %594 = load i64, i64* %l854, align 8
  %595 = load i64, i64* %min_subtract, align 8
  %sub877 = sub i64 %594, %595
  %596 = load i64, i64* %min, align 8
  %add878 = add i64 %596, %sub877
  store i64 %add878, i64* %min, align 8
  %597 = load i64, i64* %min_subtract, align 8
  %598 = load i64, i64* %delta, align 8
  %add879 = add i64 %598, %597
  store i64 %add879, i64* %delta, align 8
  %599 = load i32, i32* %flags.addr, align 4
  %and880 = and i32 %599, 1024
  %tobool881 = icmp ne i32 %and880, 0
  br i1 %tobool881, label %if.then882, label %if.end899

if.then882:                                       ; preds = %if.end876
  %600 = load i64, i64* %l854, align 8
  %601 = load i64, i64* %min_subtract, align 8
  %sub883 = sub i64 %600, %601
  %602 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min884 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %602, i32 0, i32 0
  %603 = load i64, i64* %pos_min884, align 8
  %add885 = add i64 %603, %sub883
  store i64 %add885, i64* %pos_min884, align 8
  %604 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min886 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %604, i32 0, i32 0
  %605 = load i64, i64* %pos_min886, align 8
  %cmp887 = icmp slt i64 %605, 0
  br i1 %cmp887, label %if.then889, label %if.end891

if.then889:                                       ; preds = %if.then882
  %606 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min890 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %606, i32 0, i32 0
  store i64 0, i64* %pos_min890, align 8
  br label %if.end891

if.end891:                                        ; preds = %if.then889, %if.then882
  %607 = load i64, i64* %min_subtract, align 8
  %608 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta892 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %608, i32 0, i32 1
  %609 = load i64, i64* %pos_delta892, align 8
  %add893 = add i64 %609, %607
  store i64 %add893, i64* %pos_delta892, align 8
  %610 = load i64, i64* %min_subtract, align 8
  %tobool894 = icmp ne i64 %610, 0
  br i1 %tobool894, label %if.then895, label %if.end898

if.then895:                                       ; preds = %if.end891
  %611 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_float896 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %611, i32 0, i32 11
  %612 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest897 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %612, i32 0, i32 6
  store %struct.sv** %longest_float896, %struct.sv*** %longest897, align 8
  br label %if.end898

if.end898:                                        ; preds = %if.then895, %if.end891
  br label %if.end899

if.end899:                                        ; preds = %if.end898, %if.end876
  %613 = load i32, i32* %flags.addr, align 4
  %and900 = and i32 %613, 6144
  %tobool901 = icmp ne i32 %and900, 0
  br i1 %tobool901, label %if.then902, label %if.end931

if.then902:                                       ; preds = %if.end899
  %614 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %615 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call903 = call %struct.sv* @S__make_exactf_invlist(%struct.RExC_state_t* %614, %struct.regnode* %615)
  store %struct.sv* %call903, %struct.sv** %EXACTF_invlist, align 8
  %616 = load i32, i32* %flags.addr, align 4
  %and904 = and i32 %616, 2048
  %tobool905 = icmp ne i32 %and904, 0
  br i1 %tobool905, label %if.then906, label %if.else921

if.then906:                                       ; preds = %if.then902
  %617 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type907 = getelementptr inbounds %struct.regnode, %struct.regnode* %617, i32 0, i32 1
  %618 = load i8, i8* %type907, align 1
  %conv908 = zext i8 %618 to i32
  %cmp909 = icmp ne i32 %conv908, 34
  br i1 %cmp909, label %if.then911, label %if.end913

if.then911:                                       ; preds = %if.then906
  %619 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class912 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %619, i32 0, i32 19
  %620 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class912, align 8
  call void @S_ssc_clear_locale(%struct.regnode_ssc* %620)
  br label %if.end913

if.end913:                                        ; preds = %if.then911, %if.then906
  %621 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class914 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %621, i32 0, i32 19
  %622 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class914, align 8
  %flags915 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %622, i32 0, i32 0
  %623 = load i8, i8* %flags915, align 8
  %conv916 = zext i8 %623 to i32
  %and917 = and i32 %conv916, -2
  %conv918 = trunc i32 %and917 to i8
  store i8 %conv918, i8* %flags915, align 8
  br label %do.body

do.body:                                          ; preds = %if.end913
  %624 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class919 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %624, i32 0, i32 19
  %625 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class919, align 8
  %626 = bitcast %struct.regnode_ssc* %625 to %struct.regnode_charclass_class*
  %classflags = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %626, i32 0, i32 5
  store i32 0, i32* %classflags, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %627 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class920 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %627, i32 0, i32 19
  %628 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class920, align 8
  %629 = load %struct.sv*, %struct.sv** %EXACTF_invlist, align 8
  call void @S_ssc_intersection(%struct.regnode_ssc* %628, %struct.sv* %629, i1 zeroext false)
  br label %if.end929

if.else921:                                       ; preds = %if.then902
  %630 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class922 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %630, i32 0, i32 19
  %631 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class922, align 8
  %632 = load %struct.sv*, %struct.sv** %EXACTF_invlist, align 8
  call void @S_ssc_union(%struct.regnode_ssc* %631, %struct.sv* %632, i1 zeroext false)
  %633 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %634 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class923 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %634, i32 0, i32 19
  %635 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class923, align 8
  %636 = load %struct.regnode_ssc*, %struct.regnode_ssc** %and_withp.addr, align 8
  %637 = bitcast %struct.regnode_ssc* %636 to %struct.regnode_charclass*
  call void @S_ssc_and(%struct.RExC_state_t* %633, %struct.regnode_ssc* %635, %struct.regnode_charclass* %637)
  %638 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class924 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %638, i32 0, i32 19
  %639 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class924, align 8
  %flags925 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %639, i32 0, i32 0
  %640 = load i8, i8* %flags925, align 8
  %conv926 = zext i8 %640 to i32
  %and927 = and i32 %conv926, -2
  %conv928 = trunc i32 %and927 to i8
  store i8 %conv928, i8* %flags925, align 8
  br label %if.end929

if.end929:                                        ; preds = %if.else921, %do.end
  %641 = load i32, i32* %flags.addr, align 4
  %and930 = and i32 %641, -6145
  store i32 %and930, i32* %flags.addr, align 4
  %642 = load %struct.sv*, %struct.sv** %EXACTF_invlist, align 8
  %643 = bitcast %struct.sv* %642 to i8*
  %644 = bitcast i8* %643 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %644)
  br label %if.end931

if.end931:                                        ; preds = %if.end929, %if.end899
  br label %if.end2499

if.else932:                                       ; preds = %if.else846
  %645 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type933 = getelementptr inbounds %struct.regnode, %struct.regnode* %645, i32 0, i32 1
  %646 = load i8, i8* %type933, align 1
  %conv934 = zext i8 %646 to i32
  %shr935 = ashr i32 %conv934, 3
  %idxprom936 = sext i32 %shr935 to i64
  %arrayidx937 = getelementptr inbounds [12 x i8], [12 x i8]* @PL_varies_bitmask, i64 0, i64 %idxprom936
  %647 = load i8, i8* %arrayidx937, align 1
  %conv938 = zext i8 %647 to i32
  %648 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type939 = getelementptr inbounds %struct.regnode, %struct.regnode* %648, i32 0, i32 1
  %649 = load i8, i8* %type939, align 1
  %conv940 = zext i8 %649 to i32
  %and941 = and i32 %conv940, 7
  %shl942 = shl i32 1, %and941
  %and943 = and i32 %conv938, %shl942
  %tobool944 = icmp ne i32 %and943, 0
  br i1 %tobool944, label %if.then945, label %if.else1727

if.then945:                                       ; preds = %if.else932
  store i64 0, i64* %pos_before, align 8
  store i32 0, i32* %fl, align 4
  %650 = load i32, i32* %flags.addr, align 4
  store i32 %650, i32* %f948, align 4
  %651 = load %struct.regnode*, %struct.regnode** %scan, align 8
  store %struct.regnode* %651, %struct.regnode** %oscan, align 8
  store %struct.regnode_ssc* null, %struct.regnode_ssc** %oclass, align 8
  store i32 0, i32* %next_is_eval, align 4
  %652 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type950 = getelementptr inbounds %struct.regnode, %struct.regnode* %652, i32 0, i32 1
  %653 = load i8, i8* %type950, align 1
  %idxprom951 = zext i8 %653 to i64
  %arrayidx952 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom951
  %654 = load i8, i8* %arrayidx952, align 1
  %conv953 = zext i8 %654 to i32
  switch i32 %conv953, label %sw.default [
    i32 48, label %sw.bb
    i32 43, label %sw.bb955
    i32 42, label %sw.bb984
    i32 44, label %sw.bb998
    i32 51, label %sw.bb1706
    i32 29, label %sw.bb1706
  ]

sw.bb:                                            ; preds = %if.then945
  %655 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr954 = getelementptr inbounds %struct.regnode, %struct.regnode* %655, i64 1
  store %struct.regnode* %add.ptr954, %struct.regnode** %scan, align 8
  br label %finish

sw.bb955:                                         ; preds = %if.then945
  %656 = load i32, i32* %flags.addr, align 4
  %and956 = and i32 %656, 7168
  %tobool957 = icmp ne i32 %and956, 0
  br i1 %tobool957, label %if.then958, label %if.end976

if.then958:                                       ; preds = %sw.bb955
  %657 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr959 = getelementptr inbounds %struct.regnode, %struct.regnode* %657, i64 1
  store %struct.regnode* %add.ptr959, %struct.regnode** %next, align 8
  %658 = load %struct.regnode*, %struct.regnode** %next, align 8
  %type960 = getelementptr inbounds %struct.regnode, %struct.regnode* %658, i32 0, i32 1
  %659 = load i8, i8* %type960, align 1
  %conv961 = zext i8 %659 to i32
  %cmp962 = icmp eq i32 %conv961, 31
  br i1 %cmp962, label %if.then972, label %lor.lhs.false964

lor.lhs.false964:                                 ; preds = %if.then958
  %660 = load %struct.regnode*, %struct.regnode** %next, align 8
  %type965 = getelementptr inbounds %struct.regnode, %struct.regnode* %660, i32 0, i32 1
  %661 = load i8, i8* %type965, align 1
  %conv966 = zext i8 %661 to i32
  %cmp967 = icmp eq i32 %conv966, 32
  br i1 %cmp967, label %if.then972, label %lor.lhs.false969

lor.lhs.false969:                                 ; preds = %lor.lhs.false964
  %662 = load i32, i32* %flags.addr, align 4
  %and970 = and i32 %662, 6144
  %tobool971 = icmp ne i32 %and970, 0
  br i1 %tobool971, label %if.then972, label %if.end975

if.then972:                                       ; preds = %lor.lhs.false969, %lor.lhs.false964, %if.then958
  store i64 1, i64* %mincount, align 8
  store i64 32767, i64* %maxcount, align 8
  %663 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call973 = call %struct.regnode* @Perl_regnext(%struct.regnode* %663)
  store %struct.regnode* %call973, %struct.regnode** %next, align 8
  %664 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr974 = getelementptr inbounds %struct.regnode, %struct.regnode* %664, i64 1
  store %struct.regnode* %add.ptr974, %struct.regnode** %scan, align 8
  br label %do_curly

if.end975:                                        ; preds = %lor.lhs.false969
  br label %if.end976

if.end976:                                        ; preds = %if.end975, %sw.bb955
  %665 = load i32, i32* %flags.addr, align 4
  %and977 = and i32 %665, 1024
  %tobool978 = icmp ne i32 %and977, 0
  br i1 %tobool978, label %if.then979, label %if.end982

if.then979:                                       ; preds = %if.end976
  %666 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min980 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %666, i32 0, i32 0
  %667 = load i64, i64* %pos_min980, align 8
  %inc981 = add nsw i64 %667, 1
  store i64 %inc981, i64* %pos_min980, align 8
  br label %if.end982

if.end982:                                        ; preds = %if.then979, %if.end976
  %668 = load i64, i64* %min, align 8
  %inc983 = add nsw i64 %668, 1
  store i64 %inc983, i64* %min, align 8
  br label %sw.bb984

sw.bb984:                                         ; preds = %if.then945, %if.end982
  %669 = load i32, i32* %flags.addr, align 4
  %and985 = and i32 %669, 6144
  %tobool986 = icmp ne i32 %and985, 0
  br i1 %tobool986, label %if.then987, label %if.end990

if.then987:                                       ; preds = %sw.bb984
  store i64 0, i64* %mincount, align 8
  store i64 32767, i64* %maxcount, align 8
  %670 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call988 = call %struct.regnode* @Perl_regnext(%struct.regnode* %670)
  store %struct.regnode* %call988, %struct.regnode** %next, align 8
  %671 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr989 = getelementptr inbounds %struct.regnode, %struct.regnode* %671, i64 1
  store %struct.regnode* %add.ptr989, %struct.regnode** %scan, align 8
  br label %do_curly

if.end990:                                        ; preds = %sw.bb984
  %672 = load i32, i32* %flags.addr, align 4
  %and991 = and i32 %672, 1024
  %tobool992 = icmp ne i32 %and991, 0
  br i1 %tobool992, label %if.then993, label %if.end996

if.then993:                                       ; preds = %if.end990
  %673 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %674 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %675 = load i64*, i64** %minlenp.addr, align 8
  %676 = load i32, i32* %is_inf, align 4
  call void @S_scan_commit(%struct.RExC_state_t* %673, %struct.scan_data_t* %674, i64* %675, i32 %676)
  %677 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_float994 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %677, i32 0, i32 11
  %678 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest995 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %678, i32 0, i32 6
  store %struct.sv** %longest_float994, %struct.sv*** %longest995, align 8
  br label %if.end996

if.end996:                                        ; preds = %if.then993, %if.end990
  store i32 1, i32* %is_inf_internal, align 4
  store i32 1, i32* %is_inf, align 4
  %679 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call997 = call %struct.regnode* @Perl_regnext(%struct.regnode* %679)
  store %struct.regnode* %call997, %struct.regnode** %scan, align 8
  br label %optimize_curly_tail

sw.bb998:                                         ; preds = %if.then945
  %680 = load i32, i32* %stopparen.addr, align 4
  %cmp999 = icmp sgt i32 %680, 0
  br i1 %cmp999, label %land.lhs.true1001, label %if.else1017

land.lhs.true1001:                                ; preds = %sw.bb998
  %681 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1002 = getelementptr inbounds %struct.regnode, %struct.regnode* %681, i32 0, i32 1
  %682 = load i8, i8* %type1002, align 1
  %conv1003 = zext i8 %682 to i32
  %cmp1004 = icmp eq i32 %conv1003, 45
  br i1 %cmp1004, label %land.lhs.true1011, label %lor.lhs.false1006

lor.lhs.false1006:                                ; preds = %land.lhs.true1001
  %683 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1007 = getelementptr inbounds %struct.regnode, %struct.regnode* %683, i32 0, i32 1
  %684 = load i8, i8* %type1007, align 1
  %conv1008 = zext i8 %684 to i32
  %cmp1009 = icmp eq i32 %conv1008, 46
  br i1 %cmp1009, label %land.lhs.true1011, label %if.else1017

land.lhs.true1011:                                ; preds = %lor.lhs.false1006, %land.lhs.true1001
  %685 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags1012 = getelementptr inbounds %struct.regnode, %struct.regnode* %685, i32 0, i32 0
  %686 = load i8, i8* %flags1012, align 2
  %conv1013 = zext i8 %686 to i32
  %687 = load i32, i32* %stopparen.addr, align 4
  %cmp1014 = icmp eq i32 %conv1013, %687
  br i1 %cmp1014, label %if.then1016, label %if.else1017

if.then1016:                                      ; preds = %land.lhs.true1011
  store i64 1, i64* %mincount, align 8
  store i64 1, i64* %maxcount, align 8
  br label %if.end1022

if.else1017:                                      ; preds = %land.lhs.true1011, %lor.lhs.false1006, %sw.bb998
  %688 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %689 = bitcast %struct.regnode* %688 to %struct.regnode_2*
  %arg11018 = getelementptr inbounds %struct.regnode_2, %struct.regnode_2* %689, i32 0, i32 3
  %690 = load i16, i16* %arg11018, align 2
  %conv1019 = zext i16 %690 to i64
  store i64 %conv1019, i64* %mincount, align 8
  %691 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %692 = bitcast %struct.regnode* %691 to %struct.regnode_2*
  %arg21020 = getelementptr inbounds %struct.regnode_2, %struct.regnode_2* %692, i32 0, i32 4
  %693 = load i16, i16* %arg21020, align 2
  %conv1021 = zext i16 %693 to i64
  store i64 %conv1021, i64* %maxcount, align 8
  br label %if.end1022

if.end1022:                                       ; preds = %if.else1017, %if.then1016
  %694 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call1023 = call %struct.regnode* @Perl_regnext(%struct.regnode* %694)
  store %struct.regnode* %call1023, %struct.regnode** %next, align 8
  %695 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1024 = getelementptr inbounds %struct.regnode, %struct.regnode* %695, i32 0, i32 1
  %696 = load i8, i8* %type1024, align 1
  %conv1025 = zext i8 %696 to i32
  %cmp1026 = icmp eq i32 %conv1025, 47
  br i1 %cmp1026, label %if.then1028, label %if.end1046

if.then1028:                                      ; preds = %if.end1022
  %697 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool1029 = icmp ne %struct.scan_data_t* %697, null
  br i1 %tobool1029, label %cond.true1030, label %cond.false1032

cond.true1030:                                    ; preds = %if.then1028
  %698 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_closep1031 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %698, i32 0, i32 18
  %699 = load i64*, i64** %last_closep1031, align 8
  %700 = load i64, i64* %699, align 8
  br label %cond.end1033

cond.false1032:                                   ; preds = %if.then1028
  br label %cond.end1033

cond.end1033:                                     ; preds = %cond.false1032, %cond.true1030
  %cond1034 = phi i64 [ %700, %cond.true1030 ], [ 0, %cond.false1032 ]
  %conv1035 = trunc i64 %cond1034 to i32
  store i32 %conv1035, i32* %lp, align 4
  %701 = load i32, i32* %lp, align 4
  %cmp1036 = icmp sle i32 %701, 255
  br i1 %cmp1036, label %cond.true1038, label %cond.false1041

cond.true1038:                                    ; preds = %cond.end1033
  %702 = load i32, i32* %lp, align 4
  %conv1039 = trunc i32 %702 to i8
  %conv1040 = zext i8 %conv1039 to i32
  br label %cond.end1042

cond.false1041:                                   ; preds = %cond.end1033
  br label %cond.end1042

cond.end1042:                                     ; preds = %cond.false1041, %cond.true1038
  %cond1043 = phi i32 [ %conv1040, %cond.true1038 ], [ 255, %cond.false1041 ]
  %conv1044 = trunc i32 %cond1043 to i8
  %703 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags1045 = getelementptr inbounds %struct.regnode, %struct.regnode* %703, i32 0, i32 0
  store i8 %conv1044, i8* %flags1045, align 2
  br label %if.end1046

if.end1046:                                       ; preds = %cond.end1042, %if.end1022
  %704 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr1047 = getelementptr inbounds %struct.regnode, %struct.regnode* %704, i64 1
  %add.ptr1048 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr1047, i64 1
  store %struct.regnode* %add.ptr1048, %struct.regnode** %scan, align 8
  %705 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1049 = getelementptr inbounds %struct.regnode, %struct.regnode* %705, i32 0, i32 1
  %706 = load i8, i8* %type1049, align 1
  %conv1050 = zext i8 %706 to i32
  %cmp1051 = icmp eq i32 %conv1050, 68
  %conv1052 = zext i1 %cmp1051 to i32
  store i32 %conv1052, i32* %next_is_eval, align 4
  br label %do_curly

do_curly:                                         ; preds = %if.end1046, %if.then987, %if.then972
  %707 = load i32, i32* %flags.addr, align 4
  %and1053 = and i32 %707, 1024
  %tobool1054 = icmp ne i32 %and1053, 0
  br i1 %tobool1054, label %if.then1055, label %if.end1061

if.then1055:                                      ; preds = %do_curly
  %708 = load i64, i64* %mincount, align 8
  %cmp1056 = icmp eq i64 %708, 0
  br i1 %cmp1056, label %if.then1058, label %if.end1059

if.then1058:                                      ; preds = %if.then1055
  %709 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %710 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %711 = load i64*, i64** %minlenp.addr, align 8
  %712 = load i32, i32* %is_inf, align 4
  call void @S_scan_commit(%struct.RExC_state_t* %709, %struct.scan_data_t* %710, i64* %711, i32 %712)
  br label %if.end1059

if.end1059:                                       ; preds = %if.then1058, %if.then1055
  %713 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min1060 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %713, i32 0, i32 0
  %714 = load i64, i64* %pos_min1060, align 8
  store i64 %714, i64* %pos_before, align 8
  br label %if.end1061

if.end1061:                                       ; preds = %if.end1059, %do_curly
  %715 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool1062 = icmp ne %struct.scan_data_t* %715, null
  br i1 %tobool1062, label %if.then1063, label %if.end1072

if.then1063:                                      ; preds = %if.end1061
  %716 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1064 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %716, i32 0, i32 16
  %717 = load i32, i32* %flags1064, align 8
  store i32 %717, i32* %fl, align 4
  %718 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1065 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %718, i32 0, i32 16
  %719 = load i32, i32* %flags1065, align 8
  %and1066 = and i32 %719, -897
  store i32 %and1066, i32* %flags1065, align 8
  %720 = load i32, i32* %is_inf, align 4
  %tobool1067 = icmp ne i32 %720, 0
  br i1 %tobool1067, label %if.then1068, label %if.end1071

if.then1068:                                      ; preds = %if.then1063
  %721 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1069 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %721, i32 0, i32 16
  %722 = load i32, i32* %flags1069, align 8
  %or1070 = or i32 %722, 64
  store i32 %or1070, i32* %flags1069, align 8
  br label %if.end1071

if.end1071:                                       ; preds = %if.then1068, %if.then1063
  br label %if.end1072

if.end1072:                                       ; preds = %if.end1071, %if.end1061
  %723 = load i32, i32* %flags.addr, align 4
  %and1073 = and i32 %723, 6144
  %tobool1074 = icmp ne i32 %and1073, 0
  br i1 %tobool1074, label %if.then1075, label %if.end1080

if.then1075:                                      ; preds = %if.end1072
  %724 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  call void @S_ssc_init(%struct.RExC_state_t* %724, %struct.regnode_ssc* %this_class949)
  %725 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1076 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %725, i32 0, i32 19
  %726 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1076, align 8
  store %struct.regnode_ssc* %726, %struct.regnode_ssc** %oclass, align 8
  %727 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1077 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %727, i32 0, i32 19
  store %struct.regnode_ssc* %this_class949, %struct.regnode_ssc** %start_class1077, align 8
  %728 = load i32, i32* %f948, align 4
  %or1078 = or i32 %728, 2048
  store i32 %or1078, i32* %f948, align 4
  %729 = load i32, i32* %f948, align 4
  %and1079 = and i32 %729, -4097
  store i32 %and1079, i32* %f948, align 4
  br label %if.end1080

if.end1080:                                       ; preds = %if.then1075, %if.end1072
  %730 = load i64, i64* %mincount, align 8
  %cmp1081 = icmp sgt i64 %730, 1
  br i1 %cmp1081, label %if.then1089, label %lor.lhs.false1083

lor.lhs.false1083:                                ; preds = %if.end1080
  %731 = load i64, i64* %maxcount, align 8
  %cmp1084 = icmp sgt i64 %731, 1
  br i1 %cmp1084, label %land.lhs.true1086, label %if.end1091

land.lhs.true1086:                                ; preds = %lor.lhs.false1083
  %732 = load i64, i64* %maxcount, align 8
  %cmp1087 = icmp ne i64 %732, 32767
  br i1 %cmp1087, label %if.then1089, label %if.end1091

if.then1089:                                      ; preds = %land.lhs.true1086, %if.end1080
  %733 = load i32, i32* %f948, align 4
  %and1090 = and i32 %733, -8193
  store i32 %and1090, i32* %f948, align 4
  br label %if.end1091

if.end1091:                                       ; preds = %if.then1089, %land.lhs.true1086, %lor.lhs.false1083
  %734 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %735 = load i64*, i64** %minlenp.addr, align 8
  %736 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  %737 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %738 = load i32, i32* %stopparen.addr, align 4
  %739 = load i32, i32* %recursed_depth.addr, align 4
  %740 = load i64, i64* %mincount, align 8
  %cmp1092 = icmp eq i64 %740, 0
  br i1 %cmp1092, label %cond.true1094, label %cond.false1096

cond.true1094:                                    ; preds = %if.end1091
  %741 = load i32, i32* %f948, align 4
  %and1095 = and i32 %741, -1025
  br label %cond.end1097

cond.false1096:                                   ; preds = %if.end1091
  %742 = load i32, i32* %f948, align 4
  br label %cond.end1097

cond.end1097:                                     ; preds = %cond.false1096, %cond.true1094
  %cond1098 = phi i32 [ %and1095, %cond.true1094 ], [ %742, %cond.false1096 ]
  %743 = load i32, i32* %depth.addr, align 4
  %add1099 = add i32 %743, 1
  %call1100 = call i64 @S_study_chunk(%struct.RExC_state_t* %734, %struct.regnode** %scan, i64* %735, i64* %deltanext947, %struct.regnode* %736, %struct.scan_data_t* %737, i32 %738, i32 %739, %struct.regnode_ssc* null, i32 %cond1098, i32 %add1099)
  store i64 %call1100, i64* %minnext946, align 8
  %744 = load i32, i32* %flags.addr, align 4
  %and1101 = and i32 %744, 6144
  %tobool1102 = icmp ne i32 %and1101, 0
  br i1 %tobool1102, label %if.then1103, label %if.end1105

if.then1103:                                      ; preds = %cond.end1097
  %745 = load %struct.regnode_ssc*, %struct.regnode_ssc** %oclass, align 8
  %746 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1104 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %746, i32 0, i32 19
  store %struct.regnode_ssc* %745, %struct.regnode_ssc** %start_class1104, align 8
  br label %if.end1105

if.end1105:                                       ; preds = %if.then1103, %cond.end1097
  %747 = load i64, i64* %mincount, align 8
  %cmp1106 = icmp eq i64 %747, 0
  br i1 %cmp1106, label %if.then1111, label %lor.lhs.false1108

lor.lhs.false1108:                                ; preds = %if.end1105
  %748 = load i64, i64* %minnext946, align 8
  %cmp1109 = icmp eq i64 %748, 0
  br i1 %cmp1109, label %if.then1111, label %if.else1132

if.then1111:                                      ; preds = %lor.lhs.false1108, %if.end1105
  %749 = load i32, i32* %flags.addr, align 4
  %and1112 = and i32 %749, 4096
  %tobool1113 = icmp ne i32 %and1112, 0
  br i1 %tobool1113, label %if.then1114, label %if.else1116

if.then1114:                                      ; preds = %if.then1111
  %750 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %751 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1115 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %751, i32 0, i32 19
  %752 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1115, align 8
  %753 = bitcast %struct.regnode_ssc* %this_class949 to %struct.regnode_charclass*
  call void @S_ssc_or(%struct.RExC_state_t* %750, %struct.regnode_ssc* %752, %struct.regnode_charclass* %753)
  br label %if.end1131

if.else1116:                                      ; preds = %if.then1111
  %754 = load i32, i32* %flags.addr, align 4
  %and1117 = and i32 %754, 2048
  %tobool1118 = icmp ne i32 %and1117, 0
  br i1 %tobool1118, label %if.then1119, label %if.end1130

if.then1119:                                      ; preds = %if.else1116
  %call1120 = call i8* @Perl_safesysmalloc(i64 56)
  %755 = bitcast i8* %call1120 to %struct.regnode_ssc*
  store %struct.regnode_ssc* %755, %struct.regnode_ssc** %and_withp.addr, align 8
  %756 = load %struct.regnode_ssc*, %struct.regnode_ssc** %and_withp.addr, align 8
  %757 = bitcast %struct.regnode_ssc* %756 to i8*
  call void @Perl_save_pushptr(i8* %757, i32 10)
  %758 = load %struct.regnode_ssc*, %struct.regnode_ssc** %and_withp.addr, align 8
  %759 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1121 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %759, i32 0, i32 19
  %760 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1121, align 8
  %761 = bitcast %struct.regnode_ssc* %758 to i8*
  %762 = bitcast %struct.regnode_ssc* %760 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %761, i8* align 8 %762, i64 56, i1 false)
  %763 = load i32, i32* %flags.addr, align 4
  %and1122 = and i32 %763, -2049
  store i32 %and1122, i32* %flags.addr, align 4
  %764 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1123 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %764, i32 0, i32 19
  %765 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1123, align 8
  %766 = bitcast %struct.regnode_ssc* %765 to i8*
  %767 = bitcast %struct.regnode_ssc* %this_class949 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %766, i8* align 8 %767, i64 56, i1 false)
  %768 = load i32, i32* %flags.addr, align 4
  %or1124 = or i32 %768, 4096
  store i32 %or1124, i32* %flags.addr, align 4
  %769 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1125 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %769, i32 0, i32 19
  %770 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1125, align 8
  %flags1126 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %770, i32 0, i32 0
  %771 = load i8, i8* %flags1126, align 8
  %conv1127 = zext i8 %771 to i32
  %or1128 = or i32 %conv1127, 1
  %conv1129 = trunc i32 %or1128 to i8
  store i8 %conv1129, i8* %flags1126, align 8
  br label %if.end1130

if.end1130:                                       ; preds = %if.then1119, %if.else1116
  br label %if.end1131

if.end1131:                                       ; preds = %if.end1130, %if.then1114
  br label %if.end1146

if.else1132:                                      ; preds = %lor.lhs.false1108
  %772 = load i32, i32* %flags.addr, align 4
  %and1133 = and i32 %772, 4096
  %tobool1134 = icmp ne i32 %and1133, 0
  br i1 %tobool1134, label %if.then1135, label %if.else1138

if.then1135:                                      ; preds = %if.else1132
  %773 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %774 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1136 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %774, i32 0, i32 19
  %775 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1136, align 8
  %776 = bitcast %struct.regnode_ssc* %this_class949 to %struct.regnode_charclass*
  call void @S_ssc_or(%struct.RExC_state_t* %773, %struct.regnode_ssc* %775, %struct.regnode_charclass* %776)
  %777 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %778 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1137 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %778, i32 0, i32 19
  %779 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1137, align 8
  %780 = load %struct.regnode_ssc*, %struct.regnode_ssc** %and_withp.addr, align 8
  %781 = bitcast %struct.regnode_ssc* %780 to %struct.regnode_charclass*
  call void @S_ssc_and(%struct.RExC_state_t* %777, %struct.regnode_ssc* %779, %struct.regnode_charclass* %781)
  br label %if.end1144

if.else1138:                                      ; preds = %if.else1132
  %782 = load i32, i32* %flags.addr, align 4
  %and1139 = and i32 %782, 2048
  %tobool1140 = icmp ne i32 %and1139, 0
  br i1 %tobool1140, label %if.then1141, label %if.end1143

if.then1141:                                      ; preds = %if.else1138
  %783 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %784 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1142 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %784, i32 0, i32 19
  %785 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1142, align 8
  %786 = bitcast %struct.regnode_ssc* %this_class949 to %struct.regnode_charclass*
  call void @S_ssc_and(%struct.RExC_state_t* %783, %struct.regnode_ssc* %785, %struct.regnode_charclass* %786)
  br label %if.end1143

if.end1143:                                       ; preds = %if.then1141, %if.else1138
  br label %if.end1144

if.end1144:                                       ; preds = %if.end1143, %if.then1135
  %787 = load i32, i32* %flags.addr, align 4
  %and1145 = and i32 %787, -6145
  store i32 %and1145, i32* %flags.addr, align 4
  br label %if.end1146

if.end1146:                                       ; preds = %if.end1144, %if.end1131
  %788 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %tobool1147 = icmp ne %struct.regnode* %788, null
  br i1 %tobool1147, label %if.end1149, label %if.then1148

if.then1148:                                      ; preds = %if.end1146
  %789 = load %struct.regnode*, %struct.regnode** %next, align 8
  store %struct.regnode* %789, %struct.regnode** %scan, align 8
  br label %if.end1149

if.end1149:                                       ; preds = %if.then1148, %if.end1146
  %790 = load i32, i32* %flags.addr, align 4
  %and1150 = and i32 %790, 65536
  %tobool1151 = icmp ne i32 %and1150, 0
  br i1 %tobool1151, label %if.end1188, label %land.lhs.true1152

land.lhs.true1152:                                ; preds = %if.end1149
  %791 = load i32, i32* %next_is_eval, align 4
  %tobool1153 = icmp ne i32 %791, 0
  br i1 %tobool1153, label %land.lhs.true1160, label %lor.lhs.false1154

lor.lhs.false1154:                                ; preds = %land.lhs.true1152
  %792 = load i64, i64* %mincount, align 8
  %cmp1155 = icmp eq i64 %792, 0
  br i1 %cmp1155, label %land.lhs.true1157, label %land.lhs.true1160

land.lhs.true1157:                                ; preds = %lor.lhs.false1154
  %793 = load i64, i64* %maxcount, align 8
  %cmp1158 = icmp eq i64 %793, 1
  br i1 %cmp1158, label %if.end1188, label %land.lhs.true1160

land.lhs.true1160:                                ; preds = %land.lhs.true1157, %lor.lhs.false1154, %land.lhs.true1152
  %794 = load i64, i64* %minnext946, align 8
  %cmp1161 = icmp eq i64 %794, 0
  br i1 %cmp1161, label %land.lhs.true1163, label %if.end1188

land.lhs.true1163:                                ; preds = %land.lhs.true1160
  %795 = load i64, i64* %deltanext947, align 8
  %cmp1164 = icmp eq i64 %795, 0
  br i1 %cmp1164, label %land.lhs.true1166, label %if.end1188

land.lhs.true1166:                                ; preds = %land.lhs.true1163
  %796 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool1167 = icmp ne %struct.scan_data_t* %796, null
  br i1 %tobool1167, label %land.lhs.true1168, label %if.end1188

land.lhs.true1168:                                ; preds = %land.lhs.true1166
  %797 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1169 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %797, i32 0, i32 16
  %798 = load i32, i32* %flags1169, align 8
  %and1170 = and i32 %798, 384
  %tobool1171 = icmp ne i32 %and1170, 0
  br i1 %tobool1171, label %if.end1188, label %land.lhs.true1172

land.lhs.true1172:                                ; preds = %land.lhs.true1168
  %799 = load i64, i64* %maxcount, align 8
  %cmp1173 = icmp sle i64 %799, 10922
  br i1 %cmp1173, label %if.then1175, label %if.end1188

if.then1175:                                      ; preds = %land.lhs.true1172
  %800 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %800, i32 0, i32 3
  %801 = load %struct.p5rx*, %struct.p5rx** %rx_sv, align 8
  %802 = bitcast %struct.p5rx* %801 to i8*
  %803 = bitcast i8* %802 to %struct.sv*
  %804 = bitcast %struct.sv* %803 to i8*
  call void @Perl_save_pushptr(i8* %804, i32 11)
  %805 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81176 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %805, i32 0, i32 25
  %806 = load i32, i32* %utf81176, align 8
  %tobool1177 = icmp ne i32 %806, 0
  %807 = zext i1 %tobool1177 to i64
  %cond1178 = select i1 %tobool1177, i32 1, i32 0
  %tobool1179 = icmp ne i32 %cond1178, 0
  %808 = zext i1 %tobool1179 to i64
  %cond1180 = select i1 %tobool1179, i32 1, i32 0
  %809 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1181 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %809, i32 0, i32 7
  %810 = load i8*, i8** %end1181, align 8
  %811 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %811, i32 0, i32 2
  %812 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast1182 = ptrtoint i8* %810 to i64
  %sub.ptr.rhs.cast1183 = ptrtoint i8* %812 to i64
  %sub.ptr.sub1184 = sub i64 %sub.ptr.lhs.cast1182, %sub.ptr.rhs.cast1183
  %813 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1185 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %813, i32 0, i32 2
  %814 = load i8*, i8** %precomp1185, align 8
  call void (i32, i8*, ...) @Perl_ck_warner(i32 20, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.217, i64 0, i64 0), i32 %cond1180, i64 %sub.ptr.sub1184, i8* %814)
  %815 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1186 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %815, i32 0, i32 3
  %816 = load %struct.p5rx*, %struct.p5rx** %rx_sv1186, align 8
  %817 = bitcast %struct.p5rx* %816 to i8*
  %818 = bitcast i8* %817 to %struct.sv*
  %call1187 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %818)
  %819 = bitcast %struct.sv* %call1187 to %struct.p5rx*
  br label %if.end1188

if.end1188:                                       ; preds = %if.then1175, %land.lhs.true1172, %land.lhs.true1168, %land.lhs.true1166, %land.lhs.true1163, %land.lhs.true1160, %land.lhs.true1157, %if.end1149
  %820 = load i64, i64* %minnext946, align 8
  %821 = load i64, i64* %mincount, align 8
  %mul1189 = mul nsw i64 %820, %821
  %822 = load i64, i64* %min, align 8
  %add1190 = add nsw i64 %822, %mul1189
  store i64 %add1190, i64* %min, align 8
  %823 = load i64, i64* %deltanext947, align 8
  %cmp1191 = icmp eq i64 %823, 9223372036854775807
  br i1 %cmp1191, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end1188
  %824 = load i64, i64* %maxcount, align 8
  %cmp1193 = icmp eq i64 %824, 32767
  br i1 %cmp1193, label %land.rhs1195, label %land.end1199

land.rhs1195:                                     ; preds = %lor.rhs
  %825 = load i64, i64* %minnext946, align 8
  %826 = load i64, i64* %deltanext947, align 8
  %add1196 = add nsw i64 %825, %826
  %cmp1197 = icmp sgt i64 %add1196, 0
  br label %land.end1199

land.end1199:                                     ; preds = %land.rhs1195, %lor.rhs
  %827 = phi i1 [ false, %lor.rhs ], [ %cmp1197, %land.rhs1195 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end1199, %if.end1188
  %828 = phi i1 [ true, %if.end1188 ], [ %827, %land.end1199 ]
  %lor.ext = zext i1 %828 to i32
  %829 = load i32, i32* %is_inf_internal, align 4
  %or1201 = or i32 %829, %lor.ext
  store i32 %or1201, i32* %is_inf_internal, align 4
  %830 = load i32, i32* %is_inf_internal, align 4
  %831 = load i32, i32* %is_inf, align 4
  %or1202 = or i32 %831, %830
  store i32 %or1202, i32* %is_inf, align 4
  %832 = load i32, i32* %is_inf, align 4
  %tobool1203 = icmp ne i32 %832, 0
  br i1 %tobool1203, label %if.then1204, label %if.else1205

if.then1204:                                      ; preds = %lor.end
  store i64 9223372036854775807, i64* %delta, align 8
  br label %if.end1211

if.else1205:                                      ; preds = %lor.end
  %833 = load i64, i64* %minnext946, align 8
  %834 = load i64, i64* %deltanext947, align 8
  %add1206 = add nsw i64 %833, %834
  %835 = load i64, i64* %maxcount, align 8
  %mul1207 = mul nsw i64 %add1206, %835
  %836 = load i64, i64* %minnext946, align 8
  %837 = load i64, i64* %mincount, align 8
  %mul1208 = mul nsw i64 %836, %837
  %sub1209 = sub nsw i64 %mul1207, %mul1208
  %838 = load i64, i64* %delta, align 8
  %add1210 = add nsw i64 %838, %sub1209
  store i64 %add1210, i64* %delta, align 8
  br label %if.end1211

if.end1211:                                       ; preds = %if.else1205, %if.then1204
  %839 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %type1212 = getelementptr inbounds %struct.regnode, %struct.regnode* %839, i32 0, i32 1
  %840 = load i8, i8* %type1212, align 1
  %conv1213 = zext i8 %840 to i32
  %cmp1214 = icmp eq i32 %conv1213, 47
  br i1 %cmp1214, label %land.lhs.true1216, label %if.end1288

land.lhs.true1216:                                ; preds = %if.end1211
  %841 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool1217 = icmp ne %struct.scan_data_t* %841, null
  br i1 %tobool1217, label %land.lhs.true1218, label %if.end1288

land.lhs.true1218:                                ; preds = %land.lhs.true1216
  %842 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1219 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %842, i32 0, i32 16
  %843 = load i32, i32* %flags1219, align 8
  %and1220 = and i32 %843, 256
  %tobool1221 = icmp ne i32 %and1220, 0
  br i1 %tobool1221, label %land.lhs.true1222, label %if.end1288

land.lhs.true1222:                                ; preds = %land.lhs.true1218
  %844 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1223 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %844, i32 0, i32 16
  %845 = load i32, i32* %flags1223, align 8
  %and1224 = and i32 %845, 512
  %tobool1225 = icmp ne i32 %and1224, 0
  br i1 %tobool1225, label %if.end1288, label %land.lhs.true1226

land.lhs.true1226:                                ; preds = %land.lhs.true1222
  %846 = load i64, i64* %deltanext947, align 8
  %tobool1227 = icmp ne i64 %846, 0
  br i1 %tobool1227, label %if.end1288, label %land.lhs.true1228

land.lhs.true1228:                                ; preds = %land.lhs.true1226
  %847 = load i64, i64* %minnext946, align 8
  %cmp1229 = icmp eq i64 %847, 1
  br i1 %cmp1229, label %if.then1231, label %if.end1288

if.then1231:                                      ; preds = %land.lhs.true1228
  %848 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %add.ptr1232 = getelementptr inbounds %struct.regnode, %struct.regnode* %848, i64 1
  %add.ptr1233 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr1232, i64 1
  store %struct.regnode* %add.ptr1233, %struct.regnode** %nxt, align 8
  %849 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  store %struct.regnode* %849, %struct.regnode** %nxt1, align 8
  %850 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %call1234 = call %struct.regnode* @Perl_regnext(%struct.regnode* %850)
  store %struct.regnode* %call1234, %struct.regnode** %nxt, align 8
  %851 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %type1235 = getelementptr inbounds %struct.regnode, %struct.regnode* %851, i32 0, i32 1
  %852 = load i8, i8* %type1235, align 1
  %conv1236 = zext i8 %852 to i32
  %shr1237 = ashr i32 %conv1236, 3
  %idxprom1238 = sext i32 %shr1237 to i64
  %arrayidx1239 = getelementptr inbounds [12 x i8], [12 x i8]* bitcast (<{ i8, i8, i8, i8, [8 x i8] }>* @PL_simple_bitmask to [12 x i8]*), i64 0, i64 %idxprom1238
  %853 = load i8, i8* %arrayidx1239, align 1
  %conv1240 = zext i8 %853 to i32
  %854 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %type1241 = getelementptr inbounds %struct.regnode, %struct.regnode* %854, i32 0, i32 1
  %855 = load i8, i8* %type1241, align 1
  %conv1242 = zext i8 %855 to i32
  %and1243 = and i32 %conv1242, 7
  %shl1244 = shl i32 1, %and1243
  %and1245 = and i32 %conv1240, %shl1244
  %tobool1246 = icmp ne i32 %and1245, 0
  br i1 %tobool1246, label %if.end1260, label %land.lhs.true1247

land.lhs.true1247:                                ; preds = %if.then1231
  %856 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %type1248 = getelementptr inbounds %struct.regnode, %struct.regnode* %856, i32 0, i32 1
  %857 = load i8, i8* %type1248, align 1
  %idxprom1249 = zext i8 %857 to i64
  %arrayidx1250 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom1249
  %858 = load i8, i8* %arrayidx1250, align 1
  %conv1251 = zext i8 %858 to i32
  %cmp1252 = icmp eq i32 %conv1251, 31
  br i1 %cmp1252, label %land.lhs.true1254, label %if.then1259

land.lhs.true1254:                                ; preds = %land.lhs.true1247
  %859 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %860 = bitcast %struct.regnode* %859 to %struct.regnode_string*
  %str_len1255 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %860, i32 0, i32 0
  %861 = load i8, i8* %str_len1255, align 2
  %conv1256 = zext i8 %861 to i32
  %cmp1257 = icmp eq i32 %conv1256, 1
  br i1 %cmp1257, label %if.end1260, label %if.then1259

if.then1259:                                      ; preds = %land.lhs.true1254, %land.lhs.true1247
  br label %nogo

if.end1260:                                       ; preds = %land.lhs.true1254, %if.then1231
  %862 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %call1261 = call %struct.regnode* @Perl_regnext(%struct.regnode* %862)
  store %struct.regnode* %call1261, %struct.regnode** %nxt, align 8
  %863 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %type1262 = getelementptr inbounds %struct.regnode, %struct.regnode* %863, i32 0, i32 1
  %864 = load i8, i8* %type1262, align 1
  %conv1263 = zext i8 %864 to i32
  %cmp1264 = icmp ne i32 %conv1263, 50
  br i1 %cmp1264, label %if.then1266, label %if.end1267

if.then1266:                                      ; preds = %if.end1260
  br label %nogo

if.end1267:                                       ; preds = %if.end1260
  %865 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %open_parens1268 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %865, i32 0, i32 22
  %866 = load %struct.regnode**, %struct.regnode*** %open_parens1268, align 8
  %tobool1269 = icmp ne %struct.regnode** %866, null
  br i1 %tobool1269, label %if.then1270, label %if.end1282

if.then1270:                                      ; preds = %if.end1267
  %867 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %868 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %open_parens1271 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %868, i32 0, i32 22
  %869 = load %struct.regnode**, %struct.regnode*** %open_parens1271, align 8
  %870 = load %struct.regnode*, %struct.regnode** %nxt1, align 8
  %871 = bitcast %struct.regnode* %870 to %struct.regnode_1*
  %arg11272 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %871, i32 0, i32 3
  %872 = load i32, i32* %arg11272, align 4
  %sub1273 = sub i32 %872, 1
  %idxprom1274 = zext i32 %sub1273 to i64
  %arrayidx1275 = getelementptr inbounds %struct.regnode*, %struct.regnode** %869, i64 %idxprom1274
  store %struct.regnode* %867, %struct.regnode** %arrayidx1275, align 8
  %873 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %add.ptr1276 = getelementptr inbounds %struct.regnode, %struct.regnode* %873, i64 2
  %874 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %close_parens1277 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %874, i32 0, i32 23
  %875 = load %struct.regnode**, %struct.regnode*** %close_parens1277, align 8
  %876 = load %struct.regnode*, %struct.regnode** %nxt1, align 8
  %877 = bitcast %struct.regnode* %876 to %struct.regnode_1*
  %arg11278 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %877, i32 0, i32 3
  %878 = load i32, i32* %arg11278, align 4
  %sub1279 = sub i32 %878, 1
  %idxprom1280 = zext i32 %sub1279 to i64
  %arrayidx1281 = getelementptr inbounds %struct.regnode*, %struct.regnode** %875, i64 %idxprom1280
  store %struct.regnode* %add.ptr1276, %struct.regnode** %arrayidx1281, align 8
  br label %if.end1282

if.end1282:                                       ; preds = %if.then1270, %if.end1267
  %879 = load %struct.regnode*, %struct.regnode** %nxt, align 8
  %880 = bitcast %struct.regnode* %879 to %struct.regnode_1*
  %arg11283 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %880, i32 0, i32 3
  %881 = load i32, i32* %arg11283, align 4
  %conv1284 = trunc i32 %881 to i8
  %882 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %flags1285 = getelementptr inbounds %struct.regnode, %struct.regnode* %882, i32 0, i32 0
  store i8 %conv1284, i8* %flags1285, align 2
  %883 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %type1286 = getelementptr inbounds %struct.regnode, %struct.regnode* %883, i32 0, i32 1
  store i8 45, i8* %type1286, align 1
  %884 = load %struct.regnode*, %struct.regnode** %nxt1, align 8
  %type1287 = getelementptr inbounds %struct.regnode, %struct.regnode* %884, i32 0, i32 1
  store i8 40, i8* %type1287, align 1
  br label %if.end1288

if.end1288:                                       ; preds = %if.end1282, %land.lhs.true1228, %land.lhs.true1226, %land.lhs.true1222, %land.lhs.true1218, %land.lhs.true1216, %if.end1211
  br label %nogo

nogo:                                             ; preds = %if.end1288, %if.then1266, %if.then1259
  %885 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %type1289 = getelementptr inbounds %struct.regnode, %struct.regnode* %885, i32 0, i32 1
  %886 = load i8, i8* %type1289, align 1
  %conv1290 = zext i8 %886 to i32
  %cmp1291 = icmp eq i32 %conv1290, 47
  br i1 %cmp1291, label %land.lhs.true1293, label %if.else1367

land.lhs.true1293:                                ; preds = %nogo
  %887 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool1294 = icmp ne %struct.scan_data_t* %887, null
  br i1 %tobool1294, label %land.lhs.true1295, label %if.else1367

land.lhs.true1295:                                ; preds = %land.lhs.true1293
  %888 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1296 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %888, i32 0, i32 16
  %889 = load i32, i32* %flags1296, align 8
  %and1297 = and i32 %889, 128
  %tobool1298 = icmp ne i32 %and1297, 0
  br i1 %tobool1298, label %if.else1367, label %land.lhs.true1299

land.lhs.true1299:                                ; preds = %land.lhs.true1295
  %890 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1300 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %890, i32 0, i32 16
  %891 = load i32, i32* %flags1300, align 8
  %and1301 = and i32 %891, 512
  %tobool1302 = icmp ne i32 %and1301, 0
  br i1 %tobool1302, label %if.else1367, label %land.lhs.true1303

land.lhs.true1303:                                ; preds = %land.lhs.true1299
  %892 = load i64, i64* %deltanext947, align 8
  %tobool1304 = icmp ne i64 %892, 0
  br i1 %tobool1304, label %if.else1367, label %land.lhs.true1305

land.lhs.true1305:                                ; preds = %land.lhs.true1303
  %893 = load i64, i64* %minnext946, align 8
  %cmp1306 = icmp ne i64 %893, 0
  br i1 %cmp1306, label %land.lhs.true1308, label %if.else1367

land.lhs.true1308:                                ; preds = %land.lhs.true1305
  %894 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen1309 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %894, i32 0, i32 16
  %895 = load i32, i32* %seen1309, align 8
  %and1310 = and i32 %895, 1024
  %tobool1311 = icmp ne i32 %and1310, 0
  br i1 %tobool1311, label %if.else1367, label %if.then1312

if.then1312:                                      ; preds = %land.lhs.true1308
  %896 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %add.ptr1314 = getelementptr inbounds %struct.regnode, %struct.regnode* %896, i64 1
  %add.ptr1315 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr1314, i64 1
  store %struct.regnode* %add.ptr1315, %struct.regnode** %nxt1313, align 8
  %897 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %type1316 = getelementptr inbounds %struct.regnode, %struct.regnode* %897, i32 0, i32 1
  store i8 46, i8* %type1316, align 1
  br label %while.cond1317

while.cond1317:                                   ; preds = %while.body1327, %if.then1312
  %898 = load %struct.regnode*, %struct.regnode** %nxt1313, align 8
  %call1318 = call %struct.regnode* @Perl_regnext(%struct.regnode* %898)
  store %struct.regnode* %call1318, %struct.regnode** %nxt2, align 8
  %tobool1319 = icmp ne %struct.regnode* %call1318, null
  br i1 %tobool1319, label %land.rhs1320, label %land.end1325

land.rhs1320:                                     ; preds = %while.cond1317
  %899 = load %struct.regnode*, %struct.regnode** %nxt2, align 8
  %type1321 = getelementptr inbounds %struct.regnode, %struct.regnode* %899, i32 0, i32 1
  %900 = load i8, i8* %type1321, align 1
  %conv1322 = zext i8 %900 to i32
  %cmp1323 = icmp ne i32 %conv1322, 48
  br label %land.end1325

land.end1325:                                     ; preds = %land.rhs1320, %while.cond1317
  %901 = phi i1 [ false, %while.cond1317 ], [ %cmp1323, %land.rhs1320 ]
  br i1 %901, label %while.body1327, label %while.end1328

while.body1327:                                   ; preds = %land.end1325
  %902 = load %struct.regnode*, %struct.regnode** %nxt2, align 8
  store %struct.regnode* %902, %struct.regnode** %nxt1313, align 8
  br label %while.cond1317

while.end1328:                                    ; preds = %land.end1325
  %903 = load %struct.regnode*, %struct.regnode** %nxt2, align 8
  %type1329 = getelementptr inbounds %struct.regnode, %struct.regnode* %903, i32 0, i32 1
  store i8 1, i8* %type1329, align 1
  %904 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1330 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %904, i32 0, i32 16
  %905 = load i32, i32* %flags1330, align 8
  %and1331 = and i32 %905, 256
  %tobool1332 = icmp ne i32 %and1331, 0
  br i1 %tobool1332, label %land.lhs.true1333, label %if.else1364

land.lhs.true1333:                                ; preds = %while.end1328
  %906 = load %struct.regnode*, %struct.regnode** %nxt1313, align 8
  %type1334 = getelementptr inbounds %struct.regnode, %struct.regnode* %906, i32 0, i32 1
  %907 = load i8, i8* %type1334, align 1
  %conv1335 = zext i8 %907 to i32
  %cmp1336 = icmp eq i32 %conv1335, 50
  br i1 %cmp1336, label %if.then1338, label %if.else1364

if.then1338:                                      ; preds = %land.lhs.true1333
  %908 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %add.ptr1340 = getelementptr inbounds %struct.regnode, %struct.regnode* %908, i64 1
  %add.ptr1341 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr1340, i64 1
  store %struct.regnode* %add.ptr1341, %struct.regnode** %nxt11339, align 8
  %909 = load %struct.regnode*, %struct.regnode** %nxt1313, align 8
  %910 = bitcast %struct.regnode* %909 to %struct.regnode_1*
  %arg11342 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %910, i32 0, i32 3
  %911 = load i32, i32* %arg11342, align 4
  %conv1343 = trunc i32 %911 to i8
  %912 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %flags1344 = getelementptr inbounds %struct.regnode, %struct.regnode* %912, i32 0, i32 0
  store i8 %conv1343, i8* %flags1344, align 2
  %913 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %open_parens1345 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %913, i32 0, i32 22
  %914 = load %struct.regnode**, %struct.regnode*** %open_parens1345, align 8
  %tobool1346 = icmp ne %struct.regnode** %914, null
  br i1 %tobool1346, label %if.then1347, label %if.end1359

if.then1347:                                      ; preds = %if.then1338
  %915 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %916 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %open_parens1348 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %916, i32 0, i32 22
  %917 = load %struct.regnode**, %struct.regnode*** %open_parens1348, align 8
  %918 = load %struct.regnode*, %struct.regnode** %nxt11339, align 8
  %919 = bitcast %struct.regnode* %918 to %struct.regnode_1*
  %arg11349 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %919, i32 0, i32 3
  %920 = load i32, i32* %arg11349, align 4
  %sub1350 = sub i32 %920, 1
  %idxprom1351 = zext i32 %sub1350 to i64
  %arrayidx1352 = getelementptr inbounds %struct.regnode*, %struct.regnode** %917, i64 %idxprom1351
  store %struct.regnode* %915, %struct.regnode** %arrayidx1352, align 8
  %921 = load %struct.regnode*, %struct.regnode** %nxt2, align 8
  %add.ptr1353 = getelementptr inbounds %struct.regnode, %struct.regnode* %921, i64 1
  %922 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %close_parens1354 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %922, i32 0, i32 23
  %923 = load %struct.regnode**, %struct.regnode*** %close_parens1354, align 8
  %924 = load %struct.regnode*, %struct.regnode** %nxt11339, align 8
  %925 = bitcast %struct.regnode* %924 to %struct.regnode_1*
  %arg11355 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %925, i32 0, i32 3
  %926 = load i32, i32* %arg11355, align 4
  %sub1356 = sub i32 %926, 1
  %idxprom1357 = zext i32 %sub1356 to i64
  %arrayidx1358 = getelementptr inbounds %struct.regnode*, %struct.regnode** %923, i64 %idxprom1357
  store %struct.regnode* %add.ptr1353, %struct.regnode** %arrayidx1358, align 8
  br label %if.end1359

if.end1359:                                       ; preds = %if.then1347, %if.then1338
  %927 = load %struct.regnode*, %struct.regnode** %nxt11339, align 8
  %type1360 = getelementptr inbounds %struct.regnode, %struct.regnode* %927, i32 0, i32 1
  store i8 92, i8* %type1360, align 1
  %928 = load %struct.regnode*, %struct.regnode** %nxt1313, align 8
  %type1361 = getelementptr inbounds %struct.regnode, %struct.regnode* %928, i32 0, i32 1
  store i8 92, i8* %type1361, align 1
  %929 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %930 = load i64*, i64** %minlenp.addr, align 8
  %931 = load %struct.regnode*, %struct.regnode** %nxt1313, align 8
  %932 = load i32, i32* %stopparen.addr, align 4
  %933 = load i32, i32* %recursed_depth.addr, align 4
  %934 = load i32, i32* %depth.addr, align 4
  %add1362 = add i32 %934, 1
  %call1363 = call i64 @S_study_chunk(%struct.RExC_state_t* %929, %struct.regnode** %nxt11339, i64* %930, i64* %deltanext947, %struct.regnode* %931, %struct.scan_data_t* null, i32 %932, i32 %933, %struct.regnode_ssc* null, i32 0, i32 %add1362)
  br label %if.end1366

if.else1364:                                      ; preds = %land.lhs.true1333, %while.end1328
  %935 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %flags1365 = getelementptr inbounds %struct.regnode, %struct.regnode* %935, i32 0, i32 0
  store i8 0, i8* %flags1365, align 2
  br label %if.end1366

if.end1366:                                       ; preds = %if.else1364, %if.end1359
  br label %if.end1409

if.else1367:                                      ; preds = %land.lhs.true1308, %land.lhs.true1305, %land.lhs.true1303, %land.lhs.true1299, %land.lhs.true1295, %land.lhs.true1293, %nogo
  %936 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %type1368 = getelementptr inbounds %struct.regnode, %struct.regnode* %936, i32 0, i32 1
  %937 = load i8, i8* %type1368, align 1
  %conv1369 = zext i8 %937 to i32
  %cmp1370 = icmp eq i32 %conv1369, 47
  br i1 %cmp1370, label %land.lhs.true1372, label %if.end1408

land.lhs.true1372:                                ; preds = %if.else1367
  %938 = load i32, i32* %flags.addr, align 4
  %and1373 = and i32 %938, 8192
  %tobool1374 = icmp ne i32 %and1373, 0
  br i1 %tobool1374, label %land.lhs.true1375, label %if.end1408

land.lhs.true1375:                                ; preds = %land.lhs.true1372
  %939 = load i64, i64* %maxcount, align 8
  %cmp1376 = icmp eq i64 %939, 32767
  br i1 %cmp1376, label %land.lhs.true1378, label %if.end1408

land.lhs.true1378:                                ; preds = %land.lhs.true1375
  %940 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool1379 = icmp ne %struct.scan_data_t* %940, null
  br i1 %tobool1379, label %land.lhs.true1380, label %if.end1408

land.lhs.true1380:                                ; preds = %land.lhs.true1378
  %941 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %whilem_c1381 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %941, i32 0, i32 17
  %942 = load i32, i32* %whilem_c1381, align 4
  %inc1382 = add nsw i32 %942, 1
  store i32 %inc1382, i32* %whilem_c1381, align 4
  %cmp1383 = icmp slt i32 %inc1382, 16
  br i1 %cmp1383, label %if.then1385, label %if.end1408

if.then1385:                                      ; preds = %land.lhs.true1380
  %943 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %944 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %next_off1387 = getelementptr inbounds %struct.regnode, %struct.regnode* %944, i32 0, i32 2
  %945 = load i16, i16* %next_off1387, align 2
  %conv1388 = zext i16 %945 to i32
  %idx.ext1389 = sext i32 %conv1388 to i64
  %add.ptr1390 = getelementptr inbounds %struct.regnode, %struct.regnode* %943, i64 %idx.ext1389
  store %struct.regnode* %add.ptr1390, %struct.regnode** %nxt1386, align 8
  %946 = load %struct.regnode*, %struct.regnode** %nxt1386, align 8
  %add.ptr1391 = getelementptr inbounds %struct.regnode, %struct.regnode* %946, i64 -1
  %type1392 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr1391, i32 0, i32 1
  %947 = load i8, i8* %type1392, align 1
  %conv1393 = zext i8 %947 to i32
  %cmp1394 = icmp eq i32 %conv1393, 40
  br i1 %cmp1394, label %if.then1396, label %if.end1400

if.then1396:                                      ; preds = %if.then1385
  %948 = load %struct.regnode*, %struct.regnode** %nxt1386, align 8
  %949 = bitcast %struct.regnode* %948 to %struct.regnode_1*
  %arg11397 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %949, i32 0, i32 3
  %950 = load i32, i32* %arg11397, align 4
  %951 = load %struct.regnode*, %struct.regnode** %nxt1386, align 8
  %idx.ext1398 = zext i32 %950 to i64
  %add.ptr1399 = getelementptr inbounds %struct.regnode, %struct.regnode* %951, i64 %idx.ext1398
  store %struct.regnode* %add.ptr1399, %struct.regnode** %nxt1386, align 8
  br label %if.end1400

if.end1400:                                       ; preds = %if.then1396, %if.then1385
  %952 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %whilem_c1401 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %952, i32 0, i32 17
  %953 = load i32, i32* %whilem_c1401, align 4
  %conv1402 = sext i32 %953 to i64
  %954 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %whilem_seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %954, i32 0, i32 9
  %955 = load i64, i64* %whilem_seen, align 8
  %shl1403 = shl i64 %955, 4
  %or1404 = or i64 %conv1402, %shl1403
  %conv1405 = trunc i64 %or1404 to i8
  %956 = load %struct.regnode*, %struct.regnode** %nxt1386, align 8
  %add.ptr1406 = getelementptr inbounds %struct.regnode, %struct.regnode* %956, i64 -1
  %flags1407 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr1406, i32 0, i32 0
  store i8 %conv1405, i8* %flags1407, align 2
  br label %if.end1408

if.end1408:                                       ; preds = %if.end1400, %land.lhs.true1380, %land.lhs.true1378, %land.lhs.true1375, %land.lhs.true1372, %if.else1367
  br label %if.end1409

if.end1409:                                       ; preds = %if.end1408, %if.end1366
  %957 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool1410 = icmp ne %struct.scan_data_t* %957, null
  br i1 %tobool1410, label %land.lhs.true1411, label %if.end1416

land.lhs.true1411:                                ; preds = %if.end1409
  %958 = load i32, i32* %fl, align 4
  %and1412 = and i32 %958, 384
  %tobool1413 = icmp ne i32 %and1412, 0
  br i1 %tobool1413, label %if.then1414, label %if.end1416

if.then1414:                                      ; preds = %land.lhs.true1411
  %959 = load i32, i32* %pars, align 4
  %inc1415 = add nsw i32 %959, 1
  store i32 %inc1415, i32* %pars, align 4
  br label %if.end1416

if.end1416:                                       ; preds = %if.then1414, %land.lhs.true1411, %if.end1409
  %960 = load i32, i32* %flags.addr, align 4
  %and1417 = and i32 %960, 1024
  %tobool1418 = icmp ne i32 %and1417, 0
  br i1 %tobool1418, label %if.then1419, label %if.end1669

if.then1419:                                      ; preds = %if.end1416
  store %struct.sv* null, %struct.sv** %last_str, align 8
  store i64 0, i64* %last_chrs, align 8
  %961 = load i64, i64* %mincount, align 8
  %cmp1420 = icmp ne i64 %961, 0
  %conv1421 = zext i1 %cmp1420 to i32
  store i32 %conv1421, i32* %counted, align 4
  %962 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_end1422 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %962, i32 0, i32 3
  %963 = load i64, i64* %last_end1422, align 8
  %cmp1423 = icmp sgt i64 %963, 0
  br i1 %cmp1423, label %land.lhs.true1425, label %if.end1589

land.lhs.true1425:                                ; preds = %if.then1419
  %964 = load i64, i64* %mincount, align 8
  %cmp1426 = icmp ne i64 %964, 0
  br i1 %cmp1426, label %if.then1428, label %if.end1589

if.then1428:                                      ; preds = %land.lhs.true1425
  %965 = load i64, i64* %pos_before, align 8
  %966 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min1429 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %966, i32 0, i32 4
  %967 = load i64, i64* %last_start_min1429, align 8
  %cmp1430 = icmp sge i64 %965, %967
  br i1 %cmp1430, label %cond.true1432, label %cond.false1433

cond.true1432:                                    ; preds = %if.then1428
  %968 = load i64, i64* %pos_before, align 8
  br label %cond.end1435

cond.false1433:                                   ; preds = %if.then1428
  %969 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min1434 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %969, i32 0, i32 4
  %970 = load i64, i64* %last_start_min1434, align 8
  br label %cond.end1435

cond.end1435:                                     ; preds = %cond.false1433, %cond.true1432
  %cond1436 = phi i64 [ %968, %cond.true1432 ], [ %970, %cond.false1433 ]
  store i64 %cond1436, i64* %b, align 8
  %971 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1439 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %971, i32 0, i32 2
  %972 = load %struct.sv*, %struct.sv** %last_found1439, align 8
  %sv_flags1440 = getelementptr inbounds %struct.sv, %struct.sv* %972, i32 0, i32 2
  %973 = load i32, i32* %sv_flags1440, align 4
  %and1441 = and i32 %973, 2098176
  %cmp1442 = icmp eq i32 %and1441, 1024
  br i1 %cmp1442, label %cond.true1444, label %cond.false1449

cond.true1444:                                    ; preds = %cond.end1435
  %974 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1445 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %974, i32 0, i32 2
  %975 = load %struct.sv*, %struct.sv** %last_found1445, align 8
  %sv_any1446 = getelementptr inbounds %struct.sv, %struct.sv* %975, i32 0, i32 0
  %976 = load i8*, i8** %sv_any1446, align 8
  %977 = bitcast i8* %976 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %977, i32 0, i32 2
  %978 = load i64, i64* %xpv_cur, align 8
  store i64 %978, i64* %l1437, align 8
  %979 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1447 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %979, i32 0, i32 2
  %980 = load %struct.sv*, %struct.sv** %last_found1447, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %980, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %981 = load i8*, i8** %svu_pv, align 8
  %add.ptr1448 = getelementptr inbounds i8, i8* %981, i64 0
  br label %cond.end1452

cond.false1449:                                   ; preds = %cond.end1435
  %982 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1450 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %982, i32 0, i32 2
  %983 = load %struct.sv*, %struct.sv** %last_found1450, align 8
  %call1451 = call i8* @Perl_sv_2pv_flags(%struct.sv* %983, i64* %l1437, i32 34)
  br label %cond.end1452

cond.end1452:                                     ; preds = %cond.false1449, %cond.true1444
  %cond1453 = phi i8* [ %add.ptr1448, %cond.true1444 ], [ %call1451, %cond.false1449 ]
  store i8* %cond1453, i8** %s1438, align 8
  %984 = load i64, i64* %b, align 8
  %985 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min1454 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %985, i32 0, i32 4
  %986 = load i64, i64* %last_start_min1454, align 8
  %sub1455 = sub nsw i64 %984, %986
  store i64 %sub1455, i64* %old, align 8
  %987 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81456 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %987, i32 0, i32 25
  %988 = load i32, i32* %utf81456, align 8
  %tobool1457 = icmp ne i32 %988, 0
  br i1 %tobool1457, label %cond.true1458, label %cond.false1459

cond.true1458:                                    ; preds = %cond.end1452
  br i1 true, label %if.then1460, label %if.end1466

cond.false1459:                                   ; preds = %cond.end1452
  br i1 false, label %if.then1460, label %if.end1466

if.then1460:                                      ; preds = %cond.false1459, %cond.true1458
  %989 = load i8*, i8** %s1438, align 8
  %990 = load i64, i64* %old, align 8
  %conv1461 = trunc i64 %990 to i32
  %call1462 = call i8* @Perl_utf8_hop(i8* %989, i32 %conv1461)
  %991 = load i8*, i8** %s1438, align 8
  %sub.ptr.lhs.cast1463 = ptrtoint i8* %call1462 to i64
  %sub.ptr.rhs.cast1464 = ptrtoint i8* %991 to i64
  %sub.ptr.sub1465 = sub i64 %sub.ptr.lhs.cast1463, %sub.ptr.rhs.cast1464
  store i64 %sub.ptr.sub1465, i64* %old, align 8
  br label %if.end1466

if.end1466:                                       ; preds = %if.then1460, %cond.false1459, %cond.true1458
  %992 = load i64, i64* %old, align 8
  %993 = load i64, i64* %l1437, align 8
  %sub1467 = sub i64 %993, %992
  store i64 %sub1467, i64* %l1437, align 8
  %994 = load i8*, i8** %s1438, align 8
  %995 = load i64, i64* %old, align 8
  %add.ptr1468 = getelementptr inbounds i8, i8* %994, i64 %995
  %996 = load i64, i64* %l1437, align 8
  %997 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81469 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %997, i32 0, i32 25
  %998 = load i32, i32* %utf81469, align 8
  %tobool1470 = icmp ne i32 %998, 0
  %999 = zext i1 %tobool1470 to i64
  %cond1471 = select i1 %tobool1470, i32 1, i32 0
  %tobool1472 = icmp ne i32 %cond1471, 0
  %1000 = zext i1 %tobool1472 to i64
  %cond1473 = select i1 %tobool1472, i32 536870912, i32 0
  %call1474 = call %struct.sv* @Perl_newSVpvn_flags(i8* %add.ptr1468, i64 %996, i32 %cond1473)
  store %struct.sv* %call1474, %struct.sv** %last_str, align 8
  %1001 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81475 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1001, i32 0, i32 25
  %1002 = load i32, i32* %utf81475, align 8
  %tobool1476 = icmp ne i32 %1002, 0
  br i1 %tobool1476, label %cond.true1477, label %cond.false1478

cond.true1477:                                    ; preds = %if.end1466
  br i1 true, label %cond.true1479, label %cond.false1484

cond.false1478:                                   ; preds = %if.end1466
  br i1 false, label %cond.true1479, label %cond.false1484

cond.true1479:                                    ; preds = %cond.false1478, %cond.true1477
  %1003 = load i8*, i8** %s1438, align 8
  %1004 = load i64, i64* %old, align 8
  %add.ptr1480 = getelementptr inbounds i8, i8* %1003, i64 %1004
  %1005 = load i8*, i8** %s1438, align 8
  %1006 = load i64, i64* %old, align 8
  %add.ptr1481 = getelementptr inbounds i8, i8* %1005, i64 %1006
  %1007 = load i64, i64* %l1437, align 8
  %add.ptr1482 = getelementptr inbounds i8, i8* %add.ptr1481, i64 %1007
  %call1483 = call i64 @Perl_utf8_length(i8* %add.ptr1480, i8* %add.ptr1482)
  br label %cond.end1485

cond.false1484:                                   ; preds = %cond.false1478, %cond.true1477
  %1008 = load i64, i64* %l1437, align 8
  br label %cond.end1485

cond.end1485:                                     ; preds = %cond.false1484, %cond.true1479
  %cond1486 = phi i64 [ %call1483, %cond.true1479 ], [ %1008, %cond.false1484 ]
  store i64 %cond1486, i64* %last_chrs, align 8
  %1009 = load i64, i64* %deltanext947, align 8
  %cmp1487 = icmp eq i64 %1009, 0
  br i1 %cmp1487, label %land.lhs.true1489, label %if.else1571

land.lhs.true1489:                                ; preds = %cond.end1485
  %1010 = load i64, i64* %pos_before, align 8
  %1011 = load i64, i64* %b, align 8
  %cmp1490 = icmp eq i64 %1010, %1011
  br i1 %cmp1490, label %if.then1492, label %if.else1571

if.then1492:                                      ; preds = %land.lhs.true1489
  %1012 = load i64, i64* %mincount, align 8
  %cmp1493 = icmp sgt i64 %1012, 1
  br i1 %cmp1493, label %if.then1495, label %if.end1570

if.then1495:                                      ; preds = %if.then1492
  %1013 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_flags1496 = getelementptr inbounds %struct.sv, %struct.sv* %1013, i32 0, i32 2
  %1014 = load i32, i32* %sv_flags1496, align 4
  %and1497 = and i32 %1014, 268435456
  %tobool1498 = icmp ne i32 %and1497, 0
  br i1 %tobool1498, label %cond.true1505, label %lor.lhs.false1499

lor.lhs.false1499:                                ; preds = %if.then1495
  %1015 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_any1500 = getelementptr inbounds %struct.sv, %struct.sv* %1015, i32 0, i32 0
  %1016 = load i8*, i8** %sv_any1500, align 8
  %1017 = bitcast i8* %1016 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %1017, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %1018 = load i64, i64* %xpvlenu_len, align 8
  %1019 = load i64, i64* %mincount, align 8
  %1020 = load i64, i64* %l1437, align 8
  %mul1501 = mul i64 %1019, %1020
  %add1502 = add i64 %mul1501, 1
  %cmp1503 = icmp ult i64 %1018, %add1502
  br i1 %cmp1503, label %cond.true1505, label %cond.false1509

cond.true1505:                                    ; preds = %lor.lhs.false1499, %if.then1495
  %1021 = load %struct.sv*, %struct.sv** %last_str, align 8
  %1022 = load i64, i64* %mincount, align 8
  %1023 = load i64, i64* %l1437, align 8
  %mul1506 = mul i64 %1022, %1023
  %add1507 = add i64 %mul1506, 1
  %call1508 = call i8* @Perl_sv_grow(%struct.sv* %1021, i64 %add1507)
  br label %cond.end1512

cond.false1509:                                   ; preds = %lor.lhs.false1499
  %1024 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_u1510 = getelementptr inbounds %struct.sv, %struct.sv* %1024, i32 0, i32 3
  %svu_pv1511 = bitcast %union.anon* %sv_u1510 to i8**
  %1025 = load i8*, i8** %svu_pv1511, align 8
  br label %cond.end1512

cond.end1512:                                     ; preds = %cond.false1509, %cond.true1505
  %cond1513 = phi i8* [ %call1508, %cond.true1505 ], [ %1025, %cond.false1509 ]
  %1026 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_u1514 = getelementptr inbounds %struct.sv, %struct.sv* %1026, i32 0, i32 3
  %svu_pv1515 = bitcast %union.anon* %sv_u1514 to i8**
  %1027 = load i8*, i8** %svu_pv1515, align 8
  %1028 = load i64, i64* %l1437, align 8
  %add.ptr1516 = getelementptr inbounds i8, i8* %1027, i64 %1028
  %1029 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_u1517 = getelementptr inbounds %struct.sv, %struct.sv* %1029, i32 0, i32 3
  %svu_pv1518 = bitcast %union.anon* %sv_u1517 to i8**
  %1030 = load i8*, i8** %svu_pv1518, align 8
  %add.ptr1519 = getelementptr inbounds i8, i8* %1030, i64 0
  %1031 = load i64, i64* %l1437, align 8
  %conv1520 = trunc i64 %1031 to i32
  %1032 = load i64, i64* %mincount, align 8
  %sub1521 = sub nsw i64 %1032, 1
  call void @Perl_repeatcpy(i8* %add.ptr1516, i8* %add.ptr1519, i32 %conv1520, i64 %sub1521)
  br label %do.body1522

do.body1522:                                      ; preds = %cond.end1512
  %1033 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_any1523 = getelementptr inbounds %struct.sv, %struct.sv* %1033, i32 0, i32 0
  %1034 = load i8*, i8** %sv_any1523, align 8
  %1035 = bitcast i8* %1034 to %struct.xpv*
  %xpv_cur1524 = getelementptr inbounds %struct.xpv, %struct.xpv* %1035, i32 0, i32 2
  %1036 = load i64, i64* %xpv_cur1524, align 8
  %1037 = load i64, i64* %mincount, align 8
  %mul1525 = mul i64 %1036, %1037
  %1038 = load %struct.sv*, %struct.sv** %last_str, align 8
  %sv_any1526 = getelementptr inbounds %struct.sv, %struct.sv* %1038, i32 0, i32 0
  %1039 = load i8*, i8** %sv_any1526, align 8
  %1040 = bitcast i8* %1039 to %struct.xpv*
  %xpv_cur1527 = getelementptr inbounds %struct.xpv, %struct.xpv* %1040, i32 0, i32 2
  store i64 %mul1525, i64* %xpv_cur1527, align 8
  br label %do.end1528

do.end1528:                                       ; preds = %do.body1522
  br label %do.body1529

do.body1529:                                      ; preds = %do.end1528
  %1041 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1530 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1041, i32 0, i32 2
  %1042 = load %struct.sv*, %struct.sv** %last_found1530, align 8
  %sv_any1531 = getelementptr inbounds %struct.sv, %struct.sv* %1042, i32 0, i32 0
  %1043 = load i8*, i8** %sv_any1531, align 8
  %1044 = bitcast i8* %1043 to %struct.xpv*
  %xpv_cur1532 = getelementptr inbounds %struct.xpv, %struct.xpv* %1044, i32 0, i32 2
  %1045 = load i64, i64* %xpv_cur1532, align 8
  %1046 = load i64, i64* %l1437, align 8
  %sub1533 = sub i64 %1045, %1046
  %1047 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1534 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1047, i32 0, i32 2
  %1048 = load %struct.sv*, %struct.sv** %last_found1534, align 8
  %sv_any1535 = getelementptr inbounds %struct.sv, %struct.sv* %1048, i32 0, i32 0
  %1049 = load i8*, i8** %sv_any1535, align 8
  %1050 = bitcast i8* %1049 to %struct.xpv*
  %xpv_cur1536 = getelementptr inbounds %struct.xpv, %struct.xpv* %1050, i32 0, i32 2
  store i64 %sub1533, i64* %xpv_cur1536, align 8
  br label %do.end1537

do.end1537:                                       ; preds = %do.body1529
  %1051 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1538 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1051, i32 0, i32 2
  %1052 = load %struct.sv*, %struct.sv** %last_found1538, align 8
  %1053 = load %struct.sv*, %struct.sv** %last_str, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %1052, %struct.sv* %1053, i32 2)
  %1054 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1540 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1054, i32 0, i32 2
  %1055 = load %struct.sv*, %struct.sv** %last_found1540, align 8
  store %struct.sv* %1055, %struct.sv** %sv1539, align 8
  %1056 = load %struct.sv*, %struct.sv** %sv1539, align 8
  %sv_flags1542 = getelementptr inbounds %struct.sv, %struct.sv* %1056, i32 0, i32 2
  %1057 = load i32, i32* %sv_flags1542, align 4
  %and1543 = and i32 %1057, 536870912
  %tobool1544 = icmp ne i32 %and1543, 0
  br i1 %tobool1544, label %land.lhs.true1545, label %cond.false1551

land.lhs.true1545:                                ; preds = %do.end1537
  %1058 = load %struct.sv*, %struct.sv** %sv1539, align 8
  %sv_flags1546 = getelementptr inbounds %struct.sv, %struct.sv* %1058, i32 0, i32 2
  %1059 = load i32, i32* %sv_flags1546, align 4
  %and1547 = and i32 %1059, 14680064
  %tobool1548 = icmp ne i32 %and1547, 0
  br i1 %tobool1548, label %cond.true1549, label %cond.false1551

cond.true1549:                                    ; preds = %land.lhs.true1545
  %1060 = load %struct.sv*, %struct.sv** %sv1539, align 8
  %call1550 = call %struct.magic* @Perl_mg_find(%struct.sv* %1060, i32 119)
  br label %cond.end1552

cond.false1551:                                   ; preds = %land.lhs.true1545, %do.end1537
  br label %cond.end1552

cond.end1552:                                     ; preds = %cond.false1551, %cond.true1549
  %cond1553 = phi %struct.magic* [ %call1550, %cond.true1549 ], [ null, %cond.false1551 ]
  store %struct.magic* %cond1553, %struct.magic** %mg1541, align 8
  %1061 = load %struct.magic*, %struct.magic** %mg1541, align 8
  %tobool1554 = icmp ne %struct.magic* %1061, null
  br i1 %tobool1554, label %land.lhs.true1555, label %if.end1564

land.lhs.true1555:                                ; preds = %cond.end1552
  %1062 = load %struct.magic*, %struct.magic** %mg1541, align 8
  %mg_len1556 = getelementptr inbounds %struct.magic, %struct.magic* %1062, i32 0, i32 5
  %1063 = load i64, i64* %mg_len1556, align 8
  %cmp1557 = icmp sge i64 %1063, 0
  br i1 %cmp1557, label %if.then1559, label %if.end1564

if.then1559:                                      ; preds = %land.lhs.true1555
  %1064 = load i64, i64* %last_chrs, align 8
  %1065 = load i64, i64* %mincount, align 8
  %sub1560 = sub nsw i64 %1065, 1
  %mul1561 = mul i64 %1064, %sub1560
  %1066 = load %struct.magic*, %struct.magic** %mg1541, align 8
  %mg_len1562 = getelementptr inbounds %struct.magic, %struct.magic* %1066, i32 0, i32 5
  %1067 = load i64, i64* %mg_len1562, align 8
  %add1563 = add i64 %1067, %mul1561
  store i64 %add1563, i64* %mg_len1562, align 8
  br label %if.end1564

if.end1564:                                       ; preds = %if.then1559, %land.lhs.true1555, %cond.end1552
  %1068 = load i64, i64* %mincount, align 8
  %1069 = load i64, i64* %last_chrs, align 8
  %mul1565 = mul i64 %1069, %1068
  store i64 %mul1565, i64* %last_chrs, align 8
  %1070 = load i64, i64* %l1437, align 8
  %1071 = load i64, i64* %mincount, align 8
  %sub1566 = sub nsw i64 %1071, 1
  %mul1567 = mul i64 %1070, %sub1566
  %1072 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_end1568 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1072, i32 0, i32 3
  %1073 = load i64, i64* %last_end1568, align 8
  %add1569 = add i64 %1073, %mul1567
  store i64 %add1569, i64* %last_end1568, align 8
  br label %if.end1570

if.end1570:                                       ; preds = %if.end1564, %if.then1492
  br label %if.end1588

if.else1571:                                      ; preds = %land.lhs.true1489, %cond.end1485
  %1074 = load i64, i64* %minnext946, align 8
  %1075 = load i64, i64* %mincount, align 8
  %sub1572 = sub nsw i64 %1075, 1
  %mul1573 = mul nsw i64 %1074, %sub1572
  %1076 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min1574 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1076, i32 0, i32 4
  %1077 = load i64, i64* %last_start_min1574, align 8
  %add1575 = add nsw i64 %1077, %mul1573
  store i64 %add1575, i64* %last_start_min1574, align 8
  %1078 = load i32, i32* %is_inf, align 4
  %tobool1576 = icmp ne i32 %1078, 0
  br i1 %tobool1576, label %cond.true1577, label %cond.false1578

cond.true1577:                                    ; preds = %if.else1571
  br label %cond.end1585

cond.false1578:                                   ; preds = %if.else1571
  %1079 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_max1579 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1079, i32 0, i32 5
  %1080 = load i64, i64* %last_start_max1579, align 8
  %1081 = load i64, i64* %maxcount, align 8
  %sub1580 = sub nsw i64 %1081, 1
  %1082 = load i64, i64* %minnext946, align 8
  %1083 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta1581 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1083, i32 0, i32 1
  %1084 = load i64, i64* %pos_delta1581, align 8
  %add1582 = add nsw i64 %1082, %1084
  %mul1583 = mul nsw i64 %sub1580, %add1582
  %add1584 = add nsw i64 %1080, %mul1583
  br label %cond.end1585

cond.end1585:                                     ; preds = %cond.false1578, %cond.true1577
  %cond1586 = phi i64 [ 9223372036854775807, %cond.true1577 ], [ %add1584, %cond.false1578 ]
  %1085 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_max1587 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1085, i32 0, i32 5
  store i64 %cond1586, i64* %last_start_max1587, align 8
  br label %if.end1588

if.end1588:                                       ; preds = %cond.end1585, %if.end1570
  br label %if.end1589

if.end1589:                                       ; preds = %if.end1588, %land.lhs.true1425, %if.then1419
  %1086 = load i64, i64* %minnext946, align 8
  %1087 = load i64, i64* %mincount, align 8
  %1088 = load i32, i32* %counted, align 4
  %conv1590 = sext i32 %1088 to i64
  %sub1591 = sub nsw i64 %1087, %conv1590
  %mul1592 = mul nsw i64 %1086, %sub1591
  %1089 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min1593 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1089, i32 0, i32 0
  %1090 = load i64, i64* %pos_min1593, align 8
  %add1594 = add nsw i64 %1090, %mul1592
  store i64 %add1594, i64* %pos_min1593, align 8
  %1091 = load i64, i64* %deltanext947, align 8
  %cmp1595 = icmp eq i64 %1091, 9223372036854775807
  br i1 %cmp1595, label %if.then1610, label %lor.lhs.false1597

lor.lhs.false1597:                                ; preds = %if.end1589
  %1092 = load i32, i32* %counted, align 4
  %sub1598 = sub nsw i32 0, %1092
  %conv1599 = sext i32 %sub1598 to i64
  %1093 = load i64, i64* %deltanext947, align 8
  %mul1600 = mul nsw i64 %conv1599, %1093
  %1094 = load i64, i64* %minnext946, align 8
  %1095 = load i64, i64* %deltanext947, align 8
  %add1601 = add nsw i64 %1094, %1095
  %1096 = load i64, i64* %maxcount, align 8
  %mul1602 = mul nsw i64 %add1601, %1096
  %add1603 = add nsw i64 %mul1600, %mul1602
  %1097 = load i64, i64* %minnext946, align 8
  %1098 = load i64, i64* %mincount, align 8
  %mul1604 = mul nsw i64 %1097, %1098
  %sub1605 = sub nsw i64 %add1603, %mul1604
  %1099 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta1606 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1099, i32 0, i32 1
  %1100 = load i64, i64* %pos_delta1606, align 8
  %sub1607 = sub nsw i64 9223372036854775807, %1100
  %cmp1608 = icmp sge i64 %sub1605, %sub1607
  br i1 %cmp1608, label %if.then1610, label %if.else1612

if.then1610:                                      ; preds = %lor.lhs.false1597, %if.end1589
  %1101 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta1611 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1101, i32 0, i32 1
  store i64 9223372036854775807, i64* %pos_delta1611, align 8
  br label %if.end1623

if.else1612:                                      ; preds = %lor.lhs.false1597
  %1102 = load i32, i32* %counted, align 4
  %sub1613 = sub nsw i32 0, %1102
  %conv1614 = sext i32 %sub1613 to i64
  %1103 = load i64, i64* %deltanext947, align 8
  %mul1615 = mul nsw i64 %conv1614, %1103
  %1104 = load i64, i64* %minnext946, align 8
  %1105 = load i64, i64* %deltanext947, align 8
  %add1616 = add nsw i64 %1104, %1105
  %1106 = load i64, i64* %maxcount, align 8
  %mul1617 = mul nsw i64 %add1616, %1106
  %add1618 = add nsw i64 %mul1615, %mul1617
  %1107 = load i64, i64* %minnext946, align 8
  %1108 = load i64, i64* %mincount, align 8
  %mul1619 = mul nsw i64 %1107, %1108
  %sub1620 = sub nsw i64 %add1618, %mul1619
  %1109 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta1621 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1109, i32 0, i32 1
  %1110 = load i64, i64* %pos_delta1621, align 8
  %add1622 = add nsw i64 %1110, %sub1620
  store i64 %add1622, i64* %pos_delta1621, align 8
  br label %if.end1623

if.end1623:                                       ; preds = %if.else1612, %if.then1610
  %1111 = load i64, i64* %mincount, align 8
  %1112 = load i64, i64* %maxcount, align 8
  %cmp1624 = icmp ne i64 %1111, %1112
  br i1 %cmp1624, label %if.then1626, label %if.end1668

if.then1626:                                      ; preds = %if.end1623
  %1113 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1114 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %1115 = load i64*, i64** %minlenp.addr, align 8
  %1116 = load i32, i32* %is_inf, align 4
  call void @S_scan_commit(%struct.RExC_state_t* %1113, %struct.scan_data_t* %1114, i64* %1115, i32 %1116)
  %1117 = load i64, i64* %mincount, align 8
  %tobool1627 = icmp ne i64 %1117, 0
  br i1 %tobool1627, label %land.lhs.true1628, label %if.end1665

land.lhs.true1628:                                ; preds = %if.then1626
  %1118 = load %struct.sv*, %struct.sv** %last_str, align 8
  %tobool1629 = icmp ne %struct.sv* %1118, null
  br i1 %tobool1629, label %if.then1630, label %if.end1665

if.then1630:                                      ; preds = %land.lhs.true1628
  %1119 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found1632 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1119, i32 0, i32 2
  %1120 = load %struct.sv*, %struct.sv** %last_found1632, align 8
  store %struct.sv* %1120, %struct.sv** %sv1631, align 8
  %1121 = load %struct.sv*, %struct.sv** %sv1631, align 8
  %sv_flags1634 = getelementptr inbounds %struct.sv, %struct.sv* %1121, i32 0, i32 2
  %1122 = load i32, i32* %sv_flags1634, align 4
  %and1635 = and i32 %1122, 536870912
  %tobool1636 = icmp ne i32 %and1635, 0
  br i1 %tobool1636, label %land.lhs.true1637, label %cond.false1643

land.lhs.true1637:                                ; preds = %if.then1630
  %1123 = load %struct.sv*, %struct.sv** %sv1631, align 8
  %sv_flags1638 = getelementptr inbounds %struct.sv, %struct.sv* %1123, i32 0, i32 2
  %1124 = load i32, i32* %sv_flags1638, align 4
  %and1639 = and i32 %1124, 14680064
  %tobool1640 = icmp ne i32 %and1639, 0
  br i1 %tobool1640, label %cond.true1641, label %cond.false1643

cond.true1641:                                    ; preds = %land.lhs.true1637
  %1125 = load %struct.sv*, %struct.sv** %sv1631, align 8
  %call1642 = call %struct.magic* @Perl_mg_find(%struct.sv* %1125, i32 119)
  br label %cond.end1644

cond.false1643:                                   ; preds = %land.lhs.true1637, %if.then1630
  br label %cond.end1644

cond.end1644:                                     ; preds = %cond.false1643, %cond.true1641
  %cond1645 = phi %struct.magic* [ %call1642, %cond.true1641 ], [ null, %cond.false1643 ]
  store %struct.magic* %cond1645, %struct.magic** %mg1633, align 8
  %1126 = load %struct.magic*, %struct.magic** %mg1633, align 8
  %tobool1646 = icmp ne %struct.magic* %1126, null
  br i1 %tobool1646, label %if.then1647, label %if.end1649

if.then1647:                                      ; preds = %cond.end1644
  %1127 = load %struct.magic*, %struct.magic** %mg1633, align 8
  %mg_len1648 = getelementptr inbounds %struct.magic, %struct.magic* %1127, i32 0, i32 5
  store i64 -1, i64* %mg_len1648, align 8
  br label %if.end1649

if.end1649:                                       ; preds = %if.then1647, %cond.end1644
  %1128 = load %struct.sv*, %struct.sv** %sv1631, align 8
  %1129 = load %struct.sv*, %struct.sv** %last_str, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %1128, %struct.sv* %1129, i32 1538)
  %1130 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min1650 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1130, i32 0, i32 0
  %1131 = load i64, i64* %pos_min1650, align 8
  %1132 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_end1651 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1132, i32 0, i32 3
  store i64 %1131, i64* %last_end1651, align 8
  %1133 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min1652 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1133, i32 0, i32 0
  %1134 = load i64, i64* %pos_min1652, align 8
  %1135 = load i64, i64* %last_chrs, align 8
  %sub1653 = sub i64 %1134, %1135
  %1136 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min1654 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1136, i32 0, i32 4
  store i64 %sub1653, i64* %last_start_min1654, align 8
  %1137 = load i32, i32* %is_inf, align 4
  %tobool1655 = icmp ne i32 %1137, 0
  br i1 %tobool1655, label %cond.true1656, label %cond.false1657

cond.true1656:                                    ; preds = %if.end1649
  br label %cond.end1662

cond.false1657:                                   ; preds = %if.end1649
  %1138 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min1658 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1138, i32 0, i32 0
  %1139 = load i64, i64* %pos_min1658, align 8
  %1140 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta1659 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1140, i32 0, i32 1
  %1141 = load i64, i64* %pos_delta1659, align 8
  %add1660 = add nsw i64 %1139, %1141
  %1142 = load i64, i64* %last_chrs, align 8
  %sub1661 = sub i64 %add1660, %1142
  br label %cond.end1662

cond.end1662:                                     ; preds = %cond.false1657, %cond.true1656
  %cond1663 = phi i64 [ 9223372036854775807, %cond.true1656 ], [ %sub1661, %cond.false1657 ]
  %1143 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_max1664 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1143, i32 0, i32 5
  store i64 %cond1663, i64* %last_start_max1664, align 8
  br label %if.end1665

if.end1665:                                       ; preds = %cond.end1662, %land.lhs.true1628, %if.then1626
  %1144 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_float1666 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1144, i32 0, i32 11
  %1145 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest1667 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1145, i32 0, i32 6
  store %struct.sv** %longest_float1666, %struct.sv*** %longest1667, align 8
  br label %if.end1668

if.end1668:                                       ; preds = %if.end1665, %if.end1623
  %1146 = load %struct.sv*, %struct.sv** %last_str, align 8
  %1147 = bitcast %struct.sv* %1146 to i8*
  %1148 = bitcast i8* %1147 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %1148)
  br label %if.end1669

if.end1669:                                       ; preds = %if.end1668, %if.end1416
  %1149 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool1670 = icmp ne %struct.scan_data_t* %1149, null
  br i1 %tobool1670, label %land.lhs.true1671, label %if.end1677

land.lhs.true1671:                                ; preds = %if.end1669
  %1150 = load i32, i32* %fl, align 4
  %and1672 = and i32 %1150, 512
  %tobool1673 = icmp ne i32 %and1672, 0
  br i1 %tobool1673, label %if.then1674, label %if.end1677

if.then1674:                                      ; preds = %land.lhs.true1671
  %1151 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1675 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1151, i32 0, i32 16
  %1152 = load i32, i32* %flags1675, align 8
  %or1676 = or i32 %1152, 512
  store i32 %or1676, i32* %flags1675, align 8
  br label %if.end1677

if.end1677:                                       ; preds = %if.then1674, %land.lhs.true1671, %if.end1669
  br label %optimize_curly_tail

optimize_curly_tail:                              ; preds = %if.end1677, %if.end996
  %1153 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %type1678 = getelementptr inbounds %struct.regnode, %struct.regnode* %1153, i32 0, i32 1
  %1154 = load i8, i8* %type1678, align 1
  %conv1679 = zext i8 %1154 to i32
  %cmp1680 = icmp ne i32 %conv1679, 47
  br i1 %cmp1680, label %if.then1682, label %if.end1705

if.then1682:                                      ; preds = %optimize_curly_tail
  br label %while.cond1683

while.cond1683:                                   ; preds = %while.body1697, %if.then1682
  %1155 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %call1684 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1155)
  store %struct.regnode* %call1684, %struct.regnode** %next, align 8
  %type1685 = getelementptr inbounds %struct.regnode, %struct.regnode* %call1684, i32 0, i32 1
  %1156 = load i8, i8* %type1685, align 1
  %idxprom1686 = zext i8 %1156 to i64
  %arrayidx1687 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom1686
  %1157 = load i8, i8* %arrayidx1687, align 1
  %conv1688 = zext i8 %1157 to i32
  %cmp1689 = icmp eq i32 %conv1688, 40
  br i1 %cmp1689, label %land.rhs1691, label %land.end1695

land.rhs1691:                                     ; preds = %while.cond1683
  %1158 = load %struct.regnode*, %struct.regnode** %next, align 8
  %next_off1692 = getelementptr inbounds %struct.regnode, %struct.regnode* %1158, i32 0, i32 2
  %1159 = load i16, i16* %next_off1692, align 2
  %conv1693 = zext i16 %1159 to i32
  %tobool1694 = icmp ne i32 %conv1693, 0
  br label %land.end1695

land.end1695:                                     ; preds = %land.rhs1691, %while.cond1683
  %1160 = phi i1 [ false, %while.cond1683 ], [ %tobool1694, %land.rhs1691 ]
  br i1 %1160, label %while.body1697, label %while.end1704

while.body1697:                                   ; preds = %land.end1695
  %1161 = load %struct.regnode*, %struct.regnode** %next, align 8
  %next_off1698 = getelementptr inbounds %struct.regnode, %struct.regnode* %1161, i32 0, i32 2
  %1162 = load i16, i16* %next_off1698, align 2
  %conv1699 = zext i16 %1162 to i32
  %1163 = load %struct.regnode*, %struct.regnode** %oscan, align 8
  %next_off1700 = getelementptr inbounds %struct.regnode, %struct.regnode* %1163, i32 0, i32 2
  %1164 = load i16, i16* %next_off1700, align 2
  %conv1701 = zext i16 %1164 to i32
  %add1702 = add nsw i32 %conv1701, %conv1699
  %conv1703 = trunc i32 %add1702 to i16
  store i16 %conv1703, i16* %next_off1700, align 2
  br label %while.cond1683

while.end1704:                                    ; preds = %land.end1695
  br label %if.end1705

if.end1705:                                       ; preds = %while.end1704, %optimize_curly_tail
  br label %while.cond15

sw.default:                                       ; preds = %if.then945
  br label %sw.bb1706

sw.bb1706:                                        ; preds = %if.then945, %if.then945, %sw.default
  %1165 = load i32, i32* %flags.addr, align 4
  %and1707 = and i32 %1165, 1024
  %tobool1708 = icmp ne i32 %and1707, 0
  br i1 %tobool1708, label %if.then1709, label %if.end1712

if.then1709:                                      ; preds = %sw.bb1706
  %1166 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1167 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %1168 = load i64*, i64** %minlenp.addr, align 8
  %1169 = load i32, i32* %is_inf, align 4
  call void @S_scan_commit(%struct.RExC_state_t* %1166, %struct.scan_data_t* %1167, i64* %1168, i32 %1169)
  %1170 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_float1710 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1170, i32 0, i32 11
  %1171 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest1711 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1171, i32 0, i32 6
  store %struct.sv** %longest_float1710, %struct.sv*** %longest1711, align 8
  br label %if.end1712

if.end1712:                                       ; preds = %if.then1709, %sw.bb1706
  store i32 1, i32* %is_inf_internal, align 4
  store i32 1, i32* %is_inf, align 4
  %1172 = load i32, i32* %flags.addr, align 4
  %and1713 = and i32 %1172, 4096
  %tobool1714 = icmp ne i32 %and1713, 0
  br i1 %tobool1714, label %if.then1715, label %if.end1725

if.then1715:                                      ; preds = %if.end1712
  %1173 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1716 = getelementptr inbounds %struct.regnode, %struct.regnode* %1173, i32 0, i32 1
  %1174 = load i8, i8* %type1716, align 1
  %conv1717 = zext i8 %1174 to i32
  %cmp1718 = icmp eq i32 %conv1717, 29
  br i1 %cmp1718, label %if.then1720, label %if.else1722

if.then1720:                                      ; preds = %if.then1715
  %1175 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1721 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1175, i32 0, i32 19
  %1176 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1721, align 8
  call void @S_ssc_add_range(%struct.regnode_ssc* %1176, i64 0, i64 -1)
  br label %if.end1724

if.else1722:                                      ; preds = %if.then1715
  %1177 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1723 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1177, i32 0, i32 19
  %1178 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1723, align 8
  call void @S_ssc_anything(%struct.regnode_ssc* %1178)
  br label %if.end1724

if.end1724:                                       ; preds = %if.else1722, %if.then1720
  br label %if.end1725

if.end1725:                                       ; preds = %if.end1724, %if.end1712
  %1179 = load i32, i32* %flags.addr, align 4
  %and1726 = and i32 %1179, -6145
  store i32 %and1726, i32* %flags.addr, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end1725
  br label %if.end2498

if.else1727:                                      ; preds = %if.else932
  %1180 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1728 = getelementptr inbounds %struct.regnode, %struct.regnode* %1180, i32 0, i32 1
  %1181 = load i8, i8* %type1728, align 1
  %conv1729 = zext i8 %1181 to i32
  %cmp1730 = icmp eq i32 %conv1729, 91
  br i1 %cmp1730, label %if.then1732, label %if.else1777

if.then1732:                                      ; preds = %if.else1727
  %1182 = load i32, i32* %flags.addr, align 4
  %and1733 = and i32 %1182, 6144
  %tobool1734 = icmp ne i32 %and1733, 0
  br i1 %tobool1734, label %if.then1735, label %if.end1760

if.then1735:                                      ; preds = %if.then1732
  %1183 = load i32, i32* %flags.addr, align 4
  %and1736 = and i32 %1183, 2048
  %tobool1737 = icmp ne i32 %and1736, 0
  br i1 %tobool1737, label %if.then1738, label %if.else1746

if.then1738:                                      ; preds = %if.then1735
  %1184 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1739 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1184, i32 0, i32 19
  %1185 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1739, align 8
  %1186 = load %struct.sv*, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 15), align 8
  call void @S_ssc_intersection(%struct.regnode_ssc* %1185, %struct.sv* %1186, i1 zeroext false)
  %1187 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1740 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1187, i32 0, i32 19
  %1188 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1740, align 8
  call void @S_ssc_clear_locale(%struct.regnode_ssc* %1188)
  %1189 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1741 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1189, i32 0, i32 19
  %1190 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1741, align 8
  %flags1742 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %1190, i32 0, i32 0
  %1191 = load i8, i8* %flags1742, align 8
  %conv1743 = zext i8 %1191 to i32
  %and1744 = and i32 %conv1743, -2
  %conv1745 = trunc i32 %and1744 to i8
  store i8 %conv1745, i8* %flags1742, align 8
  br label %if.end1758

if.else1746:                                      ; preds = %if.then1735
  %1192 = load i32, i32* %flags.addr, align 4
  %and1747 = and i32 %1192, 4096
  %tobool1748 = icmp ne i32 %and1747, 0
  br i1 %tobool1748, label %if.then1749, label %if.end1757

if.then1749:                                      ; preds = %if.else1746
  %1193 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1750 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1193, i32 0, i32 19
  %1194 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1750, align 8
  %1195 = load %struct.sv*, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 15), align 8
  call void @S_ssc_union(%struct.regnode_ssc* %1194, %struct.sv* %1195, i1 zeroext false)
  %1196 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1197 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1751 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1197, i32 0, i32 19
  %1198 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1751, align 8
  %1199 = load %struct.regnode_ssc*, %struct.regnode_ssc** %and_withp.addr, align 8
  %1200 = bitcast %struct.regnode_ssc* %1199 to %struct.regnode_charclass*
  call void @S_ssc_and(%struct.RExC_state_t* %1196, %struct.regnode_ssc* %1198, %struct.regnode_charclass* %1200)
  %1201 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1752 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1201, i32 0, i32 19
  %1202 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1752, align 8
  %flags1753 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %1202, i32 0, i32 0
  %1203 = load i8, i8* %flags1753, align 8
  %conv1754 = zext i8 %1203 to i32
  %and1755 = and i32 %conv1754, -2
  %conv1756 = trunc i32 %and1755 to i8
  store i8 %conv1756, i8* %flags1753, align 8
  br label %if.end1757

if.end1757:                                       ; preds = %if.then1749, %if.else1746
  br label %if.end1758

if.end1758:                                       ; preds = %if.end1757, %if.then1738
  %1204 = load i32, i32* %flags.addr, align 4
  %and1759 = and i32 %1204, -6145
  store i32 %and1759, i32* %flags.addr, align 4
  br label %if.end1760

if.end1760:                                       ; preds = %if.end1758, %if.then1732
  %1205 = load i64, i64* %min, align 8
  %inc1761 = add nsw i64 %1205, 1
  store i64 %inc1761, i64* %min, align 8
  %1206 = load i64, i64* %delta, align 8
  %cmp1762 = icmp ne i64 %1206, 9223372036854775807
  br i1 %cmp1762, label %if.then1764, label %if.end1766

if.then1764:                                      ; preds = %if.end1760
  %1207 = load i64, i64* %delta, align 8
  %inc1765 = add nsw i64 %1207, 1
  store i64 %inc1765, i64* %delta, align 8
  br label %if.end1766

if.end1766:                                       ; preds = %if.then1764, %if.end1760
  %1208 = load i32, i32* %flags.addr, align 4
  %and1767 = and i32 %1208, 1024
  %tobool1768 = icmp ne i32 %and1767, 0
  br i1 %tobool1768, label %if.then1769, label %if.end1776

if.then1769:                                      ; preds = %if.end1766
  %1209 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1210 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %1211 = load i64*, i64** %minlenp.addr, align 8
  %1212 = load i32, i32* %is_inf, align 4
  call void @S_scan_commit(%struct.RExC_state_t* %1209, %struct.scan_data_t* %1210, i64* %1211, i32 %1212)
  %1213 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min1770 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1213, i32 0, i32 0
  %1214 = load i64, i64* %pos_min1770, align 8
  %add1771 = add nsw i64 %1214, 1
  store i64 %add1771, i64* %pos_min1770, align 8
  %1215 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta1772 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1215, i32 0, i32 1
  %1216 = load i64, i64* %pos_delta1772, align 8
  %add1773 = add nsw i64 %1216, 1
  store i64 %add1773, i64* %pos_delta1772, align 8
  %1217 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_float1774 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1217, i32 0, i32 11
  %1218 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest1775 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1218, i32 0, i32 6
  store %struct.sv** %longest_float1774, %struct.sv*** %longest1775, align 8
  br label %if.end1776

if.end1776:                                       ; preds = %if.then1769, %if.end1766
  br label %if.end2497

if.else1777:                                      ; preds = %if.else1727
  %1219 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1778 = getelementptr inbounds %struct.regnode, %struct.regnode* %1219, i32 0, i32 1
  %1220 = load i8, i8* %type1778, align 1
  %conv1779 = zext i8 %1220 to i32
  %shr1780 = ashr i32 %conv1779, 3
  %idxprom1781 = sext i32 %shr1780 to i64
  %arrayidx1782 = getelementptr inbounds [12 x i8], [12 x i8]* bitcast (<{ i8, i8, i8, i8, [8 x i8] }>* @PL_simple_bitmask to [12 x i8]*), i64 0, i64 %idxprom1781
  %1221 = load i8, i8* %arrayidx1782, align 1
  %conv1783 = zext i8 %1221 to i32
  %1222 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1784 = getelementptr inbounds %struct.regnode, %struct.regnode* %1222, i32 0, i32 1
  %1223 = load i8, i8* %type1784, align 1
  %conv1785 = zext i8 %1223 to i32
  %and1786 = and i32 %conv1785, 7
  %shl1787 = shl i32 1, %and1786
  %and1788 = and i32 %conv1783, %shl1787
  %tobool1789 = icmp ne i32 %and1788, 0
  br i1 %tobool1789, label %if.then1790, label %if.else1947

if.then1790:                                      ; preds = %if.else1777
  %1224 = load i32, i32* %flags.addr, align 4
  %and1791 = and i32 %1224, 1024
  %tobool1792 = icmp ne i32 %and1791, 0
  br i1 %tobool1792, label %if.then1793, label %if.end1796

if.then1793:                                      ; preds = %if.then1790
  %1225 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1226 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %1227 = load i64*, i64** %minlenp.addr, align 8
  %1228 = load i32, i32* %is_inf, align 4
  call void @S_scan_commit(%struct.RExC_state_t* %1225, %struct.scan_data_t* %1226, i64* %1227, i32 %1228)
  %1229 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min1794 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1229, i32 0, i32 0
  %1230 = load i64, i64* %pos_min1794, align 8
  %inc1795 = add nsw i64 %1230, 1
  store i64 %inc1795, i64* %pos_min1794, align 8
  br label %if.end1796

if.end1796:                                       ; preds = %if.then1793, %if.then1790
  %1231 = load i64, i64* %min, align 8
  %inc1797 = add nsw i64 %1231, 1
  store i64 %inc1797, i64* %min, align 8
  %1232 = load i32, i32* %flags.addr, align 4
  %and1798 = and i32 %1232, 6144
  %tobool1799 = icmp ne i32 %and1798, 0
  br i1 %tobool1799, label %if.then1800, label %if.end1946

if.then1800:                                      ; preds = %if.end1796
  store i8 0, i8* %invert, align 1
  store %struct.sv* null, %struct.sv** %my_invlist, align 8
  %1233 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1801 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1233, i32 0, i32 19
  %1234 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1801, align 8
  %flags1802 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %1234, i32 0, i32 0
  %1235 = load i8, i8* %flags1802, align 8
  %conv1803 = zext i8 %1235 to i32
  %and1804 = and i32 %conv1803, -2
  %conv1805 = trunc i32 %and1804 to i8
  store i8 %conv1805, i8* %flags1802, align 8
  %1236 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1806 = getelementptr inbounds %struct.regnode, %struct.regnode* %1236, i32 0, i32 1
  %1237 = load i8, i8* %type1806, align 1
  %conv1807 = zext i8 %1237 to i32
  switch i32 %conv1807, label %sw.default1808 [
    i32 18, label %sw.bb1809
    i32 17, label %sw.bb1809
    i32 16, label %sw.bb1815
    i32 20, label %sw.bb1830
    i32 19, label %sw.bb1830
    i32 26, label %sw.bb1838
    i32 22, label %sw.bb1839
    i32 28, label %sw.bb1904
    i32 24, label %sw.bb1905
    i32 25, label %sw.bb1917
    i32 27, label %sw.bb1917
    i32 21, label %sw.bb1918
    i32 23, label %sw.bb1918
  ]

sw.default1808:                                   ; preds = %if.then1800
  br label %sw.bb1809

sw.bb1809:                                        ; preds = %if.then1800, %if.then1800, %sw.default1808
  %1238 = load i32, i32* %flags.addr, align 4
  %and1810 = and i32 %1238, 4096
  %tobool1811 = icmp ne i32 %and1810, 0
  br i1 %tobool1811, label %if.then1812, label %if.end1814

if.then1812:                                      ; preds = %sw.bb1809
  %1239 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1813 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1239, i32 0, i32 19
  %1240 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1813, align 8
  call void @S_ssc_add_range(%struct.regnode_ssc* %1240, i64 0, i64 -1)
  br label %if.end1814

if.end1814:                                       ; preds = %if.then1812, %sw.bb1809
  br label %sw.epilog1939

sw.bb1815:                                        ; preds = %if.then1800
  %call1816 = call %struct.sv* @Perl__new_invlist(i64 2)
  store %struct.sv* %call1816, %struct.sv** %REG_ANY_invlist, align 8
  %1241 = load %struct.sv*, %struct.sv** %REG_ANY_invlist, align 8
  %call1817 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %1241, i64 10)
  store %struct.sv* %call1817, %struct.sv** %REG_ANY_invlist, align 8
  %1242 = load i32, i32* %flags.addr, align 4
  %and1818 = and i32 %1242, 4096
  %tobool1819 = icmp ne i32 %and1818, 0
  br i1 %tobool1819, label %if.then1820, label %if.else1822

if.then1820:                                      ; preds = %sw.bb1815
  %1243 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1821 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1243, i32 0, i32 19
  %1244 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1821, align 8
  %1245 = load %struct.sv*, %struct.sv** %REG_ANY_invlist, align 8
  call void @S_ssc_union(%struct.regnode_ssc* %1244, %struct.sv* %1245, i1 zeroext true)
  br label %if.end1829

if.else1822:                                      ; preds = %sw.bb1815
  %1246 = load i32, i32* %flags.addr, align 4
  %and1823 = and i32 %1246, 2048
  %tobool1824 = icmp ne i32 %and1823, 0
  br i1 %tobool1824, label %if.then1825, label %if.end1828

if.then1825:                                      ; preds = %if.else1822
  %1247 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1826 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1247, i32 0, i32 19
  %1248 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1826, align 8
  %1249 = load %struct.sv*, %struct.sv** %REG_ANY_invlist, align 8
  call void @S_ssc_intersection(%struct.regnode_ssc* %1248, %struct.sv* %1249, i1 zeroext true)
  %1250 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1827 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1250, i32 0, i32 19
  %1251 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1827, align 8
  call void @S_ssc_clear_locale(%struct.regnode_ssc* %1251)
  br label %if.end1828

if.end1828:                                       ; preds = %if.then1825, %if.else1822
  br label %if.end1829

if.end1829:                                       ; preds = %if.end1828, %if.then1820
  %1252 = load %struct.sv*, %struct.sv** %REG_ANY_invlist, align 8
  %1253 = bitcast %struct.sv* %1252 to i8*
  %1254 = bitcast i8* %1253 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %1254)
  br label %sw.epilog1939

sw.bb1830:                                        ; preds = %if.then1800, %if.then1800
  %1255 = load i32, i32* %flags.addr, align 4
  %and1831 = and i32 %1255, 2048
  %tobool1832 = icmp ne i32 %and1831, 0
  br i1 %tobool1832, label %if.then1833, label %if.else1835

if.then1833:                                      ; preds = %sw.bb1830
  %1256 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1257 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1834 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1257, i32 0, i32 19
  %1258 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1834, align 8
  %1259 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %1260 = bitcast %struct.regnode* %1259 to %struct.regnode_charclass*
  call void @S_ssc_and(%struct.RExC_state_t* %1256, %struct.regnode_ssc* %1258, %struct.regnode_charclass* %1260)
  br label %if.end1837

if.else1835:                                      ; preds = %sw.bb1830
  %1261 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1262 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1836 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1262, i32 0, i32 19
  %1263 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1836, align 8
  %1264 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %1265 = bitcast %struct.regnode* %1264 to %struct.regnode_charclass*
  call void @S_ssc_or(%struct.RExC_state_t* %1261, %struct.regnode_ssc* %1263, %struct.regnode_charclass* %1265)
  br label %if.end1837

if.end1837:                                       ; preds = %if.else1835, %if.then1833
  br label %sw.epilog1939

sw.bb1838:                                        ; preds = %if.then1800
  store i8 1, i8* %invert, align 1
  br label %sw.bb1839

sw.bb1839:                                        ; preds = %if.then1800, %sw.bb1838
  %1266 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags1840 = getelementptr inbounds %struct.regnode, %struct.regnode* %1266, i32 0, i32 0
  %1267 = load i8, i8* %flags1840, align 2
  %conv1841 = zext i8 %1267 to i32
  %mul1842 = mul nsw i32 %conv1841, 2
  %1268 = load i8, i8* %invert, align 1
  %tobool1843 = trunc i8 %1268 to i1
  %conv1844 = zext i1 %tobool1843 to i32
  %add1845 = add nsw i32 %mul1842, %conv1844
  %conv1846 = trunc i32 %add1845 to i8
  store i8 %conv1846, i8* %namedclass, align 1
  %1269 = load i32, i32* %flags.addr, align 4
  %and1847 = and i32 %1269, 2048
  %tobool1848 = icmp ne i32 %and1847, 0
  br i1 %tobool1848, label %if.then1849, label %if.else1873

if.then1849:                                      ; preds = %sw.bb1839
  %1270 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1850 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1270, i32 0, i32 19
  %1271 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1850, align 8
  %1272 = bitcast %struct.regnode_ssc* %1271 to %struct.regnode_charclass_class*
  %classflags1851 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1272, i32 0, i32 5
  %1273 = load i32, i32* %classflags1851, align 4
  %1274 = load i8, i8* %namedclass, align 1
  %conv1852 = zext i8 %1274 to i32
  %shl1853 = shl i32 1, %conv1852
  %and1854 = and i32 %1273, %shl1853
  %tobool1855 = icmp ne i32 %and1854, 0
  %1275 = zext i1 %tobool1855 to i64
  %cond1856 = select i1 %tobool1855, i32 1, i32 0
  %tobool1857 = icmp ne i32 %cond1856, 0
  %frombool = zext i1 %tobool1857 to i8
  store i8 %frombool, i8* %was_there, align 1
  br label %do.body1858

do.body1858:                                      ; preds = %if.then1849
  %1276 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1859 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1276, i32 0, i32 19
  %1277 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1859, align 8
  %1278 = bitcast %struct.regnode_ssc* %1277 to %struct.regnode_charclass_class*
  %classflags1860 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1278, i32 0, i32 5
  store i32 0, i32* %classflags1860, align 4
  br label %do.end1861

do.end1861:                                       ; preds = %do.body1858
  %1279 = load i8, i8* %was_there, align 1
  %tobool1862 = trunc i8 %1279 to i1
  br i1 %tobool1862, label %if.then1863, label %if.end1869

if.then1863:                                      ; preds = %do.end1861
  %1280 = load i8, i8* %namedclass, align 1
  %conv1864 = zext i8 %1280 to i32
  %shl1865 = shl i32 1, %conv1864
  %1281 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1866 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1281, i32 0, i32 19
  %1282 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1866, align 8
  %1283 = bitcast %struct.regnode_ssc* %1282 to %struct.regnode_charclass_class*
  %classflags1867 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1283, i32 0, i32 5
  %1284 = load i32, i32* %classflags1867, align 4
  %or1868 = or i32 %1284, %shl1865
  store i32 %or1868, i32* %classflags1867, align 4
  br label %if.end1869

if.end1869:                                       ; preds = %if.then1863, %do.end1861
  %call1870 = call %struct.sv* @Perl__new_invlist(i64 0)
  %call1871 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call1870)
  %1285 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1872 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1285, i32 0, i32 19
  %1286 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1872, align 8
  %invlist = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %1286, i32 0, i32 6
  store %struct.sv* %call1871, %struct.sv** %invlist, align 8
  br label %if.end1903

if.else1873:                                      ; preds = %sw.bb1839
  %1287 = load i8, i8* %namedclass, align 1
  %conv1874 = zext i8 %1287 to i32
  %1288 = load i8, i8* %invert, align 1
  %tobool1875 = trunc i8 %1288 to i1
  %1289 = zext i1 %tobool1875 to i64
  %cond1877 = select i1 %tobool1875, i32 -1, i32 1
  %add1878 = add nsw i32 %conv1874, %cond1877
  store i32 %add1878, i32* %complement, align 4
  %1290 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1879 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1290, i32 0, i32 19
  %1291 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1879, align 8
  %1292 = bitcast %struct.regnode_ssc* %1291 to %struct.regnode_charclass_class*
  %classflags1880 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1292, i32 0, i32 5
  %1293 = load i32, i32* %classflags1880, align 4
  %1294 = load i32, i32* %complement, align 4
  %shl1881 = shl i32 1, %1294
  %and1882 = and i32 %1293, %shl1881
  %tobool1883 = icmp ne i32 %and1882, 0
  br i1 %tobool1883, label %if.then1884, label %if.else1896

if.then1884:                                      ; preds = %if.else1873
  %1295 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1885 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1295, i32 0, i32 19
  %1296 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1885, align 8
  call void @S_ssc_add_range(%struct.regnode_ssc* %1296, i64 0, i64 -1)
  %1297 = load i8, i8* %namedclass, align 1
  %conv1886 = zext i8 %1297 to i32
  %shl1887 = shl i32 1, %conv1886
  %neg = xor i32 %shl1887, -1
  %1298 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1888 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1298, i32 0, i32 19
  %1299 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1888, align 8
  %1300 = bitcast %struct.regnode_ssc* %1299 to %struct.regnode_charclass_class*
  %classflags1889 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1300, i32 0, i32 5
  %1301 = load i32, i32* %classflags1889, align 4
  %and1890 = and i32 %1301, %neg
  store i32 %and1890, i32* %classflags1889, align 4
  %1302 = load i32, i32* %complement, align 4
  %shl1891 = shl i32 1, %1302
  %neg1892 = xor i32 %shl1891, -1
  %1303 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1893 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1303, i32 0, i32 19
  %1304 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1893, align 8
  %1305 = bitcast %struct.regnode_ssc* %1304 to %struct.regnode_charclass_class*
  %classflags1894 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1305, i32 0, i32 5
  %1306 = load i32, i32* %classflags1894, align 4
  %and1895 = and i32 %1306, %neg1892
  store i32 %and1895, i32* %classflags1894, align 4
  br label %if.end1902

if.else1896:                                      ; preds = %if.else1873
  %1307 = load i8, i8* %namedclass, align 1
  %conv1897 = zext i8 %1307 to i32
  %shl1898 = shl i32 1, %conv1897
  %1308 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1899 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1308, i32 0, i32 19
  %1309 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1899, align 8
  %1310 = bitcast %struct.regnode_ssc* %1309 to %struct.regnode_charclass_class*
  %classflags1900 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1310, i32 0, i32 5
  %1311 = load i32, i32* %classflags1900, align 4
  %or1901 = or i32 %1311, %shl1898
  store i32 %or1901, i32* %classflags1900, align 4
  br label %if.end1902

if.end1902:                                       ; preds = %if.else1896, %if.then1884
  br label %if.end1903

if.end1903:                                       ; preds = %if.end1902, %if.end1869
  br label %sw.epilog1939

sw.bb1904:                                        ; preds = %if.then1800
  store i8 1, i8* %invert, align 1
  br label %sw.bb1905

sw.bb1905:                                        ; preds = %if.then1800, %sw.bb1904
  %1312 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags1906 = getelementptr inbounds %struct.regnode, %struct.regnode* %1312, i32 0, i32 0
  %1313 = load i8, i8* %flags1906, align 2
  %conv1907 = zext i8 %1313 to i32
  %cmp1908 = icmp eq i32 %conv1907, 14
  br i1 %cmp1908, label %if.then1910, label %if.else1912

if.then1910:                                      ; preds = %sw.bb1905
  %1314 = load %struct.sv*, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 14), align 16
  %call1911 = call %struct.sv* @S_invlist_clone(%struct.sv* %1314)
  store %struct.sv* %call1911, %struct.sv** %my_invlist, align 8
  br label %if.end1916

if.else1912:                                      ; preds = %sw.bb1905
  %1315 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags1913 = getelementptr inbounds %struct.regnode, %struct.regnode* %1315, i32 0, i32 0
  %1316 = load i8, i8* %flags1913, align 2
  %idxprom1914 = zext i8 %1316 to i64
  %arrayidx1915 = getelementptr inbounds [16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 %idxprom1914
  %1317 = load %struct.sv*, %struct.sv** %arrayidx1915, align 8
  %1318 = load %struct.sv*, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 14), align 16
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %1317, %struct.sv* %1318, i1 zeroext false, %struct.sv** %my_invlist)
  br label %if.end1916

if.end1916:                                       ; preds = %if.else1912, %if.then1910
  br label %join_posix

sw.bb1917:                                        ; preds = %if.then1800, %if.then1800
  store i8 1, i8* %invert, align 1
  br label %sw.bb1918

sw.bb1918:                                        ; preds = %if.then1800, %if.then1800, %sw.bb1917
  %1319 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags1919 = getelementptr inbounds %struct.regnode, %struct.regnode* %1319, i32 0, i32 0
  %1320 = load i8, i8* %flags1919, align 2
  %idxprom1920 = zext i8 %1320 to i64
  %arrayidx1921 = getelementptr inbounds [16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 %idxprom1920
  %1321 = load %struct.sv*, %struct.sv** %arrayidx1921, align 8
  %call1922 = call %struct.sv* @S_invlist_clone(%struct.sv* %1321)
  store %struct.sv* %call1922, %struct.sv** %my_invlist, align 8
  %1322 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1923 = getelementptr inbounds %struct.regnode, %struct.regnode* %1322, i32 0, i32 1
  %1323 = load i8, i8* %type1923, align 1
  %conv1924 = zext i8 %1323 to i32
  %cmp1925 = icmp eq i32 %conv1924, 25
  br i1 %cmp1925, label %if.then1927, label %if.end1928

if.then1927:                                      ; preds = %sw.bb1918
  %1324 = load %struct.sv*, %struct.sv** %my_invlist, align 8
  %1325 = load %struct.sv*, %struct.sv** @PL_UpperLatin1, align 8
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %1324, %struct.sv* %1325, i1 zeroext true, %struct.sv** %my_invlist)
  br label %if.end1928

if.end1928:                                       ; preds = %if.then1927, %sw.bb1918
  br label %join_posix

join_posix:                                       ; preds = %if.end1928, %if.end1916
  %1326 = load i32, i32* %flags.addr, align 4
  %and1929 = and i32 %1326, 2048
  %tobool1930 = icmp ne i32 %and1929, 0
  br i1 %tobool1930, label %if.then1931, label %if.else1935

if.then1931:                                      ; preds = %join_posix
  %1327 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1932 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1327, i32 0, i32 19
  %1328 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1932, align 8
  %1329 = load %struct.sv*, %struct.sv** %my_invlist, align 8
  %1330 = load i8, i8* %invert, align 1
  %tobool1933 = trunc i8 %1330 to i1
  call void @S_ssc_intersection(%struct.regnode_ssc* %1328, %struct.sv* %1329, i1 zeroext %tobool1933)
  %1331 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1934 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1331, i32 0, i32 19
  %1332 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1934, align 8
  call void @S_ssc_clear_locale(%struct.regnode_ssc* %1332)
  br label %if.end1938

if.else1935:                                      ; preds = %join_posix
  %1333 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1936 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1333, i32 0, i32 19
  %1334 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1936, align 8
  %1335 = load %struct.sv*, %struct.sv** %my_invlist, align 8
  %1336 = load i8, i8* %invert, align 1
  %tobool1937 = trunc i8 %1336 to i1
  call void @S_ssc_union(%struct.regnode_ssc* %1334, %struct.sv* %1335, i1 zeroext %tobool1937)
  br label %if.end1938

if.end1938:                                       ; preds = %if.else1935, %if.then1931
  %1337 = load %struct.sv*, %struct.sv** %my_invlist, align 8
  %1338 = bitcast %struct.sv* %1337 to i8*
  %1339 = bitcast i8* %1338 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %1339)
  br label %sw.epilog1939

sw.epilog1939:                                    ; preds = %if.end1938, %if.end1903, %if.end1837, %if.end1829, %if.end1814
  %1340 = load i32, i32* %flags.addr, align 4
  %and1940 = and i32 %1340, 4096
  %tobool1941 = icmp ne i32 %and1940, 0
  br i1 %tobool1941, label %if.then1942, label %if.end1944

if.then1942:                                      ; preds = %sw.epilog1939
  %1341 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1342 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class1943 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1342, i32 0, i32 19
  %1343 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class1943, align 8
  %1344 = load %struct.regnode_ssc*, %struct.regnode_ssc** %and_withp.addr, align 8
  %1345 = bitcast %struct.regnode_ssc* %1344 to %struct.regnode_charclass*
  call void @S_ssc_and(%struct.RExC_state_t* %1341, %struct.regnode_ssc* %1343, %struct.regnode_charclass* %1345)
  br label %if.end1944

if.end1944:                                       ; preds = %if.then1942, %sw.epilog1939
  %1346 = load i32, i32* %flags.addr, align 4
  %and1945 = and i32 %1346, -6145
  store i32 %and1945, i32* %flags.addr, align 4
  br label %if.end1946

if.end1946:                                       ; preds = %if.end1944, %if.end1796
  br label %if.end2496

if.else1947:                                      ; preds = %if.else1777
  %1347 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1948 = getelementptr inbounds %struct.regnode, %struct.regnode* %1347, i32 0, i32 1
  %1348 = load i8, i8* %type1948, align 1
  %idxprom1949 = zext i8 %1348 to i64
  %arrayidx1950 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom1949
  %1349 = load i8, i8* %arrayidx1950, align 1
  %conv1951 = zext i8 %1349 to i32
  %cmp1952 = icmp eq i32 %conv1951, 4
  br i1 %cmp1952, label %land.lhs.true1954, label %if.else1965

land.lhs.true1954:                                ; preds = %if.else1947
  %1350 = load i32, i32* %flags.addr, align 4
  %and1955 = and i32 %1350, 1024
  %tobool1956 = icmp ne i32 %and1955, 0
  br i1 %tobool1956, label %if.then1957, label %if.else1965

if.then1957:                                      ; preds = %land.lhs.true1954
  %1351 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1958 = getelementptr inbounds %struct.regnode, %struct.regnode* %1351, i32 0, i32 1
  %1352 = load i8, i8* %type1958, align 1
  %conv1959 = zext i8 %1352 to i32
  %cmp1960 = icmp eq i32 %conv1959, 5
  %1353 = zext i1 %cmp1960 to i64
  %cond1962 = select i1 %cmp1960, i32 2, i32 1
  %1354 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags1963 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1354, i32 0, i32 16
  %1355 = load i32, i32* %flags1963, align 8
  %or1964 = or i32 %1355, %cond1962
  store i32 %or1964, i32* %flags1963, align 8
  %1356 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1357 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %1358 = load i64*, i64** %minlenp.addr, align 8
  %1359 = load i32, i32* %is_inf, align 4
  call void @S_scan_commit(%struct.RExC_state_t* %1356, %struct.scan_data_t* %1357, i64* %1358, i32 %1359)
  br label %if.end2495

if.else1965:                                      ; preds = %land.lhs.true1954, %if.else1947
  %1360 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1966 = getelementptr inbounds %struct.regnode, %struct.regnode* %1360, i32 0, i32 1
  %1361 = load i8, i8* %type1966, align 1
  %idxprom1967 = zext i8 %1361 to i64
  %arrayidx1968 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom1967
  %1362 = load i8, i8* %arrayidx1968, align 1
  %conv1969 = zext i8 %1362 to i32
  %cmp1970 = icmp eq i32 %conv1969, 62
  br i1 %cmp1970, label %land.lhs.true1972, label %if.else2126

land.lhs.true1972:                                ; preds = %if.else1965
  %1363 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags1973 = getelementptr inbounds %struct.regnode, %struct.regnode* %1363, i32 0, i32 0
  %1364 = load i8, i8* %flags1973, align 2
  %conv1974 = zext i8 %1364 to i32
  %tobool1975 = icmp ne i32 %conv1974, 0
  br i1 %tobool1975, label %land.lhs.true1981, label %lor.lhs.false1976

lor.lhs.false1976:                                ; preds = %land.lhs.true1972
  %1365 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool1977 = icmp ne %struct.scan_data_t* %1365, null
  br i1 %tobool1977, label %land.lhs.true1981, label %lor.lhs.false1978

lor.lhs.false1978:                                ; preds = %lor.lhs.false1976
  %1366 = load i32, i32* %flags.addr, align 4
  %and1979 = and i32 %1366, 6144
  %tobool1980 = icmp ne i32 %and1979, 0
  br i1 %tobool1980, label %land.lhs.true1981, label %if.else2126

land.lhs.true1981:                                ; preds = %lor.lhs.false1978, %lor.lhs.false1976, %land.lhs.true1972
  %1367 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1982 = getelementptr inbounds %struct.regnode, %struct.regnode* %1367, i32 0, i32 1
  %1368 = load i8, i8* %type1982, align 1
  %conv1983 = zext i8 %1368 to i32
  %cmp1984 = icmp eq i32 %conv1983, 63
  br i1 %cmp1984, label %if.then1991, label %lor.lhs.false1986

lor.lhs.false1986:                                ; preds = %land.lhs.true1981
  %1369 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type1987 = getelementptr inbounds %struct.regnode, %struct.regnode* %1369, i32 0, i32 1
  %1370 = load i8, i8* %type1987, align 1
  %conv1988 = zext i8 %1370 to i32
  %cmp1989 = icmp eq i32 %conv1988, 64
  br i1 %cmp1989, label %if.then1991, label %if.else2126

if.then1991:                                      ; preds = %lor.lhs.false1986, %land.lhs.true1981
  store i64 0, i64* %fake1994, align 8
  store i32 0, i32* %f1995, align 4
  %1371 = bitcast %struct.scan_data_t* %data_fake to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1371, i8* align 8 bitcast (%struct.scan_data_t* @zero_scan_data to i8*), i64 152, i1 false)
  %1372 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool1996 = icmp ne %struct.scan_data_t* %1372, null
  br i1 %tobool1996, label %if.then1997, label %if.else2002

if.then1997:                                      ; preds = %if.then1991
  %1373 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %whilem_c1998 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1373, i32 0, i32 17
  %1374 = load i32, i32* %whilem_c1998, align 4
  %whilem_c1999 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 17
  store i32 %1374, i32* %whilem_c1999, align 4
  %1375 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_closep2000 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1375, i32 0, i32 18
  %1376 = load i64*, i64** %last_closep2000, align 8
  %last_closep2001 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 18
  store i64* %1376, i64** %last_closep2001, align 8
  br label %if.end2004

if.else2002:                                      ; preds = %if.then1991
  %last_closep2003 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 18
  store i64* %fake1994, i64** %last_closep2003, align 8
  br label %if.end2004

if.end2004:                                       ; preds = %if.else2002, %if.then1997
  %1377 = load i64, i64* %delta, align 8
  %pos_delta2005 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 1
  store i64 %1377, i64* %pos_delta2005, align 8
  %1378 = load i32, i32* %flags.addr, align 4
  %and2006 = and i32 %1378, 6144
  %tobool2007 = icmp ne i32 %and2006, 0
  br i1 %tobool2007, label %land.lhs.true2008, label %if.end2019

land.lhs.true2008:                                ; preds = %if.end2004
  %1379 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags2009 = getelementptr inbounds %struct.regnode, %struct.regnode* %1379, i32 0, i32 0
  %1380 = load i8, i8* %flags2009, align 2
  %tobool2010 = icmp ne i8 %1380, 0
  br i1 %tobool2010, label %if.end2019, label %land.lhs.true2011

land.lhs.true2011:                                ; preds = %land.lhs.true2008
  %1381 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2012 = getelementptr inbounds %struct.regnode, %struct.regnode* %1381, i32 0, i32 1
  %1382 = load i8, i8* %type2012, align 1
  %conv2013 = zext i8 %1382 to i32
  %cmp2014 = icmp eq i32 %conv2013, 63
  br i1 %cmp2014, label %if.then2016, label %if.end2019

if.then2016:                                      ; preds = %land.lhs.true2011
  %1383 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  call void @S_ssc_init(%struct.RExC_state_t* %1383, %struct.regnode_ssc* %intrnl)
  %start_class2017 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 19
  store %struct.regnode_ssc* %intrnl, %struct.regnode_ssc** %start_class2017, align 8
  %1384 = load i32, i32* %f1995, align 4
  %or2018 = or i32 %1384, 2048
  store i32 %or2018, i32* %f1995, align 4
  br label %if.end2019

if.end2019:                                       ; preds = %if.then2016, %land.lhs.true2011, %land.lhs.true2008, %if.end2004
  %1385 = load i32, i32* %flags.addr, align 4
  %and2020 = and i32 %1385, 8192
  %tobool2021 = icmp ne i32 %and2020, 0
  br i1 %tobool2021, label %if.then2022, label %if.end2024

if.then2022:                                      ; preds = %if.end2019
  %1386 = load i32, i32* %f1995, align 4
  %or2023 = or i32 %1386, 8192
  store i32 %or2023, i32* %f1995, align 4
  br label %if.end2024

if.end2024:                                       ; preds = %if.then2022, %if.end2019
  %1387 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call2025 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1387)
  store %struct.regnode* %call2025, %struct.regnode** %next, align 8
  %1388 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %add.ptr2026 = getelementptr inbounds %struct.regnode, %struct.regnode* %1388, i64 1
  %add.ptr2027 = getelementptr inbounds %struct.regnode, %struct.regnode* %add.ptr2026, i64 1
  store %struct.regnode* %add.ptr2027, %struct.regnode** %nscan, align 8
  %1389 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1390 = load i64*, i64** %minlenp.addr, align 8
  %1391 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  %1392 = load i32, i32* %stopparen.addr, align 4
  %1393 = load i32, i32* %recursed_depth.addr, align 4
  %1394 = load i32, i32* %f1995, align 4
  %1395 = load i32, i32* %depth.addr, align 4
  %add2028 = add i32 %1395, 1
  %call2029 = call i64 @S_study_chunk(%struct.RExC_state_t* %1389, %struct.regnode** %nscan, i64* %1390, i64* %deltanext1992, %struct.regnode* %1391, %struct.scan_data_t* %data_fake, i32 %1392, i32 %1393, %struct.regnode_ssc* null, i32 %1394, i32 %add2028)
  store i64 %call2029, i64* %minnext1993, align 8
  %1396 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags2030 = getelementptr inbounds %struct.regnode, %struct.regnode* %1396, i32 0, i32 0
  %1397 = load i8, i8* %flags2030, align 2
  %tobool2031 = icmp ne i8 %1397, 0
  br i1 %tobool2031, label %if.then2032, label %if.end2091

if.then2032:                                      ; preds = %if.end2024
  %1398 = load i64, i64* %deltanext1992, align 8
  %tobool2033 = icmp ne i64 %1398, 0
  br i1 %tobool2033, label %if.then2034, label %if.else2057

if.then2034:                                      ; preds = %if.then2032
  br label %do.body2035

do.body2035:                                      ; preds = %if.then2034
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses, align 8
  %1399 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2036 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1399, i32 0, i32 7
  %1400 = load i8*, i8** %end2036, align 8
  %1401 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2037 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1401, i32 0, i32 2
  %1402 = load i8*, i8** %precomp2037, align 8
  %sub.ptr.lhs.cast2038 = ptrtoint i8* %1400 to i64
  %sub.ptr.rhs.cast2039 = ptrtoint i8* %1402 to i64
  %sub.ptr.sub2040 = sub i64 %sub.ptr.lhs.cast2038, %sub.ptr.rhs.cast2039
  store i64 %sub.ptr.sub2040, i64* %len, align 8
  %1403 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1403, i32 0, i32 12
  %1404 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %1405 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1405, i32 0, i32 13
  %1406 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp2041 = icmp eq %struct.regnode* %1404, %1406
  br i1 %cmp2041, label %if.end2045, label %if.then2043

if.then2043:                                      ; preds = %do.body2035
  %1407 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv2044 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1407, i32 0, i32 3
  %1408 = load %struct.p5rx*, %struct.p5rx** %rx_sv2044, align 8
  %1409 = bitcast %struct.p5rx* %1408 to i8*
  %1410 = bitcast i8* %1409 to %struct.sv*
  %1411 = bitcast %struct.sv* %1410 to i8*
  call void @Perl_save_pushptr(i8* %1411, i32 11)
  br label %if.end2045

if.end2045:                                       ; preds = %if.then2043, %do.body2035
  %1412 = load i64, i64* %len, align 8
  %cmp2046 = icmp sgt i64 %1412, 127
  br i1 %cmp2046, label %if.then2048, label %if.end2049

if.then2048:                                      ; preds = %if.end2045
  store i64 117, i64* %len, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses, align 8
  br label %if.end2049

if.end2049:                                       ; preds = %if.then2048, %if.end2045
  %1413 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82050 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1413, i32 0, i32 25
  %1414 = load i32, i32* %utf82050, align 8
  %tobool2051 = icmp ne i32 %1414, 0
  %1415 = zext i1 %tobool2051 to i64
  %cond2052 = select i1 %tobool2051, i32 1, i32 0
  %tobool2053 = icmp ne i32 %cond2052, 0
  %1416 = zext i1 %tobool2053 to i64
  %cond2054 = select i1 %tobool2053, i32 1, i32 0
  %1417 = load i64, i64* %len, align 8
  %1418 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2055 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1418, i32 0, i32 2
  %1419 = load i8*, i8** %precomp2055, align 8
  %1420 = load i8*, i8** %ellipses, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.218, i64 0, i64 0), i32 %cond2054, i64 %1417, i8* %1419, i8* %1420)
  br label %do.end2056

do.end2056:                                       ; preds = %if.end2049
  br label %if.end2088

if.else2057:                                      ; preds = %if.then2032
  %1421 = load i64, i64* %minnext1993, align 8
  %cmp2058 = icmp sgt i64 %1421, 255
  br i1 %cmp2058, label %if.then2060, label %if.end2087

if.then2060:                                      ; preds = %if.else2057
  br label %do.body2061

do.body2061:                                      ; preds = %if.then2060
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses2062, align 8
  %1422 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2064 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1422, i32 0, i32 7
  %1423 = load i8*, i8** %end2064, align 8
  %1424 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2065 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1424, i32 0, i32 2
  %1425 = load i8*, i8** %precomp2065, align 8
  %sub.ptr.lhs.cast2066 = ptrtoint i8* %1423 to i64
  %sub.ptr.rhs.cast2067 = ptrtoint i8* %1425 to i64
  %sub.ptr.sub2068 = sub i64 %sub.ptr.lhs.cast2066, %sub.ptr.rhs.cast2067
  store i64 %sub.ptr.sub2068, i64* %len2063, align 8
  %1426 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2069 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1426, i32 0, i32 12
  %1427 = load %struct.regnode*, %struct.regnode** %emit2069, align 8
  %1428 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2070 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1428, i32 0, i32 13
  %1429 = bitcast %struct.regnode_ssc* %emit_dummy2070 to %struct.regnode*
  %cmp2071 = icmp eq %struct.regnode* %1427, %1429
  br i1 %cmp2071, label %if.end2075, label %if.then2073

if.then2073:                                      ; preds = %do.body2061
  %1430 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv2074 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1430, i32 0, i32 3
  %1431 = load %struct.p5rx*, %struct.p5rx** %rx_sv2074, align 8
  %1432 = bitcast %struct.p5rx* %1431 to i8*
  %1433 = bitcast i8* %1432 to %struct.sv*
  %1434 = bitcast %struct.sv* %1433 to i8*
  call void @Perl_save_pushptr(i8* %1434, i32 11)
  br label %if.end2075

if.end2075:                                       ; preds = %if.then2073, %do.body2061
  %1435 = load i64, i64* %len2063, align 8
  %cmp2076 = icmp sgt i64 %1435, 127
  br i1 %cmp2076, label %if.then2078, label %if.end2079

if.then2078:                                      ; preds = %if.end2075
  store i64 117, i64* %len2063, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses2062, align 8
  br label %if.end2079

if.end2079:                                       ; preds = %if.then2078, %if.end2075
  %1436 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82080 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1436, i32 0, i32 25
  %1437 = load i32, i32* %utf82080, align 8
  %tobool2081 = icmp ne i32 %1437, 0
  %1438 = zext i1 %tobool2081 to i64
  %cond2082 = select i1 %tobool2081, i32 1, i32 0
  %tobool2083 = icmp ne i32 %cond2082, 0
  %1439 = zext i1 %tobool2083 to i64
  %cond2084 = select i1 %tobool2083, i32 1, i32 0
  %1440 = load i64, i64* %len2063, align 8
  %1441 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2085 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1441, i32 0, i32 2
  %1442 = load i8*, i8** %precomp2085, align 8
  %1443 = load i8*, i8** %ellipses2062, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.219, i64 0, i64 0), i64 255, i32 %cond2084, i64 %1440, i8* %1442, i8* %1443)
  br label %do.end2086

do.end2086:                                       ; preds = %if.end2079
  br label %if.end2087

if.end2087:                                       ; preds = %do.end2086, %if.else2057
  br label %if.end2088

if.end2088:                                       ; preds = %if.end2087, %do.end2056
  %1444 = load i64, i64* %minnext1993, align 8
  %conv2089 = trunc i64 %1444 to i8
  %1445 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags2090 = getelementptr inbounds %struct.regnode, %struct.regnode* %1445, i32 0, i32 0
  store i8 %conv2089, i8* %flags2090, align 2
  br label %if.end2091

if.end2091:                                       ; preds = %if.end2088, %if.end2024
  %1446 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2092 = icmp ne %struct.scan_data_t* %1446, null
  br i1 %tobool2092, label %if.then2093, label %if.end2109

if.then2093:                                      ; preds = %if.end2091
  %flags2094 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 16
  %1447 = load i32, i32* %flags2094, align 8
  %and2095 = and i32 %1447, 384
  %tobool2096 = icmp ne i32 %and2095, 0
  br i1 %tobool2096, label %if.then2097, label %if.end2099

if.then2097:                                      ; preds = %if.then2093
  %1448 = load i32, i32* %pars, align 4
  %inc2098 = add nsw i32 %1448, 1
  store i32 %inc2098, i32* %pars, align 4
  br label %if.end2099

if.end2099:                                       ; preds = %if.then2097, %if.then2093
  %flags2100 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 16
  %1449 = load i32, i32* %flags2100, align 8
  %and2101 = and i32 %1449, 512
  %tobool2102 = icmp ne i32 %and2101, 0
  br i1 %tobool2102, label %if.then2103, label %if.end2106

if.then2103:                                      ; preds = %if.end2099
  %1450 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2104 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1450, i32 0, i32 16
  %1451 = load i32, i32* %flags2104, align 8
  %or2105 = or i32 %1451, 512
  store i32 %or2105, i32* %flags2104, align 8
  br label %if.end2106

if.end2106:                                       ; preds = %if.then2103, %if.end2099
  %whilem_c2107 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 17
  %1452 = load i32, i32* %whilem_c2107, align 4
  %1453 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %whilem_c2108 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1453, i32 0, i32 17
  store i32 %1452, i32* %whilem_c2108, align 4
  br label %if.end2109

if.end2109:                                       ; preds = %if.end2106, %if.end2091
  %1454 = load i32, i32* %f1995, align 4
  %and2110 = and i32 %1454, 2048
  %tobool2111 = icmp ne i32 %and2110, 0
  br i1 %tobool2111, label %if.then2112, label %if.end2125

if.then2112:                                      ; preds = %if.end2109
  %1455 = load i32, i32* %flags.addr, align 4
  %and2113 = and i32 %1455, 4096
  %tobool2114 = icmp ne i32 %and2113, 0
  br i1 %tobool2114, label %if.then2115, label %if.else2117

if.then2115:                                      ; preds = %if.then2112
  %1456 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1457 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2116 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1457, i32 0, i32 19
  %1458 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class2116, align 8
  call void @S_ssc_init(%struct.RExC_state_t* %1456, %struct.regnode_ssc* %1458)
  br label %if.end2124

if.else2117:                                      ; preds = %if.then2112
  %1459 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1460 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2118 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1460, i32 0, i32 19
  %1461 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class2118, align 8
  %1462 = bitcast %struct.regnode_ssc* %intrnl to %struct.regnode_charclass*
  call void @S_ssc_and(%struct.RExC_state_t* %1459, %struct.regnode_ssc* %1461, %struct.regnode_charclass* %1462)
  %1463 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2119 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1463, i32 0, i32 19
  %1464 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class2119, align 8
  %flags2120 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %1464, i32 0, i32 0
  %1465 = load i8, i8* %flags2120, align 8
  %conv2121 = zext i8 %1465 to i32
  %or2122 = or i32 %conv2121, 1
  %conv2123 = trunc i32 %or2122 to i8
  store i8 %conv2123, i8* %flags2120, align 8
  br label %if.end2124

if.end2124:                                       ; preds = %if.else2117, %if.then2115
  br label %if.end2125

if.end2125:                                       ; preds = %if.end2124, %if.end2109
  br label %if.end2494

if.else2126:                                      ; preds = %lor.lhs.false1986, %lor.lhs.false1978, %if.else1965
  %1466 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2127 = getelementptr inbounds %struct.regnode, %struct.regnode* %1466, i32 0, i32 1
  %1467 = load i8, i8* %type2127, align 1
  %conv2128 = zext i8 %1467 to i32
  %cmp2129 = icmp eq i32 %conv2128, 49
  br i1 %cmp2129, label %if.then2131, label %if.else2138

if.then2131:                                      ; preds = %if.else2126
  %1468 = load i32, i32* %stopparen.addr, align 4
  %1469 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %1470 = bitcast %struct.regnode* %1469 to %struct.regnode_1*
  %arg12132 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %1470, i32 0, i32 3
  %1471 = load i32, i32* %arg12132, align 4
  %cmp2133 = icmp ne i32 %1468, %1471
  br i1 %cmp2133, label %if.then2135, label %if.end2137

if.then2135:                                      ; preds = %if.then2131
  %1472 = load i32, i32* %pars, align 4
  %inc2136 = add nsw i32 %1472, 1
  store i32 %inc2136, i32* %pars, align 4
  br label %if.end2137

if.end2137:                                       ; preds = %if.then2135, %if.then2131
  br label %if.end2493

if.else2138:                                      ; preds = %if.else2126
  %1473 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2139 = getelementptr inbounds %struct.regnode, %struct.regnode* %1473, i32 0, i32 1
  %1474 = load i8, i8* %type2139, align 1
  %conv2140 = zext i8 %1474 to i32
  %cmp2141 = icmp eq i32 %conv2140, 50
  br i1 %cmp2141, label %if.then2143, label %if.else2172

if.then2143:                                      ; preds = %if.else2138
  %1475 = load i32, i32* %stopparen.addr, align 4
  %1476 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %1477 = bitcast %struct.regnode* %1476 to %struct.regnode_1*
  %arg12144 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %1477, i32 0, i32 3
  %1478 = load i32, i32* %arg12144, align 4
  %cmp2145 = icmp eq i32 %1475, %1478
  br i1 %cmp2145, label %if.then2147, label %if.end2148

if.then2147:                                      ; preds = %if.then2143
  br label %while.end2505

if.end2148:                                       ; preds = %if.then2143
  %1479 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %1480 = bitcast %struct.regnode* %1479 to %struct.regnode_1*
  %arg12149 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %1480, i32 0, i32 3
  %1481 = load i32, i32* %arg12149, align 4
  %1482 = load i32, i32* %is_par, align 4
  %cmp2150 = icmp eq i32 %1481, %1482
  br i1 %cmp2150, label %if.then2152, label %if.end2165

if.then2152:                                      ; preds = %if.end2148
  %1483 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call2153 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1483)
  store %struct.regnode* %call2153, %struct.regnode** %next, align 8
  %1484 = load %struct.regnode*, %struct.regnode** %next, align 8
  %tobool2154 = icmp ne %struct.regnode* %1484, null
  br i1 %tobool2154, label %land.lhs.true2155, label %if.end2164

land.lhs.true2155:                                ; preds = %if.then2152
  %1485 = load %struct.regnode*, %struct.regnode** %next, align 8
  %type2156 = getelementptr inbounds %struct.regnode, %struct.regnode* %1485, i32 0, i32 1
  %1486 = load i8, i8* %type2156, align 1
  %conv2157 = zext i8 %1486 to i32
  %cmp2158 = icmp ne i32 %conv2157, 48
  br i1 %cmp2158, label %land.lhs.true2160, label %if.end2164

land.lhs.true2160:                                ; preds = %land.lhs.true2155
  %1487 = load %struct.regnode*, %struct.regnode** %next, align 8
  %1488 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  %cmp2161 = icmp ult %struct.regnode* %1487, %1488
  br i1 %cmp2161, label %if.then2163, label %if.end2164

if.then2163:                                      ; preds = %land.lhs.true2160
  store i32 0, i32* %is_par, align 4
  br label %if.end2164

if.end2164:                                       ; preds = %if.then2163, %land.lhs.true2160, %land.lhs.true2155, %if.then2152
  br label %if.end2165

if.end2165:                                       ; preds = %if.end2164, %if.end2148
  %1489 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2166 = icmp ne %struct.scan_data_t* %1489, null
  br i1 %tobool2166, label %if.then2167, label %if.end2171

if.then2167:                                      ; preds = %if.end2165
  %1490 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %1491 = bitcast %struct.regnode* %1490 to %struct.regnode_1*
  %arg12168 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %1491, i32 0, i32 3
  %1492 = load i32, i32* %arg12168, align 4
  %conv2169 = zext i32 %1492 to i64
  %1493 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_closep2170 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1493, i32 0, i32 18
  %1494 = load i64*, i64** %last_closep2170, align 8
  store i64 %conv2169, i64* %1494, align 8
  br label %if.end2171

if.end2171:                                       ; preds = %if.then2167, %if.end2165
  br label %if.end2492

if.else2172:                                      ; preds = %if.else2138
  %1495 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2173 = getelementptr inbounds %struct.regnode, %struct.regnode* %1495, i32 0, i32 1
  %1496 = load i8, i8* %type2173, align 1
  %conv2174 = zext i8 %1496 to i32
  %cmp2175 = icmp eq i32 %conv2174, 68
  br i1 %cmp2175, label %if.then2177, label %if.else2183

if.then2177:                                      ; preds = %if.else2172
  %1497 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2178 = icmp ne %struct.scan_data_t* %1497, null
  br i1 %tobool2178, label %if.then2179, label %if.end2182

if.then2179:                                      ; preds = %if.then2177
  %1498 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2180 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1498, i32 0, i32 16
  %1499 = load i32, i32* %flags2180, align 8
  %or2181 = or i32 %1499, 512
  store i32 %or2181, i32* %flags2180, align 8
  br label %if.end2182

if.end2182:                                       ; preds = %if.then2179, %if.then2177
  br label %if.end2491

if.else2183:                                      ; preds = %if.else2172
  %1500 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2184 = getelementptr inbounds %struct.regnode, %struct.regnode* %1500, i32 0, i32 1
  %1501 = load i8, i8* %type2184, align 1
  %idxprom2185 = zext i8 %1501 to i64
  %arrayidx2186 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom2185
  %1502 = load i8, i8* %arrayidx2186, align 1
  %conv2187 = zext i8 %1502 to i32
  %cmp2188 = icmp eq i32 %conv2187, 81
  br i1 %cmp2188, label %if.then2190, label %if.else2210

if.then2190:                                      ; preds = %if.else2183
  %1503 = load i32, i32* %flags.addr, align 4
  %and2191 = and i32 %1503, 1024
  %tobool2192 = icmp ne i32 %and2191, 0
  br i1 %tobool2192, label %if.then2193, label %if.end2195

if.then2193:                                      ; preds = %if.then2190
  %1504 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1505 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %1506 = load i64*, i64** %minlenp.addr, align 8
  %1507 = load i32, i32* %is_inf, align 4
  call void @S_scan_commit(%struct.RExC_state_t* %1504, %struct.scan_data_t* %1505, i64* %1506, i32 %1507)
  %1508 = load i32, i32* %flags.addr, align 4
  %and2194 = and i32 %1508, -1025
  store i32 %and2194, i32* %flags.addr, align 4
  br label %if.end2195

if.end2195:                                       ; preds = %if.then2193, %if.then2190
  %1509 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2196 = icmp ne %struct.scan_data_t* %1509, null
  br i1 %tobool2196, label %land.lhs.true2197, label %if.end2209

land.lhs.true2197:                                ; preds = %if.end2195
  %1510 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2198 = getelementptr inbounds %struct.regnode, %struct.regnode* %1510, i32 0, i32 1
  %1511 = load i8, i8* %type2198, align 1
  %conv2199 = zext i8 %1511 to i32
  %cmp2200 = icmp eq i32 %conv2199, 83
  br i1 %cmp2200, label %if.then2202, label %if.end2209

if.then2202:                                      ; preds = %land.lhs.true2197
  %1512 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2203 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1512, i32 0, i32 16
  %1513 = load i32, i32* %flags2203, align 8
  %or2204 = or i32 %1513, 32768
  store i32 %or2204, i32* %flags2203, align 8
  %1514 = load i64, i64* %stopmin, align 8
  %1515 = load i64, i64* %min, align 8
  %cmp2205 = icmp sgt i64 %1514, %1515
  br i1 %cmp2205, label %if.then2207, label %if.end2208

if.then2207:                                      ; preds = %if.then2202
  %1516 = load i64, i64* %min, align 8
  store i64 %1516, i64* %stopmin, align 8
  br label %if.end2208

if.end2208:                                       ; preds = %if.then2207, %if.then2202
  br label %if.end2209

if.end2209:                                       ; preds = %if.end2208, %land.lhs.true2197, %if.end2195
  br label %if.end2490

if.else2210:                                      ; preds = %if.else2183
  %1517 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2211 = getelementptr inbounds %struct.regnode, %struct.regnode* %1517, i32 0, i32 1
  %1518 = load i8, i8* %type2211, align 1
  %conv2212 = zext i8 %1518 to i32
  %cmp2213 = icmp eq i32 %conv2212, 70
  br i1 %cmp2213, label %land.lhs.true2215, label %if.else2233

land.lhs.true2215:                                ; preds = %if.else2210
  %1519 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %flags2216 = getelementptr inbounds %struct.regnode, %struct.regnode* %1519, i32 0, i32 0
  %1520 = load i8, i8* %flags2216, align 2
  %conv2217 = zext i8 %1520 to i32
  %cmp2218 = icmp eq i32 %conv2217, 2
  br i1 %cmp2218, label %if.then2220, label %if.else2233

if.then2220:                                      ; preds = %land.lhs.true2215
  %1521 = load i32, i32* %flags.addr, align 4
  %and2221 = and i32 %1521, 1024
  %tobool2222 = icmp ne i32 %and2221, 0
  br i1 %tobool2222, label %if.then2223, label %if.end2226

if.then2223:                                      ; preds = %if.then2220
  %1522 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1523 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %1524 = load i64*, i64** %minlenp.addr, align 8
  %1525 = load i32, i32* %is_inf, align 4
  call void @S_scan_commit(%struct.RExC_state_t* %1522, %struct.scan_data_t* %1523, i64* %1524, i32 %1525)
  %1526 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_float2224 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1526, i32 0, i32 11
  %1527 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest2225 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1527, i32 0, i32 6
  store %struct.sv** %longest_float2224, %struct.sv*** %longest2225, align 8
  br label %if.end2226

if.end2226:                                       ; preds = %if.then2223, %if.then2220
  store i32 1, i32* %is_inf_internal, align 4
  store i32 1, i32* %is_inf, align 4
  %1528 = load i32, i32* %flags.addr, align 4
  %and2227 = and i32 %1528, 4096
  %tobool2228 = icmp ne i32 %and2227, 0
  br i1 %tobool2228, label %if.then2229, label %if.end2231

if.then2229:                                      ; preds = %if.end2226
  %1529 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2230 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1529, i32 0, i32 19
  %1530 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class2230, align 8
  call void @S_ssc_anything(%struct.regnode_ssc* %1530)
  br label %if.end2231

if.end2231:                                       ; preds = %if.then2229, %if.end2226
  %1531 = load i32, i32* %flags.addr, align 4
  %and2232 = and i32 %1531, -6145
  store i32 %and2232, i32* %flags.addr, align 4
  br label %if.end2489

if.else2233:                                      ; preds = %land.lhs.true2215, %if.else2210
  %1532 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2234 = getelementptr inbounds %struct.regnode, %struct.regnode* %1532, i32 0, i32 1
  %1533 = load i8, i8* %type2234, align 1
  %conv2235 = zext i8 %1533 to i32
  %cmp2236 = icmp eq i32 %conv2235, 7
  br i1 %cmp2236, label %if.then2238, label %if.else2277

if.then2238:                                      ; preds = %if.else2233
  %1534 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1534, i32 0, i32 4
  %1535 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %intflags = getelementptr inbounds %struct.regexp, %struct.regexp* %1535, i32 0, i32 13
  %1536 = load i32, i32* %intflags, align 4
  %and2239 = and i32 %1536, 512
  %tobool2240 = icmp ne i32 %and2239, 0
  br i1 %tobool2240, label %if.else2270, label %land.lhs.true2241

land.lhs.true2241:                                ; preds = %if.then2238
  %1537 = load i64, i64* %delta, align 8
  %tobool2242 = icmp ne i64 %1537, 0
  br i1 %tobool2242, label %if.else2270, label %lor.lhs.false2243

lor.lhs.false2243:                                ; preds = %land.lhs.true2241
  %1538 = load i32, i32* %is_inf, align 4
  %tobool2244 = icmp ne i32 %1538, 0
  br i1 %tobool2244, label %if.else2270, label %lor.lhs.false2245

lor.lhs.false2245:                                ; preds = %lor.lhs.false2243
  %1539 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2246 = icmp ne %struct.scan_data_t* %1539, null
  br i1 %tobool2246, label %land.lhs.true2247, label %if.then2250

land.lhs.true2247:                                ; preds = %lor.lhs.false2245
  %1540 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta2248 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1540, i32 0, i32 1
  %1541 = load i64, i64* %pos_delta2248, align 8
  %tobool2249 = icmp ne i64 %1541, 0
  br i1 %tobool2249, label %if.else2270, label %if.then2250

if.then2250:                                      ; preds = %land.lhs.true2247, %lor.lhs.false2245
  %1542 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx2251 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1542, i32 0, i32 4
  %1543 = load %struct.regexp*, %struct.regexp** %rx2251, align 8
  %intflags2252 = getelementptr inbounds %struct.regexp, %struct.regexp* %1543, i32 0, i32 13
  %1544 = load i32, i32* %intflags2252, align 4
  %and2253 = and i32 %1544, 7168
  %tobool2254 = icmp ne i32 %and2253, 0
  br i1 %tobool2254, label %if.end2262, label %land.lhs.true2255

land.lhs.true2255:                                ; preds = %if.then2250
  %1545 = load i32, i32* %flags.addr, align 4
  %and2256 = and i32 %1545, 1024
  %tobool2257 = icmp ne i32 %and2256, 0
  br i1 %tobool2257, label %if.then2258, label %if.end2262

if.then2258:                                      ; preds = %land.lhs.true2255
  %1546 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx2259 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1546, i32 0, i32 4
  %1547 = load %struct.regexp*, %struct.regexp** %rx2259, align 8
  %intflags2260 = getelementptr inbounds %struct.regexp, %struct.regexp* %1547, i32 0, i32 13
  %1548 = load i32, i32* %intflags2260, align 4
  %or2261 = or i32 %1548, 4096
  store i32 %or2261, i32* %intflags2260, align 4
  br label %if.end2262

if.end2262:                                       ; preds = %if.then2258, %land.lhs.true2255, %if.then2250
  %1549 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx2263 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1549, i32 0, i32 4
  %1550 = load %struct.regexp*, %struct.regexp** %rx2263, align 8
  %gofs = getelementptr inbounds %struct.regexp, %struct.regexp* %1550, i32 0, i32 10
  %1551 = load i64, i64* %gofs, align 8
  %1552 = load i64, i64* %min, align 8
  %cmp2264 = icmp ult i64 %1551, %1552
  br i1 %cmp2264, label %if.then2266, label %if.end2269

if.then2266:                                      ; preds = %if.end2262
  %1553 = load i64, i64* %min, align 8
  %1554 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx2267 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1554, i32 0, i32 4
  %1555 = load %struct.regexp*, %struct.regexp** %rx2267, align 8
  %gofs2268 = getelementptr inbounds %struct.regexp, %struct.regexp* %1555, i32 0, i32 10
  store i64 %1553, i64* %gofs2268, align 8
  br label %if.end2269

if.end2269:                                       ; preds = %if.then2266, %if.end2262
  br label %if.end2276

if.else2270:                                      ; preds = %land.lhs.true2247, %lor.lhs.false2243, %land.lhs.true2241, %if.then2238
  %1556 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx2271 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1556, i32 0, i32 4
  %1557 = load %struct.regexp*, %struct.regexp** %rx2271, align 8
  %intflags2272 = getelementptr inbounds %struct.regexp, %struct.regexp* %1557, i32 0, i32 13
  %1558 = load i32, i32* %intflags2272, align 4
  %or2273 = or i32 %1558, 512
  store i32 %or2273, i32* %intflags2272, align 4
  %1559 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx2274 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1559, i32 0, i32 4
  %1560 = load %struct.regexp*, %struct.regexp** %rx2274, align 8
  %gofs2275 = getelementptr inbounds %struct.regexp, %struct.regexp* %1560, i32 0, i32 10
  store i64 0, i64* %gofs2275, align 8
  br label %if.end2276

if.end2276:                                       ; preds = %if.else2270, %if.end2269
  br label %if.end2488

if.else2277:                                      ; preds = %if.else2233
  %1561 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type2278 = getelementptr inbounds %struct.regnode, %struct.regnode* %1561, i32 0, i32 1
  %1562 = load i8, i8* %type2278, align 1
  %idxprom2279 = zext i8 %1562 to i64
  %arrayidx2280 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom2279
  %1563 = load i8, i8* %arrayidx2280, align 1
  %conv2281 = zext i8 %1563 to i32
  %cmp2282 = icmp eq i32 %conv2281, 72
  br i1 %cmp2282, label %if.then2284, label %if.end2487

if.then2284:                                      ; preds = %if.else2277
  %1564 = load %struct.regnode*, %struct.regnode** %scan, align 8
  store %struct.regnode* %1564, %struct.regnode** %trie_node, align 8
  %1565 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call2286 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1565)
  store %struct.regnode* %call2286, %struct.regnode** %tail2285, align 8
  %1566 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi2287 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1566, i32 0, i32 5
  %1567 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi2287, align 8
  %data2288 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %1567, i32 0, i32 3
  %1568 = load %struct.reg_data*, %struct.reg_data** %data2288, align 8
  %data2289 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %1568, i32 0, i32 2
  %1569 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %1570 = bitcast %struct.regnode* %1569 to %struct.regnode_1*
  %arg12290 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %1570, i32 0, i32 3
  %1571 = load i32, i32* %arg12290, align 4
  %idxprom2291 = zext i32 %1571 to i64
  %arrayidx2292 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data2289, i64 0, i64 %idxprom2291
  %1572 = load i8*, i8** %arrayidx2292, align 8
  %1573 = bitcast i8* %1572 to %struct._reg_trie_data*
  store %struct._reg_trie_data* %1573, %struct._reg_trie_data** %trie, align 8
  store i64 0, i64* %max12293, align 8
  store i64 9223372036854775807, i64* %min12294, align 8
  %1574 = load i32, i32* %flags.addr, align 4
  %and2296 = and i32 %1574, 1024
  %tobool2297 = icmp ne i32 %and2296, 0
  br i1 %tobool2297, label %if.then2298, label %if.end2299

if.then2298:                                      ; preds = %if.then2284
  %1575 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1576 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %1577 = load i64*, i64** %minlenp.addr, align 8
  %1578 = load i32, i32* %is_inf, align 4
  call void @S_scan_commit(%struct.RExC_state_t* %1575, %struct.scan_data_t* %1576, i64* %1577, i32 %1578)
  br label %if.end2299

if.end2299:                                       ; preds = %if.then2298, %if.then2284
  %1579 = load i32, i32* %flags.addr, align 4
  %and2300 = and i32 %1579, 6144
  %tobool2301 = icmp ne i32 %and2300, 0
  br i1 %tobool2301, label %if.then2302, label %if.end2303

if.then2302:                                      ; preds = %if.end2299
  %1580 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  call void @S_ssc_init(%struct.RExC_state_t* %1580, %struct.regnode_ssc* %accum2295)
  br label %if.end2303

if.end2303:                                       ; preds = %if.then2302, %if.end2299
  %1581 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1581, i32 0, i32 6
  %1582 = load i16*, i16** %jump, align 8
  %tobool2304 = icmp ne i16* %1582, null
  br i1 %tobool2304, label %if.else2307, label %if.then2305

if.then2305:                                      ; preds = %if.end2303
  %1583 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %minlen2306 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1583, i32 0, i32 10
  %1584 = load i64, i64* %minlen2306, align 8
  store i64 %1584, i64* %min12294, align 8
  %1585 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %maxlen = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1585, i32 0, i32 11
  %1586 = load i64, i64* %maxlen, align 8
  store i64 %1586, i64* %max12293, align 8
  br label %if.end2436

if.else2307:                                      ; preds = %if.end2303
  store %struct.regnode* null, %struct.regnode** %nextbranch, align 8
  store i32 1, i32* %word, align 4
  br label %for.cond2308

for.cond2308:                                     ; preds = %for.inc2433, %if.else2307
  %1587 = load i32, i32* %word, align 4
  %1588 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordcount = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1588, i32 0, i32 14
  %1589 = load i32, i32* %wordcount, align 8
  %cmp2309 = icmp ule i32 %1587, %1589
  br i1 %cmp2309, label %for.body2311, label %for.end2435

for.body2311:                                     ; preds = %for.cond2308
  store i64 0, i64* %deltanext2312, align 8
  store i64 0, i64* %minnext2313, align 8
  store i64 0, i64* %f2314, align 8
  %1590 = bitcast %struct.scan_data_t* %data_fake to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1590, i8* align 8 bitcast (%struct.scan_data_t* @zero_scan_data to i8*), i64 152, i1 false)
  %1591 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2317 = icmp ne %struct.scan_data_t* %1591, null
  br i1 %tobool2317, label %if.then2318, label %if.else2323

if.then2318:                                      ; preds = %for.body2311
  %1592 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %whilem_c2319 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1592, i32 0, i32 17
  %1593 = load i32, i32* %whilem_c2319, align 4
  %whilem_c2320 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 17
  store i32 %1593, i32* %whilem_c2320, align 4
  %1594 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_closep2321 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1594, i32 0, i32 18
  %1595 = load i64*, i64** %last_closep2321, align 8
  %last_closep2322 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 18
  store i64* %1595, i64** %last_closep2322, align 8
  br label %if.end2325

if.else2323:                                      ; preds = %for.body2311
  %last_closep2324 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 18
  store i64* %fake2315, i64** %last_closep2324, align 8
  br label %if.end2325

if.end2325:                                       ; preds = %if.else2323, %if.then2318
  %1596 = load i64, i64* %delta, align 8
  %pos_delta2326 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 1
  store i64 %1596, i64* %pos_delta2326, align 8
  %1597 = load i32, i32* %flags.addr, align 4
  %and2327 = and i32 %1597, 6144
  %tobool2328 = icmp ne i32 %and2327, 0
  br i1 %tobool2328, label %if.then2329, label %if.end2331

if.then2329:                                      ; preds = %if.end2325
  %1598 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  call void @S_ssc_init(%struct.RExC_state_t* %1598, %struct.regnode_ssc* %this_class2316)
  %start_class2330 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 19
  store %struct.regnode_ssc* %this_class2316, %struct.regnode_ssc** %start_class2330, align 8
  store i64 2048, i64* %f2314, align 8
  br label %if.end2331

if.end2331:                                       ; preds = %if.then2329, %if.end2325
  %1599 = load i32, i32* %flags.addr, align 4
  %and2332 = and i32 %1599, 8192
  %tobool2333 = icmp ne i32 %and2332, 0
  br i1 %tobool2333, label %if.then2334, label %if.end2336

if.then2334:                                      ; preds = %if.end2331
  %1600 = load i64, i64* %f2314, align 8
  %or2335 = or i64 %1600, 8192
  store i64 %or2335, i64* %f2314, align 8
  br label %if.end2336

if.end2336:                                       ; preds = %if.then2334, %if.end2331
  %1601 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump2337 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1601, i32 0, i32 6
  %1602 = load i16*, i16** %jump2337, align 8
  %1603 = load i32, i32* %word, align 4
  %idxprom2338 = zext i32 %1603 to i64
  %arrayidx2339 = getelementptr inbounds i16, i16* %1602, i64 %idxprom2338
  %1604 = load i16, i16* %arrayidx2339, align 2
  %tobool2340 = icmp ne i16 %1604, 0
  br i1 %tobool2340, label %if.then2341, label %if.end2359

if.then2341:                                      ; preds = %if.end2336
  %1605 = load %struct.regnode*, %struct.regnode** %nextbranch, align 8
  %tobool2342 = icmp ne %struct.regnode* %1605, null
  br i1 %tobool2342, label %if.end2349, label %if.then2343

if.then2343:                                      ; preds = %if.then2341
  %1606 = load %struct.regnode*, %struct.regnode** %trie_node, align 8
  %1607 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump2344 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1607, i32 0, i32 6
  %1608 = load i16*, i16** %jump2344, align 8
  %arrayidx2345 = getelementptr inbounds i16, i16* %1608, i64 0
  %1609 = load i16, i16* %arrayidx2345, align 2
  %conv2346 = zext i16 %1609 to i32
  %idx.ext2347 = sext i32 %conv2346 to i64
  %add.ptr2348 = getelementptr inbounds %struct.regnode, %struct.regnode* %1606, i64 %idx.ext2347
  store %struct.regnode* %add.ptr2348, %struct.regnode** %nextbranch, align 8
  br label %if.end2349

if.end2349:                                       ; preds = %if.then2343, %if.then2341
  %1610 = load %struct.regnode*, %struct.regnode** %trie_node, align 8
  %1611 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump2350 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1611, i32 0, i32 6
  %1612 = load i16*, i16** %jump2350, align 8
  %1613 = load i32, i32* %word, align 4
  %idxprom2351 = zext i32 %1613 to i64
  %arrayidx2352 = getelementptr inbounds i16, i16* %1612, i64 %idxprom2351
  %1614 = load i16, i16* %arrayidx2352, align 2
  %conv2353 = zext i16 %1614 to i32
  %idx.ext2354 = sext i32 %conv2353 to i64
  %add.ptr2355 = getelementptr inbounds %struct.regnode, %struct.regnode* %1610, i64 %idx.ext2354
  store %struct.regnode* %add.ptr2355, %struct.regnode** %scan, align 8
  %1615 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1616 = load i64*, i64** %minlenp.addr, align 8
  %1617 = load %struct.regnode*, %struct.regnode** %nextbranch, align 8
  %1618 = load i32, i32* %stopparen.addr, align 4
  %1619 = load i32, i32* %recursed_depth.addr, align 4
  %1620 = load i64, i64* %f2314, align 8
  %conv2356 = trunc i64 %1620 to i32
  %1621 = load i32, i32* %depth.addr, align 4
  %add2357 = add i32 %1621, 1
  %call2358 = call i64 @S_study_chunk(%struct.RExC_state_t* %1615, %struct.regnode** %scan, i64* %1616, i64* %deltanext2312, %struct.regnode* %1617, %struct.scan_data_t* %data_fake, i32 %1618, i32 %1619, %struct.regnode_ssc* null, i32 %conv2356, i32 %add2357)
  store i64 %call2358, i64* %minnext2313, align 8
  br label %if.end2359

if.end2359:                                       ; preds = %if.end2349, %if.end2336
  %1622 = load %struct.regnode*, %struct.regnode** %nextbranch, align 8
  %tobool2360 = icmp ne %struct.regnode* %1622, null
  br i1 %tobool2360, label %land.lhs.true2361, label %if.end2370

land.lhs.true2361:                                ; preds = %if.end2359
  %1623 = load %struct.regnode*, %struct.regnode** %nextbranch, align 8
  %type2362 = getelementptr inbounds %struct.regnode, %struct.regnode* %1623, i32 0, i32 1
  %1624 = load i8, i8* %type2362, align 1
  %idxprom2363 = zext i8 %1624 to i64
  %arrayidx2364 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom2363
  %1625 = load i8, i8* %arrayidx2364, align 1
  %conv2365 = zext i8 %1625 to i32
  %cmp2366 = icmp eq i32 %conv2365, 30
  br i1 %cmp2366, label %if.then2368, label %if.end2370

if.then2368:                                      ; preds = %land.lhs.true2361
  %1626 = load %struct.regnode*, %struct.regnode** %nextbranch, align 8
  %call2369 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1626)
  store %struct.regnode* %call2369, %struct.regnode** %nextbranch, align 8
  br label %if.end2370

if.end2370:                                       ; preds = %if.then2368, %land.lhs.true2361, %if.end2359
  %1627 = load i64, i64* %min12294, align 8
  %1628 = load i64, i64* %minnext2313, align 8
  %1629 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %minlen2371 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1629, i32 0, i32 10
  %1630 = load i64, i64* %minlen2371, align 8
  %add2372 = add i64 %1628, %1630
  %cmp2373 = icmp sgt i64 %1627, %add2372
  br i1 %cmp2373, label %if.then2375, label %if.end2378

if.then2375:                                      ; preds = %if.end2370
  %1631 = load i64, i64* %minnext2313, align 8
  %1632 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %minlen2376 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1632, i32 0, i32 10
  %1633 = load i64, i64* %minlen2376, align 8
  %add2377 = add i64 %1631, %1633
  store i64 %add2377, i64* %min12294, align 8
  br label %if.end2378

if.end2378:                                       ; preds = %if.then2375, %if.end2370
  %1634 = load i64, i64* %deltanext2312, align 8
  %cmp2379 = icmp eq i64 %1634, 9223372036854775807
  br i1 %cmp2379, label %if.then2381, label %if.else2382

if.then2381:                                      ; preds = %if.end2378
  store i32 1, i32* %is_inf_internal, align 4
  store i32 1, i32* %is_inf, align 4
  store i64 9223372036854775807, i64* %max12293, align 8
  br label %if.end2393

if.else2382:                                      ; preds = %if.end2378
  %1635 = load i64, i64* %max12293, align 8
  %1636 = load i64, i64* %minnext2313, align 8
  %1637 = load i64, i64* %deltanext2312, align 8
  %add2383 = add nsw i64 %1636, %1637
  %1638 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %maxlen2384 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1638, i32 0, i32 11
  %1639 = load i64, i64* %maxlen2384, align 8
  %add2385 = add i64 %add2383, %1639
  %cmp2386 = icmp slt i64 %1635, %add2385
  br i1 %cmp2386, label %if.then2388, label %if.end2392

if.then2388:                                      ; preds = %if.else2382
  %1640 = load i64, i64* %minnext2313, align 8
  %1641 = load i64, i64* %deltanext2312, align 8
  %add2389 = add nsw i64 %1640, %1641
  %1642 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %maxlen2390 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1642, i32 0, i32 11
  %1643 = load i64, i64* %maxlen2390, align 8
  %add2391 = add i64 %add2389, %1643
  store i64 %add2391, i64* %max12293, align 8
  br label %if.end2392

if.end2392:                                       ; preds = %if.then2388, %if.else2382
  br label %if.end2393

if.end2393:                                       ; preds = %if.end2392, %if.then2381
  %flags2394 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 16
  %1644 = load i32, i32* %flags2394, align 8
  %and2395 = and i32 %1644, 384
  %tobool2396 = icmp ne i32 %and2395, 0
  br i1 %tobool2396, label %if.then2397, label %if.end2399

if.then2397:                                      ; preds = %if.end2393
  %1645 = load i32, i32* %pars, align 4
  %inc2398 = add nsw i32 %1645, 1
  store i32 %inc2398, i32* %pars, align 4
  br label %if.end2399

if.end2399:                                       ; preds = %if.then2397, %if.end2393
  %flags2400 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 16
  %1646 = load i32, i32* %flags2400, align 8
  %and2401 = and i32 %1646, 32768
  %tobool2402 = icmp ne i32 %and2401, 0
  br i1 %tobool2402, label %if.then2403, label %if.end2416

if.then2403:                                      ; preds = %if.end2399
  %1647 = load i64, i64* %stopmin, align 8
  %1648 = load i64, i64* %min, align 8
  %1649 = load i64, i64* %min12294, align 8
  %add2404 = add nsw i64 %1648, %1649
  %cmp2405 = icmp sgt i64 %1647, %add2404
  br i1 %cmp2405, label %if.then2407, label %if.end2409

if.then2407:                                      ; preds = %if.then2403
  %1650 = load i64, i64* %min, align 8
  %1651 = load i64, i64* %min12294, align 8
  %add2408 = add nsw i64 %1650, %1651
  store i64 %add2408, i64* %stopmin, align 8
  br label %if.end2409

if.end2409:                                       ; preds = %if.then2407, %if.then2403
  %1652 = load i32, i32* %flags.addr, align 4
  %and2410 = and i32 %1652, -1025
  store i32 %and2410, i32* %flags.addr, align 4
  %1653 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2411 = icmp ne %struct.scan_data_t* %1653, null
  br i1 %tobool2411, label %if.then2412, label %if.end2415

if.then2412:                                      ; preds = %if.end2409
  %1654 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2413 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1654, i32 0, i32 16
  %1655 = load i32, i32* %flags2413, align 8
  %or2414 = or i32 %1655, 32768
  store i32 %or2414, i32* %flags2413, align 8
  br label %if.end2415

if.end2415:                                       ; preds = %if.then2412, %if.end2409
  br label %if.end2416

if.end2416:                                       ; preds = %if.end2415, %if.end2399
  %1656 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2417 = icmp ne %struct.scan_data_t* %1656, null
  br i1 %tobool2417, label %if.then2418, label %if.end2428

if.then2418:                                      ; preds = %if.end2416
  %flags2419 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 16
  %1657 = load i32, i32* %flags2419, align 8
  %and2420 = and i32 %1657, 512
  %tobool2421 = icmp ne i32 %and2420, 0
  br i1 %tobool2421, label %if.then2422, label %if.end2425

if.then2422:                                      ; preds = %if.then2418
  %1658 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2423 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1658, i32 0, i32 16
  %1659 = load i32, i32* %flags2423, align 8
  %or2424 = or i32 %1659, 512
  store i32 %or2424, i32* %flags2423, align 8
  br label %if.end2425

if.end2425:                                       ; preds = %if.then2422, %if.then2418
  %whilem_c2426 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %data_fake, i32 0, i32 17
  %1660 = load i32, i32* %whilem_c2426, align 4
  %1661 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %whilem_c2427 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1661, i32 0, i32 17
  store i32 %1660, i32* %whilem_c2427, align 4
  br label %if.end2428

if.end2428:                                       ; preds = %if.end2425, %if.end2416
  %1662 = load i32, i32* %flags.addr, align 4
  %and2429 = and i32 %1662, 6144
  %tobool2430 = icmp ne i32 %and2429, 0
  br i1 %tobool2430, label %if.then2431, label %if.end2432

if.then2431:                                      ; preds = %if.end2428
  %1663 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1664 = bitcast %struct.regnode_ssc* %this_class2316 to %struct.regnode_charclass*
  call void @S_ssc_or(%struct.RExC_state_t* %1663, %struct.regnode_ssc* %accum2295, %struct.regnode_charclass* %1664)
  br label %if.end2432

if.end2432:                                       ; preds = %if.then2431, %if.end2428
  br label %for.inc2433

for.inc2433:                                      ; preds = %if.end2432
  %1665 = load i32, i32* %word, align 4
  %inc2434 = add i32 %1665, 1
  store i32 %inc2434, i32* %word, align 4
  br label %for.cond2308

for.end2435:                                      ; preds = %for.cond2308
  br label %if.end2436

if.end2436:                                       ; preds = %for.end2435, %if.then2305
  %1666 = load i32, i32* %flags.addr, align 4
  %and2437 = and i32 %1666, 1024
  %tobool2438 = icmp ne i32 %and2437, 0
  br i1 %tobool2438, label %if.then2439, label %if.end2453

if.then2439:                                      ; preds = %if.end2436
  %1667 = load i64, i64* %min12294, align 8
  %1668 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min2440 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1668, i32 0, i32 0
  %1669 = load i64, i64* %pos_min2440, align 8
  %add2441 = add nsw i64 %1669, %1667
  store i64 %add2441, i64* %pos_min2440, align 8
  %1670 = load i64, i64* %max12293, align 8
  %1671 = load i64, i64* %min12294, align 8
  %sub2442 = sub nsw i64 %1670, %1671
  %1672 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta2443 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1672, i32 0, i32 1
  %1673 = load i64, i64* %pos_delta2443, align 8
  %add2444 = add nsw i64 %1673, %sub2442
  store i64 %add2444, i64* %pos_delta2443, align 8
  %1674 = load i64, i64* %max12293, align 8
  %1675 = load i64, i64* %min12294, align 8
  %cmp2445 = icmp ne i64 %1674, %1675
  br i1 %cmp2445, label %if.then2449, label %lor.lhs.false2447

lor.lhs.false2447:                                ; preds = %if.then2439
  %1676 = load i32, i32* %is_inf, align 4
  %tobool2448 = icmp ne i32 %1676, 0
  br i1 %tobool2448, label %if.then2449, label %if.end2452

if.then2449:                                      ; preds = %lor.lhs.false2447, %if.then2439
  %1677 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_float2450 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1677, i32 0, i32 11
  %1678 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest2451 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1678, i32 0, i32 6
  store %struct.sv** %longest_float2450, %struct.sv*** %longest2451, align 8
  br label %if.end2452

if.end2452:                                       ; preds = %if.then2449, %lor.lhs.false2447
  br label %if.end2453

if.end2453:                                       ; preds = %if.end2452, %if.end2436
  %1679 = load i64, i64* %min12294, align 8
  %1680 = load i64, i64* %min, align 8
  %add2454 = add nsw i64 %1680, %1679
  store i64 %add2454, i64* %min, align 8
  %1681 = load i64, i64* %delta, align 8
  %cmp2455 = icmp ne i64 %1681, 9223372036854775807
  br i1 %cmp2455, label %if.then2457, label %if.end2460

if.then2457:                                      ; preds = %if.end2453
  %1682 = load i64, i64* %max12293, align 8
  %1683 = load i64, i64* %min12294, align 8
  %sub2458 = sub nsw i64 %1682, %1683
  %1684 = load i64, i64* %delta, align 8
  %add2459 = add nsw i64 %1684, %sub2458
  store i64 %add2459, i64* %delta, align 8
  br label %if.end2460

if.end2460:                                       ; preds = %if.then2457, %if.end2453
  %1685 = load i32, i32* %flags.addr, align 4
  %and2461 = and i32 %1685, 4096
  %tobool2462 = icmp ne i32 %and2461, 0
  br i1 %tobool2462, label %if.then2463, label %if.else2470

if.then2463:                                      ; preds = %if.end2460
  %1686 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1687 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2464 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1687, i32 0, i32 19
  %1688 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class2464, align 8
  %1689 = bitcast %struct.regnode_ssc* %accum2295 to %struct.regnode_charclass*
  call void @S_ssc_or(%struct.RExC_state_t* %1686, %struct.regnode_ssc* %1688, %struct.regnode_charclass* %1689)
  %1690 = load i64, i64* %min12294, align 8
  %tobool2465 = icmp ne i64 %1690, 0
  br i1 %tobool2465, label %if.then2466, label %if.end2469

if.then2466:                                      ; preds = %if.then2463
  %1691 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1692 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2467 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1692, i32 0, i32 19
  %1693 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class2467, align 8
  %1694 = load %struct.regnode_ssc*, %struct.regnode_ssc** %and_withp.addr, align 8
  %1695 = bitcast %struct.regnode_ssc* %1694 to %struct.regnode_charclass*
  call void @S_ssc_and(%struct.RExC_state_t* %1691, %struct.regnode_ssc* %1693, %struct.regnode_charclass* %1695)
  %1696 = load i32, i32* %flags.addr, align 4
  %and2468 = and i32 %1696, -6145
  store i32 %and2468, i32* %flags.addr, align 4
  br label %if.end2469

if.end2469:                                       ; preds = %if.then2466, %if.then2463
  br label %if.end2486

if.else2470:                                      ; preds = %if.end2460
  %1697 = load i32, i32* %flags.addr, align 4
  %and2471 = and i32 %1697, 2048
  %tobool2472 = icmp ne i32 %and2471, 0
  br i1 %tobool2472, label %if.then2473, label %if.end2485

if.then2473:                                      ; preds = %if.else2470
  %1698 = load i64, i64* %min12294, align 8
  %tobool2474 = icmp ne i64 %1698, 0
  br i1 %tobool2474, label %if.then2475, label %if.else2478

if.then2475:                                      ; preds = %if.then2473
  %1699 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1700 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2476 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1700, i32 0, i32 19
  %1701 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class2476, align 8
  %1702 = bitcast %struct.regnode_ssc* %accum2295 to %struct.regnode_charclass*
  call void @S_ssc_and(%struct.RExC_state_t* %1699, %struct.regnode_ssc* %1701, %struct.regnode_charclass* %1702)
  %1703 = load i32, i32* %flags.addr, align 4
  %and2477 = and i32 %1703, -6145
  store i32 %and2477, i32* %flags.addr, align 4
  br label %if.end2484

if.else2478:                                      ; preds = %if.then2473
  %call2479 = call i8* @Perl_safesysmalloc(i64 56)
  %1704 = bitcast i8* %call2479 to %struct.regnode_ssc*
  store %struct.regnode_ssc* %1704, %struct.regnode_ssc** %and_withp.addr, align 8
  %1705 = load %struct.regnode_ssc*, %struct.regnode_ssc** %and_withp.addr, align 8
  %1706 = bitcast %struct.regnode_ssc* %1705 to i8*
  call void @Perl_save_pushptr(i8* %1706, i32 10)
  %1707 = load %struct.regnode_ssc*, %struct.regnode_ssc** %and_withp.addr, align 8
  %1708 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2480 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1708, i32 0, i32 19
  %1709 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class2480, align 8
  %1710 = bitcast %struct.regnode_ssc* %1707 to i8*
  %1711 = bitcast %struct.regnode_ssc* %1709 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1710, i8* align 8 %1711, i64 56, i1 false)
  %1712 = load i32, i32* %flags.addr, align 4
  %and2481 = and i32 %1712, -2049
  store i32 %and2481, i32* %flags.addr, align 4
  %1713 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2482 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1713, i32 0, i32 19
  %1714 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class2482, align 8
  %1715 = bitcast %struct.regnode_ssc* %1714 to i8*
  %1716 = bitcast %struct.regnode_ssc* %accum2295 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1715, i8* align 8 %1716, i64 56, i1 false)
  %1717 = load i32, i32* %flags.addr, align 4
  %or2483 = or i32 %1717, 4096
  store i32 %or2483, i32* %flags.addr, align 4
  br label %if.end2484

if.end2484:                                       ; preds = %if.else2478, %if.then2475
  br label %if.end2485

if.end2485:                                       ; preds = %if.end2484, %if.else2470
  br label %if.end2486

if.end2486:                                       ; preds = %if.end2485, %if.end2469
  %1718 = load %struct.regnode*, %struct.regnode** %tail2285, align 8
  store %struct.regnode* %1718, %struct.regnode** %scan, align 8
  br label %while.cond15

if.end2487:                                       ; preds = %if.else2277
  br label %if.end2488

if.end2488:                                       ; preds = %if.end2487, %if.end2276
  br label %if.end2489

if.end2489:                                       ; preds = %if.end2488, %if.end2231
  br label %if.end2490

if.end2490:                                       ; preds = %if.end2489, %if.end2209
  br label %if.end2491

if.end2491:                                       ; preds = %if.end2490, %if.end2182
  br label %if.end2492

if.end2492:                                       ; preds = %if.end2491, %if.end2171
  br label %if.end2493

if.end2493:                                       ; preds = %if.end2492, %if.end2137
  br label %if.end2494

if.end2494:                                       ; preds = %if.end2493, %if.end2125
  br label %if.end2495

if.end2495:                                       ; preds = %if.end2494, %if.then1957
  br label %if.end2496

if.end2496:                                       ; preds = %if.end2495, %if.end1946
  br label %if.end2497

if.end2497:                                       ; preds = %if.end2496, %if.end1776
  br label %if.end2498

if.end2498:                                       ; preds = %if.end2497, %sw.epilog
  br label %if.end2499

if.end2499:                                       ; preds = %if.end2498, %if.end931
  br label %if.end2500

if.end2500:                                       ; preds = %if.end2499, %if.end844
  br label %if.end2501

if.end2501:                                       ; preds = %if.end2500, %if.end721
  br label %if.end2502

if.end2502:                                       ; preds = %if.end2501
  br label %if.end2503

if.end2503:                                       ; preds = %if.end2502, %if.then100
  %1719 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call2504 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1719)
  store %struct.regnode* %call2504, %struct.regnode** %scan, align 8
  br label %while.cond15

while.end2505:                                    ; preds = %if.then2147, %land.end24
  %1720 = load %struct.scan_frame*, %struct.scan_frame** %frame, align 8
  %tobool2506 = icmp ne %struct.scan_frame* %1720, null
  br i1 %tobool2506, label %if.then2507, label %if.end2516

if.then2507:                                      ; preds = %while.end2505
  %1721 = load i32, i32* %depth.addr, align 4
  %sub2508 = sub i32 %1721, 1
  store i32 %sub2508, i32* %depth.addr, align 4
  %1722 = load %struct.scan_frame*, %struct.scan_frame** %frame, align 8
  %last_regnode2509 = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %1722, i32 0, i32 0
  %1723 = load %struct.regnode*, %struct.regnode** %last_regnode2509, align 8
  store %struct.regnode* %1723, %struct.regnode** %last.addr, align 8
  %1724 = load %struct.scan_frame*, %struct.scan_frame** %frame, align 8
  %next_regnode2510 = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %1724, i32 0, i32 1
  %1725 = load %struct.regnode*, %struct.regnode** %next_regnode2510, align 8
  store %struct.regnode* %1725, %struct.regnode** %scan, align 8
  %1726 = load %struct.scan_frame*, %struct.scan_frame** %frame, align 8
  %stopparen2511 = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %1726, i32 0, i32 3
  %1727 = load i32, i32* %stopparen2511, align 4
  store i32 %1727, i32* %stopparen.addr, align 4
  %1728 = load %struct.scan_frame*, %struct.scan_frame** %frame, align 8
  %prev_recursed_depth2512 = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %1728, i32 0, i32 2
  %1729 = load i32, i32* %prev_recursed_depth2512, align 8
  store i32 %1729, i32* %recursed_depth.addr, align 4
  %1730 = load %struct.scan_frame*, %struct.scan_frame** %frame, align 8
  %prev_frame2513 = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %1730, i32 0, i32 6
  %1731 = load %struct.scan_frame*, %struct.scan_frame** %prev_frame2513, align 8
  %1732 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %frame_last2514 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1732, i32 0, i32 43
  store %struct.scan_frame* %1731, %struct.scan_frame** %frame_last2514, align 8
  %1733 = load %struct.scan_frame*, %struct.scan_frame** %frame, align 8
  %this_prev_frame2515 = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %1733, i32 0, i32 5
  %1734 = load %struct.scan_frame*, %struct.scan_frame** %this_prev_frame2515, align 8
  store %struct.scan_frame* %1734, %struct.scan_frame** %frame, align 8
  br label %fake_study_recurse

if.end2516:                                       ; preds = %while.end2505
  br label %finish

finish:                                           ; preds = %if.end2516, %sw.bb
  %1735 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %1736 = load %struct.regnode**, %struct.regnode*** %scanp.addr, align 8
  store %struct.regnode* %1735, %struct.regnode** %1736, align 8
  %1737 = load i32, i32* %is_inf_internal, align 4
  %tobool2517 = icmp ne i32 %1737, 0
  br i1 %tobool2517, label %cond.true2518, label %cond.false2519

cond.true2518:                                    ; preds = %finish
  br label %cond.end2520

cond.false2519:                                   ; preds = %finish
  %1738 = load i64, i64* %delta, align 8
  br label %cond.end2520

cond.end2520:                                     ; preds = %cond.false2519, %cond.true2518
  %cond2521 = phi i64 [ 9223372036854775807, %cond.true2518 ], [ %1738, %cond.false2519 ]
  %1739 = load i64*, i64** %deltap.addr, align 8
  store i64 %cond2521, i64* %1739, align 8
  %1740 = load i32, i32* %flags.addr, align 4
  %and2522 = and i32 %1740, 1024
  %tobool2523 = icmp ne i32 %and2522, 0
  br i1 %tobool2523, label %land.lhs.true2524, label %if.end2530

land.lhs.true2524:                                ; preds = %cond.end2520
  %1741 = load i32, i32* %is_inf, align 4
  %tobool2525 = icmp ne i32 %1741, 0
  br i1 %tobool2525, label %if.then2526, label %if.end2530

if.then2526:                                      ; preds = %land.lhs.true2524
  %1742 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min2527 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1742, i32 0, i32 0
  %1743 = load i64, i64* %pos_min2527, align 8
  %sub2528 = sub nsw i64 9223372036854775807, %1743
  %1744 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta2529 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1744, i32 0, i32 1
  store i64 %sub2528, i64* %pos_delta2529, align 8
  br label %if.end2530

if.end2530:                                       ; preds = %if.then2526, %land.lhs.true2524, %cond.end2520
  %1745 = load i32, i32* %is_par, align 4
  %cmp2531 = icmp sgt i32 %1745, 255
  br i1 %cmp2531, label %if.then2533, label %if.end2534

if.then2533:                                      ; preds = %if.end2530
  store i32 0, i32* %is_par, align 4
  br label %if.end2534

if.end2534:                                       ; preds = %if.then2533, %if.end2530
  %1746 = load i32, i32* %is_par, align 4
  %tobool2535 = icmp ne i32 %1746, 0
  br i1 %tobool2535, label %land.lhs.true2536, label %if.else2546

land.lhs.true2536:                                ; preds = %if.end2534
  %1747 = load i32, i32* %pars, align 4
  %cmp2537 = icmp eq i32 %1747, 1
  br i1 %cmp2537, label %land.lhs.true2539, label %if.else2546

land.lhs.true2539:                                ; preds = %land.lhs.true2536
  %1748 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2540 = icmp ne %struct.scan_data_t* %1748, null
  br i1 %tobool2540, label %if.then2541, label %if.else2546

if.then2541:                                      ; preds = %land.lhs.true2539
  %1749 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2542 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1749, i32 0, i32 16
  %1750 = load i32, i32* %flags2542, align 8
  %or2543 = or i32 %1750, 256
  store i32 %or2543, i32* %flags2542, align 8
  %1751 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2544 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1751, i32 0, i32 16
  %1752 = load i32, i32* %flags2544, align 8
  %and2545 = and i32 %1752, -129
  store i32 %and2545, i32* %flags2544, align 8
  br label %if.end2556

if.else2546:                                      ; preds = %land.lhs.true2539, %land.lhs.true2536, %if.end2534
  %1753 = load i32, i32* %pars, align 4
  %tobool2547 = icmp ne i32 %1753, 0
  br i1 %tobool2547, label %land.lhs.true2548, label %if.end2555

land.lhs.true2548:                                ; preds = %if.else2546
  %1754 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %tobool2549 = icmp ne %struct.scan_data_t* %1754, null
  br i1 %tobool2549, label %if.then2550, label %if.end2555

if.then2550:                                      ; preds = %land.lhs.true2548
  %1755 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2551 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1755, i32 0, i32 16
  %1756 = load i32, i32* %flags2551, align 8
  %or2552 = or i32 %1756, 128
  store i32 %or2552, i32* %flags2551, align 8
  %1757 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2553 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1757, i32 0, i32 16
  %1758 = load i32, i32* %flags2553, align 8
  %and2554 = and i32 %1758, -257
  store i32 %and2554, i32* %flags2553, align 8
  br label %if.end2555

if.end2555:                                       ; preds = %if.then2550, %land.lhs.true2548, %if.else2546
  br label %if.end2556

if.end2556:                                       ; preds = %if.end2555, %if.then2541
  %1759 = load i32, i32* %flags.addr, align 4
  %and2557 = and i32 %1759, 4096
  %tobool2558 = icmp ne i32 %and2557, 0
  br i1 %tobool2558, label %if.then2559, label %if.end2561

if.then2559:                                      ; preds = %if.end2556
  %1760 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1761 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %start_class2560 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1761, i32 0, i32 19
  %1762 = load %struct.regnode_ssc*, %struct.regnode_ssc** %start_class2560, align 8
  %1763 = load %struct.regnode_ssc*, %struct.regnode_ssc** %and_withp.addr, align 8
  %1764 = bitcast %struct.regnode_ssc* %1763 to %struct.regnode_charclass*
  call void @S_ssc_and(%struct.RExC_state_t* %1760, %struct.regnode_ssc* %1762, %struct.regnode_charclass* %1764)
  br label %if.end2561

if.end2561:                                       ; preds = %if.then2559, %if.end2556
  %1765 = load i32, i32* %flags.addr, align 4
  %and2562 = and i32 %1765, 16384
  %tobool2563 = icmp ne i32 %and2562, 0
  br i1 %tobool2563, label %if.then2564, label %if.end2567

if.then2564:                                      ; preds = %if.end2561
  %1766 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags2565 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %1766, i32 0, i32 16
  %1767 = load i32, i32* %flags2565, align 8
  %or2566 = or i32 %1767, 16384
  store i32 %or2566, i32* %flags2565, align 8
  br label %if.end2567

if.end2567:                                       ; preds = %if.then2564, %if.end2561
  %1768 = load i64, i64* %min, align 8
  %1769 = load i64, i64* %stopmin, align 8
  %cmp2568 = icmp slt i64 %1768, %1769
  br i1 %cmp2568, label %cond.true2570, label %cond.false2571

cond.true2570:                                    ; preds = %if.end2567
  %1770 = load i64, i64* %min, align 8
  br label %cond.end2572

cond.false2571:                                   ; preds = %if.end2567
  %1771 = load i64, i64* %stopmin, align 8
  br label %cond.end2572

cond.end2572:                                     ; preds = %cond.false2571, %cond.true2570
  %cond2573 = phi i64 [ %1770, %cond.true2570 ], [ %1771, %cond.false2571 ]
  store i64 %cond2573, i64* %final_minlen, align 8
  %1772 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen2574 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1772, i32 0, i32 16
  %1773 = load i32, i32* %seen2574, align 8
  %and2575 = and i32 %1773, 4096
  %tobool2576 = icmp ne i32 %and2575, 0
  br i1 %tobool2576, label %if.end2593, label %if.then2577

if.then2577:                                      ; preds = %cond.end2572
  %1774 = load i64, i64* %final_minlen, align 8
  %1775 = load i64, i64* %delta, align 8
  %sub2578 = sub nsw i64 9223372036854775807, %1775
  %cmp2579 = icmp sgt i64 %1774, %sub2578
  br i1 %cmp2579, label %if.then2581, label %if.else2583

if.then2581:                                      ; preds = %if.then2577
  %1776 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %maxlen2582 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1776, i32 0, i32 41
  store i64 9223372036854775807, i64* %maxlen2582, align 8
  br label %if.end2592

if.else2583:                                      ; preds = %if.then2577
  %1777 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %maxlen2584 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1777, i32 0, i32 41
  %1778 = load i64, i64* %maxlen2584, align 8
  %1779 = load i64, i64* %final_minlen, align 8
  %1780 = load i64, i64* %delta, align 8
  %add2585 = add nsw i64 %1779, %1780
  %cmp2586 = icmp slt i64 %1778, %add2585
  br i1 %cmp2586, label %if.then2588, label %if.end2591

if.then2588:                                      ; preds = %if.else2583
  %1781 = load i64, i64* %final_minlen, align 8
  %1782 = load i64, i64* %delta, align 8
  %add2589 = add nsw i64 %1781, %1782
  %1783 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %maxlen2590 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1783, i32 0, i32 41
  store i64 %add2589, i64* %maxlen2590, align 8
  br label %if.end2591

if.end2591:                                       ; preds = %if.then2588, %if.else2583
  br label %if.end2592

if.end2592:                                       ; preds = %if.end2591, %if.then2581
  br label %if.end2593

if.end2593:                                       ; preds = %if.end2592, %cond.end2572
  %1784 = load i64, i64* %final_minlen, align 8
  ret i64 %1784
}

declare dso_local void @Perl_pop_scope() #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_scan_commit(%struct.RExC_state_t* %pRExC_state, %struct.scan_data_t* %data, i64* %minlenp, i32 %is_inf) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %data.addr = alloca %struct.scan_data_t*, align 8
  %minlenp.addr = alloca i64*, align 8
  %is_inf.addr = alloca i32, align 4
  %l = alloca i64, align 8
  %old_l = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %mg = alloca %struct.magic*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.scan_data_t* %data, %struct.scan_data_t** %data.addr, align 8
  store i64* %minlenp, i64** %minlenp.addr, align 8
  store i32 %is_inf, i32* %is_inf.addr, align 4
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 25
  %1 = load i32, i32* %utf8, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %cond.true1, label %cond.false2

cond.false:                                       ; preds = %entry
  br i1 false, label %cond.true1, label %cond.false2

cond.true1:                                       ; preds = %cond.false, %cond.true
  %2 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %2, i32 0, i32 2
  %3 = load %struct.sv*, %struct.sv** %last_found, align 8
  %call = call i64 @Perl_sv_len_utf8(%struct.sv* %3)
  br label %cond.end

cond.false2:                                      ; preds = %cond.false, %cond.true
  %4 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found3 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %4, i32 0, i32 2
  %5 = load %struct.sv*, %struct.sv** %last_found3, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 0
  %6 = load i8*, i8** %sv_any, align 8
  %7 = bitcast i8* %6 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %7, i32 0, i32 2
  %8 = load i64, i64* %xpv_cur, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false2, %cond.true1
  %cond = phi i64 [ %call, %cond.true1 ], [ %8, %cond.false2 ]
  store i64 %cond, i64* %l, align 8
  %9 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf84 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %9, i32 0, i32 25
  %10 = load i32, i32* %utf84, align 8
  %tobool5 = icmp ne i32 %10, 0
  br i1 %tobool5, label %cond.true6, label %cond.false7

cond.true6:                                       ; preds = %cond.end
  br i1 true, label %cond.true8, label %cond.false10

cond.false7:                                      ; preds = %cond.end
  br i1 false, label %cond.true8, label %cond.false10

cond.true8:                                       ; preds = %cond.false7, %cond.true6
  %11 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %11, i32 0, i32 6
  %12 = load %struct.sv**, %struct.sv*** %longest, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %call9 = call i64 @Perl_sv_len_utf8(%struct.sv* %13)
  br label %cond.end14

cond.false10:                                     ; preds = %cond.false7, %cond.true6
  %14 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest11 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %14, i32 0, i32 6
  %15 = load %struct.sv**, %struct.sv*** %longest11, align 8
  %16 = load %struct.sv*, %struct.sv** %15, align 8
  %sv_any12 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any12, align 8
  %18 = bitcast i8* %17 to %struct.xpv*
  %xpv_cur13 = getelementptr inbounds %struct.xpv, %struct.xpv* %18, i32 0, i32 2
  %19 = load i64, i64* %xpv_cur13, align 8
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false10, %cond.true8
  %cond15 = phi i64 [ %call9, %cond.true8 ], [ %19, %cond.false10 ]
  store i64 %cond15, i64* %old_l, align 8
  %20 = load i64, i64* %l, align 8
  %21 = load i64, i64* %old_l, align 8
  %cmp = icmp uge i64 %20, %21
  br i1 %cmp, label %land.lhs.true, label %if.end97

land.lhs.true:                                    ; preds = %cond.end14
  %22 = load i64, i64* %l, align 8
  %23 = load i64, i64* %old_l, align 8
  %cmp16 = icmp ugt i64 %22, %23
  br i1 %cmp16, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %24 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %24, i32 0, i32 16
  %25 = load i32, i32* %flags, align 8
  %and = and i32 %25, 3
  %tobool17 = icmp ne i32 %and, 0
  br i1 %tobool17, label %if.then, label %if.end97

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  br label %do.body

do.body:                                          ; preds = %if.then
  %26 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest18 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %26, i32 0, i32 6
  %27 = load %struct.sv**, %struct.sv*** %longest18, align 8
  %28 = load %struct.sv*, %struct.sv** %27, align 8
  %29 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found19 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %29, i32 0, i32 2
  %30 = load %struct.sv*, %struct.sv** %last_found19, align 8
  %cmp20 = icmp ne %struct.sv* %28, %30
  br i1 %cmp20, label %cond.true21, label %cond.false22

cond.true21:                                      ; preds = %do.body
  br i1 true, label %if.then23, label %if.end35

cond.false22:                                     ; preds = %do.body
  br i1 false, label %if.then23, label %if.end35

if.then23:                                        ; preds = %cond.false22, %cond.true21
  %31 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest24 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %31, i32 0, i32 6
  %32 = load %struct.sv**, %struct.sv*** %longest24, align 8
  %33 = load %struct.sv*, %struct.sv** %32, align 8
  %34 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found25 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %34, i32 0, i32 2
  %35 = load %struct.sv*, %struct.sv** %last_found25, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %33, %struct.sv* %35, i32 1538)
  br label %do.body26

do.body26:                                        ; preds = %if.then23
  %36 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest27 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %36, i32 0, i32 6
  %37 = load %struct.sv**, %struct.sv*** %longest27, align 8
  %38 = load %struct.sv*, %struct.sv** %37, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags, align 4
  %and28 = and i32 %39, 4194304
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %cond.true30, label %cond.false31

cond.true30:                                      ; preds = %do.body26
  br i1 true, label %if.then32, label %if.end

cond.false31:                                     ; preds = %do.body26
  br i1 false, label %if.then32, label %if.end

if.then32:                                        ; preds = %cond.false31, %cond.true30
  %40 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest33 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %40, i32 0, i32 6
  %41 = load %struct.sv**, %struct.sv*** %longest33, align 8
  %42 = load %struct.sv*, %struct.sv** %41, align 8
  %call34 = call i32 @Perl_mg_set(%struct.sv* %42)
  br label %if.end

if.end:                                           ; preds = %if.then32, %cond.false31, %cond.true30
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end35

if.end35:                                         ; preds = %do.end, %cond.false22, %cond.true21
  br label %do.end36

do.end36:                                         ; preds = %if.end35
  %43 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest37 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %43, i32 0, i32 6
  %44 = load %struct.sv**, %struct.sv*** %longest37, align 8
  %45 = load %struct.sv*, %struct.sv** %44, align 8
  %46 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %longest_fixed = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %46, i32 0, i32 7
  %47 = load %struct.sv*, %struct.sv** %longest_fixed, align 8
  %cmp38 = icmp eq %struct.sv* %45, %47
  br i1 %cmp38, label %if.then39, label %if.else55

if.then39:                                        ; preds = %do.end36
  %48 = load i64, i64* %l, align 8
  %tobool40 = icmp ne i64 %48, 0
  br i1 %tobool40, label %cond.true41, label %cond.false42

cond.true41:                                      ; preds = %if.then39
  %49 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %49, i32 0, i32 4
  %50 = load i64, i64* %last_start_min, align 8
  br label %cond.end43

cond.false42:                                     ; preds = %if.then39
  %51 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %51, i32 0, i32 0
  %52 = load i64, i64* %pos_min, align 8
  br label %cond.end43

cond.end43:                                       ; preds = %cond.false42, %cond.true41
  %cond44 = phi i64 [ %50, %cond.true41 ], [ %52, %cond.false42 ]
  %53 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %offset_fixed = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %53, i32 0, i32 8
  store i64 %cond44, i64* %offset_fixed, align 8
  %54 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags45 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %54, i32 0, i32 16
  %55 = load i32, i32* %flags45, align 8
  %and46 = and i32 %55, 3
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %if.then48, label %if.else

if.then48:                                        ; preds = %cond.end43
  %56 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags49 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %56, i32 0, i32 16
  %57 = load i32, i32* %flags49, align 8
  %and50 = and i32 %57, 3
  %shl = shl i32 %and50, 2
  %58 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags51 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %58, i32 0, i32 16
  %59 = load i32, i32* %flags51, align 8
  %or = or i32 %59, %shl
  store i32 %or, i32* %flags51, align 8
  br label %if.end54

if.else:                                          ; preds = %cond.end43
  %60 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags52 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %60, i32 0, i32 16
  %61 = load i32, i32* %flags52, align 8
  %and53 = and i32 %61, -13
  store i32 %and53, i32* %flags52, align 8
  br label %if.end54

if.end54:                                         ; preds = %if.else, %if.then48
  %62 = load i64*, i64** %minlenp.addr, align 8
  %63 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %minlen_fixed = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %63, i32 0, i32 9
  store i64* %62, i64** %minlen_fixed, align 8
  %64 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %lookbehind_fixed = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %64, i32 0, i32 10
  store i32 0, i32* %lookbehind_fixed, align 8
  br label %if.end96

if.else55:                                        ; preds = %do.end36
  %65 = load i64, i64* %l, align 8
  %tobool56 = icmp ne i64 %65, 0
  br i1 %tobool56, label %cond.true57, label %cond.false59

cond.true57:                                      ; preds = %if.else55
  %66 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_min58 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %66, i32 0, i32 4
  %67 = load i64, i64* %last_start_min58, align 8
  br label %cond.end61

cond.false59:                                     ; preds = %if.else55
  %68 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min60 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %68, i32 0, i32 0
  %69 = load i64, i64* %pos_min60, align 8
  br label %cond.end61

cond.end61:                                       ; preds = %cond.false59, %cond.true57
  %cond62 = phi i64 [ %67, %cond.true57 ], [ %69, %cond.false59 ]
  %70 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %offset_float_min = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %70, i32 0, i32 12
  store i64 %cond62, i64* %offset_float_min, align 8
  %71 = load i64, i64* %l, align 8
  %tobool63 = icmp ne i64 %71, 0
  br i1 %tobool63, label %cond.true64, label %cond.false65

cond.true64:                                      ; preds = %cond.end61
  %72 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_start_max = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %72, i32 0, i32 5
  %73 = load i64, i64* %last_start_max, align 8
  br label %cond.end74

cond.false65:                                     ; preds = %cond.end61
  %74 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %74, i32 0, i32 1
  %75 = load i64, i64* %pos_delta, align 8
  %76 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min66 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %76, i32 0, i32 0
  %77 = load i64, i64* %pos_min66, align 8
  %sub = sub nsw i64 9223372036854775807, %77
  %cmp67 = icmp sgt i64 %75, %sub
  br i1 %cmp67, label %cond.true68, label %cond.false69

cond.true68:                                      ; preds = %cond.false65
  br label %cond.end72

cond.false69:                                     ; preds = %cond.false65
  %78 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_min70 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %78, i32 0, i32 0
  %79 = load i64, i64* %pos_min70, align 8
  %80 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %pos_delta71 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %80, i32 0, i32 1
  %81 = load i64, i64* %pos_delta71, align 8
  %add = add nsw i64 %79, %81
  br label %cond.end72

cond.end72:                                       ; preds = %cond.false69, %cond.true68
  %cond73 = phi i64 [ 9223372036854775807, %cond.true68 ], [ %add, %cond.false69 ]
  br label %cond.end74

cond.end74:                                       ; preds = %cond.end72, %cond.true64
  %cond75 = phi i64 [ %73, %cond.true64 ], [ %cond73, %cond.end72 ]
  %82 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %offset_float_max = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %82, i32 0, i32 13
  store i64 %cond75, i64* %offset_float_max, align 8
  %83 = load i32, i32* %is_inf.addr, align 4
  %tobool76 = icmp ne i32 %83, 0
  br i1 %tobool76, label %if.then80, label %lor.lhs.false77

lor.lhs.false77:                                  ; preds = %cond.end74
  %84 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %offset_float_max78 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %84, i32 0, i32 13
  %85 = load i64, i64* %offset_float_max78, align 8
  %cmp79 = icmp ugt i64 %85, 9223372036854775807
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %lor.lhs.false77, %cond.end74
  %86 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %offset_float_max81 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %86, i32 0, i32 13
  store i64 9223372036854775807, i64* %offset_float_max81, align 8
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %lor.lhs.false77
  %87 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags83 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %87, i32 0, i32 16
  %88 = load i32, i32* %flags83, align 8
  %and84 = and i32 %88, 3
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %if.then86, label %if.else92

if.then86:                                        ; preds = %if.end82
  %89 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags87 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %89, i32 0, i32 16
  %90 = load i32, i32* %flags87, align 8
  %and88 = and i32 %90, 3
  %shl89 = shl i32 %and88, 4
  %91 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags90 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %91, i32 0, i32 16
  %92 = load i32, i32* %flags90, align 8
  %or91 = or i32 %92, %shl89
  store i32 %or91, i32* %flags90, align 8
  br label %if.end95

if.else92:                                        ; preds = %if.end82
  %93 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags93 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %93, i32 0, i32 16
  %94 = load i32, i32* %flags93, align 8
  %and94 = and i32 %94, -49
  store i32 %and94, i32* %flags93, align 8
  br label %if.end95

if.end95:                                         ; preds = %if.else92, %if.then86
  %95 = load i64*, i64** %minlenp.addr, align 8
  %96 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %minlen_float = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %96, i32 0, i32 14
  store i64* %95, i64** %minlen_float, align 8
  %97 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %lookbehind_float = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %97, i32 0, i32 15
  store i64 0, i64* %lookbehind_float, align 8
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.end54
  br label %if.end97

if.end97:                                         ; preds = %if.end96, %lor.lhs.false, %cond.end14
  br label %do.body98

do.body98:                                        ; preds = %if.end97
  %98 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found99 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %98, i32 0, i32 2
  %99 = load %struct.sv*, %struct.sv** %last_found99, align 8
  %sv_any100 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 0
  %100 = load i8*, i8** %sv_any100, align 8
  %101 = bitcast i8* %100 to %struct.xpv*
  %xpv_cur101 = getelementptr inbounds %struct.xpv, %struct.xpv* %101, i32 0, i32 2
  store i64 0, i64* %xpv_cur101, align 8
  br label %do.end102

do.end102:                                        ; preds = %do.body98
  %102 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_found103 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %102, i32 0, i32 2
  %103 = load %struct.sv*, %struct.sv** %last_found103, align 8
  store %struct.sv* %103, %struct.sv** %sv, align 8
  %104 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags104 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 2
  %105 = load i32, i32* %sv_flags104, align 4
  %and105 = and i32 %105, 536870912
  %tobool106 = icmp ne i32 %and105, 0
  br i1 %tobool106, label %land.lhs.true107, label %if.end116

land.lhs.true107:                                 ; preds = %do.end102
  %106 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags108 = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 2
  %107 = load i32, i32* %sv_flags108, align 4
  %and109 = and i32 %107, 14680064
  %tobool110 = icmp ne i32 %and109, 0
  br i1 %tobool110, label %if.then111, label %if.end116

if.then111:                                       ; preds = %land.lhs.true107
  %108 = load %struct.sv*, %struct.sv** %sv, align 8
  %call112 = call %struct.magic* @Perl_mg_find(%struct.sv* %108, i32 119)
  store %struct.magic* %call112, %struct.magic** %mg, align 8
  %109 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool113 = icmp ne %struct.magic* %109, null
  br i1 %tobool113, label %if.then114, label %if.end115

if.then114:                                       ; preds = %if.then111
  %110 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %110, i32 0, i32 5
  store i64 0, i64* %mg_len, align 8
  br label %if.end115

if.end115:                                        ; preds = %if.then114, %if.then111
  br label %if.end116

if.end116:                                        ; preds = %if.end115, %land.lhs.true107, %do.end102
  %111 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %last_end = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %111, i32 0, i32 3
  store i64 -1, i64* %last_end, align 8
  %112 = load %struct.scan_data_t*, %struct.scan_data_t** %data.addr, align 8
  %flags117 = getelementptr inbounds %struct.scan_data_t, %struct.scan_data_t* %112, i32 0, i32 16
  %113 = load i32, i32* %flags117, align 8
  %and118 = and i32 %113, -4
  store i32 %and118, i32* %flags117, align 8
  ret void
}

declare dso_local i64 @Perl_sv_len_utf8(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_setup_longest(%struct.RExC_state_t* %pRExC_state, %struct.sv* %sv_longest, %struct.sv** %rx_utf8, %struct.sv** %rx_substr, i64* %rx_end_shift, i64 %lookbehind, i64 %offset, i64* %minlen, i64 %longest_length, i1 zeroext %eol, i1 zeroext %meol) #0 {
entry:
  %retval = alloca i1, align 1
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %sv_longest.addr = alloca %struct.sv*, align 8
  %rx_utf8.addr = alloca %struct.sv**, align 8
  %rx_substr.addr = alloca %struct.sv**, align 8
  %rx_end_shift.addr = alloca i64*, align 8
  %lookbehind.addr = alloca i64, align 8
  %offset.addr = alloca i64, align 8
  %minlen.addr = alloca i64*, align 8
  %longest_length.addr = alloca i64, align 8
  %eol.addr = alloca i8, align 1
  %meol.addr = alloca i8, align 1
  %t = alloca i32, align 4
  %ml = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.sv* %sv_longest, %struct.sv** %sv_longest.addr, align 8
  store %struct.sv** %rx_utf8, %struct.sv*** %rx_utf8.addr, align 8
  store %struct.sv** %rx_substr, %struct.sv*** %rx_substr.addr, align 8
  store i64* %rx_end_shift, i64** %rx_end_shift.addr, align 8
  store i64 %lookbehind, i64* %lookbehind.addr, align 8
  store i64 %offset, i64* %offset.addr, align 8
  store i64* %minlen, i64** %minlen.addr, align 8
  store i64 %longest_length, i64* %longest_length.addr, align 8
  %frombool = zext i1 %eol to i8
  store i8 %frombool, i8* %eol.addr, align 1
  %frombool1 = zext i1 %meol to i8
  store i8 %frombool1, i8* %meol.addr, align 1
  %0 = load i64, i64* %longest_length.addr, align 8
  %tobool = icmp ne i64 %0, 0
  br i1 %tobool, label %lor.lhs.false6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8, i8* %eol.addr, align 1
  %tobool2 = trunc i8 %1 to i1
  br i1 %tobool2, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load i8, i8* %meol.addr, align 1
  %tobool3 = trunc i8 %2 to i1
  br i1 %tobool3, label %lor.lhs.false4, label %lor.lhs.false6

lor.lhs.false4:                                   ; preds = %land.lhs.true
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %3, i32 0, i32 0
  %4 = load i32, i32* %flags, align 8
  %and = and i32 %4, 1
  %tobool5 = icmp ne i32 %and, 0
  br i1 %tobool5, label %lor.lhs.false6, label %if.then

lor.lhs.false6:                                   ; preds = %lor.lhs.false4, %land.lhs.true, %entry
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 16
  %6 = load i32, i32* %seen, align 8
  %and7 = and i32 %6, 1024
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false6
  %7 = load %struct.sv*, %struct.sv** %sv_longest.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags, align 4
  %and9 = and i32 %8, 536870912
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end
  %9 = load %struct.sv*, %struct.sv** %sv_longest.addr, align 8
  %10 = load %struct.sv**, %struct.sv*** %rx_utf8.addr, align 8
  store %struct.sv* %9, %struct.sv** %10, align 8
  %11 = load %struct.sv**, %struct.sv*** %rx_substr.addr, align 8
  store %struct.sv* null, %struct.sv** %11, align 8
  br label %if.end12

if.else:                                          ; preds = %if.end
  %12 = load %struct.sv*, %struct.sv** %sv_longest.addr, align 8
  %13 = load %struct.sv**, %struct.sv*** %rx_substr.addr, align 8
  store %struct.sv* %12, %struct.sv** %13, align 8
  %14 = load %struct.sv**, %struct.sv*** %rx_utf8.addr, align 8
  store %struct.sv* null, %struct.sv** %14, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.then11
  %15 = load i64*, i64** %minlen.addr, align 8
  %tobool13 = icmp ne i64* %15, null
  br i1 %tobool13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end12
  %16 = load i64*, i64** %minlen.addr, align 8
  %17 = load i64, i64* %16, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end12
  %18 = load i64, i64* %longest_length.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %17, %cond.true ], [ %18, %cond.false ]
  store i64 %cond, i64* %ml, align 8
  %19 = load i64, i64* %ml, align 8
  %20 = load i64, i64* %offset.addr, align 8
  %sub = sub nsw i64 %19, %20
  %21 = load i64, i64* %longest_length.addr, align 8
  %sub14 = sub i64 %sub, %21
  %22 = load %struct.sv*, %struct.sv** %sv_longest.addr, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %23, -1073741824
  %cmp = icmp eq i32 %and16, -1073741824
  %conv = zext i1 %cmp to i32
  %cmp17 = icmp ne i32 %conv, 0
  %conv18 = zext i1 %cmp17 to i32
  %conv19 = sext i32 %conv18 to i64
  %add = add i64 %sub14, %conv19
  %24 = load i64, i64* %lookbehind.addr, align 8
  %add20 = add i64 %add, %24
  %25 = load i64*, i64** %rx_end_shift.addr, align 8
  store i64 %add20, i64* %25, align 8
  %26 = load i8, i8* %eol.addr, align 1
  %tobool21 = trunc i8 %26 to i1
  br i1 %tobool21, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.end
  %27 = load i8, i8* %meol.addr, align 1
  %tobool23 = trunc i8 %27 to i1
  br i1 %tobool23, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %land.rhs
  %28 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags24 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %28, i32 0, i32 0
  %29 = load i32, i32* %flags24, align 8
  %and25 = and i32 %29, 1
  %tobool26 = icmp ne i32 %and25, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %30 = phi i1 [ true, %land.rhs ], [ %tobool26, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %cond.end
  %31 = phi i1 [ false, %cond.end ], [ %30, %lor.end ]
  %land.ext = zext i1 %31 to i32
  store i32 %land.ext, i32* %t, align 4
  %32 = load %struct.sv*, %struct.sv** %sv_longest.addr, align 8
  %33 = load i32, i32* %t, align 4
  %tobool27 = icmp ne i32 %33, 0
  %34 = zext i1 %tobool27 to i64
  %cond28 = select i1 %tobool27, i32 15, i32 0
  call void @Perl_fbm_compile(%struct.sv* %32, i32 %cond28)
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %land.end, %if.then
  %35 = load i1, i1* %retval, align 1
  ret i1 %35
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_is_ssc_worth_it(%struct.RExC_state_t* %pRExC_state, %struct.regnode_ssc* %ssc) #0 {
entry:
  %retval = alloca i1, align 1
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %ssc.addr = alloca %struct.regnode_ssc*, align 8
  %max_match = alloca i32, align 4
  %count = alloca i32, align 4
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode_ssc* %ssc, %struct.regnode_ssc** %ssc.addr, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 0
  %1 = load i32, i32* %flags, align 8
  %call = call i32 @get_regex_charset(i32 %1)
  %cmp = icmp eq i32 %call, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end9

cond.false:                                       ; preds = %entry
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 0
  %3 = load i32, i32* %flags1, align 8
  %call2 = call i32 @get_regex_charset(i32 %3)
  %cmp3 = icmp eq i32 %call2, 2
  br i1 %cmp3, label %cond.false5, label %cond.true4

cond.true4:                                       ; preds = %cond.false
  br label %cond.end

cond.false5:                                      ; preds = %cond.false
  %4 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %4, i32 0, i32 6
  %5 = load %struct.sv*, %struct.sv** %invlist, align 8
  %call6 = call i64 @S_invlist_highest(%struct.sv* %5)
  %cmp7 = icmp ult i64 %call6, 256
  %6 = zext i1 %cmp7 to i64
  %cond = select i1 %cmp7, i32 127, i32 56402
  br label %cond.end

cond.end:                                         ; preds = %cond.false5, %cond.true4
  %cond8 = phi i32 [ 63, %cond.true4 ], [ %cond, %cond.false5 ]
  br label %cond.end9

cond.end9:                                        ; preds = %cond.end, %cond.true
  %cond10 = phi i32 [ 127, %cond.true ], [ %cond8, %cond.end ]
  store i32 %cond10, i32* %max_match, align 4
  store i32 0, i32* %count, align 4
  %7 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist11 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %7, i32 0, i32 6
  %8 = load %struct.sv*, %struct.sv** %invlist11, align 8
  call void @S_invlist_iterinit(%struct.sv* %8)
  br label %while.cond

while.cond:                                       ; preds = %if.end31, %cond.end9
  %9 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist12 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %9, i32 0, i32 6
  %10 = load %struct.sv*, %struct.sv** %invlist12, align 8
  %call13 = call zeroext i1 @S_invlist_iternext(%struct.sv* %10, i64* %start, i64* %end)
  br i1 %call13, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags14 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %11, i32 0, i32 0
  %12 = load i32, i32* %flags14, align 8
  %call15 = call i32 @get_regex_charset(i32 %12)
  %cmp16 = icmp eq i32 %call15, 2
  br i1 %cmp16, label %if.end24, label %if.then

if.then:                                          ; preds = %while.body
  %13 = load i64, i64* %start, align 8
  %cmp17 = icmp ugt i64 %13, 255
  br i1 %cmp17, label %if.then18, label %if.end

if.then18:                                        ; preds = %if.then
  br label %while.end

if.end:                                           ; preds = %if.then
  %14 = load i64, i64* %end, align 8
  %cmp19 = icmp ult i64 %14, 255
  br i1 %cmp19, label %cond.true20, label %cond.false21

cond.true20:                                      ; preds = %if.end
  %15 = load i64, i64* %end, align 8
  br label %cond.end22

cond.false21:                                     ; preds = %if.end
  br label %cond.end22

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond23 = phi i64 [ %15, %cond.true20 ], [ 255, %cond.false21 ]
  store i64 %cond23, i64* %end, align 8
  br label %if.end24

if.end24:                                         ; preds = %cond.end22, %while.body
  %16 = load i64, i64* %end, align 8
  %17 = load i64, i64* %start, align 8
  %sub = sub i64 %16, %17
  %add = add i64 %sub, 1
  %18 = load i32, i32* %count, align 4
  %conv = zext i32 %18 to i64
  %add25 = add i64 %conv, %add
  %conv26 = trunc i64 %add25 to i32
  store i32 %conv26, i32* %count, align 4
  %19 = load i32, i32* %count, align 4
  %20 = load i32, i32* %max_match, align 4
  %cmp27 = icmp ugt i32 %19, %20
  br i1 %cmp27, label %if.then29, label %if.end31

if.then29:                                        ; preds = %if.end24
  %21 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist30 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %21, i32 0, i32 6
  %22 = load %struct.sv*, %struct.sv** %invlist30, align 8
  call void @S_invlist_iterfinish(%struct.sv* %22)
  store i1 false, i1* %retval, align 1
  br label %return

if.end31:                                         ; preds = %if.end24
  br label %while.cond

while.end:                                        ; preds = %if.then18, %while.cond
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %while.end, %if.then29
  %23 = load i1, i1* %retval, align 1
  ret i1 %23
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_add_data(%struct.RExC_state_t* %pRExC_state, i8* %s, i32 %n) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %s.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  %count = alloca i32, align 4
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 5
  %1 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi, align 8
  %data = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %1, i32 0, i32 3
  %2 = load %struct.reg_data*, %struct.reg_data** %data, align 8
  %tobool = icmp ne %struct.reg_data* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi1 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %3, i32 0, i32 5
  %4 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi1, align 8
  %data2 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %4, i32 0, i32 3
  %5 = load %struct.reg_data*, %struct.reg_data** %data2, align 8
  %count3 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %5, i32 0, i32 0
  %6 = load i32, i32* %count3, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %6, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %count, align 4
  %7 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi4 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %7, i32 0, i32 5
  %8 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi4, align 8
  %data5 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %8, i32 0, i32 3
  %9 = load %struct.reg_data*, %struct.reg_data** %data5, align 8
  %10 = bitcast %struct.reg_data* %9 to i8*
  %11 = load i32, i32* %count, align 4
  %12 = load i32, i32* %n.addr, align 4
  %add = add i32 %11, %12
  %sub = sub i32 %add, 1
  %conv = zext i32 %sub to i64
  %mul = mul i64 8, %conv
  %add6 = add i64 24, %mul
  %mul7 = mul i64 %add6, 1
  %call = call i8* @Perl_safesysrealloc(i8* %10, i64 %mul7)
  %13 = bitcast i8* %call to %struct.reg_data*
  %14 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %14, i32 0, i32 5
  %15 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi8, align 8
  %data9 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %15, i32 0, i32 3
  store %struct.reg_data* %13, %struct.reg_data** %data9, align 8
  %16 = load i32, i32* %count, align 4
  %tobool10 = icmp ne i32 %16, 0
  br i1 %tobool10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %17 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi11 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %17, i32 0, i32 5
  %18 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi11, align 8
  %data12 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %18, i32 0, i32 3
  %19 = load %struct.reg_data*, %struct.reg_data** %data12, align 8
  %what = getelementptr inbounds %struct.reg_data, %struct.reg_data* %19, i32 0, i32 1
  %20 = load i8*, i8** %what, align 8
  %21 = load i32, i32* %count, align 4
  %22 = load i32, i32* %n.addr, align 4
  %add13 = add i32 %21, %22
  %conv14 = zext i32 %add13 to i64
  %mul15 = mul i64 %conv14, 1
  %call16 = call i8* @Perl_safesysrealloc(i8* %20, i64 %mul15)
  %23 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi17 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %23, i32 0, i32 5
  %24 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi17, align 8
  %data18 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %24, i32 0, i32 3
  %25 = load %struct.reg_data*, %struct.reg_data** %data18, align 8
  %what19 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %25, i32 0, i32 1
  store i8* %call16, i8** %what19, align 8
  br label %if.end

if.else:                                          ; preds = %cond.end
  %26 = load i32, i32* %n.addr, align 4
  %conv20 = zext i32 %26 to i64
  %mul21 = mul i64 %conv20, 1
  %call22 = call i8* @Perl_safesysmalloc(i64 %mul21)
  %27 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi23 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %27, i32 0, i32 5
  %28 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi23, align 8
  %data24 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %28, i32 0, i32 3
  %29 = load %struct.reg_data*, %struct.reg_data** %data24, align 8
  %what25 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %29, i32 0, i32 1
  store i8* %call22, i8** %what25, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %30 = load i32, i32* %count, align 4
  %31 = load i32, i32* %n.addr, align 4
  %add26 = add i32 %30, %31
  %32 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi27 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %32, i32 0, i32 5
  %33 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi27, align 8
  %data28 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %33, i32 0, i32 3
  %34 = load %struct.reg_data*, %struct.reg_data** %data28, align 8
  %count29 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %34, i32 0, i32 0
  store i32 %add26, i32* %count29, align 8
  %35 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi30 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %35, i32 0, i32 5
  %36 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi30, align 8
  %data31 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %36, i32 0, i32 3
  %37 = load %struct.reg_data*, %struct.reg_data** %data31, align 8
  %what32 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %37, i32 0, i32 1
  %38 = load i8*, i8** %what32, align 8
  %39 = load i32, i32* %count, align 4
  %idx.ext = zext i32 %39 to i64
  %add.ptr = getelementptr inbounds i8, i8* %38, i64 %idx.ext
  %40 = load i8*, i8** %s.addr, align 8
  %41 = load i32, i32* %n.addr, align 4
  %conv33 = zext i32 %41 to i64
  %mul34 = mul i64 %conv33, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 1 %40, i64 %mul34, i1 false)
  %42 = load i32, i32* %count, align 4
  ret i32 %42
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_ssc_finalize(%struct.RExC_state_t* %pRExC_state, %struct.regnode_ssc* %ssc) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %ssc.addr = alloca %struct.regnode_ssc*, align 8
  %invlist = alloca %struct.sv*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode_ssc* %ssc, %struct.regnode_ssc** %ssc.addr, align 8
  %0 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist1 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %0, i32 0, i32 6
  %1 = load %struct.sv*, %struct.sv** %invlist1, align 8
  %call = call %struct.sv* @S_invlist_clone(%struct.sv* %1)
  store %struct.sv* %call, %struct.sv** %invlist, align 8
  %2 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %3 = bitcast %struct.regnode_ssc* %2 to %struct.regnode*
  call void @S_populate_ANYOF_from_invlist(%struct.regnode* %3, %struct.sv** %invlist)
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %5 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %6 = bitcast %struct.regnode_ssc* %5 to %struct.regnode*
  %7 = load %struct.sv*, %struct.sv** %invlist, align 8
  call void @S_set_ANYOF_arg(%struct.RExC_state_t* %4, %struct.regnode* %6, %struct.sv* %7, %struct.sv* null, %struct.sv* null, %struct.sv* null, i1 zeroext false)
  %8 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist2 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %8, i32 0, i32 6
  store %struct.sv* null, %struct.sv** %invlist2, align 8
  %9 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %classflags = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %9, i32 0, i32 5
  %10 = load i32, i32* %classflags, align 8
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %11 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %flags = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %11, i32 0, i32 0
  %12 = load i8, i8* %flags, align 8
  %conv = zext i8 %12 to i32
  %or = or i32 %conv, 8
  %conv3 = trunc i32 %or to i8
  store i8 %conv3, i8* %flags, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_reg_named_buff_fetch(%struct.p5rx* %r, %struct.sv* %namesv, i32 %flags) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %r.addr = alloca %struct.p5rx*, align 8
  %namesv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %retarray = alloca %struct.av*, align 8
  %ret = alloca %struct.sv*, align 8
  %rx = alloca %struct.regexp*, align 8
  %he_str = alloca %struct.he*, align 8
  %i = alloca i64, align 8
  %sv_dat = alloca %struct.sv*, align 8
  %nums = alloca i32*, align 8
  store %struct.p5rx* %r, %struct.p5rx** %r.addr, align 8
  store %struct.sv* %namesv, %struct.sv** %namesv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.av* null, %struct.av** %retarray, align 8
  %0 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %call = call %struct.regexp* @S_ReANY(%struct.p5rx* %0)
  store %struct.regexp* %call, %struct.regexp** %rx, align 8
  %1 = load i32, i32* %flags.addr, align 4
  %and = and i32 %1, 512
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call %struct.sv* @Perl_newSV_type(i32 11)
  %2 = bitcast %struct.sv* %call1 to i8*
  %3 = bitcast i8* %2 to %struct.av*
  store %struct.av* %3, %struct.av** %retarray, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %tobool2 = icmp ne %struct.regexp* %4, null
  br i1 %tobool2, label %land.lhs.true, label %if.end40

land.lhs.true:                                    ; preds = %if.end
  %5 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %paren_names = getelementptr inbounds %struct.regexp, %struct.regexp* %5, i32 0, i32 6
  %6 = load %struct.hv*, %struct.hv** %paren_names, align 8
  %tobool3 = icmp ne %struct.hv* %6, null
  br i1 %tobool3, label %if.then4, label %if.end40

if.then4:                                         ; preds = %land.lhs.true
  %7 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %paren_names5 = getelementptr inbounds %struct.regexp, %struct.regexp* %7, i32 0, i32 6
  %8 = load %struct.hv*, %struct.hv** %paren_names5, align 8
  %9 = load %struct.sv*, %struct.sv** %namesv.addr, align 8
  %call6 = call i8* @Perl_hv_common(%struct.hv* %8, %struct.sv* %9, i8* null, i64 0, i32 0, i32 0, %struct.sv* null, i32 0)
  %10 = bitcast i8* %call6 to %struct.he*
  store %struct.he* %10, %struct.he** %he_str, align 8
  %11 = load %struct.he*, %struct.he** %he_str, align 8
  %tobool7 = icmp ne %struct.he* %11, null
  br i1 %tobool7, label %if.then8, label %if.end39

if.then8:                                         ; preds = %if.then4
  %12 = load %struct.he*, %struct.he** %he_str, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %12, i32 0, i32 2
  %hent_val = bitcast %union.anon.0* %he_valu to %struct.sv**
  %13 = load %struct.sv*, %struct.sv** %hent_val, align 8
  store %struct.sv* %13, %struct.sv** %sv_dat, align 8
  %14 = load %struct.sv*, %struct.sv** %sv_dat, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %15 = load i8*, i8** %svu_pv, align 8
  %16 = bitcast i8* %15 to i32*
  store i32* %16, i32** %nums, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then8
  %17 = load i64, i64* %i, align 8
  %18 = load %struct.sv*, %struct.sv** %sv_dat, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any, align 8
  %20 = bitcast i8* %19 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %20, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %21 = load i64, i64* %xivu_iv, align 8
  %cmp = icmp slt i64 %17, %21
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %22 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %22, i32 0, i32 12
  %23 = load i32, i32* %nparens, align 8
  %24 = load i32*, i32** %nums, align 8
  %25 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i32, i32* %24, i64 %25
  %26 = load i32, i32* %arrayidx, align 4
  %cmp9 = icmp sge i32 %23, %26
  br i1 %cmp9, label %land.lhs.true10, label %if.else

land.lhs.true10:                                  ; preds = %for.body
  %27 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs = getelementptr inbounds %struct.regexp, %struct.regexp* %27, i32 0, i32 17
  %28 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs, align 8
  %29 = load i32*, i32** %nums, align 8
  %30 = load i64, i64* %i, align 8
  %arrayidx11 = getelementptr inbounds i32, i32* %29, i64 %30
  %31 = load i32, i32* %arrayidx11, align 4
  %idxprom = sext i32 %31 to i64
  %arrayidx12 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %28, i64 %idxprom
  %start = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx12, i32 0, i32 0
  %32 = load i64, i64* %start, align 8
  %cmp13 = icmp ne i64 %32, -1
  br i1 %cmp13, label %land.lhs.true14, label %if.else

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %33 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs15 = getelementptr inbounds %struct.regexp, %struct.regexp* %33, i32 0, i32 17
  %34 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs15, align 8
  %35 = load i32*, i32** %nums, align 8
  %36 = load i64, i64* %i, align 8
  %arrayidx16 = getelementptr inbounds i32, i32* %35, i64 %36
  %37 = load i32, i32* %arrayidx16, align 4
  %idxprom17 = sext i32 %37 to i64
  %arrayidx18 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %34, i64 %idxprom17
  %end = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx18, i32 0, i32 1
  %38 = load i64, i64* %end, align 8
  %cmp19 = icmp ne i64 %38, -1
  br i1 %cmp19, label %if.then20, label %if.else

if.then20:                                        ; preds = %land.lhs.true14
  %call21 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i64 0)
  store %struct.sv* %call21, %struct.sv** %ret, align 8
  %39 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %call22 = call %struct.regexp* @S_ReANY(%struct.p5rx* %39)
  %engine = getelementptr inbounds %struct.regexp, %struct.regexp* %call22, i32 0, i32 4
  %40 = load %struct.regexp_engine*, %struct.regexp_engine** %engine, align 8
  %numbered_buff_FETCH = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %40, i32 0, i32 5
  %41 = load void (%struct.p5rx*, i32, %struct.sv*)*, void (%struct.p5rx*, i32, %struct.sv*)** %numbered_buff_FETCH, align 8
  %42 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %43 = load i32*, i32** %nums, align 8
  %44 = load i64, i64* %i, align 8
  %arrayidx23 = getelementptr inbounds i32, i32* %43, i64 %44
  %45 = load i32, i32* %arrayidx23, align 4
  %46 = load %struct.sv*, %struct.sv** %ret, align 8
  call void %41(%struct.p5rx* %42, i32 %45, %struct.sv* %46)
  %47 = load %struct.av*, %struct.av** %retarray, align 8
  %tobool24 = icmp ne %struct.av* %47, null
  br i1 %tobool24, label %if.end26, label %if.then25

if.then25:                                        ; preds = %if.then20
  %48 = load %struct.sv*, %struct.sv** %ret, align 8
  store %struct.sv* %48, %struct.sv** %retval, align 8
  br label %return

if.end26:                                         ; preds = %if.then20
  br label %if.end31

if.else:                                          ; preds = %land.lhs.true14, %land.lhs.true10, %for.body
  %49 = load %struct.av*, %struct.av** %retarray, align 8
  %tobool27 = icmp ne %struct.av* %49, null
  br i1 %tobool27, label %if.then28, label %if.end30

if.then28:                                        ; preds = %if.else
  %call29 = call %struct.sv* @Perl_newSVsv(%struct.sv* @PL_sv_undef)
  store %struct.sv* %call29, %struct.sv** %ret, align 8
  br label %if.end30

if.end30:                                         ; preds = %if.then28, %if.else
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.end26
  %50 = load %struct.av*, %struct.av** %retarray, align 8
  %tobool32 = icmp ne %struct.av* %50, null
  br i1 %tobool32, label %if.then33, label %if.end34

if.then33:                                        ; preds = %if.end31
  %51 = load %struct.av*, %struct.av** %retarray, align 8
  %52 = load %struct.sv*, %struct.sv** %ret, align 8
  call void @Perl_av_push(%struct.av* %51, %struct.sv* %52)
  br label %if.end34

if.end34:                                         ; preds = %if.then33, %if.end31
  br label %for.inc

for.inc:                                          ; preds = %if.end34
  %53 = load i64, i64* %i, align 8
  %inc = add nsw i64 %53, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %54 = load %struct.av*, %struct.av** %retarray, align 8
  %tobool35 = icmp ne %struct.av* %54, null
  br i1 %tobool35, label %if.then36, label %if.end38

if.then36:                                        ; preds = %for.end
  %55 = load %struct.av*, %struct.av** %retarray, align 8
  %56 = bitcast %struct.av* %55 to i8*
  %57 = bitcast i8* %56 to %struct.sv*
  %call37 = call %struct.sv* @Perl_newRV_noinc(%struct.sv* %57)
  store %struct.sv* %call37, %struct.sv** %retval, align 8
  br label %return

if.end38:                                         ; preds = %for.end
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then4
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %land.lhs.true, %if.end
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end40, %if.then36, %if.then25
  %58 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %58
}

declare dso_local void @Perl_croak_no_modify() #1

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @Perl_reg_named_buff_exists(%struct.p5rx* %r, %struct.sv* %key, i32 %flags) #0 {
entry:
  %retval = alloca i1, align 1
  %r.addr = alloca %struct.p5rx*, align 8
  %key.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %rx = alloca %struct.regexp*, align 8
  %sv = alloca %struct.sv*, align 8
  store %struct.p5rx* %r, %struct.p5rx** %r.addr, align 8
  store %struct.sv* %key, %struct.sv** %key.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %call = call %struct.regexp* @S_ReANY(%struct.p5rx* %0)
  store %struct.regexp* %call, %struct.regexp** %rx, align 8
  %1 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %tobool = icmp ne %struct.regexp* %1, null
  br i1 %tobool, label %land.lhs.true, label %if.else13

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %paren_names = getelementptr inbounds %struct.regexp, %struct.regexp* %2, i32 0, i32 6
  %3 = load %struct.hv*, %struct.hv** %paren_names, align 8
  %tobool1 = icmp ne %struct.hv* %3, null
  br i1 %tobool1, label %if.then, label %if.else13

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32, i32* %flags.addr, align 4
  %and = and i32 %4, 512
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.then
  %5 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %paren_names4 = getelementptr inbounds %struct.regexp, %struct.regexp* %5, i32 0, i32 6
  %6 = load %struct.hv*, %struct.hv** %paren_names4, align 8
  %7 = load %struct.sv*, %struct.sv** %key.addr, align 8
  %call5 = call i8* @Perl_hv_common(%struct.hv* %6, %struct.sv* %7, i8* null, i64 0, i32 0, i32 8, %struct.sv* null, i32 0)
  %tobool6 = icmp ne i8* %call5, null
  %8 = zext i1 %tobool6 to i64
  %cond = select i1 %tobool6, i32 1, i32 0
  %tobool7 = icmp ne i32 %cond, 0
  store i1 %tobool7, i1* %retval, align 1
  br label %return

if.else:                                          ; preds = %if.then
  %9 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %call8 = call %struct.regexp* @S_ReANY(%struct.p5rx* %9)
  %engine = getelementptr inbounds %struct.regexp, %struct.regexp* %call8, i32 0, i32 4
  %10 = load %struct.regexp_engine*, %struct.regexp_engine** %engine, align 8
  %named_buff = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %10, i32 0, i32 8
  %11 = load %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)** %named_buff, align 8
  %12 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %13 = load %struct.sv*, %struct.sv** %key.addr, align 8
  %14 = load i32, i32* %flags.addr, align 4
  %or = or i32 %14, 1
  %call9 = call %struct.sv* %11(%struct.p5rx* %12, %struct.sv* %13, %struct.sv* null, i32 %or)
  store %struct.sv* %call9, %struct.sv** %sv, align 8
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool10 = icmp ne %struct.sv* %15, null
  br i1 %tobool10, label %if.then11, label %if.else12

if.then11:                                        ; preds = %if.else
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %17 = bitcast %struct.sv* %16 to i8*
  %18 = bitcast i8* %17 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %18)
  store i1 true, i1* %retval, align 1
  br label %return

if.else12:                                        ; preds = %if.else
  store i1 false, i1* %retval, align 1
  br label %return

if.else13:                                        ; preds = %land.lhs.true, %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.else13, %if.else12, %if.then11, %if.then3
  %19 = load i1, i1* %retval, align 1
  ret i1 %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_reg_named_buff_all(%struct.p5rx* %r, i32 %flags) #0 {
entry:
  %r.addr = alloca %struct.p5rx*, align 8
  %flags.addr = alloca i32, align 4
  %rx = alloca %struct.regexp*, align 8
  %av = alloca %struct.av*, align 8
  %hv = alloca %struct.hv*, align 8
  %temphe = alloca %struct.he*, align 8
  %i = alloca i64, align 8
  %parno = alloca i64, align 8
  %sv_dat = alloca %struct.sv*, align 8
  %nums = alloca i32*, align 8
  store %struct.p5rx* %r, %struct.p5rx** %r.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %call = call %struct.regexp* @S_ReANY(%struct.p5rx* %0)
  store %struct.regexp* %call, %struct.regexp** %rx, align 8
  %call1 = call %struct.sv* @Perl_newSV_type(i32 11)
  %1 = bitcast %struct.sv* %call1 to i8*
  %2 = bitcast i8* %1 to %struct.av*
  store %struct.av* %2, %struct.av** %av, align 8
  %3 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %tobool = icmp ne %struct.regexp* %3, null
  br i1 %tobool, label %land.lhs.true, label %if.end25

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %paren_names = getelementptr inbounds %struct.regexp, %struct.regexp* %4, i32 0, i32 6
  %5 = load %struct.hv*, %struct.hv** %paren_names, align 8
  %tobool2 = icmp ne %struct.hv* %5, null
  br i1 %tobool2, label %if.then, label %if.end25

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %paren_names3 = getelementptr inbounds %struct.regexp, %struct.regexp* %6, i32 0, i32 6
  %7 = load %struct.hv*, %struct.hv** %paren_names3, align 8
  store %struct.hv* %7, %struct.hv** %hv, align 8
  %8 = load %struct.hv*, %struct.hv** %hv, align 8
  %call4 = call i32 @Perl_hv_iterinit(%struct.hv* %8)
  br label %while.cond

while.cond:                                       ; preds = %if.end24, %if.then
  %9 = load %struct.hv*, %struct.hv** %hv, align 8
  %call5 = call %struct.he* @Perl_hv_iternext_flags(%struct.hv* %9, i32 0)
  store %struct.he* %call5, %struct.he** %temphe, align 8
  %tobool6 = icmp ne %struct.he* %call5, null
  br i1 %tobool6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i64 0, i64* %parno, align 8
  %10 = load %struct.he*, %struct.he** %temphe, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %10, i32 0, i32 2
  %hent_val = bitcast %union.anon.0* %he_valu to %struct.sv**
  %11 = load %struct.sv*, %struct.sv** %hent_val, align 8
  store %struct.sv* %11, %struct.sv** %sv_dat, align 8
  %12 = load %struct.sv*, %struct.sv** %sv_dat, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %13 = load i8*, i8** %svu_pv, align 8
  %14 = bitcast i8* %13 to i32*
  store i32* %14, i32** %nums, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %15 = load i64, i64* %i, align 8
  %16 = load %struct.sv*, %struct.sv** %sv_dat, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any, align 8
  %18 = bitcast i8* %17 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %18, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %19 = load i64, i64* %xivu_iv, align 8
  %cmp = icmp slt i64 %15, %19
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %lastparen = getelementptr inbounds %struct.regexp, %struct.regexp* %20, i32 0, i32 15
  %21 = load i32, i32* %lastparen, align 8
  %22 = load i32*, i32** %nums, align 8
  %23 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i32, i32* %22, i64 %23
  %24 = load i32, i32* %arrayidx, align 4
  %cmp7 = icmp sge i32 %21, %24
  br i1 %cmp7, label %land.lhs.true8, label %if.end

land.lhs.true8:                                   ; preds = %for.body
  %25 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs = getelementptr inbounds %struct.regexp, %struct.regexp* %25, i32 0, i32 17
  %26 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs, align 8
  %27 = load i32*, i32** %nums, align 8
  %28 = load i64, i64* %i, align 8
  %arrayidx9 = getelementptr inbounds i32, i32* %27, i64 %28
  %29 = load i32, i32* %arrayidx9, align 4
  %idxprom = sext i32 %29 to i64
  %arrayidx10 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %26, i64 %idxprom
  %start = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx10, i32 0, i32 0
  %30 = load i64, i64* %start, align 8
  %cmp11 = icmp ne i64 %30, -1
  br i1 %cmp11, label %land.lhs.true12, label %if.end

land.lhs.true12:                                  ; preds = %land.lhs.true8
  %31 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs13 = getelementptr inbounds %struct.regexp, %struct.regexp* %31, i32 0, i32 17
  %32 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs13, align 8
  %33 = load i32*, i32** %nums, align 8
  %34 = load i64, i64* %i, align 8
  %arrayidx14 = getelementptr inbounds i32, i32* %33, i64 %34
  %35 = load i32, i32* %arrayidx14, align 4
  %idxprom15 = sext i32 %35 to i64
  %arrayidx16 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %32, i64 %idxprom15
  %end = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx16, i32 0, i32 1
  %36 = load i64, i64* %end, align 8
  %cmp17 = icmp ne i64 %36, -1
  br i1 %cmp17, label %if.then18, label %if.end

if.then18:                                        ; preds = %land.lhs.true12
  %37 = load i32*, i32** %nums, align 8
  %38 = load i64, i64* %i, align 8
  %arrayidx19 = getelementptr inbounds i32, i32* %37, i64 %38
  %39 = load i32, i32* %arrayidx19, align 4
  %conv = sext i32 %39 to i64
  store i64 %conv, i64* %parno, align 8
  br label %for.end

if.end:                                           ; preds = %land.lhs.true12, %land.lhs.true8, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %40 = load i64, i64* %i, align 8
  %inc = add nsw i64 %40, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then18, %for.cond
  %41 = load i64, i64* %parno, align 8
  %tobool20 = icmp ne i64 %41, 0
  br i1 %tobool20, label %if.then22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %42 = load i32, i32* %flags.addr, align 4
  %and = and i32 %42, 512
  %tobool21 = icmp ne i32 %and, 0
  br i1 %tobool21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %lor.lhs.false, %for.end
  %43 = load %struct.av*, %struct.av** %av, align 8
  %44 = load %struct.he*, %struct.he** %temphe, align 8
  %hent_hek = getelementptr inbounds %struct.he, %struct.he* %44, i32 0, i32 1
  %45 = load %struct.hek*, %struct.hek** %hent_hek, align 8
  %call23 = call %struct.sv* @Perl_newSVhek(%struct.hek* %45)
  call void @Perl_av_push(%struct.av* %43, %struct.sv* %call23)
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %lor.lhs.false
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end25

if.end25:                                         ; preds = %while.end, %land.lhs.true, %entry
  %46 = load %struct.av*, %struct.av** %av, align 8
  %47 = bitcast %struct.av* %46 to i8*
  %48 = bitcast i8* %47 to %struct.sv*
  %call26 = call %struct.sv* @Perl_newRV_noinc(%struct.sv* %48)
  ret %struct.sv* %call26
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_reg_named_buff_scalar(%struct.p5rx* %r, i32 %flags) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %r.addr = alloca %struct.p5rx*, align 8
  %flags.addr = alloca i32, align 4
  %ret = alloca %struct.sv*, align 8
  %av = alloca %struct.av*, align 8
  %length = alloca i64, align 8
  %rx = alloca %struct.regexp*, align 8
  store %struct.p5rx* %r, %struct.p5rx** %r.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %call = call %struct.regexp* @S_ReANY(%struct.p5rx* %0)
  store %struct.regexp* %call, %struct.regexp** %rx, align 8
  %1 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %tobool = icmp ne %struct.regexp* %1, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %paren_names = getelementptr inbounds %struct.regexp, %struct.regexp* %2, i32 0, i32 6
  %3 = load %struct.hv*, %struct.hv** %paren_names, align 8
  %tobool1 = icmp ne %struct.hv* %3, null
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32, i32* %flags.addr, align 4
  %and = and i32 %4, 4608
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.then
  %5 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %paren_names4 = getelementptr inbounds %struct.regexp, %struct.regexp* %5, i32 0, i32 6
  %6 = load %struct.hv*, %struct.hv** %paren_names4, align 8
  %sv_any = getelementptr inbounds %struct.hv, %struct.hv* %6, i32 0, i32 0
  %7 = load %struct.xpvhv*, %struct.xpvhv** %sv_any, align 8
  %xhv_keys = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %7, i32 0, i32 2
  %8 = load i64, i64* %xhv_keys, align 8
  %call5 = call %struct.sv* @Perl_newSViv(i64 %8)
  store %struct.sv* %call5, %struct.sv** %retval, align 8
  br label %return

if.else:                                          ; preds = %if.then
  %9 = load i32, i32* %flags.addr, align 4
  %and6 = and i32 %9, 256
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then8, label %if.else13

if.then8:                                         ; preds = %if.else
  %10 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %call9 = call %struct.regexp* @S_ReANY(%struct.p5rx* %10)
  %engine = getelementptr inbounds %struct.regexp, %struct.regexp* %call9, i32 0, i32 4
  %11 = load %struct.regexp_engine*, %struct.regexp_engine** %engine, align 8
  %named_buff = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %11, i32 0, i32 8
  %12 = load %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)** %named_buff, align 8
  %13 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %14 = load i32, i32* %flags.addr, align 4
  %or = or i32 %14, 2048
  %call10 = call %struct.sv* %12(%struct.p5rx* %13, %struct.sv* null, %struct.sv* null, i32 %or)
  store %struct.sv* %call10, %struct.sv** %ret, align 8
  %15 = load %struct.sv*, %struct.sv** %ret, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %16 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %17 = bitcast %struct.sv* %16 to i8*
  %18 = bitcast i8* %17 to %struct.av*
  store %struct.av* %18, %struct.av** %av, align 8
  %19 = load %struct.av*, %struct.av** %av, align 8
  %call11 = call i64 @S_av_top_index(%struct.av* %19)
  store i64 %call11, i64* %length, align 8
  %20 = load %struct.sv*, %struct.sv** %ret, align 8
  %21 = bitcast %struct.sv* %20 to i8*
  %22 = bitcast i8* %21 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %22)
  %23 = load i64, i64* %length, align 8
  %add = add nsw i64 %23, 1
  %call12 = call %struct.sv* @Perl_newSViv(i64 %add)
  store %struct.sv* %call12, %struct.sv** %retval, align 8
  br label %return

if.else13:                                        ; preds = %if.else
  %24 = load i32, i32* %flags.addr, align 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.190, i64 0, i64 0), i32 %24)
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store %struct.sv* @PL_sv_undef, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.else13, %if.then8, %if.then3
  %25 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %25
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_reg_named_buff_firstkey(%struct.p5rx* %r, i32 %flags) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %r.addr = alloca %struct.p5rx*, align 8
  %flags.addr = alloca i32, align 4
  %rx = alloca %struct.regexp*, align 8
  store %struct.p5rx* %r, %struct.p5rx** %r.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %call = call %struct.regexp* @S_ReANY(%struct.p5rx* %0)
  store %struct.regexp* %call, %struct.regexp** %rx, align 8
  %1 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %tobool = icmp ne %struct.regexp* %1, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %paren_names = getelementptr inbounds %struct.regexp, %struct.regexp* %2, i32 0, i32 6
  %3 = load %struct.hv*, %struct.hv** %paren_names, align 8
  %tobool1 = icmp ne %struct.hv* %3, null
  br i1 %tobool1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %paren_names2 = getelementptr inbounds %struct.regexp, %struct.regexp* %4, i32 0, i32 6
  %5 = load %struct.hv*, %struct.hv** %paren_names2, align 8
  %call3 = call i32 @Perl_hv_iterinit(%struct.hv* %5)
  %6 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %call4 = call %struct.regexp* @S_ReANY(%struct.p5rx* %6)
  %engine = getelementptr inbounds %struct.regexp, %struct.regexp* %call4, i32 0, i32 4
  %7 = load %struct.regexp_engine*, %struct.regexp_engine** %engine, align 8
  %named_buff_iter = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %7, i32 0, i32 9
  %8 = load %struct.sv* (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, i32)** %named_buff_iter, align 8
  %9 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %10 = load i32, i32* %flags.addr, align 4
  %and = and i32 %10, -65
  %or = or i32 %and, 128
  %call5 = call %struct.sv* %8(%struct.p5rx* %9, %struct.sv* null, i32 %or)
  store %struct.sv* %call5, %struct.sv** %retval, align 8
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %11 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_reg_named_buff_nextkey(%struct.p5rx* %r, i32 %flags) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %r.addr = alloca %struct.p5rx*, align 8
  %flags.addr = alloca i32, align 4
  %rx = alloca %struct.regexp*, align 8
  %hv = alloca %struct.hv*, align 8
  %temphe = alloca %struct.he*, align 8
  %i = alloca i64, align 8
  %parno = alloca i64, align 8
  %sv_dat = alloca %struct.sv*, align 8
  %nums = alloca i32*, align 8
  store %struct.p5rx* %r, %struct.p5rx** %r.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %call = call %struct.regexp* @S_ReANY(%struct.p5rx* %0)
  store %struct.regexp* %call, %struct.regexp** %rx, align 8
  %1 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %tobool = icmp ne %struct.regexp* %1, null
  br i1 %tobool, label %land.lhs.true, label %if.end23

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %paren_names = getelementptr inbounds %struct.regexp, %struct.regexp* %2, i32 0, i32 6
  %3 = load %struct.hv*, %struct.hv** %paren_names, align 8
  %tobool1 = icmp ne %struct.hv* %3, null
  br i1 %tobool1, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %paren_names2 = getelementptr inbounds %struct.regexp, %struct.regexp* %4, i32 0, i32 6
  %5 = load %struct.hv*, %struct.hv** %paren_names2, align 8
  store %struct.hv* %5, %struct.hv** %hv, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end22, %if.then
  %6 = load %struct.hv*, %struct.hv** %hv, align 8
  %call3 = call %struct.he* @Perl_hv_iternext_flags(%struct.hv* %6, i32 0)
  store %struct.he* %call3, %struct.he** %temphe, align 8
  %tobool4 = icmp ne %struct.he* %call3, null
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i64 0, i64* %parno, align 8
  %7 = load %struct.he*, %struct.he** %temphe, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %7, i32 0, i32 2
  %hent_val = bitcast %union.anon.0* %he_valu to %struct.sv**
  %8 = load %struct.sv*, %struct.sv** %hent_val, align 8
  store %struct.sv* %8, %struct.sv** %sv_dat, align 8
  %9 = load %struct.sv*, %struct.sv** %sv_dat, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %10 = load i8*, i8** %svu_pv, align 8
  %11 = bitcast i8* %10 to i32*
  store i32* %11, i32** %nums, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %12 = load i64, i64* %i, align 8
  %13 = load %struct.sv*, %struct.sv** %sv_dat, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any, align 8
  %15 = bitcast i8* %14 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %15, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %16 = load i64, i64* %xivu_iv, align 8
  %cmp = icmp slt i64 %12, %16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %lastparen = getelementptr inbounds %struct.regexp, %struct.regexp* %17, i32 0, i32 15
  %18 = load i32, i32* %lastparen, align 8
  %19 = load i32*, i32** %nums, align 8
  %20 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i32, i32* %19, i64 %20
  %21 = load i32, i32* %arrayidx, align 4
  %cmp5 = icmp sge i32 %18, %21
  br i1 %cmp5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %for.body
  %22 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs = getelementptr inbounds %struct.regexp, %struct.regexp* %22, i32 0, i32 17
  %23 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs, align 8
  %24 = load i32*, i32** %nums, align 8
  %25 = load i64, i64* %i, align 8
  %arrayidx7 = getelementptr inbounds i32, i32* %24, i64 %25
  %26 = load i32, i32* %arrayidx7, align 4
  %idxprom = sext i32 %26 to i64
  %arrayidx8 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %23, i64 %idxprom
  %start = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx8, i32 0, i32 0
  %27 = load i64, i64* %start, align 8
  %cmp9 = icmp ne i64 %27, -1
  br i1 %cmp9, label %land.lhs.true10, label %if.end

land.lhs.true10:                                  ; preds = %land.lhs.true6
  %28 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %offs11 = getelementptr inbounds %struct.regexp, %struct.regexp* %28, i32 0, i32 17
  %29 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs11, align 8
  %30 = load i32*, i32** %nums, align 8
  %31 = load i64, i64* %i, align 8
  %arrayidx12 = getelementptr inbounds i32, i32* %30, i64 %31
  %32 = load i32, i32* %arrayidx12, align 4
  %idxprom13 = sext i32 %32 to i64
  %arrayidx14 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %29, i64 %idxprom13
  %end = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx14, i32 0, i32 1
  %33 = load i64, i64* %end, align 8
  %cmp15 = icmp ne i64 %33, -1
  br i1 %cmp15, label %if.then16, label %if.end

if.then16:                                        ; preds = %land.lhs.true10
  %34 = load i32*, i32** %nums, align 8
  %35 = load i64, i64* %i, align 8
  %arrayidx17 = getelementptr inbounds i32, i32* %34, i64 %35
  %36 = load i32, i32* %arrayidx17, align 4
  %conv = sext i32 %36 to i64
  store i64 %conv, i64* %parno, align 8
  br label %for.end

if.end:                                           ; preds = %land.lhs.true10, %land.lhs.true6, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %37 = load i64, i64* %i, align 8
  %inc = add nsw i64 %37, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then16, %for.cond
  %38 = load i64, i64* %parno, align 8
  %tobool18 = icmp ne i64 %38, 0
  br i1 %tobool18, label %if.then20, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %39 = load i32, i32* %flags.addr, align 4
  %and = and i32 %39, 512
  %tobool19 = icmp ne i32 %and, 0
  br i1 %tobool19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %lor.lhs.false, %for.end
  %40 = load %struct.he*, %struct.he** %temphe, align 8
  %hent_hek = getelementptr inbounds %struct.he, %struct.he* %40, i32 0, i32 1
  %41 = load %struct.hek*, %struct.hek** %hent_hek, align 8
  %call21 = call %struct.sv* @Perl_newSVhek(%struct.hek* %41)
  store %struct.sv* %call21, %struct.sv** %retval, align 8
  br label %return

if.end22:                                         ; preds = %lor.lhs.false
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end23

if.end23:                                         ; preds = %while.end, %land.lhs.true, %entry
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end23, %if.then20
  %42 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %42
}

declare dso_local %struct.sv* @Perl_newSVsv(%struct.sv*) #1

declare dso_local void @Perl_av_push(%struct.av*, %struct.sv*) #1

declare dso_local %struct.sv* @Perl_newRV_noinc(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_dec_NN(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rc = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 1
  %1 = load i32, i32* %sv_refcnt, align 8
  store i32 %1, i32* %rc, align 4
  %2 = load i32, i32* %rc, align 4
  %cmp = icmp ugt i32 %2, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.else

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false, %cond.true
  %3 = load i32, i32* %rc, align 4
  %sub = sub i32 %3, 1
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 1
  store i32 %sub, i32* %sv_refcnt1, align 8
  br label %if.end

if.else:                                          ; preds = %cond.false, %cond.true
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %6 = load i32, i32* %rc, align 4
  call void @Perl_sv_free2(%struct.sv* %5, i32 %6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare dso_local i32 @Perl_hv_iterinit(%struct.hv*) #1

declare dso_local %struct.he* @Perl_hv_iternext_flags(%struct.hv*, i32) #1

declare dso_local %struct.sv* @Perl_newSVhek(%struct.hek*) #1

declare dso_local %struct.sv* @Perl_newSViv(i64) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_av_top_index(%struct.av* %av) #0 {
entry:
  %av.addr = alloca %struct.av*, align 8
  store %struct.av* %av, %struct.av** %av.addr, align 8
  %0 = load %struct.av*, %struct.av** %av.addr, align 8
  %1 = bitcast %struct.av* %0 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8388608
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.av*, %struct.av** %av.addr, align 8
  %4 = bitcast %struct.av* %3 to i8*
  %5 = bitcast i8* %4 to %struct.sv*
  %call = call i32 @Perl_mg_size(%struct.sv* %5)
  %conv = sext i32 %call to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %6, i32 0, i32 0
  %7 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %7, i32 0, i32 2
  %8 = load i64, i64* %xav_fill, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv, %cond.true ], [ %8, %cond.false ]
  ret i64 %cond
}

declare dso_local void @Perl_sv_setpvn(%struct.sv*, i8*, i64) #1

declare dso_local zeroext i1 @Perl_is_utf8_string(i8*, i64) #1

declare dso_local void @Perl_sv_magic(%struct.sv*, %struct.sv*, i32, i8*, i32) #1

declare dso_local void @Perl_sv_untaint(%struct.sv*) #1

declare dso_local void @Perl_sv_setsv_flags(%struct.sv*, %struct.sv*, i32) #1

declare dso_local zeroext i1 @Perl_ckwarn(i32) #1

declare dso_local void @Perl_report_uninit(%struct.sv*) #1

declare dso_local zeroext i1 @Perl_is_utf8_string_loclen(i8*, i64, i8**, i64*) #1

declare dso_local i8* @Perl_sv_grow(%struct.sv*, i64) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_invlist_set_len(%struct.sv* %invlist, i64 %len, i1 zeroext %offset) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  %len.addr = alloca i64, align 8
  %offset.addr = alloca i8, align 1
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %frombool = zext i1 %offset to i8
  store i8 %frombool, i8* %offset.addr, align 1
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* %len.addr, align 8
  %cmp = icmp eq i64 %0, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %1 = load i64, i64* %len.addr, align 8
  %2 = load i8, i8* %offset.addr, align 1
  %tobool = trunc i8 %2 to i1
  %conv = zext i1 %tobool to i64
  %add = add i64 %1, %conv
  %mul = mul i64 %add, 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %mul, %cond.false ]
  %3 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 2
  store i64 %cond, i64* %xpv_cur, align 8
  br label %do.end

do.end:                                           ; preds = %cond.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i64* @S_get_invlist_iter_addr(%struct.sv* %invlist) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xpvinvlist*
  %iterator = getelementptr inbounds %struct.xpvinvlist, %struct.xpvinvlist* %2, i32 0, i32 5
  ret i64* %iterator
}

; Function Attrs: noinline nounwind uwtable
define internal i64* @S_get_invlist_previous_index_addr(%struct.sv* %invlist) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xpvinvlist*
  %prev_index = getelementptr inbounds %struct.xpvinvlist, %struct.xpvinvlist* %2, i32 0, i32 4
  ret i64* %prev_index
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @S_get_invlist_offset_addr(%struct.sv* %invlist) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xpvinvlist*
  %is_offset = getelementptr inbounds %struct.xpvinvlist, %struct.xpvinvlist* %2, i32 0, i32 6
  ret i8* %is_offset
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_invlist_set_previous_index(%struct.sv* %invlist, i64 %index) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  %index.addr = alloca i64, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  store i64 %index, i64* %index.addr, align 8
  %0 = load i64, i64* %index.addr, align 8
  %1 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call i64* @S_get_invlist_previous_index_addr(%struct.sv* %1)
  store i64 %0, i64* %call, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_invlist_iterfinish(%struct.sv* %invlist) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call i64* @S_get_invlist_iter_addr(%struct.sv* %0)
  store i64 -1, i64* %call, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @Perl__invlist_search(%struct.sv* %invlist, i64 %cp) #0 {
entry:
  %retval = alloca i64, align 8
  %invlist.addr = alloca %struct.sv*, align 8
  %cp.addr = alloca i64, align 8
  %low = alloca i64, align 8
  %mid = alloca i64, align 8
  %high = alloca i64, align 8
  %highest_element = alloca i64, align 8
  %array = alloca i64*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  store i64 %cp, i64* %cp.addr, align 8
  store i64 0, i64* %low, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call i64 @S__invlist_len(%struct.sv* %0)
  store i64 %call, i64* %high, align 8
  %1 = load i64, i64* %high, align 8
  %sub = sub nsw i64 %1, 1
  store i64 %sub, i64* %highest_element, align 8
  %2 = load i64, i64* %high, align 8
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call1 = call i64* @S_invlist_array(%struct.sv* %3)
  store i64* %call1, i64** %array, align 8
  %4 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call2 = call i64 @S_invlist_previous_index(%struct.sv* %4)
  store i64 %call2, i64* %mid, align 8
  %5 = load i64, i64* %cp.addr, align 8
  %6 = load i64*, i64** %array, align 8
  %7 = load i64, i64* %mid, align 8
  %arrayidx = getelementptr inbounds i64, i64* %6, i64 %7
  %8 = load i64, i64* %arrayidx, align 8
  %cmp3 = icmp uge i64 %5, %8
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.end
  %9 = load i64, i64* %cp.addr, align 8
  %10 = load i64*, i64** %array, align 8
  %11 = load i64, i64* %highest_element, align 8
  %arrayidx5 = getelementptr inbounds i64, i64* %10, i64 %11
  %12 = load i64, i64* %arrayidx5, align 8
  %cmp6 = icmp uge i64 %9, %12
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.then4
  %13 = load i64, i64* %highest_element, align 8
  store i64 %13, i64* %retval, align 8
  br label %return

if.end8:                                          ; preds = %if.then4
  %14 = load i64, i64* %cp.addr, align 8
  %15 = load i64*, i64** %array, align 8
  %16 = load i64, i64* %mid, align 8
  %add = add nsw i64 %16, 1
  %arrayidx9 = getelementptr inbounds i64, i64* %15, i64 %add
  %17 = load i64, i64* %arrayidx9, align 8
  %cmp10 = icmp ult i64 %14, %17
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end8
  %18 = load i64, i64* %mid, align 8
  store i64 %18, i64* %retval, align 8
  br label %return

if.end12:                                         ; preds = %if.end8
  %19 = load i64, i64* %high, align 8
  %dec = add nsw i64 %19, -1
  store i64 %dec, i64* %high, align 8
  %20 = load i64, i64* %mid, align 8
  %add13 = add nsw i64 %20, 1
  store i64 %add13, i64* %low, align 8
  br label %if.end23

if.else:                                          ; preds = %if.end
  %21 = load i64, i64* %cp.addr, align 8
  %22 = load i64*, i64** %array, align 8
  %arrayidx14 = getelementptr inbounds i64, i64* %22, i64 0
  %23 = load i64, i64* %arrayidx14, align 8
  %cmp15 = icmp ult i64 %21, %23
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.else
  store i64 -1, i64* %retval, align 8
  br label %return

if.end17:                                         ; preds = %if.else
  %24 = load i64, i64* %mid, align 8
  store i64 %24, i64* %high, align 8
  %25 = load i64, i64* %cp.addr, align 8
  %26 = load i64*, i64** %array, align 8
  %27 = load i64, i64* %mid, align 8
  %sub18 = sub nsw i64 %27, 1
  %arrayidx19 = getelementptr inbounds i64, i64* %26, i64 %sub18
  %28 = load i64, i64* %arrayidx19, align 8
  %cmp20 = icmp uge i64 %25, %28
  br i1 %cmp20, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.end17
  br label %found_entry

if.end22:                                         ; preds = %if.end17
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.end12
  br label %while.cond

while.cond:                                       ; preds = %if.end31, %if.end23
  %29 = load i64, i64* %low, align 8
  %30 = load i64, i64* %high, align 8
  %cmp24 = icmp slt i64 %29, %30
  br i1 %cmp24, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %31 = load i64, i64* %low, align 8
  %32 = load i64, i64* %high, align 8
  %add25 = add nsw i64 %31, %32
  %div = sdiv i64 %add25, 2
  store i64 %div, i64* %mid, align 8
  %33 = load i64*, i64** %array, align 8
  %34 = load i64, i64* %mid, align 8
  %arrayidx26 = getelementptr inbounds i64, i64* %33, i64 %34
  %35 = load i64, i64* %arrayidx26, align 8
  %36 = load i64, i64* %cp.addr, align 8
  %cmp27 = icmp ule i64 %35, %36
  br i1 %cmp27, label %if.then28, label %if.else30

if.then28:                                        ; preds = %while.body
  %37 = load i64, i64* %mid, align 8
  %add29 = add nsw i64 %37, 1
  store i64 %add29, i64* %low, align 8
  br label %if.end31

if.else30:                                        ; preds = %while.body
  %38 = load i64, i64* %mid, align 8
  store i64 %38, i64* %high, align 8
  br label %if.end31

if.end31:                                         ; preds = %if.else30, %if.then28
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %found_entry

found_entry:                                      ; preds = %while.end, %if.then21
  %39 = load i64, i64* %high, align 8
  %dec32 = add nsw i64 %39, -1
  store i64 %dec32, i64* %high, align 8
  %40 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %41 = load i64, i64* %high, align 8
  call void @S_invlist_set_previous_index(%struct.sv* %40, i64 %41)
  %42 = load i64, i64* %high, align 8
  store i64 %42, i64* %retval, align 8
  br label %return

return:                                           ; preds = %found_entry, %if.then16, %if.then11, %if.then7, %if.then
  %43 = load i64, i64* %retval, align 8
  ret i64 %43
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @S__invlist_len(%struct.sv* %invlist) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %2, i32 0, i32 2
  %3 = load i64, i64* %xpv_cur, align 8
  %cmp = icmp eq i64 %3, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any1, align 8
  %6 = bitcast i8* %5 to %struct.xpv*
  %xpv_cur2 = getelementptr inbounds %struct.xpv, %struct.xpv* %6, i32 0, i32 2
  %7 = load i64, i64* %xpv_cur2, align 8
  %div = udiv i64 %7, 8
  %8 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call i8* @S_get_invlist_offset_addr(%struct.sv* %8)
  %9 = load i8, i8* %call, align 1
  %tobool = trunc i8 %9 to i1
  %conv = zext i1 %tobool to i64
  %sub = sub i64 %div, %conv
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %sub, %cond.false ]
  ret i64 %cond
}

; Function Attrs: noinline nounwind uwtable
define internal i64* @S_invlist_array(%struct.sv* %invlist) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %1 = load i8*, i8** %svu_pv, align 8
  %2 = bitcast i8* %1 to i64*
  %3 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call i8* @S_get_invlist_offset_addr(%struct.sv* %3)
  %4 = load i8, i8* %call, align 1
  %tobool = trunc i8 %4 to i1
  %conv = zext i1 %tobool to i32
  %idx.ext = sext i32 %conv to i64
  %add.ptr = getelementptr inbounds i64, i64* %2, i64 %idx.ext
  ret i64* %add.ptr
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_invlist_previous_index(%struct.sv* %invlist) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call i64* @S_get_invlist_previous_index_addr(%struct.sv* %0)
  %1 = load i64, i64* %call, align 8
  ret i64 %1
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl__invlist_populate_swatch(%struct.sv* %invlist, i64 %start, i64 %end, i8* %swatch) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %swatch.addr = alloca i8*, align 8
  %current = alloca i64, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %array = alloca i64*, align 8
  %upper = alloca i64, align 8
  %offset = alloca i64, align 8
  %offset40 = alloca i64, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  store i64 %start, i64* %start.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  store i8* %swatch, i8** %swatch.addr, align 8
  %0 = load i64, i64* %start.addr, align 8
  store i64 %0, i64* %current, align 8
  %1 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call i64 @S__invlist_len(%struct.sv* %1)
  store i64 %call, i64* %len, align 8
  %2 = load i64, i64* %len, align 8
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call1 = call i64* @S_invlist_array(%struct.sv* %3)
  store i64* %call1, i64** %array, align 8
  %4 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %5 = load i64, i64* %start.addr, align 8
  %call2 = call i64 @Perl__invlist_search(%struct.sv* %4, i64 %5)
  store i64 %call2, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end51, %if.end
  %6 = load i64, i64* %current, align 8
  %7 = load i64, i64* %end.addr, align 8
  %cmp3 = icmp ult i64 %6, %7
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i64, i64* %i, align 8
  %cmp4 = icmp eq i64 %8, -1
  br i1 %cmp4, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %9 = load i64, i64* %i, align 8
  %and = and i64 %9, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then5, label %if.end15

if.then5:                                         ; preds = %lor.lhs.false, %while.body
  %10 = load i64, i64* %i, align 8
  %inc = add nsw i64 %10, 1
  store i64 %inc, i64* %i, align 8
  %11 = load i64, i64* %i, align 8
  %12 = load i64, i64* %len, align 8
  %cmp6 = icmp sge i64 %11, %12
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.then5
  br label %return

if.end8:                                          ; preds = %if.then5
  %13 = load i64*, i64** %array, align 8
  %14 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i64, i64* %13, i64 %14
  %15 = load i64, i64* %arrayidx, align 8
  store i64 %15, i64* %current, align 8
  %16 = load i64, i64* %current, align 8
  %17 = load i64, i64* %end.addr, align 8
  %cmp9 = icmp uge i64 %16, %17
  br i1 %cmp9, label %if.then10, label %if.end14

if.then10:                                        ; preds = %if.end8
  %18 = load i64, i64* %end.addr, align 8
  %cmp11 = icmp ult i64 %18, -1
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then10
  br i1 true, label %if.then12, label %if.end13

cond.false:                                       ; preds = %if.then10
  br i1 false, label %if.then12, label %if.end13

if.then12:                                        ; preds = %cond.false, %cond.true
  br label %return

if.end13:                                         ; preds = %cond.false, %cond.true
  %19 = load i64, i64* %len, align 8
  store i64 %19, i64* %i, align 8
  br label %join_end_of_list

if.end14:                                         ; preds = %if.end8
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %lor.lhs.false
  %20 = load i64, i64* %i, align 8
  %inc16 = add nsw i64 %20, 1
  store i64 %inc16, i64* %i, align 8
  %21 = load i64, i64* %i, align 8
  %22 = load i64, i64* %len, align 8
  %cmp17 = icmp slt i64 %21, %22
  br i1 %cmp17, label %land.lhs.true, label %cond.false22

land.lhs.true:                                    ; preds = %if.end15
  %23 = load i64*, i64** %array, align 8
  %24 = load i64, i64* %i, align 8
  %arrayidx18 = getelementptr inbounds i64, i64* %23, i64 %24
  %25 = load i64, i64* %arrayidx18, align 8
  %26 = load i64, i64* %end.addr, align 8
  %cmp19 = icmp ult i64 %25, %26
  br i1 %cmp19, label %cond.true20, label %cond.false22

cond.true20:                                      ; preds = %land.lhs.true
  %27 = load i64*, i64** %array, align 8
  %28 = load i64, i64* %i, align 8
  %arrayidx21 = getelementptr inbounds i64, i64* %27, i64 %28
  %29 = load i64, i64* %arrayidx21, align 8
  br label %cond.end

cond.false22:                                     ; preds = %land.lhs.true, %if.end15
  %30 = load i64, i64* %end.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false22, %cond.true20
  %cond = phi i64 [ %29, %cond.true20 ], [ %30, %cond.false22 ]
  store i64 %cond, i64* %upper, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %31 = load i64, i64* %current, align 8
  %32 = load i64, i64* %upper, align 8
  %cmp23 = icmp ult i64 %31, %32
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %33 = load i64, i64* %current, align 8
  %34 = load i64, i64* %start.addr, align 8
  %sub = sub i64 %33, %34
  store i64 %sub, i64* %offset, align 8
  %35 = load i64, i64* %offset, align 8
  %and24 = and i64 %35, 7
  %sh_prom = trunc i64 %and24 to i32
  %shl = shl i32 1, %sh_prom
  %36 = load i8*, i8** %swatch.addr, align 8
  %37 = load i64, i64* %offset, align 8
  %shr = lshr i64 %37, 3
  %arrayidx25 = getelementptr inbounds i8, i8* %36, i64 %shr
  %38 = load i8, i8* %arrayidx25, align 1
  %conv = zext i8 %38 to i32
  %or = or i32 %conv, %shl
  %conv26 = trunc i32 %or to i8
  store i8 %conv26, i8* %arrayidx25, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %39 = load i64, i64* %current, align 8
  %inc27 = add i64 %39, 1
  store i64 %inc27, i64* %current, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %join_end_of_list

join_end_of_list:                                 ; preds = %for.end, %if.end13
  %40 = load i64, i64* %i, align 8
  %41 = load i64, i64* %len, align 8
  %cmp28 = icmp sge i64 %40, %41
  br i1 %cmp28, label %if.then30, label %if.end51

if.then30:                                        ; preds = %join_end_of_list
  %42 = load i64, i64* %end.addr, align 8
  %cmp31 = icmp eq i64 %42, -1
  br i1 %cmp31, label %land.lhs.true33, label %cond.false38

land.lhs.true33:                                  ; preds = %if.then30
  %43 = load i64, i64* %len, align 8
  %sub34 = sub nsw i64 %43, 1
  %and35 = and i64 %sub34, 1
  %tobool36 = icmp ne i64 %and35, 0
  br i1 %tobool36, label %cond.false38, label %cond.true37

cond.true37:                                      ; preds = %land.lhs.true33
  br i1 true, label %if.then39, label %if.end50

cond.false38:                                     ; preds = %land.lhs.true33, %if.then30
  br i1 false, label %if.then39, label %if.end50

if.then39:                                        ; preds = %cond.false38, %cond.true37
  %44 = load i64, i64* %end.addr, align 8
  %45 = load i64, i64* %start.addr, align 8
  %sub41 = sub i64 %44, %45
  store i64 %sub41, i64* %offset40, align 8
  %46 = load i64, i64* %offset40, align 8
  %and42 = and i64 %46, 7
  %sh_prom43 = trunc i64 %and42 to i32
  %shl44 = shl i32 1, %sh_prom43
  %47 = load i8*, i8** %swatch.addr, align 8
  %48 = load i64, i64* %offset40, align 8
  %shr45 = lshr i64 %48, 3
  %arrayidx46 = getelementptr inbounds i8, i8* %47, i64 %shr45
  %49 = load i8, i8* %arrayidx46, align 1
  %conv47 = zext i8 %49 to i32
  %or48 = or i32 %conv47, %shl44
  %conv49 = trunc i32 %or48 to i8
  store i8 %conv49, i8* %arrayidx46, align 1
  br label %if.end50

if.end50:                                         ; preds = %if.then39, %cond.false38, %cond.true37
  br label %return

if.end51:                                         ; preds = %join_end_of_list
  %50 = load i64*, i64** %array, align 8
  %51 = load i64, i64* %i, align 8
  %arrayidx52 = getelementptr inbounds i64, i64* %50, i64 %51
  %52 = load i64, i64* %arrayidx52, align 8
  store i64 %52, i64* %current, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %return

return:                                           ; preds = %while.end, %if.end50, %if.then12, %if.then7, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %a, %struct.sv* %b, i1 zeroext %complement_b, %struct.sv** %output) #0 {
entry:
  %a.addr = alloca %struct.sv*, align 8
  %b.addr = alloca %struct.sv*, align 8
  %complement_b.addr = alloca i8, align 1
  %output.addr = alloca %struct.sv**, align 8
  %array_a = alloca i64*, align 8
  %array_b = alloca i64*, align 8
  %len_a = alloca i64, align 8
  %len_b = alloca i64, align 8
  %u = alloca %struct.sv*, align 8
  %array_u = alloca i64*, align 8
  %len_u = alloca i64, align 8
  %i_a = alloca i64, align 8
  %i_b = alloca i64, align 8
  %i_u = alloca i64, align 8
  %count = alloca i64, align 8
  %make_temp = alloca i8, align 1
  %make_temp25 = alloca i8, align 1
  %cp = alloca i64, align 8
  %cp_in_set = alloca i8, align 1
  %copy_count = alloca i64, align 8
  store %struct.sv* %a, %struct.sv** %a.addr, align 8
  store %struct.sv* %b, %struct.sv** %b.addr, align 8
  %frombool = zext i1 %complement_b to i8
  store i8 %frombool, i8* %complement_b.addr, align 1
  store %struct.sv** %output, %struct.sv*** %output.addr, align 8
  store i64 0, i64* %i_a, align 8
  store i64 0, i64* %i_b, align 8
  store i64 0, i64* %i_u, align 8
  store i64 0, i64* %count, align 8
  %0 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %cmp = icmp eq %struct.sv* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %call = call i64 @S__invlist_len(%struct.sv* %1)
  store i64 %call, i64* %len_a, align 8
  %cmp1 = icmp eq i64 %call, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %make_temp, align 1
  %2 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  %3 = load %struct.sv*, %struct.sv** %2, align 8
  %4 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %cmp2 = icmp eq %struct.sv* %3, %4
  br i1 %cmp2, label %if.then3, label %if.end10

if.then3:                                         ; preds = %if.then
  %5 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %cmp4 = icmp ne %struct.sv* %5, null
  br i1 %cmp4, label %if.then5, label %if.end9

if.then5:                                         ; preds = %if.then3
  %6 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 524288
  %tobool = icmp ne i32 %and, 0
  %8 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  %tobool6 = icmp ne i32 %cond, 0
  %frombool7 = zext i1 %tobool6 to i8
  store i8 %frombool7, i8* %make_temp, align 1
  br i1 %tobool6, label %if.end, label %if.then8

if.then8:                                         ; preds = %if.then5
  %9 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %10 = bitcast %struct.sv* %9 to i8*
  %11 = bitcast i8* %10 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %11)
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.then5
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then3
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then
  %12 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %14 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %cmp11 = icmp ne %struct.sv* %13, %14
  br i1 %cmp11, label %if.then12, label %if.end17

if.then12:                                        ; preds = %if.end10
  %15 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %call13 = call %struct.sv* @S_invlist_clone(%struct.sv* %15)
  %16 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  store %struct.sv* %call13, %struct.sv** %16, align 8
  %17 = load i8, i8* %complement_b.addr, align 1
  %tobool14 = trunc i8 %17 to i1
  br i1 %tobool14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.then12
  %18 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  %19 = load %struct.sv*, %struct.sv** %18, align 8
  call void @Perl__invlist_invert(%struct.sv* %19)
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.then12
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.end10
  %20 = load i8, i8* %make_temp, align 1
  %tobool18 = trunc i8 %20 to i1
  br i1 %tobool18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end17
  %21 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  %22 = load %struct.sv*, %struct.sv** %21, align 8
  %call20 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %22)
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.end17
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  %23 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %call22 = call i64 @S__invlist_len(%struct.sv* %23)
  store i64 %call22, i64* %len_b, align 8
  %cmp23 = icmp eq i64 %call22, 0
  br i1 %cmp23, label %if.then24, label %if.end61

if.then24:                                        ; preds = %if.else
  store i8 0, i8* %make_temp25, align 1
  %24 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  %25 = load %struct.sv*, %struct.sv** %24, align 8
  %26 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %cmp26 = icmp eq %struct.sv* %25, %26
  br i1 %cmp26, label %if.then27, label %if.end36

if.then27:                                        ; preds = %if.then24
  %27 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %28, 524288
  %tobool30 = icmp ne i32 %and29, 0
  %29 = zext i1 %tobool30 to i64
  %cond31 = select i1 %tobool30, i32 1, i32 0
  %tobool32 = icmp ne i32 %cond31, 0
  %frombool33 = zext i1 %tobool32 to i8
  store i8 %frombool33, i8* %make_temp25, align 1
  br i1 %tobool32, label %if.end35, label %if.then34

if.then34:                                        ; preds = %if.then27
  %30 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %31 = bitcast %struct.sv* %30 to i8*
  %32 = bitcast i8* %31 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %32)
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.then27
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then24
  %33 = load i8, i8* %complement_b.addr, align 1
  %tobool37 = trunc i8 %33 to i1
  br i1 %tobool37, label %if.then38, label %if.else51

if.then38:                                        ; preds = %if.end36
  %34 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %35 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  %36 = load %struct.sv*, %struct.sv** %35, align 8
  %cmp39 = icmp eq %struct.sv* %34, %36
  br i1 %cmp39, label %if.then40, label %if.end49

if.then40:                                        ; preds = %if.then38
  %37 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %38, 524288
  %tobool43 = icmp ne i32 %and42, 0
  %39 = zext i1 %tobool43 to i64
  %cond44 = select i1 %tobool43, i32 1, i32 0
  %tobool45 = icmp ne i32 %cond44, 0
  %frombool46 = zext i1 %tobool45 to i8
  store i8 %frombool46, i8* %make_temp25, align 1
  br i1 %tobool45, label %if.end48, label %if.then47

if.then47:                                        ; preds = %if.then40
  %40 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %41 = bitcast %struct.sv* %40 to i8*
  %42 = bitcast i8* %41 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %42)
  br label %if.end48

if.end48:                                         ; preds = %if.then47, %if.then40
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.then38
  %call50 = call %struct.sv* @Perl__new_invlist(i64 1)
  %43 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  store %struct.sv* %call50, %struct.sv** %43, align 8
  %44 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  %45 = load %struct.sv*, %struct.sv** %44, align 8
  call void @S__append_range_to_invlist(%struct.sv* %45, i64 0, i64 -1)
  br label %if.end56

if.else51:                                        ; preds = %if.end36
  %46 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  %47 = load %struct.sv*, %struct.sv** %46, align 8
  %48 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %cmp52 = icmp ne %struct.sv* %47, %48
  br i1 %cmp52, label %if.then53, label %if.end55

if.then53:                                        ; preds = %if.else51
  %49 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %call54 = call %struct.sv* @S_invlist_clone(%struct.sv* %49)
  %50 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  store %struct.sv* %call54, %struct.sv** %50, align 8
  br label %if.end55

if.end55:                                         ; preds = %if.then53, %if.else51
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.end49
  %51 = load i8, i8* %make_temp25, align 1
  %tobool57 = trunc i8 %51 to i1
  br i1 %tobool57, label %if.then58, label %if.end60

if.then58:                                        ; preds = %if.end56
  %52 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  %53 = load %struct.sv*, %struct.sv** %52, align 8
  %call59 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %53)
  br label %if.end60

if.end60:                                         ; preds = %if.then58, %if.end56
  br label %return

if.end61:                                         ; preds = %if.else
  br label %if.end62

if.end62:                                         ; preds = %if.end61
  %54 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %call63 = call i64* @S_invlist_array(%struct.sv* %54)
  store i64* %call63, i64** %array_a, align 8
  %55 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %call64 = call i64* @S_invlist_array(%struct.sv* %55)
  store i64* %call64, i64** %array_b, align 8
  %56 = load i8, i8* %complement_b.addr, align 1
  %tobool65 = trunc i8 %56 to i1
  br i1 %tobool65, label %if.then66, label %if.end72

if.then66:                                        ; preds = %if.end62
  %57 = load i64*, i64** %array_b, align 8
  %arrayidx = getelementptr inbounds i64, i64* %57, i64 0
  %58 = load i64, i64* %arrayidx, align 8
  %cmp67 = icmp eq i64 %58, 0
  br i1 %cmp67, label %if.then68, label %if.else69

if.then68:                                        ; preds = %if.then66
  %59 = load i64*, i64** %array_b, align 8
  %incdec.ptr = getelementptr inbounds i64, i64* %59, i32 1
  store i64* %incdec.ptr, i64** %array_b, align 8
  %60 = load i64, i64* %len_b, align 8
  %dec = add i64 %60, -1
  store i64 %dec, i64* %len_b, align 8
  br label %if.end71

if.else69:                                        ; preds = %if.then66
  %61 = load i64*, i64** %array_b, align 8
  %incdec.ptr70 = getelementptr inbounds i64, i64* %61, i32 -1
  store i64* %incdec.ptr70, i64** %array_b, align 8
  %62 = load i64, i64* %len_b, align 8
  %inc = add i64 %62, 1
  store i64 %inc, i64* %len_b, align 8
  br label %if.end71

if.end71:                                         ; preds = %if.else69, %if.then68
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %if.end62
  %63 = load i64, i64* %len_a, align 8
  %64 = load i64, i64* %len_b, align 8
  %add = add i64 %63, %64
  %call73 = call %struct.sv* @Perl__new_invlist(i64 %add)
  store %struct.sv* %call73, %struct.sv** %u, align 8
  %65 = load %struct.sv*, %struct.sv** %u, align 8
  %66 = load i64, i64* %len_a, align 8
  %cmp74 = icmp ugt i64 %66, 0
  br i1 %cmp74, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %if.end72
  %67 = load i64*, i64** %array_a, align 8
  %arrayidx75 = getelementptr inbounds i64, i64* %67, i64 0
  %68 = load i64, i64* %arrayidx75, align 8
  %cmp76 = icmp eq i64 %68, 0
  br i1 %cmp76, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true, %if.end72
  %69 = load i64, i64* %len_b, align 8
  %cmp77 = icmp ugt i64 %69, 0
  br i1 %cmp77, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %70 = load i64*, i64** %array_b, align 8
  %arrayidx78 = getelementptr inbounds i64, i64* %70, i64 0
  %71 = load i64, i64* %arrayidx78, align 8
  %cmp79 = icmp eq i64 %71, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %72 = phi i1 [ false, %lor.rhs ], [ %cmp79, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.lhs.true
  %73 = phi i1 [ true, %land.lhs.true ], [ %72, %land.end ]
  %call80 = call i64* @S__invlist_array_init(%struct.sv* %65, i1 zeroext %73)
  store i64* %call80, i64** %array_u, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end124, %lor.end
  %74 = load i64, i64* %i_a, align 8
  %75 = load i64, i64* %len_a, align 8
  %cmp81 = icmp ult i64 %74, %75
  br i1 %cmp81, label %land.rhs82, label %land.end84

land.rhs82:                                       ; preds = %while.cond
  %76 = load i64, i64* %i_b, align 8
  %77 = load i64, i64* %len_b, align 8
  %cmp83 = icmp ult i64 %76, %77
  br label %land.end84

land.end84:                                       ; preds = %land.rhs82, %while.cond
  %78 = phi i1 [ false, %while.cond ], [ %cmp83, %land.rhs82 ]
  br i1 %78, label %while.body, label %while.end

while.body:                                       ; preds = %land.end84
  %79 = load i64*, i64** %array_a, align 8
  %80 = load i64, i64* %i_a, align 8
  %arrayidx85 = getelementptr inbounds i64, i64* %79, i64 %80
  %81 = load i64, i64* %arrayidx85, align 8
  %82 = load i64*, i64** %array_b, align 8
  %83 = load i64, i64* %i_b, align 8
  %arrayidx86 = getelementptr inbounds i64, i64* %82, i64 %83
  %84 = load i64, i64* %arrayidx86, align 8
  %cmp87 = icmp ult i64 %81, %84
  br i1 %cmp87, label %if.then95, label %lor.lhs.false88

lor.lhs.false88:                                  ; preds = %while.body
  %85 = load i64*, i64** %array_a, align 8
  %86 = load i64, i64* %i_a, align 8
  %arrayidx89 = getelementptr inbounds i64, i64* %85, i64 %86
  %87 = load i64, i64* %arrayidx89, align 8
  %88 = load i64*, i64** %array_b, align 8
  %89 = load i64, i64* %i_b, align 8
  %arrayidx90 = getelementptr inbounds i64, i64* %88, i64 %89
  %90 = load i64, i64* %arrayidx90, align 8
  %cmp91 = icmp eq i64 %87, %90
  br i1 %cmp91, label %land.lhs.true92, label %if.else101

land.lhs.true92:                                  ; preds = %lor.lhs.false88
  %91 = load i64, i64* %i_a, align 8
  %and93 = and i64 %91, 1
  %tobool94 = icmp ne i64 %and93, 0
  br i1 %tobool94, label %if.else101, label %if.then95

if.then95:                                        ; preds = %land.lhs.true92, %while.body
  %92 = load i64, i64* %i_a, align 8
  %and96 = and i64 %92, 1
  %tobool97 = icmp ne i64 %and96, 0
  %lnot = xor i1 %tobool97, true
  %frombool98 = zext i1 %lnot to i8
  store i8 %frombool98, i8* %cp_in_set, align 1
  %93 = load i64*, i64** %array_a, align 8
  %94 = load i64, i64* %i_a, align 8
  %inc99 = add i64 %94, 1
  store i64 %inc99, i64* %i_a, align 8
  %arrayidx100 = getelementptr inbounds i64, i64* %93, i64 %94
  %95 = load i64, i64* %arrayidx100, align 8
  store i64 %95, i64* %cp, align 8
  br label %if.end108

if.else101:                                       ; preds = %land.lhs.true92, %lor.lhs.false88
  %96 = load i64, i64* %i_b, align 8
  %and102 = and i64 %96, 1
  %tobool103 = icmp ne i64 %and102, 0
  %lnot104 = xor i1 %tobool103, true
  %frombool105 = zext i1 %lnot104 to i8
  store i8 %frombool105, i8* %cp_in_set, align 1
  %97 = load i64*, i64** %array_b, align 8
  %98 = load i64, i64* %i_b, align 8
  %inc106 = add i64 %98, 1
  store i64 %inc106, i64* %i_b, align 8
  %arrayidx107 = getelementptr inbounds i64, i64* %97, i64 %98
  %99 = load i64, i64* %arrayidx107, align 8
  store i64 %99, i64* %cp, align 8
  br label %if.end108

if.end108:                                        ; preds = %if.else101, %if.then95
  %100 = load i8, i8* %cp_in_set, align 1
  %tobool109 = trunc i8 %100 to i1
  br i1 %tobool109, label %if.then110, label %if.else117

if.then110:                                       ; preds = %if.end108
  %101 = load i64, i64* %count, align 8
  %cmp111 = icmp eq i64 %101, 0
  br i1 %cmp111, label %if.then112, label %if.end115

if.then112:                                       ; preds = %if.then110
  %102 = load i64, i64* %cp, align 8
  %103 = load i64*, i64** %array_u, align 8
  %104 = load i64, i64* %i_u, align 8
  %inc113 = add i64 %104, 1
  store i64 %inc113, i64* %i_u, align 8
  %arrayidx114 = getelementptr inbounds i64, i64* %103, i64 %104
  store i64 %102, i64* %arrayidx114, align 8
  br label %if.end115

if.end115:                                        ; preds = %if.then112, %if.then110
  %105 = load i64, i64* %count, align 8
  %inc116 = add i64 %105, 1
  store i64 %inc116, i64* %count, align 8
  br label %if.end124

if.else117:                                       ; preds = %if.end108
  %106 = load i64, i64* %count, align 8
  %dec118 = add i64 %106, -1
  store i64 %dec118, i64* %count, align 8
  %107 = load i64, i64* %count, align 8
  %cmp119 = icmp eq i64 %107, 0
  br i1 %cmp119, label %if.then120, label %if.end123

if.then120:                                       ; preds = %if.else117
  %108 = load i64, i64* %cp, align 8
  %109 = load i64*, i64** %array_u, align 8
  %110 = load i64, i64* %i_u, align 8
  %inc121 = add i64 %110, 1
  store i64 %inc121, i64* %i_u, align 8
  %arrayidx122 = getelementptr inbounds i64, i64* %109, i64 %110
  store i64 %108, i64* %arrayidx122, align 8
  br label %if.end123

if.end123:                                        ; preds = %if.then120, %if.else117
  br label %if.end124

if.end124:                                        ; preds = %if.end123, %if.end115
  br label %while.cond

while.end:                                        ; preds = %land.end84
  %111 = load i64, i64* %i_a, align 8
  %112 = load i64, i64* %len_a, align 8
  %cmp125 = icmp ne i64 %111, %112
  br i1 %cmp125, label %land.lhs.true126, label %lor.lhs.false129

land.lhs.true126:                                 ; preds = %while.end
  %113 = load i64, i64* %i_a, align 8
  %and127 = and i64 %113, 1
  %tobool128 = icmp ne i64 %and127, 0
  br i1 %tobool128, label %if.then134, label %lor.lhs.false129

lor.lhs.false129:                                 ; preds = %land.lhs.true126, %while.end
  %114 = load i64, i64* %i_b, align 8
  %115 = load i64, i64* %len_b, align 8
  %cmp130 = icmp ne i64 %114, %115
  br i1 %cmp130, label %land.lhs.true131, label %if.end136

land.lhs.true131:                                 ; preds = %lor.lhs.false129
  %116 = load i64, i64* %i_b, align 8
  %and132 = and i64 %116, 1
  %tobool133 = icmp ne i64 %and132, 0
  br i1 %tobool133, label %if.then134, label %if.end136

if.then134:                                       ; preds = %land.lhs.true131, %land.lhs.true126
  %117 = load i64, i64* %count, align 8
  %dec135 = add i64 %117, -1
  store i64 %dec135, i64* %count, align 8
  br label %if.end136

if.end136:                                        ; preds = %if.then134, %land.lhs.true131, %lor.lhs.false129
  %118 = load i64, i64* %i_u, align 8
  store i64 %118, i64* %len_u, align 8
  %119 = load i64, i64* %count, align 8
  %cmp137 = icmp eq i64 %119, 0
  br i1 %cmp137, label %if.then138, label %if.end142

if.then138:                                       ; preds = %if.end136
  %120 = load i64, i64* %len_a, align 8
  %121 = load i64, i64* %i_a, align 8
  %sub = sub i64 %120, %121
  %122 = load i64, i64* %len_b, align 8
  %123 = load i64, i64* %i_b, align 8
  %sub139 = sub i64 %122, %123
  %add140 = add i64 %sub, %sub139
  %124 = load i64, i64* %len_u, align 8
  %add141 = add i64 %124, %add140
  store i64 %add141, i64* %len_u, align 8
  br label %if.end142

if.end142:                                        ; preds = %if.then138, %if.end136
  %125 = load i64, i64* %len_u, align 8
  %126 = load %struct.sv*, %struct.sv** %u, align 8
  %call143 = call i64 @S__invlist_len(%struct.sv* %126)
  %cmp144 = icmp ne i64 %125, %call143
  br i1 %cmp144, label %if.then145, label %if.end149

if.then145:                                       ; preds = %if.end142
  %127 = load %struct.sv*, %struct.sv** %u, align 8
  %128 = load i64, i64* %len_u, align 8
  %129 = load %struct.sv*, %struct.sv** %u, align 8
  %call146 = call i8* @S_get_invlist_offset_addr(%struct.sv* %129)
  %130 = load i8, i8* %call146, align 1
  %tobool147 = trunc i8 %130 to i1
  call void @S_invlist_set_len(%struct.sv* %127, i64 %128, i1 zeroext %tobool147)
  %131 = load %struct.sv*, %struct.sv** %u, align 8
  call void @S_invlist_trim(%struct.sv* %131)
  %132 = load %struct.sv*, %struct.sv** %u, align 8
  %call148 = call i64* @S_invlist_array(%struct.sv* %132)
  store i64* %call148, i64** %array_u, align 8
  br label %if.end149

if.end149:                                        ; preds = %if.then145, %if.end142
  %133 = load i64, i64* %count, align 8
  %cmp150 = icmp eq i64 %133, 0
  br i1 %cmp150, label %if.then151, label %if.end165

if.then151:                                       ; preds = %if.end149
  %134 = load i64, i64* %len_a, align 8
  %135 = load i64, i64* %i_a, align 8
  %sub152 = sub i64 %134, %135
  store i64 %sub152, i64* %copy_count, align 8
  %cmp153 = icmp sgt i64 %sub152, 0
  br i1 %cmp153, label %if.then154, label %if.else156

if.then154:                                       ; preds = %if.then151
  %136 = load i64*, i64** %array_u, align 8
  %137 = load i64, i64* %i_u, align 8
  %add.ptr = getelementptr inbounds i64, i64* %136, i64 %137
  %138 = bitcast i64* %add.ptr to i8*
  %139 = load i64*, i64** %array_a, align 8
  %140 = load i64, i64* %i_a, align 8
  %add.ptr155 = getelementptr inbounds i64, i64* %139, i64 %140
  %141 = bitcast i64* %add.ptr155 to i8*
  %142 = load i64, i64* %copy_count, align 8
  %mul = mul i64 %142, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %138, i8* align 1 %141, i64 %mul, i1 false)
  br label %if.end164

if.else156:                                       ; preds = %if.then151
  %143 = load i64, i64* %len_b, align 8
  %144 = load i64, i64* %i_b, align 8
  %sub157 = sub i64 %143, %144
  store i64 %sub157, i64* %copy_count, align 8
  %cmp158 = icmp sgt i64 %sub157, 0
  br i1 %cmp158, label %if.then159, label %if.end163

if.then159:                                       ; preds = %if.else156
  %145 = load i64*, i64** %array_u, align 8
  %146 = load i64, i64* %i_u, align 8
  %add.ptr160 = getelementptr inbounds i64, i64* %145, i64 %146
  %147 = bitcast i64* %add.ptr160 to i8*
  %148 = load i64*, i64** %array_b, align 8
  %149 = load i64, i64* %i_b, align 8
  %add.ptr161 = getelementptr inbounds i64, i64* %148, i64 %149
  %150 = bitcast i64* %add.ptr161 to i8*
  %151 = load i64, i64* %copy_count, align 8
  %mul162 = mul i64 %151, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %147, i8* align 1 %150, i64 %mul162, i1 false)
  br label %if.end163

if.end163:                                        ; preds = %if.then159, %if.else156
  br label %if.end164

if.end164:                                        ; preds = %if.end163, %if.then154
  br label %if.end165

if.end165:                                        ; preds = %if.end164, %if.end149
  %152 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %153 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  %154 = load %struct.sv*, %struct.sv** %153, align 8
  %cmp166 = icmp eq %struct.sv* %152, %154
  br i1 %cmp166, label %if.then169, label %lor.lhs.false167

lor.lhs.false167:                                 ; preds = %if.end165
  %155 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %156 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  %157 = load %struct.sv*, %struct.sv** %156, align 8
  %cmp168 = icmp eq %struct.sv* %155, %157
  br i1 %cmp168, label %if.then169, label %if.end177

if.then169:                                       ; preds = %lor.lhs.false167, %if.end165
  %158 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  %159 = load %struct.sv*, %struct.sv** %158, align 8
  %sv_flags170 = getelementptr inbounds %struct.sv, %struct.sv* %159, i32 0, i32 2
  %160 = load i32, i32* %sv_flags170, align 4
  %and171 = and i32 %160, 524288
  %tobool172 = icmp ne i32 %and171, 0
  br i1 %tobool172, label %if.then173, label %if.else175

if.then173:                                       ; preds = %if.then169
  %161 = load %struct.sv*, %struct.sv** %u, align 8
  %call174 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %161)
  br label %if.end176

if.else175:                                       ; preds = %if.then169
  %162 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  %163 = load %struct.sv*, %struct.sv** %162, align 8
  %164 = bitcast %struct.sv* %163 to i8*
  %165 = bitcast i8* %164 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %165)
  br label %if.end176

if.end176:                                        ; preds = %if.else175, %if.then173
  br label %if.end177

if.end177:                                        ; preds = %if.end176, %lor.lhs.false167
  %166 = load %struct.sv*, %struct.sv** %u, align 8
  %167 = load %struct.sv**, %struct.sv*** %output.addr, align 8
  store %struct.sv* %166, %struct.sv** %167, align 8
  br label %return

return:                                           ; preds = %if.end177, %if.end60, %if.end21
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_invlist_clone(%struct.sv* %invlist) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  %new_invlist = alloca %struct.sv*, align 8
  %physical_length = alloca i64, align 8
  %offset = alloca i8, align 1
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call i64 @S__invlist_len(%struct.sv* %0)
  %add = add i64 %call, 1
  %call1 = call %struct.sv* @Perl__new_invlist(i64 %add)
  store %struct.sv* %call1, %struct.sv** %new_invlist, align 8
  %1 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 0
  %2 = load i8*, i8** %sv_any, align 8
  %3 = bitcast i8* %2 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %3, i32 0, i32 2
  %4 = load i64, i64* %xpv_cur, align 8
  store i64 %4, i64* %physical_length, align 8
  %5 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call2 = call i8* @S_get_invlist_offset_addr(%struct.sv* %5)
  %6 = load i8, i8* %call2, align 1
  %tobool = trunc i8 %6 to i1
  %frombool = zext i1 %tobool to i8
  store i8 %frombool, i8* %offset, align 1
  %7 = load i8, i8* %offset, align 1
  %tobool3 = trunc i8 %7 to i1
  %8 = load %struct.sv*, %struct.sv** %new_invlist, align 8
  %call4 = call i8* @S_get_invlist_offset_addr(%struct.sv* %8)
  %frombool5 = zext i1 %tobool3 to i8
  store i8 %frombool5, i8* %call4, align 1
  %9 = load %struct.sv*, %struct.sv** %new_invlist, align 8
  %10 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call6 = call i64 @S__invlist_len(%struct.sv* %10)
  %11 = load i8, i8* %offset, align 1
  %tobool7 = trunc i8 %11 to i1
  call void @S_invlist_set_len(%struct.sv* %9, i64 %call6, i1 zeroext %tobool7)
  %12 = load %struct.sv*, %struct.sv** %new_invlist, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %13 = load i8*, i8** %svu_pv, align 8
  %14 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_u8 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 3
  %svu_pv9 = bitcast %union.anon* %sv_u8 to i8**
  %15 = load i8*, i8** %svu_pv9, align 8
  %16 = load i64, i64* %physical_length, align 8
  %mul = mul i64 %16, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %15, i64 %mul, i1 false)
  %17 = load %struct.sv*, %struct.sv** %new_invlist, align 8
  ret %struct.sv* %17
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl__invlist_invert(%struct.sv* %invlist) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call i64 @S__invlist_len(%struct.sv* %0)
  %cmp = icmp eq i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  call void @S__append_range_to_invlist(%struct.sv* %1, i64 0, i64 -1)
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call1 = call i8* @S_get_invlist_offset_addr(%struct.sv* %2)
  %3 = load i8, i8* %call1, align 1
  %tobool = trunc i8 %3 to i1
  %lnot = xor i1 %tobool, true
  %4 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call2 = call i8* @S_get_invlist_offset_addr(%struct.sv* %4)
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %call2, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare dso_local %struct.sv* @Perl_sv_2mortal(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S__append_range_to_invlist(%struct.sv* %invlist, i64 %start, i64 %end) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %array = alloca i64*, align 8
  %max = alloca i64, align 8
  %len = alloca i64, align 8
  %offset = alloca i8, align 1
  %final_element = alloca i64, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  store i64 %start, i64* %start.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call i64 @S_invlist_max(%struct.sv* %0)
  store i64 %call, i64* %max, align 8
  %1 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call1 = call i64 @S__invlist_len(%struct.sv* %1)
  store i64 %call1, i64* %len, align 8
  %2 = load i64, i64* %len, align 8
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %start.addr, align 8
  %cmp2 = icmp ne i64 %3, 0
  %frombool = zext i1 %cmp2 to i8
  store i8 %frombool, i8* %offset, align 1
  %4 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %5 = load i8, i8* %offset, align 1
  %tobool = trunc i8 %5 to i1
  %lnot = xor i1 %tobool, true
  %call3 = call i64* @S__invlist_array_init(%struct.sv* %4, i1 zeroext %lnot)
  store i64* %call3, i64** %array, align 8
  br label %if.end26

if.else:                                          ; preds = %entry
  %6 = load i64, i64* %len, align 8
  %sub = sub i64 %6, 1
  store i64 %sub, i64* %final_element, align 8
  %7 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call4 = call i64* @S_invlist_array(%struct.sv* %7)
  store i64* %call4, i64** %array, align 8
  %8 = load i64*, i64** %array, align 8
  %9 = load i64, i64* %final_element, align 8
  %arrayidx = getelementptr inbounds i64, i64* %8, i64 %9
  %10 = load i64, i64* %arrayidx, align 8
  %11 = load i64, i64* %start.addr, align 8
  %cmp5 = icmp ugt i64 %10, %11
  br i1 %cmp5, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %12 = load i64, i64* %final_element, align 8
  %and = and i64 %12, 1
  %tobool6 = icmp ne i64 %and, 0
  br i1 %tobool6, label %if.end, label %if.then7

if.then7:                                         ; preds = %lor.lhs.false, %if.else
  %13 = load i64*, i64** %array, align 8
  %14 = load i64, i64* %final_element, align 8
  %arrayidx8 = getelementptr inbounds i64, i64* %13, i64 %14
  %15 = load i64, i64* %arrayidx8, align 8
  %16 = load i64, i64* %start.addr, align 8
  %17 = load i64, i64* %final_element, align 8
  %and9 = and i64 %17, 1
  %tobool10 = icmp ne i64 %and9, 0
  %lnot11 = xor i1 %tobool10, true
  %18 = zext i1 %lnot11 to i64
  %cond = select i1 %lnot11, i32 116, i32 102
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([116 x i8], [116 x i8]* @.str.226, i64 0, i64 0), i64 %15, i64 %16, i32 %cond)
  br label %if.end

if.end:                                           ; preds = %if.then7, %lor.lhs.false
  %19 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call12 = call i8* @S_get_invlist_offset_addr(%struct.sv* %19)
  %20 = load i8, i8* %call12, align 1
  %tobool13 = trunc i8 %20 to i1
  %frombool14 = zext i1 %tobool13 to i8
  store i8 %frombool14, i8* %offset, align 1
  %21 = load i64*, i64** %array, align 8
  %22 = load i64, i64* %final_element, align 8
  %arrayidx15 = getelementptr inbounds i64, i64* %21, i64 %22
  %23 = load i64, i64* %arrayidx15, align 8
  %24 = load i64, i64* %start.addr, align 8
  %cmp16 = icmp eq i64 %23, %24
  br i1 %cmp16, label %if.then17, label %if.end25

if.then17:                                        ; preds = %if.end
  %25 = load i64, i64* %end.addr, align 8
  %cmp18 = icmp ne i64 %25, -1
  br i1 %cmp18, label %if.then19, label %if.else21

if.then19:                                        ; preds = %if.then17
  %26 = load i64, i64* %end.addr, align 8
  %add = add i64 %26, 1
  %27 = load i64*, i64** %array, align 8
  %28 = load i64, i64* %final_element, align 8
  %arrayidx20 = getelementptr inbounds i64, i64* %27, i64 %28
  store i64 %add, i64* %arrayidx20, align 8
  br label %if.end24

if.else21:                                        ; preds = %if.then17
  %29 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %30 = load i64, i64* %len, align 8
  %sub22 = sub i64 %30, 1
  %31 = load i8, i8* %offset, align 1
  %tobool23 = trunc i8 %31 to i1
  call void @S_invlist_set_len(%struct.sv* %29, i64 %sub22, i1 zeroext %tobool23)
  br label %if.end24

if.end24:                                         ; preds = %if.else21, %if.then19
  br label %if.end45

if.end25:                                         ; preds = %if.end
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then
  %32 = load i64, i64* %len, align 8
  %add27 = add i64 %32, 2
  store i64 %add27, i64* %len, align 8
  %33 = load i64, i64* %max, align 8
  %34 = load i64, i64* %len, align 8
  %cmp28 = icmp ult i64 %33, %34
  br i1 %cmp28, label %if.then29, label %if.else32

if.then29:                                        ; preds = %if.end26
  %35 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %36 = load i64, i64* %len, align 8
  call void @S_invlist_extend(%struct.sv* %35, i64 %36)
  %37 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %38 = load i64, i64* %len, align 8
  %39 = load i8, i8* %offset, align 1
  %tobool30 = trunc i8 %39 to i1
  call void @S_invlist_set_len(%struct.sv* %37, i64 %38, i1 zeroext %tobool30)
  %40 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call31 = call i64* @S_invlist_array(%struct.sv* %40)
  store i64* %call31, i64** %array, align 8
  br label %if.end34

if.else32:                                        ; preds = %if.end26
  %41 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %42 = load i64, i64* %len, align 8
  %43 = load i8, i8* %offset, align 1
  %tobool33 = trunc i8 %43 to i1
  call void @S_invlist_set_len(%struct.sv* %41, i64 %42, i1 zeroext %tobool33)
  br label %if.end34

if.end34:                                         ; preds = %if.else32, %if.then29
  %44 = load i64, i64* %start.addr, align 8
  %45 = load i64*, i64** %array, align 8
  %46 = load i64, i64* %len, align 8
  %sub35 = sub i64 %46, 2
  %arrayidx36 = getelementptr inbounds i64, i64* %45, i64 %sub35
  store i64 %44, i64* %arrayidx36, align 8
  %47 = load i64, i64* %end.addr, align 8
  %cmp37 = icmp ne i64 %47, -1
  br i1 %cmp37, label %if.then38, label %if.else42

if.then38:                                        ; preds = %if.end34
  %48 = load i64, i64* %end.addr, align 8
  %add39 = add i64 %48, 1
  %49 = load i64*, i64** %array, align 8
  %50 = load i64, i64* %len, align 8
  %sub40 = sub i64 %50, 1
  %arrayidx41 = getelementptr inbounds i64, i64* %49, i64 %sub40
  store i64 %add39, i64* %arrayidx41, align 8
  br label %if.end45

if.else42:                                        ; preds = %if.end34
  %51 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %52 = load i64, i64* %len, align 8
  %sub43 = sub i64 %52, 1
  %53 = load i8, i8* %offset, align 1
  %tobool44 = trunc i8 %53 to i1
  call void @S_invlist_set_len(%struct.sv* %51, i64 %sub43, i1 zeroext %tobool44)
  br label %if.end45

if.end45:                                         ; preds = %if.end24, %if.else42, %if.then38
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i64* @S__invlist_array_init(%struct.sv* %invlist, i1 zeroext %will_have_0) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  %will_have_0.addr = alloca i8, align 1
  %offset = alloca i8*, align 8
  %zero_addr = alloca i64*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %frombool = zext i1 %will_have_0 to i8
  store i8 %frombool, i8* %will_have_0.addr, align 1
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call i8* @S_get_invlist_offset_addr(%struct.sv* %0)
  store i8* %call, i8** %offset, align 8
  %1 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %2 = load i8*, i8** %svu_pv, align 8
  %3 = bitcast i8* %2 to i64*
  store i64* %3, i64** %zero_addr, align 8
  %4 = load i64*, i64** %zero_addr, align 8
  store i64 0, i64* %4, align 8
  %5 = load i8, i8* %will_have_0.addr, align 1
  %tobool = trunc i8 %5 to i1
  %conv = zext i1 %tobool to i32
  %xor = xor i32 1, %conv
  %tobool1 = icmp ne i32 %xor, 0
  %6 = load i8*, i8** %offset, align 8
  %frombool2 = zext i1 %tobool1 to i8
  store i8 %frombool2, i8* %6, align 1
  %7 = load i64*, i64** %zero_addr, align 8
  %8 = load i8*, i8** %offset, align 8
  %9 = load i8, i8* %8, align 1
  %tobool3 = trunc i8 %9 to i1
  %conv4 = zext i1 %tobool3 to i32
  %idx.ext = sext i32 %conv4 to i64
  %add.ptr = getelementptr inbounds i64, i64* %7, i64 %idx.ext
  ret i64* %add.ptr
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_invlist_trim(%struct.sv* %invlist) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  %_lEnGtH = alloca i64, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %2, i32 0, i32 2
  %3 = load i64, i64* %xpv_cur, align 8
  %add = add i64 %3, 1
  store i64 %add, i64* %_lEnGtH, align 8
  br label %do.body1

do.body1:                                         ; preds = %do.body
  br label %do.body2

do.body2:                                         ; preds = %do.body1
  %4 = load i64, i64* %_lEnGtH, align 8
  %5 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_any3 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 0
  %6 = load i8*, i8** %sv_any3, align 8
  %7 = bitcast i8* %6 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %7, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  store i64 %4, i64* %xpvlenu_len, align 8
  br label %do.end

do.end:                                           ; preds = %do.body2
  br label %do.body4

do.body4:                                         ; preds = %do.end
  %8 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %9 = load i8*, i8** %svu_pv, align 8
  %10 = load i64, i64* %_lEnGtH, align 8
  %call = call i8* @Perl_safesysrealloc(i8* %9, i64 %10)
  %11 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_u5 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 3
  %svu_pv6 = bitcast %union.anon* %sv_u5 to i8**
  store i8* %call, i8** %svu_pv6, align 8
  br label %do.end7

do.end7:                                          ; preds = %do.body4
  br label %do.end8

do.end8:                                          ; preds = %do.end7
  br label %do.end9

do.end9:                                          ; preds = %do.end8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %a, %struct.sv* %b, i1 zeroext %complement_b, %struct.sv** %i) #0 {
entry:
  %a.addr = alloca %struct.sv*, align 8
  %b.addr = alloca %struct.sv*, align 8
  %complement_b.addr = alloca i8, align 1
  %i.addr = alloca %struct.sv**, align 8
  %array_a = alloca i64*, align 8
  %array_b = alloca i64*, align 8
  %len_a = alloca i64, align 8
  %len_b = alloca i64, align 8
  %r = alloca %struct.sv*, align 8
  %array_r = alloca i64*, align 8
  %len_r = alloca i64, align 8
  %i_a = alloca i64, align 8
  %i_b = alloca i64, align 8
  %i_r = alloca i64, align 8
  %count = alloca i64, align 8
  %make_temp = alloca i8, align 1
  %cp = alloca i64, align 8
  %cp_in_set = alloca i8, align 1
  %copy_count = alloca i64, align 8
  store %struct.sv* %a, %struct.sv** %a.addr, align 8
  store %struct.sv* %b, %struct.sv** %b.addr, align 8
  %frombool = zext i1 %complement_b to i8
  store i8 %frombool, i8* %complement_b.addr, align 1
  store %struct.sv** %i, %struct.sv*** %i.addr, align 8
  store i64 0, i64* %i_a, align 8
  store i64 0, i64* %i_b, align 8
  store i64 0, i64* %i_r, align 8
  store i64 0, i64* %count, align 8
  %0 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %cmp = icmp eq %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %call = call i64 @S__invlist_len(%struct.sv* %1)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %call, %cond.false ]
  store i64 %cond, i64* %len_a, align 8
  %2 = load i64, i64* %len_a, align 8
  %cmp1 = icmp eq i64 %2, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %3 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %call2 = call i64 @S__invlist_len(%struct.sv* %3)
  store i64 %call2, i64* %len_b, align 8
  %cmp3 = icmp eq i64 %call2, 0
  br i1 %cmp3, label %if.then, label %if.end50

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  store i8 0, i8* %make_temp, align 1
  %4 = load i64, i64* %len_a, align 8
  %cmp4 = icmp ne i64 %4, 0
  br i1 %cmp4, label %land.lhs.true, label %if.end22

land.lhs.true:                                    ; preds = %if.then
  %5 = load i8, i8* %complement_b.addr, align 1
  %tobool = trunc i8 %5 to i1
  br i1 %tobool, label %if.then5, label %if.end22

if.then5:                                         ; preds = %land.lhs.true
  %6 = load %struct.sv**, %struct.sv*** %i.addr, align 8
  %7 = load %struct.sv*, %struct.sv** %6, align 8
  %8 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %cmp6 = icmp ne %struct.sv* %7, %8
  br i1 %cmp6, label %if.then7, label %if.end17

if.then7:                                         ; preds = %if.then5
  %9 = load %struct.sv**, %struct.sv*** %i.addr, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  %11 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %cmp8 = icmp eq %struct.sv* %10, %11
  br i1 %cmp8, label %if.then9, label %if.end15

if.then9:                                         ; preds = %if.then7
  %12 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags, align 4
  %and = and i32 %13, 524288
  %tobool10 = icmp ne i32 %and, 0
  %14 = zext i1 %tobool10 to i64
  %cond11 = select i1 %tobool10, i32 1, i32 0
  %tobool12 = icmp ne i32 %cond11, 0
  %frombool13 = zext i1 %tobool12 to i8
  store i8 %frombool13, i8* %make_temp, align 1
  br i1 %tobool12, label %if.end, label %if.then14

if.then14:                                        ; preds = %if.then9
  %15 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %16 = bitcast %struct.sv* %15 to i8*
  %17 = bitcast i8* %16 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %17)
  br label %if.end

if.end:                                           ; preds = %if.then14, %if.then9
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then7
  %18 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %call16 = call %struct.sv* @S_invlist_clone(%struct.sv* %18)
  %19 = load %struct.sv**, %struct.sv*** %i.addr, align 8
  store %struct.sv* %call16, %struct.sv** %19, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.end15, %if.then5
  %20 = load i8, i8* %make_temp, align 1
  %tobool18 = trunc i8 %20 to i1
  br i1 %tobool18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end17
  %21 = load %struct.sv**, %struct.sv*** %i.addr, align 8
  %22 = load %struct.sv*, %struct.sv** %21, align 8
  %call20 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %22)
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.end17
  br label %return

if.end22:                                         ; preds = %land.lhs.true, %if.then
  %23 = load %struct.sv**, %struct.sv*** %i.addr, align 8
  %24 = load %struct.sv*, %struct.sv** %23, align 8
  %25 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %cmp23 = icmp eq %struct.sv* %24, %25
  br i1 %cmp23, label %if.then24, label %if.else

if.then24:                                        ; preds = %if.end22
  %26 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %27, 524288
  %tobool27 = icmp ne i32 %and26, 0
  %28 = zext i1 %tobool27 to i64
  %cond28 = select i1 %tobool27, i32 1, i32 0
  %tobool29 = icmp ne i32 %cond28, 0
  %frombool30 = zext i1 %tobool29 to i8
  store i8 %frombool30, i8* %make_temp, align 1
  br i1 %tobool29, label %if.end32, label %if.then31

if.then31:                                        ; preds = %if.then24
  %29 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %30 = bitcast %struct.sv* %29 to i8*
  %31 = bitcast i8* %30 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %31)
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %if.then24
  br label %if.end44

if.else:                                          ; preds = %if.end22
  %32 = load %struct.sv**, %struct.sv*** %i.addr, align 8
  %33 = load %struct.sv*, %struct.sv** %32, align 8
  %34 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %cmp33 = icmp eq %struct.sv* %33, %34
  br i1 %cmp33, label %if.then34, label %if.end43

if.then34:                                        ; preds = %if.else
  %35 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %36, 524288
  %tobool37 = icmp ne i32 %and36, 0
  %37 = zext i1 %tobool37 to i64
  %cond38 = select i1 %tobool37, i32 1, i32 0
  %tobool39 = icmp ne i32 %cond38, 0
  %frombool40 = zext i1 %tobool39 to i8
  store i8 %frombool40, i8* %make_temp, align 1
  br i1 %tobool39, label %if.end42, label %if.then41

if.then41:                                        ; preds = %if.then34
  %38 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %39 = bitcast %struct.sv* %38 to i8*
  %40 = bitcast i8* %39 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %40)
  br label %if.end42

if.end42:                                         ; preds = %if.then41, %if.then34
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.else
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.end32
  %call45 = call %struct.sv* @Perl__new_invlist(i64 0)
  %41 = load %struct.sv**, %struct.sv*** %i.addr, align 8
  store %struct.sv* %call45, %struct.sv** %41, align 8
  %42 = load i8, i8* %make_temp, align 1
  %tobool46 = trunc i8 %42 to i1
  br i1 %tobool46, label %if.then47, label %if.end49

if.then47:                                        ; preds = %if.end44
  %43 = load %struct.sv**, %struct.sv*** %i.addr, align 8
  %44 = load %struct.sv*, %struct.sv** %43, align 8
  %call48 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %44)
  br label %if.end49

if.end49:                                         ; preds = %if.then47, %if.end44
  br label %return

if.end50:                                         ; preds = %lor.lhs.false
  %45 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %call51 = call i64* @S_invlist_array(%struct.sv* %45)
  store i64* %call51, i64** %array_a, align 8
  %46 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %call52 = call i64* @S_invlist_array(%struct.sv* %46)
  store i64* %call52, i64** %array_b, align 8
  %47 = load i8, i8* %complement_b.addr, align 1
  %tobool53 = trunc i8 %47 to i1
  br i1 %tobool53, label %if.then54, label %if.end60

if.then54:                                        ; preds = %if.end50
  %48 = load i64*, i64** %array_b, align 8
  %arrayidx = getelementptr inbounds i64, i64* %48, i64 0
  %49 = load i64, i64* %arrayidx, align 8
  %cmp55 = icmp eq i64 %49, 0
  br i1 %cmp55, label %if.then56, label %if.else57

if.then56:                                        ; preds = %if.then54
  %50 = load i64*, i64** %array_b, align 8
  %incdec.ptr = getelementptr inbounds i64, i64* %50, i32 1
  store i64* %incdec.ptr, i64** %array_b, align 8
  %51 = load i64, i64* %len_b, align 8
  %dec = add i64 %51, -1
  store i64 %dec, i64* %len_b, align 8
  br label %if.end59

if.else57:                                        ; preds = %if.then54
  %52 = load i64*, i64** %array_b, align 8
  %incdec.ptr58 = getelementptr inbounds i64, i64* %52, i32 -1
  store i64* %incdec.ptr58, i64** %array_b, align 8
  %53 = load i64, i64* %len_b, align 8
  %inc = add i64 %53, 1
  store i64 %inc, i64* %len_b, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.else57, %if.then56
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.end50
  %54 = load i64, i64* %len_a, align 8
  %55 = load i64, i64* %len_b, align 8
  %add = add i64 %54, %55
  %call61 = call %struct.sv* @Perl__new_invlist(i64 %add)
  store %struct.sv* %call61, %struct.sv** %r, align 8
  %56 = load %struct.sv*, %struct.sv** %r, align 8
  %57 = load i64, i64* %len_a, align 8
  %cmp62 = icmp ugt i64 %57, 0
  br i1 %cmp62, label %land.lhs.true63, label %land.end

land.lhs.true63:                                  ; preds = %if.end60
  %58 = load i64*, i64** %array_a, align 8
  %arrayidx64 = getelementptr inbounds i64, i64* %58, i64 0
  %59 = load i64, i64* %arrayidx64, align 8
  %cmp65 = icmp eq i64 %59, 0
  br i1 %cmp65, label %land.lhs.true66, label %land.end

land.lhs.true66:                                  ; preds = %land.lhs.true63
  %60 = load i64, i64* %len_b, align 8
  %cmp67 = icmp ugt i64 %60, 0
  br i1 %cmp67, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true66
  %61 = load i64*, i64** %array_b, align 8
  %arrayidx68 = getelementptr inbounds i64, i64* %61, i64 0
  %62 = load i64, i64* %arrayidx68, align 8
  %cmp69 = icmp eq i64 %62, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true66, %land.lhs.true63, %if.end60
  %63 = phi i1 [ false, %land.lhs.true66 ], [ false, %land.lhs.true63 ], [ false, %if.end60 ], [ %cmp69, %land.rhs ]
  %call70 = call i64* @S__invlist_array_init(%struct.sv* %56, i1 zeroext %63)
  store i64* %call70, i64** %array_r, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end114, %land.end
  %64 = load i64, i64* %i_a, align 8
  %65 = load i64, i64* %len_a, align 8
  %cmp71 = icmp ult i64 %64, %65
  br i1 %cmp71, label %land.rhs72, label %land.end74

land.rhs72:                                       ; preds = %while.cond
  %66 = load i64, i64* %i_b, align 8
  %67 = load i64, i64* %len_b, align 8
  %cmp73 = icmp ult i64 %66, %67
  br label %land.end74

land.end74:                                       ; preds = %land.rhs72, %while.cond
  %68 = phi i1 [ false, %while.cond ], [ %cmp73, %land.rhs72 ]
  br i1 %68, label %while.body, label %while.end

while.body:                                       ; preds = %land.end74
  %69 = load i64*, i64** %array_a, align 8
  %70 = load i64, i64* %i_a, align 8
  %arrayidx75 = getelementptr inbounds i64, i64* %69, i64 %70
  %71 = load i64, i64* %arrayidx75, align 8
  %72 = load i64*, i64** %array_b, align 8
  %73 = load i64, i64* %i_b, align 8
  %arrayidx76 = getelementptr inbounds i64, i64* %72, i64 %73
  %74 = load i64, i64* %arrayidx76, align 8
  %cmp77 = icmp ult i64 %71, %74
  br i1 %cmp77, label %if.then85, label %lor.lhs.false78

lor.lhs.false78:                                  ; preds = %while.body
  %75 = load i64*, i64** %array_a, align 8
  %76 = load i64, i64* %i_a, align 8
  %arrayidx79 = getelementptr inbounds i64, i64* %75, i64 %76
  %77 = load i64, i64* %arrayidx79, align 8
  %78 = load i64*, i64** %array_b, align 8
  %79 = load i64, i64* %i_b, align 8
  %arrayidx80 = getelementptr inbounds i64, i64* %78, i64 %79
  %80 = load i64, i64* %arrayidx80, align 8
  %cmp81 = icmp eq i64 %77, %80
  br i1 %cmp81, label %land.lhs.true82, label %if.else91

land.lhs.true82:                                  ; preds = %lor.lhs.false78
  %81 = load i64, i64* %i_a, align 8
  %and83 = and i64 %81, 1
  %tobool84 = icmp ne i64 %and83, 0
  br i1 %tobool84, label %if.then85, label %if.else91

if.then85:                                        ; preds = %land.lhs.true82, %while.body
  %82 = load i64, i64* %i_a, align 8
  %and86 = and i64 %82, 1
  %tobool87 = icmp ne i64 %and86, 0
  %lnot = xor i1 %tobool87, true
  %frombool88 = zext i1 %lnot to i8
  store i8 %frombool88, i8* %cp_in_set, align 1
  %83 = load i64*, i64** %array_a, align 8
  %84 = load i64, i64* %i_a, align 8
  %inc89 = add i64 %84, 1
  store i64 %inc89, i64* %i_a, align 8
  %arrayidx90 = getelementptr inbounds i64, i64* %83, i64 %84
  %85 = load i64, i64* %arrayidx90, align 8
  store i64 %85, i64* %cp, align 8
  br label %if.end98

if.else91:                                        ; preds = %land.lhs.true82, %lor.lhs.false78
  %86 = load i64, i64* %i_b, align 8
  %and92 = and i64 %86, 1
  %tobool93 = icmp ne i64 %and92, 0
  %lnot94 = xor i1 %tobool93, true
  %frombool95 = zext i1 %lnot94 to i8
  store i8 %frombool95, i8* %cp_in_set, align 1
  %87 = load i64*, i64** %array_b, align 8
  %88 = load i64, i64* %i_b, align 8
  %inc96 = add i64 %88, 1
  store i64 %inc96, i64* %i_b, align 8
  %arrayidx97 = getelementptr inbounds i64, i64* %87, i64 %88
  %89 = load i64, i64* %arrayidx97, align 8
  store i64 %89, i64* %cp, align 8
  br label %if.end98

if.end98:                                         ; preds = %if.else91, %if.then85
  %90 = load i8, i8* %cp_in_set, align 1
  %tobool99 = trunc i8 %90 to i1
  br i1 %tobool99, label %if.then100, label %if.else107

if.then100:                                       ; preds = %if.end98
  %91 = load i64, i64* %count, align 8
  %inc101 = add i64 %91, 1
  store i64 %inc101, i64* %count, align 8
  %92 = load i64, i64* %count, align 8
  %cmp102 = icmp eq i64 %92, 2
  br i1 %cmp102, label %if.then103, label %if.end106

if.then103:                                       ; preds = %if.then100
  %93 = load i64, i64* %cp, align 8
  %94 = load i64*, i64** %array_r, align 8
  %95 = load i64, i64* %i_r, align 8
  %inc104 = add i64 %95, 1
  store i64 %inc104, i64* %i_r, align 8
  %arrayidx105 = getelementptr inbounds i64, i64* %94, i64 %95
  store i64 %93, i64* %arrayidx105, align 8
  br label %if.end106

if.end106:                                        ; preds = %if.then103, %if.then100
  br label %if.end114

if.else107:                                       ; preds = %if.end98
  %96 = load i64, i64* %count, align 8
  %cmp108 = icmp eq i64 %96, 2
  br i1 %cmp108, label %if.then109, label %if.end112

if.then109:                                       ; preds = %if.else107
  %97 = load i64, i64* %cp, align 8
  %98 = load i64*, i64** %array_r, align 8
  %99 = load i64, i64* %i_r, align 8
  %inc110 = add i64 %99, 1
  store i64 %inc110, i64* %i_r, align 8
  %arrayidx111 = getelementptr inbounds i64, i64* %98, i64 %99
  store i64 %97, i64* %arrayidx111, align 8
  br label %if.end112

if.end112:                                        ; preds = %if.then109, %if.else107
  %100 = load i64, i64* %count, align 8
  %dec113 = add i64 %100, -1
  store i64 %dec113, i64* %count, align 8
  br label %if.end114

if.end114:                                        ; preds = %if.end112, %if.end106
  br label %while.cond

while.end:                                        ; preds = %land.end74
  %101 = load i64, i64* %i_a, align 8
  %102 = load i64, i64* %len_a, align 8
  %cmp115 = icmp eq i64 %101, %102
  br i1 %cmp115, label %land.lhs.true116, label %lor.lhs.false119

land.lhs.true116:                                 ; preds = %while.end
  %103 = load i64, i64* %i_a, align 8
  %and117 = and i64 %103, 1
  %tobool118 = icmp ne i64 %and117, 0
  br i1 %tobool118, label %if.then124, label %lor.lhs.false119

lor.lhs.false119:                                 ; preds = %land.lhs.true116, %while.end
  %104 = load i64, i64* %i_b, align 8
  %105 = load i64, i64* %len_b, align 8
  %cmp120 = icmp eq i64 %104, %105
  br i1 %cmp120, label %land.lhs.true121, label %if.end126

land.lhs.true121:                                 ; preds = %lor.lhs.false119
  %106 = load i64, i64* %i_b, align 8
  %and122 = and i64 %106, 1
  %tobool123 = icmp ne i64 %and122, 0
  br i1 %tobool123, label %if.then124, label %if.end126

if.then124:                                       ; preds = %land.lhs.true121, %land.lhs.true116
  %107 = load i64, i64* %count, align 8
  %inc125 = add i64 %107, 1
  store i64 %inc125, i64* %count, align 8
  br label %if.end126

if.end126:                                        ; preds = %if.then124, %land.lhs.true121, %lor.lhs.false119
  %108 = load i64, i64* %i_r, align 8
  store i64 %108, i64* %len_r, align 8
  %109 = load i64, i64* %count, align 8
  %cmp127 = icmp uge i64 %109, 2
  br i1 %cmp127, label %if.then128, label %if.end132

if.then128:                                       ; preds = %if.end126
  %110 = load i64, i64* %len_a, align 8
  %111 = load i64, i64* %i_a, align 8
  %sub = sub i64 %110, %111
  %112 = load i64, i64* %len_b, align 8
  %113 = load i64, i64* %i_b, align 8
  %sub129 = sub i64 %112, %113
  %add130 = add i64 %sub, %sub129
  %114 = load i64, i64* %len_r, align 8
  %add131 = add i64 %114, %add130
  store i64 %add131, i64* %len_r, align 8
  br label %if.end132

if.end132:                                        ; preds = %if.then128, %if.end126
  %115 = load i64, i64* %len_r, align 8
  %116 = load %struct.sv*, %struct.sv** %r, align 8
  %call133 = call i64 @S__invlist_len(%struct.sv* %116)
  %cmp134 = icmp ne i64 %115, %call133
  br i1 %cmp134, label %if.then135, label %if.end139

if.then135:                                       ; preds = %if.end132
  %117 = load %struct.sv*, %struct.sv** %r, align 8
  %118 = load i64, i64* %len_r, align 8
  %119 = load %struct.sv*, %struct.sv** %r, align 8
  %call136 = call i8* @S_get_invlist_offset_addr(%struct.sv* %119)
  %120 = load i8, i8* %call136, align 1
  %tobool137 = trunc i8 %120 to i1
  call void @S_invlist_set_len(%struct.sv* %117, i64 %118, i1 zeroext %tobool137)
  %121 = load %struct.sv*, %struct.sv** %r, align 8
  call void @S_invlist_trim(%struct.sv* %121)
  %122 = load %struct.sv*, %struct.sv** %r, align 8
  %call138 = call i64* @S_invlist_array(%struct.sv* %122)
  store i64* %call138, i64** %array_r, align 8
  br label %if.end139

if.end139:                                        ; preds = %if.then135, %if.end132
  %123 = load i64, i64* %count, align 8
  %cmp140 = icmp uge i64 %123, 2
  br i1 %cmp140, label %if.then141, label %if.end155

if.then141:                                       ; preds = %if.end139
  %124 = load i64, i64* %len_a, align 8
  %125 = load i64, i64* %i_a, align 8
  %sub142 = sub i64 %124, %125
  store i64 %sub142, i64* %copy_count, align 8
  %cmp143 = icmp sgt i64 %sub142, 0
  br i1 %cmp143, label %if.then144, label %if.else146

if.then144:                                       ; preds = %if.then141
  %126 = load i64*, i64** %array_r, align 8
  %127 = load i64, i64* %i_r, align 8
  %add.ptr = getelementptr inbounds i64, i64* %126, i64 %127
  %128 = bitcast i64* %add.ptr to i8*
  %129 = load i64*, i64** %array_a, align 8
  %130 = load i64, i64* %i_a, align 8
  %add.ptr145 = getelementptr inbounds i64, i64* %129, i64 %130
  %131 = bitcast i64* %add.ptr145 to i8*
  %132 = load i64, i64* %copy_count, align 8
  %mul = mul i64 %132, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %131, i64 %mul, i1 false)
  br label %if.end154

if.else146:                                       ; preds = %if.then141
  %133 = load i64, i64* %len_b, align 8
  %134 = load i64, i64* %i_b, align 8
  %sub147 = sub i64 %133, %134
  store i64 %sub147, i64* %copy_count, align 8
  %cmp148 = icmp sgt i64 %sub147, 0
  br i1 %cmp148, label %if.then149, label %if.end153

if.then149:                                       ; preds = %if.else146
  %135 = load i64*, i64** %array_r, align 8
  %136 = load i64, i64* %i_r, align 8
  %add.ptr150 = getelementptr inbounds i64, i64* %135, i64 %136
  %137 = bitcast i64* %add.ptr150 to i8*
  %138 = load i64*, i64** %array_b, align 8
  %139 = load i64, i64* %i_b, align 8
  %add.ptr151 = getelementptr inbounds i64, i64* %138, i64 %139
  %140 = bitcast i64* %add.ptr151 to i8*
  %141 = load i64, i64* %copy_count, align 8
  %mul152 = mul i64 %141, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %137, i8* align 1 %140, i64 %mul152, i1 false)
  br label %if.end153

if.end153:                                        ; preds = %if.then149, %if.else146
  br label %if.end154

if.end154:                                        ; preds = %if.end153, %if.then144
  br label %if.end155

if.end155:                                        ; preds = %if.end154, %if.end139
  %142 = load %struct.sv*, %struct.sv** %a.addr, align 8
  %143 = load %struct.sv**, %struct.sv*** %i.addr, align 8
  %144 = load %struct.sv*, %struct.sv** %143, align 8
  %cmp156 = icmp eq %struct.sv* %142, %144
  br i1 %cmp156, label %if.then159, label %lor.lhs.false157

lor.lhs.false157:                                 ; preds = %if.end155
  %145 = load %struct.sv*, %struct.sv** %b.addr, align 8
  %146 = load %struct.sv**, %struct.sv*** %i.addr, align 8
  %147 = load %struct.sv*, %struct.sv** %146, align 8
  %cmp158 = icmp eq %struct.sv* %145, %147
  br i1 %cmp158, label %if.then159, label %if.end167

if.then159:                                       ; preds = %lor.lhs.false157, %if.end155
  %148 = load %struct.sv**, %struct.sv*** %i.addr, align 8
  %149 = load %struct.sv*, %struct.sv** %148, align 8
  %sv_flags160 = getelementptr inbounds %struct.sv, %struct.sv* %149, i32 0, i32 2
  %150 = load i32, i32* %sv_flags160, align 4
  %and161 = and i32 %150, 524288
  %tobool162 = icmp ne i32 %and161, 0
  br i1 %tobool162, label %if.then163, label %if.else165

if.then163:                                       ; preds = %if.then159
  %151 = load %struct.sv*, %struct.sv** %r, align 8
  %call164 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %151)
  br label %if.end166

if.else165:                                       ; preds = %if.then159
  %152 = load %struct.sv**, %struct.sv*** %i.addr, align 8
  %153 = load %struct.sv*, %struct.sv** %152, align 8
  %154 = bitcast %struct.sv* %153 to i8*
  %155 = bitcast i8* %154 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %155)
  br label %if.end166

if.end166:                                        ; preds = %if.else165, %if.then163
  br label %if.end167

if.end167:                                        ; preds = %if.end166, %lor.lhs.false157
  %156 = load %struct.sv*, %struct.sv** %r, align 8
  %157 = load %struct.sv**, %struct.sv*** %i.addr, align 8
  store %struct.sv* %156, %struct.sv** %157, align 8
  br label %return

return:                                           ; preds = %if.end167, %if.end49, %if.end21
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl__setup_canned_invlist(i64 %size, i64 %element0, i64** %other_elements_ptr) #0 {
entry:
  %size.addr = alloca i64, align 8
  %element0.addr = alloca i64, align 8
  %other_elements_ptr.addr = alloca i64**, align 8
  %invlist = alloca %struct.sv*, align 8
  %offset = alloca i8, align 1
  store i64 %size, i64* %size.addr, align 8
  store i64 %element0, i64* %element0.addr, align 8
  store i64** %other_elements_ptr, i64*** %other_elements_ptr.addr, align 8
  %0 = load i64, i64* %size.addr, align 8
  %call = call %struct.sv* @Perl__new_invlist(i64 %0)
  store %struct.sv* %call, %struct.sv** %invlist, align 8
  %1 = load %struct.sv*, %struct.sv** %invlist, align 8
  %2 = load i64, i64* %element0.addr, align 8
  %3 = load i64, i64* %element0.addr, align 8
  call void @S__append_range_to_invlist(%struct.sv* %1, i64 %2, i64 %3)
  %4 = load %struct.sv*, %struct.sv** %invlist, align 8
  %call1 = call i8* @S_get_invlist_offset_addr(%struct.sv* %4)
  %5 = load i8, i8* %call1, align 1
  %tobool = trunc i8 %5 to i1
  %frombool = zext i1 %tobool to i8
  store i8 %frombool, i8* %offset, align 1
  %6 = load %struct.sv*, %struct.sv** %invlist, align 8
  %7 = load i64, i64* %size.addr, align 8
  %8 = load i8, i8* %offset, align 1
  %tobool2 = trunc i8 %8 to i1
  call void @S_invlist_set_len(%struct.sv* %6, i64 %7, i1 zeroext %tobool2)
  %9 = load %struct.sv*, %struct.sv** %invlist, align 8
  %call3 = call i64* @S_invlist_array(%struct.sv* %9)
  %add.ptr = getelementptr inbounds i64, i64* %call3, i64 1
  %10 = load i64**, i64*** %other_elements_ptr.addr, align 8
  store i64* %add.ptr, i64** %10, align 8
  %11 = load %struct.sv*, %struct.sv** %invlist, align 8
  ret %struct.sv* %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl__invlist_contents(%struct.sv* %invlist) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %output = alloca %struct.sv*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %call = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.193, i64 0, i64 0), i64 1)
  store %struct.sv* %call, %struct.sv** %output, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  call void @S_invlist_iterinit(%struct.sv* %0)
  br label %while.cond

while.cond:                                       ; preds = %if.end5, %entry
  %1 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call1 = call zeroext i1 @S_invlist_iternext(%struct.sv* %1, i64* %start, i64* %end)
  br i1 %call1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i64, i64* %end, align 8
  %cmp = icmp eq i64 %2, -1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %3 = load %struct.sv*, %struct.sv** %output, align 8
  %4 = load i64, i64* %start, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.194, i64 0, i64 0), i64 %4)
  br label %if.end5

if.else:                                          ; preds = %while.body
  %5 = load i64, i64* %end, align 8
  %6 = load i64, i64* %start, align 8
  %cmp2 = icmp ne i64 %5, %6
  br i1 %cmp2, label %if.then3, label %if.else4

if.then3:                                         ; preds = %if.else
  %7 = load %struct.sv*, %struct.sv** %output, align 8
  %8 = load i64, i64* %start, align 8
  %9 = load i64, i64* %end, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %7, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.195, i64 0, i64 0), i64 %8, i64 %9)
  br label %if.end

if.else4:                                         ; preds = %if.else
  %10 = load %struct.sv*, %struct.sv** %output, align 8
  %11 = load i64, i64* %start, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %10, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.196, i64 0, i64 0), i64 %11)
  br label %if.end

if.end:                                           ; preds = %if.else4, %if.then3
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load %struct.sv*, %struct.sv** %output, align 8
  ret %struct.sv* %12
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_invlist_iterinit(%struct.sv* %invlist) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call i64* @S_get_invlist_iter_addr(%struct.sv* %0)
  store i64 0, i64* %call, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_invlist_iternext(%struct.sv* %invlist, i64* %start, i64* %end) #0 {
entry:
  %retval = alloca i1, align 1
  %invlist.addr = alloca %struct.sv*, align 8
  %start.addr = alloca i64*, align 8
  %end.addr = alloca i64*, align 8
  %pos = alloca i64*, align 8
  %len = alloca i64, align 8
  %array = alloca i64*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  store i64* %start, i64** %start.addr, align 8
  store i64* %end, i64** %end.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call i64* @S_get_invlist_iter_addr(%struct.sv* %0)
  store i64* %call, i64** %pos, align 8
  %1 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call1 = call i64 @S__invlist_len(%struct.sv* %1)
  store i64 %call1, i64* %len, align 8
  %2 = load i64*, i64** %pos, align 8
  %3 = load i64, i64* %2, align 8
  %4 = load i64, i64* %len, align 8
  %cmp = icmp uge i64 %3, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i64*, i64** %pos, align 8
  store i64 -1, i64* %5, align 8
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call2 = call i64* @S_invlist_array(%struct.sv* %6)
  store i64* %call2, i64** %array, align 8
  %7 = load i64*, i64** %array, align 8
  %8 = load i64*, i64** %pos, align 8
  %9 = load i64, i64* %8, align 8
  %inc = add i64 %9, 1
  store i64 %inc, i64* %8, align 8
  %arrayidx = getelementptr inbounds i64, i64* %7, i64 %9
  %10 = load i64, i64* %arrayidx, align 8
  %11 = load i64*, i64** %start.addr, align 8
  store i64 %10, i64* %11, align 8
  %12 = load i64*, i64** %pos, align 8
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %len, align 8
  %cmp3 = icmp uge i64 %13, %14
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.end
  %15 = load i64*, i64** %end.addr, align 8
  store i64 -1, i64* %15, align 8
  br label %if.end7

if.else:                                          ; preds = %if.end
  %16 = load i64*, i64** %array, align 8
  %17 = load i64*, i64** %pos, align 8
  %18 = load i64, i64* %17, align 8
  %inc5 = add i64 %18, 1
  store i64 %inc5, i64* %17, align 8
  %arrayidx6 = getelementptr inbounds i64, i64* %16, i64 %18
  %19 = load i64, i64* %arrayidx6, align 8
  %sub = sub i64 %19, 1
  %20 = load i64*, i64** %end.addr, align 8
  store i64 %sub, i64* %20, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then4
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end7, %if.then
  %21 = load i1, i1* %retval, align 1
  ret i1 %21
}

declare dso_local void @Perl_sv_catpvf(%struct.sv*, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl__invlist_dump(%struct._PerlIO** %file, i32 %level, i8* %indent, %struct.sv* %invlist) #0 {
entry:
  %file.addr = alloca %struct._PerlIO**, align 8
  %level.addr = alloca i32, align 4
  %indent.addr = alloca i8*, align 8
  %invlist.addr = alloca %struct.sv*, align 8
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %count = alloca i64, align 8
  store %struct._PerlIO** %file, %struct._PerlIO*** %file.addr, align 8
  store i32 %level, i32* %level.addr, align 4
  store i8* %indent, i8** %indent.addr, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  store i64 0, i64* %count, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call zeroext i1 @S_invlist_is_iterating(%struct.sv* %0)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %level.addr, align 4
  %2 = load %struct._PerlIO**, %struct._PerlIO*** %file.addr, align 8
  %3 = load i8*, i8** %indent.addr, align 8
  call void (i32, %struct._PerlIO**, i8*, ...) @Perl_dump_indent(i32 %1, %struct._PerlIO** %2, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.197, i64 0, i64 0), i8* %3)
  br label %while.end

if.end:                                           ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  call void @S_invlist_iterinit(%struct.sv* %4)
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %if.end
  %5 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call1 = call zeroext i1 @S_invlist_iternext(%struct.sv* %5, i64* %start, i64* %end)
  br i1 %call1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i64, i64* %end, align 8
  %cmp = icmp eq i64 %6, -1
  br i1 %cmp, label %if.then2, label %if.else

if.then2:                                         ; preds = %while.body
  %7 = load i32, i32* %level.addr, align 4
  %8 = load %struct._PerlIO**, %struct._PerlIO*** %file.addr, align 8
  %9 = load i8*, i8** %indent.addr, align 8
  %10 = load i64, i64* %count, align 8
  %11 = load i64, i64* %start, align 8
  call void (i32, %struct._PerlIO**, i8*, ...) @Perl_dump_indent(i32 %7, %struct._PerlIO** %8, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.198, i64 0, i64 0), i8* %9, i64 %10, i64 %11)
  br label %if.end7

if.else:                                          ; preds = %while.body
  %12 = load i64, i64* %end, align 8
  %13 = load i64, i64* %start, align 8
  %cmp3 = icmp ne i64 %12, %13
  br i1 %cmp3, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.else
  %14 = load i32, i32* %level.addr, align 4
  %15 = load %struct._PerlIO**, %struct._PerlIO*** %file.addr, align 8
  %16 = load i8*, i8** %indent.addr, align 8
  %17 = load i64, i64* %count, align 8
  %18 = load i64, i64* %start, align 8
  %19 = load i64, i64* %end, align 8
  call void (i32, %struct._PerlIO**, i8*, ...) @Perl_dump_indent(i32 %14, %struct._PerlIO** %15, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.199, i64 0, i64 0), i8* %16, i64 %17, i64 %18, i64 %19)
  br label %if.end6

if.else5:                                         ; preds = %if.else
  %20 = load i32, i32* %level.addr, align 4
  %21 = load %struct._PerlIO**, %struct._PerlIO*** %file.addr, align 8
  %22 = load i8*, i8** %indent.addr, align 8
  %23 = load i64, i64* %count, align 8
  %24 = load i64, i64* %start, align 8
  call void (i32, %struct._PerlIO**, i8*, ...) @Perl_dump_indent(i32 %20, %struct._PerlIO** %21, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.200, i64 0, i64 0), i8* %22, i64 %23, i64 %24)
  br label %if.end6

if.end6:                                          ; preds = %if.else5, %if.then4
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.then2
  %25 = load i64, i64* %count, align 8
  %add = add i64 %25, 2
  store i64 %add, i64* %count, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_invlist_is_iterating(%struct.sv* %invlist) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call i64* @S_get_invlist_iter_addr(%struct.sv* %0)
  %1 = load i64, i64* %call, align 8
  %cmp = icmp ult i64 %1, -1
  ret i1 %cmp
}

declare dso_local void @Perl_dump_indent(i32, %struct._PerlIO**, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl__load_PL_utf8_foldclosures() #0 {
entry:
  %dummy = alloca [14 x i8], align 1
  %0 = load %struct.sv*, %struct.sv** @PL_utf8_tofold, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [14 x i8], [14 x i8]* %dummy, i64 0, i64 0
  %call = call i64 @Perl__to_utf8_fold_flags(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.201, i64 0, i64 0), i8* %arraydecay, i64* null, i8 zeroext 2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.sv*, %struct.sv** @PL_utf8_tofold, align 8
  %call1 = call %struct.hv* @Perl__swash_inversion_hash(%struct.sv* %1)
  store %struct.hv* %call1, %struct.hv** @PL_utf8_foldclosures, align 8
  ret void
}

declare dso_local i64 @Perl__to_utf8_fold_flags(i8*, i8*, i64*, i8 zeroext) #1

declare dso_local %struct.hv* @Perl__swash_inversion_hash(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl__get_regclass_nonbitmap_data(%struct.regexp* %prog, %struct.regnode* %node, i1 zeroext %doinit, %struct.sv** %listsvp, %struct.sv** %only_utf8_locale_ptr, %struct.sv* %exclude_list) #0 {
entry:
  %prog.addr = alloca %struct.regexp*, align 8
  %node.addr = alloca %struct.regnode*, align 8
  %doinit.addr = alloca i8, align 1
  %listsvp.addr = alloca %struct.sv**, align 8
  %only_utf8_locale_ptr.addr = alloca %struct.sv**, align 8
  %exclude_list.addr = alloca %struct.sv*, align 8
  %sw = alloca %struct.sv*, align 8
  %si = alloca %struct.sv*, align 8
  %invlist = alloca %struct.sv*, align 8
  %progi = alloca %struct.regexp_internal*, align 8
  %data = alloca %struct.reg_data*, align 8
  %n = alloca i32, align 4
  %rv = alloca %struct.sv*, align 8
  %av = alloca %struct.av*, align 8
  %ary = alloca %struct.sv**, align 8
  %swash_init_flags = alloca i8, align 1
  %matches_string = alloca %struct.sv*, align 8
  %clone = alloca %struct.sv*, align 8
  store %struct.regexp* %prog, %struct.regexp** %prog.addr, align 8
  store %struct.regnode* %node, %struct.regnode** %node.addr, align 8
  %frombool = zext i1 %doinit to i8
  store i8 %frombool, i8* %doinit.addr, align 1
  store %struct.sv** %listsvp, %struct.sv*** %listsvp.addr, align 8
  store %struct.sv** %only_utf8_locale_ptr, %struct.sv*** %only_utf8_locale_ptr.addr, align 8
  store %struct.sv* %exclude_list, %struct.sv** %exclude_list.addr, align 8
  store %struct.sv* null, %struct.sv** %sw, align 8
  store %struct.sv* null, %struct.sv** %si, align 8
  store %struct.sv* null, %struct.sv** %invlist, align 8
  %0 = load %struct.regexp*, %struct.regexp** %prog.addr, align 8
  %pprivate = getelementptr inbounds %struct.regexp, %struct.regexp* %0, i32 0, i32 14
  %1 = load i8*, i8** %pprivate, align 8
  %2 = bitcast i8* %1 to %struct.regexp_internal*
  store %struct.regexp_internal* %2, %struct.regexp_internal** %progi, align 8
  %3 = load %struct.regexp*, %struct.regexp** %prog.addr, align 8
  %tobool = icmp ne %struct.regexp* %3, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.regexp_internal*, %struct.regexp_internal** %progi, align 8
  %data1 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %4, i32 0, i32 3
  %5 = load %struct.reg_data*, %struct.reg_data** %data1, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.reg_data* [ %5, %cond.true ], [ null, %cond.false ]
  store %struct.reg_data* %cond, %struct.reg_data** %data, align 8
  %6 = load %struct.reg_data*, %struct.reg_data** %data, align 8
  %tobool2 = icmp ne %struct.reg_data* %6, null
  br i1 %tobool2, label %land.lhs.true, label %if.end72

land.lhs.true:                                    ; preds = %cond.end
  %7 = load %struct.reg_data*, %struct.reg_data** %data, align 8
  %count = getelementptr inbounds %struct.reg_data, %struct.reg_data* %7, i32 0, i32 0
  %8 = load i32, i32* %count, align 8
  %tobool3 = icmp ne i32 %8, 0
  br i1 %tobool3, label %if.then, label %if.end72

if.then:                                          ; preds = %land.lhs.true
  %9 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %10 = bitcast %struct.regnode* %9 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %10, i32 0, i32 3
  %11 = load i32, i32* %arg1, align 4
  store i32 %11, i32* %n, align 4
  %12 = load %struct.reg_data*, %struct.reg_data** %data, align 8
  %what = getelementptr inbounds %struct.reg_data, %struct.reg_data* %12, i32 0, i32 1
  %13 = load i8*, i8** %what, align 8
  %14 = load i32, i32* %n, align 4
  %idxprom = zext i32 %14 to i64
  %arrayidx = getelementptr inbounds i8, i8* %13, i64 %idxprom
  %15 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %15 to i32
  %cmp = icmp eq i32 %conv, 115
  br i1 %cmp, label %if.then5, label %if.end71

if.then5:                                         ; preds = %if.then
  %16 = load %struct.reg_data*, %struct.reg_data** %data, align 8
  %data6 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %16, i32 0, i32 2
  %17 = load i32, i32* %n, align 4
  %idxprom7 = zext i32 %17 to i64
  %arrayidx8 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data6, i64 0, i64 %idxprom7
  %18 = load i8*, i8** %arrayidx8, align 8
  %19 = bitcast i8* %18 to %struct.sv*
  store %struct.sv* %19, %struct.sv** %rv, align 8
  %20 = load %struct.sv*, %struct.sv** %rv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %21 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %22 = bitcast %struct.sv* %21 to i8*
  %23 = bitcast i8* %22 to %struct.av*
  store %struct.av* %23, %struct.av** %av, align 8
  %24 = load %struct.av*, %struct.av** %av, align 8
  %sv_u9 = getelementptr inbounds %struct.av, %struct.av* %24, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u9 to %struct.sv***
  %25 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %25, %struct.sv*** %ary, align 8
  store i8 4, i8* %swash_init_flags, align 1
  %26 = load %struct.sv**, %struct.sv*** %ary, align 8
  %27 = load %struct.sv*, %struct.sv** %26, align 8
  store %struct.sv* %27, %struct.sv** %si, align 8
  %28 = load %struct.av*, %struct.av** %av, align 8
  %call = call i64 @S_av_top_index(%struct.av* %28)
  %cmp10 = icmp sge i64 %call, 2
  br i1 %cmp10, label %if.then12, label %if.end44

if.then12:                                        ; preds = %if.then5
  %29 = load %struct.sv**, %struct.sv*** %only_utf8_locale_ptr.addr, align 8
  %tobool13 = icmp ne %struct.sv** %29, null
  br i1 %tobool13, label %land.lhs.true14, label %if.else

land.lhs.true14:                                  ; preds = %if.then12
  %30 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx15 = getelementptr inbounds %struct.sv*, %struct.sv** %30, i64 2
  %31 = load %struct.sv*, %struct.sv** %arrayidx15, align 8
  %tobool16 = icmp ne %struct.sv* %31, null
  br i1 %tobool16, label %land.lhs.true17, label %if.else

land.lhs.true17:                                  ; preds = %land.lhs.true14
  %32 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx18 = getelementptr inbounds %struct.sv*, %struct.sv** %32, i64 2
  %33 = load %struct.sv*, %struct.sv** %arrayidx18, align 8
  %cmp19 = icmp ne %struct.sv* %33, @PL_sv_undef
  br i1 %cmp19, label %if.then21, label %if.else

if.then21:                                        ; preds = %land.lhs.true17
  %34 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx22 = getelementptr inbounds %struct.sv*, %struct.sv** %34, i64 2
  %35 = load %struct.sv*, %struct.sv** %arrayidx22, align 8
  %36 = load %struct.sv**, %struct.sv*** %only_utf8_locale_ptr.addr, align 8
  store %struct.sv* %35, %struct.sv** %36, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true17, %land.lhs.true14, %if.then12
  %37 = load %struct.sv**, %struct.sv*** %only_utf8_locale_ptr.addr, align 8
  store %struct.sv* null, %struct.sv** %37, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then21
  %38 = load %struct.av*, %struct.av** %av, align 8
  %call23 = call i64 @S_av_top_index(%struct.av* %38)
  %cmp24 = icmp sge i64 %call23, 3
  br i1 %cmp24, label %if.then26, label %if.else42

if.then26:                                        ; preds = %if.end
  %39 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx27 = getelementptr inbounds %struct.sv*, %struct.sv** %39, i64 3
  %40 = load %struct.sv*, %struct.sv** %arrayidx27, align 8
  store %struct.sv* %40, %struct.sv** %invlist, align 8
  %41 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx28 = getelementptr inbounds %struct.sv*, %struct.sv** %41, i64 4
  %42 = load %struct.sv*, %struct.sv** %arrayidx28, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags, align 4
  %and = and i32 %43, -2145386240
  %cmp29 = icmp eq i32 %and, -2147483392
  br i1 %cmp29, label %cond.true31, label %cond.false34

cond.true31:                                      ; preds = %if.then26
  %44 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx32 = getelementptr inbounds %struct.sv*, %struct.sv** %44, i64 4
  %45 = load %struct.sv*, %struct.sv** %arrayidx32, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any, align 8
  %47 = bitcast i8* %46 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %47, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %48 = load i64, i64* %xivu_uv, align 8
  %tobool33 = icmp ne i64 %48, 0
  br i1 %tobool33, label %if.then38, label %if.end41

cond.false34:                                     ; preds = %if.then26
  %49 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx35 = getelementptr inbounds %struct.sv*, %struct.sv** %49, i64 4
  %50 = load %struct.sv*, %struct.sv** %arrayidx35, align 8
  %call36 = call i64 @Perl_sv_2uv_flags(%struct.sv* %50, i32 2)
  %tobool37 = icmp ne i64 %call36, 0
  br i1 %tobool37, label %if.then38, label %if.end41

if.then38:                                        ; preds = %cond.false34, %cond.true31
  %51 = load i8, i8* %swash_init_flags, align 1
  %conv39 = zext i8 %51 to i32
  %or = or i32 %conv39, 1
  %conv40 = trunc i32 %or to i8
  store i8 %conv40, i8* %swash_init_flags, align 1
  br label %if.end41

if.end41:                                         ; preds = %if.then38, %cond.false34, %cond.true31
  br label %if.end43

if.else42:                                        ; preds = %if.end
  store %struct.sv* null, %struct.sv** %invlist, align 8
  br label %if.end43

if.end43:                                         ; preds = %if.else42, %if.end41
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then5
  %52 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx45 = getelementptr inbounds %struct.sv*, %struct.sv** %52, i64 1
  %53 = load %struct.sv*, %struct.sv** %arrayidx45, align 8
  %tobool46 = icmp ne %struct.sv* %53, null
  br i1 %tobool46, label %land.lhs.true47, label %if.else54

land.lhs.true47:                                  ; preds = %if.end44
  %54 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx48 = getelementptr inbounds %struct.sv*, %struct.sv** %54, i64 1
  %55 = load %struct.sv*, %struct.sv** %arrayidx48, align 8
  %sv_flags49 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags49, align 4
  %and50 = and i32 %56, 2048
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %if.then52, label %if.else54

if.then52:                                        ; preds = %land.lhs.true47
  %57 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx53 = getelementptr inbounds %struct.sv*, %struct.sv** %57, i64 1
  %58 = load %struct.sv*, %struct.sv** %arrayidx53, align 8
  store %struct.sv* %58, %struct.sv** %sw, align 8
  br label %if.end70

if.else54:                                        ; preds = %land.lhs.true47, %if.end44
  %59 = load i8, i8* %doinit.addr, align 1
  %tobool55 = trunc i8 %59 to i1
  br i1 %tobool55, label %land.lhs.true57, label %if.end69

land.lhs.true57:                                  ; preds = %if.else54
  %60 = load %struct.sv*, %struct.sv** %si, align 8
  %tobool58 = icmp ne %struct.sv* %60, null
  br i1 %tobool58, label %land.lhs.true59, label %lor.lhs.false

land.lhs.true59:                                  ; preds = %land.lhs.true57
  %61 = load %struct.sv*, %struct.sv** %si, align 8
  %cmp60 = icmp ne %struct.sv* %61, @PL_sv_undef
  br i1 %cmp60, label %if.then66, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true59, %land.lhs.true57
  %62 = load %struct.sv*, %struct.sv** %invlist, align 8
  %tobool62 = icmp ne %struct.sv* %62, null
  br i1 %tobool62, label %land.lhs.true63, label %if.end69

land.lhs.true63:                                  ; preds = %lor.lhs.false
  %63 = load %struct.sv*, %struct.sv** %invlist, align 8
  %cmp64 = icmp ne %struct.sv* %63, @PL_sv_undef
  br i1 %cmp64, label %if.then66, label %if.end69

if.then66:                                        ; preds = %land.lhs.true63, %land.lhs.true59
  %64 = load %struct.sv*, %struct.sv** %si, align 8
  %65 = load %struct.sv*, %struct.sv** %invlist, align 8
  %call67 = call %struct.sv* @Perl__core_swash_init(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.202, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), %struct.sv* %64, i32 1, i32 0, %struct.sv* %65, i8* %swash_init_flags)
  store %struct.sv* %call67, %struct.sv** %sw, align 8
  %66 = load %struct.av*, %struct.av** %av, align 8
  %67 = load %struct.sv*, %struct.sv** %sw, align 8
  %call68 = call %struct.sv** @Perl_av_store(%struct.av* %66, i64 1, %struct.sv* %67)
  br label %if.end69

if.end69:                                         ; preds = %if.then66, %land.lhs.true63, %lor.lhs.false, %if.else54
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %if.then52
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %if.then
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %land.lhs.true, %cond.end
  %68 = load %struct.sv**, %struct.sv*** %listsvp.addr, align 8
  %tobool73 = icmp ne %struct.sv** %68, null
  br i1 %tobool73, label %if.then74, label %if.end98

if.then74:                                        ; preds = %if.end72
  %call75 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i64 0)
  store %struct.sv* %call75, %struct.sv** %matches_string, align 8
  %69 = load %struct.sv*, %struct.sv** %sw, align 8
  %tobool76 = icmp ne %struct.sv* %69, null
  br i1 %tobool76, label %lor.lhs.false77, label %land.lhs.true81

lor.lhs.false77:                                  ; preds = %if.then74
  %70 = load %struct.sv*, %struct.sv** %sw, align 8
  %call78 = call %struct.sv* @Perl__get_swash_invlist(%struct.sv* %70)
  store %struct.sv* %call78, %struct.sv** %invlist, align 8
  %cmp79 = icmp eq %struct.sv* %call78, null
  br i1 %cmp79, label %land.lhs.true81, label %if.end87

land.lhs.true81:                                  ; preds = %lor.lhs.false77, %if.then74
  %71 = load %struct.sv*, %struct.sv** %si, align 8
  %tobool82 = icmp ne %struct.sv* %71, null
  br i1 %tobool82, label %land.lhs.true83, label %if.end87

land.lhs.true83:                                  ; preds = %land.lhs.true81
  %72 = load %struct.sv*, %struct.sv** %si, align 8
  %cmp84 = icmp ne %struct.sv* %72, @PL_sv_undef
  br i1 %cmp84, label %if.then86, label %if.end87

if.then86:                                        ; preds = %land.lhs.true83
  %73 = load %struct.sv*, %struct.sv** %matches_string, align 8
  %74 = load %struct.sv*, %struct.sv** %si, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %73, %struct.sv* %74, i32 2)
  br label %if.end87

if.end87:                                         ; preds = %if.then86, %land.lhs.true83, %land.lhs.true81, %lor.lhs.false77
  %75 = load %struct.sv*, %struct.sv** %invlist, align 8
  %tobool88 = icmp ne %struct.sv* %75, null
  br i1 %tobool88, label %if.then89, label %if.end97

if.then89:                                        ; preds = %if.end87
  %76 = load %struct.sv*, %struct.sv** %exclude_list.addr, align 8
  %tobool90 = icmp ne %struct.sv* %76, null
  br i1 %tobool90, label %if.then91, label %if.else94

if.then91:                                        ; preds = %if.then89
  %77 = load %struct.sv*, %struct.sv** %invlist, align 8
  %call92 = call %struct.sv* @S_invlist_clone(%struct.sv* %77)
  store %struct.sv* %call92, %struct.sv** %clone, align 8
  %78 = load %struct.sv*, %struct.sv** %clone, align 8
  %79 = load %struct.sv*, %struct.sv** %exclude_list.addr, align 8
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %78, %struct.sv* %79, i1 zeroext true, %struct.sv** %clone)
  %80 = load %struct.sv*, %struct.sv** %matches_string, align 8
  %81 = load %struct.sv*, %struct.sv** %clone, align 8
  %call93 = call %struct.sv* @Perl__invlist_contents(%struct.sv* %81)
  call void @Perl_sv_catsv_flags(%struct.sv* %80, %struct.sv* %call93, i32 2)
  %82 = load %struct.sv*, %struct.sv** %clone, align 8
  %83 = bitcast %struct.sv* %82 to i8*
  %84 = bitcast i8* %83 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %84)
  br label %if.end96

if.else94:                                        ; preds = %if.then89
  %85 = load %struct.sv*, %struct.sv** %matches_string, align 8
  %86 = load %struct.sv*, %struct.sv** %invlist, align 8
  %call95 = call %struct.sv* @Perl__invlist_contents(%struct.sv* %86)
  call void @Perl_sv_catsv_flags(%struct.sv* %85, %struct.sv* %call95, i32 2)
  br label %if.end96

if.end96:                                         ; preds = %if.else94, %if.then91
  br label %if.end97

if.end97:                                         ; preds = %if.end96, %if.end87
  %87 = load %struct.sv*, %struct.sv** %matches_string, align 8
  %88 = load %struct.sv**, %struct.sv*** %listsvp.addr, align 8
  store %struct.sv* %87, %struct.sv** %88, align 8
  br label %if.end98

if.end98:                                         ; preds = %if.end97, %if.end72
  %89 = load %struct.sv*, %struct.sv** %sw, align 8
  ret %struct.sv* %89
}

declare dso_local i64 @Perl_sv_2uv_flags(%struct.sv*, i32) #1

declare dso_local %struct.sv* @Perl__core_swash_init(i8*, i8*, %struct.sv*, i32, i32, %struct.sv*, i8*) #1

declare dso_local %struct.sv** @Perl_av_store(%struct.av*, i64, %struct.sv*) #1

declare dso_local %struct.sv* @Perl__get_swash_invlist(%struct.sv*) #1

declare dso_local void @Perl_sv_catsv_flags(%struct.sv*, %struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_regdump(%struct.regexp* %r) #0 {
entry:
  %r.addr = alloca %struct.regexp*, align 8
  store %struct.regexp* %r, %struct.regexp** %r.addr, align 8
  %0 = load %struct.regexp*, %struct.regexp** %r.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_regprop(%struct.regexp* %prog, %struct.sv* %sv, %struct.regnode* %o, %struct.regmatch_info* %reginfo, %struct.RExC_state_t* %pRExC_state) #0 {
entry:
  %prog.addr = alloca %struct.regexp*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %o.addr = alloca %struct.regnode*, align 8
  %reginfo.addr = alloca %struct.regmatch_info*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  store %struct.regexp* %prog, %struct.regexp** %prog.addr, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.regnode* %o, %struct.regnode** %o.addr, align 8
  store %struct.regmatch_info* %reginfo, %struct.regmatch_info** %reginfo.addr, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load %struct.regnode*, %struct.regnode** %o.addr, align 8
  %2 = load %struct.regexp*, %struct.regexp** %prog.addr, align 8
  %3 = load %struct.regmatch_info*, %struct.regmatch_info** %reginfo.addr, align 8
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_pregfree(%struct.p5rx* %r) #0 {
entry:
  %r.addr = alloca %struct.p5rx*, align 8
  store %struct.p5rx* %r, %struct.p5rx** %r.addr, align 8
  %0 = load %struct.p5rx*, %struct.p5rx** %r.addr, align 8
  %1 = bitcast %struct.p5rx* %0 to i8*
  %2 = bitcast i8* %1 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %2)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_pregfree2(%struct.p5rx* %rx) #0 {
entry:
  %rx.addr = alloca %struct.p5rx*, align 8
  %r = alloca %struct.regexp*, align 8
  store %struct.p5rx* %rx, %struct.p5rx** %rx.addr, align 8
  %0 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %call = call %struct.regexp* @S_ReANY(%struct.p5rx* %0)
  store %struct.regexp* %call, %struct.regexp** %r, align 8
  %1 = load %struct.regexp*, %struct.regexp** %r, align 8
  %mother_re = getelementptr inbounds %struct.regexp, %struct.regexp* %1, i32 0, i32 5
  %2 = load %struct.p5rx*, %struct.p5rx** %mother_re, align 8
  %tobool = icmp ne %struct.p5rx* %2, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.regexp*, %struct.regexp** %r, align 8
  %mother_re1 = getelementptr inbounds %struct.regexp, %struct.regexp* %3, i32 0, i32 5
  %4 = load %struct.p5rx*, %struct.p5rx** %mother_re1, align 8
  %5 = bitcast %struct.p5rx* %4 to i8*
  %6 = bitcast i8* %5 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %6)
  br label %if.end5

if.else:                                          ; preds = %entry
  %7 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %tobool2 = icmp ne %struct.p5rx* %7, null
  br i1 %tobool2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %8 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %call4 = call %struct.regexp* @S_ReANY(%struct.p5rx* %8)
  %engine = getelementptr inbounds %struct.regexp, %struct.regexp* %call4, i32 0, i32 4
  %9 = load %struct.regexp_engine*, %struct.regexp_engine** %engine, align 8
  %free = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %9, i32 0, i32 4
  %10 = load void (%struct.p5rx*)*, void (%struct.p5rx*)** %free, align 8
  %11 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  call void %10(%struct.p5rx* %11)
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.else
  %12 = load %struct.regexp*, %struct.regexp** %r, align 8
  %paren_names = getelementptr inbounds %struct.regexp, %struct.regexp* %12, i32 0, i32 6
  %13 = load %struct.hv*, %struct.hv** %paren_names, align 8
  %14 = bitcast %struct.hv* %13 to i8*
  %15 = bitcast i8* %14 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %15)
  %16 = load %struct.regexp*, %struct.regexp** %r, align 8
  %xpv_len_u = getelementptr inbounds %struct.regexp, %struct.regexp* %16, i32 0, i32 3
  %xpvlenu_pv = bitcast %union.anon.6* %xpv_len_u to i8**
  %17 = load i8*, i8** %xpvlenu_pv, align 8
  call void @Perl_safesysfree(i8* %17)
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then
  %18 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs = getelementptr inbounds %struct.regexp, %struct.regexp* %18, i32 0, i32 11
  %19 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs, align 8
  %tobool6 = icmp ne %struct.reg_substr_data* %19, null
  br i1 %tobool6, label %if.then7, label %if.end21

if.then7:                                         ; preds = %if.end5
  %20 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs8 = getelementptr inbounds %struct.regexp, %struct.regexp* %20, i32 0, i32 11
  %21 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs8, align 8
  %data = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %21, i32 0, i32 1
  %arrayidx = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data, i64 0, i64 0
  %substr = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx, i32 0, i32 2
  %22 = load %struct.sv*, %struct.sv** %substr, align 8
  %23 = bitcast %struct.sv* %22 to i8*
  %24 = bitcast i8* %23 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %24)
  %25 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs9 = getelementptr inbounds %struct.regexp, %struct.regexp* %25, i32 0, i32 11
  %26 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs9, align 8
  %data10 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %26, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data10, i64 0, i64 0
  %utf8_substr = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx11, i32 0, i32 3
  %27 = load %struct.sv*, %struct.sv** %utf8_substr, align 8
  %28 = bitcast %struct.sv* %27 to i8*
  %29 = bitcast i8* %28 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %29)
  %30 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs12 = getelementptr inbounds %struct.regexp, %struct.regexp* %30, i32 0, i32 11
  %31 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs12, align 8
  %data13 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %31, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data13, i64 0, i64 1
  %substr15 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx14, i32 0, i32 2
  %32 = load %struct.sv*, %struct.sv** %substr15, align 8
  %33 = bitcast %struct.sv* %32 to i8*
  %34 = bitcast i8* %33 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %34)
  %35 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs16 = getelementptr inbounds %struct.regexp, %struct.regexp* %35, i32 0, i32 11
  %36 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs16, align 8
  %data17 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %36, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data17, i64 0, i64 1
  %utf8_substr19 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx18, i32 0, i32 3
  %37 = load %struct.sv*, %struct.sv** %utf8_substr19, align 8
  %38 = bitcast %struct.sv* %37 to i8*
  %39 = bitcast i8* %38 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %39)
  %40 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs20 = getelementptr inbounds %struct.regexp, %struct.regexp* %40, i32 0, i32 11
  %41 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs20, align 8
  %42 = bitcast %struct.reg_substr_data* %41 to i8*
  call void @Perl_safesysfree(i8* %42)
  br label %if.end21

if.end21:                                         ; preds = %if.then7, %if.end5
  br label %do.body

do.body:                                          ; preds = %if.end21
  %43 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %call22 = call %struct.regexp* @S_ReANY(%struct.p5rx* %43)
  %saved_copy = getelementptr inbounds %struct.regexp, %struct.regexp* %call22, i32 0, i32 19
  %44 = load %struct.sv*, %struct.sv** %saved_copy, align 8
  %tobool23 = icmp ne %struct.sv* %44, null
  br i1 %tobool23, label %if.then24, label %if.end32

if.then24:                                        ; preds = %do.body
  %45 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %call25 = call %struct.regexp* @S_ReANY(%struct.p5rx* %45)
  %saved_copy26 = getelementptr inbounds %struct.regexp, %struct.regexp* %call25, i32 0, i32 19
  %46 = load %struct.sv*, %struct.sv** %saved_copy26, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags, align 4
  %and = and i32 %47, 427886592
  %tobool27 = icmp ne i32 %and, 0
  br i1 %tobool27, label %if.then28, label %if.end31

if.then28:                                        ; preds = %if.then24
  %48 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %call29 = call %struct.regexp* @S_ReANY(%struct.p5rx* %48)
  %saved_copy30 = getelementptr inbounds %struct.regexp, %struct.regexp* %call29, i32 0, i32 19
  %49 = load %struct.sv*, %struct.sv** %saved_copy30, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %49, i32 4)
  br label %if.end31

if.end31:                                         ; preds = %if.then28, %if.then24
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %do.body
  %50 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %call33 = call %struct.regexp* @S_ReANY(%struct.p5rx* %50)
  %extflags = getelementptr inbounds %struct.regexp, %struct.regexp* %call33, i32 0, i32 7
  %51 = load i32, i32* %extflags, align 8
  %and34 = and i32 %51, 33554432
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.then36, label %if.end41

if.then36:                                        ; preds = %if.end32
  %52 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %call37 = call %struct.regexp* @S_ReANY(%struct.p5rx* %52)
  %subbeg = getelementptr inbounds %struct.regexp, %struct.regexp* %call37, i32 0, i32 18
  %53 = load i8*, i8** %subbeg, align 8
  call void @Perl_safesysfree(i8* %53)
  %54 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %call38 = call %struct.regexp* @S_ReANY(%struct.p5rx* %54)
  %extflags39 = getelementptr inbounds %struct.regexp, %struct.regexp* %call38, i32 0, i32 7
  %55 = load i32, i32* %extflags39, align 8
  %and40 = and i32 %55, -33554433
  store i32 %and40, i32* %extflags39, align 8
  br label %if.end41

if.end41:                                         ; preds = %if.then36, %if.end32
  br label %do.end

do.end:                                           ; preds = %if.end41
  %56 = load %struct.regexp*, %struct.regexp** %r, align 8
  %saved_copy42 = getelementptr inbounds %struct.regexp, %struct.regexp* %56, i32 0, i32 19
  %57 = load %struct.sv*, %struct.sv** %saved_copy42, align 8
  %58 = bitcast %struct.sv* %57 to i8*
  %59 = bitcast i8* %58 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %59)
  %60 = load %struct.regexp*, %struct.regexp** %r, align 8
  %offs = getelementptr inbounds %struct.regexp, %struct.regexp* %60, i32 0, i32 17
  %61 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs, align 8
  %62 = bitcast %struct.regexp_paren_pair* %61 to i8*
  call void @Perl_safesysfree(i8* %62)
  %63 = load %struct.regexp*, %struct.regexp** %r, align 8
  %qr_anoncv = getelementptr inbounds %struct.regexp, %struct.regexp* %63, i32 0, i32 25
  %64 = load %struct.cv*, %struct.cv** %qr_anoncv, align 8
  %65 = bitcast %struct.cv* %64 to i8*
  %66 = bitcast i8* %65 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %66)
  %67 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %sv_u = getelementptr inbounds %struct.p5rx, %struct.p5rx* %67, i32 0, i32 3
  %svu_rx = bitcast %union.anon.7* %sv_u to %struct.regexp**
  store %struct.regexp* null, %struct.regexp** %svu_rx, align 8
  ret void
}

declare dso_local void @Perl_sv_force_normal_flags(%struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.p5rx* @Perl_reg_temp_copy(%struct.p5rx* %ret_x, %struct.p5rx* %rx) #0 {
entry:
  %ret_x.addr = alloca %struct.p5rx*, align 8
  %rx.addr = alloca %struct.p5rx*, align 8
  %ret = alloca %struct.regexp*, align 8
  %r = alloca %struct.regexp*, align 8
  %islv = alloca i8, align 1
  %temp = alloca %struct.p5rx*, align 8
  %npar = alloca i32, align 4
  store %struct.p5rx* %ret_x, %struct.p5rx** %ret_x.addr, align 8
  store %struct.p5rx* %rx, %struct.p5rx** %rx.addr, align 8
  %0 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %call = call %struct.regexp* @S_ReANY(%struct.p5rx* %0)
  store %struct.regexp* %call, %struct.regexp** %r, align 8
  %1 = load %struct.p5rx*, %struct.p5rx** %ret_x.addr, align 8
  %tobool = icmp ne %struct.p5rx* %1, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.p5rx*, %struct.p5rx** %ret_x.addr, align 8
  %sv_flags = getelementptr inbounds %struct.p5rx, %struct.p5rx* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 255
  %cmp = icmp eq i32 %and, 10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %frombool = zext i1 %4 to i8
  store i8 %frombool, i8* %islv, align 1
  %5 = load %struct.p5rx*, %struct.p5rx** %ret_x.addr, align 8
  %tobool1 = icmp ne %struct.p5rx* %5, null
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %land.end
  %call2 = call %struct.sv* @Perl_newSV_type(i32 8)
  %6 = bitcast %struct.sv* %call2 to %struct.p5rx*
  store %struct.p5rx* %6, %struct.p5rx** %ret_x.addr, align 8
  br label %if.end22

if.else:                                          ; preds = %land.end
  %7 = load %struct.p5rx*, %struct.p5rx** %ret_x.addr, align 8
  %8 = bitcast %struct.p5rx* %7 to %struct.sv*
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %9, 1610547455
  store i32 %and4, i32* %sv_flags3, align 4
  %10 = load %struct.p5rx*, %struct.p5rx** %ret_x.addr, align 8
  %11 = bitcast %struct.p5rx* %10 to %struct.sv*
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %12, 33554432
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.rhs8, label %land.end11

land.rhs8:                                        ; preds = %if.else
  %13 = load %struct.p5rx*, %struct.p5rx** %ret_x.addr, align 8
  %14 = bitcast %struct.p5rx* %13 to %struct.sv*
  %call9 = call i32 @Perl_sv_backoff(%struct.sv* %14)
  %tobool10 = icmp ne i32 %call9, 0
  br label %land.end11

land.end11:                                       ; preds = %land.rhs8, %if.else
  %15 = phi i1 [ false, %if.else ], [ %tobool10, %land.rhs8 ]
  %land.ext = zext i1 %15 to i32
  %16 = load i8, i8* %islv, align 1
  %tobool12 = trunc i8 %16 to i1
  br i1 %tobool12, label %if.then13, label %if.end

if.then13:                                        ; preds = %land.end11
  %call14 = call %struct.sv* @Perl_newSV_type(i32 8)
  %17 = bitcast %struct.sv* %call14 to %struct.p5rx*
  store %struct.p5rx* %17, %struct.p5rx** %temp, align 8
  %18 = load %struct.p5rx*, %struct.p5rx** %temp, align 8
  %sv_any = getelementptr inbounds %struct.p5rx, %struct.p5rx* %18, i32 0, i32 0
  %19 = load %struct.regexp*, %struct.regexp** %sv_any, align 8
  %20 = load %struct.p5rx*, %struct.p5rx** %ret_x.addr, align 8
  %sv_u = getelementptr inbounds %struct.p5rx, %struct.p5rx* %20, i32 0, i32 3
  %svu_rx = bitcast %union.anon.7* %sv_u to %struct.regexp**
  store %struct.regexp* %19, %struct.regexp** %svu_rx, align 8
  %21 = load %struct.p5rx*, %struct.p5rx** %temp, align 8
  %sv_any15 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %21, i32 0, i32 0
  store %struct.regexp* null, %struct.regexp** %sv_any15, align 8
  %22 = load %struct.p5rx*, %struct.p5rx** %temp, align 8
  %sv_flags16 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %23, -256
  %24 = load %struct.p5rx*, %struct.p5rx** %temp, align 8
  %sv_flags18 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %24, i32 0, i32 2
  store i32 %and17, i32* %sv_flags18, align 4
  %25 = load %struct.p5rx*, %struct.p5rx** %temp, align 8
  %26 = bitcast %struct.p5rx* %25 to i8*
  %27 = bitcast i8* %26 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %27)
  br label %do.body

do.body:                                          ; preds = %if.then13
  %28 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %sv_any19 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %28, i32 0, i32 0
  %29 = load %struct.regexp*, %struct.regexp** %sv_any19, align 8
  %30 = bitcast %struct.regexp* %29 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %30, i32 0, i32 2
  %31 = load i64, i64* %xpv_cur, align 8
  %32 = load %struct.p5rx*, %struct.p5rx** %ret_x.addr, align 8
  %sv_any20 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %32, i32 0, i32 0
  %33 = load %struct.regexp*, %struct.regexp** %sv_any20, align 8
  %34 = bitcast %struct.regexp* %33 to %struct.xpv*
  %xpv_cur21 = getelementptr inbounds %struct.xpv, %struct.xpv* %34, i32 0, i32 2
  store i64 %31, i64* %xpv_cur21, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end

if.end:                                           ; preds = %do.end, %land.end11
  br label %if.end22

if.end22:                                         ; preds = %if.end, %if.then
  %35 = load %struct.p5rx*, %struct.p5rx** %ret_x.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags23, align 4
  %or = or i32 %36, 16777216
  store i32 %or, i32* %sv_flags23, align 4
  %37 = load %struct.p5rx*, %struct.p5rx** %ret_x.addr, align 8
  %call24 = call %struct.regexp* @S_ReANY(%struct.p5rx* %37)
  store %struct.regexp* %call24, %struct.regexp** %ret, align 8
  %38 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  %sv_flags25 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %39, 536870912
  %40 = load %struct.p5rx*, %struct.p5rx** %ret_x.addr, align 8
  %sv_flags27 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags27, align 4
  %or28 = or i32 %41, %and26
  store i32 %or28, i32* %sv_flags27, align 4
  %42 = load %struct.regexp*, %struct.regexp** %ret, align 8
  %xpv_cur29 = getelementptr inbounds %struct.regexp, %struct.regexp* %42, i32 0, i32 2
  %43 = bitcast i64* %xpv_cur29 to i8*
  %44 = load %struct.regexp*, %struct.regexp** %r, align 8
  %xpv_cur30 = getelementptr inbounds %struct.regexp, %struct.regexp* %44, i32 0, i32 2
  %45 = bitcast i64* %xpv_cur30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %45, i64 sub (i64 192, i64 ptrtoint (i64* getelementptr inbounds (%struct.regexp, %struct.regexp* null, i32 0, i32 2) to i64)), i1 false)
  %46 = load %struct.regexp*, %struct.regexp** %r, align 8
  %offs = getelementptr inbounds %struct.regexp, %struct.regexp* %46, i32 0, i32 17
  %47 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs, align 8
  %tobool31 = icmp ne %struct.regexp_paren_pair* %47, null
  br i1 %tobool31, label %if.then32, label %if.end39

if.then32:                                        ; preds = %if.end22
  %48 = load %struct.regexp*, %struct.regexp** %r, align 8
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %48, i32 0, i32 12
  %49 = load i32, i32* %nparens, align 8
  %add = add i32 %49, 1
  store i32 %add, i32* %npar, align 4
  %50 = load i32, i32* %npar, align 4
  %conv = sext i32 %50 to i64
  %mul = mul i64 %conv, 24
  %call33 = call i8* @Perl_safesysmalloc(i64 %mul)
  %51 = bitcast i8* %call33 to %struct.regexp_paren_pair*
  %52 = load %struct.regexp*, %struct.regexp** %ret, align 8
  %offs34 = getelementptr inbounds %struct.regexp, %struct.regexp* %52, i32 0, i32 17
  store %struct.regexp_paren_pair* %51, %struct.regexp_paren_pair** %offs34, align 8
  %53 = load %struct.regexp*, %struct.regexp** %ret, align 8
  %offs35 = getelementptr inbounds %struct.regexp, %struct.regexp* %53, i32 0, i32 17
  %54 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs35, align 8
  %55 = bitcast %struct.regexp_paren_pair* %54 to i8*
  %56 = load %struct.regexp*, %struct.regexp** %r, align 8
  %offs36 = getelementptr inbounds %struct.regexp, %struct.regexp* %56, i32 0, i32 17
  %57 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs36, align 8
  %58 = bitcast %struct.regexp_paren_pair* %57 to i8*
  %59 = load i32, i32* %npar, align 4
  %conv37 = sext i32 %59 to i64
  %mul38 = mul i64 %conv37, 24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %55, i8* align 1 %58, i64 %mul38, i1 false)
  br label %if.end39

if.end39:                                         ; preds = %if.then32, %if.end22
  %60 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs = getelementptr inbounds %struct.regexp, %struct.regexp* %60, i32 0, i32 11
  %61 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs, align 8
  %tobool40 = icmp ne %struct.reg_substr_data* %61, null
  br i1 %tobool40, label %if.then41, label %if.end58

if.then41:                                        ; preds = %if.end39
  %call42 = call i8* @Perl_safesysmalloc(i64 128)
  %62 = bitcast i8* %call42 to %struct.reg_substr_data*
  %63 = load %struct.regexp*, %struct.regexp** %ret, align 8
  %substrs43 = getelementptr inbounds %struct.regexp, %struct.regexp* %63, i32 0, i32 11
  store %struct.reg_substr_data* %62, %struct.reg_substr_data** %substrs43, align 8
  %64 = load %struct.regexp*, %struct.regexp** %ret, align 8
  %substrs44 = getelementptr inbounds %struct.regexp, %struct.regexp* %64, i32 0, i32 11
  %65 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs44, align 8
  %66 = load %struct.regexp*, %struct.regexp** %r, align 8
  %substrs45 = getelementptr inbounds %struct.regexp, %struct.regexp* %66, i32 0, i32 11
  %67 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs45, align 8
  %68 = bitcast %struct.reg_substr_data* %65 to i8*
  %69 = bitcast %struct.reg_substr_data* %67 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 128, i1 false)
  %70 = load %struct.regexp*, %struct.regexp** %ret, align 8
  %substrs46 = getelementptr inbounds %struct.regexp, %struct.regexp* %70, i32 0, i32 11
  %71 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs46, align 8
  %data = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %71, i32 0, i32 1
  %arrayidx = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data, i64 0, i64 0
  %substr = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx, i32 0, i32 2
  %72 = load %struct.sv*, %struct.sv** %substr, align 8
  %73 = bitcast %struct.sv* %72 to i8*
  %74 = bitcast i8* %73 to %struct.sv*
  call void @S_SvREFCNT_inc_void(%struct.sv* %74)
  %75 = load %struct.regexp*, %struct.regexp** %ret, align 8
  %substrs47 = getelementptr inbounds %struct.regexp, %struct.regexp* %75, i32 0, i32 11
  %76 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs47, align 8
  %data48 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %76, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data48, i64 0, i64 0
  %utf8_substr = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx49, i32 0, i32 3
  %77 = load %struct.sv*, %struct.sv** %utf8_substr, align 8
  %78 = bitcast %struct.sv* %77 to i8*
  %79 = bitcast i8* %78 to %struct.sv*
  call void @S_SvREFCNT_inc_void(%struct.sv* %79)
  %80 = load %struct.regexp*, %struct.regexp** %ret, align 8
  %substrs50 = getelementptr inbounds %struct.regexp, %struct.regexp* %80, i32 0, i32 11
  %81 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs50, align 8
  %data51 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %81, i32 0, i32 1
  %arrayidx52 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data51, i64 0, i64 1
  %substr53 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx52, i32 0, i32 2
  %82 = load %struct.sv*, %struct.sv** %substr53, align 8
  %83 = bitcast %struct.sv* %82 to i8*
  %84 = bitcast i8* %83 to %struct.sv*
  call void @S_SvREFCNT_inc_void(%struct.sv* %84)
  %85 = load %struct.regexp*, %struct.regexp** %ret, align 8
  %substrs54 = getelementptr inbounds %struct.regexp, %struct.regexp* %85, i32 0, i32 11
  %86 = load %struct.reg_substr_data*, %struct.reg_substr_data** %substrs54, align 8
  %data55 = getelementptr inbounds %struct.reg_substr_data, %struct.reg_substr_data* %86, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [3 x %struct.reg_substr_datum], [3 x %struct.reg_substr_datum]* %data55, i64 0, i64 1
  %utf8_substr57 = getelementptr inbounds %struct.reg_substr_datum, %struct.reg_substr_datum* %arrayidx56, i32 0, i32 3
  %87 = load %struct.sv*, %struct.sv** %utf8_substr57, align 8
  %88 = bitcast %struct.sv* %87 to i8*
  %89 = bitcast i8* %88 to %struct.sv*
  call void @S_SvREFCNT_inc_void(%struct.sv* %89)
  br label %if.end58

if.end58:                                         ; preds = %if.then41, %if.end39
  %90 = load %struct.p5rx*, %struct.p5rx** %ret_x.addr, align 8
  %call59 = call %struct.regexp* @S_ReANY(%struct.p5rx* %90)
  %extflags = getelementptr inbounds %struct.regexp, %struct.regexp* %call59, i32 0, i32 7
  %91 = load i32, i32* %extflags, align 8
  %and60 = and i32 %91, -33554433
  store i32 %and60, i32* %extflags, align 8
  %92 = load %struct.regexp*, %struct.regexp** %ret, align 8
  %saved_copy = getelementptr inbounds %struct.regexp, %struct.regexp* %92, i32 0, i32 19
  store %struct.sv* null, %struct.sv** %saved_copy, align 8
  %93 = load %struct.regexp*, %struct.regexp** %r, align 8
  %mother_re = getelementptr inbounds %struct.regexp, %struct.regexp* %93, i32 0, i32 5
  %94 = load %struct.p5rx*, %struct.p5rx** %mother_re, align 8
  %tobool61 = icmp ne %struct.p5rx* %94, null
  br i1 %tobool61, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end58
  %95 = load %struct.regexp*, %struct.regexp** %r, align 8
  %mother_re62 = getelementptr inbounds %struct.regexp, %struct.regexp* %95, i32 0, i32 5
  %96 = load %struct.p5rx*, %struct.p5rx** %mother_re62, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end58
  %97 = load %struct.p5rx*, %struct.p5rx** %rx.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.p5rx* [ %96, %cond.true ], [ %97, %cond.false ]
  %98 = bitcast %struct.p5rx* %cond to i8*
  %99 = bitcast i8* %98 to %struct.sv*
  %call63 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %99)
  %100 = bitcast %struct.sv* %call63 to %struct.p5rx*
  %101 = load %struct.regexp*, %struct.regexp** %ret, align 8
  %mother_re64 = getelementptr inbounds %struct.regexp, %struct.regexp* %101, i32 0, i32 5
  store %struct.p5rx* %100, %struct.p5rx** %mother_re64, align 8
  %102 = load %struct.regexp*, %struct.regexp** %ret, align 8
  %qr_anoncv = getelementptr inbounds %struct.regexp, %struct.regexp* %102, i32 0, i32 25
  %103 = load %struct.cv*, %struct.cv** %qr_anoncv, align 8
  %104 = bitcast %struct.cv* %103 to i8*
  %105 = bitcast i8* %104 to %struct.sv*
  call void @S_SvREFCNT_inc_void(%struct.sv* %105)
  %106 = load %struct.p5rx*, %struct.p5rx** %ret_x.addr, align 8
  ret %struct.p5rx* %106
}

declare dso_local i32 @Perl_sv_backoff(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_inc_void(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %2, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  ret void
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #4

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_save_re_context() #0 {
entry:
  %nparens = alloca i32, align 4
  %i = alloca i32, align 4
  %rx = alloca %struct.p5rx*, align 8
  %digits = alloca [22 x i8], align 16
  %len = alloca i64, align 8
  %gvp = alloca %struct.gv**, align 8
  %gv = alloca %struct.gv*, align 8
  store i32 -1, i32* %nparens, align 4
  %0 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %tobool = icmp ne %struct.pmop* %0, null
  br i1 %tobool, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %1 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %1, i32 0, i32 9
  %2 = load %struct.p5rx*, %struct.p5rx** %op_pmregexp, align 8
  store %struct.p5rx* %2, %struct.p5rx** %rx, align 8
  %3 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %tobool1 = icmp ne %struct.p5rx* %3, null
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %4 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call = call %struct.regexp* @S_ReANY(%struct.p5rx* %4)
  %nparens3 = getelementptr inbounds %struct.regexp, %struct.regexp* %call, i32 0, i32 12
  %5 = load i32, i32* %nparens3, align 8
  store i32 %5, i32* %nparens, align 4
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %6 = load i32, i32* %nparens, align 4
  %cmp = icmp eq i32 %6, -1
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end4
  store i32 3, i32* %nparens, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end6
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %nparens, align 4
  %cmp7 = icmp sle i32 %7, %8
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [22 x i8], [22 x i8]* %digits, i64 0, i64 0
  %9 = load i32, i32* %i, align 4
  %conv = sext i32 %9 to i64
  %call8 = call i32 (i8*, i64, i8*, ...) @Perl_my_snprintf(i8* %arraydecay, i64 22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.205, i64 0, i64 0), i64 %conv)
  %conv9 = sext i32 %call8 to i64
  store i64 %conv9, i64* %len, align 8
  %10 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %arraydecay10 = getelementptr inbounds [22 x i8], [22 x i8]* %digits, i64 0, i64 0
  %11 = load i64, i64* %len, align 8
  %conv11 = trunc i64 %11 to i32
  %call12 = call i8* @Perl_hv_common_key_len(%struct.hv* %10, i8* %arraydecay10, i32 %conv11, i32 32, %struct.sv* null, i32 0)
  %12 = bitcast i8* %call12 to %struct.sv**
  %13 = bitcast %struct.sv** %12 to %struct.gv**
  store %struct.gv** %13, %struct.gv*** %gvp, align 8
  %14 = load %struct.gv**, %struct.gv*** %gvp, align 8
  %tobool13 = icmp ne %struct.gv** %14, null
  br i1 %tobool13, label %if.then14, label %if.end21

if.then14:                                        ; preds = %for.body
  %15 = load %struct.gv**, %struct.gv*** %gvp, align 8
  %16 = load %struct.gv*, %struct.gv** %15, align 8
  store %struct.gv* %16, %struct.gv** %gv, align 8
  %17 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags, align 4
  %and = and i32 %18, 255
  %cmp15 = icmp eq i32 %and, 9
  br i1 %cmp15, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %if.then14
  %19 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %19, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %20 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %20, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 0
  %21 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool17 = icmp ne %struct.sv* %21, null
  br i1 %tobool17, label %if.then18, label %if.end20

if.then18:                                        ; preds = %land.lhs.true
  %22 = load %struct.gv*, %struct.gv** %gv, align 8
  %call19 = call %struct.sv* @Perl_save_scalar(%struct.gv* %22)
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %land.lhs.true, %if.then14
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end21
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare dso_local i32 @Perl_my_snprintf(i8*, i64, i8*, ...) #1

declare dso_local i8* @Perl_hv_common_key_len(%struct.hv*, i8*, i32, i32, %struct.sv*, i32) #1

declare dso_local %struct.sv* @Perl_save_scalar(%struct.gv*) #1

declare dso_local i32 @Perl_mg_size(%struct.sv*) #1

declare dso_local %struct.sv** @Perl_av_fetch(%struct.av*, i64, i32) #1

declare dso_local %struct.gv* @Perl_gv_fetchpvn_flags(i8*, i64, i32, i32) #1

declare dso_local i32 @Perl_mg_get(%struct.sv*) #1

declare dso_local %struct.sv* @Perl_amagic_call(%struct.sv*, %struct.sv*, i32, i32) #1

declare dso_local i8* @Perl_sv_pvn_force_flags(%struct.sv*, i64*, i32) #1

declare dso_local i8* @Perl_safesysrealloc(i8*, i64) #1

declare dso_local i32 @Perl_mg_set(%struct.sv*) #1

declare dso_local void @Perl_save_strlen(i64*) #1

declare dso_local %struct.stackinfo* @Perl_new_stackinfo(i32, i32) #1

declare dso_local i32 @Perl_eval_sv(%struct.sv*, i32) #1

declare dso_local %struct.gv* @Perl_gv_add_by_type(%struct.gv*, i32) #1

declare dso_local zeroext i1 @Perl_sv_2bool_flags(%struct.sv*, i32) #1

declare dso_local void @Perl_croak_popstack() #1

declare dso_local void @Perl_free_tmps() #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_append_utf8_from_native_byte(i8 zeroext %byte, i8** %dest) #0 {
entry:
  %byte.addr = alloca i8, align 1
  %dest.addr = alloca i8**, align 8
  store i8 %byte, i8* %byte.addr, align 1
  store i8** %dest, i8*** %dest.addr, align 8
  %0 = load i8, i8* %byte.addr, align 1
  %conv = zext i8 %0 to i64
  %cmp = icmp ult i64 %conv, 128
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %byte.addr, align 1
  %2 = load i8**, i8*** %dest.addr, align 8
  %3 = load i8*, i8** %2, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %2, align 8
  store i8 %1, i8* %3, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load i8, i8* %byte.addr, align 1
  %conv2 = zext i8 %4 to i32
  %shr = ashr i32 %conv2, 6
  %or = or i32 %shr, 192
  %conv3 = trunc i32 %or to i8
  %5 = load i8**, i8*** %dest.addr, align 8
  %6 = load i8*, i8** %5, align 8
  %incdec.ptr4 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr4, i8** %5, align 8
  store i8 %conv3, i8* %6, align 1
  %7 = load i8, i8* %byte.addr, align 1
  %conv5 = zext i8 %7 to i32
  %and = and i32 %conv5, 63
  %or6 = or i32 %and, 128
  %conv7 = trunc i32 %or6 to i8
  %8 = load i8**, i8*** %dest.addr, align 8
  %9 = load i8*, i8** %8, align 8
  %incdec.ptr8 = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr8, i8** %8, align 8
  store i8 %conv7, i8* %9, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare dso_local void @Perl_sv_free2(%struct.sv*, i32) #1

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #4

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #4

; Function Attrs: noinline nounwind uwtable
define internal void @S_ssc_anything(%struct.regnode_ssc* %ssc) #0 {
entry:
  %ssc.addr = alloca %struct.regnode_ssc*, align 8
  store %struct.regnode_ssc* %ssc, %struct.regnode_ssc** %ssc.addr, align 8
  %call = call %struct.sv* @Perl__new_invlist(i64 2)
  %call1 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call)
  %0 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %0, i32 0, i32 6
  store %struct.sv* %call1, %struct.sv** %invlist, align 8
  %1 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist2 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %1, i32 0, i32 6
  %2 = load %struct.sv*, %struct.sv** %invlist2, align 8
  call void @S__append_range_to_invlist(%struct.sv* %2, i64 0, i64 -1)
  %3 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %flags = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %3, i32 0, i32 0
  %4 = load i8, i8* %flags, align 8
  %conv = zext i8 %4 to i32
  %or = or i32 %conv, 1
  %conv3 = trunc i32 %or to i8
  store i8 %conv3, i8* %flags, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_join_exact(%struct.RExC_state_t* %pRExC_state, %struct.regnode* %scan, i64* %min_subtract, i8* %unfolded_multi_char, i32 %flags, %struct.regnode* %val, i32 %depth) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %scan.addr = alloca %struct.regnode*, align 8
  %min_subtract.addr = alloca i64*, align 8
  %unfolded_multi_char.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %val.addr = alloca %struct.regnode*, align 8
  %depth.addr = alloca i32, align 4
  %n = alloca %struct.regnode*, align 8
  %stringok = alloca i32, align 4
  %next = alloca %struct.regnode*, align 8
  %merged = alloca i32, align 4
  %stopnow = alloca i32, align 4
  %oldl = alloca i32, align 4
  %nnext = alloca %struct.regnode*, align 8
  %s0 = alloca i8*, align 8
  %s = alloca i8*, align 8
  %s_end = alloca i8*, align 8
  %total_count_delta = alloca i32, align 4
  %folded = alloca i8*, align 8
  %d = alloca i8*, align 8
  %s_len = alloca i64, align 8
  %len = alloca i64, align 8
  %count = alloca i32, align 4
  %len479 = alloca i32, align 4
  %multi_end = alloca i8*, align 8
  %total_chars = alloca i32, align 4
  %upper = alloca i8*, align 8
  %len2597 = alloca i32, align 4
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode* %scan, %struct.regnode** %scan.addr, align 8
  store i64* %min_subtract, i64** %min_subtract.addr, align 8
  store i8* %unfolded_multi_char, i8** %unfolded_multi_char.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.regnode* %val, %struct.regnode** %val.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %call = call %struct.regnode* @Perl_regnext(%struct.regnode* %0)
  store %struct.regnode* %call, %struct.regnode** %n, align 8
  store i32 1, i32* %stringok, align 4
  %1 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %2 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %3 = bitcast %struct.regnode* %2 to %struct.regnode_string*
  %str_len = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %3, i32 0, i32 0
  %4 = load i8, i8* %str_len, align 2
  %conv = zext i8 %4 to i64
  %add = add i64 %conv, 4
  %sub = sub i64 %add, 1
  %div = udiv i64 %sub, 4
  %add1 = add i64 %div, 1
  %add.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %1, i64 %add1
  store %struct.regnode* %add.ptr, %struct.regnode** %next, align 8
  store i32 0, i32* %merged, align 4
  store i32 0, i32* %stopnow, align 4
  %5 = load i32, i32* %depth.addr, align 4
  %6 = load i32, i32* %flags.addr, align 4
  %7 = load %struct.regnode*, %struct.regnode** %val.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end84, %entry
  %8 = load %struct.regnode*, %struct.regnode** %n, align 8
  %tobool = icmp ne %struct.regnode* %8, null
  br i1 %tobool, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %while.cond
  %9 = load %struct.regnode*, %struct.regnode** %n, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %9, i32 0, i32 1
  %10 = load i8, i8* %type, align 1
  %idxprom = zext i8 %10 to i64
  %arrayidx = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom
  %11 = load i8, i8* %arrayidx, align 1
  %conv2 = zext i8 %11 to i32
  %cmp = icmp eq i32 %conv2, 40
  br i1 %cmp, label %land.lhs.true12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load i32, i32* %stringok, align 4
  %tobool4 = icmp ne i32 %12, 0
  br i1 %tobool4, label %land.lhs.true5, label %land.end

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %13 = load %struct.regnode*, %struct.regnode** %n, align 8
  %type6 = getelementptr inbounds %struct.regnode, %struct.regnode* %13, i32 0, i32 1
  %14 = load i8, i8* %type6, align 1
  %conv7 = zext i8 %14 to i32
  %15 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type8 = getelementptr inbounds %struct.regnode, %struct.regnode* %15, i32 0, i32 1
  %16 = load i8, i8* %type8, align 1
  %conv9 = zext i8 %16 to i32
  %cmp10 = icmp eq i32 %conv7, %conv9
  br i1 %cmp10, label %land.lhs.true12, label %land.end

land.lhs.true12:                                  ; preds = %land.lhs.true5, %land.lhs.true
  %17 = load %struct.regnode*, %struct.regnode** %n, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %17, i32 0, i32 2
  %18 = load i16, i16* %next_off, align 2
  %conv13 = zext i16 %18 to i32
  %tobool14 = icmp ne i32 %conv13, 0
  br i1 %tobool14, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true12
  %19 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %next_off15 = getelementptr inbounds %struct.regnode, %struct.regnode* %19, i32 0, i32 2
  %20 = load i16, i16* %next_off15, align 2
  %conv16 = zext i16 %20 to i32
  %21 = load %struct.regnode*, %struct.regnode** %n, align 8
  %next_off17 = getelementptr inbounds %struct.regnode, %struct.regnode* %21, i32 0, i32 2
  %22 = load i16, i16* %next_off17, align 2
  %conv18 = zext i16 %22 to i32
  %add19 = add nsw i32 %conv16, %conv18
  %cmp20 = icmp slt i32 %add19, 32767
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true12, %land.lhs.true5, %lor.lhs.false, %while.cond
  %23 = phi i1 [ false, %land.lhs.true12 ], [ false, %land.lhs.true5 ], [ false, %lor.lhs.false ], [ false, %while.cond ], [ %cmp20, %land.rhs ]
  br i1 %23, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %24 = load %struct.regnode*, %struct.regnode** %n, align 8
  %type22 = getelementptr inbounds %struct.regnode, %struct.regnode* %24, i32 0, i32 1
  %25 = load i8, i8* %type22, align 1
  %conv23 = zext i8 %25 to i32
  %cmp24 = icmp eq i32 %conv23, 41
  br i1 %cmp24, label %if.then, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %while.body
  %26 = load %struct.regnode*, %struct.regnode** %n, align 8
  %27 = load %struct.regnode*, %struct.regnode** %next, align 8
  %cmp27 = icmp ugt %struct.regnode* %26, %27
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false26, %while.body
  store i32 0, i32* %stringok, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false26
  %28 = load %struct.regnode*, %struct.regnode** %n, align 8
  %type29 = getelementptr inbounds %struct.regnode, %struct.regnode* %28, i32 0, i32 1
  %29 = load i8, i8* %type29, align 1
  %idxprom30 = zext i8 %29 to i64
  %arrayidx31 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom30
  %30 = load i8, i8* %arrayidx31, align 1
  %conv32 = zext i8 %30 to i32
  %cmp33 = icmp eq i32 %conv32, 40
  br i1 %cmp33, label %if.then35, label %if.else

if.then35:                                        ; preds = %if.end
  %31 = load %struct.regnode*, %struct.regnode** %n, align 8
  %next_off36 = getelementptr inbounds %struct.regnode, %struct.regnode* %31, i32 0, i32 2
  %32 = load i16, i16* %next_off36, align 2
  %conv37 = zext i16 %32 to i32
  %33 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %next_off38 = getelementptr inbounds %struct.regnode, %struct.regnode* %33, i32 0, i32 2
  %34 = load i16, i16* %next_off38, align 2
  %conv39 = zext i16 %34 to i32
  %add40 = add nsw i32 %conv39, %conv37
  %conv41 = trunc i32 %add40 to i16
  store i16 %conv41, i16* %next_off38, align 2
  %35 = load %struct.regnode*, %struct.regnode** %n, align 8
  %add.ptr42 = getelementptr inbounds %struct.regnode, %struct.regnode* %35, i64 1
  store %struct.regnode* %add.ptr42, %struct.regnode** %next, align 8
  %36 = load %struct.regnode*, %struct.regnode** %n, align 8
  %call43 = call %struct.regnode* @Perl_regnext(%struct.regnode* %36)
  store %struct.regnode* %call43, %struct.regnode** %n, align 8
  br label %if.end84

if.else:                                          ; preds = %if.end
  %37 = load i32, i32* %stringok, align 4
  %tobool44 = icmp ne i32 %37, 0
  br i1 %tobool44, label %if.then45, label %if.end83

if.then45:                                        ; preds = %if.else
  %38 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %39 = bitcast %struct.regnode* %38 to %struct.regnode_string*
  %str_len46 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %39, i32 0, i32 0
  %40 = load i8, i8* %str_len46, align 2
  %conv47 = zext i8 %40 to i32
  store i32 %conv47, i32* %oldl, align 4
  %41 = load %struct.regnode*, %struct.regnode** %n, align 8
  %call48 = call %struct.regnode* @Perl_regnext(%struct.regnode* %41)
  store %struct.regnode* %call48, %struct.regnode** %nnext, align 8
  %42 = load i32, i32* %oldl, align 4
  %43 = load %struct.regnode*, %struct.regnode** %n, align 8
  %44 = bitcast %struct.regnode* %43 to %struct.regnode_string*
  %str_len49 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %44, i32 0, i32 0
  %45 = load i8, i8* %str_len49, align 2
  %conv50 = zext i8 %45 to i32
  %add51 = add i32 %42, %conv50
  %cmp52 = icmp ugt i32 %add51, 255
  br i1 %cmp52, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.then45
  br label %while.end

if.end55:                                         ; preds = %if.then45
  %46 = load i32, i32* %merged, align 4
  %inc = add i32 %46, 1
  store i32 %inc, i32* %merged, align 4
  %47 = load %struct.regnode*, %struct.regnode** %n, align 8
  %next_off56 = getelementptr inbounds %struct.regnode, %struct.regnode* %47, i32 0, i32 2
  %48 = load i16, i16* %next_off56, align 2
  %conv57 = zext i16 %48 to i32
  %49 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %next_off58 = getelementptr inbounds %struct.regnode, %struct.regnode* %49, i32 0, i32 2
  %50 = load i16, i16* %next_off58, align 2
  %conv59 = zext i16 %50 to i32
  %add60 = add nsw i32 %conv59, %conv57
  %conv61 = trunc i32 %add60 to i16
  store i16 %conv61, i16* %next_off58, align 2
  %51 = load %struct.regnode*, %struct.regnode** %n, align 8
  %52 = bitcast %struct.regnode* %51 to %struct.regnode_string*
  %str_len62 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %52, i32 0, i32 0
  %53 = load i8, i8* %str_len62, align 2
  %conv63 = zext i8 %53 to i32
  %54 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %55 = bitcast %struct.regnode* %54 to %struct.regnode_string*
  %str_len64 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %55, i32 0, i32 0
  %56 = load i8, i8* %str_len64, align 2
  %conv65 = zext i8 %56 to i32
  %add66 = add nsw i32 %conv65, %conv63
  %conv67 = trunc i32 %add66 to i8
  store i8 %conv67, i8* %str_len64, align 2
  %57 = load %struct.regnode*, %struct.regnode** %n, align 8
  %58 = load %struct.regnode*, %struct.regnode** %n, align 8
  %59 = bitcast %struct.regnode* %58 to %struct.regnode_string*
  %str_len68 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %59, i32 0, i32 0
  %60 = load i8, i8* %str_len68, align 2
  %conv69 = zext i8 %60 to i64
  %add70 = add i64 %conv69, 4
  %sub71 = sub i64 %add70, 1
  %div72 = udiv i64 %sub71, 4
  %add73 = add i64 %div72, 1
  %add.ptr74 = getelementptr inbounds %struct.regnode, %struct.regnode* %57, i64 %add73
  store %struct.regnode* %add.ptr74, %struct.regnode** %next, align 8
  %61 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %62 = bitcast %struct.regnode* %61 to %struct.regnode_string*
  %string = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %62, i32 0, i32 3
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %string, i64 0, i64 0
  %63 = load i32, i32* %oldl, align 4
  %idx.ext = zext i32 %63 to i64
  %add.ptr75 = getelementptr inbounds i8, i8* %arraydecay, i64 %idx.ext
  %64 = load %struct.regnode*, %struct.regnode** %n, align 8
  %65 = bitcast %struct.regnode* %64 to %struct.regnode_string*
  %string76 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %65, i32 0, i32 3
  %arraydecay77 = getelementptr inbounds [1 x i8], [1 x i8]* %string76, i64 0, i64 0
  %66 = load %struct.regnode*, %struct.regnode** %n, align 8
  %67 = bitcast %struct.regnode* %66 to %struct.regnode_string*
  %str_len78 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %67, i32 0, i32 0
  %68 = load i8, i8* %str_len78, align 2
  %conv79 = zext i8 %68 to i64
  %mul = mul i64 %conv79, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %add.ptr75, i8* align 2 %arraydecay77, i64 %mul, i1 false)
  %69 = load %struct.regnode*, %struct.regnode** %nnext, align 8
  store %struct.regnode* %69, %struct.regnode** %n, align 8
  %70 = load i32, i32* %stopnow, align 4
  %tobool80 = icmp ne i32 %70, 0
  br i1 %tobool80, label %if.then81, label %if.end82

if.then81:                                        ; preds = %if.end55
  br label %while.end

if.end82:                                         ; preds = %if.end55
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.else
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.then35
  br label %while.cond

while.end:                                        ; preds = %if.then81, %if.then54, %land.end
  %71 = load i64*, i64** %min_subtract.addr, align 8
  store i64 0, i64* %71, align 8
  %72 = load i8*, i8** %unfolded_multi_char.addr, align 8
  store i8 0, i8* %72, align 1
  %73 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type85 = getelementptr inbounds %struct.regnode, %struct.regnode* %73, i32 0, i32 1
  %74 = load i8, i8* %type85, align 1
  %conv86 = zext i8 %74 to i32
  %cmp87 = icmp ne i32 %conv86, 31
  br i1 %cmp87, label %land.lhs.true89, label %if.end2782

land.lhs.true89:                                  ; preds = %while.end
  %75 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type90 = getelementptr inbounds %struct.regnode, %struct.regnode* %75, i32 0, i32 1
  %76 = load i8, i8* %type90, align 1
  %conv91 = zext i8 %76 to i32
  %cmp92 = icmp ne i32 %conv91, 32
  br i1 %cmp92, label %if.then94, label %if.end2782

if.then94:                                        ; preds = %land.lhs.true89
  %77 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %78 = bitcast %struct.regnode* %77 to %struct.regnode_string*
  %string95 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %78, i32 0, i32 3
  %arraydecay96 = getelementptr inbounds [1 x i8], [1 x i8]* %string95, i64 0, i64 0
  store i8* %arraydecay96, i8** %s0, align 8
  %79 = load i8*, i8** %s0, align 8
  store i8* %79, i8** %s, align 8
  %80 = load i8*, i8** %s0, align 8
  %81 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %82 = bitcast %struct.regnode* %81 to %struct.regnode_string*
  %str_len97 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %82, i32 0, i32 0
  %83 = load i8, i8* %str_len97, align 2
  %conv98 = zext i8 %83 to i32
  %idx.ext99 = sext i32 %conv98 to i64
  %add.ptr100 = getelementptr inbounds i8, i8* %80, i64 %idx.ext99
  store i8* %add.ptr100, i8** %s_end, align 8
  store i32 0, i32* %total_count_delta, align 4
  %84 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %84, i32 0, i32 25
  %85 = load i32, i32* %utf8, align 8
  %tobool101 = icmp ne i32 %85, 0
  br i1 %tobool101, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then94
  br i1 true, label %if.then102, label %if.else2560

cond.false:                                       ; preds = %if.then94
  br i1 false, label %if.then102, label %if.else2560

if.then102:                                       ; preds = %cond.false, %cond.true
  store i8* null, i8** %folded, align 8
  %86 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type103 = getelementptr inbounds %struct.regnode, %struct.regnode* %86, i32 0, i32 1
  %87 = load i8, i8* %type103, align 1
  %conv104 = zext i8 %87 to i32
  %cmp105 = icmp eq i32 %conv104, 34
  br i1 %cmp105, label %if.then107, label %if.end473

if.then107:                                       ; preds = %if.then102
  %88 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %89 = bitcast %struct.regnode* %88 to %struct.regnode_string*
  %str_len108 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %89, i32 0, i32 0
  %90 = load i8, i8* %str_len108, align 2
  %conv109 = zext i8 %90 to i32
  %mul110 = mul nsw i32 3, %conv109
  %add111 = add nsw i32 %mul110, 1
  %conv112 = sext i32 %add111 to i64
  %mul113 = mul i64 %conv112, 1
  %call114 = call i8* @Perl_safesysmalloc(i64 %mul113)
  store i8* %call114, i8** %folded, align 8
  %91 = load i8*, i8** %folded, align 8
  store i8* %91, i8** %d, align 8
  br label %while.cond115

while.cond115:                                    ; preds = %if.end470, %if.then107
  %92 = load i8*, i8** %s, align 8
  %93 = load i8*, i8** %s_end, align 8
  %cmp116 = icmp ult i8* %92, %93
  br i1 %cmp116, label %while.body118, label %while.end472

while.body118:                                    ; preds = %while.cond115
  %94 = load i8*, i8** %s, align 8
  %95 = load i8, i8* %94, align 1
  %idxprom119 = zext i8 %95 to i64
  %arrayidx120 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom119
  %96 = load i8, i8* %arrayidx120, align 1
  %conv121 = zext i8 %96 to i64
  store i64 %conv121, i64* %s_len, align 8
  %97 = load i8*, i8** %s, align 8
  %arrayidx122 = getelementptr inbounds i8, i8* %97, i64 0
  %98 = load i8, i8* %arrayidx122, align 1
  %conv123 = zext i8 %98 to i32
  %cmp124 = icmp sle i32 %conv123, 127
  br i1 %cmp124, label %cond.true126, label %cond.false127

cond.true126:                                     ; preds = %while.body118
  br i1 true, label %if.else250, label %if.then247

cond.false127:                                    ; preds = %while.body118
  %99 = load i8*, i8** %s, align 8
  %arrayidx128 = getelementptr inbounds i8, i8* %99, i64 0
  %100 = load i8, i8* %arrayidx128, align 1
  %conv129 = zext i8 %100 to i32
  %and = and i32 %conv129, 254
  %cmp130 = icmp eq i32 %and, 194
  br i1 %cmp130, label %cond.true132, label %cond.false133

cond.true132:                                     ; preds = %cond.false127
  br i1 true, label %if.else250, label %if.then247

cond.false133:                                    ; preds = %cond.false127
  %101 = load i8*, i8** %s, align 8
  %arrayidx134 = getelementptr inbounds i8, i8* %101, i64 0
  %102 = load i8, i8* %arrayidx134, align 1
  %conv135 = zext i8 %102 to i32
  %cmp136 = icmp eq i32 196, %conv135
  br i1 %cmp136, label %cond.true143, label %lor.lhs.false138

lor.lhs.false138:                                 ; preds = %cond.false133
  %103 = load i8*, i8** %s, align 8
  %arrayidx139 = getelementptr inbounds i8, i8* %103, i64 0
  %104 = load i8, i8* %arrayidx139, align 1
  %conv140 = zext i8 %104 to i32
  %cmp141 = icmp eq i32 199, %conv140
  br i1 %cmp141, label %cond.true143, label %cond.false150

cond.true143:                                     ; preds = %lor.lhs.false138, %cond.false133
  %105 = load i8*, i8** %s, align 8
  %arrayidx144 = getelementptr inbounds i8, i8* %105, i64 1
  %106 = load i8, i8* %arrayidx144, align 1
  %conv145 = zext i8 %106 to i32
  %cmp146 = icmp eq i32 176, %conv145
  br i1 %cmp146, label %cond.true148, label %cond.false149

cond.true148:                                     ; preds = %cond.true143
  br i1 true, label %if.else250, label %if.then247

cond.false149:                                    ; preds = %cond.true143
  br i1 false, label %if.else250, label %if.then247

cond.false150:                                    ; preds = %lor.lhs.false138
  %107 = load i8*, i8** %s, align 8
  %arrayidx151 = getelementptr inbounds i8, i8* %107, i64 0
  %108 = load i8, i8* %arrayidx151, align 1
  %conv152 = zext i8 %108 to i32
  %cmp153 = icmp eq i32 197, %conv152
  br i1 %cmp153, label %cond.true155, label %cond.false172

cond.true155:                                     ; preds = %cond.false150
  %109 = load i8*, i8** %s, align 8
  %arrayidx156 = getelementptr inbounds i8, i8* %109, i64 1
  %110 = load i8, i8* %arrayidx156, align 1
  %conv157 = zext i8 %110 to i32
  %cmp158 = icmp eq i32 137, %conv157
  br i1 %cmp158, label %cond.true170, label %lor.lhs.false160

lor.lhs.false160:                                 ; preds = %cond.true155
  %111 = load i8*, i8** %s, align 8
  %arrayidx161 = getelementptr inbounds i8, i8* %111, i64 1
  %112 = load i8, i8* %arrayidx161, align 1
  %conv162 = zext i8 %112 to i32
  %cmp163 = icmp eq i32 184, %conv162
  br i1 %cmp163, label %cond.true170, label %lor.lhs.false165

lor.lhs.false165:                                 ; preds = %lor.lhs.false160
  %113 = load i8*, i8** %s, align 8
  %arrayidx166 = getelementptr inbounds i8, i8* %113, i64 1
  %114 = load i8, i8* %arrayidx166, align 1
  %conv167 = zext i8 %114 to i32
  %cmp168 = icmp eq i32 191, %conv167
  br i1 %cmp168, label %cond.true170, label %cond.false171

cond.true170:                                     ; preds = %lor.lhs.false165, %lor.lhs.false160, %cond.true155
  br i1 true, label %if.else250, label %if.then247

cond.false171:                                    ; preds = %lor.lhs.false165
  br i1 false, label %if.else250, label %if.then247

cond.false172:                                    ; preds = %cond.false150
  %115 = load i8*, i8** %s, align 8
  %arrayidx173 = getelementptr inbounds i8, i8* %115, i64 0
  %116 = load i8, i8* %arrayidx173, align 1
  %conv174 = zext i8 %116 to i32
  %cmp175 = icmp eq i32 206, %conv174
  br i1 %cmp175, label %cond.true177, label %cond.false185

cond.true177:                                     ; preds = %cond.false172
  %117 = load i8*, i8** %s, align 8
  %arrayidx178 = getelementptr inbounds i8, i8* %117, i64 1
  %118 = load i8, i8* %arrayidx178, align 1
  %conv179 = zext i8 %118 to i32
  %and180 = and i32 %conv179, 223
  %cmp181 = icmp eq i32 %and180, 156
  br i1 %cmp181, label %cond.true183, label %cond.false184

cond.true183:                                     ; preds = %cond.true177
  br i1 true, label %if.else250, label %if.then247

cond.false184:                                    ; preds = %cond.true177
  br i1 false, label %if.else250, label %if.then247

cond.false185:                                    ; preds = %cond.false172
  %119 = load i8*, i8** %s, align 8
  %arrayidx186 = getelementptr inbounds i8, i8* %119, i64 0
  %120 = load i8, i8* %arrayidx186, align 1
  %conv187 = zext i8 %120 to i32
  %cmp188 = icmp eq i32 225, %conv187
  br i1 %cmp188, label %cond.true190, label %cond.false212

cond.true190:                                     ; preds = %cond.false185
  %121 = load i8*, i8** %s, align 8
  %arrayidx191 = getelementptr inbounds i8, i8* %121, i64 1
  %122 = load i8, i8* %arrayidx191, align 1
  %conv192 = zext i8 %122 to i32
  %cmp193 = icmp eq i32 186, %conv192
  br i1 %cmp193, label %land.lhs.true195, label %cond.false211

land.lhs.true195:                                 ; preds = %cond.true190
  %123 = load i8*, i8** %s, align 8
  %arrayidx196 = getelementptr inbounds i8, i8* %123, i64 2
  %124 = load i8, i8* %arrayidx196, align 1
  %conv197 = zext i8 %124 to i32
  %cmp198 = icmp sle i32 150, %conv197
  br i1 %cmp198, label %land.lhs.true200, label %lor.lhs.false205

land.lhs.true200:                                 ; preds = %land.lhs.true195
  %125 = load i8*, i8** %s, align 8
  %arrayidx201 = getelementptr inbounds i8, i8* %125, i64 2
  %126 = load i8, i8* %arrayidx201, align 1
  %conv202 = zext i8 %126 to i32
  %cmp203 = icmp sle i32 %conv202, 154
  br i1 %cmp203, label %cond.true210, label %lor.lhs.false205

lor.lhs.false205:                                 ; preds = %land.lhs.true200, %land.lhs.true195
  %127 = load i8*, i8** %s, align 8
  %arrayidx206 = getelementptr inbounds i8, i8* %127, i64 2
  %128 = load i8, i8* %arrayidx206, align 1
  %conv207 = zext i8 %128 to i32
  %cmp208 = icmp eq i32 158, %conv207
  br i1 %cmp208, label %cond.true210, label %cond.false211

cond.true210:                                     ; preds = %lor.lhs.false205, %land.lhs.true200
  br i1 true, label %if.else250, label %if.then247

cond.false211:                                    ; preds = %lor.lhs.false205, %cond.true190
  br i1 false, label %if.else250, label %if.then247

cond.false212:                                    ; preds = %cond.false185
  %129 = load i8*, i8** %s, align 8
  %arrayidx213 = getelementptr inbounds i8, i8* %129, i64 0
  %130 = load i8, i8* %arrayidx213, align 1
  %conv214 = zext i8 %130 to i32
  %cmp215 = icmp eq i32 226, %conv214
  br i1 %cmp215, label %cond.true217, label %cond.false230

cond.true217:                                     ; preds = %cond.false212
  %131 = load i8*, i8** %s, align 8
  %arrayidx218 = getelementptr inbounds i8, i8* %131, i64 1
  %132 = load i8, i8* %arrayidx218, align 1
  %conv219 = zext i8 %132 to i32
  %cmp220 = icmp eq i32 132, %conv219
  br i1 %cmp220, label %land.lhs.true222, label %cond.false229

land.lhs.true222:                                 ; preds = %cond.true217
  %133 = load i8*, i8** %s, align 8
  %arrayidx223 = getelementptr inbounds i8, i8* %133, i64 2
  %134 = load i8, i8* %arrayidx223, align 1
  %conv224 = zext i8 %134 to i32
  %and225 = and i32 %conv224, 254
  %cmp226 = icmp eq i32 %and225, 170
  br i1 %cmp226, label %cond.true228, label %cond.false229

cond.true228:                                     ; preds = %land.lhs.true222
  br i1 true, label %if.else250, label %if.then247

cond.false229:                                    ; preds = %land.lhs.true222, %cond.true217
  br i1 false, label %if.else250, label %if.then247

cond.false230:                                    ; preds = %cond.false212
  %135 = load i8*, i8** %s, align 8
  %arrayidx231 = getelementptr inbounds i8, i8* %135, i64 0
  %136 = load i8, i8* %arrayidx231, align 1
  %conv232 = zext i8 %136 to i32
  %cmp233 = icmp eq i32 239, %conv232
  br i1 %cmp233, label %land.lhs.true235, label %cond.false246

land.lhs.true235:                                 ; preds = %cond.false230
  %137 = load i8*, i8** %s, align 8
  %arrayidx236 = getelementptr inbounds i8, i8* %137, i64 1
  %138 = load i8, i8* %arrayidx236, align 1
  %conv237 = zext i8 %138 to i32
  %cmp238 = icmp eq i32 172, %conv237
  br i1 %cmp238, label %land.lhs.true240, label %cond.false246

land.lhs.true240:                                 ; preds = %land.lhs.true235
  %139 = load i8*, i8** %s, align 8
  %arrayidx241 = getelementptr inbounds i8, i8* %139, i64 2
  %140 = load i8, i8* %arrayidx241, align 1
  %conv242 = zext i8 %140 to i32
  %cmp243 = icmp sle i32 %conv242, 134
  br i1 %cmp243, label %cond.true245, label %cond.false246

cond.true245:                                     ; preds = %land.lhs.true240
  br i1 true, label %if.else250, label %if.then247

cond.false246:                                    ; preds = %land.lhs.true240, %land.lhs.true235, %cond.false230
  br i1 false, label %if.else250, label %if.then247

if.then247:                                       ; preds = %cond.false246, %cond.true245, %cond.false229, %cond.true228, %cond.false211, %cond.true210, %cond.false184, %cond.true183, %cond.false171, %cond.true170, %cond.false149, %cond.true148, %cond.true132, %cond.true126
  %141 = load i8*, i8** %d, align 8
  %142 = load i8*, i8** %s, align 8
  %143 = load i64, i64* %s_len, align 8
  %mul248 = mul i64 %143, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %141, i8* align 1 %142, i64 %mul248, i1 false)
  %144 = load i64, i64* %s_len, align 8
  %145 = load i8*, i8** %d, align 8
  %add.ptr249 = getelementptr inbounds i8, i8* %145, i64 %144
  store i8* %add.ptr249, i8** %d, align 8
  br label %if.end470

if.else250:                                       ; preds = %cond.false246, %cond.true245, %cond.false229, %cond.true228, %cond.false211, %cond.true210, %cond.false184, %cond.true183, %cond.false171, %cond.true170, %cond.false149, %cond.true148, %cond.true132, %cond.true126
  %146 = load i8*, i8** %s, align 8
  %arrayidx251 = getelementptr inbounds i8, i8* %146, i64 0
  %147 = load i8, i8* %arrayidx251, align 1
  %conv252 = zext i8 %147 to i32
  %cmp253 = icmp eq i32 195, %conv252
  br i1 %cmp253, label %cond.true255, label %cond.false262

cond.true255:                                     ; preds = %if.else250
  %148 = load i8*, i8** %s, align 8
  %arrayidx256 = getelementptr inbounds i8, i8* %148, i64 1
  %149 = load i8, i8* %arrayidx256, align 1
  %conv257 = zext i8 %149 to i32
  %cmp258 = icmp eq i32 159, %conv257
  br i1 %cmp258, label %cond.true260, label %cond.false261

cond.true260:                                     ; preds = %cond.true255
  br i1 true, label %if.then444, label %if.else447

cond.false261:                                    ; preds = %cond.true255
  br i1 false, label %if.then444, label %if.else447

cond.false262:                                    ; preds = %if.else250
  %150 = load i8*, i8** %s, align 8
  %arrayidx263 = getelementptr inbounds i8, i8* %150, i64 0
  %151 = load i8, i8* %arrayidx263, align 1
  %conv264 = zext i8 %151 to i32
  %cmp265 = icmp eq i32 196, %conv264
  br i1 %cmp265, label %cond.true272, label %lor.lhs.false267

lor.lhs.false267:                                 ; preds = %cond.false262
  %152 = load i8*, i8** %s, align 8
  %arrayidx268 = getelementptr inbounds i8, i8* %152, i64 0
  %153 = load i8, i8* %arrayidx268, align 1
  %conv269 = zext i8 %153 to i32
  %cmp270 = icmp eq i32 199, %conv269
  br i1 %cmp270, label %cond.true272, label %cond.false279

cond.true272:                                     ; preds = %lor.lhs.false267, %cond.false262
  %154 = load i8*, i8** %s, align 8
  %arrayidx273 = getelementptr inbounds i8, i8* %154, i64 1
  %155 = load i8, i8* %arrayidx273, align 1
  %conv274 = zext i8 %155 to i32
  %cmp275 = icmp eq i32 176, %conv274
  br i1 %cmp275, label %cond.true277, label %cond.false278

cond.true277:                                     ; preds = %cond.true272
  br i1 true, label %if.then444, label %if.else447

cond.false278:                                    ; preds = %cond.true272
  br i1 false, label %if.then444, label %if.else447

cond.false279:                                    ; preds = %lor.lhs.false267
  %156 = load i8*, i8** %s, align 8
  %arrayidx280 = getelementptr inbounds i8, i8* %156, i64 0
  %157 = load i8, i8* %arrayidx280, align 1
  %conv281 = zext i8 %157 to i32
  %cmp282 = icmp eq i32 197, %conv281
  br i1 %cmp282, label %cond.true284, label %cond.false291

cond.true284:                                     ; preds = %cond.false279
  %158 = load i8*, i8** %s, align 8
  %arrayidx285 = getelementptr inbounds i8, i8* %158, i64 1
  %159 = load i8, i8* %arrayidx285, align 1
  %conv286 = zext i8 %159 to i32
  %cmp287 = icmp eq i32 137, %conv286
  br i1 %cmp287, label %cond.true289, label %cond.false290

cond.true289:                                     ; preds = %cond.true284
  br i1 true, label %if.then444, label %if.else447

cond.false290:                                    ; preds = %cond.true284
  br i1 false, label %if.then444, label %if.else447

cond.false291:                                    ; preds = %cond.false279
  %160 = load i8*, i8** %s, align 8
  %arrayidx292 = getelementptr inbounds i8, i8* %160, i64 0
  %161 = load i8, i8* %arrayidx292, align 1
  %conv293 = zext i8 %161 to i32
  %cmp294 = icmp eq i32 206, %conv293
  br i1 %cmp294, label %cond.true296, label %cond.false304

cond.true296:                                     ; preds = %cond.false291
  %162 = load i8*, i8** %s, align 8
  %arrayidx297 = getelementptr inbounds i8, i8* %162, i64 1
  %163 = load i8, i8* %arrayidx297, align 1
  %conv298 = zext i8 %163 to i32
  %and299 = and i32 %conv298, 223
  %cmp300 = icmp eq i32 %and299, 144
  br i1 %cmp300, label %cond.true302, label %cond.false303

cond.true302:                                     ; preds = %cond.true296
  br i1 true, label %if.then444, label %if.else447

cond.false303:                                    ; preds = %cond.true296
  br i1 false, label %if.then444, label %if.else447

cond.false304:                                    ; preds = %cond.false291
  %164 = load i8*, i8** %s, align 8
  %arrayidx305 = getelementptr inbounds i8, i8* %164, i64 0
  %165 = load i8, i8* %arrayidx305, align 1
  %conv306 = zext i8 %165 to i32
  %cmp307 = icmp eq i32 214, %conv306
  br i1 %cmp307, label %cond.true309, label %cond.false316

cond.true309:                                     ; preds = %cond.false304
  %166 = load i8*, i8** %s, align 8
  %arrayidx310 = getelementptr inbounds i8, i8* %166, i64 1
  %167 = load i8, i8* %arrayidx310, align 1
  %conv311 = zext i8 %167 to i32
  %cmp312 = icmp eq i32 135, %conv311
  br i1 %cmp312, label %cond.true314, label %cond.false315

cond.true314:                                     ; preds = %cond.true309
  br i1 true, label %if.then444, label %if.else447

cond.false315:                                    ; preds = %cond.true309
  br i1 false, label %if.then444, label %if.else447

cond.false316:                                    ; preds = %cond.false304
  %168 = load i8*, i8** %s, align 8
  %arrayidx317 = getelementptr inbounds i8, i8* %168, i64 0
  %169 = load i8, i8* %arrayidx317, align 1
  %conv318 = zext i8 %169 to i32
  %cmp319 = icmp eq i32 225, %conv318
  br i1 %cmp319, label %cond.true321, label %cond.false417

cond.true321:                                     ; preds = %cond.false316
  %170 = load i8*, i8** %s, align 8
  %arrayidx322 = getelementptr inbounds i8, i8* %170, i64 1
  %171 = load i8, i8* %arrayidx322, align 1
  %conv323 = zext i8 %171 to i32
  %cmp324 = icmp eq i32 186, %conv323
  br i1 %cmp324, label %cond.true326, label %cond.false343

cond.true326:                                     ; preds = %cond.true321
  %172 = load i8*, i8** %s, align 8
  %arrayidx327 = getelementptr inbounds i8, i8* %172, i64 2
  %173 = load i8, i8* %arrayidx327, align 1
  %conv328 = zext i8 %173 to i32
  %cmp329 = icmp sle i32 150, %conv328
  br i1 %cmp329, label %land.lhs.true331, label %lor.lhs.false336

land.lhs.true331:                                 ; preds = %cond.true326
  %174 = load i8*, i8** %s, align 8
  %arrayidx332 = getelementptr inbounds i8, i8* %174, i64 2
  %175 = load i8, i8* %arrayidx332, align 1
  %conv333 = zext i8 %175 to i32
  %cmp334 = icmp sle i32 %conv333, 154
  br i1 %cmp334, label %cond.true341, label %lor.lhs.false336

lor.lhs.false336:                                 ; preds = %land.lhs.true331, %cond.true326
  %176 = load i8*, i8** %s, align 8
  %arrayidx337 = getelementptr inbounds i8, i8* %176, i64 2
  %177 = load i8, i8* %arrayidx337, align 1
  %conv338 = zext i8 %177 to i32
  %cmp339 = icmp eq i32 158, %conv338
  br i1 %cmp339, label %cond.true341, label %cond.false342

cond.true341:                                     ; preds = %lor.lhs.false336, %land.lhs.true331
  br i1 true, label %if.then444, label %if.else447

cond.false342:                                    ; preds = %lor.lhs.false336
  br i1 false, label %if.then444, label %if.else447

cond.false343:                                    ; preds = %cond.true321
  %178 = load i8*, i8** %s, align 8
  %arrayidx344 = getelementptr inbounds i8, i8* %178, i64 1
  %179 = load i8, i8* %arrayidx344, align 1
  %conv345 = zext i8 %179 to i32
  %cmp346 = icmp eq i32 189, %conv345
  br i1 %cmp346, label %cond.true348, label %cond.false356

cond.true348:                                     ; preds = %cond.false343
  %180 = load i8*, i8** %s, align 8
  %arrayidx349 = getelementptr inbounds i8, i8* %180, i64 2
  %181 = load i8, i8* %arrayidx349, align 1
  %conv350 = zext i8 %181 to i32
  %and351 = and i32 %conv350, 249
  %cmp352 = icmp eq i32 %and351, 144
  br i1 %cmp352, label %cond.true354, label %cond.false355

cond.true354:                                     ; preds = %cond.true348
  br i1 true, label %if.then444, label %if.else447

cond.false355:                                    ; preds = %cond.true348
  br i1 false, label %if.then444, label %if.else447

cond.false356:                                    ; preds = %cond.false343
  %182 = load i8*, i8** %s, align 8
  %arrayidx357 = getelementptr inbounds i8, i8* %182, i64 1
  %183 = load i8, i8* %arrayidx357, align 1
  %conv358 = zext i8 %183 to i32
  %cmp359 = icmp eq i32 190, %conv358
  br i1 %cmp359, label %cond.true361, label %cond.false387

cond.true361:                                     ; preds = %cond.false356
  %184 = load i8*, i8** %s, align 8
  %arrayidx362 = getelementptr inbounds i8, i8* %184, i64 2
  %185 = load i8, i8* %arrayidx362, align 1
  %conv363 = zext i8 %185 to i32
  %and364 = and i32 %conv363, 224
  %cmp365 = icmp eq i32 %and364, 128
  br i1 %cmp365, label %cond.true385, label %lor.lhs.false367

lor.lhs.false367:                                 ; preds = %cond.true361
  %186 = load i8*, i8** %s, align 8
  %arrayidx368 = getelementptr inbounds i8, i8* %186, i64 2
  %187 = load i8, i8* %arrayidx368, align 1
  %conv369 = zext i8 %187 to i32
  %and370 = and i32 %conv369, 240
  %cmp371 = icmp eq i32 %and370, 160
  br i1 %cmp371, label %cond.true385, label %lor.lhs.false373

lor.lhs.false373:                                 ; preds = %lor.lhs.false367
  %188 = load i8*, i8** %s, align 8
  %arrayidx374 = getelementptr inbounds i8, i8* %188, i64 2
  %189 = load i8, i8* %arrayidx374, align 1
  %conv375 = zext i8 %189 to i32
  %and376 = and i32 %conv375, 250
  %cmp377 = icmp eq i32 %and376, 178
  br i1 %cmp377, label %cond.true385, label %lor.lhs.false379

lor.lhs.false379:                                 ; preds = %lor.lhs.false373
  %190 = load i8*, i8** %s, align 8
  %arrayidx380 = getelementptr inbounds i8, i8* %190, i64 2
  %191 = load i8, i8* %arrayidx380, align 1
  %conv381 = zext i8 %191 to i32
  %and382 = and i32 %conv381, 247
  %cmp383 = icmp eq i32 %and382, 180
  br i1 %cmp383, label %cond.true385, label %cond.false386

cond.true385:                                     ; preds = %lor.lhs.false379, %lor.lhs.false373, %lor.lhs.false367, %cond.true361
  br i1 true, label %if.then444, label %if.else447

cond.false386:                                    ; preds = %lor.lhs.false379
  br i1 false, label %if.then444, label %if.else447

cond.false387:                                    ; preds = %cond.false356
  %192 = load i8*, i8** %s, align 8
  %arrayidx388 = getelementptr inbounds i8, i8* %192, i64 1
  %193 = load i8, i8* %arrayidx388, align 1
  %conv389 = zext i8 %193 to i32
  %cmp390 = icmp eq i32 191, %conv389
  br i1 %cmp390, label %land.lhs.true392, label %cond.false416

land.lhs.true392:                                 ; preds = %cond.false387
  %194 = load i8*, i8** %s, align 8
  %arrayidx393 = getelementptr inbounds i8, i8* %194, i64 2
  %195 = load i8, i8* %arrayidx393, align 1
  %conv394 = zext i8 %195 to i32
  %and395 = and i32 %conv394, 202
  %cmp396 = icmp eq i32 %and395, 130
  br i1 %cmp396, label %cond.true415, label %lor.lhs.false398

lor.lhs.false398:                                 ; preds = %land.lhs.true392
  %196 = load i8*, i8** %s, align 8
  %arrayidx399 = getelementptr inbounds i8, i8* %196, i64 2
  %197 = load i8, i8* %arrayidx399, align 1
  %conv400 = zext i8 %197 to i32
  %and401 = and i32 %conv400, 247
  %cmp402 = icmp eq i32 %and401, 132
  br i1 %cmp402, label %cond.true415, label %lor.lhs.false404

lor.lhs.false404:                                 ; preds = %lor.lhs.false398
  %198 = load i8*, i8** %s, align 8
  %arrayidx405 = getelementptr inbounds i8, i8* %198, i64 2
  %199 = load i8, i8* %arrayidx405, align 1
  %conv406 = zext i8 %199 to i32
  %cmp407 = icmp eq i32 %conv406, 164
  br i1 %cmp407, label %cond.true415, label %lor.lhs.false409

lor.lhs.false409:                                 ; preds = %lor.lhs.false404
  %200 = load i8*, i8** %s, align 8
  %arrayidx410 = getelementptr inbounds i8, i8* %200, i64 2
  %201 = load i8, i8* %arrayidx410, align 1
  %conv411 = zext i8 %201 to i32
  %and412 = and i32 %conv411, 247
  %cmp413 = icmp eq i32 %and412, 180
  br i1 %cmp413, label %cond.true415, label %cond.false416

cond.true415:                                     ; preds = %lor.lhs.false409, %lor.lhs.false404, %lor.lhs.false398, %land.lhs.true392
  br i1 true, label %if.then444, label %if.else447

cond.false416:                                    ; preds = %lor.lhs.false409, %cond.false387
  br i1 false, label %if.then444, label %if.else447

cond.false417:                                    ; preds = %cond.false316
  %202 = load i8*, i8** %s, align 8
  %arrayidx418 = getelementptr inbounds i8, i8* %202, i64 0
  %203 = load i8, i8* %arrayidx418, align 1
  %conv419 = zext i8 %203 to i32
  %cmp420 = icmp eq i32 239, %conv419
  br i1 %cmp420, label %land.lhs.true422, label %cond.false443

land.lhs.true422:                                 ; preds = %cond.false417
  %204 = load i8*, i8** %s, align 8
  %arrayidx423 = getelementptr inbounds i8, i8* %204, i64 1
  %205 = load i8, i8* %arrayidx423, align 1
  %conv424 = zext i8 %205 to i32
  %cmp425 = icmp eq i32 172, %conv424
  br i1 %cmp425, label %land.lhs.true427, label %cond.false443

land.lhs.true427:                                 ; preds = %land.lhs.true422
  %206 = load i8*, i8** %s, align 8
  %arrayidx428 = getelementptr inbounds i8, i8* %206, i64 2
  %207 = load i8, i8* %arrayidx428, align 1
  %conv429 = zext i8 %207 to i32
  %cmp430 = icmp sle i32 %conv429, 134
  br i1 %cmp430, label %cond.true442, label %lor.lhs.false432

lor.lhs.false432:                                 ; preds = %land.lhs.true427
  %208 = load i8*, i8** %s, align 8
  %arrayidx433 = getelementptr inbounds i8, i8* %208, i64 2
  %209 = load i8, i8* %arrayidx433, align 1
  %conv434 = zext i8 %209 to i32
  %cmp435 = icmp sle i32 147, %conv434
  br i1 %cmp435, label %land.lhs.true437, label %cond.false443

land.lhs.true437:                                 ; preds = %lor.lhs.false432
  %210 = load i8*, i8** %s, align 8
  %arrayidx438 = getelementptr inbounds i8, i8* %210, i64 2
  %211 = load i8, i8* %arrayidx438, align 1
  %conv439 = zext i8 %211 to i32
  %cmp440 = icmp sle i32 %conv439, 151
  br i1 %cmp440, label %cond.true442, label %cond.false443

cond.true442:                                     ; preds = %land.lhs.true437, %land.lhs.true427
  br i1 true, label %if.then444, label %if.else447

cond.false443:                                    ; preds = %land.lhs.true437, %lor.lhs.false432, %land.lhs.true422, %cond.false417
  br i1 false, label %if.then444, label %if.else447

if.then444:                                       ; preds = %cond.false443, %cond.true442, %cond.false416, %cond.true415, %cond.false386, %cond.true385, %cond.false355, %cond.true354, %cond.false342, %cond.true341, %cond.false315, %cond.true314, %cond.false303, %cond.true302, %cond.false290, %cond.true289, %cond.false278, %cond.true277, %cond.false261, %cond.true260
  %212 = load i8*, i8** %unfolded_multi_char.addr, align 8
  store i8 1, i8* %212, align 1
  %213 = load i8*, i8** %d, align 8
  %214 = load i8*, i8** %s, align 8
  %215 = load i64, i64* %s_len, align 8
  %mul445 = mul i64 %215, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %213, i8* align 1 %214, i64 %mul445, i1 false)
  %216 = load i64, i64* %s_len, align 8
  %217 = load i8*, i8** %d, align 8
  %add.ptr446 = getelementptr inbounds i8, i8* %217, i64 %216
  store i8* %add.ptr446, i8** %d, align 8
  br label %if.end469

if.else447:                                       ; preds = %cond.false443, %cond.true442, %cond.false416, %cond.true415, %cond.false386, %cond.true385, %cond.false355, %cond.true354, %cond.false342, %cond.true341, %cond.false315, %cond.true314, %cond.false303, %cond.true302, %cond.false290, %cond.true289, %cond.false278, %cond.true277, %cond.false261, %cond.true260
  %218 = load i8*, i8** %s, align 8
  %219 = load i8, i8* %218, align 1
  %conv448 = zext i8 %219 to i64
  %cmp449 = icmp ult i64 %conv448, 128
  br i1 %cmp449, label %if.then451, label %if.else465

if.then451:                                       ; preds = %if.else447
  %220 = load i8*, i8** %s, align 8
  %221 = load i8, i8* %220, align 1
  %idxprom452 = zext i8 %221 to i64
  %arrayidx453 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom452
  %222 = load i32, i32* %arrayidx453, align 4
  %and454 = and i32 %222, 16400
  %cmp455 = icmp eq i32 %and454, 16400
  br i1 %cmp455, label %cond.true457, label %cond.false462

cond.true457:                                     ; preds = %if.then451
  %223 = load i8*, i8** %s, align 8
  %224 = load i8, i8* %223, align 1
  %conv458 = zext i8 %224 to i32
  %add459 = add nsw i32 %conv458, 32
  %conv460 = trunc i32 %add459 to i8
  %conv461 = zext i8 %conv460 to i32
  br label %cond.end

cond.false462:                                    ; preds = %if.then451
  %225 = load i8*, i8** %s, align 8
  %226 = load i8, i8* %225, align 1
  %conv463 = zext i8 %226 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false462, %cond.true457
  %cond = phi i32 [ %conv461, %cond.true457 ], [ %conv463, %cond.false462 ]
  %conv464 = trunc i32 %cond to i8
  %227 = load i8*, i8** %d, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %227, i32 1
  store i8* %incdec.ptr, i8** %d, align 8
  store i8 %conv464, i8* %227, align 1
  br label %if.end468

if.else465:                                       ; preds = %if.else447
  %228 = load i8*, i8** %s, align 8
  %229 = load i8*, i8** %d, align 8
  %call466 = call i64 @Perl__to_utf8_fold_flags(i8* %228, i8* %229, i64* %len, i8 zeroext 2)
  %230 = load i64, i64* %len, align 8
  %231 = load i8*, i8** %d, align 8
  %add.ptr467 = getelementptr inbounds i8, i8* %231, i64 %230
  store i8* %add.ptr467, i8** %d, align 8
  br label %if.end468

if.end468:                                        ; preds = %if.else465, %cond.end
  br label %if.end469

if.end469:                                        ; preds = %if.end468, %if.then444
  br label %if.end470

if.end470:                                        ; preds = %if.end469, %if.then247
  %232 = load i64, i64* %s_len, align 8
  %233 = load i8*, i8** %s, align 8
  %add.ptr471 = getelementptr inbounds i8, i8* %233, i64 %232
  store i8* %add.ptr471, i8** %s, align 8
  br label %while.cond115

while.end472:                                     ; preds = %while.cond115
  %234 = load i8*, i8** %folded, align 8
  store i8* %234, i8** %s, align 8
  %235 = load i8*, i8** %d, align 8
  store i8* %235, i8** %s_end, align 8
  br label %if.end473

if.end473:                                        ; preds = %while.end472, %if.then102
  br label %while.cond474

while.cond474:                                    ; preds = %next_iteration, %if.then2462, %if.end473
  %236 = load i8*, i8** %s, align 8
  %237 = load i8*, i8** %s_end, align 8
  %add.ptr475 = getelementptr inbounds i8, i8* %237, i64 -1
  %cmp476 = icmp ult i8* %236, %add.ptr475
  br i1 %cmp476, label %while.body478, label %while.end2537

while.body478:                                    ; preds = %while.cond474
  store i32 0, i32* %count, align 4
  %238 = load i8*, i8** %s_end, align 8
  %239 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %238 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %239 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp480 = icmp sgt i64 %sub.ptr.sub, 5
  br i1 %cmp480, label %cond.true482, label %cond.false1161

cond.true482:                                     ; preds = %while.body478
  %240 = load i8*, i8** %s, align 8
  %arrayidx483 = getelementptr inbounds i8, i8* %240, i64 0
  %241 = load i8, i8* %arrayidx483, align 1
  %conv484 = zext i8 %241 to i32
  %cmp485 = icmp eq i32 97, %conv484
  br i1 %cmp485, label %cond.true487, label %cond.false499

cond.true487:                                     ; preds = %cond.true482
  %242 = load i8*, i8** %s, align 8
  %arrayidx488 = getelementptr inbounds i8, i8* %242, i64 1
  %243 = load i8, i8* %arrayidx488, align 1
  %conv489 = zext i8 %243 to i32
  %cmp490 = icmp eq i32 202, %conv489
  br i1 %cmp490, label %land.rhs492, label %land.end497

land.rhs492:                                      ; preds = %cond.true487
  %244 = load i8*, i8** %s, align 8
  %arrayidx493 = getelementptr inbounds i8, i8* %244, i64 2
  %245 = load i8, i8* %arrayidx493, align 1
  %conv494 = zext i8 %245 to i32
  %cmp495 = icmp eq i32 190, %conv494
  br label %land.end497

land.end497:                                      ; preds = %land.rhs492, %cond.true487
  %246 = phi i1 [ false, %cond.true487 ], [ %cmp495, %land.rhs492 ]
  %247 = zext i1 %246 to i64
  %cond498 = select i1 %246, i32 3, i32 0
  br label %cond.end1159

cond.false499:                                    ; preds = %cond.true482
  %248 = load i8*, i8** %s, align 8
  %arrayidx500 = getelementptr inbounds i8, i8* %248, i64 0
  %249 = load i8, i8* %arrayidx500, align 1
  %conv501 = zext i8 %249 to i32
  %cmp502 = icmp eq i32 102, %conv501
  br i1 %cmp502, label %cond.true504, label %cond.false533

cond.true504:                                     ; preds = %cond.false499
  %250 = load i8*, i8** %s, align 8
  %arrayidx505 = getelementptr inbounds i8, i8* %250, i64 1
  %251 = load i8, i8* %arrayidx505, align 1
  %conv506 = zext i8 %251 to i32
  %cmp507 = icmp eq i32 102, %conv506
  br i1 %cmp507, label %cond.true509, label %cond.false519

cond.true509:                                     ; preds = %cond.true504
  %252 = load i8*, i8** %s, align 8
  %arrayidx510 = getelementptr inbounds i8, i8* %252, i64 2
  %253 = load i8, i8* %arrayidx510, align 1
  %conv511 = zext i8 %253 to i32
  %cmp512 = icmp eq i32 105, %conv511
  br i1 %cmp512, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true509
  %254 = load i8*, i8** %s, align 8
  %arrayidx514 = getelementptr inbounds i8, i8* %254, i64 2
  %255 = load i8, i8* %arrayidx514, align 1
  %conv515 = zext i8 %255 to i32
  %cmp516 = icmp eq i32 108, %conv515
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.true509
  %256 = phi i1 [ true, %cond.true509 ], [ %cmp516, %lor.rhs ]
  %257 = zext i1 %256 to i64
  %cond518 = select i1 %256, i32 3, i32 2
  br label %cond.end531

cond.false519:                                    ; preds = %cond.true504
  %258 = load i8*, i8** %s, align 8
  %arrayidx520 = getelementptr inbounds i8, i8* %258, i64 1
  %259 = load i8, i8* %arrayidx520, align 1
  %conv521 = zext i8 %259 to i32
  %cmp522 = icmp eq i32 105, %conv521
  br i1 %cmp522, label %lor.end529, label %lor.rhs524

lor.rhs524:                                       ; preds = %cond.false519
  %260 = load i8*, i8** %s, align 8
  %arrayidx525 = getelementptr inbounds i8, i8* %260, i64 1
  %261 = load i8, i8* %arrayidx525, align 1
  %conv526 = zext i8 %261 to i32
  %cmp527 = icmp eq i32 108, %conv526
  br label %lor.end529

lor.end529:                                       ; preds = %lor.rhs524, %cond.false519
  %262 = phi i1 [ true, %cond.false519 ], [ %cmp527, %lor.rhs524 ]
  %263 = zext i1 %262 to i64
  %cond530 = select i1 %262, i32 2, i32 0
  br label %cond.end531

cond.end531:                                      ; preds = %lor.end529, %lor.end
  %cond532 = phi i32 [ %cond518, %lor.end ], [ %cond530, %lor.end529 ]
  br label %cond.end1157

cond.false533:                                    ; preds = %cond.false499
  %264 = load i8*, i8** %s, align 8
  %arrayidx534 = getelementptr inbounds i8, i8* %264, i64 0
  %265 = load i8, i8* %arrayidx534, align 1
  %conv535 = zext i8 %265 to i32
  %cmp536 = icmp eq i32 104, %conv535
  br i1 %cmp536, label %cond.true538, label %cond.false550

cond.true538:                                     ; preds = %cond.false533
  %266 = load i8*, i8** %s, align 8
  %arrayidx539 = getelementptr inbounds i8, i8* %266, i64 1
  %267 = load i8, i8* %arrayidx539, align 1
  %conv540 = zext i8 %267 to i32
  %cmp541 = icmp eq i32 204, %conv540
  br i1 %cmp541, label %land.rhs543, label %land.end548

land.rhs543:                                      ; preds = %cond.true538
  %268 = load i8*, i8** %s, align 8
  %arrayidx544 = getelementptr inbounds i8, i8* %268, i64 2
  %269 = load i8, i8* %arrayidx544, align 1
  %conv545 = zext i8 %269 to i32
  %cmp546 = icmp eq i32 177, %conv545
  br label %land.end548

land.end548:                                      ; preds = %land.rhs543, %cond.true538
  %270 = phi i1 [ false, %cond.true538 ], [ %cmp546, %land.rhs543 ]
  %271 = zext i1 %270 to i64
  %cond549 = select i1 %270, i32 3, i32 0
  br label %cond.end1155

cond.false550:                                    ; preds = %cond.false533
  %272 = load i8*, i8** %s, align 8
  %arrayidx551 = getelementptr inbounds i8, i8* %272, i64 0
  %273 = load i8, i8* %arrayidx551, align 1
  %conv552 = zext i8 %273 to i32
  %cmp553 = icmp eq i32 105, %conv552
  br i1 %cmp553, label %cond.true555, label %cond.false567

cond.true555:                                     ; preds = %cond.false550
  %274 = load i8*, i8** %s, align 8
  %arrayidx556 = getelementptr inbounds i8, i8* %274, i64 1
  %275 = load i8, i8* %arrayidx556, align 1
  %conv557 = zext i8 %275 to i32
  %cmp558 = icmp eq i32 204, %conv557
  br i1 %cmp558, label %land.rhs560, label %land.end565

land.rhs560:                                      ; preds = %cond.true555
  %276 = load i8*, i8** %s, align 8
  %arrayidx561 = getelementptr inbounds i8, i8* %276, i64 2
  %277 = load i8, i8* %arrayidx561, align 1
  %conv562 = zext i8 %277 to i32
  %cmp563 = icmp eq i32 135, %conv562
  br label %land.end565

land.end565:                                      ; preds = %land.rhs560, %cond.true555
  %278 = phi i1 [ false, %cond.true555 ], [ %cmp563, %land.rhs560 ]
  %279 = zext i1 %278 to i64
  %cond566 = select i1 %278, i32 3, i32 0
  br label %cond.end1153

cond.false567:                                    ; preds = %cond.false550
  %280 = load i8*, i8** %s, align 8
  %arrayidx568 = getelementptr inbounds i8, i8* %280, i64 0
  %281 = load i8, i8* %arrayidx568, align 1
  %conv569 = zext i8 %281 to i32
  %cmp570 = icmp eq i32 106, %conv569
  br i1 %cmp570, label %cond.true572, label %cond.false584

cond.true572:                                     ; preds = %cond.false567
  %282 = load i8*, i8** %s, align 8
  %arrayidx573 = getelementptr inbounds i8, i8* %282, i64 1
  %283 = load i8, i8* %arrayidx573, align 1
  %conv574 = zext i8 %283 to i32
  %cmp575 = icmp eq i32 204, %conv574
  br i1 %cmp575, label %land.rhs577, label %land.end582

land.rhs577:                                      ; preds = %cond.true572
  %284 = load i8*, i8** %s, align 8
  %arrayidx578 = getelementptr inbounds i8, i8* %284, i64 2
  %285 = load i8, i8* %arrayidx578, align 1
  %conv579 = zext i8 %285 to i32
  %cmp580 = icmp eq i32 140, %conv579
  br label %land.end582

land.end582:                                      ; preds = %land.rhs577, %cond.true572
  %286 = phi i1 [ false, %cond.true572 ], [ %cmp580, %land.rhs577 ]
  %287 = zext i1 %286 to i64
  %cond583 = select i1 %286, i32 3, i32 0
  br label %cond.end1151

cond.false584:                                    ; preds = %cond.false567
  %288 = load i8*, i8** %s, align 8
  %arrayidx585 = getelementptr inbounds i8, i8* %288, i64 0
  %289 = load i8, i8* %arrayidx585, align 1
  %conv586 = zext i8 %289 to i32
  %cmp587 = icmp eq i32 115, %conv586
  br i1 %cmp587, label %cond.true589, label %cond.false601

cond.true589:                                     ; preds = %cond.false584
  %290 = load i8*, i8** %s, align 8
  %arrayidx590 = getelementptr inbounds i8, i8* %290, i64 1
  %291 = load i8, i8* %arrayidx590, align 1
  %conv591 = zext i8 %291 to i32
  %cmp592 = icmp eq i32 115, %conv591
  br i1 %cmp592, label %lor.end599, label %lor.rhs594

lor.rhs594:                                       ; preds = %cond.true589
  %292 = load i8*, i8** %s, align 8
  %arrayidx595 = getelementptr inbounds i8, i8* %292, i64 1
  %293 = load i8, i8* %arrayidx595, align 1
  %conv596 = zext i8 %293 to i32
  %cmp597 = icmp eq i32 116, %conv596
  br label %lor.end599

lor.end599:                                       ; preds = %lor.rhs594, %cond.true589
  %294 = phi i1 [ true, %cond.true589 ], [ %cmp597, %lor.rhs594 ]
  %295 = zext i1 %294 to i64
  %cond600 = select i1 %294, i32 2, i32 0
  br label %cond.end1149

cond.false601:                                    ; preds = %cond.false584
  %296 = load i8*, i8** %s, align 8
  %arrayidx602 = getelementptr inbounds i8, i8* %296, i64 0
  %297 = load i8, i8* %arrayidx602, align 1
  %conv603 = zext i8 %297 to i32
  %cmp604 = icmp eq i32 116, %conv603
  br i1 %cmp604, label %cond.true606, label %cond.false618

cond.true606:                                     ; preds = %cond.false601
  %298 = load i8*, i8** %s, align 8
  %arrayidx607 = getelementptr inbounds i8, i8* %298, i64 1
  %299 = load i8, i8* %arrayidx607, align 1
  %conv608 = zext i8 %299 to i32
  %cmp609 = icmp eq i32 204, %conv608
  br i1 %cmp609, label %land.rhs611, label %land.end616

land.rhs611:                                      ; preds = %cond.true606
  %300 = load i8*, i8** %s, align 8
  %arrayidx612 = getelementptr inbounds i8, i8* %300, i64 2
  %301 = load i8, i8* %arrayidx612, align 1
  %conv613 = zext i8 %301 to i32
  %cmp614 = icmp eq i32 136, %conv613
  br label %land.end616

land.end616:                                      ; preds = %land.rhs611, %cond.true606
  %302 = phi i1 [ false, %cond.true606 ], [ %cmp614, %land.rhs611 ]
  %303 = zext i1 %302 to i64
  %cond617 = select i1 %302, i32 3, i32 0
  br label %cond.end1147

cond.false618:                                    ; preds = %cond.false601
  %304 = load i8*, i8** %s, align 8
  %arrayidx619 = getelementptr inbounds i8, i8* %304, i64 0
  %305 = load i8, i8* %arrayidx619, align 1
  %conv620 = zext i8 %305 to i32
  %cmp621 = icmp eq i32 119, %conv620
  br i1 %cmp621, label %cond.true628, label %lor.lhs.false623

lor.lhs.false623:                                 ; preds = %cond.false618
  %306 = load i8*, i8** %s, align 8
  %arrayidx624 = getelementptr inbounds i8, i8* %306, i64 0
  %307 = load i8, i8* %arrayidx624, align 1
  %conv625 = zext i8 %307 to i32
  %cmp626 = icmp eq i32 121, %conv625
  br i1 %cmp626, label %cond.true628, label %cond.false640

cond.true628:                                     ; preds = %lor.lhs.false623, %cond.false618
  %308 = load i8*, i8** %s, align 8
  %arrayidx629 = getelementptr inbounds i8, i8* %308, i64 1
  %309 = load i8, i8* %arrayidx629, align 1
  %conv630 = zext i8 %309 to i32
  %cmp631 = icmp eq i32 204, %conv630
  br i1 %cmp631, label %land.rhs633, label %land.end638

land.rhs633:                                      ; preds = %cond.true628
  %310 = load i8*, i8** %s, align 8
  %arrayidx634 = getelementptr inbounds i8, i8* %310, i64 2
  %311 = load i8, i8* %arrayidx634, align 1
  %conv635 = zext i8 %311 to i32
  %cmp636 = icmp eq i32 138, %conv635
  br label %land.end638

land.end638:                                      ; preds = %land.rhs633, %cond.true628
  %312 = phi i1 [ false, %cond.true628 ], [ %cmp636, %land.rhs633 ]
  %313 = zext i1 %312 to i64
  %cond639 = select i1 %312, i32 3, i32 0
  br label %cond.end1145

cond.false640:                                    ; preds = %lor.lhs.false623
  %314 = load i8*, i8** %s, align 8
  %arrayidx641 = getelementptr inbounds i8, i8* %314, i64 0
  %315 = load i8, i8* %arrayidx641, align 1
  %conv642 = zext i8 %315 to i32
  %cmp643 = icmp eq i32 197, %conv642
  br i1 %cmp643, label %cond.true645, label %cond.false662

cond.true645:                                     ; preds = %cond.false640
  %316 = load i8*, i8** %s, align 8
  %arrayidx646 = getelementptr inbounds i8, i8* %316, i64 1
  %317 = load i8, i8* %arrayidx646, align 1
  %conv647 = zext i8 %317 to i32
  %cmp648 = icmp eq i32 191, %conv647
  br i1 %cmp648, label %land.lhs.true650, label %land.end660

land.lhs.true650:                                 ; preds = %cond.true645
  %318 = load i8*, i8** %s, align 8
  %arrayidx651 = getelementptr inbounds i8, i8* %318, i64 2
  %319 = load i8, i8* %arrayidx651, align 1
  %conv652 = zext i8 %319 to i32
  %cmp653 = icmp eq i32 197, %conv652
  br i1 %cmp653, label %land.rhs655, label %land.end660

land.rhs655:                                      ; preds = %land.lhs.true650
  %320 = load i8*, i8** %s, align 8
  %arrayidx656 = getelementptr inbounds i8, i8* %320, i64 3
  %321 = load i8, i8* %arrayidx656, align 1
  %conv657 = zext i8 %321 to i32
  %cmp658 = icmp eq i32 191, %conv657
  br label %land.end660

land.end660:                                      ; preds = %land.rhs655, %land.lhs.true650, %cond.true645
  %322 = phi i1 [ false, %land.lhs.true650 ], [ false, %cond.true645 ], [ %cmp658, %land.rhs655 ]
  %323 = zext i1 %322 to i64
  %cond661 = select i1 %322, i32 4, i32 0
  br label %cond.end1143

cond.false662:                                    ; preds = %cond.false640
  %324 = load i8*, i8** %s, align 8
  %arrayidx663 = getelementptr inbounds i8, i8* %324, i64 0
  %325 = load i8, i8* %arrayidx663, align 1
  %conv664 = zext i8 %325 to i32
  %cmp665 = icmp eq i32 202, %conv664
  br i1 %cmp665, label %cond.true667, label %cond.false679

cond.true667:                                     ; preds = %cond.false662
  %326 = load i8*, i8** %s, align 8
  %arrayidx668 = getelementptr inbounds i8, i8* %326, i64 1
  %327 = load i8, i8* %arrayidx668, align 1
  %conv669 = zext i8 %327 to i32
  %cmp670 = icmp eq i32 188, %conv669
  br i1 %cmp670, label %land.rhs672, label %land.end677

land.rhs672:                                      ; preds = %cond.true667
  %328 = load i8*, i8** %s, align 8
  %arrayidx673 = getelementptr inbounds i8, i8* %328, i64 2
  %329 = load i8, i8* %arrayidx673, align 1
  %conv674 = zext i8 %329 to i32
  %cmp675 = icmp eq i32 110, %conv674
  br label %land.end677

land.end677:                                      ; preds = %land.rhs672, %cond.true667
  %330 = phi i1 [ false, %cond.true667 ], [ %cmp675, %land.rhs672 ]
  %331 = zext i1 %330 to i64
  %cond678 = select i1 %330, i32 3, i32 0
  br label %cond.end1141

cond.false679:                                    ; preds = %cond.false662
  %332 = load i8*, i8** %s, align 8
  %arrayidx680 = getelementptr inbounds i8, i8* %332, i64 0
  %333 = load i8, i8* %arrayidx680, align 1
  %conv681 = zext i8 %333 to i32
  %cmp682 = icmp eq i32 206, %conv681
  br i1 %cmp682, label %cond.true684, label %cond.false816

cond.true684:                                     ; preds = %cond.false679
  %334 = load i8*, i8** %s, align 8
  %arrayidx685 = getelementptr inbounds i8, i8* %334, i64 1
  %335 = load i8, i8* %arrayidx685, align 1
  %conv686 = zext i8 %335 to i32
  %and687 = and i32 %conv686, 253
  %cmp688 = icmp eq i32 %and687, 172
  br i1 %cmp688, label %cond.true690, label %cond.false702

cond.true690:                                     ; preds = %cond.true684
  %336 = load i8*, i8** %s, align 8
  %arrayidx691 = getelementptr inbounds i8, i8* %336, i64 2
  %337 = load i8, i8* %arrayidx691, align 1
  %conv692 = zext i8 %337 to i32
  %cmp693 = icmp eq i32 206, %conv692
  br i1 %cmp693, label %land.rhs695, label %land.end700

land.rhs695:                                      ; preds = %cond.true690
  %338 = load i8*, i8** %s, align 8
  %arrayidx696 = getelementptr inbounds i8, i8* %338, i64 3
  %339 = load i8, i8* %arrayidx696, align 1
  %conv697 = zext i8 %339 to i32
  %cmp698 = icmp eq i32 185, %conv697
  br label %land.end700

land.end700:                                      ; preds = %land.rhs695, %cond.true690
  %340 = phi i1 [ false, %cond.true690 ], [ %cmp698, %land.rhs695 ]
  %341 = zext i1 %340 to i64
  %cond701 = select i1 %340, i32 4, i32 0
  br label %cond.end814

cond.false702:                                    ; preds = %cond.true684
  %342 = load i8*, i8** %s, align 8
  %arrayidx703 = getelementptr inbounds i8, i8* %342, i64 1
  %343 = load i8, i8* %arrayidx703, align 1
  %conv704 = zext i8 %343 to i32
  %cmp705 = icmp eq i32 177, %conv704
  br i1 %cmp705, label %cond.true712, label %lor.lhs.false707

lor.lhs.false707:                                 ; preds = %cond.false702
  %344 = load i8*, i8** %s, align 8
  %arrayidx708 = getelementptr inbounds i8, i8* %344, i64 1
  %345 = load i8, i8* %arrayidx708, align 1
  %conv709 = zext i8 %345 to i32
  %cmp710 = icmp eq i32 183, %conv709
  br i1 %cmp710, label %cond.true712, label %cond.false751

cond.true712:                                     ; preds = %lor.lhs.false707, %cond.false702
  %346 = load i8*, i8** %s, align 8
  %arrayidx713 = getelementptr inbounds i8, i8* %346, i64 2
  %347 = load i8, i8* %arrayidx713, align 1
  %conv714 = zext i8 %347 to i32
  %cmp715 = icmp eq i32 205, %conv714
  br i1 %cmp715, label %cond.true717, label %cond.false737

cond.true717:                                     ; preds = %cond.true712
  %348 = load i8*, i8** %s, align 8
  %arrayidx718 = getelementptr inbounds i8, i8* %348, i64 3
  %349 = load i8, i8* %arrayidx718, align 1
  %conv719 = zext i8 %349 to i32
  %cmp720 = icmp eq i32 130, %conv719
  br i1 %cmp720, label %cond.true722, label %cond.false734

cond.true722:                                     ; preds = %cond.true717
  %350 = load i8*, i8** %s, align 8
  %arrayidx723 = getelementptr inbounds i8, i8* %350, i64 4
  %351 = load i8, i8* %arrayidx723, align 1
  %conv724 = zext i8 %351 to i32
  %cmp725 = icmp eq i32 206, %conv724
  br i1 %cmp725, label %land.rhs727, label %land.end732

land.rhs727:                                      ; preds = %cond.true722
  %352 = load i8*, i8** %s, align 8
  %arrayidx728 = getelementptr inbounds i8, i8* %352, i64 5
  %353 = load i8, i8* %arrayidx728, align 1
  %conv729 = zext i8 %353 to i32
  %cmp730 = icmp eq i32 185, %conv729
  br label %land.end732

land.end732:                                      ; preds = %land.rhs727, %cond.true722
  %354 = phi i1 [ false, %cond.true722 ], [ %cmp730, %land.rhs727 ]
  %355 = zext i1 %354 to i64
  %cond733 = select i1 %354, i32 6, i32 4
  br label %cond.end735

cond.false734:                                    ; preds = %cond.true717
  br label %cond.end735

cond.end735:                                      ; preds = %cond.false734, %land.end732
  %cond736 = phi i32 [ %cond733, %land.end732 ], [ 0, %cond.false734 ]
  br label %cond.end749

cond.false737:                                    ; preds = %cond.true712
  %356 = load i8*, i8** %s, align 8
  %arrayidx738 = getelementptr inbounds i8, i8* %356, i64 2
  %357 = load i8, i8* %arrayidx738, align 1
  %conv739 = zext i8 %357 to i32
  %cmp740 = icmp eq i32 206, %conv739
  br i1 %cmp740, label %land.rhs742, label %land.end747

land.rhs742:                                      ; preds = %cond.false737
  %358 = load i8*, i8** %s, align 8
  %arrayidx743 = getelementptr inbounds i8, i8* %358, i64 3
  %359 = load i8, i8* %arrayidx743, align 1
  %conv744 = zext i8 %359 to i32
  %cmp745 = icmp eq i32 185, %conv744
  br label %land.end747

land.end747:                                      ; preds = %land.rhs742, %cond.false737
  %360 = phi i1 [ false, %cond.false737 ], [ %cmp745, %land.rhs742 ]
  %361 = zext i1 %360 to i64
  %cond748 = select i1 %360, i32 4, i32 0
  br label %cond.end749

cond.end749:                                      ; preds = %land.end747, %cond.end735
  %cond750 = phi i32 [ %cond736, %cond.end735 ], [ %cond748, %land.end747 ]
  br label %cond.end812

cond.false751:                                    ; preds = %lor.lhs.false707
  %362 = load i8*, i8** %s, align 8
  %arrayidx752 = getelementptr inbounds i8, i8* %362, i64 1
  %363 = load i8, i8* %arrayidx752, align 1
  %conv753 = zext i8 %363 to i32
  %cmp754 = icmp eq i32 185, %conv753
  br i1 %cmp754, label %cond.true756, label %cond.false809

cond.true756:                                     ; preds = %cond.false751
  %364 = load i8*, i8** %s, align 8
  %arrayidx757 = getelementptr inbounds i8, i8* %364, i64 2
  %365 = load i8, i8* %arrayidx757, align 1
  %conv758 = zext i8 %365 to i32
  %cmp759 = icmp eq i32 204, %conv758
  br i1 %cmp759, label %cond.true761, label %cond.false795

cond.true761:                                     ; preds = %cond.true756
  %366 = load i8*, i8** %s, align 8
  %arrayidx762 = getelementptr inbounds i8, i8* %366, i64 3
  %367 = load i8, i8* %arrayidx762, align 1
  %conv763 = zext i8 %367 to i32
  %cmp764 = icmp eq i32 136, %conv763
  br i1 %cmp764, label %cond.true766, label %cond.false792

cond.true766:                                     ; preds = %cond.true761
  %368 = load i8*, i8** %s, align 8
  %arrayidx767 = getelementptr inbounds i8, i8* %368, i64 4
  %369 = load i8, i8* %arrayidx767, align 1
  %conv768 = zext i8 %369 to i32
  %cmp769 = icmp eq i32 204, %conv768
  br i1 %cmp769, label %cond.true771, label %cond.false778

cond.true771:                                     ; preds = %cond.true766
  %370 = load i8*, i8** %s, align 8
  %arrayidx772 = getelementptr inbounds i8, i8* %370, i64 5
  %371 = load i8, i8* %arrayidx772, align 1
  %conv773 = zext i8 %371 to i32
  %and774 = and i32 %conv773, 254
  %cmp775 = icmp eq i32 %and774, 128
  %372 = zext i1 %cmp775 to i64
  %cond777 = select i1 %cmp775, i32 6, i32 0
  br label %cond.end790

cond.false778:                                    ; preds = %cond.true766
  %373 = load i8*, i8** %s, align 8
  %arrayidx779 = getelementptr inbounds i8, i8* %373, i64 4
  %374 = load i8, i8* %arrayidx779, align 1
  %conv780 = zext i8 %374 to i32
  %cmp781 = icmp eq i32 205, %conv780
  br i1 %cmp781, label %land.rhs783, label %land.end788

land.rhs783:                                      ; preds = %cond.false778
  %375 = load i8*, i8** %s, align 8
  %arrayidx784 = getelementptr inbounds i8, i8* %375, i64 5
  %376 = load i8, i8* %arrayidx784, align 1
  %conv785 = zext i8 %376 to i32
  %cmp786 = icmp eq i32 130, %conv785
  br label %land.end788

land.end788:                                      ; preds = %land.rhs783, %cond.false778
  %377 = phi i1 [ false, %cond.false778 ], [ %cmp786, %land.rhs783 ]
  %378 = zext i1 %377 to i64
  %cond789 = select i1 %377, i32 6, i32 0
  br label %cond.end790

cond.end790:                                      ; preds = %land.end788, %cond.true771
  %cond791 = phi i32 [ %cond777, %cond.true771 ], [ %cond789, %land.end788 ]
  br label %cond.end793

cond.false792:                                    ; preds = %cond.true761
  br label %cond.end793

cond.end793:                                      ; preds = %cond.false792, %cond.end790
  %cond794 = phi i32 [ %cond791, %cond.end790 ], [ 0, %cond.false792 ]
  br label %cond.end807

cond.false795:                                    ; preds = %cond.true756
  %379 = load i8*, i8** %s, align 8
  %arrayidx796 = getelementptr inbounds i8, i8* %379, i64 2
  %380 = load i8, i8* %arrayidx796, align 1
  %conv797 = zext i8 %380 to i32
  %cmp798 = icmp eq i32 205, %conv797
  br i1 %cmp798, label %land.rhs800, label %land.end805

land.rhs800:                                      ; preds = %cond.false795
  %381 = load i8*, i8** %s, align 8
  %arrayidx801 = getelementptr inbounds i8, i8* %381, i64 3
  %382 = load i8, i8* %arrayidx801, align 1
  %conv802 = zext i8 %382 to i32
  %cmp803 = icmp eq i32 130, %conv802
  br label %land.end805

land.end805:                                      ; preds = %land.rhs800, %cond.false795
  %383 = phi i1 [ false, %cond.false795 ], [ %cmp803, %land.rhs800 ]
  %384 = zext i1 %383 to i64
  %cond806 = select i1 %383, i32 4, i32 0
  br label %cond.end807

cond.end807:                                      ; preds = %land.end805, %cond.end793
  %cond808 = phi i32 [ %cond794, %cond.end793 ], [ %cond806, %land.end805 ]
  br label %cond.end810

cond.false809:                                    ; preds = %cond.false751
  br label %cond.end810

cond.end810:                                      ; preds = %cond.false809, %cond.end807
  %cond811 = phi i32 [ %cond808, %cond.end807 ], [ 0, %cond.false809 ]
  br label %cond.end812

cond.end812:                                      ; preds = %cond.end810, %cond.end749
  %cond813 = phi i32 [ %cond750, %cond.end749 ], [ %cond811, %cond.end810 ]
  br label %cond.end814

cond.end814:                                      ; preds = %cond.end812, %land.end700
  %cond815 = phi i32 [ %cond701, %land.end700 ], [ %cond813, %cond.end812 ]
  br label %cond.end1139

cond.false816:                                    ; preds = %cond.false679
  %385 = load i8*, i8** %s, align 8
  %arrayidx817 = getelementptr inbounds i8, i8* %385, i64 0
  %386 = load i8, i8* %arrayidx817, align 1
  %conv818 = zext i8 %386 to i32
  %cmp819 = icmp eq i32 207, %conv818
  br i1 %cmp819, label %cond.true821, label %cond.false996

cond.true821:                                     ; preds = %cond.false816
  %387 = load i8*, i8** %s, align 8
  %arrayidx822 = getelementptr inbounds i8, i8* %387, i64 1
  %388 = load i8, i8* %arrayidx822, align 1
  %conv823 = zext i8 %388 to i32
  %cmp824 = icmp eq i32 129, %conv823
  br i1 %cmp824, label %cond.true826, label %cond.false838

cond.true826:                                     ; preds = %cond.true821
  %389 = load i8*, i8** %s, align 8
  %arrayidx827 = getelementptr inbounds i8, i8* %389, i64 2
  %390 = load i8, i8* %arrayidx827, align 1
  %conv828 = zext i8 %390 to i32
  %cmp829 = icmp eq i32 204, %conv828
  br i1 %cmp829, label %land.rhs831, label %land.end836

land.rhs831:                                      ; preds = %cond.true826
  %391 = load i8*, i8** %s, align 8
  %arrayidx832 = getelementptr inbounds i8, i8* %391, i64 3
  %392 = load i8, i8* %arrayidx832, align 1
  %conv833 = zext i8 %392 to i32
  %cmp834 = icmp eq i32 147, %conv833
  br label %land.end836

land.end836:                                      ; preds = %land.rhs831, %cond.true826
  %393 = phi i1 [ false, %cond.true826 ], [ %cmp834, %land.rhs831 ]
  %394 = zext i1 %393 to i64
  %cond837 = select i1 %393, i32 4, i32 0
  br label %cond.end994

cond.false838:                                    ; preds = %cond.true821
  %395 = load i8*, i8** %s, align 8
  %arrayidx839 = getelementptr inbounds i8, i8* %395, i64 1
  %396 = load i8, i8* %arrayidx839, align 1
  %conv840 = zext i8 %396 to i32
  %cmp841 = icmp eq i32 133, %conv840
  br i1 %cmp841, label %cond.true843, label %cond.false929

cond.true843:                                     ; preds = %cond.false838
  %397 = load i8*, i8** %s, align 8
  %arrayidx844 = getelementptr inbounds i8, i8* %397, i64 2
  %398 = load i8, i8* %arrayidx844, align 1
  %conv845 = zext i8 %398 to i32
  %cmp846 = icmp eq i32 204, %conv845
  br i1 %cmp846, label %cond.true848, label %cond.false915

cond.true848:                                     ; preds = %cond.true843
  %399 = load i8*, i8** %s, align 8
  %arrayidx849 = getelementptr inbounds i8, i8* %399, i64 3
  %400 = load i8, i8* %arrayidx849, align 1
  %conv850 = zext i8 %400 to i32
  %cmp851 = icmp eq i32 136, %conv850
  br i1 %cmp851, label %cond.true853, label %cond.false879

cond.true853:                                     ; preds = %cond.true848
  %401 = load i8*, i8** %s, align 8
  %arrayidx854 = getelementptr inbounds i8, i8* %401, i64 4
  %402 = load i8, i8* %arrayidx854, align 1
  %conv855 = zext i8 %402 to i32
  %cmp856 = icmp eq i32 204, %conv855
  br i1 %cmp856, label %cond.true858, label %cond.false865

cond.true858:                                     ; preds = %cond.true853
  %403 = load i8*, i8** %s, align 8
  %arrayidx859 = getelementptr inbounds i8, i8* %403, i64 5
  %404 = load i8, i8* %arrayidx859, align 1
  %conv860 = zext i8 %404 to i32
  %and861 = and i32 %conv860, 254
  %cmp862 = icmp eq i32 %and861, 128
  %405 = zext i1 %cmp862 to i64
  %cond864 = select i1 %cmp862, i32 6, i32 0
  br label %cond.end877

cond.false865:                                    ; preds = %cond.true853
  %406 = load i8*, i8** %s, align 8
  %arrayidx866 = getelementptr inbounds i8, i8* %406, i64 4
  %407 = load i8, i8* %arrayidx866, align 1
  %conv867 = zext i8 %407 to i32
  %cmp868 = icmp eq i32 205, %conv867
  br i1 %cmp868, label %land.rhs870, label %land.end875

land.rhs870:                                      ; preds = %cond.false865
  %408 = load i8*, i8** %s, align 8
  %arrayidx871 = getelementptr inbounds i8, i8* %408, i64 5
  %409 = load i8, i8* %arrayidx871, align 1
  %conv872 = zext i8 %409 to i32
  %cmp873 = icmp eq i32 130, %conv872
  br label %land.end875

land.end875:                                      ; preds = %land.rhs870, %cond.false865
  %410 = phi i1 [ false, %cond.false865 ], [ %cmp873, %land.rhs870 ]
  %411 = zext i1 %410 to i64
  %cond876 = select i1 %410, i32 6, i32 0
  br label %cond.end877

cond.end877:                                      ; preds = %land.end875, %cond.true858
  %cond878 = phi i32 [ %cond864, %cond.true858 ], [ %cond876, %land.end875 ]
  br label %cond.end913

cond.false879:                                    ; preds = %cond.true848
  %412 = load i8*, i8** %s, align 8
  %arrayidx880 = getelementptr inbounds i8, i8* %412, i64 3
  %413 = load i8, i8* %arrayidx880, align 1
  %conv881 = zext i8 %413 to i32
  %cmp882 = icmp eq i32 147, %conv881
  br i1 %cmp882, label %cond.true884, label %cond.false910

cond.true884:                                     ; preds = %cond.false879
  %414 = load i8*, i8** %s, align 8
  %arrayidx885 = getelementptr inbounds i8, i8* %414, i64 4
  %415 = load i8, i8* %arrayidx885, align 1
  %conv886 = zext i8 %415 to i32
  %cmp887 = icmp eq i32 204, %conv886
  br i1 %cmp887, label %cond.true889, label %cond.false896

cond.true889:                                     ; preds = %cond.true884
  %416 = load i8*, i8** %s, align 8
  %arrayidx890 = getelementptr inbounds i8, i8* %416, i64 5
  %417 = load i8, i8* %arrayidx890, align 1
  %conv891 = zext i8 %417 to i32
  %and892 = and i32 %conv891, 254
  %cmp893 = icmp eq i32 %and892, 128
  %418 = zext i1 %cmp893 to i64
  %cond895 = select i1 %cmp893, i32 6, i32 4
  br label %cond.end908

cond.false896:                                    ; preds = %cond.true884
  %419 = load i8*, i8** %s, align 8
  %arrayidx897 = getelementptr inbounds i8, i8* %419, i64 4
  %420 = load i8, i8* %arrayidx897, align 1
  %conv898 = zext i8 %420 to i32
  %cmp899 = icmp eq i32 205, %conv898
  br i1 %cmp899, label %land.rhs901, label %land.end906

land.rhs901:                                      ; preds = %cond.false896
  %421 = load i8*, i8** %s, align 8
  %arrayidx902 = getelementptr inbounds i8, i8* %421, i64 5
  %422 = load i8, i8* %arrayidx902, align 1
  %conv903 = zext i8 %422 to i32
  %cmp904 = icmp eq i32 130, %conv903
  br label %land.end906

land.end906:                                      ; preds = %land.rhs901, %cond.false896
  %423 = phi i1 [ false, %cond.false896 ], [ %cmp904, %land.rhs901 ]
  %424 = zext i1 %423 to i64
  %cond907 = select i1 %423, i32 6, i32 4
  br label %cond.end908

cond.end908:                                      ; preds = %land.end906, %cond.true889
  %cond909 = phi i32 [ %cond895, %cond.true889 ], [ %cond907, %land.end906 ]
  br label %cond.end911

cond.false910:                                    ; preds = %cond.false879
  br label %cond.end911

cond.end911:                                      ; preds = %cond.false910, %cond.end908
  %cond912 = phi i32 [ %cond909, %cond.end908 ], [ 0, %cond.false910 ]
  br label %cond.end913

cond.end913:                                      ; preds = %cond.end911, %cond.end877
  %cond914 = phi i32 [ %cond878, %cond.end877 ], [ %cond912, %cond.end911 ]
  br label %cond.end927

cond.false915:                                    ; preds = %cond.true843
  %425 = load i8*, i8** %s, align 8
  %arrayidx916 = getelementptr inbounds i8, i8* %425, i64 2
  %426 = load i8, i8* %arrayidx916, align 1
  %conv917 = zext i8 %426 to i32
  %cmp918 = icmp eq i32 205, %conv917
  br i1 %cmp918, label %land.rhs920, label %land.end925

land.rhs920:                                      ; preds = %cond.false915
  %427 = load i8*, i8** %s, align 8
  %arrayidx921 = getelementptr inbounds i8, i8* %427, i64 3
  %428 = load i8, i8* %arrayidx921, align 1
  %conv922 = zext i8 %428 to i32
  %cmp923 = icmp eq i32 130, %conv922
  br label %land.end925

land.end925:                                      ; preds = %land.rhs920, %cond.false915
  %429 = phi i1 [ false, %cond.false915 ], [ %cmp923, %land.rhs920 ]
  %430 = zext i1 %429 to i64
  %cond926 = select i1 %429, i32 4, i32 0
  br label %cond.end927

cond.end927:                                      ; preds = %land.end925, %cond.end913
  %cond928 = phi i32 [ %cond914, %cond.end913 ], [ %cond926, %land.end925 ]
  br label %cond.end992

cond.false929:                                    ; preds = %cond.false838
  %431 = load i8*, i8** %s, align 8
  %arrayidx930 = getelementptr inbounds i8, i8* %431, i64 1
  %432 = load i8, i8* %arrayidx930, align 1
  %conv931 = zext i8 %432 to i32
  %cmp932 = icmp eq i32 137, %conv931
  br i1 %cmp932, label %cond.true934, label %cond.false973

cond.true934:                                     ; preds = %cond.false929
  %433 = load i8*, i8** %s, align 8
  %arrayidx935 = getelementptr inbounds i8, i8* %433, i64 2
  %434 = load i8, i8* %arrayidx935, align 1
  %conv936 = zext i8 %434 to i32
  %cmp937 = icmp eq i32 205, %conv936
  br i1 %cmp937, label %cond.true939, label %cond.false959

cond.true939:                                     ; preds = %cond.true934
  %435 = load i8*, i8** %s, align 8
  %arrayidx940 = getelementptr inbounds i8, i8* %435, i64 3
  %436 = load i8, i8* %arrayidx940, align 1
  %conv941 = zext i8 %436 to i32
  %cmp942 = icmp eq i32 130, %conv941
  br i1 %cmp942, label %cond.true944, label %cond.false956

cond.true944:                                     ; preds = %cond.true939
  %437 = load i8*, i8** %s, align 8
  %arrayidx945 = getelementptr inbounds i8, i8* %437, i64 4
  %438 = load i8, i8* %arrayidx945, align 1
  %conv946 = zext i8 %438 to i32
  %cmp947 = icmp eq i32 206, %conv946
  br i1 %cmp947, label %land.rhs949, label %land.end954

land.rhs949:                                      ; preds = %cond.true944
  %439 = load i8*, i8** %s, align 8
  %arrayidx950 = getelementptr inbounds i8, i8* %439, i64 5
  %440 = load i8, i8* %arrayidx950, align 1
  %conv951 = zext i8 %440 to i32
  %cmp952 = icmp eq i32 185, %conv951
  br label %land.end954

land.end954:                                      ; preds = %land.rhs949, %cond.true944
  %441 = phi i1 [ false, %cond.true944 ], [ %cmp952, %land.rhs949 ]
  %442 = zext i1 %441 to i64
  %cond955 = select i1 %441, i32 6, i32 4
  br label %cond.end957

cond.false956:                                    ; preds = %cond.true939
  br label %cond.end957

cond.end957:                                      ; preds = %cond.false956, %land.end954
  %cond958 = phi i32 [ %cond955, %land.end954 ], [ 0, %cond.false956 ]
  br label %cond.end971

cond.false959:                                    ; preds = %cond.true934
  %443 = load i8*, i8** %s, align 8
  %arrayidx960 = getelementptr inbounds i8, i8* %443, i64 2
  %444 = load i8, i8* %arrayidx960, align 1
  %conv961 = zext i8 %444 to i32
  %cmp962 = icmp eq i32 206, %conv961
  br i1 %cmp962, label %land.rhs964, label %land.end969

land.rhs964:                                      ; preds = %cond.false959
  %445 = load i8*, i8** %s, align 8
  %arrayidx965 = getelementptr inbounds i8, i8* %445, i64 3
  %446 = load i8, i8* %arrayidx965, align 1
  %conv966 = zext i8 %446 to i32
  %cmp967 = icmp eq i32 185, %conv966
  br label %land.end969

land.end969:                                      ; preds = %land.rhs964, %cond.false959
  %447 = phi i1 [ false, %cond.false959 ], [ %cmp967, %land.rhs964 ]
  %448 = zext i1 %447 to i64
  %cond970 = select i1 %447, i32 4, i32 0
  br label %cond.end971

cond.end971:                                      ; preds = %land.end969, %cond.end957
  %cond972 = phi i32 [ %cond958, %cond.end957 ], [ %cond970, %land.end969 ]
  br label %cond.end990

cond.false973:                                    ; preds = %cond.false929
  %449 = load i8*, i8** %s, align 8
  %arrayidx974 = getelementptr inbounds i8, i8* %449, i64 1
  %450 = load i8, i8* %arrayidx974, align 1
  %conv975 = zext i8 %450 to i32
  %cmp976 = icmp eq i32 142, %conv975
  br i1 %cmp976, label %land.lhs.true978, label %land.end988

land.lhs.true978:                                 ; preds = %cond.false973
  %451 = load i8*, i8** %s, align 8
  %arrayidx979 = getelementptr inbounds i8, i8* %451, i64 2
  %452 = load i8, i8* %arrayidx979, align 1
  %conv980 = zext i8 %452 to i32
  %cmp981 = icmp eq i32 206, %conv980
  br i1 %cmp981, label %land.rhs983, label %land.end988

land.rhs983:                                      ; preds = %land.lhs.true978
  %453 = load i8*, i8** %s, align 8
  %arrayidx984 = getelementptr inbounds i8, i8* %453, i64 3
  %454 = load i8, i8* %arrayidx984, align 1
  %conv985 = zext i8 %454 to i32
  %cmp986 = icmp eq i32 185, %conv985
  br label %land.end988

land.end988:                                      ; preds = %land.rhs983, %land.lhs.true978, %cond.false973
  %455 = phi i1 [ false, %land.lhs.true978 ], [ false, %cond.false973 ], [ %cmp986, %land.rhs983 ]
  %456 = zext i1 %455 to i64
  %cond989 = select i1 %455, i32 4, i32 0
  br label %cond.end990

cond.end990:                                      ; preds = %land.end988, %cond.end971
  %cond991 = phi i32 [ %cond972, %cond.end971 ], [ %cond989, %land.end988 ]
  br label %cond.end992

cond.end992:                                      ; preds = %cond.end990, %cond.end927
  %cond993 = phi i32 [ %cond928, %cond.end927 ], [ %cond991, %cond.end990 ]
  br label %cond.end994

cond.end994:                                      ; preds = %cond.end992, %land.end836
  %cond995 = phi i32 [ %cond837, %land.end836 ], [ %cond993, %cond.end992 ]
  br label %cond.end1137

cond.false996:                                    ; preds = %cond.false816
  %457 = load i8*, i8** %s, align 8
  %arrayidx997 = getelementptr inbounds i8, i8* %457, i64 0
  %458 = load i8, i8* %arrayidx997, align 1
  %conv998 = zext i8 %458 to i32
  %cmp999 = icmp eq i32 213, %conv998
  br i1 %cmp999, label %cond.true1001, label %cond.false1068

cond.true1001:                                    ; preds = %cond.false996
  %459 = load i8*, i8** %s, align 8
  %arrayidx1002 = getelementptr inbounds i8, i8* %459, i64 1
  %460 = load i8, i8* %arrayidx1002, align 1
  %conv1003 = zext i8 %460 to i32
  %cmp1004 = icmp eq i32 165, %conv1003
  br i1 %cmp1004, label %cond.true1006, label %cond.false1018

cond.true1006:                                    ; preds = %cond.true1001
  %461 = load i8*, i8** %s, align 8
  %arrayidx1007 = getelementptr inbounds i8, i8* %461, i64 2
  %462 = load i8, i8* %arrayidx1007, align 1
  %conv1008 = zext i8 %462 to i32
  %cmp1009 = icmp eq i32 214, %conv1008
  br i1 %cmp1009, label %land.rhs1011, label %land.end1016

land.rhs1011:                                     ; preds = %cond.true1006
  %463 = load i8*, i8** %s, align 8
  %arrayidx1012 = getelementptr inbounds i8, i8* %463, i64 3
  %464 = load i8, i8* %arrayidx1012, align 1
  %conv1013 = zext i8 %464 to i32
  %cmp1014 = icmp eq i32 130, %conv1013
  br label %land.end1016

land.end1016:                                     ; preds = %land.rhs1011, %cond.true1006
  %465 = phi i1 [ false, %cond.true1006 ], [ %cmp1014, %land.rhs1011 ]
  %466 = zext i1 %465 to i64
  %cond1017 = select i1 %465, i32 4, i32 0
  br label %cond.end1066

cond.false1018:                                   ; preds = %cond.true1001
  %467 = load i8*, i8** %s, align 8
  %arrayidx1019 = getelementptr inbounds i8, i8* %467, i64 1
  %468 = load i8, i8* %arrayidx1019, align 1
  %conv1020 = zext i8 %468 to i32
  %cmp1021 = icmp eq i32 180, %conv1020
  br i1 %cmp1021, label %cond.true1023, label %cond.false1047

cond.true1023:                                    ; preds = %cond.false1018
  %469 = load i8*, i8** %s, align 8
  %arrayidx1024 = getelementptr inbounds i8, i8* %469, i64 2
  %470 = load i8, i8* %arrayidx1024, align 1
  %conv1025 = zext i8 %470 to i32
  %cmp1026 = icmp eq i32 213, %conv1025
  br i1 %cmp1026, label %land.rhs1028, label %land.end1045

land.rhs1028:                                     ; preds = %cond.true1023
  %471 = load i8*, i8** %s, align 8
  %arrayidx1029 = getelementptr inbounds i8, i8* %471, i64 3
  %472 = load i8, i8* %arrayidx1029, align 1
  %conv1030 = zext i8 %472 to i32
  %and1031 = and i32 %conv1030, 247
  %cmp1032 = icmp eq i32 %and1031, 165
  br i1 %cmp1032, label %lor.end1044, label %lor.lhs.false1034

lor.lhs.false1034:                                ; preds = %land.rhs1028
  %473 = load i8*, i8** %s, align 8
  %arrayidx1035 = getelementptr inbounds i8, i8* %473, i64 3
  %474 = load i8, i8* %arrayidx1035, align 1
  %conv1036 = zext i8 %474 to i32
  %cmp1037 = icmp eq i32 %conv1036, 171
  br i1 %cmp1037, label %lor.end1044, label %lor.rhs1039

lor.rhs1039:                                      ; preds = %lor.lhs.false1034
  %475 = load i8*, i8** %s, align 8
  %arrayidx1040 = getelementptr inbounds i8, i8* %475, i64 3
  %476 = load i8, i8* %arrayidx1040, align 1
  %conv1041 = zext i8 %476 to i32
  %cmp1042 = icmp eq i32 %conv1041, 182
  br label %lor.end1044

lor.end1044:                                      ; preds = %lor.rhs1039, %lor.lhs.false1034, %land.rhs1028
  %477 = phi i1 [ true, %lor.lhs.false1034 ], [ true, %land.rhs1028 ], [ %cmp1042, %lor.rhs1039 ]
  br label %land.end1045

land.end1045:                                     ; preds = %lor.end1044, %cond.true1023
  %478 = phi i1 [ false, %cond.true1023 ], [ %477, %lor.end1044 ]
  %479 = zext i1 %478 to i64
  %cond1046 = select i1 %478, i32 4, i32 0
  br label %cond.end1064

cond.false1047:                                   ; preds = %cond.false1018
  %480 = load i8*, i8** %s, align 8
  %arrayidx1048 = getelementptr inbounds i8, i8* %480, i64 1
  %481 = load i8, i8* %arrayidx1048, align 1
  %conv1049 = zext i8 %481 to i32
  %cmp1050 = icmp eq i32 190, %conv1049
  br i1 %cmp1050, label %land.lhs.true1052, label %land.end1062

land.lhs.true1052:                                ; preds = %cond.false1047
  %482 = load i8*, i8** %s, align 8
  %arrayidx1053 = getelementptr inbounds i8, i8* %482, i64 2
  %483 = load i8, i8* %arrayidx1053, align 1
  %conv1054 = zext i8 %483 to i32
  %cmp1055 = icmp eq i32 213, %conv1054
  br i1 %cmp1055, label %land.rhs1057, label %land.end1062

land.rhs1057:                                     ; preds = %land.lhs.true1052
  %484 = load i8*, i8** %s, align 8
  %arrayidx1058 = getelementptr inbounds i8, i8* %484, i64 3
  %485 = load i8, i8* %arrayidx1058, align 1
  %conv1059 = zext i8 %485 to i32
  %cmp1060 = icmp eq i32 182, %conv1059
  br label %land.end1062

land.end1062:                                     ; preds = %land.rhs1057, %land.lhs.true1052, %cond.false1047
  %486 = phi i1 [ false, %land.lhs.true1052 ], [ false, %cond.false1047 ], [ %cmp1060, %land.rhs1057 ]
  %487 = zext i1 %486 to i64
  %cond1063 = select i1 %486, i32 4, i32 0
  br label %cond.end1064

cond.end1064:                                     ; preds = %land.end1062, %land.end1045
  %cond1065 = phi i32 [ %cond1046, %land.end1045 ], [ %cond1063, %land.end1062 ]
  br label %cond.end1066

cond.end1066:                                     ; preds = %cond.end1064, %land.end1016
  %cond1067 = phi i32 [ %cond1017, %land.end1016 ], [ %cond1065, %cond.end1064 ]
  br label %cond.end1135

cond.false1068:                                   ; preds = %cond.false996
  %488 = load i8*, i8** %s, align 8
  %arrayidx1069 = getelementptr inbounds i8, i8* %488, i64 0
  %489 = load i8, i8* %arrayidx1069, align 1
  %conv1070 = zext i8 %489 to i32
  %cmp1071 = icmp eq i32 225, %conv1070
  br i1 %cmp1071, label %cond.true1073, label %cond.false1132

cond.true1073:                                    ; preds = %cond.false1068
  %490 = load i8*, i8** %s, align 8
  %arrayidx1074 = getelementptr inbounds i8, i8* %490, i64 1
  %491 = load i8, i8* %arrayidx1074, align 1
  %conv1075 = zext i8 %491 to i32
  %cmp1076 = icmp eq i32 188, %conv1075
  br i1 %cmp1076, label %cond.true1078, label %cond.false1096

cond.true1078:                                    ; preds = %cond.true1073
  %492 = load i8*, i8** %s, align 8
  %arrayidx1079 = getelementptr inbounds i8, i8* %492, i64 2
  %493 = load i8, i8* %arrayidx1079, align 1
  %conv1080 = zext i8 %493 to i32
  %and1081 = and i32 %conv1080, 216
  %cmp1082 = icmp eq i32 %and1081, 128
  br i1 %cmp1082, label %land.lhs.true1084, label %land.end1094

land.lhs.true1084:                                ; preds = %cond.true1078
  %494 = load i8*, i8** %s, align 8
  %arrayidx1085 = getelementptr inbounds i8, i8* %494, i64 3
  %495 = load i8, i8* %arrayidx1085, align 1
  %conv1086 = zext i8 %495 to i32
  %cmp1087 = icmp eq i32 206, %conv1086
  br i1 %cmp1087, label %land.rhs1089, label %land.end1094

land.rhs1089:                                     ; preds = %land.lhs.true1084
  %496 = load i8*, i8** %s, align 8
  %arrayidx1090 = getelementptr inbounds i8, i8* %496, i64 4
  %497 = load i8, i8* %arrayidx1090, align 1
  %conv1091 = zext i8 %497 to i32
  %cmp1092 = icmp eq i32 185, %conv1091
  br label %land.end1094

land.end1094:                                     ; preds = %land.rhs1089, %land.lhs.true1084, %cond.true1078
  %498 = phi i1 [ false, %land.lhs.true1084 ], [ false, %cond.true1078 ], [ %cmp1092, %land.rhs1089 ]
  %499 = zext i1 %498 to i64
  %cond1095 = select i1 %498, i32 5, i32 0
  br label %cond.end1130

cond.false1096:                                   ; preds = %cond.true1073
  %500 = load i8*, i8** %s, align 8
  %arrayidx1097 = getelementptr inbounds i8, i8* %500, i64 1
  %501 = load i8, i8* %arrayidx1097, align 1
  %conv1098 = zext i8 %501 to i32
  %cmp1099 = icmp eq i32 189, %conv1098
  br i1 %cmp1099, label %land.lhs.true1101, label %land.end1128

land.lhs.true1101:                                ; preds = %cond.false1096
  %502 = load i8*, i8** %s, align 8
  %arrayidx1102 = getelementptr inbounds i8, i8* %502, i64 2
  %503 = load i8, i8* %arrayidx1102, align 1
  %conv1103 = zext i8 %503 to i32
  %and1104 = and i32 %conv1103, 248
  %cmp1105 = icmp eq i32 %and1104, 160
  br i1 %cmp1105, label %land.lhs.true1118, label %lor.lhs.false1107

lor.lhs.false1107:                                ; preds = %land.lhs.true1101
  %504 = load i8*, i8** %s, align 8
  %arrayidx1108 = getelementptr inbounds i8, i8* %504, i64 2
  %505 = load i8, i8* %arrayidx1108, align 1
  %conv1109 = zext i8 %505 to i32
  %and1110 = and i32 %conv1109, 251
  %cmp1111 = icmp eq i32 %and1110, 176
  br i1 %cmp1111, label %land.lhs.true1118, label %lor.lhs.false1113

lor.lhs.false1113:                                ; preds = %lor.lhs.false1107
  %506 = load i8*, i8** %s, align 8
  %arrayidx1114 = getelementptr inbounds i8, i8* %506, i64 2
  %507 = load i8, i8* %arrayidx1114, align 1
  %conv1115 = zext i8 %507 to i32
  %cmp1116 = icmp eq i32 %conv1115, 188
  br i1 %cmp1116, label %land.lhs.true1118, label %land.end1128

land.lhs.true1118:                                ; preds = %lor.lhs.false1113, %lor.lhs.false1107, %land.lhs.true1101
  %508 = load i8*, i8** %s, align 8
  %arrayidx1119 = getelementptr inbounds i8, i8* %508, i64 3
  %509 = load i8, i8* %arrayidx1119, align 1
  %conv1120 = zext i8 %509 to i32
  %cmp1121 = icmp eq i32 206, %conv1120
  br i1 %cmp1121, label %land.rhs1123, label %land.end1128

land.rhs1123:                                     ; preds = %land.lhs.true1118
  %510 = load i8*, i8** %s, align 8
  %arrayidx1124 = getelementptr inbounds i8, i8* %510, i64 4
  %511 = load i8, i8* %arrayidx1124, align 1
  %conv1125 = zext i8 %511 to i32
  %cmp1126 = icmp eq i32 185, %conv1125
  br label %land.end1128

land.end1128:                                     ; preds = %land.rhs1123, %land.lhs.true1118, %lor.lhs.false1113, %cond.false1096
  %512 = phi i1 [ false, %land.lhs.true1118 ], [ false, %lor.lhs.false1113 ], [ false, %cond.false1096 ], [ %cmp1126, %land.rhs1123 ]
  %513 = zext i1 %512 to i64
  %cond1129 = select i1 %512, i32 5, i32 0
  br label %cond.end1130

cond.end1130:                                     ; preds = %land.end1128, %land.end1094
  %cond1131 = phi i32 [ %cond1095, %land.end1094 ], [ %cond1129, %land.end1128 ]
  br label %cond.end1133

cond.false1132:                                   ; preds = %cond.false1068
  br label %cond.end1133

cond.end1133:                                     ; preds = %cond.false1132, %cond.end1130
  %cond1134 = phi i32 [ %cond1131, %cond.end1130 ], [ 0, %cond.false1132 ]
  br label %cond.end1135

cond.end1135:                                     ; preds = %cond.end1133, %cond.end1066
  %cond1136 = phi i32 [ %cond1067, %cond.end1066 ], [ %cond1134, %cond.end1133 ]
  br label %cond.end1137

cond.end1137:                                     ; preds = %cond.end1135, %cond.end994
  %cond1138 = phi i32 [ %cond995, %cond.end994 ], [ %cond1136, %cond.end1135 ]
  br label %cond.end1139

cond.end1139:                                     ; preds = %cond.end1137, %cond.end814
  %cond1140 = phi i32 [ %cond815, %cond.end814 ], [ %cond1138, %cond.end1137 ]
  br label %cond.end1141

cond.end1141:                                     ; preds = %cond.end1139, %land.end677
  %cond1142 = phi i32 [ %cond678, %land.end677 ], [ %cond1140, %cond.end1139 ]
  br label %cond.end1143

cond.end1143:                                     ; preds = %cond.end1141, %land.end660
  %cond1144 = phi i32 [ %cond661, %land.end660 ], [ %cond1142, %cond.end1141 ]
  br label %cond.end1145

cond.end1145:                                     ; preds = %cond.end1143, %land.end638
  %cond1146 = phi i32 [ %cond639, %land.end638 ], [ %cond1144, %cond.end1143 ]
  br label %cond.end1147

cond.end1147:                                     ; preds = %cond.end1145, %land.end616
  %cond1148 = phi i32 [ %cond617, %land.end616 ], [ %cond1146, %cond.end1145 ]
  br label %cond.end1149

cond.end1149:                                     ; preds = %cond.end1147, %lor.end599
  %cond1150 = phi i32 [ %cond600, %lor.end599 ], [ %cond1148, %cond.end1147 ]
  br label %cond.end1151

cond.end1151:                                     ; preds = %cond.end1149, %land.end582
  %cond1152 = phi i32 [ %cond583, %land.end582 ], [ %cond1150, %cond.end1149 ]
  br label %cond.end1153

cond.end1153:                                     ; preds = %cond.end1151, %land.end565
  %cond1154 = phi i32 [ %cond566, %land.end565 ], [ %cond1152, %cond.end1151 ]
  br label %cond.end1155

cond.end1155:                                     ; preds = %cond.end1153, %land.end548
  %cond1156 = phi i32 [ %cond549, %land.end548 ], [ %cond1154, %cond.end1153 ]
  br label %cond.end1157

cond.end1157:                                     ; preds = %cond.end1155, %cond.end531
  %cond1158 = phi i32 [ %cond532, %cond.end531 ], [ %cond1156, %cond.end1155 ]
  br label %cond.end1159

cond.end1159:                                     ; preds = %cond.end1157, %land.end497
  %cond1160 = phi i32 [ %cond498, %land.end497 ], [ %cond1158, %cond.end1157 ]
  br label %cond.end2459

cond.false1161:                                   ; preds = %while.body478
  %514 = load i8*, i8** %s_end, align 8
  %515 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast1162 = ptrtoint i8* %514 to i64
  %sub.ptr.rhs.cast1163 = ptrtoint i8* %515 to i64
  %sub.ptr.sub1164 = sub i64 %sub.ptr.lhs.cast1162, %sub.ptr.rhs.cast1163
  %cmp1165 = icmp sgt i64 %sub.ptr.sub1164, 4
  br i1 %cmp1165, label %cond.true1167, label %cond.false1715

cond.true1167:                                    ; preds = %cond.false1161
  %516 = load i8*, i8** %s, align 8
  %arrayidx1168 = getelementptr inbounds i8, i8* %516, i64 0
  %517 = load i8, i8* %arrayidx1168, align 1
  %conv1169 = zext i8 %517 to i32
  %cmp1170 = icmp eq i32 97, %conv1169
  br i1 %cmp1170, label %cond.true1172, label %cond.false1184

cond.true1172:                                    ; preds = %cond.true1167
  %518 = load i8*, i8** %s, align 8
  %arrayidx1173 = getelementptr inbounds i8, i8* %518, i64 1
  %519 = load i8, i8* %arrayidx1173, align 1
  %conv1174 = zext i8 %519 to i32
  %cmp1175 = icmp eq i32 202, %conv1174
  br i1 %cmp1175, label %land.rhs1177, label %land.end1182

land.rhs1177:                                     ; preds = %cond.true1172
  %520 = load i8*, i8** %s, align 8
  %arrayidx1178 = getelementptr inbounds i8, i8* %520, i64 2
  %521 = load i8, i8* %arrayidx1178, align 1
  %conv1179 = zext i8 %521 to i32
  %cmp1180 = icmp eq i32 190, %conv1179
  br label %land.end1182

land.end1182:                                     ; preds = %land.rhs1177, %cond.true1172
  %522 = phi i1 [ false, %cond.true1172 ], [ %cmp1180, %land.rhs1177 ]
  %523 = zext i1 %522 to i64
  %cond1183 = select i1 %522, i32 3, i32 0
  br label %cond.end1713

cond.false1184:                                   ; preds = %cond.true1167
  %524 = load i8*, i8** %s, align 8
  %arrayidx1185 = getelementptr inbounds i8, i8* %524, i64 0
  %525 = load i8, i8* %arrayidx1185, align 1
  %conv1186 = zext i8 %525 to i32
  %cmp1187 = icmp eq i32 102, %conv1186
  br i1 %cmp1187, label %cond.true1189, label %cond.false1220

cond.true1189:                                    ; preds = %cond.false1184
  %526 = load i8*, i8** %s, align 8
  %arrayidx1190 = getelementptr inbounds i8, i8* %526, i64 1
  %527 = load i8, i8* %arrayidx1190, align 1
  %conv1191 = zext i8 %527 to i32
  %cmp1192 = icmp eq i32 102, %conv1191
  br i1 %cmp1192, label %cond.true1194, label %cond.false1206

cond.true1194:                                    ; preds = %cond.true1189
  %528 = load i8*, i8** %s, align 8
  %arrayidx1195 = getelementptr inbounds i8, i8* %528, i64 2
  %529 = load i8, i8* %arrayidx1195, align 1
  %conv1196 = zext i8 %529 to i32
  %cmp1197 = icmp eq i32 105, %conv1196
  br i1 %cmp1197, label %lor.end1204, label %lor.rhs1199

lor.rhs1199:                                      ; preds = %cond.true1194
  %530 = load i8*, i8** %s, align 8
  %arrayidx1200 = getelementptr inbounds i8, i8* %530, i64 2
  %531 = load i8, i8* %arrayidx1200, align 1
  %conv1201 = zext i8 %531 to i32
  %cmp1202 = icmp eq i32 108, %conv1201
  br label %lor.end1204

lor.end1204:                                      ; preds = %lor.rhs1199, %cond.true1194
  %532 = phi i1 [ true, %cond.true1194 ], [ %cmp1202, %lor.rhs1199 ]
  %533 = zext i1 %532 to i64
  %cond1205 = select i1 %532, i32 3, i32 2
  br label %cond.end1218

cond.false1206:                                   ; preds = %cond.true1189
  %534 = load i8*, i8** %s, align 8
  %arrayidx1207 = getelementptr inbounds i8, i8* %534, i64 1
  %535 = load i8, i8* %arrayidx1207, align 1
  %conv1208 = zext i8 %535 to i32
  %cmp1209 = icmp eq i32 105, %conv1208
  br i1 %cmp1209, label %lor.end1216, label %lor.rhs1211

lor.rhs1211:                                      ; preds = %cond.false1206
  %536 = load i8*, i8** %s, align 8
  %arrayidx1212 = getelementptr inbounds i8, i8* %536, i64 1
  %537 = load i8, i8* %arrayidx1212, align 1
  %conv1213 = zext i8 %537 to i32
  %cmp1214 = icmp eq i32 108, %conv1213
  br label %lor.end1216

lor.end1216:                                      ; preds = %lor.rhs1211, %cond.false1206
  %538 = phi i1 [ true, %cond.false1206 ], [ %cmp1214, %lor.rhs1211 ]
  %539 = zext i1 %538 to i64
  %cond1217 = select i1 %538, i32 2, i32 0
  br label %cond.end1218

cond.end1218:                                     ; preds = %lor.end1216, %lor.end1204
  %cond1219 = phi i32 [ %cond1205, %lor.end1204 ], [ %cond1217, %lor.end1216 ]
  br label %cond.end1711

cond.false1220:                                   ; preds = %cond.false1184
  %540 = load i8*, i8** %s, align 8
  %arrayidx1221 = getelementptr inbounds i8, i8* %540, i64 0
  %541 = load i8, i8* %arrayidx1221, align 1
  %conv1222 = zext i8 %541 to i32
  %cmp1223 = icmp eq i32 104, %conv1222
  br i1 %cmp1223, label %cond.true1225, label %cond.false1237

cond.true1225:                                    ; preds = %cond.false1220
  %542 = load i8*, i8** %s, align 8
  %arrayidx1226 = getelementptr inbounds i8, i8* %542, i64 1
  %543 = load i8, i8* %arrayidx1226, align 1
  %conv1227 = zext i8 %543 to i32
  %cmp1228 = icmp eq i32 204, %conv1227
  br i1 %cmp1228, label %land.rhs1230, label %land.end1235

land.rhs1230:                                     ; preds = %cond.true1225
  %544 = load i8*, i8** %s, align 8
  %arrayidx1231 = getelementptr inbounds i8, i8* %544, i64 2
  %545 = load i8, i8* %arrayidx1231, align 1
  %conv1232 = zext i8 %545 to i32
  %cmp1233 = icmp eq i32 177, %conv1232
  br label %land.end1235

land.end1235:                                     ; preds = %land.rhs1230, %cond.true1225
  %546 = phi i1 [ false, %cond.true1225 ], [ %cmp1233, %land.rhs1230 ]
  %547 = zext i1 %546 to i64
  %cond1236 = select i1 %546, i32 3, i32 0
  br label %cond.end1709

cond.false1237:                                   ; preds = %cond.false1220
  %548 = load i8*, i8** %s, align 8
  %arrayidx1238 = getelementptr inbounds i8, i8* %548, i64 0
  %549 = load i8, i8* %arrayidx1238, align 1
  %conv1239 = zext i8 %549 to i32
  %cmp1240 = icmp eq i32 105, %conv1239
  br i1 %cmp1240, label %cond.true1242, label %cond.false1254

cond.true1242:                                    ; preds = %cond.false1237
  %550 = load i8*, i8** %s, align 8
  %arrayidx1243 = getelementptr inbounds i8, i8* %550, i64 1
  %551 = load i8, i8* %arrayidx1243, align 1
  %conv1244 = zext i8 %551 to i32
  %cmp1245 = icmp eq i32 204, %conv1244
  br i1 %cmp1245, label %land.rhs1247, label %land.end1252

land.rhs1247:                                     ; preds = %cond.true1242
  %552 = load i8*, i8** %s, align 8
  %arrayidx1248 = getelementptr inbounds i8, i8* %552, i64 2
  %553 = load i8, i8* %arrayidx1248, align 1
  %conv1249 = zext i8 %553 to i32
  %cmp1250 = icmp eq i32 135, %conv1249
  br label %land.end1252

land.end1252:                                     ; preds = %land.rhs1247, %cond.true1242
  %554 = phi i1 [ false, %cond.true1242 ], [ %cmp1250, %land.rhs1247 ]
  %555 = zext i1 %554 to i64
  %cond1253 = select i1 %554, i32 3, i32 0
  br label %cond.end1707

cond.false1254:                                   ; preds = %cond.false1237
  %556 = load i8*, i8** %s, align 8
  %arrayidx1255 = getelementptr inbounds i8, i8* %556, i64 0
  %557 = load i8, i8* %arrayidx1255, align 1
  %conv1256 = zext i8 %557 to i32
  %cmp1257 = icmp eq i32 106, %conv1256
  br i1 %cmp1257, label %cond.true1259, label %cond.false1271

cond.true1259:                                    ; preds = %cond.false1254
  %558 = load i8*, i8** %s, align 8
  %arrayidx1260 = getelementptr inbounds i8, i8* %558, i64 1
  %559 = load i8, i8* %arrayidx1260, align 1
  %conv1261 = zext i8 %559 to i32
  %cmp1262 = icmp eq i32 204, %conv1261
  br i1 %cmp1262, label %land.rhs1264, label %land.end1269

land.rhs1264:                                     ; preds = %cond.true1259
  %560 = load i8*, i8** %s, align 8
  %arrayidx1265 = getelementptr inbounds i8, i8* %560, i64 2
  %561 = load i8, i8* %arrayidx1265, align 1
  %conv1266 = zext i8 %561 to i32
  %cmp1267 = icmp eq i32 140, %conv1266
  br label %land.end1269

land.end1269:                                     ; preds = %land.rhs1264, %cond.true1259
  %562 = phi i1 [ false, %cond.true1259 ], [ %cmp1267, %land.rhs1264 ]
  %563 = zext i1 %562 to i64
  %cond1270 = select i1 %562, i32 3, i32 0
  br label %cond.end1705

cond.false1271:                                   ; preds = %cond.false1254
  %564 = load i8*, i8** %s, align 8
  %arrayidx1272 = getelementptr inbounds i8, i8* %564, i64 0
  %565 = load i8, i8* %arrayidx1272, align 1
  %conv1273 = zext i8 %565 to i32
  %cmp1274 = icmp eq i32 115, %conv1273
  br i1 %cmp1274, label %cond.true1276, label %cond.false1288

cond.true1276:                                    ; preds = %cond.false1271
  %566 = load i8*, i8** %s, align 8
  %arrayidx1277 = getelementptr inbounds i8, i8* %566, i64 1
  %567 = load i8, i8* %arrayidx1277, align 1
  %conv1278 = zext i8 %567 to i32
  %cmp1279 = icmp eq i32 115, %conv1278
  br i1 %cmp1279, label %lor.end1286, label %lor.rhs1281

lor.rhs1281:                                      ; preds = %cond.true1276
  %568 = load i8*, i8** %s, align 8
  %arrayidx1282 = getelementptr inbounds i8, i8* %568, i64 1
  %569 = load i8, i8* %arrayidx1282, align 1
  %conv1283 = zext i8 %569 to i32
  %cmp1284 = icmp eq i32 116, %conv1283
  br label %lor.end1286

lor.end1286:                                      ; preds = %lor.rhs1281, %cond.true1276
  %570 = phi i1 [ true, %cond.true1276 ], [ %cmp1284, %lor.rhs1281 ]
  %571 = zext i1 %570 to i64
  %cond1287 = select i1 %570, i32 2, i32 0
  br label %cond.end1703

cond.false1288:                                   ; preds = %cond.false1271
  %572 = load i8*, i8** %s, align 8
  %arrayidx1289 = getelementptr inbounds i8, i8* %572, i64 0
  %573 = load i8, i8* %arrayidx1289, align 1
  %conv1290 = zext i8 %573 to i32
  %cmp1291 = icmp eq i32 116, %conv1290
  br i1 %cmp1291, label %cond.true1293, label %cond.false1305

cond.true1293:                                    ; preds = %cond.false1288
  %574 = load i8*, i8** %s, align 8
  %arrayidx1294 = getelementptr inbounds i8, i8* %574, i64 1
  %575 = load i8, i8* %arrayidx1294, align 1
  %conv1295 = zext i8 %575 to i32
  %cmp1296 = icmp eq i32 204, %conv1295
  br i1 %cmp1296, label %land.rhs1298, label %land.end1303

land.rhs1298:                                     ; preds = %cond.true1293
  %576 = load i8*, i8** %s, align 8
  %arrayidx1299 = getelementptr inbounds i8, i8* %576, i64 2
  %577 = load i8, i8* %arrayidx1299, align 1
  %conv1300 = zext i8 %577 to i32
  %cmp1301 = icmp eq i32 136, %conv1300
  br label %land.end1303

land.end1303:                                     ; preds = %land.rhs1298, %cond.true1293
  %578 = phi i1 [ false, %cond.true1293 ], [ %cmp1301, %land.rhs1298 ]
  %579 = zext i1 %578 to i64
  %cond1304 = select i1 %578, i32 3, i32 0
  br label %cond.end1701

cond.false1305:                                   ; preds = %cond.false1288
  %580 = load i8*, i8** %s, align 8
  %arrayidx1306 = getelementptr inbounds i8, i8* %580, i64 0
  %581 = load i8, i8* %arrayidx1306, align 1
  %conv1307 = zext i8 %581 to i32
  %cmp1308 = icmp eq i32 119, %conv1307
  br i1 %cmp1308, label %cond.true1315, label %lor.lhs.false1310

lor.lhs.false1310:                                ; preds = %cond.false1305
  %582 = load i8*, i8** %s, align 8
  %arrayidx1311 = getelementptr inbounds i8, i8* %582, i64 0
  %583 = load i8, i8* %arrayidx1311, align 1
  %conv1312 = zext i8 %583 to i32
  %cmp1313 = icmp eq i32 121, %conv1312
  br i1 %cmp1313, label %cond.true1315, label %cond.false1327

cond.true1315:                                    ; preds = %lor.lhs.false1310, %cond.false1305
  %584 = load i8*, i8** %s, align 8
  %arrayidx1316 = getelementptr inbounds i8, i8* %584, i64 1
  %585 = load i8, i8* %arrayidx1316, align 1
  %conv1317 = zext i8 %585 to i32
  %cmp1318 = icmp eq i32 204, %conv1317
  br i1 %cmp1318, label %land.rhs1320, label %land.end1325

land.rhs1320:                                     ; preds = %cond.true1315
  %586 = load i8*, i8** %s, align 8
  %arrayidx1321 = getelementptr inbounds i8, i8* %586, i64 2
  %587 = load i8, i8* %arrayidx1321, align 1
  %conv1322 = zext i8 %587 to i32
  %cmp1323 = icmp eq i32 138, %conv1322
  br label %land.end1325

land.end1325:                                     ; preds = %land.rhs1320, %cond.true1315
  %588 = phi i1 [ false, %cond.true1315 ], [ %cmp1323, %land.rhs1320 ]
  %589 = zext i1 %588 to i64
  %cond1326 = select i1 %588, i32 3, i32 0
  br label %cond.end1699

cond.false1327:                                   ; preds = %lor.lhs.false1310
  %590 = load i8*, i8** %s, align 8
  %arrayidx1328 = getelementptr inbounds i8, i8* %590, i64 0
  %591 = load i8, i8* %arrayidx1328, align 1
  %conv1329 = zext i8 %591 to i32
  %cmp1330 = icmp eq i32 197, %conv1329
  br i1 %cmp1330, label %cond.true1332, label %cond.false1349

cond.true1332:                                    ; preds = %cond.false1327
  %592 = load i8*, i8** %s, align 8
  %arrayidx1333 = getelementptr inbounds i8, i8* %592, i64 1
  %593 = load i8, i8* %arrayidx1333, align 1
  %conv1334 = zext i8 %593 to i32
  %cmp1335 = icmp eq i32 191, %conv1334
  br i1 %cmp1335, label %land.lhs.true1337, label %land.end1347

land.lhs.true1337:                                ; preds = %cond.true1332
  %594 = load i8*, i8** %s, align 8
  %arrayidx1338 = getelementptr inbounds i8, i8* %594, i64 2
  %595 = load i8, i8* %arrayidx1338, align 1
  %conv1339 = zext i8 %595 to i32
  %cmp1340 = icmp eq i32 197, %conv1339
  br i1 %cmp1340, label %land.rhs1342, label %land.end1347

land.rhs1342:                                     ; preds = %land.lhs.true1337
  %596 = load i8*, i8** %s, align 8
  %arrayidx1343 = getelementptr inbounds i8, i8* %596, i64 3
  %597 = load i8, i8* %arrayidx1343, align 1
  %conv1344 = zext i8 %597 to i32
  %cmp1345 = icmp eq i32 191, %conv1344
  br label %land.end1347

land.end1347:                                     ; preds = %land.rhs1342, %land.lhs.true1337, %cond.true1332
  %598 = phi i1 [ false, %land.lhs.true1337 ], [ false, %cond.true1332 ], [ %cmp1345, %land.rhs1342 ]
  %599 = zext i1 %598 to i64
  %cond1348 = select i1 %598, i32 4, i32 0
  br label %cond.end1697

cond.false1349:                                   ; preds = %cond.false1327
  %600 = load i8*, i8** %s, align 8
  %arrayidx1350 = getelementptr inbounds i8, i8* %600, i64 0
  %601 = load i8, i8* %arrayidx1350, align 1
  %conv1351 = zext i8 %601 to i32
  %cmp1352 = icmp eq i32 202, %conv1351
  br i1 %cmp1352, label %cond.true1354, label %cond.false1366

cond.true1354:                                    ; preds = %cond.false1349
  %602 = load i8*, i8** %s, align 8
  %arrayidx1355 = getelementptr inbounds i8, i8* %602, i64 1
  %603 = load i8, i8* %arrayidx1355, align 1
  %conv1356 = zext i8 %603 to i32
  %cmp1357 = icmp eq i32 188, %conv1356
  br i1 %cmp1357, label %land.rhs1359, label %land.end1364

land.rhs1359:                                     ; preds = %cond.true1354
  %604 = load i8*, i8** %s, align 8
  %arrayidx1360 = getelementptr inbounds i8, i8* %604, i64 2
  %605 = load i8, i8* %arrayidx1360, align 1
  %conv1361 = zext i8 %605 to i32
  %cmp1362 = icmp eq i32 110, %conv1361
  br label %land.end1364

land.end1364:                                     ; preds = %land.rhs1359, %cond.true1354
  %606 = phi i1 [ false, %cond.true1354 ], [ %cmp1362, %land.rhs1359 ]
  %607 = zext i1 %606 to i64
  %cond1365 = select i1 %606, i32 3, i32 0
  br label %cond.end1695

cond.false1366:                                   ; preds = %cond.false1349
  %608 = load i8*, i8** %s, align 8
  %arrayidx1367 = getelementptr inbounds i8, i8* %608, i64 0
  %609 = load i8, i8* %arrayidx1367, align 1
  %conv1368 = zext i8 %609 to i32
  %cmp1369 = icmp eq i32 206, %conv1368
  br i1 %cmp1369, label %cond.true1371, label %cond.false1445

cond.true1371:                                    ; preds = %cond.false1366
  %610 = load i8*, i8** %s, align 8
  %arrayidx1372 = getelementptr inbounds i8, i8* %610, i64 1
  %611 = load i8, i8* %arrayidx1372, align 1
  %conv1373 = zext i8 %611 to i32
  %and1374 = and i32 %conv1373, 253
  %cmp1375 = icmp eq i32 %and1374, 172
  br i1 %cmp1375, label %cond.true1377, label %cond.false1389

cond.true1377:                                    ; preds = %cond.true1371
  %612 = load i8*, i8** %s, align 8
  %arrayidx1378 = getelementptr inbounds i8, i8* %612, i64 2
  %613 = load i8, i8* %arrayidx1378, align 1
  %conv1379 = zext i8 %613 to i32
  %cmp1380 = icmp eq i32 206, %conv1379
  br i1 %cmp1380, label %land.rhs1382, label %land.end1387

land.rhs1382:                                     ; preds = %cond.true1377
  %614 = load i8*, i8** %s, align 8
  %arrayidx1383 = getelementptr inbounds i8, i8* %614, i64 3
  %615 = load i8, i8* %arrayidx1383, align 1
  %conv1384 = zext i8 %615 to i32
  %cmp1385 = icmp eq i32 185, %conv1384
  br label %land.end1387

land.end1387:                                     ; preds = %land.rhs1382, %cond.true1377
  %616 = phi i1 [ false, %cond.true1377 ], [ %cmp1385, %land.rhs1382 ]
  %617 = zext i1 %616 to i64
  %cond1388 = select i1 %616, i32 4, i32 0
  br label %cond.end1443

cond.false1389:                                   ; preds = %cond.true1371
  %618 = load i8*, i8** %s, align 8
  %arrayidx1390 = getelementptr inbounds i8, i8* %618, i64 1
  %619 = load i8, i8* %arrayidx1390, align 1
  %conv1391 = zext i8 %619 to i32
  %cmp1392 = icmp eq i32 177, %conv1391
  br i1 %cmp1392, label %cond.true1399, label %lor.lhs.false1394

lor.lhs.false1394:                                ; preds = %cond.false1389
  %620 = load i8*, i8** %s, align 8
  %arrayidx1395 = getelementptr inbounds i8, i8* %620, i64 1
  %621 = load i8, i8* %arrayidx1395, align 1
  %conv1396 = zext i8 %621 to i32
  %cmp1397 = icmp eq i32 183, %conv1396
  br i1 %cmp1397, label %cond.true1399, label %cond.false1424

cond.true1399:                                    ; preds = %lor.lhs.false1394, %cond.false1389
  %622 = load i8*, i8** %s, align 8
  %arrayidx1400 = getelementptr inbounds i8, i8* %622, i64 2
  %623 = load i8, i8* %arrayidx1400, align 1
  %conv1401 = zext i8 %623 to i32
  %cmp1402 = icmp eq i32 205, %conv1401
  br i1 %cmp1402, label %cond.true1404, label %cond.false1410

cond.true1404:                                    ; preds = %cond.true1399
  %624 = load i8*, i8** %s, align 8
  %arrayidx1405 = getelementptr inbounds i8, i8* %624, i64 3
  %625 = load i8, i8* %arrayidx1405, align 1
  %conv1406 = zext i8 %625 to i32
  %cmp1407 = icmp eq i32 130, %conv1406
  %626 = zext i1 %cmp1407 to i64
  %cond1409 = select i1 %cmp1407, i32 4, i32 0
  br label %cond.end1422

cond.false1410:                                   ; preds = %cond.true1399
  %627 = load i8*, i8** %s, align 8
  %arrayidx1411 = getelementptr inbounds i8, i8* %627, i64 2
  %628 = load i8, i8* %arrayidx1411, align 1
  %conv1412 = zext i8 %628 to i32
  %cmp1413 = icmp eq i32 206, %conv1412
  br i1 %cmp1413, label %land.rhs1415, label %land.end1420

land.rhs1415:                                     ; preds = %cond.false1410
  %629 = load i8*, i8** %s, align 8
  %arrayidx1416 = getelementptr inbounds i8, i8* %629, i64 3
  %630 = load i8, i8* %arrayidx1416, align 1
  %conv1417 = zext i8 %630 to i32
  %cmp1418 = icmp eq i32 185, %conv1417
  br label %land.end1420

land.end1420:                                     ; preds = %land.rhs1415, %cond.false1410
  %631 = phi i1 [ false, %cond.false1410 ], [ %cmp1418, %land.rhs1415 ]
  %632 = zext i1 %631 to i64
  %cond1421 = select i1 %631, i32 4, i32 0
  br label %cond.end1422

cond.end1422:                                     ; preds = %land.end1420, %cond.true1404
  %cond1423 = phi i32 [ %cond1409, %cond.true1404 ], [ %cond1421, %land.end1420 ]
  br label %cond.end1441

cond.false1424:                                   ; preds = %lor.lhs.false1394
  %633 = load i8*, i8** %s, align 8
  %arrayidx1425 = getelementptr inbounds i8, i8* %633, i64 1
  %634 = load i8, i8* %arrayidx1425, align 1
  %conv1426 = zext i8 %634 to i32
  %cmp1427 = icmp eq i32 185, %conv1426
  br i1 %cmp1427, label %land.lhs.true1429, label %land.end1439

land.lhs.true1429:                                ; preds = %cond.false1424
  %635 = load i8*, i8** %s, align 8
  %arrayidx1430 = getelementptr inbounds i8, i8* %635, i64 2
  %636 = load i8, i8* %arrayidx1430, align 1
  %conv1431 = zext i8 %636 to i32
  %cmp1432 = icmp eq i32 205, %conv1431
  br i1 %cmp1432, label %land.rhs1434, label %land.end1439

land.rhs1434:                                     ; preds = %land.lhs.true1429
  %637 = load i8*, i8** %s, align 8
  %arrayidx1435 = getelementptr inbounds i8, i8* %637, i64 3
  %638 = load i8, i8* %arrayidx1435, align 1
  %conv1436 = zext i8 %638 to i32
  %cmp1437 = icmp eq i32 130, %conv1436
  br label %land.end1439

land.end1439:                                     ; preds = %land.rhs1434, %land.lhs.true1429, %cond.false1424
  %639 = phi i1 [ false, %land.lhs.true1429 ], [ false, %cond.false1424 ], [ %cmp1437, %land.rhs1434 ]
  %640 = zext i1 %639 to i64
  %cond1440 = select i1 %639, i32 4, i32 0
  br label %cond.end1441

cond.end1441:                                     ; preds = %land.end1439, %cond.end1422
  %cond1442 = phi i32 [ %cond1423, %cond.end1422 ], [ %cond1440, %land.end1439 ]
  br label %cond.end1443

cond.end1443:                                     ; preds = %cond.end1441, %land.end1387
  %cond1444 = phi i32 [ %cond1388, %land.end1387 ], [ %cond1442, %cond.end1441 ]
  br label %cond.end1693

cond.false1445:                                   ; preds = %cond.false1366
  %641 = load i8*, i8** %s, align 8
  %arrayidx1446 = getelementptr inbounds i8, i8* %641, i64 0
  %642 = load i8, i8* %arrayidx1446, align 1
  %conv1447 = zext i8 %642 to i32
  %cmp1448 = icmp eq i32 207, %conv1447
  br i1 %cmp1448, label %cond.true1450, label %cond.false1550

cond.true1450:                                    ; preds = %cond.false1445
  %643 = load i8*, i8** %s, align 8
  %arrayidx1451 = getelementptr inbounds i8, i8* %643, i64 1
  %644 = load i8, i8* %arrayidx1451, align 1
  %conv1452 = zext i8 %644 to i32
  %cmp1453 = icmp eq i32 129, %conv1452
  br i1 %cmp1453, label %cond.true1455, label %cond.false1467

cond.true1455:                                    ; preds = %cond.true1450
  %645 = load i8*, i8** %s, align 8
  %arrayidx1456 = getelementptr inbounds i8, i8* %645, i64 2
  %646 = load i8, i8* %arrayidx1456, align 1
  %conv1457 = zext i8 %646 to i32
  %cmp1458 = icmp eq i32 204, %conv1457
  br i1 %cmp1458, label %land.rhs1460, label %land.end1465

land.rhs1460:                                     ; preds = %cond.true1455
  %647 = load i8*, i8** %s, align 8
  %arrayidx1461 = getelementptr inbounds i8, i8* %647, i64 3
  %648 = load i8, i8* %arrayidx1461, align 1
  %conv1462 = zext i8 %648 to i32
  %cmp1463 = icmp eq i32 147, %conv1462
  br label %land.end1465

land.end1465:                                     ; preds = %land.rhs1460, %cond.true1455
  %649 = phi i1 [ false, %cond.true1455 ], [ %cmp1463, %land.rhs1460 ]
  %650 = zext i1 %649 to i64
  %cond1466 = select i1 %649, i32 4, i32 0
  br label %cond.end1548

cond.false1467:                                   ; preds = %cond.true1450
  %651 = load i8*, i8** %s, align 8
  %arrayidx1468 = getelementptr inbounds i8, i8* %651, i64 1
  %652 = load i8, i8* %arrayidx1468, align 1
  %conv1469 = zext i8 %652 to i32
  %cmp1470 = icmp eq i32 133, %conv1469
  br i1 %cmp1470, label %cond.true1472, label %cond.false1497

cond.true1472:                                    ; preds = %cond.false1467
  %653 = load i8*, i8** %s, align 8
  %arrayidx1473 = getelementptr inbounds i8, i8* %653, i64 2
  %654 = load i8, i8* %arrayidx1473, align 1
  %conv1474 = zext i8 %654 to i32
  %cmp1475 = icmp eq i32 204, %conv1474
  br i1 %cmp1475, label %cond.true1477, label %cond.false1483

cond.true1477:                                    ; preds = %cond.true1472
  %655 = load i8*, i8** %s, align 8
  %arrayidx1478 = getelementptr inbounds i8, i8* %655, i64 3
  %656 = load i8, i8* %arrayidx1478, align 1
  %conv1479 = zext i8 %656 to i32
  %cmp1480 = icmp eq i32 147, %conv1479
  %657 = zext i1 %cmp1480 to i64
  %cond1482 = select i1 %cmp1480, i32 4, i32 0
  br label %cond.end1495

cond.false1483:                                   ; preds = %cond.true1472
  %658 = load i8*, i8** %s, align 8
  %arrayidx1484 = getelementptr inbounds i8, i8* %658, i64 2
  %659 = load i8, i8* %arrayidx1484, align 1
  %conv1485 = zext i8 %659 to i32
  %cmp1486 = icmp eq i32 205, %conv1485
  br i1 %cmp1486, label %land.rhs1488, label %land.end1493

land.rhs1488:                                     ; preds = %cond.false1483
  %660 = load i8*, i8** %s, align 8
  %arrayidx1489 = getelementptr inbounds i8, i8* %660, i64 3
  %661 = load i8, i8* %arrayidx1489, align 1
  %conv1490 = zext i8 %661 to i32
  %cmp1491 = icmp eq i32 130, %conv1490
  br label %land.end1493

land.end1493:                                     ; preds = %land.rhs1488, %cond.false1483
  %662 = phi i1 [ false, %cond.false1483 ], [ %cmp1491, %land.rhs1488 ]
  %663 = zext i1 %662 to i64
  %cond1494 = select i1 %662, i32 4, i32 0
  br label %cond.end1495

cond.end1495:                                     ; preds = %land.end1493, %cond.true1477
  %cond1496 = phi i32 [ %cond1482, %cond.true1477 ], [ %cond1494, %land.end1493 ]
  br label %cond.end1546

cond.false1497:                                   ; preds = %cond.false1467
  %664 = load i8*, i8** %s, align 8
  %arrayidx1498 = getelementptr inbounds i8, i8* %664, i64 1
  %665 = load i8, i8* %arrayidx1498, align 1
  %conv1499 = zext i8 %665 to i32
  %cmp1500 = icmp eq i32 137, %conv1499
  br i1 %cmp1500, label %cond.true1502, label %cond.false1527

cond.true1502:                                    ; preds = %cond.false1497
  %666 = load i8*, i8** %s, align 8
  %arrayidx1503 = getelementptr inbounds i8, i8* %666, i64 2
  %667 = load i8, i8* %arrayidx1503, align 1
  %conv1504 = zext i8 %667 to i32
  %cmp1505 = icmp eq i32 205, %conv1504
  br i1 %cmp1505, label %cond.true1507, label %cond.false1513

cond.true1507:                                    ; preds = %cond.true1502
  %668 = load i8*, i8** %s, align 8
  %arrayidx1508 = getelementptr inbounds i8, i8* %668, i64 3
  %669 = load i8, i8* %arrayidx1508, align 1
  %conv1509 = zext i8 %669 to i32
  %cmp1510 = icmp eq i32 130, %conv1509
  %670 = zext i1 %cmp1510 to i64
  %cond1512 = select i1 %cmp1510, i32 4, i32 0
  br label %cond.end1525

cond.false1513:                                   ; preds = %cond.true1502
  %671 = load i8*, i8** %s, align 8
  %arrayidx1514 = getelementptr inbounds i8, i8* %671, i64 2
  %672 = load i8, i8* %arrayidx1514, align 1
  %conv1515 = zext i8 %672 to i32
  %cmp1516 = icmp eq i32 206, %conv1515
  br i1 %cmp1516, label %land.rhs1518, label %land.end1523

land.rhs1518:                                     ; preds = %cond.false1513
  %673 = load i8*, i8** %s, align 8
  %arrayidx1519 = getelementptr inbounds i8, i8* %673, i64 3
  %674 = load i8, i8* %arrayidx1519, align 1
  %conv1520 = zext i8 %674 to i32
  %cmp1521 = icmp eq i32 185, %conv1520
  br label %land.end1523

land.end1523:                                     ; preds = %land.rhs1518, %cond.false1513
  %675 = phi i1 [ false, %cond.false1513 ], [ %cmp1521, %land.rhs1518 ]
  %676 = zext i1 %675 to i64
  %cond1524 = select i1 %675, i32 4, i32 0
  br label %cond.end1525

cond.end1525:                                     ; preds = %land.end1523, %cond.true1507
  %cond1526 = phi i32 [ %cond1512, %cond.true1507 ], [ %cond1524, %land.end1523 ]
  br label %cond.end1544

cond.false1527:                                   ; preds = %cond.false1497
  %677 = load i8*, i8** %s, align 8
  %arrayidx1528 = getelementptr inbounds i8, i8* %677, i64 1
  %678 = load i8, i8* %arrayidx1528, align 1
  %conv1529 = zext i8 %678 to i32
  %cmp1530 = icmp eq i32 142, %conv1529
  br i1 %cmp1530, label %land.lhs.true1532, label %land.end1542

land.lhs.true1532:                                ; preds = %cond.false1527
  %679 = load i8*, i8** %s, align 8
  %arrayidx1533 = getelementptr inbounds i8, i8* %679, i64 2
  %680 = load i8, i8* %arrayidx1533, align 1
  %conv1534 = zext i8 %680 to i32
  %cmp1535 = icmp eq i32 206, %conv1534
  br i1 %cmp1535, label %land.rhs1537, label %land.end1542

land.rhs1537:                                     ; preds = %land.lhs.true1532
  %681 = load i8*, i8** %s, align 8
  %arrayidx1538 = getelementptr inbounds i8, i8* %681, i64 3
  %682 = load i8, i8* %arrayidx1538, align 1
  %conv1539 = zext i8 %682 to i32
  %cmp1540 = icmp eq i32 185, %conv1539
  br label %land.end1542

land.end1542:                                     ; preds = %land.rhs1537, %land.lhs.true1532, %cond.false1527
  %683 = phi i1 [ false, %land.lhs.true1532 ], [ false, %cond.false1527 ], [ %cmp1540, %land.rhs1537 ]
  %684 = zext i1 %683 to i64
  %cond1543 = select i1 %683, i32 4, i32 0
  br label %cond.end1544

cond.end1544:                                     ; preds = %land.end1542, %cond.end1525
  %cond1545 = phi i32 [ %cond1526, %cond.end1525 ], [ %cond1543, %land.end1542 ]
  br label %cond.end1546

cond.end1546:                                     ; preds = %cond.end1544, %cond.end1495
  %cond1547 = phi i32 [ %cond1496, %cond.end1495 ], [ %cond1545, %cond.end1544 ]
  br label %cond.end1548

cond.end1548:                                     ; preds = %cond.end1546, %land.end1465
  %cond1549 = phi i32 [ %cond1466, %land.end1465 ], [ %cond1547, %cond.end1546 ]
  br label %cond.end1691

cond.false1550:                                   ; preds = %cond.false1445
  %685 = load i8*, i8** %s, align 8
  %arrayidx1551 = getelementptr inbounds i8, i8* %685, i64 0
  %686 = load i8, i8* %arrayidx1551, align 1
  %conv1552 = zext i8 %686 to i32
  %cmp1553 = icmp eq i32 213, %conv1552
  br i1 %cmp1553, label %cond.true1555, label %cond.false1622

cond.true1555:                                    ; preds = %cond.false1550
  %687 = load i8*, i8** %s, align 8
  %arrayidx1556 = getelementptr inbounds i8, i8* %687, i64 1
  %688 = load i8, i8* %arrayidx1556, align 1
  %conv1557 = zext i8 %688 to i32
  %cmp1558 = icmp eq i32 165, %conv1557
  br i1 %cmp1558, label %cond.true1560, label %cond.false1572

cond.true1560:                                    ; preds = %cond.true1555
  %689 = load i8*, i8** %s, align 8
  %arrayidx1561 = getelementptr inbounds i8, i8* %689, i64 2
  %690 = load i8, i8* %arrayidx1561, align 1
  %conv1562 = zext i8 %690 to i32
  %cmp1563 = icmp eq i32 214, %conv1562
  br i1 %cmp1563, label %land.rhs1565, label %land.end1570

land.rhs1565:                                     ; preds = %cond.true1560
  %691 = load i8*, i8** %s, align 8
  %arrayidx1566 = getelementptr inbounds i8, i8* %691, i64 3
  %692 = load i8, i8* %arrayidx1566, align 1
  %conv1567 = zext i8 %692 to i32
  %cmp1568 = icmp eq i32 130, %conv1567
  br label %land.end1570

land.end1570:                                     ; preds = %land.rhs1565, %cond.true1560
  %693 = phi i1 [ false, %cond.true1560 ], [ %cmp1568, %land.rhs1565 ]
  %694 = zext i1 %693 to i64
  %cond1571 = select i1 %693, i32 4, i32 0
  br label %cond.end1620

cond.false1572:                                   ; preds = %cond.true1555
  %695 = load i8*, i8** %s, align 8
  %arrayidx1573 = getelementptr inbounds i8, i8* %695, i64 1
  %696 = load i8, i8* %arrayidx1573, align 1
  %conv1574 = zext i8 %696 to i32
  %cmp1575 = icmp eq i32 180, %conv1574
  br i1 %cmp1575, label %cond.true1577, label %cond.false1601

cond.true1577:                                    ; preds = %cond.false1572
  %697 = load i8*, i8** %s, align 8
  %arrayidx1578 = getelementptr inbounds i8, i8* %697, i64 2
  %698 = load i8, i8* %arrayidx1578, align 1
  %conv1579 = zext i8 %698 to i32
  %cmp1580 = icmp eq i32 213, %conv1579
  br i1 %cmp1580, label %land.rhs1582, label %land.end1599

land.rhs1582:                                     ; preds = %cond.true1577
  %699 = load i8*, i8** %s, align 8
  %arrayidx1583 = getelementptr inbounds i8, i8* %699, i64 3
  %700 = load i8, i8* %arrayidx1583, align 1
  %conv1584 = zext i8 %700 to i32
  %and1585 = and i32 %conv1584, 247
  %cmp1586 = icmp eq i32 %and1585, 165
  br i1 %cmp1586, label %lor.end1598, label %lor.lhs.false1588

lor.lhs.false1588:                                ; preds = %land.rhs1582
  %701 = load i8*, i8** %s, align 8
  %arrayidx1589 = getelementptr inbounds i8, i8* %701, i64 3
  %702 = load i8, i8* %arrayidx1589, align 1
  %conv1590 = zext i8 %702 to i32
  %cmp1591 = icmp eq i32 %conv1590, 171
  br i1 %cmp1591, label %lor.end1598, label %lor.rhs1593

lor.rhs1593:                                      ; preds = %lor.lhs.false1588
  %703 = load i8*, i8** %s, align 8
  %arrayidx1594 = getelementptr inbounds i8, i8* %703, i64 3
  %704 = load i8, i8* %arrayidx1594, align 1
  %conv1595 = zext i8 %704 to i32
  %cmp1596 = icmp eq i32 %conv1595, 182
  br label %lor.end1598

lor.end1598:                                      ; preds = %lor.rhs1593, %lor.lhs.false1588, %land.rhs1582
  %705 = phi i1 [ true, %lor.lhs.false1588 ], [ true, %land.rhs1582 ], [ %cmp1596, %lor.rhs1593 ]
  br label %land.end1599

land.end1599:                                     ; preds = %lor.end1598, %cond.true1577
  %706 = phi i1 [ false, %cond.true1577 ], [ %705, %lor.end1598 ]
  %707 = zext i1 %706 to i64
  %cond1600 = select i1 %706, i32 4, i32 0
  br label %cond.end1618

cond.false1601:                                   ; preds = %cond.false1572
  %708 = load i8*, i8** %s, align 8
  %arrayidx1602 = getelementptr inbounds i8, i8* %708, i64 1
  %709 = load i8, i8* %arrayidx1602, align 1
  %conv1603 = zext i8 %709 to i32
  %cmp1604 = icmp eq i32 190, %conv1603
  br i1 %cmp1604, label %land.lhs.true1606, label %land.end1616

land.lhs.true1606:                                ; preds = %cond.false1601
  %710 = load i8*, i8** %s, align 8
  %arrayidx1607 = getelementptr inbounds i8, i8* %710, i64 2
  %711 = load i8, i8* %arrayidx1607, align 1
  %conv1608 = zext i8 %711 to i32
  %cmp1609 = icmp eq i32 213, %conv1608
  br i1 %cmp1609, label %land.rhs1611, label %land.end1616

land.rhs1611:                                     ; preds = %land.lhs.true1606
  %712 = load i8*, i8** %s, align 8
  %arrayidx1612 = getelementptr inbounds i8, i8* %712, i64 3
  %713 = load i8, i8* %arrayidx1612, align 1
  %conv1613 = zext i8 %713 to i32
  %cmp1614 = icmp eq i32 182, %conv1613
  br label %land.end1616

land.end1616:                                     ; preds = %land.rhs1611, %land.lhs.true1606, %cond.false1601
  %714 = phi i1 [ false, %land.lhs.true1606 ], [ false, %cond.false1601 ], [ %cmp1614, %land.rhs1611 ]
  %715 = zext i1 %714 to i64
  %cond1617 = select i1 %714, i32 4, i32 0
  br label %cond.end1618

cond.end1618:                                     ; preds = %land.end1616, %land.end1599
  %cond1619 = phi i32 [ %cond1600, %land.end1599 ], [ %cond1617, %land.end1616 ]
  br label %cond.end1620

cond.end1620:                                     ; preds = %cond.end1618, %land.end1570
  %cond1621 = phi i32 [ %cond1571, %land.end1570 ], [ %cond1619, %cond.end1618 ]
  br label %cond.end1689

cond.false1622:                                   ; preds = %cond.false1550
  %716 = load i8*, i8** %s, align 8
  %arrayidx1623 = getelementptr inbounds i8, i8* %716, i64 0
  %717 = load i8, i8* %arrayidx1623, align 1
  %conv1624 = zext i8 %717 to i32
  %cmp1625 = icmp eq i32 225, %conv1624
  br i1 %cmp1625, label %cond.true1627, label %cond.false1686

cond.true1627:                                    ; preds = %cond.false1622
  %718 = load i8*, i8** %s, align 8
  %arrayidx1628 = getelementptr inbounds i8, i8* %718, i64 1
  %719 = load i8, i8* %arrayidx1628, align 1
  %conv1629 = zext i8 %719 to i32
  %cmp1630 = icmp eq i32 188, %conv1629
  br i1 %cmp1630, label %cond.true1632, label %cond.false1650

cond.true1632:                                    ; preds = %cond.true1627
  %720 = load i8*, i8** %s, align 8
  %arrayidx1633 = getelementptr inbounds i8, i8* %720, i64 2
  %721 = load i8, i8* %arrayidx1633, align 1
  %conv1634 = zext i8 %721 to i32
  %and1635 = and i32 %conv1634, 216
  %cmp1636 = icmp eq i32 %and1635, 128
  br i1 %cmp1636, label %land.lhs.true1638, label %land.end1648

land.lhs.true1638:                                ; preds = %cond.true1632
  %722 = load i8*, i8** %s, align 8
  %arrayidx1639 = getelementptr inbounds i8, i8* %722, i64 3
  %723 = load i8, i8* %arrayidx1639, align 1
  %conv1640 = zext i8 %723 to i32
  %cmp1641 = icmp eq i32 206, %conv1640
  br i1 %cmp1641, label %land.rhs1643, label %land.end1648

land.rhs1643:                                     ; preds = %land.lhs.true1638
  %724 = load i8*, i8** %s, align 8
  %arrayidx1644 = getelementptr inbounds i8, i8* %724, i64 4
  %725 = load i8, i8* %arrayidx1644, align 1
  %conv1645 = zext i8 %725 to i32
  %cmp1646 = icmp eq i32 185, %conv1645
  br label %land.end1648

land.end1648:                                     ; preds = %land.rhs1643, %land.lhs.true1638, %cond.true1632
  %726 = phi i1 [ false, %land.lhs.true1638 ], [ false, %cond.true1632 ], [ %cmp1646, %land.rhs1643 ]
  %727 = zext i1 %726 to i64
  %cond1649 = select i1 %726, i32 5, i32 0
  br label %cond.end1684

cond.false1650:                                   ; preds = %cond.true1627
  %728 = load i8*, i8** %s, align 8
  %arrayidx1651 = getelementptr inbounds i8, i8* %728, i64 1
  %729 = load i8, i8* %arrayidx1651, align 1
  %conv1652 = zext i8 %729 to i32
  %cmp1653 = icmp eq i32 189, %conv1652
  br i1 %cmp1653, label %land.lhs.true1655, label %land.end1682

land.lhs.true1655:                                ; preds = %cond.false1650
  %730 = load i8*, i8** %s, align 8
  %arrayidx1656 = getelementptr inbounds i8, i8* %730, i64 2
  %731 = load i8, i8* %arrayidx1656, align 1
  %conv1657 = zext i8 %731 to i32
  %and1658 = and i32 %conv1657, 248
  %cmp1659 = icmp eq i32 %and1658, 160
  br i1 %cmp1659, label %land.lhs.true1672, label %lor.lhs.false1661

lor.lhs.false1661:                                ; preds = %land.lhs.true1655
  %732 = load i8*, i8** %s, align 8
  %arrayidx1662 = getelementptr inbounds i8, i8* %732, i64 2
  %733 = load i8, i8* %arrayidx1662, align 1
  %conv1663 = zext i8 %733 to i32
  %and1664 = and i32 %conv1663, 251
  %cmp1665 = icmp eq i32 %and1664, 176
  br i1 %cmp1665, label %land.lhs.true1672, label %lor.lhs.false1667

lor.lhs.false1667:                                ; preds = %lor.lhs.false1661
  %734 = load i8*, i8** %s, align 8
  %arrayidx1668 = getelementptr inbounds i8, i8* %734, i64 2
  %735 = load i8, i8* %arrayidx1668, align 1
  %conv1669 = zext i8 %735 to i32
  %cmp1670 = icmp eq i32 %conv1669, 188
  br i1 %cmp1670, label %land.lhs.true1672, label %land.end1682

land.lhs.true1672:                                ; preds = %lor.lhs.false1667, %lor.lhs.false1661, %land.lhs.true1655
  %736 = load i8*, i8** %s, align 8
  %arrayidx1673 = getelementptr inbounds i8, i8* %736, i64 3
  %737 = load i8, i8* %arrayidx1673, align 1
  %conv1674 = zext i8 %737 to i32
  %cmp1675 = icmp eq i32 206, %conv1674
  br i1 %cmp1675, label %land.rhs1677, label %land.end1682

land.rhs1677:                                     ; preds = %land.lhs.true1672
  %738 = load i8*, i8** %s, align 8
  %arrayidx1678 = getelementptr inbounds i8, i8* %738, i64 4
  %739 = load i8, i8* %arrayidx1678, align 1
  %conv1679 = zext i8 %739 to i32
  %cmp1680 = icmp eq i32 185, %conv1679
  br label %land.end1682

land.end1682:                                     ; preds = %land.rhs1677, %land.lhs.true1672, %lor.lhs.false1667, %cond.false1650
  %740 = phi i1 [ false, %land.lhs.true1672 ], [ false, %lor.lhs.false1667 ], [ false, %cond.false1650 ], [ %cmp1680, %land.rhs1677 ]
  %741 = zext i1 %740 to i64
  %cond1683 = select i1 %740, i32 5, i32 0
  br label %cond.end1684

cond.end1684:                                     ; preds = %land.end1682, %land.end1648
  %cond1685 = phi i32 [ %cond1649, %land.end1648 ], [ %cond1683, %land.end1682 ]
  br label %cond.end1687

cond.false1686:                                   ; preds = %cond.false1622
  br label %cond.end1687

cond.end1687:                                     ; preds = %cond.false1686, %cond.end1684
  %cond1688 = phi i32 [ %cond1685, %cond.end1684 ], [ 0, %cond.false1686 ]
  br label %cond.end1689

cond.end1689:                                     ; preds = %cond.end1687, %cond.end1620
  %cond1690 = phi i32 [ %cond1621, %cond.end1620 ], [ %cond1688, %cond.end1687 ]
  br label %cond.end1691

cond.end1691:                                     ; preds = %cond.end1689, %cond.end1548
  %cond1692 = phi i32 [ %cond1549, %cond.end1548 ], [ %cond1690, %cond.end1689 ]
  br label %cond.end1693

cond.end1693:                                     ; preds = %cond.end1691, %cond.end1443
  %cond1694 = phi i32 [ %cond1444, %cond.end1443 ], [ %cond1692, %cond.end1691 ]
  br label %cond.end1695

cond.end1695:                                     ; preds = %cond.end1693, %land.end1364
  %cond1696 = phi i32 [ %cond1365, %land.end1364 ], [ %cond1694, %cond.end1693 ]
  br label %cond.end1697

cond.end1697:                                     ; preds = %cond.end1695, %land.end1347
  %cond1698 = phi i32 [ %cond1348, %land.end1347 ], [ %cond1696, %cond.end1695 ]
  br label %cond.end1699

cond.end1699:                                     ; preds = %cond.end1697, %land.end1325
  %cond1700 = phi i32 [ %cond1326, %land.end1325 ], [ %cond1698, %cond.end1697 ]
  br label %cond.end1701

cond.end1701:                                     ; preds = %cond.end1699, %land.end1303
  %cond1702 = phi i32 [ %cond1304, %land.end1303 ], [ %cond1700, %cond.end1699 ]
  br label %cond.end1703

cond.end1703:                                     ; preds = %cond.end1701, %lor.end1286
  %cond1704 = phi i32 [ %cond1287, %lor.end1286 ], [ %cond1702, %cond.end1701 ]
  br label %cond.end1705

cond.end1705:                                     ; preds = %cond.end1703, %land.end1269
  %cond1706 = phi i32 [ %cond1270, %land.end1269 ], [ %cond1704, %cond.end1703 ]
  br label %cond.end1707

cond.end1707:                                     ; preds = %cond.end1705, %land.end1252
  %cond1708 = phi i32 [ %cond1253, %land.end1252 ], [ %cond1706, %cond.end1705 ]
  br label %cond.end1709

cond.end1709:                                     ; preds = %cond.end1707, %land.end1235
  %cond1710 = phi i32 [ %cond1236, %land.end1235 ], [ %cond1708, %cond.end1707 ]
  br label %cond.end1711

cond.end1711:                                     ; preds = %cond.end1709, %cond.end1218
  %cond1712 = phi i32 [ %cond1219, %cond.end1218 ], [ %cond1710, %cond.end1709 ]
  br label %cond.end1713

cond.end1713:                                     ; preds = %cond.end1711, %land.end1182
  %cond1714 = phi i32 [ %cond1183, %land.end1182 ], [ %cond1712, %cond.end1711 ]
  br label %cond.end2457

cond.false1715:                                   ; preds = %cond.false1161
  %742 = load i8*, i8** %s_end, align 8
  %743 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast1716 = ptrtoint i8* %742 to i64
  %sub.ptr.rhs.cast1717 = ptrtoint i8* %743 to i64
  %sub.ptr.sub1718 = sub i64 %sub.ptr.lhs.cast1716, %sub.ptr.rhs.cast1717
  %cmp1719 = icmp sgt i64 %sub.ptr.sub1718, 3
  br i1 %cmp1719, label %cond.true1721, label %cond.false2203

cond.true1721:                                    ; preds = %cond.false1715
  %744 = load i8*, i8** %s, align 8
  %arrayidx1722 = getelementptr inbounds i8, i8* %744, i64 0
  %745 = load i8, i8* %arrayidx1722, align 1
  %conv1723 = zext i8 %745 to i32
  %cmp1724 = icmp eq i32 97, %conv1723
  br i1 %cmp1724, label %cond.true1726, label %cond.false1738

cond.true1726:                                    ; preds = %cond.true1721
  %746 = load i8*, i8** %s, align 8
  %arrayidx1727 = getelementptr inbounds i8, i8* %746, i64 1
  %747 = load i8, i8* %arrayidx1727, align 1
  %conv1728 = zext i8 %747 to i32
  %cmp1729 = icmp eq i32 202, %conv1728
  br i1 %cmp1729, label %land.rhs1731, label %land.end1736

land.rhs1731:                                     ; preds = %cond.true1726
  %748 = load i8*, i8** %s, align 8
  %arrayidx1732 = getelementptr inbounds i8, i8* %748, i64 2
  %749 = load i8, i8* %arrayidx1732, align 1
  %conv1733 = zext i8 %749 to i32
  %cmp1734 = icmp eq i32 190, %conv1733
  br label %land.end1736

land.end1736:                                     ; preds = %land.rhs1731, %cond.true1726
  %750 = phi i1 [ false, %cond.true1726 ], [ %cmp1734, %land.rhs1731 ]
  %751 = zext i1 %750 to i64
  %cond1737 = select i1 %750, i32 3, i32 0
  br label %cond.end2201

cond.false1738:                                   ; preds = %cond.true1721
  %752 = load i8*, i8** %s, align 8
  %arrayidx1739 = getelementptr inbounds i8, i8* %752, i64 0
  %753 = load i8, i8* %arrayidx1739, align 1
  %conv1740 = zext i8 %753 to i32
  %cmp1741 = icmp eq i32 102, %conv1740
  br i1 %cmp1741, label %cond.true1743, label %cond.false1774

cond.true1743:                                    ; preds = %cond.false1738
  %754 = load i8*, i8** %s, align 8
  %arrayidx1744 = getelementptr inbounds i8, i8* %754, i64 1
  %755 = load i8, i8* %arrayidx1744, align 1
  %conv1745 = zext i8 %755 to i32
  %cmp1746 = icmp eq i32 102, %conv1745
  br i1 %cmp1746, label %cond.true1748, label %cond.false1760

cond.true1748:                                    ; preds = %cond.true1743
  %756 = load i8*, i8** %s, align 8
  %arrayidx1749 = getelementptr inbounds i8, i8* %756, i64 2
  %757 = load i8, i8* %arrayidx1749, align 1
  %conv1750 = zext i8 %757 to i32
  %cmp1751 = icmp eq i32 105, %conv1750
  br i1 %cmp1751, label %lor.end1758, label %lor.rhs1753

lor.rhs1753:                                      ; preds = %cond.true1748
  %758 = load i8*, i8** %s, align 8
  %arrayidx1754 = getelementptr inbounds i8, i8* %758, i64 2
  %759 = load i8, i8* %arrayidx1754, align 1
  %conv1755 = zext i8 %759 to i32
  %cmp1756 = icmp eq i32 108, %conv1755
  br label %lor.end1758

lor.end1758:                                      ; preds = %lor.rhs1753, %cond.true1748
  %760 = phi i1 [ true, %cond.true1748 ], [ %cmp1756, %lor.rhs1753 ]
  %761 = zext i1 %760 to i64
  %cond1759 = select i1 %760, i32 3, i32 2
  br label %cond.end1772

cond.false1760:                                   ; preds = %cond.true1743
  %762 = load i8*, i8** %s, align 8
  %arrayidx1761 = getelementptr inbounds i8, i8* %762, i64 1
  %763 = load i8, i8* %arrayidx1761, align 1
  %conv1762 = zext i8 %763 to i32
  %cmp1763 = icmp eq i32 105, %conv1762
  br i1 %cmp1763, label %lor.end1770, label %lor.rhs1765

lor.rhs1765:                                      ; preds = %cond.false1760
  %764 = load i8*, i8** %s, align 8
  %arrayidx1766 = getelementptr inbounds i8, i8* %764, i64 1
  %765 = load i8, i8* %arrayidx1766, align 1
  %conv1767 = zext i8 %765 to i32
  %cmp1768 = icmp eq i32 108, %conv1767
  br label %lor.end1770

lor.end1770:                                      ; preds = %lor.rhs1765, %cond.false1760
  %766 = phi i1 [ true, %cond.false1760 ], [ %cmp1768, %lor.rhs1765 ]
  %767 = zext i1 %766 to i64
  %cond1771 = select i1 %766, i32 2, i32 0
  br label %cond.end1772

cond.end1772:                                     ; preds = %lor.end1770, %lor.end1758
  %cond1773 = phi i32 [ %cond1759, %lor.end1758 ], [ %cond1771, %lor.end1770 ]
  br label %cond.end2199

cond.false1774:                                   ; preds = %cond.false1738
  %768 = load i8*, i8** %s, align 8
  %arrayidx1775 = getelementptr inbounds i8, i8* %768, i64 0
  %769 = load i8, i8* %arrayidx1775, align 1
  %conv1776 = zext i8 %769 to i32
  %cmp1777 = icmp eq i32 104, %conv1776
  br i1 %cmp1777, label %cond.true1779, label %cond.false1791

cond.true1779:                                    ; preds = %cond.false1774
  %770 = load i8*, i8** %s, align 8
  %arrayidx1780 = getelementptr inbounds i8, i8* %770, i64 1
  %771 = load i8, i8* %arrayidx1780, align 1
  %conv1781 = zext i8 %771 to i32
  %cmp1782 = icmp eq i32 204, %conv1781
  br i1 %cmp1782, label %land.rhs1784, label %land.end1789

land.rhs1784:                                     ; preds = %cond.true1779
  %772 = load i8*, i8** %s, align 8
  %arrayidx1785 = getelementptr inbounds i8, i8* %772, i64 2
  %773 = load i8, i8* %arrayidx1785, align 1
  %conv1786 = zext i8 %773 to i32
  %cmp1787 = icmp eq i32 177, %conv1786
  br label %land.end1789

land.end1789:                                     ; preds = %land.rhs1784, %cond.true1779
  %774 = phi i1 [ false, %cond.true1779 ], [ %cmp1787, %land.rhs1784 ]
  %775 = zext i1 %774 to i64
  %cond1790 = select i1 %774, i32 3, i32 0
  br label %cond.end2197

cond.false1791:                                   ; preds = %cond.false1774
  %776 = load i8*, i8** %s, align 8
  %arrayidx1792 = getelementptr inbounds i8, i8* %776, i64 0
  %777 = load i8, i8* %arrayidx1792, align 1
  %conv1793 = zext i8 %777 to i32
  %cmp1794 = icmp eq i32 105, %conv1793
  br i1 %cmp1794, label %cond.true1796, label %cond.false1808

cond.true1796:                                    ; preds = %cond.false1791
  %778 = load i8*, i8** %s, align 8
  %arrayidx1797 = getelementptr inbounds i8, i8* %778, i64 1
  %779 = load i8, i8* %arrayidx1797, align 1
  %conv1798 = zext i8 %779 to i32
  %cmp1799 = icmp eq i32 204, %conv1798
  br i1 %cmp1799, label %land.rhs1801, label %land.end1806

land.rhs1801:                                     ; preds = %cond.true1796
  %780 = load i8*, i8** %s, align 8
  %arrayidx1802 = getelementptr inbounds i8, i8* %780, i64 2
  %781 = load i8, i8* %arrayidx1802, align 1
  %conv1803 = zext i8 %781 to i32
  %cmp1804 = icmp eq i32 135, %conv1803
  br label %land.end1806

land.end1806:                                     ; preds = %land.rhs1801, %cond.true1796
  %782 = phi i1 [ false, %cond.true1796 ], [ %cmp1804, %land.rhs1801 ]
  %783 = zext i1 %782 to i64
  %cond1807 = select i1 %782, i32 3, i32 0
  br label %cond.end2195

cond.false1808:                                   ; preds = %cond.false1791
  %784 = load i8*, i8** %s, align 8
  %arrayidx1809 = getelementptr inbounds i8, i8* %784, i64 0
  %785 = load i8, i8* %arrayidx1809, align 1
  %conv1810 = zext i8 %785 to i32
  %cmp1811 = icmp eq i32 106, %conv1810
  br i1 %cmp1811, label %cond.true1813, label %cond.false1825

cond.true1813:                                    ; preds = %cond.false1808
  %786 = load i8*, i8** %s, align 8
  %arrayidx1814 = getelementptr inbounds i8, i8* %786, i64 1
  %787 = load i8, i8* %arrayidx1814, align 1
  %conv1815 = zext i8 %787 to i32
  %cmp1816 = icmp eq i32 204, %conv1815
  br i1 %cmp1816, label %land.rhs1818, label %land.end1823

land.rhs1818:                                     ; preds = %cond.true1813
  %788 = load i8*, i8** %s, align 8
  %arrayidx1819 = getelementptr inbounds i8, i8* %788, i64 2
  %789 = load i8, i8* %arrayidx1819, align 1
  %conv1820 = zext i8 %789 to i32
  %cmp1821 = icmp eq i32 140, %conv1820
  br label %land.end1823

land.end1823:                                     ; preds = %land.rhs1818, %cond.true1813
  %790 = phi i1 [ false, %cond.true1813 ], [ %cmp1821, %land.rhs1818 ]
  %791 = zext i1 %790 to i64
  %cond1824 = select i1 %790, i32 3, i32 0
  br label %cond.end2193

cond.false1825:                                   ; preds = %cond.false1808
  %792 = load i8*, i8** %s, align 8
  %arrayidx1826 = getelementptr inbounds i8, i8* %792, i64 0
  %793 = load i8, i8* %arrayidx1826, align 1
  %conv1827 = zext i8 %793 to i32
  %cmp1828 = icmp eq i32 115, %conv1827
  br i1 %cmp1828, label %cond.true1830, label %cond.false1842

cond.true1830:                                    ; preds = %cond.false1825
  %794 = load i8*, i8** %s, align 8
  %arrayidx1831 = getelementptr inbounds i8, i8* %794, i64 1
  %795 = load i8, i8* %arrayidx1831, align 1
  %conv1832 = zext i8 %795 to i32
  %cmp1833 = icmp eq i32 115, %conv1832
  br i1 %cmp1833, label %lor.end1840, label %lor.rhs1835

lor.rhs1835:                                      ; preds = %cond.true1830
  %796 = load i8*, i8** %s, align 8
  %arrayidx1836 = getelementptr inbounds i8, i8* %796, i64 1
  %797 = load i8, i8* %arrayidx1836, align 1
  %conv1837 = zext i8 %797 to i32
  %cmp1838 = icmp eq i32 116, %conv1837
  br label %lor.end1840

lor.end1840:                                      ; preds = %lor.rhs1835, %cond.true1830
  %798 = phi i1 [ true, %cond.true1830 ], [ %cmp1838, %lor.rhs1835 ]
  %799 = zext i1 %798 to i64
  %cond1841 = select i1 %798, i32 2, i32 0
  br label %cond.end2191

cond.false1842:                                   ; preds = %cond.false1825
  %800 = load i8*, i8** %s, align 8
  %arrayidx1843 = getelementptr inbounds i8, i8* %800, i64 0
  %801 = load i8, i8* %arrayidx1843, align 1
  %conv1844 = zext i8 %801 to i32
  %cmp1845 = icmp eq i32 116, %conv1844
  br i1 %cmp1845, label %cond.true1847, label %cond.false1859

cond.true1847:                                    ; preds = %cond.false1842
  %802 = load i8*, i8** %s, align 8
  %arrayidx1848 = getelementptr inbounds i8, i8* %802, i64 1
  %803 = load i8, i8* %arrayidx1848, align 1
  %conv1849 = zext i8 %803 to i32
  %cmp1850 = icmp eq i32 204, %conv1849
  br i1 %cmp1850, label %land.rhs1852, label %land.end1857

land.rhs1852:                                     ; preds = %cond.true1847
  %804 = load i8*, i8** %s, align 8
  %arrayidx1853 = getelementptr inbounds i8, i8* %804, i64 2
  %805 = load i8, i8* %arrayidx1853, align 1
  %conv1854 = zext i8 %805 to i32
  %cmp1855 = icmp eq i32 136, %conv1854
  br label %land.end1857

land.end1857:                                     ; preds = %land.rhs1852, %cond.true1847
  %806 = phi i1 [ false, %cond.true1847 ], [ %cmp1855, %land.rhs1852 ]
  %807 = zext i1 %806 to i64
  %cond1858 = select i1 %806, i32 3, i32 0
  br label %cond.end2189

cond.false1859:                                   ; preds = %cond.false1842
  %808 = load i8*, i8** %s, align 8
  %arrayidx1860 = getelementptr inbounds i8, i8* %808, i64 0
  %809 = load i8, i8* %arrayidx1860, align 1
  %conv1861 = zext i8 %809 to i32
  %cmp1862 = icmp eq i32 119, %conv1861
  br i1 %cmp1862, label %cond.true1869, label %lor.lhs.false1864

lor.lhs.false1864:                                ; preds = %cond.false1859
  %810 = load i8*, i8** %s, align 8
  %arrayidx1865 = getelementptr inbounds i8, i8* %810, i64 0
  %811 = load i8, i8* %arrayidx1865, align 1
  %conv1866 = zext i8 %811 to i32
  %cmp1867 = icmp eq i32 121, %conv1866
  br i1 %cmp1867, label %cond.true1869, label %cond.false1881

cond.true1869:                                    ; preds = %lor.lhs.false1864, %cond.false1859
  %812 = load i8*, i8** %s, align 8
  %arrayidx1870 = getelementptr inbounds i8, i8* %812, i64 1
  %813 = load i8, i8* %arrayidx1870, align 1
  %conv1871 = zext i8 %813 to i32
  %cmp1872 = icmp eq i32 204, %conv1871
  br i1 %cmp1872, label %land.rhs1874, label %land.end1879

land.rhs1874:                                     ; preds = %cond.true1869
  %814 = load i8*, i8** %s, align 8
  %arrayidx1875 = getelementptr inbounds i8, i8* %814, i64 2
  %815 = load i8, i8* %arrayidx1875, align 1
  %conv1876 = zext i8 %815 to i32
  %cmp1877 = icmp eq i32 138, %conv1876
  br label %land.end1879

land.end1879:                                     ; preds = %land.rhs1874, %cond.true1869
  %816 = phi i1 [ false, %cond.true1869 ], [ %cmp1877, %land.rhs1874 ]
  %817 = zext i1 %816 to i64
  %cond1880 = select i1 %816, i32 3, i32 0
  br label %cond.end2187

cond.false1881:                                   ; preds = %lor.lhs.false1864
  %818 = load i8*, i8** %s, align 8
  %arrayidx1882 = getelementptr inbounds i8, i8* %818, i64 0
  %819 = load i8, i8* %arrayidx1882, align 1
  %conv1883 = zext i8 %819 to i32
  %cmp1884 = icmp eq i32 197, %conv1883
  br i1 %cmp1884, label %cond.true1886, label %cond.false1903

cond.true1886:                                    ; preds = %cond.false1881
  %820 = load i8*, i8** %s, align 8
  %arrayidx1887 = getelementptr inbounds i8, i8* %820, i64 1
  %821 = load i8, i8* %arrayidx1887, align 1
  %conv1888 = zext i8 %821 to i32
  %cmp1889 = icmp eq i32 191, %conv1888
  br i1 %cmp1889, label %land.lhs.true1891, label %land.end1901

land.lhs.true1891:                                ; preds = %cond.true1886
  %822 = load i8*, i8** %s, align 8
  %arrayidx1892 = getelementptr inbounds i8, i8* %822, i64 2
  %823 = load i8, i8* %arrayidx1892, align 1
  %conv1893 = zext i8 %823 to i32
  %cmp1894 = icmp eq i32 197, %conv1893
  br i1 %cmp1894, label %land.rhs1896, label %land.end1901

land.rhs1896:                                     ; preds = %land.lhs.true1891
  %824 = load i8*, i8** %s, align 8
  %arrayidx1897 = getelementptr inbounds i8, i8* %824, i64 3
  %825 = load i8, i8* %arrayidx1897, align 1
  %conv1898 = zext i8 %825 to i32
  %cmp1899 = icmp eq i32 191, %conv1898
  br label %land.end1901

land.end1901:                                     ; preds = %land.rhs1896, %land.lhs.true1891, %cond.true1886
  %826 = phi i1 [ false, %land.lhs.true1891 ], [ false, %cond.true1886 ], [ %cmp1899, %land.rhs1896 ]
  %827 = zext i1 %826 to i64
  %cond1902 = select i1 %826, i32 4, i32 0
  br label %cond.end2185

cond.false1903:                                   ; preds = %cond.false1881
  %828 = load i8*, i8** %s, align 8
  %arrayidx1904 = getelementptr inbounds i8, i8* %828, i64 0
  %829 = load i8, i8* %arrayidx1904, align 1
  %conv1905 = zext i8 %829 to i32
  %cmp1906 = icmp eq i32 202, %conv1905
  br i1 %cmp1906, label %cond.true1908, label %cond.false1920

cond.true1908:                                    ; preds = %cond.false1903
  %830 = load i8*, i8** %s, align 8
  %arrayidx1909 = getelementptr inbounds i8, i8* %830, i64 1
  %831 = load i8, i8* %arrayidx1909, align 1
  %conv1910 = zext i8 %831 to i32
  %cmp1911 = icmp eq i32 188, %conv1910
  br i1 %cmp1911, label %land.rhs1913, label %land.end1918

land.rhs1913:                                     ; preds = %cond.true1908
  %832 = load i8*, i8** %s, align 8
  %arrayidx1914 = getelementptr inbounds i8, i8* %832, i64 2
  %833 = load i8, i8* %arrayidx1914, align 1
  %conv1915 = zext i8 %833 to i32
  %cmp1916 = icmp eq i32 110, %conv1915
  br label %land.end1918

land.end1918:                                     ; preds = %land.rhs1913, %cond.true1908
  %834 = phi i1 [ false, %cond.true1908 ], [ %cmp1916, %land.rhs1913 ]
  %835 = zext i1 %834 to i64
  %cond1919 = select i1 %834, i32 3, i32 0
  br label %cond.end2183

cond.false1920:                                   ; preds = %cond.false1903
  %836 = load i8*, i8** %s, align 8
  %arrayidx1921 = getelementptr inbounds i8, i8* %836, i64 0
  %837 = load i8, i8* %arrayidx1921, align 1
  %conv1922 = zext i8 %837 to i32
  %cmp1923 = icmp eq i32 206, %conv1922
  br i1 %cmp1923, label %cond.true1925, label %cond.false1999

cond.true1925:                                    ; preds = %cond.false1920
  %838 = load i8*, i8** %s, align 8
  %arrayidx1926 = getelementptr inbounds i8, i8* %838, i64 1
  %839 = load i8, i8* %arrayidx1926, align 1
  %conv1927 = zext i8 %839 to i32
  %and1928 = and i32 %conv1927, 253
  %cmp1929 = icmp eq i32 %and1928, 172
  br i1 %cmp1929, label %cond.true1931, label %cond.false1943

cond.true1931:                                    ; preds = %cond.true1925
  %840 = load i8*, i8** %s, align 8
  %arrayidx1932 = getelementptr inbounds i8, i8* %840, i64 2
  %841 = load i8, i8* %arrayidx1932, align 1
  %conv1933 = zext i8 %841 to i32
  %cmp1934 = icmp eq i32 206, %conv1933
  br i1 %cmp1934, label %land.rhs1936, label %land.end1941

land.rhs1936:                                     ; preds = %cond.true1931
  %842 = load i8*, i8** %s, align 8
  %arrayidx1937 = getelementptr inbounds i8, i8* %842, i64 3
  %843 = load i8, i8* %arrayidx1937, align 1
  %conv1938 = zext i8 %843 to i32
  %cmp1939 = icmp eq i32 185, %conv1938
  br label %land.end1941

land.end1941:                                     ; preds = %land.rhs1936, %cond.true1931
  %844 = phi i1 [ false, %cond.true1931 ], [ %cmp1939, %land.rhs1936 ]
  %845 = zext i1 %844 to i64
  %cond1942 = select i1 %844, i32 4, i32 0
  br label %cond.end1997

cond.false1943:                                   ; preds = %cond.true1925
  %846 = load i8*, i8** %s, align 8
  %arrayidx1944 = getelementptr inbounds i8, i8* %846, i64 1
  %847 = load i8, i8* %arrayidx1944, align 1
  %conv1945 = zext i8 %847 to i32
  %cmp1946 = icmp eq i32 177, %conv1945
  br i1 %cmp1946, label %cond.true1953, label %lor.lhs.false1948

lor.lhs.false1948:                                ; preds = %cond.false1943
  %848 = load i8*, i8** %s, align 8
  %arrayidx1949 = getelementptr inbounds i8, i8* %848, i64 1
  %849 = load i8, i8* %arrayidx1949, align 1
  %conv1950 = zext i8 %849 to i32
  %cmp1951 = icmp eq i32 183, %conv1950
  br i1 %cmp1951, label %cond.true1953, label %cond.false1978

cond.true1953:                                    ; preds = %lor.lhs.false1948, %cond.false1943
  %850 = load i8*, i8** %s, align 8
  %arrayidx1954 = getelementptr inbounds i8, i8* %850, i64 2
  %851 = load i8, i8* %arrayidx1954, align 1
  %conv1955 = zext i8 %851 to i32
  %cmp1956 = icmp eq i32 205, %conv1955
  br i1 %cmp1956, label %cond.true1958, label %cond.false1964

cond.true1958:                                    ; preds = %cond.true1953
  %852 = load i8*, i8** %s, align 8
  %arrayidx1959 = getelementptr inbounds i8, i8* %852, i64 3
  %853 = load i8, i8* %arrayidx1959, align 1
  %conv1960 = zext i8 %853 to i32
  %cmp1961 = icmp eq i32 130, %conv1960
  %854 = zext i1 %cmp1961 to i64
  %cond1963 = select i1 %cmp1961, i32 4, i32 0
  br label %cond.end1976

cond.false1964:                                   ; preds = %cond.true1953
  %855 = load i8*, i8** %s, align 8
  %arrayidx1965 = getelementptr inbounds i8, i8* %855, i64 2
  %856 = load i8, i8* %arrayidx1965, align 1
  %conv1966 = zext i8 %856 to i32
  %cmp1967 = icmp eq i32 206, %conv1966
  br i1 %cmp1967, label %land.rhs1969, label %land.end1974

land.rhs1969:                                     ; preds = %cond.false1964
  %857 = load i8*, i8** %s, align 8
  %arrayidx1970 = getelementptr inbounds i8, i8* %857, i64 3
  %858 = load i8, i8* %arrayidx1970, align 1
  %conv1971 = zext i8 %858 to i32
  %cmp1972 = icmp eq i32 185, %conv1971
  br label %land.end1974

land.end1974:                                     ; preds = %land.rhs1969, %cond.false1964
  %859 = phi i1 [ false, %cond.false1964 ], [ %cmp1972, %land.rhs1969 ]
  %860 = zext i1 %859 to i64
  %cond1975 = select i1 %859, i32 4, i32 0
  br label %cond.end1976

cond.end1976:                                     ; preds = %land.end1974, %cond.true1958
  %cond1977 = phi i32 [ %cond1963, %cond.true1958 ], [ %cond1975, %land.end1974 ]
  br label %cond.end1995

cond.false1978:                                   ; preds = %lor.lhs.false1948
  %861 = load i8*, i8** %s, align 8
  %arrayidx1979 = getelementptr inbounds i8, i8* %861, i64 1
  %862 = load i8, i8* %arrayidx1979, align 1
  %conv1980 = zext i8 %862 to i32
  %cmp1981 = icmp eq i32 185, %conv1980
  br i1 %cmp1981, label %land.lhs.true1983, label %land.end1993

land.lhs.true1983:                                ; preds = %cond.false1978
  %863 = load i8*, i8** %s, align 8
  %arrayidx1984 = getelementptr inbounds i8, i8* %863, i64 2
  %864 = load i8, i8* %arrayidx1984, align 1
  %conv1985 = zext i8 %864 to i32
  %cmp1986 = icmp eq i32 205, %conv1985
  br i1 %cmp1986, label %land.rhs1988, label %land.end1993

land.rhs1988:                                     ; preds = %land.lhs.true1983
  %865 = load i8*, i8** %s, align 8
  %arrayidx1989 = getelementptr inbounds i8, i8* %865, i64 3
  %866 = load i8, i8* %arrayidx1989, align 1
  %conv1990 = zext i8 %866 to i32
  %cmp1991 = icmp eq i32 130, %conv1990
  br label %land.end1993

land.end1993:                                     ; preds = %land.rhs1988, %land.lhs.true1983, %cond.false1978
  %867 = phi i1 [ false, %land.lhs.true1983 ], [ false, %cond.false1978 ], [ %cmp1991, %land.rhs1988 ]
  %868 = zext i1 %867 to i64
  %cond1994 = select i1 %867, i32 4, i32 0
  br label %cond.end1995

cond.end1995:                                     ; preds = %land.end1993, %cond.end1976
  %cond1996 = phi i32 [ %cond1977, %cond.end1976 ], [ %cond1994, %land.end1993 ]
  br label %cond.end1997

cond.end1997:                                     ; preds = %cond.end1995, %land.end1941
  %cond1998 = phi i32 [ %cond1942, %land.end1941 ], [ %cond1996, %cond.end1995 ]
  br label %cond.end2181

cond.false1999:                                   ; preds = %cond.false1920
  %869 = load i8*, i8** %s, align 8
  %arrayidx2000 = getelementptr inbounds i8, i8* %869, i64 0
  %870 = load i8, i8* %arrayidx2000, align 1
  %conv2001 = zext i8 %870 to i32
  %cmp2002 = icmp eq i32 207, %conv2001
  br i1 %cmp2002, label %cond.true2004, label %cond.false2104

cond.true2004:                                    ; preds = %cond.false1999
  %871 = load i8*, i8** %s, align 8
  %arrayidx2005 = getelementptr inbounds i8, i8* %871, i64 1
  %872 = load i8, i8* %arrayidx2005, align 1
  %conv2006 = zext i8 %872 to i32
  %cmp2007 = icmp eq i32 129, %conv2006
  br i1 %cmp2007, label %cond.true2009, label %cond.false2021

cond.true2009:                                    ; preds = %cond.true2004
  %873 = load i8*, i8** %s, align 8
  %arrayidx2010 = getelementptr inbounds i8, i8* %873, i64 2
  %874 = load i8, i8* %arrayidx2010, align 1
  %conv2011 = zext i8 %874 to i32
  %cmp2012 = icmp eq i32 204, %conv2011
  br i1 %cmp2012, label %land.rhs2014, label %land.end2019

land.rhs2014:                                     ; preds = %cond.true2009
  %875 = load i8*, i8** %s, align 8
  %arrayidx2015 = getelementptr inbounds i8, i8* %875, i64 3
  %876 = load i8, i8* %arrayidx2015, align 1
  %conv2016 = zext i8 %876 to i32
  %cmp2017 = icmp eq i32 147, %conv2016
  br label %land.end2019

land.end2019:                                     ; preds = %land.rhs2014, %cond.true2009
  %877 = phi i1 [ false, %cond.true2009 ], [ %cmp2017, %land.rhs2014 ]
  %878 = zext i1 %877 to i64
  %cond2020 = select i1 %877, i32 4, i32 0
  br label %cond.end2102

cond.false2021:                                   ; preds = %cond.true2004
  %879 = load i8*, i8** %s, align 8
  %arrayidx2022 = getelementptr inbounds i8, i8* %879, i64 1
  %880 = load i8, i8* %arrayidx2022, align 1
  %conv2023 = zext i8 %880 to i32
  %cmp2024 = icmp eq i32 133, %conv2023
  br i1 %cmp2024, label %cond.true2026, label %cond.false2051

cond.true2026:                                    ; preds = %cond.false2021
  %881 = load i8*, i8** %s, align 8
  %arrayidx2027 = getelementptr inbounds i8, i8* %881, i64 2
  %882 = load i8, i8* %arrayidx2027, align 1
  %conv2028 = zext i8 %882 to i32
  %cmp2029 = icmp eq i32 204, %conv2028
  br i1 %cmp2029, label %cond.true2031, label %cond.false2037

cond.true2031:                                    ; preds = %cond.true2026
  %883 = load i8*, i8** %s, align 8
  %arrayidx2032 = getelementptr inbounds i8, i8* %883, i64 3
  %884 = load i8, i8* %arrayidx2032, align 1
  %conv2033 = zext i8 %884 to i32
  %cmp2034 = icmp eq i32 147, %conv2033
  %885 = zext i1 %cmp2034 to i64
  %cond2036 = select i1 %cmp2034, i32 4, i32 0
  br label %cond.end2049

cond.false2037:                                   ; preds = %cond.true2026
  %886 = load i8*, i8** %s, align 8
  %arrayidx2038 = getelementptr inbounds i8, i8* %886, i64 2
  %887 = load i8, i8* %arrayidx2038, align 1
  %conv2039 = zext i8 %887 to i32
  %cmp2040 = icmp eq i32 205, %conv2039
  br i1 %cmp2040, label %land.rhs2042, label %land.end2047

land.rhs2042:                                     ; preds = %cond.false2037
  %888 = load i8*, i8** %s, align 8
  %arrayidx2043 = getelementptr inbounds i8, i8* %888, i64 3
  %889 = load i8, i8* %arrayidx2043, align 1
  %conv2044 = zext i8 %889 to i32
  %cmp2045 = icmp eq i32 130, %conv2044
  br label %land.end2047

land.end2047:                                     ; preds = %land.rhs2042, %cond.false2037
  %890 = phi i1 [ false, %cond.false2037 ], [ %cmp2045, %land.rhs2042 ]
  %891 = zext i1 %890 to i64
  %cond2048 = select i1 %890, i32 4, i32 0
  br label %cond.end2049

cond.end2049:                                     ; preds = %land.end2047, %cond.true2031
  %cond2050 = phi i32 [ %cond2036, %cond.true2031 ], [ %cond2048, %land.end2047 ]
  br label %cond.end2100

cond.false2051:                                   ; preds = %cond.false2021
  %892 = load i8*, i8** %s, align 8
  %arrayidx2052 = getelementptr inbounds i8, i8* %892, i64 1
  %893 = load i8, i8* %arrayidx2052, align 1
  %conv2053 = zext i8 %893 to i32
  %cmp2054 = icmp eq i32 137, %conv2053
  br i1 %cmp2054, label %cond.true2056, label %cond.false2081

cond.true2056:                                    ; preds = %cond.false2051
  %894 = load i8*, i8** %s, align 8
  %arrayidx2057 = getelementptr inbounds i8, i8* %894, i64 2
  %895 = load i8, i8* %arrayidx2057, align 1
  %conv2058 = zext i8 %895 to i32
  %cmp2059 = icmp eq i32 205, %conv2058
  br i1 %cmp2059, label %cond.true2061, label %cond.false2067

cond.true2061:                                    ; preds = %cond.true2056
  %896 = load i8*, i8** %s, align 8
  %arrayidx2062 = getelementptr inbounds i8, i8* %896, i64 3
  %897 = load i8, i8* %arrayidx2062, align 1
  %conv2063 = zext i8 %897 to i32
  %cmp2064 = icmp eq i32 130, %conv2063
  %898 = zext i1 %cmp2064 to i64
  %cond2066 = select i1 %cmp2064, i32 4, i32 0
  br label %cond.end2079

cond.false2067:                                   ; preds = %cond.true2056
  %899 = load i8*, i8** %s, align 8
  %arrayidx2068 = getelementptr inbounds i8, i8* %899, i64 2
  %900 = load i8, i8* %arrayidx2068, align 1
  %conv2069 = zext i8 %900 to i32
  %cmp2070 = icmp eq i32 206, %conv2069
  br i1 %cmp2070, label %land.rhs2072, label %land.end2077

land.rhs2072:                                     ; preds = %cond.false2067
  %901 = load i8*, i8** %s, align 8
  %arrayidx2073 = getelementptr inbounds i8, i8* %901, i64 3
  %902 = load i8, i8* %arrayidx2073, align 1
  %conv2074 = zext i8 %902 to i32
  %cmp2075 = icmp eq i32 185, %conv2074
  br label %land.end2077

land.end2077:                                     ; preds = %land.rhs2072, %cond.false2067
  %903 = phi i1 [ false, %cond.false2067 ], [ %cmp2075, %land.rhs2072 ]
  %904 = zext i1 %903 to i64
  %cond2078 = select i1 %903, i32 4, i32 0
  br label %cond.end2079

cond.end2079:                                     ; preds = %land.end2077, %cond.true2061
  %cond2080 = phi i32 [ %cond2066, %cond.true2061 ], [ %cond2078, %land.end2077 ]
  br label %cond.end2098

cond.false2081:                                   ; preds = %cond.false2051
  %905 = load i8*, i8** %s, align 8
  %arrayidx2082 = getelementptr inbounds i8, i8* %905, i64 1
  %906 = load i8, i8* %arrayidx2082, align 1
  %conv2083 = zext i8 %906 to i32
  %cmp2084 = icmp eq i32 142, %conv2083
  br i1 %cmp2084, label %land.lhs.true2086, label %land.end2096

land.lhs.true2086:                                ; preds = %cond.false2081
  %907 = load i8*, i8** %s, align 8
  %arrayidx2087 = getelementptr inbounds i8, i8* %907, i64 2
  %908 = load i8, i8* %arrayidx2087, align 1
  %conv2088 = zext i8 %908 to i32
  %cmp2089 = icmp eq i32 206, %conv2088
  br i1 %cmp2089, label %land.rhs2091, label %land.end2096

land.rhs2091:                                     ; preds = %land.lhs.true2086
  %909 = load i8*, i8** %s, align 8
  %arrayidx2092 = getelementptr inbounds i8, i8* %909, i64 3
  %910 = load i8, i8* %arrayidx2092, align 1
  %conv2093 = zext i8 %910 to i32
  %cmp2094 = icmp eq i32 185, %conv2093
  br label %land.end2096

land.end2096:                                     ; preds = %land.rhs2091, %land.lhs.true2086, %cond.false2081
  %911 = phi i1 [ false, %land.lhs.true2086 ], [ false, %cond.false2081 ], [ %cmp2094, %land.rhs2091 ]
  %912 = zext i1 %911 to i64
  %cond2097 = select i1 %911, i32 4, i32 0
  br label %cond.end2098

cond.end2098:                                     ; preds = %land.end2096, %cond.end2079
  %cond2099 = phi i32 [ %cond2080, %cond.end2079 ], [ %cond2097, %land.end2096 ]
  br label %cond.end2100

cond.end2100:                                     ; preds = %cond.end2098, %cond.end2049
  %cond2101 = phi i32 [ %cond2050, %cond.end2049 ], [ %cond2099, %cond.end2098 ]
  br label %cond.end2102

cond.end2102:                                     ; preds = %cond.end2100, %land.end2019
  %cond2103 = phi i32 [ %cond2020, %land.end2019 ], [ %cond2101, %cond.end2100 ]
  br label %cond.end2179

cond.false2104:                                   ; preds = %cond.false1999
  %913 = load i8*, i8** %s, align 8
  %arrayidx2105 = getelementptr inbounds i8, i8* %913, i64 0
  %914 = load i8, i8* %arrayidx2105, align 1
  %conv2106 = zext i8 %914 to i32
  %cmp2107 = icmp eq i32 213, %conv2106
  br i1 %cmp2107, label %cond.true2109, label %cond.false2176

cond.true2109:                                    ; preds = %cond.false2104
  %915 = load i8*, i8** %s, align 8
  %arrayidx2110 = getelementptr inbounds i8, i8* %915, i64 1
  %916 = load i8, i8* %arrayidx2110, align 1
  %conv2111 = zext i8 %916 to i32
  %cmp2112 = icmp eq i32 165, %conv2111
  br i1 %cmp2112, label %cond.true2114, label %cond.false2126

cond.true2114:                                    ; preds = %cond.true2109
  %917 = load i8*, i8** %s, align 8
  %arrayidx2115 = getelementptr inbounds i8, i8* %917, i64 2
  %918 = load i8, i8* %arrayidx2115, align 1
  %conv2116 = zext i8 %918 to i32
  %cmp2117 = icmp eq i32 214, %conv2116
  br i1 %cmp2117, label %land.rhs2119, label %land.end2124

land.rhs2119:                                     ; preds = %cond.true2114
  %919 = load i8*, i8** %s, align 8
  %arrayidx2120 = getelementptr inbounds i8, i8* %919, i64 3
  %920 = load i8, i8* %arrayidx2120, align 1
  %conv2121 = zext i8 %920 to i32
  %cmp2122 = icmp eq i32 130, %conv2121
  br label %land.end2124

land.end2124:                                     ; preds = %land.rhs2119, %cond.true2114
  %921 = phi i1 [ false, %cond.true2114 ], [ %cmp2122, %land.rhs2119 ]
  %922 = zext i1 %921 to i64
  %cond2125 = select i1 %921, i32 4, i32 0
  br label %cond.end2174

cond.false2126:                                   ; preds = %cond.true2109
  %923 = load i8*, i8** %s, align 8
  %arrayidx2127 = getelementptr inbounds i8, i8* %923, i64 1
  %924 = load i8, i8* %arrayidx2127, align 1
  %conv2128 = zext i8 %924 to i32
  %cmp2129 = icmp eq i32 180, %conv2128
  br i1 %cmp2129, label %cond.true2131, label %cond.false2155

cond.true2131:                                    ; preds = %cond.false2126
  %925 = load i8*, i8** %s, align 8
  %arrayidx2132 = getelementptr inbounds i8, i8* %925, i64 2
  %926 = load i8, i8* %arrayidx2132, align 1
  %conv2133 = zext i8 %926 to i32
  %cmp2134 = icmp eq i32 213, %conv2133
  br i1 %cmp2134, label %land.rhs2136, label %land.end2153

land.rhs2136:                                     ; preds = %cond.true2131
  %927 = load i8*, i8** %s, align 8
  %arrayidx2137 = getelementptr inbounds i8, i8* %927, i64 3
  %928 = load i8, i8* %arrayidx2137, align 1
  %conv2138 = zext i8 %928 to i32
  %and2139 = and i32 %conv2138, 247
  %cmp2140 = icmp eq i32 %and2139, 165
  br i1 %cmp2140, label %lor.end2152, label %lor.lhs.false2142

lor.lhs.false2142:                                ; preds = %land.rhs2136
  %929 = load i8*, i8** %s, align 8
  %arrayidx2143 = getelementptr inbounds i8, i8* %929, i64 3
  %930 = load i8, i8* %arrayidx2143, align 1
  %conv2144 = zext i8 %930 to i32
  %cmp2145 = icmp eq i32 %conv2144, 171
  br i1 %cmp2145, label %lor.end2152, label %lor.rhs2147

lor.rhs2147:                                      ; preds = %lor.lhs.false2142
  %931 = load i8*, i8** %s, align 8
  %arrayidx2148 = getelementptr inbounds i8, i8* %931, i64 3
  %932 = load i8, i8* %arrayidx2148, align 1
  %conv2149 = zext i8 %932 to i32
  %cmp2150 = icmp eq i32 %conv2149, 182
  br label %lor.end2152

lor.end2152:                                      ; preds = %lor.rhs2147, %lor.lhs.false2142, %land.rhs2136
  %933 = phi i1 [ true, %lor.lhs.false2142 ], [ true, %land.rhs2136 ], [ %cmp2150, %lor.rhs2147 ]
  br label %land.end2153

land.end2153:                                     ; preds = %lor.end2152, %cond.true2131
  %934 = phi i1 [ false, %cond.true2131 ], [ %933, %lor.end2152 ]
  %935 = zext i1 %934 to i64
  %cond2154 = select i1 %934, i32 4, i32 0
  br label %cond.end2172

cond.false2155:                                   ; preds = %cond.false2126
  %936 = load i8*, i8** %s, align 8
  %arrayidx2156 = getelementptr inbounds i8, i8* %936, i64 1
  %937 = load i8, i8* %arrayidx2156, align 1
  %conv2157 = zext i8 %937 to i32
  %cmp2158 = icmp eq i32 190, %conv2157
  br i1 %cmp2158, label %land.lhs.true2160, label %land.end2170

land.lhs.true2160:                                ; preds = %cond.false2155
  %938 = load i8*, i8** %s, align 8
  %arrayidx2161 = getelementptr inbounds i8, i8* %938, i64 2
  %939 = load i8, i8* %arrayidx2161, align 1
  %conv2162 = zext i8 %939 to i32
  %cmp2163 = icmp eq i32 213, %conv2162
  br i1 %cmp2163, label %land.rhs2165, label %land.end2170

land.rhs2165:                                     ; preds = %land.lhs.true2160
  %940 = load i8*, i8** %s, align 8
  %arrayidx2166 = getelementptr inbounds i8, i8* %940, i64 3
  %941 = load i8, i8* %arrayidx2166, align 1
  %conv2167 = zext i8 %941 to i32
  %cmp2168 = icmp eq i32 182, %conv2167
  br label %land.end2170

land.end2170:                                     ; preds = %land.rhs2165, %land.lhs.true2160, %cond.false2155
  %942 = phi i1 [ false, %land.lhs.true2160 ], [ false, %cond.false2155 ], [ %cmp2168, %land.rhs2165 ]
  %943 = zext i1 %942 to i64
  %cond2171 = select i1 %942, i32 4, i32 0
  br label %cond.end2172

cond.end2172:                                     ; preds = %land.end2170, %land.end2153
  %cond2173 = phi i32 [ %cond2154, %land.end2153 ], [ %cond2171, %land.end2170 ]
  br label %cond.end2174

cond.end2174:                                     ; preds = %cond.end2172, %land.end2124
  %cond2175 = phi i32 [ %cond2125, %land.end2124 ], [ %cond2173, %cond.end2172 ]
  br label %cond.end2177

cond.false2176:                                   ; preds = %cond.false2104
  br label %cond.end2177

cond.end2177:                                     ; preds = %cond.false2176, %cond.end2174
  %cond2178 = phi i32 [ %cond2175, %cond.end2174 ], [ 0, %cond.false2176 ]
  br label %cond.end2179

cond.end2179:                                     ; preds = %cond.end2177, %cond.end2102
  %cond2180 = phi i32 [ %cond2103, %cond.end2102 ], [ %cond2178, %cond.end2177 ]
  br label %cond.end2181

cond.end2181:                                     ; preds = %cond.end2179, %cond.end1997
  %cond2182 = phi i32 [ %cond1998, %cond.end1997 ], [ %cond2180, %cond.end2179 ]
  br label %cond.end2183

cond.end2183:                                     ; preds = %cond.end2181, %land.end1918
  %cond2184 = phi i32 [ %cond1919, %land.end1918 ], [ %cond2182, %cond.end2181 ]
  br label %cond.end2185

cond.end2185:                                     ; preds = %cond.end2183, %land.end1901
  %cond2186 = phi i32 [ %cond1902, %land.end1901 ], [ %cond2184, %cond.end2183 ]
  br label %cond.end2187

cond.end2187:                                     ; preds = %cond.end2185, %land.end1879
  %cond2188 = phi i32 [ %cond1880, %land.end1879 ], [ %cond2186, %cond.end2185 ]
  br label %cond.end2189

cond.end2189:                                     ; preds = %cond.end2187, %land.end1857
  %cond2190 = phi i32 [ %cond1858, %land.end1857 ], [ %cond2188, %cond.end2187 ]
  br label %cond.end2191

cond.end2191:                                     ; preds = %cond.end2189, %lor.end1840
  %cond2192 = phi i32 [ %cond1841, %lor.end1840 ], [ %cond2190, %cond.end2189 ]
  br label %cond.end2193

cond.end2193:                                     ; preds = %cond.end2191, %land.end1823
  %cond2194 = phi i32 [ %cond1824, %land.end1823 ], [ %cond2192, %cond.end2191 ]
  br label %cond.end2195

cond.end2195:                                     ; preds = %cond.end2193, %land.end1806
  %cond2196 = phi i32 [ %cond1807, %land.end1806 ], [ %cond2194, %cond.end2193 ]
  br label %cond.end2197

cond.end2197:                                     ; preds = %cond.end2195, %land.end1789
  %cond2198 = phi i32 [ %cond1790, %land.end1789 ], [ %cond2196, %cond.end2195 ]
  br label %cond.end2199

cond.end2199:                                     ; preds = %cond.end2197, %cond.end1772
  %cond2200 = phi i32 [ %cond1773, %cond.end1772 ], [ %cond2198, %cond.end2197 ]
  br label %cond.end2201

cond.end2201:                                     ; preds = %cond.end2199, %land.end1736
  %cond2202 = phi i32 [ %cond1737, %land.end1736 ], [ %cond2200, %cond.end2199 ]
  br label %cond.end2455

cond.false2203:                                   ; preds = %cond.false1715
  %944 = load i8*, i8** %s_end, align 8
  %945 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast2204 = ptrtoint i8* %944 to i64
  %sub.ptr.rhs.cast2205 = ptrtoint i8* %945 to i64
  %sub.ptr.sub2206 = sub i64 %sub.ptr.lhs.cast2204, %sub.ptr.rhs.cast2205
  %cmp2207 = icmp sgt i64 %sub.ptr.sub2206, 2
  br i1 %cmp2207, label %cond.true2209, label %cond.false2402

cond.true2209:                                    ; preds = %cond.false2203
  %946 = load i8*, i8** %s, align 8
  %arrayidx2210 = getelementptr inbounds i8, i8* %946, i64 0
  %947 = load i8, i8* %arrayidx2210, align 1
  %conv2211 = zext i8 %947 to i32
  %cmp2212 = icmp eq i32 97, %conv2211
  br i1 %cmp2212, label %cond.true2214, label %cond.false2226

cond.true2214:                                    ; preds = %cond.true2209
  %948 = load i8*, i8** %s, align 8
  %arrayidx2215 = getelementptr inbounds i8, i8* %948, i64 1
  %949 = load i8, i8* %arrayidx2215, align 1
  %conv2216 = zext i8 %949 to i32
  %cmp2217 = icmp eq i32 202, %conv2216
  br i1 %cmp2217, label %land.rhs2219, label %land.end2224

land.rhs2219:                                     ; preds = %cond.true2214
  %950 = load i8*, i8** %s, align 8
  %arrayidx2220 = getelementptr inbounds i8, i8* %950, i64 2
  %951 = load i8, i8* %arrayidx2220, align 1
  %conv2221 = zext i8 %951 to i32
  %cmp2222 = icmp eq i32 190, %conv2221
  br label %land.end2224

land.end2224:                                     ; preds = %land.rhs2219, %cond.true2214
  %952 = phi i1 [ false, %cond.true2214 ], [ %cmp2222, %land.rhs2219 ]
  %953 = zext i1 %952 to i64
  %cond2225 = select i1 %952, i32 3, i32 0
  br label %cond.end2400

cond.false2226:                                   ; preds = %cond.true2209
  %954 = load i8*, i8** %s, align 8
  %arrayidx2227 = getelementptr inbounds i8, i8* %954, i64 0
  %955 = load i8, i8* %arrayidx2227, align 1
  %conv2228 = zext i8 %955 to i32
  %cmp2229 = icmp eq i32 102, %conv2228
  br i1 %cmp2229, label %cond.true2231, label %cond.false2262

cond.true2231:                                    ; preds = %cond.false2226
  %956 = load i8*, i8** %s, align 8
  %arrayidx2232 = getelementptr inbounds i8, i8* %956, i64 1
  %957 = load i8, i8* %arrayidx2232, align 1
  %conv2233 = zext i8 %957 to i32
  %cmp2234 = icmp eq i32 102, %conv2233
  br i1 %cmp2234, label %cond.true2236, label %cond.false2248

cond.true2236:                                    ; preds = %cond.true2231
  %958 = load i8*, i8** %s, align 8
  %arrayidx2237 = getelementptr inbounds i8, i8* %958, i64 2
  %959 = load i8, i8* %arrayidx2237, align 1
  %conv2238 = zext i8 %959 to i32
  %cmp2239 = icmp eq i32 105, %conv2238
  br i1 %cmp2239, label %lor.end2246, label %lor.rhs2241

lor.rhs2241:                                      ; preds = %cond.true2236
  %960 = load i8*, i8** %s, align 8
  %arrayidx2242 = getelementptr inbounds i8, i8* %960, i64 2
  %961 = load i8, i8* %arrayidx2242, align 1
  %conv2243 = zext i8 %961 to i32
  %cmp2244 = icmp eq i32 108, %conv2243
  br label %lor.end2246

lor.end2246:                                      ; preds = %lor.rhs2241, %cond.true2236
  %962 = phi i1 [ true, %cond.true2236 ], [ %cmp2244, %lor.rhs2241 ]
  %963 = zext i1 %962 to i64
  %cond2247 = select i1 %962, i32 3, i32 2
  br label %cond.end2260

cond.false2248:                                   ; preds = %cond.true2231
  %964 = load i8*, i8** %s, align 8
  %arrayidx2249 = getelementptr inbounds i8, i8* %964, i64 1
  %965 = load i8, i8* %arrayidx2249, align 1
  %conv2250 = zext i8 %965 to i32
  %cmp2251 = icmp eq i32 105, %conv2250
  br i1 %cmp2251, label %lor.end2258, label %lor.rhs2253

lor.rhs2253:                                      ; preds = %cond.false2248
  %966 = load i8*, i8** %s, align 8
  %arrayidx2254 = getelementptr inbounds i8, i8* %966, i64 1
  %967 = load i8, i8* %arrayidx2254, align 1
  %conv2255 = zext i8 %967 to i32
  %cmp2256 = icmp eq i32 108, %conv2255
  br label %lor.end2258

lor.end2258:                                      ; preds = %lor.rhs2253, %cond.false2248
  %968 = phi i1 [ true, %cond.false2248 ], [ %cmp2256, %lor.rhs2253 ]
  %969 = zext i1 %968 to i64
  %cond2259 = select i1 %968, i32 2, i32 0
  br label %cond.end2260

cond.end2260:                                     ; preds = %lor.end2258, %lor.end2246
  %cond2261 = phi i32 [ %cond2247, %lor.end2246 ], [ %cond2259, %lor.end2258 ]
  br label %cond.end2398

cond.false2262:                                   ; preds = %cond.false2226
  %970 = load i8*, i8** %s, align 8
  %arrayidx2263 = getelementptr inbounds i8, i8* %970, i64 0
  %971 = load i8, i8* %arrayidx2263, align 1
  %conv2264 = zext i8 %971 to i32
  %cmp2265 = icmp eq i32 104, %conv2264
  br i1 %cmp2265, label %cond.true2267, label %cond.false2279

cond.true2267:                                    ; preds = %cond.false2262
  %972 = load i8*, i8** %s, align 8
  %arrayidx2268 = getelementptr inbounds i8, i8* %972, i64 1
  %973 = load i8, i8* %arrayidx2268, align 1
  %conv2269 = zext i8 %973 to i32
  %cmp2270 = icmp eq i32 204, %conv2269
  br i1 %cmp2270, label %land.rhs2272, label %land.end2277

land.rhs2272:                                     ; preds = %cond.true2267
  %974 = load i8*, i8** %s, align 8
  %arrayidx2273 = getelementptr inbounds i8, i8* %974, i64 2
  %975 = load i8, i8* %arrayidx2273, align 1
  %conv2274 = zext i8 %975 to i32
  %cmp2275 = icmp eq i32 177, %conv2274
  br label %land.end2277

land.end2277:                                     ; preds = %land.rhs2272, %cond.true2267
  %976 = phi i1 [ false, %cond.true2267 ], [ %cmp2275, %land.rhs2272 ]
  %977 = zext i1 %976 to i64
  %cond2278 = select i1 %976, i32 3, i32 0
  br label %cond.end2396

cond.false2279:                                   ; preds = %cond.false2262
  %978 = load i8*, i8** %s, align 8
  %arrayidx2280 = getelementptr inbounds i8, i8* %978, i64 0
  %979 = load i8, i8* %arrayidx2280, align 1
  %conv2281 = zext i8 %979 to i32
  %cmp2282 = icmp eq i32 105, %conv2281
  br i1 %cmp2282, label %cond.true2284, label %cond.false2296

cond.true2284:                                    ; preds = %cond.false2279
  %980 = load i8*, i8** %s, align 8
  %arrayidx2285 = getelementptr inbounds i8, i8* %980, i64 1
  %981 = load i8, i8* %arrayidx2285, align 1
  %conv2286 = zext i8 %981 to i32
  %cmp2287 = icmp eq i32 204, %conv2286
  br i1 %cmp2287, label %land.rhs2289, label %land.end2294

land.rhs2289:                                     ; preds = %cond.true2284
  %982 = load i8*, i8** %s, align 8
  %arrayidx2290 = getelementptr inbounds i8, i8* %982, i64 2
  %983 = load i8, i8* %arrayidx2290, align 1
  %conv2291 = zext i8 %983 to i32
  %cmp2292 = icmp eq i32 135, %conv2291
  br label %land.end2294

land.end2294:                                     ; preds = %land.rhs2289, %cond.true2284
  %984 = phi i1 [ false, %cond.true2284 ], [ %cmp2292, %land.rhs2289 ]
  %985 = zext i1 %984 to i64
  %cond2295 = select i1 %984, i32 3, i32 0
  br label %cond.end2394

cond.false2296:                                   ; preds = %cond.false2279
  %986 = load i8*, i8** %s, align 8
  %arrayidx2297 = getelementptr inbounds i8, i8* %986, i64 0
  %987 = load i8, i8* %arrayidx2297, align 1
  %conv2298 = zext i8 %987 to i32
  %cmp2299 = icmp eq i32 106, %conv2298
  br i1 %cmp2299, label %cond.true2301, label %cond.false2313

cond.true2301:                                    ; preds = %cond.false2296
  %988 = load i8*, i8** %s, align 8
  %arrayidx2302 = getelementptr inbounds i8, i8* %988, i64 1
  %989 = load i8, i8* %arrayidx2302, align 1
  %conv2303 = zext i8 %989 to i32
  %cmp2304 = icmp eq i32 204, %conv2303
  br i1 %cmp2304, label %land.rhs2306, label %land.end2311

land.rhs2306:                                     ; preds = %cond.true2301
  %990 = load i8*, i8** %s, align 8
  %arrayidx2307 = getelementptr inbounds i8, i8* %990, i64 2
  %991 = load i8, i8* %arrayidx2307, align 1
  %conv2308 = zext i8 %991 to i32
  %cmp2309 = icmp eq i32 140, %conv2308
  br label %land.end2311

land.end2311:                                     ; preds = %land.rhs2306, %cond.true2301
  %992 = phi i1 [ false, %cond.true2301 ], [ %cmp2309, %land.rhs2306 ]
  %993 = zext i1 %992 to i64
  %cond2312 = select i1 %992, i32 3, i32 0
  br label %cond.end2392

cond.false2313:                                   ; preds = %cond.false2296
  %994 = load i8*, i8** %s, align 8
  %arrayidx2314 = getelementptr inbounds i8, i8* %994, i64 0
  %995 = load i8, i8* %arrayidx2314, align 1
  %conv2315 = zext i8 %995 to i32
  %cmp2316 = icmp eq i32 115, %conv2315
  br i1 %cmp2316, label %cond.true2318, label %cond.false2330

cond.true2318:                                    ; preds = %cond.false2313
  %996 = load i8*, i8** %s, align 8
  %arrayidx2319 = getelementptr inbounds i8, i8* %996, i64 1
  %997 = load i8, i8* %arrayidx2319, align 1
  %conv2320 = zext i8 %997 to i32
  %cmp2321 = icmp eq i32 115, %conv2320
  br i1 %cmp2321, label %lor.end2328, label %lor.rhs2323

lor.rhs2323:                                      ; preds = %cond.true2318
  %998 = load i8*, i8** %s, align 8
  %arrayidx2324 = getelementptr inbounds i8, i8* %998, i64 1
  %999 = load i8, i8* %arrayidx2324, align 1
  %conv2325 = zext i8 %999 to i32
  %cmp2326 = icmp eq i32 116, %conv2325
  br label %lor.end2328

lor.end2328:                                      ; preds = %lor.rhs2323, %cond.true2318
  %1000 = phi i1 [ true, %cond.true2318 ], [ %cmp2326, %lor.rhs2323 ]
  %1001 = zext i1 %1000 to i64
  %cond2329 = select i1 %1000, i32 2, i32 0
  br label %cond.end2390

cond.false2330:                                   ; preds = %cond.false2313
  %1002 = load i8*, i8** %s, align 8
  %arrayidx2331 = getelementptr inbounds i8, i8* %1002, i64 0
  %1003 = load i8, i8* %arrayidx2331, align 1
  %conv2332 = zext i8 %1003 to i32
  %cmp2333 = icmp eq i32 116, %conv2332
  br i1 %cmp2333, label %cond.true2335, label %cond.false2347

cond.true2335:                                    ; preds = %cond.false2330
  %1004 = load i8*, i8** %s, align 8
  %arrayidx2336 = getelementptr inbounds i8, i8* %1004, i64 1
  %1005 = load i8, i8* %arrayidx2336, align 1
  %conv2337 = zext i8 %1005 to i32
  %cmp2338 = icmp eq i32 204, %conv2337
  br i1 %cmp2338, label %land.rhs2340, label %land.end2345

land.rhs2340:                                     ; preds = %cond.true2335
  %1006 = load i8*, i8** %s, align 8
  %arrayidx2341 = getelementptr inbounds i8, i8* %1006, i64 2
  %1007 = load i8, i8* %arrayidx2341, align 1
  %conv2342 = zext i8 %1007 to i32
  %cmp2343 = icmp eq i32 136, %conv2342
  br label %land.end2345

land.end2345:                                     ; preds = %land.rhs2340, %cond.true2335
  %1008 = phi i1 [ false, %cond.true2335 ], [ %cmp2343, %land.rhs2340 ]
  %1009 = zext i1 %1008 to i64
  %cond2346 = select i1 %1008, i32 3, i32 0
  br label %cond.end2388

cond.false2347:                                   ; preds = %cond.false2330
  %1010 = load i8*, i8** %s, align 8
  %arrayidx2348 = getelementptr inbounds i8, i8* %1010, i64 0
  %1011 = load i8, i8* %arrayidx2348, align 1
  %conv2349 = zext i8 %1011 to i32
  %cmp2350 = icmp eq i32 119, %conv2349
  br i1 %cmp2350, label %cond.true2357, label %lor.lhs.false2352

lor.lhs.false2352:                                ; preds = %cond.false2347
  %1012 = load i8*, i8** %s, align 8
  %arrayidx2353 = getelementptr inbounds i8, i8* %1012, i64 0
  %1013 = load i8, i8* %arrayidx2353, align 1
  %conv2354 = zext i8 %1013 to i32
  %cmp2355 = icmp eq i32 121, %conv2354
  br i1 %cmp2355, label %cond.true2357, label %cond.false2369

cond.true2357:                                    ; preds = %lor.lhs.false2352, %cond.false2347
  %1014 = load i8*, i8** %s, align 8
  %arrayidx2358 = getelementptr inbounds i8, i8* %1014, i64 1
  %1015 = load i8, i8* %arrayidx2358, align 1
  %conv2359 = zext i8 %1015 to i32
  %cmp2360 = icmp eq i32 204, %conv2359
  br i1 %cmp2360, label %land.rhs2362, label %land.end2367

land.rhs2362:                                     ; preds = %cond.true2357
  %1016 = load i8*, i8** %s, align 8
  %arrayidx2363 = getelementptr inbounds i8, i8* %1016, i64 2
  %1017 = load i8, i8* %arrayidx2363, align 1
  %conv2364 = zext i8 %1017 to i32
  %cmp2365 = icmp eq i32 138, %conv2364
  br label %land.end2367

land.end2367:                                     ; preds = %land.rhs2362, %cond.true2357
  %1018 = phi i1 [ false, %cond.true2357 ], [ %cmp2365, %land.rhs2362 ]
  %1019 = zext i1 %1018 to i64
  %cond2368 = select i1 %1018, i32 3, i32 0
  br label %cond.end2386

cond.false2369:                                   ; preds = %lor.lhs.false2352
  %1020 = load i8*, i8** %s, align 8
  %arrayidx2370 = getelementptr inbounds i8, i8* %1020, i64 0
  %1021 = load i8, i8* %arrayidx2370, align 1
  %conv2371 = zext i8 %1021 to i32
  %cmp2372 = icmp eq i32 202, %conv2371
  br i1 %cmp2372, label %land.lhs.true2374, label %land.end2384

land.lhs.true2374:                                ; preds = %cond.false2369
  %1022 = load i8*, i8** %s, align 8
  %arrayidx2375 = getelementptr inbounds i8, i8* %1022, i64 1
  %1023 = load i8, i8* %arrayidx2375, align 1
  %conv2376 = zext i8 %1023 to i32
  %cmp2377 = icmp eq i32 188, %conv2376
  br i1 %cmp2377, label %land.rhs2379, label %land.end2384

land.rhs2379:                                     ; preds = %land.lhs.true2374
  %1024 = load i8*, i8** %s, align 8
  %arrayidx2380 = getelementptr inbounds i8, i8* %1024, i64 2
  %1025 = load i8, i8* %arrayidx2380, align 1
  %conv2381 = zext i8 %1025 to i32
  %cmp2382 = icmp eq i32 110, %conv2381
  br label %land.end2384

land.end2384:                                     ; preds = %land.rhs2379, %land.lhs.true2374, %cond.false2369
  %1026 = phi i1 [ false, %land.lhs.true2374 ], [ false, %cond.false2369 ], [ %cmp2382, %land.rhs2379 ]
  %1027 = zext i1 %1026 to i64
  %cond2385 = select i1 %1026, i32 3, i32 0
  br label %cond.end2386

cond.end2386:                                     ; preds = %land.end2384, %land.end2367
  %cond2387 = phi i32 [ %cond2368, %land.end2367 ], [ %cond2385, %land.end2384 ]
  br label %cond.end2388

cond.end2388:                                     ; preds = %cond.end2386, %land.end2345
  %cond2389 = phi i32 [ %cond2346, %land.end2345 ], [ %cond2387, %cond.end2386 ]
  br label %cond.end2390

cond.end2390:                                     ; preds = %cond.end2388, %lor.end2328
  %cond2391 = phi i32 [ %cond2329, %lor.end2328 ], [ %cond2389, %cond.end2388 ]
  br label %cond.end2392

cond.end2392:                                     ; preds = %cond.end2390, %land.end2311
  %cond2393 = phi i32 [ %cond2312, %land.end2311 ], [ %cond2391, %cond.end2390 ]
  br label %cond.end2394

cond.end2394:                                     ; preds = %cond.end2392, %land.end2294
  %cond2395 = phi i32 [ %cond2295, %land.end2294 ], [ %cond2393, %cond.end2392 ]
  br label %cond.end2396

cond.end2396:                                     ; preds = %cond.end2394, %land.end2277
  %cond2397 = phi i32 [ %cond2278, %land.end2277 ], [ %cond2395, %cond.end2394 ]
  br label %cond.end2398

cond.end2398:                                     ; preds = %cond.end2396, %cond.end2260
  %cond2399 = phi i32 [ %cond2261, %cond.end2260 ], [ %cond2397, %cond.end2396 ]
  br label %cond.end2400

cond.end2400:                                     ; preds = %cond.end2398, %land.end2224
  %cond2401 = phi i32 [ %cond2225, %land.end2224 ], [ %cond2399, %cond.end2398 ]
  br label %cond.end2453

cond.false2402:                                   ; preds = %cond.false2203
  %1028 = load i8*, i8** %s_end, align 8
  %1029 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast2403 = ptrtoint i8* %1028 to i64
  %sub.ptr.rhs.cast2404 = ptrtoint i8* %1029 to i64
  %sub.ptr.sub2405 = sub i64 %sub.ptr.lhs.cast2403, %sub.ptr.rhs.cast2404
  %cmp2406 = icmp sgt i64 %sub.ptr.sub2405, 1
  br i1 %cmp2406, label %cond.true2408, label %cond.false2450

cond.true2408:                                    ; preds = %cond.false2402
  %1030 = load i8*, i8** %s, align 8
  %arrayidx2409 = getelementptr inbounds i8, i8* %1030, i64 0
  %1031 = load i8, i8* %arrayidx2409, align 1
  %conv2410 = zext i8 %1031 to i32
  %cmp2411 = icmp eq i32 102, %conv2410
  br i1 %cmp2411, label %cond.true2413, label %cond.false2430

cond.true2413:                                    ; preds = %cond.true2408
  %1032 = load i8*, i8** %s, align 8
  %arrayidx2414 = getelementptr inbounds i8, i8* %1032, i64 1
  %1033 = load i8, i8* %arrayidx2414, align 1
  %conv2415 = zext i8 %1033 to i32
  %cmp2416 = icmp eq i32 102, %conv2415
  br i1 %cmp2416, label %lor.end2428, label %lor.lhs.false2418

lor.lhs.false2418:                                ; preds = %cond.true2413
  %1034 = load i8*, i8** %s, align 8
  %arrayidx2419 = getelementptr inbounds i8, i8* %1034, i64 1
  %1035 = load i8, i8* %arrayidx2419, align 1
  %conv2420 = zext i8 %1035 to i32
  %cmp2421 = icmp eq i32 105, %conv2420
  br i1 %cmp2421, label %lor.end2428, label %lor.rhs2423

lor.rhs2423:                                      ; preds = %lor.lhs.false2418
  %1036 = load i8*, i8** %s, align 8
  %arrayidx2424 = getelementptr inbounds i8, i8* %1036, i64 1
  %1037 = load i8, i8* %arrayidx2424, align 1
  %conv2425 = zext i8 %1037 to i32
  %cmp2426 = icmp eq i32 108, %conv2425
  br label %lor.end2428

lor.end2428:                                      ; preds = %lor.rhs2423, %lor.lhs.false2418, %cond.true2413
  %1038 = phi i1 [ true, %lor.lhs.false2418 ], [ true, %cond.true2413 ], [ %cmp2426, %lor.rhs2423 ]
  %1039 = zext i1 %1038 to i64
  %cond2429 = select i1 %1038, i32 2, i32 0
  br label %cond.end2448

cond.false2430:                                   ; preds = %cond.true2408
  %1040 = load i8*, i8** %s, align 8
  %arrayidx2431 = getelementptr inbounds i8, i8* %1040, i64 0
  %1041 = load i8, i8* %arrayidx2431, align 1
  %conv2432 = zext i8 %1041 to i32
  %cmp2433 = icmp eq i32 115, %conv2432
  br i1 %cmp2433, label %land.rhs2435, label %land.end2446

land.rhs2435:                                     ; preds = %cond.false2430
  %1042 = load i8*, i8** %s, align 8
  %arrayidx2436 = getelementptr inbounds i8, i8* %1042, i64 1
  %1043 = load i8, i8* %arrayidx2436, align 1
  %conv2437 = zext i8 %1043 to i32
  %cmp2438 = icmp eq i32 115, %conv2437
  br i1 %cmp2438, label %lor.end2445, label %lor.rhs2440

lor.rhs2440:                                      ; preds = %land.rhs2435
  %1044 = load i8*, i8** %s, align 8
  %arrayidx2441 = getelementptr inbounds i8, i8* %1044, i64 1
  %1045 = load i8, i8* %arrayidx2441, align 1
  %conv2442 = zext i8 %1045 to i32
  %cmp2443 = icmp eq i32 116, %conv2442
  br label %lor.end2445

lor.end2445:                                      ; preds = %lor.rhs2440, %land.rhs2435
  %1046 = phi i1 [ true, %land.rhs2435 ], [ %cmp2443, %lor.rhs2440 ]
  br label %land.end2446

land.end2446:                                     ; preds = %lor.end2445, %cond.false2430
  %1047 = phi i1 [ false, %cond.false2430 ], [ %1046, %lor.end2445 ]
  %1048 = zext i1 %1047 to i64
  %cond2447 = select i1 %1047, i32 2, i32 0
  br label %cond.end2448

cond.end2448:                                     ; preds = %land.end2446, %lor.end2428
  %cond2449 = phi i32 [ %cond2429, %lor.end2428 ], [ %cond2447, %land.end2446 ]
  br label %cond.end2451

cond.false2450:                                   ; preds = %cond.false2402
  br label %cond.end2451

cond.end2451:                                     ; preds = %cond.false2450, %cond.end2448
  %cond2452 = phi i32 [ %cond2449, %cond.end2448 ], [ 0, %cond.false2450 ]
  br label %cond.end2453

cond.end2453:                                     ; preds = %cond.end2451, %cond.end2400
  %cond2454 = phi i32 [ %cond2401, %cond.end2400 ], [ %cond2452, %cond.end2451 ]
  br label %cond.end2455

cond.end2455:                                     ; preds = %cond.end2453, %cond.end2201
  %cond2456 = phi i32 [ %cond2202, %cond.end2201 ], [ %cond2454, %cond.end2453 ]
  br label %cond.end2457

cond.end2457:                                     ; preds = %cond.end2455, %cond.end1713
  %cond2458 = phi i32 [ %cond1714, %cond.end1713 ], [ %cond2456, %cond.end2455 ]
  br label %cond.end2459

cond.end2459:                                     ; preds = %cond.end2457, %cond.end1159
  %cond2460 = phi i32 [ %cond1160, %cond.end1159 ], [ %cond2458, %cond.end2457 ]
  store i32 %cond2460, i32* %len479, align 4
  %1049 = load i32, i32* %len479, align 4
  %tobool2461 = icmp ne i32 %1049, 0
  br i1 %tobool2461, label %if.end2468, label %if.then2462

if.then2462:                                      ; preds = %cond.end2459
  %1050 = load i8*, i8** %s, align 8
  %1051 = load i8, i8* %1050, align 1
  %idxprom2463 = zext i8 %1051 to i64
  %arrayidx2464 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom2463
  %1052 = load i8, i8* %arrayidx2464, align 1
  %conv2465 = zext i8 %1052 to i32
  %1053 = load i8*, i8** %s, align 8
  %idx.ext2466 = sext i32 %conv2465 to i64
  %add.ptr2467 = getelementptr inbounds i8, i8* %1053, i64 %idx.ext2466
  store i8* %add.ptr2467, i8** %s, align 8
  br label %while.cond474

if.end2468:                                       ; preds = %cond.end2459
  %1054 = load i32, i32* %len479, align 4
  %cmp2469 = icmp eq i32 %1054, 2
  br i1 %cmp2469, label %land.lhs.true2471, label %if.else2499

land.lhs.true2471:                                ; preds = %if.end2468
  %1055 = load i8*, i8** %s, align 8
  %1056 = load i8, i8* %1055, align 1
  %conv2472 = zext i8 %1056 to i32
  %cmp2473 = icmp eq i32 %conv2472, 115
  br i1 %cmp2473, label %land.lhs.true2475, label %if.else2499

land.lhs.true2475:                                ; preds = %land.lhs.true2471
  %1057 = load i8*, i8** %s, align 8
  %add.ptr2476 = getelementptr inbounds i8, i8* %1057, i64 1
  %1058 = load i8, i8* %add.ptr2476, align 1
  %conv2477 = zext i8 %1058 to i32
  %cmp2478 = icmp eq i32 %conv2477, 115
  br i1 %cmp2478, label %land.lhs.true2480, label %if.else2499

land.lhs.true2480:                                ; preds = %land.lhs.true2475
  %1059 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2481 = getelementptr inbounds %struct.regnode, %struct.regnode* %1059, i32 0, i32 1
  %1060 = load i8, i8* %type2481, align 1
  %conv2482 = zext i8 %1060 to i32
  %cmp2483 = icmp ne i32 %conv2482, 36
  br i1 %cmp2483, label %land.lhs.true2485, label %if.else2499

land.lhs.true2485:                                ; preds = %land.lhs.true2480
  %1061 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2486 = getelementptr inbounds %struct.regnode, %struct.regnode* %1061, i32 0, i32 1
  %1062 = load i8, i8* %type2486, align 1
  %conv2487 = zext i8 %1062 to i32
  %cmp2488 = icmp ne i32 %conv2487, 39
  br i1 %cmp2488, label %if.then2490, label %if.else2499

if.then2490:                                      ; preds = %land.lhs.true2485
  store i32 2, i32* %count, align 4
  %1063 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2491 = getelementptr inbounds %struct.regnode, %struct.regnode* %1063, i32 0, i32 1
  %1064 = load i8, i8* %type2491, align 1
  %conv2492 = zext i8 %1064 to i32
  %cmp2493 = icmp ne i32 %conv2492, 34
  br i1 %cmp2493, label %if.then2495, label %if.end2497

if.then2495:                                      ; preds = %if.then2490
  %1065 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2496 = getelementptr inbounds %struct.regnode, %struct.regnode* %1065, i32 0, i32 1
  store i8 37, i8* %type2496, align 1
  br label %if.end2497

if.end2497:                                       ; preds = %if.then2495, %if.then2490
  %1066 = load i8*, i8** %s, align 8
  %add.ptr2498 = getelementptr inbounds i8, i8* %1066, i64 2
  store i8* %add.ptr2498, i8** %s, align 8
  br label %if.end2534

if.else2499:                                      ; preds = %land.lhs.true2485, %land.lhs.true2480, %land.lhs.true2475, %land.lhs.true2471, %if.end2468
  %1067 = load i8*, i8** %s, align 8
  %1068 = load i32, i32* %len479, align 4
  %idx.ext2500 = sext i32 %1068 to i64
  %add.ptr2501 = getelementptr inbounds i8, i8* %1067, i64 %idx.ext2500
  store i8* %add.ptr2501, i8** %multi_end, align 8
  %1069 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2502 = getelementptr inbounds %struct.regnode, %struct.regnode* %1069, i32 0, i32 1
  %1070 = load i8, i8* %type2502, align 1
  %conv2503 = zext i8 %1070 to i32
  %cmp2504 = icmp ne i32 %conv2503, 36
  br i1 %cmp2504, label %land.lhs.true2506, label %if.else2514

land.lhs.true2506:                                ; preds = %if.else2499
  %1071 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2507 = getelementptr inbounds %struct.regnode, %struct.regnode* %1071, i32 0, i32 1
  %1072 = load i8, i8* %type2507, align 1
  %conv2508 = zext i8 %1072 to i32
  %cmp2509 = icmp ne i32 %conv2508, 39
  br i1 %cmp2509, label %if.then2511, label %if.else2514

if.then2511:                                      ; preds = %land.lhs.true2506
  %1073 = load i8*, i8** %s, align 8
  %1074 = load i8*, i8** %multi_end, align 8
  %call2512 = call i64 @Perl_utf8_length(i8* %1073, i8* %1074)
  %conv2513 = trunc i64 %call2512 to i32
  store i32 %conv2513, i32* %count, align 4
  %1075 = load i8*, i8** %multi_end, align 8
  store i8* %1075, i8** %s, align 8
  br label %if.end2533

if.else2514:                                      ; preds = %land.lhs.true2506, %if.else2499
  br label %while.cond2515

while.cond2515:                                   ; preds = %if.end2530, %if.else2514
  %1076 = load i8*, i8** %s, align 8
  %1077 = load i8*, i8** %multi_end, align 8
  %cmp2516 = icmp ult i8* %1076, %1077
  br i1 %cmp2516, label %while.body2518, label %while.end2532

while.body2518:                                   ; preds = %while.cond2515
  %1078 = load i8*, i8** %s, align 8
  %1079 = load i8, i8* %1078, align 1
  %conv2519 = zext i8 %1079 to i64
  %cmp2520 = icmp ult i64 %conv2519, 128
  br i1 %cmp2520, label %if.then2522, label %if.else2524

if.then2522:                                      ; preds = %while.body2518
  %1080 = load i8*, i8** %s, align 8
  %incdec.ptr2523 = getelementptr inbounds i8, i8* %1080, i32 1
  store i8* %incdec.ptr2523, i8** %s, align 8
  br label %next_iteration

if.else2524:                                      ; preds = %while.body2518
  %1081 = load i8*, i8** %s, align 8
  %1082 = load i8, i8* %1081, align 1
  %idxprom2525 = zext i8 %1082 to i64
  %arrayidx2526 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom2525
  %1083 = load i8, i8* %arrayidx2526, align 1
  %conv2527 = zext i8 %1083 to i32
  %1084 = load i8*, i8** %s, align 8
  %idx.ext2528 = sext i32 %conv2527 to i64
  %add.ptr2529 = getelementptr inbounds i8, i8* %1084, i64 %idx.ext2528
  store i8* %add.ptr2529, i8** %s, align 8
  br label %if.end2530

if.end2530:                                       ; preds = %if.else2524
  %1085 = load i32, i32* %count, align 4
  %inc2531 = add nsw i32 %1085, 1
  store i32 %inc2531, i32* %count, align 4
  br label %while.cond2515

while.end2532:                                    ; preds = %while.cond2515
  br label %if.end2533

if.end2533:                                       ; preds = %while.end2532, %if.then2511
  br label %if.end2534

if.end2534:                                       ; preds = %if.end2533, %if.end2497
  %1086 = load i32, i32* %count, align 4
  %sub2535 = sub nsw i32 %1086, 1
  %1087 = load i32, i32* %total_count_delta, align 4
  %add2536 = add nsw i32 %1087, %sub2535
  store i32 %add2536, i32* %total_count_delta, align 4
  br label %next_iteration

next_iteration:                                   ; preds = %if.end2534, %if.then2522
  br label %while.cond474

while.end2537:                                    ; preds = %while.cond474
  %1088 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2538 = getelementptr inbounds %struct.regnode, %struct.regnode* %1088, i32 0, i32 1
  %1089 = load i8, i8* %type2538, align 1
  %conv2539 = zext i8 %1089 to i32
  %cmp2540 = icmp eq i32 %conv2539, 34
  br i1 %cmp2540, label %if.then2542, label %if.end2557

if.then2542:                                      ; preds = %while.end2537
  %1090 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %1091 = bitcast %struct.regnode* %1090 to %struct.regnode_string*
  %string2543 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1091, i32 0, i32 3
  %arraydecay2544 = getelementptr inbounds [1 x i8], [1 x i8]* %string2543, i64 0, i64 0
  %1092 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %1093 = bitcast %struct.regnode* %1092 to %struct.regnode_string*
  %string2545 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1093, i32 0, i32 3
  %arraydecay2546 = getelementptr inbounds [1 x i8], [1 x i8]* %string2545, i64 0, i64 0
  %1094 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %1095 = bitcast %struct.regnode* %1094 to %struct.regnode_string*
  %str_len2547 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1095, i32 0, i32 0
  %1096 = load i8, i8* %str_len2547, align 2
  %conv2548 = zext i8 %1096 to i32
  %idx.ext2549 = sext i32 %conv2548 to i64
  %add.ptr2550 = getelementptr inbounds i8, i8* %arraydecay2546, i64 %idx.ext2549
  %call2551 = call i64 @Perl_utf8_length(i8* %arraydecay2544, i8* %add.ptr2550)
  %conv2552 = trunc i64 %call2551 to i32
  store i32 %conv2552, i32* %total_chars, align 4
  %1097 = load i32, i32* %total_count_delta, align 4
  %1098 = load i32, i32* %total_chars, align 4
  %cmp2553 = icmp sgt i32 %1097, %1098
  br i1 %cmp2553, label %if.then2555, label %if.end2556

if.then2555:                                      ; preds = %if.then2542
  %1099 = load i32, i32* %total_chars, align 4
  store i32 %1099, i32* %total_count_delta, align 4
  br label %if.end2556

if.end2556:                                       ; preds = %if.then2555, %if.then2542
  br label %if.end2557

if.end2557:                                       ; preds = %if.end2556, %while.end2537
  %1100 = load i32, i32* %total_count_delta, align 4
  %conv2558 = sext i32 %1100 to i64
  %1101 = load i64*, i64** %min_subtract.addr, align 8
  %1102 = load i64, i64* %1101, align 8
  %add2559 = add i64 %1102, %conv2558
  store i64 %add2559, i64* %1101, align 8
  %1103 = load i8*, i8** %folded, align 8
  call void @Perl_safesysfree(i8* %1103)
  br label %if.end2781

if.else2560:                                      ; preds = %cond.false, %cond.true
  %1104 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2561 = getelementptr inbounds %struct.regnode, %struct.regnode* %1104, i32 0, i32 1
  %1105 = load i8, i8* %type2561, align 1
  %conv2562 = zext i8 %1105 to i32
  %cmp2563 = icmp eq i32 %conv2562, 36
  br i1 %cmp2563, label %if.then2565, label %if.else2578

if.then2565:                                      ; preds = %if.else2560
  br label %while.cond2566

while.cond2566:                                   ; preds = %if.end2575, %if.then2565
  %1106 = load i8*, i8** %s, align 8
  %1107 = load i8*, i8** %s_end, align 8
  %cmp2567 = icmp ult i8* %1106, %1107
  br i1 %cmp2567, label %while.body2569, label %while.end2577

while.body2569:                                   ; preds = %while.cond2566
  %1108 = load i8*, i8** %s, align 8
  %1109 = load i8, i8* %1108, align 1
  %conv2570 = zext i8 %1109 to i32
  %cmp2571 = icmp eq i32 %conv2570, 223
  br i1 %cmp2571, label %if.then2573, label %if.end2575

if.then2573:                                      ; preds = %while.body2569
  %1110 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2574 = getelementptr inbounds %struct.regnode, %struct.regnode* %1110, i32 0, i32 1
  store i8 39, i8* %type2574, align 1
  %1111 = load i8*, i8** %unfolded_multi_char.addr, align 8
  store i8 1, i8* %1111, align 1
  br label %while.end2577

if.end2575:                                       ; preds = %while.body2569
  %1112 = load i8*, i8** %s, align 8
  %incdec.ptr2576 = getelementptr inbounds i8, i8* %1112, i32 1
  store i8* %incdec.ptr2576, i8** %s, align 8
  br label %while.cond2566

while.end2577:                                    ; preds = %if.then2573, %while.cond2566
  br label %if.end2780

if.else2578:                                      ; preds = %if.else2560
  %1113 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2579 = getelementptr inbounds %struct.regnode, %struct.regnode* %1113, i32 0, i32 1
  %1114 = load i8, i8* %type2579, align 1
  %conv2580 = zext i8 %1114 to i32
  %cmp2581 = icmp eq i32 %conv2580, 33
  br i1 %cmp2581, label %cond.true2588, label %lor.lhs.false2583

lor.lhs.false2583:                                ; preds = %if.else2578
  %1115 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2584 = getelementptr inbounds %struct.regnode, %struct.regnode* %1115, i32 0, i32 1
  %1116 = load i8, i8* %type2584, align 1
  %conv2585 = zext i8 %1116 to i32
  %cmp2586 = icmp eq i32 %conv2585, 34
  br i1 %cmp2586, label %cond.true2588, label %cond.false2589

cond.true2588:                                    ; preds = %lor.lhs.false2583, %if.else2578
  %1117 = load i8*, i8** %s_end, align 8
  br label %cond.end2591

cond.false2589:                                   ; preds = %lor.lhs.false2583
  %1118 = load i8*, i8** %s_end, align 8
  %add.ptr2590 = getelementptr inbounds i8, i8* %1118, i64 -1
  br label %cond.end2591

cond.end2591:                                     ; preds = %cond.false2589, %cond.true2588
  %cond2592 = phi i8* [ %1117, %cond.true2588 ], [ %add.ptr2590, %cond.false2589 ]
  store i8* %cond2592, i8** %upper, align 8
  br label %while.cond2593

while.cond2593:                                   ; preds = %if.end2773, %if.end2744, %cond.end2591
  %1119 = load i8*, i8** %s, align 8
  %1120 = load i8*, i8** %upper, align 8
  %cmp2594 = icmp ult i8* %1119, %1120
  br i1 %cmp2594, label %while.body2596, label %while.end2779

while.body2596:                                   ; preds = %while.cond2593
  %1121 = load i8*, i8** %s_end, align 8
  %1122 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast2598 = ptrtoint i8* %1121 to i64
  %sub.ptr.rhs.cast2599 = ptrtoint i8* %1122 to i64
  %sub.ptr.sub2600 = sub i64 %sub.ptr.lhs.cast2598, %sub.ptr.rhs.cast2599
  %cmp2601 = icmp sgt i64 %sub.ptr.sub2600, 2
  br i1 %cmp2601, label %cond.true2603, label %cond.false2668

cond.true2603:                                    ; preds = %while.body2596
  %1123 = load i8*, i8** %s, align 8
  %arrayidx2604 = getelementptr inbounds i8, i8* %1123, i64 0
  %1124 = load i8, i8* %arrayidx2604, align 1
  %conv2605 = zext i8 %1124 to i32
  %and2606 = and i32 %conv2605, 223
  %cmp2607 = icmp eq i32 %and2606, 70
  br i1 %cmp2607, label %cond.true2609, label %cond.false2645

cond.true2609:                                    ; preds = %cond.true2603
  %1125 = load i8*, i8** %s, align 8
  %arrayidx2610 = getelementptr inbounds i8, i8* %1125, i64 1
  %1126 = load i8, i8* %arrayidx2610, align 1
  %conv2611 = zext i8 %1126 to i32
  %and2612 = and i32 %conv2611, 223
  %cmp2613 = icmp eq i32 %and2612, 70
  br i1 %cmp2613, label %cond.true2615, label %cond.false2629

cond.true2615:                                    ; preds = %cond.true2609
  %1127 = load i8*, i8** %s, align 8
  %arrayidx2616 = getelementptr inbounds i8, i8* %1127, i64 2
  %1128 = load i8, i8* %arrayidx2616, align 1
  %conv2617 = zext i8 %1128 to i32
  %and2618 = and i32 %conv2617, 223
  %cmp2619 = icmp eq i32 %and2618, 73
  br i1 %cmp2619, label %lor.end2627, label %lor.rhs2621

lor.rhs2621:                                      ; preds = %cond.true2615
  %1129 = load i8*, i8** %s, align 8
  %arrayidx2622 = getelementptr inbounds i8, i8* %1129, i64 2
  %1130 = load i8, i8* %arrayidx2622, align 1
  %conv2623 = zext i8 %1130 to i32
  %and2624 = and i32 %conv2623, 223
  %cmp2625 = icmp eq i32 %and2624, 76
  br label %lor.end2627

lor.end2627:                                      ; preds = %lor.rhs2621, %cond.true2615
  %1131 = phi i1 [ true, %cond.true2615 ], [ %cmp2625, %lor.rhs2621 ]
  %1132 = zext i1 %1131 to i64
  %cond2628 = select i1 %1131, i32 3, i32 2
  br label %cond.end2643

cond.false2629:                                   ; preds = %cond.true2609
  %1133 = load i8*, i8** %s, align 8
  %arrayidx2630 = getelementptr inbounds i8, i8* %1133, i64 1
  %1134 = load i8, i8* %arrayidx2630, align 1
  %conv2631 = zext i8 %1134 to i32
  %and2632 = and i32 %conv2631, 223
  %cmp2633 = icmp eq i32 %and2632, 73
  br i1 %cmp2633, label %lor.end2641, label %lor.rhs2635

lor.rhs2635:                                      ; preds = %cond.false2629
  %1135 = load i8*, i8** %s, align 8
  %arrayidx2636 = getelementptr inbounds i8, i8* %1135, i64 1
  %1136 = load i8, i8* %arrayidx2636, align 1
  %conv2637 = zext i8 %1136 to i32
  %and2638 = and i32 %conv2637, 223
  %cmp2639 = icmp eq i32 %and2638, 76
  br label %lor.end2641

lor.end2641:                                      ; preds = %lor.rhs2635, %cond.false2629
  %1137 = phi i1 [ true, %cond.false2629 ], [ %cmp2639, %lor.rhs2635 ]
  %1138 = zext i1 %1137 to i64
  %cond2642 = select i1 %1137, i32 2, i32 0
  br label %cond.end2643

cond.end2643:                                     ; preds = %lor.end2641, %lor.end2627
  %cond2644 = phi i32 [ %cond2628, %lor.end2627 ], [ %cond2642, %lor.end2641 ]
  br label %cond.end2666

cond.false2645:                                   ; preds = %cond.true2603
  %1139 = load i8*, i8** %s, align 8
  %arrayidx2646 = getelementptr inbounds i8, i8* %1139, i64 0
  %1140 = load i8, i8* %arrayidx2646, align 1
  %conv2647 = zext i8 %1140 to i32
  %and2648 = and i32 %conv2647, 223
  %cmp2649 = icmp eq i32 %and2648, 83
  br i1 %cmp2649, label %land.rhs2651, label %land.end2664

land.rhs2651:                                     ; preds = %cond.false2645
  %1141 = load i8*, i8** %s, align 8
  %arrayidx2652 = getelementptr inbounds i8, i8* %1141, i64 1
  %1142 = load i8, i8* %arrayidx2652, align 1
  %conv2653 = zext i8 %1142 to i32
  %and2654 = and i32 %conv2653, 223
  %cmp2655 = icmp eq i32 %and2654, 83
  br i1 %cmp2655, label %lor.end2663, label %lor.rhs2657

lor.rhs2657:                                      ; preds = %land.rhs2651
  %1143 = load i8*, i8** %s, align 8
  %arrayidx2658 = getelementptr inbounds i8, i8* %1143, i64 1
  %1144 = load i8, i8* %arrayidx2658, align 1
  %conv2659 = zext i8 %1144 to i32
  %and2660 = and i32 %conv2659, 223
  %cmp2661 = icmp eq i32 %and2660, 84
  br label %lor.end2663

lor.end2663:                                      ; preds = %lor.rhs2657, %land.rhs2651
  %1145 = phi i1 [ true, %land.rhs2651 ], [ %cmp2661, %lor.rhs2657 ]
  br label %land.end2664

land.end2664:                                     ; preds = %lor.end2663, %cond.false2645
  %1146 = phi i1 [ false, %cond.false2645 ], [ %1145, %lor.end2663 ]
  %1147 = zext i1 %1146 to i64
  %cond2665 = select i1 %1146, i32 2, i32 0
  br label %cond.end2666

cond.end2666:                                     ; preds = %land.end2664, %cond.end2643
  %cond2667 = phi i32 [ %cond2644, %cond.end2643 ], [ %cond2665, %land.end2664 ]
  br label %cond.end2726

cond.false2668:                                   ; preds = %while.body2596
  %1148 = load i8*, i8** %s_end, align 8
  %1149 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast2669 = ptrtoint i8* %1148 to i64
  %sub.ptr.rhs.cast2670 = ptrtoint i8* %1149 to i64
  %sub.ptr.sub2671 = sub i64 %sub.ptr.lhs.cast2669, %sub.ptr.rhs.cast2670
  %cmp2672 = icmp sgt i64 %sub.ptr.sub2671, 1
  br i1 %cmp2672, label %cond.true2674, label %cond.false2723

cond.true2674:                                    ; preds = %cond.false2668
  %1150 = load i8*, i8** %s, align 8
  %arrayidx2675 = getelementptr inbounds i8, i8* %1150, i64 0
  %1151 = load i8, i8* %arrayidx2675, align 1
  %conv2676 = zext i8 %1151 to i32
  %and2677 = and i32 %conv2676, 223
  %cmp2678 = icmp eq i32 %and2677, 70
  br i1 %cmp2678, label %cond.true2680, label %cond.false2700

cond.true2680:                                    ; preds = %cond.true2674
  %1152 = load i8*, i8** %s, align 8
  %arrayidx2681 = getelementptr inbounds i8, i8* %1152, i64 1
  %1153 = load i8, i8* %arrayidx2681, align 1
  %conv2682 = zext i8 %1153 to i32
  %and2683 = and i32 %conv2682, 223
  %cmp2684 = icmp eq i32 %and2683, 70
  br i1 %cmp2684, label %lor.end2698, label %lor.lhs.false2686

lor.lhs.false2686:                                ; preds = %cond.true2680
  %1154 = load i8*, i8** %s, align 8
  %arrayidx2687 = getelementptr inbounds i8, i8* %1154, i64 1
  %1155 = load i8, i8* %arrayidx2687, align 1
  %conv2688 = zext i8 %1155 to i32
  %and2689 = and i32 %conv2688, 223
  %cmp2690 = icmp eq i32 %and2689, 73
  br i1 %cmp2690, label %lor.end2698, label %lor.rhs2692

lor.rhs2692:                                      ; preds = %lor.lhs.false2686
  %1156 = load i8*, i8** %s, align 8
  %arrayidx2693 = getelementptr inbounds i8, i8* %1156, i64 1
  %1157 = load i8, i8* %arrayidx2693, align 1
  %conv2694 = zext i8 %1157 to i32
  %and2695 = and i32 %conv2694, 223
  %cmp2696 = icmp eq i32 %and2695, 76
  br label %lor.end2698

lor.end2698:                                      ; preds = %lor.rhs2692, %lor.lhs.false2686, %cond.true2680
  %1158 = phi i1 [ true, %lor.lhs.false2686 ], [ true, %cond.true2680 ], [ %cmp2696, %lor.rhs2692 ]
  %1159 = zext i1 %1158 to i64
  %cond2699 = select i1 %1158, i32 2, i32 0
  br label %cond.end2721

cond.false2700:                                   ; preds = %cond.true2674
  %1160 = load i8*, i8** %s, align 8
  %arrayidx2701 = getelementptr inbounds i8, i8* %1160, i64 0
  %1161 = load i8, i8* %arrayidx2701, align 1
  %conv2702 = zext i8 %1161 to i32
  %and2703 = and i32 %conv2702, 223
  %cmp2704 = icmp eq i32 %and2703, 83
  br i1 %cmp2704, label %land.rhs2706, label %land.end2719

land.rhs2706:                                     ; preds = %cond.false2700
  %1162 = load i8*, i8** %s, align 8
  %arrayidx2707 = getelementptr inbounds i8, i8* %1162, i64 1
  %1163 = load i8, i8* %arrayidx2707, align 1
  %conv2708 = zext i8 %1163 to i32
  %and2709 = and i32 %conv2708, 223
  %cmp2710 = icmp eq i32 %and2709, 83
  br i1 %cmp2710, label %lor.end2718, label %lor.rhs2712

lor.rhs2712:                                      ; preds = %land.rhs2706
  %1164 = load i8*, i8** %s, align 8
  %arrayidx2713 = getelementptr inbounds i8, i8* %1164, i64 1
  %1165 = load i8, i8* %arrayidx2713, align 1
  %conv2714 = zext i8 %1165 to i32
  %and2715 = and i32 %conv2714, 223
  %cmp2716 = icmp eq i32 %and2715, 84
  br label %lor.end2718

lor.end2718:                                      ; preds = %lor.rhs2712, %land.rhs2706
  %1166 = phi i1 [ true, %land.rhs2706 ], [ %cmp2716, %lor.rhs2712 ]
  br label %land.end2719

land.end2719:                                     ; preds = %lor.end2718, %cond.false2700
  %1167 = phi i1 [ false, %cond.false2700 ], [ %1166, %lor.end2718 ]
  %1168 = zext i1 %1167 to i64
  %cond2720 = select i1 %1167, i32 2, i32 0
  br label %cond.end2721

cond.end2721:                                     ; preds = %land.end2719, %lor.end2698
  %cond2722 = phi i32 [ %cond2699, %lor.end2698 ], [ %cond2720, %land.end2719 ]
  br label %cond.end2724

cond.false2723:                                   ; preds = %cond.false2668
  br label %cond.end2724

cond.end2724:                                     ; preds = %cond.false2723, %cond.end2721
  %cond2725 = phi i32 [ %cond2722, %cond.end2721 ], [ 0, %cond.false2723 ]
  br label %cond.end2726

cond.end2726:                                     ; preds = %cond.end2724, %cond.end2666
  %cond2727 = phi i32 [ %cond2667, %cond.end2666 ], [ %cond2725, %cond.end2724 ]
  store i32 %cond2727, i32* %len2597, align 4
  %1169 = load i32, i32* %len2597, align 4
  %tobool2728 = icmp ne i32 %1169, 0
  br i1 %tobool2728, label %if.end2746, label %if.then2729

if.then2729:                                      ; preds = %cond.end2726
  %1170 = load i8*, i8** %s, align 8
  %1171 = load i8, i8* %1170, align 1
  %conv2730 = zext i8 %1171 to i32
  %cmp2731 = icmp eq i32 %conv2730, 223
  br i1 %cmp2731, label %land.lhs.true2733, label %if.end2744

land.lhs.true2733:                                ; preds = %if.then2729
  %1172 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2734 = getelementptr inbounds %struct.regnode, %struct.regnode* %1172, i32 0, i32 1
  %1173 = load i8, i8* %type2734, align 1
  %conv2735 = zext i8 %1173 to i32
  %cmp2736 = icmp eq i32 %conv2735, 33
  br i1 %cmp2736, label %if.then2743, label %lor.lhs.false2738

lor.lhs.false2738:                                ; preds = %land.lhs.true2733
  %1174 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2739 = getelementptr inbounds %struct.regnode, %struct.regnode* %1174, i32 0, i32 1
  %1175 = load i8, i8* %type2739, align 1
  %conv2740 = zext i8 %1175 to i32
  %cmp2741 = icmp eq i32 %conv2740, 34
  br i1 %cmp2741, label %if.then2743, label %if.end2744

if.then2743:                                      ; preds = %lor.lhs.false2738, %land.lhs.true2733
  %1176 = load i8*, i8** %unfolded_multi_char.addr, align 8
  store i8 1, i8* %1176, align 1
  br label %if.end2744

if.end2744:                                       ; preds = %if.then2743, %lor.lhs.false2738, %if.then2729
  %1177 = load i8*, i8** %s, align 8
  %incdec.ptr2745 = getelementptr inbounds i8, i8* %1177, i32 1
  store i8* %incdec.ptr2745, i8** %s, align 8
  br label %while.cond2593

if.end2746:                                       ; preds = %cond.end2726
  %1178 = load i32, i32* %len2597, align 4
  %cmp2747 = icmp eq i32 %1178, 2
  br i1 %cmp2747, label %land.lhs.true2749, label %if.end2773

land.lhs.true2749:                                ; preds = %if.end2746
  %1179 = load i8*, i8** %s, align 8
  %1180 = load i8, i8* %1179, align 1
  %conv2750 = zext i8 %1180 to i32
  %and2751 = and i32 %conv2750, -33
  %cmp2752 = icmp eq i32 %and2751, 83
  br i1 %cmp2752, label %land.lhs.true2754, label %if.end2773

land.lhs.true2754:                                ; preds = %land.lhs.true2749
  %1181 = load i8*, i8** %s, align 8
  %add.ptr2755 = getelementptr inbounds i8, i8* %1181, i64 1
  %1182 = load i8, i8* %add.ptr2755, align 1
  %conv2756 = zext i8 %1182 to i32
  %and2757 = and i32 %conv2756, -33
  %cmp2758 = icmp eq i32 %and2757, 83
  br i1 %cmp2758, label %if.then2760, label %if.end2773

if.then2760:                                      ; preds = %land.lhs.true2754
  %1183 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2761 = getelementptr inbounds %struct.regnode, %struct.regnode* %1183, i32 0, i32 1
  %1184 = load i8, i8* %type2761, align 1
  %conv2762 = zext i8 %1184 to i32
  %cmp2763 = icmp ne i32 %conv2762, 33
  br i1 %cmp2763, label %land.lhs.true2765, label %if.end2772

land.lhs.true2765:                                ; preds = %if.then2760
  %1185 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2766 = getelementptr inbounds %struct.regnode, %struct.regnode* %1185, i32 0, i32 1
  %1186 = load i8, i8* %type2766, align 1
  %conv2767 = zext i8 %1186 to i32
  %cmp2768 = icmp ne i32 %conv2767, 34
  br i1 %cmp2768, label %if.then2770, label %if.end2772

if.then2770:                                      ; preds = %land.lhs.true2765
  %1187 = load %struct.regnode*, %struct.regnode** %scan.addr, align 8
  %type2771 = getelementptr inbounds %struct.regnode, %struct.regnode* %1187, i32 0, i32 1
  store i8 37, i8* %type2771, align 1
  br label %if.end2772

if.end2772:                                       ; preds = %if.then2770, %land.lhs.true2765, %if.then2760
  br label %if.end2773

if.end2773:                                       ; preds = %if.end2772, %land.lhs.true2754, %land.lhs.true2749, %if.end2746
  %1188 = load i32, i32* %len2597, align 4
  %sub2774 = sub nsw i32 %1188, 1
  %conv2775 = sext i32 %sub2774 to i64
  %1189 = load i64*, i64** %min_subtract.addr, align 8
  %1190 = load i64, i64* %1189, align 8
  %add2776 = add i64 %1190, %conv2775
  store i64 %add2776, i64* %1189, align 8
  %1191 = load i32, i32* %len2597, align 4
  %1192 = load i8*, i8** %s, align 8
  %idx.ext2777 = sext i32 %1191 to i64
  %add.ptr2778 = getelementptr inbounds i8, i8* %1192, i64 %idx.ext2777
  store i8* %add.ptr2778, i8** %s, align 8
  br label %while.cond2593

while.end2779:                                    ; preds = %while.cond2593
  br label %if.end2780

if.end2780:                                       ; preds = %while.end2779, %while.end2577
  br label %if.end2781

if.end2781:                                       ; preds = %if.end2780, %if.end2557
  br label %if.end2782

if.end2782:                                       ; preds = %if.end2781, %land.lhs.true89, %while.end
  %1193 = load i32, i32* %stopnow, align 4
  ret i32 %1193
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_ssc_or(%struct.RExC_state_t* %pRExC_state, %struct.regnode_ssc* %ssc, %struct.regnode_charclass* %or_with) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %ssc.addr = alloca %struct.regnode_ssc*, align 8
  %or_with.addr = alloca %struct.regnode_charclass*, align 8
  %ored_cp_list = alloca %struct.sv*, align 8
  %ored_flags = alloca i8, align 1
  %i = alloca i32, align 4
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode_ssc* %ssc, %struct.regnode_ssc** %ssc.addr, align 8
  store %struct.regnode_charclass* %or_with, %struct.regnode_charclass** %or_with.addr, align 8
  %0 = load %struct.regnode_charclass*, %struct.regnode_charclass** %or_with.addr, align 8
  %type = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %0, i32 0, i32 1
  %1 = load i8, i8* %type, align 1
  %conv = zext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 19
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.regnode_charclass*, %struct.regnode_charclass** %or_with.addr, align 8
  %next_off = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %2, i32 0, i32 2
  %3 = load i16, i16* %next_off, align 2
  %conv2 = zext i16 %3 to i32
  %cmp3 = icmp eq i32 %conv2, 1
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.regnode_charclass*, %struct.regnode_charclass** %or_with.addr, align 8
  %5 = bitcast %struct.regnode_charclass* %4 to %struct.regnode_ssc*
  %invlist = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %5, i32 0, i32 6
  %6 = load %struct.sv*, %struct.sv** %invlist, align 8
  store %struct.sv* %6, %struct.sv** %ored_cp_list, align 8
  %7 = load %struct.regnode_charclass*, %struct.regnode_charclass** %or_with.addr, align 8
  %flags = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %7, i32 0, i32 0
  %8 = load i8, i8* %flags, align 4
  store i8 %8, i8* %ored_flags, align 1
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %9 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %10 = load %struct.regnode_charclass*, %struct.regnode_charclass** %or_with.addr, align 8
  %call = call %struct.sv* @S_get_ANYOF_cp_list_for_ssc(%struct.RExC_state_t* %9, %struct.regnode_charclass* %10)
  store %struct.sv* %call, %struct.sv** %ored_cp_list, align 8
  %11 = load %struct.regnode_charclass*, %struct.regnode_charclass** %or_with.addr, align 8
  %flags5 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %11, i32 0, i32 0
  %12 = load i8, i8* %flags5, align 4
  %conv6 = zext i8 %12 to i32
  %and = and i32 %conv6, 18
  %conv7 = trunc i32 %and to i8
  store i8 %conv7, i8* %ored_flags, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %13 = load i8, i8* %ored_flags, align 1
  %conv8 = zext i8 %13 to i32
  %14 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %flags9 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %14, i32 0, i32 0
  %15 = load i8, i8* %flags9, align 8
  %conv10 = zext i8 %15 to i32
  %or = or i32 %conv10, %conv8
  %conv11 = trunc i32 %or to i8
  store i8 %conv11, i8* %flags9, align 8
  %16 = load %struct.regnode_charclass*, %struct.regnode_charclass** %or_with.addr, align 8
  %flags12 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %16, i32 0, i32 0
  %17 = load i8, i8* %flags12, align 4
  %conv13 = zext i8 %17 to i32
  %and14 = and i32 %conv13, 1
  %tobool = icmp ne i32 %and14, 0
  br i1 %tobool, label %land.lhs.true15, label %if.else26

land.lhs.true15:                                  ; preds = %if.end
  %18 = load %struct.regnode_charclass*, %struct.regnode_charclass** %or_with.addr, align 8
  %type16 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %18, i32 0, i32 1
  %19 = load i8, i8* %type16, align 1
  %conv17 = zext i8 %19 to i32
  %cmp18 = icmp eq i32 %conv17, 19
  br i1 %cmp18, label %land.lhs.true20, label %if.then25

land.lhs.true20:                                  ; preds = %land.lhs.true15
  %20 = load %struct.regnode_charclass*, %struct.regnode_charclass** %or_with.addr, align 8
  %next_off21 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %20, i32 0, i32 2
  %21 = load i16, i16* %next_off21, align 2
  %conv22 = zext i16 %21 to i32
  %cmp23 = icmp eq i32 %conv22, 1
  br i1 %cmp23, label %if.else26, label %if.then25

if.then25:                                        ; preds = %land.lhs.true20, %land.lhs.true15
  br label %if.end60

if.else26:                                        ; preds = %land.lhs.true20, %if.end
  %22 = load %struct.regnode_charclass*, %struct.regnode_charclass** %or_with.addr, align 8
  %flags27 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %22, i32 0, i32 0
  %23 = load i8, i8* %flags27, align 4
  %conv28 = zext i8 %23 to i32
  %and29 = and i32 %conv28, 8
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %if.then31, label %if.end59

if.then31:                                        ; preds = %if.else26
  br label %do.body

do.body:                                          ; preds = %if.then31
  %24 = load %struct.regnode_charclass*, %struct.regnode_charclass** %or_with.addr, align 8
  %25 = bitcast %struct.regnode_charclass* %24 to %struct.regnode_charclass_class*
  %classflags = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %25, i32 0, i32 5
  %26 = load i32, i32* %classflags, align 4
  %27 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %classflags32 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %27, i32 0, i32 5
  %28 = load i32, i32* %classflags32, align 8
  %or33 = or i32 %28, %26
  store i32 %or33, i32* %classflags32, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %29 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %classflags34 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %29, i32 0, i32 5
  %30 = load i32, i32* %classflags34, align 8
  %tobool35 = icmp ne i32 %30, 0
  br i1 %tobool35, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  br i1 true, label %if.then36, label %if.end58

cond.false:                                       ; preds = %do.end
  br i1 false, label %if.then36, label %if.end58

if.then36:                                        ; preds = %cond.false, %cond.true
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then36
  %31 = load i32, i32* %i, align 4
  %cmp37 = icmp ult i32 %31, 30
  br i1 %cmp37, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %32 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %33 = bitcast %struct.regnode_ssc* %32 to %struct.regnode_charclass_class*
  %classflags39 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %33, i32 0, i32 5
  %34 = load i32, i32* %classflags39, align 4
  %35 = load i32, i32* %i, align 4
  %shl = shl i32 1, %35
  %and40 = and i32 %34, %shl
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %land.lhs.true42, label %if.end56

land.lhs.true42:                                  ; preds = %for.body
  %36 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %37 = bitcast %struct.regnode_ssc* %36 to %struct.regnode_charclass_class*
  %classflags43 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %37, i32 0, i32 5
  %38 = load i32, i32* %classflags43, align 4
  %39 = load i32, i32* %i, align 4
  %add = add i32 %39, 1
  %shl44 = shl i32 1, %add
  %and45 = and i32 %38, %shl44
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %if.then47, label %if.end56

if.then47:                                        ; preds = %land.lhs.true42
  %40 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  call void @S_ssc_add_range(%struct.regnode_ssc* %40, i64 0, i64 -1)
  %41 = load i32, i32* %i, align 4
  %shl48 = shl i32 1, %41
  %neg = xor i32 %shl48, -1
  %42 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %43 = bitcast %struct.regnode_ssc* %42 to %struct.regnode_charclass_class*
  %classflags49 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %43, i32 0, i32 5
  %44 = load i32, i32* %classflags49, align 4
  %and50 = and i32 %44, %neg
  store i32 %and50, i32* %classflags49, align 4
  %45 = load i32, i32* %i, align 4
  %add51 = add i32 %45, 1
  %shl52 = shl i32 1, %add51
  %neg53 = xor i32 %shl52, -1
  %46 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %47 = bitcast %struct.regnode_ssc* %46 to %struct.regnode_charclass_class*
  %classflags54 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %47, i32 0, i32 5
  %48 = load i32, i32* %classflags54, align 4
  %and55 = and i32 %48, %neg53
  store i32 %and55, i32* %classflags54, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.then47, %land.lhs.true42, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end56
  %49 = load i32, i32* %i, align 4
  %add57 = add i32 %49, 2
  store i32 %add57, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end58

if.end58:                                         ; preds = %for.end, %cond.false, %cond.true
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.else26
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then25
  %50 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %51 = load %struct.sv*, %struct.sv** %ored_cp_list, align 8
  call void @S_ssc_union(%struct.regnode_ssc* %50, %struct.sv* %51, i1 zeroext false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_ssc_and(%struct.RExC_state_t* %pRExC_state, %struct.regnode_ssc* %ssc, %struct.regnode_charclass* %and_with) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %ssc.addr = alloca %struct.regnode_ssc*, align 8
  %and_with.addr = alloca %struct.regnode_charclass*, align 8
  %anded_cp_list = alloca %struct.sv*, align 8
  %anded_flags = alloca i8, align 1
  %i = alloca i32, align 4
  %temp = alloca %struct.regnode_charclass_class, align 4
  %add = alloca i32, align 4
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode_ssc* %ssc, %struct.regnode_ssc** %ssc.addr, align 8
  store %struct.regnode_charclass* %and_with, %struct.regnode_charclass** %and_with.addr, align 8
  %0 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %type = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %0, i32 0, i32 1
  %1 = load i8, i8* %type, align 1
  %conv = zext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 19
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %next_off = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %2, i32 0, i32 2
  %3 = load i16, i16* %next_off, align 2
  %conv2 = zext i16 %3 to i32
  %cmp3 = icmp eq i32 %conv2, 1
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %5 = bitcast %struct.regnode_charclass* %4 to %struct.regnode_ssc*
  %invlist = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %5, i32 0, i32 6
  %6 = load %struct.sv*, %struct.sv** %invlist, align 8
  store %struct.sv* %6, %struct.sv** %anded_cp_list, align 8
  %7 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %flags = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %7, i32 0, i32 0
  %8 = load i8, i8* %flags, align 4
  store i8 %8, i8* %anded_flags, align 1
  %9 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %10 = bitcast %struct.regnode_charclass* %9 to %struct.regnode_ssc*
  %call = call i32 @S_ssc_is_anything(%struct.regnode_ssc* %10)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.then
  %11 = load i8, i8* %anded_flags, align 1
  %conv6 = zext i8 %11 to i32
  %or = or i32 %conv6, 16
  %conv7 = trunc i32 %or to i8
  store i8 %conv7, i8* %anded_flags, align 1
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.then
  br label %if.end12

if.else:                                          ; preds = %land.lhs.true, %entry
  %12 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %13 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %call8 = call %struct.sv* @S_get_ANYOF_cp_list_for_ssc(%struct.RExC_state_t* %12, %struct.regnode_charclass* %13)
  store %struct.sv* %call8, %struct.sv** %anded_cp_list, align 8
  %14 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %flags9 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %14, i32 0, i32 0
  %15 = load i8, i8* %flags9, align 4
  %conv10 = zext i8 %15 to i32
  %and = and i32 %conv10, 18
  %conv11 = trunc i32 %and to i8
  store i8 %conv11, i8* %anded_flags, align 1
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.end
  %16 = load i8, i8* %anded_flags, align 1
  %conv13 = zext i8 %16 to i32
  %17 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %flags14 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %17, i32 0, i32 0
  %18 = load i8, i8* %flags14, align 8
  %conv15 = zext i8 %18 to i32
  %and16 = and i32 %conv15, %conv13
  %conv17 = trunc i32 %and16 to i8
  store i8 %conv17, i8* %flags14, align 8
  %19 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %flags18 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %19, i32 0, i32 0
  %20 = load i8, i8* %flags18, align 4
  %conv19 = zext i8 %20 to i32
  %and20 = and i32 %conv19, 1
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %land.lhs.true22, label %if.else63

land.lhs.true22:                                  ; preds = %if.end12
  %21 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %type23 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %21, i32 0, i32 1
  %22 = load i8, i8* %type23, align 1
  %conv24 = zext i8 %22 to i32
  %cmp25 = icmp eq i32 %conv24, 19
  br i1 %cmp25, label %land.lhs.true27, label %if.then32

land.lhs.true27:                                  ; preds = %land.lhs.true22
  %23 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %next_off28 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %23, i32 0, i32 2
  %24 = load i16, i16* %next_off28, align 2
  %conv29 = zext i16 %24 to i32
  %cmp30 = icmp eq i32 %conv29, 1
  br i1 %cmp30, label %if.else63, label %if.then32

if.then32:                                        ; preds = %land.lhs.true27, %land.lhs.true22
  %25 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %26 = load %struct.sv*, %struct.sv** %anded_cp_list, align 8
  call void @S_ssc_intersection(%struct.regnode_ssc* %25, %struct.sv* %26, i1 zeroext false)
  %27 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %flags33 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %27, i32 0, i32 0
  %28 = load i8, i8* %flags33, align 4
  %conv34 = zext i8 %28 to i32
  %and35 = and i32 %conv34, 8
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %if.else38, label %if.then37

if.then37:                                        ; preds = %if.then32
  br label %do.body

do.body:                                          ; preds = %if.then37
  %29 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %30 = bitcast %struct.regnode_ssc* %29 to %struct.regnode_charclass_class*
  %classflags = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %30, i32 0, i32 5
  store i32 0, i32* %classflags, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end62

if.else38:                                        ; preds = %if.then32
  %31 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %classflags39 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %31, i32 0, i32 5
  %32 = load i32, i32* %classflags39, align 8
  %tobool40 = icmp ne i32 %32, 0
  br i1 %tobool40, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else38
  br i1 true, label %if.then41, label %if.end61

cond.false:                                       ; preds = %if.else38
  br i1 false, label %if.then41, label %if.end61

if.then41:                                        ; preds = %cond.false, %cond.true
  store i32 1, i32* %add, align 4
  br label %do.body42

do.body42:                                        ; preds = %if.then41
  %classflags43 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %temp, i32 0, i32 5
  store i32 0, i32* %classflags43, align 4
  br label %do.end44

do.end44:                                         ; preds = %do.body42
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end44
  %33 = load i32, i32* %i, align 4
  %cmp45 = icmp ult i32 %33, 30
  br i1 %cmp45, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %34 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %35 = bitcast %struct.regnode_charclass* %34 to %struct.regnode_charclass_class*
  %classflags47 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %35, i32 0, i32 5
  %36 = load i32, i32* %classflags47, align 4
  %37 = load i32, i32* %i, align 4
  %shl = shl i32 1, %37
  %and48 = and i32 %36, %shl
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %if.then50, label %if.end55

if.then50:                                        ; preds = %for.body
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %add, align 4
  %add51 = add i32 %38, %39
  %shl52 = shl i32 1, %add51
  %classflags53 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %temp, i32 0, i32 5
  %40 = load i32, i32* %classflags53, align 4
  %or54 = or i32 %40, %shl52
  store i32 %or54, i32* %classflags53, align 4
  br label %if.end55

if.end55:                                         ; preds = %if.then50, %for.body
  %41 = load i32, i32* %add, align 4
  %sub = sub nsw i32 0, %41
  store i32 %sub, i32* %add, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end55
  %42 = load i32, i32* %i, align 4
  %inc = add i32 %42, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body56

do.body56:                                        ; preds = %for.end
  %classflags57 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %temp, i32 0, i32 5
  %43 = load i32, i32* %classflags57, align 4
  %44 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %classflags58 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %44, i32 0, i32 5
  %45 = load i32, i32* %classflags58, align 8
  %and59 = and i32 %45, %43
  store i32 %and59, i32* %classflags58, align 8
  br label %do.end60

do.end60:                                         ; preds = %do.body56
  br label %if.end61

if.end61:                                         ; preds = %do.end60, %cond.false, %cond.true
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %do.end
  br label %if.end132

if.else63:                                        ; preds = %land.lhs.true27, %if.end12
  %46 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %type64 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %46, i32 0, i32 1
  %47 = load i8, i8* %type64, align 1
  %conv65 = zext i8 %47 to i32
  %cmp66 = icmp eq i32 %conv65, 19
  br i1 %cmp66, label %land.lhs.true68, label %if.then75

land.lhs.true68:                                  ; preds = %if.else63
  %48 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %next_off69 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %48, i32 0, i32 2
  %49 = load i16, i16* %next_off69, align 2
  %conv70 = zext i16 %49 to i32
  %cmp71 = icmp eq i32 %conv70, 1
  br i1 %cmp71, label %lor.lhs.false, label %if.then75

lor.lhs.false:                                    ; preds = %land.lhs.true68
  %50 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %51 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %52 = bitcast %struct.regnode_charclass* %51 to %struct.regnode_ssc*
  %call73 = call i32 @S_ssc_is_cp_posixl_init(%struct.RExC_state_t* %50, %struct.regnode_ssc* %52)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.end131, label %if.then75

if.then75:                                        ; preds = %lor.lhs.false, %land.lhs.true68, %if.else63
  %53 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %54 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %call76 = call i32 @S_ssc_is_cp_posixl_init(%struct.RExC_state_t* %53, %struct.regnode_ssc* %54)
  %tobool77 = icmp ne i32 %call76, 0
  br i1 %tobool77, label %if.then78, label %if.else106

if.then78:                                        ; preds = %if.then75
  %55 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %type79 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %55, i32 0, i32 1
  %56 = load i8, i8* %type79, align 1
  %conv80 = zext i8 %56 to i32
  %cmp81 = icmp eq i32 %conv80, 19
  br i1 %cmp81, label %land.lhs.true83, label %if.else89

land.lhs.true83:                                  ; preds = %if.then78
  %57 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %next_off84 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %57, i32 0, i32 2
  %58 = load i16, i16* %next_off84, align 2
  %conv85 = zext i16 %58 to i32
  %cmp86 = icmp eq i32 %conv85, 1
  br i1 %cmp86, label %if.then88, label %if.else89

if.then88:                                        ; preds = %land.lhs.true83
  %59 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %60 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %61 = bitcast %struct.regnode_charclass* %60 to %struct.regnode_ssc*
  %62 = bitcast %struct.regnode_ssc* %59 to i8*
  %63 = bitcast %struct.regnode_ssc* %61 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 8 %63, i64 56, i1 false)
  br label %if.end105

if.else89:                                        ; preds = %land.lhs.true83, %if.then78
  %64 = load %struct.sv*, %struct.sv** %anded_cp_list, align 8
  %65 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist90 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %65, i32 0, i32 6
  store %struct.sv* %64, %struct.sv** %invlist90, align 8
  br label %do.body91

do.body91:                                        ; preds = %if.else89
  %66 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %67 = bitcast %struct.regnode_ssc* %66 to %struct.regnode_charclass_class*
  %classflags92 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %67, i32 0, i32 5
  store i32 0, i32* %classflags92, align 4
  br label %do.end93

do.end93:                                         ; preds = %do.body91
  %68 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %flags94 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %68, i32 0, i32 0
  %69 = load i8, i8* %flags94, align 4
  %conv95 = zext i8 %69 to i32
  %and96 = and i32 %conv95, 8
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %if.then98, label %if.end104

if.then98:                                        ; preds = %do.end93
  br label %do.body99

do.body99:                                        ; preds = %if.then98
  %70 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %71 = bitcast %struct.regnode_charclass* %70 to %struct.regnode_charclass_class*
  %classflags100 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %71, i32 0, i32 5
  %72 = load i32, i32* %classflags100, align 4
  %73 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %classflags101 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %73, i32 0, i32 5
  %74 = load i32, i32* %classflags101, align 8
  %or102 = or i32 %74, %72
  store i32 %or102, i32* %classflags101, align 8
  br label %do.end103

do.end103:                                        ; preds = %do.body99
  br label %if.end104

if.end104:                                        ; preds = %do.end103, %do.end93
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.then88
  br label %if.end130

if.else106:                                       ; preds = %if.then75
  %75 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %classflags107 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %75, i32 0, i32 5
  %76 = load i32, i32* %classflags107, align 8
  %tobool108 = icmp ne i32 %76, 0
  br i1 %tobool108, label %cond.true109, label %cond.false110

cond.true109:                                     ; preds = %if.else106
  br i1 true, label %if.then116, label %lor.lhs.false111

cond.false110:                                    ; preds = %if.else106
  br i1 false, label %if.then116, label %lor.lhs.false111

lor.lhs.false111:                                 ; preds = %cond.false110, %cond.true109
  %77 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %flags112 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %77, i32 0, i32 0
  %78 = load i8, i8* %flags112, align 4
  %conv113 = zext i8 %78 to i32
  %and114 = and i32 %conv113, 8
  %tobool115 = icmp ne i32 %and114, 0
  br i1 %tobool115, label %if.then116, label %if.else128

if.then116:                                       ; preds = %lor.lhs.false111, %cond.false110, %cond.true109
  %79 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %flags117 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %79, i32 0, i32 0
  %80 = load i8, i8* %flags117, align 4
  %conv118 = zext i8 %80 to i32
  %and119 = and i32 %conv118, 8
  %tobool120 = icmp ne i32 %and119, 0
  br i1 %tobool120, label %if.then121, label %if.end127

if.then121:                                       ; preds = %if.then116
  br label %do.body122

do.body122:                                       ; preds = %if.then121
  %81 = load %struct.regnode_charclass*, %struct.regnode_charclass** %and_with.addr, align 8
  %82 = bitcast %struct.regnode_charclass* %81 to %struct.regnode_charclass_class*
  %classflags123 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %82, i32 0, i32 5
  %83 = load i32, i32* %classflags123, align 4
  %84 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %classflags124 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %84, i32 0, i32 5
  %85 = load i32, i32* %classflags124, align 8
  %and125 = and i32 %85, %83
  store i32 %and125, i32* %classflags124, align 8
  br label %do.end126

do.end126:                                        ; preds = %do.body122
  br label %if.end127

if.end127:                                        ; preds = %do.end126, %if.then116
  %86 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %87 = load %struct.sv*, %struct.sv** %anded_cp_list, align 8
  call void @S_ssc_union(%struct.regnode_ssc* %86, %struct.sv* %87, i1 zeroext false)
  br label %if.end129

if.else128:                                       ; preds = %lor.lhs.false111
  %88 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %89 = load %struct.sv*, %struct.sv** %anded_cp_list, align 8
  call void @S_ssc_intersection(%struct.regnode_ssc* %88, %struct.sv* %89, i1 zeroext false)
  br label %if.end129

if.end129:                                        ; preds = %if.else128, %if.end127
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %if.end105
  br label %if.end131

if.end131:                                        ; preds = %if.end130, %lor.lhs.false
  br label %if.end132

if.end132:                                        ; preds = %if.end131, %if.end62
  ret void
}

declare dso_local %struct.sv* @Perl_get_sv(i8*, i32) #1

declare dso_local void @Perl_sv_setiv(%struct.sv*, i64) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_make_trie(%struct.RExC_state_t* %pRExC_state, %struct.regnode* %startbranch, %struct.regnode* %first, %struct.regnode* %last, %struct.regnode* %tail, i32 %word_count, i32 %flags, i32 %depth) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %startbranch.addr = alloca %struct.regnode*, align 8
  %first.addr = alloca %struct.regnode*, align 8
  %last.addr = alloca %struct.regnode*, align 8
  %tail.addr = alloca %struct.regnode*, align 8
  %word_count.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %trie = alloca %struct._reg_trie_data*, align 8
  %widecharmap = alloca %struct.hv*, align 8
  %revcharmap = alloca %struct.av*, align 8
  %cur = alloca %struct.regnode*, align 8
  %len = alloca i64, align 8
  %uvc = alloca i64, align 8
  %curword = alloca i16, align 2
  %next_alloc = alloca i32, align 4
  %jumper = alloca %struct.regnode*, align 8
  %nextbranch = alloca %struct.regnode*, align 8
  %convert = alloca %struct.regnode*, align 8
  %prev_states = alloca i32*, align 8
  %folder = alloca i8*, align 8
  %data_slot = alloca i32, align 4
  %trie_charcount = alloca i64, align 8
  %re_trie_maxbuff = alloca %struct.sv*, align 8
  %noper = alloca %struct.regnode*, align 8
  %uc = alloca i8*, align 8
  %e = alloca i8*, align 8
  %foldlen = alloca i32, align 4
  %wordlen = alloca i32, align 4
  %minchars = alloca i64, align 8
  %maxchars = alloca i64, align 8
  %set_bit = alloca i8, align 1
  %noper_next = alloca %struct.regnode*, align 8
  %folded = alloca i8, align 1
  %zlopp = alloca %struct.sv*, align 8
  %flrbbbbb = alloca i8*, align 8
  %kapow = alloca i8*, align 8
  %ooooff = alloca i8, align 1
  %zlopp2311 = alloca %struct.sv*, align 8
  %flrbbbbb2313 = alloca i8*, align 8
  %kapow2316 = alloca i8*, align 8
  %ooooff2330 = alloca i8, align 1
  %svpp = alloca %struct.sv**, align 8
  %zlopp2498 = alloca %struct.sv*, align 8
  %flrbbbbb2500 = alloca i8*, align 8
  %kapow2503 = alloca i8*, align 8
  %ooooff2517 = alloca i8, align 1
  %transcount = alloca i64, align 8
  %noper2591 = alloca %struct.regnode*, align 8
  %uc2593 = alloca i8*, align 8
  %e2596 = alloca i8*, align 8
  %state = alloca i32, align 4
  %charid = alloca i16, align 2
  %wordlen2601 = alloca i32, align 4
  %noper_next2607 = alloca %struct.regnode*, align 8
  %svpp2668 = alloca %struct.sv**, align 8
  %check = alloca i16, align 2
  %newstate2690 = alloca i32, align 4
  %ging = alloca i32, align 4
  %dupe = alloca i16, align 2
  %noper_next2868 = alloca %struct.regnode*, align 8
  %state2937 = alloca i32, align 4
  %tp = alloca i32, align 4
  %zp = alloca i32, align 4
  %base = alloca i32, align 4
  %minid = alloca i16, align 2
  %maxid = alloca i16, align 2
  %idx = alloca i16, align 2
  %forid2980 = alloca i16, align 2
  %set = alloca i32, align 4
  %tid = alloca i32, align 4
  %noper3182 = alloca %struct.regnode*, align 8
  %uc3184 = alloca i8*, align 8
  %e3187 = alloca i8*, align 8
  %state3192 = alloca i32, align 4
  %charid3193 = alloca i16, align 2
  %accept_state = alloca i32, align 4
  %wordlen3194 = alloca i32, align 4
  %noper_next3200 = alloca %struct.regnode*, align 8
  %svpp3261 = alloca %struct.sv**, align 8
  %dupe3340 = alloca i16, align 2
  %noper_next3345 = alloca %struct.regnode*, align 8
  %laststate = alloca i32, align 4
  %state3416 = alloca i32, align 4
  %charid3417 = alloca i32, align 4
  %pos = alloca i32, align 4
  %zp3418 = alloca i32, align 4
  %flag = alloca i8, align 1
  %stateidx = alloca i32, align 4
  %o_used = alloca i32, align 4
  %used = alloca i32, align 4
  %nodetype = alloca i8, align 1
  %str = alloca i8*, align 8
  %state3631 = alloca i32, align 4
  %ofs = alloca i32, align 4
  %idx3638 = alloca i32, align 4
  %count = alloca i32, align 4
  %base3639 = alloca i32, align 4
  %tmp = alloca %struct.sv**, align 8
  %ch = alloca i8*, align 8
  %tmp3712 = alloca %struct.sv**, align 8
  %ch3715 = alloca i8*, align 8
  %tmp3800 = alloca %struct.sv**, align 8
  %len3803 = alloca i64, align 8
  %ch3804 = alloca i8*, align 8
  %n = alloca %struct.regnode*, align 8
  %word = alloca i16, align 2
  %state3928 = alloca i32, align 4
  %prev3929 = alloca i16, align 2
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode* %startbranch, %struct.regnode** %startbranch.addr, align 8
  store %struct.regnode* %first, %struct.regnode** %first.addr, align 8
  store %struct.regnode* %last, %struct.regnode** %last.addr, align 8
  store %struct.regnode* %tail, %struct.regnode** %tail.addr, align 8
  store i32 %word_count, i32* %word_count.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store %struct.hv* null, %struct.hv** %widecharmap, align 8
  %call = call %struct.sv* @Perl_newSV_type(i32 11)
  %0 = bitcast %struct.sv* %call to i8*
  %1 = bitcast i8* %0 to %struct.av*
  store %struct.av* %1, %struct.av** %revcharmap, align 8
  store i64 0, i64* %len, align 8
  store i64 0, i64* %uvc, align 8
  store i16 0, i16* %curword, align 2
  store i32 0, i32* %next_alloc, align 4
  store %struct.regnode* null, %struct.regnode** %jumper, align 8
  store %struct.regnode* null, %struct.regnode** %nextbranch, align 8
  store %struct.regnode* null, %struct.regnode** %convert, align 8
  store i8* null, i8** %folder, align 8
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1 = call i32 @S_add_data(%struct.RExC_state_t* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.220, i64 0, i64 0), i32 2)
  store i32 %call1, i32* %data_slot, align 4
  store i64 0, i64* %trie_charcount, align 8
  %3 = load i32, i32* %depth.addr, align 4
  %4 = load i32, i32* %flags.addr, align 4
  switch i32 %4, label %sw.default [
    i32 31, label %sw.bb
    i32 32, label %sw.bb
    i32 36, label %sw.bb2
    i32 37, label %sw.bb2
    i32 35, label %sw.bb2
    i32 38, label %sw.bb2
    i32 33, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry, %entry
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry, %entry, %entry, %entry
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_fold_latin1, i64 0, i64 0), i8** %folder, align 8
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_fold, i64 0, i64 0), i8** %folder, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %5 = load i32, i32* %flags.addr, align 4
  %6 = load i32, i32* %flags.addr, align 4
  %idxprom = zext i32 %6 to i64
  %arrayidx = getelementptr inbounds [134 x i8*], [134 x i8*]* @PL_reg_name, i64 0, i64 %idxprom
  %7 = load i8*, i8** %arrayidx, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.221, i64 0, i64 0), i32 %5, i8* %7)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb3, %sw.bb2, %sw.bb
  %call4 = call noalias i8* @calloc(i64 1, i64 96) #5
  %8 = bitcast i8* %call4 to %struct._reg_trie_data*
  store %struct._reg_trie_data* %8, %struct._reg_trie_data** %trie, align 8
  %9 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %refcount = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %9, i32 0, i32 0
  store i32 1, i32* %refcount, align 8
  %10 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %startstate = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %10, i32 0, i32 9
  store i32 1, i32* %startstate, align 4
  %11 = load i32, i32* %word_count.addr, align 4
  %12 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordcount = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %12, i32 0, i32 14
  store i32 %11, i32* %wordcount, align 8
  %13 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %14 = bitcast %struct._reg_trie_data* %13 to i8*
  %15 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %15, i32 0, i32 5
  %16 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi, align 8
  %data = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %16, i32 0, i32 3
  %17 = load %struct.reg_data*, %struct.reg_data** %data, align 8
  %data5 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %17, i32 0, i32 2
  %18 = load i32, i32* %data_slot, align 4
  %idxprom6 = zext i32 %18 to i64
  %arrayidx7 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data5, i64 0, i64 %idxprom6
  store i8* %14, i8** %arrayidx7, align 8
  %call8 = call noalias i8* @calloc(i64 256, i64 2) #5
  %19 = bitcast i8* %call8 to i16*
  %20 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %charmap = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %20, i32 0, i32 2
  store i16* %19, i16** %charmap, align 8
  %21 = load i32, i32* %flags.addr, align 4
  %cmp = icmp eq i32 %21, 31
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.epilog
  %22 = load i32, i32* %flags.addr, align 4
  %cmp9 = icmp eq i32 %22, 32
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %sw.epilog
  %call10 = call noalias i8* @calloc(i64 32, i64 1) #5
  %23 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %23, i32 0, i32 5
  store i8* %call10, i8** %bitmap, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %24 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordcount11 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %24, i32 0, i32 14
  %25 = load i32, i32* %wordcount11, align 8
  %add = add i32 %25, 1
  %conv = zext i32 %add to i64
  %call12 = call noalias i8* @calloc(i64 %conv, i64 12) #5
  %26 = bitcast i8* %call12 to %struct.reg_trie_wordinfo*
  %27 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %27, i32 0, i32 7
  store %struct.reg_trie_wordinfo* %26, %struct.reg_trie_wordinfo** %wordinfo, align 8
  %call13 = call %struct.sv* @Perl_get_sv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.216, i64 0, i64 0), i32 1)
  store %struct.sv* %call13, %struct.sv** %re_trie_maxbuff, align 8
  %28 = load %struct.sv*, %struct.sv** %re_trie_maxbuff, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags, align 4
  %and = and i32 %29, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end15, label %if.then14

if.then14:                                        ; preds = %if.end
  %30 = load %struct.sv*, %struct.sv** %re_trie_maxbuff, align 8
  call void @Perl_sv_setiv(%struct.sv* %30, i64 65536)
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %if.end
  %31 = load %struct.regnode*, %struct.regnode** %first.addr, align 8
  %32 = load %struct.regnode*, %struct.regnode** %startbranch.addr, align 8
  %cmp16 = icmp eq %struct.regnode* %31, %32
  br i1 %cmp16, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end15
  %33 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %33, i32 0, i32 1
  %34 = load i8, i8* %type, align 1
  %conv18 = zext i8 %34 to i32
  %cmp19 = icmp ne i32 %conv18, 30
  br i1 %cmp19, label %if.then21, label %if.else

if.then21:                                        ; preds = %land.lhs.true
  %35 = load %struct.regnode*, %struct.regnode** %first.addr, align 8
  store %struct.regnode* %35, %struct.regnode** %convert, align 8
  br label %if.end22

if.else:                                          ; preds = %land.lhs.true, %if.end15
  %36 = load %struct.regnode*, %struct.regnode** %first.addr, align 8
  %add.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %36, i64 1
  store %struct.regnode* %add.ptr, %struct.regnode** %convert, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then21
  %37 = load %struct.regnode*, %struct.regnode** %first.addr, align 8
  store %struct.regnode* %37, %struct.regnode** %cur, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc2544, %if.end22
  %38 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %39 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  %cmp23 = icmp ult %struct.regnode* %38, %39
  br i1 %cmp23, label %for.body, label %for.end2546

for.body:                                         ; preds = %for.cond
  %40 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %add.ptr25 = getelementptr inbounds %struct.regnode, %struct.regnode* %40, i64 1
  store %struct.regnode* %add.ptr25, %struct.regnode** %noper, align 8
  %41 = load %struct.regnode*, %struct.regnode** %noper, align 8
  %42 = bitcast %struct.regnode* %41 to %struct.regnode_string*
  %string = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %42, i32 0, i32 3
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %string, i64 0, i64 0
  store i8* %arraydecay, i8** %uc, align 8
  %43 = load i8*, i8** %uc, align 8
  %44 = load %struct.regnode*, %struct.regnode** %noper, align 8
  %45 = bitcast %struct.regnode* %44 to %struct.regnode_string*
  %str_len = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %45, i32 0, i32 0
  %46 = load i8, i8* %str_len, align 2
  %conv26 = zext i8 %46 to i32
  %idx.ext = sext i32 %conv26 to i64
  %add.ptr27 = getelementptr inbounds i8, i8* %43, i64 %idx.ext
  store i8* %add.ptr27, i8** %e, align 8
  store i32 0, i32* %foldlen, align 4
  store i32 0, i32* %wordlen, align 4
  store i64 0, i64* %minchars, align 8
  store i64 0, i64* %maxchars, align 8
  %47 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap28 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %47, i32 0, i32 5
  %48 = load i8*, i8** %bitmap28, align 8
  %tobool29 = icmp ne i8* %48, null
  %49 = zext i1 %tobool29 to i64
  %cond = select i1 %tobool29, i32 1, i32 0
  %tobool30 = icmp ne i32 %cond, 0
  %frombool = zext i1 %tobool30 to i8
  store i8 %frombool, i8* %set_bit, align 1
  %50 = load %struct.regnode*, %struct.regnode** %noper, align 8
  %type31 = getelementptr inbounds %struct.regnode, %struct.regnode* %50, i32 0, i32 1
  %51 = load i8, i8* %type31, align 1
  %conv32 = zext i8 %51 to i32
  %cmp33 = icmp eq i32 %conv32, 40
  br i1 %cmp33, label %if.then35, label %if.end56

if.then35:                                        ; preds = %for.body
  %52 = load %struct.regnode*, %struct.regnode** %noper, align 8
  %call36 = call %struct.regnode* @Perl_regnext(%struct.regnode* %52)
  store %struct.regnode* %call36, %struct.regnode** %noper_next, align 8
  %53 = load %struct.regnode*, %struct.regnode** %noper_next, align 8
  %54 = load %struct.regnode*, %struct.regnode** %tail.addr, align 8
  %cmp37 = icmp ne %struct.regnode* %53, %54
  br i1 %cmp37, label %land.lhs.true39, label %if.else53

land.lhs.true39:                                  ; preds = %if.then35
  %55 = load %struct.regnode*, %struct.regnode** %noper_next, align 8
  %type40 = getelementptr inbounds %struct.regnode, %struct.regnode* %55, i32 0, i32 1
  %56 = load i8, i8* %type40, align 1
  %conv41 = zext i8 %56 to i32
  %57 = load i32, i32* %flags.addr, align 4
  %cmp42 = icmp eq i32 %conv41, %57
  br i1 %cmp42, label %if.then44, label %if.else53

if.then44:                                        ; preds = %land.lhs.true39
  %58 = load %struct.regnode*, %struct.regnode** %noper_next, align 8
  store %struct.regnode* %58, %struct.regnode** %noper, align 8
  %59 = load %struct.regnode*, %struct.regnode** %noper, align 8
  %60 = bitcast %struct.regnode* %59 to %struct.regnode_string*
  %string45 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %60, i32 0, i32 3
  %arraydecay46 = getelementptr inbounds [1 x i8], [1 x i8]* %string45, i64 0, i64 0
  store i8* %arraydecay46, i8** %uc, align 8
  %61 = load i8*, i8** %uc, align 8
  %62 = load %struct.regnode*, %struct.regnode** %noper, align 8
  %63 = bitcast %struct.regnode* %62 to %struct.regnode_string*
  %str_len47 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %63, i32 0, i32 0
  %64 = load i8, i8* %str_len47, align 2
  %conv48 = zext i8 %64 to i32
  %idx.ext49 = sext i32 %conv48 to i64
  %add.ptr50 = getelementptr inbounds i8, i8* %61, i64 %idx.ext49
  store i8* %add.ptr50, i8** %e, align 8
  %65 = load %struct.regnode*, %struct.regnode** %noper, align 8
  %66 = bitcast %struct.regnode* %65 to %struct.regnode_string*
  %str_len51 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %66, i32 0, i32 0
  %67 = load i8, i8* %str_len51, align 2
  %conv52 = zext i8 %67 to i64
  %68 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %minlen = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %68, i32 0, i32 10
  store i64 %conv52, i64* %minlen, align 8
  br label %if.end55

if.else53:                                        ; preds = %land.lhs.true39, %if.then35
  %69 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %minlen54 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %69, i32 0, i32 10
  store i64 0, i64* %minlen54, align 8
  br label %for.inc2544

if.end55:                                         ; preds = %if.then44
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %for.body
  %70 = load i8, i8* %set_bit, align 1
  %tobool57 = trunc i8 %70 to i1
  br i1 %tobool57, label %if.then58, label %if.end79

if.then58:                                        ; preds = %if.end56
  %71 = load i8*, i8** %uc, align 8
  %72 = load i8, i8* %71, align 1
  %conv59 = zext i8 %72 to i32
  %and60 = and i32 %conv59, 7
  %shl = shl i32 1, %and60
  %73 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap61 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %73, i32 0, i32 5
  %74 = load i8*, i8** %bitmap61, align 8
  %75 = load i8*, i8** %uc, align 8
  %76 = load i8, i8* %75, align 1
  %conv62 = zext i8 %76 to i32
  %shr = ashr i32 %conv62, 3
  %and63 = and i32 %shr, 31
  %idxprom64 = sext i32 %and63 to i64
  %arrayidx65 = getelementptr inbounds i8, i8* %74, i64 %idxprom64
  %77 = load i8, i8* %arrayidx65, align 1
  %conv66 = sext i8 %77 to i32
  %or = or i32 %conv66, %shl
  %conv67 = trunc i32 %or to i8
  store i8 %conv67, i8* %arrayidx65, align 1
  %78 = load %struct.regnode*, %struct.regnode** %noper, align 8
  %type68 = getelementptr inbounds %struct.regnode, %struct.regnode* %78, i32 0, i32 1
  %79 = load i8, i8* %type68, align 1
  %conv69 = zext i8 %79 to i32
  %cmp70 = icmp eq i32 %conv69, 37
  br i1 %cmp70, label %if.then72, label %if.end78

if.then72:                                        ; preds = %if.then58
  %80 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap73 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %80, i32 0, i32 5
  %81 = load i8*, i8** %bitmap73, align 8
  %arrayidx74 = getelementptr inbounds i8, i8* %81, i64 27
  %82 = load i8, i8* %arrayidx74, align 1
  %conv75 = sext i8 %82 to i32
  %or76 = or i32 %conv75, 128
  %conv77 = trunc i32 %or76 to i8
  store i8 %conv77, i8* %arrayidx74, align 1
  br label %if.end78

if.end78:                                         ; preds = %if.then72, %if.then58
  br label %if.end79

if.end79:                                         ; preds = %if.end78, %if.end56
  br label %for.cond80

for.cond80:                                       ; preds = %for.inc, %if.end79
  %83 = load i8*, i8** %uc, align 8
  %84 = load i8*, i8** %e, align 8
  %cmp81 = icmp ult i8* %83, %84
  br i1 %cmp81, label %for.body83, label %for.end

for.body83:                                       ; preds = %for.cond80
  %85 = load i64, i64* %trie_charcount, align 8
  %inc = add i64 %85, 1
  store i64 %inc, i64* %trie_charcount, align 8
  br label %do.body

do.body:                                          ; preds = %for.body83
  %86 = load i32, i32* %wordlen, align 4
  %inc84 = add i32 %86, 1
  store i32 %inc84, i32* %wordlen, align 4
  %87 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %87, i32 0, i32 25
  %88 = load i32, i32* %utf8, align 8
  %tobool85 = icmp ne i32 %88, 0
  br i1 %tobool85, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then86, label %if.else88

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then86, label %if.else88

if.then86:                                        ; preds = %cond.false, %cond.true
  %89 = load i8*, i8** %uc, align 8
  %call87 = call i64 @Perl_valid_utf8_to_uvchr(i8* %89, i64* %len)
  store i64 %call87, i64* %uvc, align 8
  br label %if.end106

if.else88:                                        ; preds = %cond.false, %cond.true
  %90 = load i8*, i8** %folder, align 8
  %cmp89 = icmp eq i8* %90, getelementptr inbounds ([0 x i8], [0 x i8]* @PL_fold_latin1, i64 0, i64 0)
  br i1 %cmp89, label %if.then91, label %if.else102

if.then91:                                        ; preds = %if.else88
  %91 = load i8*, i8** %uc, align 8
  %92 = load i8, i8* %91, align 1
  %idxprom92 = zext i8 %92 to i64
  %arrayidx93 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_latin1_lc, i64 0, i64 %idxprom92
  %93 = load i8, i8* %arrayidx93, align 1
  %conv94 = zext i8 %93 to i32
  %conv95 = sext i32 %conv94 to i64
  store i64 %conv95, i64* %uvc, align 8
  %94 = load i64, i64* %uvc, align 8
  %cmp96 = icmp eq i64 %94, 181
  br i1 %cmp96, label %cond.true98, label %cond.false99

cond.true98:                                      ; preds = %if.then91
  br i1 true, label %if.then100, label %if.end101

cond.false99:                                     ; preds = %if.then91
  br i1 false, label %if.then100, label %if.end101

if.then100:                                       ; preds = %cond.false99, %cond.true98
  store i64 956, i64* %uvc, align 8
  br label %if.end101

if.end101:                                        ; preds = %if.then100, %cond.false99, %cond.true98
  store i64 1, i64* %len, align 8
  br label %if.end105

if.else102:                                       ; preds = %if.else88
  %95 = load i8*, i8** %uc, align 8
  %96 = load i8, i8* %95, align 1
  %conv103 = zext i8 %96 to i32
  %conv104 = zext i32 %conv103 to i64
  store i64 %conv104, i64* %uvc, align 8
  store i64 1, i64* %len, align 8
  br label %if.end105

if.end105:                                        ; preds = %if.else102, %if.end101
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %if.then86
  br label %do.end

do.end:                                           ; preds = %if.end106
  %97 = load i64, i64* %maxchars, align 8
  %inc107 = add i64 %97, 1
  store i64 %inc107, i64* %maxchars, align 8
  %98 = load i8*, i8** %folder, align 8
  %cmp108 = icmp eq i8* %98, null
  br i1 %cmp108, label %if.then110, label %if.else112

if.then110:                                       ; preds = %do.end
  %99 = load i64, i64* %minchars, align 8
  %inc111 = add i64 %99, 1
  store i64 %inc111, i64* %minchars, align 8
  br label %if.end2255

if.else112:                                       ; preds = %do.end
  %100 = load i32, i32* %foldlen, align 4
  %cmp113 = icmp sgt i32 %100, 0
  br i1 %cmp113, label %if.then115, label %if.else126

if.then115:                                       ; preds = %if.else112
  %101 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8116 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %101, i32 0, i32 25
  %102 = load i32, i32* %utf8116, align 8
  %tobool117 = icmp ne i32 %102, 0
  br i1 %tobool117, label %cond.true118, label %cond.false119

cond.true118:                                     ; preds = %if.then115
  br i1 true, label %cond.true120, label %cond.false124

cond.false119:                                    ; preds = %if.then115
  br i1 false, label %cond.true120, label %cond.false124

cond.true120:                                     ; preds = %cond.false119, %cond.true118
  %103 = load i8*, i8** %uc, align 8
  %104 = load i8, i8* %103, align 1
  %idxprom121 = zext i8 %104 to i64
  %arrayidx122 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom121
  %105 = load i8, i8* %arrayidx122, align 1
  %conv123 = zext i8 %105 to i32
  br label %cond.end

cond.false124:                                    ; preds = %cond.false119, %cond.true118
  br label %cond.end

cond.end:                                         ; preds = %cond.false124, %cond.true120
  %cond125 = phi i32 [ %conv123, %cond.true120 ], [ 1, %cond.false124 ]
  %106 = load i32, i32* %foldlen, align 4
  %sub = sub nsw i32 %106, %cond125
  store i32 %sub, i32* %foldlen, align 4
  br label %if.end2254

if.else126:                                       ; preds = %if.else112
  %107 = load i64, i64* %minchars, align 8
  %inc127 = add i64 %107, 1
  store i64 %inc127, i64* %minchars, align 8
  %108 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8128 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %108, i32 0, i32 25
  %109 = load i32, i32* %utf8128, align 8
  %tobool129 = icmp ne i32 %109, 0
  br i1 %tobool129, label %cond.true130, label %cond.false131

cond.true130:                                     ; preds = %if.else126
  br i1 true, label %if.then132, label %if.else2119

cond.false131:                                    ; preds = %if.else126
  br i1 false, label %if.then132, label %if.else2119

if.then132:                                       ; preds = %cond.false131, %cond.true130
  %110 = load i8*, i8** %e, align 8
  %111 = load i8*, i8** %uc, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %110 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %111 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp133 = icmp sgt i64 %sub.ptr.sub, 5
  br i1 %cmp133, label %cond.true135, label %cond.false812

cond.true135:                                     ; preds = %if.then132
  %112 = load i8*, i8** %uc, align 8
  %arrayidx136 = getelementptr inbounds i8, i8* %112, i64 0
  %113 = load i8, i8* %arrayidx136, align 1
  %conv137 = zext i8 %113 to i32
  %cmp138 = icmp eq i32 97, %conv137
  br i1 %cmp138, label %cond.true140, label %cond.false150

cond.true140:                                     ; preds = %cond.true135
  %114 = load i8*, i8** %uc, align 8
  %arrayidx141 = getelementptr inbounds i8, i8* %114, i64 1
  %115 = load i8, i8* %arrayidx141, align 1
  %conv142 = zext i8 %115 to i32
  %cmp143 = icmp eq i32 202, %conv142
  br i1 %cmp143, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.true140
  %116 = load i8*, i8** %uc, align 8
  %arrayidx145 = getelementptr inbounds i8, i8* %116, i64 2
  %117 = load i8, i8* %arrayidx145, align 1
  %conv146 = zext i8 %117 to i32
  %cmp147 = icmp eq i32 190, %conv146
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.true140
  %118 = phi i1 [ false, %cond.true140 ], [ %cmp147, %land.rhs ]
  %119 = zext i1 %118 to i64
  %cond149 = select i1 %118, i32 3, i32 0
  br label %cond.end810

cond.false150:                                    ; preds = %cond.true135
  %120 = load i8*, i8** %uc, align 8
  %arrayidx151 = getelementptr inbounds i8, i8* %120, i64 0
  %121 = load i8, i8* %arrayidx151, align 1
  %conv152 = zext i8 %121 to i32
  %cmp153 = icmp eq i32 102, %conv152
  br i1 %cmp153, label %cond.true155, label %cond.false184

cond.true155:                                     ; preds = %cond.false150
  %122 = load i8*, i8** %uc, align 8
  %arrayidx156 = getelementptr inbounds i8, i8* %122, i64 1
  %123 = load i8, i8* %arrayidx156, align 1
  %conv157 = zext i8 %123 to i32
  %cmp158 = icmp eq i32 102, %conv157
  br i1 %cmp158, label %cond.true160, label %cond.false170

cond.true160:                                     ; preds = %cond.true155
  %124 = load i8*, i8** %uc, align 8
  %arrayidx161 = getelementptr inbounds i8, i8* %124, i64 2
  %125 = load i8, i8* %arrayidx161, align 1
  %conv162 = zext i8 %125 to i32
  %cmp163 = icmp eq i32 105, %conv162
  br i1 %cmp163, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true160
  %126 = load i8*, i8** %uc, align 8
  %arrayidx165 = getelementptr inbounds i8, i8* %126, i64 2
  %127 = load i8, i8* %arrayidx165, align 1
  %conv166 = zext i8 %127 to i32
  %cmp167 = icmp eq i32 108, %conv166
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.true160
  %128 = phi i1 [ true, %cond.true160 ], [ %cmp167, %lor.rhs ]
  %129 = zext i1 %128 to i64
  %cond169 = select i1 %128, i32 3, i32 2
  br label %cond.end182

cond.false170:                                    ; preds = %cond.true155
  %130 = load i8*, i8** %uc, align 8
  %arrayidx171 = getelementptr inbounds i8, i8* %130, i64 1
  %131 = load i8, i8* %arrayidx171, align 1
  %conv172 = zext i8 %131 to i32
  %cmp173 = icmp eq i32 105, %conv172
  br i1 %cmp173, label %lor.end180, label %lor.rhs175

lor.rhs175:                                       ; preds = %cond.false170
  %132 = load i8*, i8** %uc, align 8
  %arrayidx176 = getelementptr inbounds i8, i8* %132, i64 1
  %133 = load i8, i8* %arrayidx176, align 1
  %conv177 = zext i8 %133 to i32
  %cmp178 = icmp eq i32 108, %conv177
  br label %lor.end180

lor.end180:                                       ; preds = %lor.rhs175, %cond.false170
  %134 = phi i1 [ true, %cond.false170 ], [ %cmp178, %lor.rhs175 ]
  %135 = zext i1 %134 to i64
  %cond181 = select i1 %134, i32 2, i32 0
  br label %cond.end182

cond.end182:                                      ; preds = %lor.end180, %lor.end
  %cond183 = phi i32 [ %cond169, %lor.end ], [ %cond181, %lor.end180 ]
  br label %cond.end808

cond.false184:                                    ; preds = %cond.false150
  %136 = load i8*, i8** %uc, align 8
  %arrayidx185 = getelementptr inbounds i8, i8* %136, i64 0
  %137 = load i8, i8* %arrayidx185, align 1
  %conv186 = zext i8 %137 to i32
  %cmp187 = icmp eq i32 104, %conv186
  br i1 %cmp187, label %cond.true189, label %cond.false201

cond.true189:                                     ; preds = %cond.false184
  %138 = load i8*, i8** %uc, align 8
  %arrayidx190 = getelementptr inbounds i8, i8* %138, i64 1
  %139 = load i8, i8* %arrayidx190, align 1
  %conv191 = zext i8 %139 to i32
  %cmp192 = icmp eq i32 204, %conv191
  br i1 %cmp192, label %land.rhs194, label %land.end199

land.rhs194:                                      ; preds = %cond.true189
  %140 = load i8*, i8** %uc, align 8
  %arrayidx195 = getelementptr inbounds i8, i8* %140, i64 2
  %141 = load i8, i8* %arrayidx195, align 1
  %conv196 = zext i8 %141 to i32
  %cmp197 = icmp eq i32 177, %conv196
  br label %land.end199

land.end199:                                      ; preds = %land.rhs194, %cond.true189
  %142 = phi i1 [ false, %cond.true189 ], [ %cmp197, %land.rhs194 ]
  %143 = zext i1 %142 to i64
  %cond200 = select i1 %142, i32 3, i32 0
  br label %cond.end806

cond.false201:                                    ; preds = %cond.false184
  %144 = load i8*, i8** %uc, align 8
  %arrayidx202 = getelementptr inbounds i8, i8* %144, i64 0
  %145 = load i8, i8* %arrayidx202, align 1
  %conv203 = zext i8 %145 to i32
  %cmp204 = icmp eq i32 105, %conv203
  br i1 %cmp204, label %cond.true206, label %cond.false218

cond.true206:                                     ; preds = %cond.false201
  %146 = load i8*, i8** %uc, align 8
  %arrayidx207 = getelementptr inbounds i8, i8* %146, i64 1
  %147 = load i8, i8* %arrayidx207, align 1
  %conv208 = zext i8 %147 to i32
  %cmp209 = icmp eq i32 204, %conv208
  br i1 %cmp209, label %land.rhs211, label %land.end216

land.rhs211:                                      ; preds = %cond.true206
  %148 = load i8*, i8** %uc, align 8
  %arrayidx212 = getelementptr inbounds i8, i8* %148, i64 2
  %149 = load i8, i8* %arrayidx212, align 1
  %conv213 = zext i8 %149 to i32
  %cmp214 = icmp eq i32 135, %conv213
  br label %land.end216

land.end216:                                      ; preds = %land.rhs211, %cond.true206
  %150 = phi i1 [ false, %cond.true206 ], [ %cmp214, %land.rhs211 ]
  %151 = zext i1 %150 to i64
  %cond217 = select i1 %150, i32 3, i32 0
  br label %cond.end804

cond.false218:                                    ; preds = %cond.false201
  %152 = load i8*, i8** %uc, align 8
  %arrayidx219 = getelementptr inbounds i8, i8* %152, i64 0
  %153 = load i8, i8* %arrayidx219, align 1
  %conv220 = zext i8 %153 to i32
  %cmp221 = icmp eq i32 106, %conv220
  br i1 %cmp221, label %cond.true223, label %cond.false235

cond.true223:                                     ; preds = %cond.false218
  %154 = load i8*, i8** %uc, align 8
  %arrayidx224 = getelementptr inbounds i8, i8* %154, i64 1
  %155 = load i8, i8* %arrayidx224, align 1
  %conv225 = zext i8 %155 to i32
  %cmp226 = icmp eq i32 204, %conv225
  br i1 %cmp226, label %land.rhs228, label %land.end233

land.rhs228:                                      ; preds = %cond.true223
  %156 = load i8*, i8** %uc, align 8
  %arrayidx229 = getelementptr inbounds i8, i8* %156, i64 2
  %157 = load i8, i8* %arrayidx229, align 1
  %conv230 = zext i8 %157 to i32
  %cmp231 = icmp eq i32 140, %conv230
  br label %land.end233

land.end233:                                      ; preds = %land.rhs228, %cond.true223
  %158 = phi i1 [ false, %cond.true223 ], [ %cmp231, %land.rhs228 ]
  %159 = zext i1 %158 to i64
  %cond234 = select i1 %158, i32 3, i32 0
  br label %cond.end802

cond.false235:                                    ; preds = %cond.false218
  %160 = load i8*, i8** %uc, align 8
  %arrayidx236 = getelementptr inbounds i8, i8* %160, i64 0
  %161 = load i8, i8* %arrayidx236, align 1
  %conv237 = zext i8 %161 to i32
  %cmp238 = icmp eq i32 115, %conv237
  br i1 %cmp238, label %cond.true240, label %cond.false252

cond.true240:                                     ; preds = %cond.false235
  %162 = load i8*, i8** %uc, align 8
  %arrayidx241 = getelementptr inbounds i8, i8* %162, i64 1
  %163 = load i8, i8* %arrayidx241, align 1
  %conv242 = zext i8 %163 to i32
  %cmp243 = icmp eq i32 115, %conv242
  br i1 %cmp243, label %lor.end250, label %lor.rhs245

lor.rhs245:                                       ; preds = %cond.true240
  %164 = load i8*, i8** %uc, align 8
  %arrayidx246 = getelementptr inbounds i8, i8* %164, i64 1
  %165 = load i8, i8* %arrayidx246, align 1
  %conv247 = zext i8 %165 to i32
  %cmp248 = icmp eq i32 116, %conv247
  br label %lor.end250

lor.end250:                                       ; preds = %lor.rhs245, %cond.true240
  %166 = phi i1 [ true, %cond.true240 ], [ %cmp248, %lor.rhs245 ]
  %167 = zext i1 %166 to i64
  %cond251 = select i1 %166, i32 2, i32 0
  br label %cond.end800

cond.false252:                                    ; preds = %cond.false235
  %168 = load i8*, i8** %uc, align 8
  %arrayidx253 = getelementptr inbounds i8, i8* %168, i64 0
  %169 = load i8, i8* %arrayidx253, align 1
  %conv254 = zext i8 %169 to i32
  %cmp255 = icmp eq i32 116, %conv254
  br i1 %cmp255, label %cond.true257, label %cond.false269

cond.true257:                                     ; preds = %cond.false252
  %170 = load i8*, i8** %uc, align 8
  %arrayidx258 = getelementptr inbounds i8, i8* %170, i64 1
  %171 = load i8, i8* %arrayidx258, align 1
  %conv259 = zext i8 %171 to i32
  %cmp260 = icmp eq i32 204, %conv259
  br i1 %cmp260, label %land.rhs262, label %land.end267

land.rhs262:                                      ; preds = %cond.true257
  %172 = load i8*, i8** %uc, align 8
  %arrayidx263 = getelementptr inbounds i8, i8* %172, i64 2
  %173 = load i8, i8* %arrayidx263, align 1
  %conv264 = zext i8 %173 to i32
  %cmp265 = icmp eq i32 136, %conv264
  br label %land.end267

land.end267:                                      ; preds = %land.rhs262, %cond.true257
  %174 = phi i1 [ false, %cond.true257 ], [ %cmp265, %land.rhs262 ]
  %175 = zext i1 %174 to i64
  %cond268 = select i1 %174, i32 3, i32 0
  br label %cond.end798

cond.false269:                                    ; preds = %cond.false252
  %176 = load i8*, i8** %uc, align 8
  %arrayidx270 = getelementptr inbounds i8, i8* %176, i64 0
  %177 = load i8, i8* %arrayidx270, align 1
  %conv271 = zext i8 %177 to i32
  %cmp272 = icmp eq i32 119, %conv271
  br i1 %cmp272, label %cond.true279, label %lor.lhs.false274

lor.lhs.false274:                                 ; preds = %cond.false269
  %178 = load i8*, i8** %uc, align 8
  %arrayidx275 = getelementptr inbounds i8, i8* %178, i64 0
  %179 = load i8, i8* %arrayidx275, align 1
  %conv276 = zext i8 %179 to i32
  %cmp277 = icmp eq i32 121, %conv276
  br i1 %cmp277, label %cond.true279, label %cond.false291

cond.true279:                                     ; preds = %lor.lhs.false274, %cond.false269
  %180 = load i8*, i8** %uc, align 8
  %arrayidx280 = getelementptr inbounds i8, i8* %180, i64 1
  %181 = load i8, i8* %arrayidx280, align 1
  %conv281 = zext i8 %181 to i32
  %cmp282 = icmp eq i32 204, %conv281
  br i1 %cmp282, label %land.rhs284, label %land.end289

land.rhs284:                                      ; preds = %cond.true279
  %182 = load i8*, i8** %uc, align 8
  %arrayidx285 = getelementptr inbounds i8, i8* %182, i64 2
  %183 = load i8, i8* %arrayidx285, align 1
  %conv286 = zext i8 %183 to i32
  %cmp287 = icmp eq i32 138, %conv286
  br label %land.end289

land.end289:                                      ; preds = %land.rhs284, %cond.true279
  %184 = phi i1 [ false, %cond.true279 ], [ %cmp287, %land.rhs284 ]
  %185 = zext i1 %184 to i64
  %cond290 = select i1 %184, i32 3, i32 0
  br label %cond.end796

cond.false291:                                    ; preds = %lor.lhs.false274
  %186 = load i8*, i8** %uc, align 8
  %arrayidx292 = getelementptr inbounds i8, i8* %186, i64 0
  %187 = load i8, i8* %arrayidx292, align 1
  %conv293 = zext i8 %187 to i32
  %cmp294 = icmp eq i32 197, %conv293
  br i1 %cmp294, label %cond.true296, label %cond.false313

cond.true296:                                     ; preds = %cond.false291
  %188 = load i8*, i8** %uc, align 8
  %arrayidx297 = getelementptr inbounds i8, i8* %188, i64 1
  %189 = load i8, i8* %arrayidx297, align 1
  %conv298 = zext i8 %189 to i32
  %cmp299 = icmp eq i32 191, %conv298
  br i1 %cmp299, label %land.lhs.true301, label %land.end311

land.lhs.true301:                                 ; preds = %cond.true296
  %190 = load i8*, i8** %uc, align 8
  %arrayidx302 = getelementptr inbounds i8, i8* %190, i64 2
  %191 = load i8, i8* %arrayidx302, align 1
  %conv303 = zext i8 %191 to i32
  %cmp304 = icmp eq i32 197, %conv303
  br i1 %cmp304, label %land.rhs306, label %land.end311

land.rhs306:                                      ; preds = %land.lhs.true301
  %192 = load i8*, i8** %uc, align 8
  %arrayidx307 = getelementptr inbounds i8, i8* %192, i64 3
  %193 = load i8, i8* %arrayidx307, align 1
  %conv308 = zext i8 %193 to i32
  %cmp309 = icmp eq i32 191, %conv308
  br label %land.end311

land.end311:                                      ; preds = %land.rhs306, %land.lhs.true301, %cond.true296
  %194 = phi i1 [ false, %land.lhs.true301 ], [ false, %cond.true296 ], [ %cmp309, %land.rhs306 ]
  %195 = zext i1 %194 to i64
  %cond312 = select i1 %194, i32 4, i32 0
  br label %cond.end794

cond.false313:                                    ; preds = %cond.false291
  %196 = load i8*, i8** %uc, align 8
  %arrayidx314 = getelementptr inbounds i8, i8* %196, i64 0
  %197 = load i8, i8* %arrayidx314, align 1
  %conv315 = zext i8 %197 to i32
  %cmp316 = icmp eq i32 202, %conv315
  br i1 %cmp316, label %cond.true318, label %cond.false330

cond.true318:                                     ; preds = %cond.false313
  %198 = load i8*, i8** %uc, align 8
  %arrayidx319 = getelementptr inbounds i8, i8* %198, i64 1
  %199 = load i8, i8* %arrayidx319, align 1
  %conv320 = zext i8 %199 to i32
  %cmp321 = icmp eq i32 188, %conv320
  br i1 %cmp321, label %land.rhs323, label %land.end328

land.rhs323:                                      ; preds = %cond.true318
  %200 = load i8*, i8** %uc, align 8
  %arrayidx324 = getelementptr inbounds i8, i8* %200, i64 2
  %201 = load i8, i8* %arrayidx324, align 1
  %conv325 = zext i8 %201 to i32
  %cmp326 = icmp eq i32 110, %conv325
  br label %land.end328

land.end328:                                      ; preds = %land.rhs323, %cond.true318
  %202 = phi i1 [ false, %cond.true318 ], [ %cmp326, %land.rhs323 ]
  %203 = zext i1 %202 to i64
  %cond329 = select i1 %202, i32 3, i32 0
  br label %cond.end792

cond.false330:                                    ; preds = %cond.false313
  %204 = load i8*, i8** %uc, align 8
  %arrayidx331 = getelementptr inbounds i8, i8* %204, i64 0
  %205 = load i8, i8* %arrayidx331, align 1
  %conv332 = zext i8 %205 to i32
  %cmp333 = icmp eq i32 206, %conv332
  br i1 %cmp333, label %cond.true335, label %cond.false467

cond.true335:                                     ; preds = %cond.false330
  %206 = load i8*, i8** %uc, align 8
  %arrayidx336 = getelementptr inbounds i8, i8* %206, i64 1
  %207 = load i8, i8* %arrayidx336, align 1
  %conv337 = zext i8 %207 to i32
  %and338 = and i32 %conv337, 253
  %cmp339 = icmp eq i32 %and338, 172
  br i1 %cmp339, label %cond.true341, label %cond.false353

cond.true341:                                     ; preds = %cond.true335
  %208 = load i8*, i8** %uc, align 8
  %arrayidx342 = getelementptr inbounds i8, i8* %208, i64 2
  %209 = load i8, i8* %arrayidx342, align 1
  %conv343 = zext i8 %209 to i32
  %cmp344 = icmp eq i32 206, %conv343
  br i1 %cmp344, label %land.rhs346, label %land.end351

land.rhs346:                                      ; preds = %cond.true341
  %210 = load i8*, i8** %uc, align 8
  %arrayidx347 = getelementptr inbounds i8, i8* %210, i64 3
  %211 = load i8, i8* %arrayidx347, align 1
  %conv348 = zext i8 %211 to i32
  %cmp349 = icmp eq i32 185, %conv348
  br label %land.end351

land.end351:                                      ; preds = %land.rhs346, %cond.true341
  %212 = phi i1 [ false, %cond.true341 ], [ %cmp349, %land.rhs346 ]
  %213 = zext i1 %212 to i64
  %cond352 = select i1 %212, i32 4, i32 0
  br label %cond.end465

cond.false353:                                    ; preds = %cond.true335
  %214 = load i8*, i8** %uc, align 8
  %arrayidx354 = getelementptr inbounds i8, i8* %214, i64 1
  %215 = load i8, i8* %arrayidx354, align 1
  %conv355 = zext i8 %215 to i32
  %cmp356 = icmp eq i32 177, %conv355
  br i1 %cmp356, label %cond.true363, label %lor.lhs.false358

lor.lhs.false358:                                 ; preds = %cond.false353
  %216 = load i8*, i8** %uc, align 8
  %arrayidx359 = getelementptr inbounds i8, i8* %216, i64 1
  %217 = load i8, i8* %arrayidx359, align 1
  %conv360 = zext i8 %217 to i32
  %cmp361 = icmp eq i32 183, %conv360
  br i1 %cmp361, label %cond.true363, label %cond.false402

cond.true363:                                     ; preds = %lor.lhs.false358, %cond.false353
  %218 = load i8*, i8** %uc, align 8
  %arrayidx364 = getelementptr inbounds i8, i8* %218, i64 2
  %219 = load i8, i8* %arrayidx364, align 1
  %conv365 = zext i8 %219 to i32
  %cmp366 = icmp eq i32 205, %conv365
  br i1 %cmp366, label %cond.true368, label %cond.false388

cond.true368:                                     ; preds = %cond.true363
  %220 = load i8*, i8** %uc, align 8
  %arrayidx369 = getelementptr inbounds i8, i8* %220, i64 3
  %221 = load i8, i8* %arrayidx369, align 1
  %conv370 = zext i8 %221 to i32
  %cmp371 = icmp eq i32 130, %conv370
  br i1 %cmp371, label %cond.true373, label %cond.false385

cond.true373:                                     ; preds = %cond.true368
  %222 = load i8*, i8** %uc, align 8
  %arrayidx374 = getelementptr inbounds i8, i8* %222, i64 4
  %223 = load i8, i8* %arrayidx374, align 1
  %conv375 = zext i8 %223 to i32
  %cmp376 = icmp eq i32 206, %conv375
  br i1 %cmp376, label %land.rhs378, label %land.end383

land.rhs378:                                      ; preds = %cond.true373
  %224 = load i8*, i8** %uc, align 8
  %arrayidx379 = getelementptr inbounds i8, i8* %224, i64 5
  %225 = load i8, i8* %arrayidx379, align 1
  %conv380 = zext i8 %225 to i32
  %cmp381 = icmp eq i32 185, %conv380
  br label %land.end383

land.end383:                                      ; preds = %land.rhs378, %cond.true373
  %226 = phi i1 [ false, %cond.true373 ], [ %cmp381, %land.rhs378 ]
  %227 = zext i1 %226 to i64
  %cond384 = select i1 %226, i32 6, i32 4
  br label %cond.end386

cond.false385:                                    ; preds = %cond.true368
  br label %cond.end386

cond.end386:                                      ; preds = %cond.false385, %land.end383
  %cond387 = phi i32 [ %cond384, %land.end383 ], [ 0, %cond.false385 ]
  br label %cond.end400

cond.false388:                                    ; preds = %cond.true363
  %228 = load i8*, i8** %uc, align 8
  %arrayidx389 = getelementptr inbounds i8, i8* %228, i64 2
  %229 = load i8, i8* %arrayidx389, align 1
  %conv390 = zext i8 %229 to i32
  %cmp391 = icmp eq i32 206, %conv390
  br i1 %cmp391, label %land.rhs393, label %land.end398

land.rhs393:                                      ; preds = %cond.false388
  %230 = load i8*, i8** %uc, align 8
  %arrayidx394 = getelementptr inbounds i8, i8* %230, i64 3
  %231 = load i8, i8* %arrayidx394, align 1
  %conv395 = zext i8 %231 to i32
  %cmp396 = icmp eq i32 185, %conv395
  br label %land.end398

land.end398:                                      ; preds = %land.rhs393, %cond.false388
  %232 = phi i1 [ false, %cond.false388 ], [ %cmp396, %land.rhs393 ]
  %233 = zext i1 %232 to i64
  %cond399 = select i1 %232, i32 4, i32 0
  br label %cond.end400

cond.end400:                                      ; preds = %land.end398, %cond.end386
  %cond401 = phi i32 [ %cond387, %cond.end386 ], [ %cond399, %land.end398 ]
  br label %cond.end463

cond.false402:                                    ; preds = %lor.lhs.false358
  %234 = load i8*, i8** %uc, align 8
  %arrayidx403 = getelementptr inbounds i8, i8* %234, i64 1
  %235 = load i8, i8* %arrayidx403, align 1
  %conv404 = zext i8 %235 to i32
  %cmp405 = icmp eq i32 185, %conv404
  br i1 %cmp405, label %cond.true407, label %cond.false460

cond.true407:                                     ; preds = %cond.false402
  %236 = load i8*, i8** %uc, align 8
  %arrayidx408 = getelementptr inbounds i8, i8* %236, i64 2
  %237 = load i8, i8* %arrayidx408, align 1
  %conv409 = zext i8 %237 to i32
  %cmp410 = icmp eq i32 204, %conv409
  br i1 %cmp410, label %cond.true412, label %cond.false446

cond.true412:                                     ; preds = %cond.true407
  %238 = load i8*, i8** %uc, align 8
  %arrayidx413 = getelementptr inbounds i8, i8* %238, i64 3
  %239 = load i8, i8* %arrayidx413, align 1
  %conv414 = zext i8 %239 to i32
  %cmp415 = icmp eq i32 136, %conv414
  br i1 %cmp415, label %cond.true417, label %cond.false443

cond.true417:                                     ; preds = %cond.true412
  %240 = load i8*, i8** %uc, align 8
  %arrayidx418 = getelementptr inbounds i8, i8* %240, i64 4
  %241 = load i8, i8* %arrayidx418, align 1
  %conv419 = zext i8 %241 to i32
  %cmp420 = icmp eq i32 204, %conv419
  br i1 %cmp420, label %cond.true422, label %cond.false429

cond.true422:                                     ; preds = %cond.true417
  %242 = load i8*, i8** %uc, align 8
  %arrayidx423 = getelementptr inbounds i8, i8* %242, i64 5
  %243 = load i8, i8* %arrayidx423, align 1
  %conv424 = zext i8 %243 to i32
  %and425 = and i32 %conv424, 254
  %cmp426 = icmp eq i32 %and425, 128
  %244 = zext i1 %cmp426 to i64
  %cond428 = select i1 %cmp426, i32 6, i32 0
  br label %cond.end441

cond.false429:                                    ; preds = %cond.true417
  %245 = load i8*, i8** %uc, align 8
  %arrayidx430 = getelementptr inbounds i8, i8* %245, i64 4
  %246 = load i8, i8* %arrayidx430, align 1
  %conv431 = zext i8 %246 to i32
  %cmp432 = icmp eq i32 205, %conv431
  br i1 %cmp432, label %land.rhs434, label %land.end439

land.rhs434:                                      ; preds = %cond.false429
  %247 = load i8*, i8** %uc, align 8
  %arrayidx435 = getelementptr inbounds i8, i8* %247, i64 5
  %248 = load i8, i8* %arrayidx435, align 1
  %conv436 = zext i8 %248 to i32
  %cmp437 = icmp eq i32 130, %conv436
  br label %land.end439

land.end439:                                      ; preds = %land.rhs434, %cond.false429
  %249 = phi i1 [ false, %cond.false429 ], [ %cmp437, %land.rhs434 ]
  %250 = zext i1 %249 to i64
  %cond440 = select i1 %249, i32 6, i32 0
  br label %cond.end441

cond.end441:                                      ; preds = %land.end439, %cond.true422
  %cond442 = phi i32 [ %cond428, %cond.true422 ], [ %cond440, %land.end439 ]
  br label %cond.end444

cond.false443:                                    ; preds = %cond.true412
  br label %cond.end444

cond.end444:                                      ; preds = %cond.false443, %cond.end441
  %cond445 = phi i32 [ %cond442, %cond.end441 ], [ 0, %cond.false443 ]
  br label %cond.end458

cond.false446:                                    ; preds = %cond.true407
  %251 = load i8*, i8** %uc, align 8
  %arrayidx447 = getelementptr inbounds i8, i8* %251, i64 2
  %252 = load i8, i8* %arrayidx447, align 1
  %conv448 = zext i8 %252 to i32
  %cmp449 = icmp eq i32 205, %conv448
  br i1 %cmp449, label %land.rhs451, label %land.end456

land.rhs451:                                      ; preds = %cond.false446
  %253 = load i8*, i8** %uc, align 8
  %arrayidx452 = getelementptr inbounds i8, i8* %253, i64 3
  %254 = load i8, i8* %arrayidx452, align 1
  %conv453 = zext i8 %254 to i32
  %cmp454 = icmp eq i32 130, %conv453
  br label %land.end456

land.end456:                                      ; preds = %land.rhs451, %cond.false446
  %255 = phi i1 [ false, %cond.false446 ], [ %cmp454, %land.rhs451 ]
  %256 = zext i1 %255 to i64
  %cond457 = select i1 %255, i32 4, i32 0
  br label %cond.end458

cond.end458:                                      ; preds = %land.end456, %cond.end444
  %cond459 = phi i32 [ %cond445, %cond.end444 ], [ %cond457, %land.end456 ]
  br label %cond.end461

cond.false460:                                    ; preds = %cond.false402
  br label %cond.end461

cond.end461:                                      ; preds = %cond.false460, %cond.end458
  %cond462 = phi i32 [ %cond459, %cond.end458 ], [ 0, %cond.false460 ]
  br label %cond.end463

cond.end463:                                      ; preds = %cond.end461, %cond.end400
  %cond464 = phi i32 [ %cond401, %cond.end400 ], [ %cond462, %cond.end461 ]
  br label %cond.end465

cond.end465:                                      ; preds = %cond.end463, %land.end351
  %cond466 = phi i32 [ %cond352, %land.end351 ], [ %cond464, %cond.end463 ]
  br label %cond.end790

cond.false467:                                    ; preds = %cond.false330
  %257 = load i8*, i8** %uc, align 8
  %arrayidx468 = getelementptr inbounds i8, i8* %257, i64 0
  %258 = load i8, i8* %arrayidx468, align 1
  %conv469 = zext i8 %258 to i32
  %cmp470 = icmp eq i32 207, %conv469
  br i1 %cmp470, label %cond.true472, label %cond.false647

cond.true472:                                     ; preds = %cond.false467
  %259 = load i8*, i8** %uc, align 8
  %arrayidx473 = getelementptr inbounds i8, i8* %259, i64 1
  %260 = load i8, i8* %arrayidx473, align 1
  %conv474 = zext i8 %260 to i32
  %cmp475 = icmp eq i32 129, %conv474
  br i1 %cmp475, label %cond.true477, label %cond.false489

cond.true477:                                     ; preds = %cond.true472
  %261 = load i8*, i8** %uc, align 8
  %arrayidx478 = getelementptr inbounds i8, i8* %261, i64 2
  %262 = load i8, i8* %arrayidx478, align 1
  %conv479 = zext i8 %262 to i32
  %cmp480 = icmp eq i32 204, %conv479
  br i1 %cmp480, label %land.rhs482, label %land.end487

land.rhs482:                                      ; preds = %cond.true477
  %263 = load i8*, i8** %uc, align 8
  %arrayidx483 = getelementptr inbounds i8, i8* %263, i64 3
  %264 = load i8, i8* %arrayidx483, align 1
  %conv484 = zext i8 %264 to i32
  %cmp485 = icmp eq i32 147, %conv484
  br label %land.end487

land.end487:                                      ; preds = %land.rhs482, %cond.true477
  %265 = phi i1 [ false, %cond.true477 ], [ %cmp485, %land.rhs482 ]
  %266 = zext i1 %265 to i64
  %cond488 = select i1 %265, i32 4, i32 0
  br label %cond.end645

cond.false489:                                    ; preds = %cond.true472
  %267 = load i8*, i8** %uc, align 8
  %arrayidx490 = getelementptr inbounds i8, i8* %267, i64 1
  %268 = load i8, i8* %arrayidx490, align 1
  %conv491 = zext i8 %268 to i32
  %cmp492 = icmp eq i32 133, %conv491
  br i1 %cmp492, label %cond.true494, label %cond.false580

cond.true494:                                     ; preds = %cond.false489
  %269 = load i8*, i8** %uc, align 8
  %arrayidx495 = getelementptr inbounds i8, i8* %269, i64 2
  %270 = load i8, i8* %arrayidx495, align 1
  %conv496 = zext i8 %270 to i32
  %cmp497 = icmp eq i32 204, %conv496
  br i1 %cmp497, label %cond.true499, label %cond.false566

cond.true499:                                     ; preds = %cond.true494
  %271 = load i8*, i8** %uc, align 8
  %arrayidx500 = getelementptr inbounds i8, i8* %271, i64 3
  %272 = load i8, i8* %arrayidx500, align 1
  %conv501 = zext i8 %272 to i32
  %cmp502 = icmp eq i32 136, %conv501
  br i1 %cmp502, label %cond.true504, label %cond.false530

cond.true504:                                     ; preds = %cond.true499
  %273 = load i8*, i8** %uc, align 8
  %arrayidx505 = getelementptr inbounds i8, i8* %273, i64 4
  %274 = load i8, i8* %arrayidx505, align 1
  %conv506 = zext i8 %274 to i32
  %cmp507 = icmp eq i32 204, %conv506
  br i1 %cmp507, label %cond.true509, label %cond.false516

cond.true509:                                     ; preds = %cond.true504
  %275 = load i8*, i8** %uc, align 8
  %arrayidx510 = getelementptr inbounds i8, i8* %275, i64 5
  %276 = load i8, i8* %arrayidx510, align 1
  %conv511 = zext i8 %276 to i32
  %and512 = and i32 %conv511, 254
  %cmp513 = icmp eq i32 %and512, 128
  %277 = zext i1 %cmp513 to i64
  %cond515 = select i1 %cmp513, i32 6, i32 0
  br label %cond.end528

cond.false516:                                    ; preds = %cond.true504
  %278 = load i8*, i8** %uc, align 8
  %arrayidx517 = getelementptr inbounds i8, i8* %278, i64 4
  %279 = load i8, i8* %arrayidx517, align 1
  %conv518 = zext i8 %279 to i32
  %cmp519 = icmp eq i32 205, %conv518
  br i1 %cmp519, label %land.rhs521, label %land.end526

land.rhs521:                                      ; preds = %cond.false516
  %280 = load i8*, i8** %uc, align 8
  %arrayidx522 = getelementptr inbounds i8, i8* %280, i64 5
  %281 = load i8, i8* %arrayidx522, align 1
  %conv523 = zext i8 %281 to i32
  %cmp524 = icmp eq i32 130, %conv523
  br label %land.end526

land.end526:                                      ; preds = %land.rhs521, %cond.false516
  %282 = phi i1 [ false, %cond.false516 ], [ %cmp524, %land.rhs521 ]
  %283 = zext i1 %282 to i64
  %cond527 = select i1 %282, i32 6, i32 0
  br label %cond.end528

cond.end528:                                      ; preds = %land.end526, %cond.true509
  %cond529 = phi i32 [ %cond515, %cond.true509 ], [ %cond527, %land.end526 ]
  br label %cond.end564

cond.false530:                                    ; preds = %cond.true499
  %284 = load i8*, i8** %uc, align 8
  %arrayidx531 = getelementptr inbounds i8, i8* %284, i64 3
  %285 = load i8, i8* %arrayidx531, align 1
  %conv532 = zext i8 %285 to i32
  %cmp533 = icmp eq i32 147, %conv532
  br i1 %cmp533, label %cond.true535, label %cond.false561

cond.true535:                                     ; preds = %cond.false530
  %286 = load i8*, i8** %uc, align 8
  %arrayidx536 = getelementptr inbounds i8, i8* %286, i64 4
  %287 = load i8, i8* %arrayidx536, align 1
  %conv537 = zext i8 %287 to i32
  %cmp538 = icmp eq i32 204, %conv537
  br i1 %cmp538, label %cond.true540, label %cond.false547

cond.true540:                                     ; preds = %cond.true535
  %288 = load i8*, i8** %uc, align 8
  %arrayidx541 = getelementptr inbounds i8, i8* %288, i64 5
  %289 = load i8, i8* %arrayidx541, align 1
  %conv542 = zext i8 %289 to i32
  %and543 = and i32 %conv542, 254
  %cmp544 = icmp eq i32 %and543, 128
  %290 = zext i1 %cmp544 to i64
  %cond546 = select i1 %cmp544, i32 6, i32 4
  br label %cond.end559

cond.false547:                                    ; preds = %cond.true535
  %291 = load i8*, i8** %uc, align 8
  %arrayidx548 = getelementptr inbounds i8, i8* %291, i64 4
  %292 = load i8, i8* %arrayidx548, align 1
  %conv549 = zext i8 %292 to i32
  %cmp550 = icmp eq i32 205, %conv549
  br i1 %cmp550, label %land.rhs552, label %land.end557

land.rhs552:                                      ; preds = %cond.false547
  %293 = load i8*, i8** %uc, align 8
  %arrayidx553 = getelementptr inbounds i8, i8* %293, i64 5
  %294 = load i8, i8* %arrayidx553, align 1
  %conv554 = zext i8 %294 to i32
  %cmp555 = icmp eq i32 130, %conv554
  br label %land.end557

land.end557:                                      ; preds = %land.rhs552, %cond.false547
  %295 = phi i1 [ false, %cond.false547 ], [ %cmp555, %land.rhs552 ]
  %296 = zext i1 %295 to i64
  %cond558 = select i1 %295, i32 6, i32 4
  br label %cond.end559

cond.end559:                                      ; preds = %land.end557, %cond.true540
  %cond560 = phi i32 [ %cond546, %cond.true540 ], [ %cond558, %land.end557 ]
  br label %cond.end562

cond.false561:                                    ; preds = %cond.false530
  br label %cond.end562

cond.end562:                                      ; preds = %cond.false561, %cond.end559
  %cond563 = phi i32 [ %cond560, %cond.end559 ], [ 0, %cond.false561 ]
  br label %cond.end564

cond.end564:                                      ; preds = %cond.end562, %cond.end528
  %cond565 = phi i32 [ %cond529, %cond.end528 ], [ %cond563, %cond.end562 ]
  br label %cond.end578

cond.false566:                                    ; preds = %cond.true494
  %297 = load i8*, i8** %uc, align 8
  %arrayidx567 = getelementptr inbounds i8, i8* %297, i64 2
  %298 = load i8, i8* %arrayidx567, align 1
  %conv568 = zext i8 %298 to i32
  %cmp569 = icmp eq i32 205, %conv568
  br i1 %cmp569, label %land.rhs571, label %land.end576

land.rhs571:                                      ; preds = %cond.false566
  %299 = load i8*, i8** %uc, align 8
  %arrayidx572 = getelementptr inbounds i8, i8* %299, i64 3
  %300 = load i8, i8* %arrayidx572, align 1
  %conv573 = zext i8 %300 to i32
  %cmp574 = icmp eq i32 130, %conv573
  br label %land.end576

land.end576:                                      ; preds = %land.rhs571, %cond.false566
  %301 = phi i1 [ false, %cond.false566 ], [ %cmp574, %land.rhs571 ]
  %302 = zext i1 %301 to i64
  %cond577 = select i1 %301, i32 4, i32 0
  br label %cond.end578

cond.end578:                                      ; preds = %land.end576, %cond.end564
  %cond579 = phi i32 [ %cond565, %cond.end564 ], [ %cond577, %land.end576 ]
  br label %cond.end643

cond.false580:                                    ; preds = %cond.false489
  %303 = load i8*, i8** %uc, align 8
  %arrayidx581 = getelementptr inbounds i8, i8* %303, i64 1
  %304 = load i8, i8* %arrayidx581, align 1
  %conv582 = zext i8 %304 to i32
  %cmp583 = icmp eq i32 137, %conv582
  br i1 %cmp583, label %cond.true585, label %cond.false624

cond.true585:                                     ; preds = %cond.false580
  %305 = load i8*, i8** %uc, align 8
  %arrayidx586 = getelementptr inbounds i8, i8* %305, i64 2
  %306 = load i8, i8* %arrayidx586, align 1
  %conv587 = zext i8 %306 to i32
  %cmp588 = icmp eq i32 205, %conv587
  br i1 %cmp588, label %cond.true590, label %cond.false610

cond.true590:                                     ; preds = %cond.true585
  %307 = load i8*, i8** %uc, align 8
  %arrayidx591 = getelementptr inbounds i8, i8* %307, i64 3
  %308 = load i8, i8* %arrayidx591, align 1
  %conv592 = zext i8 %308 to i32
  %cmp593 = icmp eq i32 130, %conv592
  br i1 %cmp593, label %cond.true595, label %cond.false607

cond.true595:                                     ; preds = %cond.true590
  %309 = load i8*, i8** %uc, align 8
  %arrayidx596 = getelementptr inbounds i8, i8* %309, i64 4
  %310 = load i8, i8* %arrayidx596, align 1
  %conv597 = zext i8 %310 to i32
  %cmp598 = icmp eq i32 206, %conv597
  br i1 %cmp598, label %land.rhs600, label %land.end605

land.rhs600:                                      ; preds = %cond.true595
  %311 = load i8*, i8** %uc, align 8
  %arrayidx601 = getelementptr inbounds i8, i8* %311, i64 5
  %312 = load i8, i8* %arrayidx601, align 1
  %conv602 = zext i8 %312 to i32
  %cmp603 = icmp eq i32 185, %conv602
  br label %land.end605

land.end605:                                      ; preds = %land.rhs600, %cond.true595
  %313 = phi i1 [ false, %cond.true595 ], [ %cmp603, %land.rhs600 ]
  %314 = zext i1 %313 to i64
  %cond606 = select i1 %313, i32 6, i32 4
  br label %cond.end608

cond.false607:                                    ; preds = %cond.true590
  br label %cond.end608

cond.end608:                                      ; preds = %cond.false607, %land.end605
  %cond609 = phi i32 [ %cond606, %land.end605 ], [ 0, %cond.false607 ]
  br label %cond.end622

cond.false610:                                    ; preds = %cond.true585
  %315 = load i8*, i8** %uc, align 8
  %arrayidx611 = getelementptr inbounds i8, i8* %315, i64 2
  %316 = load i8, i8* %arrayidx611, align 1
  %conv612 = zext i8 %316 to i32
  %cmp613 = icmp eq i32 206, %conv612
  br i1 %cmp613, label %land.rhs615, label %land.end620

land.rhs615:                                      ; preds = %cond.false610
  %317 = load i8*, i8** %uc, align 8
  %arrayidx616 = getelementptr inbounds i8, i8* %317, i64 3
  %318 = load i8, i8* %arrayidx616, align 1
  %conv617 = zext i8 %318 to i32
  %cmp618 = icmp eq i32 185, %conv617
  br label %land.end620

land.end620:                                      ; preds = %land.rhs615, %cond.false610
  %319 = phi i1 [ false, %cond.false610 ], [ %cmp618, %land.rhs615 ]
  %320 = zext i1 %319 to i64
  %cond621 = select i1 %319, i32 4, i32 0
  br label %cond.end622

cond.end622:                                      ; preds = %land.end620, %cond.end608
  %cond623 = phi i32 [ %cond609, %cond.end608 ], [ %cond621, %land.end620 ]
  br label %cond.end641

cond.false624:                                    ; preds = %cond.false580
  %321 = load i8*, i8** %uc, align 8
  %arrayidx625 = getelementptr inbounds i8, i8* %321, i64 1
  %322 = load i8, i8* %arrayidx625, align 1
  %conv626 = zext i8 %322 to i32
  %cmp627 = icmp eq i32 142, %conv626
  br i1 %cmp627, label %land.lhs.true629, label %land.end639

land.lhs.true629:                                 ; preds = %cond.false624
  %323 = load i8*, i8** %uc, align 8
  %arrayidx630 = getelementptr inbounds i8, i8* %323, i64 2
  %324 = load i8, i8* %arrayidx630, align 1
  %conv631 = zext i8 %324 to i32
  %cmp632 = icmp eq i32 206, %conv631
  br i1 %cmp632, label %land.rhs634, label %land.end639

land.rhs634:                                      ; preds = %land.lhs.true629
  %325 = load i8*, i8** %uc, align 8
  %arrayidx635 = getelementptr inbounds i8, i8* %325, i64 3
  %326 = load i8, i8* %arrayidx635, align 1
  %conv636 = zext i8 %326 to i32
  %cmp637 = icmp eq i32 185, %conv636
  br label %land.end639

land.end639:                                      ; preds = %land.rhs634, %land.lhs.true629, %cond.false624
  %327 = phi i1 [ false, %land.lhs.true629 ], [ false, %cond.false624 ], [ %cmp637, %land.rhs634 ]
  %328 = zext i1 %327 to i64
  %cond640 = select i1 %327, i32 4, i32 0
  br label %cond.end641

cond.end641:                                      ; preds = %land.end639, %cond.end622
  %cond642 = phi i32 [ %cond623, %cond.end622 ], [ %cond640, %land.end639 ]
  br label %cond.end643

cond.end643:                                      ; preds = %cond.end641, %cond.end578
  %cond644 = phi i32 [ %cond579, %cond.end578 ], [ %cond642, %cond.end641 ]
  br label %cond.end645

cond.end645:                                      ; preds = %cond.end643, %land.end487
  %cond646 = phi i32 [ %cond488, %land.end487 ], [ %cond644, %cond.end643 ]
  br label %cond.end788

cond.false647:                                    ; preds = %cond.false467
  %329 = load i8*, i8** %uc, align 8
  %arrayidx648 = getelementptr inbounds i8, i8* %329, i64 0
  %330 = load i8, i8* %arrayidx648, align 1
  %conv649 = zext i8 %330 to i32
  %cmp650 = icmp eq i32 213, %conv649
  br i1 %cmp650, label %cond.true652, label %cond.false719

cond.true652:                                     ; preds = %cond.false647
  %331 = load i8*, i8** %uc, align 8
  %arrayidx653 = getelementptr inbounds i8, i8* %331, i64 1
  %332 = load i8, i8* %arrayidx653, align 1
  %conv654 = zext i8 %332 to i32
  %cmp655 = icmp eq i32 165, %conv654
  br i1 %cmp655, label %cond.true657, label %cond.false669

cond.true657:                                     ; preds = %cond.true652
  %333 = load i8*, i8** %uc, align 8
  %arrayidx658 = getelementptr inbounds i8, i8* %333, i64 2
  %334 = load i8, i8* %arrayidx658, align 1
  %conv659 = zext i8 %334 to i32
  %cmp660 = icmp eq i32 214, %conv659
  br i1 %cmp660, label %land.rhs662, label %land.end667

land.rhs662:                                      ; preds = %cond.true657
  %335 = load i8*, i8** %uc, align 8
  %arrayidx663 = getelementptr inbounds i8, i8* %335, i64 3
  %336 = load i8, i8* %arrayidx663, align 1
  %conv664 = zext i8 %336 to i32
  %cmp665 = icmp eq i32 130, %conv664
  br label %land.end667

land.end667:                                      ; preds = %land.rhs662, %cond.true657
  %337 = phi i1 [ false, %cond.true657 ], [ %cmp665, %land.rhs662 ]
  %338 = zext i1 %337 to i64
  %cond668 = select i1 %337, i32 4, i32 0
  br label %cond.end717

cond.false669:                                    ; preds = %cond.true652
  %339 = load i8*, i8** %uc, align 8
  %arrayidx670 = getelementptr inbounds i8, i8* %339, i64 1
  %340 = load i8, i8* %arrayidx670, align 1
  %conv671 = zext i8 %340 to i32
  %cmp672 = icmp eq i32 180, %conv671
  br i1 %cmp672, label %cond.true674, label %cond.false698

cond.true674:                                     ; preds = %cond.false669
  %341 = load i8*, i8** %uc, align 8
  %arrayidx675 = getelementptr inbounds i8, i8* %341, i64 2
  %342 = load i8, i8* %arrayidx675, align 1
  %conv676 = zext i8 %342 to i32
  %cmp677 = icmp eq i32 213, %conv676
  br i1 %cmp677, label %land.rhs679, label %land.end696

land.rhs679:                                      ; preds = %cond.true674
  %343 = load i8*, i8** %uc, align 8
  %arrayidx680 = getelementptr inbounds i8, i8* %343, i64 3
  %344 = load i8, i8* %arrayidx680, align 1
  %conv681 = zext i8 %344 to i32
  %and682 = and i32 %conv681, 247
  %cmp683 = icmp eq i32 %and682, 165
  br i1 %cmp683, label %lor.end695, label %lor.lhs.false685

lor.lhs.false685:                                 ; preds = %land.rhs679
  %345 = load i8*, i8** %uc, align 8
  %arrayidx686 = getelementptr inbounds i8, i8* %345, i64 3
  %346 = load i8, i8* %arrayidx686, align 1
  %conv687 = zext i8 %346 to i32
  %cmp688 = icmp eq i32 %conv687, 171
  br i1 %cmp688, label %lor.end695, label %lor.rhs690

lor.rhs690:                                       ; preds = %lor.lhs.false685
  %347 = load i8*, i8** %uc, align 8
  %arrayidx691 = getelementptr inbounds i8, i8* %347, i64 3
  %348 = load i8, i8* %arrayidx691, align 1
  %conv692 = zext i8 %348 to i32
  %cmp693 = icmp eq i32 %conv692, 182
  br label %lor.end695

lor.end695:                                       ; preds = %lor.rhs690, %lor.lhs.false685, %land.rhs679
  %349 = phi i1 [ true, %lor.lhs.false685 ], [ true, %land.rhs679 ], [ %cmp693, %lor.rhs690 ]
  br label %land.end696

land.end696:                                      ; preds = %lor.end695, %cond.true674
  %350 = phi i1 [ false, %cond.true674 ], [ %349, %lor.end695 ]
  %351 = zext i1 %350 to i64
  %cond697 = select i1 %350, i32 4, i32 0
  br label %cond.end715

cond.false698:                                    ; preds = %cond.false669
  %352 = load i8*, i8** %uc, align 8
  %arrayidx699 = getelementptr inbounds i8, i8* %352, i64 1
  %353 = load i8, i8* %arrayidx699, align 1
  %conv700 = zext i8 %353 to i32
  %cmp701 = icmp eq i32 190, %conv700
  br i1 %cmp701, label %land.lhs.true703, label %land.end713

land.lhs.true703:                                 ; preds = %cond.false698
  %354 = load i8*, i8** %uc, align 8
  %arrayidx704 = getelementptr inbounds i8, i8* %354, i64 2
  %355 = load i8, i8* %arrayidx704, align 1
  %conv705 = zext i8 %355 to i32
  %cmp706 = icmp eq i32 213, %conv705
  br i1 %cmp706, label %land.rhs708, label %land.end713

land.rhs708:                                      ; preds = %land.lhs.true703
  %356 = load i8*, i8** %uc, align 8
  %arrayidx709 = getelementptr inbounds i8, i8* %356, i64 3
  %357 = load i8, i8* %arrayidx709, align 1
  %conv710 = zext i8 %357 to i32
  %cmp711 = icmp eq i32 182, %conv710
  br label %land.end713

land.end713:                                      ; preds = %land.rhs708, %land.lhs.true703, %cond.false698
  %358 = phi i1 [ false, %land.lhs.true703 ], [ false, %cond.false698 ], [ %cmp711, %land.rhs708 ]
  %359 = zext i1 %358 to i64
  %cond714 = select i1 %358, i32 4, i32 0
  br label %cond.end715

cond.end715:                                      ; preds = %land.end713, %land.end696
  %cond716 = phi i32 [ %cond697, %land.end696 ], [ %cond714, %land.end713 ]
  br label %cond.end717

cond.end717:                                      ; preds = %cond.end715, %land.end667
  %cond718 = phi i32 [ %cond668, %land.end667 ], [ %cond716, %cond.end715 ]
  br label %cond.end786

cond.false719:                                    ; preds = %cond.false647
  %360 = load i8*, i8** %uc, align 8
  %arrayidx720 = getelementptr inbounds i8, i8* %360, i64 0
  %361 = load i8, i8* %arrayidx720, align 1
  %conv721 = zext i8 %361 to i32
  %cmp722 = icmp eq i32 225, %conv721
  br i1 %cmp722, label %cond.true724, label %cond.false783

cond.true724:                                     ; preds = %cond.false719
  %362 = load i8*, i8** %uc, align 8
  %arrayidx725 = getelementptr inbounds i8, i8* %362, i64 1
  %363 = load i8, i8* %arrayidx725, align 1
  %conv726 = zext i8 %363 to i32
  %cmp727 = icmp eq i32 188, %conv726
  br i1 %cmp727, label %cond.true729, label %cond.false747

cond.true729:                                     ; preds = %cond.true724
  %364 = load i8*, i8** %uc, align 8
  %arrayidx730 = getelementptr inbounds i8, i8* %364, i64 2
  %365 = load i8, i8* %arrayidx730, align 1
  %conv731 = zext i8 %365 to i32
  %and732 = and i32 %conv731, 216
  %cmp733 = icmp eq i32 %and732, 128
  br i1 %cmp733, label %land.lhs.true735, label %land.end745

land.lhs.true735:                                 ; preds = %cond.true729
  %366 = load i8*, i8** %uc, align 8
  %arrayidx736 = getelementptr inbounds i8, i8* %366, i64 3
  %367 = load i8, i8* %arrayidx736, align 1
  %conv737 = zext i8 %367 to i32
  %cmp738 = icmp eq i32 206, %conv737
  br i1 %cmp738, label %land.rhs740, label %land.end745

land.rhs740:                                      ; preds = %land.lhs.true735
  %368 = load i8*, i8** %uc, align 8
  %arrayidx741 = getelementptr inbounds i8, i8* %368, i64 4
  %369 = load i8, i8* %arrayidx741, align 1
  %conv742 = zext i8 %369 to i32
  %cmp743 = icmp eq i32 185, %conv742
  br label %land.end745

land.end745:                                      ; preds = %land.rhs740, %land.lhs.true735, %cond.true729
  %370 = phi i1 [ false, %land.lhs.true735 ], [ false, %cond.true729 ], [ %cmp743, %land.rhs740 ]
  %371 = zext i1 %370 to i64
  %cond746 = select i1 %370, i32 5, i32 0
  br label %cond.end781

cond.false747:                                    ; preds = %cond.true724
  %372 = load i8*, i8** %uc, align 8
  %arrayidx748 = getelementptr inbounds i8, i8* %372, i64 1
  %373 = load i8, i8* %arrayidx748, align 1
  %conv749 = zext i8 %373 to i32
  %cmp750 = icmp eq i32 189, %conv749
  br i1 %cmp750, label %land.lhs.true752, label %land.end779

land.lhs.true752:                                 ; preds = %cond.false747
  %374 = load i8*, i8** %uc, align 8
  %arrayidx753 = getelementptr inbounds i8, i8* %374, i64 2
  %375 = load i8, i8* %arrayidx753, align 1
  %conv754 = zext i8 %375 to i32
  %and755 = and i32 %conv754, 248
  %cmp756 = icmp eq i32 %and755, 160
  br i1 %cmp756, label %land.lhs.true769, label %lor.lhs.false758

lor.lhs.false758:                                 ; preds = %land.lhs.true752
  %376 = load i8*, i8** %uc, align 8
  %arrayidx759 = getelementptr inbounds i8, i8* %376, i64 2
  %377 = load i8, i8* %arrayidx759, align 1
  %conv760 = zext i8 %377 to i32
  %and761 = and i32 %conv760, 251
  %cmp762 = icmp eq i32 %and761, 176
  br i1 %cmp762, label %land.lhs.true769, label %lor.lhs.false764

lor.lhs.false764:                                 ; preds = %lor.lhs.false758
  %378 = load i8*, i8** %uc, align 8
  %arrayidx765 = getelementptr inbounds i8, i8* %378, i64 2
  %379 = load i8, i8* %arrayidx765, align 1
  %conv766 = zext i8 %379 to i32
  %cmp767 = icmp eq i32 %conv766, 188
  br i1 %cmp767, label %land.lhs.true769, label %land.end779

land.lhs.true769:                                 ; preds = %lor.lhs.false764, %lor.lhs.false758, %land.lhs.true752
  %380 = load i8*, i8** %uc, align 8
  %arrayidx770 = getelementptr inbounds i8, i8* %380, i64 3
  %381 = load i8, i8* %arrayidx770, align 1
  %conv771 = zext i8 %381 to i32
  %cmp772 = icmp eq i32 206, %conv771
  br i1 %cmp772, label %land.rhs774, label %land.end779

land.rhs774:                                      ; preds = %land.lhs.true769
  %382 = load i8*, i8** %uc, align 8
  %arrayidx775 = getelementptr inbounds i8, i8* %382, i64 4
  %383 = load i8, i8* %arrayidx775, align 1
  %conv776 = zext i8 %383 to i32
  %cmp777 = icmp eq i32 185, %conv776
  br label %land.end779

land.end779:                                      ; preds = %land.rhs774, %land.lhs.true769, %lor.lhs.false764, %cond.false747
  %384 = phi i1 [ false, %land.lhs.true769 ], [ false, %lor.lhs.false764 ], [ false, %cond.false747 ], [ %cmp777, %land.rhs774 ]
  %385 = zext i1 %384 to i64
  %cond780 = select i1 %384, i32 5, i32 0
  br label %cond.end781

cond.end781:                                      ; preds = %land.end779, %land.end745
  %cond782 = phi i32 [ %cond746, %land.end745 ], [ %cond780, %land.end779 ]
  br label %cond.end784

cond.false783:                                    ; preds = %cond.false719
  br label %cond.end784

cond.end784:                                      ; preds = %cond.false783, %cond.end781
  %cond785 = phi i32 [ %cond782, %cond.end781 ], [ 0, %cond.false783 ]
  br label %cond.end786

cond.end786:                                      ; preds = %cond.end784, %cond.end717
  %cond787 = phi i32 [ %cond718, %cond.end717 ], [ %cond785, %cond.end784 ]
  br label %cond.end788

cond.end788:                                      ; preds = %cond.end786, %cond.end645
  %cond789 = phi i32 [ %cond646, %cond.end645 ], [ %cond787, %cond.end786 ]
  br label %cond.end790

cond.end790:                                      ; preds = %cond.end788, %cond.end465
  %cond791 = phi i32 [ %cond466, %cond.end465 ], [ %cond789, %cond.end788 ]
  br label %cond.end792

cond.end792:                                      ; preds = %cond.end790, %land.end328
  %cond793 = phi i32 [ %cond329, %land.end328 ], [ %cond791, %cond.end790 ]
  br label %cond.end794

cond.end794:                                      ; preds = %cond.end792, %land.end311
  %cond795 = phi i32 [ %cond312, %land.end311 ], [ %cond793, %cond.end792 ]
  br label %cond.end796

cond.end796:                                      ; preds = %cond.end794, %land.end289
  %cond797 = phi i32 [ %cond290, %land.end289 ], [ %cond795, %cond.end794 ]
  br label %cond.end798

cond.end798:                                      ; preds = %cond.end796, %land.end267
  %cond799 = phi i32 [ %cond268, %land.end267 ], [ %cond797, %cond.end796 ]
  br label %cond.end800

cond.end800:                                      ; preds = %cond.end798, %lor.end250
  %cond801 = phi i32 [ %cond251, %lor.end250 ], [ %cond799, %cond.end798 ]
  br label %cond.end802

cond.end802:                                      ; preds = %cond.end800, %land.end233
  %cond803 = phi i32 [ %cond234, %land.end233 ], [ %cond801, %cond.end800 ]
  br label %cond.end804

cond.end804:                                      ; preds = %cond.end802, %land.end216
  %cond805 = phi i32 [ %cond217, %land.end216 ], [ %cond803, %cond.end802 ]
  br label %cond.end806

cond.end806:                                      ; preds = %cond.end804, %land.end199
  %cond807 = phi i32 [ %cond200, %land.end199 ], [ %cond805, %cond.end804 ]
  br label %cond.end808

cond.end808:                                      ; preds = %cond.end806, %cond.end182
  %cond809 = phi i32 [ %cond183, %cond.end182 ], [ %cond807, %cond.end806 ]
  br label %cond.end810

cond.end810:                                      ; preds = %cond.end808, %land.end
  %cond811 = phi i32 [ %cond149, %land.end ], [ %cond809, %cond.end808 ]
  br label %cond.end2110

cond.false812:                                    ; preds = %if.then132
  %386 = load i8*, i8** %e, align 8
  %387 = load i8*, i8** %uc, align 8
  %sub.ptr.lhs.cast813 = ptrtoint i8* %386 to i64
  %sub.ptr.rhs.cast814 = ptrtoint i8* %387 to i64
  %sub.ptr.sub815 = sub i64 %sub.ptr.lhs.cast813, %sub.ptr.rhs.cast814
  %cmp816 = icmp sgt i64 %sub.ptr.sub815, 4
  br i1 %cmp816, label %cond.true818, label %cond.false1366

cond.true818:                                     ; preds = %cond.false812
  %388 = load i8*, i8** %uc, align 8
  %arrayidx819 = getelementptr inbounds i8, i8* %388, i64 0
  %389 = load i8, i8* %arrayidx819, align 1
  %conv820 = zext i8 %389 to i32
  %cmp821 = icmp eq i32 97, %conv820
  br i1 %cmp821, label %cond.true823, label %cond.false835

cond.true823:                                     ; preds = %cond.true818
  %390 = load i8*, i8** %uc, align 8
  %arrayidx824 = getelementptr inbounds i8, i8* %390, i64 1
  %391 = load i8, i8* %arrayidx824, align 1
  %conv825 = zext i8 %391 to i32
  %cmp826 = icmp eq i32 202, %conv825
  br i1 %cmp826, label %land.rhs828, label %land.end833

land.rhs828:                                      ; preds = %cond.true823
  %392 = load i8*, i8** %uc, align 8
  %arrayidx829 = getelementptr inbounds i8, i8* %392, i64 2
  %393 = load i8, i8* %arrayidx829, align 1
  %conv830 = zext i8 %393 to i32
  %cmp831 = icmp eq i32 190, %conv830
  br label %land.end833

land.end833:                                      ; preds = %land.rhs828, %cond.true823
  %394 = phi i1 [ false, %cond.true823 ], [ %cmp831, %land.rhs828 ]
  %395 = zext i1 %394 to i64
  %cond834 = select i1 %394, i32 3, i32 0
  br label %cond.end1364

cond.false835:                                    ; preds = %cond.true818
  %396 = load i8*, i8** %uc, align 8
  %arrayidx836 = getelementptr inbounds i8, i8* %396, i64 0
  %397 = load i8, i8* %arrayidx836, align 1
  %conv837 = zext i8 %397 to i32
  %cmp838 = icmp eq i32 102, %conv837
  br i1 %cmp838, label %cond.true840, label %cond.false871

cond.true840:                                     ; preds = %cond.false835
  %398 = load i8*, i8** %uc, align 8
  %arrayidx841 = getelementptr inbounds i8, i8* %398, i64 1
  %399 = load i8, i8* %arrayidx841, align 1
  %conv842 = zext i8 %399 to i32
  %cmp843 = icmp eq i32 102, %conv842
  br i1 %cmp843, label %cond.true845, label %cond.false857

cond.true845:                                     ; preds = %cond.true840
  %400 = load i8*, i8** %uc, align 8
  %arrayidx846 = getelementptr inbounds i8, i8* %400, i64 2
  %401 = load i8, i8* %arrayidx846, align 1
  %conv847 = zext i8 %401 to i32
  %cmp848 = icmp eq i32 105, %conv847
  br i1 %cmp848, label %lor.end855, label %lor.rhs850

lor.rhs850:                                       ; preds = %cond.true845
  %402 = load i8*, i8** %uc, align 8
  %arrayidx851 = getelementptr inbounds i8, i8* %402, i64 2
  %403 = load i8, i8* %arrayidx851, align 1
  %conv852 = zext i8 %403 to i32
  %cmp853 = icmp eq i32 108, %conv852
  br label %lor.end855

lor.end855:                                       ; preds = %lor.rhs850, %cond.true845
  %404 = phi i1 [ true, %cond.true845 ], [ %cmp853, %lor.rhs850 ]
  %405 = zext i1 %404 to i64
  %cond856 = select i1 %404, i32 3, i32 2
  br label %cond.end869

cond.false857:                                    ; preds = %cond.true840
  %406 = load i8*, i8** %uc, align 8
  %arrayidx858 = getelementptr inbounds i8, i8* %406, i64 1
  %407 = load i8, i8* %arrayidx858, align 1
  %conv859 = zext i8 %407 to i32
  %cmp860 = icmp eq i32 105, %conv859
  br i1 %cmp860, label %lor.end867, label %lor.rhs862

lor.rhs862:                                       ; preds = %cond.false857
  %408 = load i8*, i8** %uc, align 8
  %arrayidx863 = getelementptr inbounds i8, i8* %408, i64 1
  %409 = load i8, i8* %arrayidx863, align 1
  %conv864 = zext i8 %409 to i32
  %cmp865 = icmp eq i32 108, %conv864
  br label %lor.end867

lor.end867:                                       ; preds = %lor.rhs862, %cond.false857
  %410 = phi i1 [ true, %cond.false857 ], [ %cmp865, %lor.rhs862 ]
  %411 = zext i1 %410 to i64
  %cond868 = select i1 %410, i32 2, i32 0
  br label %cond.end869

cond.end869:                                      ; preds = %lor.end867, %lor.end855
  %cond870 = phi i32 [ %cond856, %lor.end855 ], [ %cond868, %lor.end867 ]
  br label %cond.end1362

cond.false871:                                    ; preds = %cond.false835
  %412 = load i8*, i8** %uc, align 8
  %arrayidx872 = getelementptr inbounds i8, i8* %412, i64 0
  %413 = load i8, i8* %arrayidx872, align 1
  %conv873 = zext i8 %413 to i32
  %cmp874 = icmp eq i32 104, %conv873
  br i1 %cmp874, label %cond.true876, label %cond.false888

cond.true876:                                     ; preds = %cond.false871
  %414 = load i8*, i8** %uc, align 8
  %arrayidx877 = getelementptr inbounds i8, i8* %414, i64 1
  %415 = load i8, i8* %arrayidx877, align 1
  %conv878 = zext i8 %415 to i32
  %cmp879 = icmp eq i32 204, %conv878
  br i1 %cmp879, label %land.rhs881, label %land.end886

land.rhs881:                                      ; preds = %cond.true876
  %416 = load i8*, i8** %uc, align 8
  %arrayidx882 = getelementptr inbounds i8, i8* %416, i64 2
  %417 = load i8, i8* %arrayidx882, align 1
  %conv883 = zext i8 %417 to i32
  %cmp884 = icmp eq i32 177, %conv883
  br label %land.end886

land.end886:                                      ; preds = %land.rhs881, %cond.true876
  %418 = phi i1 [ false, %cond.true876 ], [ %cmp884, %land.rhs881 ]
  %419 = zext i1 %418 to i64
  %cond887 = select i1 %418, i32 3, i32 0
  br label %cond.end1360

cond.false888:                                    ; preds = %cond.false871
  %420 = load i8*, i8** %uc, align 8
  %arrayidx889 = getelementptr inbounds i8, i8* %420, i64 0
  %421 = load i8, i8* %arrayidx889, align 1
  %conv890 = zext i8 %421 to i32
  %cmp891 = icmp eq i32 105, %conv890
  br i1 %cmp891, label %cond.true893, label %cond.false905

cond.true893:                                     ; preds = %cond.false888
  %422 = load i8*, i8** %uc, align 8
  %arrayidx894 = getelementptr inbounds i8, i8* %422, i64 1
  %423 = load i8, i8* %arrayidx894, align 1
  %conv895 = zext i8 %423 to i32
  %cmp896 = icmp eq i32 204, %conv895
  br i1 %cmp896, label %land.rhs898, label %land.end903

land.rhs898:                                      ; preds = %cond.true893
  %424 = load i8*, i8** %uc, align 8
  %arrayidx899 = getelementptr inbounds i8, i8* %424, i64 2
  %425 = load i8, i8* %arrayidx899, align 1
  %conv900 = zext i8 %425 to i32
  %cmp901 = icmp eq i32 135, %conv900
  br label %land.end903

land.end903:                                      ; preds = %land.rhs898, %cond.true893
  %426 = phi i1 [ false, %cond.true893 ], [ %cmp901, %land.rhs898 ]
  %427 = zext i1 %426 to i64
  %cond904 = select i1 %426, i32 3, i32 0
  br label %cond.end1358

cond.false905:                                    ; preds = %cond.false888
  %428 = load i8*, i8** %uc, align 8
  %arrayidx906 = getelementptr inbounds i8, i8* %428, i64 0
  %429 = load i8, i8* %arrayidx906, align 1
  %conv907 = zext i8 %429 to i32
  %cmp908 = icmp eq i32 106, %conv907
  br i1 %cmp908, label %cond.true910, label %cond.false922

cond.true910:                                     ; preds = %cond.false905
  %430 = load i8*, i8** %uc, align 8
  %arrayidx911 = getelementptr inbounds i8, i8* %430, i64 1
  %431 = load i8, i8* %arrayidx911, align 1
  %conv912 = zext i8 %431 to i32
  %cmp913 = icmp eq i32 204, %conv912
  br i1 %cmp913, label %land.rhs915, label %land.end920

land.rhs915:                                      ; preds = %cond.true910
  %432 = load i8*, i8** %uc, align 8
  %arrayidx916 = getelementptr inbounds i8, i8* %432, i64 2
  %433 = load i8, i8* %arrayidx916, align 1
  %conv917 = zext i8 %433 to i32
  %cmp918 = icmp eq i32 140, %conv917
  br label %land.end920

land.end920:                                      ; preds = %land.rhs915, %cond.true910
  %434 = phi i1 [ false, %cond.true910 ], [ %cmp918, %land.rhs915 ]
  %435 = zext i1 %434 to i64
  %cond921 = select i1 %434, i32 3, i32 0
  br label %cond.end1356

cond.false922:                                    ; preds = %cond.false905
  %436 = load i8*, i8** %uc, align 8
  %arrayidx923 = getelementptr inbounds i8, i8* %436, i64 0
  %437 = load i8, i8* %arrayidx923, align 1
  %conv924 = zext i8 %437 to i32
  %cmp925 = icmp eq i32 115, %conv924
  br i1 %cmp925, label %cond.true927, label %cond.false939

cond.true927:                                     ; preds = %cond.false922
  %438 = load i8*, i8** %uc, align 8
  %arrayidx928 = getelementptr inbounds i8, i8* %438, i64 1
  %439 = load i8, i8* %arrayidx928, align 1
  %conv929 = zext i8 %439 to i32
  %cmp930 = icmp eq i32 115, %conv929
  br i1 %cmp930, label %lor.end937, label %lor.rhs932

lor.rhs932:                                       ; preds = %cond.true927
  %440 = load i8*, i8** %uc, align 8
  %arrayidx933 = getelementptr inbounds i8, i8* %440, i64 1
  %441 = load i8, i8* %arrayidx933, align 1
  %conv934 = zext i8 %441 to i32
  %cmp935 = icmp eq i32 116, %conv934
  br label %lor.end937

lor.end937:                                       ; preds = %lor.rhs932, %cond.true927
  %442 = phi i1 [ true, %cond.true927 ], [ %cmp935, %lor.rhs932 ]
  %443 = zext i1 %442 to i64
  %cond938 = select i1 %442, i32 2, i32 0
  br label %cond.end1354

cond.false939:                                    ; preds = %cond.false922
  %444 = load i8*, i8** %uc, align 8
  %arrayidx940 = getelementptr inbounds i8, i8* %444, i64 0
  %445 = load i8, i8* %arrayidx940, align 1
  %conv941 = zext i8 %445 to i32
  %cmp942 = icmp eq i32 116, %conv941
  br i1 %cmp942, label %cond.true944, label %cond.false956

cond.true944:                                     ; preds = %cond.false939
  %446 = load i8*, i8** %uc, align 8
  %arrayidx945 = getelementptr inbounds i8, i8* %446, i64 1
  %447 = load i8, i8* %arrayidx945, align 1
  %conv946 = zext i8 %447 to i32
  %cmp947 = icmp eq i32 204, %conv946
  br i1 %cmp947, label %land.rhs949, label %land.end954

land.rhs949:                                      ; preds = %cond.true944
  %448 = load i8*, i8** %uc, align 8
  %arrayidx950 = getelementptr inbounds i8, i8* %448, i64 2
  %449 = load i8, i8* %arrayidx950, align 1
  %conv951 = zext i8 %449 to i32
  %cmp952 = icmp eq i32 136, %conv951
  br label %land.end954

land.end954:                                      ; preds = %land.rhs949, %cond.true944
  %450 = phi i1 [ false, %cond.true944 ], [ %cmp952, %land.rhs949 ]
  %451 = zext i1 %450 to i64
  %cond955 = select i1 %450, i32 3, i32 0
  br label %cond.end1352

cond.false956:                                    ; preds = %cond.false939
  %452 = load i8*, i8** %uc, align 8
  %arrayidx957 = getelementptr inbounds i8, i8* %452, i64 0
  %453 = load i8, i8* %arrayidx957, align 1
  %conv958 = zext i8 %453 to i32
  %cmp959 = icmp eq i32 119, %conv958
  br i1 %cmp959, label %cond.true966, label %lor.lhs.false961

lor.lhs.false961:                                 ; preds = %cond.false956
  %454 = load i8*, i8** %uc, align 8
  %arrayidx962 = getelementptr inbounds i8, i8* %454, i64 0
  %455 = load i8, i8* %arrayidx962, align 1
  %conv963 = zext i8 %455 to i32
  %cmp964 = icmp eq i32 121, %conv963
  br i1 %cmp964, label %cond.true966, label %cond.false978

cond.true966:                                     ; preds = %lor.lhs.false961, %cond.false956
  %456 = load i8*, i8** %uc, align 8
  %arrayidx967 = getelementptr inbounds i8, i8* %456, i64 1
  %457 = load i8, i8* %arrayidx967, align 1
  %conv968 = zext i8 %457 to i32
  %cmp969 = icmp eq i32 204, %conv968
  br i1 %cmp969, label %land.rhs971, label %land.end976

land.rhs971:                                      ; preds = %cond.true966
  %458 = load i8*, i8** %uc, align 8
  %arrayidx972 = getelementptr inbounds i8, i8* %458, i64 2
  %459 = load i8, i8* %arrayidx972, align 1
  %conv973 = zext i8 %459 to i32
  %cmp974 = icmp eq i32 138, %conv973
  br label %land.end976

land.end976:                                      ; preds = %land.rhs971, %cond.true966
  %460 = phi i1 [ false, %cond.true966 ], [ %cmp974, %land.rhs971 ]
  %461 = zext i1 %460 to i64
  %cond977 = select i1 %460, i32 3, i32 0
  br label %cond.end1350

cond.false978:                                    ; preds = %lor.lhs.false961
  %462 = load i8*, i8** %uc, align 8
  %arrayidx979 = getelementptr inbounds i8, i8* %462, i64 0
  %463 = load i8, i8* %arrayidx979, align 1
  %conv980 = zext i8 %463 to i32
  %cmp981 = icmp eq i32 197, %conv980
  br i1 %cmp981, label %cond.true983, label %cond.false1000

cond.true983:                                     ; preds = %cond.false978
  %464 = load i8*, i8** %uc, align 8
  %arrayidx984 = getelementptr inbounds i8, i8* %464, i64 1
  %465 = load i8, i8* %arrayidx984, align 1
  %conv985 = zext i8 %465 to i32
  %cmp986 = icmp eq i32 191, %conv985
  br i1 %cmp986, label %land.lhs.true988, label %land.end998

land.lhs.true988:                                 ; preds = %cond.true983
  %466 = load i8*, i8** %uc, align 8
  %arrayidx989 = getelementptr inbounds i8, i8* %466, i64 2
  %467 = load i8, i8* %arrayidx989, align 1
  %conv990 = zext i8 %467 to i32
  %cmp991 = icmp eq i32 197, %conv990
  br i1 %cmp991, label %land.rhs993, label %land.end998

land.rhs993:                                      ; preds = %land.lhs.true988
  %468 = load i8*, i8** %uc, align 8
  %arrayidx994 = getelementptr inbounds i8, i8* %468, i64 3
  %469 = load i8, i8* %arrayidx994, align 1
  %conv995 = zext i8 %469 to i32
  %cmp996 = icmp eq i32 191, %conv995
  br label %land.end998

land.end998:                                      ; preds = %land.rhs993, %land.lhs.true988, %cond.true983
  %470 = phi i1 [ false, %land.lhs.true988 ], [ false, %cond.true983 ], [ %cmp996, %land.rhs993 ]
  %471 = zext i1 %470 to i64
  %cond999 = select i1 %470, i32 4, i32 0
  br label %cond.end1348

cond.false1000:                                   ; preds = %cond.false978
  %472 = load i8*, i8** %uc, align 8
  %arrayidx1001 = getelementptr inbounds i8, i8* %472, i64 0
  %473 = load i8, i8* %arrayidx1001, align 1
  %conv1002 = zext i8 %473 to i32
  %cmp1003 = icmp eq i32 202, %conv1002
  br i1 %cmp1003, label %cond.true1005, label %cond.false1017

cond.true1005:                                    ; preds = %cond.false1000
  %474 = load i8*, i8** %uc, align 8
  %arrayidx1006 = getelementptr inbounds i8, i8* %474, i64 1
  %475 = load i8, i8* %arrayidx1006, align 1
  %conv1007 = zext i8 %475 to i32
  %cmp1008 = icmp eq i32 188, %conv1007
  br i1 %cmp1008, label %land.rhs1010, label %land.end1015

land.rhs1010:                                     ; preds = %cond.true1005
  %476 = load i8*, i8** %uc, align 8
  %arrayidx1011 = getelementptr inbounds i8, i8* %476, i64 2
  %477 = load i8, i8* %arrayidx1011, align 1
  %conv1012 = zext i8 %477 to i32
  %cmp1013 = icmp eq i32 110, %conv1012
  br label %land.end1015

land.end1015:                                     ; preds = %land.rhs1010, %cond.true1005
  %478 = phi i1 [ false, %cond.true1005 ], [ %cmp1013, %land.rhs1010 ]
  %479 = zext i1 %478 to i64
  %cond1016 = select i1 %478, i32 3, i32 0
  br label %cond.end1346

cond.false1017:                                   ; preds = %cond.false1000
  %480 = load i8*, i8** %uc, align 8
  %arrayidx1018 = getelementptr inbounds i8, i8* %480, i64 0
  %481 = load i8, i8* %arrayidx1018, align 1
  %conv1019 = zext i8 %481 to i32
  %cmp1020 = icmp eq i32 206, %conv1019
  br i1 %cmp1020, label %cond.true1022, label %cond.false1096

cond.true1022:                                    ; preds = %cond.false1017
  %482 = load i8*, i8** %uc, align 8
  %arrayidx1023 = getelementptr inbounds i8, i8* %482, i64 1
  %483 = load i8, i8* %arrayidx1023, align 1
  %conv1024 = zext i8 %483 to i32
  %and1025 = and i32 %conv1024, 253
  %cmp1026 = icmp eq i32 %and1025, 172
  br i1 %cmp1026, label %cond.true1028, label %cond.false1040

cond.true1028:                                    ; preds = %cond.true1022
  %484 = load i8*, i8** %uc, align 8
  %arrayidx1029 = getelementptr inbounds i8, i8* %484, i64 2
  %485 = load i8, i8* %arrayidx1029, align 1
  %conv1030 = zext i8 %485 to i32
  %cmp1031 = icmp eq i32 206, %conv1030
  br i1 %cmp1031, label %land.rhs1033, label %land.end1038

land.rhs1033:                                     ; preds = %cond.true1028
  %486 = load i8*, i8** %uc, align 8
  %arrayidx1034 = getelementptr inbounds i8, i8* %486, i64 3
  %487 = load i8, i8* %arrayidx1034, align 1
  %conv1035 = zext i8 %487 to i32
  %cmp1036 = icmp eq i32 185, %conv1035
  br label %land.end1038

land.end1038:                                     ; preds = %land.rhs1033, %cond.true1028
  %488 = phi i1 [ false, %cond.true1028 ], [ %cmp1036, %land.rhs1033 ]
  %489 = zext i1 %488 to i64
  %cond1039 = select i1 %488, i32 4, i32 0
  br label %cond.end1094

cond.false1040:                                   ; preds = %cond.true1022
  %490 = load i8*, i8** %uc, align 8
  %arrayidx1041 = getelementptr inbounds i8, i8* %490, i64 1
  %491 = load i8, i8* %arrayidx1041, align 1
  %conv1042 = zext i8 %491 to i32
  %cmp1043 = icmp eq i32 177, %conv1042
  br i1 %cmp1043, label %cond.true1050, label %lor.lhs.false1045

lor.lhs.false1045:                                ; preds = %cond.false1040
  %492 = load i8*, i8** %uc, align 8
  %arrayidx1046 = getelementptr inbounds i8, i8* %492, i64 1
  %493 = load i8, i8* %arrayidx1046, align 1
  %conv1047 = zext i8 %493 to i32
  %cmp1048 = icmp eq i32 183, %conv1047
  br i1 %cmp1048, label %cond.true1050, label %cond.false1075

cond.true1050:                                    ; preds = %lor.lhs.false1045, %cond.false1040
  %494 = load i8*, i8** %uc, align 8
  %arrayidx1051 = getelementptr inbounds i8, i8* %494, i64 2
  %495 = load i8, i8* %arrayidx1051, align 1
  %conv1052 = zext i8 %495 to i32
  %cmp1053 = icmp eq i32 205, %conv1052
  br i1 %cmp1053, label %cond.true1055, label %cond.false1061

cond.true1055:                                    ; preds = %cond.true1050
  %496 = load i8*, i8** %uc, align 8
  %arrayidx1056 = getelementptr inbounds i8, i8* %496, i64 3
  %497 = load i8, i8* %arrayidx1056, align 1
  %conv1057 = zext i8 %497 to i32
  %cmp1058 = icmp eq i32 130, %conv1057
  %498 = zext i1 %cmp1058 to i64
  %cond1060 = select i1 %cmp1058, i32 4, i32 0
  br label %cond.end1073

cond.false1061:                                   ; preds = %cond.true1050
  %499 = load i8*, i8** %uc, align 8
  %arrayidx1062 = getelementptr inbounds i8, i8* %499, i64 2
  %500 = load i8, i8* %arrayidx1062, align 1
  %conv1063 = zext i8 %500 to i32
  %cmp1064 = icmp eq i32 206, %conv1063
  br i1 %cmp1064, label %land.rhs1066, label %land.end1071

land.rhs1066:                                     ; preds = %cond.false1061
  %501 = load i8*, i8** %uc, align 8
  %arrayidx1067 = getelementptr inbounds i8, i8* %501, i64 3
  %502 = load i8, i8* %arrayidx1067, align 1
  %conv1068 = zext i8 %502 to i32
  %cmp1069 = icmp eq i32 185, %conv1068
  br label %land.end1071

land.end1071:                                     ; preds = %land.rhs1066, %cond.false1061
  %503 = phi i1 [ false, %cond.false1061 ], [ %cmp1069, %land.rhs1066 ]
  %504 = zext i1 %503 to i64
  %cond1072 = select i1 %503, i32 4, i32 0
  br label %cond.end1073

cond.end1073:                                     ; preds = %land.end1071, %cond.true1055
  %cond1074 = phi i32 [ %cond1060, %cond.true1055 ], [ %cond1072, %land.end1071 ]
  br label %cond.end1092

cond.false1075:                                   ; preds = %lor.lhs.false1045
  %505 = load i8*, i8** %uc, align 8
  %arrayidx1076 = getelementptr inbounds i8, i8* %505, i64 1
  %506 = load i8, i8* %arrayidx1076, align 1
  %conv1077 = zext i8 %506 to i32
  %cmp1078 = icmp eq i32 185, %conv1077
  br i1 %cmp1078, label %land.lhs.true1080, label %land.end1090

land.lhs.true1080:                                ; preds = %cond.false1075
  %507 = load i8*, i8** %uc, align 8
  %arrayidx1081 = getelementptr inbounds i8, i8* %507, i64 2
  %508 = load i8, i8* %arrayidx1081, align 1
  %conv1082 = zext i8 %508 to i32
  %cmp1083 = icmp eq i32 205, %conv1082
  br i1 %cmp1083, label %land.rhs1085, label %land.end1090

land.rhs1085:                                     ; preds = %land.lhs.true1080
  %509 = load i8*, i8** %uc, align 8
  %arrayidx1086 = getelementptr inbounds i8, i8* %509, i64 3
  %510 = load i8, i8* %arrayidx1086, align 1
  %conv1087 = zext i8 %510 to i32
  %cmp1088 = icmp eq i32 130, %conv1087
  br label %land.end1090

land.end1090:                                     ; preds = %land.rhs1085, %land.lhs.true1080, %cond.false1075
  %511 = phi i1 [ false, %land.lhs.true1080 ], [ false, %cond.false1075 ], [ %cmp1088, %land.rhs1085 ]
  %512 = zext i1 %511 to i64
  %cond1091 = select i1 %511, i32 4, i32 0
  br label %cond.end1092

cond.end1092:                                     ; preds = %land.end1090, %cond.end1073
  %cond1093 = phi i32 [ %cond1074, %cond.end1073 ], [ %cond1091, %land.end1090 ]
  br label %cond.end1094

cond.end1094:                                     ; preds = %cond.end1092, %land.end1038
  %cond1095 = phi i32 [ %cond1039, %land.end1038 ], [ %cond1093, %cond.end1092 ]
  br label %cond.end1344

cond.false1096:                                   ; preds = %cond.false1017
  %513 = load i8*, i8** %uc, align 8
  %arrayidx1097 = getelementptr inbounds i8, i8* %513, i64 0
  %514 = load i8, i8* %arrayidx1097, align 1
  %conv1098 = zext i8 %514 to i32
  %cmp1099 = icmp eq i32 207, %conv1098
  br i1 %cmp1099, label %cond.true1101, label %cond.false1201

cond.true1101:                                    ; preds = %cond.false1096
  %515 = load i8*, i8** %uc, align 8
  %arrayidx1102 = getelementptr inbounds i8, i8* %515, i64 1
  %516 = load i8, i8* %arrayidx1102, align 1
  %conv1103 = zext i8 %516 to i32
  %cmp1104 = icmp eq i32 129, %conv1103
  br i1 %cmp1104, label %cond.true1106, label %cond.false1118

cond.true1106:                                    ; preds = %cond.true1101
  %517 = load i8*, i8** %uc, align 8
  %arrayidx1107 = getelementptr inbounds i8, i8* %517, i64 2
  %518 = load i8, i8* %arrayidx1107, align 1
  %conv1108 = zext i8 %518 to i32
  %cmp1109 = icmp eq i32 204, %conv1108
  br i1 %cmp1109, label %land.rhs1111, label %land.end1116

land.rhs1111:                                     ; preds = %cond.true1106
  %519 = load i8*, i8** %uc, align 8
  %arrayidx1112 = getelementptr inbounds i8, i8* %519, i64 3
  %520 = load i8, i8* %arrayidx1112, align 1
  %conv1113 = zext i8 %520 to i32
  %cmp1114 = icmp eq i32 147, %conv1113
  br label %land.end1116

land.end1116:                                     ; preds = %land.rhs1111, %cond.true1106
  %521 = phi i1 [ false, %cond.true1106 ], [ %cmp1114, %land.rhs1111 ]
  %522 = zext i1 %521 to i64
  %cond1117 = select i1 %521, i32 4, i32 0
  br label %cond.end1199

cond.false1118:                                   ; preds = %cond.true1101
  %523 = load i8*, i8** %uc, align 8
  %arrayidx1119 = getelementptr inbounds i8, i8* %523, i64 1
  %524 = load i8, i8* %arrayidx1119, align 1
  %conv1120 = zext i8 %524 to i32
  %cmp1121 = icmp eq i32 133, %conv1120
  br i1 %cmp1121, label %cond.true1123, label %cond.false1148

cond.true1123:                                    ; preds = %cond.false1118
  %525 = load i8*, i8** %uc, align 8
  %arrayidx1124 = getelementptr inbounds i8, i8* %525, i64 2
  %526 = load i8, i8* %arrayidx1124, align 1
  %conv1125 = zext i8 %526 to i32
  %cmp1126 = icmp eq i32 204, %conv1125
  br i1 %cmp1126, label %cond.true1128, label %cond.false1134

cond.true1128:                                    ; preds = %cond.true1123
  %527 = load i8*, i8** %uc, align 8
  %arrayidx1129 = getelementptr inbounds i8, i8* %527, i64 3
  %528 = load i8, i8* %arrayidx1129, align 1
  %conv1130 = zext i8 %528 to i32
  %cmp1131 = icmp eq i32 147, %conv1130
  %529 = zext i1 %cmp1131 to i64
  %cond1133 = select i1 %cmp1131, i32 4, i32 0
  br label %cond.end1146

cond.false1134:                                   ; preds = %cond.true1123
  %530 = load i8*, i8** %uc, align 8
  %arrayidx1135 = getelementptr inbounds i8, i8* %530, i64 2
  %531 = load i8, i8* %arrayidx1135, align 1
  %conv1136 = zext i8 %531 to i32
  %cmp1137 = icmp eq i32 205, %conv1136
  br i1 %cmp1137, label %land.rhs1139, label %land.end1144

land.rhs1139:                                     ; preds = %cond.false1134
  %532 = load i8*, i8** %uc, align 8
  %arrayidx1140 = getelementptr inbounds i8, i8* %532, i64 3
  %533 = load i8, i8* %arrayidx1140, align 1
  %conv1141 = zext i8 %533 to i32
  %cmp1142 = icmp eq i32 130, %conv1141
  br label %land.end1144

land.end1144:                                     ; preds = %land.rhs1139, %cond.false1134
  %534 = phi i1 [ false, %cond.false1134 ], [ %cmp1142, %land.rhs1139 ]
  %535 = zext i1 %534 to i64
  %cond1145 = select i1 %534, i32 4, i32 0
  br label %cond.end1146

cond.end1146:                                     ; preds = %land.end1144, %cond.true1128
  %cond1147 = phi i32 [ %cond1133, %cond.true1128 ], [ %cond1145, %land.end1144 ]
  br label %cond.end1197

cond.false1148:                                   ; preds = %cond.false1118
  %536 = load i8*, i8** %uc, align 8
  %arrayidx1149 = getelementptr inbounds i8, i8* %536, i64 1
  %537 = load i8, i8* %arrayidx1149, align 1
  %conv1150 = zext i8 %537 to i32
  %cmp1151 = icmp eq i32 137, %conv1150
  br i1 %cmp1151, label %cond.true1153, label %cond.false1178

cond.true1153:                                    ; preds = %cond.false1148
  %538 = load i8*, i8** %uc, align 8
  %arrayidx1154 = getelementptr inbounds i8, i8* %538, i64 2
  %539 = load i8, i8* %arrayidx1154, align 1
  %conv1155 = zext i8 %539 to i32
  %cmp1156 = icmp eq i32 205, %conv1155
  br i1 %cmp1156, label %cond.true1158, label %cond.false1164

cond.true1158:                                    ; preds = %cond.true1153
  %540 = load i8*, i8** %uc, align 8
  %arrayidx1159 = getelementptr inbounds i8, i8* %540, i64 3
  %541 = load i8, i8* %arrayidx1159, align 1
  %conv1160 = zext i8 %541 to i32
  %cmp1161 = icmp eq i32 130, %conv1160
  %542 = zext i1 %cmp1161 to i64
  %cond1163 = select i1 %cmp1161, i32 4, i32 0
  br label %cond.end1176

cond.false1164:                                   ; preds = %cond.true1153
  %543 = load i8*, i8** %uc, align 8
  %arrayidx1165 = getelementptr inbounds i8, i8* %543, i64 2
  %544 = load i8, i8* %arrayidx1165, align 1
  %conv1166 = zext i8 %544 to i32
  %cmp1167 = icmp eq i32 206, %conv1166
  br i1 %cmp1167, label %land.rhs1169, label %land.end1174

land.rhs1169:                                     ; preds = %cond.false1164
  %545 = load i8*, i8** %uc, align 8
  %arrayidx1170 = getelementptr inbounds i8, i8* %545, i64 3
  %546 = load i8, i8* %arrayidx1170, align 1
  %conv1171 = zext i8 %546 to i32
  %cmp1172 = icmp eq i32 185, %conv1171
  br label %land.end1174

land.end1174:                                     ; preds = %land.rhs1169, %cond.false1164
  %547 = phi i1 [ false, %cond.false1164 ], [ %cmp1172, %land.rhs1169 ]
  %548 = zext i1 %547 to i64
  %cond1175 = select i1 %547, i32 4, i32 0
  br label %cond.end1176

cond.end1176:                                     ; preds = %land.end1174, %cond.true1158
  %cond1177 = phi i32 [ %cond1163, %cond.true1158 ], [ %cond1175, %land.end1174 ]
  br label %cond.end1195

cond.false1178:                                   ; preds = %cond.false1148
  %549 = load i8*, i8** %uc, align 8
  %arrayidx1179 = getelementptr inbounds i8, i8* %549, i64 1
  %550 = load i8, i8* %arrayidx1179, align 1
  %conv1180 = zext i8 %550 to i32
  %cmp1181 = icmp eq i32 142, %conv1180
  br i1 %cmp1181, label %land.lhs.true1183, label %land.end1193

land.lhs.true1183:                                ; preds = %cond.false1178
  %551 = load i8*, i8** %uc, align 8
  %arrayidx1184 = getelementptr inbounds i8, i8* %551, i64 2
  %552 = load i8, i8* %arrayidx1184, align 1
  %conv1185 = zext i8 %552 to i32
  %cmp1186 = icmp eq i32 206, %conv1185
  br i1 %cmp1186, label %land.rhs1188, label %land.end1193

land.rhs1188:                                     ; preds = %land.lhs.true1183
  %553 = load i8*, i8** %uc, align 8
  %arrayidx1189 = getelementptr inbounds i8, i8* %553, i64 3
  %554 = load i8, i8* %arrayidx1189, align 1
  %conv1190 = zext i8 %554 to i32
  %cmp1191 = icmp eq i32 185, %conv1190
  br label %land.end1193

land.end1193:                                     ; preds = %land.rhs1188, %land.lhs.true1183, %cond.false1178
  %555 = phi i1 [ false, %land.lhs.true1183 ], [ false, %cond.false1178 ], [ %cmp1191, %land.rhs1188 ]
  %556 = zext i1 %555 to i64
  %cond1194 = select i1 %555, i32 4, i32 0
  br label %cond.end1195

cond.end1195:                                     ; preds = %land.end1193, %cond.end1176
  %cond1196 = phi i32 [ %cond1177, %cond.end1176 ], [ %cond1194, %land.end1193 ]
  br label %cond.end1197

cond.end1197:                                     ; preds = %cond.end1195, %cond.end1146
  %cond1198 = phi i32 [ %cond1147, %cond.end1146 ], [ %cond1196, %cond.end1195 ]
  br label %cond.end1199

cond.end1199:                                     ; preds = %cond.end1197, %land.end1116
  %cond1200 = phi i32 [ %cond1117, %land.end1116 ], [ %cond1198, %cond.end1197 ]
  br label %cond.end1342

cond.false1201:                                   ; preds = %cond.false1096
  %557 = load i8*, i8** %uc, align 8
  %arrayidx1202 = getelementptr inbounds i8, i8* %557, i64 0
  %558 = load i8, i8* %arrayidx1202, align 1
  %conv1203 = zext i8 %558 to i32
  %cmp1204 = icmp eq i32 213, %conv1203
  br i1 %cmp1204, label %cond.true1206, label %cond.false1273

cond.true1206:                                    ; preds = %cond.false1201
  %559 = load i8*, i8** %uc, align 8
  %arrayidx1207 = getelementptr inbounds i8, i8* %559, i64 1
  %560 = load i8, i8* %arrayidx1207, align 1
  %conv1208 = zext i8 %560 to i32
  %cmp1209 = icmp eq i32 165, %conv1208
  br i1 %cmp1209, label %cond.true1211, label %cond.false1223

cond.true1211:                                    ; preds = %cond.true1206
  %561 = load i8*, i8** %uc, align 8
  %arrayidx1212 = getelementptr inbounds i8, i8* %561, i64 2
  %562 = load i8, i8* %arrayidx1212, align 1
  %conv1213 = zext i8 %562 to i32
  %cmp1214 = icmp eq i32 214, %conv1213
  br i1 %cmp1214, label %land.rhs1216, label %land.end1221

land.rhs1216:                                     ; preds = %cond.true1211
  %563 = load i8*, i8** %uc, align 8
  %arrayidx1217 = getelementptr inbounds i8, i8* %563, i64 3
  %564 = load i8, i8* %arrayidx1217, align 1
  %conv1218 = zext i8 %564 to i32
  %cmp1219 = icmp eq i32 130, %conv1218
  br label %land.end1221

land.end1221:                                     ; preds = %land.rhs1216, %cond.true1211
  %565 = phi i1 [ false, %cond.true1211 ], [ %cmp1219, %land.rhs1216 ]
  %566 = zext i1 %565 to i64
  %cond1222 = select i1 %565, i32 4, i32 0
  br label %cond.end1271

cond.false1223:                                   ; preds = %cond.true1206
  %567 = load i8*, i8** %uc, align 8
  %arrayidx1224 = getelementptr inbounds i8, i8* %567, i64 1
  %568 = load i8, i8* %arrayidx1224, align 1
  %conv1225 = zext i8 %568 to i32
  %cmp1226 = icmp eq i32 180, %conv1225
  br i1 %cmp1226, label %cond.true1228, label %cond.false1252

cond.true1228:                                    ; preds = %cond.false1223
  %569 = load i8*, i8** %uc, align 8
  %arrayidx1229 = getelementptr inbounds i8, i8* %569, i64 2
  %570 = load i8, i8* %arrayidx1229, align 1
  %conv1230 = zext i8 %570 to i32
  %cmp1231 = icmp eq i32 213, %conv1230
  br i1 %cmp1231, label %land.rhs1233, label %land.end1250

land.rhs1233:                                     ; preds = %cond.true1228
  %571 = load i8*, i8** %uc, align 8
  %arrayidx1234 = getelementptr inbounds i8, i8* %571, i64 3
  %572 = load i8, i8* %arrayidx1234, align 1
  %conv1235 = zext i8 %572 to i32
  %and1236 = and i32 %conv1235, 247
  %cmp1237 = icmp eq i32 %and1236, 165
  br i1 %cmp1237, label %lor.end1249, label %lor.lhs.false1239

lor.lhs.false1239:                                ; preds = %land.rhs1233
  %573 = load i8*, i8** %uc, align 8
  %arrayidx1240 = getelementptr inbounds i8, i8* %573, i64 3
  %574 = load i8, i8* %arrayidx1240, align 1
  %conv1241 = zext i8 %574 to i32
  %cmp1242 = icmp eq i32 %conv1241, 171
  br i1 %cmp1242, label %lor.end1249, label %lor.rhs1244

lor.rhs1244:                                      ; preds = %lor.lhs.false1239
  %575 = load i8*, i8** %uc, align 8
  %arrayidx1245 = getelementptr inbounds i8, i8* %575, i64 3
  %576 = load i8, i8* %arrayidx1245, align 1
  %conv1246 = zext i8 %576 to i32
  %cmp1247 = icmp eq i32 %conv1246, 182
  br label %lor.end1249

lor.end1249:                                      ; preds = %lor.rhs1244, %lor.lhs.false1239, %land.rhs1233
  %577 = phi i1 [ true, %lor.lhs.false1239 ], [ true, %land.rhs1233 ], [ %cmp1247, %lor.rhs1244 ]
  br label %land.end1250

land.end1250:                                     ; preds = %lor.end1249, %cond.true1228
  %578 = phi i1 [ false, %cond.true1228 ], [ %577, %lor.end1249 ]
  %579 = zext i1 %578 to i64
  %cond1251 = select i1 %578, i32 4, i32 0
  br label %cond.end1269

cond.false1252:                                   ; preds = %cond.false1223
  %580 = load i8*, i8** %uc, align 8
  %arrayidx1253 = getelementptr inbounds i8, i8* %580, i64 1
  %581 = load i8, i8* %arrayidx1253, align 1
  %conv1254 = zext i8 %581 to i32
  %cmp1255 = icmp eq i32 190, %conv1254
  br i1 %cmp1255, label %land.lhs.true1257, label %land.end1267

land.lhs.true1257:                                ; preds = %cond.false1252
  %582 = load i8*, i8** %uc, align 8
  %arrayidx1258 = getelementptr inbounds i8, i8* %582, i64 2
  %583 = load i8, i8* %arrayidx1258, align 1
  %conv1259 = zext i8 %583 to i32
  %cmp1260 = icmp eq i32 213, %conv1259
  br i1 %cmp1260, label %land.rhs1262, label %land.end1267

land.rhs1262:                                     ; preds = %land.lhs.true1257
  %584 = load i8*, i8** %uc, align 8
  %arrayidx1263 = getelementptr inbounds i8, i8* %584, i64 3
  %585 = load i8, i8* %arrayidx1263, align 1
  %conv1264 = zext i8 %585 to i32
  %cmp1265 = icmp eq i32 182, %conv1264
  br label %land.end1267

land.end1267:                                     ; preds = %land.rhs1262, %land.lhs.true1257, %cond.false1252
  %586 = phi i1 [ false, %land.lhs.true1257 ], [ false, %cond.false1252 ], [ %cmp1265, %land.rhs1262 ]
  %587 = zext i1 %586 to i64
  %cond1268 = select i1 %586, i32 4, i32 0
  br label %cond.end1269

cond.end1269:                                     ; preds = %land.end1267, %land.end1250
  %cond1270 = phi i32 [ %cond1251, %land.end1250 ], [ %cond1268, %land.end1267 ]
  br label %cond.end1271

cond.end1271:                                     ; preds = %cond.end1269, %land.end1221
  %cond1272 = phi i32 [ %cond1222, %land.end1221 ], [ %cond1270, %cond.end1269 ]
  br label %cond.end1340

cond.false1273:                                   ; preds = %cond.false1201
  %588 = load i8*, i8** %uc, align 8
  %arrayidx1274 = getelementptr inbounds i8, i8* %588, i64 0
  %589 = load i8, i8* %arrayidx1274, align 1
  %conv1275 = zext i8 %589 to i32
  %cmp1276 = icmp eq i32 225, %conv1275
  br i1 %cmp1276, label %cond.true1278, label %cond.false1337

cond.true1278:                                    ; preds = %cond.false1273
  %590 = load i8*, i8** %uc, align 8
  %arrayidx1279 = getelementptr inbounds i8, i8* %590, i64 1
  %591 = load i8, i8* %arrayidx1279, align 1
  %conv1280 = zext i8 %591 to i32
  %cmp1281 = icmp eq i32 188, %conv1280
  br i1 %cmp1281, label %cond.true1283, label %cond.false1301

cond.true1283:                                    ; preds = %cond.true1278
  %592 = load i8*, i8** %uc, align 8
  %arrayidx1284 = getelementptr inbounds i8, i8* %592, i64 2
  %593 = load i8, i8* %arrayidx1284, align 1
  %conv1285 = zext i8 %593 to i32
  %and1286 = and i32 %conv1285, 216
  %cmp1287 = icmp eq i32 %and1286, 128
  br i1 %cmp1287, label %land.lhs.true1289, label %land.end1299

land.lhs.true1289:                                ; preds = %cond.true1283
  %594 = load i8*, i8** %uc, align 8
  %arrayidx1290 = getelementptr inbounds i8, i8* %594, i64 3
  %595 = load i8, i8* %arrayidx1290, align 1
  %conv1291 = zext i8 %595 to i32
  %cmp1292 = icmp eq i32 206, %conv1291
  br i1 %cmp1292, label %land.rhs1294, label %land.end1299

land.rhs1294:                                     ; preds = %land.lhs.true1289
  %596 = load i8*, i8** %uc, align 8
  %arrayidx1295 = getelementptr inbounds i8, i8* %596, i64 4
  %597 = load i8, i8* %arrayidx1295, align 1
  %conv1296 = zext i8 %597 to i32
  %cmp1297 = icmp eq i32 185, %conv1296
  br label %land.end1299

land.end1299:                                     ; preds = %land.rhs1294, %land.lhs.true1289, %cond.true1283
  %598 = phi i1 [ false, %land.lhs.true1289 ], [ false, %cond.true1283 ], [ %cmp1297, %land.rhs1294 ]
  %599 = zext i1 %598 to i64
  %cond1300 = select i1 %598, i32 5, i32 0
  br label %cond.end1335

cond.false1301:                                   ; preds = %cond.true1278
  %600 = load i8*, i8** %uc, align 8
  %arrayidx1302 = getelementptr inbounds i8, i8* %600, i64 1
  %601 = load i8, i8* %arrayidx1302, align 1
  %conv1303 = zext i8 %601 to i32
  %cmp1304 = icmp eq i32 189, %conv1303
  br i1 %cmp1304, label %land.lhs.true1306, label %land.end1333

land.lhs.true1306:                                ; preds = %cond.false1301
  %602 = load i8*, i8** %uc, align 8
  %arrayidx1307 = getelementptr inbounds i8, i8* %602, i64 2
  %603 = load i8, i8* %arrayidx1307, align 1
  %conv1308 = zext i8 %603 to i32
  %and1309 = and i32 %conv1308, 248
  %cmp1310 = icmp eq i32 %and1309, 160
  br i1 %cmp1310, label %land.lhs.true1323, label %lor.lhs.false1312

lor.lhs.false1312:                                ; preds = %land.lhs.true1306
  %604 = load i8*, i8** %uc, align 8
  %arrayidx1313 = getelementptr inbounds i8, i8* %604, i64 2
  %605 = load i8, i8* %arrayidx1313, align 1
  %conv1314 = zext i8 %605 to i32
  %and1315 = and i32 %conv1314, 251
  %cmp1316 = icmp eq i32 %and1315, 176
  br i1 %cmp1316, label %land.lhs.true1323, label %lor.lhs.false1318

lor.lhs.false1318:                                ; preds = %lor.lhs.false1312
  %606 = load i8*, i8** %uc, align 8
  %arrayidx1319 = getelementptr inbounds i8, i8* %606, i64 2
  %607 = load i8, i8* %arrayidx1319, align 1
  %conv1320 = zext i8 %607 to i32
  %cmp1321 = icmp eq i32 %conv1320, 188
  br i1 %cmp1321, label %land.lhs.true1323, label %land.end1333

land.lhs.true1323:                                ; preds = %lor.lhs.false1318, %lor.lhs.false1312, %land.lhs.true1306
  %608 = load i8*, i8** %uc, align 8
  %arrayidx1324 = getelementptr inbounds i8, i8* %608, i64 3
  %609 = load i8, i8* %arrayidx1324, align 1
  %conv1325 = zext i8 %609 to i32
  %cmp1326 = icmp eq i32 206, %conv1325
  br i1 %cmp1326, label %land.rhs1328, label %land.end1333

land.rhs1328:                                     ; preds = %land.lhs.true1323
  %610 = load i8*, i8** %uc, align 8
  %arrayidx1329 = getelementptr inbounds i8, i8* %610, i64 4
  %611 = load i8, i8* %arrayidx1329, align 1
  %conv1330 = zext i8 %611 to i32
  %cmp1331 = icmp eq i32 185, %conv1330
  br label %land.end1333

land.end1333:                                     ; preds = %land.rhs1328, %land.lhs.true1323, %lor.lhs.false1318, %cond.false1301
  %612 = phi i1 [ false, %land.lhs.true1323 ], [ false, %lor.lhs.false1318 ], [ false, %cond.false1301 ], [ %cmp1331, %land.rhs1328 ]
  %613 = zext i1 %612 to i64
  %cond1334 = select i1 %612, i32 5, i32 0
  br label %cond.end1335

cond.end1335:                                     ; preds = %land.end1333, %land.end1299
  %cond1336 = phi i32 [ %cond1300, %land.end1299 ], [ %cond1334, %land.end1333 ]
  br label %cond.end1338

cond.false1337:                                   ; preds = %cond.false1273
  br label %cond.end1338

cond.end1338:                                     ; preds = %cond.false1337, %cond.end1335
  %cond1339 = phi i32 [ %cond1336, %cond.end1335 ], [ 0, %cond.false1337 ]
  br label %cond.end1340

cond.end1340:                                     ; preds = %cond.end1338, %cond.end1271
  %cond1341 = phi i32 [ %cond1272, %cond.end1271 ], [ %cond1339, %cond.end1338 ]
  br label %cond.end1342

cond.end1342:                                     ; preds = %cond.end1340, %cond.end1199
  %cond1343 = phi i32 [ %cond1200, %cond.end1199 ], [ %cond1341, %cond.end1340 ]
  br label %cond.end1344

cond.end1344:                                     ; preds = %cond.end1342, %cond.end1094
  %cond1345 = phi i32 [ %cond1095, %cond.end1094 ], [ %cond1343, %cond.end1342 ]
  br label %cond.end1346

cond.end1346:                                     ; preds = %cond.end1344, %land.end1015
  %cond1347 = phi i32 [ %cond1016, %land.end1015 ], [ %cond1345, %cond.end1344 ]
  br label %cond.end1348

cond.end1348:                                     ; preds = %cond.end1346, %land.end998
  %cond1349 = phi i32 [ %cond999, %land.end998 ], [ %cond1347, %cond.end1346 ]
  br label %cond.end1350

cond.end1350:                                     ; preds = %cond.end1348, %land.end976
  %cond1351 = phi i32 [ %cond977, %land.end976 ], [ %cond1349, %cond.end1348 ]
  br label %cond.end1352

cond.end1352:                                     ; preds = %cond.end1350, %land.end954
  %cond1353 = phi i32 [ %cond955, %land.end954 ], [ %cond1351, %cond.end1350 ]
  br label %cond.end1354

cond.end1354:                                     ; preds = %cond.end1352, %lor.end937
  %cond1355 = phi i32 [ %cond938, %lor.end937 ], [ %cond1353, %cond.end1352 ]
  br label %cond.end1356

cond.end1356:                                     ; preds = %cond.end1354, %land.end920
  %cond1357 = phi i32 [ %cond921, %land.end920 ], [ %cond1355, %cond.end1354 ]
  br label %cond.end1358

cond.end1358:                                     ; preds = %cond.end1356, %land.end903
  %cond1359 = phi i32 [ %cond904, %land.end903 ], [ %cond1357, %cond.end1356 ]
  br label %cond.end1360

cond.end1360:                                     ; preds = %cond.end1358, %land.end886
  %cond1361 = phi i32 [ %cond887, %land.end886 ], [ %cond1359, %cond.end1358 ]
  br label %cond.end1362

cond.end1362:                                     ; preds = %cond.end1360, %cond.end869
  %cond1363 = phi i32 [ %cond870, %cond.end869 ], [ %cond1361, %cond.end1360 ]
  br label %cond.end1364

cond.end1364:                                     ; preds = %cond.end1362, %land.end833
  %cond1365 = phi i32 [ %cond834, %land.end833 ], [ %cond1363, %cond.end1362 ]
  br label %cond.end2108

cond.false1366:                                   ; preds = %cond.false812
  %614 = load i8*, i8** %e, align 8
  %615 = load i8*, i8** %uc, align 8
  %sub.ptr.lhs.cast1367 = ptrtoint i8* %614 to i64
  %sub.ptr.rhs.cast1368 = ptrtoint i8* %615 to i64
  %sub.ptr.sub1369 = sub i64 %sub.ptr.lhs.cast1367, %sub.ptr.rhs.cast1368
  %cmp1370 = icmp sgt i64 %sub.ptr.sub1369, 3
  br i1 %cmp1370, label %cond.true1372, label %cond.false1854

cond.true1372:                                    ; preds = %cond.false1366
  %616 = load i8*, i8** %uc, align 8
  %arrayidx1373 = getelementptr inbounds i8, i8* %616, i64 0
  %617 = load i8, i8* %arrayidx1373, align 1
  %conv1374 = zext i8 %617 to i32
  %cmp1375 = icmp eq i32 97, %conv1374
  br i1 %cmp1375, label %cond.true1377, label %cond.false1389

cond.true1377:                                    ; preds = %cond.true1372
  %618 = load i8*, i8** %uc, align 8
  %arrayidx1378 = getelementptr inbounds i8, i8* %618, i64 1
  %619 = load i8, i8* %arrayidx1378, align 1
  %conv1379 = zext i8 %619 to i32
  %cmp1380 = icmp eq i32 202, %conv1379
  br i1 %cmp1380, label %land.rhs1382, label %land.end1387

land.rhs1382:                                     ; preds = %cond.true1377
  %620 = load i8*, i8** %uc, align 8
  %arrayidx1383 = getelementptr inbounds i8, i8* %620, i64 2
  %621 = load i8, i8* %arrayidx1383, align 1
  %conv1384 = zext i8 %621 to i32
  %cmp1385 = icmp eq i32 190, %conv1384
  br label %land.end1387

land.end1387:                                     ; preds = %land.rhs1382, %cond.true1377
  %622 = phi i1 [ false, %cond.true1377 ], [ %cmp1385, %land.rhs1382 ]
  %623 = zext i1 %622 to i64
  %cond1388 = select i1 %622, i32 3, i32 0
  br label %cond.end1852

cond.false1389:                                   ; preds = %cond.true1372
  %624 = load i8*, i8** %uc, align 8
  %arrayidx1390 = getelementptr inbounds i8, i8* %624, i64 0
  %625 = load i8, i8* %arrayidx1390, align 1
  %conv1391 = zext i8 %625 to i32
  %cmp1392 = icmp eq i32 102, %conv1391
  br i1 %cmp1392, label %cond.true1394, label %cond.false1425

cond.true1394:                                    ; preds = %cond.false1389
  %626 = load i8*, i8** %uc, align 8
  %arrayidx1395 = getelementptr inbounds i8, i8* %626, i64 1
  %627 = load i8, i8* %arrayidx1395, align 1
  %conv1396 = zext i8 %627 to i32
  %cmp1397 = icmp eq i32 102, %conv1396
  br i1 %cmp1397, label %cond.true1399, label %cond.false1411

cond.true1399:                                    ; preds = %cond.true1394
  %628 = load i8*, i8** %uc, align 8
  %arrayidx1400 = getelementptr inbounds i8, i8* %628, i64 2
  %629 = load i8, i8* %arrayidx1400, align 1
  %conv1401 = zext i8 %629 to i32
  %cmp1402 = icmp eq i32 105, %conv1401
  br i1 %cmp1402, label %lor.end1409, label %lor.rhs1404

lor.rhs1404:                                      ; preds = %cond.true1399
  %630 = load i8*, i8** %uc, align 8
  %arrayidx1405 = getelementptr inbounds i8, i8* %630, i64 2
  %631 = load i8, i8* %arrayidx1405, align 1
  %conv1406 = zext i8 %631 to i32
  %cmp1407 = icmp eq i32 108, %conv1406
  br label %lor.end1409

lor.end1409:                                      ; preds = %lor.rhs1404, %cond.true1399
  %632 = phi i1 [ true, %cond.true1399 ], [ %cmp1407, %lor.rhs1404 ]
  %633 = zext i1 %632 to i64
  %cond1410 = select i1 %632, i32 3, i32 2
  br label %cond.end1423

cond.false1411:                                   ; preds = %cond.true1394
  %634 = load i8*, i8** %uc, align 8
  %arrayidx1412 = getelementptr inbounds i8, i8* %634, i64 1
  %635 = load i8, i8* %arrayidx1412, align 1
  %conv1413 = zext i8 %635 to i32
  %cmp1414 = icmp eq i32 105, %conv1413
  br i1 %cmp1414, label %lor.end1421, label %lor.rhs1416

lor.rhs1416:                                      ; preds = %cond.false1411
  %636 = load i8*, i8** %uc, align 8
  %arrayidx1417 = getelementptr inbounds i8, i8* %636, i64 1
  %637 = load i8, i8* %arrayidx1417, align 1
  %conv1418 = zext i8 %637 to i32
  %cmp1419 = icmp eq i32 108, %conv1418
  br label %lor.end1421

lor.end1421:                                      ; preds = %lor.rhs1416, %cond.false1411
  %638 = phi i1 [ true, %cond.false1411 ], [ %cmp1419, %lor.rhs1416 ]
  %639 = zext i1 %638 to i64
  %cond1422 = select i1 %638, i32 2, i32 0
  br label %cond.end1423

cond.end1423:                                     ; preds = %lor.end1421, %lor.end1409
  %cond1424 = phi i32 [ %cond1410, %lor.end1409 ], [ %cond1422, %lor.end1421 ]
  br label %cond.end1850

cond.false1425:                                   ; preds = %cond.false1389
  %640 = load i8*, i8** %uc, align 8
  %arrayidx1426 = getelementptr inbounds i8, i8* %640, i64 0
  %641 = load i8, i8* %arrayidx1426, align 1
  %conv1427 = zext i8 %641 to i32
  %cmp1428 = icmp eq i32 104, %conv1427
  br i1 %cmp1428, label %cond.true1430, label %cond.false1442

cond.true1430:                                    ; preds = %cond.false1425
  %642 = load i8*, i8** %uc, align 8
  %arrayidx1431 = getelementptr inbounds i8, i8* %642, i64 1
  %643 = load i8, i8* %arrayidx1431, align 1
  %conv1432 = zext i8 %643 to i32
  %cmp1433 = icmp eq i32 204, %conv1432
  br i1 %cmp1433, label %land.rhs1435, label %land.end1440

land.rhs1435:                                     ; preds = %cond.true1430
  %644 = load i8*, i8** %uc, align 8
  %arrayidx1436 = getelementptr inbounds i8, i8* %644, i64 2
  %645 = load i8, i8* %arrayidx1436, align 1
  %conv1437 = zext i8 %645 to i32
  %cmp1438 = icmp eq i32 177, %conv1437
  br label %land.end1440

land.end1440:                                     ; preds = %land.rhs1435, %cond.true1430
  %646 = phi i1 [ false, %cond.true1430 ], [ %cmp1438, %land.rhs1435 ]
  %647 = zext i1 %646 to i64
  %cond1441 = select i1 %646, i32 3, i32 0
  br label %cond.end1848

cond.false1442:                                   ; preds = %cond.false1425
  %648 = load i8*, i8** %uc, align 8
  %arrayidx1443 = getelementptr inbounds i8, i8* %648, i64 0
  %649 = load i8, i8* %arrayidx1443, align 1
  %conv1444 = zext i8 %649 to i32
  %cmp1445 = icmp eq i32 105, %conv1444
  br i1 %cmp1445, label %cond.true1447, label %cond.false1459

cond.true1447:                                    ; preds = %cond.false1442
  %650 = load i8*, i8** %uc, align 8
  %arrayidx1448 = getelementptr inbounds i8, i8* %650, i64 1
  %651 = load i8, i8* %arrayidx1448, align 1
  %conv1449 = zext i8 %651 to i32
  %cmp1450 = icmp eq i32 204, %conv1449
  br i1 %cmp1450, label %land.rhs1452, label %land.end1457

land.rhs1452:                                     ; preds = %cond.true1447
  %652 = load i8*, i8** %uc, align 8
  %arrayidx1453 = getelementptr inbounds i8, i8* %652, i64 2
  %653 = load i8, i8* %arrayidx1453, align 1
  %conv1454 = zext i8 %653 to i32
  %cmp1455 = icmp eq i32 135, %conv1454
  br label %land.end1457

land.end1457:                                     ; preds = %land.rhs1452, %cond.true1447
  %654 = phi i1 [ false, %cond.true1447 ], [ %cmp1455, %land.rhs1452 ]
  %655 = zext i1 %654 to i64
  %cond1458 = select i1 %654, i32 3, i32 0
  br label %cond.end1846

cond.false1459:                                   ; preds = %cond.false1442
  %656 = load i8*, i8** %uc, align 8
  %arrayidx1460 = getelementptr inbounds i8, i8* %656, i64 0
  %657 = load i8, i8* %arrayidx1460, align 1
  %conv1461 = zext i8 %657 to i32
  %cmp1462 = icmp eq i32 106, %conv1461
  br i1 %cmp1462, label %cond.true1464, label %cond.false1476

cond.true1464:                                    ; preds = %cond.false1459
  %658 = load i8*, i8** %uc, align 8
  %arrayidx1465 = getelementptr inbounds i8, i8* %658, i64 1
  %659 = load i8, i8* %arrayidx1465, align 1
  %conv1466 = zext i8 %659 to i32
  %cmp1467 = icmp eq i32 204, %conv1466
  br i1 %cmp1467, label %land.rhs1469, label %land.end1474

land.rhs1469:                                     ; preds = %cond.true1464
  %660 = load i8*, i8** %uc, align 8
  %arrayidx1470 = getelementptr inbounds i8, i8* %660, i64 2
  %661 = load i8, i8* %arrayidx1470, align 1
  %conv1471 = zext i8 %661 to i32
  %cmp1472 = icmp eq i32 140, %conv1471
  br label %land.end1474

land.end1474:                                     ; preds = %land.rhs1469, %cond.true1464
  %662 = phi i1 [ false, %cond.true1464 ], [ %cmp1472, %land.rhs1469 ]
  %663 = zext i1 %662 to i64
  %cond1475 = select i1 %662, i32 3, i32 0
  br label %cond.end1844

cond.false1476:                                   ; preds = %cond.false1459
  %664 = load i8*, i8** %uc, align 8
  %arrayidx1477 = getelementptr inbounds i8, i8* %664, i64 0
  %665 = load i8, i8* %arrayidx1477, align 1
  %conv1478 = zext i8 %665 to i32
  %cmp1479 = icmp eq i32 115, %conv1478
  br i1 %cmp1479, label %cond.true1481, label %cond.false1493

cond.true1481:                                    ; preds = %cond.false1476
  %666 = load i8*, i8** %uc, align 8
  %arrayidx1482 = getelementptr inbounds i8, i8* %666, i64 1
  %667 = load i8, i8* %arrayidx1482, align 1
  %conv1483 = zext i8 %667 to i32
  %cmp1484 = icmp eq i32 115, %conv1483
  br i1 %cmp1484, label %lor.end1491, label %lor.rhs1486

lor.rhs1486:                                      ; preds = %cond.true1481
  %668 = load i8*, i8** %uc, align 8
  %arrayidx1487 = getelementptr inbounds i8, i8* %668, i64 1
  %669 = load i8, i8* %arrayidx1487, align 1
  %conv1488 = zext i8 %669 to i32
  %cmp1489 = icmp eq i32 116, %conv1488
  br label %lor.end1491

lor.end1491:                                      ; preds = %lor.rhs1486, %cond.true1481
  %670 = phi i1 [ true, %cond.true1481 ], [ %cmp1489, %lor.rhs1486 ]
  %671 = zext i1 %670 to i64
  %cond1492 = select i1 %670, i32 2, i32 0
  br label %cond.end1842

cond.false1493:                                   ; preds = %cond.false1476
  %672 = load i8*, i8** %uc, align 8
  %arrayidx1494 = getelementptr inbounds i8, i8* %672, i64 0
  %673 = load i8, i8* %arrayidx1494, align 1
  %conv1495 = zext i8 %673 to i32
  %cmp1496 = icmp eq i32 116, %conv1495
  br i1 %cmp1496, label %cond.true1498, label %cond.false1510

cond.true1498:                                    ; preds = %cond.false1493
  %674 = load i8*, i8** %uc, align 8
  %arrayidx1499 = getelementptr inbounds i8, i8* %674, i64 1
  %675 = load i8, i8* %arrayidx1499, align 1
  %conv1500 = zext i8 %675 to i32
  %cmp1501 = icmp eq i32 204, %conv1500
  br i1 %cmp1501, label %land.rhs1503, label %land.end1508

land.rhs1503:                                     ; preds = %cond.true1498
  %676 = load i8*, i8** %uc, align 8
  %arrayidx1504 = getelementptr inbounds i8, i8* %676, i64 2
  %677 = load i8, i8* %arrayidx1504, align 1
  %conv1505 = zext i8 %677 to i32
  %cmp1506 = icmp eq i32 136, %conv1505
  br label %land.end1508

land.end1508:                                     ; preds = %land.rhs1503, %cond.true1498
  %678 = phi i1 [ false, %cond.true1498 ], [ %cmp1506, %land.rhs1503 ]
  %679 = zext i1 %678 to i64
  %cond1509 = select i1 %678, i32 3, i32 0
  br label %cond.end1840

cond.false1510:                                   ; preds = %cond.false1493
  %680 = load i8*, i8** %uc, align 8
  %arrayidx1511 = getelementptr inbounds i8, i8* %680, i64 0
  %681 = load i8, i8* %arrayidx1511, align 1
  %conv1512 = zext i8 %681 to i32
  %cmp1513 = icmp eq i32 119, %conv1512
  br i1 %cmp1513, label %cond.true1520, label %lor.lhs.false1515

lor.lhs.false1515:                                ; preds = %cond.false1510
  %682 = load i8*, i8** %uc, align 8
  %arrayidx1516 = getelementptr inbounds i8, i8* %682, i64 0
  %683 = load i8, i8* %arrayidx1516, align 1
  %conv1517 = zext i8 %683 to i32
  %cmp1518 = icmp eq i32 121, %conv1517
  br i1 %cmp1518, label %cond.true1520, label %cond.false1532

cond.true1520:                                    ; preds = %lor.lhs.false1515, %cond.false1510
  %684 = load i8*, i8** %uc, align 8
  %arrayidx1521 = getelementptr inbounds i8, i8* %684, i64 1
  %685 = load i8, i8* %arrayidx1521, align 1
  %conv1522 = zext i8 %685 to i32
  %cmp1523 = icmp eq i32 204, %conv1522
  br i1 %cmp1523, label %land.rhs1525, label %land.end1530

land.rhs1525:                                     ; preds = %cond.true1520
  %686 = load i8*, i8** %uc, align 8
  %arrayidx1526 = getelementptr inbounds i8, i8* %686, i64 2
  %687 = load i8, i8* %arrayidx1526, align 1
  %conv1527 = zext i8 %687 to i32
  %cmp1528 = icmp eq i32 138, %conv1527
  br label %land.end1530

land.end1530:                                     ; preds = %land.rhs1525, %cond.true1520
  %688 = phi i1 [ false, %cond.true1520 ], [ %cmp1528, %land.rhs1525 ]
  %689 = zext i1 %688 to i64
  %cond1531 = select i1 %688, i32 3, i32 0
  br label %cond.end1838

cond.false1532:                                   ; preds = %lor.lhs.false1515
  %690 = load i8*, i8** %uc, align 8
  %arrayidx1533 = getelementptr inbounds i8, i8* %690, i64 0
  %691 = load i8, i8* %arrayidx1533, align 1
  %conv1534 = zext i8 %691 to i32
  %cmp1535 = icmp eq i32 197, %conv1534
  br i1 %cmp1535, label %cond.true1537, label %cond.false1554

cond.true1537:                                    ; preds = %cond.false1532
  %692 = load i8*, i8** %uc, align 8
  %arrayidx1538 = getelementptr inbounds i8, i8* %692, i64 1
  %693 = load i8, i8* %arrayidx1538, align 1
  %conv1539 = zext i8 %693 to i32
  %cmp1540 = icmp eq i32 191, %conv1539
  br i1 %cmp1540, label %land.lhs.true1542, label %land.end1552

land.lhs.true1542:                                ; preds = %cond.true1537
  %694 = load i8*, i8** %uc, align 8
  %arrayidx1543 = getelementptr inbounds i8, i8* %694, i64 2
  %695 = load i8, i8* %arrayidx1543, align 1
  %conv1544 = zext i8 %695 to i32
  %cmp1545 = icmp eq i32 197, %conv1544
  br i1 %cmp1545, label %land.rhs1547, label %land.end1552

land.rhs1547:                                     ; preds = %land.lhs.true1542
  %696 = load i8*, i8** %uc, align 8
  %arrayidx1548 = getelementptr inbounds i8, i8* %696, i64 3
  %697 = load i8, i8* %arrayidx1548, align 1
  %conv1549 = zext i8 %697 to i32
  %cmp1550 = icmp eq i32 191, %conv1549
  br label %land.end1552

land.end1552:                                     ; preds = %land.rhs1547, %land.lhs.true1542, %cond.true1537
  %698 = phi i1 [ false, %land.lhs.true1542 ], [ false, %cond.true1537 ], [ %cmp1550, %land.rhs1547 ]
  %699 = zext i1 %698 to i64
  %cond1553 = select i1 %698, i32 4, i32 0
  br label %cond.end1836

cond.false1554:                                   ; preds = %cond.false1532
  %700 = load i8*, i8** %uc, align 8
  %arrayidx1555 = getelementptr inbounds i8, i8* %700, i64 0
  %701 = load i8, i8* %arrayidx1555, align 1
  %conv1556 = zext i8 %701 to i32
  %cmp1557 = icmp eq i32 202, %conv1556
  br i1 %cmp1557, label %cond.true1559, label %cond.false1571

cond.true1559:                                    ; preds = %cond.false1554
  %702 = load i8*, i8** %uc, align 8
  %arrayidx1560 = getelementptr inbounds i8, i8* %702, i64 1
  %703 = load i8, i8* %arrayidx1560, align 1
  %conv1561 = zext i8 %703 to i32
  %cmp1562 = icmp eq i32 188, %conv1561
  br i1 %cmp1562, label %land.rhs1564, label %land.end1569

land.rhs1564:                                     ; preds = %cond.true1559
  %704 = load i8*, i8** %uc, align 8
  %arrayidx1565 = getelementptr inbounds i8, i8* %704, i64 2
  %705 = load i8, i8* %arrayidx1565, align 1
  %conv1566 = zext i8 %705 to i32
  %cmp1567 = icmp eq i32 110, %conv1566
  br label %land.end1569

land.end1569:                                     ; preds = %land.rhs1564, %cond.true1559
  %706 = phi i1 [ false, %cond.true1559 ], [ %cmp1567, %land.rhs1564 ]
  %707 = zext i1 %706 to i64
  %cond1570 = select i1 %706, i32 3, i32 0
  br label %cond.end1834

cond.false1571:                                   ; preds = %cond.false1554
  %708 = load i8*, i8** %uc, align 8
  %arrayidx1572 = getelementptr inbounds i8, i8* %708, i64 0
  %709 = load i8, i8* %arrayidx1572, align 1
  %conv1573 = zext i8 %709 to i32
  %cmp1574 = icmp eq i32 206, %conv1573
  br i1 %cmp1574, label %cond.true1576, label %cond.false1650

cond.true1576:                                    ; preds = %cond.false1571
  %710 = load i8*, i8** %uc, align 8
  %arrayidx1577 = getelementptr inbounds i8, i8* %710, i64 1
  %711 = load i8, i8* %arrayidx1577, align 1
  %conv1578 = zext i8 %711 to i32
  %and1579 = and i32 %conv1578, 253
  %cmp1580 = icmp eq i32 %and1579, 172
  br i1 %cmp1580, label %cond.true1582, label %cond.false1594

cond.true1582:                                    ; preds = %cond.true1576
  %712 = load i8*, i8** %uc, align 8
  %arrayidx1583 = getelementptr inbounds i8, i8* %712, i64 2
  %713 = load i8, i8* %arrayidx1583, align 1
  %conv1584 = zext i8 %713 to i32
  %cmp1585 = icmp eq i32 206, %conv1584
  br i1 %cmp1585, label %land.rhs1587, label %land.end1592

land.rhs1587:                                     ; preds = %cond.true1582
  %714 = load i8*, i8** %uc, align 8
  %arrayidx1588 = getelementptr inbounds i8, i8* %714, i64 3
  %715 = load i8, i8* %arrayidx1588, align 1
  %conv1589 = zext i8 %715 to i32
  %cmp1590 = icmp eq i32 185, %conv1589
  br label %land.end1592

land.end1592:                                     ; preds = %land.rhs1587, %cond.true1582
  %716 = phi i1 [ false, %cond.true1582 ], [ %cmp1590, %land.rhs1587 ]
  %717 = zext i1 %716 to i64
  %cond1593 = select i1 %716, i32 4, i32 0
  br label %cond.end1648

cond.false1594:                                   ; preds = %cond.true1576
  %718 = load i8*, i8** %uc, align 8
  %arrayidx1595 = getelementptr inbounds i8, i8* %718, i64 1
  %719 = load i8, i8* %arrayidx1595, align 1
  %conv1596 = zext i8 %719 to i32
  %cmp1597 = icmp eq i32 177, %conv1596
  br i1 %cmp1597, label %cond.true1604, label %lor.lhs.false1599

lor.lhs.false1599:                                ; preds = %cond.false1594
  %720 = load i8*, i8** %uc, align 8
  %arrayidx1600 = getelementptr inbounds i8, i8* %720, i64 1
  %721 = load i8, i8* %arrayidx1600, align 1
  %conv1601 = zext i8 %721 to i32
  %cmp1602 = icmp eq i32 183, %conv1601
  br i1 %cmp1602, label %cond.true1604, label %cond.false1629

cond.true1604:                                    ; preds = %lor.lhs.false1599, %cond.false1594
  %722 = load i8*, i8** %uc, align 8
  %arrayidx1605 = getelementptr inbounds i8, i8* %722, i64 2
  %723 = load i8, i8* %arrayidx1605, align 1
  %conv1606 = zext i8 %723 to i32
  %cmp1607 = icmp eq i32 205, %conv1606
  br i1 %cmp1607, label %cond.true1609, label %cond.false1615

cond.true1609:                                    ; preds = %cond.true1604
  %724 = load i8*, i8** %uc, align 8
  %arrayidx1610 = getelementptr inbounds i8, i8* %724, i64 3
  %725 = load i8, i8* %arrayidx1610, align 1
  %conv1611 = zext i8 %725 to i32
  %cmp1612 = icmp eq i32 130, %conv1611
  %726 = zext i1 %cmp1612 to i64
  %cond1614 = select i1 %cmp1612, i32 4, i32 0
  br label %cond.end1627

cond.false1615:                                   ; preds = %cond.true1604
  %727 = load i8*, i8** %uc, align 8
  %arrayidx1616 = getelementptr inbounds i8, i8* %727, i64 2
  %728 = load i8, i8* %arrayidx1616, align 1
  %conv1617 = zext i8 %728 to i32
  %cmp1618 = icmp eq i32 206, %conv1617
  br i1 %cmp1618, label %land.rhs1620, label %land.end1625

land.rhs1620:                                     ; preds = %cond.false1615
  %729 = load i8*, i8** %uc, align 8
  %arrayidx1621 = getelementptr inbounds i8, i8* %729, i64 3
  %730 = load i8, i8* %arrayidx1621, align 1
  %conv1622 = zext i8 %730 to i32
  %cmp1623 = icmp eq i32 185, %conv1622
  br label %land.end1625

land.end1625:                                     ; preds = %land.rhs1620, %cond.false1615
  %731 = phi i1 [ false, %cond.false1615 ], [ %cmp1623, %land.rhs1620 ]
  %732 = zext i1 %731 to i64
  %cond1626 = select i1 %731, i32 4, i32 0
  br label %cond.end1627

cond.end1627:                                     ; preds = %land.end1625, %cond.true1609
  %cond1628 = phi i32 [ %cond1614, %cond.true1609 ], [ %cond1626, %land.end1625 ]
  br label %cond.end1646

cond.false1629:                                   ; preds = %lor.lhs.false1599
  %733 = load i8*, i8** %uc, align 8
  %arrayidx1630 = getelementptr inbounds i8, i8* %733, i64 1
  %734 = load i8, i8* %arrayidx1630, align 1
  %conv1631 = zext i8 %734 to i32
  %cmp1632 = icmp eq i32 185, %conv1631
  br i1 %cmp1632, label %land.lhs.true1634, label %land.end1644

land.lhs.true1634:                                ; preds = %cond.false1629
  %735 = load i8*, i8** %uc, align 8
  %arrayidx1635 = getelementptr inbounds i8, i8* %735, i64 2
  %736 = load i8, i8* %arrayidx1635, align 1
  %conv1636 = zext i8 %736 to i32
  %cmp1637 = icmp eq i32 205, %conv1636
  br i1 %cmp1637, label %land.rhs1639, label %land.end1644

land.rhs1639:                                     ; preds = %land.lhs.true1634
  %737 = load i8*, i8** %uc, align 8
  %arrayidx1640 = getelementptr inbounds i8, i8* %737, i64 3
  %738 = load i8, i8* %arrayidx1640, align 1
  %conv1641 = zext i8 %738 to i32
  %cmp1642 = icmp eq i32 130, %conv1641
  br label %land.end1644

land.end1644:                                     ; preds = %land.rhs1639, %land.lhs.true1634, %cond.false1629
  %739 = phi i1 [ false, %land.lhs.true1634 ], [ false, %cond.false1629 ], [ %cmp1642, %land.rhs1639 ]
  %740 = zext i1 %739 to i64
  %cond1645 = select i1 %739, i32 4, i32 0
  br label %cond.end1646

cond.end1646:                                     ; preds = %land.end1644, %cond.end1627
  %cond1647 = phi i32 [ %cond1628, %cond.end1627 ], [ %cond1645, %land.end1644 ]
  br label %cond.end1648

cond.end1648:                                     ; preds = %cond.end1646, %land.end1592
  %cond1649 = phi i32 [ %cond1593, %land.end1592 ], [ %cond1647, %cond.end1646 ]
  br label %cond.end1832

cond.false1650:                                   ; preds = %cond.false1571
  %741 = load i8*, i8** %uc, align 8
  %arrayidx1651 = getelementptr inbounds i8, i8* %741, i64 0
  %742 = load i8, i8* %arrayidx1651, align 1
  %conv1652 = zext i8 %742 to i32
  %cmp1653 = icmp eq i32 207, %conv1652
  br i1 %cmp1653, label %cond.true1655, label %cond.false1755

cond.true1655:                                    ; preds = %cond.false1650
  %743 = load i8*, i8** %uc, align 8
  %arrayidx1656 = getelementptr inbounds i8, i8* %743, i64 1
  %744 = load i8, i8* %arrayidx1656, align 1
  %conv1657 = zext i8 %744 to i32
  %cmp1658 = icmp eq i32 129, %conv1657
  br i1 %cmp1658, label %cond.true1660, label %cond.false1672

cond.true1660:                                    ; preds = %cond.true1655
  %745 = load i8*, i8** %uc, align 8
  %arrayidx1661 = getelementptr inbounds i8, i8* %745, i64 2
  %746 = load i8, i8* %arrayidx1661, align 1
  %conv1662 = zext i8 %746 to i32
  %cmp1663 = icmp eq i32 204, %conv1662
  br i1 %cmp1663, label %land.rhs1665, label %land.end1670

land.rhs1665:                                     ; preds = %cond.true1660
  %747 = load i8*, i8** %uc, align 8
  %arrayidx1666 = getelementptr inbounds i8, i8* %747, i64 3
  %748 = load i8, i8* %arrayidx1666, align 1
  %conv1667 = zext i8 %748 to i32
  %cmp1668 = icmp eq i32 147, %conv1667
  br label %land.end1670

land.end1670:                                     ; preds = %land.rhs1665, %cond.true1660
  %749 = phi i1 [ false, %cond.true1660 ], [ %cmp1668, %land.rhs1665 ]
  %750 = zext i1 %749 to i64
  %cond1671 = select i1 %749, i32 4, i32 0
  br label %cond.end1753

cond.false1672:                                   ; preds = %cond.true1655
  %751 = load i8*, i8** %uc, align 8
  %arrayidx1673 = getelementptr inbounds i8, i8* %751, i64 1
  %752 = load i8, i8* %arrayidx1673, align 1
  %conv1674 = zext i8 %752 to i32
  %cmp1675 = icmp eq i32 133, %conv1674
  br i1 %cmp1675, label %cond.true1677, label %cond.false1702

cond.true1677:                                    ; preds = %cond.false1672
  %753 = load i8*, i8** %uc, align 8
  %arrayidx1678 = getelementptr inbounds i8, i8* %753, i64 2
  %754 = load i8, i8* %arrayidx1678, align 1
  %conv1679 = zext i8 %754 to i32
  %cmp1680 = icmp eq i32 204, %conv1679
  br i1 %cmp1680, label %cond.true1682, label %cond.false1688

cond.true1682:                                    ; preds = %cond.true1677
  %755 = load i8*, i8** %uc, align 8
  %arrayidx1683 = getelementptr inbounds i8, i8* %755, i64 3
  %756 = load i8, i8* %arrayidx1683, align 1
  %conv1684 = zext i8 %756 to i32
  %cmp1685 = icmp eq i32 147, %conv1684
  %757 = zext i1 %cmp1685 to i64
  %cond1687 = select i1 %cmp1685, i32 4, i32 0
  br label %cond.end1700

cond.false1688:                                   ; preds = %cond.true1677
  %758 = load i8*, i8** %uc, align 8
  %arrayidx1689 = getelementptr inbounds i8, i8* %758, i64 2
  %759 = load i8, i8* %arrayidx1689, align 1
  %conv1690 = zext i8 %759 to i32
  %cmp1691 = icmp eq i32 205, %conv1690
  br i1 %cmp1691, label %land.rhs1693, label %land.end1698

land.rhs1693:                                     ; preds = %cond.false1688
  %760 = load i8*, i8** %uc, align 8
  %arrayidx1694 = getelementptr inbounds i8, i8* %760, i64 3
  %761 = load i8, i8* %arrayidx1694, align 1
  %conv1695 = zext i8 %761 to i32
  %cmp1696 = icmp eq i32 130, %conv1695
  br label %land.end1698

land.end1698:                                     ; preds = %land.rhs1693, %cond.false1688
  %762 = phi i1 [ false, %cond.false1688 ], [ %cmp1696, %land.rhs1693 ]
  %763 = zext i1 %762 to i64
  %cond1699 = select i1 %762, i32 4, i32 0
  br label %cond.end1700

cond.end1700:                                     ; preds = %land.end1698, %cond.true1682
  %cond1701 = phi i32 [ %cond1687, %cond.true1682 ], [ %cond1699, %land.end1698 ]
  br label %cond.end1751

cond.false1702:                                   ; preds = %cond.false1672
  %764 = load i8*, i8** %uc, align 8
  %arrayidx1703 = getelementptr inbounds i8, i8* %764, i64 1
  %765 = load i8, i8* %arrayidx1703, align 1
  %conv1704 = zext i8 %765 to i32
  %cmp1705 = icmp eq i32 137, %conv1704
  br i1 %cmp1705, label %cond.true1707, label %cond.false1732

cond.true1707:                                    ; preds = %cond.false1702
  %766 = load i8*, i8** %uc, align 8
  %arrayidx1708 = getelementptr inbounds i8, i8* %766, i64 2
  %767 = load i8, i8* %arrayidx1708, align 1
  %conv1709 = zext i8 %767 to i32
  %cmp1710 = icmp eq i32 205, %conv1709
  br i1 %cmp1710, label %cond.true1712, label %cond.false1718

cond.true1712:                                    ; preds = %cond.true1707
  %768 = load i8*, i8** %uc, align 8
  %arrayidx1713 = getelementptr inbounds i8, i8* %768, i64 3
  %769 = load i8, i8* %arrayidx1713, align 1
  %conv1714 = zext i8 %769 to i32
  %cmp1715 = icmp eq i32 130, %conv1714
  %770 = zext i1 %cmp1715 to i64
  %cond1717 = select i1 %cmp1715, i32 4, i32 0
  br label %cond.end1730

cond.false1718:                                   ; preds = %cond.true1707
  %771 = load i8*, i8** %uc, align 8
  %arrayidx1719 = getelementptr inbounds i8, i8* %771, i64 2
  %772 = load i8, i8* %arrayidx1719, align 1
  %conv1720 = zext i8 %772 to i32
  %cmp1721 = icmp eq i32 206, %conv1720
  br i1 %cmp1721, label %land.rhs1723, label %land.end1728

land.rhs1723:                                     ; preds = %cond.false1718
  %773 = load i8*, i8** %uc, align 8
  %arrayidx1724 = getelementptr inbounds i8, i8* %773, i64 3
  %774 = load i8, i8* %arrayidx1724, align 1
  %conv1725 = zext i8 %774 to i32
  %cmp1726 = icmp eq i32 185, %conv1725
  br label %land.end1728

land.end1728:                                     ; preds = %land.rhs1723, %cond.false1718
  %775 = phi i1 [ false, %cond.false1718 ], [ %cmp1726, %land.rhs1723 ]
  %776 = zext i1 %775 to i64
  %cond1729 = select i1 %775, i32 4, i32 0
  br label %cond.end1730

cond.end1730:                                     ; preds = %land.end1728, %cond.true1712
  %cond1731 = phi i32 [ %cond1717, %cond.true1712 ], [ %cond1729, %land.end1728 ]
  br label %cond.end1749

cond.false1732:                                   ; preds = %cond.false1702
  %777 = load i8*, i8** %uc, align 8
  %arrayidx1733 = getelementptr inbounds i8, i8* %777, i64 1
  %778 = load i8, i8* %arrayidx1733, align 1
  %conv1734 = zext i8 %778 to i32
  %cmp1735 = icmp eq i32 142, %conv1734
  br i1 %cmp1735, label %land.lhs.true1737, label %land.end1747

land.lhs.true1737:                                ; preds = %cond.false1732
  %779 = load i8*, i8** %uc, align 8
  %arrayidx1738 = getelementptr inbounds i8, i8* %779, i64 2
  %780 = load i8, i8* %arrayidx1738, align 1
  %conv1739 = zext i8 %780 to i32
  %cmp1740 = icmp eq i32 206, %conv1739
  br i1 %cmp1740, label %land.rhs1742, label %land.end1747

land.rhs1742:                                     ; preds = %land.lhs.true1737
  %781 = load i8*, i8** %uc, align 8
  %arrayidx1743 = getelementptr inbounds i8, i8* %781, i64 3
  %782 = load i8, i8* %arrayidx1743, align 1
  %conv1744 = zext i8 %782 to i32
  %cmp1745 = icmp eq i32 185, %conv1744
  br label %land.end1747

land.end1747:                                     ; preds = %land.rhs1742, %land.lhs.true1737, %cond.false1732
  %783 = phi i1 [ false, %land.lhs.true1737 ], [ false, %cond.false1732 ], [ %cmp1745, %land.rhs1742 ]
  %784 = zext i1 %783 to i64
  %cond1748 = select i1 %783, i32 4, i32 0
  br label %cond.end1749

cond.end1749:                                     ; preds = %land.end1747, %cond.end1730
  %cond1750 = phi i32 [ %cond1731, %cond.end1730 ], [ %cond1748, %land.end1747 ]
  br label %cond.end1751

cond.end1751:                                     ; preds = %cond.end1749, %cond.end1700
  %cond1752 = phi i32 [ %cond1701, %cond.end1700 ], [ %cond1750, %cond.end1749 ]
  br label %cond.end1753

cond.end1753:                                     ; preds = %cond.end1751, %land.end1670
  %cond1754 = phi i32 [ %cond1671, %land.end1670 ], [ %cond1752, %cond.end1751 ]
  br label %cond.end1830

cond.false1755:                                   ; preds = %cond.false1650
  %785 = load i8*, i8** %uc, align 8
  %arrayidx1756 = getelementptr inbounds i8, i8* %785, i64 0
  %786 = load i8, i8* %arrayidx1756, align 1
  %conv1757 = zext i8 %786 to i32
  %cmp1758 = icmp eq i32 213, %conv1757
  br i1 %cmp1758, label %cond.true1760, label %cond.false1827

cond.true1760:                                    ; preds = %cond.false1755
  %787 = load i8*, i8** %uc, align 8
  %arrayidx1761 = getelementptr inbounds i8, i8* %787, i64 1
  %788 = load i8, i8* %arrayidx1761, align 1
  %conv1762 = zext i8 %788 to i32
  %cmp1763 = icmp eq i32 165, %conv1762
  br i1 %cmp1763, label %cond.true1765, label %cond.false1777

cond.true1765:                                    ; preds = %cond.true1760
  %789 = load i8*, i8** %uc, align 8
  %arrayidx1766 = getelementptr inbounds i8, i8* %789, i64 2
  %790 = load i8, i8* %arrayidx1766, align 1
  %conv1767 = zext i8 %790 to i32
  %cmp1768 = icmp eq i32 214, %conv1767
  br i1 %cmp1768, label %land.rhs1770, label %land.end1775

land.rhs1770:                                     ; preds = %cond.true1765
  %791 = load i8*, i8** %uc, align 8
  %arrayidx1771 = getelementptr inbounds i8, i8* %791, i64 3
  %792 = load i8, i8* %arrayidx1771, align 1
  %conv1772 = zext i8 %792 to i32
  %cmp1773 = icmp eq i32 130, %conv1772
  br label %land.end1775

land.end1775:                                     ; preds = %land.rhs1770, %cond.true1765
  %793 = phi i1 [ false, %cond.true1765 ], [ %cmp1773, %land.rhs1770 ]
  %794 = zext i1 %793 to i64
  %cond1776 = select i1 %793, i32 4, i32 0
  br label %cond.end1825

cond.false1777:                                   ; preds = %cond.true1760
  %795 = load i8*, i8** %uc, align 8
  %arrayidx1778 = getelementptr inbounds i8, i8* %795, i64 1
  %796 = load i8, i8* %arrayidx1778, align 1
  %conv1779 = zext i8 %796 to i32
  %cmp1780 = icmp eq i32 180, %conv1779
  br i1 %cmp1780, label %cond.true1782, label %cond.false1806

cond.true1782:                                    ; preds = %cond.false1777
  %797 = load i8*, i8** %uc, align 8
  %arrayidx1783 = getelementptr inbounds i8, i8* %797, i64 2
  %798 = load i8, i8* %arrayidx1783, align 1
  %conv1784 = zext i8 %798 to i32
  %cmp1785 = icmp eq i32 213, %conv1784
  br i1 %cmp1785, label %land.rhs1787, label %land.end1804

land.rhs1787:                                     ; preds = %cond.true1782
  %799 = load i8*, i8** %uc, align 8
  %arrayidx1788 = getelementptr inbounds i8, i8* %799, i64 3
  %800 = load i8, i8* %arrayidx1788, align 1
  %conv1789 = zext i8 %800 to i32
  %and1790 = and i32 %conv1789, 247
  %cmp1791 = icmp eq i32 %and1790, 165
  br i1 %cmp1791, label %lor.end1803, label %lor.lhs.false1793

lor.lhs.false1793:                                ; preds = %land.rhs1787
  %801 = load i8*, i8** %uc, align 8
  %arrayidx1794 = getelementptr inbounds i8, i8* %801, i64 3
  %802 = load i8, i8* %arrayidx1794, align 1
  %conv1795 = zext i8 %802 to i32
  %cmp1796 = icmp eq i32 %conv1795, 171
  br i1 %cmp1796, label %lor.end1803, label %lor.rhs1798

lor.rhs1798:                                      ; preds = %lor.lhs.false1793
  %803 = load i8*, i8** %uc, align 8
  %arrayidx1799 = getelementptr inbounds i8, i8* %803, i64 3
  %804 = load i8, i8* %arrayidx1799, align 1
  %conv1800 = zext i8 %804 to i32
  %cmp1801 = icmp eq i32 %conv1800, 182
  br label %lor.end1803

lor.end1803:                                      ; preds = %lor.rhs1798, %lor.lhs.false1793, %land.rhs1787
  %805 = phi i1 [ true, %lor.lhs.false1793 ], [ true, %land.rhs1787 ], [ %cmp1801, %lor.rhs1798 ]
  br label %land.end1804

land.end1804:                                     ; preds = %lor.end1803, %cond.true1782
  %806 = phi i1 [ false, %cond.true1782 ], [ %805, %lor.end1803 ]
  %807 = zext i1 %806 to i64
  %cond1805 = select i1 %806, i32 4, i32 0
  br label %cond.end1823

cond.false1806:                                   ; preds = %cond.false1777
  %808 = load i8*, i8** %uc, align 8
  %arrayidx1807 = getelementptr inbounds i8, i8* %808, i64 1
  %809 = load i8, i8* %arrayidx1807, align 1
  %conv1808 = zext i8 %809 to i32
  %cmp1809 = icmp eq i32 190, %conv1808
  br i1 %cmp1809, label %land.lhs.true1811, label %land.end1821

land.lhs.true1811:                                ; preds = %cond.false1806
  %810 = load i8*, i8** %uc, align 8
  %arrayidx1812 = getelementptr inbounds i8, i8* %810, i64 2
  %811 = load i8, i8* %arrayidx1812, align 1
  %conv1813 = zext i8 %811 to i32
  %cmp1814 = icmp eq i32 213, %conv1813
  br i1 %cmp1814, label %land.rhs1816, label %land.end1821

land.rhs1816:                                     ; preds = %land.lhs.true1811
  %812 = load i8*, i8** %uc, align 8
  %arrayidx1817 = getelementptr inbounds i8, i8* %812, i64 3
  %813 = load i8, i8* %arrayidx1817, align 1
  %conv1818 = zext i8 %813 to i32
  %cmp1819 = icmp eq i32 182, %conv1818
  br label %land.end1821

land.end1821:                                     ; preds = %land.rhs1816, %land.lhs.true1811, %cond.false1806
  %814 = phi i1 [ false, %land.lhs.true1811 ], [ false, %cond.false1806 ], [ %cmp1819, %land.rhs1816 ]
  %815 = zext i1 %814 to i64
  %cond1822 = select i1 %814, i32 4, i32 0
  br label %cond.end1823

cond.end1823:                                     ; preds = %land.end1821, %land.end1804
  %cond1824 = phi i32 [ %cond1805, %land.end1804 ], [ %cond1822, %land.end1821 ]
  br label %cond.end1825

cond.end1825:                                     ; preds = %cond.end1823, %land.end1775
  %cond1826 = phi i32 [ %cond1776, %land.end1775 ], [ %cond1824, %cond.end1823 ]
  br label %cond.end1828

cond.false1827:                                   ; preds = %cond.false1755
  br label %cond.end1828

cond.end1828:                                     ; preds = %cond.false1827, %cond.end1825
  %cond1829 = phi i32 [ %cond1826, %cond.end1825 ], [ 0, %cond.false1827 ]
  br label %cond.end1830

cond.end1830:                                     ; preds = %cond.end1828, %cond.end1753
  %cond1831 = phi i32 [ %cond1754, %cond.end1753 ], [ %cond1829, %cond.end1828 ]
  br label %cond.end1832

cond.end1832:                                     ; preds = %cond.end1830, %cond.end1648
  %cond1833 = phi i32 [ %cond1649, %cond.end1648 ], [ %cond1831, %cond.end1830 ]
  br label %cond.end1834

cond.end1834:                                     ; preds = %cond.end1832, %land.end1569
  %cond1835 = phi i32 [ %cond1570, %land.end1569 ], [ %cond1833, %cond.end1832 ]
  br label %cond.end1836

cond.end1836:                                     ; preds = %cond.end1834, %land.end1552
  %cond1837 = phi i32 [ %cond1553, %land.end1552 ], [ %cond1835, %cond.end1834 ]
  br label %cond.end1838

cond.end1838:                                     ; preds = %cond.end1836, %land.end1530
  %cond1839 = phi i32 [ %cond1531, %land.end1530 ], [ %cond1837, %cond.end1836 ]
  br label %cond.end1840

cond.end1840:                                     ; preds = %cond.end1838, %land.end1508
  %cond1841 = phi i32 [ %cond1509, %land.end1508 ], [ %cond1839, %cond.end1838 ]
  br label %cond.end1842

cond.end1842:                                     ; preds = %cond.end1840, %lor.end1491
  %cond1843 = phi i32 [ %cond1492, %lor.end1491 ], [ %cond1841, %cond.end1840 ]
  br label %cond.end1844

cond.end1844:                                     ; preds = %cond.end1842, %land.end1474
  %cond1845 = phi i32 [ %cond1475, %land.end1474 ], [ %cond1843, %cond.end1842 ]
  br label %cond.end1846

cond.end1846:                                     ; preds = %cond.end1844, %land.end1457
  %cond1847 = phi i32 [ %cond1458, %land.end1457 ], [ %cond1845, %cond.end1844 ]
  br label %cond.end1848

cond.end1848:                                     ; preds = %cond.end1846, %land.end1440
  %cond1849 = phi i32 [ %cond1441, %land.end1440 ], [ %cond1847, %cond.end1846 ]
  br label %cond.end1850

cond.end1850:                                     ; preds = %cond.end1848, %cond.end1423
  %cond1851 = phi i32 [ %cond1424, %cond.end1423 ], [ %cond1849, %cond.end1848 ]
  br label %cond.end1852

cond.end1852:                                     ; preds = %cond.end1850, %land.end1387
  %cond1853 = phi i32 [ %cond1388, %land.end1387 ], [ %cond1851, %cond.end1850 ]
  br label %cond.end2106

cond.false1854:                                   ; preds = %cond.false1366
  %816 = load i8*, i8** %e, align 8
  %817 = load i8*, i8** %uc, align 8
  %sub.ptr.lhs.cast1855 = ptrtoint i8* %816 to i64
  %sub.ptr.rhs.cast1856 = ptrtoint i8* %817 to i64
  %sub.ptr.sub1857 = sub i64 %sub.ptr.lhs.cast1855, %sub.ptr.rhs.cast1856
  %cmp1858 = icmp sgt i64 %sub.ptr.sub1857, 2
  br i1 %cmp1858, label %cond.true1860, label %cond.false2053

cond.true1860:                                    ; preds = %cond.false1854
  %818 = load i8*, i8** %uc, align 8
  %arrayidx1861 = getelementptr inbounds i8, i8* %818, i64 0
  %819 = load i8, i8* %arrayidx1861, align 1
  %conv1862 = zext i8 %819 to i32
  %cmp1863 = icmp eq i32 97, %conv1862
  br i1 %cmp1863, label %cond.true1865, label %cond.false1877

cond.true1865:                                    ; preds = %cond.true1860
  %820 = load i8*, i8** %uc, align 8
  %arrayidx1866 = getelementptr inbounds i8, i8* %820, i64 1
  %821 = load i8, i8* %arrayidx1866, align 1
  %conv1867 = zext i8 %821 to i32
  %cmp1868 = icmp eq i32 202, %conv1867
  br i1 %cmp1868, label %land.rhs1870, label %land.end1875

land.rhs1870:                                     ; preds = %cond.true1865
  %822 = load i8*, i8** %uc, align 8
  %arrayidx1871 = getelementptr inbounds i8, i8* %822, i64 2
  %823 = load i8, i8* %arrayidx1871, align 1
  %conv1872 = zext i8 %823 to i32
  %cmp1873 = icmp eq i32 190, %conv1872
  br label %land.end1875

land.end1875:                                     ; preds = %land.rhs1870, %cond.true1865
  %824 = phi i1 [ false, %cond.true1865 ], [ %cmp1873, %land.rhs1870 ]
  %825 = zext i1 %824 to i64
  %cond1876 = select i1 %824, i32 3, i32 0
  br label %cond.end2051

cond.false1877:                                   ; preds = %cond.true1860
  %826 = load i8*, i8** %uc, align 8
  %arrayidx1878 = getelementptr inbounds i8, i8* %826, i64 0
  %827 = load i8, i8* %arrayidx1878, align 1
  %conv1879 = zext i8 %827 to i32
  %cmp1880 = icmp eq i32 102, %conv1879
  br i1 %cmp1880, label %cond.true1882, label %cond.false1913

cond.true1882:                                    ; preds = %cond.false1877
  %828 = load i8*, i8** %uc, align 8
  %arrayidx1883 = getelementptr inbounds i8, i8* %828, i64 1
  %829 = load i8, i8* %arrayidx1883, align 1
  %conv1884 = zext i8 %829 to i32
  %cmp1885 = icmp eq i32 102, %conv1884
  br i1 %cmp1885, label %cond.true1887, label %cond.false1899

cond.true1887:                                    ; preds = %cond.true1882
  %830 = load i8*, i8** %uc, align 8
  %arrayidx1888 = getelementptr inbounds i8, i8* %830, i64 2
  %831 = load i8, i8* %arrayidx1888, align 1
  %conv1889 = zext i8 %831 to i32
  %cmp1890 = icmp eq i32 105, %conv1889
  br i1 %cmp1890, label %lor.end1897, label %lor.rhs1892

lor.rhs1892:                                      ; preds = %cond.true1887
  %832 = load i8*, i8** %uc, align 8
  %arrayidx1893 = getelementptr inbounds i8, i8* %832, i64 2
  %833 = load i8, i8* %arrayidx1893, align 1
  %conv1894 = zext i8 %833 to i32
  %cmp1895 = icmp eq i32 108, %conv1894
  br label %lor.end1897

lor.end1897:                                      ; preds = %lor.rhs1892, %cond.true1887
  %834 = phi i1 [ true, %cond.true1887 ], [ %cmp1895, %lor.rhs1892 ]
  %835 = zext i1 %834 to i64
  %cond1898 = select i1 %834, i32 3, i32 2
  br label %cond.end1911

cond.false1899:                                   ; preds = %cond.true1882
  %836 = load i8*, i8** %uc, align 8
  %arrayidx1900 = getelementptr inbounds i8, i8* %836, i64 1
  %837 = load i8, i8* %arrayidx1900, align 1
  %conv1901 = zext i8 %837 to i32
  %cmp1902 = icmp eq i32 105, %conv1901
  br i1 %cmp1902, label %lor.end1909, label %lor.rhs1904

lor.rhs1904:                                      ; preds = %cond.false1899
  %838 = load i8*, i8** %uc, align 8
  %arrayidx1905 = getelementptr inbounds i8, i8* %838, i64 1
  %839 = load i8, i8* %arrayidx1905, align 1
  %conv1906 = zext i8 %839 to i32
  %cmp1907 = icmp eq i32 108, %conv1906
  br label %lor.end1909

lor.end1909:                                      ; preds = %lor.rhs1904, %cond.false1899
  %840 = phi i1 [ true, %cond.false1899 ], [ %cmp1907, %lor.rhs1904 ]
  %841 = zext i1 %840 to i64
  %cond1910 = select i1 %840, i32 2, i32 0
  br label %cond.end1911

cond.end1911:                                     ; preds = %lor.end1909, %lor.end1897
  %cond1912 = phi i32 [ %cond1898, %lor.end1897 ], [ %cond1910, %lor.end1909 ]
  br label %cond.end2049

cond.false1913:                                   ; preds = %cond.false1877
  %842 = load i8*, i8** %uc, align 8
  %arrayidx1914 = getelementptr inbounds i8, i8* %842, i64 0
  %843 = load i8, i8* %arrayidx1914, align 1
  %conv1915 = zext i8 %843 to i32
  %cmp1916 = icmp eq i32 104, %conv1915
  br i1 %cmp1916, label %cond.true1918, label %cond.false1930

cond.true1918:                                    ; preds = %cond.false1913
  %844 = load i8*, i8** %uc, align 8
  %arrayidx1919 = getelementptr inbounds i8, i8* %844, i64 1
  %845 = load i8, i8* %arrayidx1919, align 1
  %conv1920 = zext i8 %845 to i32
  %cmp1921 = icmp eq i32 204, %conv1920
  br i1 %cmp1921, label %land.rhs1923, label %land.end1928

land.rhs1923:                                     ; preds = %cond.true1918
  %846 = load i8*, i8** %uc, align 8
  %arrayidx1924 = getelementptr inbounds i8, i8* %846, i64 2
  %847 = load i8, i8* %arrayidx1924, align 1
  %conv1925 = zext i8 %847 to i32
  %cmp1926 = icmp eq i32 177, %conv1925
  br label %land.end1928

land.end1928:                                     ; preds = %land.rhs1923, %cond.true1918
  %848 = phi i1 [ false, %cond.true1918 ], [ %cmp1926, %land.rhs1923 ]
  %849 = zext i1 %848 to i64
  %cond1929 = select i1 %848, i32 3, i32 0
  br label %cond.end2047

cond.false1930:                                   ; preds = %cond.false1913
  %850 = load i8*, i8** %uc, align 8
  %arrayidx1931 = getelementptr inbounds i8, i8* %850, i64 0
  %851 = load i8, i8* %arrayidx1931, align 1
  %conv1932 = zext i8 %851 to i32
  %cmp1933 = icmp eq i32 105, %conv1932
  br i1 %cmp1933, label %cond.true1935, label %cond.false1947

cond.true1935:                                    ; preds = %cond.false1930
  %852 = load i8*, i8** %uc, align 8
  %arrayidx1936 = getelementptr inbounds i8, i8* %852, i64 1
  %853 = load i8, i8* %arrayidx1936, align 1
  %conv1937 = zext i8 %853 to i32
  %cmp1938 = icmp eq i32 204, %conv1937
  br i1 %cmp1938, label %land.rhs1940, label %land.end1945

land.rhs1940:                                     ; preds = %cond.true1935
  %854 = load i8*, i8** %uc, align 8
  %arrayidx1941 = getelementptr inbounds i8, i8* %854, i64 2
  %855 = load i8, i8* %arrayidx1941, align 1
  %conv1942 = zext i8 %855 to i32
  %cmp1943 = icmp eq i32 135, %conv1942
  br label %land.end1945

land.end1945:                                     ; preds = %land.rhs1940, %cond.true1935
  %856 = phi i1 [ false, %cond.true1935 ], [ %cmp1943, %land.rhs1940 ]
  %857 = zext i1 %856 to i64
  %cond1946 = select i1 %856, i32 3, i32 0
  br label %cond.end2045

cond.false1947:                                   ; preds = %cond.false1930
  %858 = load i8*, i8** %uc, align 8
  %arrayidx1948 = getelementptr inbounds i8, i8* %858, i64 0
  %859 = load i8, i8* %arrayidx1948, align 1
  %conv1949 = zext i8 %859 to i32
  %cmp1950 = icmp eq i32 106, %conv1949
  br i1 %cmp1950, label %cond.true1952, label %cond.false1964

cond.true1952:                                    ; preds = %cond.false1947
  %860 = load i8*, i8** %uc, align 8
  %arrayidx1953 = getelementptr inbounds i8, i8* %860, i64 1
  %861 = load i8, i8* %arrayidx1953, align 1
  %conv1954 = zext i8 %861 to i32
  %cmp1955 = icmp eq i32 204, %conv1954
  br i1 %cmp1955, label %land.rhs1957, label %land.end1962

land.rhs1957:                                     ; preds = %cond.true1952
  %862 = load i8*, i8** %uc, align 8
  %arrayidx1958 = getelementptr inbounds i8, i8* %862, i64 2
  %863 = load i8, i8* %arrayidx1958, align 1
  %conv1959 = zext i8 %863 to i32
  %cmp1960 = icmp eq i32 140, %conv1959
  br label %land.end1962

land.end1962:                                     ; preds = %land.rhs1957, %cond.true1952
  %864 = phi i1 [ false, %cond.true1952 ], [ %cmp1960, %land.rhs1957 ]
  %865 = zext i1 %864 to i64
  %cond1963 = select i1 %864, i32 3, i32 0
  br label %cond.end2043

cond.false1964:                                   ; preds = %cond.false1947
  %866 = load i8*, i8** %uc, align 8
  %arrayidx1965 = getelementptr inbounds i8, i8* %866, i64 0
  %867 = load i8, i8* %arrayidx1965, align 1
  %conv1966 = zext i8 %867 to i32
  %cmp1967 = icmp eq i32 115, %conv1966
  br i1 %cmp1967, label %cond.true1969, label %cond.false1981

cond.true1969:                                    ; preds = %cond.false1964
  %868 = load i8*, i8** %uc, align 8
  %arrayidx1970 = getelementptr inbounds i8, i8* %868, i64 1
  %869 = load i8, i8* %arrayidx1970, align 1
  %conv1971 = zext i8 %869 to i32
  %cmp1972 = icmp eq i32 115, %conv1971
  br i1 %cmp1972, label %lor.end1979, label %lor.rhs1974

lor.rhs1974:                                      ; preds = %cond.true1969
  %870 = load i8*, i8** %uc, align 8
  %arrayidx1975 = getelementptr inbounds i8, i8* %870, i64 1
  %871 = load i8, i8* %arrayidx1975, align 1
  %conv1976 = zext i8 %871 to i32
  %cmp1977 = icmp eq i32 116, %conv1976
  br label %lor.end1979

lor.end1979:                                      ; preds = %lor.rhs1974, %cond.true1969
  %872 = phi i1 [ true, %cond.true1969 ], [ %cmp1977, %lor.rhs1974 ]
  %873 = zext i1 %872 to i64
  %cond1980 = select i1 %872, i32 2, i32 0
  br label %cond.end2041

cond.false1981:                                   ; preds = %cond.false1964
  %874 = load i8*, i8** %uc, align 8
  %arrayidx1982 = getelementptr inbounds i8, i8* %874, i64 0
  %875 = load i8, i8* %arrayidx1982, align 1
  %conv1983 = zext i8 %875 to i32
  %cmp1984 = icmp eq i32 116, %conv1983
  br i1 %cmp1984, label %cond.true1986, label %cond.false1998

cond.true1986:                                    ; preds = %cond.false1981
  %876 = load i8*, i8** %uc, align 8
  %arrayidx1987 = getelementptr inbounds i8, i8* %876, i64 1
  %877 = load i8, i8* %arrayidx1987, align 1
  %conv1988 = zext i8 %877 to i32
  %cmp1989 = icmp eq i32 204, %conv1988
  br i1 %cmp1989, label %land.rhs1991, label %land.end1996

land.rhs1991:                                     ; preds = %cond.true1986
  %878 = load i8*, i8** %uc, align 8
  %arrayidx1992 = getelementptr inbounds i8, i8* %878, i64 2
  %879 = load i8, i8* %arrayidx1992, align 1
  %conv1993 = zext i8 %879 to i32
  %cmp1994 = icmp eq i32 136, %conv1993
  br label %land.end1996

land.end1996:                                     ; preds = %land.rhs1991, %cond.true1986
  %880 = phi i1 [ false, %cond.true1986 ], [ %cmp1994, %land.rhs1991 ]
  %881 = zext i1 %880 to i64
  %cond1997 = select i1 %880, i32 3, i32 0
  br label %cond.end2039

cond.false1998:                                   ; preds = %cond.false1981
  %882 = load i8*, i8** %uc, align 8
  %arrayidx1999 = getelementptr inbounds i8, i8* %882, i64 0
  %883 = load i8, i8* %arrayidx1999, align 1
  %conv2000 = zext i8 %883 to i32
  %cmp2001 = icmp eq i32 119, %conv2000
  br i1 %cmp2001, label %cond.true2008, label %lor.lhs.false2003

lor.lhs.false2003:                                ; preds = %cond.false1998
  %884 = load i8*, i8** %uc, align 8
  %arrayidx2004 = getelementptr inbounds i8, i8* %884, i64 0
  %885 = load i8, i8* %arrayidx2004, align 1
  %conv2005 = zext i8 %885 to i32
  %cmp2006 = icmp eq i32 121, %conv2005
  br i1 %cmp2006, label %cond.true2008, label %cond.false2020

cond.true2008:                                    ; preds = %lor.lhs.false2003, %cond.false1998
  %886 = load i8*, i8** %uc, align 8
  %arrayidx2009 = getelementptr inbounds i8, i8* %886, i64 1
  %887 = load i8, i8* %arrayidx2009, align 1
  %conv2010 = zext i8 %887 to i32
  %cmp2011 = icmp eq i32 204, %conv2010
  br i1 %cmp2011, label %land.rhs2013, label %land.end2018

land.rhs2013:                                     ; preds = %cond.true2008
  %888 = load i8*, i8** %uc, align 8
  %arrayidx2014 = getelementptr inbounds i8, i8* %888, i64 2
  %889 = load i8, i8* %arrayidx2014, align 1
  %conv2015 = zext i8 %889 to i32
  %cmp2016 = icmp eq i32 138, %conv2015
  br label %land.end2018

land.end2018:                                     ; preds = %land.rhs2013, %cond.true2008
  %890 = phi i1 [ false, %cond.true2008 ], [ %cmp2016, %land.rhs2013 ]
  %891 = zext i1 %890 to i64
  %cond2019 = select i1 %890, i32 3, i32 0
  br label %cond.end2037

cond.false2020:                                   ; preds = %lor.lhs.false2003
  %892 = load i8*, i8** %uc, align 8
  %arrayidx2021 = getelementptr inbounds i8, i8* %892, i64 0
  %893 = load i8, i8* %arrayidx2021, align 1
  %conv2022 = zext i8 %893 to i32
  %cmp2023 = icmp eq i32 202, %conv2022
  br i1 %cmp2023, label %land.lhs.true2025, label %land.end2035

land.lhs.true2025:                                ; preds = %cond.false2020
  %894 = load i8*, i8** %uc, align 8
  %arrayidx2026 = getelementptr inbounds i8, i8* %894, i64 1
  %895 = load i8, i8* %arrayidx2026, align 1
  %conv2027 = zext i8 %895 to i32
  %cmp2028 = icmp eq i32 188, %conv2027
  br i1 %cmp2028, label %land.rhs2030, label %land.end2035

land.rhs2030:                                     ; preds = %land.lhs.true2025
  %896 = load i8*, i8** %uc, align 8
  %arrayidx2031 = getelementptr inbounds i8, i8* %896, i64 2
  %897 = load i8, i8* %arrayidx2031, align 1
  %conv2032 = zext i8 %897 to i32
  %cmp2033 = icmp eq i32 110, %conv2032
  br label %land.end2035

land.end2035:                                     ; preds = %land.rhs2030, %land.lhs.true2025, %cond.false2020
  %898 = phi i1 [ false, %land.lhs.true2025 ], [ false, %cond.false2020 ], [ %cmp2033, %land.rhs2030 ]
  %899 = zext i1 %898 to i64
  %cond2036 = select i1 %898, i32 3, i32 0
  br label %cond.end2037

cond.end2037:                                     ; preds = %land.end2035, %land.end2018
  %cond2038 = phi i32 [ %cond2019, %land.end2018 ], [ %cond2036, %land.end2035 ]
  br label %cond.end2039

cond.end2039:                                     ; preds = %cond.end2037, %land.end1996
  %cond2040 = phi i32 [ %cond1997, %land.end1996 ], [ %cond2038, %cond.end2037 ]
  br label %cond.end2041

cond.end2041:                                     ; preds = %cond.end2039, %lor.end1979
  %cond2042 = phi i32 [ %cond1980, %lor.end1979 ], [ %cond2040, %cond.end2039 ]
  br label %cond.end2043

cond.end2043:                                     ; preds = %cond.end2041, %land.end1962
  %cond2044 = phi i32 [ %cond1963, %land.end1962 ], [ %cond2042, %cond.end2041 ]
  br label %cond.end2045

cond.end2045:                                     ; preds = %cond.end2043, %land.end1945
  %cond2046 = phi i32 [ %cond1946, %land.end1945 ], [ %cond2044, %cond.end2043 ]
  br label %cond.end2047

cond.end2047:                                     ; preds = %cond.end2045, %land.end1928
  %cond2048 = phi i32 [ %cond1929, %land.end1928 ], [ %cond2046, %cond.end2045 ]
  br label %cond.end2049

cond.end2049:                                     ; preds = %cond.end2047, %cond.end1911
  %cond2050 = phi i32 [ %cond1912, %cond.end1911 ], [ %cond2048, %cond.end2047 ]
  br label %cond.end2051

cond.end2051:                                     ; preds = %cond.end2049, %land.end1875
  %cond2052 = phi i32 [ %cond1876, %land.end1875 ], [ %cond2050, %cond.end2049 ]
  br label %cond.end2104

cond.false2053:                                   ; preds = %cond.false1854
  %900 = load i8*, i8** %e, align 8
  %901 = load i8*, i8** %uc, align 8
  %sub.ptr.lhs.cast2054 = ptrtoint i8* %900 to i64
  %sub.ptr.rhs.cast2055 = ptrtoint i8* %901 to i64
  %sub.ptr.sub2056 = sub i64 %sub.ptr.lhs.cast2054, %sub.ptr.rhs.cast2055
  %cmp2057 = icmp sgt i64 %sub.ptr.sub2056, 1
  br i1 %cmp2057, label %cond.true2059, label %cond.false2101

cond.true2059:                                    ; preds = %cond.false2053
  %902 = load i8*, i8** %uc, align 8
  %arrayidx2060 = getelementptr inbounds i8, i8* %902, i64 0
  %903 = load i8, i8* %arrayidx2060, align 1
  %conv2061 = zext i8 %903 to i32
  %cmp2062 = icmp eq i32 102, %conv2061
  br i1 %cmp2062, label %cond.true2064, label %cond.false2081

cond.true2064:                                    ; preds = %cond.true2059
  %904 = load i8*, i8** %uc, align 8
  %arrayidx2065 = getelementptr inbounds i8, i8* %904, i64 1
  %905 = load i8, i8* %arrayidx2065, align 1
  %conv2066 = zext i8 %905 to i32
  %cmp2067 = icmp eq i32 102, %conv2066
  br i1 %cmp2067, label %lor.end2079, label %lor.lhs.false2069

lor.lhs.false2069:                                ; preds = %cond.true2064
  %906 = load i8*, i8** %uc, align 8
  %arrayidx2070 = getelementptr inbounds i8, i8* %906, i64 1
  %907 = load i8, i8* %arrayidx2070, align 1
  %conv2071 = zext i8 %907 to i32
  %cmp2072 = icmp eq i32 105, %conv2071
  br i1 %cmp2072, label %lor.end2079, label %lor.rhs2074

lor.rhs2074:                                      ; preds = %lor.lhs.false2069
  %908 = load i8*, i8** %uc, align 8
  %arrayidx2075 = getelementptr inbounds i8, i8* %908, i64 1
  %909 = load i8, i8* %arrayidx2075, align 1
  %conv2076 = zext i8 %909 to i32
  %cmp2077 = icmp eq i32 108, %conv2076
  br label %lor.end2079

lor.end2079:                                      ; preds = %lor.rhs2074, %lor.lhs.false2069, %cond.true2064
  %910 = phi i1 [ true, %lor.lhs.false2069 ], [ true, %cond.true2064 ], [ %cmp2077, %lor.rhs2074 ]
  %911 = zext i1 %910 to i64
  %cond2080 = select i1 %910, i32 2, i32 0
  br label %cond.end2099

cond.false2081:                                   ; preds = %cond.true2059
  %912 = load i8*, i8** %uc, align 8
  %arrayidx2082 = getelementptr inbounds i8, i8* %912, i64 0
  %913 = load i8, i8* %arrayidx2082, align 1
  %conv2083 = zext i8 %913 to i32
  %cmp2084 = icmp eq i32 115, %conv2083
  br i1 %cmp2084, label %land.rhs2086, label %land.end2097

land.rhs2086:                                     ; preds = %cond.false2081
  %914 = load i8*, i8** %uc, align 8
  %arrayidx2087 = getelementptr inbounds i8, i8* %914, i64 1
  %915 = load i8, i8* %arrayidx2087, align 1
  %conv2088 = zext i8 %915 to i32
  %cmp2089 = icmp eq i32 115, %conv2088
  br i1 %cmp2089, label %lor.end2096, label %lor.rhs2091

lor.rhs2091:                                      ; preds = %land.rhs2086
  %916 = load i8*, i8** %uc, align 8
  %arrayidx2092 = getelementptr inbounds i8, i8* %916, i64 1
  %917 = load i8, i8* %arrayidx2092, align 1
  %conv2093 = zext i8 %917 to i32
  %cmp2094 = icmp eq i32 116, %conv2093
  br label %lor.end2096

lor.end2096:                                      ; preds = %lor.rhs2091, %land.rhs2086
  %918 = phi i1 [ true, %land.rhs2086 ], [ %cmp2094, %lor.rhs2091 ]
  br label %land.end2097

land.end2097:                                     ; preds = %lor.end2096, %cond.false2081
  %919 = phi i1 [ false, %cond.false2081 ], [ %918, %lor.end2096 ]
  %920 = zext i1 %919 to i64
  %cond2098 = select i1 %919, i32 2, i32 0
  br label %cond.end2099

cond.end2099:                                     ; preds = %land.end2097, %lor.end2079
  %cond2100 = phi i32 [ %cond2080, %lor.end2079 ], [ %cond2098, %land.end2097 ]
  br label %cond.end2102

cond.false2101:                                   ; preds = %cond.false2053
  br label %cond.end2102

cond.end2102:                                     ; preds = %cond.false2101, %cond.end2099
  %cond2103 = phi i32 [ %cond2100, %cond.end2099 ], [ 0, %cond.false2101 ]
  br label %cond.end2104

cond.end2104:                                     ; preds = %cond.end2102, %cond.end2051
  %cond2105 = phi i32 [ %cond2052, %cond.end2051 ], [ %cond2103, %cond.end2102 ]
  br label %cond.end2106

cond.end2106:                                     ; preds = %cond.end2104, %cond.end1852
  %cond2107 = phi i32 [ %cond1853, %cond.end1852 ], [ %cond2105, %cond.end2104 ]
  br label %cond.end2108

cond.end2108:                                     ; preds = %cond.end2106, %cond.end1364
  %cond2109 = phi i32 [ %cond1365, %cond.end1364 ], [ %cond2107, %cond.end2106 ]
  br label %cond.end2110

cond.end2110:                                     ; preds = %cond.end2108, %cond.end810
  %cond2111 = phi i32 [ %cond811, %cond.end810 ], [ %cond2109, %cond.end2108 ]
  store i32 %cond2111, i32* %foldlen, align 4
  %tobool2112 = icmp ne i32 %cond2111, 0
  br i1 %tobool2112, label %if.then2113, label %if.end2118

if.then2113:                                      ; preds = %cond.end2110
  %921 = load i8*, i8** %uc, align 8
  %922 = load i8, i8* %921, align 1
  %idxprom2114 = zext i8 %922 to i64
  %arrayidx2115 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom2114
  %923 = load i8, i8* %arrayidx2115, align 1
  %conv2116 = zext i8 %923 to i32
  %924 = load i32, i32* %foldlen, align 4
  %sub2117 = sub nsw i32 %924, %conv2116
  store i32 %sub2117, i32* %foldlen, align 4
  br label %if.end2118

if.end2118:                                       ; preds = %if.then2113, %cond.end2110
  br label %if.end2253

if.else2119:                                      ; preds = %cond.false131, %cond.true130
  %925 = load i8*, i8** %e, align 8
  %926 = load i8*, i8** %uc, align 8
  %sub.ptr.lhs.cast2120 = ptrtoint i8* %925 to i64
  %sub.ptr.rhs.cast2121 = ptrtoint i8* %926 to i64
  %sub.ptr.sub2122 = sub i64 %sub.ptr.lhs.cast2120, %sub.ptr.rhs.cast2121
  %cmp2123 = icmp sgt i64 %sub.ptr.sub2122, 2
  br i1 %cmp2123, label %cond.true2125, label %cond.false2190

cond.true2125:                                    ; preds = %if.else2119
  %927 = load i8*, i8** %uc, align 8
  %arrayidx2126 = getelementptr inbounds i8, i8* %927, i64 0
  %928 = load i8, i8* %arrayidx2126, align 1
  %conv2127 = zext i8 %928 to i32
  %and2128 = and i32 %conv2127, 223
  %cmp2129 = icmp eq i32 %and2128, 70
  br i1 %cmp2129, label %cond.true2131, label %cond.false2167

cond.true2131:                                    ; preds = %cond.true2125
  %929 = load i8*, i8** %uc, align 8
  %arrayidx2132 = getelementptr inbounds i8, i8* %929, i64 1
  %930 = load i8, i8* %arrayidx2132, align 1
  %conv2133 = zext i8 %930 to i32
  %and2134 = and i32 %conv2133, 223
  %cmp2135 = icmp eq i32 %and2134, 70
  br i1 %cmp2135, label %cond.true2137, label %cond.false2151

cond.true2137:                                    ; preds = %cond.true2131
  %931 = load i8*, i8** %uc, align 8
  %arrayidx2138 = getelementptr inbounds i8, i8* %931, i64 2
  %932 = load i8, i8* %arrayidx2138, align 1
  %conv2139 = zext i8 %932 to i32
  %and2140 = and i32 %conv2139, 223
  %cmp2141 = icmp eq i32 %and2140, 73
  br i1 %cmp2141, label %lor.end2149, label %lor.rhs2143

lor.rhs2143:                                      ; preds = %cond.true2137
  %933 = load i8*, i8** %uc, align 8
  %arrayidx2144 = getelementptr inbounds i8, i8* %933, i64 2
  %934 = load i8, i8* %arrayidx2144, align 1
  %conv2145 = zext i8 %934 to i32
  %and2146 = and i32 %conv2145, 223
  %cmp2147 = icmp eq i32 %and2146, 76
  br label %lor.end2149

lor.end2149:                                      ; preds = %lor.rhs2143, %cond.true2137
  %935 = phi i1 [ true, %cond.true2137 ], [ %cmp2147, %lor.rhs2143 ]
  %936 = zext i1 %935 to i64
  %cond2150 = select i1 %935, i32 3, i32 2
  br label %cond.end2165

cond.false2151:                                   ; preds = %cond.true2131
  %937 = load i8*, i8** %uc, align 8
  %arrayidx2152 = getelementptr inbounds i8, i8* %937, i64 1
  %938 = load i8, i8* %arrayidx2152, align 1
  %conv2153 = zext i8 %938 to i32
  %and2154 = and i32 %conv2153, 223
  %cmp2155 = icmp eq i32 %and2154, 73
  br i1 %cmp2155, label %lor.end2163, label %lor.rhs2157

lor.rhs2157:                                      ; preds = %cond.false2151
  %939 = load i8*, i8** %uc, align 8
  %arrayidx2158 = getelementptr inbounds i8, i8* %939, i64 1
  %940 = load i8, i8* %arrayidx2158, align 1
  %conv2159 = zext i8 %940 to i32
  %and2160 = and i32 %conv2159, 223
  %cmp2161 = icmp eq i32 %and2160, 76
  br label %lor.end2163

lor.end2163:                                      ; preds = %lor.rhs2157, %cond.false2151
  %941 = phi i1 [ true, %cond.false2151 ], [ %cmp2161, %lor.rhs2157 ]
  %942 = zext i1 %941 to i64
  %cond2164 = select i1 %941, i32 2, i32 0
  br label %cond.end2165

cond.end2165:                                     ; preds = %lor.end2163, %lor.end2149
  %cond2166 = phi i32 [ %cond2150, %lor.end2149 ], [ %cond2164, %lor.end2163 ]
  br label %cond.end2188

cond.false2167:                                   ; preds = %cond.true2125
  %943 = load i8*, i8** %uc, align 8
  %arrayidx2168 = getelementptr inbounds i8, i8* %943, i64 0
  %944 = load i8, i8* %arrayidx2168, align 1
  %conv2169 = zext i8 %944 to i32
  %and2170 = and i32 %conv2169, 223
  %cmp2171 = icmp eq i32 %and2170, 83
  br i1 %cmp2171, label %land.rhs2173, label %land.end2186

land.rhs2173:                                     ; preds = %cond.false2167
  %945 = load i8*, i8** %uc, align 8
  %arrayidx2174 = getelementptr inbounds i8, i8* %945, i64 1
  %946 = load i8, i8* %arrayidx2174, align 1
  %conv2175 = zext i8 %946 to i32
  %and2176 = and i32 %conv2175, 223
  %cmp2177 = icmp eq i32 %and2176, 83
  br i1 %cmp2177, label %lor.end2185, label %lor.rhs2179

lor.rhs2179:                                      ; preds = %land.rhs2173
  %947 = load i8*, i8** %uc, align 8
  %arrayidx2180 = getelementptr inbounds i8, i8* %947, i64 1
  %948 = load i8, i8* %arrayidx2180, align 1
  %conv2181 = zext i8 %948 to i32
  %and2182 = and i32 %conv2181, 223
  %cmp2183 = icmp eq i32 %and2182, 84
  br label %lor.end2185

lor.end2185:                                      ; preds = %lor.rhs2179, %land.rhs2173
  %949 = phi i1 [ true, %land.rhs2173 ], [ %cmp2183, %lor.rhs2179 ]
  br label %land.end2186

land.end2186:                                     ; preds = %lor.end2185, %cond.false2167
  %950 = phi i1 [ false, %cond.false2167 ], [ %949, %lor.end2185 ]
  %951 = zext i1 %950 to i64
  %cond2187 = select i1 %950, i32 2, i32 0
  br label %cond.end2188

cond.end2188:                                     ; preds = %land.end2186, %cond.end2165
  %cond2189 = phi i32 [ %cond2166, %cond.end2165 ], [ %cond2187, %land.end2186 ]
  br label %cond.end2248

cond.false2190:                                   ; preds = %if.else2119
  %952 = load i8*, i8** %e, align 8
  %953 = load i8*, i8** %uc, align 8
  %sub.ptr.lhs.cast2191 = ptrtoint i8* %952 to i64
  %sub.ptr.rhs.cast2192 = ptrtoint i8* %953 to i64
  %sub.ptr.sub2193 = sub i64 %sub.ptr.lhs.cast2191, %sub.ptr.rhs.cast2192
  %cmp2194 = icmp sgt i64 %sub.ptr.sub2193, 1
  br i1 %cmp2194, label %cond.true2196, label %cond.false2245

cond.true2196:                                    ; preds = %cond.false2190
  %954 = load i8*, i8** %uc, align 8
  %arrayidx2197 = getelementptr inbounds i8, i8* %954, i64 0
  %955 = load i8, i8* %arrayidx2197, align 1
  %conv2198 = zext i8 %955 to i32
  %and2199 = and i32 %conv2198, 223
  %cmp2200 = icmp eq i32 %and2199, 70
  br i1 %cmp2200, label %cond.true2202, label %cond.false2222

cond.true2202:                                    ; preds = %cond.true2196
  %956 = load i8*, i8** %uc, align 8
  %arrayidx2203 = getelementptr inbounds i8, i8* %956, i64 1
  %957 = load i8, i8* %arrayidx2203, align 1
  %conv2204 = zext i8 %957 to i32
  %and2205 = and i32 %conv2204, 223
  %cmp2206 = icmp eq i32 %and2205, 70
  br i1 %cmp2206, label %lor.end2220, label %lor.lhs.false2208

lor.lhs.false2208:                                ; preds = %cond.true2202
  %958 = load i8*, i8** %uc, align 8
  %arrayidx2209 = getelementptr inbounds i8, i8* %958, i64 1
  %959 = load i8, i8* %arrayidx2209, align 1
  %conv2210 = zext i8 %959 to i32
  %and2211 = and i32 %conv2210, 223
  %cmp2212 = icmp eq i32 %and2211, 73
  br i1 %cmp2212, label %lor.end2220, label %lor.rhs2214

lor.rhs2214:                                      ; preds = %lor.lhs.false2208
  %960 = load i8*, i8** %uc, align 8
  %arrayidx2215 = getelementptr inbounds i8, i8* %960, i64 1
  %961 = load i8, i8* %arrayidx2215, align 1
  %conv2216 = zext i8 %961 to i32
  %and2217 = and i32 %conv2216, 223
  %cmp2218 = icmp eq i32 %and2217, 76
  br label %lor.end2220

lor.end2220:                                      ; preds = %lor.rhs2214, %lor.lhs.false2208, %cond.true2202
  %962 = phi i1 [ true, %lor.lhs.false2208 ], [ true, %cond.true2202 ], [ %cmp2218, %lor.rhs2214 ]
  %963 = zext i1 %962 to i64
  %cond2221 = select i1 %962, i32 2, i32 0
  br label %cond.end2243

cond.false2222:                                   ; preds = %cond.true2196
  %964 = load i8*, i8** %uc, align 8
  %arrayidx2223 = getelementptr inbounds i8, i8* %964, i64 0
  %965 = load i8, i8* %arrayidx2223, align 1
  %conv2224 = zext i8 %965 to i32
  %and2225 = and i32 %conv2224, 223
  %cmp2226 = icmp eq i32 %and2225, 83
  br i1 %cmp2226, label %land.rhs2228, label %land.end2241

land.rhs2228:                                     ; preds = %cond.false2222
  %966 = load i8*, i8** %uc, align 8
  %arrayidx2229 = getelementptr inbounds i8, i8* %966, i64 1
  %967 = load i8, i8* %arrayidx2229, align 1
  %conv2230 = zext i8 %967 to i32
  %and2231 = and i32 %conv2230, 223
  %cmp2232 = icmp eq i32 %and2231, 83
  br i1 %cmp2232, label %lor.end2240, label %lor.rhs2234

lor.rhs2234:                                      ; preds = %land.rhs2228
  %968 = load i8*, i8** %uc, align 8
  %arrayidx2235 = getelementptr inbounds i8, i8* %968, i64 1
  %969 = load i8, i8* %arrayidx2235, align 1
  %conv2236 = zext i8 %969 to i32
  %and2237 = and i32 %conv2236, 223
  %cmp2238 = icmp eq i32 %and2237, 84
  br label %lor.end2240

lor.end2240:                                      ; preds = %lor.rhs2234, %land.rhs2228
  %970 = phi i1 [ true, %land.rhs2228 ], [ %cmp2238, %lor.rhs2234 ]
  br label %land.end2241

land.end2241:                                     ; preds = %lor.end2240, %cond.false2222
  %971 = phi i1 [ false, %cond.false2222 ], [ %970, %lor.end2240 ]
  %972 = zext i1 %971 to i64
  %cond2242 = select i1 %971, i32 2, i32 0
  br label %cond.end2243

cond.end2243:                                     ; preds = %land.end2241, %lor.end2220
  %cond2244 = phi i32 [ %cond2221, %lor.end2220 ], [ %cond2242, %land.end2241 ]
  br label %cond.end2246

cond.false2245:                                   ; preds = %cond.false2190
  br label %cond.end2246

cond.end2246:                                     ; preds = %cond.false2245, %cond.end2243
  %cond2247 = phi i32 [ %cond2244, %cond.end2243 ], [ 0, %cond.false2245 ]
  br label %cond.end2248

cond.end2248:                                     ; preds = %cond.end2246, %cond.end2188
  %cond2249 = phi i32 [ %cond2189, %cond.end2188 ], [ %cond2247, %cond.end2246 ]
  store i32 %cond2249, i32* %foldlen, align 4
  %tobool2250 = icmp ne i32 %cond2249, 0
  br i1 %tobool2250, label %if.then2251, label %if.end2252

if.then2251:                                      ; preds = %cond.end2248
  %973 = load i32, i32* %foldlen, align 4
  %dec = add nsw i32 %973, -1
  store i32 %dec, i32* %foldlen, align 4
  br label %if.end2252

if.end2252:                                       ; preds = %if.then2251, %cond.end2248
  br label %if.end2253

if.end2253:                                       ; preds = %if.end2252, %if.end2118
  br label %if.end2254

if.end2254:                                       ; preds = %if.end2253, %cond.end
  br label %if.end2255

if.end2255:                                       ; preds = %if.end2254, %if.then110
  %974 = load i64, i64* %uvc, align 8
  %cmp2256 = icmp ult i64 %974, 256
  br i1 %cmp2256, label %if.then2258, label %if.else2402

if.then2258:                                      ; preds = %if.end2255
  %975 = load i8*, i8** %folder, align 8
  %tobool2259 = icmp ne i8* %975, null
  br i1 %tobool2259, label %if.then2260, label %if.end2296

if.then2260:                                      ; preds = %if.then2258
  %976 = load i8*, i8** %folder, align 8
  %977 = load i64, i64* %uvc, align 8
  %conv2261 = trunc i64 %977 to i8
  %idxprom2262 = zext i8 %conv2261 to i64
  %arrayidx2263 = getelementptr inbounds i8, i8* %976, i64 %idxprom2262
  %978 = load i8, i8* %arrayidx2263, align 1
  store i8 %978, i8* %folded, align 1
  %979 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %charmap2264 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %979, i32 0, i32 2
  %980 = load i16*, i16** %charmap2264, align 8
  %981 = load i8, i8* %folded, align 1
  %idxprom2265 = zext i8 %981 to i64
  %arrayidx2266 = getelementptr inbounds i16, i16* %980, i64 %idxprom2265
  %982 = load i16, i16* %arrayidx2266, align 2
  %tobool2267 = icmp ne i16 %982, 0
  br i1 %tobool2267, label %if.end2295, label %if.then2268

if.then2268:                                      ; preds = %if.then2260
  %983 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %983, i32 0, i32 8
  %984 = load i16, i16* %uniquecharcount, align 8
  %inc2269 = add i16 %984, 1
  store i16 %inc2269, i16* %uniquecharcount, align 8
  %985 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %charmap2270 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %985, i32 0, i32 2
  %986 = load i16*, i16** %charmap2270, align 8
  %987 = load i8, i8* %folded, align 1
  %idxprom2271 = zext i8 %987 to i64
  %arrayidx2272 = getelementptr inbounds i16, i16* %986, i64 %idxprom2271
  store i16 %inc2269, i16* %arrayidx2272, align 2
  br label %do.body2273

do.body2273:                                      ; preds = %if.then2268
  %988 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82274 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %988, i32 0, i32 25
  %989 = load i32, i32* %utf82274, align 8
  %tobool2275 = icmp ne i32 %989, 0
  br i1 %tobool2275, label %cond.true2276, label %cond.false2277

cond.true2276:                                    ; preds = %do.body2273
  br i1 true, label %if.then2278, label %if.else2291

cond.false2277:                                   ; preds = %do.body2273
  br i1 false, label %if.then2278, label %if.else2291

if.then2278:                                      ; preds = %cond.false2277, %cond.true2276
  %call2279 = call %struct.sv* @Perl_newSV(i64 7)
  store %struct.sv* %call2279, %struct.sv** %zlopp, align 8
  %990 = load %struct.sv*, %struct.sv** %zlopp, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %990, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %991 = load i8*, i8** %svu_pv, align 8
  store i8* %991, i8** %flrbbbbb, align 8
  %992 = load i8*, i8** %flrbbbbb, align 8
  %993 = load i8, i8* %folded, align 1
  %conv2280 = zext i8 %993 to i64
  %call2281 = call i8* @Perl_uvoffuni_to_utf8_flags(i8* %992, i64 %conv2280, i64 0)
  store i8* %call2281, i8** %kapow, align 8
  br label %do.body2282

do.body2282:                                      ; preds = %if.then2278
  %994 = load i8*, i8** %kapow, align 8
  %995 = load i8*, i8** %flrbbbbb, align 8
  %sub.ptr.lhs.cast2283 = ptrtoint i8* %994 to i64
  %sub.ptr.rhs.cast2284 = ptrtoint i8* %995 to i64
  %sub.ptr.sub2285 = sub i64 %sub.ptr.lhs.cast2283, %sub.ptr.rhs.cast2284
  %996 = load %struct.sv*, %struct.sv** %zlopp, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %996, i32 0, i32 0
  %997 = load i8*, i8** %sv_any, align 8
  %998 = bitcast i8* %997 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %998, i32 0, i32 2
  store i64 %sub.ptr.sub2285, i64* %xpv_cur, align 8
  br label %do.end2286

do.end2286:                                       ; preds = %do.body2282
  %999 = load %struct.sv*, %struct.sv** %zlopp, align 8
  %sv_flags2287 = getelementptr inbounds %struct.sv, %struct.sv* %999, i32 0, i32 2
  %1000 = load i32, i32* %sv_flags2287, align 4
  %or2288 = or i32 %1000, 17408
  store i32 %or2288, i32* %sv_flags2287, align 4
  %1001 = load %struct.sv*, %struct.sv** %zlopp, align 8
  %sv_flags2289 = getelementptr inbounds %struct.sv, %struct.sv* %1001, i32 0, i32 2
  %1002 = load i32, i32* %sv_flags2289, align 4
  %or2290 = or i32 %1002, 536870912
  store i32 %or2290, i32* %sv_flags2289, align 4
  %1003 = load %struct.av*, %struct.av** %revcharmap, align 8
  %1004 = load %struct.sv*, %struct.sv** %zlopp, align 8
  call void @Perl_av_push(%struct.av* %1003, %struct.sv* %1004)
  br label %if.end2293

if.else2291:                                      ; preds = %cond.false2277, %cond.true2276
  %1005 = load i8, i8* %folded, align 1
  store i8 %1005, i8* %ooooff, align 1
  %1006 = load %struct.av*, %struct.av** %revcharmap, align 8
  %call2292 = call %struct.sv* @Perl_newSVpvn(i8* %ooooff, i64 1)
  call void @Perl_av_push(%struct.av* %1006, %struct.sv* %call2292)
  br label %if.end2293

if.end2293:                                       ; preds = %if.else2291, %do.end2286
  br label %do.end2294

do.end2294:                                       ; preds = %if.end2293
  br label %if.end2295

if.end2295:                                       ; preds = %do.end2294, %if.then2260
  br label %if.end2296

if.end2296:                                       ; preds = %if.end2295, %if.then2258
  %1007 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %charmap2297 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1007, i32 0, i32 2
  %1008 = load i16*, i16** %charmap2297, align 8
  %1009 = load i64, i64* %uvc, align 8
  %arrayidx2298 = getelementptr inbounds i16, i16* %1008, i64 %1009
  %1010 = load i16, i16* %arrayidx2298, align 2
  %tobool2299 = icmp ne i16 %1010, 0
  br i1 %tobool2299, label %if.end2335, label %if.then2300

if.then2300:                                      ; preds = %if.end2296
  %1011 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount2301 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1011, i32 0, i32 8
  %1012 = load i16, i16* %uniquecharcount2301, align 8
  %inc2302 = add i16 %1012, 1
  store i16 %inc2302, i16* %uniquecharcount2301, align 8
  %1013 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %charmap2303 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1013, i32 0, i32 2
  %1014 = load i16*, i16** %charmap2303, align 8
  %1015 = load i64, i64* %uvc, align 8
  %arrayidx2304 = getelementptr inbounds i16, i16* %1014, i64 %1015
  store i16 %inc2302, i16* %arrayidx2304, align 2
  br label %do.body2305

do.body2305:                                      ; preds = %if.then2300
  %1016 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82306 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1016, i32 0, i32 25
  %1017 = load i32, i32* %utf82306, align 8
  %tobool2307 = icmp ne i32 %1017, 0
  br i1 %tobool2307, label %cond.true2308, label %cond.false2309

cond.true2308:                                    ; preds = %do.body2305
  br i1 true, label %if.then2310, label %if.else2329

cond.false2309:                                   ; preds = %do.body2305
  br i1 false, label %if.then2310, label %if.else2329

if.then2310:                                      ; preds = %cond.false2309, %cond.true2308
  %call2312 = call %struct.sv* @Perl_newSV(i64 7)
  store %struct.sv* %call2312, %struct.sv** %zlopp2311, align 8
  %1018 = load %struct.sv*, %struct.sv** %zlopp2311, align 8
  %sv_u2314 = getelementptr inbounds %struct.sv, %struct.sv* %1018, i32 0, i32 3
  %svu_pv2315 = bitcast %union.anon* %sv_u2314 to i8**
  %1019 = load i8*, i8** %svu_pv2315, align 8
  store i8* %1019, i8** %flrbbbbb2313, align 8
  %1020 = load i8*, i8** %flrbbbbb2313, align 8
  %1021 = load i64, i64* %uvc, align 8
  %call2317 = call i8* @Perl_uvoffuni_to_utf8_flags(i8* %1020, i64 %1021, i64 0)
  store i8* %call2317, i8** %kapow2316, align 8
  br label %do.body2318

do.body2318:                                      ; preds = %if.then2310
  %1022 = load i8*, i8** %kapow2316, align 8
  %1023 = load i8*, i8** %flrbbbbb2313, align 8
  %sub.ptr.lhs.cast2319 = ptrtoint i8* %1022 to i64
  %sub.ptr.rhs.cast2320 = ptrtoint i8* %1023 to i64
  %sub.ptr.sub2321 = sub i64 %sub.ptr.lhs.cast2319, %sub.ptr.rhs.cast2320
  %1024 = load %struct.sv*, %struct.sv** %zlopp2311, align 8
  %sv_any2322 = getelementptr inbounds %struct.sv, %struct.sv* %1024, i32 0, i32 0
  %1025 = load i8*, i8** %sv_any2322, align 8
  %1026 = bitcast i8* %1025 to %struct.xpv*
  %xpv_cur2323 = getelementptr inbounds %struct.xpv, %struct.xpv* %1026, i32 0, i32 2
  store i64 %sub.ptr.sub2321, i64* %xpv_cur2323, align 8
  br label %do.end2324

do.end2324:                                       ; preds = %do.body2318
  %1027 = load %struct.sv*, %struct.sv** %zlopp2311, align 8
  %sv_flags2325 = getelementptr inbounds %struct.sv, %struct.sv* %1027, i32 0, i32 2
  %1028 = load i32, i32* %sv_flags2325, align 4
  %or2326 = or i32 %1028, 17408
  store i32 %or2326, i32* %sv_flags2325, align 4
  %1029 = load %struct.sv*, %struct.sv** %zlopp2311, align 8
  %sv_flags2327 = getelementptr inbounds %struct.sv, %struct.sv* %1029, i32 0, i32 2
  %1030 = load i32, i32* %sv_flags2327, align 4
  %or2328 = or i32 %1030, 536870912
  store i32 %or2328, i32* %sv_flags2327, align 4
  %1031 = load %struct.av*, %struct.av** %revcharmap, align 8
  %1032 = load %struct.sv*, %struct.sv** %zlopp2311, align 8
  call void @Perl_av_push(%struct.av* %1031, %struct.sv* %1032)
  br label %if.end2333

if.else2329:                                      ; preds = %cond.false2309, %cond.true2308
  %1033 = load i64, i64* %uvc, align 8
  %conv2331 = trunc i64 %1033 to i8
  store i8 %conv2331, i8* %ooooff2330, align 1
  %1034 = load %struct.av*, %struct.av** %revcharmap, align 8
  %call2332 = call %struct.sv* @Perl_newSVpvn(i8* %ooooff2330, i64 1)
  call void @Perl_av_push(%struct.av* %1034, %struct.sv* %call2332)
  br label %if.end2333

if.end2333:                                       ; preds = %if.else2329, %do.end2324
  br label %do.end2334

do.end2334:                                       ; preds = %if.end2333
  br label %if.end2335

if.end2335:                                       ; preds = %do.end2334, %if.end2296
  %1035 = load i8, i8* %set_bit, align 1
  %tobool2336 = trunc i8 %1035 to i1
  br i1 %tobool2336, label %if.then2337, label %if.end2401

if.then2337:                                      ; preds = %if.end2335
  %1036 = load i64, i64* %uvc, align 8
  %conv2338 = trunc i64 %1036 to i8
  %conv2339 = zext i8 %conv2338 to i32
  %and2340 = and i32 %conv2339, 7
  %shl2341 = shl i32 1, %and2340
  %1037 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap2342 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1037, i32 0, i32 5
  %1038 = load i8*, i8** %bitmap2342, align 8
  %1039 = load i64, i64* %uvc, align 8
  %conv2343 = trunc i64 %1039 to i8
  %conv2344 = zext i8 %conv2343 to i32
  %shr2345 = ashr i32 %conv2344, 3
  %and2346 = and i32 %shr2345, 31
  %idxprom2347 = sext i32 %and2346 to i64
  %arrayidx2348 = getelementptr inbounds i8, i8* %1038, i64 %idxprom2347
  %1040 = load i8, i8* %arrayidx2348, align 1
  %conv2349 = sext i8 %1040 to i32
  %or2350 = or i32 %conv2349, %shl2341
  %conv2351 = trunc i32 %or2350 to i8
  store i8 %conv2351, i8* %arrayidx2348, align 1
  %1041 = load i8*, i8** %folder, align 8
  %tobool2352 = icmp ne i8* %1041, null
  br i1 %tobool2352, label %if.then2353, label %if.end2372

if.then2353:                                      ; preds = %if.then2337
  %1042 = load i8*, i8** %folder, align 8
  %1043 = load i64, i64* %uvc, align 8
  %conv2354 = trunc i64 %1043 to i8
  %idxprom2355 = zext i8 %conv2354 to i64
  %arrayidx2356 = getelementptr inbounds i8, i8* %1042, i64 %idxprom2355
  %1044 = load i8, i8* %arrayidx2356, align 1
  %conv2357 = zext i8 %1044 to i32
  %and2358 = and i32 %conv2357, 7
  %shl2359 = shl i32 1, %and2358
  %1045 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap2360 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1045, i32 0, i32 5
  %1046 = load i8*, i8** %bitmap2360, align 8
  %1047 = load i8*, i8** %folder, align 8
  %1048 = load i64, i64* %uvc, align 8
  %conv2361 = trunc i64 %1048 to i8
  %idxprom2362 = zext i8 %conv2361 to i64
  %arrayidx2363 = getelementptr inbounds i8, i8* %1047, i64 %idxprom2362
  %1049 = load i8, i8* %arrayidx2363, align 1
  %conv2364 = zext i8 %1049 to i32
  %shr2365 = ashr i32 %conv2364, 3
  %and2366 = and i32 %shr2365, 31
  %idxprom2367 = sext i32 %and2366 to i64
  %arrayidx2368 = getelementptr inbounds i8, i8* %1046, i64 %idxprom2367
  %1050 = load i8, i8* %arrayidx2368, align 1
  %conv2369 = sext i8 %1050 to i32
  %or2370 = or i32 %conv2369, %shl2359
  %conv2371 = trunc i32 %or2370 to i8
  store i8 %conv2371, i8* %arrayidx2368, align 1
  br label %if.end2372

if.end2372:                                       ; preds = %if.then2353, %if.then2337
  %1051 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82373 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1051, i32 0, i32 25
  %1052 = load i32, i32* %utf82373, align 8
  %tobool2374 = icmp ne i32 %1052, 0
  br i1 %tobool2374, label %cond.true2375, label %cond.false2376

cond.true2375:                                    ; preds = %if.end2372
  br i1 true, label %if.end2400, label %if.then2377

cond.false2376:                                   ; preds = %if.end2372
  br i1 false, label %if.end2400, label %if.then2377

if.then2377:                                      ; preds = %cond.false2376, %cond.true2375
  %1053 = load i64, i64* %uvc, align 8
  %cmp2378 = icmp ult i64 %1053, 128
  br i1 %cmp2378, label %if.end2399, label %if.then2380

if.then2380:                                      ; preds = %if.then2377
  %1054 = load i64, i64* %uvc, align 8
  %shr2381 = lshr i64 %1054, 6
  %or2382 = or i64 %shr2381, 192
  %conv2383 = trunc i64 %or2382 to i8
  %conv2384 = zext i8 %conv2383 to i32
  %and2385 = and i32 %conv2384, 7
  %shl2386 = shl i32 1, %and2385
  %1055 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap2387 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1055, i32 0, i32 5
  %1056 = load i8*, i8** %bitmap2387, align 8
  %1057 = load i64, i64* %uvc, align 8
  %shr2388 = lshr i64 %1057, 6
  %or2389 = or i64 %shr2388, 192
  %conv2390 = trunc i64 %or2389 to i8
  %conv2391 = zext i8 %conv2390 to i32
  %shr2392 = ashr i32 %conv2391, 3
  %and2393 = and i32 %shr2392, 31
  %idxprom2394 = sext i32 %and2393 to i64
  %arrayidx2395 = getelementptr inbounds i8, i8* %1056, i64 %idxprom2394
  %1058 = load i8, i8* %arrayidx2395, align 1
  %conv2396 = sext i8 %1058 to i32
  %or2397 = or i32 %conv2396, %shl2386
  %conv2398 = trunc i32 %or2397 to i8
  store i8 %conv2398, i8* %arrayidx2395, align 1
  br label %if.end2399

if.end2399:                                       ; preds = %if.then2380, %if.then2377
  br label %if.end2400

if.end2400:                                       ; preds = %if.end2399, %cond.false2376, %cond.true2375
  store i8 0, i8* %set_bit, align 1
  br label %if.end2401

if.end2401:                                       ; preds = %if.end2400, %if.end2335
  br label %if.end2523

if.else2402:                                      ; preds = %if.end2255
  %1059 = load %struct.hv*, %struct.hv** %widecharmap, align 8
  %tobool2403 = icmp ne %struct.hv* %1059, null
  br i1 %tobool2403, label %if.end2406, label %if.then2404

if.then2404:                                      ; preds = %if.else2402
  %call2405 = call %struct.sv* @Perl_newSV_type(i32 12)
  %1060 = bitcast %struct.sv* %call2405 to i8*
  %1061 = bitcast i8* %1060 to %struct.hv*
  store %struct.hv* %1061, %struct.hv** %widecharmap, align 8
  br label %if.end2406

if.end2406:                                       ; preds = %if.then2404, %if.else2402
  %1062 = load %struct.hv*, %struct.hv** %widecharmap, align 8
  %1063 = bitcast i64* %uvc to i8*
  %call2407 = call i8* @Perl_hv_common_key_len(%struct.hv* %1062, i8* %1063, i32 8, i32 48, %struct.sv* null, i32 0)
  %1064 = bitcast i8* %call2407 to %struct.sv**
  store %struct.sv** %1064, %struct.sv*** %svpp, align 8
  %1065 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %tobool2408 = icmp ne %struct.sv** %1065, null
  br i1 %tobool2408, label %if.end2410, label %if.then2409

if.then2409:                                      ; preds = %if.end2406
  %1066 = load i64, i64* %uvc, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.222, i64 0, i64 0), i64 %1066)
  br label %if.end2410

if.end2410:                                       ; preds = %if.then2409, %if.end2406
  %1067 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1068 = load %struct.sv*, %struct.sv** %1067, align 8
  %tobool2411 = icmp ne %struct.sv* %1068, null
  br i1 %tobool2411, label %cond.true2412, label %cond.false2413

cond.true2412:                                    ; preds = %if.end2410
  br i1 true, label %land.lhs.true2414, label %if.then2488

cond.false2413:                                   ; preds = %if.end2410
  br i1 false, label %land.lhs.true2414, label %if.then2488

land.lhs.true2414:                                ; preds = %cond.false2413, %cond.true2412
  %1069 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1070 = load %struct.sv*, %struct.sv** %1069, align 8
  %sv_flags2415 = getelementptr inbounds %struct.sv, %struct.sv* %1070, i32 0, i32 2
  %1071 = load i32, i32* %sv_flags2415, align 4
  %and2416 = and i32 %1071, 2097152
  %tobool2417 = icmp ne i32 %and2416, 0
  br i1 %tobool2417, label %cond.true2418, label %cond.false2419

cond.true2418:                                    ; preds = %land.lhs.true2414
  br i1 true, label %cond.true2420, label %cond.false2423

cond.false2419:                                   ; preds = %land.lhs.true2414
  br i1 false, label %cond.true2420, label %cond.false2423

cond.true2420:                                    ; preds = %cond.false2419, %cond.true2418
  %1072 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1073 = load %struct.sv*, %struct.sv** %1072, align 8
  %call2421 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %1073, i32 2)
  br i1 %call2421, label %if.end2522, label %if.then2488

cond.false2423:                                   ; preds = %cond.false2419, %cond.true2418
  %1074 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1075 = load %struct.sv*, %struct.sv** %1074, align 8
  %sv_flags2424 = getelementptr inbounds %struct.sv, %struct.sv* %1075, i32 0, i32 2
  %1076 = load i32, i32* %sv_flags2424, align 4
  %and2425 = and i32 %1076, 65280
  %tobool2426 = icmp ne i32 %and2425, 0
  br i1 %tobool2426, label %cond.false2438, label %lor.lhs.false2427

lor.lhs.false2427:                                ; preds = %cond.false2423
  %1077 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1078 = load %struct.sv*, %struct.sv** %1077, align 8
  %sv_flags2428 = getelementptr inbounds %struct.sv, %struct.sv* %1078, i32 0, i32 2
  %1079 = load i32, i32* %sv_flags2428, align 4
  %and2429 = and i32 %1079, 255
  %cmp2430 = icmp eq i32 %and2429, 8
  br i1 %cmp2430, label %cond.false2438, label %lor.lhs.false2432

lor.lhs.false2432:                                ; preds = %lor.lhs.false2427
  %1080 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1081 = load %struct.sv*, %struct.sv** %1080, align 8
  %sv_flags2433 = getelementptr inbounds %struct.sv, %struct.sv* %1081, i32 0, i32 2
  %1082 = load i32, i32* %sv_flags2433, align 4
  %and2434 = and i32 %1082, 16826623
  %cmp2435 = icmp eq i32 %and2434, 16777226
  br i1 %cmp2435, label %cond.false2438, label %cond.true2437

cond.true2437:                                    ; preds = %lor.lhs.false2432
  br i1 false, label %if.end2522, label %if.then2488

cond.false2438:                                   ; preds = %lor.lhs.false2432, %lor.lhs.false2427, %cond.false2423
  %1083 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1084 = load %struct.sv*, %struct.sv** %1083, align 8
  %sv_flags2439 = getelementptr inbounds %struct.sv, %struct.sv* %1084, i32 0, i32 2
  %1085 = load i32, i32* %sv_flags2439, align 4
  %and2440 = and i32 %1085, 1024
  %tobool2441 = icmp ne i32 %and2440, 0
  br i1 %tobool2441, label %cond.true2442, label %cond.false2460

cond.true2442:                                    ; preds = %cond.false2438
  %1086 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1087 = load %struct.sv*, %struct.sv** %1086, align 8
  %sv_any2443 = getelementptr inbounds %struct.sv, %struct.sv* %1087, i32 0, i32 0
  %1088 = load i8*, i8** %sv_any2443, align 8
  %1089 = bitcast i8* %1088 to %struct.xpv*
  %tobool2444 = icmp ne %struct.xpv* %1089, null
  br i1 %tobool2444, label %land.lhs.true2445, label %if.then2488

land.lhs.true2445:                                ; preds = %cond.true2442
  %1090 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1091 = load %struct.sv*, %struct.sv** %1090, align 8
  %sv_any2446 = getelementptr inbounds %struct.sv, %struct.sv* %1091, i32 0, i32 0
  %1092 = load i8*, i8** %sv_any2446, align 8
  %1093 = bitcast i8* %1092 to %struct.xpv*
  %xpv_cur2447 = getelementptr inbounds %struct.xpv, %struct.xpv* %1093, i32 0, i32 2
  %1094 = load i64, i64* %xpv_cur2447, align 8
  %cmp2448 = icmp ugt i64 %1094, 1
  br i1 %cmp2448, label %if.end2522, label %lor.lhs.false2450

lor.lhs.false2450:                                ; preds = %land.lhs.true2445
  %1095 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1096 = load %struct.sv*, %struct.sv** %1095, align 8
  %sv_any2451 = getelementptr inbounds %struct.sv, %struct.sv* %1096, i32 0, i32 0
  %1097 = load i8*, i8** %sv_any2451, align 8
  %1098 = bitcast i8* %1097 to %struct.xpv*
  %xpv_cur2452 = getelementptr inbounds %struct.xpv, %struct.xpv* %1098, i32 0, i32 2
  %1099 = load i64, i64* %xpv_cur2452, align 8
  %tobool2453 = icmp ne i64 %1099, 0
  br i1 %tobool2453, label %land.lhs.true2454, label %if.then2488

land.lhs.true2454:                                ; preds = %lor.lhs.false2450
  %1100 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1101 = load %struct.sv*, %struct.sv** %1100, align 8
  %sv_u2455 = getelementptr inbounds %struct.sv, %struct.sv* %1101, i32 0, i32 3
  %svu_pv2456 = bitcast %union.anon* %sv_u2455 to i8**
  %1102 = load i8*, i8** %svu_pv2456, align 8
  %1103 = load i8, i8* %1102, align 1
  %conv2457 = sext i8 %1103 to i32
  %cmp2458 = icmp ne i32 %conv2457, 48
  br i1 %cmp2458, label %if.end2522, label %if.then2488

cond.false2460:                                   ; preds = %cond.false2438
  %1104 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1105 = load %struct.sv*, %struct.sv** %1104, align 8
  %sv_flags2461 = getelementptr inbounds %struct.sv, %struct.sv* %1105, i32 0, i32 2
  %1106 = load i32, i32* %sv_flags2461, align 4
  %and2462 = and i32 %1106, 768
  %tobool2463 = icmp ne i32 %and2462, 0
  br i1 %tobool2463, label %cond.true2464, label %cond.false2485

cond.true2464:                                    ; preds = %cond.false2460
  %1107 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1108 = load %struct.sv*, %struct.sv** %1107, align 8
  %sv_flags2465 = getelementptr inbounds %struct.sv, %struct.sv* %1108, i32 0, i32 2
  %1109 = load i32, i32* %sv_flags2465, align 4
  %and2466 = and i32 %1109, 256
  %tobool2467 = icmp ne i32 %and2466, 0
  br i1 %tobool2467, label %land.lhs.true2468, label %lor.lhs.false2472

land.lhs.true2468:                                ; preds = %cond.true2464
  %1110 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1111 = load %struct.sv*, %struct.sv** %1110, align 8
  %sv_any2469 = getelementptr inbounds %struct.sv, %struct.sv* %1111, i32 0, i32 0
  %1112 = load i8*, i8** %sv_any2469, align 8
  %1113 = bitcast i8* %1112 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %1113, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %1114 = load i64, i64* %xivu_iv, align 8
  %cmp2470 = icmp ne i64 %1114, 0
  br i1 %cmp2470, label %if.end2522, label %lor.lhs.false2472

lor.lhs.false2472:                                ; preds = %land.lhs.true2468, %cond.true2464
  %1115 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1116 = load %struct.sv*, %struct.sv** %1115, align 8
  %sv_flags2473 = getelementptr inbounds %struct.sv, %struct.sv* %1116, i32 0, i32 2
  %1117 = load i32, i32* %sv_flags2473, align 4
  %and2474 = and i32 %1117, 512
  %tobool2475 = icmp ne i32 %and2474, 0
  br i1 %tobool2475, label %land.lhs.true2476, label %if.then2488

land.lhs.true2476:                                ; preds = %lor.lhs.false2472
  %1118 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1119 = load %struct.sv*, %struct.sv** %1118, align 8
  %sv_any2477 = getelementptr inbounds %struct.sv, %struct.sv* %1119, i32 0, i32 0
  %1120 = load i8*, i8** %sv_any2477, align 8
  %1121 = bitcast i8* %1120 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %1121, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %1122 = load double, double* %xnv_nv, align 8
  %cmp2478 = fcmp uno double %1122, %1122
  br i1 %cmp2478, label %if.end2522, label %lor.lhs.false2479

lor.lhs.false2479:                                ; preds = %land.lhs.true2476
  %1123 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1124 = load %struct.sv*, %struct.sv** %1123, align 8
  %sv_any2480 = getelementptr inbounds %struct.sv, %struct.sv* %1124, i32 0, i32 0
  %1125 = load i8*, i8** %sv_any2480, align 8
  %1126 = bitcast i8* %1125 to %struct.xpvnv*
  %xnv_u2481 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %1126, i32 0, i32 5
  %xnv_nv2482 = bitcast %union._xnvu* %xnv_u2481 to double*
  %1127 = load double, double* %xnv_nv2482, align 8
  %cmp2483 = fcmp une double %1127, 0.000000e+00
  br i1 %cmp2483, label %if.end2522, label %if.then2488

cond.false2485:                                   ; preds = %cond.false2460
  %1128 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1129 = load %struct.sv*, %struct.sv** %1128, align 8
  %call2486 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %1129, i32 0)
  br i1 %call2486, label %if.end2522, label %if.then2488

if.then2488:                                      ; preds = %cond.false2485, %lor.lhs.false2479, %lor.lhs.false2472, %land.lhs.true2454, %lor.lhs.false2450, %cond.true2442, %cond.true2437, %cond.true2420, %cond.false2413, %cond.true2412
  %1130 = load %struct.sv**, %struct.sv*** %svpp, align 8
  %1131 = load %struct.sv*, %struct.sv** %1130, align 8
  %1132 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount2489 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1132, i32 0, i32 8
  %1133 = load i16, i16* %uniquecharcount2489, align 8
  %inc2490 = add i16 %1133, 1
  store i16 %inc2490, i16* %uniquecharcount2489, align 8
  %conv2491 = zext i16 %inc2490 to i64
  call void @Perl_sv_setiv(%struct.sv* %1131, i64 %conv2491)
  br label %do.body2492

do.body2492:                                      ; preds = %if.then2488
  %1134 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82493 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1134, i32 0, i32 25
  %1135 = load i32, i32* %utf82493, align 8
  %tobool2494 = icmp ne i32 %1135, 0
  br i1 %tobool2494, label %cond.true2495, label %cond.false2496

cond.true2495:                                    ; preds = %do.body2492
  br i1 true, label %if.then2497, label %if.else2516

cond.false2496:                                   ; preds = %do.body2492
  br i1 false, label %if.then2497, label %if.else2516

if.then2497:                                      ; preds = %cond.false2496, %cond.true2495
  %call2499 = call %struct.sv* @Perl_newSV(i64 7)
  store %struct.sv* %call2499, %struct.sv** %zlopp2498, align 8
  %1136 = load %struct.sv*, %struct.sv** %zlopp2498, align 8
  %sv_u2501 = getelementptr inbounds %struct.sv, %struct.sv* %1136, i32 0, i32 3
  %svu_pv2502 = bitcast %union.anon* %sv_u2501 to i8**
  %1137 = load i8*, i8** %svu_pv2502, align 8
  store i8* %1137, i8** %flrbbbbb2500, align 8
  %1138 = load i8*, i8** %flrbbbbb2500, align 8
  %1139 = load i64, i64* %uvc, align 8
  %call2504 = call i8* @Perl_uvoffuni_to_utf8_flags(i8* %1138, i64 %1139, i64 0)
  store i8* %call2504, i8** %kapow2503, align 8
  br label %do.body2505

do.body2505:                                      ; preds = %if.then2497
  %1140 = load i8*, i8** %kapow2503, align 8
  %1141 = load i8*, i8** %flrbbbbb2500, align 8
  %sub.ptr.lhs.cast2506 = ptrtoint i8* %1140 to i64
  %sub.ptr.rhs.cast2507 = ptrtoint i8* %1141 to i64
  %sub.ptr.sub2508 = sub i64 %sub.ptr.lhs.cast2506, %sub.ptr.rhs.cast2507
  %1142 = load %struct.sv*, %struct.sv** %zlopp2498, align 8
  %sv_any2509 = getelementptr inbounds %struct.sv, %struct.sv* %1142, i32 0, i32 0
  %1143 = load i8*, i8** %sv_any2509, align 8
  %1144 = bitcast i8* %1143 to %struct.xpv*
  %xpv_cur2510 = getelementptr inbounds %struct.xpv, %struct.xpv* %1144, i32 0, i32 2
  store i64 %sub.ptr.sub2508, i64* %xpv_cur2510, align 8
  br label %do.end2511

do.end2511:                                       ; preds = %do.body2505
  %1145 = load %struct.sv*, %struct.sv** %zlopp2498, align 8
  %sv_flags2512 = getelementptr inbounds %struct.sv, %struct.sv* %1145, i32 0, i32 2
  %1146 = load i32, i32* %sv_flags2512, align 4
  %or2513 = or i32 %1146, 17408
  store i32 %or2513, i32* %sv_flags2512, align 4
  %1147 = load %struct.sv*, %struct.sv** %zlopp2498, align 8
  %sv_flags2514 = getelementptr inbounds %struct.sv, %struct.sv* %1147, i32 0, i32 2
  %1148 = load i32, i32* %sv_flags2514, align 4
  %or2515 = or i32 %1148, 536870912
  store i32 %or2515, i32* %sv_flags2514, align 4
  %1149 = load %struct.av*, %struct.av** %revcharmap, align 8
  %1150 = load %struct.sv*, %struct.sv** %zlopp2498, align 8
  call void @Perl_av_push(%struct.av* %1149, %struct.sv* %1150)
  br label %if.end2520

if.else2516:                                      ; preds = %cond.false2496, %cond.true2495
  %1151 = load i64, i64* %uvc, align 8
  %conv2518 = trunc i64 %1151 to i8
  store i8 %conv2518, i8* %ooooff2517, align 1
  %1152 = load %struct.av*, %struct.av** %revcharmap, align 8
  %call2519 = call %struct.sv* @Perl_newSVpvn(i8* %ooooff2517, i64 1)
  call void @Perl_av_push(%struct.av* %1152, %struct.sv* %call2519)
  br label %if.end2520

if.end2520:                                       ; preds = %if.else2516, %do.end2511
  br label %do.end2521

do.end2521:                                       ; preds = %if.end2520
  br label %if.end2522

if.end2522:                                       ; preds = %do.end2521, %cond.false2485, %lor.lhs.false2479, %land.lhs.true2476, %land.lhs.true2468, %land.lhs.true2454, %land.lhs.true2445, %cond.true2437, %cond.true2420
  br label %if.end2523

if.end2523:                                       ; preds = %if.end2522, %if.end2401
  br label %for.inc

for.inc:                                          ; preds = %if.end2523
  %1153 = load i64, i64* %len, align 8
  %1154 = load i8*, i8** %uc, align 8
  %add.ptr2524 = getelementptr inbounds i8, i8* %1154, i64 %1153
  store i8* %add.ptr2524, i8** %uc, align 8
  br label %for.cond80

for.end:                                          ; preds = %for.cond80
  %1155 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %1156 = load %struct.regnode*, %struct.regnode** %first.addr, align 8
  %cmp2525 = icmp eq %struct.regnode* %1155, %1156
  br i1 %cmp2525, label %if.then2527, label %if.else2529

if.then2527:                                      ; preds = %for.end
  %1157 = load i64, i64* %minchars, align 8
  %1158 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %minlen2528 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1158, i32 0, i32 10
  store i64 %1157, i64* %minlen2528, align 8
  %1159 = load i64, i64* %maxchars, align 8
  %1160 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %maxlen = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1160, i32 0, i32 11
  store i64 %1159, i64* %maxlen, align 8
  br label %if.end2543

if.else2529:                                      ; preds = %for.end
  %1161 = load i64, i64* %minchars, align 8
  %1162 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %minlen2530 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1162, i32 0, i32 10
  %1163 = load i64, i64* %minlen2530, align 8
  %cmp2531 = icmp ult i64 %1161, %1163
  br i1 %cmp2531, label %if.then2533, label %if.else2535

if.then2533:                                      ; preds = %if.else2529
  %1164 = load i64, i64* %minchars, align 8
  %1165 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %minlen2534 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1165, i32 0, i32 10
  store i64 %1164, i64* %minlen2534, align 8
  br label %if.end2542

if.else2535:                                      ; preds = %if.else2529
  %1166 = load i64, i64* %maxchars, align 8
  %1167 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %maxlen2536 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1167, i32 0, i32 11
  %1168 = load i64, i64* %maxlen2536, align 8
  %cmp2537 = icmp ugt i64 %1166, %1168
  br i1 %cmp2537, label %if.then2539, label %if.end2541

if.then2539:                                      ; preds = %if.else2535
  %1169 = load i64, i64* %maxchars, align 8
  %1170 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %maxlen2540 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1170, i32 0, i32 11
  store i64 %1169, i64* %maxlen2540, align 8
  br label %if.end2541

if.end2541:                                       ; preds = %if.then2539, %if.else2535
  br label %if.end2542

if.end2542:                                       ; preds = %if.end2541, %if.then2533
  br label %if.end2543

if.end2543:                                       ; preds = %if.end2542, %if.then2527
  br label %for.inc2544

for.inc2544:                                      ; preds = %if.end2543, %if.else53
  %1171 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %call2545 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1171)
  store %struct.regnode* %call2545, %struct.regnode** %cur, align 8
  br label %for.cond

for.end2546:                                      ; preds = %for.cond
  %1172 = load i64, i64* %trie_charcount, align 8
  %add2547 = add i64 %1172, 2
  %mul = mul i64 %add2547, 4
  %call2548 = call i8* @Perl_safesysmalloc(i64 %mul)
  %1173 = bitcast i8* %call2548 to i32*
  store i32* %1173, i32** %prev_states, align 8
  %1174 = load i32*, i32** %prev_states, align 8
  %arrayidx2549 = getelementptr inbounds i32, i32* %1174, i64 1
  store i32 0, i32* %arrayidx2549, align 4
  %1175 = load i64, i64* %trie_charcount, align 8
  %add2550 = add i64 %1175, 1
  %1176 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount2551 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1176, i32 0, i32 8
  %1177 = load i16, i16* %uniquecharcount2551, align 8
  %conv2552 = zext i16 %1177 to i64
  %mul2553 = mul i64 %add2550, %conv2552
  %add2554 = add i64 %mul2553, 1
  %1178 = load %struct.sv*, %struct.sv** %re_trie_maxbuff, align 8
  %sv_flags2555 = getelementptr inbounds %struct.sv, %struct.sv* %1178, i32 0, i32 2
  %1179 = load i32, i32* %sv_flags2555, align 4
  %and2556 = and i32 %1179, 2097408
  %cmp2557 = icmp eq i32 %and2556, 256
  br i1 %cmp2557, label %cond.true2559, label %cond.false2563

cond.true2559:                                    ; preds = %for.end2546
  %1180 = load %struct.sv*, %struct.sv** %re_trie_maxbuff, align 8
  %sv_any2560 = getelementptr inbounds %struct.sv, %struct.sv* %1180, i32 0, i32 0
  %1181 = load i8*, i8** %sv_any2560, align 8
  %1182 = bitcast i8* %1181 to %struct.xpviv*
  %xiv_u2561 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %1182, i32 0, i32 4
  %xivu_iv2562 = bitcast %union._xivu* %xiv_u2561 to i64*
  %1183 = load i64, i64* %xivu_iv2562, align 8
  br label %cond.end2565

cond.false2563:                                   ; preds = %for.end2546
  %1184 = load %struct.sv*, %struct.sv** %re_trie_maxbuff, align 8
  %call2564 = call i64 @Perl_sv_2iv_flags(%struct.sv* %1184, i32 2)
  br label %cond.end2565

cond.end2565:                                     ; preds = %cond.false2563, %cond.true2559
  %cond2566 = phi i64 [ %1183, %cond.true2559 ], [ %call2564, %cond.false2563 ]
  %cmp2567 = icmp sgt i64 %add2554, %cond2566
  br i1 %cmp2567, label %if.then2569, label %if.else3164

if.then2569:                                      ; preds = %cond.end2565
  store i64 1, i64* %transcount, align 8
  %1185 = load i64, i64* %trie_charcount, align 8
  %add2570 = add i64 %1185, 2
  %call2571 = call noalias i8* @calloc(i64 %add2570, i64 16) #5
  %1186 = bitcast i8* %call2571 to %struct._reg_trie_state*
  %1187 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1187, i32 0, i32 3
  store %struct._reg_trie_state* %1186, %struct._reg_trie_state** %states, align 8
  br label %do.body2572

do.body2572:                                      ; preds = %if.then2569
  %call2573 = call i8* @Perl_safesyscalloc(i64 4, i64 8)
  %1188 = bitcast i8* %call2573 to %struct._reg_trie_trans_list_elem*
  %1189 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2574 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1189, i32 0, i32 3
  %1190 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2574, align 8
  %arrayidx2575 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1190, i64 1
  %trans = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2575, i32 0, i32 1
  %list = bitcast %union.anon.21* %trans to %struct._reg_trie_trans_list_elem**
  store %struct._reg_trie_trans_list_elem* %1188, %struct._reg_trie_trans_list_elem** %list, align 8
  %1191 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2576 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1191, i32 0, i32 3
  %1192 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2576, align 8
  %arrayidx2577 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1192, i64 1
  %trans2578 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2577, i32 0, i32 1
  %list2579 = bitcast %union.anon.21* %trans2578 to %struct._reg_trie_trans_list_elem**
  %1193 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2579, align 8
  %arrayidx2580 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1193, i64 0
  %forid = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2580, i32 0, i32 0
  store i16 1, i16* %forid, align 4
  %1194 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2581 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1194, i32 0, i32 3
  %1195 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2581, align 8
  %arrayidx2582 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1195, i64 1
  %trans2583 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2582, i32 0, i32 1
  %list2584 = bitcast %union.anon.21* %trans2583 to %struct._reg_trie_trans_list_elem**
  %1196 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2584, align 8
  %arrayidx2585 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1196, i64 0
  %newstate = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2585, i32 0, i32 1
  store i32 4, i32* %newstate, align 4
  br label %do.end2586

do.end2586:                                       ; preds = %do.body2572
  store i32 2, i32* %next_alloc, align 4
  %1197 = load %struct.regnode*, %struct.regnode** %first.addr, align 8
  store %struct.regnode* %1197, %struct.regnode** %cur, align 8
  br label %for.cond2587

for.cond2587:                                     ; preds = %for.inc2927, %do.end2586
  %1198 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %1199 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  %cmp2588 = icmp ult %struct.regnode* %1198, %1199
  br i1 %cmp2588, label %for.body2590, label %for.end2929

for.body2590:                                     ; preds = %for.cond2587
  %1200 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %add.ptr2592 = getelementptr inbounds %struct.regnode, %struct.regnode* %1200, i64 1
  store %struct.regnode* %add.ptr2592, %struct.regnode** %noper2591, align 8
  %1201 = load %struct.regnode*, %struct.regnode** %noper2591, align 8
  %1202 = bitcast %struct.regnode* %1201 to %struct.regnode_string*
  %string2594 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1202, i32 0, i32 3
  %arraydecay2595 = getelementptr inbounds [1 x i8], [1 x i8]* %string2594, i64 0, i64 0
  store i8* %arraydecay2595, i8** %uc2593, align 8
  %1203 = load i8*, i8** %uc2593, align 8
  %1204 = load %struct.regnode*, %struct.regnode** %noper2591, align 8
  %1205 = bitcast %struct.regnode* %1204 to %struct.regnode_string*
  %str_len2597 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1205, i32 0, i32 0
  %1206 = load i8, i8* %str_len2597, align 2
  %conv2598 = zext i8 %1206 to i32
  %idx.ext2599 = sext i32 %conv2598 to i64
  %add.ptr2600 = getelementptr inbounds i8, i8* %1203, i64 %idx.ext2599
  store i8* %add.ptr2600, i8** %e2596, align 8
  store i32 1, i32* %state, align 4
  store i16 0, i16* %charid, align 2
  store i32 0, i32* %wordlen2601, align 4
  %1207 = load %struct.regnode*, %struct.regnode** %noper2591, align 8
  %type2602 = getelementptr inbounds %struct.regnode, %struct.regnode* %1207, i32 0, i32 1
  %1208 = load i8, i8* %type2602, align 1
  %conv2603 = zext i8 %1208 to i32
  %cmp2604 = icmp eq i32 %conv2603, 40
  br i1 %cmp2604, label %if.then2606, label %if.end2624

if.then2606:                                      ; preds = %for.body2590
  %1209 = load %struct.regnode*, %struct.regnode** %noper2591, align 8
  %call2608 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1209)
  store %struct.regnode* %call2608, %struct.regnode** %noper_next2607, align 8
  %1210 = load %struct.regnode*, %struct.regnode** %noper_next2607, align 8
  %1211 = load %struct.regnode*, %struct.regnode** %tail.addr, align 8
  %cmp2609 = icmp ne %struct.regnode* %1210, %1211
  br i1 %cmp2609, label %land.lhs.true2611, label %if.end2623

land.lhs.true2611:                                ; preds = %if.then2606
  %1212 = load %struct.regnode*, %struct.regnode** %noper_next2607, align 8
  %type2612 = getelementptr inbounds %struct.regnode, %struct.regnode* %1212, i32 0, i32 1
  %1213 = load i8, i8* %type2612, align 1
  %conv2613 = zext i8 %1213 to i32
  %1214 = load i32, i32* %flags.addr, align 4
  %cmp2614 = icmp eq i32 %conv2613, %1214
  br i1 %cmp2614, label %if.then2616, label %if.end2623

if.then2616:                                      ; preds = %land.lhs.true2611
  %1215 = load %struct.regnode*, %struct.regnode** %noper_next2607, align 8
  store %struct.regnode* %1215, %struct.regnode** %noper2591, align 8
  %1216 = load %struct.regnode*, %struct.regnode** %noper2591, align 8
  %1217 = bitcast %struct.regnode* %1216 to %struct.regnode_string*
  %string2617 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1217, i32 0, i32 3
  %arraydecay2618 = getelementptr inbounds [1 x i8], [1 x i8]* %string2617, i64 0, i64 0
  store i8* %arraydecay2618, i8** %uc2593, align 8
  %1218 = load i8*, i8** %uc2593, align 8
  %1219 = load %struct.regnode*, %struct.regnode** %noper2591, align 8
  %1220 = bitcast %struct.regnode* %1219 to %struct.regnode_string*
  %str_len2619 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1220, i32 0, i32 0
  %1221 = load i8, i8* %str_len2619, align 2
  %conv2620 = zext i8 %1221 to i32
  %idx.ext2621 = sext i32 %conv2620 to i64
  %add.ptr2622 = getelementptr inbounds i8, i8* %1218, i64 %idx.ext2621
  store i8* %add.ptr2622, i8** %e2596, align 8
  br label %if.end2623

if.end2623:                                       ; preds = %if.then2616, %land.lhs.true2611, %if.then2606
  br label %if.end2624

if.end2624:                                       ; preds = %if.end2623, %for.body2590
  %1222 = load %struct.regnode*, %struct.regnode** %noper2591, align 8
  %type2625 = getelementptr inbounds %struct.regnode, %struct.regnode* %1222, i32 0, i32 1
  %1223 = load i8, i8* %type2625, align 1
  %conv2626 = zext i8 %1223 to i32
  %cmp2627 = icmp ne i32 %conv2626, 40
  br i1 %cmp2627, label %if.then2629, label %if.end2863

if.then2629:                                      ; preds = %if.end2624
  br label %for.cond2630

for.cond2630:                                     ; preds = %for.inc2860, %if.then2629
  %1224 = load i8*, i8** %uc2593, align 8
  %1225 = load i8*, i8** %e2596, align 8
  %cmp2631 = icmp ult i8* %1224, %1225
  br i1 %cmp2631, label %for.body2633, label %for.end2862

for.body2633:                                     ; preds = %for.cond2630
  br label %do.body2634

do.body2634:                                      ; preds = %for.body2633
  %1226 = load i32, i32* %wordlen2601, align 4
  %inc2635 = add i32 %1226, 1
  store i32 %inc2635, i32* %wordlen2601, align 4
  %1227 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82636 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1227, i32 0, i32 25
  %1228 = load i32, i32* %utf82636, align 8
  %tobool2637 = icmp ne i32 %1228, 0
  br i1 %tobool2637, label %cond.true2638, label %cond.false2639

cond.true2638:                                    ; preds = %do.body2634
  br i1 true, label %if.then2640, label %if.else2642

cond.false2639:                                   ; preds = %do.body2634
  br i1 false, label %if.then2640, label %if.else2642

if.then2640:                                      ; preds = %cond.false2639, %cond.true2638
  %1229 = load i8*, i8** %uc2593, align 8
  %call2641 = call i64 @Perl_valid_utf8_to_uvchr(i8* %1229, i64* %len)
  store i64 %call2641, i64* %uvc, align 8
  br label %if.end2660

if.else2642:                                      ; preds = %cond.false2639, %cond.true2638
  %1230 = load i8*, i8** %folder, align 8
  %cmp2643 = icmp eq i8* %1230, getelementptr inbounds ([0 x i8], [0 x i8]* @PL_fold_latin1, i64 0, i64 0)
  br i1 %cmp2643, label %if.then2645, label %if.else2656

if.then2645:                                      ; preds = %if.else2642
  %1231 = load i8*, i8** %uc2593, align 8
  %1232 = load i8, i8* %1231, align 1
  %idxprom2646 = zext i8 %1232 to i64
  %arrayidx2647 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_latin1_lc, i64 0, i64 %idxprom2646
  %1233 = load i8, i8* %arrayidx2647, align 1
  %conv2648 = zext i8 %1233 to i32
  %conv2649 = sext i32 %conv2648 to i64
  store i64 %conv2649, i64* %uvc, align 8
  %1234 = load i64, i64* %uvc, align 8
  %cmp2650 = icmp eq i64 %1234, 181
  br i1 %cmp2650, label %cond.true2652, label %cond.false2653

cond.true2652:                                    ; preds = %if.then2645
  br i1 true, label %if.then2654, label %if.end2655

cond.false2653:                                   ; preds = %if.then2645
  br i1 false, label %if.then2654, label %if.end2655

if.then2654:                                      ; preds = %cond.false2653, %cond.true2652
  store i64 956, i64* %uvc, align 8
  br label %if.end2655

if.end2655:                                       ; preds = %if.then2654, %cond.false2653, %cond.true2652
  store i64 1, i64* %len, align 8
  br label %if.end2659

if.else2656:                                      ; preds = %if.else2642
  %1235 = load i8*, i8** %uc2593, align 8
  %1236 = load i8, i8* %1235, align 1
  %conv2657 = zext i8 %1236 to i32
  %conv2658 = zext i32 %conv2657 to i64
  store i64 %conv2658, i64* %uvc, align 8
  store i64 1, i64* %len, align 8
  br label %if.end2659

if.end2659:                                       ; preds = %if.else2656, %if.end2655
  br label %if.end2660

if.end2660:                                       ; preds = %if.end2659, %if.then2640
  br label %do.end2661

do.end2661:                                       ; preds = %if.end2660
  %1237 = load i64, i64* %uvc, align 8
  %cmp2662 = icmp ult i64 %1237, 256
  br i1 %cmp2662, label %if.then2664, label %if.else2667

if.then2664:                                      ; preds = %do.end2661
  %1238 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %charmap2665 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1238, i32 0, i32 2
  %1239 = load i16*, i16** %charmap2665, align 8
  %1240 = load i64, i64* %uvc, align 8
  %arrayidx2666 = getelementptr inbounds i16, i16* %1239, i64 %1240
  %1241 = load i16, i16* %arrayidx2666, align 2
  store i16 %1241, i16* %charid, align 2
  br label %if.end2687

if.else2667:                                      ; preds = %do.end2661
  %1242 = load %struct.hv*, %struct.hv** %widecharmap, align 8
  %1243 = bitcast i64* %uvc to i8*
  %call2669 = call i8* @Perl_hv_common_key_len(%struct.hv* %1242, i8* %1243, i32 8, i32 32, %struct.sv* null, i32 0)
  %1244 = bitcast i8* %call2669 to %struct.sv**
  store %struct.sv** %1244, %struct.sv*** %svpp2668, align 8
  %1245 = load %struct.sv**, %struct.sv*** %svpp2668, align 8
  %tobool2670 = icmp ne %struct.sv** %1245, null
  br i1 %tobool2670, label %if.else2672, label %if.then2671

if.then2671:                                      ; preds = %if.else2667
  store i16 0, i16* %charid, align 2
  br label %if.end2686

if.else2672:                                      ; preds = %if.else2667
  %1246 = load %struct.sv**, %struct.sv*** %svpp2668, align 8
  %1247 = load %struct.sv*, %struct.sv** %1246, align 8
  %sv_flags2673 = getelementptr inbounds %struct.sv, %struct.sv* %1247, i32 0, i32 2
  %1248 = load i32, i32* %sv_flags2673, align 4
  %and2674 = and i32 %1248, 2097408
  %cmp2675 = icmp eq i32 %and2674, 256
  br i1 %cmp2675, label %cond.true2677, label %cond.false2681

cond.true2677:                                    ; preds = %if.else2672
  %1249 = load %struct.sv**, %struct.sv*** %svpp2668, align 8
  %1250 = load %struct.sv*, %struct.sv** %1249, align 8
  %sv_any2678 = getelementptr inbounds %struct.sv, %struct.sv* %1250, i32 0, i32 0
  %1251 = load i8*, i8** %sv_any2678, align 8
  %1252 = bitcast i8* %1251 to %struct.xpviv*
  %xiv_u2679 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %1252, i32 0, i32 4
  %xivu_iv2680 = bitcast %union._xivu* %xiv_u2679 to i64*
  %1253 = load i64, i64* %xivu_iv2680, align 8
  br label %cond.end2683

cond.false2681:                                   ; preds = %if.else2672
  %1254 = load %struct.sv**, %struct.sv*** %svpp2668, align 8
  %1255 = load %struct.sv*, %struct.sv** %1254, align 8
  %call2682 = call i64 @Perl_sv_2iv_flags(%struct.sv* %1255, i32 2)
  br label %cond.end2683

cond.end2683:                                     ; preds = %cond.false2681, %cond.true2677
  %cond2684 = phi i64 [ %1253, %cond.true2677 ], [ %call2682, %cond.false2681 ]
  %conv2685 = trunc i64 %cond2684 to i16
  store i16 %conv2685, i16* %charid, align 2
  br label %if.end2686

if.end2686:                                       ; preds = %cond.end2683, %if.then2671
  br label %if.end2687

if.end2687:                                       ; preds = %if.end2686, %if.then2664
  %1256 = load i16, i16* %charid, align 2
  %tobool2688 = icmp ne i16 %1256, 0
  br i1 %tobool2688, label %if.then2689, label %if.else2858

if.then2689:                                      ; preds = %if.end2687
  store i32 0, i32* %newstate2690, align 4
  %1257 = load i16, i16* %charid, align 2
  %dec2691 = add i16 %1257, -1
  store i16 %dec2691, i16* %charid, align 2
  %1258 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2692 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1258, i32 0, i32 3
  %1259 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2692, align 8
  %1260 = load i32, i32* %state, align 4
  %idxprom2693 = zext i32 %1260 to i64
  %arrayidx2694 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1259, i64 %idxprom2693
  %trans2695 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2694, i32 0, i32 1
  %list2696 = bitcast %union.anon.21* %trans2695 to %struct._reg_trie_trans_list_elem**
  %1261 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2696, align 8
  %tobool2697 = icmp ne %struct._reg_trie_trans_list_elem* %1261, null
  br i1 %tobool2697, label %if.end2721, label %if.then2698

if.then2698:                                      ; preds = %if.then2689
  br label %do.body2699

do.body2699:                                      ; preds = %if.then2698
  %call2700 = call i8* @Perl_safesyscalloc(i64 4, i64 8)
  %1262 = bitcast i8* %call2700 to %struct._reg_trie_trans_list_elem*
  %1263 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2701 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1263, i32 0, i32 3
  %1264 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2701, align 8
  %1265 = load i32, i32* %state, align 4
  %idxprom2702 = zext i32 %1265 to i64
  %arrayidx2703 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1264, i64 %idxprom2702
  %trans2704 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2703, i32 0, i32 1
  %list2705 = bitcast %union.anon.21* %trans2704 to %struct._reg_trie_trans_list_elem**
  store %struct._reg_trie_trans_list_elem* %1262, %struct._reg_trie_trans_list_elem** %list2705, align 8
  %1266 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2706 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1266, i32 0, i32 3
  %1267 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2706, align 8
  %1268 = load i32, i32* %state, align 4
  %idxprom2707 = zext i32 %1268 to i64
  %arrayidx2708 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1267, i64 %idxprom2707
  %trans2709 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2708, i32 0, i32 1
  %list2710 = bitcast %union.anon.21* %trans2709 to %struct._reg_trie_trans_list_elem**
  %1269 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2710, align 8
  %arrayidx2711 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1269, i64 0
  %forid2712 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2711, i32 0, i32 0
  store i16 1, i16* %forid2712, align 4
  %1270 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2713 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1270, i32 0, i32 3
  %1271 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2713, align 8
  %1272 = load i32, i32* %state, align 4
  %idxprom2714 = zext i32 %1272 to i64
  %arrayidx2715 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1271, i64 %idxprom2714
  %trans2716 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2715, i32 0, i32 1
  %list2717 = bitcast %union.anon.21* %trans2716 to %struct._reg_trie_trans_list_elem**
  %1273 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2717, align 8
  %arrayidx2718 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1273, i64 0
  %newstate2719 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2718, i32 0, i32 1
  store i32 4, i32* %newstate2719, align 4
  br label %do.end2720

do.end2720:                                       ; preds = %do.body2699
  br label %if.end2721

if.end2721:                                       ; preds = %do.end2720, %if.then2689
  store i16 1, i16* %check, align 2
  br label %for.cond2722

for.cond2722:                                     ; preds = %for.inc2768, %if.end2721
  %1274 = load i16, i16* %check, align 2
  %conv2723 = zext i16 %1274 to i32
  %1275 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2724 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1275, i32 0, i32 3
  %1276 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2724, align 8
  %1277 = load i32, i32* %state, align 4
  %idxprom2725 = zext i32 %1277 to i64
  %arrayidx2726 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1276, i64 %idxprom2725
  %trans2727 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2726, i32 0, i32 1
  %list2728 = bitcast %union.anon.21* %trans2727 to %struct._reg_trie_trans_list_elem**
  %1278 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2728, align 8
  %tobool2729 = icmp ne %struct._reg_trie_trans_list_elem* %1278, null
  br i1 %tobool2729, label %cond.true2730, label %cond.false2740

cond.true2730:                                    ; preds = %for.cond2722
  %1279 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2731 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1279, i32 0, i32 3
  %1280 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2731, align 8
  %1281 = load i32, i32* %state, align 4
  %idxprom2732 = zext i32 %1281 to i64
  %arrayidx2733 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1280, i64 %idxprom2732
  %trans2734 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2733, i32 0, i32 1
  %list2735 = bitcast %union.anon.21* %trans2734 to %struct._reg_trie_trans_list_elem**
  %1282 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2735, align 8
  %arrayidx2736 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1282, i64 0
  %forid2737 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2736, i32 0, i32 0
  %1283 = load i16, i16* %forid2737, align 4
  %conv2738 = zext i16 %1283 to i32
  %sub2739 = sub nsw i32 %conv2738, 1
  br label %cond.end2741

cond.false2740:                                   ; preds = %for.cond2722
  br label %cond.end2741

cond.end2741:                                     ; preds = %cond.false2740, %cond.true2730
  %cond2742 = phi i32 [ %sub2739, %cond.true2730 ], [ 0, %cond.false2740 ]
  %cmp2743 = icmp sle i32 %conv2723, %cond2742
  br i1 %cmp2743, label %for.body2745, label %for.end2770

for.body2745:                                     ; preds = %cond.end2741
  %1284 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2746 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1284, i32 0, i32 3
  %1285 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2746, align 8
  %1286 = load i32, i32* %state, align 4
  %idxprom2747 = zext i32 %1286 to i64
  %arrayidx2748 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1285, i64 %idxprom2747
  %trans2749 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2748, i32 0, i32 1
  %list2750 = bitcast %union.anon.21* %trans2749 to %struct._reg_trie_trans_list_elem**
  %1287 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2750, align 8
  %1288 = load i16, i16* %check, align 2
  %idxprom2751 = zext i16 %1288 to i64
  %arrayidx2752 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1287, i64 %idxprom2751
  %forid2753 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2752, i32 0, i32 0
  %1289 = load i16, i16* %forid2753, align 4
  %conv2754 = zext i16 %1289 to i32
  %1290 = load i16, i16* %charid, align 2
  %conv2755 = zext i16 %1290 to i32
  %cmp2756 = icmp eq i32 %conv2754, %conv2755
  br i1 %cmp2756, label %if.then2758, label %if.end2767

if.then2758:                                      ; preds = %for.body2745
  %1291 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2759 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1291, i32 0, i32 3
  %1292 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2759, align 8
  %1293 = load i32, i32* %state, align 4
  %idxprom2760 = zext i32 %1293 to i64
  %arrayidx2761 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1292, i64 %idxprom2760
  %trans2762 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2761, i32 0, i32 1
  %list2763 = bitcast %union.anon.21* %trans2762 to %struct._reg_trie_trans_list_elem**
  %1294 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2763, align 8
  %1295 = load i16, i16* %check, align 2
  %idxprom2764 = zext i16 %1295 to i64
  %arrayidx2765 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1294, i64 %idxprom2764
  %newstate2766 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2765, i32 0, i32 1
  %1296 = load i32, i32* %newstate2766, align 4
  store i32 %1296, i32* %newstate2690, align 4
  br label %for.end2770

if.end2767:                                       ; preds = %for.body2745
  br label %for.inc2768

for.inc2768:                                      ; preds = %if.end2767
  %1297 = load i16, i16* %check, align 2
  %inc2769 = add i16 %1297, 1
  store i16 %inc2769, i16* %check, align 2
  br label %for.cond2722

for.end2770:                                      ; preds = %if.then2758, %cond.end2741
  %1298 = load i32, i32* %newstate2690, align 4
  %tobool2771 = icmp ne i32 %1298, 0
  br i1 %tobool2771, label %if.end2857, label %if.then2772

if.then2772:                                      ; preds = %for.end2770
  %1299 = load i32, i32* %next_alloc, align 4
  %inc2773 = add i32 %1299, 1
  store i32 %inc2773, i32* %next_alloc, align 4
  store i32 %1299, i32* %newstate2690, align 4
  %1300 = load i32, i32* %state, align 4
  %1301 = load i32*, i32** %prev_states, align 8
  %1302 = load i32, i32* %newstate2690, align 4
  %idxprom2774 = zext i32 %1302 to i64
  %arrayidx2775 = getelementptr inbounds i32, i32* %1301, i64 %idxprom2774
  store i32 %1300, i32* %arrayidx2775, align 4
  br label %do.body2776

do.body2776:                                      ; preds = %if.then2772
  %1303 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2777 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1303, i32 0, i32 3
  %1304 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2777, align 8
  %1305 = load i32, i32* %state, align 4
  %idxprom2778 = zext i32 %1305 to i64
  %arrayidx2779 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1304, i64 %idxprom2778
  %trans2780 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2779, i32 0, i32 1
  %list2781 = bitcast %union.anon.21* %trans2780 to %struct._reg_trie_trans_list_elem**
  %1306 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2781, align 8
  %arrayidx2782 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1306, i64 0
  %forid2783 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2782, i32 0, i32 0
  %1307 = load i16, i16* %forid2783, align 4
  %conv2784 = zext i16 %1307 to i32
  %1308 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2785 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1308, i32 0, i32 3
  %1309 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2785, align 8
  %1310 = load i32, i32* %state, align 4
  %idxprom2786 = zext i32 %1310 to i64
  %arrayidx2787 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1309, i64 %idxprom2786
  %trans2788 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2787, i32 0, i32 1
  %list2789 = bitcast %union.anon.21* %trans2788 to %struct._reg_trie_trans_list_elem**
  %1311 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2789, align 8
  %arrayidx2790 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1311, i64 0
  %newstate2791 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2790, i32 0, i32 1
  %1312 = load i32, i32* %newstate2791, align 4
  %cmp2792 = icmp uge i32 %conv2784, %1312
  br i1 %cmp2792, label %if.then2794, label %if.end2816

if.then2794:                                      ; preds = %do.body2776
  %1313 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2795 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1313, i32 0, i32 3
  %1314 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2795, align 8
  %1315 = load i32, i32* %state, align 4
  %idxprom2796 = zext i32 %1315 to i64
  %arrayidx2797 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1314, i64 %idxprom2796
  %trans2798 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2797, i32 0, i32 1
  %list2799 = bitcast %union.anon.21* %trans2798 to %struct._reg_trie_trans_list_elem**
  %1316 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2799, align 8
  %arrayidx2800 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1316, i64 0
  %newstate2801 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2800, i32 0, i32 1
  %1317 = load i32, i32* %newstate2801, align 4
  %mul2802 = mul i32 %1317, 2
  store i32 %mul2802, i32* %newstate2801, align 4
  store i32 %mul2802, i32* %ging, align 4
  %1318 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2803 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1318, i32 0, i32 3
  %1319 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2803, align 8
  %1320 = load i32, i32* %state, align 4
  %idxprom2804 = zext i32 %1320 to i64
  %arrayidx2805 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1319, i64 %idxprom2804
  %trans2806 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2805, i32 0, i32 1
  %list2807 = bitcast %union.anon.21* %trans2806 to %struct._reg_trie_trans_list_elem**
  %1321 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2807, align 8
  %1322 = bitcast %struct._reg_trie_trans_list_elem* %1321 to i8*
  %1323 = load i32, i32* %ging, align 4
  %conv2808 = zext i32 %1323 to i64
  %mul2809 = mul i64 %conv2808, 8
  %call2810 = call i8* @Perl_safesysrealloc(i8* %1322, i64 %mul2809)
  %1324 = bitcast i8* %call2810 to %struct._reg_trie_trans_list_elem*
  %1325 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2811 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1325, i32 0, i32 3
  %1326 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2811, align 8
  %1327 = load i32, i32* %state, align 4
  %idxprom2812 = zext i32 %1327 to i64
  %arrayidx2813 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1326, i64 %idxprom2812
  %trans2814 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2813, i32 0, i32 1
  %list2815 = bitcast %union.anon.21* %trans2814 to %struct._reg_trie_trans_list_elem**
  store %struct._reg_trie_trans_list_elem* %1324, %struct._reg_trie_trans_list_elem** %list2815, align 8
  br label %if.end2816

if.end2816:                                       ; preds = %if.then2794, %do.body2776
  %1328 = load i16, i16* %charid, align 2
  %1329 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2817 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1329, i32 0, i32 3
  %1330 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2817, align 8
  %1331 = load i32, i32* %state, align 4
  %idxprom2818 = zext i32 %1331 to i64
  %arrayidx2819 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1330, i64 %idxprom2818
  %trans2820 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2819, i32 0, i32 1
  %list2821 = bitcast %union.anon.21* %trans2820 to %struct._reg_trie_trans_list_elem**
  %1332 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2821, align 8
  %1333 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2822 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1333, i32 0, i32 3
  %1334 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2822, align 8
  %1335 = load i32, i32* %state, align 4
  %idxprom2823 = zext i32 %1335 to i64
  %arrayidx2824 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1334, i64 %idxprom2823
  %trans2825 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2824, i32 0, i32 1
  %list2826 = bitcast %union.anon.21* %trans2825 to %struct._reg_trie_trans_list_elem**
  %1336 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2826, align 8
  %arrayidx2827 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1336, i64 0
  %forid2828 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2827, i32 0, i32 0
  %1337 = load i16, i16* %forid2828, align 4
  %idxprom2829 = zext i16 %1337 to i64
  %arrayidx2830 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1332, i64 %idxprom2829
  %forid2831 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2830, i32 0, i32 0
  store i16 %1328, i16* %forid2831, align 4
  %1338 = load i32, i32* %newstate2690, align 4
  %1339 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2832 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1339, i32 0, i32 3
  %1340 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2832, align 8
  %1341 = load i32, i32* %state, align 4
  %idxprom2833 = zext i32 %1341 to i64
  %arrayidx2834 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1340, i64 %idxprom2833
  %trans2835 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2834, i32 0, i32 1
  %list2836 = bitcast %union.anon.21* %trans2835 to %struct._reg_trie_trans_list_elem**
  %1342 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2836, align 8
  %1343 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2837 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1343, i32 0, i32 3
  %1344 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2837, align 8
  %1345 = load i32, i32* %state, align 4
  %idxprom2838 = zext i32 %1345 to i64
  %arrayidx2839 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1344, i64 %idxprom2838
  %trans2840 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2839, i32 0, i32 1
  %list2841 = bitcast %union.anon.21* %trans2840 to %struct._reg_trie_trans_list_elem**
  %1346 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2841, align 8
  %arrayidx2842 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1346, i64 0
  %forid2843 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2842, i32 0, i32 0
  %1347 = load i16, i16* %forid2843, align 4
  %idxprom2844 = zext i16 %1347 to i64
  %arrayidx2845 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1342, i64 %idxprom2844
  %newstate2846 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2845, i32 0, i32 1
  store i32 %1338, i32* %newstate2846, align 4
  %1348 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2847 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1348, i32 0, i32 3
  %1349 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2847, align 8
  %1350 = load i32, i32* %state, align 4
  %idxprom2848 = zext i32 %1350 to i64
  %arrayidx2849 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1349, i64 %idxprom2848
  %trans2850 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2849, i32 0, i32 1
  %list2851 = bitcast %union.anon.21* %trans2850 to %struct._reg_trie_trans_list_elem**
  %1351 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2851, align 8
  %arrayidx2852 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1351, i64 0
  %forid2853 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2852, i32 0, i32 0
  %1352 = load i16, i16* %forid2853, align 4
  %inc2854 = add i16 %1352, 1
  store i16 %inc2854, i16* %forid2853, align 4
  br label %do.end2855

do.end2855:                                       ; preds = %if.end2816
  %1353 = load i64, i64* %transcount, align 8
  %inc2856 = add i64 %1353, 1
  store i64 %inc2856, i64* %transcount, align 8
  br label %if.end2857

if.end2857:                                       ; preds = %do.end2855, %for.end2770
  %1354 = load i32, i32* %newstate2690, align 4
  store i32 %1354, i32* %state, align 4
  br label %if.end2859

if.else2858:                                      ; preds = %if.end2687
  %1355 = load i64, i64* %uvc, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.223, i64 0, i64 0), i64 %1355)
  br label %if.end2859

if.end2859:                                       ; preds = %if.else2858, %if.end2857
  br label %for.inc2860

for.inc2860:                                      ; preds = %if.end2859
  %1356 = load i64, i64* %len, align 8
  %1357 = load i8*, i8** %uc2593, align 8
  %add.ptr2861 = getelementptr inbounds i8, i8* %1357, i64 %1356
  store i8* %add.ptr2861, i8** %uc2593, align 8
  br label %for.cond2630

for.end2862:                                      ; preds = %for.cond2630
  br label %if.end2863

if.end2863:                                       ; preds = %for.end2862, %if.end2624
  br label %do.body2864

do.body2864:                                      ; preds = %if.end2863
  %1358 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2865 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1358, i32 0, i32 3
  %1359 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2865, align 8
  %1360 = load i32, i32* %state, align 4
  %idxprom2866 = zext i32 %1360 to i64
  %arrayidx2867 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1359, i64 %idxprom2866
  %wordnum = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2867, i32 0, i32 0
  %1361 = load i16, i16* %wordnum, align 8
  store i16 %1361, i16* %dupe, align 2
  %1362 = load %struct.regnode*, %struct.regnode** %noper2591, align 8
  %call2869 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1362)
  store %struct.regnode* %call2869, %struct.regnode** %noper_next2868, align 8
  %1363 = load i16, i16* %curword, align 2
  %inc2870 = add i16 %1363, 1
  store i16 %inc2870, i16* %curword, align 2
  %1364 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo2871 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1364, i32 0, i32 7
  %1365 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo2871, align 8
  %1366 = load i16, i16* %curword, align 2
  %idxprom2872 = zext i16 %1366 to i64
  %arrayidx2873 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %1365, i64 %idxprom2872
  %prev = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %arrayidx2873, i32 0, i32 0
  store i16 0, i16* %prev, align 4
  %1367 = load i32, i32* %wordlen2601, align 4
  %1368 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo2874 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1368, i32 0, i32 7
  %1369 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo2874, align 8
  %1370 = load i16, i16* %curword, align 2
  %idxprom2875 = zext i16 %1370 to i64
  %arrayidx2876 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %1369, i64 %idxprom2875
  %len2877 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %arrayidx2876, i32 0, i32 1
  store i32 %1367, i32* %len2877, align 4
  %1371 = load i32, i32* %state, align 4
  %1372 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo2878 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1372, i32 0, i32 7
  %1373 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo2878, align 8
  %1374 = load i16, i16* %curword, align 2
  %idxprom2879 = zext i16 %1374 to i64
  %arrayidx2880 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %1373, i64 %idxprom2879
  %accept = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %arrayidx2880, i32 0, i32 2
  store i32 %1371, i32* %accept, align 4
  %1375 = load %struct.regnode*, %struct.regnode** %noper_next2868, align 8
  %1376 = load %struct.regnode*, %struct.regnode** %tail.addr, align 8
  %cmp2881 = icmp ult %struct.regnode* %1375, %1376
  br i1 %cmp2881, label %if.then2883, label %if.end2905

if.then2883:                                      ; preds = %do.body2864
  %1377 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1377, i32 0, i32 6
  %1378 = load i16*, i16** %jump, align 8
  %tobool2884 = icmp ne i16* %1378, null
  br i1 %tobool2884, label %if.end2890, label %if.then2885

if.then2885:                                      ; preds = %if.then2883
  %1379 = load i32, i32* %word_count.addr, align 4
  %add2886 = add i32 %1379, 1
  %conv2887 = zext i32 %add2886 to i64
  %call2888 = call noalias i8* @calloc(i64 %conv2887, i64 2) #5
  %1380 = bitcast i8* %call2888 to i16*
  %1381 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump2889 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1381, i32 0, i32 6
  store i16* %1380, i16** %jump2889, align 8
  br label %if.end2890

if.end2890:                                       ; preds = %if.then2885, %if.then2883
  %1382 = load %struct.regnode*, %struct.regnode** %noper_next2868, align 8
  %1383 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %sub.ptr.lhs.cast2891 = ptrtoint %struct.regnode* %1382 to i64
  %sub.ptr.rhs.cast2892 = ptrtoint %struct.regnode* %1383 to i64
  %sub.ptr.sub2893 = sub i64 %sub.ptr.lhs.cast2891, %sub.ptr.rhs.cast2892
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub2893, 4
  %conv2894 = trunc i64 %sub.ptr.div to i16
  %1384 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump2895 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1384, i32 0, i32 6
  %1385 = load i16*, i16** %jump2895, align 8
  %1386 = load i16, i16* %curword, align 2
  %idxprom2896 = zext i16 %1386 to i64
  %arrayidx2897 = getelementptr inbounds i16, i16* %1385, i64 %idxprom2896
  store i16 %conv2894, i16* %arrayidx2897, align 2
  %1387 = load %struct.regnode*, %struct.regnode** %jumper, align 8
  %tobool2898 = icmp ne %struct.regnode* %1387, null
  br i1 %tobool2898, label %if.end2900, label %if.then2899

if.then2899:                                      ; preds = %if.end2890
  %1388 = load %struct.regnode*, %struct.regnode** %noper_next2868, align 8
  store %struct.regnode* %1388, %struct.regnode** %jumper, align 8
  br label %if.end2900

if.end2900:                                       ; preds = %if.then2899, %if.end2890
  %1389 = load %struct.regnode*, %struct.regnode** %nextbranch, align 8
  %tobool2901 = icmp ne %struct.regnode* %1389, null
  br i1 %tobool2901, label %if.end2904, label %if.then2902

if.then2902:                                      ; preds = %if.end2900
  %1390 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %call2903 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1390)
  store %struct.regnode* %call2903, %struct.regnode** %nextbranch, align 8
  br label %if.end2904

if.end2904:                                       ; preds = %if.then2902, %if.end2900
  br label %if.end2905

if.end2905:                                       ; preds = %if.end2904, %do.body2864
  %1391 = load i16, i16* %dupe, align 2
  %tobool2906 = icmp ne i16 %1391, 0
  br i1 %tobool2906, label %if.then2907, label %if.else2920

if.then2907:                                      ; preds = %if.end2905
  %1392 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo2908 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1392, i32 0, i32 7
  %1393 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo2908, align 8
  %1394 = load i16, i16* %dupe, align 2
  %idxprom2909 = zext i16 %1394 to i64
  %arrayidx2910 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %1393, i64 %idxprom2909
  %prev2911 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %arrayidx2910, i32 0, i32 0
  %1395 = load i16, i16* %prev2911, align 4
  %1396 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo2912 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1396, i32 0, i32 7
  %1397 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo2912, align 8
  %1398 = load i16, i16* %curword, align 2
  %idxprom2913 = zext i16 %1398 to i64
  %arrayidx2914 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %1397, i64 %idxprom2913
  %prev2915 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %arrayidx2914, i32 0, i32 0
  store i16 %1395, i16* %prev2915, align 4
  %1399 = load i16, i16* %curword, align 2
  %1400 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo2916 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1400, i32 0, i32 7
  %1401 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo2916, align 8
  %1402 = load i16, i16* %dupe, align 2
  %idxprom2917 = zext i16 %1402 to i64
  %arrayidx2918 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %1401, i64 %idxprom2917
  %prev2919 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %arrayidx2918, i32 0, i32 0
  store i16 %1399, i16* %prev2919, align 4
  br label %if.end2925

if.else2920:                                      ; preds = %if.end2905
  %1403 = load i16, i16* %curword, align 2
  %1404 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2921 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1404, i32 0, i32 3
  %1405 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2921, align 8
  %1406 = load i32, i32* %state, align 4
  %idxprom2922 = zext i32 %1406 to i64
  %arrayidx2923 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1405, i64 %idxprom2922
  %wordnum2924 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2923, i32 0, i32 0
  store i16 %1403, i16* %wordnum2924, align 8
  br label %if.end2925

if.end2925:                                       ; preds = %if.else2920, %if.then2907
  br label %do.end2926

do.end2926:                                       ; preds = %if.end2925
  br label %for.inc2927

for.inc2927:                                      ; preds = %do.end2926
  %1407 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %call2928 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1407)
  store %struct.regnode* %call2928, %struct.regnode** %cur, align 8
  br label %for.cond2587

for.end2929:                                      ; preds = %for.cond2587
  %1408 = load i32, i32* %next_alloc, align 4
  %1409 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %statecount = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1409, i32 0, i32 13
  store i32 %1408, i32* %statecount, align 4
  %1410 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2930 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1410, i32 0, i32 3
  %1411 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2930, align 8
  %1412 = bitcast %struct._reg_trie_state* %1411 to i8*
  %1413 = load i32, i32* %next_alloc, align 4
  %conv2931 = zext i32 %1413 to i64
  %mul2932 = mul i64 %conv2931, 16
  %call2933 = call i8* @realloc(i8* %1412, i64 %mul2932) #5
  %1414 = bitcast i8* %call2933 to %struct._reg_trie_state*
  %1415 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2934 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1415, i32 0, i32 3
  store %struct._reg_trie_state* %1414, %struct._reg_trie_state** %states2934, align 8
  %1416 = load i64, i64* %transcount, align 8
  %call2935 = call noalias i8* @calloc(i64 %1416, i64 8) #5
  %1417 = bitcast i8* %call2935 to %struct._reg_trie_trans*
  %1418 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans2936 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1418, i32 0, i32 4
  store %struct._reg_trie_trans* %1417, %struct._reg_trie_trans** %trans2936, align 8
  store i32 0, i32* %tp, align 4
  store i32 0, i32* %zp, align 4
  store i32 1, i32* %state2937, align 4
  br label %for.cond2938

for.cond2938:                                     ; preds = %for.inc3160, %for.end2929
  %1419 = load i32, i32* %state2937, align 4
  %1420 = load i32, i32* %next_alloc, align 4
  %cmp2939 = icmp ult i32 %1419, %1420
  br i1 %cmp2939, label %for.body2941, label %for.end3162

for.body2941:                                     ; preds = %for.cond2938
  store i32 0, i32* %base, align 4
  %1421 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2942 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1421, i32 0, i32 3
  %1422 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2942, align 8
  %1423 = load i32, i32* %state2937, align 4
  %idxprom2943 = zext i32 %1423 to i64
  %arrayidx2944 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1422, i64 %idxprom2943
  %trans2945 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2944, i32 0, i32 1
  %list2946 = bitcast %union.anon.21* %trans2945 to %struct._reg_trie_trans_list_elem**
  %1424 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2946, align 8
  %tobool2947 = icmp ne %struct._reg_trie_trans_list_elem* %1424, null
  br i1 %tobool2947, label %if.then2948, label %if.end3154

if.then2948:                                      ; preds = %for.body2941
  %1425 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2949 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1425, i32 0, i32 3
  %1426 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2949, align 8
  %1427 = load i32, i32* %state2937, align 4
  %idxprom2950 = zext i32 %1427 to i64
  %arrayidx2951 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1426, i64 %idxprom2950
  %trans2952 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2951, i32 0, i32 1
  %list2953 = bitcast %union.anon.21* %trans2952 to %struct._reg_trie_trans_list_elem**
  %1428 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2953, align 8
  %arrayidx2954 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1428, i64 1
  %forid2955 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2954, i32 0, i32 0
  %1429 = load i16, i16* %forid2955, align 4
  store i16 %1429, i16* %minid, align 2
  %1430 = load i16, i16* %minid, align 2
  store i16 %1430, i16* %maxid, align 2
  store i16 2, i16* %idx, align 2
  br label %for.cond2956

for.cond2956:                                     ; preds = %for.inc3002, %if.then2948
  %1431 = load i16, i16* %idx, align 2
  %conv2957 = zext i16 %1431 to i32
  %1432 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2958 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1432, i32 0, i32 3
  %1433 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2958, align 8
  %1434 = load i32, i32* %state2937, align 4
  %idxprom2959 = zext i32 %1434 to i64
  %arrayidx2960 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1433, i64 %idxprom2959
  %trans2961 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2960, i32 0, i32 1
  %list2962 = bitcast %union.anon.21* %trans2961 to %struct._reg_trie_trans_list_elem**
  %1435 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2962, align 8
  %tobool2963 = icmp ne %struct._reg_trie_trans_list_elem* %1435, null
  br i1 %tobool2963, label %cond.true2964, label %cond.false2974

cond.true2964:                                    ; preds = %for.cond2956
  %1436 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2965 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1436, i32 0, i32 3
  %1437 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2965, align 8
  %1438 = load i32, i32* %state2937, align 4
  %idxprom2966 = zext i32 %1438 to i64
  %arrayidx2967 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1437, i64 %idxprom2966
  %trans2968 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2967, i32 0, i32 1
  %list2969 = bitcast %union.anon.21* %trans2968 to %struct._reg_trie_trans_list_elem**
  %1439 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2969, align 8
  %arrayidx2970 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1439, i64 0
  %forid2971 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2970, i32 0, i32 0
  %1440 = load i16, i16* %forid2971, align 4
  %conv2972 = zext i16 %1440 to i32
  %sub2973 = sub nsw i32 %conv2972, 1
  br label %cond.end2975

cond.false2974:                                   ; preds = %for.cond2956
  br label %cond.end2975

cond.end2975:                                     ; preds = %cond.false2974, %cond.true2964
  %cond2976 = phi i32 [ %sub2973, %cond.true2964 ], [ 0, %cond.false2974 ]
  %cmp2977 = icmp sle i32 %conv2957, %cond2976
  br i1 %cmp2977, label %for.body2979, label %for.end3004

for.body2979:                                     ; preds = %cond.end2975
  %1441 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states2981 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1441, i32 0, i32 3
  %1442 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states2981, align 8
  %1443 = load i32, i32* %state2937, align 4
  %idxprom2982 = zext i32 %1443 to i64
  %arrayidx2983 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1442, i64 %idxprom2982
  %trans2984 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx2983, i32 0, i32 1
  %list2985 = bitcast %union.anon.21* %trans2984 to %struct._reg_trie_trans_list_elem**
  %1444 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list2985, align 8
  %1445 = load i16, i16* %idx, align 2
  %idxprom2986 = zext i16 %1445 to i64
  %arrayidx2987 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1444, i64 %idxprom2986
  %forid2988 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx2987, i32 0, i32 0
  %1446 = load i16, i16* %forid2988, align 4
  store i16 %1446, i16* %forid2980, align 2
  %1447 = load i16, i16* %forid2980, align 2
  %conv2989 = zext i16 %1447 to i32
  %1448 = load i16, i16* %minid, align 2
  %conv2990 = zext i16 %1448 to i32
  %cmp2991 = icmp slt i32 %conv2989, %conv2990
  br i1 %cmp2991, label %if.then2993, label %if.else2994

if.then2993:                                      ; preds = %for.body2979
  %1449 = load i16, i16* %forid2980, align 2
  store i16 %1449, i16* %minid, align 2
  br label %if.end3001

if.else2994:                                      ; preds = %for.body2979
  %1450 = load i16, i16* %forid2980, align 2
  %conv2995 = zext i16 %1450 to i32
  %1451 = load i16, i16* %maxid, align 2
  %conv2996 = zext i16 %1451 to i32
  %cmp2997 = icmp sgt i32 %conv2995, %conv2996
  br i1 %cmp2997, label %if.then2999, label %if.end3000

if.then2999:                                      ; preds = %if.else2994
  %1452 = load i16, i16* %forid2980, align 2
  store i16 %1452, i16* %maxid, align 2
  br label %if.end3000

if.end3000:                                       ; preds = %if.then2999, %if.else2994
  br label %if.end3001

if.end3001:                                       ; preds = %if.end3000, %if.then2993
  br label %for.inc3002

for.inc3002:                                      ; preds = %if.end3001
  %1453 = load i16, i16* %idx, align 2
  %inc3003 = add i16 %1453, 1
  store i16 %inc3003, i16* %idx, align 2
  br label %for.cond2956

for.end3004:                                      ; preds = %cond.end2975
  %1454 = load i64, i64* %transcount, align 8
  %1455 = load i32, i32* %tp, align 4
  %1456 = load i16, i16* %maxid, align 2
  %conv3005 = zext i16 %1456 to i32
  %add3006 = add i32 %1455, %conv3005
  %1457 = load i16, i16* %minid, align 2
  %conv3007 = zext i16 %1457 to i32
  %sub3008 = sub i32 %add3006, %conv3007
  %add3009 = add i32 %sub3008, 1
  %conv3010 = zext i32 %add3009 to i64
  %cmp3011 = icmp ult i64 %1454, %conv3010
  br i1 %cmp3011, label %if.then3013, label %if.end3023

if.then3013:                                      ; preds = %for.end3004
  %1458 = load i64, i64* %transcount, align 8
  %mul3014 = mul i64 %1458, 2
  store i64 %mul3014, i64* %transcount, align 8
  %1459 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3015 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1459, i32 0, i32 4
  %1460 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3015, align 8
  %1461 = bitcast %struct._reg_trie_trans* %1460 to i8*
  %1462 = load i64, i64* %transcount, align 8
  %mul3016 = mul i64 %1462, 8
  %call3017 = call i8* @realloc(i8* %1461, i64 %mul3016) #5
  %1463 = bitcast i8* %call3017 to %struct._reg_trie_trans*
  %1464 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3018 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1464, i32 0, i32 4
  store %struct._reg_trie_trans* %1463, %struct._reg_trie_trans** %trans3018, align 8
  %1465 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3019 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1465, i32 0, i32 4
  %1466 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3019, align 8
  %1467 = load i64, i64* %transcount, align 8
  %div = udiv i64 %1467, 2
  %add.ptr3020 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1466, i64 %div
  %1468 = bitcast %struct._reg_trie_trans* %add.ptr3020 to i8*
  %1469 = load i64, i64* %transcount, align 8
  %div3021 = udiv i64 %1469, 2
  %mul3022 = mul i64 %div3021, 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1468, i8 0, i64 %mul3022, i1 false)
  br label %if.end3023

if.end3023:                                       ; preds = %if.then3013, %for.end3004
  %1470 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3024 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1470, i32 0, i32 8
  %1471 = load i16, i16* %uniquecharcount3024, align 8
  %conv3025 = zext i16 %1471 to i32
  %1472 = load i32, i32* %tp, align 4
  %add3026 = add i32 %conv3025, %1472
  %1473 = load i16, i16* %minid, align 2
  %conv3027 = zext i16 %1473 to i32
  %sub3028 = sub i32 %add3026, %conv3027
  store i32 %sub3028, i32* %base, align 4
  %1474 = load i16, i16* %maxid, align 2
  %conv3029 = zext i16 %1474 to i32
  %1475 = load i16, i16* %minid, align 2
  %conv3030 = zext i16 %1475 to i32
  %cmp3031 = icmp eq i32 %conv3029, %conv3030
  br i1 %cmp3031, label %if.then3033, label %if.else3086

if.then3033:                                      ; preds = %if.end3023
  store i32 0, i32* %set, align 4
  br label %for.cond3034

for.cond3034:                                     ; preds = %for.inc3064, %if.then3033
  %1476 = load i32, i32* %zp, align 4
  %1477 = load i32, i32* %tp, align 4
  %cmp3035 = icmp ult i32 %1476, %1477
  br i1 %cmp3035, label %for.body3037, label %for.end3066

for.body3037:                                     ; preds = %for.cond3034
  %1478 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3038 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1478, i32 0, i32 4
  %1479 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3038, align 8
  %1480 = load i32, i32* %zp, align 4
  %idxprom3039 = zext i32 %1480 to i64
  %arrayidx3040 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1479, i64 %idxprom3039
  %next = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3040, i32 0, i32 0
  %1481 = load i32, i32* %next, align 4
  %tobool3041 = icmp ne i32 %1481, 0
  br i1 %tobool3041, label %if.end3063, label %if.then3042

if.then3042:                                      ; preds = %for.body3037
  %1482 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3043 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1482, i32 0, i32 8
  %1483 = load i16, i16* %uniquecharcount3043, align 8
  %conv3044 = zext i16 %1483 to i32
  %1484 = load i32, i32* %zp, align 4
  %add3045 = add i32 %conv3044, %1484
  %1485 = load i16, i16* %minid, align 2
  %conv3046 = zext i16 %1485 to i32
  %sub3047 = sub i32 %add3045, %conv3046
  store i32 %sub3047, i32* %base, align 4
  %1486 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3048 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1486, i32 0, i32 3
  %1487 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3048, align 8
  %1488 = load i32, i32* %state2937, align 4
  %idxprom3049 = zext i32 %1488 to i64
  %arrayidx3050 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1487, i64 %idxprom3049
  %trans3051 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3050, i32 0, i32 1
  %list3052 = bitcast %union.anon.21* %trans3051 to %struct._reg_trie_trans_list_elem**
  %1489 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list3052, align 8
  %arrayidx3053 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1489, i64 1
  %newstate3054 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx3053, i32 0, i32 1
  %1490 = load i32, i32* %newstate3054, align 4
  %1491 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3055 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1491, i32 0, i32 4
  %1492 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3055, align 8
  %1493 = load i32, i32* %zp, align 4
  %idxprom3056 = zext i32 %1493 to i64
  %arrayidx3057 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1492, i64 %idxprom3056
  %next3058 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3057, i32 0, i32 0
  store i32 %1490, i32* %next3058, align 4
  %1494 = load i32, i32* %state2937, align 4
  %1495 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3059 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1495, i32 0, i32 4
  %1496 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3059, align 8
  %1497 = load i32, i32* %zp, align 4
  %idxprom3060 = zext i32 %1497 to i64
  %arrayidx3061 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1496, i64 %idxprom3060
  %check3062 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3061, i32 0, i32 1
  store i32 %1494, i32* %check3062, align 4
  store i32 1, i32* %set, align 4
  br label %for.end3066

if.end3063:                                       ; preds = %for.body3037
  br label %for.inc3064

for.inc3064:                                      ; preds = %if.end3063
  %1498 = load i32, i32* %zp, align 4
  %inc3065 = add i32 %1498, 1
  store i32 %inc3065, i32* %zp, align 4
  br label %for.cond3034

for.end3066:                                      ; preds = %if.then3042, %for.cond3034
  %1499 = load i32, i32* %set, align 4
  %tobool3067 = icmp ne i32 %1499, 0
  br i1 %tobool3067, label %if.end3085, label %if.then3068

if.then3068:                                      ; preds = %for.end3066
  %1500 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3069 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1500, i32 0, i32 3
  %1501 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3069, align 8
  %1502 = load i32, i32* %state2937, align 4
  %idxprom3070 = zext i32 %1502 to i64
  %arrayidx3071 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1501, i64 %idxprom3070
  %trans3072 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3071, i32 0, i32 1
  %list3073 = bitcast %union.anon.21* %trans3072 to %struct._reg_trie_trans_list_elem**
  %1503 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list3073, align 8
  %arrayidx3074 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1503, i64 1
  %newstate3075 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx3074, i32 0, i32 1
  %1504 = load i32, i32* %newstate3075, align 4
  %1505 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3076 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1505, i32 0, i32 4
  %1506 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3076, align 8
  %1507 = load i32, i32* %tp, align 4
  %idxprom3077 = zext i32 %1507 to i64
  %arrayidx3078 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1506, i64 %idxprom3077
  %next3079 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3078, i32 0, i32 0
  store i32 %1504, i32* %next3079, align 4
  %1508 = load i32, i32* %state2937, align 4
  %1509 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3080 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1509, i32 0, i32 4
  %1510 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3080, align 8
  %1511 = load i32, i32* %tp, align 4
  %idxprom3081 = zext i32 %1511 to i64
  %arrayidx3082 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1510, i64 %idxprom3081
  %check3083 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3082, i32 0, i32 1
  store i32 %1508, i32* %check3083, align 4
  %1512 = load i32, i32* %tp, align 4
  %inc3084 = add i32 %1512, 1
  store i32 %inc3084, i32* %tp, align 4
  %1513 = load i32, i32* %tp, align 4
  store i32 %1513, i32* %zp, align 4
  br label %if.end3085

if.end3085:                                       ; preds = %if.then3068, %for.end3066
  br label %if.end3148

if.else3086:                                      ; preds = %if.end3023
  store i16 1, i16* %idx, align 2
  br label %for.cond3087

for.cond3087:                                     ; preds = %for.inc3140, %if.else3086
  %1514 = load i16, i16* %idx, align 2
  %conv3088 = zext i16 %1514 to i32
  %1515 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3089 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1515, i32 0, i32 3
  %1516 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3089, align 8
  %1517 = load i32, i32* %state2937, align 4
  %idxprom3090 = zext i32 %1517 to i64
  %arrayidx3091 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1516, i64 %idxprom3090
  %trans3092 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3091, i32 0, i32 1
  %list3093 = bitcast %union.anon.21* %trans3092 to %struct._reg_trie_trans_list_elem**
  %1518 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list3093, align 8
  %tobool3094 = icmp ne %struct._reg_trie_trans_list_elem* %1518, null
  br i1 %tobool3094, label %cond.true3095, label %cond.false3105

cond.true3095:                                    ; preds = %for.cond3087
  %1519 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3096 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1519, i32 0, i32 3
  %1520 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3096, align 8
  %1521 = load i32, i32* %state2937, align 4
  %idxprom3097 = zext i32 %1521 to i64
  %arrayidx3098 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1520, i64 %idxprom3097
  %trans3099 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3098, i32 0, i32 1
  %list3100 = bitcast %union.anon.21* %trans3099 to %struct._reg_trie_trans_list_elem**
  %1522 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list3100, align 8
  %arrayidx3101 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1522, i64 0
  %forid3102 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx3101, i32 0, i32 0
  %1523 = load i16, i16* %forid3102, align 4
  %conv3103 = zext i16 %1523 to i32
  %sub3104 = sub nsw i32 %conv3103, 1
  br label %cond.end3106

cond.false3105:                                   ; preds = %for.cond3087
  br label %cond.end3106

cond.end3106:                                     ; preds = %cond.false3105, %cond.true3095
  %cond3107 = phi i32 [ %sub3104, %cond.true3095 ], [ 0, %cond.false3105 ]
  %cmp3108 = icmp sle i32 %conv3088, %cond3107
  br i1 %cmp3108, label %for.body3110, label %for.end3142

for.body3110:                                     ; preds = %cond.end3106
  %1524 = load i32, i32* %base, align 4
  %1525 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3111 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1525, i32 0, i32 8
  %1526 = load i16, i16* %uniquecharcount3111, align 8
  %conv3112 = zext i16 %1526 to i32
  %sub3113 = sub i32 %1524, %conv3112
  %1527 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3114 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1527, i32 0, i32 3
  %1528 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3114, align 8
  %1529 = load i32, i32* %state2937, align 4
  %idxprom3115 = zext i32 %1529 to i64
  %arrayidx3116 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1528, i64 %idxprom3115
  %trans3117 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3116, i32 0, i32 1
  %list3118 = bitcast %union.anon.21* %trans3117 to %struct._reg_trie_trans_list_elem**
  %1530 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list3118, align 8
  %1531 = load i16, i16* %idx, align 2
  %idxprom3119 = zext i16 %1531 to i64
  %arrayidx3120 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1530, i64 %idxprom3119
  %forid3121 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx3120, i32 0, i32 0
  %1532 = load i16, i16* %forid3121, align 4
  %conv3122 = zext i16 %1532 to i32
  %add3123 = add i32 %sub3113, %conv3122
  store i32 %add3123, i32* %tid, align 4
  %1533 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3124 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1533, i32 0, i32 3
  %1534 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3124, align 8
  %1535 = load i32, i32* %state2937, align 4
  %idxprom3125 = zext i32 %1535 to i64
  %arrayidx3126 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1534, i64 %idxprom3125
  %trans3127 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3126, i32 0, i32 1
  %list3128 = bitcast %union.anon.21* %trans3127 to %struct._reg_trie_trans_list_elem**
  %1536 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list3128, align 8
  %1537 = load i16, i16* %idx, align 2
  %idxprom3129 = zext i16 %1537 to i64
  %arrayidx3130 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %1536, i64 %idxprom3129
  %newstate3131 = getelementptr inbounds %struct._reg_trie_trans_list_elem, %struct._reg_trie_trans_list_elem* %arrayidx3130, i32 0, i32 1
  %1538 = load i32, i32* %newstate3131, align 4
  %1539 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3132 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1539, i32 0, i32 4
  %1540 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3132, align 8
  %1541 = load i32, i32* %tid, align 4
  %idxprom3133 = zext i32 %1541 to i64
  %arrayidx3134 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1540, i64 %idxprom3133
  %next3135 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3134, i32 0, i32 0
  store i32 %1538, i32* %next3135, align 4
  %1542 = load i32, i32* %state2937, align 4
  %1543 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3136 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1543, i32 0, i32 4
  %1544 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3136, align 8
  %1545 = load i32, i32* %tid, align 4
  %idxprom3137 = zext i32 %1545 to i64
  %arrayidx3138 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1544, i64 %idxprom3137
  %check3139 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3138, i32 0, i32 1
  store i32 %1542, i32* %check3139, align 4
  br label %for.inc3140

for.inc3140:                                      ; preds = %for.body3110
  %1546 = load i16, i16* %idx, align 2
  %inc3141 = add i16 %1546, 1
  store i16 %inc3141, i16* %idx, align 2
  br label %for.cond3087

for.end3142:                                      ; preds = %cond.end3106
  %1547 = load i16, i16* %maxid, align 2
  %conv3143 = zext i16 %1547 to i32
  %1548 = load i16, i16* %minid, align 2
  %conv3144 = zext i16 %1548 to i32
  %sub3145 = sub nsw i32 %conv3143, %conv3144
  %add3146 = add nsw i32 %sub3145, 1
  %1549 = load i32, i32* %tp, align 4
  %add3147 = add i32 %1549, %add3146
  store i32 %add3147, i32* %tp, align 4
  br label %if.end3148

if.end3148:                                       ; preds = %for.end3142, %if.end3085
  %1550 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3149 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1550, i32 0, i32 3
  %1551 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3149, align 8
  %1552 = load i32, i32* %state2937, align 4
  %idxprom3150 = zext i32 %1552 to i64
  %arrayidx3151 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1551, i64 %idxprom3150
  %trans3152 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3151, i32 0, i32 1
  %list3153 = bitcast %union.anon.21* %trans3152 to %struct._reg_trie_trans_list_elem**
  %1553 = load %struct._reg_trie_trans_list_elem*, %struct._reg_trie_trans_list_elem** %list3153, align 8
  %1554 = bitcast %struct._reg_trie_trans_list_elem* %1553 to i8*
  call void @Perl_safesysfree(i8* %1554)
  br label %if.end3154

if.end3154:                                       ; preds = %if.end3148, %for.body2941
  %1555 = load i32, i32* %base, align 4
  %1556 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3155 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1556, i32 0, i32 3
  %1557 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3155, align 8
  %1558 = load i32, i32* %state2937, align 4
  %idxprom3156 = zext i32 %1558 to i64
  %arrayidx3157 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1557, i64 %idxprom3156
  %trans3158 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3157, i32 0, i32 1
  %base3159 = bitcast %union.anon.21* %trans3158 to i32*
  store i32 %1555, i32* %base3159, align 8
  br label %for.inc3160

for.inc3160:                                      ; preds = %if.end3154
  %1559 = load i32, i32* %state2937, align 4
  %inc3161 = add i32 %1559, 1
  store i32 %inc3161, i32* %state2937, align 4
  br label %for.cond2938

for.end3162:                                      ; preds = %for.cond2938
  %1560 = load i32, i32* %tp, align 4
  %add3163 = add i32 %1560, 1
  %1561 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %lasttrans = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1561, i32 0, i32 1
  store i32 %add3163, i32* %lasttrans, align 4
  br label %if.end3599

if.else3164:                                      ; preds = %cond.end2565
  %1562 = load i64, i64* %trie_charcount, align 8
  %add3165 = add i64 %1562, 1
  %1563 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3166 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1563, i32 0, i32 8
  %1564 = load i16, i16* %uniquecharcount3166, align 8
  %conv3167 = zext i16 %1564 to i64
  %mul3168 = mul i64 %add3165, %conv3167
  %add3169 = add i64 %mul3168, 1
  %call3170 = call noalias i8* @calloc(i64 %add3169, i64 8) #5
  %1565 = bitcast i8* %call3170 to %struct._reg_trie_trans*
  %1566 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3171 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1566, i32 0, i32 4
  store %struct._reg_trie_trans* %1565, %struct._reg_trie_trans** %trans3171, align 8
  %1567 = load i64, i64* %trie_charcount, align 8
  %add3172 = add i64 %1567, 2
  %call3173 = call noalias i8* @calloc(i64 %add3172, i64 16) #5
  %1568 = bitcast i8* %call3173 to %struct._reg_trie_state*
  %1569 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3174 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1569, i32 0, i32 3
  store %struct._reg_trie_state* %1568, %struct._reg_trie_state** %states3174, align 8
  %1570 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3175 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1570, i32 0, i32 8
  %1571 = load i16, i16* %uniquecharcount3175, align 8
  %conv3176 = zext i16 %1571 to i32
  %add3177 = add nsw i32 %conv3176, 1
  store i32 %add3177, i32* %next_alloc, align 4
  %1572 = load %struct.regnode*, %struct.regnode** %first.addr, align 8
  store %struct.regnode* %1572, %struct.regnode** %cur, align 8
  br label %for.cond3178

for.cond3178:                                     ; preds = %for.inc3408, %if.else3164
  %1573 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %1574 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  %cmp3179 = icmp ult %struct.regnode* %1573, %1574
  br i1 %cmp3179, label %for.body3181, label %for.end3410

for.body3181:                                     ; preds = %for.cond3178
  %1575 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %add.ptr3183 = getelementptr inbounds %struct.regnode, %struct.regnode* %1575, i64 1
  store %struct.regnode* %add.ptr3183, %struct.regnode** %noper3182, align 8
  %1576 = load %struct.regnode*, %struct.regnode** %noper3182, align 8
  %1577 = bitcast %struct.regnode* %1576 to %struct.regnode_string*
  %string3185 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1577, i32 0, i32 3
  %arraydecay3186 = getelementptr inbounds [1 x i8], [1 x i8]* %string3185, i64 0, i64 0
  store i8* %arraydecay3186, i8** %uc3184, align 8
  %1578 = load i8*, i8** %uc3184, align 8
  %1579 = load %struct.regnode*, %struct.regnode** %noper3182, align 8
  %1580 = bitcast %struct.regnode* %1579 to %struct.regnode_string*
  %str_len3188 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1580, i32 0, i32 0
  %1581 = load i8, i8* %str_len3188, align 2
  %conv3189 = zext i8 %1581 to i32
  %idx.ext3190 = sext i32 %conv3189 to i64
  %add.ptr3191 = getelementptr inbounds i8, i8* %1578, i64 %idx.ext3190
  store i8* %add.ptr3191, i8** %e3187, align 8
  store i32 1, i32* %state3192, align 4
  store i16 0, i16* %charid3193, align 2
  store i32 0, i32* %accept_state, align 4
  store i32 0, i32* %wordlen3194, align 4
  %1582 = load %struct.regnode*, %struct.regnode** %noper3182, align 8
  %type3195 = getelementptr inbounds %struct.regnode, %struct.regnode* %1582, i32 0, i32 1
  %1583 = load i8, i8* %type3195, align 1
  %conv3196 = zext i8 %1583 to i32
  %cmp3197 = icmp eq i32 %conv3196, 40
  br i1 %cmp3197, label %if.then3199, label %if.end3217

if.then3199:                                      ; preds = %for.body3181
  %1584 = load %struct.regnode*, %struct.regnode** %noper3182, align 8
  %call3201 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1584)
  store %struct.regnode* %call3201, %struct.regnode** %noper_next3200, align 8
  %1585 = load %struct.regnode*, %struct.regnode** %noper_next3200, align 8
  %1586 = load %struct.regnode*, %struct.regnode** %tail.addr, align 8
  %cmp3202 = icmp ne %struct.regnode* %1585, %1586
  br i1 %cmp3202, label %land.lhs.true3204, label %if.end3216

land.lhs.true3204:                                ; preds = %if.then3199
  %1587 = load %struct.regnode*, %struct.regnode** %noper_next3200, align 8
  %type3205 = getelementptr inbounds %struct.regnode, %struct.regnode* %1587, i32 0, i32 1
  %1588 = load i8, i8* %type3205, align 1
  %conv3206 = zext i8 %1588 to i32
  %1589 = load i32, i32* %flags.addr, align 4
  %cmp3207 = icmp eq i32 %conv3206, %1589
  br i1 %cmp3207, label %if.then3209, label %if.end3216

if.then3209:                                      ; preds = %land.lhs.true3204
  %1590 = load %struct.regnode*, %struct.regnode** %noper_next3200, align 8
  store %struct.regnode* %1590, %struct.regnode** %noper3182, align 8
  %1591 = load %struct.regnode*, %struct.regnode** %noper3182, align 8
  %1592 = bitcast %struct.regnode* %1591 to %struct.regnode_string*
  %string3210 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1592, i32 0, i32 3
  %arraydecay3211 = getelementptr inbounds [1 x i8], [1 x i8]* %string3210, i64 0, i64 0
  store i8* %arraydecay3211, i8** %uc3184, align 8
  %1593 = load i8*, i8** %uc3184, align 8
  %1594 = load %struct.regnode*, %struct.regnode** %noper3182, align 8
  %1595 = bitcast %struct.regnode* %1594 to %struct.regnode_string*
  %str_len3212 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1595, i32 0, i32 0
  %1596 = load i8, i8* %str_len3212, align 2
  %conv3213 = zext i8 %1596 to i32
  %idx.ext3214 = sext i32 %conv3213 to i64
  %add.ptr3215 = getelementptr inbounds i8, i8* %1593, i64 %idx.ext3214
  store i8* %add.ptr3215, i8** %e3187, align 8
  br label %if.end3216

if.end3216:                                       ; preds = %if.then3209, %land.lhs.true3204, %if.then3199
  br label %if.end3217

if.end3217:                                       ; preds = %if.end3216, %for.body3181
  %1597 = load %struct.regnode*, %struct.regnode** %noper3182, align 8
  %type3218 = getelementptr inbounds %struct.regnode, %struct.regnode* %1597, i32 0, i32 1
  %1598 = load i8, i8* %type3218, align 1
  %conv3219 = zext i8 %1598 to i32
  %cmp3220 = icmp ne i32 %conv3219, 40
  br i1 %cmp3220, label %if.then3222, label %if.end3333

if.then3222:                                      ; preds = %if.end3217
  br label %for.cond3223

for.cond3223:                                     ; preds = %for.inc3330, %if.then3222
  %1599 = load i8*, i8** %uc3184, align 8
  %1600 = load i8*, i8** %e3187, align 8
  %cmp3224 = icmp ult i8* %1599, %1600
  br i1 %cmp3224, label %for.body3226, label %for.end3332

for.body3226:                                     ; preds = %for.cond3223
  br label %do.body3227

do.body3227:                                      ; preds = %for.body3226
  %1601 = load i32, i32* %wordlen3194, align 4
  %inc3228 = add i32 %1601, 1
  store i32 %inc3228, i32* %wordlen3194, align 4
  %1602 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf83229 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1602, i32 0, i32 25
  %1603 = load i32, i32* %utf83229, align 8
  %tobool3230 = icmp ne i32 %1603, 0
  br i1 %tobool3230, label %cond.true3231, label %cond.false3232

cond.true3231:                                    ; preds = %do.body3227
  br i1 true, label %if.then3233, label %if.else3235

cond.false3232:                                   ; preds = %do.body3227
  br i1 false, label %if.then3233, label %if.else3235

if.then3233:                                      ; preds = %cond.false3232, %cond.true3231
  %1604 = load i8*, i8** %uc3184, align 8
  %call3234 = call i64 @Perl_valid_utf8_to_uvchr(i8* %1604, i64* %len)
  store i64 %call3234, i64* %uvc, align 8
  br label %if.end3253

if.else3235:                                      ; preds = %cond.false3232, %cond.true3231
  %1605 = load i8*, i8** %folder, align 8
  %cmp3236 = icmp eq i8* %1605, getelementptr inbounds ([0 x i8], [0 x i8]* @PL_fold_latin1, i64 0, i64 0)
  br i1 %cmp3236, label %if.then3238, label %if.else3249

if.then3238:                                      ; preds = %if.else3235
  %1606 = load i8*, i8** %uc3184, align 8
  %1607 = load i8, i8* %1606, align 1
  %idxprom3239 = zext i8 %1607 to i64
  %arrayidx3240 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_latin1_lc, i64 0, i64 %idxprom3239
  %1608 = load i8, i8* %arrayidx3240, align 1
  %conv3241 = zext i8 %1608 to i32
  %conv3242 = sext i32 %conv3241 to i64
  store i64 %conv3242, i64* %uvc, align 8
  %1609 = load i64, i64* %uvc, align 8
  %cmp3243 = icmp eq i64 %1609, 181
  br i1 %cmp3243, label %cond.true3245, label %cond.false3246

cond.true3245:                                    ; preds = %if.then3238
  br i1 true, label %if.then3247, label %if.end3248

cond.false3246:                                   ; preds = %if.then3238
  br i1 false, label %if.then3247, label %if.end3248

if.then3247:                                      ; preds = %cond.false3246, %cond.true3245
  store i64 956, i64* %uvc, align 8
  br label %if.end3248

if.end3248:                                       ; preds = %if.then3247, %cond.false3246, %cond.true3245
  store i64 1, i64* %len, align 8
  br label %if.end3252

if.else3249:                                      ; preds = %if.else3235
  %1610 = load i8*, i8** %uc3184, align 8
  %1611 = load i8, i8* %1610, align 1
  %conv3250 = zext i8 %1611 to i32
  %conv3251 = zext i32 %conv3250 to i64
  store i64 %conv3251, i64* %uvc, align 8
  store i64 1, i64* %len, align 8
  br label %if.end3252

if.end3252:                                       ; preds = %if.else3249, %if.end3248
  br label %if.end3253

if.end3253:                                       ; preds = %if.end3252, %if.then3233
  br label %do.end3254

do.end3254:                                       ; preds = %if.end3253
  %1612 = load i64, i64* %uvc, align 8
  %cmp3255 = icmp ult i64 %1612, 256
  br i1 %cmp3255, label %if.then3257, label %if.else3260

if.then3257:                                      ; preds = %do.end3254
  %1613 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %charmap3258 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1613, i32 0, i32 2
  %1614 = load i16*, i16** %charmap3258, align 8
  %1615 = load i64, i64* %uvc, align 8
  %arrayidx3259 = getelementptr inbounds i16, i16* %1614, i64 %1615
  %1616 = load i16, i16* %arrayidx3259, align 2
  store i16 %1616, i16* %charid3193, align 2
  br label %if.end3283

if.else3260:                                      ; preds = %do.end3254
  %1617 = load %struct.hv*, %struct.hv** %widecharmap, align 8
  %1618 = bitcast i64* %uvc to i8*
  %call3262 = call i8* @Perl_hv_common_key_len(%struct.hv* %1617, i8* %1618, i32 8, i32 32, %struct.sv* null, i32 0)
  %1619 = bitcast i8* %call3262 to %struct.sv**
  store %struct.sv** %1619, %struct.sv*** %svpp3261, align 8
  %1620 = load %struct.sv**, %struct.sv*** %svpp3261, align 8
  %tobool3263 = icmp ne %struct.sv** %1620, null
  br i1 %tobool3263, label %cond.true3264, label %cond.false3279

cond.true3264:                                    ; preds = %if.else3260
  %1621 = load %struct.sv**, %struct.sv*** %svpp3261, align 8
  %1622 = load %struct.sv*, %struct.sv** %1621, align 8
  %sv_flags3265 = getelementptr inbounds %struct.sv, %struct.sv* %1622, i32 0, i32 2
  %1623 = load i32, i32* %sv_flags3265, align 4
  %and3266 = and i32 %1623, 2097408
  %cmp3267 = icmp eq i32 %and3266, 256
  br i1 %cmp3267, label %cond.true3269, label %cond.false3273

cond.true3269:                                    ; preds = %cond.true3264
  %1624 = load %struct.sv**, %struct.sv*** %svpp3261, align 8
  %1625 = load %struct.sv*, %struct.sv** %1624, align 8
  %sv_any3270 = getelementptr inbounds %struct.sv, %struct.sv* %1625, i32 0, i32 0
  %1626 = load i8*, i8** %sv_any3270, align 8
  %1627 = bitcast i8* %1626 to %struct.xpviv*
  %xiv_u3271 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %1627, i32 0, i32 4
  %xivu_iv3272 = bitcast %union._xivu* %xiv_u3271 to i64*
  %1628 = load i64, i64* %xivu_iv3272, align 8
  br label %cond.end3275

cond.false3273:                                   ; preds = %cond.true3264
  %1629 = load %struct.sv**, %struct.sv*** %svpp3261, align 8
  %1630 = load %struct.sv*, %struct.sv** %1629, align 8
  %call3274 = call i64 @Perl_sv_2iv_flags(%struct.sv* %1630, i32 2)
  br label %cond.end3275

cond.end3275:                                     ; preds = %cond.false3273, %cond.true3269
  %cond3276 = phi i64 [ %1628, %cond.true3269 ], [ %call3274, %cond.false3273 ]
  %conv3277 = trunc i64 %cond3276 to i16
  %conv3278 = zext i16 %conv3277 to i32
  br label %cond.end3280

cond.false3279:                                   ; preds = %if.else3260
  br label %cond.end3280

cond.end3280:                                     ; preds = %cond.false3279, %cond.end3275
  %cond3281 = phi i32 [ %conv3278, %cond.end3275 ], [ 0, %cond.false3279 ]
  %conv3282 = trunc i32 %cond3281 to i16
  store i16 %conv3282, i16* %charid3193, align 2
  br label %if.end3283

if.end3283:                                       ; preds = %cond.end3280, %if.then3257
  %1631 = load i16, i16* %charid3193, align 2
  %tobool3284 = icmp ne i16 %1631, 0
  br i1 %tobool3284, label %if.then3285, label %if.else3328

if.then3285:                                      ; preds = %if.end3283
  %1632 = load i16, i16* %charid3193, align 2
  %dec3286 = add i16 %1632, -1
  store i16 %dec3286, i16* %charid3193, align 2
  %1633 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3287 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1633, i32 0, i32 4
  %1634 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3287, align 8
  %1635 = load i32, i32* %state3192, align 4
  %1636 = load i16, i16* %charid3193, align 2
  %conv3288 = zext i16 %1636 to i32
  %add3289 = add i32 %1635, %conv3288
  %idxprom3290 = zext i32 %add3289 to i64
  %arrayidx3291 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1634, i64 %idxprom3290
  %next3292 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3291, i32 0, i32 0
  %1637 = load i32, i32* %next3292, align 4
  %tobool3293 = icmp ne i32 %1637, 0
  br i1 %tobool3293, label %if.end3321, label %if.then3294

if.then3294:                                      ; preds = %if.then3285
  %1638 = load i32, i32* %next_alloc, align 4
  %1639 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3295 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1639, i32 0, i32 4
  %1640 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3295, align 8
  %1641 = load i32, i32* %state3192, align 4
  %1642 = load i16, i16* %charid3193, align 2
  %conv3296 = zext i16 %1642 to i32
  %add3297 = add i32 %1641, %conv3296
  %idxprom3298 = zext i32 %add3297 to i64
  %arrayidx3299 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1640, i64 %idxprom3298
  %next3300 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3299, i32 0, i32 0
  store i32 %1638, i32* %next3300, align 4
  %1643 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3301 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1643, i32 0, i32 4
  %1644 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3301, align 8
  %1645 = load i32, i32* %state3192, align 4
  %idxprom3302 = zext i32 %1645 to i64
  %arrayidx3303 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1644, i64 %idxprom3302
  %check3304 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3303, i32 0, i32 1
  %1646 = load i32, i32* %check3304, align 4
  %inc3305 = add i32 %1646, 1
  store i32 %inc3305, i32* %check3304, align 4
  %1647 = load i32, i32* %state3192, align 4
  %sub3306 = sub i32 %1647, 1
  %1648 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3307 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1648, i32 0, i32 8
  %1649 = load i16, i16* %uniquecharcount3307, align 8
  %conv3308 = zext i16 %1649 to i32
  %div3309 = udiv i32 %sub3306, %conv3308
  %add3310 = add i32 %div3309, 1
  %1650 = load i32*, i32** %prev_states, align 8
  %1651 = load i32, i32* %next_alloc, align 4
  %sub3311 = sub i32 %1651, 1
  %1652 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3312 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1652, i32 0, i32 8
  %1653 = load i16, i16* %uniquecharcount3312, align 8
  %conv3313 = zext i16 %1653 to i32
  %div3314 = udiv i32 %sub3311, %conv3313
  %add3315 = add i32 %div3314, 1
  %idxprom3316 = zext i32 %add3315 to i64
  %arrayidx3317 = getelementptr inbounds i32, i32* %1650, i64 %idxprom3316
  store i32 %add3310, i32* %arrayidx3317, align 4
  %1654 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3318 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1654, i32 0, i32 8
  %1655 = load i16, i16* %uniquecharcount3318, align 8
  %conv3319 = zext i16 %1655 to i32
  %1656 = load i32, i32* %next_alloc, align 4
  %add3320 = add i32 %1656, %conv3319
  store i32 %add3320, i32* %next_alloc, align 4
  br label %if.end3321

if.end3321:                                       ; preds = %if.then3294, %if.then3285
  %1657 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3322 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1657, i32 0, i32 4
  %1658 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3322, align 8
  %1659 = load i32, i32* %state3192, align 4
  %1660 = load i16, i16* %charid3193, align 2
  %conv3323 = zext i16 %1660 to i32
  %add3324 = add i32 %1659, %conv3323
  %idxprom3325 = zext i32 %add3324 to i64
  %arrayidx3326 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1658, i64 %idxprom3325
  %next3327 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3326, i32 0, i32 0
  %1661 = load i32, i32* %next3327, align 4
  store i32 %1661, i32* %state3192, align 4
  br label %if.end3329

if.else3328:                                      ; preds = %if.end3283
  %1662 = load i64, i64* %uvc, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.223, i64 0, i64 0), i64 %1662)
  br label %if.end3329

if.end3329:                                       ; preds = %if.else3328, %if.end3321
  br label %for.inc3330

for.inc3330:                                      ; preds = %if.end3329
  %1663 = load i64, i64* %len, align 8
  %1664 = load i8*, i8** %uc3184, align 8
  %add.ptr3331 = getelementptr inbounds i8, i8* %1664, i64 %1663
  store i8* %add.ptr3331, i8** %uc3184, align 8
  br label %for.cond3223

for.end3332:                                      ; preds = %for.cond3223
  br label %if.end3333

if.end3333:                                       ; preds = %for.end3332, %if.end3217
  %1665 = load i32, i32* %state3192, align 4
  %sub3334 = sub i32 %1665, 1
  %1666 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3335 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1666, i32 0, i32 8
  %1667 = load i16, i16* %uniquecharcount3335, align 8
  %conv3336 = zext i16 %1667 to i32
  %div3337 = udiv i32 %sub3334, %conv3336
  %add3338 = add i32 %div3337, 1
  store i32 %add3338, i32* %accept_state, align 4
  br label %do.body3339

do.body3339:                                      ; preds = %if.end3333
  %1668 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3341 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1668, i32 0, i32 3
  %1669 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3341, align 8
  %1670 = load i32, i32* %accept_state, align 4
  %idxprom3342 = zext i32 %1670 to i64
  %arrayidx3343 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1669, i64 %idxprom3342
  %wordnum3344 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3343, i32 0, i32 0
  %1671 = load i16, i16* %wordnum3344, align 8
  store i16 %1671, i16* %dupe3340, align 2
  %1672 = load %struct.regnode*, %struct.regnode** %noper3182, align 8
  %call3346 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1672)
  store %struct.regnode* %call3346, %struct.regnode** %noper_next3345, align 8
  %1673 = load i16, i16* %curword, align 2
  %inc3347 = add i16 %1673, 1
  store i16 %inc3347, i16* %curword, align 2
  %1674 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo3348 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1674, i32 0, i32 7
  %1675 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo3348, align 8
  %1676 = load i16, i16* %curword, align 2
  %idxprom3349 = zext i16 %1676 to i64
  %arrayidx3350 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %1675, i64 %idxprom3349
  %prev3351 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %arrayidx3350, i32 0, i32 0
  store i16 0, i16* %prev3351, align 4
  %1677 = load i32, i32* %wordlen3194, align 4
  %1678 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo3352 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1678, i32 0, i32 7
  %1679 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo3352, align 8
  %1680 = load i16, i16* %curword, align 2
  %idxprom3353 = zext i16 %1680 to i64
  %arrayidx3354 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %1679, i64 %idxprom3353
  %len3355 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %arrayidx3354, i32 0, i32 1
  store i32 %1677, i32* %len3355, align 4
  %1681 = load i32, i32* %accept_state, align 4
  %1682 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo3356 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1682, i32 0, i32 7
  %1683 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo3356, align 8
  %1684 = load i16, i16* %curword, align 2
  %idxprom3357 = zext i16 %1684 to i64
  %arrayidx3358 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %1683, i64 %idxprom3357
  %accept3359 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %arrayidx3358, i32 0, i32 2
  store i32 %1681, i32* %accept3359, align 4
  %1685 = load %struct.regnode*, %struct.regnode** %noper_next3345, align 8
  %1686 = load %struct.regnode*, %struct.regnode** %tail.addr, align 8
  %cmp3360 = icmp ult %struct.regnode* %1685, %1686
  br i1 %cmp3360, label %if.then3362, label %if.end3386

if.then3362:                                      ; preds = %do.body3339
  %1687 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump3363 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1687, i32 0, i32 6
  %1688 = load i16*, i16** %jump3363, align 8
  %tobool3364 = icmp ne i16* %1688, null
  br i1 %tobool3364, label %if.end3370, label %if.then3365

if.then3365:                                      ; preds = %if.then3362
  %1689 = load i32, i32* %word_count.addr, align 4
  %add3366 = add i32 %1689, 1
  %conv3367 = zext i32 %add3366 to i64
  %call3368 = call noalias i8* @calloc(i64 %conv3367, i64 2) #5
  %1690 = bitcast i8* %call3368 to i16*
  %1691 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump3369 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1691, i32 0, i32 6
  store i16* %1690, i16** %jump3369, align 8
  br label %if.end3370

if.end3370:                                       ; preds = %if.then3365, %if.then3362
  %1692 = load %struct.regnode*, %struct.regnode** %noper_next3345, align 8
  %1693 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %sub.ptr.lhs.cast3371 = ptrtoint %struct.regnode* %1692 to i64
  %sub.ptr.rhs.cast3372 = ptrtoint %struct.regnode* %1693 to i64
  %sub.ptr.sub3373 = sub i64 %sub.ptr.lhs.cast3371, %sub.ptr.rhs.cast3372
  %sub.ptr.div3374 = sdiv exact i64 %sub.ptr.sub3373, 4
  %conv3375 = trunc i64 %sub.ptr.div3374 to i16
  %1694 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump3376 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1694, i32 0, i32 6
  %1695 = load i16*, i16** %jump3376, align 8
  %1696 = load i16, i16* %curword, align 2
  %idxprom3377 = zext i16 %1696 to i64
  %arrayidx3378 = getelementptr inbounds i16, i16* %1695, i64 %idxprom3377
  store i16 %conv3375, i16* %arrayidx3378, align 2
  %1697 = load %struct.regnode*, %struct.regnode** %jumper, align 8
  %tobool3379 = icmp ne %struct.regnode* %1697, null
  br i1 %tobool3379, label %if.end3381, label %if.then3380

if.then3380:                                      ; preds = %if.end3370
  %1698 = load %struct.regnode*, %struct.regnode** %noper_next3345, align 8
  store %struct.regnode* %1698, %struct.regnode** %jumper, align 8
  br label %if.end3381

if.end3381:                                       ; preds = %if.then3380, %if.end3370
  %1699 = load %struct.regnode*, %struct.regnode** %nextbranch, align 8
  %tobool3382 = icmp ne %struct.regnode* %1699, null
  br i1 %tobool3382, label %if.end3385, label %if.then3383

if.then3383:                                      ; preds = %if.end3381
  %1700 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %call3384 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1700)
  store %struct.regnode* %call3384, %struct.regnode** %nextbranch, align 8
  br label %if.end3385

if.end3385:                                       ; preds = %if.then3383, %if.end3381
  br label %if.end3386

if.end3386:                                       ; preds = %if.end3385, %do.body3339
  %1701 = load i16, i16* %dupe3340, align 2
  %tobool3387 = icmp ne i16 %1701, 0
  br i1 %tobool3387, label %if.then3388, label %if.else3401

if.then3388:                                      ; preds = %if.end3386
  %1702 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo3389 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1702, i32 0, i32 7
  %1703 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo3389, align 8
  %1704 = load i16, i16* %dupe3340, align 2
  %idxprom3390 = zext i16 %1704 to i64
  %arrayidx3391 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %1703, i64 %idxprom3390
  %prev3392 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %arrayidx3391, i32 0, i32 0
  %1705 = load i16, i16* %prev3392, align 4
  %1706 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo3393 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1706, i32 0, i32 7
  %1707 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo3393, align 8
  %1708 = load i16, i16* %curword, align 2
  %idxprom3394 = zext i16 %1708 to i64
  %arrayidx3395 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %1707, i64 %idxprom3394
  %prev3396 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %arrayidx3395, i32 0, i32 0
  store i16 %1705, i16* %prev3396, align 4
  %1709 = load i16, i16* %curword, align 2
  %1710 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo3397 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1710, i32 0, i32 7
  %1711 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo3397, align 8
  %1712 = load i16, i16* %dupe3340, align 2
  %idxprom3398 = zext i16 %1712 to i64
  %arrayidx3399 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %1711, i64 %idxprom3398
  %prev3400 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %arrayidx3399, i32 0, i32 0
  store i16 %1709, i16* %prev3400, align 4
  br label %if.end3406

if.else3401:                                      ; preds = %if.end3386
  %1713 = load i16, i16* %curword, align 2
  %1714 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3402 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1714, i32 0, i32 3
  %1715 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3402, align 8
  %1716 = load i32, i32* %accept_state, align 4
  %idxprom3403 = zext i32 %1716 to i64
  %arrayidx3404 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1715, i64 %idxprom3403
  %wordnum3405 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3404, i32 0, i32 0
  store i16 %1713, i16* %wordnum3405, align 8
  br label %if.end3406

if.end3406:                                       ; preds = %if.else3401, %if.then3388
  br label %do.end3407

do.end3407:                                       ; preds = %if.end3406
  br label %for.inc3408

for.inc3408:                                      ; preds = %do.end3407
  %1717 = load %struct.regnode*, %struct.regnode** %cur, align 8
  %call3409 = call %struct.regnode* @Perl_regnext(%struct.regnode* %1717)
  store %struct.regnode* %call3409, %struct.regnode** %cur, align 8
  br label %for.cond3178

for.end3410:                                      ; preds = %for.cond3178
  %1718 = load i32, i32* %next_alloc, align 4
  %sub3411 = sub i32 %1718, 1
  %1719 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3412 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1719, i32 0, i32 8
  %1720 = load i16, i16* %uniquecharcount3412, align 8
  %conv3413 = zext i16 %1720 to i32
  %div3414 = udiv i32 %sub3411, %conv3413
  %add3415 = add i32 %div3414, 1
  store i32 %add3415, i32* %laststate, align 4
  store i32 0, i32* %pos, align 4
  store i32 0, i32* %zp3418, align 4
  %1721 = load i32, i32* %laststate, align 4
  %1722 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %statecount3419 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1722, i32 0, i32 13
  store i32 %1721, i32* %statecount3419, align 4
  store i32 1, i32* %state3416, align 4
  br label %for.cond3420

for.cond3420:                                     ; preds = %for.inc3589, %for.end3410
  %1723 = load i32, i32* %state3416, align 4
  %1724 = load i32, i32* %laststate, align 4
  %cmp3421 = icmp ult i32 %1723, %1724
  br i1 %cmp3421, label %for.body3423, label %for.end3591

for.body3423:                                     ; preds = %for.cond3420
  store i8 0, i8* %flag, align 1
  %1725 = load i32, i32* %state3416, align 4
  %tobool3424 = icmp ne i32 %1725, 0
  br i1 %tobool3424, label %cond.true3425, label %cond.false3431

cond.true3425:                                    ; preds = %for.body3423
  %1726 = load i32, i32* %state3416, align 4
  %sub3426 = sub i32 %1726, 1
  %1727 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3427 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1727, i32 0, i32 8
  %1728 = load i16, i16* %uniquecharcount3427, align 8
  %conv3428 = zext i16 %1728 to i32
  %mul3429 = mul i32 %sub3426, %conv3428
  %add3430 = add i32 %mul3429, 1
  br label %cond.end3432

cond.false3431:                                   ; preds = %for.body3423
  %1729 = load i32, i32* %state3416, align 4
  br label %cond.end3432

cond.end3432:                                     ; preds = %cond.false3431, %cond.true3425
  %cond3433 = phi i32 [ %add3430, %cond.true3425 ], [ %1729, %cond.false3431 ]
  store i32 %cond3433, i32* %stateidx, align 4
  %1730 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3434 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1730, i32 0, i32 4
  %1731 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3434, align 8
  %1732 = load i32, i32* %stateidx, align 4
  %idxprom3435 = zext i32 %1732 to i64
  %arrayidx3436 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1731, i64 %idxprom3435
  %check3437 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3436, i32 0, i32 1
  %1733 = load i32, i32* %check3437, align 4
  store i32 %1733, i32* %o_used, align 4
  %1734 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3438 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1734, i32 0, i32 4
  %1735 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3438, align 8
  %1736 = load i32, i32* %stateidx, align 4
  %idxprom3439 = zext i32 %1736 to i64
  %arrayidx3440 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1735, i64 %idxprom3439
  %check3441 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3440, i32 0, i32 1
  %1737 = load i32, i32* %check3441, align 4
  store i32 %1737, i32* %used, align 4
  %1738 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3442 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1738, i32 0, i32 4
  %1739 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3442, align 8
  %1740 = load i32, i32* %stateidx, align 4
  %idxprom3443 = zext i32 %1740 to i64
  %arrayidx3444 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1739, i64 %idxprom3443
  %check3445 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3444, i32 0, i32 1
  store i32 0, i32* %check3445, align 4
  store i32 0, i32* %charid3417, align 4
  br label %for.cond3446

for.cond3446:                                     ; preds = %for.inc3586, %cond.end3432
  %1741 = load i32, i32* %used, align 4
  %tobool3447 = icmp ne i32 %1741, 0
  br i1 %tobool3447, label %land.rhs3448, label %land.end3453

land.rhs3448:                                     ; preds = %for.cond3446
  %1742 = load i32, i32* %charid3417, align 4
  %1743 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3449 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1743, i32 0, i32 8
  %1744 = load i16, i16* %uniquecharcount3449, align 8
  %conv3450 = zext i16 %1744 to i32
  %cmp3451 = icmp ult i32 %1742, %conv3450
  br label %land.end3453

land.end3453:                                     ; preds = %land.rhs3448, %for.cond3446
  %1745 = phi i1 [ false, %for.cond3446 ], [ %cmp3451, %land.rhs3448 ]
  br i1 %1745, label %for.body3454, label %for.end3588

for.body3454:                                     ; preds = %land.end3453
  %1746 = load i8, i8* %flag, align 1
  %conv3455 = zext i8 %1746 to i32
  %tobool3456 = icmp ne i32 %conv3455, 0
  br i1 %tobool3456, label %if.then3464, label %lor.lhs.false3457

lor.lhs.false3457:                                ; preds = %for.body3454
  %1747 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3458 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1747, i32 0, i32 4
  %1748 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3458, align 8
  %1749 = load i32, i32* %stateidx, align 4
  %1750 = load i32, i32* %charid3417, align 4
  %add3459 = add i32 %1749, %1750
  %idxprom3460 = zext i32 %add3459 to i64
  %arrayidx3461 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1748, i64 %idxprom3460
  %next3462 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3461, i32 0, i32 0
  %1751 = load i32, i32* %next3462, align 4
  %tobool3463 = icmp ne i32 %1751, 0
  br i1 %tobool3463, label %if.then3464, label %if.end3585

if.then3464:                                      ; preds = %lor.lhs.false3457, %for.body3454
  %1752 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3465 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1752, i32 0, i32 4
  %1753 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3465, align 8
  %1754 = load i32, i32* %stateidx, align 4
  %1755 = load i32, i32* %charid3417, align 4
  %add3466 = add i32 %1754, %1755
  %idxprom3467 = zext i32 %add3466 to i64
  %arrayidx3468 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1753, i64 %idxprom3467
  %next3469 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3468, i32 0, i32 0
  %1756 = load i32, i32* %next3469, align 4
  %tobool3470 = icmp ne i32 %1756, 0
  br i1 %tobool3470, label %if.then3471, label %if.end3538

if.then3471:                                      ; preds = %if.then3464
  %1757 = load i32, i32* %o_used, align 4
  %cmp3472 = icmp eq i32 %1757, 1
  br i1 %cmp3472, label %if.then3474, label %if.end3536

if.then3474:                                      ; preds = %if.then3471
  br label %for.cond3475

for.cond3475:                                     ; preds = %for.inc3486, %if.then3474
  %1758 = load i32, i32* %zp3418, align 4
  %1759 = load i32, i32* %pos, align 4
  %cmp3476 = icmp ult i32 %1758, %1759
  br i1 %cmp3476, label %for.body3478, label %for.end3488

for.body3478:                                     ; preds = %for.cond3475
  %1760 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3479 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1760, i32 0, i32 4
  %1761 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3479, align 8
  %1762 = load i32, i32* %zp3418, align 4
  %idxprom3480 = zext i32 %1762 to i64
  %arrayidx3481 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1761, i64 %idxprom3480
  %next3482 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3481, i32 0, i32 0
  %1763 = load i32, i32* %next3482, align 4
  %tobool3483 = icmp ne i32 %1763, 0
  br i1 %tobool3483, label %if.end3485, label %if.then3484

if.then3484:                                      ; preds = %for.body3478
  br label %for.end3488

if.end3485:                                       ; preds = %for.body3478
  br label %for.inc3486

for.inc3486:                                      ; preds = %if.end3485
  %1764 = load i32, i32* %zp3418, align 4
  %inc3487 = add i32 %1764, 1
  store i32 %inc3487, i32* %zp3418, align 4
  br label %for.cond3475

for.end3488:                                      ; preds = %if.then3484, %for.cond3475
  %1765 = load i32, i32* %zp3418, align 4
  %1766 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3489 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1766, i32 0, i32 8
  %1767 = load i16, i16* %uniquecharcount3489, align 8
  %conv3490 = zext i16 %1767 to i32
  %add3491 = add i32 %1765, %conv3490
  %1768 = load i32, i32* %charid3417, align 4
  %sub3492 = sub i32 %add3491, %1768
  %1769 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3493 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1769, i32 0, i32 3
  %1770 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3493, align 8
  %1771 = load i32, i32* %state3416, align 4
  %idxprom3494 = zext i32 %1771 to i64
  %arrayidx3495 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1770, i64 %idxprom3494
  %trans3496 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3495, i32 0, i32 1
  %base3497 = bitcast %union.anon.21* %trans3496 to i32*
  store i32 %sub3492, i32* %base3497, align 8
  %1772 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3498 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1772, i32 0, i32 4
  %1773 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3498, align 8
  %1774 = load i32, i32* %stateidx, align 4
  %1775 = load i32, i32* %charid3417, align 4
  %add3499 = add i32 %1774, %1775
  %idxprom3500 = zext i32 %add3499 to i64
  %arrayidx3501 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1773, i64 %idxprom3500
  %next3502 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3501, i32 0, i32 0
  %1776 = load i32, i32* %next3502, align 4
  %tobool3503 = icmp ne i32 %1776, 0
  br i1 %tobool3503, label %cond.true3504, label %cond.false3515

cond.true3504:                                    ; preds = %for.end3488
  %1777 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3505 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1777, i32 0, i32 4
  %1778 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3505, align 8
  %1779 = load i32, i32* %stateidx, align 4
  %1780 = load i32, i32* %charid3417, align 4
  %add3506 = add i32 %1779, %1780
  %idxprom3507 = zext i32 %add3506 to i64
  %arrayidx3508 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1778, i64 %idxprom3507
  %next3509 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3508, i32 0, i32 0
  %1781 = load i32, i32* %next3509, align 4
  %sub3510 = sub i32 %1781, 1
  %1782 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3511 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1782, i32 0, i32 8
  %1783 = load i16, i16* %uniquecharcount3511, align 8
  %conv3512 = zext i16 %1783 to i32
  %div3513 = udiv i32 %sub3510, %conv3512
  %add3514 = add i32 %div3513, 1
  br label %cond.end3521

cond.false3515:                                   ; preds = %for.end3488
  %1784 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3516 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1784, i32 0, i32 4
  %1785 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3516, align 8
  %1786 = load i32, i32* %stateidx, align 4
  %1787 = load i32, i32* %charid3417, align 4
  %add3517 = add i32 %1786, %1787
  %idxprom3518 = zext i32 %add3517 to i64
  %arrayidx3519 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1785, i64 %idxprom3518
  %next3520 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3519, i32 0, i32 0
  %1788 = load i32, i32* %next3520, align 4
  br label %cond.end3521

cond.end3521:                                     ; preds = %cond.false3515, %cond.true3504
  %cond3522 = phi i32 [ %add3514, %cond.true3504 ], [ %1788, %cond.false3515 ]
  %1789 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3523 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1789, i32 0, i32 4
  %1790 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3523, align 8
  %1791 = load i32, i32* %zp3418, align 4
  %idxprom3524 = zext i32 %1791 to i64
  %arrayidx3525 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1790, i64 %idxprom3524
  %next3526 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3525, i32 0, i32 0
  store i32 %cond3522, i32* %next3526, align 4
  %1792 = load i32, i32* %state3416, align 4
  %1793 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3527 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1793, i32 0, i32 4
  %1794 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3527, align 8
  %1795 = load i32, i32* %zp3418, align 4
  %idxprom3528 = zext i32 %1795 to i64
  %arrayidx3529 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1794, i64 %idxprom3528
  %check3530 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3529, i32 0, i32 1
  store i32 %1792, i32* %check3530, align 4
  %1796 = load i32, i32* %zp3418, align 4
  %inc3531 = add i32 %1796, 1
  store i32 %inc3531, i32* %zp3418, align 4
  %1797 = load i32, i32* %pos, align 4
  %cmp3532 = icmp ugt i32 %inc3531, %1797
  br i1 %cmp3532, label %if.then3534, label %if.end3535

if.then3534:                                      ; preds = %cond.end3521
  %1798 = load i32, i32* %zp3418, align 4
  store i32 %1798, i32* %pos, align 4
  br label %if.end3535

if.end3535:                                       ; preds = %if.then3534, %cond.end3521
  br label %for.end3588

if.end3536:                                       ; preds = %if.then3471
  %1799 = load i32, i32* %used, align 4
  %dec3537 = add i32 %1799, -1
  store i32 %dec3537, i32* %used, align 4
  br label %if.end3538

if.end3538:                                       ; preds = %if.end3536, %if.then3464
  %1800 = load i8, i8* %flag, align 1
  %tobool3539 = icmp ne i8 %1800, 0
  br i1 %tobool3539, label %if.end3550, label %if.then3540

if.then3540:                                      ; preds = %if.end3538
  store i8 1, i8* %flag, align 1
  %1801 = load i32, i32* %pos, align 4
  %1802 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3541 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1802, i32 0, i32 8
  %1803 = load i16, i16* %uniquecharcount3541, align 8
  %conv3542 = zext i16 %1803 to i32
  %add3543 = add i32 %1801, %conv3542
  %1804 = load i32, i32* %charid3417, align 4
  %sub3544 = sub i32 %add3543, %1804
  %1805 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3545 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1805, i32 0, i32 3
  %1806 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3545, align 8
  %1807 = load i32, i32* %state3416, align 4
  %idxprom3546 = zext i32 %1807 to i64
  %arrayidx3547 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1806, i64 %idxprom3546
  %trans3548 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3547, i32 0, i32 1
  %base3549 = bitcast %union.anon.21* %trans3548 to i32*
  store i32 %sub3544, i32* %base3549, align 8
  br label %if.end3550

if.end3550:                                       ; preds = %if.then3540, %if.end3538
  %1808 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3551 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1808, i32 0, i32 4
  %1809 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3551, align 8
  %1810 = load i32, i32* %stateidx, align 4
  %1811 = load i32, i32* %charid3417, align 4
  %add3552 = add i32 %1810, %1811
  %idxprom3553 = zext i32 %add3552 to i64
  %arrayidx3554 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1809, i64 %idxprom3553
  %next3555 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3554, i32 0, i32 0
  %1812 = load i32, i32* %next3555, align 4
  %tobool3556 = icmp ne i32 %1812, 0
  br i1 %tobool3556, label %cond.true3557, label %cond.false3568

cond.true3557:                                    ; preds = %if.end3550
  %1813 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3558 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1813, i32 0, i32 4
  %1814 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3558, align 8
  %1815 = load i32, i32* %stateidx, align 4
  %1816 = load i32, i32* %charid3417, align 4
  %add3559 = add i32 %1815, %1816
  %idxprom3560 = zext i32 %add3559 to i64
  %arrayidx3561 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1814, i64 %idxprom3560
  %next3562 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3561, i32 0, i32 0
  %1817 = load i32, i32* %next3562, align 4
  %sub3563 = sub i32 %1817, 1
  %1818 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3564 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1818, i32 0, i32 8
  %1819 = load i16, i16* %uniquecharcount3564, align 8
  %conv3565 = zext i16 %1819 to i32
  %div3566 = udiv i32 %sub3563, %conv3565
  %add3567 = add i32 %div3566, 1
  br label %cond.end3574

cond.false3568:                                   ; preds = %if.end3550
  %1820 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3569 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1820, i32 0, i32 4
  %1821 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3569, align 8
  %1822 = load i32, i32* %stateidx, align 4
  %1823 = load i32, i32* %charid3417, align 4
  %add3570 = add i32 %1822, %1823
  %idxprom3571 = zext i32 %add3570 to i64
  %arrayidx3572 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1821, i64 %idxprom3571
  %next3573 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3572, i32 0, i32 0
  %1824 = load i32, i32* %next3573, align 4
  br label %cond.end3574

cond.end3574:                                     ; preds = %cond.false3568, %cond.true3557
  %cond3575 = phi i32 [ %add3567, %cond.true3557 ], [ %1824, %cond.false3568 ]
  %1825 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3576 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1825, i32 0, i32 4
  %1826 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3576, align 8
  %1827 = load i32, i32* %pos, align 4
  %idxprom3577 = zext i32 %1827 to i64
  %arrayidx3578 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1826, i64 %idxprom3577
  %next3579 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3578, i32 0, i32 0
  store i32 %cond3575, i32* %next3579, align 4
  %1828 = load i32, i32* %state3416, align 4
  %1829 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3580 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1829, i32 0, i32 4
  %1830 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3580, align 8
  %1831 = load i32, i32* %pos, align 4
  %idxprom3581 = zext i32 %1831 to i64
  %arrayidx3582 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1830, i64 %idxprom3581
  %check3583 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3582, i32 0, i32 1
  store i32 %1828, i32* %check3583, align 4
  %1832 = load i32, i32* %pos, align 4
  %inc3584 = add i32 %1832, 1
  store i32 %inc3584, i32* %pos, align 4
  br label %if.end3585

if.end3585:                                       ; preds = %cond.end3574, %lor.lhs.false3457
  br label %for.inc3586

for.inc3586:                                      ; preds = %if.end3585
  %1833 = load i32, i32* %charid3417, align 4
  %inc3587 = add i32 %1833, 1
  store i32 %inc3587, i32* %charid3417, align 4
  br label %for.cond3446

for.end3588:                                      ; preds = %if.end3535, %land.end3453
  br label %for.inc3589

for.inc3589:                                      ; preds = %for.end3588
  %1834 = load i32, i32* %state3416, align 4
  %inc3590 = add i32 %1834, 1
  store i32 %inc3590, i32* %state3416, align 4
  br label %for.cond3420

for.end3591:                                      ; preds = %for.cond3420
  %1835 = load i32, i32* %pos, align 4
  %add3592 = add i32 %1835, 1
  %1836 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %lasttrans3593 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1836, i32 0, i32 1
  store i32 %add3592, i32* %lasttrans3593, align 4
  %1837 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3594 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1837, i32 0, i32 3
  %1838 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3594, align 8
  %1839 = bitcast %struct._reg_trie_state* %1838 to i8*
  %1840 = load i32, i32* %laststate, align 4
  %conv3595 = zext i32 %1840 to i64
  %mul3596 = mul i64 %conv3595, 16
  %call3597 = call i8* @realloc(i8* %1839, i64 %mul3596) #5
  %1841 = bitcast i8* %call3597 to %struct._reg_trie_state*
  %1842 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3598 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1842, i32 0, i32 3
  store %struct._reg_trie_state* %1841, %struct._reg_trie_state** %states3598, align 8
  br label %if.end3599

if.end3599:                                       ; preds = %for.end3591, %for.end3162
  %1843 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3600 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1843, i32 0, i32 4
  %1844 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3600, align 8
  %1845 = bitcast %struct._reg_trie_trans* %1844 to i8*
  %1846 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %lasttrans3601 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1846, i32 0, i32 1
  %1847 = load i32, i32* %lasttrans3601, align 4
  %conv3602 = zext i32 %1847 to i64
  %mul3603 = mul i64 %conv3602, 8
  %call3604 = call i8* @realloc(i8* %1845, i64 %mul3603) #5
  %1848 = bitcast i8* %call3604 to %struct._reg_trie_trans*
  %1849 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3605 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1849, i32 0, i32 4
  store %struct._reg_trie_trans* %1848, %struct._reg_trie_trans** %trans3605, align 8
  %1850 = load i32, i32* %flags.addr, align 4
  %and3606 = and i32 %1850, 255
  %conv3607 = trunc i32 %and3606 to i8
  store i8 %conv3607, i8* %nodetype, align 1
  store i8* null, i8** %str, align 8
  %1851 = load %struct.regnode*, %struct.regnode** %first.addr, align 8
  %1852 = load %struct.regnode*, %struct.regnode** %startbranch.addr, align 8
  %cmp3608 = icmp ne %struct.regnode* %1851, %1852
  br i1 %cmp3608, label %if.then3615, label %lor.lhs.false3610

lor.lhs.false3610:                                ; preds = %if.end3599
  %1853 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  %type3611 = getelementptr inbounds %struct.regnode, %struct.regnode* %1853, i32 0, i32 1
  %1854 = load i8, i8* %type3611, align 1
  %conv3612 = zext i8 %1854 to i32
  %cmp3613 = icmp eq i32 %conv3612, 30
  br i1 %cmp3613, label %if.then3615, label %if.end3621

if.then3615:                                      ; preds = %lor.lhs.false3610, %if.end3599
  %1855 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  %1856 = load %struct.regnode*, %struct.regnode** %first.addr, align 8
  %sub.ptr.lhs.cast3616 = ptrtoint %struct.regnode* %1855 to i64
  %sub.ptr.rhs.cast3617 = ptrtoint %struct.regnode* %1856 to i64
  %sub.ptr.sub3618 = sub i64 %sub.ptr.lhs.cast3616, %sub.ptr.rhs.cast3617
  %sub.ptr.div3619 = sdiv exact i64 %sub.ptr.sub3618, 4
  %conv3620 = trunc i64 %sub.ptr.div3619 to i16
  %1857 = load %struct.regnode*, %struct.regnode** %first.addr, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %1857, i32 0, i32 2
  store i16 %conv3620, i16* %next_off, align 2
  br label %if.end3621

if.end3621:                                       ; preds = %if.then3615, %lor.lhs.false3610
  %1858 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %startstate3622 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1858, i32 0, i32 9
  store i32 1, i32* %startstate3622, align 4
  %1859 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap3623 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1859, i32 0, i32 5
  %1860 = load i8*, i8** %bitmap3623, align 8
  %tobool3624 = icmp ne i8* %1860, null
  br i1 %tobool3624, label %land.lhs.true3625, label %if.end3877

land.lhs.true3625:                                ; preds = %if.end3621
  %1861 = load %struct.hv*, %struct.hv** %widecharmap, align 8
  %tobool3626 = icmp ne %struct.hv* %1861, null
  br i1 %tobool3626, label %if.end3877, label %land.lhs.true3627

land.lhs.true3627:                                ; preds = %land.lhs.true3625
  %1862 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump3628 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1862, i32 0, i32 6
  %1863 = load i16*, i16** %jump3628, align 8
  %tobool3629 = icmp ne i16* %1863, null
  br i1 %tobool3629, label %if.end3877, label %if.then3630

if.then3630:                                      ; preds = %land.lhs.true3627
  store i32 1, i32* %state3631, align 4
  br label %for.cond3632

for.cond3632:                                     ; preds = %for.inc3835, %if.then3630
  %1864 = load i32, i32* %state3631, align 4
  %1865 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %statecount3633 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1865, i32 0, i32 13
  %1866 = load i32, i32* %statecount3633, align 4
  %sub3634 = sub i32 %1866, 1
  %cmp3635 = icmp ult i32 %1864, %sub3634
  br i1 %cmp3635, label %for.body3637, label %for.end3837

for.body3637:                                     ; preds = %for.cond3632
  store i32 0, i32* %ofs, align 4
  store i32 -1, i32* %idx3638, align 4
  store i32 0, i32* %count, align 4
  %1867 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3640 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1867, i32 0, i32 3
  %1868 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3640, align 8
  %1869 = load i32, i32* %state3631, align 4
  %idxprom3641 = zext i32 %1869 to i64
  %arrayidx3642 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1868, i64 %idxprom3641
  %trans3643 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3642, i32 0, i32 1
  %base3644 = bitcast %union.anon.21* %trans3643 to i32*
  %1870 = load i32, i32* %base3644, align 8
  store i32 %1870, i32* %base3639, align 4
  %1871 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3645 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1871, i32 0, i32 3
  %1872 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3645, align 8
  %1873 = load i32, i32* %state3631, align 4
  %idxprom3646 = zext i32 %1873 to i64
  %arrayidx3647 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %1872, i64 %idxprom3646
  %wordnum3648 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3647, i32 0, i32 0
  %1874 = load i16, i16* %wordnum3648, align 8
  %tobool3649 = icmp ne i16 %1874, 0
  br i1 %tobool3649, label %if.then3650, label %if.end3651

if.then3650:                                      ; preds = %for.body3637
  store i32 1, i32* %count, align 4
  br label %if.end3651

if.end3651:                                       ; preds = %if.then3650, %for.body3637
  store i32 0, i32* %ofs, align 4
  br label %for.cond3652

for.cond3652:                                     ; preds = %for.inc3794, %if.end3651
  %1875 = load i32, i32* %ofs, align 4
  %1876 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3653 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1876, i32 0, i32 8
  %1877 = load i16, i16* %uniquecharcount3653, align 8
  %conv3654 = zext i16 %1877 to i32
  %cmp3655 = icmp ult i32 %1875, %conv3654
  br i1 %cmp3655, label %for.body3657, label %for.end3796

for.body3657:                                     ; preds = %for.cond3652
  %1878 = load i32, i32* %base3639, align 4
  %1879 = load i32, i32* %ofs, align 4
  %add3658 = add i32 %1878, %1879
  %1880 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3659 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1880, i32 0, i32 8
  %1881 = load i16, i16* %uniquecharcount3659, align 8
  %conv3660 = zext i16 %1881 to i32
  %cmp3661 = icmp uge i32 %add3658, %conv3660
  br i1 %cmp3661, label %land.lhs.true3663, label %if.end3793

land.lhs.true3663:                                ; preds = %for.body3657
  %1882 = load i32, i32* %base3639, align 4
  %1883 = load i32, i32* %ofs, align 4
  %add3664 = add i32 %1882, %1883
  %1884 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3665 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1884, i32 0, i32 8
  %1885 = load i16, i16* %uniquecharcount3665, align 8
  %conv3666 = zext i16 %1885 to i32
  %sub3667 = sub i32 %add3664, %conv3666
  %1886 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %lasttrans3668 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1886, i32 0, i32 1
  %1887 = load i32, i32* %lasttrans3668, align 4
  %cmp3669 = icmp ult i32 %sub3667, %1887
  br i1 %cmp3669, label %land.lhs.true3671, label %if.end3793

land.lhs.true3671:                                ; preds = %land.lhs.true3663
  %1888 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %trans3672 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1888, i32 0, i32 4
  %1889 = load %struct._reg_trie_trans*, %struct._reg_trie_trans** %trans3672, align 8
  %1890 = load i32, i32* %base3639, align 4
  %1891 = load i32, i32* %ofs, align 4
  %add3673 = add i32 %1890, %1891
  %1892 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %uniquecharcount3674 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1892, i32 0, i32 8
  %1893 = load i16, i16* %uniquecharcount3674, align 8
  %conv3675 = zext i16 %1893 to i32
  %sub3676 = sub i32 %add3673, %conv3675
  %idxprom3677 = zext i32 %sub3676 to i64
  %arrayidx3678 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %1889, i64 %idxprom3677
  %check3679 = getelementptr inbounds %struct._reg_trie_trans, %struct._reg_trie_trans* %arrayidx3678, i32 0, i32 1
  %1894 = load i32, i32* %check3679, align 4
  %1895 = load i32, i32* %state3631, align 4
  %cmp3680 = icmp eq i32 %1894, %1895
  br i1 %cmp3680, label %if.then3682, label %if.end3793

if.then3682:                                      ; preds = %land.lhs.true3671
  %1896 = load i32, i32* %count, align 4
  %inc3683 = add i32 %1896, 1
  store i32 %inc3683, i32* %count, align 4
  %cmp3684 = icmp ugt i32 %inc3683, 1
  br i1 %cmp3684, label %if.then3686, label %if.end3792

if.then3686:                                      ; preds = %if.then3682
  %1897 = load %struct.av*, %struct.av** %revcharmap, align 8
  %1898 = load i32, i32* %ofs, align 4
  %conv3687 = zext i32 %1898 to i64
  %call3688 = call %struct.sv** @Perl_av_fetch(%struct.av* %1897, i64 %conv3687, i32 0)
  store %struct.sv** %call3688, %struct.sv*** %tmp, align 8
  %1899 = load %struct.sv**, %struct.sv*** %tmp, align 8
  %1900 = load %struct.sv*, %struct.sv** %1899, align 8
  %sv_flags3689 = getelementptr inbounds %struct.sv, %struct.sv* %1900, i32 0, i32 2
  %1901 = load i32, i32* %sv_flags3689, align 4
  %and3690 = and i32 %1901, 2098176
  %cmp3691 = icmp eq i32 %and3690, 1024
  br i1 %cmp3691, label %cond.true3693, label %cond.false3697

cond.true3693:                                    ; preds = %if.then3686
  %1902 = load %struct.sv**, %struct.sv*** %tmp, align 8
  %1903 = load %struct.sv*, %struct.sv** %1902, align 8
  %sv_u3694 = getelementptr inbounds %struct.sv, %struct.sv* %1903, i32 0, i32 3
  %svu_pv3695 = bitcast %union.anon* %sv_u3694 to i8**
  %1904 = load i8*, i8** %svu_pv3695, align 8
  %add.ptr3696 = getelementptr inbounds i8, i8* %1904, i64 0
  br label %cond.end3699

cond.false3697:                                   ; preds = %if.then3686
  %1905 = load %struct.sv**, %struct.sv*** %tmp, align 8
  %1906 = load %struct.sv*, %struct.sv** %1905, align 8
  %call3698 = call i8* @Perl_sv_2pv_flags(%struct.sv* %1906, i64* null, i32 34)
  br label %cond.end3699

cond.end3699:                                     ; preds = %cond.false3697, %cond.true3693
  %cond3700 = phi i8* [ %add.ptr3696, %cond.true3693 ], [ %call3698, %cond.false3697 ]
  store i8* %cond3700, i8** %ch, align 8
  %1907 = load i32, i32* %state3631, align 4
  %cmp3701 = icmp eq i32 %1907, 1
  br i1 %cmp3701, label %if.then3703, label %if.end3704

if.then3703:                                      ; preds = %cond.end3699
  br label %for.end3796

if.end3704:                                       ; preds = %cond.end3699
  %1908 = load i32, i32* %count, align 4
  %cmp3705 = icmp eq i32 %1908, 2
  br i1 %cmp3705, label %if.then3707, label %if.end3760

if.then3707:                                      ; preds = %if.end3704
  %1909 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap3708 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1909, i32 0, i32 5
  %1910 = load i8*, i8** %bitmap3708, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1910, i8 0, i64 32, i1 false)
  %1911 = load i32, i32* %idx3638, align 4
  %cmp3709 = icmp sge i32 %1911, 0
  br i1 %cmp3709, label %if.then3711, label %if.end3759

if.then3711:                                      ; preds = %if.then3707
  %1912 = load %struct.av*, %struct.av** %revcharmap, align 8
  %1913 = load i32, i32* %idx3638, align 4
  %conv3713 = sext i32 %1913 to i64
  %call3714 = call %struct.sv** @Perl_av_fetch(%struct.av* %1912, i64 %conv3713, i32 0)
  store %struct.sv** %call3714, %struct.sv*** %tmp3712, align 8
  %1914 = load %struct.sv**, %struct.sv*** %tmp3712, align 8
  %1915 = load %struct.sv*, %struct.sv** %1914, align 8
  %sv_flags3716 = getelementptr inbounds %struct.sv, %struct.sv* %1915, i32 0, i32 2
  %1916 = load i32, i32* %sv_flags3716, align 4
  %and3717 = and i32 %1916, 2098176
  %cmp3718 = icmp eq i32 %and3717, 1024
  br i1 %cmp3718, label %cond.true3720, label %cond.false3724

cond.true3720:                                    ; preds = %if.then3711
  %1917 = load %struct.sv**, %struct.sv*** %tmp3712, align 8
  %1918 = load %struct.sv*, %struct.sv** %1917, align 8
  %sv_u3721 = getelementptr inbounds %struct.sv, %struct.sv* %1918, i32 0, i32 3
  %svu_pv3722 = bitcast %union.anon* %sv_u3721 to i8**
  %1919 = load i8*, i8** %svu_pv3722, align 8
  %add.ptr3723 = getelementptr inbounds i8, i8* %1919, i64 0
  br label %cond.end3726

cond.false3724:                                   ; preds = %if.then3711
  %1920 = load %struct.sv**, %struct.sv*** %tmp3712, align 8
  %1921 = load %struct.sv*, %struct.sv** %1920, align 8
  %call3725 = call i8* @Perl_sv_2pv_flags(%struct.sv* %1921, i64* null, i32 34)
  br label %cond.end3726

cond.end3726:                                     ; preds = %cond.false3724, %cond.true3720
  %cond3727 = phi i8* [ %add.ptr3723, %cond.true3720 ], [ %call3725, %cond.false3724 ]
  store i8* %cond3727, i8** %ch3715, align 8
  %1922 = load i8*, i8** %ch3715, align 8
  %1923 = load i8, i8* %1922, align 1
  %conv3728 = zext i8 %1923 to i32
  %and3729 = and i32 %conv3728, 7
  %shl3730 = shl i32 1, %and3729
  %1924 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap3731 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1924, i32 0, i32 5
  %1925 = load i8*, i8** %bitmap3731, align 8
  %1926 = load i8*, i8** %ch3715, align 8
  %1927 = load i8, i8* %1926, align 1
  %conv3732 = zext i8 %1927 to i32
  %shr3733 = ashr i32 %conv3732, 3
  %and3734 = and i32 %shr3733, 31
  %idxprom3735 = sext i32 %and3734 to i64
  %arrayidx3736 = getelementptr inbounds i8, i8* %1925, i64 %idxprom3735
  %1928 = load i8, i8* %arrayidx3736, align 1
  %conv3737 = sext i8 %1928 to i32
  %or3738 = or i32 %conv3737, %shl3730
  %conv3739 = trunc i32 %or3738 to i8
  store i8 %conv3739, i8* %arrayidx3736, align 1
  %1929 = load i8*, i8** %folder, align 8
  %tobool3740 = icmp ne i8* %1929, null
  br i1 %tobool3740, label %if.then3741, label %if.end3758

if.then3741:                                      ; preds = %cond.end3726
  %1930 = load i8*, i8** %folder, align 8
  %1931 = load i8*, i8** %ch3715, align 8
  %1932 = load i8, i8* %1931, align 1
  %idxprom3742 = zext i8 %1932 to i64
  %arrayidx3743 = getelementptr inbounds i8, i8* %1930, i64 %idxprom3742
  %1933 = load i8, i8* %arrayidx3743, align 1
  %conv3744 = zext i8 %1933 to i32
  %and3745 = and i32 %conv3744, 7
  %shl3746 = shl i32 1, %and3745
  %1934 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap3747 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1934, i32 0, i32 5
  %1935 = load i8*, i8** %bitmap3747, align 8
  %1936 = load i8*, i8** %folder, align 8
  %1937 = load i8*, i8** %ch3715, align 8
  %1938 = load i8, i8* %1937, align 1
  %idxprom3748 = zext i8 %1938 to i64
  %arrayidx3749 = getelementptr inbounds i8, i8* %1936, i64 %idxprom3748
  %1939 = load i8, i8* %arrayidx3749, align 1
  %conv3750 = zext i8 %1939 to i32
  %shr3751 = ashr i32 %conv3750, 3
  %and3752 = and i32 %shr3751, 31
  %idxprom3753 = sext i32 %and3752 to i64
  %arrayidx3754 = getelementptr inbounds i8, i8* %1935, i64 %idxprom3753
  %1940 = load i8, i8* %arrayidx3754, align 1
  %conv3755 = sext i8 %1940 to i32
  %or3756 = or i32 %conv3755, %shl3746
  %conv3757 = trunc i32 %or3756 to i8
  store i8 %conv3757, i8* %arrayidx3754, align 1
  br label %if.end3758

if.end3758:                                       ; preds = %if.then3741, %cond.end3726
  br label %if.end3759

if.end3759:                                       ; preds = %if.end3758, %if.then3707
  br label %if.end3760

if.end3760:                                       ; preds = %if.end3759, %if.end3704
  %1941 = load i8*, i8** %ch, align 8
  %1942 = load i8, i8* %1941, align 1
  %conv3761 = zext i8 %1942 to i32
  %and3762 = and i32 %conv3761, 7
  %shl3763 = shl i32 1, %and3762
  %1943 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap3764 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1943, i32 0, i32 5
  %1944 = load i8*, i8** %bitmap3764, align 8
  %1945 = load i8*, i8** %ch, align 8
  %1946 = load i8, i8* %1945, align 1
  %conv3765 = zext i8 %1946 to i32
  %shr3766 = ashr i32 %conv3765, 3
  %and3767 = and i32 %shr3766, 31
  %idxprom3768 = sext i32 %and3767 to i64
  %arrayidx3769 = getelementptr inbounds i8, i8* %1944, i64 %idxprom3768
  %1947 = load i8, i8* %arrayidx3769, align 1
  %conv3770 = sext i8 %1947 to i32
  %or3771 = or i32 %conv3770, %shl3763
  %conv3772 = trunc i32 %or3771 to i8
  store i8 %conv3772, i8* %arrayidx3769, align 1
  %1948 = load i8*, i8** %folder, align 8
  %tobool3773 = icmp ne i8* %1948, null
  br i1 %tobool3773, label %if.then3774, label %if.end3791

if.then3774:                                      ; preds = %if.end3760
  %1949 = load i8*, i8** %folder, align 8
  %1950 = load i8*, i8** %ch, align 8
  %1951 = load i8, i8* %1950, align 1
  %idxprom3775 = zext i8 %1951 to i64
  %arrayidx3776 = getelementptr inbounds i8, i8* %1949, i64 %idxprom3775
  %1952 = load i8, i8* %arrayidx3776, align 1
  %conv3777 = zext i8 %1952 to i32
  %and3778 = and i32 %conv3777, 7
  %shl3779 = shl i32 1, %and3778
  %1953 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap3780 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1953, i32 0, i32 5
  %1954 = load i8*, i8** %bitmap3780, align 8
  %1955 = load i8*, i8** %folder, align 8
  %1956 = load i8*, i8** %ch, align 8
  %1957 = load i8, i8* %1956, align 1
  %idxprom3781 = zext i8 %1957 to i64
  %arrayidx3782 = getelementptr inbounds i8, i8* %1955, i64 %idxprom3781
  %1958 = load i8, i8* %arrayidx3782, align 1
  %conv3783 = zext i8 %1958 to i32
  %shr3784 = ashr i32 %conv3783, 3
  %and3785 = and i32 %shr3784, 31
  %idxprom3786 = sext i32 %and3785 to i64
  %arrayidx3787 = getelementptr inbounds i8, i8* %1954, i64 %idxprom3786
  %1959 = load i8, i8* %arrayidx3787, align 1
  %conv3788 = sext i8 %1959 to i32
  %or3789 = or i32 %conv3788, %shl3779
  %conv3790 = trunc i32 %or3789 to i8
  store i8 %conv3790, i8* %arrayidx3787, align 1
  br label %if.end3791

if.end3791:                                       ; preds = %if.then3774, %if.end3760
  br label %if.end3792

if.end3792:                                       ; preds = %if.end3791, %if.then3682
  %1960 = load i32, i32* %ofs, align 4
  store i32 %1960, i32* %idx3638, align 4
  br label %if.end3793

if.end3793:                                       ; preds = %if.end3792, %land.lhs.true3671, %land.lhs.true3663, %for.body3657
  br label %for.inc3794

for.inc3794:                                      ; preds = %if.end3793
  %1961 = load i32, i32* %ofs, align 4
  %inc3795 = add i32 %1961, 1
  store i32 %inc3795, i32* %ofs, align 4
  br label %for.cond3652

for.end3796:                                      ; preds = %if.then3703, %for.cond3652
  %1962 = load i32, i32* %count, align 4
  %cmp3797 = icmp eq i32 %1962, 1
  br i1 %cmp3797, label %if.then3799, label %if.else3833

if.then3799:                                      ; preds = %for.end3796
  %1963 = load %struct.av*, %struct.av** %revcharmap, align 8
  %1964 = load i32, i32* %idx3638, align 4
  %conv3801 = sext i32 %1964 to i64
  %call3802 = call %struct.sv** @Perl_av_fetch(%struct.av* %1963, i64 %conv3801, i32 0)
  store %struct.sv** %call3802, %struct.sv*** %tmp3800, align 8
  %1965 = load %struct.sv**, %struct.sv*** %tmp3800, align 8
  %1966 = load %struct.sv*, %struct.sv** %1965, align 8
  %sv_flags3805 = getelementptr inbounds %struct.sv, %struct.sv* %1966, i32 0, i32 2
  %1967 = load i32, i32* %sv_flags3805, align 4
  %and3806 = and i32 %1967, 2098176
  %cmp3807 = icmp eq i32 %and3806, 1024
  br i1 %cmp3807, label %cond.true3809, label %cond.false3814

cond.true3809:                                    ; preds = %if.then3799
  %1968 = load %struct.sv**, %struct.sv*** %tmp3800, align 8
  %1969 = load %struct.sv*, %struct.sv** %1968, align 8
  %sv_any3810 = getelementptr inbounds %struct.sv, %struct.sv* %1969, i32 0, i32 0
  %1970 = load i8*, i8** %sv_any3810, align 8
  %1971 = bitcast i8* %1970 to %struct.xpv*
  %xpv_cur3811 = getelementptr inbounds %struct.xpv, %struct.xpv* %1971, i32 0, i32 2
  %1972 = load i64, i64* %xpv_cur3811, align 8
  store i64 %1972, i64* %len3803, align 8
  %1973 = load %struct.sv**, %struct.sv*** %tmp3800, align 8
  %1974 = load %struct.sv*, %struct.sv** %1973, align 8
  %sv_u3812 = getelementptr inbounds %struct.sv, %struct.sv* %1974, i32 0, i32 3
  %svu_pv3813 = bitcast %union.anon* %sv_u3812 to i8**
  %1975 = load i8*, i8** %svu_pv3813, align 8
  br label %cond.end3816

cond.false3814:                                   ; preds = %if.then3799
  %1976 = load %struct.sv**, %struct.sv*** %tmp3800, align 8
  %1977 = load %struct.sv*, %struct.sv** %1976, align 8
  %call3815 = call i8* @Perl_sv_2pv_flags(%struct.sv* %1977, i64* %len3803, i32 2)
  br label %cond.end3816

cond.end3816:                                     ; preds = %cond.false3814, %cond.true3809
  %cond3817 = phi i8* [ %1975, %cond.true3809 ], [ %call3815, %cond.false3814 ]
  store i8* %cond3817, i8** %ch3804, align 8
  %1978 = load i32, i32* %state3631, align 4
  %cmp3818 = icmp eq i32 %1978, 1
  br i1 %cmp3818, label %if.then3820, label %if.end3825

if.then3820:                                      ; preds = %cond.end3816
  %1979 = load i8, i8* %nodetype, align 1
  %1980 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %type3821 = getelementptr inbounds %struct.regnode, %struct.regnode* %1980, i32 0, i32 1
  store i8 %1979, i8* %type3821, align 1
  %1981 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %1982 = bitcast %struct.regnode* %1981 to %struct.regnode_string*
  %string3822 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1982, i32 0, i32 3
  %arraydecay3823 = getelementptr inbounds [1 x i8], [1 x i8]* %string3822, i64 0, i64 0
  store i8* %arraydecay3823, i8** %str, align 8
  %1983 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %1984 = bitcast %struct.regnode* %1983 to %struct.regnode_string*
  %str_len3824 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1984, i32 0, i32 0
  store i8 0, i8* %str_len3824, align 2
  br label %if.end3825

if.end3825:                                       ; preds = %if.then3820, %cond.end3816
  %1985 = load i64, i64* %len3803, align 8
  %1986 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %1987 = bitcast %struct.regnode* %1986 to %struct.regnode_string*
  %str_len3826 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1987, i32 0, i32 0
  %1988 = load i8, i8* %str_len3826, align 2
  %conv3827 = zext i8 %1988 to i64
  %add3828 = add i64 %conv3827, %1985
  %conv3829 = trunc i64 %add3828 to i8
  store i8 %conv3829, i8* %str_len3826, align 2
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end3825
  %1989 = load i64, i64* %len3803, align 8
  %dec3830 = add i64 %1989, -1
  store i64 %dec3830, i64* %len3803, align 8
  %tobool3831 = icmp ne i64 %1989, 0
  br i1 %tobool3831, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1990 = load i8*, i8** %ch3804, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %1990, i32 1
  store i8* %incdec.ptr, i8** %ch3804, align 8
  %1991 = load i8, i8* %1990, align 1
  %1992 = load i8*, i8** %str, align 8
  %incdec.ptr3832 = getelementptr inbounds i8, i8* %1992, i32 1
  store i8* %incdec.ptr3832, i8** %str, align 8
  store i8 %1991, i8* %1992, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end3834

if.else3833:                                      ; preds = %for.end3796
  br label %for.end3837

if.end3834:                                       ; preds = %while.end
  br label %for.inc3835

for.inc3835:                                      ; preds = %if.end3834
  %1993 = load i32, i32* %state3631, align 4
  %inc3836 = add i32 %1993, 1
  store i32 %inc3836, i32* %state3631, align 4
  br label %for.cond3632

for.end3837:                                      ; preds = %if.else3833, %for.cond3632
  %1994 = load i32, i32* %state3631, align 4
  %sub3838 = sub i32 %1994, 1
  %1995 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %prefixlen = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %1995, i32 0, i32 12
  store i32 %sub3838, i32* %prefixlen, align 8
  %1996 = load i8*, i8** %str, align 8
  %tobool3839 = icmp ne i8* %1996, null
  br i1 %tobool3839, label %if.then3840, label %if.end3876

if.then3840:                                      ; preds = %for.end3837
  %1997 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %1998 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %1999 = bitcast %struct.regnode* %1998 to %struct.regnode_string*
  %str_len3841 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1999, i32 0, i32 0
  %2000 = load i8, i8* %str_len3841, align 2
  %conv3842 = zext i8 %2000 to i64
  %add3843 = add i64 %conv3842, 4
  %sub3844 = sub i64 %add3843, 1
  %div3845 = udiv i64 %sub3844, 4
  %add3846 = add i64 %div3845, 1
  %add.ptr3847 = getelementptr inbounds %struct.regnode, %struct.regnode* %1997, i64 %add3846
  store %struct.regnode* %add.ptr3847, %struct.regnode** %n, align 8
  %2001 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %2002 = bitcast %struct.regnode* %2001 to %struct.regnode_string*
  %str_len3848 = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %2002, i32 0, i32 0
  %2003 = load i8, i8* %str_len3848, align 2
  %conv3849 = zext i8 %2003 to i64
  %add3850 = add i64 %conv3849, 4
  %sub3851 = sub i64 %add3850, 1
  %div3852 = udiv i64 %sub3851, 4
  %add3853 = add i64 %div3852, 1
  %conv3854 = trunc i64 %add3853 to i16
  %2004 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %next_off3855 = getelementptr inbounds %struct.regnode, %struct.regnode* %2004, i32 0, i32 2
  store i16 %conv3854, i16* %next_off3855, align 2
  %2005 = load i32, i32* %state3631, align 4
  %2006 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %startstate3856 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2006, i32 0, i32 9
  store i32 %2005, i32* %startstate3856, align 4
  %2007 = load i32, i32* %state3631, align 4
  %sub3857 = sub i32 %2007, 1
  %conv3858 = zext i32 %sub3857 to i64
  %2008 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %minlen3859 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2008, i32 0, i32 10
  %2009 = load i64, i64* %minlen3859, align 8
  %sub3860 = sub i64 %2009, %conv3858
  store i64 %sub3860, i64* %minlen3859, align 8
  %2010 = load i32, i32* %state3631, align 4
  %sub3861 = sub i32 %2010, 1
  %conv3862 = zext i32 %sub3861 to i64
  %2011 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %maxlen3863 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2011, i32 0, i32 11
  %2012 = load i64, i64* %maxlen3863, align 8
  %sub3864 = sub i64 %2012, %conv3862
  store i64 %sub3864, i64* %maxlen3863, align 8
  %2013 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %maxlen3865 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2013, i32 0, i32 11
  %2014 = load i64, i64* %maxlen3865, align 8
  %tobool3866 = icmp ne i64 %2014, 0
  br i1 %tobool3866, label %if.then3867, label %if.else3868

if.then3867:                                      ; preds = %if.then3840
  %2015 = load %struct.regnode*, %struct.regnode** %n, align 8
  store %struct.regnode* %2015, %struct.regnode** %convert, align 8
  br label %if.end3875

if.else3868:                                      ; preds = %if.then3840
  %2016 = load %struct.regnode*, %struct.regnode** %tail.addr, align 8
  %2017 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %sub.ptr.lhs.cast3869 = ptrtoint %struct.regnode* %2016 to i64
  %sub.ptr.rhs.cast3870 = ptrtoint %struct.regnode* %2017 to i64
  %sub.ptr.sub3871 = sub i64 %sub.ptr.lhs.cast3869, %sub.ptr.rhs.cast3870
  %sub.ptr.div3872 = sdiv exact i64 %sub.ptr.sub3871, 4
  %conv3873 = trunc i64 %sub.ptr.div3872 to i16
  %2018 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %next_off3874 = getelementptr inbounds %struct.regnode, %struct.regnode* %2018, i32 0, i32 2
  store i16 %conv3873, i16* %next_off3874, align 2
  br label %if.end3875

if.end3875:                                       ; preds = %if.else3868, %if.then3867
  br label %if.end3876

if.end3876:                                       ; preds = %if.end3875, %for.end3837
  br label %if.end3877

if.end3877:                                       ; preds = %if.end3876, %land.lhs.true3627, %land.lhs.true3625, %if.end3621
  %2019 = load %struct.regnode*, %struct.regnode** %jumper, align 8
  %tobool3878 = icmp ne %struct.regnode* %2019, null
  br i1 %tobool3878, label %if.end3880, label %if.then3879

if.then3879:                                      ; preds = %if.end3877
  %2020 = load %struct.regnode*, %struct.regnode** %last.addr, align 8
  store %struct.regnode* %2020, %struct.regnode** %jumper, align 8
  br label %if.end3880

if.end3880:                                       ; preds = %if.then3879, %if.end3877
  %2021 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %maxlen3881 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2021, i32 0, i32 11
  %2022 = load i64, i64* %maxlen3881, align 8
  %tobool3882 = icmp ne i64 %2022, 0
  br i1 %tobool3882, label %if.then3883, label %if.end3927

if.then3883:                                      ; preds = %if.end3880
  %2023 = load %struct.regnode*, %struct.regnode** %tail.addr, align 8
  %2024 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %sub.ptr.lhs.cast3884 = ptrtoint %struct.regnode* %2023 to i64
  %sub.ptr.rhs.cast3885 = ptrtoint %struct.regnode* %2024 to i64
  %sub.ptr.sub3886 = sub i64 %sub.ptr.lhs.cast3884, %sub.ptr.rhs.cast3885
  %sub.ptr.div3887 = sdiv exact i64 %sub.ptr.sub3886, 4
  %conv3888 = trunc i64 %sub.ptr.div3887 to i16
  %2025 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %next_off3889 = getelementptr inbounds %struct.regnode, %struct.regnode* %2025, i32 0, i32 2
  store i16 %conv3888, i16* %next_off3889, align 2
  %2026 = load i32, i32* %data_slot, align 4
  %2027 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %2028 = bitcast %struct.regnode* %2027 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %2028, i32 0, i32 3
  store i32 %2026, i32* %arg1, align 4
  %2029 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump3890 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2029, i32 0, i32 6
  %2030 = load i16*, i16** %jump3890, align 8
  %tobool3891 = icmp ne i16* %2030, null
  br i1 %tobool3891, label %if.then3892, label %if.end3900

if.then3892:                                      ; preds = %if.then3883
  %2031 = load %struct.regnode*, %struct.regnode** %nextbranch, align 8
  %2032 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %sub.ptr.lhs.cast3893 = ptrtoint %struct.regnode* %2031 to i64
  %sub.ptr.rhs.cast3894 = ptrtoint %struct.regnode* %2032 to i64
  %sub.ptr.sub3895 = sub i64 %sub.ptr.lhs.cast3893, %sub.ptr.rhs.cast3894
  %sub.ptr.div3896 = sdiv exact i64 %sub.ptr.sub3895, 4
  %conv3897 = trunc i64 %sub.ptr.div3896 to i16
  %2033 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump3898 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2033, i32 0, i32 6
  %2034 = load i16*, i16** %jump3898, align 8
  %arrayidx3899 = getelementptr inbounds i16, i16* %2034, i64 0
  store i16 %conv3897, i16* %arrayidx3899, align 2
  br label %if.end3900

if.end3900:                                       ; preds = %if.then3892, %if.then3883
  %2035 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3901 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2035, i32 0, i32 3
  %2036 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3901, align 8
  %2037 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %startstate3902 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2037, i32 0, i32 9
  %2038 = load i32, i32* %startstate3902, align 4
  %idxprom3903 = zext i32 %2038 to i64
  %arrayidx3904 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %2036, i64 %idxprom3903
  %wordnum3905 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3904, i32 0, i32 0
  %2039 = load i16, i16* %wordnum3905, align 8
  %tobool3906 = icmp ne i16 %2039, 0
  br i1 %tobool3906, label %if.else3923, label %land.lhs.true3907

land.lhs.true3907:                                ; preds = %if.end3900
  %2040 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap3908 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2040, i32 0, i32 5
  %2041 = load i8*, i8** %bitmap3908, align 8
  %tobool3909 = icmp ne i8* %2041, null
  br i1 %tobool3909, label %land.lhs.true3910, label %if.else3923

land.lhs.true3910:                                ; preds = %land.lhs.true3907
  %2042 = load %struct.regnode*, %struct.regnode** %jumper, align 8
  %2043 = bitcast %struct.regnode* %2042 to i8*
  %2044 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %2045 = bitcast %struct.regnode* %2044 to i8*
  %sub.ptr.lhs.cast3911 = ptrtoint i8* %2043 to i64
  %sub.ptr.rhs.cast3912 = ptrtoint i8* %2045 to i64
  %sub.ptr.sub3913 = sub i64 %sub.ptr.lhs.cast3911, %sub.ptr.rhs.cast3912
  %cmp3914 = icmp sge i64 %sub.ptr.sub3913, 40
  br i1 %cmp3914, label %if.then3916, label %if.else3923

if.then3916:                                      ; preds = %land.lhs.true3910
  %2046 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %type3917 = getelementptr inbounds %struct.regnode, %struct.regnode* %2046, i32 0, i32 1
  store i8 73, i8* %type3917, align 1
  %2047 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %2048 = bitcast %struct.regnode* %2047 to %struct.regnode_charclass*
  %bitmap3918 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %2048, i32 0, i32 4
  %arraydecay3919 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap3918, i64 0, i64 0
  %2049 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap3920 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2049, i32 0, i32 5
  %2050 = load i8*, i8** %bitmap3920, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %arraydecay3919, i8* align 1 %2050, i64 32, i1 false)
  %2051 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap3921 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2051, i32 0, i32 5
  %2052 = load i8*, i8** %bitmap3921, align 8
  call void @free(i8* %2052) #5
  %2053 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %bitmap3922 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2053, i32 0, i32 5
  store i8* null, i8** %bitmap3922, align 8
  br label %if.end3925

if.else3923:                                      ; preds = %land.lhs.true3910, %land.lhs.true3907, %if.end3900
  %2054 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %type3924 = getelementptr inbounds %struct.regnode, %struct.regnode* %2054, i32 0, i32 1
  store i8 72, i8* %type3924, align 1
  br label %if.end3925

if.end3925:                                       ; preds = %if.else3923, %if.then3916
  %2055 = load i8, i8* %nodetype, align 1
  %2056 = load %struct.regnode*, %struct.regnode** %convert, align 8
  %flags3926 = getelementptr inbounds %struct.regnode, %struct.regnode* %2056, i32 0, i32 0
  store i8 %2055, i8* %flags3926, align 2
  br label %if.end3927

if.end3927:                                       ; preds = %if.end3925, %if.end3880
  store i16 1, i16* %word, align 2
  br label %for.cond3930

for.cond3930:                                     ; preds = %for.inc3967, %if.end3927
  %2057 = load i16, i16* %word, align 2
  %conv3931 = zext i16 %2057 to i32
  %2058 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordcount3932 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2058, i32 0, i32 14
  %2059 = load i32, i32* %wordcount3932, align 8
  %cmp3933 = icmp ule i32 %conv3931, %2059
  br i1 %cmp3933, label %for.body3935, label %for.end3969

for.body3935:                                     ; preds = %for.cond3930
  store i16 0, i16* %prev3929, align 2
  %2060 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo3936 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2060, i32 0, i32 7
  %2061 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo3936, align 8
  %2062 = load i16, i16* %word, align 2
  %idxprom3937 = zext i16 %2062 to i64
  %arrayidx3938 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %2061, i64 %idxprom3937
  %prev3939 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %arrayidx3938, i32 0, i32 0
  %2063 = load i16, i16* %prev3939, align 4
  %tobool3940 = icmp ne i16 %2063, 0
  br i1 %tobool3940, label %if.then3941, label %if.end3942

if.then3941:                                      ; preds = %for.body3935
  br label %for.inc3967

if.end3942:                                       ; preds = %for.body3935
  %2064 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo3943 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2064, i32 0, i32 7
  %2065 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo3943, align 8
  %2066 = load i16, i16* %word, align 2
  %idxprom3944 = zext i16 %2066 to i64
  %arrayidx3945 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %2065, i64 %idxprom3944
  %accept3946 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %arrayidx3945, i32 0, i32 2
  %2067 = load i32, i32* %accept3946, align 4
  store i32 %2067, i32* %state3928, align 4
  br label %while.cond3947

while.cond3947:                                   ; preds = %if.end3961, %if.end3942
  %2068 = load i32, i32* %state3928, align 4
  %tobool3948 = icmp ne i32 %2068, 0
  br i1 %tobool3948, label %while.body3949, label %while.end3962

while.body3949:                                   ; preds = %while.cond3947
  %2069 = load i32*, i32** %prev_states, align 8
  %2070 = load i32, i32* %state3928, align 4
  %idxprom3950 = zext i32 %2070 to i64
  %arrayidx3951 = getelementptr inbounds i32, i32* %2069, i64 %idxprom3950
  %2071 = load i32, i32* %arrayidx3951, align 4
  store i32 %2071, i32* %state3928, align 4
  %2072 = load i32, i32* %state3928, align 4
  %tobool3952 = icmp ne i32 %2072, 0
  br i1 %tobool3952, label %if.end3954, label %if.then3953

if.then3953:                                      ; preds = %while.body3949
  br label %while.end3962

if.end3954:                                       ; preds = %while.body3949
  %2073 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %states3955 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2073, i32 0, i32 3
  %2074 = load %struct._reg_trie_state*, %struct._reg_trie_state** %states3955, align 8
  %2075 = load i32, i32* %state3928, align 4
  %idxprom3956 = zext i32 %2075 to i64
  %arrayidx3957 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %2074, i64 %idxprom3956
  %wordnum3958 = getelementptr inbounds %struct._reg_trie_state, %struct._reg_trie_state* %arrayidx3957, i32 0, i32 0
  %2076 = load i16, i16* %wordnum3958, align 8
  store i16 %2076, i16* %prev3929, align 2
  %2077 = load i16, i16* %prev3929, align 2
  %tobool3959 = icmp ne i16 %2077, 0
  br i1 %tobool3959, label %if.then3960, label %if.end3961

if.then3960:                                      ; preds = %if.end3954
  br label %while.end3962

if.end3961:                                       ; preds = %if.end3954
  br label %while.cond3947

while.end3962:                                    ; preds = %if.then3960, %if.then3953, %while.cond3947
  %2078 = load i16, i16* %prev3929, align 2
  %2079 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %wordinfo3963 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2079, i32 0, i32 7
  %2080 = load %struct.reg_trie_wordinfo*, %struct.reg_trie_wordinfo** %wordinfo3963, align 8
  %2081 = load i16, i16* %word, align 2
  %idxprom3964 = zext i16 %2081 to i64
  %arrayidx3965 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %2080, i64 %idxprom3964
  %prev3966 = getelementptr inbounds %struct.reg_trie_wordinfo, %struct.reg_trie_wordinfo* %arrayidx3965, i32 0, i32 0
  store i16 %2078, i16* %prev3966, align 4
  br label %for.inc3967

for.inc3967:                                      ; preds = %while.end3962, %if.then3941
  %2082 = load i16, i16* %word, align 2
  %inc3968 = add i16 %2082, 1
  store i16 %inc3968, i16* %word, align 2
  br label %for.cond3930

for.end3969:                                      ; preds = %for.cond3930
  %2083 = load i32*, i32** %prev_states, align 8
  %2084 = bitcast i32* %2083 to i8*
  call void @Perl_safesysfree(i8* %2084)
  %2085 = load %struct.hv*, %struct.hv** %widecharmap, align 8
  %2086 = bitcast %struct.hv* %2085 to i8*
  %2087 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi3970 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2087, i32 0, i32 5
  %2088 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi3970, align 8
  %data3971 = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %2088, i32 0, i32 3
  %2089 = load %struct.reg_data*, %struct.reg_data** %data3971, align 8
  %data3972 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %2089, i32 0, i32 2
  %2090 = load i32, i32* %data_slot, align 4
  %add3973 = add i32 %2090, 1
  %idxprom3974 = zext i32 %add3973 to i64
  %arrayidx3975 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data3972, i64 0, i64 %idxprom3974
  store i8* %2086, i8** %arrayidx3975, align 8
  %2091 = load %struct.av*, %struct.av** %revcharmap, align 8
  %2092 = bitcast %struct.av* %2091 to i8*
  %2093 = bitcast i8* %2092 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %2093)
  %2094 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %jump3976 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2094, i32 0, i32 6
  %2095 = load i16*, i16** %jump3976, align 8
  %tobool3977 = icmp ne i16* %2095, null
  br i1 %tobool3977, label %cond.true3978, label %cond.false3979

cond.true3978:                                    ; preds = %for.end3969
  br label %cond.end3984

cond.false3979:                                   ; preds = %for.end3969
  %2096 = load %struct._reg_trie_data*, %struct._reg_trie_data** %trie, align 8
  %startstate3980 = getelementptr inbounds %struct._reg_trie_data, %struct._reg_trie_data* %2096, i32 0, i32 9
  %2097 = load i32, i32* %startstate3980, align 4
  %cmp3981 = icmp ugt i32 %2097, 1
  %2098 = zext i1 %cmp3981 to i64
  %cond3983 = select i1 %cmp3981, i32 4, i32 1
  br label %cond.end3984

cond.end3984:                                     ; preds = %cond.false3979, %cond.true3978
  %cond3985 = phi i32 [ 2, %cond.true3978 ], [ %cond3983, %cond.false3979 ]
  ret i32 %cond3985
}

declare dso_local void @Perl_save_destructor_x(void (i8*)*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_unwind_scan_frames(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %f = alloca %struct.scan_frame*, align 8
  %n = alloca %struct.scan_frame*, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  %1 = bitcast i8* %0 to %struct.scan_frame*
  store %struct.scan_frame* %1, %struct.scan_frame** %f, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %2 = load %struct.scan_frame*, %struct.scan_frame** %f, align 8
  %next_frame = getelementptr inbounds %struct.scan_frame, %struct.scan_frame* %2, i32 0, i32 7
  %3 = load %struct.scan_frame*, %struct.scan_frame** %next_frame, align 8
  store %struct.scan_frame* %3, %struct.scan_frame** %n, align 8
  %4 = load %struct.scan_frame*, %struct.scan_frame** %f, align 8
  %5 = bitcast %struct.scan_frame* %4 to i8*
  call void @Perl_safesysfree(i8* %5)
  %6 = load %struct.scan_frame*, %struct.scan_frame** %n, align 8
  store %struct.scan_frame* %6, %struct.scan_frame** %f, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %7 = load %struct.scan_frame*, %struct.scan_frame** %f, align 8
  %tobool = icmp ne %struct.scan_frame* %7, null
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret void
}

declare dso_local i64 @Perl_utf8n_to_uvchr(i8*, i64, i64*, i32) #1

declare dso_local zeroext i1 @Perl_ckwarn_d(i32) #1

declare dso_local i64 @Perl_utf8_length(i8*, i8*) #1

declare dso_local void @Perl_sv_catpvn_flags(%struct.sv*, i8*, i64, i32) #1

declare dso_local %struct.magic* @Perl_mg_find(%struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_ssc_cp_and(%struct.regnode_ssc* %ssc, i64 %cp) #0 {
entry:
  %ssc.addr = alloca %struct.regnode_ssc*, align 8
  %cp.addr = alloca i64, align 8
  %cp_list = alloca %struct.sv*, align 8
  store %struct.regnode_ssc* %ssc, %struct.regnode_ssc** %ssc.addr, align 8
  store i64 %cp, i64* %cp.addr, align 8
  %call = call %struct.sv* @Perl__new_invlist(i64 2)
  store %struct.sv* %call, %struct.sv** %cp_list, align 8
  %0 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %1 = load i64, i64* %cp.addr, align 8
  %call1 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %0, i64 %1)
  store %struct.sv* %call1, %struct.sv** %cp_list, align 8
  %2 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %3 = load %struct.sv*, %struct.sv** %cp_list, align 8
  call void @S_ssc_intersection(%struct.regnode_ssc* %2, %struct.sv* %3, i1 zeroext false)
  %4 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %5 = bitcast %struct.sv* %4 to i8*
  %6 = bitcast i8* %5 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %6)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_ssc_clear_locale(%struct.regnode_ssc* %ssc) #0 {
entry:
  %ssc.addr = alloca %struct.regnode_ssc*, align 8
  store %struct.regnode_ssc* %ssc, %struct.regnode_ssc** %ssc.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %1 = bitcast %struct.regnode_ssc* %0 to %struct.regnode_charclass_class*
  %classflags = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1, i32 0, i32 5
  store i32 0, i32* %classflags, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %flags = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %2, i32 0, i32 0
  %3 = load i8, i8* %flags, align 8
  %conv = zext i8 %3 to i32
  %and = and i32 %conv, -13
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %flags, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_ssc_add_range(%struct.regnode_ssc* %ssc, i64 %start, i64 %end) #0 {
entry:
  %ssc.addr = alloca %struct.regnode_ssc*, align 8
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  store %struct.regnode_ssc* %ssc, %struct.regnode_ssc** %ssc.addr, align 8
  store i64 %start, i64* %start.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  %0 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %0, i32 0, i32 6
  %1 = load %struct.sv*, %struct.sv** %invlist, align 8
  %2 = load i64, i64* %start.addr, align 8
  %3 = load i64, i64* %end.addr, align 8
  %call = call %struct.sv* @Perl__add_range_to_invlist(%struct.sv* %1, i64 %2, i64 %3)
  %4 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist1 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %4, i32 0, i32 6
  store %struct.sv* %call, %struct.sv** %invlist1, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S__make_exactf_invlist(%struct.RExC_state_t* %pRExC_state, %struct.regnode* %node) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %node.addr = alloca %struct.regnode*, align 8
  %s = alloca i8*, align 8
  %bytelen = alloca i64, align 8
  %uc = alloca i64, align 8
  %invlist = alloca %struct.sv*, align 8
  %folded = alloca [40 x i8], align 16
  %foldlen = alloca i64, align 8
  %e = alloca i8*, align 8
  %listp = alloca %struct.sv**, align 8
  %d = alloca i8*, align 8
  %i = alloca i32, align 4
  %len = alloca i64, align 8
  %list = alloca %struct.av*, align 8
  %k = alloca i64, align 8
  %c_p = alloca %struct.sv**, align 8
  %c = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode* %node, %struct.regnode** %node.addr, align 8
  %0 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %1 = bitcast %struct.regnode* %0 to %struct.regnode_string*
  %string = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1, i32 0, i32 3
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %string, i64 0, i64 0
  store i8* %arraydecay, i8** %s, align 8
  %2 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %3 = bitcast %struct.regnode* %2 to %struct.regnode_string*
  %str_len = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %3, i32 0, i32 0
  %4 = load i8, i8* %str_len, align 2
  %conv = zext i8 %4 to i64
  store i64 %conv, i64* %bytelen, align 8
  %call = call %struct.sv* @Perl__new_invlist(i64 4)
  store %struct.sv* %call, %struct.sv** %invlist, align 8
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 25
  %6 = load i32, i32* %utf8, align 8
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.else162, label %if.then

cond.false:                                       ; preds = %entry
  br i1 false, label %if.else162, label %if.then

if.then:                                          ; preds = %cond.false, %cond.true
  %7 = load i8*, i8** %s, align 8
  %8 = load i8, i8* %7, align 1
  %conv1 = zext i8 %8 to i64
  store i64 %conv1, i64* %uc, align 8
  %9 = load i8*, i8** %s, align 8
  %10 = load i64, i64* %bytelen, align 8
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %10
  %11 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp sgt i64 %sub.ptr.sub, 2
  br i1 %cmp, label %cond.true3, label %cond.false59

cond.true3:                                       ; preds = %if.then
  %12 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 0
  %13 = load i8, i8* %arrayidx, align 1
  %conv4 = zext i8 %13 to i32
  %and = and i32 %conv4, 223
  %cmp5 = icmp eq i32 %and, 70
  br i1 %cmp5, label %cond.true7, label %cond.false40

cond.true7:                                       ; preds = %cond.true3
  %14 = load i8*, i8** %s, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %14, i64 1
  %15 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %15 to i32
  %and10 = and i32 %conv9, 223
  %cmp11 = icmp eq i32 %and10, 70
  br i1 %cmp11, label %cond.true13, label %cond.false26

cond.true13:                                      ; preds = %cond.true7
  %16 = load i8*, i8** %s, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %16, i64 2
  %17 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %17 to i32
  %and16 = and i32 %conv15, 223
  %cmp17 = icmp eq i32 %and16, 73
  br i1 %cmp17, label %cond.true24, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.true13
  %18 = load i8*, i8** %s, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %18, i64 2
  %19 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %19 to i32
  %and21 = and i32 %conv20, 223
  %cmp22 = icmp eq i32 %and21, 76
  br i1 %cmp22, label %cond.true24, label %cond.false25

cond.true24:                                      ; preds = %lor.lhs.false, %cond.true13
  br i1 true, label %if.then113, label %if.else

cond.false25:                                     ; preds = %lor.lhs.false
  br i1 true, label %if.then113, label %if.else

cond.false26:                                     ; preds = %cond.true7
  %20 = load i8*, i8** %s, align 8
  %arrayidx27 = getelementptr inbounds i8, i8* %20, i64 1
  %21 = load i8, i8* %arrayidx27, align 1
  %conv28 = zext i8 %21 to i32
  %and29 = and i32 %conv28, 223
  %cmp30 = icmp eq i32 %and29, 73
  br i1 %cmp30, label %cond.true38, label %lor.lhs.false32

lor.lhs.false32:                                  ; preds = %cond.false26
  %22 = load i8*, i8** %s, align 8
  %arrayidx33 = getelementptr inbounds i8, i8* %22, i64 1
  %23 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %23 to i32
  %and35 = and i32 %conv34, 223
  %cmp36 = icmp eq i32 %and35, 76
  br i1 %cmp36, label %cond.true38, label %cond.false39

cond.true38:                                      ; preds = %lor.lhs.false32, %cond.false26
  br i1 true, label %if.then113, label %if.else

cond.false39:                                     ; preds = %lor.lhs.false32
  br i1 false, label %if.then113, label %if.else

cond.false40:                                     ; preds = %cond.true3
  %24 = load i8*, i8** %s, align 8
  %arrayidx41 = getelementptr inbounds i8, i8* %24, i64 0
  %25 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %25 to i32
  %and43 = and i32 %conv42, 223
  %cmp44 = icmp eq i32 %and43, 83
  br i1 %cmp44, label %land.lhs.true, label %cond.false58

land.lhs.true:                                    ; preds = %cond.false40
  %26 = load i8*, i8** %s, align 8
  %arrayidx46 = getelementptr inbounds i8, i8* %26, i64 1
  %27 = load i8, i8* %arrayidx46, align 1
  %conv47 = zext i8 %27 to i32
  %and48 = and i32 %conv47, 223
  %cmp49 = icmp eq i32 %and48, 83
  br i1 %cmp49, label %cond.true57, label %lor.lhs.false51

lor.lhs.false51:                                  ; preds = %land.lhs.true
  %28 = load i8*, i8** %s, align 8
  %arrayidx52 = getelementptr inbounds i8, i8* %28, i64 1
  %29 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %29 to i32
  %and54 = and i32 %conv53, 223
  %cmp55 = icmp eq i32 %and54, 84
  br i1 %cmp55, label %cond.true57, label %cond.false58

cond.true57:                                      ; preds = %lor.lhs.false51, %land.lhs.true
  br i1 true, label %if.then113, label %if.else

cond.false58:                                     ; preds = %lor.lhs.false51, %cond.false40
  br i1 false, label %if.then113, label %if.else

cond.false59:                                     ; preds = %if.then
  %30 = load i8*, i8** %s, align 8
  %31 = load i64, i64* %bytelen, align 8
  %add.ptr60 = getelementptr inbounds i8, i8* %30, i64 %31
  %32 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast61 = ptrtoint i8* %add.ptr60 to i64
  %sub.ptr.rhs.cast62 = ptrtoint i8* %32 to i64
  %sub.ptr.sub63 = sub i64 %sub.ptr.lhs.cast61, %sub.ptr.rhs.cast62
  %cmp64 = icmp sgt i64 %sub.ptr.sub63, 1
  br i1 %cmp64, label %cond.true66, label %cond.false112

cond.true66:                                      ; preds = %cond.false59
  %33 = load i8*, i8** %s, align 8
  %arrayidx67 = getelementptr inbounds i8, i8* %33, i64 0
  %34 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %34 to i32
  %and69 = and i32 %conv68, 223
  %cmp70 = icmp eq i32 %and69, 70
  br i1 %cmp70, label %cond.true72, label %cond.false92

cond.true72:                                      ; preds = %cond.true66
  %35 = load i8*, i8** %s, align 8
  %arrayidx73 = getelementptr inbounds i8, i8* %35, i64 1
  %36 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %36 to i32
  %and75 = and i32 %conv74, 223
  %cmp76 = icmp eq i32 %and75, 70
  br i1 %cmp76, label %cond.true90, label %lor.lhs.false78

lor.lhs.false78:                                  ; preds = %cond.true72
  %37 = load i8*, i8** %s, align 8
  %arrayidx79 = getelementptr inbounds i8, i8* %37, i64 1
  %38 = load i8, i8* %arrayidx79, align 1
  %conv80 = zext i8 %38 to i32
  %and81 = and i32 %conv80, 223
  %cmp82 = icmp eq i32 %and81, 73
  br i1 %cmp82, label %cond.true90, label %lor.lhs.false84

lor.lhs.false84:                                  ; preds = %lor.lhs.false78
  %39 = load i8*, i8** %s, align 8
  %arrayidx85 = getelementptr inbounds i8, i8* %39, i64 1
  %40 = load i8, i8* %arrayidx85, align 1
  %conv86 = zext i8 %40 to i32
  %and87 = and i32 %conv86, 223
  %cmp88 = icmp eq i32 %and87, 76
  br i1 %cmp88, label %cond.true90, label %cond.false91

cond.true90:                                      ; preds = %lor.lhs.false84, %lor.lhs.false78, %cond.true72
  br i1 true, label %if.then113, label %if.else

cond.false91:                                     ; preds = %lor.lhs.false84
  br i1 false, label %if.then113, label %if.else

cond.false92:                                     ; preds = %cond.true66
  %41 = load i8*, i8** %s, align 8
  %arrayidx93 = getelementptr inbounds i8, i8* %41, i64 0
  %42 = load i8, i8* %arrayidx93, align 1
  %conv94 = zext i8 %42 to i32
  %and95 = and i32 %conv94, 223
  %cmp96 = icmp eq i32 %and95, 83
  br i1 %cmp96, label %land.lhs.true98, label %cond.false111

land.lhs.true98:                                  ; preds = %cond.false92
  %43 = load i8*, i8** %s, align 8
  %arrayidx99 = getelementptr inbounds i8, i8* %43, i64 1
  %44 = load i8, i8* %arrayidx99, align 1
  %conv100 = zext i8 %44 to i32
  %and101 = and i32 %conv100, 223
  %cmp102 = icmp eq i32 %and101, 83
  br i1 %cmp102, label %cond.true110, label %lor.lhs.false104

lor.lhs.false104:                                 ; preds = %land.lhs.true98
  %45 = load i8*, i8** %s, align 8
  %arrayidx105 = getelementptr inbounds i8, i8* %45, i64 1
  %46 = load i8, i8* %arrayidx105, align 1
  %conv106 = zext i8 %46 to i32
  %and107 = and i32 %conv106, 223
  %cmp108 = icmp eq i32 %and107, 84
  br i1 %cmp108, label %cond.true110, label %cond.false111

cond.true110:                                     ; preds = %lor.lhs.false104, %land.lhs.true98
  br i1 true, label %if.then113, label %if.else

cond.false111:                                    ; preds = %lor.lhs.false104, %cond.false92
  br i1 false, label %if.then113, label %if.else

cond.false112:                                    ; preds = %cond.false59
  br i1 false, label %if.then113, label %if.else

if.then113:                                       ; preds = %cond.false112, %cond.false111, %cond.true110, %cond.false91, %cond.true90, %cond.false58, %cond.true57, %cond.false39, %cond.true38, %cond.false25, %cond.true24
  %47 = load %struct.sv*, %struct.sv** %invlist, align 8
  %call114 = call %struct.sv* @Perl__add_range_to_invlist(%struct.sv* %47, i64 0, i64 -1)
  store %struct.sv* %call114, %struct.sv** %invlist, align 8
  br label %if.end161

if.else:                                          ; preds = %cond.false112, %cond.false111, %cond.true110, %cond.false91, %cond.true90, %cond.false58, %cond.true57, %cond.false39, %cond.true38, %cond.false25, %cond.true24
  %48 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %48, i32 0, i32 1
  %49 = load i8, i8* %type, align 1
  %conv115 = zext i8 %49 to i32
  %cmp116 = icmp eq i32 %conv115, 34
  br i1 %cmp116, label %if.then118, label %if.else119

if.then118:                                       ; preds = %if.else
  %50 = load %struct.sv*, %struct.sv** %invlist, align 8
  %51 = load %struct.sv*, %struct.sv** @PL_Latin1, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %50, %struct.sv* %51, i1 zeroext false, %struct.sv** %invlist)
  br label %if.end134

if.else119:                                       ; preds = %if.else
  %52 = load %struct.sv*, %struct.sv** %invlist, align 8
  %53 = load i64, i64* %uc, align 8
  %call120 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %52, i64 %53)
  store %struct.sv* %call120, %struct.sv** %invlist, align 8
  %54 = load i64, i64* %uc, align 8
  %and121 = and i64 %54, -256
  %tobool122 = icmp ne i64 %and121, 0
  br i1 %tobool122, label %cond.false129, label %land.lhs.true123

land.lhs.true123:                                 ; preds = %if.else119
  %55 = load i64, i64* %uc, align 8
  %conv124 = trunc i64 %55 to i8
  %idxprom = zext i8 %conv124 to i64
  %arrayidx125 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %56 = load i32, i32* %arrayidx125, align 4
  %and126 = and i32 %56, 4194304
  %tobool127 = icmp ne i32 %and126, 0
  br i1 %tobool127, label %cond.true128, label %cond.false129

cond.true128:                                     ; preds = %land.lhs.true123
  br i1 true, label %if.then130, label %if.end

cond.false129:                                    ; preds = %land.lhs.true123, %if.else119
  br i1 false, label %if.then130, label %if.end

if.then130:                                       ; preds = %cond.false129, %cond.true128
  %57 = load %struct.sv*, %struct.sv** %invlist, align 8
  %58 = load i64, i64* %uc, align 8
  %arrayidx131 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_fold_latin1, i64 0, i64 %58
  %59 = load i8, i8* %arrayidx131, align 1
  %conv132 = zext i8 %59 to i64
  %call133 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %57, i64 %conv132)
  store %struct.sv* %call133, %struct.sv** %invlist, align 8
  br label %if.end

if.end:                                           ; preds = %if.then130, %cond.false129, %cond.true128
  br label %if.end134

if.end134:                                        ; preds = %if.end, %if.then118
  %60 = load i64, i64* %uc, align 8
  %and135 = and i64 %60, -256
  %tobool136 = icmp ne i64 %and135, 0
  br i1 %tobool136, label %cond.false138, label %cond.true137

cond.true137:                                     ; preds = %if.end134
  br i1 true, label %lor.lhs.false139, label %land.lhs.true145

cond.false138:                                    ; preds = %if.end134
  br i1 false, label %lor.lhs.false139, label %land.lhs.true145

lor.lhs.false139:                                 ; preds = %cond.false138, %cond.true137
  %61 = load i64, i64* %uc, align 8
  %conv140 = trunc i64 %61 to i8
  %idxprom141 = zext i8 %conv140 to i64
  %arrayidx142 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom141
  %62 = load i32, i32* %arrayidx142, align 4
  %and143 = and i32 %62, 524288
  %tobool144 = icmp ne i32 %and143, 0
  br i1 %tobool144, label %land.lhs.true145, label %if.end160

land.lhs.true145:                                 ; preds = %lor.lhs.false139, %cond.false138, %cond.true137
  %63 = load i64, i64* %uc, align 8
  %cmp146 = icmp ult i64 %63, 128
  br i1 %cmp146, label %lor.lhs.false148, label %if.then158

lor.lhs.false148:                                 ; preds = %land.lhs.true145
  %64 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %type149 = getelementptr inbounds %struct.regnode, %struct.regnode* %64, i32 0, i32 1
  %65 = load i8, i8* %type149, align 1
  %conv150 = zext i8 %65 to i32
  %cmp151 = icmp ne i32 %conv150, 36
  br i1 %cmp151, label %land.lhs.true153, label %if.end160

land.lhs.true153:                                 ; preds = %lor.lhs.false148
  %66 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %type154 = getelementptr inbounds %struct.regnode, %struct.regnode* %66, i32 0, i32 1
  %67 = load i8, i8* %type154, align 1
  %conv155 = zext i8 %67 to i32
  %cmp156 = icmp ne i32 %conv155, 39
  br i1 %cmp156, label %if.then158, label %if.end160

if.then158:                                       ; preds = %land.lhs.true153, %land.lhs.true145
  %68 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %69 = load i64, i64* %uc, align 8
  %conv159 = trunc i64 %69 to i8
  call void @S_add_above_Latin1_folds(%struct.RExC_state_t* %68, i8 zeroext %conv159, %struct.sv** %invlist)
  br label %if.end160

if.end160:                                        ; preds = %if.then158, %land.lhs.true153, %lor.lhs.false148, %lor.lhs.false139
  br label %if.end161

if.end161:                                        ; preds = %if.end160, %if.then113
  br label %if.end2138

if.else162:                                       ; preds = %cond.false, %cond.true
  %70 = bitcast [40 x i8]* %folded to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %70, i8 0, i64 40, i1 false)
  %71 = load i8*, i8** %s, align 8
  %72 = load i8, i8* %71, align 1
  %idxprom163 = zext i8 %72 to i64
  %arrayidx164 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom163
  %73 = load i8, i8* %arrayidx164, align 1
  %conv165 = zext i8 %73 to i64
  store i64 %conv165, i64* %foldlen, align 8
  %74 = load i8*, i8** %s, align 8
  %75 = load i64, i64* %bytelen, align 8
  %add.ptr166 = getelementptr inbounds i8, i8* %74, i64 %75
  store i8* %add.ptr166, i8** %e, align 8
  %76 = load i8*, i8** %s, align 8
  %77 = load i8*, i8** %s, align 8
  %78 = load i64, i64* %bytelen, align 8
  %add.ptr167 = getelementptr inbounds i8, i8* %77, i64 %78
  %79 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast168 = ptrtoint i8* %add.ptr167 to i64
  %sub.ptr.rhs.cast169 = ptrtoint i8* %79 to i64
  %sub.ptr.sub170 = sub i64 %sub.ptr.lhs.cast168, %sub.ptr.rhs.cast169
  %call171 = call zeroext i1 @Perl_ckwarn_d(i32 44)
  %80 = zext i1 %call171 to i64
  %cond = select i1 %call171, i32 0, i32 -8161
  %call173 = call i64 @Perl_utf8n_to_uvchr(i8* %76, i64 %sub.ptr.sub170, i64* null, i32 %cond)
  store i64 %call173, i64* %uc, align 8
  %81 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %type174 = getelementptr inbounds %struct.regnode, %struct.regnode* %81, i32 0, i32 1
  %82 = load i8, i8* %type174, align 1
  %conv175 = zext i8 %82 to i32
  %cmp176 = icmp eq i32 %conv175, 34
  br i1 %cmp176, label %land.lhs.true178, label %if.end299

land.lhs.true178:                                 ; preds = %if.else162
  %83 = load i64, i64* %uc, align 8
  %cmp179 = icmp ule i64 %83, 255
  br i1 %cmp179, label %if.then262, label %lor.lhs.false181

lor.lhs.false181:                                 ; preds = %land.lhs.true178
  %84 = load i64, i64* %uc, align 8
  %cmp182 = icmp ult i64 255, %84
  br i1 %cmp182, label %land.lhs.true184, label %if.end299

land.lhs.true184:                                 ; preds = %lor.lhs.false181
  %85 = load i64, i64* %uc, align 8
  %cmp185 = icmp eq i64 304, %85
  br i1 %cmp185, label %if.then262, label %lor.lhs.false187

lor.lhs.false187:                                 ; preds = %land.lhs.true184
  %86 = load i64, i64* %uc, align 8
  %cmp188 = icmp ult i64 304, %86
  br i1 %cmp188, label %land.lhs.true190, label %if.end299

land.lhs.true190:                                 ; preds = %lor.lhs.false187
  %87 = load i64, i64* %uc, align 8
  %cmp191 = icmp eq i64 329, %87
  br i1 %cmp191, label %if.then262, label %lor.lhs.false193

lor.lhs.false193:                                 ; preds = %land.lhs.true190
  %88 = load i64, i64* %uc, align 8
  %cmp194 = icmp ult i64 329, %88
  br i1 %cmp194, label %land.lhs.true196, label %if.end299

land.lhs.true196:                                 ; preds = %lor.lhs.false193
  %89 = load i64, i64* %uc, align 8
  %cmp197 = icmp eq i64 376, %89
  br i1 %cmp197, label %if.then262, label %lor.lhs.false199

lor.lhs.false199:                                 ; preds = %land.lhs.true196
  %90 = load i64, i64* %uc, align 8
  %cmp200 = icmp ult i64 376, %90
  br i1 %cmp200, label %land.lhs.true202, label %if.end299

land.lhs.true202:                                 ; preds = %lor.lhs.false199
  %91 = load i64, i64* %uc, align 8
  %cmp203 = icmp eq i64 383, %91
  br i1 %cmp203, label %if.then262, label %lor.lhs.false205

lor.lhs.false205:                                 ; preds = %land.lhs.true202
  %92 = load i64, i64* %uc, align 8
  %cmp206 = icmp ult i64 383, %92
  br i1 %cmp206, label %land.lhs.true208, label %if.end299

land.lhs.true208:                                 ; preds = %lor.lhs.false205
  %93 = load i64, i64* %uc, align 8
  %cmp209 = icmp eq i64 496, %93
  br i1 %cmp209, label %if.then262, label %lor.lhs.false211

lor.lhs.false211:                                 ; preds = %land.lhs.true208
  %94 = load i64, i64* %uc, align 8
  %cmp212 = icmp ult i64 496, %94
  br i1 %cmp212, label %land.lhs.true214, label %if.end299

land.lhs.true214:                                 ; preds = %lor.lhs.false211
  %95 = load i64, i64* %uc, align 8
  %cmp215 = icmp eq i64 700, %95
  br i1 %cmp215, label %if.then262, label %lor.lhs.false217

lor.lhs.false217:                                 ; preds = %land.lhs.true214
  %96 = load i64, i64* %uc, align 8
  %cmp218 = icmp ult i64 700, %96
  br i1 %cmp218, label %land.lhs.true220, label %if.end299

land.lhs.true220:                                 ; preds = %lor.lhs.false217
  %97 = load i64, i64* %uc, align 8
  %cmp221 = icmp eq i64 924, %97
  br i1 %cmp221, label %if.then262, label %lor.lhs.false223

lor.lhs.false223:                                 ; preds = %land.lhs.true220
  %98 = load i64, i64* %uc, align 8
  %cmp224 = icmp ult i64 924, %98
  br i1 %cmp224, label %land.lhs.true226, label %if.end299

land.lhs.true226:                                 ; preds = %lor.lhs.false223
  %99 = load i64, i64* %uc, align 8
  %cmp227 = icmp eq i64 956, %99
  br i1 %cmp227, label %if.then262, label %lor.lhs.false229

lor.lhs.false229:                                 ; preds = %land.lhs.true226
  %100 = load i64, i64* %uc, align 8
  %cmp230 = icmp ult i64 956, %100
  br i1 %cmp230, label %land.lhs.true232, label %if.end299

land.lhs.true232:                                 ; preds = %lor.lhs.false229
  %101 = load i64, i64* %uc, align 8
  %cmp233 = icmp ule i64 7830, %101
  br i1 %cmp233, label %land.lhs.true235, label %lor.lhs.false238

land.lhs.true235:                                 ; preds = %land.lhs.true232
  %102 = load i64, i64* %uc, align 8
  %cmp236 = icmp ule i64 %102, 7834
  br i1 %cmp236, label %if.then262, label %lor.lhs.false238

lor.lhs.false238:                                 ; preds = %land.lhs.true235, %land.lhs.true232
  %103 = load i64, i64* %uc, align 8
  %cmp239 = icmp ult i64 7834, %103
  br i1 %cmp239, label %land.lhs.true241, label %if.end299

land.lhs.true241:                                 ; preds = %lor.lhs.false238
  %104 = load i64, i64* %uc, align 8
  %cmp242 = icmp eq i64 7838, %104
  br i1 %cmp242, label %if.then262, label %lor.lhs.false244

lor.lhs.false244:                                 ; preds = %land.lhs.true241
  %105 = load i64, i64* %uc, align 8
  %cmp245 = icmp ult i64 7838, %105
  br i1 %cmp245, label %land.lhs.true247, label %if.end299

land.lhs.true247:                                 ; preds = %lor.lhs.false244
  %106 = load i64, i64* %uc, align 8
  %cmp248 = icmp eq i64 8490, %106
  br i1 %cmp248, label %if.then262, label %lor.lhs.false250

lor.lhs.false250:                                 ; preds = %land.lhs.true247
  %107 = load i64, i64* %uc, align 8
  %cmp251 = icmp ult i64 8490, %107
  br i1 %cmp251, label %land.lhs.true253, label %if.end299

land.lhs.true253:                                 ; preds = %lor.lhs.false250
  %108 = load i64, i64* %uc, align 8
  %cmp254 = icmp eq i64 8491, %108
  br i1 %cmp254, label %if.then262, label %lor.lhs.false256

lor.lhs.false256:                                 ; preds = %land.lhs.true253
  %109 = load i64, i64* %uc, align 8
  %cmp257 = icmp ule i64 64256, %109
  br i1 %cmp257, label %land.lhs.true259, label %if.end299

land.lhs.true259:                                 ; preds = %lor.lhs.false256
  %110 = load i64, i64* %uc, align 8
  %cmp260 = icmp ule i64 %110, 64262
  br i1 %cmp260, label %if.then262, label %if.end299

if.then262:                                       ; preds = %land.lhs.true259, %land.lhs.true253, %land.lhs.true247, %land.lhs.true241, %land.lhs.true235, %land.lhs.true226, %land.lhs.true220, %land.lhs.true214, %land.lhs.true208, %land.lhs.true202, %land.lhs.true196, %land.lhs.true190, %land.lhs.true184, %land.lhs.true178
  %arraydecay263 = getelementptr inbounds [40 x i8], [40 x i8]* %folded, i64 0, i64 0
  store i8* %arraydecay263, i8** %d, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then262
  %111 = load i32, i32* %i, align 4
  %cmp264 = icmp slt i32 %111, 3
  br i1 %cmp264, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %112 = load i8*, i8** %s, align 8
  %113 = load i8*, i8** %e, align 8
  %cmp266 = icmp ult i8* %112, %113
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %114 = phi i1 [ false, %for.cond ], [ %cmp266, %land.rhs ]
  br i1 %114, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %115 = load i8*, i8** %s, align 8
  %116 = load i8, i8* %115, align 1
  %conv268 = zext i8 %116 to i64
  %cmp269 = icmp ult i64 %conv268, 128
  br i1 %cmp269, label %if.then271, label %if.else286

if.then271:                                       ; preds = %for.body
  %117 = load i8*, i8** %s, align 8
  %118 = load i8, i8* %117, align 1
  %idxprom272 = zext i8 %118 to i64
  %arrayidx273 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom272
  %119 = load i32, i32* %arrayidx273, align 4
  %and274 = and i32 %119, 16400
  %cmp275 = icmp eq i32 %and274, 16400
  br i1 %cmp275, label %cond.true277, label %cond.false281

cond.true277:                                     ; preds = %if.then271
  %120 = load i8*, i8** %s, align 8
  %121 = load i8, i8* %120, align 1
  %conv278 = zext i8 %121 to i32
  %add = add nsw i32 %conv278, 32
  %conv279 = trunc i32 %add to i8
  %conv280 = zext i8 %conv279 to i32
  br label %cond.end

cond.false281:                                    ; preds = %if.then271
  %122 = load i8*, i8** %s, align 8
  %123 = load i8, i8* %122, align 1
  %conv282 = zext i8 %123 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false281, %cond.true277
  %cond283 = phi i32 [ %conv280, %cond.true277 ], [ %conv282, %cond.false281 ]
  %conv284 = trunc i32 %cond283 to i8
  %124 = load i8*, i8** %d, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %124, i32 1
  store i8* %incdec.ptr, i8** %d, align 8
  store i8 %conv284, i8* %124, align 1
  %125 = load i8*, i8** %s, align 8
  %incdec.ptr285 = getelementptr inbounds i8, i8* %125, i32 1
  store i8* %incdec.ptr285, i8** %s, align 8
  br label %if.end293

if.else286:                                       ; preds = %for.body
  %126 = load i8*, i8** %s, align 8
  %127 = load i8*, i8** %d, align 8
  %call287 = call i64 @Perl__to_utf8_fold_flags(i8* %126, i8* %127, i64* %len, i8 zeroext 2)
  %128 = load i64, i64* %len, align 8
  %129 = load i8*, i8** %d, align 8
  %add.ptr288 = getelementptr inbounds i8, i8* %129, i64 %128
  store i8* %add.ptr288, i8** %d, align 8
  %130 = load i8*, i8** %s, align 8
  %131 = load i8, i8* %130, align 1
  %idxprom289 = zext i8 %131 to i64
  %arrayidx290 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom289
  %132 = load i8, i8* %arrayidx290, align 1
  %conv291 = zext i8 %132 to i32
  %133 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %conv291 to i64
  %add.ptr292 = getelementptr inbounds i8, i8* %133, i64 %idx.ext
  store i8* %add.ptr292, i8** %s, align 8
  br label %if.end293

if.end293:                                        ; preds = %if.else286, %cond.end
  br label %for.inc

for.inc:                                          ; preds = %if.end293
  %134 = load i32, i32* %i, align 4
  %inc = add nsw i32 %134, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %135 = load i8*, i8** %d, align 8
  store i8* %135, i8** %e, align 8
  %arraydecay294 = getelementptr inbounds [40 x i8], [40 x i8]* %folded, i64 0, i64 0
  %136 = load i8, i8* %arraydecay294, align 16
  %idxprom295 = zext i8 %136 to i64
  %arrayidx296 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom295
  %137 = load i8, i8* %arrayidx296, align 1
  %conv297 = zext i8 %137 to i64
  store i64 %conv297, i64* %foldlen, align 8
  %arraydecay298 = getelementptr inbounds [40 x i8], [40 x i8]* %folded, i64 0, i64 0
  store i8* %arraydecay298, i8** %s, align 8
  br label %if.end299

if.end299:                                        ; preds = %for.end, %land.lhs.true259, %lor.lhs.false256, %lor.lhs.false250, %lor.lhs.false244, %lor.lhs.false238, %lor.lhs.false229, %lor.lhs.false223, %lor.lhs.false217, %lor.lhs.false211, %lor.lhs.false205, %lor.lhs.false199, %lor.lhs.false193, %lor.lhs.false187, %lor.lhs.false181, %if.else162
  %138 = load i8*, i8** %e, align 8
  %139 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast300 = ptrtoint i8* %138 to i64
  %sub.ptr.rhs.cast301 = ptrtoint i8* %139 to i64
  %sub.ptr.sub302 = sub i64 %sub.ptr.lhs.cast300, %sub.ptr.rhs.cast301
  %cmp303 = icmp sgt i64 %sub.ptr.sub302, 5
  br i1 %cmp303, label %cond.true305, label %cond.false916

cond.true305:                                     ; preds = %if.end299
  %140 = load i8*, i8** %s, align 8
  %arrayidx306 = getelementptr inbounds i8, i8* %140, i64 0
  %141 = load i8, i8* %arrayidx306, align 1
  %conv307 = zext i8 %141 to i32
  %cmp308 = icmp eq i32 97, %conv307
  br i1 %cmp308, label %cond.true310, label %cond.false322

cond.true310:                                     ; preds = %cond.true305
  %142 = load i8*, i8** %s, align 8
  %arrayidx311 = getelementptr inbounds i8, i8* %142, i64 1
  %143 = load i8, i8* %arrayidx311, align 1
  %conv312 = zext i8 %143 to i32
  %cmp313 = icmp eq i32 202, %conv312
  br i1 %cmp313, label %land.lhs.true315, label %cond.false321

land.lhs.true315:                                 ; preds = %cond.true310
  %144 = load i8*, i8** %s, align 8
  %arrayidx316 = getelementptr inbounds i8, i8* %144, i64 2
  %145 = load i8, i8* %arrayidx316, align 1
  %conv317 = zext i8 %145 to i32
  %cmp318 = icmp eq i32 190, %conv317
  br i1 %cmp318, label %cond.true320, label %cond.false321

cond.true320:                                     ; preds = %land.lhs.true315
  br i1 true, label %if.then2089, label %if.else2091

cond.false321:                                    ; preds = %land.lhs.true315, %cond.true310
  br i1 false, label %if.then2089, label %if.else2091

cond.false322:                                    ; preds = %cond.true305
  %146 = load i8*, i8** %s, align 8
  %arrayidx323 = getelementptr inbounds i8, i8* %146, i64 0
  %147 = load i8, i8* %arrayidx323, align 1
  %conv324 = zext i8 %147 to i32
  %cmp325 = icmp eq i32 102, %conv324
  br i1 %cmp325, label %cond.true327, label %cond.false356

cond.true327:                                     ; preds = %cond.false322
  %148 = load i8*, i8** %s, align 8
  %arrayidx328 = getelementptr inbounds i8, i8* %148, i64 1
  %149 = load i8, i8* %arrayidx328, align 1
  %conv329 = zext i8 %149 to i32
  %cmp330 = icmp eq i32 102, %conv329
  br i1 %cmp330, label %cond.true332, label %cond.false344

cond.true332:                                     ; preds = %cond.true327
  %150 = load i8*, i8** %s, align 8
  %arrayidx333 = getelementptr inbounds i8, i8* %150, i64 2
  %151 = load i8, i8* %arrayidx333, align 1
  %conv334 = zext i8 %151 to i32
  %cmp335 = icmp eq i32 105, %conv334
  br i1 %cmp335, label %cond.true342, label %lor.lhs.false337

lor.lhs.false337:                                 ; preds = %cond.true332
  %152 = load i8*, i8** %s, align 8
  %arrayidx338 = getelementptr inbounds i8, i8* %152, i64 2
  %153 = load i8, i8* %arrayidx338, align 1
  %conv339 = zext i8 %153 to i32
  %cmp340 = icmp eq i32 108, %conv339
  br i1 %cmp340, label %cond.true342, label %cond.false343

cond.true342:                                     ; preds = %lor.lhs.false337, %cond.true332
  br i1 true, label %if.then2089, label %if.else2091

cond.false343:                                    ; preds = %lor.lhs.false337
  br i1 true, label %if.then2089, label %if.else2091

cond.false344:                                    ; preds = %cond.true327
  %154 = load i8*, i8** %s, align 8
  %arrayidx345 = getelementptr inbounds i8, i8* %154, i64 1
  %155 = load i8, i8* %arrayidx345, align 1
  %conv346 = zext i8 %155 to i32
  %cmp347 = icmp eq i32 105, %conv346
  br i1 %cmp347, label %cond.true354, label %lor.lhs.false349

lor.lhs.false349:                                 ; preds = %cond.false344
  %156 = load i8*, i8** %s, align 8
  %arrayidx350 = getelementptr inbounds i8, i8* %156, i64 1
  %157 = load i8, i8* %arrayidx350, align 1
  %conv351 = zext i8 %157 to i32
  %cmp352 = icmp eq i32 108, %conv351
  br i1 %cmp352, label %cond.true354, label %cond.false355

cond.true354:                                     ; preds = %lor.lhs.false349, %cond.false344
  br i1 true, label %if.then2089, label %if.else2091

cond.false355:                                    ; preds = %lor.lhs.false349
  br i1 false, label %if.then2089, label %if.else2091

cond.false356:                                    ; preds = %cond.false322
  %158 = load i8*, i8** %s, align 8
  %arrayidx357 = getelementptr inbounds i8, i8* %158, i64 0
  %159 = load i8, i8* %arrayidx357, align 1
  %conv358 = zext i8 %159 to i32
  %cmp359 = icmp eq i32 104, %conv358
  br i1 %cmp359, label %cond.true361, label %cond.false373

cond.true361:                                     ; preds = %cond.false356
  %160 = load i8*, i8** %s, align 8
  %arrayidx362 = getelementptr inbounds i8, i8* %160, i64 1
  %161 = load i8, i8* %arrayidx362, align 1
  %conv363 = zext i8 %161 to i32
  %cmp364 = icmp eq i32 204, %conv363
  br i1 %cmp364, label %land.lhs.true366, label %cond.false372

land.lhs.true366:                                 ; preds = %cond.true361
  %162 = load i8*, i8** %s, align 8
  %arrayidx367 = getelementptr inbounds i8, i8* %162, i64 2
  %163 = load i8, i8* %arrayidx367, align 1
  %conv368 = zext i8 %163 to i32
  %cmp369 = icmp eq i32 177, %conv368
  br i1 %cmp369, label %cond.true371, label %cond.false372

cond.true371:                                     ; preds = %land.lhs.true366
  br i1 true, label %if.then2089, label %if.else2091

cond.false372:                                    ; preds = %land.lhs.true366, %cond.true361
  br i1 false, label %if.then2089, label %if.else2091

cond.false373:                                    ; preds = %cond.false356
  %164 = load i8*, i8** %s, align 8
  %arrayidx374 = getelementptr inbounds i8, i8* %164, i64 0
  %165 = load i8, i8* %arrayidx374, align 1
  %conv375 = zext i8 %165 to i32
  %cmp376 = icmp eq i32 105, %conv375
  br i1 %cmp376, label %cond.true378, label %cond.false390

cond.true378:                                     ; preds = %cond.false373
  %166 = load i8*, i8** %s, align 8
  %arrayidx379 = getelementptr inbounds i8, i8* %166, i64 1
  %167 = load i8, i8* %arrayidx379, align 1
  %conv380 = zext i8 %167 to i32
  %cmp381 = icmp eq i32 204, %conv380
  br i1 %cmp381, label %land.lhs.true383, label %cond.false389

land.lhs.true383:                                 ; preds = %cond.true378
  %168 = load i8*, i8** %s, align 8
  %arrayidx384 = getelementptr inbounds i8, i8* %168, i64 2
  %169 = load i8, i8* %arrayidx384, align 1
  %conv385 = zext i8 %169 to i32
  %cmp386 = icmp eq i32 135, %conv385
  br i1 %cmp386, label %cond.true388, label %cond.false389

cond.true388:                                     ; preds = %land.lhs.true383
  br i1 true, label %if.then2089, label %if.else2091

cond.false389:                                    ; preds = %land.lhs.true383, %cond.true378
  br i1 false, label %if.then2089, label %if.else2091

cond.false390:                                    ; preds = %cond.false373
  %170 = load i8*, i8** %s, align 8
  %arrayidx391 = getelementptr inbounds i8, i8* %170, i64 0
  %171 = load i8, i8* %arrayidx391, align 1
  %conv392 = zext i8 %171 to i32
  %cmp393 = icmp eq i32 106, %conv392
  br i1 %cmp393, label %cond.true395, label %cond.false407

cond.true395:                                     ; preds = %cond.false390
  %172 = load i8*, i8** %s, align 8
  %arrayidx396 = getelementptr inbounds i8, i8* %172, i64 1
  %173 = load i8, i8* %arrayidx396, align 1
  %conv397 = zext i8 %173 to i32
  %cmp398 = icmp eq i32 204, %conv397
  br i1 %cmp398, label %land.lhs.true400, label %cond.false406

land.lhs.true400:                                 ; preds = %cond.true395
  %174 = load i8*, i8** %s, align 8
  %arrayidx401 = getelementptr inbounds i8, i8* %174, i64 2
  %175 = load i8, i8* %arrayidx401, align 1
  %conv402 = zext i8 %175 to i32
  %cmp403 = icmp eq i32 140, %conv402
  br i1 %cmp403, label %cond.true405, label %cond.false406

cond.true405:                                     ; preds = %land.lhs.true400
  br i1 true, label %if.then2089, label %if.else2091

cond.false406:                                    ; preds = %land.lhs.true400, %cond.true395
  br i1 false, label %if.then2089, label %if.else2091

cond.false407:                                    ; preds = %cond.false390
  %176 = load i8*, i8** %s, align 8
  %arrayidx408 = getelementptr inbounds i8, i8* %176, i64 0
  %177 = load i8, i8* %arrayidx408, align 1
  %conv409 = zext i8 %177 to i32
  %cmp410 = icmp eq i32 115, %conv409
  br i1 %cmp410, label %cond.true412, label %cond.false424

cond.true412:                                     ; preds = %cond.false407
  %178 = load i8*, i8** %s, align 8
  %arrayidx413 = getelementptr inbounds i8, i8* %178, i64 1
  %179 = load i8, i8* %arrayidx413, align 1
  %conv414 = zext i8 %179 to i32
  %cmp415 = icmp eq i32 115, %conv414
  br i1 %cmp415, label %cond.true422, label %lor.lhs.false417

lor.lhs.false417:                                 ; preds = %cond.true412
  %180 = load i8*, i8** %s, align 8
  %arrayidx418 = getelementptr inbounds i8, i8* %180, i64 1
  %181 = load i8, i8* %arrayidx418, align 1
  %conv419 = zext i8 %181 to i32
  %cmp420 = icmp eq i32 116, %conv419
  br i1 %cmp420, label %cond.true422, label %cond.false423

cond.true422:                                     ; preds = %lor.lhs.false417, %cond.true412
  br i1 true, label %if.then2089, label %if.else2091

cond.false423:                                    ; preds = %lor.lhs.false417
  br i1 false, label %if.then2089, label %if.else2091

cond.false424:                                    ; preds = %cond.false407
  %182 = load i8*, i8** %s, align 8
  %arrayidx425 = getelementptr inbounds i8, i8* %182, i64 0
  %183 = load i8, i8* %arrayidx425, align 1
  %conv426 = zext i8 %183 to i32
  %cmp427 = icmp eq i32 116, %conv426
  br i1 %cmp427, label %cond.true429, label %cond.false441

cond.true429:                                     ; preds = %cond.false424
  %184 = load i8*, i8** %s, align 8
  %arrayidx430 = getelementptr inbounds i8, i8* %184, i64 1
  %185 = load i8, i8* %arrayidx430, align 1
  %conv431 = zext i8 %185 to i32
  %cmp432 = icmp eq i32 204, %conv431
  br i1 %cmp432, label %land.lhs.true434, label %cond.false440

land.lhs.true434:                                 ; preds = %cond.true429
  %186 = load i8*, i8** %s, align 8
  %arrayidx435 = getelementptr inbounds i8, i8* %186, i64 2
  %187 = load i8, i8* %arrayidx435, align 1
  %conv436 = zext i8 %187 to i32
  %cmp437 = icmp eq i32 136, %conv436
  br i1 %cmp437, label %cond.true439, label %cond.false440

cond.true439:                                     ; preds = %land.lhs.true434
  br i1 true, label %if.then2089, label %if.else2091

cond.false440:                                    ; preds = %land.lhs.true434, %cond.true429
  br i1 false, label %if.then2089, label %if.else2091

cond.false441:                                    ; preds = %cond.false424
  %188 = load i8*, i8** %s, align 8
  %arrayidx442 = getelementptr inbounds i8, i8* %188, i64 0
  %189 = load i8, i8* %arrayidx442, align 1
  %conv443 = zext i8 %189 to i32
  %cmp444 = icmp eq i32 119, %conv443
  br i1 %cmp444, label %cond.true451, label %lor.lhs.false446

lor.lhs.false446:                                 ; preds = %cond.false441
  %190 = load i8*, i8** %s, align 8
  %arrayidx447 = getelementptr inbounds i8, i8* %190, i64 0
  %191 = load i8, i8* %arrayidx447, align 1
  %conv448 = zext i8 %191 to i32
  %cmp449 = icmp eq i32 121, %conv448
  br i1 %cmp449, label %cond.true451, label %cond.false463

cond.true451:                                     ; preds = %lor.lhs.false446, %cond.false441
  %192 = load i8*, i8** %s, align 8
  %arrayidx452 = getelementptr inbounds i8, i8* %192, i64 1
  %193 = load i8, i8* %arrayidx452, align 1
  %conv453 = zext i8 %193 to i32
  %cmp454 = icmp eq i32 204, %conv453
  br i1 %cmp454, label %land.lhs.true456, label %cond.false462

land.lhs.true456:                                 ; preds = %cond.true451
  %194 = load i8*, i8** %s, align 8
  %arrayidx457 = getelementptr inbounds i8, i8* %194, i64 2
  %195 = load i8, i8* %arrayidx457, align 1
  %conv458 = zext i8 %195 to i32
  %cmp459 = icmp eq i32 138, %conv458
  br i1 %cmp459, label %cond.true461, label %cond.false462

cond.true461:                                     ; preds = %land.lhs.true456
  br i1 true, label %if.then2089, label %if.else2091

cond.false462:                                    ; preds = %land.lhs.true456, %cond.true451
  br i1 false, label %if.then2089, label %if.else2091

cond.false463:                                    ; preds = %lor.lhs.false446
  %196 = load i8*, i8** %s, align 8
  %arrayidx464 = getelementptr inbounds i8, i8* %196, i64 0
  %197 = load i8, i8* %arrayidx464, align 1
  %conv465 = zext i8 %197 to i32
  %cmp466 = icmp eq i32 197, %conv465
  br i1 %cmp466, label %cond.true468, label %cond.false485

cond.true468:                                     ; preds = %cond.false463
  %198 = load i8*, i8** %s, align 8
  %arrayidx469 = getelementptr inbounds i8, i8* %198, i64 1
  %199 = load i8, i8* %arrayidx469, align 1
  %conv470 = zext i8 %199 to i32
  %cmp471 = icmp eq i32 191, %conv470
  br i1 %cmp471, label %land.lhs.true473, label %cond.false484

land.lhs.true473:                                 ; preds = %cond.true468
  %200 = load i8*, i8** %s, align 8
  %arrayidx474 = getelementptr inbounds i8, i8* %200, i64 2
  %201 = load i8, i8* %arrayidx474, align 1
  %conv475 = zext i8 %201 to i32
  %cmp476 = icmp eq i32 197, %conv475
  br i1 %cmp476, label %land.lhs.true478, label %cond.false484

land.lhs.true478:                                 ; preds = %land.lhs.true473
  %202 = load i8*, i8** %s, align 8
  %arrayidx479 = getelementptr inbounds i8, i8* %202, i64 3
  %203 = load i8, i8* %arrayidx479, align 1
  %conv480 = zext i8 %203 to i32
  %cmp481 = icmp eq i32 191, %conv480
  br i1 %cmp481, label %cond.true483, label %cond.false484

cond.true483:                                     ; preds = %land.lhs.true478
  br i1 true, label %if.then2089, label %if.else2091

cond.false484:                                    ; preds = %land.lhs.true478, %land.lhs.true473, %cond.true468
  br i1 false, label %if.then2089, label %if.else2091

cond.false485:                                    ; preds = %cond.false463
  %204 = load i8*, i8** %s, align 8
  %arrayidx486 = getelementptr inbounds i8, i8* %204, i64 0
  %205 = load i8, i8* %arrayidx486, align 1
  %conv487 = zext i8 %205 to i32
  %cmp488 = icmp eq i32 202, %conv487
  br i1 %cmp488, label %cond.true490, label %cond.false502

cond.true490:                                     ; preds = %cond.false485
  %206 = load i8*, i8** %s, align 8
  %arrayidx491 = getelementptr inbounds i8, i8* %206, i64 1
  %207 = load i8, i8* %arrayidx491, align 1
  %conv492 = zext i8 %207 to i32
  %cmp493 = icmp eq i32 188, %conv492
  br i1 %cmp493, label %land.lhs.true495, label %cond.false501

land.lhs.true495:                                 ; preds = %cond.true490
  %208 = load i8*, i8** %s, align 8
  %arrayidx496 = getelementptr inbounds i8, i8* %208, i64 2
  %209 = load i8, i8* %arrayidx496, align 1
  %conv497 = zext i8 %209 to i32
  %cmp498 = icmp eq i32 110, %conv497
  br i1 %cmp498, label %cond.true500, label %cond.false501

cond.true500:                                     ; preds = %land.lhs.true495
  br i1 true, label %if.then2089, label %if.else2091

cond.false501:                                    ; preds = %land.lhs.true495, %cond.true490
  br i1 false, label %if.then2089, label %if.else2091

cond.false502:                                    ; preds = %cond.false485
  %210 = load i8*, i8** %s, align 8
  %arrayidx503 = getelementptr inbounds i8, i8* %210, i64 0
  %211 = load i8, i8* %arrayidx503, align 1
  %conv504 = zext i8 %211 to i32
  %cmp505 = icmp eq i32 206, %conv504
  br i1 %cmp505, label %cond.true507, label %cond.false624

cond.true507:                                     ; preds = %cond.false502
  %212 = load i8*, i8** %s, align 8
  %arrayidx508 = getelementptr inbounds i8, i8* %212, i64 1
  %213 = load i8, i8* %arrayidx508, align 1
  %conv509 = zext i8 %213 to i32
  %and510 = and i32 %conv509, 253
  %cmp511 = icmp eq i32 %and510, 172
  br i1 %cmp511, label %cond.true513, label %cond.false525

cond.true513:                                     ; preds = %cond.true507
  %214 = load i8*, i8** %s, align 8
  %arrayidx514 = getelementptr inbounds i8, i8* %214, i64 2
  %215 = load i8, i8* %arrayidx514, align 1
  %conv515 = zext i8 %215 to i32
  %cmp516 = icmp eq i32 206, %conv515
  br i1 %cmp516, label %land.lhs.true518, label %cond.false524

land.lhs.true518:                                 ; preds = %cond.true513
  %216 = load i8*, i8** %s, align 8
  %arrayidx519 = getelementptr inbounds i8, i8* %216, i64 3
  %217 = load i8, i8* %arrayidx519, align 1
  %conv520 = zext i8 %217 to i32
  %cmp521 = icmp eq i32 185, %conv520
  br i1 %cmp521, label %cond.true523, label %cond.false524

cond.true523:                                     ; preds = %land.lhs.true518
  br i1 true, label %if.then2089, label %if.else2091

cond.false524:                                    ; preds = %land.lhs.true518, %cond.true513
  br i1 false, label %if.then2089, label %if.else2091

cond.false525:                                    ; preds = %cond.true507
  %218 = load i8*, i8** %s, align 8
  %arrayidx526 = getelementptr inbounds i8, i8* %218, i64 1
  %219 = load i8, i8* %arrayidx526, align 1
  %conv527 = zext i8 %219 to i32
  %cmp528 = icmp eq i32 177, %conv527
  br i1 %cmp528, label %cond.true535, label %lor.lhs.false530

lor.lhs.false530:                                 ; preds = %cond.false525
  %220 = load i8*, i8** %s, align 8
  %arrayidx531 = getelementptr inbounds i8, i8* %220, i64 1
  %221 = load i8, i8* %arrayidx531, align 1
  %conv532 = zext i8 %221 to i32
  %cmp533 = icmp eq i32 183, %conv532
  br i1 %cmp533, label %cond.true535, label %cond.false570

cond.true535:                                     ; preds = %lor.lhs.false530, %cond.false525
  %222 = load i8*, i8** %s, align 8
  %arrayidx536 = getelementptr inbounds i8, i8* %222, i64 2
  %223 = load i8, i8* %arrayidx536, align 1
  %conv537 = zext i8 %223 to i32
  %cmp538 = icmp eq i32 205, %conv537
  br i1 %cmp538, label %cond.true540, label %cond.false558

cond.true540:                                     ; preds = %cond.true535
  %224 = load i8*, i8** %s, align 8
  %arrayidx541 = getelementptr inbounds i8, i8* %224, i64 3
  %225 = load i8, i8* %arrayidx541, align 1
  %conv542 = zext i8 %225 to i32
  %cmp543 = icmp eq i32 130, %conv542
  br i1 %cmp543, label %cond.true545, label %cond.false557

cond.true545:                                     ; preds = %cond.true540
  %226 = load i8*, i8** %s, align 8
  %arrayidx546 = getelementptr inbounds i8, i8* %226, i64 4
  %227 = load i8, i8* %arrayidx546, align 1
  %conv547 = zext i8 %227 to i32
  %cmp548 = icmp eq i32 206, %conv547
  br i1 %cmp548, label %land.lhs.true550, label %cond.false556

land.lhs.true550:                                 ; preds = %cond.true545
  %228 = load i8*, i8** %s, align 8
  %arrayidx551 = getelementptr inbounds i8, i8* %228, i64 5
  %229 = load i8, i8* %arrayidx551, align 1
  %conv552 = zext i8 %229 to i32
  %cmp553 = icmp eq i32 185, %conv552
  br i1 %cmp553, label %cond.true555, label %cond.false556

cond.true555:                                     ; preds = %land.lhs.true550
  br i1 true, label %if.then2089, label %if.else2091

cond.false556:                                    ; preds = %land.lhs.true550, %cond.true545
  br i1 true, label %if.then2089, label %if.else2091

cond.false557:                                    ; preds = %cond.true540
  br i1 false, label %if.then2089, label %if.else2091

cond.false558:                                    ; preds = %cond.true535
  %230 = load i8*, i8** %s, align 8
  %arrayidx559 = getelementptr inbounds i8, i8* %230, i64 2
  %231 = load i8, i8* %arrayidx559, align 1
  %conv560 = zext i8 %231 to i32
  %cmp561 = icmp eq i32 206, %conv560
  br i1 %cmp561, label %land.lhs.true563, label %cond.false569

land.lhs.true563:                                 ; preds = %cond.false558
  %232 = load i8*, i8** %s, align 8
  %arrayidx564 = getelementptr inbounds i8, i8* %232, i64 3
  %233 = load i8, i8* %arrayidx564, align 1
  %conv565 = zext i8 %233 to i32
  %cmp566 = icmp eq i32 185, %conv565
  br i1 %cmp566, label %cond.true568, label %cond.false569

cond.true568:                                     ; preds = %land.lhs.true563
  br i1 true, label %if.then2089, label %if.else2091

cond.false569:                                    ; preds = %land.lhs.true563, %cond.false558
  br i1 false, label %if.then2089, label %if.else2091

cond.false570:                                    ; preds = %lor.lhs.false530
  %234 = load i8*, i8** %s, align 8
  %arrayidx571 = getelementptr inbounds i8, i8* %234, i64 1
  %235 = load i8, i8* %arrayidx571, align 1
  %conv572 = zext i8 %235 to i32
  %cmp573 = icmp eq i32 185, %conv572
  br i1 %cmp573, label %cond.true575, label %cond.false623

cond.true575:                                     ; preds = %cond.false570
  %236 = load i8*, i8** %s, align 8
  %arrayidx576 = getelementptr inbounds i8, i8* %236, i64 2
  %237 = load i8, i8* %arrayidx576, align 1
  %conv577 = zext i8 %237 to i32
  %cmp578 = icmp eq i32 204, %conv577
  br i1 %cmp578, label %cond.true580, label %cond.false611

cond.true580:                                     ; preds = %cond.true575
  %238 = load i8*, i8** %s, align 8
  %arrayidx581 = getelementptr inbounds i8, i8* %238, i64 3
  %239 = load i8, i8* %arrayidx581, align 1
  %conv582 = zext i8 %239 to i32
  %cmp583 = icmp eq i32 136, %conv582
  br i1 %cmp583, label %cond.true585, label %cond.false610

cond.true585:                                     ; preds = %cond.true580
  %240 = load i8*, i8** %s, align 8
  %arrayidx586 = getelementptr inbounds i8, i8* %240, i64 4
  %241 = load i8, i8* %arrayidx586, align 1
  %conv587 = zext i8 %241 to i32
  %cmp588 = icmp eq i32 204, %conv587
  br i1 %cmp588, label %cond.true590, label %cond.false598

cond.true590:                                     ; preds = %cond.true585
  %242 = load i8*, i8** %s, align 8
  %arrayidx591 = getelementptr inbounds i8, i8* %242, i64 5
  %243 = load i8, i8* %arrayidx591, align 1
  %conv592 = zext i8 %243 to i32
  %and593 = and i32 %conv592, 254
  %cmp594 = icmp eq i32 %and593, 128
  br i1 %cmp594, label %cond.true596, label %cond.false597

cond.true596:                                     ; preds = %cond.true590
  br i1 true, label %if.then2089, label %if.else2091

cond.false597:                                    ; preds = %cond.true590
  br i1 false, label %if.then2089, label %if.else2091

cond.false598:                                    ; preds = %cond.true585
  %244 = load i8*, i8** %s, align 8
  %arrayidx599 = getelementptr inbounds i8, i8* %244, i64 4
  %245 = load i8, i8* %arrayidx599, align 1
  %conv600 = zext i8 %245 to i32
  %cmp601 = icmp eq i32 205, %conv600
  br i1 %cmp601, label %land.lhs.true603, label %cond.false609

land.lhs.true603:                                 ; preds = %cond.false598
  %246 = load i8*, i8** %s, align 8
  %arrayidx604 = getelementptr inbounds i8, i8* %246, i64 5
  %247 = load i8, i8* %arrayidx604, align 1
  %conv605 = zext i8 %247 to i32
  %cmp606 = icmp eq i32 130, %conv605
  br i1 %cmp606, label %cond.true608, label %cond.false609

cond.true608:                                     ; preds = %land.lhs.true603
  br i1 true, label %if.then2089, label %if.else2091

cond.false609:                                    ; preds = %land.lhs.true603, %cond.false598
  br i1 false, label %if.then2089, label %if.else2091

cond.false610:                                    ; preds = %cond.true580
  br i1 false, label %if.then2089, label %if.else2091

cond.false611:                                    ; preds = %cond.true575
  %248 = load i8*, i8** %s, align 8
  %arrayidx612 = getelementptr inbounds i8, i8* %248, i64 2
  %249 = load i8, i8* %arrayidx612, align 1
  %conv613 = zext i8 %249 to i32
  %cmp614 = icmp eq i32 205, %conv613
  br i1 %cmp614, label %land.lhs.true616, label %cond.false622

land.lhs.true616:                                 ; preds = %cond.false611
  %250 = load i8*, i8** %s, align 8
  %arrayidx617 = getelementptr inbounds i8, i8* %250, i64 3
  %251 = load i8, i8* %arrayidx617, align 1
  %conv618 = zext i8 %251 to i32
  %cmp619 = icmp eq i32 130, %conv618
  br i1 %cmp619, label %cond.true621, label %cond.false622

cond.true621:                                     ; preds = %land.lhs.true616
  br i1 true, label %if.then2089, label %if.else2091

cond.false622:                                    ; preds = %land.lhs.true616, %cond.false611
  br i1 false, label %if.then2089, label %if.else2091

cond.false623:                                    ; preds = %cond.false570
  br i1 false, label %if.then2089, label %if.else2091

cond.false624:                                    ; preds = %cond.false502
  %252 = load i8*, i8** %s, align 8
  %arrayidx625 = getelementptr inbounds i8, i8* %252, i64 0
  %253 = load i8, i8* %arrayidx625, align 1
  %conv626 = zext i8 %253 to i32
  %cmp627 = icmp eq i32 207, %conv626
  br i1 %cmp627, label %cond.true629, label %cond.false786

cond.true629:                                     ; preds = %cond.false624
  %254 = load i8*, i8** %s, align 8
  %arrayidx630 = getelementptr inbounds i8, i8* %254, i64 1
  %255 = load i8, i8* %arrayidx630, align 1
  %conv631 = zext i8 %255 to i32
  %cmp632 = icmp eq i32 129, %conv631
  br i1 %cmp632, label %cond.true634, label %cond.false646

cond.true634:                                     ; preds = %cond.true629
  %256 = load i8*, i8** %s, align 8
  %arrayidx635 = getelementptr inbounds i8, i8* %256, i64 2
  %257 = load i8, i8* %arrayidx635, align 1
  %conv636 = zext i8 %257 to i32
  %cmp637 = icmp eq i32 204, %conv636
  br i1 %cmp637, label %land.lhs.true639, label %cond.false645

land.lhs.true639:                                 ; preds = %cond.true634
  %258 = load i8*, i8** %s, align 8
  %arrayidx640 = getelementptr inbounds i8, i8* %258, i64 3
  %259 = load i8, i8* %arrayidx640, align 1
  %conv641 = zext i8 %259 to i32
  %cmp642 = icmp eq i32 147, %conv641
  br i1 %cmp642, label %cond.true644, label %cond.false645

cond.true644:                                     ; preds = %land.lhs.true639
  br i1 true, label %if.then2089, label %if.else2091

cond.false645:                                    ; preds = %land.lhs.true639, %cond.true634
  br i1 false, label %if.then2089, label %if.else2091

cond.false646:                                    ; preds = %cond.true629
  %260 = load i8*, i8** %s, align 8
  %arrayidx647 = getelementptr inbounds i8, i8* %260, i64 1
  %261 = load i8, i8* %arrayidx647, align 1
  %conv648 = zext i8 %261 to i32
  %cmp649 = icmp eq i32 133, %conv648
  br i1 %cmp649, label %cond.true651, label %cond.false729

cond.true651:                                     ; preds = %cond.false646
  %262 = load i8*, i8** %s, align 8
  %arrayidx652 = getelementptr inbounds i8, i8* %262, i64 2
  %263 = load i8, i8* %arrayidx652, align 1
  %conv653 = zext i8 %263 to i32
  %cmp654 = icmp eq i32 204, %conv653
  br i1 %cmp654, label %cond.true656, label %cond.false717

cond.true656:                                     ; preds = %cond.true651
  %264 = load i8*, i8** %s, align 8
  %arrayidx657 = getelementptr inbounds i8, i8* %264, i64 3
  %265 = load i8, i8* %arrayidx657, align 1
  %conv658 = zext i8 %265 to i32
  %cmp659 = icmp eq i32 136, %conv658
  br i1 %cmp659, label %cond.true661, label %cond.false686

cond.true661:                                     ; preds = %cond.true656
  %266 = load i8*, i8** %s, align 8
  %arrayidx662 = getelementptr inbounds i8, i8* %266, i64 4
  %267 = load i8, i8* %arrayidx662, align 1
  %conv663 = zext i8 %267 to i32
  %cmp664 = icmp eq i32 204, %conv663
  br i1 %cmp664, label %cond.true666, label %cond.false674

cond.true666:                                     ; preds = %cond.true661
  %268 = load i8*, i8** %s, align 8
  %arrayidx667 = getelementptr inbounds i8, i8* %268, i64 5
  %269 = load i8, i8* %arrayidx667, align 1
  %conv668 = zext i8 %269 to i32
  %and669 = and i32 %conv668, 254
  %cmp670 = icmp eq i32 %and669, 128
  br i1 %cmp670, label %cond.true672, label %cond.false673

cond.true672:                                     ; preds = %cond.true666
  br i1 true, label %if.then2089, label %if.else2091

cond.false673:                                    ; preds = %cond.true666
  br i1 false, label %if.then2089, label %if.else2091

cond.false674:                                    ; preds = %cond.true661
  %270 = load i8*, i8** %s, align 8
  %arrayidx675 = getelementptr inbounds i8, i8* %270, i64 4
  %271 = load i8, i8* %arrayidx675, align 1
  %conv676 = zext i8 %271 to i32
  %cmp677 = icmp eq i32 205, %conv676
  br i1 %cmp677, label %land.lhs.true679, label %cond.false685

land.lhs.true679:                                 ; preds = %cond.false674
  %272 = load i8*, i8** %s, align 8
  %arrayidx680 = getelementptr inbounds i8, i8* %272, i64 5
  %273 = load i8, i8* %arrayidx680, align 1
  %conv681 = zext i8 %273 to i32
  %cmp682 = icmp eq i32 130, %conv681
  br i1 %cmp682, label %cond.true684, label %cond.false685

cond.true684:                                     ; preds = %land.lhs.true679
  br i1 true, label %if.then2089, label %if.else2091

cond.false685:                                    ; preds = %land.lhs.true679, %cond.false674
  br i1 false, label %if.then2089, label %if.else2091

cond.false686:                                    ; preds = %cond.true656
  %274 = load i8*, i8** %s, align 8
  %arrayidx687 = getelementptr inbounds i8, i8* %274, i64 3
  %275 = load i8, i8* %arrayidx687, align 1
  %conv688 = zext i8 %275 to i32
  %cmp689 = icmp eq i32 147, %conv688
  br i1 %cmp689, label %cond.true691, label %cond.false716

cond.true691:                                     ; preds = %cond.false686
  %276 = load i8*, i8** %s, align 8
  %arrayidx692 = getelementptr inbounds i8, i8* %276, i64 4
  %277 = load i8, i8* %arrayidx692, align 1
  %conv693 = zext i8 %277 to i32
  %cmp694 = icmp eq i32 204, %conv693
  br i1 %cmp694, label %cond.true696, label %cond.false704

cond.true696:                                     ; preds = %cond.true691
  %278 = load i8*, i8** %s, align 8
  %arrayidx697 = getelementptr inbounds i8, i8* %278, i64 5
  %279 = load i8, i8* %arrayidx697, align 1
  %conv698 = zext i8 %279 to i32
  %and699 = and i32 %conv698, 254
  %cmp700 = icmp eq i32 %and699, 128
  br i1 %cmp700, label %cond.true702, label %cond.false703

cond.true702:                                     ; preds = %cond.true696
  br i1 true, label %if.then2089, label %if.else2091

cond.false703:                                    ; preds = %cond.true696
  br i1 true, label %if.then2089, label %if.else2091

cond.false704:                                    ; preds = %cond.true691
  %280 = load i8*, i8** %s, align 8
  %arrayidx705 = getelementptr inbounds i8, i8* %280, i64 4
  %281 = load i8, i8* %arrayidx705, align 1
  %conv706 = zext i8 %281 to i32
  %cmp707 = icmp eq i32 205, %conv706
  br i1 %cmp707, label %land.lhs.true709, label %cond.false715

land.lhs.true709:                                 ; preds = %cond.false704
  %282 = load i8*, i8** %s, align 8
  %arrayidx710 = getelementptr inbounds i8, i8* %282, i64 5
  %283 = load i8, i8* %arrayidx710, align 1
  %conv711 = zext i8 %283 to i32
  %cmp712 = icmp eq i32 130, %conv711
  br i1 %cmp712, label %cond.true714, label %cond.false715

cond.true714:                                     ; preds = %land.lhs.true709
  br i1 true, label %if.then2089, label %if.else2091

cond.false715:                                    ; preds = %land.lhs.true709, %cond.false704
  br i1 true, label %if.then2089, label %if.else2091

cond.false716:                                    ; preds = %cond.false686
  br i1 false, label %if.then2089, label %if.else2091

cond.false717:                                    ; preds = %cond.true651
  %284 = load i8*, i8** %s, align 8
  %arrayidx718 = getelementptr inbounds i8, i8* %284, i64 2
  %285 = load i8, i8* %arrayidx718, align 1
  %conv719 = zext i8 %285 to i32
  %cmp720 = icmp eq i32 205, %conv719
  br i1 %cmp720, label %land.lhs.true722, label %cond.false728

land.lhs.true722:                                 ; preds = %cond.false717
  %286 = load i8*, i8** %s, align 8
  %arrayidx723 = getelementptr inbounds i8, i8* %286, i64 3
  %287 = load i8, i8* %arrayidx723, align 1
  %conv724 = zext i8 %287 to i32
  %cmp725 = icmp eq i32 130, %conv724
  br i1 %cmp725, label %cond.true727, label %cond.false728

cond.true727:                                     ; preds = %land.lhs.true722
  br i1 true, label %if.then2089, label %if.else2091

cond.false728:                                    ; preds = %land.lhs.true722, %cond.false717
  br i1 false, label %if.then2089, label %if.else2091

cond.false729:                                    ; preds = %cond.false646
  %288 = load i8*, i8** %s, align 8
  %arrayidx730 = getelementptr inbounds i8, i8* %288, i64 1
  %289 = load i8, i8* %arrayidx730, align 1
  %conv731 = zext i8 %289 to i32
  %cmp732 = icmp eq i32 137, %conv731
  br i1 %cmp732, label %cond.true734, label %cond.false769

cond.true734:                                     ; preds = %cond.false729
  %290 = load i8*, i8** %s, align 8
  %arrayidx735 = getelementptr inbounds i8, i8* %290, i64 2
  %291 = load i8, i8* %arrayidx735, align 1
  %conv736 = zext i8 %291 to i32
  %cmp737 = icmp eq i32 205, %conv736
  br i1 %cmp737, label %cond.true739, label %cond.false757

cond.true739:                                     ; preds = %cond.true734
  %292 = load i8*, i8** %s, align 8
  %arrayidx740 = getelementptr inbounds i8, i8* %292, i64 3
  %293 = load i8, i8* %arrayidx740, align 1
  %conv741 = zext i8 %293 to i32
  %cmp742 = icmp eq i32 130, %conv741
  br i1 %cmp742, label %cond.true744, label %cond.false756

cond.true744:                                     ; preds = %cond.true739
  %294 = load i8*, i8** %s, align 8
  %arrayidx745 = getelementptr inbounds i8, i8* %294, i64 4
  %295 = load i8, i8* %arrayidx745, align 1
  %conv746 = zext i8 %295 to i32
  %cmp747 = icmp eq i32 206, %conv746
  br i1 %cmp747, label %land.lhs.true749, label %cond.false755

land.lhs.true749:                                 ; preds = %cond.true744
  %296 = load i8*, i8** %s, align 8
  %arrayidx750 = getelementptr inbounds i8, i8* %296, i64 5
  %297 = load i8, i8* %arrayidx750, align 1
  %conv751 = zext i8 %297 to i32
  %cmp752 = icmp eq i32 185, %conv751
  br i1 %cmp752, label %cond.true754, label %cond.false755

cond.true754:                                     ; preds = %land.lhs.true749
  br i1 true, label %if.then2089, label %if.else2091

cond.false755:                                    ; preds = %land.lhs.true749, %cond.true744
  br i1 true, label %if.then2089, label %if.else2091

cond.false756:                                    ; preds = %cond.true739
  br i1 false, label %if.then2089, label %if.else2091

cond.false757:                                    ; preds = %cond.true734
  %298 = load i8*, i8** %s, align 8
  %arrayidx758 = getelementptr inbounds i8, i8* %298, i64 2
  %299 = load i8, i8* %arrayidx758, align 1
  %conv759 = zext i8 %299 to i32
  %cmp760 = icmp eq i32 206, %conv759
  br i1 %cmp760, label %land.lhs.true762, label %cond.false768

land.lhs.true762:                                 ; preds = %cond.false757
  %300 = load i8*, i8** %s, align 8
  %arrayidx763 = getelementptr inbounds i8, i8* %300, i64 3
  %301 = load i8, i8* %arrayidx763, align 1
  %conv764 = zext i8 %301 to i32
  %cmp765 = icmp eq i32 185, %conv764
  br i1 %cmp765, label %cond.true767, label %cond.false768

cond.true767:                                     ; preds = %land.lhs.true762
  br i1 true, label %if.then2089, label %if.else2091

cond.false768:                                    ; preds = %land.lhs.true762, %cond.false757
  br i1 false, label %if.then2089, label %if.else2091

cond.false769:                                    ; preds = %cond.false729
  %302 = load i8*, i8** %s, align 8
  %arrayidx770 = getelementptr inbounds i8, i8* %302, i64 1
  %303 = load i8, i8* %arrayidx770, align 1
  %conv771 = zext i8 %303 to i32
  %cmp772 = icmp eq i32 142, %conv771
  br i1 %cmp772, label %land.lhs.true774, label %cond.false785

land.lhs.true774:                                 ; preds = %cond.false769
  %304 = load i8*, i8** %s, align 8
  %arrayidx775 = getelementptr inbounds i8, i8* %304, i64 2
  %305 = load i8, i8* %arrayidx775, align 1
  %conv776 = zext i8 %305 to i32
  %cmp777 = icmp eq i32 206, %conv776
  br i1 %cmp777, label %land.lhs.true779, label %cond.false785

land.lhs.true779:                                 ; preds = %land.lhs.true774
  %306 = load i8*, i8** %s, align 8
  %arrayidx780 = getelementptr inbounds i8, i8* %306, i64 3
  %307 = load i8, i8* %arrayidx780, align 1
  %conv781 = zext i8 %307 to i32
  %cmp782 = icmp eq i32 185, %conv781
  br i1 %cmp782, label %cond.true784, label %cond.false785

cond.true784:                                     ; preds = %land.lhs.true779
  br i1 true, label %if.then2089, label %if.else2091

cond.false785:                                    ; preds = %land.lhs.true779, %land.lhs.true774, %cond.false769
  br i1 false, label %if.then2089, label %if.else2091

cond.false786:                                    ; preds = %cond.false624
  %308 = load i8*, i8** %s, align 8
  %arrayidx787 = getelementptr inbounds i8, i8* %308, i64 0
  %309 = load i8, i8* %arrayidx787, align 1
  %conv788 = zext i8 %309 to i32
  %cmp789 = icmp eq i32 213, %conv788
  br i1 %cmp789, label %cond.true791, label %cond.false853

cond.true791:                                     ; preds = %cond.false786
  %310 = load i8*, i8** %s, align 8
  %arrayidx792 = getelementptr inbounds i8, i8* %310, i64 1
  %311 = load i8, i8* %arrayidx792, align 1
  %conv793 = zext i8 %311 to i32
  %cmp794 = icmp eq i32 165, %conv793
  br i1 %cmp794, label %cond.true796, label %cond.false808

cond.true796:                                     ; preds = %cond.true791
  %312 = load i8*, i8** %s, align 8
  %arrayidx797 = getelementptr inbounds i8, i8* %312, i64 2
  %313 = load i8, i8* %arrayidx797, align 1
  %conv798 = zext i8 %313 to i32
  %cmp799 = icmp eq i32 214, %conv798
  br i1 %cmp799, label %land.lhs.true801, label %cond.false807

land.lhs.true801:                                 ; preds = %cond.true796
  %314 = load i8*, i8** %s, align 8
  %arrayidx802 = getelementptr inbounds i8, i8* %314, i64 3
  %315 = load i8, i8* %arrayidx802, align 1
  %conv803 = zext i8 %315 to i32
  %cmp804 = icmp eq i32 130, %conv803
  br i1 %cmp804, label %cond.true806, label %cond.false807

cond.true806:                                     ; preds = %land.lhs.true801
  br i1 true, label %if.then2089, label %if.else2091

cond.false807:                                    ; preds = %land.lhs.true801, %cond.true796
  br i1 false, label %if.then2089, label %if.else2091

cond.false808:                                    ; preds = %cond.true791
  %316 = load i8*, i8** %s, align 8
  %arrayidx809 = getelementptr inbounds i8, i8* %316, i64 1
  %317 = load i8, i8* %arrayidx809, align 1
  %conv810 = zext i8 %317 to i32
  %cmp811 = icmp eq i32 180, %conv810
  br i1 %cmp811, label %cond.true813, label %cond.false836

cond.true813:                                     ; preds = %cond.false808
  %318 = load i8*, i8** %s, align 8
  %arrayidx814 = getelementptr inbounds i8, i8* %318, i64 2
  %319 = load i8, i8* %arrayidx814, align 1
  %conv815 = zext i8 %319 to i32
  %cmp816 = icmp eq i32 213, %conv815
  br i1 %cmp816, label %land.lhs.true818, label %cond.false835

land.lhs.true818:                                 ; preds = %cond.true813
  %320 = load i8*, i8** %s, align 8
  %arrayidx819 = getelementptr inbounds i8, i8* %320, i64 3
  %321 = load i8, i8* %arrayidx819, align 1
  %conv820 = zext i8 %321 to i32
  %and821 = and i32 %conv820, 247
  %cmp822 = icmp eq i32 %and821, 165
  br i1 %cmp822, label %cond.true834, label %lor.lhs.false824

lor.lhs.false824:                                 ; preds = %land.lhs.true818
  %322 = load i8*, i8** %s, align 8
  %arrayidx825 = getelementptr inbounds i8, i8* %322, i64 3
  %323 = load i8, i8* %arrayidx825, align 1
  %conv826 = zext i8 %323 to i32
  %cmp827 = icmp eq i32 %conv826, 171
  br i1 %cmp827, label %cond.true834, label %lor.lhs.false829

lor.lhs.false829:                                 ; preds = %lor.lhs.false824
  %324 = load i8*, i8** %s, align 8
  %arrayidx830 = getelementptr inbounds i8, i8* %324, i64 3
  %325 = load i8, i8* %arrayidx830, align 1
  %conv831 = zext i8 %325 to i32
  %cmp832 = icmp eq i32 %conv831, 182
  br i1 %cmp832, label %cond.true834, label %cond.false835

cond.true834:                                     ; preds = %lor.lhs.false829, %lor.lhs.false824, %land.lhs.true818
  br i1 true, label %if.then2089, label %if.else2091

cond.false835:                                    ; preds = %lor.lhs.false829, %cond.true813
  br i1 false, label %if.then2089, label %if.else2091

cond.false836:                                    ; preds = %cond.false808
  %326 = load i8*, i8** %s, align 8
  %arrayidx837 = getelementptr inbounds i8, i8* %326, i64 1
  %327 = load i8, i8* %arrayidx837, align 1
  %conv838 = zext i8 %327 to i32
  %cmp839 = icmp eq i32 190, %conv838
  br i1 %cmp839, label %land.lhs.true841, label %cond.false852

land.lhs.true841:                                 ; preds = %cond.false836
  %328 = load i8*, i8** %s, align 8
  %arrayidx842 = getelementptr inbounds i8, i8* %328, i64 2
  %329 = load i8, i8* %arrayidx842, align 1
  %conv843 = zext i8 %329 to i32
  %cmp844 = icmp eq i32 213, %conv843
  br i1 %cmp844, label %land.lhs.true846, label %cond.false852

land.lhs.true846:                                 ; preds = %land.lhs.true841
  %330 = load i8*, i8** %s, align 8
  %arrayidx847 = getelementptr inbounds i8, i8* %330, i64 3
  %331 = load i8, i8* %arrayidx847, align 1
  %conv848 = zext i8 %331 to i32
  %cmp849 = icmp eq i32 182, %conv848
  br i1 %cmp849, label %cond.true851, label %cond.false852

cond.true851:                                     ; preds = %land.lhs.true846
  br i1 true, label %if.then2089, label %if.else2091

cond.false852:                                    ; preds = %land.lhs.true846, %land.lhs.true841, %cond.false836
  br i1 false, label %if.then2089, label %if.else2091

cond.false853:                                    ; preds = %cond.false786
  %332 = load i8*, i8** %s, align 8
  %arrayidx854 = getelementptr inbounds i8, i8* %332, i64 0
  %333 = load i8, i8* %arrayidx854, align 1
  %conv855 = zext i8 %333 to i32
  %cmp856 = icmp eq i32 225, %conv855
  br i1 %cmp856, label %cond.true858, label %cond.false915

cond.true858:                                     ; preds = %cond.false853
  %334 = load i8*, i8** %s, align 8
  %arrayidx859 = getelementptr inbounds i8, i8* %334, i64 1
  %335 = load i8, i8* %arrayidx859, align 1
  %conv860 = zext i8 %335 to i32
  %cmp861 = icmp eq i32 188, %conv860
  br i1 %cmp861, label %cond.true863, label %cond.false881

cond.true863:                                     ; preds = %cond.true858
  %336 = load i8*, i8** %s, align 8
  %arrayidx864 = getelementptr inbounds i8, i8* %336, i64 2
  %337 = load i8, i8* %arrayidx864, align 1
  %conv865 = zext i8 %337 to i32
  %and866 = and i32 %conv865, 216
  %cmp867 = icmp eq i32 %and866, 128
  br i1 %cmp867, label %land.lhs.true869, label %cond.false880

land.lhs.true869:                                 ; preds = %cond.true863
  %338 = load i8*, i8** %s, align 8
  %arrayidx870 = getelementptr inbounds i8, i8* %338, i64 3
  %339 = load i8, i8* %arrayidx870, align 1
  %conv871 = zext i8 %339 to i32
  %cmp872 = icmp eq i32 206, %conv871
  br i1 %cmp872, label %land.lhs.true874, label %cond.false880

land.lhs.true874:                                 ; preds = %land.lhs.true869
  %340 = load i8*, i8** %s, align 8
  %arrayidx875 = getelementptr inbounds i8, i8* %340, i64 4
  %341 = load i8, i8* %arrayidx875, align 1
  %conv876 = zext i8 %341 to i32
  %cmp877 = icmp eq i32 185, %conv876
  br i1 %cmp877, label %cond.true879, label %cond.false880

cond.true879:                                     ; preds = %land.lhs.true874
  br i1 true, label %if.then2089, label %if.else2091

cond.false880:                                    ; preds = %land.lhs.true874, %land.lhs.true869, %cond.true863
  br i1 false, label %if.then2089, label %if.else2091

cond.false881:                                    ; preds = %cond.true858
  %342 = load i8*, i8** %s, align 8
  %arrayidx882 = getelementptr inbounds i8, i8* %342, i64 1
  %343 = load i8, i8* %arrayidx882, align 1
  %conv883 = zext i8 %343 to i32
  %cmp884 = icmp eq i32 189, %conv883
  br i1 %cmp884, label %land.lhs.true886, label %cond.false914

land.lhs.true886:                                 ; preds = %cond.false881
  %344 = load i8*, i8** %s, align 8
  %arrayidx887 = getelementptr inbounds i8, i8* %344, i64 2
  %345 = load i8, i8* %arrayidx887, align 1
  %conv888 = zext i8 %345 to i32
  %and889 = and i32 %conv888, 248
  %cmp890 = icmp eq i32 %and889, 160
  br i1 %cmp890, label %land.lhs.true903, label %lor.lhs.false892

lor.lhs.false892:                                 ; preds = %land.lhs.true886
  %346 = load i8*, i8** %s, align 8
  %arrayidx893 = getelementptr inbounds i8, i8* %346, i64 2
  %347 = load i8, i8* %arrayidx893, align 1
  %conv894 = zext i8 %347 to i32
  %and895 = and i32 %conv894, 251
  %cmp896 = icmp eq i32 %and895, 176
  br i1 %cmp896, label %land.lhs.true903, label %lor.lhs.false898

lor.lhs.false898:                                 ; preds = %lor.lhs.false892
  %348 = load i8*, i8** %s, align 8
  %arrayidx899 = getelementptr inbounds i8, i8* %348, i64 2
  %349 = load i8, i8* %arrayidx899, align 1
  %conv900 = zext i8 %349 to i32
  %cmp901 = icmp eq i32 %conv900, 188
  br i1 %cmp901, label %land.lhs.true903, label %cond.false914

land.lhs.true903:                                 ; preds = %lor.lhs.false898, %lor.lhs.false892, %land.lhs.true886
  %350 = load i8*, i8** %s, align 8
  %arrayidx904 = getelementptr inbounds i8, i8* %350, i64 3
  %351 = load i8, i8* %arrayidx904, align 1
  %conv905 = zext i8 %351 to i32
  %cmp906 = icmp eq i32 206, %conv905
  br i1 %cmp906, label %land.lhs.true908, label %cond.false914

land.lhs.true908:                                 ; preds = %land.lhs.true903
  %352 = load i8*, i8** %s, align 8
  %arrayidx909 = getelementptr inbounds i8, i8* %352, i64 4
  %353 = load i8, i8* %arrayidx909, align 1
  %conv910 = zext i8 %353 to i32
  %cmp911 = icmp eq i32 185, %conv910
  br i1 %cmp911, label %cond.true913, label %cond.false914

cond.true913:                                     ; preds = %land.lhs.true908
  br i1 true, label %if.then2089, label %if.else2091

cond.false914:                                    ; preds = %land.lhs.true908, %land.lhs.true903, %lor.lhs.false898, %cond.false881
  br i1 false, label %if.then2089, label %if.else2091

cond.false915:                                    ; preds = %cond.false853
  br i1 false, label %if.then2089, label %if.else2091

cond.false916:                                    ; preds = %if.end299
  %354 = load i8*, i8** %e, align 8
  %355 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast917 = ptrtoint i8* %354 to i64
  %sub.ptr.rhs.cast918 = ptrtoint i8* %355 to i64
  %sub.ptr.sub919 = sub i64 %sub.ptr.lhs.cast917, %sub.ptr.rhs.cast918
  %cmp920 = icmp sgt i64 %sub.ptr.sub919, 4
  br i1 %cmp920, label %cond.true922, label %cond.false1420

cond.true922:                                     ; preds = %cond.false916
  %356 = load i8*, i8** %s, align 8
  %arrayidx923 = getelementptr inbounds i8, i8* %356, i64 0
  %357 = load i8, i8* %arrayidx923, align 1
  %conv924 = zext i8 %357 to i32
  %cmp925 = icmp eq i32 97, %conv924
  br i1 %cmp925, label %cond.true927, label %cond.false939

cond.true927:                                     ; preds = %cond.true922
  %358 = load i8*, i8** %s, align 8
  %arrayidx928 = getelementptr inbounds i8, i8* %358, i64 1
  %359 = load i8, i8* %arrayidx928, align 1
  %conv929 = zext i8 %359 to i32
  %cmp930 = icmp eq i32 202, %conv929
  br i1 %cmp930, label %land.lhs.true932, label %cond.false938

land.lhs.true932:                                 ; preds = %cond.true927
  %360 = load i8*, i8** %s, align 8
  %arrayidx933 = getelementptr inbounds i8, i8* %360, i64 2
  %361 = load i8, i8* %arrayidx933, align 1
  %conv934 = zext i8 %361 to i32
  %cmp935 = icmp eq i32 190, %conv934
  br i1 %cmp935, label %cond.true937, label %cond.false938

cond.true937:                                     ; preds = %land.lhs.true932
  br i1 true, label %if.then2089, label %if.else2091

cond.false938:                                    ; preds = %land.lhs.true932, %cond.true927
  br i1 false, label %if.then2089, label %if.else2091

cond.false939:                                    ; preds = %cond.true922
  %362 = load i8*, i8** %s, align 8
  %arrayidx940 = getelementptr inbounds i8, i8* %362, i64 0
  %363 = load i8, i8* %arrayidx940, align 1
  %conv941 = zext i8 %363 to i32
  %cmp942 = icmp eq i32 102, %conv941
  br i1 %cmp942, label %cond.true944, label %cond.false973

cond.true944:                                     ; preds = %cond.false939
  %364 = load i8*, i8** %s, align 8
  %arrayidx945 = getelementptr inbounds i8, i8* %364, i64 1
  %365 = load i8, i8* %arrayidx945, align 1
  %conv946 = zext i8 %365 to i32
  %cmp947 = icmp eq i32 102, %conv946
  br i1 %cmp947, label %cond.true949, label %cond.false961

cond.true949:                                     ; preds = %cond.true944
  %366 = load i8*, i8** %s, align 8
  %arrayidx950 = getelementptr inbounds i8, i8* %366, i64 2
  %367 = load i8, i8* %arrayidx950, align 1
  %conv951 = zext i8 %367 to i32
  %cmp952 = icmp eq i32 105, %conv951
  br i1 %cmp952, label %cond.true959, label %lor.lhs.false954

lor.lhs.false954:                                 ; preds = %cond.true949
  %368 = load i8*, i8** %s, align 8
  %arrayidx955 = getelementptr inbounds i8, i8* %368, i64 2
  %369 = load i8, i8* %arrayidx955, align 1
  %conv956 = zext i8 %369 to i32
  %cmp957 = icmp eq i32 108, %conv956
  br i1 %cmp957, label %cond.true959, label %cond.false960

cond.true959:                                     ; preds = %lor.lhs.false954, %cond.true949
  br i1 true, label %if.then2089, label %if.else2091

cond.false960:                                    ; preds = %lor.lhs.false954
  br i1 true, label %if.then2089, label %if.else2091

cond.false961:                                    ; preds = %cond.true944
  %370 = load i8*, i8** %s, align 8
  %arrayidx962 = getelementptr inbounds i8, i8* %370, i64 1
  %371 = load i8, i8* %arrayidx962, align 1
  %conv963 = zext i8 %371 to i32
  %cmp964 = icmp eq i32 105, %conv963
  br i1 %cmp964, label %cond.true971, label %lor.lhs.false966

lor.lhs.false966:                                 ; preds = %cond.false961
  %372 = load i8*, i8** %s, align 8
  %arrayidx967 = getelementptr inbounds i8, i8* %372, i64 1
  %373 = load i8, i8* %arrayidx967, align 1
  %conv968 = zext i8 %373 to i32
  %cmp969 = icmp eq i32 108, %conv968
  br i1 %cmp969, label %cond.true971, label %cond.false972

cond.true971:                                     ; preds = %lor.lhs.false966, %cond.false961
  br i1 true, label %if.then2089, label %if.else2091

cond.false972:                                    ; preds = %lor.lhs.false966
  br i1 false, label %if.then2089, label %if.else2091

cond.false973:                                    ; preds = %cond.false939
  %374 = load i8*, i8** %s, align 8
  %arrayidx974 = getelementptr inbounds i8, i8* %374, i64 0
  %375 = load i8, i8* %arrayidx974, align 1
  %conv975 = zext i8 %375 to i32
  %cmp976 = icmp eq i32 104, %conv975
  br i1 %cmp976, label %cond.true978, label %cond.false990

cond.true978:                                     ; preds = %cond.false973
  %376 = load i8*, i8** %s, align 8
  %arrayidx979 = getelementptr inbounds i8, i8* %376, i64 1
  %377 = load i8, i8* %arrayidx979, align 1
  %conv980 = zext i8 %377 to i32
  %cmp981 = icmp eq i32 204, %conv980
  br i1 %cmp981, label %land.lhs.true983, label %cond.false989

land.lhs.true983:                                 ; preds = %cond.true978
  %378 = load i8*, i8** %s, align 8
  %arrayidx984 = getelementptr inbounds i8, i8* %378, i64 2
  %379 = load i8, i8* %arrayidx984, align 1
  %conv985 = zext i8 %379 to i32
  %cmp986 = icmp eq i32 177, %conv985
  br i1 %cmp986, label %cond.true988, label %cond.false989

cond.true988:                                     ; preds = %land.lhs.true983
  br i1 true, label %if.then2089, label %if.else2091

cond.false989:                                    ; preds = %land.lhs.true983, %cond.true978
  br i1 false, label %if.then2089, label %if.else2091

cond.false990:                                    ; preds = %cond.false973
  %380 = load i8*, i8** %s, align 8
  %arrayidx991 = getelementptr inbounds i8, i8* %380, i64 0
  %381 = load i8, i8* %arrayidx991, align 1
  %conv992 = zext i8 %381 to i32
  %cmp993 = icmp eq i32 105, %conv992
  br i1 %cmp993, label %cond.true995, label %cond.false1007

cond.true995:                                     ; preds = %cond.false990
  %382 = load i8*, i8** %s, align 8
  %arrayidx996 = getelementptr inbounds i8, i8* %382, i64 1
  %383 = load i8, i8* %arrayidx996, align 1
  %conv997 = zext i8 %383 to i32
  %cmp998 = icmp eq i32 204, %conv997
  br i1 %cmp998, label %land.lhs.true1000, label %cond.false1006

land.lhs.true1000:                                ; preds = %cond.true995
  %384 = load i8*, i8** %s, align 8
  %arrayidx1001 = getelementptr inbounds i8, i8* %384, i64 2
  %385 = load i8, i8* %arrayidx1001, align 1
  %conv1002 = zext i8 %385 to i32
  %cmp1003 = icmp eq i32 135, %conv1002
  br i1 %cmp1003, label %cond.true1005, label %cond.false1006

cond.true1005:                                    ; preds = %land.lhs.true1000
  br i1 true, label %if.then2089, label %if.else2091

cond.false1006:                                   ; preds = %land.lhs.true1000, %cond.true995
  br i1 false, label %if.then2089, label %if.else2091

cond.false1007:                                   ; preds = %cond.false990
  %386 = load i8*, i8** %s, align 8
  %arrayidx1008 = getelementptr inbounds i8, i8* %386, i64 0
  %387 = load i8, i8* %arrayidx1008, align 1
  %conv1009 = zext i8 %387 to i32
  %cmp1010 = icmp eq i32 106, %conv1009
  br i1 %cmp1010, label %cond.true1012, label %cond.false1024

cond.true1012:                                    ; preds = %cond.false1007
  %388 = load i8*, i8** %s, align 8
  %arrayidx1013 = getelementptr inbounds i8, i8* %388, i64 1
  %389 = load i8, i8* %arrayidx1013, align 1
  %conv1014 = zext i8 %389 to i32
  %cmp1015 = icmp eq i32 204, %conv1014
  br i1 %cmp1015, label %land.lhs.true1017, label %cond.false1023

land.lhs.true1017:                                ; preds = %cond.true1012
  %390 = load i8*, i8** %s, align 8
  %arrayidx1018 = getelementptr inbounds i8, i8* %390, i64 2
  %391 = load i8, i8* %arrayidx1018, align 1
  %conv1019 = zext i8 %391 to i32
  %cmp1020 = icmp eq i32 140, %conv1019
  br i1 %cmp1020, label %cond.true1022, label %cond.false1023

cond.true1022:                                    ; preds = %land.lhs.true1017
  br i1 true, label %if.then2089, label %if.else2091

cond.false1023:                                   ; preds = %land.lhs.true1017, %cond.true1012
  br i1 false, label %if.then2089, label %if.else2091

cond.false1024:                                   ; preds = %cond.false1007
  %392 = load i8*, i8** %s, align 8
  %arrayidx1025 = getelementptr inbounds i8, i8* %392, i64 0
  %393 = load i8, i8* %arrayidx1025, align 1
  %conv1026 = zext i8 %393 to i32
  %cmp1027 = icmp eq i32 115, %conv1026
  br i1 %cmp1027, label %cond.true1029, label %cond.false1041

cond.true1029:                                    ; preds = %cond.false1024
  %394 = load i8*, i8** %s, align 8
  %arrayidx1030 = getelementptr inbounds i8, i8* %394, i64 1
  %395 = load i8, i8* %arrayidx1030, align 1
  %conv1031 = zext i8 %395 to i32
  %cmp1032 = icmp eq i32 115, %conv1031
  br i1 %cmp1032, label %cond.true1039, label %lor.lhs.false1034

lor.lhs.false1034:                                ; preds = %cond.true1029
  %396 = load i8*, i8** %s, align 8
  %arrayidx1035 = getelementptr inbounds i8, i8* %396, i64 1
  %397 = load i8, i8* %arrayidx1035, align 1
  %conv1036 = zext i8 %397 to i32
  %cmp1037 = icmp eq i32 116, %conv1036
  br i1 %cmp1037, label %cond.true1039, label %cond.false1040

cond.true1039:                                    ; preds = %lor.lhs.false1034, %cond.true1029
  br i1 true, label %if.then2089, label %if.else2091

cond.false1040:                                   ; preds = %lor.lhs.false1034
  br i1 false, label %if.then2089, label %if.else2091

cond.false1041:                                   ; preds = %cond.false1024
  %398 = load i8*, i8** %s, align 8
  %arrayidx1042 = getelementptr inbounds i8, i8* %398, i64 0
  %399 = load i8, i8* %arrayidx1042, align 1
  %conv1043 = zext i8 %399 to i32
  %cmp1044 = icmp eq i32 116, %conv1043
  br i1 %cmp1044, label %cond.true1046, label %cond.false1058

cond.true1046:                                    ; preds = %cond.false1041
  %400 = load i8*, i8** %s, align 8
  %arrayidx1047 = getelementptr inbounds i8, i8* %400, i64 1
  %401 = load i8, i8* %arrayidx1047, align 1
  %conv1048 = zext i8 %401 to i32
  %cmp1049 = icmp eq i32 204, %conv1048
  br i1 %cmp1049, label %land.lhs.true1051, label %cond.false1057

land.lhs.true1051:                                ; preds = %cond.true1046
  %402 = load i8*, i8** %s, align 8
  %arrayidx1052 = getelementptr inbounds i8, i8* %402, i64 2
  %403 = load i8, i8* %arrayidx1052, align 1
  %conv1053 = zext i8 %403 to i32
  %cmp1054 = icmp eq i32 136, %conv1053
  br i1 %cmp1054, label %cond.true1056, label %cond.false1057

cond.true1056:                                    ; preds = %land.lhs.true1051
  br i1 true, label %if.then2089, label %if.else2091

cond.false1057:                                   ; preds = %land.lhs.true1051, %cond.true1046
  br i1 false, label %if.then2089, label %if.else2091

cond.false1058:                                   ; preds = %cond.false1041
  %404 = load i8*, i8** %s, align 8
  %arrayidx1059 = getelementptr inbounds i8, i8* %404, i64 0
  %405 = load i8, i8* %arrayidx1059, align 1
  %conv1060 = zext i8 %405 to i32
  %cmp1061 = icmp eq i32 119, %conv1060
  br i1 %cmp1061, label %cond.true1068, label %lor.lhs.false1063

lor.lhs.false1063:                                ; preds = %cond.false1058
  %406 = load i8*, i8** %s, align 8
  %arrayidx1064 = getelementptr inbounds i8, i8* %406, i64 0
  %407 = load i8, i8* %arrayidx1064, align 1
  %conv1065 = zext i8 %407 to i32
  %cmp1066 = icmp eq i32 121, %conv1065
  br i1 %cmp1066, label %cond.true1068, label %cond.false1080

cond.true1068:                                    ; preds = %lor.lhs.false1063, %cond.false1058
  %408 = load i8*, i8** %s, align 8
  %arrayidx1069 = getelementptr inbounds i8, i8* %408, i64 1
  %409 = load i8, i8* %arrayidx1069, align 1
  %conv1070 = zext i8 %409 to i32
  %cmp1071 = icmp eq i32 204, %conv1070
  br i1 %cmp1071, label %land.lhs.true1073, label %cond.false1079

land.lhs.true1073:                                ; preds = %cond.true1068
  %410 = load i8*, i8** %s, align 8
  %arrayidx1074 = getelementptr inbounds i8, i8* %410, i64 2
  %411 = load i8, i8* %arrayidx1074, align 1
  %conv1075 = zext i8 %411 to i32
  %cmp1076 = icmp eq i32 138, %conv1075
  br i1 %cmp1076, label %cond.true1078, label %cond.false1079

cond.true1078:                                    ; preds = %land.lhs.true1073
  br i1 true, label %if.then2089, label %if.else2091

cond.false1079:                                   ; preds = %land.lhs.true1073, %cond.true1068
  br i1 false, label %if.then2089, label %if.else2091

cond.false1080:                                   ; preds = %lor.lhs.false1063
  %412 = load i8*, i8** %s, align 8
  %arrayidx1081 = getelementptr inbounds i8, i8* %412, i64 0
  %413 = load i8, i8* %arrayidx1081, align 1
  %conv1082 = zext i8 %413 to i32
  %cmp1083 = icmp eq i32 197, %conv1082
  br i1 %cmp1083, label %cond.true1085, label %cond.false1102

cond.true1085:                                    ; preds = %cond.false1080
  %414 = load i8*, i8** %s, align 8
  %arrayidx1086 = getelementptr inbounds i8, i8* %414, i64 1
  %415 = load i8, i8* %arrayidx1086, align 1
  %conv1087 = zext i8 %415 to i32
  %cmp1088 = icmp eq i32 191, %conv1087
  br i1 %cmp1088, label %land.lhs.true1090, label %cond.false1101

land.lhs.true1090:                                ; preds = %cond.true1085
  %416 = load i8*, i8** %s, align 8
  %arrayidx1091 = getelementptr inbounds i8, i8* %416, i64 2
  %417 = load i8, i8* %arrayidx1091, align 1
  %conv1092 = zext i8 %417 to i32
  %cmp1093 = icmp eq i32 197, %conv1092
  br i1 %cmp1093, label %land.lhs.true1095, label %cond.false1101

land.lhs.true1095:                                ; preds = %land.lhs.true1090
  %418 = load i8*, i8** %s, align 8
  %arrayidx1096 = getelementptr inbounds i8, i8* %418, i64 3
  %419 = load i8, i8* %arrayidx1096, align 1
  %conv1097 = zext i8 %419 to i32
  %cmp1098 = icmp eq i32 191, %conv1097
  br i1 %cmp1098, label %cond.true1100, label %cond.false1101

cond.true1100:                                    ; preds = %land.lhs.true1095
  br i1 true, label %if.then2089, label %if.else2091

cond.false1101:                                   ; preds = %land.lhs.true1095, %land.lhs.true1090, %cond.true1085
  br i1 false, label %if.then2089, label %if.else2091

cond.false1102:                                   ; preds = %cond.false1080
  %420 = load i8*, i8** %s, align 8
  %arrayidx1103 = getelementptr inbounds i8, i8* %420, i64 0
  %421 = load i8, i8* %arrayidx1103, align 1
  %conv1104 = zext i8 %421 to i32
  %cmp1105 = icmp eq i32 202, %conv1104
  br i1 %cmp1105, label %cond.true1107, label %cond.false1119

cond.true1107:                                    ; preds = %cond.false1102
  %422 = load i8*, i8** %s, align 8
  %arrayidx1108 = getelementptr inbounds i8, i8* %422, i64 1
  %423 = load i8, i8* %arrayidx1108, align 1
  %conv1109 = zext i8 %423 to i32
  %cmp1110 = icmp eq i32 188, %conv1109
  br i1 %cmp1110, label %land.lhs.true1112, label %cond.false1118

land.lhs.true1112:                                ; preds = %cond.true1107
  %424 = load i8*, i8** %s, align 8
  %arrayidx1113 = getelementptr inbounds i8, i8* %424, i64 2
  %425 = load i8, i8* %arrayidx1113, align 1
  %conv1114 = zext i8 %425 to i32
  %cmp1115 = icmp eq i32 110, %conv1114
  br i1 %cmp1115, label %cond.true1117, label %cond.false1118

cond.true1117:                                    ; preds = %land.lhs.true1112
  br i1 true, label %if.then2089, label %if.else2091

cond.false1118:                                   ; preds = %land.lhs.true1112, %cond.true1107
  br i1 false, label %if.then2089, label %if.else2091

cond.false1119:                                   ; preds = %cond.false1102
  %426 = load i8*, i8** %s, align 8
  %arrayidx1120 = getelementptr inbounds i8, i8* %426, i64 0
  %427 = load i8, i8* %arrayidx1120, align 1
  %conv1121 = zext i8 %427 to i32
  %cmp1122 = icmp eq i32 206, %conv1121
  br i1 %cmp1122, label %cond.true1124, label %cond.false1193

cond.true1124:                                    ; preds = %cond.false1119
  %428 = load i8*, i8** %s, align 8
  %arrayidx1125 = getelementptr inbounds i8, i8* %428, i64 1
  %429 = load i8, i8* %arrayidx1125, align 1
  %conv1126 = zext i8 %429 to i32
  %and1127 = and i32 %conv1126, 253
  %cmp1128 = icmp eq i32 %and1127, 172
  br i1 %cmp1128, label %cond.true1130, label %cond.false1142

cond.true1130:                                    ; preds = %cond.true1124
  %430 = load i8*, i8** %s, align 8
  %arrayidx1131 = getelementptr inbounds i8, i8* %430, i64 2
  %431 = load i8, i8* %arrayidx1131, align 1
  %conv1132 = zext i8 %431 to i32
  %cmp1133 = icmp eq i32 206, %conv1132
  br i1 %cmp1133, label %land.lhs.true1135, label %cond.false1141

land.lhs.true1135:                                ; preds = %cond.true1130
  %432 = load i8*, i8** %s, align 8
  %arrayidx1136 = getelementptr inbounds i8, i8* %432, i64 3
  %433 = load i8, i8* %arrayidx1136, align 1
  %conv1137 = zext i8 %433 to i32
  %cmp1138 = icmp eq i32 185, %conv1137
  br i1 %cmp1138, label %cond.true1140, label %cond.false1141

cond.true1140:                                    ; preds = %land.lhs.true1135
  br i1 true, label %if.then2089, label %if.else2091

cond.false1141:                                   ; preds = %land.lhs.true1135, %cond.true1130
  br i1 false, label %if.then2089, label %if.else2091

cond.false1142:                                   ; preds = %cond.true1124
  %434 = load i8*, i8** %s, align 8
  %arrayidx1143 = getelementptr inbounds i8, i8* %434, i64 1
  %435 = load i8, i8* %arrayidx1143, align 1
  %conv1144 = zext i8 %435 to i32
  %cmp1145 = icmp eq i32 177, %conv1144
  br i1 %cmp1145, label %cond.true1152, label %lor.lhs.false1147

lor.lhs.false1147:                                ; preds = %cond.false1142
  %436 = load i8*, i8** %s, align 8
  %arrayidx1148 = getelementptr inbounds i8, i8* %436, i64 1
  %437 = load i8, i8* %arrayidx1148, align 1
  %conv1149 = zext i8 %437 to i32
  %cmp1150 = icmp eq i32 183, %conv1149
  br i1 %cmp1150, label %cond.true1152, label %cond.false1176

cond.true1152:                                    ; preds = %lor.lhs.false1147, %cond.false1142
  %438 = load i8*, i8** %s, align 8
  %arrayidx1153 = getelementptr inbounds i8, i8* %438, i64 2
  %439 = load i8, i8* %arrayidx1153, align 1
  %conv1154 = zext i8 %439 to i32
  %cmp1155 = icmp eq i32 205, %conv1154
  br i1 %cmp1155, label %cond.true1157, label %cond.false1164

cond.true1157:                                    ; preds = %cond.true1152
  %440 = load i8*, i8** %s, align 8
  %arrayidx1158 = getelementptr inbounds i8, i8* %440, i64 3
  %441 = load i8, i8* %arrayidx1158, align 1
  %conv1159 = zext i8 %441 to i32
  %cmp1160 = icmp eq i32 130, %conv1159
  br i1 %cmp1160, label %cond.true1162, label %cond.false1163

cond.true1162:                                    ; preds = %cond.true1157
  br i1 true, label %if.then2089, label %if.else2091

cond.false1163:                                   ; preds = %cond.true1157
  br i1 false, label %if.then2089, label %if.else2091

cond.false1164:                                   ; preds = %cond.true1152
  %442 = load i8*, i8** %s, align 8
  %arrayidx1165 = getelementptr inbounds i8, i8* %442, i64 2
  %443 = load i8, i8* %arrayidx1165, align 1
  %conv1166 = zext i8 %443 to i32
  %cmp1167 = icmp eq i32 206, %conv1166
  br i1 %cmp1167, label %land.lhs.true1169, label %cond.false1175

land.lhs.true1169:                                ; preds = %cond.false1164
  %444 = load i8*, i8** %s, align 8
  %arrayidx1170 = getelementptr inbounds i8, i8* %444, i64 3
  %445 = load i8, i8* %arrayidx1170, align 1
  %conv1171 = zext i8 %445 to i32
  %cmp1172 = icmp eq i32 185, %conv1171
  br i1 %cmp1172, label %cond.true1174, label %cond.false1175

cond.true1174:                                    ; preds = %land.lhs.true1169
  br i1 true, label %if.then2089, label %if.else2091

cond.false1175:                                   ; preds = %land.lhs.true1169, %cond.false1164
  br i1 false, label %if.then2089, label %if.else2091

cond.false1176:                                   ; preds = %lor.lhs.false1147
  %446 = load i8*, i8** %s, align 8
  %arrayidx1177 = getelementptr inbounds i8, i8* %446, i64 1
  %447 = load i8, i8* %arrayidx1177, align 1
  %conv1178 = zext i8 %447 to i32
  %cmp1179 = icmp eq i32 185, %conv1178
  br i1 %cmp1179, label %land.lhs.true1181, label %cond.false1192

land.lhs.true1181:                                ; preds = %cond.false1176
  %448 = load i8*, i8** %s, align 8
  %arrayidx1182 = getelementptr inbounds i8, i8* %448, i64 2
  %449 = load i8, i8* %arrayidx1182, align 1
  %conv1183 = zext i8 %449 to i32
  %cmp1184 = icmp eq i32 205, %conv1183
  br i1 %cmp1184, label %land.lhs.true1186, label %cond.false1192

land.lhs.true1186:                                ; preds = %land.lhs.true1181
  %450 = load i8*, i8** %s, align 8
  %arrayidx1187 = getelementptr inbounds i8, i8* %450, i64 3
  %451 = load i8, i8* %arrayidx1187, align 1
  %conv1188 = zext i8 %451 to i32
  %cmp1189 = icmp eq i32 130, %conv1188
  br i1 %cmp1189, label %cond.true1191, label %cond.false1192

cond.true1191:                                    ; preds = %land.lhs.true1186
  br i1 true, label %if.then2089, label %if.else2091

cond.false1192:                                   ; preds = %land.lhs.true1186, %land.lhs.true1181, %cond.false1176
  br i1 false, label %if.then2089, label %if.else2091

cond.false1193:                                   ; preds = %cond.false1119
  %452 = load i8*, i8** %s, align 8
  %arrayidx1194 = getelementptr inbounds i8, i8* %452, i64 0
  %453 = load i8, i8* %arrayidx1194, align 1
  %conv1195 = zext i8 %453 to i32
  %cmp1196 = icmp eq i32 207, %conv1195
  br i1 %cmp1196, label %cond.true1198, label %cond.false1290

cond.true1198:                                    ; preds = %cond.false1193
  %454 = load i8*, i8** %s, align 8
  %arrayidx1199 = getelementptr inbounds i8, i8* %454, i64 1
  %455 = load i8, i8* %arrayidx1199, align 1
  %conv1200 = zext i8 %455 to i32
  %cmp1201 = icmp eq i32 129, %conv1200
  br i1 %cmp1201, label %cond.true1203, label %cond.false1215

cond.true1203:                                    ; preds = %cond.true1198
  %456 = load i8*, i8** %s, align 8
  %arrayidx1204 = getelementptr inbounds i8, i8* %456, i64 2
  %457 = load i8, i8* %arrayidx1204, align 1
  %conv1205 = zext i8 %457 to i32
  %cmp1206 = icmp eq i32 204, %conv1205
  br i1 %cmp1206, label %land.lhs.true1208, label %cond.false1214

land.lhs.true1208:                                ; preds = %cond.true1203
  %458 = load i8*, i8** %s, align 8
  %arrayidx1209 = getelementptr inbounds i8, i8* %458, i64 3
  %459 = load i8, i8* %arrayidx1209, align 1
  %conv1210 = zext i8 %459 to i32
  %cmp1211 = icmp eq i32 147, %conv1210
  br i1 %cmp1211, label %cond.true1213, label %cond.false1214

cond.true1213:                                    ; preds = %land.lhs.true1208
  br i1 true, label %if.then2089, label %if.else2091

cond.false1214:                                   ; preds = %land.lhs.true1208, %cond.true1203
  br i1 false, label %if.then2089, label %if.else2091

cond.false1215:                                   ; preds = %cond.true1198
  %460 = load i8*, i8** %s, align 8
  %arrayidx1216 = getelementptr inbounds i8, i8* %460, i64 1
  %461 = load i8, i8* %arrayidx1216, align 1
  %conv1217 = zext i8 %461 to i32
  %cmp1218 = icmp eq i32 133, %conv1217
  br i1 %cmp1218, label %cond.true1220, label %cond.false1244

cond.true1220:                                    ; preds = %cond.false1215
  %462 = load i8*, i8** %s, align 8
  %arrayidx1221 = getelementptr inbounds i8, i8* %462, i64 2
  %463 = load i8, i8* %arrayidx1221, align 1
  %conv1222 = zext i8 %463 to i32
  %cmp1223 = icmp eq i32 204, %conv1222
  br i1 %cmp1223, label %cond.true1225, label %cond.false1232

cond.true1225:                                    ; preds = %cond.true1220
  %464 = load i8*, i8** %s, align 8
  %arrayidx1226 = getelementptr inbounds i8, i8* %464, i64 3
  %465 = load i8, i8* %arrayidx1226, align 1
  %conv1227 = zext i8 %465 to i32
  %cmp1228 = icmp eq i32 147, %conv1227
  br i1 %cmp1228, label %cond.true1230, label %cond.false1231

cond.true1230:                                    ; preds = %cond.true1225
  br i1 true, label %if.then2089, label %if.else2091

cond.false1231:                                   ; preds = %cond.true1225
  br i1 false, label %if.then2089, label %if.else2091

cond.false1232:                                   ; preds = %cond.true1220
  %466 = load i8*, i8** %s, align 8
  %arrayidx1233 = getelementptr inbounds i8, i8* %466, i64 2
  %467 = load i8, i8* %arrayidx1233, align 1
  %conv1234 = zext i8 %467 to i32
  %cmp1235 = icmp eq i32 205, %conv1234
  br i1 %cmp1235, label %land.lhs.true1237, label %cond.false1243

land.lhs.true1237:                                ; preds = %cond.false1232
  %468 = load i8*, i8** %s, align 8
  %arrayidx1238 = getelementptr inbounds i8, i8* %468, i64 3
  %469 = load i8, i8* %arrayidx1238, align 1
  %conv1239 = zext i8 %469 to i32
  %cmp1240 = icmp eq i32 130, %conv1239
  br i1 %cmp1240, label %cond.true1242, label %cond.false1243

cond.true1242:                                    ; preds = %land.lhs.true1237
  br i1 true, label %if.then2089, label %if.else2091

cond.false1243:                                   ; preds = %land.lhs.true1237, %cond.false1232
  br i1 false, label %if.then2089, label %if.else2091

cond.false1244:                                   ; preds = %cond.false1215
  %470 = load i8*, i8** %s, align 8
  %arrayidx1245 = getelementptr inbounds i8, i8* %470, i64 1
  %471 = load i8, i8* %arrayidx1245, align 1
  %conv1246 = zext i8 %471 to i32
  %cmp1247 = icmp eq i32 137, %conv1246
  br i1 %cmp1247, label %cond.true1249, label %cond.false1273

cond.true1249:                                    ; preds = %cond.false1244
  %472 = load i8*, i8** %s, align 8
  %arrayidx1250 = getelementptr inbounds i8, i8* %472, i64 2
  %473 = load i8, i8* %arrayidx1250, align 1
  %conv1251 = zext i8 %473 to i32
  %cmp1252 = icmp eq i32 205, %conv1251
  br i1 %cmp1252, label %cond.true1254, label %cond.false1261

cond.true1254:                                    ; preds = %cond.true1249
  %474 = load i8*, i8** %s, align 8
  %arrayidx1255 = getelementptr inbounds i8, i8* %474, i64 3
  %475 = load i8, i8* %arrayidx1255, align 1
  %conv1256 = zext i8 %475 to i32
  %cmp1257 = icmp eq i32 130, %conv1256
  br i1 %cmp1257, label %cond.true1259, label %cond.false1260

cond.true1259:                                    ; preds = %cond.true1254
  br i1 true, label %if.then2089, label %if.else2091

cond.false1260:                                   ; preds = %cond.true1254
  br i1 false, label %if.then2089, label %if.else2091

cond.false1261:                                   ; preds = %cond.true1249
  %476 = load i8*, i8** %s, align 8
  %arrayidx1262 = getelementptr inbounds i8, i8* %476, i64 2
  %477 = load i8, i8* %arrayidx1262, align 1
  %conv1263 = zext i8 %477 to i32
  %cmp1264 = icmp eq i32 206, %conv1263
  br i1 %cmp1264, label %land.lhs.true1266, label %cond.false1272

land.lhs.true1266:                                ; preds = %cond.false1261
  %478 = load i8*, i8** %s, align 8
  %arrayidx1267 = getelementptr inbounds i8, i8* %478, i64 3
  %479 = load i8, i8* %arrayidx1267, align 1
  %conv1268 = zext i8 %479 to i32
  %cmp1269 = icmp eq i32 185, %conv1268
  br i1 %cmp1269, label %cond.true1271, label %cond.false1272

cond.true1271:                                    ; preds = %land.lhs.true1266
  br i1 true, label %if.then2089, label %if.else2091

cond.false1272:                                   ; preds = %land.lhs.true1266, %cond.false1261
  br i1 false, label %if.then2089, label %if.else2091

cond.false1273:                                   ; preds = %cond.false1244
  %480 = load i8*, i8** %s, align 8
  %arrayidx1274 = getelementptr inbounds i8, i8* %480, i64 1
  %481 = load i8, i8* %arrayidx1274, align 1
  %conv1275 = zext i8 %481 to i32
  %cmp1276 = icmp eq i32 142, %conv1275
  br i1 %cmp1276, label %land.lhs.true1278, label %cond.false1289

land.lhs.true1278:                                ; preds = %cond.false1273
  %482 = load i8*, i8** %s, align 8
  %arrayidx1279 = getelementptr inbounds i8, i8* %482, i64 2
  %483 = load i8, i8* %arrayidx1279, align 1
  %conv1280 = zext i8 %483 to i32
  %cmp1281 = icmp eq i32 206, %conv1280
  br i1 %cmp1281, label %land.lhs.true1283, label %cond.false1289

land.lhs.true1283:                                ; preds = %land.lhs.true1278
  %484 = load i8*, i8** %s, align 8
  %arrayidx1284 = getelementptr inbounds i8, i8* %484, i64 3
  %485 = load i8, i8* %arrayidx1284, align 1
  %conv1285 = zext i8 %485 to i32
  %cmp1286 = icmp eq i32 185, %conv1285
  br i1 %cmp1286, label %cond.true1288, label %cond.false1289

cond.true1288:                                    ; preds = %land.lhs.true1283
  br i1 true, label %if.then2089, label %if.else2091

cond.false1289:                                   ; preds = %land.lhs.true1283, %land.lhs.true1278, %cond.false1273
  br i1 false, label %if.then2089, label %if.else2091

cond.false1290:                                   ; preds = %cond.false1193
  %486 = load i8*, i8** %s, align 8
  %arrayidx1291 = getelementptr inbounds i8, i8* %486, i64 0
  %487 = load i8, i8* %arrayidx1291, align 1
  %conv1292 = zext i8 %487 to i32
  %cmp1293 = icmp eq i32 213, %conv1292
  br i1 %cmp1293, label %cond.true1295, label %cond.false1357

cond.true1295:                                    ; preds = %cond.false1290
  %488 = load i8*, i8** %s, align 8
  %arrayidx1296 = getelementptr inbounds i8, i8* %488, i64 1
  %489 = load i8, i8* %arrayidx1296, align 1
  %conv1297 = zext i8 %489 to i32
  %cmp1298 = icmp eq i32 165, %conv1297
  br i1 %cmp1298, label %cond.true1300, label %cond.false1312

cond.true1300:                                    ; preds = %cond.true1295
  %490 = load i8*, i8** %s, align 8
  %arrayidx1301 = getelementptr inbounds i8, i8* %490, i64 2
  %491 = load i8, i8* %arrayidx1301, align 1
  %conv1302 = zext i8 %491 to i32
  %cmp1303 = icmp eq i32 214, %conv1302
  br i1 %cmp1303, label %land.lhs.true1305, label %cond.false1311

land.lhs.true1305:                                ; preds = %cond.true1300
  %492 = load i8*, i8** %s, align 8
  %arrayidx1306 = getelementptr inbounds i8, i8* %492, i64 3
  %493 = load i8, i8* %arrayidx1306, align 1
  %conv1307 = zext i8 %493 to i32
  %cmp1308 = icmp eq i32 130, %conv1307
  br i1 %cmp1308, label %cond.true1310, label %cond.false1311

cond.true1310:                                    ; preds = %land.lhs.true1305
  br i1 true, label %if.then2089, label %if.else2091

cond.false1311:                                   ; preds = %land.lhs.true1305, %cond.true1300
  br i1 false, label %if.then2089, label %if.else2091

cond.false1312:                                   ; preds = %cond.true1295
  %494 = load i8*, i8** %s, align 8
  %arrayidx1313 = getelementptr inbounds i8, i8* %494, i64 1
  %495 = load i8, i8* %arrayidx1313, align 1
  %conv1314 = zext i8 %495 to i32
  %cmp1315 = icmp eq i32 180, %conv1314
  br i1 %cmp1315, label %cond.true1317, label %cond.false1340

cond.true1317:                                    ; preds = %cond.false1312
  %496 = load i8*, i8** %s, align 8
  %arrayidx1318 = getelementptr inbounds i8, i8* %496, i64 2
  %497 = load i8, i8* %arrayidx1318, align 1
  %conv1319 = zext i8 %497 to i32
  %cmp1320 = icmp eq i32 213, %conv1319
  br i1 %cmp1320, label %land.lhs.true1322, label %cond.false1339

land.lhs.true1322:                                ; preds = %cond.true1317
  %498 = load i8*, i8** %s, align 8
  %arrayidx1323 = getelementptr inbounds i8, i8* %498, i64 3
  %499 = load i8, i8* %arrayidx1323, align 1
  %conv1324 = zext i8 %499 to i32
  %and1325 = and i32 %conv1324, 247
  %cmp1326 = icmp eq i32 %and1325, 165
  br i1 %cmp1326, label %cond.true1338, label %lor.lhs.false1328

lor.lhs.false1328:                                ; preds = %land.lhs.true1322
  %500 = load i8*, i8** %s, align 8
  %arrayidx1329 = getelementptr inbounds i8, i8* %500, i64 3
  %501 = load i8, i8* %arrayidx1329, align 1
  %conv1330 = zext i8 %501 to i32
  %cmp1331 = icmp eq i32 %conv1330, 171
  br i1 %cmp1331, label %cond.true1338, label %lor.lhs.false1333

lor.lhs.false1333:                                ; preds = %lor.lhs.false1328
  %502 = load i8*, i8** %s, align 8
  %arrayidx1334 = getelementptr inbounds i8, i8* %502, i64 3
  %503 = load i8, i8* %arrayidx1334, align 1
  %conv1335 = zext i8 %503 to i32
  %cmp1336 = icmp eq i32 %conv1335, 182
  br i1 %cmp1336, label %cond.true1338, label %cond.false1339

cond.true1338:                                    ; preds = %lor.lhs.false1333, %lor.lhs.false1328, %land.lhs.true1322
  br i1 true, label %if.then2089, label %if.else2091

cond.false1339:                                   ; preds = %lor.lhs.false1333, %cond.true1317
  br i1 false, label %if.then2089, label %if.else2091

cond.false1340:                                   ; preds = %cond.false1312
  %504 = load i8*, i8** %s, align 8
  %arrayidx1341 = getelementptr inbounds i8, i8* %504, i64 1
  %505 = load i8, i8* %arrayidx1341, align 1
  %conv1342 = zext i8 %505 to i32
  %cmp1343 = icmp eq i32 190, %conv1342
  br i1 %cmp1343, label %land.lhs.true1345, label %cond.false1356

land.lhs.true1345:                                ; preds = %cond.false1340
  %506 = load i8*, i8** %s, align 8
  %arrayidx1346 = getelementptr inbounds i8, i8* %506, i64 2
  %507 = load i8, i8* %arrayidx1346, align 1
  %conv1347 = zext i8 %507 to i32
  %cmp1348 = icmp eq i32 213, %conv1347
  br i1 %cmp1348, label %land.lhs.true1350, label %cond.false1356

land.lhs.true1350:                                ; preds = %land.lhs.true1345
  %508 = load i8*, i8** %s, align 8
  %arrayidx1351 = getelementptr inbounds i8, i8* %508, i64 3
  %509 = load i8, i8* %arrayidx1351, align 1
  %conv1352 = zext i8 %509 to i32
  %cmp1353 = icmp eq i32 182, %conv1352
  br i1 %cmp1353, label %cond.true1355, label %cond.false1356

cond.true1355:                                    ; preds = %land.lhs.true1350
  br i1 true, label %if.then2089, label %if.else2091

cond.false1356:                                   ; preds = %land.lhs.true1350, %land.lhs.true1345, %cond.false1340
  br i1 false, label %if.then2089, label %if.else2091

cond.false1357:                                   ; preds = %cond.false1290
  %510 = load i8*, i8** %s, align 8
  %arrayidx1358 = getelementptr inbounds i8, i8* %510, i64 0
  %511 = load i8, i8* %arrayidx1358, align 1
  %conv1359 = zext i8 %511 to i32
  %cmp1360 = icmp eq i32 225, %conv1359
  br i1 %cmp1360, label %cond.true1362, label %cond.false1419

cond.true1362:                                    ; preds = %cond.false1357
  %512 = load i8*, i8** %s, align 8
  %arrayidx1363 = getelementptr inbounds i8, i8* %512, i64 1
  %513 = load i8, i8* %arrayidx1363, align 1
  %conv1364 = zext i8 %513 to i32
  %cmp1365 = icmp eq i32 188, %conv1364
  br i1 %cmp1365, label %cond.true1367, label %cond.false1385

cond.true1367:                                    ; preds = %cond.true1362
  %514 = load i8*, i8** %s, align 8
  %arrayidx1368 = getelementptr inbounds i8, i8* %514, i64 2
  %515 = load i8, i8* %arrayidx1368, align 1
  %conv1369 = zext i8 %515 to i32
  %and1370 = and i32 %conv1369, 216
  %cmp1371 = icmp eq i32 %and1370, 128
  br i1 %cmp1371, label %land.lhs.true1373, label %cond.false1384

land.lhs.true1373:                                ; preds = %cond.true1367
  %516 = load i8*, i8** %s, align 8
  %arrayidx1374 = getelementptr inbounds i8, i8* %516, i64 3
  %517 = load i8, i8* %arrayidx1374, align 1
  %conv1375 = zext i8 %517 to i32
  %cmp1376 = icmp eq i32 206, %conv1375
  br i1 %cmp1376, label %land.lhs.true1378, label %cond.false1384

land.lhs.true1378:                                ; preds = %land.lhs.true1373
  %518 = load i8*, i8** %s, align 8
  %arrayidx1379 = getelementptr inbounds i8, i8* %518, i64 4
  %519 = load i8, i8* %arrayidx1379, align 1
  %conv1380 = zext i8 %519 to i32
  %cmp1381 = icmp eq i32 185, %conv1380
  br i1 %cmp1381, label %cond.true1383, label %cond.false1384

cond.true1383:                                    ; preds = %land.lhs.true1378
  br i1 true, label %if.then2089, label %if.else2091

cond.false1384:                                   ; preds = %land.lhs.true1378, %land.lhs.true1373, %cond.true1367
  br i1 false, label %if.then2089, label %if.else2091

cond.false1385:                                   ; preds = %cond.true1362
  %520 = load i8*, i8** %s, align 8
  %arrayidx1386 = getelementptr inbounds i8, i8* %520, i64 1
  %521 = load i8, i8* %arrayidx1386, align 1
  %conv1387 = zext i8 %521 to i32
  %cmp1388 = icmp eq i32 189, %conv1387
  br i1 %cmp1388, label %land.lhs.true1390, label %cond.false1418

land.lhs.true1390:                                ; preds = %cond.false1385
  %522 = load i8*, i8** %s, align 8
  %arrayidx1391 = getelementptr inbounds i8, i8* %522, i64 2
  %523 = load i8, i8* %arrayidx1391, align 1
  %conv1392 = zext i8 %523 to i32
  %and1393 = and i32 %conv1392, 248
  %cmp1394 = icmp eq i32 %and1393, 160
  br i1 %cmp1394, label %land.lhs.true1407, label %lor.lhs.false1396

lor.lhs.false1396:                                ; preds = %land.lhs.true1390
  %524 = load i8*, i8** %s, align 8
  %arrayidx1397 = getelementptr inbounds i8, i8* %524, i64 2
  %525 = load i8, i8* %arrayidx1397, align 1
  %conv1398 = zext i8 %525 to i32
  %and1399 = and i32 %conv1398, 251
  %cmp1400 = icmp eq i32 %and1399, 176
  br i1 %cmp1400, label %land.lhs.true1407, label %lor.lhs.false1402

lor.lhs.false1402:                                ; preds = %lor.lhs.false1396
  %526 = load i8*, i8** %s, align 8
  %arrayidx1403 = getelementptr inbounds i8, i8* %526, i64 2
  %527 = load i8, i8* %arrayidx1403, align 1
  %conv1404 = zext i8 %527 to i32
  %cmp1405 = icmp eq i32 %conv1404, 188
  br i1 %cmp1405, label %land.lhs.true1407, label %cond.false1418

land.lhs.true1407:                                ; preds = %lor.lhs.false1402, %lor.lhs.false1396, %land.lhs.true1390
  %528 = load i8*, i8** %s, align 8
  %arrayidx1408 = getelementptr inbounds i8, i8* %528, i64 3
  %529 = load i8, i8* %arrayidx1408, align 1
  %conv1409 = zext i8 %529 to i32
  %cmp1410 = icmp eq i32 206, %conv1409
  br i1 %cmp1410, label %land.lhs.true1412, label %cond.false1418

land.lhs.true1412:                                ; preds = %land.lhs.true1407
  %530 = load i8*, i8** %s, align 8
  %arrayidx1413 = getelementptr inbounds i8, i8* %530, i64 4
  %531 = load i8, i8* %arrayidx1413, align 1
  %conv1414 = zext i8 %531 to i32
  %cmp1415 = icmp eq i32 185, %conv1414
  br i1 %cmp1415, label %cond.true1417, label %cond.false1418

cond.true1417:                                    ; preds = %land.lhs.true1412
  br i1 true, label %if.then2089, label %if.else2091

cond.false1418:                                   ; preds = %land.lhs.true1412, %land.lhs.true1407, %lor.lhs.false1402, %cond.false1385
  br i1 false, label %if.then2089, label %if.else2091

cond.false1419:                                   ; preds = %cond.false1357
  br i1 false, label %if.then2089, label %if.else2091

cond.false1420:                                   ; preds = %cond.false916
  %532 = load i8*, i8** %e, align 8
  %533 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast1421 = ptrtoint i8* %532 to i64
  %sub.ptr.rhs.cast1422 = ptrtoint i8* %533 to i64
  %sub.ptr.sub1423 = sub i64 %sub.ptr.lhs.cast1421, %sub.ptr.rhs.cast1422
  %cmp1424 = icmp sgt i64 %sub.ptr.sub1423, 3
  br i1 %cmp1424, label %cond.true1426, label %cond.false1862

cond.true1426:                                    ; preds = %cond.false1420
  %534 = load i8*, i8** %s, align 8
  %arrayidx1427 = getelementptr inbounds i8, i8* %534, i64 0
  %535 = load i8, i8* %arrayidx1427, align 1
  %conv1428 = zext i8 %535 to i32
  %cmp1429 = icmp eq i32 97, %conv1428
  br i1 %cmp1429, label %cond.true1431, label %cond.false1443

cond.true1431:                                    ; preds = %cond.true1426
  %536 = load i8*, i8** %s, align 8
  %arrayidx1432 = getelementptr inbounds i8, i8* %536, i64 1
  %537 = load i8, i8* %arrayidx1432, align 1
  %conv1433 = zext i8 %537 to i32
  %cmp1434 = icmp eq i32 202, %conv1433
  br i1 %cmp1434, label %land.lhs.true1436, label %cond.false1442

land.lhs.true1436:                                ; preds = %cond.true1431
  %538 = load i8*, i8** %s, align 8
  %arrayidx1437 = getelementptr inbounds i8, i8* %538, i64 2
  %539 = load i8, i8* %arrayidx1437, align 1
  %conv1438 = zext i8 %539 to i32
  %cmp1439 = icmp eq i32 190, %conv1438
  br i1 %cmp1439, label %cond.true1441, label %cond.false1442

cond.true1441:                                    ; preds = %land.lhs.true1436
  br i1 true, label %if.then2089, label %if.else2091

cond.false1442:                                   ; preds = %land.lhs.true1436, %cond.true1431
  br i1 false, label %if.then2089, label %if.else2091

cond.false1443:                                   ; preds = %cond.true1426
  %540 = load i8*, i8** %s, align 8
  %arrayidx1444 = getelementptr inbounds i8, i8* %540, i64 0
  %541 = load i8, i8* %arrayidx1444, align 1
  %conv1445 = zext i8 %541 to i32
  %cmp1446 = icmp eq i32 102, %conv1445
  br i1 %cmp1446, label %cond.true1448, label %cond.false1477

cond.true1448:                                    ; preds = %cond.false1443
  %542 = load i8*, i8** %s, align 8
  %arrayidx1449 = getelementptr inbounds i8, i8* %542, i64 1
  %543 = load i8, i8* %arrayidx1449, align 1
  %conv1450 = zext i8 %543 to i32
  %cmp1451 = icmp eq i32 102, %conv1450
  br i1 %cmp1451, label %cond.true1453, label %cond.false1465

cond.true1453:                                    ; preds = %cond.true1448
  %544 = load i8*, i8** %s, align 8
  %arrayidx1454 = getelementptr inbounds i8, i8* %544, i64 2
  %545 = load i8, i8* %arrayidx1454, align 1
  %conv1455 = zext i8 %545 to i32
  %cmp1456 = icmp eq i32 105, %conv1455
  br i1 %cmp1456, label %cond.true1463, label %lor.lhs.false1458

lor.lhs.false1458:                                ; preds = %cond.true1453
  %546 = load i8*, i8** %s, align 8
  %arrayidx1459 = getelementptr inbounds i8, i8* %546, i64 2
  %547 = load i8, i8* %arrayidx1459, align 1
  %conv1460 = zext i8 %547 to i32
  %cmp1461 = icmp eq i32 108, %conv1460
  br i1 %cmp1461, label %cond.true1463, label %cond.false1464

cond.true1463:                                    ; preds = %lor.lhs.false1458, %cond.true1453
  br i1 true, label %if.then2089, label %if.else2091

cond.false1464:                                   ; preds = %lor.lhs.false1458
  br i1 true, label %if.then2089, label %if.else2091

cond.false1465:                                   ; preds = %cond.true1448
  %548 = load i8*, i8** %s, align 8
  %arrayidx1466 = getelementptr inbounds i8, i8* %548, i64 1
  %549 = load i8, i8* %arrayidx1466, align 1
  %conv1467 = zext i8 %549 to i32
  %cmp1468 = icmp eq i32 105, %conv1467
  br i1 %cmp1468, label %cond.true1475, label %lor.lhs.false1470

lor.lhs.false1470:                                ; preds = %cond.false1465
  %550 = load i8*, i8** %s, align 8
  %arrayidx1471 = getelementptr inbounds i8, i8* %550, i64 1
  %551 = load i8, i8* %arrayidx1471, align 1
  %conv1472 = zext i8 %551 to i32
  %cmp1473 = icmp eq i32 108, %conv1472
  br i1 %cmp1473, label %cond.true1475, label %cond.false1476

cond.true1475:                                    ; preds = %lor.lhs.false1470, %cond.false1465
  br i1 true, label %if.then2089, label %if.else2091

cond.false1476:                                   ; preds = %lor.lhs.false1470
  br i1 false, label %if.then2089, label %if.else2091

cond.false1477:                                   ; preds = %cond.false1443
  %552 = load i8*, i8** %s, align 8
  %arrayidx1478 = getelementptr inbounds i8, i8* %552, i64 0
  %553 = load i8, i8* %arrayidx1478, align 1
  %conv1479 = zext i8 %553 to i32
  %cmp1480 = icmp eq i32 104, %conv1479
  br i1 %cmp1480, label %cond.true1482, label %cond.false1494

cond.true1482:                                    ; preds = %cond.false1477
  %554 = load i8*, i8** %s, align 8
  %arrayidx1483 = getelementptr inbounds i8, i8* %554, i64 1
  %555 = load i8, i8* %arrayidx1483, align 1
  %conv1484 = zext i8 %555 to i32
  %cmp1485 = icmp eq i32 204, %conv1484
  br i1 %cmp1485, label %land.lhs.true1487, label %cond.false1493

land.lhs.true1487:                                ; preds = %cond.true1482
  %556 = load i8*, i8** %s, align 8
  %arrayidx1488 = getelementptr inbounds i8, i8* %556, i64 2
  %557 = load i8, i8* %arrayidx1488, align 1
  %conv1489 = zext i8 %557 to i32
  %cmp1490 = icmp eq i32 177, %conv1489
  br i1 %cmp1490, label %cond.true1492, label %cond.false1493

cond.true1492:                                    ; preds = %land.lhs.true1487
  br i1 true, label %if.then2089, label %if.else2091

cond.false1493:                                   ; preds = %land.lhs.true1487, %cond.true1482
  br i1 false, label %if.then2089, label %if.else2091

cond.false1494:                                   ; preds = %cond.false1477
  %558 = load i8*, i8** %s, align 8
  %arrayidx1495 = getelementptr inbounds i8, i8* %558, i64 0
  %559 = load i8, i8* %arrayidx1495, align 1
  %conv1496 = zext i8 %559 to i32
  %cmp1497 = icmp eq i32 105, %conv1496
  br i1 %cmp1497, label %cond.true1499, label %cond.false1511

cond.true1499:                                    ; preds = %cond.false1494
  %560 = load i8*, i8** %s, align 8
  %arrayidx1500 = getelementptr inbounds i8, i8* %560, i64 1
  %561 = load i8, i8* %arrayidx1500, align 1
  %conv1501 = zext i8 %561 to i32
  %cmp1502 = icmp eq i32 204, %conv1501
  br i1 %cmp1502, label %land.lhs.true1504, label %cond.false1510

land.lhs.true1504:                                ; preds = %cond.true1499
  %562 = load i8*, i8** %s, align 8
  %arrayidx1505 = getelementptr inbounds i8, i8* %562, i64 2
  %563 = load i8, i8* %arrayidx1505, align 1
  %conv1506 = zext i8 %563 to i32
  %cmp1507 = icmp eq i32 135, %conv1506
  br i1 %cmp1507, label %cond.true1509, label %cond.false1510

cond.true1509:                                    ; preds = %land.lhs.true1504
  br i1 true, label %if.then2089, label %if.else2091

cond.false1510:                                   ; preds = %land.lhs.true1504, %cond.true1499
  br i1 false, label %if.then2089, label %if.else2091

cond.false1511:                                   ; preds = %cond.false1494
  %564 = load i8*, i8** %s, align 8
  %arrayidx1512 = getelementptr inbounds i8, i8* %564, i64 0
  %565 = load i8, i8* %arrayidx1512, align 1
  %conv1513 = zext i8 %565 to i32
  %cmp1514 = icmp eq i32 106, %conv1513
  br i1 %cmp1514, label %cond.true1516, label %cond.false1528

cond.true1516:                                    ; preds = %cond.false1511
  %566 = load i8*, i8** %s, align 8
  %arrayidx1517 = getelementptr inbounds i8, i8* %566, i64 1
  %567 = load i8, i8* %arrayidx1517, align 1
  %conv1518 = zext i8 %567 to i32
  %cmp1519 = icmp eq i32 204, %conv1518
  br i1 %cmp1519, label %land.lhs.true1521, label %cond.false1527

land.lhs.true1521:                                ; preds = %cond.true1516
  %568 = load i8*, i8** %s, align 8
  %arrayidx1522 = getelementptr inbounds i8, i8* %568, i64 2
  %569 = load i8, i8* %arrayidx1522, align 1
  %conv1523 = zext i8 %569 to i32
  %cmp1524 = icmp eq i32 140, %conv1523
  br i1 %cmp1524, label %cond.true1526, label %cond.false1527

cond.true1526:                                    ; preds = %land.lhs.true1521
  br i1 true, label %if.then2089, label %if.else2091

cond.false1527:                                   ; preds = %land.lhs.true1521, %cond.true1516
  br i1 false, label %if.then2089, label %if.else2091

cond.false1528:                                   ; preds = %cond.false1511
  %570 = load i8*, i8** %s, align 8
  %arrayidx1529 = getelementptr inbounds i8, i8* %570, i64 0
  %571 = load i8, i8* %arrayidx1529, align 1
  %conv1530 = zext i8 %571 to i32
  %cmp1531 = icmp eq i32 115, %conv1530
  br i1 %cmp1531, label %cond.true1533, label %cond.false1545

cond.true1533:                                    ; preds = %cond.false1528
  %572 = load i8*, i8** %s, align 8
  %arrayidx1534 = getelementptr inbounds i8, i8* %572, i64 1
  %573 = load i8, i8* %arrayidx1534, align 1
  %conv1535 = zext i8 %573 to i32
  %cmp1536 = icmp eq i32 115, %conv1535
  br i1 %cmp1536, label %cond.true1543, label %lor.lhs.false1538

lor.lhs.false1538:                                ; preds = %cond.true1533
  %574 = load i8*, i8** %s, align 8
  %arrayidx1539 = getelementptr inbounds i8, i8* %574, i64 1
  %575 = load i8, i8* %arrayidx1539, align 1
  %conv1540 = zext i8 %575 to i32
  %cmp1541 = icmp eq i32 116, %conv1540
  br i1 %cmp1541, label %cond.true1543, label %cond.false1544

cond.true1543:                                    ; preds = %lor.lhs.false1538, %cond.true1533
  br i1 true, label %if.then2089, label %if.else2091

cond.false1544:                                   ; preds = %lor.lhs.false1538
  br i1 false, label %if.then2089, label %if.else2091

cond.false1545:                                   ; preds = %cond.false1528
  %576 = load i8*, i8** %s, align 8
  %arrayidx1546 = getelementptr inbounds i8, i8* %576, i64 0
  %577 = load i8, i8* %arrayidx1546, align 1
  %conv1547 = zext i8 %577 to i32
  %cmp1548 = icmp eq i32 116, %conv1547
  br i1 %cmp1548, label %cond.true1550, label %cond.false1562

cond.true1550:                                    ; preds = %cond.false1545
  %578 = load i8*, i8** %s, align 8
  %arrayidx1551 = getelementptr inbounds i8, i8* %578, i64 1
  %579 = load i8, i8* %arrayidx1551, align 1
  %conv1552 = zext i8 %579 to i32
  %cmp1553 = icmp eq i32 204, %conv1552
  br i1 %cmp1553, label %land.lhs.true1555, label %cond.false1561

land.lhs.true1555:                                ; preds = %cond.true1550
  %580 = load i8*, i8** %s, align 8
  %arrayidx1556 = getelementptr inbounds i8, i8* %580, i64 2
  %581 = load i8, i8* %arrayidx1556, align 1
  %conv1557 = zext i8 %581 to i32
  %cmp1558 = icmp eq i32 136, %conv1557
  br i1 %cmp1558, label %cond.true1560, label %cond.false1561

cond.true1560:                                    ; preds = %land.lhs.true1555
  br i1 true, label %if.then2089, label %if.else2091

cond.false1561:                                   ; preds = %land.lhs.true1555, %cond.true1550
  br i1 false, label %if.then2089, label %if.else2091

cond.false1562:                                   ; preds = %cond.false1545
  %582 = load i8*, i8** %s, align 8
  %arrayidx1563 = getelementptr inbounds i8, i8* %582, i64 0
  %583 = load i8, i8* %arrayidx1563, align 1
  %conv1564 = zext i8 %583 to i32
  %cmp1565 = icmp eq i32 119, %conv1564
  br i1 %cmp1565, label %cond.true1572, label %lor.lhs.false1567

lor.lhs.false1567:                                ; preds = %cond.false1562
  %584 = load i8*, i8** %s, align 8
  %arrayidx1568 = getelementptr inbounds i8, i8* %584, i64 0
  %585 = load i8, i8* %arrayidx1568, align 1
  %conv1569 = zext i8 %585 to i32
  %cmp1570 = icmp eq i32 121, %conv1569
  br i1 %cmp1570, label %cond.true1572, label %cond.false1584

cond.true1572:                                    ; preds = %lor.lhs.false1567, %cond.false1562
  %586 = load i8*, i8** %s, align 8
  %arrayidx1573 = getelementptr inbounds i8, i8* %586, i64 1
  %587 = load i8, i8* %arrayidx1573, align 1
  %conv1574 = zext i8 %587 to i32
  %cmp1575 = icmp eq i32 204, %conv1574
  br i1 %cmp1575, label %land.lhs.true1577, label %cond.false1583

land.lhs.true1577:                                ; preds = %cond.true1572
  %588 = load i8*, i8** %s, align 8
  %arrayidx1578 = getelementptr inbounds i8, i8* %588, i64 2
  %589 = load i8, i8* %arrayidx1578, align 1
  %conv1579 = zext i8 %589 to i32
  %cmp1580 = icmp eq i32 138, %conv1579
  br i1 %cmp1580, label %cond.true1582, label %cond.false1583

cond.true1582:                                    ; preds = %land.lhs.true1577
  br i1 true, label %if.then2089, label %if.else2091

cond.false1583:                                   ; preds = %land.lhs.true1577, %cond.true1572
  br i1 false, label %if.then2089, label %if.else2091

cond.false1584:                                   ; preds = %lor.lhs.false1567
  %590 = load i8*, i8** %s, align 8
  %arrayidx1585 = getelementptr inbounds i8, i8* %590, i64 0
  %591 = load i8, i8* %arrayidx1585, align 1
  %conv1586 = zext i8 %591 to i32
  %cmp1587 = icmp eq i32 197, %conv1586
  br i1 %cmp1587, label %cond.true1589, label %cond.false1606

cond.true1589:                                    ; preds = %cond.false1584
  %592 = load i8*, i8** %s, align 8
  %arrayidx1590 = getelementptr inbounds i8, i8* %592, i64 1
  %593 = load i8, i8* %arrayidx1590, align 1
  %conv1591 = zext i8 %593 to i32
  %cmp1592 = icmp eq i32 191, %conv1591
  br i1 %cmp1592, label %land.lhs.true1594, label %cond.false1605

land.lhs.true1594:                                ; preds = %cond.true1589
  %594 = load i8*, i8** %s, align 8
  %arrayidx1595 = getelementptr inbounds i8, i8* %594, i64 2
  %595 = load i8, i8* %arrayidx1595, align 1
  %conv1596 = zext i8 %595 to i32
  %cmp1597 = icmp eq i32 197, %conv1596
  br i1 %cmp1597, label %land.lhs.true1599, label %cond.false1605

land.lhs.true1599:                                ; preds = %land.lhs.true1594
  %596 = load i8*, i8** %s, align 8
  %arrayidx1600 = getelementptr inbounds i8, i8* %596, i64 3
  %597 = load i8, i8* %arrayidx1600, align 1
  %conv1601 = zext i8 %597 to i32
  %cmp1602 = icmp eq i32 191, %conv1601
  br i1 %cmp1602, label %cond.true1604, label %cond.false1605

cond.true1604:                                    ; preds = %land.lhs.true1599
  br i1 true, label %if.then2089, label %if.else2091

cond.false1605:                                   ; preds = %land.lhs.true1599, %land.lhs.true1594, %cond.true1589
  br i1 false, label %if.then2089, label %if.else2091

cond.false1606:                                   ; preds = %cond.false1584
  %598 = load i8*, i8** %s, align 8
  %arrayidx1607 = getelementptr inbounds i8, i8* %598, i64 0
  %599 = load i8, i8* %arrayidx1607, align 1
  %conv1608 = zext i8 %599 to i32
  %cmp1609 = icmp eq i32 202, %conv1608
  br i1 %cmp1609, label %cond.true1611, label %cond.false1623

cond.true1611:                                    ; preds = %cond.false1606
  %600 = load i8*, i8** %s, align 8
  %arrayidx1612 = getelementptr inbounds i8, i8* %600, i64 1
  %601 = load i8, i8* %arrayidx1612, align 1
  %conv1613 = zext i8 %601 to i32
  %cmp1614 = icmp eq i32 188, %conv1613
  br i1 %cmp1614, label %land.lhs.true1616, label %cond.false1622

land.lhs.true1616:                                ; preds = %cond.true1611
  %602 = load i8*, i8** %s, align 8
  %arrayidx1617 = getelementptr inbounds i8, i8* %602, i64 2
  %603 = load i8, i8* %arrayidx1617, align 1
  %conv1618 = zext i8 %603 to i32
  %cmp1619 = icmp eq i32 110, %conv1618
  br i1 %cmp1619, label %cond.true1621, label %cond.false1622

cond.true1621:                                    ; preds = %land.lhs.true1616
  br i1 true, label %if.then2089, label %if.else2091

cond.false1622:                                   ; preds = %land.lhs.true1616, %cond.true1611
  br i1 false, label %if.then2089, label %if.else2091

cond.false1623:                                   ; preds = %cond.false1606
  %604 = load i8*, i8** %s, align 8
  %arrayidx1624 = getelementptr inbounds i8, i8* %604, i64 0
  %605 = load i8, i8* %arrayidx1624, align 1
  %conv1625 = zext i8 %605 to i32
  %cmp1626 = icmp eq i32 206, %conv1625
  br i1 %cmp1626, label %cond.true1628, label %cond.false1697

cond.true1628:                                    ; preds = %cond.false1623
  %606 = load i8*, i8** %s, align 8
  %arrayidx1629 = getelementptr inbounds i8, i8* %606, i64 1
  %607 = load i8, i8* %arrayidx1629, align 1
  %conv1630 = zext i8 %607 to i32
  %and1631 = and i32 %conv1630, 253
  %cmp1632 = icmp eq i32 %and1631, 172
  br i1 %cmp1632, label %cond.true1634, label %cond.false1646

cond.true1634:                                    ; preds = %cond.true1628
  %608 = load i8*, i8** %s, align 8
  %arrayidx1635 = getelementptr inbounds i8, i8* %608, i64 2
  %609 = load i8, i8* %arrayidx1635, align 1
  %conv1636 = zext i8 %609 to i32
  %cmp1637 = icmp eq i32 206, %conv1636
  br i1 %cmp1637, label %land.lhs.true1639, label %cond.false1645

land.lhs.true1639:                                ; preds = %cond.true1634
  %610 = load i8*, i8** %s, align 8
  %arrayidx1640 = getelementptr inbounds i8, i8* %610, i64 3
  %611 = load i8, i8* %arrayidx1640, align 1
  %conv1641 = zext i8 %611 to i32
  %cmp1642 = icmp eq i32 185, %conv1641
  br i1 %cmp1642, label %cond.true1644, label %cond.false1645

cond.true1644:                                    ; preds = %land.lhs.true1639
  br i1 true, label %if.then2089, label %if.else2091

cond.false1645:                                   ; preds = %land.lhs.true1639, %cond.true1634
  br i1 false, label %if.then2089, label %if.else2091

cond.false1646:                                   ; preds = %cond.true1628
  %612 = load i8*, i8** %s, align 8
  %arrayidx1647 = getelementptr inbounds i8, i8* %612, i64 1
  %613 = load i8, i8* %arrayidx1647, align 1
  %conv1648 = zext i8 %613 to i32
  %cmp1649 = icmp eq i32 177, %conv1648
  br i1 %cmp1649, label %cond.true1656, label %lor.lhs.false1651

lor.lhs.false1651:                                ; preds = %cond.false1646
  %614 = load i8*, i8** %s, align 8
  %arrayidx1652 = getelementptr inbounds i8, i8* %614, i64 1
  %615 = load i8, i8* %arrayidx1652, align 1
  %conv1653 = zext i8 %615 to i32
  %cmp1654 = icmp eq i32 183, %conv1653
  br i1 %cmp1654, label %cond.true1656, label %cond.false1680

cond.true1656:                                    ; preds = %lor.lhs.false1651, %cond.false1646
  %616 = load i8*, i8** %s, align 8
  %arrayidx1657 = getelementptr inbounds i8, i8* %616, i64 2
  %617 = load i8, i8* %arrayidx1657, align 1
  %conv1658 = zext i8 %617 to i32
  %cmp1659 = icmp eq i32 205, %conv1658
  br i1 %cmp1659, label %cond.true1661, label %cond.false1668

cond.true1661:                                    ; preds = %cond.true1656
  %618 = load i8*, i8** %s, align 8
  %arrayidx1662 = getelementptr inbounds i8, i8* %618, i64 3
  %619 = load i8, i8* %arrayidx1662, align 1
  %conv1663 = zext i8 %619 to i32
  %cmp1664 = icmp eq i32 130, %conv1663
  br i1 %cmp1664, label %cond.true1666, label %cond.false1667

cond.true1666:                                    ; preds = %cond.true1661
  br i1 true, label %if.then2089, label %if.else2091

cond.false1667:                                   ; preds = %cond.true1661
  br i1 false, label %if.then2089, label %if.else2091

cond.false1668:                                   ; preds = %cond.true1656
  %620 = load i8*, i8** %s, align 8
  %arrayidx1669 = getelementptr inbounds i8, i8* %620, i64 2
  %621 = load i8, i8* %arrayidx1669, align 1
  %conv1670 = zext i8 %621 to i32
  %cmp1671 = icmp eq i32 206, %conv1670
  br i1 %cmp1671, label %land.lhs.true1673, label %cond.false1679

land.lhs.true1673:                                ; preds = %cond.false1668
  %622 = load i8*, i8** %s, align 8
  %arrayidx1674 = getelementptr inbounds i8, i8* %622, i64 3
  %623 = load i8, i8* %arrayidx1674, align 1
  %conv1675 = zext i8 %623 to i32
  %cmp1676 = icmp eq i32 185, %conv1675
  br i1 %cmp1676, label %cond.true1678, label %cond.false1679

cond.true1678:                                    ; preds = %land.lhs.true1673
  br i1 true, label %if.then2089, label %if.else2091

cond.false1679:                                   ; preds = %land.lhs.true1673, %cond.false1668
  br i1 false, label %if.then2089, label %if.else2091

cond.false1680:                                   ; preds = %lor.lhs.false1651
  %624 = load i8*, i8** %s, align 8
  %arrayidx1681 = getelementptr inbounds i8, i8* %624, i64 1
  %625 = load i8, i8* %arrayidx1681, align 1
  %conv1682 = zext i8 %625 to i32
  %cmp1683 = icmp eq i32 185, %conv1682
  br i1 %cmp1683, label %land.lhs.true1685, label %cond.false1696

land.lhs.true1685:                                ; preds = %cond.false1680
  %626 = load i8*, i8** %s, align 8
  %arrayidx1686 = getelementptr inbounds i8, i8* %626, i64 2
  %627 = load i8, i8* %arrayidx1686, align 1
  %conv1687 = zext i8 %627 to i32
  %cmp1688 = icmp eq i32 205, %conv1687
  br i1 %cmp1688, label %land.lhs.true1690, label %cond.false1696

land.lhs.true1690:                                ; preds = %land.lhs.true1685
  %628 = load i8*, i8** %s, align 8
  %arrayidx1691 = getelementptr inbounds i8, i8* %628, i64 3
  %629 = load i8, i8* %arrayidx1691, align 1
  %conv1692 = zext i8 %629 to i32
  %cmp1693 = icmp eq i32 130, %conv1692
  br i1 %cmp1693, label %cond.true1695, label %cond.false1696

cond.true1695:                                    ; preds = %land.lhs.true1690
  br i1 true, label %if.then2089, label %if.else2091

cond.false1696:                                   ; preds = %land.lhs.true1690, %land.lhs.true1685, %cond.false1680
  br i1 false, label %if.then2089, label %if.else2091

cond.false1697:                                   ; preds = %cond.false1623
  %630 = load i8*, i8** %s, align 8
  %arrayidx1698 = getelementptr inbounds i8, i8* %630, i64 0
  %631 = load i8, i8* %arrayidx1698, align 1
  %conv1699 = zext i8 %631 to i32
  %cmp1700 = icmp eq i32 207, %conv1699
  br i1 %cmp1700, label %cond.true1702, label %cond.false1794

cond.true1702:                                    ; preds = %cond.false1697
  %632 = load i8*, i8** %s, align 8
  %arrayidx1703 = getelementptr inbounds i8, i8* %632, i64 1
  %633 = load i8, i8* %arrayidx1703, align 1
  %conv1704 = zext i8 %633 to i32
  %cmp1705 = icmp eq i32 129, %conv1704
  br i1 %cmp1705, label %cond.true1707, label %cond.false1719

cond.true1707:                                    ; preds = %cond.true1702
  %634 = load i8*, i8** %s, align 8
  %arrayidx1708 = getelementptr inbounds i8, i8* %634, i64 2
  %635 = load i8, i8* %arrayidx1708, align 1
  %conv1709 = zext i8 %635 to i32
  %cmp1710 = icmp eq i32 204, %conv1709
  br i1 %cmp1710, label %land.lhs.true1712, label %cond.false1718

land.lhs.true1712:                                ; preds = %cond.true1707
  %636 = load i8*, i8** %s, align 8
  %arrayidx1713 = getelementptr inbounds i8, i8* %636, i64 3
  %637 = load i8, i8* %arrayidx1713, align 1
  %conv1714 = zext i8 %637 to i32
  %cmp1715 = icmp eq i32 147, %conv1714
  br i1 %cmp1715, label %cond.true1717, label %cond.false1718

cond.true1717:                                    ; preds = %land.lhs.true1712
  br i1 true, label %if.then2089, label %if.else2091

cond.false1718:                                   ; preds = %land.lhs.true1712, %cond.true1707
  br i1 false, label %if.then2089, label %if.else2091

cond.false1719:                                   ; preds = %cond.true1702
  %638 = load i8*, i8** %s, align 8
  %arrayidx1720 = getelementptr inbounds i8, i8* %638, i64 1
  %639 = load i8, i8* %arrayidx1720, align 1
  %conv1721 = zext i8 %639 to i32
  %cmp1722 = icmp eq i32 133, %conv1721
  br i1 %cmp1722, label %cond.true1724, label %cond.false1748

cond.true1724:                                    ; preds = %cond.false1719
  %640 = load i8*, i8** %s, align 8
  %arrayidx1725 = getelementptr inbounds i8, i8* %640, i64 2
  %641 = load i8, i8* %arrayidx1725, align 1
  %conv1726 = zext i8 %641 to i32
  %cmp1727 = icmp eq i32 204, %conv1726
  br i1 %cmp1727, label %cond.true1729, label %cond.false1736

cond.true1729:                                    ; preds = %cond.true1724
  %642 = load i8*, i8** %s, align 8
  %arrayidx1730 = getelementptr inbounds i8, i8* %642, i64 3
  %643 = load i8, i8* %arrayidx1730, align 1
  %conv1731 = zext i8 %643 to i32
  %cmp1732 = icmp eq i32 147, %conv1731
  br i1 %cmp1732, label %cond.true1734, label %cond.false1735

cond.true1734:                                    ; preds = %cond.true1729
  br i1 true, label %if.then2089, label %if.else2091

cond.false1735:                                   ; preds = %cond.true1729
  br i1 false, label %if.then2089, label %if.else2091

cond.false1736:                                   ; preds = %cond.true1724
  %644 = load i8*, i8** %s, align 8
  %arrayidx1737 = getelementptr inbounds i8, i8* %644, i64 2
  %645 = load i8, i8* %arrayidx1737, align 1
  %conv1738 = zext i8 %645 to i32
  %cmp1739 = icmp eq i32 205, %conv1738
  br i1 %cmp1739, label %land.lhs.true1741, label %cond.false1747

land.lhs.true1741:                                ; preds = %cond.false1736
  %646 = load i8*, i8** %s, align 8
  %arrayidx1742 = getelementptr inbounds i8, i8* %646, i64 3
  %647 = load i8, i8* %arrayidx1742, align 1
  %conv1743 = zext i8 %647 to i32
  %cmp1744 = icmp eq i32 130, %conv1743
  br i1 %cmp1744, label %cond.true1746, label %cond.false1747

cond.true1746:                                    ; preds = %land.lhs.true1741
  br i1 true, label %if.then2089, label %if.else2091

cond.false1747:                                   ; preds = %land.lhs.true1741, %cond.false1736
  br i1 false, label %if.then2089, label %if.else2091

cond.false1748:                                   ; preds = %cond.false1719
  %648 = load i8*, i8** %s, align 8
  %arrayidx1749 = getelementptr inbounds i8, i8* %648, i64 1
  %649 = load i8, i8* %arrayidx1749, align 1
  %conv1750 = zext i8 %649 to i32
  %cmp1751 = icmp eq i32 137, %conv1750
  br i1 %cmp1751, label %cond.true1753, label %cond.false1777

cond.true1753:                                    ; preds = %cond.false1748
  %650 = load i8*, i8** %s, align 8
  %arrayidx1754 = getelementptr inbounds i8, i8* %650, i64 2
  %651 = load i8, i8* %arrayidx1754, align 1
  %conv1755 = zext i8 %651 to i32
  %cmp1756 = icmp eq i32 205, %conv1755
  br i1 %cmp1756, label %cond.true1758, label %cond.false1765

cond.true1758:                                    ; preds = %cond.true1753
  %652 = load i8*, i8** %s, align 8
  %arrayidx1759 = getelementptr inbounds i8, i8* %652, i64 3
  %653 = load i8, i8* %arrayidx1759, align 1
  %conv1760 = zext i8 %653 to i32
  %cmp1761 = icmp eq i32 130, %conv1760
  br i1 %cmp1761, label %cond.true1763, label %cond.false1764

cond.true1763:                                    ; preds = %cond.true1758
  br i1 true, label %if.then2089, label %if.else2091

cond.false1764:                                   ; preds = %cond.true1758
  br i1 false, label %if.then2089, label %if.else2091

cond.false1765:                                   ; preds = %cond.true1753
  %654 = load i8*, i8** %s, align 8
  %arrayidx1766 = getelementptr inbounds i8, i8* %654, i64 2
  %655 = load i8, i8* %arrayidx1766, align 1
  %conv1767 = zext i8 %655 to i32
  %cmp1768 = icmp eq i32 206, %conv1767
  br i1 %cmp1768, label %land.lhs.true1770, label %cond.false1776

land.lhs.true1770:                                ; preds = %cond.false1765
  %656 = load i8*, i8** %s, align 8
  %arrayidx1771 = getelementptr inbounds i8, i8* %656, i64 3
  %657 = load i8, i8* %arrayidx1771, align 1
  %conv1772 = zext i8 %657 to i32
  %cmp1773 = icmp eq i32 185, %conv1772
  br i1 %cmp1773, label %cond.true1775, label %cond.false1776

cond.true1775:                                    ; preds = %land.lhs.true1770
  br i1 true, label %if.then2089, label %if.else2091

cond.false1776:                                   ; preds = %land.lhs.true1770, %cond.false1765
  br i1 false, label %if.then2089, label %if.else2091

cond.false1777:                                   ; preds = %cond.false1748
  %658 = load i8*, i8** %s, align 8
  %arrayidx1778 = getelementptr inbounds i8, i8* %658, i64 1
  %659 = load i8, i8* %arrayidx1778, align 1
  %conv1779 = zext i8 %659 to i32
  %cmp1780 = icmp eq i32 142, %conv1779
  br i1 %cmp1780, label %land.lhs.true1782, label %cond.false1793

land.lhs.true1782:                                ; preds = %cond.false1777
  %660 = load i8*, i8** %s, align 8
  %arrayidx1783 = getelementptr inbounds i8, i8* %660, i64 2
  %661 = load i8, i8* %arrayidx1783, align 1
  %conv1784 = zext i8 %661 to i32
  %cmp1785 = icmp eq i32 206, %conv1784
  br i1 %cmp1785, label %land.lhs.true1787, label %cond.false1793

land.lhs.true1787:                                ; preds = %land.lhs.true1782
  %662 = load i8*, i8** %s, align 8
  %arrayidx1788 = getelementptr inbounds i8, i8* %662, i64 3
  %663 = load i8, i8* %arrayidx1788, align 1
  %conv1789 = zext i8 %663 to i32
  %cmp1790 = icmp eq i32 185, %conv1789
  br i1 %cmp1790, label %cond.true1792, label %cond.false1793

cond.true1792:                                    ; preds = %land.lhs.true1787
  br i1 true, label %if.then2089, label %if.else2091

cond.false1793:                                   ; preds = %land.lhs.true1787, %land.lhs.true1782, %cond.false1777
  br i1 false, label %if.then2089, label %if.else2091

cond.false1794:                                   ; preds = %cond.false1697
  %664 = load i8*, i8** %s, align 8
  %arrayidx1795 = getelementptr inbounds i8, i8* %664, i64 0
  %665 = load i8, i8* %arrayidx1795, align 1
  %conv1796 = zext i8 %665 to i32
  %cmp1797 = icmp eq i32 213, %conv1796
  br i1 %cmp1797, label %cond.true1799, label %cond.false1861

cond.true1799:                                    ; preds = %cond.false1794
  %666 = load i8*, i8** %s, align 8
  %arrayidx1800 = getelementptr inbounds i8, i8* %666, i64 1
  %667 = load i8, i8* %arrayidx1800, align 1
  %conv1801 = zext i8 %667 to i32
  %cmp1802 = icmp eq i32 165, %conv1801
  br i1 %cmp1802, label %cond.true1804, label %cond.false1816

cond.true1804:                                    ; preds = %cond.true1799
  %668 = load i8*, i8** %s, align 8
  %arrayidx1805 = getelementptr inbounds i8, i8* %668, i64 2
  %669 = load i8, i8* %arrayidx1805, align 1
  %conv1806 = zext i8 %669 to i32
  %cmp1807 = icmp eq i32 214, %conv1806
  br i1 %cmp1807, label %land.lhs.true1809, label %cond.false1815

land.lhs.true1809:                                ; preds = %cond.true1804
  %670 = load i8*, i8** %s, align 8
  %arrayidx1810 = getelementptr inbounds i8, i8* %670, i64 3
  %671 = load i8, i8* %arrayidx1810, align 1
  %conv1811 = zext i8 %671 to i32
  %cmp1812 = icmp eq i32 130, %conv1811
  br i1 %cmp1812, label %cond.true1814, label %cond.false1815

cond.true1814:                                    ; preds = %land.lhs.true1809
  br i1 true, label %if.then2089, label %if.else2091

cond.false1815:                                   ; preds = %land.lhs.true1809, %cond.true1804
  br i1 false, label %if.then2089, label %if.else2091

cond.false1816:                                   ; preds = %cond.true1799
  %672 = load i8*, i8** %s, align 8
  %arrayidx1817 = getelementptr inbounds i8, i8* %672, i64 1
  %673 = load i8, i8* %arrayidx1817, align 1
  %conv1818 = zext i8 %673 to i32
  %cmp1819 = icmp eq i32 180, %conv1818
  br i1 %cmp1819, label %cond.true1821, label %cond.false1844

cond.true1821:                                    ; preds = %cond.false1816
  %674 = load i8*, i8** %s, align 8
  %arrayidx1822 = getelementptr inbounds i8, i8* %674, i64 2
  %675 = load i8, i8* %arrayidx1822, align 1
  %conv1823 = zext i8 %675 to i32
  %cmp1824 = icmp eq i32 213, %conv1823
  br i1 %cmp1824, label %land.lhs.true1826, label %cond.false1843

land.lhs.true1826:                                ; preds = %cond.true1821
  %676 = load i8*, i8** %s, align 8
  %arrayidx1827 = getelementptr inbounds i8, i8* %676, i64 3
  %677 = load i8, i8* %arrayidx1827, align 1
  %conv1828 = zext i8 %677 to i32
  %and1829 = and i32 %conv1828, 247
  %cmp1830 = icmp eq i32 %and1829, 165
  br i1 %cmp1830, label %cond.true1842, label %lor.lhs.false1832

lor.lhs.false1832:                                ; preds = %land.lhs.true1826
  %678 = load i8*, i8** %s, align 8
  %arrayidx1833 = getelementptr inbounds i8, i8* %678, i64 3
  %679 = load i8, i8* %arrayidx1833, align 1
  %conv1834 = zext i8 %679 to i32
  %cmp1835 = icmp eq i32 %conv1834, 171
  br i1 %cmp1835, label %cond.true1842, label %lor.lhs.false1837

lor.lhs.false1837:                                ; preds = %lor.lhs.false1832
  %680 = load i8*, i8** %s, align 8
  %arrayidx1838 = getelementptr inbounds i8, i8* %680, i64 3
  %681 = load i8, i8* %arrayidx1838, align 1
  %conv1839 = zext i8 %681 to i32
  %cmp1840 = icmp eq i32 %conv1839, 182
  br i1 %cmp1840, label %cond.true1842, label %cond.false1843

cond.true1842:                                    ; preds = %lor.lhs.false1837, %lor.lhs.false1832, %land.lhs.true1826
  br i1 true, label %if.then2089, label %if.else2091

cond.false1843:                                   ; preds = %lor.lhs.false1837, %cond.true1821
  br i1 false, label %if.then2089, label %if.else2091

cond.false1844:                                   ; preds = %cond.false1816
  %682 = load i8*, i8** %s, align 8
  %arrayidx1845 = getelementptr inbounds i8, i8* %682, i64 1
  %683 = load i8, i8* %arrayidx1845, align 1
  %conv1846 = zext i8 %683 to i32
  %cmp1847 = icmp eq i32 190, %conv1846
  br i1 %cmp1847, label %land.lhs.true1849, label %cond.false1860

land.lhs.true1849:                                ; preds = %cond.false1844
  %684 = load i8*, i8** %s, align 8
  %arrayidx1850 = getelementptr inbounds i8, i8* %684, i64 2
  %685 = load i8, i8* %arrayidx1850, align 1
  %conv1851 = zext i8 %685 to i32
  %cmp1852 = icmp eq i32 213, %conv1851
  br i1 %cmp1852, label %land.lhs.true1854, label %cond.false1860

land.lhs.true1854:                                ; preds = %land.lhs.true1849
  %686 = load i8*, i8** %s, align 8
  %arrayidx1855 = getelementptr inbounds i8, i8* %686, i64 3
  %687 = load i8, i8* %arrayidx1855, align 1
  %conv1856 = zext i8 %687 to i32
  %cmp1857 = icmp eq i32 182, %conv1856
  br i1 %cmp1857, label %cond.true1859, label %cond.false1860

cond.true1859:                                    ; preds = %land.lhs.true1854
  br i1 true, label %if.then2089, label %if.else2091

cond.false1860:                                   ; preds = %land.lhs.true1854, %land.lhs.true1849, %cond.false1844
  br i1 false, label %if.then2089, label %if.else2091

cond.false1861:                                   ; preds = %cond.false1794
  br i1 false, label %if.then2089, label %if.else2091

cond.false1862:                                   ; preds = %cond.false1420
  %688 = load i8*, i8** %e, align 8
  %689 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast1863 = ptrtoint i8* %688 to i64
  %sub.ptr.rhs.cast1864 = ptrtoint i8* %689 to i64
  %sub.ptr.sub1865 = sub i64 %sub.ptr.lhs.cast1863, %sub.ptr.rhs.cast1864
  %cmp1866 = icmp sgt i64 %sub.ptr.sub1865, 2
  br i1 %cmp1866, label %cond.true1868, label %cond.false2043

cond.true1868:                                    ; preds = %cond.false1862
  %690 = load i8*, i8** %s, align 8
  %arrayidx1869 = getelementptr inbounds i8, i8* %690, i64 0
  %691 = load i8, i8* %arrayidx1869, align 1
  %conv1870 = zext i8 %691 to i32
  %cmp1871 = icmp eq i32 97, %conv1870
  br i1 %cmp1871, label %cond.true1873, label %cond.false1885

cond.true1873:                                    ; preds = %cond.true1868
  %692 = load i8*, i8** %s, align 8
  %arrayidx1874 = getelementptr inbounds i8, i8* %692, i64 1
  %693 = load i8, i8* %arrayidx1874, align 1
  %conv1875 = zext i8 %693 to i32
  %cmp1876 = icmp eq i32 202, %conv1875
  br i1 %cmp1876, label %land.lhs.true1878, label %cond.false1884

land.lhs.true1878:                                ; preds = %cond.true1873
  %694 = load i8*, i8** %s, align 8
  %arrayidx1879 = getelementptr inbounds i8, i8* %694, i64 2
  %695 = load i8, i8* %arrayidx1879, align 1
  %conv1880 = zext i8 %695 to i32
  %cmp1881 = icmp eq i32 190, %conv1880
  br i1 %cmp1881, label %cond.true1883, label %cond.false1884

cond.true1883:                                    ; preds = %land.lhs.true1878
  br i1 true, label %if.then2089, label %if.else2091

cond.false1884:                                   ; preds = %land.lhs.true1878, %cond.true1873
  br i1 false, label %if.then2089, label %if.else2091

cond.false1885:                                   ; preds = %cond.true1868
  %696 = load i8*, i8** %s, align 8
  %arrayidx1886 = getelementptr inbounds i8, i8* %696, i64 0
  %697 = load i8, i8* %arrayidx1886, align 1
  %conv1887 = zext i8 %697 to i32
  %cmp1888 = icmp eq i32 102, %conv1887
  br i1 %cmp1888, label %cond.true1890, label %cond.false1919

cond.true1890:                                    ; preds = %cond.false1885
  %698 = load i8*, i8** %s, align 8
  %arrayidx1891 = getelementptr inbounds i8, i8* %698, i64 1
  %699 = load i8, i8* %arrayidx1891, align 1
  %conv1892 = zext i8 %699 to i32
  %cmp1893 = icmp eq i32 102, %conv1892
  br i1 %cmp1893, label %cond.true1895, label %cond.false1907

cond.true1895:                                    ; preds = %cond.true1890
  %700 = load i8*, i8** %s, align 8
  %arrayidx1896 = getelementptr inbounds i8, i8* %700, i64 2
  %701 = load i8, i8* %arrayidx1896, align 1
  %conv1897 = zext i8 %701 to i32
  %cmp1898 = icmp eq i32 105, %conv1897
  br i1 %cmp1898, label %cond.true1905, label %lor.lhs.false1900

lor.lhs.false1900:                                ; preds = %cond.true1895
  %702 = load i8*, i8** %s, align 8
  %arrayidx1901 = getelementptr inbounds i8, i8* %702, i64 2
  %703 = load i8, i8* %arrayidx1901, align 1
  %conv1902 = zext i8 %703 to i32
  %cmp1903 = icmp eq i32 108, %conv1902
  br i1 %cmp1903, label %cond.true1905, label %cond.false1906

cond.true1905:                                    ; preds = %lor.lhs.false1900, %cond.true1895
  br i1 true, label %if.then2089, label %if.else2091

cond.false1906:                                   ; preds = %lor.lhs.false1900
  br i1 true, label %if.then2089, label %if.else2091

cond.false1907:                                   ; preds = %cond.true1890
  %704 = load i8*, i8** %s, align 8
  %arrayidx1908 = getelementptr inbounds i8, i8* %704, i64 1
  %705 = load i8, i8* %arrayidx1908, align 1
  %conv1909 = zext i8 %705 to i32
  %cmp1910 = icmp eq i32 105, %conv1909
  br i1 %cmp1910, label %cond.true1917, label %lor.lhs.false1912

lor.lhs.false1912:                                ; preds = %cond.false1907
  %706 = load i8*, i8** %s, align 8
  %arrayidx1913 = getelementptr inbounds i8, i8* %706, i64 1
  %707 = load i8, i8* %arrayidx1913, align 1
  %conv1914 = zext i8 %707 to i32
  %cmp1915 = icmp eq i32 108, %conv1914
  br i1 %cmp1915, label %cond.true1917, label %cond.false1918

cond.true1917:                                    ; preds = %lor.lhs.false1912, %cond.false1907
  br i1 true, label %if.then2089, label %if.else2091

cond.false1918:                                   ; preds = %lor.lhs.false1912
  br i1 false, label %if.then2089, label %if.else2091

cond.false1919:                                   ; preds = %cond.false1885
  %708 = load i8*, i8** %s, align 8
  %arrayidx1920 = getelementptr inbounds i8, i8* %708, i64 0
  %709 = load i8, i8* %arrayidx1920, align 1
  %conv1921 = zext i8 %709 to i32
  %cmp1922 = icmp eq i32 104, %conv1921
  br i1 %cmp1922, label %cond.true1924, label %cond.false1936

cond.true1924:                                    ; preds = %cond.false1919
  %710 = load i8*, i8** %s, align 8
  %arrayidx1925 = getelementptr inbounds i8, i8* %710, i64 1
  %711 = load i8, i8* %arrayidx1925, align 1
  %conv1926 = zext i8 %711 to i32
  %cmp1927 = icmp eq i32 204, %conv1926
  br i1 %cmp1927, label %land.lhs.true1929, label %cond.false1935

land.lhs.true1929:                                ; preds = %cond.true1924
  %712 = load i8*, i8** %s, align 8
  %arrayidx1930 = getelementptr inbounds i8, i8* %712, i64 2
  %713 = load i8, i8* %arrayidx1930, align 1
  %conv1931 = zext i8 %713 to i32
  %cmp1932 = icmp eq i32 177, %conv1931
  br i1 %cmp1932, label %cond.true1934, label %cond.false1935

cond.true1934:                                    ; preds = %land.lhs.true1929
  br i1 true, label %if.then2089, label %if.else2091

cond.false1935:                                   ; preds = %land.lhs.true1929, %cond.true1924
  br i1 false, label %if.then2089, label %if.else2091

cond.false1936:                                   ; preds = %cond.false1919
  %714 = load i8*, i8** %s, align 8
  %arrayidx1937 = getelementptr inbounds i8, i8* %714, i64 0
  %715 = load i8, i8* %arrayidx1937, align 1
  %conv1938 = zext i8 %715 to i32
  %cmp1939 = icmp eq i32 105, %conv1938
  br i1 %cmp1939, label %cond.true1941, label %cond.false1953

cond.true1941:                                    ; preds = %cond.false1936
  %716 = load i8*, i8** %s, align 8
  %arrayidx1942 = getelementptr inbounds i8, i8* %716, i64 1
  %717 = load i8, i8* %arrayidx1942, align 1
  %conv1943 = zext i8 %717 to i32
  %cmp1944 = icmp eq i32 204, %conv1943
  br i1 %cmp1944, label %land.lhs.true1946, label %cond.false1952

land.lhs.true1946:                                ; preds = %cond.true1941
  %718 = load i8*, i8** %s, align 8
  %arrayidx1947 = getelementptr inbounds i8, i8* %718, i64 2
  %719 = load i8, i8* %arrayidx1947, align 1
  %conv1948 = zext i8 %719 to i32
  %cmp1949 = icmp eq i32 135, %conv1948
  br i1 %cmp1949, label %cond.true1951, label %cond.false1952

cond.true1951:                                    ; preds = %land.lhs.true1946
  br i1 true, label %if.then2089, label %if.else2091

cond.false1952:                                   ; preds = %land.lhs.true1946, %cond.true1941
  br i1 false, label %if.then2089, label %if.else2091

cond.false1953:                                   ; preds = %cond.false1936
  %720 = load i8*, i8** %s, align 8
  %arrayidx1954 = getelementptr inbounds i8, i8* %720, i64 0
  %721 = load i8, i8* %arrayidx1954, align 1
  %conv1955 = zext i8 %721 to i32
  %cmp1956 = icmp eq i32 106, %conv1955
  br i1 %cmp1956, label %cond.true1958, label %cond.false1970

cond.true1958:                                    ; preds = %cond.false1953
  %722 = load i8*, i8** %s, align 8
  %arrayidx1959 = getelementptr inbounds i8, i8* %722, i64 1
  %723 = load i8, i8* %arrayidx1959, align 1
  %conv1960 = zext i8 %723 to i32
  %cmp1961 = icmp eq i32 204, %conv1960
  br i1 %cmp1961, label %land.lhs.true1963, label %cond.false1969

land.lhs.true1963:                                ; preds = %cond.true1958
  %724 = load i8*, i8** %s, align 8
  %arrayidx1964 = getelementptr inbounds i8, i8* %724, i64 2
  %725 = load i8, i8* %arrayidx1964, align 1
  %conv1965 = zext i8 %725 to i32
  %cmp1966 = icmp eq i32 140, %conv1965
  br i1 %cmp1966, label %cond.true1968, label %cond.false1969

cond.true1968:                                    ; preds = %land.lhs.true1963
  br i1 true, label %if.then2089, label %if.else2091

cond.false1969:                                   ; preds = %land.lhs.true1963, %cond.true1958
  br i1 false, label %if.then2089, label %if.else2091

cond.false1970:                                   ; preds = %cond.false1953
  %726 = load i8*, i8** %s, align 8
  %arrayidx1971 = getelementptr inbounds i8, i8* %726, i64 0
  %727 = load i8, i8* %arrayidx1971, align 1
  %conv1972 = zext i8 %727 to i32
  %cmp1973 = icmp eq i32 115, %conv1972
  br i1 %cmp1973, label %cond.true1975, label %cond.false1987

cond.true1975:                                    ; preds = %cond.false1970
  %728 = load i8*, i8** %s, align 8
  %arrayidx1976 = getelementptr inbounds i8, i8* %728, i64 1
  %729 = load i8, i8* %arrayidx1976, align 1
  %conv1977 = zext i8 %729 to i32
  %cmp1978 = icmp eq i32 115, %conv1977
  br i1 %cmp1978, label %cond.true1985, label %lor.lhs.false1980

lor.lhs.false1980:                                ; preds = %cond.true1975
  %730 = load i8*, i8** %s, align 8
  %arrayidx1981 = getelementptr inbounds i8, i8* %730, i64 1
  %731 = load i8, i8* %arrayidx1981, align 1
  %conv1982 = zext i8 %731 to i32
  %cmp1983 = icmp eq i32 116, %conv1982
  br i1 %cmp1983, label %cond.true1985, label %cond.false1986

cond.true1985:                                    ; preds = %lor.lhs.false1980, %cond.true1975
  br i1 true, label %if.then2089, label %if.else2091

cond.false1986:                                   ; preds = %lor.lhs.false1980
  br i1 false, label %if.then2089, label %if.else2091

cond.false1987:                                   ; preds = %cond.false1970
  %732 = load i8*, i8** %s, align 8
  %arrayidx1988 = getelementptr inbounds i8, i8* %732, i64 0
  %733 = load i8, i8* %arrayidx1988, align 1
  %conv1989 = zext i8 %733 to i32
  %cmp1990 = icmp eq i32 116, %conv1989
  br i1 %cmp1990, label %cond.true1992, label %cond.false2004

cond.true1992:                                    ; preds = %cond.false1987
  %734 = load i8*, i8** %s, align 8
  %arrayidx1993 = getelementptr inbounds i8, i8* %734, i64 1
  %735 = load i8, i8* %arrayidx1993, align 1
  %conv1994 = zext i8 %735 to i32
  %cmp1995 = icmp eq i32 204, %conv1994
  br i1 %cmp1995, label %land.lhs.true1997, label %cond.false2003

land.lhs.true1997:                                ; preds = %cond.true1992
  %736 = load i8*, i8** %s, align 8
  %arrayidx1998 = getelementptr inbounds i8, i8* %736, i64 2
  %737 = load i8, i8* %arrayidx1998, align 1
  %conv1999 = zext i8 %737 to i32
  %cmp2000 = icmp eq i32 136, %conv1999
  br i1 %cmp2000, label %cond.true2002, label %cond.false2003

cond.true2002:                                    ; preds = %land.lhs.true1997
  br i1 true, label %if.then2089, label %if.else2091

cond.false2003:                                   ; preds = %land.lhs.true1997, %cond.true1992
  br i1 false, label %if.then2089, label %if.else2091

cond.false2004:                                   ; preds = %cond.false1987
  %738 = load i8*, i8** %s, align 8
  %arrayidx2005 = getelementptr inbounds i8, i8* %738, i64 0
  %739 = load i8, i8* %arrayidx2005, align 1
  %conv2006 = zext i8 %739 to i32
  %cmp2007 = icmp eq i32 119, %conv2006
  br i1 %cmp2007, label %cond.true2014, label %lor.lhs.false2009

lor.lhs.false2009:                                ; preds = %cond.false2004
  %740 = load i8*, i8** %s, align 8
  %arrayidx2010 = getelementptr inbounds i8, i8* %740, i64 0
  %741 = load i8, i8* %arrayidx2010, align 1
  %conv2011 = zext i8 %741 to i32
  %cmp2012 = icmp eq i32 121, %conv2011
  br i1 %cmp2012, label %cond.true2014, label %cond.false2026

cond.true2014:                                    ; preds = %lor.lhs.false2009, %cond.false2004
  %742 = load i8*, i8** %s, align 8
  %arrayidx2015 = getelementptr inbounds i8, i8* %742, i64 1
  %743 = load i8, i8* %arrayidx2015, align 1
  %conv2016 = zext i8 %743 to i32
  %cmp2017 = icmp eq i32 204, %conv2016
  br i1 %cmp2017, label %land.lhs.true2019, label %cond.false2025

land.lhs.true2019:                                ; preds = %cond.true2014
  %744 = load i8*, i8** %s, align 8
  %arrayidx2020 = getelementptr inbounds i8, i8* %744, i64 2
  %745 = load i8, i8* %arrayidx2020, align 1
  %conv2021 = zext i8 %745 to i32
  %cmp2022 = icmp eq i32 138, %conv2021
  br i1 %cmp2022, label %cond.true2024, label %cond.false2025

cond.true2024:                                    ; preds = %land.lhs.true2019
  br i1 true, label %if.then2089, label %if.else2091

cond.false2025:                                   ; preds = %land.lhs.true2019, %cond.true2014
  br i1 false, label %if.then2089, label %if.else2091

cond.false2026:                                   ; preds = %lor.lhs.false2009
  %746 = load i8*, i8** %s, align 8
  %arrayidx2027 = getelementptr inbounds i8, i8* %746, i64 0
  %747 = load i8, i8* %arrayidx2027, align 1
  %conv2028 = zext i8 %747 to i32
  %cmp2029 = icmp eq i32 202, %conv2028
  br i1 %cmp2029, label %land.lhs.true2031, label %cond.false2042

land.lhs.true2031:                                ; preds = %cond.false2026
  %748 = load i8*, i8** %s, align 8
  %arrayidx2032 = getelementptr inbounds i8, i8* %748, i64 1
  %749 = load i8, i8* %arrayidx2032, align 1
  %conv2033 = zext i8 %749 to i32
  %cmp2034 = icmp eq i32 188, %conv2033
  br i1 %cmp2034, label %land.lhs.true2036, label %cond.false2042

land.lhs.true2036:                                ; preds = %land.lhs.true2031
  %750 = load i8*, i8** %s, align 8
  %arrayidx2037 = getelementptr inbounds i8, i8* %750, i64 2
  %751 = load i8, i8* %arrayidx2037, align 1
  %conv2038 = zext i8 %751 to i32
  %cmp2039 = icmp eq i32 110, %conv2038
  br i1 %cmp2039, label %cond.true2041, label %cond.false2042

cond.true2041:                                    ; preds = %land.lhs.true2036
  br i1 true, label %if.then2089, label %if.else2091

cond.false2042:                                   ; preds = %land.lhs.true2036, %land.lhs.true2031, %cond.false2026
  br i1 false, label %if.then2089, label %if.else2091

cond.false2043:                                   ; preds = %cond.false1862
  %752 = load i8*, i8** %e, align 8
  %753 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast2044 = ptrtoint i8* %752 to i64
  %sub.ptr.rhs.cast2045 = ptrtoint i8* %753 to i64
  %sub.ptr.sub2046 = sub i64 %sub.ptr.lhs.cast2044, %sub.ptr.rhs.cast2045
  %cmp2047 = icmp sgt i64 %sub.ptr.sub2046, 1
  br i1 %cmp2047, label %cond.true2049, label %cond.false2088

cond.true2049:                                    ; preds = %cond.false2043
  %754 = load i8*, i8** %s, align 8
  %arrayidx2050 = getelementptr inbounds i8, i8* %754, i64 0
  %755 = load i8, i8* %arrayidx2050, align 1
  %conv2051 = zext i8 %755 to i32
  %cmp2052 = icmp eq i32 102, %conv2051
  br i1 %cmp2052, label %cond.true2054, label %cond.false2071

cond.true2054:                                    ; preds = %cond.true2049
  %756 = load i8*, i8** %s, align 8
  %arrayidx2055 = getelementptr inbounds i8, i8* %756, i64 1
  %757 = load i8, i8* %arrayidx2055, align 1
  %conv2056 = zext i8 %757 to i32
  %cmp2057 = icmp eq i32 102, %conv2056
  br i1 %cmp2057, label %cond.true2069, label %lor.lhs.false2059

lor.lhs.false2059:                                ; preds = %cond.true2054
  %758 = load i8*, i8** %s, align 8
  %arrayidx2060 = getelementptr inbounds i8, i8* %758, i64 1
  %759 = load i8, i8* %arrayidx2060, align 1
  %conv2061 = zext i8 %759 to i32
  %cmp2062 = icmp eq i32 105, %conv2061
  br i1 %cmp2062, label %cond.true2069, label %lor.lhs.false2064

lor.lhs.false2064:                                ; preds = %lor.lhs.false2059
  %760 = load i8*, i8** %s, align 8
  %arrayidx2065 = getelementptr inbounds i8, i8* %760, i64 1
  %761 = load i8, i8* %arrayidx2065, align 1
  %conv2066 = zext i8 %761 to i32
  %cmp2067 = icmp eq i32 108, %conv2066
  br i1 %cmp2067, label %cond.true2069, label %cond.false2070

cond.true2069:                                    ; preds = %lor.lhs.false2064, %lor.lhs.false2059, %cond.true2054
  br i1 true, label %if.then2089, label %if.else2091

cond.false2070:                                   ; preds = %lor.lhs.false2064
  br i1 false, label %if.then2089, label %if.else2091

cond.false2071:                                   ; preds = %cond.true2049
  %762 = load i8*, i8** %s, align 8
  %arrayidx2072 = getelementptr inbounds i8, i8* %762, i64 0
  %763 = load i8, i8* %arrayidx2072, align 1
  %conv2073 = zext i8 %763 to i32
  %cmp2074 = icmp eq i32 115, %conv2073
  br i1 %cmp2074, label %land.lhs.true2076, label %cond.false2087

land.lhs.true2076:                                ; preds = %cond.false2071
  %764 = load i8*, i8** %s, align 8
  %arrayidx2077 = getelementptr inbounds i8, i8* %764, i64 1
  %765 = load i8, i8* %arrayidx2077, align 1
  %conv2078 = zext i8 %765 to i32
  %cmp2079 = icmp eq i32 115, %conv2078
  br i1 %cmp2079, label %cond.true2086, label %lor.lhs.false2081

lor.lhs.false2081:                                ; preds = %land.lhs.true2076
  %766 = load i8*, i8** %s, align 8
  %arrayidx2082 = getelementptr inbounds i8, i8* %766, i64 1
  %767 = load i8, i8* %arrayidx2082, align 1
  %conv2083 = zext i8 %767 to i32
  %cmp2084 = icmp eq i32 116, %conv2083
  br i1 %cmp2084, label %cond.true2086, label %cond.false2087

cond.true2086:                                    ; preds = %lor.lhs.false2081, %land.lhs.true2076
  br i1 true, label %if.then2089, label %if.else2091

cond.false2087:                                   ; preds = %lor.lhs.false2081, %cond.false2071
  br i1 false, label %if.then2089, label %if.else2091

cond.false2088:                                   ; preds = %cond.false2043
  br i1 false, label %if.then2089, label %if.else2091

if.then2089:                                      ; preds = %cond.false2088, %cond.false2087, %cond.true2086, %cond.false2070, %cond.true2069, %cond.false2042, %cond.true2041, %cond.false2025, %cond.true2024, %cond.false2003, %cond.true2002, %cond.false1986, %cond.true1985, %cond.false1969, %cond.true1968, %cond.false1952, %cond.true1951, %cond.false1935, %cond.true1934, %cond.false1918, %cond.true1917, %cond.false1906, %cond.true1905, %cond.false1884, %cond.true1883, %cond.false1861, %cond.false1860, %cond.true1859, %cond.false1843, %cond.true1842, %cond.false1815, %cond.true1814, %cond.false1793, %cond.true1792, %cond.false1776, %cond.true1775, %cond.false1764, %cond.true1763, %cond.false1747, %cond.true1746, %cond.false1735, %cond.true1734, %cond.false1718, %cond.true1717, %cond.false1696, %cond.true1695, %cond.false1679, %cond.true1678, %cond.false1667, %cond.true1666, %cond.false1645, %cond.true1644, %cond.false1622, %cond.true1621, %cond.false1605, %cond.true1604, %cond.false1583, %cond.true1582, %cond.false1561, %cond.true1560, %cond.false1544, %cond.true1543, %cond.false1527, %cond.true1526, %cond.false1510, %cond.true1509, %cond.false1493, %cond.true1492, %cond.false1476, %cond.true1475, %cond.false1464, %cond.true1463, %cond.false1442, %cond.true1441, %cond.false1419, %cond.false1418, %cond.true1417, %cond.false1384, %cond.true1383, %cond.false1356, %cond.true1355, %cond.false1339, %cond.true1338, %cond.false1311, %cond.true1310, %cond.false1289, %cond.true1288, %cond.false1272, %cond.true1271, %cond.false1260, %cond.true1259, %cond.false1243, %cond.true1242, %cond.false1231, %cond.true1230, %cond.false1214, %cond.true1213, %cond.false1192, %cond.true1191, %cond.false1175, %cond.true1174, %cond.false1163, %cond.true1162, %cond.false1141, %cond.true1140, %cond.false1118, %cond.true1117, %cond.false1101, %cond.true1100, %cond.false1079, %cond.true1078, %cond.false1057, %cond.true1056, %cond.false1040, %cond.true1039, %cond.false1023, %cond.true1022, %cond.false1006, %cond.true1005, %cond.false989, %cond.true988, %cond.false972, %cond.true971, %cond.false960, %cond.true959, %cond.false938, %cond.true937, %cond.false915, %cond.false914, %cond.true913, %cond.false880, %cond.true879, %cond.false852, %cond.true851, %cond.false835, %cond.true834, %cond.false807, %cond.true806, %cond.false785, %cond.true784, %cond.false768, %cond.true767, %cond.false756, %cond.false755, %cond.true754, %cond.false728, %cond.true727, %cond.false716, %cond.false715, %cond.true714, %cond.false703, %cond.true702, %cond.false685, %cond.true684, %cond.false673, %cond.true672, %cond.false645, %cond.true644, %cond.false623, %cond.false622, %cond.true621, %cond.false610, %cond.false609, %cond.true608, %cond.false597, %cond.true596, %cond.false569, %cond.true568, %cond.false557, %cond.false556, %cond.true555, %cond.false524, %cond.true523, %cond.false501, %cond.true500, %cond.false484, %cond.true483, %cond.false462, %cond.true461, %cond.false440, %cond.true439, %cond.false423, %cond.true422, %cond.false406, %cond.true405, %cond.false389, %cond.true388, %cond.false372, %cond.true371, %cond.false355, %cond.true354, %cond.false343, %cond.true342, %cond.false321, %cond.true320
  %768 = load %struct.sv*, %struct.sv** %invlist, align 8
  %call2090 = call %struct.sv* @Perl__add_range_to_invlist(%struct.sv* %768, i64 0, i64 -1)
  store %struct.sv* %call2090, %struct.sv** %invlist, align 8
  br label %if.end2137

if.else2091:                                      ; preds = %cond.false2088, %cond.false2087, %cond.true2086, %cond.false2070, %cond.true2069, %cond.false2042, %cond.true2041, %cond.false2025, %cond.true2024, %cond.false2003, %cond.true2002, %cond.false1986, %cond.true1985, %cond.false1969, %cond.true1968, %cond.false1952, %cond.true1951, %cond.false1935, %cond.true1934, %cond.false1918, %cond.true1917, %cond.false1906, %cond.true1905, %cond.false1884, %cond.true1883, %cond.false1861, %cond.false1860, %cond.true1859, %cond.false1843, %cond.true1842, %cond.false1815, %cond.true1814, %cond.false1793, %cond.true1792, %cond.false1776, %cond.true1775, %cond.false1764, %cond.true1763, %cond.false1747, %cond.true1746, %cond.false1735, %cond.true1734, %cond.false1718, %cond.true1717, %cond.false1696, %cond.true1695, %cond.false1679, %cond.true1678, %cond.false1667, %cond.true1666, %cond.false1645, %cond.true1644, %cond.false1622, %cond.true1621, %cond.false1605, %cond.true1604, %cond.false1583, %cond.true1582, %cond.false1561, %cond.true1560, %cond.false1544, %cond.true1543, %cond.false1527, %cond.true1526, %cond.false1510, %cond.true1509, %cond.false1493, %cond.true1492, %cond.false1476, %cond.true1475, %cond.false1464, %cond.true1463, %cond.false1442, %cond.true1441, %cond.false1419, %cond.false1418, %cond.true1417, %cond.false1384, %cond.true1383, %cond.false1356, %cond.true1355, %cond.false1339, %cond.true1338, %cond.false1311, %cond.true1310, %cond.false1289, %cond.true1288, %cond.false1272, %cond.true1271, %cond.false1260, %cond.true1259, %cond.false1243, %cond.true1242, %cond.false1231, %cond.true1230, %cond.false1214, %cond.true1213, %cond.false1192, %cond.true1191, %cond.false1175, %cond.true1174, %cond.false1163, %cond.true1162, %cond.false1141, %cond.true1140, %cond.false1118, %cond.true1117, %cond.false1101, %cond.true1100, %cond.false1079, %cond.true1078, %cond.false1057, %cond.true1056, %cond.false1040, %cond.true1039, %cond.false1023, %cond.true1022, %cond.false1006, %cond.true1005, %cond.false989, %cond.true988, %cond.false972, %cond.true971, %cond.false960, %cond.true959, %cond.false938, %cond.true937, %cond.false915, %cond.false914, %cond.true913, %cond.false880, %cond.true879, %cond.false852, %cond.true851, %cond.false835, %cond.true834, %cond.false807, %cond.true806, %cond.false785, %cond.true784, %cond.false768, %cond.true767, %cond.false756, %cond.false755, %cond.true754, %cond.false728, %cond.true727, %cond.false716, %cond.false715, %cond.true714, %cond.false703, %cond.true702, %cond.false685, %cond.true684, %cond.false673, %cond.true672, %cond.false645, %cond.true644, %cond.false623, %cond.false622, %cond.true621, %cond.false610, %cond.false609, %cond.true608, %cond.false597, %cond.true596, %cond.false569, %cond.true568, %cond.false557, %cond.false556, %cond.true555, %cond.false524, %cond.true523, %cond.false501, %cond.true500, %cond.false484, %cond.true483, %cond.false462, %cond.true461, %cond.false440, %cond.true439, %cond.false423, %cond.true422, %cond.false406, %cond.true405, %cond.false389, %cond.true388, %cond.false372, %cond.true371, %cond.false355, %cond.true354, %cond.false343, %cond.true342, %cond.false321, %cond.true320
  %769 = load %struct.sv*, %struct.sv** %invlist, align 8
  %770 = load i64, i64* %uc, align 8
  %call2092 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %769, i64 %770)
  store %struct.sv* %call2092, %struct.sv** %invlist, align 8
  %771 = load %struct.hv*, %struct.hv** @PL_utf8_foldclosures, align 8
  %tobool2093 = icmp ne %struct.hv* %771, null
  br i1 %tobool2093, label %if.end2095, label %if.then2094

if.then2094:                                      ; preds = %if.else2091
  call void @Perl__load_PL_utf8_foldclosures()
  br label %if.end2095

if.end2095:                                       ; preds = %if.then2094, %if.else2091
  %772 = load %struct.hv*, %struct.hv** @PL_utf8_foldclosures, align 8
  %773 = load i8*, i8** %s, align 8
  %774 = load i64, i64* %foldlen, align 8
  %conv2096 = trunc i64 %774 to i32
  %call2097 = call i8* @Perl_hv_common_key_len(%struct.hv* %772, i8* %773, i32 %conv2096, i32 32, %struct.sv* null, i32 0)
  %775 = bitcast i8* %call2097 to %struct.sv**
  store %struct.sv** %775, %struct.sv*** %listp, align 8
  %tobool2098 = icmp ne %struct.sv** %775, null
  br i1 %tobool2098, label %if.then2099, label %if.end2136

if.then2099:                                      ; preds = %if.end2095
  %776 = load %struct.sv**, %struct.sv*** %listp, align 8
  %777 = load %struct.sv*, %struct.sv** %776, align 8
  %778 = bitcast %struct.sv* %777 to %struct.av*
  store %struct.av* %778, %struct.av** %list, align 8
  store i64 0, i64* %k, align 8
  br label %for.cond2100

for.cond2100:                                     ; preds = %for.inc2133, %if.then2099
  %779 = load i64, i64* %k, align 8
  %780 = load %struct.av*, %struct.av** %list, align 8
  %call2101 = call i64 @S_av_top_index(%struct.av* %780)
  %cmp2102 = icmp sle i64 %779, %call2101
  br i1 %cmp2102, label %for.body2104, label %for.end2135

for.body2104:                                     ; preds = %for.cond2100
  %781 = load %struct.av*, %struct.av** %list, align 8
  %782 = load i64, i64* %k, align 8
  %call2105 = call %struct.sv** @Perl_av_fetch(%struct.av* %781, i64 %782, i32 0)
  store %struct.sv** %call2105, %struct.sv*** %c_p, align 8
  %783 = load %struct.sv**, %struct.sv*** %c_p, align 8
  %784 = load %struct.sv*, %struct.sv** %783, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %784, i32 0, i32 2
  %785 = load i32, i32* %sv_flags, align 4
  %and2106 = and i32 %785, -2145386240
  %cmp2107 = icmp eq i32 %and2106, -2147483392
  br i1 %cmp2107, label %cond.true2109, label %cond.false2110

cond.true2109:                                    ; preds = %for.body2104
  %786 = load %struct.sv**, %struct.sv*** %c_p, align 8
  %787 = load %struct.sv*, %struct.sv** %786, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %787, i32 0, i32 0
  %788 = load i8*, i8** %sv_any, align 8
  %789 = bitcast i8* %788 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %789, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %790 = load i64, i64* %xivu_uv, align 8
  br label %cond.end2112

cond.false2110:                                   ; preds = %for.body2104
  %791 = load %struct.sv**, %struct.sv*** %c_p, align 8
  %792 = load %struct.sv*, %struct.sv** %791, align 8
  %call2111 = call i64 @Perl_sv_2uv_flags(%struct.sv* %792, i32 2)
  br label %cond.end2112

cond.end2112:                                     ; preds = %cond.false2110, %cond.true2109
  %cond2113 = phi i64 [ %790, %cond.true2109 ], [ %call2111, %cond.false2110 ]
  store i64 %cond2113, i64* %c, align 8
  %793 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %type2114 = getelementptr inbounds %struct.regnode, %struct.regnode* %793, i32 0, i32 1
  %794 = load i8, i8* %type2114, align 1
  %conv2115 = zext i8 %794 to i32
  %cmp2116 = icmp eq i32 %conv2115, 36
  br i1 %cmp2116, label %land.lhs.true2123, label %lor.lhs.false2118

lor.lhs.false2118:                                ; preds = %cond.end2112
  %795 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %type2119 = getelementptr inbounds %struct.regnode, %struct.regnode* %795, i32 0, i32 1
  %796 = load i8, i8* %type2119, align 1
  %conv2120 = zext i8 %796 to i32
  %cmp2121 = icmp eq i32 %conv2120, 39
  br i1 %cmp2121, label %land.lhs.true2123, label %if.end2131

land.lhs.true2123:                                ; preds = %lor.lhs.false2118, %cond.end2112
  %797 = load i64, i64* %c, align 8
  %cmp2124 = icmp ult i64 %797, 128
  %conv2125 = zext i1 %cmp2124 to i32
  %798 = load i64, i64* %uc, align 8
  %cmp2126 = icmp ult i64 %798, 128
  %conv2127 = zext i1 %cmp2126 to i32
  %cmp2128 = icmp ne i32 %conv2125, %conv2127
  br i1 %cmp2128, label %if.then2130, label %if.end2131

if.then2130:                                      ; preds = %land.lhs.true2123
  br label %for.inc2133

if.end2131:                                       ; preds = %land.lhs.true2123, %lor.lhs.false2118
  %799 = load %struct.sv*, %struct.sv** %invlist, align 8
  %800 = load i64, i64* %c, align 8
  %call2132 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %799, i64 %800)
  store %struct.sv* %call2132, %struct.sv** %invlist, align 8
  br label %for.inc2133

for.inc2133:                                      ; preds = %if.end2131, %if.then2130
  %801 = load i64, i64* %k, align 8
  %inc2134 = add nsw i64 %801, 1
  store i64 %inc2134, i64* %k, align 8
  br label %for.cond2100

for.end2135:                                      ; preds = %for.cond2100
  br label %if.end2136

if.end2136:                                       ; preds = %for.end2135, %if.end2095
  br label %if.end2137

if.end2137:                                       ; preds = %if.end2136, %if.then2089
  br label %if.end2138

if.end2138:                                       ; preds = %if.end2137, %if.end161
  %802 = load %struct.sv*, %struct.sv** %invlist, align 8
  ret %struct.sv* %802
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_ssc_intersection(%struct.regnode_ssc* %ssc, %struct.sv* %invlist, i1 zeroext %invert2nd) #0 {
entry:
  %ssc.addr = alloca %struct.regnode_ssc*, align 8
  %invlist.addr = alloca %struct.sv*, align 8
  %invert2nd.addr = alloca i8, align 1
  store %struct.regnode_ssc* %ssc, %struct.regnode_ssc** %ssc.addr, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %frombool = zext i1 %invert2nd to i8
  store i8 %frombool, i8* %invert2nd.addr, align 1
  %0 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist1 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %0, i32 0, i32 6
  %1 = load %struct.sv*, %struct.sv** %invlist1, align 8
  %2 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %3 = load i8, i8* %invert2nd.addr, align 1
  %tobool = trunc i8 %3 to i1
  %4 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist2 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %4, i32 0, i32 6
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %1, %struct.sv* %2, i1 zeroext %tobool, %struct.sv** %invlist2)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_ssc_union(%struct.regnode_ssc* %ssc, %struct.sv* %invlist, i1 zeroext %invert2nd) #0 {
entry:
  %ssc.addr = alloca %struct.regnode_ssc*, align 8
  %invlist.addr = alloca %struct.sv*, align 8
  %invert2nd.addr = alloca i8, align 1
  store %struct.regnode_ssc* %ssc, %struct.regnode_ssc** %ssc.addr, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %frombool = zext i1 %invert2nd to i8
  store i8 %frombool, i8* %invert2nd.addr, align 1
  %0 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist1 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %0, i32 0, i32 6
  %1 = load %struct.sv*, %struct.sv** %invlist1, align 8
  %2 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %3 = load i8, i8* %invert2nd.addr, align 1
  %tobool = trunc i8 %3 to i1
  %4 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist2 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %4, i32 0, i32 6
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %1, %struct.sv* %2, i1 zeroext %tobool, %struct.sv** %invlist2)
  ret void
}

declare dso_local void @Perl_ck_warner(i32, i8*, ...) #1

declare dso_local i8* @Perl_utf8_hop(i8*, i32) #1

declare dso_local void @Perl_repeatcpy(i8*, i8*, i32, i64) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_add_cp_to_invlist(%struct.sv* %invlist, i64 %cp) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  %cp.addr = alloca i64, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  store i64 %cp, i64* %cp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %1 = load i64, i64* %cp.addr, align 8
  %2 = load i64, i64* %cp.addr, align 8
  %call = call %struct.sv* @Perl__add_range_to_invlist(%struct.sv* %0, i64 %1, i64 %2)
  ret %struct.sv* %call
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_get_ANYOF_cp_list_for_ssc(%struct.RExC_state_t* %pRExC_state, %struct.regnode_charclass* %node) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %node.addr = alloca %struct.regnode_charclass*, align 8
  %invlist = alloca %struct.sv*, align 8
  %only_utf8_locale_invlist = alloca %struct.sv*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %new_node_has_latin1 = alloca i8, align 1
  %rv = alloca %struct.sv*, align 8
  %av = alloca %struct.av*, align 8
  %ary = alloca %struct.sv**, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode_charclass* %node, %struct.regnode_charclass** %node.addr, align 8
  %call = call %struct.sv* @Perl__new_invlist(i64 0)
  %call1 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call)
  store %struct.sv* %call1, %struct.sv** %invlist, align 8
  store %struct.sv* null, %struct.sv** %only_utf8_locale_invlist, align 8
  %0 = load %struct.regnode_charclass*, %struct.regnode_charclass** %node.addr, align 8
  %1 = bitcast %struct.regnode_charclass* %0 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %1, i32 0, i32 3
  %2 = load i32, i32* %arg1, align 4
  store i32 %2, i32* %n, align 4
  store i8 0, i8* %new_node_has_latin1, align 1
  %3 = load i32, i32* %n, align 4
  %cmp = icmp ne i32 %3, -1
  br i1 %cmp, label %if.then, label %if.end42

if.then:                                          ; preds = %entry
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %4, i32 0, i32 5
  %5 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi, align 8
  %data = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %5, i32 0, i32 3
  %6 = load %struct.reg_data*, %struct.reg_data** %data, align 8
  %data2 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %6, i32 0, i32 2
  %7 = load i32, i32* %n, align 4
  %idxprom = zext i32 %7 to i64
  %arrayidx = getelementptr inbounds [1 x i8*], [1 x i8*]* %data2, i64 0, i64 %idxprom
  %8 = load i8*, i8** %arrayidx, align 8
  %9 = bitcast i8* %8 to %struct.sv*
  store %struct.sv* %9, %struct.sv** %rv, align 8
  %10 = load %struct.sv*, %struct.sv** %rv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %11 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %12 = bitcast %struct.sv* %11 to i8*
  %13 = bitcast i8* %12 to %struct.av*
  store %struct.av* %13, %struct.av** %av, align 8
  %14 = load %struct.av*, %struct.av** %av, align 8
  %sv_u3 = getelementptr inbounds %struct.av, %struct.av* %14, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u3 to %struct.sv***
  %15 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %15, %struct.sv*** %ary, align 8
  %16 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx4 = getelementptr inbounds %struct.sv*, %struct.sv** %16, i64 1
  %17 = load %struct.sv*, %struct.sv** %arrayidx4, align 8
  %tobool = icmp ne %struct.sv* %17, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %18 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx5 = getelementptr inbounds %struct.sv*, %struct.sv** %18, i64 1
  %19 = load %struct.sv*, %struct.sv** %arrayidx5, align 8
  %cmp6 = icmp ne %struct.sv* %19, @PL_sv_undef
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %land.lhs.true
  %20 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx8 = getelementptr inbounds %struct.sv*, %struct.sv** %20, i64 1
  %21 = load %struct.sv*, %struct.sv** %arrayidx8, align 8
  %call9 = call %struct.sv* @Perl__get_swash_invlist(%struct.sv* %21)
  %call10 = call %struct.sv* @S_invlist_clone(%struct.sv* %call9)
  %call11 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call10)
  store %struct.sv* %call11, %struct.sv** %invlist, align 8
  br label %if.end30

if.else:                                          ; preds = %land.lhs.true, %if.then
  %22 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx12 = getelementptr inbounds %struct.sv*, %struct.sv** %22, i64 0
  %23 = load %struct.sv*, %struct.sv** %arrayidx12, align 8
  %tobool13 = icmp ne %struct.sv* %23, null
  br i1 %tobool13, label %land.lhs.true14, label %if.else19

land.lhs.true14:                                  ; preds = %if.else
  %24 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx15 = getelementptr inbounds %struct.sv*, %struct.sv** %24, i64 0
  %25 = load %struct.sv*, %struct.sv** %arrayidx15, align 8
  %cmp16 = icmp ne %struct.sv* %25, @PL_sv_undef
  br i1 %cmp16, label %if.then17, label %if.else19

if.then17:                                        ; preds = %land.lhs.true14
  %26 = load %struct.sv*, %struct.sv** %invlist, align 8
  %call18 = call %struct.sv* @Perl__add_range_to_invlist(%struct.sv* %26, i64 0, i64 -1)
  store %struct.sv* %call18, %struct.sv** %retval, align 8
  br label %return

if.else19:                                        ; preds = %land.lhs.true14, %if.else
  %27 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx20 = getelementptr inbounds %struct.sv*, %struct.sv** %27, i64 3
  %28 = load %struct.sv*, %struct.sv** %arrayidx20, align 8
  %tobool21 = icmp ne %struct.sv* %28, null
  br i1 %tobool21, label %land.lhs.true22, label %if.end

land.lhs.true22:                                  ; preds = %if.else19
  %29 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx23 = getelementptr inbounds %struct.sv*, %struct.sv** %29, i64 3
  %30 = load %struct.sv*, %struct.sv** %arrayidx23, align 8
  %cmp24 = icmp ne %struct.sv* %30, @PL_sv_undef
  br i1 %cmp24, label %if.then25, label %if.end

if.then25:                                        ; preds = %land.lhs.true22
  %31 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx26 = getelementptr inbounds %struct.sv*, %struct.sv** %31, i64 3
  %32 = load %struct.sv*, %struct.sv** %arrayidx26, align 8
  %call27 = call %struct.sv* @S_invlist_clone(%struct.sv* %32)
  %call28 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call27)
  store %struct.sv* %call28, %struct.sv** %invlist, align 8
  br label %if.end

if.end:                                           ; preds = %if.then25, %land.lhs.true22, %if.else19
  br label %if.end29

if.end29:                                         ; preds = %if.end
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then7
  %33 = load %struct.regnode_charclass*, %struct.regnode_charclass** %node.addr, align 8
  %flags = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %33, i32 0, i32 0
  %34 = load i8, i8* %flags, align 4
  %conv = zext i8 %34 to i32
  %and = and i32 %conv, 4
  %tobool31 = icmp ne i32 %and, 0
  br i1 %tobool31, label %land.lhs.true32, label %if.end41

land.lhs.true32:                                  ; preds = %if.end30
  %35 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx33 = getelementptr inbounds %struct.sv*, %struct.sv** %35, i64 2
  %36 = load %struct.sv*, %struct.sv** %arrayidx33, align 8
  %tobool34 = icmp ne %struct.sv* %36, null
  br i1 %tobool34, label %land.lhs.true35, label %if.end41

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %37 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx36 = getelementptr inbounds %struct.sv*, %struct.sv** %37, i64 2
  %38 = load %struct.sv*, %struct.sv** %arrayidx36, align 8
  %cmp37 = icmp ne %struct.sv* %38, @PL_sv_undef
  br i1 %cmp37, label %if.then39, label %if.end41

if.then39:                                        ; preds = %land.lhs.true35
  %39 = load %struct.sv**, %struct.sv*** %ary, align 8
  %arrayidx40 = getelementptr inbounds %struct.sv*, %struct.sv** %39, i64 2
  %40 = load %struct.sv*, %struct.sv** %arrayidx40, align 8
  store %struct.sv* %40, %struct.sv** %only_utf8_locale_invlist, align 8
  br label %if.end41

if.end41:                                         ; preds = %if.then39, %land.lhs.true35, %land.lhs.true32, %if.end30
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %entry
  %41 = load %struct.regnode_charclass*, %struct.regnode_charclass** %node.addr, align 8
  %flags43 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %41, i32 0, i32 0
  %42 = load i8, i8* %flags43, align 4
  %conv44 = zext i8 %42 to i32
  %and45 = and i32 %conv44, 1
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %if.then47, label %if.end48

if.then47:                                        ; preds = %if.end42
  %43 = load %struct.sv*, %struct.sv** %invlist, align 8
  %44 = load %struct.sv*, %struct.sv** @PL_UpperLatin1, align 8
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %43, %struct.sv* %44, i1 zeroext true, %struct.sv** %invlist)
  br label %if.end48

if.end48:                                         ; preds = %if.then47, %if.end42
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end48
  %45 = load i32, i32* %i, align 4
  %cmp49 = icmp ult i32 %45, 256
  br i1 %cmp49, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %46 = load %struct.regnode_charclass*, %struct.regnode_charclass** %node.addr, align 8
  %bitmap = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %46, i32 0, i32 4
  %47 = load i32, i32* %i, align 4
  %conv51 = trunc i32 %47 to i8
  %conv52 = zext i8 %conv51 to i32
  %shr = ashr i32 %conv52, 3
  %and53 = and i32 %shr, 31
  %idxprom54 = sext i32 %and53 to i64
  %arrayidx55 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap, i64 0, i64 %idxprom54
  %48 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %48 to i32
  %49 = load i32, i32* %i, align 4
  %and57 = and i32 %49, 7
  %shl = shl i32 1, %and57
  %and58 = and i32 %conv56, %shl
  %tobool59 = icmp ne i32 %and58, 0
  br i1 %tobool59, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br i1 true, label %if.then60, label %if.end63

cond.false:                                       ; preds = %for.body
  br i1 false, label %if.then60, label %if.end63

if.then60:                                        ; preds = %cond.false, %cond.true
  %50 = load %struct.sv*, %struct.sv** %invlist, align 8
  %51 = load i32, i32* %i, align 4
  %conv61 = zext i32 %51 to i64
  %call62 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %50, i64 %conv61)
  store %struct.sv* %call62, %struct.sv** %invlist, align 8
  store i8 1, i8* %new_node_has_latin1, align 1
  br label %if.end63

if.end63:                                         ; preds = %if.then60, %cond.false, %cond.true
  br label %for.inc

for.inc:                                          ; preds = %if.end63
  %52 = load i32, i32* %i, align 4
  %inc = add i32 %52, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %53 = load %struct.regnode_charclass*, %struct.regnode_charclass** %node.addr, align 8
  %flags64 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %53, i32 0, i32 0
  %54 = load i8, i8* %flags64, align 4
  %conv65 = zext i8 %54 to i32
  %and66 = and i32 %conv65, 128
  %tobool67 = icmp ne i32 %and66, 0
  br i1 %tobool67, label %if.then68, label %if.end69

if.then68:                                        ; preds = %for.end
  %55 = load %struct.sv*, %struct.sv** %invlist, align 8
  %56 = load %struct.sv*, %struct.sv** @PL_UpperLatin1, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %55, %struct.sv* %56, i1 zeroext false, %struct.sv** %invlist)
  br label %if.end69

if.end69:                                         ; preds = %if.then68, %for.end
  %57 = load %struct.regnode_charclass*, %struct.regnode_charclass** %node.addr, align 8
  %flags70 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %57, i32 0, i32 0
  %58 = load i8, i8* %flags70, align 4
  %conv71 = zext i8 %58 to i32
  %and72 = and i32 %conv71, 64
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %if.then74, label %if.end75

if.then74:                                        ; preds = %if.end69
  %59 = load %struct.sv*, %struct.sv** %invlist, align 8
  %60 = load %struct.sv*, %struct.sv** @PL_InBitmap, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %59, %struct.sv* %60, i1 zeroext true, %struct.sv** %invlist)
  br label %if.end75

if.end75:                                         ; preds = %if.then74, %if.end69
  %61 = load %struct.regnode_charclass*, %struct.regnode_charclass** %node.addr, align 8
  %flags76 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %61, i32 0, i32 0
  %62 = load i8, i8* %flags76, align 4
  %conv77 = zext i8 %62 to i32
  %and78 = and i32 %conv77, 1
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %if.then80, label %if.else81

if.then80:                                        ; preds = %if.end75
  %63 = load %struct.sv*, %struct.sv** %invlist, align 8
  call void @Perl__invlist_invert(%struct.sv* %63)
  br label %if.end91

if.else81:                                        ; preds = %if.end75
  %64 = load i8, i8* %new_node_has_latin1, align 1
  %tobool82 = trunc i8 %64 to i1
  br i1 %tobool82, label %land.lhs.true84, label %if.end90

land.lhs.true84:                                  ; preds = %if.else81
  %65 = load %struct.regnode_charclass*, %struct.regnode_charclass** %node.addr, align 8
  %flags85 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %65, i32 0, i32 0
  %66 = load i8, i8* %flags85, align 4
  %conv86 = zext i8 %66 to i32
  %and87 = and i32 %conv86, 4
  %tobool88 = icmp ne i32 %and87, 0
  br i1 %tobool88, label %if.then89, label %if.end90

if.then89:                                        ; preds = %land.lhs.true84
  %67 = load %struct.sv*, %struct.sv** %invlist, align 8
  %68 = load %struct.sv*, %struct.sv** @PL_Latin1, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %67, %struct.sv* %68, i1 zeroext false, %struct.sv** %invlist)
  br label %if.end90

if.end90:                                         ; preds = %if.then89, %land.lhs.true84, %if.else81
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %if.then80
  %69 = load %struct.sv*, %struct.sv** %only_utf8_locale_invlist, align 8
  %tobool92 = icmp ne %struct.sv* %69, null
  br i1 %tobool92, label %if.then93, label %if.end98

if.then93:                                        ; preds = %if.end91
  %70 = load %struct.sv*, %struct.sv** %invlist, align 8
  %71 = load %struct.sv*, %struct.sv** %only_utf8_locale_invlist, align 8
  %72 = load %struct.regnode_charclass*, %struct.regnode_charclass** %node.addr, align 8
  %flags94 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %72, i32 0, i32 0
  %73 = load i8, i8* %flags94, align 4
  %conv95 = zext i8 %73 to i32
  %and96 = and i32 %conv95, 1
  %tobool97 = icmp ne i32 %and96, 0
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %70, %struct.sv* %71, i1 zeroext %tobool97, %struct.sv** %invlist)
  br label %if.end98

if.end98:                                         ; preds = %if.then93, %if.end91
  %74 = load %struct.sv*, %struct.sv** %invlist, align 8
  store %struct.sv* %74, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end98, %if.then17
  %75 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %75
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_ssc_is_anything(%struct.regnode_ssc* %ssc) #0 {
entry:
  %retval = alloca i32, align 4
  %ssc.addr = alloca %struct.regnode_ssc*, align 8
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %ret = alloca i8, align 1
  %i = alloca i32, align 4
  store %struct.regnode_ssc* %ssc, %struct.regnode_ssc** %ssc.addr, align 8
  %0 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %flags = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %0, i32 0, i32 0
  %1 = load i8, i8* %flags, align 8
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %2, i32 0, i32 6
  %3 = load %struct.sv*, %struct.sv** %invlist, align 8
  call void @S_invlist_iterinit(%struct.sv* %3)
  %4 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist1 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %4, i32 0, i32 6
  %5 = load %struct.sv*, %struct.sv** %invlist1, align 8
  %call = call zeroext i1 @S_invlist_iternext(%struct.sv* %5, i64* %start, i64* %end)
  br i1 %call, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %if.end
  %6 = load i64, i64* %start, align 8
  %cmp = icmp eq i64 %6, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load i64, i64* %end, align 8
  %cmp4 = icmp eq i64 %7, -1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %if.end
  %8 = phi i1 [ false, %land.lhs.true ], [ false, %if.end ], [ %cmp4, %land.rhs ]
  %frombool = zext i1 %8 to i8
  store i8 %frombool, i8* %ret, align 1
  %9 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist6 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %9, i32 0, i32 6
  %10 = load %struct.sv*, %struct.sv** %invlist6, align 8
  call void @S_invlist_iterfinish(%struct.sv* %10)
  %11 = load i8, i8* %ret, align 1
  %tobool7 = trunc i8 %11 to i1
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %land.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %land.end
  %12 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %classflags = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %12, i32 0, i32 5
  %13 = load i32, i32* %classflags, align 8
  %tobool10 = icmp ne i32 %13, 0
  br i1 %tobool10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end9
  br i1 true, label %if.then11, label %if.end25

cond.false:                                       ; preds = %if.end9
  br i1 false, label %if.then11, label %if.end25

if.then11:                                        ; preds = %cond.false, %cond.true
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then11
  %14 = load i32, i32* %i, align 4
  %cmp12 = icmp slt i32 %14, 30
  br i1 %cmp12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %16 = bitcast %struct.regnode_ssc* %15 to %struct.regnode_charclass_class*
  %classflags14 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %16, i32 0, i32 5
  %17 = load i32, i32* %classflags14, align 4
  %18 = load i32, i32* %i, align 4
  %shl = shl i32 1, %18
  %and15 = and i32 %17, %shl
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %land.lhs.true17, label %if.end23

land.lhs.true17:                                  ; preds = %for.body
  %19 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %20 = bitcast %struct.regnode_ssc* %19 to %struct.regnode_charclass_class*
  %classflags18 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %20, i32 0, i32 5
  %21 = load i32, i32* %classflags18, align 4
  %22 = load i32, i32* %i, align 4
  %add = add nsw i32 %22, 1
  %shl19 = shl i32 1, %add
  %and20 = and i32 %21, %shl19
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %land.lhs.true17
  store i32 1, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %land.lhs.true17, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end23
  %23 = load i32, i32* %i, align 4
  %add24 = add nsw i32 %23, 2
  store i32 %add24, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end25

if.end25:                                         ; preds = %for.end, %cond.false, %cond.true
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end25, %if.then22, %if.then8, %if.then
  %24 = load i32, i32* %retval, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_ssc_is_cp_posixl_init(%struct.RExC_state_t* %pRExC_state, %struct.regnode_ssc* %ssc) #0 {
entry:
  %retval = alloca i32, align 4
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %ssc.addr = alloca %struct.regnode_ssc*, align 8
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %ret = alloca i8, align 1
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode_ssc* %ssc, %struct.regnode_ssc** %ssc.addr, align 8
  %0 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %0, i32 0, i32 6
  %1 = load %struct.sv*, %struct.sv** %invlist, align 8
  call void @S_invlist_iterinit(%struct.sv* %1)
  %2 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist1 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %2, i32 0, i32 6
  %3 = load %struct.sv*, %struct.sv** %invlist1, align 8
  %call = call zeroext i1 @S_invlist_iternext(%struct.sv* %3, i64* %start, i64* %end)
  br i1 %call, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %4 = load i64, i64* %start, align 8
  %cmp = icmp eq i64 %4, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %5 = load i64, i64* %end, align 8
  %cmp2 = icmp eq i64 %5, -1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp2, %land.rhs ]
  %frombool = zext i1 %6 to i8
  store i8 %frombool, i8* %ret, align 1
  %7 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %invlist3 = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %7, i32 0, i32 6
  %8 = load %struct.sv*, %struct.sv** %invlist3, align 8
  call void @S_invlist_iterfinish(%struct.sv* %8)
  %9 = load i8, i8* %ret, align 1
  %tobool = trunc i8 %9 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.end
  %10 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %contains_locale = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %10, i32 0, i32 34
  %11 = load i32, i32* %contains_locale, align 8
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %land.lhs.true5, label %if.end8

land.lhs.true5:                                   ; preds = %if.end
  %12 = load %struct.regnode_ssc*, %struct.regnode_ssc** %ssc.addr, align 8
  %classflags = getelementptr inbounds %struct.regnode_ssc, %struct.regnode_ssc* %12, i32 0, i32 5
  %13 = load i32, i32* %classflags, align 8
  %cmp6 = icmp eq i32 %13, 536870911
  br i1 %cmp6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %land.lhs.true5
  store i32 0, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end8, %if.then7, %if.then
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

declare dso_local i64 @Perl_valid_utf8_to_uvchr(i8*, i64*) #1

declare dso_local %struct.sv* @Perl_newSV(i64) #1

declare dso_local i8* @Perl_uvoffuni_to_utf8_flags(i8*, i64, i64) #1

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #4

; Function Attrs: noinline nounwind uwtable
define internal void @S_add_above_Latin1_folds(%struct.RExC_state_t* %pRExC_state, i8 zeroext %cp, %struct.sv** %invlist) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %cp.addr = alloca i8, align 1
  %invlist.addr = alloca %struct.sv**, align 8
  %offset = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i8 %cp, i8* %cp.addr, align 1
  store %struct.sv** %invlist, %struct.sv*** %invlist.addr, align 8
  %0 = load i8, i8* %cp.addr, align 1
  %conv = zext i8 %0 to i32
  switch i32 %conv, label %sw.default [
    i32 107, label %sw.bb
    i32 75, label %sw.bb
    i32 115, label %sw.bb1
    i32 83, label %sw.bb1
    i32 181, label %sw.bb3
    i32 197, label %sw.bb6
    i32 229, label %sw.bb6
    i32 255, label %sw.bb8
    i32 223, label %sw.bb10
  ]

sw.bb:                                            ; preds = %entry, %entry
  %1 = load %struct.sv**, %struct.sv*** %invlist.addr, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %call = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %2, i64 8490)
  %3 = load %struct.sv**, %struct.sv*** %invlist.addr, align 8
  store %struct.sv* %call, %struct.sv** %3, align 8
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry, %entry
  %4 = load %struct.sv**, %struct.sv*** %invlist.addr, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %call2 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %5, i64 383)
  %6 = load %struct.sv**, %struct.sv*** %invlist.addr, align 8
  store %struct.sv* %call2, %struct.sv** %6, align 8
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  %7 = load %struct.sv**, %struct.sv*** %invlist.addr, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  %call4 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %8, i64 924)
  %9 = load %struct.sv**, %struct.sv*** %invlist.addr, align 8
  store %struct.sv* %call4, %struct.sv** %9, align 8
  %10 = load %struct.sv**, %struct.sv*** %invlist.addr, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  %call5 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %11, i64 956)
  %12 = load %struct.sv**, %struct.sv*** %invlist.addr, align 8
  store %struct.sv* %call5, %struct.sv** %12, align 8
  br label %sw.epilog

sw.bb6:                                           ; preds = %entry, %entry
  %13 = load %struct.sv**, %struct.sv*** %invlist.addr, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  %call7 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %14, i64 8491)
  %15 = load %struct.sv**, %struct.sv*** %invlist.addr, align 8
  store %struct.sv* %call7, %struct.sv** %15, align 8
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry
  %16 = load %struct.sv**, %struct.sv*** %invlist.addr, align 8
  %17 = load %struct.sv*, %struct.sv** %16, align 8
  %call9 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %17, i64 376)
  %18 = load %struct.sv**, %struct.sv*** %invlist.addr, align 8
  store %struct.sv* %call9, %struct.sv** %18, align 8
  br label %sw.epilog

sw.bb10:                                          ; preds = %entry
  %19 = load %struct.sv**, %struct.sv*** %invlist.addr, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  %call11 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %20, i64 7838)
  %21 = load %struct.sv**, %struct.sv*** %invlist.addr, align 8
  store %struct.sv* %call11, %struct.sv** %21, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %22 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %22, i32 0, i32 12
  %23 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %24 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %24, i32 0, i32 13
  %25 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp = icmp eq %struct.regnode* %23, %25
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %sw.default
  br label %do.body

do.body:                                          ; preds = %if.then
  %26 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %26, i32 0, i32 8
  %27 = load i8*, i8** %parse, align 8
  %28 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %28, i32 0, i32 2
  %29 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %27 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %29 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %offset, align 8
  %30 = load i8, i8* %cp.addr, align 1
  %conv13 = zext i8 %30 to i32
  %31 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %31, i32 0, i32 25
  %32 = load i32, i32* %utf8, align 8
  %tobool = icmp ne i32 %32, 0
  %33 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  %tobool14 = icmp ne i32 %cond, 0
  %34 = zext i1 %tobool14 to i64
  %cond15 = select i1 %tobool14, i32 1, i32 0
  %35 = load i64, i64* %offset, align 8
  %36 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp16 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %36, i32 0, i32 2
  %37 = load i8*, i8** %precomp16, align 8
  %38 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf817 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %38, i32 0, i32 25
  %39 = load i32, i32* %utf817, align 8
  %tobool18 = icmp ne i32 %39, 0
  %40 = zext i1 %tobool18 to i64
  %cond19 = select i1 %tobool18, i32 1, i32 0
  %tobool20 = icmp ne i32 %cond19, 0
  %41 = zext i1 %tobool20 to i64
  %cond21 = select i1 %tobool20, i32 1, i32 0
  %42 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %42, i32 0, i32 7
  %43 = load i8*, i8** %end, align 8
  %44 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp22 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %44, i32 0, i32 2
  %45 = load i8*, i8** %precomp22, align 8
  %sub.ptr.lhs.cast23 = ptrtoint i8* %43 to i64
  %sub.ptr.rhs.cast24 = ptrtoint i8* %45 to i64
  %sub.ptr.sub25 = sub i64 %sub.ptr.lhs.cast23, %sub.ptr.rhs.cast24
  %46 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %sub.ptr.sub25, %46
  %47 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp26 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %47, i32 0, i32 2
  %48 = load i8*, i8** %precomp26, align 8
  %49 = load i64, i64* %offset, align 8
  %add.ptr = getelementptr inbounds i8, i8* %48, i64 %49
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 20, i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.224, i64 0, i64 0), i32 %conv13, i32 %cond15, i64 %35, i8* %37, i32 %cond21, i64 %sub, i8* %add.ptr)
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end

if.end:                                           ; preds = %do.end, %sw.default
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end, %sw.bb10, %sw.bb8, %sw.bb6, %sw.bb3, %sw.bb1, %sw.bb
  ret void
}

declare dso_local void @Perl_ck_warner_d(i32, i8*, ...) #1

declare dso_local void @Perl_fbm_compile(%struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_invlist_highest(%struct.sv* %invlist) #0 {
entry:
  %retval = alloca i64, align 8
  %invlist.addr = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %array = alloca i64*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call = call i64 @S__invlist_len(%struct.sv* %0)
  store i64 %call, i64* %len, align 8
  %1 = load i64, i64* %len, align 8
  %cmp = icmp eq i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %call1 = call i64* @S_invlist_array(%struct.sv* %2)
  store i64* %call1, i64** %array, align 8
  %3 = load i64, i64* %len, align 8
  %sub = sub i64 %3, 1
  %and = and i64 %sub, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %4 = load i64*, i64** %array, align 8
  %5 = load i64, i64* %len, align 8
  %sub2 = sub i64 %5, 1
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %sub2
  %6 = load i64, i64* %arrayidx, align 8
  %sub3 = sub i64 %6, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ -1, %cond.true ], [ %sub3, %cond.false ]
  store i64 %cond, i64* %retval, align 8
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %7 = load i64, i64* %retval, align 8
  ret i64 %7
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_populate_ANYOF_from_invlist(%struct.regnode* %node, %struct.sv** %invlist_ptr) #0 {
entry:
  %node.addr = alloca %struct.regnode*, align 8
  %invlist_ptr.addr = alloca %struct.sv**, align 8
  %change_invlist = alloca i8, align 1
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %high = alloca i64, align 8
  %i = alloca i32, align 4
  store %struct.regnode* %node, %struct.regnode** %node.addr, align 8
  store %struct.sv** %invlist_ptr, %struct.sv*** %invlist_ptr.addr, align 8
  %0 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %1 = bitcast %struct.regnode* %0 to %struct.regnode_charclass*
  %bitmap = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %1, i32 0, i32 4
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %arraydecay, i8 0, i64 32, i1 false)
  %2 = load %struct.sv**, %struct.sv*** %invlist_ptr.addr, align 8
  %3 = load %struct.sv*, %struct.sv** %2, align 8
  %tobool = icmp ne %struct.sv* %3, null
  br i1 %tobool, label %if.then, label %if.end59

if.then:                                          ; preds = %entry
  store i8 0, i8* %change_invlist, align 1
  %4 = load %struct.sv**, %struct.sv*** %invlist_ptr.addr, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  call void @S_invlist_iterinit(%struct.sv* %5)
  br label %while.cond

while.cond:                                       ; preds = %for.end, %if.then
  %6 = load %struct.sv**, %struct.sv*** %invlist_ptr.addr, align 8
  %7 = load %struct.sv*, %struct.sv** %6, align 8
  %call = call zeroext i1 @S_invlist_iternext(%struct.sv* %7, i64* %start, i64* %end)
  br i1 %call, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i64, i64* %end, align 8
  %cmp = icmp eq i64 %8, -1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %while.body
  %9 = load i64, i64* %start, align 8
  %cmp1 = icmp ule i64 %9, 256
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %land.lhs.true
  %10 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %flags = getelementptr inbounds %struct.regnode, %struct.regnode* %10, i32 0, i32 0
  %11 = load i8, i8* %flags, align 2
  %conv = zext i8 %11 to i32
  %or = or i32 %conv, 64
  %conv3 = trunc i32 %or to i8
  store i8 %conv3, i8* %flags, align 2
  br label %if.end11

if.else:                                          ; preds = %land.lhs.true, %while.body
  %12 = load i64, i64* %end, align 8
  %cmp4 = icmp uge i64 %12, 256
  br i1 %cmp4, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.else
  %13 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %flags7 = getelementptr inbounds %struct.regnode, %struct.regnode* %13, i32 0, i32 0
  %14 = load i8, i8* %flags7, align 2
  %conv8 = zext i8 %14 to i32
  %or9 = or i32 %conv8, 2
  %conv10 = trunc i32 %or9 to i8
  store i8 %conv10, i8* %flags7, align 2
  br label %if.end

if.end:                                           ; preds = %if.then6, %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end, %if.then2
  %15 = load i64, i64* %start, align 8
  %cmp12 = icmp uge i64 %15, 256
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end11
  br label %while.end

if.end15:                                         ; preds = %if.end11
  store i8 1, i8* %change_invlist, align 1
  %16 = load i64, i64* %end, align 8
  %cmp16 = icmp ult i64 %16, 255
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end15
  %17 = load i64, i64* %end, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end15
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %17, %cond.true ], [ 255, %cond.false ]
  store i64 %cond, i64* %high, align 8
  %18 = load i64, i64* %start, align 8
  %conv18 = trunc i64 %18 to i32
  store i32 %conv18, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %19 = load i32, i32* %i, align 4
  %20 = load i64, i64* %high, align 8
  %conv19 = trunc i64 %20 to i32
  %cmp20 = icmp sle i32 %19, %conv19
  br i1 %cmp20, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %22 = bitcast %struct.regnode* %21 to %struct.regnode_charclass*
  %bitmap22 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %22, i32 0, i32 4
  %23 = load i32, i32* %i, align 4
  %conv23 = trunc i32 %23 to i8
  %conv24 = zext i8 %conv23 to i32
  %shr = ashr i32 %conv24, 3
  %and = and i32 %shr, 31
  %idxprom = sext i32 %and to i64
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap22, i64 0, i64 %idxprom
  %24 = load i8, i8* %arrayidx, align 1
  %conv25 = sext i8 %24 to i32
  %25 = load i32, i32* %i, align 4
  %and26 = and i32 %25, 7
  %shl = shl i32 1, %and26
  %and27 = and i32 %conv25, %shl
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.true29, label %cond.false30

cond.true29:                                      ; preds = %for.body
  br i1 true, label %if.end44, label %if.then31

cond.false30:                                     ; preds = %for.body
  br i1 false, label %if.end44, label %if.then31

if.then31:                                        ; preds = %cond.false30, %cond.true29
  %26 = load i32, i32* %i, align 4
  %and32 = and i32 %26, 7
  %shl33 = shl i32 1, %and32
  %27 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %28 = bitcast %struct.regnode* %27 to %struct.regnode_charclass*
  %bitmap34 = getelementptr inbounds %struct.regnode_charclass, %struct.regnode_charclass* %28, i32 0, i32 4
  %29 = load i32, i32* %i, align 4
  %conv35 = trunc i32 %29 to i8
  %conv36 = zext i8 %conv35 to i32
  %shr37 = ashr i32 %conv36, 3
  %and38 = and i32 %shr37, 31
  %idxprom39 = sext i32 %and38 to i64
  %arrayidx40 = getelementptr inbounds [32 x i8], [32 x i8]* %bitmap34, i64 0, i64 %idxprom39
  %30 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %30 to i32
  %or42 = or i32 %conv41, %shl33
  %conv43 = trunc i32 %or42 to i8
  store i8 %conv43, i8* %arrayidx40, align 1
  br label %if.end44

if.end44:                                         ; preds = %if.then31, %cond.false30, %cond.true29
  br label %for.inc

for.inc:                                          ; preds = %if.end44
  %31 = load i32, i32* %i, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.end:                                        ; preds = %if.then14, %while.cond
  %32 = load %struct.sv**, %struct.sv*** %invlist_ptr.addr, align 8
  %33 = load %struct.sv*, %struct.sv** %32, align 8
  call void @S_invlist_iterfinish(%struct.sv* %33)
  %34 = load i8, i8* %change_invlist, align 1
  %tobool45 = trunc i8 %34 to i1
  br i1 %tobool45, label %if.then46, label %if.end47

if.then46:                                        ; preds = %while.end
  %35 = load %struct.sv**, %struct.sv*** %invlist_ptr.addr, align 8
  %36 = load %struct.sv*, %struct.sv** %35, align 8
  %37 = load %struct.sv*, %struct.sv** @PL_InBitmap, align 8
  %38 = load %struct.sv**, %struct.sv*** %invlist_ptr.addr, align 8
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %36, %struct.sv* %37, i1 zeroext true, %struct.sv** %38)
  br label %if.end47

if.end47:                                         ; preds = %if.then46, %while.end
  %39 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %flags48 = getelementptr inbounds %struct.regnode, %struct.regnode* %39, i32 0, i32 0
  %40 = load i8, i8* %flags48, align 2
  %conv49 = zext i8 %40 to i32
  %and50 = and i32 %conv49, 64
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %if.then52, label %if.end53

if.then52:                                        ; preds = %if.end47
  %41 = load %struct.sv**, %struct.sv*** %invlist_ptr.addr, align 8
  %42 = load %struct.sv*, %struct.sv** %41, align 8
  %43 = load %struct.sv*, %struct.sv** @PL_InBitmap, align 8
  %44 = load %struct.sv**, %struct.sv*** %invlist_ptr.addr, align 8
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %42, %struct.sv* %43, i1 zeroext false, %struct.sv** %44)
  br label %if.end53

if.end53:                                         ; preds = %if.then52, %if.end47
  %45 = load %struct.sv**, %struct.sv*** %invlist_ptr.addr, align 8
  %46 = load %struct.sv*, %struct.sv** %45, align 8
  %call54 = call i64 @S__invlist_len(%struct.sv* %46)
  %cmp55 = icmp eq i64 %call54, 0
  br i1 %cmp55, label %if.then57, label %if.end58

if.then57:                                        ; preds = %if.end53
  %47 = load %struct.sv**, %struct.sv*** %invlist_ptr.addr, align 8
  %48 = load %struct.sv*, %struct.sv** %47, align 8
  %49 = bitcast %struct.sv* %48 to i8*
  %50 = bitcast i8* %49 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %50)
  %51 = load %struct.sv**, %struct.sv*** %invlist_ptr.addr, align 8
  store %struct.sv* null, %struct.sv** %51, align 8
  br label %if.end58

if.end58:                                         ; preds = %if.then57, %if.end53
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_set_ANYOF_arg(%struct.RExC_state_t* %pRExC_state, %struct.regnode* %node, %struct.sv* %cp_list, %struct.sv* %runtime_defns, %struct.sv* %only_utf8_locale_list, %struct.sv* %swash, i1 zeroext %has_user_defined_property) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %node.addr = alloca %struct.regnode*, align 8
  %cp_list.addr = alloca %struct.sv*, align 8
  %runtime_defns.addr = alloca %struct.sv*, align 8
  %only_utf8_locale_list.addr = alloca %struct.sv*, align 8
  %swash.addr = alloca %struct.sv*, align 8
  %has_user_defined_property.addr = alloca i8, align 1
  %n = alloca i64, align 8
  %av = alloca %struct.av*, align 8
  %rv = alloca %struct.sv*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode* %node, %struct.regnode** %node.addr, align 8
  store %struct.sv* %cp_list, %struct.sv** %cp_list.addr, align 8
  store %struct.sv* %runtime_defns, %struct.sv** %runtime_defns.addr, align 8
  store %struct.sv* %only_utf8_locale_list, %struct.sv** %only_utf8_locale_list.addr, align 8
  store %struct.sv* %swash, %struct.sv** %swash.addr, align 8
  %frombool = zext i1 %has_user_defined_property to i8
  store i8 %frombool, i8* %has_user_defined_property.addr, align 1
  %0 = load %struct.sv*, %struct.sv** %cp_list.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %runtime_defns.addr, align 8
  %tobool1 = icmp ne %struct.sv* %1, null
  br i1 %tobool1, label %if.else, label %land.lhs.true2

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load %struct.sv*, %struct.sv** %only_utf8_locale_list.addr, align 8
  %tobool3 = icmp ne %struct.sv* %2, null
  br i1 %tobool3, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true2
  %3 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %4 = bitcast %struct.regnode* %3 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %4, i32 0, i32 3
  store i32 -1, i32* %arg1, align 4
  br label %if.end31

if.else:                                          ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %call = call %struct.sv* @Perl_newSV_type(i32 11)
  %5 = bitcast %struct.sv* %call to i8*
  %6 = bitcast i8* %5 to %struct.av*
  store %struct.av* %6, %struct.av** %av, align 8
  %7 = load %struct.av*, %struct.av** %av, align 8
  %8 = load %struct.sv*, %struct.sv** %runtime_defns.addr, align 8
  %tobool4 = icmp ne %struct.sv* %8, null
  br i1 %tobool4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %9 = load %struct.sv*, %struct.sv** %runtime_defns.addr, align 8
  %10 = bitcast %struct.sv* %9 to i8*
  %11 = bitcast i8* %10 to %struct.sv*
  %call5 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %11)
  br label %cond.end

cond.false:                                       ; preds = %if.else
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %call5, %cond.true ], [ @PL_sv_undef, %cond.false ]
  %call6 = call %struct.sv** @Perl_av_store(%struct.av* %7, i64 0, %struct.sv* %cond)
  %12 = load %struct.sv*, %struct.sv** %swash.addr, align 8
  %tobool7 = icmp ne %struct.sv* %12, null
  br i1 %tobool7, label %if.then8, label %if.else10

if.then8:                                         ; preds = %cond.end
  %13 = load %struct.av*, %struct.av** %av, align 8
  %14 = load %struct.sv*, %struct.sv** %swash.addr, align 8
  %call9 = call %struct.sv** @Perl_av_store(%struct.av* %13, i64 1, %struct.sv* %14)
  %15 = load %struct.sv*, %struct.sv** %cp_list.addr, align 8
  %16 = bitcast %struct.sv* %15 to i8*
  %17 = bitcast i8* %16 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %17)
  br label %if.end18

if.else10:                                        ; preds = %cond.end
  %18 = load %struct.av*, %struct.av** %av, align 8
  %call11 = call %struct.sv** @Perl_av_store(%struct.av* %18, i64 1, %struct.sv* @PL_sv_undef)
  %19 = load %struct.sv*, %struct.sv** %cp_list.addr, align 8
  %tobool12 = icmp ne %struct.sv* %19, null
  br i1 %tobool12, label %if.then13, label %if.end

if.then13:                                        ; preds = %if.else10
  %20 = load %struct.av*, %struct.av** %av, align 8
  %21 = load %struct.sv*, %struct.sv** %cp_list.addr, align 8
  %call14 = call %struct.sv** @Perl_av_store(%struct.av* %20, i64 3, %struct.sv* %21)
  %22 = load %struct.av*, %struct.av** %av, align 8
  %23 = load i8, i8* %has_user_defined_property.addr, align 1
  %tobool15 = trunc i8 %23 to i1
  %conv = zext i1 %tobool15 to i64
  %call16 = call %struct.sv* @Perl_newSVuv(i64 %conv)
  %call17 = call %struct.sv** @Perl_av_store(%struct.av* %22, i64 4, %struct.sv* %call16)
  br label %if.end

if.end:                                           ; preds = %if.then13, %if.else10
  br label %if.end18

if.end18:                                         ; preds = %if.end, %if.then8
  %24 = load %struct.sv*, %struct.sv** %only_utf8_locale_list.addr, align 8
  %tobool19 = icmp ne %struct.sv* %24, null
  br i1 %tobool19, label %if.then20, label %if.else22

if.then20:                                        ; preds = %if.end18
  %25 = load %struct.av*, %struct.av** %av, align 8
  %26 = load %struct.sv*, %struct.sv** %only_utf8_locale_list.addr, align 8
  %call21 = call %struct.sv** @Perl_av_store(%struct.av* %25, i64 2, %struct.sv* %26)
  br label %if.end24

if.else22:                                        ; preds = %if.end18
  %27 = load %struct.av*, %struct.av** %av, align 8
  %call23 = call %struct.sv** @Perl_av_store(%struct.av* %27, i64 2, %struct.sv* @PL_sv_undef)
  br label %if.end24

if.end24:                                         ; preds = %if.else22, %if.then20
  %28 = load %struct.av*, %struct.av** %av, align 8
  %29 = bitcast %struct.av* %28 to i8*
  %30 = bitcast i8* %29 to %struct.sv*
  %call25 = call %struct.sv* @Perl_newRV_noinc(%struct.sv* %30)
  store %struct.sv* %call25, %struct.sv** %rv, align 8
  %31 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call26 = call i32 @S_add_data(%struct.RExC_state_t* %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), i32 1)
  %conv27 = zext i32 %call26 to i64
  store i64 %conv27, i64* %n, align 8
  %32 = load %struct.sv*, %struct.sv** %rv, align 8
  %33 = bitcast %struct.sv* %32 to i8*
  %34 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %34, i32 0, i32 5
  %35 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi, align 8
  %data = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %35, i32 0, i32 3
  %36 = load %struct.reg_data*, %struct.reg_data** %data, align 8
  %data28 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %36, i32 0, i32 2
  %37 = load i64, i64* %n, align 8
  %arrayidx = getelementptr inbounds [1 x i8*], [1 x i8*]* %data28, i64 0, i64 %37
  store i8* %33, i8** %arrayidx, align 8
  %38 = load i64, i64* %n, align 8
  %conv29 = trunc i64 %38 to i32
  %39 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %40 = bitcast %struct.regnode* %39 to %struct.regnode_1*
  %arg130 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %40, i32 0, i32 3
  store i32 %conv29, i32* %arg130, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.end24, %if.then
  ret void
}

declare dso_local %struct.sv* @Perl_newSVuv(i64) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_invlist_max(%struct.sv* %invlist) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %2, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %3 = load i64, i64* %xpvlenu_len, align 8
  %cmp = icmp eq i64 %3, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any1, align 8
  %6 = bitcast i8* %5 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %6, i32 0, i32 2
  %7 = load i64, i64* %xpv_cur, align 8
  %div = udiv i64 %7, 8
  %sub = sub i64 %div, 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any2, align 8
  %10 = bitcast i8* %9 to %struct.xpv*
  %xpv_len_u3 = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 3
  %xpvlenu_len4 = bitcast %union.anon.19* %xpv_len_u3 to i64*
  %11 = load i64, i64* %xpvlenu_len4, align 8
  %div5 = udiv i64 %11, 8
  %sub6 = sub i64 %div5, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub, %cond.true ], [ %sub6, %cond.false ]
  ret i64 %cond
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_invlist_extend(%struct.sv* %invlist, i64 %new_max) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  %new_max.addr = alloca i64, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  store i64 %new_max, i64* %new_max.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 268435456
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %5 = load i64, i64* %xpvlenu_len, align 8
  %6 = load i64, i64* %new_max.addr, align 8
  %add = add i64 %6, 1
  %mul = mul i64 %add, 8
  %cmp = icmp ult i64 %5, %mul
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %7 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %8 = load i64, i64* %new_max.addr, align 8
  %add1 = add i64 %8, 1
  %mul2 = mul i64 %add1, 8
  %call = call i8* @Perl_sv_grow(%struct.sv* %7, i64 %mul2)
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %9 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %10 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %10, %cond.false ]
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_re_croak2(i1 zeroext %utf8, i8* %pat1, i8* %pat2, ...) #0 {
entry:
  %utf8.addr = alloca i8, align 1
  %pat1.addr = alloca i8*, align 8
  %pat2.addr = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %l1 = alloca i64, align 8
  %l2 = alloca i64, align 8
  %buf = alloca [512 x i8], align 16
  %msv = alloca %struct.sv*, align 8
  %message = alloca i8*, align 8
  %frombool = zext i1 %utf8 to i8
  store i8 %frombool, i8* %utf8.addr, align 1
  store i8* %pat1, i8** %pat1.addr, align 8
  store i8* %pat2, i8** %pat2.addr, align 8
  %0 = load i8*, i8** %pat1.addr, align 8
  %call = call i64 @strlen(i8* %0) #6
  store i64 %call, i64* %l1, align 8
  %1 = load i8*, i8** %pat2.addr, align 8
  %call1 = call i64 @strlen(i8* %1) #6
  store i64 %call1, i64* %l2, align 8
  %2 = load i64, i64* %l1, align 8
  %cmp = icmp ugt i64 %2, 510
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 510, i64* %l1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i64, i64* %l1, align 8
  %4 = load i64, i64* %l2, align 8
  %add = add i64 %3, %4
  %cmp2 = icmp ugt i64 %add, 510
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  %5 = load i64, i64* %l1, align 8
  %sub = sub i64 510, %5
  store i64 %sub, i64* %l2, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.end
  %arraydecay = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  %6 = load i8*, i8** %pat1.addr, align 8
  %7 = load i64, i64* %l1, align 8
  %mul = mul i64 %7, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %arraydecay, i8* align 1 %6, i64 %mul, i1 false)
  %arraydecay5 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  %8 = load i64, i64* %l1, align 8
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay5, i64 %8
  %9 = load i8*, i8** %pat2.addr, align 8
  %10 = load i64, i64* %l2, align 8
  %mul6 = mul i64 %10, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 1 %9, i64 %mul6, i1 false)
  %11 = load i64, i64* %l1, align 8
  %12 = load i64, i64* %l2, align 8
  %add7 = add i64 %11, %12
  %arrayidx = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 %add7
  store i8 10, i8* %arrayidx, align 1
  %13 = load i64, i64* %l1, align 8
  %14 = load i64, i64* %l2, align 8
  %add8 = add i64 %13, %14
  %add9 = add i64 %add8, 1
  %arrayidx10 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 %add9
  store i8 0, i8* %arrayidx10, align 1
  %arraydecay11 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay1112 = bitcast %struct.__va_list_tag* %arraydecay11 to i8*
  call void @llvm.va_start(i8* %arraydecay1112)
  %arraydecay13 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  %call14 = call %struct.sv* @Perl_vmess(i8* %arraydecay13, [1 x %struct.__va_list_tag]* %args)
  store %struct.sv* %call14, %struct.sv** %msv, align 8
  %arraydecay15 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay1516 = bitcast %struct.__va_list_tag* %arraydecay15 to i8*
  call void @llvm.va_end(i8* %arraydecay1516)
  %15 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags, align 4
  %and = and i32 %16, 2098176
  %cmp17 = icmp eq i32 %and, 1024
  br i1 %cmp17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end4
  %17 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %19, i32 0, i32 2
  %20 = load i64, i64* %xpv_cur, align 8
  store i64 %20, i64* %l1, align 8
  %21 = load %struct.sv*, %struct.sv** %msv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %22 = load i8*, i8** %svu_pv, align 8
  %add.ptr18 = getelementptr inbounds i8, i8* %22, i64 0
  br label %cond.end

cond.false:                                       ; preds = %if.end4
  %23 = load %struct.sv*, %struct.sv** %msv, align 8
  %call19 = call i8* @Perl_sv_2pv_flags(%struct.sv* %23, i64* %l1, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr18, %cond.true ], [ %call19, %cond.false ]
  store i8* %cond, i8** %message, align 8
  %24 = load i64, i64* %l1, align 8
  %cmp20 = icmp ugt i64 %24, 512
  br i1 %cmp20, label %if.then21, label %if.end22

if.then21:                                        ; preds = %cond.end
  store i64 512, i64* %l1, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.then21, %cond.end
  %arraydecay23 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  %25 = load i8*, i8** %message, align 8
  %26 = load i64, i64* %l1, align 8
  %mul24 = mul i64 %26, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %arraydecay23, i8* align 1 %25, i64 %mul24, i1 false)
  %27 = load i8, i8* %utf8.addr, align 1
  %tobool = trunc i8 %27 to i1
  %28 = zext i1 %tobool to i64
  %cond25 = select i1 %tobool, i32 1, i32 0
  %29 = load i64, i64* %l1, align 8
  %sub26 = sub i64 %29, 1
  %arraydecay27 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.268, i64 0, i64 0), i32 %cond25, i64 %sub26, i8* %arraydecay27)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.regnode* @S_reganode(%struct.RExC_state_t* %pRExC_state, i8 zeroext %op, i32 %arg) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %op.addr = alloca i8, align 1
  %arg.addr = alloca i32, align 4
  %ret = alloca %struct.regnode*, align 8
  %ptr = alloca %struct.regnode*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i8 %op, i8* %op.addr, align 1
  store i32 %arg, i32* %arg.addr, align 4
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1 = load i8, i8* %op.addr, align 1
  %2 = load i8, i8* %op.addr, align 1
  %idxprom = zext i8 %2 to i64
  %arrayidx = getelementptr inbounds [94 x i8], [94 x i8]* @regarglen, i64 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i64
  %call = call %struct.regnode* @S_regnode_guts(%struct.RExC_state_t* %0, i8 zeroext %1, i64 %conv, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.269, i64 0, i64 0))
  store %struct.regnode* %call, %struct.regnode** %ret, align 8
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %4, i32 0, i32 12
  %5 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %6 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %6, i32 0, i32 13
  %7 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp = icmp eq %struct.regnode* %5, %7
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %8 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %8, %struct.regnode** %ptr, align 8
  br label %do.body

do.body:                                          ; preds = %if.then
  %9 = load i32, i32* %arg.addr, align 4
  %10 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %11 = bitcast %struct.regnode* %10 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %11, i32 0, i32 3
  store i32 %9, i32* %arg1, align 4
  br label %do.body2

do.body2:                                         ; preds = %do.body
  %12 = load i8, i8* %op.addr, align 1
  %13 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %13, i32 0, i32 1
  store i8 %12, i8* %type, align 1
  %14 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %14, i32 0, i32 2
  store i16 0, i16* %next_off, align 2
  %15 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %15, i32 1
  store %struct.regnode* %incdec.ptr, %struct.regnode** %ptr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body2
  %16 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %add.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %16, i64 1
  store %struct.regnode* %add.ptr, %struct.regnode** %ptr, align 8
  br label %do.end3

do.end3:                                          ; preds = %do.end
  %17 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %18 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit4 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %18, i32 0, i32 12
  store %struct.regnode* %17, %struct.regnode** %emit4, align 8
  br label %if.end

if.end:                                           ; preds = %do.end3, %entry
  %19 = load %struct.regnode*, %struct.regnode** %ret, align 8
  ret %struct.regnode* %19
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.regnode* @S_reg_node(%struct.RExC_state_t* %pRExC_state, i8 zeroext %op) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %op.addr = alloca i8, align 1
  %ret = alloca %struct.regnode*, align 8
  %ptr = alloca %struct.regnode*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i8 %op, i8* %op.addr, align 1
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1 = load i8, i8* %op.addr, align 1
  %2 = load i8, i8* %op.addr, align 1
  %idxprom = zext i8 %2 to i64
  %arrayidx = getelementptr inbounds [94 x i8], [94 x i8]* @regarglen, i64 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i64
  %call = call %struct.regnode* @S_regnode_guts(%struct.RExC_state_t* %0, i8 zeroext %1, i64 %conv, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.271, i64 0, i64 0))
  store %struct.regnode* %call, %struct.regnode** %ret, align 8
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %4, i32 0, i32 12
  %5 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %6 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %6, i32 0, i32 13
  %7 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp = icmp eq %struct.regnode* %5, %7
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %8 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %8, %struct.regnode** %ptr, align 8
  br label %do.body

do.body:                                          ; preds = %if.then
  %9 = load i8, i8* %op.addr, align 1
  %10 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %10, i32 0, i32 1
  store i8 %9, i8* %type, align 1
  %11 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %11, i32 0, i32 2
  store i16 0, i16* %next_off, align 2
  %12 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %12, i32 1
  store %struct.regnode* %incdec.ptr, %struct.regnode** %ptr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %13 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %14 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %14, i32 0, i32 12
  store %struct.regnode* %13, %struct.regnode** %emit2, align 8
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %15 = load %struct.regnode*, %struct.regnode** %ret, align 8
  ret %struct.regnode* %15
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @S_nextchar(%struct.RExC_state_t* %pRExC_state) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %retval1 = alloca i8*, align 8
  %ellipses = alloca i8*, align 8
  %len = alloca i64, align 8
  %p = alloca i8*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 8
  %1 = load i8*, i8** %parse, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i32 1
  store i8* %incdec.ptr, i8** %parse, align 8
  store i8* %1, i8** %retval1, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.then52, %while.end, %entry
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 7
  %3 = load i8*, i8** %end, align 8
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %4, i32 0, i32 8
  %5 = load i8*, i8** %parse2, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp sge i64 %sub.ptr.sub, 3
  br i1 %cmp, label %land.lhs.true, label %if.end45

land.lhs.true:                                    ; preds = %for.cond
  %6 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse3 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %6, i32 0, i32 8
  %7 = load i8*, i8** %parse3, align 8
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp4 = icmp eq i32 %conv, 40
  br i1 %cmp4, label %land.lhs.true6, label %if.end45

land.lhs.true6:                                   ; preds = %land.lhs.true
  %9 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse7 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %9, i32 0, i32 8
  %10 = load i8*, i8** %parse7, align 8
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 1
  %11 = load i8, i8* %arrayidx, align 1
  %conv8 = sext i8 %11 to i32
  %cmp9 = icmp eq i32 %conv8, 63
  br i1 %cmp9, label %land.lhs.true11, label %if.end45

land.lhs.true11:                                  ; preds = %land.lhs.true6
  %12 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse12 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %12, i32 0, i32 8
  %13 = load i8*, i8** %parse12, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %13, i64 2
  %14 = load i8, i8* %arrayidx13, align 1
  %conv14 = sext i8 %14 to i32
  %cmp15 = icmp eq i32 %conv14, 35
  br i1 %cmp15, label %if.then, label %if.end45

if.then:                                          ; preds = %land.lhs.true11
  br label %while.cond

while.cond:                                       ; preds = %if.end40, %if.then
  %15 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse17 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %15, i32 0, i32 8
  %16 = load i8*, i8** %parse17, align 8
  %17 = load i8, i8* %16, align 1
  %conv18 = sext i8 %17 to i32
  %cmp19 = icmp ne i32 %conv18, 41
  br i1 %cmp19, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse21 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %18, i32 0, i32 8
  %19 = load i8*, i8** %parse21, align 8
  %20 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end22 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %20, i32 0, i32 7
  %21 = load i8*, i8** %end22, align 8
  %cmp23 = icmp eq i8* %19, %21
  br i1 %cmp23, label %if.then25, label %if.end40

if.then25:                                        ; preds = %while.body
  br label %do.body

do.body:                                          ; preds = %if.then25
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses, align 8
  %22 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end26 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %22, i32 0, i32 7
  %23 = load i8*, i8** %end26, align 8
  %24 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %24, i32 0, i32 2
  %25 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast27 = ptrtoint i8* %23 to i64
  %sub.ptr.rhs.cast28 = ptrtoint i8* %25 to i64
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast27, %sub.ptr.rhs.cast28
  store i64 %sub.ptr.sub29, i64* %len, align 8
  %26 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %26, i32 0, i32 12
  %27 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %28 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %28, i32 0, i32 13
  %29 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp30 = icmp eq %struct.regnode* %27, %29
  br i1 %cmp30, label %if.end, label %if.then32

if.then32:                                        ; preds = %do.body
  %30 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %30, i32 0, i32 3
  %31 = load %struct.p5rx*, %struct.p5rx** %rx_sv, align 8
  %32 = bitcast %struct.p5rx* %31 to i8*
  %33 = bitcast i8* %32 to %struct.sv*
  %34 = bitcast %struct.sv* %33 to i8*
  call void @Perl_save_pushptr(i8* %34, i32 11)
  br label %if.end

if.end:                                           ; preds = %if.then32, %do.body
  %35 = load i64, i64* %len, align 8
  %cmp33 = icmp sgt i64 %35, 127
  br i1 %cmp33, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.end
  store i64 117, i64* %len, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses, align 8
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.end
  %36 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %36, i32 0, i32 25
  %37 = load i32, i32* %utf8, align 8
  %tobool = icmp ne i32 %37, 0
  %38 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  %tobool37 = icmp ne i32 %cond, 0
  %39 = zext i1 %tobool37 to i64
  %cond38 = select i1 %tobool37, i32 1, i32 0
  %40 = load i64, i64* %len, align 8
  %41 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp39 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %41, i32 0, i32 2
  %42 = load i8*, i8** %precomp39, align 8
  %43 = load i8*, i8** %ellipses, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.272, i64 0, i64 0), i32 %cond38, i64 %40, i8* %42, i8* %43)
  br label %do.end

do.end:                                           ; preds = %if.end36
  br label %if.end40

if.end40:                                         ; preds = %do.end, %while.body
  %44 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse41 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %44, i32 0, i32 8
  %45 = load i8*, i8** %parse41, align 8
  %incdec.ptr42 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %incdec.ptr42, i8** %parse41, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %46 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse43 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %46, i32 0, i32 8
  %47 = load i8*, i8** %parse43, align 8
  %incdec.ptr44 = getelementptr inbounds i8, i8* %47, i32 1
  store i8* %incdec.ptr44, i8** %parse43, align 8
  br label %for.cond

if.end45:                                         ; preds = %land.lhs.true11, %land.lhs.true6, %land.lhs.true, %for.cond
  %48 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %48, i32 0, i32 0
  %49 = load i32, i32* %flags, align 8
  %and = and i32 %49, 8
  %tobool46 = icmp ne i32 %and, 0
  br i1 %tobool46, label %if.then47, label %if.end55

if.then47:                                        ; preds = %if.end45
  %50 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %51 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse48 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %51, i32 0, i32 8
  %52 = load i8*, i8** %parse48, align 8
  %call = call i8* @S_regpatws(%struct.RExC_state_t* %50, i8* %52, i1 zeroext true)
  store i8* %call, i8** %p, align 8
  %53 = load i8*, i8** %p, align 8
  %54 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse49 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %54, i32 0, i32 8
  %55 = load i8*, i8** %parse49, align 8
  %cmp50 = icmp ne i8* %53, %55
  br i1 %cmp50, label %if.then52, label %if.end54

if.then52:                                        ; preds = %if.then47
  %56 = load i8*, i8** %p, align 8
  %57 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse53 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %57, i32 0, i32 8
  store i8* %56, i8** %parse53, align 8
  br label %for.cond

if.end54:                                         ; preds = %if.then47
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.end45
  %58 = load i8*, i8** %retval1, align 8
  ret i8* %58
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_reg_scan_name(%struct.RExC_state_t* %pRExC_state, i32 %flags) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %flags.addr = alloca i32, align 4
  %name_start = alloca i8*, align 8
  %offset = alloca i64, align 8
  %sv_name = alloca %struct.sv*, align 8
  %he_str = alloca %struct.he*, align 8
  %sv_dat = alloca %struct.sv*, align 8
  %offset216 = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 8
  %1 = load i8*, i8** %parse, align 8
  store i8* %1, i8** %name_start, align 8
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 8
  %3 = load i8*, i8** %parse1, align 8
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %4, i32 0, i32 7
  %5 = load i8*, i8** %end, align 8
  %cmp = icmp eq i8* %3, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end171

if.else:                                          ; preds = %entry
  %6 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %6, i32 0, i32 10
  %7 = load i32, i32* %cop_hints, align 8
  %add = add i32 %7, 0
  %and = and i32 %add, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %8 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %8, i32 0, i32 25
  %9 = load i32, i32* %utf8, align 8
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false
  br i1 true, label %cond.false7, label %cond.true3

cond.false:                                       ; preds = %lor.lhs.false
  br i1 false, label %cond.false7, label %cond.true3

cond.true3:                                       ; preds = %cond.false, %cond.true, %if.else
  %10 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse4 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %10, i32 0, i32 8
  %11 = load i8*, i8** %parse4, align 8
  %12 = load i8, i8* %11, align 1
  %idxprom = zext i8 %12 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %13 = load i32, i32* %arrayidx, align 4
  %and5 = and i32 %13, 81920
  %cmp6 = icmp eq i32 %and5, 81920
  br i1 %cmp6, label %if.then54, label %if.else129

cond.false7:                                      ; preds = %cond.false, %cond.true
  %14 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %14, i32 0, i32 8
  %15 = load i8*, i8** %parse8, align 8
  %16 = load i8, i8* %15, align 1
  %conv = zext i8 %16 to i64
  %cmp9 = icmp ult i64 %conv, 128
  br i1 %cmp9, label %cond.true11, label %cond.false19

cond.true11:                                      ; preds = %cond.false7
  %17 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse12 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %17, i32 0, i32 8
  %18 = load i8*, i8** %parse12, align 8
  %19 = load i8, i8* %18, align 1
  %idxprom13 = zext i8 %19 to i64
  %arrayidx14 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom13
  %20 = load i32, i32* %arrayidx14, align 4
  %and15 = and i32 %20, 65536
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %cond.true17, label %cond.false18

cond.true17:                                      ; preds = %cond.true11
  br i1 true, label %if.then54, label %if.else129

cond.false18:                                     ; preds = %cond.true11
  br i1 false, label %if.then54, label %if.else129

cond.false19:                                     ; preds = %cond.false7
  %21 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse20 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %21, i32 0, i32 8
  %22 = load i8*, i8** %parse20, align 8
  %23 = load i8, i8* %22, align 1
  %conv21 = zext i8 %23 to i32
  %and22 = and i32 %conv21, 254
  %cmp23 = icmp eq i32 %and22, 194
  br i1 %cmp23, label %cond.true25, label %cond.false51

cond.true25:                                      ; preds = %cond.false19
  %24 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse26 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %24, i32 0, i32 8
  %25 = load i8*, i8** %parse26, align 8
  %26 = load i8, i8* %25, align 1
  %conv27 = zext i8 %26 to i32
  %and28 = and i32 %conv27, 31
  %shl = shl i32 %and28, 6
  %27 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse29 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %27, i32 0, i32 8
  %28 = load i8*, i8** %parse29, align 8
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 1
  %29 = load i8, i8* %add.ptr, align 1
  %conv30 = zext i8 %29 to i32
  %and31 = and i32 %conv30, 63
  %or = or i32 %shl, %and31
  %conv32 = sext i32 %or to i64
  %and33 = and i64 %conv32, -256
  %tobool34 = icmp ne i64 %and33, 0
  br i1 %tobool34, label %cond.false50, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.true25
  %30 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse35 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %30, i32 0, i32 8
  %31 = load i8*, i8** %parse35, align 8
  %32 = load i8, i8* %31, align 1
  %conv36 = zext i8 %32 to i32
  %and37 = and i32 %conv36, 31
  %shl38 = shl i32 %and37, 6
  %33 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse39 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %33, i32 0, i32 8
  %34 = load i8*, i8** %parse39, align 8
  %add.ptr40 = getelementptr inbounds i8, i8* %34, i64 1
  %35 = load i8, i8* %add.ptr40, align 1
  %conv41 = zext i8 %35 to i32
  %and42 = and i32 %conv41, 63
  %or43 = or i32 %shl38, %and42
  %conv44 = trunc i32 %or43 to i8
  %idxprom45 = zext i8 %conv44 to i64
  %arrayidx46 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom45
  %36 = load i32, i32* %arrayidx46, align 4
  %and47 = and i32 %36, 65536
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %cond.true49, label %cond.false50

cond.true49:                                      ; preds = %land.lhs.true
  br i1 true, label %if.then54, label %if.else129

cond.false50:                                     ; preds = %land.lhs.true, %cond.true25
  br i1 false, label %if.then54, label %if.else129

cond.false51:                                     ; preds = %cond.false19
  %37 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse52 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %37, i32 0, i32 8
  %38 = load i8*, i8** %parse52, align 8
  %call = call zeroext i1 @Perl__is_utf8_perl_idstart(i8* %38)
  br i1 %call, label %if.then54, label %if.else129

if.then54:                                        ; preds = %cond.false51, %cond.false50, %cond.true49, %cond.false18, %cond.true17, %cond.true3
  %39 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf855 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %39, i32 0, i32 25
  %40 = load i32, i32* %utf855, align 8
  %tobool56 = icmp ne i32 %40, 0
  br i1 %tobool56, label %cond.true57, label %cond.false58

cond.true57:                                      ; preds = %if.then54
  br i1 true, label %if.then59, label %if.else118

cond.false58:                                     ; preds = %if.then54
  br i1 false, label %if.then59, label %if.else118

if.then59:                                        ; preds = %cond.false58, %cond.true57
  br label %do.body

do.body:                                          ; preds = %cond.end115, %if.then59
  %41 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse60 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %41, i32 0, i32 8
  %42 = load i8*, i8** %parse60, align 8
  %43 = load i8, i8* %42, align 1
  %idxprom61 = zext i8 %43 to i64
  %arrayidx62 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom61
  %44 = load i8, i8* %arrayidx62, align 1
  %conv63 = zext i8 %44 to i32
  %45 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse64 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %45, i32 0, i32 8
  %46 = load i8*, i8** %parse64, align 8
  %idx.ext = sext i32 %conv63 to i64
  %add.ptr65 = getelementptr inbounds i8, i8* %46, i64 %idx.ext
  store i8* %add.ptr65, i8** %parse64, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %47 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse66 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %47, i32 0, i32 8
  %48 = load i8*, i8** %parse66, align 8
  %49 = load i8, i8* %48, align 1
  %conv67 = zext i8 %49 to i64
  %cmp68 = icmp ult i64 %conv67, 128
  br i1 %cmp68, label %cond.true70, label %cond.false76

cond.true70:                                      ; preds = %do.cond
  %50 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse71 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %50, i32 0, i32 8
  %51 = load i8*, i8** %parse71, align 8
  %52 = load i8, i8* %51, align 1
  %idxprom72 = zext i8 %52 to i64
  %arrayidx73 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom72
  %53 = load i32, i32* %arrayidx73, align 4
  %and74 = and i32 %53, 1
  %tobool75 = icmp ne i32 %and74, 0
  %54 = zext i1 %tobool75 to i64
  %cond = select i1 %tobool75, i32 1, i32 0
  br label %cond.end115

cond.false76:                                     ; preds = %do.cond
  %55 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse77 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %55, i32 0, i32 8
  %56 = load i8*, i8** %parse77, align 8
  %57 = load i8, i8* %56, align 1
  %conv78 = zext i8 %57 to i32
  %and79 = and i32 %conv78, 254
  %cmp80 = icmp eq i32 %and79, 194
  br i1 %cmp80, label %cond.true82, label %cond.false110

cond.true82:                                      ; preds = %cond.false76
  %58 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse83 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %58, i32 0, i32 8
  %59 = load i8*, i8** %parse83, align 8
  %60 = load i8, i8* %59, align 1
  %conv84 = zext i8 %60 to i32
  %and85 = and i32 %conv84, 31
  %shl86 = shl i32 %and85, 6
  %61 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse87 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %61, i32 0, i32 8
  %62 = load i8*, i8** %parse87, align 8
  %add.ptr88 = getelementptr inbounds i8, i8* %62, i64 1
  %63 = load i8, i8* %add.ptr88, align 1
  %conv89 = zext i8 %63 to i32
  %and90 = and i32 %conv89, 63
  %or91 = or i32 %shl86, %and90
  %conv92 = sext i32 %or91 to i64
  %and93 = and i64 %conv92, -256
  %tobool94 = icmp ne i64 %and93, 0
  br i1 %tobool94, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %cond.true82
  %64 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse95 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %64, i32 0, i32 8
  %65 = load i8*, i8** %parse95, align 8
  %66 = load i8, i8* %65, align 1
  %conv96 = zext i8 %66 to i32
  %and97 = and i32 %conv96, 31
  %shl98 = shl i32 %and97, 6
  %67 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse99 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %67, i32 0, i32 8
  %68 = load i8*, i8** %parse99, align 8
  %add.ptr100 = getelementptr inbounds i8, i8* %68, i64 1
  %69 = load i8, i8* %add.ptr100, align 1
  %conv101 = zext i8 %69 to i32
  %and102 = and i32 %conv101, 63
  %or103 = or i32 %shl98, %and102
  %conv104 = trunc i32 %or103 to i8
  %idxprom105 = zext i8 %conv104 to i64
  %arrayidx106 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom105
  %70 = load i32, i32* %arrayidx106, align 4
  %and107 = and i32 %70, 1
  %tobool108 = icmp ne i32 %and107, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.true82
  %71 = phi i1 [ false, %cond.true82 ], [ %tobool108, %land.rhs ]
  %72 = zext i1 %71 to i64
  %cond109 = select i1 %71, i32 1, i32 0
  br label %cond.end

cond.false110:                                    ; preds = %cond.false76
  %73 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse111 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %73, i32 0, i32 8
  %74 = load i8*, i8** %parse111, align 8
  %call112 = call zeroext i1 @Perl__is_utf8_FOO(i8 zeroext 0, i8* %74)
  %conv113 = zext i1 %call112 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false110, %land.end
  %cond114 = phi i32 [ %cond109, %land.end ], [ %conv113, %cond.false110 ]
  br label %cond.end115

cond.end115:                                      ; preds = %cond.end, %cond.true70
  %cond116 = phi i32 [ %cond, %cond.true70 ], [ %cond114, %cond.end ]
  %tobool117 = icmp ne i32 %cond116, 0
  br i1 %tobool117, label %do.body, label %do.end

do.end:                                           ; preds = %cond.end115
  br label %if.end

if.else118:                                       ; preds = %cond.false58, %cond.true57
  br label %do.body119

do.body119:                                       ; preds = %do.cond121, %if.else118
  %75 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse120 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %75, i32 0, i32 8
  %76 = load i8*, i8** %parse120, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %76, i32 1
  store i8* %incdec.ptr, i8** %parse120, align 8
  br label %do.cond121

do.cond121:                                       ; preds = %do.body119
  %77 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse122 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %77, i32 0, i32 8
  %78 = load i8*, i8** %parse122, align 8
  %79 = load i8, i8* %78, align 1
  %idxprom123 = zext i8 %79 to i64
  %arrayidx124 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom123
  %80 = load i32, i32* %arrayidx124, align 4
  %and125 = and i32 %80, 16385
  %cmp126 = icmp eq i32 %and125, 16385
  br i1 %cmp126, label %do.body119, label %do.end128

do.end128:                                        ; preds = %do.cond121
  br label %if.end

if.end:                                           ; preds = %do.end128, %do.end
  br label %if.end170

if.else129:                                       ; preds = %cond.false51, %cond.false50, %cond.true49, %cond.false18, %cond.true17, %cond.true3
  %81 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse130 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %81, i32 0, i32 8
  %82 = load i8*, i8** %parse130, align 8
  %incdec.ptr131 = getelementptr inbounds i8, i8* %82, i32 1
  store i8* %incdec.ptr131, i8** %parse130, align 8
  br label %do.body132

do.body132:                                       ; preds = %if.else129
  %83 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %83, i32 0, i32 12
  %84 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %85 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %85, i32 0, i32 13
  %86 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp133 = icmp eq %struct.regnode* %84, %86
  br i1 %cmp133, label %if.end136, label %if.then135

if.then135:                                       ; preds = %do.body132
  %87 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %87, i32 0, i32 3
  %88 = load %struct.p5rx*, %struct.p5rx** %rx_sv, align 8
  %89 = bitcast %struct.p5rx* %88 to i8*
  %90 = bitcast i8* %89 to %struct.sv*
  %91 = bitcast %struct.sv* %90 to i8*
  call void @Perl_save_pushptr(i8* %91, i32 11)
  br label %if.end136

if.end136:                                        ; preds = %if.then135, %do.body132
  br label %do.body137

do.body137:                                       ; preds = %if.end136
  %92 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse138 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %92, i32 0, i32 8
  %93 = load i8*, i8** %parse138, align 8
  %94 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end139 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %94, i32 0, i32 7
  %95 = load i8*, i8** %end139, align 8
  %cmp140 = icmp ugt i8* %93, %95
  br i1 %cmp140, label %cond.true142, label %cond.false144

cond.true142:                                     ; preds = %do.body137
  %96 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end143 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %96, i32 0, i32 7
  %97 = load i8*, i8** %end143, align 8
  br label %cond.end146

cond.false144:                                    ; preds = %do.body137
  %98 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse145 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %98, i32 0, i32 8
  %99 = load i8*, i8** %parse145, align 8
  br label %cond.end146

cond.end146:                                      ; preds = %cond.false144, %cond.true142
  %cond147 = phi i8* [ %97, %cond.true142 ], [ %99, %cond.false144 ]
  %100 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %100, i32 0, i32 2
  %101 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %cond147 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %101 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %offset, align 8
  %102 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8148 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %102, i32 0, i32 25
  %103 = load i32, i32* %utf8148, align 8
  %tobool149 = icmp ne i32 %103, 0
  %104 = zext i1 %tobool149 to i64
  %cond150 = select i1 %tobool149, i32 1, i32 0
  %tobool151 = icmp ne i32 %cond150, 0
  %105 = zext i1 %tobool151 to i64
  %cond152 = select i1 %tobool151, i32 1, i32 0
  %106 = load i64, i64* %offset, align 8
  %107 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp153 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %107, i32 0, i32 2
  %108 = load i8*, i8** %precomp153, align 8
  %109 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8154 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %109, i32 0, i32 25
  %110 = load i32, i32* %utf8154, align 8
  %tobool155 = icmp ne i32 %110, 0
  %111 = zext i1 %tobool155 to i64
  %cond156 = select i1 %tobool155, i32 1, i32 0
  %tobool157 = icmp ne i32 %cond156, 0
  %112 = zext i1 %tobool157 to i64
  %cond158 = select i1 %tobool157, i32 1, i32 0
  %113 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end159 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %113, i32 0, i32 7
  %114 = load i8*, i8** %end159, align 8
  %115 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp160 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %115, i32 0, i32 2
  %116 = load i8*, i8** %precomp160, align 8
  %sub.ptr.lhs.cast161 = ptrtoint i8* %114 to i64
  %sub.ptr.rhs.cast162 = ptrtoint i8* %116 to i64
  %sub.ptr.sub163 = sub i64 %sub.ptr.lhs.cast161, %sub.ptr.rhs.cast162
  %117 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %sub.ptr.sub163, %117
  %118 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp164 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %118, i32 0, i32 2
  %119 = load i8*, i8** %precomp164, align 8
  %120 = load i64, i64* %offset, align 8
  %add.ptr165 = getelementptr inbounds i8, i8* %119, i64 %120
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.273, i64 0, i64 0), i32 %cond152, i64 %106, i8* %108, i32 %cond158, i64 %sub, i8* %add.ptr165)
  br label %do.end167

do.end167:                                        ; preds = %cond.end146
  br label %do.end169

do.end169:                                        ; preds = %do.end167
  br label %if.end170

if.end170:                                        ; preds = %do.end169, %if.end
  br label %if.end171

if.end171:                                        ; preds = %if.end170, %if.then
  %121 = load i32, i32* %flags.addr, align 4
  %tobool172 = icmp ne i32 %121, 0
  br i1 %tobool172, label %if.then173, label %if.end259

if.then173:                                       ; preds = %if.end171
  %122 = load i8*, i8** %name_start, align 8
  %123 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse174 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %123, i32 0, i32 8
  %124 = load i8*, i8** %parse174, align 8
  %125 = load i8*, i8** %name_start, align 8
  %sub.ptr.lhs.cast175 = ptrtoint i8* %124 to i64
  %sub.ptr.rhs.cast176 = ptrtoint i8* %125 to i64
  %sub.ptr.sub177 = sub i64 %sub.ptr.lhs.cast175, %sub.ptr.rhs.cast176
  %conv178 = trunc i64 %sub.ptr.sub177 to i32
  %conv179 = sext i32 %conv178 to i64
  %126 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8180 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %126, i32 0, i32 25
  %127 = load i32, i32* %utf8180, align 8
  %tobool181 = icmp ne i32 %127, 0
  %128 = zext i1 %tobool181 to i64
  %cond182 = select i1 %tobool181, i32 1, i32 0
  %tobool183 = icmp ne i32 %cond182, 0
  %129 = zext i1 %tobool183 to i64
  %cond184 = select i1 %tobool183, i32 536870912, i32 0
  %or185 = or i32 524288, %cond184
  %call186 = call %struct.sv* @Perl_newSVpvn_flags(i8* %122, i64 %conv179, i32 %or185)
  store %struct.sv* %call186, %struct.sv** %sv_name, align 8
  %130 = load i32, i32* %flags.addr, align 4
  %cmp187 = icmp eq i32 %130, 1
  br i1 %cmp187, label %if.then189, label %if.else190

if.then189:                                       ; preds = %if.then173
  %131 = load %struct.sv*, %struct.sv** %sv_name, align 8
  store %struct.sv* %131, %struct.sv** %retval, align 8
  br label %return

if.else190:                                       ; preds = %if.then173
  %132 = load i32, i32* %flags.addr, align 4
  %cmp191 = icmp eq i32 %132, 2
  br i1 %cmp191, label %if.then193, label %if.else255

if.then193:                                       ; preds = %if.else190
  store %struct.he* null, %struct.he** %he_str, align 8
  store %struct.sv* null, %struct.sv** %sv_dat, align 8
  %133 = load %struct.sv*, %struct.sv** %sv_name, align 8
  %tobool194 = icmp ne %struct.sv* %133, null
  br i1 %tobool194, label %if.end196, label %if.then195

if.then195:                                       ; preds = %if.then193
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.274, i64 0, i64 0))
  br label %if.end196

if.end196:                                        ; preds = %if.then195, %if.then193
  %134 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %paren_names = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %134, i32 0, i32 28
  %135 = load %struct.hv*, %struct.hv** %paren_names, align 8
  %tobool197 = icmp ne %struct.hv* %135, null
  br i1 %tobool197, label %if.then198, label %if.end201

if.then198:                                       ; preds = %if.end196
  %136 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %paren_names199 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %136, i32 0, i32 28
  %137 = load %struct.hv*, %struct.hv** %paren_names199, align 8
  %138 = load %struct.sv*, %struct.sv** %sv_name, align 8
  %call200 = call i8* @Perl_hv_common(%struct.hv* %137, %struct.sv* %138, i8* null, i64 0, i32 0, i32 0, %struct.sv* null, i32 0)
  %139 = bitcast i8* %call200 to %struct.he*
  store %struct.he* %139, %struct.he** %he_str, align 8
  br label %if.end201

if.end201:                                        ; preds = %if.then198, %if.end196
  %140 = load %struct.he*, %struct.he** %he_str, align 8
  %tobool202 = icmp ne %struct.he* %140, null
  br i1 %tobool202, label %if.then203, label %if.end204

if.then203:                                       ; preds = %if.end201
  %141 = load %struct.he*, %struct.he** %he_str, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %141, i32 0, i32 2
  %hent_val = bitcast %union.anon.0* %he_valu to %struct.sv**
  %142 = load %struct.sv*, %struct.sv** %hent_val, align 8
  store %struct.sv* %142, %struct.sv** %sv_dat, align 8
  br label %if.end204

if.end204:                                        ; preds = %if.then203, %if.end201
  %143 = load %struct.sv*, %struct.sv** %sv_dat, align 8
  %tobool205 = icmp ne %struct.sv* %143, null
  br i1 %tobool205, label %if.end254, label %if.then206

if.then206:                                       ; preds = %if.end204
  br label %do.body207

do.body207:                                       ; preds = %if.then206
  %144 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit208 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %144, i32 0, i32 12
  %145 = load %struct.regnode*, %struct.regnode** %emit208, align 8
  %146 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy209 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %146, i32 0, i32 13
  %147 = bitcast %struct.regnode_ssc* %emit_dummy209 to %struct.regnode*
  %cmp210 = icmp eq %struct.regnode* %145, %147
  br i1 %cmp210, label %if.end214, label %if.then212

if.then212:                                       ; preds = %do.body207
  %148 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv213 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %148, i32 0, i32 3
  %149 = load %struct.p5rx*, %struct.p5rx** %rx_sv213, align 8
  %150 = bitcast %struct.p5rx* %149 to i8*
  %151 = bitcast i8* %150 to %struct.sv*
  %152 = bitcast %struct.sv* %151 to i8*
  call void @Perl_save_pushptr(i8* %152, i32 11)
  br label %if.end214

if.end214:                                        ; preds = %if.then212, %do.body207
  br label %do.body215

do.body215:                                       ; preds = %if.end214
  %153 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse217 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %153, i32 0, i32 8
  %154 = load i8*, i8** %parse217, align 8
  %155 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end218 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %155, i32 0, i32 7
  %156 = load i8*, i8** %end218, align 8
  %cmp219 = icmp ugt i8* %154, %156
  br i1 %cmp219, label %cond.true221, label %cond.false223

cond.true221:                                     ; preds = %do.body215
  %157 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end222 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %157, i32 0, i32 7
  %158 = load i8*, i8** %end222, align 8
  br label %cond.end225

cond.false223:                                    ; preds = %do.body215
  %159 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse224 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %159, i32 0, i32 8
  %160 = load i8*, i8** %parse224, align 8
  br label %cond.end225

cond.end225:                                      ; preds = %cond.false223, %cond.true221
  %cond226 = phi i8* [ %158, %cond.true221 ], [ %160, %cond.false223 ]
  %161 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp227 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %161, i32 0, i32 2
  %162 = load i8*, i8** %precomp227, align 8
  %sub.ptr.lhs.cast228 = ptrtoint i8* %cond226 to i64
  %sub.ptr.rhs.cast229 = ptrtoint i8* %162 to i64
  %sub.ptr.sub230 = sub i64 %sub.ptr.lhs.cast228, %sub.ptr.rhs.cast229
  store i64 %sub.ptr.sub230, i64* %offset216, align 8
  %163 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8231 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %163, i32 0, i32 25
  %164 = load i32, i32* %utf8231, align 8
  %tobool232 = icmp ne i32 %164, 0
  %165 = zext i1 %tobool232 to i64
  %cond233 = select i1 %tobool232, i32 1, i32 0
  %tobool234 = icmp ne i32 %cond233, 0
  %166 = zext i1 %tobool234 to i64
  %cond235 = select i1 %tobool234, i32 1, i32 0
  %167 = load i64, i64* %offset216, align 8
  %168 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp236 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %168, i32 0, i32 2
  %169 = load i8*, i8** %precomp236, align 8
  %170 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8237 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %170, i32 0, i32 25
  %171 = load i32, i32* %utf8237, align 8
  %tobool238 = icmp ne i32 %171, 0
  %172 = zext i1 %tobool238 to i64
  %cond239 = select i1 %tobool238, i32 1, i32 0
  %tobool240 = icmp ne i32 %cond239, 0
  %173 = zext i1 %tobool240 to i64
  %cond241 = select i1 %tobool240, i32 1, i32 0
  %174 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end242 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %174, i32 0, i32 7
  %175 = load i8*, i8** %end242, align 8
  %176 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp243 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %176, i32 0, i32 2
  %177 = load i8*, i8** %precomp243, align 8
  %sub.ptr.lhs.cast244 = ptrtoint i8* %175 to i64
  %sub.ptr.rhs.cast245 = ptrtoint i8* %177 to i64
  %sub.ptr.sub246 = sub i64 %sub.ptr.lhs.cast244, %sub.ptr.rhs.cast245
  %178 = load i64, i64* %offset216, align 8
  %sub247 = sub nsw i64 %sub.ptr.sub246, %178
  %179 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp248 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %179, i32 0, i32 2
  %180 = load i8*, i8** %precomp248, align 8
  %181 = load i64, i64* %offset216, align 8
  %add.ptr249 = getelementptr inbounds i8, i8* %180, i64 %181
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.275, i64 0, i64 0), i32 %cond235, i64 %167, i8* %169, i32 %cond241, i64 %sub247, i8* %add.ptr249)
  br label %do.end251

do.end251:                                        ; preds = %cond.end225
  br label %do.end253

do.end253:                                        ; preds = %do.end251
  br label %if.end254

if.end254:                                        ; preds = %do.end253, %if.end204
  %182 = load %struct.sv*, %struct.sv** %sv_dat, align 8
  store %struct.sv* %182, %struct.sv** %retval, align 8
  br label %return

if.else255:                                       ; preds = %if.else190
  %183 = load i32, i32* %flags.addr, align 4
  %conv256 = zext i32 %183 to i64
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.276, i64 0, i64 0), i64 %conv256)
  br label %if.end257

if.end257:                                        ; preds = %if.else255
  br label %if.end258

if.end258:                                        ; preds = %if.end257
  br label %if.end259

if.end259:                                        ; preds = %if.end258, %if.end171
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end259, %if.end254, %if.then189
  %184 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %184
}

declare dso_local void @Perl_sv_upgrade(%struct.sv*, i32) #1

declare dso_local zeroext i1 @Perl_grok_atoUV(i8*, i64*, i8**) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.regnode* @S_reg2Lanode(%struct.RExC_state_t* %pRExC_state, i8 zeroext %op, i32 %arg1, i32 %arg2) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %op.addr = alloca i8, align 1
  %arg1.addr = alloca i32, align 4
  %arg2.addr = alloca i32, align 4
  %ret = alloca %struct.regnode*, align 8
  %ptr = alloca %struct.regnode*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i8 %op, i8* %op.addr, align 1
  store i32 %arg1, i32* %arg1.addr, align 4
  store i32 %arg2, i32* %arg2.addr, align 4
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1 = load i8, i8* %op.addr, align 1
  %2 = load i8, i8* %op.addr, align 1
  %idxprom = zext i8 %2 to i64
  %arrayidx = getelementptr inbounds [94 x i8], [94 x i8]* @regarglen, i64 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i64
  %call = call %struct.regnode* @S_regnode_guts(%struct.RExC_state_t* %0, i8 zeroext %1, i64 %conv, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.277, i64 0, i64 0))
  store %struct.regnode* %call, %struct.regnode** %ret, align 8
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %4, i32 0, i32 12
  %5 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %6 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %6, i32 0, i32 13
  %7 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp = icmp eq %struct.regnode* %5, %7
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %8 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %8, %struct.regnode** %ptr, align 8
  br label %do.body

do.body:                                          ; preds = %if.then
  %9 = load i32, i32* %arg1.addr, align 4
  %10 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %11 = bitcast %struct.regnode* %10 to %struct.regnode_1*
  %arg12 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %11, i32 0, i32 3
  store i32 %9, i32* %arg12, align 4
  %12 = load i32, i32* %arg2.addr, align 4
  %13 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %14 = bitcast %struct.regnode* %13 to %struct.regnode_2L*
  %arg23 = getelementptr inbounds %struct.regnode_2L, %struct.regnode_2L* %14, i32 0, i32 4
  store i32 %12, i32* %arg23, align 4
  br label %do.body4

do.body4:                                         ; preds = %do.body
  %15 = load i8, i8* %op.addr, align 1
  %16 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %16, i32 0, i32 1
  store i8 %15, i8* %type, align 1
  %17 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %17, i32 0, i32 2
  store i16 0, i16* %next_off, align 2
  %18 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %18, i32 1
  store %struct.regnode* %incdec.ptr, %struct.regnode** %ptr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body4
  %19 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %add.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %19, i64 2
  store %struct.regnode* %add.ptr, %struct.regnode** %ptr, align 8
  br label %do.end5

do.end5:                                          ; preds = %do.end
  %20 = load %struct.regnode*, %struct.regnode** %ptr, align 8
  %21 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit6 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %21, i32 0, i32 12
  store %struct.regnode* %20, %struct.regnode** %emit6, align 8
  br label %if.end

if.end:                                           ; preds = %do.end5, %entry
  %22 = load %struct.regnode*, %struct.regnode** %ret, align 8
  ret %struct.regnode* %22
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_regtail(%struct.RExC_state_t* %pRExC_state, %struct.regnode* %p, %struct.regnode* %val, i32 %depth) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %p.addr = alloca %struct.regnode*, align 8
  %val.addr = alloca %struct.regnode*, align 8
  %depth.addr = alloca i32, align 4
  %scan = alloca %struct.regnode*, align 8
  %temp = alloca %struct.regnode*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode* %p, %struct.regnode** %p.addr, align 8
  store %struct.regnode* %val, %struct.regnode** %val.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load i32, i32* %depth.addr, align 4
  %1 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1, i32 0, i32 12
  %2 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %3, i32 0, i32 13
  %4 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp = icmp eq %struct.regnode* %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end10

if.end:                                           ; preds = %entry
  %5 = load %struct.regnode*, %struct.regnode** %p.addr, align 8
  store %struct.regnode* %5, %struct.regnode** %scan, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end3, %if.end
  %6 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %call = call %struct.regnode* @Perl_regnext(%struct.regnode* %6)
  store %struct.regnode* %call, %struct.regnode** %temp, align 8
  %7 = load %struct.regnode*, %struct.regnode** %temp, align 8
  %cmp1 = icmp eq %struct.regnode* %7, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %for.cond
  br label %for.end

if.end3:                                          ; preds = %for.cond
  %8 = load %struct.regnode*, %struct.regnode** %temp, align 8
  store %struct.regnode* %8, %struct.regnode** %scan, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then2
  %9 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %9, i32 0, i32 1
  %10 = load i8, i8* %type, align 1
  %idxprom = zext i8 %10 to i64
  %arrayidx = getelementptr inbounds [94 x i8], [94 x i8]* bitcast (<{ [72 x i8], [22 x i8] }>* @reg_off_by_arg to [94 x i8]*), i64 0, i64 %idxprom
  %11 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %11, 0
  br i1 %tobool, label %if.then4, label %if.else

if.then4:                                         ; preds = %for.end
  %12 = load %struct.regnode*, %struct.regnode** %val.addr, align 8
  %13 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.regnode* %12 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.regnode* %13 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %conv = trunc i64 %sub.ptr.div to i32
  %14 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %15 = bitcast %struct.regnode* %14 to %struct.regnode_1*
  %arg1 = getelementptr inbounds %struct.regnode_1, %struct.regnode_1* %15, i32 0, i32 3
  store i32 %conv, i32* %arg1, align 4
  br label %if.end10

if.else:                                          ; preds = %for.end
  %16 = load %struct.regnode*, %struct.regnode** %val.addr, align 8
  %17 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %sub.ptr.lhs.cast5 = ptrtoint %struct.regnode* %16 to i64
  %sub.ptr.rhs.cast6 = ptrtoint %struct.regnode* %17 to i64
  %sub.ptr.sub7 = sub i64 %sub.ptr.lhs.cast5, %sub.ptr.rhs.cast6
  %sub.ptr.div8 = sdiv exact i64 %sub.ptr.sub7, 4
  %conv9 = trunc i64 %sub.ptr.div8 to i16
  %18 = load %struct.regnode*, %struct.regnode** %scan, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %18, i32 0, i32 2
  store i16 %conv9, i16* %next_off, align 2
  br label %if.end10

if.end10:                                         ; preds = %if.then, %if.else, %if.then4
  ret void
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.regnode* @S_regbranch(%struct.RExC_state_t* %pRExC_state, i32* %flagp, i32 %first, i32 %depth) #0 {
entry:
  %retval = alloca %struct.regnode*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %flagp.addr = alloca i32*, align 8
  %first.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %ret = alloca %struct.regnode*, align 8
  %chain = alloca %struct.regnode*, align 8
  %latest = alloca %struct.regnode*, align 8
  %flags = alloca i32, align 4
  %c = alloca i32, align 4
  %ellipses = alloca i8*, align 8
  %len = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i32* %flagp, i32** %flagp.addr, align 8
  store i32 %first, i32* %first.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store %struct.regnode* null, %struct.regnode** %chain, align 8
  store i32 0, i32* %flags, align 4
  store i32 0, i32* %c, align 4
  %0 = load i32, i32* %first.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store %struct.regnode* null, %struct.regnode** %ret, align 8
  br label %if.end5

if.else:                                          ; preds = %entry
  %1 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1, i32 0, i32 12
  %2 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %3, i32 0, i32 13
  %4 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp = icmp eq %struct.regnode* %2, %4
  br i1 %cmp, label %if.else3, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 20
  %6 = load i32, i32* %extralen, align 8
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %7, i8 zeroext 62, i32 0)
  store %struct.regnode* %call, %struct.regnode** %ret, align 8
  br label %if.end

if.else3:                                         ; preds = %land.lhs.true, %if.else
  %8 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call4 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %8, i8 zeroext 30)
  store %struct.regnode* %call4, %struct.regnode** %ret, align 8
  br label %if.end

if.end:                                           ; preds = %if.else3, %if.then2
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then
  %9 = load i32, i32* %first.addr, align 4
  %tobool6 = icmp ne i32 %9, 0
  br i1 %tobool6, label %if.end13, label %land.lhs.true7

land.lhs.true7:                                   ; preds = %if.end5
  %10 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %10, i32 0, i32 12
  %11 = load %struct.regnode*, %struct.regnode** %emit8, align 8
  %12 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy9 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %12, i32 0, i32 13
  %13 = bitcast %struct.regnode_ssc* %emit_dummy9 to %struct.regnode*
  %cmp10 = icmp eq %struct.regnode* %11, %13
  br i1 %cmp10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %land.lhs.true7
  %14 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen12 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %14, i32 0, i32 20
  %15 = load i32, i32* %extralen12, align 8
  %add = add nsw i32 %15, 1
  store i32 %add, i32* %extralen12, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %land.lhs.true7, %if.end5
  %16 = load i32*, i32** %flagp.addr, align 8
  store i32 0, i32* %16, align 4
  %17 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %17, i32 0, i32 8
  %18 = load i8*, i8** %parse, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 -1
  store i8* %incdec.ptr, i8** %parse, align 8
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call14 = call i8* @S_nextchar(%struct.RExC_state_t* %19)
  br label %while.cond

while.cond:                                       ; preds = %if.end74, %if.then32, %if.end13
  %20 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse15 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %20, i32 0, i32 8
  %21 = load i8*, i8** %parse15, align 8
  %22 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %22, i32 0, i32 7
  %23 = load i8*, i8** %end, align 8
  %cmp16 = icmp ult i8* %21, %23
  br i1 %cmp16, label %land.lhs.true17, label %land.end

land.lhs.true17:                                  ; preds = %while.cond
  %24 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse18 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %24, i32 0, i32 8
  %25 = load i8*, i8** %parse18, align 8
  %26 = load i8, i8* %25, align 1
  %conv = sext i8 %26 to i32
  %cmp19 = icmp ne i32 %conv, 124
  br i1 %cmp19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true17
  %27 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse21 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %27, i32 0, i32 8
  %28 = load i8*, i8** %parse21, align 8
  %29 = load i8, i8* %28, align 1
  %conv22 = sext i8 %29 to i32
  %cmp23 = icmp ne i32 %conv22, 41
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true17, %while.cond
  %30 = phi i1 [ false, %land.lhs.true17 ], [ false, %while.cond ], [ %cmp23, %land.rhs ]
  br i1 %30, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %31 = load i32, i32* %flags, align 4
  %and = and i32 %31, -17
  store i32 %and, i32* %flags, align 4
  %32 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %33 = load i32, i32* %depth.addr, align 4
  %add25 = add i32 %33, 1
  %call26 = call %struct.regnode* @S_regpiece(%struct.RExC_state_t* %32, i32* %flags, i32 %add25)
  store %struct.regnode* %call26, %struct.regnode** %latest, align 8
  %34 = load %struct.regnode*, %struct.regnode** %latest, align 8
  %cmp27 = icmp eq %struct.regnode* %34, null
  br i1 %cmp27, label %if.then29, label %if.else54

if.then29:                                        ; preds = %while.body
  %35 = load i32, i32* %flags, align 4
  %and30 = and i32 %35, 16
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %if.then29
  br label %while.cond

if.end33:                                         ; preds = %if.then29
  %36 = load i32, i32* %flags, align 4
  %and34 = and i32 %36, 32
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.then36, label %if.end37

if.then36:                                        ; preds = %if.end33
  %37 = load i32*, i32** %flagp.addr, align 8
  store i32 32, i32* %37, align 4
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end37:                                         ; preds = %if.end33
  br label %do.body

do.body:                                          ; preds = %if.end37
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses, align 8
  %38 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end38 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %38, i32 0, i32 7
  %39 = load i8*, i8** %end38, align 8
  %40 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %40, i32 0, i32 2
  %41 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %39 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %41 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %len, align 8
  %42 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit39 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %42, i32 0, i32 12
  %43 = load %struct.regnode*, %struct.regnode** %emit39, align 8
  %44 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy40 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %44, i32 0, i32 13
  %45 = bitcast %struct.regnode_ssc* %emit_dummy40 to %struct.regnode*
  %cmp41 = icmp eq %struct.regnode* %43, %45
  br i1 %cmp41, label %if.end44, label %if.then43

if.then43:                                        ; preds = %do.body
  %46 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %46, i32 0, i32 3
  %47 = load %struct.p5rx*, %struct.p5rx** %rx_sv, align 8
  %48 = bitcast %struct.p5rx* %47 to i8*
  %49 = bitcast i8* %48 to %struct.sv*
  %50 = bitcast %struct.sv* %49 to i8*
  call void @Perl_save_pushptr(i8* %50, i32 11)
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %do.body
  %51 = load i64, i64* %len, align 8
  %cmp45 = icmp sgt i64 %51, 127
  br i1 %cmp45, label %if.then47, label %if.end48

if.then47:                                        ; preds = %if.end44
  store i64 117, i64* %len, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses, align 8
  br label %if.end48

if.end48:                                         ; preds = %if.then47, %if.end44
  %52 = load i32, i32* %flags, align 4
  %conv49 = sext i32 %52 to i64
  %53 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %53, i32 0, i32 25
  %54 = load i32, i32* %utf8, align 8
  %tobool50 = icmp ne i32 %54, 0
  %55 = zext i1 %tobool50 to i64
  %cond = select i1 %tobool50, i32 1, i32 0
  %tobool51 = icmp ne i32 %cond, 0
  %56 = zext i1 %tobool51 to i64
  %cond52 = select i1 %tobool51, i32 1, i32 0
  %57 = load i64, i64* %len, align 8
  %58 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp53 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %58, i32 0, i32 2
  %59 = load i8*, i8** %precomp53, align 8
  %60 = load i8*, i8** %ellipses, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.278, i64 0, i64 0), i64 %conv49, i32 %cond52, i64 %57, i8* %59, i8* %60)
  br label %do.end

do.end:                                           ; preds = %if.end48
  br label %if.end59

if.else54:                                        ; preds = %while.body
  %61 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %cmp55 = icmp eq %struct.regnode* %61, null
  br i1 %cmp55, label %if.then57, label %if.end58

if.then57:                                        ; preds = %if.else54
  %62 = load %struct.regnode*, %struct.regnode** %latest, align 8
  store %struct.regnode* %62, %struct.regnode** %ret, align 8
  br label %if.end58

if.end58:                                         ; preds = %if.then57, %if.else54
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %do.end
  %63 = load i32, i32* %flags, align 4
  %and60 = and i32 %63, 9
  %64 = load i32*, i32** %flagp.addr, align 8
  %65 = load i32, i32* %64, align 4
  %or = or i32 %65, %and60
  store i32 %or, i32* %64, align 4
  %66 = load %struct.regnode*, %struct.regnode** %chain, align 8
  %cmp61 = icmp eq %struct.regnode* %66, null
  br i1 %cmp61, label %if.then63, label %if.else66

if.then63:                                        ; preds = %if.end59
  %67 = load i32, i32* %flags, align 4
  %and64 = and i32 %67, 4
  %68 = load i32*, i32** %flagp.addr, align 8
  %69 = load i32, i32* %68, align 4
  %or65 = or i32 %69, %and64
  store i32 %or65, i32* %68, align 4
  br label %if.end74

if.else66:                                        ; preds = %if.end59
  %70 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %70, i32 0, i32 14
  %71 = load i32, i32* %naughty, align 8
  %cmp67 = icmp slt i32 %71, 10
  br i1 %cmp67, label %if.then69, label %if.end72

if.then69:                                        ; preds = %if.else66
  %72 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty70 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %72, i32 0, i32 14
  %73 = load i32, i32* %naughty70, align 8
  %add71 = add nsw i32 %73, 1
  store i32 %add71, i32* %naughty70, align 8
  br label %if.end72

if.end72:                                         ; preds = %if.then69, %if.else66
  %74 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %75 = load %struct.regnode*, %struct.regnode** %chain, align 8
  %76 = load %struct.regnode*, %struct.regnode** %latest, align 8
  %77 = load i32, i32* %depth.addr, align 4
  %add73 = add i32 %77, 1
  call void @S_regtail(%struct.RExC_state_t* %74, %struct.regnode* %75, %struct.regnode* %76, i32 %add73)
  br label %if.end74

if.end74:                                         ; preds = %if.end72, %if.then63
  %78 = load %struct.regnode*, %struct.regnode** %latest, align 8
  store %struct.regnode* %78, %struct.regnode** %chain, align 8
  %79 = load i32, i32* %c, align 4
  %inc = add nsw i32 %79, 1
  store i32 %inc, i32* %c, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %80 = load %struct.regnode*, %struct.regnode** %chain, align 8
  %cmp75 = icmp eq %struct.regnode* %80, null
  br i1 %cmp75, label %if.then77, label %if.end83

if.then77:                                        ; preds = %while.end
  %81 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call78 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %81, i8 zeroext 40)
  store %struct.regnode* %call78, %struct.regnode** %chain, align 8
  %82 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %cmp79 = icmp eq %struct.regnode* %82, null
  br i1 %cmp79, label %if.then81, label %if.end82

if.then81:                                        ; preds = %if.then77
  %83 = load %struct.regnode*, %struct.regnode** %chain, align 8
  store %struct.regnode* %83, %struct.regnode** %ret, align 8
  br label %if.end82

if.end82:                                         ; preds = %if.then81, %if.then77
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %while.end
  %84 = load i32, i32* %c, align 4
  %cmp84 = icmp eq i32 %84, 1
  br i1 %cmp84, label %if.then86, label %if.end89

if.then86:                                        ; preds = %if.end83
  %85 = load i32, i32* %flags, align 4
  %and87 = and i32 %85, 2
  %86 = load i32*, i32** %flagp.addr, align 8
  %87 = load i32, i32* %86, align 4
  %or88 = or i32 %87, %and87
  store i32 %or88, i32* %86, align 4
  br label %if.end89

if.end89:                                         ; preds = %if.then86, %if.end83
  %88 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %88, %struct.regnode** %retval, align 8
  br label %return

return:                                           ; preds = %if.end89, %if.then36
  %89 = load %struct.regnode*, %struct.regnode** %retval, align 8
  ret %struct.regnode* %89
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.regnode* @S_handle_regex_sets(%struct.RExC_state_t* %pRExC_state, %struct.sv** %return_invlist, i32* %flagp, i32 %depth, i8* %oregcomp_parse) #0 {
entry:
  %retval = alloca %struct.regnode*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %return_invlist.addr = alloca %struct.sv**, align 8
  %flagp.addr = alloca i32*, align 8
  %depth.addr = alloca i32, align 4
  %oregcomp_parse.addr = alloca i8*, align 8
  %curchar = alloca i8, align 1
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %final = alloca %struct.sv*, align 8
  %result_string = alloca %struct.sv*, align 8
  %stack = alloca %struct.av*, align 8
  %fence_stack = alloca %struct.av*, align 8
  %fence = alloca i64, align 8
  %len = alloca i64, align 8
  %node = alloca %struct.regnode*, align 8
  %save_fold = alloca i8, align 1
  %save_end = alloca i8*, align 8
  %save_parse = alloca i8*, align 8
  %offset = alloca i64, align 8
  %depth33 = alloca i64, align 8
  %current = alloca %struct.sv*, align 8
  %is_posix_class = alloca i8, align 1
  %ellipses = alloca i8*, align 8
  %len73 = alloca i64, align 8
  %ellipses126 = alloca i8*, align 8
  %len127 = alloca i64, align 8
  %top_index = alloca i32, align 4
  %top_ptr = alloca %struct.sv**, align 8
  %current196 = alloca %struct.sv*, align 8
  %only_to_avoid_leaks = alloca %struct.sv*, align 8
  %stacked_ptr = alloca %struct.sv**, align 8
  %stacked_operator = alloca i8, align 1
  %lhs = alloca %struct.sv*, align 8
  %rhs = alloca %struct.sv*, align 8
  %fence_ptr = alloca %struct.sv*, align 8
  %save_flags = alloca i32, align 4
  %save_parse225 = alloca i8*, align 8
  %offset297 = alloca i64, align 8
  %offset399 = alloca i64, align 8
  %ellipses446 = alloca i8*, align 8
  %len447 = alloca i64, align 8
  %is_posix_class476 = alloca i8, align 1
  %ellipses490 = alloca i8*, align 8
  %len491 = alloca i64, align 8
  %offset543 = alloca i64, align 8
  %lhs635 = alloca %struct.sv*, align 8
  %offset665 = alloca i64, align 8
  %i = alloca %struct.sv*, align 8
  %u = alloca %struct.sv*, align 8
  %element = alloca %struct.sv*, align 8
  %offset793 = alloca i64, align 8
  %offset868 = alloca i64, align 8
  %offset937 = alloca i64, align 8
  %offset1006 = alloca i64, align 8
  %offset1073 = alloca i64, align 8
  %ellipses1146 = alloca i8*, align 8
  %len1147 = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.sv** %return_invlist, %struct.sv*** %return_invlist.addr, align 8
  store i32* %flagp, i32** %flagp.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  store i8* %oregcomp_parse, i8** %oregcomp_parse.addr, align 8
  store %struct.sv* null, %struct.sv** %final, align 8
  store %struct.av* null, %struct.av** %fence_stack, align 8
  store i64 0, i64* %fence, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 0
  %1 = load i32, i32* %flags, align 8
  %and = and i32 %1, 4
  %tobool = icmp ne i32 %and, 0
  %2 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  %tobool1 = icmp ne i32 %cond, 0
  %frombool = zext i1 %tobool1 to i8
  store i8 %frombool, i8* %save_fold, align 1
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %3, i32 0, i32 0
  %4 = load i32, i32* %flags2, align 8
  %call = call i32 @get_regex_charset(i32 %4)
  %cmp = icmp eq i32 %call, 1
  br i1 %cmp, label %if.then, label %if.end28

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 12
  %6 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %7 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %7, i32 0, i32 13
  %8 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp3 = icmp eq %struct.regnode* %6, %8
  br i1 %cmp3, label %if.end, label %if.then4

if.then4:                                         ; preds = %do.body
  %9 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %9, i32 0, i32 3
  %10 = load %struct.p5rx*, %struct.p5rx** %rx_sv, align 8
  %11 = bitcast %struct.p5rx* %10 to i8*
  %12 = bitcast i8* %11 to %struct.sv*
  %13 = bitcast %struct.sv* %12 to i8*
  call void @Perl_save_pushptr(i8* %13, i32 11)
  br label %if.end

if.end:                                           ; preds = %if.then4, %do.body
  br label %do.body5

do.body5:                                         ; preds = %if.end
  %14 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %14, i32 0, i32 8
  %15 = load i8*, i8** %parse, align 8
  %16 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end6 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %16, i32 0, i32 7
  %17 = load i8*, i8** %end6, align 8
  %cmp7 = icmp ugt i8* %15, %17
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body5
  %18 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %18, i32 0, i32 7
  %19 = load i8*, i8** %end8, align 8
  br label %cond.end

cond.false:                                       ; preds = %do.body5
  %20 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse9 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %20, i32 0, i32 8
  %21 = load i8*, i8** %parse9, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond10 = phi i8* [ %19, %cond.true ], [ %21, %cond.false ]
  %22 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %22, i32 0, i32 2
  %23 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %cond10 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %23 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %offset, align 8
  %24 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %24, i32 0, i32 25
  %25 = load i32, i32* %utf8, align 8
  %tobool11 = icmp ne i32 %25, 0
  %26 = zext i1 %tobool11 to i64
  %cond12 = select i1 %tobool11, i32 1, i32 0
  %tobool13 = icmp ne i32 %cond12, 0
  %27 = zext i1 %tobool13 to i64
  %cond14 = select i1 %tobool13, i32 1, i32 0
  %28 = load i64, i64* %offset, align 8
  %29 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp15 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %29, i32 0, i32 2
  %30 = load i8*, i8** %precomp15, align 8
  %31 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf816 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %31, i32 0, i32 25
  %32 = load i32, i32* %utf816, align 8
  %tobool17 = icmp ne i32 %32, 0
  %33 = zext i1 %tobool17 to i64
  %cond18 = select i1 %tobool17, i32 1, i32 0
  %tobool19 = icmp ne i32 %cond18, 0
  %34 = zext i1 %tobool19 to i64
  %cond20 = select i1 %tobool19, i32 1, i32 0
  %35 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end21 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %35, i32 0, i32 7
  %36 = load i8*, i8** %end21, align 8
  %37 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp22 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %37, i32 0, i32 2
  %38 = load i8*, i8** %precomp22, align 8
  %sub.ptr.lhs.cast23 = ptrtoint i8* %36 to i64
  %sub.ptr.rhs.cast24 = ptrtoint i8* %38 to i64
  %sub.ptr.sub25 = sub i64 %sub.ptr.lhs.cast23, %sub.ptr.rhs.cast24
  %39 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %sub.ptr.sub25, %39
  %40 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp26 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %40, i32 0, i32 2
  %41 = load i8*, i8** %precomp26, align 8
  %42 = load i64, i64* %offset, align 8
  %add.ptr = getelementptr inbounds i8, i8* %41, i64 %42
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.389, i64 0, i64 0), i32 %cond14, i64 %28, i8* %30, i32 %cond20, i64 %sub, i8* %add.ptr)
  br label %do.end

do.end:                                           ; preds = %cond.end
  br label %do.end27

do.end27:                                         ; preds = %do.end
  br label %if.end28

if.end28:                                         ; preds = %do.end27, %entry
  %43 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %uni_semantics = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %43, i32 0, i32 27
  store i32 1, i32* %uni_semantics, align 8
  %44 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit29 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %44, i32 0, i32 12
  %45 = load %struct.regnode*, %struct.regnode** %emit29, align 8
  %46 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy30 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %46, i32 0, i32 13
  %47 = bitcast %struct.regnode_ssc* %emit_dummy30 to %struct.regnode*
  %cmp31 = icmp eq %struct.regnode* %45, %47
  br i1 %cmp31, label %if.then32, label %if.end151

if.then32:                                        ; preds = %if.end28
  store i64 0, i64* %depth33, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.then32
  %48 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse34 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %48, i32 0, i32 8
  %49 = load i8*, i8** %parse34, align 8
  %50 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end35 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %50, i32 0, i32 7
  %51 = load i8*, i8** %end35, align 8
  %cmp36 = icmp ult i8* %49, %51
  br i1 %cmp36, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store %struct.sv* null, %struct.sv** %current, align 8
  %52 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %53 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse37 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %53, i32 0, i32 8
  %54 = load i8*, i8** %parse37, align 8
  %call38 = call i8* @S_regpatws(%struct.RExC_state_t* %52, i8* %54, i1 zeroext true)
  %55 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse39 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %55, i32 0, i32 8
  store i8* %call38, i8** %parse39, align 8
  %56 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse40 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %56, i32 0, i32 8
  %57 = load i8*, i8** %parse40, align 8
  %58 = load i8, i8* %57, align 1
  %conv = sext i8 %58 to i32
  switch i32 %conv, label %sw.default [
    i32 63, label %sw.bb
    i32 92, label %sw.bb48
    i32 91, label %sw.bb59
    i32 93, label %sw.bb104
  ]

sw.bb:                                            ; preds = %while.body
  %59 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse41 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %59, i32 0, i32 8
  %60 = load i8*, i8** %parse41, align 8
  %arrayidx = getelementptr inbounds i8, i8* %60, i64 1
  %61 = load i8, i8* %arrayidx, align 1
  %conv42 = sext i8 %61 to i32
  %cmp43 = icmp eq i32 %conv42, 91
  br i1 %cmp43, label %if.then45, label %if.end47

if.then45:                                        ; preds = %sw.bb
  %62 = load i64, i64* %depth33, align 8
  %inc = add i64 %62, 1
  store i64 %inc, i64* %depth33, align 8
  %63 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse46 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %63, i32 0, i32 8
  %64 = load i8*, i8** %parse46, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %64, i32 1
  store i8* %incdec.ptr, i8** %parse46, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %sw.bb
  br label %sw.default

sw.default:                                       ; preds = %while.body, %if.end47
  br label %sw.epilog

sw.bb48:                                          ; preds = %while.body
  %65 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse49 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %65, i32 0, i32 8
  %66 = load i8*, i8** %parse49, align 8
  %incdec.ptr50 = getelementptr inbounds i8, i8* %66, i32 1
  store i8* %incdec.ptr50, i8** %parse49, align 8
  %67 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse51 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %67, i32 0, i32 8
  %68 = load i8*, i8** %parse51, align 8
  %69 = load i8, i8* %68, align 1
  %conv52 = sext i8 %69 to i32
  %cmp53 = icmp eq i32 %conv52, 99
  br i1 %cmp53, label %if.then55, label %if.end58

if.then55:                                        ; preds = %sw.bb48
  %70 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse56 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %70, i32 0, i32 8
  %71 = load i8*, i8** %parse56, align 8
  %incdec.ptr57 = getelementptr inbounds i8, i8* %71, i32 1
  store i8* %incdec.ptr57, i8** %parse56, align 8
  br label %if.end58

if.end58:                                         ; preds = %if.then55, %sw.bb48
  br label %sw.epilog

sw.bb59:                                          ; preds = %while.body
  %72 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call60 = call zeroext i1 @S_could_it_be_a_POSIX_class(%struct.RExC_state_t* %72)
  %frombool61 = zext i1 %call60 to i8
  store i8 %frombool61, i8* %is_posix_class, align 1
  %73 = load i8, i8* %is_posix_class, align 1
  %tobool62 = trunc i8 %73 to i1
  br i1 %tobool62, label %if.end66, label %if.then63

if.then63:                                        ; preds = %sw.bb59
  %74 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse64 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %74, i32 0, i32 8
  %75 = load i8*, i8** %parse64, align 8
  %incdec.ptr65 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %incdec.ptr65, i8** %parse64, align 8
  br label %if.end66

if.end66:                                         ; preds = %if.then63, %sw.bb59
  %76 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %77 = load i32*, i32** %flagp.addr, align 8
  %78 = load i64, i64* %depth33, align 8
  %add = add i64 %78, 1
  %conv67 = trunc i64 %add to i32
  %79 = load i8, i8* %is_posix_class, align 1
  %tobool68 = trunc i8 %79 to i1
  %call69 = call %struct.regnode* @S_regclass(%struct.RExC_state_t* %76, i32* %77, i32 %conv67, i1 zeroext %tobool68, i1 zeroext false, i1 zeroext true, i1 zeroext true, %struct.sv** %current)
  %tobool70 = icmp ne %struct.regnode* %call69, null
  br i1 %tobool70, label %if.end98, label %if.then71

if.then71:                                        ; preds = %if.end66
  br label %do.body72

do.body72:                                        ; preds = %if.then71
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses, align 8
  %80 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end74 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %80, i32 0, i32 7
  %81 = load i8*, i8** %end74, align 8
  %82 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp75 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %82, i32 0, i32 2
  %83 = load i8*, i8** %precomp75, align 8
  %sub.ptr.lhs.cast76 = ptrtoint i8* %81 to i64
  %sub.ptr.rhs.cast77 = ptrtoint i8* %83 to i64
  %sub.ptr.sub78 = sub i64 %sub.ptr.lhs.cast76, %sub.ptr.rhs.cast77
  store i64 %sub.ptr.sub78, i64* %len73, align 8
  %84 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit79 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %84, i32 0, i32 12
  %85 = load %struct.regnode*, %struct.regnode** %emit79, align 8
  %86 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy80 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %86, i32 0, i32 13
  %87 = bitcast %struct.regnode_ssc* %emit_dummy80 to %struct.regnode*
  %cmp81 = icmp eq %struct.regnode* %85, %87
  br i1 %cmp81, label %if.end85, label %if.then83

if.then83:                                        ; preds = %do.body72
  %88 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv84 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %88, i32 0, i32 3
  %89 = load %struct.p5rx*, %struct.p5rx** %rx_sv84, align 8
  %90 = bitcast %struct.p5rx* %89 to i8*
  %91 = bitcast i8* %90 to %struct.sv*
  %92 = bitcast %struct.sv* %91 to i8*
  call void @Perl_save_pushptr(i8* %92, i32 11)
  br label %if.end85

if.end85:                                         ; preds = %if.then83, %do.body72
  %93 = load i64, i64* %len73, align 8
  %cmp86 = icmp sgt i64 %93, 127
  br i1 %cmp86, label %if.then88, label %if.end89

if.then88:                                        ; preds = %if.end85
  store i64 117, i64* %len73, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses, align 8
  br label %if.end89

if.end89:                                         ; preds = %if.then88, %if.end85
  %94 = load i32*, i32** %flagp.addr, align 8
  %95 = load i32, i32* %94, align 4
  %conv90 = sext i32 %95 to i64
  %96 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf891 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %96, i32 0, i32 25
  %97 = load i32, i32* %utf891, align 8
  %tobool92 = icmp ne i32 %97, 0
  %98 = zext i1 %tobool92 to i64
  %cond93 = select i1 %tobool92, i32 1, i32 0
  %tobool94 = icmp ne i32 %cond93, 0
  %99 = zext i1 %tobool94 to i64
  %cond95 = select i1 %tobool94, i32 1, i32 0
  %100 = load i64, i64* %len73, align 8
  %101 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp96 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %101, i32 0, i32 2
  %102 = load i8*, i8** %precomp96, align 8
  %103 = load i8*, i8** %ellipses, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.390, i64 0, i64 0), i64 %conv90, i32 %cond95, i64 %100, i8* %102, i8* %103)
  br label %do.end97

do.end97:                                         ; preds = %if.end89
  br label %if.end98

if.end98:                                         ; preds = %do.end97, %if.end66
  %104 = load i8, i8* %is_posix_class, align 1
  %tobool99 = trunc i8 %104 to i1
  br i1 %tobool99, label %if.then100, label %if.end103

if.then100:                                       ; preds = %if.end98
  %105 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse101 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %105, i32 0, i32 8
  %106 = load i8*, i8** %parse101, align 8
  %incdec.ptr102 = getelementptr inbounds i8, i8* %106, i32 -1
  store i8* %incdec.ptr102, i8** %parse101, align 8
  br label %if.end103

if.end103:                                        ; preds = %if.then100, %if.end98
  %107 = load %struct.sv*, %struct.sv** %current, align 8
  %108 = bitcast %struct.sv* %107 to i8*
  %109 = bitcast i8* %108 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %109)
  br label %sw.epilog

sw.bb104:                                         ; preds = %while.body
  %110 = load i64, i64* %depth33, align 8
  %dec = add i64 %110, -1
  store i64 %dec, i64* %depth33, align 8
  %tobool105 = icmp ne i64 %110, 0
  br i1 %tobool105, label %if.then106, label %if.end107

if.then106:                                       ; preds = %sw.bb104
  br label %sw.epilog

if.end107:                                        ; preds = %sw.bb104
  %111 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse108 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %111, i32 0, i32 8
  %112 = load i8*, i8** %parse108, align 8
  %incdec.ptr109 = getelementptr inbounds i8, i8* %112, i32 1
  store i8* %incdec.ptr109, i8** %parse108, align 8
  %113 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse110 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %113, i32 0, i32 8
  %114 = load i8*, i8** %parse110, align 8
  %115 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end111 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %115, i32 0, i32 7
  %116 = load i8*, i8** %end111, align 8
  %cmp112 = icmp ult i8* %114, %116
  br i1 %cmp112, label %land.lhs.true, label %if.end122

land.lhs.true:                                    ; preds = %if.end107
  %117 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse114 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %117, i32 0, i32 8
  %118 = load i8*, i8** %parse114, align 8
  %119 = load i8, i8* %118, align 1
  %conv115 = sext i8 %119 to i32
  %cmp116 = icmp eq i32 %conv115, 41
  br i1 %cmp116, label %if.then118, label %if.end122

if.then118:                                       ; preds = %land.lhs.true
  %120 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call119 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %120, i8 zeroext 19, i32 0)
  store %struct.regnode* %call119, %struct.regnode** %node, align 8
  %121 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %121, i32 0, i32 17
  %122 = load i64, i64* %size, align 8
  %add120 = add i64 %122, 9
  store i64 %add120, i64* %size, align 8
  %123 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call121 = call i8* @S_nextchar(%struct.RExC_state_t* %123)
  %124 = load %struct.regnode*, %struct.regnode** %node, align 8
  store %struct.regnode* %124, %struct.regnode** %retval, align 8
  br label %return

if.end122:                                        ; preds = %land.lhs.true, %if.end107
  br label %no_close

sw.epilog:                                        ; preds = %if.then106, %if.end103, %if.end58, %sw.default
  %125 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse123 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %125, i32 0, i32 8
  %126 = load i8*, i8** %parse123, align 8
  %incdec.ptr124 = getelementptr inbounds i8, i8* %126, i32 1
  store i8* %incdec.ptr124, i8** %parse123, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %no_close

no_close:                                         ; preds = %while.end, %if.end122
  br label %do.body125

do.body125:                                       ; preds = %no_close
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses126, align 8
  %127 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end128 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %127, i32 0, i32 7
  %128 = load i8*, i8** %end128, align 8
  %129 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp129 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %129, i32 0, i32 2
  %130 = load i8*, i8** %precomp129, align 8
  %sub.ptr.lhs.cast130 = ptrtoint i8* %128 to i64
  %sub.ptr.rhs.cast131 = ptrtoint i8* %130 to i64
  %sub.ptr.sub132 = sub i64 %sub.ptr.lhs.cast130, %sub.ptr.rhs.cast131
  store i64 %sub.ptr.sub132, i64* %len127, align 8
  %131 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit133 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %131, i32 0, i32 12
  %132 = load %struct.regnode*, %struct.regnode** %emit133, align 8
  %133 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy134 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %133, i32 0, i32 13
  %134 = bitcast %struct.regnode_ssc* %emit_dummy134 to %struct.regnode*
  %cmp135 = icmp eq %struct.regnode* %132, %134
  br i1 %cmp135, label %if.end139, label %if.then137

if.then137:                                       ; preds = %do.body125
  %135 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv138 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %135, i32 0, i32 3
  %136 = load %struct.p5rx*, %struct.p5rx** %rx_sv138, align 8
  %137 = bitcast %struct.p5rx* %136 to i8*
  %138 = bitcast i8* %137 to %struct.sv*
  %139 = bitcast %struct.sv* %138 to i8*
  call void @Perl_save_pushptr(i8* %139, i32 11)
  br label %if.end139

if.end139:                                        ; preds = %if.then137, %do.body125
  %140 = load i64, i64* %len127, align 8
  %cmp140 = icmp sgt i64 %140, 127
  br i1 %cmp140, label %if.then142, label %if.end143

if.then142:                                       ; preds = %if.end139
  store i64 117, i64* %len127, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses126, align 8
  br label %if.end143

if.end143:                                        ; preds = %if.then142, %if.end139
  %141 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8144 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %141, i32 0, i32 25
  %142 = load i32, i32* %utf8144, align 8
  %tobool145 = icmp ne i32 %142, 0
  %143 = zext i1 %tobool145 to i64
  %cond146 = select i1 %tobool145, i32 1, i32 0
  %tobool147 = icmp ne i32 %cond146, 0
  %144 = zext i1 %tobool147 to i64
  %cond148 = select i1 %tobool147, i32 1, i32 0
  %145 = load i64, i64* %len127, align 8
  %146 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp149 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %146, i32 0, i32 2
  %147 = load i8*, i8** %precomp149, align 8
  %148 = load i8*, i8** %ellipses126, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.391, i64 0, i64 0), i32 %cond148, i64 %145, i8* %147, i8* %148)
  br label %do.end150

do.end150:                                        ; preds = %if.end143
  br label %if.end151

if.end151:                                        ; preds = %do.end150, %if.end28
  %149 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8152 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %149, i32 0, i32 25
  %150 = load i32, i32* %utf8152, align 8
  %tobool153 = icmp ne i32 %150, 0
  %151 = zext i1 %tobool153 to i64
  %cond154 = select i1 %tobool153, i32 1, i32 0
  %tobool155 = icmp ne i32 %cond154, 0
  %152 = zext i1 %tobool155 to i64
  %cond156 = select i1 %tobool155, i32 1, i32 0
  %153 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse157 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %153, i32 0, i32 8
  %154 = load i8*, i8** %parse157, align 8
  %155 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp158 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %155, i32 0, i32 2
  %156 = load i8*, i8** %precomp158, align 8
  %sub.ptr.lhs.cast159 = ptrtoint i8* %154 to i64
  %sub.ptr.rhs.cast160 = ptrtoint i8* %156 to i64
  %sub.ptr.sub161 = sub i64 %sub.ptr.lhs.cast159, %sub.ptr.rhs.cast160
  %157 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp162 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %157, i32 0, i32 2
  %158 = load i8*, i8** %precomp162, align 8
  %159 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8163 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %159, i32 0, i32 25
  %160 = load i32, i32* %utf8163, align 8
  %tobool164 = icmp ne i32 %160, 0
  %161 = zext i1 %tobool164 to i64
  %cond165 = select i1 %tobool164, i32 1, i32 0
  %tobool166 = icmp ne i32 %cond165, 0
  %162 = zext i1 %tobool166 to i64
  %cond167 = select i1 %tobool166, i32 1, i32 0
  %163 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end168 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %163, i32 0, i32 7
  %164 = load i8*, i8** %end168, align 8
  %165 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start169 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %165, i32 0, i32 6
  %166 = load i8*, i8** %start169, align 8
  %sub.ptr.lhs.cast170 = ptrtoint i8* %164 to i64
  %sub.ptr.rhs.cast171 = ptrtoint i8* %166 to i64
  %sub.ptr.sub172 = sub i64 %sub.ptr.lhs.cast170, %sub.ptr.rhs.cast171
  %167 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse173 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %167, i32 0, i32 8
  %168 = load i8*, i8** %parse173, align 8
  %169 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp174 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %169, i32 0, i32 2
  %170 = load i8*, i8** %precomp174, align 8
  %sub.ptr.lhs.cast175 = ptrtoint i8* %168 to i64
  %sub.ptr.rhs.cast176 = ptrtoint i8* %170 to i64
  %sub.ptr.sub177 = sub i64 %sub.ptr.lhs.cast175, %sub.ptr.rhs.cast176
  %sub178 = sub nsw i64 %sub.ptr.sub172, %sub.ptr.sub177
  %171 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp179 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %171, i32 0, i32 2
  %172 = load i8*, i8** %precomp179, align 8
  %173 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse180 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %173, i32 0, i32 8
  %174 = load i8*, i8** %parse180, align 8
  %175 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp181 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %175, i32 0, i32 2
  %176 = load i8*, i8** %precomp181, align 8
  %sub.ptr.lhs.cast182 = ptrtoint i8* %174 to i64
  %sub.ptr.rhs.cast183 = ptrtoint i8* %176 to i64
  %sub.ptr.sub184 = sub i64 %sub.ptr.lhs.cast182, %sub.ptr.rhs.cast183
  %add.ptr185 = getelementptr inbounds i8, i8* %172, i64 %sub.ptr.sub184
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 54, i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.392, i64 0, i64 0), i32 %cond156, i64 %sub.ptr.sub161, i8* %158, i32 %cond167, i64 %sub178, i8* %add.ptr185)
  %call186 = call %struct.sv* @Perl_newSV_type(i32 11)
  %177 = bitcast %struct.sv* %call186 to i8*
  %178 = bitcast i8* %177 to %struct.av*
  store %struct.av* %178, %struct.av** %stack, align 8
  %179 = bitcast %struct.av* %178 to %struct.sv*
  %call187 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %179)
  %call188 = call %struct.sv* @Perl_newSV_type(i32 11)
  %180 = bitcast %struct.sv* %call188 to i8*
  %181 = bitcast i8* %180 to %struct.av*
  store %struct.av* %181, %struct.av** %fence_stack, align 8
  %182 = bitcast %struct.av* %181 to %struct.sv*
  %call189 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %182)
  br label %while.cond190

while.cond190:                                    ; preds = %cond.end987, %if.end151
  %183 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse191 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %183, i32 0, i32 8
  %184 = load i8*, i8** %parse191, align 8
  %185 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end192 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %185, i32 0, i32 7
  %186 = load i8*, i8** %end192, align 8
  %cmp193 = icmp ult i8* %184, %186
  br i1 %cmp193, label %while.body195, label %while.end992

while.body195:                                    ; preds = %while.cond190
  store %struct.sv* null, %struct.sv** %current196, align 8
  %187 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %188 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse197 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %188, i32 0, i32 8
  %189 = load i8*, i8** %parse197, align 8
  %call198 = call i8* @S_regpatws(%struct.RExC_state_t* %187, i8* %189, i1 zeroext true)
  %190 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse199 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %190, i32 0, i32 8
  store i8* %call198, i8** %parse199, align 8
  %191 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse200 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %191, i32 0, i32 8
  %192 = load i8*, i8** %parse200, align 8
  %193 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end201 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %193, i32 0, i32 7
  %194 = load i8*, i8** %end201, align 8
  %cmp202 = icmp uge i8* %192, %194
  br i1 %cmp202, label %if.then204, label %if.end205

if.then204:                                       ; preds = %while.body195
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.393, i64 0, i64 0))
  br label %if.end205

if.end205:                                        ; preds = %if.then204, %while.body195
  %195 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse206 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %195, i32 0, i32 8
  %196 = load i8*, i8** %parse206, align 8
  %197 = load i8, i8* %196, align 1
  %conv207 = zext i8 %197 to i32
  %conv208 = trunc i32 %conv207 to i8
  store i8 %conv208, i8* %curchar, align 1
  br label %redo_curchar

redo_curchar:                                     ; preds = %sw.epilog737, %if.end205
  %198 = load %struct.av*, %struct.av** %stack, align 8
  %call209 = call i64 @S_av_top_index(%struct.av* %198)
  %conv210 = trunc i64 %call209 to i32
  store i32 %conv210, i32* %top_index, align 4
  %199 = load i8, i8* %curchar, align 1
  %conv211 = zext i8 %199 to i32
  switch i32 %conv211, label %sw.default768 [
    i32 40, label %sw.bb212
    i32 92, label %sw.bb440
    i32 91, label %sw.bb475
    i32 93, label %sw.bb522
    i32 41, label %sw.bb527
    i32 38, label %sw.bb610
    i32 124, label %sw.bb610
    i32 43, label %sw.bb610
    i32 45, label %sw.bb610
    i32 94, label %sw.bb610
    i32 33, label %sw.bb739
  ]

sw.bb212:                                         ; preds = %redo_curchar
  %200 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse213 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %200, i32 0, i32 8
  %201 = load i8*, i8** %parse213, align 8
  %202 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end214 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %202, i32 0, i32 7
  %203 = load i8*, i8** %end214, align 8
  %cmp215 = icmp ult i8* %201, %203
  br i1 %cmp215, label %land.lhs.true217, label %if.end345

land.lhs.true217:                                 ; preds = %sw.bb212
  %204 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse218 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %204, i32 0, i32 8
  %205 = load i8*, i8** %parse218, align 8
  %add.ptr219 = getelementptr inbounds i8, i8* %205, i64 1
  %206 = load i8, i8* %add.ptr219, align 1
  %conv220 = zext i8 %206 to i32
  %cmp221 = icmp eq i32 %conv220, 63
  br i1 %cmp221, label %if.then223, label %if.end345

if.then223:                                       ; preds = %land.lhs.true217
  %207 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags224 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %207, i32 0, i32 0
  %208 = load i32, i32* %flags224, align 8
  store i32 %208, i32* %save_flags, align 4
  %209 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse226 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %209, i32 0, i32 8
  %210 = load i8*, i8** %parse226, align 8
  %add.ptr227 = getelementptr inbounds i8, i8* %210, i64 2
  store i8* %add.ptr227, i8** %parse226, align 8
  %211 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse228 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %211, i32 0, i32 8
  %212 = load i8*, i8** %parse228, align 8
  store i8* %212, i8** %save_parse225, align 8
  %213 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  call void @S_parse_lparen_question_flags(%struct.RExC_state_t* %213)
  %214 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse229 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %214, i32 0, i32 8
  %215 = load i8*, i8** %parse229, align 8
  %216 = load i8*, i8** %save_parse225, align 8
  %cmp230 = icmp eq i8* %215, %216
  br i1 %cmp230, label %if.then260, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then223
  %217 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse232 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %217, i32 0, i32 8
  %218 = load i8*, i8** %parse232, align 8
  %219 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end233 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %219, i32 0, i32 7
  %220 = load i8*, i8** %end233, align 8
  %add.ptr234 = getelementptr inbounds i8, i8* %220, i64 -4
  %cmp235 = icmp uge i8* %218, %add.ptr234
  br i1 %cmp235, label %if.then260, label %lor.lhs.false237

lor.lhs.false237:                                 ; preds = %lor.lhs.false
  %221 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse238 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %221, i32 0, i32 8
  %222 = load i8*, i8** %parse238, align 8
  %223 = load i8, i8* %222, align 1
  %conv239 = zext i8 %223 to i32
  %cmp240 = icmp ne i32 %conv239, 58
  br i1 %cmp240, label %if.then260, label %lor.lhs.false242

lor.lhs.false242:                                 ; preds = %lor.lhs.false237
  %224 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse243 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %224, i32 0, i32 8
  %225 = load i8*, i8** %parse243, align 8
  %incdec.ptr244 = getelementptr inbounds i8, i8* %225, i32 1
  store i8* %incdec.ptr244, i8** %parse243, align 8
  %226 = load i8, i8* %incdec.ptr244, align 1
  %conv245 = zext i8 %226 to i32
  %cmp246 = icmp ne i32 %conv245, 40
  br i1 %cmp246, label %if.then260, label %lor.lhs.false248

lor.lhs.false248:                                 ; preds = %lor.lhs.false242
  %227 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse249 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %227, i32 0, i32 8
  %228 = load i8*, i8** %parse249, align 8
  %incdec.ptr250 = getelementptr inbounds i8, i8* %228, i32 1
  store i8* %incdec.ptr250, i8** %parse249, align 8
  %229 = load i8, i8* %incdec.ptr250, align 1
  %conv251 = zext i8 %229 to i32
  %cmp252 = icmp ne i32 %conv251, 63
  br i1 %cmp252, label %if.then260, label %lor.lhs.false254

lor.lhs.false254:                                 ; preds = %lor.lhs.false248
  %230 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse255 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %230, i32 0, i32 8
  %231 = load i8*, i8** %parse255, align 8
  %incdec.ptr256 = getelementptr inbounds i8, i8* %231, i32 1
  store i8* %incdec.ptr256, i8** %parse255, align 8
  %232 = load i8, i8* %incdec.ptr256, align 1
  %conv257 = zext i8 %232 to i32
  %cmp258 = icmp ne i32 %conv257, 91
  br i1 %cmp258, label %if.then260, label %if.end333

if.then260:                                       ; preds = %lor.lhs.false254, %lor.lhs.false248, %lor.lhs.false242, %lor.lhs.false237, %lor.lhs.false, %if.then223
  %233 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse261 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %233, i32 0, i32 8
  %234 = load i8*, i8** %parse261, align 8
  %235 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end262 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %235, i32 0, i32 7
  %236 = load i8*, i8** %end262, align 8
  %add.ptr263 = getelementptr inbounds i8, i8* %236, i64 -4
  %cmp264 = icmp uge i8* %234, %add.ptr263
  br i1 %cmp264, label %if.then266, label %if.else

if.then266:                                       ; preds = %if.then260
  %237 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end267 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %237, i32 0, i32 7
  %238 = load i8*, i8** %end267, align 8
  %239 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse268 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %239, i32 0, i32 8
  store i8* %238, i8** %parse268, align 8
  br label %if.end287

if.else:                                          ; preds = %if.then260
  %240 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse269 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %240, i32 0, i32 8
  %241 = load i8*, i8** %parse269, align 8
  %242 = load i8*, i8** %save_parse225, align 8
  %cmp270 = icmp ne i8* %241, %242
  br i1 %cmp270, label %if.then272, label %if.end286

if.then272:                                       ; preds = %if.else
  %243 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8273 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %243, i32 0, i32 25
  %244 = load i32, i32* %utf8273, align 8
  %tobool274 = icmp ne i32 %244, 0
  br i1 %tobool274, label %cond.true275, label %cond.false276

cond.true275:                                     ; preds = %if.then272
  br i1 true, label %cond.true277, label %cond.false281

cond.false276:                                    ; preds = %if.then272
  br i1 false, label %cond.true277, label %cond.false281

cond.true277:                                     ; preds = %cond.false276, %cond.true275
  %245 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse278 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %245, i32 0, i32 8
  %246 = load i8*, i8** %parse278, align 8
  %247 = load i8, i8* %246, align 1
  %idxprom = zext i8 %247 to i64
  %arrayidx279 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %248 = load i8, i8* %arrayidx279, align 1
  %conv280 = zext i8 %248 to i32
  br label %cond.end282

cond.false281:                                    ; preds = %cond.false276, %cond.true275
  br label %cond.end282

cond.end282:                                      ; preds = %cond.false281, %cond.true277
  %cond283 = phi i32 [ %conv280, %cond.true277 ], [ 1, %cond.false281 ]
  %249 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse284 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %249, i32 0, i32 8
  %250 = load i8*, i8** %parse284, align 8
  %idx.ext = sext i32 %cond283 to i64
  %add.ptr285 = getelementptr inbounds i8, i8* %250, i64 %idx.ext
  store i8* %add.ptr285, i8** %parse284, align 8
  br label %if.end286

if.end286:                                        ; preds = %cond.end282, %if.else
  br label %if.end287

if.end287:                                        ; preds = %if.end286, %if.then266
  br label %do.body288

do.body288:                                       ; preds = %if.end287
  %251 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit289 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %251, i32 0, i32 12
  %252 = load %struct.regnode*, %struct.regnode** %emit289, align 8
  %253 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy290 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %253, i32 0, i32 13
  %254 = bitcast %struct.regnode_ssc* %emit_dummy290 to %struct.regnode*
  %cmp291 = icmp eq %struct.regnode* %252, %254
  br i1 %cmp291, label %if.end295, label %if.then293

if.then293:                                       ; preds = %do.body288
  %255 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv294 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %255, i32 0, i32 3
  %256 = load %struct.p5rx*, %struct.p5rx** %rx_sv294, align 8
  %257 = bitcast %struct.p5rx* %256 to i8*
  %258 = bitcast i8* %257 to %struct.sv*
  %259 = bitcast %struct.sv* %258 to i8*
  call void @Perl_save_pushptr(i8* %259, i32 11)
  br label %if.end295

if.end295:                                        ; preds = %if.then293, %do.body288
  br label %do.body296

do.body296:                                       ; preds = %if.end295
  %260 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse298 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %260, i32 0, i32 8
  %261 = load i8*, i8** %parse298, align 8
  %262 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end299 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %262, i32 0, i32 7
  %263 = load i8*, i8** %end299, align 8
  %cmp300 = icmp ugt i8* %261, %263
  br i1 %cmp300, label %cond.true302, label %cond.false304

cond.true302:                                     ; preds = %do.body296
  %264 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end303 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %264, i32 0, i32 7
  %265 = load i8*, i8** %end303, align 8
  br label %cond.end306

cond.false304:                                    ; preds = %do.body296
  %266 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse305 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %266, i32 0, i32 8
  %267 = load i8*, i8** %parse305, align 8
  br label %cond.end306

cond.end306:                                      ; preds = %cond.false304, %cond.true302
  %cond307 = phi i8* [ %265, %cond.true302 ], [ %267, %cond.false304 ]
  %268 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp308 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %268, i32 0, i32 2
  %269 = load i8*, i8** %precomp308, align 8
  %sub.ptr.lhs.cast309 = ptrtoint i8* %cond307 to i64
  %sub.ptr.rhs.cast310 = ptrtoint i8* %269 to i64
  %sub.ptr.sub311 = sub i64 %sub.ptr.lhs.cast309, %sub.ptr.rhs.cast310
  store i64 %sub.ptr.sub311, i64* %offset297, align 8
  %270 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8312 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %270, i32 0, i32 25
  %271 = load i32, i32* %utf8312, align 8
  %tobool313 = icmp ne i32 %271, 0
  %272 = zext i1 %tobool313 to i64
  %cond314 = select i1 %tobool313, i32 1, i32 0
  %tobool315 = icmp ne i32 %cond314, 0
  %273 = zext i1 %tobool315 to i64
  %cond316 = select i1 %tobool315, i32 1, i32 0
  %274 = load i64, i64* %offset297, align 8
  %275 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp317 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %275, i32 0, i32 2
  %276 = load i8*, i8** %precomp317, align 8
  %277 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8318 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %277, i32 0, i32 25
  %278 = load i32, i32* %utf8318, align 8
  %tobool319 = icmp ne i32 %278, 0
  %279 = zext i1 %tobool319 to i64
  %cond320 = select i1 %tobool319, i32 1, i32 0
  %tobool321 = icmp ne i32 %cond320, 0
  %280 = zext i1 %tobool321 to i64
  %cond322 = select i1 %tobool321, i32 1, i32 0
  %281 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end323 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %281, i32 0, i32 7
  %282 = load i8*, i8** %end323, align 8
  %283 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp324 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %283, i32 0, i32 2
  %284 = load i8*, i8** %precomp324, align 8
  %sub.ptr.lhs.cast325 = ptrtoint i8* %282 to i64
  %sub.ptr.rhs.cast326 = ptrtoint i8* %284 to i64
  %sub.ptr.sub327 = sub i64 %sub.ptr.lhs.cast325, %sub.ptr.rhs.cast326
  %285 = load i64, i64* %offset297, align 8
  %sub328 = sub nsw i64 %sub.ptr.sub327, %285
  %286 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp329 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %286, i32 0, i32 2
  %287 = load i8*, i8** %precomp329, align 8
  %288 = load i64, i64* %offset297, align 8
  %add.ptr330 = getelementptr inbounds i8, i8* %287, i64 %288
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.394, i64 0, i64 0), i32 %cond316, i64 %274, i8* %276, i32 %cond322, i64 %sub328, i8* %add.ptr330)
  br label %do.end331

do.end331:                                        ; preds = %cond.end306
  br label %do.end332

do.end332:                                        ; preds = %do.end331
  br label %if.end333

if.end333:                                        ; preds = %do.end332, %lor.lhs.false254
  %289 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse334 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %289, i32 0, i32 8
  %290 = load i8*, i8** %parse334, align 8
  %incdec.ptr335 = getelementptr inbounds i8, i8* %290, i32 1
  store i8* %incdec.ptr335, i8** %parse334, align 8
  %291 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %292 = load i32*, i32** %flagp.addr, align 8
  %293 = load i32, i32* %depth.addr, align 4
  %add336 = add i32 %293, 1
  %294 = load i8*, i8** %oregcomp_parse.addr, align 8
  %call337 = call %struct.regnode* @S_handle_regex_sets(%struct.RExC_state_t* %291, %struct.sv** %current196, i32* %292, i32 %add336, i8* %294)
  %295 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse338 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %295, i32 0, i32 8
  %296 = load i8*, i8** %parse338, align 8
  %incdec.ptr339 = getelementptr inbounds i8, i8* %296, i32 1
  store i8* %incdec.ptr339, i8** %parse338, align 8
  %297 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse340 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %297, i32 0, i32 8
  %298 = load i8*, i8** %parse340, align 8
  %incdec.ptr341 = getelementptr inbounds i8, i8* %298, i32 1
  store i8* %incdec.ptr341, i8** %parse340, align 8
  %299 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse342 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %299, i32 0, i32 8
  %300 = load i8*, i8** %parse342, align 8
  %incdec.ptr343 = getelementptr inbounds i8, i8* %300, i32 1
  store i8* %incdec.ptr343, i8** %parse342, align 8
  %301 = load i32, i32* %save_flags, align 4
  %302 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags344 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %302, i32 0, i32 0
  store i32 %301, i32* %flags344, align 8
  br label %handle_operand

if.end345:                                        ; preds = %land.lhs.true217, %sw.bb212
  %303 = load i32, i32* %top_index, align 4
  %conv346 = sext i32 %303 to i64
  %304 = load i64, i64* %fence, align 8
  %sub347 = sub nsw i64 %conv346, %304
  %cmp348 = icmp sge i64 %sub347, 0
  br i1 %cmp348, label %if.then350, label %if.end436

if.then350:                                       ; preds = %if.end345
  %305 = load %struct.av*, %struct.av** %stack, align 8
  %306 = load i32, i32* %top_index, align 4
  %conv351 = sext i32 %306 to i64
  %call352 = call %struct.sv** @Perl_av_fetch(%struct.av* %305, i64 %conv351, i32 0)
  store %struct.sv** %call352, %struct.sv*** %top_ptr, align 8
  %tobool353 = icmp ne %struct.sv** %call352, null
  br i1 %tobool353, label %lor.lhs.false354, label %if.then387

lor.lhs.false354:                                 ; preds = %if.then350
  %307 = load %struct.sv**, %struct.sv*** %top_ptr, align 8
  %308 = load %struct.sv*, %struct.sv** %307, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %308, i32 0, i32 2
  %309 = load i32, i32* %sv_flags, align 4
  %and355 = and i32 %309, 256
  %tobool356 = icmp ne i32 %and355, 0
  br i1 %tobool356, label %land.lhs.true357, label %lor.lhs.false369

land.lhs.true357:                                 ; preds = %lor.lhs.false354
  %310 = load %struct.sv**, %struct.sv*** %top_ptr, align 8
  %311 = load %struct.sv*, %struct.sv** %310, align 8
  %sv_flags358 = getelementptr inbounds %struct.sv, %struct.sv* %311, i32 0, i32 2
  %312 = load i32, i32* %sv_flags358, align 4
  %and359 = and i32 %312, -2145386240
  %cmp360 = icmp eq i32 %and359, -2147483392
  br i1 %cmp360, label %cond.true362, label %cond.false363

cond.true362:                                     ; preds = %land.lhs.true357
  %313 = load %struct.sv**, %struct.sv*** %top_ptr, align 8
  %314 = load %struct.sv*, %struct.sv** %313, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %314, i32 0, i32 0
  %315 = load i8*, i8** %sv_any, align 8
  %316 = bitcast i8* %315 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %316, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %317 = load i64, i64* %xivu_uv, align 8
  br label %cond.end365

cond.false363:                                    ; preds = %land.lhs.true357
  %318 = load %struct.sv**, %struct.sv*** %top_ptr, align 8
  %319 = load %struct.sv*, %struct.sv** %318, align 8
  %call364 = call i64 @Perl_sv_2uv_flags(%struct.sv* %319, i32 2)
  br label %cond.end365

cond.end365:                                      ; preds = %cond.false363, %cond.true362
  %cond366 = phi i64 [ %317, %cond.true362 ], [ %call364, %cond.false363 ]
  %cmp367 = icmp ne i64 %cond366, 33
  br i1 %cmp367, label %if.then387, label %lor.lhs.false369

lor.lhs.false369:                                 ; preds = %cond.end365, %lor.lhs.false354
  %320 = load %struct.sv**, %struct.sv*** %top_ptr, align 8
  %321 = load %struct.sv*, %struct.sv** %320, align 8
  %sv_flags370 = getelementptr inbounds %struct.sv, %struct.sv* %321, i32 0, i32 2
  %322 = load i32, i32* %sv_flags370, align 4
  %and371 = and i32 %322, 256
  %tobool372 = icmp ne i32 %and371, 0
  br i1 %tobool372, label %if.end435, label %land.lhs.true373

land.lhs.true373:                                 ; preds = %lor.lhs.false369
  %323 = load i32, i32* %top_index, align 4
  %conv374 = sext i32 %323 to i64
  %324 = load i64, i64* %fence, align 8
  %sub375 = sub nsw i64 %conv374, %324
  %cmp376 = icmp slt i64 %sub375, 1
  br i1 %cmp376, label %if.then387, label %lor.lhs.false378

lor.lhs.false378:                                 ; preds = %land.lhs.true373
  %325 = load %struct.av*, %struct.av** %stack, align 8
  %326 = load i32, i32* %top_index, align 4
  %sub379 = sub nsw i32 %326, 1
  %conv380 = sext i32 %sub379 to i64
  %call381 = call %struct.sv** @Perl_av_fetch(%struct.av* %325, i64 %conv380, i32 0)
  store %struct.sv** %call381, %struct.sv*** %stacked_ptr, align 8
  %tobool382 = icmp ne %struct.sv** %call381, null
  br i1 %tobool382, label %lor.lhs.false383, label %if.then387

lor.lhs.false383:                                 ; preds = %lor.lhs.false378
  %327 = load %struct.sv**, %struct.sv*** %stacked_ptr, align 8
  %328 = load %struct.sv*, %struct.sv** %327, align 8
  %sv_flags384 = getelementptr inbounds %struct.sv, %struct.sv* %328, i32 0, i32 2
  %329 = load i32, i32* %sv_flags384, align 4
  %and385 = and i32 %329, 256
  %tobool386 = icmp ne i32 %and385, 0
  br i1 %tobool386, label %if.end435, label %if.then387

if.then387:                                       ; preds = %lor.lhs.false383, %lor.lhs.false378, %land.lhs.true373, %cond.end365, %if.then350
  %330 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse388 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %330, i32 0, i32 8
  %331 = load i8*, i8** %parse388, align 8
  %incdec.ptr389 = getelementptr inbounds i8, i8* %331, i32 1
  store i8* %incdec.ptr389, i8** %parse388, align 8
  br label %do.body390

do.body390:                                       ; preds = %if.then387
  %332 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit391 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %332, i32 0, i32 12
  %333 = load %struct.regnode*, %struct.regnode** %emit391, align 8
  %334 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy392 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %334, i32 0, i32 13
  %335 = bitcast %struct.regnode_ssc* %emit_dummy392 to %struct.regnode*
  %cmp393 = icmp eq %struct.regnode* %333, %335
  br i1 %cmp393, label %if.end397, label %if.then395

if.then395:                                       ; preds = %do.body390
  %336 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv396 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %336, i32 0, i32 3
  %337 = load %struct.p5rx*, %struct.p5rx** %rx_sv396, align 8
  %338 = bitcast %struct.p5rx* %337 to i8*
  %339 = bitcast i8* %338 to %struct.sv*
  %340 = bitcast %struct.sv* %339 to i8*
  call void @Perl_save_pushptr(i8* %340, i32 11)
  br label %if.end397

if.end397:                                        ; preds = %if.then395, %do.body390
  br label %do.body398

do.body398:                                       ; preds = %if.end397
  %341 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse400 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %341, i32 0, i32 8
  %342 = load i8*, i8** %parse400, align 8
  %343 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end401 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %343, i32 0, i32 7
  %344 = load i8*, i8** %end401, align 8
  %cmp402 = icmp ugt i8* %342, %344
  br i1 %cmp402, label %cond.true404, label %cond.false406

cond.true404:                                     ; preds = %do.body398
  %345 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end405 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %345, i32 0, i32 7
  %346 = load i8*, i8** %end405, align 8
  br label %cond.end408

cond.false406:                                    ; preds = %do.body398
  %347 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse407 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %347, i32 0, i32 8
  %348 = load i8*, i8** %parse407, align 8
  br label %cond.end408

cond.end408:                                      ; preds = %cond.false406, %cond.true404
  %cond409 = phi i8* [ %346, %cond.true404 ], [ %348, %cond.false406 ]
  %349 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp410 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %349, i32 0, i32 2
  %350 = load i8*, i8** %precomp410, align 8
  %sub.ptr.lhs.cast411 = ptrtoint i8* %cond409 to i64
  %sub.ptr.rhs.cast412 = ptrtoint i8* %350 to i64
  %sub.ptr.sub413 = sub i64 %sub.ptr.lhs.cast411, %sub.ptr.rhs.cast412
  store i64 %sub.ptr.sub413, i64* %offset399, align 8
  %351 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8414 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %351, i32 0, i32 25
  %352 = load i32, i32* %utf8414, align 8
  %tobool415 = icmp ne i32 %352, 0
  %353 = zext i1 %tobool415 to i64
  %cond416 = select i1 %tobool415, i32 1, i32 0
  %tobool417 = icmp ne i32 %cond416, 0
  %354 = zext i1 %tobool417 to i64
  %cond418 = select i1 %tobool417, i32 1, i32 0
  %355 = load i64, i64* %offset399, align 8
  %356 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp419 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %356, i32 0, i32 2
  %357 = load i8*, i8** %precomp419, align 8
  %358 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8420 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %358, i32 0, i32 25
  %359 = load i32, i32* %utf8420, align 8
  %tobool421 = icmp ne i32 %359, 0
  %360 = zext i1 %tobool421 to i64
  %cond422 = select i1 %tobool421, i32 1, i32 0
  %tobool423 = icmp ne i32 %cond422, 0
  %361 = zext i1 %tobool423 to i64
  %cond424 = select i1 %tobool423, i32 1, i32 0
  %362 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end425 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %362, i32 0, i32 7
  %363 = load i8*, i8** %end425, align 8
  %364 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp426 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %364, i32 0, i32 2
  %365 = load i8*, i8** %precomp426, align 8
  %sub.ptr.lhs.cast427 = ptrtoint i8* %363 to i64
  %sub.ptr.rhs.cast428 = ptrtoint i8* %365 to i64
  %sub.ptr.sub429 = sub i64 %sub.ptr.lhs.cast427, %sub.ptr.rhs.cast428
  %366 = load i64, i64* %offset399, align 8
  %sub430 = sub nsw i64 %sub.ptr.sub429, %366
  %367 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp431 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %367, i32 0, i32 2
  %368 = load i8*, i8** %precomp431, align 8
  %369 = load i64, i64* %offset399, align 8
  %add.ptr432 = getelementptr inbounds i8, i8* %368, i64 %369
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.395, i64 0, i64 0), i32 %cond418, i64 %355, i8* %357, i32 %cond424, i64 %sub430, i8* %add.ptr432)
  br label %do.end433

do.end433:                                        ; preds = %cond.end408
  br label %do.end434

do.end434:                                        ; preds = %do.end433
  br label %if.end435

if.end435:                                        ; preds = %do.end434, %lor.lhs.false383, %lor.lhs.false369
  br label %if.end436

if.end436:                                        ; preds = %if.end435, %if.end345
  %370 = load i32, i32* %top_index, align 4
  %add437 = add nsw i32 %370, 1
  %conv438 = sext i32 %add437 to i64
  store i64 %conv438, i64* %fence, align 8
  %371 = load %struct.av*, %struct.av** %fence_stack, align 8
  %372 = load i64, i64* %fence, align 8
  %call439 = call %struct.sv* @Perl_newSViv(i64 %372)
  call void @Perl_av_push(%struct.av* %371, %struct.sv* %call439)
  br label %sw.epilog976

sw.bb440:                                         ; preds = %redo_curchar
  %373 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %374 = load i32*, i32** %flagp.addr, align 8
  %375 = load i32, i32* %depth.addr, align 4
  %add441 = add i32 %375, 1
  %call442 = call %struct.regnode* @S_regclass(%struct.RExC_state_t* %373, i32* %374, i32 %add441, i1 zeroext true, i1 zeroext false, i1 zeroext false, i1 zeroext true, %struct.sv** %current196)
  %tobool443 = icmp ne %struct.regnode* %call442, null
  br i1 %tobool443, label %if.end472, label %if.then444

if.then444:                                       ; preds = %sw.bb440
  br label %do.body445

do.body445:                                       ; preds = %if.then444
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses446, align 8
  %376 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end448 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %376, i32 0, i32 7
  %377 = load i8*, i8** %end448, align 8
  %378 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp449 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %378, i32 0, i32 2
  %379 = load i8*, i8** %precomp449, align 8
  %sub.ptr.lhs.cast450 = ptrtoint i8* %377 to i64
  %sub.ptr.rhs.cast451 = ptrtoint i8* %379 to i64
  %sub.ptr.sub452 = sub i64 %sub.ptr.lhs.cast450, %sub.ptr.rhs.cast451
  store i64 %sub.ptr.sub452, i64* %len447, align 8
  %380 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit453 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %380, i32 0, i32 12
  %381 = load %struct.regnode*, %struct.regnode** %emit453, align 8
  %382 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy454 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %382, i32 0, i32 13
  %383 = bitcast %struct.regnode_ssc* %emit_dummy454 to %struct.regnode*
  %cmp455 = icmp eq %struct.regnode* %381, %383
  br i1 %cmp455, label %if.end459, label %if.then457

if.then457:                                       ; preds = %do.body445
  %384 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv458 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %384, i32 0, i32 3
  %385 = load %struct.p5rx*, %struct.p5rx** %rx_sv458, align 8
  %386 = bitcast %struct.p5rx* %385 to i8*
  %387 = bitcast i8* %386 to %struct.sv*
  %388 = bitcast %struct.sv* %387 to i8*
  call void @Perl_save_pushptr(i8* %388, i32 11)
  br label %if.end459

if.end459:                                        ; preds = %if.then457, %do.body445
  %389 = load i64, i64* %len447, align 8
  %cmp460 = icmp sgt i64 %389, 127
  br i1 %cmp460, label %if.then462, label %if.end463

if.then462:                                       ; preds = %if.end459
  store i64 117, i64* %len447, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses446, align 8
  br label %if.end463

if.end463:                                        ; preds = %if.then462, %if.end459
  %390 = load i32*, i32** %flagp.addr, align 8
  %391 = load i32, i32* %390, align 4
  %conv464 = sext i32 %391 to i64
  %392 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8465 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %392, i32 0, i32 25
  %393 = load i32, i32* %utf8465, align 8
  %tobool466 = icmp ne i32 %393, 0
  %394 = zext i1 %tobool466 to i64
  %cond467 = select i1 %tobool466, i32 1, i32 0
  %tobool468 = icmp ne i32 %cond467, 0
  %395 = zext i1 %tobool468 to i64
  %cond469 = select i1 %tobool468, i32 1, i32 0
  %396 = load i64, i64* %len447, align 8
  %397 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp470 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %397, i32 0, i32 2
  %398 = load i8*, i8** %precomp470, align 8
  %399 = load i8*, i8** %ellipses446, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.390, i64 0, i64 0), i64 %conv464, i32 %cond469, i64 %396, i8* %398, i8* %399)
  br label %do.end471

do.end471:                                        ; preds = %if.end463
  br label %if.end472

if.end472:                                        ; preds = %do.end471, %sw.bb440
  %400 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse473 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %400, i32 0, i32 8
  %401 = load i8*, i8** %parse473, align 8
  %incdec.ptr474 = getelementptr inbounds i8, i8* %401, i32 -1
  store i8* %incdec.ptr474, i8** %parse473, align 8
  br label %handle_operand

sw.bb475:                                         ; preds = %redo_curchar
  %402 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call477 = call zeroext i1 @S_could_it_be_a_POSIX_class(%struct.RExC_state_t* %402)
  %frombool478 = zext i1 %call477 to i8
  store i8 %frombool478, i8* %is_posix_class476, align 1
  %403 = load i8, i8* %is_posix_class476, align 1
  %tobool479 = trunc i8 %403 to i1
  br i1 %tobool479, label %if.end483, label %if.then480

if.then480:                                       ; preds = %sw.bb475
  %404 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse481 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %404, i32 0, i32 8
  %405 = load i8*, i8** %parse481, align 8
  %incdec.ptr482 = getelementptr inbounds i8, i8* %405, i32 1
  store i8* %incdec.ptr482, i8** %parse481, align 8
  br label %if.end483

if.end483:                                        ; preds = %if.then480, %sw.bb475
  %406 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %407 = load i32*, i32** %flagp.addr, align 8
  %408 = load i32, i32* %depth.addr, align 4
  %add484 = add i32 %408, 1
  %409 = load i8, i8* %is_posix_class476, align 1
  %tobool485 = trunc i8 %409 to i1
  %call486 = call %struct.regnode* @S_regclass(%struct.RExC_state_t* %406, i32* %407, i32 %add484, i1 zeroext %tobool485, i1 zeroext false, i1 zeroext false, i1 zeroext true, %struct.sv** %current196)
  %tobool487 = icmp ne %struct.regnode* %call486, null
  br i1 %tobool487, label %if.end516, label %if.then488

if.then488:                                       ; preds = %if.end483
  br label %do.body489

do.body489:                                       ; preds = %if.then488
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses490, align 8
  %410 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end492 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %410, i32 0, i32 7
  %411 = load i8*, i8** %end492, align 8
  %412 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp493 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %412, i32 0, i32 2
  %413 = load i8*, i8** %precomp493, align 8
  %sub.ptr.lhs.cast494 = ptrtoint i8* %411 to i64
  %sub.ptr.rhs.cast495 = ptrtoint i8* %413 to i64
  %sub.ptr.sub496 = sub i64 %sub.ptr.lhs.cast494, %sub.ptr.rhs.cast495
  store i64 %sub.ptr.sub496, i64* %len491, align 8
  %414 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit497 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %414, i32 0, i32 12
  %415 = load %struct.regnode*, %struct.regnode** %emit497, align 8
  %416 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy498 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %416, i32 0, i32 13
  %417 = bitcast %struct.regnode_ssc* %emit_dummy498 to %struct.regnode*
  %cmp499 = icmp eq %struct.regnode* %415, %417
  br i1 %cmp499, label %if.end503, label %if.then501

if.then501:                                       ; preds = %do.body489
  %418 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv502 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %418, i32 0, i32 3
  %419 = load %struct.p5rx*, %struct.p5rx** %rx_sv502, align 8
  %420 = bitcast %struct.p5rx* %419 to i8*
  %421 = bitcast i8* %420 to %struct.sv*
  %422 = bitcast %struct.sv* %421 to i8*
  call void @Perl_save_pushptr(i8* %422, i32 11)
  br label %if.end503

if.end503:                                        ; preds = %if.then501, %do.body489
  %423 = load i64, i64* %len491, align 8
  %cmp504 = icmp sgt i64 %423, 127
  br i1 %cmp504, label %if.then506, label %if.end507

if.then506:                                       ; preds = %if.end503
  store i64 117, i64* %len491, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses490, align 8
  br label %if.end507

if.end507:                                        ; preds = %if.then506, %if.end503
  %424 = load i32*, i32** %flagp.addr, align 8
  %425 = load i32, i32* %424, align 4
  %conv508 = sext i32 %425 to i64
  %426 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8509 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %426, i32 0, i32 25
  %427 = load i32, i32* %utf8509, align 8
  %tobool510 = icmp ne i32 %427, 0
  %428 = zext i1 %tobool510 to i64
  %cond511 = select i1 %tobool510, i32 1, i32 0
  %tobool512 = icmp ne i32 %cond511, 0
  %429 = zext i1 %tobool512 to i64
  %cond513 = select i1 %tobool512, i32 1, i32 0
  %430 = load i64, i64* %len491, align 8
  %431 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp514 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %431, i32 0, i32 2
  %432 = load i8*, i8** %precomp514, align 8
  %433 = load i8*, i8** %ellipses490, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.390, i64 0, i64 0), i64 %conv508, i32 %cond513, i64 %430, i8* %432, i8* %433)
  br label %do.end515

do.end515:                                        ; preds = %if.end507
  br label %if.end516

if.end516:                                        ; preds = %do.end515, %if.end483
  %434 = load i8, i8* %is_posix_class476, align 1
  %tobool517 = trunc i8 %434 to i1
  br i1 %tobool517, label %if.then518, label %if.end521

if.then518:                                       ; preds = %if.end516
  %435 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse519 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %435, i32 0, i32 8
  %436 = load i8*, i8** %parse519, align 8
  %incdec.ptr520 = getelementptr inbounds i8, i8* %436, i32 -1
  store i8* %incdec.ptr520, i8** %parse519, align 8
  br label %if.end521

if.end521:                                        ; preds = %if.then518, %if.end516
  br label %handle_operand

sw.bb522:                                         ; preds = %redo_curchar
  %437 = load i32, i32* %top_index, align 4
  %cmp523 = icmp sge i32 %437, 1
  br i1 %cmp523, label %if.then525, label %if.end526

if.then525:                                       ; preds = %sw.bb522
  br label %join_operators

if.end526:                                        ; preds = %sw.bb522
  br label %done

sw.bb527:                                         ; preds = %redo_curchar
  %438 = load %struct.av*, %struct.av** %fence_stack, align 8
  %call528 = call i64 @S_av_top_index(%struct.av* %438)
  %cmp529 = icmp slt i64 %call528, 0
  br i1 %cmp529, label %if.then531, label %if.end579

if.then531:                                       ; preds = %sw.bb527
  %439 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse532 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %439, i32 0, i32 8
  %440 = load i8*, i8** %parse532, align 8
  %incdec.ptr533 = getelementptr inbounds i8, i8* %440, i32 1
  store i8* %incdec.ptr533, i8** %parse532, align 8
  br label %do.body534

do.body534:                                       ; preds = %if.then531
  %441 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit535 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %441, i32 0, i32 12
  %442 = load %struct.regnode*, %struct.regnode** %emit535, align 8
  %443 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy536 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %443, i32 0, i32 13
  %444 = bitcast %struct.regnode_ssc* %emit_dummy536 to %struct.regnode*
  %cmp537 = icmp eq %struct.regnode* %442, %444
  br i1 %cmp537, label %if.end541, label %if.then539

if.then539:                                       ; preds = %do.body534
  %445 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv540 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %445, i32 0, i32 3
  %446 = load %struct.p5rx*, %struct.p5rx** %rx_sv540, align 8
  %447 = bitcast %struct.p5rx* %446 to i8*
  %448 = bitcast i8* %447 to %struct.sv*
  %449 = bitcast %struct.sv* %448 to i8*
  call void @Perl_save_pushptr(i8* %449, i32 11)
  br label %if.end541

if.end541:                                        ; preds = %if.then539, %do.body534
  br label %do.body542

do.body542:                                       ; preds = %if.end541
  %450 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse544 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %450, i32 0, i32 8
  %451 = load i8*, i8** %parse544, align 8
  %452 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end545 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %452, i32 0, i32 7
  %453 = load i8*, i8** %end545, align 8
  %cmp546 = icmp ugt i8* %451, %453
  br i1 %cmp546, label %cond.true548, label %cond.false550

cond.true548:                                     ; preds = %do.body542
  %454 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end549 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %454, i32 0, i32 7
  %455 = load i8*, i8** %end549, align 8
  br label %cond.end552

cond.false550:                                    ; preds = %do.body542
  %456 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse551 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %456, i32 0, i32 8
  %457 = load i8*, i8** %parse551, align 8
  br label %cond.end552

cond.end552:                                      ; preds = %cond.false550, %cond.true548
  %cond553 = phi i8* [ %455, %cond.true548 ], [ %457, %cond.false550 ]
  %458 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp554 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %458, i32 0, i32 2
  %459 = load i8*, i8** %precomp554, align 8
  %sub.ptr.lhs.cast555 = ptrtoint i8* %cond553 to i64
  %sub.ptr.rhs.cast556 = ptrtoint i8* %459 to i64
  %sub.ptr.sub557 = sub i64 %sub.ptr.lhs.cast555, %sub.ptr.rhs.cast556
  store i64 %sub.ptr.sub557, i64* %offset543, align 8
  %460 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8558 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %460, i32 0, i32 25
  %461 = load i32, i32* %utf8558, align 8
  %tobool559 = icmp ne i32 %461, 0
  %462 = zext i1 %tobool559 to i64
  %cond560 = select i1 %tobool559, i32 1, i32 0
  %tobool561 = icmp ne i32 %cond560, 0
  %463 = zext i1 %tobool561 to i64
  %cond562 = select i1 %tobool561, i32 1, i32 0
  %464 = load i64, i64* %offset543, align 8
  %465 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp563 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %465, i32 0, i32 2
  %466 = load i8*, i8** %precomp563, align 8
  %467 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8564 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %467, i32 0, i32 25
  %468 = load i32, i32* %utf8564, align 8
  %tobool565 = icmp ne i32 %468, 0
  %469 = zext i1 %tobool565 to i64
  %cond566 = select i1 %tobool565, i32 1, i32 0
  %tobool567 = icmp ne i32 %cond566, 0
  %470 = zext i1 %tobool567 to i64
  %cond568 = select i1 %tobool567, i32 1, i32 0
  %471 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end569 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %471, i32 0, i32 7
  %472 = load i8*, i8** %end569, align 8
  %473 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp570 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %473, i32 0, i32 2
  %474 = load i8*, i8** %precomp570, align 8
  %sub.ptr.lhs.cast571 = ptrtoint i8* %472 to i64
  %sub.ptr.rhs.cast572 = ptrtoint i8* %474 to i64
  %sub.ptr.sub573 = sub i64 %sub.ptr.lhs.cast571, %sub.ptr.rhs.cast572
  %475 = load i64, i64* %offset543, align 8
  %sub574 = sub nsw i64 %sub.ptr.sub573, %475
  %476 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp575 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %476, i32 0, i32 2
  %477 = load i8*, i8** %precomp575, align 8
  %478 = load i64, i64* %offset543, align 8
  %add.ptr576 = getelementptr inbounds i8, i8* %477, i64 %478
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.396, i64 0, i64 0), i32 %cond562, i64 %464, i8* %466, i32 %cond568, i64 %sub574, i8* %add.ptr576)
  br label %do.end577

do.end577:                                        ; preds = %cond.end552
  br label %do.end578

do.end578:                                        ; preds = %do.end577
  br label %if.end579

if.end579:                                        ; preds = %do.end578, %sw.bb527
  %479 = load i32, i32* %top_index, align 4
  %conv580 = sext i32 %479 to i64
  %480 = load i64, i64* %fence, align 8
  %sub581 = sub nsw i64 %conv580, %480
  %cmp582 = icmp sge i64 %sub581, 1
  br i1 %cmp582, label %if.then584, label %if.end585

if.then584:                                       ; preds = %if.end579
  br label %join_operators

if.end585:                                        ; preds = %if.end579
  %481 = load %struct.av*, %struct.av** %fence_stack, align 8
  %call586 = call %struct.sv* @Perl_av_pop(%struct.av* %481)
  store %struct.sv* %call586, %struct.sv** %fence_ptr, align 8
  %482 = load %struct.sv*, %struct.sv** %fence_ptr, align 8
  %sv_flags587 = getelementptr inbounds %struct.sv, %struct.sv* %482, i32 0, i32 2
  %483 = load i32, i32* %sv_flags587, align 4
  %and588 = and i32 %483, 2097408
  %cmp589 = icmp eq i32 %and588, 256
  br i1 %cmp589, label %cond.true591, label %cond.false593

cond.true591:                                     ; preds = %if.end585
  %484 = load %struct.sv*, %struct.sv** %fence_ptr, align 8
  %sv_any592 = getelementptr inbounds %struct.sv, %struct.sv* %484, i32 0, i32 0
  %485 = load i8*, i8** %sv_any592, align 8
  %486 = bitcast i8* %485 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %486, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %487 = load i64, i64* %xivu_iv, align 8
  br label %cond.end595

cond.false593:                                    ; preds = %if.end585
  %488 = load %struct.sv*, %struct.sv** %fence_ptr, align 8
  %call594 = call i64 @Perl_sv_2iv_flags(%struct.sv* %488, i32 2)
  br label %cond.end595

cond.end595:                                      ; preds = %cond.false593, %cond.true591
  %cond596 = phi i64 [ %487, %cond.true591 ], [ %call594, %cond.false593 ]
  %sub597 = sub nsw i64 %cond596, 1
  store i64 %sub597, i64* %fence, align 8
  %489 = load %struct.sv*, %struct.sv** %fence_ptr, align 8
  %490 = bitcast %struct.sv* %489 to i8*
  %491 = bitcast i8* %490 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %491)
  store %struct.sv* null, %struct.sv** %fence_ptr, align 8
  %492 = load i64, i64* %fence, align 8
  %cmp598 = icmp slt i64 %492, 0
  br i1 %cmp598, label %if.then600, label %if.end601

if.then600:                                       ; preds = %cond.end595
  store i64 0, i64* %fence, align 8
  br label %if.end601

if.end601:                                        ; preds = %if.then600, %cond.end595
  %493 = load %struct.av*, %struct.av** %stack, align 8
  %call602 = call %struct.sv* @Perl_av_pop(%struct.av* %493)
  store %struct.sv* %call602, %struct.sv** %current196, align 8
  %494 = load %struct.sv*, %struct.sv** %current196, align 8
  %sv_flags603 = getelementptr inbounds %struct.sv, %struct.sv* %494, i32 0, i32 2
  %495 = load i32, i32* %sv_flags603, align 4
  %and604 = and i32 %495, 256
  %tobool605 = icmp ne i32 %and604, 0
  br i1 %tobool605, label %if.end607, label %if.then606

if.then606:                                       ; preds = %if.end601
  br label %handle_operand

if.end607:                                        ; preds = %if.end601
  %496 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse608 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %496, i32 0, i32 8
  %497 = load i8*, i8** %parse608, align 8
  %incdec.ptr609 = getelementptr inbounds i8, i8* %497, i32 1
  store i8* %incdec.ptr609, i8** %parse608, align 8
  br label %bad_syntax

sw.bb610:                                         ; preds = %redo_curchar, %redo_curchar, %redo_curchar, %redo_curchar, %redo_curchar
  %498 = load i32, i32* %top_index, align 4
  %conv611 = sext i32 %498 to i64
  %499 = load i64, i64* %fence, align 8
  %sub612 = sub nsw i64 %conv611, %499
  %cmp613 = icmp slt i64 %sub612, 0
  br i1 %cmp613, label %if.then628, label %lor.lhs.false615

lor.lhs.false615:                                 ; preds = %sw.bb610
  %500 = load i32, i32* %top_index, align 4
  %conv616 = sext i32 %500 to i64
  %501 = load i64, i64* %fence, align 8
  %sub617 = sub nsw i64 %conv616, %501
  %cmp618 = icmp eq i64 %sub617, 1
  br i1 %cmp618, label %if.then628, label %lor.lhs.false620

lor.lhs.false620:                                 ; preds = %lor.lhs.false615
  %502 = load %struct.av*, %struct.av** %stack, align 8
  %503 = load i32, i32* %top_index, align 4
  %conv621 = sext i32 %503 to i64
  %call622 = call %struct.sv** @Perl_av_fetch(%struct.av* %502, i64 %conv621, i32 0)
  store %struct.sv** %call622, %struct.sv*** %top_ptr, align 8
  %tobool623 = icmp ne %struct.sv** %call622, null
  br i1 %tobool623, label %lor.lhs.false624, label %if.then628

lor.lhs.false624:                                 ; preds = %lor.lhs.false620
  %504 = load %struct.sv**, %struct.sv*** %top_ptr, align 8
  %505 = load %struct.sv*, %struct.sv** %504, align 8
  %sv_flags625 = getelementptr inbounds %struct.sv, %struct.sv* %505, i32 0, i32 2
  %506 = load i32, i32* %sv_flags625, align 4
  %and626 = and i32 %506, 256
  %tobool627 = icmp ne i32 %and626, 0
  br i1 %tobool627, label %if.then628, label %if.end629

if.then628:                                       ; preds = %lor.lhs.false624, %lor.lhs.false620, %lor.lhs.false615, %sw.bb610
  br label %unexpected_binary

if.end629:                                        ; preds = %lor.lhs.false624
  %507 = load i32, i32* %top_index, align 4
  %conv630 = sext i32 %507 to i64
  %508 = load i64, i64* %fence, align 8
  %sub631 = sub nsw i64 %conv630, %508
  %cmp632 = icmp slt i64 %sub631, 2
  br i1 %cmp632, label %if.then634, label %if.end639

if.then634:                                       ; preds = %if.end629
  %509 = load %struct.av*, %struct.av** %stack, align 8
  %call636 = call %struct.sv* @Perl_av_pop(%struct.av* %509)
  store %struct.sv* %call636, %struct.sv** %lhs635, align 8
  %510 = load %struct.av*, %struct.av** %stack, align 8
  %511 = load i8, i8* %curchar, align 1
  %conv637 = zext i8 %511 to i64
  %call638 = call %struct.sv* @Perl_newSVuv(i64 %conv637)
  call void @Perl_av_push(%struct.av* %510, %struct.sv* %call638)
  %512 = load %struct.av*, %struct.av** %stack, align 8
  %513 = load %struct.sv*, %struct.sv** %lhs635, align 8
  call void @Perl_av_push(%struct.av* %512, %struct.sv* %513)
  br label %sw.epilog976

if.end639:                                        ; preds = %if.end629
  br label %join_operators

join_operators:                                   ; preds = %if.end639, %if.then584, %if.then525
  %514 = load %struct.av*, %struct.av** %stack, align 8
  %515 = load i32, i32* %top_index, align 4
  %sub640 = sub nsw i32 %515, 2
  %conv641 = sext i32 %sub640 to i64
  %call642 = call %struct.sv** @Perl_av_fetch(%struct.av* %514, i64 %conv641, i32 0)
  store %struct.sv** %call642, %struct.sv*** %stacked_ptr, align 8
  %tobool643 = icmp ne %struct.sv** %call642, null
  br i1 %tobool643, label %lor.lhs.false644, label %if.then648

lor.lhs.false644:                                 ; preds = %join_operators
  %516 = load %struct.sv**, %struct.sv*** %stacked_ptr, align 8
  %517 = load %struct.sv*, %struct.sv** %516, align 8
  %sv_flags645 = getelementptr inbounds %struct.sv, %struct.sv* %517, i32 0, i32 2
  %518 = load i32, i32* %sv_flags645, align 4
  %and646 = and i32 %518, 256
  %tobool647 = icmp ne i32 %and646, 0
  br i1 %tobool647, label %if.end697, label %if.then648

if.then648:                                       ; preds = %lor.lhs.false644, %join_operators
  %519 = load i8, i8* %curchar, align 1
  %conv649 = zext i8 %519 to i32
  %cmp650 = icmp eq i32 %conv649, 93
  br i1 %cmp650, label %if.then652, label %if.end653

if.then652:                                       ; preds = %if.then648
  br label %done

if.end653:                                        ; preds = %if.then648
  br label %unexpected_binary

unexpected_binary:                                ; preds = %if.end653, %if.then628
  %520 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse654 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %520, i32 0, i32 8
  %521 = load i8*, i8** %parse654, align 8
  %incdec.ptr655 = getelementptr inbounds i8, i8* %521, i32 1
  store i8* %incdec.ptr655, i8** %parse654, align 8
  br label %do.body656

do.body656:                                       ; preds = %unexpected_binary
  %522 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit657 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %522, i32 0, i32 12
  %523 = load %struct.regnode*, %struct.regnode** %emit657, align 8
  %524 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy658 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %524, i32 0, i32 13
  %525 = bitcast %struct.regnode_ssc* %emit_dummy658 to %struct.regnode*
  %cmp659 = icmp eq %struct.regnode* %523, %525
  br i1 %cmp659, label %if.end663, label %if.then661

if.then661:                                       ; preds = %do.body656
  %526 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv662 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %526, i32 0, i32 3
  %527 = load %struct.p5rx*, %struct.p5rx** %rx_sv662, align 8
  %528 = bitcast %struct.p5rx* %527 to i8*
  %529 = bitcast i8* %528 to %struct.sv*
  %530 = bitcast %struct.sv* %529 to i8*
  call void @Perl_save_pushptr(i8* %530, i32 11)
  br label %if.end663

if.end663:                                        ; preds = %if.then661, %do.body656
  br label %do.body664

do.body664:                                       ; preds = %if.end663
  %531 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse666 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %531, i32 0, i32 8
  %532 = load i8*, i8** %parse666, align 8
  %533 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp667 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %533, i32 0, i32 2
  %534 = load i8*, i8** %precomp667, align 8
  %sub.ptr.lhs.cast668 = ptrtoint i8* %532 to i64
  %sub.ptr.rhs.cast669 = ptrtoint i8* %534 to i64
  %sub.ptr.sub670 = sub i64 %sub.ptr.lhs.cast668, %sub.ptr.rhs.cast669
  store i64 %sub.ptr.sub670, i64* %offset665, align 8
  %535 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8671 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %535, i32 0, i32 25
  %536 = load i32, i32* %utf8671, align 8
  %tobool672 = icmp ne i32 %536, 0
  %537 = zext i1 %tobool672 to i64
  %cond673 = select i1 %tobool672, i32 1, i32 0
  %tobool674 = icmp ne i32 %cond673, 0
  %538 = load i8, i8* %curchar, align 1
  %conv675 = zext i8 %538 to i32
  %539 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8676 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %539, i32 0, i32 25
  %540 = load i32, i32* %utf8676, align 8
  %tobool677 = icmp ne i32 %540, 0
  %541 = zext i1 %tobool677 to i64
  %cond678 = select i1 %tobool677, i32 1, i32 0
  %tobool679 = icmp ne i32 %cond678, 0
  %542 = zext i1 %tobool679 to i64
  %cond680 = select i1 %tobool679, i32 1, i32 0
  %543 = load i64, i64* %offset665, align 8
  %544 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp681 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %544, i32 0, i32 2
  %545 = load i8*, i8** %precomp681, align 8
  %546 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8682 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %546, i32 0, i32 25
  %547 = load i32, i32* %utf8682, align 8
  %tobool683 = icmp ne i32 %547, 0
  %548 = zext i1 %tobool683 to i64
  %cond684 = select i1 %tobool683, i32 1, i32 0
  %tobool685 = icmp ne i32 %cond684, 0
  %549 = zext i1 %tobool685 to i64
  %cond686 = select i1 %tobool685, i32 1, i32 0
  %550 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end687 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %550, i32 0, i32 7
  %551 = load i8*, i8** %end687, align 8
  %552 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp688 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %552, i32 0, i32 2
  %553 = load i8*, i8** %precomp688, align 8
  %sub.ptr.lhs.cast689 = ptrtoint i8* %551 to i64
  %sub.ptr.rhs.cast690 = ptrtoint i8* %553 to i64
  %sub.ptr.sub691 = sub i64 %sub.ptr.lhs.cast689, %sub.ptr.rhs.cast690
  %554 = load i64, i64* %offset665, align 8
  %sub692 = sub nsw i64 %sub.ptr.sub691, %554
  %555 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp693 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %555, i32 0, i32 2
  %556 = load i8*, i8** %precomp693, align 8
  %557 = load i64, i64* %offset665, align 8
  %add.ptr694 = getelementptr inbounds i8, i8* %556, i64 %557
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool674, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.397, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %conv675, i32 %cond680, i64 %543, i8* %545, i32 %cond686, i64 %sub692, i8* %add.ptr694)
  br label %do.end695

do.end695:                                        ; preds = %do.body664
  br label %do.end696

do.end696:                                        ; preds = %do.end695
  br label %if.end697

if.end697:                                        ; preds = %do.end696, %lor.lhs.false644
  %558 = load %struct.sv**, %struct.sv*** %stacked_ptr, align 8
  %559 = load %struct.sv*, %struct.sv** %558, align 8
  %sv_flags698 = getelementptr inbounds %struct.sv, %struct.sv* %559, i32 0, i32 2
  %560 = load i32, i32* %sv_flags698, align 4
  %and699 = and i32 %560, -2145386240
  %cmp700 = icmp eq i32 %and699, -2147483392
  br i1 %cmp700, label %cond.true702, label %cond.false706

cond.true702:                                     ; preds = %if.end697
  %561 = load %struct.sv**, %struct.sv*** %stacked_ptr, align 8
  %562 = load %struct.sv*, %struct.sv** %561, align 8
  %sv_any703 = getelementptr inbounds %struct.sv, %struct.sv* %562, i32 0, i32 0
  %563 = load i8*, i8** %sv_any703, align 8
  %564 = bitcast i8* %563 to %struct.xpvuv*
  %xuv_u704 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %564, i32 0, i32 4
  %xivu_uv705 = bitcast %union._xivu* %xuv_u704 to i64*
  %565 = load i64, i64* %xivu_uv705, align 8
  br label %cond.end708

cond.false706:                                    ; preds = %if.end697
  %566 = load %struct.sv**, %struct.sv*** %stacked_ptr, align 8
  %567 = load %struct.sv*, %struct.sv** %566, align 8
  %call707 = call i64 @Perl_sv_2uv_flags(%struct.sv* %567, i32 2)
  br label %cond.end708

cond.end708:                                      ; preds = %cond.false706, %cond.true702
  %cond709 = phi i64 [ %565, %cond.true702 ], [ %call707, %cond.false706 ]
  %conv710 = trunc i64 %cond709 to i8
  store i8 %conv710, i8* %stacked_operator, align 1
  %568 = load i8, i8* %curchar, align 1
  %call711 = call i32 @S_regex_set_precedence(i8 zeroext %568)
  %569 = load i8, i8* %stacked_operator, align 1
  %call712 = call i32 @S_regex_set_precedence(i8 zeroext %569)
  %cmp713 = icmp ugt i32 %call711, %call712
  br i1 %cmp713, label %if.then715, label %if.end719

if.then715:                                       ; preds = %cond.end708
  %570 = load %struct.av*, %struct.av** %stack, align 8
  %call716 = call %struct.sv* @Perl_av_pop(%struct.av* %570)
  store %struct.sv* %call716, %struct.sv** %lhs, align 8
  %571 = load %struct.av*, %struct.av** %stack, align 8
  %572 = load i8, i8* %curchar, align 1
  %conv717 = zext i8 %572 to i64
  %call718 = call %struct.sv* @Perl_newSVuv(i64 %conv717)
  call void @Perl_av_push(%struct.av* %571, %struct.sv* %call718)
  %573 = load %struct.av*, %struct.av** %stack, align 8
  %574 = load %struct.sv*, %struct.sv** %lhs, align 8
  call void @Perl_av_push(%struct.av* %573, %struct.sv* %574)
  br label %sw.epilog976

if.end719:                                        ; preds = %cond.end708
  %575 = load %struct.av*, %struct.av** %stack, align 8
  %call720 = call %struct.sv* @Perl_av_pop(%struct.av* %575)
  store %struct.sv* %call720, %struct.sv** %rhs, align 8
  %576 = load %struct.sv*, %struct.sv** %rhs, align 8
  %sv_flags721 = getelementptr inbounds %struct.sv, %struct.sv* %576, i32 0, i32 2
  %577 = load i32, i32* %sv_flags721, align 4
  %and722 = and i32 %577, 256
  %tobool723 = icmp ne i32 %and722, 0
  br i1 %tobool723, label %if.then724, label %if.end725

if.then724:                                       ; preds = %if.end719
  br label %bad_syntax

if.end725:                                        ; preds = %if.end719
  %578 = load %struct.av*, %struct.av** %stack, align 8
  %call726 = call %struct.sv* @Perl_av_pop(%struct.av* %578)
  store %struct.sv* %call726, %struct.sv** %lhs, align 8
  %579 = load %struct.sv*, %struct.sv** %lhs, align 8
  %sv_flags727 = getelementptr inbounds %struct.sv, %struct.sv* %579, i32 0, i32 2
  %580 = load i32, i32* %sv_flags727, align 4
  %and728 = and i32 %580, 256
  %tobool729 = icmp ne i32 %and728, 0
  br i1 %tobool729, label %if.then730, label %if.end731

if.then730:                                       ; preds = %if.end725
  br label %bad_syntax

if.end731:                                        ; preds = %if.end725
  %581 = load i8, i8* %stacked_operator, align 1
  %conv732 = sext i8 %581 to i32
  switch i32 %conv732, label %sw.epilog737 [
    i32 38, label %sw.bb733
    i32 124, label %sw.bb734
    i32 43, label %sw.bb734
    i32 45, label %sw.bb735
    i32 94, label %sw.bb736
  ]

sw.bb733:                                         ; preds = %if.end731
  %582 = load %struct.sv*, %struct.sv** %lhs, align 8
  %583 = load %struct.sv*, %struct.sv** %rhs, align 8
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %582, %struct.sv* %583, i1 zeroext false, %struct.sv** %rhs)
  br label %sw.epilog737

sw.bb734:                                         ; preds = %if.end731, %if.end731
  %584 = load %struct.sv*, %struct.sv** %lhs, align 8
  %585 = load %struct.sv*, %struct.sv** %rhs, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %584, %struct.sv* %585, i1 zeroext false, %struct.sv** %rhs)
  br label %sw.epilog737

sw.bb735:                                         ; preds = %if.end731
  %586 = load %struct.sv*, %struct.sv** %lhs, align 8
  %587 = load %struct.sv*, %struct.sv** %rhs, align 8
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %586, %struct.sv* %587, i1 zeroext true, %struct.sv** %rhs)
  br label %sw.epilog737

sw.bb736:                                         ; preds = %if.end731
  store %struct.sv* null, %struct.sv** %i, align 8
  store %struct.sv* null, %struct.sv** %u, align 8
  %588 = load %struct.sv*, %struct.sv** %lhs, align 8
  %589 = load %struct.sv*, %struct.sv** %rhs, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %588, %struct.sv* %589, i1 zeroext false, %struct.sv** %u)
  %590 = load %struct.sv*, %struct.sv** %lhs, align 8
  %591 = load %struct.sv*, %struct.sv** %rhs, align 8
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %590, %struct.sv* %591, i1 zeroext false, %struct.sv** %i)
  %592 = load %struct.sv*, %struct.sv** %rhs, align 8
  store %struct.sv* %592, %struct.sv** %element, align 8
  %593 = load %struct.sv*, %struct.sv** %u, align 8
  %594 = load %struct.sv*, %struct.sv** %i, align 8
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %593, %struct.sv* %594, i1 zeroext true, %struct.sv** %rhs)
  %595 = load %struct.sv*, %struct.sv** %i, align 8
  %596 = bitcast %struct.sv* %595 to i8*
  %597 = bitcast i8* %596 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %597)
  %598 = load %struct.sv*, %struct.sv** %u, align 8
  %599 = bitcast %struct.sv* %598 to i8*
  %600 = bitcast i8* %599 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %600)
  %601 = load %struct.sv*, %struct.sv** %element, align 8
  %602 = bitcast %struct.sv* %601 to i8*
  %603 = bitcast i8* %602 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %603)
  br label %sw.epilog737

sw.epilog737:                                     ; preds = %if.end731, %sw.bb736, %sw.bb735, %sw.bb734, %sw.bb733
  %604 = load %struct.sv*, %struct.sv** %lhs, align 8
  %605 = bitcast %struct.sv* %604 to i8*
  %606 = bitcast i8* %605 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %606)
  %607 = load %struct.av*, %struct.av** %stack, align 8
  %call738 = call %struct.sv* @Perl_av_pop(%struct.av* %607)
  store %struct.sv* %call738, %struct.sv** %only_to_avoid_leaks, align 8
  %608 = load %struct.sv*, %struct.sv** %only_to_avoid_leaks, align 8
  %609 = bitcast %struct.sv* %608 to i8*
  %610 = bitcast i8* %609 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %610)
  %611 = load %struct.av*, %struct.av** %stack, align 8
  %612 = load %struct.sv*, %struct.sv** %rhs, align 8
  call void @Perl_av_push(%struct.av* %611, %struct.sv* %612)
  br label %redo_curchar

sw.bb739:                                         ; preds = %redo_curchar
  %613 = load %struct.av*, %struct.av** %stack, align 8
  %614 = load i32, i32* %top_index, align 4
  %conv740 = sext i32 %614 to i64
  %call741 = call %struct.sv** @Perl_av_fetch(%struct.av* %613, i64 %conv740, i32 0)
  store %struct.sv** %call741, %struct.sv*** %top_ptr, align 8
  %tobool742 = icmp ne %struct.sv** %call741, null
  br i1 %tobool742, label %land.lhs.true743, label %if.else764

land.lhs.true743:                                 ; preds = %sw.bb739
  %615 = load %struct.sv**, %struct.sv*** %top_ptr, align 8
  %616 = load %struct.sv*, %struct.sv** %615, align 8
  %sv_flags744 = getelementptr inbounds %struct.sv, %struct.sv* %616, i32 0, i32 2
  %617 = load i32, i32* %sv_flags744, align 4
  %and745 = and i32 %617, 256
  %tobool746 = icmp ne i32 %and745, 0
  br i1 %tobool746, label %land.lhs.true747, label %if.else764

land.lhs.true747:                                 ; preds = %land.lhs.true743
  %618 = load %struct.sv**, %struct.sv*** %top_ptr, align 8
  %619 = load %struct.sv*, %struct.sv** %618, align 8
  %sv_flags748 = getelementptr inbounds %struct.sv, %struct.sv* %619, i32 0, i32 2
  %620 = load i32, i32* %sv_flags748, align 4
  %and749 = and i32 %620, -2145386240
  %cmp750 = icmp eq i32 %and749, -2147483392
  br i1 %cmp750, label %cond.true752, label %cond.false756

cond.true752:                                     ; preds = %land.lhs.true747
  %621 = load %struct.sv**, %struct.sv*** %top_ptr, align 8
  %622 = load %struct.sv*, %struct.sv** %621, align 8
  %sv_any753 = getelementptr inbounds %struct.sv, %struct.sv* %622, i32 0, i32 0
  %623 = load i8*, i8** %sv_any753, align 8
  %624 = bitcast i8* %623 to %struct.xpvuv*
  %xuv_u754 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %624, i32 0, i32 4
  %xivu_uv755 = bitcast %union._xivu* %xuv_u754 to i64*
  %625 = load i64, i64* %xivu_uv755, align 8
  br label %cond.end758

cond.false756:                                    ; preds = %land.lhs.true747
  %626 = load %struct.sv**, %struct.sv*** %top_ptr, align 8
  %627 = load %struct.sv*, %struct.sv** %626, align 8
  %call757 = call i64 @Perl_sv_2uv_flags(%struct.sv* %627, i32 2)
  br label %cond.end758

cond.end758:                                      ; preds = %cond.false756, %cond.true752
  %cond759 = phi i64 [ %625, %cond.true752 ], [ %call757, %cond.false756 ]
  %cmp760 = icmp eq i64 %cond759, 33
  br i1 %cmp760, label %if.then762, label %if.else764

if.then762:                                       ; preds = %cond.end758
  %628 = load %struct.av*, %struct.av** %stack, align 8
  %call763 = call %struct.sv* @Perl_av_pop(%struct.av* %628)
  store %struct.sv* %call763, %struct.sv** %only_to_avoid_leaks, align 8
  %629 = load %struct.sv*, %struct.sv** %only_to_avoid_leaks, align 8
  %630 = bitcast %struct.sv* %629 to i8*
  %631 = bitcast i8* %630 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %631)
  br label %if.end767

if.else764:                                       ; preds = %cond.end758, %land.lhs.true743, %sw.bb739
  %632 = load %struct.av*, %struct.av** %stack, align 8
  %633 = load i8, i8* %curchar, align 1
  %conv765 = zext i8 %633 to i64
  %call766 = call %struct.sv* @Perl_newSVuv(i64 %conv765)
  call void @Perl_av_push(%struct.av* %632, %struct.sv* %call766)
  br label %if.end767

if.end767:                                        ; preds = %if.else764, %if.then762
  br label %sw.epilog976

sw.default768:                                    ; preds = %redo_curchar
  %634 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8769 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %634, i32 0, i32 25
  %635 = load i32, i32* %utf8769, align 8
  %tobool770 = icmp ne i32 %635, 0
  br i1 %tobool770, label %cond.true771, label %cond.false772

cond.true771:                                     ; preds = %sw.default768
  br i1 true, label %cond.true773, label %cond.false778

cond.false772:                                    ; preds = %sw.default768
  br i1 false, label %cond.true773, label %cond.false778

cond.true773:                                     ; preds = %cond.false772, %cond.true771
  %636 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse774 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %636, i32 0, i32 8
  %637 = load i8*, i8** %parse774, align 8
  %638 = load i8, i8* %637, align 1
  %idxprom775 = zext i8 %638 to i64
  %arrayidx776 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom775
  %639 = load i8, i8* %arrayidx776, align 1
  %conv777 = zext i8 %639 to i32
  br label %cond.end779

cond.false778:                                    ; preds = %cond.false772, %cond.true771
  br label %cond.end779

cond.end779:                                      ; preds = %cond.false778, %cond.true773
  %cond780 = phi i32 [ %conv777, %cond.true773 ], [ 1, %cond.false778 ]
  %640 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse781 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %640, i32 0, i32 8
  %641 = load i8*, i8** %parse781, align 8
  %idx.ext782 = sext i32 %cond780 to i64
  %add.ptr783 = getelementptr inbounds i8, i8* %641, i64 %idx.ext782
  store i8* %add.ptr783, i8** %parse781, align 8
  br label %do.body784

do.body784:                                       ; preds = %cond.end779
  %642 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit785 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %642, i32 0, i32 12
  %643 = load %struct.regnode*, %struct.regnode** %emit785, align 8
  %644 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy786 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %644, i32 0, i32 13
  %645 = bitcast %struct.regnode_ssc* %emit_dummy786 to %struct.regnode*
  %cmp787 = icmp eq %struct.regnode* %643, %645
  br i1 %cmp787, label %if.end791, label %if.then789

if.then789:                                       ; preds = %do.body784
  %646 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv790 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %646, i32 0, i32 3
  %647 = load %struct.p5rx*, %struct.p5rx** %rx_sv790, align 8
  %648 = bitcast %struct.p5rx* %647 to i8*
  %649 = bitcast i8* %648 to %struct.sv*
  %650 = bitcast %struct.sv* %649 to i8*
  call void @Perl_save_pushptr(i8* %650, i32 11)
  br label %if.end791

if.end791:                                        ; preds = %if.then789, %do.body784
  br label %do.body792

do.body792:                                       ; preds = %if.end791
  %651 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse794 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %651, i32 0, i32 8
  %652 = load i8*, i8** %parse794, align 8
  %653 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end795 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %653, i32 0, i32 7
  %654 = load i8*, i8** %end795, align 8
  %cmp796 = icmp ugt i8* %652, %654
  br i1 %cmp796, label %cond.true798, label %cond.false800

cond.true798:                                     ; preds = %do.body792
  %655 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end799 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %655, i32 0, i32 7
  %656 = load i8*, i8** %end799, align 8
  br label %cond.end802

cond.false800:                                    ; preds = %do.body792
  %657 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse801 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %657, i32 0, i32 8
  %658 = load i8*, i8** %parse801, align 8
  br label %cond.end802

cond.end802:                                      ; preds = %cond.false800, %cond.true798
  %cond803 = phi i8* [ %656, %cond.true798 ], [ %658, %cond.false800 ]
  %659 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp804 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %659, i32 0, i32 2
  %660 = load i8*, i8** %precomp804, align 8
  %sub.ptr.lhs.cast805 = ptrtoint i8* %cond803 to i64
  %sub.ptr.rhs.cast806 = ptrtoint i8* %660 to i64
  %sub.ptr.sub807 = sub i64 %sub.ptr.lhs.cast805, %sub.ptr.rhs.cast806
  store i64 %sub.ptr.sub807, i64* %offset793, align 8
  %661 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8808 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %661, i32 0, i32 25
  %662 = load i32, i32* %utf8808, align 8
  %tobool809 = icmp ne i32 %662, 0
  %663 = zext i1 %tobool809 to i64
  %cond810 = select i1 %tobool809, i32 1, i32 0
  %tobool811 = icmp ne i32 %cond810, 0
  %664 = zext i1 %tobool811 to i64
  %cond812 = select i1 %tobool811, i32 1, i32 0
  %665 = load i64, i64* %offset793, align 8
  %666 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp813 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %666, i32 0, i32 2
  %667 = load i8*, i8** %precomp813, align 8
  %668 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8814 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %668, i32 0, i32 25
  %669 = load i32, i32* %utf8814, align 8
  %tobool815 = icmp ne i32 %669, 0
  %670 = zext i1 %tobool815 to i64
  %cond816 = select i1 %tobool815, i32 1, i32 0
  %tobool817 = icmp ne i32 %cond816, 0
  %671 = zext i1 %tobool817 to i64
  %cond818 = select i1 %tobool817, i32 1, i32 0
  %672 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end819 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %672, i32 0, i32 7
  %673 = load i8*, i8** %end819, align 8
  %674 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp820 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %674, i32 0, i32 2
  %675 = load i8*, i8** %precomp820, align 8
  %sub.ptr.lhs.cast821 = ptrtoint i8* %673 to i64
  %sub.ptr.rhs.cast822 = ptrtoint i8* %675 to i64
  %sub.ptr.sub823 = sub i64 %sub.ptr.lhs.cast821, %sub.ptr.rhs.cast822
  %676 = load i64, i64* %offset793, align 8
  %sub824 = sub nsw i64 %sub.ptr.sub823, %676
  %677 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp825 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %677, i32 0, i32 2
  %678 = load i8*, i8** %precomp825, align 8
  %679 = load i64, i64* %offset793, align 8
  %add.ptr826 = getelementptr inbounds i8, i8* %678, i64 %679
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.398, i64 0, i64 0), i32 %cond812, i64 %665, i8* %667, i32 %cond818, i64 %sub824, i8* %add.ptr826)
  br label %do.end827

do.end827:                                        ; preds = %cond.end802
  br label %do.end828

do.end828:                                        ; preds = %do.end827
  br label %handle_operand

handle_operand:                                   ; preds = %if.end900, %do.end828, %if.then606, %if.end521, %if.end472, %if.end333
  %680 = load %struct.av*, %struct.av** %stack, align 8
  %call829 = call i64 @S_av_top_index(%struct.av* %680)
  %conv830 = trunc i64 %call829 to i32
  store i32 %conv830, i32* %top_index, align 4
  %681 = load i32, i32* %top_index, align 4
  %conv831 = sext i32 %681 to i64
  %682 = load i64, i64* %fence, align 8
  %sub832 = sub nsw i64 %conv831, %682
  %cmp833 = icmp sge i64 %sub832, 0
  br i1 %cmp833, label %if.then835, label %if.end975

if.then835:                                       ; preds = %handle_operand
  %683 = load %struct.av*, %struct.av** %stack, align 8
  %684 = load i32, i32* %top_index, align 4
  %conv836 = sext i32 %684 to i64
  %call837 = call %struct.sv** @Perl_av_fetch(%struct.av* %683, i64 %conv836, i32 0)
  store %struct.sv** %call837, %struct.sv*** %top_ptr, align 8
  %685 = load %struct.sv**, %struct.sv*** %top_ptr, align 8
  %686 = load %struct.sv*, %struct.sv** %685, align 8
  %sv_flags838 = getelementptr inbounds %struct.sv, %struct.sv* %686, i32 0, i32 2
  %687 = load i32, i32* %sv_flags838, align 4
  %and839 = and i32 %687, 256
  %tobool840 = icmp ne i32 %and839, 0
  br i1 %tobool840, label %if.then841, label %if.else904

if.then841:                                       ; preds = %if.then835
  %688 = load %struct.sv**, %struct.sv*** %top_ptr, align 8
  %689 = load %struct.sv*, %struct.sv** %688, align 8
  %sv_flags842 = getelementptr inbounds %struct.sv, %struct.sv* %689, i32 0, i32 2
  %690 = load i32, i32* %sv_flags842, align 4
  %and843 = and i32 %690, -2145386240
  %cmp844 = icmp eq i32 %and843, -2147483392
  br i1 %cmp844, label %cond.true846, label %cond.false850

cond.true846:                                     ; preds = %if.then841
  %691 = load %struct.sv**, %struct.sv*** %top_ptr, align 8
  %692 = load %struct.sv*, %struct.sv** %691, align 8
  %sv_any847 = getelementptr inbounds %struct.sv, %struct.sv* %692, i32 0, i32 0
  %693 = load i8*, i8** %sv_any847, align 8
  %694 = bitcast i8* %693 to %struct.xpvuv*
  %xuv_u848 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %694, i32 0, i32 4
  %xivu_uv849 = bitcast %union._xivu* %xuv_u848 to i64*
  %695 = load i64, i64* %xivu_uv849, align 8
  br label %cond.end852

cond.false850:                                    ; preds = %if.then841
  %696 = load %struct.sv**, %struct.sv*** %top_ptr, align 8
  %697 = load %struct.sv*, %struct.sv** %696, align 8
  %call851 = call i64 @Perl_sv_2uv_flags(%struct.sv* %697, i32 2)
  br label %cond.end852

cond.end852:                                      ; preds = %cond.false850, %cond.true846
  %cond853 = phi i64 [ %695, %cond.true846 ], [ %call851, %cond.false850 ]
  %conv854 = trunc i64 %cond853 to i8
  store i8 %conv854, i8* %curchar, align 1
  %698 = load i8, i8* %curchar, align 1
  %conv855 = zext i8 %698 to i32
  %cmp856 = icmp ne i32 %conv855, 33
  br i1 %cmp856, label %if.then858, label %if.end900

if.then858:                                       ; preds = %cond.end852
  %699 = load %struct.sv*, %struct.sv** %current196, align 8
  %700 = bitcast %struct.sv* %699 to i8*
  %701 = bitcast i8* %700 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %701)
  br label %do.body859

do.body859:                                       ; preds = %if.then858
  %702 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit860 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %702, i32 0, i32 12
  %703 = load %struct.regnode*, %struct.regnode** %emit860, align 8
  %704 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy861 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %704, i32 0, i32 13
  %705 = bitcast %struct.regnode_ssc* %emit_dummy861 to %struct.regnode*
  %cmp862 = icmp eq %struct.regnode* %703, %705
  br i1 %cmp862, label %if.end866, label %if.then864

if.then864:                                       ; preds = %do.body859
  %706 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv865 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %706, i32 0, i32 3
  %707 = load %struct.p5rx*, %struct.p5rx** %rx_sv865, align 8
  %708 = bitcast %struct.p5rx* %707 to i8*
  %709 = bitcast i8* %708 to %struct.sv*
  %710 = bitcast %struct.sv* %709 to i8*
  call void @Perl_save_pushptr(i8* %710, i32 11)
  br label %if.end866

if.end866:                                        ; preds = %if.then864, %do.body859
  br label %do.body867

do.body867:                                       ; preds = %if.end866
  %711 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse869 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %711, i32 0, i32 8
  %712 = load i8*, i8** %parse869, align 8
  %713 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp870 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %713, i32 0, i32 2
  %714 = load i8*, i8** %precomp870, align 8
  %sub.ptr.lhs.cast871 = ptrtoint i8* %712 to i64
  %sub.ptr.rhs.cast872 = ptrtoint i8* %714 to i64
  %sub.ptr.sub873 = sub i64 %sub.ptr.lhs.cast871, %sub.ptr.rhs.cast872
  store i64 %sub.ptr.sub873, i64* %offset868, align 8
  %715 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8874 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %715, i32 0, i32 25
  %716 = load i32, i32* %utf8874, align 8
  %tobool875 = icmp ne i32 %716, 0
  %717 = zext i1 %tobool875 to i64
  %cond876 = select i1 %tobool875, i32 1, i32 0
  %tobool877 = icmp ne i32 %cond876, 0
  %718 = load i8, i8* %curchar, align 1
  %conv878 = zext i8 %718 to i32
  %719 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8879 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %719, i32 0, i32 25
  %720 = load i32, i32* %utf8879, align 8
  %tobool880 = icmp ne i32 %720, 0
  %721 = zext i1 %tobool880 to i64
  %cond881 = select i1 %tobool880, i32 1, i32 0
  %tobool882 = icmp ne i32 %cond881, 0
  %722 = zext i1 %tobool882 to i64
  %cond883 = select i1 %tobool882, i32 1, i32 0
  %723 = load i64, i64* %offset868, align 8
  %724 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp884 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %724, i32 0, i32 2
  %725 = load i8*, i8** %precomp884, align 8
  %726 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8885 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %726, i32 0, i32 25
  %727 = load i32, i32* %utf8885, align 8
  %tobool886 = icmp ne i32 %727, 0
  %728 = zext i1 %tobool886 to i64
  %cond887 = select i1 %tobool886, i32 1, i32 0
  %tobool888 = icmp ne i32 %cond887, 0
  %729 = zext i1 %tobool888 to i64
  %cond889 = select i1 %tobool888, i32 1, i32 0
  %730 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end890 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %730, i32 0, i32 7
  %731 = load i8*, i8** %end890, align 8
  %732 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp891 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %732, i32 0, i32 2
  %733 = load i8*, i8** %precomp891, align 8
  %sub.ptr.lhs.cast892 = ptrtoint i8* %731 to i64
  %sub.ptr.rhs.cast893 = ptrtoint i8* %733 to i64
  %sub.ptr.sub894 = sub i64 %sub.ptr.lhs.cast892, %sub.ptr.rhs.cast893
  %734 = load i64, i64* %offset868, align 8
  %sub895 = sub nsw i64 %sub.ptr.sub894, %734
  %735 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp896 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %735, i32 0, i32 2
  %736 = load i8*, i8** %precomp896, align 8
  %737 = load i64, i64* %offset868, align 8
  %add.ptr897 = getelementptr inbounds i8, i8* %736, i64 %737
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool877, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.397, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %conv878, i32 %cond883, i64 %723, i8* %725, i32 %cond889, i64 %sub895, i8* %add.ptr897)
  br label %do.end898

do.end898:                                        ; preds = %do.body867
  br label %do.end899

do.end899:                                        ; preds = %do.end898
  br label %if.end900

if.end900:                                        ; preds = %do.end899, %cond.end852
  %738 = load %struct.sv*, %struct.sv** %current196, align 8
  call void @Perl__invlist_invert(%struct.sv* %738)
  %739 = load %struct.av*, %struct.av** %stack, align 8
  %call901 = call %struct.sv* @Perl_av_pop(%struct.av* %739)
  store %struct.sv* %call901, %struct.sv** %only_to_avoid_leaks, align 8
  %740 = load %struct.sv*, %struct.sv** %only_to_avoid_leaks, align 8
  %741 = bitcast %struct.sv* %740 to i8*
  %742 = bitcast i8* %741 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %742)
  %743 = load %struct.av*, %struct.av** %stack, align 8
  %call902 = call i64 @S_av_top_index(%struct.av* %743)
  %conv903 = trunc i64 %call902 to i32
  store i32 %conv903, i32* %top_index, align 4
  br label %handle_operand

if.else904:                                       ; preds = %if.then835
  %744 = load i32, i32* %top_index, align 4
  %conv905 = sext i32 %744 to i64
  %745 = load i64, i64* %fence, align 8
  %sub906 = sub nsw i64 %conv905, %745
  %cmp907 = icmp eq i64 %sub906, 0
  br i1 %cmp907, label %land.lhs.true909, label %lor.lhs.false913

land.lhs.true909:                                 ; preds = %if.else904
  %746 = load i8, i8* %curchar, align 1
  %conv910 = zext i8 %746 to i32
  %cmp911 = icmp ne i32 %conv910, 41
  br i1 %cmp911, label %if.then927, label %lor.lhs.false913

lor.lhs.false913:                                 ; preds = %land.lhs.true909, %if.else904
  %747 = load i32, i32* %top_index, align 4
  %conv914 = sext i32 %747 to i64
  %748 = load i64, i64* %fence, align 8
  %sub915 = sub nsw i64 %conv914, %748
  %cmp916 = icmp sgt i64 %sub915, 0
  br i1 %cmp916, label %land.lhs.true918, label %if.end973

land.lhs.true918:                                 ; preds = %lor.lhs.false913
  %749 = load %struct.av*, %struct.av** %stack, align 8
  %750 = load i32, i32* %top_index, align 4
  %sub919 = sub nsw i32 %750, 1
  %conv920 = sext i32 %sub919 to i64
  %call921 = call %struct.sv** @Perl_av_fetch(%struct.av* %749, i64 %conv920, i32 0)
  store %struct.sv** %call921, %struct.sv*** %stacked_ptr, align 8
  %tobool922 = icmp ne %struct.sv** %call921, null
  br i1 %tobool922, label %lor.lhs.false923, label %if.then927

lor.lhs.false923:                                 ; preds = %land.lhs.true918
  %751 = load %struct.sv**, %struct.sv*** %stacked_ptr, align 8
  %752 = load %struct.sv*, %struct.sv** %751, align 8
  %sv_flags924 = getelementptr inbounds %struct.sv, %struct.sv* %752, i32 0, i32 2
  %753 = load i32, i32* %sv_flags924, align 4
  %and925 = and i32 %753, 256
  %tobool926 = icmp ne i32 %and925, 0
  br i1 %tobool926, label %if.end973, label %if.then927

if.then927:                                       ; preds = %lor.lhs.false923, %land.lhs.true918, %land.lhs.true909
  %754 = load %struct.sv*, %struct.sv** %current196, align 8
  %755 = bitcast %struct.sv* %754 to i8*
  %756 = bitcast i8* %755 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %756)
  br label %do.body928

do.body928:                                       ; preds = %if.then927
  %757 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit929 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %757, i32 0, i32 12
  %758 = load %struct.regnode*, %struct.regnode** %emit929, align 8
  %759 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy930 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %759, i32 0, i32 13
  %760 = bitcast %struct.regnode_ssc* %emit_dummy930 to %struct.regnode*
  %cmp931 = icmp eq %struct.regnode* %758, %760
  br i1 %cmp931, label %if.end935, label %if.then933

if.then933:                                       ; preds = %do.body928
  %761 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv934 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %761, i32 0, i32 3
  %762 = load %struct.p5rx*, %struct.p5rx** %rx_sv934, align 8
  %763 = bitcast %struct.p5rx* %762 to i8*
  %764 = bitcast i8* %763 to %struct.sv*
  %765 = bitcast %struct.sv* %764 to i8*
  call void @Perl_save_pushptr(i8* %765, i32 11)
  br label %if.end935

if.end935:                                        ; preds = %if.then933, %do.body928
  br label %do.body936

do.body936:                                       ; preds = %if.end935
  %766 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse938 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %766, i32 0, i32 8
  %767 = load i8*, i8** %parse938, align 8
  %768 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end939 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %768, i32 0, i32 7
  %769 = load i8*, i8** %end939, align 8
  %cmp940 = icmp ugt i8* %767, %769
  br i1 %cmp940, label %cond.true942, label %cond.false944

cond.true942:                                     ; preds = %do.body936
  %770 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end943 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %770, i32 0, i32 7
  %771 = load i8*, i8** %end943, align 8
  br label %cond.end946

cond.false944:                                    ; preds = %do.body936
  %772 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse945 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %772, i32 0, i32 8
  %773 = load i8*, i8** %parse945, align 8
  br label %cond.end946

cond.end946:                                      ; preds = %cond.false944, %cond.true942
  %cond947 = phi i8* [ %771, %cond.true942 ], [ %773, %cond.false944 ]
  %774 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp948 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %774, i32 0, i32 2
  %775 = load i8*, i8** %precomp948, align 8
  %sub.ptr.lhs.cast949 = ptrtoint i8* %cond947 to i64
  %sub.ptr.rhs.cast950 = ptrtoint i8* %775 to i64
  %sub.ptr.sub951 = sub i64 %sub.ptr.lhs.cast949, %sub.ptr.rhs.cast950
  store i64 %sub.ptr.sub951, i64* %offset937, align 8
  %776 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8952 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %776, i32 0, i32 25
  %777 = load i32, i32* %utf8952, align 8
  %tobool953 = icmp ne i32 %777, 0
  %778 = zext i1 %tobool953 to i64
  %cond954 = select i1 %tobool953, i32 1, i32 0
  %tobool955 = icmp ne i32 %cond954, 0
  %779 = zext i1 %tobool955 to i64
  %cond956 = select i1 %tobool955, i32 1, i32 0
  %780 = load i64, i64* %offset937, align 8
  %781 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp957 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %781, i32 0, i32 2
  %782 = load i8*, i8** %precomp957, align 8
  %783 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8958 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %783, i32 0, i32 25
  %784 = load i32, i32* %utf8958, align 8
  %tobool959 = icmp ne i32 %784, 0
  %785 = zext i1 %tobool959 to i64
  %cond960 = select i1 %tobool959, i32 1, i32 0
  %tobool961 = icmp ne i32 %cond960, 0
  %786 = zext i1 %tobool961 to i64
  %cond962 = select i1 %tobool961, i32 1, i32 0
  %787 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end963 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %787, i32 0, i32 7
  %788 = load i8*, i8** %end963, align 8
  %789 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp964 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %789, i32 0, i32 2
  %790 = load i8*, i8** %precomp964, align 8
  %sub.ptr.lhs.cast965 = ptrtoint i8* %788 to i64
  %sub.ptr.rhs.cast966 = ptrtoint i8* %790 to i64
  %sub.ptr.sub967 = sub i64 %sub.ptr.lhs.cast965, %sub.ptr.rhs.cast966
  %791 = load i64, i64* %offset937, align 8
  %sub968 = sub nsw i64 %sub.ptr.sub967, %791
  %792 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp969 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %792, i32 0, i32 2
  %793 = load i8*, i8** %precomp969, align 8
  %794 = load i64, i64* %offset937, align 8
  %add.ptr970 = getelementptr inbounds i8, i8* %793, i64 %794
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.399, i64 0, i64 0), i32 %cond956, i64 %780, i8* %782, i32 %cond962, i64 %sub968, i8* %add.ptr970)
  br label %do.end971

do.end971:                                        ; preds = %cond.end946
  br label %do.end972

do.end972:                                        ; preds = %do.end971
  br label %if.end973

if.end973:                                        ; preds = %do.end972, %lor.lhs.false923, %lor.lhs.false913
  br label %if.end974

if.end974:                                        ; preds = %if.end973
  br label %if.end975

if.end975:                                        ; preds = %if.end974, %handle_operand
  %795 = load %struct.av*, %struct.av** %stack, align 8
  %796 = load %struct.sv*, %struct.sv** %current196, align 8
  call void @Perl_av_push(%struct.av* %795, %struct.sv* %796)
  br label %sw.epilog976

sw.epilog976:                                     ; preds = %if.end975, %if.end767, %if.then715, %if.then634, %if.end436
  %797 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8977 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %797, i32 0, i32 25
  %798 = load i32, i32* %utf8977, align 8
  %tobool978 = icmp ne i32 %798, 0
  br i1 %tobool978, label %cond.true979, label %cond.false980

cond.true979:                                     ; preds = %sw.epilog976
  br i1 true, label %cond.true981, label %cond.false986

cond.false980:                                    ; preds = %sw.epilog976
  br i1 false, label %cond.true981, label %cond.false986

cond.true981:                                     ; preds = %cond.false980, %cond.true979
  %799 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse982 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %799, i32 0, i32 8
  %800 = load i8*, i8** %parse982, align 8
  %801 = load i8, i8* %800, align 1
  %idxprom983 = zext i8 %801 to i64
  %arrayidx984 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom983
  %802 = load i8, i8* %arrayidx984, align 1
  %conv985 = zext i8 %802 to i32
  br label %cond.end987

cond.false986:                                    ; preds = %cond.false980, %cond.true979
  br label %cond.end987

cond.end987:                                      ; preds = %cond.false986, %cond.true981
  %cond988 = phi i32 [ %conv985, %cond.true981 ], [ 1, %cond.false986 ]
  %803 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse989 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %803, i32 0, i32 8
  %804 = load i8*, i8** %parse989, align 8
  %idx.ext990 = sext i32 %cond988 to i64
  %add.ptr991 = getelementptr inbounds i8, i8* %804, i64 %idx.ext990
  store i8* %add.ptr991, i8** %parse989, align 8
  br label %while.cond190

while.end992:                                     ; preds = %while.cond190
  br label %done

done:                                             ; preds = %while.end992, %if.then652, %if.end526
  %805 = load %struct.av*, %struct.av** %fence_stack, align 8
  %call993 = call i64 @S_av_top_index(%struct.av* %805)
  %cmp994 = icmp sge i64 %call993, 0
  br i1 %cmp994, label %if.then996, label %if.end1042

if.then996:                                       ; preds = %done
  br label %do.body997

do.body997:                                       ; preds = %if.then996
  %806 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit998 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %806, i32 0, i32 12
  %807 = load %struct.regnode*, %struct.regnode** %emit998, align 8
  %808 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy999 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %808, i32 0, i32 13
  %809 = bitcast %struct.regnode_ssc* %emit_dummy999 to %struct.regnode*
  %cmp1000 = icmp eq %struct.regnode* %807, %809
  br i1 %cmp1000, label %if.end1004, label %if.then1002

if.then1002:                                      ; preds = %do.body997
  %810 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1003 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %810, i32 0, i32 3
  %811 = load %struct.p5rx*, %struct.p5rx** %rx_sv1003, align 8
  %812 = bitcast %struct.p5rx* %811 to i8*
  %813 = bitcast i8* %812 to %struct.sv*
  %814 = bitcast %struct.sv* %813 to i8*
  call void @Perl_save_pushptr(i8* %814, i32 11)
  br label %if.end1004

if.end1004:                                       ; preds = %if.then1002, %do.body997
  br label %do.body1005

do.body1005:                                      ; preds = %if.end1004
  %815 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1007 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %815, i32 0, i32 8
  %816 = load i8*, i8** %parse1007, align 8
  %817 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1008 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %817, i32 0, i32 7
  %818 = load i8*, i8** %end1008, align 8
  %cmp1009 = icmp ugt i8* %816, %818
  br i1 %cmp1009, label %cond.true1011, label %cond.false1013

cond.true1011:                                    ; preds = %do.body1005
  %819 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1012 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %819, i32 0, i32 7
  %820 = load i8*, i8** %end1012, align 8
  br label %cond.end1015

cond.false1013:                                   ; preds = %do.body1005
  %821 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1014 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %821, i32 0, i32 8
  %822 = load i8*, i8** %parse1014, align 8
  br label %cond.end1015

cond.end1015:                                     ; preds = %cond.false1013, %cond.true1011
  %cond1016 = phi i8* [ %820, %cond.true1011 ], [ %822, %cond.false1013 ]
  %823 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1017 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %823, i32 0, i32 2
  %824 = load i8*, i8** %precomp1017, align 8
  %sub.ptr.lhs.cast1018 = ptrtoint i8* %cond1016 to i64
  %sub.ptr.rhs.cast1019 = ptrtoint i8* %824 to i64
  %sub.ptr.sub1020 = sub i64 %sub.ptr.lhs.cast1018, %sub.ptr.rhs.cast1019
  store i64 %sub.ptr.sub1020, i64* %offset1006, align 8
  %825 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81021 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %825, i32 0, i32 25
  %826 = load i32, i32* %utf81021, align 8
  %tobool1022 = icmp ne i32 %826, 0
  %827 = zext i1 %tobool1022 to i64
  %cond1023 = select i1 %tobool1022, i32 1, i32 0
  %tobool1024 = icmp ne i32 %cond1023, 0
  %828 = zext i1 %tobool1024 to i64
  %cond1025 = select i1 %tobool1024, i32 1, i32 0
  %829 = load i64, i64* %offset1006, align 8
  %830 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1026 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %830, i32 0, i32 2
  %831 = load i8*, i8** %precomp1026, align 8
  %832 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81027 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %832, i32 0, i32 25
  %833 = load i32, i32* %utf81027, align 8
  %tobool1028 = icmp ne i32 %833, 0
  %834 = zext i1 %tobool1028 to i64
  %cond1029 = select i1 %tobool1028, i32 1, i32 0
  %tobool1030 = icmp ne i32 %cond1029, 0
  %835 = zext i1 %tobool1030 to i64
  %cond1031 = select i1 %tobool1030, i32 1, i32 0
  %836 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1032 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %836, i32 0, i32 7
  %837 = load i8*, i8** %end1032, align 8
  %838 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1033 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %838, i32 0, i32 2
  %839 = load i8*, i8** %precomp1033, align 8
  %sub.ptr.lhs.cast1034 = ptrtoint i8* %837 to i64
  %sub.ptr.rhs.cast1035 = ptrtoint i8* %839 to i64
  %sub.ptr.sub1036 = sub i64 %sub.ptr.lhs.cast1034, %sub.ptr.rhs.cast1035
  %840 = load i64, i64* %offset1006, align 8
  %sub1037 = sub nsw i64 %sub.ptr.sub1036, %840
  %841 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1038 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %841, i32 0, i32 2
  %842 = load i8*, i8** %precomp1038, align 8
  %843 = load i64, i64* %offset1006, align 8
  %add.ptr1039 = getelementptr inbounds i8, i8* %842, i64 %843
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.265, i64 0, i64 0), i32 %cond1025, i64 %829, i8* %831, i32 %cond1031, i64 %sub1037, i8* %add.ptr1039)
  br label %do.end1040

do.end1040:                                       ; preds = %cond.end1015
  br label %do.end1041

do.end1041:                                       ; preds = %do.end1040
  br label %if.end1042

if.end1042:                                       ; preds = %do.end1041, %done
  %844 = load %struct.av*, %struct.av** %stack, align 8
  %call1043 = call i64 @S_av_top_index(%struct.av* %844)
  %cmp1044 = icmp slt i64 %call1043, 0
  br i1 %cmp1044, label %if.then1063, label %lor.lhs.false1046

lor.lhs.false1046:                                ; preds = %if.end1042
  %845 = load %struct.av*, %struct.av** %stack, align 8
  %call1047 = call %struct.sv* @Perl_av_pop(%struct.av* %845)
  store %struct.sv* %call1047, %struct.sv** %final, align 8
  %cmp1048 = icmp eq %struct.sv* %call1047, null
  br i1 %cmp1048, label %if.then1063, label %lor.lhs.false1050

lor.lhs.false1050:                                ; preds = %lor.lhs.false1046
  %846 = load %struct.sv*, %struct.sv** %final, align 8
  %sv_flags1051 = getelementptr inbounds %struct.sv, %struct.sv* %846, i32 0, i32 2
  %847 = load i32, i32* %sv_flags1051, align 4
  %and1052 = and i32 %847, 256
  %tobool1053 = icmp ne i32 %and1052, 0
  br i1 %tobool1053, label %if.then1063, label %lor.lhs.false1054

lor.lhs.false1054:                                ; preds = %lor.lhs.false1050
  %848 = load %struct.sv*, %struct.sv** %final, align 8
  %sv_flags1055 = getelementptr inbounds %struct.sv, %struct.sv* %848, i32 0, i32 2
  %849 = load i32, i32* %sv_flags1055, align 4
  %and1056 = and i32 %849, 255
  %cmp1057 = icmp ne i32 %and1056, 4
  br i1 %cmp1057, label %if.then1063, label %lor.lhs.false1059

lor.lhs.false1059:                                ; preds = %lor.lhs.false1054
  %850 = load %struct.av*, %struct.av** %stack, align 8
  %call1060 = call i64 @S_av_top_index(%struct.av* %850)
  %cmp1061 = icmp sge i64 %call1060, 0
  br i1 %cmp1061, label %if.then1063, label %if.end1109

if.then1063:                                      ; preds = %lor.lhs.false1059, %lor.lhs.false1054, %lor.lhs.false1050, %lor.lhs.false1046, %if.end1042
  br label %bad_syntax

bad_syntax:                                       ; preds = %if.then1063, %if.then730, %if.then724, %if.end607
  %851 = load %struct.sv*, %struct.sv** %final, align 8
  %852 = bitcast %struct.sv* %851 to i8*
  %853 = bitcast i8* %852 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %853)
  br label %do.body1064

do.body1064:                                      ; preds = %bad_syntax
  %854 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1065 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %854, i32 0, i32 12
  %855 = load %struct.regnode*, %struct.regnode** %emit1065, align 8
  %856 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1066 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %856, i32 0, i32 13
  %857 = bitcast %struct.regnode_ssc* %emit_dummy1066 to %struct.regnode*
  %cmp1067 = icmp eq %struct.regnode* %855, %857
  br i1 %cmp1067, label %if.end1071, label %if.then1069

if.then1069:                                      ; preds = %do.body1064
  %858 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1070 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %858, i32 0, i32 3
  %859 = load %struct.p5rx*, %struct.p5rx** %rx_sv1070, align 8
  %860 = bitcast %struct.p5rx* %859 to i8*
  %861 = bitcast i8* %860 to %struct.sv*
  %862 = bitcast %struct.sv* %861 to i8*
  call void @Perl_save_pushptr(i8* %862, i32 11)
  br label %if.end1071

if.end1071:                                       ; preds = %if.then1069, %do.body1064
  br label %do.body1072

do.body1072:                                      ; preds = %if.end1071
  %863 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1074 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %863, i32 0, i32 8
  %864 = load i8*, i8** %parse1074, align 8
  %865 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1075 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %865, i32 0, i32 7
  %866 = load i8*, i8** %end1075, align 8
  %cmp1076 = icmp ugt i8* %864, %866
  br i1 %cmp1076, label %cond.true1078, label %cond.false1080

cond.true1078:                                    ; preds = %do.body1072
  %867 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1079 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %867, i32 0, i32 7
  %868 = load i8*, i8** %end1079, align 8
  br label %cond.end1082

cond.false1080:                                   ; preds = %do.body1072
  %869 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1081 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %869, i32 0, i32 8
  %870 = load i8*, i8** %parse1081, align 8
  br label %cond.end1082

cond.end1082:                                     ; preds = %cond.false1080, %cond.true1078
  %cond1083 = phi i8* [ %868, %cond.true1078 ], [ %870, %cond.false1080 ]
  %871 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1084 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %871, i32 0, i32 2
  %872 = load i8*, i8** %precomp1084, align 8
  %sub.ptr.lhs.cast1085 = ptrtoint i8* %cond1083 to i64
  %sub.ptr.rhs.cast1086 = ptrtoint i8* %872 to i64
  %sub.ptr.sub1087 = sub i64 %sub.ptr.lhs.cast1085, %sub.ptr.rhs.cast1086
  store i64 %sub.ptr.sub1087, i64* %offset1073, align 8
  %873 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81088 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %873, i32 0, i32 25
  %874 = load i32, i32* %utf81088, align 8
  %tobool1089 = icmp ne i32 %874, 0
  %875 = zext i1 %tobool1089 to i64
  %cond1090 = select i1 %tobool1089, i32 1, i32 0
  %tobool1091 = icmp ne i32 %cond1090, 0
  %876 = zext i1 %tobool1091 to i64
  %cond1092 = select i1 %tobool1091, i32 1, i32 0
  %877 = load i64, i64* %offset1073, align 8
  %878 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1093 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %878, i32 0, i32 2
  %879 = load i8*, i8** %precomp1093, align 8
  %880 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81094 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %880, i32 0, i32 25
  %881 = load i32, i32* %utf81094, align 8
  %tobool1095 = icmp ne i32 %881, 0
  %882 = zext i1 %tobool1095 to i64
  %cond1096 = select i1 %tobool1095, i32 1, i32 0
  %tobool1097 = icmp ne i32 %cond1096, 0
  %883 = zext i1 %tobool1097 to i64
  %cond1098 = select i1 %tobool1097, i32 1, i32 0
  %884 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1099 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %884, i32 0, i32 7
  %885 = load i8*, i8** %end1099, align 8
  %886 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1100 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %886, i32 0, i32 2
  %887 = load i8*, i8** %precomp1100, align 8
  %sub.ptr.lhs.cast1101 = ptrtoint i8* %885 to i64
  %sub.ptr.rhs.cast1102 = ptrtoint i8* %887 to i64
  %sub.ptr.sub1103 = sub i64 %sub.ptr.lhs.cast1101, %sub.ptr.rhs.cast1102
  %888 = load i64, i64* %offset1073, align 8
  %sub1104 = sub nsw i64 %sub.ptr.sub1103, %888
  %889 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1105 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %889, i32 0, i32 2
  %890 = load i8*, i8** %precomp1105, align 8
  %891 = load i64, i64* %offset1073, align 8
  %add.ptr1106 = getelementptr inbounds i8, i8* %890, i64 %891
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.400, i64 0, i64 0), i32 %cond1092, i64 %877, i8* %879, i32 %cond1098, i64 %sub1104, i8* %add.ptr1106)
  br label %do.end1107

do.end1107:                                       ; preds = %cond.end1082
  br label %do.end1108

do.end1108:                                       ; preds = %do.end1107
  br label %if.end1109

if.end1109:                                       ; preds = %do.end1108, %lor.lhs.false1059
  %892 = load %struct.sv**, %struct.sv*** %return_invlist.addr, align 8
  %tobool1110 = icmp ne %struct.sv** %892, null
  br i1 %tobool1110, label %if.then1111, label %if.end1112

if.then1111:                                      ; preds = %if.end1109
  %893 = load %struct.sv*, %struct.sv** %final, align 8
  %894 = load %struct.sv**, %struct.sv*** %return_invlist.addr, align 8
  store %struct.sv* %893, %struct.sv** %894, align 8
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end1112:                                       ; preds = %if.end1109
  %895 = load %struct.sv*, %struct.sv** %final, align 8
  call void @S_invlist_iterinit(%struct.sv* %895)
  %call1113 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i64 0)
  store %struct.sv* %call1113, %struct.sv** %result_string, align 8
  br label %while.cond1114

while.cond1114:                                   ; preds = %if.end1121, %if.end1112
  %896 = load %struct.sv*, %struct.sv** %final, align 8
  %call1115 = call zeroext i1 @S_invlist_iternext(%struct.sv* %896, i64* %start, i64* %end)
  br i1 %call1115, label %while.body1116, label %while.end1122

while.body1116:                                   ; preds = %while.cond1114
  %897 = load i64, i64* %start, align 8
  %898 = load i64, i64* %end, align 8
  %cmp1117 = icmp eq i64 %897, %898
  br i1 %cmp1117, label %if.then1119, label %if.else1120

if.then1119:                                      ; preds = %while.body1116
  %899 = load %struct.sv*, %struct.sv** %result_string, align 8
  %900 = load i64, i64* %start, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %899, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.332, i64 0, i64 0), i64 %900)
  br label %if.end1121

if.else1120:                                      ; preds = %while.body1116
  %901 = load %struct.sv*, %struct.sv** %result_string, align 8
  %902 = load i64, i64* %start, align 8
  %903 = load i64, i64* %end, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %901, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.401, i64 0, i64 0), i64 %902, i64 %903)
  br label %if.end1121

if.end1121:                                       ; preds = %if.else1120, %if.then1119
  br label %while.cond1114

while.end1122:                                    ; preds = %while.cond1114
  %904 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1123 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %904, i32 0, i32 8
  %905 = load i8*, i8** %parse1123, align 8
  store i8* %905, i8** %save_parse, align 8
  %906 = load %struct.sv*, %struct.sv** %result_string, align 8
  %sv_flags1124 = getelementptr inbounds %struct.sv, %struct.sv* %906, i32 0, i32 2
  %907 = load i32, i32* %sv_flags1124, align 4
  %and1125 = and i32 %907, 2098176
  %cmp1126 = icmp eq i32 %and1125, 1024
  br i1 %cmp1126, label %cond.true1128, label %cond.false1130

cond.true1128:                                    ; preds = %while.end1122
  %908 = load %struct.sv*, %struct.sv** %result_string, align 8
  %sv_any1129 = getelementptr inbounds %struct.sv, %struct.sv* %908, i32 0, i32 0
  %909 = load i8*, i8** %sv_any1129, align 8
  %910 = bitcast i8* %909 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %910, i32 0, i32 2
  %911 = load i64, i64* %xpv_cur, align 8
  store i64 %911, i64* %len, align 8
  %912 = load %struct.sv*, %struct.sv** %result_string, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %912, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %913 = load i8*, i8** %svu_pv, align 8
  br label %cond.end1132

cond.false1130:                                   ; preds = %while.end1122
  %914 = load %struct.sv*, %struct.sv** %result_string, align 8
  %call1131 = call i8* @Perl_sv_2pv_flags(%struct.sv* %914, i64* %len, i32 2)
  br label %cond.end1132

cond.end1132:                                     ; preds = %cond.false1130, %cond.true1128
  %cond1133 = phi i8* [ %913, %cond.true1128 ], [ %call1131, %cond.false1130 ]
  %915 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1134 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %915, i32 0, i32 8
  store i8* %cond1133, i8** %parse1134, align 8
  %916 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1135 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %916, i32 0, i32 7
  %917 = load i8*, i8** %end1135, align 8
  store i8* %917, i8** %save_end, align 8
  %918 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1136 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %918, i32 0, i32 8
  %919 = load i8*, i8** %parse1136, align 8
  %920 = load i64, i64* %len, align 8
  %add.ptr1137 = getelementptr inbounds i8, i8* %919, i64 %920
  %921 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1138 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %921, i32 0, i32 7
  store i8* %add.ptr1137, i8** %end1138, align 8
  %922 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1139 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %922, i32 0, i32 0
  %923 = load i32, i32* %flags1139, align 8
  %and1140 = and i32 %923, -5
  store i32 %and1140, i32* %flags1139, align 8
  %924 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %925 = load i32*, i32** %flagp.addr, align 8
  %926 = load i32, i32* %depth.addr, align 4
  %add1141 = add i32 %926, 1
  %call1142 = call %struct.regnode* @S_regclass(%struct.RExC_state_t* %924, i32* %925, i32 %add1141, i1 zeroext false, i1 zeroext false, i1 zeroext true, i1 zeroext false, %struct.sv** null)
  store %struct.regnode* %call1142, %struct.regnode** %node, align 8
  %927 = load %struct.regnode*, %struct.regnode** %node, align 8
  %tobool1143 = icmp ne %struct.regnode* %927, null
  br i1 %tobool1143, label %if.end1171, label %if.then1144

if.then1144:                                      ; preds = %cond.end1132
  br label %do.body1145

do.body1145:                                      ; preds = %if.then1144
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses1146, align 8
  %928 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1148 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %928, i32 0, i32 7
  %929 = load i8*, i8** %end1148, align 8
  %930 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1149 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %930, i32 0, i32 2
  %931 = load i8*, i8** %precomp1149, align 8
  %sub.ptr.lhs.cast1150 = ptrtoint i8* %929 to i64
  %sub.ptr.rhs.cast1151 = ptrtoint i8* %931 to i64
  %sub.ptr.sub1152 = sub i64 %sub.ptr.lhs.cast1150, %sub.ptr.rhs.cast1151
  store i64 %sub.ptr.sub1152, i64* %len1147, align 8
  %932 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1153 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %932, i32 0, i32 12
  %933 = load %struct.regnode*, %struct.regnode** %emit1153, align 8
  %934 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1154 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %934, i32 0, i32 13
  %935 = bitcast %struct.regnode_ssc* %emit_dummy1154 to %struct.regnode*
  %cmp1155 = icmp eq %struct.regnode* %933, %935
  br i1 %cmp1155, label %if.end1159, label %if.then1157

if.then1157:                                      ; preds = %do.body1145
  %936 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1158 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %936, i32 0, i32 3
  %937 = load %struct.p5rx*, %struct.p5rx** %rx_sv1158, align 8
  %938 = bitcast %struct.p5rx* %937 to i8*
  %939 = bitcast i8* %938 to %struct.sv*
  %940 = bitcast %struct.sv* %939 to i8*
  call void @Perl_save_pushptr(i8* %940, i32 11)
  br label %if.end1159

if.end1159:                                       ; preds = %if.then1157, %do.body1145
  %941 = load i64, i64* %len1147, align 8
  %cmp1160 = icmp sgt i64 %941, 127
  br i1 %cmp1160, label %if.then1162, label %if.end1163

if.then1162:                                      ; preds = %if.end1159
  store i64 117, i64* %len1147, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses1146, align 8
  br label %if.end1163

if.end1163:                                       ; preds = %if.then1162, %if.end1159
  %942 = load i32*, i32** %flagp.addr, align 8
  %943 = ptrtoint i32* %942 to i64
  %944 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81164 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %944, i32 0, i32 25
  %945 = load i32, i32* %utf81164, align 8
  %tobool1165 = icmp ne i32 %945, 0
  %946 = zext i1 %tobool1165 to i64
  %cond1166 = select i1 %tobool1165, i32 1, i32 0
  %tobool1167 = icmp ne i32 %cond1166, 0
  %947 = zext i1 %tobool1167 to i64
  %cond1168 = select i1 %tobool1167, i32 1, i32 0
  %948 = load i64, i64* %len1147, align 8
  %949 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1169 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %949, i32 0, i32 2
  %950 = load i8*, i8** %precomp1169, align 8
  %951 = load i8*, i8** %ellipses1146, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.390, i64 0, i64 0), i64 %943, i32 %cond1168, i64 %948, i8* %950, i8* %951)
  br label %do.end1170

do.end1170:                                       ; preds = %if.end1163
  br label %if.end1171

if.end1171:                                       ; preds = %do.end1170, %cond.end1132
  %952 = load i8, i8* %save_fold, align 1
  %tobool1172 = trunc i8 %952 to i1
  br i1 %tobool1172, label %if.then1173, label %if.end1175

if.then1173:                                      ; preds = %if.end1171
  %953 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1174 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %953, i32 0, i32 0
  %954 = load i32, i32* %flags1174, align 8
  %or = or i32 %954, 4
  store i32 %or, i32* %flags1174, align 8
  br label %if.end1175

if.end1175:                                       ; preds = %if.then1173, %if.end1171
  %955 = load i8*, i8** %save_parse, align 8
  %add.ptr1176 = getelementptr inbounds i8, i8* %955, i64 1
  %956 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1177 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %956, i32 0, i32 8
  store i8* %add.ptr1176, i8** %parse1177, align 8
  %957 = load i8*, i8** %save_end, align 8
  %958 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1178 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %958, i32 0, i32 7
  store i8* %957, i8** %end1178, align 8
  %959 = load %struct.sv*, %struct.sv** %final, align 8
  %960 = bitcast %struct.sv* %959 to i8*
  %961 = bitcast i8* %960 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %961)
  %962 = load %struct.sv*, %struct.sv** %result_string, align 8
  %963 = bitcast %struct.sv* %962 to i8*
  %964 = bitcast i8* %963 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %964)
  %965 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1179 = call i8* @S_nextchar(%struct.RExC_state_t* %965)
  %966 = load %struct.regnode*, %struct.regnode** %node, align 8
  store %struct.regnode* %966, %struct.regnode** %retval, align 8
  br label %return

return:                                           ; preds = %if.end1175, %if.then1111, %if.then118
  %967 = load %struct.regnode*, %struct.regnode** %retval, align 8
  ret %struct.regnode* %967
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_parse_lparen_question_flags(%struct.RExC_state_t* %pRExC_state) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %wastedflags = alloca i32, align 4
  %posflags = alloca i32, align 4
  %negflags = alloca i32, align 4
  %flagsp = alloca i32*, align 8
  %has_charset_modifier = alloca i8, align 1
  %cs = alloca i32, align 4
  %has_use_defaults = alloca i8, align 1
  %seqstart = alloca i8*, align 8
  %x_mod_count = alloca i32, align 4
  %offset = alloca i64, align 8
  %offset128 = alloca i64, align 8
  %offset172 = alloca i64, align 8
  %offset220 = alloca i64, align 8
  %wflagbit = alloca i32, align 4
  %offset273 = alloca i64, align 8
  %offset326 = alloca i64, align 8
  %offset371 = alloca i64, align 8
  %offset449 = alloca i64, align 8
  %offset506 = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i32 0, i32* %wastedflags, align 4
  store i32 0, i32* %posflags, align 4
  store i32 0, i32* %negflags, align 4
  store i32* %posflags, i32** %flagsp, align 8
  store i8 0, i8* %has_charset_modifier, align 1
  store i8 0, i8* %has_use_defaults, align 1
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 8
  %1 = load i8*, i8** %parse, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 -1
  store i8* %add.ptr, i8** %seqstart, align 8
  store i32 0, i32* %x_mod_count, align 4
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 8
  %3 = load i8*, i8** %parse1, align 8
  %4 = load i8, i8* %3, align 1
  %conv = zext i8 %4 to i32
  %cmp = icmp eq i32 %conv, 94
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse3 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 8
  %6 = load i8*, i8** %parse3, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %parse3, align 8
  store i8 1, i8* %has_use_defaults, align 1
  %7 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %7, i32 0, i32 0
  %8 = load i32, i32* %flags, align 8
  %and = and i32 %8, -944
  store i32 %and, i32* %flags, align 8
  %9 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags4 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %9, i32 0, i32 0
  %10 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %10, i32 0, i32 25
  %11 = load i32, i32* %utf8, align 8
  %tobool = icmp ne i32 %11, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  %12 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %uni_semantics = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %12, i32 0, i32 27
  %13 = load i32, i32* %uni_semantics, align 8
  %tobool5 = icmp ne i32 %13, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then
  %14 = phi i1 [ true, %if.then ], [ %tobool5, %lor.rhs ]
  %15 = zext i1 %14 to i64
  %cond = select i1 %14, i32 2, i32 0
  call void @set_regex_charset(i32* %flags4, i32 %cond)
  br label %if.end

if.end:                                           ; preds = %lor.end, %entry
  %16 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags6 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %16, i32 0, i32 0
  %17 = load i32, i32* %flags6, align 8
  %call = call i32 @get_regex_charset(i32 %17)
  store i32 %call, i32* %cs, align 4
  %18 = load i32, i32* %cs, align 4
  %cmp7 = icmp eq i32 %18, 0
  br i1 %cmp7, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %if.end
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf89 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %19, i32 0, i32 25
  %20 = load i32, i32* %utf89, align 8
  %tobool10 = icmp ne i32 %20, 0
  br i1 %tobool10, label %if.then13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %21 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %uni_semantics11 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %21, i32 0, i32 27
  %22 = load i32, i32* %uni_semantics11, align 8
  %tobool12 = icmp ne i32 %22, 0
  br i1 %tobool12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false, %land.lhs.true
  store i32 2, i32* %cs, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %lor.lhs.false, %if.end
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.end14
  %23 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse15 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %23, i32 0, i32 8
  %24 = load i8*, i8** %parse15, align 8
  %25 = load i8, i8* %24, align 1
  %tobool16 = icmp ne i8 %25, 0
  br i1 %tobool16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %26 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse17 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %26, i32 0, i32 8
  %27 = load i8*, i8** %parse17, align 8
  %28 = load i8, i8* %27, align 1
  %conv18 = sext i8 %28 to i32
  switch i32 %conv18, label %sw.default [
    i32 105, label %sw.bb
    i32 109, label %sw.bb19
    i32 115, label %sw.bb21
    i32 120, label %sw.bb23
    i32 110, label %sw.bb25
    i32 108, label %sw.bb27
    i32 117, label %sw.bb35
    i32 97, label %sw.bb44
    i32 100, label %sw.bb57
    i32 111, label %sw.bb254
    i32 103, label %sw.bb254
    i32 99, label %sw.bb312
    i32 112, label %sw.bb361
    i32 45, label %sw.bb402
    i32 58, label %sw.bb410
    i32 41, label %sw.bb410
  ]

sw.bb:                                            ; preds = %while.body
  %29 = load i32*, i32** %flagsp, align 8
  %30 = load i32, i32* %29, align 4
  %or = or i32 %30, 4
  store i32 %or, i32* %29, align 4
  br label %sw.epilog

sw.bb19:                                          ; preds = %while.body
  %31 = load i32*, i32** %flagsp, align 8
  %32 = load i32, i32* %31, align 4
  %or20 = or i32 %32, 1
  store i32 %or20, i32* %31, align 4
  br label %sw.epilog

sw.bb21:                                          ; preds = %while.body
  %33 = load i32*, i32** %flagsp, align 8
  %34 = load i32, i32* %33, align 4
  %or22 = or i32 %34, 2
  store i32 %or22, i32* %33, align 4
  br label %sw.epilog

sw.bb23:                                          ; preds = %while.body
  %35 = load i32*, i32** %flagsp, align 8
  %36 = load i32, i32* %35, align 4
  %or24 = or i32 %36, 8
  store i32 %or24, i32* %35, align 4
  %37 = load i32, i32* %x_mod_count, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %x_mod_count, align 4
  br label %sw.epilog

sw.bb25:                                          ; preds = %while.body
  %38 = load i32*, i32** %flagsp, align 8
  %39 = load i32, i32* %38, align 4
  %or26 = or i32 %39, 32
  store i32 %or26, i32* %38, align 4
  br label %sw.epilog

sw.bb27:                                          ; preds = %while.body
  %40 = load i8, i8* %has_charset_modifier, align 1
  %tobool28 = icmp ne i8 %40, 0
  br i1 %tobool28, label %if.then29, label %if.else

if.then29:                                        ; preds = %sw.bb27
  br label %excess_modifier

if.else:                                          ; preds = %sw.bb27
  %41 = load i32*, i32** %flagsp, align 8
  %cmp30 = icmp eq i32* %41, %negflags
  br i1 %cmp30, label %if.then32, label %if.end33

if.then32:                                        ; preds = %if.else
  br label %neg_modifier

if.end33:                                         ; preds = %if.else
  br label %if.end34

if.end34:                                         ; preds = %if.end33
  store i32 1, i32* %cs, align 4
  store i8 108, i8* %has_charset_modifier, align 1
  br label %sw.epilog

sw.bb35:                                          ; preds = %while.body
  %42 = load i8, i8* %has_charset_modifier, align 1
  %tobool36 = icmp ne i8 %42, 0
  br i1 %tobool36, label %if.then37, label %if.else38

if.then37:                                        ; preds = %sw.bb35
  br label %excess_modifier

if.else38:                                        ; preds = %sw.bb35
  %43 = load i32*, i32** %flagsp, align 8
  %cmp39 = icmp eq i32* %43, %negflags
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.else38
  br label %neg_modifier

if.end42:                                         ; preds = %if.else38
  br label %if.end43

if.end43:                                         ; preds = %if.end42
  store i32 2, i32* %cs, align 4
  store i8 117, i8* %has_charset_modifier, align 1
  br label %sw.epilog

sw.bb44:                                          ; preds = %while.body
  %44 = load i32*, i32** %flagsp, align 8
  %cmp45 = icmp eq i32* %44, %negflags
  br i1 %cmp45, label %if.then47, label %if.end48

if.then47:                                        ; preds = %sw.bb44
  br label %neg_modifier

if.end48:                                         ; preds = %sw.bb44
  %45 = load i8, i8* %has_charset_modifier, align 1
  %tobool49 = icmp ne i8 %45, 0
  br i1 %tobool49, label %if.then50, label %if.else55

if.then50:                                        ; preds = %if.end48
  %46 = load i32, i32* %cs, align 4
  %cmp51 = icmp ne i32 %46, 3
  br i1 %cmp51, label %if.then53, label %if.end54

if.then53:                                        ; preds = %if.then50
  br label %excess_modifier

if.end54:                                         ; preds = %if.then50
  store i32 4, i32* %cs, align 4
  br label %if.end56

if.else55:                                        ; preds = %if.end48
  store i32 3, i32* %cs, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.else55, %if.end54
  store i8 97, i8* %has_charset_modifier, align 1
  br label %sw.epilog

sw.bb57:                                          ; preds = %while.body
  %47 = load i8, i8* %has_use_defaults, align 1
  %tobool58 = trunc i8 %47 to i1
  br i1 %tobool58, label %if.then59, label %if.else60

if.then59:                                        ; preds = %sw.bb57
  br label %fail_modifiers

if.else60:                                        ; preds = %sw.bb57
  %48 = load i32*, i32** %flagsp, align 8
  %cmp61 = icmp eq i32* %48, %negflags
  br i1 %cmp61, label %if.then63, label %if.else64

if.then63:                                        ; preds = %if.else60
  br label %neg_modifier

if.else64:                                        ; preds = %if.else60
  %49 = load i8, i8* %has_charset_modifier, align 1
  %tobool65 = icmp ne i8 %49, 0
  br i1 %tobool65, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.else64
  br label %excess_modifier

if.end67:                                         ; preds = %if.else64
  br label %if.end68

if.end68:                                         ; preds = %if.end67
  br label %if.end69

if.end69:                                         ; preds = %if.end68
  %50 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf870 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %50, i32 0, i32 25
  %51 = load i32, i32* %utf870, align 8
  %tobool71 = icmp ne i32 %51, 0
  br i1 %tobool71, label %lor.end75, label %lor.rhs72

lor.rhs72:                                        ; preds = %if.end69
  %52 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %uni_semantics73 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %52, i32 0, i32 27
  %53 = load i32, i32* %uni_semantics73, align 8
  %tobool74 = icmp ne i32 %53, 0
  br label %lor.end75

lor.end75:                                        ; preds = %lor.rhs72, %if.end69
  %54 = phi i1 [ true, %if.end69 ], [ %tobool74, %lor.rhs72 ]
  %55 = zext i1 %54 to i64
  %cond76 = select i1 %54, i32 2, i32 0
  store i32 %cond76, i32* %cs, align 4
  store i8 100, i8* %has_charset_modifier, align 1
  br label %sw.epilog

excess_modifier:                                  ; preds = %if.then66, %if.then53, %if.then37, %if.then29
  %56 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse77 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %56, i32 0, i32 8
  %57 = load i8*, i8** %parse77, align 8
  %incdec.ptr78 = getelementptr inbounds i8, i8* %57, i32 1
  store i8* %incdec.ptr78, i8** %parse77, align 8
  %58 = load i8, i8* %has_charset_modifier, align 1
  %conv79 = sext i8 %58 to i32
  %cmp80 = icmp eq i32 %conv79, 97
  br i1 %cmp80, label %if.then82, label %if.else111

if.then82:                                        ; preds = %excess_modifier
  br label %do.body

do.body:                                          ; preds = %if.then82
  %59 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %59, i32 0, i32 12
  %60 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %61 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %61, i32 0, i32 13
  %62 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp83 = icmp eq %struct.regnode* %60, %62
  br i1 %cmp83, label %if.end86, label %if.then85

if.then85:                                        ; preds = %do.body
  %63 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %63, i32 0, i32 3
  %64 = load %struct.p5rx*, %struct.p5rx** %rx_sv, align 8
  %65 = bitcast %struct.p5rx* %64 to i8*
  %66 = bitcast i8* %65 to %struct.sv*
  %67 = bitcast %struct.sv* %66 to i8*
  call void @Perl_save_pushptr(i8* %67, i32 11)
  br label %if.end86

if.end86:                                         ; preds = %if.then85, %do.body
  br label %do.body87

do.body87:                                        ; preds = %if.end86
  %68 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse88 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %68, i32 0, i32 8
  %69 = load i8*, i8** %parse88, align 8
  %70 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %70, i32 0, i32 2
  %71 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %69 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %71 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %offset, align 8
  %72 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf889 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %72, i32 0, i32 25
  %73 = load i32, i32* %utf889, align 8
  %tobool90 = icmp ne i32 %73, 0
  %74 = zext i1 %tobool90 to i64
  %cond91 = select i1 %tobool90, i32 1, i32 0
  %tobool92 = icmp ne i32 %cond91, 0
  %75 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf893 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %75, i32 0, i32 25
  %76 = load i32, i32* %utf893, align 8
  %tobool94 = icmp ne i32 %76, 0
  %77 = zext i1 %tobool94 to i64
  %cond95 = select i1 %tobool94, i32 1, i32 0
  %tobool96 = icmp ne i32 %cond95, 0
  %78 = zext i1 %tobool96 to i64
  %cond97 = select i1 %tobool96, i32 1, i32 0
  %79 = load i64, i64* %offset, align 8
  %80 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp98 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %80, i32 0, i32 2
  %81 = load i8*, i8** %precomp98, align 8
  %82 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf899 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %82, i32 0, i32 25
  %83 = load i32, i32* %utf899, align 8
  %tobool100 = icmp ne i32 %83, 0
  %84 = zext i1 %tobool100 to i64
  %cond101 = select i1 %tobool100, i32 1, i32 0
  %tobool102 = icmp ne i32 %cond101, 0
  %85 = zext i1 %tobool102 to i64
  %cond103 = select i1 %tobool102, i32 1, i32 0
  %86 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %86, i32 0, i32 7
  %87 = load i8*, i8** %end, align 8
  %88 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp104 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %88, i32 0, i32 2
  %89 = load i8*, i8** %precomp104, align 8
  %sub.ptr.lhs.cast105 = ptrtoint i8* %87 to i64
  %sub.ptr.rhs.cast106 = ptrtoint i8* %89 to i64
  %sub.ptr.sub107 = sub i64 %sub.ptr.lhs.cast105, %sub.ptr.rhs.cast106
  %90 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %sub.ptr.sub107, %90
  %91 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp108 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %91, i32 0, i32 2
  %92 = load i8*, i8** %precomp108, align 8
  %93 = load i64, i64* %offset, align 8
  %add.ptr109 = getelementptr inbounds i8, i8* %92, i64 %93
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool92, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.402, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 97, i32 %cond97, i64 %79, i8* %81, i32 %cond103, i64 %sub, i8* %add.ptr109)
  br label %do.end

do.end:                                           ; preds = %do.body87
  br label %do.end110

do.end110:                                        ; preds = %do.end
  br label %if.end208

if.else111:                                       ; preds = %excess_modifier
  %94 = load i8, i8* %has_charset_modifier, align 1
  %conv112 = sext i8 %94 to i32
  %95 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse113 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %95, i32 0, i32 8
  %96 = load i8*, i8** %parse113, align 8
  %add.ptr114 = getelementptr inbounds i8, i8* %96, i64 -1
  %97 = load i8, i8* %add.ptr114, align 1
  %conv115 = sext i8 %97 to i32
  %cmp116 = icmp eq i32 %conv112, %conv115
  br i1 %cmp116, label %if.then118, label %if.else162

if.then118:                                       ; preds = %if.else111
  br label %do.body119

do.body119:                                       ; preds = %if.then118
  %98 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit120 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %98, i32 0, i32 12
  %99 = load %struct.regnode*, %struct.regnode** %emit120, align 8
  %100 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy121 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %100, i32 0, i32 13
  %101 = bitcast %struct.regnode_ssc* %emit_dummy121 to %struct.regnode*
  %cmp122 = icmp eq %struct.regnode* %99, %101
  br i1 %cmp122, label %if.end126, label %if.then124

if.then124:                                       ; preds = %do.body119
  %102 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv125 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %102, i32 0, i32 3
  %103 = load %struct.p5rx*, %struct.p5rx** %rx_sv125, align 8
  %104 = bitcast %struct.p5rx* %103 to i8*
  %105 = bitcast i8* %104 to %struct.sv*
  %106 = bitcast %struct.sv* %105 to i8*
  call void @Perl_save_pushptr(i8* %106, i32 11)
  br label %if.end126

if.end126:                                        ; preds = %if.then124, %do.body119
  br label %do.body127

do.body127:                                       ; preds = %if.end126
  %107 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse129 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %107, i32 0, i32 8
  %108 = load i8*, i8** %parse129, align 8
  %109 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp130 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %109, i32 0, i32 2
  %110 = load i8*, i8** %precomp130, align 8
  %sub.ptr.lhs.cast131 = ptrtoint i8* %108 to i64
  %sub.ptr.rhs.cast132 = ptrtoint i8* %110 to i64
  %sub.ptr.sub133 = sub i64 %sub.ptr.lhs.cast131, %sub.ptr.rhs.cast132
  store i64 %sub.ptr.sub133, i64* %offset128, align 8
  %111 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8134 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %111, i32 0, i32 25
  %112 = load i32, i32* %utf8134, align 8
  %tobool135 = icmp ne i32 %112, 0
  %113 = zext i1 %tobool135 to i64
  %cond136 = select i1 %tobool135, i32 1, i32 0
  %tobool137 = icmp ne i32 %cond136, 0
  %114 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse138 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %114, i32 0, i32 8
  %115 = load i8*, i8** %parse138, align 8
  %add.ptr139 = getelementptr inbounds i8, i8* %115, i64 -1
  %116 = load i8, i8* %add.ptr139, align 1
  %conv140 = sext i8 %116 to i32
  %117 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8141 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %117, i32 0, i32 25
  %118 = load i32, i32* %utf8141, align 8
  %tobool142 = icmp ne i32 %118, 0
  %119 = zext i1 %tobool142 to i64
  %cond143 = select i1 %tobool142, i32 1, i32 0
  %tobool144 = icmp ne i32 %cond143, 0
  %120 = zext i1 %tobool144 to i64
  %cond145 = select i1 %tobool144, i32 1, i32 0
  %121 = load i64, i64* %offset128, align 8
  %122 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp146 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %122, i32 0, i32 2
  %123 = load i8*, i8** %precomp146, align 8
  %124 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8147 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %124, i32 0, i32 25
  %125 = load i32, i32* %utf8147, align 8
  %tobool148 = icmp ne i32 %125, 0
  %126 = zext i1 %tobool148 to i64
  %cond149 = select i1 %tobool148, i32 1, i32 0
  %tobool150 = icmp ne i32 %cond149, 0
  %127 = zext i1 %tobool150 to i64
  %cond151 = select i1 %tobool150, i32 1, i32 0
  %128 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end152 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %128, i32 0, i32 7
  %129 = load i8*, i8** %end152, align 8
  %130 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp153 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %130, i32 0, i32 2
  %131 = load i8*, i8** %precomp153, align 8
  %sub.ptr.lhs.cast154 = ptrtoint i8* %129 to i64
  %sub.ptr.rhs.cast155 = ptrtoint i8* %131 to i64
  %sub.ptr.sub156 = sub i64 %sub.ptr.lhs.cast154, %sub.ptr.rhs.cast155
  %132 = load i64, i64* %offset128, align 8
  %sub157 = sub nsw i64 %sub.ptr.sub156, %132
  %133 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp158 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %133, i32 0, i32 2
  %134 = load i8*, i8** %precomp158, align 8
  %135 = load i64, i64* %offset128, align 8
  %add.ptr159 = getelementptr inbounds i8, i8* %134, i64 %135
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool137, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.403, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %conv140, i32 %cond145, i64 %121, i8* %123, i32 %cond151, i64 %sub157, i8* %add.ptr159)
  br label %do.end160

do.end160:                                        ; preds = %do.body127
  br label %do.end161

do.end161:                                        ; preds = %do.end160
  br label %if.end207

if.else162:                                       ; preds = %if.else111
  br label %do.body163

do.body163:                                       ; preds = %if.else162
  %136 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit164 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %136, i32 0, i32 12
  %137 = load %struct.regnode*, %struct.regnode** %emit164, align 8
  %138 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy165 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %138, i32 0, i32 13
  %139 = bitcast %struct.regnode_ssc* %emit_dummy165 to %struct.regnode*
  %cmp166 = icmp eq %struct.regnode* %137, %139
  br i1 %cmp166, label %if.end170, label %if.then168

if.then168:                                       ; preds = %do.body163
  %140 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv169 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %140, i32 0, i32 3
  %141 = load %struct.p5rx*, %struct.p5rx** %rx_sv169, align 8
  %142 = bitcast %struct.p5rx* %141 to i8*
  %143 = bitcast i8* %142 to %struct.sv*
  %144 = bitcast %struct.sv* %143 to i8*
  call void @Perl_save_pushptr(i8* %144, i32 11)
  br label %if.end170

if.end170:                                        ; preds = %if.then168, %do.body163
  br label %do.body171

do.body171:                                       ; preds = %if.end170
  %145 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse173 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %145, i32 0, i32 8
  %146 = load i8*, i8** %parse173, align 8
  %147 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp174 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %147, i32 0, i32 2
  %148 = load i8*, i8** %precomp174, align 8
  %sub.ptr.lhs.cast175 = ptrtoint i8* %146 to i64
  %sub.ptr.rhs.cast176 = ptrtoint i8* %148 to i64
  %sub.ptr.sub177 = sub i64 %sub.ptr.lhs.cast175, %sub.ptr.rhs.cast176
  store i64 %sub.ptr.sub177, i64* %offset172, align 8
  %149 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8178 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %149, i32 0, i32 25
  %150 = load i32, i32* %utf8178, align 8
  %tobool179 = icmp ne i32 %150, 0
  %151 = zext i1 %tobool179 to i64
  %cond180 = select i1 %tobool179, i32 1, i32 0
  %tobool181 = icmp ne i32 %cond180, 0
  %152 = load i8, i8* %has_charset_modifier, align 1
  %conv182 = sext i8 %152 to i32
  %153 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse183 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %153, i32 0, i32 8
  %154 = load i8*, i8** %parse183, align 8
  %add.ptr184 = getelementptr inbounds i8, i8* %154, i64 -1
  %155 = load i8, i8* %add.ptr184, align 1
  %conv185 = sext i8 %155 to i32
  %156 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8186 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %156, i32 0, i32 25
  %157 = load i32, i32* %utf8186, align 8
  %tobool187 = icmp ne i32 %157, 0
  %158 = zext i1 %tobool187 to i64
  %cond188 = select i1 %tobool187, i32 1, i32 0
  %tobool189 = icmp ne i32 %cond188, 0
  %159 = zext i1 %tobool189 to i64
  %cond190 = select i1 %tobool189, i32 1, i32 0
  %160 = load i64, i64* %offset172, align 8
  %161 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp191 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %161, i32 0, i32 2
  %162 = load i8*, i8** %precomp191, align 8
  %163 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8192 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %163, i32 0, i32 25
  %164 = load i32, i32* %utf8192, align 8
  %tobool193 = icmp ne i32 %164, 0
  %165 = zext i1 %tobool193 to i64
  %cond194 = select i1 %tobool193, i32 1, i32 0
  %tobool195 = icmp ne i32 %cond194, 0
  %166 = zext i1 %tobool195 to i64
  %cond196 = select i1 %tobool195, i32 1, i32 0
  %167 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end197 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %167, i32 0, i32 7
  %168 = load i8*, i8** %end197, align 8
  %169 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp198 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %169, i32 0, i32 2
  %170 = load i8*, i8** %precomp198, align 8
  %sub.ptr.lhs.cast199 = ptrtoint i8* %168 to i64
  %sub.ptr.rhs.cast200 = ptrtoint i8* %170 to i64
  %sub.ptr.sub201 = sub i64 %sub.ptr.lhs.cast199, %sub.ptr.rhs.cast200
  %171 = load i64, i64* %offset172, align 8
  %sub202 = sub nsw i64 %sub.ptr.sub201, %171
  %172 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp203 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %172, i32 0, i32 2
  %173 = load i8*, i8** %precomp203, align 8
  %174 = load i64, i64* %offset172, align 8
  %add.ptr204 = getelementptr inbounds i8, i8* %173, i64 %174
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool181, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.404, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %conv182, i32 %conv185, i32 %cond190, i64 %160, i8* %162, i32 %cond196, i64 %sub202, i8* %add.ptr204)
  br label %do.end205

do.end205:                                        ; preds = %do.body171
  br label %do.end206

do.end206:                                        ; preds = %do.end205
  br label %if.end207

if.end207:                                        ; preds = %do.end206, %do.end161
  br label %if.end208

if.end208:                                        ; preds = %if.end207, %do.end110
  br label %neg_modifier

neg_modifier:                                     ; preds = %if.end208, %if.then63, %if.then47, %if.then41, %if.then32
  %175 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse209 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %175, i32 0, i32 8
  %176 = load i8*, i8** %parse209, align 8
  %incdec.ptr210 = getelementptr inbounds i8, i8* %176, i32 1
  store i8* %incdec.ptr210, i8** %parse209, align 8
  br label %do.body211

do.body211:                                       ; preds = %neg_modifier
  %177 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit212 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %177, i32 0, i32 12
  %178 = load %struct.regnode*, %struct.regnode** %emit212, align 8
  %179 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy213 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %179, i32 0, i32 13
  %180 = bitcast %struct.regnode_ssc* %emit_dummy213 to %struct.regnode*
  %cmp214 = icmp eq %struct.regnode* %178, %180
  br i1 %cmp214, label %if.end218, label %if.then216

if.then216:                                       ; preds = %do.body211
  %181 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv217 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %181, i32 0, i32 3
  %182 = load %struct.p5rx*, %struct.p5rx** %rx_sv217, align 8
  %183 = bitcast %struct.p5rx* %182 to i8*
  %184 = bitcast i8* %183 to %struct.sv*
  %185 = bitcast %struct.sv* %184 to i8*
  call void @Perl_save_pushptr(i8* %185, i32 11)
  br label %if.end218

if.end218:                                        ; preds = %if.then216, %do.body211
  br label %do.body219

do.body219:                                       ; preds = %if.end218
  %186 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse221 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %186, i32 0, i32 8
  %187 = load i8*, i8** %parse221, align 8
  %188 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp222 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %188, i32 0, i32 2
  %189 = load i8*, i8** %precomp222, align 8
  %sub.ptr.lhs.cast223 = ptrtoint i8* %187 to i64
  %sub.ptr.rhs.cast224 = ptrtoint i8* %189 to i64
  %sub.ptr.sub225 = sub i64 %sub.ptr.lhs.cast223, %sub.ptr.rhs.cast224
  store i64 %sub.ptr.sub225, i64* %offset220, align 8
  %190 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8226 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %190, i32 0, i32 25
  %191 = load i32, i32* %utf8226, align 8
  %tobool227 = icmp ne i32 %191, 0
  %192 = zext i1 %tobool227 to i64
  %cond228 = select i1 %tobool227, i32 1, i32 0
  %tobool229 = icmp ne i32 %cond228, 0
  %193 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse230 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %193, i32 0, i32 8
  %194 = load i8*, i8** %parse230, align 8
  %add.ptr231 = getelementptr inbounds i8, i8* %194, i64 -1
  %195 = load i8, i8* %add.ptr231, align 1
  %conv232 = sext i8 %195 to i32
  %196 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8233 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %196, i32 0, i32 25
  %197 = load i32, i32* %utf8233, align 8
  %tobool234 = icmp ne i32 %197, 0
  %198 = zext i1 %tobool234 to i64
  %cond235 = select i1 %tobool234, i32 1, i32 0
  %tobool236 = icmp ne i32 %cond235, 0
  %199 = zext i1 %tobool236 to i64
  %cond237 = select i1 %tobool236, i32 1, i32 0
  %200 = load i64, i64* %offset220, align 8
  %201 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp238 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %201, i32 0, i32 2
  %202 = load i8*, i8** %precomp238, align 8
  %203 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8239 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %203, i32 0, i32 25
  %204 = load i32, i32* %utf8239, align 8
  %tobool240 = icmp ne i32 %204, 0
  %205 = zext i1 %tobool240 to i64
  %cond241 = select i1 %tobool240, i32 1, i32 0
  %tobool242 = icmp ne i32 %cond241, 0
  %206 = zext i1 %tobool242 to i64
  %cond243 = select i1 %tobool242, i32 1, i32 0
  %207 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end244 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %207, i32 0, i32 7
  %208 = load i8*, i8** %end244, align 8
  %209 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp245 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %209, i32 0, i32 2
  %210 = load i8*, i8** %precomp245, align 8
  %sub.ptr.lhs.cast246 = ptrtoint i8* %208 to i64
  %sub.ptr.rhs.cast247 = ptrtoint i8* %210 to i64
  %sub.ptr.sub248 = sub i64 %sub.ptr.lhs.cast246, %sub.ptr.rhs.cast247
  %211 = load i64, i64* %offset220, align 8
  %sub249 = sub nsw i64 %sub.ptr.sub248, %211
  %212 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp250 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %212, i32 0, i32 2
  %213 = load i8*, i8** %precomp250, align 8
  %214 = load i64, i64* %offset220, align 8
  %add.ptr251 = getelementptr inbounds i8, i8* %213, i64 %214
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool229, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.405, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %conv232, i32 %cond237, i64 %200, i8* %202, i32 %cond243, i64 %sub249, i8* %add.ptr251)
  br label %do.end252

do.end252:                                        ; preds = %do.body219
  br label %do.end253

do.end253:                                        ; preds = %do.end252
  br label %sw.bb254

sw.bb254:                                         ; preds = %while.body, %while.body, %do.end253
  %215 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit255 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %215, i32 0, i32 12
  %216 = load %struct.regnode*, %struct.regnode** %emit255, align 8
  %217 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy256 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %217, i32 0, i32 13
  %218 = bitcast %struct.regnode_ssc* %emit_dummy256 to %struct.regnode*
  %cmp257 = icmp eq %struct.regnode* %216, %218
  br i1 %cmp257, label %if.end311, label %land.lhs.true259

land.lhs.true259:                                 ; preds = %sw.bb254
  %call260 = call zeroext i1 @Perl_ckwarn(i32 20)
  br i1 %call260, label %if.then262, label %if.end311

if.then262:                                       ; preds = %land.lhs.true259
  %219 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse263 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %219, i32 0, i32 8
  %220 = load i8*, i8** %parse263, align 8
  %221 = load i8, i8* %220, align 1
  %conv264 = sext i8 %221 to i32
  %cmp265 = icmp eq i32 %conv264, 111
  %222 = zext i1 %cmp265 to i64
  %cond267 = select i1 %cmp265, i32 1, i32 2
  store i32 %cond267, i32* %wflagbit, align 4
  %223 = load i32, i32* %wastedflags, align 4
  %224 = load i32, i32* %wflagbit, align 4
  %and268 = and i32 %223, %224
  %tobool269 = icmp ne i32 %and268, 0
  br i1 %tobool269, label %if.end310, label %if.then270

if.then270:                                       ; preds = %if.then262
  %225 = load i32, i32* %wflagbit, align 4
  %226 = load i32, i32* %wastedflags, align 4
  %or271 = or i32 %226, %225
  store i32 %or271, i32* %wastedflags, align 4
  br label %do.body272

do.body272:                                       ; preds = %if.then270
  %227 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse274 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %227, i32 0, i32 8
  %228 = load i8*, i8** %parse274, align 8
  %add.ptr275 = getelementptr inbounds i8, i8* %228, i64 1
  %229 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp276 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %229, i32 0, i32 2
  %230 = load i8*, i8** %precomp276, align 8
  %sub.ptr.lhs.cast277 = ptrtoint i8* %add.ptr275 to i64
  %sub.ptr.rhs.cast278 = ptrtoint i8* %230 to i64
  %sub.ptr.sub279 = sub i64 %sub.ptr.lhs.cast277, %sub.ptr.rhs.cast278
  store i64 %sub.ptr.sub279, i64* %offset273, align 8
  %231 = load i32*, i32** %flagsp, align 8
  %cmp280 = icmp eq i32* %231, %negflags
  %232 = zext i1 %cmp280 to i64
  %cond282 = select i1 %cmp280, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.407, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.214, i64 0, i64 0)
  %233 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse283 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %233, i32 0, i32 8
  %234 = load i8*, i8** %parse283, align 8
  %235 = load i8, i8* %234, align 1
  %conv284 = sext i8 %235 to i32
  %236 = load i32*, i32** %flagsp, align 8
  %cmp285 = icmp eq i32* %236, %negflags
  %237 = zext i1 %cmp285 to i64
  %cond287 = select i1 %cmp285, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.408, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0)
  %238 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse288 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %238, i32 0, i32 8
  %239 = load i8*, i8** %parse288, align 8
  %240 = load i8, i8* %239, align 1
  %conv289 = sext i8 %240 to i32
  %241 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8290 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %241, i32 0, i32 25
  %242 = load i32, i32* %utf8290, align 8
  %tobool291 = icmp ne i32 %242, 0
  %243 = zext i1 %tobool291 to i64
  %cond292 = select i1 %tobool291, i32 1, i32 0
  %tobool293 = icmp ne i32 %cond292, 0
  %244 = zext i1 %tobool293 to i64
  %cond294 = select i1 %tobool293, i32 1, i32 0
  %245 = load i64, i64* %offset273, align 8
  %246 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp295 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %246, i32 0, i32 2
  %247 = load i8*, i8** %precomp295, align 8
  %248 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8296 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %248, i32 0, i32 25
  %249 = load i32, i32* %utf8296, align 8
  %tobool297 = icmp ne i32 %249, 0
  %250 = zext i1 %tobool297 to i64
  %cond298 = select i1 %tobool297, i32 1, i32 0
  %tobool299 = icmp ne i32 %cond298, 0
  %251 = zext i1 %tobool299 to i64
  %cond300 = select i1 %tobool299, i32 1, i32 0
  %252 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end301 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %252, i32 0, i32 7
  %253 = load i8*, i8** %end301, align 8
  %254 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp302 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %254, i32 0, i32 2
  %255 = load i8*, i8** %precomp302, align 8
  %sub.ptr.lhs.cast303 = ptrtoint i8* %253 to i64
  %sub.ptr.rhs.cast304 = ptrtoint i8* %255 to i64
  %sub.ptr.sub305 = sub i64 %sub.ptr.lhs.cast303, %sub.ptr.rhs.cast304
  %256 = load i64, i64* %offset273, align 8
  %sub306 = sub nsw i64 %sub.ptr.sub305, %256
  %257 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp307 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %257, i32 0, i32 2
  %258 = load i8*, i8** %precomp307, align 8
  %259 = load i64, i64* %offset273, align 8
  %add.ptr308 = getelementptr inbounds i8, i8* %258, i64 %259
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.406, i64 0, i64 0), i8* %cond282, i32 %conv284, i8* %cond287, i32 %conv289, i32 %cond294, i64 %245, i8* %247, i32 %cond300, i64 %sub306, i8* %add.ptr308)
  br label %do.end309

do.end309:                                        ; preds = %do.body272
  br label %if.end310

if.end310:                                        ; preds = %do.end309, %if.then262
  br label %if.end311

if.end311:                                        ; preds = %if.end310, %land.lhs.true259, %sw.bb254
  br label %sw.epilog

sw.bb312:                                         ; preds = %while.body
  %260 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit313 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %260, i32 0, i32 12
  %261 = load %struct.regnode*, %struct.regnode** %emit313, align 8
  %262 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy314 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %262, i32 0, i32 13
  %263 = bitcast %struct.regnode_ssc* %emit_dummy314 to %struct.regnode*
  %cmp315 = icmp eq %struct.regnode* %261, %263
  br i1 %cmp315, label %if.end360, label %land.lhs.true317

land.lhs.true317:                                 ; preds = %sw.bb312
  %call318 = call zeroext i1 @Perl_ckwarn(i32 20)
  br i1 %call318, label %if.then320, label %if.end360

if.then320:                                       ; preds = %land.lhs.true317
  %264 = load i32, i32* %wastedflags, align 4
  %and321 = and i32 %264, 4
  %tobool322 = icmp ne i32 %and321, 0
  br i1 %tobool322, label %if.end359, label %if.then323

if.then323:                                       ; preds = %if.then320
  %265 = load i32, i32* %wastedflags, align 4
  %or324 = or i32 %265, 6
  store i32 %or324, i32* %wastedflags, align 4
  br label %do.body325

do.body325:                                       ; preds = %if.then323
  %266 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse327 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %266, i32 0, i32 8
  %267 = load i8*, i8** %parse327, align 8
  %add.ptr328 = getelementptr inbounds i8, i8* %267, i64 1
  %268 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp329 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %268, i32 0, i32 2
  %269 = load i8*, i8** %precomp329, align 8
  %sub.ptr.lhs.cast330 = ptrtoint i8* %add.ptr328 to i64
  %sub.ptr.rhs.cast331 = ptrtoint i8* %269 to i64
  %sub.ptr.sub332 = sub i64 %sub.ptr.lhs.cast330, %sub.ptr.rhs.cast331
  store i64 %sub.ptr.sub332, i64* %offset326, align 8
  %270 = load i32*, i32** %flagsp, align 8
  %cmp333 = icmp eq i32* %270, %negflags
  %271 = zext i1 %cmp333 to i64
  %cond335 = select i1 %cmp333, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.407, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.214, i64 0, i64 0)
  %272 = load i32*, i32** %flagsp, align 8
  %cmp336 = icmp eq i32* %272, %negflags
  %273 = zext i1 %cmp336 to i64
  %cond338 = select i1 %cmp336, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.408, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0)
  %274 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8339 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %274, i32 0, i32 25
  %275 = load i32, i32* %utf8339, align 8
  %tobool340 = icmp ne i32 %275, 0
  %276 = zext i1 %tobool340 to i64
  %cond341 = select i1 %tobool340, i32 1, i32 0
  %tobool342 = icmp ne i32 %cond341, 0
  %277 = zext i1 %tobool342 to i64
  %cond343 = select i1 %tobool342, i32 1, i32 0
  %278 = load i64, i64* %offset326, align 8
  %279 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp344 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %279, i32 0, i32 2
  %280 = load i8*, i8** %precomp344, align 8
  %281 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8345 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %281, i32 0, i32 25
  %282 = load i32, i32* %utf8345, align 8
  %tobool346 = icmp ne i32 %282, 0
  %283 = zext i1 %tobool346 to i64
  %cond347 = select i1 %tobool346, i32 1, i32 0
  %tobool348 = icmp ne i32 %cond347, 0
  %284 = zext i1 %tobool348 to i64
  %cond349 = select i1 %tobool348, i32 1, i32 0
  %285 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end350 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %285, i32 0, i32 7
  %286 = load i8*, i8** %end350, align 8
  %287 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp351 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %287, i32 0, i32 2
  %288 = load i8*, i8** %precomp351, align 8
  %sub.ptr.lhs.cast352 = ptrtoint i8* %286 to i64
  %sub.ptr.rhs.cast353 = ptrtoint i8* %288 to i64
  %sub.ptr.sub354 = sub i64 %sub.ptr.lhs.cast352, %sub.ptr.rhs.cast353
  %289 = load i64, i64* %offset326, align 8
  %sub355 = sub nsw i64 %sub.ptr.sub354, %289
  %290 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp356 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %290, i32 0, i32 2
  %291 = load i8*, i8** %precomp356, align 8
  %292 = load i64, i64* %offset326, align 8
  %add.ptr357 = getelementptr inbounds i8, i8* %291, i64 %292
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.409, i64 0, i64 0), i8* %cond335, i8* %cond338, i32 %cond343, i64 %278, i8* %280, i32 %cond349, i64 %sub355, i8* %add.ptr357)
  br label %do.end358

do.end358:                                        ; preds = %do.body325
  br label %if.end359

if.end359:                                        ; preds = %do.end358, %if.then320
  br label %if.end360

if.end360:                                        ; preds = %if.end359, %land.lhs.true317, %sw.bb312
  br label %sw.epilog

sw.bb361:                                         ; preds = %while.body
  %293 = load i32*, i32** %flagsp, align 8
  %cmp362 = icmp eq i32* %293, %negflags
  br i1 %cmp362, label %if.then364, label %if.else399

if.then364:                                       ; preds = %sw.bb361
  %294 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit365 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %294, i32 0, i32 12
  %295 = load %struct.regnode*, %struct.regnode** %emit365, align 8
  %296 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy366 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %296, i32 0, i32 13
  %297 = bitcast %struct.regnode_ssc* %emit_dummy366 to %struct.regnode*
  %cmp367 = icmp eq %struct.regnode* %295, %297
  br i1 %cmp367, label %if.end398, label %if.then369

if.then369:                                       ; preds = %if.then364
  br label %do.body370

do.body370:                                       ; preds = %if.then369
  %298 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse372 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %298, i32 0, i32 8
  %299 = load i8*, i8** %parse372, align 8
  %add.ptr373 = getelementptr inbounds i8, i8* %299, i64 1
  %300 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp374 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %300, i32 0, i32 2
  %301 = load i8*, i8** %precomp374, align 8
  %sub.ptr.lhs.cast375 = ptrtoint i8* %add.ptr373 to i64
  %sub.ptr.rhs.cast376 = ptrtoint i8* %301 to i64
  %sub.ptr.sub377 = sub i64 %sub.ptr.lhs.cast375, %sub.ptr.rhs.cast376
  store i64 %sub.ptr.sub377, i64* %offset371, align 8
  %302 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8378 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %302, i32 0, i32 25
  %303 = load i32, i32* %utf8378, align 8
  %tobool379 = icmp ne i32 %303, 0
  %304 = zext i1 %tobool379 to i64
  %cond380 = select i1 %tobool379, i32 1, i32 0
  %tobool381 = icmp ne i32 %cond380, 0
  %305 = zext i1 %tobool381 to i64
  %cond382 = select i1 %tobool381, i32 1, i32 0
  %306 = load i64, i64* %offset371, align 8
  %307 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp383 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %307, i32 0, i32 2
  %308 = load i8*, i8** %precomp383, align 8
  %309 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8384 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %309, i32 0, i32 25
  %310 = load i32, i32* %utf8384, align 8
  %tobool385 = icmp ne i32 %310, 0
  %311 = zext i1 %tobool385 to i64
  %cond386 = select i1 %tobool385, i32 1, i32 0
  %tobool387 = icmp ne i32 %cond386, 0
  %312 = zext i1 %tobool387 to i64
  %cond388 = select i1 %tobool387, i32 1, i32 0
  %313 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end389 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %313, i32 0, i32 7
  %314 = load i8*, i8** %end389, align 8
  %315 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp390 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %315, i32 0, i32 2
  %316 = load i8*, i8** %precomp390, align 8
  %sub.ptr.lhs.cast391 = ptrtoint i8* %314 to i64
  %sub.ptr.rhs.cast392 = ptrtoint i8* %316 to i64
  %sub.ptr.sub393 = sub i64 %sub.ptr.lhs.cast391, %sub.ptr.rhs.cast392
  %317 = load i64, i64* %offset371, align 8
  %sub394 = sub nsw i64 %sub.ptr.sub393, %317
  %318 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp395 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %318, i32 0, i32 2
  %319 = load i8*, i8** %precomp395, align 8
  %320 = load i64, i64* %offset371, align 8
  %add.ptr396 = getelementptr inbounds i8, i8* %319, i64 %320
  call void (i32, i8*, ...) @Perl_ck_warner(i32 20, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.410, i64 0, i64 0), i32 %cond382, i64 %306, i8* %308, i32 %cond388, i64 %sub394, i8* %add.ptr396)
  br label %do.end397

do.end397:                                        ; preds = %do.body370
  br label %if.end398

if.end398:                                        ; preds = %do.end397, %if.then364
  br label %if.end401

if.else399:                                       ; preds = %sw.bb361
  %321 = load i32*, i32** %flagsp, align 8
  %322 = load i32, i32* %321, align 4
  %or400 = or i32 %322, 64
  store i32 %or400, i32* %321, align 4
  br label %if.end401

if.end401:                                        ; preds = %if.else399, %if.end398
  br label %sw.epilog

sw.bb402:                                         ; preds = %while.body
  %323 = load i8, i8* %has_use_defaults, align 1
  %tobool403 = trunc i8 %323 to i1
  br i1 %tobool403, label %if.then408, label %lor.lhs.false405

lor.lhs.false405:                                 ; preds = %sw.bb402
  %324 = load i32*, i32** %flagsp, align 8
  %cmp406 = icmp eq i32* %324, %negflags
  br i1 %cmp406, label %if.then408, label %if.end409

if.then408:                                       ; preds = %lor.lhs.false405, %sw.bb402
  br label %fail_modifiers

if.end409:                                        ; preds = %lor.lhs.false405
  store i32* %negflags, i32** %flagsp, align 8
  store i32 0, i32* %wastedflags, align 4
  br label %sw.epilog

sw.bb410:                                         ; preds = %while.body, %while.body
  %325 = load i32, i32* %posflags, align 4
  %326 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags411 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %326, i32 0, i32 0
  %327 = load i32, i32* %flags411, align 8
  %or412 = or i32 %327, %325
  store i32 %or412, i32* %flags411, align 8
  %328 = load i32, i32* %negflags, align 4
  %neg = xor i32 %328, -1
  %329 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags413 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %329, i32 0, i32 0
  %330 = load i32, i32* %flags413, align 8
  %and414 = and i32 %330, %neg
  store i32 %and414, i32* %flags413, align 8
  %331 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags415 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %331, i32 0, i32 0
  %332 = load i32, i32* %cs, align 4
  call void @set_regex_charset(i32* %flags415, i32 %332)
  %333 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags416 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %333, i32 0, i32 0
  %334 = load i32, i32* %flags416, align 8
  %and417 = and i32 %334, 4
  %tobool418 = icmp ne i32 %and417, 0
  br i1 %tobool418, label %if.then419, label %if.end420

if.then419:                                       ; preds = %sw.bb410
  %335 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %contains_i = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %335, i32 0, i32 35
  store i32 1, i32* %contains_i, align 4
  br label %if.end420

if.end420:                                        ; preds = %if.then419, %sw.bb410
  %336 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit421 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %336, i32 0, i32 12
  %337 = load %struct.regnode*, %struct.regnode** %emit421, align 8
  %338 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy422 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %338, i32 0, i32 13
  %339 = bitcast %struct.regnode_ssc* %emit_dummy422 to %struct.regnode*
  %cmp423 = icmp eq %struct.regnode* %337, %339
  br i1 %cmp423, label %if.end430, label %if.then425

if.then425:                                       ; preds = %if.end420
  %340 = load i32, i32* %x_mod_count, align 4
  %cmp426 = icmp sgt i32 %340, 1
  br i1 %cmp426, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then425
  br i1 true, label %if.then428, label %if.end429

cond.false:                                       ; preds = %if.then425
  br i1 false, label %if.then428, label %if.end429

if.then428:                                       ; preds = %cond.false, %cond.true
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 5122, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.411, i64 0, i64 0), i32 120)
  br label %if.end429

if.end429:                                        ; preds = %if.then428, %cond.false, %cond.true
  br label %if.end430

if.end430:                                        ; preds = %if.end429, %if.end420
  br label %do.end541

sw.default:                                       ; preds = %while.body
  br label %fail_modifiers

fail_modifiers:                                   ; preds = %sw.default, %if.then408, %if.then59
  %341 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse431 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %341, i32 0, i32 8
  %342 = load i8*, i8** %parse431, align 8
  %343 = load i8, i8* %342, align 1
  %tobool432 = icmp ne i8 %343, 0
  br i1 %tobool432, label %cond.false434, label %cond.true433

cond.true433:                                     ; preds = %fail_modifiers
  br label %cond.end444

cond.false434:                                    ; preds = %fail_modifiers
  %344 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8435 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %344, i32 0, i32 25
  %345 = load i32, i32* %utf8435, align 8
  %tobool436 = icmp ne i32 %345, 0
  br i1 %tobool436, label %cond.true437, label %cond.false438

cond.true437:                                     ; preds = %cond.false434
  br i1 true, label %cond.true439, label %cond.false442

cond.false438:                                    ; preds = %cond.false434
  br i1 false, label %cond.true439, label %cond.false442

cond.true439:                                     ; preds = %cond.false438, %cond.true437
  %346 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse440 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %346, i32 0, i32 8
  %347 = load i8*, i8** %parse440, align 8
  %348 = load i8, i8* %347, align 1
  %idxprom = zext i8 %348 to i64
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %349 = load i8, i8* %arrayidx, align 1
  %conv441 = zext i8 %349 to i32
  br label %cond.end

cond.false442:                                    ; preds = %cond.false438, %cond.true437
  br label %cond.end

cond.end:                                         ; preds = %cond.false442, %cond.true439
  %cond443 = phi i32 [ %conv441, %cond.true439 ], [ 1, %cond.false442 ]
  br label %cond.end444

cond.end444:                                      ; preds = %cond.end, %cond.true433
  %cond445 = phi i32 [ 0, %cond.true433 ], [ %cond443, %cond.end ]
  %350 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse446 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %350, i32 0, i32 8
  %351 = load i8*, i8** %parse446, align 8
  %idx.ext = sext i32 %cond445 to i64
  %add.ptr447 = getelementptr inbounds i8, i8* %351, i64 %idx.ext
  store i8* %add.ptr447, i8** %parse446, align 8
  br label %do.body448

do.body448:                                       ; preds = %cond.end444
  %352 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse450 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %352, i32 0, i32 8
  %353 = load i8*, i8** %parse450, align 8
  %354 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp451 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %354, i32 0, i32 2
  %355 = load i8*, i8** %precomp451, align 8
  %sub.ptr.lhs.cast452 = ptrtoint i8* %353 to i64
  %sub.ptr.rhs.cast453 = ptrtoint i8* %355 to i64
  %sub.ptr.sub454 = sub i64 %sub.ptr.lhs.cast452, %sub.ptr.rhs.cast453
  store i64 %sub.ptr.sub454, i64* %offset449, align 8
  %356 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit455 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %356, i32 0, i32 12
  %357 = load %struct.regnode*, %struct.regnode** %emit455, align 8
  %358 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy456 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %358, i32 0, i32 13
  %359 = bitcast %struct.regnode_ssc* %emit_dummy456 to %struct.regnode*
  %cmp457 = icmp eq %struct.regnode* %357, %359
  br i1 %cmp457, label %if.end461, label %if.then459

if.then459:                                       ; preds = %do.body448
  %360 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv460 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %360, i32 0, i32 3
  %361 = load %struct.p5rx*, %struct.p5rx** %rx_sv460, align 8
  %362 = bitcast %struct.p5rx* %361 to i8*
  %363 = bitcast i8* %362 to %struct.sv*
  %364 = bitcast %struct.sv* %363 to i8*
  call void @Perl_save_pushptr(i8* %364, i32 11)
  br label %if.end461

if.end461:                                        ; preds = %if.then459, %do.body448
  %365 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8462 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %365, i32 0, i32 25
  %366 = load i32, i32* %utf8462, align 8
  %tobool463 = icmp ne i32 %366, 0
  %367 = zext i1 %tobool463 to i64
  %cond464 = select i1 %tobool463, i32 1, i32 0
  %tobool465 = icmp ne i32 %cond464, 0
  %368 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8466 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %368, i32 0, i32 25
  %369 = load i32, i32* %utf8466, align 8
  %tobool467 = icmp ne i32 %369, 0
  %370 = zext i1 %tobool467 to i64
  %cond468 = select i1 %tobool467, i32 1, i32 0
  %tobool469 = icmp ne i32 %cond468, 0
  %371 = zext i1 %tobool469 to i64
  %cond470 = select i1 %tobool469, i32 1, i32 0
  %372 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse471 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %372, i32 0, i32 8
  %373 = load i8*, i8** %parse471, align 8
  %374 = load i8*, i8** %seqstart, align 8
  %sub.ptr.lhs.cast472 = ptrtoint i8* %373 to i64
  %sub.ptr.rhs.cast473 = ptrtoint i8* %374 to i64
  %sub.ptr.sub474 = sub i64 %sub.ptr.lhs.cast472, %sub.ptr.rhs.cast473
  %375 = load i8*, i8** %seqstart, align 8
  %376 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8475 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %376, i32 0, i32 25
  %377 = load i32, i32* %utf8475, align 8
  %tobool476 = icmp ne i32 %377, 0
  %378 = zext i1 %tobool476 to i64
  %cond477 = select i1 %tobool476, i32 1, i32 0
  %tobool478 = icmp ne i32 %cond477, 0
  %379 = zext i1 %tobool478 to i64
  %cond479 = select i1 %tobool478, i32 1, i32 0
  %380 = load i64, i64* %offset449, align 8
  %381 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp480 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %381, i32 0, i32 2
  %382 = load i8*, i8** %precomp480, align 8
  %383 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8481 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %383, i32 0, i32 25
  %384 = load i32, i32* %utf8481, align 8
  %tobool482 = icmp ne i32 %384, 0
  %385 = zext i1 %tobool482 to i64
  %cond483 = select i1 %tobool482, i32 1, i32 0
  %tobool484 = icmp ne i32 %cond483, 0
  %386 = zext i1 %tobool484 to i64
  %cond485 = select i1 %tobool484, i32 1, i32 0
  %387 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end486 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %387, i32 0, i32 7
  %388 = load i8*, i8** %end486, align 8
  %389 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp487 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %389, i32 0, i32 2
  %390 = load i8*, i8** %precomp487, align 8
  %sub.ptr.lhs.cast488 = ptrtoint i8* %388 to i64
  %sub.ptr.rhs.cast489 = ptrtoint i8* %390 to i64
  %sub.ptr.sub490 = sub i64 %sub.ptr.lhs.cast488, %sub.ptr.rhs.cast489
  %391 = load i64, i64* %offset449, align 8
  %sub491 = sub nsw i64 %sub.ptr.sub490, %391
  %392 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp492 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %392, i32 0, i32 2
  %393 = load i8*, i8** %precomp492, align 8
  %394 = load i64, i64* %offset449, align 8
  %add.ptr493 = getelementptr inbounds i8, i8* %393, i64 %394
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool465, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.251, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %cond470, i64 %sub.ptr.sub474, i8* %375, i32 %cond479, i64 %380, i8* %382, i32 %cond485, i64 %sub491, i8* %add.ptr493)
  br label %do.end494

do.end494:                                        ; preds = %if.end461
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end494, %if.end409, %if.end401, %if.end360, %if.end311, %lor.end75, %if.end56, %if.end43, %if.end34, %sw.bb25, %sw.bb23, %sw.bb21, %sw.bb19, %sw.bb
  %395 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse495 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %395, i32 0, i32 8
  %396 = load i8*, i8** %parse495, align 8
  %incdec.ptr496 = getelementptr inbounds i8, i8* %396, i32 1
  store i8* %incdec.ptr496, i8** %parse495, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.body497

do.body497:                                       ; preds = %while.end
  %397 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit498 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %397, i32 0, i32 12
  %398 = load %struct.regnode*, %struct.regnode** %emit498, align 8
  %399 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy499 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %399, i32 0, i32 13
  %400 = bitcast %struct.regnode_ssc* %emit_dummy499 to %struct.regnode*
  %cmp500 = icmp eq %struct.regnode* %398, %400
  br i1 %cmp500, label %if.end504, label %if.then502

if.then502:                                       ; preds = %do.body497
  %401 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv503 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %401, i32 0, i32 3
  %402 = load %struct.p5rx*, %struct.p5rx** %rx_sv503, align 8
  %403 = bitcast %struct.p5rx* %402 to i8*
  %404 = bitcast i8* %403 to %struct.sv*
  %405 = bitcast %struct.sv* %404 to i8*
  call void @Perl_save_pushptr(i8* %405, i32 11)
  br label %if.end504

if.end504:                                        ; preds = %if.then502, %do.body497
  br label %do.body505

do.body505:                                       ; preds = %if.end504
  %406 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse507 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %406, i32 0, i32 8
  %407 = load i8*, i8** %parse507, align 8
  %408 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end508 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %408, i32 0, i32 7
  %409 = load i8*, i8** %end508, align 8
  %cmp509 = icmp ugt i8* %407, %409
  br i1 %cmp509, label %cond.true511, label %cond.false513

cond.true511:                                     ; preds = %do.body505
  %410 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end512 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %410, i32 0, i32 7
  %411 = load i8*, i8** %end512, align 8
  br label %cond.end515

cond.false513:                                    ; preds = %do.body505
  %412 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse514 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %412, i32 0, i32 8
  %413 = load i8*, i8** %parse514, align 8
  br label %cond.end515

cond.end515:                                      ; preds = %cond.false513, %cond.true511
  %cond516 = phi i8* [ %411, %cond.true511 ], [ %413, %cond.false513 ]
  %414 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp517 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %414, i32 0, i32 2
  %415 = load i8*, i8** %precomp517, align 8
  %sub.ptr.lhs.cast518 = ptrtoint i8* %cond516 to i64
  %sub.ptr.rhs.cast519 = ptrtoint i8* %415 to i64
  %sub.ptr.sub520 = sub i64 %sub.ptr.lhs.cast518, %sub.ptr.rhs.cast519
  store i64 %sub.ptr.sub520, i64* %offset506, align 8
  %416 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8521 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %416, i32 0, i32 25
  %417 = load i32, i32* %utf8521, align 8
  %tobool522 = icmp ne i32 %417, 0
  %418 = zext i1 %tobool522 to i64
  %cond523 = select i1 %tobool522, i32 1, i32 0
  %tobool524 = icmp ne i32 %cond523, 0
  %419 = zext i1 %tobool524 to i64
  %cond525 = select i1 %tobool524, i32 1, i32 0
  %420 = load i64, i64* %offset506, align 8
  %421 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp526 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %421, i32 0, i32 2
  %422 = load i8*, i8** %precomp526, align 8
  %423 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8527 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %423, i32 0, i32 25
  %424 = load i32, i32* %utf8527, align 8
  %tobool528 = icmp ne i32 %424, 0
  %425 = zext i1 %tobool528 to i64
  %cond529 = select i1 %tobool528, i32 1, i32 0
  %tobool530 = icmp ne i32 %cond529, 0
  %426 = zext i1 %tobool530 to i64
  %cond531 = select i1 %tobool530, i32 1, i32 0
  %427 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end532 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %427, i32 0, i32 7
  %428 = load i8*, i8** %end532, align 8
  %429 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp533 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %429, i32 0, i32 2
  %430 = load i8*, i8** %precomp533, align 8
  %sub.ptr.lhs.cast534 = ptrtoint i8* %428 to i64
  %sub.ptr.rhs.cast535 = ptrtoint i8* %430 to i64
  %sub.ptr.sub536 = sub i64 %sub.ptr.lhs.cast534, %sub.ptr.rhs.cast535
  %431 = load i64, i64* %offset506, align 8
  %sub537 = sub nsw i64 %sub.ptr.sub536, %431
  %432 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp538 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %432, i32 0, i32 2
  %433 = load i8*, i8** %precomp538, align 8
  %434 = load i64, i64* %offset506, align 8
  %add.ptr539 = getelementptr inbounds i8, i8* %433, i64 %434
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.412, i64 0, i64 0), i32 %cond525, i64 %420, i8* %422, i32 %cond531, i64 %sub537, i8* %add.ptr539)
  br label %do.end540

do.end540:                                        ; preds = %cond.end515
  br label %do.end541

do.end541:                                        ; preds = %if.end430, %do.end540
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_reginsert(%struct.RExC_state_t* %pRExC_state, i8 zeroext %op, %struct.regnode* %opnd, i32 %depth) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %op.addr = alloca i8, align 1
  %opnd.addr = alloca %struct.regnode*, align 8
  %depth.addr = alloca i32, align 4
  %src = alloca %struct.regnode*, align 8
  %dst = alloca %struct.regnode*, align 8
  %place = alloca %struct.regnode*, align 8
  %offset = alloca i32, align 4
  %size = alloca i32, align 4
  %paren = alloca i32, align 4
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i8 %op, i8* %op.addr, align 1
  store %struct.regnode* %opnd, %struct.regnode** %opnd.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load i8, i8* %op.addr, align 1
  %idxprom = zext i8 %0 to i64
  %arrayidx = getelementptr inbounds [94 x i8], [94 x i8]* @regarglen, i64 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  store i32 %conv, i32* %offset, align 4
  %2 = load i32, i32* %offset, align 4
  %add = add nsw i32 1, %2
  store i32 %add, i32* %size, align 4
  %3 = load i32, i32* %depth.addr, align 4
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %4, i32 0, i32 12
  %5 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %6 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %6, i32 0, i32 13
  %7 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp = icmp eq %struct.regnode* %5, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %size, align 4
  %conv2 = sext i32 %8 to i64
  %9 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size3 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %9, i32 0, i32 17
  %10 = load i64, i64* %size3, align 8
  %add4 = add nsw i64 %10, %conv2
  store i64 %add4, i64* %size3, align 8
  br label %return

if.end:                                           ; preds = %entry
  %11 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit5 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %11, i32 0, i32 12
  %12 = load %struct.regnode*, %struct.regnode** %emit5, align 8
  store %struct.regnode* %12, %struct.regnode** %src, align 8
  %13 = load i32, i32* %size, align 4
  %14 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit6 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %14, i32 0, i32 12
  %15 = load %struct.regnode*, %struct.regnode** %emit6, align 8
  %idx.ext = sext i32 %13 to i64
  %add.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %15, i64 %idx.ext
  store %struct.regnode* %add.ptr, %struct.regnode** %emit6, align 8
  %16 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit7 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %16, i32 0, i32 12
  %17 = load %struct.regnode*, %struct.regnode** %emit7, align 8
  store %struct.regnode* %17, %struct.regnode** %dst, align 8
  %18 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %open_parens = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %18, i32 0, i32 22
  %19 = load %struct.regnode**, %struct.regnode*** %open_parens, align 8
  %tobool = icmp ne %struct.regnode** %19, null
  br i1 %tobool, label %if.then8, label %if.end35

if.then8:                                         ; preds = %if.end
  store i32 0, i32* %paren, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then8
  %20 = load i32, i32* %paren, align 4
  %21 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %21, i32 0, i32 18
  %22 = load i32, i32* %npar, align 8
  %cmp9 = icmp slt i32 %20, %22
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %open_parens11 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %23, i32 0, i32 22
  %24 = load %struct.regnode**, %struct.regnode*** %open_parens11, align 8
  %25 = load i32, i32* %paren, align 4
  %idxprom12 = sext i32 %25 to i64
  %arrayidx13 = getelementptr inbounds %struct.regnode*, %struct.regnode** %24, i64 %idxprom12
  %26 = load %struct.regnode*, %struct.regnode** %arrayidx13, align 8
  %27 = load %struct.regnode*, %struct.regnode** %opnd.addr, align 8
  %cmp14 = icmp uge %struct.regnode* %26, %27
  br i1 %cmp14, label %if.then16, label %if.else

if.then16:                                        ; preds = %for.body
  %28 = load i32, i32* %size, align 4
  %29 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %open_parens17 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %29, i32 0, i32 22
  %30 = load %struct.regnode**, %struct.regnode*** %open_parens17, align 8
  %31 = load i32, i32* %paren, align 4
  %idxprom18 = sext i32 %31 to i64
  %arrayidx19 = getelementptr inbounds %struct.regnode*, %struct.regnode** %30, i64 %idxprom18
  %32 = load %struct.regnode*, %struct.regnode** %arrayidx19, align 8
  %idx.ext20 = sext i32 %28 to i64
  %add.ptr21 = getelementptr inbounds %struct.regnode, %struct.regnode* %32, i64 %idx.ext20
  store %struct.regnode* %add.ptr21, %struct.regnode** %arrayidx19, align 8
  br label %if.end22

if.else:                                          ; preds = %for.body
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then16
  %33 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %close_parens = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %33, i32 0, i32 23
  %34 = load %struct.regnode**, %struct.regnode*** %close_parens, align 8
  %35 = load i32, i32* %paren, align 4
  %idxprom23 = sext i32 %35 to i64
  %arrayidx24 = getelementptr inbounds %struct.regnode*, %struct.regnode** %34, i64 %idxprom23
  %36 = load %struct.regnode*, %struct.regnode** %arrayidx24, align 8
  %37 = load %struct.regnode*, %struct.regnode** %opnd.addr, align 8
  %cmp25 = icmp uge %struct.regnode* %36, %37
  br i1 %cmp25, label %if.then27, label %if.else33

if.then27:                                        ; preds = %if.end22
  %38 = load i32, i32* %size, align 4
  %39 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %close_parens28 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %39, i32 0, i32 23
  %40 = load %struct.regnode**, %struct.regnode*** %close_parens28, align 8
  %41 = load i32, i32* %paren, align 4
  %idxprom29 = sext i32 %41 to i64
  %arrayidx30 = getelementptr inbounds %struct.regnode*, %struct.regnode** %40, i64 %idxprom29
  %42 = load %struct.regnode*, %struct.regnode** %arrayidx30, align 8
  %idx.ext31 = sext i32 %38 to i64
  %add.ptr32 = getelementptr inbounds %struct.regnode, %struct.regnode* %42, i64 %idx.ext31
  store %struct.regnode* %add.ptr32, %struct.regnode** %arrayidx30, align 8
  br label %if.end34

if.else33:                                        ; preds = %if.end22
  br label %if.end34

if.end34:                                         ; preds = %if.else33, %if.then27
  br label %for.inc

for.inc:                                          ; preds = %if.end34
  %43 = load i32, i32* %paren, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %paren, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end35

if.end35:                                         ; preds = %for.end, %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end35
  %44 = load %struct.regnode*, %struct.regnode** %src, align 8
  %45 = load %struct.regnode*, %struct.regnode** %opnd.addr, align 8
  %cmp36 = icmp ugt %struct.regnode* %44, %45
  br i1 %cmp36, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %46 = load %struct.regnode*, %struct.regnode** %dst, align 8
  %incdec.ptr = getelementptr inbounds %struct.regnode, %struct.regnode* %46, i32 -1
  store %struct.regnode* %incdec.ptr, %struct.regnode** %dst, align 8
  %47 = load %struct.regnode*, %struct.regnode** %src, align 8
  %incdec.ptr38 = getelementptr inbounds %struct.regnode, %struct.regnode* %47, i32 -1
  store %struct.regnode* %incdec.ptr38, %struct.regnode** %src, align 8
  %48 = bitcast %struct.regnode* %incdec.ptr to i8*
  %49 = bitcast %struct.regnode* %incdec.ptr38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %48, i8* align 2 %49, i64 4, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %50 = load %struct.regnode*, %struct.regnode** %opnd.addr, align 8
  store %struct.regnode* %50, %struct.regnode** %place, align 8
  %51 = load %struct.regnode*, %struct.regnode** %place, align 8
  %add.ptr39 = getelementptr inbounds %struct.regnode, %struct.regnode* %51, i64 1
  store %struct.regnode* %add.ptr39, %struct.regnode** %src, align 8
  br label %do.body

do.body:                                          ; preds = %while.end
  %52 = load i8, i8* %op.addr, align 1
  %53 = load %struct.regnode*, %struct.regnode** %place, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %53, i32 0, i32 1
  store i8 %52, i8* %type, align 1
  %54 = load %struct.regnode*, %struct.regnode** %place, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %54, i32 0, i32 2
  store i16 0, i16* %next_off, align 2
  %55 = load %struct.regnode*, %struct.regnode** %place, align 8
  %incdec.ptr40 = getelementptr inbounds %struct.regnode, %struct.regnode* %55, i32 1
  store %struct.regnode* %incdec.ptr40, %struct.regnode** %place, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %56 = load %struct.regnode*, %struct.regnode** %src, align 8
  %57 = bitcast %struct.regnode* %56 to i8*
  %58 = load i32, i32* %offset, align 4
  %conv41 = sext i32 %58 to i64
  %mul = mul i64 %conv41, 4
  call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 0, i64 %mul, i1 false)
  br label %return

return:                                           ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #2

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #2

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #5

declare dso_local %struct.sv* @Perl_vmess(i8*, [1 x %struct.__va_list_tag]*) #1

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #5

; Function Attrs: noinline nounwind uwtable
define internal %struct.regnode* @S_regnode_guts(%struct.RExC_state_t* %pRExC_state, i8 zeroext %op, i64 %extra_size, i8* %name) #0 {
entry:
  %retval = alloca %struct.regnode*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %op.addr = alloca i8, align 1
  %extra_size.addr = alloca i64, align 8
  %name.addr = alloca i8*, align 8
  %ret = alloca %struct.regnode*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i8 %op, i8* %op.addr, align 1
  store i64 %extra_size, i64* %extra_size.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 12
  %1 = load %struct.regnode*, %struct.regnode** %emit, align 8
  store %struct.regnode* %1, %struct.regnode** %ret, align 8
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 12
  %3 = load %struct.regnode*, %struct.regnode** %emit1, align 8
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %4, i32 0, i32 13
  %5 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp = icmp eq %struct.regnode* %3, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i64, i64* %extra_size.addr, align 8
  %add = add i64 1, %6
  %7 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %7, i32 0, i32 17
  %8 = load i64, i64* %size, align 8
  %add2 = add i64 %8, %add
  store i64 %add2, i64* %size, align 8
  %9 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %9, %struct.regnode** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %10 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit3 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %10, i32 0, i32 12
  %11 = load %struct.regnode*, %struct.regnode** %emit3, align 8
  %12 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_bound = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %12, i32 0, i32 11
  %13 = load %struct.regnode*, %struct.regnode** %emit_bound, align 8
  %cmp4 = icmp uge %struct.regnode* %11, %13
  br i1 %cmp4, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end
  %14 = load i8, i8* %op.addr, align 1
  %conv = zext i8 %14 to i32
  %15 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit6 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %15, i32 0, i32 12
  %16 = load %struct.regnode*, %struct.regnode** %emit6, align 8
  %17 = bitcast %struct.regnode* %16 to i8*
  %18 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_bound7 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %18, i32 0, i32 11
  %19 = load %struct.regnode*, %struct.regnode** %emit_bound7, align 8
  %20 = bitcast %struct.regnode* %19 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.270, i64 0, i64 0), i32 %conv, i8* %17, i8* %20)
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end
  %21 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags = getelementptr inbounds %struct.regnode, %struct.regnode* %21, i32 0, i32 0
  store i8 0, i8* %flags, align 2
  %22 = load i8*, i8** %name.addr, align 8
  %23 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %23, %struct.regnode** %retval, align 8
  br label %return

return:                                           ; preds = %if.end8, %if.then
  %24 = load %struct.regnode*, %struct.regnode** %retval, align 8
  ret %struct.regnode* %24
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @S_regpatws(%struct.RExC_state_t* %pRExC_state, i8* %p, i1 zeroext %recognize_comment) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %p.addr = alloca i8*, align 8
  %recognize_comment.addr = alloca i8, align 1
  %e = alloca i8*, align 8
  %len = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  %frombool = zext i1 %recognize_comment to i8
  store i8 %frombool, i8* %recognize_comment.addr, align 1
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 7
  %1 = load i8*, i8** %end, align 8
  store i8* %1, i8** %e, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end80, %entry
  %2 = load i8*, i8** %p.addr, align 8
  %3 = load i8*, i8** %e, align 8
  %cmp = icmp ult i8* %2, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %e, align 8
  %5 = load i8*, i8** %p.addr, align 8
  %cmp1 = icmp ugt i8* %4, %5
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  br i1 true, label %cond.true2, label %cond.false67

cond.false:                                       ; preds = %while.body
  br i1 false, label %cond.true2, label %cond.false67

cond.true2:                                       ; preds = %cond.false, %cond.true
  %6 = load i8*, i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 0
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i32
  %cmp3 = icmp sle i32 9, %conv
  br i1 %cmp3, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %cond.true2
  %8 = load i8*, i8** %p.addr, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %9 to i32
  %cmp7 = icmp sle i32 %conv6, 13
  br i1 %cmp7, label %cond.true13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %cond.true2
  %10 = load i8*, i8** %p.addr, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %10, i64 0
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %cmp11 = icmp eq i32 32, %conv10
  br i1 %cmp11, label %cond.true13, label %cond.false14

cond.true13:                                      ; preds = %lor.lhs.false, %land.lhs.true
  br label %cond.end65

cond.false14:                                     ; preds = %lor.lhs.false
  %12 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %12, i32 0, i32 25
  %13 = load i32, i32* %utf8, align 8
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %cond.false14
  br i1 true, label %cond.false22, label %cond.true17

cond.false16:                                     ; preds = %cond.false14
  br i1 false, label %cond.false22, label %cond.true17

cond.true17:                                      ; preds = %cond.false16, %cond.true15
  %14 = load i8*, i8** %p.addr, align 8
  %arrayidx18 = getelementptr inbounds i8, i8* %14, i64 0
  %15 = load i8, i8* %arrayidx18, align 1
  %conv19 = zext i8 %15 to i32
  %cmp20 = icmp eq i32 133, %conv19
  %conv21 = zext i1 %cmp20 to i32
  br label %cond.end63

cond.false22:                                     ; preds = %cond.false16, %cond.true15
  %16 = load i8*, i8** %e, align 8
  %17 = load i8*, i8** %p.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %16 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %17 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %18 = load i8*, i8** %p.addr, align 8
  %19 = load i8, i8* %18, align 1
  %idxprom = zext i8 %19 to i64
  %arrayidx23 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %20 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %20 to i64
  %cmp25 = icmp sge i64 %sub.ptr.sub, %conv24
  br i1 %cmp25, label %cond.true27, label %cond.false28

cond.true27:                                      ; preds = %cond.false22
  br i1 true, label %cond.true29, label %cond.false60

cond.false28:                                     ; preds = %cond.false22
  br i1 false, label %cond.true29, label %cond.false60

cond.true29:                                      ; preds = %cond.false28, %cond.true27
  %21 = load i8*, i8** %p.addr, align 8
  %arrayidx30 = getelementptr inbounds i8, i8* %21, i64 0
  %22 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %22 to i32
  %cmp32 = icmp eq i32 194, %conv31
  br i1 %cmp32, label %cond.true34, label %cond.false39

cond.true34:                                      ; preds = %cond.true29
  %23 = load i8*, i8** %p.addr, align 8
  %arrayidx35 = getelementptr inbounds i8, i8* %23, i64 1
  %24 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %24 to i32
  %cmp37 = icmp eq i32 133, %conv36
  %25 = zext i1 %cmp37 to i64
  %cond = select i1 %cmp37, i32 2, i32 0
  br label %cond.end

cond.false39:                                     ; preds = %cond.true29
  %26 = load i8*, i8** %p.addr, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %26, i64 0
  %27 = load i8, i8* %arrayidx40, align 1
  %conv41 = zext i8 %27 to i32
  %cmp42 = icmp eq i32 226, %conv41
  br i1 %cmp42, label %land.lhs.true44, label %land.end

land.lhs.true44:                                  ; preds = %cond.false39
  %28 = load i8*, i8** %p.addr, align 8
  %arrayidx45 = getelementptr inbounds i8, i8* %28, i64 1
  %29 = load i8, i8* %arrayidx45, align 1
  %conv46 = zext i8 %29 to i32
  %cmp47 = icmp eq i32 128, %conv46
  br i1 %cmp47, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true44
  %30 = load i8*, i8** %p.addr, align 8
  %arrayidx49 = getelementptr inbounds i8, i8* %30, i64 2
  %31 = load i8, i8* %arrayidx49, align 1
  %conv50 = zext i8 %31 to i32
  %and = and i32 %conv50, 254
  %cmp51 = icmp eq i32 %and, 142
  br i1 %cmp51, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %32 = load i8*, i8** %p.addr, align 8
  %arrayidx53 = getelementptr inbounds i8, i8* %32, i64 2
  %33 = load i8, i8* %arrayidx53, align 1
  %conv54 = zext i8 %33 to i32
  %and55 = and i32 %conv54, 254
  %cmp56 = icmp eq i32 %and55, 168
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %34 = phi i1 [ true, %land.rhs ], [ %cmp56, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true44, %cond.false39
  %35 = phi i1 [ false, %land.lhs.true44 ], [ false, %cond.false39 ], [ %34, %lor.end ]
  %36 = zext i1 %35 to i64
  %cond58 = select i1 %35, i32 3, i32 0
  br label %cond.end

cond.end:                                         ; preds = %land.end, %cond.true34
  %cond59 = phi i32 [ %cond, %cond.true34 ], [ %cond58, %land.end ]
  br label %cond.end61

cond.false60:                                     ; preds = %cond.false28, %cond.true27
  br label %cond.end61

cond.end61:                                       ; preds = %cond.false60, %cond.end
  %cond62 = phi i32 [ %cond59, %cond.end ], [ 0, %cond.false60 ]
  br label %cond.end63

cond.end63:                                       ; preds = %cond.end61, %cond.true17
  %cond64 = phi i32 [ %conv21, %cond.true17 ], [ %cond62, %cond.end61 ]
  br label %cond.end65

cond.end65:                                       ; preds = %cond.end63, %cond.true13
  %cond66 = phi i32 [ 1, %cond.true13 ], [ %cond64, %cond.end63 ]
  br label %cond.end68

cond.false67:                                     ; preds = %cond.false, %cond.true
  br label %cond.end68

cond.end68:                                       ; preds = %cond.false67, %cond.end65
  %cond69 = phi i32 [ %cond66, %cond.end65 ], [ 0, %cond.false67 ]
  %conv70 = sext i32 %cond69 to i64
  store i64 %conv70, i64* %len, align 8
  %tobool71 = icmp ne i64 %conv70, 0
  br i1 %tobool71, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end68
  %37 = load i64, i64* %len, align 8
  %38 = load i8*, i8** %p.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %38, i64 %37
  store i8* %add.ptr, i8** %p.addr, align 8
  br label %if.end80

if.else:                                          ; preds = %cond.end68
  %39 = load i8, i8* %recognize_comment.addr, align 1
  %tobool72 = trunc i8 %39 to i1
  br i1 %tobool72, label %land.lhs.true74, label %if.else79

land.lhs.true74:                                  ; preds = %if.else
  %40 = load i8*, i8** %p.addr, align 8
  %41 = load i8, i8* %40, align 1
  %conv75 = sext i8 %41 to i32
  %cmp76 = icmp eq i32 %conv75, 35
  br i1 %cmp76, label %if.then78, label %if.else79

if.then78:                                        ; preds = %land.lhs.true74
  %42 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %43 = load i8*, i8** %p.addr, align 8
  %call = call i8* @S_reg_skipcomment(%struct.RExC_state_t* %42, i8* %43)
  store i8* %call, i8** %p.addr, align 8
  br label %if.end

if.else79:                                        ; preds = %land.lhs.true74, %if.else
  br label %while.end

if.end:                                           ; preds = %if.then78
  br label %if.end80

if.end80:                                         ; preds = %if.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %if.else79, %while.cond
  %44 = load i8*, i8** %p.addr, align 8
  ret i8* %44
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @S_reg_skipcomment(%struct.RExC_state_t* %pRExC_state, i8* %p) #0 {
entry:
  %retval = alloca i8*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %p.addr = alloca i8*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %p.addr, align 8
  %1 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1, i32 0, i32 7
  %2 = load i8*, i8** %end, align 8
  %cmp = icmp ult i8* %0, %2
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %p.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %p.addr, align 8
  %4 = load i8, i8* %incdec.ptr, align 1
  %conv = sext i8 %4 to i32
  %cmp1 = icmp eq i32 %conv, 10
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load i8*, i8** %p.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 1
  store i8* %add.ptr, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %6, i32 0, i32 16
  %7 = load i32, i32* %seen, align 8
  %or = or i32 %7, 512
  store i32 %or, i32* %seen, align 8
  %8 = load i8*, i8** %p.addr, align 8
  store i8* %8, i8** %retval, align 8
  br label %return

return:                                           ; preds = %while.end, %if.then
  %9 = load i8*, i8** %retval, align 8
  ret i8* %9
}

declare dso_local zeroext i1 @Perl__is_utf8_perl_idstart(i8*) #1

declare dso_local zeroext i1 @Perl__is_utf8_FOO(i8 zeroext, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.regnode* @S_regpiece(%struct.RExC_state_t* %pRExC_state, i32* %flagp, i32 %depth) #0 {
entry:
  %retval = alloca %struct.regnode*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %flagp.addr = alloca i32*, align 8
  %depth.addr = alloca i32, align 4
  %ret = alloca %struct.regnode*, align 8
  %op = alloca i8, align 1
  %next = alloca i8*, align 8
  %flags = alloca i32, align 4
  %origparse = alloca i8*, align 8
  %min = alloca i32, align 4
  %max = alloca i32, align 4
  %maxpos = alloca i8*, align 8
  %uv = alloca i64, align 8
  %orig_emit = alloca %struct.regnode*, align 8
  %ellipses = alloca i8*, align 8
  %len = alloca i64, align 8
  %endptr = alloca i8*, align 8
  %offset = alloca i64, align 8
  %offset113 = alloca i64, align 8
  %offset174 = alloca i64, align 8
  %offset223 = alloca i64, align 8
  %offset274 = alloca i64, align 8
  %offset323 = alloca i64, align 8
  %w = alloca %struct.regnode*, align 8
  %offset525 = alloca i64, align 8
  %ender = alloca %struct.regnode*, align 8
  %offset644 = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i32* %flagp, i32** %flagp.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 8
  %1 = load i8*, i8** %parse, align 8
  store i8* %1, i8** %origparse, align 8
  store i32 32767, i32* %max, align 4
  store i8* null, i8** %maxpos, align 8
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 12
  %3 = load %struct.regnode*, %struct.regnode** %emit, align 8
  store %struct.regnode* %3, %struct.regnode** %orig_emit, align 8
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %5 = load i32, i32* %depth.addr, align 4
  %add = add i32 %5, 1
  %call = call %struct.regnode* @S_regatom(%struct.RExC_state_t* %4, i32* %flags, i32 %add)
  store %struct.regnode* %call, %struct.regnode** %ret, align 8
  %6 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %cmp = icmp eq %struct.regnode* %6, null
  br i1 %cmp, label %if.then, label %if.end14

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %flags, align 4
  %and = and i32 %7, 48
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %8 = load i32, i32* %flags, align 4
  %and2 = and i32 %8, 48
  %9 = load i32*, i32** %flagp.addr, align 8
  %10 = load i32, i32* %9, align 4
  %or = or i32 %10, %and2
  store i32 %or, i32* %9, align 4
  br label %if.end13

if.else:                                          ; preds = %if.then
  br label %do.body

do.body:                                          ; preds = %if.else
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses, align 8
  %11 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %11, i32 0, i32 7
  %12 = load i8*, i8** %end, align 8
  %13 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %13, i32 0, i32 2
  %14 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %12 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %14 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %len, align 8
  %15 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit3 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %15, i32 0, i32 12
  %16 = load %struct.regnode*, %struct.regnode** %emit3, align 8
  %17 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %17, i32 0, i32 13
  %18 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp4 = icmp eq %struct.regnode* %16, %18
  br i1 %cmp4, label %if.end, label %if.then5

if.then5:                                         ; preds = %do.body
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %19, i32 0, i32 3
  %20 = load %struct.p5rx*, %struct.p5rx** %rx_sv, align 8
  %21 = bitcast %struct.p5rx* %20 to i8*
  %22 = bitcast i8* %21 to %struct.sv*
  %23 = bitcast %struct.sv* %22 to i8*
  call void @Perl_save_pushptr(i8* %23, i32 11)
  br label %if.end

if.end:                                           ; preds = %if.then5, %do.body
  %24 = load i64, i64* %len, align 8
  %cmp6 = icmp sgt i64 %24, 127
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end
  store i64 117, i64* %len, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end
  %25 = load i32, i32* %flags, align 4
  %conv = sext i32 %25 to i64
  %26 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %26, i32 0, i32 25
  %27 = load i32, i32* %utf8, align 8
  %tobool9 = icmp ne i32 %27, 0
  %28 = zext i1 %tobool9 to i64
  %cond = select i1 %tobool9, i32 1, i32 0
  %tobool10 = icmp ne i32 %cond, 0
  %29 = zext i1 %tobool10 to i64
  %cond11 = select i1 %tobool10, i32 1, i32 0
  %30 = load i64, i64* %len, align 8
  %31 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp12 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %31, i32 0, i32 2
  %32 = load i8*, i8** %precomp12, align 8
  %33 = load i8*, i8** %ellipses, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.279, i64 0, i64 0), i64 %conv, i32 %cond11, i64 %30, i8* %32, i8* %33)
  br label %do.end

do.end:                                           ; preds = %if.end8
  br label %if.end13

if.end13:                                         ; preds = %do.end, %if.then1
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end14:                                         ; preds = %entry
  %34 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse15 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %34, i32 0, i32 8
  %35 = load i8*, i8** %parse15, align 8
  %36 = load i8, i8* %35, align 1
  store i8 %36, i8* %op, align 1
  %37 = load i8, i8* %op, align 1
  %conv16 = sext i8 %37 to i32
  %cmp17 = icmp eq i32 %conv16, 123
  br i1 %cmp17, label %land.lhs.true, label %if.end437

land.lhs.true:                                    ; preds = %if.end14
  %38 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse19 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %38, i32 0, i32 8
  %39 = load i8*, i8** %parse19, align 8
  %call20 = call i32 @S_regcurly(i8* %39)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then22, label %if.end437

if.then22:                                        ; preds = %land.lhs.true
  store i8* null, i8** %maxpos, align 8
  %40 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse23 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %40, i32 0, i32 8
  %41 = load i8*, i8** %parse23, align 8
  %add.ptr = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %add.ptr, i8** %next, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end37, %if.then22
  %42 = load i8*, i8** %next, align 8
  %43 = load i8, i8* %42, align 1
  %idxprom = zext i8 %43 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %44 = load i32, i32* %arrayidx, align 4
  %and24 = and i32 %44, 2
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.cond
  br i1 true, label %lor.end, label %lor.rhs

cond.false:                                       ; preds = %while.cond
  br i1 false, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.false, %cond.true
  %45 = load i8*, i8** %next, align 8
  %46 = load i8, i8* %45, align 1
  %conv26 = sext i8 %46 to i32
  %cmp27 = icmp eq i32 %conv26, 44
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.false, %cond.true
  %47 = phi i1 [ true, %cond.false ], [ true, %cond.true ], [ %cmp27, %lor.rhs ]
  br i1 %47, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %48 = load i8*, i8** %next, align 8
  %49 = load i8, i8* %48, align 1
  %conv29 = sext i8 %49 to i32
  %cmp30 = icmp eq i32 %conv29, 44
  br i1 %cmp30, label %if.then32, label %if.end37

if.then32:                                        ; preds = %while.body
  %50 = load i8*, i8** %maxpos, align 8
  %tobool33 = icmp ne i8* %50, null
  br i1 %tobool33, label %if.then34, label %if.else35

if.then34:                                        ; preds = %if.then32
  br label %while.end

if.else35:                                        ; preds = %if.then32
  %51 = load i8*, i8** %next, align 8
  store i8* %51, i8** %maxpos, align 8
  br label %if.end36

if.end36:                                         ; preds = %if.else35
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %while.body
  %52 = load i8*, i8** %next, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %52, i32 1
  store i8* %incdec.ptr, i8** %next, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then34, %lor.end
  %53 = load i8*, i8** %next, align 8
  %54 = load i8, i8* %53, align 1
  %conv38 = sext i8 %54 to i32
  %cmp39 = icmp eq i32 %conv38, 125
  br i1 %cmp39, label %if.then41, label %if.end436

if.then41:                                        ; preds = %while.end
  %55 = load i8*, i8** %maxpos, align 8
  %tobool42 = icmp ne i8* %55, null
  br i1 %tobool42, label %if.end44, label %if.then43

if.then43:                                        ; preds = %if.then41
  %56 = load i8*, i8** %next, align 8
  store i8* %56, i8** %maxpos, align 8
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %if.then41
  %57 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse45 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %57, i32 0, i32 8
  %58 = load i8*, i8** %parse45, align 8
  %incdec.ptr46 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %incdec.ptr46, i8** %parse45, align 8
  %59 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse47 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %59, i32 0, i32 8
  %60 = load i8*, i8** %parse47, align 8
  %61 = load i8, i8* %60, align 1
  %idxprom48 = zext i8 %61 to i64
  %arrayidx49 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom48
  %62 = load i32, i32* %arrayidx49, align 4
  %and50 = and i32 %62, 2
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %cond.true52, label %cond.false53

cond.true52:                                      ; preds = %if.end44
  br i1 true, label %if.then54, label %if.else146

cond.false53:                                     ; preds = %if.end44
  br i1 false, label %if.then54, label %if.else146

if.then54:                                        ; preds = %cond.false53, %cond.true52
  %63 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse55 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %63, i32 0, i32 8
  %64 = load i8*, i8** %parse55, align 8
  %call56 = call zeroext i1 @Perl_grok_atoUV(i8* %64, i64* %uv, i8** %endptr)
  br i1 %call56, label %if.end100, label %if.then57

if.then57:                                        ; preds = %if.then54
  br label %do.body58

do.body58:                                        ; preds = %if.then57
  %65 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit59 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %65, i32 0, i32 12
  %66 = load %struct.regnode*, %struct.regnode** %emit59, align 8
  %67 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy60 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %67, i32 0, i32 13
  %68 = bitcast %struct.regnode_ssc* %emit_dummy60 to %struct.regnode*
  %cmp61 = icmp eq %struct.regnode* %66, %68
  br i1 %cmp61, label %if.end65, label %if.then63

if.then63:                                        ; preds = %do.body58
  %69 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv64 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %69, i32 0, i32 3
  %70 = load %struct.p5rx*, %struct.p5rx** %rx_sv64, align 8
  %71 = bitcast %struct.p5rx* %70 to i8*
  %72 = bitcast i8* %71 to %struct.sv*
  %73 = bitcast %struct.sv* %72 to i8*
  call void @Perl_save_pushptr(i8* %73, i32 11)
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %do.body58
  br label %do.body66

do.body66:                                        ; preds = %if.end65
  %74 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse67 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %74, i32 0, i32 8
  %75 = load i8*, i8** %parse67, align 8
  %76 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end68 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %76, i32 0, i32 7
  %77 = load i8*, i8** %end68, align 8
  %cmp69 = icmp ugt i8* %75, %77
  br i1 %cmp69, label %cond.true71, label %cond.false73

cond.true71:                                      ; preds = %do.body66
  %78 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end72 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %78, i32 0, i32 7
  %79 = load i8*, i8** %end72, align 8
  br label %cond.end

cond.false73:                                     ; preds = %do.body66
  %80 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse74 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %80, i32 0, i32 8
  %81 = load i8*, i8** %parse74, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false73, %cond.true71
  %cond75 = phi i8* [ %79, %cond.true71 ], [ %81, %cond.false73 ]
  %82 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp76 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %82, i32 0, i32 2
  %83 = load i8*, i8** %precomp76, align 8
  %sub.ptr.lhs.cast77 = ptrtoint i8* %cond75 to i64
  %sub.ptr.rhs.cast78 = ptrtoint i8* %83 to i64
  %sub.ptr.sub79 = sub i64 %sub.ptr.lhs.cast77, %sub.ptr.rhs.cast78
  store i64 %sub.ptr.sub79, i64* %offset, align 8
  %84 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf880 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %84, i32 0, i32 25
  %85 = load i32, i32* %utf880, align 8
  %tobool81 = icmp ne i32 %85, 0
  %86 = zext i1 %tobool81 to i64
  %cond82 = select i1 %tobool81, i32 1, i32 0
  %tobool83 = icmp ne i32 %cond82, 0
  %87 = zext i1 %tobool83 to i64
  %cond84 = select i1 %tobool83, i32 1, i32 0
  %88 = load i64, i64* %offset, align 8
  %89 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp85 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %89, i32 0, i32 2
  %90 = load i8*, i8** %precomp85, align 8
  %91 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf886 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %91, i32 0, i32 25
  %92 = load i32, i32* %utf886, align 8
  %tobool87 = icmp ne i32 %92, 0
  %93 = zext i1 %tobool87 to i64
  %cond88 = select i1 %tobool87, i32 1, i32 0
  %tobool89 = icmp ne i32 %cond88, 0
  %94 = zext i1 %tobool89 to i64
  %cond90 = select i1 %tobool89, i32 1, i32 0
  %95 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end91 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %95, i32 0, i32 7
  %96 = load i8*, i8** %end91, align 8
  %97 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp92 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %97, i32 0, i32 2
  %98 = load i8*, i8** %precomp92, align 8
  %sub.ptr.lhs.cast93 = ptrtoint i8* %96 to i64
  %sub.ptr.rhs.cast94 = ptrtoint i8* %98 to i64
  %sub.ptr.sub95 = sub i64 %sub.ptr.lhs.cast93, %sub.ptr.rhs.cast94
  %99 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %sub.ptr.sub95, %99
  %100 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp96 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %100, i32 0, i32 2
  %101 = load i8*, i8** %precomp96, align 8
  %102 = load i64, i64* %offset, align 8
  %add.ptr97 = getelementptr inbounds i8, i8* %101, i64 %102
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.280, i64 0, i64 0), i32 %cond84, i64 %88, i8* %90, i32 %cond90, i64 %sub, i8* %add.ptr97)
  br label %do.end98

do.end98:                                         ; preds = %cond.end
  br label %do.end99

do.end99:                                         ; preds = %do.end98
  br label %if.end100

if.end100:                                        ; preds = %do.end99, %if.then54
  %103 = load i64, i64* %uv, align 8
  %cmp101 = icmp uge i64 %103, 32767
  br i1 %cmp101, label %if.then103, label %if.end144

if.then103:                                       ; preds = %if.end100
  br label %do.body104

do.body104:                                       ; preds = %if.then103
  %104 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit105 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %104, i32 0, i32 12
  %105 = load %struct.regnode*, %struct.regnode** %emit105, align 8
  %106 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy106 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %106, i32 0, i32 13
  %107 = bitcast %struct.regnode_ssc* %emit_dummy106 to %struct.regnode*
  %cmp107 = icmp eq %struct.regnode* %105, %107
  br i1 %cmp107, label %if.end111, label %if.then109

if.then109:                                       ; preds = %do.body104
  %108 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv110 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %108, i32 0, i32 3
  %109 = load %struct.p5rx*, %struct.p5rx** %rx_sv110, align 8
  %110 = bitcast %struct.p5rx* %109 to i8*
  %111 = bitcast i8* %110 to %struct.sv*
  %112 = bitcast %struct.sv* %111 to i8*
  call void @Perl_save_pushptr(i8* %112, i32 11)
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %do.body104
  br label %do.body112

do.body112:                                       ; preds = %if.end111
  %113 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse114 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %113, i32 0, i32 8
  %114 = load i8*, i8** %parse114, align 8
  %115 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp115 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %115, i32 0, i32 2
  %116 = load i8*, i8** %precomp115, align 8
  %sub.ptr.lhs.cast116 = ptrtoint i8* %114 to i64
  %sub.ptr.rhs.cast117 = ptrtoint i8* %116 to i64
  %sub.ptr.sub118 = sub i64 %sub.ptr.lhs.cast116, %sub.ptr.rhs.cast117
  store i64 %sub.ptr.sub118, i64* %offset113, align 8
  %117 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8119 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %117, i32 0, i32 25
  %118 = load i32, i32* %utf8119, align 8
  %tobool120 = icmp ne i32 %118, 0
  %119 = zext i1 %tobool120 to i64
  %cond121 = select i1 %tobool120, i32 1, i32 0
  %tobool122 = icmp ne i32 %cond121, 0
  %120 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8123 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %120, i32 0, i32 25
  %121 = load i32, i32* %utf8123, align 8
  %tobool124 = icmp ne i32 %121, 0
  %122 = zext i1 %tobool124 to i64
  %cond125 = select i1 %tobool124, i32 1, i32 0
  %tobool126 = icmp ne i32 %cond125, 0
  %123 = zext i1 %tobool126 to i64
  %cond127 = select i1 %tobool126, i32 1, i32 0
  %124 = load i64, i64* %offset113, align 8
  %125 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp128 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %125, i32 0, i32 2
  %126 = load i8*, i8** %precomp128, align 8
  %127 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8129 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %127, i32 0, i32 25
  %128 = load i32, i32* %utf8129, align 8
  %tobool130 = icmp ne i32 %128, 0
  %129 = zext i1 %tobool130 to i64
  %cond131 = select i1 %tobool130, i32 1, i32 0
  %tobool132 = icmp ne i32 %cond131, 0
  %130 = zext i1 %tobool132 to i64
  %cond133 = select i1 %tobool132, i32 1, i32 0
  %131 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end134 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %131, i32 0, i32 7
  %132 = load i8*, i8** %end134, align 8
  %133 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp135 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %133, i32 0, i32 2
  %134 = load i8*, i8** %precomp135, align 8
  %sub.ptr.lhs.cast136 = ptrtoint i8* %132 to i64
  %sub.ptr.rhs.cast137 = ptrtoint i8* %134 to i64
  %sub.ptr.sub138 = sub i64 %sub.ptr.lhs.cast136, %sub.ptr.rhs.cast137
  %135 = load i64, i64* %offset113, align 8
  %sub139 = sub nsw i64 %sub.ptr.sub138, %135
  %136 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp140 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %136, i32 0, i32 2
  %137 = load i8*, i8** %precomp140, align 8
  %138 = load i64, i64* %offset113, align 8
  %add.ptr141 = getelementptr inbounds i8, i8* %137, i64 %138
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool122, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.281, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 32766, i32 %cond127, i64 %124, i8* %126, i32 %cond133, i64 %sub139, i8* %add.ptr141)
  br label %do.end142

do.end142:                                        ; preds = %do.body112
  br label %do.end143

do.end143:                                        ; preds = %do.end142
  br label %if.end144

if.end144:                                        ; preds = %do.end143, %if.end100
  %139 = load i64, i64* %uv, align 8
  %conv145 = trunc i64 %139 to i32
  store i32 %conv145, i32* %min, align 4
  br label %if.end147

if.else146:                                       ; preds = %cond.false53, %cond.true52
  store i32 0, i32* %min, align 4
  br label %if.end147

if.end147:                                        ; preds = %if.else146, %if.end144
  %140 = load i8*, i8** %maxpos, align 8
  %141 = load i8, i8* %140, align 1
  %conv148 = sext i8 %141 to i32
  %cmp149 = icmp eq i32 %conv148, 44
  br i1 %cmp149, label %if.then151, label %if.else153

if.then151:                                       ; preds = %if.end147
  %142 = load i8*, i8** %maxpos, align 8
  %incdec.ptr152 = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %incdec.ptr152, i8** %maxpos, align 8
  br label %if.end155

if.else153:                                       ; preds = %if.end147
  %143 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse154 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %143, i32 0, i32 8
  %144 = load i8*, i8** %parse154, align 8
  store i8* %144, i8** %maxpos, align 8
  br label %if.end155

if.end155:                                        ; preds = %if.else153, %if.then151
  %145 = load i8*, i8** %maxpos, align 8
  %146 = load i8, i8* %145, align 1
  %idxprom156 = zext i8 %146 to i64
  %arrayidx157 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom156
  %147 = load i32, i32* %arrayidx157, align 4
  %and158 = and i32 %147, 2
  %tobool159 = icmp ne i32 %and158, 0
  br i1 %tobool159, label %cond.true160, label %cond.false161

cond.true160:                                     ; preds = %if.end155
  br i1 true, label %if.then162, label %if.else256

cond.false161:                                    ; preds = %if.end155
  br i1 false, label %if.then162, label %if.else256

if.then162:                                       ; preds = %cond.false161, %cond.true160
  %148 = load i8*, i8** %maxpos, align 8
  %call163 = call zeroext i1 @Perl_grok_atoUV(i8* %148, i64* %uv, i8** %endptr)
  br i1 %call163, label %if.end210, label %if.then164

if.then164:                                       ; preds = %if.then162
  br label %do.body165

do.body165:                                       ; preds = %if.then164
  %149 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit166 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %149, i32 0, i32 12
  %150 = load %struct.regnode*, %struct.regnode** %emit166, align 8
  %151 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy167 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %151, i32 0, i32 13
  %152 = bitcast %struct.regnode_ssc* %emit_dummy167 to %struct.regnode*
  %cmp168 = icmp eq %struct.regnode* %150, %152
  br i1 %cmp168, label %if.end172, label %if.then170

if.then170:                                       ; preds = %do.body165
  %153 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv171 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %153, i32 0, i32 3
  %154 = load %struct.p5rx*, %struct.p5rx** %rx_sv171, align 8
  %155 = bitcast %struct.p5rx* %154 to i8*
  %156 = bitcast i8* %155 to %struct.sv*
  %157 = bitcast %struct.sv* %156 to i8*
  call void @Perl_save_pushptr(i8* %157, i32 11)
  br label %if.end172

if.end172:                                        ; preds = %if.then170, %do.body165
  br label %do.body173

do.body173:                                       ; preds = %if.end172
  %158 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse175 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %158, i32 0, i32 8
  %159 = load i8*, i8** %parse175, align 8
  %160 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end176 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %160, i32 0, i32 7
  %161 = load i8*, i8** %end176, align 8
  %cmp177 = icmp ugt i8* %159, %161
  br i1 %cmp177, label %cond.true179, label %cond.false181

cond.true179:                                     ; preds = %do.body173
  %162 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end180 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %162, i32 0, i32 7
  %163 = load i8*, i8** %end180, align 8
  br label %cond.end183

cond.false181:                                    ; preds = %do.body173
  %164 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse182 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %164, i32 0, i32 8
  %165 = load i8*, i8** %parse182, align 8
  br label %cond.end183

cond.end183:                                      ; preds = %cond.false181, %cond.true179
  %cond184 = phi i8* [ %163, %cond.true179 ], [ %165, %cond.false181 ]
  %166 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp185 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %166, i32 0, i32 2
  %167 = load i8*, i8** %precomp185, align 8
  %sub.ptr.lhs.cast186 = ptrtoint i8* %cond184 to i64
  %sub.ptr.rhs.cast187 = ptrtoint i8* %167 to i64
  %sub.ptr.sub188 = sub i64 %sub.ptr.lhs.cast186, %sub.ptr.rhs.cast187
  store i64 %sub.ptr.sub188, i64* %offset174, align 8
  %168 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8189 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %168, i32 0, i32 25
  %169 = load i32, i32* %utf8189, align 8
  %tobool190 = icmp ne i32 %169, 0
  %170 = zext i1 %tobool190 to i64
  %cond191 = select i1 %tobool190, i32 1, i32 0
  %tobool192 = icmp ne i32 %cond191, 0
  %171 = zext i1 %tobool192 to i64
  %cond193 = select i1 %tobool192, i32 1, i32 0
  %172 = load i64, i64* %offset174, align 8
  %173 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp194 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %173, i32 0, i32 2
  %174 = load i8*, i8** %precomp194, align 8
  %175 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8195 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %175, i32 0, i32 25
  %176 = load i32, i32* %utf8195, align 8
  %tobool196 = icmp ne i32 %176, 0
  %177 = zext i1 %tobool196 to i64
  %cond197 = select i1 %tobool196, i32 1, i32 0
  %tobool198 = icmp ne i32 %cond197, 0
  %178 = zext i1 %tobool198 to i64
  %cond199 = select i1 %tobool198, i32 1, i32 0
  %179 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end200 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %179, i32 0, i32 7
  %180 = load i8*, i8** %end200, align 8
  %181 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp201 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %181, i32 0, i32 2
  %182 = load i8*, i8** %precomp201, align 8
  %sub.ptr.lhs.cast202 = ptrtoint i8* %180 to i64
  %sub.ptr.rhs.cast203 = ptrtoint i8* %182 to i64
  %sub.ptr.sub204 = sub i64 %sub.ptr.lhs.cast202, %sub.ptr.rhs.cast203
  %183 = load i64, i64* %offset174, align 8
  %sub205 = sub nsw i64 %sub.ptr.sub204, %183
  %184 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp206 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %184, i32 0, i32 2
  %185 = load i8*, i8** %precomp206, align 8
  %186 = load i64, i64* %offset174, align 8
  %add.ptr207 = getelementptr inbounds i8, i8* %185, i64 %186
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.280, i64 0, i64 0), i32 %cond193, i64 %172, i8* %174, i32 %cond199, i64 %sub205, i8* %add.ptr207)
  br label %do.end208

do.end208:                                        ; preds = %cond.end183
  br label %do.end209

do.end209:                                        ; preds = %do.end208
  br label %if.end210

if.end210:                                        ; preds = %do.end209, %if.then162
  %187 = load i64, i64* %uv, align 8
  %cmp211 = icmp uge i64 %187, 32767
  br i1 %cmp211, label %if.then213, label %if.end254

if.then213:                                       ; preds = %if.end210
  br label %do.body214

do.body214:                                       ; preds = %if.then213
  %188 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit215 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %188, i32 0, i32 12
  %189 = load %struct.regnode*, %struct.regnode** %emit215, align 8
  %190 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy216 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %190, i32 0, i32 13
  %191 = bitcast %struct.regnode_ssc* %emit_dummy216 to %struct.regnode*
  %cmp217 = icmp eq %struct.regnode* %189, %191
  br i1 %cmp217, label %if.end221, label %if.then219

if.then219:                                       ; preds = %do.body214
  %192 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv220 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %192, i32 0, i32 3
  %193 = load %struct.p5rx*, %struct.p5rx** %rx_sv220, align 8
  %194 = bitcast %struct.p5rx* %193 to i8*
  %195 = bitcast i8* %194 to %struct.sv*
  %196 = bitcast %struct.sv* %195 to i8*
  call void @Perl_save_pushptr(i8* %196, i32 11)
  br label %if.end221

if.end221:                                        ; preds = %if.then219, %do.body214
  br label %do.body222

do.body222:                                       ; preds = %if.end221
  %197 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse224 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %197, i32 0, i32 8
  %198 = load i8*, i8** %parse224, align 8
  %199 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp225 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %199, i32 0, i32 2
  %200 = load i8*, i8** %precomp225, align 8
  %sub.ptr.lhs.cast226 = ptrtoint i8* %198 to i64
  %sub.ptr.rhs.cast227 = ptrtoint i8* %200 to i64
  %sub.ptr.sub228 = sub i64 %sub.ptr.lhs.cast226, %sub.ptr.rhs.cast227
  store i64 %sub.ptr.sub228, i64* %offset223, align 8
  %201 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8229 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %201, i32 0, i32 25
  %202 = load i32, i32* %utf8229, align 8
  %tobool230 = icmp ne i32 %202, 0
  %203 = zext i1 %tobool230 to i64
  %cond231 = select i1 %tobool230, i32 1, i32 0
  %tobool232 = icmp ne i32 %cond231, 0
  %204 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8233 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %204, i32 0, i32 25
  %205 = load i32, i32* %utf8233, align 8
  %tobool234 = icmp ne i32 %205, 0
  %206 = zext i1 %tobool234 to i64
  %cond235 = select i1 %tobool234, i32 1, i32 0
  %tobool236 = icmp ne i32 %cond235, 0
  %207 = zext i1 %tobool236 to i64
  %cond237 = select i1 %tobool236, i32 1, i32 0
  %208 = load i64, i64* %offset223, align 8
  %209 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp238 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %209, i32 0, i32 2
  %210 = load i8*, i8** %precomp238, align 8
  %211 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8239 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %211, i32 0, i32 25
  %212 = load i32, i32* %utf8239, align 8
  %tobool240 = icmp ne i32 %212, 0
  %213 = zext i1 %tobool240 to i64
  %cond241 = select i1 %tobool240, i32 1, i32 0
  %tobool242 = icmp ne i32 %cond241, 0
  %214 = zext i1 %tobool242 to i64
  %cond243 = select i1 %tobool242, i32 1, i32 0
  %215 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end244 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %215, i32 0, i32 7
  %216 = load i8*, i8** %end244, align 8
  %217 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp245 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %217, i32 0, i32 2
  %218 = load i8*, i8** %precomp245, align 8
  %sub.ptr.lhs.cast246 = ptrtoint i8* %216 to i64
  %sub.ptr.rhs.cast247 = ptrtoint i8* %218 to i64
  %sub.ptr.sub248 = sub i64 %sub.ptr.lhs.cast246, %sub.ptr.rhs.cast247
  %219 = load i64, i64* %offset223, align 8
  %sub249 = sub nsw i64 %sub.ptr.sub248, %219
  %220 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp250 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %220, i32 0, i32 2
  %221 = load i8*, i8** %precomp250, align 8
  %222 = load i64, i64* %offset223, align 8
  %add.ptr251 = getelementptr inbounds i8, i8* %221, i64 %222
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool232, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.281, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 32766, i32 %cond237, i64 %208, i8* %210, i32 %cond243, i64 %sub249, i8* %add.ptr251)
  br label %do.end252

do.end252:                                        ; preds = %do.body222
  br label %do.end253

do.end253:                                        ; preds = %do.end252
  br label %if.end254

if.end254:                                        ; preds = %do.end253, %if.end210
  %223 = load i64, i64* %uv, align 8
  %conv255 = trunc i64 %223 to i32
  store i32 %conv255, i32* %max, align 4
  br label %if.end257

if.else256:                                       ; preds = %cond.false161, %cond.true160
  store i32 32767, i32* %max, align 4
  br label %if.end257

if.end257:                                        ; preds = %if.else256, %if.end254
  %224 = load i8*, i8** %next, align 8
  %225 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse258 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %225, i32 0, i32 8
  store i8* %224, i8** %parse258, align 8
  %226 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call259 = call i8* @S_nextchar(%struct.RExC_state_t* %226)
  %227 = load i32, i32* %max, align 4
  %228 = load i32, i32* %min, align 4
  %cmp260 = icmp slt i32 %227, %228
  br i1 %cmp260, label %if.then262, label %if.else303

if.then262:                                       ; preds = %if.end257
  %229 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit263 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %229, i32 0, i32 12
  %230 = load %struct.regnode*, %struct.regnode** %emit263, align 8
  %231 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy264 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %231, i32 0, i32 13
  %232 = bitcast %struct.regnode_ssc* %emit_dummy264 to %struct.regnode*
  %cmp265 = icmp eq %struct.regnode* %230, %232
  br i1 %cmp265, label %if.then267, label %if.else272

if.then267:                                       ; preds = %if.then262
  %233 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %233, i32 0, i32 17
  %234 = load i64, i64* %size, align 8
  %sub268 = sub nsw i64 %234, 1
  %235 = load i8, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @regarglen, i64 0, i64 82), align 2
  %conv269 = zext i8 %235 to i64
  %sub270 = sub nsw i64 %sub268, %conv269
  %236 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size271 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %236, i32 0, i32 17
  store i64 %sub270, i64* %size271, align 8
  br label %if.end301

if.else272:                                       ; preds = %if.then262
  br label %do.body273

do.body273:                                       ; preds = %if.else272
  %237 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse275 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %237, i32 0, i32 8
  %238 = load i8*, i8** %parse275, align 8
  %239 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp276 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %239, i32 0, i32 2
  %240 = load i8*, i8** %precomp276, align 8
  %sub.ptr.lhs.cast277 = ptrtoint i8* %238 to i64
  %sub.ptr.rhs.cast278 = ptrtoint i8* %240 to i64
  %sub.ptr.sub279 = sub i64 %sub.ptr.lhs.cast277, %sub.ptr.rhs.cast278
  store i64 %sub.ptr.sub279, i64* %offset274, align 8
  %241 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8280 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %241, i32 0, i32 25
  %242 = load i32, i32* %utf8280, align 8
  %tobool281 = icmp ne i32 %242, 0
  %243 = zext i1 %tobool281 to i64
  %cond282 = select i1 %tobool281, i32 1, i32 0
  %tobool283 = icmp ne i32 %cond282, 0
  %244 = zext i1 %tobool283 to i64
  %cond284 = select i1 %tobool283, i32 1, i32 0
  %245 = load i64, i64* %offset274, align 8
  %246 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp285 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %246, i32 0, i32 2
  %247 = load i8*, i8** %precomp285, align 8
  %248 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8286 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %248, i32 0, i32 25
  %249 = load i32, i32* %utf8286, align 8
  %tobool287 = icmp ne i32 %249, 0
  %250 = zext i1 %tobool287 to i64
  %cond288 = select i1 %tobool287, i32 1, i32 0
  %tobool289 = icmp ne i32 %cond288, 0
  %251 = zext i1 %tobool289 to i64
  %cond290 = select i1 %tobool289, i32 1, i32 0
  %252 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end291 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %252, i32 0, i32 7
  %253 = load i8*, i8** %end291, align 8
  %254 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp292 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %254, i32 0, i32 2
  %255 = load i8*, i8** %precomp292, align 8
  %sub.ptr.lhs.cast293 = ptrtoint i8* %253 to i64
  %sub.ptr.rhs.cast294 = ptrtoint i8* %255 to i64
  %sub.ptr.sub295 = sub i64 %sub.ptr.lhs.cast293, %sub.ptr.rhs.cast294
  %256 = load i64, i64* %offset274, align 8
  %sub296 = sub nsw i64 %sub.ptr.sub295, %256
  %257 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp297 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %257, i32 0, i32 2
  %258 = load i8*, i8** %precomp297, align 8
  %259 = load i64, i64* %offset274, align 8
  %add.ptr298 = getelementptr inbounds i8, i8* %258, i64 %259
  call void (i32, i8*, ...) @Perl_ck_warner(i32 20, i8* getelementptr inbounds ([102 x i8], [102 x i8]* @.str.282, i64 0, i64 0), i32 %cond284, i64 %245, i8* %247, i32 %cond290, i64 %sub296, i8* %add.ptr298)
  br label %do.end299

do.end299:                                        ; preds = %do.body273
  %260 = load %struct.regnode*, %struct.regnode** %orig_emit, align 8
  %261 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit300 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %261, i32 0, i32 12
  store %struct.regnode* %260, %struct.regnode** %emit300, align 8
  br label %if.end301

if.end301:                                        ; preds = %do.end299, %if.then267
  %262 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call302 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %262, i8 zeroext 82)
  store %struct.regnode* %call302, %struct.regnode** %ret, align 8
  %263 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %263, %struct.regnode** %retval, align 8
  br label %return

if.else303:                                       ; preds = %if.end257
  %264 = load i32, i32* %min, align 4
  %265 = load i32, i32* %max, align 4
  %cmp304 = icmp eq i32 %264, %265
  br i1 %cmp304, label %land.lhs.true306, label %if.end353

land.lhs.true306:                                 ; preds = %if.else303
  %266 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse307 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %266, i32 0, i32 8
  %267 = load i8*, i8** %parse307, align 8
  %268 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end308 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %268, i32 0, i32 7
  %269 = load i8*, i8** %end308, align 8
  %cmp309 = icmp ult i8* %267, %269
  br i1 %cmp309, label %land.lhs.true311, label %if.end353

land.lhs.true311:                                 ; preds = %land.lhs.true306
  %270 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse312 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %270, i32 0, i32 8
  %271 = load i8*, i8** %parse312, align 8
  %272 = load i8, i8* %271, align 1
  %conv313 = sext i8 %272 to i32
  %cmp314 = icmp eq i32 %conv313, 63
  br i1 %cmp314, label %if.then316, label %if.end353

if.then316:                                       ; preds = %land.lhs.true311
  %273 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit317 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %273, i32 0, i32 12
  %274 = load %struct.regnode*, %struct.regnode** %emit317, align 8
  %275 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy318 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %275, i32 0, i32 13
  %276 = bitcast %struct.regnode_ssc* %emit_dummy318 to %struct.regnode*
  %cmp319 = icmp eq %struct.regnode* %274, %276
  br i1 %cmp319, label %if.end352, label %if.then321

if.then321:                                       ; preds = %if.then316
  br label %do.body322

do.body322:                                       ; preds = %if.then321
  %277 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse324 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %277, i32 0, i32 8
  %278 = load i8*, i8** %parse324, align 8
  %add.ptr325 = getelementptr inbounds i8, i8* %278, i64 1
  %279 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp326 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %279, i32 0, i32 2
  %280 = load i8*, i8** %precomp326, align 8
  %sub.ptr.lhs.cast327 = ptrtoint i8* %add.ptr325 to i64
  %sub.ptr.rhs.cast328 = ptrtoint i8* %280 to i64
  %sub.ptr.sub329 = sub i64 %sub.ptr.lhs.cast327, %sub.ptr.rhs.cast328
  store i64 %sub.ptr.sub329, i64* %offset323, align 8
  %281 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse330 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %281, i32 0, i32 8
  %282 = load i8*, i8** %parse330, align 8
  %283 = load i8, i8* %282, align 1
  %conv331 = sext i8 %283 to i32
  %284 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8332 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %284, i32 0, i32 25
  %285 = load i32, i32* %utf8332, align 8
  %tobool333 = icmp ne i32 %285, 0
  %286 = zext i1 %tobool333 to i64
  %cond334 = select i1 %tobool333, i32 1, i32 0
  %tobool335 = icmp ne i32 %cond334, 0
  %287 = zext i1 %tobool335 to i64
  %cond336 = select i1 %tobool335, i32 1, i32 0
  %288 = load i64, i64* %offset323, align 8
  %289 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp337 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %289, i32 0, i32 2
  %290 = load i8*, i8** %precomp337, align 8
  %291 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8338 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %291, i32 0, i32 25
  %292 = load i32, i32* %utf8338, align 8
  %tobool339 = icmp ne i32 %292, 0
  %293 = zext i1 %tobool339 to i64
  %cond340 = select i1 %tobool339, i32 1, i32 0
  %tobool341 = icmp ne i32 %cond340, 0
  %294 = zext i1 %tobool341 to i64
  %cond342 = select i1 %tobool341, i32 1, i32 0
  %295 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end343 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %295, i32 0, i32 7
  %296 = load i8*, i8** %end343, align 8
  %297 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp344 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %297, i32 0, i32 2
  %298 = load i8*, i8** %precomp344, align 8
  %sub.ptr.lhs.cast345 = ptrtoint i8* %296 to i64
  %sub.ptr.rhs.cast346 = ptrtoint i8* %298 to i64
  %sub.ptr.sub347 = sub i64 %sub.ptr.lhs.cast345, %sub.ptr.rhs.cast346
  %299 = load i64, i64* %offset323, align 8
  %sub348 = sub nsw i64 %sub.ptr.sub347, %299
  %300 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp349 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %300, i32 0, i32 2
  %301 = load i8*, i8** %precomp349, align 8
  %302 = load i64, i64* %offset323, align 8
  %add.ptr350 = getelementptr inbounds i8, i8* %301, i64 %302
  call void (i32, i8*, ...) @Perl_ck_warner(i32 20, i8* getelementptr inbounds ([102 x i8], [102 x i8]* @.str.283, i64 0, i64 0), i32 %conv331, i32 %cond336, i64 %288, i8* %290, i32 %cond342, i64 %sub348, i8* %add.ptr350)
  br label %do.end351

do.end351:                                        ; preds = %do.body322
  br label %if.end352

if.end352:                                        ; preds = %do.end351, %if.then316
  br label %if.end353

if.end353:                                        ; preds = %if.end352, %land.lhs.true311, %land.lhs.true306, %if.else303
  br label %if.end354

if.end354:                                        ; preds = %if.end353
  br label %do_curly

do_curly:                                         ; preds = %if.then506, %if.then501, %if.then477, %if.end354
  %303 = load i32, i32* %flags, align 4
  %and355 = and i32 %303, 2
  %tobool356 = icmp ne i32 %and355, 0
  br i1 %tobool356, label %if.then357, label %if.else367

if.then357:                                       ; preds = %do_curly
  %304 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %304, i32 0, i32 14
  %305 = load i32, i32* %naughty, align 8
  %cmp358 = icmp slt i32 %305, 10
  br i1 %cmp358, label %if.then360, label %if.end365

if.then360:                                       ; preds = %if.then357
  %306 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty361 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %306, i32 0, i32 14
  %307 = load i32, i32* %naughty361, align 8
  %div = sdiv i32 %307, 2
  %add362 = add nsw i32 %div, 2
  %308 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty363 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %308, i32 0, i32 14
  %309 = load i32, i32* %naughty363, align 8
  %add364 = add nsw i32 %309, %add362
  store i32 %add364, i32* %naughty363, align 8
  br label %if.end365

if.end365:                                        ; preds = %if.then360, %if.then357
  %310 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %311 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %312 = load i32, i32* %depth.addr, align 4
  %add366 = add i32 %312, 1
  call void @S_reginsert(%struct.RExC_state_t* %310, i8 zeroext 44, %struct.regnode* %311, i32 %add366)
  br label %if.end412

if.else367:                                       ; preds = %do_curly
  %313 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call368 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %313, i8 zeroext 48)
  store %struct.regnode* %call368, %struct.regnode** %w, align 8
  %314 = load %struct.regnode*, %struct.regnode** %w, align 8
  %flags369 = getelementptr inbounds %struct.regnode, %struct.regnode* %314, i32 0, i32 0
  store i8 0, i8* %flags369, align 2
  %315 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %316 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %317 = load %struct.regnode*, %struct.regnode** %w, align 8
  %318 = load i32, i32* %depth.addr, align 4
  %add370 = add i32 %318, 1
  call void @S_regtail(%struct.RExC_state_t* %315, %struct.regnode* %316, %struct.regnode* %317, i32 %add370)
  %319 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit371 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %319, i32 0, i32 12
  %320 = load %struct.regnode*, %struct.regnode** %emit371, align 8
  %321 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy372 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %321, i32 0, i32 13
  %322 = bitcast %struct.regnode_ssc* %emit_dummy372 to %struct.regnode*
  %cmp373 = icmp eq %struct.regnode* %320, %322
  br i1 %cmp373, label %if.end380, label %land.lhs.true375

land.lhs.true375:                                 ; preds = %if.else367
  %323 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %323, i32 0, i32 20
  %324 = load i32, i32* %extralen, align 8
  %tobool376 = icmp ne i32 %324, 0
  br i1 %tobool376, label %if.then377, label %if.end380

if.then377:                                       ; preds = %land.lhs.true375
  %325 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %326 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %327 = load i32, i32* %depth.addr, align 4
  %add378 = add i32 %327, 1
  call void @S_reginsert(%struct.RExC_state_t* %325, i8 zeroext 61, %struct.regnode* %326, i32 %add378)
  %328 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %329 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %330 = load i32, i32* %depth.addr, align 4
  %add379 = add i32 %330, 1
  call void @S_reginsert(%struct.RExC_state_t* %328, i8 zeroext 40, %struct.regnode* %329, i32 %add379)
  %331 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %331, i32 0, i32 2
  store i16 3, i16* %next_off, align 2
  br label %if.end380

if.end380:                                        ; preds = %if.then377, %land.lhs.true375, %if.else367
  %332 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %333 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %334 = load i32, i32* %depth.addr, align 4
  %add381 = add i32 %334, 1
  call void @S_reginsert(%struct.RExC_state_t* %332, i8 zeroext 47, %struct.regnode* %333, i32 %add381)
  %335 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit382 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %335, i32 0, i32 12
  %336 = load %struct.regnode*, %struct.regnode** %emit382, align 8
  %337 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy383 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %337, i32 0, i32 13
  %338 = bitcast %struct.regnode_ssc* %emit_dummy383 to %struct.regnode*
  %cmp384 = icmp eq %struct.regnode* %336, %338
  br i1 %cmp384, label %if.end391, label %land.lhs.true386

land.lhs.true386:                                 ; preds = %if.end380
  %339 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen387 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %339, i32 0, i32 20
  %340 = load i32, i32* %extralen387, align 8
  %tobool388 = icmp ne i32 %340, 0
  br i1 %tobool388, label %if.then389, label %if.end391

if.then389:                                       ; preds = %land.lhs.true386
  %341 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %next_off390 = getelementptr inbounds %struct.regnode, %struct.regnode* %341, i32 0, i32 2
  store i16 3, i16* %next_off390, align 2
  br label %if.end391

if.end391:                                        ; preds = %if.then389, %land.lhs.true386, %if.end380
  %342 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %343 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %344 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call392 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %344, i8 zeroext 40)
  %345 = load i32, i32* %depth.addr, align 4
  %add393 = add i32 %345, 1
  call void @S_regtail(%struct.RExC_state_t* %342, %struct.regnode* %343, %struct.regnode* %call392, i32 %add393)
  %346 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit394 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %346, i32 0, i32 12
  %347 = load %struct.regnode*, %struct.regnode** %emit394, align 8
  %348 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy395 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %348, i32 0, i32 13
  %349 = bitcast %struct.regnode_ssc* %emit_dummy395 to %struct.regnode*
  %cmp396 = icmp eq %struct.regnode* %347, %349
  br i1 %cmp396, label %if.then398, label %if.end401

if.then398:                                       ; preds = %if.end391
  %350 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %whilem_seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %350, i32 0, i32 9
  %351 = load i64, i64* %whilem_seen, align 8
  %inc = add nsw i64 %351, 1
  store i64 %inc, i64* %whilem_seen, align 8
  %352 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %extralen399 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %352, i32 0, i32 20
  %353 = load i32, i32* %extralen399, align 8
  %add400 = add nsw i32 %353, 3
  store i32 %add400, i32* %extralen399, align 8
  br label %if.end401

if.end401:                                        ; preds = %if.then398, %if.end391
  %354 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty402 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %354, i32 0, i32 14
  %355 = load i32, i32* %naughty402, align 8
  %cmp403 = icmp slt i32 %355, 10
  br i1 %cmp403, label %if.then405, label %if.end411

if.then405:                                       ; preds = %if.end401
  %356 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty406 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %356, i32 0, i32 14
  %357 = load i32, i32* %naughty406, align 8
  %div407 = sdiv i32 %357, 1
  %add408 = add nsw i32 %div407, 4
  %358 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty409 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %358, i32 0, i32 14
  %359 = load i32, i32* %naughty409, align 8
  %add410 = add nsw i32 %359, %add408
  store i32 %add410, i32* %naughty409, align 8
  br label %if.end411

if.end411:                                        ; preds = %if.then405, %if.end401
  br label %if.end412

if.end412:                                        ; preds = %if.end411, %if.end365
  %360 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags413 = getelementptr inbounds %struct.regnode, %struct.regnode* %360, i32 0, i32 0
  store i8 0, i8* %flags413, align 2
  %361 = load i32, i32* %min, align 4
  %cmp414 = icmp sgt i32 %361, 0
  br i1 %cmp414, label %if.then416, label %if.end417

if.then416:                                       ; preds = %if.end412
  %362 = load i32*, i32** %flagp.addr, align 8
  store i32 0, i32* %362, align 4
  br label %if.end417

if.end417:                                        ; preds = %if.then416, %if.end412
  %363 = load i32, i32* %max, align 4
  %cmp418 = icmp sgt i32 %363, 0
  br i1 %cmp418, label %if.then420, label %if.end422

if.then420:                                       ; preds = %if.end417
  %364 = load i32*, i32** %flagp.addr, align 8
  %365 = load i32, i32* %364, align 4
  %or421 = or i32 %365, 1
  store i32 %or421, i32* %364, align 4
  br label %if.end422

if.end422:                                        ; preds = %if.then420, %if.end417
  %366 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit423 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %366, i32 0, i32 12
  %367 = load %struct.regnode*, %struct.regnode** %emit423, align 8
  %368 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy424 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %368, i32 0, i32 13
  %369 = bitcast %struct.regnode_ssc* %emit_dummy424 to %struct.regnode*
  %cmp425 = icmp eq %struct.regnode* %367, %369
  br i1 %cmp425, label %if.end430, label %if.then427

if.then427:                                       ; preds = %if.end422
  %370 = load i32, i32* %min, align 4
  %conv428 = trunc i32 %370 to i16
  %371 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %372 = bitcast %struct.regnode* %371 to %struct.regnode_2*
  %arg1 = getelementptr inbounds %struct.regnode_2, %struct.regnode_2* %372, i32 0, i32 3
  store i16 %conv428, i16* %arg1, align 2
  %373 = load i32, i32* %max, align 4
  %conv429 = trunc i32 %373 to i16
  %374 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %375 = bitcast %struct.regnode* %374 to %struct.regnode_2*
  %arg2 = getelementptr inbounds %struct.regnode_2, %struct.regnode_2* %375, i32 0, i32 4
  store i16 %conv429, i16* %arg2, align 2
  br label %if.end430

if.end430:                                        ; preds = %if.then427, %if.end422
  %376 = load i32, i32* %max, align 4
  %cmp431 = icmp eq i32 %376, 32767
  br i1 %cmp431, label %if.then433, label %if.end435

if.then433:                                       ; preds = %if.end430
  %377 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %377, i32 0, i32 16
  %378 = load i32, i32* %seen, align 8
  %or434 = or i32 %378, 4096
  store i32 %or434, i32* %seen, align 8
  br label %if.end435

if.end435:                                        ; preds = %if.then433, %if.end430
  br label %nest_check

if.end436:                                        ; preds = %while.end
  br label %if.end437

if.end437:                                        ; preds = %if.end436, %land.lhs.true, %if.end14
  %379 = load i8, i8* %op, align 1
  %conv438 = sext i8 %379 to i32
  %cmp439 = icmp eq i32 %conv438, 42
  br i1 %cmp439, label %if.end449, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end437
  %380 = load i8, i8* %op, align 1
  %conv441 = sext i8 %380 to i32
  %cmp442 = icmp eq i32 %conv441, 43
  br i1 %cmp442, label %if.end449, label %lor.lhs.false444

lor.lhs.false444:                                 ; preds = %lor.lhs.false
  %381 = load i8, i8* %op, align 1
  %conv445 = sext i8 %381 to i32
  %cmp446 = icmp eq i32 %conv445, 63
  br i1 %cmp446, label %if.end449, label %if.then448

if.then448:                                       ; preds = %lor.lhs.false444
  %382 = load i32, i32* %flags, align 4
  %383 = load i32*, i32** %flagp.addr, align 8
  store i32 %382, i32* %383, align 4
  %384 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %384, %struct.regnode** %retval, align 8
  br label %return

if.end449:                                        ; preds = %lor.lhs.false444, %lor.lhs.false, %if.end437
  %385 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call450 = call i8* @S_nextchar(%struct.RExC_state_t* %385)
  %386 = load i8, i8* %op, align 1
  %conv451 = sext i8 %386 to i32
  %cmp452 = icmp ne i32 %conv451, 43
  %387 = zext i1 %cmp452 to i64
  %cond454 = select i1 %cmp452, i32 5, i32 1
  %388 = load i32*, i32** %flagp.addr, align 8
  store i32 %cond454, i32* %388, align 4
  %389 = load i8, i8* %op, align 1
  %conv455 = sext i8 %389 to i32
  %cmp456 = icmp eq i32 %conv455, 42
  br i1 %cmp456, label %land.lhs.true458, label %if.else473

land.lhs.true458:                                 ; preds = %if.end449
  %390 = load i32, i32* %flags, align 4
  %and459 = and i32 %390, 2
  %tobool460 = icmp ne i32 %and459, 0
  br i1 %tobool460, label %if.then461, label %if.else473

if.then461:                                       ; preds = %land.lhs.true458
  %391 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %392 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %393 = load i32, i32* %depth.addr, align 4
  %add462 = add i32 %393, 1
  call void @S_reginsert(%struct.RExC_state_t* %391, i8 zeroext 42, %struct.regnode* %392, i32 %add462)
  %394 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags463 = getelementptr inbounds %struct.regnode, %struct.regnode* %394, i32 0, i32 0
  store i8 0, i8* %flags463, align 2
  %395 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty464 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %395, i32 0, i32 14
  %396 = load i32, i32* %naughty464, align 8
  %cmp465 = icmp slt i32 %396, 10
  br i1 %cmp465, label %if.then467, label %if.end470

if.then467:                                       ; preds = %if.then461
  %397 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty468 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %397, i32 0, i32 14
  %398 = load i32, i32* %naughty468, align 8
  %add469 = add nsw i32 %398, 4
  store i32 %add469, i32* %naughty468, align 8
  br label %if.end470

if.end470:                                        ; preds = %if.then467, %if.then461
  %399 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen471 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %399, i32 0, i32 16
  %400 = load i32, i32* %seen471, align 8
  %or472 = or i32 %400, 4096
  store i32 %or472, i32* %seen471, align 8
  br label %if.end511

if.else473:                                       ; preds = %land.lhs.true458, %if.end449
  %401 = load i8, i8* %op, align 1
  %conv474 = sext i8 %401 to i32
  %cmp475 = icmp eq i32 %conv474, 42
  br i1 %cmp475, label %if.then477, label %if.else478

if.then477:                                       ; preds = %if.else473
  store i32 0, i32* %min, align 4
  br label %do_curly

if.else478:                                       ; preds = %if.else473
  %402 = load i8, i8* %op, align 1
  %conv479 = sext i8 %402 to i32
  %cmp480 = icmp eq i32 %conv479, 43
  br i1 %cmp480, label %land.lhs.true482, label %if.else497

land.lhs.true482:                                 ; preds = %if.else478
  %403 = load i32, i32* %flags, align 4
  %and483 = and i32 %403, 2
  %tobool484 = icmp ne i32 %and483, 0
  br i1 %tobool484, label %if.then485, label %if.else497

if.then485:                                       ; preds = %land.lhs.true482
  %404 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %405 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %406 = load i32, i32* %depth.addr, align 4
  %add486 = add i32 %406, 1
  call void @S_reginsert(%struct.RExC_state_t* %404, i8 zeroext 43, %struct.regnode* %405, i32 %add486)
  %407 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags487 = getelementptr inbounds %struct.regnode, %struct.regnode* %407, i32 0, i32 0
  store i8 0, i8* %flags487, align 2
  %408 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty488 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %408, i32 0, i32 14
  %409 = load i32, i32* %naughty488, align 8
  %cmp489 = icmp slt i32 %409, 10
  br i1 %cmp489, label %if.then491, label %if.end494

if.then491:                                       ; preds = %if.then485
  %410 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty492 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %410, i32 0, i32 14
  %411 = load i32, i32* %naughty492, align 8
  %add493 = add nsw i32 %411, 3
  store i32 %add493, i32* %naughty492, align 8
  br label %if.end494

if.end494:                                        ; preds = %if.then491, %if.then485
  %412 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen495 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %412, i32 0, i32 16
  %413 = load i32, i32* %seen495, align 8
  %or496 = or i32 %413, 4096
  store i32 %or496, i32* %seen495, align 8
  br label %if.end509

if.else497:                                       ; preds = %land.lhs.true482, %if.else478
  %414 = load i8, i8* %op, align 1
  %conv498 = sext i8 %414 to i32
  %cmp499 = icmp eq i32 %conv498, 43
  br i1 %cmp499, label %if.then501, label %if.else502

if.then501:                                       ; preds = %if.else497
  store i32 1, i32* %min, align 4
  br label %do_curly

if.else502:                                       ; preds = %if.else497
  %415 = load i8, i8* %op, align 1
  %conv503 = sext i8 %415 to i32
  %cmp504 = icmp eq i32 %conv503, 63
  br i1 %cmp504, label %if.then506, label %if.end507

if.then506:                                       ; preds = %if.else502
  store i32 0, i32* %min, align 4
  store i32 1, i32* %max, align 4
  br label %do_curly

if.end507:                                        ; preds = %if.else502
  br label %if.end508

if.end508:                                        ; preds = %if.end507
  br label %if.end509

if.end509:                                        ; preds = %if.end508, %if.end494
  br label %if.end510

if.end510:                                        ; preds = %if.end509
  br label %if.end511

if.end511:                                        ; preds = %if.end510, %if.end470
  br label %nest_check

nest_check:                                       ; preds = %if.end511, %if.end435
  %416 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit512 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %416, i32 0, i32 12
  %417 = load %struct.regnode*, %struct.regnode** %emit512, align 8
  %418 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy513 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %418, i32 0, i32 13
  %419 = bitcast %struct.regnode_ssc* %emit_dummy513 to %struct.regnode*
  %cmp514 = icmp eq %struct.regnode* %417, %419
  br i1 %cmp514, label %if.end569, label %land.lhs.true516

land.lhs.true516:                                 ; preds = %nest_check
  %420 = load i32, i32* %flags, align 4
  %and517 = and i32 %420, 9
  %tobool518 = icmp ne i32 %and517, 0
  br i1 %tobool518, label %if.end569, label %land.lhs.true519

land.lhs.true519:                                 ; preds = %land.lhs.true516
  %421 = load i32, i32* %max, align 4
  %cmp520 = icmp sgt i32 %421, 10922
  br i1 %cmp520, label %if.then522, label %if.end569

if.then522:                                       ; preds = %land.lhs.true519
  %422 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv523 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %422, i32 0, i32 3
  %423 = load %struct.p5rx*, %struct.p5rx** %rx_sv523, align 8
  %424 = bitcast %struct.p5rx* %423 to i8*
  %425 = bitcast i8* %424 to %struct.sv*
  %426 = bitcast %struct.sv* %425 to i8*
  call void @Perl_save_pushptr(i8* %426, i32 11)
  br label %do.body524

do.body524:                                       ; preds = %if.then522
  %427 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse526 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %427, i32 0, i32 8
  %428 = load i8*, i8** %parse526, align 8
  %429 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp527 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %429, i32 0, i32 2
  %430 = load i8*, i8** %precomp527, align 8
  %sub.ptr.lhs.cast528 = ptrtoint i8* %428 to i64
  %sub.ptr.rhs.cast529 = ptrtoint i8* %430 to i64
  %sub.ptr.sub530 = sub i64 %sub.ptr.lhs.cast528, %sub.ptr.rhs.cast529
  store i64 %sub.ptr.sub530, i64* %offset525, align 8
  %431 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8531 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %431, i32 0, i32 25
  %432 = load i32, i32* %utf8531, align 8
  %tobool532 = icmp ne i32 %432, 0
  %433 = zext i1 %tobool532 to i64
  %cond533 = select i1 %tobool532, i32 1, i32 0
  %tobool534 = icmp ne i32 %cond533, 0
  %434 = zext i1 %tobool534 to i64
  %cond535 = select i1 %tobool534, i32 1, i32 0
  %435 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse536 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %435, i32 0, i32 8
  %436 = load i8*, i8** %parse536, align 8
  %437 = load i8*, i8** %origparse, align 8
  %cmp537 = icmp uge i8* %436, %437
  br i1 %cmp537, label %cond.true539, label %cond.false544

cond.true539:                                     ; preds = %do.body524
  %438 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse540 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %438, i32 0, i32 8
  %439 = load i8*, i8** %parse540, align 8
  %440 = load i8*, i8** %origparse, align 8
  %sub.ptr.lhs.cast541 = ptrtoint i8* %439 to i64
  %sub.ptr.rhs.cast542 = ptrtoint i8* %440 to i64
  %sub.ptr.sub543 = sub i64 %sub.ptr.lhs.cast541, %sub.ptr.rhs.cast542
  br label %cond.end545

cond.false544:                                    ; preds = %do.body524
  br label %cond.end545

cond.end545:                                      ; preds = %cond.false544, %cond.true539
  %cond546 = phi i64 [ %sub.ptr.sub543, %cond.true539 ], [ 0, %cond.false544 ]
  %441 = load i8*, i8** %origparse, align 8
  %442 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8547 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %442, i32 0, i32 25
  %443 = load i32, i32* %utf8547, align 8
  %tobool548 = icmp ne i32 %443, 0
  %444 = zext i1 %tobool548 to i64
  %cond549 = select i1 %tobool548, i32 1, i32 0
  %tobool550 = icmp ne i32 %cond549, 0
  %445 = zext i1 %tobool550 to i64
  %cond551 = select i1 %tobool550, i32 1, i32 0
  %446 = load i64, i64* %offset525, align 8
  %447 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp552 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %447, i32 0, i32 2
  %448 = load i8*, i8** %precomp552, align 8
  %449 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8553 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %449, i32 0, i32 25
  %450 = load i32, i32* %utf8553, align 8
  %tobool554 = icmp ne i32 %450, 0
  %451 = zext i1 %tobool554 to i64
  %cond555 = select i1 %tobool554, i32 1, i32 0
  %tobool556 = icmp ne i32 %cond555, 0
  %452 = zext i1 %tobool556 to i64
  %cond557 = select i1 %tobool556, i32 1, i32 0
  %453 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end558 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %453, i32 0, i32 7
  %454 = load i8*, i8** %end558, align 8
  %455 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp559 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %455, i32 0, i32 2
  %456 = load i8*, i8** %precomp559, align 8
  %sub.ptr.lhs.cast560 = ptrtoint i8* %454 to i64
  %sub.ptr.rhs.cast561 = ptrtoint i8* %456 to i64
  %sub.ptr.sub562 = sub i64 %sub.ptr.lhs.cast560, %sub.ptr.rhs.cast561
  %457 = load i64, i64* %offset525, align 8
  %sub563 = sub nsw i64 %sub.ptr.sub562, %457
  %458 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp564 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %458, i32 0, i32 2
  %459 = load i8*, i8** %precomp564, align 8
  %460 = load i64, i64* %offset525, align 8
  %add.ptr565 = getelementptr inbounds i8, i8* %459, i64 %460
  call void (i32, i8*, ...) @Perl_ck_warner(i32 20, i8* getelementptr inbounds ([102 x i8], [102 x i8]* @.str.284, i64 0, i64 0), i32 %cond535, i64 %cond546, i8* %441, i32 %cond551, i64 %446, i8* %448, i32 %cond557, i64 %sub563, i8* %add.ptr565)
  br label %do.end566

do.end566:                                        ; preds = %cond.end545
  %461 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv567 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %461, i32 0, i32 3
  %462 = load %struct.p5rx*, %struct.p5rx** %rx_sv567, align 8
  %463 = bitcast %struct.p5rx* %462 to i8*
  %464 = bitcast i8* %463 to %struct.sv*
  %call568 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %464)
  %465 = bitcast %struct.sv* %call568 to %struct.p5rx*
  br label %if.end569

if.end569:                                        ; preds = %do.end566, %land.lhs.true519, %land.lhs.true516, %nest_check
  %466 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse570 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %466, i32 0, i32 8
  %467 = load i8*, i8** %parse570, align 8
  %468 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end571 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %468, i32 0, i32 7
  %469 = load i8*, i8** %end571, align 8
  %cmp572 = icmp ult i8* %467, %469
  br i1 %cmp572, label %land.lhs.true574, label %if.else584

land.lhs.true574:                                 ; preds = %if.end569
  %470 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse575 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %470, i32 0, i32 8
  %471 = load i8*, i8** %parse575, align 8
  %472 = load i8, i8* %471, align 1
  %conv576 = sext i8 %472 to i32
  %cmp577 = icmp eq i32 %conv576, 63
  br i1 %cmp577, label %if.then579, label %if.else584

if.then579:                                       ; preds = %land.lhs.true574
  %473 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call580 = call i8* @S_nextchar(%struct.RExC_state_t* %473)
  %474 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %475 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %476 = load i32, i32* %depth.addr, align 4
  %add581 = add i32 %476, 1
  call void @S_reginsert(%struct.RExC_state_t* %474, i8 zeroext 69, %struct.regnode* %475, i32 %add581)
  %477 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %478 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %479 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %add.ptr582 = getelementptr inbounds %struct.regnode, %struct.regnode* %479, i64 1
  %480 = load i32, i32* %depth.addr, align 4
  %add583 = add i32 %480, 1
  call void @S_regtail(%struct.RExC_state_t* %477, %struct.regnode* %478, %struct.regnode* %add.ptr582, i32 %add583)
  br label %if.end603

if.else584:                                       ; preds = %land.lhs.true574, %if.end569
  %481 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse585 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %481, i32 0, i32 8
  %482 = load i8*, i8** %parse585, align 8
  %483 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end586 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %483, i32 0, i32 7
  %484 = load i8*, i8** %end586, align 8
  %cmp587 = icmp ult i8* %482, %484
  br i1 %cmp587, label %land.lhs.true589, label %if.end602

land.lhs.true589:                                 ; preds = %if.else584
  %485 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse590 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %485, i32 0, i32 8
  %486 = load i8*, i8** %parse590, align 8
  %487 = load i8, i8* %486, align 1
  %conv591 = sext i8 %487 to i32
  %cmp592 = icmp eq i32 %conv591, 43
  br i1 %cmp592, label %if.then594, label %if.end602

if.then594:                                       ; preds = %land.lhs.true589
  %488 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call595 = call i8* @S_nextchar(%struct.RExC_state_t* %488)
  %489 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call596 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %489, i8 zeroext 1)
  store %struct.regnode* %call596, %struct.regnode** %ender, align 8
  %490 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %491 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %492 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %493 = load i32, i32* %depth.addr, align 4
  %add597 = add i32 %493, 1
  call void @S_regtail(%struct.RExC_state_t* %490, %struct.regnode* %491, %struct.regnode* %492, i32 %add597)
  %494 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %495 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %496 = load i32, i32* %depth.addr, align 4
  %add598 = add i32 %496, 1
  call void @S_reginsert(%struct.RExC_state_t* %494, i8 zeroext 65, %struct.regnode* %495, i32 %add598)
  %497 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags599 = getelementptr inbounds %struct.regnode, %struct.regnode* %497, i32 0, i32 0
  store i8 0, i8* %flags599, align 2
  %498 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call600 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %498, i8 zeroext 41)
  store %struct.regnode* %call600, %struct.regnode** %ender, align 8
  %499 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %500 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %501 = load %struct.regnode*, %struct.regnode** %ender, align 8
  %502 = load i32, i32* %depth.addr, align 4
  %add601 = add i32 %502, 1
  call void @S_regtail(%struct.RExC_state_t* %499, %struct.regnode* %500, %struct.regnode* %501, i32 %add601)
  br label %if.end602

if.end602:                                        ; preds = %if.then594, %land.lhs.true589, %if.else584
  br label %if.end603

if.end603:                                        ; preds = %if.end602, %if.then579
  %503 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse604 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %503, i32 0, i32 8
  %504 = load i8*, i8** %parse604, align 8
  %505 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end605 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %505, i32 0, i32 7
  %506 = load i8*, i8** %end605, align 8
  %cmp606 = icmp ult i8* %504, %506
  br i1 %cmp606, label %land.lhs.true608, label %if.end680

land.lhs.true608:                                 ; preds = %if.end603
  %507 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse609 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %507, i32 0, i32 8
  %508 = load i8*, i8** %parse609, align 8
  %509 = load i8, i8* %508, align 1
  %conv610 = sext i8 %509 to i32
  %cmp611 = icmp eq i32 %conv610, 42
  br i1 %cmp611, label %if.then632, label %lor.lhs.false613

lor.lhs.false613:                                 ; preds = %land.lhs.true608
  %510 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse614 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %510, i32 0, i32 8
  %511 = load i8*, i8** %parse614, align 8
  %512 = load i8, i8* %511, align 1
  %conv615 = sext i8 %512 to i32
  %cmp616 = icmp eq i32 %conv615, 43
  br i1 %cmp616, label %if.then632, label %lor.lhs.false618

lor.lhs.false618:                                 ; preds = %lor.lhs.false613
  %513 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse619 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %513, i32 0, i32 8
  %514 = load i8*, i8** %parse619, align 8
  %515 = load i8, i8* %514, align 1
  %conv620 = sext i8 %515 to i32
  %cmp621 = icmp eq i32 %conv620, 63
  br i1 %cmp621, label %if.then632, label %lor.lhs.false623

lor.lhs.false623:                                 ; preds = %lor.lhs.false618
  %516 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse624 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %516, i32 0, i32 8
  %517 = load i8*, i8** %parse624, align 8
  %518 = load i8, i8* %517, align 1
  %conv625 = sext i8 %518 to i32
  %cmp626 = icmp eq i32 %conv625, 123
  br i1 %cmp626, label %land.lhs.true628, label %if.end680

land.lhs.true628:                                 ; preds = %lor.lhs.false623
  %519 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse629 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %519, i32 0, i32 8
  %520 = load i8*, i8** %parse629, align 8
  %call630 = call i32 @S_regcurly(i8* %520)
  %tobool631 = icmp ne i32 %call630, 0
  br i1 %tobool631, label %if.then632, label %if.end680

if.then632:                                       ; preds = %land.lhs.true628, %lor.lhs.false618, %lor.lhs.false613, %land.lhs.true608
  %521 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse633 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %521, i32 0, i32 8
  %522 = load i8*, i8** %parse633, align 8
  %incdec.ptr634 = getelementptr inbounds i8, i8* %522, i32 1
  store i8* %incdec.ptr634, i8** %parse633, align 8
  br label %do.body635

do.body635:                                       ; preds = %if.then632
  %523 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit636 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %523, i32 0, i32 12
  %524 = load %struct.regnode*, %struct.regnode** %emit636, align 8
  %525 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy637 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %525, i32 0, i32 13
  %526 = bitcast %struct.regnode_ssc* %emit_dummy637 to %struct.regnode*
  %cmp638 = icmp eq %struct.regnode* %524, %526
  br i1 %cmp638, label %if.end642, label %if.then640

if.then640:                                       ; preds = %do.body635
  %527 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv641 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %527, i32 0, i32 3
  %528 = load %struct.p5rx*, %struct.p5rx** %rx_sv641, align 8
  %529 = bitcast %struct.p5rx* %528 to i8*
  %530 = bitcast i8* %529 to %struct.sv*
  %531 = bitcast %struct.sv* %530 to i8*
  call void @Perl_save_pushptr(i8* %531, i32 11)
  br label %if.end642

if.end642:                                        ; preds = %if.then640, %do.body635
  br label %do.body643

do.body643:                                       ; preds = %if.end642
  %532 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse645 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %532, i32 0, i32 8
  %533 = load i8*, i8** %parse645, align 8
  %534 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end646 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %534, i32 0, i32 7
  %535 = load i8*, i8** %end646, align 8
  %cmp647 = icmp ugt i8* %533, %535
  br i1 %cmp647, label %cond.true649, label %cond.false651

cond.true649:                                     ; preds = %do.body643
  %536 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end650 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %536, i32 0, i32 7
  %537 = load i8*, i8** %end650, align 8
  br label %cond.end653

cond.false651:                                    ; preds = %do.body643
  %538 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse652 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %538, i32 0, i32 8
  %539 = load i8*, i8** %parse652, align 8
  br label %cond.end653

cond.end653:                                      ; preds = %cond.false651, %cond.true649
  %cond654 = phi i8* [ %537, %cond.true649 ], [ %539, %cond.false651 ]
  %540 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp655 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %540, i32 0, i32 2
  %541 = load i8*, i8** %precomp655, align 8
  %sub.ptr.lhs.cast656 = ptrtoint i8* %cond654 to i64
  %sub.ptr.rhs.cast657 = ptrtoint i8* %541 to i64
  %sub.ptr.sub658 = sub i64 %sub.ptr.lhs.cast656, %sub.ptr.rhs.cast657
  store i64 %sub.ptr.sub658, i64* %offset644, align 8
  %542 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8659 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %542, i32 0, i32 25
  %543 = load i32, i32* %utf8659, align 8
  %tobool660 = icmp ne i32 %543, 0
  %544 = zext i1 %tobool660 to i64
  %cond661 = select i1 %tobool660, i32 1, i32 0
  %tobool662 = icmp ne i32 %cond661, 0
  %545 = zext i1 %tobool662 to i64
  %cond663 = select i1 %tobool662, i32 1, i32 0
  %546 = load i64, i64* %offset644, align 8
  %547 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp664 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %547, i32 0, i32 2
  %548 = load i8*, i8** %precomp664, align 8
  %549 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8665 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %549, i32 0, i32 25
  %550 = load i32, i32* %utf8665, align 8
  %tobool666 = icmp ne i32 %550, 0
  %551 = zext i1 %tobool666 to i64
  %cond667 = select i1 %tobool666, i32 1, i32 0
  %tobool668 = icmp ne i32 %cond667, 0
  %552 = zext i1 %tobool668 to i64
  %cond669 = select i1 %tobool668, i32 1, i32 0
  %553 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end670 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %553, i32 0, i32 7
  %554 = load i8*, i8** %end670, align 8
  %555 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp671 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %555, i32 0, i32 2
  %556 = load i8*, i8** %precomp671, align 8
  %sub.ptr.lhs.cast672 = ptrtoint i8* %554 to i64
  %sub.ptr.rhs.cast673 = ptrtoint i8* %556 to i64
  %sub.ptr.sub674 = sub i64 %sub.ptr.lhs.cast672, %sub.ptr.rhs.cast673
  %557 = load i64, i64* %offset644, align 8
  %sub675 = sub nsw i64 %sub.ptr.sub674, %557
  %558 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp676 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %558, i32 0, i32 2
  %559 = load i8*, i8** %precomp676, align 8
  %560 = load i64, i64* %offset644, align 8
  %add.ptr677 = getelementptr inbounds i8, i8* %559, i64 %560
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.285, i64 0, i64 0), i32 %cond663, i64 %546, i8* %548, i32 %cond669, i64 %sub675, i8* %add.ptr677)
  br label %do.end678

do.end678:                                        ; preds = %cond.end653
  br label %do.end679

do.end679:                                        ; preds = %do.end678
  br label %if.end680

if.end680:                                        ; preds = %do.end679, %land.lhs.true628, %lor.lhs.false623, %if.end603
  %561 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %561, %struct.regnode** %retval, align 8
  br label %return

return:                                           ; preds = %if.end680, %if.then448, %if.end301, %if.end13
  %562 = load %struct.regnode*, %struct.regnode** %retval, align 8
  ret %struct.regnode* %562
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.regnode* @S_regatom(%struct.RExC_state_t* %pRExC_state, i32* %flagp, i32 %depth) #0 {
entry:
  %retval = alloca %struct.regnode*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %flagp.addr = alloca i32*, align 8
  %depth.addr = alloca i32, align 4
  %ret = alloca %struct.regnode*, align 8
  %flags = alloca i32, align 4
  %parse_start = alloca i8*, align 8
  %op = alloca i8, align 1
  %invert = alloca i32, align 4
  %arg = alloca i8, align 1
  %oregcomp_parse = alloca i8*, align 8
  %offset = alloca i64, align 8
  %ellipses = alloca i8*, align 8
  %len = alloca i64, align 8
  %ellipses131 = alloca i8*, align 8
  %len132 = alloca i64, align 8
  %offset175 = alloca i64, align 8
  %offset223 = alloca i64, align 8
  %offset307 = alloca i64, align 8
  %charset = alloca i32, align 4
  %length = alloca i64, align 8
  %name = alloca i8, align 1
  %endbrace = alloca i8*, align 8
  %offset390 = alloca i64, align 8
  %offset438 = alloca i64, align 8
  %offset516 = alloca i64, align 8
  %offset572 = alloca i64, align 8
  %ellipses681 = alloca i8*, align 8
  %len682 = alloca i64, align 8
  %ch = alloca i8, align 1
  %offset748 = alloca i64, align 8
  %name_start = alloca i8*, align 8
  %num = alloca i32, align 4
  %sv_dat = alloca %struct.sv*, align 8
  %offset819 = alloca i64, align 8
  %num902 = alloca i32, align 4
  %hasbrace = alloca i8, align 1
  %isrel = alloca i8, align 1
  %offset959 = alloca i64, align 8
  %offset1016 = alloca i64, align 8
  %offset1062 = alloca i64, align 8
  %offset1116 = alloca i64, align 8
  %offset1201 = alloca i64, align 8
  %offset1258 = alloca i64, align 8
  %ellipses1340 = alloca i8*, align 8
  %len1341 = alloca i64, align 8
  %len1389 = alloca i64, align 8
  %ender = alloca i64, align 8
  %p = alloca i8*, align 8
  %s = alloca i8*, align 8
  %foldbuf = alloca [140 x i8], align 16
  %s0 = alloca i8*, align 8
  %upper_parse = alloca i8, align 1
  %node_type = alloca i8, align 1
  %next_is_quantifier = alloca i8, align 1
  %oldp = alloca i8*, align 8
  %maybe_exactfu = alloca i8, align 1
  %maybe_exact = alloca i8, align 1
  %ellipses1463 = alloca i8*, align 8
  %len1464 = alloca i64, align 8
  %result = alloca i64, align 8
  %error_msg = alloca i8*, align 8
  %valid = alloca i8, align 1
  %offset1540 = alloca i64, align 8
  %result1604 = alloca i64, align 8
  %error_msg1605 = alloca i8*, align 8
  %valid1606 = alloca i8, align 1
  %offset1632 = alloca i64, align 8
  %flags1722 = alloca i32, align 4
  %numlen = alloca i64, align 8
  %offset1760 = alloca i64, align 8
  %enc = alloca %struct.sv*, align 8
  %offset1815 = alloca i64, align 8
  %ellipses1856 = alloca i8*, align 8
  %len1857 = alloca i64, align 8
  %len1894 = alloca i32, align 4
  %offset1908 = alloca i64, align 8
  %offset1955 = alloca i64, align 8
  %numlen1992 = alloca i64, align 8
  %unilen = alloca i64, align 8
  %new_s = alloca i8*, align 8
  %folded = alloca i64, align 8
  %foldlen = alloca i64, align 8
  %full_len = alloca i64, align 8
  %iv = alloca i64, align 8
  %offset2533 = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i32* %flagp, i32** %flagp.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  store %struct.regnode* null, %struct.regnode** %ret, align 8
  store i32 0, i32* %flags, align 4
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 8
  %1 = load i8*, i8** %parse, align 8
  store i8* %1, i8** %parse_start, align 8
  store i32 0, i32* %invert, align 4
  %2 = load i32*, i32** %flagp.addr, align 8
  store i32 0, i32* %2, align 4
  br label %tryagain

tryagain:                                         ; preds = %if.then1381, %if.end124, %entry
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %3, i32 0, i32 8
  %4 = load i8*, i8** %parse1, align 8
  %5 = load i8, i8* %4, align 1
  %conv = zext i8 %5 to i32
  switch i32 %conv, label %sw.default1384 [
    i32 94, label %sw.bb
    i32 36, label %sw.bb5
    i32 46, label %sw.bb21
    i32 91, label %sw.bb35
    i32 40, label %sw.bb108
    i32 124, label %sw.bb160
    i32 41, label %sw.bb160
    i32 63, label %sw.bb211
    i32 43, label %sw.bb211
    i32 42, label %sw.bb211
    i32 92, label %sw.bb259
    i32 35, label %sw.bb1369
  ]

sw.bb:                                            ; preds = %tryagain
  %6 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %6, i32 0, i32 21
  %7 = load i32, i32* %seen_zerolen, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %seen_zerolen, align 4
  %8 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call = call i8* @S_nextchar(%struct.RExC_state_t* %8)
  %9 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %9, i32 0, i32 0
  %10 = load i32, i32* %flags2, align 8
  %and = and i32 %10, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb
  %11 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call3 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %11, i8 zeroext 3)
  store %struct.regnode* %call3, %struct.regnode** %ret, align 8
  br label %if.end

if.else:                                          ; preds = %sw.bb
  %12 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call4 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %12, i8 zeroext 2)
  store %struct.regnode* %call4, %struct.regnode** %ret, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog2570

sw.bb5:                                           ; preds = %tryagain
  %13 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call6 = call i8* @S_nextchar(%struct.RExC_state_t* %13)
  %14 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse7 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %14, i32 0, i32 8
  %15 = load i8*, i8** %parse7, align 8
  %16 = load i8, i8* %15, align 1
  %tobool8 = icmp ne i8 %16, 0
  br i1 %tobool8, label %if.then9, label %if.end12

if.then9:                                         ; preds = %sw.bb5
  %17 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen10 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %17, i32 0, i32 21
  %18 = load i32, i32* %seen_zerolen10, align 4
  %inc11 = add nsw i32 %18, 1
  store i32 %inc11, i32* %seen_zerolen10, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %sw.bb5
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags13 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %19, i32 0, i32 0
  %20 = load i32, i32* %flags13, align 8
  %and14 = and i32 %20, 1
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.then16, label %if.else18

if.then16:                                        ; preds = %if.end12
  %21 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call17 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %21, i8 zeroext 5)
  store %struct.regnode* %call17, %struct.regnode** %ret, align 8
  br label %if.end20

if.else18:                                        ; preds = %if.end12
  %22 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call19 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %22, i8 zeroext 4)
  store %struct.regnode* %call19, %struct.regnode** %ret, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.else18, %if.then16
  br label %sw.epilog2570

sw.bb21:                                          ; preds = %tryagain
  %23 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call22 = call i8* @S_nextchar(%struct.RExC_state_t* %23)
  %24 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags23 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %24, i32 0, i32 0
  %25 = load i32, i32* %flags23, align 8
  %and24 = and i32 %25, 2
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %if.then26, label %if.else28

if.then26:                                        ; preds = %sw.bb21
  %26 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call27 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %26, i8 zeroext 17)
  store %struct.regnode* %call27, %struct.regnode** %ret, align 8
  br label %if.end30

if.else28:                                        ; preds = %sw.bb21
  %27 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call29 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %27, i8 zeroext 16)
  store %struct.regnode* %call29, %struct.regnode** %ret, align 8
  br label %if.end30

if.end30:                                         ; preds = %if.else28, %if.then26
  %28 = load i32*, i32** %flagp.addr, align 8
  %29 = load i32, i32* %28, align 4
  %or = or i32 %29, 3
  store i32 %or, i32* %28, align 4
  %30 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %30, i32 0, i32 14
  %31 = load i32, i32* %naughty, align 8
  %cmp = icmp slt i32 %31, 10
  br i1 %cmp, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end30
  %32 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty33 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %32, i32 0, i32 14
  %33 = load i32, i32* %naughty33, align 8
  %add = add nsw i32 %33, 1
  store i32 %add, i32* %naughty33, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %if.end30
  br label %sw.epilog2570

sw.bb35:                                          ; preds = %tryagain
  %34 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse36 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %34, i32 0, i32 8
  %35 = load i8*, i8** %parse36, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %35, i32 1
  store i8* %incdec.ptr, i8** %parse36, align 8
  store i8* %incdec.ptr, i8** %oregcomp_parse, align 8
  %36 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %37 = load i32*, i32** %flagp.addr, align 8
  %38 = load i32, i32* %depth.addr, align 4
  %add37 = add i32 %38, 1
  %39 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %strict = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %39, i32 0, i32 45
  %40 = load i32, i32* %strict, align 4
  %tobool38 = icmp ne i32 %40, 0
  %call39 = call %struct.regnode* @S_regclass(%struct.RExC_state_t* %36, i32* %37, i32 %add37, i1 zeroext false, i1 zeroext true, i1 zeroext false, i1 zeroext %tobool38, %struct.sv** null)
  store %struct.regnode* %call39, %struct.regnode** %ret, align 8
  %41 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse40 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %41, i32 0, i32 8
  %42 = load i8*, i8** %parse40, align 8
  %43 = load i8, i8* %42, align 1
  %conv41 = sext i8 %43 to i32
  %cmp42 = icmp ne i32 %conv41, 93
  br i1 %cmp42, label %if.then44, label %if.end73

if.then44:                                        ; preds = %sw.bb35
  %44 = load i8*, i8** %oregcomp_parse, align 8
  %45 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse45 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %45, i32 0, i32 8
  store i8* %44, i8** %parse45, align 8
  br label %do.body

do.body:                                          ; preds = %if.then44
  %46 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %46, i32 0, i32 12
  %47 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %48 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %48, i32 0, i32 13
  %49 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp46 = icmp eq %struct.regnode* %47, %49
  br i1 %cmp46, label %if.end49, label %if.then48

if.then48:                                        ; preds = %do.body
  %50 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %50, i32 0, i32 3
  %51 = load %struct.p5rx*, %struct.p5rx** %rx_sv, align 8
  %52 = bitcast %struct.p5rx* %51 to i8*
  %53 = bitcast i8* %52 to %struct.sv*
  %54 = bitcast %struct.sv* %53 to i8*
  call void @Perl_save_pushptr(i8* %54, i32 11)
  br label %if.end49

if.end49:                                         ; preds = %if.then48, %do.body
  br label %do.body50

do.body50:                                        ; preds = %if.end49
  %55 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse51 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %55, i32 0, i32 8
  %56 = load i8*, i8** %parse51, align 8
  %57 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %57, i32 0, i32 7
  %58 = load i8*, i8** %end, align 8
  %cmp52 = icmp ugt i8* %56, %58
  br i1 %cmp52, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body50
  %59 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end54 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %59, i32 0, i32 7
  %60 = load i8*, i8** %end54, align 8
  br label %cond.end

cond.false:                                       ; preds = %do.body50
  %61 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse55 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %61, i32 0, i32 8
  %62 = load i8*, i8** %parse55, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %60, %cond.true ], [ %62, %cond.false ]
  %63 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %63, i32 0, i32 2
  %64 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %cond to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %64 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %offset, align 8
  %65 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %65, i32 0, i32 25
  %66 = load i32, i32* %utf8, align 8
  %tobool56 = icmp ne i32 %66, 0
  %67 = zext i1 %tobool56 to i64
  %cond57 = select i1 %tobool56, i32 1, i32 0
  %tobool58 = icmp ne i32 %cond57, 0
  %68 = zext i1 %tobool58 to i64
  %cond59 = select i1 %tobool58, i32 1, i32 0
  %69 = load i64, i64* %offset, align 8
  %70 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp60 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %70, i32 0, i32 2
  %71 = load i8*, i8** %precomp60, align 8
  %72 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf861 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %72, i32 0, i32 25
  %73 = load i32, i32* %utf861, align 8
  %tobool62 = icmp ne i32 %73, 0
  %74 = zext i1 %tobool62 to i64
  %cond63 = select i1 %tobool62, i32 1, i32 0
  %tobool64 = icmp ne i32 %cond63, 0
  %75 = zext i1 %tobool64 to i64
  %cond65 = select i1 %tobool64, i32 1, i32 0
  %76 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end66 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %76, i32 0, i32 7
  %77 = load i8*, i8** %end66, align 8
  %78 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp67 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %78, i32 0, i32 2
  %79 = load i8*, i8** %precomp67, align 8
  %sub.ptr.lhs.cast68 = ptrtoint i8* %77 to i64
  %sub.ptr.rhs.cast69 = ptrtoint i8* %79 to i64
  %sub.ptr.sub70 = sub i64 %sub.ptr.lhs.cast68, %sub.ptr.rhs.cast69
  %80 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %sub.ptr.sub70, %80
  %81 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp71 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %81, i32 0, i32 2
  %82 = load i8*, i8** %precomp71, align 8
  %83 = load i64, i64* %offset, align 8
  %add.ptr = getelementptr inbounds i8, i8* %82, i64 %83
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.286, i64 0, i64 0), i32 %cond59, i64 %69, i8* %71, i32 %cond65, i64 %sub, i8* %add.ptr)
  br label %do.end

do.end:                                           ; preds = %cond.end
  br label %do.end72

do.end72:                                         ; preds = %do.end
  br label %if.end73

if.end73:                                         ; preds = %do.end72, %sw.bb35
  %84 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %cmp74 = icmp eq %struct.regnode* %84, null
  br i1 %cmp74, label %if.then76, label %if.end106

if.then76:                                        ; preds = %if.end73
  %85 = load i32*, i32** %flagp.addr, align 8
  %86 = load i32, i32* %85, align 4
  %and77 = and i32 %86, 32
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %if.then79, label %if.end80

if.then79:                                        ; preds = %if.then76
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end80:                                         ; preds = %if.then76
  br label %do.body81

do.body81:                                        ; preds = %if.end80
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses, align 8
  %87 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end82 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %87, i32 0, i32 7
  %88 = load i8*, i8** %end82, align 8
  %89 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp83 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %89, i32 0, i32 2
  %90 = load i8*, i8** %precomp83, align 8
  %sub.ptr.lhs.cast84 = ptrtoint i8* %88 to i64
  %sub.ptr.rhs.cast85 = ptrtoint i8* %90 to i64
  %sub.ptr.sub86 = sub i64 %sub.ptr.lhs.cast84, %sub.ptr.rhs.cast85
  store i64 %sub.ptr.sub86, i64* %len, align 8
  %91 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit87 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %91, i32 0, i32 12
  %92 = load %struct.regnode*, %struct.regnode** %emit87, align 8
  %93 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy88 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %93, i32 0, i32 13
  %94 = bitcast %struct.regnode_ssc* %emit_dummy88 to %struct.regnode*
  %cmp89 = icmp eq %struct.regnode* %92, %94
  br i1 %cmp89, label %if.end93, label %if.then91

if.then91:                                        ; preds = %do.body81
  %95 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv92 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %95, i32 0, i32 3
  %96 = load %struct.p5rx*, %struct.p5rx** %rx_sv92, align 8
  %97 = bitcast %struct.p5rx* %96 to i8*
  %98 = bitcast i8* %97 to %struct.sv*
  %99 = bitcast %struct.sv* %98 to i8*
  call void @Perl_save_pushptr(i8* %99, i32 11)
  br label %if.end93

if.end93:                                         ; preds = %if.then91, %do.body81
  %100 = load i64, i64* %len, align 8
  %cmp94 = icmp sgt i64 %100, 127
  br i1 %cmp94, label %if.then96, label %if.end97

if.then96:                                        ; preds = %if.end93
  store i64 117, i64* %len, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses, align 8
  br label %if.end97

if.end97:                                         ; preds = %if.then96, %if.end93
  %101 = load i32*, i32** %flagp.addr, align 8
  %102 = load i32, i32* %101, align 4
  %conv98 = sext i32 %102 to i64
  %103 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf899 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %103, i32 0, i32 25
  %104 = load i32, i32* %utf899, align 8
  %tobool100 = icmp ne i32 %104, 0
  %105 = zext i1 %tobool100 to i64
  %cond101 = select i1 %tobool100, i32 1, i32 0
  %tobool102 = icmp ne i32 %cond101, 0
  %106 = zext i1 %tobool102 to i64
  %cond103 = select i1 %tobool102, i32 1, i32 0
  %107 = load i64, i64* %len, align 8
  %108 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp104 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %108, i32 0, i32 2
  %109 = load i8*, i8** %precomp104, align 8
  %110 = load i8*, i8** %ellipses, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.287, i64 0, i64 0), i64 %conv98, i32 %cond103, i64 %107, i8* %109, i8* %110)
  br label %do.end105

do.end105:                                        ; preds = %if.end97
  br label %if.end106

if.end106:                                        ; preds = %do.end105, %if.end73
  %111 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call107 = call i8* @S_nextchar(%struct.RExC_state_t* %111)
  br label %sw.epilog2570

sw.bb108:                                         ; preds = %tryagain
  %112 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call109 = call i8* @S_nextchar(%struct.RExC_state_t* %112)
  %113 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %114 = load i32, i32* %depth.addr, align 4
  %add110 = add i32 %114, 1
  %call111 = call %struct.regnode* @S_reg(%struct.RExC_state_t* %113, i32 2, i32* %flags, i32 %add110)
  store %struct.regnode* %call111, %struct.regnode** %ret, align 8
  %115 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %cmp112 = icmp eq %struct.regnode* %115, null
  br i1 %cmp112, label %if.then114, label %if.end157

if.then114:                                       ; preds = %sw.bb108
  %116 = load i32, i32* %flags, align 4
  %and115 = and i32 %116, 16
  %tobool116 = icmp ne i32 %and115, 0
  br i1 %tobool116, label %if.then117, label %if.end125

if.then117:                                       ; preds = %if.then114
  %117 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse118 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %117, i32 0, i32 8
  %118 = load i8*, i8** %parse118, align 8
  %119 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end119 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %119, i32 0, i32 7
  %120 = load i8*, i8** %end119, align 8
  %cmp120 = icmp eq i8* %118, %120
  br i1 %cmp120, label %if.then122, label %if.end124

if.then122:                                       ; preds = %if.then117
  %121 = load i32*, i32** %flagp.addr, align 8
  %122 = load i32, i32* %121, align 4
  %or123 = or i32 %122, 16
  store i32 %or123, i32* %121, align 4
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end124:                                        ; preds = %if.then117
  br label %tryagain

if.end125:                                        ; preds = %if.then114
  %123 = load i32, i32* %flags, align 4
  %and126 = and i32 %123, 32
  %tobool127 = icmp ne i32 %and126, 0
  br i1 %tobool127, label %if.then128, label %if.end129

if.then128:                                       ; preds = %if.end125
  %124 = load i32*, i32** %flagp.addr, align 8
  store i32 32, i32* %124, align 4
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end129:                                        ; preds = %if.end125
  br label %do.body130

do.body130:                                       ; preds = %if.end129
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses131, align 8
  %125 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end133 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %125, i32 0, i32 7
  %126 = load i8*, i8** %end133, align 8
  %127 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp134 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %127, i32 0, i32 2
  %128 = load i8*, i8** %precomp134, align 8
  %sub.ptr.lhs.cast135 = ptrtoint i8* %126 to i64
  %sub.ptr.rhs.cast136 = ptrtoint i8* %128 to i64
  %sub.ptr.sub137 = sub i64 %sub.ptr.lhs.cast135, %sub.ptr.rhs.cast136
  store i64 %sub.ptr.sub137, i64* %len132, align 8
  %129 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit138 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %129, i32 0, i32 12
  %130 = load %struct.regnode*, %struct.regnode** %emit138, align 8
  %131 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy139 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %131, i32 0, i32 13
  %132 = bitcast %struct.regnode_ssc* %emit_dummy139 to %struct.regnode*
  %cmp140 = icmp eq %struct.regnode* %130, %132
  br i1 %cmp140, label %if.end144, label %if.then142

if.then142:                                       ; preds = %do.body130
  %133 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv143 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %133, i32 0, i32 3
  %134 = load %struct.p5rx*, %struct.p5rx** %rx_sv143, align 8
  %135 = bitcast %struct.p5rx* %134 to i8*
  %136 = bitcast i8* %135 to %struct.sv*
  %137 = bitcast %struct.sv* %136 to i8*
  call void @Perl_save_pushptr(i8* %137, i32 11)
  br label %if.end144

if.end144:                                        ; preds = %if.then142, %do.body130
  %138 = load i64, i64* %len132, align 8
  %cmp145 = icmp sgt i64 %138, 127
  br i1 %cmp145, label %if.then147, label %if.end148

if.then147:                                       ; preds = %if.end144
  store i64 117, i64* %len132, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses131, align 8
  br label %if.end148

if.end148:                                        ; preds = %if.then147, %if.end144
  %139 = load i32, i32* %flags, align 4
  %conv149 = sext i32 %139 to i64
  %140 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8150 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %140, i32 0, i32 25
  %141 = load i32, i32* %utf8150, align 8
  %tobool151 = icmp ne i32 %141, 0
  %142 = zext i1 %tobool151 to i64
  %cond152 = select i1 %tobool151, i32 1, i32 0
  %tobool153 = icmp ne i32 %cond152, 0
  %143 = zext i1 %tobool153 to i64
  %cond154 = select i1 %tobool153, i32 1, i32 0
  %144 = load i64, i64* %len132, align 8
  %145 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp155 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %145, i32 0, i32 2
  %146 = load i8*, i8** %precomp155, align 8
  %147 = load i8*, i8** %ellipses131, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.288, i64 0, i64 0), i64 %conv149, i32 %cond154, i64 %144, i8* %146, i8* %147)
  br label %do.end156

do.end156:                                        ; preds = %if.end148
  br label %if.end157

if.end157:                                        ; preds = %do.end156, %sw.bb108
  %148 = load i32, i32* %flags, align 4
  %and158 = and i32 %148, 15
  %149 = load i32*, i32** %flagp.addr, align 8
  %150 = load i32, i32* %149, align 4
  %or159 = or i32 %150, %and158
  store i32 %or159, i32* %149, align 4
  br label %sw.epilog2570

sw.bb160:                                         ; preds = %tryagain, %tryagain
  %151 = load i32, i32* %flags, align 4
  %and161 = and i32 %151, 16
  %tobool162 = icmp ne i32 %and161, 0
  br i1 %tobool162, label %if.then163, label %if.end165

if.then163:                                       ; preds = %sw.bb160
  %152 = load i32*, i32** %flagp.addr, align 8
  %153 = load i32, i32* %152, align 4
  %or164 = or i32 %153, 16
  store i32 %or164, i32* %152, align 4
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end165:                                        ; preds = %sw.bb160
  br label %do.body166

do.body166:                                       ; preds = %if.end165
  %154 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit167 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %154, i32 0, i32 12
  %155 = load %struct.regnode*, %struct.regnode** %emit167, align 8
  %156 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy168 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %156, i32 0, i32 13
  %157 = bitcast %struct.regnode_ssc* %emit_dummy168 to %struct.regnode*
  %cmp169 = icmp eq %struct.regnode* %155, %157
  br i1 %cmp169, label %if.end173, label %if.then171

if.then171:                                       ; preds = %do.body166
  %158 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv172 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %158, i32 0, i32 3
  %159 = load %struct.p5rx*, %struct.p5rx** %rx_sv172, align 8
  %160 = bitcast %struct.p5rx* %159 to i8*
  %161 = bitcast i8* %160 to %struct.sv*
  %162 = bitcast %struct.sv* %161 to i8*
  call void @Perl_save_pushptr(i8* %162, i32 11)
  br label %if.end173

if.end173:                                        ; preds = %if.then171, %do.body166
  br label %do.body174

do.body174:                                       ; preds = %if.end173
  %163 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse176 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %163, i32 0, i32 8
  %164 = load i8*, i8** %parse176, align 8
  %165 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end177 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %165, i32 0, i32 7
  %166 = load i8*, i8** %end177, align 8
  %cmp178 = icmp ugt i8* %164, %166
  br i1 %cmp178, label %cond.true180, label %cond.false182

cond.true180:                                     ; preds = %do.body174
  %167 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end181 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %167, i32 0, i32 7
  %168 = load i8*, i8** %end181, align 8
  br label %cond.end184

cond.false182:                                    ; preds = %do.body174
  %169 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse183 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %169, i32 0, i32 8
  %170 = load i8*, i8** %parse183, align 8
  br label %cond.end184

cond.end184:                                      ; preds = %cond.false182, %cond.true180
  %cond185 = phi i8* [ %168, %cond.true180 ], [ %170, %cond.false182 ]
  %171 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp186 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %171, i32 0, i32 2
  %172 = load i8*, i8** %precomp186, align 8
  %sub.ptr.lhs.cast187 = ptrtoint i8* %cond185 to i64
  %sub.ptr.rhs.cast188 = ptrtoint i8* %172 to i64
  %sub.ptr.sub189 = sub i64 %sub.ptr.lhs.cast187, %sub.ptr.rhs.cast188
  store i64 %sub.ptr.sub189, i64* %offset175, align 8
  %173 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8190 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %173, i32 0, i32 25
  %174 = load i32, i32* %utf8190, align 8
  %tobool191 = icmp ne i32 %174, 0
  %175 = zext i1 %tobool191 to i64
  %cond192 = select i1 %tobool191, i32 1, i32 0
  %tobool193 = icmp ne i32 %cond192, 0
  %176 = zext i1 %tobool193 to i64
  %cond194 = select i1 %tobool193, i32 1, i32 0
  %177 = load i64, i64* %offset175, align 8
  %178 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp195 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %178, i32 0, i32 2
  %179 = load i8*, i8** %precomp195, align 8
  %180 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8196 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %180, i32 0, i32 25
  %181 = load i32, i32* %utf8196, align 8
  %tobool197 = icmp ne i32 %181, 0
  %182 = zext i1 %tobool197 to i64
  %cond198 = select i1 %tobool197, i32 1, i32 0
  %tobool199 = icmp ne i32 %cond198, 0
  %183 = zext i1 %tobool199 to i64
  %cond200 = select i1 %tobool199, i32 1, i32 0
  %184 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end201 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %184, i32 0, i32 7
  %185 = load i8*, i8** %end201, align 8
  %186 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp202 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %186, i32 0, i32 2
  %187 = load i8*, i8** %precomp202, align 8
  %sub.ptr.lhs.cast203 = ptrtoint i8* %185 to i64
  %sub.ptr.rhs.cast204 = ptrtoint i8* %187 to i64
  %sub.ptr.sub205 = sub i64 %sub.ptr.lhs.cast203, %sub.ptr.rhs.cast204
  %188 = load i64, i64* %offset175, align 8
  %sub206 = sub nsw i64 %sub.ptr.sub205, %188
  %189 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp207 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %189, i32 0, i32 2
  %190 = load i8*, i8** %precomp207, align 8
  %191 = load i64, i64* %offset175, align 8
  %add.ptr208 = getelementptr inbounds i8, i8* %190, i64 %191
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.289, i64 0, i64 0), i32 %cond194, i64 %177, i8* %179, i32 %cond200, i64 %sub206, i8* %add.ptr208)
  br label %do.end209

do.end209:                                        ; preds = %cond.end184
  br label %do.end210

do.end210:                                        ; preds = %do.end209
  br label %sw.epilog2570

sw.bb211:                                         ; preds = %tryagain, %tryagain, %tryagain
  %192 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse212 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %192, i32 0, i32 8
  %193 = load i8*, i8** %parse212, align 8
  %incdec.ptr213 = getelementptr inbounds i8, i8* %193, i32 1
  store i8* %incdec.ptr213, i8** %parse212, align 8
  br label %do.body214

do.body214:                                       ; preds = %sw.bb211
  %194 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit215 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %194, i32 0, i32 12
  %195 = load %struct.regnode*, %struct.regnode** %emit215, align 8
  %196 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy216 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %196, i32 0, i32 13
  %197 = bitcast %struct.regnode_ssc* %emit_dummy216 to %struct.regnode*
  %cmp217 = icmp eq %struct.regnode* %195, %197
  br i1 %cmp217, label %if.end221, label %if.then219

if.then219:                                       ; preds = %do.body214
  %198 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv220 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %198, i32 0, i32 3
  %199 = load %struct.p5rx*, %struct.p5rx** %rx_sv220, align 8
  %200 = bitcast %struct.p5rx* %199 to i8*
  %201 = bitcast i8* %200 to %struct.sv*
  %202 = bitcast %struct.sv* %201 to i8*
  call void @Perl_save_pushptr(i8* %202, i32 11)
  br label %if.end221

if.end221:                                        ; preds = %if.then219, %do.body214
  br label %do.body222

do.body222:                                       ; preds = %if.end221
  %203 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse224 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %203, i32 0, i32 8
  %204 = load i8*, i8** %parse224, align 8
  %205 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end225 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %205, i32 0, i32 7
  %206 = load i8*, i8** %end225, align 8
  %cmp226 = icmp ugt i8* %204, %206
  br i1 %cmp226, label %cond.true228, label %cond.false230

cond.true228:                                     ; preds = %do.body222
  %207 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end229 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %207, i32 0, i32 7
  %208 = load i8*, i8** %end229, align 8
  br label %cond.end232

cond.false230:                                    ; preds = %do.body222
  %209 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse231 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %209, i32 0, i32 8
  %210 = load i8*, i8** %parse231, align 8
  br label %cond.end232

cond.end232:                                      ; preds = %cond.false230, %cond.true228
  %cond233 = phi i8* [ %208, %cond.true228 ], [ %210, %cond.false230 ]
  %211 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp234 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %211, i32 0, i32 2
  %212 = load i8*, i8** %precomp234, align 8
  %sub.ptr.lhs.cast235 = ptrtoint i8* %cond233 to i64
  %sub.ptr.rhs.cast236 = ptrtoint i8* %212 to i64
  %sub.ptr.sub237 = sub i64 %sub.ptr.lhs.cast235, %sub.ptr.rhs.cast236
  store i64 %sub.ptr.sub237, i64* %offset223, align 8
  %213 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8238 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %213, i32 0, i32 25
  %214 = load i32, i32* %utf8238, align 8
  %tobool239 = icmp ne i32 %214, 0
  %215 = zext i1 %tobool239 to i64
  %cond240 = select i1 %tobool239, i32 1, i32 0
  %tobool241 = icmp ne i32 %cond240, 0
  %216 = zext i1 %tobool241 to i64
  %cond242 = select i1 %tobool241, i32 1, i32 0
  %217 = load i64, i64* %offset223, align 8
  %218 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp243 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %218, i32 0, i32 2
  %219 = load i8*, i8** %precomp243, align 8
  %220 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8244 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %220, i32 0, i32 25
  %221 = load i32, i32* %utf8244, align 8
  %tobool245 = icmp ne i32 %221, 0
  %222 = zext i1 %tobool245 to i64
  %cond246 = select i1 %tobool245, i32 1, i32 0
  %tobool247 = icmp ne i32 %cond246, 0
  %223 = zext i1 %tobool247 to i64
  %cond248 = select i1 %tobool247, i32 1, i32 0
  %224 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end249 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %224, i32 0, i32 7
  %225 = load i8*, i8** %end249, align 8
  %226 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp250 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %226, i32 0, i32 2
  %227 = load i8*, i8** %precomp250, align 8
  %sub.ptr.lhs.cast251 = ptrtoint i8* %225 to i64
  %sub.ptr.rhs.cast252 = ptrtoint i8* %227 to i64
  %sub.ptr.sub253 = sub i64 %sub.ptr.lhs.cast251, %sub.ptr.rhs.cast252
  %228 = load i64, i64* %offset223, align 8
  %sub254 = sub nsw i64 %sub.ptr.sub253, %228
  %229 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp255 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %229, i32 0, i32 2
  %230 = load i8*, i8** %precomp255, align 8
  %231 = load i64, i64* %offset223, align 8
  %add.ptr256 = getelementptr inbounds i8, i8* %230, i64 %231
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.290, i64 0, i64 0), i32 %cond242, i64 %217, i8* %219, i32 %cond248, i64 %sub254, i8* %add.ptr256)
  br label %do.end257

do.end257:                                        ; preds = %cond.end232
  br label %do.end258

do.end258:                                        ; preds = %do.end257
  br label %sw.epilog2570

sw.bb259:                                         ; preds = %tryagain
  %232 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse260 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %232, i32 0, i32 8
  %233 = load i8*, i8** %parse260, align 8
  %incdec.ptr261 = getelementptr inbounds i8, i8* %233, i32 1
  store i8* %incdec.ptr261, i8** %parse260, align 8
  %234 = load i8, i8* %incdec.ptr261, align 1
  %conv262 = zext i8 %234 to i32
  switch i32 %conv262, label %sw.default1366 [
    i32 65, label %sw.bb263
    i32 71, label %sw.bb275
    i32 75, label %sw.bb279
    i32 90, label %sw.bb286
    i32 122, label %sw.bb291
    i32 67, label %sw.bb296
    i32 88, label %sw.bb335
    i32 87, label %sw.bb338
    i32 119, label %sw.bb339
    i32 66, label %sw.bb340
    i32 98, label %sw.bb341
    i32 68, label %sw.bb620
    i32 100, label %sw.bb621
    i32 82, label %sw.bb628
    i32 72, label %sw.bb631
    i32 104, label %sw.bb632
    i32 86, label %sw.bb633
    i32 118, label %sw.bb634
    i32 83, label %sw.bb635
    i32 115, label %sw.bb636
    i32 112, label %sw.bb671
    i32 80, label %sw.bb671
    i32 78, label %sw.bb711
    i32 107, label %sw.bb723
    i32 103, label %sw.bb901
    i32 49, label %sw.bb901
    i32 50, label %sw.bb901
    i32 51, label %sw.bb901
    i32 52, label %sw.bb901
    i32 53, label %sw.bb901
    i32 54, label %sw.bb901
    i32 55, label %sw.bb901
    i32 56, label %sw.bb901
    i32 57, label %sw.bb901
    i32 0, label %sw.bb1333
  ]

sw.bb263:                                         ; preds = %sw.bb259
  %235 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen264 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %235, i32 0, i32 21
  %236 = load i32, i32* %seen_zerolen264, align 4
  %inc265 = add nsw i32 %236, 1
  store i32 %inc265, i32* %seen_zerolen264, align 4
  %237 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call266 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %237, i8 zeroext 2)
  store %struct.regnode* %call266, %struct.regnode** %ret, align 8
  %238 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit267 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %238, i32 0, i32 12
  %239 = load %struct.regnode*, %struct.regnode** %emit267, align 8
  %240 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy268 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %240, i32 0, i32 13
  %241 = bitcast %struct.regnode_ssc* %emit_dummy268 to %struct.regnode*
  %cmp269 = icmp eq %struct.regnode* %239, %241
  br i1 %cmp269, label %if.end273, label %if.then271

if.then271:                                       ; preds = %sw.bb263
  %242 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags272 = getelementptr inbounds %struct.regnode, %struct.regnode* %242, i32 0, i32 0
  store i8 1, i8* %flags272, align 2
  br label %if.end273

if.end273:                                        ; preds = %if.then271, %sw.bb263
  %243 = load i32*, i32** %flagp.addr, align 8
  %244 = load i32, i32* %243, align 4
  %or274 = or i32 %244, 2
  store i32 %or274, i32* %243, align 4
  br label %finish_meta_pat

sw.bb275:                                         ; preds = %sw.bb259
  %245 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call276 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %245, i8 zeroext 7)
  store %struct.regnode* %call276, %struct.regnode** %ret, align 8
  %246 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %246, i32 0, i32 16
  %247 = load i32, i32* %seen, align 8
  %or277 = or i32 %247, 4
  store i32 %or277, i32* %seen, align 8
  %248 = load i32*, i32** %flagp.addr, align 8
  %249 = load i32, i32* %248, align 4
  %or278 = or i32 %249, 2
  store i32 %or278, i32* %248, align 4
  br label %finish_meta_pat

sw.bb279:                                         ; preds = %sw.bb259
  %250 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen280 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %250, i32 0, i32 21
  %251 = load i32, i32* %seen_zerolen280, align 4
  %inc281 = add nsw i32 %251, 1
  store i32 %inc281, i32* %seen_zerolen280, align 4
  %252 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call282 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %252, i8 zeroext 90)
  store %struct.regnode* %call282, %struct.regnode** %ret, align 8
  %253 = load i32*, i32** %flagp.addr, align 8
  %254 = load i32, i32* %253, align 4
  %or283 = or i32 %254, 2
  store i32 %or283, i32* %253, align 4
  %255 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen284 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %255, i32 0, i32 16
  %256 = load i32, i32* %seen284, align 8
  %or285 = or i32 %256, 2
  store i32 %or285, i32* %seen284, align 8
  br label %finish_meta_pat

sw.bb286:                                         ; preds = %sw.bb259
  %257 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call287 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %257, i8 zeroext 4)
  store %struct.regnode* %call287, %struct.regnode** %ret, align 8
  %258 = load i32*, i32** %flagp.addr, align 8
  %259 = load i32, i32* %258, align 4
  %or288 = or i32 %259, 2
  store i32 %or288, i32* %258, align 4
  %260 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen289 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %260, i32 0, i32 21
  %261 = load i32, i32* %seen_zerolen289, align 4
  %inc290 = add nsw i32 %261, 1
  store i32 %inc290, i32* %seen_zerolen289, align 4
  br label %finish_meta_pat

sw.bb291:                                         ; preds = %sw.bb259
  %262 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call292 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %262, i8 zeroext 6)
  store %struct.regnode* %call292, %struct.regnode** %ret, align 8
  %263 = load i32*, i32** %flagp.addr, align 8
  %264 = load i32, i32* %263, align 4
  %or293 = or i32 %264, 2
  store i32 %or293, i32* %263, align 4
  %265 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen294 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %265, i32 0, i32 21
  %266 = load i32, i32* %seen_zerolen294, align 4
  %inc295 = add nsw i32 %266, 1
  store i32 %inc295, i32* %seen_zerolen294, align 4
  br label %finish_meta_pat

sw.bb296:                                         ; preds = %sw.bb259
  %267 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call297 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %267, i8 zeroext 18)
  store %struct.regnode* %call297, %struct.regnode** %ret, align 8
  %268 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen298 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %268, i32 0, i32 16
  %269 = load i32, i32* %seen298, align 8
  %or299 = or i32 %269, 16
  store i32 %or299, i32* %seen298, align 8
  %270 = load i32*, i32** %flagp.addr, align 8
  %271 = load i32, i32* %270, align 4
  %or300 = or i32 %271, 3
  store i32 %or300, i32* %270, align 4
  %272 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit301 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %272, i32 0, i32 12
  %273 = load %struct.regnode*, %struct.regnode** %emit301, align 8
  %274 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy302 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %274, i32 0, i32 13
  %275 = bitcast %struct.regnode_ssc* %emit_dummy302 to %struct.regnode*
  %cmp303 = icmp eq %struct.regnode* %273, %275
  br i1 %cmp303, label %if.end334, label %if.then305

if.then305:                                       ; preds = %sw.bb296
  br label %do.body306

do.body306:                                       ; preds = %if.then305
  %276 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse308 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %276, i32 0, i32 8
  %277 = load i8*, i8** %parse308, align 8
  %add.ptr309 = getelementptr inbounds i8, i8* %277, i64 1
  %278 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp310 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %278, i32 0, i32 2
  %279 = load i8*, i8** %precomp310, align 8
  %sub.ptr.lhs.cast311 = ptrtoint i8* %add.ptr309 to i64
  %sub.ptr.rhs.cast312 = ptrtoint i8* %279 to i64
  %sub.ptr.sub313 = sub i64 %sub.ptr.lhs.cast311, %sub.ptr.rhs.cast312
  store i64 %sub.ptr.sub313, i64* %offset307, align 8
  %280 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8314 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %280, i32 0, i32 25
  %281 = load i32, i32* %utf8314, align 8
  %tobool315 = icmp ne i32 %281, 0
  %282 = zext i1 %tobool315 to i64
  %cond316 = select i1 %tobool315, i32 1, i32 0
  %tobool317 = icmp ne i32 %cond316, 0
  %283 = zext i1 %tobool317 to i64
  %cond318 = select i1 %tobool317, i32 1, i32 0
  %284 = load i64, i64* %offset307, align 8
  %285 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp319 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %285, i32 0, i32 2
  %286 = load i8*, i8** %precomp319, align 8
  %287 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8320 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %287, i32 0, i32 25
  %288 = load i32, i32* %utf8320, align 8
  %tobool321 = icmp ne i32 %288, 0
  %289 = zext i1 %tobool321 to i64
  %cond322 = select i1 %tobool321, i32 1, i32 0
  %tobool323 = icmp ne i32 %cond322, 0
  %290 = zext i1 %tobool323 to i64
  %cond324 = select i1 %tobool323, i32 1, i32 0
  %291 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end325 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %291, i32 0, i32 7
  %292 = load i8*, i8** %end325, align 8
  %293 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp326 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %293, i32 0, i32 2
  %294 = load i8*, i8** %precomp326, align 8
  %sub.ptr.lhs.cast327 = ptrtoint i8* %292 to i64
  %sub.ptr.rhs.cast328 = ptrtoint i8* %294 to i64
  %sub.ptr.sub329 = sub i64 %sub.ptr.lhs.cast327, %sub.ptr.rhs.cast328
  %295 = load i64, i64* %offset307, align 8
  %sub330 = sub nsw i64 %sub.ptr.sub329, %295
  %296 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp331 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %296, i32 0, i32 2
  %297 = load i8*, i8** %precomp331, align 8
  %298 = load i64, i64* %offset307, align 8
  %add.ptr332 = getelementptr inbounds i8, i8* %297, i64 %298
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 2, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.291, i64 0, i64 0), i32 %cond318, i64 %284, i8* %286, i32 %cond324, i64 %sub330, i8* %add.ptr332)
  br label %do.end333

do.end333:                                        ; preds = %do.body306
  br label %if.end334

if.end334:                                        ; preds = %do.end333, %sw.bb296
  br label %finish_meta_pat

sw.bb335:                                         ; preds = %sw.bb259
  %299 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call336 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %299, i8 zeroext 29)
  store %struct.regnode* %call336, %struct.regnode** %ret, align 8
  %300 = load i32*, i32** %flagp.addr, align 8
  %301 = load i32, i32* %300, align 4
  %or337 = or i32 %301, 1
  store i32 %or337, i32* %300, align 4
  br label %finish_meta_pat

sw.bb338:                                         ; preds = %sw.bb259
  store i32 1, i32* %invert, align 4
  br label %sw.bb339

sw.bb339:                                         ; preds = %sw.bb259, %sw.bb338
  store i8 0, i8* %arg, align 1
  br label %join_posix

sw.bb340:                                         ; preds = %sw.bb259
  store i32 1, i32* %invert, align 4
  br label %sw.bb341

sw.bb341:                                         ; preds = %sw.bb259, %sw.bb340
  %302 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags342 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %302, i32 0, i32 0
  %303 = load i32, i32* %flags342, align 8
  %call343 = call i32 @get_regex_charset(i32 %303)
  store i32 %call343, i32* %charset, align 4
  %304 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen_zerolen344 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %304, i32 0, i32 21
  %305 = load i32, i32* %seen_zerolen344, align 4
  %inc345 = add nsw i32 %305, 1
  store i32 %inc345, i32* %seen_zerolen344, align 4
  %306 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %seen346 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %306, i32 0, i32 16
  %307 = load i32, i32* %seen346, align 8
  %or347 = or i32 %307, 2
  store i32 %or347, i32* %seen346, align 8
  %308 = load i32, i32* %charset, align 4
  %add348 = add i32 8, %308
  %conv349 = trunc i32 %add348 to i8
  store i8 %conv349, i8* %op, align 1
  %309 = load i8, i8* %op, align 1
  %conv350 = zext i8 %309 to i32
  %cmp351 = icmp eq i32 %conv350, 9
  br i1 %cmp351, label %if.then353, label %if.end354

if.then353:                                       ; preds = %sw.bb341
  %310 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %contains_locale = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %310, i32 0, i32 34
  store i32 1, i32* %contains_locale, align 8
  br label %if.end354

if.end354:                                        ; preds = %if.then353, %sw.bb341
  %311 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %312 = load i8, i8* %op, align 1
  %call355 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %311, i8 zeroext %312)
  store %struct.regnode* %call355, %struct.regnode** %ret, align 8
  %313 = load i32*, i32** %flagp.addr, align 8
  %314 = load i32, i32* %313, align 4
  %or356 = or i32 %314, 2
  store i32 %or356, i32* %313, align 4
  %315 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse357 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %315, i32 0, i32 8
  %316 = load i8*, i8** %parse357, align 8
  %add.ptr358 = getelementptr inbounds i8, i8* %316, i64 1
  %317 = load i8, i8* %add.ptr358, align 1
  %conv359 = sext i8 %317 to i32
  %cmp360 = icmp ne i32 %conv359, 123
  br i1 %cmp360, label %if.then362, label %if.else373

if.then362:                                       ; preds = %if.end354
  %318 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags363 = getelementptr inbounds %struct.regnode, %struct.regnode* %318, i32 0, i32 0
  store i8 0, i8* %flags363, align 2
  %319 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit364 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %319, i32 0, i32 12
  %320 = load %struct.regnode*, %struct.regnode** %emit364, align 8
  %321 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy365 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %321, i32 0, i32 13
  %322 = bitcast %struct.regnode_ssc* %emit_dummy365 to %struct.regnode*
  %cmp366 = icmp eq %struct.regnode* %320, %322
  br i1 %cmp366, label %if.end372, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then362
  %323 = load i8, i8* %op, align 1
  %conv368 = zext i8 %323 to i32
  %cmp369 = icmp sgt i32 %conv368, 11
  br i1 %cmp369, label %if.then371, label %if.end372

if.then371:                                       ; preds = %land.lhs.true
  %324 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %324, i32 0, i32 1
  store i8 11, i8* %type, align 1
  br label %if.end372

if.end372:                                        ; preds = %if.then371, %land.lhs.true, %if.then362
  br label %if.end607

if.else373:                                       ; preds = %if.end354
  %325 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse374 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %325, i32 0, i32 8
  %326 = load i8*, i8** %parse374, align 8
  %327 = load i8, i8* %326, align 1
  store i8 %327, i8* %name, align 1
  %328 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse375 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %328, i32 0, i32 8
  %329 = load i8*, i8** %parse375, align 8
  %add.ptr376 = getelementptr inbounds i8, i8* %329, i64 2
  store i8* %add.ptr376, i8** %parse375, align 8
  %330 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse377 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %330, i32 0, i32 8
  %331 = load i8*, i8** %parse377, align 8
  %call378 = call i8* @strchr(i8* %331, i32 125) #6
  store i8* %call378, i8** %endbrace, align 8
  %332 = load i8*, i8** %endbrace, align 8
  %tobool379 = icmp ne i8* %332, null
  br i1 %tobool379, label %if.end422, label %if.then380

if.then380:                                       ; preds = %if.else373
  br label %do.body381

do.body381:                                       ; preds = %if.then380
  %333 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit382 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %333, i32 0, i32 12
  %334 = load %struct.regnode*, %struct.regnode** %emit382, align 8
  %335 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy383 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %335, i32 0, i32 13
  %336 = bitcast %struct.regnode_ssc* %emit_dummy383 to %struct.regnode*
  %cmp384 = icmp eq %struct.regnode* %334, %336
  br i1 %cmp384, label %if.end388, label %if.then386

if.then386:                                       ; preds = %do.body381
  %337 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv387 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %337, i32 0, i32 3
  %338 = load %struct.p5rx*, %struct.p5rx** %rx_sv387, align 8
  %339 = bitcast %struct.p5rx* %338 to i8*
  %340 = bitcast i8* %339 to %struct.sv*
  %341 = bitcast %struct.sv* %340 to i8*
  call void @Perl_save_pushptr(i8* %341, i32 11)
  br label %if.end388

if.end388:                                        ; preds = %if.then386, %do.body381
  br label %do.body389

do.body389:                                       ; preds = %if.end388
  %342 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse391 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %342, i32 0, i32 8
  %343 = load i8*, i8** %parse391, align 8
  %344 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp392 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %344, i32 0, i32 2
  %345 = load i8*, i8** %precomp392, align 8
  %sub.ptr.lhs.cast393 = ptrtoint i8* %343 to i64
  %sub.ptr.rhs.cast394 = ptrtoint i8* %345 to i64
  %sub.ptr.sub395 = sub i64 %sub.ptr.lhs.cast393, %sub.ptr.rhs.cast394
  store i64 %sub.ptr.sub395, i64* %offset390, align 8
  %346 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8396 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %346, i32 0, i32 25
  %347 = load i32, i32* %utf8396, align 8
  %tobool397 = icmp ne i32 %347, 0
  %348 = zext i1 %tobool397 to i64
  %cond398 = select i1 %tobool397, i32 1, i32 0
  %tobool399 = icmp ne i32 %cond398, 0
  %349 = load i8, i8* %name, align 1
  %conv400 = sext i8 %349 to i32
  %350 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8401 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %350, i32 0, i32 25
  %351 = load i32, i32* %utf8401, align 8
  %tobool402 = icmp ne i32 %351, 0
  %352 = zext i1 %tobool402 to i64
  %cond403 = select i1 %tobool402, i32 1, i32 0
  %tobool404 = icmp ne i32 %cond403, 0
  %353 = zext i1 %tobool404 to i64
  %cond405 = select i1 %tobool404, i32 1, i32 0
  %354 = load i64, i64* %offset390, align 8
  %355 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp406 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %355, i32 0, i32 2
  %356 = load i8*, i8** %precomp406, align 8
  %357 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8407 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %357, i32 0, i32 25
  %358 = load i32, i32* %utf8407, align 8
  %tobool408 = icmp ne i32 %358, 0
  %359 = zext i1 %tobool408 to i64
  %cond409 = select i1 %tobool408, i32 1, i32 0
  %tobool410 = icmp ne i32 %cond409, 0
  %360 = zext i1 %tobool410 to i64
  %cond411 = select i1 %tobool410, i32 1, i32 0
  %361 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end412 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %361, i32 0, i32 7
  %362 = load i8*, i8** %end412, align 8
  %363 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp413 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %363, i32 0, i32 2
  %364 = load i8*, i8** %precomp413, align 8
  %sub.ptr.lhs.cast414 = ptrtoint i8* %362 to i64
  %sub.ptr.rhs.cast415 = ptrtoint i8* %364 to i64
  %sub.ptr.sub416 = sub i64 %sub.ptr.lhs.cast414, %sub.ptr.rhs.cast415
  %365 = load i64, i64* %offset390, align 8
  %sub417 = sub nsw i64 %sub.ptr.sub416, %365
  %366 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp418 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %366, i32 0, i32 2
  %367 = load i8*, i8** %precomp418, align 8
  %368 = load i64, i64* %offset390, align 8
  %add.ptr419 = getelementptr inbounds i8, i8* %367, i64 %368
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool399, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.292, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %conv400, i32 %cond405, i64 %354, i8* %356, i32 %cond411, i64 %sub417, i8* %add.ptr419)
  br label %do.end420

do.end420:                                        ; preds = %do.body389
  br label %do.end421

do.end421:                                        ; preds = %do.end420
  br label %if.end422

if.end422:                                        ; preds = %do.end421, %if.else373
  %369 = load i8*, i8** %endbrace, align 8
  %370 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse423 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %370, i32 0, i32 8
  %371 = load i8*, i8** %parse423, align 8
  %cmp424 = icmp eq i8* %369, %371
  br i1 %cmp424, label %if.then426, label %if.end470

if.then426:                                       ; preds = %if.end422
  %372 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse427 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %372, i32 0, i32 8
  %373 = load i8*, i8** %parse427, align 8
  %incdec.ptr428 = getelementptr inbounds i8, i8* %373, i32 1
  store i8* %incdec.ptr428, i8** %parse427, align 8
  br label %do.body429

do.body429:                                       ; preds = %if.then426
  %374 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit430 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %374, i32 0, i32 12
  %375 = load %struct.regnode*, %struct.regnode** %emit430, align 8
  %376 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy431 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %376, i32 0, i32 13
  %377 = bitcast %struct.regnode_ssc* %emit_dummy431 to %struct.regnode*
  %cmp432 = icmp eq %struct.regnode* %375, %377
  br i1 %cmp432, label %if.end436, label %if.then434

if.then434:                                       ; preds = %do.body429
  %378 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv435 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %378, i32 0, i32 3
  %379 = load %struct.p5rx*, %struct.p5rx** %rx_sv435, align 8
  %380 = bitcast %struct.p5rx* %379 to i8*
  %381 = bitcast i8* %380 to %struct.sv*
  %382 = bitcast %struct.sv* %381 to i8*
  call void @Perl_save_pushptr(i8* %382, i32 11)
  br label %if.end436

if.end436:                                        ; preds = %if.then434, %do.body429
  br label %do.body437

do.body437:                                       ; preds = %if.end436
  %383 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse439 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %383, i32 0, i32 8
  %384 = load i8*, i8** %parse439, align 8
  %385 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp440 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %385, i32 0, i32 2
  %386 = load i8*, i8** %precomp440, align 8
  %sub.ptr.lhs.cast441 = ptrtoint i8* %384 to i64
  %sub.ptr.rhs.cast442 = ptrtoint i8* %386 to i64
  %sub.ptr.sub443 = sub i64 %sub.ptr.lhs.cast441, %sub.ptr.rhs.cast442
  store i64 %sub.ptr.sub443, i64* %offset438, align 8
  %387 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8444 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %387, i32 0, i32 25
  %388 = load i32, i32* %utf8444, align 8
  %tobool445 = icmp ne i32 %388, 0
  %389 = zext i1 %tobool445 to i64
  %cond446 = select i1 %tobool445, i32 1, i32 0
  %tobool447 = icmp ne i32 %cond446, 0
  %390 = load i8, i8* %name, align 1
  %conv448 = sext i8 %390 to i32
  %391 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8449 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %391, i32 0, i32 25
  %392 = load i32, i32* %utf8449, align 8
  %tobool450 = icmp ne i32 %392, 0
  %393 = zext i1 %tobool450 to i64
  %cond451 = select i1 %tobool450, i32 1, i32 0
  %tobool452 = icmp ne i32 %cond451, 0
  %394 = zext i1 %tobool452 to i64
  %cond453 = select i1 %tobool452, i32 1, i32 0
  %395 = load i64, i64* %offset438, align 8
  %396 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp454 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %396, i32 0, i32 2
  %397 = load i8*, i8** %precomp454, align 8
  %398 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8455 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %398, i32 0, i32 25
  %399 = load i32, i32* %utf8455, align 8
  %tobool456 = icmp ne i32 %399, 0
  %400 = zext i1 %tobool456 to i64
  %cond457 = select i1 %tobool456, i32 1, i32 0
  %tobool458 = icmp ne i32 %cond457, 0
  %401 = zext i1 %tobool458 to i64
  %cond459 = select i1 %tobool458, i32 1, i32 0
  %402 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end460 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %402, i32 0, i32 7
  %403 = load i8*, i8** %end460, align 8
  %404 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp461 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %404, i32 0, i32 2
  %405 = load i8*, i8** %precomp461, align 8
  %sub.ptr.lhs.cast462 = ptrtoint i8* %403 to i64
  %sub.ptr.rhs.cast463 = ptrtoint i8* %405 to i64
  %sub.ptr.sub464 = sub i64 %sub.ptr.lhs.cast462, %sub.ptr.rhs.cast463
  %406 = load i64, i64* %offset438, align 8
  %sub465 = sub nsw i64 %sub.ptr.sub464, %406
  %407 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp466 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %407, i32 0, i32 2
  %408 = load i8*, i8** %precomp466, align 8
  %409 = load i64, i64* %offset438, align 8
  %add.ptr467 = getelementptr inbounds i8, i8* %408, i64 %409
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool447, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.293, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %conv448, i32 %cond453, i64 %395, i8* %397, i32 %cond459, i64 %sub465, i8* %add.ptr467)
  br label %do.end468

do.end468:                                        ; preds = %do.body437
  br label %do.end469

do.end469:                                        ; preds = %do.end468
  br label %if.end470

if.end470:                                        ; preds = %do.end469, %if.end422
  %410 = load i8*, i8** %endbrace, align 8
  %411 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse471 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %411, i32 0, i32 8
  %412 = load i8*, i8** %parse471, align 8
  %sub.ptr.lhs.cast472 = ptrtoint i8* %410 to i64
  %sub.ptr.rhs.cast473 = ptrtoint i8* %412 to i64
  %sub.ptr.sub474 = sub i64 %sub.ptr.lhs.cast472, %sub.ptr.rhs.cast473
  store i64 %sub.ptr.sub474, i64* %length, align 8
  %413 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse475 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %413, i32 0, i32 8
  %414 = load i8*, i8** %parse475, align 8
  %415 = load i8, i8* %414, align 1
  %conv476 = sext i8 %415 to i32
  switch i32 %conv476, label %sw.default [
    i32 103, label %sw.bb477
    i32 115, label %sw.bb490
    i32 119, label %sw.bb502
  ]

sw.bb477:                                         ; preds = %if.end470
  %416 = load i64, i64* %length, align 8
  %cmp478 = icmp ne i64 %416, 1
  br i1 %cmp478, label %land.lhs.true480, label %if.end488

land.lhs.true480:                                 ; preds = %sw.bb477
  %417 = load i64, i64* %length, align 8
  %cmp481 = icmp ne i64 %417, 3
  br i1 %cmp481, label %if.then487, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true480
  %418 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse483 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %418, i32 0, i32 8
  %419 = load i8*, i8** %parse483, align 8
  %add.ptr484 = getelementptr inbounds i8, i8* %419, i64 1
  %call485 = call i32 @strncmp(i8* %add.ptr484, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.294, i64 0, i64 0), i64 2) #6
  %tobool486 = icmp ne i32 %call485, 0
  br i1 %tobool486, label %if.then487, label %if.end488

if.then487:                                       ; preds = %lor.lhs.false, %land.lhs.true480
  br label %bad_bound_type

if.end488:                                        ; preds = %lor.lhs.false, %sw.bb477
  %420 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags489 = getelementptr inbounds %struct.regnode, %struct.regnode* %420, i32 0, i32 0
  store i8 1, i8* %flags489, align 2
  br label %sw.epilog

sw.bb490:                                         ; preds = %if.end470
  %421 = load i64, i64* %length, align 8
  %cmp491 = icmp ne i64 %421, 2
  br i1 %cmp491, label %if.then499, label %lor.lhs.false493

lor.lhs.false493:                                 ; preds = %sw.bb490
  %422 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse494 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %422, i32 0, i32 8
  %423 = load i8*, i8** %parse494, align 8
  %add.ptr495 = getelementptr inbounds i8, i8* %423, i64 1
  %424 = load i8, i8* %add.ptr495, align 1
  %conv496 = sext i8 %424 to i32
  %cmp497 = icmp ne i32 %conv496, 98
  br i1 %cmp497, label %if.then499, label %if.end500

if.then499:                                       ; preds = %lor.lhs.false493, %sw.bb490
  br label %bad_bound_type

if.end500:                                        ; preds = %lor.lhs.false493
  %425 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags501 = getelementptr inbounds %struct.regnode, %struct.regnode* %425, i32 0, i32 0
  store i8 2, i8* %flags501, align 2
  br label %sw.epilog

sw.bb502:                                         ; preds = %if.end470
  %426 = load i64, i64* %length, align 8
  %cmp503 = icmp ne i64 %426, 2
  br i1 %cmp503, label %if.then511, label %lor.lhs.false505

lor.lhs.false505:                                 ; preds = %sw.bb502
  %427 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse506 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %427, i32 0, i32 8
  %428 = load i8*, i8** %parse506, align 8
  %add.ptr507 = getelementptr inbounds i8, i8* %428, i64 1
  %429 = load i8, i8* %add.ptr507, align 1
  %conv508 = sext i8 %429 to i32
  %cmp509 = icmp ne i32 %conv508, 98
  br i1 %cmp509, label %if.then511, label %if.end512

if.then511:                                       ; preds = %lor.lhs.false505, %sw.bb502
  br label %bad_bound_type

if.end512:                                        ; preds = %lor.lhs.false505
  %430 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags513 = getelementptr inbounds %struct.regnode, %struct.regnode* %430, i32 0, i32 0
  store i8 3, i8* %flags513, align 2
  br label %sw.epilog

sw.default:                                       ; preds = %if.end470
  br label %bad_bound_type

bad_bound_type:                                   ; preds = %sw.default, %if.then511, %if.then499, %if.then487
  %431 = load i8*, i8** %endbrace, align 8
  %432 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse514 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %432, i32 0, i32 8
  store i8* %431, i8** %parse514, align 8
  br label %do.body515

do.body515:                                       ; preds = %bad_bound_type
  %433 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse517 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %433, i32 0, i32 8
  %434 = load i8*, i8** %parse517, align 8
  %435 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp518 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %435, i32 0, i32 2
  %436 = load i8*, i8** %precomp518, align 8
  %sub.ptr.lhs.cast519 = ptrtoint i8* %434 to i64
  %sub.ptr.rhs.cast520 = ptrtoint i8* %436 to i64
  %sub.ptr.sub521 = sub i64 %sub.ptr.lhs.cast519, %sub.ptr.rhs.cast520
  store i64 %sub.ptr.sub521, i64* %offset516, align 8
  %437 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit522 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %437, i32 0, i32 12
  %438 = load %struct.regnode*, %struct.regnode** %emit522, align 8
  %439 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy523 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %439, i32 0, i32 13
  %440 = bitcast %struct.regnode_ssc* %emit_dummy523 to %struct.regnode*
  %cmp524 = icmp eq %struct.regnode* %438, %440
  br i1 %cmp524, label %if.end528, label %if.then526

if.then526:                                       ; preds = %do.body515
  %441 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv527 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %441, i32 0, i32 3
  %442 = load %struct.p5rx*, %struct.p5rx** %rx_sv527, align 8
  %443 = bitcast %struct.p5rx* %442 to i8*
  %444 = bitcast i8* %443 to %struct.sv*
  %445 = bitcast %struct.sv* %444 to i8*
  call void @Perl_save_pushptr(i8* %445, i32 11)
  br label %if.end528

if.end528:                                        ; preds = %if.then526, %do.body515
  %446 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8529 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %446, i32 0, i32 25
  %447 = load i32, i32* %utf8529, align 8
  %tobool530 = icmp ne i32 %447, 0
  %448 = zext i1 %tobool530 to i64
  %cond531 = select i1 %tobool530, i32 1, i32 0
  %tobool532 = icmp ne i32 %cond531, 0
  %449 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8533 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %449, i32 0, i32 25
  %450 = load i32, i32* %utf8533, align 8
  %tobool534 = icmp ne i32 %450, 0
  %451 = zext i1 %tobool534 to i64
  %cond535 = select i1 %tobool534, i32 1, i32 0
  %tobool536 = icmp ne i32 %cond535, 0
  %452 = zext i1 %tobool536 to i64
  %cond537 = select i1 %tobool536, i32 1, i32 0
  %453 = load i64, i64* %length, align 8
  %454 = load i8*, i8** %endbrace, align 8
  %455 = load i64, i64* %length, align 8
  %idx.neg = sub i64 0, %455
  %add.ptr538 = getelementptr inbounds i8, i8* %454, i64 %idx.neg
  %456 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8539 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %456, i32 0, i32 25
  %457 = load i32, i32* %utf8539, align 8
  %tobool540 = icmp ne i32 %457, 0
  %458 = zext i1 %tobool540 to i64
  %cond541 = select i1 %tobool540, i32 1, i32 0
  %tobool542 = icmp ne i32 %cond541, 0
  %459 = zext i1 %tobool542 to i64
  %cond543 = select i1 %tobool542, i32 1, i32 0
  %460 = load i64, i64* %offset516, align 8
  %461 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp544 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %461, i32 0, i32 2
  %462 = load i8*, i8** %precomp544, align 8
  %463 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8545 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %463, i32 0, i32 25
  %464 = load i32, i32* %utf8545, align 8
  %tobool546 = icmp ne i32 %464, 0
  %465 = zext i1 %tobool546 to i64
  %cond547 = select i1 %tobool546, i32 1, i32 0
  %tobool548 = icmp ne i32 %cond547, 0
  %466 = zext i1 %tobool548 to i64
  %cond549 = select i1 %tobool548, i32 1, i32 0
  %467 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end550 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %467, i32 0, i32 7
  %468 = load i8*, i8** %end550, align 8
  %469 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp551 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %469, i32 0, i32 2
  %470 = load i8*, i8** %precomp551, align 8
  %sub.ptr.lhs.cast552 = ptrtoint i8* %468 to i64
  %sub.ptr.rhs.cast553 = ptrtoint i8* %470 to i64
  %sub.ptr.sub554 = sub i64 %sub.ptr.lhs.cast552, %sub.ptr.rhs.cast553
  %471 = load i64, i64* %offset516, align 8
  %sub555 = sub nsw i64 %sub.ptr.sub554, %471
  %472 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp556 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %472, i32 0, i32 2
  %473 = load i8*, i8** %precomp556, align 8
  %474 = load i64, i64* %offset516, align 8
  %add.ptr557 = getelementptr inbounds i8, i8* %473, i64 %474
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool532, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.295, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %cond537, i64 %453, i8* %add.ptr538, i32 %cond543, i64 %460, i8* %462, i32 %cond549, i64 %sub555, i8* %add.ptr557)
  br label %do.end558

do.end558:                                        ; preds = %if.end528
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end558, %if.end512, %if.end500, %if.end488
  %475 = load i8*, i8** %endbrace, align 8
  %476 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse559 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %476, i32 0, i32 8
  store i8* %475, i8** %parse559, align 8
  %477 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %uni_semantics = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %477, i32 0, i32 27
  store i32 1, i32* %uni_semantics, align 8
  %478 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit560 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %478, i32 0, i32 12
  %479 = load %struct.regnode*, %struct.regnode** %emit560, align 8
  %480 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy561 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %480, i32 0, i32 13
  %481 = bitcast %struct.regnode_ssc* %emit_dummy561 to %struct.regnode*
  %cmp562 = icmp eq %struct.regnode* %479, %481
  br i1 %cmp562, label %if.end606, label %land.lhs.true564

land.lhs.true564:                                 ; preds = %sw.epilog
  %482 = load i8, i8* %op, align 1
  %conv565 = zext i8 %482 to i32
  %cmp566 = icmp sge i32 %conv565, 11
  br i1 %cmp566, label %if.then568, label %if.end606

if.then568:                                       ; preds = %land.lhs.true564
  %483 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %type569 = getelementptr inbounds %struct.regnode, %struct.regnode* %483, i32 0, i32 1
  store i8 10, i8* %type569, align 1
  %484 = load i64, i64* %length, align 8
  %add570 = add i64 %484, 4
  store i64 %add570, i64* %length, align 8
  br label %do.body571

do.body571:                                       ; preds = %if.then568
  %485 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse573 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %485, i32 0, i32 8
  %486 = load i8*, i8** %parse573, align 8
  %add.ptr574 = getelementptr inbounds i8, i8* %486, i64 1
  %487 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp575 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %487, i32 0, i32 2
  %488 = load i8*, i8** %precomp575, align 8
  %sub.ptr.lhs.cast576 = ptrtoint i8* %add.ptr574 to i64
  %sub.ptr.rhs.cast577 = ptrtoint i8* %488 to i64
  %sub.ptr.sub578 = sub i64 %sub.ptr.lhs.cast576, %sub.ptr.rhs.cast577
  store i64 %sub.ptr.sub578, i64* %offset572, align 8
  %489 = load i64, i64* %length, align 8
  %conv579 = trunc i64 %489 to i32
  %490 = load i8*, i8** %endbrace, align 8
  %491 = load i64, i64* %length, align 8
  %idx.neg580 = sub i64 0, %491
  %add.ptr581 = getelementptr inbounds i8, i8* %490, i64 %idx.neg580
  %add.ptr582 = getelementptr inbounds i8, i8* %add.ptr581, i64 1
  %492 = load i32, i32* %charset, align 4
  %cmp583 = icmp eq i32 %492, 3
  %493 = zext i1 %cmp583 to i64
  %cond585 = select i1 %cmp583, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.212, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.213, i64 0, i64 0)
  %494 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8586 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %494, i32 0, i32 25
  %495 = load i32, i32* %utf8586, align 8
  %tobool587 = icmp ne i32 %495, 0
  %496 = zext i1 %tobool587 to i64
  %cond588 = select i1 %tobool587, i32 1, i32 0
  %tobool589 = icmp ne i32 %cond588, 0
  %497 = zext i1 %tobool589 to i64
  %cond590 = select i1 %tobool589, i32 1, i32 0
  %498 = load i64, i64* %offset572, align 8
  %499 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp591 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %499, i32 0, i32 2
  %500 = load i8*, i8** %precomp591, align 8
  %501 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8592 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %501, i32 0, i32 25
  %502 = load i32, i32* %utf8592, align 8
  %tobool593 = icmp ne i32 %502, 0
  %503 = zext i1 %tobool593 to i64
  %cond594 = select i1 %tobool593, i32 1, i32 0
  %tobool595 = icmp ne i32 %cond594, 0
  %504 = zext i1 %tobool595 to i64
  %cond596 = select i1 %tobool595, i32 1, i32 0
  %505 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end597 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %505, i32 0, i32 7
  %506 = load i8*, i8** %end597, align 8
  %507 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp598 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %507, i32 0, i32 2
  %508 = load i8*, i8** %precomp598, align 8
  %sub.ptr.lhs.cast599 = ptrtoint i8* %506 to i64
  %sub.ptr.rhs.cast600 = ptrtoint i8* %508 to i64
  %sub.ptr.sub601 = sub i64 %sub.ptr.lhs.cast599, %sub.ptr.rhs.cast600
  %509 = load i64, i64* %offset572, align 8
  %sub602 = sub nsw i64 %sub.ptr.sub601, %509
  %510 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp603 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %510, i32 0, i32 2
  %511 = load i8*, i8** %precomp603, align 8
  %512 = load i64, i64* %offset572, align 8
  %add.ptr604 = getelementptr inbounds i8, i8* %511, i64 %512
  call void (i32, i8*, ...) @Perl_ck_warner(i32 20, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.296, i64 0, i64 0), i32 %conv579, i8* %add.ptr582, i8* %cond585, i32 %cond590, i64 %498, i8* %500, i32 %cond596, i64 %sub602, i8* %add.ptr604)
  br label %do.end605

do.end605:                                        ; preds = %do.body571
  br label %if.end606

if.end606:                                        ; preds = %do.end605, %land.lhs.true564, %sw.epilog
  br label %if.end607

if.end607:                                        ; preds = %if.end606, %if.end372
  %513 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit608 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %513, i32 0, i32 12
  %514 = load %struct.regnode*, %struct.regnode** %emit608, align 8
  %515 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy609 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %515, i32 0, i32 13
  %516 = bitcast %struct.regnode_ssc* %emit_dummy609 to %struct.regnode*
  %cmp610 = icmp eq %struct.regnode* %514, %516
  br i1 %cmp610, label %if.end619, label %land.lhs.true612

land.lhs.true612:                                 ; preds = %if.end607
  %517 = load i32, i32* %invert, align 4
  %tobool613 = icmp ne i32 %517, 0
  br i1 %tobool613, label %if.then614, label %if.end619

if.then614:                                       ; preds = %land.lhs.true612
  %518 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %type615 = getelementptr inbounds %struct.regnode, %struct.regnode* %518, i32 0, i32 1
  %519 = load i8, i8* %type615, align 1
  %conv616 = zext i8 %519 to i32
  %add617 = add nsw i32 %conv616, 4
  %conv618 = trunc i32 %add617 to i8
  store i8 %conv618, i8* %type615, align 1
  br label %if.end619

if.end619:                                        ; preds = %if.then614, %land.lhs.true612, %if.end607
  br label %finish_meta_pat

sw.bb620:                                         ; preds = %sw.bb259
  store i32 1, i32* %invert, align 4
  br label %sw.bb621

sw.bb621:                                         ; preds = %sw.bb259, %sw.bb620
  store i8 2, i8* %arg, align 1
  %520 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags622 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %520, i32 0, i32 0
  %521 = load i32, i32* %flags622, align 8
  %call623 = call i32 @get_regex_charset(i32 %521)
  %cmp624 = icmp eq i32 %call623, 0
  br i1 %cmp624, label %if.end627, label %if.then626

if.then626:                                       ; preds = %sw.bb621
  br label %join_posix

if.end627:                                        ; preds = %sw.bb621
  store i8 23, i8* %op, align 1
  br label %join_posix_op_known

sw.bb628:                                         ; preds = %sw.bb259
  %522 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call629 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %522, i8 zeroext 91)
  store %struct.regnode* %call629, %struct.regnode** %ret, align 8
  %523 = load i32*, i32** %flagp.addr, align 8
  %524 = load i32, i32* %523, align 4
  %or630 = or i32 %524, 3
  store i32 %or630, i32* %523, align 4
  br label %finish_meta_pat

sw.bb631:                                         ; preds = %sw.bb259
  store i32 1, i32* %invert, align 4
  br label %sw.bb632

sw.bb632:                                         ; preds = %sw.bb259, %sw.bb631
  store i8 22, i8* %arg, align 1
  store i8 23, i8* %op, align 1
  br label %join_posix_op_known

sw.bb633:                                         ; preds = %sw.bb259
  store i32 1, i32* %invert, align 4
  br label %sw.bb634

sw.bb634:                                         ; preds = %sw.bb259, %sw.bb633
  store i8 30, i8* %arg, align 1
  store i8 23, i8* %op, align 1
  br label %join_posix_op_known

sw.bb635:                                         ; preds = %sw.bb259
  store i32 1, i32* %invert, align 4
  br label %sw.bb636

sw.bb636:                                         ; preds = %sw.bb259, %sw.bb635
  store i8 20, i8* %arg, align 1
  br label %join_posix

join_posix:                                       ; preds = %sw.bb636, %if.then626, %sw.bb339
  %525 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags637 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %525, i32 0, i32 0
  %526 = load i32, i32* %flags637, align 8
  %call638 = call i32 @get_regex_charset(i32 %526)
  %add639 = add i32 21, %call638
  %conv640 = trunc i32 %add639 to i8
  store i8 %conv640, i8* %op, align 1
  %527 = load i8, i8* %op, align 1
  %conv641 = zext i8 %527 to i32
  %cmp642 = icmp sgt i32 %conv641, 24
  br i1 %cmp642, label %if.then644, label %if.else645

if.then644:                                       ; preds = %join_posix
  store i8 24, i8* %op, align 1
  br label %if.end652

if.else645:                                       ; preds = %join_posix
  %528 = load i8, i8* %op, align 1
  %conv646 = zext i8 %528 to i32
  %cmp647 = icmp eq i32 %conv646, 22
  br i1 %cmp647, label %if.then649, label %if.end651

if.then649:                                       ; preds = %if.else645
  %529 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %contains_locale650 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %529, i32 0, i32 34
  store i32 1, i32* %contains_locale650, align 8
  br label %if.end651

if.end651:                                        ; preds = %if.then649, %if.else645
  br label %if.end652

if.end652:                                        ; preds = %if.end651, %if.then644
  br label %join_posix_op_known

join_posix_op_known:                              ; preds = %if.end652, %sw.bb634, %sw.bb632, %if.end627
  %530 = load i32, i32* %invert, align 4
  %tobool653 = icmp ne i32 %530, 0
  br i1 %tobool653, label %if.then654, label %if.end658

if.then654:                                       ; preds = %join_posix_op_known
  %531 = load i8, i8* %op, align 1
  %conv655 = zext i8 %531 to i32
  %add656 = add nsw i32 %conv655, 4
  %conv657 = trunc i32 %add656 to i8
  store i8 %conv657, i8* %op, align 1
  br label %if.end658

if.end658:                                        ; preds = %if.then654, %join_posix_op_known
  %532 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %533 = load i8, i8* %op, align 1
  %call659 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %532, i8 zeroext %533)
  store %struct.regnode* %call659, %struct.regnode** %ret, align 8
  %534 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit660 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %534, i32 0, i32 12
  %535 = load %struct.regnode*, %struct.regnode** %emit660, align 8
  %536 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy661 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %536, i32 0, i32 13
  %537 = bitcast %struct.regnode_ssc* %emit_dummy661 to %struct.regnode*
  %cmp662 = icmp eq %struct.regnode* %535, %537
  br i1 %cmp662, label %if.end668, label %if.then664

if.then664:                                       ; preds = %if.end658
  %538 = load i8, i8* %arg, align 1
  %conv665 = zext i8 %538 to i32
  %div = sdiv i32 %conv665, 2
  %conv666 = trunc i32 %div to i8
  %539 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags667 = getelementptr inbounds %struct.regnode, %struct.regnode* %539, i32 0, i32 0
  store i8 %conv666, i8* %flags667, align 2
  br label %if.end668

if.end668:                                        ; preds = %if.then664, %if.end658
  %540 = load i32*, i32** %flagp.addr, align 8
  %541 = load i32, i32* %540, align 4
  %or669 = or i32 %541, 3
  store i32 %or669, i32* %540, align 4
  br label %finish_meta_pat

finish_meta_pat:                                  ; preds = %if.end668, %sw.bb628, %if.end619, %sw.bb335, %if.end334, %sw.bb291, %sw.bb286, %sw.bb279, %sw.bb275, %if.end273
  %542 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call670 = call i8* @S_nextchar(%struct.RExC_state_t* %542)
  br label %sw.epilog1368

sw.bb671:                                         ; preds = %sw.bb259, %sw.bb259
  %543 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse672 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %543, i32 0, i32 8
  %544 = load i8*, i8** %parse672, align 8
  %incdec.ptr673 = getelementptr inbounds i8, i8* %544, i32 -1
  store i8* %incdec.ptr673, i8** %parse672, align 8
  %545 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %546 = load i32*, i32** %flagp.addr, align 8
  %547 = load i32, i32* %depth.addr, align 4
  %add674 = add i32 %547, 1
  %548 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %strict675 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %548, i32 0, i32 45
  %549 = load i32, i32* %strict675, align 4
  %tobool676 = icmp ne i32 %549, 0
  %call677 = call %struct.regnode* @S_regclass(%struct.RExC_state_t* %545, i32* %546, i32 %add674, i1 zeroext true, i1 zeroext false, i1 zeroext false, i1 zeroext %tobool676, %struct.sv** null)
  store %struct.regnode* %call677, %struct.regnode** %ret, align 8
  %550 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %tobool678 = icmp ne %struct.regnode* %550, null
  br i1 %tobool678, label %if.end707, label %if.then679

if.then679:                                       ; preds = %sw.bb671
  br label %do.body680

do.body680:                                       ; preds = %if.then679
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses681, align 8
  %551 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end683 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %551, i32 0, i32 7
  %552 = load i8*, i8** %end683, align 8
  %553 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp684 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %553, i32 0, i32 2
  %554 = load i8*, i8** %precomp684, align 8
  %sub.ptr.lhs.cast685 = ptrtoint i8* %552 to i64
  %sub.ptr.rhs.cast686 = ptrtoint i8* %554 to i64
  %sub.ptr.sub687 = sub i64 %sub.ptr.lhs.cast685, %sub.ptr.rhs.cast686
  store i64 %sub.ptr.sub687, i64* %len682, align 8
  %555 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit688 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %555, i32 0, i32 12
  %556 = load %struct.regnode*, %struct.regnode** %emit688, align 8
  %557 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy689 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %557, i32 0, i32 13
  %558 = bitcast %struct.regnode_ssc* %emit_dummy689 to %struct.regnode*
  %cmp690 = icmp eq %struct.regnode* %556, %558
  br i1 %cmp690, label %if.end694, label %if.then692

if.then692:                                       ; preds = %do.body680
  %559 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv693 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %559, i32 0, i32 3
  %560 = load %struct.p5rx*, %struct.p5rx** %rx_sv693, align 8
  %561 = bitcast %struct.p5rx* %560 to i8*
  %562 = bitcast i8* %561 to %struct.sv*
  %563 = bitcast %struct.sv* %562 to i8*
  call void @Perl_save_pushptr(i8* %563, i32 11)
  br label %if.end694

if.end694:                                        ; preds = %if.then692, %do.body680
  %564 = load i64, i64* %len682, align 8
  %cmp695 = icmp sgt i64 %564, 127
  br i1 %cmp695, label %if.then697, label %if.end698

if.then697:                                       ; preds = %if.end694
  store i64 117, i64* %len682, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses681, align 8
  br label %if.end698

if.end698:                                        ; preds = %if.then697, %if.end694
  %565 = load i32*, i32** %flagp.addr, align 8
  %566 = load i32, i32* %565, align 4
  %conv699 = sext i32 %566 to i64
  %567 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8700 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %567, i32 0, i32 25
  %568 = load i32, i32* %utf8700, align 8
  %tobool701 = icmp ne i32 %568, 0
  %569 = zext i1 %tobool701 to i64
  %cond702 = select i1 %tobool701, i32 1, i32 0
  %tobool703 = icmp ne i32 %cond702, 0
  %570 = zext i1 %tobool703 to i64
  %cond704 = select i1 %tobool703, i32 1, i32 0
  %571 = load i64, i64* %len682, align 8
  %572 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp705 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %572, i32 0, i32 2
  %573 = load i8*, i8** %precomp705, align 8
  %574 = load i8*, i8** %ellipses681, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.287, i64 0, i64 0), i64 %conv699, i32 %cond704, i64 %571, i8* %573, i8* %574)
  br label %do.end706

do.end706:                                        ; preds = %if.end698
  br label %if.end707

if.end707:                                        ; preds = %do.end706, %sw.bb671
  %575 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse708 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %575, i32 0, i32 8
  %576 = load i8*, i8** %parse708, align 8
  %incdec.ptr709 = getelementptr inbounds i8, i8* %576, i32 -1
  store i8* %incdec.ptr709, i8** %parse708, align 8
  %577 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call710 = call i8* @S_nextchar(%struct.RExC_state_t* %577)
  br label %sw.epilog1368

sw.bb711:                                         ; preds = %sw.bb259
  %578 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse712 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %578, i32 0, i32 8
  %579 = load i8*, i8** %parse712, align 8
  %incdec.ptr713 = getelementptr inbounds i8, i8* %579, i32 1
  store i8* %incdec.ptr713, i8** %parse712, align 8
  %580 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %581 = load i32*, i32** %flagp.addr, align 8
  %582 = load i32, i32* %depth.addr, align 4
  %call714 = call zeroext i1 @S_grok_bslash_N(%struct.RExC_state_t* %580, %struct.regnode** %ret, i64* null, i32* null, i32* %581, i32 %582)
  br i1 %call714, label %if.then715, label %if.end716

if.then715:                                       ; preds = %sw.bb711
  br label %sw.epilog1368

if.end716:                                        ; preds = %sw.bb711
  %583 = load i32*, i32** %flagp.addr, align 8
  %584 = load i32, i32* %583, align 4
  %and717 = and i32 %584, 32
  %tobool718 = icmp ne i32 %and717, 0
  br i1 %tobool718, label %if.then719, label %if.end720

if.then719:                                       ; preds = %if.end716
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end720:                                        ; preds = %if.end716
  %585 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse721 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %585, i32 0, i32 8
  %586 = load i8*, i8** %parse721, align 8
  %incdec.ptr722 = getelementptr inbounds i8, i8* %586, i32 -1
  store i8* %incdec.ptr722, i8** %parse721, align 8
  br label %defchar

sw.bb723:                                         ; preds = %sw.bb259
  br label %parse_named_seq

parse_named_seq:                                  ; preds = %if.end941, %sw.bb723
  %587 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse724 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %587, i32 0, i32 8
  %588 = load i8*, i8** %parse724, align 8
  %arrayidx = getelementptr inbounds i8, i8* %588, i64 1
  %589 = load i8, i8* %arrayidx, align 1
  store i8 %589, i8* %ch, align 1
  %590 = load i8, i8* %ch, align 1
  %conv725 = sext i8 %590 to i32
  %cmp726 = icmp ne i32 %conv725, 60
  br i1 %cmp726, label %land.lhs.true728, label %if.else779

land.lhs.true728:                                 ; preds = %parse_named_seq
  %591 = load i8, i8* %ch, align 1
  %conv729 = sext i8 %591 to i32
  %cmp730 = icmp ne i32 %conv729, 39
  br i1 %cmp730, label %land.lhs.true732, label %if.else779

land.lhs.true732:                                 ; preds = %land.lhs.true728
  %592 = load i8, i8* %ch, align 1
  %conv733 = sext i8 %592 to i32
  %cmp734 = icmp ne i32 %conv733, 123
  br i1 %cmp734, label %if.then736, label %if.else779

if.then736:                                       ; preds = %land.lhs.true732
  %593 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse737 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %593, i32 0, i32 8
  %594 = load i8*, i8** %parse737, align 8
  %incdec.ptr738 = getelementptr inbounds i8, i8* %594, i32 1
  store i8* %incdec.ptr738, i8** %parse737, align 8
  br label %do.body739

do.body739:                                       ; preds = %if.then736
  %595 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit740 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %595, i32 0, i32 12
  %596 = load %struct.regnode*, %struct.regnode** %emit740, align 8
  %597 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy741 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %597, i32 0, i32 13
  %598 = bitcast %struct.regnode_ssc* %emit_dummy741 to %struct.regnode*
  %cmp742 = icmp eq %struct.regnode* %596, %598
  br i1 %cmp742, label %if.end746, label %if.then744

if.then744:                                       ; preds = %do.body739
  %599 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv745 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %599, i32 0, i32 3
  %600 = load %struct.p5rx*, %struct.p5rx** %rx_sv745, align 8
  %601 = bitcast %struct.p5rx* %600 to i8*
  %602 = bitcast i8* %601 to %struct.sv*
  %603 = bitcast %struct.sv* %602 to i8*
  call void @Perl_save_pushptr(i8* %603, i32 11)
  br label %if.end746

if.end746:                                        ; preds = %if.then744, %do.body739
  br label %do.body747

do.body747:                                       ; preds = %if.end746
  %604 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse749 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %604, i32 0, i32 8
  %605 = load i8*, i8** %parse749, align 8
  %606 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp750 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %606, i32 0, i32 2
  %607 = load i8*, i8** %precomp750, align 8
  %sub.ptr.lhs.cast751 = ptrtoint i8* %605 to i64
  %sub.ptr.rhs.cast752 = ptrtoint i8* %607 to i64
  %sub.ptr.sub753 = sub i64 %sub.ptr.lhs.cast751, %sub.ptr.rhs.cast752
  store i64 %sub.ptr.sub753, i64* %offset748, align 8
  %608 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8754 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %608, i32 0, i32 25
  %609 = load i32, i32* %utf8754, align 8
  %tobool755 = icmp ne i32 %609, 0
  %610 = zext i1 %tobool755 to i64
  %cond756 = select i1 %tobool755, i32 1, i32 0
  %tobool757 = icmp ne i32 %cond756, 0
  %611 = load i8*, i8** %parse_start, align 8
  %612 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8758 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %612, i32 0, i32 25
  %613 = load i32, i32* %utf8758, align 8
  %tobool759 = icmp ne i32 %613, 0
  %614 = zext i1 %tobool759 to i64
  %cond760 = select i1 %tobool759, i32 1, i32 0
  %tobool761 = icmp ne i32 %cond760, 0
  %615 = zext i1 %tobool761 to i64
  %cond762 = select i1 %tobool761, i32 1, i32 0
  %616 = load i64, i64* %offset748, align 8
  %617 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp763 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %617, i32 0, i32 2
  %618 = load i8*, i8** %precomp763, align 8
  %619 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8764 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %619, i32 0, i32 25
  %620 = load i32, i32* %utf8764, align 8
  %tobool765 = icmp ne i32 %620, 0
  %621 = zext i1 %tobool765 to i64
  %cond766 = select i1 %tobool765, i32 1, i32 0
  %tobool767 = icmp ne i32 %cond766, 0
  %622 = zext i1 %tobool767 to i64
  %cond768 = select i1 %tobool767, i32 1, i32 0
  %623 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end769 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %623, i32 0, i32 7
  %624 = load i8*, i8** %end769, align 8
  %625 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp770 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %625, i32 0, i32 2
  %626 = load i8*, i8** %precomp770, align 8
  %sub.ptr.lhs.cast771 = ptrtoint i8* %624 to i64
  %sub.ptr.rhs.cast772 = ptrtoint i8* %626 to i64
  %sub.ptr.sub773 = sub i64 %sub.ptr.lhs.cast771, %sub.ptr.rhs.cast772
  %627 = load i64, i64* %offset748, align 8
  %sub774 = sub nsw i64 %sub.ptr.sub773, %627
  %628 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp775 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %628, i32 0, i32 2
  %629 = load i8*, i8** %precomp775, align 8
  %630 = load i64, i64* %offset748, align 8
  %add.ptr776 = getelementptr inbounds i8, i8* %629, i64 %630
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool757, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.297, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i8* %611, i32 %cond762, i64 %616, i8* %618, i32 %cond768, i64 %sub774, i8* %add.ptr776)
  br label %do.end777

do.end777:                                        ; preds = %do.body747
  br label %do.end778

do.end778:                                        ; preds = %do.end777
  br label %if.end900

if.else779:                                       ; preds = %land.lhs.true732, %land.lhs.true728, %parse_named_seq
  %631 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse780 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %631, i32 0, i32 8
  %632 = load i8*, i8** %parse780, align 8
  %add.ptr781 = getelementptr inbounds i8, i8* %632, i64 2
  store i8* %add.ptr781, i8** %parse780, align 8
  store i8* %add.ptr781, i8** %name_start, align 8
  store i32 0, i32* %num, align 4
  %633 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %634 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit782 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %634, i32 0, i32 12
  %635 = load %struct.regnode*, %struct.regnode** %emit782, align 8
  %636 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy783 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %636, i32 0, i32 13
  %637 = bitcast %struct.regnode_ssc* %emit_dummy783 to %struct.regnode*
  %cmp784 = icmp eq %struct.regnode* %635, %637
  %638 = zext i1 %cmp784 to i64
  %cond786 = select i1 %cmp784, i32 0, i32 2
  %call787 = call %struct.sv* @S_reg_scan_name(%struct.RExC_state_t* %633, i32 %cond786)
  store %struct.sv* %call787, %struct.sv** %sv_dat, align 8
  %639 = load i8, i8* %ch, align 1
  %conv788 = sext i8 %639 to i32
  %cmp789 = icmp eq i32 %conv788, 60
  br i1 %cmp789, label %cond.true791, label %cond.false792

cond.true791:                                     ; preds = %if.else779
  br label %cond.end797

cond.false792:                                    ; preds = %if.else779
  %640 = load i8, i8* %ch, align 1
  %conv793 = sext i8 %640 to i32
  %cmp794 = icmp eq i32 %conv793, 123
  %641 = zext i1 %cmp794 to i64
  %cond796 = select i1 %cmp794, i32 125, i32 39
  br label %cond.end797

cond.end797:                                      ; preds = %cond.false792, %cond.true791
  %cond798 = phi i32 [ 62, %cond.true791 ], [ %cond796, %cond.false792 ]
  %conv799 = trunc i32 %cond798 to i8
  store i8 %conv799, i8* %ch, align 1
  %642 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse800 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %642, i32 0, i32 8
  %643 = load i8*, i8** %parse800, align 8
  %644 = load i8*, i8** %name_start, align 8
  %cmp801 = icmp eq i8* %643, %644
  br i1 %cmp801, label %if.then809, label %lor.lhs.false803

lor.lhs.false803:                                 ; preds = %cond.end797
  %645 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse804 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %645, i32 0, i32 8
  %646 = load i8*, i8** %parse804, align 8
  %647 = load i8, i8* %646, align 1
  %conv805 = sext i8 %647 to i32
  %648 = load i8, i8* %ch, align 1
  %conv806 = sext i8 %648 to i32
  %cmp807 = icmp ne i32 %conv805, %conv806
  br i1 %cmp807, label %if.then809, label %if.end850

if.then809:                                       ; preds = %lor.lhs.false803, %cond.end797
  br label %do.body810

do.body810:                                       ; preds = %if.then809
  %649 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit811 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %649, i32 0, i32 12
  %650 = load %struct.regnode*, %struct.regnode** %emit811, align 8
  %651 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy812 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %651, i32 0, i32 13
  %652 = bitcast %struct.regnode_ssc* %emit_dummy812 to %struct.regnode*
  %cmp813 = icmp eq %struct.regnode* %650, %652
  br i1 %cmp813, label %if.end817, label %if.then815

if.then815:                                       ; preds = %do.body810
  %653 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv816 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %653, i32 0, i32 3
  %654 = load %struct.p5rx*, %struct.p5rx** %rx_sv816, align 8
  %655 = bitcast %struct.p5rx* %654 to i8*
  %656 = bitcast i8* %655 to %struct.sv*
  %657 = bitcast %struct.sv* %656 to i8*
  call void @Perl_save_pushptr(i8* %657, i32 11)
  br label %if.end817

if.end817:                                        ; preds = %if.then815, %do.body810
  br label %do.body818

do.body818:                                       ; preds = %if.end817
  %658 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse820 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %658, i32 0, i32 8
  %659 = load i8*, i8** %parse820, align 8
  %660 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp821 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %660, i32 0, i32 2
  %661 = load i8*, i8** %precomp821, align 8
  %sub.ptr.lhs.cast822 = ptrtoint i8* %659 to i64
  %sub.ptr.rhs.cast823 = ptrtoint i8* %661 to i64
  %sub.ptr.sub824 = sub i64 %sub.ptr.lhs.cast822, %sub.ptr.rhs.cast823
  store i64 %sub.ptr.sub824, i64* %offset819, align 8
  %662 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8825 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %662, i32 0, i32 25
  %663 = load i32, i32* %utf8825, align 8
  %tobool826 = icmp ne i32 %663, 0
  %664 = zext i1 %tobool826 to i64
  %cond827 = select i1 %tobool826, i32 1, i32 0
  %tobool828 = icmp ne i32 %cond827, 0
  %665 = load i8*, i8** %parse_start, align 8
  %666 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8829 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %666, i32 0, i32 25
  %667 = load i32, i32* %utf8829, align 8
  %tobool830 = icmp ne i32 %667, 0
  %668 = zext i1 %tobool830 to i64
  %cond831 = select i1 %tobool830, i32 1, i32 0
  %tobool832 = icmp ne i32 %cond831, 0
  %669 = zext i1 %tobool832 to i64
  %cond833 = select i1 %tobool832, i32 1, i32 0
  %670 = load i64, i64* %offset819, align 8
  %671 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp834 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %671, i32 0, i32 2
  %672 = load i8*, i8** %precomp834, align 8
  %673 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8835 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %673, i32 0, i32 25
  %674 = load i32, i32* %utf8835, align 8
  %tobool836 = icmp ne i32 %674, 0
  %675 = zext i1 %tobool836 to i64
  %cond837 = select i1 %tobool836, i32 1, i32 0
  %tobool838 = icmp ne i32 %cond837, 0
  %676 = zext i1 %tobool838 to i64
  %cond839 = select i1 %tobool838, i32 1, i32 0
  %677 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end840 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %677, i32 0, i32 7
  %678 = load i8*, i8** %end840, align 8
  %679 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp841 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %679, i32 0, i32 2
  %680 = load i8*, i8** %precomp841, align 8
  %sub.ptr.lhs.cast842 = ptrtoint i8* %678 to i64
  %sub.ptr.rhs.cast843 = ptrtoint i8* %680 to i64
  %sub.ptr.sub844 = sub i64 %sub.ptr.lhs.cast842, %sub.ptr.rhs.cast843
  %681 = load i64, i64* %offset819, align 8
  %sub845 = sub nsw i64 %sub.ptr.sub844, %681
  %682 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp846 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %682, i32 0, i32 2
  %683 = load i8*, i8** %precomp846, align 8
  %684 = load i64, i64* %offset819, align 8
  %add.ptr847 = getelementptr inbounds i8, i8* %683, i64 %684
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool828, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.240, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i8* %665, i32 %cond833, i64 %670, i8* %672, i32 %cond839, i64 %sub845, i8* %add.ptr847)
  br label %do.end848

do.end848:                                        ; preds = %do.body818
  br label %do.end849

do.end849:                                        ; preds = %do.end848
  br label %if.end850

if.end850:                                        ; preds = %do.end849, %lor.lhs.false803
  %685 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit851 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %685, i32 0, i32 12
  %686 = load %struct.regnode*, %struct.regnode** %emit851, align 8
  %687 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy852 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %687, i32 0, i32 13
  %688 = bitcast %struct.regnode_ssc* %emit_dummy852 to %struct.regnode*
  %cmp853 = icmp eq %struct.regnode* %686, %688
  br i1 %cmp853, label %if.end865, label %if.then855

if.then855:                                       ; preds = %if.end850
  %689 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call856 = call i32 @S_add_data(%struct.RExC_state_t* %689, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.238, i64 0, i64 0), i32 1)
  store i32 %call856, i32* %num, align 4
  %690 = load %struct.sv*, %struct.sv** %sv_dat, align 8
  %691 = bitcast %struct.sv* %690 to i8*
  %692 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rxi = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %692, i32 0, i32 5
  %693 = load %struct.regexp_internal*, %struct.regexp_internal** %rxi, align 8
  %data = getelementptr inbounds %struct.regexp_internal, %struct.regexp_internal* %693, i32 0, i32 3
  %694 = load %struct.reg_data*, %struct.reg_data** %data, align 8
  %data857 = getelementptr inbounds %struct.reg_data, %struct.reg_data* %694, i32 0, i32 2
  %695 = load i32, i32* %num, align 4
  %idxprom = zext i32 %695 to i64
  %arrayidx858 = getelementptr inbounds [1 x i8*], [1 x i8*]* %data857, i64 0, i64 %idxprom
  store i8* %691, i8** %arrayidx858, align 8
  br label %do.body859

do.body859:                                       ; preds = %if.then855
  %696 = load %struct.sv*, %struct.sv** %sv_dat, align 8
  %tobool860 = icmp ne %struct.sv* %696, null
  br i1 %tobool860, label %if.then861, label %if.end863

if.then861:                                       ; preds = %do.body859
  %697 = load %struct.sv*, %struct.sv** %sv_dat, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %697, i32 0, i32 1
  %698 = load i32, i32* %sv_refcnt, align 8
  %inc862 = add i32 %698, 1
  store i32 %inc862, i32* %sv_refcnt, align 8
  br label %if.end863

if.end863:                                        ; preds = %if.then861, %do.body859
  br label %do.end864

do.end864:                                        ; preds = %if.end863
  br label %if.end865

if.end865:                                        ; preds = %do.end864, %if.end850
  %699 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %sawback = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %699, i32 0, i32 15
  store i32 1, i32* %sawback, align 4
  %700 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %701 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags866 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %701, i32 0, i32 0
  %702 = load i32, i32* %flags866, align 8
  %and867 = and i32 %702, 4
  %tobool868 = icmp ne i32 %and867, 0
  br i1 %tobool868, label %cond.true869, label %cond.false870

cond.true869:                                     ; preds = %if.end865
  br i1 true, label %cond.false872, label %cond.true871

cond.false870:                                    ; preds = %if.end865
  br i1 false, label %cond.false872, label %cond.true871

cond.true871:                                     ; preds = %cond.false870, %cond.true869
  br label %cond.end894

cond.false872:                                    ; preds = %cond.false870, %cond.true869
  %703 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags873 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %703, i32 0, i32 0
  %704 = load i32, i32* %flags873, align 8
  %call874 = call i32 @get_regex_charset(i32 %704)
  %cmp875 = icmp eq i32 %call874, 4
  br i1 %cmp875, label %cond.true877, label %cond.false878

cond.true877:                                     ; preds = %cond.false872
  br label %cond.end892

cond.false878:                                    ; preds = %cond.false872
  %705 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags879 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %705, i32 0, i32 0
  %706 = load i32, i32* %flags879, align 8
  %call880 = call i32 @get_regex_charset(i32 %706)
  %cmp881 = icmp uge i32 %call880, 2
  br i1 %cmp881, label %cond.true883, label %cond.false884

cond.true883:                                     ; preds = %cond.false878
  br label %cond.end890

cond.false884:                                    ; preds = %cond.false878
  %707 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags885 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %707, i32 0, i32 0
  %708 = load i32, i32* %flags885, align 8
  %call886 = call i32 @get_regex_charset(i32 %708)
  %cmp887 = icmp eq i32 %call886, 1
  %709 = zext i1 %cmp887 to i64
  %cond889 = select i1 %cmp887, i32 58, i32 57
  br label %cond.end890

cond.end890:                                      ; preds = %cond.false884, %cond.true883
  %cond891 = phi i32 [ 59, %cond.true883 ], [ %cond889, %cond.false884 ]
  br label %cond.end892

cond.end892:                                      ; preds = %cond.end890, %cond.true877
  %cond893 = phi i32 [ 60, %cond.true877 ], [ %cond891, %cond.end890 ]
  br label %cond.end894

cond.end894:                                      ; preds = %cond.end892, %cond.true871
  %cond895 = phi i32 [ 56, %cond.true871 ], [ %cond893, %cond.end892 ]
  %conv896 = trunc i32 %cond895 to i8
  %710 = load i32, i32* %num, align 4
  %call897 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %700, i8 zeroext %conv896, i32 %710)
  store %struct.regnode* %call897, %struct.regnode** %ret, align 8
  %711 = load i32*, i32** %flagp.addr, align 8
  %712 = load i32, i32* %711, align 4
  %or898 = or i32 %712, 1
  store i32 %or898, i32* %711, align 4
  %713 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call899 = call i8* @S_nextchar(%struct.RExC_state_t* %713)
  br label %if.end900

if.end900:                                        ; preds = %cond.end894, %do.end778
  br label %sw.epilog1368

sw.bb901:                                         ; preds = %sw.bb259, %sw.bb259, %sw.bb259, %sw.bb259, %sw.bb259, %sw.bb259, %sw.bb259, %sw.bb259, %sw.bb259, %sw.bb259
  store i8 0, i8* %hasbrace, align 1
  %714 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse903 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %714, i32 0, i32 8
  %715 = load i8*, i8** %parse903, align 8
  %716 = load i8, i8* %715, align 1
  %conv904 = sext i8 %716 to i32
  %cmp905 = icmp eq i32 %conv904, 103
  br i1 %cmp905, label %if.then907, label %if.else1154

if.then907:                                       ; preds = %sw.bb901
  store i8 0, i8* %isrel, align 1
  %717 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse908 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %717, i32 0, i32 8
  %718 = load i8*, i8** %parse908, align 8
  %incdec.ptr909 = getelementptr inbounds i8, i8* %718, i32 1
  store i8* %incdec.ptr909, i8** %parse908, align 8
  %719 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse910 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %719, i32 0, i32 8
  %720 = load i8*, i8** %parse910, align 8
  %721 = load i8, i8* %720, align 1
  %conv911 = sext i8 %721 to i32
  %cmp912 = icmp eq i32 %conv911, 123
  br i1 %cmp912, label %if.then914, label %if.end917

if.then914:                                       ; preds = %if.then907
  %722 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse915 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %722, i32 0, i32 8
  %723 = load i8*, i8** %parse915, align 8
  %incdec.ptr916 = getelementptr inbounds i8, i8* %723, i32 1
  store i8* %incdec.ptr916, i8** %parse915, align 8
  store i8 1, i8* %hasbrace, align 1
  br label %if.end917

if.end917:                                        ; preds = %if.then914, %if.then907
  %724 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse918 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %724, i32 0, i32 8
  %725 = load i8*, i8** %parse918, align 8
  %726 = load i8, i8* %725, align 1
  %conv919 = sext i8 %726 to i32
  %cmp920 = icmp eq i32 %conv919, 45
  br i1 %cmp920, label %if.then922, label %if.end925

if.then922:                                       ; preds = %if.end917
  %727 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse923 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %727, i32 0, i32 8
  %728 = load i8*, i8** %parse923, align 8
  %incdec.ptr924 = getelementptr inbounds i8, i8* %728, i32 1
  store i8* %incdec.ptr924, i8** %parse923, align 8
  store i8 1, i8* %isrel, align 1
  br label %if.end925

if.end925:                                        ; preds = %if.then922, %if.end917
  %729 = load i8, i8* %hasbrace, align 1
  %tobool926 = trunc i8 %729 to i1
  br i1 %tobool926, label %land.lhs.true928, label %if.end944

land.lhs.true928:                                 ; preds = %if.end925
  %730 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse929 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %730, i32 0, i32 8
  %731 = load i8*, i8** %parse929, align 8
  %732 = load i8, i8* %731, align 1
  %idxprom930 = zext i8 %732 to i64
  %arrayidx931 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom930
  %733 = load i32, i32* %arrayidx931, align 4
  %and932 = and i32 %733, 2
  %tobool933 = icmp ne i32 %and932, 0
  br i1 %tobool933, label %cond.true934, label %cond.false935

cond.true934:                                     ; preds = %land.lhs.true928
  br i1 true, label %if.end944, label %if.then936

cond.false935:                                    ; preds = %land.lhs.true928
  br i1 false, label %if.end944, label %if.then936

if.then936:                                       ; preds = %cond.false935, %cond.true934
  %734 = load i8, i8* %isrel, align 1
  %tobool937 = trunc i8 %734 to i1
  br i1 %tobool937, label %if.then938, label %if.end941

if.then938:                                       ; preds = %if.then936
  %735 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse939 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %735, i32 0, i32 8
  %736 = load i8*, i8** %parse939, align 8
  %incdec.ptr940 = getelementptr inbounds i8, i8* %736, i32 -1
  store i8* %incdec.ptr940, i8** %parse939, align 8
  br label %if.end941

if.end941:                                        ; preds = %if.then938, %if.then936
  %737 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse942 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %737, i32 0, i32 8
  %738 = load i8*, i8** %parse942, align 8
  %add.ptr943 = getelementptr inbounds i8, i8* %738, i64 -2
  store i8* %add.ptr943, i8** %parse942, align 8
  br label %parse_named_seq

if.end944:                                        ; preds = %cond.false935, %cond.true934, %if.end925
  %739 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse945 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %739, i32 0, i32 8
  %740 = load i8*, i8** %parse945, align 8
  %call946 = call i32 @S_backref_value(i8* %740)
  store i32 %call946, i32* %num902, align 4
  %741 = load i32, i32* %num902, align 4
  %cmp947 = icmp eq i32 %741, 0
  br i1 %cmp947, label %if.then949, label %if.else995

if.then949:                                       ; preds = %if.end944
  br label %do.body950

do.body950:                                       ; preds = %if.then949
  %742 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit951 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %742, i32 0, i32 12
  %743 = load %struct.regnode*, %struct.regnode** %emit951, align 8
  %744 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy952 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %744, i32 0, i32 13
  %745 = bitcast %struct.regnode_ssc* %emit_dummy952 to %struct.regnode*
  %cmp953 = icmp eq %struct.regnode* %743, %745
  br i1 %cmp953, label %if.end957, label %if.then955

if.then955:                                       ; preds = %do.body950
  %746 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv956 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %746, i32 0, i32 3
  %747 = load %struct.p5rx*, %struct.p5rx** %rx_sv956, align 8
  %748 = bitcast %struct.p5rx* %747 to i8*
  %749 = bitcast i8* %748 to %struct.sv*
  %750 = bitcast %struct.sv* %749 to i8*
  call void @Perl_save_pushptr(i8* %750, i32 11)
  br label %if.end957

if.end957:                                        ; preds = %if.then955, %do.body950
  br label %do.body958

do.body958:                                       ; preds = %if.end957
  %751 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse960 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %751, i32 0, i32 8
  %752 = load i8*, i8** %parse960, align 8
  %753 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end961 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %753, i32 0, i32 7
  %754 = load i8*, i8** %end961, align 8
  %cmp962 = icmp ugt i8* %752, %754
  br i1 %cmp962, label %cond.true964, label %cond.false966

cond.true964:                                     ; preds = %do.body958
  %755 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end965 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %755, i32 0, i32 7
  %756 = load i8*, i8** %end965, align 8
  br label %cond.end968

cond.false966:                                    ; preds = %do.body958
  %757 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse967 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %757, i32 0, i32 8
  %758 = load i8*, i8** %parse967, align 8
  br label %cond.end968

cond.end968:                                      ; preds = %cond.false966, %cond.true964
  %cond969 = phi i8* [ %756, %cond.true964 ], [ %758, %cond.false966 ]
  %759 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp970 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %759, i32 0, i32 2
  %760 = load i8*, i8** %precomp970, align 8
  %sub.ptr.lhs.cast971 = ptrtoint i8* %cond969 to i64
  %sub.ptr.rhs.cast972 = ptrtoint i8* %760 to i64
  %sub.ptr.sub973 = sub i64 %sub.ptr.lhs.cast971, %sub.ptr.rhs.cast972
  store i64 %sub.ptr.sub973, i64* %offset959, align 8
  %761 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8974 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %761, i32 0, i32 25
  %762 = load i32, i32* %utf8974, align 8
  %tobool975 = icmp ne i32 %762, 0
  %763 = zext i1 %tobool975 to i64
  %cond976 = select i1 %tobool975, i32 1, i32 0
  %tobool977 = icmp ne i32 %cond976, 0
  %764 = zext i1 %tobool977 to i64
  %cond978 = select i1 %tobool977, i32 1, i32 0
  %765 = load i64, i64* %offset959, align 8
  %766 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp979 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %766, i32 0, i32 2
  %767 = load i8*, i8** %precomp979, align 8
  %768 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8980 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %768, i32 0, i32 25
  %769 = load i32, i32* %utf8980, align 8
  %tobool981 = icmp ne i32 %769, 0
  %770 = zext i1 %tobool981 to i64
  %cond982 = select i1 %tobool981, i32 1, i32 0
  %tobool983 = icmp ne i32 %cond982, 0
  %771 = zext i1 %tobool983 to i64
  %cond984 = select i1 %tobool983, i32 1, i32 0
  %772 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end985 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %772, i32 0, i32 7
  %773 = load i8*, i8** %end985, align 8
  %774 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp986 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %774, i32 0, i32 2
  %775 = load i8*, i8** %precomp986, align 8
  %sub.ptr.lhs.cast987 = ptrtoint i8* %773 to i64
  %sub.ptr.rhs.cast988 = ptrtoint i8* %775 to i64
  %sub.ptr.sub989 = sub i64 %sub.ptr.lhs.cast987, %sub.ptr.rhs.cast988
  %776 = load i64, i64* %offset959, align 8
  %sub990 = sub nsw i64 %sub.ptr.sub989, %776
  %777 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp991 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %777, i32 0, i32 2
  %778 = load i8*, i8** %precomp991, align 8
  %779 = load i64, i64* %offset959, align 8
  %add.ptr992 = getelementptr inbounds i8, i8* %778, i64 %779
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.298, i64 0, i64 0), i32 %cond978, i64 %765, i8* %767, i32 %cond984, i64 %sub990, i8* %add.ptr992)
  br label %do.end993

do.end993:                                        ; preds = %cond.end968
  br label %do.end994

do.end994:                                        ; preds = %do.end993
  br label %if.end1100

if.else995:                                       ; preds = %if.end944
  %780 = load i32, i32* %num902, align 4
  %cmp996 = icmp eq i32 %780, 2147483647
  br i1 %cmp996, label %if.then998, label %if.end1099

if.then998:                                       ; preds = %if.else995
  %781 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse999 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %781, i32 0, i32 8
  %782 = load i8*, i8** %parse999, align 8
  %783 = load i8, i8* %782, align 1
  %idxprom1000 = zext i8 %783 to i64
  %arrayidx1001 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom1000
  %784 = load i32, i32* %arrayidx1001, align 4
  %and1002 = and i32 %784, 2
  %tobool1003 = icmp ne i32 %and1002, 0
  br i1 %tobool1003, label %cond.true1004, label %cond.false1005

cond.true1004:                                    ; preds = %if.then998
  br i1 true, label %if.then1006, label %if.else1052

cond.false1005:                                   ; preds = %if.then998
  br i1 false, label %if.then1006, label %if.else1052

if.then1006:                                      ; preds = %cond.false1005, %cond.true1004
  br label %do.body1007

do.body1007:                                      ; preds = %if.then1006
  %785 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1008 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %785, i32 0, i32 12
  %786 = load %struct.regnode*, %struct.regnode** %emit1008, align 8
  %787 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1009 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %787, i32 0, i32 13
  %788 = bitcast %struct.regnode_ssc* %emit_dummy1009 to %struct.regnode*
  %cmp1010 = icmp eq %struct.regnode* %786, %788
  br i1 %cmp1010, label %if.end1014, label %if.then1012

if.then1012:                                      ; preds = %do.body1007
  %789 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1013 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %789, i32 0, i32 3
  %790 = load %struct.p5rx*, %struct.p5rx** %rx_sv1013, align 8
  %791 = bitcast %struct.p5rx* %790 to i8*
  %792 = bitcast i8* %791 to %struct.sv*
  %793 = bitcast %struct.sv* %792 to i8*
  call void @Perl_save_pushptr(i8* %793, i32 11)
  br label %if.end1014

if.end1014:                                       ; preds = %if.then1012, %do.body1007
  br label %do.body1015

do.body1015:                                      ; preds = %if.end1014
  %794 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1017 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %794, i32 0, i32 8
  %795 = load i8*, i8** %parse1017, align 8
  %796 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1018 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %796, i32 0, i32 7
  %797 = load i8*, i8** %end1018, align 8
  %cmp1019 = icmp ugt i8* %795, %797
  br i1 %cmp1019, label %cond.true1021, label %cond.false1023

cond.true1021:                                    ; preds = %do.body1015
  %798 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1022 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %798, i32 0, i32 7
  %799 = load i8*, i8** %end1022, align 8
  br label %cond.end1025

cond.false1023:                                   ; preds = %do.body1015
  %800 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1024 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %800, i32 0, i32 8
  %801 = load i8*, i8** %parse1024, align 8
  br label %cond.end1025

cond.end1025:                                     ; preds = %cond.false1023, %cond.true1021
  %cond1026 = phi i8* [ %799, %cond.true1021 ], [ %801, %cond.false1023 ]
  %802 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1027 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %802, i32 0, i32 2
  %803 = load i8*, i8** %precomp1027, align 8
  %sub.ptr.lhs.cast1028 = ptrtoint i8* %cond1026 to i64
  %sub.ptr.rhs.cast1029 = ptrtoint i8* %803 to i64
  %sub.ptr.sub1030 = sub i64 %sub.ptr.lhs.cast1028, %sub.ptr.rhs.cast1029
  store i64 %sub.ptr.sub1030, i64* %offset1016, align 8
  %804 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81031 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %804, i32 0, i32 25
  %805 = load i32, i32* %utf81031, align 8
  %tobool1032 = icmp ne i32 %805, 0
  %806 = zext i1 %tobool1032 to i64
  %cond1033 = select i1 %tobool1032, i32 1, i32 0
  %tobool1034 = icmp ne i32 %cond1033, 0
  %807 = zext i1 %tobool1034 to i64
  %cond1035 = select i1 %tobool1034, i32 1, i32 0
  %808 = load i64, i64* %offset1016, align 8
  %809 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1036 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %809, i32 0, i32 2
  %810 = load i8*, i8** %precomp1036, align 8
  %811 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81037 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %811, i32 0, i32 25
  %812 = load i32, i32* %utf81037, align 8
  %tobool1038 = icmp ne i32 %812, 0
  %813 = zext i1 %tobool1038 to i64
  %cond1039 = select i1 %tobool1038, i32 1, i32 0
  %tobool1040 = icmp ne i32 %cond1039, 0
  %814 = zext i1 %tobool1040 to i64
  %cond1041 = select i1 %tobool1040, i32 1, i32 0
  %815 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1042 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %815, i32 0, i32 7
  %816 = load i8*, i8** %end1042, align 8
  %817 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1043 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %817, i32 0, i32 2
  %818 = load i8*, i8** %precomp1043, align 8
  %sub.ptr.lhs.cast1044 = ptrtoint i8* %816 to i64
  %sub.ptr.rhs.cast1045 = ptrtoint i8* %818 to i64
  %sub.ptr.sub1046 = sub i64 %sub.ptr.lhs.cast1044, %sub.ptr.rhs.cast1045
  %819 = load i64, i64* %offset1016, align 8
  %sub1047 = sub nsw i64 %sub.ptr.sub1046, %819
  %820 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1048 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %820, i32 0, i32 2
  %821 = load i8*, i8** %precomp1048, align 8
  %822 = load i64, i64* %offset1016, align 8
  %add.ptr1049 = getelementptr inbounds i8, i8* %821, i64 %822
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.250, i64 0, i64 0), i32 %cond1035, i64 %808, i8* %810, i32 %cond1041, i64 %sub1047, i8* %add.ptr1049)
  br label %do.end1050

do.end1050:                                       ; preds = %cond.end1025
  br label %do.end1051

do.end1051:                                       ; preds = %do.end1050
  br label %if.end1098

if.else1052:                                      ; preds = %cond.false1005, %cond.true1004
  br label %do.body1053

do.body1053:                                      ; preds = %if.else1052
  %823 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1054 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %823, i32 0, i32 12
  %824 = load %struct.regnode*, %struct.regnode** %emit1054, align 8
  %825 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1055 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %825, i32 0, i32 13
  %826 = bitcast %struct.regnode_ssc* %emit_dummy1055 to %struct.regnode*
  %cmp1056 = icmp eq %struct.regnode* %824, %826
  br i1 %cmp1056, label %if.end1060, label %if.then1058

if.then1058:                                      ; preds = %do.body1053
  %827 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1059 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %827, i32 0, i32 3
  %828 = load %struct.p5rx*, %struct.p5rx** %rx_sv1059, align 8
  %829 = bitcast %struct.p5rx* %828 to i8*
  %830 = bitcast i8* %829 to %struct.sv*
  %831 = bitcast %struct.sv* %830 to i8*
  call void @Perl_save_pushptr(i8* %831, i32 11)
  br label %if.end1060

if.end1060:                                       ; preds = %if.then1058, %do.body1053
  br label %do.body1061

do.body1061:                                      ; preds = %if.end1060
  %832 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1063 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %832, i32 0, i32 8
  %833 = load i8*, i8** %parse1063, align 8
  %834 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1064 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %834, i32 0, i32 7
  %835 = load i8*, i8** %end1064, align 8
  %cmp1065 = icmp ugt i8* %833, %835
  br i1 %cmp1065, label %cond.true1067, label %cond.false1069

cond.true1067:                                    ; preds = %do.body1061
  %836 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1068 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %836, i32 0, i32 7
  %837 = load i8*, i8** %end1068, align 8
  br label %cond.end1071

cond.false1069:                                   ; preds = %do.body1061
  %838 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1070 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %838, i32 0, i32 8
  %839 = load i8*, i8** %parse1070, align 8
  br label %cond.end1071

cond.end1071:                                     ; preds = %cond.false1069, %cond.true1067
  %cond1072 = phi i8* [ %837, %cond.true1067 ], [ %839, %cond.false1069 ]
  %840 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1073 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %840, i32 0, i32 2
  %841 = load i8*, i8** %precomp1073, align 8
  %sub.ptr.lhs.cast1074 = ptrtoint i8* %cond1072 to i64
  %sub.ptr.rhs.cast1075 = ptrtoint i8* %841 to i64
  %sub.ptr.sub1076 = sub i64 %sub.ptr.lhs.cast1074, %sub.ptr.rhs.cast1075
  store i64 %sub.ptr.sub1076, i64* %offset1062, align 8
  %842 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81077 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %842, i32 0, i32 25
  %843 = load i32, i32* %utf81077, align 8
  %tobool1078 = icmp ne i32 %843, 0
  %844 = zext i1 %tobool1078 to i64
  %cond1079 = select i1 %tobool1078, i32 1, i32 0
  %tobool1080 = icmp ne i32 %cond1079, 0
  %845 = zext i1 %tobool1080 to i64
  %cond1081 = select i1 %tobool1080, i32 1, i32 0
  %846 = load i64, i64* %offset1062, align 8
  %847 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1082 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %847, i32 0, i32 2
  %848 = load i8*, i8** %precomp1082, align 8
  %849 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81083 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %849, i32 0, i32 25
  %850 = load i32, i32* %utf81083, align 8
  %tobool1084 = icmp ne i32 %850, 0
  %851 = zext i1 %tobool1084 to i64
  %cond1085 = select i1 %tobool1084, i32 1, i32 0
  %tobool1086 = icmp ne i32 %cond1085, 0
  %852 = zext i1 %tobool1086 to i64
  %cond1087 = select i1 %tobool1086, i32 1, i32 0
  %853 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1088 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %853, i32 0, i32 7
  %854 = load i8*, i8** %end1088, align 8
  %855 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1089 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %855, i32 0, i32 2
  %856 = load i8*, i8** %precomp1089, align 8
  %sub.ptr.lhs.cast1090 = ptrtoint i8* %854 to i64
  %sub.ptr.rhs.cast1091 = ptrtoint i8* %856 to i64
  %sub.ptr.sub1092 = sub i64 %sub.ptr.lhs.cast1090, %sub.ptr.rhs.cast1091
  %857 = load i64, i64* %offset1062, align 8
  %sub1093 = sub nsw i64 %sub.ptr.sub1092, %857
  %858 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1094 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %858, i32 0, i32 2
  %859 = load i8*, i8** %precomp1094, align 8
  %860 = load i64, i64* %offset1062, align 8
  %add.ptr1095 = getelementptr inbounds i8, i8* %859, i64 %860
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.299, i64 0, i64 0), i32 %cond1081, i64 %846, i8* %848, i32 %cond1087, i64 %sub1093, i8* %add.ptr1095)
  br label %do.end1096

do.end1096:                                       ; preds = %cond.end1071
  br label %do.end1097

do.end1097:                                       ; preds = %do.end1096
  br label %if.end1098

if.end1098:                                       ; preds = %do.end1097, %do.end1051
  br label %if.end1099

if.end1099:                                       ; preds = %if.end1098, %if.else995
  br label %if.end1100

if.end1100:                                       ; preds = %if.end1099, %do.end994
  %861 = load i8, i8* %isrel, align 1
  %tobool1101 = trunc i8 %861 to i1
  br i1 %tobool1101, label %if.then1102, label %if.end1153

if.then1102:                                      ; preds = %if.end1100
  %862 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %862, i32 0, i32 18
  %863 = load i32, i32* %npar, align 8
  %864 = load i32, i32* %num902, align 4
  %sub1103 = sub nsw i32 %863, %864
  store i32 %sub1103, i32* %num902, align 4
  %865 = load i32, i32* %num902, align 4
  %cmp1104 = icmp slt i32 %865, 1
  br i1 %cmp1104, label %if.then1106, label %if.end1152

if.then1106:                                      ; preds = %if.then1102
  br label %do.body1107

do.body1107:                                      ; preds = %if.then1106
  %866 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1108 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %866, i32 0, i32 12
  %867 = load %struct.regnode*, %struct.regnode** %emit1108, align 8
  %868 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1109 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %868, i32 0, i32 13
  %869 = bitcast %struct.regnode_ssc* %emit_dummy1109 to %struct.regnode*
  %cmp1110 = icmp eq %struct.regnode* %867, %869
  br i1 %cmp1110, label %if.end1114, label %if.then1112

if.then1112:                                      ; preds = %do.body1107
  %870 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1113 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %870, i32 0, i32 3
  %871 = load %struct.p5rx*, %struct.p5rx** %rx_sv1113, align 8
  %872 = bitcast %struct.p5rx* %871 to i8*
  %873 = bitcast i8* %872 to %struct.sv*
  %874 = bitcast %struct.sv* %873 to i8*
  call void @Perl_save_pushptr(i8* %874, i32 11)
  br label %if.end1114

if.end1114:                                       ; preds = %if.then1112, %do.body1107
  br label %do.body1115

do.body1115:                                      ; preds = %if.end1114
  %875 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1117 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %875, i32 0, i32 8
  %876 = load i8*, i8** %parse1117, align 8
  %877 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1118 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %877, i32 0, i32 7
  %878 = load i8*, i8** %end1118, align 8
  %cmp1119 = icmp ugt i8* %876, %878
  br i1 %cmp1119, label %cond.true1121, label %cond.false1123

cond.true1121:                                    ; preds = %do.body1115
  %879 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1122 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %879, i32 0, i32 7
  %880 = load i8*, i8** %end1122, align 8
  br label %cond.end1125

cond.false1123:                                   ; preds = %do.body1115
  %881 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1124 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %881, i32 0, i32 8
  %882 = load i8*, i8** %parse1124, align 8
  br label %cond.end1125

cond.end1125:                                     ; preds = %cond.false1123, %cond.true1121
  %cond1126 = phi i8* [ %880, %cond.true1121 ], [ %882, %cond.false1123 ]
  %883 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1127 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %883, i32 0, i32 2
  %884 = load i8*, i8** %precomp1127, align 8
  %sub.ptr.lhs.cast1128 = ptrtoint i8* %cond1126 to i64
  %sub.ptr.rhs.cast1129 = ptrtoint i8* %884 to i64
  %sub.ptr.sub1130 = sub i64 %sub.ptr.lhs.cast1128, %sub.ptr.rhs.cast1129
  store i64 %sub.ptr.sub1130, i64* %offset1116, align 8
  %885 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81131 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %885, i32 0, i32 25
  %886 = load i32, i32* %utf81131, align 8
  %tobool1132 = icmp ne i32 %886, 0
  %887 = zext i1 %tobool1132 to i64
  %cond1133 = select i1 %tobool1132, i32 1, i32 0
  %tobool1134 = icmp ne i32 %cond1133, 0
  %888 = zext i1 %tobool1134 to i64
  %cond1135 = select i1 %tobool1134, i32 1, i32 0
  %889 = load i64, i64* %offset1116, align 8
  %890 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1136 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %890, i32 0, i32 2
  %891 = load i8*, i8** %precomp1136, align 8
  %892 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81137 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %892, i32 0, i32 25
  %893 = load i32, i32* %utf81137, align 8
  %tobool1138 = icmp ne i32 %893, 0
  %894 = zext i1 %tobool1138 to i64
  %cond1139 = select i1 %tobool1138, i32 1, i32 0
  %tobool1140 = icmp ne i32 %cond1139, 0
  %895 = zext i1 %tobool1140 to i64
  %cond1141 = select i1 %tobool1140, i32 1, i32 0
  %896 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1142 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %896, i32 0, i32 7
  %897 = load i8*, i8** %end1142, align 8
  %898 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1143 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %898, i32 0, i32 2
  %899 = load i8*, i8** %precomp1143, align 8
  %sub.ptr.lhs.cast1144 = ptrtoint i8* %897 to i64
  %sub.ptr.rhs.cast1145 = ptrtoint i8* %899 to i64
  %sub.ptr.sub1146 = sub i64 %sub.ptr.lhs.cast1144, %sub.ptr.rhs.cast1145
  %900 = load i64, i64* %offset1116, align 8
  %sub1147 = sub nsw i64 %sub.ptr.sub1146, %900
  %901 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1148 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %901, i32 0, i32 2
  %902 = load i8*, i8** %precomp1148, align 8
  %903 = load i64, i64* %offset1116, align 8
  %add.ptr1149 = getelementptr inbounds i8, i8* %902, i64 %903
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.300, i64 0, i64 0), i32 %cond1135, i64 %889, i8* %891, i32 %cond1141, i64 %sub1147, i8* %add.ptr1149)
  br label %do.end1150

do.end1150:                                       ; preds = %cond.end1125
  br label %do.end1151

do.end1151:                                       ; preds = %do.end1150
  br label %if.end1152

if.end1152:                                       ; preds = %do.end1151, %if.then1102
  br label %if.end1153

if.end1153:                                       ; preds = %if.end1152, %if.end1100
  br label %if.end1175

if.else1154:                                      ; preds = %sw.bb901
  %904 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1155 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %904, i32 0, i32 8
  %905 = load i8*, i8** %parse1155, align 8
  %call1156 = call i32 @S_backref_value(i8* %905)
  store i32 %call1156, i32* %num902, align 4
  %906 = load i32, i32* %num902, align 4
  %cmp1157 = icmp sgt i32 %906, 9
  br i1 %cmp1157, label %land.lhs.true1159, label %if.end1174

land.lhs.true1159:                                ; preds = %if.else1154
  %907 = load i32, i32* %num902, align 4
  %908 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar1160 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %908, i32 0, i32 18
  %909 = load i32, i32* %npar1160, align 8
  %cmp1161 = icmp sge i32 %907, %909
  br i1 %cmp1161, label %land.lhs.true1163, label %if.end1174

land.lhs.true1163:                                ; preds = %land.lhs.true1159
  %910 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1164 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %910, i32 0, i32 8
  %911 = load i8*, i8** %parse1164, align 8
  %912 = load i8, i8* %911, align 1
  %conv1165 = sext i8 %912 to i32
  %cmp1166 = icmp ne i32 %conv1165, 56
  br i1 %cmp1166, label %land.lhs.true1168, label %if.end1174

land.lhs.true1168:                                ; preds = %land.lhs.true1163
  %913 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1169 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %913, i32 0, i32 8
  %914 = load i8*, i8** %parse1169, align 8
  %915 = load i8, i8* %914, align 1
  %conv1170 = sext i8 %915 to i32
  %cmp1171 = icmp ne i32 %conv1170, 57
  br i1 %cmp1171, label %if.then1173, label %if.end1174

if.then1173:                                      ; preds = %land.lhs.true1168
  br label %defchar

if.end1174:                                       ; preds = %land.lhs.true1168, %land.lhs.true1163, %land.lhs.true1159, %if.else1154
  br label %if.end1175

if.end1175:                                       ; preds = %if.end1174, %if.end1153
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end1175
  %916 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1176 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %916, i32 0, i32 8
  %917 = load i8*, i8** %parse1176, align 8
  %918 = load i8, i8* %917, align 1
  %idxprom1177 = zext i8 %918 to i64
  %arrayidx1178 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom1177
  %919 = load i32, i32* %arrayidx1178, align 4
  %and1179 = and i32 %919, 2
  %tobool1180 = icmp ne i32 %and1179, 0
  %920 = zext i1 %tobool1180 to i64
  %cond1181 = select i1 %tobool1180, i32 1, i32 0
  %tobool1182 = icmp ne i32 %cond1181, 0
  br i1 %tobool1182, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %921 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1183 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %921, i32 0, i32 8
  %922 = load i8*, i8** %parse1183, align 8
  %incdec.ptr1184 = getelementptr inbounds i8, i8* %922, i32 1
  store i8* %incdec.ptr1184, i8** %parse1183, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %923 = load i8, i8* %hasbrace, align 1
  %tobool1185 = trunc i8 %923 to i1
  br i1 %tobool1185, label %if.then1186, label %if.end1240

if.then1186:                                      ; preds = %while.end
  %924 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1187 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %924, i32 0, i32 8
  %925 = load i8*, i8** %parse1187, align 8
  %926 = load i8, i8* %925, align 1
  %conv1188 = sext i8 %926 to i32
  %cmp1189 = icmp ne i32 %conv1188, 125
  br i1 %cmp1189, label %if.then1191, label %if.end1237

if.then1191:                                      ; preds = %if.then1186
  br label %do.body1192

do.body1192:                                      ; preds = %if.then1191
  %927 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1193 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %927, i32 0, i32 12
  %928 = load %struct.regnode*, %struct.regnode** %emit1193, align 8
  %929 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1194 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %929, i32 0, i32 13
  %930 = bitcast %struct.regnode_ssc* %emit_dummy1194 to %struct.regnode*
  %cmp1195 = icmp eq %struct.regnode* %928, %930
  br i1 %cmp1195, label %if.end1199, label %if.then1197

if.then1197:                                      ; preds = %do.body1192
  %931 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1198 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %931, i32 0, i32 3
  %932 = load %struct.p5rx*, %struct.p5rx** %rx_sv1198, align 8
  %933 = bitcast %struct.p5rx* %932 to i8*
  %934 = bitcast i8* %933 to %struct.sv*
  %935 = bitcast %struct.sv* %934 to i8*
  call void @Perl_save_pushptr(i8* %935, i32 11)
  br label %if.end1199

if.end1199:                                       ; preds = %if.then1197, %do.body1192
  br label %do.body1200

do.body1200:                                      ; preds = %if.end1199
  %936 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1202 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %936, i32 0, i32 8
  %937 = load i8*, i8** %parse1202, align 8
  %938 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1203 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %938, i32 0, i32 7
  %939 = load i8*, i8** %end1203, align 8
  %cmp1204 = icmp ugt i8* %937, %939
  br i1 %cmp1204, label %cond.true1206, label %cond.false1208

cond.true1206:                                    ; preds = %do.body1200
  %940 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1207 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %940, i32 0, i32 7
  %941 = load i8*, i8** %end1207, align 8
  br label %cond.end1210

cond.false1208:                                   ; preds = %do.body1200
  %942 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1209 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %942, i32 0, i32 8
  %943 = load i8*, i8** %parse1209, align 8
  br label %cond.end1210

cond.end1210:                                     ; preds = %cond.false1208, %cond.true1206
  %cond1211 = phi i8* [ %941, %cond.true1206 ], [ %943, %cond.false1208 ]
  %944 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1212 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %944, i32 0, i32 2
  %945 = load i8*, i8** %precomp1212, align 8
  %sub.ptr.lhs.cast1213 = ptrtoint i8* %cond1211 to i64
  %sub.ptr.rhs.cast1214 = ptrtoint i8* %945 to i64
  %sub.ptr.sub1215 = sub i64 %sub.ptr.lhs.cast1213, %sub.ptr.rhs.cast1214
  store i64 %sub.ptr.sub1215, i64* %offset1201, align 8
  %946 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81216 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %946, i32 0, i32 25
  %947 = load i32, i32* %utf81216, align 8
  %tobool1217 = icmp ne i32 %947, 0
  %948 = zext i1 %tobool1217 to i64
  %cond1218 = select i1 %tobool1217, i32 1, i32 0
  %tobool1219 = icmp ne i32 %cond1218, 0
  %949 = zext i1 %tobool1219 to i64
  %cond1220 = select i1 %tobool1219, i32 1, i32 0
  %950 = load i64, i64* %offset1201, align 8
  %951 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1221 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %951, i32 0, i32 2
  %952 = load i8*, i8** %precomp1221, align 8
  %953 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81222 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %953, i32 0, i32 25
  %954 = load i32, i32* %utf81222, align 8
  %tobool1223 = icmp ne i32 %954, 0
  %955 = zext i1 %tobool1223 to i64
  %cond1224 = select i1 %tobool1223, i32 1, i32 0
  %tobool1225 = icmp ne i32 %cond1224, 0
  %956 = zext i1 %tobool1225 to i64
  %cond1226 = select i1 %tobool1225, i32 1, i32 0
  %957 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1227 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %957, i32 0, i32 7
  %958 = load i8*, i8** %end1227, align 8
  %959 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1228 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %959, i32 0, i32 2
  %960 = load i8*, i8** %precomp1228, align 8
  %sub.ptr.lhs.cast1229 = ptrtoint i8* %958 to i64
  %sub.ptr.rhs.cast1230 = ptrtoint i8* %960 to i64
  %sub.ptr.sub1231 = sub i64 %sub.ptr.lhs.cast1229, %sub.ptr.rhs.cast1230
  %961 = load i64, i64* %offset1201, align 8
  %sub1232 = sub nsw i64 %sub.ptr.sub1231, %961
  %962 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1233 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %962, i32 0, i32 2
  %963 = load i8*, i8** %precomp1233, align 8
  %964 = load i64, i64* %offset1201, align 8
  %add.ptr1234 = getelementptr inbounds i8, i8* %963, i64 %964
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.301, i64 0, i64 0), i32 %cond1220, i64 %950, i8* %952, i32 %cond1226, i64 %sub1232, i8* %add.ptr1234)
  br label %do.end1235

do.end1235:                                       ; preds = %cond.end1210
  br label %do.end1236

do.end1236:                                       ; preds = %do.end1235
  br label %if.end1237

if.end1237:                                       ; preds = %do.end1236, %if.then1186
  %965 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1238 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %965, i32 0, i32 8
  %966 = load i8*, i8** %parse1238, align 8
  %incdec.ptr1239 = getelementptr inbounds i8, i8* %966, i32 1
  store i8* %incdec.ptr1239, i8** %parse1238, align 8
  br label %if.end1240

if.end1240:                                       ; preds = %if.end1237, %while.end
  %967 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1241 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %967, i32 0, i32 12
  %968 = load %struct.regnode*, %struct.regnode** %emit1241, align 8
  %969 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1242 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %969, i32 0, i32 13
  %970 = bitcast %struct.regnode_ssc* %emit_dummy1242 to %struct.regnode*
  %cmp1243 = icmp eq %struct.regnode* %968, %970
  br i1 %cmp1243, label %if.end1295, label %if.then1245

if.then1245:                                      ; preds = %if.end1240
  %971 = load i32, i32* %num902, align 4
  %972 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %972, i32 0, i32 4
  %973 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %973, i32 0, i32 12
  %974 = load i32, i32* %nparens, align 8
  %cmp1246 = icmp sgt i32 %971, %974
  br i1 %cmp1246, label %if.then1248, label %if.end1294

if.then1248:                                      ; preds = %if.then1245
  br label %do.body1249

do.body1249:                                      ; preds = %if.then1248
  %975 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1250 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %975, i32 0, i32 12
  %976 = load %struct.regnode*, %struct.regnode** %emit1250, align 8
  %977 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1251 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %977, i32 0, i32 13
  %978 = bitcast %struct.regnode_ssc* %emit_dummy1251 to %struct.regnode*
  %cmp1252 = icmp eq %struct.regnode* %976, %978
  br i1 %cmp1252, label %if.end1256, label %if.then1254

if.then1254:                                      ; preds = %do.body1249
  %979 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1255 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %979, i32 0, i32 3
  %980 = load %struct.p5rx*, %struct.p5rx** %rx_sv1255, align 8
  %981 = bitcast %struct.p5rx* %980 to i8*
  %982 = bitcast i8* %981 to %struct.sv*
  %983 = bitcast %struct.sv* %982 to i8*
  call void @Perl_save_pushptr(i8* %983, i32 11)
  br label %if.end1256

if.end1256:                                       ; preds = %if.then1254, %do.body1249
  br label %do.body1257

do.body1257:                                      ; preds = %if.end1256
  %984 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1259 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %984, i32 0, i32 8
  %985 = load i8*, i8** %parse1259, align 8
  %986 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1260 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %986, i32 0, i32 7
  %987 = load i8*, i8** %end1260, align 8
  %cmp1261 = icmp ugt i8* %985, %987
  br i1 %cmp1261, label %cond.true1263, label %cond.false1265

cond.true1263:                                    ; preds = %do.body1257
  %988 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1264 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %988, i32 0, i32 7
  %989 = load i8*, i8** %end1264, align 8
  br label %cond.end1267

cond.false1265:                                   ; preds = %do.body1257
  %990 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1266 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %990, i32 0, i32 8
  %991 = load i8*, i8** %parse1266, align 8
  br label %cond.end1267

cond.end1267:                                     ; preds = %cond.false1265, %cond.true1263
  %cond1268 = phi i8* [ %989, %cond.true1263 ], [ %991, %cond.false1265 ]
  %992 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1269 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %992, i32 0, i32 2
  %993 = load i8*, i8** %precomp1269, align 8
  %sub.ptr.lhs.cast1270 = ptrtoint i8* %cond1268 to i64
  %sub.ptr.rhs.cast1271 = ptrtoint i8* %993 to i64
  %sub.ptr.sub1272 = sub i64 %sub.ptr.lhs.cast1270, %sub.ptr.rhs.cast1271
  store i64 %sub.ptr.sub1272, i64* %offset1258, align 8
  %994 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81273 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %994, i32 0, i32 25
  %995 = load i32, i32* %utf81273, align 8
  %tobool1274 = icmp ne i32 %995, 0
  %996 = zext i1 %tobool1274 to i64
  %cond1275 = select i1 %tobool1274, i32 1, i32 0
  %tobool1276 = icmp ne i32 %cond1275, 0
  %997 = zext i1 %tobool1276 to i64
  %cond1277 = select i1 %tobool1276, i32 1, i32 0
  %998 = load i64, i64* %offset1258, align 8
  %999 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1278 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %999, i32 0, i32 2
  %1000 = load i8*, i8** %precomp1278, align 8
  %1001 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81279 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1001, i32 0, i32 25
  %1002 = load i32, i32* %utf81279, align 8
  %tobool1280 = icmp ne i32 %1002, 0
  %1003 = zext i1 %tobool1280 to i64
  %cond1281 = select i1 %tobool1280, i32 1, i32 0
  %tobool1282 = icmp ne i32 %cond1281, 0
  %1004 = zext i1 %tobool1282 to i64
  %cond1283 = select i1 %tobool1282, i32 1, i32 0
  %1005 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1284 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1005, i32 0, i32 7
  %1006 = load i8*, i8** %end1284, align 8
  %1007 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1285 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1007, i32 0, i32 2
  %1008 = load i8*, i8** %precomp1285, align 8
  %sub.ptr.lhs.cast1286 = ptrtoint i8* %1006 to i64
  %sub.ptr.rhs.cast1287 = ptrtoint i8* %1008 to i64
  %sub.ptr.sub1288 = sub i64 %sub.ptr.lhs.cast1286, %sub.ptr.rhs.cast1287
  %1009 = load i64, i64* %offset1258, align 8
  %sub1289 = sub nsw i64 %sub.ptr.sub1288, %1009
  %1010 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1290 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1010, i32 0, i32 2
  %1011 = load i8*, i8** %precomp1290, align 8
  %1012 = load i64, i64* %offset1258, align 8
  %add.ptr1291 = getelementptr inbounds i8, i8* %1011, i64 %1012
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.250, i64 0, i64 0), i32 %cond1277, i64 %998, i8* %1000, i32 %cond1283, i64 %sub1289, i8* %add.ptr1291)
  br label %do.end1292

do.end1292:                                       ; preds = %cond.end1267
  br label %do.end1293

do.end1293:                                       ; preds = %do.end1292
  br label %if.end1294

if.end1294:                                       ; preds = %do.end1293, %if.then1245
  br label %if.end1295

if.end1295:                                       ; preds = %if.end1294, %if.end1240
  %1013 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %sawback1296 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1013, i32 0, i32 15
  store i32 1, i32* %sawback1296, align 4
  %1014 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1015 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1297 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1015, i32 0, i32 0
  %1016 = load i32, i32* %flags1297, align 8
  %and1298 = and i32 %1016, 4
  %tobool1299 = icmp ne i32 %and1298, 0
  br i1 %tobool1299, label %cond.true1300, label %cond.false1301

cond.true1300:                                    ; preds = %if.end1295
  br i1 true, label %cond.false1303, label %cond.true1302

cond.false1301:                                   ; preds = %if.end1295
  br i1 false, label %cond.false1303, label %cond.true1302

cond.true1302:                                    ; preds = %cond.false1301, %cond.true1300
  br label %cond.end1325

cond.false1303:                                   ; preds = %cond.false1301, %cond.true1300
  %1017 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1304 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1017, i32 0, i32 0
  %1018 = load i32, i32* %flags1304, align 8
  %call1305 = call i32 @get_regex_charset(i32 %1018)
  %cmp1306 = icmp eq i32 %call1305, 4
  br i1 %cmp1306, label %cond.true1308, label %cond.false1309

cond.true1308:                                    ; preds = %cond.false1303
  br label %cond.end1323

cond.false1309:                                   ; preds = %cond.false1303
  %1019 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1310 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1019, i32 0, i32 0
  %1020 = load i32, i32* %flags1310, align 8
  %call1311 = call i32 @get_regex_charset(i32 %1020)
  %cmp1312 = icmp uge i32 %call1311, 2
  br i1 %cmp1312, label %cond.true1314, label %cond.false1315

cond.true1314:                                    ; preds = %cond.false1309
  br label %cond.end1321

cond.false1315:                                   ; preds = %cond.false1309
  %1021 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1316 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1021, i32 0, i32 0
  %1022 = load i32, i32* %flags1316, align 8
  %call1317 = call i32 @get_regex_charset(i32 %1022)
  %cmp1318 = icmp eq i32 %call1317, 1
  %1023 = zext i1 %cmp1318 to i64
  %cond1320 = select i1 %cmp1318, i32 53, i32 52
  br label %cond.end1321

cond.end1321:                                     ; preds = %cond.false1315, %cond.true1314
  %cond1322 = phi i32 [ 54, %cond.true1314 ], [ %cond1320, %cond.false1315 ]
  br label %cond.end1323

cond.end1323:                                     ; preds = %cond.end1321, %cond.true1308
  %cond1324 = phi i32 [ 55, %cond.true1308 ], [ %cond1322, %cond.end1321 ]
  br label %cond.end1325

cond.end1325:                                     ; preds = %cond.end1323, %cond.true1302
  %cond1326 = phi i32 [ 51, %cond.true1302 ], [ %cond1324, %cond.end1323 ]
  %conv1327 = trunc i32 %cond1326 to i8
  %1024 = load i32, i32* %num902, align 4
  %call1328 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %1014, i8 zeroext %conv1327, i32 %1024)
  store %struct.regnode* %call1328, %struct.regnode** %ret, align 8
  %1025 = load i32*, i32** %flagp.addr, align 8
  %1026 = load i32, i32* %1025, align 4
  %or1329 = or i32 %1026, 1
  store i32 %or1329, i32* %1025, align 4
  %1027 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1330 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1027, i32 0, i32 8
  %1028 = load i8*, i8** %parse1330, align 8
  %incdec.ptr1331 = getelementptr inbounds i8, i8* %1028, i32 -1
  store i8* %incdec.ptr1331, i8** %parse1330, align 8
  %1029 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1332 = call i8* @S_nextchar(%struct.RExC_state_t* %1029)
  br label %sw.epilog1368

sw.bb1333:                                        ; preds = %sw.bb259
  %1030 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1334 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1030, i32 0, i32 8
  %1031 = load i8*, i8** %parse1334, align 8
  %1032 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1335 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1032, i32 0, i32 7
  %1033 = load i8*, i8** %end1335, align 8
  %cmp1336 = icmp uge i8* %1031, %1033
  br i1 %cmp1336, label %if.then1338, label %if.end1365

if.then1338:                                      ; preds = %sw.bb1333
  br label %do.body1339

do.body1339:                                      ; preds = %if.then1338
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses1340, align 8
  %1034 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1342 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1034, i32 0, i32 7
  %1035 = load i8*, i8** %end1342, align 8
  %1036 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1343 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1036, i32 0, i32 2
  %1037 = load i8*, i8** %precomp1343, align 8
  %sub.ptr.lhs.cast1344 = ptrtoint i8* %1035 to i64
  %sub.ptr.rhs.cast1345 = ptrtoint i8* %1037 to i64
  %sub.ptr.sub1346 = sub i64 %sub.ptr.lhs.cast1344, %sub.ptr.rhs.cast1345
  store i64 %sub.ptr.sub1346, i64* %len1341, align 8
  %1038 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1347 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1038, i32 0, i32 12
  %1039 = load %struct.regnode*, %struct.regnode** %emit1347, align 8
  %1040 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1348 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1040, i32 0, i32 13
  %1041 = bitcast %struct.regnode_ssc* %emit_dummy1348 to %struct.regnode*
  %cmp1349 = icmp eq %struct.regnode* %1039, %1041
  br i1 %cmp1349, label %if.end1353, label %if.then1351

if.then1351:                                      ; preds = %do.body1339
  %1042 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1352 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1042, i32 0, i32 3
  %1043 = load %struct.p5rx*, %struct.p5rx** %rx_sv1352, align 8
  %1044 = bitcast %struct.p5rx* %1043 to i8*
  %1045 = bitcast i8* %1044 to %struct.sv*
  %1046 = bitcast %struct.sv* %1045 to i8*
  call void @Perl_save_pushptr(i8* %1046, i32 11)
  br label %if.end1353

if.end1353:                                       ; preds = %if.then1351, %do.body1339
  %1047 = load i64, i64* %len1341, align 8
  %cmp1354 = icmp sgt i64 %1047, 127
  br i1 %cmp1354, label %if.then1356, label %if.end1357

if.then1356:                                      ; preds = %if.end1353
  store i64 117, i64* %len1341, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses1340, align 8
  br label %if.end1357

if.end1357:                                       ; preds = %if.then1356, %if.end1353
  %1048 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81358 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1048, i32 0, i32 25
  %1049 = load i32, i32* %utf81358, align 8
  %tobool1359 = icmp ne i32 %1049, 0
  %1050 = zext i1 %tobool1359 to i64
  %cond1360 = select i1 %tobool1359, i32 1, i32 0
  %tobool1361 = icmp ne i32 %cond1360, 0
  %1051 = zext i1 %tobool1361 to i64
  %cond1362 = select i1 %tobool1361, i32 1, i32 0
  %1052 = load i64, i64* %len1341, align 8
  %1053 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1363 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1053, i32 0, i32 2
  %1054 = load i8*, i8** %precomp1363, align 8
  %1055 = load i8*, i8** %ellipses1340, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.302, i64 0, i64 0), i32 %cond1362, i64 %1052, i8* %1054, i8* %1055)
  br label %do.end1364

do.end1364:                                       ; preds = %if.end1357
  br label %if.end1365

if.end1365:                                       ; preds = %do.end1364, %sw.bb1333
  br label %sw.default1366

sw.default1366:                                   ; preds = %sw.bb259, %if.end1365
  %1056 = load i8*, i8** %parse_start, align 8
  %incdec.ptr1367 = getelementptr inbounds i8, i8* %1056, i32 -1
  store i8* %incdec.ptr1367, i8** %parse_start, align 8
  br label %defchar

sw.epilog1368:                                    ; preds = %cond.end1325, %if.end900, %if.then715, %if.end707, %finish_meta_pat
  br label %sw.epilog2570

sw.bb1369:                                        ; preds = %tryagain
  %1057 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1370 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1057, i32 0, i32 0
  %1058 = load i32, i32* %flags1370, align 8
  %and1371 = and i32 %1058, 8
  %tobool1372 = icmp ne i32 %and1371, 0
  br i1 %tobool1372, label %if.then1373, label %if.end1383

if.then1373:                                      ; preds = %sw.bb1369
  %1059 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1060 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1374 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1060, i32 0, i32 8
  %1061 = load i8*, i8** %parse1374, align 8
  %call1375 = call i8* @S_reg_skipcomment(%struct.RExC_state_t* %1059, i8* %1061)
  %1062 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1376 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1062, i32 0, i32 8
  store i8* %call1375, i8** %parse1376, align 8
  %1063 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1377 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1063, i32 0, i32 8
  %1064 = load i8*, i8** %parse1377, align 8
  %1065 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1378 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1065, i32 0, i32 7
  %1066 = load i8*, i8** %end1378, align 8
  %cmp1379 = icmp ult i8* %1064, %1066
  br i1 %cmp1379, label %if.then1381, label %if.end1382

if.then1381:                                      ; preds = %if.then1373
  br label %tryagain

if.end1382:                                       ; preds = %if.then1373
  br label %if.end1383

if.end1383:                                       ; preds = %if.end1382, %sw.bb1369
  br label %sw.default1384

sw.default1384:                                   ; preds = %tryagain, %if.end1383
  %1067 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1385 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1067, i32 0, i32 8
  %1068 = load i8*, i8** %parse1385, align 8
  %add.ptr1386 = getelementptr inbounds i8, i8* %1068, i64 -1
  store i8* %add.ptr1386, i8** %parse_start, align 8
  %1069 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1387 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1069, i32 0, i32 8
  %1070 = load i8*, i8** %parse1387, align 8
  %incdec.ptr1388 = getelementptr inbounds i8, i8* %1070, i32 1
  store i8* %incdec.ptr1388, i8** %parse1387, align 8
  br label %defchar

defchar:                                          ; preds = %sw.default1384, %sw.default1366, %if.then1173, %if.end720
  store i64 0, i64* %len1389, align 8
  store i64 0, i64* %ender, align 8
  store i8 127, i8* %upper_parse, align 1
  %1071 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call1390 = call zeroext i8 @S_compute_EXACTish(%struct.RExC_state_t* %1071)
  store i8 %call1390, i8* %node_type, align 1
  store i8* null, i8** %oldp, align 8
  %1072 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1391 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1072, i32 0, i32 12
  %1073 = load %struct.regnode*, %struct.regnode** %emit1391, align 8
  %1074 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1392 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1074, i32 0, i32 13
  %1075 = bitcast %struct.regnode_ssc* %emit_dummy1392 to %struct.regnode*
  %cmp1393 = icmp eq %struct.regnode* %1073, %1075
  br i1 %cmp1393, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %defchar
  %1076 = load i8, i8* %node_type, align 1
  %conv1395 = zext i8 %1076 to i32
  %cmp1396 = icmp eq i32 %conv1395, 33
  br i1 %cmp1396, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %1077 = load i8, i8* %node_type, align 1
  %conv1398 = zext i8 %1077 to i32
  %cmp1399 = icmp eq i32 %conv1398, 34
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %1078 = phi i1 [ true, %land.rhs ], [ %cmp1399, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %defchar
  %1079 = phi i1 [ false, %defchar ], [ %1078, %lor.end ]
  %frombool = zext i1 %1079 to i8
  store i8 %frombool, i8* %maybe_exactfu, align 1
  %1080 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1081 = load i8, i8* %node_type, align 1
  %call1401 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %1080, i8 zeroext %1081)
  store %struct.regnode* %call1401, %struct.regnode** %ret, align 8
  %1082 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1402 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1082, i32 0, i32 12
  %1083 = load %struct.regnode*, %struct.regnode** %emit1402, align 8
  %1084 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1403 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1084, i32 0, i32 13
  %1085 = bitcast %struct.regnode_ssc* %emit_dummy1403 to %struct.regnode*
  %cmp1404 = icmp eq %struct.regnode* %1083, %1085
  br i1 %cmp1404, label %land.lhs.true1406, label %cond.false1413

land.lhs.true1406:                                ; preds = %land.end
  %1086 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1407 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1086, i32 0, i32 0
  %1087 = load i32, i32* %flags1407, align 8
  %and1408 = and i32 %1087, 4
  %tobool1409 = icmp ne i32 %and1408, 0
  br i1 %tobool1409, label %cond.true1410, label %cond.false1411

cond.true1410:                                    ; preds = %land.lhs.true1406
  br i1 true, label %cond.true1412, label %cond.false1413

cond.false1411:                                   ; preds = %land.lhs.true1406
  br i1 false, label %cond.true1412, label %cond.false1413

cond.true1412:                                    ; preds = %cond.false1411, %cond.true1410
  %arraydecay = getelementptr inbounds [140 x i8], [140 x i8]* %foldbuf, i64 0, i64 0
  br label %cond.end1415

cond.false1413:                                   ; preds = %cond.false1411, %cond.true1410, %land.end
  %1088 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1089 = bitcast %struct.regnode* %1088 to %struct.regnode_string*
  %string = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %1089, i32 0, i32 3
  %arraydecay1414 = getelementptr inbounds [1 x i8], [1 x i8]* %string, i64 0, i64 0
  br label %cond.end1415

cond.end1415:                                     ; preds = %cond.false1413, %cond.true1412
  %cond1416 = phi i8* [ %arraydecay, %cond.true1412 ], [ %arraydecay1414, %cond.false1413 ]
  store i8* %cond1416, i8** %s, align 8
  %1090 = load i8*, i8** %s, align 8
  store i8* %1090, i8** %s0, align 8
  br label %reparse

reparse:                                          ; preds = %if.end2480, %cond.end1415
  %1091 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1417 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1091, i32 0, i32 0
  %1092 = load i32, i32* %flags1417, align 8
  %and1418 = and i32 %1092, 4
  %tobool1419 = icmp ne i32 %and1418, 0
  br i1 %tobool1419, label %cond.true1420, label %cond.false1421

cond.true1420:                                    ; preds = %reparse
  br i1 true, label %land.rhs1422, label %land.end1427

cond.false1421:                                   ; preds = %reparse
  br i1 false, label %land.rhs1422, label %land.end1427

land.rhs1422:                                     ; preds = %cond.false1421, %cond.true1420
  %1093 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1423 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1093, i32 0, i32 12
  %1094 = load %struct.regnode*, %struct.regnode** %emit1423, align 8
  %1095 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1424 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1095, i32 0, i32 13
  %1096 = bitcast %struct.regnode_ssc* %emit_dummy1424 to %struct.regnode*
  %cmp1425 = icmp eq %struct.regnode* %1094, %1096
  %lnot = xor i1 %cmp1425, true
  br label %land.end1427

land.end1427:                                     ; preds = %land.rhs1422, %cond.false1421, %cond.true1420
  %1097 = phi i1 [ false, %cond.false1421 ], [ false, %cond.true1420 ], [ %lnot, %land.rhs1422 ]
  %frombool1428 = zext i1 %1097 to i8
  store i8 %frombool1428, i8* %maybe_exact, align 1
  %1098 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1429 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1098, i32 0, i32 8
  %1099 = load i8*, i8** %parse1429, align 8
  %add.ptr1430 = getelementptr inbounds i8, i8* %1099, i64 -1
  store i8* %add.ptr1430, i8** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %land.end1427
  %1100 = load i64, i64* %len1389, align 8
  %1101 = load i8, i8* %upper_parse, align 1
  %conv1431 = zext i8 %1101 to i64
  %cmp1432 = icmp ult i64 %1100, %conv1431
  br i1 %cmp1432, label %land.rhs1434, label %land.end1438

land.rhs1434:                                     ; preds = %for.cond
  %1102 = load i8*, i8** %p, align 8
  %1103 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1435 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1103, i32 0, i32 7
  %1104 = load i8*, i8** %end1435, align 8
  %cmp1436 = icmp ult i8* %1102, %1104
  br label %land.end1438

land.end1438:                                     ; preds = %land.rhs1434, %for.cond
  %1105 = phi i1 [ false, %for.cond ], [ %cmp1436, %land.rhs1434 ]
  br i1 %1105, label %for.body, label %for.end

for.body:                                         ; preds = %land.end1438
  %1106 = load i8*, i8** %p, align 8
  store i8* %1106, i8** %oldp, align 8
  %1107 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1439 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1107, i32 0, i32 0
  %1108 = load i32, i32* %flags1439, align 8
  %and1440 = and i32 %1108, 8
  %tobool1441 = icmp ne i32 %and1440, 0
  br i1 %tobool1441, label %if.then1442, label %if.end1444

if.then1442:                                      ; preds = %for.body
  %1109 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1110 = load i8*, i8** %p, align 8
  %call1443 = call i8* @S_regpatws(%struct.RExC_state_t* %1109, i8* %1110, i1 zeroext true)
  store i8* %call1443, i8** %p, align 8
  br label %if.end1444

if.end1444:                                       ; preds = %if.then1442, %for.body
  %1111 = load i8*, i8** %p, align 8
  %1112 = load i8, i8* %1111, align 1
  %conv1445 = zext i8 %1112 to i32
  switch i32 %conv1445, label %sw.default1982 [
    i32 94, label %sw.bb1446
    i32 36, label %sw.bb1446
    i32 46, label %sw.bb1446
    i32 91, label %sw.bb1446
    i32 40, label %sw.bb1446
    i32 41, label %sw.bb1446
    i32 124, label %sw.bb1446
    i32 92, label %sw.bb1447
    i32 123, label %sw.bb1936
  ]

sw.bb1446:                                        ; preds = %if.end1444, %if.end1444, %if.end1444, %if.end1444, %if.end1444, %if.end1444, %if.end1444
  br label %loopdone

sw.bb1447:                                        ; preds = %if.end1444
  %1113 = load i8*, i8** %p, align 8
  %incdec.ptr1448 = getelementptr inbounds i8, i8* %1113, i32 1
  store i8* %incdec.ptr1448, i8** %p, align 8
  %1114 = load i8, i8* %incdec.ptr1448, align 1
  %conv1449 = zext i8 %1114 to i32
  switch i32 %conv1449, label %sw.default1882 [
    i32 65, label %sw.bb1450
    i32 98, label %sw.bb1450
    i32 66, label %sw.bb1450
    i32 67, label %sw.bb1450
    i32 100, label %sw.bb1450
    i32 68, label %sw.bb1450
    i32 103, label %sw.bb1450
    i32 71, label %sw.bb1450
    i32 104, label %sw.bb1450
    i32 72, label %sw.bb1450
    i32 107, label %sw.bb1450
    i32 75, label %sw.bb1450
    i32 112, label %sw.bb1450
    i32 80, label %sw.bb1450
    i32 82, label %sw.bb1450
    i32 115, label %sw.bb1450
    i32 83, label %sw.bb1450
    i32 118, label %sw.bb1450
    i32 86, label %sw.bb1450
    i32 119, label %sw.bb1450
    i32 87, label %sw.bb1450
    i32 88, label %sw.bb1450
    i32 122, label %sw.bb1450
    i32 90, label %sw.bb1450
    i32 110, label %sw.bb1452
    i32 78, label %sw.bb1454
    i32 114, label %sw.bb1504
    i32 116, label %sw.bb1506
    i32 102, label %sw.bb1508
    i32 101, label %sw.bb1510
    i32 97, label %sw.bb1512
    i32 111, label %sw.bb1514
    i32 120, label %sw.bb1603
    i32 99, label %sw.bb1693
    i32 56, label %sw.bb1703
    i32 57, label %sw.bb1703
    i32 49, label %sw.bb1705
    i32 50, label %sw.bb1705
    i32 51, label %sw.bb1705
    i32 52, label %sw.bb1705
    i32 53, label %sw.bb1705
    i32 54, label %sw.bb1705
    i32 55, label %sw.bb1705
    i32 48, label %sw.bb1721
    i32 0, label %sw.bb1850
  ]

sw.bb1450:                                        ; preds = %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447
  %1115 = load i8*, i8** %p, align 8
  %incdec.ptr1451 = getelementptr inbounds i8, i8* %1115, i32 -1
  store i8* %incdec.ptr1451, i8** %p, align 8
  br label %loopdone

sw.bb1452:                                        ; preds = %sw.bb1447
  store i64 10, i64* %ender, align 8
  %1116 = load i8*, i8** %p, align 8
  %incdec.ptr1453 = getelementptr inbounds i8, i8* %1116, i32 1
  store i8* %incdec.ptr1453, i8** %p, align 8
  br label %sw.epilog1935

sw.bb1454:                                        ; preds = %sw.bb1447
  %1117 = load i8*, i8** %p, align 8
  %add.ptr1455 = getelementptr inbounds i8, i8* %1117, i64 1
  %1118 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1456 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1118, i32 0, i32 8
  store i8* %add.ptr1455, i8** %parse1456, align 8
  %1119 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1120 = load i32*, i32** %flagp.addr, align 8
  %1121 = load i32, i32* %depth.addr, align 4
  %call1457 = call zeroext i1 @S_grok_bslash_N(%struct.RExC_state_t* %1119, %struct.regnode** null, i64* %ender, i32* null, i32* %1120, i32 %1121)
  br i1 %call1457, label %if.end1490, label %if.then1458

if.then1458:                                      ; preds = %sw.bb1454
  %1122 = load i32*, i32** %flagp.addr, align 8
  %1123 = load i32, i32* %1122, align 4
  %and1459 = and i32 %1123, 32
  %tobool1460 = icmp ne i32 %and1459, 0
  br i1 %tobool1460, label %if.then1461, label %if.end1488

if.then1461:                                      ; preds = %if.then1458
  br label %do.body1462

do.body1462:                                      ; preds = %if.then1461
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses1463, align 8
  %1124 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1465 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1124, i32 0, i32 7
  %1125 = load i8*, i8** %end1465, align 8
  %1126 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1466 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1126, i32 0, i32 2
  %1127 = load i8*, i8** %precomp1466, align 8
  %sub.ptr.lhs.cast1467 = ptrtoint i8* %1125 to i64
  %sub.ptr.rhs.cast1468 = ptrtoint i8* %1127 to i64
  %sub.ptr.sub1469 = sub i64 %sub.ptr.lhs.cast1467, %sub.ptr.rhs.cast1468
  store i64 %sub.ptr.sub1469, i64* %len1464, align 8
  %1128 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1470 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1128, i32 0, i32 12
  %1129 = load %struct.regnode*, %struct.regnode** %emit1470, align 8
  %1130 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1471 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1130, i32 0, i32 13
  %1131 = bitcast %struct.regnode_ssc* %emit_dummy1471 to %struct.regnode*
  %cmp1472 = icmp eq %struct.regnode* %1129, %1131
  br i1 %cmp1472, label %if.end1476, label %if.then1474

if.then1474:                                      ; preds = %do.body1462
  %1132 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1475 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1132, i32 0, i32 3
  %1133 = load %struct.p5rx*, %struct.p5rx** %rx_sv1475, align 8
  %1134 = bitcast %struct.p5rx* %1133 to i8*
  %1135 = bitcast i8* %1134 to %struct.sv*
  %1136 = bitcast %struct.sv* %1135 to i8*
  call void @Perl_save_pushptr(i8* %1136, i32 11)
  br label %if.end1476

if.end1476:                                       ; preds = %if.then1474, %do.body1462
  %1137 = load i64, i64* %len1464, align 8
  %cmp1477 = icmp sgt i64 %1137, 127
  br i1 %cmp1477, label %if.then1479, label %if.end1480

if.then1479:                                      ; preds = %if.end1476
  store i64 117, i64* %len1464, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses1463, align 8
  br label %if.end1480

if.end1480:                                       ; preds = %if.then1479, %if.end1476
  %1138 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81481 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1138, i32 0, i32 25
  %1139 = load i32, i32* %utf81481, align 8
  %tobool1482 = icmp ne i32 %1139, 0
  %1140 = zext i1 %tobool1482 to i64
  %cond1483 = select i1 %tobool1482, i32 1, i32 0
  %tobool1484 = icmp ne i32 %cond1483, 0
  %1141 = zext i1 %tobool1484 to i64
  %cond1485 = select i1 %tobool1484, i32 1, i32 0
  %1142 = load i64, i64* %len1464, align 8
  %1143 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1486 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1143, i32 0, i32 2
  %1144 = load i8*, i8** %precomp1486, align 8
  %1145 = load i8*, i8** %ellipses1463, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.303, i64 0, i64 0), i32 %cond1485, i64 %1142, i8* %1144, i8* %1145)
  br label %do.end1487

do.end1487:                                       ; preds = %if.end1480
  br label %if.end1488

if.end1488:                                       ; preds = %do.end1487, %if.then1458
  %1146 = load i8*, i8** %oldp, align 8
  store i8* %1146, i8** %p, align 8
  %1147 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1489 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1147, i32 0, i32 8
  store i8* %1146, i8** %parse1489, align 8
  br label %loopdone

if.end1490:                                       ; preds = %sw.bb1454
  %1148 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1491 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1148, i32 0, i32 8
  %1149 = load i8*, i8** %parse1491, align 8
  store i8* %1149, i8** %p, align 8
  %1150 = load i64, i64* %ender, align 8
  %cmp1492 = icmp ugt i64 %1150, 255
  br i1 %cmp1492, label %if.then1494, label %if.end1503

if.then1494:                                      ; preds = %if.end1490
  br label %do.body1495

do.body1495:                                      ; preds = %if.then1494
  %1151 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81496 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1151, i32 0, i32 25
  %1152 = load i32, i32* %utf81496, align 8
  %tobool1497 = icmp ne i32 %1152, 0
  br i1 %tobool1497, label %cond.true1498, label %cond.false1499

cond.true1498:                                    ; preds = %do.body1495
  br i1 true, label %if.end1501, label %if.then1500

cond.false1499:                                   ; preds = %do.body1495
  br i1 false, label %if.end1501, label %if.then1500

if.then1500:                                      ; preds = %cond.false1499, %cond.true1498
  %1153 = load i32*, i32** %flagp.addr, align 8
  store i32 32, i32* %1153, align 4
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end1501:                                       ; preds = %cond.false1499, %cond.true1498
  br label %do.end1502

do.end1502:                                       ; preds = %if.end1501
  br label %if.end1503

if.end1503:                                       ; preds = %do.end1502, %if.end1490
  br label %sw.epilog1935

sw.bb1504:                                        ; preds = %sw.bb1447
  store i64 13, i64* %ender, align 8
  %1154 = load i8*, i8** %p, align 8
  %incdec.ptr1505 = getelementptr inbounds i8, i8* %1154, i32 1
  store i8* %incdec.ptr1505, i8** %p, align 8
  br label %sw.epilog1935

sw.bb1506:                                        ; preds = %sw.bb1447
  store i64 9, i64* %ender, align 8
  %1155 = load i8*, i8** %p, align 8
  %incdec.ptr1507 = getelementptr inbounds i8, i8* %1155, i32 1
  store i8* %incdec.ptr1507, i8** %p, align 8
  br label %sw.epilog1935

sw.bb1508:                                        ; preds = %sw.bb1447
  store i64 12, i64* %ender, align 8
  %1156 = load i8*, i8** %p, align 8
  %incdec.ptr1509 = getelementptr inbounds i8, i8* %1156, i32 1
  store i8* %incdec.ptr1509, i8** %p, align 8
  br label %sw.epilog1935

sw.bb1510:                                        ; preds = %sw.bb1447
  store i64 27, i64* %ender, align 8
  %1157 = load i8*, i8** %p, align 8
  %incdec.ptr1511 = getelementptr inbounds i8, i8* %1157, i32 1
  store i8* %incdec.ptr1511, i8** %p, align 8
  br label %sw.epilog1935

sw.bb1512:                                        ; preds = %sw.bb1447
  store i64 7, i64* %ender, align 8
  %1158 = load i8*, i8** %p, align 8
  %incdec.ptr1513 = getelementptr inbounds i8, i8* %1158, i32 1
  store i8* %incdec.ptr1513, i8** %p, align 8
  br label %sw.epilog1935

sw.bb1514:                                        ; preds = %sw.bb1447
  %1159 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1515 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1159, i32 0, i32 12
  %1160 = load %struct.regnode*, %struct.regnode** %emit1515, align 8
  %1161 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1516 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1161, i32 0, i32 13
  %1162 = bitcast %struct.regnode_ssc* %emit_dummy1516 to %struct.regnode*
  %cmp1517 = icmp eq %struct.regnode* %1160, %1162
  %lnot1519 = xor i1 %cmp1517, true
  %1163 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %strict1520 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1163, i32 0, i32 45
  %1164 = load i32, i32* %strict1520, align 4
  %tobool1521 = icmp ne i32 %1164, 0
  %1165 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81522 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1165, i32 0, i32 25
  %1166 = load i32, i32* %utf81522, align 8
  %tobool1523 = icmp ne i32 %1166, 0
  %1167 = zext i1 %tobool1523 to i64
  %cond1524 = select i1 %tobool1523, i32 1, i32 0
  %tobool1525 = icmp ne i32 %cond1524, 0
  %call1526 = call zeroext i1 @S_grok_bslash_o(i8** %p, i64* %result, i8** %error_msg, i1 zeroext %lnot1519, i1 zeroext %tobool1521, i1 zeroext true, i1 zeroext %tobool1525)
  %frombool1527 = zext i1 %call1526 to i8
  store i8 %frombool1527, i8* %valid, align 1
  %1168 = load i8, i8* %valid, align 1
  %tobool1528 = trunc i8 %1168 to i1
  br i1 %tobool1528, label %if.end1576, label %if.then1529

if.then1529:                                      ; preds = %sw.bb1514
  %1169 = load i8*, i8** %p, align 8
  %1170 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1530 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1170, i32 0, i32 8
  store i8* %1169, i8** %parse1530, align 8
  br label %do.body1531

do.body1531:                                      ; preds = %if.then1529
  %1171 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1532 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1171, i32 0, i32 12
  %1172 = load %struct.regnode*, %struct.regnode** %emit1532, align 8
  %1173 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1533 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1173, i32 0, i32 13
  %1174 = bitcast %struct.regnode_ssc* %emit_dummy1533 to %struct.regnode*
  %cmp1534 = icmp eq %struct.regnode* %1172, %1174
  br i1 %cmp1534, label %if.end1538, label %if.then1536

if.then1536:                                      ; preds = %do.body1531
  %1175 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1537 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1175, i32 0, i32 3
  %1176 = load %struct.p5rx*, %struct.p5rx** %rx_sv1537, align 8
  %1177 = bitcast %struct.p5rx* %1176 to i8*
  %1178 = bitcast i8* %1177 to %struct.sv*
  %1179 = bitcast %struct.sv* %1178 to i8*
  call void @Perl_save_pushptr(i8* %1179, i32 11)
  br label %if.end1538

if.end1538:                                       ; preds = %if.then1536, %do.body1531
  br label %do.body1539

do.body1539:                                      ; preds = %if.end1538
  %1180 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1541 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1180, i32 0, i32 8
  %1181 = load i8*, i8** %parse1541, align 8
  %1182 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1542 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1182, i32 0, i32 7
  %1183 = load i8*, i8** %end1542, align 8
  %cmp1543 = icmp ugt i8* %1181, %1183
  br i1 %cmp1543, label %cond.true1545, label %cond.false1547

cond.true1545:                                    ; preds = %do.body1539
  %1184 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1546 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1184, i32 0, i32 7
  %1185 = load i8*, i8** %end1546, align 8
  br label %cond.end1549

cond.false1547:                                   ; preds = %do.body1539
  %1186 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1548 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1186, i32 0, i32 8
  %1187 = load i8*, i8** %parse1548, align 8
  br label %cond.end1549

cond.end1549:                                     ; preds = %cond.false1547, %cond.true1545
  %cond1550 = phi i8* [ %1185, %cond.true1545 ], [ %1187, %cond.false1547 ]
  %1188 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1551 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1188, i32 0, i32 2
  %1189 = load i8*, i8** %precomp1551, align 8
  %sub.ptr.lhs.cast1552 = ptrtoint i8* %cond1550 to i64
  %sub.ptr.rhs.cast1553 = ptrtoint i8* %1189 to i64
  %sub.ptr.sub1554 = sub i64 %sub.ptr.lhs.cast1552, %sub.ptr.rhs.cast1553
  store i64 %sub.ptr.sub1554, i64* %offset1540, align 8
  %1190 = load i8*, i8** %error_msg, align 8
  %1191 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81555 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1191, i32 0, i32 25
  %1192 = load i32, i32* %utf81555, align 8
  %tobool1556 = icmp ne i32 %1192, 0
  %1193 = zext i1 %tobool1556 to i64
  %cond1557 = select i1 %tobool1556, i32 1, i32 0
  %tobool1558 = icmp ne i32 %cond1557, 0
  %1194 = zext i1 %tobool1558 to i64
  %cond1559 = select i1 %tobool1558, i32 1, i32 0
  %1195 = load i64, i64* %offset1540, align 8
  %1196 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1560 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1196, i32 0, i32 2
  %1197 = load i8*, i8** %precomp1560, align 8
  %1198 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81561 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1198, i32 0, i32 25
  %1199 = load i32, i32* %utf81561, align 8
  %tobool1562 = icmp ne i32 %1199, 0
  %1200 = zext i1 %tobool1562 to i64
  %cond1563 = select i1 %tobool1562, i32 1, i32 0
  %tobool1564 = icmp ne i32 %cond1563, 0
  %1201 = zext i1 %tobool1564 to i64
  %cond1565 = select i1 %tobool1564, i32 1, i32 0
  %1202 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1566 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1202, i32 0, i32 7
  %1203 = load i8*, i8** %end1566, align 8
  %1204 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1567 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1204, i32 0, i32 2
  %1205 = load i8*, i8** %precomp1567, align 8
  %sub.ptr.lhs.cast1568 = ptrtoint i8* %1203 to i64
  %sub.ptr.rhs.cast1569 = ptrtoint i8* %1205 to i64
  %sub.ptr.sub1570 = sub i64 %sub.ptr.lhs.cast1568, %sub.ptr.rhs.cast1569
  %1206 = load i64, i64* %offset1540, align 8
  %sub1571 = sub nsw i64 %sub.ptr.sub1570, %1206
  %1207 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1572 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1207, i32 0, i32 2
  %1208 = load i8*, i8** %precomp1572, align 8
  %1209 = load i64, i64* %offset1540, align 8
  %add.ptr1573 = getelementptr inbounds i8, i8* %1208, i64 %1209
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* %1190, i32 %cond1559, i64 %1195, i8* %1197, i32 %cond1565, i64 %sub1571, i8* %add.ptr1573)
  br label %do.end1574

do.end1574:                                       ; preds = %cond.end1549
  br label %do.end1575

do.end1575:                                       ; preds = %do.end1574
  br label %if.end1576

if.end1576:                                       ; preds = %do.end1575, %sw.bb1514
  %1210 = load i64, i64* %result, align 8
  store i64 %1210, i64* %ender, align 8
  %1211 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool1577 = icmp ne %struct.sv* %1211, null
  br i1 %tobool1577, label %cond.true1584, label %lor.lhs.false1578

lor.lhs.false1578:                                ; preds = %if.end1576
  %1212 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool1579 = icmp ne %struct.sv* %1212, null
  br i1 %tobool1579, label %land.lhs.true1580, label %cond.false1585

land.lhs.true1580:                                ; preds = %lor.lhs.false1578
  %call1581 = call %struct.sv* @Perl__get_encoding()
  %cmp1582 = icmp ne %struct.sv* %call1581, null
  br i1 %cmp1582, label %cond.true1584, label %cond.false1585

cond.true1584:                                    ; preds = %land.lhs.true1580, %if.end1576
  br i1 true, label %land.lhs.true1586, label %if.end1590

cond.false1585:                                   ; preds = %land.lhs.true1580, %lor.lhs.false1578
  br i1 false, label %land.lhs.true1586, label %if.end1590

land.lhs.true1586:                                ; preds = %cond.false1585, %cond.true1584
  %1213 = load i64, i64* %ender, align 8
  %cmp1587 = icmp ult i64 %1213, 256
  br i1 %cmp1587, label %if.then1589, label %if.end1590

if.then1589:                                      ; preds = %land.lhs.true1586
  br label %recode_encoding

if.end1590:                                       ; preds = %land.lhs.true1586, %cond.false1585, %cond.true1584
  %1214 = load i64, i64* %ender, align 8
  %cmp1591 = icmp ugt i64 %1214, 255
  br i1 %cmp1591, label %if.then1593, label %if.end1602

if.then1593:                                      ; preds = %if.end1590
  br label %do.body1594

do.body1594:                                      ; preds = %if.then1593
  %1215 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81595 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1215, i32 0, i32 25
  %1216 = load i32, i32* %utf81595, align 8
  %tobool1596 = icmp ne i32 %1216, 0
  br i1 %tobool1596, label %cond.true1597, label %cond.false1598

cond.true1597:                                    ; preds = %do.body1594
  br i1 true, label %if.end1600, label %if.then1599

cond.false1598:                                   ; preds = %do.body1594
  br i1 false, label %if.end1600, label %if.then1599

if.then1599:                                      ; preds = %cond.false1598, %cond.true1597
  %1217 = load i32*, i32** %flagp.addr, align 8
  store i32 32, i32* %1217, align 4
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end1600:                                       ; preds = %cond.false1598, %cond.true1597
  br label %do.end1601

do.end1601:                                       ; preds = %if.end1600
  br label %if.end1602

if.end1602:                                       ; preds = %do.end1601, %if.end1590
  br label %sw.epilog1935

sw.bb1603:                                        ; preds = %sw.bb1447
  store i64 -1, i64* %result1604, align 8
  %1218 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1607 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1218, i32 0, i32 12
  %1219 = load %struct.regnode*, %struct.regnode** %emit1607, align 8
  %1220 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1608 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1220, i32 0, i32 13
  %1221 = bitcast %struct.regnode_ssc* %emit_dummy1608 to %struct.regnode*
  %cmp1609 = icmp eq %struct.regnode* %1219, %1221
  %lnot1611 = xor i1 %cmp1609, true
  %1222 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %strict1612 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1222, i32 0, i32 45
  %1223 = load i32, i32* %strict1612, align 4
  %tobool1613 = icmp ne i32 %1223, 0
  %1224 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81614 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1224, i32 0, i32 25
  %1225 = load i32, i32* %utf81614, align 8
  %tobool1615 = icmp ne i32 %1225, 0
  %1226 = zext i1 %tobool1615 to i64
  %cond1616 = select i1 %tobool1615, i32 1, i32 0
  %tobool1617 = icmp ne i32 %cond1616, 0
  %call1618 = call zeroext i1 @S_grok_bslash_x(i8** %p, i64* %result1604, i8** %error_msg1605, i1 zeroext %lnot1611, i1 zeroext %tobool1613, i1 zeroext true, i1 zeroext %tobool1617)
  %frombool1619 = zext i1 %call1618 to i8
  store i8 %frombool1619, i8* %valid1606, align 1
  %1227 = load i8, i8* %valid1606, align 1
  %tobool1620 = trunc i8 %1227 to i1
  br i1 %tobool1620, label %if.end1668, label %if.then1621

if.then1621:                                      ; preds = %sw.bb1603
  %1228 = load i8*, i8** %p, align 8
  %1229 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1622 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1229, i32 0, i32 8
  store i8* %1228, i8** %parse1622, align 8
  br label %do.body1623

do.body1623:                                      ; preds = %if.then1621
  %1230 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1624 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1230, i32 0, i32 12
  %1231 = load %struct.regnode*, %struct.regnode** %emit1624, align 8
  %1232 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1625 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1232, i32 0, i32 13
  %1233 = bitcast %struct.regnode_ssc* %emit_dummy1625 to %struct.regnode*
  %cmp1626 = icmp eq %struct.regnode* %1231, %1233
  br i1 %cmp1626, label %if.end1630, label %if.then1628

if.then1628:                                      ; preds = %do.body1623
  %1234 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1629 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1234, i32 0, i32 3
  %1235 = load %struct.p5rx*, %struct.p5rx** %rx_sv1629, align 8
  %1236 = bitcast %struct.p5rx* %1235 to i8*
  %1237 = bitcast i8* %1236 to %struct.sv*
  %1238 = bitcast %struct.sv* %1237 to i8*
  call void @Perl_save_pushptr(i8* %1238, i32 11)
  br label %if.end1630

if.end1630:                                       ; preds = %if.then1628, %do.body1623
  br label %do.body1631

do.body1631:                                      ; preds = %if.end1630
  %1239 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1633 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1239, i32 0, i32 8
  %1240 = load i8*, i8** %parse1633, align 8
  %1241 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1634 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1241, i32 0, i32 7
  %1242 = load i8*, i8** %end1634, align 8
  %cmp1635 = icmp ugt i8* %1240, %1242
  br i1 %cmp1635, label %cond.true1637, label %cond.false1639

cond.true1637:                                    ; preds = %do.body1631
  %1243 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1638 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1243, i32 0, i32 7
  %1244 = load i8*, i8** %end1638, align 8
  br label %cond.end1641

cond.false1639:                                   ; preds = %do.body1631
  %1245 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1640 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1245, i32 0, i32 8
  %1246 = load i8*, i8** %parse1640, align 8
  br label %cond.end1641

cond.end1641:                                     ; preds = %cond.false1639, %cond.true1637
  %cond1642 = phi i8* [ %1244, %cond.true1637 ], [ %1246, %cond.false1639 ]
  %1247 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1643 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1247, i32 0, i32 2
  %1248 = load i8*, i8** %precomp1643, align 8
  %sub.ptr.lhs.cast1644 = ptrtoint i8* %cond1642 to i64
  %sub.ptr.rhs.cast1645 = ptrtoint i8* %1248 to i64
  %sub.ptr.sub1646 = sub i64 %sub.ptr.lhs.cast1644, %sub.ptr.rhs.cast1645
  store i64 %sub.ptr.sub1646, i64* %offset1632, align 8
  %1249 = load i8*, i8** %error_msg1605, align 8
  %1250 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81647 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1250, i32 0, i32 25
  %1251 = load i32, i32* %utf81647, align 8
  %tobool1648 = icmp ne i32 %1251, 0
  %1252 = zext i1 %tobool1648 to i64
  %cond1649 = select i1 %tobool1648, i32 1, i32 0
  %tobool1650 = icmp ne i32 %cond1649, 0
  %1253 = zext i1 %tobool1650 to i64
  %cond1651 = select i1 %tobool1650, i32 1, i32 0
  %1254 = load i64, i64* %offset1632, align 8
  %1255 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1652 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1255, i32 0, i32 2
  %1256 = load i8*, i8** %precomp1652, align 8
  %1257 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81653 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1257, i32 0, i32 25
  %1258 = load i32, i32* %utf81653, align 8
  %tobool1654 = icmp ne i32 %1258, 0
  %1259 = zext i1 %tobool1654 to i64
  %cond1655 = select i1 %tobool1654, i32 1, i32 0
  %tobool1656 = icmp ne i32 %cond1655, 0
  %1260 = zext i1 %tobool1656 to i64
  %cond1657 = select i1 %tobool1656, i32 1, i32 0
  %1261 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1658 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1261, i32 0, i32 7
  %1262 = load i8*, i8** %end1658, align 8
  %1263 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1659 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1263, i32 0, i32 2
  %1264 = load i8*, i8** %precomp1659, align 8
  %sub.ptr.lhs.cast1660 = ptrtoint i8* %1262 to i64
  %sub.ptr.rhs.cast1661 = ptrtoint i8* %1264 to i64
  %sub.ptr.sub1662 = sub i64 %sub.ptr.lhs.cast1660, %sub.ptr.rhs.cast1661
  %1265 = load i64, i64* %offset1632, align 8
  %sub1663 = sub nsw i64 %sub.ptr.sub1662, %1265
  %1266 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1664 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1266, i32 0, i32 2
  %1267 = load i8*, i8** %precomp1664, align 8
  %1268 = load i64, i64* %offset1632, align 8
  %add.ptr1665 = getelementptr inbounds i8, i8* %1267, i64 %1268
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* %1249, i32 %cond1651, i64 %1254, i8* %1256, i32 %cond1657, i64 %sub1663, i8* %add.ptr1665)
  br label %do.end1666

do.end1666:                                       ; preds = %cond.end1641
  br label %do.end1667

do.end1667:                                       ; preds = %do.end1666
  br label %if.end1668

if.end1668:                                       ; preds = %do.end1667, %sw.bb1603
  %1269 = load i64, i64* %result1604, align 8
  store i64 %1269, i64* %ender, align 8
  %1270 = load i64, i64* %ender, align 8
  %cmp1669 = icmp ult i64 %1270, 256
  br i1 %cmp1669, label %if.then1671, label %if.else1683

if.then1671:                                      ; preds = %if.end1668
  %1271 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool1672 = icmp ne %struct.sv* %1271, null
  br i1 %tobool1672, label %cond.true1679, label %lor.lhs.false1673

lor.lhs.false1673:                                ; preds = %if.then1671
  %1272 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool1674 = icmp ne %struct.sv* %1272, null
  br i1 %tobool1674, label %land.lhs.true1675, label %cond.false1680

land.lhs.true1675:                                ; preds = %lor.lhs.false1673
  %call1676 = call %struct.sv* @Perl__get_encoding()
  %cmp1677 = icmp ne %struct.sv* %call1676, null
  br i1 %cmp1677, label %cond.true1679, label %cond.false1680

cond.true1679:                                    ; preds = %land.lhs.true1675, %if.then1671
  br i1 true, label %if.then1681, label %if.end1682

cond.false1680:                                   ; preds = %land.lhs.true1675, %lor.lhs.false1673
  br i1 false, label %if.then1681, label %if.end1682

if.then1681:                                      ; preds = %cond.false1680, %cond.true1679
  br label %recode_encoding

if.end1682:                                       ; preds = %cond.false1680, %cond.true1679
  br label %if.end1692

if.else1683:                                      ; preds = %if.end1668
  br label %do.body1684

do.body1684:                                      ; preds = %if.else1683
  %1273 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81685 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1273, i32 0, i32 25
  %1274 = load i32, i32* %utf81685, align 8
  %tobool1686 = icmp ne i32 %1274, 0
  br i1 %tobool1686, label %cond.true1687, label %cond.false1688

cond.true1687:                                    ; preds = %do.body1684
  br i1 true, label %if.end1690, label %if.then1689

cond.false1688:                                   ; preds = %do.body1684
  br i1 false, label %if.end1690, label %if.then1689

if.then1689:                                      ; preds = %cond.false1688, %cond.true1687
  %1275 = load i32*, i32** %flagp.addr, align 8
  store i32 32, i32* %1275, align 4
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end1690:                                       ; preds = %cond.false1688, %cond.true1687
  br label %do.end1691

do.end1691:                                       ; preds = %if.end1690
  br label %if.end1692

if.end1692:                                       ; preds = %do.end1691, %if.end1682
  br label %sw.epilog1935

sw.bb1693:                                        ; preds = %sw.bb1447
  %1276 = load i8*, i8** %p, align 8
  %incdec.ptr1694 = getelementptr inbounds i8, i8* %1276, i32 1
  store i8* %incdec.ptr1694, i8** %p, align 8
  %1277 = load i8*, i8** %p, align 8
  %incdec.ptr1695 = getelementptr inbounds i8, i8* %1277, i32 1
  store i8* %incdec.ptr1695, i8** %p, align 8
  %1278 = load i8, i8* %1277, align 1
  %1279 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1696 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1279, i32 0, i32 12
  %1280 = load %struct.regnode*, %struct.regnode** %emit1696, align 8
  %1281 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1697 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1281, i32 0, i32 13
  %1282 = bitcast %struct.regnode_ssc* %emit_dummy1697 to %struct.regnode*
  %cmp1698 = icmp eq %struct.regnode* %1280, %1282
  %lnot1700 = xor i1 %cmp1698, true
  %call1701 = call signext i8 @S_grok_bslash_c(i8 signext %1278, i1 zeroext %lnot1700)
  %conv1702 = sext i8 %call1701 to i64
  store i64 %conv1702, i64* %ender, align 8
  br label %sw.epilog1935

sw.bb1703:                                        ; preds = %sw.bb1447, %sw.bb1447
  %1283 = load i8*, i8** %p, align 8
  %incdec.ptr1704 = getelementptr inbounds i8, i8* %1283, i32 -1
  store i8* %incdec.ptr1704, i8** %p, align 8
  br label %loopdone

sw.bb1705:                                        ; preds = %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447, %sw.bb1447
  %1284 = load i8*, i8** %p, align 8
  %arrayidx1706 = getelementptr inbounds i8, i8* %1284, i64 1
  %1285 = load i8, i8* %arrayidx1706, align 1
  %idxprom1707 = zext i8 %1285 to i64
  %arrayidx1708 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom1707
  %1286 = load i32, i32* %arrayidx1708, align 4
  %and1709 = and i32 %1286, 2
  %tobool1710 = icmp ne i32 %and1709, 0
  br i1 %tobool1710, label %cond.true1711, label %cond.false1712

cond.true1711:                                    ; preds = %sw.bb1705
  br i1 true, label %lor.lhs.false1713, label %if.then1718

cond.false1712:                                   ; preds = %sw.bb1705
  br i1 false, label %lor.lhs.false1713, label %if.then1718

lor.lhs.false1713:                                ; preds = %cond.false1712, %cond.true1711
  %1287 = load i8*, i8** %p, align 8
  %call1714 = call i32 @S_backref_value(i8* %1287)
  %1288 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %npar1715 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1288, i32 0, i32 18
  %1289 = load i32, i32* %npar1715, align 8
  %cmp1716 = icmp slt i32 %call1714, %1289
  br i1 %cmp1716, label %if.then1718, label %if.end1720

if.then1718:                                      ; preds = %lor.lhs.false1713, %cond.false1712, %cond.true1711
  %1290 = load i8*, i8** %p, align 8
  %incdec.ptr1719 = getelementptr inbounds i8, i8* %1290, i32 -1
  store i8* %incdec.ptr1719, i8** %p, align 8
  br label %loopdone

if.end1720:                                       ; preds = %lor.lhs.false1713
  br label %sw.bb1721

sw.bb1721:                                        ; preds = %sw.bb1447, %if.end1720
  store i32 4, i32* %flags1722, align 4
  store i64 3, i64* %numlen, align 8
  %1291 = load i8*, i8** %p, align 8
  %call1723 = call i64 @Perl_grok_oct(i8* %1291, i64* %numlen, i32* %flags1722, double* null)
  store i64 %call1723, i64* %ender, align 8
  %1292 = load i64, i64* %ender, align 8
  %cmp1724 = icmp ugt i64 %1292, 255
  br i1 %cmp1724, label %if.then1726, label %if.end1735

if.then1726:                                      ; preds = %sw.bb1721
  br label %do.body1727

do.body1727:                                      ; preds = %if.then1726
  %1293 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81728 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1293, i32 0, i32 25
  %1294 = load i32, i32* %utf81728, align 8
  %tobool1729 = icmp ne i32 %1294, 0
  br i1 %tobool1729, label %cond.true1730, label %cond.false1731

cond.true1730:                                    ; preds = %do.body1727
  br i1 true, label %if.end1733, label %if.then1732

cond.false1731:                                   ; preds = %do.body1727
  br i1 false, label %if.end1733, label %if.then1732

if.then1732:                                      ; preds = %cond.false1731, %cond.true1730
  %1295 = load i32*, i32** %flagp.addr, align 8
  store i32 32, i32* %1295, align 4
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end1733:                                       ; preds = %cond.false1731, %cond.true1730
  br label %do.end1734

do.end1734:                                       ; preds = %if.end1733
  br label %if.end1735

if.end1735:                                       ; preds = %do.end1734, %sw.bb1721
  %1296 = load i64, i64* %numlen, align 8
  %1297 = load i8*, i8** %p, align 8
  %add.ptr1736 = getelementptr inbounds i8, i8* %1297, i64 %1296
  store i8* %add.ptr1736, i8** %p, align 8
  %1298 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1737 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1298, i32 0, i32 12
  %1299 = load %struct.regnode*, %struct.regnode** %emit1737, align 8
  %1300 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1738 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1300, i32 0, i32 13
  %1301 = bitcast %struct.regnode_ssc* %emit_dummy1738 to %struct.regnode*
  %cmp1739 = icmp eq %struct.regnode* %1299, %1301
  br i1 %cmp1739, label %if.end1787, label %land.lhs.true1741

land.lhs.true1741:                                ; preds = %if.end1735
  %1302 = load i64, i64* %numlen, align 8
  %cmp1742 = icmp ult i64 %1302, 3
  br i1 %cmp1742, label %land.lhs.true1744, label %if.end1787

land.lhs.true1744:                                ; preds = %land.lhs.true1741
  %1303 = load i8*, i8** %p, align 8
  %1304 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1745 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1304, i32 0, i32 7
  %1305 = load i8*, i8** %end1745, align 8
  %cmp1746 = icmp ult i8* %1303, %1305
  br i1 %cmp1746, label %land.lhs.true1748, label %if.end1787

land.lhs.true1748:                                ; preds = %land.lhs.true1744
  %1306 = load i8*, i8** %p, align 8
  %1307 = load i8, i8* %1306, align 1
  %idxprom1749 = zext i8 %1307 to i64
  %arrayidx1750 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom1749
  %1308 = load i32, i32* %arrayidx1750, align 4
  %and1751 = and i32 %1308, 2
  %tobool1752 = icmp ne i32 %and1751, 0
  br i1 %tobool1752, label %cond.true1753, label %cond.false1754

cond.true1753:                                    ; preds = %land.lhs.true1748
  br i1 true, label %land.lhs.true1755, label %if.end1787

cond.false1754:                                   ; preds = %land.lhs.true1748
  br i1 false, label %land.lhs.true1755, label %if.end1787

land.lhs.true1755:                                ; preds = %cond.false1754, %cond.true1753
  %call1756 = call zeroext i1 @Perl_ckwarn(i32 20)
  br i1 %call1756, label %if.then1758, label %if.end1787

if.then1758:                                      ; preds = %land.lhs.true1755
  br label %do.body1759

do.body1759:                                      ; preds = %if.then1758
  %1309 = load i8*, i8** %p, align 8
  %add.ptr1761 = getelementptr inbounds i8, i8* %1309, i64 1
  %1310 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1762 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1310, i32 0, i32 2
  %1311 = load i8*, i8** %precomp1762, align 8
  %sub.ptr.lhs.cast1763 = ptrtoint i8* %add.ptr1761 to i64
  %sub.ptr.rhs.cast1764 = ptrtoint i8* %1311 to i64
  %sub.ptr.sub1765 = sub i64 %sub.ptr.lhs.cast1763, %sub.ptr.rhs.cast1764
  store i64 %sub.ptr.sub1765, i64* %offset1760, align 8
  %1312 = load i8*, i8** %p, align 8
  %1313 = load i64, i64* %numlen, align 8
  %call1766 = call i8* @S_form_short_octal_warning(i8* %1312, i64 %1313)
  %1314 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81767 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1314, i32 0, i32 25
  %1315 = load i32, i32* %utf81767, align 8
  %tobool1768 = icmp ne i32 %1315, 0
  %1316 = zext i1 %tobool1768 to i64
  %cond1769 = select i1 %tobool1768, i32 1, i32 0
  %tobool1770 = icmp ne i32 %cond1769, 0
  %1317 = zext i1 %tobool1770 to i64
  %cond1771 = select i1 %tobool1770, i32 1, i32 0
  %1318 = load i64, i64* %offset1760, align 8
  %1319 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1772 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1319, i32 0, i32 2
  %1320 = load i8*, i8** %precomp1772, align 8
  %1321 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81773 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1321, i32 0, i32 25
  %1322 = load i32, i32* %utf81773, align 8
  %tobool1774 = icmp ne i32 %1322, 0
  %1323 = zext i1 %tobool1774 to i64
  %cond1775 = select i1 %tobool1774, i32 1, i32 0
  %tobool1776 = icmp ne i32 %cond1775, 0
  %1324 = zext i1 %tobool1776 to i64
  %cond1777 = select i1 %tobool1776, i32 1, i32 0
  %1325 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1778 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1325, i32 0, i32 7
  %1326 = load i8*, i8** %end1778, align 8
  %1327 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1779 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1327, i32 0, i32 2
  %1328 = load i8*, i8** %precomp1779, align 8
  %sub.ptr.lhs.cast1780 = ptrtoint i8* %1326 to i64
  %sub.ptr.rhs.cast1781 = ptrtoint i8* %1328 to i64
  %sub.ptr.sub1782 = sub i64 %sub.ptr.lhs.cast1780, %sub.ptr.rhs.cast1781
  %1329 = load i64, i64* %offset1760, align 8
  %sub1783 = sub nsw i64 %sub.ptr.sub1782, %1329
  %1330 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1784 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1330, i32 0, i32 2
  %1331 = load i8*, i8** %precomp1784, align 8
  %1332 = load i64, i64* %offset1760, align 8
  %add.ptr1785 = getelementptr inbounds i8, i8* %1331, i64 %1332
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* %call1766, i32 %cond1771, i64 %1318, i8* %1320, i32 %cond1777, i64 %sub1783, i8* %add.ptr1785)
  br label %do.end1786

do.end1786:                                       ; preds = %do.body1759
  br label %if.end1787

if.end1787:                                       ; preds = %do.end1786, %land.lhs.true1755, %cond.false1754, %cond.true1753, %land.lhs.true1744, %land.lhs.true1741, %if.end1735
  %1333 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool1788 = icmp ne %struct.sv* %1333, null
  br i1 %tobool1788, label %cond.true1795, label %lor.lhs.false1789

lor.lhs.false1789:                                ; preds = %if.end1787
  %1334 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool1790 = icmp ne %struct.sv* %1334, null
  br i1 %tobool1790, label %land.lhs.true1791, label %cond.false1796

land.lhs.true1791:                                ; preds = %lor.lhs.false1789
  %call1792 = call %struct.sv* @Perl__get_encoding()
  %cmp1793 = icmp ne %struct.sv* %call1792, null
  br i1 %cmp1793, label %cond.true1795, label %cond.false1796

cond.true1795:                                    ; preds = %land.lhs.true1791, %if.end1787
  br i1 true, label %land.lhs.true1797, label %if.end1801

cond.false1796:                                   ; preds = %land.lhs.true1791, %lor.lhs.false1789
  br i1 false, label %land.lhs.true1797, label %if.end1801

land.lhs.true1797:                                ; preds = %cond.false1796, %cond.true1795
  %1335 = load i64, i64* %ender, align 8
  %cmp1798 = icmp ult i64 %1335, 256
  br i1 %cmp1798, label %if.then1800, label %if.end1801

if.then1800:                                      ; preds = %land.lhs.true1797
  br label %recode_encoding

if.end1801:                                       ; preds = %land.lhs.true1797, %cond.false1796, %cond.true1795
  br label %sw.epilog1935

recode_encoding:                                  ; preds = %if.then1800, %if.then1681, %if.then1589
  %1336 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %override_recoding = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1336, i32 0, i32 36
  %1337 = load i32, i32* %override_recoding, align 8
  %tobool1802 = icmp ne i32 %1337, 0
  br i1 %tobool1802, label %if.end1849, label %if.then1803

if.then1803:                                      ; preds = %recode_encoding
  %call1804 = call %struct.sv* @Perl__get_encoding()
  store %struct.sv* %call1804, %struct.sv** %enc, align 8
  %1338 = load i64, i64* %ender, align 8
  %conv1805 = trunc i64 %1338 to i8
  %call1806 = call i64 @S_reg_recode(i8 signext %conv1805, %struct.sv** %enc)
  store i64 %call1806, i64* %ender, align 8
  %1339 = load %struct.sv*, %struct.sv** %enc, align 8
  %tobool1807 = icmp ne %struct.sv* %1339, null
  br i1 %tobool1807, label %if.end1840, label %land.lhs.true1808

land.lhs.true1808:                                ; preds = %if.then1803
  %1340 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1809 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1340, i32 0, i32 12
  %1341 = load %struct.regnode*, %struct.regnode** %emit1809, align 8
  %1342 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1810 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1342, i32 0, i32 13
  %1343 = bitcast %struct.regnode_ssc* %emit_dummy1810 to %struct.regnode*
  %cmp1811 = icmp eq %struct.regnode* %1341, %1343
  br i1 %cmp1811, label %if.end1840, label %if.then1813

if.then1813:                                      ; preds = %land.lhs.true1808
  br label %do.body1814

do.body1814:                                      ; preds = %if.then1813
  %1344 = load i8*, i8** %p, align 8
  %1345 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1816 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1345, i32 0, i32 2
  %1346 = load i8*, i8** %precomp1816, align 8
  %sub.ptr.lhs.cast1817 = ptrtoint i8* %1344 to i64
  %sub.ptr.rhs.cast1818 = ptrtoint i8* %1346 to i64
  %sub.ptr.sub1819 = sub i64 %sub.ptr.lhs.cast1817, %sub.ptr.rhs.cast1818
  store i64 %sub.ptr.sub1819, i64* %offset1815, align 8
  %1347 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81820 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1347, i32 0, i32 25
  %1348 = load i32, i32* %utf81820, align 8
  %tobool1821 = icmp ne i32 %1348, 0
  %1349 = zext i1 %tobool1821 to i64
  %cond1822 = select i1 %tobool1821, i32 1, i32 0
  %tobool1823 = icmp ne i32 %cond1822, 0
  %1350 = zext i1 %tobool1823 to i64
  %cond1824 = select i1 %tobool1823, i32 1, i32 0
  %1351 = load i64, i64* %offset1815, align 8
  %1352 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1825 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1352, i32 0, i32 2
  %1353 = load i8*, i8** %precomp1825, align 8
  %1354 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81826 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1354, i32 0, i32 25
  %1355 = load i32, i32* %utf81826, align 8
  %tobool1827 = icmp ne i32 %1355, 0
  %1356 = zext i1 %tobool1827 to i64
  %cond1828 = select i1 %tobool1827, i32 1, i32 0
  %tobool1829 = icmp ne i32 %cond1828, 0
  %1357 = zext i1 %tobool1829 to i64
  %cond1830 = select i1 %tobool1829, i32 1, i32 0
  %1358 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1831 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1358, i32 0, i32 7
  %1359 = load i8*, i8** %end1831, align 8
  %1360 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1832 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1360, i32 0, i32 2
  %1361 = load i8*, i8** %precomp1832, align 8
  %sub.ptr.lhs.cast1833 = ptrtoint i8* %1359 to i64
  %sub.ptr.rhs.cast1834 = ptrtoint i8* %1361 to i64
  %sub.ptr.sub1835 = sub i64 %sub.ptr.lhs.cast1833, %sub.ptr.rhs.cast1834
  %1362 = load i64, i64* %offset1815, align 8
  %sub1836 = sub nsw i64 %sub.ptr.sub1835, %1362
  %1363 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1837 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1363, i32 0, i32 2
  %1364 = load i8*, i8** %precomp1837, align 8
  %1365 = load i64, i64* %offset1815, align 8
  %add.ptr1838 = getelementptr inbounds i8, i8* %1364, i64 %1365
  call void (i32, i8*, ...) @Perl_ck_warner(i32 20, i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.304, i64 0, i64 0), i32 %cond1824, i64 %1351, i8* %1353, i32 %cond1830, i64 %sub1836, i8* %add.ptr1838)
  br label %do.end1839

do.end1839:                                       ; preds = %do.body1814
  br label %if.end1840

if.end1840:                                       ; preds = %do.end1839, %land.lhs.true1808, %if.then1803
  br label %do.body1841

do.body1841:                                      ; preds = %if.end1840
  %1366 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81842 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1366, i32 0, i32 25
  %1367 = load i32, i32* %utf81842, align 8
  %tobool1843 = icmp ne i32 %1367, 0
  br i1 %tobool1843, label %cond.true1844, label %cond.false1845

cond.true1844:                                    ; preds = %do.body1841
  br i1 true, label %if.end1847, label %if.then1846

cond.false1845:                                   ; preds = %do.body1841
  br i1 false, label %if.end1847, label %if.then1846

if.then1846:                                      ; preds = %cond.false1845, %cond.true1844
  %1368 = load i32*, i32** %flagp.addr, align 8
  store i32 32, i32* %1368, align 4
  store %struct.regnode* null, %struct.regnode** %retval, align 8
  br label %return

if.end1847:                                       ; preds = %cond.false1845, %cond.true1844
  br label %do.end1848

do.end1848:                                       ; preds = %if.end1847
  br label %if.end1849

if.end1849:                                       ; preds = %do.end1848, %recode_encoding
  br label %sw.epilog1935

sw.bb1850:                                        ; preds = %sw.bb1447
  %1369 = load i8*, i8** %p, align 8
  %1370 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1851 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1370, i32 0, i32 7
  %1371 = load i8*, i8** %end1851, align 8
  %cmp1852 = icmp uge i8* %1369, %1371
  br i1 %cmp1852, label %if.then1854, label %if.end1881

if.then1854:                                      ; preds = %sw.bb1850
  br label %do.body1855

do.body1855:                                      ; preds = %if.then1854
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses1856, align 8
  %1372 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1858 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1372, i32 0, i32 7
  %1373 = load i8*, i8** %end1858, align 8
  %1374 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1859 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1374, i32 0, i32 2
  %1375 = load i8*, i8** %precomp1859, align 8
  %sub.ptr.lhs.cast1860 = ptrtoint i8* %1373 to i64
  %sub.ptr.rhs.cast1861 = ptrtoint i8* %1375 to i64
  %sub.ptr.sub1862 = sub i64 %sub.ptr.lhs.cast1860, %sub.ptr.rhs.cast1861
  store i64 %sub.ptr.sub1862, i64* %len1857, align 8
  %1376 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1863 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1376, i32 0, i32 12
  %1377 = load %struct.regnode*, %struct.regnode** %emit1863, align 8
  %1378 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1864 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1378, i32 0, i32 13
  %1379 = bitcast %struct.regnode_ssc* %emit_dummy1864 to %struct.regnode*
  %cmp1865 = icmp eq %struct.regnode* %1377, %1379
  br i1 %cmp1865, label %if.end1869, label %if.then1867

if.then1867:                                      ; preds = %do.body1855
  %1380 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1868 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1380, i32 0, i32 3
  %1381 = load %struct.p5rx*, %struct.p5rx** %rx_sv1868, align 8
  %1382 = bitcast %struct.p5rx* %1381 to i8*
  %1383 = bitcast i8* %1382 to %struct.sv*
  %1384 = bitcast %struct.sv* %1383 to i8*
  call void @Perl_save_pushptr(i8* %1384, i32 11)
  br label %if.end1869

if.end1869:                                       ; preds = %if.then1867, %do.body1855
  %1385 = load i64, i64* %len1857, align 8
  %cmp1870 = icmp sgt i64 %1385, 127
  br i1 %cmp1870, label %if.then1872, label %if.end1873

if.then1872:                                      ; preds = %if.end1869
  store i64 117, i64* %len1857, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses1856, align 8
  br label %if.end1873

if.end1873:                                       ; preds = %if.then1872, %if.end1869
  %1386 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81874 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1386, i32 0, i32 25
  %1387 = load i32, i32* %utf81874, align 8
  %tobool1875 = icmp ne i32 %1387, 0
  %1388 = zext i1 %tobool1875 to i64
  %cond1876 = select i1 %tobool1875, i32 1, i32 0
  %tobool1877 = icmp ne i32 %cond1876, 0
  %1389 = zext i1 %tobool1877 to i64
  %cond1878 = select i1 %tobool1877, i32 1, i32 0
  %1390 = load i64, i64* %len1857, align 8
  %1391 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1879 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1391, i32 0, i32 2
  %1392 = load i8*, i8** %precomp1879, align 8
  %1393 = load i8*, i8** %ellipses1856, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.302, i64 0, i64 0), i32 %cond1878, i64 %1390, i8* %1392, i8* %1393)
  br label %do.end1880

do.end1880:                                       ; preds = %if.end1873
  br label %if.end1881

if.end1881:                                       ; preds = %do.end1880, %sw.bb1850
  br label %sw.default1882

sw.default1882:                                   ; preds = %sw.bb1447, %if.end1881
  %1394 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1883 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1394, i32 0, i32 12
  %1395 = load %struct.regnode*, %struct.regnode** %emit1883, align 8
  %1396 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1884 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1396, i32 0, i32 13
  %1397 = bitcast %struct.regnode_ssc* %emit_dummy1884 to %struct.regnode*
  %cmp1885 = icmp eq %struct.regnode* %1395, %1397
  br i1 %cmp1885, label %if.end1934, label %land.lhs.true1887

land.lhs.true1887:                                ; preds = %sw.default1882
  %1398 = load i8*, i8** %p, align 8
  %1399 = load i8, i8* %1398, align 1
  %idxprom1888 = zext i8 %1399 to i64
  %arrayidx1889 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom1888
  %1400 = load i32, i32* %arrayidx1889, align 4
  %and1890 = and i32 %1400, 16512
  %cmp1891 = icmp eq i32 %and1890, 16512
  br i1 %cmp1891, label %if.then1893, label %if.end1934

if.then1893:                                      ; preds = %land.lhs.true1887
  %1401 = load i8*, i8** %p, align 8
  %1402 = load i8, i8* %1401, align 1
  %idxprom1895 = zext i8 %1402 to i64
  %arrayidx1896 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom1895
  %1403 = load i32, i32* %arrayidx1896, align 4
  %and1897 = and i32 %1403, 16388
  %cmp1898 = icmp eq i32 %and1897, 16388
  br i1 %cmp1898, label %land.rhs1900, label %land.end1905

land.rhs1900:                                     ; preds = %if.then1893
  %1404 = load i8*, i8** %p, align 8
  %add.ptr1901 = getelementptr inbounds i8, i8* %1404, i64 1
  %1405 = load i8, i8* %add.ptr1901, align 1
  %conv1902 = sext i8 %1405 to i32
  %cmp1903 = icmp eq i32 %conv1902, 123
  br label %land.end1905

land.end1905:                                     ; preds = %land.rhs1900, %if.then1893
  %1406 = phi i1 [ false, %if.then1893 ], [ %cmp1903, %land.rhs1900 ]
  %1407 = zext i1 %1406 to i64
  %cond1906 = select i1 %1406, i32 2, i32 1
  store i32 %cond1906, i32* %len1894, align 4
  br label %do.body1907

do.body1907:                                      ; preds = %land.end1905
  %1408 = load i8*, i8** %p, align 8
  %1409 = load i32, i32* %len1894, align 4
  %idx.ext = sext i32 %1409 to i64
  %add.ptr1909 = getelementptr inbounds i8, i8* %1408, i64 %idx.ext
  %1410 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1910 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1410, i32 0, i32 2
  %1411 = load i8*, i8** %precomp1910, align 8
  %sub.ptr.lhs.cast1911 = ptrtoint i8* %add.ptr1909 to i64
  %sub.ptr.rhs.cast1912 = ptrtoint i8* %1411 to i64
  %sub.ptr.sub1913 = sub i64 %sub.ptr.lhs.cast1911, %sub.ptr.rhs.cast1912
  store i64 %sub.ptr.sub1913, i64* %offset1908, align 8
  %1412 = load i32, i32* %len1894, align 4
  %1413 = load i8*, i8** %p, align 8
  %1414 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81914 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1414, i32 0, i32 25
  %1415 = load i32, i32* %utf81914, align 8
  %tobool1915 = icmp ne i32 %1415, 0
  %1416 = zext i1 %tobool1915 to i64
  %cond1916 = select i1 %tobool1915, i32 1, i32 0
  %tobool1917 = icmp ne i32 %cond1916, 0
  %1417 = zext i1 %tobool1917 to i64
  %cond1918 = select i1 %tobool1917, i32 1, i32 0
  %1418 = load i64, i64* %offset1908, align 8
  %1419 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1919 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1419, i32 0, i32 2
  %1420 = load i8*, i8** %precomp1919, align 8
  %1421 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81920 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1421, i32 0, i32 25
  %1422 = load i32, i32* %utf81920, align 8
  %tobool1921 = icmp ne i32 %1422, 0
  %1423 = zext i1 %tobool1921 to i64
  %cond1922 = select i1 %tobool1921, i32 1, i32 0
  %tobool1923 = icmp ne i32 %cond1922, 0
  %1424 = zext i1 %tobool1923 to i64
  %cond1924 = select i1 %tobool1923, i32 1, i32 0
  %1425 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1925 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1425, i32 0, i32 7
  %1426 = load i8*, i8** %end1925, align 8
  %1427 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1926 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1427, i32 0, i32 2
  %1428 = load i8*, i8** %precomp1926, align 8
  %sub.ptr.lhs.cast1927 = ptrtoint i8* %1426 to i64
  %sub.ptr.rhs.cast1928 = ptrtoint i8* %1428 to i64
  %sub.ptr.sub1929 = sub i64 %sub.ptr.lhs.cast1927, %sub.ptr.rhs.cast1928
  %1429 = load i64, i64* %offset1908, align 8
  %sub1930 = sub nsw i64 %sub.ptr.sub1929, %1429
  %1430 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1931 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1430, i32 0, i32 2
  %1431 = load i8*, i8** %precomp1931, align 8
  %1432 = load i64, i64* %offset1908, align 8
  %add.ptr1932 = getelementptr inbounds i8, i8* %1431, i64 %1432
  call void (i32, i8*, ...) @Perl_ck_warner(i32 20, i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.305, i64 0, i64 0), i32 %1412, i8* %1413, i32 %cond1918, i64 %1418, i8* %1420, i32 %cond1924, i64 %sub1930, i8* %add.ptr1932)
  br label %do.end1933

do.end1933:                                       ; preds = %do.body1907
  br label %if.end1934

if.end1934:                                       ; preds = %do.end1933, %land.lhs.true1887, %sw.default1882
  br label %normal_default

sw.epilog1935:                                    ; preds = %if.end1849, %if.end1801, %sw.bb1693, %if.end1692, %if.end1602, %sw.bb1512, %sw.bb1510, %sw.bb1508, %sw.bb1506, %sw.bb1504, %if.end1503, %sw.bb1452
  br label %sw.epilog2006

sw.bb1936:                                        ; preds = %if.end1444
  %1433 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1937 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1433, i32 0, i32 12
  %1434 = load %struct.regnode*, %struct.regnode** %emit1937, align 8
  %1435 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1938 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1435, i32 0, i32 13
  %1436 = bitcast %struct.regnode_ssc* %emit_dummy1938 to %struct.regnode*
  %cmp1939 = icmp eq %struct.regnode* %1434, %1436
  br i1 %cmp1939, label %if.end1981, label %land.lhs.true1941

land.lhs.true1941:                                ; preds = %sw.bb1936
  %1437 = load i64, i64* %len1389, align 8
  %tobool1942 = icmp ne i64 %1437, 0
  br i1 %tobool1942, label %if.then1953, label %lor.lhs.false1943

lor.lhs.false1943:                                ; preds = %land.lhs.true1941
  %1438 = load i8*, i8** %p, align 8
  %1439 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %start = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1439, i32 0, i32 6
  %1440 = load i8*, i8** %start, align 8
  %cmp1944 = icmp ugt i8* %1438, %1440
  br i1 %cmp1944, label %land.lhs.true1946, label %if.end1981

land.lhs.true1946:                                ; preds = %lor.lhs.false1943
  %1441 = load i8*, i8** %p, align 8
  %add.ptr1947 = getelementptr inbounds i8, i8* %1441, i64 -1
  %1442 = load i8, i8* %add.ptr1947, align 1
  %idxprom1948 = zext i8 %1442 to i64
  %arrayidx1949 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom1948
  %1443 = load i32, i32* %arrayidx1949, align 4
  %and1950 = and i32 %1443, 16388
  %cmp1951 = icmp eq i32 %and1950, 16388
  br i1 %cmp1951, label %if.then1953, label %if.end1981

if.then1953:                                      ; preds = %land.lhs.true1946, %land.lhs.true1941
  br label %do.body1954

do.body1954:                                      ; preds = %if.then1953
  %1444 = load i8*, i8** %p, align 8
  %add.ptr1956 = getelementptr inbounds i8, i8* %1444, i64 1
  %1445 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1957 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1445, i32 0, i32 2
  %1446 = load i8*, i8** %precomp1957, align 8
  %sub.ptr.lhs.cast1958 = ptrtoint i8* %add.ptr1956 to i64
  %sub.ptr.rhs.cast1959 = ptrtoint i8* %1446 to i64
  %sub.ptr.sub1960 = sub i64 %sub.ptr.lhs.cast1958, %sub.ptr.rhs.cast1959
  store i64 %sub.ptr.sub1960, i64* %offset1955, align 8
  %1447 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81961 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1447, i32 0, i32 25
  %1448 = load i32, i32* %utf81961, align 8
  %tobool1962 = icmp ne i32 %1448, 0
  %1449 = zext i1 %tobool1962 to i64
  %cond1963 = select i1 %tobool1962, i32 1, i32 0
  %tobool1964 = icmp ne i32 %cond1963, 0
  %1450 = zext i1 %tobool1964 to i64
  %cond1965 = select i1 %tobool1964, i32 1, i32 0
  %1451 = load i64, i64* %offset1955, align 8
  %1452 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1966 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1452, i32 0, i32 2
  %1453 = load i8*, i8** %precomp1966, align 8
  %1454 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81967 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1454, i32 0, i32 25
  %1455 = load i32, i32* %utf81967, align 8
  %tobool1968 = icmp ne i32 %1455, 0
  %1456 = zext i1 %tobool1968 to i64
  %cond1969 = select i1 %tobool1968, i32 1, i32 0
  %tobool1970 = icmp ne i32 %cond1969, 0
  %1457 = zext i1 %tobool1970 to i64
  %cond1971 = select i1 %tobool1970, i32 1, i32 0
  %1458 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1972 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1458, i32 0, i32 7
  %1459 = load i8*, i8** %end1972, align 8
  %1460 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1973 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1460, i32 0, i32 2
  %1461 = load i8*, i8** %precomp1973, align 8
  %sub.ptr.lhs.cast1974 = ptrtoint i8* %1459 to i64
  %sub.ptr.rhs.cast1975 = ptrtoint i8* %1461 to i64
  %sub.ptr.sub1976 = sub i64 %sub.ptr.lhs.cast1974, %sub.ptr.rhs.cast1975
  %1462 = load i64, i64* %offset1955, align 8
  %sub1977 = sub nsw i64 %sub.ptr.sub1976, %1462
  %1463 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1978 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1463, i32 0, i32 2
  %1464 = load i8*, i8** %precomp1978, align 8
  %1465 = load i64, i64* %offset1955, align 8
  %add.ptr1979 = getelementptr inbounds i8, i8* %1464, i64 %1465
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 5122, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.306, i64 0, i64 0), i32 %cond1965, i64 %1451, i8* %1453, i32 %cond1971, i64 %sub1977, i8* %add.ptr1979)
  br label %do.end1980

do.end1980:                                       ; preds = %do.body1954
  br label %if.end1981

if.end1981:                                       ; preds = %do.end1980, %land.lhs.true1946, %lor.lhs.false1943, %sw.bb1936
  br label %sw.default1982

sw.default1982:                                   ; preds = %if.end1444, %if.end1981
  br label %normal_default

normal_default:                                   ; preds = %sw.default1982, %if.end1934
  %1466 = load i8*, i8** %p, align 8
  %1467 = load i8, i8* %1466, align 1
  %conv1983 = zext i8 %1467 to i32
  %cmp1984 = icmp sge i32 %conv1983, 194
  br i1 %cmp1984, label %land.lhs.true1986, label %if.else2002

land.lhs.true1986:                                ; preds = %normal_default
  %1468 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81987 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1468, i32 0, i32 25
  %1469 = load i32, i32* %utf81987, align 8
  %tobool1988 = icmp ne i32 %1469, 0
  br i1 %tobool1988, label %cond.true1989, label %cond.false1990

cond.true1989:                                    ; preds = %land.lhs.true1986
  br i1 true, label %if.then1991, label %if.else2002

cond.false1990:                                   ; preds = %land.lhs.true1986
  br i1 false, label %if.then1991, label %if.else2002

if.then1991:                                      ; preds = %cond.false1990, %cond.true1989
  %1470 = load i8*, i8** %p, align 8
  %1471 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1993 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1471, i32 0, i32 7
  %1472 = load i8*, i8** %end1993, align 8
  %1473 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast1994 = ptrtoint i8* %1472 to i64
  %sub.ptr.rhs.cast1995 = ptrtoint i8* %1473 to i64
  %sub.ptr.sub1996 = sub i64 %sub.ptr.lhs.cast1994, %sub.ptr.rhs.cast1995
  %call1997 = call zeroext i1 @Perl_ckwarn(i32 44)
  %1474 = zext i1 %call1997 to i64
  %cond1999 = select i1 %call1997, i32 0, i32 1
  %call2000 = call i64 @Perl_utf8n_to_uvchr(i8* %1470, i64 %sub.ptr.sub1996, i64* %numlen1992, i32 %cond1999)
  store i64 %call2000, i64* %ender, align 8
  %1475 = load i64, i64* %numlen1992, align 8
  %1476 = load i8*, i8** %p, align 8
  %add.ptr2001 = getelementptr inbounds i8, i8* %1476, i64 %1475
  store i8* %add.ptr2001, i8** %p, align 8
  br label %if.end2005

if.else2002:                                      ; preds = %cond.false1990, %cond.true1989, %normal_default
  %1477 = load i8*, i8** %p, align 8
  %incdec.ptr2003 = getelementptr inbounds i8, i8* %1477, i32 1
  store i8* %incdec.ptr2003, i8** %p, align 8
  %1478 = load i8, i8* %1477, align 1
  %conv2004 = zext i8 %1478 to i64
  store i64 %conv2004, i64* %ender, align 8
  br label %if.end2005

if.end2005:                                       ; preds = %if.else2002, %if.then1991
  br label %sw.epilog2006

sw.epilog2006:                                    ; preds = %if.end2005, %sw.epilog1935
  %1479 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2007 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1479, i32 0, i32 0
  %1480 = load i32, i32* %flags2007, align 8
  %and2008 = and i32 %1480, 8
  %tobool2009 = icmp ne i32 %and2008, 0
  br i1 %tobool2009, label %if.then2010, label %if.end2012

if.then2010:                                      ; preds = %sw.epilog2006
  %1481 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1482 = load i8*, i8** %p, align 8
  %call2011 = call i8* @S_regpatws(%struct.RExC_state_t* %1481, i8* %1482, i1 zeroext true)
  store i8* %call2011, i8** %p, align 8
  br label %if.end2012

if.end2012:                                       ; preds = %if.then2010, %sw.epilog2006
  %1483 = load i8*, i8** %p, align 8
  %1484 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2013 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1484, i32 0, i32 7
  %1485 = load i8*, i8** %end2013, align 8
  %cmp2014 = icmp ult i8* %1483, %1485
  br i1 %cmp2014, label %land.rhs2016, label %land.end2037

land.rhs2016:                                     ; preds = %if.end2012
  %1486 = load i8*, i8** %p, align 8
  %1487 = load i8, i8* %1486, align 1
  %conv2017 = sext i8 %1487 to i32
  %cmp2018 = icmp eq i32 %conv2017, 42
  br i1 %cmp2018, label %lor.end2036, label %lor.lhs.false2020

lor.lhs.false2020:                                ; preds = %land.rhs2016
  %1488 = load i8*, i8** %p, align 8
  %1489 = load i8, i8* %1488, align 1
  %conv2021 = sext i8 %1489 to i32
  %cmp2022 = icmp eq i32 %conv2021, 43
  br i1 %cmp2022, label %lor.end2036, label %lor.lhs.false2024

lor.lhs.false2024:                                ; preds = %lor.lhs.false2020
  %1490 = load i8*, i8** %p, align 8
  %1491 = load i8, i8* %1490, align 1
  %conv2025 = sext i8 %1491 to i32
  %cmp2026 = icmp eq i32 %conv2025, 63
  br i1 %cmp2026, label %lor.end2036, label %lor.rhs2028

lor.rhs2028:                                      ; preds = %lor.lhs.false2024
  %1492 = load i8*, i8** %p, align 8
  %1493 = load i8, i8* %1492, align 1
  %conv2029 = sext i8 %1493 to i32
  %cmp2030 = icmp eq i32 %conv2029, 123
  br i1 %cmp2030, label %land.rhs2032, label %land.end2035

land.rhs2032:                                     ; preds = %lor.rhs2028
  %1494 = load i8*, i8** %p, align 8
  %call2033 = call i32 @S_regcurly(i8* %1494)
  %tobool2034 = icmp ne i32 %call2033, 0
  br label %land.end2035

land.end2035:                                     ; preds = %land.rhs2032, %lor.rhs2028
  %1495 = phi i1 [ false, %lor.rhs2028 ], [ %tobool2034, %land.rhs2032 ]
  br label %lor.end2036

lor.end2036:                                      ; preds = %land.end2035, %lor.lhs.false2024, %lor.lhs.false2020, %land.rhs2016
  %1496 = phi i1 [ true, %lor.lhs.false2024 ], [ true, %lor.lhs.false2020 ], [ true, %land.rhs2016 ], [ %1495, %land.end2035 ]
  br label %land.end2037

land.end2037:                                     ; preds = %lor.end2036, %if.end2012
  %1497 = phi i1 [ false, %if.end2012 ], [ %1496, %lor.end2036 ]
  %frombool2038 = zext i1 %1497 to i8
  store i8 %frombool2038, i8* %next_is_quantifier, align 1
  br i1 %1497, label %land.lhs.true2040, label %if.end2043

land.lhs.true2040:                                ; preds = %land.end2037
  %1498 = load i64, i64* %len1389, align 8
  %tobool2041 = icmp ne i64 %1498, 0
  br i1 %tobool2041, label %if.then2042, label %if.end2043

if.then2042:                                      ; preds = %land.lhs.true2040
  %1499 = load i8*, i8** %oldp, align 8
  store i8* %1499, i8** %p, align 8
  br label %loopdone

if.end2043:                                       ; preds = %land.lhs.true2040, %land.end2037
  %1500 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2044 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1500, i32 0, i32 0
  %1501 = load i32, i32* %flags2044, align 8
  %and2045 = and i32 %1501, 4
  %tobool2046 = icmp ne i32 %and2045, 0
  br i1 %tobool2046, label %cond.true2047, label %cond.false2048

cond.true2047:                                    ; preds = %if.end2043
  br i1 true, label %if.else2123, label %if.then2049

cond.false2048:                                   ; preds = %if.end2043
  br i1 false, label %if.else2123, label %if.then2049

if.then2049:                                      ; preds = %cond.false2048, %cond.true2047
  %1502 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2050 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1502, i32 0, i32 12
  %1503 = load %struct.regnode*, %struct.regnode** %emit2050, align 8
  %1504 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2051 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1504, i32 0, i32 13
  %1505 = bitcast %struct.regnode_ssc* %emit_dummy2051 to %struct.regnode*
  %cmp2052 = icmp eq %struct.regnode* %1503, %1505
  br i1 %cmp2052, label %if.then2054, label %if.else2106

if.then2054:                                      ; preds = %if.then2049
  %1506 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82055 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1506, i32 0, i32 25
  %1507 = load i32, i32* %utf82055, align 8
  %tobool2056 = icmp ne i32 %1507, 0
  br i1 %tobool2056, label %cond.true2057, label %cond.false2058

cond.true2057:                                    ; preds = %if.then2054
  br i1 true, label %if.then2059, label %if.else2103

cond.false2058:                                   ; preds = %if.then2054
  br i1 false, label %if.then2059, label %if.else2103

if.then2059:                                      ; preds = %cond.false2058, %cond.true2057
  %1508 = load i64, i64* %ender, align 8
  %cmp2060 = icmp ult i64 %1508, 128
  br i1 %cmp2060, label %cond.true2062, label %cond.false2063

cond.true2062:                                    ; preds = %if.then2059
  br label %cond.end2097

cond.false2063:                                   ; preds = %if.then2059
  %1509 = load i64, i64* %ender, align 8
  %cmp2064 = icmp ult i64 %1509, 2048
  br i1 %cmp2064, label %cond.true2066, label %cond.false2067

cond.true2066:                                    ; preds = %cond.false2063
  br label %cond.end2095

cond.false2067:                                   ; preds = %cond.false2063
  %1510 = load i64, i64* %ender, align 8
  %cmp2068 = icmp ult i64 %1510, 65536
  br i1 %cmp2068, label %cond.true2070, label %cond.false2071

cond.true2070:                                    ; preds = %cond.false2067
  br label %cond.end2093

cond.false2071:                                   ; preds = %cond.false2067
  %1511 = load i64, i64* %ender, align 8
  %cmp2072 = icmp ult i64 %1511, 2097152
  br i1 %cmp2072, label %cond.true2074, label %cond.false2075

cond.true2074:                                    ; preds = %cond.false2071
  br label %cond.end2091

cond.false2075:                                   ; preds = %cond.false2071
  %1512 = load i64, i64* %ender, align 8
  %cmp2076 = icmp ult i64 %1512, 67108864
  br i1 %cmp2076, label %cond.true2078, label %cond.false2079

cond.true2078:                                    ; preds = %cond.false2075
  br label %cond.end2089

cond.false2079:                                   ; preds = %cond.false2075
  %1513 = load i64, i64* %ender, align 8
  %cmp2080 = icmp ult i64 %1513, 2147483648
  br i1 %cmp2080, label %cond.true2082, label %cond.false2083

cond.true2082:                                    ; preds = %cond.false2079
  br label %cond.end2087

cond.false2083:                                   ; preds = %cond.false2079
  %1514 = load i64, i64* %ender, align 8
  %cmp2084 = icmp ult i64 %1514, 68719476736
  %1515 = zext i1 %cmp2084 to i64
  %cond2086 = select i1 %cmp2084, i32 7, i32 13
  br label %cond.end2087

cond.end2087:                                     ; preds = %cond.false2083, %cond.true2082
  %cond2088 = phi i32 [ 6, %cond.true2082 ], [ %cond2086, %cond.false2083 ]
  br label %cond.end2089

cond.end2089:                                     ; preds = %cond.end2087, %cond.true2078
  %cond2090 = phi i32 [ 5, %cond.true2078 ], [ %cond2088, %cond.end2087 ]
  br label %cond.end2091

cond.end2091:                                     ; preds = %cond.end2089, %cond.true2074
  %cond2092 = phi i32 [ 4, %cond.true2074 ], [ %cond2090, %cond.end2089 ]
  br label %cond.end2093

cond.end2093:                                     ; preds = %cond.end2091, %cond.true2070
  %cond2094 = phi i32 [ 3, %cond.true2070 ], [ %cond2092, %cond.end2091 ]
  br label %cond.end2095

cond.end2095:                                     ; preds = %cond.end2093, %cond.true2066
  %cond2096 = phi i32 [ 2, %cond.true2066 ], [ %cond2094, %cond.end2093 ]
  br label %cond.end2097

cond.end2097:                                     ; preds = %cond.end2095, %cond.true2062
  %cond2098 = phi i32 [ 1, %cond.true2062 ], [ %cond2096, %cond.end2095 ]
  %conv2099 = sext i32 %cond2098 to i64
  store i64 %conv2099, i64* %unilen, align 8
  %1516 = load i64, i64* %unilen, align 8
  %1517 = load i8*, i8** %s, align 8
  %add.ptr2100 = getelementptr inbounds i8, i8* %1517, i64 %1516
  store i8* %add.ptr2100, i8** %s, align 8
  %1518 = load i64, i64* %unilen, align 8
  %sub2101 = sub i64 %1518, 1
  %1519 = load i64, i64* %len1389, align 8
  %add2102 = add i64 %1519, %sub2101
  store i64 %add2102, i64* %len1389, align 8
  br label %if.end2105

if.else2103:                                      ; preds = %cond.false2058, %cond.true2057
  %1520 = load i8*, i8** %s, align 8
  %incdec.ptr2104 = getelementptr inbounds i8, i8* %1520, i32 1
  store i8* %incdec.ptr2104, i8** %s, align 8
  br label %if.end2105

if.end2105:                                       ; preds = %if.else2103, %cond.end2097
  br label %if.end2122

if.else2106:                                      ; preds = %if.then2049
  br label %not_fold_common

not_fold_common:                                  ; preds = %if.then2206, %if.else2106
  %1521 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82107 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1521, i32 0, i32 25
  %1522 = load i32, i32* %utf82107, align 8
  %tobool2108 = icmp ne i32 %1522, 0
  br i1 %tobool2108, label %cond.true2109, label %cond.false2110

cond.true2109:                                    ; preds = %not_fold_common
  br i1 true, label %if.then2111, label %if.else2118

cond.false2110:                                   ; preds = %not_fold_common
  br i1 false, label %if.then2111, label %if.else2118

if.then2111:                                      ; preds = %cond.false2110, %cond.true2109
  %1523 = load i8*, i8** %s, align 8
  %1524 = load i64, i64* %ender, align 8
  %call2112 = call i8* @Perl_uvoffuni_to_utf8_flags(i8* %1523, i64 %1524, i64 0)
  store i8* %call2112, i8** %new_s, align 8
  %1525 = load i8*, i8** %new_s, align 8
  %1526 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast2113 = ptrtoint i8* %1525 to i64
  %sub.ptr.rhs.cast2114 = ptrtoint i8* %1526 to i64
  %sub.ptr.sub2115 = sub i64 %sub.ptr.lhs.cast2113, %sub.ptr.rhs.cast2114
  %sub2116 = sub nsw i64 %sub.ptr.sub2115, 1
  %1527 = load i64, i64* %len1389, align 8
  %add2117 = add i64 %1527, %sub2116
  store i64 %add2117, i64* %len1389, align 8
  %1528 = load i8*, i8** %new_s, align 8
  store i8* %1528, i8** %s, align 8
  br label %if.end2121

if.else2118:                                      ; preds = %cond.false2110, %cond.true2109
  %1529 = load i64, i64* %ender, align 8
  %conv2119 = trunc i64 %1529 to i8
  %1530 = load i8*, i8** %s, align 8
  %incdec.ptr2120 = getelementptr inbounds i8, i8* %1530, i32 1
  store i8* %incdec.ptr2120, i8** %s, align 8
  store i8 %conv2119, i8* %1530, align 1
  br label %if.end2121

if.end2121:                                       ; preds = %if.else2118, %if.then2111
  br label %if.end2122

if.end2122:                                       ; preds = %if.end2121, %if.end2105
  br label %if.end2309

if.else2123:                                      ; preds = %cond.false2048, %cond.true2047
  %1531 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2124 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1531, i32 0, i32 0
  %1532 = load i32, i32* %flags2124, align 8
  %call2125 = call i32 @get_regex_charset(i32 %1532)
  %cmp2126 = icmp eq i32 %call2125, 1
  br i1 %cmp2126, label %land.lhs.true2128, label %if.else2207

land.lhs.true2128:                                ; preds = %if.else2123
  %1533 = load i64, i64* %ender, align 8
  %cmp2129 = icmp ule i64 %1533, 255
  br i1 %cmp2129, label %if.then2206, label %lor.lhs.false2131

lor.lhs.false2131:                                ; preds = %land.lhs.true2128
  %1534 = load i64, i64* %ender, align 8
  %cmp2132 = icmp ult i64 255, %1534
  br i1 %cmp2132, label %land.lhs.true2134, label %if.else2207

land.lhs.true2134:                                ; preds = %lor.lhs.false2131
  %1535 = load i64, i64* %ender, align 8
  %cmp2135 = icmp eq i64 304, %1535
  br i1 %cmp2135, label %if.then2206, label %lor.lhs.false2137

lor.lhs.false2137:                                ; preds = %land.lhs.true2134
  %1536 = load i64, i64* %ender, align 8
  %cmp2138 = icmp ult i64 304, %1536
  br i1 %cmp2138, label %land.lhs.true2140, label %if.else2207

land.lhs.true2140:                                ; preds = %lor.lhs.false2137
  %1537 = load i64, i64* %ender, align 8
  %cmp2141 = icmp eq i64 329, %1537
  br i1 %cmp2141, label %if.then2206, label %lor.lhs.false2143

lor.lhs.false2143:                                ; preds = %land.lhs.true2140
  %1538 = load i64, i64* %ender, align 8
  %cmp2144 = icmp ult i64 329, %1538
  br i1 %cmp2144, label %land.lhs.true2146, label %if.else2207

land.lhs.true2146:                                ; preds = %lor.lhs.false2143
  %1539 = load i64, i64* %ender, align 8
  %cmp2147 = icmp eq i64 376, %1539
  br i1 %cmp2147, label %if.then2206, label %lor.lhs.false2149

lor.lhs.false2149:                                ; preds = %land.lhs.true2146
  %1540 = load i64, i64* %ender, align 8
  %cmp2150 = icmp ult i64 376, %1540
  br i1 %cmp2150, label %land.lhs.true2152, label %if.else2207

land.lhs.true2152:                                ; preds = %lor.lhs.false2149
  %1541 = load i64, i64* %ender, align 8
  %cmp2153 = icmp eq i64 383, %1541
  br i1 %cmp2153, label %if.then2206, label %lor.lhs.false2155

lor.lhs.false2155:                                ; preds = %land.lhs.true2152
  %1542 = load i64, i64* %ender, align 8
  %cmp2156 = icmp ult i64 383, %1542
  br i1 %cmp2156, label %land.lhs.true2158, label %if.else2207

land.lhs.true2158:                                ; preds = %lor.lhs.false2155
  %1543 = load i64, i64* %ender, align 8
  %cmp2159 = icmp eq i64 496, %1543
  br i1 %cmp2159, label %if.then2206, label %lor.lhs.false2161

lor.lhs.false2161:                                ; preds = %land.lhs.true2158
  %1544 = load i64, i64* %ender, align 8
  %cmp2162 = icmp ult i64 496, %1544
  br i1 %cmp2162, label %land.lhs.true2164, label %if.else2207

land.lhs.true2164:                                ; preds = %lor.lhs.false2161
  %1545 = load i64, i64* %ender, align 8
  %cmp2165 = icmp eq i64 924, %1545
  br i1 %cmp2165, label %if.then2206, label %lor.lhs.false2167

lor.lhs.false2167:                                ; preds = %land.lhs.true2164
  %1546 = load i64, i64* %ender, align 8
  %cmp2168 = icmp ult i64 924, %1546
  br i1 %cmp2168, label %land.lhs.true2170, label %if.else2207

land.lhs.true2170:                                ; preds = %lor.lhs.false2167
  %1547 = load i64, i64* %ender, align 8
  %cmp2171 = icmp eq i64 956, %1547
  br i1 %cmp2171, label %if.then2206, label %lor.lhs.false2173

lor.lhs.false2173:                                ; preds = %land.lhs.true2170
  %1548 = load i64, i64* %ender, align 8
  %cmp2174 = icmp ult i64 956, %1548
  br i1 %cmp2174, label %land.lhs.true2176, label %if.else2207

land.lhs.true2176:                                ; preds = %lor.lhs.false2173
  %1549 = load i64, i64* %ender, align 8
  %cmp2177 = icmp ule i64 7830, %1549
  br i1 %cmp2177, label %land.lhs.true2179, label %lor.lhs.false2182

land.lhs.true2179:                                ; preds = %land.lhs.true2176
  %1550 = load i64, i64* %ender, align 8
  %cmp2180 = icmp ule i64 %1550, 7834
  br i1 %cmp2180, label %if.then2206, label %lor.lhs.false2182

lor.lhs.false2182:                                ; preds = %land.lhs.true2179, %land.lhs.true2176
  %1551 = load i64, i64* %ender, align 8
  %cmp2183 = icmp ult i64 7834, %1551
  br i1 %cmp2183, label %land.lhs.true2185, label %if.else2207

land.lhs.true2185:                                ; preds = %lor.lhs.false2182
  %1552 = load i64, i64* %ender, align 8
  %cmp2186 = icmp eq i64 7838, %1552
  br i1 %cmp2186, label %if.then2206, label %lor.lhs.false2188

lor.lhs.false2188:                                ; preds = %land.lhs.true2185
  %1553 = load i64, i64* %ender, align 8
  %cmp2189 = icmp ult i64 7838, %1553
  br i1 %cmp2189, label %land.lhs.true2191, label %if.else2207

land.lhs.true2191:                                ; preds = %lor.lhs.false2188
  %1554 = load i64, i64* %ender, align 8
  %cmp2192 = icmp eq i64 8490, %1554
  br i1 %cmp2192, label %if.then2206, label %lor.lhs.false2194

lor.lhs.false2194:                                ; preds = %land.lhs.true2191
  %1555 = load i64, i64* %ender, align 8
  %cmp2195 = icmp ult i64 8490, %1555
  br i1 %cmp2195, label %land.lhs.true2197, label %if.else2207

land.lhs.true2197:                                ; preds = %lor.lhs.false2194
  %1556 = load i64, i64* %ender, align 8
  %cmp2198 = icmp eq i64 8491, %1556
  br i1 %cmp2198, label %if.then2206, label %lor.lhs.false2200

lor.lhs.false2200:                                ; preds = %land.lhs.true2197
  %1557 = load i64, i64* %ender, align 8
  %cmp2201 = icmp ule i64 64256, %1557
  br i1 %cmp2201, label %land.lhs.true2203, label %if.else2207

land.lhs.true2203:                                ; preds = %lor.lhs.false2200
  %1558 = load i64, i64* %ender, align 8
  %cmp2204 = icmp ule i64 %1558, 64262
  br i1 %cmp2204, label %if.then2206, label %if.else2207

if.then2206:                                      ; preds = %land.lhs.true2203, %land.lhs.true2197, %land.lhs.true2191, %land.lhs.true2185, %land.lhs.true2179, %land.lhs.true2170, %land.lhs.true2164, %land.lhs.true2158, %land.lhs.true2152, %land.lhs.true2146, %land.lhs.true2140, %land.lhs.true2134, %land.lhs.true2128
  store i8 0, i8* %maybe_exact, align 1
  store i8 0, i8* %maybe_exactfu, align 1
  br label %not_fold_common

if.else2207:                                      ; preds = %land.lhs.true2203, %lor.lhs.false2200, %lor.lhs.false2194, %lor.lhs.false2188, %lor.lhs.false2182, %lor.lhs.false2173, %lor.lhs.false2167, %lor.lhs.false2161, %lor.lhs.false2155, %lor.lhs.false2149, %lor.lhs.false2143, %lor.lhs.false2137, %lor.lhs.false2131, %if.else2123
  %1559 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82208 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1559, i32 0, i32 25
  %1560 = load i32, i32* %utf82208, align 8
  %tobool2209 = icmp ne i32 %1560, 0
  br i1 %tobool2209, label %cond.true2210, label %cond.false2211

cond.true2210:                                    ; preds = %if.else2207
  br i1 true, label %if.else2261, label %lor.lhs.false2212

cond.false2211:                                   ; preds = %if.else2207
  br i1 false, label %if.else2261, label %lor.lhs.false2212

lor.lhs.false2212:                                ; preds = %cond.false2211, %cond.true2210
  %1561 = load i8, i8* %node_type, align 1
  %conv2213 = zext i8 %1561 to i32
  %cmp2214 = icmp eq i32 %conv2213, 35
  br i1 %cmp2214, label %land.lhs.true2216, label %if.then2219

land.lhs.true2216:                                ; preds = %lor.lhs.false2212
  %1562 = load i64, i64* %ender, align 8
  %cmp2217 = icmp eq i64 %1562, 223
  br i1 %cmp2217, label %if.else2261, label %if.then2219

if.then2219:                                      ; preds = %land.lhs.true2216, %lor.lhs.false2212
  %1563 = load i64, i64* %ender, align 8
  %and2220 = and i64 %1563, -256
  %tobool2221 = icmp ne i64 %and2220, 0
  br i1 %tobool2221, label %cond.false2229, label %land.lhs.true2222

land.lhs.true2222:                                ; preds = %if.then2219
  %1564 = load i64, i64* %ender, align 8
  %conv2223 = trunc i64 %1564 to i8
  %idxprom2224 = zext i8 %conv2223 to i64
  %arrayidx2225 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2224
  %1565 = load i32, i32* %arrayidx2225, align 4
  %and2226 = and i32 %1565, 4194304
  %tobool2227 = icmp ne i32 %and2226, 0
  br i1 %tobool2227, label %cond.true2228, label %cond.false2229

cond.true2228:                                    ; preds = %land.lhs.true2222
  br i1 true, label %if.then2230, label %if.end2258

cond.false2229:                                   ; preds = %land.lhs.true2222, %if.then2219
  br i1 false, label %if.then2230, label %if.end2258

if.then2230:                                      ; preds = %cond.false2229, %cond.true2228
  store i8 0, i8* %maybe_exact, align 1
  %1566 = load i8, i8* %maybe_exactfu, align 1
  %tobool2231 = trunc i8 %1566 to i1
  br i1 %tobool2231, label %land.lhs.true2233, label %if.end2257

land.lhs.true2233:                                ; preds = %if.then2230
  %1567 = load i64, i64* %ender, align 8
  %arrayidx2234 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_fold, i64 0, i64 %1567
  %1568 = load i8, i8* %arrayidx2234, align 1
  %conv2235 = zext i8 %1568 to i32
  %1569 = load i64, i64* %ender, align 8
  %arrayidx2236 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_fold_latin1, i64 0, i64 %1569
  %1570 = load i8, i8* %arrayidx2236, align 1
  %conv2237 = zext i8 %1570 to i32
  %cmp2238 = icmp ne i32 %conv2235, %conv2237
  br i1 %cmp2238, label %if.then2256, label %lor.lhs.false2240

lor.lhs.false2240:                                ; preds = %land.lhs.true2233
  %1571 = load i64, i64* %ender, align 8
  %cmp2241 = icmp eq i64 %1571, 223
  br i1 %cmp2241, label %if.then2256, label %lor.lhs.false2243

lor.lhs.false2243:                                ; preds = %lor.lhs.false2240
  %1572 = load i64, i64* %len1389, align 8
  %cmp2244 = icmp ugt i64 %1572, 0
  br i1 %cmp2244, label %land.lhs.true2246, label %if.end2257

land.lhs.true2246:                                ; preds = %lor.lhs.false2243
  %1573 = load i64, i64* %ender, align 8
  %and2247 = and i64 %1573, -33
  %cmp2248 = icmp eq i64 %and2247, 83
  br i1 %cmp2248, label %land.lhs.true2250, label %if.end2257

land.lhs.true2250:                                ; preds = %land.lhs.true2246
  %1574 = load i8*, i8** %s, align 8
  %add.ptr2251 = getelementptr inbounds i8, i8* %1574, i64 -1
  %1575 = load i8, i8* %add.ptr2251, align 1
  %conv2252 = sext i8 %1575 to i32
  %and2253 = and i32 %conv2252, -33
  %cmp2254 = icmp eq i32 %and2253, 83
  br i1 %cmp2254, label %if.then2256, label %if.end2257

if.then2256:                                      ; preds = %land.lhs.true2250, %lor.lhs.false2240, %land.lhs.true2233
  store i8 0, i8* %maybe_exactfu, align 1
  br label %if.end2257

if.end2257:                                       ; preds = %if.then2256, %land.lhs.true2250, %land.lhs.true2246, %lor.lhs.false2243, %if.then2230
  br label %if.end2258

if.end2258:                                       ; preds = %if.end2257, %cond.false2229, %cond.true2228
  %1576 = load i64, i64* %ender, align 8
  %conv2259 = trunc i64 %1576 to i8
  %1577 = load i8*, i8** %s, align 8
  %incdec.ptr2260 = getelementptr inbounds i8, i8* %1577, i32 1
  store i8* %incdec.ptr2260, i8** %s, align 8
  store i8 %conv2259, i8* %1577, align 1
  br label %if.end2307

if.else2261:                                      ; preds = %land.lhs.true2216, %cond.false2211, %cond.true2210
  %1578 = load i64, i64* %ender, align 8
  %cmp2262 = icmp ult i64 %1578, 128
  br i1 %cmp2262, label %if.then2264, label %if.else2283

if.then2264:                                      ; preds = %if.else2261
  %1579 = load i64, i64* %ender, align 8
  %and2265 = and i64 %1579, -256
  %tobool2266 = icmp ne i64 %and2265, 0
  br i1 %tobool2266, label %cond.false2278, label %land.lhs.true2267

land.lhs.true2267:                                ; preds = %if.then2264
  %1580 = load i64, i64* %ender, align 8
  %conv2268 = trunc i64 %1580 to i8
  %idxprom2269 = zext i8 %conv2268 to i64
  %arrayidx2270 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2269
  %1581 = load i32, i32* %arrayidx2270, align 4
  %and2271 = and i32 %1581, 16400
  %cmp2272 = icmp eq i32 %and2271, 16400
  br i1 %cmp2272, label %cond.true2274, label %cond.false2278

cond.true2274:                                    ; preds = %land.lhs.true2267
  %1582 = load i64, i64* %ender, align 8
  %add2275 = add i64 %1582, 32
  %conv2276 = trunc i64 %add2275 to i8
  %conv2277 = zext i8 %conv2276 to i64
  br label %cond.end2279

cond.false2278:                                   ; preds = %land.lhs.true2267, %if.then2264
  %1583 = load i64, i64* %ender, align 8
  br label %cond.end2279

cond.end2279:                                     ; preds = %cond.false2278, %cond.true2274
  %cond2280 = phi i64 [ %conv2277, %cond.true2274 ], [ %1583, %cond.false2278 ]
  store i64 %cond2280, i64* %folded, align 8
  %1584 = load i64, i64* %folded, align 8
  %conv2281 = trunc i64 %1584 to i8
  %1585 = load i8*, i8** %s, align 8
  %incdec.ptr2282 = getelementptr inbounds i8, i8* %1585, i32 1
  store i8* %incdec.ptr2282, i8** %s, align 8
  store i8 %conv2281, i8* %1585, align 1
  br label %if.end2295

if.else2283:                                      ; preds = %if.else2261
  %1586 = load i64, i64* %ender, align 8
  %1587 = load i8*, i8** %s, align 8
  %1588 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2284 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1588, i32 0, i32 0
  %1589 = load i32, i32* %flags2284, align 8
  %call2285 = call i32 @get_regex_charset(i32 %1589)
  %cmp2286 = icmp eq i32 %call2285, 4
  %1590 = zext i1 %cmp2286 to i64
  %cond2288 = select i1 %cmp2286, i32 4, i32 0
  %or2289 = or i32 2, %cond2288
  %conv2290 = trunc i32 %or2289 to i8
  %call2291 = call i64 @Perl__to_uni_fold_flags(i64 %1586, i8* %1587, i64* %foldlen, i8 zeroext %conv2290)
  store i64 %call2291, i64* %folded, align 8
  %1591 = load i64, i64* %foldlen, align 8
  %1592 = load i8*, i8** %s, align 8
  %add.ptr2292 = getelementptr inbounds i8, i8* %1592, i64 %1591
  store i8* %add.ptr2292, i8** %s, align 8
  %1593 = load i64, i64* %foldlen, align 8
  %sub2293 = sub i64 %1593, 1
  %1594 = load i64, i64* %len1389, align 8
  %add2294 = add i64 %1594, %sub2293
  store i64 %add2294, i64* %len1389, align 8
  br label %if.end2295

if.end2295:                                       ; preds = %if.else2283, %cond.end2279
  %1595 = load i8, i8* %maybe_exact, align 1
  %tobool2296 = trunc i8 %1595 to i1
  br i1 %tobool2296, label %if.then2297, label %if.end2306

if.then2297:                                      ; preds = %if.end2295
  %1596 = load i64, i64* %folded, align 8
  %1597 = load i64, i64* %ender, align 8
  %cmp2298 = icmp ne i64 %1596, %1597
  br i1 %cmp2298, label %if.then2300, label %if.else2301

if.then2300:                                      ; preds = %if.then2297
  store i8 0, i8* %maybe_exact, align 1
  br label %if.end2305

if.else2301:                                      ; preds = %if.then2297
  %1598 = load %struct.sv*, %struct.sv** @PL_utf8_foldable, align 8
  %1599 = load i64, i64* %ender, align 8
  %call2302 = call zeroext i1 @S__invlist_contains_cp(%struct.sv* %1598, i64 %1599)
  br i1 %call2302, label %if.then2303, label %if.end2304

if.then2303:                                      ; preds = %if.else2301
  store i8 0, i8* %maybe_exact, align 1
  br label %if.end2304

if.end2304:                                       ; preds = %if.then2303, %if.else2301
  br label %if.end2305

if.end2305:                                       ; preds = %if.end2304, %if.then2300
  br label %if.end2306

if.end2306:                                       ; preds = %if.end2305, %if.end2295
  %1600 = load i64, i64* %folded, align 8
  store i64 %1600, i64* %ender, align 8
  br label %if.end2307

if.end2307:                                       ; preds = %if.end2306, %if.end2258
  br label %if.end2308

if.end2308:                                       ; preds = %if.end2307
  br label %if.end2309

if.end2309:                                       ; preds = %if.end2308, %if.end2122
  %1601 = load i8, i8* %next_is_quantifier, align 1
  %tobool2310 = trunc i8 %1601 to i1
  br i1 %tobool2310, label %if.then2311, label %if.end2313

if.then2311:                                      ; preds = %if.end2309
  %1602 = load i64, i64* %len1389, align 8
  %inc2312 = add i64 %1602, 1
  store i64 %inc2312, i64* %len1389, align 8
  br label %loopdone

if.end2313:                                       ; preds = %if.end2309
  br label %for.inc

for.inc:                                          ; preds = %if.end2313
  %1603 = load i64, i64* %len1389, align 8
  %inc2314 = add i64 %1603, 1
  store i64 %inc2314, i64* %len1389, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end1438
  %1604 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2315 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1604, i32 0, i32 0
  %1605 = load i32, i32* %flags2315, align 8
  %and2316 = and i32 %1605, 4
  %tobool2317 = icmp ne i32 %and2316, 0
  br i1 %tobool2317, label %cond.true2318, label %cond.false2319

cond.true2318:                                    ; preds = %for.end
  br i1 true, label %land.lhs.true2320, label %if.end2483

cond.false2319:                                   ; preds = %for.end
  br i1 false, label %land.lhs.true2320, label %if.end2483

land.lhs.true2320:                                ; preds = %cond.false2319, %cond.true2318
  %1606 = load i8*, i8** %p, align 8
  %1607 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2321 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1607, i32 0, i32 7
  %1608 = load i8*, i8** %end2321, align 8
  %cmp2322 = icmp ult i8* %1606, %1608
  br i1 %cmp2322, label %land.lhs.true2324, label %if.end2483

land.lhs.true2324:                                ; preds = %land.lhs.true2320
  %1609 = load i8, i8* %upper_parse, align 1
  %conv2325 = zext i8 %1609 to i32
  %cmp2326 = icmp eq i32 %conv2325, 127
  br i1 %cmp2326, label %if.then2328, label %if.end2483

if.then2328:                                      ; preds = %land.lhs.true2324
  %1610 = load i64, i64* %len1389, align 8
  store i64 %1610, i64* %full_len, align 8
  %1611 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82329 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1611, i32 0, i32 25
  %1612 = load i32, i32* %utf82329, align 8
  %tobool2330 = icmp ne i32 %1612, 0
  br i1 %tobool2330, label %cond.true2331, label %cond.false2332

cond.true2331:                                    ; preds = %if.then2328
  br i1 true, label %if.else2358, label %if.then2333

cond.false2332:                                   ; preds = %if.then2328
  br i1 false, label %if.else2358, label %if.then2333

if.then2333:                                      ; preds = %cond.false2332, %cond.true2331
  %1613 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2334 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1613, i32 0, i32 0
  %1614 = load i32, i32* %flags2334, align 8
  %call2335 = call i32 @get_regex_charset(i32 %1614)
  %cmp2336 = icmp eq i32 %call2335, 4
  br i1 %cmp2336, label %if.then2338, label %if.end2339

if.then2338:                                      ; preds = %if.then2333
  br label %loopdone

if.end2339:                                       ; preds = %if.then2333
  br label %while.cond2340

while.cond2340:                                   ; preds = %while.body2352, %if.end2339
  %1615 = load i8*, i8** %s, align 8
  %incdec.ptr2341 = getelementptr inbounds i8, i8* %1615, i32 -1
  store i8* %incdec.ptr2341, i8** %s, align 8
  %1616 = load i8*, i8** %s0, align 8
  %cmp2342 = icmp uge i8* %incdec.ptr2341, %1616
  br i1 %cmp2342, label %land.rhs2344, label %land.end2351

land.rhs2344:                                     ; preds = %while.cond2340
  %1617 = load i8*, i8** %s, align 8
  %1618 = load i8, i8* %1617, align 1
  %idxprom2345 = zext i8 %1618 to i64
  %arrayidx2346 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2345
  %1619 = load i32, i32* %arrayidx2346, align 4
  %and2347 = and i32 %1619, 2097152
  %tobool2348 = icmp ne i32 %and2347, 0
  %1620 = zext i1 %tobool2348 to i64
  %cond2349 = select i1 %tobool2348, i32 1, i32 0
  %tobool2350 = icmp ne i32 %cond2349, 0
  br label %land.end2351

land.end2351:                                     ; preds = %land.rhs2344, %while.cond2340
  %1621 = phi i1 [ false, %while.cond2340 ], [ %tobool2350, %land.rhs2344 ]
  br i1 %1621, label %while.body2352, label %while.end2353

while.body2352:                                   ; preds = %land.end2351
  br label %while.cond2340

while.end2353:                                    ; preds = %land.end2351
  %1622 = load i8*, i8** %s, align 8
  %1623 = load i8*, i8** %s0, align 8
  %sub.ptr.lhs.cast2354 = ptrtoint i8* %1622 to i64
  %sub.ptr.rhs.cast2355 = ptrtoint i8* %1623 to i64
  %sub.ptr.sub2356 = sub i64 %sub.ptr.lhs.cast2354, %sub.ptr.rhs.cast2355
  %add2357 = add nsw i64 %sub.ptr.sub2356, 1
  store i64 %add2357, i64* %len1389, align 8
  br label %if.end2446

if.else2358:                                      ; preds = %cond.false2332, %cond.true2331
  %1624 = load %struct.sv*, %struct.sv** @PL_NonL1NonFinalFold, align 8
  %tobool2359 = icmp ne %struct.sv* %1624, null
  br i1 %tobool2359, label %if.end2362, label %if.then2360

if.then2360:                                      ; preds = %if.else2358
  %call2361 = call %struct.sv* @Perl__new_invlist_C_array(i64* getelementptr inbounds ([48 x i64], [48 x i64]* @NonL1_Perl_Non_Final_Folds_invlist, i64 0, i64 0))
  store %struct.sv* %call2361, %struct.sv** @PL_NonL1NonFinalFold, align 8
  br label %if.end2362

if.end2362:                                       ; preds = %if.then2360, %if.else2358
  %1625 = load i8*, i8** %s, align 8
  %call2363 = call i8* @Perl_utf8_hop(i8* %1625, i32 -1)
  store i8* %call2363, i8** %s, align 8
  br label %while.cond2364

while.cond2364:                                   ; preds = %cond.end2430, %if.end2362
  %1626 = load i8*, i8** %s, align 8
  %1627 = load i8*, i8** %s0, align 8
  %cmp2365 = icmp uge i8* %1626, %1627
  br i1 %cmp2365, label %while.body2367, label %while.end2432

while.body2367:                                   ; preds = %while.cond2364
  %1628 = load i8*, i8** %s, align 8
  %1629 = load i8, i8* %1628, align 1
  %conv2368 = sext i8 %1629 to i64
  %cmp2369 = icmp ult i64 %conv2368, 128
  br i1 %cmp2369, label %if.then2371, label %if.else2385

if.then2371:                                      ; preds = %while.body2367
  %1630 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2372 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1630, i32 0, i32 0
  %1631 = load i32, i32* %flags2372, align 8
  %call2373 = call i32 @get_regex_charset(i32 %1631)
  %cmp2374 = icmp eq i32 %call2373, 4
  br i1 %cmp2374, label %if.then2383, label %lor.lhs.false2376

lor.lhs.false2376:                                ; preds = %if.then2371
  %1632 = load i8*, i8** %s, align 8
  %1633 = load i8, i8* %1632, align 1
  %idxprom2377 = zext i8 %1633 to i64
  %arrayidx2378 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2377
  %1634 = load i32, i32* %arrayidx2378, align 4
  %and2379 = and i32 %1634, 2097152
  %tobool2380 = icmp ne i32 %and2379, 0
  br i1 %tobool2380, label %cond.true2381, label %cond.false2382

cond.true2381:                                    ; preds = %lor.lhs.false2376
  br i1 true, label %if.end2384, label %if.then2383

cond.false2382:                                   ; preds = %lor.lhs.false2376
  br i1 false, label %if.end2384, label %if.then2383

if.then2383:                                      ; preds = %cond.false2382, %cond.true2381, %if.then2371
  br label %while.end2432

if.end2384:                                       ; preds = %cond.false2382, %cond.true2381
  br label %if.end2423

if.else2385:                                      ; preds = %while.body2367
  %1635 = load i8*, i8** %s, align 8
  %1636 = load i8, i8* %1635, align 1
  %conv2386 = zext i8 %1636 to i32
  %and2387 = and i32 %conv2386, 254
  %cmp2388 = icmp eq i32 %and2387, 194
  br i1 %cmp2388, label %if.then2390, label %if.else2417

if.then2390:                                      ; preds = %if.else2385
  %1637 = load i8*, i8** %s, align 8
  %1638 = load i8, i8* %1637, align 1
  %conv2391 = sext i8 %1638 to i32
  %and2392 = and i32 %conv2391, 31
  %shl = shl i32 %and2392, 6
  %1639 = load i8*, i8** %s, align 8
  %add.ptr2393 = getelementptr inbounds i8, i8* %1639, i64 1
  %1640 = load i8, i8* %add.ptr2393, align 1
  %conv2394 = zext i8 %1640 to i32
  %and2395 = and i32 %conv2394, 63
  %or2396 = or i32 %shl, %and2395
  %conv2397 = sext i32 %or2396 to i64
  %and2398 = and i64 %conv2397, -256
  %tobool2399 = icmp ne i64 %and2398, 0
  br i1 %tobool2399, label %cond.false2414, label %land.lhs.true2400

land.lhs.true2400:                                ; preds = %if.then2390
  %1641 = load i8*, i8** %s, align 8
  %1642 = load i8, i8* %1641, align 1
  %conv2401 = sext i8 %1642 to i32
  %and2402 = and i32 %conv2401, 31
  %shl2403 = shl i32 %and2402, 6
  %1643 = load i8*, i8** %s, align 8
  %add.ptr2404 = getelementptr inbounds i8, i8* %1643, i64 1
  %1644 = load i8, i8* %add.ptr2404, align 1
  %conv2405 = zext i8 %1644 to i32
  %and2406 = and i32 %conv2405, 63
  %or2407 = or i32 %shl2403, %and2406
  %conv2408 = trunc i32 %or2407 to i8
  %idxprom2409 = zext i8 %conv2408 to i64
  %arrayidx2410 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2409
  %1645 = load i32, i32* %arrayidx2410, align 4
  %and2411 = and i32 %1645, 2097152
  %tobool2412 = icmp ne i32 %and2411, 0
  br i1 %tobool2412, label %cond.true2413, label %cond.false2414

cond.true2413:                                    ; preds = %land.lhs.true2400
  br i1 true, label %if.end2416, label %if.then2415

cond.false2414:                                   ; preds = %land.lhs.true2400, %if.then2390
  br i1 false, label %if.end2416, label %if.then2415

if.then2415:                                      ; preds = %cond.false2414, %cond.true2413
  br label %while.end2432

if.end2416:                                       ; preds = %cond.false2414, %cond.true2413
  br label %if.end2422

if.else2417:                                      ; preds = %if.else2385
  %1646 = load %struct.sv*, %struct.sv** @PL_NonL1NonFinalFold, align 8
  %1647 = load i8*, i8** %s, align 8
  %call2418 = call i64 @Perl_valid_utf8_to_uvchr(i8* %1647, i64* null)
  %call2419 = call zeroext i1 @S__invlist_contains_cp(%struct.sv* %1646, i64 %call2418)
  br i1 %call2419, label %if.end2421, label %if.then2420

if.then2420:                                      ; preds = %if.else2417
  br label %while.end2432

if.end2421:                                       ; preds = %if.else2417
  br label %if.end2422

if.end2422:                                       ; preds = %if.end2421, %if.end2416
  br label %if.end2423

if.end2423:                                       ; preds = %if.end2422, %if.end2384
  %1648 = load i8*, i8** %s, align 8
  %1649 = load i8*, i8** %s0, align 8
  %cmp2424 = icmp eq i8* %1648, %1649
  br i1 %cmp2424, label %cond.true2426, label %cond.false2428

cond.true2426:                                    ; preds = %if.end2423
  %1650 = load i8*, i8** %s, align 8
  %add.ptr2427 = getelementptr inbounds i8, i8* %1650, i64 -1
  br label %cond.end2430

cond.false2428:                                   ; preds = %if.end2423
  %1651 = load i8*, i8** %s, align 8
  %call2429 = call i8* @Perl_utf8_hop(i8* %1651, i32 -1)
  br label %cond.end2430

cond.end2430:                                     ; preds = %cond.false2428, %cond.true2426
  %cond2431 = phi i8* [ %add.ptr2427, %cond.true2426 ], [ %call2429, %cond.false2428 ]
  store i8* %cond2431, i8** %s, align 8
  br label %while.cond2364

while.end2432:                                    ; preds = %if.then2420, %if.then2415, %if.then2383, %while.cond2364
  %1652 = load i8*, i8** %s, align 8
  %1653 = load i8*, i8** %s0, align 8
  %cmp2433 = icmp ult i8* %1652, %1653
  br i1 %cmp2433, label %cond.true2435, label %cond.false2436

cond.true2435:                                    ; preds = %while.end2432
  br label %cond.end2444

cond.false2436:                                   ; preds = %while.end2432
  %1654 = load i8*, i8** %s, align 8
  %1655 = load i8*, i8** %s0, align 8
  %sub.ptr.lhs.cast2437 = ptrtoint i8* %1654 to i64
  %sub.ptr.rhs.cast2438 = ptrtoint i8* %1655 to i64
  %sub.ptr.sub2439 = sub i64 %sub.ptr.lhs.cast2437, %sub.ptr.rhs.cast2438
  %1656 = load i8*, i8** %s, align 8
  %1657 = load i8, i8* %1656, align 1
  %idxprom2440 = zext i8 %1657 to i64
  %arrayidx2441 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom2440
  %1658 = load i8, i8* %arrayidx2441, align 1
  %conv2442 = zext i8 %1658 to i64
  %add2443 = add nsw i64 %sub.ptr.sub2439, %conv2442
  br label %cond.end2444

cond.end2444:                                     ; preds = %cond.false2436, %cond.true2435
  %cond2445 = phi i64 [ 0, %cond.true2435 ], [ %add2443, %cond.false2436 ]
  store i64 %cond2445, i64* %len1389, align 8
  br label %if.end2446

if.end2446:                                       ; preds = %cond.end2444, %while.end2353
  %1659 = load i64, i64* %len1389, align 8
  %cmp2447 = icmp eq i64 %1659, 0
  br i1 %cmp2447, label %if.then2449, label %if.else2458

if.then2449:                                      ; preds = %if.end2446
  %1660 = load i64, i64* %full_len, align 8
  store i64 %1660, i64* %len1389, align 8
  %1661 = load i8, i8* %maybe_exactfu, align 1
  %tobool2450 = trunc i8 %1661 to i1
  br i1 %tobool2450, label %land.lhs.true2452, label %if.end2457

land.lhs.true2452:                                ; preds = %if.then2449
  %1662 = load i64, i64* %ender, align 8
  %and2453 = and i64 %1662, -33
  %cmp2454 = icmp eq i64 %and2453, 83
  br i1 %cmp2454, label %if.then2456, label %if.end2457

if.then2456:                                      ; preds = %land.lhs.true2452
  store i8 0, i8* %maybe_exactfu, align 1
  br label %if.end2457

if.end2457:                                       ; preds = %if.then2456, %land.lhs.true2452, %if.then2449
  br label %if.end2482

if.else2458:                                      ; preds = %if.end2446
  %1663 = load i64, i64* %len1389, align 8
  %1664 = load i64, i64* %full_len, align 8
  %cmp2459 = icmp eq i64 %1663, %1664
  br i1 %cmp2459, label %if.then2461, label %if.else2462

if.then2461:                                      ; preds = %if.else2458
  br label %loopdone

if.else2462:                                      ; preds = %if.else2458
  %1665 = load i64, i64* %len1389, align 8
  %1666 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82463 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1666, i32 0, i32 25
  %1667 = load i32, i32* %utf82463, align 8
  %tobool2464 = icmp ne i32 %1667, 0
  br i1 %tobool2464, label %cond.true2465, label %cond.false2466

cond.true2465:                                    ; preds = %if.else2462
  br i1 true, label %cond.true2467, label %cond.false2471

cond.false2466:                                   ; preds = %if.else2462
  br i1 false, label %cond.true2467, label %cond.false2471

cond.true2467:                                    ; preds = %cond.false2466, %cond.true2465
  %1668 = load i8*, i8** %s, align 8
  %1669 = load i8, i8* %1668, align 1
  %idxprom2468 = zext i8 %1669 to i64
  %arrayidx2469 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom2468
  %1670 = load i8, i8* %arrayidx2469, align 1
  %conv2470 = zext i8 %1670 to i32
  br label %cond.end2472

cond.false2471:                                   ; preds = %cond.false2466, %cond.true2465
  br label %cond.end2472

cond.end2472:                                     ; preds = %cond.false2471, %cond.true2467
  %cond2473 = phi i32 [ %conv2470, %cond.true2467 ], [ 1, %cond.false2471 ]
  %conv2474 = sext i32 %cond2473 to i64
  %add2475 = add i64 %1665, %conv2474
  %1671 = load i64, i64* %full_len, align 8
  %cmp2476 = icmp eq i64 %add2475, %1671
  br i1 %cmp2476, label %if.then2478, label %if.end2479

if.then2478:                                      ; preds = %cond.end2472
  %1672 = load i8*, i8** %oldp, align 8
  store i8* %1672, i8** %p, align 8
  br label %loopdone

if.end2479:                                       ; preds = %cond.end2472
  br label %if.end2480

if.end2480:                                       ; preds = %if.end2479
  %1673 = load i64, i64* %len1389, align 8
  %conv2481 = trunc i64 %1673 to i8
  store i8 %conv2481, i8* %upper_parse, align 1
  store i64 0, i64* %len1389, align 8
  %1674 = load i8*, i8** %s0, align 8
  store i8* %1674, i8** %s, align 8
  br label %reparse

if.end2482:                                       ; preds = %if.end2457
  br label %if.end2483

if.end2483:                                       ; preds = %if.end2482, %land.lhs.true2324, %land.lhs.true2320, %cond.false2319, %cond.true2318
  br label %loopdone

loopdone:                                         ; preds = %if.end2483, %if.then2478, %if.then2461, %if.then2338, %if.then2311, %if.then2042, %if.then1718, %sw.bb1703, %if.end1488, %sw.bb1450, %sw.bb1446
  %1675 = load i64, i64* %len1389, align 8
  %cmp2484 = icmp eq i64 %1675, 0
  br i1 %cmp2484, label %if.then2486, label %if.else2488

if.then2486:                                      ; preds = %loopdone
  %1676 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %type2487 = getelementptr inbounds %struct.regnode, %struct.regnode* %1676, i32 0, i32 1
  store i8 40, i8* %type2487, align 1
  br label %if.end2517

if.else2488:                                      ; preds = %loopdone
  %1677 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2489 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1677, i32 0, i32 0
  %1678 = load i32, i32* %flags2489, align 8
  %and2490 = and i32 %1678, 4
  %tobool2491 = icmp ne i32 %and2490, 0
  br i1 %tobool2491, label %cond.true2492, label %cond.false2493

cond.true2492:                                    ; preds = %if.else2488
  br i1 true, label %if.then2494, label %if.end2516

cond.false2493:                                   ; preds = %if.else2488
  br i1 false, label %if.then2494, label %if.end2516

if.then2494:                                      ; preds = %cond.false2493, %cond.true2492
  %1679 = load i8, i8* %maybe_exact, align 1
  %tobool2495 = trunc i8 %1679 to i1
  br i1 %tobool2495, label %if.then2496, label %if.else2504

if.then2496:                                      ; preds = %if.then2494
  %1680 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2497 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1680, i32 0, i32 0
  %1681 = load i32, i32* %flags2497, align 8
  %call2498 = call i32 @get_regex_charset(i32 %1681)
  %cmp2499 = icmp eq i32 %call2498, 1
  %1682 = zext i1 %cmp2499 to i64
  %cond2501 = select i1 %cmp2499, i32 32, i32 31
  %conv2502 = trunc i32 %cond2501 to i8
  %1683 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %type2503 = getelementptr inbounds %struct.regnode, %struct.regnode* %1683, i32 0, i32 1
  store i8 %conv2502, i8* %type2503, align 1
  br label %if.end2515

if.else2504:                                      ; preds = %if.then2494
  %1684 = load i8, i8* %maybe_exactfu, align 1
  %tobool2505 = trunc i8 %1684 to i1
  br i1 %tobool2505, label %if.then2506, label %if.end2514

if.then2506:                                      ; preds = %if.else2504
  %1685 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2507 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1685, i32 0, i32 0
  %1686 = load i32, i32* %flags2507, align 8
  %call2508 = call i32 @get_regex_charset(i32 %1686)
  %cmp2509 = icmp eq i32 %call2508, 1
  %1687 = zext i1 %cmp2509 to i64
  %cond2511 = select i1 %cmp2509, i32 38, i32 35
  %conv2512 = trunc i32 %cond2511 to i8
  %1688 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %type2513 = getelementptr inbounds %struct.regnode, %struct.regnode* %1688, i32 0, i32 1
  store i8 %conv2512, i8* %type2513, align 1
  br label %if.end2514

if.end2514:                                       ; preds = %if.then2506, %if.else2504
  br label %if.end2515

if.end2515:                                       ; preds = %if.end2514, %if.then2496
  br label %if.end2516

if.end2516:                                       ; preds = %if.end2515, %cond.false2493, %cond.true2492
  %1689 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1690 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1691 = load i32*, i32** %flagp.addr, align 8
  %1692 = load i64, i64* %len1389, align 8
  %1693 = load i64, i64* %ender, align 8
  call void @S_alloc_maybe_populate_EXACT(%struct.RExC_state_t* %1689, %struct.regnode* %1690, i32* %1691, i64 %1692, i64 %1693, i1 zeroext false)
  br label %if.end2517

if.end2517:                                       ; preds = %if.end2516, %if.then2486
  %1694 = load i8*, i8** %p, align 8
  %add.ptr2518 = getelementptr inbounds i8, i8* %1694, i64 -1
  %1695 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2519 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1695, i32 0, i32 8
  store i8* %add.ptr2518, i8** %parse2519, align 8
  %1696 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call2520 = call i8* @S_nextchar(%struct.RExC_state_t* %1696)
  %1697 = load i64, i64* %len1389, align 8
  store i64 %1697, i64* %iv, align 8
  %1698 = load i64, i64* %iv, align 8
  %cmp2521 = icmp slt i64 %1698, 0
  br i1 %cmp2521, label %if.then2523, label %if.end2569

if.then2523:                                      ; preds = %if.end2517
  br label %do.body2524

do.body2524:                                      ; preds = %if.then2523
  %1699 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2525 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1699, i32 0, i32 12
  %1700 = load %struct.regnode*, %struct.regnode** %emit2525, align 8
  %1701 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2526 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1701, i32 0, i32 13
  %1702 = bitcast %struct.regnode_ssc* %emit_dummy2526 to %struct.regnode*
  %cmp2527 = icmp eq %struct.regnode* %1700, %1702
  br i1 %cmp2527, label %if.end2531, label %if.then2529

if.then2529:                                      ; preds = %do.body2524
  %1703 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv2530 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1703, i32 0, i32 3
  %1704 = load %struct.p5rx*, %struct.p5rx** %rx_sv2530, align 8
  %1705 = bitcast %struct.p5rx* %1704 to i8*
  %1706 = bitcast i8* %1705 to %struct.sv*
  %1707 = bitcast %struct.sv* %1706 to i8*
  call void @Perl_save_pushptr(i8* %1707, i32 11)
  br label %if.end2531

if.end2531:                                       ; preds = %if.then2529, %do.body2524
  br label %do.body2532

do.body2532:                                      ; preds = %if.end2531
  %1708 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2534 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1708, i32 0, i32 8
  %1709 = load i8*, i8** %parse2534, align 8
  %1710 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2535 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1710, i32 0, i32 7
  %1711 = load i8*, i8** %end2535, align 8
  %cmp2536 = icmp ugt i8* %1709, %1711
  br i1 %cmp2536, label %cond.true2538, label %cond.false2540

cond.true2538:                                    ; preds = %do.body2532
  %1712 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2539 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1712, i32 0, i32 7
  %1713 = load i8*, i8** %end2539, align 8
  br label %cond.end2542

cond.false2540:                                   ; preds = %do.body2532
  %1714 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2541 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1714, i32 0, i32 8
  %1715 = load i8*, i8** %parse2541, align 8
  br label %cond.end2542

cond.end2542:                                     ; preds = %cond.false2540, %cond.true2538
  %cond2543 = phi i8* [ %1713, %cond.true2538 ], [ %1715, %cond.false2540 ]
  %1716 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2544 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1716, i32 0, i32 2
  %1717 = load i8*, i8** %precomp2544, align 8
  %sub.ptr.lhs.cast2545 = ptrtoint i8* %cond2543 to i64
  %sub.ptr.rhs.cast2546 = ptrtoint i8* %1717 to i64
  %sub.ptr.sub2547 = sub i64 %sub.ptr.lhs.cast2545, %sub.ptr.rhs.cast2546
  store i64 %sub.ptr.sub2547, i64* %offset2533, align 8
  %1718 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82548 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1718, i32 0, i32 25
  %1719 = load i32, i32* %utf82548, align 8
  %tobool2549 = icmp ne i32 %1719, 0
  %1720 = zext i1 %tobool2549 to i64
  %cond2550 = select i1 %tobool2549, i32 1, i32 0
  %tobool2551 = icmp ne i32 %cond2550, 0
  %1721 = zext i1 %tobool2551 to i64
  %cond2552 = select i1 %tobool2551, i32 1, i32 0
  %1722 = load i64, i64* %offset2533, align 8
  %1723 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2553 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1723, i32 0, i32 2
  %1724 = load i8*, i8** %precomp2553, align 8
  %1725 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82554 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1725, i32 0, i32 25
  %1726 = load i32, i32* %utf82554, align 8
  %tobool2555 = icmp ne i32 %1726, 0
  %1727 = zext i1 %tobool2555 to i64
  %cond2556 = select i1 %tobool2555, i32 1, i32 0
  %tobool2557 = icmp ne i32 %cond2556, 0
  %1728 = zext i1 %tobool2557 to i64
  %cond2558 = select i1 %tobool2557, i32 1, i32 0
  %1729 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2559 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1729, i32 0, i32 7
  %1730 = load i8*, i8** %end2559, align 8
  %1731 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2560 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1731, i32 0, i32 2
  %1732 = load i8*, i8** %precomp2560, align 8
  %sub.ptr.lhs.cast2561 = ptrtoint i8* %1730 to i64
  %sub.ptr.rhs.cast2562 = ptrtoint i8* %1732 to i64
  %sub.ptr.sub2563 = sub i64 %sub.ptr.lhs.cast2561, %sub.ptr.rhs.cast2562
  %1733 = load i64, i64* %offset2533, align 8
  %sub2564 = sub nsw i64 %sub.ptr.sub2563, %1733
  %1734 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2565 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1734, i32 0, i32 2
  %1735 = load i8*, i8** %precomp2565, align 8
  %1736 = load i64, i64* %offset2533, align 8
  %add.ptr2566 = getelementptr inbounds i8, i8* %1735, i64 %1736
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.307, i64 0, i64 0), i32 %cond2552, i64 %1722, i8* %1724, i32 %cond2558, i64 %sub2564, i8* %add.ptr2566)
  br label %do.end2567

do.end2567:                                       ; preds = %cond.end2542
  br label %do.end2568

do.end2568:                                       ; preds = %do.end2567
  br label %if.end2569

if.end2569:                                       ; preds = %do.end2568, %if.end2517
  br label %sw.epilog2570

sw.epilog2570:                                    ; preds = %if.end2569, %sw.epilog1368, %do.end258, %do.end210, %if.end157, %if.end106, %if.end34, %if.end20, %if.end
  %1737 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %1737, %struct.regnode** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog2570, %if.then1846, %if.then1732, %if.then1689, %if.then1599, %if.then1500, %if.then719, %if.then163, %if.then128, %if.then122, %if.then79
  %1738 = load %struct.regnode*, %struct.regnode** %retval, align 8
  ret %struct.regnode* %1738
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_regcurly(i8* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8
  %0 = load i8*, i8** %s.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 123
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %4 = load i32, i32* %arrayidx, align 4
  %and = and i32 %4, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br i1 true, label %if.end3, label %if.then2

cond.false:                                       ; preds = %if.end
  br i1 false, label %if.end3, label %if.then2

if.then2:                                         ; preds = %cond.false, %cond.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %cond.false, %cond.true
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end3
  %5 = load i8*, i8** %s.addr, align 8
  %6 = load i8, i8* %5, align 1
  %idxprom4 = zext i8 %6 to i64
  %arrayidx5 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom4
  %7 = load i32, i32* %arrayidx5, align 4
  %and6 = and i32 %7, 2
  %tobool7 = icmp ne i32 %and6, 0
  %8 = zext i1 %tobool7 to i64
  %cond = select i1 %tobool7, i32 1, i32 0
  %tobool8 = icmp ne i32 %cond, 0
  br i1 %tobool8, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %s.addr, align 8
  %incdec.ptr9 = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr9, i8** %s.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i8*, i8** %s.addr, align 8
  %11 = load i8, i8* %10, align 1
  %conv10 = sext i8 %11 to i32
  %cmp11 = icmp eq i32 %conv10, 44
  br i1 %cmp11, label %if.then13, label %if.end25

if.then13:                                        ; preds = %while.end
  %12 = load i8*, i8** %s.addr, align 8
  %incdec.ptr14 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr14, i8** %s.addr, align 8
  br label %while.cond15

while.cond15:                                     ; preds = %while.body22, %if.then13
  %13 = load i8*, i8** %s.addr, align 8
  %14 = load i8, i8* %13, align 1
  %idxprom16 = zext i8 %14 to i64
  %arrayidx17 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom16
  %15 = load i32, i32* %arrayidx17, align 4
  %and18 = and i32 %15, 2
  %tobool19 = icmp ne i32 %and18, 0
  %16 = zext i1 %tobool19 to i64
  %cond20 = select i1 %tobool19, i32 1, i32 0
  %tobool21 = icmp ne i32 %cond20, 0
  br i1 %tobool21, label %while.body22, label %while.end24

while.body22:                                     ; preds = %while.cond15
  %17 = load i8*, i8** %s.addr, align 8
  %incdec.ptr23 = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr23, i8** %s.addr, align 8
  br label %while.cond15

while.end24:                                      ; preds = %while.cond15
  br label %if.end25

if.end25:                                         ; preds = %while.end24, %while.end
  %18 = load i8*, i8** %s.addr, align 8
  %19 = load i8, i8* %18, align 1
  %conv26 = sext i8 %19 to i32
  %cmp27 = icmp eq i32 %conv26, 125
  %conv28 = zext i1 %cmp27 to i32
  store i32 %conv28, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end25, %if.then2, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.regnode* @S_regclass(%struct.RExC_state_t* %pRExC_state, i32* %flagp, i32 %depth, i1 zeroext %stop_at_1, i1 zeroext %allow_multi_folds, i1 zeroext %silence_non_portable, i1 zeroext %strict, %struct.sv** %ret_invlist) #0 {
entry:
  %retval = alloca %struct.regnode*, align 8
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %flagp.addr = alloca i32*, align 8
  %depth.addr = alloca i32, align 4
  %stop_at_1.addr = alloca i8, align 1
  %allow_multi_folds.addr = alloca i8, align 1
  %silence_non_portable.addr = alloca i8, align 1
  %strict.addr = alloca i8, align 1
  %ret_invlist.addr = alloca %struct.sv**, align 8
  %prevvalue = alloca i64, align 8
  %save_prevvalue = alloca i64, align 8
  %range = alloca i64, align 8
  %value = alloca i64, align 8
  %save_value = alloca i64, align 8
  %ret = alloca %struct.regnode*, align 8
  %numlen = alloca i64, align 8
  %namedclass = alloca i64, align 8
  %rangebegin = alloca i8*, align 8
  %need_class = alloca i8, align 1
  %listsv = alloca %struct.sv*, align 8
  %initial_listsv_len = alloca i64, align 8
  %properties = alloca %struct.sv*, align 8
  %posixes = alloca %struct.sv*, align 8
  %nposixes = alloca %struct.sv*, align 8
  %simple_posixes = alloca %struct.sv*, align 8
  %element_count = alloca i64, align 8
  %multi_char_matches = alloca %struct.av*, align 8
  %n = alloca i64, align 8
  %stop_ptr = alloca i8*, align 8
  %skip_white = alloca i8, align 1
  %swash = alloca %struct.sv*, align 8
  %has_user_defined_property = alloca i8, align 1
  %depends_list = alloca %struct.sv*, align 8
  %cp_list = alloca %struct.sv*, align 8
  %cp_foldable_list = alloca %struct.sv*, align 8
  %only_utf8_locale_list = alloca %struct.sv*, align 8
  %non_portable_endpoint = alloca i32, align 4
  %unicode_range = alloca i8, align 1
  %invert = alloca i8, align 1
  %warn_super = alloca i8, align 1
  %orig_emit = alloca %struct.regnode*, align 8
  %orig_parse = alloca i8*, align 8
  %orig_size = alloca i64, align 8
  %posixl_matches_all = alloca i8, align 1
  %s = alloca i8*, align 8
  %c = alloca i8, align 1
  %offset = alloca i64, align 8
  %backslash_N_beg = alloca i8*, align 8
  %cp_count = alloca i32, align 4
  %ellipses = alloca i8*, align 8
  %len = alloca i64, align 8
  %offset371 = alloca i64, align 8
  %offset423 = alloca i64, align 8
  %offset466 = alloca i64, align 8
  %offset520 = alloca i64, align 8
  %offset563 = alloca i64, align 8
  %multi_char_N = alloca %struct.sv*, align 8
  %e = alloca i8*, align 8
  %swash_init_flags = alloca i8, align 1
  %offset619 = alloca i64, align 8
  %c658 = alloca i8, align 1
  %offset674 = alloca i64, align 8
  %offset731 = alloca i64, align 8
  %invlist = alloca %struct.sv*, align 8
  %name = alloca i8*, align 8
  %curpkg = alloca %struct.hv*, align 8
  %offset848 = alloca i64, align 8
  %pkgname = alloca i8*, align 8
  %full_name = alloca i8*, align 8
  %error_msg = alloca i8*, align 8
  %valid = alloca i8, align 1
  %offset1045 = alloca i64, align 8
  %error_msg1100 = alloca i8*, align 8
  %valid1101 = alloca i8, align 1
  %offset1127 = alloca i64, align 8
  %flags1191 = alloca i32, align 4
  %offset1229 = alloca i64, align 8
  %offset1292 = alloca i64, align 8
  %enc = alloca %struct.sv*, align 8
  %offset1359 = alloca i64, align 8
  %offset1402 = alloca i64, align 8
  %offset1461 = alloca i64, align 8
  %offset1496 = alloca i64, align 8
  %classnum = alloca i8, align 1
  %w = alloca i32, align 4
  %offset1555 = alloca i64, align 8
  %offset1601 = alloca i64, align 8
  %scratch_list = alloca %struct.sv*, align 8
  %posixes_ptr = alloca %struct.sv**, align 8
  %w1788 = alloca i32, align 4
  %offset1795 = alloca i64, align 8
  %next_char_ptr = alloca i8*, align 8
  %w1878 = alloca i32, align 4
  %offset1902 = alloca i64, align 8
  %offset1940 = alloca i64, align 8
  %foldbuf = alloca [13 x i8], align 1
  %foldlen = alloca i64, align 8
  %folded = alloca i64, align 8
  %cp_count2027 = alloca i64, align 8
  %multi_fold = alloca %struct.sv*, align 8
  %offset2062 = alloca i64, align 8
  %offset2177 = alloca i64, align 8
  %index_start = alloca i64, align 8
  %index_final = alloca i64, align 8
  %offset2226 = alloca i64, align 8
  %literal = alloca [3 x i8], align 1
  %d = alloca i32, align 4
  %offset2300 = alloca i64, align 8
  %offset2345 = alloca i64, align 8
  %substitute_parse = alloca %struct.sv*, align 8
  %cp_count2393 = alloca i32, align 4
  %len2394 = alloca i64, align 8
  %save_end = alloca i8*, align 8
  %save_parse = alloca i8*, align 8
  %first_time = alloca i8, align 1
  %reg_flags = alloca i32, align 4
  %this_array_ptr = alloca %struct.av**, align 8
  %this_sequence = alloca %struct.sv*, align 8
  %op = alloca i8, align 1
  %arg = alloca i8, align 1
  %cur_parse = alloca i8*, align 8
  %start = alloca i64, align 8
  %end2703 = alloca i64, align 8
  %fold_intersection = alloca %struct.sv*, align 8
  %use_list = alloca %struct.sv**, align 8
  %j = alloca i64, align 8
  %foldbuf2726 = alloca [14 x i8], align 1
  %foldlen2727 = alloca i64, align 8
  %listp = alloca %struct.sv**, align 8
  %list = alloca %struct.av*, align 8
  %k = alloca i64, align 8
  %c_p = alloca %struct.sv**, align 8
  %c2800 = alloca i64, align 8
  %nonascii_but_latin1_properties = alloca %struct.sv*, align 8
  %start2964 = alloca i64, align 8
  %end2965 = alloca i64, align 8
  %start3081 = alloca i64, align 8
  %end3082 = alloca i64, align 8
  %op3083 = alloca i8, align 1
  %cur_parse3084 = alloca i8*, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i32* %flagp, i32** %flagp.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  %frombool = zext i1 %stop_at_1 to i8
  store i8 %frombool, i8* %stop_at_1.addr, align 1
  %frombool1 = zext i1 %allow_multi_folds to i8
  store i8 %frombool1, i8* %allow_multi_folds.addr, align 1
  %frombool2 = zext i1 %silence_non_portable to i8
  store i8 %frombool2, i8* %silence_non_portable.addr, align 1
  %frombool3 = zext i1 %strict to i8
  store i8 %frombool3, i8* %strict.addr, align 1
  store %struct.sv** %ret_invlist, %struct.sv*** %ret_invlist.addr, align 8
  store i64 3735928559, i64* %prevvalue, align 8
  store i64 3735928559, i64* %save_prevvalue, align 8
  store i64 0, i64* %range, align 8
  store i64 3735928559, i64* %value, align 8
  store i64 3735928559, i64* %save_value, align 8
  store i64 -1, i64* %namedclass, align 8
  store i8* null, i8** %rangebegin, align 8
  store i8 0, i8* %need_class, align 1
  store %struct.sv* null, %struct.sv** %listsv, align 8
  store i64 0, i64* %initial_listsv_len, align 8
  store %struct.sv* null, %struct.sv** %properties, align 8
  store %struct.sv* null, %struct.sv** %posixes, align 8
  store %struct.sv* null, %struct.sv** %nposixes, align 8
  store %struct.sv* null, %struct.sv** %simple_posixes, align 8
  store i64 0, i64* %element_count, align 8
  store %struct.av* null, %struct.av** %multi_char_matches, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 7
  %1 = load i8*, i8** %end, align 8
  store i8* %1, i8** %stop_ptr, align 8
  %2 = load %struct.sv**, %struct.sv*** %ret_invlist.addr, align 8
  %tobool = icmp ne %struct.sv** %2, null
  %3 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  %tobool4 = icmp ne i32 %cond, 0
  %frombool5 = zext i1 %tobool4 to i8
  store i8 %frombool5, i8* %skip_white, align 1
  store %struct.sv* null, %struct.sv** %swash, align 8
  store i8 0, i8* %has_user_defined_property, align 1
  store %struct.sv* null, %struct.sv** %depends_list, align 8
  store %struct.sv* null, %struct.sv** %cp_list, align 8
  store %struct.sv* null, %struct.sv** %cp_foldable_list, align 8
  store %struct.sv* null, %struct.sv** %only_utf8_locale_list, align 8
  store i32 0, i32* %non_portable_endpoint, align 4
  store i8 0, i8* %unicode_range, align 1
  store i8 0, i8* %invert, align 1
  %4 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %4, i32 0, i32 12
  %5 = load i64*, i64** %cop_warnings, align 8
  %cmp = icmp eq i64* %5, null
  br i1 %cmp, label %land.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings6 = getelementptr inbounds %struct.cop, %struct.cop* %6, i32 0, i32 12
  %7 = load i64*, i64** %cop_warnings6, align 8
  %cmp7 = icmp eq i64* %7, getelementptr inbounds (i64, i64* null, i64 1)
  br i1 %cmp7, label %land.end, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %8 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings9 = getelementptr inbounds %struct.cop, %struct.cop* %8, i32 0, i32 12
  %9 = load i64*, i64** %cop_warnings9, align 8
  %cmp10 = icmp eq i64* %9, getelementptr inbounds (i64, i64* null, i64 2)
  br i1 %cmp10, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %lor.lhs.false8
  %10 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings11 = getelementptr inbounds %struct.cop, %struct.cop* %10, i32 0, i32 12
  %11 = load i64*, i64** %cop_warnings11, align 8
  %add.ptr = getelementptr inbounds i64, i64* %11, i64 1
  %12 = bitcast i64* %add.ptr to i8*
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 0
  %13 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %13 to i32
  %and = and i32 %conv, 2
  %tobool12 = icmp ne i32 %and, 0
  br i1 %tobool12, label %lor.end, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %land.rhs
  %14 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings14 = getelementptr inbounds %struct.cop, %struct.cop* %14, i32 0, i32 12
  %15 = load i64*, i64** %cop_warnings14, align 8
  %add.ptr15 = getelementptr inbounds i64, i64* %15, i64 1
  %16 = bitcast i64* %add.ptr15 to i8*
  %arrayidx16 = getelementptr inbounds i8, i8* %16, i64 12
  %17 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %17 to i32
  %and18 = and i32 %conv17, 2
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %lor.end, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %lor.lhs.false13
  %18 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings21 = getelementptr inbounds %struct.cop, %struct.cop* %18, i32 0, i32 12
  %19 = load i64*, i64** %cop_warnings21, align 8
  %add.ptr22 = getelementptr inbounds i64, i64* %19, i64 1
  %20 = bitcast i64* %add.ptr22 to i8*
  %arrayidx23 = getelementptr inbounds i8, i8* %20, i64 0
  %21 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %21 to i32
  %and25 = and i32 %conv24, 2
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %lor.end, label %lor.lhs.false27

lor.lhs.false27:                                  ; preds = %lor.lhs.false20
  %22 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings28 = getelementptr inbounds %struct.cop, %struct.cop* %22, i32 0, i32 12
  %23 = load i64*, i64** %cop_warnings28, align 8
  %add.ptr29 = getelementptr inbounds i64, i64* %23, i64 1
  %24 = bitcast i64* %add.ptr29 to i8*
  %arrayidx30 = getelementptr inbounds i8, i8* %24, i64 0
  %25 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %25 to i32
  %and32 = and i32 %conv31, 2
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false27
  %26 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings34 = getelementptr inbounds %struct.cop, %struct.cop* %26, i32 0, i32 12
  %27 = load i64*, i64** %cop_warnings34, align 8
  %add.ptr35 = getelementptr inbounds i64, i64* %27, i64 1
  %28 = bitcast i64* %add.ptr35 to i8*
  %arrayidx36 = getelementptr inbounds i8, i8* %28, i64 0
  %29 = load i8, i8* %arrayidx36, align 1
  %conv37 = zext i8 %29 to i32
  %and38 = and i32 %conv37, 2
  %tobool39 = icmp ne i32 %and38, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false27, %lor.lhs.false20, %lor.lhs.false13, %land.rhs
  %30 = phi i1 [ true, %lor.lhs.false27 ], [ true, %lor.lhs.false20 ], [ true, %lor.lhs.false13 ], [ true, %land.rhs ], [ %tobool39, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %lor.lhs.false8, %lor.lhs.false, %entry
  %31 = phi i1 [ false, %lor.lhs.false8 ], [ false, %lor.lhs.false ], [ false, %entry ], [ %30, %lor.end ]
  %frombool40 = zext i1 %31 to i8
  store i8 %frombool40, i8* %warn_super, align 1
  %32 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %32, i32 0, i32 12
  %33 = load %struct.regnode*, %struct.regnode** %emit, align 8
  store %struct.regnode* %33, %struct.regnode** %orig_emit, align 8
  %34 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %34, i32 0, i32 8
  %35 = load i8*, i8** %parse, align 8
  store i8* %35, i8** %orig_parse, align 8
  %36 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %36, i32 0, i32 17
  %37 = load i64, i64* %size, align 8
  store i64 %37, i64* %orig_size, align 8
  store i8 0, i8* %posixl_matches_all, align 1
  %38 = load i32, i32* %depth.addr, align 4
  %39 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %40 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %40, i32 0, i32 0
  %41 = load i32, i32* %flags, align 8
  %call = call i32 @get_regex_charset(i32 %41)
  %cmp41 = icmp eq i32 %call, 1
  %42 = zext i1 %cmp41 to i64
  %cond43 = select i1 %cmp41, i32 20, i32 19
  %conv44 = trunc i32 %cond43 to i8
  %call45 = call %struct.regnode* @S_reganode(%struct.RExC_state_t* %39, i8 zeroext %conv44, i32 0)
  store %struct.regnode* %call45, %struct.regnode** %ret, align 8
  %43 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit46 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %43, i32 0, i32 12
  %44 = load %struct.regnode*, %struct.regnode** %emit46, align 8
  %45 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %45, i32 0, i32 13
  %46 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp47 = icmp eq %struct.regnode* %44, %46
  br i1 %cmp47, label %if.then, label %if.else

if.then:                                          ; preds = %land.end
  %47 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size49 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %47, i32 0, i32 17
  %48 = load i64, i64* %size49, align 8
  %add = add i64 %48, 9
  store i64 %add, i64* %size49, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %listsv, align 8
  br label %if.end

if.else:                                          ; preds = %land.end
  %49 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags50 = getelementptr inbounds %struct.regnode, %struct.regnode* %49, i32 0, i32 0
  store i8 0, i8* %flags50, align 2
  %50 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit51 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %50, i32 0, i32 12
  %51 = load %struct.regnode*, %struct.regnode** %emit51, align 8
  %add.ptr52 = getelementptr inbounds %struct.regnode, %struct.regnode* %51, i64 9
  store %struct.regnode* %add.ptr52, %struct.regnode** %emit51, align 8
  %call53 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.308, i64 0, i64 0), i64 10, i32 524288)
  store %struct.sv* %call53, %struct.sv** %listsv, align 8
  %52 = load %struct.sv*, %struct.sv** %listsv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 0
  %53 = load i8*, i8** %sv_any, align 8
  %54 = bitcast i8* %53 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %54, i32 0, i32 2
  %55 = load i64, i64* %xpv_cur, align 8
  store i64 %55, i64* %initial_listsv_len, align 8
  %56 = load %struct.sv*, %struct.sv** %listsv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags, align 4
  %and54 = and i32 %57, -524289
  store i32 %and54, i32* %sv_flags, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %58 = load i8, i8* %skip_white, align 1
  %tobool55 = trunc i8 %58 to i1
  br i1 %tobool55, label %if.then56, label %if.end60

if.then56:                                        ; preds = %if.end
  %59 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %60 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse57 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %60, i32 0, i32 8
  %61 = load i8*, i8** %parse57, align 8
  %call58 = call i8* @S_regpatws(%struct.RExC_state_t* %59, i8* %61, i1 zeroext false)
  %62 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse59 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %62, i32 0, i32 8
  store i8* %call58, i8** %parse59, align 8
  br label %if.end60

if.end60:                                         ; preds = %if.then56, %if.end
  %63 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse61 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %63, i32 0, i32 8
  %64 = load i8*, i8** %parse61, align 8
  %65 = load i8, i8* %64, align 1
  %conv62 = zext i8 %65 to i32
  %cmp63 = icmp eq i32 %conv62, 94
  br i1 %cmp63, label %if.then65, label %if.end79

if.then65:                                        ; preds = %if.end60
  %66 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse66 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %66, i32 0, i32 8
  %67 = load i8*, i8** %parse66, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %67, i32 1
  store i8* %incdec.ptr, i8** %parse66, align 8
  store i8 1, i8* %invert, align 1
  store i8 0, i8* %allow_multi_folds.addr, align 1
  %68 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %68, i32 0, i32 14
  %69 = load i32, i32* %naughty, align 8
  %cmp67 = icmp slt i32 %69, 10
  br i1 %cmp67, label %if.then69, label %if.end72

if.then69:                                        ; preds = %if.then65
  %70 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty70 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %70, i32 0, i32 14
  %71 = load i32, i32* %naughty70, align 8
  %add71 = add nsw i32 %71, 1
  store i32 %add71, i32* %naughty70, align 8
  br label %if.end72

if.end72:                                         ; preds = %if.then69, %if.then65
  %72 = load i8, i8* %skip_white, align 1
  %tobool73 = trunc i8 %72 to i1
  br i1 %tobool73, label %if.then74, label %if.end78

if.then74:                                        ; preds = %if.end72
  %73 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %74 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse75 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %74, i32 0, i32 8
  %75 = load i8*, i8** %parse75, align 8
  %call76 = call i8* @S_regpatws(%struct.RExC_state_t* %73, i8* %75, i1 zeroext false)
  %76 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse77 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %76, i32 0, i32 8
  store i8* %call76, i8** %parse77, align 8
  br label %if.end78

if.end78:                                         ; preds = %if.then74, %if.end72
  br label %if.end79

if.end79:                                         ; preds = %if.end78, %if.end60
  %77 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit80 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %77, i32 0, i32 12
  %78 = load %struct.regnode*, %struct.regnode** %emit80, align 8
  %79 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy81 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %79, i32 0, i32 13
  %80 = bitcast %struct.regnode_ssc* %emit_dummy81 to %struct.regnode*
  %cmp82 = icmp eq %struct.regnode* %78, %80
  br i1 %cmp82, label %if.end153, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end79
  %81 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse84 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %81, i32 0, i32 8
  %82 = load i8*, i8** %parse84, align 8
  %83 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end85 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %83, i32 0, i32 7
  %84 = load i8*, i8** %end85, align 8
  %cmp86 = icmp ult i8* %82, %84
  br i1 %cmp86, label %land.lhs.true88, label %if.end153

land.lhs.true88:                                  ; preds = %land.lhs.true
  %85 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse89 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %85, i32 0, i32 8
  %86 = load i8*, i8** %parse89, align 8
  %87 = load i8, i8* %86, align 1
  %conv90 = zext i8 %87 to i32
  %cmp91 = icmp eq i32 %conv90, 58
  br i1 %cmp91, label %if.then103, label %lor.lhs.false93

lor.lhs.false93:                                  ; preds = %land.lhs.true88
  %88 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse94 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %88, i32 0, i32 8
  %89 = load i8*, i8** %parse94, align 8
  %90 = load i8, i8* %89, align 1
  %conv95 = zext i8 %90 to i32
  %cmp96 = icmp eq i32 %conv95, 61
  br i1 %cmp96, label %if.then103, label %lor.lhs.false98

lor.lhs.false98:                                  ; preds = %lor.lhs.false93
  %91 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse99 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %91, i32 0, i32 8
  %92 = load i8*, i8** %parse99, align 8
  %93 = load i8, i8* %92, align 1
  %conv100 = zext i8 %93 to i32
  %cmp101 = icmp eq i32 %conv100, 46
  br i1 %cmp101, label %if.then103, label %if.end153

if.then103:                                       ; preds = %lor.lhs.false98, %lor.lhs.false93, %land.lhs.true88
  %94 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse104 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %94, i32 0, i32 8
  %95 = load i8*, i8** %parse104, align 8
  store i8* %95, i8** %s, align 8
  %96 = load i8*, i8** %s, align 8
  %incdec.ptr105 = getelementptr inbounds i8, i8* %96, i32 1
  store i8* %incdec.ptr105, i8** %s, align 8
  %97 = load i8, i8* %96, align 1
  store i8 %97, i8* %c, align 1
  %98 = load i8*, i8** %s, align 8
  %99 = load i8, i8* %98, align 1
  %conv106 = sext i8 %99 to i32
  %cmp107 = icmp eq i32 %conv106, 94
  br i1 %cmp107, label %if.then109, label %if.end111

if.then109:                                       ; preds = %if.then103
  %100 = load i8*, i8** %s, align 8
  %incdec.ptr110 = getelementptr inbounds i8, i8* %100, i32 1
  store i8* %incdec.ptr110, i8** %s, align 8
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then103
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end111
  %101 = load i8*, i8** %s, align 8
  %102 = load i8, i8* %101, align 1
  %idxprom = zext i8 %102 to i64
  %arrayidx112 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %103 = load i32, i32* %arrayidx112, align 4
  %and113 = and i32 %103, 16385
  %cmp114 = icmp eq i32 %and113, 16385
  br i1 %cmp114, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %104 = load i8*, i8** %s, align 8
  %incdec.ptr116 = getelementptr inbounds i8, i8* %104, i32 1
  store i8* %incdec.ptr116, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %105 = load i8*, i8** %s, align 8
  %106 = load i8, i8* %105, align 1
  %conv117 = sext i8 %106 to i32
  %tobool118 = icmp ne i32 %conv117, 0
  br i1 %tobool118, label %land.lhs.true119, label %if.end152

land.lhs.true119:                                 ; preds = %while.end
  %107 = load i8, i8* %c, align 1
  %conv120 = sext i8 %107 to i32
  %108 = load i8*, i8** %s, align 8
  %109 = load i8, i8* %108, align 1
  %conv121 = sext i8 %109 to i32
  %cmp122 = icmp eq i32 %conv120, %conv121
  br i1 %cmp122, label %land.lhs.true124, label %if.end152

land.lhs.true124:                                 ; preds = %land.lhs.true119
  %110 = load i8*, i8** %s, align 8
  %arrayidx125 = getelementptr inbounds i8, i8* %110, i64 1
  %111 = load i8, i8* %arrayidx125, align 1
  %conv126 = sext i8 %111 to i32
  %cmp127 = icmp eq i32 %conv126, 93
  br i1 %cmp127, label %if.then129, label %if.end152

if.then129:                                       ; preds = %land.lhs.true124
  %112 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %112, i32 0, i32 3
  %113 = load %struct.p5rx*, %struct.p5rx** %rx_sv, align 8
  %114 = bitcast %struct.p5rx* %113 to i8*
  %115 = bitcast i8* %114 to %struct.sv*
  %116 = bitcast %struct.sv* %115 to i8*
  call void @Perl_save_pushptr(i8* %116, i32 11)
  br label %do.body

do.body:                                          ; preds = %if.then129
  %117 = load i8*, i8** %s, align 8
  %add.ptr130 = getelementptr inbounds i8, i8* %117, i64 2
  %118 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %118, i32 0, i32 2
  %119 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr130 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %119 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %offset, align 8
  %120 = load i8, i8* %c, align 1
  %conv131 = sext i8 %120 to i32
  %121 = load i8, i8* %c, align 1
  %conv132 = sext i8 %121 to i32
  %122 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %122, i32 0, i32 25
  %123 = load i32, i32* %utf8, align 8
  %tobool133 = icmp ne i32 %123, 0
  %124 = zext i1 %tobool133 to i64
  %cond134 = select i1 %tobool133, i32 1, i32 0
  %tobool135 = icmp ne i32 %cond134, 0
  %125 = zext i1 %tobool135 to i64
  %cond136 = select i1 %tobool135, i32 1, i32 0
  %126 = load i64, i64* %offset, align 8
  %127 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp137 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %127, i32 0, i32 2
  %128 = load i8*, i8** %precomp137, align 8
  %129 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8138 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %129, i32 0, i32 25
  %130 = load i32, i32* %utf8138, align 8
  %tobool139 = icmp ne i32 %130, 0
  %131 = zext i1 %tobool139 to i64
  %cond140 = select i1 %tobool139, i32 1, i32 0
  %tobool141 = icmp ne i32 %cond140, 0
  %132 = zext i1 %tobool141 to i64
  %cond142 = select i1 %tobool141, i32 1, i32 0
  %133 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end143 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %133, i32 0, i32 7
  %134 = load i8*, i8** %end143, align 8
  %135 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp144 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %135, i32 0, i32 2
  %136 = load i8*, i8** %precomp144, align 8
  %sub.ptr.lhs.cast145 = ptrtoint i8* %134 to i64
  %sub.ptr.rhs.cast146 = ptrtoint i8* %136 to i64
  %sub.ptr.sub147 = sub i64 %sub.ptr.lhs.cast145, %sub.ptr.rhs.cast146
  %137 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %sub.ptr.sub147, %137
  %138 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp148 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %138, i32 0, i32 2
  %139 = load i8*, i8** %precomp148, align 8
  %140 = load i64, i64* %offset, align 8
  %add.ptr149 = getelementptr inbounds i8, i8* %139, i64 %140
  call void (i32, i8*, ...) @Perl_ck_warner(i32 20, i8* getelementptr inbounds ([116 x i8], [116 x i8]* @.str.309, i64 0, i64 0), i32 %conv131, i32 %conv132, i32 %cond136, i64 %126, i8* %128, i32 %cond142, i64 %sub, i8* %add.ptr149)
  br label %do.end

do.end:                                           ; preds = %do.body
  %141 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv150 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %141, i32 0, i32 3
  %142 = load %struct.p5rx*, %struct.p5rx** %rx_sv150, align 8
  %143 = bitcast %struct.p5rx* %142 to i8*
  %144 = bitcast i8* %143 to %struct.sv*
  %call151 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %144)
  %145 = bitcast %struct.sv* %call151 to %struct.p5rx*
  br label %if.end152

if.end152:                                        ; preds = %do.end, %land.lhs.true124, %land.lhs.true119, %while.end
  br label %if.end153

if.end153:                                        ; preds = %if.end152, %lor.lhs.false98, %land.lhs.true, %if.end79
  %146 = load i8, i8* %stop_at_1.addr, align 1
  %tobool154 = trunc i8 %146 to i1
  br i1 %tobool154, label %land.lhs.true156, label %if.end164

land.lhs.true156:                                 ; preds = %if.end153
  %147 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end157 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %147, i32 0, i32 7
  %148 = load i8*, i8** %end157, align 8
  %149 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse158 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %149, i32 0, i32 8
  %150 = load i8*, i8** %parse158, align 8
  %cmp159 = icmp ugt i8* %148, %150
  br i1 %cmp159, label %if.then161, label %if.end164

if.then161:                                       ; preds = %land.lhs.true156
  %151 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse162 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %151, i32 0, i32 8
  %152 = load i8*, i8** %parse162, align 8
  %add.ptr163 = getelementptr inbounds i8, i8* %152, i64 1
  store i8* %add.ptr163, i8** %stop_ptr, align 8
  br label %if.end164

if.end164:                                        ; preds = %if.then161, %land.lhs.true156, %if.end153
  %153 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse165 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %153, i32 0, i32 8
  %154 = load i8*, i8** %parse165, align 8
  %155 = load i8, i8* %154, align 1
  %conv166 = zext i8 %155 to i32
  %cmp167 = icmp eq i32 %conv166, 93
  br i1 %cmp167, label %if.then169, label %if.end170

if.then169:                                       ; preds = %if.end164
  br label %charclassloop

if.end170:                                        ; preds = %if.end164
  br label %while.body172

while.body172:                                    ; preds = %if.end170, %if.end602, %if.end1706, %if.end1978, %if.then1984, %if.end2035, %if.end2388
  %156 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse173 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %156, i32 0, i32 8
  %157 = load i8*, i8** %parse173, align 8
  %158 = load i8*, i8** %stop_ptr, align 8
  %cmp174 = icmp uge i8* %157, %158
  br i1 %cmp174, label %if.then176, label %if.end177

if.then176:                                       ; preds = %while.body172
  br label %while.end2389

if.end177:                                        ; preds = %while.body172
  %159 = load i8, i8* %skip_white, align 1
  %tobool178 = trunc i8 %159 to i1
  br i1 %tobool178, label %if.then179, label %if.end183

if.then179:                                       ; preds = %if.end177
  %160 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %161 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse180 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %161, i32 0, i32 8
  %162 = load i8*, i8** %parse180, align 8
  %call181 = call i8* @S_regpatws(%struct.RExC_state_t* %160, i8* %162, i1 zeroext false)
  %163 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse182 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %163, i32 0, i32 8
  store i8* %call181, i8** %parse182, align 8
  br label %if.end183

if.end183:                                        ; preds = %if.then179, %if.end177
  %164 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse184 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %164, i32 0, i32 8
  %165 = load i8*, i8** %parse184, align 8
  %166 = load i8, i8* %165, align 1
  %conv185 = zext i8 %166 to i32
  %cmp186 = icmp eq i32 %conv185, 93
  br i1 %cmp186, label %if.then188, label %if.end189

if.then188:                                       ; preds = %if.end183
  br label %while.end2389

if.end189:                                        ; preds = %if.end183
  br label %charclassloop

charclassloop:                                    ; preds = %if.end189, %if.then169
  store i64 -1, i64* %namedclass, align 8
  %167 = load i64, i64* %value, align 8
  store i64 %167, i64* %save_value, align 8
  %168 = load i64, i64* %prevvalue, align 8
  store i64 %168, i64* %save_prevvalue, align 8
  %169 = load i64, i64* %range, align 8
  %tobool190 = icmp ne i64 %169, 0
  br i1 %tobool190, label %if.end193, label %if.then191

if.then191:                                       ; preds = %charclassloop
  %170 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse192 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %170, i32 0, i32 8
  %171 = load i8*, i8** %parse192, align 8
  store i8* %171, i8** %rangebegin, align 8
  %172 = load i64, i64* %element_count, align 8
  %inc = add i64 %172, 1
  store i64 %inc, i64* %element_count, align 8
  store i32 0, i32* %non_portable_endpoint, align 4
  br label %if.end193

if.end193:                                        ; preds = %if.then191, %charclassloop
  %173 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8194 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %173, i32 0, i32 25
  %174 = load i32, i32* %utf8194, align 8
  %tobool195 = icmp ne i32 %174, 0
  br i1 %tobool195, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end193
  br i1 true, label %if.then196, label %if.else209

cond.false:                                       ; preds = %if.end193
  br i1 false, label %if.then196, label %if.else209

if.then196:                                       ; preds = %cond.false, %cond.true
  %175 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse197 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %175, i32 0, i32 8
  %176 = load i8*, i8** %parse197, align 8
  %177 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end198 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %177, i32 0, i32 7
  %178 = load i8*, i8** %end198, align 8
  %179 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse199 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %179, i32 0, i32 8
  %180 = load i8*, i8** %parse199, align 8
  %sub.ptr.lhs.cast200 = ptrtoint i8* %178 to i64
  %sub.ptr.rhs.cast201 = ptrtoint i8* %180 to i64
  %sub.ptr.sub202 = sub i64 %sub.ptr.lhs.cast200, %sub.ptr.rhs.cast201
  %call203 = call zeroext i1 @Perl_ckwarn(i32 44)
  %181 = zext i1 %call203 to i64
  %cond205 = select i1 %call203, i32 0, i32 1
  %call206 = call i64 @Perl_utf8n_to_uvchr(i8* %176, i64 %sub.ptr.sub202, i64* %numlen, i32 %cond205)
  store i64 %call206, i64* %value, align 8
  %182 = load i64, i64* %numlen, align 8
  %183 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse207 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %183, i32 0, i32 8
  %184 = load i8*, i8** %parse207, align 8
  %add.ptr208 = getelementptr inbounds i8, i8* %184, i64 %182
  store i8* %add.ptr208, i8** %parse207, align 8
  br label %if.end214

if.else209:                                       ; preds = %cond.false, %cond.true
  %185 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse210 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %185, i32 0, i32 8
  %186 = load i8*, i8** %parse210, align 8
  %incdec.ptr211 = getelementptr inbounds i8, i8* %186, i32 1
  store i8* %incdec.ptr211, i8** %parse210, align 8
  %187 = load i8, i8* %186, align 1
  %conv212 = zext i8 %187 to i32
  %conv213 = sext i32 %conv212 to i64
  store i64 %conv213, i64* %value, align 8
  br label %if.end214

if.end214:                                        ; preds = %if.else209, %if.then196
  %188 = load i64, i64* %value, align 8
  %cmp215 = icmp eq i64 %188, 91
  br i1 %cmp215, label %land.lhs.true217, label %if.else242

land.lhs.true217:                                 ; preds = %if.end214
  %189 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse218 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %189, i32 0, i32 8
  %190 = load i8*, i8** %parse218, align 8
  %191 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end219 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %191, i32 0, i32 7
  %192 = load i8*, i8** %end219, align 8
  %cmp220 = icmp ult i8* %190, %192
  br i1 %cmp220, label %land.lhs.true222, label %if.else242

land.lhs.true222:                                 ; preds = %land.lhs.true217
  %193 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse223 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %193, i32 0, i32 8
  %194 = load i8*, i8** %parse223, align 8
  %195 = load i8, i8* %194, align 1
  %conv224 = zext i8 %195 to i32
  %cmp225 = icmp eq i32 %conv224, 58
  br i1 %cmp225, label %if.then237, label %lor.lhs.false227

lor.lhs.false227:                                 ; preds = %land.lhs.true222
  %196 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse228 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %196, i32 0, i32 8
  %197 = load i8*, i8** %parse228, align 8
  %198 = load i8, i8* %197, align 1
  %conv229 = zext i8 %198 to i32
  %cmp230 = icmp eq i32 %conv229, 61
  br i1 %cmp230, label %if.then237, label %lor.lhs.false232

lor.lhs.false232:                                 ; preds = %lor.lhs.false227
  %199 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse233 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %199, i32 0, i32 8
  %200 = load i8*, i8** %parse233, align 8
  %201 = load i8, i8* %200, align 1
  %conv234 = zext i8 %201 to i32
  %cmp235 = icmp eq i32 %conv234, 46
  br i1 %cmp235, label %if.then237, label %if.else242

if.then237:                                       ; preds = %lor.lhs.false232, %lor.lhs.false227, %land.lhs.true222
  %202 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %203 = load i64, i64* %value, align 8
  %conv238 = trunc i64 %203 to i32
  %204 = load i8, i8* %strict.addr, align 1
  %tobool239 = trunc i8 %204 to i1
  %call240 = call i32 @S_regpposixcc(%struct.RExC_state_t* %202, i32 %conv238, i1 zeroext %tobool239)
  %conv241 = sext i32 %call240 to i64
  store i64 %conv241, i64* %namedclass, align 8
  br label %if.end1529

if.else242:                                       ; preds = %lor.lhs.false232, %land.lhs.true217, %if.end214
  %205 = load i64, i64* %value, align 8
  %cmp243 = icmp eq i64 %205, 92
  br i1 %cmp243, label %if.then245, label %if.end1528

if.then245:                                       ; preds = %if.else242
  %206 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8246 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %206, i32 0, i32 25
  %207 = load i32, i32* %utf8246, align 8
  %tobool247 = icmp ne i32 %207, 0
  br i1 %tobool247, label %cond.true248, label %cond.false249

cond.true248:                                     ; preds = %if.then245
  br i1 true, label %land.lhs.true250, label %if.else269

cond.false249:                                    ; preds = %if.then245
  br i1 false, label %land.lhs.true250, label %if.else269

land.lhs.true250:                                 ; preds = %cond.false249, %cond.true248
  %208 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse251 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %208, i32 0, i32 8
  %209 = load i8*, i8** %parse251, align 8
  %210 = load i8, i8* %209, align 1
  %conv252 = zext i8 %210 to i32
  %conv253 = sext i32 %conv252 to i64
  %cmp254 = icmp ult i64 %conv253, 128
  br i1 %cmp254, label %if.else269, label %if.then256

if.then256:                                       ; preds = %land.lhs.true250
  %211 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse257 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %211, i32 0, i32 8
  %212 = load i8*, i8** %parse257, align 8
  %213 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end258 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %213, i32 0, i32 7
  %214 = load i8*, i8** %end258, align 8
  %215 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse259 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %215, i32 0, i32 8
  %216 = load i8*, i8** %parse259, align 8
  %sub.ptr.lhs.cast260 = ptrtoint i8* %214 to i64
  %sub.ptr.rhs.cast261 = ptrtoint i8* %216 to i64
  %sub.ptr.sub262 = sub i64 %sub.ptr.lhs.cast260, %sub.ptr.rhs.cast261
  %call263 = call zeroext i1 @Perl_ckwarn(i32 44)
  %217 = zext i1 %call263 to i64
  %cond265 = select i1 %call263, i32 0, i32 1
  %call266 = call i64 @Perl_utf8n_to_uvchr(i8* %212, i64 %sub.ptr.sub262, i64* %numlen, i32 %cond265)
  store i64 %call266, i64* %value, align 8
  %218 = load i64, i64* %numlen, align 8
  %219 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse267 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %219, i32 0, i32 8
  %220 = load i8*, i8** %parse267, align 8
  %add.ptr268 = getelementptr inbounds i8, i8* %220, i64 %218
  store i8* %add.ptr268, i8** %parse267, align 8
  br label %if.end274

if.else269:                                       ; preds = %land.lhs.true250, %cond.false249, %cond.true248
  %221 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse270 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %221, i32 0, i32 8
  %222 = load i8*, i8** %parse270, align 8
  %incdec.ptr271 = getelementptr inbounds i8, i8* %222, i32 1
  store i8* %incdec.ptr271, i8** %parse270, align 8
  %223 = load i8, i8* %222, align 1
  %conv272 = zext i8 %223 to i32
  %conv273 = sext i32 %conv272 to i64
  store i64 %conv273, i64* %value, align 8
  br label %if.end274

if.end274:                                        ; preds = %if.else269, %if.then256
  %224 = load i8, i8* %skip_white, align 1
  %tobool275 = trunc i8 %224 to i1
  br i1 %tobool275, label %lor.lhs.false276, label %if.then315

lor.lhs.false276:                                 ; preds = %if.end274
  %225 = load i64, i64* %value, align 8
  %cmp277 = icmp ule i64 9, %225
  br i1 %cmp277, label %land.lhs.true279, label %lor.lhs.false282

land.lhs.true279:                                 ; preds = %lor.lhs.false276
  %226 = load i64, i64* %value, align 8
  %cmp280 = icmp ule i64 %226, 13
  br i1 %cmp280, label %if.end1527, label %lor.lhs.false282

lor.lhs.false282:                                 ; preds = %land.lhs.true279, %lor.lhs.false276
  %227 = load i64, i64* %value, align 8
  %cmp283 = icmp ult i64 13, %227
  br i1 %cmp283, label %land.lhs.true285, label %if.then315

land.lhs.true285:                                 ; preds = %lor.lhs.false282
  %228 = load i64, i64* %value, align 8
  %cmp286 = icmp eq i64 32, %228
  br i1 %cmp286, label %if.end1527, label %lor.lhs.false288

lor.lhs.false288:                                 ; preds = %land.lhs.true285
  %229 = load i64, i64* %value, align 8
  %cmp289 = icmp ult i64 32, %229
  br i1 %cmp289, label %land.lhs.true291, label %if.then315

land.lhs.true291:                                 ; preds = %lor.lhs.false288
  %230 = load i64, i64* %value, align 8
  %cmp292 = icmp eq i64 133, %230
  br i1 %cmp292, label %if.end1527, label %lor.lhs.false294

lor.lhs.false294:                                 ; preds = %land.lhs.true291
  %231 = load i64, i64* %value, align 8
  %cmp295 = icmp ult i64 133, %231
  br i1 %cmp295, label %land.lhs.true297, label %if.then315

land.lhs.true297:                                 ; preds = %lor.lhs.false294
  %232 = load i64, i64* %value, align 8
  %cmp298 = icmp eq i64 8206, %232
  br i1 %cmp298, label %if.end1527, label %lor.lhs.false300

lor.lhs.false300:                                 ; preds = %land.lhs.true297
  %233 = load i64, i64* %value, align 8
  %cmp301 = icmp ult i64 8206, %233
  br i1 %cmp301, label %land.lhs.true303, label %if.then315

land.lhs.true303:                                 ; preds = %lor.lhs.false300
  %234 = load i64, i64* %value, align 8
  %cmp304 = icmp eq i64 8207, %234
  br i1 %cmp304, label %if.end1527, label %lor.lhs.false306

lor.lhs.false306:                                 ; preds = %land.lhs.true303
  %235 = load i64, i64* %value, align 8
  %cmp307 = icmp ult i64 8207, %235
  br i1 %cmp307, label %land.lhs.true309, label %if.then315

land.lhs.true309:                                 ; preds = %lor.lhs.false306
  %236 = load i64, i64* %value, align 8
  %cmp310 = icmp eq i64 8232, %236
  br i1 %cmp310, label %if.end1527, label %lor.lhs.false312

lor.lhs.false312:                                 ; preds = %land.lhs.true309
  %237 = load i64, i64* %value, align 8
  %cmp313 = icmp eq i64 8233, %237
  br i1 %cmp313, label %if.end1527, label %if.then315

if.then315:                                       ; preds = %lor.lhs.false312, %lor.lhs.false306, %lor.lhs.false300, %lor.lhs.false294, %lor.lhs.false288, %lor.lhs.false282, %if.end274
  %238 = load i64, i64* %value, align 8
  %conv316 = trunc i64 %238 to i32
  switch i32 %conv316, label %sw.default [
    i32 119, label %sw.bb
    i32 87, label %sw.bb317
    i32 115, label %sw.bb318
    i32 83, label %sw.bb319
    i32 100, label %sw.bb320
    i32 68, label %sw.bb321
    i32 118, label %sw.bb322
    i32 86, label %sw.bb323
    i32 104, label %sw.bb324
    i32 72, label %sw.bb325
    i32 78, label %sw.bb326
    i32 112, label %sw.bb604
    i32 80, label %sw.bb604
    i32 110, label %sw.bb1011
    i32 114, label %sw.bb1012
    i32 116, label %sw.bb1013
    i32 102, label %sw.bb1014
    i32 98, label %sw.bb1015
    i32 101, label %sw.bb1016
    i32 97, label %sw.bb1017
    i32 111, label %sw.bb1018
    i32 120, label %sw.bb1097
    i32 99, label %sw.bb1179
    i32 48, label %sw.bb1190
    i32 49, label %sw.bb1190
    i32 50, label %sw.bb1190
    i32 51, label %sw.bb1190
    i32 52, label %sw.bb1190
    i32 53, label %sw.bb1190
    i32 54, label %sw.bb1190
    i32 55, label %sw.bb1190
  ]

sw.bb:                                            ; preds = %if.then315
  store i64 0, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb317:                                         ; preds = %if.then315
  store i64 1, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb318:                                         ; preds = %if.then315
  store i64 20, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb319:                                         ; preds = %if.then315
  store i64 21, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb320:                                         ; preds = %if.then315
  store i64 2, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb321:                                         ; preds = %if.then315
  store i64 3, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb322:                                         ; preds = %if.then315
  store i64 30, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb323:                                         ; preds = %if.then315
  store i64 31, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb324:                                         ; preds = %if.then315
  store i64 32, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb325:                                         ; preds = %if.then315
  store i64 33, i64* %namedclass, align 8
  br label %sw.epilog

sw.bb326:                                         ; preds = %if.then315
  %239 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse327 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %239, i32 0, i32 8
  %240 = load i8*, i8** %parse327, align 8
  %add.ptr328 = getelementptr inbounds i8, i8* %240, i64 -2
  store i8* %add.ptr328, i8** %backslash_N_beg, align 8
  %241 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %242 = load i32*, i32** %flagp.addr, align 8
  %243 = load i32, i32* %depth.addr, align 4
  %call329 = call zeroext i1 @S_grok_bslash_N(%struct.RExC_state_t* %241, %struct.regnode** null, i64* %value, i32* %cp_count, i32* %242, i32 %243)
  br i1 %call329, label %if.end603, label %if.then330

if.then330:                                       ; preds = %sw.bb326
  %244 = load i32*, i32** %flagp.addr, align 8
  %245 = load i32, i32* %244, align 4
  %and331 = and i32 %245, 32
  %tobool332 = icmp ne i32 %and331, 0
  br i1 %tobool332, label %if.then333, label %if.end358

if.then333:                                       ; preds = %if.then330
  br label %do.body334

do.body334:                                       ; preds = %if.then333
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses, align 8
  %246 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end335 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %246, i32 0, i32 7
  %247 = load i8*, i8** %end335, align 8
  %248 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp336 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %248, i32 0, i32 2
  %249 = load i8*, i8** %precomp336, align 8
  %sub.ptr.lhs.cast337 = ptrtoint i8* %247 to i64
  %sub.ptr.rhs.cast338 = ptrtoint i8* %249 to i64
  %sub.ptr.sub339 = sub i64 %sub.ptr.lhs.cast337, %sub.ptr.rhs.cast338
  store i64 %sub.ptr.sub339, i64* %len, align 8
  %250 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit340 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %250, i32 0, i32 12
  %251 = load %struct.regnode*, %struct.regnode** %emit340, align 8
  %252 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy341 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %252, i32 0, i32 13
  %253 = bitcast %struct.regnode_ssc* %emit_dummy341 to %struct.regnode*
  %cmp342 = icmp eq %struct.regnode* %251, %253
  br i1 %cmp342, label %if.end346, label %if.then344

if.then344:                                       ; preds = %do.body334
  %254 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv345 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %254, i32 0, i32 3
  %255 = load %struct.p5rx*, %struct.p5rx** %rx_sv345, align 8
  %256 = bitcast %struct.p5rx* %255 to i8*
  %257 = bitcast i8* %256 to %struct.sv*
  %258 = bitcast %struct.sv* %257 to i8*
  call void @Perl_save_pushptr(i8* %258, i32 11)
  br label %if.end346

if.end346:                                        ; preds = %if.then344, %do.body334
  %259 = load i64, i64* %len, align 8
  %cmp347 = icmp sgt i64 %259, 127
  br i1 %cmp347, label %if.then349, label %if.end350

if.then349:                                       ; preds = %if.end346
  store i64 117, i64* %len, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses, align 8
  br label %if.end350

if.end350:                                        ; preds = %if.then349, %if.end346
  %260 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8351 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %260, i32 0, i32 25
  %261 = load i32, i32* %utf8351, align 8
  %tobool352 = icmp ne i32 %261, 0
  %262 = zext i1 %tobool352 to i64
  %cond353 = select i1 %tobool352, i32 1, i32 0
  %tobool354 = icmp ne i32 %cond353, 0
  %263 = zext i1 %tobool354 to i64
  %cond355 = select i1 %tobool354, i32 1, i32 0
  %264 = load i64, i64* %len, align 8
  %265 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp356 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %265, i32 0, i32 2
  %266 = load i8*, i8** %precomp356, align 8
  %267 = load i8*, i8** %ellipses, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.303, i64 0, i64 0), i32 %cond355, i64 %264, i8* %266, i8* %267)
  br label %do.end357

do.end357:                                        ; preds = %if.end350
  br label %if.end358

if.end358:                                        ; preds = %do.end357, %if.then330
  %268 = load i32, i32* %cp_count, align 4
  %cmp359 = icmp slt i32 %268, 0
  br i1 %cmp359, label %if.then361, label %if.else406

if.then361:                                       ; preds = %if.end358
  br label %do.body362

do.body362:                                       ; preds = %if.then361
  %269 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit363 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %269, i32 0, i32 12
  %270 = load %struct.regnode*, %struct.regnode** %emit363, align 8
  %271 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy364 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %271, i32 0, i32 13
  %272 = bitcast %struct.regnode_ssc* %emit_dummy364 to %struct.regnode*
  %cmp365 = icmp eq %struct.regnode* %270, %272
  br i1 %cmp365, label %if.end369, label %if.then367

if.then367:                                       ; preds = %do.body362
  %273 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv368 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %273, i32 0, i32 3
  %274 = load %struct.p5rx*, %struct.p5rx** %rx_sv368, align 8
  %275 = bitcast %struct.p5rx* %274 to i8*
  %276 = bitcast i8* %275 to %struct.sv*
  %277 = bitcast %struct.sv* %276 to i8*
  call void @Perl_save_pushptr(i8* %277, i32 11)
  br label %if.end369

if.end369:                                        ; preds = %if.then367, %do.body362
  br label %do.body370

do.body370:                                       ; preds = %if.end369
  %278 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse372 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %278, i32 0, i32 8
  %279 = load i8*, i8** %parse372, align 8
  %280 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end373 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %280, i32 0, i32 7
  %281 = load i8*, i8** %end373, align 8
  %cmp374 = icmp ugt i8* %279, %281
  br i1 %cmp374, label %cond.true376, label %cond.false378

cond.true376:                                     ; preds = %do.body370
  %282 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end377 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %282, i32 0, i32 7
  %283 = load i8*, i8** %end377, align 8
  br label %cond.end

cond.false378:                                    ; preds = %do.body370
  %284 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse379 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %284, i32 0, i32 8
  %285 = load i8*, i8** %parse379, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false378, %cond.true376
  %cond380 = phi i8* [ %283, %cond.true376 ], [ %285, %cond.false378 ]
  %286 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp381 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %286, i32 0, i32 2
  %287 = load i8*, i8** %precomp381, align 8
  %sub.ptr.lhs.cast382 = ptrtoint i8* %cond380 to i64
  %sub.ptr.rhs.cast383 = ptrtoint i8* %287 to i64
  %sub.ptr.sub384 = sub i64 %sub.ptr.lhs.cast382, %sub.ptr.rhs.cast383
  store i64 %sub.ptr.sub384, i64* %offset371, align 8
  %288 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8385 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %288, i32 0, i32 25
  %289 = load i32, i32* %utf8385, align 8
  %tobool386 = icmp ne i32 %289, 0
  %290 = zext i1 %tobool386 to i64
  %cond387 = select i1 %tobool386, i32 1, i32 0
  %tobool388 = icmp ne i32 %cond387, 0
  %291 = zext i1 %tobool388 to i64
  %cond389 = select i1 %tobool388, i32 1, i32 0
  %292 = load i64, i64* %offset371, align 8
  %293 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp390 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %293, i32 0, i32 2
  %294 = load i8*, i8** %precomp390, align 8
  %295 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8391 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %295, i32 0, i32 25
  %296 = load i32, i32* %utf8391, align 8
  %tobool392 = icmp ne i32 %296, 0
  %297 = zext i1 %tobool392 to i64
  %cond393 = select i1 %tobool392, i32 1, i32 0
  %tobool394 = icmp ne i32 %cond393, 0
  %298 = zext i1 %tobool394 to i64
  %cond395 = select i1 %tobool394, i32 1, i32 0
  %299 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end396 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %299, i32 0, i32 7
  %300 = load i8*, i8** %end396, align 8
  %301 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp397 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %301, i32 0, i32 2
  %302 = load i8*, i8** %precomp397, align 8
  %sub.ptr.lhs.cast398 = ptrtoint i8* %300 to i64
  %sub.ptr.rhs.cast399 = ptrtoint i8* %302 to i64
  %sub.ptr.sub400 = sub i64 %sub.ptr.lhs.cast398, %sub.ptr.rhs.cast399
  %303 = load i64, i64* %offset371, align 8
  %sub401 = sub nsw i64 %sub.ptr.sub400, %303
  %304 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp402 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %304, i32 0, i32 2
  %305 = load i8*, i8** %precomp402, align 8
  %306 = load i64, i64* %offset371, align 8
  %add.ptr403 = getelementptr inbounds i8, i8* %305, i64 %306
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.310, i64 0, i64 0), i32 %cond389, i64 %292, i8* %294, i32 %cond395, i64 %sub401, i8* %add.ptr403)
  br label %do.end404

do.end404:                                        ; preds = %cond.end
  br label %do.end405

do.end405:                                        ; preds = %do.end404
  br label %if.end602

if.else406:                                       ; preds = %if.end358
  %307 = load i32, i32* %cp_count, align 4
  %cmp407 = icmp eq i32 %307, 0
  br i1 %cmp407, label %if.then409, label %if.else494

if.then409:                                       ; preds = %if.else406
  %308 = load i8, i8* %strict.addr, align 1
  %tobool410 = trunc i8 %308 to i1
  br i1 %tobool410, label %if.then411, label %if.else459

if.then411:                                       ; preds = %if.then409
  %309 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse412 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %309, i32 0, i32 8
  %310 = load i8*, i8** %parse412, align 8
  %incdec.ptr413 = getelementptr inbounds i8, i8* %310, i32 1
  store i8* %incdec.ptr413, i8** %parse412, align 8
  br label %do.body414

do.body414:                                       ; preds = %if.then411
  %311 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit415 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %311, i32 0, i32 12
  %312 = load %struct.regnode*, %struct.regnode** %emit415, align 8
  %313 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy416 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %313, i32 0, i32 13
  %314 = bitcast %struct.regnode_ssc* %emit_dummy416 to %struct.regnode*
  %cmp417 = icmp eq %struct.regnode* %312, %314
  br i1 %cmp417, label %if.end421, label %if.then419

if.then419:                                       ; preds = %do.body414
  %315 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv420 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %315, i32 0, i32 3
  %316 = load %struct.p5rx*, %struct.p5rx** %rx_sv420, align 8
  %317 = bitcast %struct.p5rx* %316 to i8*
  %318 = bitcast i8* %317 to %struct.sv*
  %319 = bitcast %struct.sv* %318 to i8*
  call void @Perl_save_pushptr(i8* %319, i32 11)
  br label %if.end421

if.end421:                                        ; preds = %if.then419, %do.body414
  br label %do.body422

do.body422:                                       ; preds = %if.end421
  %320 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse424 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %320, i32 0, i32 8
  %321 = load i8*, i8** %parse424, align 8
  %322 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end425 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %322, i32 0, i32 7
  %323 = load i8*, i8** %end425, align 8
  %cmp426 = icmp ugt i8* %321, %323
  br i1 %cmp426, label %cond.true428, label %cond.false430

cond.true428:                                     ; preds = %do.body422
  %324 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end429 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %324, i32 0, i32 7
  %325 = load i8*, i8** %end429, align 8
  br label %cond.end432

cond.false430:                                    ; preds = %do.body422
  %326 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse431 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %326, i32 0, i32 8
  %327 = load i8*, i8** %parse431, align 8
  br label %cond.end432

cond.end432:                                      ; preds = %cond.false430, %cond.true428
  %cond433 = phi i8* [ %325, %cond.true428 ], [ %327, %cond.false430 ]
  %328 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp434 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %328, i32 0, i32 2
  %329 = load i8*, i8** %precomp434, align 8
  %sub.ptr.lhs.cast435 = ptrtoint i8* %cond433 to i64
  %sub.ptr.rhs.cast436 = ptrtoint i8* %329 to i64
  %sub.ptr.sub437 = sub i64 %sub.ptr.lhs.cast435, %sub.ptr.rhs.cast436
  store i64 %sub.ptr.sub437, i64* %offset423, align 8
  %330 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8438 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %330, i32 0, i32 25
  %331 = load i32, i32* %utf8438, align 8
  %tobool439 = icmp ne i32 %331, 0
  %332 = zext i1 %tobool439 to i64
  %cond440 = select i1 %tobool439, i32 1, i32 0
  %tobool441 = icmp ne i32 %cond440, 0
  %333 = zext i1 %tobool441 to i64
  %cond442 = select i1 %tobool441, i32 1, i32 0
  %334 = load i64, i64* %offset423, align 8
  %335 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp443 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %335, i32 0, i32 2
  %336 = load i8*, i8** %precomp443, align 8
  %337 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8444 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %337, i32 0, i32 25
  %338 = load i32, i32* %utf8444, align 8
  %tobool445 = icmp ne i32 %338, 0
  %339 = zext i1 %tobool445 to i64
  %cond446 = select i1 %tobool445, i32 1, i32 0
  %tobool447 = icmp ne i32 %cond446, 0
  %340 = zext i1 %tobool447 to i64
  %cond448 = select i1 %tobool447, i32 1, i32 0
  %341 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end449 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %341, i32 0, i32 7
  %342 = load i8*, i8** %end449, align 8
  %343 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp450 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %343, i32 0, i32 2
  %344 = load i8*, i8** %precomp450, align 8
  %sub.ptr.lhs.cast451 = ptrtoint i8* %342 to i64
  %sub.ptr.rhs.cast452 = ptrtoint i8* %344 to i64
  %sub.ptr.sub453 = sub i64 %sub.ptr.lhs.cast451, %sub.ptr.rhs.cast452
  %345 = load i64, i64* %offset423, align 8
  %sub454 = sub nsw i64 %sub.ptr.sub453, %345
  %346 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp455 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %346, i32 0, i32 2
  %347 = load i8*, i8** %precomp455, align 8
  %348 = load i64, i64* %offset423, align 8
  %add.ptr456 = getelementptr inbounds i8, i8* %347, i64 %348
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.311, i64 0, i64 0), i32 %cond442, i64 %334, i8* %336, i32 %cond448, i64 %sub454, i8* %add.ptr456)
  br label %do.end457

do.end457:                                        ; preds = %cond.end432
  br label %do.end458

do.end458:                                        ; preds = %do.end457
  br label %if.end493

if.else459:                                       ; preds = %if.then409
  %349 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit460 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %349, i32 0, i32 12
  %350 = load %struct.regnode*, %struct.regnode** %emit460, align 8
  %351 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy461 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %351, i32 0, i32 13
  %352 = bitcast %struct.regnode_ssc* %emit_dummy461 to %struct.regnode*
  %cmp462 = icmp eq %struct.regnode* %350, %352
  br i1 %cmp462, label %if.end492, label %if.then464

if.then464:                                       ; preds = %if.else459
  br label %do.body465

do.body465:                                       ; preds = %if.then464
  %353 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse467 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %353, i32 0, i32 8
  %354 = load i8*, i8** %parse467, align 8
  %355 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp468 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %355, i32 0, i32 2
  %356 = load i8*, i8** %precomp468, align 8
  %sub.ptr.lhs.cast469 = ptrtoint i8* %354 to i64
  %sub.ptr.rhs.cast470 = ptrtoint i8* %356 to i64
  %sub.ptr.sub471 = sub i64 %sub.ptr.lhs.cast469, %sub.ptr.rhs.cast470
  store i64 %sub.ptr.sub471, i64* %offset466, align 8
  %357 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8472 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %357, i32 0, i32 25
  %358 = load i32, i32* %utf8472, align 8
  %tobool473 = icmp ne i32 %358, 0
  %359 = zext i1 %tobool473 to i64
  %cond474 = select i1 %tobool473, i32 1, i32 0
  %tobool475 = icmp ne i32 %cond474, 0
  %360 = zext i1 %tobool475 to i64
  %cond476 = select i1 %tobool475, i32 1, i32 0
  %361 = load i64, i64* %offset466, align 8
  %362 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp477 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %362, i32 0, i32 2
  %363 = load i8*, i8** %precomp477, align 8
  %364 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8478 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %364, i32 0, i32 25
  %365 = load i32, i32* %utf8478, align 8
  %tobool479 = icmp ne i32 %365, 0
  %366 = zext i1 %tobool479 to i64
  %cond480 = select i1 %tobool479, i32 1, i32 0
  %tobool481 = icmp ne i32 %cond480, 0
  %367 = zext i1 %tobool481 to i64
  %cond482 = select i1 %tobool481, i32 1, i32 0
  %368 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end483 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %368, i32 0, i32 7
  %369 = load i8*, i8** %end483, align 8
  %370 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp484 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %370, i32 0, i32 2
  %371 = load i8*, i8** %precomp484, align 8
  %sub.ptr.lhs.cast485 = ptrtoint i8* %369 to i64
  %sub.ptr.rhs.cast486 = ptrtoint i8* %371 to i64
  %sub.ptr.sub487 = sub i64 %sub.ptr.lhs.cast485, %sub.ptr.rhs.cast486
  %372 = load i64, i64* %offset466, align 8
  %sub488 = sub nsw i64 %sub.ptr.sub487, %372
  %373 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp489 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %373, i32 0, i32 2
  %374 = load i8*, i8** %precomp489, align 8
  %375 = load i64, i64* %offset466, align 8
  %add.ptr490 = getelementptr inbounds i8, i8* %374, i64 %375
  call void (i32, i8*, ...) @Perl_ck_warner(i32 20, i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.312, i64 0, i64 0), i32 %cond476, i64 %361, i8* %363, i32 %cond482, i64 %sub488, i8* %add.ptr490)
  br label %do.end491

do.end491:                                        ; preds = %do.body465
  br label %if.end492

if.end492:                                        ; preds = %do.end491, %if.else459
  br label %if.end493

if.end493:                                        ; preds = %if.end492, %do.end458
  br label %if.end601

if.else494:                                       ; preds = %if.else406
  %376 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %in_multi_char_class = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %376, i32 0, i32 37
  %377 = load i32, i32* %in_multi_char_class, align 4
  %tobool495 = icmp ne i32 %377, 0
  br i1 %tobool495, label %if.end600, label %if.then496

if.then496:                                       ; preds = %if.else494
  %378 = load i8, i8* %invert, align 1
  %tobool497 = trunc i8 %378 to i1
  br i1 %tobool497, label %if.then506, label %lor.lhs.false499

lor.lhs.false499:                                 ; preds = %if.then496
  %379 = load i64, i64* %range, align 8
  %tobool500 = icmp ne i64 %379, 0
  br i1 %tobool500, label %if.then506, label %lor.lhs.false501

lor.lhs.false501:                                 ; preds = %lor.lhs.false499
  %380 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse502 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %380, i32 0, i32 8
  %381 = load i8*, i8** %parse502, align 8
  %382 = load i8, i8* %381, align 1
  %conv503 = sext i8 %382 to i32
  %cmp504 = icmp eq i32 %conv503, 45
  br i1 %cmp504, label %if.then506, label %if.else591

if.then506:                                       ; preds = %lor.lhs.false501, %lor.lhs.false499, %if.then496
  %383 = load i8, i8* %strict.addr, align 1
  %tobool507 = trunc i8 %383 to i1
  br i1 %tobool507, label %if.then508, label %if.else556

if.then508:                                       ; preds = %if.then506
  %384 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse509 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %384, i32 0, i32 8
  %385 = load i8*, i8** %parse509, align 8
  %incdec.ptr510 = getelementptr inbounds i8, i8* %385, i32 -1
  store i8* %incdec.ptr510, i8** %parse509, align 8
  br label %do.body511

do.body511:                                       ; preds = %if.then508
  %386 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit512 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %386, i32 0, i32 12
  %387 = load %struct.regnode*, %struct.regnode** %emit512, align 8
  %388 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy513 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %388, i32 0, i32 13
  %389 = bitcast %struct.regnode_ssc* %emit_dummy513 to %struct.regnode*
  %cmp514 = icmp eq %struct.regnode* %387, %389
  br i1 %cmp514, label %if.end518, label %if.then516

if.then516:                                       ; preds = %do.body511
  %390 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv517 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %390, i32 0, i32 3
  %391 = load %struct.p5rx*, %struct.p5rx** %rx_sv517, align 8
  %392 = bitcast %struct.p5rx* %391 to i8*
  %393 = bitcast i8* %392 to %struct.sv*
  %394 = bitcast %struct.sv* %393 to i8*
  call void @Perl_save_pushptr(i8* %394, i32 11)
  br label %if.end518

if.end518:                                        ; preds = %if.then516, %do.body511
  br label %do.body519

do.body519:                                       ; preds = %if.end518
  %395 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse521 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %395, i32 0, i32 8
  %396 = load i8*, i8** %parse521, align 8
  %397 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end522 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %397, i32 0, i32 7
  %398 = load i8*, i8** %end522, align 8
  %cmp523 = icmp ugt i8* %396, %398
  br i1 %cmp523, label %cond.true525, label %cond.false527

cond.true525:                                     ; preds = %do.body519
  %399 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end526 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %399, i32 0, i32 7
  %400 = load i8*, i8** %end526, align 8
  br label %cond.end529

cond.false527:                                    ; preds = %do.body519
  %401 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse528 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %401, i32 0, i32 8
  %402 = load i8*, i8** %parse528, align 8
  br label %cond.end529

cond.end529:                                      ; preds = %cond.false527, %cond.true525
  %cond530 = phi i8* [ %400, %cond.true525 ], [ %402, %cond.false527 ]
  %403 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp531 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %403, i32 0, i32 2
  %404 = load i8*, i8** %precomp531, align 8
  %sub.ptr.lhs.cast532 = ptrtoint i8* %cond530 to i64
  %sub.ptr.rhs.cast533 = ptrtoint i8* %404 to i64
  %sub.ptr.sub534 = sub i64 %sub.ptr.lhs.cast532, %sub.ptr.rhs.cast533
  store i64 %sub.ptr.sub534, i64* %offset520, align 8
  %405 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8535 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %405, i32 0, i32 25
  %406 = load i32, i32* %utf8535, align 8
  %tobool536 = icmp ne i32 %406, 0
  %407 = zext i1 %tobool536 to i64
  %cond537 = select i1 %tobool536, i32 1, i32 0
  %tobool538 = icmp ne i32 %cond537, 0
  %408 = zext i1 %tobool538 to i64
  %cond539 = select i1 %tobool538, i32 1, i32 0
  %409 = load i64, i64* %offset520, align 8
  %410 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp540 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %410, i32 0, i32 2
  %411 = load i8*, i8** %precomp540, align 8
  %412 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8541 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %412, i32 0, i32 25
  %413 = load i32, i32* %utf8541, align 8
  %tobool542 = icmp ne i32 %413, 0
  %414 = zext i1 %tobool542 to i64
  %cond543 = select i1 %tobool542, i32 1, i32 0
  %tobool544 = icmp ne i32 %cond543, 0
  %415 = zext i1 %tobool544 to i64
  %cond545 = select i1 %tobool544, i32 1, i32 0
  %416 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end546 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %416, i32 0, i32 7
  %417 = load i8*, i8** %end546, align 8
  %418 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp547 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %418, i32 0, i32 2
  %419 = load i8*, i8** %precomp547, align 8
  %sub.ptr.lhs.cast548 = ptrtoint i8* %417 to i64
  %sub.ptr.rhs.cast549 = ptrtoint i8* %419 to i64
  %sub.ptr.sub550 = sub i64 %sub.ptr.lhs.cast548, %sub.ptr.rhs.cast549
  %420 = load i64, i64* %offset520, align 8
  %sub551 = sub nsw i64 %sub.ptr.sub550, %420
  %421 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp552 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %421, i32 0, i32 2
  %422 = load i8*, i8** %precomp552, align 8
  %423 = load i64, i64* %offset520, align 8
  %add.ptr553 = getelementptr inbounds i8, i8* %422, i64 %423
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.313, i64 0, i64 0), i32 %cond539, i64 %409, i8* %411, i32 %cond545, i64 %sub551, i8* %add.ptr553)
  br label %do.end554

do.end554:                                        ; preds = %cond.end529
  br label %do.end555

do.end555:                                        ; preds = %do.end554
  br label %if.end590

if.else556:                                       ; preds = %if.then506
  %424 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit557 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %424, i32 0, i32 12
  %425 = load %struct.regnode*, %struct.regnode** %emit557, align 8
  %426 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy558 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %426, i32 0, i32 13
  %427 = bitcast %struct.regnode_ssc* %emit_dummy558 to %struct.regnode*
  %cmp559 = icmp eq %struct.regnode* %425, %427
  br i1 %cmp559, label %if.end589, label %if.then561

if.then561:                                       ; preds = %if.else556
  br label %do.body562

do.body562:                                       ; preds = %if.then561
  %428 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse564 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %428, i32 0, i32 8
  %429 = load i8*, i8** %parse564, align 8
  %430 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp565 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %430, i32 0, i32 2
  %431 = load i8*, i8** %precomp565, align 8
  %sub.ptr.lhs.cast566 = ptrtoint i8* %429 to i64
  %sub.ptr.rhs.cast567 = ptrtoint i8* %431 to i64
  %sub.ptr.sub568 = sub i64 %sub.ptr.lhs.cast566, %sub.ptr.rhs.cast567
  store i64 %sub.ptr.sub568, i64* %offset563, align 8
  %432 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8569 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %432, i32 0, i32 25
  %433 = load i32, i32* %utf8569, align 8
  %tobool570 = icmp ne i32 %433, 0
  %434 = zext i1 %tobool570 to i64
  %cond571 = select i1 %tobool570, i32 1, i32 0
  %tobool572 = icmp ne i32 %cond571, 0
  %435 = zext i1 %tobool572 to i64
  %cond573 = select i1 %tobool572, i32 1, i32 0
  %436 = load i64, i64* %offset563, align 8
  %437 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp574 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %437, i32 0, i32 2
  %438 = load i8*, i8** %precomp574, align 8
  %439 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8575 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %439, i32 0, i32 25
  %440 = load i32, i32* %utf8575, align 8
  %tobool576 = icmp ne i32 %440, 0
  %441 = zext i1 %tobool576 to i64
  %cond577 = select i1 %tobool576, i32 1, i32 0
  %tobool578 = icmp ne i32 %cond577, 0
  %442 = zext i1 %tobool578 to i64
  %cond579 = select i1 %tobool578, i32 1, i32 0
  %443 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end580 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %443, i32 0, i32 7
  %444 = load i8*, i8** %end580, align 8
  %445 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp581 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %445, i32 0, i32 2
  %446 = load i8*, i8** %precomp581, align 8
  %sub.ptr.lhs.cast582 = ptrtoint i8* %444 to i64
  %sub.ptr.rhs.cast583 = ptrtoint i8* %446 to i64
  %sub.ptr.sub584 = sub i64 %sub.ptr.lhs.cast582, %sub.ptr.rhs.cast583
  %447 = load i64, i64* %offset563, align 8
  %sub585 = sub nsw i64 %sub.ptr.sub584, %447
  %448 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp586 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %448, i32 0, i32 2
  %449 = load i8*, i8** %precomp586, align 8
  %450 = load i64, i64* %offset563, align 8
  %add.ptr587 = getelementptr inbounds i8, i8* %449, i64 %450
  call void (i32, i8*, ...) @Perl_ck_warner(i32 20, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.314, i64 0, i64 0), i32 %cond573, i64 %436, i8* %438, i32 %cond579, i64 %sub585, i8* %add.ptr587)
  br label %do.end588

do.end588:                                        ; preds = %do.body562
  br label %if.end589

if.end589:                                        ; preds = %do.end588, %if.else556
  br label %if.end590

if.end590:                                        ; preds = %if.end589, %do.end555
  br label %sw.epilog

if.else591:                                       ; preds = %lor.lhs.false501
  %451 = load i8*, i8** %backslash_N_beg, align 8
  %452 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse592 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %452, i32 0, i32 8
  %453 = load i8*, i8** %parse592, align 8
  %454 = load i8*, i8** %backslash_N_beg, align 8
  %sub.ptr.lhs.cast593 = ptrtoint i8* %453 to i64
  %sub.ptr.rhs.cast594 = ptrtoint i8* %454 to i64
  %sub.ptr.sub595 = sub i64 %sub.ptr.lhs.cast593, %sub.ptr.rhs.cast594
  %call596 = call %struct.sv* @Perl_newSVpvn(i8* %451, i64 %sub.ptr.sub595)
  store %struct.sv* %call596, %struct.sv** %multi_char_N, align 8
  %455 = load %struct.av*, %struct.av** %multi_char_matches, align 8
  %456 = load %struct.sv*, %struct.sv** %multi_char_N, align 8
  %457 = load i32, i32* %cp_count, align 4
  %conv597 = sext i32 %457 to i64
  %call598 = call %struct.av* @S_add_multi_match(%struct.av* %455, %struct.sv* %456, i64 %conv597)
  store %struct.av* %call598, %struct.av** %multi_char_matches, align 8
  br label %if.end599

if.end599:                                        ; preds = %if.else591
  br label %if.end600

if.end600:                                        ; preds = %if.end599, %if.else494
  br label %if.end601

if.end601:                                        ; preds = %if.end600, %if.end493
  br label %if.end602

if.end602:                                        ; preds = %if.end601, %do.end405
  %458 = load i64, i64* %element_count, align 8
  %dec = add i64 %458, -1
  store i64 %dec, i64* %element_count, align 8
  %459 = load i64, i64* %save_value, align 8
  store i64 %459, i64* %value, align 8
  %460 = load i64, i64* %save_prevvalue, align 8
  store i64 %460, i64* %prevvalue, align 8
  br label %while.body172

if.end603:                                        ; preds = %sw.bb326
  store i8 1, i8* %unicode_range, align 1
  br label %sw.epilog

sw.bb604:                                         ; preds = %if.then315, %if.then315
  store i8 6, i8* %swash_init_flags, align 1
  %461 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse605 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %461, i32 0, i32 8
  %462 = load i8*, i8** %parse605, align 8
  %463 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end606 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %463, i32 0, i32 7
  %464 = load i8*, i8** %end606, align 8
  %cmp607 = icmp uge i8* %462, %464
  br i1 %cmp607, label %if.then609, label %if.end652

if.then609:                                       ; preds = %sw.bb604
  br label %do.body610

do.body610:                                       ; preds = %if.then609
  %465 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit611 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %465, i32 0, i32 12
  %466 = load %struct.regnode*, %struct.regnode** %emit611, align 8
  %467 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy612 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %467, i32 0, i32 13
  %468 = bitcast %struct.regnode_ssc* %emit_dummy612 to %struct.regnode*
  %cmp613 = icmp eq %struct.regnode* %466, %468
  br i1 %cmp613, label %if.end617, label %if.then615

if.then615:                                       ; preds = %do.body610
  %469 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv616 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %469, i32 0, i32 3
  %470 = load %struct.p5rx*, %struct.p5rx** %rx_sv616, align 8
  %471 = bitcast %struct.p5rx* %470 to i8*
  %472 = bitcast i8* %471 to %struct.sv*
  %473 = bitcast %struct.sv* %472 to i8*
  call void @Perl_save_pushptr(i8* %473, i32 11)
  br label %if.end617

if.end617:                                        ; preds = %if.then615, %do.body610
  br label %do.body618

do.body618:                                       ; preds = %if.end617
  %474 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse620 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %474, i32 0, i32 8
  %475 = load i8*, i8** %parse620, align 8
  %476 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp621 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %476, i32 0, i32 2
  %477 = load i8*, i8** %precomp621, align 8
  %sub.ptr.lhs.cast622 = ptrtoint i8* %475 to i64
  %sub.ptr.rhs.cast623 = ptrtoint i8* %477 to i64
  %sub.ptr.sub624 = sub i64 %sub.ptr.lhs.cast622, %sub.ptr.rhs.cast623
  store i64 %sub.ptr.sub624, i64* %offset619, align 8
  %478 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8625 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %478, i32 0, i32 25
  %479 = load i32, i32* %utf8625, align 8
  %tobool626 = icmp ne i32 %479, 0
  %480 = zext i1 %tobool626 to i64
  %cond627 = select i1 %tobool626, i32 1, i32 0
  %tobool628 = icmp ne i32 %cond627, 0
  %481 = load i64, i64* %value, align 8
  %conv629 = trunc i64 %481 to i8
  %conv630 = zext i8 %conv629 to i32
  %482 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8631 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %482, i32 0, i32 25
  %483 = load i32, i32* %utf8631, align 8
  %tobool632 = icmp ne i32 %483, 0
  %484 = zext i1 %tobool632 to i64
  %cond633 = select i1 %tobool632, i32 1, i32 0
  %tobool634 = icmp ne i32 %cond633, 0
  %485 = zext i1 %tobool634 to i64
  %cond635 = select i1 %tobool634, i32 1, i32 0
  %486 = load i64, i64* %offset619, align 8
  %487 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp636 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %487, i32 0, i32 2
  %488 = load i8*, i8** %precomp636, align 8
  %489 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8637 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %489, i32 0, i32 25
  %490 = load i32, i32* %utf8637, align 8
  %tobool638 = icmp ne i32 %490, 0
  %491 = zext i1 %tobool638 to i64
  %cond639 = select i1 %tobool638, i32 1, i32 0
  %tobool640 = icmp ne i32 %cond639, 0
  %492 = zext i1 %tobool640 to i64
  %cond641 = select i1 %tobool640, i32 1, i32 0
  %493 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end642 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %493, i32 0, i32 7
  %494 = load i8*, i8** %end642, align 8
  %495 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp643 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %495, i32 0, i32 2
  %496 = load i8*, i8** %precomp643, align 8
  %sub.ptr.lhs.cast644 = ptrtoint i8* %494 to i64
  %sub.ptr.rhs.cast645 = ptrtoint i8* %496 to i64
  %sub.ptr.sub646 = sub i64 %sub.ptr.lhs.cast644, %sub.ptr.rhs.cast645
  %497 = load i64, i64* %offset619, align 8
  %sub647 = sub nsw i64 %sub.ptr.sub646, %497
  %498 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp648 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %498, i32 0, i32 2
  %499 = load i8*, i8** %precomp648, align 8
  %500 = load i64, i64* %offset619, align 8
  %add.ptr649 = getelementptr inbounds i8, i8* %499, i64 %500
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool628, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.293, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %conv630, i32 %cond635, i64 %486, i8* %488, i32 %cond641, i64 %sub647, i8* %add.ptr649)
  br label %do.end650

do.end650:                                        ; preds = %do.body618
  br label %do.end651

do.end651:                                        ; preds = %do.end650
  br label %if.end652

if.end652:                                        ; preds = %do.end651, %sw.bb604
  %501 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse653 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %501, i32 0, i32 8
  %502 = load i8*, i8** %parse653, align 8
  %503 = load i8, i8* %502, align 1
  %conv654 = sext i8 %503 to i32
  %cmp655 = icmp eq i32 %conv654, 123
  br i1 %cmp655, label %if.then657, label %if.else780

if.then657:                                       ; preds = %if.end652
  %504 = load i64, i64* %value, align 8
  %conv659 = trunc i64 %504 to i8
  store i8 %conv659, i8* %c658, align 1
  %505 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse660 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %505, i32 0, i32 8
  %506 = load i8*, i8** %parse660, align 8
  %incdec.ptr661 = getelementptr inbounds i8, i8* %506, i32 1
  store i8* %incdec.ptr661, i8** %parse660, align 8
  %call662 = call i8* @strchr(i8* %506, i32 125) #6
  store i8* %call662, i8** %e, align 8
  %507 = load i8*, i8** %e, align 8
  %tobool663 = icmp ne i8* %507, null
  br i1 %tobool663, label %if.end706, label %if.then664

if.then664:                                       ; preds = %if.then657
  br label %do.body665

do.body665:                                       ; preds = %if.then664
  %508 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit666 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %508, i32 0, i32 12
  %509 = load %struct.regnode*, %struct.regnode** %emit666, align 8
  %510 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy667 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %510, i32 0, i32 13
  %511 = bitcast %struct.regnode_ssc* %emit_dummy667 to %struct.regnode*
  %cmp668 = icmp eq %struct.regnode* %509, %511
  br i1 %cmp668, label %if.end672, label %if.then670

if.then670:                                       ; preds = %do.body665
  %512 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv671 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %512, i32 0, i32 3
  %513 = load %struct.p5rx*, %struct.p5rx** %rx_sv671, align 8
  %514 = bitcast %struct.p5rx* %513 to i8*
  %515 = bitcast i8* %514 to %struct.sv*
  %516 = bitcast %struct.sv* %515 to i8*
  call void @Perl_save_pushptr(i8* %516, i32 11)
  br label %if.end672

if.end672:                                        ; preds = %if.then670, %do.body665
  br label %do.body673

do.body673:                                       ; preds = %if.end672
  %517 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse675 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %517, i32 0, i32 8
  %518 = load i8*, i8** %parse675, align 8
  %519 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp676 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %519, i32 0, i32 2
  %520 = load i8*, i8** %precomp676, align 8
  %sub.ptr.lhs.cast677 = ptrtoint i8* %518 to i64
  %sub.ptr.rhs.cast678 = ptrtoint i8* %520 to i64
  %sub.ptr.sub679 = sub i64 %sub.ptr.lhs.cast677, %sub.ptr.rhs.cast678
  store i64 %sub.ptr.sub679, i64* %offset674, align 8
  %521 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8680 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %521, i32 0, i32 25
  %522 = load i32, i32* %utf8680, align 8
  %tobool681 = icmp ne i32 %522, 0
  %523 = zext i1 %tobool681 to i64
  %cond682 = select i1 %tobool681, i32 1, i32 0
  %tobool683 = icmp ne i32 %cond682, 0
  %524 = load i8, i8* %c658, align 1
  %conv684 = zext i8 %524 to i32
  %525 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8685 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %525, i32 0, i32 25
  %526 = load i32, i32* %utf8685, align 8
  %tobool686 = icmp ne i32 %526, 0
  %527 = zext i1 %tobool686 to i64
  %cond687 = select i1 %tobool686, i32 1, i32 0
  %tobool688 = icmp ne i32 %cond687, 0
  %528 = zext i1 %tobool688 to i64
  %cond689 = select i1 %tobool688, i32 1, i32 0
  %529 = load i64, i64* %offset674, align 8
  %530 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp690 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %530, i32 0, i32 2
  %531 = load i8*, i8** %precomp690, align 8
  %532 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8691 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %532, i32 0, i32 25
  %533 = load i32, i32* %utf8691, align 8
  %tobool692 = icmp ne i32 %533, 0
  %534 = zext i1 %tobool692 to i64
  %cond693 = select i1 %tobool692, i32 1, i32 0
  %tobool694 = icmp ne i32 %cond693, 0
  %535 = zext i1 %tobool694 to i64
  %cond695 = select i1 %tobool694, i32 1, i32 0
  %536 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end696 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %536, i32 0, i32 7
  %537 = load i8*, i8** %end696, align 8
  %538 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp697 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %538, i32 0, i32 2
  %539 = load i8*, i8** %precomp697, align 8
  %sub.ptr.lhs.cast698 = ptrtoint i8* %537 to i64
  %sub.ptr.rhs.cast699 = ptrtoint i8* %539 to i64
  %sub.ptr.sub700 = sub i64 %sub.ptr.lhs.cast698, %sub.ptr.rhs.cast699
  %540 = load i64, i64* %offset674, align 8
  %sub701 = sub nsw i64 %sub.ptr.sub700, %540
  %541 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp702 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %541, i32 0, i32 2
  %542 = load i8*, i8** %precomp702, align 8
  %543 = load i64, i64* %offset674, align 8
  %add.ptr703 = getelementptr inbounds i8, i8* %542, i64 %543
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool683, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.292, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %conv684, i32 %cond689, i64 %529, i8* %531, i32 %cond695, i64 %sub701, i8* %add.ptr703)
  br label %do.end704

do.end704:                                        ; preds = %do.body673
  br label %do.end705

do.end705:                                        ; preds = %do.end704
  br label %if.end706

if.end706:                                        ; preds = %do.end705, %if.then657
  br label %while.cond707

while.cond707:                                    ; preds = %while.body714, %if.end706
  %544 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse708 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %544, i32 0, i32 8
  %545 = load i8*, i8** %parse708, align 8
  %546 = load i8, i8* %545, align 1
  %idxprom709 = zext i8 %546 to i64
  %arrayidx710 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom709
  %547 = load i32, i32* %arrayidx710, align 4
  %and711 = and i32 %547, 17408
  %cmp712 = icmp eq i32 %and711, 17408
  br i1 %cmp712, label %while.body714, label %while.end717

while.body714:                                    ; preds = %while.cond707
  %548 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse715 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %548, i32 0, i32 8
  %549 = load i8*, i8** %parse715, align 8
  %incdec.ptr716 = getelementptr inbounds i8, i8* %549, i32 1
  store i8* %incdec.ptr716, i8** %parse715, align 8
  br label %while.cond707

while.end717:                                     ; preds = %while.cond707
  %550 = load i8*, i8** %e, align 8
  %551 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse718 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %551, i32 0, i32 8
  %552 = load i8*, i8** %parse718, align 8
  %cmp719 = icmp eq i8* %550, %552
  br i1 %cmp719, label %if.then721, label %if.end763

if.then721:                                       ; preds = %while.end717
  br label %do.body722

do.body722:                                       ; preds = %if.then721
  %553 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit723 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %553, i32 0, i32 12
  %554 = load %struct.regnode*, %struct.regnode** %emit723, align 8
  %555 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy724 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %555, i32 0, i32 13
  %556 = bitcast %struct.regnode_ssc* %emit_dummy724 to %struct.regnode*
  %cmp725 = icmp eq %struct.regnode* %554, %556
  br i1 %cmp725, label %if.end729, label %if.then727

if.then727:                                       ; preds = %do.body722
  %557 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv728 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %557, i32 0, i32 3
  %558 = load %struct.p5rx*, %struct.p5rx** %rx_sv728, align 8
  %559 = bitcast %struct.p5rx* %558 to i8*
  %560 = bitcast i8* %559 to %struct.sv*
  %561 = bitcast %struct.sv* %560 to i8*
  call void @Perl_save_pushptr(i8* %561, i32 11)
  br label %if.end729

if.end729:                                        ; preds = %if.then727, %do.body722
  br label %do.body730

do.body730:                                       ; preds = %if.end729
  %562 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse732 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %562, i32 0, i32 8
  %563 = load i8*, i8** %parse732, align 8
  %564 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp733 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %564, i32 0, i32 2
  %565 = load i8*, i8** %precomp733, align 8
  %sub.ptr.lhs.cast734 = ptrtoint i8* %563 to i64
  %sub.ptr.rhs.cast735 = ptrtoint i8* %565 to i64
  %sub.ptr.sub736 = sub i64 %sub.ptr.lhs.cast734, %sub.ptr.rhs.cast735
  store i64 %sub.ptr.sub736, i64* %offset731, align 8
  %566 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8737 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %566, i32 0, i32 25
  %567 = load i32, i32* %utf8737, align 8
  %tobool738 = icmp ne i32 %567, 0
  %568 = zext i1 %tobool738 to i64
  %cond739 = select i1 %tobool738, i32 1, i32 0
  %tobool740 = icmp ne i32 %cond739, 0
  %569 = load i8, i8* %c658, align 1
  %conv741 = zext i8 %569 to i32
  %570 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8742 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %570, i32 0, i32 25
  %571 = load i32, i32* %utf8742, align 8
  %tobool743 = icmp ne i32 %571, 0
  %572 = zext i1 %tobool743 to i64
  %cond744 = select i1 %tobool743, i32 1, i32 0
  %tobool745 = icmp ne i32 %cond744, 0
  %573 = zext i1 %tobool745 to i64
  %cond746 = select i1 %tobool745, i32 1, i32 0
  %574 = load i64, i64* %offset731, align 8
  %575 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp747 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %575, i32 0, i32 2
  %576 = load i8*, i8** %precomp747, align 8
  %577 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8748 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %577, i32 0, i32 25
  %578 = load i32, i32* %utf8748, align 8
  %tobool749 = icmp ne i32 %578, 0
  %579 = zext i1 %tobool749 to i64
  %cond750 = select i1 %tobool749, i32 1, i32 0
  %tobool751 = icmp ne i32 %cond750, 0
  %580 = zext i1 %tobool751 to i64
  %cond752 = select i1 %tobool751, i32 1, i32 0
  %581 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end753 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %581, i32 0, i32 7
  %582 = load i8*, i8** %end753, align 8
  %583 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp754 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %583, i32 0, i32 2
  %584 = load i8*, i8** %precomp754, align 8
  %sub.ptr.lhs.cast755 = ptrtoint i8* %582 to i64
  %sub.ptr.rhs.cast756 = ptrtoint i8* %584 to i64
  %sub.ptr.sub757 = sub i64 %sub.ptr.lhs.cast755, %sub.ptr.rhs.cast756
  %585 = load i64, i64* %offset731, align 8
  %sub758 = sub nsw i64 %sub.ptr.sub757, %585
  %586 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp759 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %586, i32 0, i32 2
  %587 = load i8*, i8** %precomp759, align 8
  %588 = load i64, i64* %offset731, align 8
  %add.ptr760 = getelementptr inbounds i8, i8* %587, i64 %588
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool740, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.293, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %conv741, i32 %cond746, i64 %574, i8* %576, i32 %cond752, i64 %sub758, i8* %add.ptr760)
  br label %do.end761

do.end761:                                        ; preds = %do.body730
  br label %do.end762

do.end762:                                        ; preds = %do.end761
  br label %if.end763

if.end763:                                        ; preds = %do.end762, %while.end717
  %589 = load i8*, i8** %e, align 8
  %590 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse764 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %590, i32 0, i32 8
  %591 = load i8*, i8** %parse764, align 8
  %sub.ptr.lhs.cast765 = ptrtoint i8* %589 to i64
  %sub.ptr.rhs.cast766 = ptrtoint i8* %591 to i64
  %sub.ptr.sub767 = sub i64 %sub.ptr.lhs.cast765, %sub.ptr.rhs.cast766
  store i64 %sub.ptr.sub767, i64* %n, align 8
  br label %while.cond768

while.cond768:                                    ; preds = %while.body777, %if.end763
  %592 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse769 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %592, i32 0, i32 8
  %593 = load i8*, i8** %parse769, align 8
  %594 = load i64, i64* %n, align 8
  %add.ptr770 = getelementptr inbounds i8, i8* %593, i64 %594
  %add.ptr771 = getelementptr inbounds i8, i8* %add.ptr770, i64 -1
  %595 = load i8, i8* %add.ptr771, align 1
  %idxprom772 = zext i8 %595 to i64
  %arrayidx773 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom772
  %596 = load i32, i32* %arrayidx773, align 4
  %and774 = and i32 %596, 17408
  %cmp775 = icmp eq i32 %and774, 17408
  br i1 %cmp775, label %while.body777, label %while.end779

while.body777:                                    ; preds = %while.cond768
  %597 = load i64, i64* %n, align 8
  %dec778 = add i64 %597, -1
  store i64 %dec778, i64* %n, align 8
  br label %while.cond768

while.end779:                                     ; preds = %while.cond768
  br label %if.end782

if.else780:                                       ; preds = %if.end652
  %598 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse781 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %598, i32 0, i32 8
  %599 = load i8*, i8** %parse781, align 8
  store i8* %599, i8** %e, align 8
  store i64 1, i64* %n, align 8
  br label %if.end782

if.end782:                                        ; preds = %if.else780, %while.end779
  %600 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit783 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %600, i32 0, i32 12
  %601 = load %struct.regnode*, %struct.regnode** %emit783, align 8
  %602 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy784 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %602, i32 0, i32 13
  %603 = bitcast %struct.regnode_ssc* %emit_dummy784 to %struct.regnode*
  %cmp785 = icmp eq %struct.regnode* %601, %603
  br i1 %cmp785, label %if.end1008, label %if.then787

if.then787:                                       ; preds = %if.end782
  %604 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse788 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %604, i32 0, i32 8
  %605 = load i8*, i8** %parse788, align 8
  %606 = load i8, i8* %605, align 1
  %conv789 = zext i8 %606 to i32
  %cmp790 = icmp eq i32 %conv789, 94
  br i1 %cmp790, label %if.then792, label %if.end808

if.then792:                                       ; preds = %if.then787
  %607 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse793 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %607, i32 0, i32 8
  %608 = load i8*, i8** %parse793, align 8
  %incdec.ptr794 = getelementptr inbounds i8, i8* %608, i32 1
  store i8* %incdec.ptr794, i8** %parse793, align 8
  %609 = load i64, i64* %n, align 8
  %dec795 = add i64 %609, -1
  store i64 %dec795, i64* %n, align 8
  %610 = load i64, i64* %value, align 8
  %xor = xor i64 %610, 32
  store i64 %xor, i64* %value, align 8
  br label %while.cond796

while.cond796:                                    ; preds = %while.body803, %if.then792
  %611 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse797 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %611, i32 0, i32 8
  %612 = load i8*, i8** %parse797, align 8
  %613 = load i8, i8* %612, align 1
  %idxprom798 = zext i8 %613 to i64
  %arrayidx799 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom798
  %614 = load i32, i32* %arrayidx799, align 4
  %and800 = and i32 %614, 17408
  %cmp801 = icmp eq i32 %and800, 17408
  br i1 %cmp801, label %while.body803, label %while.end807

while.body803:                                    ; preds = %while.cond796
  %615 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse804 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %615, i32 0, i32 8
  %616 = load i8*, i8** %parse804, align 8
  %incdec.ptr805 = getelementptr inbounds i8, i8* %616, i32 1
  store i8* %incdec.ptr805, i8** %parse804, align 8
  %617 = load i64, i64* %n, align 8
  %dec806 = add i64 %617, -1
  store i64 %dec806, i64* %n, align 8
  br label %while.cond796

while.end807:                                     ; preds = %while.cond796
  br label %if.end808

if.end808:                                        ; preds = %while.end807, %if.then787
  %618 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags809 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %618, i32 0, i32 0
  %619 = load i32, i32* %flags809, align 8
  %and810 = and i32 %619, 4
  %tobool811 = icmp ne i32 %and810, 0
  %620 = zext i1 %tobool811 to i64
  %cond812 = select i1 %tobool811, i32 1, i32 0
  %tobool813 = icmp ne i32 %cond812, 0
  %621 = zext i1 %tobool813 to i64
  %cond814 = select i1 %tobool813, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.316, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0)
  %622 = load i64, i64* %n, align 8
  %conv815 = trunc i64 %622 to i32
  %623 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse816 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %623, i32 0, i32 8
  %624 = load i8*, i8** %parse816, align 8
  %625 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags817 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %625, i32 0, i32 0
  %626 = load i32, i32* %flags817, align 8
  %and818 = and i32 %626, 4
  %tobool819 = icmp ne i32 %and818, 0
  %627 = zext i1 %tobool819 to i64
  %cond820 = select i1 %tobool819, i32 1, i32 0
  %tobool821 = icmp ne i32 %cond820, 0
  %628 = zext i1 %tobool821 to i64
  %cond822 = select i1 %tobool821, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.317, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0)
  %call823 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.315, i64 0, i64 0), i8* %cond814, i32 %conv815, i8* %624, i8* %cond822)
  %call824 = call i8* @Perl_savepv(i8* %call823)
  store i8* %call824, i8** %name, align 8
  %629 = load %struct.sv*, %struct.sv** %swash, align 8
  %tobool825 = icmp ne %struct.sv* %629, null
  br i1 %tobool825, label %if.then826, label %if.end827

if.then826:                                       ; preds = %if.end808
  %630 = load %struct.sv*, %struct.sv** %swash, align 8
  %631 = bitcast %struct.sv* %630 to i8*
  %632 = bitcast i8* %631 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %632)
  br label %if.end827

if.end827:                                        ; preds = %if.then826, %if.end808
  %633 = load i8*, i8** %name, align 8
  %call828 = call %struct.sv* @Perl__core_swash_init(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.202, i64 0, i64 0), i8* %633, %struct.sv* @PL_sv_undef, i32 1, i32 0, %struct.sv* null, i8* %swash_init_flags)
  store %struct.sv* %call828, %struct.sv** %swash, align 8
  %634 = load %struct.sv*, %struct.sv** %swash, align 8
  %tobool829 = icmp ne %struct.sv* %634, null
  br i1 %tobool829, label %lor.lhs.false830, label %if.then833

lor.lhs.false830:                                 ; preds = %if.end827
  %635 = load %struct.sv*, %struct.sv** %swash, align 8
  %call831 = call %struct.sv* @Perl__get_swash_invlist(%struct.sv* %635)
  store %struct.sv* %call831, %struct.sv** %invlist, align 8
  %tobool832 = icmp ne %struct.sv* %call831, null
  br i1 %tobool832, label %if.else983, label %if.then833

if.then833:                                       ; preds = %lor.lhs.false830, %if.end827
  %636 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp834 = icmp eq %struct.cop* %636, @PL_compiling
  br i1 %cmp834, label %cond.true836, label %cond.false837

cond.true836:                                     ; preds = %if.then833
  %637 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  br label %cond.end838

cond.false837:                                    ; preds = %if.then833
  %638 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash = getelementptr inbounds %struct.cop, %struct.cop* %638, i32 0, i32 8
  %639 = load %struct.hv*, %struct.hv** %cop_stash, align 8
  br label %cond.end838

cond.end838:                                      ; preds = %cond.false837, %cond.true836
  %cond839 = phi %struct.hv* [ %637, %cond.true836 ], [ %639, %cond.false837 ]
  store %struct.hv* %cond839, %struct.hv** %curpkg, align 8
  %640 = load %struct.sv*, %struct.sv** %swash, align 8
  %tobool840 = icmp ne %struct.sv* %640, null
  br i1 %tobool840, label %if.then841, label %if.end842

if.then841:                                       ; preds = %cond.end838
  %641 = load %struct.sv*, %struct.sv** %swash, align 8
  %642 = bitcast %struct.sv* %641 to i8*
  %643 = bitcast i8* %642 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %643)
  store %struct.sv* null, %struct.sv** %swash, align 8
  br label %if.end842

if.end842:                                        ; preds = %if.then841, %cond.end838
  %644 = load %struct.sv**, %struct.sv*** %ret_invlist.addr, align 8
  %tobool843 = icmp ne %struct.sv** %644, null
  br i1 %tobool843, label %if.then844, label %if.end890

if.then844:                                       ; preds = %if.end842
  %645 = load i8*, i8** %e, align 8
  %add.ptr845 = getelementptr inbounds i8, i8* %645, i64 1
  %646 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse846 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %646, i32 0, i32 8
  store i8* %add.ptr845, i8** %parse846, align 8
  br label %do.body847

do.body847:                                       ; preds = %if.then844
  %647 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse849 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %647, i32 0, i32 8
  %648 = load i8*, i8** %parse849, align 8
  %649 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp850 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %649, i32 0, i32 2
  %650 = load i8*, i8** %precomp850, align 8
  %sub.ptr.lhs.cast851 = ptrtoint i8* %648 to i64
  %sub.ptr.rhs.cast852 = ptrtoint i8* %650 to i64
  %sub.ptr.sub853 = sub i64 %sub.ptr.lhs.cast851, %sub.ptr.rhs.cast852
  store i64 %sub.ptr.sub853, i64* %offset848, align 8
  %651 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit854 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %651, i32 0, i32 12
  %652 = load %struct.regnode*, %struct.regnode** %emit854, align 8
  %653 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy855 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %653, i32 0, i32 13
  %654 = bitcast %struct.regnode_ssc* %emit_dummy855 to %struct.regnode*
  %cmp856 = icmp eq %struct.regnode* %652, %654
  br i1 %cmp856, label %if.end860, label %if.then858

if.then858:                                       ; preds = %do.body847
  %655 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv859 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %655, i32 0, i32 3
  %656 = load %struct.p5rx*, %struct.p5rx** %rx_sv859, align 8
  %657 = bitcast %struct.p5rx* %656 to i8*
  %658 = bitcast i8* %657 to %struct.sv*
  %659 = bitcast %struct.sv* %658 to i8*
  call void @Perl_save_pushptr(i8* %659, i32 11)
  br label %if.end860

if.end860:                                        ; preds = %if.then858, %do.body847
  %660 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8861 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %660, i32 0, i32 25
  %661 = load i32, i32* %utf8861, align 8
  %tobool862 = icmp ne i32 %661, 0
  %662 = zext i1 %tobool862 to i64
  %cond863 = select i1 %tobool862, i32 1, i32 0
  %tobool864 = icmp ne i32 %cond863, 0
  %663 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8865 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %663, i32 0, i32 25
  %664 = load i32, i32* %utf8865, align 8
  %tobool866 = icmp ne i32 %664, 0
  %665 = zext i1 %tobool866 to i64
  %cond867 = select i1 %tobool866, i32 1, i32 0
  %tobool868 = icmp ne i32 %cond867, 0
  %666 = zext i1 %tobool868 to i64
  %cond869 = select i1 %tobool868, i32 1, i32 0
  %667 = load i64, i64* %n, align 8
  %668 = load i8*, i8** %name, align 8
  %669 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8870 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %669, i32 0, i32 25
  %670 = load i32, i32* %utf8870, align 8
  %tobool871 = icmp ne i32 %670, 0
  %671 = zext i1 %tobool871 to i64
  %cond872 = select i1 %tobool871, i32 1, i32 0
  %tobool873 = icmp ne i32 %cond872, 0
  %672 = zext i1 %tobool873 to i64
  %cond874 = select i1 %tobool873, i32 1, i32 0
  %673 = load i64, i64* %offset848, align 8
  %674 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp875 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %674, i32 0, i32 2
  %675 = load i8*, i8** %precomp875, align 8
  %676 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8876 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %676, i32 0, i32 25
  %677 = load i32, i32* %utf8876, align 8
  %tobool877 = icmp ne i32 %677, 0
  %678 = zext i1 %tobool877 to i64
  %cond878 = select i1 %tobool877, i32 1, i32 0
  %tobool879 = icmp ne i32 %cond878, 0
  %679 = zext i1 %tobool879 to i64
  %cond880 = select i1 %tobool879, i32 1, i32 0
  %680 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end881 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %680, i32 0, i32 7
  %681 = load i8*, i8** %end881, align 8
  %682 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp882 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %682, i32 0, i32 2
  %683 = load i8*, i8** %precomp882, align 8
  %sub.ptr.lhs.cast883 = ptrtoint i8* %681 to i64
  %sub.ptr.rhs.cast884 = ptrtoint i8* %683 to i64
  %sub.ptr.sub885 = sub i64 %sub.ptr.lhs.cast883, %sub.ptr.rhs.cast884
  %684 = load i64, i64* %offset848, align 8
  %sub886 = sub nsw i64 %sub.ptr.sub885, %684
  %685 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp887 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %685, i32 0, i32 2
  %686 = load i8*, i8** %precomp887, align 8
  %687 = load i64, i64* %offset848, align 8
  %add.ptr888 = getelementptr inbounds i8, i8* %686, i64 %687
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool864, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.318, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %cond869, i64 %667, i8* %668, i32 %cond874, i64 %673, i8* %675, i32 %cond880, i64 %sub886, i8* %add.ptr888)
  br label %do.end889

do.end889:                                        ; preds = %if.end860
  br label %if.end890

if.end890:                                        ; preds = %do.end889, %if.end842
  %688 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %tobool891 = icmp ne %struct.hv* %688, null
  br i1 %tobool891, label %land.lhs.true892, label %if.end971

land.lhs.true892:                                 ; preds = %if.end890
  %689 = load i8*, i8** %name, align 8
  %call893 = call i8* @Perl_instr(i8* %689, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.319, i64 0, i64 0))
  %tobool894 = icmp ne i8* %call893, null
  br i1 %tobool894, label %if.end971, label %if.then895

if.then895:                                       ; preds = %land.lhs.true892
  %690 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %sv_flags896 = getelementptr inbounds %struct.hv, %struct.hv* %690, i32 0, i32 2
  %691 = load i32, i32* %sv_flags896, align 4
  %and897 = and i32 %691, 33554432
  %tobool898 = icmp ne i32 %and897, 0
  br i1 %tobool898, label %land.lhs.true899, label %cond.false960

land.lhs.true899:                                 ; preds = %if.then895
  %692 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %sv_u = getelementptr inbounds %struct.hv, %struct.hv* %692, i32 0, i32 3
  %svu_hash = bitcast %union.anon.5* %sv_u to %struct.he***
  %693 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %694 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %sv_any900 = getelementptr inbounds %struct.hv, %struct.hv* %694, i32 0, i32 0
  %695 = load %struct.xpvhv*, %struct.xpvhv** %sv_any900, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %695, i32 0, i32 3
  %696 = load i64, i64* %xhv_max, align 8
  %add901 = add i64 %696, 1
  %arrayidx902 = getelementptr inbounds %struct.he*, %struct.he** %693, i64 %add901
  %697 = bitcast %struct.he** %arrayidx902 to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %697, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %698 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool903 = icmp ne %struct.hek* %698, null
  br i1 %tobool903, label %land.lhs.true904, label %cond.false960

land.lhs.true904:                                 ; preds = %land.lhs.true899
  %699 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %sv_u905 = getelementptr inbounds %struct.hv, %struct.hv* %699, i32 0, i32 3
  %svu_hash906 = bitcast %union.anon.5* %sv_u905 to %struct.he***
  %700 = load %struct.he**, %struct.he*** %svu_hash906, align 8
  %701 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %sv_any907 = getelementptr inbounds %struct.hv, %struct.hv* %701, i32 0, i32 0
  %702 = load %struct.xpvhv*, %struct.xpvhv** %sv_any907, align 8
  %xhv_max908 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %702, i32 0, i32 3
  %703 = load i64, i64* %xhv_max908, align 8
  %add909 = add i64 %703, 1
  %arrayidx910 = getelementptr inbounds %struct.he*, %struct.he** %700, i64 %add909
  %704 = bitcast %struct.he** %arrayidx910 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %704, i32 0, i32 4
  %705 = load i32, i32* %xhv_name_count, align 4
  %tobool911 = icmp ne i32 %705, 0
  br i1 %tobool911, label %cond.true912, label %cond.false921

cond.true912:                                     ; preds = %land.lhs.true904
  %706 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %sv_u913 = getelementptr inbounds %struct.hv, %struct.hv* %706, i32 0, i32 3
  %svu_hash914 = bitcast %union.anon.5* %sv_u913 to %struct.he***
  %707 = load %struct.he**, %struct.he*** %svu_hash914, align 8
  %708 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %sv_any915 = getelementptr inbounds %struct.hv, %struct.hv* %708, i32 0, i32 0
  %709 = load %struct.xpvhv*, %struct.xpvhv** %sv_any915, align 8
  %xhv_max916 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %709, i32 0, i32 3
  %710 = load i64, i64* %xhv_max916, align 8
  %add917 = add i64 %710, 1
  %arrayidx918 = getelementptr inbounds %struct.he*, %struct.he** %707, i64 %add917
  %711 = bitcast %struct.he** %arrayidx918 to %struct.xpvhv_aux*
  %xhv_name_u919 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %711, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u919 to %struct.hek***
  %712 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %713 = load %struct.hek*, %struct.hek** %712, align 8
  %tobool920 = icmp ne %struct.hek* %713, null
  br i1 %tobool920, label %cond.true931, label %cond.false960

cond.false921:                                    ; preds = %land.lhs.true904
  %714 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %sv_u922 = getelementptr inbounds %struct.hv, %struct.hv* %714, i32 0, i32 3
  %svu_hash923 = bitcast %union.anon.5* %sv_u922 to %struct.he***
  %715 = load %struct.he**, %struct.he*** %svu_hash923, align 8
  %716 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %sv_any924 = getelementptr inbounds %struct.hv, %struct.hv* %716, i32 0, i32 0
  %717 = load %struct.xpvhv*, %struct.xpvhv** %sv_any924, align 8
  %xhv_max925 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %717, i32 0, i32 3
  %718 = load i64, i64* %xhv_max925, align 8
  %add926 = add i64 %718, 1
  %arrayidx927 = getelementptr inbounds %struct.he*, %struct.he** %715, i64 %add926
  %719 = bitcast %struct.he** %arrayidx927 to %struct.xpvhv_aux*
  %xhv_name_u928 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %719, i32 0, i32 0
  %xhvnameu_name929 = bitcast %union._xhvnameu* %xhv_name_u928 to %struct.hek**
  %720 = load %struct.hek*, %struct.hek** %xhvnameu_name929, align 8
  %tobool930 = icmp ne %struct.hek* %720, null
  br i1 %tobool930, label %cond.true931, label %cond.false960

cond.true931:                                     ; preds = %cond.false921, %cond.true912
  %721 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %sv_u932 = getelementptr inbounds %struct.hv, %struct.hv* %721, i32 0, i32 3
  %svu_hash933 = bitcast %union.anon.5* %sv_u932 to %struct.he***
  %722 = load %struct.he**, %struct.he*** %svu_hash933, align 8
  %723 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %sv_any934 = getelementptr inbounds %struct.hv, %struct.hv* %723, i32 0, i32 0
  %724 = load %struct.xpvhv*, %struct.xpvhv** %sv_any934, align 8
  %xhv_max935 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %724, i32 0, i32 3
  %725 = load i64, i64* %xhv_max935, align 8
  %add936 = add i64 %725, 1
  %arrayidx937 = getelementptr inbounds %struct.he*, %struct.he** %722, i64 %add936
  %726 = bitcast %struct.he** %arrayidx937 to %struct.xpvhv_aux*
  %xhv_name_count938 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %726, i32 0, i32 4
  %727 = load i32, i32* %xhv_name_count938, align 4
  %tobool939 = icmp ne i32 %727, 0
  br i1 %tobool939, label %cond.true940, label %cond.false949

cond.true940:                                     ; preds = %cond.true931
  %728 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %sv_u941 = getelementptr inbounds %struct.hv, %struct.hv* %728, i32 0, i32 3
  %svu_hash942 = bitcast %union.anon.5* %sv_u941 to %struct.he***
  %729 = load %struct.he**, %struct.he*** %svu_hash942, align 8
  %730 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %sv_any943 = getelementptr inbounds %struct.hv, %struct.hv* %730, i32 0, i32 0
  %731 = load %struct.xpvhv*, %struct.xpvhv** %sv_any943, align 8
  %xhv_max944 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %731, i32 0, i32 3
  %732 = load i64, i64* %xhv_max944, align 8
  %add945 = add i64 %732, 1
  %arrayidx946 = getelementptr inbounds %struct.he*, %struct.he** %729, i64 %add945
  %733 = bitcast %struct.he** %arrayidx946 to %struct.xpvhv_aux*
  %xhv_name_u947 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %733, i32 0, i32 0
  %xhvnameu_names948 = bitcast %union._xhvnameu* %xhv_name_u947 to %struct.hek***
  %734 = load %struct.hek**, %struct.hek*** %xhvnameu_names948, align 8
  %735 = load %struct.hek*, %struct.hek** %734, align 8
  br label %cond.end958

cond.false949:                                    ; preds = %cond.true931
  %736 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %sv_u950 = getelementptr inbounds %struct.hv, %struct.hv* %736, i32 0, i32 3
  %svu_hash951 = bitcast %union.anon.5* %sv_u950 to %struct.he***
  %737 = load %struct.he**, %struct.he*** %svu_hash951, align 8
  %738 = load %struct.hv*, %struct.hv** %curpkg, align 8
  %sv_any952 = getelementptr inbounds %struct.hv, %struct.hv* %738, i32 0, i32 0
  %739 = load %struct.xpvhv*, %struct.xpvhv** %sv_any952, align 8
  %xhv_max953 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %739, i32 0, i32 3
  %740 = load i64, i64* %xhv_max953, align 8
  %add954 = add i64 %740, 1
  %arrayidx955 = getelementptr inbounds %struct.he*, %struct.he** %737, i64 %add954
  %741 = bitcast %struct.he** %arrayidx955 to %struct.xpvhv_aux*
  %xhv_name_u956 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %741, i32 0, i32 0
  %xhvnameu_name957 = bitcast %union._xhvnameu* %xhv_name_u956 to %struct.hek**
  %742 = load %struct.hek*, %struct.hek** %xhvnameu_name957, align 8
  br label %cond.end958

cond.end958:                                      ; preds = %cond.false949, %cond.true940
  %cond959 = phi %struct.hek* [ %735, %cond.true940 ], [ %742, %cond.false949 ]
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %cond959, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  br label %cond.end961

cond.false960:                                    ; preds = %cond.false921, %cond.true912, %land.lhs.true899, %if.then895
  br label %cond.end961

cond.end961:                                      ; preds = %cond.false960, %cond.end958
  %cond962 = phi i8* [ %arraydecay, %cond.end958 ], [ null, %cond.false960 ]
  store i8* %cond962, i8** %pkgname, align 8
  %743 = load i8*, i8** %pkgname, align 8
  %call963 = call i32 @strcmp(i8* %743, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.320, i64 0, i64 0)) #6
  %tobool964 = icmp ne i32 %call963, 0
  br i1 %tobool964, label %if.then965, label %if.end970

if.then965:                                       ; preds = %cond.end961
  %744 = load i8*, i8** %pkgname, align 8
  %745 = load i8*, i8** %name, align 8
  %call966 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.321, i64 0, i64 0), i8* %744, i8* %745)
  store i8* %call966, i8** %full_name, align 8
  %746 = load i8*, i8** %full_name, align 8
  %call967 = call i64 @strlen(i8* %746) #6
  store i64 %call967, i64* %n, align 8
  %747 = load i8*, i8** %name, align 8
  call void @Perl_safesysfree(i8* %747)
  %748 = load i8*, i8** %full_name, align 8
  %749 = load i64, i64* %n, align 8
  %conv968 = trunc i64 %749 to i32
  %call969 = call i8* @Perl_savepvn(i8* %748, i32 %conv968)
  store i8* %call969, i8** %name, align 8
  br label %if.end970

if.end970:                                        ; preds = %if.then965, %cond.end961
  br label %if.end971

if.end971:                                        ; preds = %if.end970, %land.lhs.true892, %if.end890
  %750 = load %struct.sv*, %struct.sv** %listsv, align 8
  %751 = load i64, i64* %value, align 8
  %cmp972 = icmp eq i64 %751, 112
  %752 = zext i1 %cmp972 to i64
  %cond974 = select i1 %cmp972, i32 43, i32 33
  %753 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8975 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %753, i32 0, i32 25
  %754 = load i32, i32* %utf8975, align 8
  %tobool976 = icmp ne i32 %754, 0
  %755 = zext i1 %tobool976 to i64
  %cond977 = select i1 %tobool976, i32 1, i32 0
  %tobool978 = icmp ne i32 %cond977, 0
  %756 = zext i1 %tobool978 to i64
  %cond979 = select i1 %tobool978, i32 1, i32 0
  %757 = load i64, i64* %n, align 8
  %758 = load i8*, i8** %name, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %750, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.322, i64 0, i64 0), i32 %cond974, i32 %cond979, i64 %757, i8* %758)
  store i8 1, i8* %has_user_defined_property, align 1
  %759 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags980 = getelementptr inbounds %struct.regnode, %struct.regnode* %759, i32 0, i32 0
  %760 = load i8, i8* %flags980, align 2
  %conv981 = zext i8 %760 to i32
  %or = or i32 %conv981, 32
  %conv982 = trunc i32 %or to i8
  store i8 %conv982, i8* %flags980, align 2
  br label %if.end1007

if.else983:                                       ; preds = %lor.lhs.false830
  %761 = load i8, i8* %swash_init_flags, align 1
  %conv984 = zext i8 %761 to i32
  %and985 = and i32 %conv984, 1
  %tobool986 = icmp ne i32 %and985, 0
  br i1 %tobool986, label %if.then987, label %if.else988

if.then987:                                       ; preds = %if.else983
  store i8 1, i8* %has_user_defined_property, align 1
  br label %if.end1001

if.else988:                                       ; preds = %if.else983
  %762 = load %struct.sv*, %struct.sv** %invlist, align 8
  %call989 = call zeroext i1 @S__invlist_contains_cp(%struct.sv* %762, i64 1114112)
  br i1 %call989, label %land.lhs.true991, label %if.end1000

land.lhs.true991:                                 ; preds = %if.else988
  %763 = load %struct.sv*, %struct.sv** %invlist, align 8
  %call992 = call i64 @S__invlist_len(%struct.sv* %763)
  %cmp993 = icmp eq i64 %call992, 1
  br i1 %cmp993, label %land.lhs.true995, label %if.then999

land.lhs.true995:                                 ; preds = %land.lhs.true991
  %764 = load %struct.sv*, %struct.sv** %invlist, align 8
  %call996 = call i64* @S_invlist_array(%struct.sv* %764)
  %765 = load i64, i64* %call996, align 8
  %cmp997 = icmp eq i64 %765, 0
  br i1 %cmp997, label %if.end1000, label %if.then999

if.then999:                                       ; preds = %land.lhs.true995, %land.lhs.true991
  store i8 1, i8* %warn_super, align 1
  br label %if.end1000

if.end1000:                                       ; preds = %if.then999, %land.lhs.true995, %if.else988
  br label %if.end1001

if.end1001:                                       ; preds = %if.end1000, %if.then987
  %766 = load i64, i64* %value, align 8
  %cmp1002 = icmp eq i64 %766, 80
  br i1 %cmp1002, label %if.then1004, label %if.else1005

if.then1004:                                      ; preds = %if.end1001
  %767 = load %struct.sv*, %struct.sv** %properties, align 8
  %768 = load %struct.sv*, %struct.sv** %invlist, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %767, %struct.sv* %768, i1 zeroext true, %struct.sv** %properties)
  %769 = load %struct.sv*, %struct.sv** %swash, align 8
  %770 = bitcast %struct.sv* %769 to i8*
  %771 = bitcast i8* %770 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %771)
  store %struct.sv* null, %struct.sv** %swash, align 8
  br label %if.end1006

if.else1005:                                      ; preds = %if.end1001
  %772 = load %struct.sv*, %struct.sv** %properties, align 8
  %773 = load %struct.sv*, %struct.sv** %invlist, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %772, %struct.sv* %773, i1 zeroext false, %struct.sv** %properties)
  br label %if.end1006

if.end1006:                                       ; preds = %if.else1005, %if.then1004
  br label %if.end1007

if.end1007:                                       ; preds = %if.end1006, %if.end971
  %774 = load i8*, i8** %name, align 8
  call void @Perl_safesysfree(i8* %774)
  br label %if.end1008

if.end1008:                                       ; preds = %if.end1007, %if.end782
  %775 = load i8*, i8** %e, align 8
  %add.ptr1009 = getelementptr inbounds i8, i8* %775, i64 1
  %776 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1010 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %776, i32 0, i32 8
  store i8* %add.ptr1009, i8** %parse1010, align 8
  store i64 34, i64* %namedclass, align 8
  %777 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %uni_semantics = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %777, i32 0, i32 27
  store i32 1, i32* %uni_semantics, align 8
  br label %sw.epilog

sw.bb1011:                                        ; preds = %if.then315
  store i64 10, i64* %value, align 8
  br label %sw.epilog

sw.bb1012:                                        ; preds = %if.then315
  store i64 13, i64* %value, align 8
  br label %sw.epilog

sw.bb1013:                                        ; preds = %if.then315
  store i64 9, i64* %value, align 8
  br label %sw.epilog

sw.bb1014:                                        ; preds = %if.then315
  store i64 12, i64* %value, align 8
  br label %sw.epilog

sw.bb1015:                                        ; preds = %if.then315
  store i64 8, i64* %value, align 8
  br label %sw.epilog

sw.bb1016:                                        ; preds = %if.then315
  store i64 27, i64* %value, align 8
  br label %sw.epilog

sw.bb1017:                                        ; preds = %if.then315
  store i64 7, i64* %value, align 8
  br label %sw.epilog

sw.bb1018:                                        ; preds = %if.then315
  %778 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1019 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %778, i32 0, i32 8
  %779 = load i8*, i8** %parse1019, align 8
  %incdec.ptr1020 = getelementptr inbounds i8, i8* %779, i32 -1
  store i8* %incdec.ptr1020, i8** %parse1019, align 8
  %780 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1021 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %780, i32 0, i32 8
  %781 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1022 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %781, i32 0, i32 12
  %782 = load %struct.regnode*, %struct.regnode** %emit1022, align 8
  %783 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1023 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %783, i32 0, i32 13
  %784 = bitcast %struct.regnode_ssc* %emit_dummy1023 to %struct.regnode*
  %cmp1024 = icmp eq %struct.regnode* %782, %784
  %lnot = xor i1 %cmp1024, true
  %785 = load i8, i8* %strict.addr, align 1
  %tobool1026 = trunc i8 %785 to i1
  %786 = load i8, i8* %silence_non_portable.addr, align 1
  %tobool1027 = trunc i8 %786 to i1
  %787 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81028 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %787, i32 0, i32 25
  %788 = load i32, i32* %utf81028, align 8
  %tobool1029 = icmp ne i32 %788, 0
  %789 = zext i1 %tobool1029 to i64
  %cond1030 = select i1 %tobool1029, i32 1, i32 0
  %tobool1031 = icmp ne i32 %cond1030, 0
  %call1032 = call zeroext i1 @S_grok_bslash_o(i8** %parse1021, i64* %value, i8** %error_msg, i1 zeroext %lnot, i1 zeroext %tobool1026, i1 zeroext %tobool1027, i1 zeroext %tobool1031)
  %frombool1033 = zext i1 %call1032 to i8
  store i8 %frombool1033, i8* %valid, align 1
  %790 = load i8, i8* %valid, align 1
  %tobool1034 = trunc i8 %790 to i1
  br i1 %tobool1034, label %if.end1081, label %if.then1035

if.then1035:                                      ; preds = %sw.bb1018
  br label %do.body1036

do.body1036:                                      ; preds = %if.then1035
  %791 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1037 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %791, i32 0, i32 12
  %792 = load %struct.regnode*, %struct.regnode** %emit1037, align 8
  %793 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1038 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %793, i32 0, i32 13
  %794 = bitcast %struct.regnode_ssc* %emit_dummy1038 to %struct.regnode*
  %cmp1039 = icmp eq %struct.regnode* %792, %794
  br i1 %cmp1039, label %if.end1043, label %if.then1041

if.then1041:                                      ; preds = %do.body1036
  %795 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1042 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %795, i32 0, i32 3
  %796 = load %struct.p5rx*, %struct.p5rx** %rx_sv1042, align 8
  %797 = bitcast %struct.p5rx* %796 to i8*
  %798 = bitcast i8* %797 to %struct.sv*
  %799 = bitcast %struct.sv* %798 to i8*
  call void @Perl_save_pushptr(i8* %799, i32 11)
  br label %if.end1043

if.end1043:                                       ; preds = %if.then1041, %do.body1036
  br label %do.body1044

do.body1044:                                      ; preds = %if.end1043
  %800 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1046 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %800, i32 0, i32 8
  %801 = load i8*, i8** %parse1046, align 8
  %802 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1047 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %802, i32 0, i32 7
  %803 = load i8*, i8** %end1047, align 8
  %cmp1048 = icmp ugt i8* %801, %803
  br i1 %cmp1048, label %cond.true1050, label %cond.false1052

cond.true1050:                                    ; preds = %do.body1044
  %804 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1051 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %804, i32 0, i32 7
  %805 = load i8*, i8** %end1051, align 8
  br label %cond.end1054

cond.false1052:                                   ; preds = %do.body1044
  %806 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1053 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %806, i32 0, i32 8
  %807 = load i8*, i8** %parse1053, align 8
  br label %cond.end1054

cond.end1054:                                     ; preds = %cond.false1052, %cond.true1050
  %cond1055 = phi i8* [ %805, %cond.true1050 ], [ %807, %cond.false1052 ]
  %808 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1056 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %808, i32 0, i32 2
  %809 = load i8*, i8** %precomp1056, align 8
  %sub.ptr.lhs.cast1057 = ptrtoint i8* %cond1055 to i64
  %sub.ptr.rhs.cast1058 = ptrtoint i8* %809 to i64
  %sub.ptr.sub1059 = sub i64 %sub.ptr.lhs.cast1057, %sub.ptr.rhs.cast1058
  store i64 %sub.ptr.sub1059, i64* %offset1045, align 8
  %810 = load i8*, i8** %error_msg, align 8
  %811 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81060 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %811, i32 0, i32 25
  %812 = load i32, i32* %utf81060, align 8
  %tobool1061 = icmp ne i32 %812, 0
  %813 = zext i1 %tobool1061 to i64
  %cond1062 = select i1 %tobool1061, i32 1, i32 0
  %tobool1063 = icmp ne i32 %cond1062, 0
  %814 = zext i1 %tobool1063 to i64
  %cond1064 = select i1 %tobool1063, i32 1, i32 0
  %815 = load i64, i64* %offset1045, align 8
  %816 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1065 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %816, i32 0, i32 2
  %817 = load i8*, i8** %precomp1065, align 8
  %818 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81066 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %818, i32 0, i32 25
  %819 = load i32, i32* %utf81066, align 8
  %tobool1067 = icmp ne i32 %819, 0
  %820 = zext i1 %tobool1067 to i64
  %cond1068 = select i1 %tobool1067, i32 1, i32 0
  %tobool1069 = icmp ne i32 %cond1068, 0
  %821 = zext i1 %tobool1069 to i64
  %cond1070 = select i1 %tobool1069, i32 1, i32 0
  %822 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1071 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %822, i32 0, i32 7
  %823 = load i8*, i8** %end1071, align 8
  %824 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1072 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %824, i32 0, i32 2
  %825 = load i8*, i8** %precomp1072, align 8
  %sub.ptr.lhs.cast1073 = ptrtoint i8* %823 to i64
  %sub.ptr.rhs.cast1074 = ptrtoint i8* %825 to i64
  %sub.ptr.sub1075 = sub i64 %sub.ptr.lhs.cast1073, %sub.ptr.rhs.cast1074
  %826 = load i64, i64* %offset1045, align 8
  %sub1076 = sub nsw i64 %sub.ptr.sub1075, %826
  %827 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1077 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %827, i32 0, i32 2
  %828 = load i8*, i8** %precomp1077, align 8
  %829 = load i64, i64* %offset1045, align 8
  %add.ptr1078 = getelementptr inbounds i8, i8* %828, i64 %829
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* %810, i32 %cond1064, i64 %815, i8* %817, i32 %cond1070, i64 %sub1076, i8* %add.ptr1078)
  br label %do.end1079

do.end1079:                                       ; preds = %cond.end1054
  br label %do.end1080

do.end1080:                                       ; preds = %do.end1079
  br label %if.end1081

if.end1081:                                       ; preds = %do.end1080, %sw.bb1018
  %830 = load i32, i32* %non_portable_endpoint, align 4
  %inc1082 = add i32 %830, 1
  store i32 %inc1082, i32* %non_portable_endpoint, align 4
  %831 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool1083 = icmp ne %struct.sv* %831, null
  br i1 %tobool1083, label %cond.true1090, label %lor.lhs.false1084

lor.lhs.false1084:                                ; preds = %if.end1081
  %832 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool1085 = icmp ne %struct.sv* %832, null
  br i1 %tobool1085, label %land.lhs.true1086, label %cond.false1091

land.lhs.true1086:                                ; preds = %lor.lhs.false1084
  %call1087 = call %struct.sv* @Perl__get_encoding()
  %cmp1088 = icmp ne %struct.sv* %call1087, null
  br i1 %cmp1088, label %cond.true1090, label %cond.false1091

cond.true1090:                                    ; preds = %land.lhs.true1086, %if.end1081
  br i1 true, label %land.lhs.true1092, label %if.end1096

cond.false1091:                                   ; preds = %land.lhs.true1086, %lor.lhs.false1084
  br i1 false, label %land.lhs.true1092, label %if.end1096

land.lhs.true1092:                                ; preds = %cond.false1091, %cond.true1090
  %833 = load i64, i64* %value, align 8
  %cmp1093 = icmp ult i64 %833, 256
  br i1 %cmp1093, label %if.then1095, label %if.end1096

if.then1095:                                      ; preds = %land.lhs.true1092
  br label %recode_encoding

if.end1096:                                       ; preds = %land.lhs.true1092, %cond.false1091, %cond.true1090
  br label %sw.epilog

sw.bb1097:                                        ; preds = %if.then315
  %834 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1098 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %834, i32 0, i32 8
  %835 = load i8*, i8** %parse1098, align 8
  %incdec.ptr1099 = getelementptr inbounds i8, i8* %835, i32 -1
  store i8* %incdec.ptr1099, i8** %parse1098, align 8
  %836 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1102 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %836, i32 0, i32 8
  %837 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1103 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %837, i32 0, i32 12
  %838 = load %struct.regnode*, %struct.regnode** %emit1103, align 8
  %839 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1104 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %839, i32 0, i32 13
  %840 = bitcast %struct.regnode_ssc* %emit_dummy1104 to %struct.regnode*
  %cmp1105 = icmp eq %struct.regnode* %838, %840
  %lnot1107 = xor i1 %cmp1105, true
  %841 = load i8, i8* %strict.addr, align 1
  %tobool1108 = trunc i8 %841 to i1
  %842 = load i8, i8* %silence_non_portable.addr, align 1
  %tobool1109 = trunc i8 %842 to i1
  %843 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81110 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %843, i32 0, i32 25
  %844 = load i32, i32* %utf81110, align 8
  %tobool1111 = icmp ne i32 %844, 0
  %845 = zext i1 %tobool1111 to i64
  %cond1112 = select i1 %tobool1111, i32 1, i32 0
  %tobool1113 = icmp ne i32 %cond1112, 0
  %call1114 = call zeroext i1 @S_grok_bslash_x(i8** %parse1102, i64* %value, i8** %error_msg1100, i1 zeroext %lnot1107, i1 zeroext %tobool1108, i1 zeroext %tobool1109, i1 zeroext %tobool1113)
  %frombool1115 = zext i1 %call1114 to i8
  store i8 %frombool1115, i8* %valid1101, align 1
  %846 = load i8, i8* %valid1101, align 1
  %tobool1116 = trunc i8 %846 to i1
  br i1 %tobool1116, label %if.end1163, label %if.then1117

if.then1117:                                      ; preds = %sw.bb1097
  br label %do.body1118

do.body1118:                                      ; preds = %if.then1117
  %847 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1119 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %847, i32 0, i32 12
  %848 = load %struct.regnode*, %struct.regnode** %emit1119, align 8
  %849 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1120 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %849, i32 0, i32 13
  %850 = bitcast %struct.regnode_ssc* %emit_dummy1120 to %struct.regnode*
  %cmp1121 = icmp eq %struct.regnode* %848, %850
  br i1 %cmp1121, label %if.end1125, label %if.then1123

if.then1123:                                      ; preds = %do.body1118
  %851 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1124 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %851, i32 0, i32 3
  %852 = load %struct.p5rx*, %struct.p5rx** %rx_sv1124, align 8
  %853 = bitcast %struct.p5rx* %852 to i8*
  %854 = bitcast i8* %853 to %struct.sv*
  %855 = bitcast %struct.sv* %854 to i8*
  call void @Perl_save_pushptr(i8* %855, i32 11)
  br label %if.end1125

if.end1125:                                       ; preds = %if.then1123, %do.body1118
  br label %do.body1126

do.body1126:                                      ; preds = %if.end1125
  %856 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1128 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %856, i32 0, i32 8
  %857 = load i8*, i8** %parse1128, align 8
  %858 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1129 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %858, i32 0, i32 7
  %859 = load i8*, i8** %end1129, align 8
  %cmp1130 = icmp ugt i8* %857, %859
  br i1 %cmp1130, label %cond.true1132, label %cond.false1134

cond.true1132:                                    ; preds = %do.body1126
  %860 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1133 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %860, i32 0, i32 7
  %861 = load i8*, i8** %end1133, align 8
  br label %cond.end1136

cond.false1134:                                   ; preds = %do.body1126
  %862 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1135 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %862, i32 0, i32 8
  %863 = load i8*, i8** %parse1135, align 8
  br label %cond.end1136

cond.end1136:                                     ; preds = %cond.false1134, %cond.true1132
  %cond1137 = phi i8* [ %861, %cond.true1132 ], [ %863, %cond.false1134 ]
  %864 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1138 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %864, i32 0, i32 2
  %865 = load i8*, i8** %precomp1138, align 8
  %sub.ptr.lhs.cast1139 = ptrtoint i8* %cond1137 to i64
  %sub.ptr.rhs.cast1140 = ptrtoint i8* %865 to i64
  %sub.ptr.sub1141 = sub i64 %sub.ptr.lhs.cast1139, %sub.ptr.rhs.cast1140
  store i64 %sub.ptr.sub1141, i64* %offset1127, align 8
  %866 = load i8*, i8** %error_msg1100, align 8
  %867 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81142 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %867, i32 0, i32 25
  %868 = load i32, i32* %utf81142, align 8
  %tobool1143 = icmp ne i32 %868, 0
  %869 = zext i1 %tobool1143 to i64
  %cond1144 = select i1 %tobool1143, i32 1, i32 0
  %tobool1145 = icmp ne i32 %cond1144, 0
  %870 = zext i1 %tobool1145 to i64
  %cond1146 = select i1 %tobool1145, i32 1, i32 0
  %871 = load i64, i64* %offset1127, align 8
  %872 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1147 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %872, i32 0, i32 2
  %873 = load i8*, i8** %precomp1147, align 8
  %874 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81148 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %874, i32 0, i32 25
  %875 = load i32, i32* %utf81148, align 8
  %tobool1149 = icmp ne i32 %875, 0
  %876 = zext i1 %tobool1149 to i64
  %cond1150 = select i1 %tobool1149, i32 1, i32 0
  %tobool1151 = icmp ne i32 %cond1150, 0
  %877 = zext i1 %tobool1151 to i64
  %cond1152 = select i1 %tobool1151, i32 1, i32 0
  %878 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1153 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %878, i32 0, i32 7
  %879 = load i8*, i8** %end1153, align 8
  %880 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1154 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %880, i32 0, i32 2
  %881 = load i8*, i8** %precomp1154, align 8
  %sub.ptr.lhs.cast1155 = ptrtoint i8* %879 to i64
  %sub.ptr.rhs.cast1156 = ptrtoint i8* %881 to i64
  %sub.ptr.sub1157 = sub i64 %sub.ptr.lhs.cast1155, %sub.ptr.rhs.cast1156
  %882 = load i64, i64* %offset1127, align 8
  %sub1158 = sub nsw i64 %sub.ptr.sub1157, %882
  %883 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1159 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %883, i32 0, i32 2
  %884 = load i8*, i8** %precomp1159, align 8
  %885 = load i64, i64* %offset1127, align 8
  %add.ptr1160 = getelementptr inbounds i8, i8* %884, i64 %885
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* %866, i32 %cond1146, i64 %871, i8* %873, i32 %cond1152, i64 %sub1158, i8* %add.ptr1160)
  br label %do.end1161

do.end1161:                                       ; preds = %cond.end1136
  br label %do.end1162

do.end1162:                                       ; preds = %do.end1161
  br label %if.end1163

if.end1163:                                       ; preds = %do.end1162, %sw.bb1097
  %886 = load i32, i32* %non_portable_endpoint, align 4
  %inc1164 = add i32 %886, 1
  store i32 %inc1164, i32* %non_portable_endpoint, align 4
  %887 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool1165 = icmp ne %struct.sv* %887, null
  br i1 %tobool1165, label %cond.true1172, label %lor.lhs.false1166

lor.lhs.false1166:                                ; preds = %if.end1163
  %888 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool1167 = icmp ne %struct.sv* %888, null
  br i1 %tobool1167, label %land.lhs.true1168, label %cond.false1173

land.lhs.true1168:                                ; preds = %lor.lhs.false1166
  %call1169 = call %struct.sv* @Perl__get_encoding()
  %cmp1170 = icmp ne %struct.sv* %call1169, null
  br i1 %cmp1170, label %cond.true1172, label %cond.false1173

cond.true1172:                                    ; preds = %land.lhs.true1168, %if.end1163
  br i1 true, label %land.lhs.true1174, label %if.end1178

cond.false1173:                                   ; preds = %land.lhs.true1168, %lor.lhs.false1166
  br i1 false, label %land.lhs.true1174, label %if.end1178

land.lhs.true1174:                                ; preds = %cond.false1173, %cond.true1172
  %889 = load i64, i64* %value, align 8
  %cmp1175 = icmp ult i64 %889, 256
  br i1 %cmp1175, label %if.then1177, label %if.end1178

if.then1177:                                      ; preds = %land.lhs.true1174
  br label %recode_encoding

if.end1178:                                       ; preds = %land.lhs.true1174, %cond.false1173, %cond.true1172
  br label %sw.epilog

sw.bb1179:                                        ; preds = %if.then315
  %890 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1180 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %890, i32 0, i32 8
  %891 = load i8*, i8** %parse1180, align 8
  %incdec.ptr1181 = getelementptr inbounds i8, i8* %891, i32 1
  store i8* %incdec.ptr1181, i8** %parse1180, align 8
  %892 = load i8, i8* %891, align 1
  %893 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1182 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %893, i32 0, i32 12
  %894 = load %struct.regnode*, %struct.regnode** %emit1182, align 8
  %895 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1183 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %895, i32 0, i32 13
  %896 = bitcast %struct.regnode_ssc* %emit_dummy1183 to %struct.regnode*
  %cmp1184 = icmp eq %struct.regnode* %894, %896
  %lnot1186 = xor i1 %cmp1184, true
  %call1187 = call signext i8 @S_grok_bslash_c(i8 signext %892, i1 zeroext %lnot1186)
  %conv1188 = sext i8 %call1187 to i64
  store i64 %conv1188, i64* %value, align 8
  %897 = load i32, i32* %non_portable_endpoint, align 4
  %inc1189 = add i32 %897, 1
  store i32 %inc1189, i32* %non_portable_endpoint, align 4
  br label %sw.epilog

sw.bb1190:                                        ; preds = %if.then315, %if.then315, %if.then315, %if.then315, %if.then315, %if.then315, %if.then315, %if.then315
  store i32 4, i32* %flags1191, align 4
  %898 = load i8, i8* %strict.addr, align 1
  %tobool1192 = trunc i8 %898 to i1
  %899 = zext i1 %tobool1192 to i64
  %cond1194 = select i1 %tobool1192, i32 4, i32 3
  %conv1195 = sext i32 %cond1194 to i64
  store i64 %conv1195, i64* %numlen, align 8
  %900 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1196 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %900, i32 0, i32 8
  %901 = load i8*, i8** %parse1196, align 8
  %incdec.ptr1197 = getelementptr inbounds i8, i8* %901, i32 -1
  store i8* %incdec.ptr1197, i8** %parse1196, align 8
  %call1198 = call i64 @Perl_grok_oct(i8* %incdec.ptr1197, i64* %numlen, i32* %flags1191, double* null)
  store i64 %call1198, i64* %value, align 8
  %902 = load i64, i64* %numlen, align 8
  %903 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1199 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %903, i32 0, i32 8
  %904 = load i8*, i8** %parse1199, align 8
  %add.ptr1200 = getelementptr inbounds i8, i8* %904, i64 %902
  store i8* %add.ptr1200, i8** %parse1199, align 8
  %905 = load i64, i64* %numlen, align 8
  %cmp1201 = icmp ne i64 %905, 3
  br i1 %cmp1201, label %if.then1203, label %if.end1325

if.then1203:                                      ; preds = %sw.bb1190
  %906 = load i8, i8* %strict.addr, align 1
  %tobool1204 = trunc i8 %906 to i1
  br i1 %tobool1204, label %if.then1205, label %if.else1265

if.then1205:                                      ; preds = %if.then1203
  %907 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81206 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %907, i32 0, i32 25
  %908 = load i32, i32* %utf81206, align 8
  %tobool1207 = icmp ne i32 %908, 0
  br i1 %tobool1207, label %cond.true1208, label %cond.false1209

cond.true1208:                                    ; preds = %if.then1205
  br i1 true, label %cond.true1210, label %cond.false1215

cond.false1209:                                   ; preds = %if.then1205
  br i1 false, label %cond.true1210, label %cond.false1215

cond.true1210:                                    ; preds = %cond.false1209, %cond.true1208
  %909 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1211 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %909, i32 0, i32 8
  %910 = load i8*, i8** %parse1211, align 8
  %911 = load i8, i8* %910, align 1
  %idxprom1212 = zext i8 %911 to i64
  %arrayidx1213 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom1212
  %912 = load i8, i8* %arrayidx1213, align 1
  %conv1214 = zext i8 %912 to i32
  br label %cond.end1216

cond.false1215:                                   ; preds = %cond.false1209, %cond.true1208
  br label %cond.end1216

cond.end1216:                                     ; preds = %cond.false1215, %cond.true1210
  %cond1217 = phi i32 [ %conv1214, %cond.true1210 ], [ 1, %cond.false1215 ]
  %913 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1218 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %913, i32 0, i32 8
  %914 = load i8*, i8** %parse1218, align 8
  %idx.ext = sext i32 %cond1217 to i64
  %add.ptr1219 = getelementptr inbounds i8, i8* %914, i64 %idx.ext
  store i8* %add.ptr1219, i8** %parse1218, align 8
  br label %do.body1220

do.body1220:                                      ; preds = %cond.end1216
  %915 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1221 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %915, i32 0, i32 12
  %916 = load %struct.regnode*, %struct.regnode** %emit1221, align 8
  %917 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1222 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %917, i32 0, i32 13
  %918 = bitcast %struct.regnode_ssc* %emit_dummy1222 to %struct.regnode*
  %cmp1223 = icmp eq %struct.regnode* %916, %918
  br i1 %cmp1223, label %if.end1227, label %if.then1225

if.then1225:                                      ; preds = %do.body1220
  %919 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1226 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %919, i32 0, i32 3
  %920 = load %struct.p5rx*, %struct.p5rx** %rx_sv1226, align 8
  %921 = bitcast %struct.p5rx* %920 to i8*
  %922 = bitcast i8* %921 to %struct.sv*
  %923 = bitcast %struct.sv* %922 to i8*
  call void @Perl_save_pushptr(i8* %923, i32 11)
  br label %if.end1227

if.end1227:                                       ; preds = %if.then1225, %do.body1220
  br label %do.body1228

do.body1228:                                      ; preds = %if.end1227
  %924 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1230 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %924, i32 0, i32 8
  %925 = load i8*, i8** %parse1230, align 8
  %926 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1231 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %926, i32 0, i32 7
  %927 = load i8*, i8** %end1231, align 8
  %cmp1232 = icmp ugt i8* %925, %927
  br i1 %cmp1232, label %cond.true1234, label %cond.false1236

cond.true1234:                                    ; preds = %do.body1228
  %928 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1235 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %928, i32 0, i32 7
  %929 = load i8*, i8** %end1235, align 8
  br label %cond.end1238

cond.false1236:                                   ; preds = %do.body1228
  %930 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1237 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %930, i32 0, i32 8
  %931 = load i8*, i8** %parse1237, align 8
  br label %cond.end1238

cond.end1238:                                     ; preds = %cond.false1236, %cond.true1234
  %cond1239 = phi i8* [ %929, %cond.true1234 ], [ %931, %cond.false1236 ]
  %932 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1240 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %932, i32 0, i32 2
  %933 = load i8*, i8** %precomp1240, align 8
  %sub.ptr.lhs.cast1241 = ptrtoint i8* %cond1239 to i64
  %sub.ptr.rhs.cast1242 = ptrtoint i8* %933 to i64
  %sub.ptr.sub1243 = sub i64 %sub.ptr.lhs.cast1241, %sub.ptr.rhs.cast1242
  store i64 %sub.ptr.sub1243, i64* %offset1229, align 8
  %934 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81244 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %934, i32 0, i32 25
  %935 = load i32, i32* %utf81244, align 8
  %tobool1245 = icmp ne i32 %935, 0
  %936 = zext i1 %tobool1245 to i64
  %cond1246 = select i1 %tobool1245, i32 1, i32 0
  %tobool1247 = icmp ne i32 %cond1246, 0
  %937 = zext i1 %tobool1247 to i64
  %cond1248 = select i1 %tobool1247, i32 1, i32 0
  %938 = load i64, i64* %offset1229, align 8
  %939 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1249 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %939, i32 0, i32 2
  %940 = load i8*, i8** %precomp1249, align 8
  %941 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81250 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %941, i32 0, i32 25
  %942 = load i32, i32* %utf81250, align 8
  %tobool1251 = icmp ne i32 %942, 0
  %943 = zext i1 %tobool1251 to i64
  %cond1252 = select i1 %tobool1251, i32 1, i32 0
  %tobool1253 = icmp ne i32 %cond1252, 0
  %944 = zext i1 %tobool1253 to i64
  %cond1254 = select i1 %tobool1253, i32 1, i32 0
  %945 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1255 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %945, i32 0, i32 7
  %946 = load i8*, i8** %end1255, align 8
  %947 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1256 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %947, i32 0, i32 2
  %948 = load i8*, i8** %precomp1256, align 8
  %sub.ptr.lhs.cast1257 = ptrtoint i8* %946 to i64
  %sub.ptr.rhs.cast1258 = ptrtoint i8* %948 to i64
  %sub.ptr.sub1259 = sub i64 %sub.ptr.lhs.cast1257, %sub.ptr.rhs.cast1258
  %949 = load i64, i64* %offset1229, align 8
  %sub1260 = sub nsw i64 %sub.ptr.sub1259, %949
  %950 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1261 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %950, i32 0, i32 2
  %951 = load i8*, i8** %precomp1261, align 8
  %952 = load i64, i64* %offset1229, align 8
  %add.ptr1262 = getelementptr inbounds i8, i8* %951, i64 %952
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.323, i64 0, i64 0), i32 %cond1248, i64 %938, i8* %940, i32 %cond1254, i64 %sub1260, i8* %add.ptr1262)
  br label %do.end1263

do.end1263:                                       ; preds = %cond.end1238
  br label %do.end1264

do.end1264:                                       ; preds = %do.end1263
  br label %if.end1324

if.else1265:                                      ; preds = %if.then1203
  %953 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1266 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %953, i32 0, i32 12
  %954 = load %struct.regnode*, %struct.regnode** %emit1266, align 8
  %955 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1267 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %955, i32 0, i32 13
  %956 = bitcast %struct.regnode_ssc* %emit_dummy1267 to %struct.regnode*
  %cmp1268 = icmp eq %struct.regnode* %954, %956
  br i1 %cmp1268, label %if.end1323, label %land.lhs.true1270

land.lhs.true1270:                                ; preds = %if.else1265
  %957 = load i64, i64* %numlen, align 8
  %cmp1271 = icmp ult i64 %957, 3
  br i1 %cmp1271, label %land.lhs.true1273, label %if.end1323

land.lhs.true1273:                                ; preds = %land.lhs.true1270
  %958 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1274 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %958, i32 0, i32 8
  %959 = load i8*, i8** %parse1274, align 8
  %960 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1275 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %960, i32 0, i32 7
  %961 = load i8*, i8** %end1275, align 8
  %cmp1276 = icmp ult i8* %959, %961
  br i1 %cmp1276, label %land.lhs.true1278, label %if.end1323

land.lhs.true1278:                                ; preds = %land.lhs.true1273
  %962 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1279 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %962, i32 0, i32 8
  %963 = load i8*, i8** %parse1279, align 8
  %964 = load i8, i8* %963, align 1
  %idxprom1280 = zext i8 %964 to i64
  %arrayidx1281 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom1280
  %965 = load i32, i32* %arrayidx1281, align 4
  %and1282 = and i32 %965, 2
  %tobool1283 = icmp ne i32 %and1282, 0
  br i1 %tobool1283, label %cond.true1284, label %cond.false1285

cond.true1284:                                    ; preds = %land.lhs.true1278
  br i1 true, label %land.lhs.true1286, label %if.end1323

cond.false1285:                                   ; preds = %land.lhs.true1278
  br i1 false, label %land.lhs.true1286, label %if.end1323

land.lhs.true1286:                                ; preds = %cond.false1285, %cond.true1284
  %call1287 = call zeroext i1 @Perl_ckwarn(i32 20)
  br i1 %call1287, label %if.then1289, label %if.end1323

if.then1289:                                      ; preds = %land.lhs.true1286
  %966 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1290 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %966, i32 0, i32 3
  %967 = load %struct.p5rx*, %struct.p5rx** %rx_sv1290, align 8
  %968 = bitcast %struct.p5rx* %967 to i8*
  %969 = bitcast i8* %968 to %struct.sv*
  %970 = bitcast %struct.sv* %969 to i8*
  call void @Perl_save_pushptr(i8* %970, i32 11)
  br label %do.body1291

do.body1291:                                      ; preds = %if.then1289
  %971 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1293 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %971, i32 0, i32 8
  %972 = load i8*, i8** %parse1293, align 8
  %add.ptr1294 = getelementptr inbounds i8, i8* %972, i64 1
  %973 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1295 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %973, i32 0, i32 2
  %974 = load i8*, i8** %precomp1295, align 8
  %sub.ptr.lhs.cast1296 = ptrtoint i8* %add.ptr1294 to i64
  %sub.ptr.rhs.cast1297 = ptrtoint i8* %974 to i64
  %sub.ptr.sub1298 = sub i64 %sub.ptr.lhs.cast1296, %sub.ptr.rhs.cast1297
  store i64 %sub.ptr.sub1298, i64* %offset1292, align 8
  %975 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1299 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %975, i32 0, i32 8
  %976 = load i8*, i8** %parse1299, align 8
  %977 = load i64, i64* %numlen, align 8
  %call1300 = call i8* @S_form_short_octal_warning(i8* %976, i64 %977)
  %978 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81301 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %978, i32 0, i32 25
  %979 = load i32, i32* %utf81301, align 8
  %tobool1302 = icmp ne i32 %979, 0
  %980 = zext i1 %tobool1302 to i64
  %cond1303 = select i1 %tobool1302, i32 1, i32 0
  %tobool1304 = icmp ne i32 %cond1303, 0
  %981 = zext i1 %tobool1304 to i64
  %cond1305 = select i1 %tobool1304, i32 1, i32 0
  %982 = load i64, i64* %offset1292, align 8
  %983 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1306 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %983, i32 0, i32 2
  %984 = load i8*, i8** %precomp1306, align 8
  %985 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81307 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %985, i32 0, i32 25
  %986 = load i32, i32* %utf81307, align 8
  %tobool1308 = icmp ne i32 %986, 0
  %987 = zext i1 %tobool1308 to i64
  %cond1309 = select i1 %tobool1308, i32 1, i32 0
  %tobool1310 = icmp ne i32 %cond1309, 0
  %988 = zext i1 %tobool1310 to i64
  %cond1311 = select i1 %tobool1310, i32 1, i32 0
  %989 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1312 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %989, i32 0, i32 7
  %990 = load i8*, i8** %end1312, align 8
  %991 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1313 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %991, i32 0, i32 2
  %992 = load i8*, i8** %precomp1313, align 8
  %sub.ptr.lhs.cast1314 = ptrtoint i8* %990 to i64
  %sub.ptr.rhs.cast1315 = ptrtoint i8* %992 to i64
  %sub.ptr.sub1316 = sub i64 %sub.ptr.lhs.cast1314, %sub.ptr.rhs.cast1315
  %993 = load i64, i64* %offset1292, align 8
  %sub1317 = sub nsw i64 %sub.ptr.sub1316, %993
  %994 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1318 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %994, i32 0, i32 2
  %995 = load i8*, i8** %precomp1318, align 8
  %996 = load i64, i64* %offset1292, align 8
  %add.ptr1319 = getelementptr inbounds i8, i8* %995, i64 %996
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* %call1300, i32 %cond1305, i64 %982, i8* %984, i32 %cond1311, i64 %sub1317, i8* %add.ptr1319)
  br label %do.end1320

do.end1320:                                       ; preds = %do.body1291
  %997 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1321 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %997, i32 0, i32 3
  %998 = load %struct.p5rx*, %struct.p5rx** %rx_sv1321, align 8
  %999 = bitcast %struct.p5rx* %998 to i8*
  %1000 = bitcast i8* %999 to %struct.sv*
  %call1322 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %1000)
  %1001 = bitcast %struct.sv* %call1322 to %struct.p5rx*
  br label %if.end1323

if.end1323:                                       ; preds = %do.end1320, %land.lhs.true1286, %cond.false1285, %cond.true1284, %land.lhs.true1273, %land.lhs.true1270, %if.else1265
  br label %if.end1324

if.end1324:                                       ; preds = %if.end1323, %do.end1264
  br label %if.end1325

if.end1325:                                       ; preds = %if.end1324, %sw.bb1190
  %1002 = load i32, i32* %non_portable_endpoint, align 4
  %inc1326 = add i32 %1002, 1
  store i32 %inc1326, i32* %non_portable_endpoint, align 4
  %1003 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool1327 = icmp ne %struct.sv* %1003, null
  br i1 %tobool1327, label %cond.true1334, label %lor.lhs.false1328

lor.lhs.false1328:                                ; preds = %if.end1325
  %1004 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool1329 = icmp ne %struct.sv* %1004, null
  br i1 %tobool1329, label %land.lhs.true1330, label %cond.false1335

land.lhs.true1330:                                ; preds = %lor.lhs.false1328
  %call1331 = call %struct.sv* @Perl__get_encoding()
  %cmp1332 = icmp ne %struct.sv* %call1331, null
  br i1 %cmp1332, label %cond.true1334, label %cond.false1335

cond.true1334:                                    ; preds = %land.lhs.true1330, %if.end1325
  br i1 true, label %land.lhs.true1336, label %if.end1340

cond.false1335:                                   ; preds = %land.lhs.true1330, %lor.lhs.false1328
  br i1 false, label %land.lhs.true1336, label %if.end1340

land.lhs.true1336:                                ; preds = %cond.false1335, %cond.true1334
  %1005 = load i64, i64* %value, align 8
  %cmp1337 = icmp ult i64 %1005, 256
  br i1 %cmp1337, label %if.then1339, label %if.end1340

if.then1339:                                      ; preds = %land.lhs.true1336
  br label %recode_encoding

if.end1340:                                       ; preds = %land.lhs.true1336, %cond.false1335, %cond.true1334
  br label %sw.epilog

recode_encoding:                                  ; preds = %if.then1339, %if.then1177, %if.then1095
  %1006 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %override_recoding = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1006, i32 0, i32 36
  %1007 = load i32, i32* %override_recoding, align 8
  %tobool1341 = icmp ne i32 %1007, 0
  br i1 %tobool1341, label %if.end1431, label %if.then1342

if.then1342:                                      ; preds = %recode_encoding
  %call1343 = call %struct.sv* @Perl__get_encoding()
  store %struct.sv* %call1343, %struct.sv** %enc, align 8
  %1008 = load i64, i64* %value, align 8
  %conv1344 = trunc i64 %1008 to i8
  %call1345 = call i64 @S_reg_recode(i8 signext %conv1344, %struct.sv** %enc)
  store i64 %call1345, i64* %value, align 8
  %1009 = load %struct.sv*, %struct.sv** %enc, align 8
  %tobool1346 = icmp ne %struct.sv* %1009, null
  br i1 %tobool1346, label %if.end1430, label %if.then1347

if.then1347:                                      ; preds = %if.then1342
  %1010 = load i8, i8* %strict.addr, align 1
  %tobool1348 = trunc i8 %1010 to i1
  br i1 %tobool1348, label %if.then1349, label %if.else1395

if.then1349:                                      ; preds = %if.then1347
  br label %do.body1350

do.body1350:                                      ; preds = %if.then1349
  %1011 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1351 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1011, i32 0, i32 12
  %1012 = load %struct.regnode*, %struct.regnode** %emit1351, align 8
  %1013 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1352 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1013, i32 0, i32 13
  %1014 = bitcast %struct.regnode_ssc* %emit_dummy1352 to %struct.regnode*
  %cmp1353 = icmp eq %struct.regnode* %1012, %1014
  br i1 %cmp1353, label %if.end1357, label %if.then1355

if.then1355:                                      ; preds = %do.body1350
  %1015 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1356 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1015, i32 0, i32 3
  %1016 = load %struct.p5rx*, %struct.p5rx** %rx_sv1356, align 8
  %1017 = bitcast %struct.p5rx* %1016 to i8*
  %1018 = bitcast i8* %1017 to %struct.sv*
  %1019 = bitcast %struct.sv* %1018 to i8*
  call void @Perl_save_pushptr(i8* %1019, i32 11)
  br label %if.end1357

if.end1357:                                       ; preds = %if.then1355, %do.body1350
  br label %do.body1358

do.body1358:                                      ; preds = %if.end1357
  %1020 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1360 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1020, i32 0, i32 8
  %1021 = load i8*, i8** %parse1360, align 8
  %1022 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1361 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1022, i32 0, i32 7
  %1023 = load i8*, i8** %end1361, align 8
  %cmp1362 = icmp ugt i8* %1021, %1023
  br i1 %cmp1362, label %cond.true1364, label %cond.false1366

cond.true1364:                                    ; preds = %do.body1358
  %1024 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1365 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1024, i32 0, i32 7
  %1025 = load i8*, i8** %end1365, align 8
  br label %cond.end1368

cond.false1366:                                   ; preds = %do.body1358
  %1026 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1367 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1026, i32 0, i32 8
  %1027 = load i8*, i8** %parse1367, align 8
  br label %cond.end1368

cond.end1368:                                     ; preds = %cond.false1366, %cond.true1364
  %cond1369 = phi i8* [ %1025, %cond.true1364 ], [ %1027, %cond.false1366 ]
  %1028 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1370 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1028, i32 0, i32 2
  %1029 = load i8*, i8** %precomp1370, align 8
  %sub.ptr.lhs.cast1371 = ptrtoint i8* %cond1369 to i64
  %sub.ptr.rhs.cast1372 = ptrtoint i8* %1029 to i64
  %sub.ptr.sub1373 = sub i64 %sub.ptr.lhs.cast1371, %sub.ptr.rhs.cast1372
  store i64 %sub.ptr.sub1373, i64* %offset1359, align 8
  %1030 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81374 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1030, i32 0, i32 25
  %1031 = load i32, i32* %utf81374, align 8
  %tobool1375 = icmp ne i32 %1031, 0
  %1032 = zext i1 %tobool1375 to i64
  %cond1376 = select i1 %tobool1375, i32 1, i32 0
  %tobool1377 = icmp ne i32 %cond1376, 0
  %1033 = zext i1 %tobool1377 to i64
  %cond1378 = select i1 %tobool1377, i32 1, i32 0
  %1034 = load i64, i64* %offset1359, align 8
  %1035 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1379 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1035, i32 0, i32 2
  %1036 = load i8*, i8** %precomp1379, align 8
  %1037 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81380 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1037, i32 0, i32 25
  %1038 = load i32, i32* %utf81380, align 8
  %tobool1381 = icmp ne i32 %1038, 0
  %1039 = zext i1 %tobool1381 to i64
  %cond1382 = select i1 %tobool1381, i32 1, i32 0
  %tobool1383 = icmp ne i32 %cond1382, 0
  %1040 = zext i1 %tobool1383 to i64
  %cond1384 = select i1 %tobool1383, i32 1, i32 0
  %1041 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1385 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1041, i32 0, i32 7
  %1042 = load i8*, i8** %end1385, align 8
  %1043 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1386 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1043, i32 0, i32 2
  %1044 = load i8*, i8** %precomp1386, align 8
  %sub.ptr.lhs.cast1387 = ptrtoint i8* %1042 to i64
  %sub.ptr.rhs.cast1388 = ptrtoint i8* %1044 to i64
  %sub.ptr.sub1389 = sub i64 %sub.ptr.lhs.cast1387, %sub.ptr.rhs.cast1388
  %1045 = load i64, i64* %offset1359, align 8
  %sub1390 = sub nsw i64 %sub.ptr.sub1389, %1045
  %1046 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1391 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1046, i32 0, i32 2
  %1047 = load i8*, i8** %precomp1391, align 8
  %1048 = load i64, i64* %offset1359, align 8
  %add.ptr1392 = getelementptr inbounds i8, i8* %1047, i64 %1048
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.324, i64 0, i64 0), i32 %cond1378, i64 %1034, i8* %1036, i32 %cond1384, i64 %sub1390, i8* %add.ptr1392)
  br label %do.end1393

do.end1393:                                       ; preds = %cond.end1368
  br label %do.end1394

do.end1394:                                       ; preds = %do.end1393
  br label %if.end1429

if.else1395:                                      ; preds = %if.then1347
  %1049 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1396 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1049, i32 0, i32 12
  %1050 = load %struct.regnode*, %struct.regnode** %emit1396, align 8
  %1051 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1397 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1051, i32 0, i32 13
  %1052 = bitcast %struct.regnode_ssc* %emit_dummy1397 to %struct.regnode*
  %cmp1398 = icmp eq %struct.regnode* %1050, %1052
  br i1 %cmp1398, label %if.end1428, label %if.then1400

if.then1400:                                      ; preds = %if.else1395
  br label %do.body1401

do.body1401:                                      ; preds = %if.then1400
  %1053 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1403 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1053, i32 0, i32 8
  %1054 = load i8*, i8** %parse1403, align 8
  %1055 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1404 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1055, i32 0, i32 2
  %1056 = load i8*, i8** %precomp1404, align 8
  %sub.ptr.lhs.cast1405 = ptrtoint i8* %1054 to i64
  %sub.ptr.rhs.cast1406 = ptrtoint i8* %1056 to i64
  %sub.ptr.sub1407 = sub i64 %sub.ptr.lhs.cast1405, %sub.ptr.rhs.cast1406
  store i64 %sub.ptr.sub1407, i64* %offset1402, align 8
  %1057 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81408 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1057, i32 0, i32 25
  %1058 = load i32, i32* %utf81408, align 8
  %tobool1409 = icmp ne i32 %1058, 0
  %1059 = zext i1 %tobool1409 to i64
  %cond1410 = select i1 %tobool1409, i32 1, i32 0
  %tobool1411 = icmp ne i32 %cond1410, 0
  %1060 = zext i1 %tobool1411 to i64
  %cond1412 = select i1 %tobool1411, i32 1, i32 0
  %1061 = load i64, i64* %offset1402, align 8
  %1062 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1413 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1062, i32 0, i32 2
  %1063 = load i8*, i8** %precomp1413, align 8
  %1064 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81414 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1064, i32 0, i32 25
  %1065 = load i32, i32* %utf81414, align 8
  %tobool1415 = icmp ne i32 %1065, 0
  %1066 = zext i1 %tobool1415 to i64
  %cond1416 = select i1 %tobool1415, i32 1, i32 0
  %tobool1417 = icmp ne i32 %cond1416, 0
  %1067 = zext i1 %tobool1417 to i64
  %cond1418 = select i1 %tobool1417, i32 1, i32 0
  %1068 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1419 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1068, i32 0, i32 7
  %1069 = load i8*, i8** %end1419, align 8
  %1070 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1420 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1070, i32 0, i32 2
  %1071 = load i8*, i8** %precomp1420, align 8
  %sub.ptr.lhs.cast1421 = ptrtoint i8* %1069 to i64
  %sub.ptr.rhs.cast1422 = ptrtoint i8* %1071 to i64
  %sub.ptr.sub1423 = sub i64 %sub.ptr.lhs.cast1421, %sub.ptr.rhs.cast1422
  %1072 = load i64, i64* %offset1402, align 8
  %sub1424 = sub nsw i64 %sub.ptr.sub1423, %1072
  %1073 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1425 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1073, i32 0, i32 2
  %1074 = load i8*, i8** %precomp1425, align 8
  %1075 = load i64, i64* %offset1402, align 8
  %add.ptr1426 = getelementptr inbounds i8, i8* %1074, i64 %1075
  call void (i32, i8*, ...) @Perl_ck_warner(i32 20, i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.304, i64 0, i64 0), i32 %cond1412, i64 %1061, i8* %1063, i32 %cond1418, i64 %sub1424, i8* %add.ptr1426)
  br label %do.end1427

do.end1427:                                       ; preds = %do.body1401
  br label %if.end1428

if.end1428:                                       ; preds = %do.end1427, %if.else1395
  br label %if.end1429

if.end1429:                                       ; preds = %if.end1428, %do.end1394
  br label %if.end1430

if.end1430:                                       ; preds = %if.end1429, %if.then1342
  br label %sw.epilog

if.end1431:                                       ; preds = %recode_encoding
  br label %sw.default

sw.default:                                       ; preds = %if.then315, %if.end1431
  %1076 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1432 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1076, i32 0, i32 12
  %1077 = load %struct.regnode*, %struct.regnode** %emit1432, align 8
  %1078 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1433 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1078, i32 0, i32 13
  %1079 = bitcast %struct.regnode_ssc* %emit_dummy1433 to %struct.regnode*
  %cmp1434 = icmp eq %struct.regnode* %1077, %1079
  br i1 %cmp1434, label %if.end1526, label %land.lhs.true1436

land.lhs.true1436:                                ; preds = %sw.default
  %1080 = load i64, i64* %value, align 8
  %and1437 = and i64 %1080, -256
  %tobool1438 = icmp ne i64 %and1437, 0
  br i1 %tobool1438, label %if.end1526, label %land.lhs.true1439

land.lhs.true1439:                                ; preds = %land.lhs.true1436
  %1081 = load i64, i64* %value, align 8
  %conv1440 = trunc i64 %1081 to i8
  %idxprom1441 = zext i8 %conv1440 to i64
  %arrayidx1442 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom1441
  %1082 = load i32, i32* %arrayidx1442, align 4
  %and1443 = and i32 %1082, 16385
  %cmp1444 = icmp eq i32 %and1443, 16385
  br i1 %cmp1444, label %land.lhs.true1446, label %if.end1526

land.lhs.true1446:                                ; preds = %land.lhs.true1439
  %1083 = load i64, i64* %value, align 8
  %cmp1447 = icmp ne i64 %1083, 95
  br i1 %cmp1447, label %if.then1449, label %if.end1526

if.then1449:                                      ; preds = %land.lhs.true1446
  %1084 = load i8, i8* %strict.addr, align 1
  %tobool1450 = trunc i8 %1084 to i1
  br i1 %tobool1450, label %if.then1451, label %if.else1493

if.then1451:                                      ; preds = %if.then1449
  br label %do.body1452

do.body1452:                                      ; preds = %if.then1451
  %1085 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1453 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1085, i32 0, i32 12
  %1086 = load %struct.regnode*, %struct.regnode** %emit1453, align 8
  %1087 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1454 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1087, i32 0, i32 13
  %1088 = bitcast %struct.regnode_ssc* %emit_dummy1454 to %struct.regnode*
  %cmp1455 = icmp eq %struct.regnode* %1086, %1088
  br i1 %cmp1455, label %if.end1459, label %if.then1457

if.then1457:                                      ; preds = %do.body1452
  %1089 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1458 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1089, i32 0, i32 3
  %1090 = load %struct.p5rx*, %struct.p5rx** %rx_sv1458, align 8
  %1091 = bitcast %struct.p5rx* %1090 to i8*
  %1092 = bitcast i8* %1091 to %struct.sv*
  %1093 = bitcast %struct.sv* %1092 to i8*
  call void @Perl_save_pushptr(i8* %1093, i32 11)
  br label %if.end1459

if.end1459:                                       ; preds = %if.then1457, %do.body1452
  br label %do.body1460

do.body1460:                                      ; preds = %if.end1459
  %1094 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1462 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1094, i32 0, i32 8
  %1095 = load i8*, i8** %parse1462, align 8
  %1096 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1463 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1096, i32 0, i32 2
  %1097 = load i8*, i8** %precomp1463, align 8
  %sub.ptr.lhs.cast1464 = ptrtoint i8* %1095 to i64
  %sub.ptr.rhs.cast1465 = ptrtoint i8* %1097 to i64
  %sub.ptr.sub1466 = sub i64 %sub.ptr.lhs.cast1464, %sub.ptr.rhs.cast1465
  store i64 %sub.ptr.sub1466, i64* %offset1461, align 8
  %1098 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81467 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1098, i32 0, i32 25
  %1099 = load i32, i32* %utf81467, align 8
  %tobool1468 = icmp ne i32 %1099, 0
  %1100 = zext i1 %tobool1468 to i64
  %cond1469 = select i1 %tobool1468, i32 1, i32 0
  %tobool1470 = icmp ne i32 %cond1469, 0
  %1101 = load i64, i64* %value, align 8
  %conv1471 = trunc i64 %1101 to i32
  %1102 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81472 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1102, i32 0, i32 25
  %1103 = load i32, i32* %utf81472, align 8
  %tobool1473 = icmp ne i32 %1103, 0
  %1104 = zext i1 %tobool1473 to i64
  %cond1474 = select i1 %tobool1473, i32 1, i32 0
  %tobool1475 = icmp ne i32 %cond1474, 0
  %1105 = zext i1 %tobool1475 to i64
  %cond1476 = select i1 %tobool1475, i32 1, i32 0
  %1106 = load i64, i64* %offset1461, align 8
  %1107 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1477 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1107, i32 0, i32 2
  %1108 = load i8*, i8** %precomp1477, align 8
  %1109 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81478 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1109, i32 0, i32 25
  %1110 = load i32, i32* %utf81478, align 8
  %tobool1479 = icmp ne i32 %1110, 0
  %1111 = zext i1 %tobool1479 to i64
  %cond1480 = select i1 %tobool1479, i32 1, i32 0
  %tobool1481 = icmp ne i32 %cond1480, 0
  %1112 = zext i1 %tobool1481 to i64
  %cond1482 = select i1 %tobool1481, i32 1, i32 0
  %1113 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1483 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1113, i32 0, i32 7
  %1114 = load i8*, i8** %end1483, align 8
  %1115 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1484 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1115, i32 0, i32 2
  %1116 = load i8*, i8** %precomp1484, align 8
  %sub.ptr.lhs.cast1485 = ptrtoint i8* %1114 to i64
  %sub.ptr.rhs.cast1486 = ptrtoint i8* %1116 to i64
  %sub.ptr.sub1487 = sub i64 %sub.ptr.lhs.cast1485, %sub.ptr.rhs.cast1486
  %1117 = load i64, i64* %offset1461, align 8
  %sub1488 = sub nsw i64 %sub.ptr.sub1487, %1117
  %1118 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1489 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1118, i32 0, i32 2
  %1119 = load i8*, i8** %precomp1489, align 8
  %1120 = load i64, i64* %offset1461, align 8
  %add.ptr1490 = getelementptr inbounds i8, i8* %1119, i64 %1120
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool1470, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.325, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %conv1471, i32 %cond1476, i64 %1106, i8* %1108, i32 %cond1482, i64 %sub1488, i8* %add.ptr1490)
  br label %do.end1491

do.end1491:                                       ; preds = %do.body1460
  br label %do.end1492

do.end1492:                                       ; preds = %do.end1491
  br label %if.end1525

if.else1493:                                      ; preds = %if.then1449
  %1121 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1494 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1121, i32 0, i32 3
  %1122 = load %struct.p5rx*, %struct.p5rx** %rx_sv1494, align 8
  %1123 = bitcast %struct.p5rx* %1122 to i8*
  %1124 = bitcast i8* %1123 to %struct.sv*
  %1125 = bitcast %struct.sv* %1124 to i8*
  call void @Perl_save_pushptr(i8* %1125, i32 11)
  br label %do.body1495

do.body1495:                                      ; preds = %if.else1493
  %1126 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1497 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1126, i32 0, i32 8
  %1127 = load i8*, i8** %parse1497, align 8
  %1128 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1498 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1128, i32 0, i32 2
  %1129 = load i8*, i8** %precomp1498, align 8
  %sub.ptr.lhs.cast1499 = ptrtoint i8* %1127 to i64
  %sub.ptr.rhs.cast1500 = ptrtoint i8* %1129 to i64
  %sub.ptr.sub1501 = sub i64 %sub.ptr.lhs.cast1499, %sub.ptr.rhs.cast1500
  store i64 %sub.ptr.sub1501, i64* %offset1496, align 8
  %1130 = load i64, i64* %value, align 8
  %conv1502 = trunc i64 %1130 to i32
  %1131 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81503 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1131, i32 0, i32 25
  %1132 = load i32, i32* %utf81503, align 8
  %tobool1504 = icmp ne i32 %1132, 0
  %1133 = zext i1 %tobool1504 to i64
  %cond1505 = select i1 %tobool1504, i32 1, i32 0
  %tobool1506 = icmp ne i32 %cond1505, 0
  %1134 = zext i1 %tobool1506 to i64
  %cond1507 = select i1 %tobool1506, i32 1, i32 0
  %1135 = load i64, i64* %offset1496, align 8
  %1136 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1508 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1136, i32 0, i32 2
  %1137 = load i8*, i8** %precomp1508, align 8
  %1138 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81509 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1138, i32 0, i32 25
  %1139 = load i32, i32* %utf81509, align 8
  %tobool1510 = icmp ne i32 %1139, 0
  %1140 = zext i1 %tobool1510 to i64
  %cond1511 = select i1 %tobool1510, i32 1, i32 0
  %tobool1512 = icmp ne i32 %cond1511, 0
  %1141 = zext i1 %tobool1512 to i64
  %cond1513 = select i1 %tobool1512, i32 1, i32 0
  %1142 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1514 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1142, i32 0, i32 7
  %1143 = load i8*, i8** %end1514, align 8
  %1144 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1515 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1144, i32 0, i32 2
  %1145 = load i8*, i8** %precomp1515, align 8
  %sub.ptr.lhs.cast1516 = ptrtoint i8* %1143 to i64
  %sub.ptr.rhs.cast1517 = ptrtoint i8* %1145 to i64
  %sub.ptr.sub1518 = sub i64 %sub.ptr.lhs.cast1516, %sub.ptr.rhs.cast1517
  %1146 = load i64, i64* %offset1496, align 8
  %sub1519 = sub nsw i64 %sub.ptr.sub1518, %1146
  %1147 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1520 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1147, i32 0, i32 2
  %1148 = load i8*, i8** %precomp1520, align 8
  %1149 = load i64, i64* %offset1496, align 8
  %add.ptr1521 = getelementptr inbounds i8, i8* %1148, i64 %1149
  call void (i32, i8*, ...) @Perl_ck_warner(i32 20, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.326, i64 0, i64 0), i32 %conv1502, i32 %cond1507, i64 %1135, i8* %1137, i32 %cond1513, i64 %sub1519, i8* %add.ptr1521)
  br label %do.end1522

do.end1522:                                       ; preds = %do.body1495
  %1150 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1523 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1150, i32 0, i32 3
  %1151 = load %struct.p5rx*, %struct.p5rx** %rx_sv1523, align 8
  %1152 = bitcast %struct.p5rx* %1151 to i8*
  %1153 = bitcast i8* %1152 to %struct.sv*
  %call1524 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %1153)
  %1154 = bitcast %struct.sv* %call1524 to %struct.p5rx*
  br label %if.end1525

if.end1525:                                       ; preds = %do.end1522, %do.end1492
  br label %if.end1526

if.end1526:                                       ; preds = %if.end1525, %land.lhs.true1446, %land.lhs.true1439, %land.lhs.true1436, %sw.default
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end1526, %if.end1430, %if.end1340, %sw.bb1179, %if.end1178, %if.end1096, %sw.bb1017, %sw.bb1016, %sw.bb1015, %sw.bb1014, %sw.bb1013, %sw.bb1012, %sw.bb1011, %if.end1008, %if.end603, %if.end590, %sw.bb325, %sw.bb324, %sw.bb323, %sw.bb322, %sw.bb321, %sw.bb320, %sw.bb319, %sw.bb318, %sw.bb317, %sw.bb
  br label %if.end1527

if.end1527:                                       ; preds = %sw.epilog, %lor.lhs.false312, %land.lhs.true309, %land.lhs.true303, %land.lhs.true297, %land.lhs.true291, %land.lhs.true285, %land.lhs.true279
  br label %if.end1528

if.end1528:                                       ; preds = %if.end1527, %if.else242
  br label %if.end1529

if.end1529:                                       ; preds = %if.end1528, %if.then237
  %1155 = load i64, i64* %namedclass, align 8
  %cmp1530 = icmp sgt i64 %1155, -1
  br i1 %cmp1530, label %if.then1532, label %if.end1776

if.then1532:                                      ; preds = %if.end1529
  %1156 = load i64, i64* %range, align 8
  %tobool1533 = icmp ne i64 %1156, 0
  br i1 %tobool1533, label %if.then1534, label %if.end1640

if.then1534:                                      ; preds = %if.then1532
  %1157 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1535 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1157, i32 0, i32 12
  %1158 = load %struct.regnode*, %struct.regnode** %emit1535, align 8
  %1159 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1536 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1159, i32 0, i32 13
  %1160 = bitcast %struct.regnode_ssc* %emit_dummy1536 to %struct.regnode*
  %cmp1537 = icmp eq %struct.regnode* %1158, %1160
  br i1 %cmp1537, label %if.end1638, label %if.then1539

if.then1539:                                      ; preds = %if.then1534
  %1161 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1540 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1161, i32 0, i32 8
  %1162 = load i8*, i8** %parse1540, align 8
  %1163 = load i8*, i8** %rangebegin, align 8
  %cmp1541 = icmp uge i8* %1162, %1163
  br i1 %cmp1541, label %cond.true1543, label %cond.false1548

cond.true1543:                                    ; preds = %if.then1539
  %1164 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1544 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1164, i32 0, i32 8
  %1165 = load i8*, i8** %parse1544, align 8
  %1166 = load i8*, i8** %rangebegin, align 8
  %sub.ptr.lhs.cast1545 = ptrtoint i8* %1165 to i64
  %sub.ptr.rhs.cast1546 = ptrtoint i8* %1166 to i64
  %sub.ptr.sub1547 = sub i64 %sub.ptr.lhs.cast1545, %sub.ptr.rhs.cast1546
  br label %cond.end1549

cond.false1548:                                   ; preds = %if.then1539
  br label %cond.end1549

cond.end1549:                                     ; preds = %cond.false1548, %cond.true1543
  %cond1550 = phi i64 [ %sub.ptr.sub1547, %cond.true1543 ], [ 0, %cond.false1548 ]
  %conv1551 = trunc i64 %cond1550 to i32
  store i32 %conv1551, i32* %w, align 4
  %1167 = load i8, i8* %strict.addr, align 1
  %tobool1552 = trunc i8 %1167 to i1
  br i1 %tobool1552, label %if.then1553, label %if.else1598

if.then1553:                                      ; preds = %cond.end1549
  br label %do.body1554

do.body1554:                                      ; preds = %if.then1553
  %1168 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1556 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1168, i32 0, i32 8
  %1169 = load i8*, i8** %parse1556, align 8
  %1170 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1557 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1170, i32 0, i32 2
  %1171 = load i8*, i8** %precomp1557, align 8
  %sub.ptr.lhs.cast1558 = ptrtoint i8* %1169 to i64
  %sub.ptr.rhs.cast1559 = ptrtoint i8* %1171 to i64
  %sub.ptr.sub1560 = sub i64 %sub.ptr.lhs.cast1558, %sub.ptr.rhs.cast1559
  store i64 %sub.ptr.sub1560, i64* %offset1555, align 8
  %1172 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1561 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1172, i32 0, i32 12
  %1173 = load %struct.regnode*, %struct.regnode** %emit1561, align 8
  %1174 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1562 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1174, i32 0, i32 13
  %1175 = bitcast %struct.regnode_ssc* %emit_dummy1562 to %struct.regnode*
  %cmp1563 = icmp eq %struct.regnode* %1173, %1175
  br i1 %cmp1563, label %if.end1567, label %if.then1565

if.then1565:                                      ; preds = %do.body1554
  %1176 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1566 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1176, i32 0, i32 3
  %1177 = load %struct.p5rx*, %struct.p5rx** %rx_sv1566, align 8
  %1178 = bitcast %struct.p5rx* %1177 to i8*
  %1179 = bitcast i8* %1178 to %struct.sv*
  %1180 = bitcast %struct.sv* %1179 to i8*
  call void @Perl_save_pushptr(i8* %1180, i32 11)
  br label %if.end1567

if.end1567:                                       ; preds = %if.then1565, %do.body1554
  %1181 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81568 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1181, i32 0, i32 25
  %1182 = load i32, i32* %utf81568, align 8
  %tobool1569 = icmp ne i32 %1182, 0
  %1183 = zext i1 %tobool1569 to i64
  %cond1570 = select i1 %tobool1569, i32 1, i32 0
  %tobool1571 = icmp ne i32 %cond1570, 0
  %1184 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81572 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1184, i32 0, i32 25
  %1185 = load i32, i32* %utf81572, align 8
  %tobool1573 = icmp ne i32 %1185, 0
  %1186 = zext i1 %tobool1573 to i64
  %cond1574 = select i1 %tobool1573, i32 1, i32 0
  %tobool1575 = icmp ne i32 %cond1574, 0
  %1187 = zext i1 %tobool1575 to i64
  %cond1576 = select i1 %tobool1575, i32 1, i32 0
  %1188 = load i32, i32* %w, align 4
  %conv1577 = sext i32 %1188 to i64
  %1189 = load i8*, i8** %rangebegin, align 8
  %1190 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81578 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1190, i32 0, i32 25
  %1191 = load i32, i32* %utf81578, align 8
  %tobool1579 = icmp ne i32 %1191, 0
  %1192 = zext i1 %tobool1579 to i64
  %cond1580 = select i1 %tobool1579, i32 1, i32 0
  %tobool1581 = icmp ne i32 %cond1580, 0
  %1193 = zext i1 %tobool1581 to i64
  %cond1582 = select i1 %tobool1581, i32 1, i32 0
  %1194 = load i64, i64* %offset1555, align 8
  %1195 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1583 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1195, i32 0, i32 2
  %1196 = load i8*, i8** %precomp1583, align 8
  %1197 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81584 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1197, i32 0, i32 25
  %1198 = load i32, i32* %utf81584, align 8
  %tobool1585 = icmp ne i32 %1198, 0
  %1199 = zext i1 %tobool1585 to i64
  %cond1586 = select i1 %tobool1585, i32 1, i32 0
  %tobool1587 = icmp ne i32 %cond1586, 0
  %1200 = zext i1 %tobool1587 to i64
  %cond1588 = select i1 %tobool1587, i32 1, i32 0
  %1201 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1589 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1201, i32 0, i32 7
  %1202 = load i8*, i8** %end1589, align 8
  %1203 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1590 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1203, i32 0, i32 2
  %1204 = load i8*, i8** %precomp1590, align 8
  %sub.ptr.lhs.cast1591 = ptrtoint i8* %1202 to i64
  %sub.ptr.rhs.cast1592 = ptrtoint i8* %1204 to i64
  %sub.ptr.sub1593 = sub i64 %sub.ptr.lhs.cast1591, %sub.ptr.rhs.cast1592
  %1205 = load i64, i64* %offset1555, align 8
  %sub1594 = sub nsw i64 %sub.ptr.sub1593, %1205
  %1206 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1595 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1206, i32 0, i32 2
  %1207 = load i8*, i8** %precomp1595, align 8
  %1208 = load i64, i64* %offset1555, align 8
  %add.ptr1596 = getelementptr inbounds i8, i8* %1207, i64 %1208
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool1571, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.327, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %cond1576, i64 %conv1577, i8* %1189, i32 %cond1582, i64 %1194, i8* %1196, i32 %cond1588, i64 %sub1594, i8* %add.ptr1596)
  br label %do.end1597

do.end1597:                                       ; preds = %if.end1567
  br label %if.end1637

if.else1598:                                      ; preds = %cond.end1549
  %1209 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1599 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1209, i32 0, i32 3
  %1210 = load %struct.p5rx*, %struct.p5rx** %rx_sv1599, align 8
  %1211 = bitcast %struct.p5rx* %1210 to i8*
  %1212 = bitcast i8* %1211 to %struct.sv*
  %1213 = bitcast %struct.sv* %1212 to i8*
  call void @Perl_save_pushptr(i8* %1213, i32 11)
  br label %do.body1600

do.body1600:                                      ; preds = %if.else1598
  %1214 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1602 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1214, i32 0, i32 8
  %1215 = load i8*, i8** %parse1602, align 8
  %1216 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1603 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1216, i32 0, i32 2
  %1217 = load i8*, i8** %precomp1603, align 8
  %sub.ptr.lhs.cast1604 = ptrtoint i8* %1215 to i64
  %sub.ptr.rhs.cast1605 = ptrtoint i8* %1217 to i64
  %sub.ptr.sub1606 = sub i64 %sub.ptr.lhs.cast1604, %sub.ptr.rhs.cast1605
  store i64 %sub.ptr.sub1606, i64* %offset1601, align 8
  %1218 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81607 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1218, i32 0, i32 25
  %1219 = load i32, i32* %utf81607, align 8
  %tobool1608 = icmp ne i32 %1219, 0
  %1220 = zext i1 %tobool1608 to i64
  %cond1609 = select i1 %tobool1608, i32 1, i32 0
  %tobool1610 = icmp ne i32 %cond1609, 0
  %1221 = zext i1 %tobool1610 to i64
  %cond1611 = select i1 %tobool1610, i32 1, i32 0
  %1222 = load i32, i32* %w, align 4
  %conv1612 = sext i32 %1222 to i64
  %1223 = load i8*, i8** %rangebegin, align 8
  %1224 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81613 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1224, i32 0, i32 25
  %1225 = load i32, i32* %utf81613, align 8
  %tobool1614 = icmp ne i32 %1225, 0
  %1226 = zext i1 %tobool1614 to i64
  %cond1615 = select i1 %tobool1614, i32 1, i32 0
  %tobool1616 = icmp ne i32 %cond1615, 0
  %1227 = zext i1 %tobool1616 to i64
  %cond1617 = select i1 %tobool1616, i32 1, i32 0
  %1228 = load i64, i64* %offset1601, align 8
  %1229 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1618 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1229, i32 0, i32 2
  %1230 = load i8*, i8** %precomp1618, align 8
  %1231 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81619 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1231, i32 0, i32 25
  %1232 = load i32, i32* %utf81619, align 8
  %tobool1620 = icmp ne i32 %1232, 0
  %1233 = zext i1 %tobool1620 to i64
  %cond1621 = select i1 %tobool1620, i32 1, i32 0
  %tobool1622 = icmp ne i32 %cond1621, 0
  %1234 = zext i1 %tobool1622 to i64
  %cond1623 = select i1 %tobool1622, i32 1, i32 0
  %1235 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1624 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1235, i32 0, i32 7
  %1236 = load i8*, i8** %end1624, align 8
  %1237 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1625 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1237, i32 0, i32 2
  %1238 = load i8*, i8** %precomp1625, align 8
  %sub.ptr.lhs.cast1626 = ptrtoint i8* %1236 to i64
  %sub.ptr.rhs.cast1627 = ptrtoint i8* %1238 to i64
  %sub.ptr.sub1628 = sub i64 %sub.ptr.lhs.cast1626, %sub.ptr.rhs.cast1627
  %1239 = load i64, i64* %offset1601, align 8
  %sub1629 = sub nsw i64 %sub.ptr.sub1628, %1239
  %1240 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1630 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1240, i32 0, i32 2
  %1241 = load i8*, i8** %precomp1630, align 8
  %1242 = load i64, i64* %offset1601, align 8
  %add.ptr1631 = getelementptr inbounds i8, i8* %1241, i64 %1242
  call void (i32, i8*, ...) @Perl_ck_warner(i32 20, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.328, i64 0, i64 0), i32 %cond1611, i64 %conv1612, i8* %1223, i32 %cond1617, i64 %1228, i8* %1230, i32 %cond1623, i64 %sub1629, i8* %add.ptr1631)
  br label %do.end1632

do.end1632:                                       ; preds = %do.body1600
  %1243 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1633 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1243, i32 0, i32 3
  %1244 = load %struct.p5rx*, %struct.p5rx** %rx_sv1633, align 8
  %1245 = bitcast %struct.p5rx* %1244 to i8*
  %1246 = bitcast i8* %1245 to %struct.sv*
  %call1634 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %1246)
  %1247 = bitcast %struct.sv* %call1634 to %struct.p5rx*
  %1248 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %call1635 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %1248, i64 45)
  store %struct.sv* %call1635, %struct.sv** %cp_list, align 8
  %1249 = load %struct.sv*, %struct.sv** %cp_foldable_list, align 8
  %1250 = load i64, i64* %prevvalue, align 8
  %call1636 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %1249, i64 %1250)
  store %struct.sv* %call1636, %struct.sv** %cp_foldable_list, align 8
  br label %if.end1637

if.end1637:                                       ; preds = %do.end1632, %do.end1597
  br label %if.end1638

if.end1638:                                       ; preds = %if.end1637, %if.then1534
  store i64 0, i64* %range, align 8
  %1251 = load i64, i64* %element_count, align 8
  %add1639 = add i64 %1251, 2
  store i64 %add1639, i64* %element_count, align 8
  br label %if.end1640

if.end1640:                                       ; preds = %if.end1638, %if.then1532
  %1252 = load i64, i64* %namedclass, align 8
  %div = sdiv i64 %1252, 2
  %conv1641 = trunc i64 %div to i32
  %conv1642 = trunc i32 %conv1641 to i8
  store i8 %conv1642, i8* %classnum, align 1
  %1253 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1643 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1253, i32 0, i32 0
  %1254 = load i32, i32* %flags1643, align 8
  %call1644 = call i32 @get_regex_charset(i32 %1254)
  %cmp1645 = icmp eq i32 %call1644, 1
  br i1 %cmp1645, label %land.lhs.true1647, label %if.else1708

land.lhs.true1647:                                ; preds = %if.end1640
  %1255 = load i64, i64* %namedclass, align 8
  %cmp1648 = icmp slt i64 %1255, 30
  br i1 %cmp1648, label %land.lhs.true1650, label %if.else1708

land.lhs.true1650:                                ; preds = %land.lhs.true1647
  %1256 = load i8, i8* %classnum, align 1
  %conv1651 = zext i8 %1256 to i32
  %cmp1652 = icmp ne i32 %conv1651, 14
  br i1 %cmp1652, label %if.then1654, label %if.else1708

if.then1654:                                      ; preds = %land.lhs.true1650
  %1257 = load i8, i8* %need_class, align 1
  %tobool1655 = trunc i8 %1257 to i1
  br i1 %tobool1655, label %if.end1674, label %if.then1656

if.then1656:                                      ; preds = %if.then1654
  store i8 1, i8* %need_class, align 1
  %1258 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1657 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1258, i32 0, i32 12
  %1259 = load %struct.regnode*, %struct.regnode** %emit1657, align 8
  %1260 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1658 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1260, i32 0, i32 13
  %1261 = bitcast %struct.regnode_ssc* %emit_dummy1658 to %struct.regnode*
  %cmp1659 = icmp eq %struct.regnode* %1259, %1261
  br i1 %cmp1659, label %if.then1661, label %if.else1664

if.then1661:                                      ; preds = %if.then1656
  %1262 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size1662 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1262, i32 0, i32 17
  %1263 = load i64, i64* %size1662, align 8
  %add1663 = add i64 %1263, 1
  store i64 %add1663, i64* %size1662, align 8
  br label %if.end1667

if.else1664:                                      ; preds = %if.then1656
  %1264 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1665 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1264, i32 0, i32 12
  %1265 = load %struct.regnode*, %struct.regnode** %emit1665, align 8
  %add.ptr1666 = getelementptr inbounds %struct.regnode, %struct.regnode* %1265, i64 1
  store %struct.regnode* %add.ptr1666, %struct.regnode** %emit1665, align 8
  br label %if.end1667

if.end1667:                                       ; preds = %if.else1664, %if.then1661
  %1266 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags1668 = getelementptr inbounds %struct.regnode, %struct.regnode* %1266, i32 0, i32 0
  %1267 = load i8, i8* %flags1668, align 2
  %conv1669 = zext i8 %1267 to i32
  %or1670 = or i32 %conv1669, 8
  %conv1671 = trunc i32 %or1670 to i8
  store i8 %conv1671, i8* %flags1668, align 2
  br label %do.body1672

do.body1672:                                      ; preds = %if.end1667
  %1268 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1269 = bitcast %struct.regnode* %1268 to %struct.regnode_charclass_class*
  %classflags = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1269, i32 0, i32 5
  store i32 0, i32* %classflags, align 4
  br label %do.end1673

do.end1673:                                       ; preds = %do.body1672
  br label %if.end1674

if.end1674:                                       ; preds = %do.end1673, %if.then1654
  %1270 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags1675 = getelementptr inbounds %struct.regnode, %struct.regnode* %1270, i32 0, i32 0
  %1271 = load i8, i8* %flags1675, align 2
  %conv1676 = zext i8 %1271 to i32
  %and1677 = and i32 %conv1676, 8
  %tobool1678 = icmp ne i32 %and1677, 0
  br i1 %tobool1678, label %land.lhs.true1679, label %if.end1688

land.lhs.true1679:                                ; preds = %if.end1674
  %1272 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1273 = bitcast %struct.regnode* %1272 to %struct.regnode_charclass_class*
  %classflags1680 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1273, i32 0, i32 5
  %1274 = load i32, i32* %classflags1680, align 4
  %1275 = load i64, i64* %namedclass, align 8
  %1276 = load i64, i64* %namedclass, align 8
  %rem = srem i64 %1276, 2
  %tobool1681 = icmp ne i64 %rem, 0
  %1277 = zext i1 %tobool1681 to i64
  %cond1682 = select i1 %tobool1681, i32 -1, i32 1
  %conv1683 = sext i32 %cond1682 to i64
  %add1684 = add nsw i64 %1275, %conv1683
  %sh_prom = trunc i64 %add1684 to i32
  %shl = shl i32 1, %sh_prom
  %and1685 = and i32 %1274, %shl
  %tobool1686 = icmp ne i32 %and1685, 0
  br i1 %tobool1686, label %if.then1687, label %if.end1688

if.then1687:                                      ; preds = %land.lhs.true1679
  store i8 1, i8* %posixl_matches_all, align 1
  br label %while.end2389

if.end1688:                                       ; preds = %land.lhs.true1679, %if.end1674
  %1278 = load i64, i64* %namedclass, align 8
  %sh_prom1689 = trunc i64 %1278 to i32
  %shl1690 = shl i32 1, %sh_prom1689
  %1279 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1280 = bitcast %struct.regnode* %1279 to %struct.regnode_charclass_class*
  %classflags1691 = getelementptr inbounds %struct.regnode_charclass_class, %struct.regnode_charclass_class* %1280, i32 0, i32 5
  %1281 = load i32, i32* %classflags1691, align 4
  %or1692 = or i32 %1281, %shl1690
  store i32 %or1692, i32* %classflags1691, align 4
  %1282 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1693 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1282, i32 0, i32 12
  %1283 = load %struct.regnode*, %struct.regnode** %emit1693, align 8
  %1284 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1694 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1284, i32 0, i32 13
  %1285 = bitcast %struct.regnode_ssc* %emit_dummy1694 to %struct.regnode*
  %cmp1695 = icmp eq %struct.regnode* %1283, %1285
  br i1 %cmp1695, label %if.end1707, label %if.then1697

if.then1697:                                      ; preds = %if.end1688
  store %struct.sv* null, %struct.sv** %scratch_list, align 8
  %1286 = load %struct.sv*, %struct.sv** @PL_AboveLatin1, align 8
  %1287 = load i8, i8* %classnum, align 1
  %idxprom1698 = zext i8 %1287 to i64
  %arrayidx1699 = getelementptr inbounds [16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 %idxprom1698
  %1288 = load %struct.sv*, %struct.sv** %arrayidx1699, align 8
  %1289 = load i64, i64* %namedclass, align 8
  %rem1700 = srem i64 %1289, 2
  %cmp1701 = icmp ne i64 %rem1700, 0
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %1286, %struct.sv* %1288, i1 zeroext %cmp1701, %struct.sv** %scratch_list)
  %1290 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %tobool1703 = icmp ne %struct.sv* %1290, null
  br i1 %tobool1703, label %if.else1705, label %if.then1704

if.then1704:                                      ; preds = %if.then1697
  %1291 = load %struct.sv*, %struct.sv** %scratch_list, align 8
  store %struct.sv* %1291, %struct.sv** %cp_list, align 8
  br label %if.end1706

if.else1705:                                      ; preds = %if.then1697
  %1292 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %1293 = load %struct.sv*, %struct.sv** %scratch_list, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %1292, %struct.sv* %1293, i1 zeroext false, %struct.sv** %cp_list)
  %1294 = load %struct.sv*, %struct.sv** %scratch_list, align 8
  %1295 = bitcast %struct.sv* %1294 to i8*
  %1296 = bitcast i8* %1295 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %1296)
  br label %if.end1706

if.end1706:                                       ; preds = %if.else1705, %if.then1704
  br label %while.body172

if.end1707:                                       ; preds = %if.end1688
  br label %if.end1775

if.else1708:                                      ; preds = %land.lhs.true1650, %land.lhs.true1647, %if.end1640
  %1297 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1709 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1297, i32 0, i32 12
  %1298 = load %struct.regnode*, %struct.regnode** %emit1709, align 8
  %1299 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1710 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1299, i32 0, i32 13
  %1300 = bitcast %struct.regnode_ssc* %emit_dummy1710 to %struct.regnode*
  %cmp1711 = icmp eq %struct.regnode* %1298, %1300
  br i1 %cmp1711, label %if.end1774, label %if.then1713

if.then1713:                                      ; preds = %if.else1708
  %1301 = load i64, i64* %namedclass, align 8
  %cmp1714 = icmp sge i64 %1301, 30
  br i1 %cmp1714, label %if.then1716, label %if.else1731

if.then1716:                                      ; preds = %if.then1713
  %1302 = load i64, i64* %namedclass, align 8
  %cmp1717 = icmp ne i64 %1302, 34
  br i1 %cmp1717, label %if.then1719, label %if.end1730

if.then1719:                                      ; preds = %if.then1716
  %1303 = load i8, i8* %classnum, align 1
  %conv1720 = zext i8 %1303 to i32
  %cmp1721 = icmp ne i32 %conv1720, 15
  br i1 %cmp1721, label %if.then1723, label %if.end1724

if.then1723:                                      ; preds = %if.then1719
  store i8 11, i8* %classnum, align 1
  br label %if.end1724

if.end1724:                                       ; preds = %if.then1723, %if.then1719
  %1304 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %1305 = load i8, i8* %classnum, align 1
  %idxprom1725 = zext i8 %1305 to i64
  %arrayidx1726 = getelementptr inbounds [16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 %idxprom1725
  %1306 = load %struct.sv*, %struct.sv** %arrayidx1726, align 8
  %1307 = load i64, i64* %namedclass, align 8
  %rem1727 = srem i64 %1307, 2
  %cmp1728 = icmp ne i64 %rem1727, 0
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %1304, %struct.sv* %1306, i1 zeroext %cmp1728, %struct.sv** %cp_list)
  br label %if.end1730

if.end1730:                                       ; preds = %if.end1724, %if.then1716
  br label %if.end1773

if.else1731:                                      ; preds = %if.then1713
  %1308 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1732 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1308, i32 0, i32 0
  %1309 = load i32, i32* %flags1732, align 8
  %call1733 = call i32 @get_regex_charset(i32 %1309)
  %cmp1734 = icmp eq i32 %call1733, 2
  br i1 %cmp1734, label %if.then1753, label %lor.lhs.false1736

lor.lhs.false1736:                                ; preds = %if.else1731
  %1310 = load i8, i8* %classnum, align 1
  %conv1737 = zext i8 %1310 to i32
  %cmp1738 = icmp eq i32 %conv1737, 14
  br i1 %cmp1738, label %if.then1753, label %lor.lhs.false1740

lor.lhs.false1740:                                ; preds = %lor.lhs.false1736
  %1311 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1741 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1311, i32 0, i32 0
  %1312 = load i32, i32* %flags1741, align 8
  %call1742 = call i32 @get_regex_charset(i32 %1312)
  %cmp1743 = icmp eq i32 %call1742, 0
  br i1 %cmp1743, label %land.lhs.true1745, label %if.else1759

land.lhs.true1745:                                ; preds = %lor.lhs.false1740
  %1313 = load i8, i8* %classnum, align 1
  %conv1746 = zext i8 %1313 to i32
  %cmp1747 = icmp eq i32 %conv1746, 1
  br i1 %cmp1747, label %if.then1753, label %lor.lhs.false1749

lor.lhs.false1749:                                ; preds = %land.lhs.true1745
  %1314 = load i8, i8* %classnum, align 1
  %conv1750 = zext i8 %1314 to i32
  %cmp1751 = icmp eq i32 %conv1750, 12
  br i1 %cmp1751, label %if.then1753, label %if.else1759

if.then1753:                                      ; preds = %lor.lhs.false1749, %land.lhs.true1745, %lor.lhs.false1736, %if.else1731
  %1315 = load %struct.sv*, %struct.sv** %simple_posixes, align 8
  %1316 = load i8, i8* %classnum, align 1
  %idxprom1754 = zext i8 %1316 to i64
  %arrayidx1755 = getelementptr inbounds [16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 %idxprom1754
  %1317 = load %struct.sv*, %struct.sv** %arrayidx1755, align 8
  %1318 = load i64, i64* %namedclass, align 8
  %rem1756 = srem i64 %1318, 2
  %cmp1757 = icmp ne i64 %rem1756, 0
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %1315, %struct.sv* %1317, i1 zeroext %cmp1757, %struct.sv** %simple_posixes)
  br label %if.end1772

if.else1759:                                      ; preds = %lor.lhs.false1749, %lor.lhs.false1740
  %1319 = load i64, i64* %namedclass, align 8
  %rem1760 = srem i64 %1319, 2
  %cmp1761 = icmp eq i64 %rem1760, 0
  br i1 %cmp1761, label %cond.true1763, label %cond.false1764

cond.true1763:                                    ; preds = %if.else1759
  br label %cond.end1765

cond.false1764:                                   ; preds = %if.else1759
  br label %cond.end1765

cond.end1765:                                     ; preds = %cond.false1764, %cond.true1763
  %cond1766 = phi %struct.sv** [ %posixes, %cond.true1763 ], [ %nposixes, %cond.false1764 ]
  store %struct.sv** %cond1766, %struct.sv*** %posixes_ptr, align 8
  %1320 = load %struct.sv**, %struct.sv*** %posixes_ptr, align 8
  %1321 = load %struct.sv*, %struct.sv** %1320, align 8
  %1322 = load i8, i8* %classnum, align 1
  %idxprom1767 = zext i8 %1322 to i64
  %arrayidx1768 = getelementptr inbounds [16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 %idxprom1767
  %1323 = load %struct.sv*, %struct.sv** %arrayidx1768, align 8
  %1324 = load i64, i64* %namedclass, align 8
  %rem1769 = srem i64 %1324, 2
  %cmp1770 = icmp ne i64 %rem1769, 0
  %1325 = load %struct.sv**, %struct.sv*** %posixes_ptr, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %1321, %struct.sv* %1323, i1 zeroext %cmp1770, %struct.sv** %1325)
  br label %if.end1772

if.end1772:                                       ; preds = %cond.end1765, %if.then1753
  br label %if.end1773

if.end1773:                                       ; preds = %if.end1772, %if.end1730
  br label %if.end1774

if.end1774:                                       ; preds = %if.end1773, %if.else1708
  br label %if.end1775

if.end1775:                                       ; preds = %if.end1774, %if.end1707
  br label %if.end1776

if.end1776:                                       ; preds = %if.end1775, %if.end1529
  %1326 = load i8, i8* %skip_white, align 1
  %tobool1777 = trunc i8 %1326 to i1
  br i1 %tobool1777, label %if.then1778, label %if.end1782

if.then1778:                                      ; preds = %if.end1776
  %1327 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1328 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1779 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1328, i32 0, i32 8
  %1329 = load i8*, i8** %parse1779, align 8
  %call1780 = call i8* @S_regpatws(%struct.RExC_state_t* %1327, i8* %1329, i1 zeroext false)
  %1330 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1781 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1330, i32 0, i32 8
  store i8* %call1780, i8** %parse1781, align 8
  br label %if.end1782

if.end1782:                                       ; preds = %if.then1778, %if.end1776
  %1331 = load i64, i64* %range, align 8
  %tobool1783 = icmp ne i64 %1331, 0
  br i1 %tobool1783, label %if.then1784, label %if.else1839

if.then1784:                                      ; preds = %if.end1782
  %1332 = load i64, i64* %prevvalue, align 8
  %1333 = load i64, i64* %value, align 8
  %cmp1785 = icmp ugt i64 %1332, %1333
  br i1 %cmp1785, label %if.then1787, label %if.end1838

if.then1787:                                      ; preds = %if.then1784
  %1334 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1789 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1334, i32 0, i32 8
  %1335 = load i8*, i8** %parse1789, align 8
  %1336 = load i8*, i8** %rangebegin, align 8
  %sub.ptr.lhs.cast1790 = ptrtoint i8* %1335 to i64
  %sub.ptr.rhs.cast1791 = ptrtoint i8* %1336 to i64
  %sub.ptr.sub1792 = sub i64 %sub.ptr.lhs.cast1790, %sub.ptr.rhs.cast1791
  %conv1793 = trunc i64 %sub.ptr.sub1792 to i32
  store i32 %conv1793, i32* %w1788, align 4
  br label %do.body1794

do.body1794:                                      ; preds = %if.then1787
  %1337 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1796 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1337, i32 0, i32 8
  %1338 = load i8*, i8** %parse1796, align 8
  %1339 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1797 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1339, i32 0, i32 2
  %1340 = load i8*, i8** %precomp1797, align 8
  %sub.ptr.lhs.cast1798 = ptrtoint i8* %1338 to i64
  %sub.ptr.rhs.cast1799 = ptrtoint i8* %1340 to i64
  %sub.ptr.sub1800 = sub i64 %sub.ptr.lhs.cast1798, %sub.ptr.rhs.cast1799
  store i64 %sub.ptr.sub1800, i64* %offset1795, align 8
  %1341 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1801 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1341, i32 0, i32 12
  %1342 = load %struct.regnode*, %struct.regnode** %emit1801, align 8
  %1343 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1802 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1343, i32 0, i32 13
  %1344 = bitcast %struct.regnode_ssc* %emit_dummy1802 to %struct.regnode*
  %cmp1803 = icmp eq %struct.regnode* %1342, %1344
  br i1 %cmp1803, label %if.end1807, label %if.then1805

if.then1805:                                      ; preds = %do.body1794
  %1345 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1806 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1345, i32 0, i32 3
  %1346 = load %struct.p5rx*, %struct.p5rx** %rx_sv1806, align 8
  %1347 = bitcast %struct.p5rx* %1346 to i8*
  %1348 = bitcast i8* %1347 to %struct.sv*
  %1349 = bitcast %struct.sv* %1348 to i8*
  call void @Perl_save_pushptr(i8* %1349, i32 11)
  br label %if.end1807

if.end1807:                                       ; preds = %if.then1805, %do.body1794
  %1350 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81808 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1350, i32 0, i32 25
  %1351 = load i32, i32* %utf81808, align 8
  %tobool1809 = icmp ne i32 %1351, 0
  %1352 = zext i1 %tobool1809 to i64
  %cond1810 = select i1 %tobool1809, i32 1, i32 0
  %tobool1811 = icmp ne i32 %cond1810, 0
  %1353 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81812 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1353, i32 0, i32 25
  %1354 = load i32, i32* %utf81812, align 8
  %tobool1813 = icmp ne i32 %1354, 0
  %1355 = zext i1 %tobool1813 to i64
  %cond1814 = select i1 %tobool1813, i32 1, i32 0
  %tobool1815 = icmp ne i32 %cond1814, 0
  %1356 = zext i1 %tobool1815 to i64
  %cond1816 = select i1 %tobool1815, i32 1, i32 0
  %1357 = load i32, i32* %w1788, align 4
  %conv1817 = sext i32 %1357 to i64
  %1358 = load i8*, i8** %rangebegin, align 8
  %1359 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81818 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1359, i32 0, i32 25
  %1360 = load i32, i32* %utf81818, align 8
  %tobool1819 = icmp ne i32 %1360, 0
  %1361 = zext i1 %tobool1819 to i64
  %cond1820 = select i1 %tobool1819, i32 1, i32 0
  %tobool1821 = icmp ne i32 %cond1820, 0
  %1362 = zext i1 %tobool1821 to i64
  %cond1822 = select i1 %tobool1821, i32 1, i32 0
  %1363 = load i64, i64* %offset1795, align 8
  %1364 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1823 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1364, i32 0, i32 2
  %1365 = load i8*, i8** %precomp1823, align 8
  %1366 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81824 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1366, i32 0, i32 25
  %1367 = load i32, i32* %utf81824, align 8
  %tobool1825 = icmp ne i32 %1367, 0
  %1368 = zext i1 %tobool1825 to i64
  %cond1826 = select i1 %tobool1825, i32 1, i32 0
  %tobool1827 = icmp ne i32 %cond1826, 0
  %1369 = zext i1 %tobool1827 to i64
  %cond1828 = select i1 %tobool1827, i32 1, i32 0
  %1370 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1829 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1370, i32 0, i32 7
  %1371 = load i8*, i8** %end1829, align 8
  %1372 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1830 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1372, i32 0, i32 2
  %1373 = load i8*, i8** %precomp1830, align 8
  %sub.ptr.lhs.cast1831 = ptrtoint i8* %1371 to i64
  %sub.ptr.rhs.cast1832 = ptrtoint i8* %1373 to i64
  %sub.ptr.sub1833 = sub i64 %sub.ptr.lhs.cast1831, %sub.ptr.rhs.cast1832
  %1374 = load i64, i64* %offset1795, align 8
  %sub1834 = sub nsw i64 %sub.ptr.sub1833, %1374
  %1375 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1835 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1375, i32 0, i32 2
  %1376 = load i8*, i8** %precomp1835, align 8
  %1377 = load i64, i64* %offset1795, align 8
  %add.ptr1836 = getelementptr inbounds i8, i8* %1376, i64 %1377
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool1811, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.329, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %cond1816, i64 %conv1817, i8* %1358, i32 %cond1822, i64 %1363, i8* %1365, i32 %cond1828, i64 %sub1834, i8* %add.ptr1836)
  br label %do.end1837

do.end1837:                                       ; preds = %if.end1807
  br label %if.end1838

if.end1838:                                       ; preds = %do.end1837, %if.then1784
  br label %if.end1981

if.else1839:                                      ; preds = %if.end1782
  %1378 = load i64, i64* %value, align 8
  store i64 %1378, i64* %prevvalue, align 8
  %1379 = load i8, i8* %stop_at_1.addr, align 1
  %tobool1840 = trunc i8 %1379 to i1
  br i1 %tobool1840, label %if.end1980, label %land.lhs.true1841

land.lhs.true1841:                                ; preds = %if.else1839
  %1380 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1842 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1380, i32 0, i32 8
  %1381 = load i8*, i8** %parse1842, align 8
  %1382 = load i8, i8* %1381, align 1
  %conv1843 = sext i8 %1382 to i32
  %cmp1844 = icmp eq i32 %conv1843, 45
  br i1 %cmp1844, label %if.then1846, label %if.end1980

if.then1846:                                      ; preds = %land.lhs.true1841
  %1383 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1847 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1383, i32 0, i32 8
  %1384 = load i8*, i8** %parse1847, align 8
  %add.ptr1848 = getelementptr inbounds i8, i8* %1384, i64 1
  store i8* %add.ptr1848, i8** %next_char_ptr, align 8
  %1385 = load i8, i8* %skip_white, align 1
  %tobool1849 = trunc i8 %1385 to i1
  br i1 %tobool1849, label %if.then1850, label %if.end1854

if.then1850:                                      ; preds = %if.then1846
  %1386 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1387 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1851 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1387, i32 0, i32 8
  %1388 = load i8*, i8** %parse1851, align 8
  %add.ptr1852 = getelementptr inbounds i8, i8* %1388, i64 1
  %call1853 = call i8* @S_regpatws(%struct.RExC_state_t* %1386, i8* %add.ptr1852, i1 zeroext false)
  store i8* %call1853, i8** %next_char_ptr, align 8
  br label %if.end1854

if.end1854:                                       ; preds = %if.then1850, %if.then1846
  %1389 = load i8*, i8** %next_char_ptr, align 8
  %1390 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1855 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1390, i32 0, i32 7
  %1391 = load i8*, i8** %end1855, align 8
  %cmp1856 = icmp ult i8* %1389, %1391
  br i1 %cmp1856, label %land.lhs.true1858, label %if.end1979

land.lhs.true1858:                                ; preds = %if.end1854
  %1392 = load i8*, i8** %next_char_ptr, align 8
  %1393 = load i8, i8* %1392, align 1
  %conv1859 = sext i8 %1393 to i32
  %cmp1860 = icmp ne i32 %conv1859, 93
  br i1 %cmp1860, label %if.then1862, label %if.end1979

if.then1862:                                      ; preds = %land.lhs.true1858
  %1394 = load i8*, i8** %next_char_ptr, align 8
  %1395 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1863 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1395, i32 0, i32 8
  store i8* %1394, i8** %parse1863, align 8
  %1396 = load i64, i64* %namedclass, align 8
  %cmp1864 = icmp sgt i64 %1396, -1
  br i1 %cmp1864, label %if.then1866, label %if.else1977

if.then1866:                                      ; preds = %if.then1862
  %1397 = load i8, i8* %strict.addr, align 1
  %tobool1867 = trunc i8 %1397 to i1
  br i1 %tobool1867, label %if.then1877, label %lor.lhs.false1869

lor.lhs.false1869:                                ; preds = %if.then1866
  %1398 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1870 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1398, i32 0, i32 12
  %1399 = load %struct.regnode*, %struct.regnode** %emit1870, align 8
  %1400 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1871 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1400, i32 0, i32 13
  %1401 = bitcast %struct.regnode_ssc* %emit_dummy1871 to %struct.regnode*
  %cmp1872 = icmp eq %struct.regnode* %1399, %1401
  br i1 %cmp1872, label %if.end1968, label %land.lhs.true1874

land.lhs.true1874:                                ; preds = %lor.lhs.false1869
  %call1875 = call zeroext i1 @Perl_ckwarn(i32 20)
  br i1 %call1875, label %if.then1877, label %if.end1968

if.then1877:                                      ; preds = %land.lhs.true1874, %if.then1866
  %1402 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1879 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1402, i32 0, i32 8
  %1403 = load i8*, i8** %parse1879, align 8
  %1404 = load i8*, i8** %rangebegin, align 8
  %cmp1880 = icmp uge i8* %1403, %1404
  br i1 %cmp1880, label %cond.true1882, label %cond.false1887

cond.true1882:                                    ; preds = %if.then1877
  %1405 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1883 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1405, i32 0, i32 8
  %1406 = load i8*, i8** %parse1883, align 8
  %1407 = load i8*, i8** %rangebegin, align 8
  %sub.ptr.lhs.cast1884 = ptrtoint i8* %1406 to i64
  %sub.ptr.rhs.cast1885 = ptrtoint i8* %1407 to i64
  %sub.ptr.sub1886 = sub i64 %sub.ptr.lhs.cast1884, %sub.ptr.rhs.cast1885
  br label %cond.end1888

cond.false1887:                                   ; preds = %if.then1877
  br label %cond.end1888

cond.end1888:                                     ; preds = %cond.false1887, %cond.true1882
  %cond1889 = phi i64 [ %sub.ptr.sub1886, %cond.true1882 ], [ 0, %cond.false1887 ]
  %conv1890 = trunc i64 %cond1889 to i32
  store i32 %conv1890, i32* %w1878, align 4
  %1408 = load i8, i8* %strict.addr, align 1
  %tobool1891 = trunc i8 %1408 to i1
  br i1 %tobool1891, label %if.then1892, label %if.else1933

if.then1892:                                      ; preds = %cond.end1888
  br label %do.body1893

do.body1893:                                      ; preds = %if.then1892
  %1409 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1894 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1409, i32 0, i32 12
  %1410 = load %struct.regnode*, %struct.regnode** %emit1894, align 8
  %1411 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1895 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1411, i32 0, i32 13
  %1412 = bitcast %struct.regnode_ssc* %emit_dummy1895 to %struct.regnode*
  %cmp1896 = icmp eq %struct.regnode* %1410, %1412
  br i1 %cmp1896, label %if.end1900, label %if.then1898

if.then1898:                                      ; preds = %do.body1893
  %1413 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv1899 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1413, i32 0, i32 3
  %1414 = load %struct.p5rx*, %struct.p5rx** %rx_sv1899, align 8
  %1415 = bitcast %struct.p5rx* %1414 to i8*
  %1416 = bitcast i8* %1415 to %struct.sv*
  %1417 = bitcast %struct.sv* %1416 to i8*
  call void @Perl_save_pushptr(i8* %1417, i32 11)
  br label %if.end1900

if.end1900:                                       ; preds = %if.then1898, %do.body1893
  br label %do.body1901

do.body1901:                                      ; preds = %if.end1900
  %1418 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1903 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1418, i32 0, i32 8
  %1419 = load i8*, i8** %parse1903, align 8
  %1420 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1904 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1420, i32 0, i32 2
  %1421 = load i8*, i8** %precomp1904, align 8
  %sub.ptr.lhs.cast1905 = ptrtoint i8* %1419 to i64
  %sub.ptr.rhs.cast1906 = ptrtoint i8* %1421 to i64
  %sub.ptr.sub1907 = sub i64 %sub.ptr.lhs.cast1905, %sub.ptr.rhs.cast1906
  store i64 %sub.ptr.sub1907, i64* %offset1902, align 8
  %1422 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81908 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1422, i32 0, i32 25
  %1423 = load i32, i32* %utf81908, align 8
  %tobool1909 = icmp ne i32 %1423, 0
  %1424 = zext i1 %tobool1909 to i64
  %cond1910 = select i1 %tobool1909, i32 1, i32 0
  %tobool1911 = icmp ne i32 %cond1910, 0
  %1425 = load i32, i32* %w1878, align 4
  %1426 = load i32, i32* %w1878, align 4
  %1427 = load i8*, i8** %rangebegin, align 8
  %1428 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81912 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1428, i32 0, i32 25
  %1429 = load i32, i32* %utf81912, align 8
  %tobool1913 = icmp ne i32 %1429, 0
  %1430 = zext i1 %tobool1913 to i64
  %cond1914 = select i1 %tobool1913, i32 1, i32 0
  %tobool1915 = icmp ne i32 %cond1914, 0
  %1431 = zext i1 %tobool1915 to i64
  %cond1916 = select i1 %tobool1915, i32 1, i32 0
  %1432 = load i64, i64* %offset1902, align 8
  %1433 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1917 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1433, i32 0, i32 2
  %1434 = load i8*, i8** %precomp1917, align 8
  %1435 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81918 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1435, i32 0, i32 25
  %1436 = load i32, i32* %utf81918, align 8
  %tobool1919 = icmp ne i32 %1436, 0
  %1437 = zext i1 %tobool1919 to i64
  %cond1920 = select i1 %tobool1919, i32 1, i32 0
  %tobool1921 = icmp ne i32 %cond1920, 0
  %1438 = zext i1 %tobool1921 to i64
  %cond1922 = select i1 %tobool1921, i32 1, i32 0
  %1439 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1923 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1439, i32 0, i32 7
  %1440 = load i8*, i8** %end1923, align 8
  %1441 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1924 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1441, i32 0, i32 2
  %1442 = load i8*, i8** %precomp1924, align 8
  %sub.ptr.lhs.cast1925 = ptrtoint i8* %1440 to i64
  %sub.ptr.rhs.cast1926 = ptrtoint i8* %1442 to i64
  %sub.ptr.sub1927 = sub i64 %sub.ptr.lhs.cast1925, %sub.ptr.rhs.cast1926
  %1443 = load i64, i64* %offset1902, align 8
  %sub1928 = sub nsw i64 %sub.ptr.sub1927, %1443
  %1444 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1929 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1444, i32 0, i32 2
  %1445 = load i8*, i8** %precomp1929, align 8
  %1446 = load i64, i64* %offset1902, align 8
  %add.ptr1930 = getelementptr inbounds i8, i8* %1445, i64 %1446
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool1911, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.330, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %1425, i32 %1426, i8* %1427, i32 %cond1916, i64 %1432, i8* %1434, i32 %cond1922, i64 %sub1928, i8* %add.ptr1930)
  br label %do.end1931

do.end1931:                                       ; preds = %do.body1901
  br label %do.end1932

do.end1932:                                       ; preds = %do.end1931
  br label %if.end1967

if.else1933:                                      ; preds = %cond.end1888
  %1447 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1934 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1447, i32 0, i32 12
  %1448 = load %struct.regnode*, %struct.regnode** %emit1934, align 8
  %1449 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1935 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1449, i32 0, i32 13
  %1450 = bitcast %struct.regnode_ssc* %emit_dummy1935 to %struct.regnode*
  %cmp1936 = icmp eq %struct.regnode* %1448, %1450
  br i1 %cmp1936, label %if.end1966, label %if.then1938

if.then1938:                                      ; preds = %if.else1933
  br label %do.body1939

do.body1939:                                      ; preds = %if.then1938
  %1451 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse1941 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1451, i32 0, i32 8
  %1452 = load i8*, i8** %parse1941, align 8
  %1453 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1942 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1453, i32 0, i32 2
  %1454 = load i8*, i8** %precomp1942, align 8
  %sub.ptr.lhs.cast1943 = ptrtoint i8* %1452 to i64
  %sub.ptr.rhs.cast1944 = ptrtoint i8* %1454 to i64
  %sub.ptr.sub1945 = sub i64 %sub.ptr.lhs.cast1943, %sub.ptr.rhs.cast1944
  store i64 %sub.ptr.sub1945, i64* %offset1940, align 8
  %1455 = load i32, i32* %w1878, align 4
  %1456 = load i32, i32* %w1878, align 4
  %1457 = load i8*, i8** %rangebegin, align 8
  %1458 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81946 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1458, i32 0, i32 25
  %1459 = load i32, i32* %utf81946, align 8
  %tobool1947 = icmp ne i32 %1459, 0
  %1460 = zext i1 %tobool1947 to i64
  %cond1948 = select i1 %tobool1947, i32 1, i32 0
  %tobool1949 = icmp ne i32 %cond1948, 0
  %1461 = zext i1 %tobool1949 to i64
  %cond1950 = select i1 %tobool1949, i32 1, i32 0
  %1462 = load i64, i64* %offset1940, align 8
  %1463 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1951 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1463, i32 0, i32 2
  %1464 = load i8*, i8** %precomp1951, align 8
  %1465 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf81952 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1465, i32 0, i32 25
  %1466 = load i32, i32* %utf81952, align 8
  %tobool1953 = icmp ne i32 %1466, 0
  %1467 = zext i1 %tobool1953 to i64
  %cond1954 = select i1 %tobool1953, i32 1, i32 0
  %tobool1955 = icmp ne i32 %cond1954, 0
  %1468 = zext i1 %tobool1955 to i64
  %cond1956 = select i1 %tobool1955, i32 1, i32 0
  %1469 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end1957 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1469, i32 0, i32 7
  %1470 = load i8*, i8** %end1957, align 8
  %1471 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1958 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1471, i32 0, i32 2
  %1472 = load i8*, i8** %precomp1958, align 8
  %sub.ptr.lhs.cast1959 = ptrtoint i8* %1470 to i64
  %sub.ptr.rhs.cast1960 = ptrtoint i8* %1472 to i64
  %sub.ptr.sub1961 = sub i64 %sub.ptr.lhs.cast1959, %sub.ptr.rhs.cast1960
  %1473 = load i64, i64* %offset1940, align 8
  %sub1962 = sub nsw i64 %sub.ptr.sub1961, %1473
  %1474 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp1963 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1474, i32 0, i32 2
  %1475 = load i8*, i8** %precomp1963, align 8
  %1476 = load i64, i64* %offset1940, align 8
  %add.ptr1964 = getelementptr inbounds i8, i8* %1475, i64 %1476
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.331, i64 0, i64 0), i32 %1455, i32 %1456, i8* %1457, i32 %cond1950, i64 %1462, i8* %1464, i32 %cond1956, i64 %sub1962, i8* %add.ptr1964)
  br label %do.end1965

do.end1965:                                       ; preds = %do.body1939
  br label %if.end1966

if.end1966:                                       ; preds = %do.end1965, %if.else1933
  br label %if.end1967

if.end1967:                                       ; preds = %if.end1966, %do.end1932
  br label %if.end1968

if.end1968:                                       ; preds = %if.end1967, %land.lhs.true1874, %lor.lhs.false1869
  %1477 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit1969 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1477, i32 0, i32 12
  %1478 = load %struct.regnode*, %struct.regnode** %emit1969, align 8
  %1479 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy1970 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1479, i32 0, i32 13
  %1480 = bitcast %struct.regnode_ssc* %emit_dummy1970 to %struct.regnode*
  %cmp1971 = icmp eq %struct.regnode* %1478, %1480
  br i1 %cmp1971, label %if.end1975, label %if.then1973

if.then1973:                                      ; preds = %if.end1968
  %1481 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %call1974 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %1481, i64 45)
  store %struct.sv* %call1974, %struct.sv** %cp_list, align 8
  br label %if.end1975

if.end1975:                                       ; preds = %if.then1973, %if.end1968
  %1482 = load i64, i64* %element_count, align 8
  %inc1976 = add i64 %1482, 1
  store i64 %inc1976, i64* %element_count, align 8
  br label %if.end1978

if.else1977:                                      ; preds = %if.then1862
  store i64 1, i64* %range, align 8
  br label %if.end1978

if.end1978:                                       ; preds = %if.else1977, %if.end1975
  br label %while.body172

if.end1979:                                       ; preds = %land.lhs.true1858, %if.end1854
  br label %if.end1980

if.end1980:                                       ; preds = %if.end1979, %land.lhs.true1841, %if.else1839
  br label %if.end1981

if.end1981:                                       ; preds = %if.end1980, %if.end1838
  %1483 = load i64, i64* %namedclass, align 8
  %cmp1982 = icmp sgt i64 %1483, -1
  br i1 %cmp1982, label %if.then1984, label %if.end1985

if.then1984:                                      ; preds = %if.end1981
  br label %while.body172

if.end1985:                                       ; preds = %if.end1981
  %1484 = load i64, i64* %value, align 8
  %cmp1986 = icmp ugt i64 %1484, 255
  br i1 %cmp1986, label %if.then1988, label %if.end1990

if.then1988:                                      ; preds = %if.end1985
  %1485 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %uni_semantics1989 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1485, i32 0, i32 27
  store i32 1, i32* %uni_semantics1989, align 8
  br label %if.end1990

if.end1990:                                       ; preds = %if.then1988, %if.end1985
  %1486 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1991 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1486, i32 0, i32 0
  %1487 = load i32, i32* %flags1991, align 8
  %and1992 = and i32 %1487, 4
  %tobool1993 = icmp ne i32 %and1992, 0
  br i1 %tobool1993, label %cond.true1994, label %cond.false1995

cond.true1994:                                    ; preds = %if.end1990
  br i1 true, label %land.lhs.true1996, label %if.end2039

cond.false1995:                                   ; preds = %if.end1990
  br i1 false, label %land.lhs.true1996, label %if.end2039

land.lhs.true1996:                                ; preds = %cond.false1995, %cond.true1994
  %1488 = load i8, i8* %allow_multi_folds.addr, align 1
  %tobool1997 = trunc i8 %1488 to i1
  br i1 %tobool1997, label %land.lhs.true1999, label %if.end2039

land.lhs.true1999:                                ; preds = %land.lhs.true1996
  %1489 = load i64, i64* %value, align 8
  %1490 = load i64, i64* %prevvalue, align 8
  %cmp2000 = icmp eq i64 %1489, %1490
  br i1 %cmp2000, label %if.then2002, label %if.end2039

if.then2002:                                      ; preds = %land.lhs.true1999
  %1491 = load i64, i64* %value, align 8
  %cmp2003 = icmp eq i64 %1491, 223
  br i1 %cmp2003, label %if.then2011, label %lor.lhs.false2005

lor.lhs.false2005:                                ; preds = %if.then2002
  %1492 = load i64, i64* %value, align 8
  %cmp2006 = icmp ugt i64 %1492, 255
  br i1 %cmp2006, label %land.lhs.true2008, label %if.end2038

land.lhs.true2008:                                ; preds = %lor.lhs.false2005
  %1493 = load %struct.sv*, %struct.sv** @PL_HasMultiCharFold, align 8
  %1494 = load i64, i64* %value, align 8
  %call2009 = call zeroext i1 @S__invlist_contains_cp(%struct.sv* %1493, i64 %1494)
  br i1 %call2009, label %if.then2011, label %if.end2038

if.then2011:                                      ; preds = %land.lhs.true2008, %if.then2002
  %1495 = load i64, i64* %value, align 8
  %arraydecay2012 = getelementptr inbounds [13 x i8], [13 x i8]* %foldbuf, i64 0, i64 0
  %1496 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2013 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1496, i32 0, i32 0
  %1497 = load i32, i32* %flags2013, align 8
  %call2014 = call i32 @get_regex_charset(i32 %1497)
  %cmp2015 = icmp eq i32 %call2014, 4
  %1498 = zext i1 %cmp2015 to i64
  %cond2017 = select i1 %cmp2015, i32 4, i32 0
  %or2018 = or i32 2, %cond2017
  %conv2019 = trunc i32 %or2018 to i8
  %call2020 = call i64 @Perl__to_uni_fold_flags(i64 %1495, i8* %arraydecay2012, i64* %foldlen, i8 zeroext %conv2019)
  store i64 %call2020, i64* %folded, align 8
  %1499 = load i64, i64* %folded, align 8
  %1500 = load i64, i64* %value, align 8
  %cmp2021 = icmp ne i64 %1499, %1500
  br i1 %cmp2021, label %if.then2023, label %if.end2037

if.then2023:                                      ; preds = %if.then2011
  %1501 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %in_multi_char_class2024 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1501, i32 0, i32 37
  %1502 = load i32, i32* %in_multi_char_class2024, align 4
  %tobool2025 = icmp ne i32 %1502, 0
  br i1 %tobool2025, label %if.end2035, label %if.then2026

if.then2026:                                      ; preds = %if.then2023
  %arraydecay2028 = getelementptr inbounds [13 x i8], [13 x i8]* %foldbuf, i64 0, i64 0
  %arraydecay2029 = getelementptr inbounds [13 x i8], [13 x i8]* %foldbuf, i64 0, i64 0
  %1503 = load i64, i64* %foldlen, align 8
  %add.ptr2030 = getelementptr inbounds i8, i8* %arraydecay2029, i64 %1503
  %call2031 = call i64 @Perl_utf8_length(i8* %arraydecay2028, i8* %add.ptr2030)
  store i64 %call2031, i64* %cp_count2027, align 8
  %call2032 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i64 0)
  %call2033 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call2032)
  store %struct.sv* %call2033, %struct.sv** %multi_fold, align 8
  %1504 = load %struct.sv*, %struct.sv** %multi_fold, align 8
  %1505 = load i64, i64* %value, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %1504, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.332, i64 0, i64 0), i64 %1505)
  %1506 = load %struct.av*, %struct.av** %multi_char_matches, align 8
  %1507 = load %struct.sv*, %struct.sv** %multi_fold, align 8
  %1508 = load i64, i64* %cp_count2027, align 8
  %call2034 = call %struct.av* @S_add_multi_match(%struct.av* %1506, %struct.sv* %1507, i64 %1508)
  store %struct.av* %call2034, %struct.av** %multi_char_matches, align 8
  br label %if.end2035

if.end2035:                                       ; preds = %if.then2026, %if.then2023
  %1509 = load i64, i64* %element_count, align 8
  %dec2036 = add i64 %1509, -1
  store i64 %dec2036, i64* %element_count, align 8
  %1510 = load i64, i64* %save_value, align 8
  store i64 %1510, i64* %value, align 8
  %1511 = load i64, i64* %save_prevvalue, align 8
  store i64 %1511, i64* %prevvalue, align 8
  br label %while.body172

if.end2037:                                       ; preds = %if.then2011
  br label %if.end2038

if.end2038:                                       ; preds = %if.end2037, %land.lhs.true2008, %lor.lhs.false2005
  br label %if.end2039

if.end2039:                                       ; preds = %if.end2038, %land.lhs.true1999, %land.lhs.true1996, %cond.false1995, %cond.true1994
  %1512 = load i8, i8* %strict.addr, align 1
  %tobool2040 = trunc i8 %1512 to i1
  br i1 %tobool2040, label %land.lhs.true2042, label %if.end2381

land.lhs.true2042:                                ; preds = %if.end2039
  %1513 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2043 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1513, i32 0, i32 12
  %1514 = load %struct.regnode*, %struct.regnode** %emit2043, align 8
  %1515 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2044 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1515, i32 0, i32 13
  %1516 = bitcast %struct.regnode_ssc* %emit_dummy2044 to %struct.regnode*
  %cmp2045 = icmp eq %struct.regnode* %1514, %1516
  br i1 %cmp2045, label %if.end2381, label %land.lhs.true2047

land.lhs.true2047:                                ; preds = %land.lhs.true2042
  %call2048 = call zeroext i1 @Perl_ckwarn(i32 20)
  br i1 %call2048, label %if.then2050, label %if.end2381

if.then2050:                                      ; preds = %land.lhs.true2047
  %1517 = load i64, i64* %range, align 8
  %tobool2051 = icmp ne i64 %1517, 0
  br i1 %tobool2051, label %if.then2052, label %if.end2258

if.then2052:                                      ; preds = %if.then2050
  %1518 = load i8, i8* %unicode_range, align 1
  %tobool2053 = trunc i8 %1518 to i1
  br i1 %tobool2053, label %land.lhs.true2055, label %if.else2088

land.lhs.true2055:                                ; preds = %if.then2052
  %1519 = load i32, i32* %non_portable_endpoint, align 4
  %tobool2056 = icmp ne i32 %1519, 0
  br i1 %tobool2056, label %land.lhs.true2057, label %if.else2088

land.lhs.true2057:                                ; preds = %land.lhs.true2055
  %1520 = load i64, i64* %prevvalue, align 8
  %cmp2058 = icmp ult i64 %1520, 256
  br i1 %cmp2058, label %if.then2060, label %if.else2088

if.then2060:                                      ; preds = %land.lhs.true2057
  br label %do.body2061

do.body2061:                                      ; preds = %if.then2060
  %1521 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2063 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1521, i32 0, i32 8
  %1522 = load i8*, i8** %parse2063, align 8
  %1523 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2064 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1523, i32 0, i32 2
  %1524 = load i8*, i8** %precomp2064, align 8
  %sub.ptr.lhs.cast2065 = ptrtoint i8* %1522 to i64
  %sub.ptr.rhs.cast2066 = ptrtoint i8* %1524 to i64
  %sub.ptr.sub2067 = sub i64 %sub.ptr.lhs.cast2065, %sub.ptr.rhs.cast2066
  store i64 %sub.ptr.sub2067, i64* %offset2062, align 8
  %1525 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82068 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1525, i32 0, i32 25
  %1526 = load i32, i32* %utf82068, align 8
  %tobool2069 = icmp ne i32 %1526, 0
  %1527 = zext i1 %tobool2069 to i64
  %cond2070 = select i1 %tobool2069, i32 1, i32 0
  %tobool2071 = icmp ne i32 %cond2070, 0
  %1528 = zext i1 %tobool2071 to i64
  %cond2072 = select i1 %tobool2071, i32 1, i32 0
  %1529 = load i64, i64* %offset2062, align 8
  %1530 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2073 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1530, i32 0, i32 2
  %1531 = load i8*, i8** %precomp2073, align 8
  %1532 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82074 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1532, i32 0, i32 25
  %1533 = load i32, i32* %utf82074, align 8
  %tobool2075 = icmp ne i32 %1533, 0
  %1534 = zext i1 %tobool2075 to i64
  %cond2076 = select i1 %tobool2075, i32 1, i32 0
  %tobool2077 = icmp ne i32 %cond2076, 0
  %1535 = zext i1 %tobool2077 to i64
  %cond2078 = select i1 %tobool2077, i32 1, i32 0
  %1536 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2079 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1536, i32 0, i32 7
  %1537 = load i8*, i8** %end2079, align 8
  %1538 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2080 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1538, i32 0, i32 2
  %1539 = load i8*, i8** %precomp2080, align 8
  %sub.ptr.lhs.cast2081 = ptrtoint i8* %1537 to i64
  %sub.ptr.rhs.cast2082 = ptrtoint i8* %1539 to i64
  %sub.ptr.sub2083 = sub i64 %sub.ptr.lhs.cast2081, %sub.ptr.rhs.cast2082
  %1540 = load i64, i64* %offset2062, align 8
  %sub2084 = sub nsw i64 %sub.ptr.sub2083, %1540
  %1541 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2085 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1541, i32 0, i32 2
  %1542 = load i8*, i8** %precomp2085, align 8
  %1543 = load i64, i64* %offset2062, align 8
  %add.ptr2086 = getelementptr inbounds i8, i8* %1542, i64 %1543
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.333, i64 0, i64 0), i32 %cond2072, i64 %1529, i8* %1531, i32 %cond2078, i64 %sub2084, i8* %add.ptr2086)
  br label %do.end2087

do.end2087:                                       ; preds = %do.body2061
  br label %if.end2257

if.else2088:                                      ; preds = %land.lhs.true2057, %land.lhs.true2055, %if.then2052
  %1544 = load i64, i64* %prevvalue, align 8
  %1545 = load i64, i64* %value, align 8
  %cmp2089 = icmp ne i64 %1544, %1545
  br i1 %cmp2089, label %if.then2091, label %if.end2256

if.then2091:                                      ; preds = %if.else2088
  %1546 = load i64, i64* %prevvalue, align 8
  %and2092 = and i64 %1546, -256
  %tobool2093 = icmp ne i64 %and2092, 0
  br i1 %tobool2093, label %lor.lhs.false2101, label %land.lhs.true2094

land.lhs.true2094:                                ; preds = %if.then2091
  %1547 = load i64, i64* %prevvalue, align 8
  %conv2095 = trunc i64 %1547 to i8
  %idxprom2096 = zext i8 %conv2095 to i64
  %arrayidx2097 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2096
  %1548 = load i32, i32* %arrayidx2097, align 4
  %and2098 = and i32 %1548, 16448
  %cmp2099 = icmp eq i32 %and2098, 16448
  br i1 %cmp2099, label %land.lhs.true2111, label %lor.lhs.false2101

lor.lhs.false2101:                                ; preds = %land.lhs.true2094, %if.then2091
  %1549 = load i64, i64* %value, align 8
  %and2102 = and i64 %1549, -256
  %tobool2103 = icmp ne i64 %and2102, 0
  br i1 %tobool2103, label %if.else2203, label %land.lhs.true2104

land.lhs.true2104:                                ; preds = %lor.lhs.false2101
  %1550 = load i64, i64* %value, align 8
  %conv2105 = trunc i64 %1550 to i8
  %idxprom2106 = zext i8 %conv2105 to i64
  %arrayidx2107 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2106
  %1551 = load i32, i32* %arrayidx2107, align 4
  %and2108 = and i32 %1551, 16448
  %cmp2109 = icmp eq i32 %and2108, 16448
  br i1 %cmp2109, label %land.lhs.true2111, label %if.else2203

land.lhs.true2111:                                ; preds = %land.lhs.true2104, %land.lhs.true2094
  %1552 = load i32, i32* %non_portable_endpoint, align 4
  %tobool2112 = icmp ne i32 %1552, 0
  br i1 %tobool2112, label %if.then2175, label %lor.lhs.false2113

lor.lhs.false2113:                                ; preds = %land.lhs.true2111
  %1553 = load i64, i64* %prevvalue, align 8
  %and2114 = and i64 %1553, -256
  %tobool2115 = icmp ne i64 %and2114, 0
  br i1 %tobool2115, label %cond.false2123, label %land.lhs.true2116

land.lhs.true2116:                                ; preds = %lor.lhs.false2113
  %1554 = load i64, i64* %prevvalue, align 8
  %conv2117 = trunc i64 %1554 to i8
  %idxprom2118 = zext i8 %conv2117 to i64
  %arrayidx2119 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2118
  %1555 = load i32, i32* %arrayidx2119, align 4
  %and2120 = and i32 %1555, 2
  %tobool2121 = icmp ne i32 %and2120, 0
  br i1 %tobool2121, label %cond.true2122, label %cond.false2123

cond.true2122:                                    ; preds = %land.lhs.true2116
  br i1 true, label %land.lhs.true2124, label %lor.lhs.false2135

cond.false2123:                                   ; preds = %land.lhs.true2116, %lor.lhs.false2113
  br i1 false, label %land.lhs.true2124, label %lor.lhs.false2135

land.lhs.true2124:                                ; preds = %cond.false2123, %cond.true2122
  %1556 = load i64, i64* %value, align 8
  %and2125 = and i64 %1556, -256
  %tobool2126 = icmp ne i64 %and2125, 0
  br i1 %tobool2126, label %cond.false2134, label %land.lhs.true2127

land.lhs.true2127:                                ; preds = %land.lhs.true2124
  %1557 = load i64, i64* %value, align 8
  %conv2128 = trunc i64 %1557 to i8
  %idxprom2129 = zext i8 %conv2128 to i64
  %arrayidx2130 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2129
  %1558 = load i32, i32* %arrayidx2130, align 4
  %and2131 = and i32 %1558, 2
  %tobool2132 = icmp ne i32 %and2131, 0
  br i1 %tobool2132, label %cond.true2133, label %cond.false2134

cond.true2133:                                    ; preds = %land.lhs.true2127
  br i1 true, label %if.else2203, label %lor.lhs.false2135

cond.false2134:                                   ; preds = %land.lhs.true2127, %land.lhs.true2124
  br i1 false, label %if.else2203, label %lor.lhs.false2135

lor.lhs.false2135:                                ; preds = %cond.false2134, %cond.true2133, %cond.false2123, %cond.true2122
  %1559 = load i64, i64* %prevvalue, align 8
  %and2136 = and i64 %1559, -256
  %tobool2137 = icmp ne i64 %and2136, 0
  br i1 %tobool2137, label %lor.lhs.false2155, label %land.lhs.true2138

land.lhs.true2138:                                ; preds = %lor.lhs.false2135
  %1560 = load i64, i64* %prevvalue, align 8
  %conv2139 = trunc i64 %1560 to i8
  %idxprom2140 = zext i8 %conv2139 to i64
  %arrayidx2141 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2140
  %1561 = load i32, i32* %arrayidx2141, align 4
  %and2142 = and i32 %1561, 16392
  %cmp2143 = icmp eq i32 %and2142, 16392
  br i1 %cmp2143, label %land.lhs.true2145, label %lor.lhs.false2155

land.lhs.true2145:                                ; preds = %land.lhs.true2138
  %1562 = load i64, i64* %value, align 8
  %and2146 = and i64 %1562, -256
  %tobool2147 = icmp ne i64 %and2146, 0
  br i1 %tobool2147, label %lor.lhs.false2155, label %land.lhs.true2148

land.lhs.true2148:                                ; preds = %land.lhs.true2145
  %1563 = load i64, i64* %value, align 8
  %conv2149 = trunc i64 %1563 to i8
  %idxprom2150 = zext i8 %conv2149 to i64
  %arrayidx2151 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2150
  %1564 = load i32, i32* %arrayidx2151, align 4
  %and2152 = and i32 %1564, 16392
  %cmp2153 = icmp eq i32 %and2152, 16392
  br i1 %cmp2153, label %if.else2203, label %lor.lhs.false2155

lor.lhs.false2155:                                ; preds = %land.lhs.true2148, %land.lhs.true2145, %land.lhs.true2138, %lor.lhs.false2135
  %1565 = load i64, i64* %prevvalue, align 8
  %and2156 = and i64 %1565, -256
  %tobool2157 = icmp ne i64 %and2156, 0
  br i1 %tobool2157, label %if.then2175, label %land.lhs.true2158

land.lhs.true2158:                                ; preds = %lor.lhs.false2155
  %1566 = load i64, i64* %prevvalue, align 8
  %conv2159 = trunc i64 %1566 to i8
  %idxprom2160 = zext i8 %conv2159 to i64
  %arrayidx2161 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2160
  %1567 = load i32, i32* %arrayidx2161, align 4
  %and2162 = and i32 %1567, 16400
  %cmp2163 = icmp eq i32 %and2162, 16400
  br i1 %cmp2163, label %land.lhs.true2165, label %if.then2175

land.lhs.true2165:                                ; preds = %land.lhs.true2158
  %1568 = load i64, i64* %value, align 8
  %and2166 = and i64 %1568, -256
  %tobool2167 = icmp ne i64 %and2166, 0
  br i1 %tobool2167, label %if.then2175, label %land.lhs.true2168

land.lhs.true2168:                                ; preds = %land.lhs.true2165
  %1569 = load i64, i64* %value, align 8
  %conv2169 = trunc i64 %1569 to i8
  %idxprom2170 = zext i8 %conv2169 to i64
  %arrayidx2171 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2170
  %1570 = load i32, i32* %arrayidx2171, align 4
  %and2172 = and i32 %1570, 16400
  %cmp2173 = icmp eq i32 %and2172, 16400
  br i1 %cmp2173, label %if.else2203, label %if.then2175

if.then2175:                                      ; preds = %land.lhs.true2168, %land.lhs.true2165, %land.lhs.true2158, %lor.lhs.false2155, %land.lhs.true2111
  br label %do.body2176

do.body2176:                                      ; preds = %if.then2175
  %1571 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2178 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1571, i32 0, i32 8
  %1572 = load i8*, i8** %parse2178, align 8
  %1573 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2179 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1573, i32 0, i32 2
  %1574 = load i8*, i8** %precomp2179, align 8
  %sub.ptr.lhs.cast2180 = ptrtoint i8* %1572 to i64
  %sub.ptr.rhs.cast2181 = ptrtoint i8* %1574 to i64
  %sub.ptr.sub2182 = sub i64 %sub.ptr.lhs.cast2180, %sub.ptr.rhs.cast2181
  store i64 %sub.ptr.sub2182, i64* %offset2177, align 8
  %1575 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82183 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1575, i32 0, i32 25
  %1576 = load i32, i32* %utf82183, align 8
  %tobool2184 = icmp ne i32 %1576, 0
  %1577 = zext i1 %tobool2184 to i64
  %cond2185 = select i1 %tobool2184, i32 1, i32 0
  %tobool2186 = icmp ne i32 %cond2185, 0
  %1578 = zext i1 %tobool2186 to i64
  %cond2187 = select i1 %tobool2186, i32 1, i32 0
  %1579 = load i64, i64* %offset2177, align 8
  %1580 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2188 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1580, i32 0, i32 2
  %1581 = load i8*, i8** %precomp2188, align 8
  %1582 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82189 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1582, i32 0, i32 25
  %1583 = load i32, i32* %utf82189, align 8
  %tobool2190 = icmp ne i32 %1583, 0
  %1584 = zext i1 %tobool2190 to i64
  %cond2191 = select i1 %tobool2190, i32 1, i32 0
  %tobool2192 = icmp ne i32 %cond2191, 0
  %1585 = zext i1 %tobool2192 to i64
  %cond2193 = select i1 %tobool2192, i32 1, i32 0
  %1586 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2194 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1586, i32 0, i32 7
  %1587 = load i8*, i8** %end2194, align 8
  %1588 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2195 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1588, i32 0, i32 2
  %1589 = load i8*, i8** %precomp2195, align 8
  %sub.ptr.lhs.cast2196 = ptrtoint i8* %1587 to i64
  %sub.ptr.rhs.cast2197 = ptrtoint i8* %1589 to i64
  %sub.ptr.sub2198 = sub i64 %sub.ptr.lhs.cast2196, %sub.ptr.rhs.cast2197
  %1590 = load i64, i64* %offset2177, align 8
  %sub2199 = sub nsw i64 %sub.ptr.sub2198, %1590
  %1591 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2200 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1591, i32 0, i32 2
  %1592 = load i8*, i8** %precomp2200, align 8
  %1593 = load i64, i64* %offset2177, align 8
  %add.ptr2201 = getelementptr inbounds i8, i8* %1592, i64 %1593
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([137 x i8], [137 x i8]* @.str.334, i64 0, i64 0), i32 %cond2187, i64 %1579, i8* %1581, i32 %cond2193, i64 %sub2199, i8* %add.ptr2201)
  br label %do.end2202

do.end2202:                                       ; preds = %do.body2176
  br label %if.end2255

if.else2203:                                      ; preds = %land.lhs.true2168, %land.lhs.true2148, %cond.false2134, %cond.true2133, %land.lhs.true2104, %lor.lhs.false2101
  %1594 = load i64, i64* %prevvalue, align 8
  %cmp2204 = icmp uge i64 %1594, 1632
  br i1 %cmp2204, label %if.then2206, label %if.end2254

if.then2206:                                      ; preds = %if.else2203
  %1595 = load %struct.sv*, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 1), align 8
  %1596 = load i64, i64* %prevvalue, align 8
  %call2207 = call i64 @Perl__invlist_search(%struct.sv* %1595, i64 %1596)
  store i64 %call2207, i64* %index_start, align 8
  %1597 = load %struct.sv*, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 1), align 8
  %1598 = load i64, i64* %value, align 8
  %call2208 = call i64 @Perl__invlist_search(%struct.sv* %1597, i64 %1598)
  store i64 %call2208, i64* %index_final, align 8
  %1599 = load i64, i64* %index_start, align 8
  %1600 = load i64, i64* %index_final, align 8
  %cmp2209 = icmp eq i64 %1599, %1600
  br i1 %cmp2209, label %if.then2211, label %if.else2212

if.then2211:                                      ; preds = %if.then2206
  br label %if.end2253

if.else2212:                                      ; preds = %if.then2206
  %1601 = load i64, i64* %index_start, align 8
  %cmp2213 = icmp sge i64 %1601, 0
  br i1 %cmp2213, label %land.lhs.true2215, label %lor.lhs.false2218

land.lhs.true2215:                                ; preds = %if.else2212
  %1602 = load i64, i64* %index_start, align 8
  %and2216 = and i64 %1602, 1
  %tobool2217 = icmp ne i64 %and2216, 0
  br i1 %tobool2217, label %lor.lhs.false2218, label %if.then2224

lor.lhs.false2218:                                ; preds = %land.lhs.true2215, %if.else2212
  %1603 = load i64, i64* %index_final, align 8
  %cmp2219 = icmp sge i64 %1603, 0
  br i1 %cmp2219, label %land.lhs.true2221, label %if.end2252

land.lhs.true2221:                                ; preds = %lor.lhs.false2218
  %1604 = load i64, i64* %index_final, align 8
  %and2222 = and i64 %1604, 1
  %tobool2223 = icmp ne i64 %and2222, 0
  br i1 %tobool2223, label %if.end2252, label %if.then2224

if.then2224:                                      ; preds = %land.lhs.true2221, %land.lhs.true2215
  br label %do.body2225

do.body2225:                                      ; preds = %if.then2224
  %1605 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2227 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1605, i32 0, i32 8
  %1606 = load i8*, i8** %parse2227, align 8
  %1607 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2228 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1607, i32 0, i32 2
  %1608 = load i8*, i8** %precomp2228, align 8
  %sub.ptr.lhs.cast2229 = ptrtoint i8* %1606 to i64
  %sub.ptr.rhs.cast2230 = ptrtoint i8* %1608 to i64
  %sub.ptr.sub2231 = sub i64 %sub.ptr.lhs.cast2229, %sub.ptr.rhs.cast2230
  store i64 %sub.ptr.sub2231, i64* %offset2226, align 8
  %1609 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82232 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1609, i32 0, i32 25
  %1610 = load i32, i32* %utf82232, align 8
  %tobool2233 = icmp ne i32 %1610, 0
  %1611 = zext i1 %tobool2233 to i64
  %cond2234 = select i1 %tobool2233, i32 1, i32 0
  %tobool2235 = icmp ne i32 %cond2234, 0
  %1612 = zext i1 %tobool2235 to i64
  %cond2236 = select i1 %tobool2235, i32 1, i32 0
  %1613 = load i64, i64* %offset2226, align 8
  %1614 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2237 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1614, i32 0, i32 2
  %1615 = load i8*, i8** %precomp2237, align 8
  %1616 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82238 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1616, i32 0, i32 25
  %1617 = load i32, i32* %utf82238, align 8
  %tobool2239 = icmp ne i32 %1617, 0
  %1618 = zext i1 %tobool2239 to i64
  %cond2240 = select i1 %tobool2239, i32 1, i32 0
  %tobool2241 = icmp ne i32 %cond2240, 0
  %1619 = zext i1 %tobool2241 to i64
  %cond2242 = select i1 %tobool2241, i32 1, i32 0
  %1620 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2243 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1620, i32 0, i32 7
  %1621 = load i8*, i8** %end2243, align 8
  %1622 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2244 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1622, i32 0, i32 2
  %1623 = load i8*, i8** %precomp2244, align 8
  %sub.ptr.lhs.cast2245 = ptrtoint i8* %1621 to i64
  %sub.ptr.rhs.cast2246 = ptrtoint i8* %1623 to i64
  %sub.ptr.sub2247 = sub i64 %sub.ptr.lhs.cast2245, %sub.ptr.rhs.cast2246
  %1624 = load i64, i64* %offset2226, align 8
  %sub2248 = sub nsw i64 %sub.ptr.sub2247, %1624
  %1625 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2249 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1625, i32 0, i32 2
  %1626 = load i8*, i8** %precomp2249, align 8
  %1627 = load i64, i64* %offset2226, align 8
  %add.ptr2250 = getelementptr inbounds i8, i8* %1626, i64 %1627
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([115 x i8], [115 x i8]* @.str.335, i64 0, i64 0), i32 %cond2236, i64 %1613, i8* %1615, i32 %cond2242, i64 %sub2248, i8* %add.ptr2250)
  br label %do.end2251

do.end2251:                                       ; preds = %do.body2225
  br label %if.end2252

if.end2252:                                       ; preds = %do.end2251, %land.lhs.true2221, %lor.lhs.false2218
  br label %if.end2253

if.end2253:                                       ; preds = %if.end2252, %if.then2211
  br label %if.end2254

if.end2254:                                       ; preds = %if.end2253, %if.else2203
  br label %if.end2255

if.end2255:                                       ; preds = %if.end2254, %do.end2202
  br label %if.end2256

if.end2256:                                       ; preds = %if.end2255, %if.else2088
  br label %if.end2257

if.end2257:                                       ; preds = %if.end2256, %do.end2087
  br label %if.end2258

if.end2258:                                       ; preds = %if.end2257, %if.then2050
  %1628 = load i64, i64* %range, align 8
  %tobool2259 = icmp ne i64 %1628, 0
  br i1 %tobool2259, label %lor.lhs.false2260, label %land.lhs.true2263

lor.lhs.false2260:                                ; preds = %if.end2258
  %1629 = load i64, i64* %prevvalue, align 8
  %1630 = load i64, i64* %value, align 8
  %cmp2261 = icmp eq i64 %1629, %1630
  br i1 %cmp2261, label %land.lhs.true2263, label %if.end2380

land.lhs.true2263:                                ; preds = %lor.lhs.false2260, %if.end2258
  %1631 = load i32, i32* %non_portable_endpoint, align 4
  %tobool2264 = icmp ne i32 %1631, 0
  br i1 %tobool2264, label %if.then2265, label %if.end2380

if.then2265:                                      ; preds = %land.lhs.true2263
  %1632 = load i64, i64* %value, align 8
  %and2266 = and i64 %1632, -256
  %tobool2267 = icmp ne i64 %and2266, 0
  br i1 %tobool2267, label %if.else2332, label %land.lhs.true2268

land.lhs.true2268:                                ; preds = %if.then2265
  %1633 = load i64, i64* %value, align 8
  %conv2269 = trunc i64 %1633 to i8
  %idxprom2270 = zext i8 %conv2269 to i64
  %arrayidx2271 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2270
  %1634 = load i32, i32* %arrayidx2271, align 4
  %and2272 = and i32 %1634, 16448
  %cmp2273 = icmp eq i32 %and2272, 16448
  br i1 %cmp2273, label %if.then2275, label %if.else2332

if.then2275:                                      ; preds = %land.lhs.true2268
  store i32 0, i32* %d, align 4
  %1635 = load i64, i64* %value, align 8
  %cmp2276 = icmp eq i64 %1635, 45
  br i1 %cmp2276, label %if.then2287, label %lor.lhs.false2278

lor.lhs.false2278:                                ; preds = %if.then2275
  %1636 = load i64, i64* %value, align 8
  %cmp2279 = icmp eq i64 %1636, 93
  br i1 %cmp2279, label %if.then2287, label %lor.lhs.false2281

lor.lhs.false2281:                                ; preds = %lor.lhs.false2278
  %1637 = load i64, i64* %value, align 8
  %cmp2282 = icmp eq i64 %1637, 92
  br i1 %cmp2282, label %if.then2287, label %lor.lhs.false2284

lor.lhs.false2284:                                ; preds = %lor.lhs.false2281
  %1638 = load i64, i64* %value, align 8
  %cmp2285 = icmp eq i64 %1638, 94
  br i1 %cmp2285, label %if.then2287, label %if.end2291

if.then2287:                                      ; preds = %lor.lhs.false2284, %lor.lhs.false2281, %lor.lhs.false2278, %if.then2275
  %1639 = load i32, i32* %d, align 4
  %inc2288 = add i32 %1639, 1
  store i32 %inc2288, i32* %d, align 4
  %idxprom2289 = zext i32 %1639 to i64
  %arrayidx2290 = getelementptr inbounds [3 x i8], [3 x i8]* %literal, i64 0, i64 %idxprom2289
  store i8 92, i8* %arrayidx2290, align 1
  br label %if.end2291

if.end2291:                                       ; preds = %if.then2287, %lor.lhs.false2284
  %1640 = load i64, i64* %value, align 8
  %conv2292 = trunc i64 %1640 to i8
  %1641 = load i32, i32* %d, align 4
  %inc2293 = add i32 %1641, 1
  store i32 %inc2293, i32* %d, align 4
  %idxprom2294 = zext i32 %1641 to i64
  %arrayidx2295 = getelementptr inbounds [3 x i8], [3 x i8]* %literal, i64 0, i64 %idxprom2294
  store i8 %conv2292, i8* %arrayidx2295, align 1
  %1642 = load i32, i32* %d, align 4
  %inc2296 = add i32 %1642, 1
  store i32 %inc2296, i32* %d, align 4
  %idxprom2297 = zext i32 %1642 to i64
  %arrayidx2298 = getelementptr inbounds [3 x i8], [3 x i8]* %literal, i64 0, i64 %idxprom2297
  store i8 0, i8* %arrayidx2298, align 1
  br label %do.body2299

do.body2299:                                      ; preds = %if.end2291
  %1643 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2301 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1643, i32 0, i32 8
  %1644 = load i8*, i8** %parse2301, align 8
  %1645 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2302 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1645, i32 0, i32 2
  %1646 = load i8*, i8** %precomp2302, align 8
  %sub.ptr.lhs.cast2303 = ptrtoint i8* %1644 to i64
  %sub.ptr.rhs.cast2304 = ptrtoint i8* %1646 to i64
  %sub.ptr.sub2305 = sub i64 %sub.ptr.lhs.cast2303, %sub.ptr.rhs.cast2304
  store i64 %sub.ptr.sub2305, i64* %offset2300, align 8
  %1647 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2306 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1647, i32 0, i32 8
  %1648 = load i8*, i8** %parse2306, align 8
  %1649 = load i8*, i8** %rangebegin, align 8
  %sub.ptr.lhs.cast2307 = ptrtoint i8* %1648 to i64
  %sub.ptr.rhs.cast2308 = ptrtoint i8* %1649 to i64
  %sub.ptr.sub2309 = sub i64 %sub.ptr.lhs.cast2307, %sub.ptr.rhs.cast2308
  %conv2310 = trunc i64 %sub.ptr.sub2309 to i32
  %1650 = load i8*, i8** %rangebegin, align 8
  %arraydecay2311 = getelementptr inbounds [3 x i8], [3 x i8]* %literal, i64 0, i64 0
  %1651 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82312 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1651, i32 0, i32 25
  %1652 = load i32, i32* %utf82312, align 8
  %tobool2313 = icmp ne i32 %1652, 0
  %1653 = zext i1 %tobool2313 to i64
  %cond2314 = select i1 %tobool2313, i32 1, i32 0
  %tobool2315 = icmp ne i32 %cond2314, 0
  %1654 = zext i1 %tobool2315 to i64
  %cond2316 = select i1 %tobool2315, i32 1, i32 0
  %1655 = load i64, i64* %offset2300, align 8
  %1656 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2317 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1656, i32 0, i32 2
  %1657 = load i8*, i8** %precomp2317, align 8
  %1658 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82318 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1658, i32 0, i32 25
  %1659 = load i32, i32* %utf82318, align 8
  %tobool2319 = icmp ne i32 %1659, 0
  %1660 = zext i1 %tobool2319 to i64
  %cond2320 = select i1 %tobool2319, i32 1, i32 0
  %tobool2321 = icmp ne i32 %cond2320, 0
  %1661 = zext i1 %tobool2321 to i64
  %cond2322 = select i1 %tobool2321, i32 1, i32 0
  %1662 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2323 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1662, i32 0, i32 7
  %1663 = load i8*, i8** %end2323, align 8
  %1664 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2324 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1664, i32 0, i32 2
  %1665 = load i8*, i8** %precomp2324, align 8
  %sub.ptr.lhs.cast2325 = ptrtoint i8* %1663 to i64
  %sub.ptr.rhs.cast2326 = ptrtoint i8* %1665 to i64
  %sub.ptr.sub2327 = sub i64 %sub.ptr.lhs.cast2325, %sub.ptr.rhs.cast2326
  %1666 = load i64, i64* %offset2300, align 8
  %sub2328 = sub nsw i64 %sub.ptr.sub2327, %1666
  %1667 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2329 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1667, i32 0, i32 2
  %1668 = load i8*, i8** %precomp2329, align 8
  %1669 = load i64, i64* %offset2300, align 8
  %add.ptr2330 = getelementptr inbounds i8, i8* %1668, i64 %1669
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.336, i64 0, i64 0), i32 %conv2310, i8* %1650, i8* %arraydecay2311, i32 %cond2316, i64 %1655, i8* %1657, i32 %cond2322, i64 %sub2328, i8* %add.ptr2330)
  br label %do.end2331

do.end2331:                                       ; preds = %do.body2299
  br label %if.end2379

if.else2332:                                      ; preds = %land.lhs.true2268, %if.then2265
  %1670 = load i64, i64* %value, align 8
  %and2333 = and i64 %1670, -256
  %tobool2334 = icmp ne i64 %and2333, 0
  br i1 %tobool2334, label %cond.false2342, label %land.lhs.true2335

land.lhs.true2335:                                ; preds = %if.else2332
  %1671 = load i64, i64* %value, align 8
  %conv2336 = trunc i64 %1671 to i8
  %idxprom2337 = zext i8 %conv2336 to i64
  %arrayidx2338 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2337
  %1672 = load i32, i32* %arrayidx2338, align 4
  %and2339 = and i32 %1672, 8388608
  %tobool2340 = icmp ne i32 %and2339, 0
  br i1 %tobool2340, label %cond.true2341, label %cond.false2342

cond.true2341:                                    ; preds = %land.lhs.true2335
  br i1 true, label %if.then2343, label %if.end2378

cond.false2342:                                   ; preds = %land.lhs.true2335, %if.else2332
  br i1 false, label %if.then2343, label %if.end2378

if.then2343:                                      ; preds = %cond.false2342, %cond.true2341
  br label %do.body2344

do.body2344:                                      ; preds = %if.then2343
  %1673 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2346 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1673, i32 0, i32 8
  %1674 = load i8*, i8** %parse2346, align 8
  %1675 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2347 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1675, i32 0, i32 2
  %1676 = load i8*, i8** %precomp2347, align 8
  %sub.ptr.lhs.cast2348 = ptrtoint i8* %1674 to i64
  %sub.ptr.rhs.cast2349 = ptrtoint i8* %1676 to i64
  %sub.ptr.sub2350 = sub i64 %sub.ptr.lhs.cast2348, %sub.ptr.rhs.cast2349
  store i64 %sub.ptr.sub2350, i64* %offset2345, align 8
  %1677 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2351 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1677, i32 0, i32 8
  %1678 = load i8*, i8** %parse2351, align 8
  %1679 = load i8*, i8** %rangebegin, align 8
  %sub.ptr.lhs.cast2352 = ptrtoint i8* %1678 to i64
  %sub.ptr.rhs.cast2353 = ptrtoint i8* %1679 to i64
  %sub.ptr.sub2354 = sub i64 %sub.ptr.lhs.cast2352, %sub.ptr.rhs.cast2353
  %conv2355 = trunc i64 %sub.ptr.sub2354 to i32
  %1680 = load i8*, i8** %rangebegin, align 8
  %1681 = load i64, i64* %value, align 8
  %conv2356 = trunc i64 %1681 to i8
  %call2357 = call i8* @S_cntrl_to_mnemonic(i8 zeroext %conv2356)
  %1682 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82358 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1682, i32 0, i32 25
  %1683 = load i32, i32* %utf82358, align 8
  %tobool2359 = icmp ne i32 %1683, 0
  %1684 = zext i1 %tobool2359 to i64
  %cond2360 = select i1 %tobool2359, i32 1, i32 0
  %tobool2361 = icmp ne i32 %cond2360, 0
  %1685 = zext i1 %tobool2361 to i64
  %cond2362 = select i1 %tobool2361, i32 1, i32 0
  %1686 = load i64, i64* %offset2345, align 8
  %1687 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2363 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1687, i32 0, i32 2
  %1688 = load i8*, i8** %precomp2363, align 8
  %1689 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82364 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1689, i32 0, i32 25
  %1690 = load i32, i32* %utf82364, align 8
  %tobool2365 = icmp ne i32 %1690, 0
  %1691 = zext i1 %tobool2365 to i64
  %cond2366 = select i1 %tobool2365, i32 1, i32 0
  %tobool2367 = icmp ne i32 %cond2366, 0
  %1692 = zext i1 %tobool2367 to i64
  %cond2368 = select i1 %tobool2367, i32 1, i32 0
  %1693 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2369 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1693, i32 0, i32 7
  %1694 = load i8*, i8** %end2369, align 8
  %1695 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2370 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1695, i32 0, i32 2
  %1696 = load i8*, i8** %precomp2370, align 8
  %sub.ptr.lhs.cast2371 = ptrtoint i8* %1694 to i64
  %sub.ptr.rhs.cast2372 = ptrtoint i8* %1696 to i64
  %sub.ptr.sub2373 = sub i64 %sub.ptr.lhs.cast2371, %sub.ptr.rhs.cast2372
  %1697 = load i64, i64* %offset2345, align 8
  %sub2374 = sub nsw i64 %sub.ptr.sub2373, %1697
  %1698 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp2375 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1698, i32 0, i32 2
  %1699 = load i8*, i8** %precomp2375, align 8
  %1700 = load i64, i64* %offset2345, align 8
  %add.ptr2376 = getelementptr inbounds i8, i8* %1699, i64 %1700
  call void (i32, i8*, ...) @Perl_warner(i32 20, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.336, i64 0, i64 0), i32 %conv2355, i8* %1680, i8* %call2357, i32 %cond2362, i64 %1686, i8* %1688, i32 %cond2368, i64 %sub2374, i8* %add.ptr2376)
  br label %do.end2377

do.end2377:                                       ; preds = %do.body2344
  br label %if.end2378

if.end2378:                                       ; preds = %do.end2377, %cond.false2342, %cond.true2341
  br label %if.end2379

if.end2379:                                       ; preds = %if.end2378, %do.end2331
  br label %if.end2380

if.end2380:                                       ; preds = %if.end2379, %land.lhs.true2263, %lor.lhs.false2260
  br label %if.end2381

if.end2381:                                       ; preds = %if.end2380, %land.lhs.true2047, %land.lhs.true2042, %if.end2039
  %1701 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2382 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1701, i32 0, i32 12
  %1702 = load %struct.regnode*, %struct.regnode** %emit2382, align 8
  %1703 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2383 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1703, i32 0, i32 13
  %1704 = bitcast %struct.regnode_ssc* %emit_dummy2383 to %struct.regnode*
  %cmp2384 = icmp eq %struct.regnode* %1702, %1704
  br i1 %cmp2384, label %if.end2388, label %if.then2386

if.then2386:                                      ; preds = %if.end2381
  %1705 = load %struct.sv*, %struct.sv** %cp_foldable_list, align 8
  %1706 = load i64, i64* %prevvalue, align 8
  %1707 = load i64, i64* %value, align 8
  %call2387 = call %struct.sv* @Perl__add_range_to_invlist(%struct.sv* %1705, i64 %1706, i64 %1707)
  store %struct.sv* %call2387, %struct.sv** %cp_foldable_list, align 8
  br label %if.end2388

if.end2388:                                       ; preds = %if.then2386, %if.end2381
  store i64 0, i64* %range, align 8
  br label %while.body172

while.end2389:                                    ; preds = %if.then1687, %if.then188, %if.then176
  %1708 = load %struct.av*, %struct.av** %multi_char_matches, align 8
  %tobool2390 = icmp ne %struct.av* %1708, null
  br i1 %tobool2390, label %if.then2391, label %if.end2453

if.then2391:                                      ; preds = %while.end2389
  %call2392 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.337, i64 0, i64 0), i64 2, i32 524288)
  store %struct.sv* %call2392, %struct.sv** %substitute_parse, align 8
  %1709 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2395 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1709, i32 0, i32 7
  %1710 = load i8*, i8** %end2395, align 8
  store i8* %1710, i8** %save_end, align 8
  %1711 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2396 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1711, i32 0, i32 8
  %1712 = load i8*, i8** %parse2396, align 8
  store i8* %1712, i8** %save_parse, align 8
  store i8 1, i8* %first_time, align 1
  %1713 = load %struct.av*, %struct.av** %multi_char_matches, align 8
  %call2397 = call i64 @S_av_top_index(%struct.av* %1713)
  %conv2398 = trunc i64 %call2397 to i32
  store i32 %conv2398, i32* %cp_count2393, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then2391
  %1714 = load i32, i32* %cp_count2393, align 4
  %cmp2399 = icmp sgt i32 %1714, 0
  br i1 %cmp2399, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1715 = load %struct.av*, %struct.av** %multi_char_matches, align 8
  %1716 = load i32, i32* %cp_count2393, align 4
  %conv2401 = sext i32 %1716 to i64
  %call2402 = call zeroext i1 @Perl_av_exists(%struct.av* %1715, i64 %conv2401)
  br i1 %call2402, label %if.then2403, label %if.end2416

if.then2403:                                      ; preds = %for.body
  %1717 = load %struct.av*, %struct.av** %multi_char_matches, align 8
  %1718 = load i32, i32* %cp_count2393, align 4
  %conv2404 = sext i32 %1718 to i64
  %call2405 = call %struct.sv** @Perl_av_fetch(%struct.av* %1717, i64 %conv2404, i32 0)
  %1719 = bitcast %struct.sv** %call2405 to %struct.av**
  store %struct.av** %1719, %struct.av*** %this_array_ptr, align 8
  br label %while.cond2406

while.cond2406:                                   ; preds = %if.end2413, %if.then2403
  %1720 = load %struct.av**, %struct.av*** %this_array_ptr, align 8
  %1721 = load %struct.av*, %struct.av** %1720, align 8
  %call2407 = call %struct.sv* @Perl_av_pop(%struct.av* %1721)
  store %struct.sv* %call2407, %struct.sv** %this_sequence, align 8
  %cmp2408 = icmp ne %struct.sv* %call2407, @PL_sv_undef
  br i1 %cmp2408, label %while.body2410, label %while.end2415

while.body2410:                                   ; preds = %while.cond2406
  %1722 = load i8, i8* %first_time, align 1
  %tobool2411 = trunc i8 %1722 to i1
  br i1 %tobool2411, label %if.end2413, label %if.then2412

if.then2412:                                      ; preds = %while.body2410
  %1723 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  call void @Perl_sv_catpv(%struct.sv* %1723, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.338, i64 0, i64 0))
  br label %if.end2413

if.end2413:                                       ; preds = %if.then2412, %while.body2410
  store i8 0, i8* %first_time, align 1
  %1724 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  %1725 = load %struct.sv*, %struct.sv** %this_sequence, align 8
  %sv_u2414 = getelementptr inbounds %struct.sv, %struct.sv* %1725, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u2414 to i8**
  %1726 = load i8*, i8** %svu_pv, align 8
  call void @Perl_sv_catpv(%struct.sv* %1724, i8* %1726)
  br label %while.cond2406

while.end2415:                                    ; preds = %while.cond2406
  br label %if.end2416

if.end2416:                                       ; preds = %while.end2415, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end2416
  %1727 = load i32, i32* %cp_count2393, align 4
  %dec2417 = add nsw i32 %1727, -1
  store i32 %dec2417, i32* %cp_count2393, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %1728 = load i64, i64* %element_count, align 8
  %tobool2418 = icmp ne i64 %1728, 0
  br i1 %tobool2418, label %if.then2419, label %if.end2424

if.then2419:                                      ; preds = %for.end
  %1729 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  call void @Perl_sv_catpv(%struct.sv* %1729, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.339, i64 0, i64 0))
  %1730 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  %1731 = load i8*, i8** %orig_parse, align 8
  %1732 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2420 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1732, i32 0, i32 8
  %1733 = load i8*, i8** %parse2420, align 8
  %1734 = load i8*, i8** %orig_parse, align 8
  %sub.ptr.lhs.cast2421 = ptrtoint i8* %1733 to i64
  %sub.ptr.rhs.cast2422 = ptrtoint i8* %1734 to i64
  %sub.ptr.sub2423 = sub i64 %sub.ptr.lhs.cast2421, %sub.ptr.rhs.cast2422
  call void @Perl_sv_catpvn_flags(%struct.sv* %1730, i8* %1731, i64 %sub.ptr.sub2423, i32 2)
  %1735 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  call void @Perl_sv_catpv(%struct.sv* %1735, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.340, i64 0, i64 0))
  br label %if.end2424

if.end2424:                                       ; preds = %if.then2419, %for.end
  %1736 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  call void @Perl_sv_catpv(%struct.sv* %1736, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.341, i64 0, i64 0))
  %1737 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  %sv_flags2425 = getelementptr inbounds %struct.sv, %struct.sv* %1737, i32 0, i32 2
  %1738 = load i32, i32* %sv_flags2425, align 4
  %and2426 = and i32 %1738, 2098176
  %cmp2427 = icmp eq i32 %and2426, 1024
  br i1 %cmp2427, label %cond.true2429, label %cond.false2434

cond.true2429:                                    ; preds = %if.end2424
  %1739 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  %sv_any2430 = getelementptr inbounds %struct.sv, %struct.sv* %1739, i32 0, i32 0
  %1740 = load i8*, i8** %sv_any2430, align 8
  %1741 = bitcast i8* %1740 to %struct.xpv*
  %xpv_cur2431 = getelementptr inbounds %struct.xpv, %struct.xpv* %1741, i32 0, i32 2
  %1742 = load i64, i64* %xpv_cur2431, align 8
  store i64 %1742, i64* %len2394, align 8
  %1743 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  %sv_u2432 = getelementptr inbounds %struct.sv, %struct.sv* %1743, i32 0, i32 3
  %svu_pv2433 = bitcast %union.anon* %sv_u2432 to i8**
  %1744 = load i8*, i8** %svu_pv2433, align 8
  br label %cond.end2436

cond.false2434:                                   ; preds = %if.end2424
  %1745 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  %call2435 = call i8* @Perl_sv_2pv_flags(%struct.sv* %1745, i64* %len2394, i32 2)
  br label %cond.end2436

cond.end2436:                                     ; preds = %cond.false2434, %cond.true2429
  %cond2437 = phi i8* [ %1744, %cond.true2429 ], [ %call2435, %cond.false2434 ]
  %1746 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2438 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1746, i32 0, i32 8
  store i8* %cond2437, i8** %parse2438, align 8
  %1747 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2439 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1747, i32 0, i32 8
  %1748 = load i8*, i8** %parse2439, align 8
  %1749 = load i64, i64* %len2394, align 8
  %add.ptr2440 = getelementptr inbounds i8, i8* %1748, i64 %1749
  %1750 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2441 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1750, i32 0, i32 7
  store i8* %add.ptr2440, i8** %end2441, align 8
  %1751 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %in_multi_char_class2442 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1751, i32 0, i32 37
  store i32 1, i32* %in_multi_char_class2442, align 4
  %1752 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %override_recoding2443 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1752, i32 0, i32 36
  store i32 1, i32* %override_recoding2443, align 8
  %1753 = load %struct.regnode*, %struct.regnode** %orig_emit, align 8
  %1754 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2444 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1754, i32 0, i32 12
  store %struct.regnode* %1753, %struct.regnode** %emit2444, align 8
  %1755 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1756 = load i32, i32* %depth.addr, align 4
  %add2445 = add i32 %1756, 1
  %call2446 = call %struct.regnode* @S_reg(%struct.RExC_state_t* %1755, i32 1, i32* %reg_flags, i32 %add2445)
  store %struct.regnode* %call2446, %struct.regnode** %ret, align 8
  %1757 = load i32, i32* %reg_flags, align 4
  %and2447 = and i32 %1757, 47
  %1758 = load i32*, i32** %flagp.addr, align 8
  %1759 = load i32, i32* %1758, align 4
  %or2448 = or i32 %1759, %and2447
  store i32 %or2448, i32* %1758, align 4
  %1760 = load i8*, i8** %save_parse, align 8
  %1761 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2449 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1761, i32 0, i32 8
  store i8* %1760, i8** %parse2449, align 8
  %1762 = load i8*, i8** %save_end, align 8
  %1763 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end2450 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1763, i32 0, i32 7
  store i8* %1762, i8** %end2450, align 8
  %1764 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %in_multi_char_class2451 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1764, i32 0, i32 37
  store i32 0, i32* %in_multi_char_class2451, align 4
  %1765 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %override_recoding2452 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1765, i32 0, i32 36
  store i32 0, i32* %override_recoding2452, align 8
  %1766 = load %struct.av*, %struct.av** %multi_char_matches, align 8
  %1767 = bitcast %struct.av* %1766 to i8*
  %1768 = bitcast i8* %1767 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %1768)
  %1769 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %1769, %struct.regnode** %retval, align 8
  br label %return

if.end2453:                                       ; preds = %while.end2389
  %1770 = load %struct.sv**, %struct.sv*** %ret_invlist.addr, align 8
  %tobool2454 = icmp ne %struct.sv** %1770, null
  br i1 %tobool2454, label %if.end2688, label %land.lhs.true2455

land.lhs.true2455:                                ; preds = %if.end2453
  %1771 = load i8, i8* %posixl_matches_all, align 1
  %tobool2456 = trunc i8 %1771 to i1
  br i1 %tobool2456, label %cond.true2458, label %cond.false2459

cond.true2458:                                    ; preds = %land.lhs.true2455
  br i1 true, label %if.then2463, label %lor.lhs.false2460

cond.false2459:                                   ; preds = %land.lhs.true2455
  br i1 false, label %if.then2463, label %lor.lhs.false2460

lor.lhs.false2460:                                ; preds = %cond.false2459, %cond.true2458
  %1772 = load i64, i64* %element_count, align 8
  %cmp2461 = icmp eq i64 %1772, 1
  br i1 %cmp2461, label %if.then2463, label %if.end2688

if.then2463:                                      ; preds = %lor.lhs.false2460, %cond.false2459, %cond.true2458
  store i8 0, i8* %op, align 1
  store i8 0, i8* %arg, align 1
  %1773 = load i8, i8* %posixl_matches_all, align 1
  %tobool2464 = trunc i8 %1773 to i1
  br i1 %tobool2464, label %cond.true2466, label %cond.false2467

cond.true2466:                                    ; preds = %if.then2463
  br i1 true, label %if.then2468, label %if.else2469

cond.false2467:                                   ; preds = %if.then2463
  br i1 false, label %if.then2468, label %if.else2469

if.then2468:                                      ; preds = %cond.false2467, %cond.true2466
  store i8 17, i8* %op, align 1
  br label %if.end2616

if.else2469:                                      ; preds = %cond.false2467, %cond.true2466
  %1774 = load i64, i64* %namedclass, align 8
  %cmp2470 = icmp sgt i64 %1774, -1
  br i1 %cmp2470, label %if.then2472, label %if.else2520

if.then2472:                                      ; preds = %if.else2469
  %1775 = load i64, i64* %namedclass, align 8
  %conv2473 = trunc i64 %1775 to i32
  switch i32 %conv2473, label %sw.default2497 [
    i32 34, label %sw.bb2474
    i32 33, label %sw.bb2475
    i32 32, label %sw.bb2475
    i32 31, label %sw.bb2478
    i32 30, label %sw.bb2478
    i32 28, label %sw.bb2479
    i32 29, label %sw.bb2479
    i32 2, label %sw.bb2480
    i32 3, label %sw.bb2480
    i32 24, label %sw.bb2480
    i32 25, label %sw.bb2480
    i32 6, label %sw.bb2487
    i32 7, label %sw.bb2487
    i32 8, label %sw.bb2487
    i32 9, label %sw.bb2487
  ]

sw.bb2474:                                        ; preds = %if.then2472
  br label %sw.epilog2519

sw.bb2475:                                        ; preds = %if.then2472, %if.then2472
  %1776 = load i64, i64* %namedclass, align 8
  %add2476 = add nsw i64 22, %1776
  %sub2477 = sub nsw i64 %add2476, 32
  store i64 %sub2477, i64* %namedclass, align 8
  br label %sw.bb2478

sw.bb2478:                                        ; preds = %if.then2472, %if.then2472, %sw.bb2475
  store i8 23, i8* %op, align 1
  br label %join_posix

sw.bb2479:                                        ; preds = %if.then2472, %if.then2472
  store i8 24, i8* %op, align 1
  br label %join_posix

sw.bb2480:                                        ; preds = %if.then2472, %if.then2472, %if.then2472, %if.then2472
  %1777 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2481 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1777, i32 0, i32 0
  %1778 = load i32, i32* %flags2481, align 8
  %call2482 = call i32 @get_regex_charset(i32 %1778)
  %cmp2483 = icmp eq i32 %call2482, 0
  br i1 %cmp2483, label %if.end2486, label %if.then2485

if.then2485:                                      ; preds = %sw.bb2480
  br label %treat_as_default

if.end2486:                                       ; preds = %sw.bb2480
  store i8 23, i8* %op, align 1
  br label %join_posix

sw.bb2487:                                        ; preds = %if.then2472, %if.then2472, %if.then2472, %if.then2472
  %1779 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2488 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1779, i32 0, i32 0
  %1780 = load i32, i32* %flags2488, align 8
  %and2489 = and i32 %1780, 4
  %tobool2490 = icmp ne i32 %and2489, 0
  br i1 %tobool2490, label %cond.true2491, label %cond.false2492

cond.true2491:                                    ; preds = %sw.bb2487
  br i1 true, label %if.then2493, label %if.end2496

cond.false2492:                                   ; preds = %sw.bb2487
  br i1 false, label %if.then2493, label %if.end2496

if.then2493:                                      ; preds = %cond.false2492, %cond.true2491
  %1781 = load i64, i64* %namedclass, align 8
  %rem2494 = srem i64 %1781, 2
  %add2495 = add nsw i64 18, %rem2494
  store i64 %add2495, i64* %namedclass, align 8
  br label %if.end2496

if.end2496:                                       ; preds = %if.then2493, %cond.false2492, %cond.true2491
  br label %sw.default2497

sw.default2497:                                   ; preds = %if.then2472, %if.end2496
  br label %treat_as_default

treat_as_default:                                 ; preds = %sw.default2497, %if.then2485
  %1782 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2498 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1782, i32 0, i32 0
  %1783 = load i32, i32* %flags2498, align 8
  %call2499 = call i32 @get_regex_charset(i32 %1783)
  %add2500 = add i32 21, %call2499
  %conv2501 = trunc i32 %add2500 to i8
  store i8 %conv2501, i8* %op, align 1
  %1784 = load i8, i8* %op, align 1
  %conv2502 = zext i8 %1784 to i32
  %cmp2503 = icmp sgt i32 %conv2502, 24
  br i1 %cmp2503, label %if.then2505, label %if.end2506

if.then2505:                                      ; preds = %treat_as_default
  store i8 24, i8* %op, align 1
  br label %if.end2506

if.end2506:                                       ; preds = %if.then2505, %treat_as_default
  br label %join_posix

join_posix:                                       ; preds = %if.end2506, %if.end2486, %sw.bb2479, %sw.bb2478
  %1785 = load i64, i64* %namedclass, align 8
  %rem2507 = srem i64 %1785, 2
  %cmp2508 = icmp eq i64 %rem2507, 1
  br i1 %cmp2508, label %if.then2510, label %if.end2515

if.then2510:                                      ; preds = %join_posix
  %1786 = load i8, i8* %invert, align 1
  %tobool2511 = trunc i8 %1786 to i1
  %lnot2512 = xor i1 %tobool2511, true
  %frombool2513 = zext i1 %lnot2512 to i8
  store i8 %frombool2513, i8* %invert, align 1
  %1787 = load i64, i64* %namedclass, align 8
  %dec2514 = add nsw i64 %1787, -1
  store i64 %dec2514, i64* %namedclass, align 8
  br label %if.end2515

if.end2515:                                       ; preds = %if.then2510, %join_posix
  %1788 = load i64, i64* %namedclass, align 8
  %div2516 = sdiv i64 %1788, 2
  %conv2517 = trunc i64 %div2516 to i32
  %conv2518 = trunc i32 %conv2517 to i8
  store i8 %conv2518, i8* %arg, align 1
  br label %sw.epilog2519

sw.epilog2519:                                    ; preds = %if.end2515, %sw.bb2474
  br label %if.end2615

if.else2520:                                      ; preds = %if.else2469
  %1789 = load i64, i64* %value, align 8
  %1790 = load i64, i64* %prevvalue, align 8
  %cmp2521 = icmp eq i64 %1789, %1790
  br i1 %cmp2521, label %if.then2523, label %if.else2555

if.then2523:                                      ; preds = %if.else2520
  %1791 = load i8, i8* %invert, align 1
  %tobool2524 = trunc i8 %1791 to i1
  br i1 %tobool2524, label %if.then2525, label %if.else2543

if.then2525:                                      ; preds = %if.then2523
  %1792 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2526 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1792, i32 0, i32 0
  %1793 = load i32, i32* %flags2526, align 8
  %call2527 = call i32 @get_regex_charset(i32 %1793)
  %cmp2528 = icmp eq i32 %call2527, 1
  br i1 %cmp2528, label %if.end2542, label %land.lhs.true2530

land.lhs.true2530:                                ; preds = %if.then2525
  %1794 = load i64, i64* %value, align 8
  %cmp2531 = icmp eq i64 %1794, 10
  br i1 %cmp2531, label %if.then2533, label %if.end2542

if.then2533:                                      ; preds = %land.lhs.true2530
  store i8 16, i8* %op, align 1
  %1795 = load i32*, i32** %flagp.addr, align 8
  %1796 = load i32, i32* %1795, align 4
  %or2534 = or i32 %1796, 3
  store i32 %or2534, i32* %1795, align 4
  %1797 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty2535 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1797, i32 0, i32 14
  %1798 = load i32, i32* %naughty2535, align 8
  %cmp2536 = icmp slt i32 %1798, 10
  br i1 %cmp2536, label %if.then2538, label %if.end2541

if.then2538:                                      ; preds = %if.then2533
  %1799 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty2539 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1799, i32 0, i32 14
  %1800 = load i32, i32* %naughty2539, align 8
  %add2540 = add nsw i32 %1800, 1
  store i32 %add2540, i32* %naughty2539, align 8
  br label %if.end2541

if.end2541:                                       ; preds = %if.then2538, %if.then2533
  br label %if.end2542

if.end2542:                                       ; preds = %if.end2541, %land.lhs.true2530, %if.then2525
  br label %if.end2554

if.else2543:                                      ; preds = %if.then2523
  %1801 = load i64, i64* %value, align 8
  %cmp2544 = icmp ult i64 %1801, 256
  br i1 %cmp2544, label %if.then2551, label %lor.lhs.false2546

lor.lhs.false2546:                                ; preds = %if.else2543
  %1802 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf82547 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1802, i32 0, i32 25
  %1803 = load i32, i32* %utf82547, align 8
  %tobool2548 = icmp ne i32 %1803, 0
  br i1 %tobool2548, label %cond.true2549, label %cond.false2550

cond.true2549:                                    ; preds = %lor.lhs.false2546
  br i1 true, label %if.then2551, label %if.end2553

cond.false2550:                                   ; preds = %lor.lhs.false2546
  br i1 false, label %if.then2551, label %if.end2553

if.then2551:                                      ; preds = %cond.false2550, %cond.true2549, %if.else2543
  %1804 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call2552 = call zeroext i8 @S_compute_EXACTish(%struct.RExC_state_t* %1804)
  store i8 %call2552, i8* %op, align 1
  br label %if.end2553

if.end2553:                                       ; preds = %if.then2551, %cond.false2550, %cond.true2549
  br label %if.end2554

if.end2554:                                       ; preds = %if.end2553, %if.end2542
  br label %if.end2614

if.else2555:                                      ; preds = %if.else2520
  %1805 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2556 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1805, i32 0, i32 0
  %1806 = load i32, i32* %flags2556, align 8
  %call2557 = call i32 @get_regex_charset(i32 %1806)
  %cmp2558 = icmp eq i32 %call2557, 1
  br i1 %cmp2558, label %if.end2613, label %if.then2560

if.then2560:                                      ; preds = %if.else2555
  %1807 = load i64, i64* %prevvalue, align 8
  %cmp2561 = icmp eq i64 %1807, 48
  br i1 %cmp2561, label %if.then2563, label %if.else2568

if.then2563:                                      ; preds = %if.then2560
  %1808 = load i64, i64* %value, align 8
  %cmp2564 = icmp eq i64 %1808, 57
  br i1 %cmp2564, label %if.then2566, label %if.end2567

if.then2566:                                      ; preds = %if.then2563
  store i8 1, i8* %arg, align 1
  store i8 24, i8* %op, align 1
  br label %if.end2567

if.end2567:                                       ; preds = %if.then2566, %if.then2563
  br label %if.end2612

if.else2568:                                      ; preds = %if.then2560
  %1809 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2569 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1809, i32 0, i32 0
  %1810 = load i32, i32* %flags2569, align 8
  %and2570 = and i32 %1810, 4
  %tobool2571 = icmp ne i32 %and2570, 0
  br i1 %tobool2571, label %cond.true2572, label %cond.false2573

cond.true2572:                                    ; preds = %if.else2568
  br i1 true, label %lor.lhs.false2574, label %if.then2579

cond.false2573:                                   ; preds = %if.else2568
  br i1 false, label %lor.lhs.false2574, label %if.then2579

lor.lhs.false2574:                                ; preds = %cond.false2573, %cond.true2572
  %1811 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2575 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1811, i32 0, i32 0
  %1812 = load i32, i32* %flags2575, align 8
  %call2576 = call i32 @get_regex_charset(i32 %1812)
  %cmp2577 = icmp eq i32 %call2576, 4
  br i1 %cmp2577, label %if.then2579, label %if.end2611

if.then2579:                                      ; preds = %lor.lhs.false2574, %cond.false2573, %cond.true2572
  %1813 = load i64, i64* %prevvalue, align 8
  %cmp2580 = icmp eq i64 %1813, 65
  br i1 %cmp2580, label %if.then2582, label %if.else2594

if.then2582:                                      ; preds = %if.then2579
  %1814 = load i64, i64* %value, align 8
  %cmp2583 = icmp eq i64 %1814, 90
  br i1 %cmp2583, label %if.then2585, label %if.end2593

if.then2585:                                      ; preds = %if.then2582
  %1815 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2586 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1815, i32 0, i32 0
  %1816 = load i32, i32* %flags2586, align 8
  %and2587 = and i32 %1816, 4
  %tobool2588 = icmp ne i32 %and2587, 0
  %1817 = zext i1 %tobool2588 to i64
  %cond2589 = select i1 %tobool2588, i32 1, i32 0
  %tobool2590 = icmp ne i32 %cond2589, 0
  %1818 = zext i1 %tobool2590 to i64
  %cond2591 = select i1 %tobool2590, i32 2, i32 4
  %conv2592 = trunc i32 %cond2591 to i8
  store i8 %conv2592, i8* %arg, align 1
  store i8 24, i8* %op, align 1
  br label %if.end2593

if.end2593:                                       ; preds = %if.then2585, %if.then2582
  br label %if.end2610

if.else2594:                                      ; preds = %if.then2579
  %1819 = load i64, i64* %prevvalue, align 8
  %cmp2595 = icmp eq i64 %1819, 97
  br i1 %cmp2595, label %if.then2597, label %if.end2609

if.then2597:                                      ; preds = %if.else2594
  %1820 = load i64, i64* %value, align 8
  %cmp2598 = icmp eq i64 %1820, 122
  br i1 %cmp2598, label %if.then2600, label %if.end2608

if.then2600:                                      ; preds = %if.then2597
  %1821 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2601 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1821, i32 0, i32 0
  %1822 = load i32, i32* %flags2601, align 8
  %and2602 = and i32 %1822, 4
  %tobool2603 = icmp ne i32 %and2602, 0
  %1823 = zext i1 %tobool2603 to i64
  %cond2604 = select i1 %tobool2603, i32 1, i32 0
  %tobool2605 = icmp ne i32 %cond2604, 0
  %1824 = zext i1 %tobool2605 to i64
  %cond2606 = select i1 %tobool2605, i32 2, i32 3
  %conv2607 = trunc i32 %cond2606 to i8
  store i8 %conv2607, i8* %arg, align 1
  store i8 24, i8* %op, align 1
  br label %if.end2608

if.end2608:                                       ; preds = %if.then2600, %if.then2597
  br label %if.end2609

if.end2609:                                       ; preds = %if.end2608, %if.else2594
  br label %if.end2610

if.end2610:                                       ; preds = %if.end2609, %if.end2593
  br label %if.end2611

if.end2611:                                       ; preds = %if.end2610, %lor.lhs.false2574
  br label %if.end2612

if.end2612:                                       ; preds = %if.end2611, %if.end2567
  br label %if.end2613

if.end2613:                                       ; preds = %if.end2612, %if.else2555
  br label %if.end2614

if.end2614:                                       ; preds = %if.end2613, %if.end2554
  br label %if.end2615

if.end2615:                                       ; preds = %if.end2614, %sw.epilog2519
  br label %if.end2616

if.end2616:                                       ; preds = %if.end2615, %if.then2468
  %1825 = load i8, i8* %op, align 1
  %conv2617 = zext i8 %1825 to i32
  %cmp2618 = icmp ne i32 %conv2617, 0
  br i1 %cmp2618, label %if.then2620, label %if.end2687

if.then2620:                                      ; preds = %if.end2616
  %1826 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2621 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1826, i32 0, i32 8
  %1827 = load i8*, i8** %parse2621, align 8
  store i8* %1827, i8** %cur_parse, align 8
  %1828 = load i8*, i8** %orig_parse, align 8
  %1829 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2622 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1829, i32 0, i32 8
  store i8* %1828, i8** %parse2622, align 8
  %1830 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2623 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1830, i32 0, i32 12
  %1831 = load %struct.regnode*, %struct.regnode** %emit2623, align 8
  %1832 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2624 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1832, i32 0, i32 13
  %1833 = bitcast %struct.regnode_ssc* %emit_dummy2624 to %struct.regnode*
  %cmp2625 = icmp eq %struct.regnode* %1831, %1833
  br i1 %cmp2625, label %if.then2627, label %if.else2635

if.then2627:                                      ; preds = %if.then2620
  %1834 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2628 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1834, i32 0, i32 0
  %1835 = load i32, i32* %flags2628, align 8
  %call2629 = call i32 @get_regex_charset(i32 %1835)
  %cmp2630 = icmp eq i32 %call2629, 1
  br i1 %cmp2630, label %if.end2634, label %if.then2632

if.then2632:                                      ; preds = %if.then2627
  %1836 = load i64, i64* %orig_size, align 8
  %1837 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size2633 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1837, i32 0, i32 17
  store i64 %1836, i64* %size2633, align 8
  br label %if.end2634

if.end2634:                                       ; preds = %if.then2632, %if.then2627
  br label %if.end2655

if.else2635:                                      ; preds = %if.then2620
  %1838 = load %struct.regnode*, %struct.regnode** %orig_emit, align 8
  %1839 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2636 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1839, i32 0, i32 12
  store %struct.regnode* %1838, %struct.regnode** %emit2636, align 8
  %1840 = load i8, i8* %op, align 1
  %idxprom2637 = zext i8 %1840 to i64
  %arrayidx2638 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom2637
  %1841 = load i8, i8* %arrayidx2638, align 1
  %conv2639 = zext i8 %1841 to i32
  %cmp2640 = icmp eq i32 %conv2639, 21
  br i1 %cmp2640, label %if.then2642, label %if.end2654

if.then2642:                                      ; preds = %if.else2635
  %1842 = load i8, i8* %op, align 1
  %conv2643 = zext i8 %1842 to i32
  %cmp2644 = icmp eq i32 %conv2643, 22
  br i1 %cmp2644, label %if.then2646, label %if.end2647

if.then2646:                                      ; preds = %if.then2642
  %1843 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %contains_locale = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1843, i32 0, i32 34
  store i32 1, i32* %contains_locale, align 8
  br label %if.end2647

if.end2647:                                       ; preds = %if.then2646, %if.then2642
  %1844 = load i8, i8* %invert, align 1
  %tobool2648 = trunc i8 %1844 to i1
  br i1 %tobool2648, label %if.then2649, label %if.end2653

if.then2649:                                      ; preds = %if.end2647
  %1845 = load i8, i8* %op, align 1
  %conv2650 = zext i8 %1845 to i32
  %add2651 = add nsw i32 %conv2650, 4
  %conv2652 = trunc i32 %add2651 to i8
  store i8 %conv2652, i8* %op, align 1
  br label %if.end2653

if.end2653:                                       ; preds = %if.then2649, %if.end2647
  br label %if.end2654

if.end2654:                                       ; preds = %if.end2653, %if.else2635
  br label %if.end2655

if.end2655:                                       ; preds = %if.end2654, %if.end2634
  %1846 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1847 = load i8, i8* %op, align 1
  %call2656 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %1846, i8 zeroext %1847)
  store %struct.regnode* %call2656, %struct.regnode** %ret, align 8
  %1848 = load i8, i8* %op, align 1
  %idxprom2657 = zext i8 %1848 to i64
  %arrayidx2658 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom2657
  %1849 = load i8, i8* %arrayidx2658, align 1
  %conv2659 = zext i8 %1849 to i32
  %cmp2660 = icmp eq i32 %conv2659, 21
  br i1 %cmp2660, label %if.then2668, label %lor.lhs.false2662

lor.lhs.false2662:                                ; preds = %if.end2655
  %1850 = load i8, i8* %op, align 1
  %idxprom2663 = zext i8 %1850 to i64
  %arrayidx2664 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom2663
  %1851 = load i8, i8* %arrayidx2664, align 1
  %conv2665 = zext i8 %1851 to i32
  %cmp2666 = icmp eq i32 %conv2665, 25
  br i1 %cmp2666, label %if.then2668, label %if.else2677

if.then2668:                                      ; preds = %lor.lhs.false2662, %if.end2655
  %1852 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2669 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1852, i32 0, i32 12
  %1853 = load %struct.regnode*, %struct.regnode** %emit2669, align 8
  %1854 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2670 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1854, i32 0, i32 13
  %1855 = bitcast %struct.regnode_ssc* %emit_dummy2670 to %struct.regnode*
  %cmp2671 = icmp eq %struct.regnode* %1853, %1855
  br i1 %cmp2671, label %if.end2675, label %if.then2673

if.then2673:                                      ; preds = %if.then2668
  %1856 = load i8, i8* %arg, align 1
  %1857 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags2674 = getelementptr inbounds %struct.regnode, %struct.regnode* %1857, i32 0, i32 0
  store i8 %1856, i8* %flags2674, align 2
  br label %if.end2675

if.end2675:                                       ; preds = %if.then2673, %if.then2668
  %1858 = load i32*, i32** %flagp.addr, align 8
  %1859 = load i32, i32* %1858, align 4
  %or2676 = or i32 %1859, 3
  store i32 %or2676, i32* %1858, align 4
  br label %if.end2685

if.else2677:                                      ; preds = %lor.lhs.false2662
  %1860 = load i8, i8* %op, align 1
  %idxprom2678 = zext i8 %1860 to i64
  %arrayidx2679 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom2678
  %1861 = load i8, i8* %arrayidx2679, align 1
  %conv2680 = zext i8 %1861 to i32
  %cmp2681 = icmp eq i32 %conv2680, 31
  br i1 %cmp2681, label %if.then2683, label %if.end2684

if.then2683:                                      ; preds = %if.else2677
  %1862 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1863 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %1864 = load i32*, i32** %flagp.addr, align 8
  %1865 = load i64, i64* %value, align 8
  call void @S_alloc_maybe_populate_EXACT(%struct.RExC_state_t* %1862, %struct.regnode* %1863, i32* %1864, i64 0, i64 %1865, i1 zeroext true)
  br label %if.end2684

if.end2684:                                       ; preds = %if.then2683, %if.else2677
  br label %if.end2685

if.end2685:                                       ; preds = %if.end2684, %if.end2675
  %1866 = load i8*, i8** %cur_parse, align 8
  %1867 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2686 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1867, i32 0, i32 8
  store i8* %1866, i8** %parse2686, align 8
  %1868 = load %struct.sv*, %struct.sv** %posixes, align 8
  %1869 = bitcast %struct.sv* %1868 to i8*
  %1870 = bitcast i8* %1869 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %1870)
  %1871 = load %struct.sv*, %struct.sv** %nposixes, align 8
  %1872 = bitcast %struct.sv* %1871 to i8*
  %1873 = bitcast i8* %1872 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %1873)
  %1874 = load %struct.sv*, %struct.sv** %simple_posixes, align 8
  %1875 = bitcast %struct.sv* %1874 to i8*
  %1876 = bitcast i8* %1875 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %1876)
  %1877 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %1878 = bitcast %struct.sv* %1877 to i8*
  %1879 = bitcast i8* %1878 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %1879)
  %1880 = load %struct.sv*, %struct.sv** %cp_foldable_list, align 8
  %1881 = bitcast %struct.sv* %1880 to i8*
  %1882 = bitcast i8* %1881 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %1882)
  %1883 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %1883, %struct.regnode** %retval, align 8
  br label %return

if.end2687:                                       ; preds = %if.end2616
  br label %if.end2688

if.end2688:                                       ; preds = %if.end2687, %lor.lhs.false2460, %if.end2453
  %1884 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit2689 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1884, i32 0, i32 12
  %1885 = load %struct.regnode*, %struct.regnode** %emit2689, align 8
  %1886 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy2690 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1886, i32 0, i32 13
  %1887 = bitcast %struct.regnode_ssc* %emit_dummy2690 to %struct.regnode*
  %cmp2691 = icmp eq %struct.regnode* %1885, %1887
  br i1 %cmp2691, label %if.then2693, label %if.end2694

if.then2693:                                      ; preds = %if.end2688
  %1888 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %1888, %struct.regnode** %retval, align 8
  br label %return

if.end2694:                                       ; preds = %if.end2688
  %1889 = load %struct.sv*, %struct.sv** %cp_foldable_list, align 8
  %tobool2695 = icmp ne %struct.sv* %1889, null
  br i1 %tobool2695, label %if.then2696, label %if.end2858

if.then2696:                                      ; preds = %if.end2694
  %1890 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2697 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1890, i32 0, i32 0
  %1891 = load i32, i32* %flags2697, align 8
  %and2698 = and i32 %1891, 4
  %tobool2699 = icmp ne i32 %and2698, 0
  br i1 %tobool2699, label %cond.true2700, label %cond.false2701

cond.true2700:                                    ; preds = %if.then2696
  br i1 true, label %if.then2702, label %if.end2857

cond.false2701:                                   ; preds = %if.then2696
  br i1 false, label %if.then2702, label %if.end2857

if.then2702:                                      ; preds = %cond.false2701, %cond.true2700
  store %struct.sv* null, %struct.sv** %fold_intersection, align 8
  %1892 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2704 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1892, i32 0, i32 0
  %1893 = load i32, i32* %flags2704, align 8
  %call2705 = call i32 @get_regex_charset(i32 %1893)
  %cmp2706 = icmp eq i32 %call2705, 1
  br i1 %cmp2706, label %if.then2708, label %if.else2709

if.then2708:                                      ; preds = %if.then2702
  store %struct.sv** %only_utf8_locale_list, %struct.sv*** %use_list, align 8
  br label %if.end2710

if.else2709:                                      ; preds = %if.then2702
  store %struct.sv** %cp_list, %struct.sv*** %use_list, align 8
  br label %if.end2710

if.end2710:                                       ; preds = %if.else2709, %if.then2708
  %1894 = load %struct.sv*, %struct.sv** @PL_utf8_foldable, align 8
  %1895 = load %struct.sv*, %struct.sv** %cp_foldable_list, align 8
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %1894, %struct.sv* %1895, i1 zeroext false, %struct.sv** %fold_intersection)
  %1896 = load %struct.sv*, %struct.sv** %cp_foldable_list, align 8
  %call2711 = call i64 @S_invlist_highest(%struct.sv* %1896)
  %cmp2712 = icmp uge i64 %call2711, 256
  br i1 %cmp2712, label %if.then2714, label %if.end2718

if.then2714:                                      ; preds = %if.end2710
  %1897 = load %struct.hv*, %struct.hv** @PL_utf8_foldclosures, align 8
  %tobool2715 = icmp ne %struct.hv* %1897, null
  br i1 %tobool2715, label %if.end2717, label %if.then2716

if.then2716:                                      ; preds = %if.then2714
  call void @Perl__load_PL_utf8_foldclosures()
  br label %if.end2717

if.end2717:                                       ; preds = %if.then2716, %if.then2714
  br label %if.end2718

if.end2718:                                       ; preds = %if.end2717, %if.end2710
  %1898 = load %struct.sv*, %struct.sv** %fold_intersection, align 8
  call void @S_invlist_iterinit(%struct.sv* %1898)
  br label %while.cond2719

while.cond2719:                                   ; preds = %for.end2855, %if.end2718
  %1899 = load %struct.sv*, %struct.sv** %fold_intersection, align 8
  %call2720 = call zeroext i1 @S_invlist_iternext(%struct.sv* %1899, i64* %start, i64* %end2703)
  br i1 %call2720, label %while.body2721, label %while.end2856

while.body2721:                                   ; preds = %while.cond2719
  %1900 = load i64, i64* %start, align 8
  store i64 %1900, i64* %j, align 8
  br label %for.cond2722

for.cond2722:                                     ; preds = %for.inc2853, %while.body2721
  %1901 = load i64, i64* %j, align 8
  %1902 = load i64, i64* %end2703, align 8
  %cmp2723 = icmp ule i64 %1901, %1902
  br i1 %cmp2723, label %for.body2725, label %for.end2855

for.body2725:                                     ; preds = %for.cond2722
  %1903 = load i64, i64* %j, align 8
  %cmp2728 = icmp ult i64 %1903, 256
  br i1 %cmp2728, label %if.then2730, label %if.end2780

if.then2730:                                      ; preds = %for.body2725
  %1904 = load i64, i64* %j, align 8
  %and2731 = and i64 %1904, -256
  %tobool2732 = icmp ne i64 %and2731, 0
  br i1 %tobool2732, label %cond.false2740, label %land.lhs.true2733

land.lhs.true2733:                                ; preds = %if.then2730
  %1905 = load i64, i64* %j, align 8
  %conv2734 = trunc i64 %1905 to i8
  %idxprom2735 = zext i8 %conv2734 to i64
  %arrayidx2736 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2735
  %1906 = load i32, i32* %arrayidx2736, align 4
  %and2737 = and i32 %1906, 4194304
  %tobool2738 = icmp ne i32 %and2737, 0
  br i1 %tobool2738, label %cond.true2739, label %cond.false2740

cond.true2739:                                    ; preds = %land.lhs.true2733
  br i1 true, label %if.then2741, label %if.end2758

cond.false2740:                                   ; preds = %land.lhs.true2733, %if.then2730
  br i1 false, label %if.then2741, label %if.end2758

if.then2741:                                      ; preds = %cond.false2740, %cond.true2739
  %1907 = load i64, i64* %j, align 8
  %cmp2742 = icmp ult i64 %1907, 128
  br i1 %cmp2742, label %if.then2749, label %lor.lhs.false2744

lor.lhs.false2744:                                ; preds = %if.then2741
  %1908 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2745 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1908, i32 0, i32 0
  %1909 = load i32, i32* %flags2745, align 8
  %call2746 = call i32 @get_regex_charset(i32 %1909)
  %cmp2747 = icmp eq i32 %call2746, 0
  br i1 %cmp2747, label %if.else2753, label %if.then2749

if.then2749:                                      ; preds = %lor.lhs.false2744, %if.then2741
  %1910 = load %struct.sv**, %struct.sv*** %use_list, align 8
  %1911 = load %struct.sv*, %struct.sv** %1910, align 8
  %1912 = load i64, i64* %j, align 8
  %arrayidx2750 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_fold_latin1, i64 0, i64 %1912
  %1913 = load i8, i8* %arrayidx2750, align 1
  %conv2751 = zext i8 %1913 to i64
  %call2752 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %1911, i64 %conv2751)
  %1914 = load %struct.sv**, %struct.sv*** %use_list, align 8
  store %struct.sv* %call2752, %struct.sv** %1914, align 8
  br label %if.end2757

if.else2753:                                      ; preds = %lor.lhs.false2744
  %1915 = load %struct.sv*, %struct.sv** %depends_list, align 8
  %1916 = load i64, i64* %j, align 8
  %arrayidx2754 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_fold_latin1, i64 0, i64 %1916
  %1917 = load i8, i8* %arrayidx2754, align 1
  %conv2755 = zext i8 %1917 to i64
  %call2756 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %1915, i64 %conv2755)
  store %struct.sv* %call2756, %struct.sv** %depends_list, align 8
  br label %if.end2757

if.end2757:                                       ; preds = %if.else2753, %if.then2749
  br label %if.end2758

if.end2758:                                       ; preds = %if.end2757, %cond.false2740, %cond.true2739
  %1918 = load i64, i64* %j, align 8
  %and2759 = and i64 %1918, -256
  %tobool2760 = icmp ne i64 %and2759, 0
  br i1 %tobool2760, label %cond.false2762, label %cond.true2761

cond.true2761:                                    ; preds = %if.end2758
  br i1 true, label %lor.lhs.false2763, label %land.lhs.true2769

cond.false2762:                                   ; preds = %if.end2758
  br i1 false, label %lor.lhs.false2763, label %land.lhs.true2769

lor.lhs.false2763:                                ; preds = %cond.false2762, %cond.true2761
  %1919 = load i64, i64* %j, align 8
  %conv2764 = trunc i64 %1919 to i8
  %idxprom2765 = zext i8 %conv2764 to i64
  %arrayidx2766 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2765
  %1920 = load i32, i32* %arrayidx2766, align 4
  %and2767 = and i32 %1920, 524288
  %tobool2768 = icmp ne i32 %and2767, 0
  br i1 %tobool2768, label %land.lhs.true2769, label %if.end2779

land.lhs.true2769:                                ; preds = %lor.lhs.false2763, %cond.false2762, %cond.true2761
  %1921 = load i64, i64* %j, align 8
  %cmp2770 = icmp ult i64 %1921, 128
  br i1 %cmp2770, label %lor.lhs.false2772, label %if.then2777

lor.lhs.false2772:                                ; preds = %land.lhs.true2769
  %1922 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2773 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1922, i32 0, i32 0
  %1923 = load i32, i32* %flags2773, align 8
  %call2774 = call i32 @get_regex_charset(i32 %1923)
  %cmp2775 = icmp eq i32 %call2774, 4
  br i1 %cmp2775, label %if.end2779, label %if.then2777

if.then2777:                                      ; preds = %lor.lhs.false2772, %land.lhs.true2769
  %1924 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %1925 = load i64, i64* %j, align 8
  %conv2778 = trunc i64 %1925 to i8
  %1926 = load %struct.sv**, %struct.sv*** %use_list, align 8
  call void @S_add_above_Latin1_folds(%struct.RExC_state_t* %1924, i8 zeroext %conv2778, %struct.sv** %1926)
  br label %if.end2779

if.end2779:                                       ; preds = %if.then2777, %lor.lhs.false2772, %lor.lhs.false2763
  br label %for.inc2853

if.end2780:                                       ; preds = %for.body2725
  %1927 = load i64, i64* %j, align 8
  %arraydecay2781 = getelementptr inbounds [14 x i8], [14 x i8]* %foldbuf2726, i64 0, i64 0
  %1928 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2782 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1928, i32 0, i32 0
  %1929 = load i32, i32* %flags2782, align 8
  %call2783 = call i32 @get_regex_charset(i32 %1929)
  %cmp2784 = icmp eq i32 %call2783, 4
  %1930 = zext i1 %cmp2784 to i64
  %cond2786 = select i1 %cmp2784, i32 4, i32 0
  %conv2787 = trunc i32 %cond2786 to i8
  %call2788 = call i64 @Perl__to_uni_fold_flags(i64 %1927, i8* %arraydecay2781, i64* %foldlen2727, i8 zeroext %conv2787)
  %1931 = load %struct.hv*, %struct.hv** @PL_utf8_foldclosures, align 8
  %arraydecay2789 = getelementptr inbounds [14 x i8], [14 x i8]* %foldbuf2726, i64 0, i64 0
  %1932 = load i64, i64* %foldlen2727, align 8
  %conv2790 = trunc i64 %1932 to i32
  %call2791 = call i8* @Perl_hv_common_key_len(%struct.hv* %1931, i8* %arraydecay2789, i32 %conv2790, i32 32, %struct.sv* null, i32 0)
  %1933 = bitcast i8* %call2791 to %struct.sv**
  store %struct.sv** %1933, %struct.sv*** %listp, align 8
  %tobool2792 = icmp ne %struct.sv** %1933, null
  br i1 %tobool2792, label %if.then2793, label %if.end2852

if.then2793:                                      ; preds = %if.end2780
  %1934 = load %struct.sv**, %struct.sv*** %listp, align 8
  %1935 = load %struct.sv*, %struct.sv** %1934, align 8
  %1936 = bitcast %struct.sv* %1935 to %struct.av*
  store %struct.av* %1936, %struct.av** %list, align 8
  store i64 0, i64* %k, align 8
  br label %for.cond2794

for.cond2794:                                     ; preds = %for.inc2849, %if.then2793
  %1937 = load i64, i64* %k, align 8
  %1938 = load %struct.av*, %struct.av** %list, align 8
  %call2795 = call i64 @S_av_top_index(%struct.av* %1938)
  %cmp2796 = icmp sle i64 %1937, %call2795
  br i1 %cmp2796, label %for.body2798, label %for.end2851

for.body2798:                                     ; preds = %for.cond2794
  %1939 = load %struct.av*, %struct.av** %list, align 8
  %1940 = load i64, i64* %k, align 8
  %call2799 = call %struct.sv** @Perl_av_fetch(%struct.av* %1939, i64 %1940, i32 0)
  store %struct.sv** %call2799, %struct.sv*** %c_p, align 8
  %1941 = load %struct.sv**, %struct.sv*** %c_p, align 8
  %1942 = load %struct.sv*, %struct.sv** %1941, align 8
  %sv_flags2801 = getelementptr inbounds %struct.sv, %struct.sv* %1942, i32 0, i32 2
  %1943 = load i32, i32* %sv_flags2801, align 4
  %and2802 = and i32 %1943, -2145386240
  %cmp2803 = icmp eq i32 %and2802, -2147483392
  br i1 %cmp2803, label %cond.true2805, label %cond.false2807

cond.true2805:                                    ; preds = %for.body2798
  %1944 = load %struct.sv**, %struct.sv*** %c_p, align 8
  %1945 = load %struct.sv*, %struct.sv** %1944, align 8
  %sv_any2806 = getelementptr inbounds %struct.sv, %struct.sv* %1945, i32 0, i32 0
  %1946 = load i8*, i8** %sv_any2806, align 8
  %1947 = bitcast i8* %1946 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %1947, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %1948 = load i64, i64* %xivu_uv, align 8
  br label %cond.end2809

cond.false2807:                                   ; preds = %for.body2798
  %1949 = load %struct.sv**, %struct.sv*** %c_p, align 8
  %1950 = load %struct.sv*, %struct.sv** %1949, align 8
  %call2808 = call i64 @Perl_sv_2uv_flags(%struct.sv* %1950, i32 2)
  br label %cond.end2809

cond.end2809:                                     ; preds = %cond.false2807, %cond.true2805
  %cond2810 = phi i64 [ %1948, %cond.true2805 ], [ %call2808, %cond.false2807 ]
  store i64 %cond2810, i64* %c2800, align 8
  %1951 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2811 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1951, i32 0, i32 0
  %1952 = load i32, i32* %flags2811, align 8
  %call2812 = call i32 @get_regex_charset(i32 %1952)
  %cmp2813 = icmp eq i32 %call2812, 4
  br i1 %cmp2813, label %land.lhs.true2815, label %if.end2823

land.lhs.true2815:                                ; preds = %cond.end2809
  %1953 = load i64, i64* %c2800, align 8
  %cmp2816 = icmp ult i64 %1953, 128
  %conv2817 = zext i1 %cmp2816 to i32
  %1954 = load i64, i64* %j, align 8
  %cmp2818 = icmp ult i64 %1954, 128
  %conv2819 = zext i1 %cmp2818 to i32
  %cmp2820 = icmp ne i32 %conv2817, %conv2819
  br i1 %cmp2820, label %if.then2822, label %if.end2823

if.then2822:                                      ; preds = %land.lhs.true2815
  br label %for.inc2849

if.end2823:                                       ; preds = %land.lhs.true2815, %cond.end2809
  %1955 = load i64, i64* %c2800, align 8
  %cmp2824 = icmp ult i64 %1955, 256
  br i1 %cmp2824, label %land.lhs.true2826, label %if.end2833

land.lhs.true2826:                                ; preds = %if.end2823
  %1956 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2827 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1956, i32 0, i32 0
  %1957 = load i32, i32* %flags2827, align 8
  %call2828 = call i32 @get_regex_charset(i32 %1957)
  %cmp2829 = icmp eq i32 %call2828, 1
  br i1 %cmp2829, label %if.then2831, label %if.end2833

if.then2831:                                      ; preds = %land.lhs.true2826
  %1958 = load %struct.sv**, %struct.sv*** %use_list, align 8
  %1959 = load %struct.sv*, %struct.sv** %1958, align 8
  %1960 = load i64, i64* %c2800, align 8
  %call2832 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %1959, i64 %1960)
  %1961 = load %struct.sv**, %struct.sv*** %use_list, align 8
  store %struct.sv* %call2832, %struct.sv** %1961, align 8
  br label %for.inc2849

if.end2833:                                       ; preds = %land.lhs.true2826, %if.end2823
  %1962 = load i64, i64* %c2800, align 8
  %cmp2834 = icmp ult i64 %1962, 128
  br i1 %cmp2834, label %if.then2844, label %lor.lhs.false2836

lor.lhs.false2836:                                ; preds = %if.end2833
  %1963 = load i64, i64* %c2800, align 8
  %cmp2837 = icmp ugt i64 %1963, 255
  br i1 %cmp2837, label %if.then2844, label %lor.lhs.false2839

lor.lhs.false2839:                                ; preds = %lor.lhs.false2836
  %1964 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2840 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1964, i32 0, i32 0
  %1965 = load i32, i32* %flags2840, align 8
  %call2841 = call i32 @get_regex_charset(i32 %1965)
  %cmp2842 = icmp uge i32 %call2841, 2
  br i1 %cmp2842, label %if.then2844, label %if.else2846

if.then2844:                                      ; preds = %lor.lhs.false2839, %lor.lhs.false2836, %if.end2833
  %1966 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %1967 = load i64, i64* %c2800, align 8
  %call2845 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %1966, i64 %1967)
  store %struct.sv* %call2845, %struct.sv** %cp_list, align 8
  br label %if.end2848

if.else2846:                                      ; preds = %lor.lhs.false2839
  %1968 = load %struct.sv*, %struct.sv** %depends_list, align 8
  %1969 = load i64, i64* %c2800, align 8
  %call2847 = call %struct.sv* @S_add_cp_to_invlist(%struct.sv* %1968, i64 %1969)
  store %struct.sv* %call2847, %struct.sv** %depends_list, align 8
  br label %if.end2848

if.end2848:                                       ; preds = %if.else2846, %if.then2844
  br label %for.inc2849

for.inc2849:                                      ; preds = %if.end2848, %if.then2831, %if.then2822
  %1970 = load i64, i64* %k, align 8
  %inc2850 = add nsw i64 %1970, 1
  store i64 %inc2850, i64* %k, align 8
  br label %for.cond2794

for.end2851:                                      ; preds = %for.cond2794
  br label %if.end2852

if.end2852:                                       ; preds = %for.end2851, %if.end2780
  br label %for.inc2853

for.inc2853:                                      ; preds = %if.end2852, %if.end2779
  %1971 = load i64, i64* %j, align 8
  %inc2854 = add i64 %1971, 1
  store i64 %inc2854, i64* %j, align 8
  br label %for.cond2722

for.end2855:                                      ; preds = %for.cond2722
  br label %while.cond2719

while.end2856:                                    ; preds = %while.cond2719
  %1972 = load %struct.sv*, %struct.sv** %fold_intersection, align 8
  %1973 = bitcast %struct.sv* %1972 to i8*
  %1974 = bitcast i8* %1973 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %1974)
  br label %if.end2857

if.end2857:                                       ; preds = %while.end2856, %cond.false2701, %cond.true2700
  %1975 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %1976 = load %struct.sv*, %struct.sv** %cp_foldable_list, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %1975, %struct.sv* %1976, i1 zeroext false, %struct.sv** %cp_list)
  %1977 = load %struct.sv*, %struct.sv** %cp_foldable_list, align 8
  %1978 = bitcast %struct.sv* %1977 to i8*
  %1979 = bitcast i8* %1978 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %1979)
  br label %if.end2858

if.end2858:                                       ; preds = %if.end2857, %if.end2694
  %1980 = load %struct.sv*, %struct.sv** %simple_posixes, align 8
  %tobool2859 = icmp ne %struct.sv* %1980, null
  br i1 %tobool2859, label %if.then2860, label %if.end2861

if.then2860:                                      ; preds = %if.end2858
  %1981 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %1982 = load %struct.sv*, %struct.sv** %simple_posixes, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %1981, %struct.sv* %1982, i1 zeroext false, %struct.sv** %cp_list)
  %1983 = load %struct.sv*, %struct.sv** %simple_posixes, align 8
  %1984 = bitcast %struct.sv* %1983 to i8*
  %1985 = bitcast i8* %1984 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %1985)
  br label %if.end2861

if.end2861:                                       ; preds = %if.then2860, %if.end2858
  %1986 = load %struct.sv*, %struct.sv** %posixes, align 8
  %tobool2862 = icmp ne %struct.sv* %1986, null
  br i1 %tobool2862, label %if.then2865, label %lor.lhs.false2863

lor.lhs.false2863:                                ; preds = %if.end2861
  %1987 = load %struct.sv*, %struct.sv** %nposixes, align 8
  %tobool2864 = icmp ne %struct.sv* %1987, null
  br i1 %tobool2864, label %if.then2865, label %if.end2917

if.then2865:                                      ; preds = %lor.lhs.false2863, %if.end2861
  %1988 = load %struct.sv*, %struct.sv** %posixes, align 8
  %tobool2866 = icmp ne %struct.sv* %1988, null
  br i1 %tobool2866, label %land.lhs.true2867, label %if.end2873

land.lhs.true2867:                                ; preds = %if.then2865
  %1989 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2868 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1989, i32 0, i32 0
  %1990 = load i32, i32* %flags2868, align 8
  %call2869 = call i32 @get_regex_charset(i32 %1990)
  %cmp2870 = icmp uge i32 %call2869, 3
  br i1 %cmp2870, label %if.then2872, label %if.end2873

if.then2872:                                      ; preds = %land.lhs.true2867
  %1991 = load %struct.sv*, %struct.sv** %posixes, align 8
  %1992 = load %struct.sv*, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 14), align 16
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %1991, %struct.sv* %1992, i1 zeroext false, %struct.sv** %posixes)
  br label %if.end2873

if.end2873:                                       ; preds = %if.then2872, %land.lhs.true2867, %if.then2865
  %1993 = load %struct.sv*, %struct.sv** %nposixes, align 8
  %tobool2874 = icmp ne %struct.sv* %1993, null
  br i1 %tobool2874, label %if.then2875, label %if.end2897

if.then2875:                                      ; preds = %if.end2873
  %1994 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2876 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1994, i32 0, i32 0
  %1995 = load i32, i32* %flags2876, align 8
  %call2877 = call i32 @get_regex_charset(i32 %1995)
  %cmp2878 = icmp eq i32 %call2877, 0
  br i1 %cmp2878, label %if.then2880, label %if.else2885

if.then2880:                                      ; preds = %if.then2875
  %1996 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags2881 = getelementptr inbounds %struct.regnode, %struct.regnode* %1996, i32 0, i32 0
  %1997 = load i8, i8* %flags2881, align 2
  %conv2882 = zext i8 %1997 to i32
  %or2883 = or i32 %conv2882, 128
  %conv2884 = trunc i32 %or2883 to i8
  store i8 %conv2884, i8* %flags2881, align 2
  br label %if.end2892

if.else2885:                                      ; preds = %if.then2875
  %1998 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2886 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1998, i32 0, i32 0
  %1999 = load i32, i32* %flags2886, align 8
  %call2887 = call i32 @get_regex_charset(i32 %1999)
  %cmp2888 = icmp uge i32 %call2887, 3
  br i1 %cmp2888, label %if.then2890, label %if.end2891

if.then2890:                                      ; preds = %if.else2885
  %2000 = load %struct.sv*, %struct.sv** %nposixes, align 8
  %2001 = load %struct.sv*, %struct.sv** getelementptr inbounds ([16 x %struct.sv*], [16 x %struct.sv*]* @PL_XPosix_ptrs, i64 0, i64 14), align 16
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %2000, %struct.sv* %2001, i1 zeroext true, %struct.sv** %nposixes)
  br label %if.end2891

if.end2891:                                       ; preds = %if.then2890, %if.else2885
  br label %if.end2892

if.end2892:                                       ; preds = %if.end2891, %if.then2880
  %2002 = load %struct.sv*, %struct.sv** %posixes, align 8
  %tobool2893 = icmp ne %struct.sv* %2002, null
  br i1 %tobool2893, label %if.then2894, label %if.else2895

if.then2894:                                      ; preds = %if.end2892
  %2003 = load %struct.sv*, %struct.sv** %posixes, align 8
  %2004 = load %struct.sv*, %struct.sv** %nposixes, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %2003, %struct.sv* %2004, i1 zeroext false, %struct.sv** %posixes)
  %2005 = load %struct.sv*, %struct.sv** %nposixes, align 8
  %2006 = bitcast %struct.sv* %2005 to i8*
  %2007 = bitcast i8* %2006 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %2007)
  br label %if.end2896

if.else2895:                                      ; preds = %if.end2892
  %2008 = load %struct.sv*, %struct.sv** %nposixes, align 8
  store %struct.sv* %2008, %struct.sv** %posixes, align 8
  br label %if.end2896

if.end2896:                                       ; preds = %if.else2895, %if.then2894
  br label %if.end2897

if.end2897:                                       ; preds = %if.end2896, %if.end2873
  %2009 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2898 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2009, i32 0, i32 0
  %2010 = load i32, i32* %flags2898, align 8
  %call2899 = call i32 @get_regex_charset(i32 %2010)
  %cmp2900 = icmp eq i32 %call2899, 0
  br i1 %cmp2900, label %if.else2907, label %if.then2902

if.then2902:                                      ; preds = %if.end2897
  %2011 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %tobool2903 = icmp ne %struct.sv* %2011, null
  br i1 %tobool2903, label %if.then2904, label %if.else2905

if.then2904:                                      ; preds = %if.then2902
  %2012 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %2013 = load %struct.sv*, %struct.sv** %posixes, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %2012, %struct.sv* %2013, i1 zeroext false, %struct.sv** %cp_list)
  %2014 = load %struct.sv*, %struct.sv** %posixes, align 8
  %2015 = bitcast %struct.sv* %2014 to i8*
  %2016 = bitcast i8* %2015 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %2016)
  br label %if.end2906

if.else2905:                                      ; preds = %if.then2902
  %2017 = load %struct.sv*, %struct.sv** %posixes, align 8
  store %struct.sv* %2017, %struct.sv** %cp_list, align 8
  br label %if.end2906

if.end2906:                                       ; preds = %if.else2905, %if.then2904
  br label %if.end2916

if.else2907:                                      ; preds = %if.end2897
  store %struct.sv* null, %struct.sv** %nonascii_but_latin1_properties, align 8
  %2018 = load %struct.sv*, %struct.sv** %posixes, align 8
  %2019 = load %struct.sv*, %struct.sv** @PL_UpperLatin1, align 8
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %2018, %struct.sv* %2019, i1 zeroext false, %struct.sv** %nonascii_but_latin1_properties)
  %2020 = load %struct.sv*, %struct.sv** %posixes, align 8
  %2021 = load %struct.sv*, %struct.sv** %nonascii_but_latin1_properties, align 8
  call void @Perl__invlist_intersection_maybe_complement_2nd(%struct.sv* %2020, %struct.sv* %2021, i1 zeroext true, %struct.sv** %posixes)
  %2022 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %tobool2908 = icmp ne %struct.sv* %2022, null
  br i1 %tobool2908, label %if.then2909, label %if.else2910

if.then2909:                                      ; preds = %if.else2907
  %2023 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %2024 = load %struct.sv*, %struct.sv** %posixes, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %2023, %struct.sv* %2024, i1 zeroext false, %struct.sv** %cp_list)
  %2025 = load %struct.sv*, %struct.sv** %posixes, align 8
  %2026 = bitcast %struct.sv* %2025 to i8*
  %2027 = bitcast i8* %2026 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %2027)
  br label %if.end2911

if.else2910:                                      ; preds = %if.else2907
  %2028 = load %struct.sv*, %struct.sv** %posixes, align 8
  store %struct.sv* %2028, %struct.sv** %cp_list, align 8
  br label %if.end2911

if.end2911:                                       ; preds = %if.else2910, %if.then2909
  %2029 = load %struct.sv*, %struct.sv** %depends_list, align 8
  %tobool2912 = icmp ne %struct.sv* %2029, null
  br i1 %tobool2912, label %if.then2913, label %if.else2914

if.then2913:                                      ; preds = %if.end2911
  %2030 = load %struct.sv*, %struct.sv** %depends_list, align 8
  %2031 = load %struct.sv*, %struct.sv** %nonascii_but_latin1_properties, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %2030, %struct.sv* %2031, i1 zeroext false, %struct.sv** %depends_list)
  %2032 = load %struct.sv*, %struct.sv** %nonascii_but_latin1_properties, align 8
  %2033 = bitcast %struct.sv* %2032 to i8*
  %2034 = bitcast i8* %2033 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %2034)
  br label %if.end2915

if.else2914:                                      ; preds = %if.end2911
  %2035 = load %struct.sv*, %struct.sv** %nonascii_but_latin1_properties, align 8
  store %struct.sv* %2035, %struct.sv** %depends_list, align 8
  br label %if.end2915

if.end2915:                                       ; preds = %if.else2914, %if.then2913
  br label %if.end2916

if.end2916:                                       ; preds = %if.end2915, %if.end2906
  br label %if.end2917

if.end2917:                                       ; preds = %if.end2916, %lor.lhs.false2863
  %2036 = load %struct.sv*, %struct.sv** %properties, align 8
  %tobool2918 = icmp ne %struct.sv* %2036, null
  br i1 %tobool2918, label %if.then2919, label %if.end2943

if.then2919:                                      ; preds = %if.end2917
  %2037 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %tobool2920 = icmp ne %struct.sv* %2037, null
  br i1 %tobool2920, label %if.then2921, label %if.else2934

if.then2921:                                      ; preds = %if.then2919
  %2038 = load i8, i8* %warn_super, align 1
  %tobool2922 = trunc i8 %2038 to i1
  br i1 %tobool2922, label %if.then2923, label %if.end2933

if.then2923:                                      ; preds = %if.then2921
  %2039 = load i8, i8* %invert, align 1
  %tobool2924 = trunc i8 %2039 to i1
  %conv2925 = zext i1 %tobool2924 to i32
  %2040 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %call2926 = call i64 @S_invlist_highest(%struct.sv* %2040)
  %cmp2927 = icmp ugt i64 %call2926, 1114111
  %conv2928 = zext i1 %cmp2927 to i32
  %xor2929 = xor i32 %conv2925, %conv2928
  %tobool2930 = icmp ne i32 %xor2929, 0
  %lnot2931 = xor i1 %tobool2930, true
  %frombool2932 = zext i1 %lnot2931 to i8
  store i8 %frombool2932, i8* %warn_super, align 1
  br label %if.end2933

if.end2933:                                       ; preds = %if.then2923, %if.then2921
  %2041 = load %struct.sv*, %struct.sv** %properties, align 8
  %2042 = load %struct.sv*, %struct.sv** %cp_list, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %2041, %struct.sv* %2042, i1 zeroext false, %struct.sv** %cp_list)
  %2043 = load %struct.sv*, %struct.sv** %properties, align 8
  %2044 = bitcast %struct.sv* %2043 to i8*
  %2045 = bitcast i8* %2044 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %2045)
  br label %if.end2935

if.else2934:                                      ; preds = %if.then2919
  %2046 = load %struct.sv*, %struct.sv** %properties, align 8
  store %struct.sv* %2046, %struct.sv** %cp_list, align 8
  br label %if.end2935

if.end2935:                                       ; preds = %if.else2934, %if.end2933
  %2047 = load i8, i8* %warn_super, align 1
  %tobool2936 = trunc i8 %2047 to i1
  br i1 %tobool2936, label %if.then2937, label %if.end2942

if.then2937:                                      ; preds = %if.end2935
  %2048 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags2938 = getelementptr inbounds %struct.regnode, %struct.regnode* %2048, i32 0, i32 0
  %2049 = load i8, i8* %flags2938, align 2
  %conv2939 = zext i8 %2049 to i32
  %or2940 = or i32 %conv2939, 16
  %conv2941 = trunc i32 %or2940 to i8
  store i8 %conv2941, i8* %flags2938, align 2
  br label %if.end2942

if.end2942:                                       ; preds = %if.then2937, %if.end2935
  br label %if.end2943

if.end2943:                                       ; preds = %if.end2942, %if.end2917
  %2050 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2944 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2050, i32 0, i32 0
  %2051 = load i32, i32* %flags2944, align 8
  %call2945 = call i32 @get_regex_charset(i32 %2051)
  %cmp2946 = icmp eq i32 %call2945, 1
  br i1 %cmp2946, label %land.lhs.true2948, label %if.end2979

land.lhs.true2948:                                ; preds = %if.end2943
  %2052 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2949 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2052, i32 0, i32 0
  %2053 = load i32, i32* %flags2949, align 8
  %and2950 = and i32 %2053, 4
  %tobool2951 = icmp ne i32 %and2950, 0
  br i1 %tobool2951, label %cond.true2952, label %cond.false2953

cond.true2952:                                    ; preds = %land.lhs.true2948
  br i1 true, label %if.then2954, label %if.end2979

cond.false2953:                                   ; preds = %land.lhs.true2948
  br i1 false, label %if.then2954, label %if.end2979

if.then2954:                                      ; preds = %cond.false2953, %cond.true2952
  %2054 = load %struct.sv*, %struct.sv** %only_utf8_locale_list, align 8
  %tobool2955 = icmp ne %struct.sv* %2054, null
  br i1 %tobool2955, label %if.then2956, label %if.else2961

if.then2956:                                      ; preds = %if.then2954
  %2055 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags2957 = getelementptr inbounds %struct.regnode, %struct.regnode* %2055, i32 0, i32 0
  %2056 = load i8, i8* %flags2957, align 2
  %conv2958 = zext i8 %2056 to i32
  %or2959 = or i32 %conv2958, 4
  %conv2960 = trunc i32 %or2959 to i8
  store i8 %conv2960, i8* %flags2957, align 2
  br label %if.end2978

if.else2961:                                      ; preds = %if.then2954
  %2057 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %tobool2962 = icmp ne %struct.sv* %2057, null
  br i1 %tobool2962, label %if.then2963, label %if.end2977

if.then2963:                                      ; preds = %if.else2961
  %2058 = load %struct.sv*, %struct.sv** %cp_list, align 8
  call void @S_invlist_iterinit(%struct.sv* %2058)
  %2059 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %call2966 = call zeroext i1 @S_invlist_iternext(%struct.sv* %2059, i64* %start2964, i64* %end2965)
  br i1 %call2966, label %land.lhs.true2968, label %if.end2976

land.lhs.true2968:                                ; preds = %if.then2963
  %2060 = load i64, i64* %start2964, align 8
  %cmp2969 = icmp ult i64 %2060, 256
  br i1 %cmp2969, label %if.then2971, label %if.end2976

if.then2971:                                      ; preds = %land.lhs.true2968
  %2061 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags2972 = getelementptr inbounds %struct.regnode, %struct.regnode* %2061, i32 0, i32 0
  %2062 = load i8, i8* %flags2972, align 2
  %conv2973 = zext i8 %2062 to i32
  %or2974 = or i32 %conv2973, 4
  %conv2975 = trunc i32 %or2974 to i8
  store i8 %conv2975, i8* %flags2972, align 2
  br label %if.end2976

if.end2976:                                       ; preds = %if.then2971, %land.lhs.true2968, %if.then2963
  %2063 = load %struct.sv*, %struct.sv** %cp_list, align 8
  call void @S_invlist_iterfinish(%struct.sv* %2063)
  br label %if.end2977

if.end2977:                                       ; preds = %if.end2976, %if.else2961
  br label %if.end2978

if.end2978:                                       ; preds = %if.end2977, %if.then2956
  br label %if.end2979

if.end2979:                                       ; preds = %if.end2978, %cond.false2953, %cond.true2952, %if.end2943
  %2064 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %tobool2980 = icmp ne %struct.sv* %2064, null
  br i1 %tobool2980, label %land.lhs.true2981, label %if.end3000

land.lhs.true2981:                                ; preds = %if.end2979
  %2065 = load i8, i8* %invert, align 1
  %tobool2982 = trunc i8 %2065 to i1
  br i1 %tobool2982, label %land.lhs.true2984, label %if.end3000

land.lhs.true2984:                                ; preds = %land.lhs.true2981
  %2066 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags2985 = getelementptr inbounds %struct.regnode, %struct.regnode* %2066, i32 0, i32 0
  %2067 = load i8, i8* %flags2985, align 2
  %conv2986 = zext i8 %2067 to i32
  %and2987 = and i32 %conv2986, 12
  %tobool2988 = icmp ne i32 %and2987, 0
  br i1 %tobool2988, label %if.end3000, label %land.lhs.true2989

land.lhs.true2989:                                ; preds = %land.lhs.true2984
  %2068 = load %struct.sv*, %struct.sv** %depends_list, align 8
  %tobool2990 = icmp ne %struct.sv* %2068, null
  br i1 %tobool2990, label %if.end3000, label %land.lhs.true2991

land.lhs.true2991:                                ; preds = %land.lhs.true2989
  %2069 = load %struct.sv*, %struct.sv** %listsv, align 8
  %sv_any2992 = getelementptr inbounds %struct.sv, %struct.sv* %2069, i32 0, i32 0
  %2070 = load i8*, i8** %sv_any2992, align 8
  %2071 = bitcast i8* %2070 to %struct.xpv*
  %xpv_cur2993 = getelementptr inbounds %struct.xpv, %struct.xpv* %2071, i32 0, i32 2
  %2072 = load i64, i64* %xpv_cur2993, align 8
  %2073 = load i64, i64* %initial_listsv_len, align 8
  %cmp2994 = icmp ne i64 %2072, %2073
  br i1 %cmp2994, label %if.end3000, label %if.then2996

if.then2996:                                      ; preds = %land.lhs.true2991
  %2074 = load %struct.sv*, %struct.sv** %cp_list, align 8
  call void @Perl__invlist_invert(%struct.sv* %2074)
  %2075 = load %struct.sv*, %struct.sv** %swash, align 8
  %tobool2997 = icmp ne %struct.sv* %2075, null
  br i1 %tobool2997, label %if.then2998, label %if.end2999

if.then2998:                                      ; preds = %if.then2996
  %2076 = load %struct.sv*, %struct.sv** %swash, align 8
  %2077 = bitcast %struct.sv* %2076 to i8*
  %2078 = bitcast i8* %2077 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %2078)
  store %struct.sv* null, %struct.sv** %swash, align 8
  br label %if.end2999

if.end2999:                                       ; preds = %if.then2998, %if.then2996
  store i8 0, i8* %invert, align 1
  br label %if.end3000

if.end3000:                                       ; preds = %if.end2999, %land.lhs.true2991, %land.lhs.true2989, %land.lhs.true2984, %land.lhs.true2981, %if.end2979
  %2079 = load %struct.sv**, %struct.sv*** %ret_invlist.addr, align 8
  %tobool3001 = icmp ne %struct.sv** %2079, null
  br i1 %tobool3001, label %if.then3002, label %if.end3012

if.then3002:                                      ; preds = %if.end3000
  %2080 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %2081 = load %struct.sv**, %struct.sv*** %ret_invlist.addr, align 8
  store %struct.sv* %2080, %struct.sv** %2081, align 8
  %2082 = load %struct.sv*, %struct.sv** %swash, align 8
  %2083 = bitcast %struct.sv* %2082 to i8*
  %2084 = bitcast i8* %2083 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %2084)
  %2085 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit3003 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2085, i32 0, i32 12
  %2086 = load %struct.regnode*, %struct.regnode** %emit3003, align 8
  %2087 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy3004 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2087, i32 0, i32 13
  %2088 = bitcast %struct.regnode_ssc* %emit_dummy3004 to %struct.regnode*
  %cmp3005 = icmp eq %struct.regnode* %2086, %2088
  br i1 %cmp3005, label %if.then3007, label %if.else3009

if.then3007:                                      ; preds = %if.then3002
  %2089 = load i64, i64* %orig_size, align 8
  %2090 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size3008 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2090, i32 0, i32 17
  store i64 %2089, i64* %size3008, align 8
  br label %if.end3011

if.else3009:                                      ; preds = %if.then3002
  %2091 = load %struct.regnode*, %struct.regnode** %orig_emit, align 8
  %2092 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit3010 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2092, i32 0, i32 12
  store %struct.regnode* %2091, %struct.regnode** %emit3010, align 8
  br label %if.end3011

if.end3011:                                       ; preds = %if.else3009, %if.then3007
  %2093 = load %struct.regnode*, %struct.regnode** %orig_emit, align 8
  store %struct.regnode* %2093, %struct.regnode** %retval, align 8
  br label %return

if.end3012:                                       ; preds = %if.end3000
  %2094 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %tobool3013 = icmp ne %struct.sv* %2094, null
  br i1 %tobool3013, label %land.lhs.true3014, label %if.end3208

land.lhs.true3014:                                ; preds = %if.end3012
  %2095 = load i8, i8* %invert, align 1
  %tobool3015 = trunc i8 %2095 to i1
  br i1 %tobool3015, label %if.end3208, label %land.lhs.true3016

land.lhs.true3016:                                ; preds = %land.lhs.true3014
  %2096 = load %struct.sv*, %struct.sv** %depends_list, align 8
  %tobool3017 = icmp ne %struct.sv* %2096, null
  br i1 %tobool3017, label %if.end3208, label %land.lhs.true3018

land.lhs.true3018:                                ; preds = %land.lhs.true3016
  %2097 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags3019 = getelementptr inbounds %struct.regnode, %struct.regnode* %2097, i32 0, i32 0
  %2098 = load i8, i8* %flags3019, align 2
  %conv3020 = zext i8 %2098 to i32
  %and3021 = and i32 %conv3020, 12
  %tobool3022 = icmp ne i32 %and3021, 0
  br i1 %tobool3022, label %if.end3208, label %land.lhs.true3023

land.lhs.true3023:                                ; preds = %land.lhs.true3018
  %2099 = load %struct.sv*, %struct.sv** %listsv, align 8
  %sv_any3024 = getelementptr inbounds %struct.sv, %struct.sv* %2099, i32 0, i32 0
  %2100 = load i8*, i8** %sv_any3024, align 8
  %2101 = bitcast i8* %2100 to %struct.xpv*
  %xpv_cur3025 = getelementptr inbounds %struct.xpv, %struct.xpv* %2101, i32 0, i32 2
  %2102 = load i64, i64* %xpv_cur3025, align 8
  %2103 = load i64, i64* %initial_listsv_len, align 8
  %cmp3026 = icmp ne i64 %2102, %2103
  br i1 %cmp3026, label %if.end3208, label %land.lhs.true3028

land.lhs.true3028:                                ; preds = %land.lhs.true3023
  %2104 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags3029 = getelementptr inbounds %struct.regnode, %struct.regnode* %2104, i32 0, i32 0
  %2105 = load i8, i8* %flags3029, align 2
  %conv3030 = zext i8 %2105 to i32
  %and3031 = and i32 %conv3030, 16
  %tobool3032 = icmp ne i32 %and3031, 0
  br i1 %tobool3032, label %land.lhs.true3033, label %if.then3080

land.lhs.true3033:                                ; preds = %land.lhs.true3028
  %2106 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings3034 = getelementptr inbounds %struct.cop, %struct.cop* %2106, i32 0, i32 12
  %2107 = load i64*, i64** %cop_warnings3034, align 8
  %cmp3035 = icmp eq i64* %2107, null
  br i1 %cmp3035, label %if.then3080, label %lor.lhs.false3037

lor.lhs.false3037:                                ; preds = %land.lhs.true3033
  %2108 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings3038 = getelementptr inbounds %struct.cop, %struct.cop* %2108, i32 0, i32 12
  %2109 = load i64*, i64** %cop_warnings3038, align 8
  %cmp3039 = icmp eq i64* %2109, getelementptr inbounds (i64, i64* null, i64 1)
  br i1 %cmp3039, label %if.then3080, label %lor.lhs.false3041

lor.lhs.false3041:                                ; preds = %lor.lhs.false3037
  %2110 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings3042 = getelementptr inbounds %struct.cop, %struct.cop* %2110, i32 0, i32 12
  %2111 = load i64*, i64** %cop_warnings3042, align 8
  %cmp3043 = icmp eq i64* %2111, getelementptr inbounds (i64, i64* null, i64 2)
  br i1 %cmp3043, label %if.then3080, label %land.lhs.true3045

land.lhs.true3045:                                ; preds = %lor.lhs.false3041
  %2112 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings3046 = getelementptr inbounds %struct.cop, %struct.cop* %2112, i32 0, i32 12
  %2113 = load i64*, i64** %cop_warnings3046, align 8
  %add.ptr3047 = getelementptr inbounds i64, i64* %2113, i64 1
  %2114 = bitcast i64* %add.ptr3047 to i8*
  %arrayidx3048 = getelementptr inbounds i8, i8* %2114, i64 0
  %2115 = load i8, i8* %arrayidx3048, align 1
  %conv3049 = zext i8 %2115 to i32
  %and3050 = and i32 %conv3049, 2
  %tobool3051 = icmp ne i32 %and3050, 0
  br i1 %tobool3051, label %if.end3208, label %lor.lhs.false3052

lor.lhs.false3052:                                ; preds = %land.lhs.true3045
  %2116 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings3053 = getelementptr inbounds %struct.cop, %struct.cop* %2116, i32 0, i32 12
  %2117 = load i64*, i64** %cop_warnings3053, align 8
  %add.ptr3054 = getelementptr inbounds i64, i64* %2117, i64 1
  %2118 = bitcast i64* %add.ptr3054 to i8*
  %arrayidx3055 = getelementptr inbounds i8, i8* %2118, i64 12
  %2119 = load i8, i8* %arrayidx3055, align 1
  %conv3056 = zext i8 %2119 to i32
  %and3057 = and i32 %conv3056, 2
  %tobool3058 = icmp ne i32 %and3057, 0
  br i1 %tobool3058, label %if.end3208, label %lor.lhs.false3059

lor.lhs.false3059:                                ; preds = %lor.lhs.false3052
  %2120 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings3060 = getelementptr inbounds %struct.cop, %struct.cop* %2120, i32 0, i32 12
  %2121 = load i64*, i64** %cop_warnings3060, align 8
  %add.ptr3061 = getelementptr inbounds i64, i64* %2121, i64 1
  %2122 = bitcast i64* %add.ptr3061 to i8*
  %arrayidx3062 = getelementptr inbounds i8, i8* %2122, i64 0
  %2123 = load i8, i8* %arrayidx3062, align 1
  %conv3063 = zext i8 %2123 to i32
  %and3064 = and i32 %conv3063, 2
  %tobool3065 = icmp ne i32 %and3064, 0
  br i1 %tobool3065, label %if.end3208, label %lor.lhs.false3066

lor.lhs.false3066:                                ; preds = %lor.lhs.false3059
  %2124 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings3067 = getelementptr inbounds %struct.cop, %struct.cop* %2124, i32 0, i32 12
  %2125 = load i64*, i64** %cop_warnings3067, align 8
  %add.ptr3068 = getelementptr inbounds i64, i64* %2125, i64 1
  %2126 = bitcast i64* %add.ptr3068 to i8*
  %arrayidx3069 = getelementptr inbounds i8, i8* %2126, i64 0
  %2127 = load i8, i8* %arrayidx3069, align 1
  %conv3070 = zext i8 %2127 to i32
  %and3071 = and i32 %conv3070, 2
  %tobool3072 = icmp ne i32 %and3071, 0
  br i1 %tobool3072, label %if.end3208, label %lor.lhs.false3073

lor.lhs.false3073:                                ; preds = %lor.lhs.false3066
  %2128 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings3074 = getelementptr inbounds %struct.cop, %struct.cop* %2128, i32 0, i32 12
  %2129 = load i64*, i64** %cop_warnings3074, align 8
  %add.ptr3075 = getelementptr inbounds i64, i64* %2129, i64 1
  %2130 = bitcast i64* %add.ptr3075 to i8*
  %arrayidx3076 = getelementptr inbounds i8, i8* %2130, i64 0
  %2131 = load i8, i8* %arrayidx3076, align 1
  %conv3077 = zext i8 %2131 to i32
  %and3078 = and i32 %conv3077, 2
  %tobool3079 = icmp ne i32 %and3078, 0
  br i1 %tobool3079, label %if.end3208, label %if.then3080

if.then3080:                                      ; preds = %lor.lhs.false3073, %lor.lhs.false3041, %lor.lhs.false3037, %land.lhs.true3033, %land.lhs.true3028
  store i8 0, i8* %op3083, align 1
  %2132 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse3085 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2132, i32 0, i32 8
  %2133 = load i8*, i8** %parse3085, align 8
  store i8* %2133, i8** %cur_parse3084, align 8
  %2134 = load %struct.sv*, %struct.sv** %cp_list, align 8
  call void @S_invlist_iterinit(%struct.sv* %2134)
  %2135 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %call3086 = call zeroext i1 @S_invlist_iternext(%struct.sv* %2135, i64* %start3081, i64* %end3082)
  br i1 %call3086, label %if.else3089, label %if.then3087

if.then3087:                                      ; preds = %if.then3080
  store i8 82, i8* %op3083, align 1
  %2136 = load i32*, i32** %flagp.addr, align 8
  %2137 = load i32, i32* %2136, align 4
  %or3088 = or i32 %2137, 3
  store i32 %or3088, i32* %2136, align 4
  br label %if.end3191

if.else3089:                                      ; preds = %if.then3080
  %2138 = load i64, i64* %start3081, align 8
  %2139 = load i64, i64* %end3082, align 8
  %cmp3090 = icmp eq i64 %2138, %2139
  br i1 %cmp3090, label %if.then3092, label %if.else3151

if.then3092:                                      ; preds = %if.else3089
  %2140 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %call3093 = call zeroext i1 @S_invlist_iternext(%struct.sv* %2140, i64* %start3081, i64* %end3082)
  br i1 %call3093, label %if.end3150, label %land.lhs.true3094

land.lhs.true3094:                                ; preds = %if.then3092
  %2141 = load i64, i64* %start3081, align 8
  %cmp3095 = icmp ult i64 %2141, 256
  br i1 %cmp3095, label %if.then3102, label %lor.lhs.false3097

lor.lhs.false3097:                                ; preds = %land.lhs.true3094
  %2142 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf83098 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2142, i32 0, i32 25
  %2143 = load i32, i32* %utf83098, align 8
  %tobool3099 = icmp ne i32 %2143, 0
  br i1 %tobool3099, label %cond.true3100, label %cond.false3101

cond.true3100:                                    ; preds = %lor.lhs.false3097
  br i1 true, label %if.then3102, label %if.end3150

cond.false3101:                                   ; preds = %lor.lhs.false3097
  br i1 false, label %if.then3102, label %if.end3150

if.then3102:                                      ; preds = %cond.false3101, %cond.true3100, %land.lhs.true3094
  %2144 = load i64, i64* %start3081, align 8
  store i64 %2144, i64* %value, align 8
  %2145 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags3103 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2145, i32 0, i32 0
  %2146 = load i32, i32* %flags3103, align 8
  %and3104 = and i32 %2146, 4
  %tobool3105 = icmp ne i32 %and3104, 0
  br i1 %tobool3105, label %cond.true3106, label %cond.false3107

cond.true3106:                                    ; preds = %if.then3102
  br i1 true, label %if.else3115, label %if.then3108

cond.false3107:                                   ; preds = %if.then3102
  br i1 false, label %if.else3115, label %if.then3108

if.then3108:                                      ; preds = %cond.false3107, %cond.true3106
  %2147 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags3109 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2147, i32 0, i32 0
  %2148 = load i32, i32* %flags3109, align 8
  %call3110 = call i32 @get_regex_charset(i32 %2148)
  %cmp3111 = icmp eq i32 %call3110, 1
  %2149 = zext i1 %cmp3111 to i64
  %cond3113 = select i1 %cmp3111, i32 32, i32 31
  %conv3114 = trunc i32 %cond3113 to i8
  store i8 %conv3114, i8* %op3083, align 1
  br label %if.end3149

if.else3115:                                      ; preds = %cond.false3107, %cond.true3106
  %2150 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags3116 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2150, i32 0, i32 0
  %2151 = load i32, i32* %flags3116, align 8
  %call3117 = call i32 @get_regex_charset(i32 %2151)
  %cmp3118 = icmp eq i32 %call3117, 1
  br i1 %cmp3118, label %if.then3120, label %if.else3121

if.then3120:                                      ; preds = %if.else3115
  store i8 34, i8* %op3083, align 1
  br label %if.end3148

if.else3121:                                      ; preds = %if.else3115
  %2152 = load i64, i64* %value, align 8
  %cmp3122 = icmp ult i64 %2152, 256
  br i1 %cmp3122, label %if.then3124, label %if.else3137

if.then3124:                                      ; preds = %if.else3121
  %2153 = load i64, i64* %value, align 8
  %and3125 = and i64 %2153, -256
  %tobool3126 = icmp ne i64 %and3125, 0
  br i1 %tobool3126, label %cond.false3134, label %land.lhs.true3127

land.lhs.true3127:                                ; preds = %if.then3124
  %2154 = load i64, i64* %value, align 8
  %conv3128 = trunc i64 %2154 to i8
  %idxprom3129 = zext i8 %conv3128 to i64
  %arrayidx3130 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom3129
  %2155 = load i32, i32* %arrayidx3130, align 4
  %and3131 = and i32 %2155, 4194304
  %tobool3132 = icmp ne i32 %and3131, 0
  br i1 %tobool3132, label %cond.true3133, label %cond.false3134

cond.true3133:                                    ; preds = %land.lhs.true3127
  br i1 true, label %if.then3135, label %if.end3136

cond.false3134:                                   ; preds = %land.lhs.true3127, %if.then3124
  br i1 false, label %if.then3135, label %if.end3136

if.then3135:                                      ; preds = %cond.false3134, %cond.true3133
  store i8 31, i8* %op3083, align 1
  br label %if.end3136

if.end3136:                                       ; preds = %if.then3135, %cond.false3134, %cond.true3133
  br label %if.end3141

if.else3137:                                      ; preds = %if.else3121
  %2156 = load %struct.sv*, %struct.sv** @PL_utf8_foldable, align 8
  %2157 = load i64, i64* %value, align 8
  %call3138 = call zeroext i1 @S__invlist_contains_cp(%struct.sv* %2156, i64 %2157)
  br i1 %call3138, label %if.then3139, label %if.end3140

if.then3139:                                      ; preds = %if.else3137
  store i8 31, i8* %op3083, align 1
  br label %if.end3140

if.end3140:                                       ; preds = %if.then3139, %if.else3137
  br label %if.end3141

if.end3141:                                       ; preds = %if.end3140, %if.end3136
  %2158 = load i8, i8* %op3083, align 1
  %conv3142 = zext i8 %2158 to i32
  %cmp3143 = icmp eq i32 %conv3142, 0
  br i1 %cmp3143, label %if.then3145, label %if.end3147

if.then3145:                                      ; preds = %if.end3141
  %2159 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call3146 = call zeroext i8 @S_compute_EXACTish(%struct.RExC_state_t* %2159)
  store i8 %call3146, i8* %op3083, align 1
  br label %if.end3147

if.end3147:                                       ; preds = %if.then3145, %if.end3141
  br label %if.end3148

if.end3148:                                       ; preds = %if.end3147, %if.then3120
  br label %if.end3149

if.end3149:                                       ; preds = %if.end3148, %if.then3108
  br label %if.end3150

if.end3150:                                       ; preds = %if.end3149, %cond.false3101, %cond.true3100, %if.then3092
  br label %if.end3190

if.else3151:                                      ; preds = %if.else3089
  %2160 = load i64, i64* %start3081, align 8
  %cmp3152 = icmp eq i64 %2160, 0
  br i1 %cmp3152, label %if.then3154, label %if.end3189

if.then3154:                                      ; preds = %if.else3151
  %2161 = load i64, i64* %end3082, align 8
  %cmp3155 = icmp eq i64 %2161, -1
  br i1 %cmp3155, label %if.then3157, label %if.else3166

if.then3157:                                      ; preds = %if.then3154
  store i8 17, i8* %op3083, align 1
  %2162 = load i32*, i32** %flagp.addr, align 8
  %2163 = load i32, i32* %2162, align 4
  %or3158 = or i32 %2163, 3
  store i32 %or3158, i32* %2162, align 4
  %2164 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty3159 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2164, i32 0, i32 14
  %2165 = load i32, i32* %naughty3159, align 8
  %cmp3160 = icmp slt i32 %2165, 10
  br i1 %cmp3160, label %if.then3162, label %if.end3165

if.then3162:                                      ; preds = %if.then3157
  %2166 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty3163 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2166, i32 0, i32 14
  %2167 = load i32, i32* %naughty3163, align 8
  %add3164 = add nsw i32 %2167, 1
  store i32 %add3164, i32* %naughty3163, align 8
  br label %if.end3165

if.end3165:                                       ; preds = %if.then3162, %if.then3157
  br label %if.end3188

if.else3166:                                      ; preds = %if.then3154
  %2168 = load i64, i64* %end3082, align 8
  %cmp3167 = icmp eq i64 %2168, 9
  br i1 %cmp3167, label %land.lhs.true3169, label %if.end3187

land.lhs.true3169:                                ; preds = %if.else3166
  %2169 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %call3170 = call zeroext i1 @S_invlist_iternext(%struct.sv* %2169, i64* %start3081, i64* %end3082)
  br i1 %call3170, label %land.lhs.true3172, label %if.end3187

land.lhs.true3172:                                ; preds = %land.lhs.true3169
  %2170 = load i64, i64* %start3081, align 8
  %cmp3173 = icmp eq i64 %2170, 11
  br i1 %cmp3173, label %land.lhs.true3175, label %if.end3187

land.lhs.true3175:                                ; preds = %land.lhs.true3172
  %2171 = load i64, i64* %end3082, align 8
  %cmp3176 = icmp eq i64 %2171, -1
  br i1 %cmp3176, label %if.then3178, label %if.end3187

if.then3178:                                      ; preds = %land.lhs.true3175
  store i8 16, i8* %op3083, align 1
  %2172 = load i32*, i32** %flagp.addr, align 8
  %2173 = load i32, i32* %2172, align 4
  %or3179 = or i32 %2173, 3
  store i32 %or3179, i32* %2172, align 4
  %2174 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty3180 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2174, i32 0, i32 14
  %2175 = load i32, i32* %naughty3180, align 8
  %cmp3181 = icmp slt i32 %2175, 10
  br i1 %cmp3181, label %if.then3183, label %if.end3186

if.then3183:                                      ; preds = %if.then3178
  %2176 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty3184 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2176, i32 0, i32 14
  %2177 = load i32, i32* %naughty3184, align 8
  %add3185 = add nsw i32 %2177, 1
  store i32 %add3185, i32* %naughty3184, align 8
  br label %if.end3186

if.end3186:                                       ; preds = %if.then3183, %if.then3178
  br label %if.end3187

if.end3187:                                       ; preds = %if.end3186, %land.lhs.true3175, %land.lhs.true3172, %land.lhs.true3169, %if.else3166
  br label %if.end3188

if.end3188:                                       ; preds = %if.end3187, %if.end3165
  br label %if.end3189

if.end3189:                                       ; preds = %if.end3188, %if.else3151
  br label %if.end3190

if.end3190:                                       ; preds = %if.end3189, %if.end3150
  br label %if.end3191

if.end3191:                                       ; preds = %if.end3190, %if.then3087
  %2178 = load %struct.sv*, %struct.sv** %cp_list, align 8
  call void @S_invlist_iterfinish(%struct.sv* %2178)
  %2179 = load i8, i8* %op3083, align 1
  %conv3192 = zext i8 %2179 to i32
  %cmp3193 = icmp ne i32 %conv3192, 0
  br i1 %cmp3193, label %if.then3195, label %if.end3207

if.then3195:                                      ; preds = %if.end3191
  %2180 = load i8*, i8** %orig_parse, align 8
  %2181 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse3196 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2181, i32 0, i32 8
  store i8* %2180, i8** %parse3196, align 8
  %2182 = load %struct.regnode*, %struct.regnode** %orig_emit, align 8
  %2183 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit3197 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2183, i32 0, i32 12
  store %struct.regnode* %2182, %struct.regnode** %emit3197, align 8
  %2184 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %2185 = load i8, i8* %op3083, align 1
  %call3198 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %2184, i8 zeroext %2185)
  store %struct.regnode* %call3198, %struct.regnode** %ret, align 8
  %2186 = load i8*, i8** %cur_parse3084, align 8
  %2187 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse3199 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2187, i32 0, i32 8
  store i8* %2186, i8** %parse3199, align 8
  %2188 = load i8, i8* %op3083, align 1
  %idxprom3200 = zext i8 %2188 to i64
  %arrayidx3201 = getelementptr inbounds [134 x i8], [134 x i8]* @PL_regkind, i64 0, i64 %idxprom3200
  %2189 = load i8, i8* %arrayidx3201, align 1
  %conv3202 = zext i8 %2189 to i32
  %cmp3203 = icmp eq i32 %conv3202, 31
  br i1 %cmp3203, label %if.then3205, label %if.end3206

if.then3205:                                      ; preds = %if.then3195
  %2190 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %2191 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %2192 = load i32*, i32** %flagp.addr, align 8
  %2193 = load i64, i64* %value, align 8
  call void @S_alloc_maybe_populate_EXACT(%struct.RExC_state_t* %2190, %struct.regnode* %2191, i32* %2192, i64 0, i64 %2193, i1 zeroext true)
  br label %if.end3206

if.end3206:                                       ; preds = %if.then3205, %if.then3195
  %2194 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %2195 = bitcast %struct.sv* %2194 to i8*
  %2196 = bitcast i8* %2195 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %2196)
  %2197 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %2197, %struct.regnode** %retval, align 8
  br label %return

if.end3207:                                       ; preds = %if.end3191
  br label %if.end3208

if.end3208:                                       ; preds = %if.end3207, %lor.lhs.false3073, %lor.lhs.false3066, %lor.lhs.false3059, %lor.lhs.false3052, %land.lhs.true3045, %land.lhs.true3023, %land.lhs.true3018, %land.lhs.true3016, %land.lhs.true3014, %if.end3012
  %2198 = load %struct.regnode*, %struct.regnode** %ret, align 8
  call void @S_populate_ANYOF_from_invlist(%struct.regnode* %2198, %struct.sv** %cp_list)
  %2199 = load i8, i8* %invert, align 1
  %tobool3209 = trunc i8 %2199 to i1
  br i1 %tobool3209, label %if.then3210, label %if.end3215

if.then3210:                                      ; preds = %if.end3208
  %2200 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags3211 = getelementptr inbounds %struct.regnode, %struct.regnode* %2200, i32 0, i32 0
  %2201 = load i8, i8* %flags3211, align 2
  %conv3212 = zext i8 %2201 to i32
  %or3213 = or i32 %conv3212, 1
  %conv3214 = trunc i32 %or3213 to i8
  store i8 %conv3214, i8* %flags3211, align 2
  br label %if.end3215

if.end3215:                                       ; preds = %if.then3210, %if.end3208
  %2202 = load %struct.sv*, %struct.sv** %depends_list, align 8
  %tobool3216 = icmp ne %struct.sv* %2202, null
  br i1 %tobool3216, label %if.then3217, label %if.end3226

if.then3217:                                      ; preds = %if.end3215
  %2203 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %tobool3218 = icmp ne %struct.sv* %2203, null
  br i1 %tobool3218, label %if.then3219, label %if.else3220

if.then3219:                                      ; preds = %if.then3217
  %2204 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %2205 = load %struct.sv*, %struct.sv** %depends_list, align 8
  call void @Perl__invlist_union_maybe_complement_2nd(%struct.sv* %2204, %struct.sv* %2205, i1 zeroext false, %struct.sv** %cp_list)
  %2206 = load %struct.sv*, %struct.sv** %depends_list, align 8
  %2207 = bitcast %struct.sv* %2206 to i8*
  %2208 = bitcast i8* %2207 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %2208)
  br label %if.end3221

if.else3220:                                      ; preds = %if.then3217
  %2209 = load %struct.sv*, %struct.sv** %depends_list, align 8
  store %struct.sv* %2209, %struct.sv** %cp_list, align 8
  br label %if.end3221

if.end3221:                                       ; preds = %if.else3220, %if.then3219
  %2210 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags3222 = getelementptr inbounds %struct.regnode, %struct.regnode* %2210, i32 0, i32 0
  %2211 = load i8, i8* %flags3222, align 2
  %conv3223 = zext i8 %2211 to i32
  %or3224 = or i32 %conv3223, 2
  %conv3225 = trunc i32 %or3224 to i8
  store i8 %conv3225, i8* %flags3222, align 2
  br label %if.end3226

if.end3226:                                       ; preds = %if.end3221, %if.end3215
  %2212 = load %struct.sv*, %struct.sv** %swash, align 8
  %tobool3227 = icmp ne %struct.sv* %2212, null
  br i1 %tobool3227, label %land.lhs.true3228, label %if.end3232

land.lhs.true3228:                                ; preds = %if.end3226
  %2213 = load i64, i64* %element_count, align 8
  %cmp3229 = icmp ugt i64 %2213, 1
  br i1 %cmp3229, label %if.then3231, label %if.end3232

if.then3231:                                      ; preds = %land.lhs.true3228
  %2214 = load %struct.sv*, %struct.sv** %swash, align 8
  %2215 = bitcast %struct.sv* %2214 to i8*
  %2216 = bitcast i8* %2215 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %2216)
  store %struct.sv* null, %struct.sv** %swash, align 8
  br label %if.end3232

if.end3232:                                       ; preds = %if.then3231, %land.lhs.true3228, %if.end3226
  %2217 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %2218 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %2219 = load %struct.sv*, %struct.sv** %cp_list, align 8
  %2220 = load %struct.sv*, %struct.sv** %listsv, align 8
  %sv_any3233 = getelementptr inbounds %struct.sv, %struct.sv* %2220, i32 0, i32 0
  %2221 = load i8*, i8** %sv_any3233, align 8
  %2222 = bitcast i8* %2221 to %struct.xpv*
  %xpv_cur3234 = getelementptr inbounds %struct.xpv, %struct.xpv* %2222, i32 0, i32 2
  %2223 = load i64, i64* %xpv_cur3234, align 8
  %2224 = load i64, i64* %initial_listsv_len, align 8
  %cmp3235 = icmp ne i64 %2223, %2224
  br i1 %cmp3235, label %cond.true3237, label %cond.false3238

cond.true3237:                                    ; preds = %if.end3232
  %2225 = load %struct.sv*, %struct.sv** %listsv, align 8
  br label %cond.end3239

cond.false3238:                                   ; preds = %if.end3232
  br label %cond.end3239

cond.end3239:                                     ; preds = %cond.false3238, %cond.true3237
  %cond3240 = phi %struct.sv* [ %2225, %cond.true3237 ], [ null, %cond.false3238 ]
  %2226 = load %struct.sv*, %struct.sv** %only_utf8_locale_list, align 8
  %2227 = load %struct.sv*, %struct.sv** %swash, align 8
  %2228 = load i8, i8* %has_user_defined_property, align 1
  %tobool3241 = trunc i8 %2228 to i1
  call void @S_set_ANYOF_arg(%struct.RExC_state_t* %2217, %struct.regnode* %2218, %struct.sv* %2219, %struct.sv* %cond3240, %struct.sv* %2226, %struct.sv* %2227, i1 zeroext %tobool3241)
  %2229 = load i32*, i32** %flagp.addr, align 8
  %2230 = load i32, i32* %2229, align 4
  %or3242 = or i32 %2230, 3
  store i32 %or3242, i32* %2229, align 4
  %2231 = load %struct.regnode*, %struct.regnode** %ret, align 8
  %flags3243 = getelementptr inbounds %struct.regnode, %struct.regnode* %2231, i32 0, i32 0
  %2232 = load i8, i8* %flags3243, align 2
  %conv3244 = zext i8 %2232 to i32
  %and3245 = and i32 %conv3244, 12
  %tobool3246 = icmp ne i32 %and3245, 0
  br i1 %tobool3246, label %if.then3247, label %if.end3249

if.then3247:                                      ; preds = %cond.end3239
  %2233 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %contains_locale3248 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2233, i32 0, i32 34
  store i32 1, i32* %contains_locale3248, align 8
  br label %if.end3249

if.end3249:                                       ; preds = %if.then3247, %cond.end3239
  %2234 = load %struct.regnode*, %struct.regnode** %ret, align 8
  store %struct.regnode* %2234, %struct.regnode** %retval, align 8
  br label %return

return:                                           ; preds = %if.end3249, %if.end3206, %if.end3011, %if.then2693, %if.end2685, %cond.end2436
  %2235 = load %struct.regnode*, %struct.regnode** %retval, align 8
  ret %struct.regnode* %2235
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_grok_bslash_N(%struct.RExC_state_t* %pRExC_state, %struct.regnode** %node_p, i64* %code_point_p, i32* %cp_count, i32* %flagp, i32 %depth) #0 {
entry:
  %retval = alloca i1, align 1
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %node_p.addr = alloca %struct.regnode**, align 8
  %code_point_p.addr = alloca i64*, align 8
  %cp_count.addr = alloca i32*, align 8
  %flagp.addr = alloca i32*, align 8
  %depth.addr = alloca i32, align 4
  %endbrace = alloca i8*, align 8
  %endchar = alloca i8*, align 8
  %p = alloca i8*, align 8
  %offset = alloca i64, align 8
  %offset93 = alloca i64, align 8
  %length_of_hex = alloca i64, align 8
  %grok_hex_flags = alloca i32, align 4
  %offset204 = alloca i64, align 8
  %substitute_parse = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %orig_end = alloca i8*, align 8
  %flags244 = alloca i32, align 4
  %offset304 = alloca i64, align 8
  %ellipses = alloca i8*, align 8
  %len355 = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode** %node_p, %struct.regnode*** %node_p.addr, align 8
  store i64* %code_point_p, i64** %code_point_p.addr, align 8
  store i32* %cp_count, i32** %cp_count.addr, align 8
  store i32* %flagp, i32** %flagp.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load i32*, i32** %cp_count.addr, align 8
  %tobool = icmp ne i32* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %cp_count.addr, align 8
  store i32 1, i32* %1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 0
  %3 = load i32, i32* %flags, align 8
  %and = and i32 %3, 8
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 8
  %6 = load i8*, i8** %parse, align 8
  %call = call i8* @S_regpatws(%struct.RExC_state_t* %4, i8* %6, i1 zeroext true)
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %7 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse2 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %7, i32 0, i32 8
  %8 = load i8*, i8** %parse2, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %8, %cond.false ]
  store i8* %cond, i8** %p, align 8
  %9 = load i8*, i8** %p, align 8
  %10 = load i8, i8* %9, align 1
  %conv = sext i8 %10 to i32
  %cmp = icmp ne i32 %conv, 123
  br i1 %cmp, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %11 = load i8*, i8** %p, align 8
  %call4 = call i32 @S_regcurly(i8* %11)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then6, label %if.end22

if.then6:                                         ; preds = %lor.lhs.false, %cond.end
  %12 = load i8*, i8** %p, align 8
  %13 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse7 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %13, i32 0, i32 8
  store i8* %12, i8** %parse7, align 8
  %14 = load i32*, i32** %cp_count.addr, align 8
  %tobool8 = icmp ne i32* %14, null
  br i1 %tobool8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then6
  %15 = load i32*, i32** %cp_count.addr, align 8
  store i32 -1, i32* %15, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.then6
  %16 = load %struct.regnode**, %struct.regnode*** %node_p.addr, align 8
  %tobool11 = icmp ne %struct.regnode** %16, null
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %if.end10
  store i1 false, i1* %retval, align 1
  br label %return

if.end13:                                         ; preds = %if.end10
  %17 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse14 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %17, i32 0, i32 8
  %18 = load i8*, i8** %parse14, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 -1
  store i8* %incdec.ptr, i8** %parse14, align 8
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call15 = call i8* @S_nextchar(%struct.RExC_state_t* %19)
  %20 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call16 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %20, i8 zeroext 16)
  %21 = load %struct.regnode**, %struct.regnode*** %node_p.addr, align 8
  store %struct.regnode* %call16, %struct.regnode** %21, align 8
  %22 = load i32*, i32** %flagp.addr, align 8
  %23 = load i32, i32* %22, align 4
  %or = or i32 %23, 3
  store i32 %or, i32* %22, align 4
  %24 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %24, i32 0, i32 14
  %25 = load i32, i32* %naughty, align 8
  %cmp17 = icmp slt i32 %25, 10
  br i1 %cmp17, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end13
  %26 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %naughty20 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %26, i32 0, i32 14
  %27 = load i32, i32* %naughty20, align 8
  %add = add nsw i32 %27, 1
  store i32 %add, i32* %naughty20, align 8
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.end13
  store i1 true, i1* %retval, align 1
  br label %return

if.end22:                                         ; preds = %lor.lhs.false
  %28 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse23 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %28, i32 0, i32 8
  %29 = load i8*, i8** %parse23, align 8
  %30 = load i8, i8* %29, align 1
  %conv24 = sext i8 %30 to i32
  %cmp25 = icmp ne i32 %conv24, 123
  br i1 %cmp25, label %if.then27, label %if.end59

if.then27:                                        ; preds = %if.end22
  br label %do.body

do.body:                                          ; preds = %if.then27
  %31 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %31, i32 0, i32 12
  %32 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %33 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %33, i32 0, i32 13
  %34 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp28 = icmp eq %struct.regnode* %32, %34
  br i1 %cmp28, label %if.end31, label %if.then30

if.then30:                                        ; preds = %do.body
  %35 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %35, i32 0, i32 3
  %36 = load %struct.p5rx*, %struct.p5rx** %rx_sv, align 8
  %37 = bitcast %struct.p5rx* %36 to i8*
  %38 = bitcast i8* %37 to %struct.sv*
  %39 = bitcast %struct.sv* %38 to i8*
  call void @Perl_save_pushptr(i8* %39, i32 11)
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %do.body
  br label %do.body32

do.body32:                                        ; preds = %if.end31
  %40 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse33 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %40, i32 0, i32 8
  %41 = load i8*, i8** %parse33, align 8
  %42 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %42, i32 0, i32 7
  %43 = load i8*, i8** %end, align 8
  %cmp34 = icmp ugt i8* %41, %43
  br i1 %cmp34, label %cond.true36, label %cond.false38

cond.true36:                                      ; preds = %do.body32
  %44 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end37 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %44, i32 0, i32 7
  %45 = load i8*, i8** %end37, align 8
  br label %cond.end40

cond.false38:                                     ; preds = %do.body32
  %46 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse39 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %46, i32 0, i32 8
  %47 = load i8*, i8** %parse39, align 8
  br label %cond.end40

cond.end40:                                       ; preds = %cond.false38, %cond.true36
  %cond41 = phi i8* [ %45, %cond.true36 ], [ %47, %cond.false38 ]
  %48 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %48, i32 0, i32 2
  %49 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %cond41 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %49 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %offset, align 8
  %50 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %50, i32 0, i32 25
  %51 = load i32, i32* %utf8, align 8
  %tobool42 = icmp ne i32 %51, 0
  %52 = zext i1 %tobool42 to i64
  %cond43 = select i1 %tobool42, i32 1, i32 0
  %tobool44 = icmp ne i32 %cond43, 0
  %53 = zext i1 %tobool44 to i64
  %cond45 = select i1 %tobool44, i32 1, i32 0
  %54 = load i64, i64* %offset, align 8
  %55 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp46 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %55, i32 0, i32 2
  %56 = load i8*, i8** %precomp46, align 8
  %57 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf847 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %57, i32 0, i32 25
  %58 = load i32, i32* %utf847, align 8
  %tobool48 = icmp ne i32 %58, 0
  %59 = zext i1 %tobool48 to i64
  %cond49 = select i1 %tobool48, i32 1, i32 0
  %tobool50 = icmp ne i32 %cond49, 0
  %60 = zext i1 %tobool50 to i64
  %cond51 = select i1 %tobool50, i32 1, i32 0
  %61 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end52 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %61, i32 0, i32 7
  %62 = load i8*, i8** %end52, align 8
  %63 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp53 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %63, i32 0, i32 2
  %64 = load i8*, i8** %precomp53, align 8
  %sub.ptr.lhs.cast54 = ptrtoint i8* %62 to i64
  %sub.ptr.rhs.cast55 = ptrtoint i8* %64 to i64
  %sub.ptr.sub56 = sub i64 %sub.ptr.lhs.cast54, %sub.ptr.rhs.cast55
  %65 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %sub.ptr.sub56, %65
  %66 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp57 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %66, i32 0, i32 2
  %67 = load i8*, i8** %precomp57, align 8
  %68 = load i64, i64* %offset, align 8
  %add.ptr = getelementptr inbounds i8, i8* %67, i64 %68
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.367, i64 0, i64 0), i32 %cond45, i64 %54, i8* %56, i32 %cond51, i64 %sub, i8* %add.ptr)
  br label %do.end

do.end:                                           ; preds = %cond.end40
  br label %do.end58

do.end58:                                         ; preds = %do.end
  br label %if.end59

if.end59:                                         ; preds = %do.end58, %if.end22
  %69 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse60 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %69, i32 0, i32 8
  %70 = load i8*, i8** %parse60, align 8
  %incdec.ptr61 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %incdec.ptr61, i8** %parse60, align 8
  %71 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse62 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %71, i32 0, i32 8
  %72 = load i8*, i8** %parse62, align 8
  %call63 = call i8* @strchr(i8* %72, i32 125) #6
  store i8* %call63, i8** %endbrace, align 8
  %tobool64 = icmp ne i8* %call63, null
  br i1 %tobool64, label %lor.lhs.false65, label %if.then79

lor.lhs.false65:                                  ; preds = %if.end59
  %73 = load i8*, i8** %endbrace, align 8
  %74 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse66 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %74, i32 0, i32 8
  %75 = load i8*, i8** %parse66, align 8
  %cmp67 = icmp eq i8* %73, %75
  br i1 %cmp67, label %if.end129, label %lor.lhs.false69

lor.lhs.false69:                                  ; preds = %lor.lhs.false65
  %76 = load i8*, i8** %endbrace, align 8
  %77 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse70 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %77, i32 0, i32 8
  %78 = load i8*, i8** %parse70, align 8
  %sub.ptr.lhs.cast71 = ptrtoint i8* %76 to i64
  %sub.ptr.rhs.cast72 = ptrtoint i8* %78 to i64
  %sub.ptr.sub73 = sub i64 %sub.ptr.lhs.cast71, %sub.ptr.rhs.cast72
  %cmp74 = icmp sge i64 %sub.ptr.sub73, 2
  br i1 %cmp74, label %land.lhs.true, label %if.then79

land.lhs.true:                                    ; preds = %lor.lhs.false69
  %79 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse76 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %79, i32 0, i32 8
  %80 = load i8*, i8** %parse76, align 8
  %call77 = call i32 @strncmp(i8* %80, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.368, i64 0, i64 0), i64 2) #6
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.then79, label %if.end129

if.then79:                                        ; preds = %land.lhs.true, %lor.lhs.false69, %if.end59
  %81 = load i8*, i8** %endbrace, align 8
  %tobool80 = icmp ne i8* %81, null
  br i1 %tobool80, label %if.then81, label %if.end83

if.then81:                                        ; preds = %if.then79
  %82 = load i8*, i8** %endbrace, align 8
  %83 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse82 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %83, i32 0, i32 8
  store i8* %82, i8** %parse82, align 8
  br label %if.end83

if.end83:                                         ; preds = %if.then81, %if.then79
  br label %do.body84

do.body84:                                        ; preds = %if.end83
  %84 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit85 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %84, i32 0, i32 12
  %85 = load %struct.regnode*, %struct.regnode** %emit85, align 8
  %86 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy86 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %86, i32 0, i32 13
  %87 = bitcast %struct.regnode_ssc* %emit_dummy86 to %struct.regnode*
  %cmp87 = icmp eq %struct.regnode* %85, %87
  br i1 %cmp87, label %if.end91, label %if.then89

if.then89:                                        ; preds = %do.body84
  %88 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv90 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %88, i32 0, i32 3
  %89 = load %struct.p5rx*, %struct.p5rx** %rx_sv90, align 8
  %90 = bitcast %struct.p5rx* %89 to i8*
  %91 = bitcast i8* %90 to %struct.sv*
  %92 = bitcast %struct.sv* %91 to i8*
  call void @Perl_save_pushptr(i8* %92, i32 11)
  br label %if.end91

if.end91:                                         ; preds = %if.then89, %do.body84
  br label %do.body92

do.body92:                                        ; preds = %if.end91
  %93 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse94 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %93, i32 0, i32 8
  %94 = load i8*, i8** %parse94, align 8
  %95 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end95 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %95, i32 0, i32 7
  %96 = load i8*, i8** %end95, align 8
  %cmp96 = icmp ugt i8* %94, %96
  br i1 %cmp96, label %cond.true98, label %cond.false100

cond.true98:                                      ; preds = %do.body92
  %97 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end99 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %97, i32 0, i32 7
  %98 = load i8*, i8** %end99, align 8
  br label %cond.end102

cond.false100:                                    ; preds = %do.body92
  %99 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse101 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %99, i32 0, i32 8
  %100 = load i8*, i8** %parse101, align 8
  br label %cond.end102

cond.end102:                                      ; preds = %cond.false100, %cond.true98
  %cond103 = phi i8* [ %98, %cond.true98 ], [ %100, %cond.false100 ]
  %101 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp104 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %101, i32 0, i32 2
  %102 = load i8*, i8** %precomp104, align 8
  %sub.ptr.lhs.cast105 = ptrtoint i8* %cond103 to i64
  %sub.ptr.rhs.cast106 = ptrtoint i8* %102 to i64
  %sub.ptr.sub107 = sub i64 %sub.ptr.lhs.cast105, %sub.ptr.rhs.cast106
  store i64 %sub.ptr.sub107, i64* %offset93, align 8
  %103 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8108 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %103, i32 0, i32 25
  %104 = load i32, i32* %utf8108, align 8
  %tobool109 = icmp ne i32 %104, 0
  %105 = zext i1 %tobool109 to i64
  %cond110 = select i1 %tobool109, i32 1, i32 0
  %tobool111 = icmp ne i32 %cond110, 0
  %106 = zext i1 %tobool111 to i64
  %cond112 = select i1 %tobool111, i32 1, i32 0
  %107 = load i64, i64* %offset93, align 8
  %108 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp113 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %108, i32 0, i32 2
  %109 = load i8*, i8** %precomp113, align 8
  %110 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8114 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %110, i32 0, i32 25
  %111 = load i32, i32* %utf8114, align 8
  %tobool115 = icmp ne i32 %111, 0
  %112 = zext i1 %tobool115 to i64
  %cond116 = select i1 %tobool115, i32 1, i32 0
  %tobool117 = icmp ne i32 %cond116, 0
  %113 = zext i1 %tobool117 to i64
  %cond118 = select i1 %tobool117, i32 1, i32 0
  %114 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end119 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %114, i32 0, i32 7
  %115 = load i8*, i8** %end119, align 8
  %116 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp120 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %116, i32 0, i32 2
  %117 = load i8*, i8** %precomp120, align 8
  %sub.ptr.lhs.cast121 = ptrtoint i8* %115 to i64
  %sub.ptr.rhs.cast122 = ptrtoint i8* %117 to i64
  %sub.ptr.sub123 = sub i64 %sub.ptr.lhs.cast121, %sub.ptr.rhs.cast122
  %118 = load i64, i64* %offset93, align 8
  %sub124 = sub nsw i64 %sub.ptr.sub123, %118
  %119 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp125 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %119, i32 0, i32 2
  %120 = load i8*, i8** %precomp125, align 8
  %121 = load i64, i64* %offset93, align 8
  %add.ptr126 = getelementptr inbounds i8, i8* %120, i64 %121
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.369, i64 0, i64 0), i32 %cond112, i64 %107, i8* %109, i32 %cond118, i64 %sub124, i8* %add.ptr126)
  br label %do.end127

do.end127:                                        ; preds = %cond.end102
  br label %do.end128

do.end128:                                        ; preds = %do.end127
  br label %if.end129

if.end129:                                        ; preds = %do.end128, %land.lhs.true, %lor.lhs.false65
  %122 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %uni_semantics = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %122, i32 0, i32 27
  store i32 1, i32* %uni_semantics, align 8
  %123 = load i8*, i8** %endbrace, align 8
  %124 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse130 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %124, i32 0, i32 8
  %125 = load i8*, i8** %parse130, align 8
  %cmp131 = icmp eq i8* %123, %125
  br i1 %cmp131, label %if.then133, label %if.end142

if.then133:                                       ; preds = %if.end129
  %126 = load i32*, i32** %cp_count.addr, align 8
  %tobool134 = icmp ne i32* %126, null
  br i1 %tobool134, label %if.then135, label %if.end136

if.then135:                                       ; preds = %if.then133
  %127 = load i32*, i32** %cp_count.addr, align 8
  store i32 0, i32* %127, align 4
  br label %if.end136

if.end136:                                        ; preds = %if.then135, %if.then133
  %128 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call137 = call i8* @S_nextchar(%struct.RExC_state_t* %128)
  %129 = load %struct.regnode**, %struct.regnode*** %node_p.addr, align 8
  %tobool138 = icmp ne %struct.regnode** %129, null
  br i1 %tobool138, label %if.end140, label %if.then139

if.then139:                                       ; preds = %if.end136
  store i1 false, i1* %retval, align 1
  br label %return

if.end140:                                        ; preds = %if.end136
  %130 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call141 = call %struct.regnode* @S_reg_node(%struct.RExC_state_t* %130, i8 zeroext 40)
  %131 = load %struct.regnode**, %struct.regnode*** %node_p.addr, align 8
  store %struct.regnode* %call141, %struct.regnode** %131, align 8
  store i1 true, i1* %retval, align 1
  br label %return

if.end142:                                        ; preds = %if.end129
  %132 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse143 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %132, i32 0, i32 8
  %133 = load i8*, i8** %parse143, align 8
  %add.ptr144 = getelementptr inbounds i8, i8* %133, i64 2
  store i8* %add.ptr144, i8** %parse143, align 8
  %134 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse145 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %134, i32 0, i32 8
  %135 = load i8*, i8** %parse145, align 8
  %136 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse146 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %136, i32 0, i32 8
  %137 = load i8*, i8** %parse146, align 8
  %call147 = call i64 @strcspn(i8* %137, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.370, i64 0, i64 0)) #6
  %add.ptr148 = getelementptr inbounds i8, i8* %135, i64 %call147
  store i8* %add.ptr148, i8** %endchar, align 8
  %138 = load i8*, i8** %endchar, align 8
  %139 = load i8*, i8** %endbrace, align 8
  %cmp149 = icmp uge i8* %138, %139
  br i1 %cmp149, label %if.then151, label %if.else

if.then151:                                       ; preds = %if.end142
  %140 = load i64*, i64** %code_point_p.addr, align 8
  %tobool152 = icmp ne i64* %140, null
  br i1 %tobool152, label %if.end155, label %if.then153

if.then153:                                       ; preds = %if.then151
  %141 = load i8*, i8** %p, align 8
  %142 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse154 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %142, i32 0, i32 8
  store i8* %141, i8** %parse154, align 8
  store i1 false, i1* %retval, align 1
  br label %return

if.end155:                                        ; preds = %if.then151
  %143 = load i8*, i8** %endchar, align 8
  %144 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse156 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %144, i32 0, i32 8
  %145 = load i8*, i8** %parse156, align 8
  %sub.ptr.lhs.cast157 = ptrtoint i8* %143 to i64
  %sub.ptr.rhs.cast158 = ptrtoint i8* %145 to i64
  %sub.ptr.sub159 = sub i64 %sub.ptr.lhs.cast157, %sub.ptr.rhs.cast158
  store i64 %sub.ptr.sub159, i64* %length_of_hex, align 8
  %146 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit160 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %146, i32 0, i32 12
  %147 = load %struct.regnode*, %struct.regnode** %emit160, align 8
  %148 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy161 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %148, i32 0, i32 13
  %149 = bitcast %struct.regnode_ssc* %emit_dummy161 to %struct.regnode*
  %cmp162 = icmp eq %struct.regnode* %147, %149
  %150 = zext i1 %cmp162 to i64
  %cond164 = select i1 %cmp162, i32 4, i32 0
  %or165 = or i32 3, %cond164
  store i32 %or165, i32* %grok_hex_flags, align 4
  %151 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse166 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %151, i32 0, i32 8
  %152 = load i8*, i8** %parse166, align 8
  %call167 = call i64 @Perl_grok_hex(i8* %152, i64* %length_of_hex, i32* %grok_hex_flags, double* null)
  %153 = load i64*, i64** %code_point_p.addr, align 8
  store i64 %call167, i64* %153, align 8
  %154 = load i64, i64* %length_of_hex, align 8
  %cmp168 = icmp eq i64 %154, 0
  br i1 %cmp168, label %if.then177, label %lor.lhs.false170

lor.lhs.false170:                                 ; preds = %if.end155
  %155 = load i64, i64* %length_of_hex, align 8
  %156 = load i8*, i8** %endchar, align 8
  %157 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse171 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %157, i32 0, i32 8
  %158 = load i8*, i8** %parse171, align 8
  %sub.ptr.lhs.cast172 = ptrtoint i8* %156 to i64
  %sub.ptr.rhs.cast173 = ptrtoint i8* %158 to i64
  %sub.ptr.sub174 = sub i64 %sub.ptr.lhs.cast172, %sub.ptr.rhs.cast173
  %cmp175 = icmp ne i64 %155, %sub.ptr.sub174
  br i1 %cmp175, label %if.then177, label %if.end240

if.then177:                                       ; preds = %lor.lhs.false170, %if.end155
  %159 = load i64, i64* %length_of_hex, align 8
  %160 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse178 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %160, i32 0, i32 8
  %161 = load i8*, i8** %parse178, align 8
  %add.ptr179 = getelementptr inbounds i8, i8* %161, i64 %159
  store i8* %add.ptr179, i8** %parse178, align 8
  %162 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %orig_utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %162, i32 0, i32 26
  %163 = load i32, i32* %orig_utf8, align 4
  %tobool180 = icmp ne i32 %163, 0
  br i1 %tobool180, label %cond.true181, label %cond.false184

cond.true181:                                     ; preds = %if.then177
  %164 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse182 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %164, i32 0, i32 8
  %165 = load i8*, i8** %parse182, align 8
  %166 = load i8, i8* %165, align 1
  %idxprom = zext i8 %166 to i64
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %167 = load i8, i8* %arrayidx, align 1
  %conv183 = zext i8 %167 to i32
  br label %cond.end185

cond.false184:                                    ; preds = %if.then177
  br label %cond.end185

cond.end185:                                      ; preds = %cond.false184, %cond.true181
  %cond186 = phi i32 [ %conv183, %cond.true181 ], [ 1, %cond.false184 ]
  %168 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse187 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %168, i32 0, i32 8
  %169 = load i8*, i8** %parse187, align 8
  %idx.ext = sext i32 %cond186 to i64
  %add.ptr188 = getelementptr inbounds i8, i8* %169, i64 %idx.ext
  store i8* %add.ptr188, i8** %parse187, align 8
  %170 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse189 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %170, i32 0, i32 8
  %171 = load i8*, i8** %parse189, align 8
  %172 = load i8*, i8** %endchar, align 8
  %cmp190 = icmp uge i8* %171, %172
  br i1 %cmp190, label %if.then192, label %if.end194

if.then192:                                       ; preds = %cond.end185
  %173 = load i8*, i8** %endchar, align 8
  %174 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse193 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %174, i32 0, i32 8
  store i8* %173, i8** %parse193, align 8
  br label %if.end194

if.end194:                                        ; preds = %if.then192, %cond.end185
  br label %do.body195

do.body195:                                       ; preds = %if.end194
  %175 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit196 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %175, i32 0, i32 12
  %176 = load %struct.regnode*, %struct.regnode** %emit196, align 8
  %177 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy197 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %177, i32 0, i32 13
  %178 = bitcast %struct.regnode_ssc* %emit_dummy197 to %struct.regnode*
  %cmp198 = icmp eq %struct.regnode* %176, %178
  br i1 %cmp198, label %if.end202, label %if.then200

if.then200:                                       ; preds = %do.body195
  %179 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv201 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %179, i32 0, i32 3
  %180 = load %struct.p5rx*, %struct.p5rx** %rx_sv201, align 8
  %181 = bitcast %struct.p5rx* %180 to i8*
  %182 = bitcast i8* %181 to %struct.sv*
  %183 = bitcast %struct.sv* %182 to i8*
  call void @Perl_save_pushptr(i8* %183, i32 11)
  br label %if.end202

if.end202:                                        ; preds = %if.then200, %do.body195
  br label %do.body203

do.body203:                                       ; preds = %if.end202
  %184 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse205 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %184, i32 0, i32 8
  %185 = load i8*, i8** %parse205, align 8
  %186 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end206 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %186, i32 0, i32 7
  %187 = load i8*, i8** %end206, align 8
  %cmp207 = icmp ugt i8* %185, %187
  br i1 %cmp207, label %cond.true209, label %cond.false211

cond.true209:                                     ; preds = %do.body203
  %188 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end210 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %188, i32 0, i32 7
  %189 = load i8*, i8** %end210, align 8
  br label %cond.end213

cond.false211:                                    ; preds = %do.body203
  %190 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse212 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %190, i32 0, i32 8
  %191 = load i8*, i8** %parse212, align 8
  br label %cond.end213

cond.end213:                                      ; preds = %cond.false211, %cond.true209
  %cond214 = phi i8* [ %189, %cond.true209 ], [ %191, %cond.false211 ]
  %192 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp215 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %192, i32 0, i32 2
  %193 = load i8*, i8** %precomp215, align 8
  %sub.ptr.lhs.cast216 = ptrtoint i8* %cond214 to i64
  %sub.ptr.rhs.cast217 = ptrtoint i8* %193 to i64
  %sub.ptr.sub218 = sub i64 %sub.ptr.lhs.cast216, %sub.ptr.rhs.cast217
  store i64 %sub.ptr.sub218, i64* %offset204, align 8
  %194 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8219 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %194, i32 0, i32 25
  %195 = load i32, i32* %utf8219, align 8
  %tobool220 = icmp ne i32 %195, 0
  %196 = zext i1 %tobool220 to i64
  %cond221 = select i1 %tobool220, i32 1, i32 0
  %tobool222 = icmp ne i32 %cond221, 0
  %197 = zext i1 %tobool222 to i64
  %cond223 = select i1 %tobool222, i32 1, i32 0
  %198 = load i64, i64* %offset204, align 8
  %199 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp224 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %199, i32 0, i32 2
  %200 = load i8*, i8** %precomp224, align 8
  %201 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8225 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %201, i32 0, i32 25
  %202 = load i32, i32* %utf8225, align 8
  %tobool226 = icmp ne i32 %202, 0
  %203 = zext i1 %tobool226 to i64
  %cond227 = select i1 %tobool226, i32 1, i32 0
  %tobool228 = icmp ne i32 %cond227, 0
  %204 = zext i1 %tobool228 to i64
  %cond229 = select i1 %tobool228, i32 1, i32 0
  %205 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end230 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %205, i32 0, i32 7
  %206 = load i8*, i8** %end230, align 8
  %207 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp231 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %207, i32 0, i32 2
  %208 = load i8*, i8** %precomp231, align 8
  %sub.ptr.lhs.cast232 = ptrtoint i8* %206 to i64
  %sub.ptr.rhs.cast233 = ptrtoint i8* %208 to i64
  %sub.ptr.sub234 = sub i64 %sub.ptr.lhs.cast232, %sub.ptr.rhs.cast233
  %209 = load i64, i64* %offset204, align 8
  %sub235 = sub nsw i64 %sub.ptr.sub234, %209
  %210 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp236 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %210, i32 0, i32 2
  %211 = load i8*, i8** %precomp236, align 8
  %212 = load i64, i64* %offset204, align 8
  %add.ptr237 = getelementptr inbounds i8, i8* %211, i64 %212
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.371, i64 0, i64 0), i32 %cond223, i64 %198, i8* %200, i32 %cond229, i64 %sub235, i8* %add.ptr237)
  br label %do.end238

do.end238:                                        ; preds = %cond.end213
  br label %do.end239

do.end239:                                        ; preds = %do.end238
  br label %if.end240

if.end240:                                        ; preds = %do.end239, %lor.lhs.false170
  %213 = load i8*, i8** %endbrace, align 8
  %add.ptr241 = getelementptr inbounds i8, i8* %213, i64 1
  %214 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse242 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %214, i32 0, i32 8
  store i8* %add.ptr241, i8** %parse242, align 8
  store i1 true, i1* %retval, align 1
  br label %return

if.else:                                          ; preds = %if.end142
  %215 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end243 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %215, i32 0, i32 7
  %216 = load i8*, i8** %end243, align 8
  store i8* %216, i8** %orig_end, align 8
  %217 = load i32*, i32** %cp_count.addr, align 8
  %tobool245 = icmp ne i32* %217, null
  br i1 %tobool245, label %if.then246, label %if.end256

if.then246:                                       ; preds = %if.else
  %218 = load i32*, i32** %cp_count.addr, align 8
  store i32 0, i32* %218, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then246
  %219 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse247 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %219, i32 0, i32 8
  %220 = load i8*, i8** %parse247, align 8
  %221 = load i8*, i8** %endbrace, align 8
  %cmp248 = icmp ult i8* %220, %221
  br i1 %cmp248, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %222 = load i8*, i8** %endchar, align 8
  %add.ptr250 = getelementptr inbounds i8, i8* %222, i64 1
  %223 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse251 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %223, i32 0, i32 8
  store i8* %add.ptr250, i8** %parse251, align 8
  %224 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse252 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %224, i32 0, i32 8
  %225 = load i8*, i8** %parse252, align 8
  %226 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse253 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %226, i32 0, i32 8
  %227 = load i8*, i8** %parse253, align 8
  %call254 = call i64 @strcspn(i8* %227, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.370, i64 0, i64 0)) #6
  %add.ptr255 = getelementptr inbounds i8, i8* %225, i64 %call254
  store i8* %add.ptr255, i8** %endchar, align 8
  %228 = load i32*, i32** %cp_count.addr, align 8
  %229 = load i32, i32* %228, align 4
  %inc = add nsw i32 %229, 1
  store i32 %inc, i32* %228, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end256

if.end256:                                        ; preds = %while.end, %if.else
  %230 = load %struct.regnode**, %struct.regnode*** %node_p.addr, align 8
  %tobool257 = icmp ne %struct.regnode** %230, null
  br i1 %tobool257, label %if.end263, label %if.then258

if.then258:                                       ; preds = %if.end256
  %231 = load i32*, i32** %cp_count.addr, align 8
  %tobool259 = icmp ne i32* %231, null
  br i1 %tobool259, label %if.end262, label %if.then260

if.then260:                                       ; preds = %if.then258
  %232 = load i8*, i8** %p, align 8
  %233 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse261 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %233, i32 0, i32 8
  store i8* %232, i8** %parse261, align 8
  br label %if.end262

if.end262:                                        ; preds = %if.then260, %if.then258
  store i1 false, i1* %retval, align 1
  br label %return

if.end263:                                        ; preds = %if.end256
  %call264 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.337, i64 0, i64 0), i64 2)
  store %struct.sv* %call264, %struct.sv** %substitute_parse, align 8
  br label %while.cond265

while.cond265:                                    ; preds = %while.body269, %if.end263
  %234 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse266 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %234, i32 0, i32 8
  %235 = load i8*, i8** %parse266, align 8
  %236 = load i8*, i8** %endbrace, align 8
  %cmp267 = icmp ult i8* %235, %236
  br i1 %cmp267, label %while.body269, label %while.end281

while.body269:                                    ; preds = %while.cond265
  %237 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  call void @Perl_sv_catpv(%struct.sv* %237, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.372, i64 0, i64 0))
  %238 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  %239 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse270 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %239, i32 0, i32 8
  %240 = load i8*, i8** %parse270, align 8
  %241 = load i8*, i8** %endchar, align 8
  %242 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse271 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %242, i32 0, i32 8
  %243 = load i8*, i8** %parse271, align 8
  %sub.ptr.lhs.cast272 = ptrtoint i8* %241 to i64
  %sub.ptr.rhs.cast273 = ptrtoint i8* %243 to i64
  %sub.ptr.sub274 = sub i64 %sub.ptr.lhs.cast272, %sub.ptr.rhs.cast273
  call void @Perl_sv_catpvn_flags(%struct.sv* %238, i8* %240, i64 %sub.ptr.sub274, i32 2)
  %244 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  call void @Perl_sv_catpv(%struct.sv* %244, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.373, i64 0, i64 0))
  %245 = load i8*, i8** %endchar, align 8
  %add.ptr275 = getelementptr inbounds i8, i8* %245, i64 1
  %246 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse276 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %246, i32 0, i32 8
  store i8* %add.ptr275, i8** %parse276, align 8
  %247 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse277 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %247, i32 0, i32 8
  %248 = load i8*, i8** %parse277, align 8
  %249 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse278 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %249, i32 0, i32 8
  %250 = load i8*, i8** %parse278, align 8
  %call279 = call i64 @strcspn(i8* %250, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.370, i64 0, i64 0)) #6
  %add.ptr280 = getelementptr inbounds i8, i8* %248, i64 %call279
  store i8* %add.ptr280, i8** %endchar, align 8
  br label %while.cond265

while.end281:                                     ; preds = %while.cond265
  %251 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  call void @Perl_sv_catpv(%struct.sv* %251, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.341, i64 0, i64 0))
  %252 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %252, i32 0, i32 2
  %253 = load i32, i32* %sv_flags, align 4
  %and282 = and i32 %253, 2098176
  %cmp283 = icmp eq i32 %and282, 1024
  br i1 %cmp283, label %cond.true285, label %cond.false286

cond.true285:                                     ; preds = %while.end281
  %254 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %254, i32 0, i32 0
  %255 = load i8*, i8** %sv_any, align 8
  %256 = bitcast i8* %255 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %256, i32 0, i32 2
  %257 = load i64, i64* %xpv_cur, align 8
  store i64 %257, i64* %len, align 8
  %258 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %258, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %259 = load i8*, i8** %svu_pv, align 8
  br label %cond.end288

cond.false286:                                    ; preds = %while.end281
  %260 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  %call287 = call i8* @Perl_sv_2pv_flags(%struct.sv* %260, i64* %len, i32 2)
  br label %cond.end288

cond.end288:                                      ; preds = %cond.false286, %cond.true285
  %cond289 = phi i8* [ %259, %cond.true285 ], [ %call287, %cond.false286 ]
  %261 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse290 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %261, i32 0, i32 8
  store i8* %cond289, i8** %parse290, align 8
  %262 = load i64, i64* %len, align 8
  %cmp291 = icmp ult i64 %262, 8
  br i1 %cmp291, label %if.then293, label %if.end340

if.then293:                                       ; preds = %cond.end288
  %263 = load i8*, i8** %endbrace, align 8
  %264 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse294 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %264, i32 0, i32 8
  store i8* %263, i8** %parse294, align 8
  br label %do.body295

do.body295:                                       ; preds = %if.then293
  %265 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit296 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %265, i32 0, i32 12
  %266 = load %struct.regnode*, %struct.regnode** %emit296, align 8
  %267 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy297 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %267, i32 0, i32 13
  %268 = bitcast %struct.regnode_ssc* %emit_dummy297 to %struct.regnode*
  %cmp298 = icmp eq %struct.regnode* %266, %268
  br i1 %cmp298, label %if.end302, label %if.then300

if.then300:                                       ; preds = %do.body295
  %269 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv301 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %269, i32 0, i32 3
  %270 = load %struct.p5rx*, %struct.p5rx** %rx_sv301, align 8
  %271 = bitcast %struct.p5rx* %270 to i8*
  %272 = bitcast i8* %271 to %struct.sv*
  %273 = bitcast %struct.sv* %272 to i8*
  call void @Perl_save_pushptr(i8* %273, i32 11)
  br label %if.end302

if.end302:                                        ; preds = %if.then300, %do.body295
  br label %do.body303

do.body303:                                       ; preds = %if.end302
  %274 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse305 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %274, i32 0, i32 8
  %275 = load i8*, i8** %parse305, align 8
  %276 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end306 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %276, i32 0, i32 7
  %277 = load i8*, i8** %end306, align 8
  %cmp307 = icmp ugt i8* %275, %277
  br i1 %cmp307, label %cond.true309, label %cond.false311

cond.true309:                                     ; preds = %do.body303
  %278 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end310 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %278, i32 0, i32 7
  %279 = load i8*, i8** %end310, align 8
  br label %cond.end313

cond.false311:                                    ; preds = %do.body303
  %280 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse312 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %280, i32 0, i32 8
  %281 = load i8*, i8** %parse312, align 8
  br label %cond.end313

cond.end313:                                      ; preds = %cond.false311, %cond.true309
  %cond314 = phi i8* [ %279, %cond.true309 ], [ %281, %cond.false311 ]
  %282 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp315 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %282, i32 0, i32 2
  %283 = load i8*, i8** %precomp315, align 8
  %sub.ptr.lhs.cast316 = ptrtoint i8* %cond314 to i64
  %sub.ptr.rhs.cast317 = ptrtoint i8* %283 to i64
  %sub.ptr.sub318 = sub i64 %sub.ptr.lhs.cast316, %sub.ptr.rhs.cast317
  store i64 %sub.ptr.sub318, i64* %offset304, align 8
  %284 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8319 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %284, i32 0, i32 25
  %285 = load i32, i32* %utf8319, align 8
  %tobool320 = icmp ne i32 %285, 0
  %286 = zext i1 %tobool320 to i64
  %cond321 = select i1 %tobool320, i32 1, i32 0
  %tobool322 = icmp ne i32 %cond321, 0
  %287 = zext i1 %tobool322 to i64
  %cond323 = select i1 %tobool322, i32 1, i32 0
  %288 = load i64, i64* %offset304, align 8
  %289 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp324 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %289, i32 0, i32 2
  %290 = load i8*, i8** %precomp324, align 8
  %291 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8325 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %291, i32 0, i32 25
  %292 = load i32, i32* %utf8325, align 8
  %tobool326 = icmp ne i32 %292, 0
  %293 = zext i1 %tobool326 to i64
  %cond327 = select i1 %tobool326, i32 1, i32 0
  %tobool328 = icmp ne i32 %cond327, 0
  %294 = zext i1 %tobool328 to i64
  %cond329 = select i1 %tobool328, i32 1, i32 0
  %295 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end330 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %295, i32 0, i32 7
  %296 = load i8*, i8** %end330, align 8
  %297 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp331 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %297, i32 0, i32 2
  %298 = load i8*, i8** %precomp331, align 8
  %sub.ptr.lhs.cast332 = ptrtoint i8* %296 to i64
  %sub.ptr.rhs.cast333 = ptrtoint i8* %298 to i64
  %sub.ptr.sub334 = sub i64 %sub.ptr.lhs.cast332, %sub.ptr.rhs.cast333
  %299 = load i64, i64* %offset304, align 8
  %sub335 = sub nsw i64 %sub.ptr.sub334, %299
  %300 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp336 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %300, i32 0, i32 2
  %301 = load i8*, i8** %precomp336, align 8
  %302 = load i64, i64* %offset304, align 8
  %add.ptr337 = getelementptr inbounds i8, i8* %301, i64 %302
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.371, i64 0, i64 0), i32 %cond323, i64 %288, i8* %290, i32 %cond329, i64 %sub335, i8* %add.ptr337)
  br label %do.end338

do.end338:                                        ; preds = %cond.end313
  br label %do.end339

do.end339:                                        ; preds = %do.end338
  br label %if.end340

if.end340:                                        ; preds = %do.end339, %cond.end288
  %303 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse341 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %303, i32 0, i32 8
  %304 = load i8*, i8** %parse341, align 8
  %305 = load i64, i64* %len, align 8
  %add.ptr342 = getelementptr inbounds i8, i8* %304, i64 %305
  %306 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end343 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %306, i32 0, i32 7
  store i8* %add.ptr342, i8** %end343, align 8
  %307 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %override_recoding = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %307, i32 0, i32 36
  store i32 1, i32* %override_recoding, align 8
  %308 = load %struct.regnode**, %struct.regnode*** %node_p.addr, align 8
  %tobool344 = icmp ne %struct.regnode** %308, null
  br i1 %tobool344, label %if.then345, label %if.end383

if.then345:                                       ; preds = %if.end340
  %309 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %310 = load i32, i32* %depth.addr, align 4
  %add346 = add i32 %310, 1
  %call347 = call %struct.regnode* @S_reg(%struct.RExC_state_t* %309, i32 1, i32* %flags244, i32 %add346)
  %311 = load %struct.regnode**, %struct.regnode*** %node_p.addr, align 8
  store %struct.regnode* %call347, %struct.regnode** %311, align 8
  %tobool348 = icmp ne %struct.regnode* %call347, null
  br i1 %tobool348, label %if.end380, label %if.then349

if.then349:                                       ; preds = %if.then345
  %312 = load i32, i32* %flags244, align 4
  %and350 = and i32 %312, 32
  %tobool351 = icmp ne i32 %and350, 0
  br i1 %tobool351, label %if.then352, label %if.end353

if.then352:                                       ; preds = %if.then349
  %313 = load i32*, i32** %flagp.addr, align 8
  store i32 32, i32* %313, align 4
  store i1 false, i1* %retval, align 1
  br label %return

if.end353:                                        ; preds = %if.then349
  br label %do.body354

do.body354:                                       ; preds = %if.end353
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %ellipses, align 8
  %314 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end356 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %314, i32 0, i32 7
  %315 = load i8*, i8** %end356, align 8
  %316 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp357 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %316, i32 0, i32 2
  %317 = load i8*, i8** %precomp357, align 8
  %sub.ptr.lhs.cast358 = ptrtoint i8* %315 to i64
  %sub.ptr.rhs.cast359 = ptrtoint i8* %317 to i64
  %sub.ptr.sub360 = sub i64 %sub.ptr.lhs.cast358, %sub.ptr.rhs.cast359
  store i64 %sub.ptr.sub360, i64* %len355, align 8
  %318 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit361 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %318, i32 0, i32 12
  %319 = load %struct.regnode*, %struct.regnode** %emit361, align 8
  %320 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy362 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %320, i32 0, i32 13
  %321 = bitcast %struct.regnode_ssc* %emit_dummy362 to %struct.regnode*
  %cmp363 = icmp eq %struct.regnode* %319, %321
  br i1 %cmp363, label %if.end367, label %if.then365

if.then365:                                       ; preds = %do.body354
  %322 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv366 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %322, i32 0, i32 3
  %323 = load %struct.p5rx*, %struct.p5rx** %rx_sv366, align 8
  %324 = bitcast %struct.p5rx* %323 to i8*
  %325 = bitcast i8* %324 to %struct.sv*
  %326 = bitcast %struct.sv* %325 to i8*
  call void @Perl_save_pushptr(i8* %326, i32 11)
  br label %if.end367

if.end367:                                        ; preds = %if.then365, %do.body354
  %327 = load i64, i64* %len355, align 8
  %cmp368 = icmp sgt i64 %327, 127
  br i1 %cmp368, label %if.then370, label %if.end371

if.then370:                                       ; preds = %if.end367
  store i64 117, i64* %len355, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.182, i64 0, i64 0), i8** %ellipses, align 8
  br label %if.end371

if.end371:                                        ; preds = %if.then370, %if.end367
  %328 = load i32, i32* %flags244, align 4
  %conv372 = sext i32 %328 to i64
  %329 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8373 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %329, i32 0, i32 25
  %330 = load i32, i32* %utf8373, align 8
  %tobool374 = icmp ne i32 %330, 0
  %331 = zext i1 %tobool374 to i64
  %cond375 = select i1 %tobool374, i32 1, i32 0
  %tobool376 = icmp ne i32 %cond375, 0
  %332 = zext i1 %tobool376 to i64
  %cond377 = select i1 %tobool376, i32 1, i32 0
  %333 = load i64, i64* %len355, align 8
  %334 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp378 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %334, i32 0, i32 2
  %335 = load i8*, i8** %precomp378, align 8
  %336 = load i8*, i8** %ellipses, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.374, i64 0, i64 0), i64 %conv372, i32 %cond377, i64 %333, i8* %335, i8* %336)
  br label %do.end379

do.end379:                                        ; preds = %if.end371
  br label %if.end380

if.end380:                                        ; preds = %do.end379, %if.then345
  %337 = load i32, i32* %flags244, align 4
  %and381 = and i32 %337, 15
  %338 = load i32*, i32** %flagp.addr, align 8
  %339 = load i32, i32* %338, align 4
  %or382 = or i32 %339, %and381
  store i32 %or382, i32* %338, align 4
  br label %if.end383

if.end383:                                        ; preds = %if.end380, %if.end340
  %340 = load i8*, i8** %endbrace, align 8
  %341 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse384 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %341, i32 0, i32 8
  store i8* %340, i8** %parse384, align 8
  %342 = load i8*, i8** %orig_end, align 8
  %343 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end385 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %343, i32 0, i32 7
  store i8* %342, i8** %end385, align 8
  %344 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %override_recoding386 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %344, i32 0, i32 36
  store i32 0, i32* %override_recoding386, align 8
  %345 = load %struct.sv*, %struct.sv** %substitute_parse, align 8
  %346 = bitcast %struct.sv* %345 to i8*
  %347 = bitcast i8* %346 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %347)
  %348 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %call387 = call i8* @S_nextchar(%struct.RExC_state_t* %348)
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end383, %if.then352, %if.end262, %if.end240, %if.then153, %if.end140, %if.then139, %if.end21, %if.then12
  %349 = load i1, i1* %retval, align 1
  ret i1 %349
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_backref_value(i8* %p) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %endptr = alloca i8*, align 8
  %val = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  %call = call zeroext i1 @Perl_grok_atoUV(i8* %0, i64* %val, i8** %endptr)
  br i1 %call, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %val, align 8
  %cmp = icmp ule i64 %1, 2147483647
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i64, i64* %val, align 8
  %conv = trunc i64 %2 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 2147483647, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @S_compute_EXACTish(%struct.RExC_state_t* %pRExC_state) #0 {
entry:
  %retval = alloca i8, align 1
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %op = alloca i8, align 1
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 0
  %1 = load i32, i32* %flags, align 8
  %and = and i32 %1, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.end, label %if.then

cond.false:                                       ; preds = %entry
  br i1 false, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false, %cond.true
  %2 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags1 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %2, i32 0, i32 0
  %3 = load i32, i32* %flags1, align 8
  %call = call i32 @get_regex_charset(i32 %3)
  %cmp = icmp eq i32 %call, 1
  %4 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 32, i32 31
  %conv = trunc i32 %cond to i8
  store i8 %conv, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %cond.false, %cond.true
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags2 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 0
  %6 = load i32, i32* %flags2, align 8
  %call3 = call i32 @get_regex_charset(i32 %6)
  %conv4 = trunc i32 %call3 to i8
  store i8 %conv4, i8* %op, align 1
  %7 = load i8, i8* %op, align 1
  %conv5 = zext i8 %7 to i32
  %cmp6 = icmp sge i32 %conv5, 3
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  %8 = load i8, i8* %op, align 1
  %dec = add i8 %8, -1
  store i8 %dec, i8* %op, align 1
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %9 = load i8, i8* %op, align 1
  %conv10 = zext i8 %9 to i32
  %add = add nsw i32 %conv10, 33
  %conv11 = trunc i32 %add to i8
  store i8 %conv11, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end9, %if.then
  %10 = load i8, i8* %retval, align 1
  ret i8 %10
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_grok_bslash_o(i8** %s, i64* %uv, i8** %error_msg, i1 zeroext %output_warning, i1 zeroext %strict, i1 zeroext %silence_non_portable, i1 zeroext %UTF) #0 {
entry:
  %retval = alloca i1, align 1
  %s.addr = alloca i8**, align 8
  %uv.addr = alloca i64*, align 8
  %error_msg.addr = alloca i8**, align 8
  %output_warning.addr = alloca i8, align 1
  %strict.addr = alloca i8, align 1
  %silence_non_portable.addr = alloca i8, align 1
  %UTF.addr = alloca i8, align 1
  %e = alloca i8*, align 8
  %numbers_len = alloca i64, align 8
  %flags = alloca i32, align 4
  store i8** %s, i8*** %s.addr, align 8
  store i64* %uv, i64** %uv.addr, align 8
  store i8** %error_msg, i8*** %error_msg.addr, align 8
  %frombool = zext i1 %output_warning to i8
  store i8 %frombool, i8* %output_warning.addr, align 1
  %frombool1 = zext i1 %strict to i8
  store i8 %frombool1, i8* %strict.addr, align 1
  %frombool2 = zext i1 %silence_non_portable to i8
  store i8 %frombool2, i8* %silence_non_portable.addr, align 1
  %frombool3 = zext i1 %UTF to i8
  store i8 %frombool3, i8* %UTF.addr, align 1
  store i32 7, i32* %flags, align 4
  %0 = load i8**, i8*** %s.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i32 1
  store i8* %incdec.ptr, i8** %0, align 8
  %2 = load i8**, i8*** %s.addr, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp ne i32 %conv, 123
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i8**, i8*** %error_msg.addr, align 8
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.375, i64 0, i64 0), i8** %5, align 8
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i8**, i8*** %s.addr, align 8
  %7 = load i8*, i8** %6, align 8
  %call = call i8* @strchr(i8* %7, i32 125) #6
  store i8* %call, i8** %e, align 8
  %8 = load i8*, i8** %e, align 8
  %tobool = icmp ne i8* %8, null
  br i1 %tobool, label %if.end12, label %if.then5

if.then5:                                         ; preds = %if.end
  %9 = load i8**, i8*** %s.addr, align 8
  %10 = load i8*, i8** %9, align 8
  %incdec.ptr6 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr6, i8** %9, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then5
  %11 = load i8**, i8*** %s.addr, align 8
  %12 = load i8*, i8** %11, align 8
  %13 = load i8, i8* %12, align 1
  %conv7 = sext i8 %13 to i32
  %and = and i32 248, %conv7
  %cmp8 = icmp eq i32 %and, 48
  %14 = zext i1 %cmp8 to i64
  %cond = select i1 %cmp8, i32 1, i32 0
  %tobool10 = icmp ne i32 %cond, 0
  br i1 %tobool10, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load i8**, i8*** %s.addr, align 8
  %16 = load i8*, i8** %15, align 8
  %incdec.ptr11 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr11, i8** %15, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i8**, i8*** %error_msg.addr, align 8
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.376, i64 0, i64 0), i8** %17, align 8
  store i1 false, i1* %retval, align 1
  br label %return

if.end12:                                         ; preds = %if.end
  %18 = load i8**, i8*** %s.addr, align 8
  %19 = load i8*, i8** %18, align 8
  %incdec.ptr13 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr13, i8** %18, align 8
  %20 = load i8*, i8** %e, align 8
  %21 = load i8**, i8*** %s.addr, align 8
  %22 = load i8*, i8** %21, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %20 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %22 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %numbers_len, align 8
  %23 = load i64, i64* %numbers_len, align 8
  %cmp14 = icmp eq i64 %23, 0
  br i1 %cmp14, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end12
  %24 = load i8**, i8*** %s.addr, align 8
  %25 = load i8*, i8** %24, align 8
  %incdec.ptr17 = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %incdec.ptr17, i8** %24, align 8
  %26 = load i8**, i8*** %error_msg.addr, align 8
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.377, i64 0, i64 0), i8** %26, align 8
  store i1 false, i1* %retval, align 1
  br label %return

if.end18:                                         ; preds = %if.end12
  %27 = load i8, i8* %silence_non_portable.addr, align 1
  %tobool19 = trunc i8 %27 to i1
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end18
  %28 = load i32, i32* %flags, align 4
  %or = or i32 %28, 8
  store i32 %or, i32* %flags, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %if.end18
  %29 = load i8**, i8*** %s.addr, align 8
  %30 = load i8*, i8** %29, align 8
  %call22 = call i64 @Perl_grok_oct(i8* %30, i64* %numbers_len, i32* %flags, double* null)
  %31 = load i64*, i64** %uv.addr, align 8
  store i64 %call22, i64* %31, align 8
  %32 = load i64, i64* %numbers_len, align 8
  %33 = load i8*, i8** %e, align 8
  %34 = load i8**, i8*** %s.addr, align 8
  %35 = load i8*, i8** %34, align 8
  %sub.ptr.lhs.cast23 = ptrtoint i8* %33 to i64
  %sub.ptr.rhs.cast24 = ptrtoint i8* %35 to i64
  %sub.ptr.sub25 = sub i64 %sub.ptr.lhs.cast23, %sub.ptr.rhs.cast24
  %cmp26 = icmp ne i64 %32, %sub.ptr.sub25
  br i1 %cmp26, label %if.then28, label %if.end43

if.then28:                                        ; preds = %if.end21
  %36 = load i8, i8* %strict.addr, align 1
  %tobool29 = trunc i8 %36 to i1
  br i1 %tobool29, label %if.then30, label %if.else

if.then30:                                        ; preds = %if.then28
  %37 = load i64, i64* %numbers_len, align 8
  %38 = load i8**, i8*** %s.addr, align 8
  %39 = load i8*, i8** %38, align 8
  %add.ptr = getelementptr inbounds i8, i8* %39, i64 %37
  store i8* %add.ptr, i8** %38, align 8
  %40 = load i8, i8* %UTF.addr, align 1
  %tobool31 = trunc i8 %40 to i1
  br i1 %tobool31, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then30
  %41 = load i8**, i8*** %s.addr, align 8
  %42 = load i8*, i8** %41, align 8
  %43 = load i8, i8* %42, align 1
  %idxprom = zext i8 %43 to i64
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %44 = load i8, i8* %arrayidx, align 1
  %conv33 = zext i8 %44 to i64
  br label %cond.end

cond.false:                                       ; preds = %if.then30
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond34 = phi i64 [ %conv33, %cond.true ], [ 1, %cond.false ]
  %45 = load i8**, i8*** %s.addr, align 8
  %46 = load i8*, i8** %45, align 8
  %add.ptr35 = getelementptr inbounds i8, i8* %46, i64 %cond34
  store i8* %add.ptr35, i8** %45, align 8
  %47 = load i8**, i8*** %error_msg.addr, align 8
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.378, i64 0, i64 0), i8** %47, align 8
  store i1 false, i1* %retval, align 1
  br label %return

if.else:                                          ; preds = %if.then28
  %48 = load i8, i8* %output_warning.addr, align 1
  %tobool36 = trunc i8 %48 to i1
  br i1 %tobool36, label %if.then37, label %if.end41

if.then37:                                        ; preds = %if.else
  %49 = load i8**, i8*** %s.addr, align 8
  %50 = load i8*, i8** %49, align 8
  %51 = load i64, i64* %numbers_len, align 8
  %add.ptr38 = getelementptr inbounds i8, i8* %50, i64 %51
  %52 = load i8, i8* %add.ptr38, align 1
  %conv39 = sext i8 %52 to i32
  %53 = load i64, i64* %numbers_len, align 8
  %conv40 = trunc i64 %53 to i32
  %54 = load i8**, i8*** %s.addr, align 8
  %55 = load i8*, i8** %54, align 8
  call void (i32, i8*, ...) @Perl_ck_warner(i32 31, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.379, i64 0, i64 0), i32 %conv39, i32 %conv40, i8* %55)
  br label %if.end41

if.end41:                                         ; preds = %if.then37, %if.else
  br label %if.end42

if.end42:                                         ; preds = %if.end41
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end21
  %56 = load i8*, i8** %e, align 8
  %add.ptr44 = getelementptr inbounds i8, i8* %56, i64 1
  %57 = load i8**, i8*** %s.addr, align 8
  store i8* %add.ptr44, i8** %57, align 8
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end43, %cond.end, %if.then16, %while.end, %if.then
  %58 = load i1, i1* %retval, align 1
  ret i1 %58
}

declare dso_local %struct.sv* @Perl__get_encoding() #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_grok_bslash_x(i8** %s, i64* %uv, i8** %error_msg, i1 zeroext %output_warning, i1 zeroext %strict, i1 zeroext %silence_non_portable, i1 zeroext %UTF) #0 {
entry:
  %retval = alloca i1, align 1
  %s.addr = alloca i8**, align 8
  %uv.addr = alloca i64*, align 8
  %error_msg.addr = alloca i8**, align 8
  %output_warning.addr = alloca i8, align 1
  %strict.addr = alloca i8, align 1
  %silence_non_portable.addr = alloca i8, align 1
  %UTF.addr = alloca i8, align 1
  %e = alloca i8*, align 8
  %numbers_len = alloca i64, align 8
  %flags = alloca i32, align 4
  %len = alloca i64, align 8
  store i8** %s, i8*** %s.addr, align 8
  store i64* %uv, i64** %uv.addr, align 8
  store i8** %error_msg, i8*** %error_msg.addr, align 8
  %frombool = zext i1 %output_warning to i8
  store i8 %frombool, i8* %output_warning.addr, align 1
  %frombool1 = zext i1 %strict to i8
  store i8 %frombool1, i8* %strict.addr, align 1
  %frombool2 = zext i1 %silence_non_portable to i8
  store i8 %frombool2, i8* %silence_non_portable.addr, align 1
  %frombool3 = zext i1 %UTF to i8
  store i8 %frombool3, i8* %UTF.addr, align 1
  store i32 2, i32* %flags, align 4
  %0 = load i8**, i8*** %s.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i32 1
  store i8* %incdec.ptr, i8** %0, align 8
  %2 = load i8, i8* %strict.addr, align 1
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i8, i8* %output_warning.addr, align 1
  %tobool4 = trunc i8 %3 to i1
  br i1 %tobool4, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i32, i32* %flags, align 4
  %or = or i32 %4, 4
  store i32 %or, i32* %flags, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %5 = load i8**, i8*** %s.addr, align 8
  %6 = load i8*, i8** %5, align 8
  %7 = load i8, i8* %6, align 1
  %conv = sext i8 %7 to i32
  %cmp = icmp ne i32 %conv, 123
  br i1 %cmp, label %if.then6, label %if.end25

if.then6:                                         ; preds = %if.end
  %8 = load i8, i8* %strict.addr, align 1
  %tobool7 = trunc i8 %8 to i1
  %9 = zext i1 %tobool7 to i64
  %cond = select i1 %tobool7, i32 3, i32 2
  %conv9 = sext i32 %cond to i64
  store i64 %conv9, i64* %len, align 8
  %10 = load i8**, i8*** %s.addr, align 8
  %11 = load i8*, i8** %10, align 8
  %call = call i64 @Perl_grok_hex(i8* %11, i64* %len, i32* %flags, double* null)
  %12 = load i64*, i64** %uv.addr, align 8
  store i64 %call, i64* %12, align 8
  %13 = load i64, i64* %len, align 8
  %14 = load i8**, i8*** %s.addr, align 8
  %15 = load i8*, i8** %14, align 8
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %13
  store i8* %add.ptr, i8** %14, align 8
  %16 = load i8, i8* %strict.addr, align 1
  %tobool10 = trunc i8 %16 to i1
  br i1 %tobool10, label %land.lhs.true, label %if.end24

land.lhs.true:                                    ; preds = %if.then6
  %17 = load i64, i64* %len, align 8
  %cmp12 = icmp ne i64 %17, 2
  br i1 %cmp12, label %if.then14, label %if.end24

if.then14:                                        ; preds = %land.lhs.true
  %18 = load i64, i64* %len, align 8
  %cmp15 = icmp ult i64 %18, 2
  br i1 %cmp15, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.then14
  %19 = load i8, i8* %UTF.addr, align 1
  %tobool18 = trunc i8 %19 to i1
  br i1 %tobool18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then17
  %20 = load i8**, i8*** %s.addr, align 8
  %21 = load i8*, i8** %20, align 8
  %22 = load i8, i8* %21, align 1
  %idxprom = zext i8 %22 to i64
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %23 = load i8, i8* %arrayidx, align 1
  %conv20 = zext i8 %23 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.then17
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond21 = phi i32 [ %conv20, %cond.true ], [ 1, %cond.false ]
  %24 = load i8**, i8*** %s.addr, align 8
  %25 = load i8*, i8** %24, align 8
  %idx.ext = sext i32 %cond21 to i64
  %add.ptr22 = getelementptr inbounds i8, i8* %25, i64 %idx.ext
  store i8* %add.ptr22, i8** %24, align 8
  %26 = load i8**, i8*** %error_msg.addr, align 8
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.380, i64 0, i64 0), i8** %26, align 8
  br label %if.end23

if.else:                                          ; preds = %if.then14
  %27 = load i8**, i8*** %error_msg.addr, align 8
  store i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.381, i64 0, i64 0), i8** %27, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.else, %cond.end
  store i1 false, i1* %retval, align 1
  br label %return

if.end24:                                         ; preds = %land.lhs.true, %if.then6
  br label %ok

if.end25:                                         ; preds = %if.end
  %28 = load i8**, i8*** %s.addr, align 8
  %29 = load i8*, i8** %28, align 8
  %call26 = call i8* @strchr(i8* %29, i32 125) #6
  store i8* %call26, i8** %e, align 8
  %30 = load i8*, i8** %e, align 8
  %tobool27 = icmp ne i8* %30, null
  br i1 %tobool27, label %if.end36, label %if.then28

if.then28:                                        ; preds = %if.end25
  %31 = load i8**, i8*** %s.addr, align 8
  %32 = load i8*, i8** %31, align 8
  %incdec.ptr29 = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %incdec.ptr29, i8** %31, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then28
  %33 = load i8**, i8*** %s.addr, align 8
  %34 = load i8*, i8** %33, align 8
  %35 = load i8, i8* %34, align 1
  %idxprom30 = zext i8 %35 to i64
  %arrayidx31 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom30
  %36 = load i32, i32* %arrayidx31, align 4
  %and = and i32 %36, 4096
  %tobool32 = icmp ne i32 %and, 0
  %37 = zext i1 %tobool32 to i64
  %cond33 = select i1 %tobool32, i32 1, i32 0
  %tobool34 = icmp ne i32 %cond33, 0
  br i1 %tobool34, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %38 = load i8**, i8*** %s.addr, align 8
  %39 = load i8*, i8** %38, align 8
  %incdec.ptr35 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %incdec.ptr35, i8** %38, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %40 = load i8**, i8*** %error_msg.addr, align 8
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.382, i64 0, i64 0), i8** %40, align 8
  store i1 false, i1* %retval, align 1
  br label %return

if.end36:                                         ; preds = %if.end25
  %41 = load i8**, i8*** %s.addr, align 8
  %42 = load i8*, i8** %41, align 8
  %incdec.ptr37 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr37, i8** %41, align 8
  %43 = load i8*, i8** %e, align 8
  %44 = load i8**, i8*** %s.addr, align 8
  %45 = load i8*, i8** %44, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %43 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %45 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %numbers_len, align 8
  %46 = load i64, i64* %numbers_len, align 8
  %cmp38 = icmp eq i64 %46, 0
  br i1 %cmp38, label %if.then40, label %if.end46

if.then40:                                        ; preds = %if.end36
  %47 = load i8, i8* %strict.addr, align 1
  %tobool41 = trunc i8 %47 to i1
  br i1 %tobool41, label %if.then42, label %if.end44

if.then42:                                        ; preds = %if.then40
  %48 = load i8**, i8*** %s.addr, align 8
  %49 = load i8*, i8** %48, align 8
  %incdec.ptr43 = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %incdec.ptr43, i8** %48, align 8
  %50 = load i8**, i8*** %error_msg.addr, align 8
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.377, i64 0, i64 0), i8** %50, align 8
  store i1 false, i1* %retval, align 1
  br label %return

if.end44:                                         ; preds = %if.then40
  %51 = load i8*, i8** %e, align 8
  %add.ptr45 = getelementptr inbounds i8, i8* %51, i64 1
  %52 = load i8**, i8*** %s.addr, align 8
  store i8* %add.ptr45, i8** %52, align 8
  %53 = load i64*, i64** %uv.addr, align 8
  store i64 0, i64* %53, align 8
  br label %ok

if.end46:                                         ; preds = %if.end36
  %54 = load i32, i32* %flags, align 4
  %or47 = or i32 %54, 1
  store i32 %or47, i32* %flags, align 4
  %55 = load i8, i8* %silence_non_portable.addr, align 1
  %tobool48 = trunc i8 %55 to i1
  br i1 %tobool48, label %if.then49, label %if.end51

if.then49:                                        ; preds = %if.end46
  %56 = load i32, i32* %flags, align 4
  %or50 = or i32 %56, 8
  store i32 %or50, i32* %flags, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.then49, %if.end46
  %57 = load i8**, i8*** %s.addr, align 8
  %58 = load i8*, i8** %57, align 8
  %call52 = call i64 @Perl_grok_hex(i8* %58, i64* %numbers_len, i32* %flags, double* null)
  %59 = load i64*, i64** %uv.addr, align 8
  store i64 %call52, i64* %59, align 8
  %60 = load i8, i8* %strict.addr, align 1
  %tobool53 = trunc i8 %60 to i1
  br i1 %tobool53, label %land.lhs.true55, label %if.end74

land.lhs.true55:                                  ; preds = %if.end51
  %61 = load i64, i64* %numbers_len, align 8
  %62 = load i8*, i8** %e, align 8
  %63 = load i8**, i8*** %s.addr, align 8
  %64 = load i8*, i8** %63, align 8
  %sub.ptr.lhs.cast56 = ptrtoint i8* %62 to i64
  %sub.ptr.rhs.cast57 = ptrtoint i8* %64 to i64
  %sub.ptr.sub58 = sub i64 %sub.ptr.lhs.cast56, %sub.ptr.rhs.cast57
  %cmp59 = icmp ne i64 %61, %sub.ptr.sub58
  br i1 %cmp59, label %if.then61, label %if.end74

if.then61:                                        ; preds = %land.lhs.true55
  %65 = load i64, i64* %numbers_len, align 8
  %66 = load i8**, i8*** %s.addr, align 8
  %67 = load i8*, i8** %66, align 8
  %add.ptr62 = getelementptr inbounds i8, i8* %67, i64 %65
  store i8* %add.ptr62, i8** %66, align 8
  %68 = load i8, i8* %UTF.addr, align 1
  %tobool63 = trunc i8 %68 to i1
  br i1 %tobool63, label %cond.true65, label %cond.false69

cond.true65:                                      ; preds = %if.then61
  %69 = load i8**, i8*** %s.addr, align 8
  %70 = load i8*, i8** %69, align 8
  %71 = load i8, i8* %70, align 1
  %idxprom66 = zext i8 %71 to i64
  %arrayidx67 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom66
  %72 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %72 to i32
  br label %cond.end70

cond.false69:                                     ; preds = %if.then61
  br label %cond.end70

cond.end70:                                       ; preds = %cond.false69, %cond.true65
  %cond71 = phi i32 [ %conv68, %cond.true65 ], [ 1, %cond.false69 ]
  %73 = load i8**, i8*** %s.addr, align 8
  %74 = load i8*, i8** %73, align 8
  %idx.ext72 = sext i32 %cond71 to i64
  %add.ptr73 = getelementptr inbounds i8, i8* %74, i64 %idx.ext72
  store i8* %add.ptr73, i8** %73, align 8
  %75 = load i8**, i8*** %error_msg.addr, align 8
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.380, i64 0, i64 0), i8** %75, align 8
  store i1 false, i1* %retval, align 1
  br label %return

if.end74:                                         ; preds = %land.lhs.true55, %if.end51
  %76 = load i8*, i8** %e, align 8
  %add.ptr75 = getelementptr inbounds i8, i8* %76, i64 1
  %77 = load i8**, i8*** %s.addr, align 8
  store i8* %add.ptr75, i8** %77, align 8
  br label %ok

ok:                                               ; preds = %if.end74, %if.end44, %if.end24
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %ok, %cond.end70, %if.then42, %while.end, %if.end23
  %78 = load i1, i1* %retval, align 1
  ret i1 %78
}

; Function Attrs: noinline nounwind uwtable
define internal signext i8 @S_grok_bslash_c(i8 signext %source, i1 zeroext %output_warning) #0 {
entry:
  %source.addr = alloca i8, align 1
  %output_warning.addr = alloca i8, align 1
  %result = alloca i8, align 1
  %control = alloca i8, align 1
  %clearer = alloca [3 x i8], align 1
  %i = alloca i8, align 1
  store i8 %source, i8* %source.addr, align 1
  %frombool = zext i1 %output_warning to i8
  store i8 %frombool, i8* %output_warning.addr, align 1
  %0 = load i8, i8* %source.addr, align 1
  %idxprom = zext i8 %0 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %1 = load i32, i32* %arrayidx, align 4
  %and = and i32 %1, 16448
  %cmp = icmp eq i32 %and, 16448
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.383, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.384, i64 0, i64 0))
  br label %if.end17

if.else:                                          ; preds = %entry
  %2 = load i8, i8* %source.addr, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 123
  br i1 %cmp1, label %if.then3, label %if.end16

if.then3:                                         ; preds = %if.else
  %3 = load i32, i32* getelementptr inbounds ([0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 123), align 4
  %and4 = and i32 %3, 16392
  %cmp5 = icmp eq i32 %and4, 16392
  %4 = zext i1 %cmp5 to i64
  %cond = select i1 %cmp5, i32 91, i32 123
  %xor = xor i32 %cond, 64
  %conv7 = trunc i32 %xor to i8
  store i8 %conv7, i8* %control, align 1
  %5 = load i8, i8* %control, align 1
  %idxprom8 = zext i8 %5 to i64
  %arrayidx9 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom8
  %6 = load i32, i32* %arrayidx9, align 4
  %and10 = and i32 %6, 16448
  %cmp11 = icmp eq i32 %and10, 16448
  br i1 %cmp11, label %if.then13, label %if.else15

if.then13:                                        ; preds = %if.then3
  %7 = load i8, i8* %control, align 1
  %conv14 = sext i8 %7 to i32
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.385, i64 0, i64 0), i32 %conv14)
  br label %if.end

if.else15:                                        ; preds = %if.then3
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.386, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then13
  br label %if.end16

if.end16:                                         ; preds = %if.end, %if.else
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.then
  %8 = load i8, i8* %source.addr, align 1
  %idxprom18 = zext i8 %8 to i64
  %arrayidx19 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom18
  %9 = load i32, i32* %arrayidx19, align 4
  %and20 = and i32 %9, 16392
  %cmp21 = icmp eq i32 %and20, 16392
  br i1 %cmp21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end17
  %10 = load i8, i8* %source.addr, align 1
  %conv23 = zext i8 %10 to i32
  %sub = sub nsw i32 %conv23, 32
  %conv24 = trunc i32 %sub to i8
  %conv25 = zext i8 %conv24 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end17
  %11 = load i8, i8* %source.addr, align 1
  %conv26 = zext i8 %11 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond27 = phi i32 [ %conv25, %cond.true ], [ %conv26, %cond.false ]
  %xor28 = xor i32 %cond27, 64
  %conv29 = trunc i32 %xor28 to i8
  store i8 %conv29, i8* %result, align 1
  %12 = load i8, i8* %output_warning.addr, align 1
  %tobool = trunc i8 %12 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end53

land.lhs.true:                                    ; preds = %cond.end
  %13 = load i8, i8* %result, align 1
  %idxprom31 = zext i8 %13 to i64
  %arrayidx32 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom31
  %14 = load i32, i32* %arrayidx32, align 4
  %and33 = and i32 %14, 16448
  %cmp34 = icmp eq i32 %and33, 16448
  br i1 %cmp34, label %if.then36, label %if.end53

if.then36:                                        ; preds = %land.lhs.true
  store i8 0, i8* %i, align 1
  %15 = load i8, i8* %result, align 1
  %idxprom37 = zext i8 %15 to i64
  %arrayidx38 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom37
  %16 = load i32, i32* %arrayidx38, align 4
  %and39 = and i32 %16, 16385
  %cmp40 = icmp eq i32 %and39, 16385
  br i1 %cmp40, label %if.end45, label %if.then42

if.then42:                                        ; preds = %if.then36
  %17 = load i8, i8* %i, align 1
  %inc = add i8 %17, 1
  store i8 %inc, i8* %i, align 1
  %idxprom43 = zext i8 %17 to i64
  %arrayidx44 = getelementptr inbounds [3 x i8], [3 x i8]* %clearer, i64 0, i64 %idxprom43
  store i8 92, i8* %arrayidx44, align 1
  br label %if.end45

if.end45:                                         ; preds = %if.then42, %if.then36
  %18 = load i8, i8* %result, align 1
  %19 = load i8, i8* %i, align 1
  %inc46 = add i8 %19, 1
  store i8 %inc46, i8* %i, align 1
  %idxprom47 = zext i8 %19 to i64
  %arrayidx48 = getelementptr inbounds [3 x i8], [3 x i8]* %clearer, i64 0, i64 %idxprom47
  store i8 %18, i8* %arrayidx48, align 1
  %20 = load i8, i8* %i, align 1
  %inc49 = add i8 %20, 1
  store i8 %inc49, i8* %i, align 1
  %idxprom50 = zext i8 %20 to i64
  %arrayidx51 = getelementptr inbounds [3 x i8], [3 x i8]* %clearer, i64 0, i64 %idxprom50
  store i8 0, i8* %arrayidx51, align 1
  %21 = load i8, i8* %source.addr, align 1
  %conv52 = sext i8 %21 to i32
  %arraydecay = getelementptr inbounds [3 x i8], [3 x i8]* %clearer, i64 0, i64 0
  call void (i32, i8*, ...) @Perl_ck_warner(i32 28, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.387, i64 0, i64 0), i32 %conv52, i8* %arraydecay)
  br label %if.end53

if.end53:                                         ; preds = %if.end45, %land.lhs.true, %cond.end
  %22 = load i8, i8* %result, align 1
  ret i8 %22
}

declare dso_local i64 @Perl_grok_oct(i8*, i64*, i32*, double*) #1

declare dso_local void @Perl_warner(i32, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @S_form_short_octal_warning(i8* %s, i64 %len) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %sans_leading_zeros = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load i8*, i8** %s.addr, align 8
  %1 = load i64, i64* %len.addr, align 8
  %idx.neg = sub i64 0, %1
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 %idx.neg
  store i8* %add.ptr, i8** %sans_leading_zeros, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %sans_leading_zeros, align 8
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp eq i32 %conv, 48
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %sans_leading_zeros, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %sans_leading_zeros, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i8*, i8** %sans_leading_zeros, align 8
  %6 = load i8*, i8** %s.addr, align 8
  %cmp2 = icmp eq i8* %5, %6
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %7 = load i8*, i8** %sans_leading_zeros, align 8
  %incdec.ptr4 = getelementptr inbounds i8, i8* %7, i32 -1
  store i8* %incdec.ptr4, i8** %sans_leading_zeros, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %8 = load i64, i64* %len.addr, align 8
  %add = add i64 %8, 2
  %conv5 = trunc i64 %add to i32
  %9 = load i8*, i8** %s.addr, align 8
  %10 = load i64, i64* %len.addr, align 8
  %idx.neg6 = sub i64 0, %10
  %add.ptr7 = getelementptr inbounds i8, i8* %9, i64 %idx.neg6
  %add.ptr8 = getelementptr inbounds i8, i8* %add.ptr7, i64 -1
  %11 = load i8*, i8** %s.addr, align 8
  %12 = load i8*, i8** %sans_leading_zeros, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %12 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv9 = trunc i64 %sub.ptr.sub to i32
  %13 = load i8*, i8** %sans_leading_zeros, align 8
  %14 = load i8*, i8** %s.addr, align 8
  %15 = load i8, i8* %14, align 1
  %conv10 = sext i8 %15 to i32
  %call = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.388, i64 0, i64 0), i32 %conv5, i8* %add.ptr8, i32 %conv9, i8* %13, i32 %conv10)
  ret i8* %call
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_reg_recode(i8 signext %value, %struct.sv** %encp) #0 {
entry:
  %value.addr = alloca i8, align 1
  %encp.addr = alloca %struct.sv**, align 8
  %numlen = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %s = alloca i8*, align 8
  %newlen = alloca i64, align 8
  %uv = alloca i64, align 8
  store i8 %value, i8* %value.addr, align 1
  store %struct.sv** %encp, %struct.sv*** %encp.addr, align 8
  store i64 1, i64* %numlen, align 8
  %0 = load i64, i64* %numlen, align 8
  %call = call %struct.sv* @Perl_newSVpvn_flags(i8* %value.addr, i64 %0, i32 524288)
  store %struct.sv* %call, %struct.sv** %sv, align 8
  %1 = load %struct.sv**, %struct.sv*** %encp.addr, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %tobool = icmp ne %struct.sv* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %sv, align 8
  %4 = load %struct.sv**, %struct.sv*** %encp.addr, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %call1 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %3, %struct.sv* %5)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %7 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call1, %cond.true ], [ %7, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any, align 8
  %10 = bitcast i8* %9 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 2
  %11 = load i64, i64* %xpv_cur, align 8
  store i64 %11, i64* %newlen, align 8
  store i64 65533, i64* %uv, align 8
  %12 = load i64, i64* %newlen, align 8
  %tobool2 = icmp ne i64 %12, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags, align 4
  %and = and i32 %14, 536870912
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %cond.true4, label %cond.false8

cond.true4:                                       ; preds = %if.then
  %15 = load i8*, i8** %s, align 8
  %16 = load i64, i64* %newlen, align 8
  %call5 = call zeroext i1 @Perl_ckwarn(i32 44)
  %17 = zext i1 %call5 to i64
  %cond6 = select i1 %call5, i32 0, i32 1
  %call7 = call i64 @Perl_utf8n_to_uvchr(i8* %15, i64 %16, i64* %numlen, i32 %cond6)
  br label %cond.end9

cond.false8:                                      ; preds = %if.then
  %18 = load i8*, i8** %s, align 8
  %19 = load i8, i8* %18, align 1
  %conv = zext i8 %19 to i64
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.true4
  %cond10 = phi i64 [ %call7, %cond.true4 ], [ %conv, %cond.false8 ]
  store i64 %cond10, i64* %uv, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end9, %cond.end
  %20 = load i64, i64* %newlen, align 8
  %tobool11 = icmp ne i64 %20, 0
  br i1 %tobool11, label %lor.lhs.false, label %if.then13

lor.lhs.false:                                    ; preds = %if.end
  %21 = load i64, i64* %numlen, align 8
  %22 = load i64, i64* %newlen, align 8
  %cmp = icmp ne i64 %21, %22
  br i1 %cmp, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false, %if.end
  store i64 65533, i64* %uv, align 8
  %23 = load %struct.sv**, %struct.sv*** %encp.addr, align 8
  store %struct.sv* null, %struct.sv** %23, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %lor.lhs.false
  %24 = load i64, i64* %uv, align 8
  ret i64 %24
}

declare dso_local i64 @Perl__to_uni_fold_flags(i64, i8*, i64*, i8 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S__invlist_contains_cp(%struct.sv* %invlist, i64 %cp) #0 {
entry:
  %invlist.addr = alloca %struct.sv*, align 8
  %cp.addr = alloca i64, align 8
  %index = alloca i64, align 8
  store %struct.sv* %invlist, %struct.sv** %invlist.addr, align 8
  store i64 %cp, i64* %cp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %invlist.addr, align 8
  %1 = load i64, i64* %cp.addr, align 8
  %call = call i64 @Perl__invlist_search(%struct.sv* %0, i64 %1)
  store i64 %call, i64* %index, align 8
  %2 = load i64, i64* %index, align 8
  %cmp = icmp sge i64 %2, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load i64, i64* %index, align 8
  %and = and i64 %3, 1
  %tobool = icmp ne i64 %and, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %4
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_alloc_maybe_populate_EXACT(%struct.RExC_state_t* %pRExC_state, %struct.regnode* %node, i32* %flagp, i64 %len, i64 %code_point, i1 zeroext %downgradable) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %node.addr = alloca %struct.regnode*, align 8
  %flagp.addr = alloca i32*, align 8
  %len.addr = alloca i64, align 8
  %code_point.addr = alloca i64, align 8
  %downgradable.addr = alloca i8, align 1
  %len_passed_in = alloca i8, align 1
  %character = alloca [14 x i8], align 1
  %folded = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store %struct.regnode* %node, %struct.regnode** %node.addr, align 8
  store i32* %flagp, i32** %flagp.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i64 %code_point, i64* %code_point.addr, align 8
  %frombool = zext i1 %downgradable to i8
  store i8 %frombool, i8* %downgradable.addr, align 1
  %0 = load i64, i64* %len.addr, align 8
  %cmp = icmp ne i64 %0, 0
  %1 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 1, i32 0
  %tobool = icmp ne i32 %cond, 0
  %frombool1 = zext i1 %tobool to i8
  store i8 %frombool1, i8* %len_passed_in, align 1
  %2 = load i8, i8* %downgradable.addr, align 1
  %tobool2 = trunc i8 %2 to i1
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %3, i32 0, i32 12
  %4 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 13
  %6 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp3 = icmp eq %struct.regnode* %4, %6
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %downgradable.addr, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load i8, i8* %len_passed_in, align 1
  %tobool4 = trunc i8 %7 to i1
  br i1 %tobool4, label %if.end247, label %if.then5

if.then5:                                         ; preds = %if.end
  %8 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %8, i32 0, i32 25
  %9 = load i32, i32* %utf8, align 8
  %tobool6 = icmp ne i32 %9, 0
  br i1 %tobool6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then5
  br i1 true, label %if.then7, label %if.else176

cond.false:                                       ; preds = %if.then5
  br i1 false, label %if.then7, label %if.else176

if.then7:                                         ; preds = %cond.false, %cond.true
  %10 = load i64, i64* %code_point.addr, align 8
  %cmp8 = icmp ult i64 %10, 128
  br i1 %cmp8, label %if.then9, label %if.else41

if.then9:                                         ; preds = %if.then7
  %11 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %11, i32 0, i32 0
  %12 = load i32, i32* %flags, align 8
  %call = call i32 @get_regex_charset(i32 %12)
  %cmp10 = icmp eq i32 %call, 1
  br i1 %cmp10, label %if.then15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then9
  %13 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags11 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %13, i32 0, i32 0
  %14 = load i32, i32* %flags11, align 8
  %and = and i32 %14, 4
  %tobool12 = icmp ne i32 %and, 0
  br i1 %tobool12, label %cond.true13, label %cond.false14

cond.true13:                                      ; preds = %lor.lhs.false
  br i1 true, label %if.else, label %if.then15

cond.false14:                                     ; preds = %lor.lhs.false
  br i1 false, label %if.else, label %if.then15

if.then15:                                        ; preds = %cond.false14, %cond.true13, %if.then9
  %15 = load i64, i64* %code_point.addr, align 8
  %conv = trunc i64 %15 to i8
  %arraydecay = getelementptr inbounds [14 x i8], [14 x i8]* %character, i64 0, i64 0
  store i8 %conv, i8* %arraydecay, align 1
  br label %if.end40

if.else:                                          ; preds = %cond.false14, %cond.true13
  %16 = load i64, i64* %code_point.addr, align 8
  %conv16 = trunc i64 %16 to i8
  %idxprom = zext i8 %conv16 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %17 = load i32, i32* %arrayidx, align 4
  %and17 = and i32 %17, 16400
  %cmp18 = icmp eq i32 %and17, 16400
  br i1 %cmp18, label %cond.true20, label %cond.false25

cond.true20:                                      ; preds = %if.else
  %18 = load i64, i64* %code_point.addr, align 8
  %conv21 = trunc i64 %18 to i8
  %conv22 = zext i8 %conv21 to i32
  %add = add nsw i32 %conv22, 32
  %conv23 = trunc i32 %add to i8
  %conv24 = zext i8 %conv23 to i32
  br label %cond.end

cond.false25:                                     ; preds = %if.else
  %19 = load i64, i64* %code_point.addr, align 8
  %conv26 = trunc i64 %19 to i8
  %conv27 = zext i8 %conv26 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false25, %cond.true20
  %cond28 = phi i32 [ %conv24, %cond.true20 ], [ %conv27, %cond.false25 ]
  %conv29 = trunc i32 %cond28 to i8
  %arraydecay30 = getelementptr inbounds [14 x i8], [14 x i8]* %character, i64 0, i64 0
  store i8 %conv29, i8* %arraydecay30, align 1
  %20 = load i8, i8* %downgradable.addr, align 1
  %tobool31 = trunc i8 %20 to i1
  br i1 %tobool31, label %land.lhs.true33, label %if.end39

land.lhs.true33:                                  ; preds = %cond.end
  %21 = load i64, i64* %code_point.addr, align 8
  %arrayidx34 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_fold, i64 0, i64 %21
  %22 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %22 to i64
  %23 = load i64, i64* %code_point.addr, align 8
  %cmp36 = icmp eq i64 %conv35, %23
  br i1 %cmp36, label %if.then38, label %if.end39

if.then38:                                        ; preds = %land.lhs.true33
  %24 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %type = getelementptr inbounds %struct.regnode, %struct.regnode* %24, i32 0, i32 1
  store i8 31, i8* %type, align 1
  br label %if.end39

if.end39:                                         ; preds = %if.then38, %land.lhs.true33, %cond.end
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then15
  store i64 1, i64* %len.addr, align 8
  br label %if.end175

if.else41:                                        ; preds = %if.then7
  %25 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags42 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %25, i32 0, i32 0
  %26 = load i32, i32* %flags42, align 8
  %and43 = and i32 %26, 4
  %tobool44 = icmp ne i32 %and43, 0
  br i1 %tobool44, label %cond.true45, label %cond.false46

cond.true45:                                      ; preds = %if.else41
  br i1 true, label %land.lhs.true47, label %if.else155

cond.false46:                                     ; preds = %if.else41
  br i1 false, label %land.lhs.true47, label %if.else155

land.lhs.true47:                                  ; preds = %cond.false46, %cond.true45
  %27 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags48 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %27, i32 0, i32 0
  %28 = load i32, i32* %flags48, align 8
  %call49 = call i32 @get_regex_charset(i32 %28)
  %cmp50 = icmp eq i32 %call49, 1
  br i1 %cmp50, label %lor.lhs.false52, label %if.then130

lor.lhs.false52:                                  ; preds = %land.lhs.true47
  %29 = load i64, i64* %code_point.addr, align 8
  %cmp53 = icmp ule i64 %29, 255
  br i1 %cmp53, label %if.else155, label %lor.lhs.false55

lor.lhs.false55:                                  ; preds = %lor.lhs.false52
  %30 = load i64, i64* %code_point.addr, align 8
  %cmp56 = icmp ult i64 255, %30
  br i1 %cmp56, label %land.lhs.true58, label %if.then130

land.lhs.true58:                                  ; preds = %lor.lhs.false55
  %31 = load i64, i64* %code_point.addr, align 8
  %cmp59 = icmp eq i64 304, %31
  br i1 %cmp59, label %if.else155, label %lor.lhs.false61

lor.lhs.false61:                                  ; preds = %land.lhs.true58
  %32 = load i64, i64* %code_point.addr, align 8
  %cmp62 = icmp ult i64 304, %32
  br i1 %cmp62, label %land.lhs.true64, label %if.then130

land.lhs.true64:                                  ; preds = %lor.lhs.false61
  %33 = load i64, i64* %code_point.addr, align 8
  %cmp65 = icmp eq i64 329, %33
  br i1 %cmp65, label %if.else155, label %lor.lhs.false67

lor.lhs.false67:                                  ; preds = %land.lhs.true64
  %34 = load i64, i64* %code_point.addr, align 8
  %cmp68 = icmp ult i64 329, %34
  br i1 %cmp68, label %land.lhs.true70, label %if.then130

land.lhs.true70:                                  ; preds = %lor.lhs.false67
  %35 = load i64, i64* %code_point.addr, align 8
  %cmp71 = icmp eq i64 376, %35
  br i1 %cmp71, label %if.else155, label %lor.lhs.false73

lor.lhs.false73:                                  ; preds = %land.lhs.true70
  %36 = load i64, i64* %code_point.addr, align 8
  %cmp74 = icmp ult i64 376, %36
  br i1 %cmp74, label %land.lhs.true76, label %if.then130

land.lhs.true76:                                  ; preds = %lor.lhs.false73
  %37 = load i64, i64* %code_point.addr, align 8
  %cmp77 = icmp eq i64 383, %37
  br i1 %cmp77, label %if.else155, label %lor.lhs.false79

lor.lhs.false79:                                  ; preds = %land.lhs.true76
  %38 = load i64, i64* %code_point.addr, align 8
  %cmp80 = icmp ult i64 383, %38
  br i1 %cmp80, label %land.lhs.true82, label %if.then130

land.lhs.true82:                                  ; preds = %lor.lhs.false79
  %39 = load i64, i64* %code_point.addr, align 8
  %cmp83 = icmp eq i64 496, %39
  br i1 %cmp83, label %if.else155, label %lor.lhs.false85

lor.lhs.false85:                                  ; preds = %land.lhs.true82
  %40 = load i64, i64* %code_point.addr, align 8
  %cmp86 = icmp ult i64 496, %40
  br i1 %cmp86, label %land.lhs.true88, label %if.then130

land.lhs.true88:                                  ; preds = %lor.lhs.false85
  %41 = load i64, i64* %code_point.addr, align 8
  %cmp89 = icmp eq i64 924, %41
  br i1 %cmp89, label %if.else155, label %lor.lhs.false91

lor.lhs.false91:                                  ; preds = %land.lhs.true88
  %42 = load i64, i64* %code_point.addr, align 8
  %cmp92 = icmp ult i64 924, %42
  br i1 %cmp92, label %land.lhs.true94, label %if.then130

land.lhs.true94:                                  ; preds = %lor.lhs.false91
  %43 = load i64, i64* %code_point.addr, align 8
  %cmp95 = icmp eq i64 956, %43
  br i1 %cmp95, label %if.else155, label %lor.lhs.false97

lor.lhs.false97:                                  ; preds = %land.lhs.true94
  %44 = load i64, i64* %code_point.addr, align 8
  %cmp98 = icmp ult i64 956, %44
  br i1 %cmp98, label %land.lhs.true100, label %if.then130

land.lhs.true100:                                 ; preds = %lor.lhs.false97
  %45 = load i64, i64* %code_point.addr, align 8
  %cmp101 = icmp ule i64 7830, %45
  br i1 %cmp101, label %land.lhs.true103, label %lor.lhs.false106

land.lhs.true103:                                 ; preds = %land.lhs.true100
  %46 = load i64, i64* %code_point.addr, align 8
  %cmp104 = icmp ule i64 %46, 7834
  br i1 %cmp104, label %if.else155, label %lor.lhs.false106

lor.lhs.false106:                                 ; preds = %land.lhs.true103, %land.lhs.true100
  %47 = load i64, i64* %code_point.addr, align 8
  %cmp107 = icmp ult i64 7834, %47
  br i1 %cmp107, label %land.lhs.true109, label %if.then130

land.lhs.true109:                                 ; preds = %lor.lhs.false106
  %48 = load i64, i64* %code_point.addr, align 8
  %cmp110 = icmp eq i64 7838, %48
  br i1 %cmp110, label %if.else155, label %lor.lhs.false112

lor.lhs.false112:                                 ; preds = %land.lhs.true109
  %49 = load i64, i64* %code_point.addr, align 8
  %cmp113 = icmp ult i64 7838, %49
  br i1 %cmp113, label %land.lhs.true115, label %if.then130

land.lhs.true115:                                 ; preds = %lor.lhs.false112
  %50 = load i64, i64* %code_point.addr, align 8
  %cmp116 = icmp eq i64 8490, %50
  br i1 %cmp116, label %if.else155, label %lor.lhs.false118

lor.lhs.false118:                                 ; preds = %land.lhs.true115
  %51 = load i64, i64* %code_point.addr, align 8
  %cmp119 = icmp ult i64 8490, %51
  br i1 %cmp119, label %land.lhs.true121, label %if.then130

land.lhs.true121:                                 ; preds = %lor.lhs.false118
  %52 = load i64, i64* %code_point.addr, align 8
  %cmp122 = icmp eq i64 8491, %52
  br i1 %cmp122, label %if.else155, label %lor.lhs.false124

lor.lhs.false124:                                 ; preds = %land.lhs.true121
  %53 = load i64, i64* %code_point.addr, align 8
  %cmp125 = icmp ule i64 64256, %53
  br i1 %cmp125, label %land.lhs.true127, label %if.then130

land.lhs.true127:                                 ; preds = %lor.lhs.false124
  %54 = load i64, i64* %code_point.addr, align 8
  %cmp128 = icmp ule i64 %54, 64262
  br i1 %cmp128, label %if.else155, label %if.then130

if.then130:                                       ; preds = %land.lhs.true127, %lor.lhs.false124, %lor.lhs.false118, %lor.lhs.false112, %lor.lhs.false106, %lor.lhs.false97, %lor.lhs.false91, %lor.lhs.false85, %lor.lhs.false79, %lor.lhs.false73, %lor.lhs.false67, %lor.lhs.false61, %lor.lhs.false55, %land.lhs.true47
  %55 = load i64, i64* %code_point.addr, align 8
  %arraydecay131 = getelementptr inbounds [14 x i8], [14 x i8]* %character, i64 0, i64 0
  %56 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags132 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %56, i32 0, i32 0
  %57 = load i32, i32* %flags132, align 8
  %call133 = call i32 @get_regex_charset(i32 %57)
  %cmp134 = icmp eq i32 %call133, 4
  %58 = zext i1 %cmp134 to i64
  %cond136 = select i1 %cmp134, i32 4, i32 0
  %or = or i32 2, %cond136
  %conv137 = trunc i32 %or to i8
  %call138 = call i64 @Perl__to_uni_fold_flags(i64 %55, i8* %arraydecay131, i64* %len.addr, i8 zeroext %conv137)
  store i64 %call138, i64* %folded, align 8
  %59 = load i8, i8* %downgradable.addr, align 1
  %tobool139 = trunc i8 %59 to i1
  br i1 %tobool139, label %land.lhs.true141, label %if.end154

land.lhs.true141:                                 ; preds = %if.then130
  %60 = load i64, i64* %folded, align 8
  %61 = load i64, i64* %code_point.addr, align 8
  %cmp142 = icmp eq i64 %60, %61
  br i1 %cmp142, label %land.lhs.true144, label %if.end154

land.lhs.true144:                                 ; preds = %land.lhs.true141
  %62 = load %struct.sv*, %struct.sv** @PL_utf8_foldable, align 8
  %63 = load i64, i64* %code_point.addr, align 8
  %call145 = call zeroext i1 @S__invlist_contains_cp(%struct.sv* %62, i64 %63)
  br i1 %call145, label %if.end154, label %if.then146

if.then146:                                       ; preds = %land.lhs.true144
  %64 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags147 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %64, i32 0, i32 0
  %65 = load i32, i32* %flags147, align 8
  %call148 = call i32 @get_regex_charset(i32 %65)
  %cmp149 = icmp eq i32 %call148, 1
  %66 = zext i1 %cmp149 to i64
  %cond151 = select i1 %cmp149, i32 32, i32 31
  %conv152 = trunc i32 %cond151 to i8
  %67 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %type153 = getelementptr inbounds %struct.regnode, %struct.regnode* %67, i32 0, i32 1
  store i8 %conv152, i8* %type153, align 1
  br label %if.end154

if.end154:                                        ; preds = %if.then146, %land.lhs.true144, %land.lhs.true141, %if.then130
  br label %if.end174

if.else155:                                       ; preds = %land.lhs.true127, %land.lhs.true121, %land.lhs.true115, %land.lhs.true109, %land.lhs.true103, %land.lhs.true94, %land.lhs.true88, %land.lhs.true82, %land.lhs.true76, %land.lhs.true70, %land.lhs.true64, %land.lhs.true58, %lor.lhs.false52, %cond.false46, %cond.true45
  %68 = load i64, i64* %code_point.addr, align 8
  %cmp156 = icmp ule i64 %68, 2047
  br i1 %cmp156, label %if.then158, label %if.else166

if.then158:                                       ; preds = %if.else155
  %69 = load i64, i64* %code_point.addr, align 8
  %shr = lshr i64 %69, 6
  %or159 = or i64 %shr, 192
  %conv160 = trunc i64 %or159 to i8
  %arraydecay161 = getelementptr inbounds [14 x i8], [14 x i8]* %character, i64 0, i64 0
  store i8 %conv160, i8* %arraydecay161, align 1
  %70 = load i64, i64* %code_point.addr, align 8
  %and162 = and i64 %70, 63
  %or163 = or i64 %and162, 128
  %conv164 = trunc i64 %or163 to i8
  %arraydecay165 = getelementptr inbounds [14 x i8], [14 x i8]* %character, i64 0, i64 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay165, i64 1
  store i8 %conv164, i8* %add.ptr, align 1
  store i64 2, i64* %len.addr, align 8
  br label %if.end173

if.else166:                                       ; preds = %if.else155
  %arraydecay167 = getelementptr inbounds [14 x i8], [14 x i8]* %character, i64 0, i64 0
  %71 = load i64, i64* %code_point.addr, align 8
  %call168 = call i8* @Perl_uvoffuni_to_utf8_flags(i8* %arraydecay167, i64 %71, i64 0)
  %arraydecay169 = getelementptr inbounds [14 x i8], [14 x i8]* %character, i64 0, i64 0
  %72 = load i8, i8* %arraydecay169, align 1
  %idxprom170 = zext i8 %72 to i64
  %arrayidx171 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom170
  %73 = load i8, i8* %arrayidx171, align 1
  %conv172 = zext i8 %73 to i64
  store i64 %conv172, i64* %len.addr, align 8
  br label %if.end173

if.end173:                                        ; preds = %if.else166, %if.then158
  br label %if.end174

if.end174:                                        ; preds = %if.end173, %if.end154
  br label %if.end175

if.end175:                                        ; preds = %if.end174, %if.end40
  br label %if.end246

if.else176:                                       ; preds = %cond.false, %cond.true
  %74 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags177 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %74, i32 0, i32 0
  %75 = load i32, i32* %flags177, align 8
  %and178 = and i32 %75, 4
  %tobool179 = icmp ne i32 %and178, 0
  br i1 %tobool179, label %cond.true180, label %cond.false181

cond.true180:                                     ; preds = %if.else176
  br i1 true, label %if.else185, label %if.then182

cond.false181:                                    ; preds = %if.else176
  br i1 false, label %if.else185, label %if.then182

if.then182:                                       ; preds = %cond.false181, %cond.true180
  %76 = load i64, i64* %code_point.addr, align 8
  %conv183 = trunc i64 %76 to i8
  %arraydecay184 = getelementptr inbounds [14 x i8], [14 x i8]* %character, i64 0, i64 0
  store i8 %conv183, i8* %arraydecay184, align 1
  store i64 1, i64* %len.addr, align 8
  br label %if.end245

if.else185:                                       ; preds = %cond.false181, %cond.true180
  %77 = load i64, i64* %code_point.addr, align 8
  %cmp186 = icmp ne i64 %77, 223
  br i1 %cmp186, label %cond.true188, label %cond.false189

cond.true188:                                     ; preds = %if.else185
  br i1 true, label %if.then190, label %if.else227

cond.false189:                                    ; preds = %if.else185
  br i1 false, label %if.then190, label %if.else227

if.then190:                                       ; preds = %cond.false189, %cond.true188
  %78 = load i64, i64* %code_point.addr, align 8
  %conv191 = trunc i64 %78 to i8
  %arraydecay192 = getelementptr inbounds [14 x i8], [14 x i8]* %character, i64 0, i64 0
  store i8 %conv191, i8* %arraydecay192, align 1
  store i64 1, i64* %len.addr, align 8
  %79 = load i8, i8* %downgradable.addr, align 1
  %tobool193 = trunc i8 %79 to i1
  br i1 %tobool193, label %land.lhs.true195, label %if.end226

land.lhs.true195:                                 ; preds = %if.then190
  %80 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags196 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %80, i32 0, i32 0
  %81 = load i32, i32* %flags196, align 8
  %call197 = call i32 @get_regex_charset(i32 %81)
  %cmp198 = icmp eq i32 %call197, 1
  br i1 %cmp198, label %if.end226, label %land.lhs.true200

land.lhs.true200:                                 ; preds = %land.lhs.true195
  %82 = load i64, i64* %code_point.addr, align 8
  %arrayidx201 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_fold_latin1, i64 0, i64 %82
  %83 = load i8, i8* %arrayidx201, align 1
  %conv202 = zext i8 %83 to i64
  %84 = load i64, i64* %code_point.addr, align 8
  %cmp203 = icmp eq i64 %conv202, %84
  br i1 %cmp203, label %land.lhs.true205, label %if.end226

land.lhs.true205:                                 ; preds = %land.lhs.true200
  %85 = load i64, i64* %code_point.addr, align 8
  %and206 = and i64 %85, -256
  %tobool207 = icmp ne i64 %and206, 0
  br i1 %tobool207, label %cond.false209, label %cond.true208

cond.true208:                                     ; preds = %land.lhs.true205
  br i1 true, label %lor.lhs.false210, label %lor.lhs.false216

cond.false209:                                    ; preds = %land.lhs.true205
  br i1 false, label %lor.lhs.false210, label %lor.lhs.false216

lor.lhs.false210:                                 ; preds = %cond.false209, %cond.true208
  %86 = load i64, i64* %code_point.addr, align 8
  %conv211 = trunc i64 %86 to i8
  %idxprom212 = zext i8 %conv211 to i64
  %arrayidx213 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom212
  %87 = load i32, i32* %arrayidx213, align 4
  %and214 = and i32 %87, 262144
  %tobool215 = icmp ne i32 %and214, 0
  br i1 %tobool215, label %lor.lhs.false216, label %if.then224

lor.lhs.false216:                                 ; preds = %lor.lhs.false210, %cond.false209, %cond.true208
  %88 = load i64, i64* %code_point.addr, align 8
  %cmp217 = icmp ult i64 %88, 128
  br i1 %cmp217, label %land.lhs.true219, label %if.end226

land.lhs.true219:                                 ; preds = %lor.lhs.false216
  %89 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags220 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %89, i32 0, i32 0
  %90 = load i32, i32* %flags220, align 8
  %call221 = call i32 @get_regex_charset(i32 %90)
  %cmp222 = icmp eq i32 %call221, 4
  br i1 %cmp222, label %if.then224, label %if.end226

if.then224:                                       ; preds = %land.lhs.true219, %lor.lhs.false210
  %91 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %type225 = getelementptr inbounds %struct.regnode, %struct.regnode* %91, i32 0, i32 1
  store i8 31, i8* %type225, align 1
  br label %if.end226

if.end226:                                        ; preds = %if.then224, %land.lhs.true219, %lor.lhs.false216, %land.lhs.true200, %land.lhs.true195, %if.then190
  br label %if.end244

if.else227:                                       ; preds = %cond.false189, %cond.true188
  %92 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags228 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %92, i32 0, i32 0
  %93 = load i32, i32* %flags228, align 8
  %call229 = call i32 @get_regex_charset(i32 %93)
  %cmp230 = icmp uge i32 %call229, 2
  br i1 %cmp230, label %land.lhs.true232, label %if.else241

land.lhs.true232:                                 ; preds = %if.else227
  %94 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags233 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %94, i32 0, i32 0
  %95 = load i32, i32* %flags233, align 8
  %call234 = call i32 @get_regex_charset(i32 %95)
  %cmp235 = icmp eq i32 %call234, 4
  br i1 %cmp235, label %if.else241, label %if.then237

if.then237:                                       ; preds = %land.lhs.true232
  %arraydecay238 = getelementptr inbounds [14 x i8], [14 x i8]* %character, i64 0, i64 0
  store i8 115, i8* %arraydecay238, align 1
  %arraydecay239 = getelementptr inbounds [14 x i8], [14 x i8]* %character, i64 0, i64 0
  %add.ptr240 = getelementptr inbounds i8, i8* %arraydecay239, i64 1
  store i8 115, i8* %add.ptr240, align 1
  store i64 2, i64* %len.addr, align 8
  br label %if.end243

if.else241:                                       ; preds = %land.lhs.true232, %if.else227
  %arraydecay242 = getelementptr inbounds [14 x i8], [14 x i8]* %character, i64 0, i64 0
  store i8 -33, i8* %arraydecay242, align 1
  store i64 1, i64* %len.addr, align 8
  br label %if.end243

if.end243:                                        ; preds = %if.else241, %if.then237
  br label %if.end244

if.end244:                                        ; preds = %if.end243, %if.end226
  br label %if.end245

if.end245:                                        ; preds = %if.end244, %if.then182
  br label %if.end246

if.end246:                                        ; preds = %if.end245, %if.end175
  br label %if.end247

if.end247:                                        ; preds = %if.end246, %if.end
  %96 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit248 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %96, i32 0, i32 12
  %97 = load %struct.regnode*, %struct.regnode** %emit248, align 8
  %98 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy249 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %98, i32 0, i32 13
  %99 = bitcast %struct.regnode_ssc* %emit_dummy249 to %struct.regnode*
  %cmp250 = icmp eq %struct.regnode* %97, %99
  br i1 %cmp250, label %if.then252, label %if.else255

if.then252:                                       ; preds = %if.end247
  %100 = load i64, i64* %len.addr, align 8
  %add253 = add i64 %100, 4
  %sub = sub i64 %add253, 1
  %div = udiv i64 %sub, 4
  %101 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %size = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %101, i32 0, i32 17
  %102 = load i64, i64* %size, align 8
  %add254 = add i64 %102, %div
  store i64 %add254, i64* %size, align 8
  br label %if.end267

if.else255:                                       ; preds = %if.end247
  %103 = load i64, i64* %len.addr, align 8
  %add256 = add i64 %103, 4
  %sub257 = sub i64 %add256, 1
  %div258 = udiv i64 %sub257, 4
  %104 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit259 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %104, i32 0, i32 12
  %105 = load %struct.regnode*, %struct.regnode** %emit259, align 8
  %add.ptr260 = getelementptr inbounds %struct.regnode, %struct.regnode* %105, i64 %div258
  store %struct.regnode* %add.ptr260, %struct.regnode** %emit259, align 8
  %106 = load i64, i64* %len.addr, align 8
  %conv261 = trunc i64 %106 to i8
  %107 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %108 = bitcast %struct.regnode* %107 to %struct.regnode_string*
  %str_len = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %108, i32 0, i32 0
  store i8 %conv261, i8* %str_len, align 2
  %109 = load i8, i8* %len_passed_in, align 1
  %tobool262 = trunc i8 %109 to i1
  br i1 %tobool262, label %if.end266, label %if.then263

if.then263:                                       ; preds = %if.else255
  %110 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %111 = bitcast %struct.regnode* %110 to %struct.regnode_string*
  %string = getelementptr inbounds %struct.regnode_string, %struct.regnode_string* %111, i32 0, i32 3
  %arraydecay264 = getelementptr inbounds [1 x i8], [1 x i8]* %string, i64 0, i64 0
  %arraydecay265 = getelementptr inbounds [14 x i8], [14 x i8]* %character, i64 0, i64 0
  %112 = load i64, i64* %len.addr, align 8
  %mul = mul i64 %112, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %arraydecay264, i8* align 1 %arraydecay265, i64 %mul, i1 false)
  br label %if.end266

if.end266:                                        ; preds = %if.then263, %if.else255
  br label %if.end267

if.end267:                                        ; preds = %if.end266, %if.then252
  %113 = load i32*, i32** %flagp.addr, align 8
  %114 = load i32, i32* %113, align 4
  %or268 = or i32 %114, 1
  store i32 %or268, i32* %113, align 4
  %115 = load i64, i64* %len.addr, align 8
  %cmp269 = icmp eq i64 %115, 1
  br i1 %cmp269, label %land.lhs.true319, label %lor.lhs.false271

lor.lhs.false271:                                 ; preds = %if.end267
  %116 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8272 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %116, i32 0, i32 25
  %117 = load i32, i32* %utf8272, align 8
  %tobool273 = icmp ne i32 %117, 0
  br i1 %tobool273, label %cond.true274, label %cond.false275

cond.true274:                                     ; preds = %lor.lhs.false271
  br i1 true, label %land.lhs.true276, label %if.end335

cond.false275:                                    ; preds = %lor.lhs.false271
  br i1 false, label %land.lhs.true276, label %if.end335

land.lhs.true276:                                 ; preds = %cond.false275, %cond.true274
  %118 = load i64, i64* %len.addr, align 8
  %119 = load i64, i64* %code_point.addr, align 8
  %cmp277 = icmp ult i64 %119, 128
  br i1 %cmp277, label %cond.true279, label %cond.false280

cond.true279:                                     ; preds = %land.lhs.true276
  br label %cond.end314

cond.false280:                                    ; preds = %land.lhs.true276
  %120 = load i64, i64* %code_point.addr, align 8
  %cmp281 = icmp ult i64 %120, 2048
  br i1 %cmp281, label %cond.true283, label %cond.false284

cond.true283:                                     ; preds = %cond.false280
  br label %cond.end312

cond.false284:                                    ; preds = %cond.false280
  %121 = load i64, i64* %code_point.addr, align 8
  %cmp285 = icmp ult i64 %121, 65536
  br i1 %cmp285, label %cond.true287, label %cond.false288

cond.true287:                                     ; preds = %cond.false284
  br label %cond.end310

cond.false288:                                    ; preds = %cond.false284
  %122 = load i64, i64* %code_point.addr, align 8
  %cmp289 = icmp ult i64 %122, 2097152
  br i1 %cmp289, label %cond.true291, label %cond.false292

cond.true291:                                     ; preds = %cond.false288
  br label %cond.end308

cond.false292:                                    ; preds = %cond.false288
  %123 = load i64, i64* %code_point.addr, align 8
  %cmp293 = icmp ult i64 %123, 67108864
  br i1 %cmp293, label %cond.true295, label %cond.false296

cond.true295:                                     ; preds = %cond.false292
  br label %cond.end306

cond.false296:                                    ; preds = %cond.false292
  %124 = load i64, i64* %code_point.addr, align 8
  %cmp297 = icmp ult i64 %124, 2147483648
  br i1 %cmp297, label %cond.true299, label %cond.false300

cond.true299:                                     ; preds = %cond.false296
  br label %cond.end304

cond.false300:                                    ; preds = %cond.false296
  %125 = load i64, i64* %code_point.addr, align 8
  %cmp301 = icmp ult i64 %125, 68719476736
  %126 = zext i1 %cmp301 to i64
  %cond303 = select i1 %cmp301, i32 7, i32 13
  br label %cond.end304

cond.end304:                                      ; preds = %cond.false300, %cond.true299
  %cond305 = phi i32 [ 6, %cond.true299 ], [ %cond303, %cond.false300 ]
  br label %cond.end306

cond.end306:                                      ; preds = %cond.end304, %cond.true295
  %cond307 = phi i32 [ 5, %cond.true295 ], [ %cond305, %cond.end304 ]
  br label %cond.end308

cond.end308:                                      ; preds = %cond.end306, %cond.true291
  %cond309 = phi i32 [ 4, %cond.true291 ], [ %cond307, %cond.end306 ]
  br label %cond.end310

cond.end310:                                      ; preds = %cond.end308, %cond.true287
  %cond311 = phi i32 [ 3, %cond.true287 ], [ %cond309, %cond.end308 ]
  br label %cond.end312

cond.end312:                                      ; preds = %cond.end310, %cond.true283
  %cond313 = phi i32 [ 2, %cond.true283 ], [ %cond311, %cond.end310 ]
  br label %cond.end314

cond.end314:                                      ; preds = %cond.end312, %cond.true279
  %cond315 = phi i32 [ 1, %cond.true279 ], [ %cond313, %cond.end312 ]
  %conv316 = sext i32 %cond315 to i64
  %cmp317 = icmp eq i64 %118, %conv316
  br i1 %cmp317, label %land.lhs.true319, label %if.end335

land.lhs.true319:                                 ; preds = %cond.end314, %if.end267
  %127 = load i64, i64* %code_point.addr, align 8
  %cmp320 = icmp ne i64 %127, 223
  br i1 %cmp320, label %if.then333, label %lor.lhs.false322

lor.lhs.false322:                                 ; preds = %land.lhs.true319
  %128 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags323 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %128, i32 0, i32 0
  %129 = load i32, i32* %flags323, align 8
  %and324 = and i32 %129, 4
  %tobool325 = icmp ne i32 %and324, 0
  br i1 %tobool325, label %cond.true326, label %cond.false327

cond.true326:                                     ; preds = %lor.lhs.false322
  br i1 true, label %lor.lhs.false328, label %if.then333

cond.false327:                                    ; preds = %lor.lhs.false322
  br i1 false, label %lor.lhs.false328, label %if.then333

lor.lhs.false328:                                 ; preds = %cond.false327, %cond.true326
  %130 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags329 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %130, i32 0, i32 0
  %131 = load i32, i32* %flags329, align 8
  %call330 = call i32 @get_regex_charset(i32 %131)
  %cmp331 = icmp eq i32 %call330, 0
  br i1 %cmp331, label %if.end335, label %if.then333

if.then333:                                       ; preds = %lor.lhs.false328, %cond.false327, %cond.true326, %land.lhs.true319
  %132 = load i32*, i32** %flagp.addr, align 8
  %133 = load i32, i32* %132, align 4
  %or334 = or i32 %133, 2
  store i32 %or334, i32* %132, align 4
  br label %if.end335

if.end335:                                        ; preds = %if.then333, %lor.lhs.false328, %cond.end314, %cond.false275, %cond.true274
  %134 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit336 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %134, i32 0, i32 12
  %135 = load %struct.regnode*, %struct.regnode** %emit336, align 8
  %136 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy337 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %136, i32 0, i32 13
  %137 = bitcast %struct.regnode_ssc* %emit_dummy337 to %struct.regnode*
  %cmp338 = icmp eq %struct.regnode* %135, %137
  br i1 %cmp338, label %if.end346, label %land.lhs.true340

land.lhs.true340:                                 ; preds = %if.end335
  %138 = load %struct.regnode*, %struct.regnode** %node.addr, align 8
  %type341 = getelementptr inbounds %struct.regnode, %struct.regnode* %138, i32 0, i32 1
  %139 = load i8, i8* %type341, align 1
  %conv342 = zext i8 %139 to i32
  %cmp343 = icmp eq i32 %conv342, 34
  br i1 %cmp343, label %if.then345, label %if.end346

if.then345:                                       ; preds = %land.lhs.true340
  %140 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %contains_locale = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %140, i32 0, i32 34
  store i32 1, i32* %contains_locale, align 8
  br label %if.end346

if.end346:                                        ; preds = %if.then345, %land.lhs.true340, %if.end335
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_regpposixcc(%struct.RExC_state_t* %pRExC_state, i32 %value, i1 zeroext %strict) #0 {
entry:
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %value.addr = alloca i32, align 4
  %strict.addr = alloca i8, align 1
  %namedclass = alloca i32, align 4
  %c = alloca i8, align 1
  %s = alloca i8*, align 8
  %offset = alloca i64, align 8
  %t = alloca i8*, align 8
  %posixcc = alloca i8*, align 8
  %complement = alloca i32, align 4
  %skip = alloca i32, align 4
  %offset190 = alloca i64, align 8
  %offset270 = alloca i64, align 8
  %offset317 = alloca i64, align 8
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  store i32 %value, i32* %value.addr, align 4
  %frombool = zext i1 %strict to i8
  store i8 %frombool, i8* %strict.addr, align 1
  store i32 -1, i32* %namedclass, align 4
  %0 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %0, 91
  br i1 %cmp, label %land.lhs.true, label %if.end357

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %1, i32 0, i32 8
  %2 = load i8*, i8** %parse, align 8
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 1
  %3 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %3, i32 0, i32 7
  %4 = load i8*, i8** %end, align 8
  %cmp1 = icmp ult i8* %add.ptr, %4
  br i1 %cmp1, label %land.lhs.true2, label %if.end357

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse3 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %5, i32 0, i32 8
  %6 = load i8*, i8** %parse3, align 8
  %7 = load i8, i8* %6, align 1
  %conv = zext i8 %7 to i32
  %cmp4 = icmp eq i32 %conv, 58
  br i1 %cmp4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true2
  %8 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse6 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %8, i32 0, i32 8
  %9 = load i8*, i8** %parse6, align 8
  %10 = load i8, i8* %9, align 1
  %conv7 = zext i8 %10 to i32
  %cmp8 = icmp eq i32 %conv7, 61
  br i1 %cmp8, label %if.then, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %11 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse11 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %11, i32 0, i32 8
  %12 = load i8*, i8** %parse11, align 8
  %13 = load i8, i8* %12, align 1
  %conv12 = zext i8 %13 to i32
  %cmp13 = icmp eq i32 %conv12, 46
  br i1 %cmp13, label %if.then, label %if.end357

if.then:                                          ; preds = %lor.lhs.false10, %lor.lhs.false, %land.lhs.true2
  %14 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse15 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %14, i32 0, i32 8
  %15 = load i8*, i8** %parse15, align 8
  %16 = load i8, i8* %15, align 1
  %conv16 = zext i8 %16 to i32
  %conv17 = trunc i32 %conv16 to i8
  store i8 %conv17, i8* %c, align 1
  %17 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse18 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %17, i32 0, i32 8
  %18 = load i8*, i8** %parse18, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr, i8** %parse18, align 8
  store i8* %18, i8** %s, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %19 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse19 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %19, i32 0, i32 8
  %20 = load i8*, i8** %parse19, align 8
  %21 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end20 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %21, i32 0, i32 7
  %22 = load i8*, i8** %end20, align 8
  %cmp21 = icmp ult i8* %20, %22
  br i1 %cmp21, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %23 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse23 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %23, i32 0, i32 8
  %24 = load i8*, i8** %parse23, align 8
  %25 = load i8, i8* %24, align 1
  %conv24 = zext i8 %25 to i32
  %26 = load i8, i8* %c, align 1
  %conv25 = sext i8 %26 to i32
  %cmp26 = icmp ne i32 %conv24, %conv25
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %27 = phi i1 [ false, %while.cond ], [ %cmp26, %land.rhs ]
  br i1 %27, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %28 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse28 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %28, i32 0, i32 8
  %29 = load i8*, i8** %parse28, align 8
  %incdec.ptr29 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %incdec.ptr29, i8** %parse28, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %30 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse30 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %30, i32 0, i32 8
  %31 = load i8*, i8** %parse30, align 8
  %32 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end31 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %32, i32 0, i32 7
  %33 = load i8*, i8** %end31, align 8
  %cmp32 = icmp eq i8* %31, %33
  br i1 %cmp32, label %if.then34, label %if.else

if.then34:                                        ; preds = %while.end
  %34 = load i8, i8* %strict.addr, align 1
  %tobool = trunc i8 %34 to i1
  br i1 %tobool, label %if.then35, label %if.end79

if.then35:                                        ; preds = %if.then34
  %35 = load i8*, i8** %s, align 8
  %36 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse36 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %36, i32 0, i32 8
  store i8* %35, i8** %parse36, align 8
  br label %while.cond37

while.cond37:                                     ; preds = %while.body48, %if.then35
  %37 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse38 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %37, i32 0, i32 8
  %38 = load i8*, i8** %parse38, align 8
  %39 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end39 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %39, i32 0, i32 7
  %40 = load i8*, i8** %end39, align 8
  %cmp40 = icmp ult i8* %38, %40
  br i1 %cmp40, label %land.rhs42, label %land.end47

land.rhs42:                                       ; preds = %while.cond37
  %41 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse43 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %41, i32 0, i32 8
  %42 = load i8*, i8** %parse43, align 8
  %43 = load i8, i8* %42, align 1
  %conv44 = zext i8 %43 to i32
  %cmp45 = icmp ne i32 %conv44, 93
  br label %land.end47

land.end47:                                       ; preds = %land.rhs42, %while.cond37
  %44 = phi i1 [ false, %while.cond37 ], [ %cmp45, %land.rhs42 ]
  br i1 %44, label %while.body48, label %while.end51

while.body48:                                     ; preds = %land.end47
  %45 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse49 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %45, i32 0, i32 8
  %46 = load i8*, i8** %parse49, align 8
  %incdec.ptr50 = getelementptr inbounds i8, i8* %46, i32 1
  store i8* %incdec.ptr50, i8** %parse49, align 8
  br label %while.cond37

while.end51:                                      ; preds = %land.end47
  br label %do.body

do.body:                                          ; preds = %while.end51
  %47 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %47, i32 0, i32 12
  %48 = load %struct.regnode*, %struct.regnode** %emit, align 8
  %49 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %49, i32 0, i32 13
  %50 = bitcast %struct.regnode_ssc* %emit_dummy to %struct.regnode*
  %cmp52 = icmp eq %struct.regnode* %48, %50
  br i1 %cmp52, label %if.end, label %if.then54

if.then54:                                        ; preds = %do.body
  %51 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %51, i32 0, i32 3
  %52 = load %struct.p5rx*, %struct.p5rx** %rx_sv, align 8
  %53 = bitcast %struct.p5rx* %52 to i8*
  %54 = bitcast i8* %53 to %struct.sv*
  %55 = bitcast %struct.sv* %54 to i8*
  call void @Perl_save_pushptr(i8* %55, i32 11)
  br label %if.end

if.end:                                           ; preds = %if.then54, %do.body
  br label %do.body55

do.body55:                                        ; preds = %if.end
  %56 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse56 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %56, i32 0, i32 8
  %57 = load i8*, i8** %parse56, align 8
  %58 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %58, i32 0, i32 2
  %59 = load i8*, i8** %precomp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %57 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %59 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %offset, align 8
  %60 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %60, i32 0, i32 25
  %61 = load i32, i32* %utf8, align 8
  %tobool57 = icmp ne i32 %61, 0
  %62 = zext i1 %tobool57 to i64
  %cond = select i1 %tobool57, i32 1, i32 0
  %tobool58 = icmp ne i32 %cond, 0
  %63 = load i8, i8* %c, align 1
  %conv59 = sext i8 %63 to i32
  %64 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf860 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %64, i32 0, i32 25
  %65 = load i32, i32* %utf860, align 8
  %tobool61 = icmp ne i32 %65, 0
  %66 = zext i1 %tobool61 to i64
  %cond62 = select i1 %tobool61, i32 1, i32 0
  %tobool63 = icmp ne i32 %cond62, 0
  %67 = zext i1 %tobool63 to i64
  %cond64 = select i1 %tobool63, i32 1, i32 0
  %68 = load i64, i64* %offset, align 8
  %69 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp65 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %69, i32 0, i32 2
  %70 = load i8*, i8** %precomp65, align 8
  %71 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf866 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %71, i32 0, i32 25
  %72 = load i32, i32* %utf866, align 8
  %tobool67 = icmp ne i32 %72, 0
  %73 = zext i1 %tobool67 to i64
  %cond68 = select i1 %tobool67, i32 1, i32 0
  %tobool69 = icmp ne i32 %cond68, 0
  %74 = zext i1 %tobool69 to i64
  %cond70 = select i1 %tobool69, i32 1, i32 0
  %75 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end71 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %75, i32 0, i32 7
  %76 = load i8*, i8** %end71, align 8
  %77 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp72 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %77, i32 0, i32 2
  %78 = load i8*, i8** %precomp72, align 8
  %sub.ptr.lhs.cast73 = ptrtoint i8* %76 to i64
  %sub.ptr.rhs.cast74 = ptrtoint i8* %78 to i64
  %sub.ptr.sub75 = sub i64 %sub.ptr.lhs.cast73, %sub.ptr.rhs.cast74
  %79 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %sub.ptr.sub75, %79
  %80 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp76 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %80, i32 0, i32 2
  %81 = load i8*, i8** %precomp76, align 8
  %82 = load i64, i64* %offset, align 8
  %add.ptr77 = getelementptr inbounds i8, i8* %81, i64 %82
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool58, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.342, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %conv59, i32 %cond64, i64 %68, i8* %70, i32 %cond70, i64 %sub, i8* %add.ptr77)
  br label %do.end

do.end:                                           ; preds = %do.body55
  br label %do.end78

do.end78:                                         ; preds = %do.end
  br label %if.end79

if.end79:                                         ; preds = %do.end78, %if.then34
  %83 = load i8*, i8** %s, align 8
  %84 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse80 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %84, i32 0, i32 8
  store i8* %83, i8** %parse80, align 8
  br label %if.end356

if.else:                                          ; preds = %while.end
  %85 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse81 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %85, i32 0, i32 8
  %86 = load i8*, i8** %parse81, align 8
  %incdec.ptr82 = getelementptr inbounds i8, i8* %86, i32 1
  store i8* %incdec.ptr82, i8** %parse81, align 8
  store i8* %86, i8** %t, align 8
  %87 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse83 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %87, i32 0, i32 8
  %88 = load i8*, i8** %parse83, align 8
  %89 = load i8, i8* %88, align 1
  %conv84 = zext i8 %89 to i32
  %cmp85 = icmp eq i32 %conv84, 93
  br i1 %cmp85, label %if.then87, label %if.else305

if.then87:                                        ; preds = %if.else
  %90 = load i8*, i8** %s, align 8
  %add.ptr88 = getelementptr inbounds i8, i8* %90, i64 1
  store i8* %add.ptr88, i8** %posixcc, align 8
  %91 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse89 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %91, i32 0, i32 8
  %92 = load i8*, i8** %parse89, align 8
  %incdec.ptr90 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %incdec.ptr90, i8** %parse89, align 8
  %93 = load i8*, i8** %s, align 8
  %94 = load i8, i8* %93, align 1
  %conv91 = sext i8 %94 to i32
  %cmp92 = icmp eq i32 %conv91, 58
  br i1 %cmp92, label %if.then94, label %if.else241

if.then94:                                        ; preds = %if.then87
  %95 = load i8*, i8** %posixcc, align 8
  %96 = load i8, i8* %95, align 1
  %conv95 = sext i8 %96 to i32
  %cmp96 = icmp eq i32 %conv95, 94
  br i1 %cmp96, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then94
  %97 = load i8*, i8** %posixcc, align 8
  %incdec.ptr98 = getelementptr inbounds i8, i8* %97, i32 1
  store i8* %incdec.ptr98, i8** %posixcc, align 8
  %98 = load i8, i8* %97, align 1
  %conv99 = sext i8 %98 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.then94
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond100 = phi i32 [ %conv99, %cond.true ], [ 0, %cond.false ]
  store i32 %cond100, i32* %complement, align 4
  %99 = load i8*, i8** %t, align 8
  %100 = load i8*, i8** %posixcc, align 8
  %sub.ptr.lhs.cast101 = ptrtoint i8* %99 to i64
  %sub.ptr.rhs.cast102 = ptrtoint i8* %100 to i64
  %sub.ptr.sub103 = sub i64 %sub.ptr.lhs.cast101, %sub.ptr.rhs.cast102
  %conv104 = trunc i64 %sub.ptr.sub103 to i32
  store i32 %conv104, i32* %skip, align 4
  %101 = load i32, i32* %skip, align 4
  switch i32 %101, label %sw.epilog185 [
    i32 4, label %sw.bb
    i32 5, label %sw.bb108
    i32 6, label %sw.bb180
  ]

sw.bb:                                            ; preds = %cond.end
  %102 = load i8*, i8** %posixcc, align 8
  %call = call i32 @memcmp(i8* %102, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.343, i64 0, i64 0), i64 4) #6
  %tobool105 = icmp ne i32 %call, 0
  br i1 %tobool105, label %if.end107, label %if.then106

if.then106:                                       ; preds = %sw.bb
  store i32 0, i32* %namedclass, align 4
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %sw.bb
  br label %sw.epilog185

sw.bb108:                                         ; preds = %cond.end
  %103 = load i8*, i8** %posixcc, align 8
  %arrayidx = getelementptr inbounds i8, i8* %103, i64 4
  %104 = load i8, i8* %arrayidx, align 1
  %conv109 = sext i8 %104 to i32
  switch i32 %conv109, label %sw.epilog [
    i32 97, label %sw.bb110
    i32 101, label %sw.bb115
    i32 104, label %sw.bb120
    i32 105, label %sw.bb125
    i32 107, label %sw.bb130
    i32 108, label %sw.bb135
    i32 109, label %sw.bb140
    i32 114, label %sw.bb145
    i32 116, label %sw.bb165
  ]

sw.bb110:                                         ; preds = %sw.bb108
  %105 = load i8*, i8** %posixcc, align 8
  %call111 = call i32 @memcmp(i8* %105, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.344, i64 0, i64 0), i64 4) #6
  %tobool112 = icmp ne i32 %call111, 0
  br i1 %tobool112, label %if.end114, label %if.then113

if.then113:                                       ; preds = %sw.bb110
  store i32 4, i32* %namedclass, align 4
  br label %if.end114

if.end114:                                        ; preds = %if.then113, %sw.bb110
  br label %sw.epilog

sw.bb115:                                         ; preds = %sw.bb108
  %106 = load i8*, i8** %posixcc, align 8
  %call116 = call i32 @memcmp(i8* %106, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.345, i64 0, i64 0), i64 4) #6
  %tobool117 = icmp ne i32 %call116, 0
  br i1 %tobool117, label %if.end119, label %if.then118

if.then118:                                       ; preds = %sw.bb115
  store i32 20, i32* %namedclass, align 4
  br label %if.end119

if.end119:                                        ; preds = %if.then118, %sw.bb115
  br label %sw.epilog

sw.bb120:                                         ; preds = %sw.bb108
  %107 = load i8*, i8** %posixcc, align 8
  %call121 = call i32 @memcmp(i8* %107, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.346, i64 0, i64 0), i64 4) #6
  %tobool122 = icmp ne i32 %call121, 0
  br i1 %tobool122, label %if.end124, label %if.then123

if.then123:                                       ; preds = %sw.bb120
  store i32 16, i32* %namedclass, align 4
  br label %if.end124

if.end124:                                        ; preds = %if.then123, %sw.bb120
  br label %sw.epilog

sw.bb125:                                         ; preds = %sw.bb108
  %108 = load i8*, i8** %posixcc, align 8
  %call126 = call i32 @memcmp(i8* %108, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.347, i64 0, i64 0), i64 4) #6
  %tobool127 = icmp ne i32 %call126, 0
  br i1 %tobool127, label %if.end129, label %if.then128

if.then128:                                       ; preds = %sw.bb125
  store i32 28, i32* %namedclass, align 4
  br label %if.end129

if.end129:                                        ; preds = %if.then128, %sw.bb125
  br label %sw.epilog

sw.bb130:                                         ; preds = %sw.bb108
  %109 = load i8*, i8** %posixcc, align 8
  %call131 = call i32 @memcmp(i8* %109, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.348, i64 0, i64 0), i64 4) #6
  %tobool132 = icmp ne i32 %call131, 0
  br i1 %tobool132, label %if.end134, label %if.then133

if.then133:                                       ; preds = %sw.bb130
  store i32 22, i32* %namedclass, align 4
  br label %if.end134

if.end134:                                        ; preds = %if.then133, %sw.bb130
  br label %sw.epilog

sw.bb135:                                         ; preds = %sw.bb108
  %110 = load i8*, i8** %posixcc, align 8
  %call136 = call i32 @memcmp(i8* %110, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.349, i64 0, i64 0), i64 4) #6
  %tobool137 = icmp ne i32 %call136, 0
  br i1 %tobool137, label %if.end139, label %if.then138

if.then138:                                       ; preds = %sw.bb135
  store i32 26, i32* %namedclass, align 4
  br label %if.end139

if.end139:                                        ; preds = %if.then138, %sw.bb135
  br label %sw.epilog

sw.bb140:                                         ; preds = %sw.bb108
  %111 = load i8*, i8** %posixcc, align 8
  %call141 = call i32 @memcmp(i8* %111, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.350, i64 0, i64 0), i64 4) #6
  %tobool142 = icmp ne i32 %call141, 0
  br i1 %tobool142, label %if.end144, label %if.then143

if.then143:                                       ; preds = %sw.bb140
  store i32 14, i32* %namedclass, align 4
  br label %if.end144

if.end144:                                        ; preds = %if.then143, %sw.bb140
  br label %sw.epilog

sw.bb145:                                         ; preds = %sw.bb108
  %112 = load i8*, i8** %posixcc, align 8
  %call146 = call i32 @memcmp(i8* %112, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.351, i64 0, i64 0), i64 4) #6
  %tobool147 = icmp ne i32 %call146, 0
  br i1 %tobool147, label %if.else153, label %if.then148

if.then148:                                       ; preds = %sw.bb145
  %113 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %113, i32 0, i32 0
  %114 = load i32, i32* %flags, align 8
  %and = and i32 %114, 4
  %tobool149 = icmp ne i32 %and, 0
  %115 = zext i1 %tobool149 to i64
  %cond150 = select i1 %tobool149, i32 1, i32 0
  %tobool151 = icmp ne i32 %cond150, 0
  %116 = zext i1 %tobool151 to i64
  %cond152 = select i1 %tobool151, i32 18, i32 6
  store i32 %cond152, i32* %namedclass, align 4
  br label %if.end164

if.else153:                                       ; preds = %sw.bb145
  %117 = load i8*, i8** %posixcc, align 8
  %call154 = call i32 @memcmp(i8* %117, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.352, i64 0, i64 0), i64 4) #6
  %tobool155 = icmp ne i32 %call154, 0
  br i1 %tobool155, label %if.end163, label %if.then156

if.then156:                                       ; preds = %if.else153
  %118 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %flags157 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %118, i32 0, i32 0
  %119 = load i32, i32* %flags157, align 8
  %and158 = and i32 %119, 4
  %tobool159 = icmp ne i32 %and158, 0
  %120 = zext i1 %tobool159 to i64
  %cond160 = select i1 %tobool159, i32 1, i32 0
  %tobool161 = icmp ne i32 %cond160, 0
  %121 = zext i1 %tobool161 to i64
  %cond162 = select i1 %tobool161, i32 18, i32 8
  store i32 %cond162, i32* %namedclass, align 4
  br label %if.end163

if.end163:                                        ; preds = %if.then156, %if.else153
  br label %if.end164

if.end164:                                        ; preds = %if.end163, %if.then148
  br label %sw.epilog

sw.bb165:                                         ; preds = %sw.bb108
  %122 = load i8*, i8** %posixcc, align 8
  %call166 = call i32 @memcmp(i8* %122, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.353, i64 0, i64 0), i64 4) #6
  %tobool167 = icmp ne i32 %call166, 0
  br i1 %tobool167, label %if.else169, label %if.then168

if.then168:                                       ; preds = %sw.bb165
  store i32 2, i32* %namedclass, align 4
  br label %if.end179

if.else169:                                       ; preds = %sw.bb165
  %123 = load i8*, i8** %posixcc, align 8
  %call170 = call i32 @memcmp(i8* %123, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.354, i64 0, i64 0), i64 4) #6
  %tobool171 = icmp ne i32 %call170, 0
  br i1 %tobool171, label %if.else173, label %if.then172

if.then172:                                       ; preds = %if.else169
  store i32 12, i32* %namedclass, align 4
  br label %if.end178

if.else173:                                       ; preds = %if.else169
  %124 = load i8*, i8** %posixcc, align 8
  %call174 = call i32 @memcmp(i8* %124, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.355, i64 0, i64 0), i64 4) #6
  %tobool175 = icmp ne i32 %call174, 0
  br i1 %tobool175, label %if.end177, label %if.then176

if.then176:                                       ; preds = %if.else173
  store i32 10, i32* %namedclass, align 4
  br label %if.end177

if.end177:                                        ; preds = %if.then176, %if.else173
  br label %if.end178

if.end178:                                        ; preds = %if.end177, %if.then172
  br label %if.end179

if.end179:                                        ; preds = %if.end178, %if.then168
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb108, %if.end179, %if.end164, %if.end144, %if.end139, %if.end134, %if.end129, %if.end124, %if.end119, %if.end114
  br label %sw.epilog185

sw.bb180:                                         ; preds = %cond.end
  %125 = load i8*, i8** %posixcc, align 8
  %call181 = call i32 @memcmp(i8* %125, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.356, i64 0, i64 0), i64 6) #6
  %tobool182 = icmp ne i32 %call181, 0
  br i1 %tobool182, label %if.end184, label %if.then183

if.then183:                                       ; preds = %sw.bb180
  store i32 24, i32* %namedclass, align 4
  br label %if.end184

if.end184:                                        ; preds = %if.then183, %sw.bb180
  br label %sw.epilog185

sw.epilog185:                                     ; preds = %cond.end, %if.end184, %sw.epilog, %if.end107
  %126 = load i32, i32* %namedclass, align 4
  %cmp186 = icmp eq i32 %126, -1
  br i1 %cmp186, label %if.then188, label %if.end237

if.then188:                                       ; preds = %sw.epilog185
  br label %do.body189

do.body189:                                       ; preds = %if.then188
  %127 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse191 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %127, i32 0, i32 8
  %128 = load i8*, i8** %parse191, align 8
  %129 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp192 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %129, i32 0, i32 2
  %130 = load i8*, i8** %precomp192, align 8
  %sub.ptr.lhs.cast193 = ptrtoint i8* %128 to i64
  %sub.ptr.rhs.cast194 = ptrtoint i8* %130 to i64
  %sub.ptr.sub195 = sub i64 %sub.ptr.lhs.cast193, %sub.ptr.rhs.cast194
  store i64 %sub.ptr.sub195, i64* %offset190, align 8
  %131 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit196 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %131, i32 0, i32 12
  %132 = load %struct.regnode*, %struct.regnode** %emit196, align 8
  %133 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy197 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %133, i32 0, i32 13
  %134 = bitcast %struct.regnode_ssc* %emit_dummy197 to %struct.regnode*
  %cmp198 = icmp eq %struct.regnode* %132, %134
  br i1 %cmp198, label %if.end202, label %if.then200

if.then200:                                       ; preds = %do.body189
  %135 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv201 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %135, i32 0, i32 3
  %136 = load %struct.p5rx*, %struct.p5rx** %rx_sv201, align 8
  %137 = bitcast %struct.p5rx* %136 to i8*
  %138 = bitcast i8* %137 to %struct.sv*
  %139 = bitcast %struct.sv* %138 to i8*
  call void @Perl_save_pushptr(i8* %139, i32 11)
  br label %if.end202

if.end202:                                        ; preds = %if.then200, %do.body189
  %140 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8203 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %140, i32 0, i32 25
  %141 = load i32, i32* %utf8203, align 8
  %tobool204 = icmp ne i32 %141, 0
  %142 = zext i1 %tobool204 to i64
  %cond205 = select i1 %tobool204, i32 1, i32 0
  %tobool206 = icmp ne i32 %cond205, 0
  %143 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8207 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %143, i32 0, i32 25
  %144 = load i32, i32* %utf8207, align 8
  %tobool208 = icmp ne i32 %144, 0
  %145 = zext i1 %tobool208 to i64
  %cond209 = select i1 %tobool208, i32 1, i32 0
  %tobool210 = icmp ne i32 %cond209, 0
  %146 = zext i1 %tobool210 to i64
  %cond211 = select i1 %tobool210, i32 1, i32 0
  %147 = load i8*, i8** %t, align 8
  %148 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast212 = ptrtoint i8* %147 to i64
  %sub.ptr.rhs.cast213 = ptrtoint i8* %148 to i64
  %sub.ptr.sub214 = sub i64 %sub.ptr.lhs.cast212, %sub.ptr.rhs.cast213
  %sub215 = sub nsw i64 %sub.ptr.sub214, 1
  %149 = load i8*, i8** %s, align 8
  %add.ptr216 = getelementptr inbounds i8, i8* %149, i64 1
  %150 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8217 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %150, i32 0, i32 25
  %151 = load i32, i32* %utf8217, align 8
  %tobool218 = icmp ne i32 %151, 0
  %152 = zext i1 %tobool218 to i64
  %cond219 = select i1 %tobool218, i32 1, i32 0
  %tobool220 = icmp ne i32 %cond219, 0
  %153 = zext i1 %tobool220 to i64
  %cond221 = select i1 %tobool220, i32 1, i32 0
  %154 = load i64, i64* %offset190, align 8
  %155 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp222 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %155, i32 0, i32 2
  %156 = load i8*, i8** %precomp222, align 8
  %157 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8223 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %157, i32 0, i32 25
  %158 = load i32, i32* %utf8223, align 8
  %tobool224 = icmp ne i32 %158, 0
  %159 = zext i1 %tobool224 to i64
  %cond225 = select i1 %tobool224, i32 1, i32 0
  %tobool226 = icmp ne i32 %cond225, 0
  %160 = zext i1 %tobool226 to i64
  %cond227 = select i1 %tobool226, i32 1, i32 0
  %161 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end228 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %161, i32 0, i32 7
  %162 = load i8*, i8** %end228, align 8
  %163 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp229 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %163, i32 0, i32 2
  %164 = load i8*, i8** %precomp229, align 8
  %sub.ptr.lhs.cast230 = ptrtoint i8* %162 to i64
  %sub.ptr.rhs.cast231 = ptrtoint i8* %164 to i64
  %sub.ptr.sub232 = sub i64 %sub.ptr.lhs.cast230, %sub.ptr.rhs.cast231
  %165 = load i64, i64* %offset190, align 8
  %sub233 = sub nsw i64 %sub.ptr.sub232, %165
  %166 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp234 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %166, i32 0, i32 2
  %167 = load i8*, i8** %precomp234, align 8
  %168 = load i64, i64* %offset190, align 8
  %add.ptr235 = getelementptr inbounds i8, i8* %167, i64 %168
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool206, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.357, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %cond211, i64 %sub215, i8* %add.ptr216, i32 %cond221, i64 %154, i8* %156, i32 %cond227, i64 %sub233, i8* %add.ptr235)
  br label %do.end236

do.end236:                                        ; preds = %if.end202
  br label %if.end237

if.end237:                                        ; preds = %do.end236, %sw.epilog185
  %169 = load i32, i32* %complement, align 4
  %tobool238 = icmp ne i32 %169, 0
  br i1 %tobool238, label %if.then239, label %if.end240

if.then239:                                       ; preds = %if.end237
  %170 = load i32, i32* %namedclass, align 4
  %inc = add nsw i32 %170, 1
  store i32 %inc, i32* %namedclass, align 4
  br label %if.end240

if.end240:                                        ; preds = %if.then239, %if.end237
  br label %if.end304

if.else241:                                       ; preds = %if.then87
  %171 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit242 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %171, i32 0, i32 12
  %172 = load %struct.regnode*, %struct.regnode** %emit242, align 8
  %173 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy243 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %173, i32 0, i32 13
  %174 = bitcast %struct.regnode_ssc* %emit_dummy243 to %struct.regnode*
  %cmp244 = icmp eq %struct.regnode* %172, %174
  br i1 %cmp244, label %if.end303, label %if.then246

if.then246:                                       ; preds = %if.else241
  br label %while.cond247

while.cond247:                                    ; preds = %while.body257, %if.then246
  %175 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse248 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %175, i32 0, i32 8
  %176 = load i8*, i8** %parse248, align 8
  %177 = load i8, i8* %176, align 1
  %conv249 = zext i8 %177 to i32
  %tobool250 = icmp ne i32 %conv249, 0
  br i1 %tobool250, label %land.rhs251, label %land.end256

land.rhs251:                                      ; preds = %while.cond247
  %178 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse252 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %178, i32 0, i32 8
  %179 = load i8*, i8** %parse252, align 8
  %180 = load i8, i8* %179, align 1
  %conv253 = zext i8 %180 to i32
  %cmp254 = icmp ne i32 %conv253, 93
  br label %land.end256

land.end256:                                      ; preds = %land.rhs251, %while.cond247
  %181 = phi i1 [ false, %while.cond247 ], [ %cmp254, %land.rhs251 ]
  br i1 %181, label %while.body257, label %while.end260

while.body257:                                    ; preds = %land.end256
  %182 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse258 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %182, i32 0, i32 8
  %183 = load i8*, i8** %parse258, align 8
  %incdec.ptr259 = getelementptr inbounds i8, i8* %183, i32 1
  store i8* %incdec.ptr259, i8** %parse258, align 8
  br label %while.cond247

while.end260:                                     ; preds = %land.end256
  br label %do.body261

do.body261:                                       ; preds = %while.end260
  %184 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit262 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %184, i32 0, i32 12
  %185 = load %struct.regnode*, %struct.regnode** %emit262, align 8
  %186 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy263 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %186, i32 0, i32 13
  %187 = bitcast %struct.regnode_ssc* %emit_dummy263 to %struct.regnode*
  %cmp264 = icmp eq %struct.regnode* %185, %187
  br i1 %cmp264, label %if.end268, label %if.then266

if.then266:                                       ; preds = %do.body261
  %188 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv267 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %188, i32 0, i32 3
  %189 = load %struct.p5rx*, %struct.p5rx** %rx_sv267, align 8
  %190 = bitcast %struct.p5rx* %189 to i8*
  %191 = bitcast i8* %190 to %struct.sv*
  %192 = bitcast %struct.sv* %191 to i8*
  call void @Perl_save_pushptr(i8* %192, i32 11)
  br label %if.end268

if.end268:                                        ; preds = %if.then266, %do.body261
  br label %do.body269

do.body269:                                       ; preds = %if.end268
  %193 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse271 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %193, i32 0, i32 8
  %194 = load i8*, i8** %parse271, align 8
  %195 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp272 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %195, i32 0, i32 2
  %196 = load i8*, i8** %precomp272, align 8
  %sub.ptr.lhs.cast273 = ptrtoint i8* %194 to i64
  %sub.ptr.rhs.cast274 = ptrtoint i8* %196 to i64
  %sub.ptr.sub275 = sub i64 %sub.ptr.lhs.cast273, %sub.ptr.rhs.cast274
  store i64 %sub.ptr.sub275, i64* %offset270, align 8
  %197 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8276 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %197, i32 0, i32 25
  %198 = load i32, i32* %utf8276, align 8
  %tobool277 = icmp ne i32 %198, 0
  %199 = zext i1 %tobool277 to i64
  %cond278 = select i1 %tobool277, i32 1, i32 0
  %tobool279 = icmp ne i32 %cond278, 0
  %200 = load i8, i8* %c, align 1
  %conv280 = sext i8 %200 to i32
  %201 = load i8, i8* %c, align 1
  %conv281 = sext i8 %201 to i32
  %202 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8282 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %202, i32 0, i32 25
  %203 = load i32, i32* %utf8282, align 8
  %tobool283 = icmp ne i32 %203, 0
  %204 = zext i1 %tobool283 to i64
  %cond284 = select i1 %tobool283, i32 1, i32 0
  %tobool285 = icmp ne i32 %cond284, 0
  %205 = zext i1 %tobool285 to i64
  %cond286 = select i1 %tobool285, i32 1, i32 0
  %206 = load i64, i64* %offset270, align 8
  %207 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp287 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %207, i32 0, i32 2
  %208 = load i8*, i8** %precomp287, align 8
  %209 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8288 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %209, i32 0, i32 25
  %210 = load i32, i32* %utf8288, align 8
  %tobool289 = icmp ne i32 %210, 0
  %211 = zext i1 %tobool289 to i64
  %cond290 = select i1 %tobool289, i32 1, i32 0
  %tobool291 = icmp ne i32 %cond290, 0
  %212 = zext i1 %tobool291 to i64
  %cond292 = select i1 %tobool291, i32 1, i32 0
  %213 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end293 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %213, i32 0, i32 7
  %214 = load i8*, i8** %end293, align 8
  %215 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp294 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %215, i32 0, i32 2
  %216 = load i8*, i8** %precomp294, align 8
  %sub.ptr.lhs.cast295 = ptrtoint i8* %214 to i64
  %sub.ptr.rhs.cast296 = ptrtoint i8* %216 to i64
  %sub.ptr.sub297 = sub i64 %sub.ptr.lhs.cast295, %sub.ptr.rhs.cast296
  %217 = load i64, i64* %offset270, align 8
  %sub298 = sub nsw i64 %sub.ptr.sub297, %217
  %218 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp299 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %218, i32 0, i32 2
  %219 = load i8*, i8** %precomp299, align 8
  %220 = load i64, i64* %offset270, align 8
  %add.ptr300 = getelementptr inbounds i8, i8* %219, i64 %220
  call void (i1, i8*, i8*, ...) @S_re_croak2(i1 zeroext %tobool279, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.358, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.235, i64 0, i64 0), i32 %conv280, i32 %conv281, i32 %cond286, i64 %206, i8* %208, i32 %cond292, i64 %sub298, i8* %add.ptr300)
  br label %do.end301

do.end301:                                        ; preds = %do.body269
  br label %do.end302

do.end302:                                        ; preds = %do.end301
  br label %if.end303

if.end303:                                        ; preds = %do.end302, %if.else241
  br label %if.end304

if.end304:                                        ; preds = %if.end303, %if.end240
  br label %if.end355

if.else305:                                       ; preds = %if.else
  %221 = load i8, i8* %strict.addr, align 1
  %tobool306 = trunc i8 %221 to i1
  br i1 %tobool306, label %if.then307, label %if.end353

if.then307:                                       ; preds = %if.else305
  br label %do.body308

do.body308:                                       ; preds = %if.then307
  %222 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit309 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %222, i32 0, i32 12
  %223 = load %struct.regnode*, %struct.regnode** %emit309, align 8
  %224 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %emit_dummy310 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %224, i32 0, i32 13
  %225 = bitcast %struct.regnode_ssc* %emit_dummy310 to %struct.regnode*
  %cmp311 = icmp eq %struct.regnode* %223, %225
  br i1 %cmp311, label %if.end315, label %if.then313

if.then313:                                       ; preds = %do.body308
  %226 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %rx_sv314 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %226, i32 0, i32 3
  %227 = load %struct.p5rx*, %struct.p5rx** %rx_sv314, align 8
  %228 = bitcast %struct.p5rx* %227 to i8*
  %229 = bitcast i8* %228 to %struct.sv*
  %230 = bitcast %struct.sv* %229 to i8*
  call void @Perl_save_pushptr(i8* %230, i32 11)
  br label %if.end315

if.end315:                                        ; preds = %if.then313, %do.body308
  br label %do.body316

do.body316:                                       ; preds = %if.end315
  %231 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse318 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %231, i32 0, i32 8
  %232 = load i8*, i8** %parse318, align 8
  %233 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end319 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %233, i32 0, i32 7
  %234 = load i8*, i8** %end319, align 8
  %cmp320 = icmp ugt i8* %232, %234
  br i1 %cmp320, label %cond.true322, label %cond.false324

cond.true322:                                     ; preds = %do.body316
  %235 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end323 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %235, i32 0, i32 7
  %236 = load i8*, i8** %end323, align 8
  br label %cond.end326

cond.false324:                                    ; preds = %do.body316
  %237 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse325 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %237, i32 0, i32 8
  %238 = load i8*, i8** %parse325, align 8
  br label %cond.end326

cond.end326:                                      ; preds = %cond.false324, %cond.true322
  %cond327 = phi i8* [ %236, %cond.true322 ], [ %238, %cond.false324 ]
  %239 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp328 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %239, i32 0, i32 2
  %240 = load i8*, i8** %precomp328, align 8
  %sub.ptr.lhs.cast329 = ptrtoint i8* %cond327 to i64
  %sub.ptr.rhs.cast330 = ptrtoint i8* %240 to i64
  %sub.ptr.sub331 = sub i64 %sub.ptr.lhs.cast329, %sub.ptr.rhs.cast330
  store i64 %sub.ptr.sub331, i64* %offset317, align 8
  %241 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8332 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %241, i32 0, i32 25
  %242 = load i32, i32* %utf8332, align 8
  %tobool333 = icmp ne i32 %242, 0
  %243 = zext i1 %tobool333 to i64
  %cond334 = select i1 %tobool333, i32 1, i32 0
  %tobool335 = icmp ne i32 %cond334, 0
  %244 = zext i1 %tobool335 to i64
  %cond336 = select i1 %tobool335, i32 1, i32 0
  %245 = load i64, i64* %offset317, align 8
  %246 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp337 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %246, i32 0, i32 2
  %247 = load i8*, i8** %precomp337, align 8
  %248 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %utf8338 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %248, i32 0, i32 25
  %249 = load i32, i32* %utf8338, align 8
  %tobool339 = icmp ne i32 %249, 0
  %250 = zext i1 %tobool339 to i64
  %cond340 = select i1 %tobool339, i32 1, i32 0
  %tobool341 = icmp ne i32 %cond340, 0
  %251 = zext i1 %tobool341 to i64
  %cond342 = select i1 %tobool341, i32 1, i32 0
  %252 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end343 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %252, i32 0, i32 7
  %253 = load i8*, i8** %end343, align 8
  %254 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp344 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %254, i32 0, i32 2
  %255 = load i8*, i8** %precomp344, align 8
  %sub.ptr.lhs.cast345 = ptrtoint i8* %253 to i64
  %sub.ptr.rhs.cast346 = ptrtoint i8* %255 to i64
  %sub.ptr.sub347 = sub i64 %sub.ptr.lhs.cast345, %sub.ptr.rhs.cast346
  %256 = load i64, i64* %offset317, align 8
  %sub348 = sub nsw i64 %sub.ptr.sub347, %256
  %257 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %precomp349 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %257, i32 0, i32 2
  %258 = load i8*, i8** %precomp349, align 8
  %259 = load i64, i64* %offset317, align 8
  %add.ptr350 = getelementptr inbounds i8, i8* %258, i64 %259
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.227, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.359, i64 0, i64 0), i32 %cond336, i64 %245, i8* %247, i32 %cond342, i64 %sub348, i8* %add.ptr350)
  br label %do.end351

do.end351:                                        ; preds = %cond.end326
  br label %do.end352

do.end352:                                        ; preds = %do.end351
  br label %if.end353

if.end353:                                        ; preds = %do.end352, %if.else305
  %260 = load i8*, i8** %s, align 8
  %261 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse354 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %261, i32 0, i32 8
  store i8* %260, i8** %parse354, align 8
  br label %if.end355

if.end355:                                        ; preds = %if.end353, %if.end304
  br label %if.end356

if.end356:                                        ; preds = %if.end355, %if.end79
  br label %if.end357

if.end357:                                        ; preds = %if.end356, %lor.lhs.false10, %land.lhs.true, %entry
  %262 = load i32, i32* %namedclass, align 4
  ret i32 %262
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.av* @S_add_multi_match(%struct.av* %multi_char_matches, %struct.sv* %multi_string, i64 %cp_count) #0 {
entry:
  %multi_char_matches.addr = alloca %struct.av*, align 8
  %multi_string.addr = alloca %struct.sv*, align 8
  %cp_count.addr = alloca i64, align 8
  %this_array = alloca %struct.av*, align 8
  %this_array_ptr = alloca %struct.av**, align 8
  store %struct.av* %multi_char_matches, %struct.av** %multi_char_matches.addr, align 8
  store %struct.sv* %multi_string, %struct.sv** %multi_string.addr, align 8
  store i64 %cp_count, i64* %cp_count.addr, align 8
  %0 = load %struct.av*, %struct.av** %multi_char_matches.addr, align 8
  %tobool = icmp ne %struct.av* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.sv* @Perl_newSV_type(i32 11)
  %1 = bitcast %struct.sv* %call to i8*
  %2 = bitcast i8* %1 to %struct.av*
  store %struct.av* %2, %struct.av** %multi_char_matches.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.av*, %struct.av** %multi_char_matches.addr, align 8
  %4 = load i64, i64* %cp_count.addr, align 8
  %call1 = call zeroext i1 @Perl_av_exists(%struct.av* %3, i64 %4)
  br i1 %call1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %5 = load %struct.av*, %struct.av** %multi_char_matches.addr, align 8
  %6 = load i64, i64* %cp_count.addr, align 8
  %call3 = call %struct.sv** @Perl_av_fetch(%struct.av* %5, i64 %6, i32 0)
  %7 = bitcast %struct.sv** %call3 to %struct.av**
  store %struct.av** %7, %struct.av*** %this_array_ptr, align 8
  %8 = load %struct.av**, %struct.av*** %this_array_ptr, align 8
  %9 = load %struct.av*, %struct.av** %8, align 8
  store %struct.av* %9, %struct.av** %this_array, align 8
  br label %if.end6

if.else:                                          ; preds = %if.end
  %call4 = call %struct.sv* @Perl_newSV_type(i32 11)
  %10 = bitcast %struct.sv* %call4 to i8*
  %11 = bitcast i8* %10 to %struct.av*
  store %struct.av* %11, %struct.av** %this_array, align 8
  %12 = load %struct.av*, %struct.av** %multi_char_matches.addr, align 8
  %13 = load i64, i64* %cp_count.addr, align 8
  %14 = load %struct.av*, %struct.av** %this_array, align 8
  %15 = bitcast %struct.av* %14 to %struct.sv*
  %call5 = call %struct.sv** @Perl_av_store(%struct.av* %12, i64 %13, %struct.sv* %15)
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then2
  %16 = load %struct.av*, %struct.av** %this_array, align 8
  %17 = load %struct.sv*, %struct.sv** %multi_string.addr, align 8
  call void @Perl_av_push(%struct.av* %16, %struct.sv* %17)
  %18 = load %struct.av*, %struct.av** %multi_char_matches.addr, align 8
  ret %struct.av* %18
}

declare dso_local i8* @Perl_savepv(i8*) #1

declare dso_local i8* @Perl_form(i8*, ...) #1

declare dso_local i8* @Perl_instr(i8*, i8*) #1

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #2

declare dso_local i8* @Perl_savepvn(i8*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @S_cntrl_to_mnemonic(i8 zeroext %c) #0 {
entry:
  %retval = alloca i8*, align 8
  %c.addr = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  switch i32 %conv, label %sw.epilog [
    i32 7, label %sw.bb
    i32 8, label %sw.bb1
    i32 27, label %sw.bb2
    i32 12, label %sw.bb3
    i32 10, label %sw.bb4
    i32 13, label %sw.bb5
    i32 9, label %sw.bb6
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.360, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.361, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.362, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb3:                                           ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.363, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb4:                                           ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.364, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb5:                                           ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.365, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb6:                                           ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.366, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.epilog:                                        ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i8*, i8** %retval, align 8
  ret i8* %1
}

declare dso_local zeroext i1 @Perl_av_exists(%struct.av*, i64) #1

declare dso_local %struct.sv* @Perl_av_pop(%struct.av*) #1

declare dso_local void @Perl_sv_catpv(%struct.sv*, i8*) #1

; Function Attrs: nounwind readonly
declare dso_local i64 @strcspn(i8*, i8*) #2

declare dso_local i64 @Perl_grok_hex(i8*, i64*, i32*, double*) #1

declare dso_local i8* @Perl_sv_recode_to_utf8(%struct.sv*, %struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_could_it_be_a_POSIX_class(%struct.RExC_state_t* %pRExC_state) #0 {
entry:
  %retval = alloca i1, align 1
  %pRExC_state.addr = alloca %struct.RExC_state_t*, align 8
  %p = alloca i8*, align 8
  %first_char = alloca i8, align 1
  store %struct.RExC_state_t* %pRExC_state, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %0 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %0, i32 0, i32 8
  %1 = load i8*, i8** %parse, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 1
  store i8* %add.ptr, i8** %p, align 8
  %2 = load i8*, i8** %p, align 8
  %3 = load i8, i8* %2, align 1
  store i8 %3, i8* %first_char, align 1
  %4 = load i8, i8* %first_char, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp eq i32 %conv, 58
  br i1 %cmp, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load i8, i8* %first_char, align 1
  %conv2 = sext i8 %5 to i32
  %cmp3 = icmp eq i32 %conv2, 61
  br i1 %cmp3, label %if.end, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %6 = load i8, i8* %first_char, align 1
  %conv6 = sext i8 %6 to i32
  %cmp7 = icmp eq i32 %conv6, 46
  br i1 %cmp7, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false5
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false5, %lor.lhs.false, %entry
  %7 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %8 = load i8*, i8** %p, align 8
  %9 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %9, i32 0, i32 7
  %10 = load i8*, i8** %end, align 8
  %cmp9 = icmp ult i8* %8, %10
  br i1 %cmp9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %11 = load i8*, i8** %p, align 8
  %12 = load i8, i8* %11, align 1
  %idxprom = zext i8 %12 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %13 = load i32, i32* %arrayidx, align 4
  %and = and i32 %13, 16385
  %cmp11 = icmp eq i32 %and, 16385
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %14 = phi i1 [ false, %while.cond ], [ %cmp11, %land.rhs ]
  br i1 %14, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %15 = load i8*, i8** %p, align 8
  %incdec.ptr13 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr13, i8** %p, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %16 = load i8*, i8** %p, align 8
  %17 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end14 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %17, i32 0, i32 7
  %18 = load i8*, i8** %end14, align 8
  %cmp15 = icmp uge i8* %16, %18
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %while.end
  store i1 false, i1* %retval, align 1
  br label %return

if.end18:                                         ; preds = %while.end
  %19 = load i8*, i8** %p, align 8
  %20 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse19 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %20, i32 0, i32 8
  %21 = load i8*, i8** %parse19, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %19 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %21 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp20 = icmp sgt i64 %sub.ptr.sub, 2
  br i1 %cmp20, label %land.lhs.true, label %if.end41

land.lhs.true:                                    ; preds = %if.end18
  %22 = load i8*, i8** %p, align 8
  %23 = load i8, i8* %22, align 1
  %conv22 = sext i8 %23 to i32
  %24 = load i8, i8* %first_char, align 1
  %conv23 = sext i8 %24 to i32
  %cmp24 = icmp eq i32 %conv22, %conv23
  br i1 %cmp24, label %if.then40, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %land.lhs.true
  %25 = load i8*, i8** %p, align 8
  %26 = load i8, i8* %25, align 1
  %conv27 = sext i8 %26 to i32
  %cmp28 = icmp eq i32 %conv27, 93
  br i1 %cmp28, label %land.lhs.true30, label %if.end41

land.lhs.true30:                                  ; preds = %lor.lhs.false26
  %27 = load i8*, i8** %p, align 8
  %add.ptr31 = getelementptr inbounds i8, i8* %27, i64 1
  %28 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end32 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %28, i32 0, i32 7
  %29 = load i8*, i8** %end32, align 8
  %cmp33 = icmp ult i8* %add.ptr31, %29
  br i1 %cmp33, label %land.lhs.true35, label %if.end41

land.lhs.true35:                                  ; preds = %land.lhs.true30
  %30 = load i8*, i8** %p, align 8
  %add.ptr36 = getelementptr inbounds i8, i8* %30, i64 1
  %31 = load i8, i8* %add.ptr36, align 1
  %conv37 = sext i8 %31 to i32
  %cmp38 = icmp ne i32 %conv37, 41
  br i1 %cmp38, label %if.then40, label %if.end41

if.then40:                                        ; preds = %land.lhs.true35, %land.lhs.true
  store i1 true, i1* %retval, align 1
  br label %return

if.end41:                                         ; preds = %land.lhs.true35, %land.lhs.true30, %lor.lhs.false26, %if.end18
  %32 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse42 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %32, i32 0, i32 8
  %33 = load i8*, i8** %parse42, align 8
  %34 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %end43 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %34, i32 0, i32 7
  %35 = load i8*, i8** %end43, align 8
  %36 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse44 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %36, i32 0, i32 8
  %37 = load i8*, i8** %parse44, align 8
  %sub.ptr.lhs.cast45 = ptrtoint i8* %35 to i64
  %sub.ptr.rhs.cast46 = ptrtoint i8* %37 to i64
  %sub.ptr.sub47 = sub i64 %sub.ptr.lhs.cast45, %sub.ptr.rhs.cast46
  %call = call i8* @memchr(i8* %33, i32 93, i64 %sub.ptr.sub47) #6
  store i8* %call, i8** %p, align 8
  %38 = load i8*, i8** %p, align 8
  %tobool = icmp ne i8* %38, null
  br i1 %tobool, label %land.lhs.true48, label %land.end61

land.lhs.true48:                                  ; preds = %if.end41
  %39 = load i8*, i8** %p, align 8
  %40 = load %struct.RExC_state_t*, %struct.RExC_state_t** %pRExC_state.addr, align 8
  %parse49 = getelementptr inbounds %struct.RExC_state_t, %struct.RExC_state_t* %40, i32 0, i32 8
  %41 = load i8*, i8** %parse49, align 8
  %sub.ptr.lhs.cast50 = ptrtoint i8* %39 to i64
  %sub.ptr.rhs.cast51 = ptrtoint i8* %41 to i64
  %sub.ptr.sub52 = sub i64 %sub.ptr.lhs.cast50, %sub.ptr.rhs.cast51
  %cmp53 = icmp sgt i64 %sub.ptr.sub52, 2
  br i1 %cmp53, label %land.rhs55, label %land.end61

land.rhs55:                                       ; preds = %land.lhs.true48
  %42 = load i8, i8* %first_char, align 1
  %conv56 = sext i8 %42 to i32
  %43 = load i8*, i8** %p, align 8
  %add.ptr57 = getelementptr inbounds i8, i8* %43, i64 -1
  %44 = load i8, i8* %add.ptr57, align 1
  %conv58 = sext i8 %44 to i32
  %cmp59 = icmp eq i32 %conv56, %conv58
  br label %land.end61

land.end61:                                       ; preds = %land.rhs55, %land.lhs.true48, %if.end41
  %45 = phi i1 [ false, %land.lhs.true48 ], [ false, %if.end41 ], [ %cmp59, %land.rhs55 ]
  store i1 %45, i1* %retval, align 1
  br label %return

return:                                           ; preds = %land.end61, %if.then40, %if.then17, %if.then
  %46 = load i1, i1* %retval, align 1
  ret i1 %46
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_regex_set_precedence(i8 zeroext %my_operator) #0 {
entry:
  %retval = alloca i32, align 4
  %my_operator.addr = alloca i8, align 1
  store i8 %my_operator, i8* %my_operator.addr, align 1
  %0 = load i8, i8* %my_operator.addr, align 1
  %conv = zext i8 %0 to i32
  switch i32 %conv, label %sw.epilog [
    i32 33, label %sw.bb
    i32 38, label %sw.bb1
    i32 94, label %sw.bb2
    i32 124, label %sw.bb2
    i32 43, label %sw.bb2
    i32 45, label %sw.bb2
    i32 41, label %sw.bb3
    i32 93, label %sw.bb4
  ]

sw.bb:                                            ; preds = %entry
  store i32 5, i32* %retval, align 4
  br label %return

sw.bb1:                                           ; preds = %entry
  store i32 4, i32* %retval, align 4
  br label %return

sw.bb2:                                           ; preds = %entry, %entry, %entry, %entry
  store i32 3, i32* %retval, align 4
  br label %return

sw.bb3:                                           ; preds = %entry
  store i32 2, i32* %retval, align 4
  br label %return

sw.bb4:                                           ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i32, i32* %retval, align 4
  ret i32 %1
}

; Function Attrs: nounwind readonly
declare dso_local i8* @memchr(i8*, i32, i64) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
