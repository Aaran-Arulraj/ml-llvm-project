; ModuleID = 'blender/source/blender/blenkernel/intern/pbvh.c'
source_filename = "blender/source/blender/blenkernel/intern/pbvh.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Global = type { %struct.Main*, [1024 x i8], [1024 x i8], i8, i8, i8, %struct.ListBase, i8, i8, i8, i16, i16, i16, i8, i16, i32, i32, i8, i32, i32, [200 x i8] }
%struct.Main = type opaque
%struct.ListBase = type { i8*, i8* }
%struct.BB = type { [3 x float], [3 x float] }
%struct.BBC = type { [3 x float], [3 x float], [3 x float] }
%struct.PBVH = type { i32, i32, %struct.PBVHNode*, i32, i32, i32*, i32, i32, i32, %struct.MVert*, %struct.MFace*, %struct.CustomData*, %struct.CCGKey, %struct.CCGElem**, %struct.DMGridAdjacency*, i8**, %struct.DMFlagMat*, i32, i32**, i32*, i8, i8, %struct.BMesh*, float, float, i32, i32, %struct.BMLog* }
%struct.PBVHNode = type { %struct.GPU_PBVH_Buffers*, %struct.BB, %struct.BB, i32, i32*, i32, i32*, i32, i32, [4 x i32]*, i16, float, float*, i32, %struct.PBVHProxyNode*, %struct.GSet*, %struct.GSet*, %struct.GSet*, [3 x float]*, [3 x i32]*, i32 }
%struct.GPU_PBVH_Buffers = type opaque
%struct.PBVHProxyNode = type { [3 x float]* }
%struct.GSet = type opaque
%struct.MVert = type { [3 x float], [3 x i16], i8, i8 }
%struct.MFace = type { i32, i32, i32, i32, i16, i8, i8 }
%struct.CustomData = type { %struct.CustomDataLayer*, [41 x i32], i32, i32, i32, %struct.BLI_mempool*, %struct.CustomDataExternal* }
%struct.CustomDataLayer = type { i32, i32, i32, i32, i32, i32, i32, i32, [64 x i8], i8* }
%struct.BLI_mempool = type opaque
%struct.CustomDataExternal = type { [1024 x i8] }
%struct.CCGKey = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.CCGElem = type opaque
%struct.DMGridAdjacency = type { [4 x i32], [4 x i32] }
%struct.DMFlagMat = type { i16, i8 }
%struct.BMesh = type { i32, i32, i32, i32, i32, i32, i32, i8, i8, %struct.BLI_mempool*, %struct.BLI_mempool*, %struct.BLI_mempool*, %struct.BLI_mempool*, %struct.BMVert**, %struct.BMEdge**, %struct.BMFace**, i32, i32, i32, %struct.BLI_mempool*, %struct.BLI_mempool*, %struct.BLI_mempool*, i32, %struct.BMOperator*, %struct.CustomData, %struct.CustomData, %struct.CustomData, %struct.CustomData, i16, i32, i32, i32, %struct.ListBase, %struct.BMFace*, %struct.ListBase, i8* }
%struct.BMVert = type { %struct.BMHeader, %struct.BMFlagLayer*, [3 x float], [3 x float], %struct.BMEdge* }
%struct.BMHeader = type { i8*, i32, i8, i8, i8 }
%struct.BMFlagLayer = type { i16 }
%struct.BMEdge = type { %struct.BMHeader, %struct.BMFlagLayer*, %struct.BMVert*, %struct.BMVert*, %struct.BMLoop*, %struct.BMDiskLink, %struct.BMDiskLink }
%struct.BMLoop = type { %struct.BMHeader, %struct.BMVert*, %struct.BMEdge*, %struct.BMFace*, %struct.BMLoop*, %struct.BMLoop*, %struct.BMLoop*, %struct.BMLoop* }
%struct.BMDiskLink = type { %struct.BMEdge*, %struct.BMEdge* }
%struct.BMOperator = type { [16 x %struct.BMOpSlot], [16 x %struct.BMOpSlot], void (%struct.BMesh*, %struct.BMOperator*)*, %struct.MemArena*, i32, i32, i32 }
%struct.BMOpSlot = type { i8*, i32, %union.eBMOpSlotSubType_Union, i32, %union.anon }
%union.eBMOpSlotSubType_Union = type { i32 }
%union.anon = type { i8*, [8 x i8] }
%struct.MemArena = type opaque
%struct.BMFace = type { %struct.BMHeader, %struct.BMFlagLayer*, %struct.BMLoop*, i32, [3 x float], i16 }
%struct.BMLog = type opaque
%struct.PBVHIter = type { %struct.PBVH*, i8 (%struct.PBVHNode*, i8*)*, i8*, %struct.PBVHStack*, i32, [100 x %struct.PBVHStack], i32 }
%struct.PBVHStack = type { %struct.PBVHNode*, i32 }
%struct.PBVHVertexIter = type { i32, i32, i32, i32, i32, i32, %struct.CCGElem**, %struct.CCGElem*, %struct.CCGKey*, i32**, i32*, i32*, i32, i32, %struct.MVert*, i32, i32*, float*, %struct.GSetIterator, %struct.GSetIterator, %struct.CustomData*, i32, %struct.MVert*, %struct.BMVert*, float*, i16*, float*, float* }
%struct.GSetIterator = type { %struct.GHashIterator }
%struct.GHashIterator = type { %struct.GHash*, %struct.Entry*, i32 }
%struct.GHash = type opaque
%struct.Entry = type opaque
%struct.RaycastData = type { %struct.IsectRayAABBData, i8 }
%struct.IsectRayAABBData = type { [3 x float], [3 x float], [3 x i32] }
%struct.node_tree = type { %struct.PBVHNode*, %struct.node_tree*, %struct.node_tree* }
%struct.PBVHNodeDrawData = type { i32 (i32, i8*)*, i8 }
%struct._gh_Entry = type { i8*, i8*, i8* }

@MEM_mallocN = external dso_local global i8* (i64, i8*)*, align 8
@.str = private unnamed_addr constant [10 x i8] c"bvh nodes\00", align 1
@MEM_freeN = external dso_local global void (i8*)*, align 8
@MEM_callocN = external dso_local global i8* (i64, i8*)*, align 8
@.str.1 = private unnamed_addr constant [17 x i8] c"bvh->vert_bitmap\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"prim_bbc\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"pbvh\00", align 1
@MEM_recallocN_id = external dso_local global i8* (i8*, i64, i8*)*, align 8
@__func__.BKE_pbvh_search_gather = private unnamed_addr constant [23 x i8] c"BKE_pbvh_search_gather\00", align 1
@__func__.BKE_pbvh_get_grid_updates = private unnamed_addr constant [26 x i8] c"BKE_pbvh_get_grid_updates\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"PBVH Grid Faces\00", align 1
@__const.BKE_pbvh_raycast_project_ray_root.offset_vec = private unnamed_addr constant [3 x float] [float 0x3F50624DE0000000, float 0x3F50624DE0000000, float 0x3F50624DE0000000], align 4
@G = external dso_local global %struct.Global, align 8
@.str.5 = private unnamed_addr constant [11 x i8] c"layer disp\00", align 1
@.str.6 = private unnamed_addr constant [24 x i8] c"BKE_pbvh_get_vertCoords\00", align 1
@MEM_dupallocN = external dso_local global i8* (i8*)*, align 8
@MEM_reallocN_id = external dso_local global i8* (i8*, i64, i8*)*, align 8
@__func__.BKE_pbvh_node_add_proxy = private unnamed_addr constant [24 x i8] c"BKE_pbvh_node_add_proxy\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"PBVHNodeProxy\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"PBVHNodeProxy.co\00", align 1
@__func__.BKE_pbvh_gather_proxies = private unnamed_addr constant [24 x i8] c"BKE_pbvh_gather_proxies\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"bvh prim indices\00", align 1
@.str.10 = private unnamed_addr constant [18 x i8] c"bvh initial nodes\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"build_mesh_leaf_node gh\00", align 1
@.str.12 = private unnamed_addr constant [27 x i8] c"bvh node face vert indices\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"bvh node vert indices\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"PBVHStack\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"bvh temp vnors\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @BB_reset(%struct.BB* %bb) #0 !dbg !173 {
entry:
  %bb.addr = alloca %struct.BB*, align 8
  store %struct.BB* %bb, %struct.BB** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BB** %bb.addr, metadata !177, metadata !DIExpression()), !dbg !178
  %0 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !179
  %bmin = getelementptr inbounds %struct.BB, %struct.BB* %0, i32 0, i32 0, !dbg !180
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %bmin, i64 0, i64 2, !dbg !179
  store float 0x47EFFFFFE0000000, float* %arrayidx, align 4, !dbg !181
  %1 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !182
  %bmin1 = getelementptr inbounds %struct.BB, %struct.BB* %1, i32 0, i32 0, !dbg !183
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %bmin1, i64 0, i64 1, !dbg !182
  store float 0x47EFFFFFE0000000, float* %arrayidx2, align 4, !dbg !184
  %2 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !185
  %bmin3 = getelementptr inbounds %struct.BB, %struct.BB* %2, i32 0, i32 0, !dbg !186
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %bmin3, i64 0, i64 0, !dbg !185
  store float 0x47EFFFFFE0000000, float* %arrayidx4, align 4, !dbg !187
  %3 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !188
  %bmax = getelementptr inbounds %struct.BB, %struct.BB* %3, i32 0, i32 1, !dbg !189
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %bmax, i64 0, i64 2, !dbg !188
  store float 0xC7EFFFFFE0000000, float* %arrayidx5, align 4, !dbg !190
  %4 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !191
  %bmax6 = getelementptr inbounds %struct.BB, %struct.BB* %4, i32 0, i32 1, !dbg !192
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %bmax6, i64 0, i64 1, !dbg !191
  store float 0xC7EFFFFFE0000000, float* %arrayidx7, align 4, !dbg !193
  %5 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !194
  %bmax8 = getelementptr inbounds %struct.BB, %struct.BB* %5, i32 0, i32 1, !dbg !195
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %bmax8, i64 0, i64 0, !dbg !194
  store float 0xC7EFFFFFE0000000, float* %arrayidx9, align 4, !dbg !196
  ret void, !dbg !197
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @BB_expand(%struct.BB* %bb, float* %co) #0 !dbg !198 {
entry:
  %bb.addr = alloca %struct.BB*, align 8
  %co.addr = alloca float*, align 8
  %i = alloca i32, align 4
  store %struct.BB* %bb, %struct.BB** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BB** %bb.addr, metadata !203, metadata !DIExpression()), !dbg !204
  store float* %co, float** %co.addr, align 8
  call void @llvm.dbg.declare(metadata float** %co.addr, metadata !205, metadata !DIExpression()), !dbg !206
  call void @llvm.dbg.declare(metadata i32* %i, metadata !207, metadata !DIExpression()), !dbg !208
  store i32 0, i32* %i, align 4, !dbg !209
  br label %for.cond, !dbg !211

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !212
  %cmp = icmp slt i32 %0, 3, !dbg !214
  br i1 %cmp, label %for.body, label %for.end, !dbg !215

for.body:                                         ; preds = %for.cond
  %1 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !216
  %bmin = getelementptr inbounds %struct.BB, %struct.BB* %1, i32 0, i32 0, !dbg !218
  %2 = load i32, i32* %i, align 4, !dbg !219
  %idxprom = sext i32 %2 to i64, !dbg !216
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %bmin, i64 0, i64 %idxprom, !dbg !216
  %3 = load float, float* %arrayidx, align 4, !dbg !216
  %4 = load float*, float** %co.addr, align 8, !dbg !220
  %5 = load i32, i32* %i, align 4, !dbg !221
  %idxprom1 = sext i32 %5 to i64, !dbg !220
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 %idxprom1, !dbg !220
  %6 = load float, float* %arrayidx2, align 4, !dbg !220
  %call = call float @min_ff(float %3, float %6), !dbg !222
  %7 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !223
  %bmin3 = getelementptr inbounds %struct.BB, %struct.BB* %7, i32 0, i32 0, !dbg !224
  %8 = load i32, i32* %i, align 4, !dbg !225
  %idxprom4 = sext i32 %8 to i64, !dbg !223
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %bmin3, i64 0, i64 %idxprom4, !dbg !223
  store float %call, float* %arrayidx5, align 4, !dbg !226
  %9 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !227
  %bmax = getelementptr inbounds %struct.BB, %struct.BB* %9, i32 0, i32 1, !dbg !228
  %10 = load i32, i32* %i, align 4, !dbg !229
  %idxprom6 = sext i32 %10 to i64, !dbg !227
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %bmax, i64 0, i64 %idxprom6, !dbg !227
  %11 = load float, float* %arrayidx7, align 4, !dbg !227
  %12 = load float*, float** %co.addr, align 8, !dbg !230
  %13 = load i32, i32* %i, align 4, !dbg !231
  %idxprom8 = sext i32 %13 to i64, !dbg !230
  %arrayidx9 = getelementptr inbounds float, float* %12, i64 %idxprom8, !dbg !230
  %14 = load float, float* %arrayidx9, align 4, !dbg !230
  %call10 = call float @max_ff(float %11, float %14), !dbg !232
  %15 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !233
  %bmax11 = getelementptr inbounds %struct.BB, %struct.BB* %15, i32 0, i32 1, !dbg !234
  %16 = load i32, i32* %i, align 4, !dbg !235
  %idxprom12 = sext i32 %16 to i64, !dbg !233
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %bmax11, i64 0, i64 %idxprom12, !dbg !233
  store float %call10, float* %arrayidx13, align 4, !dbg !236
  br label %for.inc, !dbg !237

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4, !dbg !238
  %inc = add nsw i32 %17, 1, !dbg !238
  store i32 %inc, i32* %i, align 4, !dbg !238
  br label %for.cond, !dbg !239, !llvm.loop !240

for.end:                                          ; preds = %for.cond
  ret void, !dbg !242
}

; Function Attrs: noinline nounwind uwtable
define internal float @min_ff(float %a, float %b) #0 !dbg !243 {
entry:
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store float %a, float* %a.addr, align 4
  call void @llvm.dbg.declare(metadata float* %a.addr, metadata !247, metadata !DIExpression()), !dbg !248
  store float %b, float* %b.addr, align 4
  call void @llvm.dbg.declare(metadata float* %b.addr, metadata !249, metadata !DIExpression()), !dbg !250
  %0 = load float, float* %a.addr, align 4, !dbg !251
  %1 = load float, float* %b.addr, align 4, !dbg !252
  %cmp = fcmp olt float %0, %1, !dbg !253
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !254

cond.true:                                        ; preds = %entry
  %2 = load float, float* %a.addr, align 4, !dbg !255
  br label %cond.end, !dbg !254

cond.false:                                       ; preds = %entry
  %3 = load float, float* %b.addr, align 4, !dbg !256
  br label %cond.end, !dbg !254

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %2, %cond.true ], [ %3, %cond.false ], !dbg !254
  ret float %cond, !dbg !257
}

; Function Attrs: noinline nounwind uwtable
define internal float @max_ff(float %a, float %b) #0 !dbg !258 {
entry:
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store float %a, float* %a.addr, align 4
  call void @llvm.dbg.declare(metadata float* %a.addr, metadata !259, metadata !DIExpression()), !dbg !260
  store float %b, float* %b.addr, align 4
  call void @llvm.dbg.declare(metadata float* %b.addr, metadata !261, metadata !DIExpression()), !dbg !262
  %0 = load float, float* %a.addr, align 4, !dbg !263
  %1 = load float, float* %b.addr, align 4, !dbg !264
  %cmp = fcmp ogt float %0, %1, !dbg !265
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !266

cond.true:                                        ; preds = %entry
  %2 = load float, float* %a.addr, align 4, !dbg !267
  br label %cond.end, !dbg !266

cond.false:                                       ; preds = %entry
  %3 = load float, float* %b.addr, align 4, !dbg !268
  br label %cond.end, !dbg !266

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %2, %cond.true ], [ %3, %cond.false ], !dbg !266
  ret float %cond, !dbg !269
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BB_expand_with_bb(%struct.BB* %bb, %struct.BB* %bb2) #0 !dbg !270 {
entry:
  %bb.addr = alloca %struct.BB*, align 8
  %bb2.addr = alloca %struct.BB*, align 8
  %i = alloca i32, align 4
  store %struct.BB* %bb, %struct.BB** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BB** %bb.addr, metadata !273, metadata !DIExpression()), !dbg !274
  store %struct.BB* %bb2, %struct.BB** %bb2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BB** %bb2.addr, metadata !275, metadata !DIExpression()), !dbg !276
  call void @llvm.dbg.declare(metadata i32* %i, metadata !277, metadata !DIExpression()), !dbg !278
  store i32 0, i32* %i, align 4, !dbg !279
  br label %for.cond, !dbg !281

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !282
  %cmp = icmp slt i32 %0, 3, !dbg !284
  br i1 %cmp, label %for.body, label %for.end, !dbg !285

for.body:                                         ; preds = %for.cond
  %1 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !286
  %bmin = getelementptr inbounds %struct.BB, %struct.BB* %1, i32 0, i32 0, !dbg !288
  %2 = load i32, i32* %i, align 4, !dbg !289
  %idxprom = sext i32 %2 to i64, !dbg !286
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %bmin, i64 0, i64 %idxprom, !dbg !286
  %3 = load float, float* %arrayidx, align 4, !dbg !286
  %4 = load %struct.BB*, %struct.BB** %bb2.addr, align 8, !dbg !290
  %bmin1 = getelementptr inbounds %struct.BB, %struct.BB* %4, i32 0, i32 0, !dbg !291
  %5 = load i32, i32* %i, align 4, !dbg !292
  %idxprom2 = sext i32 %5 to i64, !dbg !290
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %bmin1, i64 0, i64 %idxprom2, !dbg !290
  %6 = load float, float* %arrayidx3, align 4, !dbg !290
  %call = call float @min_ff(float %3, float %6), !dbg !293
  %7 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !294
  %bmin4 = getelementptr inbounds %struct.BB, %struct.BB* %7, i32 0, i32 0, !dbg !295
  %8 = load i32, i32* %i, align 4, !dbg !296
  %idxprom5 = sext i32 %8 to i64, !dbg !294
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %bmin4, i64 0, i64 %idxprom5, !dbg !294
  store float %call, float* %arrayidx6, align 4, !dbg !297
  %9 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !298
  %bmax = getelementptr inbounds %struct.BB, %struct.BB* %9, i32 0, i32 1, !dbg !299
  %10 = load i32, i32* %i, align 4, !dbg !300
  %idxprom7 = sext i32 %10 to i64, !dbg !298
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %bmax, i64 0, i64 %idxprom7, !dbg !298
  %11 = load float, float* %arrayidx8, align 4, !dbg !298
  %12 = load %struct.BB*, %struct.BB** %bb2.addr, align 8, !dbg !301
  %bmax9 = getelementptr inbounds %struct.BB, %struct.BB* %12, i32 0, i32 1, !dbg !302
  %13 = load i32, i32* %i, align 4, !dbg !303
  %idxprom10 = sext i32 %13 to i64, !dbg !301
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %bmax9, i64 0, i64 %idxprom10, !dbg !301
  %14 = load float, float* %arrayidx11, align 4, !dbg !301
  %call12 = call float @max_ff(float %11, float %14), !dbg !304
  %15 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !305
  %bmax13 = getelementptr inbounds %struct.BB, %struct.BB* %15, i32 0, i32 1, !dbg !306
  %16 = load i32, i32* %i, align 4, !dbg !307
  %idxprom14 = sext i32 %16 to i64, !dbg !305
  %arrayidx15 = getelementptr inbounds [3 x float], [3 x float]* %bmax13, i64 0, i64 %idxprom14, !dbg !305
  store float %call12, float* %arrayidx15, align 4, !dbg !308
  br label %for.inc, !dbg !309

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4, !dbg !310
  %inc = add nsw i32 %17, 1, !dbg !310
  store i32 %inc, i32* %i, align 4, !dbg !310
  br label %for.cond, !dbg !311, !llvm.loop !312

for.end:                                          ; preds = %for.cond
  ret void, !dbg !314
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BB_widest_axis(%struct.BB* %bb) #0 !dbg !315 {
entry:
  %retval = alloca i32, align 4
  %bb.addr = alloca %struct.BB*, align 8
  %dim = alloca [3 x float], align 4
  %i = alloca i32, align 4
  store %struct.BB* %bb, %struct.BB** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BB** %bb.addr, metadata !320, metadata !DIExpression()), !dbg !321
  call void @llvm.dbg.declare(metadata [3 x float]* %dim, metadata !322, metadata !DIExpression()), !dbg !323
  call void @llvm.dbg.declare(metadata i32* %i, metadata !324, metadata !DIExpression()), !dbg !325
  store i32 0, i32* %i, align 4, !dbg !326
  br label %for.cond, !dbg !328

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !329
  %cmp = icmp slt i32 %0, 3, !dbg !331
  br i1 %cmp, label %for.body, label %for.end, !dbg !332

for.body:                                         ; preds = %for.cond
  %1 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !333
  %bmax = getelementptr inbounds %struct.BB, %struct.BB* %1, i32 0, i32 1, !dbg !334
  %2 = load i32, i32* %i, align 4, !dbg !335
  %idxprom = sext i32 %2 to i64, !dbg !333
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %bmax, i64 0, i64 %idxprom, !dbg !333
  %3 = load float, float* %arrayidx, align 4, !dbg !333
  %4 = load %struct.BB*, %struct.BB** %bb.addr, align 8, !dbg !336
  %bmin = getelementptr inbounds %struct.BB, %struct.BB* %4, i32 0, i32 0, !dbg !337
  %5 = load i32, i32* %i, align 4, !dbg !338
  %idxprom1 = sext i32 %5 to i64, !dbg !336
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %bmin, i64 0, i64 %idxprom1, !dbg !336
  %6 = load float, float* %arrayidx2, align 4, !dbg !336
  %sub = fsub float %3, %6, !dbg !339
  %7 = load i32, i32* %i, align 4, !dbg !340
  %idxprom3 = sext i32 %7 to i64, !dbg !341
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %dim, i64 0, i64 %idxprom3, !dbg !341
  store float %sub, float* %arrayidx4, align 4, !dbg !342
  br label %for.inc, !dbg !341

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !343
  %inc = add nsw i32 %8, 1, !dbg !343
  store i32 %inc, i32* %i, align 4, !dbg !343
  br label %for.cond, !dbg !344, !llvm.loop !345

for.end:                                          ; preds = %for.cond
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %dim, i64 0, i64 0, !dbg !347
  %9 = load float, float* %arrayidx5, align 4, !dbg !347
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %dim, i64 0, i64 1, !dbg !349
  %10 = load float, float* %arrayidx6, align 4, !dbg !349
  %cmp7 = fcmp ogt float %9, %10, !dbg !350
  br i1 %cmp7, label %if.then, label %if.else12, !dbg !351

if.then:                                          ; preds = %for.end
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %dim, i64 0, i64 0, !dbg !352
  %11 = load float, float* %arrayidx8, align 4, !dbg !352
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %dim, i64 0, i64 2, !dbg !355
  %12 = load float, float* %arrayidx9, align 4, !dbg !355
  %cmp10 = fcmp ogt float %11, %12, !dbg !356
  br i1 %cmp10, label %if.then11, label %if.else, !dbg !357

if.then11:                                        ; preds = %if.then
  store i32 0, i32* %retval, align 4, !dbg !358
  br label %return, !dbg !358

if.else:                                          ; preds = %if.then
  store i32 2, i32* %retval, align 4, !dbg !359
  br label %return, !dbg !359

if.else12:                                        ; preds = %for.end
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %dim, i64 0, i64 1, !dbg !360
  %13 = load float, float* %arrayidx13, align 4, !dbg !360
  %arrayidx14 = getelementptr inbounds [3 x float], [3 x float]* %dim, i64 0, i64 2, !dbg !363
  %14 = load float, float* %arrayidx14, align 4, !dbg !363
  %cmp15 = fcmp ogt float %13, %14, !dbg !364
  br i1 %cmp15, label %if.then16, label %if.else17, !dbg !365

if.then16:                                        ; preds = %if.else12
  store i32 1, i32* %retval, align 4, !dbg !366
  br label %return, !dbg !366

if.else17:                                        ; preds = %if.else12
  store i32 2, i32* %retval, align 4, !dbg !367
  br label %return, !dbg !367

return:                                           ; preds = %if.else17, %if.then16, %if.else, %if.then11
  %15 = load i32, i32* %retval, align 4, !dbg !368
  ret i32 %15, !dbg !368
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BBC_update_centroid(%struct.BBC* %bbc) #0 !dbg !369 {
entry:
  %bbc.addr = alloca %struct.BBC*, align 8
  %i = alloca i32, align 4
  store %struct.BBC* %bbc, %struct.BBC** %bbc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BBC** %bbc.addr, metadata !379, metadata !DIExpression()), !dbg !380
  call void @llvm.dbg.declare(metadata i32* %i, metadata !381, metadata !DIExpression()), !dbg !382
  store i32 0, i32* %i, align 4, !dbg !383
  br label %for.cond, !dbg !385

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !386
  %cmp = icmp slt i32 %0, 3, !dbg !388
  br i1 %cmp, label %for.body, label %for.end, !dbg !389

for.body:                                         ; preds = %for.cond
  %1 = load %struct.BBC*, %struct.BBC** %bbc.addr, align 8, !dbg !390
  %bmin = getelementptr inbounds %struct.BBC, %struct.BBC* %1, i32 0, i32 0, !dbg !391
  %2 = load i32, i32* %i, align 4, !dbg !392
  %idxprom = sext i32 %2 to i64, !dbg !390
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %bmin, i64 0, i64 %idxprom, !dbg !390
  %3 = load float, float* %arrayidx, align 4, !dbg !390
  %4 = load %struct.BBC*, %struct.BBC** %bbc.addr, align 8, !dbg !393
  %bmax = getelementptr inbounds %struct.BBC, %struct.BBC* %4, i32 0, i32 1, !dbg !394
  %5 = load i32, i32* %i, align 4, !dbg !395
  %idxprom1 = sext i32 %5 to i64, !dbg !393
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %bmax, i64 0, i64 %idxprom1, !dbg !393
  %6 = load float, float* %arrayidx2, align 4, !dbg !393
  %add = fadd float %3, %6, !dbg !396
  %mul = fmul float %add, 5.000000e-01, !dbg !397
  %7 = load %struct.BBC*, %struct.BBC** %bbc.addr, align 8, !dbg !398
  %bcentroid = getelementptr inbounds %struct.BBC, %struct.BBC* %7, i32 0, i32 2, !dbg !399
  %8 = load i32, i32* %i, align 4, !dbg !400
  %idxprom3 = sext i32 %8 to i64, !dbg !398
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %bcentroid, i64 0, i64 %idxprom3, !dbg !398
  store float %mul, float* %arrayidx4, align 4, !dbg !401
  br label %for.inc, !dbg !398

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !402
  %inc = add nsw i32 %9, 1, !dbg !402
  store i32 %inc, i32* %i, align 4, !dbg !402
  br label %for.cond, !dbg !403, !llvm.loop !404

for.end:                                          ; preds = %for.cond
  ret void, !dbg !406
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @pbvh_grow_nodes(%struct.PBVH* %bvh, i32 %totnode) #0 !dbg !407 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %totnode.addr = alloca i32, align 4
  %prev = alloca %struct.PBVHNode*, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !742, metadata !DIExpression()), !dbg !743
  store i32 %totnode, i32* %totnode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totnode.addr, metadata !744, metadata !DIExpression()), !dbg !745
  %0 = load i32, i32* %totnode.addr, align 4, !dbg !746
  %1 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !748
  %node_mem_count = getelementptr inbounds %struct.PBVH, %struct.PBVH* %1, i32 0, i32 3, !dbg !749
  %2 = load i32, i32* %node_mem_count, align 8, !dbg !749
  %cmp = icmp sgt i32 %0, %2, !dbg !750
  br i1 %cmp, label %if.then, label %if.end22, !dbg !751

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %prev, metadata !752, metadata !DIExpression()), !dbg !754
  %3 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !755
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %3, i32 0, i32 2, !dbg !756
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !756
  store %struct.PBVHNode* %4, %struct.PBVHNode** %prev, align 8, !dbg !754
  %5 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !757
  %node_mem_count1 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %5, i32 0, i32 3, !dbg !758
  %6 = load i32, i32* %node_mem_count1, align 8, !dbg !759
  %conv = sitofp i32 %6 to double, !dbg !759
  %mul = fmul double %conv, 1.330000e+00, !dbg !759
  %conv2 = fptosi double %mul to i32, !dbg !759
  store i32 %conv2, i32* %node_mem_count1, align 8, !dbg !759
  %7 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !760
  %node_mem_count3 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %7, i32 0, i32 3, !dbg !762
  %8 = load i32, i32* %node_mem_count3, align 8, !dbg !762
  %9 = load i32, i32* %totnode.addr, align 4, !dbg !763
  %cmp4 = icmp slt i32 %8, %9, !dbg !764
  br i1 %cmp4, label %if.then6, label %if.end, !dbg !765

if.then6:                                         ; preds = %if.then
  %10 = load i32, i32* %totnode.addr, align 4, !dbg !766
  %11 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !767
  %node_mem_count7 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %11, i32 0, i32 3, !dbg !768
  store i32 %10, i32* %node_mem_count7, align 8, !dbg !769
  br label %if.end, !dbg !767

if.end:                                           ; preds = %if.then6, %if.then
  %12 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !770
  %13 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !771
  %node_mem_count8 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %13, i32 0, i32 3, !dbg !772
  %14 = load i32, i32* %node_mem_count8, align 8, !dbg !772
  %conv9 = sext i32 %14 to i64, !dbg !771
  %mul10 = mul i64 184, %conv9, !dbg !773
  %call = call i8* %12(i64 %mul10, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0)), !dbg !770
  %15 = bitcast i8* %call to %struct.PBVHNode*, !dbg !770
  %16 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !774
  %nodes11 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %16, i32 0, i32 2, !dbg !775
  store %struct.PBVHNode* %15, %struct.PBVHNode** %nodes11, align 8, !dbg !776
  %17 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !777
  %nodes12 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %17, i32 0, i32 2, !dbg !778
  %18 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes12, align 8, !dbg !778
  %19 = bitcast %struct.PBVHNode* %18 to i8*, !dbg !779
  %20 = load %struct.PBVHNode*, %struct.PBVHNode** %prev, align 8, !dbg !780
  %21 = bitcast %struct.PBVHNode* %20 to i8*, !dbg !779
  %22 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !781
  %totnode13 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %22, i32 0, i32 4, !dbg !782
  %23 = load i32, i32* %totnode13, align 4, !dbg !782
  %conv14 = sext i32 %23 to i64, !dbg !781
  %mul15 = mul i64 %conv14, 184, !dbg !783
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %21, i64 %mul15, i1 false), !dbg !779
  %24 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !784
  %nodes16 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %24, i32 0, i32 2, !dbg !785
  %25 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes16, align 8, !dbg !785
  %26 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !786
  %totnode17 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %26, i32 0, i32 4, !dbg !787
  %27 = load i32, i32* %totnode17, align 4, !dbg !787
  %idx.ext = sext i32 %27 to i64, !dbg !788
  %add.ptr = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %25, i64 %idx.ext, !dbg !788
  %28 = bitcast %struct.PBVHNode* %add.ptr to i8*, !dbg !789
  %29 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !790
  %node_mem_count18 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %29, i32 0, i32 3, !dbg !791
  %30 = load i32, i32* %node_mem_count18, align 8, !dbg !791
  %31 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !792
  %totnode19 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %31, i32 0, i32 4, !dbg !793
  %32 = load i32, i32* %totnode19, align 4, !dbg !793
  %sub = sub nsw i32 %30, %32, !dbg !794
  %conv20 = sext i32 %sub to i64, !dbg !795
  %mul21 = mul i64 %conv20, 184, !dbg !796
  call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 %mul21, i1 false), !dbg !789
  %33 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !797
  %34 = load %struct.PBVHNode*, %struct.PBVHNode** %prev, align 8, !dbg !798
  %35 = bitcast %struct.PBVHNode* %34 to i8*, !dbg !798
  call void %33(i8* %35), !dbg !797
  br label %if.end22, !dbg !799

if.end22:                                         ; preds = %if.end, %entry
  %36 = load i32, i32* %totnode.addr, align 4, !dbg !800
  %37 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !801
  %totnode23 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %37, i32 0, i32 4, !dbg !802
  store i32 %36, i32* %totnode23, align 4, !dbg !803
  ret void, !dbg !804
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BKE_pbvh_count_grid_quads(i32** %grid_hidden, i32* %grid_indices, i32 %totgrid, i32 %gridsize) #0 !dbg !805 {
entry:
  %grid_hidden.addr = alloca i32**, align 8
  %grid_indices.addr = alloca i32*, align 8
  %totgrid.addr = alloca i32, align 4
  %gridsize.addr = alloca i32, align 4
  %gridarea = alloca i32, align 4
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %totquad = alloca i32, align 4
  %gh = alloca i32*, align 8
  store i32** %grid_hidden, i32*** %grid_hidden.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %grid_hidden.addr, metadata !808, metadata !DIExpression()), !dbg !809
  store i32* %grid_indices, i32** %grid_indices.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %grid_indices.addr, metadata !810, metadata !DIExpression()), !dbg !811
  store i32 %totgrid, i32* %totgrid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totgrid.addr, metadata !812, metadata !DIExpression()), !dbg !813
  store i32 %gridsize, i32* %gridsize.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %gridsize.addr, metadata !814, metadata !DIExpression()), !dbg !815
  call void @llvm.dbg.declare(metadata i32* %gridarea, metadata !816, metadata !DIExpression()), !dbg !817
  %0 = load i32, i32* %gridsize.addr, align 4, !dbg !818
  %sub = sub nsw i32 %0, 1, !dbg !819
  %1 = load i32, i32* %gridsize.addr, align 4, !dbg !820
  %sub1 = sub nsw i32 %1, 1, !dbg !821
  %mul = mul nsw i32 %sub, %sub1, !dbg !822
  store i32 %mul, i32* %gridarea, align 4, !dbg !817
  call void @llvm.dbg.declare(metadata i32* %i, metadata !823, metadata !DIExpression()), !dbg !824
  call void @llvm.dbg.declare(metadata i32* %x, metadata !825, metadata !DIExpression()), !dbg !826
  call void @llvm.dbg.declare(metadata i32* %y, metadata !827, metadata !DIExpression()), !dbg !828
  call void @llvm.dbg.declare(metadata i32* %totquad, metadata !829, metadata !DIExpression()), !dbg !830
  store i32 0, i32* %i, align 4, !dbg !831
  store i32 0, i32* %totquad, align 4, !dbg !833
  br label %for.cond, !dbg !834

for.cond:                                         ; preds = %for.inc19, %entry
  %2 = load i32, i32* %i, align 4, !dbg !835
  %3 = load i32, i32* %totgrid.addr, align 4, !dbg !837
  %cmp = icmp slt i32 %2, %3, !dbg !838
  br i1 %cmp, label %for.body, label %for.end21, !dbg !839

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32** %gh, metadata !840, metadata !DIExpression()), !dbg !844
  %4 = load i32**, i32*** %grid_hidden.addr, align 8, !dbg !845
  %5 = load i32*, i32** %grid_indices.addr, align 8, !dbg !846
  %6 = load i32, i32* %i, align 4, !dbg !847
  %idxprom = sext i32 %6 to i64, !dbg !846
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom, !dbg !846
  %7 = load i32, i32* %arrayidx, align 4, !dbg !846
  %idxprom2 = sext i32 %7 to i64, !dbg !845
  %arrayidx3 = getelementptr inbounds i32*, i32** %4, i64 %idxprom2, !dbg !845
  %8 = load i32*, i32** %arrayidx3, align 8, !dbg !845
  store i32* %8, i32** %gh, align 8, !dbg !844
  %9 = load i32*, i32** %gh, align 8, !dbg !848
  %tobool = icmp ne i32* %9, null, !dbg !848
  br i1 %tobool, label %if.then, label %if.else, !dbg !850

if.then:                                          ; preds = %for.body
  store i32 0, i32* %y, align 4, !dbg !851
  br label %for.cond4, !dbg !854

for.cond4:                                        ; preds = %for.inc15, %if.then
  %10 = load i32, i32* %y, align 4, !dbg !855
  %11 = load i32, i32* %gridsize.addr, align 4, !dbg !857
  %sub5 = sub nsw i32 %11, 1, !dbg !858
  %cmp6 = icmp slt i32 %10, %sub5, !dbg !859
  br i1 %cmp6, label %for.body7, label %for.end17, !dbg !860

for.body7:                                        ; preds = %for.cond4
  store i32 0, i32* %x, align 4, !dbg !861
  br label %for.cond8, !dbg !864

for.cond8:                                        ; preds = %for.inc, %for.body7
  %12 = load i32, i32* %x, align 4, !dbg !865
  %13 = load i32, i32* %gridsize.addr, align 4, !dbg !867
  %sub9 = sub nsw i32 %13, 1, !dbg !868
  %cmp10 = icmp slt i32 %12, %sub9, !dbg !869
  br i1 %cmp10, label %for.body11, label %for.end, !dbg !870

for.body11:                                       ; preds = %for.cond8
  %14 = load i32*, i32** %gh, align 8, !dbg !871
  %15 = load i32, i32* %gridsize.addr, align 4, !dbg !874
  %16 = load i32, i32* %x, align 4, !dbg !875
  %17 = load i32, i32* %y, align 4, !dbg !876
  %call = call zeroext i8 @paint_is_grid_face_hidden(i32* %14, i32 %15, i32 %16, i32 %17), !dbg !877
  %tobool12 = icmp ne i8 %call, 0, !dbg !877
  br i1 %tobool12, label %if.end, label %if.then13, !dbg !878

if.then13:                                        ; preds = %for.body11
  %18 = load i32, i32* %totquad, align 4, !dbg !879
  %inc = add nsw i32 %18, 1, !dbg !879
  store i32 %inc, i32* %totquad, align 4, !dbg !879
  br label %if.end, !dbg !880

if.end:                                           ; preds = %if.then13, %for.body11
  br label %for.inc, !dbg !881

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %x, align 4, !dbg !882
  %inc14 = add nsw i32 %19, 1, !dbg !882
  store i32 %inc14, i32* %x, align 4, !dbg !882
  br label %for.cond8, !dbg !883, !llvm.loop !884

for.end:                                          ; preds = %for.cond8
  br label %for.inc15, !dbg !886

for.inc15:                                        ; preds = %for.end
  %20 = load i32, i32* %y, align 4, !dbg !887
  %inc16 = add nsw i32 %20, 1, !dbg !887
  store i32 %inc16, i32* %y, align 4, !dbg !887
  br label %for.cond4, !dbg !888, !llvm.loop !889

for.end17:                                        ; preds = %for.cond4
  br label %if.end18, !dbg !891

if.else:                                          ; preds = %for.body
  %21 = load i32, i32* %gridarea, align 4, !dbg !892
  %22 = load i32, i32* %totquad, align 4, !dbg !893
  %add = add nsw i32 %22, %21, !dbg !893
  store i32 %add, i32* %totquad, align 4, !dbg !893
  br label %if.end18

if.end18:                                         ; preds = %if.else, %for.end17
  br label %for.inc19, !dbg !894

for.inc19:                                        ; preds = %if.end18
  %23 = load i32, i32* %i, align 4, !dbg !895
  %inc20 = add nsw i32 %23, 1, !dbg !895
  store i32 %inc20, i32* %i, align 4, !dbg !895
  br label %for.cond, !dbg !896, !llvm.loop !897

for.end21:                                        ; preds = %for.cond
  %24 = load i32, i32* %totquad, align 4, !dbg !899
  ret i32 %24, !dbg !900
}

declare dso_local zeroext i8 @paint_is_grid_face_hidden(i32*, i32, i32, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_build_mesh(%struct.PBVH* %bvh, %struct.MFace* %faces, %struct.MVert* %verts, i32 %totface, i32 %totvert, %struct.CustomData* %vdata) #0 !dbg !901 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %faces.addr = alloca %struct.MFace*, align 8
  %verts.addr = alloca %struct.MVert*, align 8
  %totface.addr = alloca i32, align 4
  %totvert.addr = alloca i32, align 4
  %vdata.addr = alloca %struct.CustomData*, align 8
  %prim_bbc = alloca %struct.BBC*, align 8
  %cb = alloca %struct.BB, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %f = alloca %struct.MFace*, align 8
  %sides = alloca i32, align 4
  %bbc = alloca %struct.BBC*, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !905, metadata !DIExpression()), !dbg !906
  store %struct.MFace* %faces, %struct.MFace** %faces.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.MFace** %faces.addr, metadata !907, metadata !DIExpression()), !dbg !908
  store %struct.MVert* %verts, %struct.MVert** %verts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.MVert** %verts.addr, metadata !909, metadata !DIExpression()), !dbg !910
  store i32 %totface, i32* %totface.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totface.addr, metadata !911, metadata !DIExpression()), !dbg !912
  store i32 %totvert, i32* %totvert.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totvert.addr, metadata !913, metadata !DIExpression()), !dbg !914
  store %struct.CustomData* %vdata, %struct.CustomData** %vdata.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CustomData** %vdata.addr, metadata !915, metadata !DIExpression()), !dbg !916
  call void @llvm.dbg.declare(metadata %struct.BBC** %prim_bbc, metadata !917, metadata !DIExpression()), !dbg !918
  store %struct.BBC* null, %struct.BBC** %prim_bbc, align 8, !dbg !918
  call void @llvm.dbg.declare(metadata %struct.BB* %cb, metadata !919, metadata !DIExpression()), !dbg !920
  call void @llvm.dbg.declare(metadata i32* %i, metadata !921, metadata !DIExpression()), !dbg !922
  call void @llvm.dbg.declare(metadata i32* %j, metadata !923, metadata !DIExpression()), !dbg !924
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !925
  %type = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 0, !dbg !926
  store i32 0, i32* %type, align 8, !dbg !927
  %1 = load %struct.MFace*, %struct.MFace** %faces.addr, align 8, !dbg !928
  %2 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !929
  %faces1 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %2, i32 0, i32 10, !dbg !930
  store %struct.MFace* %1, %struct.MFace** %faces1, align 8, !dbg !931
  %3 = load %struct.MVert*, %struct.MVert** %verts.addr, align 8, !dbg !932
  %4 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !933
  %verts2 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %4, i32 0, i32 9, !dbg !934
  store %struct.MVert* %3, %struct.MVert** %verts2, align 8, !dbg !935
  %5 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !936
  %6 = load i32, i32* %totvert.addr, align 4, !dbg !936
  %shr = ashr i32 %6, 5, !dbg !936
  %add = add nsw i32 %shr, 1, !dbg !936
  %conv = sext i32 %add to i64, !dbg !936
  %mul = mul i64 %conv, 4, !dbg !936
  %call = call i8* %5(i64 %mul, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0)), !dbg !936
  %7 = bitcast i8* %call to i32*, !dbg !936
  %8 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !937
  %vert_bitmap = getelementptr inbounds %struct.PBVH, %struct.PBVH* %8, i32 0, i32 19, !dbg !938
  store i32* %7, i32** %vert_bitmap, align 8, !dbg !939
  %9 = load i32, i32* %totvert.addr, align 4, !dbg !940
  %10 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !941
  %totvert3 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %10, i32 0, i32 7, !dbg !942
  store i32 %9, i32* %totvert3, align 4, !dbg !943
  %11 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !944
  %leaf_limit = getelementptr inbounds %struct.PBVH, %struct.PBVH* %11, i32 0, i32 8, !dbg !945
  store i32 10000, i32* %leaf_limit, align 8, !dbg !946
  %12 = load %struct.CustomData*, %struct.CustomData** %vdata.addr, align 8, !dbg !947
  %13 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !948
  %vdata4 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %13, i32 0, i32 11, !dbg !949
  store %struct.CustomData* %12, %struct.CustomData** %vdata4, align 8, !dbg !950
  call void @BB_reset(%struct.BB* %cb), !dbg !951
  %14 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !952
  %15 = load i32, i32* %totface.addr, align 4, !dbg !953
  %conv5 = sext i32 %15 to i64, !dbg !953
  %mul6 = mul i64 36, %conv5, !dbg !954
  %call7 = call i8* %14(i64 %mul6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0)), !dbg !952
  %16 = bitcast i8* %call7 to %struct.BBC*, !dbg !952
  store %struct.BBC* %16, %struct.BBC** %prim_bbc, align 8, !dbg !955
  store i32 0, i32* %i, align 4, !dbg !956
  br label %for.cond, !dbg !958

for.cond:                                         ; preds = %for.inc18, %entry
  %17 = load i32, i32* %i, align 4, !dbg !959
  %18 = load i32, i32* %totface.addr, align 4, !dbg !961
  %cmp = icmp slt i32 %17, %18, !dbg !962
  br i1 %cmp, label %for.body, label %for.end20, !dbg !963

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.MFace** %f, metadata !964, metadata !DIExpression()), !dbg !966
  %19 = load %struct.MFace*, %struct.MFace** %faces.addr, align 8, !dbg !967
  %20 = load i32, i32* %i, align 4, !dbg !968
  %idx.ext = sext i32 %20 to i64, !dbg !969
  %add.ptr = getelementptr inbounds %struct.MFace, %struct.MFace* %19, i64 %idx.ext, !dbg !969
  store %struct.MFace* %add.ptr, %struct.MFace** %f, align 8, !dbg !966
  call void @llvm.dbg.declare(metadata i32* %sides, metadata !970, metadata !DIExpression()), !dbg !972
  %21 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !973
  %v4 = getelementptr inbounds %struct.MFace, %struct.MFace* %21, i32 0, i32 3, !dbg !974
  %22 = load i32, i32* %v4, align 4, !dbg !974
  %tobool = icmp ne i32 %22, 0, !dbg !973
  %23 = zext i1 %tobool to i64, !dbg !973
  %cond = select i1 %tobool, i32 4, i32 3, !dbg !973
  store i32 %cond, i32* %sides, align 4, !dbg !972
  call void @llvm.dbg.declare(metadata %struct.BBC** %bbc, metadata !975, metadata !DIExpression()), !dbg !976
  %24 = load %struct.BBC*, %struct.BBC** %prim_bbc, align 8, !dbg !977
  %25 = load i32, i32* %i, align 4, !dbg !978
  %idx.ext9 = sext i32 %25 to i64, !dbg !979
  %add.ptr10 = getelementptr inbounds %struct.BBC, %struct.BBC* %24, i64 %idx.ext9, !dbg !979
  store %struct.BBC* %add.ptr10, %struct.BBC** %bbc, align 8, !dbg !976
  %26 = load %struct.BBC*, %struct.BBC** %bbc, align 8, !dbg !980
  %27 = bitcast %struct.BBC* %26 to %struct.BB*, !dbg !981
  call void @BB_reset(%struct.BB* %27), !dbg !982
  store i32 0, i32* %j, align 4, !dbg !983
  br label %for.cond11, !dbg !985

for.cond11:                                       ; preds = %for.inc, %for.body
  %28 = load i32, i32* %j, align 4, !dbg !986
  %29 = load i32, i32* %sides, align 4, !dbg !988
  %cmp12 = icmp slt i32 %28, %29, !dbg !989
  br i1 %cmp12, label %for.body14, label %for.end, !dbg !990

for.body14:                                       ; preds = %for.cond11
  %30 = load %struct.BBC*, %struct.BBC** %bbc, align 8, !dbg !991
  %31 = bitcast %struct.BBC* %30 to %struct.BB*, !dbg !992
  %32 = load %struct.MVert*, %struct.MVert** %verts.addr, align 8, !dbg !993
  %33 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !994
  %v1 = getelementptr inbounds %struct.MFace, %struct.MFace* %33, i32 0, i32 0, !dbg !995
  %34 = load i32, i32* %j, align 4, !dbg !996
  %idxprom = sext i32 %34 to i64, !dbg !997
  %arrayidx = getelementptr inbounds i32, i32* %v1, i64 %idxprom, !dbg !997
  %35 = load i32, i32* %arrayidx, align 4, !dbg !997
  %idxprom15 = zext i32 %35 to i64, !dbg !993
  %arrayidx16 = getelementptr inbounds %struct.MVert, %struct.MVert* %32, i64 %idxprom15, !dbg !993
  %co = getelementptr inbounds %struct.MVert, %struct.MVert* %arrayidx16, i32 0, i32 0, !dbg !998
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !993
  call void @BB_expand(%struct.BB* %31, float* %arraydecay), !dbg !999
  br label %for.inc, !dbg !999

for.inc:                                          ; preds = %for.body14
  %36 = load i32, i32* %j, align 4, !dbg !1000
  %inc = add nsw i32 %36, 1, !dbg !1000
  store i32 %inc, i32* %j, align 4, !dbg !1000
  br label %for.cond11, !dbg !1001, !llvm.loop !1002

for.end:                                          ; preds = %for.cond11
  %37 = load %struct.BBC*, %struct.BBC** %bbc, align 8, !dbg !1004
  call void @BBC_update_centroid(%struct.BBC* %37), !dbg !1005
  %38 = load %struct.BBC*, %struct.BBC** %bbc, align 8, !dbg !1006
  %bcentroid = getelementptr inbounds %struct.BBC, %struct.BBC* %38, i32 0, i32 2, !dbg !1007
  %arraydecay17 = getelementptr inbounds [3 x float], [3 x float]* %bcentroid, i64 0, i64 0, !dbg !1006
  call void @BB_expand(%struct.BB* %cb, float* %arraydecay17), !dbg !1008
  br label %for.inc18, !dbg !1009

for.inc18:                                        ; preds = %for.end
  %39 = load i32, i32* %i, align 4, !dbg !1010
  %inc19 = add nsw i32 %39, 1, !dbg !1010
  store i32 %inc19, i32* %i, align 4, !dbg !1010
  br label %for.cond, !dbg !1011, !llvm.loop !1012

for.end20:                                        ; preds = %for.cond
  %40 = load i32, i32* %totface.addr, align 4, !dbg !1014
  %tobool21 = icmp ne i32 %40, 0, !dbg !1014
  br i1 %tobool21, label %if.then, label %if.end, !dbg !1016

if.then:                                          ; preds = %for.end20
  %41 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1017
  %42 = load %struct.BBC*, %struct.BBC** %prim_bbc, align 8, !dbg !1018
  %43 = load i32, i32* %totface.addr, align 4, !dbg !1019
  call void @pbvh_build(%struct.PBVH* %41, %struct.BB* %cb, %struct.BBC* %42, i32 %43), !dbg !1020
  br label %if.end, !dbg !1020

if.end:                                           ; preds = %if.then, %for.end20
  %44 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1021
  %45 = load %struct.BBC*, %struct.BBC** %prim_bbc, align 8, !dbg !1022
  %46 = bitcast %struct.BBC* %45 to i8*, !dbg !1022
  call void %44(i8* %46), !dbg !1021
  %47 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1023
  %48 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1024
  %vert_bitmap22 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %48, i32 0, i32 19, !dbg !1025
  %49 = load i32*, i32** %vert_bitmap22, align 8, !dbg !1025
  %50 = bitcast i32* %49 to i8*, !dbg !1024
  call void %47(i8* %50), !dbg !1023
  ret void, !dbg !1026
}

; Function Attrs: noinline nounwind uwtable
define internal void @pbvh_build(%struct.PBVH* %bvh, %struct.BB* %cb, %struct.BBC* %prim_bbc, i32 %totprim) #0 !dbg !1027 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %cb.addr = alloca %struct.BB*, align 8
  %prim_bbc.addr = alloca %struct.BBC*, align 8
  %totprim.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !1030, metadata !DIExpression()), !dbg !1031
  store %struct.BB* %cb, %struct.BB** %cb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BB** %cb.addr, metadata !1032, metadata !DIExpression()), !dbg !1033
  store %struct.BBC* %prim_bbc, %struct.BBC** %prim_bbc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BBC** %prim_bbc.addr, metadata !1034, metadata !DIExpression()), !dbg !1035
  store i32 %totprim, i32* %totprim.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totprim.addr, metadata !1036, metadata !DIExpression()), !dbg !1037
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1038, metadata !DIExpression()), !dbg !1039
  %0 = load i32, i32* %totprim.addr, align 4, !dbg !1040
  %1 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1042
  %totprim1 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %1, i32 0, i32 6, !dbg !1043
  %2 = load i32, i32* %totprim1, align 8, !dbg !1043
  %cmp = icmp ne i32 %0, %2, !dbg !1044
  br i1 %cmp, label %if.then, label %if.end23, !dbg !1045

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %totprim.addr, align 4, !dbg !1046
  %4 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1048
  %totprim2 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %4, i32 0, i32 6, !dbg !1049
  store i32 %3, i32* %totprim2, align 8, !dbg !1050
  %5 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1051
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %5, i32 0, i32 2, !dbg !1053
  %6 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !1053
  %tobool = icmp ne %struct.PBVHNode* %6, null, !dbg !1051
  br i1 %tobool, label %if.then3, label %if.end, !dbg !1054

if.then3:                                         ; preds = %if.then
  %7 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1055
  %8 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1056
  %nodes4 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %8, i32 0, i32 2, !dbg !1057
  %9 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes4, align 8, !dbg !1057
  %10 = bitcast %struct.PBVHNode* %9 to i8*, !dbg !1056
  call void %7(i8* %10), !dbg !1055
  br label %if.end, !dbg !1055

if.end:                                           ; preds = %if.then3, %if.then
  %11 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1058
  %prim_indices = getelementptr inbounds %struct.PBVH, %struct.PBVH* %11, i32 0, i32 5, !dbg !1060
  %12 = load i32*, i32** %prim_indices, align 8, !dbg !1060
  %tobool5 = icmp ne i32* %12, null, !dbg !1058
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !1061

if.then6:                                         ; preds = %if.end
  %13 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1062
  %14 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1063
  %prim_indices7 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %14, i32 0, i32 5, !dbg !1064
  %15 = load i32*, i32** %prim_indices7, align 8, !dbg !1064
  %16 = bitcast i32* %15 to i8*, !dbg !1063
  call void %13(i8* %16), !dbg !1062
  br label %if.end8, !dbg !1062

if.end8:                                          ; preds = %if.then6, %if.end
  %17 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !1065
  %18 = load i32, i32* %totprim.addr, align 4, !dbg !1066
  %conv = sext i32 %18 to i64, !dbg !1066
  %mul = mul i64 4, %conv, !dbg !1067
  %call = call i8* %17(i64 %mul, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0)), !dbg !1065
  %19 = bitcast i8* %call to i32*, !dbg !1065
  %20 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1068
  %prim_indices9 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %20, i32 0, i32 5, !dbg !1069
  store i32* %19, i32** %prim_indices9, align 8, !dbg !1070
  store i32 0, i32* %i, align 4, !dbg !1071
  br label %for.cond, !dbg !1073

for.cond:                                         ; preds = %for.inc, %if.end8
  %21 = load i32, i32* %i, align 4, !dbg !1074
  %22 = load i32, i32* %totprim.addr, align 4, !dbg !1076
  %cmp10 = icmp slt i32 %21, %22, !dbg !1077
  br i1 %cmp10, label %for.body, label %for.end, !dbg !1078

for.body:                                         ; preds = %for.cond
  %23 = load i32, i32* %i, align 4, !dbg !1079
  %24 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1080
  %prim_indices12 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %24, i32 0, i32 5, !dbg !1081
  %25 = load i32*, i32** %prim_indices12, align 8, !dbg !1081
  %26 = load i32, i32* %i, align 4, !dbg !1082
  %idxprom = sext i32 %26 to i64, !dbg !1080
  %arrayidx = getelementptr inbounds i32, i32* %25, i64 %idxprom, !dbg !1080
  store i32 %23, i32* %arrayidx, align 4, !dbg !1083
  br label %for.inc, !dbg !1080

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4, !dbg !1084
  %inc = add nsw i32 %27, 1, !dbg !1084
  store i32 %inc, i32* %i, align 4, !dbg !1084
  br label %for.cond, !dbg !1085, !llvm.loop !1086

for.end:                                          ; preds = %for.cond
  %28 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1088
  %totnode = getelementptr inbounds %struct.PBVH, %struct.PBVH* %28, i32 0, i32 4, !dbg !1089
  store i32 0, i32* %totnode, align 4, !dbg !1090
  %29 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1091
  %node_mem_count = getelementptr inbounds %struct.PBVH, %struct.PBVH* %29, i32 0, i32 3, !dbg !1093
  %30 = load i32, i32* %node_mem_count, align 8, !dbg !1093
  %cmp13 = icmp slt i32 %30, 100, !dbg !1094
  br i1 %cmp13, label %if.then15, label %if.end22, !dbg !1095

if.then15:                                        ; preds = %for.end
  %31 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1096
  %node_mem_count16 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %31, i32 0, i32 3, !dbg !1098
  store i32 100, i32* %node_mem_count16, align 8, !dbg !1099
  %32 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !1100
  %33 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1101
  %node_mem_count17 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %33, i32 0, i32 3, !dbg !1102
  %34 = load i32, i32* %node_mem_count17, align 8, !dbg !1102
  %conv18 = sext i32 %34 to i64, !dbg !1101
  %mul19 = mul i64 184, %conv18, !dbg !1103
  %call20 = call i8* %32(i64 %mul19, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.10, i64 0, i64 0)), !dbg !1100
  %35 = bitcast i8* %call20 to %struct.PBVHNode*, !dbg !1100
  %36 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1104
  %nodes21 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %36, i32 0, i32 2, !dbg !1105
  store %struct.PBVHNode* %35, %struct.PBVHNode** %nodes21, align 8, !dbg !1106
  br label %if.end22, !dbg !1107

if.end22:                                         ; preds = %if.then15, %for.end
  br label %if.end23, !dbg !1108

if.end23:                                         ; preds = %if.end22, %entry
  %37 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1109
  %totnode24 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %37, i32 0, i32 4, !dbg !1110
  store i32 1, i32* %totnode24, align 4, !dbg !1111
  %38 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1112
  %39 = load %struct.BB*, %struct.BB** %cb.addr, align 8, !dbg !1113
  %40 = load %struct.BBC*, %struct.BBC** %prim_bbc.addr, align 8, !dbg !1114
  %41 = load i32, i32* %totprim.addr, align 4, !dbg !1115
  call void @build_sub(%struct.PBVH* %38, i32 0, %struct.BB* %39, %struct.BBC* %40, i32 0, i32 %41), !dbg !1116
  ret void, !dbg !1117
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_build_grids(%struct.PBVH* %bvh, %struct.CCGElem** %grids, %struct.DMGridAdjacency* %gridadj, i32 %totgrid, %struct.CCGKey* %key, i8** %gridfaces, %struct.DMFlagMat* %flagmats, i32** %grid_hidden) #0 !dbg !1118 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %grids.addr = alloca %struct.CCGElem**, align 8
  %gridadj.addr = alloca %struct.DMGridAdjacency*, align 8
  %totgrid.addr = alloca i32, align 4
  %key.addr = alloca %struct.CCGKey*, align 8
  %gridfaces.addr = alloca i8**, align 8
  %flagmats.addr = alloca %struct.DMFlagMat*, align 8
  %grid_hidden.addr = alloca i32**, align 8
  %prim_bbc = alloca %struct.BBC*, align 8
  %cb = alloca %struct.BB, align 4
  %gridsize = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %grid = alloca %struct.CCGElem*, align 8
  %bbc = alloca %struct.BBC*, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !1123, metadata !DIExpression()), !dbg !1124
  store %struct.CCGElem** %grids, %struct.CCGElem*** %grids.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGElem*** %grids.addr, metadata !1125, metadata !DIExpression()), !dbg !1126
  store %struct.DMGridAdjacency* %gridadj, %struct.DMGridAdjacency** %gridadj.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DMGridAdjacency** %gridadj.addr, metadata !1127, metadata !DIExpression()), !dbg !1128
  store i32 %totgrid, i32* %totgrid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totgrid.addr, metadata !1129, metadata !DIExpression()), !dbg !1130
  store %struct.CCGKey* %key, %struct.CCGKey** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGKey** %key.addr, metadata !1131, metadata !DIExpression()), !dbg !1132
  store i8** %gridfaces, i8*** %gridfaces.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %gridfaces.addr, metadata !1133, metadata !DIExpression()), !dbg !1134
  store %struct.DMFlagMat* %flagmats, %struct.DMFlagMat** %flagmats.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DMFlagMat** %flagmats.addr, metadata !1135, metadata !DIExpression()), !dbg !1136
  store i32** %grid_hidden, i32*** %grid_hidden.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %grid_hidden.addr, metadata !1137, metadata !DIExpression()), !dbg !1138
  call void @llvm.dbg.declare(metadata %struct.BBC** %prim_bbc, metadata !1139, metadata !DIExpression()), !dbg !1140
  store %struct.BBC* null, %struct.BBC** %prim_bbc, align 8, !dbg !1140
  call void @llvm.dbg.declare(metadata %struct.BB* %cb, metadata !1141, metadata !DIExpression()), !dbg !1142
  call void @llvm.dbg.declare(metadata i32* %gridsize, metadata !1143, metadata !DIExpression()), !dbg !1144
  %0 = load %struct.CCGKey*, %struct.CCGKey** %key.addr, align 8, !dbg !1145
  %grid_size = getelementptr inbounds %struct.CCGKey, %struct.CCGKey* %0, i32 0, i32 2, !dbg !1146
  %1 = load i32, i32* %grid_size, align 4, !dbg !1146
  store i32 %1, i32* %gridsize, align 4, !dbg !1144
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1147, metadata !DIExpression()), !dbg !1148
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1149, metadata !DIExpression()), !dbg !1150
  %2 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1151
  %type = getelementptr inbounds %struct.PBVH, %struct.PBVH* %2, i32 0, i32 0, !dbg !1152
  store i32 1, i32* %type, align 8, !dbg !1153
  %3 = load %struct.CCGElem**, %struct.CCGElem*** %grids.addr, align 8, !dbg !1154
  %4 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1155
  %grids1 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %4, i32 0, i32 13, !dbg !1156
  store %struct.CCGElem** %3, %struct.CCGElem*** %grids1, align 8, !dbg !1157
  %5 = load %struct.DMGridAdjacency*, %struct.DMGridAdjacency** %gridadj.addr, align 8, !dbg !1158
  %6 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1159
  %gridadj2 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %6, i32 0, i32 14, !dbg !1160
  store %struct.DMGridAdjacency* %5, %struct.DMGridAdjacency** %gridadj2, align 8, !dbg !1161
  %7 = load i8**, i8*** %gridfaces.addr, align 8, !dbg !1162
  %8 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1163
  %gridfaces3 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %8, i32 0, i32 15, !dbg !1164
  store i8** %7, i8*** %gridfaces3, align 8, !dbg !1165
  %9 = load %struct.DMFlagMat*, %struct.DMFlagMat** %flagmats.addr, align 8, !dbg !1166
  %10 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1167
  %grid_flag_mats = getelementptr inbounds %struct.PBVH, %struct.PBVH* %10, i32 0, i32 16, !dbg !1168
  store %struct.DMFlagMat* %9, %struct.DMFlagMat** %grid_flag_mats, align 8, !dbg !1169
  %11 = load i32, i32* %totgrid.addr, align 4, !dbg !1170
  %12 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1171
  %totgrid4 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %12, i32 0, i32 17, !dbg !1172
  store i32 %11, i32* %totgrid4, align 8, !dbg !1173
  %13 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1174
  %gridkey = getelementptr inbounds %struct.PBVH, %struct.PBVH* %13, i32 0, i32 12, !dbg !1175
  %14 = load %struct.CCGKey*, %struct.CCGKey** %key.addr, align 8, !dbg !1176
  %15 = bitcast %struct.CCGKey* %gridkey to i8*, !dbg !1177
  %16 = bitcast %struct.CCGKey* %14 to i8*, !dbg !1177
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 4 %16, i64 40, i1 false), !dbg !1177
  %17 = load i32**, i32*** %grid_hidden.addr, align 8, !dbg !1178
  %18 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1179
  %grid_hidden5 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %18, i32 0, i32 18, !dbg !1180
  store i32** %17, i32*** %grid_hidden5, align 8, !dbg !1181
  %19 = load i32, i32* %gridsize, align 4, !dbg !1182
  %sub = sub nsw i32 %19, 1, !dbg !1183
  %20 = load i32, i32* %gridsize, align 4, !dbg !1184
  %sub6 = sub nsw i32 %20, 1, !dbg !1185
  %mul = mul nsw i32 %sub, %sub6, !dbg !1186
  %div = sdiv i32 10000, %mul, !dbg !1187
  %call = call i32 @max_ii(i32 %div, i32 1), !dbg !1188
  %21 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1189
  %leaf_limit = getelementptr inbounds %struct.PBVH, %struct.PBVH* %21, i32 0, i32 8, !dbg !1190
  store i32 %call, i32* %leaf_limit, align 8, !dbg !1191
  call void @BB_reset(%struct.BB* %cb), !dbg !1192
  %22 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !1193
  %23 = load i32, i32* %totgrid.addr, align 4, !dbg !1194
  %conv = sext i32 %23 to i64, !dbg !1194
  %mul7 = mul i64 36, %conv, !dbg !1195
  %call8 = call i8* %22(i64 %mul7, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0)), !dbg !1193
  %24 = bitcast i8* %call8 to %struct.BBC*, !dbg !1193
  store %struct.BBC* %24, %struct.BBC** %prim_bbc, align 8, !dbg !1196
  store i32 0, i32* %i, align 4, !dbg !1197
  br label %for.cond, !dbg !1199

for.cond:                                         ; preds = %for.inc16, %entry
  %25 = load i32, i32* %i, align 4, !dbg !1200
  %26 = load i32, i32* %totgrid.addr, align 4, !dbg !1202
  %cmp = icmp slt i32 %25, %26, !dbg !1203
  br i1 %cmp, label %for.body, label %for.end18, !dbg !1204

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.CCGElem** %grid, metadata !1205, metadata !DIExpression()), !dbg !1207
  %27 = load %struct.CCGElem**, %struct.CCGElem*** %grids.addr, align 8, !dbg !1208
  %28 = load i32, i32* %i, align 4, !dbg !1209
  %idxprom = sext i32 %28 to i64, !dbg !1208
  %arrayidx = getelementptr inbounds %struct.CCGElem*, %struct.CCGElem** %27, i64 %idxprom, !dbg !1208
  %29 = load %struct.CCGElem*, %struct.CCGElem** %arrayidx, align 8, !dbg !1208
  store %struct.CCGElem* %29, %struct.CCGElem** %grid, align 8, !dbg !1207
  call void @llvm.dbg.declare(metadata %struct.BBC** %bbc, metadata !1210, metadata !DIExpression()), !dbg !1211
  %30 = load %struct.BBC*, %struct.BBC** %prim_bbc, align 8, !dbg !1212
  %31 = load i32, i32* %i, align 4, !dbg !1213
  %idx.ext = sext i32 %31 to i64, !dbg !1214
  %add.ptr = getelementptr inbounds %struct.BBC, %struct.BBC* %30, i64 %idx.ext, !dbg !1214
  store %struct.BBC* %add.ptr, %struct.BBC** %bbc, align 8, !dbg !1211
  %32 = load %struct.BBC*, %struct.BBC** %bbc, align 8, !dbg !1215
  %33 = bitcast %struct.BBC* %32 to %struct.BB*, !dbg !1216
  call void @BB_reset(%struct.BB* %33), !dbg !1217
  store i32 0, i32* %j, align 4, !dbg !1218
  br label %for.cond10, !dbg !1220

for.cond10:                                       ; preds = %for.inc, %for.body
  %34 = load i32, i32* %j, align 4, !dbg !1221
  %35 = load i32, i32* %gridsize, align 4, !dbg !1223
  %36 = load i32, i32* %gridsize, align 4, !dbg !1224
  %mul11 = mul nsw i32 %35, %36, !dbg !1225
  %cmp12 = icmp slt i32 %34, %mul11, !dbg !1226
  br i1 %cmp12, label %for.body14, label %for.end, !dbg !1227

for.body14:                                       ; preds = %for.cond10
  %37 = load %struct.BBC*, %struct.BBC** %bbc, align 8, !dbg !1228
  %38 = bitcast %struct.BBC* %37 to %struct.BB*, !dbg !1229
  %39 = load %struct.CCGKey*, %struct.CCGKey** %key.addr, align 8, !dbg !1230
  %40 = load %struct.CCGElem*, %struct.CCGElem** %grid, align 8, !dbg !1231
  %41 = load i32, i32* %j, align 4, !dbg !1232
  %call15 = call float* @CCG_elem_offset_co(%struct.CCGKey* %39, %struct.CCGElem* %40, i32 %41), !dbg !1233
  call void @BB_expand(%struct.BB* %38, float* %call15), !dbg !1234
  br label %for.inc, !dbg !1234

for.inc:                                          ; preds = %for.body14
  %42 = load i32, i32* %j, align 4, !dbg !1235
  %inc = add nsw i32 %42, 1, !dbg !1235
  store i32 %inc, i32* %j, align 4, !dbg !1235
  br label %for.cond10, !dbg !1236, !llvm.loop !1237

for.end:                                          ; preds = %for.cond10
  %43 = load %struct.BBC*, %struct.BBC** %bbc, align 8, !dbg !1239
  call void @BBC_update_centroid(%struct.BBC* %43), !dbg !1240
  %44 = load %struct.BBC*, %struct.BBC** %bbc, align 8, !dbg !1241
  %bcentroid = getelementptr inbounds %struct.BBC, %struct.BBC* %44, i32 0, i32 2, !dbg !1242
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %bcentroid, i64 0, i64 0, !dbg !1241
  call void @BB_expand(%struct.BB* %cb, float* %arraydecay), !dbg !1243
  br label %for.inc16, !dbg !1244

for.inc16:                                        ; preds = %for.end
  %45 = load i32, i32* %i, align 4, !dbg !1245
  %inc17 = add nsw i32 %45, 1, !dbg !1245
  store i32 %inc17, i32* %i, align 4, !dbg !1245
  br label %for.cond, !dbg !1246, !llvm.loop !1247

for.end18:                                        ; preds = %for.cond
  %46 = load i32, i32* %totgrid.addr, align 4, !dbg !1249
  %tobool = icmp ne i32 %46, 0, !dbg !1249
  br i1 %tobool, label %if.then, label %if.end, !dbg !1251

if.then:                                          ; preds = %for.end18
  %47 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1252
  %48 = load %struct.BBC*, %struct.BBC** %prim_bbc, align 8, !dbg !1253
  %49 = load i32, i32* %totgrid.addr, align 4, !dbg !1254
  call void @pbvh_build(%struct.PBVH* %47, %struct.BB* %cb, %struct.BBC* %48, i32 %49), !dbg !1255
  br label %if.end, !dbg !1255

if.end:                                           ; preds = %if.then, %for.end18
  %50 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1256
  %51 = load %struct.BBC*, %struct.BBC** %prim_bbc, align 8, !dbg !1257
  %52 = bitcast %struct.BBC* %51 to i8*, !dbg !1257
  call void %50(i8* %52), !dbg !1256
  ret void, !dbg !1258
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @max_ii(i32 %a, i32 %b) #0 !dbg !1259 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !1262, metadata !DIExpression()), !dbg !1263
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !1264, metadata !DIExpression()), !dbg !1265
  %0 = load i32, i32* %b.addr, align 4, !dbg !1266
  %1 = load i32, i32* %a.addr, align 4, !dbg !1267
  %cmp = icmp slt i32 %0, %1, !dbg !1268
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !1269

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %a.addr, align 4, !dbg !1270
  br label %cond.end, !dbg !1269

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %b.addr, align 4, !dbg !1271
  br label %cond.end, !dbg !1269

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %3, %cond.false ], !dbg !1269
  ret i32 %cond, !dbg !1272
}

; Function Attrs: noinline nounwind uwtable
define internal float* @CCG_elem_offset_co(%struct.CCGKey* %key, %struct.CCGElem* %elem, i32 %offset) #0 !dbg !1273 {
entry:
  %key.addr = alloca %struct.CCGKey*, align 8
  %elem.addr = alloca %struct.CCGElem*, align 8
  %offset.addr = alloca i32, align 4
  store %struct.CCGKey* %key, %struct.CCGKey** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGKey** %key.addr, metadata !1278, metadata !DIExpression()), !dbg !1279
  store %struct.CCGElem* %elem, %struct.CCGElem** %elem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGElem** %elem.addr, metadata !1280, metadata !DIExpression()), !dbg !1281
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !1282, metadata !DIExpression()), !dbg !1283
  %0 = load %struct.CCGKey*, %struct.CCGKey** %key.addr, align 8, !dbg !1284
  %1 = load %struct.CCGKey*, %struct.CCGKey** %key.addr, align 8, !dbg !1285
  %2 = load %struct.CCGElem*, %struct.CCGElem** %elem.addr, align 8, !dbg !1286
  %3 = load i32, i32* %offset.addr, align 4, !dbg !1287
  %call = call %struct.CCGElem* @CCG_elem_offset(%struct.CCGKey* %1, %struct.CCGElem* %2, i32 %3), !dbg !1288
  %call1 = call float* @CCG_elem_co(%struct.CCGKey* %0, %struct.CCGElem* %call), !dbg !1289
  ret float* %call1, !dbg !1290
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.PBVH* @BKE_pbvh_new() #0 !dbg !1291 {
entry:
  %bvh = alloca %struct.PBVH*, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh, metadata !1294, metadata !DIExpression()), !dbg !1295
  %0 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !1296
  %call = call i8* %0(i64 208, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)), !dbg !1296
  %1 = bitcast i8* %call to %struct.PBVH*, !dbg !1296
  store %struct.PBVH* %1, %struct.PBVH** %bvh, align 8, !dbg !1295
  %2 = load %struct.PBVH*, %struct.PBVH** %bvh, align 8, !dbg !1297
  ret %struct.PBVH* %2, !dbg !1298
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_free(%struct.PBVH* %bvh) #0 !dbg !1299 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node = alloca %struct.PBVHNode*, align 8
  %i = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !1302, metadata !DIExpression()), !dbg !1303
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node, metadata !1304, metadata !DIExpression()), !dbg !1305
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1306, metadata !DIExpression()), !dbg !1307
  store i32 0, i32* %i, align 4, !dbg !1308
  br label %for.cond, !dbg !1310

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !1311
  %1 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1313
  %totnode = getelementptr inbounds %struct.PBVH, %struct.PBVH* %1, i32 0, i32 4, !dbg !1314
  %2 = load i32, i32* %totnode, align 4, !dbg !1314
  %cmp = icmp slt i32 %0, %2, !dbg !1315
  br i1 %cmp, label %for.body, label %for.end, !dbg !1316

for.body:                                         ; preds = %for.cond
  %3 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1317
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %3, i32 0, i32 2, !dbg !1319
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !1319
  %5 = load i32, i32* %i, align 4, !dbg !1320
  %idxprom = sext i32 %5 to i64, !dbg !1317
  %arrayidx = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %4, i64 %idxprom, !dbg !1317
  store %struct.PBVHNode* %arrayidx, %struct.PBVHNode** %node, align 8, !dbg !1321
  %6 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1322
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %6, i32 0, i32 10, !dbg !1324
  %bf.load = load i16, i16* %flag, align 8, !dbg !1324
  %bf.cast = zext i16 %bf.load to i32, !dbg !1324
  %and = and i32 %bf.cast, 1, !dbg !1325
  %tobool = icmp ne i32 %and, 0, !dbg !1325
  br i1 %tobool, label %if.then, label %if.end24, !dbg !1326

if.then:                                          ; preds = %for.body
  %7 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1327
  %draw_buffers = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %7, i32 0, i32 0, !dbg !1330
  %8 = load %struct.GPU_PBVH_Buffers*, %struct.GPU_PBVH_Buffers** %draw_buffers, align 8, !dbg !1330
  %tobool1 = icmp ne %struct.GPU_PBVH_Buffers* %8, null, !dbg !1327
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !1331

if.then2:                                         ; preds = %if.then
  %9 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1332
  %draw_buffers3 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %9, i32 0, i32 0, !dbg !1333
  %10 = load %struct.GPU_PBVH_Buffers*, %struct.GPU_PBVH_Buffers** %draw_buffers3, align 8, !dbg !1333
  call void @GPU_free_pbvh_buffers(%struct.GPU_PBVH_Buffers* %10), !dbg !1334
  br label %if.end, !dbg !1334

if.end:                                           ; preds = %if.then2, %if.then
  %11 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1335
  %vert_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %11, i32 0, i32 6, !dbg !1337
  %12 = load i32*, i32** %vert_indices, align 8, !dbg !1337
  %tobool4 = icmp ne i32* %12, null, !dbg !1335
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !1338

if.then5:                                         ; preds = %if.end
  %13 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1339
  %14 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1340
  %vert_indices6 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %14, i32 0, i32 6, !dbg !1341
  %15 = load i32*, i32** %vert_indices6, align 8, !dbg !1341
  %16 = bitcast i32* %15 to i8*, !dbg !1340
  call void %13(i8* %16), !dbg !1339
  br label %if.end7, !dbg !1339

if.end7:                                          ; preds = %if.then5, %if.end
  %17 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1342
  %face_vert_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %17, i32 0, i32 9, !dbg !1344
  %18 = load [4 x i32]*, [4 x i32]** %face_vert_indices, align 8, !dbg !1344
  %tobool8 = icmp ne [4 x i32]* %18, null, !dbg !1342
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !1345

if.then9:                                         ; preds = %if.end7
  %19 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1346
  %20 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1347
  %face_vert_indices10 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %20, i32 0, i32 9, !dbg !1348
  %21 = load [4 x i32]*, [4 x i32]** %face_vert_indices10, align 8, !dbg !1348
  %22 = bitcast [4 x i32]* %21 to i8*, !dbg !1347
  call void %19(i8* %22), !dbg !1346
  br label %if.end11, !dbg !1346

if.end11:                                         ; preds = %if.then9, %if.end7
  %23 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1349
  call void @BKE_pbvh_node_layer_disp_free(%struct.PBVHNode* %23), !dbg !1350
  %24 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1351
  %bm_faces = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %24, i32 0, i32 15, !dbg !1353
  %25 = load %struct.GSet*, %struct.GSet** %bm_faces, align 8, !dbg !1353
  %tobool12 = icmp ne %struct.GSet* %25, null, !dbg !1351
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !1354

if.then13:                                        ; preds = %if.end11
  %26 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1355
  %bm_faces14 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %26, i32 0, i32 15, !dbg !1356
  %27 = load %struct.GSet*, %struct.GSet** %bm_faces14, align 8, !dbg !1356
  call void @BLI_gset_free(%struct.GSet* %27, void (i8*)* null), !dbg !1357
  br label %if.end15, !dbg !1357

if.end15:                                         ; preds = %if.then13, %if.end11
  %28 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1358
  %bm_unique_verts = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %28, i32 0, i32 16, !dbg !1360
  %29 = load %struct.GSet*, %struct.GSet** %bm_unique_verts, align 8, !dbg !1360
  %tobool16 = icmp ne %struct.GSet* %29, null, !dbg !1358
  br i1 %tobool16, label %if.then17, label %if.end19, !dbg !1361

if.then17:                                        ; preds = %if.end15
  %30 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1362
  %bm_unique_verts18 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %30, i32 0, i32 16, !dbg !1363
  %31 = load %struct.GSet*, %struct.GSet** %bm_unique_verts18, align 8, !dbg !1363
  call void @BLI_gset_free(%struct.GSet* %31, void (i8*)* null), !dbg !1364
  br label %if.end19, !dbg !1364

if.end19:                                         ; preds = %if.then17, %if.end15
  %32 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1365
  %bm_other_verts = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %32, i32 0, i32 17, !dbg !1367
  %33 = load %struct.GSet*, %struct.GSet** %bm_other_verts, align 8, !dbg !1367
  %tobool20 = icmp ne %struct.GSet* %33, null, !dbg !1365
  br i1 %tobool20, label %if.then21, label %if.end23, !dbg !1368

if.then21:                                        ; preds = %if.end19
  %34 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1369
  %bm_other_verts22 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %34, i32 0, i32 17, !dbg !1370
  %35 = load %struct.GSet*, %struct.GSet** %bm_other_verts22, align 8, !dbg !1370
  call void @BLI_gset_free(%struct.GSet* %35, void (i8*)* null), !dbg !1371
  br label %if.end23, !dbg !1371

if.end23:                                         ; preds = %if.then21, %if.end19
  br label %if.end24, !dbg !1372

if.end24:                                         ; preds = %if.end23, %for.body
  br label %for.inc, !dbg !1373

for.inc:                                          ; preds = %if.end24
  %36 = load i32, i32* %i, align 4, !dbg !1374
  %inc = add nsw i32 %36, 1, !dbg !1374
  store i32 %inc, i32* %i, align 4, !dbg !1374
  br label %for.cond, !dbg !1375, !llvm.loop !1376

for.end:                                          ; preds = %for.cond
  %37 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1378
  %deformed = getelementptr inbounds %struct.PBVH, %struct.PBVH* %37, i32 0, i32 20, !dbg !1380
  %38 = load i8, i8* %deformed, align 8, !dbg !1380
  %tobool25 = icmp ne i8 %38, 0, !dbg !1378
  br i1 %tobool25, label %if.then26, label %if.end35, !dbg !1381

if.then26:                                        ; preds = %for.end
  %39 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1382
  %verts = getelementptr inbounds %struct.PBVH, %struct.PBVH* %39, i32 0, i32 9, !dbg !1385
  %40 = load %struct.MVert*, %struct.MVert** %verts, align 8, !dbg !1385
  %tobool27 = icmp ne %struct.MVert* %40, null, !dbg !1382
  br i1 %tobool27, label %if.then28, label %if.end34, !dbg !1386

if.then28:                                        ; preds = %if.then26
  %41 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1387
  %42 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1389
  %verts29 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %42, i32 0, i32 9, !dbg !1390
  %43 = load %struct.MVert*, %struct.MVert** %verts29, align 8, !dbg !1390
  %44 = bitcast %struct.MVert* %43 to i8*, !dbg !1389
  call void %41(i8* %44), !dbg !1387
  %45 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1391
  %faces = getelementptr inbounds %struct.PBVH, %struct.PBVH* %45, i32 0, i32 10, !dbg !1393
  %46 = load %struct.MFace*, %struct.MFace** %faces, align 8, !dbg !1393
  %tobool30 = icmp ne %struct.MFace* %46, null, !dbg !1391
  br i1 %tobool30, label %if.then31, label %if.end33, !dbg !1394

if.then31:                                        ; preds = %if.then28
  %47 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1395
  %48 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1396
  %faces32 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %48, i32 0, i32 10, !dbg !1397
  %49 = load %struct.MFace*, %struct.MFace** %faces32, align 8, !dbg !1397
  %50 = bitcast %struct.MFace* %49 to i8*, !dbg !1396
  call void %47(i8* %50), !dbg !1395
  br label %if.end33, !dbg !1395

if.end33:                                         ; preds = %if.then31, %if.then28
  br label %if.end34, !dbg !1398

if.end34:                                         ; preds = %if.end33, %if.then26
  br label %if.end35, !dbg !1399

if.end35:                                         ; preds = %if.end34, %for.end
  %51 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1400
  %nodes36 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %51, i32 0, i32 2, !dbg !1402
  %52 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes36, align 8, !dbg !1402
  %tobool37 = icmp ne %struct.PBVHNode* %52, null, !dbg !1400
  br i1 %tobool37, label %if.then38, label %if.end40, !dbg !1403

if.then38:                                        ; preds = %if.end35
  %53 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1404
  %54 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1405
  %nodes39 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %54, i32 0, i32 2, !dbg !1406
  %55 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes39, align 8, !dbg !1406
  %56 = bitcast %struct.PBVHNode* %55 to i8*, !dbg !1405
  call void %53(i8* %56), !dbg !1404
  br label %if.end40, !dbg !1404

if.end40:                                         ; preds = %if.then38, %if.end35
  %57 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1407
  %prim_indices = getelementptr inbounds %struct.PBVH, %struct.PBVH* %57, i32 0, i32 5, !dbg !1409
  %58 = load i32*, i32** %prim_indices, align 8, !dbg !1409
  %tobool41 = icmp ne i32* %58, null, !dbg !1407
  br i1 %tobool41, label %if.then42, label %if.end44, !dbg !1410

if.then42:                                        ; preds = %if.end40
  %59 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1411
  %60 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1412
  %prim_indices43 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %60, i32 0, i32 5, !dbg !1413
  %61 = load i32*, i32** %prim_indices43, align 8, !dbg !1413
  %62 = bitcast i32* %61 to i8*, !dbg !1412
  call void %59(i8* %62), !dbg !1411
  br label %if.end44, !dbg !1411

if.end44:                                         ; preds = %if.then42, %if.end40
  %63 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1414
  %64 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1415
  %65 = bitcast %struct.PBVH* %64 to i8*, !dbg !1415
  call void %63(i8* %65), !dbg !1414
  ret void, !dbg !1416
}

declare dso_local void @GPU_free_pbvh_buffers(%struct.GPU_PBVH_Buffers*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_node_layer_disp_free(%struct.PBVHNode* %node) #0 !dbg !1417 {
entry:
  %node.addr = alloca %struct.PBVHNode*, align 8
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !1420, metadata !DIExpression()), !dbg !1421
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !1422
  %layer_disp = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 12, !dbg !1424
  %1 = load float*, float** %layer_disp, align 8, !dbg !1424
  %tobool = icmp ne float* %1, null, !dbg !1422
  br i1 %tobool, label %if.then, label %if.end, !dbg !1425

if.then:                                          ; preds = %entry
  %2 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1426
  %3 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !1428
  %layer_disp1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %3, i32 0, i32 12, !dbg !1429
  %4 = load float*, float** %layer_disp1, align 8, !dbg !1429
  %5 = bitcast float* %4 to i8*, !dbg !1428
  call void %2(i8* %5), !dbg !1426
  %6 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !1430
  %layer_disp2 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %6, i32 0, i32 12, !dbg !1431
  store float* null, float** %layer_disp2, align 8, !dbg !1432
  br label %if.end, !dbg !1433

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !1434
}

declare dso_local void @BLI_gset_free(%struct.GSet*, void (i8*)*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_free_layer_disp(%struct.PBVH* %bvh) #0 !dbg !1435 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %i = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !1436, metadata !DIExpression()), !dbg !1437
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1438, metadata !DIExpression()), !dbg !1439
  store i32 0, i32* %i, align 4, !dbg !1440
  br label %for.cond, !dbg !1442

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !1443
  %1 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1445
  %totnode = getelementptr inbounds %struct.PBVH, %struct.PBVH* %1, i32 0, i32 4, !dbg !1446
  %2 = load i32, i32* %totnode, align 4, !dbg !1446
  %cmp = icmp slt i32 %0, %2, !dbg !1447
  br i1 %cmp, label %for.body, label %for.end, !dbg !1448

for.body:                                         ; preds = %for.cond
  %3 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1449
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %3, i32 0, i32 2, !dbg !1450
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !1450
  %5 = load i32, i32* %i, align 4, !dbg !1451
  %idxprom = sext i32 %5 to i64, !dbg !1449
  %arrayidx = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %4, i64 %idxprom, !dbg !1449
  call void @BKE_pbvh_node_layer_disp_free(%struct.PBVHNode* %arrayidx), !dbg !1452
  br label %for.inc, !dbg !1452

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !1453
  %inc = add nsw i32 %6, 1, !dbg !1453
  store i32 %inc, i32* %i, align 4, !dbg !1453
  br label %for.cond, !dbg !1454, !llvm.loop !1455

for.end:                                          ; preds = %for.cond
  ret void, !dbg !1457
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_search_gather(%struct.PBVH* %bvh, i8 (%struct.PBVHNode*, i8*)* %scb, i8* %search_data, %struct.PBVHNode*** %r_array, i32* %r_tot) #0 !dbg !1458 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %scb.addr = alloca i8 (%struct.PBVHNode*, i8*)*, align 8
  %search_data.addr = alloca i8*, align 8
  %r_array.addr = alloca %struct.PBVHNode***, align 8
  %r_tot.addr = alloca i32*, align 8
  %iter = alloca %struct.PBVHIter, align 8
  %array = alloca %struct.PBVHNode**, align 8
  %node = alloca %struct.PBVHNode*, align 8
  %tot = alloca i32, align 4
  %space = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !1467, metadata !DIExpression()), !dbg !1468
  store i8 (%struct.PBVHNode*, i8*)* %scb, i8 (%struct.PBVHNode*, i8*)** %scb.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%struct.PBVHNode*, i8*)** %scb.addr, metadata !1469, metadata !DIExpression()), !dbg !1470
  store i8* %search_data, i8** %search_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %search_data.addr, metadata !1471, metadata !DIExpression()), !dbg !1472
  store %struct.PBVHNode*** %r_array, %struct.PBVHNode**** %r_array.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode**** %r_array.addr, metadata !1473, metadata !DIExpression()), !dbg !1474
  store i32* %r_tot, i32** %r_tot.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %r_tot.addr, metadata !1475, metadata !DIExpression()), !dbg !1476
  call void @llvm.dbg.declare(metadata %struct.PBVHIter* %iter, metadata !1477, metadata !DIExpression()), !dbg !1497
  call void @llvm.dbg.declare(metadata %struct.PBVHNode*** %array, metadata !1498, metadata !DIExpression()), !dbg !1499
  store %struct.PBVHNode** null, %struct.PBVHNode*** %array, align 8, !dbg !1499
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node, metadata !1500, metadata !DIExpression()), !dbg !1501
  call void @llvm.dbg.declare(metadata i32* %tot, metadata !1502, metadata !DIExpression()), !dbg !1503
  store i32 0, i32* %tot, align 4, !dbg !1503
  call void @llvm.dbg.declare(metadata i32* %space, metadata !1504, metadata !DIExpression()), !dbg !1505
  store i32 0, i32* %space, align 4, !dbg !1505
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1506
  %1 = load i8 (%struct.PBVHNode*, i8*)*, i8 (%struct.PBVHNode*, i8*)** %scb.addr, align 8, !dbg !1507
  %2 = load i8*, i8** %search_data.addr, align 8, !dbg !1508
  call void @pbvh_iter_begin(%struct.PBVHIter* %iter, %struct.PBVH* %0, i8 (%struct.PBVHNode*, i8*)* %1, i8* %2), !dbg !1509
  br label %while.cond, !dbg !1510

while.cond:                                       ; preds = %if.end6, %entry
  %call = call %struct.PBVHNode* @pbvh_iter_next(%struct.PBVHIter* %iter), !dbg !1511
  store %struct.PBVHNode* %call, %struct.PBVHNode** %node, align 8, !dbg !1512
  %tobool = icmp ne %struct.PBVHNode* %call, null, !dbg !1510
  br i1 %tobool, label %while.body, label %while.end, !dbg !1510

while.body:                                       ; preds = %while.cond
  %3 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1513
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %3, i32 0, i32 10, !dbg !1516
  %bf.load = load i16, i16* %flag, align 8, !dbg !1516
  %bf.cast = zext i16 %bf.load to i32, !dbg !1516
  %and = and i32 %bf.cast, 1, !dbg !1517
  %tobool1 = icmp ne i32 %and, 0, !dbg !1517
  br i1 %tobool1, label %if.then, label %if.end6, !dbg !1518

if.then:                                          ; preds = %while.body
  %4 = load i32, i32* %tot, align 4, !dbg !1519
  %5 = load i32, i32* %space, align 4, !dbg !1522
  %cmp = icmp eq i32 %4, %5, !dbg !1523
  br i1 %cmp, label %if.then2, label %if.end, !dbg !1524

if.then2:                                         ; preds = %if.then
  %6 = load i32, i32* %tot, align 4, !dbg !1525
  %cmp3 = icmp eq i32 %6, 0, !dbg !1527
  br i1 %cmp3, label %cond.true, label %cond.false, !dbg !1528

cond.true:                                        ; preds = %if.then2
  br label %cond.end, !dbg !1528

cond.false:                                       ; preds = %if.then2
  %7 = load i32, i32* %space, align 4, !dbg !1529
  %mul = mul nsw i32 %7, 2, !dbg !1530
  br label %cond.end, !dbg !1528

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 32, %cond.true ], [ %mul, %cond.false ], !dbg !1528
  store i32 %cond, i32* %space, align 4, !dbg !1531
  %8 = load i8* (i8*, i64, i8*)*, i8* (i8*, i64, i8*)** @MEM_recallocN_id, align 8, !dbg !1532
  %9 = load %struct.PBVHNode**, %struct.PBVHNode*** %array, align 8, !dbg !1533
  %10 = bitcast %struct.PBVHNode** %9 to i8*, !dbg !1533
  %11 = load i32, i32* %space, align 4, !dbg !1534
  %conv = sext i32 %11 to i64, !dbg !1534
  %mul4 = mul i64 8, %conv, !dbg !1535
  %call5 = call i8* %8(i8* %10, i64 %mul4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__func__.BKE_pbvh_search_gather, i64 0, i64 0)), !dbg !1532
  %12 = bitcast i8* %call5 to %struct.PBVHNode**, !dbg !1532
  store %struct.PBVHNode** %12, %struct.PBVHNode*** %array, align 8, !dbg !1536
  br label %if.end, !dbg !1537

if.end:                                           ; preds = %cond.end, %if.then
  %13 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1538
  %14 = load %struct.PBVHNode**, %struct.PBVHNode*** %array, align 8, !dbg !1539
  %15 = load i32, i32* %tot, align 4, !dbg !1540
  %idxprom = sext i32 %15 to i64, !dbg !1539
  %arrayidx = getelementptr inbounds %struct.PBVHNode*, %struct.PBVHNode** %14, i64 %idxprom, !dbg !1539
  store %struct.PBVHNode* %13, %struct.PBVHNode** %arrayidx, align 8, !dbg !1541
  %16 = load i32, i32* %tot, align 4, !dbg !1542
  %inc = add nsw i32 %16, 1, !dbg !1542
  store i32 %inc, i32* %tot, align 4, !dbg !1542
  br label %if.end6, !dbg !1543

if.end6:                                          ; preds = %if.end, %while.body
  br label %while.cond, !dbg !1510, !llvm.loop !1544

while.end:                                        ; preds = %while.cond
  call void @pbvh_iter_end(%struct.PBVHIter* %iter), !dbg !1546
  %17 = load i32, i32* %tot, align 4, !dbg !1547
  %cmp7 = icmp eq i32 %17, 0, !dbg !1549
  br i1 %cmp7, label %land.lhs.true, label %if.end11, !dbg !1550

land.lhs.true:                                    ; preds = %while.end
  %18 = load %struct.PBVHNode**, %struct.PBVHNode*** %array, align 8, !dbg !1551
  %tobool9 = icmp ne %struct.PBVHNode** %18, null, !dbg !1551
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !1552

if.then10:                                        ; preds = %land.lhs.true
  %19 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1553
  %20 = load %struct.PBVHNode**, %struct.PBVHNode*** %array, align 8, !dbg !1555
  %21 = bitcast %struct.PBVHNode** %20 to i8*, !dbg !1555
  call void %19(i8* %21), !dbg !1553
  store %struct.PBVHNode** null, %struct.PBVHNode*** %array, align 8, !dbg !1556
  br label %if.end11, !dbg !1557

if.end11:                                         ; preds = %if.then10, %land.lhs.true, %while.end
  %22 = load %struct.PBVHNode**, %struct.PBVHNode*** %array, align 8, !dbg !1558
  %23 = load %struct.PBVHNode***, %struct.PBVHNode**** %r_array.addr, align 8, !dbg !1559
  store %struct.PBVHNode** %22, %struct.PBVHNode*** %23, align 8, !dbg !1560
  %24 = load i32, i32* %tot, align 4, !dbg !1561
  %25 = load i32*, i32** %r_tot.addr, align 8, !dbg !1562
  store i32 %24, i32* %25, align 4, !dbg !1563
  ret void, !dbg !1564
}

; Function Attrs: noinline nounwind uwtable
define internal void @pbvh_iter_begin(%struct.PBVHIter* %iter, %struct.PBVH* %bvh, i8 (%struct.PBVHNode*, i8*)* %scb, i8* %search_data) #0 !dbg !1565 {
entry:
  %iter.addr = alloca %struct.PBVHIter*, align 8
  %bvh.addr = alloca %struct.PBVH*, align 8
  %scb.addr = alloca i8 (%struct.PBVHNode*, i8*)*, align 8
  %search_data.addr = alloca i8*, align 8
  store %struct.PBVHIter* %iter, %struct.PBVHIter** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHIter** %iter.addr, metadata !1569, metadata !DIExpression()), !dbg !1570
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !1571, metadata !DIExpression()), !dbg !1572
  store i8 (%struct.PBVHNode*, i8*)* %scb, i8 (%struct.PBVHNode*, i8*)** %scb.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%struct.PBVHNode*, i8*)** %scb.addr, metadata !1573, metadata !DIExpression()), !dbg !1574
  store i8* %search_data, i8** %search_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %search_data.addr, metadata !1575, metadata !DIExpression()), !dbg !1576
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1577
  %1 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1578
  %bvh1 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %1, i32 0, i32 0, !dbg !1579
  store %struct.PBVH* %0, %struct.PBVH** %bvh1, align 8, !dbg !1580
  %2 = load i8 (%struct.PBVHNode*, i8*)*, i8 (%struct.PBVHNode*, i8*)** %scb.addr, align 8, !dbg !1581
  %3 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1582
  %scb2 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %3, i32 0, i32 1, !dbg !1583
  store i8 (%struct.PBVHNode*, i8*)* %2, i8 (%struct.PBVHNode*, i8*)** %scb2, align 8, !dbg !1584
  %4 = load i8*, i8** %search_data.addr, align 8, !dbg !1585
  %5 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1586
  %search_data3 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %5, i32 0, i32 2, !dbg !1587
  store i8* %4, i8** %search_data3, align 8, !dbg !1588
  %6 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1589
  %stackfixed = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %6, i32 0, i32 5, !dbg !1590
  %arraydecay = getelementptr inbounds [100 x %struct.PBVHStack], [100 x %struct.PBVHStack]* %stackfixed, i64 0, i64 0, !dbg !1589
  %7 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1591
  %stack = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %7, i32 0, i32 3, !dbg !1592
  store %struct.PBVHStack* %arraydecay, %struct.PBVHStack** %stack, align 8, !dbg !1593
  %8 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1594
  %stackspace = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %8, i32 0, i32 6, !dbg !1595
  store i32 100, i32* %stackspace, align 8, !dbg !1596
  %9 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1597
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %9, i32 0, i32 2, !dbg !1598
  %10 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !1598
  %11 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1599
  %stack4 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %11, i32 0, i32 3, !dbg !1600
  %12 = load %struct.PBVHStack*, %struct.PBVHStack** %stack4, align 8, !dbg !1600
  %arrayidx = getelementptr inbounds %struct.PBVHStack, %struct.PBVHStack* %12, i64 0, !dbg !1599
  %node = getelementptr inbounds %struct.PBVHStack, %struct.PBVHStack* %arrayidx, i32 0, i32 0, !dbg !1601
  store %struct.PBVHNode* %10, %struct.PBVHNode** %node, align 8, !dbg !1602
  %13 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1603
  %stack5 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %13, i32 0, i32 3, !dbg !1604
  %14 = load %struct.PBVHStack*, %struct.PBVHStack** %stack5, align 8, !dbg !1604
  %arrayidx6 = getelementptr inbounds %struct.PBVHStack, %struct.PBVHStack* %14, i64 0, !dbg !1603
  %revisiting = getelementptr inbounds %struct.PBVHStack, %struct.PBVHStack* %arrayidx6, i32 0, i32 1, !dbg !1605
  store i32 0, i32* %revisiting, align 8, !dbg !1606
  %15 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1607
  %stacksize = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %15, i32 0, i32 4, !dbg !1608
  store i32 1, i32* %stacksize, align 8, !dbg !1609
  ret void, !dbg !1610
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.PBVHNode* @pbvh_iter_next(%struct.PBVHIter* %iter) #0 !dbg !1611 {
entry:
  %retval = alloca %struct.PBVHNode*, align 8
  %iter.addr = alloca %struct.PBVHIter*, align 8
  %node = alloca %struct.PBVHNode*, align 8
  %revisiting = alloca i32, align 4
  store %struct.PBVHIter* %iter, %struct.PBVHIter** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHIter** %iter.addr, metadata !1614, metadata !DIExpression()), !dbg !1615
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node, metadata !1616, metadata !DIExpression()), !dbg !1617
  call void @llvm.dbg.declare(metadata i32* %revisiting, metadata !1618, metadata !DIExpression()), !dbg !1619
  br label %while.cond, !dbg !1620

while.cond:                                       ; preds = %if.end25, %if.then15, %entry
  %0 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1621
  %stacksize = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %0, i32 0, i32 4, !dbg !1622
  %1 = load i32, i32* %stacksize, align 8, !dbg !1622
  %tobool = icmp ne i32 %1, 0, !dbg !1620
  br i1 %tobool, label %while.body, label %while.end, !dbg !1620

while.body:                                       ; preds = %while.cond
  %2 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1623
  %stacksize1 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %2, i32 0, i32 4, !dbg !1625
  %3 = load i32, i32* %stacksize1, align 8, !dbg !1626
  %dec = add nsw i32 %3, -1, !dbg !1626
  store i32 %dec, i32* %stacksize1, align 8, !dbg !1626
  %4 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1627
  %stack = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %4, i32 0, i32 3, !dbg !1628
  %5 = load %struct.PBVHStack*, %struct.PBVHStack** %stack, align 8, !dbg !1628
  %6 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1629
  %stacksize2 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %6, i32 0, i32 4, !dbg !1630
  %7 = load i32, i32* %stacksize2, align 8, !dbg !1630
  %idxprom = sext i32 %7 to i64, !dbg !1627
  %arrayidx = getelementptr inbounds %struct.PBVHStack, %struct.PBVHStack* %5, i64 %idxprom, !dbg !1627
  %node3 = getelementptr inbounds %struct.PBVHStack, %struct.PBVHStack* %arrayidx, i32 0, i32 0, !dbg !1631
  %8 = load %struct.PBVHNode*, %struct.PBVHNode** %node3, align 8, !dbg !1631
  store %struct.PBVHNode* %8, %struct.PBVHNode** %node, align 8, !dbg !1632
  %9 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1633
  %cmp = icmp eq %struct.PBVHNode* %9, null, !dbg !1635
  br i1 %cmp, label %if.then, label %if.end, !dbg !1636

if.then:                                          ; preds = %while.body
  store %struct.PBVHNode* null, %struct.PBVHNode** %retval, align 8, !dbg !1637
  br label %return, !dbg !1637

if.end:                                           ; preds = %while.body
  %10 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1638
  %stack4 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %10, i32 0, i32 3, !dbg !1639
  %11 = load %struct.PBVHStack*, %struct.PBVHStack** %stack4, align 8, !dbg !1639
  %12 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1640
  %stacksize5 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %12, i32 0, i32 4, !dbg !1641
  %13 = load i32, i32* %stacksize5, align 8, !dbg !1641
  %idxprom6 = sext i32 %13 to i64, !dbg !1638
  %arrayidx7 = getelementptr inbounds %struct.PBVHStack, %struct.PBVHStack* %11, i64 %idxprom6, !dbg !1638
  %revisiting8 = getelementptr inbounds %struct.PBVHStack, %struct.PBVHStack* %arrayidx7, i32 0, i32 1, !dbg !1642
  %14 = load i32, i32* %revisiting8, align 8, !dbg !1642
  store i32 %14, i32* %revisiting, align 4, !dbg !1643
  %15 = load i32, i32* %revisiting, align 4, !dbg !1644
  %tobool9 = icmp ne i32 %15, 0, !dbg !1644
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !1646

if.then10:                                        ; preds = %if.end
  %16 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1647
  store %struct.PBVHNode* %16, %struct.PBVHNode** %retval, align 8, !dbg !1648
  br label %return, !dbg !1648

if.end11:                                         ; preds = %if.end
  %17 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1649
  %scb = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %17, i32 0, i32 1, !dbg !1651
  %18 = load i8 (%struct.PBVHNode*, i8*)*, i8 (%struct.PBVHNode*, i8*)** %scb, align 8, !dbg !1651
  %tobool12 = icmp ne i8 (%struct.PBVHNode*, i8*)* %18, null, !dbg !1649
  br i1 %tobool12, label %land.lhs.true, label %if.end16, !dbg !1652

land.lhs.true:                                    ; preds = %if.end11
  %19 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1653
  %scb13 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %19, i32 0, i32 1, !dbg !1654
  %20 = load i8 (%struct.PBVHNode*, i8*)*, i8 (%struct.PBVHNode*, i8*)** %scb13, align 8, !dbg !1654
  %21 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1655
  %22 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1656
  %search_data = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %22, i32 0, i32 2, !dbg !1657
  %23 = load i8*, i8** %search_data, align 8, !dbg !1657
  %call = call zeroext i8 %20(%struct.PBVHNode* %21, i8* %23), !dbg !1653
  %tobool14 = icmp ne i8 %call, 0, !dbg !1653
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !1658

if.then15:                                        ; preds = %land.lhs.true
  br label %while.cond, !dbg !1659, !llvm.loop !1660

if.end16:                                         ; preds = %land.lhs.true, %if.end11
  %24 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1662
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %24, i32 0, i32 10, !dbg !1664
  %bf.load = load i16, i16* %flag, align 8, !dbg !1664
  %bf.cast = zext i16 %bf.load to i32, !dbg !1664
  %and = and i32 %bf.cast, 1, !dbg !1665
  %tobool17 = icmp ne i32 %and, 0, !dbg !1665
  br i1 %tobool17, label %if.then18, label %if.else, !dbg !1666

if.then18:                                        ; preds = %if.end16
  %25 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1667
  store %struct.PBVHNode* %25, %struct.PBVHNode** %retval, align 8, !dbg !1669
  br label %return, !dbg !1669

if.else:                                          ; preds = %if.end16
  %26 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1670
  %27 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1672
  call void @pbvh_stack_push(%struct.PBVHIter* %26, %struct.PBVHNode* %27, i32 1), !dbg !1673
  %28 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1674
  %29 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1675
  %bvh = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %29, i32 0, i32 0, !dbg !1676
  %30 = load %struct.PBVH*, %struct.PBVH** %bvh, align 8, !dbg !1676
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %30, i32 0, i32 2, !dbg !1677
  %31 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !1677
  %32 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1678
  %children_offset = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %32, i32 0, i32 3, !dbg !1679
  %33 = load i32, i32* %children_offset, align 8, !dbg !1679
  %idx.ext = sext i32 %33 to i64, !dbg !1680
  %add.ptr = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %31, i64 %idx.ext, !dbg !1680
  %add.ptr19 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %add.ptr, i64 1, !dbg !1681
  call void @pbvh_stack_push(%struct.PBVHIter* %28, %struct.PBVHNode* %add.ptr19, i32 0), !dbg !1682
  %34 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1683
  %35 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1684
  %bvh20 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %35, i32 0, i32 0, !dbg !1685
  %36 = load %struct.PBVH*, %struct.PBVH** %bvh20, align 8, !dbg !1685
  %nodes21 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %36, i32 0, i32 2, !dbg !1686
  %37 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes21, align 8, !dbg !1686
  %38 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1687
  %children_offset22 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %38, i32 0, i32 3, !dbg !1688
  %39 = load i32, i32* %children_offset22, align 8, !dbg !1688
  %idx.ext23 = sext i32 %39 to i64, !dbg !1689
  %add.ptr24 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %37, i64 %idx.ext23, !dbg !1689
  call void @pbvh_stack_push(%struct.PBVHIter* %34, %struct.PBVHNode* %add.ptr24, i32 0), !dbg !1690
  br label %if.end25

if.end25:                                         ; preds = %if.else
  br label %while.cond, !dbg !1620, !llvm.loop !1660

while.end:                                        ; preds = %while.cond
  store %struct.PBVHNode* null, %struct.PBVHNode** %retval, align 8, !dbg !1691
  br label %return, !dbg !1691

return:                                           ; preds = %while.end, %if.then18, %if.then10, %if.then
  %40 = load %struct.PBVHNode*, %struct.PBVHNode** %retval, align 8, !dbg !1692
  ret %struct.PBVHNode* %40, !dbg !1692
}

; Function Attrs: noinline nounwind uwtable
define internal void @pbvh_iter_end(%struct.PBVHIter* %iter) #0 !dbg !1693 {
entry:
  %iter.addr = alloca %struct.PBVHIter*, align 8
  store %struct.PBVHIter* %iter, %struct.PBVHIter** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHIter** %iter.addr, metadata !1696, metadata !DIExpression()), !dbg !1697
  %0 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1698
  %stackspace = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %0, i32 0, i32 6, !dbg !1700
  %1 = load i32, i32* %stackspace, align 8, !dbg !1700
  %cmp = icmp sgt i32 %1, 100, !dbg !1701
  br i1 %cmp, label %if.then, label %if.end, !dbg !1702

if.then:                                          ; preds = %entry
  %2 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !1703
  %3 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !1704
  %stack = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %3, i32 0, i32 3, !dbg !1705
  %4 = load %struct.PBVHStack*, %struct.PBVHStack** %stack, align 8, !dbg !1705
  %5 = bitcast %struct.PBVHStack* %4 to i8*, !dbg !1704
  call void %2(i8* %5), !dbg !1703
  br label %if.end, !dbg !1703

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !1706
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_search_callback(%struct.PBVH* %bvh, i8 (%struct.PBVHNode*, i8*)* %scb, i8* %search_data, void (%struct.PBVHNode*, i8*)* %hcb, i8* %hit_data) #0 !dbg !1707 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %scb.addr = alloca i8 (%struct.PBVHNode*, i8*)*, align 8
  %search_data.addr = alloca i8*, align 8
  %hcb.addr = alloca void (%struct.PBVHNode*, i8*)*, align 8
  %hit_data.addr = alloca i8*, align 8
  %iter = alloca %struct.PBVHIter, align 8
  %node = alloca %struct.PBVHNode*, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !1714, metadata !DIExpression()), !dbg !1715
  store i8 (%struct.PBVHNode*, i8*)* %scb, i8 (%struct.PBVHNode*, i8*)** %scb.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%struct.PBVHNode*, i8*)** %scb.addr, metadata !1716, metadata !DIExpression()), !dbg !1717
  store i8* %search_data, i8** %search_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %search_data.addr, metadata !1718, metadata !DIExpression()), !dbg !1719
  store void (%struct.PBVHNode*, i8*)* %hcb, void (%struct.PBVHNode*, i8*)** %hcb.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.PBVHNode*, i8*)** %hcb.addr, metadata !1720, metadata !DIExpression()), !dbg !1721
  store i8* %hit_data, i8** %hit_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %hit_data.addr, metadata !1722, metadata !DIExpression()), !dbg !1723
  call void @llvm.dbg.declare(metadata %struct.PBVHIter* %iter, metadata !1724, metadata !DIExpression()), !dbg !1725
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node, metadata !1726, metadata !DIExpression()), !dbg !1727
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1728
  %1 = load i8 (%struct.PBVHNode*, i8*)*, i8 (%struct.PBVHNode*, i8*)** %scb.addr, align 8, !dbg !1729
  %2 = load i8*, i8** %search_data.addr, align 8, !dbg !1730
  call void @pbvh_iter_begin(%struct.PBVHIter* %iter, %struct.PBVH* %0, i8 (%struct.PBVHNode*, i8*)* %1, i8* %2), !dbg !1731
  br label %while.cond, !dbg !1732

while.cond:                                       ; preds = %if.end, %entry
  %call = call %struct.PBVHNode* @pbvh_iter_next(%struct.PBVHIter* %iter), !dbg !1733
  store %struct.PBVHNode* %call, %struct.PBVHNode** %node, align 8, !dbg !1734
  %tobool = icmp ne %struct.PBVHNode* %call, null, !dbg !1732
  br i1 %tobool, label %while.body, label %while.end, !dbg !1732

while.body:                                       ; preds = %while.cond
  %3 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1735
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %3, i32 0, i32 10, !dbg !1737
  %bf.load = load i16, i16* %flag, align 8, !dbg !1737
  %bf.cast = zext i16 %bf.load to i32, !dbg !1737
  %and = and i32 %bf.cast, 1, !dbg !1738
  %tobool1 = icmp ne i32 %and, 0, !dbg !1738
  br i1 %tobool1, label %if.then, label %if.end, !dbg !1739

if.then:                                          ; preds = %while.body
  %4 = load void (%struct.PBVHNode*, i8*)*, void (%struct.PBVHNode*, i8*)** %hcb.addr, align 8, !dbg !1740
  %5 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1741
  %6 = load i8*, i8** %hit_data.addr, align 8, !dbg !1742
  call void %4(%struct.PBVHNode* %5, i8* %6), !dbg !1740
  br label %if.end, !dbg !1740

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond, !dbg !1732, !llvm.loop !1743

while.end:                                        ; preds = %while.cond
  call void @pbvh_iter_end(%struct.PBVHIter* %iter), !dbg !1745
  ret void, !dbg !1746
}

; Function Attrs: noinline nounwind uwtable
define dso_local float @BKE_pbvh_node_get_tmin(%struct.PBVHNode* %node) #0 !dbg !1747 {
entry:
  %node.addr = alloca %struct.PBVHNode*, align 8
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !1750, metadata !DIExpression()), !dbg !1751
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !1752
  %tmin = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 11, !dbg !1753
  %1 = load float, float* %tmin, align 4, !dbg !1753
  ret float %1, !dbg !1754
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @pbvh_update_BB_redraw(%struct.PBVH* %bvh, %struct.PBVHNode** %nodes, i32 %totnode, i32 %flag) #0 !dbg !1755 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %nodes.addr = alloca %struct.PBVHNode**, align 8
  %totnode.addr = alloca i32, align 4
  %flag.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %node = alloca %struct.PBVHNode*, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !1758, metadata !DIExpression()), !dbg !1759
  store %struct.PBVHNode** %nodes, %struct.PBVHNode*** %nodes.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode*** %nodes.addr, metadata !1760, metadata !DIExpression()), !dbg !1761
  store i32 %totnode, i32* %totnode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totnode.addr, metadata !1762, metadata !DIExpression()), !dbg !1763
  store i32 %flag, i32* %flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flag.addr, metadata !1764, metadata !DIExpression()), !dbg !1765
  call void @llvm.dbg.declare(metadata i32* %n, metadata !1766, metadata !DIExpression()), !dbg !1767
  store i32 0, i32* %n, align 4, !dbg !1768
  br label %for.cond, !dbg !1770

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n, align 4, !dbg !1771
  %1 = load i32, i32* %totnode.addr, align 4, !dbg !1773
  %cmp = icmp slt i32 %0, %1, !dbg !1774
  br i1 %cmp, label %for.body, label %for.end, !dbg !1775

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node, metadata !1776, metadata !DIExpression()), !dbg !1778
  %2 = load %struct.PBVHNode**, %struct.PBVHNode*** %nodes.addr, align 8, !dbg !1779
  %3 = load i32, i32* %n, align 4, !dbg !1780
  %idxprom = sext i32 %3 to i64, !dbg !1779
  %arrayidx = getelementptr inbounds %struct.PBVHNode*, %struct.PBVHNode** %2, i64 %idxprom, !dbg !1779
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %arrayidx, align 8, !dbg !1779
  store %struct.PBVHNode* %4, %struct.PBVHNode** %node, align 8, !dbg !1778
  %5 = load i32, i32* %flag.addr, align 4, !dbg !1781
  %and = and i32 %5, 4, !dbg !1783
  %tobool = icmp ne i32 %and, 0, !dbg !1783
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !1784

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1785
  %flag1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %6, i32 0, i32 10, !dbg !1786
  %bf.load = load i16, i16* %flag1, align 8, !dbg !1786
  %bf.cast = zext i16 %bf.load to i32, !dbg !1786
  %and2 = and i32 %bf.cast, 4, !dbg !1787
  %tobool3 = icmp ne i32 %and2, 0, !dbg !1787
  br i1 %tobool3, label %if.then, label %if.end, !dbg !1788

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1789
  %8 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1790
  call void @update_node_vb(%struct.PBVH* %7, %struct.PBVHNode* %8), !dbg !1791
  br label %if.end, !dbg !1791

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  %9 = load i32, i32* %flag.addr, align 4, !dbg !1792
  %and4 = and i32 %9, 8, !dbg !1794
  %tobool5 = icmp ne i32 %and4, 0, !dbg !1794
  br i1 %tobool5, label %land.lhs.true6, label %if.end13, !dbg !1795

land.lhs.true6:                                   ; preds = %if.end
  %10 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1796
  %flag7 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %10, i32 0, i32 10, !dbg !1797
  %bf.load8 = load i16, i16* %flag7, align 8, !dbg !1797
  %bf.cast9 = zext i16 %bf.load8 to i32, !dbg !1797
  %and10 = and i32 %bf.cast9, 8, !dbg !1798
  %tobool11 = icmp ne i32 %and10, 0, !dbg !1798
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !1799

if.then12:                                        ; preds = %land.lhs.true6
  %11 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1800
  %orig_vb = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %11, i32 0, i32 2, !dbg !1801
  %12 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1802
  %vb = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %12, i32 0, i32 1, !dbg !1803
  %13 = bitcast %struct.BB* %orig_vb to i8*, !dbg !1803
  %14 = bitcast %struct.BB* %vb to i8*, !dbg !1803
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false), !dbg !1803
  br label %if.end13, !dbg !1800

if.end13:                                         ; preds = %if.then12, %land.lhs.true6, %if.end
  %15 = load i32, i32* %flag.addr, align 4, !dbg !1804
  %and14 = and i32 %15, 32, !dbg !1806
  %tobool15 = icmp ne i32 %and14, 0, !dbg !1806
  br i1 %tobool15, label %land.lhs.true16, label %if.end27, !dbg !1807

land.lhs.true16:                                  ; preds = %if.end13
  %16 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1808
  %flag17 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %16, i32 0, i32 10, !dbg !1809
  %bf.load18 = load i16, i16* %flag17, align 8, !dbg !1809
  %bf.cast19 = zext i16 %bf.load18 to i32, !dbg !1809
  %and20 = and i32 %bf.cast19, 32, !dbg !1810
  %tobool21 = icmp ne i32 %and20, 0, !dbg !1810
  br i1 %tobool21, label %if.then22, label %if.end27, !dbg !1811

if.then22:                                        ; preds = %land.lhs.true16
  %17 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !1812
  %flag23 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %17, i32 0, i32 10, !dbg !1813
  %bf.load24 = load i16, i16* %flag23, align 8, !dbg !1814
  %bf.cast25 = zext i16 %bf.load24 to i32, !dbg !1814
  %and26 = and i32 %bf.cast25, -33, !dbg !1814
  %18 = trunc i32 %and26 to i16, !dbg !1814
  store i16 %18, i16* %flag23, align 8, !dbg !1814
  %bf.result.cast = zext i16 %18 to i32, !dbg !1814
  br label %if.end27, !dbg !1812

if.end27:                                         ; preds = %if.then22, %land.lhs.true16, %if.end13
  br label %for.inc, !dbg !1815

for.inc:                                          ; preds = %if.end27
  %19 = load i32, i32* %n, align 4, !dbg !1816
  %inc = add nsw i32 %19, 1, !dbg !1816
  store i32 %inc, i32* %n, align 4, !dbg !1816
  br label %for.cond, !dbg !1817, !llvm.loop !1818

for.end:                                          ; preds = %for.cond
  ret void, !dbg !1820
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_node_vb(%struct.PBVH* %bvh, %struct.PBVHNode* %node) #0 !dbg !1821 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  %vb = alloca %struct.BB, align 4
  %vd = alloca %struct.PBVHVertexIter, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !1824, metadata !DIExpression()), !dbg !1825
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !1826, metadata !DIExpression()), !dbg !1827
  call void @llvm.dbg.declare(metadata %struct.BB* %vb, metadata !1828, metadata !DIExpression()), !dbg !1829
  call void @BB_reset(%struct.BB* %vb), !dbg !1830
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !1831
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 10, !dbg !1833
  %bf.load = load i16, i16* %flag, align 8, !dbg !1833
  %bf.cast = zext i16 %bf.load to i32, !dbg !1833
  %and = and i32 %bf.cast, 1, !dbg !1834
  %tobool = icmp ne i32 %and, 0, !dbg !1834
  br i1 %tobool, label %if.then, label %if.else118, !dbg !1835

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.PBVHVertexIter* %vd, metadata !1836, metadata !DIExpression()), !dbg !1877
  %1 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1878
  %2 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !1878
  call void @pbvh_vertex_iter_init(%struct.PBVH* %1, %struct.PBVHNode* %2, %struct.PBVHVertexIter* %vd, i32 0), !dbg !1878
  %i = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 5, !dbg !1879
  store i32 0, i32* %i, align 4, !dbg !1879
  %g = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 0, !dbg !1879
  store i32 0, i32* %g, align 8, !dbg !1879
  br label %for.cond, !dbg !1879

for.cond:                                         ; preds = %for.inc114, %if.then
  %g1 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 0, !dbg !1881
  %3 = load i32, i32* %g1, align 8, !dbg !1881
  %totgrid = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 12, !dbg !1881
  %4 = load i32, i32* %totgrid, align 8, !dbg !1881
  %cmp = icmp slt i32 %3, %4, !dbg !1881
  br i1 %cmp, label %for.body, label %for.end117, !dbg !1879

for.body:                                         ; preds = %for.cond
  %grids = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 6, !dbg !1883
  %5 = load %struct.CCGElem**, %struct.CCGElem*** %grids, align 8, !dbg !1883
  %tobool2 = icmp ne %struct.CCGElem** %5, null, !dbg !1883
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !1886

if.then3:                                         ; preds = %for.body
  %gridsize = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 13, !dbg !1887
  %6 = load i32, i32* %gridsize, align 4, !dbg !1887
  %width = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 1, !dbg !1887
  store i32 %6, i32* %width, align 4, !dbg !1887
  %gridsize4 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 13, !dbg !1887
  %7 = load i32, i32* %gridsize4, align 4, !dbg !1887
  %height = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 2, !dbg !1887
  store i32 %7, i32* %height, align 8, !dbg !1887
  %grids5 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 6, !dbg !1887
  %8 = load %struct.CCGElem**, %struct.CCGElem*** %grids5, align 8, !dbg !1887
  %grid_indices = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 11, !dbg !1887
  %9 = load i32*, i32** %grid_indices, align 8, !dbg !1887
  %g6 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 0, !dbg !1887
  %10 = load i32, i32* %g6, align 8, !dbg !1887
  %idxprom = sext i32 %10 to i64, !dbg !1887
  %arrayidx = getelementptr inbounds i32, i32* %9, i64 %idxprom, !dbg !1887
  %11 = load i32, i32* %arrayidx, align 4, !dbg !1887
  %idxprom7 = sext i32 %11 to i64, !dbg !1887
  %arrayidx8 = getelementptr inbounds %struct.CCGElem*, %struct.CCGElem** %8, i64 %idxprom7, !dbg !1887
  %12 = load %struct.CCGElem*, %struct.CCGElem** %arrayidx8, align 8, !dbg !1887
  %grid = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 7, !dbg !1887
  store %struct.CCGElem* %12, %struct.CCGElem** %grid, align 8, !dbg !1887
  br label %if.end, !dbg !1887

if.else:                                          ; preds = %for.body
  %totvert = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 15, !dbg !1889
  %13 = load i32, i32* %totvert, align 8, !dbg !1889
  %width9 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 1, !dbg !1889
  store i32 %13, i32* %width9, align 4, !dbg !1889
  %height10 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 2, !dbg !1889
  store i32 1, i32* %height10, align 8, !dbg !1889
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  %gy = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 4, !dbg !1891
  store i32 0, i32* %gy, align 8, !dbg !1891
  br label %for.cond11, !dbg !1891

for.cond11:                                       ; preds = %for.inc110, %if.end
  %gy12 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 4, !dbg !1893
  %14 = load i32, i32* %gy12, align 8, !dbg !1893
  %height13 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 2, !dbg !1893
  %15 = load i32, i32* %height13, align 8, !dbg !1893
  %cmp14 = icmp slt i32 %14, %15, !dbg !1893
  br i1 %cmp14, label %for.body15, label %for.end113, !dbg !1891

for.body15:                                       ; preds = %for.cond11
  %gx = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 3, !dbg !1895
  store i32 0, i32* %gx, align 4, !dbg !1895
  br label %for.cond16, !dbg !1895

for.cond16:                                       ; preds = %for.inc, %for.body15
  %gx17 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 3, !dbg !1898
  %16 = load i32, i32* %gx17, align 4, !dbg !1898
  %width18 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 1, !dbg !1898
  %17 = load i32, i32* %width18, align 4, !dbg !1898
  %cmp19 = icmp slt i32 %16, %17, !dbg !1898
  br i1 %cmp19, label %for.body20, label %for.end, !dbg !1895

for.body20:                                       ; preds = %for.cond16
  %grid21 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 7, !dbg !1900
  %18 = load %struct.CCGElem*, %struct.CCGElem** %grid21, align 8, !dbg !1900
  %tobool22 = icmp ne %struct.CCGElem* %18, null, !dbg !1900
  br i1 %tobool22, label %if.then23, label %if.else56, !dbg !1903

if.then23:                                        ; preds = %for.body20
  %key = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 8, !dbg !1904
  %19 = load %struct.CCGKey*, %struct.CCGKey** %key, align 8, !dbg !1904
  %grid24 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 7, !dbg !1904
  %20 = load %struct.CCGElem*, %struct.CCGElem** %grid24, align 8, !dbg !1904
  %call = call float* @CCG_elem_co(%struct.CCGKey* %19, %struct.CCGElem* %20), !dbg !1904
  %co = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 24, !dbg !1904
  store float* %call, float** %co, align 8, !dbg !1904
  %key25 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 8, !dbg !1904
  %21 = load %struct.CCGKey*, %struct.CCGKey** %key25, align 8, !dbg !1904
  %grid26 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 7, !dbg !1904
  %22 = load %struct.CCGElem*, %struct.CCGElem** %grid26, align 8, !dbg !1904
  %call27 = call float* @CCG_elem_no(%struct.CCGKey* %21, %struct.CCGElem* %22), !dbg !1904
  %fno = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 26, !dbg !1904
  store float* %call27, float** %fno, align 8, !dbg !1904
  %key28 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 8, !dbg !1904
  %23 = load %struct.CCGKey*, %struct.CCGKey** %key28, align 8, !dbg !1904
  %has_mask = getelementptr inbounds %struct.CCGKey, %struct.CCGKey* %23, i32 0, i32 9, !dbg !1904
  %24 = load i32, i32* %has_mask, align 4, !dbg !1904
  %tobool29 = icmp ne i32 %24, 0, !dbg !1904
  br i1 %tobool29, label %cond.true, label %cond.false, !dbg !1904

cond.true:                                        ; preds = %if.then23
  %key30 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 8, !dbg !1904
  %25 = load %struct.CCGKey*, %struct.CCGKey** %key30, align 8, !dbg !1904
  %grid31 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 7, !dbg !1904
  %26 = load %struct.CCGElem*, %struct.CCGElem** %grid31, align 8, !dbg !1904
  %call32 = call float* @CCG_elem_mask(%struct.CCGKey* %25, %struct.CCGElem* %26), !dbg !1904
  br label %cond.end, !dbg !1904

cond.false:                                       ; preds = %if.then23
  br label %cond.end, !dbg !1904

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float* [ %call32, %cond.true ], [ null, %cond.false ], !dbg !1904
  %mask = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 27, !dbg !1904
  store float* %cond, float** %mask, align 8, !dbg !1904
  %key33 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 8, !dbg !1904
  %27 = load %struct.CCGKey*, %struct.CCGKey** %key33, align 8, !dbg !1904
  %grid34 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 7, !dbg !1904
  %28 = load %struct.CCGElem*, %struct.CCGElem** %grid34, align 8, !dbg !1904
  %call35 = call %struct.CCGElem* @CCG_elem_next(%struct.CCGKey* %27, %struct.CCGElem* %28), !dbg !1904
  %grid36 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 7, !dbg !1904
  store %struct.CCGElem* %call35, %struct.CCGElem** %grid36, align 8, !dbg !1904
  %gh = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 10, !dbg !1906
  %29 = load i32*, i32** %gh, align 8, !dbg !1906
  %tobool37 = icmp ne i32* %29, null, !dbg !1906
  br i1 %tobool37, label %if.then38, label %if.end55, !dbg !1904

if.then38:                                        ; preds = %cond.end
  %gh39 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 10, !dbg !1908
  %30 = load i32*, i32** %gh39, align 8, !dbg !1908
  %gy40 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 4, !dbg !1908
  %31 = load i32, i32* %gy40, align 8, !dbg !1908
  %gridsize41 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 13, !dbg !1908
  %32 = load i32, i32* %gridsize41, align 4, !dbg !1908
  %mul = mul nsw i32 %31, %32, !dbg !1908
  %gx42 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 3, !dbg !1908
  %33 = load i32, i32* %gx42, align 4, !dbg !1908
  %add = add nsw i32 %mul, %33, !dbg !1908
  %shr = ashr i32 %add, 5, !dbg !1908
  %idxprom43 = sext i32 %shr to i64, !dbg !1908
  %arrayidx44 = getelementptr inbounds i32, i32* %30, i64 %idxprom43, !dbg !1908
  %34 = load i32, i32* %arrayidx44, align 4, !dbg !1908
  %gy45 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 4, !dbg !1908
  %35 = load i32, i32* %gy45, align 8, !dbg !1908
  %gridsize46 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 13, !dbg !1908
  %36 = load i32, i32* %gridsize46, align 4, !dbg !1908
  %mul47 = mul nsw i32 %35, %36, !dbg !1908
  %gx48 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 3, !dbg !1908
  %37 = load i32, i32* %gx48, align 4, !dbg !1908
  %add49 = add nsw i32 %mul47, %37, !dbg !1908
  %and50 = and i32 %add49, 31, !dbg !1908
  %shl = shl i32 1, %and50, !dbg !1908
  %and51 = and i32 %34, %shl, !dbg !1908
  %tobool52 = icmp ne i32 %and51, 0, !dbg !1908
  br i1 %tobool52, label %if.then53, label %if.end54, !dbg !1911

if.then53:                                        ; preds = %if.then38
  br label %for.inc, !dbg !1908

if.end54:                                         ; preds = %if.then38
  br label %if.end55, !dbg !1911

if.end55:                                         ; preds = %if.end54, %cond.end
  br label %if.end105, !dbg !1904

if.else56:                                        ; preds = %for.body20
  %mverts = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 14, !dbg !1912
  %38 = load %struct.MVert*, %struct.MVert** %mverts, align 8, !dbg !1912
  %tobool57 = icmp ne %struct.MVert* %38, null, !dbg !1912
  br i1 %tobool57, label %if.then58, label %if.else82, !dbg !1900

if.then58:                                        ; preds = %if.else56
  %mverts59 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 14, !dbg !1914
  %39 = load %struct.MVert*, %struct.MVert** %mverts59, align 8, !dbg !1914
  %vert_indices = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 16, !dbg !1914
  %40 = load i32*, i32** %vert_indices, align 8, !dbg !1914
  %gx60 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 3, !dbg !1914
  %41 = load i32, i32* %gx60, align 4, !dbg !1914
  %idxprom61 = sext i32 %41 to i64, !dbg !1914
  %arrayidx62 = getelementptr inbounds i32, i32* %40, i64 %idxprom61, !dbg !1914
  %42 = load i32, i32* %arrayidx62, align 4, !dbg !1914
  %idxprom63 = sext i32 %42 to i64, !dbg !1914
  %arrayidx64 = getelementptr inbounds %struct.MVert, %struct.MVert* %39, i64 %idxprom63, !dbg !1914
  %mvert = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 22, !dbg !1914
  store %struct.MVert* %arrayidx64, %struct.MVert** %mvert, align 8, !dbg !1914
  %mvert65 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 22, !dbg !1914
  %43 = load %struct.MVert*, %struct.MVert** %mvert65, align 8, !dbg !1914
  %co66 = getelementptr inbounds %struct.MVert, %struct.MVert* %43, i32 0, i32 0, !dbg !1914
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co66, i64 0, i64 0, !dbg !1914
  %co67 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 24, !dbg !1914
  store float* %arraydecay, float** %co67, align 8, !dbg !1914
  %mvert68 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 22, !dbg !1914
  %44 = load %struct.MVert*, %struct.MVert** %mvert68, align 8, !dbg !1914
  %no = getelementptr inbounds %struct.MVert, %struct.MVert* %44, i32 0, i32 1, !dbg !1914
  %arraydecay69 = getelementptr inbounds [3 x i16], [3 x i16]* %no, i64 0, i64 0, !dbg !1914
  %no70 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 25, !dbg !1914
  store i16* %arraydecay69, i16** %no70, align 8, !dbg !1914
  %vmask = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 17, !dbg !1916
  %45 = load float*, float** %vmask, align 8, !dbg !1916
  %tobool71 = icmp ne float* %45, null, !dbg !1916
  br i1 %tobool71, label %if.then72, label %if.end81, !dbg !1914

if.then72:                                        ; preds = %if.then58
  %vmask73 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 17, !dbg !1916
  %46 = load float*, float** %vmask73, align 8, !dbg !1916
  %vert_indices74 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 16, !dbg !1916
  %47 = load i32*, i32** %vert_indices74, align 8, !dbg !1916
  %gx75 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 3, !dbg !1916
  %48 = load i32, i32* %gx75, align 4, !dbg !1916
  %idxprom76 = sext i32 %48 to i64, !dbg !1916
  %arrayidx77 = getelementptr inbounds i32, i32* %47, i64 %idxprom76, !dbg !1916
  %49 = load i32, i32* %arrayidx77, align 4, !dbg !1916
  %idxprom78 = sext i32 %49 to i64, !dbg !1916
  %arrayidx79 = getelementptr inbounds float, float* %46, i64 %idxprom78, !dbg !1916
  %mask80 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 27, !dbg !1916
  store float* %arrayidx79, float** %mask80, align 8, !dbg !1916
  br label %if.end81, !dbg !1916

if.end81:                                         ; preds = %if.then72, %if.then58
  br label %if.end104, !dbg !1914

if.else82:                                        ; preds = %if.else56
  %bm_unique_verts = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 18, !dbg !1918
  %call83 = call zeroext i8 @BLI_gsetIterator_done(%struct.GSetIterator* %bm_unique_verts), !dbg !1918
  %tobool84 = icmp ne i8 %call83, 0, !dbg !1918
  br i1 %tobool84, label %if.else89, label %if.then85, !dbg !1921

if.then85:                                        ; preds = %if.else82
  %bm_unique_verts86 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 18, !dbg !1922
  %call87 = call i8* @BLI_gsetIterator_getKey(%struct.GSetIterator* %bm_unique_verts86), !dbg !1922
  %50 = bitcast i8* %call87 to %struct.BMVert*, !dbg !1922
  %bm_vert = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 23, !dbg !1922
  store %struct.BMVert* %50, %struct.BMVert** %bm_vert, align 8, !dbg !1922
  %bm_unique_verts88 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 18, !dbg !1922
  call void @BLI_gsetIterator_step(%struct.GSetIterator* %bm_unique_verts88), !dbg !1922
  br label %if.end93, !dbg !1922

if.else89:                                        ; preds = %if.else82
  %bm_other_verts = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 19, !dbg !1924
  %call90 = call i8* @BLI_gsetIterator_getKey(%struct.GSetIterator* %bm_other_verts), !dbg !1924
  %51 = bitcast i8* %call90 to %struct.BMVert*, !dbg !1924
  %bm_vert91 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 23, !dbg !1924
  store %struct.BMVert* %51, %struct.BMVert** %bm_vert91, align 8, !dbg !1924
  %bm_other_verts92 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 19, !dbg !1924
  call void @BLI_gsetIterator_step(%struct.GSetIterator* %bm_other_verts92), !dbg !1924
  br label %if.end93

if.end93:                                         ; preds = %if.else89, %if.then85
  %bm_vert94 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 23, !dbg !1921
  %52 = load %struct.BMVert*, %struct.BMVert** %bm_vert94, align 8, !dbg !1921
  %co95 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %52, i32 0, i32 2, !dbg !1921
  %arraydecay96 = getelementptr inbounds [3 x float], [3 x float]* %co95, i64 0, i64 0, !dbg !1921
  %co97 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 24, !dbg !1921
  store float* %arraydecay96, float** %co97, align 8, !dbg !1921
  %bm_vert98 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 23, !dbg !1921
  %53 = load %struct.BMVert*, %struct.BMVert** %bm_vert98, align 8, !dbg !1921
  %no99 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %53, i32 0, i32 3, !dbg !1921
  %arraydecay100 = getelementptr inbounds [3 x float], [3 x float]* %no99, i64 0, i64 0, !dbg !1921
  %fno101 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 26, !dbg !1921
  store float* %arraydecay100, float** %fno101, align 8, !dbg !1921
  %bm_vert102 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 23, !dbg !1921
  %54 = load %struct.BMVert*, %struct.BMVert** %bm_vert102, align 8, !dbg !1921
  %head = getelementptr inbounds %struct.BMVert, %struct.BMVert* %54, i32 0, i32 0, !dbg !1921
  %data = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %head, i32 0, i32 0, !dbg !1921
  %55 = load i8*, i8** %data, align 8, !dbg !1921
  %cd_vert_mask_offset = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 21, !dbg !1921
  %56 = load i32, i32* %cd_vert_mask_offset, align 8, !dbg !1921
  %idx.ext = sext i32 %56 to i64, !dbg !1921
  %add.ptr = getelementptr inbounds i8, i8* %55, i64 %idx.ext, !dbg !1921
  %57 = bitcast i8* %add.ptr to float*, !dbg !1921
  %mask103 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 27, !dbg !1921
  store float* %57, float** %mask103, align 8, !dbg !1921
  br label %if.end104

if.end104:                                        ; preds = %if.end93, %if.end81
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.end55
  %co106 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 24, !dbg !1926
  %58 = load float*, float** %co106, align 8, !dbg !1926
  call void @BB_expand(%struct.BB* %vb, float* %58), !dbg !1928
  br label %for.inc, !dbg !1929

for.inc:                                          ; preds = %if.end105, %if.then53
  %gx107 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 3, !dbg !1898
  %59 = load i32, i32* %gx107, align 4, !dbg !1898
  %inc = add nsw i32 %59, 1, !dbg !1898
  store i32 %inc, i32* %gx107, align 4, !dbg !1898
  %i108 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 5, !dbg !1898
  %60 = load i32, i32* %i108, align 4, !dbg !1898
  %inc109 = add nsw i32 %60, 1, !dbg !1898
  store i32 %inc109, i32* %i108, align 4, !dbg !1898
  br label %for.cond16, !dbg !1898, !llvm.loop !1930

for.end:                                          ; preds = %for.cond16
  br label %for.inc110, !dbg !1932

for.inc110:                                       ; preds = %for.end
  %gy111 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 4, !dbg !1893
  %61 = load i32, i32* %gy111, align 8, !dbg !1893
  %inc112 = add nsw i32 %61, 1, !dbg !1893
  store i32 %inc112, i32* %gy111, align 8, !dbg !1893
  br label %for.cond11, !dbg !1893, !llvm.loop !1933

for.end113:                                       ; preds = %for.cond11
  br label %for.inc114, !dbg !1935

for.inc114:                                       ; preds = %for.end113
  %g115 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %vd, i32 0, i32 0, !dbg !1881
  %62 = load i32, i32* %g115, align 8, !dbg !1881
  %inc116 = add nsw i32 %62, 1, !dbg !1881
  store i32 %inc116, i32* %g115, align 8, !dbg !1881
  br label %for.cond, !dbg !1881, !llvm.loop !1936

for.end117:                                       ; preds = %for.cond
  br label %if.end128, !dbg !1938

if.else118:                                       ; preds = %entry
  %63 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1939
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %63, i32 0, i32 2, !dbg !1941
  %64 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !1941
  %65 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !1942
  %children_offset = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %65, i32 0, i32 3, !dbg !1943
  %66 = load i32, i32* %children_offset, align 8, !dbg !1943
  %idxprom119 = sext i32 %66 to i64, !dbg !1939
  %arrayidx120 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %64, i64 %idxprom119, !dbg !1939
  %vb121 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %arrayidx120, i32 0, i32 1, !dbg !1944
  call void @BB_expand_with_bb(%struct.BB* %vb, %struct.BB* %vb121), !dbg !1945
  %67 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1946
  %nodes122 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %67, i32 0, i32 2, !dbg !1947
  %68 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes122, align 8, !dbg !1947
  %69 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !1948
  %children_offset123 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %69, i32 0, i32 3, !dbg !1949
  %70 = load i32, i32* %children_offset123, align 8, !dbg !1949
  %add124 = add nsw i32 %70, 1, !dbg !1950
  %idxprom125 = sext i32 %add124 to i64, !dbg !1946
  %arrayidx126 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %68, i64 %idxprom125, !dbg !1946
  %vb127 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %arrayidx126, i32 0, i32 1, !dbg !1951
  call void @BB_expand_with_bb(%struct.BB* %vb, %struct.BB* %vb127), !dbg !1952
  br label %if.end128

if.end128:                                        ; preds = %if.else118, %for.end117
  %71 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !1953
  %vb129 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %71, i32 0, i32 1, !dbg !1954
  %72 = bitcast %struct.BB* %vb129 to i8*, !dbg !1955
  %73 = bitcast %struct.BB* %vb to i8*, !dbg !1955
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* align 4 %73, i64 24, i1 false), !dbg !1955
  ret void, !dbg !1956
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_update(%struct.PBVH* %bvh, i32 %flag, [3 x float]* %face_nors) #0 !dbg !1957 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %flag.addr = alloca i32, align 4
  %face_nors.addr = alloca [3 x float]*, align 8
  %nodes = alloca %struct.PBVHNode**, align 8
  %totnode = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !1960, metadata !DIExpression()), !dbg !1961
  store i32 %flag, i32* %flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flag.addr, metadata !1962, metadata !DIExpression()), !dbg !1963
  store [3 x float]* %face_nors, [3 x float]** %face_nors.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %face_nors.addr, metadata !1964, metadata !DIExpression()), !dbg !1965
  call void @llvm.dbg.declare(metadata %struct.PBVHNode*** %nodes, metadata !1966, metadata !DIExpression()), !dbg !1967
  call void @llvm.dbg.declare(metadata i32* %totnode, metadata !1968, metadata !DIExpression()), !dbg !1969
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1970
  %nodes1 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 2, !dbg !1972
  %1 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes1, align 8, !dbg !1972
  %tobool = icmp ne %struct.PBVHNode* %1, null, !dbg !1970
  br i1 %tobool, label %if.end, label %if.then, !dbg !1973

if.then:                                          ; preds = %entry
  br label %if.end16, !dbg !1974

if.end:                                           ; preds = %entry
  %2 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1975
  %3 = load i32, i32* %flag.addr, align 4, !dbg !1976
  %conv = sext i32 %3 to i64, !dbg !1976
  %4 = inttoptr i64 %conv to i8*, !dbg !1976
  call void @BKE_pbvh_search_gather(%struct.PBVH* %2, i8 (%struct.PBVHNode*, i8*)* @update_search_cb, i8* %4, %struct.PBVHNode*** %nodes, i32* %totnode), !dbg !1977
  %5 = load i32, i32* %flag.addr, align 4, !dbg !1978
  %and = and i32 %5, 2, !dbg !1980
  %tobool2 = icmp ne i32 %and, 0, !dbg !1980
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !1981

if.then3:                                         ; preds = %if.end
  %6 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1982
  %7 = load %struct.PBVHNode**, %struct.PBVHNode*** %nodes, align 8, !dbg !1983
  %8 = load i32, i32* %totnode, align 4, !dbg !1984
  %9 = load [3 x float]*, [3 x float]** %face_nors.addr, align 8, !dbg !1985
  call void @pbvh_update_normals(%struct.PBVH* %6, %struct.PBVHNode** %7, i32 %8, [3 x float]* %9), !dbg !1986
  br label %if.end4, !dbg !1986

if.end4:                                          ; preds = %if.then3, %if.end
  %10 = load i32, i32* %flag.addr, align 4, !dbg !1987
  %and5 = and i32 %10, 44, !dbg !1989
  %tobool6 = icmp ne i32 %and5, 0, !dbg !1989
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !1990

if.then7:                                         ; preds = %if.end4
  %11 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !1991
  %12 = load %struct.PBVHNode**, %struct.PBVHNode*** %nodes, align 8, !dbg !1992
  %13 = load i32, i32* %totnode, align 4, !dbg !1993
  %14 = load i32, i32* %flag.addr, align 4, !dbg !1994
  call void @pbvh_update_BB_redraw(%struct.PBVH* %11, %struct.PBVHNode** %12, i32 %13, i32 %14), !dbg !1995
  br label %if.end8, !dbg !1995

if.end8:                                          ; preds = %if.then7, %if.end4
  %15 = load i32, i32* %flag.addr, align 4, !dbg !1996
  %and9 = and i32 %15, 12, !dbg !1998
  %tobool10 = icmp ne i32 %and9, 0, !dbg !1998
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !1999

if.then11:                                        ; preds = %if.end8
  %16 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2000
  %17 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2001
  %nodes12 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %17, i32 0, i32 2, !dbg !2002
  %18 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes12, align 8, !dbg !2002
  %19 = load i32, i32* %flag.addr, align 4, !dbg !2003
  %call = call i32 @pbvh_flush_bb(%struct.PBVH* %16, %struct.PBVHNode* %18, i32 %19), !dbg !2004
  br label %if.end13, !dbg !2004

if.end13:                                         ; preds = %if.then11, %if.end8
  %20 = load %struct.PBVHNode**, %struct.PBVHNode*** %nodes, align 8, !dbg !2005
  %tobool14 = icmp ne %struct.PBVHNode** %20, null, !dbg !2005
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !2007

if.then15:                                        ; preds = %if.end13
  %21 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !2008
  %22 = load %struct.PBVHNode**, %struct.PBVHNode*** %nodes, align 8, !dbg !2009
  %23 = bitcast %struct.PBVHNode** %22 to i8*, !dbg !2009
  call void %21(i8* %23), !dbg !2008
  br label %if.end16, !dbg !2008

if.end16:                                         ; preds = %if.then, %if.then15, %if.end13
  ret void, !dbg !2010
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @update_search_cb(%struct.PBVHNode* %node, i8* %data_v) #0 !dbg !2011 {
entry:
  %retval = alloca i8, align 1
  %node.addr = alloca %struct.PBVHNode*, align 8
  %data_v.addr = alloca i8*, align 8
  %flag = alloca i32, align 4
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !2012, metadata !DIExpression()), !dbg !2013
  store i8* %data_v, i8** %data_v.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data_v.addr, metadata !2014, metadata !DIExpression()), !dbg !2015
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !2016, metadata !DIExpression()), !dbg !2017
  %0 = load i8*, i8** %data_v.addr, align 8, !dbg !2018
  %1 = ptrtoint i8* %0 to i64, !dbg !2018
  %conv = trunc i64 %1 to i32, !dbg !2018
  store i32 %conv, i32* %flag, align 4, !dbg !2017
  %2 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2019
  %flag1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %2, i32 0, i32 10, !dbg !2021
  %bf.load = load i16, i16* %flag1, align 8, !dbg !2021
  %bf.cast = zext i16 %bf.load to i32, !dbg !2021
  %and = and i32 %bf.cast, 1, !dbg !2022
  %tobool = icmp ne i32 %and, 0, !dbg !2022
  br i1 %tobool, label %if.then, label %if.end, !dbg !2023

if.then:                                          ; preds = %entry
  %3 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2024
  %flag2 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %3, i32 0, i32 10, !dbg !2025
  %bf.load3 = load i16, i16* %flag2, align 8, !dbg !2025
  %bf.cast4 = zext i16 %bf.load3 to i32, !dbg !2025
  %4 = load i32, i32* %flag, align 4, !dbg !2026
  %and5 = and i32 %bf.cast4, %4, !dbg !2027
  %cmp = icmp ne i32 %and5, 0, !dbg !2028
  %conv6 = zext i1 %cmp to i32, !dbg !2028
  %conv7 = trunc i32 %conv6 to i8, !dbg !2029
  store i8 %conv7, i8* %retval, align 1, !dbg !2030
  br label %return, !dbg !2030

if.end:                                           ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !2031
  br label %return, !dbg !2031

return:                                           ; preds = %if.end, %if.then
  %5 = load i8, i8* %retval, align 1, !dbg !2032
  ret i8 %5, !dbg !2032
}

; Function Attrs: noinline nounwind uwtable
define internal void @pbvh_update_normals(%struct.PBVH* %bvh, %struct.PBVHNode** %nodes, i32 %totnode, [3 x float]* %face_nors) #0 !dbg !2033 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %nodes.addr = alloca %struct.PBVHNode**, align 8
  %totnode.addr = alloca i32, align 4
  %face_nors.addr = alloca [3 x float]*, align 8
  %vnor = alloca [3 x float]*, align 8
  %n = alloca i32, align 4
  %node = alloca %struct.PBVHNode*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %totface = alloca i32, align 4
  %faces = alloca i32*, align 8
  %f = alloca %struct.MFace*, align 8
  %fn = alloca [3 x float], align 4
  %fv = alloca i32*, align 8
  %sides = alloca i32, align 4
  %v = alloca i32, align 4
  %node110 = alloca %struct.PBVHNode*, align 8
  %i119 = alloca i32, align 4
  %verts120 = alloca i32*, align 8
  %totvert121 = alloca i32, align 4
  %v126 = alloca i32, align 4
  %mvert = alloca %struct.MVert*, align 8
  %no = alloca [3 x float], align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !2036, metadata !DIExpression()), !dbg !2037
  store %struct.PBVHNode** %nodes, %struct.PBVHNode*** %nodes.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode*** %nodes.addr, metadata !2038, metadata !DIExpression()), !dbg !2039
  store i32 %totnode, i32* %totnode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totnode.addr, metadata !2040, metadata !DIExpression()), !dbg !2041
  store [3 x float]* %face_nors, [3 x float]** %face_nors.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %face_nors.addr, metadata !2042, metadata !DIExpression()), !dbg !2043
  call void @llvm.dbg.declare(metadata [3 x float]** %vnor, metadata !2044, metadata !DIExpression()), !dbg !2045
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2046, metadata !DIExpression()), !dbg !2047
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2048
  %type = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 0, !dbg !2050
  %1 = load i32, i32* %type, align 8, !dbg !2050
  %cmp = icmp eq i32 %1, 2, !dbg !2051
  br i1 %cmp, label %if.then, label %if.end, !dbg !2052

if.then:                                          ; preds = %entry
  %2 = load %struct.PBVHNode**, %struct.PBVHNode*** %nodes.addr, align 8, !dbg !2053
  %3 = load i32, i32* %totnode.addr, align 4, !dbg !2055
  call void @pbvh_bmesh_normals_update(%struct.PBVHNode** %2, i32 %3), !dbg !2056
  br label %return, !dbg !2057

if.end:                                           ; preds = %entry
  %4 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2058
  %type1 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %4, i32 0, i32 0, !dbg !2060
  %5 = load i32, i32* %type1, align 8, !dbg !2060
  %cmp2 = icmp ne i32 %5, 0, !dbg !2061
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !2062

if.then3:                                         ; preds = %if.end
  br label %return, !dbg !2063

if.end4:                                          ; preds = %if.end
  %6 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !2064
  %7 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2065
  %totvert = getelementptr inbounds %struct.PBVH, %struct.PBVH* %7, i32 0, i32 7, !dbg !2066
  %8 = load i32, i32* %totvert, align 4, !dbg !2066
  %conv = sext i32 %8 to i64, !dbg !2065
  %mul = mul i64 12, %conv, !dbg !2067
  %call = call i8* %6(i64 %mul, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0)), !dbg !2064
  %9 = bitcast i8* %call to [3 x float]*, !dbg !2064
  store [3 x float]* %9, [3 x float]** %vnor, align 8, !dbg !2068
  store i32 0, i32* %n, align 4, !dbg !2069
  br label %for.cond, !dbg !2071

for.cond:                                         ; preds = %for.inc103, %if.end4
  %10 = load i32, i32* %n, align 4, !dbg !2072
  %11 = load i32, i32* %totnode.addr, align 4, !dbg !2074
  %cmp5 = icmp slt i32 %10, %11, !dbg !2075
  br i1 %cmp5, label %for.body, label %for.end105, !dbg !2076

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node, metadata !2077, metadata !DIExpression()), !dbg !2079
  %12 = load %struct.PBVHNode**, %struct.PBVHNode*** %nodes.addr, align 8, !dbg !2080
  %13 = load i32, i32* %n, align 4, !dbg !2081
  %idxprom = sext i32 %13 to i64, !dbg !2080
  %arrayidx = getelementptr inbounds %struct.PBVHNode*, %struct.PBVHNode** %12, i64 %idxprom, !dbg !2080
  %14 = load %struct.PBVHNode*, %struct.PBVHNode** %arrayidx, align 8, !dbg !2080
  store %struct.PBVHNode* %14, %struct.PBVHNode** %node, align 8, !dbg !2079
  %15 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !2082
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %15, i32 0, i32 10, !dbg !2084
  %bf.load = load i16, i16* %flag, align 8, !dbg !2084
  %bf.cast = zext i16 %bf.load to i32, !dbg !2084
  %and = and i32 %bf.cast, 2, !dbg !2085
  %tobool = icmp ne i32 %and, 0, !dbg !2085
  br i1 %tobool, label %if.then7, label %if.end102, !dbg !2086

if.then7:                                         ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2087, metadata !DIExpression()), !dbg !2089
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2090, metadata !DIExpression()), !dbg !2091
  call void @llvm.dbg.declare(metadata i32* %totface, metadata !2092, metadata !DIExpression()), !dbg !2093
  call void @llvm.dbg.declare(metadata i32** %faces, metadata !2094, metadata !DIExpression()), !dbg !2095
  %16 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !2096
  %prim_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %16, i32 0, i32 4, !dbg !2097
  %17 = load i32*, i32** %prim_indices, align 8, !dbg !2097
  store i32* %17, i32** %faces, align 8, !dbg !2098
  %18 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !2099
  %totprim = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %18, i32 0, i32 5, !dbg !2100
  %19 = load i32, i32* %totprim, align 8, !dbg !2100
  store i32 %19, i32* %totface, align 4, !dbg !2101
  store i32 0, i32* %i, align 4, !dbg !2102
  br label %for.cond8, !dbg !2104

for.cond8:                                        ; preds = %for.inc99, %if.then7
  %20 = load i32, i32* %i, align 4, !dbg !2105
  %21 = load i32, i32* %totface, align 4, !dbg !2107
  %cmp9 = icmp slt i32 %20, %21, !dbg !2108
  br i1 %cmp9, label %for.body11, label %for.end101, !dbg !2109

for.body11:                                       ; preds = %for.cond8
  call void @llvm.dbg.declare(metadata %struct.MFace** %f, metadata !2110, metadata !DIExpression()), !dbg !2112
  %22 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2113
  %faces12 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %22, i32 0, i32 10, !dbg !2114
  %23 = load %struct.MFace*, %struct.MFace** %faces12, align 8, !dbg !2114
  %24 = load i32*, i32** %faces, align 8, !dbg !2115
  %25 = load i32, i32* %i, align 4, !dbg !2116
  %idxprom13 = sext i32 %25 to i64, !dbg !2115
  %arrayidx14 = getelementptr inbounds i32, i32* %24, i64 %idxprom13, !dbg !2115
  %26 = load i32, i32* %arrayidx14, align 4, !dbg !2115
  %idx.ext = sext i32 %26 to i64, !dbg !2117
  %add.ptr = getelementptr inbounds %struct.MFace, %struct.MFace* %23, i64 %idx.ext, !dbg !2117
  store %struct.MFace* %add.ptr, %struct.MFace** %f, align 8, !dbg !2112
  call void @llvm.dbg.declare(metadata [3 x float]* %fn, metadata !2118, metadata !DIExpression()), !dbg !2119
  call void @llvm.dbg.declare(metadata i32** %fv, metadata !2120, metadata !DIExpression()), !dbg !2122
  %27 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !2123
  %v1 = getelementptr inbounds %struct.MFace, %struct.MFace* %27, i32 0, i32 0, !dbg !2124
  store i32* %v1, i32** %fv, align 8, !dbg !2122
  call void @llvm.dbg.declare(metadata i32* %sides, metadata !2125, metadata !DIExpression()), !dbg !2126
  %28 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !2127
  %v4 = getelementptr inbounds %struct.MFace, %struct.MFace* %28, i32 0, i32 3, !dbg !2128
  %29 = load i32, i32* %v4, align 4, !dbg !2128
  %tobool15 = icmp ne i32 %29, 0, !dbg !2129
  %30 = zext i1 %tobool15 to i64, !dbg !2129
  %cond = select i1 %tobool15, i32 4, i32 3, !dbg !2129
  store i32 %cond, i32* %sides, align 4, !dbg !2126
  %31 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !2130
  %v416 = getelementptr inbounds %struct.MFace, %struct.MFace* %31, i32 0, i32 3, !dbg !2132
  %32 = load i32, i32* %v416, align 4, !dbg !2132
  %tobool17 = icmp ne i32 %32, 0, !dbg !2130
  br i1 %tobool17, label %if.then18, label %if.else, !dbg !2133

if.then18:                                        ; preds = %for.body11
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %fn, i64 0, i64 0, !dbg !2134
  %33 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2135
  %verts = getelementptr inbounds %struct.PBVH, %struct.PBVH* %33, i32 0, i32 9, !dbg !2136
  %34 = load %struct.MVert*, %struct.MVert** %verts, align 8, !dbg !2136
  %35 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !2137
  %v119 = getelementptr inbounds %struct.MFace, %struct.MFace* %35, i32 0, i32 0, !dbg !2138
  %36 = load i32, i32* %v119, align 4, !dbg !2138
  %idxprom20 = zext i32 %36 to i64, !dbg !2135
  %arrayidx21 = getelementptr inbounds %struct.MVert, %struct.MVert* %34, i64 %idxprom20, !dbg !2135
  %co = getelementptr inbounds %struct.MVert, %struct.MVert* %arrayidx21, i32 0, i32 0, !dbg !2139
  %arraydecay22 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2135
  %37 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2140
  %verts23 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %37, i32 0, i32 9, !dbg !2141
  %38 = load %struct.MVert*, %struct.MVert** %verts23, align 8, !dbg !2141
  %39 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !2142
  %v2 = getelementptr inbounds %struct.MFace, %struct.MFace* %39, i32 0, i32 1, !dbg !2143
  %40 = load i32, i32* %v2, align 4, !dbg !2143
  %idxprom24 = zext i32 %40 to i64, !dbg !2140
  %arrayidx25 = getelementptr inbounds %struct.MVert, %struct.MVert* %38, i64 %idxprom24, !dbg !2140
  %co26 = getelementptr inbounds %struct.MVert, %struct.MVert* %arrayidx25, i32 0, i32 0, !dbg !2144
  %arraydecay27 = getelementptr inbounds [3 x float], [3 x float]* %co26, i64 0, i64 0, !dbg !2140
  %41 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2145
  %verts28 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %41, i32 0, i32 9, !dbg !2146
  %42 = load %struct.MVert*, %struct.MVert** %verts28, align 8, !dbg !2146
  %43 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !2147
  %v3 = getelementptr inbounds %struct.MFace, %struct.MFace* %43, i32 0, i32 2, !dbg !2148
  %44 = load i32, i32* %v3, align 4, !dbg !2148
  %idxprom29 = zext i32 %44 to i64, !dbg !2145
  %arrayidx30 = getelementptr inbounds %struct.MVert, %struct.MVert* %42, i64 %idxprom29, !dbg !2145
  %co31 = getelementptr inbounds %struct.MVert, %struct.MVert* %arrayidx30, i32 0, i32 0, !dbg !2149
  %arraydecay32 = getelementptr inbounds [3 x float], [3 x float]* %co31, i64 0, i64 0, !dbg !2145
  %45 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2150
  %verts33 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %45, i32 0, i32 9, !dbg !2151
  %46 = load %struct.MVert*, %struct.MVert** %verts33, align 8, !dbg !2151
  %47 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !2152
  %v434 = getelementptr inbounds %struct.MFace, %struct.MFace* %47, i32 0, i32 3, !dbg !2153
  %48 = load i32, i32* %v434, align 4, !dbg !2153
  %idxprom35 = zext i32 %48 to i64, !dbg !2150
  %arrayidx36 = getelementptr inbounds %struct.MVert, %struct.MVert* %46, i64 %idxprom35, !dbg !2150
  %co37 = getelementptr inbounds %struct.MVert, %struct.MVert* %arrayidx36, i32 0, i32 0, !dbg !2154
  %arraydecay38 = getelementptr inbounds [3 x float], [3 x float]* %co37, i64 0, i64 0, !dbg !2150
  %call39 = call float @normal_quad_v3(float* %arraydecay, float* %arraydecay22, float* %arraydecay27, float* %arraydecay32, float* %arraydecay38), !dbg !2155
  br label %if.end60, !dbg !2155

if.else:                                          ; preds = %for.body11
  %arraydecay40 = getelementptr inbounds [3 x float], [3 x float]* %fn, i64 0, i64 0, !dbg !2156
  %49 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2157
  %verts41 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %49, i32 0, i32 9, !dbg !2158
  %50 = load %struct.MVert*, %struct.MVert** %verts41, align 8, !dbg !2158
  %51 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !2159
  %v142 = getelementptr inbounds %struct.MFace, %struct.MFace* %51, i32 0, i32 0, !dbg !2160
  %52 = load i32, i32* %v142, align 4, !dbg !2160
  %idxprom43 = zext i32 %52 to i64, !dbg !2157
  %arrayidx44 = getelementptr inbounds %struct.MVert, %struct.MVert* %50, i64 %idxprom43, !dbg !2157
  %co45 = getelementptr inbounds %struct.MVert, %struct.MVert* %arrayidx44, i32 0, i32 0, !dbg !2161
  %arraydecay46 = getelementptr inbounds [3 x float], [3 x float]* %co45, i64 0, i64 0, !dbg !2157
  %53 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2162
  %verts47 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %53, i32 0, i32 9, !dbg !2163
  %54 = load %struct.MVert*, %struct.MVert** %verts47, align 8, !dbg !2163
  %55 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !2164
  %v248 = getelementptr inbounds %struct.MFace, %struct.MFace* %55, i32 0, i32 1, !dbg !2165
  %56 = load i32, i32* %v248, align 4, !dbg !2165
  %idxprom49 = zext i32 %56 to i64, !dbg !2162
  %arrayidx50 = getelementptr inbounds %struct.MVert, %struct.MVert* %54, i64 %idxprom49, !dbg !2162
  %co51 = getelementptr inbounds %struct.MVert, %struct.MVert* %arrayidx50, i32 0, i32 0, !dbg !2166
  %arraydecay52 = getelementptr inbounds [3 x float], [3 x float]* %co51, i64 0, i64 0, !dbg !2162
  %57 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2167
  %verts53 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %57, i32 0, i32 9, !dbg !2168
  %58 = load %struct.MVert*, %struct.MVert** %verts53, align 8, !dbg !2168
  %59 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !2169
  %v354 = getelementptr inbounds %struct.MFace, %struct.MFace* %59, i32 0, i32 2, !dbg !2170
  %60 = load i32, i32* %v354, align 4, !dbg !2170
  %idxprom55 = zext i32 %60 to i64, !dbg !2167
  %arrayidx56 = getelementptr inbounds %struct.MVert, %struct.MVert* %58, i64 %idxprom55, !dbg !2167
  %co57 = getelementptr inbounds %struct.MVert, %struct.MVert* %arrayidx56, i32 0, i32 0, !dbg !2171
  %arraydecay58 = getelementptr inbounds [3 x float], [3 x float]* %co57, i64 0, i64 0, !dbg !2167
  %call59 = call float @normal_tri_v3(float* %arraydecay40, float* %arraydecay46, float* %arraydecay52, float* %arraydecay58), !dbg !2172
  br label %if.end60

if.end60:                                         ; preds = %if.else, %if.then18
  store i32 0, i32* %j, align 4, !dbg !2173
  br label %for.cond61, !dbg !2175

for.cond61:                                       ; preds = %for.inc, %if.end60
  %61 = load i32, i32* %j, align 4, !dbg !2176
  %62 = load i32, i32* %sides, align 4, !dbg !2178
  %cmp62 = icmp slt i32 %61, %62, !dbg !2179
  br i1 %cmp62, label %for.body64, label %for.end, !dbg !2180

for.body64:                                       ; preds = %for.cond61
  call void @llvm.dbg.declare(metadata i32* %v, metadata !2181, metadata !DIExpression()), !dbg !2183
  %63 = load i32*, i32** %fv, align 8, !dbg !2184
  %64 = load i32, i32* %j, align 4, !dbg !2185
  %idxprom65 = sext i32 %64 to i64, !dbg !2184
  %arrayidx66 = getelementptr inbounds i32, i32* %63, i64 %idxprom65, !dbg !2184
  %65 = load i32, i32* %arrayidx66, align 4, !dbg !2184
  store i32 %65, i32* %v, align 4, !dbg !2183
  %66 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2186
  %verts67 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %66, i32 0, i32 9, !dbg !2188
  %67 = load %struct.MVert*, %struct.MVert** %verts67, align 8, !dbg !2188
  %68 = load i32, i32* %v, align 4, !dbg !2189
  %idxprom68 = sext i32 %68 to i64, !dbg !2186
  %arrayidx69 = getelementptr inbounds %struct.MVert, %struct.MVert* %67, i64 %idxprom68, !dbg !2186
  %flag70 = getelementptr inbounds %struct.MVert, %struct.MVert* %arrayidx69, i32 0, i32 2, !dbg !2190
  %69 = load i8, i8* %flag70, align 2, !dbg !2190
  %conv71 = zext i8 %69 to i32, !dbg !2186
  %and72 = and i32 %conv71, 128, !dbg !2191
  %tobool73 = icmp ne i32 %and72, 0, !dbg !2191
  br i1 %tobool73, label %if.then74, label %if.end89, !dbg !2192

if.then74:                                        ; preds = %for.body64
  %arrayidx75 = getelementptr inbounds [3 x float], [3 x float]* %fn, i64 0, i64 0, !dbg !2193
  %70 = load float, float* %arrayidx75, align 4, !dbg !2193
  %71 = load [3 x float]*, [3 x float]** %vnor, align 8, !dbg !2195
  %72 = load i32, i32* %v, align 4, !dbg !2196
  %idxprom76 = sext i32 %72 to i64, !dbg !2195
  %arrayidx77 = getelementptr inbounds [3 x float], [3 x float]* %71, i64 %idxprom76, !dbg !2195
  %arrayidx78 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx77, i64 0, i64 0, !dbg !2195
  %73 = load float, float* %arrayidx78, align 4, !dbg !2197
  %add = fadd float %73, %70, !dbg !2197
  store float %add, float* %arrayidx78, align 4, !dbg !2197
  %arrayidx79 = getelementptr inbounds [3 x float], [3 x float]* %fn, i64 0, i64 1, !dbg !2198
  %74 = load float, float* %arrayidx79, align 4, !dbg !2198
  %75 = load [3 x float]*, [3 x float]** %vnor, align 8, !dbg !2199
  %76 = load i32, i32* %v, align 4, !dbg !2200
  %idxprom80 = sext i32 %76 to i64, !dbg !2199
  %arrayidx81 = getelementptr inbounds [3 x float], [3 x float]* %75, i64 %idxprom80, !dbg !2199
  %arrayidx82 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx81, i64 0, i64 1, !dbg !2199
  %77 = load float, float* %arrayidx82, align 4, !dbg !2201
  %add83 = fadd float %77, %74, !dbg !2201
  store float %add83, float* %arrayidx82, align 4, !dbg !2201
  %arrayidx84 = getelementptr inbounds [3 x float], [3 x float]* %fn, i64 0, i64 2, !dbg !2202
  %78 = load float, float* %arrayidx84, align 4, !dbg !2202
  %79 = load [3 x float]*, [3 x float]** %vnor, align 8, !dbg !2203
  %80 = load i32, i32* %v, align 4, !dbg !2204
  %idxprom85 = sext i32 %80 to i64, !dbg !2203
  %arrayidx86 = getelementptr inbounds [3 x float], [3 x float]* %79, i64 %idxprom85, !dbg !2203
  %arrayidx87 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx86, i64 0, i64 2, !dbg !2203
  %81 = load float, float* %arrayidx87, align 4, !dbg !2205
  %add88 = fadd float %81, %78, !dbg !2205
  store float %add88, float* %arrayidx87, align 4, !dbg !2205
  br label %if.end89, !dbg !2206

if.end89:                                         ; preds = %if.then74, %for.body64
  br label %for.inc, !dbg !2207

for.inc:                                          ; preds = %if.end89
  %82 = load i32, i32* %j, align 4, !dbg !2208
  %inc = add nsw i32 %82, 1, !dbg !2208
  store i32 %inc, i32* %j, align 4, !dbg !2208
  br label %for.cond61, !dbg !2209, !llvm.loop !2210

for.end:                                          ; preds = %for.cond61
  %83 = load [3 x float]*, [3 x float]** %face_nors.addr, align 8, !dbg !2212
  %tobool90 = icmp ne [3 x float]* %83, null, !dbg !2212
  br i1 %tobool90, label %if.then91, label %if.end98, !dbg !2214

if.then91:                                        ; preds = %for.end
  %84 = load [3 x float]*, [3 x float]** %face_nors.addr, align 8, !dbg !2215
  %85 = load i32*, i32** %faces, align 8, !dbg !2216
  %86 = load i32, i32* %i, align 4, !dbg !2217
  %idxprom92 = sext i32 %86 to i64, !dbg !2216
  %arrayidx93 = getelementptr inbounds i32, i32* %85, i64 %idxprom92, !dbg !2216
  %87 = load i32, i32* %arrayidx93, align 4, !dbg !2216
  %idxprom94 = sext i32 %87 to i64, !dbg !2215
  %arrayidx95 = getelementptr inbounds [3 x float], [3 x float]* %84, i64 %idxprom94, !dbg !2215
  %arraydecay96 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx95, i64 0, i64 0, !dbg !2215
  %arraydecay97 = getelementptr inbounds [3 x float], [3 x float]* %fn, i64 0, i64 0, !dbg !2218
  call void @copy_v3_v3(float* %arraydecay96, float* %arraydecay97), !dbg !2219
  br label %if.end98, !dbg !2219

if.end98:                                         ; preds = %if.then91, %for.end
  br label %for.inc99, !dbg !2220

for.inc99:                                        ; preds = %if.end98
  %88 = load i32, i32* %i, align 4, !dbg !2221
  %inc100 = add nsw i32 %88, 1, !dbg !2221
  store i32 %inc100, i32* %i, align 4, !dbg !2221
  br label %for.cond8, !dbg !2222, !llvm.loop !2223

for.end101:                                       ; preds = %for.cond8
  br label %if.end102, !dbg !2225

if.end102:                                        ; preds = %for.end101, %for.body
  br label %for.inc103, !dbg !2226

for.inc103:                                       ; preds = %if.end102
  %89 = load i32, i32* %n, align 4, !dbg !2227
  %inc104 = add nsw i32 %89, 1, !dbg !2227
  store i32 %inc104, i32* %n, align 4, !dbg !2227
  br label %for.cond, !dbg !2228, !llvm.loop !2229

for.end105:                                       ; preds = %for.cond
  store i32 0, i32* %n, align 4, !dbg !2231
  br label %for.cond106, !dbg !2233

for.cond106:                                      ; preds = %for.inc159, %for.end105
  %90 = load i32, i32* %n, align 4, !dbg !2234
  %91 = load i32, i32* %totnode.addr, align 4, !dbg !2236
  %cmp107 = icmp slt i32 %90, %91, !dbg !2237
  br i1 %cmp107, label %for.body109, label %for.end161, !dbg !2238

for.body109:                                      ; preds = %for.cond106
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node110, metadata !2239, metadata !DIExpression()), !dbg !2241
  %92 = load %struct.PBVHNode**, %struct.PBVHNode*** %nodes.addr, align 8, !dbg !2242
  %93 = load i32, i32* %n, align 4, !dbg !2243
  %idxprom111 = sext i32 %93 to i64, !dbg !2242
  %arrayidx112 = getelementptr inbounds %struct.PBVHNode*, %struct.PBVHNode** %92, i64 %idxprom111, !dbg !2242
  %94 = load %struct.PBVHNode*, %struct.PBVHNode** %arrayidx112, align 8, !dbg !2242
  store %struct.PBVHNode* %94, %struct.PBVHNode** %node110, align 8, !dbg !2241
  %95 = load %struct.PBVHNode*, %struct.PBVHNode** %node110, align 8, !dbg !2244
  %flag113 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %95, i32 0, i32 10, !dbg !2246
  %bf.load114 = load i16, i16* %flag113, align 8, !dbg !2246
  %bf.cast115 = zext i16 %bf.load114 to i32, !dbg !2246
  %and116 = and i32 %bf.cast115, 2, !dbg !2247
  %tobool117 = icmp ne i32 %and116, 0, !dbg !2247
  br i1 %tobool117, label %if.then118, label %if.end158, !dbg !2248

if.then118:                                       ; preds = %for.body109
  call void @llvm.dbg.declare(metadata i32* %i119, metadata !2249, metadata !DIExpression()), !dbg !2251
  call void @llvm.dbg.declare(metadata i32** %verts120, metadata !2252, metadata !DIExpression()), !dbg !2253
  call void @llvm.dbg.declare(metadata i32* %totvert121, metadata !2254, metadata !DIExpression()), !dbg !2255
  %96 = load %struct.PBVHNode*, %struct.PBVHNode** %node110, align 8, !dbg !2256
  %vert_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %96, i32 0, i32 6, !dbg !2257
  %97 = load i32*, i32** %vert_indices, align 8, !dbg !2257
  store i32* %97, i32** %verts120, align 8, !dbg !2258
  %98 = load %struct.PBVHNode*, %struct.PBVHNode** %node110, align 8, !dbg !2259
  %uniq_verts = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %98, i32 0, i32 7, !dbg !2260
  %99 = load i32, i32* %uniq_verts, align 8, !dbg !2260
  store i32 %99, i32* %totvert121, align 4, !dbg !2261
  store i32 0, i32* %i119, align 4, !dbg !2262
  br label %for.cond122, !dbg !2264

for.cond122:                                      ; preds = %for.inc151, %if.then118
  %100 = load i32, i32* %i119, align 4, !dbg !2265
  %101 = load i32, i32* %totvert121, align 4, !dbg !2267
  %cmp123 = icmp slt i32 %100, %101, !dbg !2268
  br i1 %cmp123, label %for.body125, label %for.end153, !dbg !2269

for.body125:                                      ; preds = %for.cond122
  call void @llvm.dbg.declare(metadata i32* %v126, metadata !2270, metadata !DIExpression()), !dbg !2272
  %102 = load i32*, i32** %verts120, align 8, !dbg !2273
  %103 = load i32, i32* %i119, align 4, !dbg !2274
  %idxprom127 = sext i32 %103 to i64, !dbg !2273
  %arrayidx128 = getelementptr inbounds i32, i32* %102, i64 %idxprom127, !dbg !2273
  %104 = load i32, i32* %arrayidx128, align 4, !dbg !2273
  store i32 %104, i32* %v126, align 4, !dbg !2272
  call void @llvm.dbg.declare(metadata %struct.MVert** %mvert, metadata !2275, metadata !DIExpression()), !dbg !2276
  %105 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2277
  %verts129 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %105, i32 0, i32 9, !dbg !2278
  %106 = load %struct.MVert*, %struct.MVert** %verts129, align 8, !dbg !2278
  %107 = load i32, i32* %v126, align 4, !dbg !2279
  %idxprom130 = sext i32 %107 to i64, !dbg !2277
  %arrayidx131 = getelementptr inbounds %struct.MVert, %struct.MVert* %106, i64 %idxprom130, !dbg !2277
  store %struct.MVert* %arrayidx131, %struct.MVert** %mvert, align 8, !dbg !2276
  %108 = load %struct.MVert*, %struct.MVert** %mvert, align 8, !dbg !2280
  %flag132 = getelementptr inbounds %struct.MVert, %struct.MVert* %108, i32 0, i32 2, !dbg !2282
  %109 = load i8, i8* %flag132, align 2, !dbg !2282
  %conv133 = zext i8 %109 to i32, !dbg !2280
  %and134 = and i32 %conv133, 128, !dbg !2283
  %tobool135 = icmp ne i32 %and134, 0, !dbg !2283
  br i1 %tobool135, label %if.then136, label %if.end150, !dbg !2284

if.then136:                                       ; preds = %for.body125
  call void @llvm.dbg.declare(metadata [3 x float]* %no, metadata !2285, metadata !DIExpression()), !dbg !2287
  %arraydecay137 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !2288
  %110 = load [3 x float]*, [3 x float]** %vnor, align 8, !dbg !2289
  %111 = load i32, i32* %v126, align 4, !dbg !2290
  %idxprom138 = sext i32 %111 to i64, !dbg !2289
  %arrayidx139 = getelementptr inbounds [3 x float], [3 x float]* %110, i64 %idxprom138, !dbg !2289
  %arraydecay140 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx139, i64 0, i64 0, !dbg !2289
  call void @copy_v3_v3(float* %arraydecay137, float* %arraydecay140), !dbg !2291
  %arraydecay141 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !2292
  %call142 = call float @normalize_v3(float* %arraydecay141), !dbg !2293
  %112 = load %struct.MVert*, %struct.MVert** %mvert, align 8, !dbg !2294
  %no143 = getelementptr inbounds %struct.MVert, %struct.MVert* %112, i32 0, i32 1, !dbg !2295
  %arraydecay144 = getelementptr inbounds [3 x i16], [3 x i16]* %no143, i64 0, i64 0, !dbg !2294
  %arraydecay145 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !2296
  call void @normal_float_to_short_v3(i16* %arraydecay144, float* %arraydecay145), !dbg !2297
  %113 = load %struct.MVert*, %struct.MVert** %mvert, align 8, !dbg !2298
  %flag146 = getelementptr inbounds %struct.MVert, %struct.MVert* %113, i32 0, i32 2, !dbg !2299
  %114 = load i8, i8* %flag146, align 2, !dbg !2300
  %conv147 = zext i8 %114 to i32, !dbg !2300
  %and148 = and i32 %conv147, -129, !dbg !2300
  %conv149 = trunc i32 %and148 to i8, !dbg !2300
  store i8 %conv149, i8* %flag146, align 2, !dbg !2300
  br label %if.end150, !dbg !2301

if.end150:                                        ; preds = %if.then136, %for.body125
  br label %for.inc151, !dbg !2302

for.inc151:                                       ; preds = %if.end150
  %115 = load i32, i32* %i119, align 4, !dbg !2303
  %inc152 = add nsw i32 %115, 1, !dbg !2303
  store i32 %inc152, i32* %i119, align 4, !dbg !2303
  br label %for.cond122, !dbg !2304, !llvm.loop !2305

for.end153:                                       ; preds = %for.cond122
  %116 = load %struct.PBVHNode*, %struct.PBVHNode** %node110, align 8, !dbg !2307
  %flag154 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %116, i32 0, i32 10, !dbg !2308
  %bf.load155 = load i16, i16* %flag154, align 8, !dbg !2309
  %bf.cast156 = zext i16 %bf.load155 to i32, !dbg !2309
  %and157 = and i32 %bf.cast156, -3, !dbg !2309
  %117 = trunc i32 %and157 to i16, !dbg !2309
  store i16 %117, i16* %flag154, align 8, !dbg !2309
  %bf.result.cast = zext i16 %117 to i32, !dbg !2309
  br label %if.end158, !dbg !2310

if.end158:                                        ; preds = %for.end153, %for.body109
  br label %for.inc159, !dbg !2311

for.inc159:                                       ; preds = %if.end158
  %118 = load i32, i32* %n, align 4, !dbg !2312
  %inc160 = add nsw i32 %118, 1, !dbg !2312
  store i32 %inc160, i32* %n, align 4, !dbg !2312
  br label %for.cond106, !dbg !2313, !llvm.loop !2314

for.end161:                                       ; preds = %for.cond106
  %119 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !2316
  %120 = load [3 x float]*, [3 x float]** %vnor, align 8, !dbg !2317
  %121 = bitcast [3 x float]* %120 to i8*, !dbg !2317
  call void %119(i8* %121), !dbg !2316
  br label %return, !dbg !2318

return:                                           ; preds = %for.end161, %if.then3, %if.then
  ret void, !dbg !2318
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @pbvh_flush_bb(%struct.PBVH* %bvh, %struct.PBVHNode* %node, i32 %flag) #0 !dbg !2319 {
entry:
  %retval = alloca i32, align 4
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  %flag.addr = alloca i32, align 4
  %update = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !2322, metadata !DIExpression()), !dbg !2323
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !2324, metadata !DIExpression()), !dbg !2325
  store i32 %flag, i32* %flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flag.addr, metadata !2326, metadata !DIExpression()), !dbg !2327
  call void @llvm.dbg.declare(metadata i32* %update, metadata !2328, metadata !DIExpression()), !dbg !2329
  store i32 0, i32* %update, align 4, !dbg !2329
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2330
  %flag1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 10, !dbg !2332
  %bf.load = load i16, i16* %flag1, align 8, !dbg !2332
  %bf.cast = zext i16 %bf.load to i32, !dbg !2332
  %and = and i32 %bf.cast, 1, !dbg !2333
  %tobool = icmp ne i32 %and, 0, !dbg !2333
  br i1 %tobool, label %if.then, label %if.else, !dbg !2334

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %flag.addr, align 4, !dbg !2335
  %and2 = and i32 %1, 4, !dbg !2338
  %tobool3 = icmp ne i32 %and2, 0, !dbg !2338
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !2339

if.then4:                                         ; preds = %if.then
  %2 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2340
  %flag5 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %2, i32 0, i32 10, !dbg !2342
  %bf.load6 = load i16, i16* %flag5, align 8, !dbg !2342
  %bf.cast7 = zext i16 %bf.load6 to i32, !dbg !2342
  %and8 = and i32 %bf.cast7, 4, !dbg !2343
  %3 = load i32, i32* %update, align 4, !dbg !2344
  %or = or i32 %3, %and8, !dbg !2344
  store i32 %or, i32* %update, align 4, !dbg !2344
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2345
  %flag9 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %4, i32 0, i32 10, !dbg !2346
  %bf.load10 = load i16, i16* %flag9, align 8, !dbg !2347
  %bf.cast11 = zext i16 %bf.load10 to i32, !dbg !2347
  %and12 = and i32 %bf.cast11, -5, !dbg !2347
  %5 = trunc i32 %and12 to i16, !dbg !2347
  store i16 %5, i16* %flag9, align 8, !dbg !2347
  %bf.result.cast = zext i16 %5 to i32, !dbg !2347
  br label %if.end, !dbg !2348

if.end:                                           ; preds = %if.then4, %if.then
  %6 = load i32, i32* %flag.addr, align 4, !dbg !2349
  %and13 = and i32 %6, 8, !dbg !2351
  %tobool14 = icmp ne i32 %and13, 0, !dbg !2351
  br i1 %tobool14, label %if.then15, label %if.end26, !dbg !2352

if.then15:                                        ; preds = %if.end
  %7 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2353
  %flag16 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %7, i32 0, i32 10, !dbg !2355
  %bf.load17 = load i16, i16* %flag16, align 8, !dbg !2355
  %bf.cast18 = zext i16 %bf.load17 to i32, !dbg !2355
  %and19 = and i32 %bf.cast18, 8, !dbg !2356
  %8 = load i32, i32* %update, align 4, !dbg !2357
  %or20 = or i32 %8, %and19, !dbg !2357
  store i32 %or20, i32* %update, align 4, !dbg !2357
  %9 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2358
  %flag21 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %9, i32 0, i32 10, !dbg !2359
  %bf.load22 = load i16, i16* %flag21, align 8, !dbg !2360
  %bf.cast23 = zext i16 %bf.load22 to i32, !dbg !2360
  %and24 = and i32 %bf.cast23, -9, !dbg !2360
  %10 = trunc i32 %and24 to i16, !dbg !2360
  store i16 %10, i16* %flag21, align 8, !dbg !2360
  %bf.result.cast25 = zext i16 %10 to i32, !dbg !2360
  br label %if.end26, !dbg !2361

if.end26:                                         ; preds = %if.then15, %if.end
  %11 = load i32, i32* %update, align 4, !dbg !2362
  store i32 %11, i32* %retval, align 4, !dbg !2363
  br label %return, !dbg !2363

if.else:                                          ; preds = %entry
  %12 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2364
  %13 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2366
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %13, i32 0, i32 2, !dbg !2367
  %14 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !2367
  %15 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2368
  %children_offset = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %15, i32 0, i32 3, !dbg !2369
  %16 = load i32, i32* %children_offset, align 8, !dbg !2369
  %idx.ext = sext i32 %16 to i64, !dbg !2370
  %add.ptr = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %14, i64 %idx.ext, !dbg !2370
  %17 = load i32, i32* %flag.addr, align 4, !dbg !2371
  %call = call i32 @pbvh_flush_bb(%struct.PBVH* %12, %struct.PBVHNode* %add.ptr, i32 %17), !dbg !2372
  %18 = load i32, i32* %update, align 4, !dbg !2373
  %or27 = or i32 %18, %call, !dbg !2373
  store i32 %or27, i32* %update, align 4, !dbg !2373
  %19 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2374
  %20 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2375
  %nodes28 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %20, i32 0, i32 2, !dbg !2376
  %21 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes28, align 8, !dbg !2376
  %22 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2377
  %children_offset29 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %22, i32 0, i32 3, !dbg !2378
  %23 = load i32, i32* %children_offset29, align 8, !dbg !2378
  %idx.ext30 = sext i32 %23 to i64, !dbg !2379
  %add.ptr31 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %21, i64 %idx.ext30, !dbg !2379
  %add.ptr32 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %add.ptr31, i64 1, !dbg !2380
  %24 = load i32, i32* %flag.addr, align 4, !dbg !2381
  %call33 = call i32 @pbvh_flush_bb(%struct.PBVH* %19, %struct.PBVHNode* %add.ptr32, i32 %24), !dbg !2382
  %25 = load i32, i32* %update, align 4, !dbg !2383
  %or34 = or i32 %25, %call33, !dbg !2383
  store i32 %or34, i32* %update, align 4, !dbg !2383
  %26 = load i32, i32* %update, align 4, !dbg !2384
  %and35 = and i32 %26, 4, !dbg !2386
  %tobool36 = icmp ne i32 %and35, 0, !dbg !2386
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !2387

if.then37:                                        ; preds = %if.else
  %27 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2388
  %28 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2389
  call void @update_node_vb(%struct.PBVH* %27, %struct.PBVHNode* %28), !dbg !2390
  br label %if.end38, !dbg !2390

if.end38:                                         ; preds = %if.then37, %if.else
  %29 = load i32, i32* %update, align 4, !dbg !2391
  %and39 = and i32 %29, 8, !dbg !2393
  %tobool40 = icmp ne i32 %and39, 0, !dbg !2393
  br i1 %tobool40, label %if.then41, label %if.end42, !dbg !2394

if.then41:                                        ; preds = %if.end38
  %30 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2395
  %orig_vb = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %30, i32 0, i32 2, !dbg !2396
  %31 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2397
  %vb = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %31, i32 0, i32 1, !dbg !2398
  %32 = bitcast %struct.BB* %orig_vb to i8*, !dbg !2398
  %33 = bitcast %struct.BB* %vb to i8*, !dbg !2398
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 24, i1 false), !dbg !2398
  br label %if.end42, !dbg !2395

if.end42:                                         ; preds = %if.then41, %if.end38
  br label %if.end43

if.end43:                                         ; preds = %if.end42
  %34 = load i32, i32* %update, align 4, !dbg !2399
  store i32 %34, i32* %retval, align 4, !dbg !2400
  br label %return, !dbg !2400

return:                                           ; preds = %if.end43, %if.end26
  %35 = load i32, i32* %retval, align 4, !dbg !2401
  ret i32 %35, !dbg !2401
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_redraw_BB(%struct.PBVH* %bvh, float* %bb_min, float* %bb_max) #0 !dbg !2402 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %bb_min.addr = alloca float*, align 8
  %bb_max.addr = alloca float*, align 8
  %iter = alloca %struct.PBVHIter, align 8
  %node = alloca %struct.PBVHNode*, align 8
  %bb = alloca %struct.BB, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !2405, metadata !DIExpression()), !dbg !2406
  store float* %bb_min, float** %bb_min.addr, align 8
  call void @llvm.dbg.declare(metadata float** %bb_min.addr, metadata !2407, metadata !DIExpression()), !dbg !2408
  store float* %bb_max, float** %bb_max.addr, align 8
  call void @llvm.dbg.declare(metadata float** %bb_max.addr, metadata !2409, metadata !DIExpression()), !dbg !2410
  call void @llvm.dbg.declare(metadata %struct.PBVHIter* %iter, metadata !2411, metadata !DIExpression()), !dbg !2412
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node, metadata !2413, metadata !DIExpression()), !dbg !2414
  call void @llvm.dbg.declare(metadata %struct.BB* %bb, metadata !2415, metadata !DIExpression()), !dbg !2416
  call void @BB_reset(%struct.BB* %bb), !dbg !2417
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2418
  call void @pbvh_iter_begin(%struct.PBVHIter* %iter, %struct.PBVH* %0, i8 (%struct.PBVHNode*, i8*)* null, i8* null), !dbg !2419
  br label %while.cond, !dbg !2420

while.cond:                                       ; preds = %if.end, %entry
  %call = call %struct.PBVHNode* @pbvh_iter_next(%struct.PBVHIter* %iter), !dbg !2421
  store %struct.PBVHNode* %call, %struct.PBVHNode** %node, align 8, !dbg !2422
  %tobool = icmp ne %struct.PBVHNode* %call, null, !dbg !2420
  br i1 %tobool, label %while.body, label %while.end, !dbg !2420

while.body:                                       ; preds = %while.cond
  %1 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !2423
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %1, i32 0, i32 10, !dbg !2425
  %bf.load = load i16, i16* %flag, align 8, !dbg !2425
  %bf.cast = zext i16 %bf.load to i32, !dbg !2425
  %and = and i32 %bf.cast, 32, !dbg !2426
  %tobool1 = icmp ne i32 %and, 0, !dbg !2426
  br i1 %tobool1, label %if.then, label %if.end, !dbg !2427

if.then:                                          ; preds = %while.body
  %2 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !2428
  %vb = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %2, i32 0, i32 1, !dbg !2429
  call void @BB_expand_with_bb(%struct.BB* %bb, %struct.BB* %vb), !dbg !2430
  br label %if.end, !dbg !2430

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond, !dbg !2420, !llvm.loop !2431

while.end:                                        ; preds = %while.cond
  call void @pbvh_iter_end(%struct.PBVHIter* %iter), !dbg !2433
  %3 = load float*, float** %bb_min.addr, align 8, !dbg !2434
  %bmin = getelementptr inbounds %struct.BB, %struct.BB* %bb, i32 0, i32 0, !dbg !2435
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %bmin, i64 0, i64 0, !dbg !2436
  call void @copy_v3_v3(float* %3, float* %arraydecay), !dbg !2437
  %4 = load float*, float** %bb_max.addr, align 8, !dbg !2438
  %bmax = getelementptr inbounds %struct.BB, %struct.BB* %bb, i32 0, i32 1, !dbg !2439
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %bmax, i64 0, i64 0, !dbg !2440
  call void @copy_v3_v3(float* %4, float* %arraydecay2), !dbg !2441
  ret void, !dbg !2442
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_v3_v3(float* %r, float* %a) #0 !dbg !2443 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !2447, metadata !DIExpression()), !dbg !2448
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !2449, metadata !DIExpression()), !dbg !2450
  %0 = load float*, float** %a.addr, align 8, !dbg !2451
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !2451
  %1 = load float, float* %arrayidx, align 4, !dbg !2451
  %2 = load float*, float** %r.addr, align 8, !dbg !2452
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !2452
  store float %1, float* %arrayidx1, align 4, !dbg !2453
  %3 = load float*, float** %a.addr, align 8, !dbg !2454
  %arrayidx2 = getelementptr inbounds float, float* %3, i64 1, !dbg !2454
  %4 = load float, float* %arrayidx2, align 4, !dbg !2454
  %5 = load float*, float** %r.addr, align 8, !dbg !2455
  %arrayidx3 = getelementptr inbounds float, float* %5, i64 1, !dbg !2455
  store float %4, float* %arrayidx3, align 4, !dbg !2456
  %6 = load float*, float** %a.addr, align 8, !dbg !2457
  %arrayidx4 = getelementptr inbounds float, float* %6, i64 2, !dbg !2457
  %7 = load float, float* %arrayidx4, align 4, !dbg !2457
  %8 = load float*, float** %r.addr, align 8, !dbg !2458
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !2458
  store float %7, float* %arrayidx5, align 4, !dbg !2459
  ret void, !dbg !2460
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_get_grid_updates(%struct.PBVH* %bvh, i32 %clear, i8*** %r_gridfaces, i32* %r_totface) #0 !dbg !2461 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %clear.addr = alloca i32, align 4
  %r_gridfaces.addr = alloca i8***, align 8
  %r_totface.addr = alloca i32*, align 8
  %iter = alloca %struct.PBVHIter, align 8
  %node = alloca %struct.PBVHNode*, align 8
  %gs_iter = alloca %struct.GSetIterator, align 8
  %face_set = alloca %struct.GSet*, align 8
  %face = alloca i8*, align 8
  %faces = alloca i8**, align 8
  %i = alloca i32, align 4
  %tot = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !2465, metadata !DIExpression()), !dbg !2466
  store i32 %clear, i32* %clear.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %clear.addr, metadata !2467, metadata !DIExpression()), !dbg !2468
  store i8*** %r_gridfaces, i8**** %r_gridfaces.addr, align 8
  call void @llvm.dbg.declare(metadata i8**** %r_gridfaces.addr, metadata !2469, metadata !DIExpression()), !dbg !2470
  store i32* %r_totface, i32** %r_totface.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %r_totface.addr, metadata !2471, metadata !DIExpression()), !dbg !2472
  call void @llvm.dbg.declare(metadata %struct.PBVHIter* %iter, metadata !2473, metadata !DIExpression()), !dbg !2474
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node, metadata !2475, metadata !DIExpression()), !dbg !2476
  call void @llvm.dbg.declare(metadata %struct.GSetIterator* %gs_iter, metadata !2477, metadata !DIExpression()), !dbg !2479
  call void @llvm.dbg.declare(metadata %struct.GSet** %face_set, metadata !2480, metadata !DIExpression()), !dbg !2481
  call void @llvm.dbg.declare(metadata i8** %face, metadata !2482, metadata !DIExpression()), !dbg !2483
  call void @llvm.dbg.declare(metadata i8*** %faces, metadata !2484, metadata !DIExpression()), !dbg !2485
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2486, metadata !DIExpression()), !dbg !2487
  call void @llvm.dbg.declare(metadata i32* %tot, metadata !2488, metadata !DIExpression()), !dbg !2489
  %call = call %struct.GSet* @BLI_gset_ptr_new(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.BKE_pbvh_get_grid_updates, i64 0, i64 0)), !dbg !2490
  store %struct.GSet* %call, %struct.GSet** %face_set, align 8, !dbg !2491
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2492
  call void @pbvh_iter_begin(%struct.PBVHIter* %iter, %struct.PBVH* %0, i8 (%struct.PBVHNode*, i8*)* null, i8* null), !dbg !2493
  br label %while.cond, !dbg !2494

while.cond:                                       ; preds = %if.end15, %entry
  %call1 = call %struct.PBVHNode* @pbvh_iter_next(%struct.PBVHIter* %iter), !dbg !2495
  store %struct.PBVHNode* %call1, %struct.PBVHNode** %node, align 8, !dbg !2496
  %tobool = icmp ne %struct.PBVHNode* %call1, null, !dbg !2494
  br i1 %tobool, label %while.body, label %while.end, !dbg !2494

while.body:                                       ; preds = %while.cond
  %1 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !2497
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %1, i32 0, i32 10, !dbg !2500
  %bf.load = load i16, i16* %flag, align 8, !dbg !2500
  %bf.cast = zext i16 %bf.load to i32, !dbg !2500
  %and = and i32 %bf.cast, 2, !dbg !2501
  %tobool2 = icmp ne i32 %and, 0, !dbg !2501
  br i1 %tobool2, label %if.then, label %if.end15, !dbg !2502

if.then:                                          ; preds = %while.body
  store i32 0, i32* %i, align 4, !dbg !2503
  br label %for.cond, !dbg !2506

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4, !dbg !2507
  %3 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !2509
  %totprim = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %3, i32 0, i32 5, !dbg !2510
  %4 = load i32, i32* %totprim, align 8, !dbg !2510
  %cmp = icmp ult i32 %2, %4, !dbg !2511
  br i1 %cmp, label %for.body, label %for.end, !dbg !2512

for.body:                                         ; preds = %for.cond
  %5 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2513
  %gridfaces = getelementptr inbounds %struct.PBVH, %struct.PBVH* %5, i32 0, i32 15, !dbg !2515
  %6 = load i8**, i8*** %gridfaces, align 8, !dbg !2515
  %7 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !2516
  %prim_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %7, i32 0, i32 4, !dbg !2517
  %8 = load i32*, i32** %prim_indices, align 8, !dbg !2517
  %9 = load i32, i32* %i, align 4, !dbg !2518
  %idxprom = zext i32 %9 to i64, !dbg !2516
  %arrayidx = getelementptr inbounds i32, i32* %8, i64 %idxprom, !dbg !2516
  %10 = load i32, i32* %arrayidx, align 4, !dbg !2516
  %idxprom3 = sext i32 %10 to i64, !dbg !2513
  %arrayidx4 = getelementptr inbounds i8*, i8** %6, i64 %idxprom3, !dbg !2513
  %11 = load i8*, i8** %arrayidx4, align 8, !dbg !2513
  store i8* %11, i8** %face, align 8, !dbg !2519
  %12 = load %struct.GSet*, %struct.GSet** %face_set, align 8, !dbg !2520
  %13 = load i8*, i8** %face, align 8, !dbg !2522
  %call5 = call zeroext i8 @BLI_gset_haskey(%struct.GSet* %12, i8* %13), !dbg !2523
  %tobool6 = icmp ne i8 %call5, 0, !dbg !2523
  br i1 %tobool6, label %if.end, label %if.then7, !dbg !2524

if.then7:                                         ; preds = %for.body
  %14 = load %struct.GSet*, %struct.GSet** %face_set, align 8, !dbg !2525
  %15 = load i8*, i8** %face, align 8, !dbg !2526
  call void @BLI_gset_insert(%struct.GSet* %14, i8* %15), !dbg !2527
  br label %if.end, !dbg !2527

if.end:                                           ; preds = %if.then7, %for.body
  br label %for.inc, !dbg !2528

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %i, align 4, !dbg !2529
  %inc = add i32 %16, 1, !dbg !2529
  store i32 %inc, i32* %i, align 4, !dbg !2529
  br label %for.cond, !dbg !2530, !llvm.loop !2531

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %clear.addr, align 4, !dbg !2533
  %tobool8 = icmp ne i32 %17, 0, !dbg !2533
  br i1 %tobool8, label %if.then9, label %if.end14, !dbg !2535

if.then9:                                         ; preds = %for.end
  %18 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !2536
  %flag10 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %18, i32 0, i32 10, !dbg !2537
  %bf.load11 = load i16, i16* %flag10, align 8, !dbg !2538
  %bf.cast12 = zext i16 %bf.load11 to i32, !dbg !2538
  %and13 = and i32 %bf.cast12, -3, !dbg !2538
  %19 = trunc i32 %and13 to i16, !dbg !2538
  store i16 %19, i16* %flag10, align 8, !dbg !2538
  %bf.result.cast = zext i16 %19 to i32, !dbg !2538
  br label %if.end14, !dbg !2536

if.end14:                                         ; preds = %if.then9, %for.end
  br label %if.end15, !dbg !2539

if.end15:                                         ; preds = %if.end14, %while.body
  br label %while.cond, !dbg !2494, !llvm.loop !2540

while.end:                                        ; preds = %while.cond
  call void @pbvh_iter_end(%struct.PBVHIter* %iter), !dbg !2542
  %20 = load %struct.GSet*, %struct.GSet** %face_set, align 8, !dbg !2543
  %call16 = call i32 @BLI_gset_size(%struct.GSet* %20), !dbg !2544
  store i32 %call16, i32* %tot, align 4, !dbg !2545
  %21 = load i32, i32* %tot, align 4, !dbg !2546
  %cmp17 = icmp eq i32 %21, 0, !dbg !2548
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !2549

if.then18:                                        ; preds = %while.end
  %22 = load i32*, i32** %r_totface.addr, align 8, !dbg !2550
  store i32 0, i32* %22, align 4, !dbg !2552
  %23 = load i8***, i8**** %r_gridfaces.addr, align 8, !dbg !2553
  store i8** null, i8*** %23, align 8, !dbg !2554
  %24 = load %struct.GSet*, %struct.GSet** %face_set, align 8, !dbg !2555
  call void @BLI_gset_free(%struct.GSet* %24, void (i8*)* null), !dbg !2556
  br label %return, !dbg !2557

if.end19:                                         ; preds = %while.end
  %25 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !2558
  %26 = load i32, i32* %tot, align 4, !dbg !2559
  %conv = sext i32 %26 to i64, !dbg !2559
  %mul = mul i64 8, %conv, !dbg !2560
  %call20 = call i8* %25(i64 %mul, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0)), !dbg !2558
  %27 = bitcast i8* %call20 to i8**, !dbg !2558
  store i8** %27, i8*** %faces, align 8, !dbg !2561
  %28 = load %struct.GSet*, %struct.GSet** %face_set, align 8, !dbg !2562
  call void @BLI_gsetIterator_init(%struct.GSetIterator* %gs_iter, %struct.GSet* %28), !dbg !2562
  store i32 0, i32* %i, align 4, !dbg !2562
  br label %for.cond21, !dbg !2562

for.cond21:                                       ; preds = %for.inc30, %if.end19
  %call22 = call zeroext i8 @BLI_gsetIterator_done(%struct.GSetIterator* %gs_iter), !dbg !2564
  %conv23 = zext i8 %call22 to i32, !dbg !2564
  %cmp24 = icmp eq i32 %conv23, 0, !dbg !2564
  br i1 %cmp24, label %for.body26, label %for.end32, !dbg !2562

for.body26:                                       ; preds = %for.cond21
  %call27 = call i8* @BLI_gsetIterator_getKey(%struct.GSetIterator* %gs_iter), !dbg !2566
  %29 = load i8**, i8*** %faces, align 8, !dbg !2568
  %30 = load i32, i32* %i, align 4, !dbg !2569
  %idxprom28 = zext i32 %30 to i64, !dbg !2568
  %arrayidx29 = getelementptr inbounds i8*, i8** %29, i64 %idxprom28, !dbg !2568
  store i8* %call27, i8** %arrayidx29, align 8, !dbg !2570
  br label %for.inc30, !dbg !2571

for.inc30:                                        ; preds = %for.body26
  call void @BLI_gsetIterator_step(%struct.GSetIterator* %gs_iter), !dbg !2564
  %31 = load i32, i32* %i, align 4, !dbg !2564
  %inc31 = add i32 %31, 1, !dbg !2564
  store i32 %inc31, i32* %i, align 4, !dbg !2564
  br label %for.cond21, !dbg !2564, !llvm.loop !2572

for.end32:                                        ; preds = %for.cond21
  %32 = load %struct.GSet*, %struct.GSet** %face_set, align 8, !dbg !2574
  call void @BLI_gset_free(%struct.GSet* %32, void (i8*)* null), !dbg !2575
  %33 = load i32, i32* %tot, align 4, !dbg !2576
  %34 = load i32*, i32** %r_totface.addr, align 8, !dbg !2577
  store i32 %33, i32* %34, align 4, !dbg !2578
  %35 = load i8**, i8*** %faces, align 8, !dbg !2579
  %36 = load i8***, i8**** %r_gridfaces.addr, align 8, !dbg !2580
  store i8** %35, i8*** %36, align 8, !dbg !2581
  br label %return, !dbg !2582

return:                                           ; preds = %for.end32, %if.then18
  ret void, !dbg !2582
}

declare dso_local %struct.GSet* @BLI_gset_ptr_new(i8*) #3

declare dso_local zeroext i8 @BLI_gset_haskey(%struct.GSet*, i8*) #3

declare dso_local void @BLI_gset_insert(%struct.GSet*, i8*) #3

declare dso_local i32 @BLI_gset_size(%struct.GSet*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @BLI_gsetIterator_init(%struct.GSetIterator* %gsi, %struct.GSet* %gs) #0 !dbg !2583 {
entry:
  %gsi.addr = alloca %struct.GSetIterator*, align 8
  %gs.addr = alloca %struct.GSet*, align 8
  store %struct.GSetIterator* %gsi, %struct.GSetIterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GSetIterator** %gsi.addr, metadata !2587, metadata !DIExpression()), !dbg !2588
  store %struct.GSet* %gs, %struct.GSet** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GSet** %gs.addr, metadata !2589, metadata !DIExpression()), !dbg !2590
  %0 = load %struct.GSetIterator*, %struct.GSetIterator** %gsi.addr, align 8, !dbg !2591
  %1 = bitcast %struct.GSetIterator* %0 to %struct.GHashIterator*, !dbg !2592
  %2 = load %struct.GSet*, %struct.GSet** %gs.addr, align 8, !dbg !2593
  %3 = bitcast %struct.GSet* %2 to %struct.GHash*, !dbg !2594
  call void @BLI_ghashIterator_init(%struct.GHashIterator* %1, %struct.GHash* %3), !dbg !2595
  ret void, !dbg !2596
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @BLI_gsetIterator_done(%struct.GSetIterator* %gsi) #0 !dbg !2597 {
entry:
  %gsi.addr = alloca %struct.GSetIterator*, align 8
  store %struct.GSetIterator* %gsi, %struct.GSetIterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GSetIterator** %gsi.addr, metadata !2600, metadata !DIExpression()), !dbg !2601
  %0 = load %struct.GSetIterator*, %struct.GSetIterator** %gsi.addr, align 8, !dbg !2602
  %1 = bitcast %struct.GSetIterator* %0 to %struct.GHashIterator*, !dbg !2603
  %call = call zeroext i8 @BLI_ghashIterator_done(%struct.GHashIterator* %1), !dbg !2604
  ret i8 %call, !dbg !2605
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @BLI_gsetIterator_getKey(%struct.GSetIterator* %gsi) #0 !dbg !2606 {
entry:
  %gsi.addr = alloca %struct.GSetIterator*, align 8
  store %struct.GSetIterator* %gsi, %struct.GSetIterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GSetIterator** %gsi.addr, metadata !2609, metadata !DIExpression()), !dbg !2610
  %0 = load %struct.GSetIterator*, %struct.GSetIterator** %gsi.addr, align 8, !dbg !2611
  %1 = bitcast %struct.GSetIterator* %0 to %struct.GHashIterator*, !dbg !2612
  %call = call i8* @BLI_ghashIterator_getKey(%struct.GHashIterator* %1), !dbg !2613
  ret i8* %call, !dbg !2614
}

; Function Attrs: noinline nounwind uwtable
define internal void @BLI_gsetIterator_step(%struct.GSetIterator* %gsi) #0 !dbg !2615 {
entry:
  %gsi.addr = alloca %struct.GSetIterator*, align 8
  store %struct.GSetIterator* %gsi, %struct.GSetIterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GSetIterator** %gsi.addr, metadata !2618, metadata !DIExpression()), !dbg !2619
  %0 = load %struct.GSetIterator*, %struct.GSetIterator** %gsi.addr, align 8, !dbg !2620
  %1 = bitcast %struct.GSetIterator* %0 to %struct.GHashIterator*, !dbg !2621
  call void @BLI_ghashIterator_step(%struct.GHashIterator* %1), !dbg !2622
  ret void, !dbg !2623
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BKE_pbvh_type(%struct.PBVH* %bvh) #0 !dbg !2624 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !2629, metadata !DIExpression()), !dbg !2630
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2631
  %type = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 0, !dbg !2632
  %1 = load i32, i32* %type, align 8, !dbg !2632
  ret i32 %1, !dbg !2633
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_bounding_box(%struct.PBVH* %bvh, float* %min, float* %max) #0 !dbg !2634 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %min.addr = alloca float*, align 8
  %max.addr = alloca float*, align 8
  %bb = alloca %struct.BB*, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !2637, metadata !DIExpression()), !dbg !2638
  store float* %min, float** %min.addr, align 8
  call void @llvm.dbg.declare(metadata float** %min.addr, metadata !2639, metadata !DIExpression()), !dbg !2640
  store float* %max, float** %max.addr, align 8
  call void @llvm.dbg.declare(metadata float** %max.addr, metadata !2641, metadata !DIExpression()), !dbg !2642
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2643
  %totnode = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 4, !dbg !2645
  %1 = load i32, i32* %totnode, align 4, !dbg !2645
  %tobool = icmp ne i32 %1, 0, !dbg !2643
  br i1 %tobool, label %if.then, label %if.else, !dbg !2646

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.BB** %bb, metadata !2647, metadata !DIExpression()), !dbg !2649
  %2 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2650
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %2, i32 0, i32 2, !dbg !2651
  %3 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !2651
  %arrayidx = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %3, i64 0, !dbg !2650
  %vb = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %arrayidx, i32 0, i32 1, !dbg !2652
  store %struct.BB* %vb, %struct.BB** %bb, align 8, !dbg !2649
  %4 = load float*, float** %min.addr, align 8, !dbg !2653
  %5 = load %struct.BB*, %struct.BB** %bb, align 8, !dbg !2654
  %bmin = getelementptr inbounds %struct.BB, %struct.BB* %5, i32 0, i32 0, !dbg !2655
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %bmin, i64 0, i64 0, !dbg !2654
  call void @copy_v3_v3(float* %4, float* %arraydecay), !dbg !2656
  %6 = load float*, float** %max.addr, align 8, !dbg !2657
  %7 = load %struct.BB*, %struct.BB** %bb, align 8, !dbg !2658
  %bmax = getelementptr inbounds %struct.BB, %struct.BB* %7, i32 0, i32 1, !dbg !2659
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %bmax, i64 0, i64 0, !dbg !2658
  call void @copy_v3_v3(float* %6, float* %arraydecay1), !dbg !2660
  br label %if.end, !dbg !2661

if.else:                                          ; preds = %entry
  %8 = load float*, float** %min.addr, align 8, !dbg !2662
  call void @zero_v3(float* %8), !dbg !2664
  %9 = load float*, float** %max.addr, align 8, !dbg !2665
  call void @zero_v3(float* %9), !dbg !2666
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2667
}

; Function Attrs: noinline nounwind uwtable
define internal void @zero_v3(float* %r) #0 !dbg !2668 {
entry:
  %r.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !2671, metadata !DIExpression()), !dbg !2672
  %0 = load float*, float** %r.addr, align 8, !dbg !2673
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !2673
  store float 0.000000e+00, float* %arrayidx, align 4, !dbg !2674
  %1 = load float*, float** %r.addr, align 8, !dbg !2675
  %arrayidx1 = getelementptr inbounds float, float* %1, i64 1, !dbg !2675
  store float 0.000000e+00, float* %arrayidx1, align 4, !dbg !2676
  %2 = load float*, float** %r.addr, align 8, !dbg !2677
  %arrayidx2 = getelementptr inbounds float, float* %2, i64 2, !dbg !2677
  store float 0.000000e+00, float* %arrayidx2, align 4, !dbg !2678
  ret void, !dbg !2679
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32** @BKE_pbvh_grid_hidden(%struct.PBVH* %bvh) #0 !dbg !2680 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !2684, metadata !DIExpression()), !dbg !2685
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2686
  %grid_hidden = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 18, !dbg !2687
  %1 = load i32**, i32*** %grid_hidden, align 8, !dbg !2687
  ret i32** %1, !dbg !2688
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_get_grid_key(%struct.PBVH* %bvh, %struct.CCGKey* %key) #0 !dbg !2689 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %key.addr = alloca %struct.CCGKey*, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !2692, metadata !DIExpression()), !dbg !2693
  store %struct.CCGKey* %key, %struct.CCGKey** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGKey** %key.addr, metadata !2694, metadata !DIExpression()), !dbg !2695
  %0 = load %struct.CCGKey*, %struct.CCGKey** %key.addr, align 8, !dbg !2696
  %1 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2697
  %gridkey = getelementptr inbounds %struct.PBVH, %struct.PBVH* %1, i32 0, i32 12, !dbg !2698
  %2 = bitcast %struct.CCGKey* %0 to i8*, !dbg !2698
  %3 = bitcast %struct.CCGKey* %gridkey to i8*, !dbg !2698
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2, i8* align 8 %3, i64 40, i1 false), !dbg !2698
  ret void, !dbg !2699
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.BMesh* @BKE_pbvh_get_bmesh(%struct.PBVH* %bvh) #0 !dbg !2700 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !2704, metadata !DIExpression()), !dbg !2705
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2706
  %bm = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 22, !dbg !2707
  %1 = load %struct.BMesh*, %struct.BMesh** %bm, align 8, !dbg !2707
  ret %struct.BMesh* %1, !dbg !2708
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_node_mark_update(%struct.PBVHNode* %node) #0 !dbg !2709 {
entry:
  %node.addr = alloca %struct.PBVHNode*, align 8
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !2710, metadata !DIExpression()), !dbg !2711
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2712
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 10, !dbg !2713
  %bf.load = load i16, i16* %flag, align 8, !dbg !2714
  %bf.cast = zext i16 %bf.load to i32, !dbg !2714
  %or = or i32 %bf.cast, 62, !dbg !2714
  %1 = trunc i32 %or to i16, !dbg !2714
  store i16 %1, i16* %flag, align 8, !dbg !2714
  %bf.result.cast = zext i16 %1 to i32, !dbg !2714
  ret void, !dbg !2715
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_node_mark_rebuild_draw(%struct.PBVHNode* %node) #0 !dbg !2716 {
entry:
  %node.addr = alloca %struct.PBVHNode*, align 8
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !2717, metadata !DIExpression()), !dbg !2718
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2719
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 10, !dbg !2720
  %bf.load = load i16, i16* %flag, align 8, !dbg !2721
  %bf.cast = zext i16 %bf.load to i32, !dbg !2721
  %or = or i32 %bf.cast, 112, !dbg !2721
  %1 = trunc i32 %or to i16, !dbg !2721
  store i16 %1, i16* %flag, align 8, !dbg !2721
  %bf.result.cast = zext i16 %1 to i32, !dbg !2721
  ret void, !dbg !2722
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_node_mark_redraw(%struct.PBVHNode* %node) #0 !dbg !2723 {
entry:
  %node.addr = alloca %struct.PBVHNode*, align 8
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !2724, metadata !DIExpression()), !dbg !2725
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2726
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 10, !dbg !2727
  %bf.load = load i16, i16* %flag, align 8, !dbg !2728
  %bf.cast = zext i16 %bf.load to i32, !dbg !2728
  %or = or i32 %bf.cast, 48, !dbg !2728
  %1 = trunc i32 %or to i16, !dbg !2728
  store i16 %1, i16* %flag, align 8, !dbg !2728
  %bf.result.cast = zext i16 %1 to i32, !dbg !2728
  ret void, !dbg !2729
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_node_mark_normals_update(%struct.PBVHNode* %node) #0 !dbg !2730 {
entry:
  %node.addr = alloca %struct.PBVHNode*, align 8
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !2731, metadata !DIExpression()), !dbg !2732
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2733
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 10, !dbg !2734
  %bf.load = load i16, i16* %flag, align 8, !dbg !2735
  %bf.cast = zext i16 %bf.load to i32, !dbg !2735
  %or = or i32 %bf.cast, 2, !dbg !2735
  %1 = trunc i32 %or to i16, !dbg !2735
  store i16 %1, i16* %flag, align 8, !dbg !2735
  %bf.result.cast = zext i16 %1 to i32, !dbg !2735
  ret void, !dbg !2736
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_node_fully_hidden_set(%struct.PBVHNode* %node, i32 %fully_hidden) #0 !dbg !2737 {
entry:
  %node.addr = alloca %struct.PBVHNode*, align 8
  %fully_hidden.addr = alloca i32, align 4
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !2740, metadata !DIExpression()), !dbg !2741
  store i32 %fully_hidden, i32* %fully_hidden.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fully_hidden.addr, metadata !2742, metadata !DIExpression()), !dbg !2743
  %0 = load i32, i32* %fully_hidden.addr, align 4, !dbg !2744
  %tobool = icmp ne i32 %0, 0, !dbg !2744
  br i1 %tobool, label %if.then, label %if.else, !dbg !2746

if.then:                                          ; preds = %entry
  %1 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2747
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %1, i32 0, i32 10, !dbg !2748
  %bf.load = load i16, i16* %flag, align 8, !dbg !2749
  %bf.cast = zext i16 %bf.load to i32, !dbg !2749
  %or = or i32 %bf.cast, 128, !dbg !2749
  %2 = trunc i32 %or to i16, !dbg !2749
  store i16 %2, i16* %flag, align 8, !dbg !2749
  %bf.result.cast = zext i16 %2 to i32, !dbg !2749
  br label %if.end, !dbg !2747

if.else:                                          ; preds = %entry
  %3 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2750
  %flag1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %3, i32 0, i32 10, !dbg !2751
  %bf.load2 = load i16, i16* %flag1, align 8, !dbg !2752
  %bf.cast3 = zext i16 %bf.load2 to i32, !dbg !2752
  %and = and i32 %bf.cast3, -129, !dbg !2752
  %4 = trunc i32 %and to i16, !dbg !2752
  store i16 %4, i16* %flag1, align 8, !dbg !2752
  %bf.result.cast4 = zext i16 %4 to i32, !dbg !2752
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2753
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_node_get_verts(%struct.PBVH* %bvh, %struct.PBVHNode* %node, i32** %vert_indices, %struct.MVert** %verts) #0 !dbg !2754 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  %vert_indices.addr = alloca i32**, align 8
  %verts.addr = alloca %struct.MVert**, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !2759, metadata !DIExpression()), !dbg !2760
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !2761, metadata !DIExpression()), !dbg !2762
  store i32** %vert_indices, i32*** %vert_indices.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %vert_indices.addr, metadata !2763, metadata !DIExpression()), !dbg !2764
  store %struct.MVert** %verts, %struct.MVert*** %verts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.MVert*** %verts.addr, metadata !2765, metadata !DIExpression()), !dbg !2766
  %0 = load i32**, i32*** %vert_indices.addr, align 8, !dbg !2767
  %tobool = icmp ne i32** %0, null, !dbg !2767
  br i1 %tobool, label %if.then, label %if.end, !dbg !2769

if.then:                                          ; preds = %entry
  %1 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2770
  %vert_indices1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %1, i32 0, i32 6, !dbg !2771
  %2 = load i32*, i32** %vert_indices1, align 8, !dbg !2771
  %3 = load i32**, i32*** %vert_indices.addr, align 8, !dbg !2772
  store i32* %2, i32** %3, align 8, !dbg !2773
  br label %if.end, !dbg !2774

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.MVert**, %struct.MVert*** %verts.addr, align 8, !dbg !2775
  %tobool2 = icmp ne %struct.MVert** %4, null, !dbg !2775
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !2777

if.then3:                                         ; preds = %if.end
  %5 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2778
  %verts4 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %5, i32 0, i32 9, !dbg !2779
  %6 = load %struct.MVert*, %struct.MVert** %verts4, align 8, !dbg !2779
  %7 = load %struct.MVert**, %struct.MVert*** %verts.addr, align 8, !dbg !2780
  store %struct.MVert* %6, %struct.MVert** %7, align 8, !dbg !2781
  br label %if.end5, !dbg !2782

if.end5:                                          ; preds = %if.then3, %if.end
  ret void, !dbg !2783
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_node_num_verts(%struct.PBVH* %bvh, %struct.PBVHNode* %node, i32* %uniquevert, i32* %totvert) #0 !dbg !2784 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  %uniquevert.addr = alloca i32*, align 8
  %totvert.addr = alloca i32*, align 8
  %tot = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !2787, metadata !DIExpression()), !dbg !2788
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !2789, metadata !DIExpression()), !dbg !2790
  store i32* %uniquevert, i32** %uniquevert.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %uniquevert.addr, metadata !2791, metadata !DIExpression()), !dbg !2792
  store i32* %totvert, i32** %totvert.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %totvert.addr, metadata !2793, metadata !DIExpression()), !dbg !2794
  call void @llvm.dbg.declare(metadata i32* %tot, metadata !2795, metadata !DIExpression()), !dbg !2796
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2797
  %type = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 0, !dbg !2798
  %1 = load i32, i32* %type, align 8, !dbg !2798
  switch i32 %1, label %sw.epilog [
    i32 1, label %sw.bb
    i32 0, label %sw.bb4
    i32 2, label %sw.bb12
  ], !dbg !2799

sw.bb:                                            ; preds = %entry
  %2 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2800
  %totprim = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %2, i32 0, i32 5, !dbg !2802
  %3 = load i32, i32* %totprim, align 8, !dbg !2802
  %4 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2803
  %gridkey = getelementptr inbounds %struct.PBVH, %struct.PBVH* %4, i32 0, i32 12, !dbg !2804
  %grid_area = getelementptr inbounds %struct.CCGKey, %struct.CCGKey* %gridkey, i32 0, i32 3, !dbg !2805
  %5 = load i32, i32* %grid_area, align 4, !dbg !2805
  %mul = mul i32 %3, %5, !dbg !2806
  store i32 %mul, i32* %tot, align 4, !dbg !2807
  %6 = load i32*, i32** %totvert.addr, align 8, !dbg !2808
  %tobool = icmp ne i32* %6, null, !dbg !2808
  br i1 %tobool, label %if.then, label %if.end, !dbg !2810

if.then:                                          ; preds = %sw.bb
  %7 = load i32, i32* %tot, align 4, !dbg !2811
  %8 = load i32*, i32** %totvert.addr, align 8, !dbg !2812
  store i32 %7, i32* %8, align 4, !dbg !2813
  br label %if.end, !dbg !2814

if.end:                                           ; preds = %if.then, %sw.bb
  %9 = load i32*, i32** %uniquevert.addr, align 8, !dbg !2815
  %tobool1 = icmp ne i32* %9, null, !dbg !2815
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !2817

if.then2:                                         ; preds = %if.end
  %10 = load i32, i32* %tot, align 4, !dbg !2818
  %11 = load i32*, i32** %uniquevert.addr, align 8, !dbg !2819
  store i32 %10, i32* %11, align 4, !dbg !2820
  br label %if.end3, !dbg !2821

if.end3:                                          ; preds = %if.then2, %if.end
  br label %sw.epilog, !dbg !2822

sw.bb4:                                           ; preds = %entry
  %12 = load i32*, i32** %totvert.addr, align 8, !dbg !2823
  %tobool5 = icmp ne i32* %12, null, !dbg !2823
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !2825

if.then6:                                         ; preds = %sw.bb4
  %13 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2826
  %uniq_verts = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %13, i32 0, i32 7, !dbg !2827
  %14 = load i32, i32* %uniq_verts, align 8, !dbg !2827
  %15 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2828
  %face_verts = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %15, i32 0, i32 8, !dbg !2829
  %16 = load i32, i32* %face_verts, align 4, !dbg !2829
  %add = add i32 %14, %16, !dbg !2830
  %17 = load i32*, i32** %totvert.addr, align 8, !dbg !2831
  store i32 %add, i32* %17, align 4, !dbg !2832
  br label %if.end7, !dbg !2833

if.end7:                                          ; preds = %if.then6, %sw.bb4
  %18 = load i32*, i32** %uniquevert.addr, align 8, !dbg !2834
  %tobool8 = icmp ne i32* %18, null, !dbg !2834
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !2836

if.then9:                                         ; preds = %if.end7
  %19 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2837
  %uniq_verts10 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %19, i32 0, i32 7, !dbg !2838
  %20 = load i32, i32* %uniq_verts10, align 8, !dbg !2838
  %21 = load i32*, i32** %uniquevert.addr, align 8, !dbg !2839
  store i32 %20, i32* %21, align 4, !dbg !2840
  br label %if.end11, !dbg !2841

if.end11:                                         ; preds = %if.then9, %if.end7
  br label %sw.epilog, !dbg !2842

sw.bb12:                                          ; preds = %entry
  %22 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2843
  %bm_unique_verts = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %22, i32 0, i32 16, !dbg !2844
  %23 = load %struct.GSet*, %struct.GSet** %bm_unique_verts, align 8, !dbg !2844
  %call = call i32 @BLI_gset_size(%struct.GSet* %23), !dbg !2845
  store i32 %call, i32* %tot, align 4, !dbg !2846
  %24 = load i32*, i32** %totvert.addr, align 8, !dbg !2847
  %tobool13 = icmp ne i32* %24, null, !dbg !2847
  br i1 %tobool13, label %if.then14, label %if.end17, !dbg !2849

if.then14:                                        ; preds = %sw.bb12
  %25 = load i32, i32* %tot, align 4, !dbg !2850
  %26 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2851
  %bm_other_verts = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %26, i32 0, i32 17, !dbg !2852
  %27 = load %struct.GSet*, %struct.GSet** %bm_other_verts, align 8, !dbg !2852
  %call15 = call i32 @BLI_gset_size(%struct.GSet* %27), !dbg !2853
  %add16 = add nsw i32 %25, %call15, !dbg !2854
  %28 = load i32*, i32** %totvert.addr, align 8, !dbg !2855
  store i32 %add16, i32* %28, align 4, !dbg !2856
  br label %if.end17, !dbg !2857

if.end17:                                         ; preds = %if.then14, %sw.bb12
  %29 = load i32*, i32** %uniquevert.addr, align 8, !dbg !2858
  %tobool18 = icmp ne i32* %29, null, !dbg !2858
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !2860

if.then19:                                        ; preds = %if.end17
  %30 = load i32, i32* %tot, align 4, !dbg !2861
  %31 = load i32*, i32** %uniquevert.addr, align 8, !dbg !2862
  store i32 %30, i32* %31, align 4, !dbg !2863
  br label %if.end20, !dbg !2864

if.end20:                                         ; preds = %if.then19, %if.end17
  br label %sw.epilog, !dbg !2865

sw.epilog:                                        ; preds = %entry, %if.end20, %if.end11, %if.end3
  ret void, !dbg !2866
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_node_get_grids(%struct.PBVH* %bvh, %struct.PBVHNode* %node, i32** %grid_indices, i32* %totgrid, i32* %maxgrid, i32* %gridsize, %struct.CCGElem*** %griddata, %struct.DMGridAdjacency** %gridadj) #0 !dbg !2867 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  %grid_indices.addr = alloca i32**, align 8
  %totgrid.addr = alloca i32*, align 8
  %maxgrid.addr = alloca i32*, align 8
  %gridsize.addr = alloca i32*, align 8
  %griddata.addr = alloca %struct.CCGElem***, align 8
  %gridadj.addr = alloca %struct.DMGridAdjacency**, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !2872, metadata !DIExpression()), !dbg !2873
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !2874, metadata !DIExpression()), !dbg !2875
  store i32** %grid_indices, i32*** %grid_indices.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %grid_indices.addr, metadata !2876, metadata !DIExpression()), !dbg !2877
  store i32* %totgrid, i32** %totgrid.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %totgrid.addr, metadata !2878, metadata !DIExpression()), !dbg !2879
  store i32* %maxgrid, i32** %maxgrid.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %maxgrid.addr, metadata !2880, metadata !DIExpression()), !dbg !2881
  store i32* %gridsize, i32** %gridsize.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %gridsize.addr, metadata !2882, metadata !DIExpression()), !dbg !2883
  store %struct.CCGElem*** %griddata, %struct.CCGElem**** %griddata.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGElem**** %griddata.addr, metadata !2884, metadata !DIExpression()), !dbg !2885
  store %struct.DMGridAdjacency** %gridadj, %struct.DMGridAdjacency*** %gridadj.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DMGridAdjacency*** %gridadj.addr, metadata !2886, metadata !DIExpression()), !dbg !2887
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2888
  %type = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 0, !dbg !2889
  %1 = load i32, i32* %type, align 8, !dbg !2889
  switch i32 %1, label %sw.epilog [
    i32 1, label %sw.bb
    i32 0, label %sw.bb18
    i32 2, label %sw.bb18
  ], !dbg !2890

sw.bb:                                            ; preds = %entry
  %2 = load i32**, i32*** %grid_indices.addr, align 8, !dbg !2891
  %tobool = icmp ne i32** %2, null, !dbg !2891
  br i1 %tobool, label %if.then, label %if.end, !dbg !2894

if.then:                                          ; preds = %sw.bb
  %3 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2895
  %prim_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %3, i32 0, i32 4, !dbg !2896
  %4 = load i32*, i32** %prim_indices, align 8, !dbg !2896
  %5 = load i32**, i32*** %grid_indices.addr, align 8, !dbg !2897
  store i32* %4, i32** %5, align 8, !dbg !2898
  br label %if.end, !dbg !2899

if.end:                                           ; preds = %if.then, %sw.bb
  %6 = load i32*, i32** %totgrid.addr, align 8, !dbg !2900
  %tobool1 = icmp ne i32* %6, null, !dbg !2900
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !2902

if.then2:                                         ; preds = %if.end
  %7 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2903
  %totprim = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %7, i32 0, i32 5, !dbg !2904
  %8 = load i32, i32* %totprim, align 8, !dbg !2904
  %9 = load i32*, i32** %totgrid.addr, align 8, !dbg !2905
  store i32 %8, i32* %9, align 4, !dbg !2906
  br label %if.end3, !dbg !2907

if.end3:                                          ; preds = %if.then2, %if.end
  %10 = load i32*, i32** %maxgrid.addr, align 8, !dbg !2908
  %tobool4 = icmp ne i32* %10, null, !dbg !2908
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !2910

if.then5:                                         ; preds = %if.end3
  %11 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2911
  %totgrid6 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %11, i32 0, i32 17, !dbg !2912
  %12 = load i32, i32* %totgrid6, align 8, !dbg !2912
  %13 = load i32*, i32** %maxgrid.addr, align 8, !dbg !2913
  store i32 %12, i32* %13, align 4, !dbg !2914
  br label %if.end7, !dbg !2915

if.end7:                                          ; preds = %if.then5, %if.end3
  %14 = load i32*, i32** %gridsize.addr, align 8, !dbg !2916
  %tobool8 = icmp ne i32* %14, null, !dbg !2916
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !2918

if.then9:                                         ; preds = %if.end7
  %15 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2919
  %gridkey = getelementptr inbounds %struct.PBVH, %struct.PBVH* %15, i32 0, i32 12, !dbg !2920
  %grid_size = getelementptr inbounds %struct.CCGKey, %struct.CCGKey* %gridkey, i32 0, i32 2, !dbg !2921
  %16 = load i32, i32* %grid_size, align 8, !dbg !2921
  %17 = load i32*, i32** %gridsize.addr, align 8, !dbg !2922
  store i32 %16, i32* %17, align 4, !dbg !2923
  br label %if.end10, !dbg !2924

if.end10:                                         ; preds = %if.then9, %if.end7
  %18 = load %struct.CCGElem***, %struct.CCGElem**** %griddata.addr, align 8, !dbg !2925
  %tobool11 = icmp ne %struct.CCGElem*** %18, null, !dbg !2925
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !2927

if.then12:                                        ; preds = %if.end10
  %19 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2928
  %grids = getelementptr inbounds %struct.PBVH, %struct.PBVH* %19, i32 0, i32 13, !dbg !2929
  %20 = load %struct.CCGElem**, %struct.CCGElem*** %grids, align 8, !dbg !2929
  %21 = load %struct.CCGElem***, %struct.CCGElem**** %griddata.addr, align 8, !dbg !2930
  store %struct.CCGElem** %20, %struct.CCGElem*** %21, align 8, !dbg !2931
  br label %if.end13, !dbg !2932

if.end13:                                         ; preds = %if.then12, %if.end10
  %22 = load %struct.DMGridAdjacency**, %struct.DMGridAdjacency*** %gridadj.addr, align 8, !dbg !2933
  %tobool14 = icmp ne %struct.DMGridAdjacency** %22, null, !dbg !2933
  br i1 %tobool14, label %if.then15, label %if.end17, !dbg !2935

if.then15:                                        ; preds = %if.end13
  %23 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !2936
  %gridadj16 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %23, i32 0, i32 14, !dbg !2937
  %24 = load %struct.DMGridAdjacency*, %struct.DMGridAdjacency** %gridadj16, align 8, !dbg !2937
  %25 = load %struct.DMGridAdjacency**, %struct.DMGridAdjacency*** %gridadj.addr, align 8, !dbg !2938
  store %struct.DMGridAdjacency* %24, %struct.DMGridAdjacency** %25, align 8, !dbg !2939
  br label %if.end17, !dbg !2940

if.end17:                                         ; preds = %if.then15, %if.end13
  br label %sw.epilog, !dbg !2941

sw.bb18:                                          ; preds = %entry, %entry
  %26 = load i32**, i32*** %grid_indices.addr, align 8, !dbg !2942
  %tobool19 = icmp ne i32** %26, null, !dbg !2942
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !2944

if.then20:                                        ; preds = %sw.bb18
  %27 = load i32**, i32*** %grid_indices.addr, align 8, !dbg !2945
  store i32* null, i32** %27, align 8, !dbg !2946
  br label %if.end21, !dbg !2947

if.end21:                                         ; preds = %if.then20, %sw.bb18
  %28 = load i32*, i32** %totgrid.addr, align 8, !dbg !2948
  %tobool22 = icmp ne i32* %28, null, !dbg !2948
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !2950

if.then23:                                        ; preds = %if.end21
  %29 = load i32*, i32** %totgrid.addr, align 8, !dbg !2951
  store i32 0, i32* %29, align 4, !dbg !2952
  br label %if.end24, !dbg !2953

if.end24:                                         ; preds = %if.then23, %if.end21
  %30 = load i32*, i32** %maxgrid.addr, align 8, !dbg !2954
  %tobool25 = icmp ne i32* %30, null, !dbg !2954
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !2956

if.then26:                                        ; preds = %if.end24
  %31 = load i32*, i32** %maxgrid.addr, align 8, !dbg !2957
  store i32 0, i32* %31, align 4, !dbg !2958
  br label %if.end27, !dbg !2959

if.end27:                                         ; preds = %if.then26, %if.end24
  %32 = load i32*, i32** %gridsize.addr, align 8, !dbg !2960
  %tobool28 = icmp ne i32* %32, null, !dbg !2960
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !2962

if.then29:                                        ; preds = %if.end27
  %33 = load i32*, i32** %gridsize.addr, align 8, !dbg !2963
  store i32 0, i32* %33, align 4, !dbg !2964
  br label %if.end30, !dbg !2965

if.end30:                                         ; preds = %if.then29, %if.end27
  %34 = load %struct.CCGElem***, %struct.CCGElem**** %griddata.addr, align 8, !dbg !2966
  %tobool31 = icmp ne %struct.CCGElem*** %34, null, !dbg !2966
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !2968

if.then32:                                        ; preds = %if.end30
  %35 = load %struct.CCGElem***, %struct.CCGElem**** %griddata.addr, align 8, !dbg !2969
  store %struct.CCGElem** null, %struct.CCGElem*** %35, align 8, !dbg !2970
  br label %if.end33, !dbg !2971

if.end33:                                         ; preds = %if.then32, %if.end30
  %36 = load %struct.DMGridAdjacency**, %struct.DMGridAdjacency*** %gridadj.addr, align 8, !dbg !2972
  %tobool34 = icmp ne %struct.DMGridAdjacency** %36, null, !dbg !2972
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !2974

if.then35:                                        ; preds = %if.end33
  %37 = load %struct.DMGridAdjacency**, %struct.DMGridAdjacency*** %gridadj.addr, align 8, !dbg !2975
  store %struct.DMGridAdjacency* null, %struct.DMGridAdjacency** %37, align 8, !dbg !2976
  br label %if.end36, !dbg !2977

if.end36:                                         ; preds = %if.then35, %if.end33
  br label %sw.epilog, !dbg !2978

sw.epilog:                                        ; preds = %entry, %if.end36, %if.end17
  ret void, !dbg !2979
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_node_get_BB(%struct.PBVHNode* %node, float* %bb_min, float* %bb_max) #0 !dbg !2980 {
entry:
  %node.addr = alloca %struct.PBVHNode*, align 8
  %bb_min.addr = alloca float*, align 8
  %bb_max.addr = alloca float*, align 8
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !2983, metadata !DIExpression()), !dbg !2984
  store float* %bb_min, float** %bb_min.addr, align 8
  call void @llvm.dbg.declare(metadata float** %bb_min.addr, metadata !2985, metadata !DIExpression()), !dbg !2986
  store float* %bb_max, float** %bb_max.addr, align 8
  call void @llvm.dbg.declare(metadata float** %bb_max.addr, metadata !2987, metadata !DIExpression()), !dbg !2988
  %0 = load float*, float** %bb_min.addr, align 8, !dbg !2989
  %1 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2990
  %vb = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %1, i32 0, i32 1, !dbg !2991
  %bmin = getelementptr inbounds %struct.BB, %struct.BB* %vb, i32 0, i32 0, !dbg !2992
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %bmin, i64 0, i64 0, !dbg !2990
  call void @copy_v3_v3(float* %0, float* %arraydecay), !dbg !2993
  %2 = load float*, float** %bb_max.addr, align 8, !dbg !2994
  %3 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !2995
  %vb1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %3, i32 0, i32 1, !dbg !2996
  %bmax = getelementptr inbounds %struct.BB, %struct.BB* %vb1, i32 0, i32 1, !dbg !2997
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %bmax, i64 0, i64 0, !dbg !2995
  call void @copy_v3_v3(float* %2, float* %arraydecay2), !dbg !2998
  ret void, !dbg !2999
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_node_get_original_BB(%struct.PBVHNode* %node, float* %bb_min, float* %bb_max) #0 !dbg !3000 {
entry:
  %node.addr = alloca %struct.PBVHNode*, align 8
  %bb_min.addr = alloca float*, align 8
  %bb_max.addr = alloca float*, align 8
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !3001, metadata !DIExpression()), !dbg !3002
  store float* %bb_min, float** %bb_min.addr, align 8
  call void @llvm.dbg.declare(metadata float** %bb_min.addr, metadata !3003, metadata !DIExpression()), !dbg !3004
  store float* %bb_max, float** %bb_max.addr, align 8
  call void @llvm.dbg.declare(metadata float** %bb_max.addr, metadata !3005, metadata !DIExpression()), !dbg !3006
  %0 = load float*, float** %bb_min.addr, align 8, !dbg !3007
  %1 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3008
  %orig_vb = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %1, i32 0, i32 2, !dbg !3009
  %bmin = getelementptr inbounds %struct.BB, %struct.BB* %orig_vb, i32 0, i32 0, !dbg !3010
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %bmin, i64 0, i64 0, !dbg !3008
  call void @copy_v3_v3(float* %0, float* %arraydecay), !dbg !3011
  %2 = load float*, float** %bb_max.addr, align 8, !dbg !3012
  %3 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3013
  %orig_vb1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %3, i32 0, i32 2, !dbg !3014
  %bmax = getelementptr inbounds %struct.BB, %struct.BB* %orig_vb1, i32 0, i32 1, !dbg !3015
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %bmax, i64 0, i64 0, !dbg !3013
  call void @copy_v3_v3(float* %2, float* %arraydecay2), !dbg !3016
  ret void, !dbg !3017
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_node_get_proxies(%struct.PBVHNode* %node, %struct.PBVHProxyNode** %proxies, i32* %proxy_count) #0 !dbg !3018 {
entry:
  %node.addr = alloca %struct.PBVHNode*, align 8
  %proxies.addr = alloca %struct.PBVHProxyNode**, align 8
  %proxy_count.addr = alloca i32*, align 8
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !3022, metadata !DIExpression()), !dbg !3023
  store %struct.PBVHProxyNode** %proxies, %struct.PBVHProxyNode*** %proxies.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHProxyNode*** %proxies.addr, metadata !3024, metadata !DIExpression()), !dbg !3025
  store i32* %proxy_count, i32** %proxy_count.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %proxy_count.addr, metadata !3026, metadata !DIExpression()), !dbg !3027
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3028
  %proxy_count1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 13, !dbg !3030
  %1 = load i32, i32* %proxy_count1, align 8, !dbg !3030
  %cmp = icmp sgt i32 %1, 0, !dbg !3031
  br i1 %cmp, label %if.then, label %if.else, !dbg !3032

if.then:                                          ; preds = %entry
  %2 = load %struct.PBVHProxyNode**, %struct.PBVHProxyNode*** %proxies.addr, align 8, !dbg !3033
  %tobool = icmp ne %struct.PBVHProxyNode** %2, null, !dbg !3033
  br i1 %tobool, label %if.then2, label %if.end, !dbg !3036

if.then2:                                         ; preds = %if.then
  %3 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3037
  %proxies3 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %3, i32 0, i32 14, !dbg !3038
  %4 = load %struct.PBVHProxyNode*, %struct.PBVHProxyNode** %proxies3, align 8, !dbg !3038
  %5 = load %struct.PBVHProxyNode**, %struct.PBVHProxyNode*** %proxies.addr, align 8, !dbg !3039
  store %struct.PBVHProxyNode* %4, %struct.PBVHProxyNode** %5, align 8, !dbg !3040
  br label %if.end, !dbg !3041

if.end:                                           ; preds = %if.then2, %if.then
  %6 = load i32*, i32** %proxy_count.addr, align 8, !dbg !3042
  %tobool4 = icmp ne i32* %6, null, !dbg !3042
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !3044

if.then5:                                         ; preds = %if.end
  %7 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3045
  %proxy_count6 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %7, i32 0, i32 13, !dbg !3046
  %8 = load i32, i32* %proxy_count6, align 8, !dbg !3046
  %9 = load i32*, i32** %proxy_count.addr, align 8, !dbg !3047
  store i32 %8, i32* %9, align 4, !dbg !3048
  br label %if.end7, !dbg !3049

if.end7:                                          ; preds = %if.then5, %if.end
  br label %if.end14, !dbg !3050

if.else:                                          ; preds = %entry
  %10 = load %struct.PBVHProxyNode**, %struct.PBVHProxyNode*** %proxies.addr, align 8, !dbg !3051
  %tobool8 = icmp ne %struct.PBVHProxyNode** %10, null, !dbg !3051
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !3054

if.then9:                                         ; preds = %if.else
  %11 = load %struct.PBVHProxyNode**, %struct.PBVHProxyNode*** %proxies.addr, align 8, !dbg !3055
  store %struct.PBVHProxyNode* null, %struct.PBVHProxyNode** %11, align 8, !dbg !3056
  br label %if.end10, !dbg !3057

if.end10:                                         ; preds = %if.then9, %if.else
  %12 = load i32*, i32** %proxy_count.addr, align 8, !dbg !3058
  %tobool11 = icmp ne i32* %12, null, !dbg !3058
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !3060

if.then12:                                        ; preds = %if.end10
  %13 = load i32*, i32** %proxy_count.addr, align 8, !dbg !3061
  store i32 0, i32* %13, align 4, !dbg !3062
  br label %if.end13, !dbg !3063

if.end13:                                         ; preds = %if.then12, %if.end10
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end7
  ret void, !dbg !3064
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_raycast(%struct.PBVH* %bvh, void (%struct.PBVHNode*, i8*, float*)* %cb, i8* %data, float* %ray_start, float* %ray_normal, i8 zeroext %original) #0 !dbg !3065 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %cb.addr = alloca void (%struct.PBVHNode*, i8*, float*)*, align 8
  %data.addr = alloca i8*, align 8
  %ray_start.addr = alloca float*, align 8
  %ray_normal.addr = alloca float*, align 8
  %original.addr = alloca i8, align 1
  %rcd = alloca %struct.RaycastData, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !3072, metadata !DIExpression()), !dbg !3073
  store void (%struct.PBVHNode*, i8*, float*)* %cb, void (%struct.PBVHNode*, i8*, float*)** %cb.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.PBVHNode*, i8*, float*)** %cb.addr, metadata !3074, metadata !DIExpression()), !dbg !3075
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3076, metadata !DIExpression()), !dbg !3077
  store float* %ray_start, float** %ray_start.addr, align 8
  call void @llvm.dbg.declare(metadata float** %ray_start.addr, metadata !3078, metadata !DIExpression()), !dbg !3079
  store float* %ray_normal, float** %ray_normal.addr, align 8
  call void @llvm.dbg.declare(metadata float** %ray_normal.addr, metadata !3080, metadata !DIExpression()), !dbg !3081
  store i8 %original, i8* %original.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %original.addr, metadata !3082, metadata !DIExpression()), !dbg !3083
  call void @llvm.dbg.declare(metadata %struct.RaycastData* %rcd, metadata !3084, metadata !DIExpression()), !dbg !3097
  %ray = getelementptr inbounds %struct.RaycastData, %struct.RaycastData* %rcd, i32 0, i32 0, !dbg !3098
  %0 = load float*, float** %ray_start.addr, align 8, !dbg !3099
  %1 = load float*, float** %ray_normal.addr, align 8, !dbg !3100
  call void @isect_ray_aabb_initialize(%struct.IsectRayAABBData* %ray, float* %0, float* %1), !dbg !3101
  %2 = load i8, i8* %original.addr, align 1, !dbg !3102
  %original1 = getelementptr inbounds %struct.RaycastData, %struct.RaycastData* %rcd, i32 0, i32 1, !dbg !3103
  store i8 %2, i8* %original1, align 4, !dbg !3104
  %3 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3105
  %4 = bitcast %struct.RaycastData* %rcd to i8*, !dbg !3106
  %5 = load void (%struct.PBVHNode*, i8*, float*)*, void (%struct.PBVHNode*, i8*, float*)** %cb.addr, align 8, !dbg !3107
  %6 = load i8*, i8** %data.addr, align 8, !dbg !3108
  call void @BKE_pbvh_search_callback_occluded(%struct.PBVH* %3, i8 (%struct.PBVHNode*, i8*)* @ray_aabb_intersect, i8* %4, void (%struct.PBVHNode*, i8*, float*)* %5, i8* %6), !dbg !3109
  ret void, !dbg !3110
}

declare dso_local void @isect_ray_aabb_initialize(%struct.IsectRayAABBData*, float*, float*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @BKE_pbvh_search_callback_occluded(%struct.PBVH* %bvh, i8 (%struct.PBVHNode*, i8*)* %scb, i8* %search_data, void (%struct.PBVHNode*, i8*, float*)* %hcb, i8* %hit_data) #0 !dbg !3111 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %scb.addr = alloca i8 (%struct.PBVHNode*, i8*)*, align 8
  %search_data.addr = alloca i8*, align 8
  %hcb.addr = alloca void (%struct.PBVHNode*, i8*, float*)*, align 8
  %hit_data.addr = alloca i8*, align 8
  %iter = alloca %struct.PBVHIter, align 8
  %node = alloca %struct.PBVHNode*, align 8
  %tree = alloca %struct.node_tree*, align 8
  %new_node = alloca %struct.node_tree*, align 8
  %tmin = alloca float, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !3114, metadata !DIExpression()), !dbg !3115
  store i8 (%struct.PBVHNode*, i8*)* %scb, i8 (%struct.PBVHNode*, i8*)** %scb.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%struct.PBVHNode*, i8*)** %scb.addr, metadata !3116, metadata !DIExpression()), !dbg !3117
  store i8* %search_data, i8** %search_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %search_data.addr, metadata !3118, metadata !DIExpression()), !dbg !3119
  store void (%struct.PBVHNode*, i8*, float*)* %hcb, void (%struct.PBVHNode*, i8*, float*)** %hcb.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.PBVHNode*, i8*, float*)** %hcb.addr, metadata !3120, metadata !DIExpression()), !dbg !3121
  store i8* %hit_data, i8** %hit_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %hit_data.addr, metadata !3122, metadata !DIExpression()), !dbg !3123
  call void @llvm.dbg.declare(metadata %struct.PBVHIter* %iter, metadata !3124, metadata !DIExpression()), !dbg !3125
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node, metadata !3126, metadata !DIExpression()), !dbg !3127
  call void @llvm.dbg.declare(metadata %struct.node_tree** %tree, metadata !3128, metadata !DIExpression()), !dbg !3137
  store %struct.node_tree* null, %struct.node_tree** %tree, align 8, !dbg !3137
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3138
  %1 = load i8 (%struct.PBVHNode*, i8*)*, i8 (%struct.PBVHNode*, i8*)** %scb.addr, align 8, !dbg !3139
  %2 = load i8*, i8** %search_data.addr, align 8, !dbg !3140
  call void @pbvh_iter_begin(%struct.PBVHIter* %iter, %struct.PBVH* %0, i8 (%struct.PBVHNode*, i8*)* %1, i8* %2), !dbg !3141
  br label %while.cond, !dbg !3142

while.cond:                                       ; preds = %if.end5, %entry
  %call = call %struct.PBVHNode* @pbvh_iter_next_occluded(%struct.PBVHIter* %iter), !dbg !3143
  store %struct.PBVHNode* %call, %struct.PBVHNode** %node, align 8, !dbg !3144
  %tobool = icmp ne %struct.PBVHNode* %call, null, !dbg !3142
  br i1 %tobool, label %while.body, label %while.end, !dbg !3142

while.body:                                       ; preds = %while.cond
  %3 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !3145
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %3, i32 0, i32 10, !dbg !3148
  %bf.load = load i16, i16* %flag, align 8, !dbg !3148
  %bf.cast = zext i16 %bf.load to i32, !dbg !3148
  %and = and i32 %bf.cast, 1, !dbg !3149
  %tobool1 = icmp ne i32 %and, 0, !dbg !3149
  br i1 %tobool1, label %if.then, label %if.end5, !dbg !3150

if.then:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata %struct.node_tree** %new_node, metadata !3151, metadata !DIExpression()), !dbg !3153
  %call2 = call noalias i8* @malloc(i64 24) #5, !dbg !3154
  %4 = bitcast i8* %call2 to %struct.node_tree*, !dbg !3154
  store %struct.node_tree* %4, %struct.node_tree** %new_node, align 8, !dbg !3153
  %5 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !3155
  %6 = load %struct.node_tree*, %struct.node_tree** %new_node, align 8, !dbg !3156
  %data = getelementptr inbounds %struct.node_tree, %struct.node_tree* %6, i32 0, i32 0, !dbg !3157
  store %struct.PBVHNode* %5, %struct.PBVHNode** %data, align 8, !dbg !3158
  %7 = load %struct.node_tree*, %struct.node_tree** %new_node, align 8, !dbg !3159
  %left = getelementptr inbounds %struct.node_tree, %struct.node_tree* %7, i32 0, i32 1, !dbg !3160
  store %struct.node_tree* null, %struct.node_tree** %left, align 8, !dbg !3161
  %8 = load %struct.node_tree*, %struct.node_tree** %new_node, align 8, !dbg !3162
  %right = getelementptr inbounds %struct.node_tree, %struct.node_tree* %8, i32 0, i32 2, !dbg !3163
  store %struct.node_tree* null, %struct.node_tree** %right, align 8, !dbg !3164
  %9 = load %struct.node_tree*, %struct.node_tree** %tree, align 8, !dbg !3165
  %tobool3 = icmp ne %struct.node_tree* %9, null, !dbg !3165
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !3167

if.then4:                                         ; preds = %if.then
  %10 = load %struct.node_tree*, %struct.node_tree** %tree, align 8, !dbg !3168
  %11 = load %struct.node_tree*, %struct.node_tree** %new_node, align 8, !dbg !3170
  call void @node_tree_insert(%struct.node_tree* %10, %struct.node_tree* %11), !dbg !3171
  br label %if.end, !dbg !3172

if.else:                                          ; preds = %if.then
  %12 = load %struct.node_tree*, %struct.node_tree** %new_node, align 8, !dbg !3173
  store %struct.node_tree* %12, %struct.node_tree** %tree, align 8, !dbg !3175
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  br label %if.end5, !dbg !3176

if.end5:                                          ; preds = %if.end, %while.body
  br label %while.cond, !dbg !3142, !llvm.loop !3177

while.end:                                        ; preds = %while.cond
  call void @pbvh_iter_end(%struct.PBVHIter* %iter), !dbg !3179
  %13 = load %struct.node_tree*, %struct.node_tree** %tree, align 8, !dbg !3180
  %tobool6 = icmp ne %struct.node_tree* %13, null, !dbg !3180
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !3182

if.then7:                                         ; preds = %while.end
  call void @llvm.dbg.declare(metadata float* %tmin, metadata !3183, metadata !DIExpression()), !dbg !3185
  store float 0x47EFFFFFE0000000, float* %tmin, align 4, !dbg !3185
  %14 = load %struct.node_tree*, %struct.node_tree** %tree, align 8, !dbg !3186
  %15 = load void (%struct.PBVHNode*, i8*, float*)*, void (%struct.PBVHNode*, i8*, float*)** %hcb.addr, align 8, !dbg !3187
  %16 = load i8*, i8** %hit_data.addr, align 8, !dbg !3188
  call void @traverse_tree(%struct.node_tree* %14, void (%struct.PBVHNode*, i8*, float*)* %15, i8* %16, float* %tmin), !dbg !3189
  %17 = load %struct.node_tree*, %struct.node_tree** %tree, align 8, !dbg !3190
  call void @free_tree(%struct.node_tree* %17), !dbg !3191
  br label %if.end8, !dbg !3192

if.end8:                                          ; preds = %if.then7, %while.end
  ret void, !dbg !3193
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ray_aabb_intersect(%struct.PBVHNode* %node, i8* %data_v) #0 !dbg !3194 {
entry:
  %node.addr = alloca %struct.PBVHNode*, align 8
  %data_v.addr = alloca i8*, align 8
  %rcd = alloca %struct.RaycastData*, align 8
  %bb_min = alloca [3 x float], align 4
  %bb_max = alloca [3 x float], align 4
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !3195, metadata !DIExpression()), !dbg !3196
  store i8* %data_v, i8** %data_v.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data_v.addr, metadata !3197, metadata !DIExpression()), !dbg !3198
  call void @llvm.dbg.declare(metadata %struct.RaycastData** %rcd, metadata !3199, metadata !DIExpression()), !dbg !3201
  %0 = load i8*, i8** %data_v.addr, align 8, !dbg !3202
  %1 = bitcast i8* %0 to %struct.RaycastData*, !dbg !3202
  store %struct.RaycastData* %1, %struct.RaycastData** %rcd, align 8, !dbg !3201
  call void @llvm.dbg.declare(metadata [3 x float]* %bb_min, metadata !3203, metadata !DIExpression()), !dbg !3204
  call void @llvm.dbg.declare(metadata [3 x float]* %bb_max, metadata !3205, metadata !DIExpression()), !dbg !3206
  %2 = load %struct.RaycastData*, %struct.RaycastData** %rcd, align 8, !dbg !3207
  %original = getelementptr inbounds %struct.RaycastData, %struct.RaycastData* %2, i32 0, i32 1, !dbg !3209
  %3 = load i8, i8* %original, align 4, !dbg !3209
  %tobool = icmp ne i8 %3, 0, !dbg !3207
  br i1 %tobool, label %if.then, label %if.else, !dbg !3210

if.then:                                          ; preds = %entry
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3211
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %bb_min, i64 0, i64 0, !dbg !3212
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %bb_max, i64 0, i64 0, !dbg !3213
  call void @BKE_pbvh_node_get_original_BB(%struct.PBVHNode* %4, float* %arraydecay, float* %arraydecay1), !dbg !3214
  br label %if.end, !dbg !3214

if.else:                                          ; preds = %entry
  %5 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3215
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %bb_min, i64 0, i64 0, !dbg !3216
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %bb_max, i64 0, i64 0, !dbg !3217
  call void @BKE_pbvh_node_get_BB(%struct.PBVHNode* %5, float* %arraydecay2, float* %arraydecay3), !dbg !3218
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct.RaycastData*, %struct.RaycastData** %rcd, align 8, !dbg !3219
  %ray = getelementptr inbounds %struct.RaycastData, %struct.RaycastData* %6, i32 0, i32 0, !dbg !3220
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %bb_min, i64 0, i64 0, !dbg !3221
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %bb_max, i64 0, i64 0, !dbg !3222
  %7 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3223
  %tmin = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %7, i32 0, i32 11, !dbg !3224
  %call = call zeroext i8 @isect_ray_aabb(%struct.IsectRayAABBData* %ray, float* %arraydecay4, float* %arraydecay5, float* %tmin), !dbg !3225
  ret i8 %call, !dbg !3226
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @ray_face_intersection(float* %ray_start, float* %ray_normal, float* %t0, float* %t1, float* %t2, float* %t3, float* %fdist) #0 !dbg !3227 {
entry:
  %retval = alloca i8, align 1
  %ray_start.addr = alloca float*, align 8
  %ray_normal.addr = alloca float*, align 8
  %t0.addr = alloca float*, align 8
  %t1.addr = alloca float*, align 8
  %t2.addr = alloca float*, align 8
  %t3.addr = alloca float*, align 8
  %fdist.addr = alloca float*, align 8
  %dist = alloca float, align 4
  store float* %ray_start, float** %ray_start.addr, align 8
  call void @llvm.dbg.declare(metadata float** %ray_start.addr, metadata !3230, metadata !DIExpression()), !dbg !3231
  store float* %ray_normal, float** %ray_normal.addr, align 8
  call void @llvm.dbg.declare(metadata float** %ray_normal.addr, metadata !3232, metadata !DIExpression()), !dbg !3233
  store float* %t0, float** %t0.addr, align 8
  call void @llvm.dbg.declare(metadata float** %t0.addr, metadata !3234, metadata !DIExpression()), !dbg !3235
  store float* %t1, float** %t1.addr, align 8
  call void @llvm.dbg.declare(metadata float** %t1.addr, metadata !3236, metadata !DIExpression()), !dbg !3237
  store float* %t2, float** %t2.addr, align 8
  call void @llvm.dbg.declare(metadata float** %t2.addr, metadata !3238, metadata !DIExpression()), !dbg !3239
  store float* %t3, float** %t3.addr, align 8
  call void @llvm.dbg.declare(metadata float** %t3.addr, metadata !3240, metadata !DIExpression()), !dbg !3241
  store float* %fdist, float** %fdist.addr, align 8
  call void @llvm.dbg.declare(metadata float** %fdist.addr, metadata !3242, metadata !DIExpression()), !dbg !3243
  call void @llvm.dbg.declare(metadata float* %dist, metadata !3244, metadata !DIExpression()), !dbg !3245
  %0 = load float*, float** %ray_start.addr, align 8, !dbg !3246
  %1 = load float*, float** %ray_normal.addr, align 8, !dbg !3248
  %2 = load float*, float** %t0.addr, align 8, !dbg !3249
  %3 = load float*, float** %t1.addr, align 8, !dbg !3250
  %4 = load float*, float** %t2.addr, align 8, !dbg !3251
  %call = call zeroext i8 @isect_ray_tri_epsilon_v3(float* %0, float* %1, float* %2, float* %3, float* %4, float* %dist, float* null, float 0x3FB99999A0000000), !dbg !3252
  %conv = zext i8 %call to i32, !dbg !3252
  %tobool = icmp ne i32 %conv, 0, !dbg !3252
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false, !dbg !3253

land.lhs.true:                                    ; preds = %entry
  %5 = load float, float* %dist, align 4, !dbg !3254
  %6 = load float*, float** %fdist.addr, align 8, !dbg !3255
  %7 = load float, float* %6, align 4, !dbg !3256
  %cmp = fcmp olt float %5, %7, !dbg !3257
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3258

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %8 = load float*, float** %t3.addr, align 8, !dbg !3259
  %tobool2 = icmp ne float* %8, null, !dbg !3259
  br i1 %tobool2, label %land.lhs.true3, label %if.else, !dbg !3260

land.lhs.true3:                                   ; preds = %lor.lhs.false
  %9 = load float*, float** %ray_start.addr, align 8, !dbg !3261
  %10 = load float*, float** %ray_normal.addr, align 8, !dbg !3262
  %11 = load float*, float** %t0.addr, align 8, !dbg !3263
  %12 = load float*, float** %t2.addr, align 8, !dbg !3264
  %13 = load float*, float** %t3.addr, align 8, !dbg !3265
  %call4 = call zeroext i8 @isect_ray_tri_epsilon_v3(float* %9, float* %10, float* %11, float* %12, float* %13, float* %dist, float* null, float 0x3FB99999A0000000), !dbg !3266
  %conv5 = zext i8 %call4 to i32, !dbg !3266
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !3266
  br i1 %tobool6, label %land.lhs.true7, label %if.else, !dbg !3267

land.lhs.true7:                                   ; preds = %land.lhs.true3
  %14 = load float, float* %dist, align 4, !dbg !3268
  %15 = load float*, float** %fdist.addr, align 8, !dbg !3269
  %16 = load float, float* %15, align 4, !dbg !3270
  %cmp8 = fcmp olt float %14, %16, !dbg !3271
  br i1 %cmp8, label %if.then, label %if.else, !dbg !3272

if.then:                                          ; preds = %land.lhs.true7, %land.lhs.true
  %17 = load float, float* %dist, align 4, !dbg !3273
  %18 = load float*, float** %fdist.addr, align 8, !dbg !3275
  store float %17, float* %18, align 4, !dbg !3276
  store i8 1, i8* %retval, align 1, !dbg !3277
  br label %return, !dbg !3277

if.else:                                          ; preds = %land.lhs.true7, %land.lhs.true3, %lor.lhs.false
  store i8 0, i8* %retval, align 1, !dbg !3278
  br label %return, !dbg !3278

return:                                           ; preds = %if.else, %if.then
  %19 = load i8, i8* %retval, align 1, !dbg !3280
  ret i8 %19, !dbg !3280
}

declare dso_local zeroext i8 @isect_ray_tri_epsilon_v3(float*, float*, float*, float*, float*, float*, float*, float) #3

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @BKE_pbvh_node_raycast(%struct.PBVH* %bvh, %struct.PBVHNode* %node, [3 x float]* %origco, i32 %use_origco, float* %ray_start, float* %ray_normal, float* %dist) #0 !dbg !3281 {
entry:
  %retval = alloca i8, align 1
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  %origco.addr = alloca [3 x float]*, align 8
  %use_origco.addr = alloca i32, align 4
  %ray_start.addr = alloca float*, align 8
  %ray_normal.addr = alloca float*, align 8
  %dist.addr = alloca float*, align 8
  %hit = alloca i8, align 1
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !3284, metadata !DIExpression()), !dbg !3285
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !3286, metadata !DIExpression()), !dbg !3287
  store [3 x float]* %origco, [3 x float]** %origco.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %origco.addr, metadata !3288, metadata !DIExpression()), !dbg !3289
  store i32 %use_origco, i32* %use_origco.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %use_origco.addr, metadata !3290, metadata !DIExpression()), !dbg !3291
  store float* %ray_start, float** %ray_start.addr, align 8
  call void @llvm.dbg.declare(metadata float** %ray_start.addr, metadata !3292, metadata !DIExpression()), !dbg !3293
  store float* %ray_normal, float** %ray_normal.addr, align 8
  call void @llvm.dbg.declare(metadata float** %ray_normal.addr, metadata !3294, metadata !DIExpression()), !dbg !3295
  store float* %dist, float** %dist.addr, align 8
  call void @llvm.dbg.declare(metadata float** %dist.addr, metadata !3296, metadata !DIExpression()), !dbg !3297
  call void @llvm.dbg.declare(metadata i8* %hit, metadata !3298, metadata !DIExpression()), !dbg !3299
  store i8 0, i8* %hit, align 1, !dbg !3299
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3300
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 10, !dbg !3302
  %bf.load = load i16, i16* %flag, align 8, !dbg !3302
  %bf.cast = zext i16 %bf.load to i32, !dbg !3302
  %and = and i32 %bf.cast, 128, !dbg !3303
  %tobool = icmp ne i32 %and, 0, !dbg !3303
  br i1 %tobool, label %if.then, label %if.end, !dbg !3304

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3305
  br label %return, !dbg !3305

if.end:                                           ; preds = %entry
  %1 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3306
  %type = getelementptr inbounds %struct.PBVH, %struct.PBVH* %1, i32 0, i32 0, !dbg !3307
  %2 = load i32, i32* %type, align 8, !dbg !3307
  switch i32 %2, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
    i32 2, label %sw.bb9
  ], !dbg !3308

sw.bb:                                            ; preds = %if.end
  %3 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3309
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3311
  %5 = load [3 x float]*, [3 x float]** %origco.addr, align 8, !dbg !3312
  %6 = load float*, float** %ray_start.addr, align 8, !dbg !3313
  %7 = load float*, float** %ray_normal.addr, align 8, !dbg !3314
  %8 = load float*, float** %dist.addr, align 8, !dbg !3315
  %call = call zeroext i8 @pbvh_faces_node_raycast(%struct.PBVH* %3, %struct.PBVHNode* %4, [3 x float]* %5, float* %6, float* %7, float* %8), !dbg !3316
  %conv = zext i8 %call to i32, !dbg !3316
  %9 = load i8, i8* %hit, align 1, !dbg !3317
  %conv1 = zext i8 %9 to i32, !dbg !3317
  %or = or i32 %conv1, %conv, !dbg !3317
  %conv2 = trunc i32 %or to i8, !dbg !3317
  store i8 %conv2, i8* %hit, align 1, !dbg !3317
  br label %sw.epilog, !dbg !3318

sw.bb3:                                           ; preds = %if.end
  %10 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3319
  %11 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3320
  %12 = load [3 x float]*, [3 x float]** %origco.addr, align 8, !dbg !3321
  %13 = load float*, float** %ray_start.addr, align 8, !dbg !3322
  %14 = load float*, float** %ray_normal.addr, align 8, !dbg !3323
  %15 = load float*, float** %dist.addr, align 8, !dbg !3324
  %call4 = call zeroext i8 @pbvh_grids_node_raycast(%struct.PBVH* %10, %struct.PBVHNode* %11, [3 x float]* %12, float* %13, float* %14, float* %15), !dbg !3325
  %conv5 = zext i8 %call4 to i32, !dbg !3325
  %16 = load i8, i8* %hit, align 1, !dbg !3326
  %conv6 = zext i8 %16 to i32, !dbg !3326
  %or7 = or i32 %conv6, %conv5, !dbg !3326
  %conv8 = trunc i32 %or7 to i8, !dbg !3326
  store i8 %conv8, i8* %hit, align 1, !dbg !3326
  br label %sw.epilog, !dbg !3327

sw.bb9:                                           ; preds = %if.end
  %17 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3328
  %18 = load float*, float** %ray_start.addr, align 8, !dbg !3329
  %19 = load float*, float** %ray_normal.addr, align 8, !dbg !3330
  %20 = load float*, float** %dist.addr, align 8, !dbg !3331
  %21 = load i32, i32* %use_origco.addr, align 4, !dbg !3332
  %conv10 = trunc i32 %21 to i8, !dbg !3332
  %call11 = call zeroext i8 @pbvh_bmesh_node_raycast(%struct.PBVHNode* %17, float* %18, float* %19, float* %20, i8 zeroext %conv10), !dbg !3333
  store i8 %call11, i8* %hit, align 1, !dbg !3334
  br label %sw.epilog, !dbg !3335

sw.epilog:                                        ; preds = %if.end, %sw.bb9, %sw.bb3, %sw.bb
  %22 = load i8, i8* %hit, align 1, !dbg !3336
  store i8 %22, i8* %retval, align 1, !dbg !3337
  br label %return, !dbg !3337

return:                                           ; preds = %sw.epilog, %if.then
  %23 = load i8, i8* %retval, align 1, !dbg !3338
  ret i8 %23, !dbg !3338
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @pbvh_faces_node_raycast(%struct.PBVH* %bvh, %struct.PBVHNode* %node, [3 x float]* %origco, float* %ray_start, float* %ray_normal, float* %dist) #0 !dbg !3339 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  %origco.addr = alloca [3 x float]*, align 8
  %ray_start.addr = alloca float*, align 8
  %ray_normal.addr = alloca float*, align 8
  %dist.addr = alloca float*, align 8
  %vert = alloca %struct.MVert*, align 8
  %faces = alloca i32*, align 8
  %i = alloca i32, align 4
  %totface = alloca i32, align 4
  %hit = alloca i8, align 1
  %f = alloca %struct.MFace*, align 8
  %face_verts = alloca i32*, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !3344, metadata !DIExpression()), !dbg !3345
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !3346, metadata !DIExpression()), !dbg !3347
  store [3 x float]* %origco, [3 x float]** %origco.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %origco.addr, metadata !3348, metadata !DIExpression()), !dbg !3349
  store float* %ray_start, float** %ray_start.addr, align 8
  call void @llvm.dbg.declare(metadata float** %ray_start.addr, metadata !3350, metadata !DIExpression()), !dbg !3351
  store float* %ray_normal, float** %ray_normal.addr, align 8
  call void @llvm.dbg.declare(metadata float** %ray_normal.addr, metadata !3352, metadata !DIExpression()), !dbg !3353
  store float* %dist, float** %dist.addr, align 8
  call void @llvm.dbg.declare(metadata float** %dist.addr, metadata !3354, metadata !DIExpression()), !dbg !3355
  call void @llvm.dbg.declare(metadata %struct.MVert** %vert, metadata !3356, metadata !DIExpression()), !dbg !3359
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3360
  %verts = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 9, !dbg !3361
  %1 = load %struct.MVert*, %struct.MVert** %verts, align 8, !dbg !3361
  store %struct.MVert* %1, %struct.MVert** %vert, align 8, !dbg !3359
  call void @llvm.dbg.declare(metadata i32** %faces, metadata !3362, metadata !DIExpression()), !dbg !3364
  %2 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3365
  %prim_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %2, i32 0, i32 4, !dbg !3366
  %3 = load i32*, i32** %prim_indices, align 8, !dbg !3366
  store i32* %3, i32** %faces, align 8, !dbg !3364
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3367, metadata !DIExpression()), !dbg !3368
  call void @llvm.dbg.declare(metadata i32* %totface, metadata !3369, metadata !DIExpression()), !dbg !3370
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3371
  %totprim = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %4, i32 0, i32 5, !dbg !3372
  %5 = load i32, i32* %totprim, align 8, !dbg !3372
  store i32 %5, i32* %totface, align 4, !dbg !3370
  call void @llvm.dbg.declare(metadata i8* %hit, metadata !3373, metadata !DIExpression()), !dbg !3374
  store i8 0, i8* %hit, align 1, !dbg !3374
  store i32 0, i32* %i, align 4, !dbg !3375
  br label %for.cond, !dbg !3377

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4, !dbg !3378
  %7 = load i32, i32* %totface, align 4, !dbg !3380
  %cmp = icmp slt i32 %6, %7, !dbg !3381
  br i1 %cmp, label %for.body, label %for.end, !dbg !3382

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.MFace** %f, metadata !3383, metadata !DIExpression()), !dbg !3387
  %8 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3388
  %faces1 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %8, i32 0, i32 10, !dbg !3389
  %9 = load %struct.MFace*, %struct.MFace** %faces1, align 8, !dbg !3389
  %10 = load i32*, i32** %faces, align 8, !dbg !3390
  %11 = load i32, i32* %i, align 4, !dbg !3391
  %idxprom = sext i32 %11 to i64, !dbg !3390
  %arrayidx = getelementptr inbounds i32, i32* %10, i64 %idxprom, !dbg !3390
  %12 = load i32, i32* %arrayidx, align 4, !dbg !3390
  %idx.ext = sext i32 %12 to i64, !dbg !3392
  %add.ptr = getelementptr inbounds %struct.MFace, %struct.MFace* %9, i64 %idx.ext, !dbg !3392
  store %struct.MFace* %add.ptr, %struct.MFace** %f, align 8, !dbg !3387
  call void @llvm.dbg.declare(metadata i32** %face_verts, metadata !3393, metadata !DIExpression()), !dbg !3394
  %13 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3395
  %face_vert_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %13, i32 0, i32 9, !dbg !3396
  %14 = load [4 x i32]*, [4 x i32]** %face_vert_indices, align 8, !dbg !3396
  %15 = load i32, i32* %i, align 4, !dbg !3397
  %idxprom2 = sext i32 %15 to i64, !dbg !3395
  %arrayidx3 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 %idxprom2, !dbg !3395
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx3, i64 0, i64 0, !dbg !3395
  store i32* %arraydecay, i32** %face_verts, align 8, !dbg !3394
  %16 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !3398
  %17 = load %struct.MVert*, %struct.MVert** %vert, align 8, !dbg !3400
  %call = call zeroext i8 @paint_is_face_hidden(%struct.MFace* %16, %struct.MVert* %17), !dbg !3401
  %tobool = icmp ne i8 %call, 0, !dbg !3401
  br i1 %tobool, label %if.then, label %if.end, !dbg !3402

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !3403

if.end:                                           ; preds = %for.body
  %18 = load [3 x float]*, [3 x float]** %origco.addr, align 8, !dbg !3404
  %tobool4 = icmp ne [3 x float]* %18, null, !dbg !3404
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !3406

if.then5:                                         ; preds = %if.end
  %19 = load float*, float** %ray_start.addr, align 8, !dbg !3407
  %20 = load float*, float** %ray_normal.addr, align 8, !dbg !3409
  %21 = load [3 x float]*, [3 x float]** %origco.addr, align 8, !dbg !3410
  %22 = load i32*, i32** %face_verts, align 8, !dbg !3411
  %arrayidx6 = getelementptr inbounds i32, i32* %22, i64 0, !dbg !3411
  %23 = load i32, i32* %arrayidx6, align 4, !dbg !3411
  %idxprom7 = sext i32 %23 to i64, !dbg !3410
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %21, i64 %idxprom7, !dbg !3410
  %arraydecay9 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx8, i64 0, i64 0, !dbg !3410
  %24 = load [3 x float]*, [3 x float]** %origco.addr, align 8, !dbg !3412
  %25 = load i32*, i32** %face_verts, align 8, !dbg !3413
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i64 1, !dbg !3413
  %26 = load i32, i32* %arrayidx10, align 4, !dbg !3413
  %idxprom11 = sext i32 %26 to i64, !dbg !3412
  %arrayidx12 = getelementptr inbounds [3 x float], [3 x float]* %24, i64 %idxprom11, !dbg !3412
  %arraydecay13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx12, i64 0, i64 0, !dbg !3412
  %27 = load [3 x float]*, [3 x float]** %origco.addr, align 8, !dbg !3414
  %28 = load i32*, i32** %face_verts, align 8, !dbg !3415
  %arrayidx14 = getelementptr inbounds i32, i32* %28, i64 2, !dbg !3415
  %29 = load i32, i32* %arrayidx14, align 4, !dbg !3415
  %idxprom15 = sext i32 %29 to i64, !dbg !3414
  %arrayidx16 = getelementptr inbounds [3 x float], [3 x float]* %27, i64 %idxprom15, !dbg !3414
  %arraydecay17 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx16, i64 0, i64 0, !dbg !3414
  %30 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !3416
  %v4 = getelementptr inbounds %struct.MFace, %struct.MFace* %30, i32 0, i32 3, !dbg !3417
  %31 = load i32, i32* %v4, align 4, !dbg !3417
  %tobool18 = icmp ne i32 %31, 0, !dbg !3416
  br i1 %tobool18, label %cond.true, label %cond.false, !dbg !3416

cond.true:                                        ; preds = %if.then5
  %32 = load [3 x float]*, [3 x float]** %origco.addr, align 8, !dbg !3418
  %33 = load i32*, i32** %face_verts, align 8, !dbg !3419
  %arrayidx19 = getelementptr inbounds i32, i32* %33, i64 3, !dbg !3419
  %34 = load i32, i32* %arrayidx19, align 4, !dbg !3419
  %idxprom20 = sext i32 %34 to i64, !dbg !3418
  %arrayidx21 = getelementptr inbounds [3 x float], [3 x float]* %32, i64 %idxprom20, !dbg !3418
  %arraydecay22 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx21, i64 0, i64 0, !dbg !3418
  br label %cond.end, !dbg !3416

cond.false:                                       ; preds = %if.then5
  br label %cond.end, !dbg !3416

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float* [ %arraydecay22, %cond.true ], [ null, %cond.false ], !dbg !3416
  %35 = load float*, float** %dist.addr, align 8, !dbg !3420
  %call23 = call zeroext i8 @ray_face_intersection(float* %19, float* %20, float* %arraydecay9, float* %arraydecay13, float* %arraydecay17, float* %cond, float* %35), !dbg !3421
  %conv = zext i8 %call23 to i32, !dbg !3421
  %36 = load i8, i8* %hit, align 1, !dbg !3422
  %conv24 = zext i8 %36 to i32, !dbg !3422
  %or = or i32 %conv24, %conv, !dbg !3422
  %conv25 = trunc i32 %or to i8, !dbg !3422
  store i8 %conv25, i8* %hit, align 1, !dbg !3422
  br label %if.end53, !dbg !3423

if.else:                                          ; preds = %if.end
  %37 = load float*, float** %ray_start.addr, align 8, !dbg !3424
  %38 = load float*, float** %ray_normal.addr, align 8, !dbg !3426
  %39 = load %struct.MVert*, %struct.MVert** %vert, align 8, !dbg !3427
  %40 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !3428
  %v1 = getelementptr inbounds %struct.MFace, %struct.MFace* %40, i32 0, i32 0, !dbg !3429
  %41 = load i32, i32* %v1, align 4, !dbg !3429
  %idxprom26 = zext i32 %41 to i64, !dbg !3427
  %arrayidx27 = getelementptr inbounds %struct.MVert, %struct.MVert* %39, i64 %idxprom26, !dbg !3427
  %co = getelementptr inbounds %struct.MVert, %struct.MVert* %arrayidx27, i32 0, i32 0, !dbg !3430
  %arraydecay28 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !3427
  %42 = load %struct.MVert*, %struct.MVert** %vert, align 8, !dbg !3431
  %43 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !3432
  %v2 = getelementptr inbounds %struct.MFace, %struct.MFace* %43, i32 0, i32 1, !dbg !3433
  %44 = load i32, i32* %v2, align 4, !dbg !3433
  %idxprom29 = zext i32 %44 to i64, !dbg !3431
  %arrayidx30 = getelementptr inbounds %struct.MVert, %struct.MVert* %42, i64 %idxprom29, !dbg !3431
  %co31 = getelementptr inbounds %struct.MVert, %struct.MVert* %arrayidx30, i32 0, i32 0, !dbg !3434
  %arraydecay32 = getelementptr inbounds [3 x float], [3 x float]* %co31, i64 0, i64 0, !dbg !3431
  %45 = load %struct.MVert*, %struct.MVert** %vert, align 8, !dbg !3435
  %46 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !3436
  %v3 = getelementptr inbounds %struct.MFace, %struct.MFace* %46, i32 0, i32 2, !dbg !3437
  %47 = load i32, i32* %v3, align 4, !dbg !3437
  %idxprom33 = zext i32 %47 to i64, !dbg !3435
  %arrayidx34 = getelementptr inbounds %struct.MVert, %struct.MVert* %45, i64 %idxprom33, !dbg !3435
  %co35 = getelementptr inbounds %struct.MVert, %struct.MVert* %arrayidx34, i32 0, i32 0, !dbg !3438
  %arraydecay36 = getelementptr inbounds [3 x float], [3 x float]* %co35, i64 0, i64 0, !dbg !3435
  %48 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !3439
  %v437 = getelementptr inbounds %struct.MFace, %struct.MFace* %48, i32 0, i32 3, !dbg !3440
  %49 = load i32, i32* %v437, align 4, !dbg !3440
  %tobool38 = icmp ne i32 %49, 0, !dbg !3439
  br i1 %tobool38, label %cond.true39, label %cond.false45, !dbg !3439

cond.true39:                                      ; preds = %if.else
  %50 = load %struct.MVert*, %struct.MVert** %vert, align 8, !dbg !3441
  %51 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !3442
  %v440 = getelementptr inbounds %struct.MFace, %struct.MFace* %51, i32 0, i32 3, !dbg !3443
  %52 = load i32, i32* %v440, align 4, !dbg !3443
  %idxprom41 = zext i32 %52 to i64, !dbg !3441
  %arrayidx42 = getelementptr inbounds %struct.MVert, %struct.MVert* %50, i64 %idxprom41, !dbg !3441
  %co43 = getelementptr inbounds %struct.MVert, %struct.MVert* %arrayidx42, i32 0, i32 0, !dbg !3444
  %arraydecay44 = getelementptr inbounds [3 x float], [3 x float]* %co43, i64 0, i64 0, !dbg !3441
  br label %cond.end46, !dbg !3439

cond.false45:                                     ; preds = %if.else
  br label %cond.end46, !dbg !3439

cond.end46:                                       ; preds = %cond.false45, %cond.true39
  %cond47 = phi float* [ %arraydecay44, %cond.true39 ], [ null, %cond.false45 ], !dbg !3439
  %53 = load float*, float** %dist.addr, align 8, !dbg !3445
  %call48 = call zeroext i8 @ray_face_intersection(float* %37, float* %38, float* %arraydecay28, float* %arraydecay32, float* %arraydecay36, float* %cond47, float* %53), !dbg !3446
  %conv49 = zext i8 %call48 to i32, !dbg !3446
  %54 = load i8, i8* %hit, align 1, !dbg !3447
  %conv50 = zext i8 %54 to i32, !dbg !3447
  %or51 = or i32 %conv50, %conv49, !dbg !3447
  %conv52 = trunc i32 %or51 to i8, !dbg !3447
  store i8 %conv52, i8* %hit, align 1, !dbg !3447
  br label %if.end53

if.end53:                                         ; preds = %cond.end46, %cond.end
  br label %for.inc, !dbg !3448

for.inc:                                          ; preds = %if.end53, %if.then
  %55 = load i32, i32* %i, align 4, !dbg !3449
  %inc = add nsw i32 %55, 1, !dbg !3449
  store i32 %inc, i32* %i, align 4, !dbg !3449
  br label %for.cond, !dbg !3450, !llvm.loop !3451

for.end:                                          ; preds = %for.cond
  %56 = load i8, i8* %hit, align 1, !dbg !3453
  ret i8 %56, !dbg !3454
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @pbvh_grids_node_raycast(%struct.PBVH* %bvh, %struct.PBVHNode* %node, [3 x float]* %origco, float* %ray_start, float* %ray_normal, float* %dist) #0 !dbg !3455 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  %origco.addr = alloca [3 x float]*, align 8
  %ray_start.addr = alloca float*, align 8
  %ray_normal.addr = alloca float*, align 8
  %dist.addr = alloca float*, align 8
  %totgrid = alloca i32, align 4
  %gridsize = alloca i32, align 4
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %hit = alloca i8, align 1
  %grid = alloca %struct.CCGElem*, align 8
  %gh = alloca i32*, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !3458, metadata !DIExpression()), !dbg !3459
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !3460, metadata !DIExpression()), !dbg !3461
  store [3 x float]* %origco, [3 x float]** %origco.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %origco.addr, metadata !3462, metadata !DIExpression()), !dbg !3463
  store float* %ray_start, float** %ray_start.addr, align 8
  call void @llvm.dbg.declare(metadata float** %ray_start.addr, metadata !3464, metadata !DIExpression()), !dbg !3465
  store float* %ray_normal, float** %ray_normal.addr, align 8
  call void @llvm.dbg.declare(metadata float** %ray_normal.addr, metadata !3466, metadata !DIExpression()), !dbg !3467
  store float* %dist, float** %dist.addr, align 8
  call void @llvm.dbg.declare(metadata float** %dist.addr, metadata !3468, metadata !DIExpression()), !dbg !3469
  call void @llvm.dbg.declare(metadata i32* %totgrid, metadata !3470, metadata !DIExpression()), !dbg !3471
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3472
  %totprim = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 5, !dbg !3473
  %1 = load i32, i32* %totprim, align 8, !dbg !3473
  store i32 %1, i32* %totgrid, align 4, !dbg !3471
  call void @llvm.dbg.declare(metadata i32* %gridsize, metadata !3474, metadata !DIExpression()), !dbg !3475
  %2 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3476
  %gridkey = getelementptr inbounds %struct.PBVH, %struct.PBVH* %2, i32 0, i32 12, !dbg !3477
  %grid_size = getelementptr inbounds %struct.CCGKey, %struct.CCGKey* %gridkey, i32 0, i32 2, !dbg !3478
  %3 = load i32, i32* %grid_size, align 8, !dbg !3478
  store i32 %3, i32* %gridsize, align 4, !dbg !3475
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3479, metadata !DIExpression()), !dbg !3480
  call void @llvm.dbg.declare(metadata i32* %x, metadata !3481, metadata !DIExpression()), !dbg !3482
  call void @llvm.dbg.declare(metadata i32* %y, metadata !3483, metadata !DIExpression()), !dbg !3484
  call void @llvm.dbg.declare(metadata i8* %hit, metadata !3485, metadata !DIExpression()), !dbg !3486
  store i8 0, i8* %hit, align 1, !dbg !3486
  store i32 0, i32* %i, align 4, !dbg !3487
  br label %for.cond, !dbg !3489

for.cond:                                         ; preds = %for.inc72, %entry
  %4 = load i32, i32* %i, align 4, !dbg !3490
  %5 = load i32, i32* %totgrid, align 4, !dbg !3492
  %cmp = icmp slt i32 %4, %5, !dbg !3493
  br i1 %cmp, label %for.body, label %for.end74, !dbg !3494

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.CCGElem** %grid, metadata !3495, metadata !DIExpression()), !dbg !3497
  %6 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3498
  %grids = getelementptr inbounds %struct.PBVH, %struct.PBVH* %6, i32 0, i32 13, !dbg !3499
  %7 = load %struct.CCGElem**, %struct.CCGElem*** %grids, align 8, !dbg !3499
  %8 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3500
  %prim_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %8, i32 0, i32 4, !dbg !3501
  %9 = load i32*, i32** %prim_indices, align 8, !dbg !3501
  %10 = load i32, i32* %i, align 4, !dbg !3502
  %idxprom = sext i32 %10 to i64, !dbg !3500
  %arrayidx = getelementptr inbounds i32, i32* %9, i64 %idxprom, !dbg !3500
  %11 = load i32, i32* %arrayidx, align 4, !dbg !3500
  %idxprom1 = sext i32 %11 to i64, !dbg !3498
  %arrayidx2 = getelementptr inbounds %struct.CCGElem*, %struct.CCGElem** %7, i64 %idxprom1, !dbg !3498
  %12 = load %struct.CCGElem*, %struct.CCGElem** %arrayidx2, align 8, !dbg !3498
  store %struct.CCGElem* %12, %struct.CCGElem** %grid, align 8, !dbg !3497
  call void @llvm.dbg.declare(metadata i32** %gh, metadata !3503, metadata !DIExpression()), !dbg !3504
  %13 = load %struct.CCGElem*, %struct.CCGElem** %grid, align 8, !dbg !3505
  %tobool = icmp ne %struct.CCGElem* %13, null, !dbg !3505
  br i1 %tobool, label %if.end, label %if.then, !dbg !3507

if.then:                                          ; preds = %for.body
  br label %for.inc72, !dbg !3508

if.end:                                           ; preds = %for.body
  %14 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3509
  %grid_hidden = getelementptr inbounds %struct.PBVH, %struct.PBVH* %14, i32 0, i32 18, !dbg !3510
  %15 = load i32**, i32*** %grid_hidden, align 8, !dbg !3510
  %16 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3511
  %prim_indices3 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %16, i32 0, i32 4, !dbg !3512
  %17 = load i32*, i32** %prim_indices3, align 8, !dbg !3512
  %18 = load i32, i32* %i, align 4, !dbg !3513
  %idxprom4 = sext i32 %18 to i64, !dbg !3511
  %arrayidx5 = getelementptr inbounds i32, i32* %17, i64 %idxprom4, !dbg !3511
  %19 = load i32, i32* %arrayidx5, align 4, !dbg !3511
  %idxprom6 = sext i32 %19 to i64, !dbg !3509
  %arrayidx7 = getelementptr inbounds i32*, i32** %15, i64 %idxprom6, !dbg !3509
  %20 = load i32*, i32** %arrayidx7, align 8, !dbg !3509
  store i32* %20, i32** %gh, align 8, !dbg !3514
  store i32 0, i32* %y, align 4, !dbg !3515
  br label %for.cond8, !dbg !3517

for.cond8:                                        ; preds = %for.inc65, %if.end
  %21 = load i32, i32* %y, align 4, !dbg !3518
  %22 = load i32, i32* %gridsize, align 4, !dbg !3520
  %sub = sub nsw i32 %22, 1, !dbg !3521
  %cmp9 = icmp slt i32 %21, %sub, !dbg !3522
  br i1 %cmp9, label %for.body10, label %for.end67, !dbg !3523

for.body10:                                       ; preds = %for.cond8
  store i32 0, i32* %x, align 4, !dbg !3524
  br label %for.cond11, !dbg !3527

for.cond11:                                       ; preds = %for.inc, %for.body10
  %23 = load i32, i32* %x, align 4, !dbg !3528
  %24 = load i32, i32* %gridsize, align 4, !dbg !3530
  %sub12 = sub nsw i32 %24, 1, !dbg !3531
  %cmp13 = icmp slt i32 %23, %sub12, !dbg !3532
  br i1 %cmp13, label %for.body14, label %for.end, !dbg !3533

for.body14:                                       ; preds = %for.cond11
  %25 = load i32*, i32** %gh, align 8, !dbg !3534
  %tobool15 = icmp ne i32* %25, null, !dbg !3534
  br i1 %tobool15, label %if.then16, label %if.end20, !dbg !3537

if.then16:                                        ; preds = %for.body14
  %26 = load i32*, i32** %gh, align 8, !dbg !3538
  %27 = load i32, i32* %gridsize, align 4, !dbg !3541
  %28 = load i32, i32* %x, align 4, !dbg !3542
  %29 = load i32, i32* %y, align 4, !dbg !3543
  %call = call zeroext i8 @paint_is_grid_face_hidden(i32* %26, i32 %27, i32 %28, i32 %29), !dbg !3544
  %tobool17 = icmp ne i8 %call, 0, !dbg !3544
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !3545

if.then18:                                        ; preds = %if.then16
  br label %for.inc, !dbg !3546

if.end19:                                         ; preds = %if.then16
  br label %if.end20, !dbg !3547

if.end20:                                         ; preds = %if.end19, %for.body14
  %30 = load [3 x float]*, [3 x float]** %origco.addr, align 8, !dbg !3548
  %tobool21 = icmp ne [3 x float]* %30, null, !dbg !3548
  br i1 %tobool21, label %if.then22, label %if.else, !dbg !3550

if.then22:                                        ; preds = %if.end20
  %31 = load float*, float** %ray_start.addr, align 8, !dbg !3551
  %32 = load float*, float** %ray_normal.addr, align 8, !dbg !3553
  %33 = load [3 x float]*, [3 x float]** %origco.addr, align 8, !dbg !3554
  %34 = load i32, i32* %y, align 4, !dbg !3555
  %35 = load i32, i32* %gridsize, align 4, !dbg !3556
  %mul = mul nsw i32 %34, %35, !dbg !3557
  %36 = load i32, i32* %x, align 4, !dbg !3558
  %add = add nsw i32 %mul, %36, !dbg !3559
  %idxprom23 = sext i32 %add to i64, !dbg !3554
  %arrayidx24 = getelementptr inbounds [3 x float], [3 x float]* %33, i64 %idxprom23, !dbg !3554
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %arrayidx24, i64 0, i64 0, !dbg !3554
  %37 = load [3 x float]*, [3 x float]** %origco.addr, align 8, !dbg !3560
  %38 = load i32, i32* %y, align 4, !dbg !3561
  %39 = load i32, i32* %gridsize, align 4, !dbg !3562
  %mul25 = mul nsw i32 %38, %39, !dbg !3563
  %40 = load i32, i32* %x, align 4, !dbg !3564
  %add26 = add nsw i32 %mul25, %40, !dbg !3565
  %add27 = add nsw i32 %add26, 1, !dbg !3566
  %idxprom28 = sext i32 %add27 to i64, !dbg !3560
  %arrayidx29 = getelementptr inbounds [3 x float], [3 x float]* %37, i64 %idxprom28, !dbg !3560
  %arraydecay30 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx29, i64 0, i64 0, !dbg !3560
  %41 = load [3 x float]*, [3 x float]** %origco.addr, align 8, !dbg !3567
  %42 = load i32, i32* %y, align 4, !dbg !3568
  %add31 = add nsw i32 %42, 1, !dbg !3569
  %43 = load i32, i32* %gridsize, align 4, !dbg !3570
  %mul32 = mul nsw i32 %add31, %43, !dbg !3571
  %44 = load i32, i32* %x, align 4, !dbg !3572
  %add33 = add nsw i32 %mul32, %44, !dbg !3573
  %add34 = add nsw i32 %add33, 1, !dbg !3574
  %idxprom35 = sext i32 %add34 to i64, !dbg !3567
  %arrayidx36 = getelementptr inbounds [3 x float], [3 x float]* %41, i64 %idxprom35, !dbg !3567
  %arraydecay37 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx36, i64 0, i64 0, !dbg !3567
  %45 = load [3 x float]*, [3 x float]** %origco.addr, align 8, !dbg !3575
  %46 = load i32, i32* %y, align 4, !dbg !3576
  %add38 = add nsw i32 %46, 1, !dbg !3577
  %47 = load i32, i32* %gridsize, align 4, !dbg !3578
  %mul39 = mul nsw i32 %add38, %47, !dbg !3579
  %48 = load i32, i32* %x, align 4, !dbg !3580
  %add40 = add nsw i32 %mul39, %48, !dbg !3581
  %idxprom41 = sext i32 %add40 to i64, !dbg !3575
  %arrayidx42 = getelementptr inbounds [3 x float], [3 x float]* %45, i64 %idxprom41, !dbg !3575
  %arraydecay43 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx42, i64 0, i64 0, !dbg !3575
  %49 = load float*, float** %dist.addr, align 8, !dbg !3582
  %call44 = call zeroext i8 @ray_face_intersection(float* %31, float* %32, float* %arraydecay, float* %arraydecay30, float* %arraydecay37, float* %arraydecay43, float* %49), !dbg !3583
  %conv = zext i8 %call44 to i32, !dbg !3583
  %50 = load i8, i8* %hit, align 1, !dbg !3584
  %conv45 = zext i8 %50 to i32, !dbg !3584
  %or = or i32 %conv45, %conv, !dbg !3584
  %conv46 = trunc i32 %or to i8, !dbg !3584
  store i8 %conv46, i8* %hit, align 1, !dbg !3584
  br label %if.end64, !dbg !3585

if.else:                                          ; preds = %if.end20
  %51 = load float*, float** %ray_start.addr, align 8, !dbg !3586
  %52 = load float*, float** %ray_normal.addr, align 8, !dbg !3588
  %53 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3589
  %gridkey47 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %53, i32 0, i32 12, !dbg !3590
  %54 = load %struct.CCGElem*, %struct.CCGElem** %grid, align 8, !dbg !3591
  %55 = load i32, i32* %x, align 4, !dbg !3592
  %56 = load i32, i32* %y, align 4, !dbg !3593
  %call48 = call float* @CCG_grid_elem_co(%struct.CCGKey* %gridkey47, %struct.CCGElem* %54, i32 %55, i32 %56), !dbg !3594
  %57 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3595
  %gridkey49 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %57, i32 0, i32 12, !dbg !3596
  %58 = load %struct.CCGElem*, %struct.CCGElem** %grid, align 8, !dbg !3597
  %59 = load i32, i32* %x, align 4, !dbg !3598
  %add50 = add nsw i32 %59, 1, !dbg !3599
  %60 = load i32, i32* %y, align 4, !dbg !3600
  %call51 = call float* @CCG_grid_elem_co(%struct.CCGKey* %gridkey49, %struct.CCGElem* %58, i32 %add50, i32 %60), !dbg !3601
  %61 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3602
  %gridkey52 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %61, i32 0, i32 12, !dbg !3603
  %62 = load %struct.CCGElem*, %struct.CCGElem** %grid, align 8, !dbg !3604
  %63 = load i32, i32* %x, align 4, !dbg !3605
  %add53 = add nsw i32 %63, 1, !dbg !3606
  %64 = load i32, i32* %y, align 4, !dbg !3607
  %add54 = add nsw i32 %64, 1, !dbg !3608
  %call55 = call float* @CCG_grid_elem_co(%struct.CCGKey* %gridkey52, %struct.CCGElem* %62, i32 %add53, i32 %add54), !dbg !3609
  %65 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3610
  %gridkey56 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %65, i32 0, i32 12, !dbg !3611
  %66 = load %struct.CCGElem*, %struct.CCGElem** %grid, align 8, !dbg !3612
  %67 = load i32, i32* %x, align 4, !dbg !3613
  %68 = load i32, i32* %y, align 4, !dbg !3614
  %add57 = add nsw i32 %68, 1, !dbg !3615
  %call58 = call float* @CCG_grid_elem_co(%struct.CCGKey* %gridkey56, %struct.CCGElem* %66, i32 %67, i32 %add57), !dbg !3616
  %69 = load float*, float** %dist.addr, align 8, !dbg !3617
  %call59 = call zeroext i8 @ray_face_intersection(float* %51, float* %52, float* %call48, float* %call51, float* %call55, float* %call58, float* %69), !dbg !3618
  %conv60 = zext i8 %call59 to i32, !dbg !3618
  %70 = load i8, i8* %hit, align 1, !dbg !3619
  %conv61 = zext i8 %70 to i32, !dbg !3619
  %or62 = or i32 %conv61, %conv60, !dbg !3619
  %conv63 = trunc i32 %or62 to i8, !dbg !3619
  store i8 %conv63, i8* %hit, align 1, !dbg !3619
  br label %if.end64

if.end64:                                         ; preds = %if.else, %if.then22
  br label %for.inc, !dbg !3620

for.inc:                                          ; preds = %if.end64, %if.then18
  %71 = load i32, i32* %x, align 4, !dbg !3621
  %inc = add nsw i32 %71, 1, !dbg !3621
  store i32 %inc, i32* %x, align 4, !dbg !3621
  br label %for.cond11, !dbg !3622, !llvm.loop !3623

for.end:                                          ; preds = %for.cond11
  br label %for.inc65, !dbg !3625

for.inc65:                                        ; preds = %for.end
  %72 = load i32, i32* %y, align 4, !dbg !3626
  %inc66 = add nsw i32 %72, 1, !dbg !3626
  store i32 %inc66, i32* %y, align 4, !dbg !3626
  br label %for.cond8, !dbg !3627, !llvm.loop !3628

for.end67:                                        ; preds = %for.cond8
  %73 = load [3 x float]*, [3 x float]** %origco.addr, align 8, !dbg !3630
  %tobool68 = icmp ne [3 x float]* %73, null, !dbg !3630
  br i1 %tobool68, label %if.then69, label %if.end71, !dbg !3632

if.then69:                                        ; preds = %for.end67
  %74 = load i32, i32* %gridsize, align 4, !dbg !3633
  %75 = load i32, i32* %gridsize, align 4, !dbg !3634
  %mul70 = mul nsw i32 %74, %75, !dbg !3635
  %76 = load [3 x float]*, [3 x float]** %origco.addr, align 8, !dbg !3636
  %idx.ext = sext i32 %mul70 to i64, !dbg !3636
  %add.ptr = getelementptr inbounds [3 x float], [3 x float]* %76, i64 %idx.ext, !dbg !3636
  store [3 x float]* %add.ptr, [3 x float]** %origco.addr, align 8, !dbg !3636
  br label %if.end71, !dbg !3637

if.end71:                                         ; preds = %if.then69, %for.end67
  br label %for.inc72, !dbg !3638

for.inc72:                                        ; preds = %if.end71, %if.then
  %77 = load i32, i32* %i, align 4, !dbg !3639
  %inc73 = add nsw i32 %77, 1, !dbg !3639
  store i32 %inc73, i32* %i, align 4, !dbg !3639
  br label %for.cond, !dbg !3640, !llvm.loop !3641

for.end74:                                        ; preds = %for.cond
  %78 = load i8, i8* %hit, align 1, !dbg !3643
  ret i8 %78, !dbg !3644
}

declare dso_local zeroext i8 @pbvh_bmesh_node_raycast(%struct.PBVHNode*, float*, float*, float*, i8 zeroext) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_raycast_project_ray_root(%struct.PBVH* %bvh, i8 zeroext %original, float* %ray_start, float* %ray_end, float* %ray_normal) #0 !dbg !3645 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %original.addr = alloca i8, align 1
  %ray_start.addr = alloca float*, align 8
  %ray_end.addr = alloca float*, align 8
  %ray_normal.addr = alloca float*, align 8
  %rootmin_start = alloca float, align 4
  %rootmin_end = alloca float, align 4
  %bb_min_root = alloca [3 x float], align 4
  %bb_max_root = alloca [3 x float], align 4
  %bb_center = alloca [3 x float], align 4
  %bb_diff = alloca [3 x float], align 4
  %ray = alloca %struct.IsectRayAABBData, align 4
  %ray_normal_inv = alloca [3 x float], align 4
  %offset = alloca float, align 4
  %offset_vec = alloca [3 x float], align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !3648, metadata !DIExpression()), !dbg !3649
  store i8 %original, i8* %original.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %original.addr, metadata !3650, metadata !DIExpression()), !dbg !3651
  store float* %ray_start, float** %ray_start.addr, align 8
  call void @llvm.dbg.declare(metadata float** %ray_start.addr, metadata !3652, metadata !DIExpression()), !dbg !3653
  store float* %ray_end, float** %ray_end.addr, align 8
  call void @llvm.dbg.declare(metadata float** %ray_end.addr, metadata !3654, metadata !DIExpression()), !dbg !3655
  store float* %ray_normal, float** %ray_normal.addr, align 8
  call void @llvm.dbg.declare(metadata float** %ray_normal.addr, metadata !3656, metadata !DIExpression()), !dbg !3657
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3658
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 2, !dbg !3660
  %1 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !3660
  %tobool = icmp ne %struct.PBVHNode* %1, null, !dbg !3658
  br i1 %tobool, label %if.then, label %if.end36, !dbg !3661

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata float* %rootmin_start, metadata !3662, metadata !DIExpression()), !dbg !3664
  call void @llvm.dbg.declare(metadata float* %rootmin_end, metadata !3665, metadata !DIExpression()), !dbg !3666
  call void @llvm.dbg.declare(metadata [3 x float]* %bb_min_root, metadata !3667, metadata !DIExpression()), !dbg !3668
  call void @llvm.dbg.declare(metadata [3 x float]* %bb_max_root, metadata !3669, metadata !DIExpression()), !dbg !3670
  call void @llvm.dbg.declare(metadata [3 x float]* %bb_center, metadata !3671, metadata !DIExpression()), !dbg !3672
  call void @llvm.dbg.declare(metadata [3 x float]* %bb_diff, metadata !3673, metadata !DIExpression()), !dbg !3674
  call void @llvm.dbg.declare(metadata %struct.IsectRayAABBData* %ray, metadata !3675, metadata !DIExpression()), !dbg !3676
  call void @llvm.dbg.declare(metadata [3 x float]* %ray_normal_inv, metadata !3677, metadata !DIExpression()), !dbg !3678
  call void @llvm.dbg.declare(metadata float* %offset, metadata !3679, metadata !DIExpression()), !dbg !3680
  store float 0x3FF00418A0000000, float* %offset, align 4, !dbg !3680
  call void @llvm.dbg.declare(metadata [3 x float]* %offset_vec, metadata !3681, metadata !DIExpression()), !dbg !3682
  %2 = bitcast [3 x float]* %offset_vec to i8*, !dbg !3682
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2, i8* align 4 bitcast ([3 x float]* @__const.BKE_pbvh_raycast_project_ray_root.offset_vec to i8*), i64 12, i1 false), !dbg !3682
  %3 = load i8, i8* %original.addr, align 1, !dbg !3683
  %tobool1 = icmp ne i8 %3, 0, !dbg !3683
  br i1 %tobool1, label %if.then2, label %if.else, !dbg !3685

if.then2:                                         ; preds = %if.then
  %4 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3686
  %nodes3 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %4, i32 0, i32 2, !dbg !3687
  %5 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes3, align 8, !dbg !3687
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %bb_min_root, i64 0, i64 0, !dbg !3688
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %bb_max_root, i64 0, i64 0, !dbg !3689
  call void @BKE_pbvh_node_get_original_BB(%struct.PBVHNode* %5, float* %arraydecay, float* %arraydecay4), !dbg !3690
  br label %if.end, !dbg !3690

if.else:                                          ; preds = %if.then
  %6 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !3691
  %nodes5 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %6, i32 0, i32 2, !dbg !3692
  %7 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes5, align 8, !dbg !3692
  %arraydecay6 = getelementptr inbounds [3 x float], [3 x float]* %bb_min_root, i64 0, i64 0, !dbg !3693
  %arraydecay7 = getelementptr inbounds [3 x float], [3 x float]* %bb_max_root, i64 0, i64 0, !dbg !3694
  call void @BKE_pbvh_node_get_BB(%struct.PBVHNode* %7, float* %arraydecay6, float* %arraydecay7), !dbg !3695
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  %arraydecay8 = getelementptr inbounds [3 x float], [3 x float]* %bb_center, i64 0, i64 0, !dbg !3696
  %arraydecay9 = getelementptr inbounds [3 x float], [3 x float]* %bb_max_root, i64 0, i64 0, !dbg !3697
  %arraydecay10 = getelementptr inbounds [3 x float], [3 x float]* %bb_min_root, i64 0, i64 0, !dbg !3698
  call void @mid_v3_v3v3(float* %arraydecay8, float* %arraydecay9, float* %arraydecay10), !dbg !3699
  %arraydecay11 = getelementptr inbounds [3 x float], [3 x float]* %bb_diff, i64 0, i64 0, !dbg !3700
  %arraydecay12 = getelementptr inbounds [3 x float], [3 x float]* %bb_max_root, i64 0, i64 0, !dbg !3701
  %arraydecay13 = getelementptr inbounds [3 x float], [3 x float]* %bb_center, i64 0, i64 0, !dbg !3702
  call void @sub_v3_v3v3(float* %arraydecay11, float* %arraydecay12, float* %arraydecay13), !dbg !3703
  %arraydecay14 = getelementptr inbounds [3 x float], [3 x float]* %bb_diff, i64 0, i64 0, !dbg !3704
  %arraydecay15 = getelementptr inbounds [3 x float], [3 x float]* %offset_vec, i64 0, i64 0, !dbg !3705
  call void @add_v3_v3(float* %arraydecay14, float* %arraydecay15), !dbg !3706
  %arraydecay16 = getelementptr inbounds [3 x float], [3 x float]* %bb_max_root, i64 0, i64 0, !dbg !3707
  %arraydecay17 = getelementptr inbounds [3 x float], [3 x float]* %bb_center, i64 0, i64 0, !dbg !3708
  %arraydecay18 = getelementptr inbounds [3 x float], [3 x float]* %bb_diff, i64 0, i64 0, !dbg !3709
  %8 = load float, float* %offset, align 4, !dbg !3710
  call void @madd_v3_v3v3fl(float* %arraydecay16, float* %arraydecay17, float* %arraydecay18, float %8), !dbg !3711
  %arraydecay19 = getelementptr inbounds [3 x float], [3 x float]* %bb_min_root, i64 0, i64 0, !dbg !3712
  %arraydecay20 = getelementptr inbounds [3 x float], [3 x float]* %bb_center, i64 0, i64 0, !dbg !3713
  %arraydecay21 = getelementptr inbounds [3 x float], [3 x float]* %bb_diff, i64 0, i64 0, !dbg !3714
  %9 = load float, float* %offset, align 4, !dbg !3715
  %fneg = fneg float %9, !dbg !3716
  call void @madd_v3_v3v3fl(float* %arraydecay19, float* %arraydecay20, float* %arraydecay21, float %fneg), !dbg !3717
  %10 = load float*, float** %ray_start.addr, align 8, !dbg !3718
  %11 = load float*, float** %ray_normal.addr, align 8, !dbg !3719
  call void @isect_ray_aabb_initialize(%struct.IsectRayAABBData* %ray, float* %10, float* %11), !dbg !3720
  %arraydecay22 = getelementptr inbounds [3 x float], [3 x float]* %bb_min_root, i64 0, i64 0, !dbg !3721
  %arraydecay23 = getelementptr inbounds [3 x float], [3 x float]* %bb_max_root, i64 0, i64 0, !dbg !3723
  %call = call zeroext i8 @isect_ray_aabb(%struct.IsectRayAABBData* %ray, float* %arraydecay22, float* %arraydecay23, float* %rootmin_start), !dbg !3724
  %tobool24 = icmp ne i8 %call, 0, !dbg !3724
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !3725

if.then25:                                        ; preds = %if.end
  br label %if.end36, !dbg !3726

if.end26:                                         ; preds = %if.end
  %arraydecay27 = getelementptr inbounds [3 x float], [3 x float]* %ray_normal_inv, i64 0, i64 0, !dbg !3727
  %12 = load float*, float** %ray_normal.addr, align 8, !dbg !3728
  call void @mul_v3_v3fl(float* %arraydecay27, float* %12, float -1.000000e+00), !dbg !3729
  %13 = load float*, float** %ray_end.addr, align 8, !dbg !3730
  %arraydecay28 = getelementptr inbounds [3 x float], [3 x float]* %ray_normal_inv, i64 0, i64 0, !dbg !3731
  call void @isect_ray_aabb_initialize(%struct.IsectRayAABBData* %ray, float* %13, float* %arraydecay28), !dbg !3732
  %arraydecay29 = getelementptr inbounds [3 x float], [3 x float]* %bb_min_root, i64 0, i64 0, !dbg !3733
  %arraydecay30 = getelementptr inbounds [3 x float], [3 x float]* %bb_max_root, i64 0, i64 0, !dbg !3735
  %call31 = call zeroext i8 @isect_ray_aabb(%struct.IsectRayAABBData* %ray, float* %arraydecay29, float* %arraydecay30, float* %rootmin_end), !dbg !3736
  %tobool32 = icmp ne i8 %call31, 0, !dbg !3736
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !3737

if.then33:                                        ; preds = %if.end26
  br label %if.end36, !dbg !3738

if.end34:                                         ; preds = %if.end26
  %14 = load float*, float** %ray_start.addr, align 8, !dbg !3739
  %15 = load float*, float** %ray_start.addr, align 8, !dbg !3740
  %16 = load float*, float** %ray_normal.addr, align 8, !dbg !3741
  %17 = load float, float* %rootmin_start, align 4, !dbg !3742
  call void @madd_v3_v3v3fl(float* %14, float* %15, float* %16, float %17), !dbg !3743
  %18 = load float*, float** %ray_end.addr, align 8, !dbg !3744
  %19 = load float*, float** %ray_end.addr, align 8, !dbg !3745
  %arraydecay35 = getelementptr inbounds [3 x float], [3 x float]* %ray_normal_inv, i64 0, i64 0, !dbg !3746
  %20 = load float, float* %rootmin_end, align 4, !dbg !3747
  call void @madd_v3_v3v3fl(float* %18, float* %19, float* %arraydecay35, float %20), !dbg !3748
  br label %if.end36, !dbg !3749

if.end36:                                         ; preds = %if.then25, %if.then33, %if.end34, %entry
  ret void, !dbg !3750
}

declare dso_local void @mid_v3_v3v3(float*, float*, float*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @sub_v3_v3v3(float* %r, float* %a, float* %b) #0 !dbg !3751 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !3754, metadata !DIExpression()), !dbg !3755
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !3756, metadata !DIExpression()), !dbg !3757
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !3758, metadata !DIExpression()), !dbg !3759
  %0 = load float*, float** %a.addr, align 8, !dbg !3760
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !3760
  %1 = load float, float* %arrayidx, align 4, !dbg !3760
  %2 = load float*, float** %b.addr, align 8, !dbg !3761
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !3761
  %3 = load float, float* %arrayidx1, align 4, !dbg !3761
  %sub = fsub float %1, %3, !dbg !3762
  %4 = load float*, float** %r.addr, align 8, !dbg !3763
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 0, !dbg !3763
  store float %sub, float* %arrayidx2, align 4, !dbg !3764
  %5 = load float*, float** %a.addr, align 8, !dbg !3765
  %arrayidx3 = getelementptr inbounds float, float* %5, i64 1, !dbg !3765
  %6 = load float, float* %arrayidx3, align 4, !dbg !3765
  %7 = load float*, float** %b.addr, align 8, !dbg !3766
  %arrayidx4 = getelementptr inbounds float, float* %7, i64 1, !dbg !3766
  %8 = load float, float* %arrayidx4, align 4, !dbg !3766
  %sub5 = fsub float %6, %8, !dbg !3767
  %9 = load float*, float** %r.addr, align 8, !dbg !3768
  %arrayidx6 = getelementptr inbounds float, float* %9, i64 1, !dbg !3768
  store float %sub5, float* %arrayidx6, align 4, !dbg !3769
  %10 = load float*, float** %a.addr, align 8, !dbg !3770
  %arrayidx7 = getelementptr inbounds float, float* %10, i64 2, !dbg !3770
  %11 = load float, float* %arrayidx7, align 4, !dbg !3770
  %12 = load float*, float** %b.addr, align 8, !dbg !3771
  %arrayidx8 = getelementptr inbounds float, float* %12, i64 2, !dbg !3771
  %13 = load float, float* %arrayidx8, align 4, !dbg !3771
  %sub9 = fsub float %11, %13, !dbg !3772
  %14 = load float*, float** %r.addr, align 8, !dbg !3773
  %arrayidx10 = getelementptr inbounds float, float* %14, i64 2, !dbg !3773
  store float %sub9, float* %arrayidx10, align 4, !dbg !3774
  ret void, !dbg !3775
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_v3_v3(float* %r, float* %a) #0 !dbg !3776 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !3777, metadata !DIExpression()), !dbg !3778
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !3779, metadata !DIExpression()), !dbg !3780
  %0 = load float*, float** %a.addr, align 8, !dbg !3781
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !3781
  %1 = load float, float* %arrayidx, align 4, !dbg !3781
  %2 = load float*, float** %r.addr, align 8, !dbg !3782
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !3782
  %3 = load float, float* %arrayidx1, align 4, !dbg !3783
  %add = fadd float %3, %1, !dbg !3783
  store float %add, float* %arrayidx1, align 4, !dbg !3783
  %4 = load float*, float** %a.addr, align 8, !dbg !3784
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !3784
  %5 = load float, float* %arrayidx2, align 4, !dbg !3784
  %6 = load float*, float** %r.addr, align 8, !dbg !3785
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !3785
  %7 = load float, float* %arrayidx3, align 4, !dbg !3786
  %add4 = fadd float %7, %5, !dbg !3786
  store float %add4, float* %arrayidx3, align 4, !dbg !3786
  %8 = load float*, float** %a.addr, align 8, !dbg !3787
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !3787
  %9 = load float, float* %arrayidx5, align 4, !dbg !3787
  %10 = load float*, float** %r.addr, align 8, !dbg !3788
  %arrayidx6 = getelementptr inbounds float, float* %10, i64 2, !dbg !3788
  %11 = load float, float* %arrayidx6, align 4, !dbg !3789
  %add7 = fadd float %11, %9, !dbg !3789
  store float %add7, float* %arrayidx6, align 4, !dbg !3789
  ret void, !dbg !3790
}

; Function Attrs: noinline nounwind uwtable
define internal void @madd_v3_v3v3fl(float* %r, float* %a, float* %b, float %f) #0 !dbg !3791 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  %f.addr = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !3794, metadata !DIExpression()), !dbg !3795
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !3796, metadata !DIExpression()), !dbg !3797
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !3798, metadata !DIExpression()), !dbg !3799
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !3800, metadata !DIExpression()), !dbg !3801
  %0 = load float*, float** %a.addr, align 8, !dbg !3802
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !3802
  %1 = load float, float* %arrayidx, align 4, !dbg !3802
  %2 = load float*, float** %b.addr, align 8, !dbg !3803
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !3803
  %3 = load float, float* %arrayidx1, align 4, !dbg !3803
  %4 = load float, float* %f.addr, align 4, !dbg !3804
  %mul = fmul float %3, %4, !dbg !3805
  %add = fadd float %1, %mul, !dbg !3806
  %5 = load float*, float** %r.addr, align 8, !dbg !3807
  %arrayidx2 = getelementptr inbounds float, float* %5, i64 0, !dbg !3807
  store float %add, float* %arrayidx2, align 4, !dbg !3808
  %6 = load float*, float** %a.addr, align 8, !dbg !3809
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !3809
  %7 = load float, float* %arrayidx3, align 4, !dbg !3809
  %8 = load float*, float** %b.addr, align 8, !dbg !3810
  %arrayidx4 = getelementptr inbounds float, float* %8, i64 1, !dbg !3810
  %9 = load float, float* %arrayidx4, align 4, !dbg !3810
  %10 = load float, float* %f.addr, align 4, !dbg !3811
  %mul5 = fmul float %9, %10, !dbg !3812
  %add6 = fadd float %7, %mul5, !dbg !3813
  %11 = load float*, float** %r.addr, align 8, !dbg !3814
  %arrayidx7 = getelementptr inbounds float, float* %11, i64 1, !dbg !3814
  store float %add6, float* %arrayidx7, align 4, !dbg !3815
  %12 = load float*, float** %a.addr, align 8, !dbg !3816
  %arrayidx8 = getelementptr inbounds float, float* %12, i64 2, !dbg !3816
  %13 = load float, float* %arrayidx8, align 4, !dbg !3816
  %14 = load float*, float** %b.addr, align 8, !dbg !3817
  %arrayidx9 = getelementptr inbounds float, float* %14, i64 2, !dbg !3817
  %15 = load float, float* %arrayidx9, align 4, !dbg !3817
  %16 = load float, float* %f.addr, align 4, !dbg !3818
  %mul10 = fmul float %15, %16, !dbg !3819
  %add11 = fadd float %13, %mul10, !dbg !3820
  %17 = load float*, float** %r.addr, align 8, !dbg !3821
  %arrayidx12 = getelementptr inbounds float, float* %17, i64 2, !dbg !3821
  store float %add11, float* %arrayidx12, align 4, !dbg !3822
  ret void, !dbg !3823
}

declare dso_local zeroext i8 @isect_ray_aabb(%struct.IsectRayAABBData*, float*, float*, float*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @mul_v3_v3fl(float* %r, float* %a, float %f) #0 !dbg !3824 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %f.addr = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !3827, metadata !DIExpression()), !dbg !3828
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !3829, metadata !DIExpression()), !dbg !3830
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !3831, metadata !DIExpression()), !dbg !3832
  %0 = load float*, float** %a.addr, align 8, !dbg !3833
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !3833
  %1 = load float, float* %arrayidx, align 4, !dbg !3833
  %2 = load float, float* %f.addr, align 4, !dbg !3834
  %mul = fmul float %1, %2, !dbg !3835
  %3 = load float*, float** %r.addr, align 8, !dbg !3836
  %arrayidx1 = getelementptr inbounds float, float* %3, i64 0, !dbg !3836
  store float %mul, float* %arrayidx1, align 4, !dbg !3837
  %4 = load float*, float** %a.addr, align 8, !dbg !3838
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !3838
  %5 = load float, float* %arrayidx2, align 4, !dbg !3838
  %6 = load float, float* %f.addr, align 4, !dbg !3839
  %mul3 = fmul float %5, %6, !dbg !3840
  %7 = load float*, float** %r.addr, align 8, !dbg !3841
  %arrayidx4 = getelementptr inbounds float, float* %7, i64 1, !dbg !3841
  store float %mul3, float* %arrayidx4, align 4, !dbg !3842
  %8 = load float*, float** %a.addr, align 8, !dbg !3843
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !3843
  %9 = load float, float* %arrayidx5, align 4, !dbg !3843
  %10 = load float, float* %f.addr, align 4, !dbg !3844
  %mul6 = fmul float %9, %10, !dbg !3845
  %11 = load float*, float** %r.addr, align 8, !dbg !3846
  %arrayidx7 = getelementptr inbounds float, float* %11, i64 2, !dbg !3846
  store float %mul6, float* %arrayidx7, align 4, !dbg !3847
  ret void, !dbg !3848
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_node_draw(%struct.PBVHNode* %node, i8* %data_v) #0 !dbg !3849 {
entry:
  %node.addr = alloca %struct.PBVHNode*, align 8
  %data_v.addr = alloca i8*, align 8
  %data = alloca %struct.PBVHNodeDrawData*, align 8
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !3850, metadata !DIExpression()), !dbg !3851
  store i8* %data_v, i8** %data_v.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data_v.addr, metadata !3852, metadata !DIExpression()), !dbg !3853
  call void @llvm.dbg.declare(metadata %struct.PBVHNodeDrawData** %data, metadata !3854, metadata !DIExpression()), !dbg !3865
  %0 = load i8*, i8** %data_v.addr, align 8, !dbg !3866
  %1 = bitcast i8* %0 to %struct.PBVHNodeDrawData*, !dbg !3866
  store %struct.PBVHNodeDrawData* %1, %struct.PBVHNodeDrawData** %data, align 8, !dbg !3865
  %2 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3867
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %2, i32 0, i32 10, !dbg !3869
  %bf.load = load i16, i16* %flag, align 8, !dbg !3869
  %bf.cast = zext i16 %bf.load to i32, !dbg !3869
  %and = and i32 %bf.cast, 128, !dbg !3870
  %tobool = icmp ne i32 %and, 0, !dbg !3870
  br i1 %tobool, label %if.end, label %if.then, !dbg !3871

if.then:                                          ; preds = %entry
  %3 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3872
  %draw_buffers = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %3, i32 0, i32 0, !dbg !3874
  %4 = load %struct.GPU_PBVH_Buffers*, %struct.GPU_PBVH_Buffers** %draw_buffers, align 8, !dbg !3874
  %5 = load %struct.PBVHNodeDrawData*, %struct.PBVHNodeDrawData** %data, align 8, !dbg !3875
  %setMaterial = getelementptr inbounds %struct.PBVHNodeDrawData, %struct.PBVHNodeDrawData* %5, i32 0, i32 0, !dbg !3876
  %6 = load i32 (i32, i8*)*, i32 (i32, i8*)** %setMaterial, align 8, !dbg !3876
  %7 = load %struct.PBVHNodeDrawData*, %struct.PBVHNodeDrawData** %data, align 8, !dbg !3877
  %wireframe = getelementptr inbounds %struct.PBVHNodeDrawData, %struct.PBVHNodeDrawData* %7, i32 0, i32 1, !dbg !3878
  %8 = load i8, i8* %wireframe, align 8, !dbg !3878
  call void @GPU_draw_pbvh_buffers(%struct.GPU_PBVH_Buffers* %4, i32 (i32, i8*)* %6, i8 zeroext %8), !dbg !3879
  br label %if.end, !dbg !3880

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3881
}

declare dso_local void @GPU_draw_pbvh_buffers(%struct.GPU_PBVH_Buffers*, i32 (i32, i8*)*, i8 zeroext) #3

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @BKE_pbvh_node_planes_contain_AABB(%struct.PBVHNode* %node, i8* %data) #0 !dbg !3882 {
entry:
  %node.addr = alloca %struct.PBVHNode*, align 8
  %data.addr = alloca i8*, align 8
  %bb_min = alloca [3 x float], align 4
  %bb_max = alloca [3 x float], align 4
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !3883, metadata !DIExpression()), !dbg !3884
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3885, metadata !DIExpression()), !dbg !3886
  call void @llvm.dbg.declare(metadata [3 x float]* %bb_min, metadata !3887, metadata !DIExpression()), !dbg !3888
  call void @llvm.dbg.declare(metadata [3 x float]* %bb_max, metadata !3889, metadata !DIExpression()), !dbg !3890
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !3891
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %bb_min, i64 0, i64 0, !dbg !3892
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %bb_max, i64 0, i64 0, !dbg !3893
  call void @BKE_pbvh_node_get_BB(%struct.PBVHNode* %0, float* %arraydecay, float* %arraydecay1), !dbg !3894
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %bb_min, i64 0, i64 0, !dbg !3895
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %bb_max, i64 0, i64 0, !dbg !3896
  %1 = load i8*, i8** %data.addr, align 8, !dbg !3897
  %2 = bitcast i8* %1 to [4 x float]*, !dbg !3897
  %call = call i32 @test_planes_aabb(float* %arraydecay2, float* %arraydecay3, [4 x float]* %2), !dbg !3898
  %cmp = icmp ne i32 %call, 1, !dbg !3899
  %conv = zext i1 %cmp to i32, !dbg !3899
  %conv4 = trunc i32 %conv to i8, !dbg !3898
  ret i8 %conv4, !dbg !3900
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @test_planes_aabb(float* %bb_min, float* %bb_max, [4 x float]* %planes) #0 !dbg !3901 {
entry:
  %retval = alloca i32, align 4
  %bb_min.addr = alloca float*, align 8
  %bb_max.addr = alloca float*, align 8
  %planes.addr = alloca [4 x float]*, align 8
  %vmin = alloca [3 x float], align 4
  %vmax = alloca [3 x float], align 4
  %ret = alloca i32, align 4
  %i = alloca i32, align 4
  %axis = alloca i32, align 4
  store float* %bb_min, float** %bb_min.addr, align 8
  call void @llvm.dbg.declare(metadata float** %bb_min.addr, metadata !3907, metadata !DIExpression()), !dbg !3908
  store float* %bb_max, float** %bb_max.addr, align 8
  call void @llvm.dbg.declare(metadata float** %bb_max.addr, metadata !3909, metadata !DIExpression()), !dbg !3910
  store [4 x float]* %planes, [4 x float]** %planes.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %planes.addr, metadata !3911, metadata !DIExpression()), !dbg !3912
  call void @llvm.dbg.declare(metadata [3 x float]* %vmin, metadata !3913, metadata !DIExpression()), !dbg !3914
  call void @llvm.dbg.declare(metadata [3 x float]* %vmax, metadata !3915, metadata !DIExpression()), !dbg !3916
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !3917, metadata !DIExpression()), !dbg !3918
  store i32 0, i32* %ret, align 4, !dbg !3918
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3919, metadata !DIExpression()), !dbg !3920
  call void @llvm.dbg.declare(metadata i32* %axis, metadata !3921, metadata !DIExpression()), !dbg !3922
  store i32 0, i32* %i, align 4, !dbg !3923
  br label %for.cond, !dbg !3925

for.cond:                                         ; preds = %for.inc45, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3926
  %cmp = icmp slt i32 %0, 4, !dbg !3928
  br i1 %cmp, label %for.body, label %for.end47, !dbg !3929

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %axis, align 4, !dbg !3930
  br label %for.cond1, !dbg !3933

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %axis, align 4, !dbg !3934
  %cmp2 = icmp slt i32 %1, 3, !dbg !3936
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !3937

for.body3:                                        ; preds = %for.cond1
  %2 = load [4 x float]*, [4 x float]** %planes.addr, align 8, !dbg !3938
  %3 = load i32, i32* %i, align 4, !dbg !3941
  %idxprom = sext i32 %3 to i64, !dbg !3938
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %2, i64 %idxprom, !dbg !3938
  %4 = load i32, i32* %axis, align 4, !dbg !3942
  %idxprom4 = sext i32 %4 to i64, !dbg !3938
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 %idxprom4, !dbg !3938
  %5 = load float, float* %arrayidx5, align 4, !dbg !3938
  %cmp6 = fcmp ogt float %5, 0.000000e+00, !dbg !3943
  br i1 %cmp6, label %if.then, label %if.else, !dbg !3944

if.then:                                          ; preds = %for.body3
  %6 = load float*, float** %bb_min.addr, align 8, !dbg !3945
  %7 = load i32, i32* %axis, align 4, !dbg !3947
  %idxprom7 = sext i32 %7 to i64, !dbg !3945
  %arrayidx8 = getelementptr inbounds float, float* %6, i64 %idxprom7, !dbg !3945
  %8 = load float, float* %arrayidx8, align 4, !dbg !3945
  %9 = load i32, i32* %axis, align 4, !dbg !3948
  %idxprom9 = sext i32 %9 to i64, !dbg !3949
  %arrayidx10 = getelementptr inbounds [3 x float], [3 x float]* %vmin, i64 0, i64 %idxprom9, !dbg !3949
  store float %8, float* %arrayidx10, align 4, !dbg !3950
  %10 = load float*, float** %bb_max.addr, align 8, !dbg !3951
  %11 = load i32, i32* %axis, align 4, !dbg !3952
  %idxprom11 = sext i32 %11 to i64, !dbg !3951
  %arrayidx12 = getelementptr inbounds float, float* %10, i64 %idxprom11, !dbg !3951
  %12 = load float, float* %arrayidx12, align 4, !dbg !3951
  %13 = load i32, i32* %axis, align 4, !dbg !3953
  %idxprom13 = sext i32 %13 to i64, !dbg !3954
  %arrayidx14 = getelementptr inbounds [3 x float], [3 x float]* %vmax, i64 0, i64 %idxprom13, !dbg !3954
  store float %12, float* %arrayidx14, align 4, !dbg !3955
  br label %if.end, !dbg !3956

if.else:                                          ; preds = %for.body3
  %14 = load float*, float** %bb_max.addr, align 8, !dbg !3957
  %15 = load i32, i32* %axis, align 4, !dbg !3959
  %idxprom15 = sext i32 %15 to i64, !dbg !3957
  %arrayidx16 = getelementptr inbounds float, float* %14, i64 %idxprom15, !dbg !3957
  %16 = load float, float* %arrayidx16, align 4, !dbg !3957
  %17 = load i32, i32* %axis, align 4, !dbg !3960
  %idxprom17 = sext i32 %17 to i64, !dbg !3961
  %arrayidx18 = getelementptr inbounds [3 x float], [3 x float]* %vmin, i64 0, i64 %idxprom17, !dbg !3961
  store float %16, float* %arrayidx18, align 4, !dbg !3962
  %18 = load float*, float** %bb_min.addr, align 8, !dbg !3963
  %19 = load i32, i32* %axis, align 4, !dbg !3964
  %idxprom19 = sext i32 %19 to i64, !dbg !3963
  %arrayidx20 = getelementptr inbounds float, float* %18, i64 %idxprom19, !dbg !3963
  %20 = load float, float* %arrayidx20, align 4, !dbg !3963
  %21 = load i32, i32* %axis, align 4, !dbg !3965
  %idxprom21 = sext i32 %21 to i64, !dbg !3966
  %arrayidx22 = getelementptr inbounds [3 x float], [3 x float]* %vmax, i64 0, i64 %idxprom21, !dbg !3966
  store float %20, float* %arrayidx22, align 4, !dbg !3967
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !3968

for.inc:                                          ; preds = %if.end
  %22 = load i32, i32* %axis, align 4, !dbg !3969
  %inc = add nsw i32 %22, 1, !dbg !3969
  store i32 %inc, i32* %axis, align 4, !dbg !3969
  br label %for.cond1, !dbg !3970, !llvm.loop !3971

for.end:                                          ; preds = %for.cond1
  %23 = load [4 x float]*, [4 x float]** %planes.addr, align 8, !dbg !3973
  %24 = load i32, i32* %i, align 4, !dbg !3975
  %idxprom23 = sext i32 %24 to i64, !dbg !3973
  %arrayidx24 = getelementptr inbounds [4 x float], [4 x float]* %23, i64 %idxprom23, !dbg !3973
  %arraydecay = getelementptr inbounds [4 x float], [4 x float]* %arrayidx24, i64 0, i64 0, !dbg !3973
  %arraydecay25 = getelementptr inbounds [3 x float], [3 x float]* %vmin, i64 0, i64 0, !dbg !3976
  %call = call float @dot_v3v3(float* %arraydecay, float* %arraydecay25), !dbg !3977
  %25 = load [4 x float]*, [4 x float]** %planes.addr, align 8, !dbg !3978
  %26 = load i32, i32* %i, align 4, !dbg !3979
  %idxprom26 = sext i32 %26 to i64, !dbg !3978
  %arrayidx27 = getelementptr inbounds [4 x float], [4 x float]* %25, i64 %idxprom26, !dbg !3978
  %arrayidx28 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx27, i64 0, i64 3, !dbg !3978
  %27 = load float, float* %arrayidx28, align 4, !dbg !3978
  %add = fadd float %call, %27, !dbg !3980
  %cmp29 = fcmp ogt float %add, 0.000000e+00, !dbg !3981
  br i1 %cmp29, label %if.then30, label %if.else31, !dbg !3982

if.then30:                                        ; preds = %for.end
  store i32 1, i32* %retval, align 4, !dbg !3983
  br label %return, !dbg !3983

if.else31:                                        ; preds = %for.end
  %28 = load [4 x float]*, [4 x float]** %planes.addr, align 8, !dbg !3984
  %29 = load i32, i32* %i, align 4, !dbg !3986
  %idxprom32 = sext i32 %29 to i64, !dbg !3984
  %arrayidx33 = getelementptr inbounds [4 x float], [4 x float]* %28, i64 %idxprom32, !dbg !3984
  %arraydecay34 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx33, i64 0, i64 0, !dbg !3984
  %arraydecay35 = getelementptr inbounds [3 x float], [3 x float]* %vmax, i64 0, i64 0, !dbg !3987
  %call36 = call float @dot_v3v3(float* %arraydecay34, float* %arraydecay35), !dbg !3988
  %30 = load [4 x float]*, [4 x float]** %planes.addr, align 8, !dbg !3989
  %31 = load i32, i32* %i, align 4, !dbg !3990
  %idxprom37 = sext i32 %31 to i64, !dbg !3989
  %arrayidx38 = getelementptr inbounds [4 x float], [4 x float]* %30, i64 %idxprom37, !dbg !3989
  %arrayidx39 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx38, i64 0, i64 3, !dbg !3989
  %32 = load float, float* %arrayidx39, align 4, !dbg !3989
  %add40 = fadd float %call36, %32, !dbg !3991
  %cmp41 = fcmp oge float %add40, 0.000000e+00, !dbg !3992
  br i1 %cmp41, label %if.then42, label %if.end43, !dbg !3993

if.then42:                                        ; preds = %if.else31
  store i32 2, i32* %ret, align 4, !dbg !3994
  br label %if.end43, !dbg !3995

if.end43:                                         ; preds = %if.then42, %if.else31
  br label %if.end44

if.end44:                                         ; preds = %if.end43
  br label %for.inc45, !dbg !3996

for.inc45:                                        ; preds = %if.end44
  %33 = load i32, i32* %i, align 4, !dbg !3997
  %inc46 = add nsw i32 %33, 1, !dbg !3997
  store i32 %inc46, i32* %i, align 4, !dbg !3997
  br label %for.cond, !dbg !3998, !llvm.loop !3999

for.end47:                                        ; preds = %for.cond
  %34 = load i32, i32* %ret, align 4, !dbg !4001
  store i32 %34, i32* %retval, align 4, !dbg !4002
  br label %return, !dbg !4002

return:                                           ; preds = %for.end47, %if.then30
  %35 = load i32, i32* %retval, align 4, !dbg !4003
  ret i32 %35, !dbg !4003
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @BKE_pbvh_node_planes_exclude_AABB(%struct.PBVHNode* %node, i8* %data) #0 !dbg !4004 {
entry:
  %node.addr = alloca %struct.PBVHNode*, align 8
  %data.addr = alloca i8*, align 8
  %bb_min = alloca [3 x float], align 4
  %bb_max = alloca [3 x float], align 4
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !4005, metadata !DIExpression()), !dbg !4006
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4007, metadata !DIExpression()), !dbg !4008
  call void @llvm.dbg.declare(metadata [3 x float]* %bb_min, metadata !4009, metadata !DIExpression()), !dbg !4010
  call void @llvm.dbg.declare(metadata [3 x float]* %bb_max, metadata !4011, metadata !DIExpression()), !dbg !4012
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4013
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %bb_min, i64 0, i64 0, !dbg !4014
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %bb_max, i64 0, i64 0, !dbg !4015
  call void @BKE_pbvh_node_get_BB(%struct.PBVHNode* %0, float* %arraydecay, float* %arraydecay1), !dbg !4016
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %bb_min, i64 0, i64 0, !dbg !4017
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %bb_max, i64 0, i64 0, !dbg !4018
  %1 = load i8*, i8** %data.addr, align 8, !dbg !4019
  %2 = bitcast i8* %1 to [4 x float]*, !dbg !4019
  %call = call i32 @test_planes_aabb(float* %arraydecay2, float* %arraydecay3, [4 x float]* %2), !dbg !4020
  %cmp = icmp ne i32 %call, 0, !dbg !4021
  %conv = zext i1 %cmp to i32, !dbg !4021
  %conv4 = trunc i32 %conv to i8, !dbg !4020
  ret i8 %conv4, !dbg !4022
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_draw(%struct.PBVH* %bvh, [4 x float]* %planes, [3 x float]* %face_nors, i32 (i32, i8*)* %setMaterial, i8 zeroext %wireframe) #0 !dbg !4023 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %planes.addr = alloca [4 x float]*, align 8
  %face_nors.addr = alloca [3 x float]*, align 8
  %setMaterial.addr = alloca i32 (i32, i8*)*, align 8
  %wireframe.addr = alloca i8, align 1
  %draw_data = alloca %struct.PBVHNodeDrawData, align 8
  %nodes = alloca %struct.PBVHNode**, align 8
  %a = alloca i32, align 4
  %totnode = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !4028, metadata !DIExpression()), !dbg !4029
  store [4 x float]* %planes, [4 x float]** %planes.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %planes.addr, metadata !4030, metadata !DIExpression()), !dbg !4031
  store [3 x float]* %face_nors, [3 x float]** %face_nors.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %face_nors.addr, metadata !4032, metadata !DIExpression()), !dbg !4033
  store i32 (i32, i8*)* %setMaterial, i32 (i32, i8*)** %setMaterial.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i32, i8*)** %setMaterial.addr, metadata !4034, metadata !DIExpression()), !dbg !4035
  store i8 %wireframe, i8* %wireframe.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %wireframe.addr, metadata !4036, metadata !DIExpression()), !dbg !4037
  call void @llvm.dbg.declare(metadata %struct.PBVHNodeDrawData* %draw_data, metadata !4038, metadata !DIExpression()), !dbg !4039
  %setMaterial1 = getelementptr inbounds %struct.PBVHNodeDrawData, %struct.PBVHNodeDrawData* %draw_data, i32 0, i32 0, !dbg !4040
  %0 = load i32 (i32, i8*)*, i32 (i32, i8*)** %setMaterial.addr, align 8, !dbg !4041
  store i32 (i32, i8*)* %0, i32 (i32, i8*)** %setMaterial1, align 8, !dbg !4040
  %wireframe2 = getelementptr inbounds %struct.PBVHNodeDrawData, %struct.PBVHNodeDrawData* %draw_data, i32 0, i32 1, !dbg !4040
  %1 = load i8, i8* %wireframe.addr, align 1, !dbg !4042
  store i8 %1, i8* %wireframe2, align 8, !dbg !4040
  call void @llvm.dbg.declare(metadata %struct.PBVHNode*** %nodes, metadata !4043, metadata !DIExpression()), !dbg !4044
  call void @llvm.dbg.declare(metadata i32* %a, metadata !4045, metadata !DIExpression()), !dbg !4046
  call void @llvm.dbg.declare(metadata i32* %totnode, metadata !4047, metadata !DIExpression()), !dbg !4048
  store i32 0, i32* %a, align 4, !dbg !4049
  br label %for.cond, !dbg !4051

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %a, align 4, !dbg !4052
  %3 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4054
  %totnode3 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %3, i32 0, i32 4, !dbg !4055
  %4 = load i32, i32* %totnode3, align 4, !dbg !4055
  %cmp = icmp slt i32 %2, %4, !dbg !4056
  br i1 %cmp, label %for.body, label %for.end, !dbg !4057

for.body:                                         ; preds = %for.cond
  %5 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4058
  %6 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4059
  %nodes4 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %6, i32 0, i32 2, !dbg !4060
  %7 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes4, align 8, !dbg !4060
  %8 = load i32, i32* %a, align 4, !dbg !4061
  %idxprom = sext i32 %8 to i64, !dbg !4059
  %arrayidx = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %7, i64 %idxprom, !dbg !4059
  call void @pbvh_node_check_diffuse_changed(%struct.PBVH* %5, %struct.PBVHNode* %arrayidx), !dbg !4062
  br label %for.inc, !dbg !4062

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %a, align 4, !dbg !4063
  %inc = add nsw i32 %9, 1, !dbg !4063
  store i32 %inc, i32* %a, align 4, !dbg !4063
  br label %for.cond, !dbg !4064, !llvm.loop !4065

for.end:                                          ; preds = %for.cond
  %10 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4067
  call void @BKE_pbvh_search_gather(%struct.PBVH* %10, i8 (%struct.PBVHNode*, i8*)* @update_search_cb, i8* inttoptr (i64 18 to i8*), %struct.PBVHNode*** %nodes, i32* %totnode), !dbg !4068
  %11 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4069
  %12 = load %struct.PBVHNode**, %struct.PBVHNode*** %nodes, align 8, !dbg !4070
  %13 = load i32, i32* %totnode, align 4, !dbg !4071
  %14 = load [3 x float]*, [3 x float]** %face_nors.addr, align 8, !dbg !4072
  call void @pbvh_update_normals(%struct.PBVH* %11, %struct.PBVHNode** %12, i32 %13, [3 x float]* %14), !dbg !4073
  %15 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4074
  %16 = load %struct.PBVHNode**, %struct.PBVHNode*** %nodes, align 8, !dbg !4075
  %17 = load i32, i32* %totnode, align 4, !dbg !4076
  call void @pbvh_update_draw_buffers(%struct.PBVH* %15, %struct.PBVHNode** %16, i32 %17), !dbg !4077
  %18 = load %struct.PBVHNode**, %struct.PBVHNode*** %nodes, align 8, !dbg !4078
  %tobool = icmp ne %struct.PBVHNode** %18, null, !dbg !4078
  br i1 %tobool, label %if.then, label %if.end, !dbg !4080

if.then:                                          ; preds = %for.end
  %19 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !4081
  %20 = load %struct.PBVHNode**, %struct.PBVHNode*** %nodes, align 8, !dbg !4082
  %21 = bitcast %struct.PBVHNode** %20 to i8*, !dbg !4082
  call void %19(i8* %21), !dbg !4081
  br label %if.end, !dbg !4081

if.end:                                           ; preds = %if.then, %for.end
  %22 = load [4 x float]*, [4 x float]** %planes.addr, align 8, !dbg !4083
  %tobool5 = icmp ne [4 x float]* %22, null, !dbg !4083
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !4085

if.then6:                                         ; preds = %if.end
  %23 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4086
  %24 = load [4 x float]*, [4 x float]** %planes.addr, align 8, !dbg !4088
  %25 = bitcast [4 x float]* %24 to i8*, !dbg !4088
  %26 = bitcast %struct.PBVHNodeDrawData* %draw_data to i8*, !dbg !4089
  call void @BKE_pbvh_search_callback(%struct.PBVH* %23, i8 (%struct.PBVHNode*, i8*)* @BKE_pbvh_node_planes_contain_AABB, i8* %25, void (%struct.PBVHNode*, i8*)* @BKE_pbvh_node_draw, i8* %26), !dbg !4090
  br label %if.end7, !dbg !4091

if.else:                                          ; preds = %if.end
  %27 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4092
  %28 = bitcast %struct.PBVHNodeDrawData* %draw_data to i8*, !dbg !4094
  call void @BKE_pbvh_search_callback(%struct.PBVH* %27, i8 (%struct.PBVHNode*, i8*)* null, i8* null, void (%struct.PBVHNode*, i8*)* @BKE_pbvh_node_draw, i8* %28), !dbg !4095
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then6
  %29 = load i16, i16* getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 14), align 4, !dbg !4096
  %conv = sext i16 %29 to i32, !dbg !4098
  %cmp8 = icmp eq i32 %conv, 14, !dbg !4099
  br i1 %cmp8, label %if.then10, label %if.end11, !dbg !4100

if.then10:                                        ; preds = %if.end7
  %30 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4101
  call void @pbvh_draw_BB(%struct.PBVH* %30), !dbg !4102
  br label %if.end11, !dbg !4102

if.end11:                                         ; preds = %if.then10, %if.end7
  ret void, !dbg !4103
}

; Function Attrs: noinline nounwind uwtable
define internal void @pbvh_node_check_diffuse_changed(%struct.PBVH* %bvh, %struct.PBVHNode* %node) #0 !dbg !4104 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !4105, metadata !DIExpression()), !dbg !4106
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !4107, metadata !DIExpression()), !dbg !4108
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4109
  %draw_buffers = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 0, !dbg !4111
  %1 = load %struct.GPU_PBVH_Buffers*, %struct.GPU_PBVH_Buffers** %draw_buffers, align 8, !dbg !4111
  %tobool = icmp ne %struct.GPU_PBVH_Buffers* %1, null, !dbg !4109
  br i1 %tobool, label %if.end, label %if.then, !dbg !4112

if.then:                                          ; preds = %entry
  br label %if.end4, !dbg !4113

if.end:                                           ; preds = %entry
  %2 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4114
  %draw_buffers1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %2, i32 0, i32 0, !dbg !4116
  %3 = load %struct.GPU_PBVH_Buffers*, %struct.GPU_PBVH_Buffers** %draw_buffers1, align 8, !dbg !4116
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4117
  %bm_faces = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %4, i32 0, i32 15, !dbg !4118
  %5 = load %struct.GSet*, %struct.GSet** %bm_faces, align 8, !dbg !4118
  %6 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4119
  %show_diffuse_color = getelementptr inbounds %struct.PBVH, %struct.PBVH* %6, i32 0, i32 21, !dbg !4120
  %7 = load i8, i8* %show_diffuse_color, align 1, !dbg !4120
  %call = call zeroext i8 @GPU_pbvh_buffers_diffuse_changed(%struct.GPU_PBVH_Buffers* %3, %struct.GSet* %5, i8 zeroext %7), !dbg !4121
  %tobool2 = icmp ne i8 %call, 0, !dbg !4121
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !4122

if.then3:                                         ; preds = %if.end
  %8 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4123
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %8, i32 0, i32 10, !dbg !4124
  %bf.load = load i16, i16* %flag, align 8, !dbg !4125
  %bf.cast = zext i16 %bf.load to i32, !dbg !4125
  %or = or i32 %bf.cast, 16, !dbg !4125
  %9 = trunc i32 %or to i16, !dbg !4125
  store i16 %9, i16* %flag, align 8, !dbg !4125
  %bf.result.cast = zext i16 %9 to i32, !dbg !4125
  br label %if.end4, !dbg !4123

if.end4:                                          ; preds = %if.then, %if.then3, %if.end
  ret void, !dbg !4126
}

; Function Attrs: noinline nounwind uwtable
define internal void @pbvh_update_draw_buffers(%struct.PBVH* %bvh, %struct.PBVHNode** %nodes, i32 %totnode) #0 !dbg !4127 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %nodes.addr = alloca %struct.PBVHNode**, align 8
  %totnode.addr = alloca i32, align 4
  %node = alloca %struct.PBVHNode*, align 8
  %n = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !4130, metadata !DIExpression()), !dbg !4131
  store %struct.PBVHNode** %nodes, %struct.PBVHNode*** %nodes.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode*** %nodes.addr, metadata !4132, metadata !DIExpression()), !dbg !4133
  store i32 %totnode, i32* %totnode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totnode.addr, metadata !4134, metadata !DIExpression()), !dbg !4135
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node, metadata !4136, metadata !DIExpression()), !dbg !4137
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4138, metadata !DIExpression()), !dbg !4139
  store i32 0, i32* %n, align 4, !dbg !4140
  br label %for.cond, !dbg !4142

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n, align 4, !dbg !4143
  %1 = load i32, i32* %totnode.addr, align 4, !dbg !4145
  %cmp = icmp slt i32 %0, %1, !dbg !4146
  br i1 %cmp, label %for.body, label %for.end, !dbg !4147

for.body:                                         ; preds = %for.cond
  %2 = load %struct.PBVHNode**, %struct.PBVHNode*** %nodes.addr, align 8, !dbg !4148
  %3 = load i32, i32* %n, align 4, !dbg !4150
  %idxprom = sext i32 %3 to i64, !dbg !4148
  %arrayidx = getelementptr inbounds %struct.PBVHNode*, %struct.PBVHNode** %2, i64 %idxprom, !dbg !4148
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %arrayidx, align 8, !dbg !4148
  store %struct.PBVHNode* %4, %struct.PBVHNode** %node, align 8, !dbg !4151
  %5 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4152
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %5, i32 0, i32 10, !dbg !4154
  %bf.load = load i16, i16* %flag, align 8, !dbg !4154
  %bf.cast = zext i16 %bf.load to i32, !dbg !4154
  %and = and i32 %bf.cast, 64, !dbg !4155
  %tobool = icmp ne i32 %and, 0, !dbg !4155
  br i1 %tobool, label %if.then, label %if.end, !dbg !4156

if.then:                                          ; preds = %for.body
  %6 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4157
  %draw_buffers = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %6, i32 0, i32 0, !dbg !4159
  %7 = load %struct.GPU_PBVH_Buffers*, %struct.GPU_PBVH_Buffers** %draw_buffers, align 8, !dbg !4159
  call void @GPU_free_pbvh_buffers(%struct.GPU_PBVH_Buffers* %7), !dbg !4160
  %8 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4161
  %type = getelementptr inbounds %struct.PBVH, %struct.PBVH* %8, i32 0, i32 0, !dbg !4162
  %9 = load i32, i32* %type, align 8, !dbg !4162
  switch i32 %9, label %sw.epilog [
    i32 1, label %sw.bb
    i32 0, label %sw.bb2
    i32 2, label %sw.bb7
  ], !dbg !4163

sw.bb:                                            ; preds = %if.then
  %10 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4164
  %prim_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %10, i32 0, i32 4, !dbg !4166
  %11 = load i32*, i32** %prim_indices, align 8, !dbg !4166
  %12 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4167
  %totprim = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %12, i32 0, i32 5, !dbg !4168
  %13 = load i32, i32* %totprim, align 8, !dbg !4168
  %14 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4169
  %grid_hidden = getelementptr inbounds %struct.PBVH, %struct.PBVH* %14, i32 0, i32 18, !dbg !4170
  %15 = load i32**, i32*** %grid_hidden, align 8, !dbg !4170
  %16 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4171
  %gridkey = getelementptr inbounds %struct.PBVH, %struct.PBVH* %16, i32 0, i32 12, !dbg !4172
  %grid_size = getelementptr inbounds %struct.CCGKey, %struct.CCGKey* %gridkey, i32 0, i32 2, !dbg !4173
  %17 = load i32, i32* %grid_size, align 8, !dbg !4173
  %call = call %struct.GPU_PBVH_Buffers* @GPU_build_grid_pbvh_buffers(i32* %11, i32 %13, i32** %15, i32 %17), !dbg !4174
  %18 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4175
  %draw_buffers1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %18, i32 0, i32 0, !dbg !4176
  store %struct.GPU_PBVH_Buffers* %call, %struct.GPU_PBVH_Buffers** %draw_buffers1, align 8, !dbg !4177
  br label %sw.epilog, !dbg !4178

sw.bb2:                                           ; preds = %if.then
  %19 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4179
  %face_vert_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %19, i32 0, i32 9, !dbg !4180
  %20 = load [4 x i32]*, [4 x i32]** %face_vert_indices, align 8, !dbg !4180
  %21 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4181
  %faces = getelementptr inbounds %struct.PBVH, %struct.PBVH* %21, i32 0, i32 10, !dbg !4182
  %22 = load %struct.MFace*, %struct.MFace** %faces, align 8, !dbg !4182
  %23 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4183
  %verts = getelementptr inbounds %struct.PBVH, %struct.PBVH* %23, i32 0, i32 9, !dbg !4184
  %24 = load %struct.MVert*, %struct.MVert** %verts, align 8, !dbg !4184
  %25 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4185
  %prim_indices3 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %25, i32 0, i32 4, !dbg !4186
  %26 = load i32*, i32** %prim_indices3, align 8, !dbg !4186
  %27 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4187
  %totprim4 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %27, i32 0, i32 5, !dbg !4188
  %28 = load i32, i32* %totprim4, align 8, !dbg !4188
  %call5 = call %struct.GPU_PBVH_Buffers* @GPU_build_mesh_pbvh_buffers([4 x i32]* %20, %struct.MFace* %22, %struct.MVert* %24, i32* %26, i32 %28), !dbg !4189
  %29 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4190
  %draw_buffers6 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %29, i32 0, i32 0, !dbg !4191
  store %struct.GPU_PBVH_Buffers* %call5, %struct.GPU_PBVH_Buffers** %draw_buffers6, align 8, !dbg !4192
  br label %sw.epilog, !dbg !4193

sw.bb7:                                           ; preds = %if.then
  %30 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4194
  %flags = getelementptr inbounds %struct.PBVH, %struct.PBVH* %30, i32 0, i32 1, !dbg !4195
  %31 = load i32, i32* %flags, align 4, !dbg !4195
  %and8 = and i32 %31, 1, !dbg !4196
  %call9 = call %struct.GPU_PBVH_Buffers* @GPU_build_bmesh_pbvh_buffers(i32 %and8), !dbg !4197
  %32 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4198
  %draw_buffers10 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %32, i32 0, i32 0, !dbg !4199
  store %struct.GPU_PBVH_Buffers* %call9, %struct.GPU_PBVH_Buffers** %draw_buffers10, align 8, !dbg !4200
  br label %sw.epilog, !dbg !4201

sw.epilog:                                        ; preds = %if.then, %sw.bb7, %sw.bb2, %sw.bb
  %33 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4202
  %flag11 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %33, i32 0, i32 10, !dbg !4203
  %bf.load12 = load i16, i16* %flag11, align 8, !dbg !4204
  %bf.cast13 = zext i16 %bf.load12 to i32, !dbg !4204
  %and14 = and i32 %bf.cast13, -65, !dbg !4204
  %34 = trunc i32 %and14 to i16, !dbg !4204
  store i16 %34, i16* %flag11, align 8, !dbg !4204
  %bf.result.cast = zext i16 %34 to i32, !dbg !4204
  br label %if.end, !dbg !4205

if.end:                                           ; preds = %sw.epilog, %for.body
  %35 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4206
  %flag15 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %35, i32 0, i32 10, !dbg !4208
  %bf.load16 = load i16, i16* %flag15, align 8, !dbg !4208
  %bf.cast17 = zext i16 %bf.load16 to i32, !dbg !4208
  %and18 = and i32 %bf.cast17, 16, !dbg !4209
  %tobool19 = icmp ne i32 %and18, 0, !dbg !4209
  br i1 %tobool19, label %if.then20, label %if.end42, !dbg !4210

if.then20:                                        ; preds = %if.end
  %36 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4211
  %type21 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %36, i32 0, i32 0, !dbg !4213
  %37 = load i32, i32* %type21, align 8, !dbg !4213
  switch i32 %37, label %sw.epilog36 [
    i32 1, label %sw.bb22
    i32 0, label %sw.bb27
    i32 2, label %sw.bb33
  ], !dbg !4214

sw.bb22:                                          ; preds = %if.then20
  %38 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4215
  %draw_buffers23 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %38, i32 0, i32 0, !dbg !4217
  %39 = load %struct.GPU_PBVH_Buffers*, %struct.GPU_PBVH_Buffers** %draw_buffers23, align 8, !dbg !4217
  %40 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4218
  %grids = getelementptr inbounds %struct.PBVH, %struct.PBVH* %40, i32 0, i32 13, !dbg !4219
  %41 = load %struct.CCGElem**, %struct.CCGElem*** %grids, align 8, !dbg !4219
  %42 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4220
  %grid_flag_mats = getelementptr inbounds %struct.PBVH, %struct.PBVH* %42, i32 0, i32 16, !dbg !4221
  %43 = load %struct.DMFlagMat*, %struct.DMFlagMat** %grid_flag_mats, align 8, !dbg !4221
  %44 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4222
  %prim_indices24 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %44, i32 0, i32 4, !dbg !4223
  %45 = load i32*, i32** %prim_indices24, align 8, !dbg !4223
  %46 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4224
  %totprim25 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %46, i32 0, i32 5, !dbg !4225
  %47 = load i32, i32* %totprim25, align 8, !dbg !4225
  %48 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4226
  %gridkey26 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %48, i32 0, i32 12, !dbg !4227
  %49 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4228
  %show_diffuse_color = getelementptr inbounds %struct.PBVH, %struct.PBVH* %49, i32 0, i32 21, !dbg !4229
  %50 = load i8, i8* %show_diffuse_color, align 1, !dbg !4229
  call void @GPU_update_grid_pbvh_buffers(%struct.GPU_PBVH_Buffers* %39, %struct.CCGElem** %41, %struct.DMFlagMat* %43, i32* %45, i32 %47, %struct.CCGKey* %gridkey26, i8 zeroext %50), !dbg !4230
  br label %sw.epilog36, !dbg !4231

sw.bb27:                                          ; preds = %if.then20
  %51 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4232
  %draw_buffers28 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %51, i32 0, i32 0, !dbg !4233
  %52 = load %struct.GPU_PBVH_Buffers*, %struct.GPU_PBVH_Buffers** %draw_buffers28, align 8, !dbg !4233
  %53 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4234
  %verts29 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %53, i32 0, i32 9, !dbg !4235
  %54 = load %struct.MVert*, %struct.MVert** %verts29, align 8, !dbg !4235
  %55 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4236
  %vert_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %55, i32 0, i32 6, !dbg !4237
  %56 = load i32*, i32** %vert_indices, align 8, !dbg !4237
  %57 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4238
  %uniq_verts = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %57, i32 0, i32 7, !dbg !4239
  %58 = load i32, i32* %uniq_verts, align 8, !dbg !4239
  %59 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4240
  %face_verts = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %59, i32 0, i32 8, !dbg !4241
  %60 = load i32, i32* %face_verts, align 4, !dbg !4241
  %add = add i32 %58, %60, !dbg !4242
  %61 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4243
  %vdata = getelementptr inbounds %struct.PBVH, %struct.PBVH* %61, i32 0, i32 11, !dbg !4244
  %62 = load %struct.CustomData*, %struct.CustomData** %vdata, align 8, !dbg !4244
  %call30 = call i8* @CustomData_get_layer(%struct.CustomData* %62, i32 34), !dbg !4245
  %63 = bitcast i8* %call30 to float*, !dbg !4245
  %64 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4246
  %face_vert_indices31 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %64, i32 0, i32 9, !dbg !4247
  %65 = load [4 x i32]*, [4 x i32]** %face_vert_indices31, align 8, !dbg !4247
  %66 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4248
  %show_diffuse_color32 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %66, i32 0, i32 21, !dbg !4249
  %67 = load i8, i8* %show_diffuse_color32, align 1, !dbg !4249
  call void @GPU_update_mesh_pbvh_buffers(%struct.GPU_PBVH_Buffers* %52, %struct.MVert* %54, i32* %56, i32 %add, float* %63, [4 x i32]* %65, i8 zeroext %67), !dbg !4250
  br label %sw.epilog36, !dbg !4251

sw.bb33:                                          ; preds = %if.then20
  %68 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4252
  %draw_buffers34 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %68, i32 0, i32 0, !dbg !4253
  %69 = load %struct.GPU_PBVH_Buffers*, %struct.GPU_PBVH_Buffers** %draw_buffers34, align 8, !dbg !4253
  %70 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4254
  %bm = getelementptr inbounds %struct.PBVH, %struct.PBVH* %70, i32 0, i32 22, !dbg !4255
  %71 = load %struct.BMesh*, %struct.BMesh** %bm, align 8, !dbg !4255
  %72 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4256
  %bm_faces = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %72, i32 0, i32 15, !dbg !4257
  %73 = load %struct.GSet*, %struct.GSet** %bm_faces, align 8, !dbg !4257
  %74 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4258
  %bm_unique_verts = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %74, i32 0, i32 16, !dbg !4259
  %75 = load %struct.GSet*, %struct.GSet** %bm_unique_verts, align 8, !dbg !4259
  %76 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4260
  %bm_other_verts = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %76, i32 0, i32 17, !dbg !4261
  %77 = load %struct.GSet*, %struct.GSet** %bm_other_verts, align 8, !dbg !4261
  %78 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4262
  %show_diffuse_color35 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %78, i32 0, i32 21, !dbg !4263
  %79 = load i8, i8* %show_diffuse_color35, align 1, !dbg !4263
  call void @GPU_update_bmesh_pbvh_buffers(%struct.GPU_PBVH_Buffers* %69, %struct.BMesh* %71, %struct.GSet* %73, %struct.GSet* %75, %struct.GSet* %77, i8 zeroext %79), !dbg !4264
  br label %sw.epilog36, !dbg !4265

sw.epilog36:                                      ; preds = %if.then20, %sw.bb33, %sw.bb27, %sw.bb22
  %80 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4266
  %flag37 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %80, i32 0, i32 10, !dbg !4267
  %bf.load38 = load i16, i16* %flag37, align 8, !dbg !4268
  %bf.cast39 = zext i16 %bf.load38 to i32, !dbg !4268
  %and40 = and i32 %bf.cast39, -17, !dbg !4268
  %81 = trunc i32 %and40 to i16, !dbg !4268
  store i16 %81, i16* %flag37, align 8, !dbg !4268
  %bf.result.cast41 = zext i16 %81 to i32, !dbg !4268
  br label %if.end42, !dbg !4269

if.end42:                                         ; preds = %sw.epilog36, %if.end
  br label %for.inc, !dbg !4270

for.inc:                                          ; preds = %if.end42
  %82 = load i32, i32* %n, align 4, !dbg !4271
  %inc = add nsw i32 %82, 1, !dbg !4271
  store i32 %inc, i32* %n, align 4, !dbg !4271
  br label %for.cond, !dbg !4272, !llvm.loop !4273

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4275
}

; Function Attrs: noinline nounwind uwtable
define internal void @pbvh_draw_BB(%struct.PBVH* %bvh) #0 !dbg !4276 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node = alloca %struct.PBVHNode*, align 8
  %a = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !4277, metadata !DIExpression()), !dbg !4278
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node, metadata !4279, metadata !DIExpression()), !dbg !4280
  call void @llvm.dbg.declare(metadata i32* %a, metadata !4281, metadata !DIExpression()), !dbg !4282
  call void @GPU_init_draw_pbvh_BB(), !dbg !4283
  store i32 0, i32* %a, align 4, !dbg !4284
  br label %for.cond, !dbg !4286

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %a, align 4, !dbg !4287
  %1 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4289
  %totnode = getelementptr inbounds %struct.PBVH, %struct.PBVH* %1, i32 0, i32 4, !dbg !4290
  %2 = load i32, i32* %totnode, align 4, !dbg !4290
  %cmp = icmp slt i32 %0, %2, !dbg !4291
  br i1 %cmp, label %for.body, label %for.end, !dbg !4292

for.body:                                         ; preds = %for.cond
  %3 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4293
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %3, i32 0, i32 2, !dbg !4295
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !4295
  %5 = load i32, i32* %a, align 4, !dbg !4296
  %idxprom = sext i32 %5 to i64, !dbg !4293
  %arrayidx = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %4, i64 %idxprom, !dbg !4293
  store %struct.PBVHNode* %arrayidx, %struct.PBVHNode** %node, align 8, !dbg !4297
  %6 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4298
  %vb = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %6, i32 0, i32 1, !dbg !4299
  %bmin = getelementptr inbounds %struct.BB, %struct.BB* %vb, i32 0, i32 0, !dbg !4300
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %bmin, i64 0, i64 0, !dbg !4298
  %7 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4301
  %vb1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %7, i32 0, i32 1, !dbg !4302
  %bmax = getelementptr inbounds %struct.BB, %struct.BB* %vb1, i32 0, i32 1, !dbg !4303
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %bmax, i64 0, i64 0, !dbg !4301
  %8 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4304
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %8, i32 0, i32 10, !dbg !4305
  %bf.load = load i16, i16* %flag, align 8, !dbg !4305
  %bf.cast = zext i16 %bf.load to i32, !dbg !4305
  %and = and i32 %bf.cast, 1, !dbg !4306
  %cmp3 = icmp ne i32 %and, 0, !dbg !4307
  %conv = zext i1 %cmp3 to i32, !dbg !4307
  %conv4 = trunc i32 %conv to i8, !dbg !4308
  call void @GPU_draw_pbvh_BB(float* %arraydecay, float* %arraydecay2, i8 zeroext %conv4), !dbg !4309
  br label %for.inc, !dbg !4310

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %a, align 4, !dbg !4311
  %inc = add nsw i32 %9, 1, !dbg !4311
  store i32 %inc, i32* %a, align 4, !dbg !4311
  br label %for.cond, !dbg !4312, !llvm.loop !4313

for.end:                                          ; preds = %for.cond
  call void @GPU_end_draw_pbvh_BB(), !dbg !4315
  ret void, !dbg !4316
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_grids_update(%struct.PBVH* %bvh, %struct.CCGElem** %grids, %struct.DMGridAdjacency* %gridadj, i8** %gridfaces, %struct.DMFlagMat* %flagmats, i32** %grid_hidden) #0 !dbg !4317 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %grids.addr = alloca %struct.CCGElem**, align 8
  %gridadj.addr = alloca %struct.DMGridAdjacency*, align 8
  %gridfaces.addr = alloca i8**, align 8
  %flagmats.addr = alloca %struct.DMFlagMat*, align 8
  %grid_hidden.addr = alloca i32**, align 8
  %a = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !4320, metadata !DIExpression()), !dbg !4321
  store %struct.CCGElem** %grids, %struct.CCGElem*** %grids.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGElem*** %grids.addr, metadata !4322, metadata !DIExpression()), !dbg !4323
  store %struct.DMGridAdjacency* %gridadj, %struct.DMGridAdjacency** %gridadj.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DMGridAdjacency** %gridadj.addr, metadata !4324, metadata !DIExpression()), !dbg !4325
  store i8** %gridfaces, i8*** %gridfaces.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %gridfaces.addr, metadata !4326, metadata !DIExpression()), !dbg !4327
  store %struct.DMFlagMat* %flagmats, %struct.DMFlagMat** %flagmats.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DMFlagMat** %flagmats.addr, metadata !4328, metadata !DIExpression()), !dbg !4329
  store i32** %grid_hidden, i32*** %grid_hidden.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %grid_hidden.addr, metadata !4330, metadata !DIExpression()), !dbg !4331
  call void @llvm.dbg.declare(metadata i32* %a, metadata !4332, metadata !DIExpression()), !dbg !4333
  %0 = load %struct.CCGElem**, %struct.CCGElem*** %grids.addr, align 8, !dbg !4334
  %1 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4335
  %grids1 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %1, i32 0, i32 13, !dbg !4336
  store %struct.CCGElem** %0, %struct.CCGElem*** %grids1, align 8, !dbg !4337
  %2 = load %struct.DMGridAdjacency*, %struct.DMGridAdjacency** %gridadj.addr, align 8, !dbg !4338
  %3 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4339
  %gridadj2 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %3, i32 0, i32 14, !dbg !4340
  store %struct.DMGridAdjacency* %2, %struct.DMGridAdjacency** %gridadj2, align 8, !dbg !4341
  %4 = load i8**, i8*** %gridfaces.addr, align 8, !dbg !4342
  %5 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4343
  %gridfaces3 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %5, i32 0, i32 15, !dbg !4344
  store i8** %4, i8*** %gridfaces3, align 8, !dbg !4345
  %6 = load %struct.DMFlagMat*, %struct.DMFlagMat** %flagmats.addr, align 8, !dbg !4346
  %7 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4348
  %grid_flag_mats = getelementptr inbounds %struct.PBVH, %struct.PBVH* %7, i32 0, i32 16, !dbg !4349
  %8 = load %struct.DMFlagMat*, %struct.DMFlagMat** %grid_flag_mats, align 8, !dbg !4349
  %cmp = icmp ne %struct.DMFlagMat* %6, %8, !dbg !4350
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4351

lor.lhs.false:                                    ; preds = %entry
  %9 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4352
  %grid_hidden4 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %9, i32 0, i32 18, !dbg !4353
  %10 = load i32**, i32*** %grid_hidden4, align 8, !dbg !4353
  %11 = load i32**, i32*** %grid_hidden.addr, align 8, !dbg !4354
  %cmp5 = icmp ne i32** %10, %11, !dbg !4355
  br i1 %cmp5, label %if.then, label %if.end, !dbg !4356

if.then:                                          ; preds = %lor.lhs.false, %entry
  %12 = load %struct.DMFlagMat*, %struct.DMFlagMat** %flagmats.addr, align 8, !dbg !4357
  %13 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4359
  %grid_flag_mats6 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %13, i32 0, i32 16, !dbg !4360
  store %struct.DMFlagMat* %12, %struct.DMFlagMat** %grid_flag_mats6, align 8, !dbg !4361
  %14 = load i32**, i32*** %grid_hidden.addr, align 8, !dbg !4362
  %15 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4363
  %grid_hidden7 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %15, i32 0, i32 18, !dbg !4364
  store i32** %14, i32*** %grid_hidden7, align 8, !dbg !4365
  store i32 0, i32* %a, align 4, !dbg !4366
  br label %for.cond, !dbg !4368

for.cond:                                         ; preds = %for.inc, %if.then
  %16 = load i32, i32* %a, align 4, !dbg !4369
  %17 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4371
  %totnode = getelementptr inbounds %struct.PBVH, %struct.PBVH* %17, i32 0, i32 4, !dbg !4372
  %18 = load i32, i32* %totnode, align 4, !dbg !4372
  %cmp8 = icmp slt i32 %16, %18, !dbg !4373
  br i1 %cmp8, label %for.body, label %for.end, !dbg !4374

for.body:                                         ; preds = %for.cond
  %19 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4375
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %19, i32 0, i32 2, !dbg !4376
  %20 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !4376
  %21 = load i32, i32* %a, align 4, !dbg !4377
  %idxprom = sext i32 %21 to i64, !dbg !4375
  %arrayidx = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %20, i64 %idxprom, !dbg !4375
  call void @BKE_pbvh_node_mark_rebuild_draw(%struct.PBVHNode* %arrayidx), !dbg !4378
  br label %for.inc, !dbg !4378

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %a, align 4, !dbg !4379
  %inc = add nsw i32 %22, 1, !dbg !4379
  store i32 %inc, i32* %a, align 4, !dbg !4379
  br label %for.cond, !dbg !4380, !llvm.loop !4381

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !4383

if.end:                                           ; preds = %for.end, %lor.lhs.false
  ret void, !dbg !4384
}

; Function Attrs: noinline nounwind uwtable
define dso_local float* @BKE_pbvh_node_layer_disp_get(%struct.PBVH* %bvh, %struct.PBVHNode* %node) #0 !dbg !4385 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  %totvert = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !4388, metadata !DIExpression()), !dbg !4389
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !4390, metadata !DIExpression()), !dbg !4391
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4392
  %layer_disp = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 12, !dbg !4394
  %1 = load float*, float** %layer_disp, align 8, !dbg !4394
  %tobool = icmp ne float* %1, null, !dbg !4392
  br i1 %tobool, label %if.end, label %if.then, !dbg !4395

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %totvert, metadata !4396, metadata !DIExpression()), !dbg !4398
  store i32 0, i32* %totvert, align 4, !dbg !4398
  %2 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4399
  %3 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4400
  call void @BKE_pbvh_node_num_verts(%struct.PBVH* %2, %struct.PBVHNode* %3, i32* %totvert, i32* null), !dbg !4401
  %4 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !4402
  %5 = load i32, i32* %totvert, align 4, !dbg !4403
  %conv = sext i32 %5 to i64, !dbg !4403
  %mul = mul i64 4, %conv, !dbg !4404
  %call = call i8* %4(i64 %mul, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0)), !dbg !4402
  %6 = bitcast i8* %call to float*, !dbg !4402
  %7 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4405
  %layer_disp1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %7, i32 0, i32 12, !dbg !4406
  store float* %6, float** %layer_disp1, align 8, !dbg !4407
  br label %if.end, !dbg !4408

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4409
  %layer_disp2 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %8, i32 0, i32 12, !dbg !4410
  %9 = load float*, float** %layer_disp2, align 8, !dbg !4410
  ret float* %9, !dbg !4411
}

; Function Attrs: noinline nounwind uwtable
define dso_local [3 x float]* @BKE_pbvh_get_vertCos(%struct.PBVH* %pbvh) #0 !dbg !4412 {
entry:
  %pbvh.addr = alloca %struct.PBVH*, align 8
  %a = alloca i32, align 4
  %vertCos = alloca [3 x float]*, align 8
  %co = alloca float*, align 8
  %mvert = alloca %struct.MVert*, align 8
  store %struct.PBVH* %pbvh, %struct.PBVH** %pbvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %pbvh.addr, metadata !4415, metadata !DIExpression()), !dbg !4416
  call void @llvm.dbg.declare(metadata i32* %a, metadata !4417, metadata !DIExpression()), !dbg !4418
  call void @llvm.dbg.declare(metadata [3 x float]** %vertCos, metadata !4419, metadata !DIExpression()), !dbg !4420
  store [3 x float]* null, [3 x float]** %vertCos, align 8, !dbg !4420
  %0 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4421
  %verts = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 9, !dbg !4423
  %1 = load %struct.MVert*, %struct.MVert** %verts, align 8, !dbg !4423
  %tobool = icmp ne %struct.MVert* %1, null, !dbg !4421
  br i1 %tobool, label %if.then, label %if.end, !dbg !4424

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata float** %co, metadata !4425, metadata !DIExpression()), !dbg !4427
  call void @llvm.dbg.declare(metadata %struct.MVert** %mvert, metadata !4428, metadata !DIExpression()), !dbg !4429
  %2 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4430
  %verts1 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %2, i32 0, i32 9, !dbg !4431
  %3 = load %struct.MVert*, %struct.MVert** %verts1, align 8, !dbg !4431
  store %struct.MVert* %3, %struct.MVert** %mvert, align 8, !dbg !4429
  %4 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !4432
  %5 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4433
  %totvert = getelementptr inbounds %struct.PBVH, %struct.PBVH* %5, i32 0, i32 7, !dbg !4434
  %6 = load i32, i32* %totvert, align 4, !dbg !4434
  %mul = mul nsw i32 3, %6, !dbg !4435
  %conv = sext i32 %mul to i64, !dbg !4436
  %mul2 = mul i64 %conv, 4, !dbg !4437
  %call = call i8* %4(i64 %mul2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0)), !dbg !4432
  %7 = bitcast i8* %call to [3 x float]*, !dbg !4432
  store [3 x float]* %7, [3 x float]** %vertCos, align 8, !dbg !4438
  %8 = load [3 x float]*, [3 x float]** %vertCos, align 8, !dbg !4439
  %9 = bitcast [3 x float]* %8 to float*, !dbg !4440
  store float* %9, float** %co, align 8, !dbg !4441
  store i32 0, i32* %a, align 4, !dbg !4442
  br label %for.cond, !dbg !4444

for.cond:                                         ; preds = %for.inc, %if.then
  %10 = load i32, i32* %a, align 4, !dbg !4445
  %11 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4447
  %totvert3 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %11, i32 0, i32 7, !dbg !4448
  %12 = load i32, i32* %totvert3, align 4, !dbg !4448
  %cmp = icmp slt i32 %10, %12, !dbg !4449
  br i1 %cmp, label %for.body, label %for.end, !dbg !4450

for.body:                                         ; preds = %for.cond
  %13 = load float*, float** %co, align 8, !dbg !4451
  %14 = load %struct.MVert*, %struct.MVert** %mvert, align 8, !dbg !4453
  %co5 = getelementptr inbounds %struct.MVert, %struct.MVert* %14, i32 0, i32 0, !dbg !4454
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co5, i64 0, i64 0, !dbg !4453
  call void @copy_v3_v3(float* %13, float* %arraydecay), !dbg !4455
  br label %for.inc, !dbg !4456

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %a, align 4, !dbg !4457
  %inc = add nsw i32 %15, 1, !dbg !4457
  store i32 %inc, i32* %a, align 4, !dbg !4457
  %16 = load %struct.MVert*, %struct.MVert** %mvert, align 8, !dbg !4458
  %incdec.ptr = getelementptr inbounds %struct.MVert, %struct.MVert* %16, i32 1, !dbg !4458
  store %struct.MVert* %incdec.ptr, %struct.MVert** %mvert, align 8, !dbg !4458
  %17 = load float*, float** %co, align 8, !dbg !4459
  %add.ptr = getelementptr inbounds float, float* %17, i64 3, !dbg !4459
  store float* %add.ptr, float** %co, align 8, !dbg !4459
  br label %for.cond, !dbg !4460, !llvm.loop !4461

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !4463

if.end:                                           ; preds = %for.end, %entry
  %18 = load [3 x float]*, [3 x float]** %vertCos, align 8, !dbg !4464
  ret [3 x float]* %18, !dbg !4465
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_apply_vertCos(%struct.PBVH* %pbvh, [3 x float]* %vertCos) #0 !dbg !4466 {
entry:
  %pbvh.addr = alloca %struct.PBVH*, align 8
  %vertCos.addr = alloca [3 x float]*, align 8
  %a = alloca i32, align 4
  %mvert = alloca %struct.MVert*, align 8
  store %struct.PBVH* %pbvh, %struct.PBVH** %pbvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %pbvh.addr, metadata !4469, metadata !DIExpression()), !dbg !4470
  store [3 x float]* %vertCos, [3 x float]** %vertCos.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %vertCos.addr, metadata !4471, metadata !DIExpression()), !dbg !4472
  call void @llvm.dbg.declare(metadata i32* %a, metadata !4473, metadata !DIExpression()), !dbg !4474
  %0 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4475
  %deformed = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 20, !dbg !4477
  %1 = load i8, i8* %deformed, align 8, !dbg !4477
  %tobool = icmp ne i8 %1, 0, !dbg !4475
  br i1 %tobool, label %if.end8, label %if.then, !dbg !4478

if.then:                                          ; preds = %entry
  %2 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4479
  %verts = getelementptr inbounds %struct.PBVH, %struct.PBVH* %2, i32 0, i32 9, !dbg !4482
  %3 = load %struct.MVert*, %struct.MVert** %verts, align 8, !dbg !4482
  %tobool1 = icmp ne %struct.MVert* %3, null, !dbg !4479
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !4483

if.then2:                                         ; preds = %if.then
  %4 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !4484
  %5 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4486
  %verts3 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %5, i32 0, i32 9, !dbg !4487
  %6 = load %struct.MVert*, %struct.MVert** %verts3, align 8, !dbg !4487
  %7 = bitcast %struct.MVert* %6 to i8*, !dbg !4486
  %call = call i8* %4(i8* %7), !dbg !4484
  %8 = bitcast i8* %call to %struct.MVert*, !dbg !4484
  %9 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4488
  %verts4 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %9, i32 0, i32 9, !dbg !4489
  store %struct.MVert* %8, %struct.MVert** %verts4, align 8, !dbg !4490
  %10 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !4491
  %11 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4492
  %faces = getelementptr inbounds %struct.PBVH, %struct.PBVH* %11, i32 0, i32 10, !dbg !4493
  %12 = load %struct.MFace*, %struct.MFace** %faces, align 8, !dbg !4493
  %13 = bitcast %struct.MFace* %12 to i8*, !dbg !4492
  %call5 = call i8* %10(i8* %13), !dbg !4491
  %14 = bitcast i8* %call5 to %struct.MFace*, !dbg !4491
  %15 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4494
  %faces6 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %15, i32 0, i32 10, !dbg !4495
  store %struct.MFace* %14, %struct.MFace** %faces6, align 8, !dbg !4496
  %16 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4497
  %deformed7 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %16, i32 0, i32 20, !dbg !4498
  store i8 1, i8* %deformed7, align 8, !dbg !4499
  br label %if.end, !dbg !4500

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end8, !dbg !4501

if.end8:                                          ; preds = %if.end, %entry
  %17 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4502
  %verts9 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %17, i32 0, i32 9, !dbg !4504
  %18 = load %struct.MVert*, %struct.MVert** %verts9, align 8, !dbg !4504
  %tobool10 = icmp ne %struct.MVert* %18, null, !dbg !4502
  br i1 %tobool10, label %if.then11, label %if.end27, !dbg !4505

if.then11:                                        ; preds = %if.end8
  call void @llvm.dbg.declare(metadata %struct.MVert** %mvert, metadata !4506, metadata !DIExpression()), !dbg !4508
  %19 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4509
  %verts12 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %19, i32 0, i32 9, !dbg !4510
  %20 = load %struct.MVert*, %struct.MVert** %verts12, align 8, !dbg !4510
  store %struct.MVert* %20, %struct.MVert** %mvert, align 8, !dbg !4508
  store i32 0, i32* %a, align 4, !dbg !4511
  br label %for.cond, !dbg !4513

for.cond:                                         ; preds = %for.inc, %if.then11
  %21 = load i32, i32* %a, align 4, !dbg !4514
  %22 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4516
  %totvert = getelementptr inbounds %struct.PBVH, %struct.PBVH* %22, i32 0, i32 7, !dbg !4517
  %23 = load i32, i32* %totvert, align 4, !dbg !4517
  %cmp = icmp slt i32 %21, %23, !dbg !4518
  br i1 %cmp, label %for.body, label %for.end, !dbg !4519

for.body:                                         ; preds = %for.cond
  %24 = load %struct.MVert*, %struct.MVert** %mvert, align 8, !dbg !4520
  %co = getelementptr inbounds %struct.MVert, %struct.MVert* %24, i32 0, i32 0, !dbg !4522
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !4520
  %25 = load [3 x float]*, [3 x float]** %vertCos.addr, align 8, !dbg !4523
  %26 = load i32, i32* %a, align 4, !dbg !4524
  %idxprom = sext i32 %26 to i64, !dbg !4523
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %25, i64 %idxprom, !dbg !4523
  %arraydecay13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !4523
  call void @copy_v3_v3(float* %arraydecay, float* %arraydecay13), !dbg !4525
  %27 = load %struct.MVert*, %struct.MVert** %mvert, align 8, !dbg !4526
  %flag = getelementptr inbounds %struct.MVert, %struct.MVert* %27, i32 0, i32 2, !dbg !4527
  %28 = load i8, i8* %flag, align 2, !dbg !4528
  %conv = zext i8 %28 to i32, !dbg !4528
  %or = or i32 %conv, 128, !dbg !4528
  %conv14 = trunc i32 %or to i8, !dbg !4528
  store i8 %conv14, i8* %flag, align 2, !dbg !4528
  br label %for.inc, !dbg !4529

for.inc:                                          ; preds = %for.body
  %29 = load i32, i32* %a, align 4, !dbg !4530
  %inc = add nsw i32 %29, 1, !dbg !4530
  store i32 %inc, i32* %a, align 4, !dbg !4530
  %30 = load %struct.MVert*, %struct.MVert** %mvert, align 8, !dbg !4531
  %incdec.ptr = getelementptr inbounds %struct.MVert, %struct.MVert* %30, i32 1, !dbg !4531
  store %struct.MVert* %incdec.ptr, %struct.MVert** %mvert, align 8, !dbg !4531
  br label %for.cond, !dbg !4532, !llvm.loop !4533

for.end:                                          ; preds = %for.cond
  %31 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4535
  %verts15 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %31, i32 0, i32 9, !dbg !4536
  %32 = load %struct.MVert*, %struct.MVert** %verts15, align 8, !dbg !4536
  %33 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4537
  %totvert16 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %33, i32 0, i32 7, !dbg !4538
  %34 = load i32, i32* %totvert16, align 4, !dbg !4538
  %35 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4539
  %faces17 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %35, i32 0, i32 10, !dbg !4540
  %36 = load %struct.MFace*, %struct.MFace** %faces17, align 8, !dbg !4540
  %37 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4541
  %totprim = getelementptr inbounds %struct.PBVH, %struct.PBVH* %37, i32 0, i32 6, !dbg !4542
  %38 = load i32, i32* %totprim, align 8, !dbg !4542
  call void @BKE_mesh_calc_normals_tessface(%struct.MVert* %32, i32 %34, %struct.MFace* %36, i32 %38, [3 x float]* null), !dbg !4543
  store i32 0, i32* %a, align 4, !dbg !4544
  br label %for.cond18, !dbg !4546

for.cond18:                                       ; preds = %for.inc24, %for.end
  %39 = load i32, i32* %a, align 4, !dbg !4547
  %40 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4549
  %totnode = getelementptr inbounds %struct.PBVH, %struct.PBVH* %40, i32 0, i32 4, !dbg !4550
  %41 = load i32, i32* %totnode, align 4, !dbg !4550
  %cmp19 = icmp slt i32 %39, %41, !dbg !4551
  br i1 %cmp19, label %for.body21, label %for.end26, !dbg !4552

for.body21:                                       ; preds = %for.cond18
  %42 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4553
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %42, i32 0, i32 2, !dbg !4554
  %43 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !4554
  %44 = load i32, i32* %a, align 4, !dbg !4555
  %idxprom22 = sext i32 %44 to i64, !dbg !4553
  %arrayidx23 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %43, i64 %idxprom22, !dbg !4553
  call void @BKE_pbvh_node_mark_update(%struct.PBVHNode* %arrayidx23), !dbg !4556
  br label %for.inc24, !dbg !4556

for.inc24:                                        ; preds = %for.body21
  %45 = load i32, i32* %a, align 4, !dbg !4557
  %inc25 = add nsw i32 %45, 1, !dbg !4557
  store i32 %inc25, i32* %a, align 4, !dbg !4557
  br label %for.cond18, !dbg !4558, !llvm.loop !4559

for.end26:                                        ; preds = %for.cond18
  %46 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4561
  call void @BKE_pbvh_update(%struct.PBVH* %46, i32 4, [3 x float]* null), !dbg !4562
  %47 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4563
  call void @BKE_pbvh_update(%struct.PBVH* %47, i32 8, [3 x float]* null), !dbg !4564
  br label %if.end27, !dbg !4565

if.end27:                                         ; preds = %for.end26, %if.end8
  ret void, !dbg !4566
}

declare dso_local void @BKE_mesh_calc_normals_tessface(%struct.MVert*, i32, %struct.MFace*, i32, [3 x float]*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @BKE_pbvh_isDeformed(%struct.PBVH* %pbvh) #0 !dbg !4567 {
entry:
  %pbvh.addr = alloca %struct.PBVH*, align 8
  store %struct.PBVH* %pbvh, %struct.PBVH** %pbvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %pbvh.addr, metadata !4570, metadata !DIExpression()), !dbg !4571
  %0 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4572
  %deformed = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 20, !dbg !4573
  %1 = load i8, i8* %deformed, align 8, !dbg !4573
  ret i8 %1, !dbg !4574
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.PBVHProxyNode* @BKE_pbvh_node_add_proxy(%struct.PBVH* %bvh, %struct.PBVHNode* %node) #0 !dbg !4575 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  %index = alloca i32, align 4
  %totverts = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !4578, metadata !DIExpression()), !dbg !4579
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !4580, metadata !DIExpression()), !dbg !4581
  call void @llvm.dbg.declare(metadata i32* %index, metadata !4582, metadata !DIExpression()), !dbg !4583
  call void @llvm.dbg.declare(metadata i32* %totverts, metadata !4584, metadata !DIExpression()), !dbg !4585
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4586
  %proxy_count = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 13, !dbg !4588
  %1 = load i32, i32* %proxy_count, align 8, !dbg !4588
  store i32 %1, i32* %index, align 4, !dbg !4589
  %2 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4590
  %proxy_count1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %2, i32 0, i32 13, !dbg !4591
  %3 = load i32, i32* %proxy_count1, align 8, !dbg !4592
  %inc = add nsw i32 %3, 1, !dbg !4592
  store i32 %inc, i32* %proxy_count1, align 8, !dbg !4592
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4593
  %proxies = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %4, i32 0, i32 14, !dbg !4595
  %5 = load %struct.PBVHProxyNode*, %struct.PBVHProxyNode** %proxies, align 8, !dbg !4595
  %tobool = icmp ne %struct.PBVHProxyNode* %5, null, !dbg !4593
  br i1 %tobool, label %if.then, label %if.else, !dbg !4596

if.then:                                          ; preds = %entry
  %6 = load i8* (i8*, i64, i8*)*, i8* (i8*, i64, i8*)** @MEM_reallocN_id, align 8, !dbg !4597
  %7 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4597
  %proxies2 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %7, i32 0, i32 14, !dbg !4597
  %8 = load %struct.PBVHProxyNode*, %struct.PBVHProxyNode** %proxies2, align 8, !dbg !4597
  %9 = bitcast %struct.PBVHProxyNode* %8 to i8*, !dbg !4597
  %10 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4597
  %proxy_count3 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %10, i32 0, i32 13, !dbg !4597
  %11 = load i32, i32* %proxy_count3, align 8, !dbg !4597
  %conv = sext i32 %11 to i64, !dbg !4597
  %mul = mul i64 %conv, 8, !dbg !4597
  %call = call i8* %6(i8* %9, i64 %mul, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.BKE_pbvh_node_add_proxy, i64 0, i64 0)), !dbg !4597
  %12 = bitcast i8* %call to %struct.PBVHProxyNode*, !dbg !4597
  %13 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4598
  %proxies4 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %13, i32 0, i32 14, !dbg !4599
  store %struct.PBVHProxyNode* %12, %struct.PBVHProxyNode** %proxies4, align 8, !dbg !4600
  br label %if.end, !dbg !4598

if.else:                                          ; preds = %entry
  %14 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !4601
  %call5 = call i8* %14(i64 8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0)), !dbg !4601
  %15 = bitcast i8* %call5 to %struct.PBVHProxyNode*, !dbg !4601
  %16 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4602
  %proxies6 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %16, i32 0, i32 14, !dbg !4603
  store %struct.PBVHProxyNode* %15, %struct.PBVHProxyNode** %proxies6, align 8, !dbg !4604
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %17 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4605
  %18 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4606
  call void @BKE_pbvh_node_num_verts(%struct.PBVH* %17, %struct.PBVHNode* %18, i32* %totverts, i32* null), !dbg !4607
  %19 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !4608
  %20 = load i32, i32* %totverts, align 4, !dbg !4609
  %conv7 = sext i32 %20 to i64, !dbg !4609
  %mul8 = mul i64 12, %conv7, !dbg !4610
  %call9 = call i8* %19(i64 %mul8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0)), !dbg !4608
  %21 = bitcast i8* %call9 to [3 x float]*, !dbg !4608
  %22 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4611
  %proxies10 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %22, i32 0, i32 14, !dbg !4612
  %23 = load %struct.PBVHProxyNode*, %struct.PBVHProxyNode** %proxies10, align 8, !dbg !4612
  %24 = load i32, i32* %index, align 4, !dbg !4613
  %idxprom = sext i32 %24 to i64, !dbg !4611
  %arrayidx = getelementptr inbounds %struct.PBVHProxyNode, %struct.PBVHProxyNode* %23, i64 %idxprom, !dbg !4611
  %co = getelementptr inbounds %struct.PBVHProxyNode, %struct.PBVHProxyNode* %arrayidx, i32 0, i32 0, !dbg !4614
  store [3 x float]* %21, [3 x float]** %co, align 8, !dbg !4615
  %25 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4616
  %proxies11 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %25, i32 0, i32 14, !dbg !4617
  %26 = load %struct.PBVHProxyNode*, %struct.PBVHProxyNode** %proxies11, align 8, !dbg !4617
  %27 = load i32, i32* %index, align 4, !dbg !4618
  %idx.ext = sext i32 %27 to i64, !dbg !4619
  %add.ptr = getelementptr inbounds %struct.PBVHProxyNode, %struct.PBVHProxyNode* %26, i64 %idx.ext, !dbg !4619
  ret %struct.PBVHProxyNode* %add.ptr, !dbg !4620
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_node_free_proxies(%struct.PBVHNode* %node) #0 !dbg !4621 {
entry:
  %node.addr = alloca %struct.PBVHNode*, align 8
  %p = alloca i32, align 4
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !4622, metadata !DIExpression()), !dbg !4623
  call void @llvm.dbg.declare(metadata i32* %p, metadata !4624, metadata !DIExpression()), !dbg !4626
  store i32 0, i32* %p, align 4, !dbg !4627
  br label %for.cond, !dbg !4629

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %p, align 4, !dbg !4630
  %1 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4632
  %proxy_count = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %1, i32 0, i32 13, !dbg !4633
  %2 = load i32, i32* %proxy_count, align 8, !dbg !4633
  %cmp = icmp slt i32 %0, %2, !dbg !4634
  br i1 %cmp, label %for.body, label %for.end, !dbg !4635

for.body:                                         ; preds = %for.cond
  %3 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !4636
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4638
  %proxies = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %4, i32 0, i32 14, !dbg !4639
  %5 = load %struct.PBVHProxyNode*, %struct.PBVHProxyNode** %proxies, align 8, !dbg !4639
  %6 = load i32, i32* %p, align 4, !dbg !4640
  %idxprom = sext i32 %6 to i64, !dbg !4638
  %arrayidx = getelementptr inbounds %struct.PBVHProxyNode, %struct.PBVHProxyNode* %5, i64 %idxprom, !dbg !4638
  %co = getelementptr inbounds %struct.PBVHProxyNode, %struct.PBVHProxyNode* %arrayidx, i32 0, i32 0, !dbg !4641
  %7 = load [3 x float]*, [3 x float]** %co, align 8, !dbg !4641
  %8 = bitcast [3 x float]* %7 to i8*, !dbg !4638
  call void %3(i8* %8), !dbg !4636
  %9 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4642
  %proxies1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %9, i32 0, i32 14, !dbg !4643
  %10 = load %struct.PBVHProxyNode*, %struct.PBVHProxyNode** %proxies1, align 8, !dbg !4643
  %11 = load i32, i32* %p, align 4, !dbg !4644
  %idxprom2 = sext i32 %11 to i64, !dbg !4642
  %arrayidx3 = getelementptr inbounds %struct.PBVHProxyNode, %struct.PBVHProxyNode* %10, i64 %idxprom2, !dbg !4642
  %co4 = getelementptr inbounds %struct.PBVHProxyNode, %struct.PBVHProxyNode* %arrayidx3, i32 0, i32 0, !dbg !4645
  store [3 x float]* null, [3 x float]** %co4, align 8, !dbg !4646
  br label %for.inc, !dbg !4647

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %p, align 4, !dbg !4648
  %inc = add nsw i32 %12, 1, !dbg !4648
  store i32 %inc, i32* %p, align 4, !dbg !4648
  br label %for.cond, !dbg !4649, !llvm.loop !4650

for.end:                                          ; preds = %for.cond
  %13 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !4652
  %14 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4653
  %proxies5 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %14, i32 0, i32 14, !dbg !4654
  %15 = load %struct.PBVHProxyNode*, %struct.PBVHProxyNode** %proxies5, align 8, !dbg !4654
  %16 = bitcast %struct.PBVHProxyNode* %15 to i8*, !dbg !4653
  call void %13(i8* %16), !dbg !4652
  %17 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4655
  %proxies6 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %17, i32 0, i32 14, !dbg !4656
  store %struct.PBVHProxyNode* null, %struct.PBVHProxyNode** %proxies6, align 8, !dbg !4657
  %18 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4658
  %proxy_count7 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %18, i32 0, i32 13, !dbg !4659
  store i32 0, i32* %proxy_count7, align 8, !dbg !4660
  ret void, !dbg !4661
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_pbvh_gather_proxies(%struct.PBVH* %pbvh, %struct.PBVHNode*** %r_array, i32* %r_tot) #0 !dbg !4662 {
entry:
  %pbvh.addr = alloca %struct.PBVH*, align 8
  %r_array.addr = alloca %struct.PBVHNode***, align 8
  %r_tot.addr = alloca i32*, align 8
  %array = alloca %struct.PBVHNode**, align 8
  %node = alloca %struct.PBVHNode*, align 8
  %tot = alloca i32, align 4
  %space = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.PBVH* %pbvh, %struct.PBVH** %pbvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %pbvh.addr, metadata !4665, metadata !DIExpression()), !dbg !4666
  store %struct.PBVHNode*** %r_array, %struct.PBVHNode**** %r_array.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode**** %r_array.addr, metadata !4667, metadata !DIExpression()), !dbg !4668
  store i32* %r_tot, i32** %r_tot.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %r_tot.addr, metadata !4669, metadata !DIExpression()), !dbg !4670
  call void @llvm.dbg.declare(metadata %struct.PBVHNode*** %array, metadata !4671, metadata !DIExpression()), !dbg !4672
  store %struct.PBVHNode** null, %struct.PBVHNode*** %array, align 8, !dbg !4672
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node, metadata !4673, metadata !DIExpression()), !dbg !4674
  call void @llvm.dbg.declare(metadata i32* %tot, metadata !4675, metadata !DIExpression()), !dbg !4676
  store i32 0, i32* %tot, align 4, !dbg !4676
  call void @llvm.dbg.declare(metadata i32* %space, metadata !4677, metadata !DIExpression()), !dbg !4678
  store i32 0, i32* %space, align 4, !dbg !4678
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4679, metadata !DIExpression()), !dbg !4680
  store i32 0, i32* %n, align 4, !dbg !4681
  br label %for.cond, !dbg !4683

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n, align 4, !dbg !4684
  %1 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4686
  %totnode = getelementptr inbounds %struct.PBVH, %struct.PBVH* %1, i32 0, i32 4, !dbg !4687
  %2 = load i32, i32* %totnode, align 4, !dbg !4687
  %cmp = icmp slt i32 %0, %2, !dbg !4688
  br i1 %cmp, label %for.body, label %for.end, !dbg !4689

for.body:                                         ; preds = %for.cond
  %3 = load %struct.PBVH*, %struct.PBVH** %pbvh.addr, align 8, !dbg !4690
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %3, i32 0, i32 2, !dbg !4692
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !4692
  %5 = load i32, i32* %n, align 4, !dbg !4693
  %idx.ext = sext i32 %5 to i64, !dbg !4694
  %add.ptr = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %4, i64 %idx.ext, !dbg !4694
  store %struct.PBVHNode* %add.ptr, %struct.PBVHNode** %node, align 8, !dbg !4695
  %6 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4696
  %proxy_count = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %6, i32 0, i32 13, !dbg !4698
  %7 = load i32, i32* %proxy_count, align 8, !dbg !4698
  %cmp1 = icmp sgt i32 %7, 0, !dbg !4699
  br i1 %cmp1, label %if.then, label %if.end6, !dbg !4700

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %tot, align 4, !dbg !4701
  %9 = load i32, i32* %space, align 4, !dbg !4704
  %cmp2 = icmp eq i32 %8, %9, !dbg !4705
  br i1 %cmp2, label %if.then3, label %if.end, !dbg !4706

if.then3:                                         ; preds = %if.then
  %10 = load i32, i32* %tot, align 4, !dbg !4707
  %cmp4 = icmp eq i32 %10, 0, !dbg !4709
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !4710

cond.true:                                        ; preds = %if.then3
  br label %cond.end, !dbg !4710

cond.false:                                       ; preds = %if.then3
  %11 = load i32, i32* %space, align 4, !dbg !4711
  %mul = mul nsw i32 %11, 2, !dbg !4712
  br label %cond.end, !dbg !4710

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 32, %cond.true ], [ %mul, %cond.false ], !dbg !4710
  store i32 %cond, i32* %space, align 4, !dbg !4713
  %12 = load i8* (i8*, i64, i8*)*, i8* (i8*, i64, i8*)** @MEM_recallocN_id, align 8, !dbg !4714
  %13 = load %struct.PBVHNode**, %struct.PBVHNode*** %array, align 8, !dbg !4715
  %14 = bitcast %struct.PBVHNode** %13 to i8*, !dbg !4715
  %15 = load i32, i32* %space, align 4, !dbg !4716
  %conv = sext i32 %15 to i64, !dbg !4716
  %mul5 = mul i64 8, %conv, !dbg !4717
  %call = call i8* %12(i8* %14, i64 %mul5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.BKE_pbvh_gather_proxies, i64 0, i64 0)), !dbg !4714
  %16 = bitcast i8* %call to %struct.PBVHNode**, !dbg !4714
  store %struct.PBVHNode** %16, %struct.PBVHNode*** %array, align 8, !dbg !4718
  br label %if.end, !dbg !4719

if.end:                                           ; preds = %cond.end, %if.then
  %17 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !4720
  %18 = load %struct.PBVHNode**, %struct.PBVHNode*** %array, align 8, !dbg !4721
  %19 = load i32, i32* %tot, align 4, !dbg !4722
  %idxprom = sext i32 %19 to i64, !dbg !4721
  %arrayidx = getelementptr inbounds %struct.PBVHNode*, %struct.PBVHNode** %18, i64 %idxprom, !dbg !4721
  store %struct.PBVHNode* %17, %struct.PBVHNode** %arrayidx, align 8, !dbg !4723
  %20 = load i32, i32* %tot, align 4, !dbg !4724
  %inc = add nsw i32 %20, 1, !dbg !4724
  store i32 %inc, i32* %tot, align 4, !dbg !4724
  br label %if.end6, !dbg !4725

if.end6:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !4726

for.inc:                                          ; preds = %if.end6
  %21 = load i32, i32* %n, align 4, !dbg !4727
  %inc7 = add nsw i32 %21, 1, !dbg !4727
  store i32 %inc7, i32* %n, align 4, !dbg !4727
  br label %for.cond, !dbg !4728, !llvm.loop !4729

for.end:                                          ; preds = %for.cond
  %22 = load i32, i32* %tot, align 4, !dbg !4731
  %cmp8 = icmp eq i32 %22, 0, !dbg !4733
  br i1 %cmp8, label %land.lhs.true, label %if.end11, !dbg !4734

land.lhs.true:                                    ; preds = %for.end
  %23 = load %struct.PBVHNode**, %struct.PBVHNode*** %array, align 8, !dbg !4735
  %tobool = icmp ne %struct.PBVHNode** %23, null, !dbg !4735
  br i1 %tobool, label %if.then10, label %if.end11, !dbg !4736

if.then10:                                        ; preds = %land.lhs.true
  %24 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !4737
  %25 = load %struct.PBVHNode**, %struct.PBVHNode*** %array, align 8, !dbg !4739
  %26 = bitcast %struct.PBVHNode** %25 to i8*, !dbg !4739
  call void %24(i8* %26), !dbg !4737
  store %struct.PBVHNode** null, %struct.PBVHNode*** %array, align 8, !dbg !4740
  br label %if.end11, !dbg !4741

if.end11:                                         ; preds = %if.then10, %land.lhs.true, %for.end
  %27 = load %struct.PBVHNode**, %struct.PBVHNode*** %array, align 8, !dbg !4742
  %28 = load %struct.PBVHNode***, %struct.PBVHNode**** %r_array.addr, align 8, !dbg !4743
  store %struct.PBVHNode** %27, %struct.PBVHNode*** %28, align 8, !dbg !4744
  %29 = load i32, i32* %tot, align 4, !dbg !4745
  %30 = load i32*, i32** %r_tot.addr, align 8, !dbg !4746
  store i32 %29, i32* %30, align 4, !dbg !4747
  ret void, !dbg !4748
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @pbvh_vertex_iter_init(%struct.PBVH* %bvh, %struct.PBVHNode* %node, %struct.PBVHVertexIter* %vi, i32 %mode) #0 !dbg !4749 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  %vi.addr = alloca %struct.PBVHVertexIter*, align 8
  %mode.addr = alloca i32, align 4
  %grids = alloca %struct.CCGElem**, align 8
  %verts = alloca %struct.MVert*, align 8
  %grid_indices = alloca i32*, align 8
  %vert_indices = alloca i32*, align 8
  %totgrid = alloca i32, align 4
  %gridsize = alloca i32, align 4
  %uniq_verts = alloca i32, align 4
  %totvert = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !4753, metadata !DIExpression()), !dbg !4754
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !4755, metadata !DIExpression()), !dbg !4756
  store %struct.PBVHVertexIter* %vi, %struct.PBVHVertexIter** %vi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHVertexIter** %vi.addr, metadata !4757, metadata !DIExpression()), !dbg !4758
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4759, metadata !DIExpression()), !dbg !4760
  call void @llvm.dbg.declare(metadata %struct.CCGElem*** %grids, metadata !4761, metadata !DIExpression()), !dbg !4762
  call void @llvm.dbg.declare(metadata %struct.MVert** %verts, metadata !4763, metadata !DIExpression()), !dbg !4764
  call void @llvm.dbg.declare(metadata i32** %grid_indices, metadata !4765, metadata !DIExpression()), !dbg !4766
  call void @llvm.dbg.declare(metadata i32** %vert_indices, metadata !4767, metadata !DIExpression()), !dbg !4768
  call void @llvm.dbg.declare(metadata i32* %totgrid, metadata !4769, metadata !DIExpression()), !dbg !4770
  call void @llvm.dbg.declare(metadata i32* %gridsize, metadata !4771, metadata !DIExpression()), !dbg !4772
  call void @llvm.dbg.declare(metadata i32* %uniq_verts, metadata !4773, metadata !DIExpression()), !dbg !4774
  call void @llvm.dbg.declare(metadata i32* %totvert, metadata !4775, metadata !DIExpression()), !dbg !4776
  %0 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4777
  %grid = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %0, i32 0, i32 7, !dbg !4778
  store %struct.CCGElem* null, %struct.CCGElem** %grid, align 8, !dbg !4779
  %1 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4780
  %no = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %1, i32 0, i32 25, !dbg !4781
  store i16* null, i16** %no, align 8, !dbg !4782
  %2 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4783
  %fno = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %2, i32 0, i32 26, !dbg !4784
  store float* null, float** %fno, align 8, !dbg !4785
  %3 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4786
  %mvert = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %3, i32 0, i32 22, !dbg !4787
  store %struct.MVert* null, %struct.MVert** %mvert, align 8, !dbg !4788
  %4 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4789
  %5 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4790
  call void @BKE_pbvh_node_get_grids(%struct.PBVH* %4, %struct.PBVHNode* %5, i32** %grid_indices, i32* %totgrid, i32* null, i32* %gridsize, %struct.CCGElem*** %grids, %struct.DMGridAdjacency** null), !dbg !4791
  %6 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4792
  %7 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4793
  call void @BKE_pbvh_node_num_verts(%struct.PBVH* %6, %struct.PBVHNode* %7, i32* %uniq_verts, i32* %totvert), !dbg !4794
  %8 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4795
  %9 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4796
  call void @BKE_pbvh_node_get_verts(%struct.PBVH* %8, %struct.PBVHNode* %9, i32** %vert_indices, %struct.MVert** %verts), !dbg !4797
  %10 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4798
  %gridkey = getelementptr inbounds %struct.PBVH, %struct.PBVH* %10, i32 0, i32 12, !dbg !4799
  %11 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4800
  %key = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %11, i32 0, i32 8, !dbg !4801
  store %struct.CCGKey* %gridkey, %struct.CCGKey** %key, align 8, !dbg !4802
  %12 = load %struct.CCGElem**, %struct.CCGElem*** %grids, align 8, !dbg !4803
  %13 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4804
  %grids1 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %13, i32 0, i32 6, !dbg !4805
  store %struct.CCGElem** %12, %struct.CCGElem*** %grids1, align 8, !dbg !4806
  %14 = load i32*, i32** %grid_indices, align 8, !dbg !4807
  %15 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4808
  %grid_indices2 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %15, i32 0, i32 11, !dbg !4809
  store i32* %14, i32** %grid_indices2, align 8, !dbg !4810
  %16 = load %struct.CCGElem**, %struct.CCGElem*** %grids, align 8, !dbg !4811
  %tobool = icmp ne %struct.CCGElem** %16, null, !dbg !4812
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4812

cond.true:                                        ; preds = %entry
  %17 = load i32, i32* %totgrid, align 4, !dbg !4813
  br label %cond.end, !dbg !4812

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4812

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %17, %cond.true ], [ 1, %cond.false ], !dbg !4812
  %18 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4814
  %totgrid3 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %18, i32 0, i32 12, !dbg !4815
  store i32 %cond, i32* %totgrid3, align 8, !dbg !4816
  %19 = load i32, i32* %gridsize, align 4, !dbg !4817
  %20 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4818
  %gridsize4 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %20, i32 0, i32 13, !dbg !4819
  store i32 %19, i32* %gridsize4, align 4, !dbg !4820
  %21 = load i32, i32* %mode.addr, align 4, !dbg !4821
  %cmp = icmp eq i32 %21, 0, !dbg !4823
  br i1 %cmp, label %if.then, label %if.else, !dbg !4824

if.then:                                          ; preds = %cond.end
  %22 = load i32, i32* %totvert, align 4, !dbg !4825
  %23 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4826
  %totvert5 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %23, i32 0, i32 15, !dbg !4827
  store i32 %22, i32* %totvert5, align 8, !dbg !4828
  br label %if.end, !dbg !4826

if.else:                                          ; preds = %cond.end
  %24 = load i32, i32* %uniq_verts, align 4, !dbg !4829
  %25 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4830
  %totvert6 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %25, i32 0, i32 15, !dbg !4831
  store i32 %24, i32* %totvert6, align 8, !dbg !4832
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %26 = load i32*, i32** %vert_indices, align 8, !dbg !4833
  %27 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4834
  %vert_indices7 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %27, i32 0, i32 16, !dbg !4835
  store i32* %26, i32** %vert_indices7, align 8, !dbg !4836
  %28 = load %struct.MVert*, %struct.MVert** %verts, align 8, !dbg !4837
  %29 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4838
  %mverts = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %29, i32 0, i32 14, !dbg !4839
  store %struct.MVert* %28, %struct.MVert** %mverts, align 8, !dbg !4840
  %30 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4841
  %type = getelementptr inbounds %struct.PBVH, %struct.PBVH* %30, i32 0, i32 0, !dbg !4843
  %31 = load i32, i32* %type, align 8, !dbg !4843
  %cmp8 = icmp eq i32 %31, 2, !dbg !4844
  br i1 %cmp8, label %if.then9, label %if.end13, !dbg !4845

if.then9:                                         ; preds = %if.end
  %32 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4846
  %bm_unique_verts = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %32, i32 0, i32 18, !dbg !4848
  %33 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4849
  %bm_unique_verts10 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %33, i32 0, i32 16, !dbg !4850
  %34 = load %struct.GSet*, %struct.GSet** %bm_unique_verts10, align 8, !dbg !4850
  call void @BLI_gsetIterator_init(%struct.GSetIterator* %bm_unique_verts, %struct.GSet* %34), !dbg !4851
  %35 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4852
  %bm_other_verts = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %35, i32 0, i32 19, !dbg !4853
  %36 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !4854
  %bm_other_verts11 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %36, i32 0, i32 17, !dbg !4855
  %37 = load %struct.GSet*, %struct.GSet** %bm_other_verts11, align 8, !dbg !4855
  call void @BLI_gsetIterator_init(%struct.GSetIterator* %bm_other_verts, %struct.GSet* %37), !dbg !4856
  %38 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4857
  %bm = getelementptr inbounds %struct.PBVH, %struct.PBVH* %38, i32 0, i32 22, !dbg !4858
  %39 = load %struct.BMesh*, %struct.BMesh** %bm, align 8, !dbg !4858
  %vdata = getelementptr inbounds %struct.BMesh, %struct.BMesh* %39, i32 0, i32 24, !dbg !4859
  %40 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4860
  %bm_vdata = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %40, i32 0, i32 20, !dbg !4861
  store %struct.CustomData* %vdata, %struct.CustomData** %bm_vdata, align 8, !dbg !4862
  %41 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4863
  %bm_vdata12 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %41, i32 0, i32 20, !dbg !4864
  %42 = load %struct.CustomData*, %struct.CustomData** %bm_vdata12, align 8, !dbg !4864
  %call = call i32 @CustomData_get_offset(%struct.CustomData* %42, i32 34), !dbg !4865
  %43 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4866
  %cd_vert_mask_offset = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %43, i32 0, i32 21, !dbg !4867
  store i32 %call, i32* %cd_vert_mask_offset, align 8, !dbg !4868
  br label %if.end13, !dbg !4869

if.end13:                                         ; preds = %if.then9, %if.end
  %44 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4870
  %gh = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %44, i32 0, i32 10, !dbg !4871
  store i32* null, i32** %gh, align 8, !dbg !4872
  %45 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4873
  %grids14 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %45, i32 0, i32 6, !dbg !4875
  %46 = load %struct.CCGElem**, %struct.CCGElem*** %grids14, align 8, !dbg !4875
  %tobool15 = icmp ne %struct.CCGElem** %46, null, !dbg !4873
  br i1 %tobool15, label %land.lhs.true, label %if.end19, !dbg !4876

land.lhs.true:                                    ; preds = %if.end13
  %47 = load i32, i32* %mode.addr, align 4, !dbg !4877
  %cmp16 = icmp eq i32 %47, 1, !dbg !4878
  br i1 %cmp16, label %if.then17, label %if.end19, !dbg !4879

if.then17:                                        ; preds = %land.lhs.true
  %48 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4880
  %grid_hidden = getelementptr inbounds %struct.PBVH, %struct.PBVH* %48, i32 0, i32 18, !dbg !4881
  %49 = load i32**, i32*** %grid_hidden, align 8, !dbg !4881
  %50 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4882
  %grid_hidden18 = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %50, i32 0, i32 9, !dbg !4883
  store i32** %49, i32*** %grid_hidden18, align 8, !dbg !4884
  br label %if.end19, !dbg !4882

if.end19:                                         ; preds = %if.then17, %land.lhs.true, %if.end13
  %51 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4885
  %mask = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %51, i32 0, i32 27, !dbg !4886
  store float* null, float** %mask, align 8, !dbg !4887
  %52 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4888
  %type20 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %52, i32 0, i32 0, !dbg !4890
  %53 = load i32, i32* %type20, align 8, !dbg !4890
  %cmp21 = icmp eq i32 %53, 0, !dbg !4891
  br i1 %cmp21, label %if.then22, label %if.end25, !dbg !4892

if.then22:                                        ; preds = %if.end19
  %54 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4893
  %vdata23 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %54, i32 0, i32 11, !dbg !4894
  %55 = load %struct.CustomData*, %struct.CustomData** %vdata23, align 8, !dbg !4894
  %call24 = call i8* @CustomData_get_layer(%struct.CustomData* %55, i32 34), !dbg !4895
  %56 = bitcast i8* %call24 to float*, !dbg !4895
  %57 = load %struct.PBVHVertexIter*, %struct.PBVHVertexIter** %vi.addr, align 8, !dbg !4896
  %vmask = getelementptr inbounds %struct.PBVHVertexIter, %struct.PBVHVertexIter* %57, i32 0, i32 17, !dbg !4897
  store float* %56, float** %vmask, align 8, !dbg !4898
  br label %if.end25, !dbg !4896

if.end25:                                         ; preds = %if.then22, %if.end19
  ret void, !dbg !4899
}

declare dso_local i32 @CustomData_get_offset(%struct.CustomData*, i32) #3

declare dso_local i8* @CustomData_get_layer(%struct.CustomData*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @pbvh_show_diffuse_color_set(%struct.PBVH* %bvh, i8 zeroext %show_diffuse_color) #0 !dbg !4900 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %show_diffuse_color.addr = alloca i8, align 1
  %has_mask = alloca i8, align 1
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !4903, metadata !DIExpression()), !dbg !4904
  store i8 %show_diffuse_color, i8* %show_diffuse_color.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %show_diffuse_color.addr, metadata !4905, metadata !DIExpression()), !dbg !4906
  call void @llvm.dbg.declare(metadata i8* %has_mask, metadata !4907, metadata !DIExpression()), !dbg !4908
  store i8 0, i8* %has_mask, align 1, !dbg !4908
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4909
  %type = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 0, !dbg !4910
  %1 = load i32, i32* %type, align 8, !dbg !4910
  switch i32 %1, label %sw.epilog [
    i32 1, label %sw.bb
    i32 0, label %sw.bb3
    i32 2, label %sw.bb7
  ], !dbg !4911

sw.bb:                                            ; preds = %entry
  %2 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4912
  %gridkey = getelementptr inbounds %struct.PBVH, %struct.PBVH* %2, i32 0, i32 12, !dbg !4914
  %has_mask1 = getelementptr inbounds %struct.CCGKey, %struct.CCGKey* %gridkey, i32 0, i32 9, !dbg !4915
  %3 = load i32, i32* %has_mask1, align 4, !dbg !4915
  %cmp = icmp ne i32 %3, 0, !dbg !4916
  %conv = zext i1 %cmp to i32, !dbg !4916
  %conv2 = trunc i32 %conv to i8, !dbg !4917
  store i8 %conv2, i8* %has_mask, align 1, !dbg !4918
  br label %sw.epilog, !dbg !4919

sw.bb3:                                           ; preds = %entry
  %4 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4920
  %vdata = getelementptr inbounds %struct.PBVH, %struct.PBVH* %4, i32 0, i32 11, !dbg !4921
  %5 = load %struct.CustomData*, %struct.CustomData** %vdata, align 8, !dbg !4921
  %tobool = icmp ne %struct.CustomData* %5, null, !dbg !4920
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4922

land.rhs:                                         ; preds = %sw.bb3
  %6 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4923
  %vdata4 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %6, i32 0, i32 11, !dbg !4924
  %7 = load %struct.CustomData*, %struct.CustomData** %vdata4, align 8, !dbg !4924
  %call = call i8* @CustomData_get_layer(%struct.CustomData* %7, i32 34), !dbg !4925
  %tobool5 = icmp ne i8* %call, null, !dbg !4922
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb3
  %8 = phi i1 [ false, %sw.bb3 ], [ %tobool5, %land.rhs ], !dbg !4926
  %land.ext = zext i1 %8 to i32, !dbg !4922
  %conv6 = trunc i32 %land.ext to i8, !dbg !4927
  store i8 %conv6, i8* %has_mask, align 1, !dbg !4928
  br label %sw.epilog, !dbg !4929

sw.bb7:                                           ; preds = %entry
  %9 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4930
  %bm = getelementptr inbounds %struct.PBVH, %struct.PBVH* %9, i32 0, i32 22, !dbg !4931
  %10 = load %struct.BMesh*, %struct.BMesh** %bm, align 8, !dbg !4931
  %tobool8 = icmp ne %struct.BMesh* %10, null, !dbg !4930
  br i1 %tobool8, label %land.rhs9, label %land.end15, !dbg !4932

land.rhs9:                                        ; preds = %sw.bb7
  %11 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4933
  %bm10 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %11, i32 0, i32 22, !dbg !4934
  %12 = load %struct.BMesh*, %struct.BMesh** %bm10, align 8, !dbg !4934
  %vdata11 = getelementptr inbounds %struct.BMesh, %struct.BMesh* %12, i32 0, i32 24, !dbg !4935
  %call12 = call i32 @CustomData_get_offset(%struct.CustomData* %vdata11, i32 34), !dbg !4936
  %cmp13 = icmp ne i32 %call12, -1, !dbg !4937
  br label %land.end15

land.end15:                                       ; preds = %land.rhs9, %sw.bb7
  %13 = phi i1 [ false, %sw.bb7 ], [ %cmp13, %land.rhs9 ], !dbg !4926
  %land.ext16 = zext i1 %13 to i32, !dbg !4932
  %conv17 = trunc i32 %land.ext16 to i8, !dbg !4938
  store i8 %conv17, i8* %has_mask, align 1, !dbg !4939
  br label %sw.epilog, !dbg !4940

sw.epilog:                                        ; preds = %entry, %land.end15, %land.end, %sw.bb
  %14 = load i8, i8* %has_mask, align 1, !dbg !4941
  %tobool18 = icmp ne i8 %14, 0, !dbg !4941
  br i1 %tobool18, label %lor.rhs, label %lor.end, !dbg !4942

lor.rhs:                                          ; preds = %sw.epilog
  %15 = load i8, i8* %show_diffuse_color.addr, align 1, !dbg !4943
  %conv19 = zext i8 %15 to i32, !dbg !4943
  %tobool20 = icmp ne i32 %conv19, 0, !dbg !4942
  br label %lor.end, !dbg !4942

lor.end:                                          ; preds = %lor.rhs, %sw.epilog
  %16 = phi i1 [ true, %sw.epilog ], [ %tobool20, %lor.rhs ]
  %lor.ext = zext i1 %16 to i32, !dbg !4942
  %conv21 = trunc i32 %lor.ext to i8, !dbg !4944
  %17 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4945
  %show_diffuse_color22 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %17, i32 0, i32 21, !dbg !4946
  store i8 %conv21, i8* %show_diffuse_color22, align 1, !dbg !4947
  ret void, !dbg !4948
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_sub(%struct.PBVH* %bvh, i32 %node_index, %struct.BB* %cb, %struct.BBC* %prim_bbc, i32 %offset, i32 %count) #0 !dbg !4949 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node_index.addr = alloca i32, align 4
  %cb.addr = alloca %struct.BB*, align 8
  %prim_bbc.addr = alloca %struct.BBC*, align 8
  %offset.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %axis = alloca i32, align 4
  %end = alloca i32, align 4
  %below_leaf_limit = alloca i32, align 4
  %cb_backing = alloca %struct.BB, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !4952, metadata !DIExpression()), !dbg !4953
  store i32 %node_index, i32* %node_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %node_index.addr, metadata !4954, metadata !DIExpression()), !dbg !4955
  store %struct.BB* %cb, %struct.BB** %cb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BB** %cb.addr, metadata !4956, metadata !DIExpression()), !dbg !4957
  store %struct.BBC* %prim_bbc, %struct.BBC** %prim_bbc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BBC** %prim_bbc.addr, metadata !4958, metadata !DIExpression()), !dbg !4959
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !4960, metadata !DIExpression()), !dbg !4961
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !4962, metadata !DIExpression()), !dbg !4963
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4964, metadata !DIExpression()), !dbg !4965
  call void @llvm.dbg.declare(metadata i32* %axis, metadata !4966, metadata !DIExpression()), !dbg !4967
  call void @llvm.dbg.declare(metadata i32* %end, metadata !4968, metadata !DIExpression()), !dbg !4969
  call void @llvm.dbg.declare(metadata i32* %below_leaf_limit, metadata !4970, metadata !DIExpression()), !dbg !4971
  call void @llvm.dbg.declare(metadata %struct.BB* %cb_backing, metadata !4972, metadata !DIExpression()), !dbg !4973
  %0 = load i32, i32* %count.addr, align 4, !dbg !4974
  %1 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4975
  %leaf_limit = getelementptr inbounds %struct.PBVH, %struct.PBVH* %1, i32 0, i32 8, !dbg !4976
  %2 = load i32, i32* %leaf_limit, align 8, !dbg !4976
  %cmp = icmp sle i32 %0, %2, !dbg !4977
  %conv = zext i1 %cmp to i32, !dbg !4977
  store i32 %conv, i32* %below_leaf_limit, align 4, !dbg !4978
  %3 = load i32, i32* %below_leaf_limit, align 4, !dbg !4979
  %tobool = icmp ne i32 %3, 0, !dbg !4979
  br i1 %tobool, label %if.then, label %if.end3, !dbg !4981

if.then:                                          ; preds = %entry
  %4 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4982
  %5 = load i32, i32* %offset.addr, align 4, !dbg !4985
  %6 = load i32, i32* %count.addr, align 4, !dbg !4986
  %call = call i32 @leaf_needs_material_split(%struct.PBVH* %4, i32 %5, i32 %6), !dbg !4987
  %tobool1 = icmp ne i32 %call, 0, !dbg !4987
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !4988

if.then2:                                         ; preds = %if.then
  %7 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4989
  %8 = load i32, i32* %node_index.addr, align 4, !dbg !4991
  %9 = load %struct.BBC*, %struct.BBC** %prim_bbc.addr, align 8, !dbg !4992
  %10 = load i32, i32* %offset.addr, align 4, !dbg !4993
  %11 = load i32, i32* %count.addr, align 4, !dbg !4994
  call void @build_leaf(%struct.PBVH* %7, i32 %8, %struct.BBC* %9, i32 %10, i32 %11), !dbg !4995
  br label %return, !dbg !4996

if.end:                                           ; preds = %if.then
  br label %if.end3, !dbg !4997

if.end3:                                          ; preds = %if.end, %entry
  %12 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !4998
  %totnode = getelementptr inbounds %struct.PBVH, %struct.PBVH* %12, i32 0, i32 4, !dbg !4999
  %13 = load i32, i32* %totnode, align 4, !dbg !4999
  %14 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5000
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %14, i32 0, i32 2, !dbg !5001
  %15 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !5001
  %16 = load i32, i32* %node_index.addr, align 4, !dbg !5002
  %idxprom = sext i32 %16 to i64, !dbg !5000
  %arrayidx = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %15, i64 %idxprom, !dbg !5000
  %children_offset = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %arrayidx, i32 0, i32 3, !dbg !5003
  store i32 %13, i32* %children_offset, align 8, !dbg !5004
  %17 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5005
  %18 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5006
  %totnode4 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %18, i32 0, i32 4, !dbg !5007
  %19 = load i32, i32* %totnode4, align 4, !dbg !5007
  %add = add nsw i32 %19, 2, !dbg !5008
  call void @pbvh_grow_nodes(%struct.PBVH* %17, i32 %add), !dbg !5009
  %20 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5010
  %21 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5011
  %nodes5 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %21, i32 0, i32 2, !dbg !5012
  %22 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes5, align 8, !dbg !5012
  %23 = load i32, i32* %node_index.addr, align 4, !dbg !5013
  %idxprom6 = sext i32 %23 to i64, !dbg !5011
  %arrayidx7 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %22, i64 %idxprom6, !dbg !5011
  %24 = load %struct.BBC*, %struct.BBC** %prim_bbc.addr, align 8, !dbg !5014
  %25 = load i32, i32* %offset.addr, align 4, !dbg !5015
  %26 = load i32, i32* %count.addr, align 4, !dbg !5016
  call void @update_vb(%struct.PBVH* %20, %struct.PBVHNode* %arrayidx7, %struct.BBC* %24, i32 %25, i32 %26), !dbg !5017
  %27 = load i32, i32* %below_leaf_limit, align 4, !dbg !5018
  %tobool8 = icmp ne i32 %27, 0, !dbg !5018
  br i1 %tobool8, label %if.else, label %if.then9, !dbg !5020

if.then9:                                         ; preds = %if.end3
  %28 = load %struct.BB*, %struct.BB** %cb.addr, align 8, !dbg !5021
  %tobool10 = icmp ne %struct.BB* %28, null, !dbg !5021
  br i1 %tobool10, label %if.end19, label %if.then11, !dbg !5024

if.then11:                                        ; preds = %if.then9
  store %struct.BB* %cb_backing, %struct.BB** %cb.addr, align 8, !dbg !5025
  %29 = load %struct.BB*, %struct.BB** %cb.addr, align 8, !dbg !5027
  call void @BB_reset(%struct.BB* %29), !dbg !5028
  %30 = load i32, i32* %offset.addr, align 4, !dbg !5029
  %31 = load i32, i32* %count.addr, align 4, !dbg !5031
  %add12 = add nsw i32 %30, %31, !dbg !5032
  %sub = sub nsw i32 %add12, 1, !dbg !5033
  store i32 %sub, i32* %i, align 4, !dbg !5034
  br label %for.cond, !dbg !5035

for.cond:                                         ; preds = %for.inc, %if.then11
  %32 = load i32, i32* %i, align 4, !dbg !5036
  %33 = load i32, i32* %offset.addr, align 4, !dbg !5038
  %cmp13 = icmp sge i32 %32, %33, !dbg !5039
  br i1 %cmp13, label %for.body, label %for.end, !dbg !5040

for.body:                                         ; preds = %for.cond
  %34 = load %struct.BB*, %struct.BB** %cb.addr, align 8, !dbg !5041
  %35 = load %struct.BBC*, %struct.BBC** %prim_bbc.addr, align 8, !dbg !5042
  %36 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5043
  %prim_indices = getelementptr inbounds %struct.PBVH, %struct.PBVH* %36, i32 0, i32 5, !dbg !5044
  %37 = load i32*, i32** %prim_indices, align 8, !dbg !5044
  %38 = load i32, i32* %i, align 4, !dbg !5045
  %idxprom15 = sext i32 %38 to i64, !dbg !5043
  %arrayidx16 = getelementptr inbounds i32, i32* %37, i64 %idxprom15, !dbg !5043
  %39 = load i32, i32* %arrayidx16, align 4, !dbg !5043
  %idxprom17 = sext i32 %39 to i64, !dbg !5042
  %arrayidx18 = getelementptr inbounds %struct.BBC, %struct.BBC* %35, i64 %idxprom17, !dbg !5042
  %bcentroid = getelementptr inbounds %struct.BBC, %struct.BBC* %arrayidx18, i32 0, i32 2, !dbg !5046
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %bcentroid, i64 0, i64 0, !dbg !5042
  call void @BB_expand(%struct.BB* %34, float* %arraydecay), !dbg !5047
  br label %for.inc, !dbg !5047

for.inc:                                          ; preds = %for.body
  %40 = load i32, i32* %i, align 4, !dbg !5048
  %dec = add nsw i32 %40, -1, !dbg !5048
  store i32 %dec, i32* %i, align 4, !dbg !5048
  br label %for.cond, !dbg !5049, !llvm.loop !5050

for.end:                                          ; preds = %for.cond
  br label %if.end19, !dbg !5052

if.end19:                                         ; preds = %for.end, %if.then9
  %41 = load %struct.BB*, %struct.BB** %cb.addr, align 8, !dbg !5053
  %call20 = call i32 @BB_widest_axis(%struct.BB* %41), !dbg !5054
  store i32 %call20, i32* %axis, align 4, !dbg !5055
  %42 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5056
  %prim_indices21 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %42, i32 0, i32 5, !dbg !5057
  %43 = load i32*, i32** %prim_indices21, align 8, !dbg !5057
  %44 = load i32, i32* %offset.addr, align 4, !dbg !5058
  %45 = load i32, i32* %offset.addr, align 4, !dbg !5059
  %46 = load i32, i32* %count.addr, align 4, !dbg !5060
  %add22 = add nsw i32 %45, %46, !dbg !5061
  %sub23 = sub nsw i32 %add22, 1, !dbg !5062
  %47 = load i32, i32* %axis, align 4, !dbg !5063
  %48 = load %struct.BB*, %struct.BB** %cb.addr, align 8, !dbg !5064
  %bmax = getelementptr inbounds %struct.BB, %struct.BB* %48, i32 0, i32 1, !dbg !5065
  %49 = load i32, i32* %axis, align 4, !dbg !5066
  %idxprom24 = sext i32 %49 to i64, !dbg !5064
  %arrayidx25 = getelementptr inbounds [3 x float], [3 x float]* %bmax, i64 0, i64 %idxprom24, !dbg !5064
  %50 = load float, float* %arrayidx25, align 4, !dbg !5064
  %51 = load %struct.BB*, %struct.BB** %cb.addr, align 8, !dbg !5067
  %bmin = getelementptr inbounds %struct.BB, %struct.BB* %51, i32 0, i32 0, !dbg !5068
  %52 = load i32, i32* %axis, align 4, !dbg !5069
  %idxprom26 = sext i32 %52 to i64, !dbg !5067
  %arrayidx27 = getelementptr inbounds [3 x float], [3 x float]* %bmin, i64 0, i64 %idxprom26, !dbg !5067
  %53 = load float, float* %arrayidx27, align 4, !dbg !5067
  %add28 = fadd float %50, %53, !dbg !5070
  %mul = fmul float %add28, 5.000000e-01, !dbg !5071
  %54 = load %struct.BBC*, %struct.BBC** %prim_bbc.addr, align 8, !dbg !5072
  %call29 = call i32 @partition_indices(i32* %43, i32 %44, i32 %sub23, i32 %47, float %mul, %struct.BBC* %54), !dbg !5073
  store i32 %call29, i32* %end, align 4, !dbg !5074
  br label %if.end33, !dbg !5075

if.else:                                          ; preds = %if.end3
  %55 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5076
  %56 = load i32, i32* %offset.addr, align 4, !dbg !5078
  %57 = load i32, i32* %offset.addr, align 4, !dbg !5079
  %58 = load i32, i32* %count.addr, align 4, !dbg !5080
  %add30 = add nsw i32 %57, %58, !dbg !5081
  %sub31 = sub nsw i32 %add30, 1, !dbg !5082
  %call32 = call i32 @partition_indices_material(%struct.PBVH* %55, i32 %56, i32 %sub31), !dbg !5083
  store i32 %call32, i32* %end, align 4, !dbg !5084
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.end19
  %59 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5085
  %60 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5086
  %nodes34 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %60, i32 0, i32 2, !dbg !5087
  %61 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes34, align 8, !dbg !5087
  %62 = load i32, i32* %node_index.addr, align 4, !dbg !5088
  %idxprom35 = sext i32 %62 to i64, !dbg !5086
  %arrayidx36 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %61, i64 %idxprom35, !dbg !5086
  %children_offset37 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %arrayidx36, i32 0, i32 3, !dbg !5089
  %63 = load i32, i32* %children_offset37, align 8, !dbg !5089
  %64 = load %struct.BBC*, %struct.BBC** %prim_bbc.addr, align 8, !dbg !5090
  %65 = load i32, i32* %offset.addr, align 4, !dbg !5091
  %66 = load i32, i32* %end, align 4, !dbg !5092
  %67 = load i32, i32* %offset.addr, align 4, !dbg !5093
  %sub38 = sub nsw i32 %66, %67, !dbg !5094
  call void @build_sub(%struct.PBVH* %59, i32 %63, %struct.BB* null, %struct.BBC* %64, i32 %65, i32 %sub38), !dbg !5095
  %68 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5096
  %69 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5097
  %nodes39 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %69, i32 0, i32 2, !dbg !5098
  %70 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes39, align 8, !dbg !5098
  %71 = load i32, i32* %node_index.addr, align 4, !dbg !5099
  %idxprom40 = sext i32 %71 to i64, !dbg !5097
  %arrayidx41 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %70, i64 %idxprom40, !dbg !5097
  %children_offset42 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %arrayidx41, i32 0, i32 3, !dbg !5100
  %72 = load i32, i32* %children_offset42, align 8, !dbg !5100
  %add43 = add nsw i32 %72, 1, !dbg !5101
  %73 = load %struct.BBC*, %struct.BBC** %prim_bbc.addr, align 8, !dbg !5102
  %74 = load i32, i32* %end, align 4, !dbg !5103
  %75 = load i32, i32* %offset.addr, align 4, !dbg !5104
  %76 = load i32, i32* %count.addr, align 4, !dbg !5105
  %add44 = add nsw i32 %75, %76, !dbg !5106
  %77 = load i32, i32* %end, align 4, !dbg !5107
  %sub45 = sub nsw i32 %add44, %77, !dbg !5108
  call void @build_sub(%struct.PBVH* %68, i32 %add43, %struct.BB* null, %struct.BBC* %73, i32 %74, i32 %sub45), !dbg !5109
  br label %return, !dbg !5110

return:                                           ; preds = %if.end33, %if.then2
  ret void, !dbg !5110
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @leaf_needs_material_split(%struct.PBVH* %bvh, i32 %offset, i32 %count) #0 !dbg !5111 {
entry:
  %retval = alloca i32, align 4
  %bvh.addr = alloca %struct.PBVH*, align 8
  %offset.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %prim = alloca i32, align 4
  %first = alloca %struct.MFace*, align 8
  %first15 = alloca %struct.DMFlagMat*, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !5114, metadata !DIExpression()), !dbg !5115
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !5116, metadata !DIExpression()), !dbg !5117
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !5118, metadata !DIExpression()), !dbg !5119
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5120, metadata !DIExpression()), !dbg !5121
  call void @llvm.dbg.declare(metadata i32* %prim, metadata !5122, metadata !DIExpression()), !dbg !5123
  %0 = load i32, i32* %count.addr, align 4, !dbg !5124
  %cmp = icmp sle i32 %0, 1, !dbg !5126
  br i1 %cmp, label %if.then, label %if.end, !dbg !5127

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !5128
  br label %return, !dbg !5128

if.end:                                           ; preds = %entry
  %1 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5129
  %faces = getelementptr inbounds %struct.PBVH, %struct.PBVH* %1, i32 0, i32 10, !dbg !5131
  %2 = load %struct.MFace*, %struct.MFace** %faces, align 8, !dbg !5131
  %tobool = icmp ne %struct.MFace* %2, null, !dbg !5129
  br i1 %tobool, label %if.then1, label %if.else, !dbg !5132

if.then1:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.MFace** %first, metadata !5133, metadata !DIExpression()), !dbg !5135
  %3 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5136
  %faces2 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %3, i32 0, i32 10, !dbg !5137
  %4 = load %struct.MFace*, %struct.MFace** %faces2, align 8, !dbg !5137
  %5 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5138
  %prim_indices = getelementptr inbounds %struct.PBVH, %struct.PBVH* %5, i32 0, i32 5, !dbg !5139
  %6 = load i32*, i32** %prim_indices, align 8, !dbg !5139
  %7 = load i32, i32* %offset.addr, align 4, !dbg !5140
  %idxprom = sext i32 %7 to i64, !dbg !5138
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom, !dbg !5138
  %8 = load i32, i32* %arrayidx, align 4, !dbg !5138
  %idxprom3 = sext i32 %8 to i64, !dbg !5136
  %arrayidx4 = getelementptr inbounds %struct.MFace, %struct.MFace* %4, i64 %idxprom3, !dbg !5136
  store %struct.MFace* %arrayidx4, %struct.MFace** %first, align 8, !dbg !5135
  %9 = load i32, i32* %offset.addr, align 4, !dbg !5141
  %10 = load i32, i32* %count.addr, align 4, !dbg !5143
  %add = add nsw i32 %9, %10, !dbg !5144
  %sub = sub nsw i32 %add, 1, !dbg !5145
  store i32 %sub, i32* %i, align 4, !dbg !5146
  br label %for.cond, !dbg !5147

for.cond:                                         ; preds = %for.inc, %if.then1
  %11 = load i32, i32* %i, align 4, !dbg !5148
  %12 = load i32, i32* %offset.addr, align 4, !dbg !5150
  %cmp5 = icmp sgt i32 %11, %12, !dbg !5151
  br i1 %cmp5, label %for.body, label %for.end, !dbg !5152

for.body:                                         ; preds = %for.cond
  %13 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5153
  %prim_indices6 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %13, i32 0, i32 5, !dbg !5155
  %14 = load i32*, i32** %prim_indices6, align 8, !dbg !5155
  %15 = load i32, i32* %i, align 4, !dbg !5156
  %idxprom7 = sext i32 %15 to i64, !dbg !5153
  %arrayidx8 = getelementptr inbounds i32, i32* %14, i64 %idxprom7, !dbg !5153
  %16 = load i32, i32* %arrayidx8, align 4, !dbg !5153
  store i32 %16, i32* %prim, align 4, !dbg !5157
  %17 = load %struct.MFace*, %struct.MFace** %first, align 8, !dbg !5158
  %18 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5160
  %faces9 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %18, i32 0, i32 10, !dbg !5161
  %19 = load %struct.MFace*, %struct.MFace** %faces9, align 8, !dbg !5161
  %20 = load i32, i32* %prim, align 4, !dbg !5162
  %idxprom10 = sext i32 %20 to i64, !dbg !5160
  %arrayidx11 = getelementptr inbounds %struct.MFace, %struct.MFace* %19, i64 %idxprom10, !dbg !5160
  %call = call i32 @face_materials_match(%struct.MFace* %17, %struct.MFace* %arrayidx11), !dbg !5163
  %tobool12 = icmp ne i32 %call, 0, !dbg !5163
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !5164

if.then13:                                        ; preds = %for.body
  store i32 1, i32* %retval, align 4, !dbg !5165
  br label %return, !dbg !5165

if.end14:                                         ; preds = %for.body
  br label %for.inc, !dbg !5166

for.inc:                                          ; preds = %if.end14
  %21 = load i32, i32* %i, align 4, !dbg !5167
  %dec = add nsw i32 %21, -1, !dbg !5167
  store i32 %dec, i32* %i, align 4, !dbg !5167
  br label %for.cond, !dbg !5168, !llvm.loop !5169

for.end:                                          ; preds = %for.cond
  br label %if.end39, !dbg !5171

if.else:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.DMFlagMat** %first15, metadata !5172, metadata !DIExpression()), !dbg !5174
  %22 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5175
  %grid_flag_mats = getelementptr inbounds %struct.PBVH, %struct.PBVH* %22, i32 0, i32 16, !dbg !5176
  %23 = load %struct.DMFlagMat*, %struct.DMFlagMat** %grid_flag_mats, align 8, !dbg !5176
  %24 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5177
  %prim_indices16 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %24, i32 0, i32 5, !dbg !5178
  %25 = load i32*, i32** %prim_indices16, align 8, !dbg !5178
  %26 = load i32, i32* %offset.addr, align 4, !dbg !5179
  %idxprom17 = sext i32 %26 to i64, !dbg !5177
  %arrayidx18 = getelementptr inbounds i32, i32* %25, i64 %idxprom17, !dbg !5177
  %27 = load i32, i32* %arrayidx18, align 4, !dbg !5177
  %idxprom19 = sext i32 %27 to i64, !dbg !5175
  %arrayidx20 = getelementptr inbounds %struct.DMFlagMat, %struct.DMFlagMat* %23, i64 %idxprom19, !dbg !5175
  store %struct.DMFlagMat* %arrayidx20, %struct.DMFlagMat** %first15, align 8, !dbg !5174
  %28 = load i32, i32* %offset.addr, align 4, !dbg !5180
  %29 = load i32, i32* %count.addr, align 4, !dbg !5182
  %add21 = add nsw i32 %28, %29, !dbg !5183
  %sub22 = sub nsw i32 %add21, 1, !dbg !5184
  store i32 %sub22, i32* %i, align 4, !dbg !5185
  br label %for.cond23, !dbg !5186

for.cond23:                                       ; preds = %for.inc36, %if.else
  %30 = load i32, i32* %i, align 4, !dbg !5187
  %31 = load i32, i32* %offset.addr, align 4, !dbg !5189
  %cmp24 = icmp sgt i32 %30, %31, !dbg !5190
  br i1 %cmp24, label %for.body25, label %for.end38, !dbg !5191

for.body25:                                       ; preds = %for.cond23
  %32 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5192
  %prim_indices26 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %32, i32 0, i32 5, !dbg !5194
  %33 = load i32*, i32** %prim_indices26, align 8, !dbg !5194
  %34 = load i32, i32* %i, align 4, !dbg !5195
  %idxprom27 = sext i32 %34 to i64, !dbg !5192
  %arrayidx28 = getelementptr inbounds i32, i32* %33, i64 %idxprom27, !dbg !5192
  %35 = load i32, i32* %arrayidx28, align 4, !dbg !5192
  store i32 %35, i32* %prim, align 4, !dbg !5196
  %36 = load %struct.DMFlagMat*, %struct.DMFlagMat** %first15, align 8, !dbg !5197
  %37 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5199
  %grid_flag_mats29 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %37, i32 0, i32 16, !dbg !5200
  %38 = load %struct.DMFlagMat*, %struct.DMFlagMat** %grid_flag_mats29, align 8, !dbg !5200
  %39 = load i32, i32* %prim, align 4, !dbg !5201
  %idxprom30 = sext i32 %39 to i64, !dbg !5199
  %arrayidx31 = getelementptr inbounds %struct.DMFlagMat, %struct.DMFlagMat* %38, i64 %idxprom30, !dbg !5199
  %call32 = call i32 @grid_materials_match(%struct.DMFlagMat* %36, %struct.DMFlagMat* %arrayidx31), !dbg !5202
  %tobool33 = icmp ne i32 %call32, 0, !dbg !5202
  br i1 %tobool33, label %if.end35, label %if.then34, !dbg !5203

if.then34:                                        ; preds = %for.body25
  store i32 1, i32* %retval, align 4, !dbg !5204
  br label %return, !dbg !5204

if.end35:                                         ; preds = %for.body25
  br label %for.inc36, !dbg !5205

for.inc36:                                        ; preds = %if.end35
  %40 = load i32, i32* %i, align 4, !dbg !5206
  %dec37 = add nsw i32 %40, -1, !dbg !5206
  store i32 %dec37, i32* %i, align 4, !dbg !5206
  br label %for.cond23, !dbg !5207, !llvm.loop !5208

for.end38:                                        ; preds = %for.cond23
  br label %if.end39

if.end39:                                         ; preds = %for.end38, %for.end
  store i32 0, i32* %retval, align 4, !dbg !5210
  br label %return, !dbg !5210

return:                                           ; preds = %if.end39, %if.then34, %if.then13, %if.then
  %41 = load i32, i32* %retval, align 4, !dbg !5211
  ret i32 %41, !dbg !5211
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_leaf(%struct.PBVH* %bvh, i32 %node_index, %struct.BBC* %prim_bbc, i32 %offset, i32 %count) #0 !dbg !5212 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node_index.addr = alloca i32, align 4
  %prim_bbc.addr = alloca %struct.BBC*, align 8
  %offset.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !5215, metadata !DIExpression()), !dbg !5216
  store i32 %node_index, i32* %node_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %node_index.addr, metadata !5217, metadata !DIExpression()), !dbg !5218
  store %struct.BBC* %prim_bbc, %struct.BBC** %prim_bbc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BBC** %prim_bbc.addr, metadata !5219, metadata !DIExpression()), !dbg !5220
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !5221, metadata !DIExpression()), !dbg !5222
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !5223, metadata !DIExpression()), !dbg !5224
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5225
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 2, !dbg !5226
  %1 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !5226
  %2 = load i32, i32* %node_index.addr, align 4, !dbg !5227
  %idxprom = sext i32 %2 to i64, !dbg !5225
  %arrayidx = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %1, i64 %idxprom, !dbg !5225
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %arrayidx, i32 0, i32 10, !dbg !5228
  %bf.load = load i16, i16* %flag, align 8, !dbg !5229
  %bf.cast = zext i16 %bf.load to i32, !dbg !5229
  %or = or i32 %bf.cast, 1, !dbg !5229
  %3 = trunc i32 %or to i16, !dbg !5229
  store i16 %3, i16* %flag, align 8, !dbg !5229
  %bf.result.cast = zext i16 %3 to i32, !dbg !5229
  %4 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5230
  %prim_indices = getelementptr inbounds %struct.PBVH, %struct.PBVH* %4, i32 0, i32 5, !dbg !5231
  %5 = load i32*, i32** %prim_indices, align 8, !dbg !5231
  %6 = load i32, i32* %offset.addr, align 4, !dbg !5232
  %idx.ext = sext i32 %6 to i64, !dbg !5233
  %add.ptr = getelementptr inbounds i32, i32* %5, i64 %idx.ext, !dbg !5233
  %7 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5234
  %nodes1 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %7, i32 0, i32 2, !dbg !5235
  %8 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes1, align 8, !dbg !5235
  %9 = load i32, i32* %node_index.addr, align 4, !dbg !5236
  %idxprom2 = sext i32 %9 to i64, !dbg !5234
  %arrayidx3 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %8, i64 %idxprom2, !dbg !5234
  %prim_indices4 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %arrayidx3, i32 0, i32 4, !dbg !5237
  store i32* %add.ptr, i32** %prim_indices4, align 8, !dbg !5238
  %10 = load i32, i32* %count.addr, align 4, !dbg !5239
  %11 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5240
  %nodes5 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %11, i32 0, i32 2, !dbg !5241
  %12 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes5, align 8, !dbg !5241
  %13 = load i32, i32* %node_index.addr, align 4, !dbg !5242
  %idxprom6 = sext i32 %13 to i64, !dbg !5240
  %arrayidx7 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %12, i64 %idxprom6, !dbg !5240
  %totprim = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %arrayidx7, i32 0, i32 5, !dbg !5243
  store i32 %10, i32* %totprim, align 8, !dbg !5244
  %14 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5245
  %15 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5246
  %nodes8 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %15, i32 0, i32 2, !dbg !5247
  %16 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes8, align 8, !dbg !5247
  %17 = load i32, i32* %node_index.addr, align 4, !dbg !5248
  %idxprom9 = sext i32 %17 to i64, !dbg !5246
  %arrayidx10 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %16, i64 %idxprom9, !dbg !5246
  %18 = load %struct.BBC*, %struct.BBC** %prim_bbc.addr, align 8, !dbg !5249
  %19 = load i32, i32* %offset.addr, align 4, !dbg !5250
  %20 = load i32, i32* %count.addr, align 4, !dbg !5251
  call void @update_vb(%struct.PBVH* %14, %struct.PBVHNode* %arrayidx10, %struct.BBC* %18, i32 %19, i32 %20), !dbg !5252
  %21 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5253
  %faces = getelementptr inbounds %struct.PBVH, %struct.PBVH* %21, i32 0, i32 10, !dbg !5255
  %22 = load %struct.MFace*, %struct.MFace** %faces, align 8, !dbg !5255
  %tobool = icmp ne %struct.MFace* %22, null, !dbg !5253
  br i1 %tobool, label %if.then, label %if.else, !dbg !5256

if.then:                                          ; preds = %entry
  %23 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5257
  %24 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5258
  %nodes11 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %24, i32 0, i32 2, !dbg !5259
  %25 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes11, align 8, !dbg !5259
  %26 = load i32, i32* %node_index.addr, align 4, !dbg !5260
  %idx.ext12 = sext i32 %26 to i64, !dbg !5261
  %add.ptr13 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %25, i64 %idx.ext12, !dbg !5261
  call void @build_mesh_leaf_node(%struct.PBVH* %23, %struct.PBVHNode* %add.ptr13), !dbg !5262
  br label %if.end, !dbg !5262

if.else:                                          ; preds = %entry
  %27 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5263
  %28 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5265
  %nodes14 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %28, i32 0, i32 2, !dbg !5266
  %29 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes14, align 8, !dbg !5266
  %30 = load i32, i32* %node_index.addr, align 4, !dbg !5267
  %idx.ext15 = sext i32 %30 to i64, !dbg !5268
  %add.ptr16 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %29, i64 %idx.ext15, !dbg !5268
  call void @build_grid_leaf_node(%struct.PBVH* %27, %struct.PBVHNode* %add.ptr16), !dbg !5269
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !5270
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_vb(%struct.PBVH* %bvh, %struct.PBVHNode* %node, %struct.BBC* %prim_bbc, i32 %offset, i32 %count) #0 !dbg !5271 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  %prim_bbc.addr = alloca %struct.BBC*, align 8
  %offset.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !5274, metadata !DIExpression()), !dbg !5275
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !5276, metadata !DIExpression()), !dbg !5277
  store %struct.BBC* %prim_bbc, %struct.BBC** %prim_bbc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BBC** %prim_bbc.addr, metadata !5278, metadata !DIExpression()), !dbg !5279
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !5280, metadata !DIExpression()), !dbg !5281
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !5282, metadata !DIExpression()), !dbg !5283
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5284, metadata !DIExpression()), !dbg !5285
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5286
  %vb = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 1, !dbg !5287
  call void @BB_reset(%struct.BB* %vb), !dbg !5288
  %1 = load i32, i32* %offset.addr, align 4, !dbg !5289
  %2 = load i32, i32* %count.addr, align 4, !dbg !5291
  %add = add nsw i32 %1, %2, !dbg !5292
  %sub = sub nsw i32 %add, 1, !dbg !5293
  store i32 %sub, i32* %i, align 4, !dbg !5294
  br label %for.cond, !dbg !5295

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !5296
  %4 = load i32, i32* %offset.addr, align 4, !dbg !5298
  %cmp = icmp sge i32 %3, %4, !dbg !5299
  br i1 %cmp, label %for.body, label %for.end, !dbg !5300

for.body:                                         ; preds = %for.cond
  %5 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5301
  %vb1 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %5, i32 0, i32 1, !dbg !5303
  %6 = load %struct.BBC*, %struct.BBC** %prim_bbc.addr, align 8, !dbg !5304
  %7 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5305
  %prim_indices = getelementptr inbounds %struct.PBVH, %struct.PBVH* %7, i32 0, i32 5, !dbg !5306
  %8 = load i32*, i32** %prim_indices, align 8, !dbg !5306
  %9 = load i32, i32* %i, align 4, !dbg !5307
  %idxprom = sext i32 %9 to i64, !dbg !5305
  %arrayidx = getelementptr inbounds i32, i32* %8, i64 %idxprom, !dbg !5305
  %10 = load i32, i32* %arrayidx, align 4, !dbg !5305
  %idxprom2 = sext i32 %10 to i64, !dbg !5304
  %arrayidx3 = getelementptr inbounds %struct.BBC, %struct.BBC* %6, i64 %idxprom2, !dbg !5304
  %11 = bitcast %struct.BBC* %arrayidx3 to %struct.BB*, !dbg !5308
  call void @BB_expand_with_bb(%struct.BB* %vb1, %struct.BB* %11), !dbg !5309
  br label %for.inc, !dbg !5310

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !5311
  %dec = add nsw i32 %12, -1, !dbg !5311
  store i32 %dec, i32* %i, align 4, !dbg !5311
  br label %for.cond, !dbg !5312, !llvm.loop !5313

for.end:                                          ; preds = %for.cond
  %13 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5315
  %orig_vb = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %13, i32 0, i32 2, !dbg !5316
  %14 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5317
  %vb4 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %14, i32 0, i32 1, !dbg !5318
  %15 = bitcast %struct.BB* %orig_vb to i8*, !dbg !5318
  %16 = bitcast %struct.BB* %vb4 to i8*, !dbg !5318
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !5318
  ret void, !dbg !5319
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @partition_indices(i32* %prim_indices, i32 %lo, i32 %hi, i32 %axis, float %mid, %struct.BBC* %prim_bbc) #0 !dbg !5320 {
entry:
  %prim_indices.addr = alloca i32*, align 8
  %lo.addr = alloca i32, align 4
  %hi.addr = alloca i32, align 4
  %axis.addr = alloca i32, align 4
  %mid.addr = alloca float, align 4
  %prim_bbc.addr = alloca %struct.BBC*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %sw_ap = alloca i32, align 4
  store i32* %prim_indices, i32** %prim_indices.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %prim_indices.addr, metadata !5323, metadata !DIExpression()), !dbg !5324
  store i32 %lo, i32* %lo.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lo.addr, metadata !5325, metadata !DIExpression()), !dbg !5326
  store i32 %hi, i32* %hi.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %hi.addr, metadata !5327, metadata !DIExpression()), !dbg !5328
  store i32 %axis, i32* %axis.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %axis.addr, metadata !5329, metadata !DIExpression()), !dbg !5330
  store float %mid, float* %mid.addr, align 4
  call void @llvm.dbg.declare(metadata float* %mid.addr, metadata !5331, metadata !DIExpression()), !dbg !5332
  store %struct.BBC* %prim_bbc, %struct.BBC** %prim_bbc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BBC** %prim_bbc.addr, metadata !5333, metadata !DIExpression()), !dbg !5334
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5335, metadata !DIExpression()), !dbg !5336
  %0 = load i32, i32* %lo.addr, align 4, !dbg !5337
  store i32 %0, i32* %i, align 4, !dbg !5336
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5338, metadata !DIExpression()), !dbg !5339
  %1 = load i32, i32* %hi.addr, align 4, !dbg !5340
  store i32 %1, i32* %j, align 4, !dbg !5339
  br label %for.cond, !dbg !5341

for.cond:                                         ; preds = %if.end, %entry
  br label %for.cond1, !dbg !5342

for.cond1:                                        ; preds = %for.inc, %for.cond
  %2 = load %struct.BBC*, %struct.BBC** %prim_bbc.addr, align 8, !dbg !5346
  %3 = load i32*, i32** %prim_indices.addr, align 8, !dbg !5349
  %4 = load i32, i32* %i, align 4, !dbg !5350
  %idxprom = sext i32 %4 to i64, !dbg !5349
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !5349
  %5 = load i32, i32* %arrayidx, align 4, !dbg !5349
  %idxprom2 = sext i32 %5 to i64, !dbg !5346
  %arrayidx3 = getelementptr inbounds %struct.BBC, %struct.BBC* %2, i64 %idxprom2, !dbg !5346
  %bcentroid = getelementptr inbounds %struct.BBC, %struct.BBC* %arrayidx3, i32 0, i32 2, !dbg !5351
  %6 = load i32, i32* %axis.addr, align 4, !dbg !5352
  %idxprom4 = sext i32 %6 to i64, !dbg !5346
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %bcentroid, i64 0, i64 %idxprom4, !dbg !5346
  %7 = load float, float* %arrayidx5, align 4, !dbg !5346
  %8 = load float, float* %mid.addr, align 4, !dbg !5353
  %cmp = fcmp olt float %7, %8, !dbg !5354
  br i1 %cmp, label %for.body, label %for.end, !dbg !5355

for.body:                                         ; preds = %for.cond1
  br label %for.inc, !dbg !5355

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !5356
  %inc = add nsw i32 %9, 1, !dbg !5356
  store i32 %inc, i32* %i, align 4, !dbg !5356
  br label %for.cond1, !dbg !5357, !llvm.loop !5358

for.end:                                          ; preds = %for.cond1
  br label %for.cond6, !dbg !5360

for.cond6:                                        ; preds = %for.inc16, %for.end
  %10 = load float, float* %mid.addr, align 4, !dbg !5361
  %11 = load %struct.BBC*, %struct.BBC** %prim_bbc.addr, align 8, !dbg !5364
  %12 = load i32*, i32** %prim_indices.addr, align 8, !dbg !5365
  %13 = load i32, i32* %j, align 4, !dbg !5366
  %idxprom7 = sext i32 %13 to i64, !dbg !5365
  %arrayidx8 = getelementptr inbounds i32, i32* %12, i64 %idxprom7, !dbg !5365
  %14 = load i32, i32* %arrayidx8, align 4, !dbg !5365
  %idxprom9 = sext i32 %14 to i64, !dbg !5364
  %arrayidx10 = getelementptr inbounds %struct.BBC, %struct.BBC* %11, i64 %idxprom9, !dbg !5364
  %bcentroid11 = getelementptr inbounds %struct.BBC, %struct.BBC* %arrayidx10, i32 0, i32 2, !dbg !5367
  %15 = load i32, i32* %axis.addr, align 4, !dbg !5368
  %idxprom12 = sext i32 %15 to i64, !dbg !5364
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %bcentroid11, i64 0, i64 %idxprom12, !dbg !5364
  %16 = load float, float* %arrayidx13, align 4, !dbg !5364
  %cmp14 = fcmp olt float %10, %16, !dbg !5369
  br i1 %cmp14, label %for.body15, label %for.end17, !dbg !5370

for.body15:                                       ; preds = %for.cond6
  br label %for.inc16, !dbg !5370

for.inc16:                                        ; preds = %for.body15
  %17 = load i32, i32* %j, align 4, !dbg !5371
  %dec = add nsw i32 %17, -1, !dbg !5371
  store i32 %dec, i32* %j, align 4, !dbg !5371
  br label %for.cond6, !dbg !5372, !llvm.loop !5373

for.end17:                                        ; preds = %for.cond6
  %18 = load i32, i32* %i, align 4, !dbg !5375
  %19 = load i32, i32* %j, align 4, !dbg !5377
  %cmp18 = icmp slt i32 %18, %19, !dbg !5378
  br i1 %cmp18, label %if.end, label %if.then, !dbg !5379

if.then:                                          ; preds = %for.end17
  %20 = load i32, i32* %i, align 4, !dbg !5380
  ret i32 %20, !dbg !5381

if.end:                                           ; preds = %for.end17
  call void @llvm.dbg.declare(metadata i32* %sw_ap, metadata !5382, metadata !DIExpression()), !dbg !5384
  %21 = load i32*, i32** %prim_indices.addr, align 8, !dbg !5384
  %22 = load i32, i32* %i, align 4, !dbg !5384
  %idxprom19 = sext i32 %22 to i64, !dbg !5384
  %arrayidx20 = getelementptr inbounds i32, i32* %21, i64 %idxprom19, !dbg !5384
  %23 = load i32, i32* %arrayidx20, align 4, !dbg !5384
  store i32 %23, i32* %sw_ap, align 4, !dbg !5384
  %24 = load i32*, i32** %prim_indices.addr, align 8, !dbg !5384
  %25 = load i32, i32* %j, align 4, !dbg !5384
  %idxprom21 = sext i32 %25 to i64, !dbg !5384
  %arrayidx22 = getelementptr inbounds i32, i32* %24, i64 %idxprom21, !dbg !5384
  %26 = load i32, i32* %arrayidx22, align 4, !dbg !5384
  %27 = load i32*, i32** %prim_indices.addr, align 8, !dbg !5384
  %28 = load i32, i32* %i, align 4, !dbg !5384
  %idxprom23 = sext i32 %28 to i64, !dbg !5384
  %arrayidx24 = getelementptr inbounds i32, i32* %27, i64 %idxprom23, !dbg !5384
  store i32 %26, i32* %arrayidx24, align 4, !dbg !5384
  %29 = load i32, i32* %sw_ap, align 4, !dbg !5384
  %30 = load i32*, i32** %prim_indices.addr, align 8, !dbg !5384
  %31 = load i32, i32* %j, align 4, !dbg !5384
  %idxprom25 = sext i32 %31 to i64, !dbg !5384
  %arrayidx26 = getelementptr inbounds i32, i32* %30, i64 %idxprom25, !dbg !5384
  store i32 %29, i32* %arrayidx26, align 4, !dbg !5384
  %32 = load i32, i32* %i, align 4, !dbg !5385
  %inc27 = add nsw i32 %32, 1, !dbg !5385
  store i32 %inc27, i32* %i, align 4, !dbg !5385
  br label %for.cond, !dbg !5386, !llvm.loop !5387
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @partition_indices_material(%struct.PBVH* %bvh, i32 %lo, i32 %hi) #0 !dbg !5390 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %lo.addr = alloca i32, align 4
  %hi.addr = alloca i32, align 4
  %faces = alloca %struct.MFace*, align 8
  %flagmats = alloca %struct.DMFlagMat*, align 8
  %indices = alloca i32*, align 8
  %first = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %sw_ap = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !5391, metadata !DIExpression()), !dbg !5392
  store i32 %lo, i32* %lo.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lo.addr, metadata !5393, metadata !DIExpression()), !dbg !5394
  store i32 %hi, i32* %hi.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %hi.addr, metadata !5395, metadata !DIExpression()), !dbg !5396
  call void @llvm.dbg.declare(metadata %struct.MFace** %faces, metadata !5397, metadata !DIExpression()), !dbg !5398
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5399
  %faces1 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 10, !dbg !5400
  %1 = load %struct.MFace*, %struct.MFace** %faces1, align 8, !dbg !5400
  store %struct.MFace* %1, %struct.MFace** %faces, align 8, !dbg !5398
  call void @llvm.dbg.declare(metadata %struct.DMFlagMat** %flagmats, metadata !5401, metadata !DIExpression()), !dbg !5402
  %2 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5403
  %grid_flag_mats = getelementptr inbounds %struct.PBVH, %struct.PBVH* %2, i32 0, i32 16, !dbg !5404
  %3 = load %struct.DMFlagMat*, %struct.DMFlagMat** %grid_flag_mats, align 8, !dbg !5404
  store %struct.DMFlagMat* %3, %struct.DMFlagMat** %flagmats, align 8, !dbg !5402
  call void @llvm.dbg.declare(metadata i32** %indices, metadata !5405, metadata !DIExpression()), !dbg !5406
  %4 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5407
  %prim_indices = getelementptr inbounds %struct.PBVH, %struct.PBVH* %4, i32 0, i32 5, !dbg !5408
  %5 = load i32*, i32** %prim_indices, align 8, !dbg !5408
  store i32* %5, i32** %indices, align 8, !dbg !5406
  call void @llvm.dbg.declare(metadata i8** %first, metadata !5409, metadata !DIExpression()), !dbg !5412
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5413, metadata !DIExpression()), !dbg !5414
  %6 = load i32, i32* %lo.addr, align 4, !dbg !5415
  store i32 %6, i32* %i, align 4, !dbg !5414
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5416, metadata !DIExpression()), !dbg !5417
  %7 = load i32, i32* %hi.addr, align 4, !dbg !5418
  store i32 %7, i32* %j, align 4, !dbg !5417
  %8 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5419
  %faces2 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %8, i32 0, i32 10, !dbg !5421
  %9 = load %struct.MFace*, %struct.MFace** %faces2, align 8, !dbg !5421
  %tobool = icmp ne %struct.MFace* %9, null, !dbg !5419
  br i1 %tobool, label %if.then, label %if.else, !dbg !5422

if.then:                                          ; preds = %entry
  %10 = load %struct.MFace*, %struct.MFace** %faces, align 8, !dbg !5423
  %11 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5424
  %prim_indices3 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %11, i32 0, i32 5, !dbg !5425
  %12 = load i32*, i32** %prim_indices3, align 8, !dbg !5425
  %13 = load i32, i32* %lo.addr, align 4, !dbg !5426
  %idxprom = sext i32 %13 to i64, !dbg !5424
  %arrayidx = getelementptr inbounds i32, i32* %12, i64 %idxprom, !dbg !5424
  %14 = load i32, i32* %arrayidx, align 4, !dbg !5424
  %idxprom4 = sext i32 %14 to i64, !dbg !5423
  %arrayidx5 = getelementptr inbounds %struct.MFace, %struct.MFace* %10, i64 %idxprom4, !dbg !5423
  %15 = bitcast %struct.MFace* %arrayidx5 to i8*, !dbg !5427
  store i8* %15, i8** %first, align 8, !dbg !5428
  br label %if.end, !dbg !5429

if.else:                                          ; preds = %entry
  %16 = load %struct.DMFlagMat*, %struct.DMFlagMat** %flagmats, align 8, !dbg !5430
  %17 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5431
  %prim_indices6 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %17, i32 0, i32 5, !dbg !5432
  %18 = load i32*, i32** %prim_indices6, align 8, !dbg !5432
  %19 = load i32, i32* %lo.addr, align 4, !dbg !5433
  %idxprom7 = sext i32 %19 to i64, !dbg !5431
  %arrayidx8 = getelementptr inbounds i32, i32* %18, i64 %idxprom7, !dbg !5431
  %20 = load i32, i32* %arrayidx8, align 4, !dbg !5431
  %idxprom9 = sext i32 %20 to i64, !dbg !5430
  %arrayidx10 = getelementptr inbounds %struct.DMFlagMat, %struct.DMFlagMat* %16, i64 %idxprom9, !dbg !5430
  %21 = bitcast %struct.DMFlagMat* %arrayidx10 to i8*, !dbg !5434
  store i8* %21, i8** %first, align 8, !dbg !5435
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.cond, !dbg !5436

for.cond:                                         ; preds = %if.end56, %if.end
  %22 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5437
  %faces11 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %22, i32 0, i32 10, !dbg !5442
  %23 = load %struct.MFace*, %struct.MFace** %faces11, align 8, !dbg !5442
  %tobool12 = icmp ne %struct.MFace* %23, null, !dbg !5437
  br i1 %tobool12, label %if.then13, label %if.else30, !dbg !5443

if.then13:                                        ; preds = %for.cond
  br label %for.cond14, !dbg !5444

for.cond14:                                       ; preds = %for.inc, %if.then13
  %24 = load i8*, i8** %first, align 8, !dbg !5446
  %25 = bitcast i8* %24 to %struct.MFace*, !dbg !5446
  %26 = load %struct.MFace*, %struct.MFace** %faces, align 8, !dbg !5449
  %27 = load i32*, i32** %indices, align 8, !dbg !5450
  %28 = load i32, i32* %i, align 4, !dbg !5451
  %idxprom15 = sext i32 %28 to i64, !dbg !5450
  %arrayidx16 = getelementptr inbounds i32, i32* %27, i64 %idxprom15, !dbg !5450
  %29 = load i32, i32* %arrayidx16, align 4, !dbg !5450
  %idxprom17 = sext i32 %29 to i64, !dbg !5449
  %arrayidx18 = getelementptr inbounds %struct.MFace, %struct.MFace* %26, i64 %idxprom17, !dbg !5449
  %call = call i32 @face_materials_match(%struct.MFace* %25, %struct.MFace* %arrayidx18), !dbg !5452
  %tobool19 = icmp ne i32 %call, 0, !dbg !5453
  br i1 %tobool19, label %for.body, label %for.end, !dbg !5453

for.body:                                         ; preds = %for.cond14
  br label %for.inc, !dbg !5453

for.inc:                                          ; preds = %for.body
  %30 = load i32, i32* %i, align 4, !dbg !5454
  %inc = add nsw i32 %30, 1, !dbg !5454
  store i32 %inc, i32* %i, align 4, !dbg !5454
  br label %for.cond14, !dbg !5455, !llvm.loop !5456

for.end:                                          ; preds = %for.cond14
  br label %for.cond20, !dbg !5458

for.cond20:                                       ; preds = %for.inc28, %for.end
  %31 = load i8*, i8** %first, align 8, !dbg !5459
  %32 = bitcast i8* %31 to %struct.MFace*, !dbg !5459
  %33 = load %struct.MFace*, %struct.MFace** %faces, align 8, !dbg !5462
  %34 = load i32*, i32** %indices, align 8, !dbg !5463
  %35 = load i32, i32* %j, align 4, !dbg !5464
  %idxprom21 = sext i32 %35 to i64, !dbg !5463
  %arrayidx22 = getelementptr inbounds i32, i32* %34, i64 %idxprom21, !dbg !5463
  %36 = load i32, i32* %arrayidx22, align 4, !dbg !5463
  %idxprom23 = sext i32 %36 to i64, !dbg !5462
  %arrayidx24 = getelementptr inbounds %struct.MFace, %struct.MFace* %33, i64 %idxprom23, !dbg !5462
  %call25 = call i32 @face_materials_match(%struct.MFace* %32, %struct.MFace* %arrayidx24), !dbg !5465
  %tobool26 = icmp ne i32 %call25, 0, !dbg !5466
  %lnot = xor i1 %tobool26, true, !dbg !5466
  br i1 %lnot, label %for.body27, label %for.end29, !dbg !5467

for.body27:                                       ; preds = %for.cond20
  br label %for.inc28, !dbg !5467

for.inc28:                                        ; preds = %for.body27
  %37 = load i32, i32* %j, align 4, !dbg !5468
  %dec = add nsw i32 %37, -1, !dbg !5468
  store i32 %dec, i32* %j, align 4, !dbg !5468
  br label %for.cond20, !dbg !5469, !llvm.loop !5470

for.end29:                                        ; preds = %for.cond20
  br label %if.end54, !dbg !5472

if.else30:                                        ; preds = %for.cond
  br label %for.cond31, !dbg !5473

for.cond31:                                       ; preds = %for.inc39, %if.else30
  %38 = load i8*, i8** %first, align 8, !dbg !5475
  %39 = bitcast i8* %38 to %struct.DMFlagMat*, !dbg !5475
  %40 = load %struct.DMFlagMat*, %struct.DMFlagMat** %flagmats, align 8, !dbg !5478
  %41 = load i32*, i32** %indices, align 8, !dbg !5479
  %42 = load i32, i32* %i, align 4, !dbg !5480
  %idxprom32 = sext i32 %42 to i64, !dbg !5479
  %arrayidx33 = getelementptr inbounds i32, i32* %41, i64 %idxprom32, !dbg !5479
  %43 = load i32, i32* %arrayidx33, align 4, !dbg !5479
  %idxprom34 = sext i32 %43 to i64, !dbg !5478
  %arrayidx35 = getelementptr inbounds %struct.DMFlagMat, %struct.DMFlagMat* %40, i64 %idxprom34, !dbg !5478
  %call36 = call i32 @grid_materials_match(%struct.DMFlagMat* %39, %struct.DMFlagMat* %arrayidx35), !dbg !5481
  %tobool37 = icmp ne i32 %call36, 0, !dbg !5482
  br i1 %tobool37, label %for.body38, label %for.end41, !dbg !5482

for.body38:                                       ; preds = %for.cond31
  br label %for.inc39, !dbg !5482

for.inc39:                                        ; preds = %for.body38
  %44 = load i32, i32* %i, align 4, !dbg !5483
  %inc40 = add nsw i32 %44, 1, !dbg !5483
  store i32 %inc40, i32* %i, align 4, !dbg !5483
  br label %for.cond31, !dbg !5484, !llvm.loop !5485

for.end41:                                        ; preds = %for.cond31
  br label %for.cond42, !dbg !5487

for.cond42:                                       ; preds = %for.inc51, %for.end41
  %45 = load i8*, i8** %first, align 8, !dbg !5488
  %46 = bitcast i8* %45 to %struct.DMFlagMat*, !dbg !5488
  %47 = load %struct.DMFlagMat*, %struct.DMFlagMat** %flagmats, align 8, !dbg !5491
  %48 = load i32*, i32** %indices, align 8, !dbg !5492
  %49 = load i32, i32* %j, align 4, !dbg !5493
  %idxprom43 = sext i32 %49 to i64, !dbg !5492
  %arrayidx44 = getelementptr inbounds i32, i32* %48, i64 %idxprom43, !dbg !5492
  %50 = load i32, i32* %arrayidx44, align 4, !dbg !5492
  %idxprom45 = sext i32 %50 to i64, !dbg !5491
  %arrayidx46 = getelementptr inbounds %struct.DMFlagMat, %struct.DMFlagMat* %47, i64 %idxprom45, !dbg !5491
  %call47 = call i32 @grid_materials_match(%struct.DMFlagMat* %46, %struct.DMFlagMat* %arrayidx46), !dbg !5494
  %tobool48 = icmp ne i32 %call47, 0, !dbg !5495
  %lnot49 = xor i1 %tobool48, true, !dbg !5495
  br i1 %lnot49, label %for.body50, label %for.end53, !dbg !5496

for.body50:                                       ; preds = %for.cond42
  br label %for.inc51, !dbg !5496

for.inc51:                                        ; preds = %for.body50
  %51 = load i32, i32* %j, align 4, !dbg !5497
  %dec52 = add nsw i32 %51, -1, !dbg !5497
  store i32 %dec52, i32* %j, align 4, !dbg !5497
  br label %for.cond42, !dbg !5498, !llvm.loop !5499

for.end53:                                        ; preds = %for.cond42
  br label %if.end54

if.end54:                                         ; preds = %for.end53, %for.end29
  %52 = load i32, i32* %i, align 4, !dbg !5501
  %53 = load i32, i32* %j, align 4, !dbg !5503
  %cmp = icmp slt i32 %52, %53, !dbg !5504
  br i1 %cmp, label %if.end56, label %if.then55, !dbg !5505

if.then55:                                        ; preds = %if.end54
  %54 = load i32, i32* %i, align 4, !dbg !5506
  ret i32 %54, !dbg !5507

if.end56:                                         ; preds = %if.end54
  call void @llvm.dbg.declare(metadata i32* %sw_ap, metadata !5508, metadata !DIExpression()), !dbg !5510
  %55 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5510
  %prim_indices57 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %55, i32 0, i32 5, !dbg !5510
  %56 = load i32*, i32** %prim_indices57, align 8, !dbg !5510
  %57 = load i32, i32* %i, align 4, !dbg !5510
  %idxprom58 = sext i32 %57 to i64, !dbg !5510
  %arrayidx59 = getelementptr inbounds i32, i32* %56, i64 %idxprom58, !dbg !5510
  %58 = load i32, i32* %arrayidx59, align 4, !dbg !5510
  store i32 %58, i32* %sw_ap, align 4, !dbg !5510
  %59 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5510
  %prim_indices60 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %59, i32 0, i32 5, !dbg !5510
  %60 = load i32*, i32** %prim_indices60, align 8, !dbg !5510
  %61 = load i32, i32* %j, align 4, !dbg !5510
  %idxprom61 = sext i32 %61 to i64, !dbg !5510
  %arrayidx62 = getelementptr inbounds i32, i32* %60, i64 %idxprom61, !dbg !5510
  %62 = load i32, i32* %arrayidx62, align 4, !dbg !5510
  %63 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5510
  %prim_indices63 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %63, i32 0, i32 5, !dbg !5510
  %64 = load i32*, i32** %prim_indices63, align 8, !dbg !5510
  %65 = load i32, i32* %i, align 4, !dbg !5510
  %idxprom64 = sext i32 %65 to i64, !dbg !5510
  %arrayidx65 = getelementptr inbounds i32, i32* %64, i64 %idxprom64, !dbg !5510
  store i32 %62, i32* %arrayidx65, align 4, !dbg !5510
  %66 = load i32, i32* %sw_ap, align 4, !dbg !5510
  %67 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5510
  %prim_indices66 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %67, i32 0, i32 5, !dbg !5510
  %68 = load i32*, i32** %prim_indices66, align 8, !dbg !5510
  %69 = load i32, i32* %j, align 4, !dbg !5510
  %idxprom67 = sext i32 %69 to i64, !dbg !5510
  %arrayidx68 = getelementptr inbounds i32, i32* %68, i64 %idxprom67, !dbg !5510
  store i32 %66, i32* %arrayidx68, align 4, !dbg !5510
  %70 = load i32, i32* %i, align 4, !dbg !5511
  %inc69 = add nsw i32 %70, 1, !dbg !5511
  store i32 %inc69, i32* %i, align 4, !dbg !5511
  br label %for.cond, !dbg !5512, !llvm.loop !5513
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @face_materials_match(%struct.MFace* %f1, %struct.MFace* %f2) #0 !dbg !5516 {
entry:
  %f1.addr = alloca %struct.MFace*, align 8
  %f2.addr = alloca %struct.MFace*, align 8
  store %struct.MFace* %f1, %struct.MFace** %f1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.MFace** %f1.addr, metadata !5519, metadata !DIExpression()), !dbg !5520
  store %struct.MFace* %f2, %struct.MFace** %f2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.MFace** %f2.addr, metadata !5521, metadata !DIExpression()), !dbg !5522
  %0 = load %struct.MFace*, %struct.MFace** %f1.addr, align 8, !dbg !5523
  %flag = getelementptr inbounds %struct.MFace, %struct.MFace* %0, i32 0, i32 6, !dbg !5524
  %1 = load i8, i8* %flag, align 1, !dbg !5524
  %conv = zext i8 %1 to i32, !dbg !5523
  %and = and i32 %conv, 1, !dbg !5525
  %2 = load %struct.MFace*, %struct.MFace** %f2.addr, align 8, !dbg !5526
  %flag1 = getelementptr inbounds %struct.MFace, %struct.MFace* %2, i32 0, i32 6, !dbg !5527
  %3 = load i8, i8* %flag1, align 1, !dbg !5527
  %conv2 = zext i8 %3 to i32, !dbg !5526
  %and3 = and i32 %conv2, 1, !dbg !5528
  %cmp = icmp eq i32 %and, %and3, !dbg !5529
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5530

land.rhs:                                         ; preds = %entry
  %4 = load %struct.MFace*, %struct.MFace** %f1.addr, align 8, !dbg !5531
  %mat_nr = getelementptr inbounds %struct.MFace, %struct.MFace* %4, i32 0, i32 4, !dbg !5532
  %5 = load i16, i16* %mat_nr, align 4, !dbg !5532
  %conv5 = sext i16 %5 to i32, !dbg !5531
  %6 = load %struct.MFace*, %struct.MFace** %f2.addr, align 8, !dbg !5533
  %mat_nr6 = getelementptr inbounds %struct.MFace, %struct.MFace* %6, i32 0, i32 4, !dbg !5534
  %7 = load i16, i16* %mat_nr6, align 4, !dbg !5534
  %conv7 = sext i16 %7 to i32, !dbg !5533
  %cmp8 = icmp eq i32 %conv5, %conv7, !dbg !5535
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp8, %land.rhs ], !dbg !5536
  %land.ext = zext i1 %8 to i32, !dbg !5530
  ret i32 %land.ext, !dbg !5537
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @grid_materials_match(%struct.DMFlagMat* %f1, %struct.DMFlagMat* %f2) #0 !dbg !5538 {
entry:
  %f1.addr = alloca %struct.DMFlagMat*, align 8
  %f2.addr = alloca %struct.DMFlagMat*, align 8
  store %struct.DMFlagMat* %f1, %struct.DMFlagMat** %f1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DMFlagMat** %f1.addr, metadata !5541, metadata !DIExpression()), !dbg !5542
  store %struct.DMFlagMat* %f2, %struct.DMFlagMat** %f2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DMFlagMat** %f2.addr, metadata !5543, metadata !DIExpression()), !dbg !5544
  %0 = load %struct.DMFlagMat*, %struct.DMFlagMat** %f1.addr, align 8, !dbg !5545
  %flag = getelementptr inbounds %struct.DMFlagMat, %struct.DMFlagMat* %0, i32 0, i32 1, !dbg !5546
  %1 = load i8, i8* %flag, align 2, !dbg !5546
  %conv = zext i8 %1 to i32, !dbg !5545
  %and = and i32 %conv, 1, !dbg !5547
  %2 = load %struct.DMFlagMat*, %struct.DMFlagMat** %f2.addr, align 8, !dbg !5548
  %flag1 = getelementptr inbounds %struct.DMFlagMat, %struct.DMFlagMat* %2, i32 0, i32 1, !dbg !5549
  %3 = load i8, i8* %flag1, align 2, !dbg !5549
  %conv2 = zext i8 %3 to i32, !dbg !5548
  %and3 = and i32 %conv2, 1, !dbg !5550
  %cmp = icmp eq i32 %and, %and3, !dbg !5551
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5552

land.rhs:                                         ; preds = %entry
  %4 = load %struct.DMFlagMat*, %struct.DMFlagMat** %f1.addr, align 8, !dbg !5553
  %mat_nr = getelementptr inbounds %struct.DMFlagMat, %struct.DMFlagMat* %4, i32 0, i32 0, !dbg !5554
  %5 = load i16, i16* %mat_nr, align 2, !dbg !5554
  %conv5 = sext i16 %5 to i32, !dbg !5553
  %6 = load %struct.DMFlagMat*, %struct.DMFlagMat** %f2.addr, align 8, !dbg !5555
  %mat_nr6 = getelementptr inbounds %struct.DMFlagMat, %struct.DMFlagMat* %6, i32 0, i32 0, !dbg !5556
  %7 = load i16, i16* %mat_nr6, align 2, !dbg !5556
  %conv7 = sext i16 %7 to i32, !dbg !5555
  %cmp8 = icmp eq i32 %conv5, %conv7, !dbg !5557
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp8, %land.rhs ], !dbg !5558
  %land.ext = zext i1 %8 to i32, !dbg !5552
  ret i32 %land.ext, !dbg !5559
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_mesh_leaf_node(%struct.PBVH* %bvh, %struct.PBVHNode* %node) #0 !dbg !5560 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  %iter = alloca %struct.GHashIterator*, align 8
  %map = alloca %struct.GHash*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %totface = alloca i32, align 4
  %has_visible = alloca i8, align 1
  %f = alloca %struct.MFace*, align 8
  %sides = alloca i32, align 4
  %value = alloca i8*, align 8
  %ndx = alloca i32, align 4
  %f56 = alloca %struct.MFace*, align 8
  %sides63 = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !5561, metadata !DIExpression()), !dbg !5562
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !5563, metadata !DIExpression()), !dbg !5564
  call void @llvm.dbg.declare(metadata %struct.GHashIterator** %iter, metadata !5565, metadata !DIExpression()), !dbg !5566
  call void @llvm.dbg.declare(metadata %struct.GHash** %map, metadata !5567, metadata !DIExpression()), !dbg !5568
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5569, metadata !DIExpression()), !dbg !5570
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5571, metadata !DIExpression()), !dbg !5572
  call void @llvm.dbg.declare(metadata i32* %totface, metadata !5573, metadata !DIExpression()), !dbg !5574
  call void @llvm.dbg.declare(metadata i8* %has_visible, metadata !5575, metadata !DIExpression()), !dbg !5576
  store i8 0, i8* %has_visible, align 1, !dbg !5576
  %0 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5577
  %face_verts = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %0, i32 0, i32 8, !dbg !5578
  store i32 0, i32* %face_verts, align 4, !dbg !5579
  %1 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5580
  %uniq_verts = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %1, i32 0, i32 7, !dbg !5581
  store i32 0, i32* %uniq_verts, align 8, !dbg !5582
  %2 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5583
  %totprim = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %2, i32 0, i32 5, !dbg !5584
  %3 = load i32, i32* %totprim, align 8, !dbg !5584
  store i32 %3, i32* %totface, align 4, !dbg !5585
  %4 = load i32, i32* %totface, align 4, !dbg !5586
  %mul = mul nsw i32 2, %4, !dbg !5587
  %call = call %struct.GHash* @BLI_ghash_int_new_ex(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0), i32 %mul), !dbg !5588
  store %struct.GHash* %call, %struct.GHash** %map, align 8, !dbg !5589
  %5 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !5590
  %6 = load i32, i32* %totface, align 4, !dbg !5591
  %conv = sext i32 %6 to i64, !dbg !5591
  %mul1 = mul i64 16, %conv, !dbg !5592
  %call2 = call i8* %5(i64 %mul1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.12, i64 0, i64 0)), !dbg !5590
  %7 = bitcast i8* %call2 to [4 x i32]*, !dbg !5590
  %8 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5593
  %face_vert_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %8, i32 0, i32 9, !dbg !5594
  store [4 x i32]* %7, [4 x i32]** %face_vert_indices, align 8, !dbg !5595
  store i32 0, i32* %i, align 4, !dbg !5596
  br label %for.cond, !dbg !5598

for.cond:                                         ; preds = %for.inc20, %entry
  %9 = load i32, i32* %i, align 4, !dbg !5599
  %10 = load i32, i32* %totface, align 4, !dbg !5601
  %cmp = icmp slt i32 %9, %10, !dbg !5602
  br i1 %cmp, label %for.body, label %for.end22, !dbg !5603

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.MFace** %f, metadata !5604, metadata !DIExpression()), !dbg !5606
  %11 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5607
  %faces = getelementptr inbounds %struct.PBVH, %struct.PBVH* %11, i32 0, i32 10, !dbg !5608
  %12 = load %struct.MFace*, %struct.MFace** %faces, align 8, !dbg !5608
  %13 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5609
  %prim_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %13, i32 0, i32 4, !dbg !5610
  %14 = load i32*, i32** %prim_indices, align 8, !dbg !5610
  %15 = load i32, i32* %i, align 4, !dbg !5611
  %idxprom = sext i32 %15 to i64, !dbg !5609
  %arrayidx = getelementptr inbounds i32, i32* %14, i64 %idxprom, !dbg !5609
  %16 = load i32, i32* %arrayidx, align 4, !dbg !5609
  %idx.ext = sext i32 %16 to i64, !dbg !5612
  %add.ptr = getelementptr inbounds %struct.MFace, %struct.MFace* %12, i64 %idx.ext, !dbg !5612
  store %struct.MFace* %add.ptr, %struct.MFace** %f, align 8, !dbg !5606
  call void @llvm.dbg.declare(metadata i32* %sides, metadata !5613, metadata !DIExpression()), !dbg !5614
  %17 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !5615
  %v4 = getelementptr inbounds %struct.MFace, %struct.MFace* %17, i32 0, i32 3, !dbg !5616
  %18 = load i32, i32* %v4, align 4, !dbg !5616
  %tobool = icmp ne i32 %18, 0, !dbg !5615
  %19 = zext i1 %tobool to i64, !dbg !5615
  %cond = select i1 %tobool, i32 4, i32 3, !dbg !5615
  store i32 %cond, i32* %sides, align 4, !dbg !5614
  store i32 0, i32* %j, align 4, !dbg !5617
  br label %for.cond4, !dbg !5619

for.cond4:                                        ; preds = %for.inc, %for.body
  %20 = load i32, i32* %j, align 4, !dbg !5620
  %21 = load i32, i32* %sides, align 4, !dbg !5622
  %cmp5 = icmp slt i32 %20, %21, !dbg !5623
  br i1 %cmp5, label %for.body7, label %for.end, !dbg !5624

for.body7:                                        ; preds = %for.cond4
  %22 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5625
  %23 = load %struct.GHash*, %struct.GHash** %map, align 8, !dbg !5627
  %24 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5628
  %face_verts8 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %24, i32 0, i32 8, !dbg !5629
  %25 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5630
  %uniq_verts9 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %25, i32 0, i32 7, !dbg !5631
  %26 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !5632
  %v1 = getelementptr inbounds %struct.MFace, %struct.MFace* %26, i32 0, i32 0, !dbg !5633
  %27 = load i32, i32* %j, align 4, !dbg !5634
  %idxprom10 = sext i32 %27 to i64, !dbg !5635
  %arrayidx11 = getelementptr inbounds i32, i32* %v1, i64 %idxprom10, !dbg !5635
  %28 = load i32, i32* %arrayidx11, align 4, !dbg !5635
  %call12 = call i32 @map_insert_vert(%struct.PBVH* %22, %struct.GHash* %23, i32* %face_verts8, i32* %uniq_verts9, i32 %28), !dbg !5636
  %29 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5637
  %face_vert_indices13 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %29, i32 0, i32 9, !dbg !5638
  %30 = load [4 x i32]*, [4 x i32]** %face_vert_indices13, align 8, !dbg !5638
  %31 = load i32, i32* %i, align 4, !dbg !5639
  %idxprom14 = sext i32 %31 to i64, !dbg !5637
  %arrayidx15 = getelementptr inbounds [4 x i32], [4 x i32]* %30, i64 %idxprom14, !dbg !5637
  %32 = load i32, i32* %j, align 4, !dbg !5640
  %idxprom16 = sext i32 %32 to i64, !dbg !5637
  %arrayidx17 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx15, i64 0, i64 %idxprom16, !dbg !5637
  store i32 %call12, i32* %arrayidx17, align 4, !dbg !5641
  br label %for.inc, !dbg !5642

for.inc:                                          ; preds = %for.body7
  %33 = load i32, i32* %j, align 4, !dbg !5643
  %inc = add nsw i32 %33, 1, !dbg !5643
  store i32 %inc, i32* %j, align 4, !dbg !5643
  br label %for.cond4, !dbg !5644, !llvm.loop !5645

for.end:                                          ; preds = %for.cond4
  %34 = load %struct.MFace*, %struct.MFace** %f, align 8, !dbg !5647
  %35 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5649
  %verts = getelementptr inbounds %struct.PBVH, %struct.PBVH* %35, i32 0, i32 9, !dbg !5650
  %36 = load %struct.MVert*, %struct.MVert** %verts, align 8, !dbg !5650
  %call18 = call zeroext i8 @paint_is_face_hidden(%struct.MFace* %34, %struct.MVert* %36), !dbg !5651
  %tobool19 = icmp ne i8 %call18, 0, !dbg !5651
  br i1 %tobool19, label %if.end, label %if.then, !dbg !5652

if.then:                                          ; preds = %for.end
  store i8 1, i8* %has_visible, align 1, !dbg !5653
  br label %if.end, !dbg !5654

if.end:                                           ; preds = %if.then, %for.end
  br label %for.inc20, !dbg !5655

for.inc20:                                        ; preds = %if.end
  %37 = load i32, i32* %i, align 4, !dbg !5656
  %inc21 = add nsw i32 %37, 1, !dbg !5656
  store i32 %inc21, i32* %i, align 4, !dbg !5656
  br label %for.cond, !dbg !5657, !llvm.loop !5658

for.end22:                                        ; preds = %for.cond
  %38 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !5660
  %39 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5661
  %uniq_verts23 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %39, i32 0, i32 7, !dbg !5662
  %40 = load i32, i32* %uniq_verts23, align 8, !dbg !5662
  %41 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5663
  %face_verts24 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %41, i32 0, i32 8, !dbg !5664
  %42 = load i32, i32* %face_verts24, align 4, !dbg !5664
  %add = add i32 %40, %42, !dbg !5665
  %conv25 = zext i32 %add to i64, !dbg !5666
  %mul26 = mul i64 4, %conv25, !dbg !5667
  %call27 = call i8* %38(i64 %mul26, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0)), !dbg !5660
  %43 = bitcast i8* %call27 to i32*, !dbg !5660
  %44 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5668
  %vert_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %44, i32 0, i32 6, !dbg !5669
  store i32* %43, i32** %vert_indices, align 8, !dbg !5670
  %45 = load %struct.GHash*, %struct.GHash** %map, align 8, !dbg !5671
  %call28 = call %struct.GHashIterator* @BLI_ghashIterator_new(%struct.GHash* %45), !dbg !5673
  store %struct.GHashIterator* %call28, %struct.GHashIterator** %iter, align 8, !dbg !5674
  store i32 0, i32* %i, align 4, !dbg !5675
  br label %for.cond29, !dbg !5676

for.cond29:                                       ; preds = %for.inc49, %for.end22
  %46 = load %struct.GHashIterator*, %struct.GHashIterator** %iter, align 8, !dbg !5677
  %call30 = call zeroext i8 @BLI_ghashIterator_done(%struct.GHashIterator* %46), !dbg !5679
  %conv31 = zext i8 %call30 to i32, !dbg !5679
  %cmp32 = icmp eq i32 %conv31, 0, !dbg !5680
  br i1 %cmp32, label %for.body34, label %for.end51, !dbg !5681

for.body34:                                       ; preds = %for.cond29
  call void @llvm.dbg.declare(metadata i8** %value, metadata !5682, metadata !DIExpression()), !dbg !5684
  %47 = load %struct.GHashIterator*, %struct.GHashIterator** %iter, align 8, !dbg !5685
  %call35 = call i8* @BLI_ghashIterator_getValue(%struct.GHashIterator* %47), !dbg !5686
  store i8* %call35, i8** %value, align 8, !dbg !5684
  call void @llvm.dbg.declare(metadata i32* %ndx, metadata !5687, metadata !DIExpression()), !dbg !5688
  %48 = load i8*, i8** %value, align 8, !dbg !5689
  %49 = ptrtoint i8* %48 to i64, !dbg !5689
  %conv36 = trunc i64 %49 to i32, !dbg !5689
  store i32 %conv36, i32* %ndx, align 4, !dbg !5688
  %50 = load i32, i32* %ndx, align 4, !dbg !5690
  %cmp37 = icmp slt i32 %50, 0, !dbg !5692
  br i1 %cmp37, label %if.then39, label %if.end43, !dbg !5693

if.then39:                                        ; preds = %for.body34
  %51 = load i32, i32* %ndx, align 4, !dbg !5694
  %sub = sub nsw i32 0, %51, !dbg !5695
  %52 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5696
  %uniq_verts40 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %52, i32 0, i32 7, !dbg !5697
  %53 = load i32, i32* %uniq_verts40, align 8, !dbg !5697
  %add41 = add i32 %sub, %53, !dbg !5698
  %sub42 = sub i32 %add41, 1, !dbg !5699
  store i32 %sub42, i32* %ndx, align 4, !dbg !5700
  br label %if.end43, !dbg !5701

if.end43:                                         ; preds = %if.then39, %for.body34
  %54 = load %struct.GHashIterator*, %struct.GHashIterator** %iter, align 8, !dbg !5702
  %call44 = call i8* @BLI_ghashIterator_getKey(%struct.GHashIterator* %54), !dbg !5702
  %55 = ptrtoint i8* %call44 to i64, !dbg !5702
  %conv45 = trunc i64 %55 to i32, !dbg !5702
  %56 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5703
  %vert_indices46 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %56, i32 0, i32 6, !dbg !5704
  %57 = load i32*, i32** %vert_indices46, align 8, !dbg !5704
  %58 = load i32, i32* %ndx, align 4, !dbg !5705
  %idxprom47 = sext i32 %58 to i64, !dbg !5703
  %arrayidx48 = getelementptr inbounds i32, i32* %57, i64 %idxprom47, !dbg !5703
  store i32 %conv45, i32* %arrayidx48, align 4, !dbg !5706
  br label %for.inc49, !dbg !5707

for.inc49:                                        ; preds = %if.end43
  %59 = load %struct.GHashIterator*, %struct.GHashIterator** %iter, align 8, !dbg !5708
  call void @BLI_ghashIterator_step(%struct.GHashIterator* %59), !dbg !5709
  %60 = load i32, i32* %i, align 4, !dbg !5710
  %inc50 = add nsw i32 %60, 1, !dbg !5710
  store i32 %inc50, i32* %i, align 4, !dbg !5710
  br label %for.cond29, !dbg !5711, !llvm.loop !5712

for.end51:                                        ; preds = %for.cond29
  %61 = load %struct.GHashIterator*, %struct.GHashIterator** %iter, align 8, !dbg !5714
  call void @BLI_ghashIterator_free(%struct.GHashIterator* %61), !dbg !5715
  store i32 0, i32* %i, align 4, !dbg !5716
  br label %for.cond52, !dbg !5718

for.cond52:                                       ; preds = %for.inc97, %for.end51
  %62 = load i32, i32* %i, align 4, !dbg !5719
  %63 = load i32, i32* %totface, align 4, !dbg !5721
  %cmp53 = icmp slt i32 %62, %63, !dbg !5722
  br i1 %cmp53, label %for.body55, label %for.end99, !dbg !5723

for.body55:                                       ; preds = %for.cond52
  call void @llvm.dbg.declare(metadata %struct.MFace** %f56, metadata !5724, metadata !DIExpression()), !dbg !5726
  %64 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5727
  %faces57 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %64, i32 0, i32 10, !dbg !5728
  %65 = load %struct.MFace*, %struct.MFace** %faces57, align 8, !dbg !5728
  %66 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5729
  %prim_indices58 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %66, i32 0, i32 4, !dbg !5730
  %67 = load i32*, i32** %prim_indices58, align 8, !dbg !5730
  %68 = load i32, i32* %i, align 4, !dbg !5731
  %idxprom59 = sext i32 %68 to i64, !dbg !5729
  %arrayidx60 = getelementptr inbounds i32, i32* %67, i64 %idxprom59, !dbg !5729
  %69 = load i32, i32* %arrayidx60, align 4, !dbg !5729
  %idx.ext61 = sext i32 %69 to i64, !dbg !5732
  %add.ptr62 = getelementptr inbounds %struct.MFace, %struct.MFace* %65, i64 %idx.ext61, !dbg !5732
  store %struct.MFace* %add.ptr62, %struct.MFace** %f56, align 8, !dbg !5726
  call void @llvm.dbg.declare(metadata i32* %sides63, metadata !5733, metadata !DIExpression()), !dbg !5734
  %70 = load %struct.MFace*, %struct.MFace** %f56, align 8, !dbg !5735
  %v464 = getelementptr inbounds %struct.MFace, %struct.MFace* %70, i32 0, i32 3, !dbg !5736
  %71 = load i32, i32* %v464, align 4, !dbg !5736
  %tobool65 = icmp ne i32 %71, 0, !dbg !5735
  %72 = zext i1 %tobool65 to i64, !dbg !5735
  %cond66 = select i1 %tobool65, i32 4, i32 3, !dbg !5735
  store i32 %cond66, i32* %sides63, align 4, !dbg !5734
  store i32 0, i32* %j, align 4, !dbg !5737
  br label %for.cond67, !dbg !5739

for.cond67:                                       ; preds = %for.inc94, %for.body55
  %73 = load i32, i32* %j, align 4, !dbg !5740
  %74 = load i32, i32* %sides63, align 4, !dbg !5742
  %cmp68 = icmp slt i32 %73, %74, !dbg !5743
  br i1 %cmp68, label %for.body70, label %for.end96, !dbg !5744

for.body70:                                       ; preds = %for.cond67
  %75 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5745
  %face_vert_indices71 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %75, i32 0, i32 9, !dbg !5748
  %76 = load [4 x i32]*, [4 x i32]** %face_vert_indices71, align 8, !dbg !5748
  %77 = load i32, i32* %i, align 4, !dbg !5749
  %idxprom72 = sext i32 %77 to i64, !dbg !5745
  %arrayidx73 = getelementptr inbounds [4 x i32], [4 x i32]* %76, i64 %idxprom72, !dbg !5745
  %78 = load i32, i32* %j, align 4, !dbg !5750
  %idxprom74 = sext i32 %78 to i64, !dbg !5745
  %arrayidx75 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx73, i64 0, i64 %idxprom74, !dbg !5745
  %79 = load i32, i32* %arrayidx75, align 4, !dbg !5745
  %cmp76 = icmp slt i32 %79, 0, !dbg !5751
  br i1 %cmp76, label %if.then78, label %if.end93, !dbg !5752

if.then78:                                        ; preds = %for.body70
  %80 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5753
  %face_vert_indices79 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %80, i32 0, i32 9, !dbg !5754
  %81 = load [4 x i32]*, [4 x i32]** %face_vert_indices79, align 8, !dbg !5754
  %82 = load i32, i32* %i, align 4, !dbg !5755
  %idxprom80 = sext i32 %82 to i64, !dbg !5753
  %arrayidx81 = getelementptr inbounds [4 x i32], [4 x i32]* %81, i64 %idxprom80, !dbg !5753
  %83 = load i32, i32* %j, align 4, !dbg !5756
  %idxprom82 = sext i32 %83 to i64, !dbg !5753
  %arrayidx83 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx81, i64 0, i64 %idxprom82, !dbg !5753
  %84 = load i32, i32* %arrayidx83, align 4, !dbg !5753
  %sub84 = sub nsw i32 0, %84, !dbg !5757
  %85 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5758
  %uniq_verts85 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %85, i32 0, i32 7, !dbg !5759
  %86 = load i32, i32* %uniq_verts85, align 8, !dbg !5759
  %add86 = add i32 %sub84, %86, !dbg !5760
  %sub87 = sub i32 %add86, 1, !dbg !5761
  %87 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5762
  %face_vert_indices88 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %87, i32 0, i32 9, !dbg !5763
  %88 = load [4 x i32]*, [4 x i32]** %face_vert_indices88, align 8, !dbg !5763
  %89 = load i32, i32* %i, align 4, !dbg !5764
  %idxprom89 = sext i32 %89 to i64, !dbg !5762
  %arrayidx90 = getelementptr inbounds [4 x i32], [4 x i32]* %88, i64 %idxprom89, !dbg !5762
  %90 = load i32, i32* %j, align 4, !dbg !5765
  %idxprom91 = sext i32 %90 to i64, !dbg !5762
  %arrayidx92 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx90, i64 0, i64 %idxprom91, !dbg !5762
  store i32 %sub87, i32* %arrayidx92, align 4, !dbg !5766
  br label %if.end93, !dbg !5762

if.end93:                                         ; preds = %if.then78, %for.body70
  br label %for.inc94, !dbg !5767

for.inc94:                                        ; preds = %if.end93
  %91 = load i32, i32* %j, align 4, !dbg !5768
  %inc95 = add nsw i32 %91, 1, !dbg !5768
  store i32 %inc95, i32* %j, align 4, !dbg !5768
  br label %for.cond67, !dbg !5769, !llvm.loop !5770

for.end96:                                        ; preds = %for.cond67
  br label %for.inc97, !dbg !5772

for.inc97:                                        ; preds = %for.end96
  %92 = load i32, i32* %i, align 4, !dbg !5773
  %inc98 = add nsw i32 %92, 1, !dbg !5773
  store i32 %inc98, i32* %i, align 4, !dbg !5773
  br label %for.cond52, !dbg !5774, !llvm.loop !5775

for.end99:                                        ; preds = %for.cond52
  %93 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5777
  call void @BKE_pbvh_node_mark_rebuild_draw(%struct.PBVHNode* %93), !dbg !5778
  %94 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5779
  %95 = load i8, i8* %has_visible, align 1, !dbg !5780
  %tobool100 = icmp ne i8 %95, 0, !dbg !5781
  %lnot = xor i1 %tobool100, true, !dbg !5781
  %lnot.ext = zext i1 %lnot to i32, !dbg !5781
  call void @BKE_pbvh_node_fully_hidden_set(%struct.PBVHNode* %94, i32 %lnot.ext), !dbg !5782
  %96 = load %struct.GHash*, %struct.GHash** %map, align 8, !dbg !5783
  call void @BLI_ghash_free(%struct.GHash* %96, void (i8*)* null, void (i8*)* null), !dbg !5784
  ret void, !dbg !5785
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_grid_leaf_node(%struct.PBVH* %bvh, %struct.PBVHNode* %node) #0 !dbg !5786 {
entry:
  %bvh.addr = alloca %struct.PBVH*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  %totquads = alloca i32, align 4
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !5787, metadata !DIExpression()), !dbg !5788
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !5789, metadata !DIExpression()), !dbg !5790
  call void @llvm.dbg.declare(metadata i32* %totquads, metadata !5791, metadata !DIExpression()), !dbg !5792
  %0 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5793
  %grid_hidden = getelementptr inbounds %struct.PBVH, %struct.PBVH* %0, i32 0, i32 18, !dbg !5794
  %1 = load i32**, i32*** %grid_hidden, align 8, !dbg !5794
  %2 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5795
  %prim_indices = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %2, i32 0, i32 4, !dbg !5796
  %3 = load i32*, i32** %prim_indices, align 8, !dbg !5796
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5797
  %totprim = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %4, i32 0, i32 5, !dbg !5798
  %5 = load i32, i32* %totprim, align 8, !dbg !5798
  %6 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5799
  %gridkey = getelementptr inbounds %struct.PBVH, %struct.PBVH* %6, i32 0, i32 12, !dbg !5800
  %grid_size = getelementptr inbounds %struct.CCGKey, %struct.CCGKey* %gridkey, i32 0, i32 2, !dbg !5801
  %7 = load i32, i32* %grid_size, align 8, !dbg !5801
  %call = call i32 @BKE_pbvh_count_grid_quads(i32** %1, i32* %3, i32 %5, i32 %7), !dbg !5802
  store i32 %call, i32* %totquads, align 4, !dbg !5792
  %8 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5803
  %9 = load i32, i32* %totquads, align 4, !dbg !5804
  %cmp = icmp eq i32 %9, 0, !dbg !5805
  %conv = zext i1 %cmp to i32, !dbg !5805
  call void @BKE_pbvh_node_fully_hidden_set(%struct.PBVHNode* %8, i32 %conv), !dbg !5806
  %10 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5807
  call void @BKE_pbvh_node_mark_rebuild_draw(%struct.PBVHNode* %10), !dbg !5808
  ret void, !dbg !5809
}

declare dso_local %struct.GHash* @BLI_ghash_int_new_ex(i8*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @map_insert_vert(%struct.PBVH* %bvh, %struct.GHash* %map, i32* %face_verts, i32* %uniq_verts, i32 %vertex) #0 !dbg !5810 {
entry:
  %retval = alloca i32, align 4
  %bvh.addr = alloca %struct.PBVH*, align 8
  %map.addr = alloca %struct.GHash*, align 8
  %face_verts.addr = alloca i32*, align 8
  %uniq_verts.addr = alloca i32*, align 8
  %vertex.addr = alloca i32, align 4
  %key = alloca i8*, align 8
  %value_p = alloca i8**, align 8
  %value = alloca i8*, align 8
  store %struct.PBVH* %bvh, %struct.PBVH** %bvh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVH** %bvh.addr, metadata !5813, metadata !DIExpression()), !dbg !5814
  store %struct.GHash* %map, %struct.GHash** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GHash** %map.addr, metadata !5815, metadata !DIExpression()), !dbg !5816
  store i32* %face_verts, i32** %face_verts.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %face_verts.addr, metadata !5817, metadata !DIExpression()), !dbg !5818
  store i32* %uniq_verts, i32** %uniq_verts.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %uniq_verts.addr, metadata !5819, metadata !DIExpression()), !dbg !5820
  store i32 %vertex, i32* %vertex.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vertex.addr, metadata !5821, metadata !DIExpression()), !dbg !5822
  call void @llvm.dbg.declare(metadata i8** %key, metadata !5823, metadata !DIExpression()), !dbg !5824
  call void @llvm.dbg.declare(metadata i8*** %value_p, metadata !5825, metadata !DIExpression()), !dbg !5826
  %0 = load i32, i32* %vertex.addr, align 4, !dbg !5827
  %conv = sext i32 %0 to i64, !dbg !5827
  %1 = inttoptr i64 %conv to i8*, !dbg !5827
  store i8* %1, i8** %key, align 8, !dbg !5828
  %2 = load %struct.GHash*, %struct.GHash** %map.addr, align 8, !dbg !5829
  %3 = load i8*, i8** %key, align 8, !dbg !5830
  %call = call i8** @BLI_ghash_lookup_p(%struct.GHash* %2, i8* %3), !dbg !5831
  store i8** %call, i8*** %value_p, align 8, !dbg !5832
  %4 = load i8**, i8*** %value_p, align 8, !dbg !5833
  %cmp = icmp eq i8** %4, null, !dbg !5835
  br i1 %cmp, label %if.then, label %if.else14, !dbg !5836

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %value, metadata !5837, metadata !DIExpression()), !dbg !5839
  %5 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5840
  %vert_bitmap = getelementptr inbounds %struct.PBVH, %struct.PBVH* %5, i32 0, i32 19, !dbg !5840
  %6 = load i32*, i32** %vert_bitmap, align 8, !dbg !5840
  %7 = load i32, i32* %vertex.addr, align 4, !dbg !5840
  %shr = ashr i32 %7, 5, !dbg !5840
  %idxprom = sext i32 %shr to i64, !dbg !5840
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom, !dbg !5840
  %8 = load i32, i32* %arrayidx, align 4, !dbg !5840
  %9 = load i32, i32* %vertex.addr, align 4, !dbg !5840
  %and = and i32 %9, 31, !dbg !5840
  %shl = shl i32 1, %and, !dbg !5840
  %and2 = and i32 %8, %shl, !dbg !5840
  %tobool = icmp ne i32 %and2, 0, !dbg !5840
  br i1 %tobool, label %if.then3, label %if.else, !dbg !5842

if.then3:                                         ; preds = %if.then
  %10 = load i32*, i32** %face_verts.addr, align 8, !dbg !5843
  %11 = load i32, i32* %10, align 4, !dbg !5843
  %neg = xor i32 %11, -1, !dbg !5843
  %conv4 = zext i32 %neg to i64, !dbg !5843
  %12 = inttoptr i64 %conv4 to i8*, !dbg !5843
  store i8* %12, i8** %value, align 8, !dbg !5845
  %13 = load i32*, i32** %face_verts.addr, align 8, !dbg !5846
  %14 = load i32, i32* %13, align 4, !dbg !5847
  %inc = add i32 %14, 1, !dbg !5847
  store i32 %inc, i32* %13, align 4, !dbg !5847
  br label %if.end, !dbg !5848

if.else:                                          ; preds = %if.then
  %15 = load i32, i32* %vertex.addr, align 4, !dbg !5849
  %and5 = and i32 %15, 31, !dbg !5849
  %shl6 = shl i32 1, %and5, !dbg !5849
  %16 = load %struct.PBVH*, %struct.PBVH** %bvh.addr, align 8, !dbg !5849
  %vert_bitmap7 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %16, i32 0, i32 19, !dbg !5849
  %17 = load i32*, i32** %vert_bitmap7, align 8, !dbg !5849
  %18 = load i32, i32* %vertex.addr, align 4, !dbg !5849
  %shr8 = ashr i32 %18, 5, !dbg !5849
  %idxprom9 = sext i32 %shr8 to i64, !dbg !5849
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i64 %idxprom9, !dbg !5849
  %19 = load i32, i32* %arrayidx10, align 4, !dbg !5849
  %or = or i32 %19, %shl6, !dbg !5849
  store i32 %or, i32* %arrayidx10, align 4, !dbg !5849
  %20 = load i32*, i32** %uniq_verts.addr, align 8, !dbg !5851
  %21 = load i32, i32* %20, align 4, !dbg !5851
  %conv11 = zext i32 %21 to i64, !dbg !5851
  %22 = inttoptr i64 %conv11 to i8*, !dbg !5851
  store i8* %22, i8** %value, align 8, !dbg !5852
  %23 = load i32*, i32** %uniq_verts.addr, align 8, !dbg !5853
  %24 = load i32, i32* %23, align 4, !dbg !5854
  %inc12 = add i32 %24, 1, !dbg !5854
  store i32 %inc12, i32* %23, align 4, !dbg !5854
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  %25 = load %struct.GHash*, %struct.GHash** %map.addr, align 8, !dbg !5855
  %26 = load i8*, i8** %key, align 8, !dbg !5856
  %27 = load i8*, i8** %value, align 8, !dbg !5857
  call void @BLI_ghash_insert(%struct.GHash* %25, i8* %26, i8* %27), !dbg !5858
  %28 = load i8*, i8** %value, align 8, !dbg !5859
  %29 = ptrtoint i8* %28 to i64, !dbg !5859
  %conv13 = trunc i64 %29 to i32, !dbg !5859
  store i32 %conv13, i32* %retval, align 4, !dbg !5860
  br label %return, !dbg !5860

if.else14:                                        ; preds = %entry
  %30 = load i8**, i8*** %value_p, align 8, !dbg !5861
  %31 = load i8*, i8** %30, align 8, !dbg !5861
  %32 = ptrtoint i8* %31 to i64, !dbg !5861
  %conv15 = trunc i64 %32 to i32, !dbg !5861
  store i32 %conv15, i32* %retval, align 4, !dbg !5863
  br label %return, !dbg !5863

return:                                           ; preds = %if.else14, %if.end
  %33 = load i32, i32* %retval, align 4, !dbg !5864
  ret i32 %33, !dbg !5864
}

declare dso_local zeroext i8 @paint_is_face_hidden(%struct.MFace*, %struct.MVert*) #3

declare dso_local %struct.GHashIterator* @BLI_ghashIterator_new(%struct.GHash*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @BLI_ghashIterator_done(%struct.GHashIterator* %ghi) #0 !dbg !5865 {
entry:
  %ghi.addr = alloca %struct.GHashIterator*, align 8
  store %struct.GHashIterator* %ghi, %struct.GHashIterator** %ghi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GHashIterator** %ghi.addr, metadata !5868, metadata !DIExpression()), !dbg !5869
  %0 = load %struct.GHashIterator*, %struct.GHashIterator** %ghi.addr, align 8, !dbg !5870
  %curEntry = getelementptr inbounds %struct.GHashIterator, %struct.GHashIterator* %0, i32 0, i32 1, !dbg !5871
  %1 = load %struct.Entry*, %struct.Entry** %curEntry, align 8, !dbg !5871
  %tobool = icmp ne %struct.Entry* %1, null, !dbg !5872
  %lnot = xor i1 %tobool, true, !dbg !5872
  %lnot.ext = zext i1 %lnot to i32, !dbg !5872
  %conv = trunc i32 %lnot.ext to i8, !dbg !5872
  ret i8 %conv, !dbg !5873
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @BLI_ghashIterator_getValue(%struct.GHashIterator* %ghi) #0 !dbg !5874 {
entry:
  %ghi.addr = alloca %struct.GHashIterator*, align 8
  store %struct.GHashIterator* %ghi, %struct.GHashIterator** %ghi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GHashIterator** %ghi.addr, metadata !5877, metadata !DIExpression()), !dbg !5878
  %0 = load %struct.GHashIterator*, %struct.GHashIterator** %ghi.addr, align 8, !dbg !5879
  %curEntry = getelementptr inbounds %struct.GHashIterator, %struct.GHashIterator* %0, i32 0, i32 1, !dbg !5880
  %1 = load %struct.Entry*, %struct.Entry** %curEntry, align 8, !dbg !5880
  %2 = bitcast %struct.Entry* %1 to %struct._gh_Entry*, !dbg !5881
  %val = getelementptr inbounds %struct._gh_Entry, %struct._gh_Entry* %2, i32 0, i32 2, !dbg !5881
  %3 = load i8*, i8** %val, align 8, !dbg !5881
  ret i8* %3, !dbg !5882
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @BLI_ghashIterator_getKey(%struct.GHashIterator* %ghi) #0 !dbg !5883 {
entry:
  %ghi.addr = alloca %struct.GHashIterator*, align 8
  store %struct.GHashIterator* %ghi, %struct.GHashIterator** %ghi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GHashIterator** %ghi.addr, metadata !5884, metadata !DIExpression()), !dbg !5885
  %0 = load %struct.GHashIterator*, %struct.GHashIterator** %ghi.addr, align 8, !dbg !5886
  %curEntry = getelementptr inbounds %struct.GHashIterator, %struct.GHashIterator* %0, i32 0, i32 1, !dbg !5887
  %1 = load %struct.Entry*, %struct.Entry** %curEntry, align 8, !dbg !5887
  %2 = bitcast %struct.Entry* %1 to %struct._gh_Entry*, !dbg !5888
  %key = getelementptr inbounds %struct._gh_Entry, %struct._gh_Entry* %2, i32 0, i32 1, !dbg !5888
  %3 = load i8*, i8** %key, align 8, !dbg !5888
  ret i8* %3, !dbg !5889
}

declare dso_local void @BLI_ghashIterator_step(%struct.GHashIterator*) #3

declare dso_local void @BLI_ghashIterator_free(%struct.GHashIterator*) #3

declare dso_local void @BLI_ghash_free(%struct.GHash*, void (i8*)*, void (i8*)*) #3

declare dso_local i8** @BLI_ghash_lookup_p(%struct.GHash*, i8*) #3

declare dso_local void @BLI_ghash_insert(%struct.GHash*, i8*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal float* @CCG_elem_co(%struct.CCGKey* %UNUSED_key, %struct.CCGElem* %elem) #0 !dbg !5890 {
entry:
  %UNUSED_key.addr = alloca %struct.CCGKey*, align 8
  %elem.addr = alloca %struct.CCGElem*, align 8
  store %struct.CCGKey* %UNUSED_key, %struct.CCGKey** %UNUSED_key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGKey** %UNUSED_key.addr, metadata !5893, metadata !DIExpression()), !dbg !5894
  store %struct.CCGElem* %elem, %struct.CCGElem** %elem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGElem** %elem.addr, metadata !5895, metadata !DIExpression()), !dbg !5896
  %0 = load %struct.CCGElem*, %struct.CCGElem** %elem.addr, align 8, !dbg !5897
  %1 = bitcast %struct.CCGElem* %0 to float*, !dbg !5898
  ret float* %1, !dbg !5899
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.CCGElem* @CCG_elem_offset(%struct.CCGKey* %key, %struct.CCGElem* %elem, i32 %offset) #0 !dbg !5900 {
entry:
  %key.addr = alloca %struct.CCGKey*, align 8
  %elem.addr = alloca %struct.CCGElem*, align 8
  %offset.addr = alloca i32, align 4
  store %struct.CCGKey* %key, %struct.CCGKey** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGKey** %key.addr, metadata !5903, metadata !DIExpression()), !dbg !5904
  store %struct.CCGElem* %elem, %struct.CCGElem** %elem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGElem** %elem.addr, metadata !5905, metadata !DIExpression()), !dbg !5906
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !5907, metadata !DIExpression()), !dbg !5908
  %0 = load %struct.CCGElem*, %struct.CCGElem** %elem.addr, align 8, !dbg !5909
  %1 = bitcast %struct.CCGElem* %0 to i8*, !dbg !5910
  %2 = load %struct.CCGKey*, %struct.CCGKey** %key.addr, align 8, !dbg !5911
  %elem_size = getelementptr inbounds %struct.CCGKey, %struct.CCGKey* %2, i32 0, i32 1, !dbg !5912
  %3 = load i32, i32* %elem_size, align 4, !dbg !5912
  %4 = load i32, i32* %offset.addr, align 4, !dbg !5913
  %mul = mul nsw i32 %3, %4, !dbg !5914
  %idx.ext = sext i32 %mul to i64, !dbg !5915
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.ext, !dbg !5915
  %5 = bitcast i8* %add.ptr to %struct.CCGElem*, !dbg !5916
  ret %struct.CCGElem* %5, !dbg !5917
}

; Function Attrs: noinline nounwind uwtable
define internal void @pbvh_stack_push(%struct.PBVHIter* %iter, %struct.PBVHNode* %node, i32 %revisiting) #0 !dbg !5918 {
entry:
  %iter.addr = alloca %struct.PBVHIter*, align 8
  %node.addr = alloca %struct.PBVHNode*, align 8
  %revisiting.addr = alloca i32, align 4
  %newstack = alloca %struct.PBVHStack*, align 8
  store %struct.PBVHIter* %iter, %struct.PBVHIter** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHIter** %iter.addr, metadata !5921, metadata !DIExpression()), !dbg !5922
  store %struct.PBVHNode* %node, %struct.PBVHNode** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node.addr, metadata !5923, metadata !DIExpression()), !dbg !5924
  store i32 %revisiting, i32* %revisiting.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %revisiting.addr, metadata !5925, metadata !DIExpression()), !dbg !5926
  %0 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !5927
  %stacksize = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %0, i32 0, i32 4, !dbg !5929
  %1 = load i32, i32* %stacksize, align 8, !dbg !5929
  %2 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !5930
  %stackspace = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %2, i32 0, i32 6, !dbg !5931
  %3 = load i32, i32* %stackspace, align 8, !dbg !5931
  %cmp = icmp eq i32 %1, %3, !dbg !5932
  br i1 %cmp, label %if.then, label %if.end13, !dbg !5933

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.PBVHStack** %newstack, metadata !5934, metadata !DIExpression()), !dbg !5936
  %4 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !5937
  %stackspace1 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %4, i32 0, i32 6, !dbg !5938
  %5 = load i32, i32* %stackspace1, align 8, !dbg !5939
  %mul = mul nsw i32 %5, 2, !dbg !5939
  store i32 %mul, i32* %stackspace1, align 8, !dbg !5939
  %6 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !5940
  %7 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !5941
  %stackspace2 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %7, i32 0, i32 6, !dbg !5942
  %8 = load i32, i32* %stackspace2, align 8, !dbg !5942
  %conv = sext i32 %8 to i64, !dbg !5941
  %mul3 = mul i64 16, %conv, !dbg !5943
  %call = call i8* %6(i64 %mul3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0)), !dbg !5940
  %9 = bitcast i8* %call to %struct.PBVHStack*, !dbg !5940
  store %struct.PBVHStack* %9, %struct.PBVHStack** %newstack, align 8, !dbg !5944
  %10 = load %struct.PBVHStack*, %struct.PBVHStack** %newstack, align 8, !dbg !5945
  %11 = bitcast %struct.PBVHStack* %10 to i8*, !dbg !5946
  %12 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !5947
  %stack = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %12, i32 0, i32 3, !dbg !5948
  %13 = load %struct.PBVHStack*, %struct.PBVHStack** %stack, align 8, !dbg !5948
  %14 = bitcast %struct.PBVHStack* %13 to i8*, !dbg !5946
  %15 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !5949
  %stacksize4 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %15, i32 0, i32 4, !dbg !5950
  %16 = load i32, i32* %stacksize4, align 8, !dbg !5950
  %conv5 = sext i32 %16 to i64, !dbg !5949
  %mul6 = mul i64 16, %conv5, !dbg !5951
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %14, i64 %mul6, i1 false), !dbg !5946
  %17 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !5952
  %stackspace7 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %17, i32 0, i32 6, !dbg !5954
  %18 = load i32, i32* %stackspace7, align 8, !dbg !5954
  %cmp8 = icmp sgt i32 %18, 100, !dbg !5955
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !5956

if.then10:                                        ; preds = %if.then
  %19 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !5957
  %20 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !5958
  %stack11 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %20, i32 0, i32 3, !dbg !5959
  %21 = load %struct.PBVHStack*, %struct.PBVHStack** %stack11, align 8, !dbg !5959
  %22 = bitcast %struct.PBVHStack* %21 to i8*, !dbg !5958
  call void %19(i8* %22), !dbg !5957
  br label %if.end, !dbg !5957

if.end:                                           ; preds = %if.then10, %if.then
  %23 = load %struct.PBVHStack*, %struct.PBVHStack** %newstack, align 8, !dbg !5960
  %24 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !5961
  %stack12 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %24, i32 0, i32 3, !dbg !5962
  store %struct.PBVHStack* %23, %struct.PBVHStack** %stack12, align 8, !dbg !5963
  br label %if.end13, !dbg !5964

if.end13:                                         ; preds = %if.end, %entry
  %25 = load %struct.PBVHNode*, %struct.PBVHNode** %node.addr, align 8, !dbg !5965
  %26 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !5966
  %stack14 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %26, i32 0, i32 3, !dbg !5967
  %27 = load %struct.PBVHStack*, %struct.PBVHStack** %stack14, align 8, !dbg !5967
  %28 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !5968
  %stacksize15 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %28, i32 0, i32 4, !dbg !5969
  %29 = load i32, i32* %stacksize15, align 8, !dbg !5969
  %idxprom = sext i32 %29 to i64, !dbg !5966
  %arrayidx = getelementptr inbounds %struct.PBVHStack, %struct.PBVHStack* %27, i64 %idxprom, !dbg !5966
  %node16 = getelementptr inbounds %struct.PBVHStack, %struct.PBVHStack* %arrayidx, i32 0, i32 0, !dbg !5970
  store %struct.PBVHNode* %25, %struct.PBVHNode** %node16, align 8, !dbg !5971
  %30 = load i32, i32* %revisiting.addr, align 4, !dbg !5972
  %31 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !5973
  %stack17 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %31, i32 0, i32 3, !dbg !5974
  %32 = load %struct.PBVHStack*, %struct.PBVHStack** %stack17, align 8, !dbg !5974
  %33 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !5975
  %stacksize18 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %33, i32 0, i32 4, !dbg !5976
  %34 = load i32, i32* %stacksize18, align 8, !dbg !5976
  %idxprom19 = sext i32 %34 to i64, !dbg !5973
  %arrayidx20 = getelementptr inbounds %struct.PBVHStack, %struct.PBVHStack* %32, i64 %idxprom19, !dbg !5973
  %revisiting21 = getelementptr inbounds %struct.PBVHStack, %struct.PBVHStack* %arrayidx20, i32 0, i32 1, !dbg !5977
  store i32 %30, i32* %revisiting21, align 8, !dbg !5978
  %35 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !5979
  %stacksize22 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %35, i32 0, i32 4, !dbg !5980
  %36 = load i32, i32* %stacksize22, align 8, !dbg !5981
  %inc = add nsw i32 %36, 1, !dbg !5981
  store i32 %inc, i32* %stacksize22, align 8, !dbg !5981
  ret void, !dbg !5982
}

; Function Attrs: noinline nounwind uwtable
define internal float* @CCG_elem_no(%struct.CCGKey* %key, %struct.CCGElem* %elem) #0 !dbg !5983 {
entry:
  %key.addr = alloca %struct.CCGKey*, align 8
  %elem.addr = alloca %struct.CCGElem*, align 8
  store %struct.CCGKey* %key, %struct.CCGKey** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGKey** %key.addr, metadata !5984, metadata !DIExpression()), !dbg !5985
  store %struct.CCGElem* %elem, %struct.CCGElem** %elem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGElem** %elem.addr, metadata !5986, metadata !DIExpression()), !dbg !5987
  %0 = load %struct.CCGElem*, %struct.CCGElem** %elem.addr, align 8, !dbg !5988
  %1 = bitcast %struct.CCGElem* %0 to i8*, !dbg !5989
  %2 = load %struct.CCGKey*, %struct.CCGKey** %key.addr, align 8, !dbg !5990
  %normal_offset = getelementptr inbounds %struct.CCGKey, %struct.CCGKey* %2, i32 0, i32 5, !dbg !5991
  %3 = load i32, i32* %normal_offset, align 4, !dbg !5991
  %idx.ext = sext i32 %3 to i64, !dbg !5992
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.ext, !dbg !5992
  %4 = bitcast i8* %add.ptr to float*, !dbg !5993
  ret float* %4, !dbg !5994
}

; Function Attrs: noinline nounwind uwtable
define internal float* @CCG_elem_mask(%struct.CCGKey* %key, %struct.CCGElem* %elem) #0 !dbg !5995 {
entry:
  %key.addr = alloca %struct.CCGKey*, align 8
  %elem.addr = alloca %struct.CCGElem*, align 8
  store %struct.CCGKey* %key, %struct.CCGKey** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGKey** %key.addr, metadata !5996, metadata !DIExpression()), !dbg !5997
  store %struct.CCGElem* %elem, %struct.CCGElem** %elem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGElem** %elem.addr, metadata !5998, metadata !DIExpression()), !dbg !5999
  %0 = load %struct.CCGElem*, %struct.CCGElem** %elem.addr, align 8, !dbg !6000
  %1 = bitcast %struct.CCGElem* %0 to i8*, !dbg !6001
  %2 = load %struct.CCGKey*, %struct.CCGKey** %key.addr, align 8, !dbg !6002
  %mask_offset = getelementptr inbounds %struct.CCGKey, %struct.CCGKey* %2, i32 0, i32 6, !dbg !6003
  %3 = load i32, i32* %mask_offset, align 4, !dbg !6003
  %idx.ext = sext i32 %3 to i64, !dbg !6004
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.ext, !dbg !6004
  %4 = bitcast i8* %add.ptr to float*, !dbg !6005
  ret float* %4, !dbg !6006
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.CCGElem* @CCG_elem_next(%struct.CCGKey* %key, %struct.CCGElem* %elem) #0 !dbg !6007 {
entry:
  %key.addr = alloca %struct.CCGKey*, align 8
  %elem.addr = alloca %struct.CCGElem*, align 8
  store %struct.CCGKey* %key, %struct.CCGKey** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGKey** %key.addr, metadata !6010, metadata !DIExpression()), !dbg !6011
  store %struct.CCGElem* %elem, %struct.CCGElem** %elem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGElem** %elem.addr, metadata !6012, metadata !DIExpression()), !dbg !6013
  %0 = load %struct.CCGKey*, %struct.CCGKey** %key.addr, align 8, !dbg !6014
  %1 = load %struct.CCGElem*, %struct.CCGElem** %elem.addr, align 8, !dbg !6015
  %call = call %struct.CCGElem* @CCG_elem_offset(%struct.CCGKey* %0, %struct.CCGElem* %1, i32 1), !dbg !6016
  ret %struct.CCGElem* %call, !dbg !6017
}

declare dso_local void @pbvh_bmesh_normals_update(%struct.PBVHNode**, i32) #3

declare dso_local float @normal_quad_v3(float*, float*, float*, float*, float*) #3

declare dso_local float @normal_tri_v3(float*, float*, float*, float*) #3

; Function Attrs: noinline nounwind uwtable
define internal float @normalize_v3(float* %n) #0 !dbg !6018 {
entry:
  %n.addr = alloca float*, align 8
  store float* %n, float** %n.addr, align 8
  call void @llvm.dbg.declare(metadata float** %n.addr, metadata !6021, metadata !DIExpression()), !dbg !6022
  %0 = load float*, float** %n.addr, align 8, !dbg !6023
  %1 = load float*, float** %n.addr, align 8, !dbg !6024
  %call = call float @normalize_v3_v3(float* %0, float* %1), !dbg !6025
  ret float %call, !dbg !6026
}

; Function Attrs: noinline nounwind uwtable
define internal void @normal_float_to_short_v3(i16* %out, float* %in) #0 !dbg !6027 {
entry:
  %out.addr = alloca i16*, align 8
  %in.addr = alloca float*, align 8
  store i16* %out, i16** %out.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %out.addr, metadata !6030, metadata !DIExpression()), !dbg !6031
  store float* %in, float** %in.addr, align 8
  call void @llvm.dbg.declare(metadata float** %in.addr, metadata !6032, metadata !DIExpression()), !dbg !6033
  %0 = load float*, float** %in.addr, align 8, !dbg !6034
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !6034
  %1 = load float, float* %arrayidx, align 4, !dbg !6034
  %mul = fmul float %1, 3.276700e+04, !dbg !6035
  %conv = fptosi float %mul to i16, !dbg !6036
  %2 = load i16*, i16** %out.addr, align 8, !dbg !6037
  %arrayidx1 = getelementptr inbounds i16, i16* %2, i64 0, !dbg !6037
  store i16 %conv, i16* %arrayidx1, align 2, !dbg !6038
  %3 = load float*, float** %in.addr, align 8, !dbg !6039
  %arrayidx2 = getelementptr inbounds float, float* %3, i64 1, !dbg !6039
  %4 = load float, float* %arrayidx2, align 4, !dbg !6039
  %mul3 = fmul float %4, 3.276700e+04, !dbg !6040
  %conv4 = fptosi float %mul3 to i16, !dbg !6041
  %5 = load i16*, i16** %out.addr, align 8, !dbg !6042
  %arrayidx5 = getelementptr inbounds i16, i16* %5, i64 1, !dbg !6042
  store i16 %conv4, i16* %arrayidx5, align 2, !dbg !6043
  %6 = load float*, float** %in.addr, align 8, !dbg !6044
  %arrayidx6 = getelementptr inbounds float, float* %6, i64 2, !dbg !6044
  %7 = load float, float* %arrayidx6, align 4, !dbg !6044
  %mul7 = fmul float %7, 3.276700e+04, !dbg !6045
  %conv8 = fptosi float %mul7 to i16, !dbg !6046
  %8 = load i16*, i16** %out.addr, align 8, !dbg !6047
  %arrayidx9 = getelementptr inbounds i16, i16* %8, i64 2, !dbg !6047
  store i16 %conv8, i16* %arrayidx9, align 2, !dbg !6048
  ret void, !dbg !6049
}

; Function Attrs: noinline nounwind uwtable
define internal float @normalize_v3_v3(float* %r, float* %a) #0 !dbg !6050 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %d = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !6053, metadata !DIExpression()), !dbg !6054
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !6055, metadata !DIExpression()), !dbg !6056
  call void @llvm.dbg.declare(metadata float* %d, metadata !6057, metadata !DIExpression()), !dbg !6058
  %0 = load float*, float** %a.addr, align 8, !dbg !6059
  %1 = load float*, float** %a.addr, align 8, !dbg !6060
  %call = call float @dot_v3v3(float* %0, float* %1), !dbg !6061
  store float %call, float* %d, align 4, !dbg !6058
  %2 = load float, float* %d, align 4, !dbg !6062
  %cmp = fcmp ogt float %2, 0x38AA95A5C0000000, !dbg !6064
  br i1 %cmp, label %if.then, label %if.else, !dbg !6065

if.then:                                          ; preds = %entry
  %3 = load float, float* %d, align 4, !dbg !6066
  %call1 = call float @sqrtf(float %3) #5, !dbg !6068
  store float %call1, float* %d, align 4, !dbg !6069
  %4 = load float*, float** %r.addr, align 8, !dbg !6070
  %5 = load float*, float** %a.addr, align 8, !dbg !6071
  %6 = load float, float* %d, align 4, !dbg !6072
  %div = fdiv float 1.000000e+00, %6, !dbg !6073
  call void @mul_v3_v3fl(float* %4, float* %5, float %div), !dbg !6074
  br label %if.end, !dbg !6075

if.else:                                          ; preds = %entry
  %7 = load float*, float** %r.addr, align 8, !dbg !6076
  call void @zero_v3(float* %7), !dbg !6078
  store float 0.000000e+00, float* %d, align 4, !dbg !6079
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load float, float* %d, align 4, !dbg !6080
  ret float %8, !dbg !6081
}

; Function Attrs: noinline nounwind uwtable
define internal float @dot_v3v3(float* %a, float* %b) #0 !dbg !6082 {
entry:
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !6085, metadata !DIExpression()), !dbg !6086
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !6087, metadata !DIExpression()), !dbg !6088
  %0 = load float*, float** %a.addr, align 8, !dbg !6089
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !6089
  %1 = load float, float* %arrayidx, align 4, !dbg !6089
  %2 = load float*, float** %b.addr, align 8, !dbg !6090
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !6090
  %3 = load float, float* %arrayidx1, align 4, !dbg !6090
  %mul = fmul float %1, %3, !dbg !6091
  %4 = load float*, float** %a.addr, align 8, !dbg !6092
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !6092
  %5 = load float, float* %arrayidx2, align 4, !dbg !6092
  %6 = load float*, float** %b.addr, align 8, !dbg !6093
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !6093
  %7 = load float, float* %arrayidx3, align 4, !dbg !6093
  %mul4 = fmul float %5, %7, !dbg !6094
  %add = fadd float %mul, %mul4, !dbg !6095
  %8 = load float*, float** %a.addr, align 8, !dbg !6096
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !6096
  %9 = load float, float* %arrayidx5, align 4, !dbg !6096
  %10 = load float*, float** %b.addr, align 8, !dbg !6097
  %arrayidx6 = getelementptr inbounds float, float* %10, i64 2, !dbg !6097
  %11 = load float, float* %arrayidx6, align 4, !dbg !6097
  %mul7 = fmul float %9, %11, !dbg !6098
  %add8 = fadd float %add, %mul7, !dbg !6099
  ret float %add8, !dbg !6100
}

; Function Attrs: nounwind
declare dso_local float @sqrtf(float) #4

declare dso_local void @BLI_ghashIterator_init(%struct.GHashIterator*, %struct.GHash*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.PBVHNode* @pbvh_iter_next_occluded(%struct.PBVHIter* %iter) #0 !dbg !6101 {
entry:
  %retval = alloca %struct.PBVHNode*, align 8
  %iter.addr = alloca %struct.PBVHIter*, align 8
  %node = alloca %struct.PBVHNode*, align 8
  store %struct.PBVHIter* %iter, %struct.PBVHIter** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PBVHIter** %iter.addr, metadata !6102, metadata !DIExpression()), !dbg !6103
  call void @llvm.dbg.declare(metadata %struct.PBVHNode** %node, metadata !6104, metadata !DIExpression()), !dbg !6105
  br label %while.cond, !dbg !6106

while.cond:                                       ; preds = %if.end17, %if.then7, %entry
  %0 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !6107
  %stacksize = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %0, i32 0, i32 4, !dbg !6108
  %1 = load i32, i32* %stacksize, align 8, !dbg !6108
  %tobool = icmp ne i32 %1, 0, !dbg !6106
  br i1 %tobool, label %while.body, label %while.end, !dbg !6106

while.body:                                       ; preds = %while.cond
  %2 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !6109
  %stacksize1 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %2, i32 0, i32 4, !dbg !6111
  %3 = load i32, i32* %stacksize1, align 8, !dbg !6112
  %dec = add nsw i32 %3, -1, !dbg !6112
  store i32 %dec, i32* %stacksize1, align 8, !dbg !6112
  %4 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !6113
  %stack = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %4, i32 0, i32 3, !dbg !6114
  %5 = load %struct.PBVHStack*, %struct.PBVHStack** %stack, align 8, !dbg !6114
  %6 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !6115
  %stacksize2 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %6, i32 0, i32 4, !dbg !6116
  %7 = load i32, i32* %stacksize2, align 8, !dbg !6116
  %idxprom = sext i32 %7 to i64, !dbg !6113
  %arrayidx = getelementptr inbounds %struct.PBVHStack, %struct.PBVHStack* %5, i64 %idxprom, !dbg !6113
  %node3 = getelementptr inbounds %struct.PBVHStack, %struct.PBVHStack* %arrayidx, i32 0, i32 0, !dbg !6117
  %8 = load %struct.PBVHNode*, %struct.PBVHNode** %node3, align 8, !dbg !6117
  store %struct.PBVHNode* %8, %struct.PBVHNode** %node, align 8, !dbg !6118
  %9 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !6119
  %cmp = icmp eq %struct.PBVHNode* %9, null, !dbg !6121
  br i1 %cmp, label %if.then, label %if.end, !dbg !6122

if.then:                                          ; preds = %while.body
  store %struct.PBVHNode* null, %struct.PBVHNode** %retval, align 8, !dbg !6123
  br label %return, !dbg !6123

if.end:                                           ; preds = %while.body
  %10 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !6124
  %scb = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %10, i32 0, i32 1, !dbg !6126
  %11 = load i8 (%struct.PBVHNode*, i8*)*, i8 (%struct.PBVHNode*, i8*)** %scb, align 8, !dbg !6126
  %tobool4 = icmp ne i8 (%struct.PBVHNode*, i8*)* %11, null, !dbg !6124
  br i1 %tobool4, label %land.lhs.true, label %if.end8, !dbg !6127

land.lhs.true:                                    ; preds = %if.end
  %12 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !6128
  %scb5 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %12, i32 0, i32 1, !dbg !6129
  %13 = load i8 (%struct.PBVHNode*, i8*)*, i8 (%struct.PBVHNode*, i8*)** %scb5, align 8, !dbg !6129
  %14 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !6130
  %15 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !6131
  %search_data = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %15, i32 0, i32 2, !dbg !6132
  %16 = load i8*, i8** %search_data, align 8, !dbg !6132
  %call = call zeroext i8 %13(%struct.PBVHNode* %14, i8* %16), !dbg !6128
  %tobool6 = icmp ne i8 %call, 0, !dbg !6128
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !6133

if.then7:                                         ; preds = %land.lhs.true
  br label %while.cond, !dbg !6134, !llvm.loop !6135

if.end8:                                          ; preds = %land.lhs.true, %if.end
  %17 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !6137
  %flag = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %17, i32 0, i32 10, !dbg !6139
  %bf.load = load i16, i16* %flag, align 8, !dbg !6139
  %bf.cast = zext i16 %bf.load to i32, !dbg !6139
  %and = and i32 %bf.cast, 1, !dbg !6140
  %tobool9 = icmp ne i32 %and, 0, !dbg !6140
  br i1 %tobool9, label %if.then10, label %if.else, !dbg !6141

if.then10:                                        ; preds = %if.end8
  %18 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !6142
  store %struct.PBVHNode* %18, %struct.PBVHNode** %retval, align 8, !dbg !6144
  br label %return, !dbg !6144

if.else:                                          ; preds = %if.end8
  %19 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !6145
  %20 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !6147
  %bvh = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %20, i32 0, i32 0, !dbg !6148
  %21 = load %struct.PBVH*, %struct.PBVH** %bvh, align 8, !dbg !6148
  %nodes = getelementptr inbounds %struct.PBVH, %struct.PBVH* %21, i32 0, i32 2, !dbg !6149
  %22 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes, align 8, !dbg !6149
  %23 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !6150
  %children_offset = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %23, i32 0, i32 3, !dbg !6151
  %24 = load i32, i32* %children_offset, align 8, !dbg !6151
  %idx.ext = sext i32 %24 to i64, !dbg !6152
  %add.ptr = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %22, i64 %idx.ext, !dbg !6152
  %add.ptr11 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %add.ptr, i64 1, !dbg !6153
  call void @pbvh_stack_push(%struct.PBVHIter* %19, %struct.PBVHNode* %add.ptr11, i32 0), !dbg !6154
  %25 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !6155
  %26 = load %struct.PBVHIter*, %struct.PBVHIter** %iter.addr, align 8, !dbg !6156
  %bvh12 = getelementptr inbounds %struct.PBVHIter, %struct.PBVHIter* %26, i32 0, i32 0, !dbg !6157
  %27 = load %struct.PBVH*, %struct.PBVH** %bvh12, align 8, !dbg !6157
  %nodes13 = getelementptr inbounds %struct.PBVH, %struct.PBVH* %27, i32 0, i32 2, !dbg !6158
  %28 = load %struct.PBVHNode*, %struct.PBVHNode** %nodes13, align 8, !dbg !6158
  %29 = load %struct.PBVHNode*, %struct.PBVHNode** %node, align 8, !dbg !6159
  %children_offset14 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %29, i32 0, i32 3, !dbg !6160
  %30 = load i32, i32* %children_offset14, align 8, !dbg !6160
  %idx.ext15 = sext i32 %30 to i64, !dbg !6161
  %add.ptr16 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %28, i64 %idx.ext15, !dbg !6161
  call void @pbvh_stack_push(%struct.PBVHIter* %25, %struct.PBVHNode* %add.ptr16, i32 0), !dbg !6162
  br label %if.end17

if.end17:                                         ; preds = %if.else
  br label %while.cond, !dbg !6106, !llvm.loop !6135

while.end:                                        ; preds = %while.cond
  store %struct.PBVHNode* null, %struct.PBVHNode** %retval, align 8, !dbg !6163
  br label %return, !dbg !6163

return:                                           ; preds = %while.end, %if.then10, %if.then
  %31 = load %struct.PBVHNode*, %struct.PBVHNode** %retval, align 8, !dbg !6164
  ret %struct.PBVHNode* %31, !dbg !6164
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #4

; Function Attrs: noinline nounwind uwtable
define internal void @node_tree_insert(%struct.node_tree* %tree, %struct.node_tree* %new_node) #0 !dbg !6165 {
entry:
  %tree.addr = alloca %struct.node_tree*, align 8
  %new_node.addr = alloca %struct.node_tree*, align 8
  store %struct.node_tree* %tree, %struct.node_tree** %tree.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.node_tree** %tree.addr, metadata !6168, metadata !DIExpression()), !dbg !6169
  store %struct.node_tree* %new_node, %struct.node_tree** %new_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.node_tree** %new_node.addr, metadata !6170, metadata !DIExpression()), !dbg !6171
  %0 = load %struct.node_tree*, %struct.node_tree** %new_node.addr, align 8, !dbg !6172
  %data = getelementptr inbounds %struct.node_tree, %struct.node_tree* %0, i32 0, i32 0, !dbg !6174
  %1 = load %struct.PBVHNode*, %struct.PBVHNode** %data, align 8, !dbg !6174
  %tmin = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %1, i32 0, i32 11, !dbg !6175
  %2 = load float, float* %tmin, align 4, !dbg !6175
  %3 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6176
  %data1 = getelementptr inbounds %struct.node_tree, %struct.node_tree* %3, i32 0, i32 0, !dbg !6177
  %4 = load %struct.PBVHNode*, %struct.PBVHNode** %data1, align 8, !dbg !6177
  %tmin2 = getelementptr inbounds %struct.PBVHNode, %struct.PBVHNode* %4, i32 0, i32 11, !dbg !6178
  %5 = load float, float* %tmin2, align 4, !dbg !6178
  %cmp = fcmp olt float %2, %5, !dbg !6179
  br i1 %cmp, label %if.then, label %if.else6, !dbg !6180

if.then:                                          ; preds = %entry
  %6 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6181
  %left = getelementptr inbounds %struct.node_tree, %struct.node_tree* %6, i32 0, i32 1, !dbg !6184
  %7 = load %struct.node_tree*, %struct.node_tree** %left, align 8, !dbg !6184
  %tobool = icmp ne %struct.node_tree* %7, null, !dbg !6181
  br i1 %tobool, label %if.then3, label %if.else, !dbg !6185

if.then3:                                         ; preds = %if.then
  %8 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6186
  %left4 = getelementptr inbounds %struct.node_tree, %struct.node_tree* %8, i32 0, i32 1, !dbg !6188
  %9 = load %struct.node_tree*, %struct.node_tree** %left4, align 8, !dbg !6188
  %10 = load %struct.node_tree*, %struct.node_tree** %new_node.addr, align 8, !dbg !6189
  call void @node_tree_insert(%struct.node_tree* %9, %struct.node_tree* %10), !dbg !6190
  br label %if.end, !dbg !6191

if.else:                                          ; preds = %if.then
  %11 = load %struct.node_tree*, %struct.node_tree** %new_node.addr, align 8, !dbg !6192
  %12 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6194
  %left5 = getelementptr inbounds %struct.node_tree, %struct.node_tree* %12, i32 0, i32 1, !dbg !6195
  store %struct.node_tree* %11, %struct.node_tree** %left5, align 8, !dbg !6196
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end13, !dbg !6197

if.else6:                                         ; preds = %entry
  %13 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6198
  %right = getelementptr inbounds %struct.node_tree, %struct.node_tree* %13, i32 0, i32 2, !dbg !6201
  %14 = load %struct.node_tree*, %struct.node_tree** %right, align 8, !dbg !6201
  %tobool7 = icmp ne %struct.node_tree* %14, null, !dbg !6198
  br i1 %tobool7, label %if.then8, label %if.else10, !dbg !6202

if.then8:                                         ; preds = %if.else6
  %15 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6203
  %right9 = getelementptr inbounds %struct.node_tree, %struct.node_tree* %15, i32 0, i32 2, !dbg !6205
  %16 = load %struct.node_tree*, %struct.node_tree** %right9, align 8, !dbg !6205
  %17 = load %struct.node_tree*, %struct.node_tree** %new_node.addr, align 8, !dbg !6206
  call void @node_tree_insert(%struct.node_tree* %16, %struct.node_tree* %17), !dbg !6207
  br label %if.end12, !dbg !6208

if.else10:                                        ; preds = %if.else6
  %18 = load %struct.node_tree*, %struct.node_tree** %new_node.addr, align 8, !dbg !6209
  %19 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6211
  %right11 = getelementptr inbounds %struct.node_tree, %struct.node_tree* %19, i32 0, i32 2, !dbg !6212
  store %struct.node_tree* %18, %struct.node_tree** %right11, align 8, !dbg !6213
  br label %if.end12

if.end12:                                         ; preds = %if.else10, %if.then8
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  ret void, !dbg !6214
}

; Function Attrs: noinline nounwind uwtable
define internal void @traverse_tree(%struct.node_tree* %tree, void (%struct.PBVHNode*, i8*, float*)* %hcb, i8* %hit_data, float* %tmin) #0 !dbg !6215 {
entry:
  %tree.addr = alloca %struct.node_tree*, align 8
  %hcb.addr = alloca void (%struct.PBVHNode*, i8*, float*)*, align 8
  %hit_data.addr = alloca i8*, align 8
  %tmin.addr = alloca float*, align 8
  store %struct.node_tree* %tree, %struct.node_tree** %tree.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.node_tree** %tree.addr, metadata !6218, metadata !DIExpression()), !dbg !6219
  store void (%struct.PBVHNode*, i8*, float*)* %hcb, void (%struct.PBVHNode*, i8*, float*)** %hcb.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.PBVHNode*, i8*, float*)** %hcb.addr, metadata !6220, metadata !DIExpression()), !dbg !6221
  store i8* %hit_data, i8** %hit_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %hit_data.addr, metadata !6222, metadata !DIExpression()), !dbg !6223
  store float* %tmin, float** %tmin.addr, align 8
  call void @llvm.dbg.declare(metadata float** %tmin.addr, metadata !6224, metadata !DIExpression()), !dbg !6225
  %0 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6226
  %left = getelementptr inbounds %struct.node_tree, %struct.node_tree* %0, i32 0, i32 1, !dbg !6228
  %1 = load %struct.node_tree*, %struct.node_tree** %left, align 8, !dbg !6228
  %tobool = icmp ne %struct.node_tree* %1, null, !dbg !6226
  br i1 %tobool, label %if.then, label %if.end, !dbg !6229

if.then:                                          ; preds = %entry
  %2 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6230
  %left1 = getelementptr inbounds %struct.node_tree, %struct.node_tree* %2, i32 0, i32 1, !dbg !6231
  %3 = load %struct.node_tree*, %struct.node_tree** %left1, align 8, !dbg !6231
  %4 = load void (%struct.PBVHNode*, i8*, float*)*, void (%struct.PBVHNode*, i8*, float*)** %hcb.addr, align 8, !dbg !6232
  %5 = load i8*, i8** %hit_data.addr, align 8, !dbg !6233
  %6 = load float*, float** %tmin.addr, align 8, !dbg !6234
  call void @traverse_tree(%struct.node_tree* %3, void (%struct.PBVHNode*, i8*, float*)* %4, i8* %5, float* %6), !dbg !6235
  br label %if.end, !dbg !6235

if.end:                                           ; preds = %if.then, %entry
  %7 = load void (%struct.PBVHNode*, i8*, float*)*, void (%struct.PBVHNode*, i8*, float*)** %hcb.addr, align 8, !dbg !6236
  %8 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6237
  %data = getelementptr inbounds %struct.node_tree, %struct.node_tree* %8, i32 0, i32 0, !dbg !6238
  %9 = load %struct.PBVHNode*, %struct.PBVHNode** %data, align 8, !dbg !6238
  %10 = load i8*, i8** %hit_data.addr, align 8, !dbg !6239
  %11 = load float*, float** %tmin.addr, align 8, !dbg !6240
  call void %7(%struct.PBVHNode* %9, i8* %10, float* %11), !dbg !6236
  %12 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6241
  %right = getelementptr inbounds %struct.node_tree, %struct.node_tree* %12, i32 0, i32 2, !dbg !6243
  %13 = load %struct.node_tree*, %struct.node_tree** %right, align 8, !dbg !6243
  %tobool2 = icmp ne %struct.node_tree* %13, null, !dbg !6241
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !6244

if.then3:                                         ; preds = %if.end
  %14 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6245
  %right4 = getelementptr inbounds %struct.node_tree, %struct.node_tree* %14, i32 0, i32 2, !dbg !6246
  %15 = load %struct.node_tree*, %struct.node_tree** %right4, align 8, !dbg !6246
  %16 = load void (%struct.PBVHNode*, i8*, float*)*, void (%struct.PBVHNode*, i8*, float*)** %hcb.addr, align 8, !dbg !6247
  %17 = load i8*, i8** %hit_data.addr, align 8, !dbg !6248
  %18 = load float*, float** %tmin.addr, align 8, !dbg !6249
  call void @traverse_tree(%struct.node_tree* %15, void (%struct.PBVHNode*, i8*, float*)* %16, i8* %17, float* %18), !dbg !6250
  br label %if.end5, !dbg !6250

if.end5:                                          ; preds = %if.then3, %if.end
  ret void, !dbg !6251
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_tree(%struct.node_tree* %tree) #0 !dbg !6252 {
entry:
  %tree.addr = alloca %struct.node_tree*, align 8
  store %struct.node_tree* %tree, %struct.node_tree** %tree.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.node_tree** %tree.addr, metadata !6255, metadata !DIExpression()), !dbg !6256
  %0 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6257
  %left = getelementptr inbounds %struct.node_tree, %struct.node_tree* %0, i32 0, i32 1, !dbg !6259
  %1 = load %struct.node_tree*, %struct.node_tree** %left, align 8, !dbg !6259
  %tobool = icmp ne %struct.node_tree* %1, null, !dbg !6257
  br i1 %tobool, label %if.then, label %if.end, !dbg !6260

if.then:                                          ; preds = %entry
  %2 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6261
  %left1 = getelementptr inbounds %struct.node_tree, %struct.node_tree* %2, i32 0, i32 1, !dbg !6263
  %3 = load %struct.node_tree*, %struct.node_tree** %left1, align 8, !dbg !6263
  call void @free_tree(%struct.node_tree* %3), !dbg !6264
  %4 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6265
  %left2 = getelementptr inbounds %struct.node_tree, %struct.node_tree* %4, i32 0, i32 1, !dbg !6266
  store %struct.node_tree* null, %struct.node_tree** %left2, align 8, !dbg !6267
  br label %if.end, !dbg !6268

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6269
  %right = getelementptr inbounds %struct.node_tree, %struct.node_tree* %5, i32 0, i32 2, !dbg !6271
  %6 = load %struct.node_tree*, %struct.node_tree** %right, align 8, !dbg !6271
  %tobool3 = icmp ne %struct.node_tree* %6, null, !dbg !6269
  br i1 %tobool3, label %if.then4, label %if.end7, !dbg !6272

if.then4:                                         ; preds = %if.end
  %7 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6273
  %right5 = getelementptr inbounds %struct.node_tree, %struct.node_tree* %7, i32 0, i32 2, !dbg !6275
  %8 = load %struct.node_tree*, %struct.node_tree** %right5, align 8, !dbg !6275
  call void @free_tree(%struct.node_tree* %8), !dbg !6276
  %9 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6277
  %right6 = getelementptr inbounds %struct.node_tree, %struct.node_tree* %9, i32 0, i32 2, !dbg !6278
  store %struct.node_tree* null, %struct.node_tree** %right6, align 8, !dbg !6279
  br label %if.end7, !dbg !6280

if.end7:                                          ; preds = %if.then4, %if.end
  %10 = load %struct.node_tree*, %struct.node_tree** %tree.addr, align 8, !dbg !6281
  %11 = bitcast %struct.node_tree* %10 to i8*, !dbg !6281
  call void @free(i8* %11) #5, !dbg !6282
  ret void, !dbg !6283
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #4

; Function Attrs: noinline nounwind uwtable
define internal float* @CCG_grid_elem_co(%struct.CCGKey* %key, %struct.CCGElem* %elem, i32 %x, i32 %y) #0 !dbg !6284 {
entry:
  %key.addr = alloca %struct.CCGKey*, align 8
  %elem.addr = alloca %struct.CCGElem*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store %struct.CCGKey* %key, %struct.CCGKey** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGKey** %key.addr, metadata !6287, metadata !DIExpression()), !dbg !6288
  store %struct.CCGElem* %elem, %struct.CCGElem** %elem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGElem** %elem.addr, metadata !6289, metadata !DIExpression()), !dbg !6290
  store i32 %x, i32* %x.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr, metadata !6291, metadata !DIExpression()), !dbg !6292
  store i32 %y, i32* %y.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %y.addr, metadata !6293, metadata !DIExpression()), !dbg !6294
  %0 = load %struct.CCGKey*, %struct.CCGKey** %key.addr, align 8, !dbg !6295
  %1 = load %struct.CCGKey*, %struct.CCGKey** %key.addr, align 8, !dbg !6296
  %2 = load %struct.CCGElem*, %struct.CCGElem** %elem.addr, align 8, !dbg !6297
  %3 = load i32, i32* %x.addr, align 4, !dbg !6298
  %4 = load i32, i32* %y.addr, align 4, !dbg !6299
  %call = call %struct.CCGElem* @CCG_grid_elem(%struct.CCGKey* %1, %struct.CCGElem* %2, i32 %3, i32 %4), !dbg !6300
  %call1 = call float* @CCG_elem_co(%struct.CCGKey* %0, %struct.CCGElem* %call), !dbg !6301
  ret float* %call1, !dbg !6302
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.CCGElem* @CCG_grid_elem(%struct.CCGKey* %key, %struct.CCGElem* %elem, i32 %x, i32 %y) #0 !dbg !6303 {
entry:
  %key.addr = alloca %struct.CCGKey*, align 8
  %elem.addr = alloca %struct.CCGElem*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store %struct.CCGKey* %key, %struct.CCGKey** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGKey** %key.addr, metadata !6306, metadata !DIExpression()), !dbg !6307
  store %struct.CCGElem* %elem, %struct.CCGElem** %elem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.CCGElem** %elem.addr, metadata !6308, metadata !DIExpression()), !dbg !6309
  store i32 %x, i32* %x.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr, metadata !6310, metadata !DIExpression()), !dbg !6311
  store i32 %y, i32* %y.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %y.addr, metadata !6312, metadata !DIExpression()), !dbg !6313
  %0 = load %struct.CCGKey*, %struct.CCGKey** %key.addr, align 8, !dbg !6314
  %1 = load %struct.CCGElem*, %struct.CCGElem** %elem.addr, align 8, !dbg !6315
  %2 = load i32, i32* %y.addr, align 4, !dbg !6316
  %3 = load %struct.CCGKey*, %struct.CCGKey** %key.addr, align 8, !dbg !6317
  %grid_size = getelementptr inbounds %struct.CCGKey, %struct.CCGKey* %3, i32 0, i32 2, !dbg !6318
  %4 = load i32, i32* %grid_size, align 4, !dbg !6318
  %mul = mul nsw i32 %2, %4, !dbg !6319
  %5 = load i32, i32* %x.addr, align 4, !dbg !6320
  %add = add nsw i32 %mul, %5, !dbg !6321
  %call = call %struct.CCGElem* @CCG_elem_offset(%struct.CCGKey* %0, %struct.CCGElem* %1, i32 %add), !dbg !6322
  ret %struct.CCGElem* %call, !dbg !6323
}

declare dso_local zeroext i8 @GPU_pbvh_buffers_diffuse_changed(%struct.GPU_PBVH_Buffers*, %struct.GSet*, i8 zeroext) #3

declare dso_local %struct.GPU_PBVH_Buffers* @GPU_build_grid_pbvh_buffers(i32*, i32, i32**, i32) #3

declare dso_local %struct.GPU_PBVH_Buffers* @GPU_build_mesh_pbvh_buffers([4 x i32]*, %struct.MFace*, %struct.MVert*, i32*, i32) #3

declare dso_local %struct.GPU_PBVH_Buffers* @GPU_build_bmesh_pbvh_buffers(i32) #3

declare dso_local void @GPU_update_grid_pbvh_buffers(%struct.GPU_PBVH_Buffers*, %struct.CCGElem**, %struct.DMFlagMat*, i32*, i32, %struct.CCGKey*, i8 zeroext) #3

declare dso_local void @GPU_update_mesh_pbvh_buffers(%struct.GPU_PBVH_Buffers*, %struct.MVert*, i32*, i32, float*, [4 x i32]*, i8 zeroext) #3

declare dso_local void @GPU_update_bmesh_pbvh_buffers(%struct.GPU_PBVH_Buffers*, %struct.BMesh*, %struct.GSet*, %struct.GSet*, %struct.GSet*, i8 zeroext) #3

declare dso_local void @GPU_init_draw_pbvh_BB() #3

declare dso_local void @GPU_draw_pbvh_BB(float*, float*, i8 zeroext) #3

declare dso_local void @GPU_end_draw_pbvh_BB() #3

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!169, !170, !171}
!llvm.ident = !{!172}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !123, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "blender/source/blender/blenkernel/intern/pbvh.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!2 = !{!3, !10, !14, !25, !36, !42, !48, !56, !63, !68, !75, !119}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 118, baseType: !5, size: 32, elements: !6)
!4 = !DIFile(filename: "blender/source/blender/blenkernel/BKE_pbvh.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!5 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!6 = !{!7, !8, !9}
!7 = !DIEnumerator(name: "PBVH_FACES", value: 0, isUnsigned: true)
!8 = !DIEnumerator(name: "PBVH_GRIDS", value: 1, isUnsigned: true)
!9 = !DIEnumerator(name: "PBVH_BMESH", value: 2, isUnsigned: true)
!10 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !11, line: 115, baseType: !5, size: 32, elements: !12)
!11 = !DIFile(filename: "blender/source/blender/blenkernel/intern/pbvh_intern.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!12 = !{!13}
!13 = !DIEnumerator(name: "PBVH_DYNTOPO_SMOOTH_SHADING", value: 1, isUnsigned: true)
!14 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 152, baseType: !5, size: 32, elements: !15)
!15 = !{!16, !17, !18, !19, !20, !21, !22, !23, !24}
!16 = !DIEnumerator(name: "PBVH_Leaf", value: 1, isUnsigned: true)
!17 = !DIEnumerator(name: "PBVH_UpdateNormals", value: 2, isUnsigned: true)
!18 = !DIEnumerator(name: "PBVH_UpdateBB", value: 4, isUnsigned: true)
!19 = !DIEnumerator(name: "PBVH_UpdateOriginalBB", value: 8, isUnsigned: true)
!20 = !DIEnumerator(name: "PBVH_UpdateDrawBuffers", value: 16, isUnsigned: true)
!21 = !DIEnumerator(name: "PBVH_UpdateRedraw", value: 32, isUnsigned: true)
!22 = !DIEnumerator(name: "PBVH_RebuildDrawBuffers", value: 64, isUnsigned: true)
!23 = !DIEnumerator(name: "PBVH_FullyHidden", value: 128, isUnsigned: true)
!24 = !DIEnumerator(name: "PBVH_UpdateTopology", value: 256, isUnsigned: true)
!25 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eBMOpSlotType", file: !26, line: 94, baseType: !5, size: 32, elements: !27)
!26 = !DIFile(filename: "blender/source/blender/bmesh/intern/bmesh_operator_api.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!27 = !{!28, !29, !30, !31, !32, !33, !34, !35}
!28 = !DIEnumerator(name: "BMO_OP_SLOT_BOOL", value: 1, isUnsigned: true)
!29 = !DIEnumerator(name: "BMO_OP_SLOT_INT", value: 2, isUnsigned: true)
!30 = !DIEnumerator(name: "BMO_OP_SLOT_FLT", value: 3, isUnsigned: true)
!31 = !DIEnumerator(name: "BMO_OP_SLOT_PTR", value: 4, isUnsigned: true)
!32 = !DIEnumerator(name: "BMO_OP_SLOT_MAT", value: 5, isUnsigned: true)
!33 = !DIEnumerator(name: "BMO_OP_SLOT_VEC", value: 8, isUnsigned: true)
!34 = !DIEnumerator(name: "BMO_OP_SLOT_ELEMENT_BUF", value: 9, isUnsigned: true)
!35 = !DIEnumerator(name: "BMO_OP_SLOT_MAPPING", value: 10, isUnsigned: true)
!36 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eBMOpSlotSubType_Elem", file: !26, line: 116, baseType: !5, size: 32, elements: !37)
!37 = !{!38, !39, !40, !41}
!38 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_ELEM_VERT", value: 1, isUnsigned: true)
!39 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_ELEM_EDGE", value: 2, isUnsigned: true)
!40 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_ELEM_FACE", value: 8, isUnsigned: true)
!41 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_ELEM_IS_SINGLE", value: 16, isUnsigned: true)
!42 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eBMOpSlotSubType_Ptr", file: !26, line: 131, baseType: !5, size: 32, elements: !43)
!43 = !{!44, !45, !46, !47}
!44 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_PTR_BMESH", value: 100, isUnsigned: true)
!45 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_PTR_SCENE", value: 101, isUnsigned: true)
!46 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_PTR_OBJECT", value: 102, isUnsigned: true)
!47 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_PTR_MESH", value: 103, isUnsigned: true)
!48 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eBMOpSlotSubType_Map", file: !26, line: 123, baseType: !5, size: 32, elements: !49)
!49 = !{!50, !51, !52, !53, !54, !55}
!50 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_EMPTY", value: 64, isUnsigned: true)
!51 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_ELEM", value: 65, isUnsigned: true)
!52 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_FLT", value: 66, isUnsigned: true)
!53 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_INT", value: 67, isUnsigned: true)
!54 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_BOOL", value: 68, isUnsigned: true)
!55 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_INTERNAL", value: 69, isUnsigned: true)
!56 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !26, line: 182, baseType: !5, size: 32, elements: !57)
!57 = !{!58, !59, !60, !61, !62}
!58 = !DIEnumerator(name: "BMO_OPTYPE_FLAG_NOP", value: 0, isUnsigned: true)
!59 = !DIEnumerator(name: "BMO_OPTYPE_FLAG_UNTAN_MULTIRES", value: 1, isUnsigned: true)
!60 = !DIEnumerator(name: "BMO_OPTYPE_FLAG_NORMALS_CALC", value: 2, isUnsigned: true)
!61 = !DIEnumerator(name: "BMO_OPTYPE_FLAG_SELECT_FLUSH", value: 4, isUnsigned: true)
!62 = !DIEnumerator(name: "BMO_OPTYPE_FLAG_SELECT_VALIDATE", value: 8, isUnsigned: true)
!63 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1, line: 1695, baseType: !5, size: 32, elements: !64)
!64 = !{!65, !66, !67}
!65 = !DIEnumerator(name: "ISECT_INSIDE", value: 0, isUnsigned: true)
!66 = !DIEnumerator(name: "ISECT_OUTSIDE", value: 1, isUnsigned: true)
!67 = !DIEnumerator(name: "ISECT_INTERSECT", value: 2, isUnsigned: true)
!68 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !69, line: 304, baseType: !5, size: 32, elements: !70)
!69 = !DIFile(filename: "blender/source/blender/makesdna/DNA_meshdata_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!70 = !{!71, !72, !73, !74}
!71 = !DIEnumerator(name: "ME_VERT_TMP_TAG", value: 4, isUnsigned: true)
!72 = !DIEnumerator(name: "ME_HIDE", value: 16, isUnsigned: true)
!73 = !DIEnumerator(name: "ME_VERT_MERGED", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "ME_VERT_PBVH_UPDATE", value: 128, isUnsigned: true)
!75 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !76, line: 76, baseType: !5, size: 32, elements: !77)
!76 = !DIFile(filename: "blender/source/blender/makesdna/DNA_customdata_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!77 = !{!78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118}
!78 = !DIEnumerator(name: "CD_MVERT", value: 0, isUnsigned: true)
!79 = !DIEnumerator(name: "CD_MSTICKY", value: 1, isUnsigned: true)
!80 = !DIEnumerator(name: "CD_MDEFORMVERT", value: 2, isUnsigned: true)
!81 = !DIEnumerator(name: "CD_MEDGE", value: 3, isUnsigned: true)
!82 = !DIEnumerator(name: "CD_MFACE", value: 4, isUnsigned: true)
!83 = !DIEnumerator(name: "CD_MTFACE", value: 5, isUnsigned: true)
!84 = !DIEnumerator(name: "CD_MCOL", value: 6, isUnsigned: true)
!85 = !DIEnumerator(name: "CD_ORIGINDEX", value: 7, isUnsigned: true)
!86 = !DIEnumerator(name: "CD_NORMAL", value: 8, isUnsigned: true)
!87 = !DIEnumerator(name: "CD_PROP_FLT", value: 10, isUnsigned: true)
!88 = !DIEnumerator(name: "CD_PROP_INT", value: 11, isUnsigned: true)
!89 = !DIEnumerator(name: "CD_PROP_STR", value: 12, isUnsigned: true)
!90 = !DIEnumerator(name: "CD_ORIGSPACE", value: 13, isUnsigned: true)
!91 = !DIEnumerator(name: "CD_ORCO", value: 14, isUnsigned: true)
!92 = !DIEnumerator(name: "CD_MTEXPOLY", value: 15, isUnsigned: true)
!93 = !DIEnumerator(name: "CD_MLOOPUV", value: 16, isUnsigned: true)
!94 = !DIEnumerator(name: "CD_MLOOPCOL", value: 17, isUnsigned: true)
!95 = !DIEnumerator(name: "CD_TANGENT", value: 18, isUnsigned: true)
!96 = !DIEnumerator(name: "CD_MDISPS", value: 19, isUnsigned: true)
!97 = !DIEnumerator(name: "CD_PREVIEW_MCOL", value: 20, isUnsigned: true)
!98 = !DIEnumerator(name: "CD_ID_MCOL", value: 21, isUnsigned: true)
!99 = !DIEnumerator(name: "CD_TEXTURE_MCOL", value: 22, isUnsigned: true)
!100 = !DIEnumerator(name: "CD_CLOTH_ORCO", value: 23, isUnsigned: true)
!101 = !DIEnumerator(name: "CD_RECAST", value: 24, isUnsigned: true)
!102 = !DIEnumerator(name: "CD_MPOLY", value: 25, isUnsigned: true)
!103 = !DIEnumerator(name: "CD_MLOOP", value: 26, isUnsigned: true)
!104 = !DIEnumerator(name: "CD_SHAPE_KEYINDEX", value: 27, isUnsigned: true)
!105 = !DIEnumerator(name: "CD_SHAPEKEY", value: 28, isUnsigned: true)
!106 = !DIEnumerator(name: "CD_BWEIGHT", value: 29, isUnsigned: true)
!107 = !DIEnumerator(name: "CD_CREASE", value: 30, isUnsigned: true)
!108 = !DIEnumerator(name: "CD_ORIGSPACE_MLOOP", value: 31, isUnsigned: true)
!109 = !DIEnumerator(name: "CD_PREVIEW_MLOOPCOL", value: 32, isUnsigned: true)
!110 = !DIEnumerator(name: "CD_BM_ELEM_PYPTR", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "CD_PAINT_MASK", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "CD_GRID_PAINT_MASK", value: 35, isUnsigned: true)
!113 = !DIEnumerator(name: "CD_MVERT_SKIN", value: 36, isUnsigned: true)
!114 = !DIEnumerator(name: "CD_FREESTYLE_EDGE", value: 37, isUnsigned: true)
!115 = !DIEnumerator(name: "CD_FREESTYLE_FACE", value: 38, isUnsigned: true)
!116 = !DIEnumerator(name: "CD_MLOOPTANGENT", value: 39, isUnsigned: true)
!117 = !DIEnumerator(name: "CD_TESSLOOPNORMAL", value: 40, isUnsigned: true)
!118 = !DIEnumerator(name: "CD_NUMTYPES", value: 41, isUnsigned: true)
!119 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !69, line: 341, baseType: !5, size: 32, elements: !120)
!120 = !{!121, !122}
!121 = !DIEnumerator(name: "ME_SMOOTH", value: 1, isUnsigned: true)
!122 = !DIEnumerator(name: "ME_FACE_SEL", value: 2, isUnsigned: true)
!123 = !{!124, !127, !137, !138, !141, !142, !143, !150, !154, !156, !157, !162}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !125, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "BLI_bitmap", file: !126, line: 33, baseType: !5)
!126 = !DIFile(filename: "blender/source/blender/blenlib/BLI_bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !128, size: 64)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "BB", file: !11, line: 31, baseType: !129)
!129 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !11, line: 29, size: 192, elements: !130)
!130 = !{!131, !136}
!131 = !DIDerivedType(tag: DW_TAG_member, name: "bmin", scope: !129, file: !11, line: 30, baseType: !132, size: 96)
!132 = !DICompositeType(tag: DW_TAG_array_type, baseType: !133, size: 96, elements: !134)
!133 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!134 = !{!135}
!135 = !DISubrange(count: 3)
!136 = !DIDerivedType(tag: DW_TAG_member, name: "bmax", scope: !129, file: !11, line: 30, baseType: !132, size: 96, offset: 96)
!137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!138 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !139, line: 87, baseType: !140)
!139 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!140 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !133, size: 64)
!142 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !144, size: 64)
!144 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_gh_Entry", file: !145, line: 94, size: 192, elements: !146)
!145 = !DIFile(filename: "blender/source/blender/blenlib/BLI_ghash.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!146 = !{!147, !148, !149}
!147 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !144, file: !145, line: 94, baseType: !137, size: 64)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !144, file: !145, line: 94, baseType: !137, size: 64, offset: 64)
!149 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !144, file: !145, line: 94, baseType: !137, size: 64, offset: 128)
!150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !151, size: 64)
!151 = !DIDerivedType(tag: DW_TAG_typedef, name: "CCGElem", file: !152, line: 51, baseType: !153)
!152 = !DIFile(filename: "blender/source/blender/blenkernel/BKE_ccg.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!153 = !DICompositeType(tag: DW_TAG_structure_type, name: "CCGElem", file: !4, line: 33, flags: DIFlagFwdDecl)
!154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !155, size: 64)
!155 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!156 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !158, size: 64)
!158 = !DIDerivedType(tag: DW_TAG_typedef, name: "GHashIterator", file: !145, line: 54, baseType: !159)
!159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GHashIterator", file: !145, line: 50, size: 192, elements: !160)
!160 = !{!161, !165, !168}
!161 = !DIDerivedType(tag: DW_TAG_member, name: "gh", scope: !159, file: !145, line: 51, baseType: !162, size: 64)
!162 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !163, size: 64)
!163 = !DIDerivedType(tag: DW_TAG_typedef, name: "GHash", file: !145, line: 48, baseType: !164)
!164 = !DICompositeType(tag: DW_TAG_structure_type, name: "GHash", file: !145, line: 48, flags: DIFlagFwdDecl)
!165 = !DIDerivedType(tag: DW_TAG_member, name: "curEntry", scope: !159, file: !145, line: 52, baseType: !166, size: 64, offset: 64)
!166 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !167, size: 64)
!167 = !DICompositeType(tag: DW_TAG_structure_type, name: "Entry", file: !145, line: 52, flags: DIFlagFwdDecl)
!168 = !DIDerivedType(tag: DW_TAG_member, name: "curBucket", scope: !159, file: !145, line: 53, baseType: !5, size: 32, offset: 128)
!169 = !{i32 7, !"Dwarf Version", i32 4}
!170 = !{i32 2, !"Debug Info Version", i32 3}
!171 = !{i32 1, !"wchar_size", i32 4}
!172 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!173 = distinct !DISubprogram(name: "BB_reset", scope: !1, file: !1, line: 79, type: !174, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!174 = !DISubroutineType(types: !175)
!175 = !{null, !127}
!176 = !{}
!177 = !DILocalVariable(name: "bb", arg: 1, scope: !173, file: !1, line: 79, type: !127)
!178 = !DILocation(line: 79, column: 19, scope: !173)
!179 = !DILocation(line: 81, column: 30, scope: !173)
!180 = !DILocation(line: 81, column: 34, scope: !173)
!181 = !DILocation(line: 81, column: 42, scope: !173)
!182 = !DILocation(line: 81, column: 16, scope: !173)
!183 = !DILocation(line: 81, column: 20, scope: !173)
!184 = !DILocation(line: 81, column: 28, scope: !173)
!185 = !DILocation(line: 81, column: 2, scope: !173)
!186 = !DILocation(line: 81, column: 6, scope: !173)
!187 = !DILocation(line: 81, column: 14, scope: !173)
!188 = !DILocation(line: 82, column: 30, scope: !173)
!189 = !DILocation(line: 82, column: 34, scope: !173)
!190 = !DILocation(line: 82, column: 42, scope: !173)
!191 = !DILocation(line: 82, column: 16, scope: !173)
!192 = !DILocation(line: 82, column: 20, scope: !173)
!193 = !DILocation(line: 82, column: 28, scope: !173)
!194 = !DILocation(line: 82, column: 2, scope: !173)
!195 = !DILocation(line: 82, column: 6, scope: !173)
!196 = !DILocation(line: 82, column: 14, scope: !173)
!197 = !DILocation(line: 83, column: 1, scope: !173)
!198 = distinct !DISubprogram(name: "BB_expand", scope: !1, file: !1, line: 86, type: !199, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!199 = !DISubroutineType(types: !200)
!200 = !{null, !127, !201}
!201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !202, size: 64)
!202 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !133)
!203 = !DILocalVariable(name: "bb", arg: 1, scope: !198, file: !1, line: 86, type: !127)
!204 = !DILocation(line: 86, column: 20, scope: !198)
!205 = !DILocalVariable(name: "co", arg: 2, scope: !198, file: !1, line: 86, type: !201)
!206 = !DILocation(line: 86, column: 36, scope: !198)
!207 = !DILocalVariable(name: "i", scope: !198, file: !1, line: 88, type: !142)
!208 = !DILocation(line: 88, column: 6, scope: !198)
!209 = !DILocation(line: 89, column: 9, scope: !210)
!210 = distinct !DILexicalBlock(scope: !198, file: !1, line: 89, column: 2)
!211 = !DILocation(line: 89, column: 7, scope: !210)
!212 = !DILocation(line: 89, column: 14, scope: !213)
!213 = distinct !DILexicalBlock(scope: !210, file: !1, line: 89, column: 2)
!214 = !DILocation(line: 89, column: 16, scope: !213)
!215 = !DILocation(line: 89, column: 2, scope: !210)
!216 = !DILocation(line: 90, column: 24, scope: !217)
!217 = distinct !DILexicalBlock(scope: !213, file: !1, line: 89, column: 26)
!218 = !DILocation(line: 90, column: 28, scope: !217)
!219 = !DILocation(line: 90, column: 33, scope: !217)
!220 = !DILocation(line: 90, column: 37, scope: !217)
!221 = !DILocation(line: 90, column: 40, scope: !217)
!222 = !DILocation(line: 90, column: 17, scope: !217)
!223 = !DILocation(line: 90, column: 3, scope: !217)
!224 = !DILocation(line: 90, column: 7, scope: !217)
!225 = !DILocation(line: 90, column: 12, scope: !217)
!226 = !DILocation(line: 90, column: 15, scope: !217)
!227 = !DILocation(line: 91, column: 24, scope: !217)
!228 = !DILocation(line: 91, column: 28, scope: !217)
!229 = !DILocation(line: 91, column: 33, scope: !217)
!230 = !DILocation(line: 91, column: 37, scope: !217)
!231 = !DILocation(line: 91, column: 40, scope: !217)
!232 = !DILocation(line: 91, column: 17, scope: !217)
!233 = !DILocation(line: 91, column: 3, scope: !217)
!234 = !DILocation(line: 91, column: 7, scope: !217)
!235 = !DILocation(line: 91, column: 12, scope: !217)
!236 = !DILocation(line: 91, column: 15, scope: !217)
!237 = !DILocation(line: 92, column: 2, scope: !217)
!238 = !DILocation(line: 89, column: 21, scope: !213)
!239 = !DILocation(line: 89, column: 2, scope: !213)
!240 = distinct !{!240, !215, !241}
!241 = !DILocation(line: 92, column: 2, scope: !210)
!242 = !DILocation(line: 93, column: 1, scope: !198)
!243 = distinct !DISubprogram(name: "min_ff", scope: !244, file: !244, line: 202, type: !245, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!244 = !DIFile(filename: "blender/source/blender/blenlib/intern/math_base_inline.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!245 = !DISubroutineType(types: !246)
!246 = !{!133, !133, !133}
!247 = !DILocalVariable(name: "a", arg: 1, scope: !243, file: !244, line: 202, type: !133)
!248 = !DILocation(line: 202, column: 28, scope: !243)
!249 = !DILocalVariable(name: "b", arg: 2, scope: !243, file: !244, line: 202, type: !133)
!250 = !DILocation(line: 202, column: 37, scope: !243)
!251 = !DILocation(line: 204, column: 10, scope: !243)
!252 = !DILocation(line: 204, column: 14, scope: !243)
!253 = !DILocation(line: 204, column: 12, scope: !243)
!254 = !DILocation(line: 204, column: 9, scope: !243)
!255 = !DILocation(line: 204, column: 19, scope: !243)
!256 = !DILocation(line: 204, column: 23, scope: !243)
!257 = !DILocation(line: 204, column: 2, scope: !243)
!258 = distinct !DISubprogram(name: "max_ff", scope: !244, file: !244, line: 206, type: !245, scopeLine: 207, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!259 = !DILocalVariable(name: "a", arg: 1, scope: !258, file: !244, line: 206, type: !133)
!260 = !DILocation(line: 206, column: 28, scope: !258)
!261 = !DILocalVariable(name: "b", arg: 2, scope: !258, file: !244, line: 206, type: !133)
!262 = !DILocation(line: 206, column: 37, scope: !258)
!263 = !DILocation(line: 208, column: 10, scope: !258)
!264 = !DILocation(line: 208, column: 14, scope: !258)
!265 = !DILocation(line: 208, column: 12, scope: !258)
!266 = !DILocation(line: 208, column: 9, scope: !258)
!267 = !DILocation(line: 208, column: 19, scope: !258)
!268 = !DILocation(line: 208, column: 23, scope: !258)
!269 = !DILocation(line: 208, column: 2, scope: !258)
!270 = distinct !DISubprogram(name: "BB_expand_with_bb", scope: !1, file: !1, line: 96, type: !271, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!271 = !DISubroutineType(types: !272)
!272 = !{null, !127, !127}
!273 = !DILocalVariable(name: "bb", arg: 1, scope: !270, file: !1, line: 96, type: !127)
!274 = !DILocation(line: 96, column: 28, scope: !270)
!275 = !DILocalVariable(name: "bb2", arg: 2, scope: !270, file: !1, line: 96, type: !127)
!276 = !DILocation(line: 96, column: 36, scope: !270)
!277 = !DILocalVariable(name: "i", scope: !270, file: !1, line: 98, type: !142)
!278 = !DILocation(line: 98, column: 6, scope: !270)
!279 = !DILocation(line: 99, column: 9, scope: !280)
!280 = distinct !DILexicalBlock(scope: !270, file: !1, line: 99, column: 2)
!281 = !DILocation(line: 99, column: 7, scope: !280)
!282 = !DILocation(line: 99, column: 14, scope: !283)
!283 = distinct !DILexicalBlock(scope: !280, file: !1, line: 99, column: 2)
!284 = !DILocation(line: 99, column: 16, scope: !283)
!285 = !DILocation(line: 99, column: 2, scope: !280)
!286 = !DILocation(line: 100, column: 24, scope: !287)
!287 = distinct !DILexicalBlock(scope: !283, file: !1, line: 99, column: 26)
!288 = !DILocation(line: 100, column: 28, scope: !287)
!289 = !DILocation(line: 100, column: 33, scope: !287)
!290 = !DILocation(line: 100, column: 37, scope: !287)
!291 = !DILocation(line: 100, column: 42, scope: !287)
!292 = !DILocation(line: 100, column: 47, scope: !287)
!293 = !DILocation(line: 100, column: 17, scope: !287)
!294 = !DILocation(line: 100, column: 3, scope: !287)
!295 = !DILocation(line: 100, column: 7, scope: !287)
!296 = !DILocation(line: 100, column: 12, scope: !287)
!297 = !DILocation(line: 100, column: 15, scope: !287)
!298 = !DILocation(line: 101, column: 24, scope: !287)
!299 = !DILocation(line: 101, column: 28, scope: !287)
!300 = !DILocation(line: 101, column: 33, scope: !287)
!301 = !DILocation(line: 101, column: 37, scope: !287)
!302 = !DILocation(line: 101, column: 42, scope: !287)
!303 = !DILocation(line: 101, column: 47, scope: !287)
!304 = !DILocation(line: 101, column: 17, scope: !287)
!305 = !DILocation(line: 101, column: 3, scope: !287)
!306 = !DILocation(line: 101, column: 7, scope: !287)
!307 = !DILocation(line: 101, column: 12, scope: !287)
!308 = !DILocation(line: 101, column: 15, scope: !287)
!309 = !DILocation(line: 102, column: 2, scope: !287)
!310 = !DILocation(line: 99, column: 21, scope: !283)
!311 = !DILocation(line: 99, column: 2, scope: !283)
!312 = distinct !{!312, !285, !313}
!313 = !DILocation(line: 102, column: 2, scope: !280)
!314 = !DILocation(line: 103, column: 1, scope: !270)
!315 = distinct !DISubprogram(name: "BB_widest_axis", scope: !1, file: !1, line: 106, type: !316, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!316 = !DISubroutineType(types: !317)
!317 = !{!142, !318}
!318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !319, size: 64)
!319 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !128)
!320 = !DILocalVariable(name: "bb", arg: 1, scope: !315, file: !1, line: 106, type: !318)
!321 = !DILocation(line: 106, column: 30, scope: !315)
!322 = !DILocalVariable(name: "dim", scope: !315, file: !1, line: 108, type: !132)
!323 = !DILocation(line: 108, column: 8, scope: !315)
!324 = !DILocalVariable(name: "i", scope: !315, file: !1, line: 109, type: !142)
!325 = !DILocation(line: 109, column: 6, scope: !315)
!326 = !DILocation(line: 111, column: 9, scope: !327)
!327 = distinct !DILexicalBlock(scope: !315, file: !1, line: 111, column: 2)
!328 = !DILocation(line: 111, column: 7, scope: !327)
!329 = !DILocation(line: 111, column: 14, scope: !330)
!330 = distinct !DILexicalBlock(scope: !327, file: !1, line: 111, column: 2)
!331 = !DILocation(line: 111, column: 16, scope: !330)
!332 = !DILocation(line: 111, column: 2, scope: !327)
!333 = !DILocation(line: 112, column: 12, scope: !330)
!334 = !DILocation(line: 112, column: 16, scope: !330)
!335 = !DILocation(line: 112, column: 21, scope: !330)
!336 = !DILocation(line: 112, column: 26, scope: !330)
!337 = !DILocation(line: 112, column: 30, scope: !330)
!338 = !DILocation(line: 112, column: 35, scope: !330)
!339 = !DILocation(line: 112, column: 24, scope: !330)
!340 = !DILocation(line: 112, column: 7, scope: !330)
!341 = !DILocation(line: 112, column: 3, scope: !330)
!342 = !DILocation(line: 112, column: 10, scope: !330)
!343 = !DILocation(line: 111, column: 21, scope: !330)
!344 = !DILocation(line: 111, column: 2, scope: !330)
!345 = distinct !{!345, !332, !346}
!346 = !DILocation(line: 112, column: 36, scope: !327)
!347 = !DILocation(line: 114, column: 6, scope: !348)
!348 = distinct !DILexicalBlock(scope: !315, file: !1, line: 114, column: 6)
!349 = !DILocation(line: 114, column: 15, scope: !348)
!350 = !DILocation(line: 114, column: 13, scope: !348)
!351 = !DILocation(line: 114, column: 6, scope: !315)
!352 = !DILocation(line: 115, column: 7, scope: !353)
!353 = distinct !DILexicalBlock(scope: !354, file: !1, line: 115, column: 7)
!354 = distinct !DILexicalBlock(scope: !348, file: !1, line: 114, column: 23)
!355 = !DILocation(line: 115, column: 16, scope: !353)
!356 = !DILocation(line: 115, column: 14, scope: !353)
!357 = !DILocation(line: 115, column: 7, scope: !354)
!358 = !DILocation(line: 116, column: 4, scope: !353)
!359 = !DILocation(line: 118, column: 4, scope: !353)
!360 = !DILocation(line: 121, column: 7, scope: !361)
!361 = distinct !DILexicalBlock(scope: !362, file: !1, line: 121, column: 7)
!362 = distinct !DILexicalBlock(scope: !348, file: !1, line: 120, column: 7)
!363 = !DILocation(line: 121, column: 16, scope: !361)
!364 = !DILocation(line: 121, column: 14, scope: !361)
!365 = !DILocation(line: 121, column: 7, scope: !362)
!366 = !DILocation(line: 122, column: 4, scope: !361)
!367 = !DILocation(line: 124, column: 4, scope: !361)
!368 = !DILocation(line: 126, column: 1, scope: !315)
!369 = distinct !DISubprogram(name: "BBC_update_centroid", scope: !1, file: !1, line: 128, type: !370, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!370 = !DISubroutineType(types: !371)
!371 = !{null, !372}
!372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !373, size: 64)
!373 = !DIDerivedType(tag: DW_TAG_typedef, name: "BBC", file: !11, line: 36, baseType: !374)
!374 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !11, line: 34, size: 288, elements: !375)
!375 = !{!376, !377, !378}
!376 = !DIDerivedType(tag: DW_TAG_member, name: "bmin", scope: !374, file: !11, line: 35, baseType: !132, size: 96)
!377 = !DIDerivedType(tag: DW_TAG_member, name: "bmax", scope: !374, file: !11, line: 35, baseType: !132, size: 96, offset: 96)
!378 = !DIDerivedType(tag: DW_TAG_member, name: "bcentroid", scope: !374, file: !11, line: 35, baseType: !132, size: 96, offset: 192)
!379 = !DILocalVariable(name: "bbc", arg: 1, scope: !369, file: !1, line: 128, type: !372)
!380 = !DILocation(line: 128, column: 31, scope: !369)
!381 = !DILocalVariable(name: "i", scope: !369, file: !1, line: 130, type: !142)
!382 = !DILocation(line: 130, column: 6, scope: !369)
!383 = !DILocation(line: 131, column: 9, scope: !384)
!384 = distinct !DILexicalBlock(scope: !369, file: !1, line: 131, column: 2)
!385 = !DILocation(line: 131, column: 7, scope: !384)
!386 = !DILocation(line: 131, column: 14, scope: !387)
!387 = distinct !DILexicalBlock(scope: !384, file: !1, line: 131, column: 2)
!388 = !DILocation(line: 131, column: 16, scope: !387)
!389 = !DILocation(line: 131, column: 2, scope: !384)
!390 = !DILocation(line: 132, column: 24, scope: !387)
!391 = !DILocation(line: 132, column: 29, scope: !387)
!392 = !DILocation(line: 132, column: 34, scope: !387)
!393 = !DILocation(line: 132, column: 39, scope: !387)
!394 = !DILocation(line: 132, column: 44, scope: !387)
!395 = !DILocation(line: 132, column: 49, scope: !387)
!396 = !DILocation(line: 132, column: 37, scope: !387)
!397 = !DILocation(line: 132, column: 53, scope: !387)
!398 = !DILocation(line: 132, column: 3, scope: !387)
!399 = !DILocation(line: 132, column: 8, scope: !387)
!400 = !DILocation(line: 132, column: 18, scope: !387)
!401 = !DILocation(line: 132, column: 21, scope: !387)
!402 = !DILocation(line: 131, column: 21, scope: !387)
!403 = !DILocation(line: 131, column: 2, scope: !387)
!404 = distinct !{!404, !389, !405}
!405 = !DILocation(line: 132, column: 55, scope: !384)
!406 = !DILocation(line: 133, column: 1, scope: !369)
!407 = distinct !DISubprogram(name: "pbvh_grow_nodes", scope: !1, file: !1, line: 233, type: !408, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!408 = !DISubroutineType(types: !409)
!409 = !{null, !410, !142}
!410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !411, size: 64)
!411 = !DIDerivedType(tag: DW_TAG_typedef, name: "PBVH", file: !4, line: 46, baseType: !412)
!412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "PBVH", file: !11, line: 121, size: 1664, elements: !413)
!413 = !{!414, !416, !418, !464, !465, !466, !467, !468, !469, !470, !480, !492, !534, !548, !550, !558, !560, !568, !569, !571, !572, !574, !575, !735, !736, !737, !738, !739}
!414 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !412, file: !11, line: 122, baseType: !415, size: 32)
!415 = !DIDerivedType(tag: DW_TAG_typedef, name: "PBVHType", file: !4, line: 122, baseType: !3)
!416 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !412, file: !11, line: 123, baseType: !417, size: 32, offset: 32)
!417 = !DIDerivedType(tag: DW_TAG_typedef, name: "PBVHFlags", file: !11, line: 117, baseType: !10)
!418 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !412, file: !11, line: 125, baseType: !419, size: 64, offset: 64)
!419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !420, size: 64)
!420 = !DIDerivedType(tag: DW_TAG_typedef, name: "PBVHNode", file: !4, line: 47, baseType: !421)
!421 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "PBVHNode", file: !11, line: 40, size: 1472, elements: !422)
!422 = !{!423, !427, !428, !429, !430, !432, !433, !434, !435, !436, !441, !443, !444, !445, !446, !453, !457, !458, !459, !460, !463}
!423 = !DIDerivedType(tag: DW_TAG_member, name: "draw_buffers", scope: !421, file: !11, line: 42, baseType: !424, size: 64)
!424 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !425, size: 64)
!425 = !DICompositeType(tag: DW_TAG_structure_type, name: "GPU_PBVH_Buffers", file: !426, line: 168, flags: DIFlagFwdDecl)
!426 = !DIFile(filename: "blender/source/blender/gpu/GPU_buffers.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!427 = !DIDerivedType(tag: DW_TAG_member, name: "vb", scope: !421, file: !11, line: 45, baseType: !128, size: 192, offset: 64)
!428 = !DIDerivedType(tag: DW_TAG_member, name: "orig_vb", scope: !421, file: !11, line: 46, baseType: !128, size: 192, offset: 256)
!429 = !DIDerivedType(tag: DW_TAG_member, name: "children_offset", scope: !421, file: !11, line: 50, baseType: !142, size: 32, offset: 448)
!430 = !DIDerivedType(tag: DW_TAG_member, name: "prim_indices", scope: !421, file: !11, line: 57, baseType: !431, size: 64, offset: 512)
!431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !142, size: 64)
!432 = !DIDerivedType(tag: DW_TAG_member, name: "totprim", scope: !421, file: !11, line: 58, baseType: !5, size: 32, offset: 576)
!433 = !DIDerivedType(tag: DW_TAG_member, name: "vert_indices", scope: !421, file: !11, line: 79, baseType: !431, size: 64, offset: 640)
!434 = !DIDerivedType(tag: DW_TAG_member, name: "uniq_verts", scope: !421, file: !11, line: 80, baseType: !5, size: 32, offset: 704)
!435 = !DIDerivedType(tag: DW_TAG_member, name: "face_verts", scope: !421, file: !11, line: 80, baseType: !5, size: 32, offset: 736)
!436 = !DIDerivedType(tag: DW_TAG_member, name: "face_vert_indices", scope: !421, file: !11, line: 91, baseType: !437, size: 64, offset: 768)
!437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !438, size: 64)
!438 = !DICompositeType(tag: DW_TAG_array_type, baseType: !142, size: 128, elements: !439)
!439 = !{!440}
!440 = !DISubrange(count: 4)
!441 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !421, file: !11, line: 95, baseType: !442, size: 16, offset: 832, flags: DIFlagBitField, extraData: i64 832)
!442 = !DIDerivedType(tag: DW_TAG_typedef, name: "PBVHNodeFlags", file: !4, line: 165, baseType: !14)
!443 = !DIDerivedType(tag: DW_TAG_member, name: "tmin", scope: !421, file: !11, line: 98, baseType: !133, size: 32, offset: 864)
!444 = !DIDerivedType(tag: DW_TAG_member, name: "layer_disp", scope: !421, file: !11, line: 101, baseType: !141, size: 64, offset: 896)
!445 = !DIDerivedType(tag: DW_TAG_member, name: "proxy_count", scope: !421, file: !11, line: 103, baseType: !142, size: 32, offset: 960)
!446 = !DIDerivedType(tag: DW_TAG_member, name: "proxies", scope: !421, file: !11, line: 104, baseType: !447, size: 64, offset: 1024)
!447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !448, size: 64)
!448 = !DIDerivedType(tag: DW_TAG_typedef, name: "PBVHProxyNode", file: !4, line: 51, baseType: !449)
!449 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !4, line: 49, size: 64, elements: !450)
!450 = !{!451}
!451 = !DIDerivedType(tag: DW_TAG_member, name: "co", scope: !449, file: !4, line: 50, baseType: !452, size: 64)
!452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !132, size: 64)
!453 = !DIDerivedType(tag: DW_TAG_member, name: "bm_faces", scope: !421, file: !11, line: 107, baseType: !454, size: 64, offset: 1088)
!454 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !455, size: 64)
!455 = !DIDerivedType(tag: DW_TAG_typedef, name: "GSet", file: !145, line: 176, baseType: !456)
!456 = !DICompositeType(tag: DW_TAG_structure_type, name: "GSet", file: !145, line: 176, flags: DIFlagFwdDecl)
!457 = !DIDerivedType(tag: DW_TAG_member, name: "bm_unique_verts", scope: !421, file: !11, line: 108, baseType: !454, size: 64, offset: 1152)
!458 = !DIDerivedType(tag: DW_TAG_member, name: "bm_other_verts", scope: !421, file: !11, line: 109, baseType: !454, size: 64, offset: 1216)
!459 = !DIDerivedType(tag: DW_TAG_member, name: "bm_orco", scope: !421, file: !11, line: 110, baseType: !452, size: 64, offset: 1280)
!460 = !DIDerivedType(tag: DW_TAG_member, name: "bm_ortri", scope: !421, file: !11, line: 111, baseType: !461, size: 64, offset: 1344)
!461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !462, size: 64)
!462 = !DICompositeType(tag: DW_TAG_array_type, baseType: !142, size: 96, elements: !134)
!463 = !DIDerivedType(tag: DW_TAG_member, name: "bm_tot_ortri", scope: !421, file: !11, line: 112, baseType: !142, size: 32, offset: 1408)
!464 = !DIDerivedType(tag: DW_TAG_member, name: "node_mem_count", scope: !412, file: !11, line: 126, baseType: !142, size: 32, offset: 128)
!465 = !DIDerivedType(tag: DW_TAG_member, name: "totnode", scope: !412, file: !11, line: 126, baseType: !142, size: 32, offset: 160)
!466 = !DIDerivedType(tag: DW_TAG_member, name: "prim_indices", scope: !412, file: !11, line: 128, baseType: !431, size: 64, offset: 192)
!467 = !DIDerivedType(tag: DW_TAG_member, name: "totprim", scope: !412, file: !11, line: 129, baseType: !142, size: 32, offset: 256)
!468 = !DIDerivedType(tag: DW_TAG_member, name: "totvert", scope: !412, file: !11, line: 130, baseType: !142, size: 32, offset: 288)
!469 = !DIDerivedType(tag: DW_TAG_member, name: "leaf_limit", scope: !412, file: !11, line: 132, baseType: !142, size: 32, offset: 320)
!470 = !DIDerivedType(tag: DW_TAG_member, name: "verts", scope: !412, file: !11, line: 135, baseType: !471, size: 64, offset: 384)
!471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !472, size: 64)
!472 = !DIDerivedType(tag: DW_TAG_typedef, name: "MVert", file: !69, line: 69, baseType: !473)
!473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MVert", file: !69, line: 65, size: 160, elements: !474)
!474 = !{!475, !476, !478, !479}
!475 = !DIDerivedType(tag: DW_TAG_member, name: "co", scope: !473, file: !69, line: 66, baseType: !132, size: 96)
!476 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !473, file: !69, line: 67, baseType: !477, size: 48, offset: 96)
!477 = !DICompositeType(tag: DW_TAG_array_type, baseType: !156, size: 48, elements: !134)
!478 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !473, file: !69, line: 68, baseType: !155, size: 8, offset: 144)
!479 = !DIDerivedType(tag: DW_TAG_member, name: "bweight", scope: !473, file: !69, line: 68, baseType: !155, size: 8, offset: 152)
!480 = !DIDerivedType(tag: DW_TAG_member, name: "faces", scope: !412, file: !11, line: 136, baseType: !481, size: 64, offset: 448)
!481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !482, size: 64)
!482 = !DIDerivedType(tag: DW_TAG_typedef, name: "MFace", file: !69, line: 46, baseType: !483)
!483 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MFace", file: !69, line: 42, size: 160, elements: !484)
!484 = !{!485, !486, !487, !488, !489, !490, !491}
!485 = !DIDerivedType(tag: DW_TAG_member, name: "v1", scope: !483, file: !69, line: 43, baseType: !5, size: 32)
!486 = !DIDerivedType(tag: DW_TAG_member, name: "v2", scope: !483, file: !69, line: 43, baseType: !5, size: 32, offset: 32)
!487 = !DIDerivedType(tag: DW_TAG_member, name: "v3", scope: !483, file: !69, line: 43, baseType: !5, size: 32, offset: 64)
!488 = !DIDerivedType(tag: DW_TAG_member, name: "v4", scope: !483, file: !69, line: 43, baseType: !5, size: 32, offset: 96)
!489 = !DIDerivedType(tag: DW_TAG_member, name: "mat_nr", scope: !483, file: !69, line: 44, baseType: !156, size: 16, offset: 128)
!490 = !DIDerivedType(tag: DW_TAG_member, name: "edcode", scope: !483, file: !69, line: 45, baseType: !155, size: 8, offset: 144)
!491 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !483, file: !69, line: 45, baseType: !155, size: 8, offset: 152)
!492 = !DIDerivedType(tag: DW_TAG_member, name: "vdata", scope: !412, file: !11, line: 137, baseType: !493, size: 64, offset: 512)
!493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !494, size: 64)
!494 = !DIDerivedType(tag: DW_TAG_typedef, name: "CustomData", file: !76, line: 73, baseType: !495)
!495 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CustomData", file: !76, line: 64, size: 1600, elements: !496)
!496 = !{!497, !515, !519, !520, !521, !522, !525}
!497 = !DIDerivedType(tag: DW_TAG_member, name: "layers", scope: !495, file: !76, line: 65, baseType: !498, size: 64)
!498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !499, size: 64)
!499 = !DIDerivedType(tag: DW_TAG_typedef, name: "CustomDataLayer", file: !76, line: 53, baseType: !500)
!500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CustomDataLayer", file: !76, line: 42, size: 832, elements: !501)
!501 = !{!502, !503, !504, !505, !506, !507, !508, !509, !510, !514}
!502 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !500, file: !76, line: 43, baseType: !142, size: 32)
!503 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !500, file: !76, line: 44, baseType: !142, size: 32, offset: 32)
!504 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !500, file: !76, line: 45, baseType: !142, size: 32, offset: 64)
!505 = !DIDerivedType(tag: DW_TAG_member, name: "active", scope: !500, file: !76, line: 46, baseType: !142, size: 32, offset: 96)
!506 = !DIDerivedType(tag: DW_TAG_member, name: "active_rnd", scope: !500, file: !76, line: 47, baseType: !142, size: 32, offset: 128)
!507 = !DIDerivedType(tag: DW_TAG_member, name: "active_clone", scope: !500, file: !76, line: 48, baseType: !142, size: 32, offset: 160)
!508 = !DIDerivedType(tag: DW_TAG_member, name: "active_mask", scope: !500, file: !76, line: 49, baseType: !142, size: 32, offset: 192)
!509 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !500, file: !76, line: 50, baseType: !142, size: 32, offset: 224)
!510 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !500, file: !76, line: 51, baseType: !511, size: 512, offset: 256)
!511 = !DICompositeType(tag: DW_TAG_array_type, baseType: !155, size: 512, elements: !512)
!512 = !{!513}
!513 = !DISubrange(count: 64)
!514 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !500, file: !76, line: 52, baseType: !137, size: 64, offset: 768)
!515 = !DIDerivedType(tag: DW_TAG_member, name: "typemap", scope: !495, file: !76, line: 66, baseType: !516, size: 1312, offset: 64)
!516 = !DICompositeType(tag: DW_TAG_array_type, baseType: !142, size: 1312, elements: !517)
!517 = !{!518}
!518 = !DISubrange(count: 41)
!519 = !DIDerivedType(tag: DW_TAG_member, name: "totlayer", scope: !495, file: !76, line: 69, baseType: !142, size: 32, offset: 1376)
!520 = !DIDerivedType(tag: DW_TAG_member, name: "maxlayer", scope: !495, file: !76, line: 69, baseType: !142, size: 32, offset: 1408)
!521 = !DIDerivedType(tag: DW_TAG_member, name: "totsize", scope: !495, file: !76, line: 70, baseType: !142, size: 32, offset: 1440)
!522 = !DIDerivedType(tag: DW_TAG_member, name: "pool", scope: !495, file: !76, line: 71, baseType: !523, size: 64, offset: 1472)
!523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !524, size: 64)
!524 = !DICompositeType(tag: DW_TAG_structure_type, name: "BLI_mempool", file: !76, line: 71, flags: DIFlagFwdDecl)
!525 = !DIDerivedType(tag: DW_TAG_member, name: "external", scope: !495, file: !76, line: 72, baseType: !526, size: 64, offset: 1536)
!526 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !527, size: 64)
!527 = !DIDerivedType(tag: DW_TAG_typedef, name: "CustomDataExternal", file: !76, line: 59, baseType: !528)
!528 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CustomDataExternal", file: !76, line: 57, size: 8192, elements: !529)
!529 = !{!530}
!530 = !DIDerivedType(tag: DW_TAG_member, name: "filename", scope: !528, file: !76, line: 58, baseType: !531, size: 8192)
!531 = !DICompositeType(tag: DW_TAG_array_type, baseType: !155, size: 8192, elements: !532)
!532 = !{!533}
!533 = !DISubrange(count: 1024)
!534 = !DIDerivedType(tag: DW_TAG_member, name: "gridkey", scope: !412, file: !11, line: 140, baseType: !535, size: 320, offset: 576)
!535 = !DIDerivedType(tag: DW_TAG_typedef, name: "CCGKey", file: !152, line: 78, baseType: !536)
!536 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CCGKey", file: !152, line: 53, size: 320, elements: !537)
!537 = !{!538, !539, !540, !541, !542, !543, !544, !545, !546, !547}
!538 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !536, file: !152, line: 54, baseType: !142, size: 32)
!539 = !DIDerivedType(tag: DW_TAG_member, name: "elem_size", scope: !536, file: !152, line: 58, baseType: !142, size: 32, offset: 32)
!540 = !DIDerivedType(tag: DW_TAG_member, name: "grid_size", scope: !536, file: !152, line: 61, baseType: !142, size: 32, offset: 64)
!541 = !DIDerivedType(tag: DW_TAG_member, name: "grid_area", scope: !536, file: !152, line: 63, baseType: !142, size: 32, offset: 96)
!542 = !DIDerivedType(tag: DW_TAG_member, name: "grid_bytes", scope: !536, file: !152, line: 65, baseType: !142, size: 32, offset: 128)
!543 = !DIDerivedType(tag: DW_TAG_member, name: "normal_offset", scope: !536, file: !152, line: 69, baseType: !142, size: 32, offset: 160)
!544 = !DIDerivedType(tag: DW_TAG_member, name: "mask_offset", scope: !536, file: !152, line: 73, baseType: !142, size: 32, offset: 192)
!545 = !DIDerivedType(tag: DW_TAG_member, name: "num_layers", scope: !536, file: !152, line: 75, baseType: !142, size: 32, offset: 224)
!546 = !DIDerivedType(tag: DW_TAG_member, name: "has_normals", scope: !536, file: !152, line: 76, baseType: !142, size: 32, offset: 256)
!547 = !DIDerivedType(tag: DW_TAG_member, name: "has_mask", scope: !536, file: !152, line: 77, baseType: !142, size: 32, offset: 288)
!548 = !DIDerivedType(tag: DW_TAG_member, name: "grids", scope: !412, file: !11, line: 141, baseType: !549, size: 64, offset: 896)
!549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !150, size: 64)
!550 = !DIDerivedType(tag: DW_TAG_member, name: "gridadj", scope: !412, file: !11, line: 142, baseType: !551, size: 64, offset: 960)
!551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !552, size: 64)
!552 = !DIDerivedType(tag: DW_TAG_typedef, name: "DMGridAdjacency", file: !553, line: 120, baseType: !554)
!553 = !DIFile(filename: "blender/source/blender/blenkernel/BKE_DerivedMesh.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!554 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DMGridAdjacency", file: !553, line: 117, size: 256, elements: !555)
!555 = !{!556, !557}
!556 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !554, file: !553, line: 118, baseType: !438, size: 128)
!557 = !DIDerivedType(tag: DW_TAG_member, name: "rotation", scope: !554, file: !553, line: 119, baseType: !438, size: 128, offset: 128)
!558 = !DIDerivedType(tag: DW_TAG_member, name: "gridfaces", scope: !412, file: !11, line: 143, baseType: !559, size: 64, offset: 1024)
!559 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !137, size: 64)
!560 = !DIDerivedType(tag: DW_TAG_member, name: "grid_flag_mats", scope: !412, file: !11, line: 144, baseType: !561, size: 64, offset: 1088)
!561 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !562, size: 64)
!562 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !563)
!563 = !DIDerivedType(tag: DW_TAG_typedef, name: "DMFlagMat", file: !553, line: 126, baseType: !564)
!564 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DMFlagMat", file: !553, line: 123, size: 32, elements: !565)
!565 = !{!566, !567}
!566 = !DIDerivedType(tag: DW_TAG_member, name: "mat_nr", scope: !564, file: !553, line: 124, baseType: !156, size: 16)
!567 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !564, file: !553, line: 125, baseType: !155, size: 8, offset: 16)
!568 = !DIDerivedType(tag: DW_TAG_member, name: "totgrid", scope: !412, file: !11, line: 145, baseType: !142, size: 32, offset: 1152)
!569 = !DIDerivedType(tag: DW_TAG_member, name: "grid_hidden", scope: !412, file: !11, line: 146, baseType: !570, size: 64, offset: 1216)
!570 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !124, size: 64)
!571 = !DIDerivedType(tag: DW_TAG_member, name: "vert_bitmap", scope: !412, file: !11, line: 150, baseType: !124, size: 64, offset: 1280)
!572 = !DIDerivedType(tag: DW_TAG_member, name: "deformed", scope: !412, file: !11, line: 157, baseType: !573, size: 8, offset: 1344)
!573 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!574 = !DIDerivedType(tag: DW_TAG_member, name: "show_diffuse_color", scope: !412, file: !11, line: 159, baseType: !573, size: 8, offset: 1352)
!575 = !DIDerivedType(tag: DW_TAG_member, name: "bm", scope: !412, file: !11, line: 162, baseType: !576, size: 64, offset: 1408)
!576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !577, size: 64)
!577 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMesh", file: !578, line: 246, baseType: !579)
!578 = !DIFile(filename: "blender/source/blender/bmesh/bmesh_class.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!579 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMesh", file: !578, line: 186, size: 8064, elements: !580)
!580 = !{!581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !655, !659, !663, !664, !665, !666, !667, !668, !669, !670, !717, !718, !719, !720, !721, !722, !723, !724, !725, !732, !733, !734}
!581 = !DIDerivedType(tag: DW_TAG_member, name: "totvert", scope: !579, file: !578, line: 187, baseType: !142, size: 32)
!582 = !DIDerivedType(tag: DW_TAG_member, name: "totedge", scope: !579, file: !578, line: 187, baseType: !142, size: 32, offset: 32)
!583 = !DIDerivedType(tag: DW_TAG_member, name: "totloop", scope: !579, file: !578, line: 187, baseType: !142, size: 32, offset: 64)
!584 = !DIDerivedType(tag: DW_TAG_member, name: "totface", scope: !579, file: !578, line: 187, baseType: !142, size: 32, offset: 96)
!585 = !DIDerivedType(tag: DW_TAG_member, name: "totvertsel", scope: !579, file: !578, line: 188, baseType: !142, size: 32, offset: 128)
!586 = !DIDerivedType(tag: DW_TAG_member, name: "totedgesel", scope: !579, file: !578, line: 188, baseType: !142, size: 32, offset: 160)
!587 = !DIDerivedType(tag: DW_TAG_member, name: "totfacesel", scope: !579, file: !578, line: 188, baseType: !142, size: 32, offset: 192)
!588 = !DIDerivedType(tag: DW_TAG_member, name: "elem_index_dirty", scope: !579, file: !578, line: 193, baseType: !155, size: 8, offset: 224)
!589 = !DIDerivedType(tag: DW_TAG_member, name: "elem_table_dirty", scope: !579, file: !578, line: 197, baseType: !155, size: 8, offset: 232)
!590 = !DIDerivedType(tag: DW_TAG_member, name: "vpool", scope: !579, file: !578, line: 201, baseType: !523, size: 64, offset: 256)
!591 = !DIDerivedType(tag: DW_TAG_member, name: "epool", scope: !579, file: !578, line: 201, baseType: !523, size: 64, offset: 320)
!592 = !DIDerivedType(tag: DW_TAG_member, name: "lpool", scope: !579, file: !578, line: 201, baseType: !523, size: 64, offset: 384)
!593 = !DIDerivedType(tag: DW_TAG_member, name: "fpool", scope: !579, file: !578, line: 201, baseType: !523, size: 64, offset: 448)
!594 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !579, file: !578, line: 208, baseType: !595, size: 64, offset: 512)
!595 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !596, size: 64)
!596 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !597, size: 64)
!597 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMVert", file: !578, line: 103, baseType: !598)
!598 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMVert", file: !578, line: 90, size: 448, elements: !599)
!599 = !{!600, !609, !614, !615, !616}
!600 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !598, file: !578, line: 91, baseType: !601, size: 128)
!601 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMHeader", file: !578, line: 82, baseType: !602)
!602 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMHeader", file: !578, line: 64, size: 128, elements: !603)
!603 = !{!604, !605, !606, !607, !608}
!604 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !602, file: !578, line: 65, baseType: !137, size: 64)
!605 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !602, file: !578, line: 66, baseType: !142, size: 32, offset: 64)
!606 = !DIDerivedType(tag: DW_TAG_member, name: "htype", scope: !602, file: !578, line: 73, baseType: !155, size: 8, offset: 96)
!607 = !DIDerivedType(tag: DW_TAG_member, name: "hflag", scope: !602, file: !578, line: 74, baseType: !155, size: 8, offset: 104)
!608 = !DIDerivedType(tag: DW_TAG_member, name: "api_flag", scope: !602, file: !578, line: 80, baseType: !155, size: 8, offset: 112)
!609 = !DIDerivedType(tag: DW_TAG_member, name: "oflags", scope: !598, file: !578, line: 92, baseType: !610, size: 64, offset: 128)
!610 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !611, size: 64)
!611 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMFlagLayer", file: !578, line: 180, size: 16, elements: !612)
!612 = !{!613}
!613 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !611, file: !578, line: 181, baseType: !156, size: 16)
!614 = !DIDerivedType(tag: DW_TAG_member, name: "co", scope: !598, file: !578, line: 94, baseType: !132, size: 96, offset: 192)
!615 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !598, file: !578, line: 95, baseType: !132, size: 96, offset: 288)
!616 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !598, file: !578, line: 102, baseType: !617, size: 64, offset: 384)
!617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !618, size: 64)
!618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMEdge", file: !578, line: 110, size: 640, elements: !619)
!619 = !{!620, !621, !622, !624, !625, !648, !654}
!620 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !618, file: !578, line: 111, baseType: !601, size: 128)
!621 = !DIDerivedType(tag: DW_TAG_member, name: "oflags", scope: !618, file: !578, line: 112, baseType: !610, size: 64, offset: 128)
!622 = !DIDerivedType(tag: DW_TAG_member, name: "v1", scope: !618, file: !578, line: 114, baseType: !623, size: 64, offset: 192)
!623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !598, size: 64)
!624 = !DIDerivedType(tag: DW_TAG_member, name: "v2", scope: !618, file: !578, line: 114, baseType: !623, size: 64, offset: 256)
!625 = !DIDerivedType(tag: DW_TAG_member, name: "l", scope: !618, file: !578, line: 118, baseType: !626, size: 64, offset: 320)
!626 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !627, size: 64)
!627 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMLoop", file: !578, line: 125, size: 576, elements: !628)
!628 = !{!629, !630, !631, !632, !644, !645, !646, !647}
!629 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !627, file: !578, line: 126, baseType: !601, size: 128)
!630 = !DIDerivedType(tag: DW_TAG_member, name: "v", scope: !627, file: !578, line: 129, baseType: !623, size: 64, offset: 128)
!631 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !627, file: !578, line: 130, baseType: !617, size: 64, offset: 192)
!632 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !627, file: !578, line: 131, baseType: !633, size: 64, offset: 256)
!633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !634, size: 64)
!634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMFace", file: !578, line: 164, size: 448, elements: !635)
!635 = !{!636, !637, !638, !641, !642, !643}
!636 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !634, file: !578, line: 165, baseType: !601, size: 128)
!637 = !DIDerivedType(tag: DW_TAG_member, name: "oflags", scope: !634, file: !578, line: 166, baseType: !610, size: 64, offset: 128)
!638 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !634, file: !578, line: 172, baseType: !639, size: 64, offset: 192)
!639 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !640, size: 64)
!640 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMLoop", file: !578, line: 140, baseType: !627)
!641 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !634, file: !578, line: 174, baseType: !142, size: 32, offset: 256)
!642 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !634, file: !578, line: 175, baseType: !132, size: 96, offset: 288)
!643 = !DIDerivedType(tag: DW_TAG_member, name: "mat_nr", scope: !634, file: !578, line: 176, baseType: !156, size: 16, offset: 384)
!644 = !DIDerivedType(tag: DW_TAG_member, name: "radial_next", scope: !627, file: !578, line: 135, baseType: !626, size: 64, offset: 320)
!645 = !DIDerivedType(tag: DW_TAG_member, name: "radial_prev", scope: !627, file: !578, line: 135, baseType: !626, size: 64, offset: 384)
!646 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !627, file: !578, line: 139, baseType: !626, size: 64, offset: 448)
!647 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !627, file: !578, line: 139, baseType: !626, size: 64, offset: 512)
!648 = !DIDerivedType(tag: DW_TAG_member, name: "v1_disk_link", scope: !618, file: !578, line: 122, baseType: !649, size: 128, offset: 384)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMDiskLink", file: !578, line: 108, baseType: !650)
!650 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMDiskLink", file: !578, line: 106, size: 128, elements: !651)
!651 = !{!652, !653}
!652 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !650, file: !578, line: 107, baseType: !617, size: 64)
!653 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !650, file: !578, line: 107, baseType: !617, size: 64, offset: 64)
!654 = !DIDerivedType(tag: DW_TAG_member, name: "v2_disk_link", scope: !618, file: !578, line: 122, baseType: !649, size: 128, offset: 512)
!655 = !DIDerivedType(tag: DW_TAG_member, name: "etable", scope: !579, file: !578, line: 209, baseType: !656, size: 64, offset: 576)
!656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !657, size: 64)
!657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !658, size: 64)
!658 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMEdge", file: !578, line: 123, baseType: !618)
!659 = !DIDerivedType(tag: DW_TAG_member, name: "ftable", scope: !579, file: !578, line: 210, baseType: !660, size: 64, offset: 640)
!660 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !661, size: 64)
!661 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !662, size: 64)
!662 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMFace", file: !578, line: 178, baseType: !634)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_tot", scope: !579, file: !578, line: 213, baseType: !142, size: 32, offset: 704)
!664 = !DIDerivedType(tag: DW_TAG_member, name: "etable_tot", scope: !579, file: !578, line: 214, baseType: !142, size: 32, offset: 736)
!665 = !DIDerivedType(tag: DW_TAG_member, name: "ftable_tot", scope: !579, file: !578, line: 215, baseType: !142, size: 32, offset: 768)
!666 = !DIDerivedType(tag: DW_TAG_member, name: "vtoolflagpool", scope: !579, file: !578, line: 218, baseType: !523, size: 64, offset: 832)
!667 = !DIDerivedType(tag: DW_TAG_member, name: "etoolflagpool", scope: !579, file: !578, line: 218, baseType: !523, size: 64, offset: 896)
!668 = !DIDerivedType(tag: DW_TAG_member, name: "ftoolflagpool", scope: !579, file: !578, line: 218, baseType: !523, size: 64, offset: 960)
!669 = !DIDerivedType(tag: DW_TAG_member, name: "stackdepth", scope: !579, file: !578, line: 220, baseType: !142, size: 32, offset: 1024)
!670 = !DIDerivedType(tag: DW_TAG_member, name: "currentop", scope: !579, file: !578, line: 221, baseType: !671, size: 64, offset: 1088)
!671 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !672, size: 64)
!672 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMOperator", file: !26, line: 190, size: 10496, elements: !673)
!673 = !{!674, !705, !706, !710, !713, !714, !716}
!674 = !DIDerivedType(tag: DW_TAG_member, name: "slots_in", scope: !672, file: !26, line: 191, baseType: !675, size: 5120)
!675 = !DICompositeType(tag: DW_TAG_array_type, baseType: !676, size: 5120, elements: !703)
!676 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMOpSlot", file: !26, line: 147, size: 320, elements: !677)
!677 = !{!678, !681, !683, !693, !694}
!678 = !DIDerivedType(tag: DW_TAG_member, name: "slot_name", scope: !676, file: !26, line: 148, baseType: !679, size: 64)
!679 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !680, size: 64)
!680 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !155)
!681 = !DIDerivedType(tag: DW_TAG_member, name: "slot_type", scope: !676, file: !26, line: 149, baseType: !682, size: 32, offset: 64)
!682 = !DIDerivedType(tag: DW_TAG_typedef, name: "eBMOpSlotType", file: !26, line: 112, baseType: !25)
!683 = !DIDerivedType(tag: DW_TAG_member, name: "slot_subtype", scope: !676, file: !26, line: 150, baseType: !684, size: 32, offset: 96)
!684 = !DIDerivedType(tag: DW_TAG_typedef, name: "eBMOpSlotSubType_Union", file: !26, line: 142, baseType: !685)
!685 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eBMOpSlotSubType_Union", file: !26, line: 138, size: 32, elements: !686)
!686 = !{!687, !689, !691}
!687 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !685, file: !26, line: 139, baseType: !688, size: 32)
!688 = !DIDerivedType(tag: DW_TAG_typedef, name: "eBMOpSlotSubType_Elem", file: !26, line: 122, baseType: !36)
!689 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !685, file: !26, line: 140, baseType: !690, size: 32)
!690 = !DIDerivedType(tag: DW_TAG_typedef, name: "eBMOpSlotSubType_Ptr", file: !26, line: 136, baseType: !42)
!691 = !DIDerivedType(tag: DW_TAG_member, name: "map", scope: !685, file: !26, line: 141, baseType: !692, size: 32)
!692 = !DIDerivedType(tag: DW_TAG_typedef, name: "eBMOpSlotSubType_Map", file: !26, line: 130, baseType: !48)
!693 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !676, file: !26, line: 152, baseType: !142, size: 32, offset: 128)
!694 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !676, file: !26, line: 162, baseType: !695, size: 128, offset: 192)
!695 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !676, file: !26, line: 155, size: 128, elements: !696)
!696 = !{!697, !698, !699, !700, !701, !702}
!697 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !695, file: !26, line: 156, baseType: !142, size: 32)
!698 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !695, file: !26, line: 157, baseType: !133, size: 32)
!699 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !695, file: !26, line: 158, baseType: !137, size: 64)
!700 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !695, file: !26, line: 159, baseType: !132, size: 96)
!701 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !695, file: !26, line: 160, baseType: !559, size: 64)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "ghash", scope: !695, file: !26, line: 161, baseType: !162, size: 64)
!703 = !{!704}
!704 = !DISubrange(count: 16)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "slots_out", scope: !672, file: !26, line: 192, baseType: !675, size: 5120, offset: 5120)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "exec", scope: !672, file: !26, line: 193, baseType: !707, size: 64, offset: 10240)
!707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !708, size: 64)
!708 = !DISubroutineType(types: !709)
!709 = !{null, !576, !671}
!710 = !DIDerivedType(tag: DW_TAG_member, name: "arena", scope: !672, file: !26, line: 194, baseType: !711, size: 64, offset: 10304)
!711 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !712, size: 64)
!712 = !DICompositeType(tag: DW_TAG_structure_type, name: "MemArena", file: !26, line: 194, flags: DIFlagFwdDecl)
!713 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !672, file: !26, line: 195, baseType: !142, size: 32, offset: 10368)
!714 = !DIDerivedType(tag: DW_TAG_member, name: "type_flag", scope: !672, file: !26, line: 196, baseType: !715, size: 32, offset: 10400)
!715 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMOpTypeFlag", file: !26, line: 188, baseType: !56)
!716 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !672, file: !26, line: 197, baseType: !142, size: 32, offset: 10432)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "vdata", scope: !579, file: !578, line: 223, baseType: !494, size: 1600, offset: 1152)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "edata", scope: !579, file: !578, line: 223, baseType: !494, size: 1600, offset: 2752)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "ldata", scope: !579, file: !578, line: 223, baseType: !494, size: 1600, offset: 4352)
!720 = !DIDerivedType(tag: DW_TAG_member, name: "pdata", scope: !579, file: !578, line: 223, baseType: !494, size: 1600, offset: 5952)
!721 = !DIDerivedType(tag: DW_TAG_member, name: "selectmode", scope: !579, file: !578, line: 233, baseType: !156, size: 16, offset: 7552)
!722 = !DIDerivedType(tag: DW_TAG_member, name: "shapenr", scope: !579, file: !578, line: 236, baseType: !142, size: 32, offset: 7584)
!723 = !DIDerivedType(tag: DW_TAG_member, name: "walkers", scope: !579, file: !578, line: 238, baseType: !142, size: 32, offset: 7616)
!724 = !DIDerivedType(tag: DW_TAG_member, name: "totflags", scope: !579, file: !578, line: 238, baseType: !142, size: 32, offset: 7648)
!725 = !DIDerivedType(tag: DW_TAG_member, name: "selected", scope: !579, file: !578, line: 239, baseType: !726, size: 128, offset: 7680)
!726 = !DIDerivedType(tag: DW_TAG_typedef, name: "ListBase", file: !727, line: 71, baseType: !728)
!727 = !DIFile(filename: "blender/source/blender/makesdna/DNA_listBase.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!728 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ListBase", file: !727, line: 69, size: 128, elements: !729)
!729 = !{!730, !731}
!730 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !728, file: !727, line: 70, baseType: !137, size: 64)
!731 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !728, file: !727, line: 70, baseType: !137, size: 64, offset: 64)
!732 = !DIDerivedType(tag: DW_TAG_member, name: "act_face", scope: !579, file: !578, line: 241, baseType: !661, size: 64, offset: 7808)
!733 = !DIDerivedType(tag: DW_TAG_member, name: "errorstack", scope: !579, file: !578, line: 243, baseType: !726, size: 128, offset: 7872)
!734 = !DIDerivedType(tag: DW_TAG_member, name: "py_handle", scope: !579, file: !578, line: 245, baseType: !137, size: 64, offset: 8000)
!735 = !DIDerivedType(tag: DW_TAG_member, name: "bm_max_edge_len", scope: !412, file: !11, line: 163, baseType: !133, size: 32, offset: 1472)
!736 = !DIDerivedType(tag: DW_TAG_member, name: "bm_min_edge_len", scope: !412, file: !11, line: 164, baseType: !133, size: 32, offset: 1504)
!737 = !DIDerivedType(tag: DW_TAG_member, name: "cd_vert_node_offset", scope: !412, file: !11, line: 165, baseType: !142, size: 32, offset: 1536)
!738 = !DIDerivedType(tag: DW_TAG_member, name: "cd_face_node_offset", scope: !412, file: !11, line: 166, baseType: !142, size: 32, offset: 1568)
!739 = !DIDerivedType(tag: DW_TAG_member, name: "bm_log", scope: !412, file: !11, line: 168, baseType: !740, size: 64, offset: 1600)
!740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !741, size: 64)
!741 = !DICompositeType(tag: DW_TAG_structure_type, name: "BMLog", file: !4, line: 44, flags: DIFlagFwdDecl)
!742 = !DILocalVariable(name: "bvh", arg: 1, scope: !407, file: !1, line: 233, type: !410)
!743 = !DILocation(line: 233, column: 28, scope: !407)
!744 = !DILocalVariable(name: "totnode", arg: 2, scope: !407, file: !1, line: 233, type: !142)
!745 = !DILocation(line: 233, column: 37, scope: !407)
!746 = !DILocation(line: 235, column: 6, scope: !747)
!747 = distinct !DILexicalBlock(scope: !407, file: !1, line: 235, column: 6)
!748 = !DILocation(line: 235, column: 16, scope: !747)
!749 = !DILocation(line: 235, column: 21, scope: !747)
!750 = !DILocation(line: 235, column: 14, scope: !747)
!751 = !DILocation(line: 235, column: 6, scope: !407)
!752 = !DILocalVariable(name: "prev", scope: !753, file: !1, line: 236, type: !419)
!753 = distinct !DILexicalBlock(scope: !747, file: !1, line: 235, column: 37)
!754 = !DILocation(line: 236, column: 13, scope: !753)
!755 = !DILocation(line: 236, column: 20, scope: !753)
!756 = !DILocation(line: 236, column: 25, scope: !753)
!757 = !DILocation(line: 237, column: 3, scope: !753)
!758 = !DILocation(line: 237, column: 8, scope: !753)
!759 = !DILocation(line: 237, column: 23, scope: !753)
!760 = !DILocation(line: 238, column: 7, scope: !761)
!761 = distinct !DILexicalBlock(scope: !753, file: !1, line: 238, column: 7)
!762 = !DILocation(line: 238, column: 12, scope: !761)
!763 = !DILocation(line: 238, column: 29, scope: !761)
!764 = !DILocation(line: 238, column: 27, scope: !761)
!765 = !DILocation(line: 238, column: 7, scope: !753)
!766 = !DILocation(line: 239, column: 26, scope: !761)
!767 = !DILocation(line: 239, column: 4, scope: !761)
!768 = !DILocation(line: 239, column: 9, scope: !761)
!769 = !DILocation(line: 239, column: 24, scope: !761)
!770 = !DILocation(line: 240, column: 16, scope: !753)
!771 = !DILocation(line: 240, column: 47, scope: !753)
!772 = !DILocation(line: 240, column: 52, scope: !753)
!773 = !DILocation(line: 240, column: 45, scope: !753)
!774 = !DILocation(line: 240, column: 3, scope: !753)
!775 = !DILocation(line: 240, column: 8, scope: !753)
!776 = !DILocation(line: 240, column: 14, scope: !753)
!777 = !DILocation(line: 242, column: 10, scope: !753)
!778 = !DILocation(line: 242, column: 15, scope: !753)
!779 = !DILocation(line: 242, column: 3, scope: !753)
!780 = !DILocation(line: 242, column: 22, scope: !753)
!781 = !DILocation(line: 242, column: 28, scope: !753)
!782 = !DILocation(line: 242, column: 33, scope: !753)
!783 = !DILocation(line: 242, column: 41, scope: !753)
!784 = !DILocation(line: 243, column: 10, scope: !753)
!785 = !DILocation(line: 243, column: 15, scope: !753)
!786 = !DILocation(line: 243, column: 23, scope: !753)
!787 = !DILocation(line: 243, column: 28, scope: !753)
!788 = !DILocation(line: 243, column: 21, scope: !753)
!789 = !DILocation(line: 243, column: 3, scope: !753)
!790 = !DILocation(line: 243, column: 41, scope: !753)
!791 = !DILocation(line: 243, column: 46, scope: !753)
!792 = !DILocation(line: 243, column: 63, scope: !753)
!793 = !DILocation(line: 243, column: 68, scope: !753)
!794 = !DILocation(line: 243, column: 61, scope: !753)
!795 = !DILocation(line: 243, column: 40, scope: !753)
!796 = !DILocation(line: 243, column: 77, scope: !753)
!797 = !DILocation(line: 244, column: 3, scope: !753)
!798 = !DILocation(line: 244, column: 13, scope: !753)
!799 = !DILocation(line: 245, column: 2, scope: !753)
!800 = !DILocation(line: 247, column: 17, scope: !407)
!801 = !DILocation(line: 247, column: 2, scope: !407)
!802 = !DILocation(line: 247, column: 7, scope: !407)
!803 = !DILocation(line: 247, column: 15, scope: !407)
!804 = !DILocation(line: 248, column: 1, scope: !407)
!805 = distinct !DISubprogram(name: "BKE_pbvh_count_grid_quads", scope: !1, file: !1, line: 365, type: !806, scopeLine: 368, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!806 = !DISubroutineType(types: !807)
!807 = !{!142, !570, !431, !142, !142}
!808 = !DILocalVariable(name: "grid_hidden", arg: 1, scope: !805, file: !1, line: 365, type: !570)
!809 = !DILocation(line: 365, column: 44, scope: !805)
!810 = !DILocalVariable(name: "grid_indices", arg: 2, scope: !805, file: !1, line: 366, type: !431)
!811 = !DILocation(line: 366, column: 36, scope: !805)
!812 = !DILocalVariable(name: "totgrid", arg: 3, scope: !805, file: !1, line: 366, type: !142)
!813 = !DILocation(line: 366, column: 54, scope: !805)
!814 = !DILocalVariable(name: "gridsize", arg: 4, scope: !805, file: !1, line: 367, type: !142)
!815 = !DILocation(line: 367, column: 35, scope: !805)
!816 = !DILocalVariable(name: "gridarea", scope: !805, file: !1, line: 369, type: !142)
!817 = !DILocation(line: 369, column: 6, scope: !805)
!818 = !DILocation(line: 369, column: 18, scope: !805)
!819 = !DILocation(line: 369, column: 27, scope: !805)
!820 = !DILocation(line: 369, column: 35, scope: !805)
!821 = !DILocation(line: 369, column: 44, scope: !805)
!822 = !DILocation(line: 369, column: 32, scope: !805)
!823 = !DILocalVariable(name: "i", scope: !805, file: !1, line: 370, type: !142)
!824 = !DILocation(line: 370, column: 6, scope: !805)
!825 = !DILocalVariable(name: "x", scope: !805, file: !1, line: 370, type: !142)
!826 = !DILocation(line: 370, column: 9, scope: !805)
!827 = !DILocalVariable(name: "y", scope: !805, file: !1, line: 370, type: !142)
!828 = !DILocation(line: 370, column: 12, scope: !805)
!829 = !DILocalVariable(name: "totquad", scope: !805, file: !1, line: 370, type: !142)
!830 = !DILocation(line: 370, column: 15, scope: !805)
!831 = !DILocation(line: 375, column: 9, scope: !832)
!832 = distinct !DILexicalBlock(scope: !805, file: !1, line: 375, column: 2)
!833 = !DILocation(line: 375, column: 22, scope: !832)
!834 = !DILocation(line: 375, column: 7, scope: !832)
!835 = !DILocation(line: 375, column: 27, scope: !836)
!836 = distinct !DILexicalBlock(scope: !832, file: !1, line: 375, column: 2)
!837 = !DILocation(line: 375, column: 31, scope: !836)
!838 = !DILocation(line: 375, column: 29, scope: !836)
!839 = !DILocation(line: 375, column: 2, scope: !832)
!840 = !DILocalVariable(name: "gh", scope: !841, file: !1, line: 376, type: !842)
!841 = distinct !DILexicalBlock(scope: !836, file: !1, line: 375, column: 45)
!842 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !843, size: 64)
!843 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !125)
!844 = !DILocation(line: 376, column: 21, scope: !841)
!845 = !DILocation(line: 376, column: 26, scope: !841)
!846 = !DILocation(line: 376, column: 38, scope: !841)
!847 = !DILocation(line: 376, column: 51, scope: !841)
!848 = !DILocation(line: 378, column: 7, scope: !849)
!849 = distinct !DILexicalBlock(scope: !841, file: !1, line: 378, column: 7)
!850 = !DILocation(line: 378, column: 7, scope: !841)
!851 = !DILocation(line: 380, column: 11, scope: !852)
!852 = distinct !DILexicalBlock(scope: !853, file: !1, line: 380, column: 4)
!853 = distinct !DILexicalBlock(scope: !849, file: !1, line: 378, column: 11)
!854 = !DILocation(line: 380, column: 9, scope: !852)
!855 = !DILocation(line: 380, column: 16, scope: !856)
!856 = distinct !DILexicalBlock(scope: !852, file: !1, line: 380, column: 4)
!857 = !DILocation(line: 380, column: 20, scope: !856)
!858 = !DILocation(line: 380, column: 29, scope: !856)
!859 = !DILocation(line: 380, column: 18, scope: !856)
!860 = !DILocation(line: 380, column: 4, scope: !852)
!861 = !DILocation(line: 381, column: 12, scope: !862)
!862 = distinct !DILexicalBlock(scope: !863, file: !1, line: 381, column: 5)
!863 = distinct !DILexicalBlock(scope: !856, file: !1, line: 380, column: 39)
!864 = !DILocation(line: 381, column: 10, scope: !862)
!865 = !DILocation(line: 381, column: 17, scope: !866)
!866 = distinct !DILexicalBlock(scope: !862, file: !1, line: 381, column: 5)
!867 = !DILocation(line: 381, column: 21, scope: !866)
!868 = !DILocation(line: 381, column: 30, scope: !866)
!869 = !DILocation(line: 381, column: 19, scope: !866)
!870 = !DILocation(line: 381, column: 5, scope: !862)
!871 = !DILocation(line: 382, column: 37, scope: !872)
!872 = distinct !DILexicalBlock(scope: !873, file: !1, line: 382, column: 10)
!873 = distinct !DILexicalBlock(scope: !866, file: !1, line: 381, column: 40)
!874 = !DILocation(line: 382, column: 41, scope: !872)
!875 = !DILocation(line: 382, column: 51, scope: !872)
!876 = !DILocation(line: 382, column: 54, scope: !872)
!877 = !DILocation(line: 382, column: 11, scope: !872)
!878 = !DILocation(line: 382, column: 10, scope: !873)
!879 = !DILocation(line: 383, column: 14, scope: !872)
!880 = !DILocation(line: 383, column: 7, scope: !872)
!881 = !DILocation(line: 384, column: 5, scope: !873)
!882 = !DILocation(line: 381, column: 36, scope: !866)
!883 = !DILocation(line: 381, column: 5, scope: !866)
!884 = distinct !{!884, !870, !885}
!885 = !DILocation(line: 384, column: 5, scope: !862)
!886 = !DILocation(line: 385, column: 4, scope: !863)
!887 = !DILocation(line: 380, column: 35, scope: !856)
!888 = !DILocation(line: 380, column: 4, scope: !856)
!889 = distinct !{!889, !860, !890}
!890 = !DILocation(line: 385, column: 4, scope: !852)
!891 = !DILocation(line: 386, column: 3, scope: !853)
!892 = !DILocation(line: 388, column: 15, scope: !849)
!893 = !DILocation(line: 388, column: 12, scope: !849)
!894 = !DILocation(line: 389, column: 2, scope: !841)
!895 = !DILocation(line: 375, column: 41, scope: !836)
!896 = !DILocation(line: 375, column: 2, scope: !836)
!897 = distinct !{!897, !839, !898}
!898 = !DILocation(line: 389, column: 2, scope: !832)
!899 = !DILocation(line: 391, column: 9, scope: !805)
!900 = !DILocation(line: 391, column: 2, scope: !805)
!901 = distinct !DISubprogram(name: "BKE_pbvh_build_mesh", scope: !1, file: !1, line: 541, type: !902, scopeLine: 542, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!902 = !DISubroutineType(types: !903)
!903 = !{null, !410, !481, !471, !142, !142, !904}
!904 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !495, size: 64)
!905 = !DILocalVariable(name: "bvh", arg: 1, scope: !901, file: !1, line: 541, type: !410)
!906 = !DILocation(line: 541, column: 32, scope: !901)
!907 = !DILocalVariable(name: "faces", arg: 2, scope: !901, file: !1, line: 541, type: !481)
!908 = !DILocation(line: 541, column: 44, scope: !901)
!909 = !DILocalVariable(name: "verts", arg: 3, scope: !901, file: !1, line: 541, type: !471)
!910 = !DILocation(line: 541, column: 58, scope: !901)
!911 = !DILocalVariable(name: "totface", arg: 4, scope: !901, file: !1, line: 541, type: !142)
!912 = !DILocation(line: 541, column: 69, scope: !901)
!913 = !DILocalVariable(name: "totvert", arg: 5, scope: !901, file: !1, line: 541, type: !142)
!914 = !DILocation(line: 541, column: 82, scope: !901)
!915 = !DILocalVariable(name: "vdata", arg: 6, scope: !901, file: !1, line: 541, type: !904)
!916 = !DILocation(line: 541, column: 110, scope: !901)
!917 = !DILocalVariable(name: "prim_bbc", scope: !901, file: !1, line: 543, type: !372)
!918 = !DILocation(line: 543, column: 7, scope: !901)
!919 = !DILocalVariable(name: "cb", scope: !901, file: !1, line: 544, type: !128)
!920 = !DILocation(line: 544, column: 5, scope: !901)
!921 = !DILocalVariable(name: "i", scope: !901, file: !1, line: 545, type: !142)
!922 = !DILocation(line: 545, column: 6, scope: !901)
!923 = !DILocalVariable(name: "j", scope: !901, file: !1, line: 545, type: !142)
!924 = !DILocation(line: 545, column: 9, scope: !901)
!925 = !DILocation(line: 547, column: 2, scope: !901)
!926 = !DILocation(line: 547, column: 7, scope: !901)
!927 = !DILocation(line: 547, column: 12, scope: !901)
!928 = !DILocation(line: 548, column: 15, scope: !901)
!929 = !DILocation(line: 548, column: 2, scope: !901)
!930 = !DILocation(line: 548, column: 7, scope: !901)
!931 = !DILocation(line: 548, column: 13, scope: !901)
!932 = !DILocation(line: 549, column: 15, scope: !901)
!933 = !DILocation(line: 549, column: 2, scope: !901)
!934 = !DILocation(line: 549, column: 7, scope: !901)
!935 = !DILocation(line: 549, column: 13, scope: !901)
!936 = !DILocation(line: 550, column: 21, scope: !901)
!937 = !DILocation(line: 550, column: 2, scope: !901)
!938 = !DILocation(line: 550, column: 7, scope: !901)
!939 = !DILocation(line: 550, column: 19, scope: !901)
!940 = !DILocation(line: 551, column: 17, scope: !901)
!941 = !DILocation(line: 551, column: 2, scope: !901)
!942 = !DILocation(line: 551, column: 7, scope: !901)
!943 = !DILocation(line: 551, column: 15, scope: !901)
!944 = !DILocation(line: 552, column: 2, scope: !901)
!945 = !DILocation(line: 552, column: 7, scope: !901)
!946 = !DILocation(line: 552, column: 18, scope: !901)
!947 = !DILocation(line: 553, column: 15, scope: !901)
!948 = !DILocation(line: 553, column: 2, scope: !901)
!949 = !DILocation(line: 553, column: 7, scope: !901)
!950 = !DILocation(line: 553, column: 13, scope: !901)
!951 = !DILocation(line: 555, column: 2, scope: !901)
!952 = !DILocation(line: 558, column: 13, scope: !901)
!953 = !DILocation(line: 558, column: 39, scope: !901)
!954 = !DILocation(line: 558, column: 37, scope: !901)
!955 = !DILocation(line: 558, column: 11, scope: !901)
!956 = !DILocation(line: 560, column: 9, scope: !957)
!957 = distinct !DILexicalBlock(scope: !901, file: !1, line: 560, column: 2)
!958 = !DILocation(line: 560, column: 7, scope: !957)
!959 = !DILocation(line: 560, column: 14, scope: !960)
!960 = distinct !DILexicalBlock(scope: !957, file: !1, line: 560, column: 2)
!961 = !DILocation(line: 560, column: 18, scope: !960)
!962 = !DILocation(line: 560, column: 16, scope: !960)
!963 = !DILocation(line: 560, column: 2, scope: !957)
!964 = !DILocalVariable(name: "f", scope: !965, file: !1, line: 561, type: !481)
!965 = distinct !DILexicalBlock(scope: !960, file: !1, line: 560, column: 32)
!966 = !DILocation(line: 561, column: 10, scope: !965)
!967 = !DILocation(line: 561, column: 14, scope: !965)
!968 = !DILocation(line: 561, column: 22, scope: !965)
!969 = !DILocation(line: 561, column: 20, scope: !965)
!970 = !DILocalVariable(name: "sides", scope: !965, file: !1, line: 562, type: !971)
!971 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !142)
!972 = !DILocation(line: 562, column: 13, scope: !965)
!973 = !DILocation(line: 562, column: 21, scope: !965)
!974 = !DILocation(line: 562, column: 24, scope: !965)
!975 = !DILocalVariable(name: "bbc", scope: !965, file: !1, line: 563, type: !372)
!976 = !DILocation(line: 563, column: 8, scope: !965)
!977 = !DILocation(line: 563, column: 14, scope: !965)
!978 = !DILocation(line: 563, column: 25, scope: !965)
!979 = !DILocation(line: 563, column: 23, scope: !965)
!980 = !DILocation(line: 565, column: 18, scope: !965)
!981 = !DILocation(line: 565, column: 12, scope: !965)
!982 = !DILocation(line: 565, column: 3, scope: !965)
!983 = !DILocation(line: 567, column: 10, scope: !984)
!984 = distinct !DILexicalBlock(scope: !965, file: !1, line: 567, column: 3)
!985 = !DILocation(line: 567, column: 8, scope: !984)
!986 = !DILocation(line: 567, column: 15, scope: !987)
!987 = distinct !DILexicalBlock(scope: !984, file: !1, line: 567, column: 3)
!988 = !DILocation(line: 567, column: 19, scope: !987)
!989 = !DILocation(line: 567, column: 17, scope: !987)
!990 = !DILocation(line: 567, column: 3, scope: !984)
!991 = !DILocation(line: 568, column: 20, scope: !987)
!992 = !DILocation(line: 568, column: 14, scope: !987)
!993 = !DILocation(line: 568, column: 25, scope: !987)
!994 = !DILocation(line: 568, column: 33, scope: !987)
!995 = !DILocation(line: 568, column: 36, scope: !987)
!996 = !DILocation(line: 568, column: 40, scope: !987)
!997 = !DILocation(line: 568, column: 31, scope: !987)
!998 = !DILocation(line: 568, column: 44, scope: !987)
!999 = !DILocation(line: 568, column: 4, scope: !987)
!1000 = !DILocation(line: 567, column: 26, scope: !987)
!1001 = !DILocation(line: 567, column: 3, scope: !987)
!1002 = distinct !{!1002, !990, !1003}
!1003 = !DILocation(line: 568, column: 46, scope: !984)
!1004 = !DILocation(line: 570, column: 23, scope: !965)
!1005 = !DILocation(line: 570, column: 3, scope: !965)
!1006 = !DILocation(line: 572, column: 18, scope: !965)
!1007 = !DILocation(line: 572, column: 23, scope: !965)
!1008 = !DILocation(line: 572, column: 3, scope: !965)
!1009 = !DILocation(line: 573, column: 2, scope: !965)
!1010 = !DILocation(line: 560, column: 27, scope: !960)
!1011 = !DILocation(line: 560, column: 2, scope: !960)
!1012 = distinct !{!1012, !963, !1013}
!1013 = !DILocation(line: 573, column: 2, scope: !957)
!1014 = !DILocation(line: 575, column: 6, scope: !1015)
!1015 = distinct !DILexicalBlock(scope: !901, file: !1, line: 575, column: 6)
!1016 = !DILocation(line: 575, column: 6, scope: !901)
!1017 = !DILocation(line: 576, column: 14, scope: !1015)
!1018 = !DILocation(line: 576, column: 24, scope: !1015)
!1019 = !DILocation(line: 576, column: 34, scope: !1015)
!1020 = !DILocation(line: 576, column: 3, scope: !1015)
!1021 = !DILocation(line: 578, column: 2, scope: !901)
!1022 = !DILocation(line: 578, column: 12, scope: !901)
!1023 = !DILocation(line: 579, column: 2, scope: !901)
!1024 = !DILocation(line: 579, column: 12, scope: !901)
!1025 = !DILocation(line: 579, column: 17, scope: !901)
!1026 = !DILocation(line: 580, column: 1, scope: !901)
!1027 = distinct !DISubprogram(name: "pbvh_build", scope: !1, file: !1, line: 515, type: !1028, scopeLine: 516, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1028 = !DISubroutineType(types: !1029)
!1029 = !{null, !410, !127, !372, !142}
!1030 = !DILocalVariable(name: "bvh", arg: 1, scope: !1027, file: !1, line: 515, type: !410)
!1031 = !DILocation(line: 515, column: 30, scope: !1027)
!1032 = !DILocalVariable(name: "cb", arg: 2, scope: !1027, file: !1, line: 515, type: !127)
!1033 = !DILocation(line: 515, column: 39, scope: !1027)
!1034 = !DILocalVariable(name: "prim_bbc", arg: 3, scope: !1027, file: !1, line: 515, type: !372)
!1035 = !DILocation(line: 515, column: 48, scope: !1027)
!1036 = !DILocalVariable(name: "totprim", arg: 4, scope: !1027, file: !1, line: 515, type: !142)
!1037 = !DILocation(line: 515, column: 62, scope: !1027)
!1038 = !DILocalVariable(name: "i", scope: !1027, file: !1, line: 517, type: !142)
!1039 = !DILocation(line: 517, column: 6, scope: !1027)
!1040 = !DILocation(line: 519, column: 6, scope: !1041)
!1041 = distinct !DILexicalBlock(scope: !1027, file: !1, line: 519, column: 6)
!1042 = !DILocation(line: 519, column: 17, scope: !1041)
!1043 = !DILocation(line: 519, column: 22, scope: !1041)
!1044 = !DILocation(line: 519, column: 14, scope: !1041)
!1045 = !DILocation(line: 519, column: 6, scope: !1027)
!1046 = !DILocation(line: 520, column: 18, scope: !1047)
!1047 = distinct !DILexicalBlock(scope: !1041, file: !1, line: 519, column: 31)
!1048 = !DILocation(line: 520, column: 3, scope: !1047)
!1049 = !DILocation(line: 520, column: 8, scope: !1047)
!1050 = !DILocation(line: 520, column: 16, scope: !1047)
!1051 = !DILocation(line: 521, column: 7, scope: !1052)
!1052 = distinct !DILexicalBlock(scope: !1047, file: !1, line: 521, column: 7)
!1053 = !DILocation(line: 521, column: 12, scope: !1052)
!1054 = !DILocation(line: 521, column: 7, scope: !1047)
!1055 = !DILocation(line: 521, column: 19, scope: !1052)
!1056 = !DILocation(line: 521, column: 29, scope: !1052)
!1057 = !DILocation(line: 521, column: 34, scope: !1052)
!1058 = !DILocation(line: 522, column: 7, scope: !1059)
!1059 = distinct !DILexicalBlock(scope: !1047, file: !1, line: 522, column: 7)
!1060 = !DILocation(line: 522, column: 12, scope: !1059)
!1061 = !DILocation(line: 522, column: 7, scope: !1047)
!1062 = !DILocation(line: 522, column: 26, scope: !1059)
!1063 = !DILocation(line: 522, column: 36, scope: !1059)
!1064 = !DILocation(line: 522, column: 41, scope: !1059)
!1065 = !DILocation(line: 523, column: 23, scope: !1047)
!1066 = !DILocation(line: 523, column: 49, scope: !1047)
!1067 = !DILocation(line: 523, column: 47, scope: !1047)
!1068 = !DILocation(line: 523, column: 3, scope: !1047)
!1069 = !DILocation(line: 523, column: 8, scope: !1047)
!1070 = !DILocation(line: 523, column: 21, scope: !1047)
!1071 = !DILocation(line: 525, column: 10, scope: !1072)
!1072 = distinct !DILexicalBlock(scope: !1047, file: !1, line: 525, column: 3)
!1073 = !DILocation(line: 525, column: 8, scope: !1072)
!1074 = !DILocation(line: 525, column: 15, scope: !1075)
!1075 = distinct !DILexicalBlock(scope: !1072, file: !1, line: 525, column: 3)
!1076 = !DILocation(line: 525, column: 19, scope: !1075)
!1077 = !DILocation(line: 525, column: 17, scope: !1075)
!1078 = !DILocation(line: 525, column: 3, scope: !1072)
!1079 = !DILocation(line: 526, column: 27, scope: !1075)
!1080 = !DILocation(line: 526, column: 4, scope: !1075)
!1081 = !DILocation(line: 526, column: 9, scope: !1075)
!1082 = !DILocation(line: 526, column: 22, scope: !1075)
!1083 = !DILocation(line: 526, column: 25, scope: !1075)
!1084 = !DILocation(line: 525, column: 28, scope: !1075)
!1085 = !DILocation(line: 525, column: 3, scope: !1075)
!1086 = distinct !{!1086, !1078, !1087}
!1087 = !DILocation(line: 526, column: 27, scope: !1072)
!1088 = !DILocation(line: 527, column: 3, scope: !1047)
!1089 = !DILocation(line: 527, column: 8, scope: !1047)
!1090 = !DILocation(line: 527, column: 16, scope: !1047)
!1091 = !DILocation(line: 528, column: 7, scope: !1092)
!1092 = distinct !DILexicalBlock(scope: !1047, file: !1, line: 528, column: 7)
!1093 = !DILocation(line: 528, column: 12, scope: !1092)
!1094 = !DILocation(line: 528, column: 27, scope: !1092)
!1095 = !DILocation(line: 528, column: 7, scope: !1047)
!1096 = !DILocation(line: 529, column: 4, scope: !1097)
!1097 = distinct !DILexicalBlock(scope: !1092, file: !1, line: 528, column: 34)
!1098 = !DILocation(line: 529, column: 9, scope: !1097)
!1099 = !DILocation(line: 529, column: 24, scope: !1097)
!1100 = !DILocation(line: 530, column: 17, scope: !1097)
!1101 = !DILocation(line: 531, column: 29, scope: !1097)
!1102 = !DILocation(line: 531, column: 34, scope: !1097)
!1103 = !DILocation(line: 530, column: 46, scope: !1097)
!1104 = !DILocation(line: 530, column: 4, scope: !1097)
!1105 = !DILocation(line: 530, column: 9, scope: !1097)
!1106 = !DILocation(line: 530, column: 15, scope: !1097)
!1107 = !DILocation(line: 533, column: 3, scope: !1097)
!1108 = !DILocation(line: 534, column: 2, scope: !1047)
!1109 = !DILocation(line: 536, column: 2, scope: !1027)
!1110 = !DILocation(line: 536, column: 7, scope: !1027)
!1111 = !DILocation(line: 536, column: 15, scope: !1027)
!1112 = !DILocation(line: 537, column: 12, scope: !1027)
!1113 = !DILocation(line: 537, column: 20, scope: !1027)
!1114 = !DILocation(line: 537, column: 24, scope: !1027)
!1115 = !DILocation(line: 537, column: 37, scope: !1027)
!1116 = !DILocation(line: 537, column: 2, scope: !1027)
!1117 = !DILocation(line: 538, column: 1, scope: !1027)
!1118 = distinct !DISubprogram(name: "BKE_pbvh_build_grids", scope: !1, file: !1, line: 583, type: !1119, scopeLine: 585, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1119 = !DISubroutineType(types: !1120)
!1120 = !{null, !410, !549, !551, !142, !1121, !559, !1122, !570}
!1121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !535, size: 64)
!1122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !563, size: 64)
!1123 = !DILocalVariable(name: "bvh", arg: 1, scope: !1118, file: !1, line: 583, type: !410)
!1124 = !DILocation(line: 583, column: 33, scope: !1118)
!1125 = !DILocalVariable(name: "grids", arg: 2, scope: !1118, file: !1, line: 583, type: !549)
!1126 = !DILocation(line: 583, column: 48, scope: !1118)
!1127 = !DILocalVariable(name: "gridadj", arg: 3, scope: !1118, file: !1, line: 583, type: !551)
!1128 = !DILocation(line: 583, column: 72, scope: !1118)
!1129 = !DILocalVariable(name: "totgrid", arg: 4, scope: !1118, file: !1, line: 584, type: !142)
!1130 = !DILocation(line: 584, column: 31, scope: !1118)
!1131 = !DILocalVariable(name: "key", arg: 5, scope: !1118, file: !1, line: 584, type: !1121)
!1132 = !DILocation(line: 584, column: 48, scope: !1118)
!1133 = !DILocalVariable(name: "gridfaces", arg: 6, scope: !1118, file: !1, line: 584, type: !559)
!1134 = !DILocation(line: 584, column: 60, scope: !1118)
!1135 = !DILocalVariable(name: "flagmats", arg: 7, scope: !1118, file: !1, line: 584, type: !1122)
!1136 = !DILocation(line: 584, column: 82, scope: !1118)
!1137 = !DILocalVariable(name: "grid_hidden", arg: 8, scope: !1118, file: !1, line: 584, type: !570)
!1138 = !DILocation(line: 584, column: 105, scope: !1118)
!1139 = !DILocalVariable(name: "prim_bbc", scope: !1118, file: !1, line: 586, type: !372)
!1140 = !DILocation(line: 586, column: 7, scope: !1118)
!1141 = !DILocalVariable(name: "cb", scope: !1118, file: !1, line: 587, type: !128)
!1142 = !DILocation(line: 587, column: 5, scope: !1118)
!1143 = !DILocalVariable(name: "gridsize", scope: !1118, file: !1, line: 588, type: !142)
!1144 = !DILocation(line: 588, column: 6, scope: !1118)
!1145 = !DILocation(line: 588, column: 17, scope: !1118)
!1146 = !DILocation(line: 588, column: 22, scope: !1118)
!1147 = !DILocalVariable(name: "i", scope: !1118, file: !1, line: 589, type: !142)
!1148 = !DILocation(line: 589, column: 6, scope: !1118)
!1149 = !DILocalVariable(name: "j", scope: !1118, file: !1, line: 589, type: !142)
!1150 = !DILocation(line: 589, column: 9, scope: !1118)
!1151 = !DILocation(line: 591, column: 2, scope: !1118)
!1152 = !DILocation(line: 591, column: 7, scope: !1118)
!1153 = !DILocation(line: 591, column: 12, scope: !1118)
!1154 = !DILocation(line: 592, column: 15, scope: !1118)
!1155 = !DILocation(line: 592, column: 2, scope: !1118)
!1156 = !DILocation(line: 592, column: 7, scope: !1118)
!1157 = !DILocation(line: 592, column: 13, scope: !1118)
!1158 = !DILocation(line: 593, column: 17, scope: !1118)
!1159 = !DILocation(line: 593, column: 2, scope: !1118)
!1160 = !DILocation(line: 593, column: 7, scope: !1118)
!1161 = !DILocation(line: 593, column: 15, scope: !1118)
!1162 = !DILocation(line: 594, column: 19, scope: !1118)
!1163 = !DILocation(line: 594, column: 2, scope: !1118)
!1164 = !DILocation(line: 594, column: 7, scope: !1118)
!1165 = !DILocation(line: 594, column: 17, scope: !1118)
!1166 = !DILocation(line: 595, column: 24, scope: !1118)
!1167 = !DILocation(line: 595, column: 2, scope: !1118)
!1168 = !DILocation(line: 595, column: 7, scope: !1118)
!1169 = !DILocation(line: 595, column: 22, scope: !1118)
!1170 = !DILocation(line: 596, column: 17, scope: !1118)
!1171 = !DILocation(line: 596, column: 2, scope: !1118)
!1172 = !DILocation(line: 596, column: 7, scope: !1118)
!1173 = !DILocation(line: 596, column: 15, scope: !1118)
!1174 = !DILocation(line: 597, column: 2, scope: !1118)
!1175 = !DILocation(line: 597, column: 7, scope: !1118)
!1176 = !DILocation(line: 597, column: 18, scope: !1118)
!1177 = !DILocation(line: 597, column: 17, scope: !1118)
!1178 = !DILocation(line: 598, column: 21, scope: !1118)
!1179 = !DILocation(line: 598, column: 2, scope: !1118)
!1180 = !DILocation(line: 598, column: 7, scope: !1118)
!1181 = !DILocation(line: 598, column: 19, scope: !1118)
!1182 = !DILocation(line: 599, column: 42, scope: !1118)
!1183 = !DILocation(line: 599, column: 51, scope: !1118)
!1184 = !DILocation(line: 599, column: 59, scope: !1118)
!1185 = !DILocation(line: 599, column: 68, scope: !1118)
!1186 = !DILocation(line: 599, column: 56, scope: !1118)
!1187 = !DILocation(line: 599, column: 38, scope: !1118)
!1188 = !DILocation(line: 599, column: 20, scope: !1118)
!1189 = !DILocation(line: 599, column: 2, scope: !1118)
!1190 = !DILocation(line: 599, column: 7, scope: !1118)
!1191 = !DILocation(line: 599, column: 18, scope: !1118)
!1192 = !DILocation(line: 601, column: 2, scope: !1118)
!1193 = !DILocation(line: 604, column: 13, scope: !1118)
!1194 = !DILocation(line: 604, column: 39, scope: !1118)
!1195 = !DILocation(line: 604, column: 37, scope: !1118)
!1196 = !DILocation(line: 604, column: 11, scope: !1118)
!1197 = !DILocation(line: 606, column: 9, scope: !1198)
!1198 = distinct !DILexicalBlock(scope: !1118, file: !1, line: 606, column: 2)
!1199 = !DILocation(line: 606, column: 7, scope: !1198)
!1200 = !DILocation(line: 606, column: 14, scope: !1201)
!1201 = distinct !DILexicalBlock(scope: !1198, file: !1, line: 606, column: 2)
!1202 = !DILocation(line: 606, column: 18, scope: !1201)
!1203 = !DILocation(line: 606, column: 16, scope: !1201)
!1204 = !DILocation(line: 606, column: 2, scope: !1198)
!1205 = !DILocalVariable(name: "grid", scope: !1206, file: !1, line: 607, type: !150)
!1206 = distinct !DILexicalBlock(scope: !1201, file: !1, line: 606, column: 32)
!1207 = !DILocation(line: 607, column: 12, scope: !1206)
!1208 = !DILocation(line: 607, column: 19, scope: !1206)
!1209 = !DILocation(line: 607, column: 25, scope: !1206)
!1210 = !DILocalVariable(name: "bbc", scope: !1206, file: !1, line: 608, type: !372)
!1211 = !DILocation(line: 608, column: 8, scope: !1206)
!1212 = !DILocation(line: 608, column: 14, scope: !1206)
!1213 = !DILocation(line: 608, column: 25, scope: !1206)
!1214 = !DILocation(line: 608, column: 23, scope: !1206)
!1215 = !DILocation(line: 610, column: 18, scope: !1206)
!1216 = !DILocation(line: 610, column: 12, scope: !1206)
!1217 = !DILocation(line: 610, column: 3, scope: !1206)
!1218 = !DILocation(line: 612, column: 10, scope: !1219)
!1219 = distinct !DILexicalBlock(scope: !1206, file: !1, line: 612, column: 3)
!1220 = !DILocation(line: 612, column: 8, scope: !1219)
!1221 = !DILocation(line: 612, column: 15, scope: !1222)
!1222 = distinct !DILexicalBlock(scope: !1219, file: !1, line: 612, column: 3)
!1223 = !DILocation(line: 612, column: 19, scope: !1222)
!1224 = !DILocation(line: 612, column: 30, scope: !1222)
!1225 = !DILocation(line: 612, column: 28, scope: !1222)
!1226 = !DILocation(line: 612, column: 17, scope: !1222)
!1227 = !DILocation(line: 612, column: 3, scope: !1219)
!1228 = !DILocation(line: 613, column: 20, scope: !1222)
!1229 = !DILocation(line: 613, column: 14, scope: !1222)
!1230 = !DILocation(line: 613, column: 44, scope: !1222)
!1231 = !DILocation(line: 613, column: 49, scope: !1222)
!1232 = !DILocation(line: 613, column: 55, scope: !1222)
!1233 = !DILocation(line: 613, column: 25, scope: !1222)
!1234 = !DILocation(line: 613, column: 4, scope: !1222)
!1235 = !DILocation(line: 612, column: 40, scope: !1222)
!1236 = !DILocation(line: 612, column: 3, scope: !1222)
!1237 = distinct !{!1237, !1227, !1238}
!1238 = !DILocation(line: 613, column: 57, scope: !1219)
!1239 = !DILocation(line: 615, column: 23, scope: !1206)
!1240 = !DILocation(line: 615, column: 3, scope: !1206)
!1241 = !DILocation(line: 617, column: 18, scope: !1206)
!1242 = !DILocation(line: 617, column: 23, scope: !1206)
!1243 = !DILocation(line: 617, column: 3, scope: !1206)
!1244 = !DILocation(line: 618, column: 2, scope: !1206)
!1245 = !DILocation(line: 606, column: 27, scope: !1201)
!1246 = !DILocation(line: 606, column: 2, scope: !1201)
!1247 = distinct !{!1247, !1204, !1248}
!1248 = !DILocation(line: 618, column: 2, scope: !1198)
!1249 = !DILocation(line: 620, column: 6, scope: !1250)
!1250 = distinct !DILexicalBlock(scope: !1118, file: !1, line: 620, column: 6)
!1251 = !DILocation(line: 620, column: 6, scope: !1118)
!1252 = !DILocation(line: 621, column: 14, scope: !1250)
!1253 = !DILocation(line: 621, column: 24, scope: !1250)
!1254 = !DILocation(line: 621, column: 34, scope: !1250)
!1255 = !DILocation(line: 621, column: 3, scope: !1250)
!1256 = !DILocation(line: 623, column: 2, scope: !1118)
!1257 = !DILocation(line: 623, column: 12, scope: !1118)
!1258 = !DILocation(line: 624, column: 1, scope: !1118)
!1259 = distinct !DISubprogram(name: "max_ii", scope: !244, file: !244, line: 215, type: !1260, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1260 = !DISubroutineType(types: !1261)
!1261 = !{!142, !142, !142}
!1262 = !DILocalVariable(name: "a", arg: 1, scope: !1259, file: !244, line: 215, type: !142)
!1263 = !DILocation(line: 215, column: 24, scope: !1259)
!1264 = !DILocalVariable(name: "b", arg: 2, scope: !1259, file: !244, line: 215, type: !142)
!1265 = !DILocation(line: 215, column: 31, scope: !1259)
!1266 = !DILocation(line: 217, column: 10, scope: !1259)
!1267 = !DILocation(line: 217, column: 14, scope: !1259)
!1268 = !DILocation(line: 217, column: 12, scope: !1259)
!1269 = !DILocation(line: 217, column: 9, scope: !1259)
!1270 = !DILocation(line: 217, column: 19, scope: !1259)
!1271 = !DILocation(line: 217, column: 23, scope: !1259)
!1272 = !DILocation(line: 217, column: 2, scope: !1259)
!1273 = distinct !DISubprogram(name: "CCG_elem_offset_co", scope: !152, file: !152, line: 152, type: !1274, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1274 = !DISubroutineType(types: !1275)
!1275 = !{!141, !1276, !150, !142}
!1276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1277, size: 64)
!1277 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !535)
!1278 = !DILocalVariable(name: "key", arg: 1, scope: !1273, file: !152, line: 152, type: !1276)
!1279 = !DILocation(line: 152, column: 52, scope: !1273)
!1280 = !DILocalVariable(name: "elem", arg: 2, scope: !1273, file: !152, line: 152, type: !150)
!1281 = !DILocation(line: 152, column: 66, scope: !1273)
!1282 = !DILocalVariable(name: "offset", arg: 3, scope: !1273, file: !152, line: 152, type: !142)
!1283 = !DILocation(line: 152, column: 76, scope: !1273)
!1284 = !DILocation(line: 154, column: 21, scope: !1273)
!1285 = !DILocation(line: 154, column: 42, scope: !1273)
!1286 = !DILocation(line: 154, column: 47, scope: !1273)
!1287 = !DILocation(line: 154, column: 53, scope: !1273)
!1288 = !DILocation(line: 154, column: 26, scope: !1273)
!1289 = !DILocation(line: 154, column: 9, scope: !1273)
!1290 = !DILocation(line: 154, column: 2, scope: !1273)
!1291 = distinct !DISubprogram(name: "BKE_pbvh_new", scope: !1, file: !1, line: 626, type: !1292, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1292 = !DISubroutineType(types: !1293)
!1293 = !{!410}
!1294 = !DILocalVariable(name: "bvh", scope: !1291, file: !1, line: 628, type: !410)
!1295 = !DILocation(line: 628, column: 8, scope: !1291)
!1296 = !DILocation(line: 628, column: 14, scope: !1291)
!1297 = !DILocation(line: 630, column: 9, scope: !1291)
!1298 = !DILocation(line: 630, column: 2, scope: !1291)
!1299 = distinct !DISubprogram(name: "BKE_pbvh_free", scope: !1, file: !1, line: 633, type: !1300, scopeLine: 634, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1300 = !DISubroutineType(types: !1301)
!1301 = !{null, !410}
!1302 = !DILocalVariable(name: "bvh", arg: 1, scope: !1299, file: !1, line: 633, type: !410)
!1303 = !DILocation(line: 633, column: 26, scope: !1299)
!1304 = !DILocalVariable(name: "node", scope: !1299, file: !1, line: 635, type: !419)
!1305 = !DILocation(line: 635, column: 12, scope: !1299)
!1306 = !DILocalVariable(name: "i", scope: !1299, file: !1, line: 636, type: !142)
!1307 = !DILocation(line: 636, column: 6, scope: !1299)
!1308 = !DILocation(line: 638, column: 9, scope: !1309)
!1309 = distinct !DILexicalBlock(scope: !1299, file: !1, line: 638, column: 2)
!1310 = !DILocation(line: 638, column: 7, scope: !1309)
!1311 = !DILocation(line: 638, column: 14, scope: !1312)
!1312 = distinct !DILexicalBlock(scope: !1309, file: !1, line: 638, column: 2)
!1313 = !DILocation(line: 638, column: 18, scope: !1312)
!1314 = !DILocation(line: 638, column: 23, scope: !1312)
!1315 = !DILocation(line: 638, column: 16, scope: !1312)
!1316 = !DILocation(line: 638, column: 2, scope: !1309)
!1317 = !DILocation(line: 639, column: 11, scope: !1318)
!1318 = distinct !DILexicalBlock(scope: !1312, file: !1, line: 638, column: 37)
!1319 = !DILocation(line: 639, column: 16, scope: !1318)
!1320 = !DILocation(line: 639, column: 22, scope: !1318)
!1321 = !DILocation(line: 639, column: 8, scope: !1318)
!1322 = !DILocation(line: 641, column: 7, scope: !1323)
!1323 = distinct !DILexicalBlock(scope: !1318, file: !1, line: 641, column: 7)
!1324 = !DILocation(line: 641, column: 13, scope: !1323)
!1325 = !DILocation(line: 641, column: 18, scope: !1323)
!1326 = !DILocation(line: 641, column: 7, scope: !1318)
!1327 = !DILocation(line: 642, column: 8, scope: !1328)
!1328 = distinct !DILexicalBlock(scope: !1329, file: !1, line: 642, column: 8)
!1329 = distinct !DILexicalBlock(scope: !1323, file: !1, line: 641, column: 31)
!1330 = !DILocation(line: 642, column: 14, scope: !1328)
!1331 = !DILocation(line: 642, column: 8, scope: !1329)
!1332 = !DILocation(line: 643, column: 27, scope: !1328)
!1333 = !DILocation(line: 643, column: 33, scope: !1328)
!1334 = !DILocation(line: 643, column: 5, scope: !1328)
!1335 = !DILocation(line: 644, column: 8, scope: !1336)
!1336 = distinct !DILexicalBlock(scope: !1329, file: !1, line: 644, column: 8)
!1337 = !DILocation(line: 644, column: 14, scope: !1336)
!1338 = !DILocation(line: 644, column: 8, scope: !1329)
!1339 = !DILocation(line: 645, column: 5, scope: !1336)
!1340 = !DILocation(line: 645, column: 15, scope: !1336)
!1341 = !DILocation(line: 645, column: 21, scope: !1336)
!1342 = !DILocation(line: 646, column: 8, scope: !1343)
!1343 = distinct !DILexicalBlock(scope: !1329, file: !1, line: 646, column: 8)
!1344 = !DILocation(line: 646, column: 14, scope: !1343)
!1345 = !DILocation(line: 646, column: 8, scope: !1329)
!1346 = !DILocation(line: 647, column: 5, scope: !1343)
!1347 = !DILocation(line: 647, column: 15, scope: !1343)
!1348 = !DILocation(line: 647, column: 21, scope: !1343)
!1349 = !DILocation(line: 648, column: 34, scope: !1329)
!1350 = !DILocation(line: 648, column: 4, scope: !1329)
!1351 = !DILocation(line: 650, column: 8, scope: !1352)
!1352 = distinct !DILexicalBlock(scope: !1329, file: !1, line: 650, column: 8)
!1353 = !DILocation(line: 650, column: 14, scope: !1352)
!1354 = !DILocation(line: 650, column: 8, scope: !1329)
!1355 = !DILocation(line: 651, column: 19, scope: !1352)
!1356 = !DILocation(line: 651, column: 25, scope: !1352)
!1357 = !DILocation(line: 651, column: 5, scope: !1352)
!1358 = !DILocation(line: 652, column: 8, scope: !1359)
!1359 = distinct !DILexicalBlock(scope: !1329, file: !1, line: 652, column: 8)
!1360 = !DILocation(line: 652, column: 14, scope: !1359)
!1361 = !DILocation(line: 652, column: 8, scope: !1329)
!1362 = !DILocation(line: 653, column: 19, scope: !1359)
!1363 = !DILocation(line: 653, column: 25, scope: !1359)
!1364 = !DILocation(line: 653, column: 5, scope: !1359)
!1365 = !DILocation(line: 654, column: 8, scope: !1366)
!1366 = distinct !DILexicalBlock(scope: !1329, file: !1, line: 654, column: 8)
!1367 = !DILocation(line: 654, column: 14, scope: !1366)
!1368 = !DILocation(line: 654, column: 8, scope: !1329)
!1369 = !DILocation(line: 655, column: 19, scope: !1366)
!1370 = !DILocation(line: 655, column: 25, scope: !1366)
!1371 = !DILocation(line: 655, column: 5, scope: !1366)
!1372 = !DILocation(line: 656, column: 3, scope: !1329)
!1373 = !DILocation(line: 657, column: 2, scope: !1318)
!1374 = !DILocation(line: 638, column: 32, scope: !1312)
!1375 = !DILocation(line: 638, column: 2, scope: !1312)
!1376 = distinct !{!1376, !1316, !1377}
!1377 = !DILocation(line: 657, column: 2, scope: !1309)
!1378 = !DILocation(line: 659, column: 6, scope: !1379)
!1379 = distinct !DILexicalBlock(scope: !1299, file: !1, line: 659, column: 6)
!1380 = !DILocation(line: 659, column: 11, scope: !1379)
!1381 = !DILocation(line: 659, column: 6, scope: !1299)
!1382 = !DILocation(line: 660, column: 7, scope: !1383)
!1383 = distinct !DILexicalBlock(scope: !1384, file: !1, line: 660, column: 7)
!1384 = distinct !DILexicalBlock(scope: !1379, file: !1, line: 659, column: 21)
!1385 = !DILocation(line: 660, column: 12, scope: !1383)
!1386 = !DILocation(line: 660, column: 7, scope: !1384)
!1387 = !DILocation(line: 663, column: 4, scope: !1388)
!1388 = distinct !DILexicalBlock(scope: !1383, file: !1, line: 660, column: 19)
!1389 = !DILocation(line: 663, column: 14, scope: !1388)
!1390 = !DILocation(line: 663, column: 19, scope: !1388)
!1391 = !DILocation(line: 664, column: 8, scope: !1392)
!1392 = distinct !DILexicalBlock(scope: !1388, file: !1, line: 664, column: 8)
!1393 = !DILocation(line: 664, column: 13, scope: !1392)
!1394 = !DILocation(line: 664, column: 8, scope: !1388)
!1395 = !DILocation(line: 665, column: 5, scope: !1392)
!1396 = !DILocation(line: 665, column: 15, scope: !1392)
!1397 = !DILocation(line: 665, column: 20, scope: !1392)
!1398 = !DILocation(line: 666, column: 3, scope: !1388)
!1399 = !DILocation(line: 667, column: 2, scope: !1384)
!1400 = !DILocation(line: 669, column: 6, scope: !1401)
!1401 = distinct !DILexicalBlock(scope: !1299, file: !1, line: 669, column: 6)
!1402 = !DILocation(line: 669, column: 11, scope: !1401)
!1403 = !DILocation(line: 669, column: 6, scope: !1299)
!1404 = !DILocation(line: 670, column: 3, scope: !1401)
!1405 = !DILocation(line: 670, column: 13, scope: !1401)
!1406 = !DILocation(line: 670, column: 18, scope: !1401)
!1407 = !DILocation(line: 672, column: 6, scope: !1408)
!1408 = distinct !DILexicalBlock(scope: !1299, file: !1, line: 672, column: 6)
!1409 = !DILocation(line: 672, column: 11, scope: !1408)
!1410 = !DILocation(line: 672, column: 6, scope: !1299)
!1411 = !DILocation(line: 673, column: 3, scope: !1408)
!1412 = !DILocation(line: 673, column: 13, scope: !1408)
!1413 = !DILocation(line: 673, column: 18, scope: !1408)
!1414 = !DILocation(line: 675, column: 2, scope: !1299)
!1415 = !DILocation(line: 675, column: 12, scope: !1299)
!1416 = !DILocation(line: 676, column: 1, scope: !1299)
!1417 = distinct !DISubprogram(name: "BKE_pbvh_node_layer_disp_free", scope: !1, file: !1, line: 1820, type: !1418, scopeLine: 1821, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1418 = !DISubroutineType(types: !1419)
!1419 = !{null, !419}
!1420 = !DILocalVariable(name: "node", arg: 1, scope: !1417, file: !1, line: 1820, type: !419)
!1421 = !DILocation(line: 1820, column: 46, scope: !1417)
!1422 = !DILocation(line: 1822, column: 6, scope: !1423)
!1423 = distinct !DILexicalBlock(scope: !1417, file: !1, line: 1822, column: 6)
!1424 = !DILocation(line: 1822, column: 12, scope: !1423)
!1425 = !DILocation(line: 1822, column: 6, scope: !1417)
!1426 = !DILocation(line: 1823, column: 3, scope: !1427)
!1427 = distinct !DILexicalBlock(scope: !1423, file: !1, line: 1822, column: 24)
!1428 = !DILocation(line: 1823, column: 13, scope: !1427)
!1429 = !DILocation(line: 1823, column: 19, scope: !1427)
!1430 = !DILocation(line: 1824, column: 3, scope: !1427)
!1431 = !DILocation(line: 1824, column: 9, scope: !1427)
!1432 = !DILocation(line: 1824, column: 20, scope: !1427)
!1433 = !DILocation(line: 1825, column: 2, scope: !1427)
!1434 = !DILocation(line: 1826, column: 1, scope: !1417)
!1435 = distinct !DISubprogram(name: "BKE_pbvh_free_layer_disp", scope: !1, file: !1, line: 678, type: !1300, scopeLine: 679, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1436 = !DILocalVariable(name: "bvh", arg: 1, scope: !1435, file: !1, line: 678, type: !410)
!1437 = !DILocation(line: 678, column: 37, scope: !1435)
!1438 = !DILocalVariable(name: "i", scope: !1435, file: !1, line: 680, type: !142)
!1439 = !DILocation(line: 680, column: 6, scope: !1435)
!1440 = !DILocation(line: 681, column: 9, scope: !1441)
!1441 = distinct !DILexicalBlock(scope: !1435, file: !1, line: 681, column: 2)
!1442 = !DILocation(line: 681, column: 7, scope: !1441)
!1443 = !DILocation(line: 681, column: 14, scope: !1444)
!1444 = distinct !DILexicalBlock(scope: !1441, file: !1, line: 681, column: 2)
!1445 = !DILocation(line: 681, column: 18, scope: !1444)
!1446 = !DILocation(line: 681, column: 23, scope: !1444)
!1447 = !DILocation(line: 681, column: 16, scope: !1444)
!1448 = !DILocation(line: 681, column: 2, scope: !1441)
!1449 = !DILocation(line: 682, column: 34, scope: !1444)
!1450 = !DILocation(line: 682, column: 39, scope: !1444)
!1451 = !DILocation(line: 682, column: 45, scope: !1444)
!1452 = !DILocation(line: 682, column: 3, scope: !1444)
!1453 = !DILocation(line: 681, column: 32, scope: !1444)
!1454 = !DILocation(line: 681, column: 2, scope: !1444)
!1455 = distinct !{!1455, !1448, !1456}
!1456 = !DILocation(line: 682, column: 47, scope: !1441)
!1457 = !DILocation(line: 683, column: 1, scope: !1435)
!1458 = distinct !DISubprogram(name: "BKE_pbvh_search_gather", scope: !1, file: !1, line: 796, type: !1459, scopeLine: 799, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1459 = !DISubroutineType(types: !1460)
!1460 = !{null, !410, !1461, !137, !1465, !431}
!1461 = !DIDerivedType(tag: DW_TAG_typedef, name: "BKE_pbvh_SearchCallback", file: !4, line: 56, baseType: !1462)
!1462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1463, size: 64)
!1463 = !DISubroutineType(types: !1464)
!1464 = !{!573, !419, !137}
!1465 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1466, size: 64)
!1466 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !419, size: 64)
!1467 = !DILocalVariable(name: "bvh", arg: 1, scope: !1458, file: !1, line: 796, type: !410)
!1468 = !DILocation(line: 796, column: 35, scope: !1458)
!1469 = !DILocalVariable(name: "scb", arg: 2, scope: !1458, file: !1, line: 797, type: !1461)
!1470 = !DILocation(line: 797, column: 53, scope: !1458)
!1471 = !DILocalVariable(name: "search_data", arg: 3, scope: !1458, file: !1, line: 797, type: !137)
!1472 = !DILocation(line: 797, column: 64, scope: !1458)
!1473 = !DILocalVariable(name: "r_array", arg: 4, scope: !1458, file: !1, line: 798, type: !1465)
!1474 = !DILocation(line: 798, column: 41, scope: !1458)
!1475 = !DILocalVariable(name: "r_tot", arg: 5, scope: !1458, file: !1, line: 798, type: !431)
!1476 = !DILocation(line: 798, column: 55, scope: !1458)
!1477 = !DILocalVariable(name: "iter", scope: !1458, file: !1, line: 800, type: !1478)
!1478 = !DIDerivedType(tag: DW_TAG_typedef, name: "PBVHIter", file: !1, line: 77, baseType: !1479)
!1479 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "PBVHIter", file: !1, line: 67, size: 13184, elements: !1480)
!1480 = !{!1481, !1482, !1483, !1484, !1491, !1492, !1496}
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "bvh", scope: !1479, file: !1, line: 68, baseType: !410, size: 64)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "scb", scope: !1479, file: !1, line: 69, baseType: !1461, size: 64, offset: 64)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "search_data", scope: !1479, file: !1, line: 70, baseType: !137, size: 64, offset: 128)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "stack", scope: !1479, file: !1, line: 72, baseType: !1485, size: 64, offset: 192)
!1485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1486, size: 64)
!1486 = !DIDerivedType(tag: DW_TAG_typedef, name: "PBVHStack", file: !1, line: 65, baseType: !1487)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "PBVHStack", file: !1, line: 62, size: 128, elements: !1488)
!1488 = !{!1489, !1490}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !1487, file: !1, line: 63, baseType: !419, size: 64)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "revisiting", scope: !1487, file: !1, line: 64, baseType: !142, size: 32, offset: 64)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "stacksize", scope: !1479, file: !1, line: 73, baseType: !142, size: 32, offset: 256)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "stackfixed", scope: !1479, file: !1, line: 75, baseType: !1493, size: 12800, offset: 320)
!1493 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1486, size: 12800, elements: !1494)
!1494 = !{!1495}
!1495 = !DISubrange(count: 100)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "stackspace", scope: !1479, file: !1, line: 76, baseType: !142, size: 32, offset: 13120)
!1497 = !DILocation(line: 800, column: 11, scope: !1458)
!1498 = !DILocalVariable(name: "array", scope: !1458, file: !1, line: 801, type: !1466)
!1499 = !DILocation(line: 801, column: 13, scope: !1458)
!1500 = !DILocalVariable(name: "node", scope: !1458, file: !1, line: 801, type: !419)
!1501 = !DILocation(line: 801, column: 28, scope: !1458)
!1502 = !DILocalVariable(name: "tot", scope: !1458, file: !1, line: 802, type: !142)
!1503 = !DILocation(line: 802, column: 6, scope: !1458)
!1504 = !DILocalVariable(name: "space", scope: !1458, file: !1, line: 802, type: !142)
!1505 = !DILocation(line: 802, column: 15, scope: !1458)
!1506 = !DILocation(line: 804, column: 25, scope: !1458)
!1507 = !DILocation(line: 804, column: 30, scope: !1458)
!1508 = !DILocation(line: 804, column: 35, scope: !1458)
!1509 = !DILocation(line: 804, column: 2, scope: !1458)
!1510 = !DILocation(line: 806, column: 2, scope: !1458)
!1511 = !DILocation(line: 806, column: 17, scope: !1458)
!1512 = !DILocation(line: 806, column: 15, scope: !1458)
!1513 = !DILocation(line: 807, column: 7, scope: !1514)
!1514 = distinct !DILexicalBlock(scope: !1515, file: !1, line: 807, column: 7)
!1515 = distinct !DILexicalBlock(scope: !1458, file: !1, line: 806, column: 41)
!1516 = !DILocation(line: 807, column: 13, scope: !1514)
!1517 = !DILocation(line: 807, column: 18, scope: !1514)
!1518 = !DILocation(line: 807, column: 7, scope: !1515)
!1519 = !DILocation(line: 808, column: 8, scope: !1520)
!1520 = distinct !DILexicalBlock(scope: !1521, file: !1, line: 808, column: 8)
!1521 = distinct !DILexicalBlock(scope: !1514, file: !1, line: 807, column: 31)
!1522 = !DILocation(line: 808, column: 15, scope: !1520)
!1523 = !DILocation(line: 808, column: 12, scope: !1520)
!1524 = !DILocation(line: 808, column: 8, scope: !1521)
!1525 = !DILocation(line: 810, column: 14, scope: !1526)
!1526 = distinct !DILexicalBlock(scope: !1520, file: !1, line: 808, column: 22)
!1527 = !DILocation(line: 810, column: 18, scope: !1526)
!1528 = !DILocation(line: 810, column: 13, scope: !1526)
!1529 = !DILocation(line: 810, column: 31, scope: !1526)
!1530 = !DILocation(line: 810, column: 37, scope: !1526)
!1531 = !DILocation(line: 810, column: 11, scope: !1526)
!1532 = !DILocation(line: 811, column: 13, scope: !1526)
!1533 = !DILocation(line: 811, column: 30, scope: !1526)
!1534 = !DILocation(line: 811, column: 58, scope: !1526)
!1535 = !DILocation(line: 811, column: 56, scope: !1526)
!1536 = !DILocation(line: 811, column: 11, scope: !1526)
!1537 = !DILocation(line: 812, column: 4, scope: !1526)
!1538 = !DILocation(line: 814, column: 17, scope: !1521)
!1539 = !DILocation(line: 814, column: 4, scope: !1521)
!1540 = !DILocation(line: 814, column: 10, scope: !1521)
!1541 = !DILocation(line: 814, column: 15, scope: !1521)
!1542 = !DILocation(line: 815, column: 7, scope: !1521)
!1543 = !DILocation(line: 816, column: 3, scope: !1521)
!1544 = distinct !{!1544, !1510, !1545}
!1545 = !DILocation(line: 817, column: 2, scope: !1458)
!1546 = !DILocation(line: 819, column: 2, scope: !1458)
!1547 = !DILocation(line: 821, column: 6, scope: !1548)
!1548 = distinct !DILexicalBlock(scope: !1458, file: !1, line: 821, column: 6)
!1549 = !DILocation(line: 821, column: 10, scope: !1548)
!1550 = !DILocation(line: 821, column: 15, scope: !1548)
!1551 = !DILocation(line: 821, column: 18, scope: !1548)
!1552 = !DILocation(line: 821, column: 6, scope: !1458)
!1553 = !DILocation(line: 822, column: 3, scope: !1554)
!1554 = distinct !DILexicalBlock(scope: !1548, file: !1, line: 821, column: 25)
!1555 = !DILocation(line: 822, column: 13, scope: !1554)
!1556 = !DILocation(line: 823, column: 9, scope: !1554)
!1557 = !DILocation(line: 824, column: 2, scope: !1554)
!1558 = !DILocation(line: 826, column: 13, scope: !1458)
!1559 = !DILocation(line: 826, column: 3, scope: !1458)
!1560 = !DILocation(line: 826, column: 11, scope: !1458)
!1561 = !DILocation(line: 827, column: 11, scope: !1458)
!1562 = !DILocation(line: 827, column: 3, scope: !1458)
!1563 = !DILocation(line: 827, column: 9, scope: !1458)
!1564 = !DILocation(line: 828, column: 1, scope: !1458)
!1565 = distinct !DISubprogram(name: "pbvh_iter_begin", scope: !1, file: !1, line: 685, type: !1566, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1566 = !DISubroutineType(types: !1567)
!1567 = !{null, !1568, !410, !1461, !137}
!1568 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1478, size: 64)
!1569 = !DILocalVariable(name: "iter", arg: 1, scope: !1565, file: !1, line: 685, type: !1568)
!1570 = !DILocation(line: 685, column: 39, scope: !1565)
!1571 = !DILocalVariable(name: "bvh", arg: 2, scope: !1565, file: !1, line: 685, type: !410)
!1572 = !DILocation(line: 685, column: 51, scope: !1565)
!1573 = !DILocalVariable(name: "scb", arg: 3, scope: !1565, file: !1, line: 685, type: !1461)
!1574 = !DILocation(line: 685, column: 80, scope: !1565)
!1575 = !DILocalVariable(name: "search_data", arg: 4, scope: !1565, file: !1, line: 685, type: !137)
!1576 = !DILocation(line: 685, column: 91, scope: !1565)
!1577 = !DILocation(line: 687, column: 14, scope: !1565)
!1578 = !DILocation(line: 687, column: 2, scope: !1565)
!1579 = !DILocation(line: 687, column: 8, scope: !1565)
!1580 = !DILocation(line: 687, column: 12, scope: !1565)
!1581 = !DILocation(line: 688, column: 14, scope: !1565)
!1582 = !DILocation(line: 688, column: 2, scope: !1565)
!1583 = !DILocation(line: 688, column: 8, scope: !1565)
!1584 = !DILocation(line: 688, column: 12, scope: !1565)
!1585 = !DILocation(line: 689, column: 22, scope: !1565)
!1586 = !DILocation(line: 689, column: 2, scope: !1565)
!1587 = !DILocation(line: 689, column: 8, scope: !1565)
!1588 = !DILocation(line: 689, column: 20, scope: !1565)
!1589 = !DILocation(line: 691, column: 16, scope: !1565)
!1590 = !DILocation(line: 691, column: 22, scope: !1565)
!1591 = !DILocation(line: 691, column: 2, scope: !1565)
!1592 = !DILocation(line: 691, column: 8, scope: !1565)
!1593 = !DILocation(line: 691, column: 14, scope: !1565)
!1594 = !DILocation(line: 692, column: 2, scope: !1565)
!1595 = !DILocation(line: 692, column: 8, scope: !1565)
!1596 = !DILocation(line: 692, column: 19, scope: !1565)
!1597 = !DILocation(line: 694, column: 24, scope: !1565)
!1598 = !DILocation(line: 694, column: 29, scope: !1565)
!1599 = !DILocation(line: 694, column: 2, scope: !1565)
!1600 = !DILocation(line: 694, column: 8, scope: !1565)
!1601 = !DILocation(line: 694, column: 17, scope: !1565)
!1602 = !DILocation(line: 694, column: 22, scope: !1565)
!1603 = !DILocation(line: 695, column: 2, scope: !1565)
!1604 = !DILocation(line: 695, column: 8, scope: !1565)
!1605 = !DILocation(line: 695, column: 17, scope: !1565)
!1606 = !DILocation(line: 695, column: 28, scope: !1565)
!1607 = !DILocation(line: 696, column: 2, scope: !1565)
!1608 = !DILocation(line: 696, column: 8, scope: !1565)
!1609 = !DILocation(line: 696, column: 18, scope: !1565)
!1610 = !DILocation(line: 697, column: 1, scope: !1565)
!1611 = distinct !DISubprogram(name: "pbvh_iter_next", scope: !1, file: !1, line: 724, type: !1612, scopeLine: 725, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1612 = !DISubroutineType(types: !1613)
!1613 = !{!419, !1568}
!1614 = !DILocalVariable(name: "iter", arg: 1, scope: !1611, file: !1, line: 724, type: !1568)
!1615 = !DILocation(line: 724, column: 43, scope: !1611)
!1616 = !DILocalVariable(name: "node", scope: !1611, file: !1, line: 726, type: !419)
!1617 = !DILocation(line: 726, column: 12, scope: !1611)
!1618 = !DILocalVariable(name: "revisiting", scope: !1611, file: !1, line: 727, type: !142)
!1619 = !DILocation(line: 727, column: 6, scope: !1611)
!1620 = !DILocation(line: 732, column: 2, scope: !1611)
!1621 = !DILocation(line: 732, column: 9, scope: !1611)
!1622 = !DILocation(line: 732, column: 15, scope: !1611)
!1623 = !DILocation(line: 734, column: 3, scope: !1624)
!1624 = distinct !DILexicalBlock(scope: !1611, file: !1, line: 732, column: 26)
!1625 = !DILocation(line: 734, column: 9, scope: !1624)
!1626 = !DILocation(line: 734, column: 18, scope: !1624)
!1627 = !DILocation(line: 735, column: 10, scope: !1624)
!1628 = !DILocation(line: 735, column: 16, scope: !1624)
!1629 = !DILocation(line: 735, column: 22, scope: !1624)
!1630 = !DILocation(line: 735, column: 28, scope: !1624)
!1631 = !DILocation(line: 735, column: 39, scope: !1624)
!1632 = !DILocation(line: 735, column: 8, scope: !1624)
!1633 = !DILocation(line: 739, column: 7, scope: !1634)
!1634 = distinct !DILexicalBlock(scope: !1624, file: !1, line: 739, column: 7)
!1635 = !DILocation(line: 739, column: 12, scope: !1634)
!1636 = !DILocation(line: 739, column: 7, scope: !1624)
!1637 = !DILocation(line: 740, column: 4, scope: !1634)
!1638 = !DILocation(line: 742, column: 16, scope: !1624)
!1639 = !DILocation(line: 742, column: 22, scope: !1624)
!1640 = !DILocation(line: 742, column: 28, scope: !1624)
!1641 = !DILocation(line: 742, column: 34, scope: !1624)
!1642 = !DILocation(line: 742, column: 45, scope: !1624)
!1643 = !DILocation(line: 742, column: 14, scope: !1624)
!1644 = !DILocation(line: 745, column: 7, scope: !1645)
!1645 = distinct !DILexicalBlock(scope: !1624, file: !1, line: 745, column: 7)
!1646 = !DILocation(line: 745, column: 7, scope: !1624)
!1647 = !DILocation(line: 746, column: 11, scope: !1645)
!1648 = !DILocation(line: 746, column: 4, scope: !1645)
!1649 = !DILocation(line: 748, column: 7, scope: !1650)
!1650 = distinct !DILexicalBlock(scope: !1624, file: !1, line: 748, column: 7)
!1651 = !DILocation(line: 748, column: 13, scope: !1650)
!1652 = !DILocation(line: 748, column: 17, scope: !1650)
!1653 = !DILocation(line: 748, column: 21, scope: !1650)
!1654 = !DILocation(line: 748, column: 27, scope: !1650)
!1655 = !DILocation(line: 748, column: 31, scope: !1650)
!1656 = !DILocation(line: 748, column: 37, scope: !1650)
!1657 = !DILocation(line: 748, column: 43, scope: !1650)
!1658 = !DILocation(line: 748, column: 7, scope: !1624)
!1659 = !DILocation(line: 749, column: 4, scope: !1650)
!1660 = distinct !{!1660, !1620, !1661}
!1661 = !DILocation(line: 763, column: 2, scope: !1611)
!1662 = !DILocation(line: 751, column: 7, scope: !1663)
!1663 = distinct !DILexicalBlock(scope: !1624, file: !1, line: 751, column: 7)
!1664 = !DILocation(line: 751, column: 13, scope: !1663)
!1665 = !DILocation(line: 751, column: 18, scope: !1663)
!1666 = !DILocation(line: 751, column: 7, scope: !1624)
!1667 = !DILocation(line: 753, column: 11, scope: !1668)
!1668 = distinct !DILexicalBlock(scope: !1663, file: !1, line: 751, column: 31)
!1669 = !DILocation(line: 753, column: 4, scope: !1668)
!1670 = !DILocation(line: 757, column: 20, scope: !1671)
!1671 = distinct !DILexicalBlock(scope: !1663, file: !1, line: 755, column: 8)
!1672 = !DILocation(line: 757, column: 26, scope: !1671)
!1673 = !DILocation(line: 757, column: 4, scope: !1671)
!1674 = !DILocation(line: 760, column: 20, scope: !1671)
!1675 = !DILocation(line: 760, column: 26, scope: !1671)
!1676 = !DILocation(line: 760, column: 32, scope: !1671)
!1677 = !DILocation(line: 760, column: 37, scope: !1671)
!1678 = !DILocation(line: 760, column: 45, scope: !1671)
!1679 = !DILocation(line: 760, column: 51, scope: !1671)
!1680 = !DILocation(line: 760, column: 43, scope: !1671)
!1681 = !DILocation(line: 760, column: 67, scope: !1671)
!1682 = !DILocation(line: 760, column: 4, scope: !1671)
!1683 = !DILocation(line: 761, column: 20, scope: !1671)
!1684 = !DILocation(line: 761, column: 26, scope: !1671)
!1685 = !DILocation(line: 761, column: 32, scope: !1671)
!1686 = !DILocation(line: 761, column: 37, scope: !1671)
!1687 = !DILocation(line: 761, column: 45, scope: !1671)
!1688 = !DILocation(line: 761, column: 51, scope: !1671)
!1689 = !DILocation(line: 761, column: 43, scope: !1671)
!1690 = !DILocation(line: 761, column: 4, scope: !1671)
!1691 = !DILocation(line: 765, column: 2, scope: !1611)
!1692 = !DILocation(line: 766, column: 1, scope: !1611)
!1693 = distinct !DISubprogram(name: "pbvh_iter_end", scope: !1, file: !1, line: 699, type: !1694, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1694 = !DISubroutineType(types: !1695)
!1695 = !{null, !1568}
!1696 = !DILocalVariable(name: "iter", arg: 1, scope: !1693, file: !1, line: 699, type: !1568)
!1697 = !DILocation(line: 699, column: 37, scope: !1693)
!1698 = !DILocation(line: 701, column: 6, scope: !1699)
!1699 = distinct !DILexicalBlock(scope: !1693, file: !1, line: 701, column: 6)
!1700 = !DILocation(line: 701, column: 12, scope: !1699)
!1701 = !DILocation(line: 701, column: 23, scope: !1699)
!1702 = !DILocation(line: 701, column: 6, scope: !1693)
!1703 = !DILocation(line: 702, column: 3, scope: !1699)
!1704 = !DILocation(line: 702, column: 13, scope: !1699)
!1705 = !DILocation(line: 702, column: 19, scope: !1699)
!1706 = !DILocation(line: 703, column: 1, scope: !1693)
!1707 = distinct !DISubprogram(name: "BKE_pbvh_search_callback", scope: !1, file: !1, line: 830, type: !1708, scopeLine: 833, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1708 = !DISubroutineType(types: !1709)
!1709 = !{null, !410, !1461, !137, !1710, !137}
!1710 = !DIDerivedType(tag: DW_TAG_typedef, name: "BKE_pbvh_HitCallback", file: !4, line: 58, baseType: !1711)
!1711 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1712, size: 64)
!1712 = !DISubroutineType(types: !1713)
!1713 = !{null, !419, !137}
!1714 = !DILocalVariable(name: "bvh", arg: 1, scope: !1707, file: !1, line: 830, type: !410)
!1715 = !DILocation(line: 830, column: 37, scope: !1707)
!1716 = !DILocalVariable(name: "scb", arg: 2, scope: !1707, file: !1, line: 831, type: !1461)
!1717 = !DILocation(line: 831, column: 55, scope: !1707)
!1718 = !DILocalVariable(name: "search_data", arg: 3, scope: !1707, file: !1, line: 831, type: !137)
!1719 = !DILocation(line: 831, column: 66, scope: !1707)
!1720 = !DILocalVariable(name: "hcb", arg: 4, scope: !1707, file: !1, line: 832, type: !1710)
!1721 = !DILocation(line: 832, column: 52, scope: !1707)
!1722 = !DILocalVariable(name: "hit_data", arg: 5, scope: !1707, file: !1, line: 832, type: !137)
!1723 = !DILocation(line: 832, column: 63, scope: !1707)
!1724 = !DILocalVariable(name: "iter", scope: !1707, file: !1, line: 834, type: !1478)
!1725 = !DILocation(line: 834, column: 11, scope: !1707)
!1726 = !DILocalVariable(name: "node", scope: !1707, file: !1, line: 835, type: !419)
!1727 = !DILocation(line: 835, column: 12, scope: !1707)
!1728 = !DILocation(line: 837, column: 25, scope: !1707)
!1729 = !DILocation(line: 837, column: 30, scope: !1707)
!1730 = !DILocation(line: 837, column: 35, scope: !1707)
!1731 = !DILocation(line: 837, column: 2, scope: !1707)
!1732 = !DILocation(line: 839, column: 2, scope: !1707)
!1733 = !DILocation(line: 839, column: 17, scope: !1707)
!1734 = !DILocation(line: 839, column: 15, scope: !1707)
!1735 = !DILocation(line: 840, column: 7, scope: !1736)
!1736 = distinct !DILexicalBlock(scope: !1707, file: !1, line: 840, column: 7)
!1737 = !DILocation(line: 840, column: 13, scope: !1736)
!1738 = !DILocation(line: 840, column: 18, scope: !1736)
!1739 = !DILocation(line: 840, column: 7, scope: !1707)
!1740 = !DILocation(line: 841, column: 4, scope: !1736)
!1741 = !DILocation(line: 841, column: 8, scope: !1736)
!1742 = !DILocation(line: 841, column: 14, scope: !1736)
!1743 = distinct !{!1743, !1732, !1744}
!1744 = !DILocation(line: 841, column: 22, scope: !1707)
!1745 = !DILocation(line: 843, column: 2, scope: !1707)
!1746 = !DILocation(line: 844, column: 1, scope: !1707)
!1747 = distinct !DISubprogram(name: "BKE_pbvh_node_get_tmin", scope: !1, file: !1, line: 897, type: !1748, scopeLine: 898, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1748 = !DISubroutineType(types: !1749)
!1749 = !{!133, !419}
!1750 = !DILocalVariable(name: "node", arg: 1, scope: !1747, file: !1, line: 897, type: !419)
!1751 = !DILocation(line: 897, column: 40, scope: !1747)
!1752 = !DILocation(line: 899, column: 9, scope: !1747)
!1753 = !DILocation(line: 899, column: 15, scope: !1747)
!1754 = !DILocation(line: 899, column: 2, scope: !1747)
!1755 = distinct !DISubprogram(name: "pbvh_update_BB_redraw", scope: !1, file: !1, line: 1063, type: !1756, scopeLine: 1064, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1756 = !DISubroutineType(types: !1757)
!1757 = !{null, !410, !1466, !142, !142}
!1758 = !DILocalVariable(name: "bvh", arg: 1, scope: !1755, file: !1, line: 1063, type: !410)
!1759 = !DILocation(line: 1063, column: 34, scope: !1755)
!1760 = !DILocalVariable(name: "nodes", arg: 2, scope: !1755, file: !1, line: 1063, type: !1466)
!1761 = !DILocation(line: 1063, column: 50, scope: !1755)
!1762 = !DILocalVariable(name: "totnode", arg: 3, scope: !1755, file: !1, line: 1063, type: !142)
!1763 = !DILocation(line: 1063, column: 61, scope: !1755)
!1764 = !DILocalVariable(name: "flag", arg: 4, scope: !1755, file: !1, line: 1063, type: !142)
!1765 = !DILocation(line: 1063, column: 74, scope: !1755)
!1766 = !DILocalVariable(name: "n", scope: !1755, file: !1, line: 1065, type: !142)
!1767 = !DILocation(line: 1065, column: 6, scope: !1755)
!1768 = !DILocation(line: 1071, column: 9, scope: !1769)
!1769 = distinct !DILexicalBlock(scope: !1755, file: !1, line: 1071, column: 2)
!1770 = !DILocation(line: 1071, column: 7, scope: !1769)
!1771 = !DILocation(line: 1071, column: 14, scope: !1772)
!1772 = distinct !DILexicalBlock(scope: !1769, file: !1, line: 1071, column: 2)
!1773 = !DILocation(line: 1071, column: 18, scope: !1772)
!1774 = !DILocation(line: 1071, column: 16, scope: !1772)
!1775 = !DILocation(line: 1071, column: 2, scope: !1769)
!1776 = !DILocalVariable(name: "node", scope: !1777, file: !1, line: 1072, type: !419)
!1777 = distinct !DILexicalBlock(scope: !1772, file: !1, line: 1071, column: 32)
!1778 = !DILocation(line: 1072, column: 13, scope: !1777)
!1779 = !DILocation(line: 1072, column: 20, scope: !1777)
!1780 = !DILocation(line: 1072, column: 26, scope: !1777)
!1781 = !DILocation(line: 1074, column: 8, scope: !1782)
!1782 = distinct !DILexicalBlock(scope: !1777, file: !1, line: 1074, column: 7)
!1783 = !DILocation(line: 1074, column: 13, scope: !1782)
!1784 = !DILocation(line: 1074, column: 30, scope: !1782)
!1785 = !DILocation(line: 1074, column: 34, scope: !1782)
!1786 = !DILocation(line: 1074, column: 40, scope: !1782)
!1787 = !DILocation(line: 1074, column: 45, scope: !1782)
!1788 = !DILocation(line: 1074, column: 7, scope: !1777)
!1789 = !DILocation(line: 1076, column: 19, scope: !1782)
!1790 = !DILocation(line: 1076, column: 24, scope: !1782)
!1791 = !DILocation(line: 1076, column: 4, scope: !1782)
!1792 = !DILocation(line: 1078, column: 8, scope: !1793)
!1793 = distinct !DILexicalBlock(scope: !1777, file: !1, line: 1078, column: 7)
!1794 = !DILocation(line: 1078, column: 13, scope: !1793)
!1795 = !DILocation(line: 1078, column: 38, scope: !1793)
!1796 = !DILocation(line: 1078, column: 42, scope: !1793)
!1797 = !DILocation(line: 1078, column: 48, scope: !1793)
!1798 = !DILocation(line: 1078, column: 53, scope: !1793)
!1799 = !DILocation(line: 1078, column: 7, scope: !1777)
!1800 = !DILocation(line: 1079, column: 4, scope: !1793)
!1801 = !DILocation(line: 1079, column: 10, scope: !1793)
!1802 = !DILocation(line: 1079, column: 20, scope: !1793)
!1803 = !DILocation(line: 1079, column: 26, scope: !1793)
!1804 = !DILocation(line: 1081, column: 8, scope: !1805)
!1805 = distinct !DILexicalBlock(scope: !1777, file: !1, line: 1081, column: 7)
!1806 = !DILocation(line: 1081, column: 13, scope: !1805)
!1807 = !DILocation(line: 1081, column: 34, scope: !1805)
!1808 = !DILocation(line: 1081, column: 38, scope: !1805)
!1809 = !DILocation(line: 1081, column: 44, scope: !1805)
!1810 = !DILocation(line: 1081, column: 49, scope: !1805)
!1811 = !DILocation(line: 1081, column: 7, scope: !1777)
!1812 = !DILocation(line: 1082, column: 4, scope: !1805)
!1813 = !DILocation(line: 1082, column: 10, scope: !1805)
!1814 = !DILocation(line: 1082, column: 15, scope: !1805)
!1815 = !DILocation(line: 1083, column: 2, scope: !1777)
!1816 = !DILocation(line: 1071, column: 28, scope: !1772)
!1817 = !DILocation(line: 1071, column: 2, scope: !1772)
!1818 = distinct !{!1818, !1775, !1819}
!1819 = !DILocation(line: 1083, column: 2, scope: !1769)
!1820 = !DILocation(line: 1084, column: 1, scope: !1755)
!1821 = distinct !DISubprogram(name: "update_node_vb", scope: !1, file: !1, line: 136, type: !1822, scopeLine: 137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1822 = !DISubroutineType(types: !1823)
!1823 = !{null, !410, !419}
!1824 = !DILocalVariable(name: "bvh", arg: 1, scope: !1821, file: !1, line: 136, type: !410)
!1825 = !DILocation(line: 136, column: 34, scope: !1821)
!1826 = !DILocalVariable(name: "node", arg: 2, scope: !1821, file: !1, line: 136, type: !419)
!1827 = !DILocation(line: 136, column: 49, scope: !1821)
!1828 = !DILocalVariable(name: "vb", scope: !1821, file: !1, line: 138, type: !128)
!1829 = !DILocation(line: 138, column: 5, scope: !1821)
!1830 = !DILocation(line: 140, column: 2, scope: !1821)
!1831 = !DILocation(line: 142, column: 6, scope: !1832)
!1832 = distinct !DILexicalBlock(scope: !1821, file: !1, line: 142, column: 6)
!1833 = !DILocation(line: 142, column: 12, scope: !1832)
!1834 = !DILocation(line: 142, column: 17, scope: !1832)
!1835 = !DILocation(line: 142, column: 6, scope: !1821)
!1836 = !DILocalVariable(name: "vd", scope: !1837, file: !1, line: 143, type: !1838)
!1837 = distinct !DILexicalBlock(scope: !1832, file: !1, line: 142, column: 30)
!1838 = !DIDerivedType(tag: DW_TAG_typedef, name: "PBVHVertexIter", file: !4, line: 269, baseType: !1839)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "PBVHVertexIter", file: !4, line: 231, size: 1792, elements: !1840)
!1840 = !{!1841, !1842, !1843, !1844, !1845, !1846, !1847, !1850, !1851, !1853, !1854, !1855, !1856, !1857, !1858, !1860, !1861, !1862, !1863, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1875, !1876}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1839, file: !4, line: 233, baseType: !142, size: 32)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1839, file: !4, line: 234, baseType: !142, size: 32, offset: 32)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !1839, file: !4, line: 235, baseType: !142, size: 32, offset: 64)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "gx", scope: !1839, file: !4, line: 236, baseType: !142, size: 32, offset: 96)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "gy", scope: !1839, file: !4, line: 237, baseType: !142, size: 32, offset: 128)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !1839, file: !4, line: 238, baseType: !142, size: 32, offset: 160)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "grids", scope: !1839, file: !4, line: 241, baseType: !1848, size: 64, offset: 192)
!1848 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1849, size: 64)
!1849 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !153, size: 64)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "grid", scope: !1839, file: !4, line: 242, baseType: !1849, size: 64, offset: 256)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !1839, file: !4, line: 243, baseType: !1852, size: 64, offset: 320)
!1852 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !536, size: 64)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "grid_hidden", scope: !1839, file: !4, line: 244, baseType: !570, size: 64, offset: 384)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "gh", scope: !1839, file: !4, line: 244, baseType: !124, size: 64, offset: 448)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "grid_indices", scope: !1839, file: !4, line: 245, baseType: !431, size: 64, offset: 512)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "totgrid", scope: !1839, file: !4, line: 246, baseType: !142, size: 32, offset: 576)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "gridsize", scope: !1839, file: !4, line: 247, baseType: !142, size: 32, offset: 608)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "mverts", scope: !1839, file: !4, line: 250, baseType: !1859, size: 64, offset: 640)
!1859 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !473, size: 64)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "totvert", scope: !1839, file: !4, line: 251, baseType: !142, size: 32, offset: 704)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "vert_indices", scope: !1839, file: !4, line: 252, baseType: !431, size: 64, offset: 768)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "vmask", scope: !1839, file: !4, line: 253, baseType: !141, size: 64, offset: 832)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "bm_unique_verts", scope: !1839, file: !4, line: 256, baseType: !1864, size: 192, offset: 896)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GSetIterator", file: !145, line: 183, size: 192, elements: !1865)
!1865 = !{!1866}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "_ghi", scope: !1864, file: !145, line: 184, baseType: !158, size: 192)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "bm_other_verts", scope: !1839, file: !4, line: 257, baseType: !1864, size: 192, offset: 1088)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "bm_vdata", scope: !1839, file: !4, line: 258, baseType: !904, size: 64, offset: 1280)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "cd_vert_mask_offset", scope: !1839, file: !4, line: 259, baseType: !142, size: 32, offset: 1344)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "mvert", scope: !1839, file: !4, line: 263, baseType: !1859, size: 64, offset: 1408)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "bm_vert", scope: !1839, file: !4, line: 264, baseType: !623, size: 64, offset: 1472)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "co", scope: !1839, file: !4, line: 265, baseType: !141, size: 64, offset: 1536)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1839, file: !4, line: 266, baseType: !1874, size: 64, offset: 1600)
!1874 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !156, size: 64)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fno", scope: !1839, file: !4, line: 267, baseType: !141, size: 64, offset: 1664)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "mask", scope: !1839, file: !4, line: 268, baseType: !141, size: 64, offset: 1728)
!1877 = !DILocation(line: 143, column: 18, scope: !1837)
!1878 = !DILocation(line: 145, column: 3, scope: !1837)
!1879 = !DILocation(line: 145, column: 3, scope: !1880)
!1880 = distinct !DILexicalBlock(scope: !1837, file: !1, line: 145, column: 3)
!1881 = !DILocation(line: 145, column: 3, scope: !1882)
!1882 = distinct !DILexicalBlock(scope: !1880, file: !1, line: 145, column: 3)
!1883 = !DILocation(line: 145, column: 3, scope: !1884)
!1884 = distinct !DILexicalBlock(scope: !1885, file: !1, line: 145, column: 3)
!1885 = distinct !DILexicalBlock(scope: !1882, file: !1, line: 145, column: 3)
!1886 = !DILocation(line: 145, column: 3, scope: !1885)
!1887 = !DILocation(line: 145, column: 3, scope: !1888)
!1888 = distinct !DILexicalBlock(scope: !1884, file: !1, line: 145, column: 3)
!1889 = !DILocation(line: 145, column: 3, scope: !1890)
!1890 = distinct !DILexicalBlock(scope: !1884, file: !1, line: 145, column: 3)
!1891 = !DILocation(line: 145, column: 3, scope: !1892)
!1892 = distinct !DILexicalBlock(scope: !1885, file: !1, line: 145, column: 3)
!1893 = !DILocation(line: 145, column: 3, scope: !1894)
!1894 = distinct !DILexicalBlock(scope: !1892, file: !1, line: 145, column: 3)
!1895 = !DILocation(line: 145, column: 3, scope: !1896)
!1896 = distinct !DILexicalBlock(scope: !1897, file: !1, line: 145, column: 3)
!1897 = distinct !DILexicalBlock(scope: !1894, file: !1, line: 145, column: 3)
!1898 = !DILocation(line: 145, column: 3, scope: !1899)
!1899 = distinct !DILexicalBlock(scope: !1896, file: !1, line: 145, column: 3)
!1900 = !DILocation(line: 145, column: 3, scope: !1901)
!1901 = distinct !DILexicalBlock(scope: !1902, file: !1, line: 145, column: 3)
!1902 = distinct !DILexicalBlock(scope: !1899, file: !1, line: 145, column: 3)
!1903 = !DILocation(line: 145, column: 3, scope: !1902)
!1904 = !DILocation(line: 145, column: 3, scope: !1905)
!1905 = distinct !DILexicalBlock(scope: !1901, file: !1, line: 145, column: 3)
!1906 = !DILocation(line: 145, column: 3, scope: !1907)
!1907 = distinct !DILexicalBlock(scope: !1905, file: !1, line: 145, column: 3)
!1908 = !DILocation(line: 145, column: 3, scope: !1909)
!1909 = distinct !DILexicalBlock(scope: !1910, file: !1, line: 145, column: 3)
!1910 = distinct !DILexicalBlock(scope: !1907, file: !1, line: 145, column: 3)
!1911 = !DILocation(line: 145, column: 3, scope: !1910)
!1912 = !DILocation(line: 145, column: 3, scope: !1913)
!1913 = distinct !DILexicalBlock(scope: !1901, file: !1, line: 145, column: 3)
!1914 = !DILocation(line: 145, column: 3, scope: !1915)
!1915 = distinct !DILexicalBlock(scope: !1913, file: !1, line: 145, column: 3)
!1916 = !DILocation(line: 145, column: 3, scope: !1917)
!1917 = distinct !DILexicalBlock(scope: !1915, file: !1, line: 145, column: 3)
!1918 = !DILocation(line: 145, column: 3, scope: !1919)
!1919 = distinct !DILexicalBlock(scope: !1920, file: !1, line: 145, column: 3)
!1920 = distinct !DILexicalBlock(scope: !1913, file: !1, line: 145, column: 3)
!1921 = !DILocation(line: 145, column: 3, scope: !1920)
!1922 = !DILocation(line: 145, column: 3, scope: !1923)
!1923 = distinct !DILexicalBlock(scope: !1919, file: !1, line: 145, column: 3)
!1924 = !DILocation(line: 145, column: 3, scope: !1925)
!1925 = distinct !DILexicalBlock(scope: !1919, file: !1, line: 145, column: 3)
!1926 = !DILocation(line: 147, column: 22, scope: !1927)
!1927 = distinct !DILexicalBlock(scope: !1902, file: !1, line: 146, column: 3)
!1928 = !DILocation(line: 147, column: 4, scope: !1927)
!1929 = !DILocation(line: 149, column: 3, scope: !1902)
!1930 = distinct !{!1930, !1895, !1931}
!1931 = !DILocation(line: 149, column: 3, scope: !1896)
!1932 = !DILocation(line: 149, column: 3, scope: !1897)
!1933 = distinct !{!1933, !1891, !1934}
!1934 = !DILocation(line: 149, column: 3, scope: !1892)
!1935 = !DILocation(line: 149, column: 3, scope: !1885)
!1936 = distinct !{!1936, !1879, !1937}
!1937 = !DILocation(line: 149, column: 3, scope: !1880)
!1938 = !DILocation(line: 150, column: 2, scope: !1837)
!1939 = !DILocation(line: 153, column: 22, scope: !1940)
!1940 = distinct !DILexicalBlock(scope: !1832, file: !1, line: 151, column: 7)
!1941 = !DILocation(line: 153, column: 27, scope: !1940)
!1942 = !DILocation(line: 153, column: 33, scope: !1940)
!1943 = !DILocation(line: 153, column: 39, scope: !1940)
!1944 = !DILocation(line: 153, column: 56, scope: !1940)
!1945 = !DILocation(line: 152, column: 3, scope: !1940)
!1946 = !DILocation(line: 155, column: 22, scope: !1940)
!1947 = !DILocation(line: 155, column: 27, scope: !1940)
!1948 = !DILocation(line: 155, column: 33, scope: !1940)
!1949 = !DILocation(line: 155, column: 39, scope: !1940)
!1950 = !DILocation(line: 155, column: 55, scope: !1940)
!1951 = !DILocation(line: 155, column: 60, scope: !1940)
!1952 = !DILocation(line: 154, column: 3, scope: !1940)
!1953 = !DILocation(line: 158, column: 2, scope: !1821)
!1954 = !DILocation(line: 158, column: 8, scope: !1821)
!1955 = !DILocation(line: 158, column: 13, scope: !1821)
!1956 = !DILocation(line: 159, column: 1, scope: !1821)
!1957 = distinct !DISubprogram(name: "BKE_pbvh_update", scope: !1, file: !1, line: 1206, type: !1958, scopeLine: 1207, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!1958 = !DISubroutineType(types: !1959)
!1959 = !{null, !410, !142, !452}
!1960 = !DILocalVariable(name: "bvh", arg: 1, scope: !1957, file: !1, line: 1206, type: !410)
!1961 = !DILocation(line: 1206, column: 28, scope: !1957)
!1962 = !DILocalVariable(name: "flag", arg: 2, scope: !1957, file: !1, line: 1206, type: !142)
!1963 = !DILocation(line: 1206, column: 37, scope: !1957)
!1964 = !DILocalVariable(name: "face_nors", arg: 3, scope: !1957, file: !1, line: 1206, type: !452)
!1965 = !DILocation(line: 1206, column: 51, scope: !1957)
!1966 = !DILocalVariable(name: "nodes", scope: !1957, file: !1, line: 1208, type: !1466)
!1967 = !DILocation(line: 1208, column: 13, scope: !1957)
!1968 = !DILocalVariable(name: "totnode", scope: !1957, file: !1, line: 1209, type: !142)
!1969 = !DILocation(line: 1209, column: 6, scope: !1957)
!1970 = !DILocation(line: 1211, column: 7, scope: !1971)
!1971 = distinct !DILexicalBlock(scope: !1957, file: !1, line: 1211, column: 6)
!1972 = !DILocation(line: 1211, column: 12, scope: !1971)
!1973 = !DILocation(line: 1211, column: 6, scope: !1957)
!1974 = !DILocation(line: 1212, column: 3, scope: !1971)
!1975 = !DILocation(line: 1214, column: 25, scope: !1957)
!1976 = !DILocation(line: 1214, column: 48, scope: !1957)
!1977 = !DILocation(line: 1214, column: 2, scope: !1957)
!1978 = !DILocation(line: 1217, column: 6, scope: !1979)
!1979 = distinct !DILexicalBlock(scope: !1957, file: !1, line: 1217, column: 6)
!1980 = !DILocation(line: 1217, column: 11, scope: !1979)
!1981 = !DILocation(line: 1217, column: 6, scope: !1957)
!1982 = !DILocation(line: 1218, column: 23, scope: !1979)
!1983 = !DILocation(line: 1218, column: 28, scope: !1979)
!1984 = !DILocation(line: 1218, column: 35, scope: !1979)
!1985 = !DILocation(line: 1218, column: 44, scope: !1979)
!1986 = !DILocation(line: 1218, column: 3, scope: !1979)
!1987 = !DILocation(line: 1220, column: 6, scope: !1988)
!1988 = distinct !DILexicalBlock(scope: !1957, file: !1, line: 1220, column: 6)
!1989 = !DILocation(line: 1220, column: 11, scope: !1988)
!1990 = !DILocation(line: 1220, column: 6, scope: !1957)
!1991 = !DILocation(line: 1221, column: 25, scope: !1988)
!1992 = !DILocation(line: 1221, column: 30, scope: !1988)
!1993 = !DILocation(line: 1221, column: 37, scope: !1988)
!1994 = !DILocation(line: 1221, column: 46, scope: !1988)
!1995 = !DILocation(line: 1221, column: 3, scope: !1988)
!1996 = !DILocation(line: 1223, column: 6, scope: !1997)
!1997 = distinct !DILexicalBlock(scope: !1957, file: !1, line: 1223, column: 6)
!1998 = !DILocation(line: 1223, column: 11, scope: !1997)
!1999 = !DILocation(line: 1223, column: 6, scope: !1957)
!2000 = !DILocation(line: 1224, column: 17, scope: !1997)
!2001 = !DILocation(line: 1224, column: 22, scope: !1997)
!2002 = !DILocation(line: 1224, column: 27, scope: !1997)
!2003 = !DILocation(line: 1224, column: 34, scope: !1997)
!2004 = !DILocation(line: 1224, column: 3, scope: !1997)
!2005 = !DILocation(line: 1226, column: 6, scope: !2006)
!2006 = distinct !DILexicalBlock(scope: !1957, file: !1, line: 1226, column: 6)
!2007 = !DILocation(line: 1226, column: 6, scope: !1957)
!2008 = !DILocation(line: 1226, column: 13, scope: !2006)
!2009 = !DILocation(line: 1226, column: 23, scope: !2006)
!2010 = !DILocation(line: 1227, column: 1, scope: !1957)
!2011 = distinct !DISubprogram(name: "update_search_cb", scope: !1, file: !1, line: 939, type: !1463, scopeLine: 940, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2012 = !DILocalVariable(name: "node", arg: 1, scope: !2011, file: !1, line: 939, type: !419)
!2013 = !DILocation(line: 939, column: 40, scope: !2011)
!2014 = !DILocalVariable(name: "data_v", arg: 2, scope: !2011, file: !1, line: 939, type: !137)
!2015 = !DILocation(line: 939, column: 52, scope: !2011)
!2016 = !DILocalVariable(name: "flag", scope: !2011, file: !1, line: 941, type: !142)
!2017 = !DILocation(line: 941, column: 6, scope: !2011)
!2018 = !DILocation(line: 941, column: 13, scope: !2011)
!2019 = !DILocation(line: 943, column: 6, scope: !2020)
!2020 = distinct !DILexicalBlock(scope: !2011, file: !1, line: 943, column: 6)
!2021 = !DILocation(line: 943, column: 12, scope: !2020)
!2022 = !DILocation(line: 943, column: 17, scope: !2020)
!2023 = !DILocation(line: 943, column: 6, scope: !2011)
!2024 = !DILocation(line: 944, column: 11, scope: !2020)
!2025 = !DILocation(line: 944, column: 17, scope: !2020)
!2026 = !DILocation(line: 944, column: 24, scope: !2020)
!2027 = !DILocation(line: 944, column: 22, scope: !2020)
!2028 = !DILocation(line: 944, column: 30, scope: !2020)
!2029 = !DILocation(line: 944, column: 10, scope: !2020)
!2030 = !DILocation(line: 944, column: 3, scope: !2020)
!2031 = !DILocation(line: 946, column: 2, scope: !2011)
!2032 = !DILocation(line: 947, column: 1, scope: !2011)
!2033 = distinct !DISubprogram(name: "pbvh_update_normals", scope: !1, file: !1, line: 949, type: !2034, scopeLine: 951, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2034 = !DISubroutineType(types: !2035)
!2035 = !{null, !410, !1466, !142, !452}
!2036 = !DILocalVariable(name: "bvh", arg: 1, scope: !2033, file: !1, line: 949, type: !410)
!2037 = !DILocation(line: 949, column: 39, scope: !2033)
!2038 = !DILocalVariable(name: "nodes", arg: 2, scope: !2033, file: !1, line: 949, type: !1466)
!2039 = !DILocation(line: 949, column: 55, scope: !2033)
!2040 = !DILocalVariable(name: "totnode", arg: 3, scope: !2033, file: !1, line: 950, type: !142)
!2041 = !DILocation(line: 950, column: 37, scope: !2033)
!2042 = !DILocalVariable(name: "face_nors", arg: 4, scope: !2033, file: !1, line: 950, type: !452)
!2043 = !DILocation(line: 950, column: 54, scope: !2033)
!2044 = !DILocalVariable(name: "vnor", scope: !2033, file: !1, line: 952, type: !452)
!2045 = !DILocation(line: 952, column: 10, scope: !2033)
!2046 = !DILocalVariable(name: "n", scope: !2033, file: !1, line: 953, type: !142)
!2047 = !DILocation(line: 953, column: 6, scope: !2033)
!2048 = !DILocation(line: 955, column: 6, scope: !2049)
!2049 = distinct !DILexicalBlock(scope: !2033, file: !1, line: 955, column: 6)
!2050 = !DILocation(line: 955, column: 11, scope: !2049)
!2051 = !DILocation(line: 955, column: 16, scope: !2049)
!2052 = !DILocation(line: 955, column: 6, scope: !2033)
!2053 = !DILocation(line: 956, column: 29, scope: !2054)
!2054 = distinct !DILexicalBlock(scope: !2049, file: !1, line: 955, column: 31)
!2055 = !DILocation(line: 956, column: 36, scope: !2054)
!2056 = !DILocation(line: 956, column: 3, scope: !2054)
!2057 = !DILocation(line: 957, column: 3, scope: !2054)
!2058 = !DILocation(line: 960, column: 6, scope: !2059)
!2059 = distinct !DILexicalBlock(scope: !2033, file: !1, line: 960, column: 6)
!2060 = !DILocation(line: 960, column: 11, scope: !2059)
!2061 = !DILocation(line: 960, column: 16, scope: !2059)
!2062 = !DILocation(line: 960, column: 6, scope: !2033)
!2063 = !DILocation(line: 961, column: 3, scope: !2059)
!2064 = !DILocation(line: 965, column: 9, scope: !2033)
!2065 = !DILocation(line: 965, column: 41, scope: !2033)
!2066 = !DILocation(line: 965, column: 46, scope: !2033)
!2067 = !DILocation(line: 965, column: 39, scope: !2033)
!2068 = !DILocation(line: 965, column: 7, scope: !2033)
!2069 = !DILocation(line: 980, column: 9, scope: !2070)
!2070 = distinct !DILexicalBlock(scope: !2033, file: !1, line: 980, column: 2)
!2071 = !DILocation(line: 980, column: 7, scope: !2070)
!2072 = !DILocation(line: 980, column: 14, scope: !2073)
!2073 = distinct !DILexicalBlock(scope: !2070, file: !1, line: 980, column: 2)
!2074 = !DILocation(line: 980, column: 18, scope: !2073)
!2075 = !DILocation(line: 980, column: 16, scope: !2073)
!2076 = !DILocation(line: 980, column: 2, scope: !2070)
!2077 = !DILocalVariable(name: "node", scope: !2078, file: !1, line: 981, type: !419)
!2078 = distinct !DILexicalBlock(scope: !2073, file: !1, line: 980, column: 32)
!2079 = !DILocation(line: 981, column: 13, scope: !2078)
!2080 = !DILocation(line: 981, column: 20, scope: !2078)
!2081 = !DILocation(line: 981, column: 26, scope: !2078)
!2082 = !DILocation(line: 983, column: 8, scope: !2083)
!2083 = distinct !DILexicalBlock(scope: !2078, file: !1, line: 983, column: 7)
!2084 = !DILocation(line: 983, column: 14, scope: !2083)
!2085 = !DILocation(line: 983, column: 19, scope: !2083)
!2086 = !DILocation(line: 983, column: 7, scope: !2078)
!2087 = !DILocalVariable(name: "i", scope: !2088, file: !1, line: 984, type: !142)
!2088 = distinct !DILexicalBlock(scope: !2083, file: !1, line: 983, column: 42)
!2089 = !DILocation(line: 984, column: 8, scope: !2088)
!2090 = !DILocalVariable(name: "j", scope: !2088, file: !1, line: 984, type: !142)
!2091 = !DILocation(line: 984, column: 11, scope: !2088)
!2092 = !DILocalVariable(name: "totface", scope: !2088, file: !1, line: 984, type: !142)
!2093 = !DILocation(line: 984, column: 14, scope: !2088)
!2094 = !DILocalVariable(name: "faces", scope: !2088, file: !1, line: 984, type: !431)
!2095 = !DILocation(line: 984, column: 24, scope: !2088)
!2096 = !DILocation(line: 986, column: 12, scope: !2088)
!2097 = !DILocation(line: 986, column: 18, scope: !2088)
!2098 = !DILocation(line: 986, column: 10, scope: !2088)
!2099 = !DILocation(line: 987, column: 14, scope: !2088)
!2100 = !DILocation(line: 987, column: 20, scope: !2088)
!2101 = !DILocation(line: 987, column: 12, scope: !2088)
!2102 = !DILocation(line: 989, column: 11, scope: !2103)
!2103 = distinct !DILexicalBlock(scope: !2088, file: !1, line: 989, column: 4)
!2104 = !DILocation(line: 989, column: 9, scope: !2103)
!2105 = !DILocation(line: 989, column: 16, scope: !2106)
!2106 = distinct !DILexicalBlock(scope: !2103, file: !1, line: 989, column: 4)
!2107 = !DILocation(line: 989, column: 20, scope: !2106)
!2108 = !DILocation(line: 989, column: 18, scope: !2106)
!2109 = !DILocation(line: 989, column: 4, scope: !2103)
!2110 = !DILocalVariable(name: "f", scope: !2111, file: !1, line: 990, type: !481)
!2111 = distinct !DILexicalBlock(scope: !2106, file: !1, line: 989, column: 34)
!2112 = !DILocation(line: 990, column: 12, scope: !2111)
!2113 = !DILocation(line: 990, column: 16, scope: !2111)
!2114 = !DILocation(line: 990, column: 21, scope: !2111)
!2115 = !DILocation(line: 990, column: 29, scope: !2111)
!2116 = !DILocation(line: 990, column: 35, scope: !2111)
!2117 = !DILocation(line: 990, column: 27, scope: !2111)
!2118 = !DILocalVariable(name: "fn", scope: !2111, file: !1, line: 991, type: !132)
!2119 = !DILocation(line: 991, column: 11, scope: !2111)
!2120 = !DILocalVariable(name: "fv", scope: !2111, file: !1, line: 992, type: !2121)
!2121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!2122 = !DILocation(line: 992, column: 19, scope: !2111)
!2123 = !DILocation(line: 992, column: 25, scope: !2111)
!2124 = !DILocation(line: 992, column: 28, scope: !2111)
!2125 = !DILocalVariable(name: "sides", scope: !2111, file: !1, line: 993, type: !142)
!2126 = !DILocation(line: 993, column: 9, scope: !2111)
!2127 = !DILocation(line: 993, column: 18, scope: !2111)
!2128 = !DILocation(line: 993, column: 21, scope: !2111)
!2129 = !DILocation(line: 993, column: 17, scope: !2111)
!2130 = !DILocation(line: 995, column: 9, scope: !2131)
!2131 = distinct !DILexicalBlock(scope: !2111, file: !1, line: 995, column: 9)
!2132 = !DILocation(line: 995, column: 12, scope: !2131)
!2133 = !DILocation(line: 995, column: 9, scope: !2111)
!2134 = !DILocation(line: 996, column: 21, scope: !2131)
!2135 = !DILocation(line: 996, column: 25, scope: !2131)
!2136 = !DILocation(line: 996, column: 30, scope: !2131)
!2137 = !DILocation(line: 996, column: 36, scope: !2131)
!2138 = !DILocation(line: 996, column: 39, scope: !2131)
!2139 = !DILocation(line: 996, column: 43, scope: !2131)
!2140 = !DILocation(line: 996, column: 47, scope: !2131)
!2141 = !DILocation(line: 996, column: 52, scope: !2131)
!2142 = !DILocation(line: 996, column: 58, scope: !2131)
!2143 = !DILocation(line: 996, column: 61, scope: !2131)
!2144 = !DILocation(line: 996, column: 65, scope: !2131)
!2145 = !DILocation(line: 997, column: 21, scope: !2131)
!2146 = !DILocation(line: 997, column: 26, scope: !2131)
!2147 = !DILocation(line: 997, column: 32, scope: !2131)
!2148 = !DILocation(line: 997, column: 35, scope: !2131)
!2149 = !DILocation(line: 997, column: 39, scope: !2131)
!2150 = !DILocation(line: 997, column: 43, scope: !2131)
!2151 = !DILocation(line: 997, column: 48, scope: !2131)
!2152 = !DILocation(line: 997, column: 54, scope: !2131)
!2153 = !DILocation(line: 997, column: 57, scope: !2131)
!2154 = !DILocation(line: 997, column: 61, scope: !2131)
!2155 = !DILocation(line: 996, column: 6, scope: !2131)
!2156 = !DILocation(line: 999, column: 20, scope: !2131)
!2157 = !DILocation(line: 999, column: 24, scope: !2131)
!2158 = !DILocation(line: 999, column: 29, scope: !2131)
!2159 = !DILocation(line: 999, column: 35, scope: !2131)
!2160 = !DILocation(line: 999, column: 38, scope: !2131)
!2161 = !DILocation(line: 999, column: 42, scope: !2131)
!2162 = !DILocation(line: 999, column: 46, scope: !2131)
!2163 = !DILocation(line: 999, column: 51, scope: !2131)
!2164 = !DILocation(line: 999, column: 57, scope: !2131)
!2165 = !DILocation(line: 999, column: 60, scope: !2131)
!2166 = !DILocation(line: 999, column: 64, scope: !2131)
!2167 = !DILocation(line: 1000, column: 20, scope: !2131)
!2168 = !DILocation(line: 1000, column: 25, scope: !2131)
!2169 = !DILocation(line: 1000, column: 31, scope: !2131)
!2170 = !DILocation(line: 1000, column: 34, scope: !2131)
!2171 = !DILocation(line: 1000, column: 38, scope: !2131)
!2172 = !DILocation(line: 999, column: 6, scope: !2131)
!2173 = !DILocation(line: 1002, column: 12, scope: !2174)
!2174 = distinct !DILexicalBlock(scope: !2111, file: !1, line: 1002, column: 5)
!2175 = !DILocation(line: 1002, column: 10, scope: !2174)
!2176 = !DILocation(line: 1002, column: 17, scope: !2177)
!2177 = distinct !DILexicalBlock(scope: !2174, file: !1, line: 1002, column: 5)
!2178 = !DILocation(line: 1002, column: 21, scope: !2177)
!2179 = !DILocation(line: 1002, column: 19, scope: !2177)
!2180 = !DILocation(line: 1002, column: 5, scope: !2174)
!2181 = !DILocalVariable(name: "v", scope: !2182, file: !1, line: 1003, type: !142)
!2182 = distinct !DILexicalBlock(scope: !2177, file: !1, line: 1002, column: 33)
!2183 = !DILocation(line: 1003, column: 10, scope: !2182)
!2184 = !DILocation(line: 1003, column: 14, scope: !2182)
!2185 = !DILocation(line: 1003, column: 17, scope: !2182)
!2186 = !DILocation(line: 1005, column: 10, scope: !2187)
!2187 = distinct !DILexicalBlock(scope: !2182, file: !1, line: 1005, column: 10)
!2188 = !DILocation(line: 1005, column: 15, scope: !2187)
!2189 = !DILocation(line: 1005, column: 21, scope: !2187)
!2190 = !DILocation(line: 1005, column: 24, scope: !2187)
!2191 = !DILocation(line: 1005, column: 29, scope: !2187)
!2192 = !DILocation(line: 1005, column: 10, scope: !2182)
!2193 = !DILocation(line: 1011, column: 21, scope: !2194)
!2194 = distinct !DILexicalBlock(scope: !2187, file: !1, line: 1005, column: 52)
!2195 = !DILocation(line: 1011, column: 7, scope: !2194)
!2196 = !DILocation(line: 1011, column: 12, scope: !2194)
!2197 = !DILocation(line: 1011, column: 18, scope: !2194)
!2198 = !DILocation(line: 1015, column: 21, scope: !2194)
!2199 = !DILocation(line: 1015, column: 7, scope: !2194)
!2200 = !DILocation(line: 1015, column: 12, scope: !2194)
!2201 = !DILocation(line: 1015, column: 18, scope: !2194)
!2202 = !DILocation(line: 1019, column: 21, scope: !2194)
!2203 = !DILocation(line: 1019, column: 7, scope: !2194)
!2204 = !DILocation(line: 1019, column: 12, scope: !2194)
!2205 = !DILocation(line: 1019, column: 18, scope: !2194)
!2206 = !DILocation(line: 1020, column: 6, scope: !2194)
!2207 = !DILocation(line: 1021, column: 5, scope: !2182)
!2208 = !DILocation(line: 1002, column: 28, scope: !2177)
!2209 = !DILocation(line: 1002, column: 5, scope: !2177)
!2210 = distinct !{!2210, !2180, !2211}
!2211 = !DILocation(line: 1021, column: 5, scope: !2174)
!2212 = !DILocation(line: 1023, column: 9, scope: !2213)
!2213 = distinct !DILexicalBlock(scope: !2111, file: !1, line: 1023, column: 9)
!2214 = !DILocation(line: 1023, column: 9, scope: !2111)
!2215 = !DILocation(line: 1024, column: 17, scope: !2213)
!2216 = !DILocation(line: 1024, column: 27, scope: !2213)
!2217 = !DILocation(line: 1024, column: 33, scope: !2213)
!2218 = !DILocation(line: 1024, column: 38, scope: !2213)
!2219 = !DILocation(line: 1024, column: 6, scope: !2213)
!2220 = !DILocation(line: 1025, column: 4, scope: !2111)
!2221 = !DILocation(line: 989, column: 29, scope: !2106)
!2222 = !DILocation(line: 989, column: 4, scope: !2106)
!2223 = distinct !{!2223, !2109, !2224}
!2224 = !DILocation(line: 1025, column: 4, scope: !2103)
!2225 = !DILocation(line: 1026, column: 3, scope: !2088)
!2226 = !DILocation(line: 1027, column: 2, scope: !2078)
!2227 = !DILocation(line: 980, column: 28, scope: !2073)
!2228 = !DILocation(line: 980, column: 2, scope: !2073)
!2229 = distinct !{!2229, !2076, !2230}
!2230 = !DILocation(line: 1027, column: 2, scope: !2070)
!2231 = !DILocation(line: 1032, column: 9, scope: !2232)
!2232 = distinct !DILexicalBlock(scope: !2033, file: !1, line: 1032, column: 2)
!2233 = !DILocation(line: 1032, column: 7, scope: !2232)
!2234 = !DILocation(line: 1032, column: 14, scope: !2235)
!2235 = distinct !DILexicalBlock(scope: !2232, file: !1, line: 1032, column: 2)
!2236 = !DILocation(line: 1032, column: 18, scope: !2235)
!2237 = !DILocation(line: 1032, column: 16, scope: !2235)
!2238 = !DILocation(line: 1032, column: 2, scope: !2232)
!2239 = !DILocalVariable(name: "node", scope: !2240, file: !1, line: 1033, type: !419)
!2240 = distinct !DILexicalBlock(scope: !2235, file: !1, line: 1032, column: 32)
!2241 = !DILocation(line: 1033, column: 13, scope: !2240)
!2242 = !DILocation(line: 1033, column: 20, scope: !2240)
!2243 = !DILocation(line: 1033, column: 26, scope: !2240)
!2244 = !DILocation(line: 1035, column: 7, scope: !2245)
!2245 = distinct !DILexicalBlock(scope: !2240, file: !1, line: 1035, column: 7)
!2246 = !DILocation(line: 1035, column: 13, scope: !2245)
!2247 = !DILocation(line: 1035, column: 18, scope: !2245)
!2248 = !DILocation(line: 1035, column: 7, scope: !2240)
!2249 = !DILocalVariable(name: "i", scope: !2250, file: !1, line: 1036, type: !142)
!2250 = distinct !DILexicalBlock(scope: !2245, file: !1, line: 1035, column: 40)
!2251 = !DILocation(line: 1036, column: 8, scope: !2250)
!2252 = !DILocalVariable(name: "verts", scope: !2250, file: !1, line: 1036, type: !431)
!2253 = !DILocation(line: 1036, column: 12, scope: !2250)
!2254 = !DILocalVariable(name: "totvert", scope: !2250, file: !1, line: 1036, type: !142)
!2255 = !DILocation(line: 1036, column: 19, scope: !2250)
!2256 = !DILocation(line: 1038, column: 12, scope: !2250)
!2257 = !DILocation(line: 1038, column: 18, scope: !2250)
!2258 = !DILocation(line: 1038, column: 10, scope: !2250)
!2259 = !DILocation(line: 1039, column: 14, scope: !2250)
!2260 = !DILocation(line: 1039, column: 20, scope: !2250)
!2261 = !DILocation(line: 1039, column: 12, scope: !2250)
!2262 = !DILocation(line: 1041, column: 11, scope: !2263)
!2263 = distinct !DILexicalBlock(scope: !2250, file: !1, line: 1041, column: 4)
!2264 = !DILocation(line: 1041, column: 9, scope: !2263)
!2265 = !DILocation(line: 1041, column: 16, scope: !2266)
!2266 = distinct !DILexicalBlock(scope: !2263, file: !1, line: 1041, column: 4)
!2267 = !DILocation(line: 1041, column: 20, scope: !2266)
!2268 = !DILocation(line: 1041, column: 18, scope: !2266)
!2269 = !DILocation(line: 1041, column: 4, scope: !2263)
!2270 = !DILocalVariable(name: "v", scope: !2271, file: !1, line: 1042, type: !971)
!2271 = distinct !DILexicalBlock(scope: !2266, file: !1, line: 1041, column: 34)
!2272 = !DILocation(line: 1042, column: 15, scope: !2271)
!2273 = !DILocation(line: 1042, column: 19, scope: !2271)
!2274 = !DILocation(line: 1042, column: 25, scope: !2271)
!2275 = !DILocalVariable(name: "mvert", scope: !2271, file: !1, line: 1043, type: !471)
!2276 = !DILocation(line: 1043, column: 12, scope: !2271)
!2277 = !DILocation(line: 1043, column: 21, scope: !2271)
!2278 = !DILocation(line: 1043, column: 26, scope: !2271)
!2279 = !DILocation(line: 1043, column: 32, scope: !2271)
!2280 = !DILocation(line: 1045, column: 9, scope: !2281)
!2281 = distinct !DILexicalBlock(scope: !2271, file: !1, line: 1045, column: 9)
!2282 = !DILocation(line: 1045, column: 16, scope: !2281)
!2283 = !DILocation(line: 1045, column: 21, scope: !2281)
!2284 = !DILocation(line: 1045, column: 9, scope: !2271)
!2285 = !DILocalVariable(name: "no", scope: !2286, file: !1, line: 1046, type: !132)
!2286 = distinct !DILexicalBlock(scope: !2281, file: !1, line: 1045, column: 44)
!2287 = !DILocation(line: 1046, column: 12, scope: !2286)
!2288 = !DILocation(line: 1048, column: 17, scope: !2286)
!2289 = !DILocation(line: 1048, column: 21, scope: !2286)
!2290 = !DILocation(line: 1048, column: 26, scope: !2286)
!2291 = !DILocation(line: 1048, column: 6, scope: !2286)
!2292 = !DILocation(line: 1049, column: 19, scope: !2286)
!2293 = !DILocation(line: 1049, column: 6, scope: !2286)
!2294 = !DILocation(line: 1050, column: 31, scope: !2286)
!2295 = !DILocation(line: 1050, column: 38, scope: !2286)
!2296 = !DILocation(line: 1050, column: 42, scope: !2286)
!2297 = !DILocation(line: 1050, column: 6, scope: !2286)
!2298 = !DILocation(line: 1052, column: 6, scope: !2286)
!2299 = !DILocation(line: 1052, column: 13, scope: !2286)
!2300 = !DILocation(line: 1052, column: 18, scope: !2286)
!2301 = !DILocation(line: 1053, column: 5, scope: !2286)
!2302 = !DILocation(line: 1054, column: 4, scope: !2271)
!2303 = !DILocation(line: 1041, column: 29, scope: !2266)
!2304 = !DILocation(line: 1041, column: 4, scope: !2266)
!2305 = distinct !{!2305, !2269, !2306}
!2306 = !DILocation(line: 1054, column: 4, scope: !2263)
!2307 = !DILocation(line: 1056, column: 4, scope: !2250)
!2308 = !DILocation(line: 1056, column: 10, scope: !2250)
!2309 = !DILocation(line: 1056, column: 15, scope: !2250)
!2310 = !DILocation(line: 1057, column: 3, scope: !2250)
!2311 = !DILocation(line: 1058, column: 2, scope: !2240)
!2312 = !DILocation(line: 1032, column: 28, scope: !2235)
!2313 = !DILocation(line: 1032, column: 2, scope: !2235)
!2314 = distinct !{!2314, !2238, !2315}
!2315 = !DILocation(line: 1058, column: 2, scope: !2232)
!2316 = !DILocation(line: 1060, column: 2, scope: !2033)
!2317 = !DILocation(line: 1060, column: 12, scope: !2033)
!2318 = !DILocation(line: 1061, column: 1, scope: !2033)
!2319 = distinct !DISubprogram(name: "pbvh_flush_bb", scope: !1, file: !1, line: 1175, type: !2320, scopeLine: 1176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2320 = !DISubroutineType(types: !2321)
!2321 = !{!142, !410, !419, !142}
!2322 = !DILocalVariable(name: "bvh", arg: 1, scope: !2319, file: !1, line: 1175, type: !410)
!2323 = !DILocation(line: 1175, column: 32, scope: !2319)
!2324 = !DILocalVariable(name: "node", arg: 2, scope: !2319, file: !1, line: 1175, type: !419)
!2325 = !DILocation(line: 1175, column: 47, scope: !2319)
!2326 = !DILocalVariable(name: "flag", arg: 3, scope: !2319, file: !1, line: 1175, type: !142)
!2327 = !DILocation(line: 1175, column: 57, scope: !2319)
!2328 = !DILocalVariable(name: "update", scope: !2319, file: !1, line: 1177, type: !142)
!2329 = !DILocation(line: 1177, column: 6, scope: !2319)
!2330 = !DILocation(line: 1180, column: 6, scope: !2331)
!2331 = distinct !DILexicalBlock(scope: !2319, file: !1, line: 1180, column: 6)
!2332 = !DILocation(line: 1180, column: 12, scope: !2331)
!2333 = !DILocation(line: 1180, column: 17, scope: !2331)
!2334 = !DILocation(line: 1180, column: 6, scope: !2319)
!2335 = !DILocation(line: 1181, column: 7, scope: !2336)
!2336 = distinct !DILexicalBlock(scope: !2337, file: !1, line: 1181, column: 7)
!2337 = distinct !DILexicalBlock(scope: !2331, file: !1, line: 1180, column: 30)
!2338 = !DILocation(line: 1181, column: 12, scope: !2336)
!2339 = !DILocation(line: 1181, column: 7, scope: !2337)
!2340 = !DILocation(line: 1182, column: 15, scope: !2341)
!2341 = distinct !DILexicalBlock(scope: !2336, file: !1, line: 1181, column: 29)
!2342 = !DILocation(line: 1182, column: 21, scope: !2341)
!2343 = !DILocation(line: 1182, column: 26, scope: !2341)
!2344 = !DILocation(line: 1182, column: 11, scope: !2341)
!2345 = !DILocation(line: 1183, column: 4, scope: !2341)
!2346 = !DILocation(line: 1183, column: 10, scope: !2341)
!2347 = !DILocation(line: 1183, column: 15, scope: !2341)
!2348 = !DILocation(line: 1184, column: 3, scope: !2341)
!2349 = !DILocation(line: 1186, column: 7, scope: !2350)
!2350 = distinct !DILexicalBlock(scope: !2337, file: !1, line: 1186, column: 7)
!2351 = !DILocation(line: 1186, column: 12, scope: !2350)
!2352 = !DILocation(line: 1186, column: 7, scope: !2337)
!2353 = !DILocation(line: 1187, column: 15, scope: !2354)
!2354 = distinct !DILexicalBlock(scope: !2350, file: !1, line: 1186, column: 37)
!2355 = !DILocation(line: 1187, column: 21, scope: !2354)
!2356 = !DILocation(line: 1187, column: 26, scope: !2354)
!2357 = !DILocation(line: 1187, column: 11, scope: !2354)
!2358 = !DILocation(line: 1188, column: 4, scope: !2354)
!2359 = !DILocation(line: 1188, column: 10, scope: !2354)
!2360 = !DILocation(line: 1188, column: 15, scope: !2354)
!2361 = !DILocation(line: 1189, column: 3, scope: !2354)
!2362 = !DILocation(line: 1191, column: 10, scope: !2337)
!2363 = !DILocation(line: 1191, column: 3, scope: !2337)
!2364 = !DILocation(line: 1194, column: 27, scope: !2365)
!2365 = distinct !DILexicalBlock(scope: !2331, file: !1, line: 1193, column: 7)
!2366 = !DILocation(line: 1194, column: 32, scope: !2365)
!2367 = !DILocation(line: 1194, column: 37, scope: !2365)
!2368 = !DILocation(line: 1194, column: 45, scope: !2365)
!2369 = !DILocation(line: 1194, column: 51, scope: !2365)
!2370 = !DILocation(line: 1194, column: 43, scope: !2365)
!2371 = !DILocation(line: 1194, column: 68, scope: !2365)
!2372 = !DILocation(line: 1194, column: 13, scope: !2365)
!2373 = !DILocation(line: 1194, column: 10, scope: !2365)
!2374 = !DILocation(line: 1195, column: 27, scope: !2365)
!2375 = !DILocation(line: 1195, column: 32, scope: !2365)
!2376 = !DILocation(line: 1195, column: 37, scope: !2365)
!2377 = !DILocation(line: 1195, column: 45, scope: !2365)
!2378 = !DILocation(line: 1195, column: 51, scope: !2365)
!2379 = !DILocation(line: 1195, column: 43, scope: !2365)
!2380 = !DILocation(line: 1195, column: 67, scope: !2365)
!2381 = !DILocation(line: 1195, column: 72, scope: !2365)
!2382 = !DILocation(line: 1195, column: 13, scope: !2365)
!2383 = !DILocation(line: 1195, column: 10, scope: !2365)
!2384 = !DILocation(line: 1197, column: 7, scope: !2385)
!2385 = distinct !DILexicalBlock(scope: !2365, file: !1, line: 1197, column: 7)
!2386 = !DILocation(line: 1197, column: 14, scope: !2385)
!2387 = !DILocation(line: 1197, column: 7, scope: !2365)
!2388 = !DILocation(line: 1198, column: 19, scope: !2385)
!2389 = !DILocation(line: 1198, column: 24, scope: !2385)
!2390 = !DILocation(line: 1198, column: 4, scope: !2385)
!2391 = !DILocation(line: 1199, column: 7, scope: !2392)
!2392 = distinct !DILexicalBlock(scope: !2365, file: !1, line: 1199, column: 7)
!2393 = !DILocation(line: 1199, column: 14, scope: !2392)
!2394 = !DILocation(line: 1199, column: 7, scope: !2365)
!2395 = !DILocation(line: 1200, column: 4, scope: !2392)
!2396 = !DILocation(line: 1200, column: 10, scope: !2392)
!2397 = !DILocation(line: 1200, column: 20, scope: !2392)
!2398 = !DILocation(line: 1200, column: 26, scope: !2392)
!2399 = !DILocation(line: 1203, column: 9, scope: !2319)
!2400 = !DILocation(line: 1203, column: 2, scope: !2319)
!2401 = !DILocation(line: 1204, column: 1, scope: !2319)
!2402 = distinct !DISubprogram(name: "BKE_pbvh_redraw_BB", scope: !1, file: !1, line: 1229, type: !2403, scopeLine: 1230, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2403 = !DISubroutineType(types: !2404)
!2404 = !{null, !410, !141, !141}
!2405 = !DILocalVariable(name: "bvh", arg: 1, scope: !2402, file: !1, line: 1229, type: !410)
!2406 = !DILocation(line: 1229, column: 31, scope: !2402)
!2407 = !DILocalVariable(name: "bb_min", arg: 2, scope: !2402, file: !1, line: 1229, type: !141)
!2408 = !DILocation(line: 1229, column: 42, scope: !2402)
!2409 = !DILocalVariable(name: "bb_max", arg: 3, scope: !2402, file: !1, line: 1229, type: !141)
!2410 = !DILocation(line: 1229, column: 59, scope: !2402)
!2411 = !DILocalVariable(name: "iter", scope: !2402, file: !1, line: 1231, type: !1478)
!2412 = !DILocation(line: 1231, column: 11, scope: !2402)
!2413 = !DILocalVariable(name: "node", scope: !2402, file: !1, line: 1232, type: !419)
!2414 = !DILocation(line: 1232, column: 12, scope: !2402)
!2415 = !DILocalVariable(name: "bb", scope: !2402, file: !1, line: 1233, type: !128)
!2416 = !DILocation(line: 1233, column: 5, scope: !2402)
!2417 = !DILocation(line: 1235, column: 2, scope: !2402)
!2418 = !DILocation(line: 1237, column: 25, scope: !2402)
!2419 = !DILocation(line: 1237, column: 2, scope: !2402)
!2420 = !DILocation(line: 1239, column: 2, scope: !2402)
!2421 = !DILocation(line: 1239, column: 17, scope: !2402)
!2422 = !DILocation(line: 1239, column: 15, scope: !2402)
!2423 = !DILocation(line: 1240, column: 7, scope: !2424)
!2424 = distinct !DILexicalBlock(scope: !2402, file: !1, line: 1240, column: 7)
!2425 = !DILocation(line: 1240, column: 13, scope: !2424)
!2426 = !DILocation(line: 1240, column: 18, scope: !2424)
!2427 = !DILocation(line: 1240, column: 7, scope: !2402)
!2428 = !DILocation(line: 1241, column: 28, scope: !2424)
!2429 = !DILocation(line: 1241, column: 34, scope: !2424)
!2430 = !DILocation(line: 1241, column: 4, scope: !2424)
!2431 = distinct !{!2431, !2420, !2432}
!2432 = !DILocation(line: 1241, column: 36, scope: !2402)
!2433 = !DILocation(line: 1243, column: 2, scope: !2402)
!2434 = !DILocation(line: 1245, column: 13, scope: !2402)
!2435 = !DILocation(line: 1245, column: 24, scope: !2402)
!2436 = !DILocation(line: 1245, column: 21, scope: !2402)
!2437 = !DILocation(line: 1245, column: 2, scope: !2402)
!2438 = !DILocation(line: 1246, column: 13, scope: !2402)
!2439 = !DILocation(line: 1246, column: 24, scope: !2402)
!2440 = !DILocation(line: 1246, column: 21, scope: !2402)
!2441 = !DILocation(line: 1246, column: 2, scope: !2402)
!2442 = !DILocation(line: 1247, column: 1, scope: !2402)
!2443 = distinct !DISubprogram(name: "copy_v3_v3", scope: !2444, file: !2444, line: 64, type: !2445, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2444 = !DIFile(filename: "blender/source/blender/blenlib/intern/math_vector_inline.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!2445 = !DISubroutineType(types: !2446)
!2446 = !{null, !141, !201}
!2447 = !DILocalVariable(name: "r", arg: 1, scope: !2443, file: !2444, line: 64, type: !141)
!2448 = !DILocation(line: 64, column: 31, scope: !2443)
!2449 = !DILocalVariable(name: "a", arg: 2, scope: !2443, file: !2444, line: 64, type: !201)
!2450 = !DILocation(line: 64, column: 49, scope: !2443)
!2451 = !DILocation(line: 66, column: 9, scope: !2443)
!2452 = !DILocation(line: 66, column: 2, scope: !2443)
!2453 = !DILocation(line: 66, column: 7, scope: !2443)
!2454 = !DILocation(line: 67, column: 9, scope: !2443)
!2455 = !DILocation(line: 67, column: 2, scope: !2443)
!2456 = !DILocation(line: 67, column: 7, scope: !2443)
!2457 = !DILocation(line: 68, column: 9, scope: !2443)
!2458 = !DILocation(line: 68, column: 2, scope: !2443)
!2459 = !DILocation(line: 68, column: 7, scope: !2443)
!2460 = !DILocation(line: 69, column: 1, scope: !2443)
!2461 = distinct !DISubprogram(name: "BKE_pbvh_get_grid_updates", scope: !1, file: !1, line: 1249, type: !2462, scopeLine: 1250, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2462 = !DISubroutineType(types: !2463)
!2463 = !{null, !410, !142, !2464, !431}
!2464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !559, size: 64)
!2465 = !DILocalVariable(name: "bvh", arg: 1, scope: !2461, file: !1, line: 1249, type: !410)
!2466 = !DILocation(line: 1249, column: 38, scope: !2461)
!2467 = !DILocalVariable(name: "clear", arg: 2, scope: !2461, file: !1, line: 1249, type: !142)
!2468 = !DILocation(line: 1249, column: 47, scope: !2461)
!2469 = !DILocalVariable(name: "r_gridfaces", arg: 3, scope: !2461, file: !1, line: 1249, type: !2464)
!2470 = !DILocation(line: 1249, column: 62, scope: !2461)
!2471 = !DILocalVariable(name: "r_totface", arg: 4, scope: !2461, file: !1, line: 1249, type: !431)
!2472 = !DILocation(line: 1249, column: 80, scope: !2461)
!2473 = !DILocalVariable(name: "iter", scope: !2461, file: !1, line: 1251, type: !1478)
!2474 = !DILocation(line: 1251, column: 11, scope: !2461)
!2475 = !DILocalVariable(name: "node", scope: !2461, file: !1, line: 1252, type: !419)
!2476 = !DILocation(line: 1252, column: 12, scope: !2461)
!2477 = !DILocalVariable(name: "gs_iter", scope: !2461, file: !1, line: 1253, type: !2478)
!2478 = !DIDerivedType(tag: DW_TAG_typedef, name: "GSetIterator", file: !145, line: 189, baseType: !1864)
!2479 = !DILocation(line: 1253, column: 15, scope: !2461)
!2480 = !DILocalVariable(name: "face_set", scope: !2461, file: !1, line: 1254, type: !454)
!2481 = !DILocation(line: 1254, column: 8, scope: !2461)
!2482 = !DILocalVariable(name: "face", scope: !2461, file: !1, line: 1255, type: !137)
!2483 = !DILocation(line: 1255, column: 8, scope: !2461)
!2484 = !DILocalVariable(name: "faces", scope: !2461, file: !1, line: 1255, type: !559)
!2485 = !DILocation(line: 1255, column: 16, scope: !2461)
!2486 = !DILocalVariable(name: "i", scope: !2461, file: !1, line: 1256, type: !5)
!2487 = !DILocation(line: 1256, column: 11, scope: !2461)
!2488 = !DILocalVariable(name: "tot", scope: !2461, file: !1, line: 1257, type: !142)
!2489 = !DILocation(line: 1257, column: 6, scope: !2461)
!2490 = !DILocation(line: 1259, column: 13, scope: !2461)
!2491 = !DILocation(line: 1259, column: 11, scope: !2461)
!2492 = !DILocation(line: 1261, column: 25, scope: !2461)
!2493 = !DILocation(line: 1261, column: 2, scope: !2461)
!2494 = !DILocation(line: 1263, column: 2, scope: !2461)
!2495 = !DILocation(line: 1263, column: 17, scope: !2461)
!2496 = !DILocation(line: 1263, column: 15, scope: !2461)
!2497 = !DILocation(line: 1264, column: 7, scope: !2498)
!2498 = distinct !DILexicalBlock(scope: !2499, file: !1, line: 1264, column: 7)
!2499 = distinct !DILexicalBlock(scope: !2461, file: !1, line: 1263, column: 41)
!2500 = !DILocation(line: 1264, column: 13, scope: !2498)
!2501 = !DILocation(line: 1264, column: 18, scope: !2498)
!2502 = !DILocation(line: 1264, column: 7, scope: !2499)
!2503 = !DILocation(line: 1265, column: 11, scope: !2504)
!2504 = distinct !DILexicalBlock(scope: !2505, file: !1, line: 1265, column: 4)
!2505 = distinct !DILexicalBlock(scope: !2498, file: !1, line: 1264, column: 40)
!2506 = !DILocation(line: 1265, column: 9, scope: !2504)
!2507 = !DILocation(line: 1265, column: 16, scope: !2508)
!2508 = distinct !DILexicalBlock(scope: !2504, file: !1, line: 1265, column: 4)
!2509 = !DILocation(line: 1265, column: 20, scope: !2508)
!2510 = !DILocation(line: 1265, column: 26, scope: !2508)
!2511 = !DILocation(line: 1265, column: 18, scope: !2508)
!2512 = !DILocation(line: 1265, column: 4, scope: !2504)
!2513 = !DILocation(line: 1266, column: 12, scope: !2514)
!2514 = distinct !DILexicalBlock(scope: !2508, file: !1, line: 1265, column: 40)
!2515 = !DILocation(line: 1266, column: 17, scope: !2514)
!2516 = !DILocation(line: 1266, column: 27, scope: !2514)
!2517 = !DILocation(line: 1266, column: 33, scope: !2514)
!2518 = !DILocation(line: 1266, column: 46, scope: !2514)
!2519 = !DILocation(line: 1266, column: 10, scope: !2514)
!2520 = !DILocation(line: 1267, column: 26, scope: !2521)
!2521 = distinct !DILexicalBlock(scope: !2514, file: !1, line: 1267, column: 9)
!2522 = !DILocation(line: 1267, column: 36, scope: !2521)
!2523 = !DILocation(line: 1267, column: 10, scope: !2521)
!2524 = !DILocation(line: 1267, column: 9, scope: !2514)
!2525 = !DILocation(line: 1268, column: 22, scope: !2521)
!2526 = !DILocation(line: 1268, column: 32, scope: !2521)
!2527 = !DILocation(line: 1268, column: 6, scope: !2521)
!2528 = !DILocation(line: 1269, column: 4, scope: !2514)
!2529 = !DILocation(line: 1265, column: 35, scope: !2508)
!2530 = !DILocation(line: 1265, column: 4, scope: !2508)
!2531 = distinct !{!2531, !2512, !2532}
!2532 = !DILocation(line: 1269, column: 4, scope: !2504)
!2533 = !DILocation(line: 1271, column: 8, scope: !2534)
!2534 = distinct !DILexicalBlock(scope: !2505, file: !1, line: 1271, column: 8)
!2535 = !DILocation(line: 1271, column: 8, scope: !2505)
!2536 = !DILocation(line: 1272, column: 5, scope: !2534)
!2537 = !DILocation(line: 1272, column: 11, scope: !2534)
!2538 = !DILocation(line: 1272, column: 16, scope: !2534)
!2539 = !DILocation(line: 1273, column: 3, scope: !2505)
!2540 = distinct !{!2540, !2494, !2541}
!2541 = !DILocation(line: 1274, column: 2, scope: !2461)
!2542 = !DILocation(line: 1276, column: 2, scope: !2461)
!2543 = !DILocation(line: 1278, column: 22, scope: !2461)
!2544 = !DILocation(line: 1278, column: 8, scope: !2461)
!2545 = !DILocation(line: 1278, column: 6, scope: !2461)
!2546 = !DILocation(line: 1279, column: 6, scope: !2547)
!2547 = distinct !DILexicalBlock(scope: !2461, file: !1, line: 1279, column: 6)
!2548 = !DILocation(line: 1279, column: 10, scope: !2547)
!2549 = !DILocation(line: 1279, column: 6, scope: !2461)
!2550 = !DILocation(line: 1280, column: 4, scope: !2551)
!2551 = distinct !DILexicalBlock(scope: !2547, file: !1, line: 1279, column: 16)
!2552 = !DILocation(line: 1280, column: 14, scope: !2551)
!2553 = !DILocation(line: 1281, column: 4, scope: !2551)
!2554 = !DILocation(line: 1281, column: 16, scope: !2551)
!2555 = !DILocation(line: 1282, column: 17, scope: !2551)
!2556 = !DILocation(line: 1282, column: 3, scope: !2551)
!2557 = !DILocation(line: 1283, column: 3, scope: !2551)
!2558 = !DILocation(line: 1286, column: 10, scope: !2461)
!2559 = !DILocation(line: 1286, column: 39, scope: !2461)
!2560 = !DILocation(line: 1286, column: 37, scope: !2461)
!2561 = !DILocation(line: 1286, column: 8, scope: !2461)
!2562 = !DILocation(line: 1288, column: 2, scope: !2563)
!2563 = distinct !DILexicalBlock(scope: !2461, file: !1, line: 1288, column: 2)
!2564 = !DILocation(line: 1288, column: 2, scope: !2565)
!2565 = distinct !DILexicalBlock(scope: !2563, file: !1, line: 1288, column: 2)
!2566 = !DILocation(line: 1289, column: 14, scope: !2567)
!2567 = distinct !DILexicalBlock(scope: !2565, file: !1, line: 1288, column: 41)
!2568 = !DILocation(line: 1289, column: 3, scope: !2567)
!2569 = !DILocation(line: 1289, column: 9, scope: !2567)
!2570 = !DILocation(line: 1289, column: 12, scope: !2567)
!2571 = !DILocation(line: 1290, column: 2, scope: !2567)
!2572 = distinct !{!2572, !2562, !2573}
!2573 = !DILocation(line: 1290, column: 2, scope: !2563)
!2574 = !DILocation(line: 1292, column: 16, scope: !2461)
!2575 = !DILocation(line: 1292, column: 2, scope: !2461)
!2576 = !DILocation(line: 1294, column: 15, scope: !2461)
!2577 = !DILocation(line: 1294, column: 3, scope: !2461)
!2578 = !DILocation(line: 1294, column: 13, scope: !2461)
!2579 = !DILocation(line: 1295, column: 17, scope: !2461)
!2580 = !DILocation(line: 1295, column: 3, scope: !2461)
!2581 = !DILocation(line: 1295, column: 15, scope: !2461)
!2582 = !DILocation(line: 1296, column: 1, scope: !2461)
!2583 = distinct !DISubprogram(name: "BLI_gsetIterator_init", scope: !145, file: !145, line: 216, type: !2584, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2584 = !DISubroutineType(types: !2585)
!2585 = !{null, !2586, !454}
!2586 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2478, size: 64)
!2587 = !DILocalVariable(name: "gsi", arg: 1, scope: !2583, file: !145, line: 216, type: !2586)
!2588 = !DILocation(line: 216, column: 53, scope: !2583)
!2589 = !DILocalVariable(name: "gs", arg: 2, scope: !2583, file: !145, line: 216, type: !454)
!2590 = !DILocation(line: 216, column: 64, scope: !2583)
!2591 = !DILocation(line: 216, column: 110, scope: !2583)
!2592 = !DILocation(line: 216, column: 93, scope: !2583)
!2593 = !DILocation(line: 216, column: 124, scope: !2583)
!2594 = !DILocation(line: 216, column: 115, scope: !2583)
!2595 = !DILocation(line: 216, column: 70, scope: !2583)
!2596 = !DILocation(line: 216, column: 129, scope: !2583)
!2597 = distinct !DISubprogram(name: "BLI_gsetIterator_done", scope: !145, file: !145, line: 220, type: !2598, scopeLine: 220, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2598 = !DISubroutineType(types: !2599)
!2599 = !{!573, !2586}
!2600 = !DILocalVariable(name: "gsi", arg: 1, scope: !2597, file: !145, line: 220, type: !2586)
!2601 = !DILocation(line: 220, column: 53, scope: !2597)
!2602 = !DILocation(line: 220, column: 107, scope: !2597)
!2603 = !DILocation(line: 220, column: 90, scope: !2597)
!2604 = !DILocation(line: 220, column: 67, scope: !2597)
!2605 = !DILocation(line: 220, column: 60, scope: !2597)
!2606 = distinct !DISubprogram(name: "BLI_gsetIterator_getKey", scope: !145, file: !145, line: 218, type: !2607, scopeLine: 218, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2607 = !DISubroutineType(types: !2608)
!2608 = !{!137, !2586}
!2609 = !DILocalVariable(name: "gsi", arg: 1, scope: !2606, file: !145, line: 218, type: !2586)
!2610 = !DILocation(line: 218, column: 56, scope: !2606)
!2611 = !DILocation(line: 218, column: 112, scope: !2606)
!2612 = !DILocation(line: 218, column: 95, scope: !2606)
!2613 = !DILocation(line: 218, column: 70, scope: !2606)
!2614 = !DILocation(line: 218, column: 63, scope: !2606)
!2615 = distinct !DISubprogram(name: "BLI_gsetIterator_step", scope: !145, file: !145, line: 219, type: !2616, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2616 = !DISubroutineType(types: !2617)
!2617 = !{null, !2586}
!2618 = !DILocalVariable(name: "gsi", arg: 1, scope: !2615, file: !145, line: 219, type: !2586)
!2619 = !DILocation(line: 219, column: 53, scope: !2615)
!2620 = !DILocation(line: 219, column: 100, scope: !2615)
!2621 = !DILocation(line: 219, column: 83, scope: !2615)
!2622 = !DILocation(line: 219, column: 60, scope: !2615)
!2623 = !DILocation(line: 219, column: 106, scope: !2615)
!2624 = distinct !DISubprogram(name: "BKE_pbvh_type", scope: !1, file: !1, line: 1300, type: !2625, scopeLine: 1301, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2625 = !DISubroutineType(types: !2626)
!2626 = !{!415, !2627}
!2627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2628, size: 64)
!2628 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !411)
!2629 = !DILocalVariable(name: "bvh", arg: 1, scope: !2624, file: !1, line: 1300, type: !2627)
!2630 = !DILocation(line: 1300, column: 36, scope: !2624)
!2631 = !DILocation(line: 1302, column: 9, scope: !2624)
!2632 = !DILocation(line: 1302, column: 14, scope: !2624)
!2633 = !DILocation(line: 1302, column: 2, scope: !2624)
!2634 = distinct !DISubprogram(name: "BKE_pbvh_bounding_box", scope: !1, file: !1, line: 1305, type: !2635, scopeLine: 1306, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2635 = !DISubroutineType(types: !2636)
!2636 = !{null, !2627, !141, !141}
!2637 = !DILocalVariable(name: "bvh", arg: 1, scope: !2634, file: !1, line: 1305, type: !2627)
!2638 = !DILocation(line: 1305, column: 40, scope: !2634)
!2639 = !DILocalVariable(name: "min", arg: 2, scope: !2634, file: !1, line: 1305, type: !141)
!2640 = !DILocation(line: 1305, column: 51, scope: !2634)
!2641 = !DILocalVariable(name: "max", arg: 3, scope: !2634, file: !1, line: 1305, type: !141)
!2642 = !DILocation(line: 1305, column: 65, scope: !2634)
!2643 = !DILocation(line: 1307, column: 6, scope: !2644)
!2644 = distinct !DILexicalBlock(scope: !2634, file: !1, line: 1307, column: 6)
!2645 = !DILocation(line: 1307, column: 11, scope: !2644)
!2646 = !DILocation(line: 1307, column: 6, scope: !2634)
!2647 = !DILocalVariable(name: "bb", scope: !2648, file: !1, line: 1308, type: !318)
!2648 = distinct !DILexicalBlock(scope: !2644, file: !1, line: 1307, column: 20)
!2649 = !DILocation(line: 1308, column: 13, scope: !2648)
!2650 = !DILocation(line: 1308, column: 19, scope: !2648)
!2651 = !DILocation(line: 1308, column: 24, scope: !2648)
!2652 = !DILocation(line: 1308, column: 33, scope: !2648)
!2653 = !DILocation(line: 1309, column: 14, scope: !2648)
!2654 = !DILocation(line: 1309, column: 19, scope: !2648)
!2655 = !DILocation(line: 1309, column: 23, scope: !2648)
!2656 = !DILocation(line: 1309, column: 3, scope: !2648)
!2657 = !DILocation(line: 1310, column: 14, scope: !2648)
!2658 = !DILocation(line: 1310, column: 19, scope: !2648)
!2659 = !DILocation(line: 1310, column: 23, scope: !2648)
!2660 = !DILocation(line: 1310, column: 3, scope: !2648)
!2661 = !DILocation(line: 1311, column: 2, scope: !2648)
!2662 = !DILocation(line: 1313, column: 11, scope: !2663)
!2663 = distinct !DILexicalBlock(scope: !2644, file: !1, line: 1312, column: 7)
!2664 = !DILocation(line: 1313, column: 3, scope: !2663)
!2665 = !DILocation(line: 1314, column: 11, scope: !2663)
!2666 = !DILocation(line: 1314, column: 3, scope: !2663)
!2667 = !DILocation(line: 1316, column: 1, scope: !2634)
!2668 = distinct !DISubprogram(name: "zero_v3", scope: !2444, file: !2444, line: 43, type: !2669, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2669 = !DISubroutineType(types: !2670)
!2670 = !{null, !141}
!2671 = !DILocalVariable(name: "r", arg: 1, scope: !2668, file: !2444, line: 43, type: !141)
!2672 = !DILocation(line: 43, column: 28, scope: !2668)
!2673 = !DILocation(line: 45, column: 2, scope: !2668)
!2674 = !DILocation(line: 45, column: 7, scope: !2668)
!2675 = !DILocation(line: 46, column: 2, scope: !2668)
!2676 = !DILocation(line: 46, column: 7, scope: !2668)
!2677 = !DILocation(line: 47, column: 2, scope: !2668)
!2678 = !DILocation(line: 47, column: 7, scope: !2668)
!2679 = !DILocation(line: 48, column: 1, scope: !2668)
!2680 = distinct !DISubprogram(name: "BKE_pbvh_grid_hidden", scope: !1, file: !1, line: 1318, type: !2681, scopeLine: 1319, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2681 = !DISubroutineType(types: !2682)
!2682 = !{!2683, !2627}
!2683 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2121, size: 64)
!2684 = !DILocalVariable(name: "bvh", arg: 1, scope: !2680, file: !1, line: 1318, type: !2627)
!2685 = !DILocation(line: 1318, column: 47, scope: !2680)
!2686 = !DILocation(line: 1321, column: 9, scope: !2680)
!2687 = !DILocation(line: 1321, column: 14, scope: !2680)
!2688 = !DILocation(line: 1321, column: 2, scope: !2680)
!2689 = distinct !DISubprogram(name: "BKE_pbvh_get_grid_key", scope: !1, file: !1, line: 1324, type: !2690, scopeLine: 1325, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2690 = !DISubroutineType(types: !2691)
!2691 = !{null, !2627, !1121}
!2692 = !DILocalVariable(name: "bvh", arg: 1, scope: !2689, file: !1, line: 1324, type: !2627)
!2693 = !DILocation(line: 1324, column: 40, scope: !2689)
!2694 = !DILocalVariable(name: "key", arg: 2, scope: !2689, file: !1, line: 1324, type: !1121)
!2695 = !DILocation(line: 1324, column: 53, scope: !2689)
!2696 = !DILocation(line: 1327, column: 3, scope: !2689)
!2697 = !DILocation(line: 1327, column: 9, scope: !2689)
!2698 = !DILocation(line: 1327, column: 14, scope: !2689)
!2699 = !DILocation(line: 1328, column: 1, scope: !2689)
!2700 = distinct !DISubprogram(name: "BKE_pbvh_get_bmesh", scope: !1, file: !1, line: 1330, type: !2701, scopeLine: 1331, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2701 = !DISubroutineType(types: !2702)
!2702 = !{!2703, !410}
!2703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !579, size: 64)
!2704 = !DILocalVariable(name: "bvh", arg: 1, scope: !2700, file: !1, line: 1330, type: !410)
!2705 = !DILocation(line: 1330, column: 33, scope: !2700)
!2706 = !DILocation(line: 1333, column: 9, scope: !2700)
!2707 = !DILocation(line: 1333, column: 14, scope: !2700)
!2708 = !DILocation(line: 1333, column: 2, scope: !2700)
!2709 = distinct !DISubprogram(name: "BKE_pbvh_node_mark_update", scope: !1, file: !1, line: 1338, type: !1418, scopeLine: 1339, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2710 = !DILocalVariable(name: "node", arg: 1, scope: !2709, file: !1, line: 1338, type: !419)
!2711 = !DILocation(line: 1338, column: 42, scope: !2709)
!2712 = !DILocation(line: 1340, column: 2, scope: !2709)
!2713 = !DILocation(line: 1340, column: 8, scope: !2709)
!2714 = !DILocation(line: 1340, column: 13, scope: !2709)
!2715 = !DILocation(line: 1341, column: 1, scope: !2709)
!2716 = distinct !DISubprogram(name: "BKE_pbvh_node_mark_rebuild_draw", scope: !1, file: !1, line: 1343, type: !1418, scopeLine: 1344, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2717 = !DILocalVariable(name: "node", arg: 1, scope: !2716, file: !1, line: 1343, type: !419)
!2718 = !DILocation(line: 1343, column: 48, scope: !2716)
!2719 = !DILocation(line: 1345, column: 2, scope: !2716)
!2720 = !DILocation(line: 1345, column: 8, scope: !2716)
!2721 = !DILocation(line: 1345, column: 13, scope: !2716)
!2722 = !DILocation(line: 1346, column: 1, scope: !2716)
!2723 = distinct !DISubprogram(name: "BKE_pbvh_node_mark_redraw", scope: !1, file: !1, line: 1348, type: !1418, scopeLine: 1349, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2724 = !DILocalVariable(name: "node", arg: 1, scope: !2723, file: !1, line: 1348, type: !419)
!2725 = !DILocation(line: 1348, column: 42, scope: !2723)
!2726 = !DILocation(line: 1350, column: 2, scope: !2723)
!2727 = !DILocation(line: 1350, column: 8, scope: !2723)
!2728 = !DILocation(line: 1350, column: 13, scope: !2723)
!2729 = !DILocation(line: 1351, column: 1, scope: !2723)
!2730 = distinct !DISubprogram(name: "BKE_pbvh_node_mark_normals_update", scope: !1, file: !1, line: 1353, type: !1418, scopeLine: 1354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2731 = !DILocalVariable(name: "node", arg: 1, scope: !2730, file: !1, line: 1353, type: !419)
!2732 = !DILocation(line: 1353, column: 50, scope: !2730)
!2733 = !DILocation(line: 1355, column: 2, scope: !2730)
!2734 = !DILocation(line: 1355, column: 8, scope: !2730)
!2735 = !DILocation(line: 1355, column: 13, scope: !2730)
!2736 = !DILocation(line: 1356, column: 1, scope: !2730)
!2737 = distinct !DISubprogram(name: "BKE_pbvh_node_fully_hidden_set", scope: !1, file: !1, line: 1359, type: !2738, scopeLine: 1360, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2738 = !DISubroutineType(types: !2739)
!2739 = !{null, !419, !142}
!2740 = !DILocalVariable(name: "node", arg: 1, scope: !2737, file: !1, line: 1359, type: !419)
!2741 = !DILocation(line: 1359, column: 47, scope: !2737)
!2742 = !DILocalVariable(name: "fully_hidden", arg: 2, scope: !2737, file: !1, line: 1359, type: !142)
!2743 = !DILocation(line: 1359, column: 57, scope: !2737)
!2744 = !DILocation(line: 1363, column: 6, scope: !2745)
!2745 = distinct !DILexicalBlock(scope: !2737, file: !1, line: 1363, column: 6)
!2746 = !DILocation(line: 1363, column: 6, scope: !2737)
!2747 = !DILocation(line: 1364, column: 3, scope: !2745)
!2748 = !DILocation(line: 1364, column: 9, scope: !2745)
!2749 = !DILocation(line: 1364, column: 14, scope: !2745)
!2750 = !DILocation(line: 1366, column: 3, scope: !2745)
!2751 = !DILocation(line: 1366, column: 9, scope: !2745)
!2752 = !DILocation(line: 1366, column: 14, scope: !2745)
!2753 = !DILocation(line: 1367, column: 1, scope: !2737)
!2754 = distinct !DISubprogram(name: "BKE_pbvh_node_get_verts", scope: !1, file: !1, line: 1369, type: !2755, scopeLine: 1370, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2755 = !DISubroutineType(types: !2756)
!2756 = !{null, !410, !419, !2757, !2758}
!2757 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !431, size: 64)
!2758 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !471, size: 64)
!2759 = !DILocalVariable(name: "bvh", arg: 1, scope: !2754, file: !1, line: 1369, type: !410)
!2760 = !DILocation(line: 1369, column: 36, scope: !2754)
!2761 = !DILocalVariable(name: "node", arg: 2, scope: !2754, file: !1, line: 1369, type: !419)
!2762 = !DILocation(line: 1369, column: 51, scope: !2754)
!2763 = !DILocalVariable(name: "vert_indices", arg: 3, scope: !2754, file: !1, line: 1369, type: !2757)
!2764 = !DILocation(line: 1369, column: 63, scope: !2754)
!2765 = !DILocalVariable(name: "verts", arg: 4, scope: !2754, file: !1, line: 1369, type: !2758)
!2766 = !DILocation(line: 1369, column: 85, scope: !2754)
!2767 = !DILocation(line: 1371, column: 6, scope: !2768)
!2768 = distinct !DILexicalBlock(scope: !2754, file: !1, line: 1371, column: 6)
!2769 = !DILocation(line: 1371, column: 6, scope: !2754)
!2770 = !DILocation(line: 1371, column: 36, scope: !2768)
!2771 = !DILocation(line: 1371, column: 42, scope: !2768)
!2772 = !DILocation(line: 1371, column: 21, scope: !2768)
!2773 = !DILocation(line: 1371, column: 34, scope: !2768)
!2774 = !DILocation(line: 1371, column: 20, scope: !2768)
!2775 = !DILocation(line: 1372, column: 6, scope: !2776)
!2776 = distinct !DILexicalBlock(scope: !2754, file: !1, line: 1372, column: 6)
!2777 = !DILocation(line: 1372, column: 6, scope: !2754)
!2778 = !DILocation(line: 1372, column: 22, scope: !2776)
!2779 = !DILocation(line: 1372, column: 27, scope: !2776)
!2780 = !DILocation(line: 1372, column: 14, scope: !2776)
!2781 = !DILocation(line: 1372, column: 20, scope: !2776)
!2782 = !DILocation(line: 1372, column: 13, scope: !2776)
!2783 = !DILocation(line: 1373, column: 1, scope: !2754)
!2784 = distinct !DISubprogram(name: "BKE_pbvh_node_num_verts", scope: !1, file: !1, line: 1375, type: !2785, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2785 = !DISubroutineType(types: !2786)
!2786 = !{null, !410, !419, !431, !431}
!2787 = !DILocalVariable(name: "bvh", arg: 1, scope: !2784, file: !1, line: 1375, type: !410)
!2788 = !DILocation(line: 1375, column: 36, scope: !2784)
!2789 = !DILocalVariable(name: "node", arg: 2, scope: !2784, file: !1, line: 1375, type: !419)
!2790 = !DILocation(line: 1375, column: 51, scope: !2784)
!2791 = !DILocalVariable(name: "uniquevert", arg: 3, scope: !2784, file: !1, line: 1375, type: !431)
!2792 = !DILocation(line: 1375, column: 62, scope: !2784)
!2793 = !DILocalVariable(name: "totvert", arg: 4, scope: !2784, file: !1, line: 1375, type: !431)
!2794 = !DILocation(line: 1375, column: 79, scope: !2784)
!2795 = !DILocalVariable(name: "tot", scope: !2784, file: !1, line: 1377, type: !142)
!2796 = !DILocation(line: 1377, column: 6, scope: !2784)
!2797 = !DILocation(line: 1379, column: 10, scope: !2784)
!2798 = !DILocation(line: 1379, column: 15, scope: !2784)
!2799 = !DILocation(line: 1379, column: 2, scope: !2784)
!2800 = !DILocation(line: 1381, column: 10, scope: !2801)
!2801 = distinct !DILexicalBlock(scope: !2784, file: !1, line: 1379, column: 21)
!2802 = !DILocation(line: 1381, column: 16, scope: !2801)
!2803 = !DILocation(line: 1381, column: 26, scope: !2801)
!2804 = !DILocation(line: 1381, column: 31, scope: !2801)
!2805 = !DILocation(line: 1381, column: 39, scope: !2801)
!2806 = !DILocation(line: 1381, column: 24, scope: !2801)
!2807 = !DILocation(line: 1381, column: 8, scope: !2801)
!2808 = !DILocation(line: 1382, column: 8, scope: !2809)
!2809 = distinct !DILexicalBlock(scope: !2801, file: !1, line: 1382, column: 8)
!2810 = !DILocation(line: 1382, column: 8, scope: !2801)
!2811 = !DILocation(line: 1382, column: 28, scope: !2809)
!2812 = !DILocation(line: 1382, column: 18, scope: !2809)
!2813 = !DILocation(line: 1382, column: 26, scope: !2809)
!2814 = !DILocation(line: 1382, column: 17, scope: !2809)
!2815 = !DILocation(line: 1383, column: 8, scope: !2816)
!2816 = distinct !DILexicalBlock(scope: !2801, file: !1, line: 1383, column: 8)
!2817 = !DILocation(line: 1383, column: 8, scope: !2801)
!2818 = !DILocation(line: 1383, column: 34, scope: !2816)
!2819 = !DILocation(line: 1383, column: 21, scope: !2816)
!2820 = !DILocation(line: 1383, column: 32, scope: !2816)
!2821 = !DILocation(line: 1383, column: 20, scope: !2816)
!2822 = !DILocation(line: 1384, column: 4, scope: !2801)
!2823 = !DILocation(line: 1386, column: 8, scope: !2824)
!2824 = distinct !DILexicalBlock(scope: !2801, file: !1, line: 1386, column: 8)
!2825 = !DILocation(line: 1386, column: 8, scope: !2801)
!2826 = !DILocation(line: 1386, column: 28, scope: !2824)
!2827 = !DILocation(line: 1386, column: 34, scope: !2824)
!2828 = !DILocation(line: 1386, column: 47, scope: !2824)
!2829 = !DILocation(line: 1386, column: 53, scope: !2824)
!2830 = !DILocation(line: 1386, column: 45, scope: !2824)
!2831 = !DILocation(line: 1386, column: 18, scope: !2824)
!2832 = !DILocation(line: 1386, column: 26, scope: !2824)
!2833 = !DILocation(line: 1386, column: 17, scope: !2824)
!2834 = !DILocation(line: 1387, column: 8, scope: !2835)
!2835 = distinct !DILexicalBlock(scope: !2801, file: !1, line: 1387, column: 8)
!2836 = !DILocation(line: 1387, column: 8, scope: !2801)
!2837 = !DILocation(line: 1387, column: 34, scope: !2835)
!2838 = !DILocation(line: 1387, column: 40, scope: !2835)
!2839 = !DILocation(line: 1387, column: 21, scope: !2835)
!2840 = !DILocation(line: 1387, column: 32, scope: !2835)
!2841 = !DILocation(line: 1387, column: 20, scope: !2835)
!2842 = !DILocation(line: 1388, column: 4, scope: !2801)
!2843 = !DILocation(line: 1390, column: 24, scope: !2801)
!2844 = !DILocation(line: 1390, column: 30, scope: !2801)
!2845 = !DILocation(line: 1390, column: 10, scope: !2801)
!2846 = !DILocation(line: 1390, column: 8, scope: !2801)
!2847 = !DILocation(line: 1391, column: 8, scope: !2848)
!2848 = distinct !DILexicalBlock(scope: !2801, file: !1, line: 1391, column: 8)
!2849 = !DILocation(line: 1391, column: 8, scope: !2801)
!2850 = !DILocation(line: 1391, column: 28, scope: !2848)
!2851 = !DILocation(line: 1391, column: 48, scope: !2848)
!2852 = !DILocation(line: 1391, column: 54, scope: !2848)
!2853 = !DILocation(line: 1391, column: 34, scope: !2848)
!2854 = !DILocation(line: 1391, column: 32, scope: !2848)
!2855 = !DILocation(line: 1391, column: 18, scope: !2848)
!2856 = !DILocation(line: 1391, column: 26, scope: !2848)
!2857 = !DILocation(line: 1391, column: 17, scope: !2848)
!2858 = !DILocation(line: 1392, column: 8, scope: !2859)
!2859 = distinct !DILexicalBlock(scope: !2801, file: !1, line: 1392, column: 8)
!2860 = !DILocation(line: 1392, column: 8, scope: !2801)
!2861 = !DILocation(line: 1392, column: 34, scope: !2859)
!2862 = !DILocation(line: 1392, column: 21, scope: !2859)
!2863 = !DILocation(line: 1392, column: 32, scope: !2859)
!2864 = !DILocation(line: 1392, column: 20, scope: !2859)
!2865 = !DILocation(line: 1393, column: 4, scope: !2801)
!2866 = !DILocation(line: 1395, column: 1, scope: !2784)
!2867 = distinct !DISubprogram(name: "BKE_pbvh_node_get_grids", scope: !1, file: !1, line: 1397, type: !2868, scopeLine: 1398, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2868 = !DISubroutineType(types: !2869)
!2869 = !{null, !410, !419, !2757, !431, !431, !431, !2870, !2871}
!2870 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !549, size: 64)
!2871 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !551, size: 64)
!2872 = !DILocalVariable(name: "bvh", arg: 1, scope: !2867, file: !1, line: 1397, type: !410)
!2873 = !DILocation(line: 1397, column: 36, scope: !2867)
!2874 = !DILocalVariable(name: "node", arg: 2, scope: !2867, file: !1, line: 1397, type: !419)
!2875 = !DILocation(line: 1397, column: 51, scope: !2867)
!2876 = !DILocalVariable(name: "grid_indices", arg: 3, scope: !2867, file: !1, line: 1397, type: !2757)
!2877 = !DILocation(line: 1397, column: 63, scope: !2867)
!2878 = !DILocalVariable(name: "totgrid", arg: 4, scope: !2867, file: !1, line: 1397, type: !431)
!2879 = !DILocation(line: 1397, column: 82, scope: !2867)
!2880 = !DILocalVariable(name: "maxgrid", arg: 5, scope: !2867, file: !1, line: 1397, type: !431)
!2881 = !DILocation(line: 1397, column: 96, scope: !2867)
!2882 = !DILocalVariable(name: "gridsize", arg: 6, scope: !2867, file: !1, line: 1397, type: !431)
!2883 = !DILocation(line: 1397, column: 110, scope: !2867)
!2884 = !DILocalVariable(name: "griddata", arg: 7, scope: !2867, file: !1, line: 1397, type: !2870)
!2885 = !DILocation(line: 1397, column: 131, scope: !2867)
!2886 = !DILocalVariable(name: "gridadj", arg: 8, scope: !2867, file: !1, line: 1397, type: !2871)
!2887 = !DILocation(line: 1397, column: 159, scope: !2867)
!2888 = !DILocation(line: 1399, column: 10, scope: !2867)
!2889 = !DILocation(line: 1399, column: 15, scope: !2867)
!2890 = !DILocation(line: 1399, column: 2, scope: !2867)
!2891 = !DILocation(line: 1401, column: 8, scope: !2892)
!2892 = distinct !DILexicalBlock(scope: !2893, file: !1, line: 1401, column: 8)
!2893 = distinct !DILexicalBlock(scope: !2867, file: !1, line: 1399, column: 21)
!2894 = !DILocation(line: 1401, column: 8, scope: !2893)
!2895 = !DILocation(line: 1401, column: 38, scope: !2892)
!2896 = !DILocation(line: 1401, column: 44, scope: !2892)
!2897 = !DILocation(line: 1401, column: 23, scope: !2892)
!2898 = !DILocation(line: 1401, column: 36, scope: !2892)
!2899 = !DILocation(line: 1401, column: 22, scope: !2892)
!2900 = !DILocation(line: 1402, column: 8, scope: !2901)
!2901 = distinct !DILexicalBlock(scope: !2893, file: !1, line: 1402, column: 8)
!2902 = !DILocation(line: 1402, column: 8, scope: !2893)
!2903 = !DILocation(line: 1402, column: 28, scope: !2901)
!2904 = !DILocation(line: 1402, column: 34, scope: !2901)
!2905 = !DILocation(line: 1402, column: 18, scope: !2901)
!2906 = !DILocation(line: 1402, column: 26, scope: !2901)
!2907 = !DILocation(line: 1402, column: 17, scope: !2901)
!2908 = !DILocation(line: 1403, column: 8, scope: !2909)
!2909 = distinct !DILexicalBlock(scope: !2893, file: !1, line: 1403, column: 8)
!2910 = !DILocation(line: 1403, column: 8, scope: !2893)
!2911 = !DILocation(line: 1403, column: 28, scope: !2909)
!2912 = !DILocation(line: 1403, column: 33, scope: !2909)
!2913 = !DILocation(line: 1403, column: 18, scope: !2909)
!2914 = !DILocation(line: 1403, column: 26, scope: !2909)
!2915 = !DILocation(line: 1403, column: 17, scope: !2909)
!2916 = !DILocation(line: 1404, column: 8, scope: !2917)
!2917 = distinct !DILexicalBlock(scope: !2893, file: !1, line: 1404, column: 8)
!2918 = !DILocation(line: 1404, column: 8, scope: !2893)
!2919 = !DILocation(line: 1404, column: 30, scope: !2917)
!2920 = !DILocation(line: 1404, column: 35, scope: !2917)
!2921 = !DILocation(line: 1404, column: 43, scope: !2917)
!2922 = !DILocation(line: 1404, column: 19, scope: !2917)
!2923 = !DILocation(line: 1404, column: 28, scope: !2917)
!2924 = !DILocation(line: 1404, column: 18, scope: !2917)
!2925 = !DILocation(line: 1405, column: 8, scope: !2926)
!2926 = distinct !DILexicalBlock(scope: !2893, file: !1, line: 1405, column: 8)
!2927 = !DILocation(line: 1405, column: 8, scope: !2893)
!2928 = !DILocation(line: 1405, column: 30, scope: !2926)
!2929 = !DILocation(line: 1405, column: 35, scope: !2926)
!2930 = !DILocation(line: 1405, column: 19, scope: !2926)
!2931 = !DILocation(line: 1405, column: 28, scope: !2926)
!2932 = !DILocation(line: 1405, column: 18, scope: !2926)
!2933 = !DILocation(line: 1406, column: 8, scope: !2934)
!2934 = distinct !DILexicalBlock(scope: !2893, file: !1, line: 1406, column: 8)
!2935 = !DILocation(line: 1406, column: 8, scope: !2893)
!2936 = !DILocation(line: 1406, column: 28, scope: !2934)
!2937 = !DILocation(line: 1406, column: 33, scope: !2934)
!2938 = !DILocation(line: 1406, column: 18, scope: !2934)
!2939 = !DILocation(line: 1406, column: 26, scope: !2934)
!2940 = !DILocation(line: 1406, column: 17, scope: !2934)
!2941 = !DILocation(line: 1407, column: 4, scope: !2893)
!2942 = !DILocation(line: 1410, column: 8, scope: !2943)
!2943 = distinct !DILexicalBlock(scope: !2893, file: !1, line: 1410, column: 8)
!2944 = !DILocation(line: 1410, column: 8, scope: !2893)
!2945 = !DILocation(line: 1410, column: 23, scope: !2943)
!2946 = !DILocation(line: 1410, column: 36, scope: !2943)
!2947 = !DILocation(line: 1410, column: 22, scope: !2943)
!2948 = !DILocation(line: 1411, column: 8, scope: !2949)
!2949 = distinct !DILexicalBlock(scope: !2893, file: !1, line: 1411, column: 8)
!2950 = !DILocation(line: 1411, column: 8, scope: !2893)
!2951 = !DILocation(line: 1411, column: 18, scope: !2949)
!2952 = !DILocation(line: 1411, column: 26, scope: !2949)
!2953 = !DILocation(line: 1411, column: 17, scope: !2949)
!2954 = !DILocation(line: 1412, column: 8, scope: !2955)
!2955 = distinct !DILexicalBlock(scope: !2893, file: !1, line: 1412, column: 8)
!2956 = !DILocation(line: 1412, column: 8, scope: !2893)
!2957 = !DILocation(line: 1412, column: 18, scope: !2955)
!2958 = !DILocation(line: 1412, column: 26, scope: !2955)
!2959 = !DILocation(line: 1412, column: 17, scope: !2955)
!2960 = !DILocation(line: 1413, column: 8, scope: !2961)
!2961 = distinct !DILexicalBlock(scope: !2893, file: !1, line: 1413, column: 8)
!2962 = !DILocation(line: 1413, column: 8, scope: !2893)
!2963 = !DILocation(line: 1413, column: 19, scope: !2961)
!2964 = !DILocation(line: 1413, column: 28, scope: !2961)
!2965 = !DILocation(line: 1413, column: 18, scope: !2961)
!2966 = !DILocation(line: 1414, column: 8, scope: !2967)
!2967 = distinct !DILexicalBlock(scope: !2893, file: !1, line: 1414, column: 8)
!2968 = !DILocation(line: 1414, column: 8, scope: !2893)
!2969 = !DILocation(line: 1414, column: 19, scope: !2967)
!2970 = !DILocation(line: 1414, column: 28, scope: !2967)
!2971 = !DILocation(line: 1414, column: 18, scope: !2967)
!2972 = !DILocation(line: 1415, column: 8, scope: !2973)
!2973 = distinct !DILexicalBlock(scope: !2893, file: !1, line: 1415, column: 8)
!2974 = !DILocation(line: 1415, column: 8, scope: !2893)
!2975 = !DILocation(line: 1415, column: 18, scope: !2973)
!2976 = !DILocation(line: 1415, column: 26, scope: !2973)
!2977 = !DILocation(line: 1415, column: 17, scope: !2973)
!2978 = !DILocation(line: 1416, column: 4, scope: !2893)
!2979 = !DILocation(line: 1418, column: 1, scope: !2867)
!2980 = distinct !DISubprogram(name: "BKE_pbvh_node_get_BB", scope: !1, file: !1, line: 1420, type: !2981, scopeLine: 1421, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!2981 = !DISubroutineType(types: !2982)
!2982 = !{null, !419, !141, !141}
!2983 = !DILocalVariable(name: "node", arg: 1, scope: !2980, file: !1, line: 1420, type: !419)
!2984 = !DILocation(line: 1420, column: 37, scope: !2980)
!2985 = !DILocalVariable(name: "bb_min", arg: 2, scope: !2980, file: !1, line: 1420, type: !141)
!2986 = !DILocation(line: 1420, column: 49, scope: !2980)
!2987 = !DILocalVariable(name: "bb_max", arg: 3, scope: !2980, file: !1, line: 1420, type: !141)
!2988 = !DILocation(line: 1420, column: 66, scope: !2980)
!2989 = !DILocation(line: 1422, column: 13, scope: !2980)
!2990 = !DILocation(line: 1422, column: 21, scope: !2980)
!2991 = !DILocation(line: 1422, column: 27, scope: !2980)
!2992 = !DILocation(line: 1422, column: 30, scope: !2980)
!2993 = !DILocation(line: 1422, column: 2, scope: !2980)
!2994 = !DILocation(line: 1423, column: 13, scope: !2980)
!2995 = !DILocation(line: 1423, column: 21, scope: !2980)
!2996 = !DILocation(line: 1423, column: 27, scope: !2980)
!2997 = !DILocation(line: 1423, column: 30, scope: !2980)
!2998 = !DILocation(line: 1423, column: 2, scope: !2980)
!2999 = !DILocation(line: 1424, column: 1, scope: !2980)
!3000 = distinct !DISubprogram(name: "BKE_pbvh_node_get_original_BB", scope: !1, file: !1, line: 1426, type: !2981, scopeLine: 1427, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3001 = !DILocalVariable(name: "node", arg: 1, scope: !3000, file: !1, line: 1426, type: !419)
!3002 = !DILocation(line: 1426, column: 46, scope: !3000)
!3003 = !DILocalVariable(name: "bb_min", arg: 2, scope: !3000, file: !1, line: 1426, type: !141)
!3004 = !DILocation(line: 1426, column: 58, scope: !3000)
!3005 = !DILocalVariable(name: "bb_max", arg: 3, scope: !3000, file: !1, line: 1426, type: !141)
!3006 = !DILocation(line: 1426, column: 75, scope: !3000)
!3007 = !DILocation(line: 1428, column: 13, scope: !3000)
!3008 = !DILocation(line: 1428, column: 21, scope: !3000)
!3009 = !DILocation(line: 1428, column: 27, scope: !3000)
!3010 = !DILocation(line: 1428, column: 35, scope: !3000)
!3011 = !DILocation(line: 1428, column: 2, scope: !3000)
!3012 = !DILocation(line: 1429, column: 13, scope: !3000)
!3013 = !DILocation(line: 1429, column: 21, scope: !3000)
!3014 = !DILocation(line: 1429, column: 27, scope: !3000)
!3015 = !DILocation(line: 1429, column: 35, scope: !3000)
!3016 = !DILocation(line: 1429, column: 2, scope: !3000)
!3017 = !DILocation(line: 1430, column: 1, scope: !3000)
!3018 = distinct !DISubprogram(name: "BKE_pbvh_node_get_proxies", scope: !1, file: !1, line: 1432, type: !3019, scopeLine: 1433, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3019 = !DISubroutineType(types: !3020)
!3020 = !{null, !419, !3021, !431}
!3021 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !447, size: 64)
!3022 = !DILocalVariable(name: "node", arg: 1, scope: !3018, file: !1, line: 1432, type: !419)
!3023 = !DILocation(line: 1432, column: 42, scope: !3018)
!3024 = !DILocalVariable(name: "proxies", arg: 2, scope: !3018, file: !1, line: 1432, type: !3021)
!3025 = !DILocation(line: 1432, column: 64, scope: !3018)
!3026 = !DILocalVariable(name: "proxy_count", arg: 3, scope: !3018, file: !1, line: 1432, type: !431)
!3027 = !DILocation(line: 1432, column: 78, scope: !3018)
!3028 = !DILocation(line: 1434, column: 6, scope: !3029)
!3029 = distinct !DILexicalBlock(scope: !3018, file: !1, line: 1434, column: 6)
!3030 = !DILocation(line: 1434, column: 12, scope: !3029)
!3031 = !DILocation(line: 1434, column: 24, scope: !3029)
!3032 = !DILocation(line: 1434, column: 6, scope: !3018)
!3033 = !DILocation(line: 1435, column: 7, scope: !3034)
!3034 = distinct !DILexicalBlock(scope: !3035, file: !1, line: 1435, column: 7)
!3035 = distinct !DILexicalBlock(scope: !3029, file: !1, line: 1434, column: 29)
!3036 = !DILocation(line: 1435, column: 7, scope: !3035)
!3037 = !DILocation(line: 1435, column: 27, scope: !3034)
!3038 = !DILocation(line: 1435, column: 33, scope: !3034)
!3039 = !DILocation(line: 1435, column: 17, scope: !3034)
!3040 = !DILocation(line: 1435, column: 25, scope: !3034)
!3041 = !DILocation(line: 1435, column: 16, scope: !3034)
!3042 = !DILocation(line: 1436, column: 7, scope: !3043)
!3043 = distinct !DILexicalBlock(scope: !3035, file: !1, line: 1436, column: 7)
!3044 = !DILocation(line: 1436, column: 7, scope: !3035)
!3045 = !DILocation(line: 1436, column: 35, scope: !3043)
!3046 = !DILocation(line: 1436, column: 41, scope: !3043)
!3047 = !DILocation(line: 1436, column: 21, scope: !3043)
!3048 = !DILocation(line: 1436, column: 33, scope: !3043)
!3049 = !DILocation(line: 1436, column: 20, scope: !3043)
!3050 = !DILocation(line: 1437, column: 2, scope: !3035)
!3051 = !DILocation(line: 1439, column: 7, scope: !3052)
!3052 = distinct !DILexicalBlock(scope: !3053, file: !1, line: 1439, column: 7)
!3053 = distinct !DILexicalBlock(scope: !3029, file: !1, line: 1438, column: 7)
!3054 = !DILocation(line: 1439, column: 7, scope: !3053)
!3055 = !DILocation(line: 1439, column: 17, scope: !3052)
!3056 = !DILocation(line: 1439, column: 25, scope: !3052)
!3057 = !DILocation(line: 1439, column: 16, scope: !3052)
!3058 = !DILocation(line: 1440, column: 7, scope: !3059)
!3059 = distinct !DILexicalBlock(scope: !3053, file: !1, line: 1440, column: 7)
!3060 = !DILocation(line: 1440, column: 7, scope: !3053)
!3061 = !DILocation(line: 1440, column: 21, scope: !3059)
!3062 = !DILocation(line: 1440, column: 33, scope: !3059)
!3063 = !DILocation(line: 1440, column: 20, scope: !3059)
!3064 = !DILocation(line: 1442, column: 1, scope: !3018)
!3065 = distinct !DISubprogram(name: "BKE_pbvh_raycast", scope: !1, file: !1, line: 1464, type: !3066, scopeLine: 1468, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3066 = !DISubroutineType(types: !3067)
!3067 = !{null, !410, !3068, !137, !201, !201, !573}
!3068 = !DIDerivedType(tag: DW_TAG_typedef, name: "BKE_pbvh_HitOccludedCallback", file: !4, line: 59, baseType: !3069)
!3069 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3070, size: 64)
!3070 = !DISubroutineType(types: !3071)
!3071 = !{null, !419, !137, !141}
!3072 = !DILocalVariable(name: "bvh", arg: 1, scope: !3065, file: !1, line: 1465, type: !410)
!3073 = !DILocation(line: 1465, column: 15, scope: !3065)
!3074 = !DILocalVariable(name: "cb", arg: 2, scope: !3065, file: !1, line: 1465, type: !3068)
!3075 = !DILocation(line: 1465, column: 49, scope: !3065)
!3076 = !DILocalVariable(name: "data", arg: 3, scope: !3065, file: !1, line: 1465, type: !137)
!3077 = !DILocation(line: 1465, column: 59, scope: !3065)
!3078 = !DILocalVariable(name: "ray_start", arg: 4, scope: !3065, file: !1, line: 1466, type: !201)
!3079 = !DILocation(line: 1466, column: 21, scope: !3065)
!3080 = !DILocalVariable(name: "ray_normal", arg: 5, scope: !3065, file: !1, line: 1466, type: !201)
!3081 = !DILocation(line: 1466, column: 47, scope: !3065)
!3082 = !DILocalVariable(name: "original", arg: 6, scope: !3065, file: !1, line: 1467, type: !573)
!3083 = !DILocation(line: 1467, column: 14, scope: !3065)
!3084 = !DILocalVariable(name: "rcd", scope: !3065, file: !1, line: 1469, type: !3085)
!3085 = !DIDerivedType(tag: DW_TAG_typedef, name: "RaycastData", file: !1, line: 1449, baseType: !3086)
!3086 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1, line: 1446, size: 320, elements: !3087)
!3087 = !{!3088, !3096}
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "ray", scope: !3086, file: !1, line: 1447, baseType: !3089, size: 288)
!3089 = !DIDerivedType(tag: DW_TAG_typedef, name: "IsectRayAABBData", file: !3090, line: 190, baseType: !3091)
!3090 = !DIFile(filename: "blender/source/blender/blenlib/BLI_math_geom.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!3091 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3090, line: 186, size: 288, elements: !3092)
!3092 = !{!3093, !3094, !3095}
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "ray_start", scope: !3091, file: !3090, line: 187, baseType: !132, size: 96)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "ray_inv_dir", scope: !3091, file: !3090, line: 188, baseType: !132, size: 96, offset: 96)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !3091, file: !3090, line: 189, baseType: !462, size: 96, offset: 192)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "original", scope: !3086, file: !1, line: 1448, baseType: !573, size: 8, offset: 288)
!3097 = !DILocation(line: 1469, column: 14, scope: !3065)
!3098 = !DILocation(line: 1471, column: 33, scope: !3065)
!3099 = !DILocation(line: 1471, column: 38, scope: !3065)
!3100 = !DILocation(line: 1471, column: 49, scope: !3065)
!3101 = !DILocation(line: 1471, column: 2, scope: !3065)
!3102 = !DILocation(line: 1472, column: 17, scope: !3065)
!3103 = !DILocation(line: 1472, column: 6, scope: !3065)
!3104 = !DILocation(line: 1472, column: 15, scope: !3065)
!3105 = !DILocation(line: 1474, column: 36, scope: !3065)
!3106 = !DILocation(line: 1474, column: 61, scope: !3065)
!3107 = !DILocation(line: 1474, column: 67, scope: !3065)
!3108 = !DILocation(line: 1474, column: 71, scope: !3065)
!3109 = !DILocation(line: 1474, column: 2, scope: !3065)
!3110 = !DILocation(line: 1475, column: 1, scope: !3065)
!3111 = distinct !DISubprogram(name: "BKE_pbvh_search_callback_occluded", scope: !1, file: !1, line: 902, type: !3112, scopeLine: 905, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3112 = !DISubroutineType(types: !3113)
!3113 = !{null, !410, !1461, !137, !3068, !137}
!3114 = !DILocalVariable(name: "bvh", arg: 1, scope: !3111, file: !1, line: 902, type: !410)
!3115 = !DILocation(line: 902, column: 53, scope: !3111)
!3116 = !DILocalVariable(name: "scb", arg: 2, scope: !3111, file: !1, line: 903, type: !1461)
!3117 = !DILocation(line: 903, column: 71, scope: !3111)
!3118 = !DILocalVariable(name: "search_data", arg: 3, scope: !3111, file: !1, line: 903, type: !137)
!3119 = !DILocation(line: 903, column: 82, scope: !3111)
!3120 = !DILocalVariable(name: "hcb", arg: 4, scope: !3111, file: !1, line: 904, type: !3068)
!3121 = !DILocation(line: 904, column: 76, scope: !3111)
!3122 = !DILocalVariable(name: "hit_data", arg: 5, scope: !3111, file: !1, line: 904, type: !137)
!3123 = !DILocation(line: 904, column: 87, scope: !3111)
!3124 = !DILocalVariable(name: "iter", scope: !3111, file: !1, line: 906, type: !1478)
!3125 = !DILocation(line: 906, column: 11, scope: !3111)
!3126 = !DILocalVariable(name: "node", scope: !3111, file: !1, line: 907, type: !419)
!3127 = !DILocation(line: 907, column: 12, scope: !3111)
!3128 = !DILocalVariable(name: "tree", scope: !3111, file: !1, line: 908, type: !3129)
!3129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3130, size: 64)
!3130 = !DIDerivedType(tag: DW_TAG_typedef, name: "node_tree", file: !1, line: 851, baseType: !3131)
!3131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "node_tree", file: !1, line: 846, size: 192, elements: !3132)
!3132 = !{!3133, !3134, !3136}
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3131, file: !1, line: 847, baseType: !419, size: 64)
!3134 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !3131, file: !1, line: 849, baseType: !3135, size: 64, offset: 64)
!3135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3131, size: 64)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !3131, file: !1, line: 850, baseType: !3135, size: 64, offset: 128)
!3137 = !DILocation(line: 908, column: 13, scope: !3111)
!3138 = !DILocation(line: 910, column: 25, scope: !3111)
!3139 = !DILocation(line: 910, column: 30, scope: !3111)
!3140 = !DILocation(line: 910, column: 35, scope: !3111)
!3141 = !DILocation(line: 910, column: 2, scope: !3111)
!3142 = !DILocation(line: 912, column: 2, scope: !3111)
!3143 = !DILocation(line: 912, column: 17, scope: !3111)
!3144 = !DILocation(line: 912, column: 15, scope: !3111)
!3145 = !DILocation(line: 913, column: 7, scope: !3146)
!3146 = distinct !DILexicalBlock(scope: !3147, file: !1, line: 913, column: 7)
!3147 = distinct !DILexicalBlock(scope: !3111, file: !1, line: 912, column: 50)
!3148 = !DILocation(line: 913, column: 13, scope: !3146)
!3149 = !DILocation(line: 913, column: 18, scope: !3146)
!3150 = !DILocation(line: 913, column: 7, scope: !3147)
!3151 = !DILocalVariable(name: "new_node", scope: !3152, file: !1, line: 914, type: !3129)
!3152 = distinct !DILexicalBlock(scope: !3146, file: !1, line: 913, column: 31)
!3153 = !DILocation(line: 914, column: 15, scope: !3152)
!3154 = !DILocation(line: 914, column: 26, scope: !3152)
!3155 = !DILocation(line: 916, column: 21, scope: !3152)
!3156 = !DILocation(line: 916, column: 4, scope: !3152)
!3157 = !DILocation(line: 916, column: 14, scope: !3152)
!3158 = !DILocation(line: 916, column: 19, scope: !3152)
!3159 = !DILocation(line: 918, column: 4, scope: !3152)
!3160 = !DILocation(line: 918, column: 14, scope: !3152)
!3161 = !DILocation(line: 918, column: 20, scope: !3152)
!3162 = !DILocation(line: 919, column: 4, scope: !3152)
!3163 = !DILocation(line: 919, column: 14, scope: !3152)
!3164 = !DILocation(line: 919, column: 20, scope: !3152)
!3165 = !DILocation(line: 921, column: 8, scope: !3166)
!3166 = distinct !DILexicalBlock(scope: !3152, file: !1, line: 921, column: 8)
!3167 = !DILocation(line: 921, column: 8, scope: !3152)
!3168 = !DILocation(line: 922, column: 22, scope: !3169)
!3169 = distinct !DILexicalBlock(scope: !3166, file: !1, line: 921, column: 14)
!3170 = !DILocation(line: 922, column: 28, scope: !3169)
!3171 = !DILocation(line: 922, column: 5, scope: !3169)
!3172 = !DILocation(line: 923, column: 4, scope: !3169)
!3173 = !DILocation(line: 925, column: 12, scope: !3174)
!3174 = distinct !DILexicalBlock(scope: !3166, file: !1, line: 924, column: 9)
!3175 = !DILocation(line: 925, column: 10, scope: !3174)
!3176 = !DILocation(line: 927, column: 3, scope: !3152)
!3177 = distinct !{!3177, !3142, !3178}
!3178 = !DILocation(line: 928, column: 2, scope: !3111)
!3179 = !DILocation(line: 930, column: 2, scope: !3111)
!3180 = !DILocation(line: 932, column: 6, scope: !3181)
!3181 = distinct !DILexicalBlock(scope: !3111, file: !1, line: 932, column: 6)
!3182 = !DILocation(line: 932, column: 6, scope: !3111)
!3183 = !DILocalVariable(name: "tmin", scope: !3184, file: !1, line: 933, type: !133)
!3184 = distinct !DILexicalBlock(scope: !3181, file: !1, line: 932, column: 12)
!3185 = !DILocation(line: 933, column: 9, scope: !3184)
!3186 = !DILocation(line: 934, column: 17, scope: !3184)
!3187 = !DILocation(line: 934, column: 23, scope: !3184)
!3188 = !DILocation(line: 934, column: 28, scope: !3184)
!3189 = !DILocation(line: 934, column: 3, scope: !3184)
!3190 = !DILocation(line: 935, column: 13, scope: !3184)
!3191 = !DILocation(line: 935, column: 3, scope: !3184)
!3192 = !DILocation(line: 936, column: 2, scope: !3184)
!3193 = !DILocation(line: 937, column: 1, scope: !3111)
!3194 = distinct !DISubprogram(name: "ray_aabb_intersect", scope: !1, file: !1, line: 1451, type: !1463, scopeLine: 1452, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3195 = !DILocalVariable(name: "node", arg: 1, scope: !3194, file: !1, line: 1451, type: !419)
!3196 = !DILocation(line: 1451, column: 42, scope: !3194)
!3197 = !DILocalVariable(name: "data_v", arg: 2, scope: !3194, file: !1, line: 1451, type: !137)
!3198 = !DILocation(line: 1451, column: 54, scope: !3194)
!3199 = !DILocalVariable(name: "rcd", scope: !3194, file: !1, line: 1453, type: !3200)
!3200 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3085, size: 64)
!3201 = !DILocation(line: 1453, column: 15, scope: !3194)
!3202 = !DILocation(line: 1453, column: 21, scope: !3194)
!3203 = !DILocalVariable(name: "bb_min", scope: !3194, file: !1, line: 1454, type: !132)
!3204 = !DILocation(line: 1454, column: 8, scope: !3194)
!3205 = !DILocalVariable(name: "bb_max", scope: !3194, file: !1, line: 1454, type: !132)
!3206 = !DILocation(line: 1454, column: 19, scope: !3194)
!3207 = !DILocation(line: 1456, column: 6, scope: !3208)
!3208 = distinct !DILexicalBlock(scope: !3194, file: !1, line: 1456, column: 6)
!3209 = !DILocation(line: 1456, column: 11, scope: !3208)
!3210 = !DILocation(line: 1456, column: 6, scope: !3194)
!3211 = !DILocation(line: 1457, column: 33, scope: !3208)
!3212 = !DILocation(line: 1457, column: 39, scope: !3208)
!3213 = !DILocation(line: 1457, column: 47, scope: !3208)
!3214 = !DILocation(line: 1457, column: 3, scope: !3208)
!3215 = !DILocation(line: 1459, column: 24, scope: !3208)
!3216 = !DILocation(line: 1459, column: 30, scope: !3208)
!3217 = !DILocation(line: 1459, column: 38, scope: !3208)
!3218 = !DILocation(line: 1459, column: 3, scope: !3208)
!3219 = !DILocation(line: 1461, column: 25, scope: !3194)
!3220 = !DILocation(line: 1461, column: 30, scope: !3194)
!3221 = !DILocation(line: 1461, column: 35, scope: !3194)
!3222 = !DILocation(line: 1461, column: 43, scope: !3194)
!3223 = !DILocation(line: 1461, column: 52, scope: !3194)
!3224 = !DILocation(line: 1461, column: 58, scope: !3194)
!3225 = !DILocation(line: 1461, column: 9, scope: !3194)
!3226 = !DILocation(line: 1461, column: 2, scope: !3194)
!3227 = distinct !DISubprogram(name: "ray_face_intersection", scope: !1, file: !1, line: 1477, type: !3228, scopeLine: 1482, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3228 = !DISubroutineType(types: !3229)
!3229 = !{!573, !201, !201, !201, !201, !201, !201, !141}
!3230 = !DILocalVariable(name: "ray_start", arg: 1, scope: !3227, file: !1, line: 1477, type: !201)
!3231 = !DILocation(line: 1477, column: 40, scope: !3227)
!3232 = !DILocalVariable(name: "ray_normal", arg: 2, scope: !3227, file: !1, line: 1478, type: !201)
!3233 = !DILocation(line: 1478, column: 40, scope: !3227)
!3234 = !DILocalVariable(name: "t0", arg: 3, scope: !3227, file: !1, line: 1479, type: !201)
!3235 = !DILocation(line: 1479, column: 40, scope: !3227)
!3236 = !DILocalVariable(name: "t1", arg: 4, scope: !3227, file: !1, line: 1479, type: !201)
!3237 = !DILocation(line: 1479, column: 59, scope: !3227)
!3238 = !DILocalVariable(name: "t2", arg: 5, scope: !3227, file: !1, line: 1480, type: !201)
!3239 = !DILocation(line: 1480, column: 40, scope: !3227)
!3240 = !DILocalVariable(name: "t3", arg: 6, scope: !3227, file: !1, line: 1480, type: !201)
!3241 = !DILocation(line: 1480, column: 59, scope: !3227)
!3242 = !DILocalVariable(name: "fdist", arg: 7, scope: !3227, file: !1, line: 1481, type: !141)
!3243 = !DILocation(line: 1481, column: 35, scope: !3227)
!3244 = !DILocalVariable(name: "dist", scope: !3227, file: !1, line: 1483, type: !133)
!3245 = !DILocation(line: 1483, column: 8, scope: !3227)
!3246 = !DILocation(line: 1485, column: 32, scope: !3247)
!3247 = distinct !DILexicalBlock(scope: !3227, file: !1, line: 1485, column: 6)
!3248 = !DILocation(line: 1485, column: 43, scope: !3247)
!3249 = !DILocation(line: 1485, column: 55, scope: !3247)
!3250 = !DILocation(line: 1485, column: 59, scope: !3247)
!3251 = !DILocation(line: 1485, column: 63, scope: !3247)
!3252 = !DILocation(line: 1485, column: 7, scope: !3247)
!3253 = !DILocation(line: 1485, column: 86, scope: !3247)
!3254 = !DILocation(line: 1485, column: 89, scope: !3247)
!3255 = !DILocation(line: 1485, column: 97, scope: !3247)
!3256 = !DILocation(line: 1485, column: 96, scope: !3247)
!3257 = !DILocation(line: 1485, column: 94, scope: !3247)
!3258 = !DILocation(line: 1485, column: 104, scope: !3247)
!3259 = !DILocation(line: 1486, column: 7, scope: !3247)
!3260 = !DILocation(line: 1486, column: 10, scope: !3247)
!3261 = !DILocation(line: 1486, column: 38, scope: !3247)
!3262 = !DILocation(line: 1486, column: 49, scope: !3247)
!3263 = !DILocation(line: 1486, column: 61, scope: !3247)
!3264 = !DILocation(line: 1486, column: 65, scope: !3247)
!3265 = !DILocation(line: 1486, column: 69, scope: !3247)
!3266 = !DILocation(line: 1486, column: 13, scope: !3247)
!3267 = !DILocation(line: 1486, column: 92, scope: !3247)
!3268 = !DILocation(line: 1486, column: 95, scope: !3247)
!3269 = !DILocation(line: 1486, column: 103, scope: !3247)
!3270 = !DILocation(line: 1486, column: 102, scope: !3247)
!3271 = !DILocation(line: 1486, column: 100, scope: !3247)
!3272 = !DILocation(line: 1485, column: 6, scope: !3227)
!3273 = !DILocation(line: 1488, column: 12, scope: !3274)
!3274 = distinct !DILexicalBlock(scope: !3247, file: !1, line: 1487, column: 2)
!3275 = !DILocation(line: 1488, column: 4, scope: !3274)
!3276 = !DILocation(line: 1488, column: 10, scope: !3274)
!3277 = !DILocation(line: 1489, column: 3, scope: !3274)
!3278 = !DILocation(line: 1492, column: 3, scope: !3279)
!3279 = distinct !DILexicalBlock(scope: !3247, file: !1, line: 1491, column: 7)
!3280 = !DILocation(line: 1494, column: 1, scope: !3227)
!3281 = distinct !DISubprogram(name: "BKE_pbvh_node_raycast", scope: !1, file: !1, line: 1590, type: !3282, scopeLine: 1594, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3282 = !DISubroutineType(types: !3283)
!3283 = !{!573, !410, !419, !452, !142, !201, !201, !141}
!3284 = !DILocalVariable(name: "bvh", arg: 1, scope: !3281, file: !1, line: 1591, type: !410)
!3285 = !DILocation(line: 1591, column: 15, scope: !3281)
!3286 = !DILocalVariable(name: "node", arg: 2, scope: !3281, file: !1, line: 1591, type: !419)
!3287 = !DILocation(line: 1591, column: 30, scope: !3281)
!3288 = !DILocalVariable(name: "origco", arg: 3, scope: !3281, file: !1, line: 1591, type: !452)
!3289 = !DILocation(line: 1591, column: 44, scope: !3281)
!3290 = !DILocalVariable(name: "use_origco", arg: 4, scope: !3281, file: !1, line: 1591, type: !142)
!3291 = !DILocation(line: 1591, column: 60, scope: !3281)
!3292 = !DILocalVariable(name: "ray_start", arg: 5, scope: !3281, file: !1, line: 1592, type: !201)
!3293 = !DILocation(line: 1592, column: 21, scope: !3281)
!3294 = !DILocalVariable(name: "ray_normal", arg: 6, scope: !3281, file: !1, line: 1592, type: !201)
!3295 = !DILocation(line: 1592, column: 47, scope: !3281)
!3296 = !DILocalVariable(name: "dist", arg: 7, scope: !3281, file: !1, line: 1593, type: !141)
!3297 = !DILocation(line: 1593, column: 16, scope: !3281)
!3298 = !DILocalVariable(name: "hit", scope: !3281, file: !1, line: 1595, type: !573)
!3299 = !DILocation(line: 1595, column: 7, scope: !3281)
!3300 = !DILocation(line: 1597, column: 6, scope: !3301)
!3301 = distinct !DILexicalBlock(scope: !3281, file: !1, line: 1597, column: 6)
!3302 = !DILocation(line: 1597, column: 12, scope: !3301)
!3303 = !DILocation(line: 1597, column: 17, scope: !3301)
!3304 = !DILocation(line: 1597, column: 6, scope: !3281)
!3305 = !DILocation(line: 1598, column: 3, scope: !3301)
!3306 = !DILocation(line: 1600, column: 10, scope: !3281)
!3307 = !DILocation(line: 1600, column: 15, scope: !3281)
!3308 = !DILocation(line: 1600, column: 2, scope: !3281)
!3309 = !DILocation(line: 1602, column: 35, scope: !3310)
!3310 = distinct !DILexicalBlock(scope: !3281, file: !1, line: 1600, column: 21)
!3311 = !DILocation(line: 1602, column: 40, scope: !3310)
!3312 = !DILocation(line: 1602, column: 46, scope: !3310)
!3313 = !DILocation(line: 1603, column: 35, scope: !3310)
!3314 = !DILocation(line: 1603, column: 46, scope: !3310)
!3315 = !DILocation(line: 1603, column: 58, scope: !3310)
!3316 = !DILocation(line: 1602, column: 11, scope: !3310)
!3317 = !DILocation(line: 1602, column: 8, scope: !3310)
!3318 = !DILocation(line: 1604, column: 4, scope: !3310)
!3319 = !DILocation(line: 1606, column: 35, scope: !3310)
!3320 = !DILocation(line: 1606, column: 40, scope: !3310)
!3321 = !DILocation(line: 1606, column: 46, scope: !3310)
!3322 = !DILocation(line: 1607, column: 35, scope: !3310)
!3323 = !DILocation(line: 1607, column: 46, scope: !3310)
!3324 = !DILocation(line: 1607, column: 58, scope: !3310)
!3325 = !DILocation(line: 1606, column: 11, scope: !3310)
!3326 = !DILocation(line: 1606, column: 8, scope: !3310)
!3327 = !DILocation(line: 1608, column: 4, scope: !3310)
!3328 = !DILocation(line: 1610, column: 34, scope: !3310)
!3329 = !DILocation(line: 1610, column: 40, scope: !3310)
!3330 = !DILocation(line: 1610, column: 51, scope: !3310)
!3331 = !DILocation(line: 1610, column: 63, scope: !3310)
!3332 = !DILocation(line: 1610, column: 69, scope: !3310)
!3333 = !DILocation(line: 1610, column: 10, scope: !3310)
!3334 = !DILocation(line: 1610, column: 8, scope: !3310)
!3335 = !DILocation(line: 1611, column: 4, scope: !3310)
!3336 = !DILocation(line: 1614, column: 9, scope: !3281)
!3337 = !DILocation(line: 1614, column: 2, scope: !3281)
!3338 = !DILocation(line: 1615, column: 1, scope: !3281)
!3339 = distinct !DISubprogram(name: "pbvh_faces_node_raycast", scope: !1, file: !1, line: 1496, type: !3340, scopeLine: 1500, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3340 = !DISubroutineType(types: !3341)
!3341 = !{!573, !410, !3342, !452, !201, !201, !141}
!3342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3343, size: 64)
!3343 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !420)
!3344 = !DILocalVariable(name: "bvh", arg: 1, scope: !3339, file: !1, line: 1496, type: !410)
!3345 = !DILocation(line: 1496, column: 43, scope: !3339)
!3346 = !DILocalVariable(name: "node", arg: 2, scope: !3339, file: !1, line: 1496, type: !3342)
!3347 = !DILocation(line: 1496, column: 64, scope: !3339)
!3348 = !DILocalVariable(name: "origco", arg: 3, scope: !3339, file: !1, line: 1497, type: !452)
!3349 = !DILocation(line: 1497, column: 45, scope: !3339)
!3350 = !DILocalVariable(name: "ray_start", arg: 4, scope: !3339, file: !1, line: 1498, type: !201)
!3351 = !DILocation(line: 1498, column: 49, scope: !3339)
!3352 = !DILocalVariable(name: "ray_normal", arg: 5, scope: !3339, file: !1, line: 1499, type: !201)
!3353 = !DILocation(line: 1499, column: 49, scope: !3339)
!3354 = !DILocalVariable(name: "dist", arg: 6, scope: !3339, file: !1, line: 1499, type: !141)
!3355 = !DILocation(line: 1499, column: 71, scope: !3339)
!3356 = !DILocalVariable(name: "vert", scope: !3339, file: !1, line: 1501, type: !3357)
!3357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3358, size: 64)
!3358 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !472)
!3359 = !DILocation(line: 1501, column: 15, scope: !3339)
!3360 = !DILocation(line: 1501, column: 22, scope: !3339)
!3361 = !DILocation(line: 1501, column: 27, scope: !3339)
!3362 = !DILocalVariable(name: "faces", scope: !3339, file: !1, line: 1502, type: !3363)
!3363 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !971, size: 64)
!3364 = !DILocation(line: 1502, column: 13, scope: !3339)
!3365 = !DILocation(line: 1502, column: 21, scope: !3339)
!3366 = !DILocation(line: 1502, column: 27, scope: !3339)
!3367 = !DILocalVariable(name: "i", scope: !3339, file: !1, line: 1503, type: !142)
!3368 = !DILocation(line: 1503, column: 6, scope: !3339)
!3369 = !DILocalVariable(name: "totface", scope: !3339, file: !1, line: 1503, type: !142)
!3370 = !DILocation(line: 1503, column: 9, scope: !3339)
!3371 = !DILocation(line: 1503, column: 19, scope: !3339)
!3372 = !DILocation(line: 1503, column: 25, scope: !3339)
!3373 = !DILocalVariable(name: "hit", scope: !3339, file: !1, line: 1504, type: !573)
!3374 = !DILocation(line: 1504, column: 7, scope: !3339)
!3375 = !DILocation(line: 1506, column: 9, scope: !3376)
!3376 = distinct !DILexicalBlock(scope: !3339, file: !1, line: 1506, column: 2)
!3377 = !DILocation(line: 1506, column: 7, scope: !3376)
!3378 = !DILocation(line: 1506, column: 14, scope: !3379)
!3379 = distinct !DILexicalBlock(scope: !3376, file: !1, line: 1506, column: 2)
!3380 = !DILocation(line: 1506, column: 18, scope: !3379)
!3381 = !DILocation(line: 1506, column: 16, scope: !3379)
!3382 = !DILocation(line: 1506, column: 2, scope: !3376)
!3383 = !DILocalVariable(name: "f", scope: !3384, file: !1, line: 1507, type: !3385)
!3384 = distinct !DILexicalBlock(scope: !3379, file: !1, line: 1506, column: 32)
!3385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3386, size: 64)
!3386 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !482)
!3387 = !DILocation(line: 1507, column: 16, scope: !3384)
!3388 = !DILocation(line: 1507, column: 20, scope: !3384)
!3389 = !DILocation(line: 1507, column: 25, scope: !3384)
!3390 = !DILocation(line: 1507, column: 33, scope: !3384)
!3391 = !DILocation(line: 1507, column: 39, scope: !3384)
!3392 = !DILocation(line: 1507, column: 31, scope: !3384)
!3393 = !DILocalVariable(name: "face_verts", scope: !3384, file: !1, line: 1508, type: !3363)
!3394 = !DILocation(line: 1508, column: 14, scope: !3384)
!3395 = !DILocation(line: 1508, column: 27, scope: !3384)
!3396 = !DILocation(line: 1508, column: 33, scope: !3384)
!3397 = !DILocation(line: 1508, column: 51, scope: !3384)
!3398 = !DILocation(line: 1510, column: 28, scope: !3399)
!3399 = distinct !DILexicalBlock(scope: !3384, file: !1, line: 1510, column: 7)
!3400 = !DILocation(line: 1510, column: 31, scope: !3399)
!3401 = !DILocation(line: 1510, column: 7, scope: !3399)
!3402 = !DILocation(line: 1510, column: 7, scope: !3384)
!3403 = !DILocation(line: 1511, column: 4, scope: !3399)
!3404 = !DILocation(line: 1513, column: 7, scope: !3405)
!3405 = distinct !DILexicalBlock(scope: !3384, file: !1, line: 1513, column: 7)
!3406 = !DILocation(line: 1513, column: 7, scope: !3384)
!3407 = !DILocation(line: 1515, column: 33, scope: !3408)
!3408 = distinct !DILexicalBlock(scope: !3405, file: !1, line: 1513, column: 15)
!3409 = !DILocation(line: 1515, column: 44, scope: !3408)
!3410 = !DILocation(line: 1516, column: 33, scope: !3408)
!3411 = !DILocation(line: 1516, column: 40, scope: !3408)
!3412 = !DILocation(line: 1517, column: 33, scope: !3408)
!3413 = !DILocation(line: 1517, column: 40, scope: !3408)
!3414 = !DILocation(line: 1518, column: 33, scope: !3408)
!3415 = !DILocation(line: 1518, column: 40, scope: !3408)
!3416 = !DILocation(line: 1519, column: 33, scope: !3408)
!3417 = !DILocation(line: 1519, column: 36, scope: !3408)
!3418 = !DILocation(line: 1519, column: 41, scope: !3408)
!3419 = !DILocation(line: 1519, column: 48, scope: !3408)
!3420 = !DILocation(line: 1520, column: 33, scope: !3408)
!3421 = !DILocation(line: 1515, column: 11, scope: !3408)
!3422 = !DILocation(line: 1515, column: 8, scope: !3408)
!3423 = !DILocation(line: 1521, column: 3, scope: !3408)
!3424 = !DILocation(line: 1524, column: 33, scope: !3425)
!3425 = distinct !DILexicalBlock(scope: !3405, file: !1, line: 1522, column: 8)
!3426 = !DILocation(line: 1524, column: 44, scope: !3425)
!3427 = !DILocation(line: 1525, column: 33, scope: !3425)
!3428 = !DILocation(line: 1525, column: 38, scope: !3425)
!3429 = !DILocation(line: 1525, column: 41, scope: !3425)
!3430 = !DILocation(line: 1525, column: 45, scope: !3425)
!3431 = !DILocation(line: 1526, column: 33, scope: !3425)
!3432 = !DILocation(line: 1526, column: 38, scope: !3425)
!3433 = !DILocation(line: 1526, column: 41, scope: !3425)
!3434 = !DILocation(line: 1526, column: 45, scope: !3425)
!3435 = !DILocation(line: 1527, column: 33, scope: !3425)
!3436 = !DILocation(line: 1527, column: 38, scope: !3425)
!3437 = !DILocation(line: 1527, column: 41, scope: !3425)
!3438 = !DILocation(line: 1527, column: 45, scope: !3425)
!3439 = !DILocation(line: 1528, column: 33, scope: !3425)
!3440 = !DILocation(line: 1528, column: 36, scope: !3425)
!3441 = !DILocation(line: 1528, column: 41, scope: !3425)
!3442 = !DILocation(line: 1528, column: 46, scope: !3425)
!3443 = !DILocation(line: 1528, column: 49, scope: !3425)
!3444 = !DILocation(line: 1528, column: 53, scope: !3425)
!3445 = !DILocation(line: 1529, column: 33, scope: !3425)
!3446 = !DILocation(line: 1524, column: 11, scope: !3425)
!3447 = !DILocation(line: 1524, column: 8, scope: !3425)
!3448 = !DILocation(line: 1531, column: 2, scope: !3384)
!3449 = !DILocation(line: 1506, column: 27, scope: !3379)
!3450 = !DILocation(line: 1506, column: 2, scope: !3379)
!3451 = distinct !{!3451, !3382, !3452}
!3452 = !DILocation(line: 1531, column: 2, scope: !3376)
!3453 = !DILocation(line: 1533, column: 9, scope: !3339)
!3454 = !DILocation(line: 1533, column: 2, scope: !3339)
!3455 = distinct !DISubprogram(name: "pbvh_grids_node_raycast", scope: !1, file: !1, line: 1536, type: !3456, scopeLine: 1541, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3456 = !DISubroutineType(types: !3457)
!3457 = !{!573, !410, !419, !452, !201, !201, !141}
!3458 = !DILocalVariable(name: "bvh", arg: 1, scope: !3455, file: !1, line: 1537, type: !410)
!3459 = !DILocation(line: 1537, column: 15, scope: !3455)
!3460 = !DILocalVariable(name: "node", arg: 2, scope: !3455, file: !1, line: 1537, type: !419)
!3461 = !DILocation(line: 1537, column: 30, scope: !3455)
!3462 = !DILocalVariable(name: "origco", arg: 3, scope: !3455, file: !1, line: 1538, type: !452)
!3463 = !DILocation(line: 1538, column: 17, scope: !3455)
!3464 = !DILocalVariable(name: "ray_start", arg: 4, scope: !3455, file: !1, line: 1539, type: !201)
!3465 = !DILocation(line: 1539, column: 21, scope: !3455)
!3466 = !DILocalVariable(name: "ray_normal", arg: 5, scope: !3455, file: !1, line: 1539, type: !201)
!3467 = !DILocation(line: 1539, column: 47, scope: !3455)
!3468 = !DILocalVariable(name: "dist", arg: 6, scope: !3455, file: !1, line: 1540, type: !141)
!3469 = !DILocation(line: 1540, column: 16, scope: !3455)
!3470 = !DILocalVariable(name: "totgrid", scope: !3455, file: !1, line: 1542, type: !142)
!3471 = !DILocation(line: 1542, column: 6, scope: !3455)
!3472 = !DILocation(line: 1542, column: 16, scope: !3455)
!3473 = !DILocation(line: 1542, column: 22, scope: !3455)
!3474 = !DILocalVariable(name: "gridsize", scope: !3455, file: !1, line: 1543, type: !142)
!3475 = !DILocation(line: 1543, column: 6, scope: !3455)
!3476 = !DILocation(line: 1543, column: 17, scope: !3455)
!3477 = !DILocation(line: 1543, column: 22, scope: !3455)
!3478 = !DILocation(line: 1543, column: 30, scope: !3455)
!3479 = !DILocalVariable(name: "i", scope: !3455, file: !1, line: 1544, type: !142)
!3480 = !DILocation(line: 1544, column: 6, scope: !3455)
!3481 = !DILocalVariable(name: "x", scope: !3455, file: !1, line: 1544, type: !142)
!3482 = !DILocation(line: 1544, column: 9, scope: !3455)
!3483 = !DILocalVariable(name: "y", scope: !3455, file: !1, line: 1544, type: !142)
!3484 = !DILocation(line: 1544, column: 12, scope: !3455)
!3485 = !DILocalVariable(name: "hit", scope: !3455, file: !1, line: 1545, type: !573)
!3486 = !DILocation(line: 1545, column: 7, scope: !3455)
!3487 = !DILocation(line: 1547, column: 9, scope: !3488)
!3488 = distinct !DILexicalBlock(scope: !3455, file: !1, line: 1547, column: 2)
!3489 = !DILocation(line: 1547, column: 7, scope: !3488)
!3490 = !DILocation(line: 1547, column: 14, scope: !3491)
!3491 = distinct !DILexicalBlock(scope: !3488, file: !1, line: 1547, column: 2)
!3492 = !DILocation(line: 1547, column: 18, scope: !3491)
!3493 = !DILocation(line: 1547, column: 16, scope: !3491)
!3494 = !DILocation(line: 1547, column: 2, scope: !3488)
!3495 = !DILocalVariable(name: "grid", scope: !3496, file: !1, line: 1548, type: !150)
!3496 = distinct !DILexicalBlock(scope: !3491, file: !1, line: 1547, column: 32)
!3497 = !DILocation(line: 1548, column: 12, scope: !3496)
!3498 = !DILocation(line: 1548, column: 19, scope: !3496)
!3499 = !DILocation(line: 1548, column: 24, scope: !3496)
!3500 = !DILocation(line: 1548, column: 30, scope: !3496)
!3501 = !DILocation(line: 1548, column: 36, scope: !3496)
!3502 = !DILocation(line: 1548, column: 49, scope: !3496)
!3503 = !DILocalVariable(name: "gh", scope: !3496, file: !1, line: 1549, type: !124)
!3504 = !DILocation(line: 1549, column: 15, scope: !3496)
!3505 = !DILocation(line: 1551, column: 8, scope: !3506)
!3506 = distinct !DILexicalBlock(scope: !3496, file: !1, line: 1551, column: 7)
!3507 = !DILocation(line: 1551, column: 7, scope: !3496)
!3508 = !DILocation(line: 1552, column: 4, scope: !3506)
!3509 = !DILocation(line: 1554, column: 8, scope: !3496)
!3510 = !DILocation(line: 1554, column: 13, scope: !3496)
!3511 = !DILocation(line: 1554, column: 25, scope: !3496)
!3512 = !DILocation(line: 1554, column: 31, scope: !3496)
!3513 = !DILocation(line: 1554, column: 44, scope: !3496)
!3514 = !DILocation(line: 1554, column: 6, scope: !3496)
!3515 = !DILocation(line: 1556, column: 10, scope: !3516)
!3516 = distinct !DILexicalBlock(scope: !3496, file: !1, line: 1556, column: 3)
!3517 = !DILocation(line: 1556, column: 8, scope: !3516)
!3518 = !DILocation(line: 1556, column: 15, scope: !3519)
!3519 = distinct !DILexicalBlock(scope: !3516, file: !1, line: 1556, column: 3)
!3520 = !DILocation(line: 1556, column: 19, scope: !3519)
!3521 = !DILocation(line: 1556, column: 28, scope: !3519)
!3522 = !DILocation(line: 1556, column: 17, scope: !3519)
!3523 = !DILocation(line: 1556, column: 3, scope: !3516)
!3524 = !DILocation(line: 1557, column: 11, scope: !3525)
!3525 = distinct !DILexicalBlock(scope: !3526, file: !1, line: 1557, column: 4)
!3526 = distinct !DILexicalBlock(scope: !3519, file: !1, line: 1556, column: 38)
!3527 = !DILocation(line: 1557, column: 9, scope: !3525)
!3528 = !DILocation(line: 1557, column: 16, scope: !3529)
!3529 = distinct !DILexicalBlock(scope: !3525, file: !1, line: 1557, column: 4)
!3530 = !DILocation(line: 1557, column: 20, scope: !3529)
!3531 = !DILocation(line: 1557, column: 29, scope: !3529)
!3532 = !DILocation(line: 1557, column: 18, scope: !3529)
!3533 = !DILocation(line: 1557, column: 4, scope: !3525)
!3534 = !DILocation(line: 1559, column: 9, scope: !3535)
!3535 = distinct !DILexicalBlock(scope: !3536, file: !1, line: 1559, column: 9)
!3536 = distinct !DILexicalBlock(scope: !3529, file: !1, line: 1557, column: 39)
!3537 = !DILocation(line: 1559, column: 9, scope: !3536)
!3538 = !DILocation(line: 1560, column: 36, scope: !3539)
!3539 = distinct !DILexicalBlock(scope: !3540, file: !1, line: 1560, column: 10)
!3540 = distinct !DILexicalBlock(scope: !3535, file: !1, line: 1559, column: 13)
!3541 = !DILocation(line: 1560, column: 40, scope: !3539)
!3542 = !DILocation(line: 1560, column: 50, scope: !3539)
!3543 = !DILocation(line: 1560, column: 53, scope: !3539)
!3544 = !DILocation(line: 1560, column: 10, scope: !3539)
!3545 = !DILocation(line: 1560, column: 10, scope: !3540)
!3546 = !DILocation(line: 1561, column: 7, scope: !3539)
!3547 = !DILocation(line: 1562, column: 5, scope: !3540)
!3548 = !DILocation(line: 1564, column: 9, scope: !3549)
!3549 = distinct !DILexicalBlock(scope: !3536, file: !1, line: 1564, column: 9)
!3550 = !DILocation(line: 1564, column: 9, scope: !3536)
!3551 = !DILocation(line: 1565, column: 35, scope: !3552)
!3552 = distinct !DILexicalBlock(scope: !3549, file: !1, line: 1564, column: 17)
!3553 = !DILocation(line: 1565, column: 46, scope: !3552)
!3554 = !DILocation(line: 1566, column: 35, scope: !3552)
!3555 = !DILocation(line: 1566, column: 42, scope: !3552)
!3556 = !DILocation(line: 1566, column: 46, scope: !3552)
!3557 = !DILocation(line: 1566, column: 44, scope: !3552)
!3558 = !DILocation(line: 1566, column: 57, scope: !3552)
!3559 = !DILocation(line: 1566, column: 55, scope: !3552)
!3560 = !DILocation(line: 1567, column: 35, scope: !3552)
!3561 = !DILocation(line: 1567, column: 42, scope: !3552)
!3562 = !DILocation(line: 1567, column: 46, scope: !3552)
!3563 = !DILocation(line: 1567, column: 44, scope: !3552)
!3564 = !DILocation(line: 1567, column: 57, scope: !3552)
!3565 = !DILocation(line: 1567, column: 55, scope: !3552)
!3566 = !DILocation(line: 1567, column: 59, scope: !3552)
!3567 = !DILocation(line: 1568, column: 35, scope: !3552)
!3568 = !DILocation(line: 1568, column: 43, scope: !3552)
!3569 = !DILocation(line: 1568, column: 45, scope: !3552)
!3570 = !DILocation(line: 1568, column: 52, scope: !3552)
!3571 = !DILocation(line: 1568, column: 50, scope: !3552)
!3572 = !DILocation(line: 1568, column: 63, scope: !3552)
!3573 = !DILocation(line: 1568, column: 61, scope: !3552)
!3574 = !DILocation(line: 1568, column: 65, scope: !3552)
!3575 = !DILocation(line: 1569, column: 35, scope: !3552)
!3576 = !DILocation(line: 1569, column: 43, scope: !3552)
!3577 = !DILocation(line: 1569, column: 45, scope: !3552)
!3578 = !DILocation(line: 1569, column: 52, scope: !3552)
!3579 = !DILocation(line: 1569, column: 50, scope: !3552)
!3580 = !DILocation(line: 1569, column: 63, scope: !3552)
!3581 = !DILocation(line: 1569, column: 61, scope: !3552)
!3582 = !DILocation(line: 1570, column: 35, scope: !3552)
!3583 = !DILocation(line: 1565, column: 13, scope: !3552)
!3584 = !DILocation(line: 1565, column: 10, scope: !3552)
!3585 = !DILocation(line: 1571, column: 5, scope: !3552)
!3586 = !DILocation(line: 1573, column: 35, scope: !3587)
!3587 = distinct !DILexicalBlock(scope: !3549, file: !1, line: 1572, column: 10)
!3588 = !DILocation(line: 1573, column: 46, scope: !3587)
!3589 = !DILocation(line: 1574, column: 53, scope: !3587)
!3590 = !DILocation(line: 1574, column: 58, scope: !3587)
!3591 = !DILocation(line: 1574, column: 67, scope: !3587)
!3592 = !DILocation(line: 1574, column: 73, scope: !3587)
!3593 = !DILocation(line: 1574, column: 76, scope: !3587)
!3594 = !DILocation(line: 1574, column: 35, scope: !3587)
!3595 = !DILocation(line: 1575, column: 53, scope: !3587)
!3596 = !DILocation(line: 1575, column: 58, scope: !3587)
!3597 = !DILocation(line: 1575, column: 67, scope: !3587)
!3598 = !DILocation(line: 1575, column: 73, scope: !3587)
!3599 = !DILocation(line: 1575, column: 75, scope: !3587)
!3600 = !DILocation(line: 1575, column: 80, scope: !3587)
!3601 = !DILocation(line: 1575, column: 35, scope: !3587)
!3602 = !DILocation(line: 1576, column: 53, scope: !3587)
!3603 = !DILocation(line: 1576, column: 58, scope: !3587)
!3604 = !DILocation(line: 1576, column: 67, scope: !3587)
!3605 = !DILocation(line: 1576, column: 73, scope: !3587)
!3606 = !DILocation(line: 1576, column: 75, scope: !3587)
!3607 = !DILocation(line: 1576, column: 80, scope: !3587)
!3608 = !DILocation(line: 1576, column: 82, scope: !3587)
!3609 = !DILocation(line: 1576, column: 35, scope: !3587)
!3610 = !DILocation(line: 1577, column: 53, scope: !3587)
!3611 = !DILocation(line: 1577, column: 58, scope: !3587)
!3612 = !DILocation(line: 1577, column: 67, scope: !3587)
!3613 = !DILocation(line: 1577, column: 73, scope: !3587)
!3614 = !DILocation(line: 1577, column: 76, scope: !3587)
!3615 = !DILocation(line: 1577, column: 78, scope: !3587)
!3616 = !DILocation(line: 1577, column: 35, scope: !3587)
!3617 = !DILocation(line: 1578, column: 35, scope: !3587)
!3618 = !DILocation(line: 1573, column: 13, scope: !3587)
!3619 = !DILocation(line: 1573, column: 10, scope: !3587)
!3620 = !DILocation(line: 1580, column: 4, scope: !3536)
!3621 = !DILocation(line: 1557, column: 34, scope: !3529)
!3622 = !DILocation(line: 1557, column: 4, scope: !3529)
!3623 = distinct !{!3623, !3533, !3624}
!3624 = !DILocation(line: 1580, column: 4, scope: !3525)
!3625 = !DILocation(line: 1581, column: 3, scope: !3526)
!3626 = !DILocation(line: 1556, column: 33, scope: !3519)
!3627 = !DILocation(line: 1556, column: 3, scope: !3519)
!3628 = distinct !{!3628, !3523, !3629}
!3629 = !DILocation(line: 1581, column: 3, scope: !3516)
!3630 = !DILocation(line: 1583, column: 7, scope: !3631)
!3631 = distinct !DILexicalBlock(scope: !3496, file: !1, line: 1583, column: 7)
!3632 = !DILocation(line: 1583, column: 7, scope: !3496)
!3633 = !DILocation(line: 1584, column: 14, scope: !3631)
!3634 = !DILocation(line: 1584, column: 25, scope: !3631)
!3635 = !DILocation(line: 1584, column: 23, scope: !3631)
!3636 = !DILocation(line: 1584, column: 11, scope: !3631)
!3637 = !DILocation(line: 1584, column: 4, scope: !3631)
!3638 = !DILocation(line: 1585, column: 2, scope: !3496)
!3639 = !DILocation(line: 1547, column: 27, scope: !3491)
!3640 = !DILocation(line: 1547, column: 2, scope: !3491)
!3641 = distinct !{!3641, !3494, !3642}
!3642 = !DILocation(line: 1585, column: 2, scope: !3488)
!3643 = !DILocation(line: 1587, column: 9, scope: !3455)
!3644 = !DILocation(line: 1587, column: 2, scope: !3455)
!3645 = distinct !DISubprogram(name: "BKE_pbvh_raycast_project_ray_root", scope: !1, file: !1, line: 1617, type: !3646, scopeLine: 1618, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3646 = !DISubroutineType(types: !3647)
!3647 = !{null, !410, !573, !141, !141, !141}
!3648 = !DILocalVariable(name: "bvh", arg: 1, scope: !3645, file: !1, line: 1617, type: !410)
!3649 = !DILocation(line: 1617, column: 47, scope: !3645)
!3650 = !DILocalVariable(name: "original", arg: 2, scope: !3645, file: !1, line: 1617, type: !573)
!3651 = !DILocation(line: 1617, column: 57, scope: !3645)
!3652 = !DILocalVariable(name: "ray_start", arg: 3, scope: !3645, file: !1, line: 1617, type: !141)
!3653 = !DILocation(line: 1617, column: 73, scope: !3645)
!3654 = !DILocalVariable(name: "ray_end", arg: 4, scope: !3645, file: !1, line: 1617, type: !141)
!3655 = !DILocation(line: 1617, column: 93, scope: !3645)
!3656 = !DILocalVariable(name: "ray_normal", arg: 5, scope: !3645, file: !1, line: 1617, type: !141)
!3657 = !DILocation(line: 1617, column: 111, scope: !3645)
!3658 = !DILocation(line: 1619, column: 6, scope: !3659)
!3659 = distinct !DILexicalBlock(scope: !3645, file: !1, line: 1619, column: 6)
!3660 = !DILocation(line: 1619, column: 11, scope: !3659)
!3661 = !DILocation(line: 1619, column: 6, scope: !3645)
!3662 = !DILocalVariable(name: "rootmin_start", scope: !3663, file: !1, line: 1620, type: !133)
!3663 = distinct !DILexicalBlock(scope: !3659, file: !1, line: 1619, column: 18)
!3664 = !DILocation(line: 1620, column: 9, scope: !3663)
!3665 = !DILocalVariable(name: "rootmin_end", scope: !3663, file: !1, line: 1620, type: !133)
!3666 = !DILocation(line: 1620, column: 24, scope: !3663)
!3667 = !DILocalVariable(name: "bb_min_root", scope: !3663, file: !1, line: 1621, type: !132)
!3668 = !DILocation(line: 1621, column: 9, scope: !3663)
!3669 = !DILocalVariable(name: "bb_max_root", scope: !3663, file: !1, line: 1621, type: !132)
!3670 = !DILocation(line: 1621, column: 25, scope: !3663)
!3671 = !DILocalVariable(name: "bb_center", scope: !3663, file: !1, line: 1621, type: !132)
!3672 = !DILocation(line: 1621, column: 41, scope: !3663)
!3673 = !DILocalVariable(name: "bb_diff", scope: !3663, file: !1, line: 1621, type: !132)
!3674 = !DILocation(line: 1621, column: 55, scope: !3663)
!3675 = !DILocalVariable(name: "ray", scope: !3663, file: !1, line: 1622, type: !3089)
!3676 = !DILocation(line: 1622, column: 20, scope: !3663)
!3677 = !DILocalVariable(name: "ray_normal_inv", scope: !3663, file: !1, line: 1623, type: !132)
!3678 = !DILocation(line: 1623, column: 9, scope: !3663)
!3679 = !DILocalVariable(name: "offset", scope: !3663, file: !1, line: 1624, type: !133)
!3680 = !DILocation(line: 1624, column: 9, scope: !3663)
!3681 = !DILocalVariable(name: "offset_vec", scope: !3663, file: !1, line: 1625, type: !132)
!3682 = !DILocation(line: 1625, column: 9, scope: !3663)
!3683 = !DILocation(line: 1627, column: 7, scope: !3684)
!3684 = distinct !DILexicalBlock(scope: !3663, file: !1, line: 1627, column: 7)
!3685 = !DILocation(line: 1627, column: 7, scope: !3663)
!3686 = !DILocation(line: 1628, column: 34, scope: !3684)
!3687 = !DILocation(line: 1628, column: 39, scope: !3684)
!3688 = !DILocation(line: 1628, column: 46, scope: !3684)
!3689 = !DILocation(line: 1628, column: 59, scope: !3684)
!3690 = !DILocation(line: 1628, column: 4, scope: !3684)
!3691 = !DILocation(line: 1630, column: 25, scope: !3684)
!3692 = !DILocation(line: 1630, column: 30, scope: !3684)
!3693 = !DILocation(line: 1630, column: 37, scope: !3684)
!3694 = !DILocation(line: 1630, column: 50, scope: !3684)
!3695 = !DILocation(line: 1630, column: 4, scope: !3684)
!3696 = !DILocation(line: 1634, column: 15, scope: !3663)
!3697 = !DILocation(line: 1634, column: 26, scope: !3663)
!3698 = !DILocation(line: 1634, column: 39, scope: !3663)
!3699 = !DILocation(line: 1634, column: 3, scope: !3663)
!3700 = !DILocation(line: 1636, column: 15, scope: !3663)
!3701 = !DILocation(line: 1636, column: 24, scope: !3663)
!3702 = !DILocation(line: 1636, column: 37, scope: !3663)
!3703 = !DILocation(line: 1636, column: 3, scope: !3663)
!3704 = !DILocation(line: 1638, column: 13, scope: !3663)
!3705 = !DILocation(line: 1638, column: 22, scope: !3663)
!3706 = !DILocation(line: 1638, column: 3, scope: !3663)
!3707 = !DILocation(line: 1639, column: 18, scope: !3663)
!3708 = !DILocation(line: 1639, column: 31, scope: !3663)
!3709 = !DILocation(line: 1639, column: 42, scope: !3663)
!3710 = !DILocation(line: 1639, column: 51, scope: !3663)
!3711 = !DILocation(line: 1639, column: 3, scope: !3663)
!3712 = !DILocation(line: 1640, column: 18, scope: !3663)
!3713 = !DILocation(line: 1640, column: 31, scope: !3663)
!3714 = !DILocation(line: 1640, column: 42, scope: !3663)
!3715 = !DILocation(line: 1640, column: 52, scope: !3663)
!3716 = !DILocation(line: 1640, column: 51, scope: !3663)
!3717 = !DILocation(line: 1640, column: 3, scope: !3663)
!3718 = !DILocation(line: 1643, column: 35, scope: !3663)
!3719 = !DILocation(line: 1643, column: 46, scope: !3663)
!3720 = !DILocation(line: 1643, column: 3, scope: !3663)
!3721 = !DILocation(line: 1644, column: 29, scope: !3722)
!3722 = distinct !DILexicalBlock(scope: !3663, file: !1, line: 1644, column: 7)
!3723 = !DILocation(line: 1644, column: 42, scope: !3722)
!3724 = !DILocation(line: 1644, column: 8, scope: !3722)
!3725 = !DILocation(line: 1644, column: 7, scope: !3663)
!3726 = !DILocation(line: 1645, column: 4, scope: !3722)
!3727 = !DILocation(line: 1648, column: 15, scope: !3663)
!3728 = !DILocation(line: 1648, column: 31, scope: !3663)
!3729 = !DILocation(line: 1648, column: 3, scope: !3663)
!3730 = !DILocation(line: 1649, column: 35, scope: !3663)
!3731 = !DILocation(line: 1649, column: 44, scope: !3663)
!3732 = !DILocation(line: 1649, column: 3, scope: !3663)
!3733 = !DILocation(line: 1651, column: 29, scope: !3734)
!3734 = distinct !DILexicalBlock(scope: !3663, file: !1, line: 1651, column: 7)
!3735 = !DILocation(line: 1651, column: 42, scope: !3734)
!3736 = !DILocation(line: 1651, column: 8, scope: !3734)
!3737 = !DILocation(line: 1651, column: 7, scope: !3663)
!3738 = !DILocation(line: 1652, column: 4, scope: !3734)
!3739 = !DILocation(line: 1654, column: 18, scope: !3663)
!3740 = !DILocation(line: 1654, column: 29, scope: !3663)
!3741 = !DILocation(line: 1654, column: 40, scope: !3663)
!3742 = !DILocation(line: 1654, column: 52, scope: !3663)
!3743 = !DILocation(line: 1654, column: 3, scope: !3663)
!3744 = !DILocation(line: 1655, column: 18, scope: !3663)
!3745 = !DILocation(line: 1655, column: 27, scope: !3663)
!3746 = !DILocation(line: 1655, column: 36, scope: !3663)
!3747 = !DILocation(line: 1655, column: 52, scope: !3663)
!3748 = !DILocation(line: 1655, column: 3, scope: !3663)
!3749 = !DILocation(line: 1656, column: 2, scope: !3663)
!3750 = !DILocation(line: 1657, column: 1, scope: !3645)
!3751 = distinct !DISubprogram(name: "sub_v3_v3v3", scope: !2444, file: !2444, line: 357, type: !3752, scopeLine: 358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3752 = !DISubroutineType(types: !3753)
!3753 = !{null, !141, !201, !201}
!3754 = !DILocalVariable(name: "r", arg: 1, scope: !3751, file: !2444, line: 357, type: !141)
!3755 = !DILocation(line: 357, column: 32, scope: !3751)
!3756 = !DILocalVariable(name: "a", arg: 2, scope: !3751, file: !2444, line: 357, type: !201)
!3757 = !DILocation(line: 357, column: 50, scope: !3751)
!3758 = !DILocalVariable(name: "b", arg: 3, scope: !3751, file: !2444, line: 357, type: !201)
!3759 = !DILocation(line: 357, column: 68, scope: !3751)
!3760 = !DILocation(line: 359, column: 9, scope: !3751)
!3761 = !DILocation(line: 359, column: 16, scope: !3751)
!3762 = !DILocation(line: 359, column: 14, scope: !3751)
!3763 = !DILocation(line: 359, column: 2, scope: !3751)
!3764 = !DILocation(line: 359, column: 7, scope: !3751)
!3765 = !DILocation(line: 360, column: 9, scope: !3751)
!3766 = !DILocation(line: 360, column: 16, scope: !3751)
!3767 = !DILocation(line: 360, column: 14, scope: !3751)
!3768 = !DILocation(line: 360, column: 2, scope: !3751)
!3769 = !DILocation(line: 360, column: 7, scope: !3751)
!3770 = !DILocation(line: 361, column: 9, scope: !3751)
!3771 = !DILocation(line: 361, column: 16, scope: !3751)
!3772 = !DILocation(line: 361, column: 14, scope: !3751)
!3773 = !DILocation(line: 361, column: 2, scope: !3751)
!3774 = !DILocation(line: 361, column: 7, scope: !3751)
!3775 = !DILocation(line: 362, column: 1, scope: !3751)
!3776 = distinct !DISubprogram(name: "add_v3_v3", scope: !2444, file: !2444, line: 302, type: !2445, scopeLine: 303, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3777 = !DILocalVariable(name: "r", arg: 1, scope: !3776, file: !2444, line: 302, type: !141)
!3778 = !DILocation(line: 302, column: 30, scope: !3776)
!3779 = !DILocalVariable(name: "a", arg: 2, scope: !3776, file: !2444, line: 302, type: !201)
!3780 = !DILocation(line: 302, column: 48, scope: !3776)
!3781 = !DILocation(line: 304, column: 10, scope: !3776)
!3782 = !DILocation(line: 304, column: 2, scope: !3776)
!3783 = !DILocation(line: 304, column: 7, scope: !3776)
!3784 = !DILocation(line: 305, column: 10, scope: !3776)
!3785 = !DILocation(line: 305, column: 2, scope: !3776)
!3786 = !DILocation(line: 305, column: 7, scope: !3776)
!3787 = !DILocation(line: 306, column: 10, scope: !3776)
!3788 = !DILocation(line: 306, column: 2, scope: !3776)
!3789 = !DILocation(line: 306, column: 7, scope: !3776)
!3790 = !DILocation(line: 307, column: 1, scope: !3776)
!3791 = distinct !DISubprogram(name: "madd_v3_v3v3fl", scope: !2444, file: !2444, line: 527, type: !3792, scopeLine: 528, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3792 = !DISubroutineType(types: !3793)
!3793 = !{null, !141, !201, !201, !133}
!3794 = !DILocalVariable(name: "r", arg: 1, scope: !3791, file: !2444, line: 527, type: !141)
!3795 = !DILocation(line: 527, column: 35, scope: !3791)
!3796 = !DILocalVariable(name: "a", arg: 2, scope: !3791, file: !2444, line: 527, type: !201)
!3797 = !DILocation(line: 527, column: 53, scope: !3791)
!3798 = !DILocalVariable(name: "b", arg: 3, scope: !3791, file: !2444, line: 527, type: !201)
!3799 = !DILocation(line: 527, column: 71, scope: !3791)
!3800 = !DILocalVariable(name: "f", arg: 4, scope: !3791, file: !2444, line: 527, type: !133)
!3801 = !DILocation(line: 527, column: 83, scope: !3791)
!3802 = !DILocation(line: 529, column: 9, scope: !3791)
!3803 = !DILocation(line: 529, column: 16, scope: !3791)
!3804 = !DILocation(line: 529, column: 23, scope: !3791)
!3805 = !DILocation(line: 529, column: 21, scope: !3791)
!3806 = !DILocation(line: 529, column: 14, scope: !3791)
!3807 = !DILocation(line: 529, column: 2, scope: !3791)
!3808 = !DILocation(line: 529, column: 7, scope: !3791)
!3809 = !DILocation(line: 530, column: 9, scope: !3791)
!3810 = !DILocation(line: 530, column: 16, scope: !3791)
!3811 = !DILocation(line: 530, column: 23, scope: !3791)
!3812 = !DILocation(line: 530, column: 21, scope: !3791)
!3813 = !DILocation(line: 530, column: 14, scope: !3791)
!3814 = !DILocation(line: 530, column: 2, scope: !3791)
!3815 = !DILocation(line: 530, column: 7, scope: !3791)
!3816 = !DILocation(line: 531, column: 9, scope: !3791)
!3817 = !DILocation(line: 531, column: 16, scope: !3791)
!3818 = !DILocation(line: 531, column: 23, scope: !3791)
!3819 = !DILocation(line: 531, column: 21, scope: !3791)
!3820 = !DILocation(line: 531, column: 14, scope: !3791)
!3821 = !DILocation(line: 531, column: 2, scope: !3791)
!3822 = !DILocation(line: 531, column: 7, scope: !3791)
!3823 = !DILocation(line: 532, column: 1, scope: !3791)
!3824 = distinct !DISubprogram(name: "mul_v3_v3fl", scope: !2444, file: !2444, line: 399, type: !3825, scopeLine: 400, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3825 = !DISubroutineType(types: !3826)
!3826 = !{null, !141, !201, !133}
!3827 = !DILocalVariable(name: "r", arg: 1, scope: !3824, file: !2444, line: 399, type: !141)
!3828 = !DILocation(line: 399, column: 32, scope: !3824)
!3829 = !DILocalVariable(name: "a", arg: 2, scope: !3824, file: !2444, line: 399, type: !201)
!3830 = !DILocation(line: 399, column: 50, scope: !3824)
!3831 = !DILocalVariable(name: "f", arg: 3, scope: !3824, file: !2444, line: 399, type: !133)
!3832 = !DILocation(line: 399, column: 62, scope: !3824)
!3833 = !DILocation(line: 401, column: 9, scope: !3824)
!3834 = !DILocation(line: 401, column: 16, scope: !3824)
!3835 = !DILocation(line: 401, column: 14, scope: !3824)
!3836 = !DILocation(line: 401, column: 2, scope: !3824)
!3837 = !DILocation(line: 401, column: 7, scope: !3824)
!3838 = !DILocation(line: 402, column: 9, scope: !3824)
!3839 = !DILocation(line: 402, column: 16, scope: !3824)
!3840 = !DILocation(line: 402, column: 14, scope: !3824)
!3841 = !DILocation(line: 402, column: 2, scope: !3824)
!3842 = !DILocation(line: 402, column: 7, scope: !3824)
!3843 = !DILocation(line: 403, column: 9, scope: !3824)
!3844 = !DILocation(line: 403, column: 16, scope: !3824)
!3845 = !DILocation(line: 403, column: 14, scope: !3824)
!3846 = !DILocation(line: 403, column: 2, scope: !3824)
!3847 = !DILocation(line: 403, column: 7, scope: !3824)
!3848 = !DILocation(line: 404, column: 1, scope: !3824)
!3849 = distinct !DISubprogram(name: "BKE_pbvh_node_draw", scope: !1, file: !1, line: 1667, type: !1712, scopeLine: 1668, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3850 = !DILocalVariable(name: "node", arg: 1, scope: !3849, file: !1, line: 1667, type: !419)
!3851 = !DILocation(line: 1667, column: 35, scope: !3849)
!3852 = !DILocalVariable(name: "data_v", arg: 2, scope: !3849, file: !1, line: 1667, type: !137)
!3853 = !DILocation(line: 1667, column: 47, scope: !3849)
!3854 = !DILocalVariable(name: "data", scope: !3849, file: !1, line: 1669, type: !3855)
!3855 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3856, size: 64)
!3856 = !DIDerivedType(tag: DW_TAG_typedef, name: "PBVHNodeDrawData", file: !1, line: 1665, baseType: !3857)
!3857 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1, line: 1662, size: 128, elements: !3858)
!3858 = !{!3859, !3864}
!3859 = !DIDerivedType(tag: DW_TAG_member, name: "setMaterial", scope: !3857, file: !1, line: 1663, baseType: !3860, size: 64)
!3860 = !DIDerivedType(tag: DW_TAG_typedef, name: "DMSetMaterial", file: !553, line: 146, baseType: !3861)
!3861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3862, size: 64)
!3862 = !DISubroutineType(types: !3863)
!3863 = !{!142, !142, !137}
!3864 = !DIDerivedType(tag: DW_TAG_member, name: "wireframe", scope: !3857, file: !1, line: 1664, baseType: !573, size: 8, offset: 64)
!3865 = !DILocation(line: 1669, column: 20, scope: !3849)
!3866 = !DILocation(line: 1669, column: 27, scope: !3849)
!3867 = !DILocation(line: 1688, column: 8, scope: !3868)
!3868 = distinct !DILexicalBlock(scope: !3849, file: !1, line: 1688, column: 6)
!3869 = !DILocation(line: 1688, column: 14, scope: !3868)
!3870 = !DILocation(line: 1688, column: 19, scope: !3868)
!3871 = !DILocation(line: 1688, column: 6, scope: !3849)
!3872 = !DILocation(line: 1689, column: 25, scope: !3873)
!3873 = distinct !DILexicalBlock(scope: !3868, file: !1, line: 1688, column: 40)
!3874 = !DILocation(line: 1689, column: 31, scope: !3873)
!3875 = !DILocation(line: 1690, column: 20, scope: !3873)
!3876 = !DILocation(line: 1690, column: 26, scope: !3873)
!3877 = !DILocation(line: 1691, column: 20, scope: !3873)
!3878 = !DILocation(line: 1691, column: 26, scope: !3873)
!3879 = !DILocation(line: 1689, column: 3, scope: !3873)
!3880 = !DILocation(line: 1692, column: 2, scope: !3873)
!3881 = !DILocation(line: 1693, column: 1, scope: !3849)
!3882 = distinct !DISubprogram(name: "BKE_pbvh_node_planes_contain_AABB", scope: !1, file: !1, line: 1735, type: !1463, scopeLine: 1736, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3883 = !DILocalVariable(name: "node", arg: 1, scope: !3882, file: !1, line: 1735, type: !419)
!3884 = !DILocation(line: 1735, column: 50, scope: !3882)
!3885 = !DILocalVariable(name: "data", arg: 2, scope: !3882, file: !1, line: 1735, type: !137)
!3886 = !DILocation(line: 1735, column: 62, scope: !3882)
!3887 = !DILocalVariable(name: "bb_min", scope: !3882, file: !1, line: 1737, type: !132)
!3888 = !DILocation(line: 1737, column: 8, scope: !3882)
!3889 = !DILocalVariable(name: "bb_max", scope: !3882, file: !1, line: 1737, type: !132)
!3890 = !DILocation(line: 1737, column: 19, scope: !3882)
!3891 = !DILocation(line: 1739, column: 23, scope: !3882)
!3892 = !DILocation(line: 1739, column: 29, scope: !3882)
!3893 = !DILocation(line: 1739, column: 37, scope: !3882)
!3894 = !DILocation(line: 1739, column: 2, scope: !3882)
!3895 = !DILocation(line: 1740, column: 26, scope: !3882)
!3896 = !DILocation(line: 1740, column: 34, scope: !3882)
!3897 = !DILocation(line: 1740, column: 42, scope: !3882)
!3898 = !DILocation(line: 1740, column: 9, scope: !3882)
!3899 = !DILocation(line: 1740, column: 48, scope: !3882)
!3900 = !DILocation(line: 1740, column: 2, scope: !3882)
!3901 = distinct !DISubprogram(name: "test_planes_aabb", scope: !1, file: !1, line: 1706, type: !3902, scopeLine: 1709, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!3902 = !DISubroutineType(types: !3903)
!3903 = !{!3904, !201, !201, !3905}
!3904 = !DIDerivedType(tag: DW_TAG_typedef, name: "PlaneAABBIsect", file: !1, line: 1699, baseType: !63)
!3905 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3906, size: 64)
!3906 = !DICompositeType(tag: DW_TAG_array_type, baseType: !202, size: 128, elements: !439)
!3907 = !DILocalVariable(name: "bb_min", arg: 1, scope: !3901, file: !1, line: 1706, type: !201)
!3908 = !DILocation(line: 1706, column: 52, scope: !3901)
!3909 = !DILocalVariable(name: "bb_max", arg: 2, scope: !3901, file: !1, line: 1707, type: !201)
!3910 = !DILocation(line: 1707, column: 52, scope: !3901)
!3911 = !DILocalVariable(name: "planes", arg: 3, scope: !3901, file: !1, line: 1708, type: !3905)
!3912 = !DILocation(line: 1708, column: 54, scope: !3901)
!3913 = !DILocalVariable(name: "vmin", scope: !3901, file: !1, line: 1710, type: !132)
!3914 = !DILocation(line: 1710, column: 8, scope: !3901)
!3915 = !DILocalVariable(name: "vmax", scope: !3901, file: !1, line: 1710, type: !132)
!3916 = !DILocation(line: 1710, column: 17, scope: !3901)
!3917 = !DILocalVariable(name: "ret", scope: !3901, file: !1, line: 1711, type: !3904)
!3918 = !DILocation(line: 1711, column: 17, scope: !3901)
!3919 = !DILocalVariable(name: "i", scope: !3901, file: !1, line: 1712, type: !142)
!3920 = !DILocation(line: 1712, column: 6, scope: !3901)
!3921 = !DILocalVariable(name: "axis", scope: !3901, file: !1, line: 1712, type: !142)
!3922 = !DILocation(line: 1712, column: 9, scope: !3901)
!3923 = !DILocation(line: 1714, column: 9, scope: !3924)
!3924 = distinct !DILexicalBlock(scope: !3901, file: !1, line: 1714, column: 2)
!3925 = !DILocation(line: 1714, column: 7, scope: !3924)
!3926 = !DILocation(line: 1714, column: 14, scope: !3927)
!3927 = distinct !DILexicalBlock(scope: !3924, file: !1, line: 1714, column: 2)
!3928 = !DILocation(line: 1714, column: 16, scope: !3927)
!3929 = !DILocation(line: 1714, column: 2, scope: !3924)
!3930 = !DILocation(line: 1715, column: 13, scope: !3931)
!3931 = distinct !DILexicalBlock(scope: !3932, file: !1, line: 1715, column: 3)
!3932 = distinct !DILexicalBlock(scope: !3927, file: !1, line: 1714, column: 26)
!3933 = !DILocation(line: 1715, column: 8, scope: !3931)
!3934 = !DILocation(line: 1715, column: 18, scope: !3935)
!3935 = distinct !DILexicalBlock(scope: !3931, file: !1, line: 1715, column: 3)
!3936 = !DILocation(line: 1715, column: 23, scope: !3935)
!3937 = !DILocation(line: 1715, column: 3, scope: !3931)
!3938 = !DILocation(line: 1716, column: 8, scope: !3939)
!3939 = distinct !DILexicalBlock(scope: !3940, file: !1, line: 1716, column: 8)
!3940 = distinct !DILexicalBlock(scope: !3935, file: !1, line: 1715, column: 36)
!3941 = !DILocation(line: 1716, column: 15, scope: !3939)
!3942 = !DILocation(line: 1716, column: 18, scope: !3939)
!3943 = !DILocation(line: 1716, column: 24, scope: !3939)
!3944 = !DILocation(line: 1716, column: 8, scope: !3940)
!3945 = !DILocation(line: 1717, column: 18, scope: !3946)
!3946 = distinct !DILexicalBlock(scope: !3939, file: !1, line: 1716, column: 29)
!3947 = !DILocation(line: 1717, column: 25, scope: !3946)
!3948 = !DILocation(line: 1717, column: 10, scope: !3946)
!3949 = !DILocation(line: 1717, column: 5, scope: !3946)
!3950 = !DILocation(line: 1717, column: 16, scope: !3946)
!3951 = !DILocation(line: 1718, column: 18, scope: !3946)
!3952 = !DILocation(line: 1718, column: 25, scope: !3946)
!3953 = !DILocation(line: 1718, column: 10, scope: !3946)
!3954 = !DILocation(line: 1718, column: 5, scope: !3946)
!3955 = !DILocation(line: 1718, column: 16, scope: !3946)
!3956 = !DILocation(line: 1719, column: 4, scope: !3946)
!3957 = !DILocation(line: 1721, column: 18, scope: !3958)
!3958 = distinct !DILexicalBlock(scope: !3939, file: !1, line: 1720, column: 9)
!3959 = !DILocation(line: 1721, column: 25, scope: !3958)
!3960 = !DILocation(line: 1721, column: 10, scope: !3958)
!3961 = !DILocation(line: 1721, column: 5, scope: !3958)
!3962 = !DILocation(line: 1721, column: 16, scope: !3958)
!3963 = !DILocation(line: 1722, column: 18, scope: !3958)
!3964 = !DILocation(line: 1722, column: 25, scope: !3958)
!3965 = !DILocation(line: 1722, column: 10, scope: !3958)
!3966 = !DILocation(line: 1722, column: 5, scope: !3958)
!3967 = !DILocation(line: 1722, column: 16, scope: !3958)
!3968 = !DILocation(line: 1724, column: 3, scope: !3940)
!3969 = !DILocation(line: 1715, column: 28, scope: !3935)
!3970 = !DILocation(line: 1715, column: 3, scope: !3935)
!3971 = distinct !{!3971, !3937, !3972}
!3972 = !DILocation(line: 1724, column: 3, scope: !3931)
!3973 = !DILocation(line: 1726, column: 16, scope: !3974)
!3974 = distinct !DILexicalBlock(scope: !3932, file: !1, line: 1726, column: 7)
!3975 = !DILocation(line: 1726, column: 23, scope: !3974)
!3976 = !DILocation(line: 1726, column: 27, scope: !3974)
!3977 = !DILocation(line: 1726, column: 7, scope: !3974)
!3978 = !DILocation(line: 1726, column: 35, scope: !3974)
!3979 = !DILocation(line: 1726, column: 42, scope: !3974)
!3980 = !DILocation(line: 1726, column: 33, scope: !3974)
!3981 = !DILocation(line: 1726, column: 48, scope: !3974)
!3982 = !DILocation(line: 1726, column: 7, scope: !3932)
!3983 = !DILocation(line: 1727, column: 4, scope: !3974)
!3984 = !DILocation(line: 1728, column: 21, scope: !3985)
!3985 = distinct !DILexicalBlock(scope: !3974, file: !1, line: 1728, column: 12)
!3986 = !DILocation(line: 1728, column: 28, scope: !3985)
!3987 = !DILocation(line: 1728, column: 32, scope: !3985)
!3988 = !DILocation(line: 1728, column: 12, scope: !3985)
!3989 = !DILocation(line: 1728, column: 40, scope: !3985)
!3990 = !DILocation(line: 1728, column: 47, scope: !3985)
!3991 = !DILocation(line: 1728, column: 38, scope: !3985)
!3992 = !DILocation(line: 1728, column: 53, scope: !3985)
!3993 = !DILocation(line: 1728, column: 12, scope: !3974)
!3994 = !DILocation(line: 1729, column: 8, scope: !3985)
!3995 = !DILocation(line: 1729, column: 4, scope: !3985)
!3996 = !DILocation(line: 1730, column: 2, scope: !3932)
!3997 = !DILocation(line: 1714, column: 21, scope: !3927)
!3998 = !DILocation(line: 1714, column: 2, scope: !3927)
!3999 = distinct !{!3999, !3929, !4000}
!4000 = !DILocation(line: 1730, column: 2, scope: !3924)
!4001 = !DILocation(line: 1732, column: 9, scope: !3901)
!4002 = !DILocation(line: 1732, column: 2, scope: !3901)
!4003 = !DILocation(line: 1733, column: 1, scope: !3901)
!4004 = distinct !DISubprogram(name: "BKE_pbvh_node_planes_exclude_AABB", scope: !1, file: !1, line: 1743, type: !1463, scopeLine: 1744, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4005 = !DILocalVariable(name: "node", arg: 1, scope: !4004, file: !1, line: 1743, type: !419)
!4006 = !DILocation(line: 1743, column: 50, scope: !4004)
!4007 = !DILocalVariable(name: "data", arg: 2, scope: !4004, file: !1, line: 1743, type: !137)
!4008 = !DILocation(line: 1743, column: 62, scope: !4004)
!4009 = !DILocalVariable(name: "bb_min", scope: !4004, file: !1, line: 1745, type: !132)
!4010 = !DILocation(line: 1745, column: 8, scope: !4004)
!4011 = !DILocalVariable(name: "bb_max", scope: !4004, file: !1, line: 1745, type: !132)
!4012 = !DILocation(line: 1745, column: 19, scope: !4004)
!4013 = !DILocation(line: 1747, column: 23, scope: !4004)
!4014 = !DILocation(line: 1747, column: 29, scope: !4004)
!4015 = !DILocation(line: 1747, column: 37, scope: !4004)
!4016 = !DILocation(line: 1747, column: 2, scope: !4004)
!4017 = !DILocation(line: 1748, column: 26, scope: !4004)
!4018 = !DILocation(line: 1748, column: 34, scope: !4004)
!4019 = !DILocation(line: 1748, column: 42, scope: !4004)
!4020 = !DILocation(line: 1748, column: 9, scope: !4004)
!4021 = !DILocation(line: 1748, column: 48, scope: !4004)
!4022 = !DILocation(line: 1748, column: 2, scope: !4004)
!4023 = distinct !DISubprogram(name: "BKE_pbvh_draw", scope: !1, file: !1, line: 1760, type: !4024, scopeLine: 1762, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4024 = !DISubroutineType(types: !4025)
!4025 = !{null, !410, !4026, !452, !3860, !573}
!4026 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4027, size: 64)
!4027 = !DICompositeType(tag: DW_TAG_array_type, baseType: !133, size: 128, elements: !439)
!4028 = !DILocalVariable(name: "bvh", arg: 1, scope: !4023, file: !1, line: 1760, type: !410)
!4029 = !DILocation(line: 1760, column: 26, scope: !4023)
!4030 = !DILocalVariable(name: "planes", arg: 2, scope: !4023, file: !1, line: 1760, type: !4026)
!4031 = !DILocation(line: 1760, column: 39, scope: !4023)
!4032 = !DILocalVariable(name: "face_nors", arg: 3, scope: !4023, file: !1, line: 1760, type: !452)
!4033 = !DILocation(line: 1760, column: 59, scope: !4023)
!4034 = !DILocalVariable(name: "setMaterial", arg: 4, scope: !4023, file: !1, line: 1761, type: !3860)
!4035 = !DILocation(line: 1761, column: 34, scope: !4023)
!4036 = !DILocalVariable(name: "wireframe", arg: 5, scope: !4023, file: !1, line: 1761, type: !573)
!4037 = !DILocation(line: 1761, column: 52, scope: !4023)
!4038 = !DILocalVariable(name: "draw_data", scope: !4023, file: !1, line: 1763, type: !3856)
!4039 = !DILocation(line: 1763, column: 19, scope: !4023)
!4040 = !DILocation(line: 1763, column: 31, scope: !4023)
!4041 = !DILocation(line: 1763, column: 32, scope: !4023)
!4042 = !DILocation(line: 1763, column: 45, scope: !4023)
!4043 = !DILocalVariable(name: "nodes", scope: !4023, file: !1, line: 1764, type: !1466)
!4044 = !DILocation(line: 1764, column: 13, scope: !4023)
!4045 = !DILocalVariable(name: "a", scope: !4023, file: !1, line: 1765, type: !142)
!4046 = !DILocation(line: 1765, column: 6, scope: !4023)
!4047 = !DILocalVariable(name: "totnode", scope: !4023, file: !1, line: 1765, type: !142)
!4048 = !DILocation(line: 1765, column: 9, scope: !4023)
!4049 = !DILocation(line: 1767, column: 9, scope: !4050)
!4050 = distinct !DILexicalBlock(scope: !4023, file: !1, line: 1767, column: 2)
!4051 = !DILocation(line: 1767, column: 7, scope: !4050)
!4052 = !DILocation(line: 1767, column: 14, scope: !4053)
!4053 = distinct !DILexicalBlock(scope: !4050, file: !1, line: 1767, column: 2)
!4054 = !DILocation(line: 1767, column: 18, scope: !4053)
!4055 = !DILocation(line: 1767, column: 23, scope: !4053)
!4056 = !DILocation(line: 1767, column: 16, scope: !4053)
!4057 = !DILocation(line: 1767, column: 2, scope: !4050)
!4058 = !DILocation(line: 1768, column: 35, scope: !4053)
!4059 = !DILocation(line: 1768, column: 41, scope: !4053)
!4060 = !DILocation(line: 1768, column: 46, scope: !4053)
!4061 = !DILocation(line: 1768, column: 52, scope: !4053)
!4062 = !DILocation(line: 1768, column: 3, scope: !4053)
!4063 = !DILocation(line: 1767, column: 33, scope: !4053)
!4064 = !DILocation(line: 1767, column: 2, scope: !4053)
!4065 = distinct !{!4065, !4057, !4066}
!4066 = !DILocation(line: 1768, column: 54, scope: !4050)
!4067 = !DILocation(line: 1770, column: 25, scope: !4023)
!4068 = !DILocation(line: 1770, column: 2, scope: !4023)
!4069 = !DILocation(line: 1773, column: 22, scope: !4023)
!4070 = !DILocation(line: 1773, column: 27, scope: !4023)
!4071 = !DILocation(line: 1773, column: 34, scope: !4023)
!4072 = !DILocation(line: 1773, column: 43, scope: !4023)
!4073 = !DILocation(line: 1773, column: 2, scope: !4023)
!4074 = !DILocation(line: 1774, column: 27, scope: !4023)
!4075 = !DILocation(line: 1774, column: 32, scope: !4023)
!4076 = !DILocation(line: 1774, column: 39, scope: !4023)
!4077 = !DILocation(line: 1774, column: 2, scope: !4023)
!4078 = !DILocation(line: 1776, column: 6, scope: !4079)
!4079 = distinct !DILexicalBlock(scope: !4023, file: !1, line: 1776, column: 6)
!4080 = !DILocation(line: 1776, column: 6, scope: !4023)
!4081 = !DILocation(line: 1776, column: 13, scope: !4079)
!4082 = !DILocation(line: 1776, column: 23, scope: !4079)
!4083 = !DILocation(line: 1778, column: 6, scope: !4084)
!4084 = distinct !DILexicalBlock(scope: !4023, file: !1, line: 1778, column: 6)
!4085 = !DILocation(line: 1778, column: 6, scope: !4023)
!4086 = !DILocation(line: 1779, column: 28, scope: !4087)
!4087 = distinct !DILexicalBlock(scope: !4084, file: !1, line: 1778, column: 14)
!4088 = !DILocation(line: 1780, column: 28, scope: !4087)
!4089 = !DILocation(line: 1780, column: 56, scope: !4087)
!4090 = !DILocation(line: 1779, column: 3, scope: !4087)
!4091 = !DILocation(line: 1781, column: 2, scope: !4087)
!4092 = !DILocation(line: 1783, column: 28, scope: !4093)
!4093 = distinct !DILexicalBlock(scope: !4084, file: !1, line: 1782, column: 7)
!4094 = !DILocation(line: 1783, column: 65, scope: !4093)
!4095 = !DILocation(line: 1783, column: 3, scope: !4093)
!4096 = !DILocation(line: 1786, column: 8, scope: !4097)
!4097 = distinct !DILexicalBlock(scope: !4023, file: !1, line: 1786, column: 6)
!4098 = !DILocation(line: 1786, column: 6, scope: !4097)
!4099 = !DILocation(line: 1786, column: 20, scope: !4097)
!4100 = !DILocation(line: 1786, column: 6, scope: !4023)
!4101 = !DILocation(line: 1787, column: 16, scope: !4097)
!4102 = !DILocation(line: 1787, column: 3, scope: !4097)
!4103 = !DILocation(line: 1788, column: 1, scope: !4023)
!4104 = distinct !DISubprogram(name: "pbvh_node_check_diffuse_changed", scope: !1, file: !1, line: 1751, type: !1822, scopeLine: 1752, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4105 = !DILocalVariable(name: "bvh", arg: 1, scope: !4104, file: !1, line: 1751, type: !410)
!4106 = !DILocation(line: 1751, column: 51, scope: !4104)
!4107 = !DILocalVariable(name: "node", arg: 2, scope: !4104, file: !1, line: 1751, type: !419)
!4108 = !DILocation(line: 1751, column: 66, scope: !4104)
!4109 = !DILocation(line: 1753, column: 7, scope: !4110)
!4110 = distinct !DILexicalBlock(scope: !4104, file: !1, line: 1753, column: 6)
!4111 = !DILocation(line: 1753, column: 13, scope: !4110)
!4112 = !DILocation(line: 1753, column: 6, scope: !4104)
!4113 = !DILocation(line: 1754, column: 3, scope: !4110)
!4114 = !DILocation(line: 1756, column: 39, scope: !4115)
!4115 = distinct !DILexicalBlock(scope: !4104, file: !1, line: 1756, column: 6)
!4116 = !DILocation(line: 1756, column: 45, scope: !4115)
!4117 = !DILocation(line: 1756, column: 59, scope: !4115)
!4118 = !DILocation(line: 1756, column: 65, scope: !4115)
!4119 = !DILocation(line: 1756, column: 75, scope: !4115)
!4120 = !DILocation(line: 1756, column: 80, scope: !4115)
!4121 = !DILocation(line: 1756, column: 6, scope: !4115)
!4122 = !DILocation(line: 1756, column: 6, scope: !4104)
!4123 = !DILocation(line: 1757, column: 3, scope: !4115)
!4124 = !DILocation(line: 1757, column: 9, scope: !4115)
!4125 = !DILocation(line: 1757, column: 14, scope: !4115)
!4126 = !DILocation(line: 1758, column: 1, scope: !4104)
!4127 = distinct !DISubprogram(name: "pbvh_update_draw_buffers", scope: !1, file: !1, line: 1086, type: !4128, scopeLine: 1087, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4128 = !DISubroutineType(types: !4129)
!4129 = !{null, !410, !1466, !142}
!4130 = !DILocalVariable(name: "bvh", arg: 1, scope: !4127, file: !1, line: 1086, type: !410)
!4131 = !DILocation(line: 1086, column: 44, scope: !4127)
!4132 = !DILocalVariable(name: "nodes", arg: 2, scope: !4127, file: !1, line: 1086, type: !1466)
!4133 = !DILocation(line: 1086, column: 60, scope: !4127)
!4134 = !DILocalVariable(name: "totnode", arg: 3, scope: !4127, file: !1, line: 1086, type: !142)
!4135 = !DILocation(line: 1086, column: 71, scope: !4127)
!4136 = !DILocalVariable(name: "node", scope: !4127, file: !1, line: 1088, type: !419)
!4137 = !DILocation(line: 1088, column: 12, scope: !4127)
!4138 = !DILocalVariable(name: "n", scope: !4127, file: !1, line: 1089, type: !142)
!4139 = !DILocation(line: 1089, column: 6, scope: !4127)
!4140 = !DILocation(line: 1092, column: 9, scope: !4141)
!4141 = distinct !DILexicalBlock(scope: !4127, file: !1, line: 1092, column: 2)
!4142 = !DILocation(line: 1092, column: 7, scope: !4141)
!4143 = !DILocation(line: 1092, column: 14, scope: !4144)
!4144 = distinct !DILexicalBlock(scope: !4141, file: !1, line: 1092, column: 2)
!4145 = !DILocation(line: 1092, column: 18, scope: !4144)
!4146 = !DILocation(line: 1092, column: 16, scope: !4144)
!4147 = !DILocation(line: 1092, column: 2, scope: !4141)
!4148 = !DILocation(line: 1093, column: 10, scope: !4149)
!4149 = distinct !DILexicalBlock(scope: !4144, file: !1, line: 1092, column: 32)
!4150 = !DILocation(line: 1093, column: 16, scope: !4149)
!4151 = !DILocation(line: 1093, column: 8, scope: !4149)
!4152 = !DILocation(line: 1095, column: 7, scope: !4153)
!4153 = distinct !DILexicalBlock(scope: !4149, file: !1, line: 1095, column: 7)
!4154 = !DILocation(line: 1095, column: 13, scope: !4153)
!4155 = !DILocation(line: 1095, column: 18, scope: !4153)
!4156 = !DILocation(line: 1095, column: 7, scope: !4149)
!4157 = !DILocation(line: 1096, column: 26, scope: !4158)
!4158 = distinct !DILexicalBlock(scope: !4153, file: !1, line: 1095, column: 45)
!4159 = !DILocation(line: 1096, column: 32, scope: !4158)
!4160 = !DILocation(line: 1096, column: 4, scope: !4158)
!4161 = !DILocation(line: 1097, column: 12, scope: !4158)
!4162 = !DILocation(line: 1097, column: 17, scope: !4158)
!4163 = !DILocation(line: 1097, column: 4, scope: !4158)
!4164 = !DILocation(line: 1100, column: 35, scope: !4165)
!4165 = distinct !DILexicalBlock(scope: !4158, file: !1, line: 1097, column: 23)
!4166 = !DILocation(line: 1100, column: 41, scope: !4165)
!4167 = !DILocation(line: 1101, column: 33, scope: !4165)
!4168 = !DILocation(line: 1101, column: 39, scope: !4165)
!4169 = !DILocation(line: 1102, column: 33, scope: !4165)
!4170 = !DILocation(line: 1102, column: 38, scope: !4165)
!4171 = !DILocation(line: 1103, column: 33, scope: !4165)
!4172 = !DILocation(line: 1103, column: 38, scope: !4165)
!4173 = !DILocation(line: 1103, column: 46, scope: !4165)
!4174 = !DILocation(line: 1100, column: 7, scope: !4165)
!4175 = !DILocation(line: 1099, column: 6, scope: !4165)
!4176 = !DILocation(line: 1099, column: 12, scope: !4165)
!4177 = !DILocation(line: 1099, column: 25, scope: !4165)
!4178 = !DILocation(line: 1104, column: 6, scope: !4165)
!4179 = !DILocation(line: 1107, column: 35, scope: !4165)
!4180 = !DILocation(line: 1107, column: 41, scope: !4165)
!4181 = !DILocation(line: 1108, column: 33, scope: !4165)
!4182 = !DILocation(line: 1108, column: 38, scope: !4165)
!4183 = !DILocation(line: 1108, column: 45, scope: !4165)
!4184 = !DILocation(line: 1108, column: 50, scope: !4165)
!4185 = !DILocation(line: 1109, column: 33, scope: !4165)
!4186 = !DILocation(line: 1109, column: 39, scope: !4165)
!4187 = !DILocation(line: 1110, column: 33, scope: !4165)
!4188 = !DILocation(line: 1110, column: 39, scope: !4165)
!4189 = !DILocation(line: 1107, column: 7, scope: !4165)
!4190 = !DILocation(line: 1106, column: 6, scope: !4165)
!4191 = !DILocation(line: 1106, column: 12, scope: !4165)
!4192 = !DILocation(line: 1106, column: 25, scope: !4165)
!4193 = !DILocation(line: 1111, column: 6, scope: !4165)
!4194 = !DILocation(line: 1114, column: 36, scope: !4165)
!4195 = !DILocation(line: 1114, column: 41, scope: !4165)
!4196 = !DILocation(line: 1114, column: 47, scope: !4165)
!4197 = !DILocation(line: 1114, column: 7, scope: !4165)
!4198 = !DILocation(line: 1113, column: 6, scope: !4165)
!4199 = !DILocation(line: 1113, column: 12, scope: !4165)
!4200 = !DILocation(line: 1113, column: 25, scope: !4165)
!4201 = !DILocation(line: 1116, column: 6, scope: !4165)
!4202 = !DILocation(line: 1119, column: 4, scope: !4158)
!4203 = !DILocation(line: 1119, column: 10, scope: !4158)
!4204 = !DILocation(line: 1119, column: 15, scope: !4158)
!4205 = !DILocation(line: 1120, column: 3, scope: !4158)
!4206 = !DILocation(line: 1122, column: 7, scope: !4207)
!4207 = distinct !DILexicalBlock(scope: !4149, file: !1, line: 1122, column: 7)
!4208 = !DILocation(line: 1122, column: 13, scope: !4207)
!4209 = !DILocation(line: 1122, column: 18, scope: !4207)
!4210 = !DILocation(line: 1122, column: 7, scope: !4149)
!4211 = !DILocation(line: 1123, column: 12, scope: !4212)
!4212 = distinct !DILexicalBlock(scope: !4207, file: !1, line: 1122, column: 44)
!4213 = !DILocation(line: 1123, column: 17, scope: !4212)
!4214 = !DILocation(line: 1123, column: 4, scope: !4212)
!4215 = !DILocation(line: 1125, column: 35, scope: !4216)
!4216 = distinct !DILexicalBlock(scope: !4212, file: !1, line: 1123, column: 23)
!4217 = !DILocation(line: 1125, column: 41, scope: !4216)
!4218 = !DILocation(line: 1126, column: 30, scope: !4216)
!4219 = !DILocation(line: 1126, column: 35, scope: !4216)
!4220 = !DILocation(line: 1127, column: 30, scope: !4216)
!4221 = !DILocation(line: 1127, column: 35, scope: !4216)
!4222 = !DILocation(line: 1128, column: 30, scope: !4216)
!4223 = !DILocation(line: 1128, column: 36, scope: !4216)
!4224 = !DILocation(line: 1129, column: 30, scope: !4216)
!4225 = !DILocation(line: 1129, column: 36, scope: !4216)
!4226 = !DILocation(line: 1130, column: 31, scope: !4216)
!4227 = !DILocation(line: 1130, column: 36, scope: !4216)
!4228 = !DILocation(line: 1131, column: 30, scope: !4216)
!4229 = !DILocation(line: 1131, column: 35, scope: !4216)
!4230 = !DILocation(line: 1125, column: 6, scope: !4216)
!4231 = !DILocation(line: 1132, column: 6, scope: !4216)
!4232 = !DILocation(line: 1134, column: 35, scope: !4216)
!4233 = !DILocation(line: 1134, column: 41, scope: !4216)
!4234 = !DILocation(line: 1135, column: 30, scope: !4216)
!4235 = !DILocation(line: 1135, column: 35, scope: !4216)
!4236 = !DILocation(line: 1136, column: 30, scope: !4216)
!4237 = !DILocation(line: 1136, column: 36, scope: !4216)
!4238 = !DILocation(line: 1137, column: 30, scope: !4216)
!4239 = !DILocation(line: 1137, column: 36, scope: !4216)
!4240 = !DILocation(line: 1138, column: 30, scope: !4216)
!4241 = !DILocation(line: 1138, column: 36, scope: !4216)
!4242 = !DILocation(line: 1137, column: 47, scope: !4216)
!4243 = !DILocation(line: 1139, column: 51, scope: !4216)
!4244 = !DILocation(line: 1139, column: 56, scope: !4216)
!4245 = !DILocation(line: 1139, column: 30, scope: !4216)
!4246 = !DILocation(line: 1141, column: 30, scope: !4216)
!4247 = !DILocation(line: 1141, column: 36, scope: !4216)
!4248 = !DILocation(line: 1142, column: 30, scope: !4216)
!4249 = !DILocation(line: 1142, column: 35, scope: !4216)
!4250 = !DILocation(line: 1134, column: 6, scope: !4216)
!4251 = !DILocation(line: 1143, column: 6, scope: !4216)
!4252 = !DILocation(line: 1145, column: 36, scope: !4216)
!4253 = !DILocation(line: 1145, column: 42, scope: !4216)
!4254 = !DILocation(line: 1146, column: 31, scope: !4216)
!4255 = !DILocation(line: 1146, column: 36, scope: !4216)
!4256 = !DILocation(line: 1147, column: 31, scope: !4216)
!4257 = !DILocation(line: 1147, column: 37, scope: !4216)
!4258 = !DILocation(line: 1148, column: 31, scope: !4216)
!4259 = !DILocation(line: 1148, column: 37, scope: !4216)
!4260 = !DILocation(line: 1149, column: 31, scope: !4216)
!4261 = !DILocation(line: 1149, column: 37, scope: !4216)
!4262 = !DILocation(line: 1150, column: 31, scope: !4216)
!4263 = !DILocation(line: 1150, column: 36, scope: !4216)
!4264 = !DILocation(line: 1145, column: 6, scope: !4216)
!4265 = !DILocation(line: 1151, column: 6, scope: !4216)
!4266 = !DILocation(line: 1154, column: 4, scope: !4212)
!4267 = !DILocation(line: 1154, column: 10, scope: !4212)
!4268 = !DILocation(line: 1154, column: 15, scope: !4212)
!4269 = !DILocation(line: 1155, column: 3, scope: !4212)
!4270 = !DILocation(line: 1156, column: 2, scope: !4149)
!4271 = !DILocation(line: 1092, column: 28, scope: !4144)
!4272 = !DILocation(line: 1092, column: 2, scope: !4144)
!4273 = distinct !{!4273, !4147, !4274}
!4274 = !DILocation(line: 1156, column: 2, scope: !4141)
!4275 = !DILocation(line: 1157, column: 1, scope: !4127)
!4276 = distinct !DISubprogram(name: "pbvh_draw_BB", scope: !1, file: !1, line: 1159, type: !1300, scopeLine: 1160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4277 = !DILocalVariable(name: "bvh", arg: 1, scope: !4276, file: !1, line: 1159, type: !410)
!4278 = !DILocation(line: 1159, column: 32, scope: !4276)
!4279 = !DILocalVariable(name: "node", scope: !4276, file: !1, line: 1161, type: !419)
!4280 = !DILocation(line: 1161, column: 12, scope: !4276)
!4281 = !DILocalVariable(name: "a", scope: !4276, file: !1, line: 1162, type: !142)
!4282 = !DILocation(line: 1162, column: 6, scope: !4276)
!4283 = !DILocation(line: 1164, column: 2, scope: !4276)
!4284 = !DILocation(line: 1166, column: 9, scope: !4285)
!4285 = distinct !DILexicalBlock(scope: !4276, file: !1, line: 1166, column: 2)
!4286 = !DILocation(line: 1166, column: 7, scope: !4285)
!4287 = !DILocation(line: 1166, column: 14, scope: !4288)
!4288 = distinct !DILexicalBlock(scope: !4285, file: !1, line: 1166, column: 2)
!4289 = !DILocation(line: 1166, column: 18, scope: !4288)
!4290 = !DILocation(line: 1166, column: 23, scope: !4288)
!4291 = !DILocation(line: 1166, column: 16, scope: !4288)
!4292 = !DILocation(line: 1166, column: 2, scope: !4285)
!4293 = !DILocation(line: 1167, column: 11, scope: !4294)
!4294 = distinct !DILexicalBlock(scope: !4288, file: !1, line: 1166, column: 37)
!4295 = !DILocation(line: 1167, column: 16, scope: !4294)
!4296 = !DILocation(line: 1167, column: 22, scope: !4294)
!4297 = !DILocation(line: 1167, column: 8, scope: !4294)
!4298 = !DILocation(line: 1169, column: 20, scope: !4294)
!4299 = !DILocation(line: 1169, column: 26, scope: !4294)
!4300 = !DILocation(line: 1169, column: 29, scope: !4294)
!4301 = !DILocation(line: 1169, column: 35, scope: !4294)
!4302 = !DILocation(line: 1169, column: 41, scope: !4294)
!4303 = !DILocation(line: 1169, column: 44, scope: !4294)
!4304 = !DILocation(line: 1169, column: 52, scope: !4294)
!4305 = !DILocation(line: 1169, column: 58, scope: !4294)
!4306 = !DILocation(line: 1169, column: 63, scope: !4294)
!4307 = !DILocation(line: 1169, column: 76, scope: !4294)
!4308 = !DILocation(line: 1169, column: 50, scope: !4294)
!4309 = !DILocation(line: 1169, column: 3, scope: !4294)
!4310 = !DILocation(line: 1170, column: 2, scope: !4294)
!4311 = !DILocation(line: 1166, column: 33, scope: !4288)
!4312 = !DILocation(line: 1166, column: 2, scope: !4288)
!4313 = distinct !{!4313, !4292, !4314}
!4314 = !DILocation(line: 1170, column: 2, scope: !4285)
!4315 = !DILocation(line: 1172, column: 2, scope: !4276)
!4316 = !DILocation(line: 1173, column: 1, scope: !4276)
!4317 = distinct !DISubprogram(name: "BKE_pbvh_grids_update", scope: !1, file: !1, line: 1790, type: !4318, scopeLine: 1792, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4318 = !DISubroutineType(types: !4319)
!4319 = !{null, !410, !549, !551, !559, !1122, !570}
!4320 = !DILocalVariable(name: "bvh", arg: 1, scope: !4317, file: !1, line: 1790, type: !410)
!4321 = !DILocation(line: 1790, column: 34, scope: !4317)
!4322 = !DILocalVariable(name: "grids", arg: 2, scope: !4317, file: !1, line: 1790, type: !549)
!4323 = !DILocation(line: 1790, column: 49, scope: !4317)
!4324 = !DILocalVariable(name: "gridadj", arg: 3, scope: !4317, file: !1, line: 1790, type: !551)
!4325 = !DILocation(line: 1790, column: 73, scope: !4317)
!4326 = !DILocalVariable(name: "gridfaces", arg: 4, scope: !4317, file: !1, line: 1790, type: !559)
!4327 = !DILocation(line: 1790, column: 89, scope: !4317)
!4328 = !DILocalVariable(name: "flagmats", arg: 5, scope: !4317, file: !1, line: 1791, type: !1122)
!4329 = !DILocation(line: 1791, column: 39, scope: !4317)
!4330 = !DILocalVariable(name: "grid_hidden", arg: 6, scope: !4317, file: !1, line: 1791, type: !570)
!4331 = !DILocation(line: 1791, column: 62, scope: !4317)
!4332 = !DILocalVariable(name: "a", scope: !4317, file: !1, line: 1793, type: !142)
!4333 = !DILocation(line: 1793, column: 6, scope: !4317)
!4334 = !DILocation(line: 1795, column: 15, scope: !4317)
!4335 = !DILocation(line: 1795, column: 2, scope: !4317)
!4336 = !DILocation(line: 1795, column: 7, scope: !4317)
!4337 = !DILocation(line: 1795, column: 13, scope: !4317)
!4338 = !DILocation(line: 1796, column: 17, scope: !4317)
!4339 = !DILocation(line: 1796, column: 2, scope: !4317)
!4340 = !DILocation(line: 1796, column: 7, scope: !4317)
!4341 = !DILocation(line: 1796, column: 15, scope: !4317)
!4342 = !DILocation(line: 1797, column: 19, scope: !4317)
!4343 = !DILocation(line: 1797, column: 2, scope: !4317)
!4344 = !DILocation(line: 1797, column: 7, scope: !4317)
!4345 = !DILocation(line: 1797, column: 17, scope: !4317)
!4346 = !DILocation(line: 1799, column: 6, scope: !4347)
!4347 = distinct !DILexicalBlock(scope: !4317, file: !1, line: 1799, column: 6)
!4348 = !DILocation(line: 1799, column: 18, scope: !4347)
!4349 = !DILocation(line: 1799, column: 23, scope: !4347)
!4350 = !DILocation(line: 1799, column: 15, scope: !4347)
!4351 = !DILocation(line: 1799, column: 38, scope: !4347)
!4352 = !DILocation(line: 1799, column: 41, scope: !4347)
!4353 = !DILocation(line: 1799, column: 46, scope: !4347)
!4354 = !DILocation(line: 1799, column: 61, scope: !4347)
!4355 = !DILocation(line: 1799, column: 58, scope: !4347)
!4356 = !DILocation(line: 1799, column: 6, scope: !4317)
!4357 = !DILocation(line: 1800, column: 25, scope: !4358)
!4358 = distinct !DILexicalBlock(scope: !4347, file: !1, line: 1799, column: 74)
!4359 = !DILocation(line: 1800, column: 3, scope: !4358)
!4360 = !DILocation(line: 1800, column: 8, scope: !4358)
!4361 = !DILocation(line: 1800, column: 23, scope: !4358)
!4362 = !DILocation(line: 1801, column: 22, scope: !4358)
!4363 = !DILocation(line: 1801, column: 3, scope: !4358)
!4364 = !DILocation(line: 1801, column: 8, scope: !4358)
!4365 = !DILocation(line: 1801, column: 20, scope: !4358)
!4366 = !DILocation(line: 1803, column: 10, scope: !4367)
!4367 = distinct !DILexicalBlock(scope: !4358, file: !1, line: 1803, column: 3)
!4368 = !DILocation(line: 1803, column: 8, scope: !4367)
!4369 = !DILocation(line: 1803, column: 15, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !4367, file: !1, line: 1803, column: 3)
!4371 = !DILocation(line: 1803, column: 19, scope: !4370)
!4372 = !DILocation(line: 1803, column: 24, scope: !4370)
!4373 = !DILocation(line: 1803, column: 17, scope: !4370)
!4374 = !DILocation(line: 1803, column: 3, scope: !4367)
!4375 = !DILocation(line: 1804, column: 37, scope: !4370)
!4376 = !DILocation(line: 1804, column: 42, scope: !4370)
!4377 = !DILocation(line: 1804, column: 48, scope: !4370)
!4378 = !DILocation(line: 1804, column: 4, scope: !4370)
!4379 = !DILocation(line: 1803, column: 33, scope: !4370)
!4380 = !DILocation(line: 1803, column: 3, scope: !4370)
!4381 = distinct !{!4381, !4374, !4382}
!4382 = !DILocation(line: 1804, column: 50, scope: !4367)
!4383 = !DILocation(line: 1805, column: 2, scope: !4358)
!4384 = !DILocation(line: 1806, column: 1, scope: !4317)
!4385 = distinct !DISubprogram(name: "BKE_pbvh_node_layer_disp_get", scope: !1, file: !1, line: 1809, type: !4386, scopeLine: 1810, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4386 = !DISubroutineType(types: !4387)
!4387 = !{!141, !410, !419}
!4388 = !DILocalVariable(name: "bvh", arg: 1, scope: !4385, file: !1, line: 1809, type: !410)
!4389 = !DILocation(line: 1809, column: 43, scope: !4385)
!4390 = !DILocalVariable(name: "node", arg: 2, scope: !4385, file: !1, line: 1809, type: !419)
!4391 = !DILocation(line: 1809, column: 58, scope: !4385)
!4392 = !DILocation(line: 1811, column: 7, scope: !4393)
!4393 = distinct !DILexicalBlock(scope: !4385, file: !1, line: 1811, column: 6)
!4394 = !DILocation(line: 1811, column: 13, scope: !4393)
!4395 = !DILocation(line: 1811, column: 6, scope: !4385)
!4396 = !DILocalVariable(name: "totvert", scope: !4397, file: !1, line: 1812, type: !142)
!4397 = distinct !DILexicalBlock(scope: !4393, file: !1, line: 1811, column: 25)
!4398 = !DILocation(line: 1812, column: 7, scope: !4397)
!4399 = !DILocation(line: 1813, column: 27, scope: !4397)
!4400 = !DILocation(line: 1813, column: 32, scope: !4397)
!4401 = !DILocation(line: 1813, column: 3, scope: !4397)
!4402 = !DILocation(line: 1814, column: 22, scope: !4397)
!4403 = !DILocation(line: 1814, column: 50, scope: !4397)
!4404 = !DILocation(line: 1814, column: 48, scope: !4397)
!4405 = !DILocation(line: 1814, column: 3, scope: !4397)
!4406 = !DILocation(line: 1814, column: 9, scope: !4397)
!4407 = !DILocation(line: 1814, column: 20, scope: !4397)
!4408 = !DILocation(line: 1815, column: 2, scope: !4397)
!4409 = !DILocation(line: 1816, column: 9, scope: !4385)
!4410 = !DILocation(line: 1816, column: 15, scope: !4385)
!4411 = !DILocation(line: 1816, column: 2, scope: !4385)
!4412 = distinct !DISubprogram(name: "BKE_pbvh_get_vertCos", scope: !1, file: !1, line: 1828, type: !4413, scopeLine: 1829, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4413 = !DISubroutineType(types: !4414)
!4414 = !{!452, !410}
!4415 = !DILocalVariable(name: "pbvh", arg: 1, scope: !4412, file: !1, line: 1828, type: !410)
!4416 = !DILocation(line: 1828, column: 36, scope: !4412)
!4417 = !DILocalVariable(name: "a", scope: !4412, file: !1, line: 1830, type: !142)
!4418 = !DILocation(line: 1830, column: 6, scope: !4412)
!4419 = !DILocalVariable(name: "vertCos", scope: !4412, file: !1, line: 1831, type: !452)
!4420 = !DILocation(line: 1831, column: 10, scope: !4412)
!4421 = !DILocation(line: 1833, column: 6, scope: !4422)
!4422 = distinct !DILexicalBlock(scope: !4412, file: !1, line: 1833, column: 6)
!4423 = !DILocation(line: 1833, column: 12, scope: !4422)
!4424 = !DILocation(line: 1833, column: 6, scope: !4412)
!4425 = !DILocalVariable(name: "co", scope: !4426, file: !1, line: 1834, type: !141)
!4426 = distinct !DILexicalBlock(scope: !4422, file: !1, line: 1833, column: 19)
!4427 = !DILocation(line: 1834, column: 10, scope: !4426)
!4428 = !DILocalVariable(name: "mvert", scope: !4426, file: !1, line: 1835, type: !471)
!4429 = !DILocation(line: 1835, column: 10, scope: !4426)
!4430 = !DILocation(line: 1835, column: 18, scope: !4426)
!4431 = !DILocation(line: 1835, column: 24, scope: !4426)
!4432 = !DILocation(line: 1837, column: 13, scope: !4426)
!4433 = !DILocation(line: 1837, column: 29, scope: !4426)
!4434 = !DILocation(line: 1837, column: 35, scope: !4426)
!4435 = !DILocation(line: 1837, column: 27, scope: !4426)
!4436 = !DILocation(line: 1837, column: 25, scope: !4426)
!4437 = !DILocation(line: 1837, column: 43, scope: !4426)
!4438 = !DILocation(line: 1837, column: 11, scope: !4426)
!4439 = !DILocation(line: 1838, column: 17, scope: !4426)
!4440 = !DILocation(line: 1838, column: 8, scope: !4426)
!4441 = !DILocation(line: 1838, column: 6, scope: !4426)
!4442 = !DILocation(line: 1840, column: 10, scope: !4443)
!4443 = distinct !DILexicalBlock(scope: !4426, file: !1, line: 1840, column: 3)
!4444 = !DILocation(line: 1840, column: 8, scope: !4443)
!4445 = !DILocation(line: 1840, column: 15, scope: !4446)
!4446 = distinct !DILexicalBlock(scope: !4443, file: !1, line: 1840, column: 3)
!4447 = !DILocation(line: 1840, column: 19, scope: !4446)
!4448 = !DILocation(line: 1840, column: 25, scope: !4446)
!4449 = !DILocation(line: 1840, column: 17, scope: !4446)
!4450 = !DILocation(line: 1840, column: 3, scope: !4443)
!4451 = !DILocation(line: 1841, column: 15, scope: !4452)
!4452 = distinct !DILexicalBlock(scope: !4446, file: !1, line: 1840, column: 57)
!4453 = !DILocation(line: 1841, column: 19, scope: !4452)
!4454 = !DILocation(line: 1841, column: 26, scope: !4452)
!4455 = !DILocation(line: 1841, column: 4, scope: !4452)
!4456 = !DILocation(line: 1842, column: 3, scope: !4452)
!4457 = !DILocation(line: 1840, column: 35, scope: !4446)
!4458 = !DILocation(line: 1840, column: 44, scope: !4446)
!4459 = !DILocation(line: 1840, column: 51, scope: !4446)
!4460 = !DILocation(line: 1840, column: 3, scope: !4446)
!4461 = distinct !{!4461, !4450, !4462}
!4462 = !DILocation(line: 1842, column: 3, scope: !4443)
!4463 = !DILocation(line: 1843, column: 2, scope: !4426)
!4464 = !DILocation(line: 1845, column: 9, scope: !4412)
!4465 = !DILocation(line: 1845, column: 2, scope: !4412)
!4466 = distinct !DISubprogram(name: "BKE_pbvh_apply_vertCos", scope: !1, file: !1, line: 1848, type: !4467, scopeLine: 1849, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4467 = !DISubroutineType(types: !4468)
!4468 = !{null, !410, !452}
!4469 = !DILocalVariable(name: "pbvh", arg: 1, scope: !4466, file: !1, line: 1848, type: !410)
!4470 = !DILocation(line: 1848, column: 35, scope: !4466)
!4471 = !DILocalVariable(name: "vertCos", arg: 2, scope: !4466, file: !1, line: 1848, type: !452)
!4472 = !DILocation(line: 1848, column: 49, scope: !4466)
!4473 = !DILocalVariable(name: "a", scope: !4466, file: !1, line: 1850, type: !142)
!4474 = !DILocation(line: 1850, column: 6, scope: !4466)
!4475 = !DILocation(line: 1852, column: 7, scope: !4476)
!4476 = distinct !DILexicalBlock(scope: !4466, file: !1, line: 1852, column: 6)
!4477 = !DILocation(line: 1852, column: 13, scope: !4476)
!4478 = !DILocation(line: 1852, column: 6, scope: !4466)
!4479 = !DILocation(line: 1853, column: 7, scope: !4480)
!4480 = distinct !DILexicalBlock(scope: !4481, file: !1, line: 1853, column: 7)
!4481 = distinct !DILexicalBlock(scope: !4476, file: !1, line: 1852, column: 23)
!4482 = !DILocation(line: 1853, column: 13, scope: !4480)
!4483 = !DILocation(line: 1853, column: 7, scope: !4481)
!4484 = !DILocation(line: 1858, column: 18, scope: !4485)
!4485 = distinct !DILexicalBlock(scope: !4480, file: !1, line: 1853, column: 20)
!4486 = !DILocation(line: 1858, column: 32, scope: !4485)
!4487 = !DILocation(line: 1858, column: 38, scope: !4485)
!4488 = !DILocation(line: 1858, column: 4, scope: !4485)
!4489 = !DILocation(line: 1858, column: 10, scope: !4485)
!4490 = !DILocation(line: 1858, column: 16, scope: !4485)
!4491 = !DILocation(line: 1859, column: 18, scope: !4485)
!4492 = !DILocation(line: 1859, column: 32, scope: !4485)
!4493 = !DILocation(line: 1859, column: 38, scope: !4485)
!4494 = !DILocation(line: 1859, column: 4, scope: !4485)
!4495 = !DILocation(line: 1859, column: 10, scope: !4485)
!4496 = !DILocation(line: 1859, column: 16, scope: !4485)
!4497 = !DILocation(line: 1861, column: 4, scope: !4485)
!4498 = !DILocation(line: 1861, column: 10, scope: !4485)
!4499 = !DILocation(line: 1861, column: 19, scope: !4485)
!4500 = !DILocation(line: 1862, column: 3, scope: !4485)
!4501 = !DILocation(line: 1863, column: 2, scope: !4481)
!4502 = !DILocation(line: 1865, column: 6, scope: !4503)
!4503 = distinct !DILexicalBlock(scope: !4466, file: !1, line: 1865, column: 6)
!4504 = !DILocation(line: 1865, column: 12, scope: !4503)
!4505 = !DILocation(line: 1865, column: 6, scope: !4466)
!4506 = !DILocalVariable(name: "mvert", scope: !4507, file: !1, line: 1866, type: !471)
!4507 = distinct !DILexicalBlock(scope: !4503, file: !1, line: 1865, column: 19)
!4508 = !DILocation(line: 1866, column: 10, scope: !4507)
!4509 = !DILocation(line: 1866, column: 18, scope: !4507)
!4510 = !DILocation(line: 1866, column: 24, scope: !4507)
!4511 = !DILocation(line: 1868, column: 10, scope: !4512)
!4512 = distinct !DILexicalBlock(scope: !4507, file: !1, line: 1868, column: 3)
!4513 = !DILocation(line: 1868, column: 8, scope: !4512)
!4514 = !DILocation(line: 1868, column: 15, scope: !4515)
!4515 = distinct !DILexicalBlock(scope: !4512, file: !1, line: 1868, column: 3)
!4516 = !DILocation(line: 1868, column: 19, scope: !4515)
!4517 = !DILocation(line: 1868, column: 25, scope: !4515)
!4518 = !DILocation(line: 1868, column: 17, scope: !4515)
!4519 = !DILocation(line: 1868, column: 3, scope: !4512)
!4520 = !DILocation(line: 1869, column: 15, scope: !4521)
!4521 = distinct !DILexicalBlock(scope: !4515, file: !1, line: 1868, column: 48)
!4522 = !DILocation(line: 1869, column: 22, scope: !4521)
!4523 = !DILocation(line: 1869, column: 26, scope: !4521)
!4524 = !DILocation(line: 1869, column: 34, scope: !4521)
!4525 = !DILocation(line: 1869, column: 4, scope: !4521)
!4526 = !DILocation(line: 1870, column: 4, scope: !4521)
!4527 = !DILocation(line: 1870, column: 11, scope: !4521)
!4528 = !DILocation(line: 1870, column: 16, scope: !4521)
!4529 = !DILocation(line: 1871, column: 3, scope: !4521)
!4530 = !DILocation(line: 1868, column: 34, scope: !4515)
!4531 = !DILocation(line: 1868, column: 39, scope: !4515)
!4532 = !DILocation(line: 1868, column: 3, scope: !4515)
!4533 = distinct !{!4533, !4519, !4534}
!4534 = !DILocation(line: 1871, column: 3, scope: !4512)
!4535 = !DILocation(line: 1874, column: 34, scope: !4507)
!4536 = !DILocation(line: 1874, column: 40, scope: !4507)
!4537 = !DILocation(line: 1874, column: 47, scope: !4507)
!4538 = !DILocation(line: 1874, column: 53, scope: !4507)
!4539 = !DILocation(line: 1874, column: 62, scope: !4507)
!4540 = !DILocation(line: 1874, column: 68, scope: !4507)
!4541 = !DILocation(line: 1874, column: 75, scope: !4507)
!4542 = !DILocation(line: 1874, column: 81, scope: !4507)
!4543 = !DILocation(line: 1874, column: 3, scope: !4507)
!4544 = !DILocation(line: 1876, column: 10, scope: !4545)
!4545 = distinct !DILexicalBlock(scope: !4507, file: !1, line: 1876, column: 3)
!4546 = !DILocation(line: 1876, column: 8, scope: !4545)
!4547 = !DILocation(line: 1876, column: 15, scope: !4548)
!4548 = distinct !DILexicalBlock(scope: !4545, file: !1, line: 1876, column: 3)
!4549 = !DILocation(line: 1876, column: 19, scope: !4548)
!4550 = !DILocation(line: 1876, column: 25, scope: !4548)
!4551 = !DILocation(line: 1876, column: 17, scope: !4548)
!4552 = !DILocation(line: 1876, column: 3, scope: !4545)
!4553 = !DILocation(line: 1877, column: 31, scope: !4548)
!4554 = !DILocation(line: 1877, column: 37, scope: !4548)
!4555 = !DILocation(line: 1877, column: 43, scope: !4548)
!4556 = !DILocation(line: 1877, column: 4, scope: !4548)
!4557 = !DILocation(line: 1876, column: 34, scope: !4548)
!4558 = !DILocation(line: 1876, column: 3, scope: !4548)
!4559 = distinct !{!4559, !4552, !4560}
!4560 = !DILocation(line: 1877, column: 45, scope: !4545)
!4561 = !DILocation(line: 1879, column: 19, scope: !4507)
!4562 = !DILocation(line: 1879, column: 3, scope: !4507)
!4563 = !DILocation(line: 1880, column: 19, scope: !4507)
!4564 = !DILocation(line: 1880, column: 3, scope: !4507)
!4565 = !DILocation(line: 1882, column: 2, scope: !4507)
!4566 = !DILocation(line: 1883, column: 1, scope: !4466)
!4567 = distinct !DISubprogram(name: "BKE_pbvh_isDeformed", scope: !1, file: !1, line: 1885, type: !4568, scopeLine: 1886, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4568 = !DISubroutineType(types: !4569)
!4569 = !{!573, !410}
!4570 = !DILocalVariable(name: "pbvh", arg: 1, scope: !4567, file: !1, line: 1885, type: !410)
!4571 = !DILocation(line: 1885, column: 32, scope: !4567)
!4572 = !DILocation(line: 1887, column: 9, scope: !4567)
!4573 = !DILocation(line: 1887, column: 15, scope: !4567)
!4574 = !DILocation(line: 1887, column: 2, scope: !4567)
!4575 = distinct !DISubprogram(name: "BKE_pbvh_node_add_proxy", scope: !1, file: !1, line: 1891, type: !4576, scopeLine: 1892, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4576 = !DISubroutineType(types: !4577)
!4577 = !{!447, !410, !419}
!4578 = !DILocalVariable(name: "bvh", arg: 1, scope: !4575, file: !1, line: 1891, type: !410)
!4579 = !DILocation(line: 1891, column: 46, scope: !4575)
!4580 = !DILocalVariable(name: "node", arg: 2, scope: !4575, file: !1, line: 1891, type: !419)
!4581 = !DILocation(line: 1891, column: 61, scope: !4575)
!4582 = !DILocalVariable(name: "index", scope: !4575, file: !1, line: 1893, type: !142)
!4583 = !DILocation(line: 1893, column: 6, scope: !4575)
!4584 = !DILocalVariable(name: "totverts", scope: !4575, file: !1, line: 1893, type: !142)
!4585 = !DILocation(line: 1893, column: 13, scope: !4575)
!4586 = !DILocation(line: 1900, column: 11, scope: !4587)
!4587 = distinct !DILexicalBlock(scope: !4575, file: !1, line: 1898, column: 2)
!4588 = !DILocation(line: 1900, column: 17, scope: !4587)
!4589 = !DILocation(line: 1900, column: 9, scope: !4587)
!4590 = !DILocation(line: 1902, column: 3, scope: !4587)
!4591 = !DILocation(line: 1902, column: 9, scope: !4587)
!4592 = !DILocation(line: 1902, column: 20, scope: !4587)
!4593 = !DILocation(line: 1904, column: 7, scope: !4594)
!4594 = distinct !DILexicalBlock(scope: !4587, file: !1, line: 1904, column: 7)
!4595 = !DILocation(line: 1904, column: 13, scope: !4594)
!4596 = !DILocation(line: 1904, column: 7, scope: !4587)
!4597 = !DILocation(line: 1905, column: 20, scope: !4594)
!4598 = !DILocation(line: 1905, column: 4, scope: !4594)
!4599 = !DILocation(line: 1905, column: 10, scope: !4594)
!4600 = !DILocation(line: 1905, column: 18, scope: !4594)
!4601 = !DILocation(line: 1907, column: 20, scope: !4594)
!4602 = !DILocation(line: 1907, column: 4, scope: !4594)
!4603 = !DILocation(line: 1907, column: 10, scope: !4594)
!4604 = !DILocation(line: 1907, column: 18, scope: !4594)
!4605 = !DILocation(line: 1909, column: 27, scope: !4587)
!4606 = !DILocation(line: 1909, column: 32, scope: !4587)
!4607 = !DILocation(line: 1909, column: 3, scope: !4587)
!4608 = !DILocation(line: 1910, column: 29, scope: !4587)
!4609 = !DILocation(line: 1910, column: 60, scope: !4587)
!4610 = !DILocation(line: 1910, column: 58, scope: !4587)
!4611 = !DILocation(line: 1910, column: 3, scope: !4587)
!4612 = !DILocation(line: 1910, column: 9, scope: !4587)
!4613 = !DILocation(line: 1910, column: 17, scope: !4587)
!4614 = !DILocation(line: 1910, column: 24, scope: !4587)
!4615 = !DILocation(line: 1910, column: 27, scope: !4587)
!4616 = !DILocation(line: 1913, column: 9, scope: !4575)
!4617 = !DILocation(line: 1913, column: 15, scope: !4575)
!4618 = !DILocation(line: 1913, column: 25, scope: !4575)
!4619 = !DILocation(line: 1913, column: 23, scope: !4575)
!4620 = !DILocation(line: 1913, column: 2, scope: !4575)
!4621 = distinct !DISubprogram(name: "BKE_pbvh_node_free_proxies", scope: !1, file: !1, line: 1916, type: !1418, scopeLine: 1917, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4622 = !DILocalVariable(name: "node", arg: 1, scope: !4621, file: !1, line: 1916, type: !419)
!4623 = !DILocation(line: 1916, column: 43, scope: !4621)
!4624 = !DILocalVariable(name: "p", scope: !4625, file: !1, line: 1922, type: !142)
!4625 = distinct !DILexicalBlock(scope: !4621, file: !1, line: 1921, column: 2)
!4626 = !DILocation(line: 1922, column: 7, scope: !4625)
!4627 = !DILocation(line: 1924, column: 10, scope: !4628)
!4628 = distinct !DILexicalBlock(scope: !4625, file: !1, line: 1924, column: 3)
!4629 = !DILocation(line: 1924, column: 8, scope: !4628)
!4630 = !DILocation(line: 1924, column: 15, scope: !4631)
!4631 = distinct !DILexicalBlock(scope: !4628, file: !1, line: 1924, column: 3)
!4632 = !DILocation(line: 1924, column: 19, scope: !4631)
!4633 = !DILocation(line: 1924, column: 25, scope: !4631)
!4634 = !DILocation(line: 1924, column: 17, scope: !4631)
!4635 = !DILocation(line: 1924, column: 3, scope: !4628)
!4636 = !DILocation(line: 1925, column: 4, scope: !4637)
!4637 = distinct !DILexicalBlock(scope: !4631, file: !1, line: 1924, column: 43)
!4638 = !DILocation(line: 1925, column: 14, scope: !4637)
!4639 = !DILocation(line: 1925, column: 20, scope: !4637)
!4640 = !DILocation(line: 1925, column: 28, scope: !4637)
!4641 = !DILocation(line: 1925, column: 31, scope: !4637)
!4642 = !DILocation(line: 1926, column: 4, scope: !4637)
!4643 = !DILocation(line: 1926, column: 10, scope: !4637)
!4644 = !DILocation(line: 1926, column: 18, scope: !4637)
!4645 = !DILocation(line: 1926, column: 21, scope: !4637)
!4646 = !DILocation(line: 1926, column: 24, scope: !4637)
!4647 = !DILocation(line: 1927, column: 3, scope: !4637)
!4648 = !DILocation(line: 1924, column: 39, scope: !4631)
!4649 = !DILocation(line: 1924, column: 3, scope: !4631)
!4650 = distinct !{!4650, !4635, !4651}
!4651 = !DILocation(line: 1927, column: 3, scope: !4628)
!4652 = !DILocation(line: 1929, column: 3, scope: !4625)
!4653 = !DILocation(line: 1929, column: 13, scope: !4625)
!4654 = !DILocation(line: 1929, column: 19, scope: !4625)
!4655 = !DILocation(line: 1930, column: 3, scope: !4625)
!4656 = !DILocation(line: 1930, column: 9, scope: !4625)
!4657 = !DILocation(line: 1930, column: 17, scope: !4625)
!4658 = !DILocation(line: 1932, column: 3, scope: !4625)
!4659 = !DILocation(line: 1932, column: 9, scope: !4625)
!4660 = !DILocation(line: 1932, column: 21, scope: !4625)
!4661 = !DILocation(line: 1934, column: 1, scope: !4621)
!4662 = distinct !DISubprogram(name: "BKE_pbvh_gather_proxies", scope: !1, file: !1, line: 1936, type: !4663, scopeLine: 1937, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4663 = !DISubroutineType(types: !4664)
!4664 = !{null, !410, !1465, !431}
!4665 = !DILocalVariable(name: "pbvh", arg: 1, scope: !4662, file: !1, line: 1936, type: !410)
!4666 = !DILocation(line: 1936, column: 36, scope: !4662)
!4667 = !DILocalVariable(name: "r_array", arg: 2, scope: !4662, file: !1, line: 1936, type: !1465)
!4668 = !DILocation(line: 1936, column: 54, scope: !4662)
!4669 = !DILocalVariable(name: "r_tot", arg: 3, scope: !4662, file: !1, line: 1936, type: !431)
!4670 = !DILocation(line: 1936, column: 69, scope: !4662)
!4671 = !DILocalVariable(name: "array", scope: !4662, file: !1, line: 1938, type: !1466)
!4672 = !DILocation(line: 1938, column: 13, scope: !4662)
!4673 = !DILocalVariable(name: "node", scope: !4662, file: !1, line: 1938, type: !419)
!4674 = !DILocation(line: 1938, column: 28, scope: !4662)
!4675 = !DILocalVariable(name: "tot", scope: !4662, file: !1, line: 1939, type: !142)
!4676 = !DILocation(line: 1939, column: 6, scope: !4662)
!4677 = !DILocalVariable(name: "space", scope: !4662, file: !1, line: 1939, type: !142)
!4678 = !DILocation(line: 1939, column: 15, scope: !4662)
!4679 = !DILocalVariable(name: "n", scope: !4662, file: !1, line: 1940, type: !142)
!4680 = !DILocation(line: 1940, column: 6, scope: !4662)
!4681 = !DILocation(line: 1942, column: 9, scope: !4682)
!4682 = distinct !DILexicalBlock(scope: !4662, file: !1, line: 1942, column: 2)
!4683 = !DILocation(line: 1942, column: 7, scope: !4682)
!4684 = !DILocation(line: 1942, column: 14, scope: !4685)
!4685 = distinct !DILexicalBlock(scope: !4682, file: !1, line: 1942, column: 2)
!4686 = !DILocation(line: 1942, column: 18, scope: !4685)
!4687 = !DILocation(line: 1942, column: 24, scope: !4685)
!4688 = !DILocation(line: 1942, column: 16, scope: !4685)
!4689 = !DILocation(line: 1942, column: 2, scope: !4682)
!4690 = !DILocation(line: 1943, column: 10, scope: !4691)
!4691 = distinct !DILexicalBlock(scope: !4685, file: !1, line: 1942, column: 38)
!4692 = !DILocation(line: 1943, column: 16, scope: !4691)
!4693 = !DILocation(line: 1943, column: 24, scope: !4691)
!4694 = !DILocation(line: 1943, column: 22, scope: !4691)
!4695 = !DILocation(line: 1943, column: 8, scope: !4691)
!4696 = !DILocation(line: 1945, column: 7, scope: !4697)
!4697 = distinct !DILexicalBlock(scope: !4691, file: !1, line: 1945, column: 7)
!4698 = !DILocation(line: 1945, column: 13, scope: !4697)
!4699 = !DILocation(line: 1945, column: 25, scope: !4697)
!4700 = !DILocation(line: 1945, column: 7, scope: !4691)
!4701 = !DILocation(line: 1946, column: 8, scope: !4702)
!4702 = distinct !DILexicalBlock(scope: !4703, file: !1, line: 1946, column: 8)
!4703 = distinct !DILexicalBlock(scope: !4697, file: !1, line: 1945, column: 30)
!4704 = !DILocation(line: 1946, column: 15, scope: !4702)
!4705 = !DILocation(line: 1946, column: 12, scope: !4702)
!4706 = !DILocation(line: 1946, column: 8, scope: !4703)
!4707 = !DILocation(line: 1948, column: 14, scope: !4708)
!4708 = distinct !DILexicalBlock(scope: !4702, file: !1, line: 1946, column: 22)
!4709 = !DILocation(line: 1948, column: 18, scope: !4708)
!4710 = !DILocation(line: 1948, column: 13, scope: !4708)
!4711 = !DILocation(line: 1948, column: 31, scope: !4708)
!4712 = !DILocation(line: 1948, column: 37, scope: !4708)
!4713 = !DILocation(line: 1948, column: 11, scope: !4708)
!4714 = !DILocation(line: 1949, column: 13, scope: !4708)
!4715 = !DILocation(line: 1949, column: 30, scope: !4708)
!4716 = !DILocation(line: 1949, column: 58, scope: !4708)
!4717 = !DILocation(line: 1949, column: 56, scope: !4708)
!4718 = !DILocation(line: 1949, column: 11, scope: !4708)
!4719 = !DILocation(line: 1950, column: 4, scope: !4708)
!4720 = !DILocation(line: 1952, column: 17, scope: !4703)
!4721 = !DILocation(line: 1952, column: 4, scope: !4703)
!4722 = !DILocation(line: 1952, column: 10, scope: !4703)
!4723 = !DILocation(line: 1952, column: 15, scope: !4703)
!4724 = !DILocation(line: 1953, column: 7, scope: !4703)
!4725 = !DILocation(line: 1954, column: 3, scope: !4703)
!4726 = !DILocation(line: 1955, column: 2, scope: !4691)
!4727 = !DILocation(line: 1942, column: 34, scope: !4685)
!4728 = !DILocation(line: 1942, column: 2, scope: !4685)
!4729 = distinct !{!4729, !4689, !4730}
!4730 = !DILocation(line: 1955, column: 2, scope: !4682)
!4731 = !DILocation(line: 1957, column: 6, scope: !4732)
!4732 = distinct !DILexicalBlock(scope: !4662, file: !1, line: 1957, column: 6)
!4733 = !DILocation(line: 1957, column: 10, scope: !4732)
!4734 = !DILocation(line: 1957, column: 15, scope: !4732)
!4735 = !DILocation(line: 1957, column: 18, scope: !4732)
!4736 = !DILocation(line: 1957, column: 6, scope: !4662)
!4737 = !DILocation(line: 1958, column: 3, scope: !4738)
!4738 = distinct !DILexicalBlock(scope: !4732, file: !1, line: 1957, column: 25)
!4739 = !DILocation(line: 1958, column: 13, scope: !4738)
!4740 = !DILocation(line: 1959, column: 9, scope: !4738)
!4741 = !DILocation(line: 1960, column: 2, scope: !4738)
!4742 = !DILocation(line: 1962, column: 13, scope: !4662)
!4743 = !DILocation(line: 1962, column: 3, scope: !4662)
!4744 = !DILocation(line: 1962, column: 11, scope: !4662)
!4745 = !DILocation(line: 1963, column: 11, scope: !4662)
!4746 = !DILocation(line: 1963, column: 3, scope: !4662)
!4747 = !DILocation(line: 1963, column: 9, scope: !4662)
!4748 = !DILocation(line: 1964, column: 1, scope: !4662)
!4749 = distinct !DISubprogram(name: "pbvh_vertex_iter_init", scope: !1, file: !1, line: 1966, type: !4750, scopeLine: 1968, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4750 = !DISubroutineType(types: !4751)
!4751 = !{null, !410, !419, !4752, !142}
!4752 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1838, size: 64)
!4753 = !DILocalVariable(name: "bvh", arg: 1, scope: !4749, file: !1, line: 1966, type: !410)
!4754 = !DILocation(line: 1966, column: 34, scope: !4749)
!4755 = !DILocalVariable(name: "node", arg: 2, scope: !4749, file: !1, line: 1966, type: !419)
!4756 = !DILocation(line: 1966, column: 49, scope: !4749)
!4757 = !DILocalVariable(name: "vi", arg: 3, scope: !4749, file: !1, line: 1967, type: !4752)
!4758 = !DILocation(line: 1967, column: 44, scope: !4749)
!4759 = !DILocalVariable(name: "mode", arg: 4, scope: !4749, file: !1, line: 1967, type: !142)
!4760 = !DILocation(line: 1967, column: 52, scope: !4749)
!4761 = !DILocalVariable(name: "grids", scope: !4749, file: !1, line: 1969, type: !1848)
!4762 = !DILocation(line: 1969, column: 19, scope: !4749)
!4763 = !DILocalVariable(name: "verts", scope: !4749, file: !1, line: 1970, type: !1859)
!4764 = !DILocation(line: 1970, column: 16, scope: !4749)
!4765 = !DILocalVariable(name: "grid_indices", scope: !4749, file: !1, line: 1971, type: !431)
!4766 = !DILocation(line: 1971, column: 7, scope: !4749)
!4767 = !DILocalVariable(name: "vert_indices", scope: !4749, file: !1, line: 1971, type: !431)
!4768 = !DILocation(line: 1971, column: 22, scope: !4749)
!4769 = !DILocalVariable(name: "totgrid", scope: !4749, file: !1, line: 1972, type: !142)
!4770 = !DILocation(line: 1972, column: 6, scope: !4749)
!4771 = !DILocalVariable(name: "gridsize", scope: !4749, file: !1, line: 1972, type: !142)
!4772 = !DILocation(line: 1972, column: 15, scope: !4749)
!4773 = !DILocalVariable(name: "uniq_verts", scope: !4749, file: !1, line: 1972, type: !142)
!4774 = !DILocation(line: 1972, column: 25, scope: !4749)
!4775 = !DILocalVariable(name: "totvert", scope: !4749, file: !1, line: 1972, type: !142)
!4776 = !DILocation(line: 1972, column: 37, scope: !4749)
!4777 = !DILocation(line: 1974, column: 2, scope: !4749)
!4778 = !DILocation(line: 1974, column: 6, scope: !4749)
!4779 = !DILocation(line: 1974, column: 11, scope: !4749)
!4780 = !DILocation(line: 1975, column: 2, scope: !4749)
!4781 = !DILocation(line: 1975, column: 6, scope: !4749)
!4782 = !DILocation(line: 1975, column: 9, scope: !4749)
!4783 = !DILocation(line: 1976, column: 2, scope: !4749)
!4784 = !DILocation(line: 1976, column: 6, scope: !4749)
!4785 = !DILocation(line: 1976, column: 10, scope: !4749)
!4786 = !DILocation(line: 1977, column: 2, scope: !4749)
!4787 = !DILocation(line: 1977, column: 6, scope: !4749)
!4788 = !DILocation(line: 1977, column: 12, scope: !4749)
!4789 = !DILocation(line: 1979, column: 26, scope: !4749)
!4790 = !DILocation(line: 1979, column: 31, scope: !4749)
!4791 = !DILocation(line: 1979, column: 2, scope: !4749)
!4792 = !DILocation(line: 1980, column: 26, scope: !4749)
!4793 = !DILocation(line: 1980, column: 31, scope: !4749)
!4794 = !DILocation(line: 1980, column: 2, scope: !4749)
!4795 = !DILocation(line: 1981, column: 26, scope: !4749)
!4796 = !DILocation(line: 1981, column: 31, scope: !4749)
!4797 = !DILocation(line: 1981, column: 2, scope: !4749)
!4798 = !DILocation(line: 1982, column: 13, scope: !4749)
!4799 = !DILocation(line: 1982, column: 18, scope: !4749)
!4800 = !DILocation(line: 1982, column: 2, scope: !4749)
!4801 = !DILocation(line: 1982, column: 6, scope: !4749)
!4802 = !DILocation(line: 1982, column: 10, scope: !4749)
!4803 = !DILocation(line: 1984, column: 14, scope: !4749)
!4804 = !DILocation(line: 1984, column: 2, scope: !4749)
!4805 = !DILocation(line: 1984, column: 6, scope: !4749)
!4806 = !DILocation(line: 1984, column: 12, scope: !4749)
!4807 = !DILocation(line: 1985, column: 21, scope: !4749)
!4808 = !DILocation(line: 1985, column: 2, scope: !4749)
!4809 = !DILocation(line: 1985, column: 6, scope: !4749)
!4810 = !DILocation(line: 1985, column: 19, scope: !4749)
!4811 = !DILocation(line: 1986, column: 17, scope: !4749)
!4812 = !DILocation(line: 1986, column: 16, scope: !4749)
!4813 = !DILocation(line: 1986, column: 26, scope: !4749)
!4814 = !DILocation(line: 1986, column: 2, scope: !4749)
!4815 = !DILocation(line: 1986, column: 6, scope: !4749)
!4816 = !DILocation(line: 1986, column: 14, scope: !4749)
!4817 = !DILocation(line: 1987, column: 17, scope: !4749)
!4818 = !DILocation(line: 1987, column: 2, scope: !4749)
!4819 = !DILocation(line: 1987, column: 6, scope: !4749)
!4820 = !DILocation(line: 1987, column: 15, scope: !4749)
!4821 = !DILocation(line: 1989, column: 6, scope: !4822)
!4822 = distinct !DILexicalBlock(scope: !4749, file: !1, line: 1989, column: 6)
!4823 = !DILocation(line: 1989, column: 11, scope: !4822)
!4824 = !DILocation(line: 1989, column: 6, scope: !4749)
!4825 = !DILocation(line: 1990, column: 17, scope: !4822)
!4826 = !DILocation(line: 1990, column: 3, scope: !4822)
!4827 = !DILocation(line: 1990, column: 7, scope: !4822)
!4828 = !DILocation(line: 1990, column: 15, scope: !4822)
!4829 = !DILocation(line: 1992, column: 17, scope: !4822)
!4830 = !DILocation(line: 1992, column: 3, scope: !4822)
!4831 = !DILocation(line: 1992, column: 7, scope: !4822)
!4832 = !DILocation(line: 1992, column: 15, scope: !4822)
!4833 = !DILocation(line: 1993, column: 21, scope: !4749)
!4834 = !DILocation(line: 1993, column: 2, scope: !4749)
!4835 = !DILocation(line: 1993, column: 6, scope: !4749)
!4836 = !DILocation(line: 1993, column: 19, scope: !4749)
!4837 = !DILocation(line: 1994, column: 15, scope: !4749)
!4838 = !DILocation(line: 1994, column: 2, scope: !4749)
!4839 = !DILocation(line: 1994, column: 6, scope: !4749)
!4840 = !DILocation(line: 1994, column: 13, scope: !4749)
!4841 = !DILocation(line: 1996, column: 6, scope: !4842)
!4842 = distinct !DILexicalBlock(scope: !4749, file: !1, line: 1996, column: 6)
!4843 = !DILocation(line: 1996, column: 11, scope: !4842)
!4844 = !DILocation(line: 1996, column: 16, scope: !4842)
!4845 = !DILocation(line: 1996, column: 6, scope: !4749)
!4846 = !DILocation(line: 1997, column: 26, scope: !4847)
!4847 = distinct !DILexicalBlock(scope: !4842, file: !1, line: 1996, column: 31)
!4848 = !DILocation(line: 1997, column: 30, scope: !4847)
!4849 = !DILocation(line: 1997, column: 47, scope: !4847)
!4850 = !DILocation(line: 1997, column: 53, scope: !4847)
!4851 = !DILocation(line: 1997, column: 3, scope: !4847)
!4852 = !DILocation(line: 1998, column: 26, scope: !4847)
!4853 = !DILocation(line: 1998, column: 30, scope: !4847)
!4854 = !DILocation(line: 1998, column: 46, scope: !4847)
!4855 = !DILocation(line: 1998, column: 52, scope: !4847)
!4856 = !DILocation(line: 1998, column: 3, scope: !4847)
!4857 = !DILocation(line: 1999, column: 19, scope: !4847)
!4858 = !DILocation(line: 1999, column: 24, scope: !4847)
!4859 = !DILocation(line: 1999, column: 28, scope: !4847)
!4860 = !DILocation(line: 1999, column: 3, scope: !4847)
!4861 = !DILocation(line: 1999, column: 7, scope: !4847)
!4862 = !DILocation(line: 1999, column: 16, scope: !4847)
!4863 = !DILocation(line: 2000, column: 51, scope: !4847)
!4864 = !DILocation(line: 2000, column: 55, scope: !4847)
!4865 = !DILocation(line: 2000, column: 29, scope: !4847)
!4866 = !DILocation(line: 2000, column: 3, scope: !4847)
!4867 = !DILocation(line: 2000, column: 7, scope: !4847)
!4868 = !DILocation(line: 2000, column: 27, scope: !4847)
!4869 = !DILocation(line: 2001, column: 2, scope: !4847)
!4870 = !DILocation(line: 2003, column: 2, scope: !4749)
!4871 = !DILocation(line: 2003, column: 6, scope: !4749)
!4872 = !DILocation(line: 2003, column: 9, scope: !4749)
!4873 = !DILocation(line: 2004, column: 6, scope: !4874)
!4874 = distinct !DILexicalBlock(scope: !4749, file: !1, line: 2004, column: 6)
!4875 = !DILocation(line: 2004, column: 10, scope: !4874)
!4876 = !DILocation(line: 2004, column: 16, scope: !4874)
!4877 = !DILocation(line: 2004, column: 19, scope: !4874)
!4878 = !DILocation(line: 2004, column: 24, scope: !4874)
!4879 = !DILocation(line: 2004, column: 6, scope: !4749)
!4880 = !DILocation(line: 2005, column: 21, scope: !4874)
!4881 = !DILocation(line: 2005, column: 26, scope: !4874)
!4882 = !DILocation(line: 2005, column: 3, scope: !4874)
!4883 = !DILocation(line: 2005, column: 7, scope: !4874)
!4884 = !DILocation(line: 2005, column: 19, scope: !4874)
!4885 = !DILocation(line: 2007, column: 2, scope: !4749)
!4886 = !DILocation(line: 2007, column: 6, scope: !4749)
!4887 = !DILocation(line: 2007, column: 11, scope: !4749)
!4888 = !DILocation(line: 2008, column: 6, scope: !4889)
!4889 = distinct !DILexicalBlock(scope: !4749, file: !1, line: 2008, column: 6)
!4890 = !DILocation(line: 2008, column: 11, scope: !4889)
!4891 = !DILocation(line: 2008, column: 16, scope: !4889)
!4892 = !DILocation(line: 2008, column: 6, scope: !4749)
!4893 = !DILocation(line: 2009, column: 36, scope: !4889)
!4894 = !DILocation(line: 2009, column: 41, scope: !4889)
!4895 = !DILocation(line: 2009, column: 15, scope: !4889)
!4896 = !DILocation(line: 2009, column: 3, scope: !4889)
!4897 = !DILocation(line: 2009, column: 7, scope: !4889)
!4898 = !DILocation(line: 2009, column: 13, scope: !4889)
!4899 = !DILocation(line: 2010, column: 1, scope: !4749)
!4900 = distinct !DISubprogram(name: "pbvh_show_diffuse_color_set", scope: !1, file: !1, line: 2012, type: !4901, scopeLine: 2013, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4901 = !DISubroutineType(types: !4902)
!4902 = !{null, !410, !573}
!4903 = !DILocalVariable(name: "bvh", arg: 1, scope: !4900, file: !1, line: 2012, type: !410)
!4904 = !DILocation(line: 2012, column: 40, scope: !4900)
!4905 = !DILocalVariable(name: "show_diffuse_color", arg: 2, scope: !4900, file: !1, line: 2012, type: !573)
!4906 = !DILocation(line: 2012, column: 50, scope: !4900)
!4907 = !DILocalVariable(name: "has_mask", scope: !4900, file: !1, line: 2014, type: !573)
!4908 = !DILocation(line: 2014, column: 7, scope: !4900)
!4909 = !DILocation(line: 2016, column: 10, scope: !4900)
!4910 = !DILocation(line: 2016, column: 15, scope: !4900)
!4911 = !DILocation(line: 2016, column: 2, scope: !4900)
!4912 = !DILocation(line: 2018, column: 16, scope: !4913)
!4913 = distinct !DILexicalBlock(scope: !4900, file: !1, line: 2016, column: 21)
!4914 = !DILocation(line: 2018, column: 21, scope: !4913)
!4915 = !DILocation(line: 2018, column: 29, scope: !4913)
!4916 = !DILocation(line: 2018, column: 38, scope: !4913)
!4917 = !DILocation(line: 2018, column: 15, scope: !4913)
!4918 = !DILocation(line: 2018, column: 13, scope: !4913)
!4919 = !DILocation(line: 2019, column: 4, scope: !4913)
!4920 = !DILocation(line: 2021, column: 16, scope: !4913)
!4921 = !DILocation(line: 2021, column: 21, scope: !4913)
!4922 = !DILocation(line: 2021, column: 27, scope: !4913)
!4923 = !DILocation(line: 2021, column: 51, scope: !4913)
!4924 = !DILocation(line: 2021, column: 56, scope: !4913)
!4925 = !DILocation(line: 2021, column: 30, scope: !4913)
!4926 = !DILocation(line: 0, scope: !4913)
!4927 = !DILocation(line: 2021, column: 15, scope: !4913)
!4928 = !DILocation(line: 2021, column: 13, scope: !4913)
!4929 = !DILocation(line: 2023, column: 4, scope: !4913)
!4930 = !DILocation(line: 2025, column: 16, scope: !4913)
!4931 = !DILocation(line: 2025, column: 21, scope: !4913)
!4932 = !DILocation(line: 2025, column: 24, scope: !4913)
!4933 = !DILocation(line: 2025, column: 51, scope: !4913)
!4934 = !DILocation(line: 2025, column: 56, scope: !4913)
!4935 = !DILocation(line: 2025, column: 60, scope: !4913)
!4936 = !DILocation(line: 2025, column: 28, scope: !4913)
!4937 = !DILocation(line: 2025, column: 82, scope: !4913)
!4938 = !DILocation(line: 2025, column: 15, scope: !4913)
!4939 = !DILocation(line: 2025, column: 13, scope: !4913)
!4940 = !DILocation(line: 2026, column: 4, scope: !4913)
!4941 = !DILocation(line: 2029, column: 29, scope: !4900)
!4942 = !DILocation(line: 2029, column: 38, scope: !4900)
!4943 = !DILocation(line: 2029, column: 41, scope: !4900)
!4944 = !DILocation(line: 2029, column: 28, scope: !4900)
!4945 = !DILocation(line: 2029, column: 2, scope: !4900)
!4946 = !DILocation(line: 2029, column: 7, scope: !4900)
!4947 = !DILocation(line: 2029, column: 26, scope: !4900)
!4948 = !DILocation(line: 2030, column: 1, scope: !4900)
!4949 = distinct !DISubprogram(name: "build_sub", scope: !1, file: !1, line: 464, type: !4950, scopeLine: 466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!4950 = !DISubroutineType(types: !4951)
!4951 = !{null, !410, !142, !127, !372, !142, !142}
!4952 = !DILocalVariable(name: "bvh", arg: 1, scope: !4949, file: !1, line: 464, type: !410)
!4953 = !DILocation(line: 464, column: 29, scope: !4949)
!4954 = !DILocalVariable(name: "node_index", arg: 2, scope: !4949, file: !1, line: 464, type: !142)
!4955 = !DILocation(line: 464, column: 38, scope: !4949)
!4956 = !DILocalVariable(name: "cb", arg: 3, scope: !4949, file: !1, line: 464, type: !127)
!4957 = !DILocation(line: 464, column: 54, scope: !4949)
!4958 = !DILocalVariable(name: "prim_bbc", arg: 4, scope: !4949, file: !1, line: 464, type: !372)
!4959 = !DILocation(line: 464, column: 63, scope: !4949)
!4960 = !DILocalVariable(name: "offset", arg: 5, scope: !4949, file: !1, line: 465, type: !142)
!4961 = !DILocation(line: 465, column: 27, scope: !4949)
!4962 = !DILocalVariable(name: "count", arg: 6, scope: !4949, file: !1, line: 465, type: !142)
!4963 = !DILocation(line: 465, column: 39, scope: !4949)
!4964 = !DILocalVariable(name: "i", scope: !4949, file: !1, line: 467, type: !142)
!4965 = !DILocation(line: 467, column: 6, scope: !4949)
!4966 = !DILocalVariable(name: "axis", scope: !4949, file: !1, line: 467, type: !142)
!4967 = !DILocation(line: 467, column: 9, scope: !4949)
!4968 = !DILocalVariable(name: "end", scope: !4949, file: !1, line: 467, type: !142)
!4969 = !DILocation(line: 467, column: 15, scope: !4949)
!4970 = !DILocalVariable(name: "below_leaf_limit", scope: !4949, file: !1, line: 467, type: !142)
!4971 = !DILocation(line: 467, column: 20, scope: !4949)
!4972 = !DILocalVariable(name: "cb_backing", scope: !4949, file: !1, line: 468, type: !128)
!4973 = !DILocation(line: 468, column: 5, scope: !4949)
!4974 = !DILocation(line: 471, column: 21, scope: !4949)
!4975 = !DILocation(line: 471, column: 30, scope: !4949)
!4976 = !DILocation(line: 471, column: 35, scope: !4949)
!4977 = !DILocation(line: 471, column: 27, scope: !4949)
!4978 = !DILocation(line: 471, column: 19, scope: !4949)
!4979 = !DILocation(line: 472, column: 6, scope: !4980)
!4980 = distinct !DILexicalBlock(scope: !4949, file: !1, line: 472, column: 6)
!4981 = !DILocation(line: 472, column: 6, scope: !4949)
!4982 = !DILocation(line: 473, column: 34, scope: !4983)
!4983 = distinct !DILexicalBlock(scope: !4984, file: !1, line: 473, column: 7)
!4984 = distinct !DILexicalBlock(scope: !4980, file: !1, line: 472, column: 24)
!4985 = !DILocation(line: 473, column: 39, scope: !4983)
!4986 = !DILocation(line: 473, column: 47, scope: !4983)
!4987 = !DILocation(line: 473, column: 8, scope: !4983)
!4988 = !DILocation(line: 473, column: 7, scope: !4984)
!4989 = !DILocation(line: 474, column: 15, scope: !4990)
!4990 = distinct !DILexicalBlock(scope: !4983, file: !1, line: 473, column: 55)
!4991 = !DILocation(line: 474, column: 20, scope: !4990)
!4992 = !DILocation(line: 474, column: 32, scope: !4990)
!4993 = !DILocation(line: 474, column: 42, scope: !4990)
!4994 = !DILocation(line: 474, column: 50, scope: !4990)
!4995 = !DILocation(line: 474, column: 4, scope: !4990)
!4996 = !DILocation(line: 475, column: 4, scope: !4990)
!4997 = !DILocation(line: 477, column: 2, scope: !4984)
!4998 = !DILocation(line: 480, column: 43, scope: !4949)
!4999 = !DILocation(line: 480, column: 48, scope: !4949)
!5000 = !DILocation(line: 480, column: 2, scope: !4949)
!5001 = !DILocation(line: 480, column: 7, scope: !4949)
!5002 = !DILocation(line: 480, column: 13, scope: !4949)
!5003 = !DILocation(line: 480, column: 25, scope: !4949)
!5004 = !DILocation(line: 480, column: 41, scope: !4949)
!5005 = !DILocation(line: 481, column: 18, scope: !4949)
!5006 = !DILocation(line: 481, column: 23, scope: !4949)
!5007 = !DILocation(line: 481, column: 28, scope: !4949)
!5008 = !DILocation(line: 481, column: 36, scope: !4949)
!5009 = !DILocation(line: 481, column: 2, scope: !4949)
!5010 = !DILocation(line: 484, column: 12, scope: !4949)
!5011 = !DILocation(line: 484, column: 18, scope: !4949)
!5012 = !DILocation(line: 484, column: 23, scope: !4949)
!5013 = !DILocation(line: 484, column: 29, scope: !4949)
!5014 = !DILocation(line: 484, column: 42, scope: !4949)
!5015 = !DILocation(line: 484, column: 52, scope: !4949)
!5016 = !DILocation(line: 484, column: 60, scope: !4949)
!5017 = !DILocation(line: 484, column: 2, scope: !4949)
!5018 = !DILocation(line: 486, column: 7, scope: !5019)
!5019 = distinct !DILexicalBlock(scope: !4949, file: !1, line: 486, column: 6)
!5020 = !DILocation(line: 486, column: 6, scope: !4949)
!5021 = !DILocation(line: 488, column: 8, scope: !5022)
!5022 = distinct !DILexicalBlock(scope: !5023, file: !1, line: 488, column: 7)
!5023 = distinct !DILexicalBlock(scope: !5019, file: !1, line: 486, column: 25)
!5024 = !DILocation(line: 488, column: 7, scope: !5023)
!5025 = !DILocation(line: 489, column: 7, scope: !5026)
!5026 = distinct !DILexicalBlock(scope: !5022, file: !1, line: 488, column: 12)
!5027 = !DILocation(line: 490, column: 13, scope: !5026)
!5028 = !DILocation(line: 490, column: 4, scope: !5026)
!5029 = !DILocation(line: 491, column: 13, scope: !5030)
!5030 = distinct !DILexicalBlock(scope: !5026, file: !1, line: 491, column: 4)
!5031 = !DILocation(line: 491, column: 22, scope: !5030)
!5032 = !DILocation(line: 491, column: 20, scope: !5030)
!5033 = !DILocation(line: 491, column: 28, scope: !5030)
!5034 = !DILocation(line: 491, column: 11, scope: !5030)
!5035 = !DILocation(line: 491, column: 9, scope: !5030)
!5036 = !DILocation(line: 491, column: 33, scope: !5037)
!5037 = distinct !DILexicalBlock(scope: !5030, file: !1, line: 491, column: 4)
!5038 = !DILocation(line: 491, column: 38, scope: !5037)
!5039 = !DILocation(line: 491, column: 35, scope: !5037)
!5040 = !DILocation(line: 491, column: 4, scope: !5030)
!5041 = !DILocation(line: 492, column: 15, scope: !5037)
!5042 = !DILocation(line: 492, column: 19, scope: !5037)
!5043 = !DILocation(line: 492, column: 28, scope: !5037)
!5044 = !DILocation(line: 492, column: 33, scope: !5037)
!5045 = !DILocation(line: 492, column: 46, scope: !5037)
!5046 = !DILocation(line: 492, column: 50, scope: !5037)
!5047 = !DILocation(line: 492, column: 5, scope: !5037)
!5048 = !DILocation(line: 491, column: 46, scope: !5037)
!5049 = !DILocation(line: 491, column: 4, scope: !5037)
!5050 = distinct !{!5050, !5040, !5051}
!5051 = !DILocation(line: 492, column: 59, scope: !5030)
!5052 = !DILocation(line: 493, column: 3, scope: !5026)
!5053 = !DILocation(line: 494, column: 25, scope: !5023)
!5054 = !DILocation(line: 494, column: 10, scope: !5023)
!5055 = !DILocation(line: 494, column: 8, scope: !5023)
!5056 = !DILocation(line: 497, column: 27, scope: !5023)
!5057 = !DILocation(line: 497, column: 32, scope: !5023)
!5058 = !DILocation(line: 498, column: 27, scope: !5023)
!5059 = !DILocation(line: 498, column: 35, scope: !5023)
!5060 = !DILocation(line: 498, column: 44, scope: !5023)
!5061 = !DILocation(line: 498, column: 42, scope: !5023)
!5062 = !DILocation(line: 498, column: 50, scope: !5023)
!5063 = !DILocation(line: 499, column: 27, scope: !5023)
!5064 = !DILocation(line: 500, column: 28, scope: !5023)
!5065 = !DILocation(line: 500, column: 32, scope: !5023)
!5066 = !DILocation(line: 500, column: 37, scope: !5023)
!5067 = !DILocation(line: 500, column: 45, scope: !5023)
!5068 = !DILocation(line: 500, column: 49, scope: !5023)
!5069 = !DILocation(line: 500, column: 54, scope: !5023)
!5070 = !DILocation(line: 500, column: 43, scope: !5023)
!5071 = !DILocation(line: 500, column: 61, scope: !5023)
!5072 = !DILocation(line: 501, column: 27, scope: !5023)
!5073 = !DILocation(line: 497, column: 9, scope: !5023)
!5074 = !DILocation(line: 497, column: 7, scope: !5023)
!5075 = !DILocation(line: 502, column: 2, scope: !5023)
!5076 = !DILocation(line: 505, column: 36, scope: !5077)
!5077 = distinct !DILexicalBlock(scope: !5019, file: !1, line: 503, column: 7)
!5078 = !DILocation(line: 505, column: 41, scope: !5077)
!5079 = !DILocation(line: 505, column: 49, scope: !5077)
!5080 = !DILocation(line: 505, column: 58, scope: !5077)
!5081 = !DILocation(line: 505, column: 56, scope: !5077)
!5082 = !DILocation(line: 505, column: 64, scope: !5077)
!5083 = !DILocation(line: 505, column: 9, scope: !5077)
!5084 = !DILocation(line: 505, column: 7, scope: !5077)
!5085 = !DILocation(line: 509, column: 12, scope: !4949)
!5086 = !DILocation(line: 509, column: 17, scope: !4949)
!5087 = !DILocation(line: 509, column: 22, scope: !4949)
!5088 = !DILocation(line: 509, column: 28, scope: !4949)
!5089 = !DILocation(line: 509, column: 40, scope: !4949)
!5090 = !DILocation(line: 510, column: 12, scope: !4949)
!5091 = !DILocation(line: 510, column: 22, scope: !4949)
!5092 = !DILocation(line: 510, column: 30, scope: !4949)
!5093 = !DILocation(line: 510, column: 36, scope: !4949)
!5094 = !DILocation(line: 510, column: 34, scope: !4949)
!5095 = !DILocation(line: 509, column: 2, scope: !4949)
!5096 = !DILocation(line: 511, column: 12, scope: !4949)
!5097 = !DILocation(line: 511, column: 17, scope: !4949)
!5098 = !DILocation(line: 511, column: 22, scope: !4949)
!5099 = !DILocation(line: 511, column: 28, scope: !4949)
!5100 = !DILocation(line: 511, column: 40, scope: !4949)
!5101 = !DILocation(line: 511, column: 56, scope: !4949)
!5102 = !DILocation(line: 512, column: 12, scope: !4949)
!5103 = !DILocation(line: 512, column: 22, scope: !4949)
!5104 = !DILocation(line: 512, column: 27, scope: !4949)
!5105 = !DILocation(line: 512, column: 36, scope: !4949)
!5106 = !DILocation(line: 512, column: 34, scope: !4949)
!5107 = !DILocation(line: 512, column: 44, scope: !4949)
!5108 = !DILocation(line: 512, column: 42, scope: !4949)
!5109 = !DILocation(line: 511, column: 2, scope: !4949)
!5110 = !DILocation(line: 513, column: 1, scope: !4949)
!5111 = distinct !DISubprogram(name: "leaf_needs_material_split", scope: !1, file: !1, line: 423, type: !5112, scopeLine: 424, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5112 = !DISubroutineType(types: !5113)
!5113 = !{!142, !410, !142, !142}
!5114 = !DILocalVariable(name: "bvh", arg: 1, scope: !5111, file: !1, line: 423, type: !410)
!5115 = !DILocation(line: 423, column: 44, scope: !5111)
!5116 = !DILocalVariable(name: "offset", arg: 2, scope: !5111, file: !1, line: 423, type: !142)
!5117 = !DILocation(line: 423, column: 53, scope: !5111)
!5118 = !DILocalVariable(name: "count", arg: 3, scope: !5111, file: !1, line: 423, type: !142)
!5119 = !DILocation(line: 423, column: 65, scope: !5111)
!5120 = !DILocalVariable(name: "i", scope: !5111, file: !1, line: 425, type: !142)
!5121 = !DILocation(line: 425, column: 6, scope: !5111)
!5122 = !DILocalVariable(name: "prim", scope: !5111, file: !1, line: 425, type: !142)
!5123 = !DILocation(line: 425, column: 9, scope: !5111)
!5124 = !DILocation(line: 427, column: 6, scope: !5125)
!5125 = distinct !DILexicalBlock(scope: !5111, file: !1, line: 427, column: 6)
!5126 = !DILocation(line: 427, column: 12, scope: !5125)
!5127 = !DILocation(line: 427, column: 6, scope: !5111)
!5128 = !DILocation(line: 428, column: 3, scope: !5125)
!5129 = !DILocation(line: 430, column: 6, scope: !5130)
!5130 = distinct !DILexicalBlock(scope: !5111, file: !1, line: 430, column: 6)
!5131 = !DILocation(line: 430, column: 11, scope: !5130)
!5132 = !DILocation(line: 430, column: 6, scope: !5111)
!5133 = !DILocalVariable(name: "first", scope: !5134, file: !1, line: 431, type: !3385)
!5134 = distinct !DILexicalBlock(scope: !5130, file: !1, line: 430, column: 18)
!5135 = !DILocation(line: 431, column: 16, scope: !5134)
!5136 = !DILocation(line: 431, column: 25, scope: !5134)
!5137 = !DILocation(line: 431, column: 30, scope: !5134)
!5138 = !DILocation(line: 431, column: 36, scope: !5134)
!5139 = !DILocation(line: 431, column: 41, scope: !5134)
!5140 = !DILocation(line: 431, column: 54, scope: !5134)
!5141 = !DILocation(line: 433, column: 12, scope: !5142)
!5142 = distinct !DILexicalBlock(scope: !5134, file: !1, line: 433, column: 3)
!5143 = !DILocation(line: 433, column: 21, scope: !5142)
!5144 = !DILocation(line: 433, column: 19, scope: !5142)
!5145 = !DILocation(line: 433, column: 27, scope: !5142)
!5146 = !DILocation(line: 433, column: 10, scope: !5142)
!5147 = !DILocation(line: 433, column: 8, scope: !5142)
!5148 = !DILocation(line: 433, column: 32, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !5142, file: !1, line: 433, column: 3)
!5150 = !DILocation(line: 433, column: 36, scope: !5149)
!5151 = !DILocation(line: 433, column: 34, scope: !5149)
!5152 = !DILocation(line: 433, column: 3, scope: !5142)
!5153 = !DILocation(line: 434, column: 11, scope: !5154)
!5154 = distinct !DILexicalBlock(scope: !5149, file: !1, line: 433, column: 49)
!5155 = !DILocation(line: 434, column: 16, scope: !5154)
!5156 = !DILocation(line: 434, column: 29, scope: !5154)
!5157 = !DILocation(line: 434, column: 9, scope: !5154)
!5158 = !DILocation(line: 435, column: 30, scope: !5159)
!5159 = distinct !DILexicalBlock(scope: !5154, file: !1, line: 435, column: 8)
!5160 = !DILocation(line: 435, column: 38, scope: !5159)
!5161 = !DILocation(line: 435, column: 43, scope: !5159)
!5162 = !DILocation(line: 435, column: 49, scope: !5159)
!5163 = !DILocation(line: 435, column: 9, scope: !5159)
!5164 = !DILocation(line: 435, column: 8, scope: !5154)
!5165 = !DILocation(line: 436, column: 5, scope: !5159)
!5166 = !DILocation(line: 437, column: 3, scope: !5154)
!5167 = !DILocation(line: 433, column: 44, scope: !5149)
!5168 = !DILocation(line: 433, column: 3, scope: !5149)
!5169 = distinct !{!5169, !5152, !5170}
!5170 = !DILocation(line: 437, column: 3, scope: !5142)
!5171 = !DILocation(line: 438, column: 2, scope: !5134)
!5172 = !DILocalVariable(name: "first", scope: !5173, file: !1, line: 440, type: !561)
!5173 = distinct !DILexicalBlock(scope: !5130, file: !1, line: 439, column: 7)
!5174 = !DILocation(line: 440, column: 20, scope: !5173)
!5175 = !DILocation(line: 440, column: 29, scope: !5173)
!5176 = !DILocation(line: 440, column: 34, scope: !5173)
!5177 = !DILocation(line: 440, column: 49, scope: !5173)
!5178 = !DILocation(line: 440, column: 54, scope: !5173)
!5179 = !DILocation(line: 440, column: 67, scope: !5173)
!5180 = !DILocation(line: 442, column: 12, scope: !5181)
!5181 = distinct !DILexicalBlock(scope: !5173, file: !1, line: 442, column: 3)
!5182 = !DILocation(line: 442, column: 21, scope: !5181)
!5183 = !DILocation(line: 442, column: 19, scope: !5181)
!5184 = !DILocation(line: 442, column: 27, scope: !5181)
!5185 = !DILocation(line: 442, column: 10, scope: !5181)
!5186 = !DILocation(line: 442, column: 8, scope: !5181)
!5187 = !DILocation(line: 442, column: 32, scope: !5188)
!5188 = distinct !DILexicalBlock(scope: !5181, file: !1, line: 442, column: 3)
!5189 = !DILocation(line: 442, column: 36, scope: !5188)
!5190 = !DILocation(line: 442, column: 34, scope: !5188)
!5191 = !DILocation(line: 442, column: 3, scope: !5181)
!5192 = !DILocation(line: 443, column: 11, scope: !5193)
!5193 = distinct !DILexicalBlock(scope: !5188, file: !1, line: 442, column: 49)
!5194 = !DILocation(line: 443, column: 16, scope: !5193)
!5195 = !DILocation(line: 443, column: 29, scope: !5193)
!5196 = !DILocation(line: 443, column: 9, scope: !5193)
!5197 = !DILocation(line: 444, column: 30, scope: !5198)
!5198 = distinct !DILexicalBlock(scope: !5193, file: !1, line: 444, column: 8)
!5199 = !DILocation(line: 444, column: 38, scope: !5198)
!5200 = !DILocation(line: 444, column: 43, scope: !5198)
!5201 = !DILocation(line: 444, column: 58, scope: !5198)
!5202 = !DILocation(line: 444, column: 9, scope: !5198)
!5203 = !DILocation(line: 444, column: 8, scope: !5193)
!5204 = !DILocation(line: 445, column: 5, scope: !5198)
!5205 = !DILocation(line: 446, column: 3, scope: !5193)
!5206 = !DILocation(line: 442, column: 44, scope: !5188)
!5207 = !DILocation(line: 442, column: 3, scope: !5188)
!5208 = distinct !{!5208, !5191, !5209}
!5209 = !DILocation(line: 446, column: 3, scope: !5181)
!5210 = !DILocation(line: 449, column: 2, scope: !5111)
!5211 = !DILocation(line: 450, column: 1, scope: !5111)
!5212 = distinct !DISubprogram(name: "build_leaf", scope: !1, file: !1, line: 403, type: !5213, scopeLine: 405, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5213 = !DISubroutineType(types: !5214)
!5214 = !{null, !410, !142, !372, !142, !142}
!5215 = !DILocalVariable(name: "bvh", arg: 1, scope: !5212, file: !1, line: 403, type: !410)
!5216 = !DILocation(line: 403, column: 30, scope: !5212)
!5217 = !DILocalVariable(name: "node_index", arg: 2, scope: !5212, file: !1, line: 403, type: !142)
!5218 = !DILocation(line: 403, column: 39, scope: !5212)
!5219 = !DILocalVariable(name: "prim_bbc", arg: 3, scope: !5212, file: !1, line: 403, type: !372)
!5220 = !DILocation(line: 403, column: 56, scope: !5212)
!5221 = !DILocalVariable(name: "offset", arg: 4, scope: !5212, file: !1, line: 404, type: !142)
!5222 = !DILocation(line: 404, column: 28, scope: !5212)
!5223 = !DILocalVariable(name: "count", arg: 5, scope: !5212, file: !1, line: 404, type: !142)
!5224 = !DILocation(line: 404, column: 40, scope: !5212)
!5225 = !DILocation(line: 406, column: 2, scope: !5212)
!5226 = !DILocation(line: 406, column: 7, scope: !5212)
!5227 = !DILocation(line: 406, column: 13, scope: !5212)
!5228 = !DILocation(line: 406, column: 25, scope: !5212)
!5229 = !DILocation(line: 406, column: 30, scope: !5212)
!5230 = !DILocation(line: 408, column: 40, scope: !5212)
!5231 = !DILocation(line: 408, column: 45, scope: !5212)
!5232 = !DILocation(line: 408, column: 60, scope: !5212)
!5233 = !DILocation(line: 408, column: 58, scope: !5212)
!5234 = !DILocation(line: 408, column: 2, scope: !5212)
!5235 = !DILocation(line: 408, column: 7, scope: !5212)
!5236 = !DILocation(line: 408, column: 13, scope: !5212)
!5237 = !DILocation(line: 408, column: 25, scope: !5212)
!5238 = !DILocation(line: 408, column: 38, scope: !5212)
!5239 = !DILocation(line: 409, column: 35, scope: !5212)
!5240 = !DILocation(line: 409, column: 2, scope: !5212)
!5241 = !DILocation(line: 409, column: 7, scope: !5212)
!5242 = !DILocation(line: 409, column: 13, scope: !5212)
!5243 = !DILocation(line: 409, column: 25, scope: !5212)
!5244 = !DILocation(line: 409, column: 33, scope: !5212)
!5245 = !DILocation(line: 412, column: 12, scope: !5212)
!5246 = !DILocation(line: 412, column: 18, scope: !5212)
!5247 = !DILocation(line: 412, column: 23, scope: !5212)
!5248 = !DILocation(line: 412, column: 29, scope: !5212)
!5249 = !DILocation(line: 412, column: 42, scope: !5212)
!5250 = !DILocation(line: 412, column: 52, scope: !5212)
!5251 = !DILocation(line: 412, column: 60, scope: !5212)
!5252 = !DILocation(line: 412, column: 2, scope: !5212)
!5253 = !DILocation(line: 414, column: 6, scope: !5254)
!5254 = distinct !DILexicalBlock(scope: !5212, file: !1, line: 414, column: 6)
!5255 = !DILocation(line: 414, column: 11, scope: !5254)
!5256 = !DILocation(line: 414, column: 6, scope: !5212)
!5257 = !DILocation(line: 415, column: 24, scope: !5254)
!5258 = !DILocation(line: 415, column: 29, scope: !5254)
!5259 = !DILocation(line: 415, column: 34, scope: !5254)
!5260 = !DILocation(line: 415, column: 42, scope: !5254)
!5261 = !DILocation(line: 415, column: 40, scope: !5254)
!5262 = !DILocation(line: 415, column: 3, scope: !5254)
!5263 = !DILocation(line: 417, column: 24, scope: !5264)
!5264 = distinct !DILexicalBlock(scope: !5254, file: !1, line: 416, column: 7)
!5265 = !DILocation(line: 417, column: 29, scope: !5264)
!5266 = !DILocation(line: 417, column: 34, scope: !5264)
!5267 = !DILocation(line: 417, column: 42, scope: !5264)
!5268 = !DILocation(line: 417, column: 40, scope: !5264)
!5269 = !DILocation(line: 417, column: 3, scope: !5264)
!5270 = !DILocation(line: 419, column: 1, scope: !5212)
!5271 = distinct !DISubprogram(name: "update_vb", scope: !1, file: !1, line: 352, type: !5272, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5272 = !DISubroutineType(types: !5273)
!5273 = !{null, !410, !419, !372, !142, !142}
!5274 = !DILocalVariable(name: "bvh", arg: 1, scope: !5271, file: !1, line: 352, type: !410)
!5275 = !DILocation(line: 352, column: 29, scope: !5271)
!5276 = !DILocalVariable(name: "node", arg: 2, scope: !5271, file: !1, line: 352, type: !419)
!5277 = !DILocation(line: 352, column: 44, scope: !5271)
!5278 = !DILocalVariable(name: "prim_bbc", arg: 3, scope: !5271, file: !1, line: 352, type: !372)
!5279 = !DILocation(line: 352, column: 55, scope: !5271)
!5280 = !DILocalVariable(name: "offset", arg: 4, scope: !5271, file: !1, line: 353, type: !142)
!5281 = !DILocation(line: 353, column: 27, scope: !5271)
!5282 = !DILocalVariable(name: "count", arg: 5, scope: !5271, file: !1, line: 353, type: !142)
!5283 = !DILocation(line: 353, column: 39, scope: !5271)
!5284 = !DILocalVariable(name: "i", scope: !5271, file: !1, line: 355, type: !142)
!5285 = !DILocation(line: 355, column: 6, scope: !5271)
!5286 = !DILocation(line: 357, column: 12, scope: !5271)
!5287 = !DILocation(line: 357, column: 18, scope: !5271)
!5288 = !DILocation(line: 357, column: 2, scope: !5271)
!5289 = !DILocation(line: 358, column: 11, scope: !5290)
!5290 = distinct !DILexicalBlock(scope: !5271, file: !1, line: 358, column: 2)
!5291 = !DILocation(line: 358, column: 20, scope: !5290)
!5292 = !DILocation(line: 358, column: 18, scope: !5290)
!5293 = !DILocation(line: 358, column: 26, scope: !5290)
!5294 = !DILocation(line: 358, column: 9, scope: !5290)
!5295 = !DILocation(line: 358, column: 7, scope: !5290)
!5296 = !DILocation(line: 358, column: 31, scope: !5297)
!5297 = distinct !DILexicalBlock(scope: !5290, file: !1, line: 358, column: 2)
!5298 = !DILocation(line: 358, column: 36, scope: !5297)
!5299 = !DILocation(line: 358, column: 33, scope: !5297)
!5300 = !DILocation(line: 358, column: 2, scope: !5290)
!5301 = !DILocation(line: 359, column: 22, scope: !5302)
!5302 = distinct !DILexicalBlock(scope: !5297, file: !1, line: 358, column: 49)
!5303 = !DILocation(line: 359, column: 28, scope: !5302)
!5304 = !DILocation(line: 359, column: 40, scope: !5302)
!5305 = !DILocation(line: 359, column: 49, scope: !5302)
!5306 = !DILocation(line: 359, column: 54, scope: !5302)
!5307 = !DILocation(line: 359, column: 67, scope: !5302)
!5308 = !DILocation(line: 359, column: 32, scope: !5302)
!5309 = !DILocation(line: 359, column: 3, scope: !5302)
!5310 = !DILocation(line: 360, column: 2, scope: !5302)
!5311 = !DILocation(line: 358, column: 44, scope: !5297)
!5312 = !DILocation(line: 358, column: 2, scope: !5297)
!5313 = distinct !{!5313, !5300, !5314}
!5314 = !DILocation(line: 360, column: 2, scope: !5290)
!5315 = !DILocation(line: 361, column: 2, scope: !5271)
!5316 = !DILocation(line: 361, column: 8, scope: !5271)
!5317 = !DILocation(line: 361, column: 18, scope: !5271)
!5318 = !DILocation(line: 361, column: 24, scope: !5271)
!5319 = !DILocation(line: 362, column: 1, scope: !5271)
!5320 = distinct !DISubprogram(name: "partition_indices", scope: !1, file: !1, line: 185, type: !5321, scopeLine: 187, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5321 = !DISubroutineType(types: !5322)
!5322 = !{!142, !431, !142, !142, !142, !133, !372}
!5323 = !DILocalVariable(name: "prim_indices", arg: 1, scope: !5320, file: !1, line: 185, type: !431)
!5324 = !DILocation(line: 185, column: 35, scope: !5320)
!5325 = !DILocalVariable(name: "lo", arg: 2, scope: !5320, file: !1, line: 185, type: !142)
!5326 = !DILocation(line: 185, column: 53, scope: !5320)
!5327 = !DILocalVariable(name: "hi", arg: 3, scope: !5320, file: !1, line: 185, type: !142)
!5328 = !DILocation(line: 185, column: 61, scope: !5320)
!5329 = !DILocalVariable(name: "axis", arg: 4, scope: !5320, file: !1, line: 185, type: !142)
!5330 = !DILocation(line: 185, column: 69, scope: !5320)
!5331 = !DILocalVariable(name: "mid", arg: 5, scope: !5320, file: !1, line: 186, type: !133)
!5332 = !DILocation(line: 186, column: 36, scope: !5320)
!5333 = !DILocalVariable(name: "prim_bbc", arg: 6, scope: !5320, file: !1, line: 186, type: !372)
!5334 = !DILocation(line: 186, column: 46, scope: !5320)
!5335 = !DILocalVariable(name: "i", scope: !5320, file: !1, line: 188, type: !142)
!5336 = !DILocation(line: 188, column: 6, scope: !5320)
!5337 = !DILocation(line: 188, column: 10, scope: !5320)
!5338 = !DILocalVariable(name: "j", scope: !5320, file: !1, line: 188, type: !142)
!5339 = !DILocation(line: 188, column: 14, scope: !5320)
!5340 = !DILocation(line: 188, column: 18, scope: !5320)
!5341 = !DILocation(line: 189, column: 2, scope: !5320)
!5342 = !DILocation(line: 190, column: 3, scope: !5343)
!5343 = distinct !DILexicalBlock(scope: !5344, file: !1, line: 189, column: 12)
!5344 = distinct !DILexicalBlock(scope: !5345, file: !1, line: 189, column: 2)
!5345 = distinct !DILexicalBlock(scope: !5320, file: !1, line: 189, column: 2)
!5346 = !DILocation(line: 190, column: 10, scope: !5347)
!5347 = distinct !DILexicalBlock(scope: !5348, file: !1, line: 190, column: 3)
!5348 = distinct !DILexicalBlock(scope: !5343, file: !1, line: 190, column: 3)
!5349 = !DILocation(line: 190, column: 19, scope: !5347)
!5350 = !DILocation(line: 190, column: 32, scope: !5347)
!5351 = !DILocation(line: 190, column: 36, scope: !5347)
!5352 = !DILocation(line: 190, column: 46, scope: !5347)
!5353 = !DILocation(line: 190, column: 54, scope: !5347)
!5354 = !DILocation(line: 190, column: 52, scope: !5347)
!5355 = !DILocation(line: 190, column: 3, scope: !5348)
!5356 = !DILocation(line: 190, column: 60, scope: !5347)
!5357 = !DILocation(line: 190, column: 3, scope: !5347)
!5358 = distinct !{!5358, !5355, !5359}
!5359 = !DILocation(line: 190, column: 64, scope: !5348)
!5360 = !DILocation(line: 191, column: 3, scope: !5343)
!5361 = !DILocation(line: 191, column: 10, scope: !5362)
!5362 = distinct !DILexicalBlock(scope: !5363, file: !1, line: 191, column: 3)
!5363 = distinct !DILexicalBlock(scope: !5343, file: !1, line: 191, column: 3)
!5364 = !DILocation(line: 191, column: 16, scope: !5362)
!5365 = !DILocation(line: 191, column: 25, scope: !5362)
!5366 = !DILocation(line: 191, column: 38, scope: !5362)
!5367 = !DILocation(line: 191, column: 42, scope: !5362)
!5368 = !DILocation(line: 191, column: 52, scope: !5362)
!5369 = !DILocation(line: 191, column: 14, scope: !5362)
!5370 = !DILocation(line: 191, column: 3, scope: !5363)
!5371 = !DILocation(line: 191, column: 60, scope: !5362)
!5372 = !DILocation(line: 191, column: 3, scope: !5362)
!5373 = distinct !{!5373, !5370, !5374}
!5374 = !DILocation(line: 191, column: 64, scope: !5363)
!5375 = !DILocation(line: 193, column: 9, scope: !5376)
!5376 = distinct !DILexicalBlock(scope: !5343, file: !1, line: 193, column: 7)
!5377 = !DILocation(line: 193, column: 13, scope: !5376)
!5378 = !DILocation(line: 193, column: 11, scope: !5376)
!5379 = !DILocation(line: 193, column: 7, scope: !5343)
!5380 = !DILocation(line: 194, column: 11, scope: !5376)
!5381 = !DILocation(line: 194, column: 4, scope: !5376)
!5382 = !DILocalVariable(name: "sw_ap", scope: !5383, file: !1, line: 196, type: !142)
!5383 = distinct !DILexicalBlock(scope: !5343, file: !1, line: 196, column: 3)
!5384 = !DILocation(line: 196, column: 3, scope: !5383)
!5385 = !DILocation(line: 197, column: 4, scope: !5343)
!5386 = !DILocation(line: 189, column: 2, scope: !5344)
!5387 = distinct !{!5387, !5388, !5389}
!5388 = !DILocation(line: 189, column: 2, scope: !5345)
!5389 = !DILocation(line: 198, column: 2, scope: !5345)
!5390 = distinct !DISubprogram(name: "partition_indices_material", scope: !1, file: !1, line: 202, type: !5112, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5391 = !DILocalVariable(name: "bvh", arg: 1, scope: !5390, file: !1, line: 202, type: !410)
!5392 = !DILocation(line: 202, column: 45, scope: !5390)
!5393 = !DILocalVariable(name: "lo", arg: 2, scope: !5390, file: !1, line: 202, type: !142)
!5394 = !DILocation(line: 202, column: 54, scope: !5390)
!5395 = !DILocalVariable(name: "hi", arg: 3, scope: !5390, file: !1, line: 202, type: !142)
!5396 = !DILocation(line: 202, column: 62, scope: !5390)
!5397 = !DILocalVariable(name: "faces", scope: !5390, file: !1, line: 204, type: !3385)
!5398 = !DILocation(line: 204, column: 15, scope: !5390)
!5399 = !DILocation(line: 204, column: 23, scope: !5390)
!5400 = !DILocation(line: 204, column: 28, scope: !5390)
!5401 = !DILocalVariable(name: "flagmats", scope: !5390, file: !1, line: 205, type: !561)
!5402 = !DILocation(line: 205, column: 19, scope: !5390)
!5403 = !DILocation(line: 205, column: 30, scope: !5390)
!5404 = !DILocation(line: 205, column: 35, scope: !5390)
!5405 = !DILocalVariable(name: "indices", scope: !5390, file: !1, line: 206, type: !3363)
!5406 = !DILocation(line: 206, column: 13, scope: !5390)
!5407 = !DILocation(line: 206, column: 23, scope: !5390)
!5408 = !DILocation(line: 206, column: 28, scope: !5390)
!5409 = !DILocalVariable(name: "first", scope: !5390, file: !1, line: 207, type: !5410)
!5410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5411, size: 64)
!5411 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!5412 = !DILocation(line: 207, column: 14, scope: !5390)
!5413 = !DILocalVariable(name: "i", scope: !5390, file: !1, line: 208, type: !142)
!5414 = !DILocation(line: 208, column: 6, scope: !5390)
!5415 = !DILocation(line: 208, column: 10, scope: !5390)
!5416 = !DILocalVariable(name: "j", scope: !5390, file: !1, line: 208, type: !142)
!5417 = !DILocation(line: 208, column: 14, scope: !5390)
!5418 = !DILocation(line: 208, column: 18, scope: !5390)
!5419 = !DILocation(line: 210, column: 6, scope: !5420)
!5420 = distinct !DILexicalBlock(scope: !5390, file: !1, line: 210, column: 6)
!5421 = !DILocation(line: 210, column: 11, scope: !5420)
!5422 = !DILocation(line: 210, column: 6, scope: !5390)
!5423 = !DILocation(line: 211, column: 12, scope: !5420)
!5424 = !DILocation(line: 211, column: 18, scope: !5420)
!5425 = !DILocation(line: 211, column: 23, scope: !5420)
!5426 = !DILocation(line: 211, column: 36, scope: !5420)
!5427 = !DILocation(line: 211, column: 11, scope: !5420)
!5428 = !DILocation(line: 211, column: 9, scope: !5420)
!5429 = !DILocation(line: 211, column: 3, scope: !5420)
!5430 = !DILocation(line: 213, column: 12, scope: !5420)
!5431 = !DILocation(line: 213, column: 21, scope: !5420)
!5432 = !DILocation(line: 213, column: 26, scope: !5420)
!5433 = !DILocation(line: 213, column: 39, scope: !5420)
!5434 = !DILocation(line: 213, column: 11, scope: !5420)
!5435 = !DILocation(line: 213, column: 9, scope: !5420)
!5436 = !DILocation(line: 215, column: 2, scope: !5390)
!5437 = !DILocation(line: 216, column: 7, scope: !5438)
!5438 = distinct !DILexicalBlock(scope: !5439, file: !1, line: 216, column: 7)
!5439 = distinct !DILexicalBlock(scope: !5440, file: !1, line: 215, column: 12)
!5440 = distinct !DILexicalBlock(scope: !5441, file: !1, line: 215, column: 2)
!5441 = distinct !DILexicalBlock(scope: !5390, file: !1, line: 215, column: 2)
!5442 = !DILocation(line: 216, column: 12, scope: !5438)
!5443 = !DILocation(line: 216, column: 7, scope: !5439)
!5444 = !DILocation(line: 217, column: 4, scope: !5445)
!5445 = distinct !DILexicalBlock(scope: !5438, file: !1, line: 216, column: 19)
!5446 = !DILocation(line: 217, column: 32, scope: !5447)
!5447 = distinct !DILexicalBlock(scope: !5448, file: !1, line: 217, column: 4)
!5448 = distinct !DILexicalBlock(scope: !5445, file: !1, line: 217, column: 4)
!5449 = !DILocation(line: 217, column: 40, scope: !5447)
!5450 = !DILocation(line: 217, column: 46, scope: !5447)
!5451 = !DILocation(line: 217, column: 54, scope: !5447)
!5452 = !DILocation(line: 217, column: 11, scope: !5447)
!5453 = !DILocation(line: 217, column: 4, scope: !5448)
!5454 = !DILocation(line: 217, column: 61, scope: !5447)
!5455 = !DILocation(line: 217, column: 4, scope: !5447)
!5456 = distinct !{!5456, !5453, !5457}
!5457 = !DILocation(line: 217, column: 65, scope: !5448)
!5458 = !DILocation(line: 218, column: 4, scope: !5445)
!5459 = !DILocation(line: 218, column: 33, scope: !5460)
!5460 = distinct !DILexicalBlock(scope: !5461, file: !1, line: 218, column: 4)
!5461 = distinct !DILexicalBlock(scope: !5445, file: !1, line: 218, column: 4)
!5462 = !DILocation(line: 218, column: 41, scope: !5460)
!5463 = !DILocation(line: 218, column: 47, scope: !5460)
!5464 = !DILocation(line: 218, column: 55, scope: !5460)
!5465 = !DILocation(line: 218, column: 12, scope: !5460)
!5466 = !DILocation(line: 218, column: 11, scope: !5460)
!5467 = !DILocation(line: 218, column: 4, scope: !5461)
!5468 = !DILocation(line: 218, column: 62, scope: !5460)
!5469 = !DILocation(line: 218, column: 4, scope: !5460)
!5470 = distinct !{!5470, !5467, !5471}
!5471 = !DILocation(line: 218, column: 66, scope: !5461)
!5472 = !DILocation(line: 219, column: 3, scope: !5445)
!5473 = !DILocation(line: 221, column: 4, scope: !5474)
!5474 = distinct !DILexicalBlock(scope: !5438, file: !1, line: 220, column: 8)
!5475 = !DILocation(line: 221, column: 32, scope: !5476)
!5476 = distinct !DILexicalBlock(scope: !5477, file: !1, line: 221, column: 4)
!5477 = distinct !DILexicalBlock(scope: !5474, file: !1, line: 221, column: 4)
!5478 = !DILocation(line: 221, column: 40, scope: !5476)
!5479 = !DILocation(line: 221, column: 49, scope: !5476)
!5480 = !DILocation(line: 221, column: 57, scope: !5476)
!5481 = !DILocation(line: 221, column: 11, scope: !5476)
!5482 = !DILocation(line: 221, column: 4, scope: !5477)
!5483 = !DILocation(line: 221, column: 64, scope: !5476)
!5484 = !DILocation(line: 221, column: 4, scope: !5476)
!5485 = distinct !{!5485, !5482, !5486}
!5486 = !DILocation(line: 221, column: 68, scope: !5477)
!5487 = !DILocation(line: 222, column: 4, scope: !5474)
!5488 = !DILocation(line: 222, column: 33, scope: !5489)
!5489 = distinct !DILexicalBlock(scope: !5490, file: !1, line: 222, column: 4)
!5490 = distinct !DILexicalBlock(scope: !5474, file: !1, line: 222, column: 4)
!5491 = !DILocation(line: 222, column: 41, scope: !5489)
!5492 = !DILocation(line: 222, column: 50, scope: !5489)
!5493 = !DILocation(line: 222, column: 58, scope: !5489)
!5494 = !DILocation(line: 222, column: 12, scope: !5489)
!5495 = !DILocation(line: 222, column: 11, scope: !5489)
!5496 = !DILocation(line: 222, column: 4, scope: !5490)
!5497 = !DILocation(line: 222, column: 65, scope: !5489)
!5498 = !DILocation(line: 222, column: 4, scope: !5489)
!5499 = distinct !{!5499, !5496, !5500}
!5500 = !DILocation(line: 222, column: 69, scope: !5490)
!5501 = !DILocation(line: 225, column: 9, scope: !5502)
!5502 = distinct !DILexicalBlock(scope: !5439, file: !1, line: 225, column: 7)
!5503 = !DILocation(line: 225, column: 13, scope: !5502)
!5504 = !DILocation(line: 225, column: 11, scope: !5502)
!5505 = !DILocation(line: 225, column: 7, scope: !5439)
!5506 = !DILocation(line: 226, column: 11, scope: !5502)
!5507 = !DILocation(line: 226, column: 4, scope: !5502)
!5508 = !DILocalVariable(name: "sw_ap", scope: !5509, file: !1, line: 228, type: !142)
!5509 = distinct !DILexicalBlock(scope: !5439, file: !1, line: 228, column: 3)
!5510 = !DILocation(line: 228, column: 3, scope: !5509)
!5511 = !DILocation(line: 229, column: 4, scope: !5439)
!5512 = !DILocation(line: 215, column: 2, scope: !5440)
!5513 = distinct !{!5513, !5514, !5515}
!5514 = !DILocation(line: 215, column: 2, scope: !5441)
!5515 = !DILocation(line: 230, column: 2, scope: !5441)
!5516 = distinct !DISubprogram(name: "face_materials_match", scope: !1, file: !1, line: 171, type: !5517, scopeLine: 172, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5517 = !DISubroutineType(types: !5518)
!5518 = !{!142, !3385, !3385}
!5519 = !DILocalVariable(name: "f1", arg: 1, scope: !5516, file: !1, line: 171, type: !3385)
!5520 = !DILocation(line: 171, column: 46, scope: !5516)
!5521 = !DILocalVariable(name: "f2", arg: 2, scope: !5516, file: !1, line: 171, type: !3385)
!5522 = !DILocation(line: 171, column: 63, scope: !5516)
!5523 = !DILocation(line: 173, column: 11, scope: !5516)
!5524 = !DILocation(line: 173, column: 15, scope: !5516)
!5525 = !DILocation(line: 173, column: 20, scope: !5516)
!5526 = !DILocation(line: 173, column: 37, scope: !5516)
!5527 = !DILocation(line: 173, column: 41, scope: !5516)
!5528 = !DILocation(line: 173, column: 46, scope: !5516)
!5529 = !DILocation(line: 173, column: 33, scope: !5516)
!5530 = !DILocation(line: 173, column: 59, scope: !5516)
!5531 = !DILocation(line: 174, column: 11, scope: !5516)
!5532 = !DILocation(line: 174, column: 15, scope: !5516)
!5533 = !DILocation(line: 174, column: 25, scope: !5516)
!5534 = !DILocation(line: 174, column: 29, scope: !5516)
!5535 = !DILocation(line: 174, column: 22, scope: !5516)
!5536 = !DILocation(line: 0, scope: !5516)
!5537 = !DILocation(line: 173, column: 2, scope: !5516)
!5538 = distinct !DISubprogram(name: "grid_materials_match", scope: !1, file: !1, line: 177, type: !5539, scopeLine: 178, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5539 = !DISubroutineType(types: !5540)
!5540 = !{!142, !561, !561}
!5541 = !DILocalVariable(name: "f1", arg: 1, scope: !5538, file: !1, line: 177, type: !561)
!5542 = !DILocation(line: 177, column: 50, scope: !5538)
!5543 = !DILocalVariable(name: "f2", arg: 2, scope: !5538, file: !1, line: 177, type: !561)
!5544 = !DILocation(line: 177, column: 71, scope: !5538)
!5545 = !DILocation(line: 179, column: 11, scope: !5538)
!5546 = !DILocation(line: 179, column: 15, scope: !5538)
!5547 = !DILocation(line: 179, column: 20, scope: !5538)
!5548 = !DILocation(line: 179, column: 37, scope: !5538)
!5549 = !DILocation(line: 179, column: 41, scope: !5538)
!5550 = !DILocation(line: 179, column: 46, scope: !5538)
!5551 = !DILocation(line: 179, column: 33, scope: !5538)
!5552 = !DILocation(line: 179, column: 59, scope: !5538)
!5553 = !DILocation(line: 180, column: 11, scope: !5538)
!5554 = !DILocation(line: 180, column: 15, scope: !5538)
!5555 = !DILocation(line: 180, column: 25, scope: !5538)
!5556 = !DILocation(line: 180, column: 29, scope: !5538)
!5557 = !DILocation(line: 180, column: 22, scope: !5538)
!5558 = !DILocation(line: 0, scope: !5538)
!5559 = !DILocation(line: 179, column: 2, scope: !5538)
!5560 = distinct !DISubprogram(name: "build_mesh_leaf_node", scope: !1, file: !1, line: 282, type: !1822, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5561 = !DILocalVariable(name: "bvh", arg: 1, scope: !5560, file: !1, line: 282, type: !410)
!5562 = !DILocation(line: 282, column: 40, scope: !5560)
!5563 = !DILocalVariable(name: "node", arg: 2, scope: !5560, file: !1, line: 282, type: !419)
!5564 = !DILocation(line: 282, column: 55, scope: !5560)
!5565 = !DILocalVariable(name: "iter", scope: !5560, file: !1, line: 284, type: !157)
!5566 = !DILocation(line: 284, column: 17, scope: !5560)
!5567 = !DILocalVariable(name: "map", scope: !5560, file: !1, line: 285, type: !162)
!5568 = !DILocation(line: 285, column: 9, scope: !5560)
!5569 = !DILocalVariable(name: "i", scope: !5560, file: !1, line: 286, type: !142)
!5570 = !DILocation(line: 286, column: 6, scope: !5560)
!5571 = !DILocalVariable(name: "j", scope: !5560, file: !1, line: 286, type: !142)
!5572 = !DILocation(line: 286, column: 9, scope: !5560)
!5573 = !DILocalVariable(name: "totface", scope: !5560, file: !1, line: 286, type: !142)
!5574 = !DILocation(line: 286, column: 12, scope: !5560)
!5575 = !DILocalVariable(name: "has_visible", scope: !5560, file: !1, line: 287, type: !573)
!5576 = !DILocation(line: 287, column: 7, scope: !5560)
!5577 = !DILocation(line: 289, column: 21, scope: !5560)
!5578 = !DILocation(line: 289, column: 27, scope: !5560)
!5579 = !DILocation(line: 289, column: 38, scope: !5560)
!5580 = !DILocation(line: 289, column: 2, scope: !5560)
!5581 = !DILocation(line: 289, column: 8, scope: !5560)
!5582 = !DILocation(line: 289, column: 19, scope: !5560)
!5583 = !DILocation(line: 290, column: 12, scope: !5560)
!5584 = !DILocation(line: 290, column: 18, scope: !5560)
!5585 = !DILocation(line: 290, column: 10, scope: !5560)
!5586 = !DILocation(line: 293, column: 60, scope: !5560)
!5587 = !DILocation(line: 293, column: 58, scope: !5560)
!5588 = !DILocation(line: 293, column: 8, scope: !5560)
!5589 = !DILocation(line: 293, column: 6, scope: !5560)
!5590 = !DILocation(line: 295, column: 28, scope: !5560)
!5591 = !DILocation(line: 295, column: 58, scope: !5560)
!5592 = !DILocation(line: 295, column: 56, scope: !5560)
!5593 = !DILocation(line: 295, column: 2, scope: !5560)
!5594 = !DILocation(line: 295, column: 8, scope: !5560)
!5595 = !DILocation(line: 295, column: 26, scope: !5560)
!5596 = !DILocation(line: 298, column: 9, scope: !5597)
!5597 = distinct !DILexicalBlock(scope: !5560, file: !1, line: 298, column: 2)
!5598 = !DILocation(line: 298, column: 7, scope: !5597)
!5599 = !DILocation(line: 298, column: 14, scope: !5600)
!5600 = distinct !DILexicalBlock(scope: !5597, file: !1, line: 298, column: 2)
!5601 = !DILocation(line: 298, column: 18, scope: !5600)
!5602 = !DILocation(line: 298, column: 16, scope: !5600)
!5603 = !DILocation(line: 298, column: 2, scope: !5597)
!5604 = !DILocalVariable(name: "f", scope: !5605, file: !1, line: 299, type: !481)
!5605 = distinct !DILexicalBlock(scope: !5600, file: !1, line: 298, column: 32)
!5606 = !DILocation(line: 299, column: 10, scope: !5605)
!5607 = !DILocation(line: 299, column: 14, scope: !5605)
!5608 = !DILocation(line: 299, column: 19, scope: !5605)
!5609 = !DILocation(line: 299, column: 27, scope: !5605)
!5610 = !DILocation(line: 299, column: 33, scope: !5605)
!5611 = !DILocation(line: 299, column: 46, scope: !5605)
!5612 = !DILocation(line: 299, column: 25, scope: !5605)
!5613 = !DILocalVariable(name: "sides", scope: !5605, file: !1, line: 300, type: !142)
!5614 = !DILocation(line: 300, column: 7, scope: !5605)
!5615 = !DILocation(line: 300, column: 15, scope: !5605)
!5616 = !DILocation(line: 300, column: 18, scope: !5605)
!5617 = !DILocation(line: 302, column: 10, scope: !5618)
!5618 = distinct !DILexicalBlock(scope: !5605, file: !1, line: 302, column: 3)
!5619 = !DILocation(line: 302, column: 8, scope: !5618)
!5620 = !DILocation(line: 302, column: 15, scope: !5621)
!5621 = distinct !DILexicalBlock(scope: !5618, file: !1, line: 302, column: 3)
!5622 = !DILocation(line: 302, column: 19, scope: !5621)
!5623 = !DILocation(line: 302, column: 17, scope: !5621)
!5624 = !DILocation(line: 302, column: 3, scope: !5618)
!5625 = !DILocation(line: 304, column: 28, scope: !5626)
!5626 = distinct !DILexicalBlock(scope: !5621, file: !1, line: 302, column: 31)
!5627 = !DILocation(line: 304, column: 33, scope: !5626)
!5628 = !DILocation(line: 304, column: 39, scope: !5626)
!5629 = !DILocation(line: 304, column: 45, scope: !5626)
!5630 = !DILocation(line: 305, column: 29, scope: !5626)
!5631 = !DILocation(line: 305, column: 35, scope: !5626)
!5632 = !DILocation(line: 305, column: 49, scope: !5626)
!5633 = !DILocation(line: 305, column: 52, scope: !5626)
!5634 = !DILocation(line: 305, column: 56, scope: !5626)
!5635 = !DILocation(line: 305, column: 47, scope: !5626)
!5636 = !DILocation(line: 304, column: 12, scope: !5626)
!5637 = !DILocation(line: 303, column: 4, scope: !5626)
!5638 = !DILocation(line: 303, column: 10, scope: !5626)
!5639 = !DILocation(line: 303, column: 28, scope: !5626)
!5640 = !DILocation(line: 303, column: 31, scope: !5626)
!5641 = !DILocation(line: 303, column: 34, scope: !5626)
!5642 = !DILocation(line: 306, column: 3, scope: !5626)
!5643 = !DILocation(line: 302, column: 26, scope: !5621)
!5644 = !DILocation(line: 302, column: 3, scope: !5621)
!5645 = distinct !{!5645, !5624, !5646}
!5646 = !DILocation(line: 306, column: 3, scope: !5618)
!5647 = !DILocation(line: 308, column: 29, scope: !5648)
!5648 = distinct !DILexicalBlock(scope: !5605, file: !1, line: 308, column: 7)
!5649 = !DILocation(line: 308, column: 32, scope: !5648)
!5650 = !DILocation(line: 308, column: 37, scope: !5648)
!5651 = !DILocation(line: 308, column: 8, scope: !5648)
!5652 = !DILocation(line: 308, column: 7, scope: !5605)
!5653 = !DILocation(line: 309, column: 16, scope: !5648)
!5654 = !DILocation(line: 309, column: 4, scope: !5648)
!5655 = !DILocation(line: 310, column: 2, scope: !5605)
!5656 = !DILocation(line: 298, column: 27, scope: !5600)
!5657 = !DILocation(line: 298, column: 2, scope: !5600)
!5658 = distinct !{!5658, !5603, !5659}
!5659 = !DILocation(line: 310, column: 2, scope: !5597)
!5660 = !DILocation(line: 312, column: 23, scope: !5560)
!5661 = !DILocation(line: 313, column: 36, scope: !5560)
!5662 = !DILocation(line: 313, column: 42, scope: !5560)
!5663 = !DILocation(line: 313, column: 55, scope: !5560)
!5664 = !DILocation(line: 313, column: 61, scope: !5560)
!5665 = !DILocation(line: 313, column: 53, scope: !5560)
!5666 = !DILocation(line: 313, column: 35, scope: !5560)
!5667 = !DILocation(line: 312, column: 47, scope: !5560)
!5668 = !DILocation(line: 312, column: 2, scope: !5560)
!5669 = !DILocation(line: 312, column: 8, scope: !5560)
!5670 = !DILocation(line: 312, column: 21, scope: !5560)
!5671 = !DILocation(line: 317, column: 36, scope: !5672)
!5672 = distinct !DILexicalBlock(scope: !5560, file: !1, line: 317, column: 2)
!5673 = !DILocation(line: 317, column: 14, scope: !5672)
!5674 = !DILocation(line: 317, column: 12, scope: !5672)
!5675 = !DILocation(line: 317, column: 44, scope: !5672)
!5676 = !DILocation(line: 317, column: 7, scope: !5672)
!5677 = !DILocation(line: 318, column: 30, scope: !5678)
!5678 = distinct !DILexicalBlock(scope: !5672, file: !1, line: 317, column: 2)
!5679 = !DILocation(line: 318, column: 7, scope: !5678)
!5680 = !DILocation(line: 318, column: 36, scope: !5678)
!5681 = !DILocation(line: 317, column: 2, scope: !5672)
!5682 = !DILocalVariable(name: "value", scope: !5683, file: !1, line: 321, type: !137)
!5683 = distinct !DILexicalBlock(scope: !5678, file: !1, line: 320, column: 2)
!5684 = !DILocation(line: 321, column: 9, scope: !5683)
!5685 = !DILocation(line: 321, column: 44, scope: !5683)
!5686 = !DILocation(line: 321, column: 17, scope: !5683)
!5687 = !DILocalVariable(name: "ndx", scope: !5683, file: !1, line: 322, type: !142)
!5688 = !DILocation(line: 322, column: 7, scope: !5683)
!5689 = !DILocation(line: 322, column: 13, scope: !5683)
!5690 = !DILocation(line: 324, column: 7, scope: !5691)
!5691 = distinct !DILexicalBlock(scope: !5683, file: !1, line: 324, column: 7)
!5692 = !DILocation(line: 324, column: 11, scope: !5691)
!5693 = !DILocation(line: 324, column: 7, scope: !5683)
!5694 = !DILocation(line: 325, column: 11, scope: !5691)
!5695 = !DILocation(line: 325, column: 10, scope: !5691)
!5696 = !DILocation(line: 325, column: 17, scope: !5691)
!5697 = !DILocation(line: 325, column: 23, scope: !5691)
!5698 = !DILocation(line: 325, column: 15, scope: !5691)
!5699 = !DILocation(line: 325, column: 34, scope: !5691)
!5700 = !DILocation(line: 325, column: 8, scope: !5691)
!5701 = !DILocation(line: 325, column: 4, scope: !5691)
!5702 = !DILocation(line: 328, column: 7, scope: !5683)
!5703 = !DILocation(line: 327, column: 3, scope: !5683)
!5704 = !DILocation(line: 327, column: 9, scope: !5683)
!5705 = !DILocation(line: 327, column: 22, scope: !5683)
!5706 = !DILocation(line: 327, column: 27, scope: !5683)
!5707 = !DILocation(line: 329, column: 2, scope: !5683)
!5708 = !DILocation(line: 319, column: 30, scope: !5678)
!5709 = !DILocation(line: 319, column: 7, scope: !5678)
!5710 = !DILocation(line: 319, column: 37, scope: !5678)
!5711 = !DILocation(line: 317, column: 2, scope: !5678)
!5712 = distinct !{!5712, !5681, !5713}
!5713 = !DILocation(line: 329, column: 2, scope: !5672)
!5714 = !DILocation(line: 331, column: 25, scope: !5560)
!5715 = !DILocation(line: 331, column: 2, scope: !5560)
!5716 = !DILocation(line: 333, column: 9, scope: !5717)
!5717 = distinct !DILexicalBlock(scope: !5560, file: !1, line: 333, column: 2)
!5718 = !DILocation(line: 333, column: 7, scope: !5717)
!5719 = !DILocation(line: 333, column: 14, scope: !5720)
!5720 = distinct !DILexicalBlock(scope: !5717, file: !1, line: 333, column: 2)
!5721 = !DILocation(line: 333, column: 18, scope: !5720)
!5722 = !DILocation(line: 333, column: 16, scope: !5720)
!5723 = !DILocation(line: 333, column: 2, scope: !5717)
!5724 = !DILocalVariable(name: "f", scope: !5725, file: !1, line: 334, type: !481)
!5725 = distinct !DILexicalBlock(scope: !5720, file: !1, line: 333, column: 32)
!5726 = !DILocation(line: 334, column: 10, scope: !5725)
!5727 = !DILocation(line: 334, column: 14, scope: !5725)
!5728 = !DILocation(line: 334, column: 19, scope: !5725)
!5729 = !DILocation(line: 334, column: 27, scope: !5725)
!5730 = !DILocation(line: 334, column: 33, scope: !5725)
!5731 = !DILocation(line: 334, column: 46, scope: !5725)
!5732 = !DILocation(line: 334, column: 25, scope: !5725)
!5733 = !DILocalVariable(name: "sides", scope: !5725, file: !1, line: 335, type: !142)
!5734 = !DILocation(line: 335, column: 7, scope: !5725)
!5735 = !DILocation(line: 335, column: 15, scope: !5725)
!5736 = !DILocation(line: 335, column: 18, scope: !5725)
!5737 = !DILocation(line: 337, column: 10, scope: !5738)
!5738 = distinct !DILexicalBlock(scope: !5725, file: !1, line: 337, column: 3)
!5739 = !DILocation(line: 337, column: 8, scope: !5738)
!5740 = !DILocation(line: 337, column: 15, scope: !5741)
!5741 = distinct !DILexicalBlock(scope: !5738, file: !1, line: 337, column: 3)
!5742 = !DILocation(line: 337, column: 19, scope: !5741)
!5743 = !DILocation(line: 337, column: 17, scope: !5741)
!5744 = !DILocation(line: 337, column: 3, scope: !5738)
!5745 = !DILocation(line: 338, column: 8, scope: !5746)
!5746 = distinct !DILexicalBlock(scope: !5747, file: !1, line: 338, column: 8)
!5747 = distinct !DILexicalBlock(scope: !5741, file: !1, line: 337, column: 31)
!5748 = !DILocation(line: 338, column: 14, scope: !5746)
!5749 = !DILocation(line: 338, column: 32, scope: !5746)
!5750 = !DILocation(line: 338, column: 35, scope: !5746)
!5751 = !DILocation(line: 338, column: 38, scope: !5746)
!5752 = !DILocation(line: 338, column: 8, scope: !5747)
!5753 = !DILocation(line: 340, column: 14, scope: !5746)
!5754 = !DILocation(line: 340, column: 20, scope: !5746)
!5755 = !DILocation(line: 340, column: 38, scope: !5746)
!5756 = !DILocation(line: 340, column: 41, scope: !5746)
!5757 = !DILocation(line: 340, column: 13, scope: !5746)
!5758 = !DILocation(line: 341, column: 13, scope: !5746)
!5759 = !DILocation(line: 341, column: 19, scope: !5746)
!5760 = !DILocation(line: 340, column: 44, scope: !5746)
!5761 = !DILocation(line: 341, column: 30, scope: !5746)
!5762 = !DILocation(line: 339, column: 5, scope: !5746)
!5763 = !DILocation(line: 339, column: 11, scope: !5746)
!5764 = !DILocation(line: 339, column: 29, scope: !5746)
!5765 = !DILocation(line: 339, column: 32, scope: !5746)
!5766 = !DILocation(line: 339, column: 35, scope: !5746)
!5767 = !DILocation(line: 342, column: 3, scope: !5747)
!5768 = !DILocation(line: 337, column: 26, scope: !5741)
!5769 = !DILocation(line: 337, column: 3, scope: !5741)
!5770 = distinct !{!5770, !5744, !5771}
!5771 = !DILocation(line: 342, column: 3, scope: !5738)
!5772 = !DILocation(line: 343, column: 2, scope: !5725)
!5773 = !DILocation(line: 333, column: 27, scope: !5720)
!5774 = !DILocation(line: 333, column: 2, scope: !5720)
!5775 = distinct !{!5775, !5723, !5776}
!5776 = !DILocation(line: 343, column: 2, scope: !5717)
!5777 = !DILocation(line: 345, column: 34, scope: !5560)
!5778 = !DILocation(line: 345, column: 2, scope: !5560)
!5779 = !DILocation(line: 347, column: 33, scope: !5560)
!5780 = !DILocation(line: 347, column: 40, scope: !5560)
!5781 = !DILocation(line: 347, column: 39, scope: !5560)
!5782 = !DILocation(line: 347, column: 2, scope: !5560)
!5783 = !DILocation(line: 349, column: 17, scope: !5560)
!5784 = !DILocation(line: 349, column: 2, scope: !5560)
!5785 = !DILocation(line: 350, column: 1, scope: !5560)
!5786 = distinct !DISubprogram(name: "build_grid_leaf_node", scope: !1, file: !1, line: 394, type: !1822, scopeLine: 395, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5787 = !DILocalVariable(name: "bvh", arg: 1, scope: !5786, file: !1, line: 394, type: !410)
!5788 = !DILocation(line: 394, column: 40, scope: !5786)
!5789 = !DILocalVariable(name: "node", arg: 2, scope: !5786, file: !1, line: 394, type: !419)
!5790 = !DILocation(line: 394, column: 55, scope: !5786)
!5791 = !DILocalVariable(name: "totquads", scope: !5786, file: !1, line: 396, type: !142)
!5792 = !DILocation(line: 396, column: 6, scope: !5786)
!5793 = !DILocation(line: 396, column: 43, scope: !5786)
!5794 = !DILocation(line: 396, column: 48, scope: !5786)
!5795 = !DILocation(line: 396, column: 61, scope: !5786)
!5796 = !DILocation(line: 396, column: 67, scope: !5786)
!5797 = !DILocation(line: 397, column: 43, scope: !5786)
!5798 = !DILocation(line: 397, column: 49, scope: !5786)
!5799 = !DILocation(line: 397, column: 58, scope: !5786)
!5800 = !DILocation(line: 397, column: 63, scope: !5786)
!5801 = !DILocation(line: 397, column: 71, scope: !5786)
!5802 = !DILocation(line: 396, column: 17, scope: !5786)
!5803 = !DILocation(line: 398, column: 33, scope: !5786)
!5804 = !DILocation(line: 398, column: 40, scope: !5786)
!5805 = !DILocation(line: 398, column: 49, scope: !5786)
!5806 = !DILocation(line: 398, column: 2, scope: !5786)
!5807 = !DILocation(line: 399, column: 34, scope: !5786)
!5808 = !DILocation(line: 399, column: 2, scope: !5786)
!5809 = !DILocation(line: 400, column: 1, scope: !5786)
!5810 = distinct !DISubprogram(name: "map_insert_vert", scope: !1, file: !1, line: 252, type: !5811, scopeLine: 255, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5811 = !DISubroutineType(types: !5812)
!5812 = !{!142, !410, !162, !2121, !2121, !142}
!5813 = !DILocalVariable(name: "bvh", arg: 1, scope: !5810, file: !1, line: 252, type: !410)
!5814 = !DILocation(line: 252, column: 34, scope: !5810)
!5815 = !DILocalVariable(name: "map", arg: 2, scope: !5810, file: !1, line: 252, type: !162)
!5816 = !DILocation(line: 252, column: 46, scope: !5810)
!5817 = !DILocalVariable(name: "face_verts", arg: 3, scope: !5810, file: !1, line: 253, type: !2121)
!5818 = !DILocation(line: 253, column: 42, scope: !5810)
!5819 = !DILocalVariable(name: "uniq_verts", arg: 4, scope: !5810, file: !1, line: 254, type: !2121)
!5820 = !DILocation(line: 254, column: 42, scope: !5810)
!5821 = !DILocalVariable(name: "vertex", arg: 5, scope: !5810, file: !1, line: 254, type: !142)
!5822 = !DILocation(line: 254, column: 58, scope: !5810)
!5823 = !DILocalVariable(name: "key", scope: !5810, file: !1, line: 256, type: !137)
!5824 = !DILocation(line: 256, column: 8, scope: !5810)
!5825 = !DILocalVariable(name: "value_p", scope: !5810, file: !1, line: 256, type: !559)
!5826 = !DILocation(line: 256, column: 15, scope: !5810)
!5827 = !DILocation(line: 258, column: 8, scope: !5810)
!5828 = !DILocation(line: 258, column: 6, scope: !5810)
!5829 = !DILocation(line: 259, column: 31, scope: !5810)
!5830 = !DILocation(line: 259, column: 36, scope: !5810)
!5831 = !DILocation(line: 259, column: 12, scope: !5810)
!5832 = !DILocation(line: 259, column: 10, scope: !5810)
!5833 = !DILocation(line: 261, column: 6, scope: !5834)
!5834 = distinct !DILexicalBlock(scope: !5810, file: !1, line: 261, column: 6)
!5835 = !DILocation(line: 261, column: 14, scope: !5834)
!5836 = !DILocation(line: 261, column: 6, scope: !5810)
!5837 = !DILocalVariable(name: "value", scope: !5838, file: !1, line: 262, type: !137)
!5838 = distinct !DILexicalBlock(scope: !5834, file: !1, line: 261, column: 23)
!5839 = !DILocation(line: 262, column: 9, scope: !5838)
!5840 = !DILocation(line: 263, column: 7, scope: !5841)
!5841 = distinct !DILexicalBlock(scope: !5838, file: !1, line: 263, column: 7)
!5842 = !DILocation(line: 263, column: 7, scope: !5838)
!5843 = !DILocation(line: 264, column: 12, scope: !5844)
!5844 = distinct !DILexicalBlock(scope: !5841, file: !1, line: 263, column: 50)
!5845 = !DILocation(line: 264, column: 10, scope: !5844)
!5846 = !DILocation(line: 265, column: 8, scope: !5844)
!5847 = !DILocation(line: 265, column: 4, scope: !5844)
!5848 = !DILocation(line: 266, column: 3, scope: !5844)
!5849 = !DILocation(line: 268, column: 4, scope: !5850)
!5850 = distinct !DILexicalBlock(scope: !5841, file: !1, line: 267, column: 8)
!5851 = !DILocation(line: 269, column: 12, scope: !5850)
!5852 = !DILocation(line: 269, column: 10, scope: !5850)
!5853 = !DILocation(line: 270, column: 8, scope: !5850)
!5854 = !DILocation(line: 270, column: 4, scope: !5850)
!5855 = !DILocation(line: 273, column: 20, scope: !5838)
!5856 = !DILocation(line: 273, column: 25, scope: !5838)
!5857 = !DILocation(line: 273, column: 30, scope: !5838)
!5858 = !DILocation(line: 273, column: 3, scope: !5838)
!5859 = !DILocation(line: 274, column: 10, scope: !5838)
!5860 = !DILocation(line: 274, column: 3, scope: !5838)
!5861 = !DILocation(line: 277, column: 10, scope: !5862)
!5862 = distinct !DILexicalBlock(scope: !5834, file: !1, line: 276, column: 7)
!5863 = !DILocation(line: 277, column: 3, scope: !5862)
!5864 = !DILocation(line: 279, column: 1, scope: !5810)
!5865 = distinct !DISubprogram(name: "BLI_ghashIterator_done", scope: !145, file: !145, line: 98, type: !5866, scopeLine: 98, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5866 = !DISubroutineType(types: !5867)
!5867 = !{!573, !157}
!5868 = !DILocalVariable(name: "ghi", arg: 1, scope: !5865, file: !145, line: 98, type: !157)
!5869 = !DILocation(line: 98, column: 57, scope: !5865)
!5870 = !DILocation(line: 98, column: 78, scope: !5865)
!5871 = !DILocation(line: 98, column: 83, scope: !5865)
!5872 = !DILocation(line: 98, column: 77, scope: !5865)
!5873 = !DILocation(line: 98, column: 70, scope: !5865)
!5874 = distinct !DISubprogram(name: "BLI_ghashIterator_getValue", scope: !145, file: !145, line: 96, type: !5875, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5875 = !DISubroutineType(types: !5876)
!5876 = !{!137, !157}
!5877 = !DILocalVariable(name: "ghi", arg: 1, scope: !5874, file: !145, line: 96, type: !157)
!5878 = !DILocation(line: 96, column: 61, scope: !5874)
!5879 = !DILocation(line: 96, column: 99, scope: !5874)
!5880 = !DILocation(line: 96, column: 104, scope: !5874)
!5881 = !DILocation(line: 96, column: 115, scope: !5874)
!5882 = !DILocation(line: 96, column: 70, scope: !5874)
!5883 = distinct !DISubprogram(name: "BLI_ghashIterator_getKey", scope: !145, file: !145, line: 95, type: !5875, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5884 = !DILocalVariable(name: "ghi", arg: 1, scope: !5883, file: !145, line: 95, type: !157)
!5885 = !DILocation(line: 95, column: 59, scope: !5883)
!5886 = !DILocation(line: 95, column: 99, scope: !5883)
!5887 = !DILocation(line: 95, column: 104, scope: !5883)
!5888 = !DILocation(line: 95, column: 115, scope: !5883)
!5889 = !DILocation(line: 95, column: 70, scope: !5883)
!5890 = distinct !DISubprogram(name: "CCG_elem_co", scope: !152, file: !152, line: 109, type: !5891, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5891 = !DISubroutineType(types: !5892)
!5892 = !{!141, !1276, !150}
!5893 = !DILocalVariable(name: "UNUSED_key", arg: 1, scope: !5890, file: !152, line: 109, type: !1276)
!5894 = !DILocation(line: 109, column: 45, scope: !5890)
!5895 = !DILocalVariable(name: "elem", arg: 2, scope: !5890, file: !152, line: 109, type: !150)
!5896 = !DILocation(line: 109, column: 67, scope: !5890)
!5897 = !DILocation(line: 111, column: 18, scope: !5890)
!5898 = !DILocation(line: 111, column: 9, scope: !5890)
!5899 = !DILocation(line: 111, column: 2, scope: !5890)
!5900 = distinct !DISubprogram(name: "CCG_elem_offset", scope: !152, file: !152, line: 126, type: !5901, scopeLine: 127, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5901 = !DISubroutineType(types: !5902)
!5902 = !{!150, !1276, !150, !142}
!5903 = !DILocalVariable(name: "key", arg: 1, scope: !5900, file: !152, line: 126, type: !1276)
!5904 = !DILocation(line: 126, column: 51, scope: !5900)
!5905 = !DILocalVariable(name: "elem", arg: 2, scope: !5900, file: !152, line: 126, type: !150)
!5906 = !DILocation(line: 126, column: 65, scope: !5900)
!5907 = !DILocalVariable(name: "offset", arg: 3, scope: !5900, file: !152, line: 126, type: !142)
!5908 = !DILocation(line: 126, column: 75, scope: !5900)
!5909 = !DILocation(line: 128, column: 30, scope: !5900)
!5910 = !DILocation(line: 128, column: 22, scope: !5900)
!5911 = !DILocation(line: 128, column: 38, scope: !5900)
!5912 = !DILocation(line: 128, column: 43, scope: !5900)
!5913 = !DILocation(line: 128, column: 55, scope: !5900)
!5914 = !DILocation(line: 128, column: 53, scope: !5900)
!5915 = !DILocation(line: 128, column: 36, scope: !5900)
!5916 = !DILocation(line: 128, column: 9, scope: !5900)
!5917 = !DILocation(line: 128, column: 2, scope: !5900)
!5918 = distinct !DISubprogram(name: "pbvh_stack_push", scope: !1, file: !1, line: 705, type: !5919, scopeLine: 706, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5919 = !DISubroutineType(types: !5920)
!5920 = !{null, !1568, !419, !142}
!5921 = !DILocalVariable(name: "iter", arg: 1, scope: !5918, file: !1, line: 705, type: !1568)
!5922 = !DILocation(line: 705, column: 39, scope: !5918)
!5923 = !DILocalVariable(name: "node", arg: 2, scope: !5918, file: !1, line: 705, type: !419)
!5924 = !DILocation(line: 705, column: 55, scope: !5918)
!5925 = !DILocalVariable(name: "revisiting", arg: 3, scope: !5918, file: !1, line: 705, type: !142)
!5926 = !DILocation(line: 705, column: 65, scope: !5918)
!5927 = !DILocation(line: 707, column: 6, scope: !5928)
!5928 = distinct !DILexicalBlock(scope: !5918, file: !1, line: 707, column: 6)
!5929 = !DILocation(line: 707, column: 12, scope: !5928)
!5930 = !DILocation(line: 707, column: 25, scope: !5928)
!5931 = !DILocation(line: 707, column: 31, scope: !5928)
!5932 = !DILocation(line: 707, column: 22, scope: !5928)
!5933 = !DILocation(line: 707, column: 6, scope: !5918)
!5934 = !DILocalVariable(name: "newstack", scope: !5935, file: !1, line: 708, type: !1485)
!5935 = distinct !DILexicalBlock(scope: !5928, file: !1, line: 707, column: 43)
!5936 = !DILocation(line: 708, column: 14, scope: !5935)
!5937 = !DILocation(line: 710, column: 3, scope: !5935)
!5938 = !DILocation(line: 710, column: 9, scope: !5935)
!5939 = !DILocation(line: 710, column: 20, scope: !5935)
!5940 = !DILocation(line: 711, column: 14, scope: !5935)
!5941 = !DILocation(line: 711, column: 46, scope: !5935)
!5942 = !DILocation(line: 711, column: 52, scope: !5935)
!5943 = !DILocation(line: 711, column: 44, scope: !5935)
!5944 = !DILocation(line: 711, column: 12, scope: !5935)
!5945 = !DILocation(line: 712, column: 10, scope: !5935)
!5946 = !DILocation(line: 712, column: 3, scope: !5935)
!5947 = !DILocation(line: 712, column: 20, scope: !5935)
!5948 = !DILocation(line: 712, column: 26, scope: !5935)
!5949 = !DILocation(line: 712, column: 53, scope: !5935)
!5950 = !DILocation(line: 712, column: 59, scope: !5935)
!5951 = !DILocation(line: 712, column: 51, scope: !5935)
!5952 = !DILocation(line: 714, column: 7, scope: !5953)
!5953 = distinct !DILexicalBlock(scope: !5935, file: !1, line: 714, column: 7)
!5954 = !DILocation(line: 714, column: 13, scope: !5953)
!5955 = !DILocation(line: 714, column: 24, scope: !5953)
!5956 = !DILocation(line: 714, column: 7, scope: !5935)
!5957 = !DILocation(line: 715, column: 4, scope: !5953)
!5958 = !DILocation(line: 715, column: 14, scope: !5953)
!5959 = !DILocation(line: 715, column: 20, scope: !5953)
!5960 = !DILocation(line: 716, column: 17, scope: !5935)
!5961 = !DILocation(line: 716, column: 3, scope: !5935)
!5962 = !DILocation(line: 716, column: 9, scope: !5935)
!5963 = !DILocation(line: 716, column: 15, scope: !5935)
!5964 = !DILocation(line: 717, column: 2, scope: !5935)
!5965 = !DILocation(line: 719, column: 38, scope: !5918)
!5966 = !DILocation(line: 719, column: 2, scope: !5918)
!5967 = !DILocation(line: 719, column: 8, scope: !5918)
!5968 = !DILocation(line: 719, column: 14, scope: !5918)
!5969 = !DILocation(line: 719, column: 20, scope: !5918)
!5970 = !DILocation(line: 719, column: 31, scope: !5918)
!5971 = !DILocation(line: 719, column: 36, scope: !5918)
!5972 = !DILocation(line: 720, column: 44, scope: !5918)
!5973 = !DILocation(line: 720, column: 2, scope: !5918)
!5974 = !DILocation(line: 720, column: 8, scope: !5918)
!5975 = !DILocation(line: 720, column: 14, scope: !5918)
!5976 = !DILocation(line: 720, column: 20, scope: !5918)
!5977 = !DILocation(line: 720, column: 31, scope: !5918)
!5978 = !DILocation(line: 720, column: 42, scope: !5918)
!5979 = !DILocation(line: 721, column: 2, scope: !5918)
!5980 = !DILocation(line: 721, column: 8, scope: !5918)
!5981 = !DILocation(line: 721, column: 17, scope: !5918)
!5982 = !DILocation(line: 722, column: 1, scope: !5918)
!5983 = distinct !DISubprogram(name: "CCG_elem_no", scope: !152, file: !152, line: 114, type: !5891, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5984 = !DILocalVariable(name: "key", arg: 1, scope: !5983, file: !152, line: 114, type: !1276)
!5985 = !DILocation(line: 114, column: 45, scope: !5983)
!5986 = !DILocalVariable(name: "elem", arg: 2, scope: !5983, file: !152, line: 114, type: !150)
!5987 = !DILocation(line: 114, column: 59, scope: !5983)
!5988 = !DILocation(line: 117, column: 27, scope: !5983)
!5989 = !DILocation(line: 117, column: 19, scope: !5983)
!5990 = !DILocation(line: 117, column: 34, scope: !5983)
!5991 = !DILocation(line: 117, column: 39, scope: !5983)
!5992 = !DILocation(line: 117, column: 32, scope: !5983)
!5993 = !DILocation(line: 117, column: 9, scope: !5983)
!5994 = !DILocation(line: 117, column: 2, scope: !5983)
!5995 = distinct !DISubprogram(name: "CCG_elem_mask", scope: !152, file: !152, line: 120, type: !5891, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!5996 = !DILocalVariable(name: "key", arg: 1, scope: !5995, file: !152, line: 120, type: !1276)
!5997 = !DILocation(line: 120, column: 47, scope: !5995)
!5998 = !DILocalVariable(name: "elem", arg: 2, scope: !5995, file: !152, line: 120, type: !150)
!5999 = !DILocation(line: 120, column: 61, scope: !5995)
!6000 = !DILocation(line: 123, column: 27, scope: !5995)
!6001 = !DILocation(line: 123, column: 19, scope: !5995)
!6002 = !DILocation(line: 123, column: 35, scope: !5995)
!6003 = !DILocation(line: 123, column: 40, scope: !5995)
!6004 = !DILocation(line: 123, column: 32, scope: !5995)
!6005 = !DILocation(line: 123, column: 9, scope: !5995)
!6006 = !DILocation(line: 123, column: 2, scope: !5995)
!6007 = distinct !DISubprogram(name: "CCG_elem_next", scope: !152, file: !152, line: 167, type: !6008, scopeLine: 168, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!6008 = !DISubroutineType(types: !6009)
!6009 = !{!150, !1276, !150}
!6010 = !DILocalVariable(name: "key", arg: 1, scope: !6007, file: !152, line: 167, type: !1276)
!6011 = !DILocation(line: 167, column: 49, scope: !6007)
!6012 = !DILocalVariable(name: "elem", arg: 2, scope: !6007, file: !152, line: 167, type: !150)
!6013 = !DILocation(line: 167, column: 63, scope: !6007)
!6014 = !DILocation(line: 169, column: 25, scope: !6007)
!6015 = !DILocation(line: 169, column: 30, scope: !6007)
!6016 = !DILocation(line: 169, column: 9, scope: !6007)
!6017 = !DILocation(line: 169, column: 2, scope: !6007)
!6018 = distinct !DISubprogram(name: "normalize_v3", scope: !2444, file: !2444, line: 830, type: !6019, scopeLine: 831, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!6019 = !DISubroutineType(types: !6020)
!6020 = !{!133, !141}
!6021 = !DILocalVariable(name: "n", arg: 1, scope: !6018, file: !2444, line: 830, type: !141)
!6022 = !DILocation(line: 830, column: 34, scope: !6018)
!6023 = !DILocation(line: 832, column: 25, scope: !6018)
!6024 = !DILocation(line: 832, column: 28, scope: !6018)
!6025 = !DILocation(line: 832, column: 9, scope: !6018)
!6026 = !DILocation(line: 832, column: 2, scope: !6018)
!6027 = distinct !DISubprogram(name: "normal_float_to_short_v3", scope: !2444, file: !2444, line: 842, type: !6028, scopeLine: 843, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!6028 = !DISubroutineType(types: !6029)
!6029 = !{null, !1874, !201}
!6030 = !DILocalVariable(name: "out", arg: 1, scope: !6027, file: !2444, line: 842, type: !1874)
!6031 = !DILocation(line: 842, column: 45, scope: !6027)
!6032 = !DILocalVariable(name: "in", arg: 2, scope: !6027, file: !2444, line: 842, type: !201)
!6033 = !DILocation(line: 842, column: 65, scope: !6027)
!6034 = !DILocation(line: 844, column: 20, scope: !6027)
!6035 = !DILocation(line: 844, column: 26, scope: !6027)
!6036 = !DILocation(line: 844, column: 11, scope: !6027)
!6037 = !DILocation(line: 844, column: 2, scope: !6027)
!6038 = !DILocation(line: 844, column: 9, scope: !6027)
!6039 = !DILocation(line: 845, column: 20, scope: !6027)
!6040 = !DILocation(line: 845, column: 26, scope: !6027)
!6041 = !DILocation(line: 845, column: 11, scope: !6027)
!6042 = !DILocation(line: 845, column: 2, scope: !6027)
!6043 = !DILocation(line: 845, column: 9, scope: !6027)
!6044 = !DILocation(line: 846, column: 20, scope: !6027)
!6045 = !DILocation(line: 846, column: 26, scope: !6027)
!6046 = !DILocation(line: 846, column: 11, scope: !6027)
!6047 = !DILocation(line: 846, column: 2, scope: !6027)
!6048 = !DILocation(line: 846, column: 9, scope: !6027)
!6049 = !DILocation(line: 847, column: 1, scope: !6027)
!6050 = distinct !DISubprogram(name: "normalize_v3_v3", scope: !2444, file: !2444, line: 788, type: !6051, scopeLine: 789, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!6051 = !DISubroutineType(types: !6052)
!6052 = !{!133, !141, !201}
!6053 = !DILocalVariable(name: "r", arg: 1, scope: !6050, file: !2444, line: 788, type: !141)
!6054 = !DILocation(line: 788, column: 37, scope: !6050)
!6055 = !DILocalVariable(name: "a", arg: 2, scope: !6050, file: !2444, line: 788, type: !201)
!6056 = !DILocation(line: 788, column: 55, scope: !6050)
!6057 = !DILocalVariable(name: "d", scope: !6050, file: !2444, line: 790, type: !133)
!6058 = !DILocation(line: 790, column: 8, scope: !6050)
!6059 = !DILocation(line: 790, column: 21, scope: !6050)
!6060 = !DILocation(line: 790, column: 24, scope: !6050)
!6061 = !DILocation(line: 790, column: 12, scope: !6050)
!6062 = !DILocation(line: 794, column: 6, scope: !6063)
!6063 = distinct !DILexicalBlock(scope: !6050, file: !2444, line: 794, column: 6)
!6064 = !DILocation(line: 794, column: 8, scope: !6063)
!6065 = !DILocation(line: 794, column: 6, scope: !6050)
!6066 = !DILocation(line: 795, column: 13, scope: !6067)
!6067 = distinct !DILexicalBlock(scope: !6063, file: !2444, line: 794, column: 20)
!6068 = !DILocation(line: 795, column: 7, scope: !6067)
!6069 = !DILocation(line: 795, column: 5, scope: !6067)
!6070 = !DILocation(line: 796, column: 15, scope: !6067)
!6071 = !DILocation(line: 796, column: 18, scope: !6067)
!6072 = !DILocation(line: 796, column: 28, scope: !6067)
!6073 = !DILocation(line: 796, column: 26, scope: !6067)
!6074 = !DILocation(line: 796, column: 3, scope: !6067)
!6075 = !DILocation(line: 797, column: 2, scope: !6067)
!6076 = !DILocation(line: 799, column: 11, scope: !6077)
!6077 = distinct !DILexicalBlock(scope: !6063, file: !2444, line: 798, column: 7)
!6078 = !DILocation(line: 799, column: 3, scope: !6077)
!6079 = !DILocation(line: 800, column: 5, scope: !6077)
!6080 = !DILocation(line: 803, column: 9, scope: !6050)
!6081 = !DILocation(line: 803, column: 2, scope: !6050)
!6082 = distinct !DISubprogram(name: "dot_v3v3", scope: !2444, file: !2444, line: 619, type: !6083, scopeLine: 620, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!6083 = !DISubroutineType(types: !6084)
!6084 = !{!133, !201, !201}
!6085 = !DILocalVariable(name: "a", arg: 1, scope: !6082, file: !2444, line: 619, type: !201)
!6086 = !DILocation(line: 619, column: 36, scope: !6082)
!6087 = !DILocalVariable(name: "b", arg: 2, scope: !6082, file: !2444, line: 619, type: !201)
!6088 = !DILocation(line: 619, column: 54, scope: !6082)
!6089 = !DILocation(line: 621, column: 9, scope: !6082)
!6090 = !DILocation(line: 621, column: 16, scope: !6082)
!6091 = !DILocation(line: 621, column: 14, scope: !6082)
!6092 = !DILocation(line: 621, column: 23, scope: !6082)
!6093 = !DILocation(line: 621, column: 30, scope: !6082)
!6094 = !DILocation(line: 621, column: 28, scope: !6082)
!6095 = !DILocation(line: 621, column: 21, scope: !6082)
!6096 = !DILocation(line: 621, column: 37, scope: !6082)
!6097 = !DILocation(line: 621, column: 44, scope: !6082)
!6098 = !DILocation(line: 621, column: 42, scope: !6082)
!6099 = !DILocation(line: 621, column: 35, scope: !6082)
!6100 = !DILocation(line: 621, column: 2, scope: !6082)
!6101 = distinct !DISubprogram(name: "pbvh_iter_next_occluded", scope: !1, file: !1, line: 768, type: !1612, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!6102 = !DILocalVariable(name: "iter", arg: 1, scope: !6101, file: !1, line: 768, type: !1568)
!6103 = !DILocation(line: 768, column: 52, scope: !6101)
!6104 = !DILocalVariable(name: "node", scope: !6101, file: !1, line: 770, type: !419)
!6105 = !DILocation(line: 770, column: 12, scope: !6101)
!6106 = !DILocation(line: 772, column: 2, scope: !6101)
!6107 = !DILocation(line: 772, column: 9, scope: !6101)
!6108 = !DILocation(line: 772, column: 15, scope: !6101)
!6109 = !DILocation(line: 774, column: 3, scope: !6110)
!6110 = distinct !DILexicalBlock(scope: !6101, file: !1, line: 772, column: 26)
!6111 = !DILocation(line: 774, column: 9, scope: !6110)
!6112 = !DILocation(line: 774, column: 18, scope: !6110)
!6113 = !DILocation(line: 775, column: 10, scope: !6110)
!6114 = !DILocation(line: 775, column: 16, scope: !6110)
!6115 = !DILocation(line: 775, column: 22, scope: !6110)
!6116 = !DILocation(line: 775, column: 28, scope: !6110)
!6117 = !DILocation(line: 775, column: 39, scope: !6110)
!6118 = !DILocation(line: 775, column: 8, scope: !6110)
!6119 = !DILocation(line: 779, column: 7, scope: !6120)
!6120 = distinct !DILexicalBlock(scope: !6110, file: !1, line: 779, column: 7)
!6121 = !DILocation(line: 779, column: 12, scope: !6120)
!6122 = !DILocation(line: 779, column: 7, scope: !6110)
!6123 = !DILocation(line: 779, column: 21, scope: !6120)
!6124 = !DILocation(line: 781, column: 7, scope: !6125)
!6125 = distinct !DILexicalBlock(scope: !6110, file: !1, line: 781, column: 7)
!6126 = !DILocation(line: 781, column: 13, scope: !6125)
!6127 = !DILocation(line: 781, column: 17, scope: !6125)
!6128 = !DILocation(line: 781, column: 21, scope: !6125)
!6129 = !DILocation(line: 781, column: 27, scope: !6125)
!6130 = !DILocation(line: 781, column: 31, scope: !6125)
!6131 = !DILocation(line: 781, column: 37, scope: !6125)
!6132 = !DILocation(line: 781, column: 43, scope: !6125)
!6133 = !DILocation(line: 781, column: 7, scope: !6110)
!6134 = !DILocation(line: 781, column: 57, scope: !6125)
!6135 = distinct !{!6135, !6106, !6136}
!6136 = !DILocation(line: 791, column: 2, scope: !6101)
!6137 = !DILocation(line: 783, column: 7, scope: !6138)
!6138 = distinct !DILexicalBlock(scope: !6110, file: !1, line: 783, column: 7)
!6139 = !DILocation(line: 783, column: 13, scope: !6138)
!6140 = !DILocation(line: 783, column: 18, scope: !6138)
!6141 = !DILocation(line: 783, column: 7, scope: !6110)
!6142 = !DILocation(line: 785, column: 11, scope: !6143)
!6143 = distinct !DILexicalBlock(scope: !6138, file: !1, line: 783, column: 31)
!6144 = !DILocation(line: 785, column: 4, scope: !6143)
!6145 = !DILocation(line: 788, column: 20, scope: !6146)
!6146 = distinct !DILexicalBlock(scope: !6138, file: !1, line: 787, column: 8)
!6147 = !DILocation(line: 788, column: 26, scope: !6146)
!6148 = !DILocation(line: 788, column: 32, scope: !6146)
!6149 = !DILocation(line: 788, column: 37, scope: !6146)
!6150 = !DILocation(line: 788, column: 45, scope: !6146)
!6151 = !DILocation(line: 788, column: 51, scope: !6146)
!6152 = !DILocation(line: 788, column: 43, scope: !6146)
!6153 = !DILocation(line: 788, column: 67, scope: !6146)
!6154 = !DILocation(line: 788, column: 4, scope: !6146)
!6155 = !DILocation(line: 789, column: 20, scope: !6146)
!6156 = !DILocation(line: 789, column: 26, scope: !6146)
!6157 = !DILocation(line: 789, column: 32, scope: !6146)
!6158 = !DILocation(line: 789, column: 37, scope: !6146)
!6159 = !DILocation(line: 789, column: 45, scope: !6146)
!6160 = !DILocation(line: 789, column: 51, scope: !6146)
!6161 = !DILocation(line: 789, column: 43, scope: !6146)
!6162 = !DILocation(line: 789, column: 4, scope: !6146)
!6163 = !DILocation(line: 793, column: 2, scope: !6101)
!6164 = !DILocation(line: 794, column: 1, scope: !6101)
!6165 = distinct !DISubprogram(name: "node_tree_insert", scope: !1, file: !1, line: 853, type: !6166, scopeLine: 854, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!6166 = !DISubroutineType(types: !6167)
!6167 = !{null, !3129, !3129}
!6168 = !DILocalVariable(name: "tree", arg: 1, scope: !6165, file: !1, line: 853, type: !3129)
!6169 = !DILocation(line: 853, column: 41, scope: !6165)
!6170 = !DILocalVariable(name: "new_node", arg: 2, scope: !6165, file: !1, line: 853, type: !3129)
!6171 = !DILocation(line: 853, column: 58, scope: !6165)
!6172 = !DILocation(line: 855, column: 6, scope: !6173)
!6173 = distinct !DILexicalBlock(scope: !6165, file: !1, line: 855, column: 6)
!6174 = !DILocation(line: 855, column: 16, scope: !6173)
!6175 = !DILocation(line: 855, column: 22, scope: !6173)
!6176 = !DILocation(line: 855, column: 29, scope: !6173)
!6177 = !DILocation(line: 855, column: 35, scope: !6173)
!6178 = !DILocation(line: 855, column: 41, scope: !6173)
!6179 = !DILocation(line: 855, column: 27, scope: !6173)
!6180 = !DILocation(line: 855, column: 6, scope: !6165)
!6181 = !DILocation(line: 856, column: 7, scope: !6182)
!6182 = distinct !DILexicalBlock(scope: !6183, file: !1, line: 856, column: 7)
!6183 = distinct !DILexicalBlock(scope: !6173, file: !1, line: 855, column: 47)
!6184 = !DILocation(line: 856, column: 13, scope: !6182)
!6185 = !DILocation(line: 856, column: 7, scope: !6183)
!6186 = !DILocation(line: 857, column: 21, scope: !6187)
!6187 = distinct !DILexicalBlock(scope: !6182, file: !1, line: 856, column: 19)
!6188 = !DILocation(line: 857, column: 27, scope: !6187)
!6189 = !DILocation(line: 857, column: 33, scope: !6187)
!6190 = !DILocation(line: 857, column: 4, scope: !6187)
!6191 = !DILocation(line: 858, column: 3, scope: !6187)
!6192 = !DILocation(line: 860, column: 17, scope: !6193)
!6193 = distinct !DILexicalBlock(scope: !6182, file: !1, line: 859, column: 8)
!6194 = !DILocation(line: 860, column: 4, scope: !6193)
!6195 = !DILocation(line: 860, column: 10, scope: !6193)
!6196 = !DILocation(line: 860, column: 15, scope: !6193)
!6197 = !DILocation(line: 862, column: 2, scope: !6183)
!6198 = !DILocation(line: 864, column: 7, scope: !6199)
!6199 = distinct !DILexicalBlock(scope: !6200, file: !1, line: 864, column: 7)
!6200 = distinct !DILexicalBlock(scope: !6173, file: !1, line: 863, column: 7)
!6201 = !DILocation(line: 864, column: 13, scope: !6199)
!6202 = !DILocation(line: 864, column: 7, scope: !6200)
!6203 = !DILocation(line: 865, column: 21, scope: !6204)
!6204 = distinct !DILexicalBlock(scope: !6199, file: !1, line: 864, column: 20)
!6205 = !DILocation(line: 865, column: 27, scope: !6204)
!6206 = !DILocation(line: 865, column: 34, scope: !6204)
!6207 = !DILocation(line: 865, column: 4, scope: !6204)
!6208 = !DILocation(line: 866, column: 3, scope: !6204)
!6209 = !DILocation(line: 868, column: 18, scope: !6210)
!6210 = distinct !DILexicalBlock(scope: !6199, file: !1, line: 867, column: 8)
!6211 = !DILocation(line: 868, column: 4, scope: !6210)
!6212 = !DILocation(line: 868, column: 10, scope: !6210)
!6213 = !DILocation(line: 868, column: 16, scope: !6210)
!6214 = !DILocation(line: 871, column: 1, scope: !6165)
!6215 = distinct !DISubprogram(name: "traverse_tree", scope: !1, file: !1, line: 873, type: !6216, scopeLine: 874, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!6216 = !DISubroutineType(types: !6217)
!6217 = !{null, !3129, !3068, !137, !141}
!6218 = !DILocalVariable(name: "tree", arg: 1, scope: !6215, file: !1, line: 873, type: !3129)
!6219 = !DILocation(line: 873, column: 38, scope: !6215)
!6220 = !DILocalVariable(name: "hcb", arg: 2, scope: !6215, file: !1, line: 873, type: !3068)
!6221 = !DILocation(line: 873, column: 73, scope: !6215)
!6222 = !DILocalVariable(name: "hit_data", arg: 3, scope: !6215, file: !1, line: 873, type: !137)
!6223 = !DILocation(line: 873, column: 84, scope: !6215)
!6224 = !DILocalVariable(name: "tmin", arg: 4, scope: !6215, file: !1, line: 873, type: !141)
!6225 = !DILocation(line: 873, column: 101, scope: !6215)
!6226 = !DILocation(line: 875, column: 6, scope: !6227)
!6227 = distinct !DILexicalBlock(scope: !6215, file: !1, line: 875, column: 6)
!6228 = !DILocation(line: 875, column: 12, scope: !6227)
!6229 = !DILocation(line: 875, column: 6, scope: !6215)
!6230 = !DILocation(line: 875, column: 32, scope: !6227)
!6231 = !DILocation(line: 875, column: 38, scope: !6227)
!6232 = !DILocation(line: 875, column: 44, scope: !6227)
!6233 = !DILocation(line: 875, column: 49, scope: !6227)
!6234 = !DILocation(line: 875, column: 59, scope: !6227)
!6235 = !DILocation(line: 875, column: 18, scope: !6227)
!6236 = !DILocation(line: 877, column: 2, scope: !6215)
!6237 = !DILocation(line: 877, column: 6, scope: !6215)
!6238 = !DILocation(line: 877, column: 12, scope: !6215)
!6239 = !DILocation(line: 877, column: 18, scope: !6215)
!6240 = !DILocation(line: 877, column: 28, scope: !6215)
!6241 = !DILocation(line: 879, column: 6, scope: !6242)
!6242 = distinct !DILexicalBlock(scope: !6215, file: !1, line: 879, column: 6)
!6243 = !DILocation(line: 879, column: 12, scope: !6242)
!6244 = !DILocation(line: 879, column: 6, scope: !6215)
!6245 = !DILocation(line: 879, column: 33, scope: !6242)
!6246 = !DILocation(line: 879, column: 39, scope: !6242)
!6247 = !DILocation(line: 879, column: 46, scope: !6242)
!6248 = !DILocation(line: 879, column: 51, scope: !6242)
!6249 = !DILocation(line: 879, column: 61, scope: !6242)
!6250 = !DILocation(line: 879, column: 19, scope: !6242)
!6251 = !DILocation(line: 880, column: 1, scope: !6215)
!6252 = distinct !DISubprogram(name: "free_tree", scope: !1, file: !1, line: 882, type: !6253, scopeLine: 883, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!6253 = !DISubroutineType(types: !6254)
!6254 = !{null, !3129}
!6255 = !DILocalVariable(name: "tree", arg: 1, scope: !6252, file: !1, line: 882, type: !3129)
!6256 = !DILocation(line: 882, column: 34, scope: !6252)
!6257 = !DILocation(line: 884, column: 6, scope: !6258)
!6258 = distinct !DILexicalBlock(scope: !6252, file: !1, line: 884, column: 6)
!6259 = !DILocation(line: 884, column: 12, scope: !6258)
!6260 = !DILocation(line: 884, column: 6, scope: !6252)
!6261 = !DILocation(line: 885, column: 13, scope: !6262)
!6262 = distinct !DILexicalBlock(scope: !6258, file: !1, line: 884, column: 18)
!6263 = !DILocation(line: 885, column: 19, scope: !6262)
!6264 = !DILocation(line: 885, column: 3, scope: !6262)
!6265 = !DILocation(line: 886, column: 3, scope: !6262)
!6266 = !DILocation(line: 886, column: 9, scope: !6262)
!6267 = !DILocation(line: 886, column: 14, scope: !6262)
!6268 = !DILocation(line: 887, column: 2, scope: !6262)
!6269 = !DILocation(line: 889, column: 6, scope: !6270)
!6270 = distinct !DILexicalBlock(scope: !6252, file: !1, line: 889, column: 6)
!6271 = !DILocation(line: 889, column: 12, scope: !6270)
!6272 = !DILocation(line: 889, column: 6, scope: !6252)
!6273 = !DILocation(line: 890, column: 13, scope: !6274)
!6274 = distinct !DILexicalBlock(scope: !6270, file: !1, line: 889, column: 19)
!6275 = !DILocation(line: 890, column: 19, scope: !6274)
!6276 = !DILocation(line: 890, column: 3, scope: !6274)
!6277 = !DILocation(line: 891, column: 3, scope: !6274)
!6278 = !DILocation(line: 891, column: 9, scope: !6274)
!6279 = !DILocation(line: 891, column: 15, scope: !6274)
!6280 = !DILocation(line: 892, column: 2, scope: !6274)
!6281 = !DILocation(line: 894, column: 7, scope: !6252)
!6282 = !DILocation(line: 894, column: 2, scope: !6252)
!6283 = !DILocation(line: 895, column: 1, scope: !6252)
!6284 = distinct !DISubprogram(name: "CCG_grid_elem_co", scope: !152, file: !152, line: 137, type: !6285, scopeLine: 138, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!6285 = !DISubroutineType(types: !6286)
!6286 = !{!141, !1276, !150, !142, !142}
!6287 = !DILocalVariable(name: "key", arg: 1, scope: !6284, file: !152, line: 137, type: !1276)
!6288 = !DILocation(line: 137, column: 50, scope: !6284)
!6289 = !DILocalVariable(name: "elem", arg: 2, scope: !6284, file: !152, line: 137, type: !150)
!6290 = !DILocation(line: 137, column: 64, scope: !6284)
!6291 = !DILocalVariable(name: "x", arg: 3, scope: !6284, file: !152, line: 137, type: !142)
!6292 = !DILocation(line: 137, column: 74, scope: !6284)
!6293 = !DILocalVariable(name: "y", arg: 4, scope: !6284, file: !152, line: 137, type: !142)
!6294 = !DILocation(line: 137, column: 81, scope: !6284)
!6295 = !DILocation(line: 139, column: 21, scope: !6284)
!6296 = !DILocation(line: 139, column: 40, scope: !6284)
!6297 = !DILocation(line: 139, column: 45, scope: !6284)
!6298 = !DILocation(line: 139, column: 51, scope: !6284)
!6299 = !DILocation(line: 139, column: 54, scope: !6284)
!6300 = !DILocation(line: 139, column: 26, scope: !6284)
!6301 = !DILocation(line: 139, column: 9, scope: !6284)
!6302 = !DILocation(line: 139, column: 2, scope: !6284)
!6303 = distinct !DISubprogram(name: "CCG_grid_elem", scope: !152, file: !152, line: 131, type: !6304, scopeLine: 132, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !176)
!6304 = !DISubroutineType(types: !6305)
!6305 = !{!150, !1276, !150, !142, !142}
!6306 = !DILocalVariable(name: "key", arg: 1, scope: !6303, file: !152, line: 131, type: !1276)
!6307 = !DILocation(line: 131, column: 49, scope: !6303)
!6308 = !DILocalVariable(name: "elem", arg: 2, scope: !6303, file: !152, line: 131, type: !150)
!6309 = !DILocation(line: 131, column: 63, scope: !6303)
!6310 = !DILocalVariable(name: "x", arg: 3, scope: !6303, file: !152, line: 131, type: !142)
!6311 = !DILocation(line: 131, column: 73, scope: !6303)
!6312 = !DILocalVariable(name: "y", arg: 4, scope: !6303, file: !152, line: 131, type: !142)
!6313 = !DILocation(line: 131, column: 80, scope: !6303)
!6314 = !DILocation(line: 134, column: 25, scope: !6303)
!6315 = !DILocation(line: 134, column: 30, scope: !6303)
!6316 = !DILocation(line: 134, column: 37, scope: !6303)
!6317 = !DILocation(line: 134, column: 41, scope: !6303)
!6318 = !DILocation(line: 134, column: 46, scope: !6303)
!6319 = !DILocation(line: 134, column: 39, scope: !6303)
!6320 = !DILocation(line: 134, column: 58, scope: !6303)
!6321 = !DILocation(line: 134, column: 56, scope: !6303)
!6322 = !DILocation(line: 134, column: 9, scope: !6303)
!6323 = !DILocation(line: 134, column: 2, scope: !6303)
