; ModuleID = 'lambda-code.c'
source_filename = "lambda-code.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.lambda_body_vector_s = type { i32*, i32, i32 }
%struct.lambda_trans_matrix_s = type { i32**, i32, i32, i32 }
%struct.lambda_linear_expression_s = type { i32*, i32, i32*, i32, %struct.lambda_linear_expression_s* }
%struct.lambda_loop_s = type { %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s*, i32 }
%struct.lambda_loopnest_s = type { %struct.lambda_loop_s**, i32, i32 }
%struct.lambda_lattice_s = type { i32**, i32, i32*, i32**, i32 }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.VEC_lambda_loop_heap = type { %struct.VEC_lambda_loop_base }
%struct.VEC_lambda_loop_base = type { i32, i32, [1 x %struct.lambda_loop_s*] }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.VEC_source_location_heap = type { %struct.VEC_source_location_base }
%struct.VEC_source_location_base = type { i32, i32, [1 x i32] }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.VEC_ddr_p_heap = type { %struct.VEC_ddr_p_base }
%struct.VEC_ddr_p_base = type { i32, i32, [1 x %struct.data_dependence_relation*] }
%struct.data_dependence_relation = type { %struct.data_reference*, %struct.data_reference*, %union.tree_node*, %struct.VEC_subscript_p_heap*, %struct.VEC_loop_p_heap*, %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap*, i32, i8, i8, i8 }
%struct.data_reference = type { %union.gimple_statement_d*, %union.tree_node*, i8*, i8, %struct.innermost_loop_behavior, %struct.indices, %struct.dr_alias, %struct.access_matrix* }
%struct.innermost_loop_behavior = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.indices = type { %union.tree_node*, %struct.VEC_tree_heap* }
%struct.dr_alias = type { %struct.ptr_info_def*, %struct.bitmap_head_def* }
%struct.access_matrix = type { %struct.VEC_loop_p_heap*, i32, %struct.VEC_tree_heap*, %struct.VEC_lambda_vector_gc* }
%struct.VEC_lambda_vector_gc = type { %struct.VEC_lambda_vector_base }
%struct.VEC_lambda_vector_base = type { i32, i32, [1 x i32*] }
%struct.VEC_subscript_p_heap = type { %struct.VEC_subscript_p_base }
%struct.VEC_subscript_p_base = type { i32, i32, [1 x %struct.subscript*] }
%struct.subscript = type { %struct.conflict_function*, %struct.conflict_function*, %union.tree_node*, %union.tree_node* }
%struct.conflict_function = type { i32, [2 x %struct.VEC_tree_heap*] }
%struct.VEC_loop_p_heap = type { %struct.VEC_loop_p_base }
%struct.VEC_lambda_vector_heap = type { %struct.VEC_lambda_vector_base }
%struct.VEC_data_reference_p_heap = type { %struct.VEC_data_reference_p_base }
%struct.VEC_data_reference_p_base = type { i32, i32, [1 x %struct.data_reference*] }
%struct.pointer_set_t = type opaque
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.tree_map = type { %struct.tree_map_base, i32, %union.tree_node* }
%struct.tree_map_base = type { %union.tree_node* }

@.str = private unnamed_addr constant [14 x i8] c"lambda-code.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"\09Linear expression: \00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c" constant: %d \00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"  invariants: \00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"  denominator: %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"  step size = %d \0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"  linear offset: \0A\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"  lower bound: \0A\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"  upper bound: \0A\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"Loop %c\0A\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.12 = private unnamed_addr constant [54 x i8] c"Not a perfect loop nest and couldn't convert to one.\0A\00", align 1
@.str.13 = private unnamed_addr constant [56 x i8] c"Successfully converted loop nest to perfect loop nest.\0A\00", align 1
@.str.14 = private unnamed_addr constant [35 x i8] c"Inverse of transformation matrix:\0A\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"lnivtmp\00", align 1
@chrec_dont_know = external dso_local global %union.tree_node*, align 8
@chrec_known = external dso_local global %union.tree_node*, align 8
@.str.16 = private unnamed_addr constant [5 x i8] c"%3d \00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c" + \00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c" - \00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"%d%c\00", align 1
@.str.22 = private unnamed_addr constant [11 x i8] c"./lambda.h\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.23 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@dump_flags = external dso_local global i32, align 4
@.str.24 = private unnamed_addr constant [89 x i8] c"Unable to convert loop: Cannot determine exit condition or induction variable for loop.\0A\00", align 1
@.str.25 = private unnamed_addr constant [69 x i8] c"Unable to convert loop: Cannot find PHI node for induction variable\0A\00", align 1
@.str.26 = private unnamed_addr constant [79 x i8] c"Unable to convert loop: Access function for induction variable phi is unknown\0A\00", align 1
@.str.27 = private unnamed_addr constant [56 x i8] c"Unable to convert loop: Cannot determine step of loop.\0A\00", align 1
@.str.28 = private unnamed_addr constant [54 x i8] c"Unable to convert loop: Step of loop is not integer.\0A\00", align 1
@.str.29 = private unnamed_addr constant [74 x i8] c"Unable to convert loop: PHI node for induction variable has >2 arguments\0A\00", align 1
@.str.30 = private unnamed_addr constant [75 x i8] c"Unable to convert loop: PHI edges both inside loop, or both outside loop.\0A\00", align 1
@.str.31 = private unnamed_addr constant [73 x i8] c"Unable to convert loop: Cannot convert lower bound to linear expression\0A\00", align 1
@.str.32 = private unnamed_addr constant [73 x i8] c"Unable to convert loop: Cannot convert upper bound to linear expression\0A\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@.str.33 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.34 = private unnamed_addr constant [7 x i8] c"lletmp\00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.35 = private unnamed_addr constant [7 x i8] c"lbvtmp\00", align 1
@.str.36 = private unnamed_addr constant [10 x i8] c"perfectiv\00", align 1
@.str.37 = private unnamed_addr constant [10 x i8] c"uboundvar\00", align 1
@.str.38 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@htab_hash_pointer = external dso_local global i32 (i8*)*, align 8
@.str.39 = private unnamed_addr constant [11 x i8] c"perfecttmp\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@tree_code_length = external dso_local constant [0 x i8], align 1
@.str.40 = private unnamed_addr constant [18 x i8] c"./tree-data-ref.h\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.lambda_body_vector_s* @lambda_body_vector_new(i32 %size, %struct.obstack* %lambda_obstack) #0 !dbg !2206 {
entry:
  %size.addr = alloca i32, align 4
  %lambda_obstack.addr = alloca %struct.obstack*, align 8
  %ret = alloca %struct.lambda_body_vector_s*, align 8
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !2211, metadata !DIExpression()), !dbg !2212
  store %struct.obstack* %lambda_obstack, %struct.obstack** %lambda_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %lambda_obstack.addr, metadata !2213, metadata !DIExpression()), !dbg !2214
  call void @llvm.dbg.declare(metadata %struct.lambda_body_vector_s** %ret, metadata !2215, metadata !DIExpression()), !dbg !2216
  %0 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %temp = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 5, !dbg !2217
  store i64 16, i64* %temp, align 8, !dbg !2217
  %1 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 4, !dbg !2217
  %2 = load i8*, i8** %chunk_limit, align 8, !dbg !2217
  %3 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 3, !dbg !2217
  %4 = load i8*, i8** %next_free, align 8, !dbg !2217
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64, !dbg !2217
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64, !dbg !2217
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !2217
  %5 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %temp1 = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i32 0, i32 5, !dbg !2217
  %6 = load i64, i64* %temp1, align 8, !dbg !2217
  %cmp = icmp slt i64 %sub.ptr.sub, %6, !dbg !2217
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2217

cond.true:                                        ; preds = %entry
  %7 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %8 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %temp2 = getelementptr inbounds %struct.obstack, %struct.obstack* %8, i32 0, i32 5, !dbg !2217
  %9 = load i64, i64* %temp2, align 8, !dbg !2217
  %conv = trunc i64 %9 to i32, !dbg !2217
  call void @_obstack_newchunk(%struct.obstack* %7, i32 %conv), !dbg !2217
  br label %cond.end, !dbg !2217

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2217

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2217
  %10 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %temp3 = getelementptr inbounds %struct.obstack, %struct.obstack* %10, i32 0, i32 5, !dbg !2217
  %11 = load i64, i64* %temp3, align 8, !dbg !2217
  %12 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %next_free4 = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 3, !dbg !2217
  %13 = load i8*, i8** %next_free4, align 8, !dbg !2217
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %11, !dbg !2217
  store i8* %add.ptr, i8** %next_free4, align 8, !dbg !2217
  %14 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %next_free5 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 3, !dbg !2217
  %15 = load i8*, i8** %next_free5, align 8, !dbg !2217
  %16 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %16, i32 0, i32 2, !dbg !2217
  %17 = load i8*, i8** %object_base, align 8, !dbg !2217
  %cmp6 = icmp eq i8* %15, %17, !dbg !2217
  br i1 %cmp6, label %cond.true8, label %cond.false9, !dbg !2217

cond.true8:                                       ; preds = %cond.end
  %18 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 10, !dbg !2217
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !2217
  %bf.clear = and i8 %bf.load, -3, !dbg !2217
  %bf.set = or i8 %bf.clear, 2, !dbg !2217
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !2217
  br label %cond.end10, !dbg !2217

cond.false9:                                      ; preds = %cond.end
  br label %cond.end10, !dbg !2217

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !2217
  %19 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %object_base12 = getelementptr inbounds %struct.obstack, %struct.obstack* %19, i32 0, i32 2, !dbg !2217
  %20 = load i8*, i8** %object_base12, align 8, !dbg !2217
  %sub.ptr.lhs.cast13 = ptrtoint i8* %20 to i64, !dbg !2217
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast13, 0, !dbg !2217
  %21 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %temp15 = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 5, !dbg !2217
  store i64 %sub.ptr.sub14, i64* %temp15, align 8, !dbg !2217
  %22 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %next_free16 = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 3, !dbg !2217
  %23 = load i8*, i8** %next_free16, align 8, !dbg !2217
  %sub.ptr.lhs.cast17 = ptrtoint i8* %23 to i64, !dbg !2217
  %sub.ptr.sub18 = sub i64 %sub.ptr.lhs.cast17, 0, !dbg !2217
  %24 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 6, !dbg !2217
  %25 = load i32, i32* %alignment_mask, align 8, !dbg !2217
  %conv19 = sext i32 %25 to i64, !dbg !2217
  %add = add nsw i64 %sub.ptr.sub18, %conv19, !dbg !2217
  %26 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %alignment_mask20 = getelementptr inbounds %struct.obstack, %struct.obstack* %26, i32 0, i32 6, !dbg !2217
  %27 = load i32, i32* %alignment_mask20, align 8, !dbg !2217
  %neg = xor i32 %27, -1, !dbg !2217
  %conv21 = sext i32 %neg to i64, !dbg !2217
  %and = and i64 %add, %conv21, !dbg !2217
  %28 = inttoptr i64 %and to i8*, !dbg !2217
  %29 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %next_free22 = getelementptr inbounds %struct.obstack, %struct.obstack* %29, i32 0, i32 3, !dbg !2217
  store i8* %28, i8** %next_free22, align 8, !dbg !2217
  %30 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %next_free23 = getelementptr inbounds %struct.obstack, %struct.obstack* %30, i32 0, i32 3, !dbg !2217
  %31 = load i8*, i8** %next_free23, align 8, !dbg !2217
  %32 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 1, !dbg !2217
  %33 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !2217
  %34 = bitcast %struct._obstack_chunk* %33 to i8*, !dbg !2217
  %sub.ptr.lhs.cast24 = ptrtoint i8* %31 to i64, !dbg !2217
  %sub.ptr.rhs.cast25 = ptrtoint i8* %34 to i64, !dbg !2217
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25, !dbg !2217
  %35 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %chunk_limit27 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 4, !dbg !2217
  %36 = load i8*, i8** %chunk_limit27, align 8, !dbg !2217
  %37 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %chunk28 = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 1, !dbg !2217
  %38 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk28, align 8, !dbg !2217
  %39 = bitcast %struct._obstack_chunk* %38 to i8*, !dbg !2217
  %sub.ptr.lhs.cast29 = ptrtoint i8* %36 to i64, !dbg !2217
  %sub.ptr.rhs.cast30 = ptrtoint i8* %39 to i64, !dbg !2217
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30, !dbg !2217
  %cmp32 = icmp sgt i64 %sub.ptr.sub26, %sub.ptr.sub31, !dbg !2217
  br i1 %cmp32, label %cond.true34, label %cond.false37, !dbg !2217

cond.true34:                                      ; preds = %cond.end10
  %40 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %chunk_limit35 = getelementptr inbounds %struct.obstack, %struct.obstack* %40, i32 0, i32 4, !dbg !2217
  %41 = load i8*, i8** %chunk_limit35, align 8, !dbg !2217
  %42 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %next_free36 = getelementptr inbounds %struct.obstack, %struct.obstack* %42, i32 0, i32 3, !dbg !2217
  store i8* %41, i8** %next_free36, align 8, !dbg !2217
  br label %cond.end38, !dbg !2217

cond.false37:                                     ; preds = %cond.end10
  br label %cond.end38, !dbg !2217

cond.end38:                                       ; preds = %cond.false37, %cond.true34
  %cond39 = phi i8* [ %41, %cond.true34 ], [ null, %cond.false37 ], !dbg !2217
  %43 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %next_free40 = getelementptr inbounds %struct.obstack, %struct.obstack* %43, i32 0, i32 3, !dbg !2217
  %44 = load i8*, i8** %next_free40, align 8, !dbg !2217
  %45 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %object_base41 = getelementptr inbounds %struct.obstack, %struct.obstack* %45, i32 0, i32 2, !dbg !2217
  store i8* %44, i8** %object_base41, align 8, !dbg !2217
  %46 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2217
  %temp42 = getelementptr inbounds %struct.obstack, %struct.obstack* %46, i32 0, i32 5, !dbg !2217
  %47 = load i64, i64* %temp42, align 8, !dbg !2217
  %48 = inttoptr i64 %47 to i8*, !dbg !2217
  %49 = bitcast i8* %48 to %struct.lambda_body_vector_s*, !dbg !2218
  store %struct.lambda_body_vector_s* %49, %struct.lambda_body_vector_s** %ret, align 8, !dbg !2219
  %50 = load i32, i32* %size.addr, align 4, !dbg !2220
  %call = call i32* @lambda_vector_new(i32 %50), !dbg !2221
  %51 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %ret, align 8, !dbg !2222
  %coefficients = getelementptr inbounds %struct.lambda_body_vector_s, %struct.lambda_body_vector_s* %51, i32 0, i32 0, !dbg !2222
  store i32* %call, i32** %coefficients, align 8, !dbg !2223
  %52 = load i32, i32* %size.addr, align 4, !dbg !2224
  %53 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %ret, align 8, !dbg !2225
  %size43 = getelementptr inbounds %struct.lambda_body_vector_s, %struct.lambda_body_vector_s* %53, i32 0, i32 1, !dbg !2225
  store i32 %52, i32* %size43, align 8, !dbg !2226
  %54 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %ret, align 8, !dbg !2227
  %denominator = getelementptr inbounds %struct.lambda_body_vector_s, %struct.lambda_body_vector_s* %54, i32 0, i32 2, !dbg !2227
  store i32 1, i32* %denominator, align 4, !dbg !2228
  %55 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %ret, align 8, !dbg !2229
  ret %struct.lambda_body_vector_s* %55, !dbg !2230
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local void @_obstack_newchunk(%struct.obstack*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32* @lambda_vector_new(i32 %size) #0 !dbg !2231 {
entry:
  %size.addr = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !2234, metadata !DIExpression()), !dbg !2235
  %0 = load i32, i32* %size.addr, align 4, !dbg !2236
  %conv = sext i32 %0 to i64, !dbg !2236
  %mul = mul i64 %conv, 4, !dbg !2236
  %call = call i8* @ggc_alloc_cleared_stat(i64 %mul), !dbg !2236
  %1 = bitcast i8* %call to i32*, !dbg !2236
  ret i32* %1, !dbg !2237
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.lambda_body_vector_s* @lambda_body_vector_compute_new(%struct.lambda_trans_matrix_s* %transform, %struct.lambda_body_vector_s* %vect, %struct.obstack* %lambda_obstack) #0 !dbg !2238 {
entry:
  %transform.addr = alloca %struct.lambda_trans_matrix_s*, align 8
  %vect.addr = alloca %struct.lambda_body_vector_s*, align 8
  %lambda_obstack.addr = alloca %struct.obstack*, align 8
  %temp = alloca %struct.lambda_body_vector_s*, align 8
  %depth = alloca i32, align 4
  store %struct.lambda_trans_matrix_s* %transform, %struct.lambda_trans_matrix_s** %transform.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_trans_matrix_s** %transform.addr, metadata !2249, metadata !DIExpression()), !dbg !2250
  store %struct.lambda_body_vector_s* %vect, %struct.lambda_body_vector_s** %vect.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_body_vector_s** %vect.addr, metadata !2251, metadata !DIExpression()), !dbg !2252
  store %struct.obstack* %lambda_obstack, %struct.obstack** %lambda_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %lambda_obstack.addr, metadata !2253, metadata !DIExpression()), !dbg !2254
  call void @llvm.dbg.declare(metadata %struct.lambda_body_vector_s** %temp, metadata !2255, metadata !DIExpression()), !dbg !2256
  call void @llvm.dbg.declare(metadata i32* %depth, metadata !2257, metadata !DIExpression()), !dbg !2258
  %0 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %transform.addr, align 8, !dbg !2259
  %rowsize = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %0, i32 0, i32 1, !dbg !2259
  %1 = load i32, i32* %rowsize, align 8, !dbg !2259
  %2 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %transform.addr, align 8, !dbg !2259
  %colsize = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %2, i32 0, i32 2, !dbg !2259
  %3 = load i32, i32* %colsize, align 4, !dbg !2259
  %cmp = icmp eq i32 %1, %3, !dbg !2259
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !2259

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 179, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2259
  br label %cond.end, !dbg !2259

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2259

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2259
  %4 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %transform.addr, align 8, !dbg !2260
  %rowsize1 = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %4, i32 0, i32 1, !dbg !2260
  %5 = load i32, i32* %rowsize1, align 8, !dbg !2260
  store i32 %5, i32* %depth, align 4, !dbg !2261
  %6 = load i32, i32* %depth, align 4, !dbg !2262
  %7 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2263
  %call = call %struct.lambda_body_vector_s* @lambda_body_vector_new(i32 %6, %struct.obstack* %7), !dbg !2264
  store %struct.lambda_body_vector_s* %call, %struct.lambda_body_vector_s** %temp, align 8, !dbg !2265
  %8 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %vect.addr, align 8, !dbg !2266
  %denominator = getelementptr inbounds %struct.lambda_body_vector_s, %struct.lambda_body_vector_s* %8, i32 0, i32 2, !dbg !2266
  %9 = load i32, i32* %denominator, align 4, !dbg !2266
  %10 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %transform.addr, align 8, !dbg !2267
  %denominator2 = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %10, i32 0, i32 3, !dbg !2267
  %11 = load i32, i32* %denominator2, align 8, !dbg !2267
  %mul = mul nsw i32 %9, %11, !dbg !2268
  %12 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %temp, align 8, !dbg !2269
  %denominator3 = getelementptr inbounds %struct.lambda_body_vector_s, %struct.lambda_body_vector_s* %12, i32 0, i32 2, !dbg !2269
  store i32 %mul, i32* %denominator3, align 4, !dbg !2270
  %13 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %vect.addr, align 8, !dbg !2271
  %coefficients = getelementptr inbounds %struct.lambda_body_vector_s, %struct.lambda_body_vector_s* %13, i32 0, i32 0, !dbg !2271
  %14 = load i32*, i32** %coefficients, align 8, !dbg !2271
  %15 = load i32, i32* %depth, align 4, !dbg !2272
  %16 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %transform.addr, align 8, !dbg !2273
  %matrix = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %16, i32 0, i32 0, !dbg !2273
  %17 = load i32**, i32*** %matrix, align 8, !dbg !2273
  %18 = load i32, i32* %depth, align 4, !dbg !2274
  %19 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %temp, align 8, !dbg !2275
  %coefficients4 = getelementptr inbounds %struct.lambda_body_vector_s, %struct.lambda_body_vector_s* %19, i32 0, i32 0, !dbg !2275
  %20 = load i32*, i32** %coefficients4, align 8, !dbg !2275
  call void @lambda_vector_matrix_mult(i32* %14, i32 %15, i32** %17, i32 %18, i32* %20), !dbg !2276
  %21 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %vect.addr, align 8, !dbg !2277
  %size = getelementptr inbounds %struct.lambda_body_vector_s, %struct.lambda_body_vector_s* %21, i32 0, i32 1, !dbg !2277
  %22 = load i32, i32* %size, align 8, !dbg !2277
  %23 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %temp, align 8, !dbg !2278
  %size5 = getelementptr inbounds %struct.lambda_body_vector_s, %struct.lambda_body_vector_s* %23, i32 0, i32 1, !dbg !2278
  store i32 %22, i32* %size5, align 8, !dbg !2279
  %24 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %temp, align 8, !dbg !2280
  ret %struct.lambda_body_vector_s* %24, !dbg !2281
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @lambda_vector_matrix_mult(i32* %vect, i32 %m, i32** %mat, i32 %n, i32* %dest) #0 !dbg !2282 {
entry:
  %vect.addr = alloca i32*, align 8
  %m.addr = alloca i32, align 4
  %mat.addr = alloca i32**, align 8
  %n.addr = alloca i32, align 4
  %dest.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %vect, i32** %vect.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vect.addr, metadata !2285, metadata !DIExpression()), !dbg !2286
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !2287, metadata !DIExpression()), !dbg !2288
  store i32** %mat, i32*** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %mat.addr, metadata !2289, metadata !DIExpression()), !dbg !2290
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !2291, metadata !DIExpression()), !dbg !2292
  store i32* %dest, i32** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %dest.addr, metadata !2293, metadata !DIExpression()), !dbg !2294
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2295, metadata !DIExpression()), !dbg !2296
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2297, metadata !DIExpression()), !dbg !2298
  %0 = load i32*, i32** %dest.addr, align 8, !dbg !2299
  %1 = load i32, i32* %n.addr, align 4, !dbg !2300
  call void @lambda_vector_clear(i32* %0, i32 %1), !dbg !2301
  store i32 0, i32* %i, align 4, !dbg !2302
  br label %for.cond, !dbg !2304

for.cond:                                         ; preds = %for.inc10, %entry
  %2 = load i32, i32* %i, align 4, !dbg !2305
  %3 = load i32, i32* %n.addr, align 4, !dbg !2307
  %cmp = icmp slt i32 %2, %3, !dbg !2308
  br i1 %cmp, label %for.body, label %for.end12, !dbg !2309

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !2310
  br label %for.cond1, !dbg !2312

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4, !dbg !2313
  %5 = load i32, i32* %m.addr, align 4, !dbg !2315
  %cmp2 = icmp slt i32 %4, %5, !dbg !2316
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !2317

for.body3:                                        ; preds = %for.cond1
  %6 = load i32**, i32*** %mat.addr, align 8, !dbg !2318
  %7 = load i32, i32* %j, align 4, !dbg !2319
  %idxprom = sext i32 %7 to i64, !dbg !2318
  %arrayidx = getelementptr inbounds i32*, i32** %6, i64 %idxprom, !dbg !2318
  %8 = load i32*, i32** %arrayidx, align 8, !dbg !2318
  %9 = load i32, i32* %i, align 4, !dbg !2320
  %idxprom4 = sext i32 %9 to i64, !dbg !2318
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i64 %idxprom4, !dbg !2318
  %10 = load i32, i32* %arrayidx5, align 4, !dbg !2318
  %11 = load i32*, i32** %vect.addr, align 8, !dbg !2321
  %12 = load i32, i32* %j, align 4, !dbg !2322
  %idxprom6 = sext i32 %12 to i64, !dbg !2321
  %arrayidx7 = getelementptr inbounds i32, i32* %11, i64 %idxprom6, !dbg !2321
  %13 = load i32, i32* %arrayidx7, align 4, !dbg !2321
  %mul = mul nsw i32 %10, %13, !dbg !2323
  %14 = load i32*, i32** %dest.addr, align 8, !dbg !2324
  %15 = load i32, i32* %i, align 4, !dbg !2325
  %idxprom8 = sext i32 %15 to i64, !dbg !2324
  %arrayidx9 = getelementptr inbounds i32, i32* %14, i64 %idxprom8, !dbg !2324
  %16 = load i32, i32* %arrayidx9, align 4, !dbg !2326
  %add = add nsw i32 %16, %mul, !dbg !2326
  store i32 %add, i32* %arrayidx9, align 4, !dbg !2326
  br label %for.inc, !dbg !2324

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4, !dbg !2327
  %inc = add nsw i32 %17, 1, !dbg !2327
  store i32 %inc, i32* %j, align 4, !dbg !2327
  br label %for.cond1, !dbg !2328, !llvm.loop !2329

for.end:                                          ; preds = %for.cond1
  br label %for.inc10, !dbg !2330

for.inc10:                                        ; preds = %for.end
  %18 = load i32, i32* %i, align 4, !dbg !2331
  %inc11 = add nsw i32 %18, 1, !dbg !2331
  store i32 %inc11, i32* %i, align 4, !dbg !2331
  br label %for.cond, !dbg !2332, !llvm.loop !2333

for.end12:                                        ; preds = %for.cond
  ret void, !dbg !2335
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_lambda_body_vector(%struct._IO_FILE* %outfile, %struct.lambda_body_vector_s* %body) #0 !dbg !2336 {
entry:
  %outfile.addr = alloca %struct._IO_FILE*, align 8
  %body.addr = alloca %struct.lambda_body_vector_s*, align 8
  store %struct._IO_FILE* %outfile, %struct._IO_FILE** %outfile.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outfile.addr, metadata !2390, metadata !DIExpression()), !dbg !2391
  store %struct.lambda_body_vector_s* %body, %struct.lambda_body_vector_s** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_body_vector_s** %body.addr, metadata !2392, metadata !DIExpression()), !dbg !2393
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2394
  %1 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %body.addr, align 8, !dbg !2395
  %coefficients = getelementptr inbounds %struct.lambda_body_vector_s, %struct.lambda_body_vector_s* %1, i32 0, i32 0, !dbg !2395
  %2 = load i32*, i32** %coefficients, align 8, !dbg !2395
  %3 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %body.addr, align 8, !dbg !2396
  %size = getelementptr inbounds %struct.lambda_body_vector_s, %struct.lambda_body_vector_s* %3, i32 0, i32 1, !dbg !2396
  %4 = load i32, i32* %size, align 8, !dbg !2396
  call void @print_lambda_vector(%struct._IO_FILE* %0, i32* %2, i32 %4), !dbg !2397
  ret void, !dbg !2398
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_lambda_vector(%struct._IO_FILE* %outfile, i32* %vector, i32 %n) #0 !dbg !2399 {
entry:
  %outfile.addr = alloca %struct._IO_FILE*, align 8
  %vector.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct._IO_FILE* %outfile, %struct._IO_FILE** %outfile.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outfile.addr, metadata !2402, metadata !DIExpression()), !dbg !2403
  store i32* %vector, i32** %vector.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vector.addr, metadata !2404, metadata !DIExpression()), !dbg !2405
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !2406, metadata !DIExpression()), !dbg !2407
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2408, metadata !DIExpression()), !dbg !2409
  store i32 0, i32* %i, align 4, !dbg !2410
  br label %for.cond, !dbg !2412

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2413
  %1 = load i32, i32* %n.addr, align 4, !dbg !2415
  %cmp = icmp slt i32 %0, %1, !dbg !2416
  br i1 %cmp, label %for.body, label %for.end, !dbg !2417

for.body:                                         ; preds = %for.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2418
  %3 = load i32*, i32** %vector.addr, align 8, !dbg !2419
  %4 = load i32, i32* %i, align 4, !dbg !2420
  %idxprom = sext i32 %4 to i64, !dbg !2419
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !2419
  %5 = load i32, i32* %arrayidx, align 4, !dbg !2419
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i64 0, i64 0), i32 %5), !dbg !2421
  br label %for.inc, !dbg !2421

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !2422
  %inc = add nsw i32 %6, 1, !dbg !2422
  store i32 %inc, i32* %i, align 4, !dbg !2422
  br label %for.cond, !dbg !2423, !llvm.loop !2424

for.end:                                          ; preds = %for.cond
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2426
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0)), !dbg !2427
  ret void, !dbg !2428
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.lambda_linear_expression_s* @lambda_linear_expression_new(i32 %dim, i32 %invariants, %struct.obstack* %lambda_obstack) #0 !dbg !2429 {
entry:
  %dim.addr = alloca i32, align 4
  %invariants.addr = alloca i32, align 4
  %lambda_obstack.addr = alloca %struct.obstack*, align 8
  %ret = alloca %struct.lambda_linear_expression_s*, align 8
  store i32 %dim, i32* %dim.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dim.addr, metadata !2432, metadata !DIExpression()), !dbg !2433
  store i32 %invariants, i32* %invariants.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %invariants.addr, metadata !2434, metadata !DIExpression()), !dbg !2435
  store %struct.obstack* %lambda_obstack, %struct.obstack** %lambda_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %lambda_obstack.addr, metadata !2436, metadata !DIExpression()), !dbg !2437
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %ret, metadata !2438, metadata !DIExpression()), !dbg !2439
  %0 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %temp = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 5, !dbg !2440
  store i64 40, i64* %temp, align 8, !dbg !2440
  %1 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 4, !dbg !2440
  %2 = load i8*, i8** %chunk_limit, align 8, !dbg !2440
  %3 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 3, !dbg !2440
  %4 = load i8*, i8** %next_free, align 8, !dbg !2440
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64, !dbg !2440
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64, !dbg !2440
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !2440
  %5 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %temp1 = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i32 0, i32 5, !dbg !2440
  %6 = load i64, i64* %temp1, align 8, !dbg !2440
  %cmp = icmp slt i64 %sub.ptr.sub, %6, !dbg !2440
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2440

cond.true:                                        ; preds = %entry
  %7 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %8 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %temp2 = getelementptr inbounds %struct.obstack, %struct.obstack* %8, i32 0, i32 5, !dbg !2440
  %9 = load i64, i64* %temp2, align 8, !dbg !2440
  %conv = trunc i64 %9 to i32, !dbg !2440
  call void @_obstack_newchunk(%struct.obstack* %7, i32 %conv), !dbg !2440
  br label %cond.end, !dbg !2440

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2440

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2440
  %10 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %temp3 = getelementptr inbounds %struct.obstack, %struct.obstack* %10, i32 0, i32 5, !dbg !2440
  %11 = load i64, i64* %temp3, align 8, !dbg !2440
  %12 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %next_free4 = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 3, !dbg !2440
  %13 = load i8*, i8** %next_free4, align 8, !dbg !2440
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %11, !dbg !2440
  store i8* %add.ptr, i8** %next_free4, align 8, !dbg !2440
  %14 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %next_free5 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 3, !dbg !2440
  %15 = load i8*, i8** %next_free5, align 8, !dbg !2440
  %16 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %16, i32 0, i32 2, !dbg !2440
  %17 = load i8*, i8** %object_base, align 8, !dbg !2440
  %cmp6 = icmp eq i8* %15, %17, !dbg !2440
  br i1 %cmp6, label %cond.true8, label %cond.false9, !dbg !2440

cond.true8:                                       ; preds = %cond.end
  %18 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 10, !dbg !2440
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !2440
  %bf.clear = and i8 %bf.load, -3, !dbg !2440
  %bf.set = or i8 %bf.clear, 2, !dbg !2440
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !2440
  br label %cond.end10, !dbg !2440

cond.false9:                                      ; preds = %cond.end
  br label %cond.end10, !dbg !2440

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !2440
  %19 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %object_base12 = getelementptr inbounds %struct.obstack, %struct.obstack* %19, i32 0, i32 2, !dbg !2440
  %20 = load i8*, i8** %object_base12, align 8, !dbg !2440
  %sub.ptr.lhs.cast13 = ptrtoint i8* %20 to i64, !dbg !2440
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast13, 0, !dbg !2440
  %21 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %temp15 = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 5, !dbg !2440
  store i64 %sub.ptr.sub14, i64* %temp15, align 8, !dbg !2440
  %22 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %next_free16 = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 3, !dbg !2440
  %23 = load i8*, i8** %next_free16, align 8, !dbg !2440
  %sub.ptr.lhs.cast17 = ptrtoint i8* %23 to i64, !dbg !2440
  %sub.ptr.sub18 = sub i64 %sub.ptr.lhs.cast17, 0, !dbg !2440
  %24 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 6, !dbg !2440
  %25 = load i32, i32* %alignment_mask, align 8, !dbg !2440
  %conv19 = sext i32 %25 to i64, !dbg !2440
  %add = add nsw i64 %sub.ptr.sub18, %conv19, !dbg !2440
  %26 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %alignment_mask20 = getelementptr inbounds %struct.obstack, %struct.obstack* %26, i32 0, i32 6, !dbg !2440
  %27 = load i32, i32* %alignment_mask20, align 8, !dbg !2440
  %neg = xor i32 %27, -1, !dbg !2440
  %conv21 = sext i32 %neg to i64, !dbg !2440
  %and = and i64 %add, %conv21, !dbg !2440
  %28 = inttoptr i64 %and to i8*, !dbg !2440
  %29 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %next_free22 = getelementptr inbounds %struct.obstack, %struct.obstack* %29, i32 0, i32 3, !dbg !2440
  store i8* %28, i8** %next_free22, align 8, !dbg !2440
  %30 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %next_free23 = getelementptr inbounds %struct.obstack, %struct.obstack* %30, i32 0, i32 3, !dbg !2440
  %31 = load i8*, i8** %next_free23, align 8, !dbg !2440
  %32 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 1, !dbg !2440
  %33 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !2440
  %34 = bitcast %struct._obstack_chunk* %33 to i8*, !dbg !2440
  %sub.ptr.lhs.cast24 = ptrtoint i8* %31 to i64, !dbg !2440
  %sub.ptr.rhs.cast25 = ptrtoint i8* %34 to i64, !dbg !2440
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25, !dbg !2440
  %35 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %chunk_limit27 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 4, !dbg !2440
  %36 = load i8*, i8** %chunk_limit27, align 8, !dbg !2440
  %37 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %chunk28 = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 1, !dbg !2440
  %38 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk28, align 8, !dbg !2440
  %39 = bitcast %struct._obstack_chunk* %38 to i8*, !dbg !2440
  %sub.ptr.lhs.cast29 = ptrtoint i8* %36 to i64, !dbg !2440
  %sub.ptr.rhs.cast30 = ptrtoint i8* %39 to i64, !dbg !2440
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30, !dbg !2440
  %cmp32 = icmp sgt i64 %sub.ptr.sub26, %sub.ptr.sub31, !dbg !2440
  br i1 %cmp32, label %cond.true34, label %cond.false37, !dbg !2440

cond.true34:                                      ; preds = %cond.end10
  %40 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %chunk_limit35 = getelementptr inbounds %struct.obstack, %struct.obstack* %40, i32 0, i32 4, !dbg !2440
  %41 = load i8*, i8** %chunk_limit35, align 8, !dbg !2440
  %42 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %next_free36 = getelementptr inbounds %struct.obstack, %struct.obstack* %42, i32 0, i32 3, !dbg !2440
  store i8* %41, i8** %next_free36, align 8, !dbg !2440
  br label %cond.end38, !dbg !2440

cond.false37:                                     ; preds = %cond.end10
  br label %cond.end38, !dbg !2440

cond.end38:                                       ; preds = %cond.false37, %cond.true34
  %cond39 = phi i8* [ %41, %cond.true34 ], [ null, %cond.false37 ], !dbg !2440
  %43 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %next_free40 = getelementptr inbounds %struct.obstack, %struct.obstack* %43, i32 0, i32 3, !dbg !2440
  %44 = load i8*, i8** %next_free40, align 8, !dbg !2440
  %45 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %object_base41 = getelementptr inbounds %struct.obstack, %struct.obstack* %45, i32 0, i32 2, !dbg !2440
  store i8* %44, i8** %object_base41, align 8, !dbg !2440
  %46 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2440
  %temp42 = getelementptr inbounds %struct.obstack, %struct.obstack* %46, i32 0, i32 5, !dbg !2440
  %47 = load i64, i64* %temp42, align 8, !dbg !2440
  %48 = inttoptr i64 %47 to i8*, !dbg !2440
  %49 = bitcast i8* %48 to %struct.lambda_linear_expression_s*, !dbg !2441
  store %struct.lambda_linear_expression_s* %49, %struct.lambda_linear_expression_s** %ret, align 8, !dbg !2442
  %50 = load i32, i32* %dim.addr, align 4, !dbg !2443
  %call = call i32* @lambda_vector_new(i32 %50), !dbg !2444
  %51 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %ret, align 8, !dbg !2445
  %coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %51, i32 0, i32 0, !dbg !2445
  store i32* %call, i32** %coefficients, align 8, !dbg !2446
  %52 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %ret, align 8, !dbg !2447
  %constant = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %52, i32 0, i32 1, !dbg !2447
  store i32 0, i32* %constant, align 8, !dbg !2448
  %53 = load i32, i32* %invariants.addr, align 4, !dbg !2449
  %call43 = call i32* @lambda_vector_new(i32 %53), !dbg !2450
  %54 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %ret, align 8, !dbg !2451
  %invariant_coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %54, i32 0, i32 2, !dbg !2451
  store i32* %call43, i32** %invariant_coefficients, align 8, !dbg !2452
  %55 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %ret, align 8, !dbg !2453
  %denominator = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %55, i32 0, i32 3, !dbg !2453
  store i32 1, i32* %denominator, align 8, !dbg !2454
  %56 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %ret, align 8, !dbg !2455
  %next = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %56, i32 0, i32 4, !dbg !2455
  store %struct.lambda_linear_expression_s* null, %struct.lambda_linear_expression_s** %next, align 8, !dbg !2456
  %57 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %ret, align 8, !dbg !2457
  ret %struct.lambda_linear_expression_s* %57, !dbg !2458
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_lambda_linear_expression(%struct._IO_FILE* %outfile, %struct.lambda_linear_expression_s* %expr, i32 %depth, i32 %invariants, i8 signext %start) #0 !dbg !2459 {
entry:
  %outfile.addr = alloca %struct._IO_FILE*, align 8
  %expr.addr = alloca %struct.lambda_linear_expression_s*, align 8
  %depth.addr = alloca i32, align 4
  %invariants.addr = alloca i32, align 4
  %start.addr = alloca i8, align 1
  store %struct._IO_FILE* %outfile, %struct._IO_FILE** %outfile.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outfile.addr, metadata !2462, metadata !DIExpression()), !dbg !2463
  store %struct.lambda_linear_expression_s* %expr, %struct.lambda_linear_expression_s** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %expr.addr, metadata !2464, metadata !DIExpression()), !dbg !2465
  store i32 %depth, i32* %depth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %depth.addr, metadata !2466, metadata !DIExpression()), !dbg !2467
  store i32 %invariants, i32* %invariants.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %invariants.addr, metadata !2468, metadata !DIExpression()), !dbg !2469
  store i8 %start, i8* %start.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %start.addr, metadata !2470, metadata !DIExpression()), !dbg !2471
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2472
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0)), !dbg !2473
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2474
  %2 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expr.addr, align 8, !dbg !2475
  %coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %2, i32 0, i32 0, !dbg !2475
  %3 = load i32*, i32** %coefficients, align 8, !dbg !2475
  %4 = load i32, i32* %depth.addr, align 4, !dbg !2476
  %5 = load i8, i8* %start.addr, align 1, !dbg !2477
  call void @print_linear_expression(%struct._IO_FILE* %1, i32* %3, i32 %4, i8 signext %5), !dbg !2478
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2479
  %7 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expr.addr, align 8, !dbg !2480
  %constant = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %7, i32 0, i32 1, !dbg !2480
  %8 = load i32, i32* %constant, align 8, !dbg !2480
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0), i32 %8), !dbg !2481
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2482
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0)), !dbg !2483
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2484
  %11 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expr.addr, align 8, !dbg !2485
  %invariant_coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %11, i32 0, i32 2, !dbg !2485
  %12 = load i32*, i32** %invariant_coefficients, align 8, !dbg !2485
  %13 = load i32, i32* %invariants.addr, align 4, !dbg !2486
  call void @print_linear_expression(%struct._IO_FILE* %10, i32* %12, i32 %13, i8 signext 65), !dbg !2487
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2488
  %15 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expr.addr, align 8, !dbg !2489
  %denominator = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %15, i32 0, i32 3, !dbg !2489
  %16 = load i32, i32* %denominator, align 8, !dbg !2489
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0), i32 %16), !dbg !2490
  ret void, !dbg !2491
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @print_linear_expression(%struct._IO_FILE* %outfile, i32* %expr, i32 %size, i8 signext %start) #0 !dbg !2492 {
entry:
  %outfile.addr = alloca %struct._IO_FILE*, align 8
  %expr.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  %start.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %first = alloca i8, align 1
  store %struct._IO_FILE* %outfile, %struct._IO_FILE** %outfile.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outfile.addr, metadata !2495, metadata !DIExpression()), !dbg !2496
  store i32* %expr, i32** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %expr.addr, metadata !2497, metadata !DIExpression()), !dbg !2498
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !2499, metadata !DIExpression()), !dbg !2500
  store i8 %start, i8* %start.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %start.addr, metadata !2501, metadata !DIExpression()), !dbg !2502
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2503, metadata !DIExpression()), !dbg !2504
  call void @llvm.dbg.declare(metadata i8* %first, metadata !2505, metadata !DIExpression()), !dbg !2506
  store i8 1, i8* %first, align 1, !dbg !2506
  store i32 0, i32* %i, align 4, !dbg !2507
  br label %for.cond, !dbg !2509

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2510
  %1 = load i32, i32* %size.addr, align 4, !dbg !2512
  %cmp = icmp slt i32 %0, %1, !dbg !2513
  br i1 %cmp, label %for.body, label %for.end, !dbg !2514

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %expr.addr, align 8, !dbg !2515
  %3 = load i32, i32* %i, align 4, !dbg !2518
  %idxprom = sext i32 %3 to i64, !dbg !2515
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !2515
  %4 = load i32, i32* %arrayidx, align 4, !dbg !2515
  %cmp1 = icmp ne i32 %4, 0, !dbg !2519
  br i1 %cmp1, label %if.then, label %if.end30, !dbg !2520

if.then:                                          ; preds = %for.body
  %5 = load i8, i8* %first, align 1, !dbg !2521
  %tobool = icmp ne i8 %5, 0, !dbg !2521
  br i1 %tobool, label %if.then2, label %if.else, !dbg !2524

if.then2:                                         ; preds = %if.then
  %6 = load i32*, i32** %expr.addr, align 8, !dbg !2525
  %7 = load i32, i32* %i, align 4, !dbg !2528
  %idxprom3 = sext i32 %7 to i64, !dbg !2525
  %arrayidx4 = getelementptr inbounds i32, i32* %6, i64 %idxprom3, !dbg !2525
  %8 = load i32, i32* %arrayidx4, align 4, !dbg !2525
  %cmp5 = icmp slt i32 %8, 0, !dbg !2529
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !2530

if.then6:                                         ; preds = %if.then2
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2531
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !2532
  br label %if.end, !dbg !2532

if.end:                                           ; preds = %if.then6, %if.then2
  store i8 0, i8* %first, align 1, !dbg !2533
  br label %if.end15, !dbg !2534

if.else:                                          ; preds = %if.then
  %10 = load i32*, i32** %expr.addr, align 8, !dbg !2535
  %11 = load i32, i32* %i, align 4, !dbg !2537
  %idxprom7 = sext i32 %11 to i64, !dbg !2535
  %arrayidx8 = getelementptr inbounds i32, i32* %10, i64 %idxprom7, !dbg !2535
  %12 = load i32, i32* %arrayidx8, align 4, !dbg !2535
  %cmp9 = icmp sgt i32 %12, 0, !dbg !2538
  br i1 %cmp9, label %if.then10, label %if.else12, !dbg !2539

if.then10:                                        ; preds = %if.else
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2540
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0)), !dbg !2541
  br label %if.end14, !dbg !2541

if.else12:                                        ; preds = %if.else
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2542
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i64 0, i64 0)), !dbg !2543
  br label %if.end14

if.end14:                                         ; preds = %if.else12, %if.then10
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.end
  %15 = load i32*, i32** %expr.addr, align 8, !dbg !2544
  %16 = load i32, i32* %i, align 4, !dbg !2546
  %idxprom16 = sext i32 %16 to i64, !dbg !2544
  %arrayidx17 = getelementptr inbounds i32, i32* %15, i64 %idxprom16, !dbg !2544
  %17 = load i32, i32* %arrayidx17, align 4, !dbg !2544
  %call18 = call i32 @abs(i32 %17) #5, !dbg !2547
  %cmp19 = icmp eq i32 %call18, 1, !dbg !2548
  br i1 %cmp19, label %if.then20, label %if.else22, !dbg !2549

if.then20:                                        ; preds = %if.end15
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2550
  %19 = load i8, i8* %start.addr, align 1, !dbg !2551
  %conv = sext i8 %19 to i32, !dbg !2551
  %20 = load i32, i32* %i, align 4, !dbg !2552
  %add = add nsw i32 %conv, %20, !dbg !2553
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i32 %add), !dbg !2554
  br label %if.end29, !dbg !2554

if.else22:                                        ; preds = %if.end15
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2555
  %22 = load i32*, i32** %expr.addr, align 8, !dbg !2556
  %23 = load i32, i32* %i, align 4, !dbg !2557
  %idxprom23 = sext i32 %23 to i64, !dbg !2556
  %arrayidx24 = getelementptr inbounds i32, i32* %22, i64 %idxprom23, !dbg !2556
  %24 = load i32, i32* %arrayidx24, align 4, !dbg !2556
  %call25 = call i32 @abs(i32 %24) #5, !dbg !2558
  %25 = load i8, i8* %start.addr, align 1, !dbg !2559
  %conv26 = sext i8 %25 to i32, !dbg !2559
  %26 = load i32, i32* %i, align 4, !dbg !2560
  %add27 = add nsw i32 %conv26, %26, !dbg !2561
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i64 0, i64 0), i32 %call25, i32 %add27), !dbg !2562
  br label %if.end29

if.end29:                                         ; preds = %if.else22, %if.then20
  br label %if.end30, !dbg !2563

if.end30:                                         ; preds = %if.end29, %for.body
  br label %for.inc, !dbg !2564

for.inc:                                          ; preds = %if.end30
  %27 = load i32, i32* %i, align 4, !dbg !2565
  %inc = add nsw i32 %27, 1, !dbg !2565
  store i32 %inc, i32* %i, align 4, !dbg !2565
  br label %for.cond, !dbg !2566, !llvm.loop !2567

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2569
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_lambda_loop(%struct._IO_FILE* %outfile, %struct.lambda_loop_s* %loop, i32 %depth, i32 %invariants, i8 signext %start) #0 !dbg !2570 {
entry:
  %outfile.addr = alloca %struct._IO_FILE*, align 8
  %loop.addr = alloca %struct.lambda_loop_s*, align 8
  %depth.addr = alloca i32, align 4
  %invariants.addr = alloca i32, align 4
  %start.addr = alloca i8, align 1
  %step = alloca i32, align 4
  %expr = alloca %struct.lambda_linear_expression_s*, align 8
  store %struct._IO_FILE* %outfile, %struct._IO_FILE** %outfile.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outfile.addr, metadata !2573, metadata !DIExpression()), !dbg !2574
  store %struct.lambda_loop_s* %loop, %struct.lambda_loop_s** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_loop_s** %loop.addr, metadata !2575, metadata !DIExpression()), !dbg !2576
  store i32 %depth, i32* %depth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %depth.addr, metadata !2577, metadata !DIExpression()), !dbg !2578
  store i32 %invariants, i32* %invariants.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %invariants.addr, metadata !2579, metadata !DIExpression()), !dbg !2580
  store i8 %start, i8* %start.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %start.addr, metadata !2581, metadata !DIExpression()), !dbg !2582
  call void @llvm.dbg.declare(metadata i32* %step, metadata !2583, metadata !DIExpression()), !dbg !2584
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %expr, metadata !2585, metadata !DIExpression()), !dbg !2586
  %0 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop.addr, align 8, !dbg !2587
  %tobool = icmp ne %struct.lambda_loop_s* %0, null, !dbg !2587
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2587

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 307, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2587
  br label %cond.end, !dbg !2587

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2587

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2587
  %1 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop.addr, align 8, !dbg !2588
  %linear_offset = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %1, i32 0, i32 2, !dbg !2588
  %2 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %linear_offset, align 8, !dbg !2588
  store %struct.lambda_linear_expression_s* %2, %struct.lambda_linear_expression_s** %expr, align 8, !dbg !2589
  %3 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop.addr, align 8, !dbg !2590
  %step1 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %3, i32 0, i32 3, !dbg !2590
  %4 = load i32, i32* %step1, align 8, !dbg !2590
  store i32 %4, i32* %step, align 4, !dbg !2591
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2592
  %6 = load i32, i32* %step, align 4, !dbg !2593
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i32 %6), !dbg !2594
  %7 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expr, align 8, !dbg !2595
  %tobool2 = icmp ne %struct.lambda_linear_expression_s* %7, null, !dbg !2595
  br i1 %tobool2, label %if.then, label %if.end, !dbg !2597

if.then:                                          ; preds = %cond.end
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2598
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0)), !dbg !2600
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2601
  %10 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expr, align 8, !dbg !2602
  %11 = load i32, i32* %depth.addr, align 4, !dbg !2603
  %12 = load i32, i32* %invariants.addr, align 4, !dbg !2604
  %13 = load i8, i8* %start.addr, align 1, !dbg !2605
  call void @print_lambda_linear_expression(%struct._IO_FILE* %9, %struct.lambda_linear_expression_s* %10, i32 %11, i32 %12, i8 signext %13), !dbg !2606
  br label %if.end, !dbg !2607

if.end:                                           ; preds = %if.then, %cond.end
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2608
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0)), !dbg !2609
  %15 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop.addr, align 8, !dbg !2610
  %lower_bound = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %15, i32 0, i32 0, !dbg !2610
  %16 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lower_bound, align 8, !dbg !2610
  store %struct.lambda_linear_expression_s* %16, %struct.lambda_linear_expression_s** %expr, align 8, !dbg !2612
  br label %for.cond, !dbg !2613

for.cond:                                         ; preds = %for.inc, %if.end
  %17 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expr, align 8, !dbg !2614
  %cmp = icmp ne %struct.lambda_linear_expression_s* %17, null, !dbg !2616
  br i1 %cmp, label %for.body, label %for.end, !dbg !2617

for.body:                                         ; preds = %for.cond
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2618
  %19 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expr, align 8, !dbg !2619
  %20 = load i32, i32* %depth.addr, align 4, !dbg !2620
  %21 = load i32, i32* %invariants.addr, align 4, !dbg !2621
  %22 = load i8, i8* %start.addr, align 1, !dbg !2622
  call void @print_lambda_linear_expression(%struct._IO_FILE* %18, %struct.lambda_linear_expression_s* %19, i32 %20, i32 %21, i8 signext %22), !dbg !2623
  br label %for.inc, !dbg !2623

for.inc:                                          ; preds = %for.body
  %23 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expr, align 8, !dbg !2624
  %next = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %23, i32 0, i32 4, !dbg !2624
  %24 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %next, align 8, !dbg !2624
  store %struct.lambda_linear_expression_s* %24, %struct.lambda_linear_expression_s** %expr, align 8, !dbg !2625
  br label %for.cond, !dbg !2626, !llvm.loop !2627

for.end:                                          ; preds = %for.cond
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2629
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0)), !dbg !2630
  %26 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop.addr, align 8, !dbg !2631
  %upper_bound = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %26, i32 0, i32 1, !dbg !2631
  %27 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %upper_bound, align 8, !dbg !2631
  store %struct.lambda_linear_expression_s* %27, %struct.lambda_linear_expression_s** %expr, align 8, !dbg !2633
  br label %for.cond6, !dbg !2634

for.cond6:                                        ; preds = %for.inc9, %for.end
  %28 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expr, align 8, !dbg !2635
  %cmp7 = icmp ne %struct.lambda_linear_expression_s* %28, null, !dbg !2637
  br i1 %cmp7, label %for.body8, label %for.end11, !dbg !2638

for.body8:                                        ; preds = %for.cond6
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2639
  %30 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expr, align 8, !dbg !2640
  %31 = load i32, i32* %depth.addr, align 4, !dbg !2641
  %32 = load i32, i32* %invariants.addr, align 4, !dbg !2642
  %33 = load i8, i8* %start.addr, align 1, !dbg !2643
  call void @print_lambda_linear_expression(%struct._IO_FILE* %29, %struct.lambda_linear_expression_s* %30, i32 %31, i32 %32, i8 signext %33), !dbg !2644
  br label %for.inc9, !dbg !2644

for.inc9:                                         ; preds = %for.body8
  %34 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expr, align 8, !dbg !2645
  %next10 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %34, i32 0, i32 4, !dbg !2645
  %35 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %next10, align 8, !dbg !2645
  store %struct.lambda_linear_expression_s* %35, %struct.lambda_linear_expression_s** %expr, align 8, !dbg !2646
  br label %for.cond6, !dbg !2647, !llvm.loop !2648

for.end11:                                        ; preds = %for.cond6
  ret void, !dbg !2650
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.lambda_loopnest_s* @lambda_loopnest_new(i32 %depth, i32 %invariants, %struct.obstack* %lambda_obstack) #0 !dbg !2651 {
entry:
  %depth.addr = alloca i32, align 4
  %invariants.addr = alloca i32, align 4
  %lambda_obstack.addr = alloca %struct.obstack*, align 8
  %ret = alloca %struct.lambda_loopnest_s*, align 8
  store i32 %depth, i32* %depth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %depth.addr, metadata !2654, metadata !DIExpression()), !dbg !2655
  store i32 %invariants, i32* %invariants.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %invariants.addr, metadata !2656, metadata !DIExpression()), !dbg !2657
  store %struct.obstack* %lambda_obstack, %struct.obstack** %lambda_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %lambda_obstack.addr, metadata !2658, metadata !DIExpression()), !dbg !2659
  call void @llvm.dbg.declare(metadata %struct.lambda_loopnest_s** %ret, metadata !2660, metadata !DIExpression()), !dbg !2661
  %0 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %temp = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 5, !dbg !2662
  store i64 16, i64* %temp, align 8, !dbg !2662
  %1 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 4, !dbg !2662
  %2 = load i8*, i8** %chunk_limit, align 8, !dbg !2662
  %3 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 3, !dbg !2662
  %4 = load i8*, i8** %next_free, align 8, !dbg !2662
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64, !dbg !2662
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64, !dbg !2662
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !2662
  %5 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %temp1 = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i32 0, i32 5, !dbg !2662
  %6 = load i64, i64* %temp1, align 8, !dbg !2662
  %cmp = icmp slt i64 %sub.ptr.sub, %6, !dbg !2662
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2662

cond.true:                                        ; preds = %entry
  %7 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %8 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %temp2 = getelementptr inbounds %struct.obstack, %struct.obstack* %8, i32 0, i32 5, !dbg !2662
  %9 = load i64, i64* %temp2, align 8, !dbg !2662
  %conv = trunc i64 %9 to i32, !dbg !2662
  call void @_obstack_newchunk(%struct.obstack* %7, i32 %conv), !dbg !2662
  br label %cond.end, !dbg !2662

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2662

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2662
  %10 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %temp3 = getelementptr inbounds %struct.obstack, %struct.obstack* %10, i32 0, i32 5, !dbg !2662
  %11 = load i64, i64* %temp3, align 8, !dbg !2662
  %12 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %next_free4 = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 3, !dbg !2662
  %13 = load i8*, i8** %next_free4, align 8, !dbg !2662
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %11, !dbg !2662
  store i8* %add.ptr, i8** %next_free4, align 8, !dbg !2662
  %14 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %next_free5 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 3, !dbg !2662
  %15 = load i8*, i8** %next_free5, align 8, !dbg !2662
  %16 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %16, i32 0, i32 2, !dbg !2662
  %17 = load i8*, i8** %object_base, align 8, !dbg !2662
  %cmp6 = icmp eq i8* %15, %17, !dbg !2662
  br i1 %cmp6, label %cond.true8, label %cond.false9, !dbg !2662

cond.true8:                                       ; preds = %cond.end
  %18 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 10, !dbg !2662
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !2662
  %bf.clear = and i8 %bf.load, -3, !dbg !2662
  %bf.set = or i8 %bf.clear, 2, !dbg !2662
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !2662
  br label %cond.end10, !dbg !2662

cond.false9:                                      ; preds = %cond.end
  br label %cond.end10, !dbg !2662

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !2662
  %19 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %object_base12 = getelementptr inbounds %struct.obstack, %struct.obstack* %19, i32 0, i32 2, !dbg !2662
  %20 = load i8*, i8** %object_base12, align 8, !dbg !2662
  %sub.ptr.lhs.cast13 = ptrtoint i8* %20 to i64, !dbg !2662
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast13, 0, !dbg !2662
  %21 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %temp15 = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 5, !dbg !2662
  store i64 %sub.ptr.sub14, i64* %temp15, align 8, !dbg !2662
  %22 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %next_free16 = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 3, !dbg !2662
  %23 = load i8*, i8** %next_free16, align 8, !dbg !2662
  %sub.ptr.lhs.cast17 = ptrtoint i8* %23 to i64, !dbg !2662
  %sub.ptr.sub18 = sub i64 %sub.ptr.lhs.cast17, 0, !dbg !2662
  %24 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 6, !dbg !2662
  %25 = load i32, i32* %alignment_mask, align 8, !dbg !2662
  %conv19 = sext i32 %25 to i64, !dbg !2662
  %add = add nsw i64 %sub.ptr.sub18, %conv19, !dbg !2662
  %26 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %alignment_mask20 = getelementptr inbounds %struct.obstack, %struct.obstack* %26, i32 0, i32 6, !dbg !2662
  %27 = load i32, i32* %alignment_mask20, align 8, !dbg !2662
  %neg = xor i32 %27, -1, !dbg !2662
  %conv21 = sext i32 %neg to i64, !dbg !2662
  %and = and i64 %add, %conv21, !dbg !2662
  %28 = inttoptr i64 %and to i8*, !dbg !2662
  %29 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %next_free22 = getelementptr inbounds %struct.obstack, %struct.obstack* %29, i32 0, i32 3, !dbg !2662
  store i8* %28, i8** %next_free22, align 8, !dbg !2662
  %30 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %next_free23 = getelementptr inbounds %struct.obstack, %struct.obstack* %30, i32 0, i32 3, !dbg !2662
  %31 = load i8*, i8** %next_free23, align 8, !dbg !2662
  %32 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 1, !dbg !2662
  %33 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !2662
  %34 = bitcast %struct._obstack_chunk* %33 to i8*, !dbg !2662
  %sub.ptr.lhs.cast24 = ptrtoint i8* %31 to i64, !dbg !2662
  %sub.ptr.rhs.cast25 = ptrtoint i8* %34 to i64, !dbg !2662
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25, !dbg !2662
  %35 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %chunk_limit27 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 4, !dbg !2662
  %36 = load i8*, i8** %chunk_limit27, align 8, !dbg !2662
  %37 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %chunk28 = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 1, !dbg !2662
  %38 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk28, align 8, !dbg !2662
  %39 = bitcast %struct._obstack_chunk* %38 to i8*, !dbg !2662
  %sub.ptr.lhs.cast29 = ptrtoint i8* %36 to i64, !dbg !2662
  %sub.ptr.rhs.cast30 = ptrtoint i8* %39 to i64, !dbg !2662
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30, !dbg !2662
  %cmp32 = icmp sgt i64 %sub.ptr.sub26, %sub.ptr.sub31, !dbg !2662
  br i1 %cmp32, label %cond.true34, label %cond.false37, !dbg !2662

cond.true34:                                      ; preds = %cond.end10
  %40 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %chunk_limit35 = getelementptr inbounds %struct.obstack, %struct.obstack* %40, i32 0, i32 4, !dbg !2662
  %41 = load i8*, i8** %chunk_limit35, align 8, !dbg !2662
  %42 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %next_free36 = getelementptr inbounds %struct.obstack, %struct.obstack* %42, i32 0, i32 3, !dbg !2662
  store i8* %41, i8** %next_free36, align 8, !dbg !2662
  br label %cond.end38, !dbg !2662

cond.false37:                                     ; preds = %cond.end10
  br label %cond.end38, !dbg !2662

cond.end38:                                       ; preds = %cond.false37, %cond.true34
  %cond39 = phi i8* [ %41, %cond.true34 ], [ null, %cond.false37 ], !dbg !2662
  %43 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %next_free40 = getelementptr inbounds %struct.obstack, %struct.obstack* %43, i32 0, i32 3, !dbg !2662
  %44 = load i8*, i8** %next_free40, align 8, !dbg !2662
  %45 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %object_base41 = getelementptr inbounds %struct.obstack, %struct.obstack* %45, i32 0, i32 2, !dbg !2662
  store i8* %44, i8** %object_base41, align 8, !dbg !2662
  %46 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2662
  %temp42 = getelementptr inbounds %struct.obstack, %struct.obstack* %46, i32 0, i32 5, !dbg !2662
  %47 = load i64, i64* %temp42, align 8, !dbg !2662
  %48 = inttoptr i64 %47 to i8*, !dbg !2662
  %49 = bitcast i8* %48 to %struct.lambda_loopnest_s*, !dbg !2663
  store %struct.lambda_loopnest_s* %49, %struct.lambda_loopnest_s** %ret, align 8, !dbg !2664
  %50 = load i32, i32* %depth.addr, align 4, !dbg !2665
  %conv43 = sext i32 %50 to i64, !dbg !2665
  %mul = mul i64 %conv43, 8, !dbg !2665
  %51 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %temp44 = getelementptr inbounds %struct.obstack, %struct.obstack* %51, i32 0, i32 5, !dbg !2665
  store i64 %mul, i64* %temp44, align 8, !dbg !2665
  %52 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %chunk_limit45 = getelementptr inbounds %struct.obstack, %struct.obstack* %52, i32 0, i32 4, !dbg !2665
  %53 = load i8*, i8** %chunk_limit45, align 8, !dbg !2665
  %54 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %next_free46 = getelementptr inbounds %struct.obstack, %struct.obstack* %54, i32 0, i32 3, !dbg !2665
  %55 = load i8*, i8** %next_free46, align 8, !dbg !2665
  %sub.ptr.lhs.cast47 = ptrtoint i8* %53 to i64, !dbg !2665
  %sub.ptr.rhs.cast48 = ptrtoint i8* %55 to i64, !dbg !2665
  %sub.ptr.sub49 = sub i64 %sub.ptr.lhs.cast47, %sub.ptr.rhs.cast48, !dbg !2665
  %56 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %temp50 = getelementptr inbounds %struct.obstack, %struct.obstack* %56, i32 0, i32 5, !dbg !2665
  %57 = load i64, i64* %temp50, align 8, !dbg !2665
  %cmp51 = icmp slt i64 %sub.ptr.sub49, %57, !dbg !2665
  br i1 %cmp51, label %cond.true53, label %cond.false56, !dbg !2665

cond.true53:                                      ; preds = %cond.end38
  %58 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %59 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %temp54 = getelementptr inbounds %struct.obstack, %struct.obstack* %59, i32 0, i32 5, !dbg !2665
  %60 = load i64, i64* %temp54, align 8, !dbg !2665
  %conv55 = trunc i64 %60 to i32, !dbg !2665
  call void @_obstack_newchunk(%struct.obstack* %58, i32 %conv55), !dbg !2665
  br label %cond.end57, !dbg !2665

cond.false56:                                     ; preds = %cond.end38
  br label %cond.end57, !dbg !2665

cond.end57:                                       ; preds = %cond.false56, %cond.true53
  %cond58 = phi i32 [ 0, %cond.true53 ], [ 0, %cond.false56 ], !dbg !2665
  %61 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %temp59 = getelementptr inbounds %struct.obstack, %struct.obstack* %61, i32 0, i32 5, !dbg !2665
  %62 = load i64, i64* %temp59, align 8, !dbg !2665
  %63 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %next_free60 = getelementptr inbounds %struct.obstack, %struct.obstack* %63, i32 0, i32 3, !dbg !2665
  %64 = load i8*, i8** %next_free60, align 8, !dbg !2665
  %add.ptr61 = getelementptr inbounds i8, i8* %64, i64 %62, !dbg !2665
  store i8* %add.ptr61, i8** %next_free60, align 8, !dbg !2665
  %65 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %next_free62 = getelementptr inbounds %struct.obstack, %struct.obstack* %65, i32 0, i32 3, !dbg !2665
  %66 = load i8*, i8** %next_free62, align 8, !dbg !2665
  %67 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %object_base63 = getelementptr inbounds %struct.obstack, %struct.obstack* %67, i32 0, i32 2, !dbg !2665
  %68 = load i8*, i8** %object_base63, align 8, !dbg !2665
  %cmp64 = icmp eq i8* %66, %68, !dbg !2665
  br i1 %cmp64, label %cond.true66, label %cond.false71, !dbg !2665

cond.true66:                                      ; preds = %cond.end57
  %69 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %maybe_empty_object67 = getelementptr inbounds %struct.obstack, %struct.obstack* %69, i32 0, i32 10, !dbg !2665
  %bf.load68 = load i8, i8* %maybe_empty_object67, align 8, !dbg !2665
  %bf.clear69 = and i8 %bf.load68, -3, !dbg !2665
  %bf.set70 = or i8 %bf.clear69, 2, !dbg !2665
  store i8 %bf.set70, i8* %maybe_empty_object67, align 8, !dbg !2665
  br label %cond.end72, !dbg !2665

cond.false71:                                     ; preds = %cond.end57
  br label %cond.end72, !dbg !2665

cond.end72:                                       ; preds = %cond.false71, %cond.true66
  %cond73 = phi i32 [ 0, %cond.true66 ], [ 0, %cond.false71 ], !dbg !2665
  %70 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %object_base74 = getelementptr inbounds %struct.obstack, %struct.obstack* %70, i32 0, i32 2, !dbg !2665
  %71 = load i8*, i8** %object_base74, align 8, !dbg !2665
  %sub.ptr.lhs.cast75 = ptrtoint i8* %71 to i64, !dbg !2665
  %sub.ptr.sub76 = sub i64 %sub.ptr.lhs.cast75, 0, !dbg !2665
  %72 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %temp77 = getelementptr inbounds %struct.obstack, %struct.obstack* %72, i32 0, i32 5, !dbg !2665
  store i64 %sub.ptr.sub76, i64* %temp77, align 8, !dbg !2665
  %73 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %next_free78 = getelementptr inbounds %struct.obstack, %struct.obstack* %73, i32 0, i32 3, !dbg !2665
  %74 = load i8*, i8** %next_free78, align 8, !dbg !2665
  %sub.ptr.lhs.cast79 = ptrtoint i8* %74 to i64, !dbg !2665
  %sub.ptr.sub80 = sub i64 %sub.ptr.lhs.cast79, 0, !dbg !2665
  %75 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %alignment_mask81 = getelementptr inbounds %struct.obstack, %struct.obstack* %75, i32 0, i32 6, !dbg !2665
  %76 = load i32, i32* %alignment_mask81, align 8, !dbg !2665
  %conv82 = sext i32 %76 to i64, !dbg !2665
  %add83 = add nsw i64 %sub.ptr.sub80, %conv82, !dbg !2665
  %77 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %alignment_mask84 = getelementptr inbounds %struct.obstack, %struct.obstack* %77, i32 0, i32 6, !dbg !2665
  %78 = load i32, i32* %alignment_mask84, align 8, !dbg !2665
  %neg85 = xor i32 %78, -1, !dbg !2665
  %conv86 = sext i32 %neg85 to i64, !dbg !2665
  %and87 = and i64 %add83, %conv86, !dbg !2665
  %79 = inttoptr i64 %and87 to i8*, !dbg !2665
  %80 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %next_free88 = getelementptr inbounds %struct.obstack, %struct.obstack* %80, i32 0, i32 3, !dbg !2665
  store i8* %79, i8** %next_free88, align 8, !dbg !2665
  %81 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %next_free89 = getelementptr inbounds %struct.obstack, %struct.obstack* %81, i32 0, i32 3, !dbg !2665
  %82 = load i8*, i8** %next_free89, align 8, !dbg !2665
  %83 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %chunk90 = getelementptr inbounds %struct.obstack, %struct.obstack* %83, i32 0, i32 1, !dbg !2665
  %84 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk90, align 8, !dbg !2665
  %85 = bitcast %struct._obstack_chunk* %84 to i8*, !dbg !2665
  %sub.ptr.lhs.cast91 = ptrtoint i8* %82 to i64, !dbg !2665
  %sub.ptr.rhs.cast92 = ptrtoint i8* %85 to i64, !dbg !2665
  %sub.ptr.sub93 = sub i64 %sub.ptr.lhs.cast91, %sub.ptr.rhs.cast92, !dbg !2665
  %86 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %chunk_limit94 = getelementptr inbounds %struct.obstack, %struct.obstack* %86, i32 0, i32 4, !dbg !2665
  %87 = load i8*, i8** %chunk_limit94, align 8, !dbg !2665
  %88 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %chunk95 = getelementptr inbounds %struct.obstack, %struct.obstack* %88, i32 0, i32 1, !dbg !2665
  %89 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk95, align 8, !dbg !2665
  %90 = bitcast %struct._obstack_chunk* %89 to i8*, !dbg !2665
  %sub.ptr.lhs.cast96 = ptrtoint i8* %87 to i64, !dbg !2665
  %sub.ptr.rhs.cast97 = ptrtoint i8* %90 to i64, !dbg !2665
  %sub.ptr.sub98 = sub i64 %sub.ptr.lhs.cast96, %sub.ptr.rhs.cast97, !dbg !2665
  %cmp99 = icmp sgt i64 %sub.ptr.sub93, %sub.ptr.sub98, !dbg !2665
  br i1 %cmp99, label %cond.true101, label %cond.false104, !dbg !2665

cond.true101:                                     ; preds = %cond.end72
  %91 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %chunk_limit102 = getelementptr inbounds %struct.obstack, %struct.obstack* %91, i32 0, i32 4, !dbg !2665
  %92 = load i8*, i8** %chunk_limit102, align 8, !dbg !2665
  %93 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %next_free103 = getelementptr inbounds %struct.obstack, %struct.obstack* %93, i32 0, i32 3, !dbg !2665
  store i8* %92, i8** %next_free103, align 8, !dbg !2665
  br label %cond.end105, !dbg !2665

cond.false104:                                    ; preds = %cond.end72
  br label %cond.end105, !dbg !2665

cond.end105:                                      ; preds = %cond.false104, %cond.true101
  %cond106 = phi i8* [ %92, %cond.true101 ], [ null, %cond.false104 ], !dbg !2665
  %94 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %next_free107 = getelementptr inbounds %struct.obstack, %struct.obstack* %94, i32 0, i32 3, !dbg !2665
  %95 = load i8*, i8** %next_free107, align 8, !dbg !2665
  %96 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %object_base108 = getelementptr inbounds %struct.obstack, %struct.obstack* %96, i32 0, i32 2, !dbg !2665
  store i8* %95, i8** %object_base108, align 8, !dbg !2665
  %97 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2665
  %temp109 = getelementptr inbounds %struct.obstack, %struct.obstack* %97, i32 0, i32 5, !dbg !2665
  %98 = load i64, i64* %temp109, align 8, !dbg !2665
  %99 = inttoptr i64 %98 to i8*, !dbg !2665
  %100 = bitcast i8* %99 to %struct.lambda_loop_s**, !dbg !2666
  %101 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %ret, align 8, !dbg !2667
  %loops = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %101, i32 0, i32 0, !dbg !2667
  store %struct.lambda_loop_s** %100, %struct.lambda_loop_s*** %loops, align 8, !dbg !2668
  %102 = load i32, i32* %depth.addr, align 4, !dbg !2669
  %103 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %ret, align 8, !dbg !2670
  %depth110 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %103, i32 0, i32 1, !dbg !2670
  store i32 %102, i32* %depth110, align 8, !dbg !2671
  %104 = load i32, i32* %invariants.addr, align 4, !dbg !2672
  %105 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %ret, align 8, !dbg !2673
  %invariants111 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %105, i32 0, i32 2, !dbg !2673
  store i32 %104, i32* %invariants111, align 4, !dbg !2674
  %106 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %ret, align 8, !dbg !2675
  ret %struct.lambda_loopnest_s* %106, !dbg !2676
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_lambda_loopnest(%struct._IO_FILE* %outfile, %struct.lambda_loopnest_s* %nest, i8 signext %start) #0 !dbg !2677 {
entry:
  %outfile.addr = alloca %struct._IO_FILE*, align 8
  %nest.addr = alloca %struct.lambda_loopnest_s*, align 8
  %start.addr = alloca i8, align 1
  %i = alloca i32, align 4
  store %struct._IO_FILE* %outfile, %struct._IO_FILE** %outfile.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outfile.addr, metadata !2680, metadata !DIExpression()), !dbg !2681
  store %struct.lambda_loopnest_s* %nest, %struct.lambda_loopnest_s** %nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_loopnest_s** %nest.addr, metadata !2682, metadata !DIExpression()), !dbg !2683
  store i8 %start, i8* %start.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %start.addr, metadata !2684, metadata !DIExpression()), !dbg !2685
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2686, metadata !DIExpression()), !dbg !2687
  store i32 0, i32* %i, align 4, !dbg !2688
  br label %for.cond, !dbg !2690

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2691
  %1 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !2693
  %depth = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %1, i32 0, i32 1, !dbg !2693
  %2 = load i32, i32* %depth, align 8, !dbg !2693
  %cmp = icmp slt i32 %0, %2, !dbg !2694
  br i1 %cmp, label %for.body, label %for.end, !dbg !2695

for.body:                                         ; preds = %for.cond
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2696
  %4 = load i8, i8* %start.addr, align 1, !dbg !2698
  %conv = sext i8 %4 to i32, !dbg !2698
  %5 = load i32, i32* %i, align 4, !dbg !2699
  %add = add nsw i32 %conv, %5, !dbg !2700
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0), i32 %add), !dbg !2701
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2702
  %7 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !2703
  %loops = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %7, i32 0, i32 0, !dbg !2703
  %8 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %loops, align 8, !dbg !2703
  %9 = load i32, i32* %i, align 4, !dbg !2704
  %idxprom = sext i32 %9 to i64, !dbg !2703
  %arrayidx = getelementptr inbounds %struct.lambda_loop_s*, %struct.lambda_loop_s** %8, i64 %idxprom, !dbg !2703
  %10 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %arrayidx, align 8, !dbg !2703
  %11 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !2705
  %depth1 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %11, i32 0, i32 1, !dbg !2705
  %12 = load i32, i32* %depth1, align 8, !dbg !2705
  %13 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !2706
  %invariants = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %13, i32 0, i32 2, !dbg !2706
  %14 = load i32, i32* %invariants, align 4, !dbg !2706
  call void @print_lambda_loop(%struct._IO_FILE* %6, %struct.lambda_loop_s* %10, i32 %12, i32 %14, i8 signext 105), !dbg !2707
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2708
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0)), !dbg !2709
  br label %for.inc, !dbg !2710

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4, !dbg !2711
  %inc = add nsw i32 %16, 1, !dbg !2711
  store i32 %inc, i32* %i, align 4, !dbg !2711
  br label %for.cond, !dbg !2712, !llvm.loop !2713

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2715
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @least_common_multiple(i32 %a, i32 %b) #0 !dbg !2716 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !2719, metadata !DIExpression()), !dbg !2720
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !2721, metadata !DIExpression()), !dbg !2722
  %0 = load i32, i32* %a.addr, align 4, !dbg !2723
  %call = call i32 @abs(i32 %0) #5, !dbg !2724
  %1 = load i32, i32* %b.addr, align 4, !dbg !2725
  %call1 = call i32 @abs(i32 %1) #5, !dbg !2726
  %mul = mul nsw i32 %call, %call1, !dbg !2727
  %2 = load i32, i32* %a.addr, align 4, !dbg !2728
  %3 = load i32, i32* %b.addr, align 4, !dbg !2729
  %call2 = call i32 @gcd(i32 %2, i32 %3), !dbg !2730
  %div = sdiv i32 %mul, %call2, !dbg !2731
  ret i32 %div, !dbg !2732
}

; Function Attrs: nounwind readnone
declare dso_local i32 @abs(i32) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gcd(i32 %a, i32 %b) #0 !dbg !2733 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %z = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !2734, metadata !DIExpression()), !dbg !2735
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !2736, metadata !DIExpression()), !dbg !2737
  call void @llvm.dbg.declare(metadata i32* %x, metadata !2738, metadata !DIExpression()), !dbg !2739
  call void @llvm.dbg.declare(metadata i32* %y, metadata !2740, metadata !DIExpression()), !dbg !2741
  call void @llvm.dbg.declare(metadata i32* %z, metadata !2742, metadata !DIExpression()), !dbg !2743
  %0 = load i32, i32* %a.addr, align 4, !dbg !2744
  %call = call i32 @abs(i32 %0) #5, !dbg !2745
  store i32 %call, i32* %x, align 4, !dbg !2746
  %1 = load i32, i32* %b.addr, align 4, !dbg !2747
  %call1 = call i32 @abs(i32 %1) #5, !dbg !2748
  store i32 %call1, i32* %y, align 4, !dbg !2749
  br label %while.cond, !dbg !2750

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %x, align 4, !dbg !2751
  %cmp = icmp sgt i32 %2, 0, !dbg !2752
  br i1 %cmp, label %while.body, label %while.end, !dbg !2750

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %y, align 4, !dbg !2753
  %4 = load i32, i32* %x, align 4, !dbg !2755
  %rem = srem i32 %3, %4, !dbg !2756
  store i32 %rem, i32* %z, align 4, !dbg !2757
  %5 = load i32, i32* %x, align 4, !dbg !2758
  store i32 %5, i32* %y, align 4, !dbg !2759
  %6 = load i32, i32* %z, align 4, !dbg !2760
  store i32 %6, i32* %x, align 4, !dbg !2761
  br label %while.cond, !dbg !2750, !llvm.loop !2762

while.end:                                        ; preds = %while.cond
  %7 = load i32, i32* %y, align 4, !dbg !2764
  ret i32 %7, !dbg !2765
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.lambda_loopnest_s* @lambda_loopnest_transform(%struct.lambda_loopnest_s* %nest, %struct.lambda_trans_matrix_s* %trans, %struct.obstack* %lambda_obstack) #0 !dbg !2766 {
entry:
  %nest.addr = alloca %struct.lambda_loopnest_s*, align 8
  %trans.addr = alloca %struct.lambda_trans_matrix_s*, align 8
  %lambda_obstack.addr = alloca %struct.obstack*, align 8
  %auxillary_nest = alloca %struct.lambda_loopnest_s*, align 8
  %target_nest = alloca %struct.lambda_loopnest_s*, align 8
  %depth = alloca i32, align 4
  %invariants = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %lattice = alloca %struct.lambda_lattice_s*, align 8
  %trans1 = alloca %struct.lambda_trans_matrix_s*, align 8
  %H = alloca %struct.lambda_trans_matrix_s*, align 8
  %U = alloca %struct.lambda_trans_matrix_s*, align 8
  %loop = alloca %struct.lambda_loop_s*, align 8
  %expression = alloca %struct.lambda_linear_expression_s*, align 8
  %origin = alloca i32*, align 8
  %origin_invariants = alloca i32**, align 8
  %stepsigns = alloca i32*, align 8
  %f = alloca i32, align 4
  store %struct.lambda_loopnest_s* %nest, %struct.lambda_loopnest_s** %nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_loopnest_s** %nest.addr, metadata !2769, metadata !DIExpression()), !dbg !2770
  store %struct.lambda_trans_matrix_s* %trans, %struct.lambda_trans_matrix_s** %trans.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_trans_matrix_s** %trans.addr, metadata !2771, metadata !DIExpression()), !dbg !2772
  store %struct.obstack* %lambda_obstack, %struct.obstack** %lambda_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %lambda_obstack.addr, metadata !2773, metadata !DIExpression()), !dbg !2774
  call void @llvm.dbg.declare(metadata %struct.lambda_loopnest_s** %auxillary_nest, metadata !2775, metadata !DIExpression()), !dbg !2776
  call void @llvm.dbg.declare(metadata %struct.lambda_loopnest_s** %target_nest, metadata !2777, metadata !DIExpression()), !dbg !2778
  call void @llvm.dbg.declare(metadata i32* %depth, metadata !2779, metadata !DIExpression()), !dbg !2780
  call void @llvm.dbg.declare(metadata i32* %invariants, metadata !2781, metadata !DIExpression()), !dbg !2782
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2783, metadata !DIExpression()), !dbg !2784
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2785, metadata !DIExpression()), !dbg !2786
  call void @llvm.dbg.declare(metadata %struct.lambda_lattice_s** %lattice, metadata !2787, metadata !DIExpression()), !dbg !2788
  call void @llvm.dbg.declare(metadata %struct.lambda_trans_matrix_s** %trans1, metadata !2789, metadata !DIExpression()), !dbg !2790
  call void @llvm.dbg.declare(metadata %struct.lambda_trans_matrix_s** %H, metadata !2791, metadata !DIExpression()), !dbg !2792
  call void @llvm.dbg.declare(metadata %struct.lambda_trans_matrix_s** %U, metadata !2793, metadata !DIExpression()), !dbg !2794
  call void @llvm.dbg.declare(metadata %struct.lambda_loop_s** %loop, metadata !2795, metadata !DIExpression()), !dbg !2796
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %expression, metadata !2797, metadata !DIExpression()), !dbg !2798
  call void @llvm.dbg.declare(metadata i32** %origin, metadata !2799, metadata !DIExpression()), !dbg !2800
  call void @llvm.dbg.declare(metadata i32*** %origin_invariants, metadata !2801, metadata !DIExpression()), !dbg !2802
  call void @llvm.dbg.declare(metadata i32** %stepsigns, metadata !2803, metadata !DIExpression()), !dbg !2804
  call void @llvm.dbg.declare(metadata i32* %f, metadata !2805, metadata !DIExpression()), !dbg !2806
  %0 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !2807
  %depth1 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %0, i32 0, i32 1, !dbg !2807
  %1 = load i32, i32* %depth1, align 8, !dbg !2807
  store i32 %1, i32* %depth, align 4, !dbg !2808
  %2 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !2809
  %invariants2 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %2, i32 0, i32 2, !dbg !2809
  %3 = load i32, i32* %invariants2, align 4, !dbg !2809
  store i32 %3, i32* %invariants, align 4, !dbg !2810
  %4 = load i32, i32* %depth, align 4, !dbg !2811
  %call = call i32* @lambda_vector_new(i32 %4), !dbg !2812
  store i32* %call, i32** %stepsigns, align 8, !dbg !2813
  store i32 0, i32* %i, align 4, !dbg !2814
  br label %for.cond, !dbg !2816

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4, !dbg !2817
  %6 = load i32, i32* %depth, align 4, !dbg !2819
  %cmp = icmp slt i32 %5, %6, !dbg !2820
  br i1 %cmp, label %for.body, label %for.end, !dbg !2821

for.body:                                         ; preds = %for.cond
  %7 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !2822
  %loops = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %7, i32 0, i32 0, !dbg !2822
  %8 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %loops, align 8, !dbg !2822
  %9 = load i32, i32* %i, align 4, !dbg !2822
  %idxprom = sext i32 %9 to i64, !dbg !2822
  %arrayidx = getelementptr inbounds %struct.lambda_loop_s*, %struct.lambda_loop_s** %8, i64 %idxprom, !dbg !2822
  %10 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %arrayidx, align 8, !dbg !2822
  %step = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %10, i32 0, i32 3, !dbg !2822
  %11 = load i32, i32* %step, align 8, !dbg !2822
  %cmp3 = icmp sgt i32 %11, 0, !dbg !2825
  br i1 %cmp3, label %if.then, label %if.else, !dbg !2826

if.then:                                          ; preds = %for.body
  %12 = load i32*, i32** %stepsigns, align 8, !dbg !2827
  %13 = load i32, i32* %i, align 4, !dbg !2828
  %idxprom4 = sext i32 %13 to i64, !dbg !2827
  %arrayidx5 = getelementptr inbounds i32, i32* %12, i64 %idxprom4, !dbg !2827
  store i32 1, i32* %arrayidx5, align 4, !dbg !2829
  br label %if.end, !dbg !2827

if.else:                                          ; preds = %for.body
  %14 = load i32*, i32** %stepsigns, align 8, !dbg !2830
  %15 = load i32, i32* %i, align 4, !dbg !2831
  %idxprom6 = sext i32 %15 to i64, !dbg !2830
  %arrayidx7 = getelementptr inbounds i32, i32* %14, i64 %idxprom6, !dbg !2830
  store i32 -1, i32* %arrayidx7, align 4, !dbg !2832
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !2833

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %i, align 4, !dbg !2834
  %inc = add nsw i32 %16, 1, !dbg !2834
  store i32 %inc, i32* %i, align 4, !dbg !2834
  br label %for.cond, !dbg !2835, !llvm.loop !2836

for.end:                                          ; preds = %for.cond
  %17 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !2838
  %18 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2839
  %call8 = call %struct.lambda_lattice_s* @lambda_lattice_compute_base(%struct.lambda_loopnest_s* %17, %struct.obstack* %18), !dbg !2840
  store %struct.lambda_lattice_s* %call8, %struct.lambda_lattice_s** %lattice, align 8, !dbg !2841
  %19 = load i32, i32* %depth, align 4, !dbg !2842
  %20 = load i32, i32* %depth, align 4, !dbg !2843
  %call9 = call %struct.lambda_trans_matrix_s* @lambda_trans_matrix_new(i32 %19, i32 %20), !dbg !2844
  store %struct.lambda_trans_matrix_s* %call9, %struct.lambda_trans_matrix_s** %trans1, align 8, !dbg !2845
  %21 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %trans.addr, align 8, !dbg !2846
  %matrix = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %21, i32 0, i32 0, !dbg !2846
  %22 = load i32**, i32*** %matrix, align 8, !dbg !2846
  %23 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %lattice, align 8, !dbg !2847
  %base = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %23, i32 0, i32 0, !dbg !2847
  %24 = load i32**, i32*** %base, align 8, !dbg !2847
  %25 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %trans1, align 8, !dbg !2848
  %matrix10 = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %25, i32 0, i32 0, !dbg !2848
  %26 = load i32**, i32*** %matrix10, align 8, !dbg !2848
  %27 = load i32, i32* %depth, align 4, !dbg !2849
  %28 = load i32, i32* %depth, align 4, !dbg !2850
  %29 = load i32, i32* %depth, align 4, !dbg !2851
  call void @lambda_matrix_mult(i32** %22, i32** %24, i32** %26, i32 %27, i32 %28, i32 %29), !dbg !2852
  %30 = load i32, i32* %depth, align 4, !dbg !2853
  %31 = load i32, i32* %depth, align 4, !dbg !2854
  %call11 = call %struct.lambda_trans_matrix_s* @lambda_trans_matrix_new(i32 %30, i32 %31), !dbg !2855
  store %struct.lambda_trans_matrix_s* %call11, %struct.lambda_trans_matrix_s** %H, align 8, !dbg !2856
  %32 = load i32, i32* %depth, align 4, !dbg !2857
  %33 = load i32, i32* %depth, align 4, !dbg !2858
  %call12 = call %struct.lambda_trans_matrix_s* @lambda_trans_matrix_new(i32 %32, i32 %33), !dbg !2859
  store %struct.lambda_trans_matrix_s* %call12, %struct.lambda_trans_matrix_s** %U, align 8, !dbg !2860
  %34 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %trans1, align 8, !dbg !2861
  %matrix13 = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %34, i32 0, i32 0, !dbg !2861
  %35 = load i32**, i32*** %matrix13, align 8, !dbg !2861
  %36 = load i32, i32* %depth, align 4, !dbg !2862
  %37 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %H, align 8, !dbg !2863
  %matrix14 = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %37, i32 0, i32 0, !dbg !2863
  %38 = load i32**, i32*** %matrix14, align 8, !dbg !2863
  %39 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %U, align 8, !dbg !2864
  %matrix15 = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %39, i32 0, i32 0, !dbg !2864
  %40 = load i32**, i32*** %matrix15, align 8, !dbg !2864
  call void @lambda_matrix_hermite(i32** %35, i32 %36, i32** %38, i32** %40), !dbg !2865
  %41 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !2866
  %42 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %U, align 8, !dbg !2867
  %43 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2868
  %call16 = call %struct.lambda_loopnest_s* @lambda_compute_auxillary_space(%struct.lambda_loopnest_s* %41, %struct.lambda_trans_matrix_s* %42, %struct.obstack* %43), !dbg !2869
  store %struct.lambda_loopnest_s* %call16, %struct.lambda_loopnest_s** %auxillary_nest, align 8, !dbg !2870
  %44 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %trans1, align 8, !dbg !2871
  %45 = load i32*, i32** %stepsigns, align 8, !dbg !2872
  %call17 = call i32* @lambda_compute_step_signs(%struct.lambda_trans_matrix_s* %44, i32* %45), !dbg !2873
  store i32* %call17, i32** %stepsigns, align 8, !dbg !2874
  %46 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %auxillary_nest, align 8, !dbg !2875
  %47 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %H, align 8, !dbg !2876
  %48 = load i32*, i32** %stepsigns, align 8, !dbg !2877
  %49 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2878
  %call18 = call %struct.lambda_loopnest_s* @lambda_compute_target_space(%struct.lambda_loopnest_s* %46, %struct.lambda_trans_matrix_s* %47, i32* %48, %struct.obstack* %49), !dbg !2879
  store %struct.lambda_loopnest_s* %call18, %struct.lambda_loopnest_s** %target_nest, align 8, !dbg !2880
  %50 = load i32, i32* %depth, align 4, !dbg !2881
  %call19 = call i32* @lambda_vector_new(i32 %50), !dbg !2882
  store i32* %call19, i32** %origin, align 8, !dbg !2883
  %51 = load i32, i32* %depth, align 4, !dbg !2884
  %52 = load i32, i32* %invariants, align 4, !dbg !2885
  %call20 = call i32** @lambda_matrix_new(i32 %51, i32 %52), !dbg !2886
  store i32** %call20, i32*** %origin_invariants, align 8, !dbg !2887
  %53 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %trans.addr, align 8, !dbg !2888
  %matrix21 = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %53, i32 0, i32 0, !dbg !2888
  %54 = load i32**, i32*** %matrix21, align 8, !dbg !2888
  %55 = load i32, i32* %depth, align 4, !dbg !2889
  %56 = load i32, i32* %depth, align 4, !dbg !2890
  %57 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %lattice, align 8, !dbg !2891
  %origin22 = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %57, i32 0, i32 2, !dbg !2891
  %58 = load i32*, i32** %origin22, align 8, !dbg !2891
  %59 = load i32*, i32** %origin, align 8, !dbg !2892
  call void @lambda_matrix_vector_mult(i32** %54, i32 %55, i32 %56, i32* %58, i32* %59), !dbg !2893
  %60 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %trans.addr, align 8, !dbg !2894
  %matrix23 = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %60, i32 0, i32 0, !dbg !2894
  %61 = load i32**, i32*** %matrix23, align 8, !dbg !2894
  %62 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %lattice, align 8, !dbg !2895
  %origin_invariants24 = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %62, i32 0, i32 3, !dbg !2895
  %63 = load i32**, i32*** %origin_invariants24, align 8, !dbg !2895
  %64 = load i32**, i32*** %origin_invariants, align 8, !dbg !2896
  %65 = load i32, i32* %depth, align 4, !dbg !2897
  %66 = load i32, i32* %depth, align 4, !dbg !2898
  %67 = load i32, i32* %invariants, align 4, !dbg !2899
  call void @lambda_matrix_mult(i32** %61, i32** %63, i32** %64, i32 %65, i32 %66, i32 %67), !dbg !2900
  store i32 0, i32* %i, align 4, !dbg !2901
  br label %for.cond25, !dbg !2903

for.cond25:                                       ; preds = %for.inc51, %for.end
  %68 = load i32, i32* %i, align 4, !dbg !2904
  %69 = load i32, i32* %depth, align 4, !dbg !2906
  %cmp26 = icmp slt i32 %68, %69, !dbg !2907
  br i1 %cmp26, label %for.body27, label %for.end53, !dbg !2908

for.body27:                                       ; preds = %for.cond25
  %70 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %target_nest, align 8, !dbg !2909
  %loops28 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %70, i32 0, i32 0, !dbg !2909
  %71 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %loops28, align 8, !dbg !2909
  %72 = load i32, i32* %i, align 4, !dbg !2911
  %idxprom29 = sext i32 %72 to i64, !dbg !2909
  %arrayidx30 = getelementptr inbounds %struct.lambda_loop_s*, %struct.lambda_loop_s** %71, i64 %idxprom29, !dbg !2909
  %73 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %arrayidx30, align 8, !dbg !2909
  store %struct.lambda_loop_s* %73, %struct.lambda_loop_s** %loop, align 8, !dbg !2912
  %74 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !2913
  %linear_offset = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %74, i32 0, i32 2, !dbg !2913
  %75 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %linear_offset, align 8, !dbg !2913
  store %struct.lambda_linear_expression_s* %75, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !2914
  %76 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !2915
  %coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %76, i32 0, i32 0, !dbg !2915
  %77 = load i32*, i32** %coefficients, align 8, !dbg !2915
  %78 = load i32, i32* %depth, align 4, !dbg !2917
  %call31 = call zeroext i8 @lambda_vector_zerop(i32* %77, i32 %78), !dbg !2918
  %tobool = icmp ne i8 %call31, 0, !dbg !2918
  br i1 %tobool, label %if.then32, label %if.else33, !dbg !2919

if.then32:                                        ; preds = %for.body27
  store i32 1, i32* %f, align 4, !dbg !2920
  br label %if.end34, !dbg !2921

if.else33:                                        ; preds = %for.body27
  %79 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !2922
  %denominator = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %79, i32 0, i32 3, !dbg !2922
  %80 = load i32, i32* %denominator, align 8, !dbg !2922
  store i32 %80, i32* %f, align 4, !dbg !2923
  br label %if.end34

if.end34:                                         ; preds = %if.else33, %if.then32
  %81 = load i32, i32* %f, align 4, !dbg !2924
  %82 = load i32*, i32** %origin, align 8, !dbg !2925
  %83 = load i32, i32* %i, align 4, !dbg !2926
  %idxprom35 = sext i32 %83 to i64, !dbg !2925
  %arrayidx36 = getelementptr inbounds i32, i32* %82, i64 %idxprom35, !dbg !2925
  %84 = load i32, i32* %arrayidx36, align 4, !dbg !2925
  %mul = mul nsw i32 %81, %84, !dbg !2927
  %85 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !2928
  %constant = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %85, i32 0, i32 1, !dbg !2928
  %86 = load i32, i32* %constant, align 8, !dbg !2929
  %add = add nsw i32 %86, %mul, !dbg !2929
  store i32 %add, i32* %constant, align 8, !dbg !2929
  store i32 0, i32* %j, align 4, !dbg !2930
  br label %for.cond37, !dbg !2932

for.cond37:                                       ; preds = %for.inc48, %if.end34
  %87 = load i32, i32* %j, align 4, !dbg !2933
  %88 = load i32, i32* %invariants, align 4, !dbg !2935
  %cmp38 = icmp slt i32 %87, %88, !dbg !2936
  br i1 %cmp38, label %for.body39, label %for.end50, !dbg !2937

for.body39:                                       ; preds = %for.cond37
  %89 = load i32, i32* %f, align 4, !dbg !2938
  %90 = load i32**, i32*** %origin_invariants, align 8, !dbg !2939
  %91 = load i32, i32* %i, align 4, !dbg !2940
  %idxprom40 = sext i32 %91 to i64, !dbg !2939
  %arrayidx41 = getelementptr inbounds i32*, i32** %90, i64 %idxprom40, !dbg !2939
  %92 = load i32*, i32** %arrayidx41, align 8, !dbg !2939
  %93 = load i32, i32* %j, align 4, !dbg !2941
  %idxprom42 = sext i32 %93 to i64, !dbg !2939
  %arrayidx43 = getelementptr inbounds i32, i32* %92, i64 %idxprom42, !dbg !2939
  %94 = load i32, i32* %arrayidx43, align 4, !dbg !2939
  %mul44 = mul nsw i32 %89, %94, !dbg !2942
  %95 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !2943
  %invariant_coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %95, i32 0, i32 2, !dbg !2943
  %96 = load i32*, i32** %invariant_coefficients, align 8, !dbg !2943
  %97 = load i32, i32* %j, align 4, !dbg !2944
  %idxprom45 = sext i32 %97 to i64, !dbg !2943
  %arrayidx46 = getelementptr inbounds i32, i32* %96, i64 %idxprom45, !dbg !2943
  %98 = load i32, i32* %arrayidx46, align 4, !dbg !2945
  %add47 = add nsw i32 %98, %mul44, !dbg !2945
  store i32 %add47, i32* %arrayidx46, align 4, !dbg !2945
  br label %for.inc48, !dbg !2943

for.inc48:                                        ; preds = %for.body39
  %99 = load i32, i32* %j, align 4, !dbg !2946
  %inc49 = add nsw i32 %99, 1, !dbg !2946
  store i32 %inc49, i32* %j, align 4, !dbg !2946
  br label %for.cond37, !dbg !2947, !llvm.loop !2948

for.end50:                                        ; preds = %for.cond37
  br label %for.inc51, !dbg !2950

for.inc51:                                        ; preds = %for.end50
  %100 = load i32, i32* %i, align 4, !dbg !2951
  %inc52 = add nsw i32 %100, 1, !dbg !2951
  store i32 %inc52, i32* %i, align 4, !dbg !2951
  br label %for.cond25, !dbg !2952, !llvm.loop !2953

for.end53:                                        ; preds = %for.cond25
  %101 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %target_nest, align 8, !dbg !2955
  ret %struct.lambda_loopnest_s* %101, !dbg !2956
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.lambda_lattice_s* @lambda_lattice_compute_base(%struct.lambda_loopnest_s* %nest, %struct.obstack* %lambda_obstack) #0 !dbg !2957 {
entry:
  %nest.addr = alloca %struct.lambda_loopnest_s*, align 8
  %lambda_obstack.addr = alloca %struct.obstack*, align 8
  %ret = alloca %struct.lambda_lattice_s*, align 8
  %depth = alloca i32, align 4
  %invariants = alloca i32, align 4
  %base = alloca i32**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %step = alloca i32, align 4
  %loop = alloca %struct.lambda_loop_s*, align 8
  %expression = alloca %struct.lambda_linear_expression_s*, align 8
  store %struct.lambda_loopnest_s* %nest, %struct.lambda_loopnest_s** %nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_loopnest_s** %nest.addr, metadata !2960, metadata !DIExpression()), !dbg !2961
  store %struct.obstack* %lambda_obstack, %struct.obstack** %lambda_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %lambda_obstack.addr, metadata !2962, metadata !DIExpression()), !dbg !2963
  call void @llvm.dbg.declare(metadata %struct.lambda_lattice_s** %ret, metadata !2964, metadata !DIExpression()), !dbg !2965
  call void @llvm.dbg.declare(metadata i32* %depth, metadata !2966, metadata !DIExpression()), !dbg !2967
  call void @llvm.dbg.declare(metadata i32* %invariants, metadata !2968, metadata !DIExpression()), !dbg !2969
  call void @llvm.dbg.declare(metadata i32*** %base, metadata !2970, metadata !DIExpression()), !dbg !2971
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2972, metadata !DIExpression()), !dbg !2973
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2974, metadata !DIExpression()), !dbg !2975
  call void @llvm.dbg.declare(metadata i32* %step, metadata !2976, metadata !DIExpression()), !dbg !2977
  call void @llvm.dbg.declare(metadata %struct.lambda_loop_s** %loop, metadata !2978, metadata !DIExpression()), !dbg !2979
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %expression, metadata !2980, metadata !DIExpression()), !dbg !2981
  %0 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !2982
  %depth1 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %0, i32 0, i32 1, !dbg !2982
  %1 = load i32, i32* %depth1, align 8, !dbg !2982
  store i32 %1, i32* %depth, align 4, !dbg !2983
  %2 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !2984
  %invariants2 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %2, i32 0, i32 2, !dbg !2984
  %3 = load i32, i32* %invariants2, align 4, !dbg !2984
  store i32 %3, i32* %invariants, align 4, !dbg !2985
  %4 = load i32, i32* %depth, align 4, !dbg !2986
  %5 = load i32, i32* %invariants, align 4, !dbg !2987
  %6 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !2988
  %call = call %struct.lambda_lattice_s* @lambda_lattice_new(i32 %4, i32 %5, %struct.obstack* %6), !dbg !2989
  store %struct.lambda_lattice_s* %call, %struct.lambda_lattice_s** %ret, align 8, !dbg !2990
  %7 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %ret, align 8, !dbg !2991
  %base3 = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %7, i32 0, i32 0, !dbg !2991
  %8 = load i32**, i32*** %base3, align 8, !dbg !2991
  store i32** %8, i32*** %base, align 8, !dbg !2992
  store i32 0, i32* %i, align 4, !dbg !2993
  br label %for.cond, !dbg !2995

for.cond:                                         ; preds = %for.inc83, %entry
  %9 = load i32, i32* %i, align 4, !dbg !2996
  %10 = load i32, i32* %depth, align 4, !dbg !2998
  %cmp = icmp slt i32 %9, %10, !dbg !2999
  br i1 %cmp, label %for.body, label %for.end85, !dbg !3000

for.body:                                         ; preds = %for.cond
  %11 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !3001
  %loops = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %11, i32 0, i32 0, !dbg !3001
  %12 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %loops, align 8, !dbg !3001
  %13 = load i32, i32* %i, align 4, !dbg !3003
  %idxprom = sext i32 %13 to i64, !dbg !3001
  %arrayidx = getelementptr inbounds %struct.lambda_loop_s*, %struct.lambda_loop_s** %12, i64 %idxprom, !dbg !3001
  %14 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %arrayidx, align 8, !dbg !3001
  store %struct.lambda_loop_s* %14, %struct.lambda_loop_s** %loop, align 8, !dbg !3004
  %15 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !3005
  %tobool = icmp ne %struct.lambda_loop_s* %15, null, !dbg !3005
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3005

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 405, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3005
  br label %cond.end, !dbg !3005

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !3005

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3005
  %16 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !3006
  %step4 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %16, i32 0, i32 3, !dbg !3006
  %17 = load i32, i32* %step4, align 8, !dbg !3006
  store i32 %17, i32* %step, align 4, !dbg !3007
  %18 = load i32, i32* %step, align 4, !dbg !3008
  %cmp5 = icmp eq i32 %18, 1, !dbg !3010
  br i1 %cmp5, label %if.then, label %if.else, !dbg !3011

if.then:                                          ; preds = %cond.end
  store i32 0, i32* %j, align 4, !dbg !3012
  br label %for.cond6, !dbg !3015

for.cond6:                                        ; preds = %for.inc, %if.then
  %19 = load i32, i32* %j, align 4, !dbg !3016
  %20 = load i32, i32* %depth, align 4, !dbg !3018
  %cmp7 = icmp slt i32 %19, %20, !dbg !3019
  br i1 %cmp7, label %for.body8, label %for.end, !dbg !3020

for.body8:                                        ; preds = %for.cond6
  %21 = load i32**, i32*** %base, align 8, !dbg !3021
  %22 = load i32, i32* %i, align 4, !dbg !3022
  %idxprom9 = sext i32 %22 to i64, !dbg !3021
  %arrayidx10 = getelementptr inbounds i32*, i32** %21, i64 %idxprom9, !dbg !3021
  %23 = load i32*, i32** %arrayidx10, align 8, !dbg !3021
  %24 = load i32, i32* %j, align 4, !dbg !3023
  %idxprom11 = sext i32 %24 to i64, !dbg !3021
  %arrayidx12 = getelementptr inbounds i32, i32* %23, i64 %idxprom11, !dbg !3021
  store i32 0, i32* %arrayidx12, align 4, !dbg !3024
  br label %for.inc, !dbg !3021

for.inc:                                          ; preds = %for.body8
  %25 = load i32, i32* %j, align 4, !dbg !3025
  %inc = add nsw i32 %25, 1, !dbg !3025
  store i32 %inc, i32* %j, align 4, !dbg !3025
  br label %for.cond6, !dbg !3026, !llvm.loop !3027

for.end:                                          ; preds = %for.cond6
  %26 = load i32**, i32*** %base, align 8, !dbg !3029
  %27 = load i32, i32* %i, align 4, !dbg !3030
  %idxprom13 = sext i32 %27 to i64, !dbg !3029
  %arrayidx14 = getelementptr inbounds i32*, i32** %26, i64 %idxprom13, !dbg !3029
  %28 = load i32*, i32** %arrayidx14, align 8, !dbg !3029
  %29 = load i32, i32* %i, align 4, !dbg !3031
  %idxprom15 = sext i32 %29 to i64, !dbg !3029
  %arrayidx16 = getelementptr inbounds i32, i32* %28, i64 %idxprom15, !dbg !3029
  store i32 1, i32* %arrayidx16, align 4, !dbg !3032
  %30 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %ret, align 8, !dbg !3033
  %origin = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %30, i32 0, i32 2, !dbg !3033
  %31 = load i32*, i32** %origin, align 8, !dbg !3033
  %32 = load i32, i32* %i, align 4, !dbg !3034
  %idxprom17 = sext i32 %32 to i64, !dbg !3033
  %arrayidx18 = getelementptr inbounds i32, i32* %31, i64 %idxprom17, !dbg !3033
  store i32 0, i32* %arrayidx18, align 4, !dbg !3035
  store i32 0, i32* %j, align 4, !dbg !3036
  br label %for.cond19, !dbg !3038

for.cond19:                                       ; preds = %for.inc26, %for.end
  %33 = load i32, i32* %j, align 4, !dbg !3039
  %34 = load i32, i32* %invariants, align 4, !dbg !3041
  %cmp20 = icmp slt i32 %33, %34, !dbg !3042
  br i1 %cmp20, label %for.body21, label %for.end28, !dbg !3043

for.body21:                                       ; preds = %for.cond19
  %35 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %ret, align 8, !dbg !3044
  %origin_invariants = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %35, i32 0, i32 3, !dbg !3044
  %36 = load i32**, i32*** %origin_invariants, align 8, !dbg !3044
  %37 = load i32, i32* %i, align 4, !dbg !3045
  %idxprom22 = sext i32 %37 to i64, !dbg !3044
  %arrayidx23 = getelementptr inbounds i32*, i32** %36, i64 %idxprom22, !dbg !3044
  %38 = load i32*, i32** %arrayidx23, align 8, !dbg !3044
  %39 = load i32, i32* %j, align 4, !dbg !3046
  %idxprom24 = sext i32 %39 to i64, !dbg !3044
  %arrayidx25 = getelementptr inbounds i32, i32* %38, i64 %idxprom24, !dbg !3044
  store i32 0, i32* %arrayidx25, align 4, !dbg !3047
  br label %for.inc26, !dbg !3044

for.inc26:                                        ; preds = %for.body21
  %40 = load i32, i32* %j, align 4, !dbg !3048
  %inc27 = add nsw i32 %40, 1, !dbg !3048
  store i32 %inc27, i32* %j, align 4, !dbg !3048
  br label %for.cond19, !dbg !3049, !llvm.loop !3050

for.end28:                                        ; preds = %for.cond19
  br label %if.end, !dbg !3052

if.else:                                          ; preds = %cond.end
  %41 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !3053
  %lower_bound = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %41, i32 0, i32 0, !dbg !3053
  %42 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lower_bound, align 8, !dbg !3053
  store %struct.lambda_linear_expression_s* %42, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3055
  %43 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3056
  %tobool29 = icmp ne %struct.lambda_linear_expression_s* %43, null, !dbg !3056
  br i1 %tobool29, label %land.lhs.true, label %cond.true33, !dbg !3056

land.lhs.true:                                    ; preds = %if.else
  %44 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3056
  %next = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %44, i32 0, i32 4, !dbg !3056
  %45 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %next, align 8, !dbg !3056
  %tobool30 = icmp ne %struct.lambda_linear_expression_s* %45, null, !dbg !3056
  br i1 %tobool30, label %cond.true33, label %land.lhs.true31, !dbg !3056

land.lhs.true31:                                  ; preds = %land.lhs.true
  %46 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3056
  %denominator = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %46, i32 0, i32 3, !dbg !3056
  %47 = load i32, i32* %denominator, align 8, !dbg !3056
  %cmp32 = icmp eq i32 %47, 1, !dbg !3056
  br i1 %cmp32, label %cond.false34, label %cond.true33, !dbg !3056

cond.true33:                                      ; preds = %land.lhs.true31, %land.lhs.true, %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 424, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3056
  br label %cond.end35, !dbg !3056

cond.false34:                                     ; preds = %land.lhs.true31
  br label %cond.end35, !dbg !3056

cond.end35:                                       ; preds = %cond.false34, %cond.true33
  %cond36 = phi i32 [ 0, %cond.true33 ], [ 0, %cond.false34 ], !dbg !3056
  store i32 0, i32* %j, align 4, !dbg !3057
  br label %for.cond37, !dbg !3059

for.cond37:                                       ; preds = %for.inc50, %cond.end35
  %48 = load i32, i32* %j, align 4, !dbg !3060
  %49 = load i32, i32* %i, align 4, !dbg !3062
  %cmp38 = icmp slt i32 %48, %49, !dbg !3063
  br i1 %cmp38, label %for.body39, label %for.end52, !dbg !3064

for.body39:                                       ; preds = %for.cond37
  %50 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3065
  %coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %50, i32 0, i32 0, !dbg !3065
  %51 = load i32*, i32** %coefficients, align 8, !dbg !3065
  %52 = load i32, i32* %j, align 4, !dbg !3066
  %idxprom40 = sext i32 %52 to i64, !dbg !3065
  %arrayidx41 = getelementptr inbounds i32, i32* %51, i64 %idxprom40, !dbg !3065
  %53 = load i32, i32* %arrayidx41, align 4, !dbg !3065
  %54 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !3067
  %loops42 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %54, i32 0, i32 0, !dbg !3067
  %55 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %loops42, align 8, !dbg !3067
  %56 = load i32, i32* %j, align 4, !dbg !3067
  %idxprom43 = sext i32 %56 to i64, !dbg !3067
  %arrayidx44 = getelementptr inbounds %struct.lambda_loop_s*, %struct.lambda_loop_s** %55, i64 %idxprom43, !dbg !3067
  %57 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %arrayidx44, align 8, !dbg !3067
  %step45 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %57, i32 0, i32 3, !dbg !3067
  %58 = load i32, i32* %step45, align 8, !dbg !3067
  %mul = mul nsw i32 %53, %58, !dbg !3068
  %59 = load i32**, i32*** %base, align 8, !dbg !3069
  %60 = load i32, i32* %i, align 4, !dbg !3070
  %idxprom46 = sext i32 %60 to i64, !dbg !3069
  %arrayidx47 = getelementptr inbounds i32*, i32** %59, i64 %idxprom46, !dbg !3069
  %61 = load i32*, i32** %arrayidx47, align 8, !dbg !3069
  %62 = load i32, i32* %j, align 4, !dbg !3071
  %idxprom48 = sext i32 %62 to i64, !dbg !3069
  %arrayidx49 = getelementptr inbounds i32, i32* %61, i64 %idxprom48, !dbg !3069
  store i32 %mul, i32* %arrayidx49, align 4, !dbg !3072
  br label %for.inc50, !dbg !3069

for.inc50:                                        ; preds = %for.body39
  %63 = load i32, i32* %j, align 4, !dbg !3073
  %inc51 = add nsw i32 %63, 1, !dbg !3073
  store i32 %inc51, i32* %j, align 4, !dbg !3073
  br label %for.cond37, !dbg !3074, !llvm.loop !3075

for.end52:                                        ; preds = %for.cond37
  %64 = load i32, i32* %step, align 4, !dbg !3077
  %65 = load i32**, i32*** %base, align 8, !dbg !3078
  %66 = load i32, i32* %i, align 4, !dbg !3079
  %idxprom53 = sext i32 %66 to i64, !dbg !3078
  %arrayidx54 = getelementptr inbounds i32*, i32** %65, i64 %idxprom53, !dbg !3078
  %67 = load i32*, i32** %arrayidx54, align 8, !dbg !3078
  %68 = load i32, i32* %i, align 4, !dbg !3080
  %idxprom55 = sext i32 %68 to i64, !dbg !3078
  %arrayidx56 = getelementptr inbounds i32, i32* %67, i64 %idxprom55, !dbg !3078
  store i32 %64, i32* %arrayidx56, align 4, !dbg !3081
  %69 = load i32, i32* %i, align 4, !dbg !3082
  %add = add nsw i32 %69, 1, !dbg !3084
  store i32 %add, i32* %j, align 4, !dbg !3085
  br label %for.cond57, !dbg !3086

for.cond57:                                       ; preds = %for.inc64, %for.end52
  %70 = load i32, i32* %j, align 4, !dbg !3087
  %71 = load i32, i32* %depth, align 4, !dbg !3089
  %cmp58 = icmp slt i32 %70, %71, !dbg !3090
  br i1 %cmp58, label %for.body59, label %for.end66, !dbg !3091

for.body59:                                       ; preds = %for.cond57
  %72 = load i32**, i32*** %base, align 8, !dbg !3092
  %73 = load i32, i32* %i, align 4, !dbg !3093
  %idxprom60 = sext i32 %73 to i64, !dbg !3092
  %arrayidx61 = getelementptr inbounds i32*, i32** %72, i64 %idxprom60, !dbg !3092
  %74 = load i32*, i32** %arrayidx61, align 8, !dbg !3092
  %75 = load i32, i32* %j, align 4, !dbg !3094
  %idxprom62 = sext i32 %75 to i64, !dbg !3092
  %arrayidx63 = getelementptr inbounds i32, i32* %74, i64 %idxprom62, !dbg !3092
  store i32 0, i32* %arrayidx63, align 4, !dbg !3095
  br label %for.inc64, !dbg !3092

for.inc64:                                        ; preds = %for.body59
  %76 = load i32, i32* %j, align 4, !dbg !3096
  %inc65 = add nsw i32 %76, 1, !dbg !3096
  store i32 %inc65, i32* %j, align 4, !dbg !3096
  br label %for.cond57, !dbg !3097, !llvm.loop !3098

for.end66:                                        ; preds = %for.cond57
  %77 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3100
  %constant = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %77, i32 0, i32 1, !dbg !3100
  %78 = load i32, i32* %constant, align 8, !dbg !3100
  %79 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %ret, align 8, !dbg !3101
  %origin67 = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %79, i32 0, i32 2, !dbg !3101
  %80 = load i32*, i32** %origin67, align 8, !dbg !3101
  %81 = load i32, i32* %i, align 4, !dbg !3102
  %idxprom68 = sext i32 %81 to i64, !dbg !3101
  %arrayidx69 = getelementptr inbounds i32, i32* %80, i64 %idxprom68, !dbg !3101
  store i32 %78, i32* %arrayidx69, align 4, !dbg !3103
  store i32 0, i32* %j, align 4, !dbg !3104
  br label %for.cond70, !dbg !3106

for.cond70:                                       ; preds = %for.inc80, %for.end66
  %82 = load i32, i32* %j, align 4, !dbg !3107
  %83 = load i32, i32* %invariants, align 4, !dbg !3109
  %cmp71 = icmp slt i32 %82, %83, !dbg !3110
  br i1 %cmp71, label %for.body72, label %for.end82, !dbg !3111

for.body72:                                       ; preds = %for.cond70
  %84 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3112
  %invariant_coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %84, i32 0, i32 2, !dbg !3112
  %85 = load i32*, i32** %invariant_coefficients, align 8, !dbg !3112
  %86 = load i32, i32* %j, align 4, !dbg !3113
  %idxprom73 = sext i32 %86 to i64, !dbg !3112
  %arrayidx74 = getelementptr inbounds i32, i32* %85, i64 %idxprom73, !dbg !3112
  %87 = load i32, i32* %arrayidx74, align 4, !dbg !3112
  %88 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %ret, align 8, !dbg !3114
  %origin_invariants75 = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %88, i32 0, i32 3, !dbg !3114
  %89 = load i32**, i32*** %origin_invariants75, align 8, !dbg !3114
  %90 = load i32, i32* %i, align 4, !dbg !3115
  %idxprom76 = sext i32 %90 to i64, !dbg !3114
  %arrayidx77 = getelementptr inbounds i32*, i32** %89, i64 %idxprom76, !dbg !3114
  %91 = load i32*, i32** %arrayidx77, align 8, !dbg !3114
  %92 = load i32, i32* %j, align 4, !dbg !3116
  %idxprom78 = sext i32 %92 to i64, !dbg !3114
  %arrayidx79 = getelementptr inbounds i32, i32* %91, i64 %idxprom78, !dbg !3114
  store i32 %87, i32* %arrayidx79, align 4, !dbg !3117
  br label %for.inc80, !dbg !3114

for.inc80:                                        ; preds = %for.body72
  %93 = load i32, i32* %j, align 4, !dbg !3118
  %inc81 = add nsw i32 %93, 1, !dbg !3118
  store i32 %inc81, i32* %j, align 4, !dbg !3118
  br label %for.cond70, !dbg !3119, !llvm.loop !3120

for.end82:                                        ; preds = %for.cond70
  br label %if.end

if.end:                                           ; preds = %for.end82, %for.end28
  br label %for.inc83, !dbg !3122

for.inc83:                                        ; preds = %if.end
  %94 = load i32, i32* %i, align 4, !dbg !3123
  %inc84 = add nsw i32 %94, 1, !dbg !3123
  store i32 %inc84, i32* %i, align 4, !dbg !3123
  br label %for.cond, !dbg !3124, !llvm.loop !3125

for.end85:                                        ; preds = %for.cond
  %95 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %ret, align 8, !dbg !3127
  ret %struct.lambda_lattice_s* %95, !dbg !3128
}

declare dso_local %struct.lambda_trans_matrix_s* @lambda_trans_matrix_new(i32, i32) #2

declare dso_local void @lambda_matrix_mult(i32**, i32**, i32**, i32, i32, i32) #2

declare dso_local void @lambda_matrix_hermite(i32**, i32, i32**, i32**) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.lambda_loopnest_s* @lambda_compute_auxillary_space(%struct.lambda_loopnest_s* %nest, %struct.lambda_trans_matrix_s* %trans, %struct.obstack* %lambda_obstack) #0 !dbg !3129 {
entry:
  %nest.addr = alloca %struct.lambda_loopnest_s*, align 8
  %trans.addr = alloca %struct.lambda_trans_matrix_s*, align 8
  %lambda_obstack.addr = alloca %struct.obstack*, align 8
  %A = alloca i32**, align 8
  %B = alloca i32**, align 8
  %A1 = alloca i32**, align 8
  %B1 = alloca i32**, align 8
  %a = alloca i32*, align 8
  %a1 = alloca i32*, align 8
  %invertedtrans = alloca i32**, align 8
  %depth = alloca i32, align 4
  %invariants = alloca i32, align 4
  %size = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %loop = alloca %struct.lambda_loop_s*, align 8
  %expression = alloca %struct.lambda_linear_expression_s*, align 8
  %lattice = alloca %struct.lambda_lattice_s*, align 8
  store %struct.lambda_loopnest_s* %nest, %struct.lambda_loopnest_s** %nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_loopnest_s** %nest.addr, metadata !3130, metadata !DIExpression()), !dbg !3131
  store %struct.lambda_trans_matrix_s* %trans, %struct.lambda_trans_matrix_s** %trans.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_trans_matrix_s** %trans.addr, metadata !3132, metadata !DIExpression()), !dbg !3133
  store %struct.obstack* %lambda_obstack, %struct.obstack** %lambda_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %lambda_obstack.addr, metadata !3134, metadata !DIExpression()), !dbg !3135
  call void @llvm.dbg.declare(metadata i32*** %A, metadata !3136, metadata !DIExpression()), !dbg !3137
  call void @llvm.dbg.declare(metadata i32*** %B, metadata !3138, metadata !DIExpression()), !dbg !3139
  call void @llvm.dbg.declare(metadata i32*** %A1, metadata !3140, metadata !DIExpression()), !dbg !3141
  call void @llvm.dbg.declare(metadata i32*** %B1, metadata !3142, metadata !DIExpression()), !dbg !3143
  call void @llvm.dbg.declare(metadata i32** %a, metadata !3144, metadata !DIExpression()), !dbg !3145
  call void @llvm.dbg.declare(metadata i32** %a1, metadata !3146, metadata !DIExpression()), !dbg !3147
  call void @llvm.dbg.declare(metadata i32*** %invertedtrans, metadata !3148, metadata !DIExpression()), !dbg !3149
  call void @llvm.dbg.declare(metadata i32* %depth, metadata !3150, metadata !DIExpression()), !dbg !3151
  call void @llvm.dbg.declare(metadata i32* %invariants, metadata !3152, metadata !DIExpression()), !dbg !3153
  call void @llvm.dbg.declare(metadata i32* %size, metadata !3154, metadata !DIExpression()), !dbg !3155
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3156, metadata !DIExpression()), !dbg !3157
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3158, metadata !DIExpression()), !dbg !3159
  call void @llvm.dbg.declare(metadata %struct.lambda_loop_s** %loop, metadata !3160, metadata !DIExpression()), !dbg !3161
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %expression, metadata !3162, metadata !DIExpression()), !dbg !3163
  call void @llvm.dbg.declare(metadata %struct.lambda_lattice_s** %lattice, metadata !3164, metadata !DIExpression()), !dbg !3165
  %0 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !3166
  %depth1 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %0, i32 0, i32 1, !dbg !3166
  %1 = load i32, i32* %depth1, align 8, !dbg !3166
  store i32 %1, i32* %depth, align 4, !dbg !3167
  %2 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !3168
  %invariants2 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %2, i32 0, i32 2, !dbg !3168
  %3 = load i32, i32* %invariants2, align 4, !dbg !3168
  store i32 %3, i32* %invariants, align 4, !dbg !3169
  %4 = load i32, i32* %depth, align 4, !dbg !3170
  %call = call i32** @lambda_matrix_new(i32 128, i32 %4), !dbg !3171
  store i32** %call, i32*** %A, align 8, !dbg !3172
  %5 = load i32, i32* %invariants, align 4, !dbg !3173
  %call3 = call i32** @lambda_matrix_new(i32 128, i32 %5), !dbg !3174
  store i32** %call3, i32*** %B, align 8, !dbg !3175
  %call4 = call i32* @lambda_vector_new(i32 128), !dbg !3176
  store i32* %call4, i32** %a, align 8, !dbg !3177
  %6 = load i32, i32* %depth, align 4, !dbg !3178
  %call5 = call i32** @lambda_matrix_new(i32 128, i32 %6), !dbg !3179
  store i32** %call5, i32*** %A1, align 8, !dbg !3180
  %7 = load i32, i32* %invariants, align 4, !dbg !3181
  %call6 = call i32** @lambda_matrix_new(i32 128, i32 %7), !dbg !3182
  store i32** %call6, i32*** %B1, align 8, !dbg !3183
  %call7 = call i32* @lambda_vector_new(i32 128), !dbg !3184
  store i32* %call7, i32** %a1, align 8, !dbg !3185
  store i32 0, i32* %size, align 4, !dbg !3186
  store i32 0, i32* %i, align 4, !dbg !3187
  br label %for.cond, !dbg !3189

for.cond:                                         ; preds = %for.inc121, %entry
  %8 = load i32, i32* %i, align 4, !dbg !3190
  %9 = load i32, i32* %depth, align 4, !dbg !3192
  %cmp = icmp slt i32 %8, %9, !dbg !3193
  br i1 %cmp, label %for.body, label %for.end123, !dbg !3194

for.body:                                         ; preds = %for.cond
  %10 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !3195
  %loops = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %10, i32 0, i32 0, !dbg !3195
  %11 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %loops, align 8, !dbg !3195
  %12 = load i32, i32* %i, align 4, !dbg !3197
  %idxprom = sext i32 %12 to i64, !dbg !3195
  %arrayidx = getelementptr inbounds %struct.lambda_loop_s*, %struct.lambda_loop_s** %11, i64 %idxprom, !dbg !3195
  %13 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %arrayidx, align 8, !dbg !3195
  store %struct.lambda_loop_s* %13, %struct.lambda_loop_s** %loop, align 8, !dbg !3198
  %14 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !3199
  %step = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %14, i32 0, i32 3, !dbg !3199
  %15 = load i32, i32* %step, align 8, !dbg !3199
  %cmp8 = icmp sgt i32 %15, 0, !dbg !3201
  br i1 %cmp8, label %if.then, label %if.else, !dbg !3202

if.then:                                          ; preds = %for.body
  %16 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !3203
  %lower_bound = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %16, i32 0, i32 0, !dbg !3203
  %17 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lower_bound, align 8, !dbg !3203
  store %struct.lambda_linear_expression_s* %17, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3204
  br label %if.end, !dbg !3205

if.else:                                          ; preds = %for.body
  %18 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !3206
  %upper_bound = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %18, i32 0, i32 1, !dbg !3206
  %19 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %upper_bound, align 8, !dbg !3206
  store %struct.lambda_linear_expression_s* %19, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3207
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.cond9, !dbg !3208

for.cond9:                                        ; preds = %for.inc55, %if.end
  %20 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3209
  %cmp10 = icmp ne %struct.lambda_linear_expression_s* %20, null, !dbg !3212
  br i1 %cmp10, label %for.body11, label %for.end56, !dbg !3213

for.body11:                                       ; preds = %for.cond9
  store i32 0, i32* %j, align 4, !dbg !3214
  br label %for.cond12, !dbg !3217

for.cond12:                                       ; preds = %for.inc, %for.body11
  %21 = load i32, i32* %j, align 4, !dbg !3218
  %22 = load i32, i32* %i, align 4, !dbg !3220
  %cmp13 = icmp slt i32 %21, %22, !dbg !3221
  br i1 %cmp13, label %for.body14, label %for.end, !dbg !3222

for.body14:                                       ; preds = %for.cond12
  %23 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3223
  %coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %23, i32 0, i32 0, !dbg !3223
  %24 = load i32*, i32** %coefficients, align 8, !dbg !3223
  %25 = load i32, i32* %j, align 4, !dbg !3224
  %idxprom15 = sext i32 %25 to i64, !dbg !3223
  %arrayidx16 = getelementptr inbounds i32, i32* %24, i64 %idxprom15, !dbg !3223
  %26 = load i32, i32* %arrayidx16, align 4, !dbg !3223
  %27 = load i32**, i32*** %A, align 8, !dbg !3225
  %28 = load i32, i32* %size, align 4, !dbg !3226
  %idxprom17 = sext i32 %28 to i64, !dbg !3225
  %arrayidx18 = getelementptr inbounds i32*, i32** %27, i64 %idxprom17, !dbg !3225
  %29 = load i32*, i32** %arrayidx18, align 8, !dbg !3225
  %30 = load i32, i32* %j, align 4, !dbg !3227
  %idxprom19 = sext i32 %30 to i64, !dbg !3225
  %arrayidx20 = getelementptr inbounds i32, i32* %29, i64 %idxprom19, !dbg !3225
  store i32 %26, i32* %arrayidx20, align 4, !dbg !3228
  br label %for.inc, !dbg !3225

for.inc:                                          ; preds = %for.body14
  %31 = load i32, i32* %j, align 4, !dbg !3229
  %inc = add nsw i32 %31, 1, !dbg !3229
  store i32 %inc, i32* %j, align 4, !dbg !3229
  br label %for.cond12, !dbg !3230, !llvm.loop !3231

for.end:                                          ; preds = %for.cond12
  store i32 0, i32* %j, align 4, !dbg !3233
  br label %for.cond21, !dbg !3235

for.cond21:                                       ; preds = %for.inc30, %for.end
  %32 = load i32, i32* %j, align 4, !dbg !3236
  %33 = load i32, i32* %invariants, align 4, !dbg !3238
  %cmp22 = icmp slt i32 %32, %33, !dbg !3239
  br i1 %cmp22, label %for.body23, label %for.end32, !dbg !3240

for.body23:                                       ; preds = %for.cond21
  %34 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3241
  %invariant_coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %34, i32 0, i32 2, !dbg !3241
  %35 = load i32*, i32** %invariant_coefficients, align 8, !dbg !3241
  %36 = load i32, i32* %j, align 4, !dbg !3242
  %idxprom24 = sext i32 %36 to i64, !dbg !3241
  %arrayidx25 = getelementptr inbounds i32, i32* %35, i64 %idxprom24, !dbg !3241
  %37 = load i32, i32* %arrayidx25, align 4, !dbg !3241
  %38 = load i32**, i32*** %B, align 8, !dbg !3243
  %39 = load i32, i32* %size, align 4, !dbg !3244
  %idxprom26 = sext i32 %39 to i64, !dbg !3243
  %arrayidx27 = getelementptr inbounds i32*, i32** %38, i64 %idxprom26, !dbg !3243
  %40 = load i32*, i32** %arrayidx27, align 8, !dbg !3243
  %41 = load i32, i32* %j, align 4, !dbg !3245
  %idxprom28 = sext i32 %41 to i64, !dbg !3243
  %arrayidx29 = getelementptr inbounds i32, i32* %40, i64 %idxprom28, !dbg !3243
  store i32 %37, i32* %arrayidx29, align 4, !dbg !3246
  br label %for.inc30, !dbg !3243

for.inc30:                                        ; preds = %for.body23
  %42 = load i32, i32* %j, align 4, !dbg !3247
  %inc31 = add nsw i32 %42, 1, !dbg !3247
  store i32 %inc31, i32* %j, align 4, !dbg !3247
  br label %for.cond21, !dbg !3248, !llvm.loop !3249

for.end32:                                        ; preds = %for.cond21
  %43 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3251
  %constant = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %43, i32 0, i32 1, !dbg !3251
  %44 = load i32, i32* %constant, align 8, !dbg !3251
  %45 = load i32*, i32** %a, align 8, !dbg !3252
  %46 = load i32, i32* %size, align 4, !dbg !3253
  %idxprom33 = sext i32 %46 to i64, !dbg !3252
  %arrayidx34 = getelementptr inbounds i32, i32* %45, i64 %idxprom33, !dbg !3252
  store i32 %44, i32* %arrayidx34, align 4, !dbg !3254
  %47 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3255
  %denominator = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %47, i32 0, i32 3, !dbg !3255
  %48 = load i32, i32* %denominator, align 8, !dbg !3255
  %mul = mul nsw i32 -1, %48, !dbg !3256
  %49 = load i32**, i32*** %A, align 8, !dbg !3257
  %50 = load i32, i32* %size, align 4, !dbg !3258
  %idxprom35 = sext i32 %50 to i64, !dbg !3257
  %arrayidx36 = getelementptr inbounds i32*, i32** %49, i64 %idxprom35, !dbg !3257
  %51 = load i32*, i32** %arrayidx36, align 8, !dbg !3257
  %52 = load i32, i32* %i, align 4, !dbg !3259
  %idxprom37 = sext i32 %52 to i64, !dbg !3257
  %arrayidx38 = getelementptr inbounds i32, i32* %51, i64 %idxprom37, !dbg !3257
  store i32 %mul, i32* %arrayidx38, align 4, !dbg !3260
  %53 = load i32*, i32** %a, align 8, !dbg !3261
  %54 = load i32, i32* %size, align 4, !dbg !3262
  %idxprom39 = sext i32 %54 to i64, !dbg !3261
  %arrayidx40 = getelementptr inbounds i32, i32* %53, i64 %idxprom39, !dbg !3261
  %55 = load i32, i32* %arrayidx40, align 4, !dbg !3263
  %mul41 = mul nsw i32 %55, -1, !dbg !3263
  store i32 %mul41, i32* %arrayidx40, align 4, !dbg !3263
  store i32 0, i32* %j, align 4, !dbg !3264
  br label %for.cond42, !dbg !3266

for.cond42:                                       ; preds = %for.inc50, %for.end32
  %56 = load i32, i32* %j, align 4, !dbg !3267
  %57 = load i32, i32* %invariants, align 4, !dbg !3269
  %cmp43 = icmp slt i32 %56, %57, !dbg !3270
  br i1 %cmp43, label %for.body44, label %for.end52, !dbg !3271

for.body44:                                       ; preds = %for.cond42
  %58 = load i32**, i32*** %B, align 8, !dbg !3272
  %59 = load i32, i32* %size, align 4, !dbg !3273
  %idxprom45 = sext i32 %59 to i64, !dbg !3272
  %arrayidx46 = getelementptr inbounds i32*, i32** %58, i64 %idxprom45, !dbg !3272
  %60 = load i32*, i32** %arrayidx46, align 8, !dbg !3272
  %61 = load i32, i32* %j, align 4, !dbg !3274
  %idxprom47 = sext i32 %61 to i64, !dbg !3272
  %arrayidx48 = getelementptr inbounds i32, i32* %60, i64 %idxprom47, !dbg !3272
  %62 = load i32, i32* %arrayidx48, align 4, !dbg !3275
  %mul49 = mul nsw i32 %62, -1, !dbg !3275
  store i32 %mul49, i32* %arrayidx48, align 4, !dbg !3275
  br label %for.inc50, !dbg !3272

for.inc50:                                        ; preds = %for.body44
  %63 = load i32, i32* %j, align 4, !dbg !3276
  %inc51 = add nsw i32 %63, 1, !dbg !3276
  store i32 %inc51, i32* %j, align 4, !dbg !3276
  br label %for.cond42, !dbg !3277, !llvm.loop !3278

for.end52:                                        ; preds = %for.cond42
  %64 = load i32, i32* %size, align 4, !dbg !3280
  %inc53 = add nsw i32 %64, 1, !dbg !3280
  store i32 %inc53, i32* %size, align 4, !dbg !3280
  %65 = load i32, i32* %size, align 4, !dbg !3281
  %cmp54 = icmp sle i32 %65, 127, !dbg !3281
  br i1 %cmp54, label %cond.false, label %cond.true, !dbg !3281

cond.true:                                        ; preds = %for.end52
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 702, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3281
  br label %cond.end, !dbg !3281

cond.false:                                       ; preds = %for.end52
  br label %cond.end, !dbg !3281

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3281
  br label %for.inc55, !dbg !3282

for.inc55:                                        ; preds = %cond.end
  %66 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3283
  %next = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %66, i32 0, i32 4, !dbg !3283
  %67 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %next, align 8, !dbg !3283
  store %struct.lambda_linear_expression_s* %67, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3284
  br label %for.cond9, !dbg !3285, !llvm.loop !3286

for.end56:                                        ; preds = %for.cond9
  %68 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !3288
  %step57 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %68, i32 0, i32 3, !dbg !3288
  %69 = load i32, i32* %step57, align 8, !dbg !3288
  %cmp58 = icmp sgt i32 %69, 0, !dbg !3290
  br i1 %cmp58, label %if.then59, label %if.else61, !dbg !3291

if.then59:                                        ; preds = %for.end56
  %70 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !3292
  %upper_bound60 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %70, i32 0, i32 1, !dbg !3292
  %71 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %upper_bound60, align 8, !dbg !3292
  store %struct.lambda_linear_expression_s* %71, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3293
  br label %if.end63, !dbg !3294

if.else61:                                        ; preds = %for.end56
  %72 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !3295
  %lower_bound62 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %72, i32 0, i32 0, !dbg !3295
  %73 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lower_bound62, align 8, !dbg !3295
  store %struct.lambda_linear_expression_s* %73, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3296
  br label %if.end63

if.end63:                                         ; preds = %if.else61, %if.then59
  br label %for.cond64, !dbg !3297

for.cond64:                                       ; preds = %for.inc118, %if.end63
  %74 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3298
  %cmp65 = icmp ne %struct.lambda_linear_expression_s* %74, null, !dbg !3301
  br i1 %cmp65, label %for.body66, label %for.end120, !dbg !3302

for.body66:                                       ; preds = %for.cond64
  store i32 0, i32* %j, align 4, !dbg !3303
  br label %for.cond67, !dbg !3306

for.cond67:                                       ; preds = %for.inc77, %for.body66
  %75 = load i32, i32* %j, align 4, !dbg !3307
  %76 = load i32, i32* %i, align 4, !dbg !3309
  %cmp68 = icmp slt i32 %75, %76, !dbg !3310
  br i1 %cmp68, label %for.body69, label %for.end79, !dbg !3311

for.body69:                                       ; preds = %for.cond67
  %77 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3312
  %coefficients70 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %77, i32 0, i32 0, !dbg !3312
  %78 = load i32*, i32** %coefficients70, align 8, !dbg !3312
  %79 = load i32, i32* %j, align 4, !dbg !3313
  %idxprom71 = sext i32 %79 to i64, !dbg !3312
  %arrayidx72 = getelementptr inbounds i32, i32* %78, i64 %idxprom71, !dbg !3312
  %80 = load i32, i32* %arrayidx72, align 4, !dbg !3312
  %81 = load i32**, i32*** %A, align 8, !dbg !3314
  %82 = load i32, i32* %size, align 4, !dbg !3315
  %idxprom73 = sext i32 %82 to i64, !dbg !3314
  %arrayidx74 = getelementptr inbounds i32*, i32** %81, i64 %idxprom73, !dbg !3314
  %83 = load i32*, i32** %arrayidx74, align 8, !dbg !3314
  %84 = load i32, i32* %j, align 4, !dbg !3316
  %idxprom75 = sext i32 %84 to i64, !dbg !3314
  %arrayidx76 = getelementptr inbounds i32, i32* %83, i64 %idxprom75, !dbg !3314
  store i32 %80, i32* %arrayidx76, align 4, !dbg !3317
  br label %for.inc77, !dbg !3314

for.inc77:                                        ; preds = %for.body69
  %85 = load i32, i32* %j, align 4, !dbg !3318
  %inc78 = add nsw i32 %85, 1, !dbg !3318
  store i32 %inc78, i32* %j, align 4, !dbg !3318
  br label %for.cond67, !dbg !3319, !llvm.loop !3320

for.end79:                                        ; preds = %for.cond67
  store i32 0, i32* %j, align 4, !dbg !3322
  br label %for.cond80, !dbg !3324

for.cond80:                                       ; preds = %for.inc90, %for.end79
  %86 = load i32, i32* %j, align 4, !dbg !3325
  %87 = load i32, i32* %invariants, align 4, !dbg !3327
  %cmp81 = icmp slt i32 %86, %87, !dbg !3328
  br i1 %cmp81, label %for.body82, label %for.end92, !dbg !3329

for.body82:                                       ; preds = %for.cond80
  %88 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3330
  %invariant_coefficients83 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %88, i32 0, i32 2, !dbg !3330
  %89 = load i32*, i32** %invariant_coefficients83, align 8, !dbg !3330
  %90 = load i32, i32* %j, align 4, !dbg !3331
  %idxprom84 = sext i32 %90 to i64, !dbg !3330
  %arrayidx85 = getelementptr inbounds i32, i32* %89, i64 %idxprom84, !dbg !3330
  %91 = load i32, i32* %arrayidx85, align 4, !dbg !3330
  %92 = load i32**, i32*** %B, align 8, !dbg !3332
  %93 = load i32, i32* %size, align 4, !dbg !3333
  %idxprom86 = sext i32 %93 to i64, !dbg !3332
  %arrayidx87 = getelementptr inbounds i32*, i32** %92, i64 %idxprom86, !dbg !3332
  %94 = load i32*, i32** %arrayidx87, align 8, !dbg !3332
  %95 = load i32, i32* %j, align 4, !dbg !3334
  %idxprom88 = sext i32 %95 to i64, !dbg !3332
  %arrayidx89 = getelementptr inbounds i32, i32* %94, i64 %idxprom88, !dbg !3332
  store i32 %91, i32* %arrayidx89, align 4, !dbg !3335
  br label %for.inc90, !dbg !3332

for.inc90:                                        ; preds = %for.body82
  %96 = load i32, i32* %j, align 4, !dbg !3336
  %inc91 = add nsw i32 %96, 1, !dbg !3336
  store i32 %inc91, i32* %j, align 4, !dbg !3336
  br label %for.cond80, !dbg !3337, !llvm.loop !3338

for.end92:                                        ; preds = %for.cond80
  %97 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3340
  %constant93 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %97, i32 0, i32 1, !dbg !3340
  %98 = load i32, i32* %constant93, align 8, !dbg !3340
  %99 = load i32*, i32** %a, align 8, !dbg !3341
  %100 = load i32, i32* %size, align 4, !dbg !3342
  %idxprom94 = sext i32 %100 to i64, !dbg !3341
  %arrayidx95 = getelementptr inbounds i32, i32* %99, i64 %idxprom94, !dbg !3341
  store i32 %98, i32* %arrayidx95, align 4, !dbg !3343
  store i32 0, i32* %j, align 4, !dbg !3344
  br label %for.cond96, !dbg !3346

for.cond96:                                       ; preds = %for.inc104, %for.end92
  %101 = load i32, i32* %j, align 4, !dbg !3347
  %102 = load i32, i32* %i, align 4, !dbg !3349
  %cmp97 = icmp slt i32 %101, %102, !dbg !3350
  br i1 %cmp97, label %for.body98, label %for.end106, !dbg !3351

for.body98:                                       ; preds = %for.cond96
  %103 = load i32**, i32*** %A, align 8, !dbg !3352
  %104 = load i32, i32* %size, align 4, !dbg !3353
  %idxprom99 = sext i32 %104 to i64, !dbg !3352
  %arrayidx100 = getelementptr inbounds i32*, i32** %103, i64 %idxprom99, !dbg !3352
  %105 = load i32*, i32** %arrayidx100, align 8, !dbg !3352
  %106 = load i32, i32* %j, align 4, !dbg !3354
  %idxprom101 = sext i32 %106 to i64, !dbg !3352
  %arrayidx102 = getelementptr inbounds i32, i32* %105, i64 %idxprom101, !dbg !3352
  %107 = load i32, i32* %arrayidx102, align 4, !dbg !3355
  %mul103 = mul nsw i32 %107, -1, !dbg !3355
  store i32 %mul103, i32* %arrayidx102, align 4, !dbg !3355
  br label %for.inc104, !dbg !3352

for.inc104:                                       ; preds = %for.body98
  %108 = load i32, i32* %j, align 4, !dbg !3356
  %inc105 = add nsw i32 %108, 1, !dbg !3356
  store i32 %inc105, i32* %j, align 4, !dbg !3356
  br label %for.cond96, !dbg !3357, !llvm.loop !3358

for.end106:                                       ; preds = %for.cond96
  %109 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3360
  %denominator107 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %109, i32 0, i32 3, !dbg !3360
  %110 = load i32, i32* %denominator107, align 8, !dbg !3360
  %111 = load i32**, i32*** %A, align 8, !dbg !3361
  %112 = load i32, i32* %size, align 4, !dbg !3362
  %idxprom108 = sext i32 %112 to i64, !dbg !3361
  %arrayidx109 = getelementptr inbounds i32*, i32** %111, i64 %idxprom108, !dbg !3361
  %113 = load i32*, i32** %arrayidx109, align 8, !dbg !3361
  %114 = load i32, i32* %i, align 4, !dbg !3363
  %idxprom110 = sext i32 %114 to i64, !dbg !3361
  %arrayidx111 = getelementptr inbounds i32, i32* %113, i64 %idxprom110, !dbg !3361
  store i32 %110, i32* %arrayidx111, align 4, !dbg !3364
  %115 = load i32, i32* %size, align 4, !dbg !3365
  %inc112 = add nsw i32 %115, 1, !dbg !3365
  store i32 %inc112, i32* %size, align 4, !dbg !3365
  %116 = load i32, i32* %size, align 4, !dbg !3366
  %cmp113 = icmp sle i32 %116, 127, !dbg !3366
  br i1 %cmp113, label %cond.false115, label %cond.true114, !dbg !3366

cond.true114:                                     ; preds = %for.end106
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 731, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3366
  br label %cond.end116, !dbg !3366

cond.false115:                                    ; preds = %for.end106
  br label %cond.end116, !dbg !3366

cond.end116:                                      ; preds = %cond.false115, %cond.true114
  %cond117 = phi i32 [ 0, %cond.true114 ], [ 0, %cond.false115 ], !dbg !3366
  br label %for.inc118, !dbg !3367

for.inc118:                                       ; preds = %cond.end116
  %117 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3368
  %next119 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %117, i32 0, i32 4, !dbg !3368
  %118 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %next119, align 8, !dbg !3368
  store %struct.lambda_linear_expression_s* %118, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3369
  br label %for.cond64, !dbg !3370, !llvm.loop !3371

for.end120:                                       ; preds = %for.cond64
  br label %for.inc121, !dbg !3373

for.inc121:                                       ; preds = %for.end120
  %119 = load i32, i32* %i, align 4, !dbg !3374
  %inc122 = add nsw i32 %119, 1, !dbg !3374
  store i32 %inc122, i32* %i, align 4, !dbg !3374
  br label %for.cond, !dbg !3375, !llvm.loop !3376

for.end123:                                       ; preds = %for.cond
  %120 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %nest.addr, align 8, !dbg !3378
  %121 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !3379
  %call124 = call %struct.lambda_lattice_s* @lambda_lattice_compute_base(%struct.lambda_loopnest_s* %120, %struct.obstack* %121), !dbg !3380
  store %struct.lambda_lattice_s* %call124, %struct.lambda_lattice_s** %lattice, align 8, !dbg !3381
  %122 = load i32**, i32*** %A, align 8, !dbg !3382
  %123 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %lattice, align 8, !dbg !3383
  %base = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %123, i32 0, i32 0, !dbg !3383
  %124 = load i32**, i32*** %base, align 8, !dbg !3383
  %125 = load i32**, i32*** %A1, align 8, !dbg !3384
  %126 = load i32, i32* %size, align 4, !dbg !3385
  %127 = load i32, i32* %depth, align 4, !dbg !3386
  %128 = load i32, i32* %depth, align 4, !dbg !3387
  call void @lambda_matrix_mult(i32** %122, i32** %124, i32** %125, i32 %126, i32 %127, i32 %128), !dbg !3388
  %129 = load i32**, i32*** %A, align 8, !dbg !3389
  %130 = load i32, i32* %size, align 4, !dbg !3390
  %131 = load i32, i32* %depth, align 4, !dbg !3391
  %132 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %lattice, align 8, !dbg !3392
  %origin = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %132, i32 0, i32 2, !dbg !3392
  %133 = load i32*, i32** %origin, align 8, !dbg !3392
  %134 = load i32*, i32** %a1, align 8, !dbg !3393
  call void @lambda_matrix_vector_mult(i32** %129, i32 %130, i32 %131, i32* %133, i32* %134), !dbg !3394
  %135 = load i32*, i32** %a, align 8, !dbg !3395
  %136 = load i32*, i32** %a1, align 8, !dbg !3396
  %137 = load i32*, i32** %a1, align 8, !dbg !3397
  %138 = load i32, i32* %size, align 4, !dbg !3398
  call void @lambda_vector_add_mc(i32* %135, i32 1, i32* %136, i32 -1, i32* %137, i32 %138), !dbg !3399
  %139 = load i32**, i32*** %A, align 8, !dbg !3400
  %140 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %lattice, align 8, !dbg !3401
  %origin_invariants = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %140, i32 0, i32 3, !dbg !3401
  %141 = load i32**, i32*** %origin_invariants, align 8, !dbg !3401
  %142 = load i32**, i32*** %B1, align 8, !dbg !3402
  %143 = load i32, i32* %size, align 4, !dbg !3403
  %144 = load i32, i32* %depth, align 4, !dbg !3404
  %145 = load i32, i32* %invariants, align 4, !dbg !3405
  call void @lambda_matrix_mult(i32** %139, i32** %141, i32** %142, i32 %143, i32 %144, i32 %145), !dbg !3406
  %146 = load i32**, i32*** %B, align 8, !dbg !3407
  %147 = load i32**, i32*** %B1, align 8, !dbg !3408
  %148 = load i32**, i32*** %B1, align 8, !dbg !3409
  %149 = load i32, i32* %size, align 4, !dbg !3410
  %150 = load i32, i32* %invariants, align 4, !dbg !3411
  call void @lambda_matrix_add_mc(i32** %146, i32 1, i32** %147, i32 -1, i32** %148, i32 %149, i32 %150), !dbg !3412
  %151 = load i32, i32* %depth, align 4, !dbg !3413
  %152 = load i32, i32* %depth, align 4, !dbg !3414
  %call125 = call i32** @lambda_matrix_new(i32 %151, i32 %152), !dbg !3415
  store i32** %call125, i32*** %invertedtrans, align 8, !dbg !3416
  %153 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %trans.addr, align 8, !dbg !3417
  %matrix = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %153, i32 0, i32 0, !dbg !3417
  %154 = load i32**, i32*** %matrix, align 8, !dbg !3417
  %155 = load i32**, i32*** %invertedtrans, align 8, !dbg !3418
  %156 = load i32, i32* %depth, align 4, !dbg !3419
  %call126 = call i32 @lambda_matrix_inverse(i32** %154, i32** %155, i32 %156), !dbg !3420
  %157 = load i32**, i32*** %A1, align 8, !dbg !3421
  %158 = load i32**, i32*** %invertedtrans, align 8, !dbg !3422
  %159 = load i32**, i32*** %A, align 8, !dbg !3423
  %160 = load i32, i32* %size, align 4, !dbg !3424
  %161 = load i32, i32* %depth, align 4, !dbg !3425
  %162 = load i32, i32* %depth, align 4, !dbg !3426
  call void @lambda_matrix_mult(i32** %157, i32** %158, i32** %159, i32 %160, i32 %161, i32 %162), !dbg !3427
  %163 = load i32, i32* %size, align 4, !dbg !3428
  %164 = load i32, i32* %depth, align 4, !dbg !3429
  %165 = load i32, i32* %invariants, align 4, !dbg !3430
  %166 = load i32**, i32*** %A, align 8, !dbg !3431
  %167 = load i32**, i32*** %B1, align 8, !dbg !3432
  %168 = load i32*, i32** %a1, align 8, !dbg !3433
  %169 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !3434
  %call127 = call %struct.lambda_loopnest_s* @compute_nest_using_fourier_motzkin(i32 %163, i32 %164, i32 %165, i32** %166, i32** %167, i32* %168, %struct.obstack* %169), !dbg !3435
  ret %struct.lambda_loopnest_s* %call127, !dbg !3436
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @lambda_compute_step_signs(%struct.lambda_trans_matrix_s* %trans, i32* %stepsigns) #0 !dbg !3437 {
entry:
  %trans.addr = alloca %struct.lambda_trans_matrix_s*, align 8
  %stepsigns.addr = alloca i32*, align 8
  %matrix = alloca i32**, align 8
  %H = alloca i32**, align 8
  %size = alloca i32, align 4
  %newsteps = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %factor = alloca i32, align 4
  %minimum_column = alloca i32, align 4
  %temp = alloca i32, align 4
  %row = alloca i32*, align 8
  store %struct.lambda_trans_matrix_s* %trans, %struct.lambda_trans_matrix_s** %trans.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_trans_matrix_s** %trans.addr, metadata !3440, metadata !DIExpression()), !dbg !3441
  store i32* %stepsigns, i32** %stepsigns.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %stepsigns.addr, metadata !3442, metadata !DIExpression()), !dbg !3443
  call void @llvm.dbg.declare(metadata i32*** %matrix, metadata !3444, metadata !DIExpression()), !dbg !3445
  call void @llvm.dbg.declare(metadata i32*** %H, metadata !3446, metadata !DIExpression()), !dbg !3447
  call void @llvm.dbg.declare(metadata i32* %size, metadata !3448, metadata !DIExpression()), !dbg !3449
  call void @llvm.dbg.declare(metadata i32** %newsteps, metadata !3450, metadata !DIExpression()), !dbg !3451
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3452, metadata !DIExpression()), !dbg !3453
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3454, metadata !DIExpression()), !dbg !3455
  call void @llvm.dbg.declare(metadata i32* %factor, metadata !3456, metadata !DIExpression()), !dbg !3457
  call void @llvm.dbg.declare(metadata i32* %minimum_column, metadata !3458, metadata !DIExpression()), !dbg !3459
  call void @llvm.dbg.declare(metadata i32* %temp, metadata !3460, metadata !DIExpression()), !dbg !3461
  %0 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %trans.addr, align 8, !dbg !3462
  %matrix1 = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %0, i32 0, i32 0, !dbg !3462
  %1 = load i32**, i32*** %matrix1, align 8, !dbg !3462
  store i32** %1, i32*** %matrix, align 8, !dbg !3463
  %2 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %trans.addr, align 8, !dbg !3464
  %rowsize = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %2, i32 0, i32 1, !dbg !3464
  %3 = load i32, i32* %rowsize, align 8, !dbg !3464
  store i32 %3, i32* %size, align 4, !dbg !3465
  %4 = load i32, i32* %size, align 4, !dbg !3466
  %5 = load i32, i32* %size, align 4, !dbg !3467
  %call = call i32** @lambda_matrix_new(i32 %4, i32 %5), !dbg !3468
  store i32** %call, i32*** %H, align 8, !dbg !3469
  %6 = load i32, i32* %size, align 4, !dbg !3470
  %call2 = call i32* @lambda_vector_new(i32 %6), !dbg !3471
  store i32* %call2, i32** %newsteps, align 8, !dbg !3472
  %7 = load i32*, i32** %stepsigns.addr, align 8, !dbg !3473
  %8 = load i32*, i32** %newsteps, align 8, !dbg !3474
  %9 = load i32, i32* %size, align 4, !dbg !3475
  call void @lambda_vector_copy(i32* %7, i32* %8, i32 %9), !dbg !3476
  %10 = load i32**, i32*** %matrix, align 8, !dbg !3477
  %11 = load i32**, i32*** %H, align 8, !dbg !3478
  %12 = load i32, i32* %size, align 4, !dbg !3479
  %13 = load i32, i32* %size, align 4, !dbg !3480
  call void @lambda_matrix_copy(i32** %10, i32** %11, i32 %12, i32 %13), !dbg !3481
  store i32 0, i32* %j, align 4, !dbg !3482
  br label %for.cond, !dbg !3484

for.cond:                                         ; preds = %for.inc31, %entry
  %14 = load i32, i32* %j, align 4, !dbg !3485
  %15 = load i32, i32* %size, align 4, !dbg !3487
  %cmp = icmp slt i32 %14, %15, !dbg !3488
  br i1 %cmp, label %for.body, label %for.end33, !dbg !3489

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32** %row, metadata !3490, metadata !DIExpression()), !dbg !3492
  %16 = load i32**, i32*** %H, align 8, !dbg !3493
  %17 = load i32, i32* %j, align 4, !dbg !3494
  %idxprom = sext i32 %17 to i64, !dbg !3493
  %arrayidx = getelementptr inbounds i32*, i32** %16, i64 %idxprom, !dbg !3493
  %18 = load i32*, i32** %arrayidx, align 8, !dbg !3493
  store i32* %18, i32** %row, align 8, !dbg !3495
  %19 = load i32, i32* %j, align 4, !dbg !3496
  store i32 %19, i32* %i, align 4, !dbg !3498
  br label %for.cond3, !dbg !3499

for.cond3:                                        ; preds = %for.inc, %for.body
  %20 = load i32, i32* %i, align 4, !dbg !3500
  %21 = load i32, i32* %size, align 4, !dbg !3502
  %cmp4 = icmp slt i32 %20, %21, !dbg !3503
  br i1 %cmp4, label %for.body5, label %for.end, !dbg !3504

for.body5:                                        ; preds = %for.cond3
  %22 = load i32*, i32** %row, align 8, !dbg !3505
  %23 = load i32, i32* %i, align 4, !dbg !3507
  %idxprom6 = sext i32 %23 to i64, !dbg !3505
  %arrayidx7 = getelementptr inbounds i32, i32* %22, i64 %idxprom6, !dbg !3505
  %24 = load i32, i32* %arrayidx7, align 4, !dbg !3505
  %cmp8 = icmp slt i32 %24, 0, !dbg !3508
  br i1 %cmp8, label %if.then, label %if.end, !dbg !3509

if.then:                                          ; preds = %for.body5
  %25 = load i32**, i32*** %H, align 8, !dbg !3510
  %26 = load i32, i32* %size, align 4, !dbg !3511
  %27 = load i32, i32* %i, align 4, !dbg !3512
  call void @lambda_matrix_col_negate(i32** %25, i32 %26, i32 %27), !dbg !3513
  br label %if.end, !dbg !3513

if.end:                                           ; preds = %if.then, %for.body5
  br label %for.inc, !dbg !3514

for.inc:                                          ; preds = %if.end
  %28 = load i32, i32* %i, align 4, !dbg !3515
  %inc = add nsw i32 %28, 1, !dbg !3515
  store i32 %inc, i32* %i, align 4, !dbg !3515
  br label %for.cond3, !dbg !3516, !llvm.loop !3517

for.end:                                          ; preds = %for.cond3
  br label %while.cond, !dbg !3519

while.cond:                                       ; preds = %for.end30, %for.end
  %29 = load i32*, i32** %row, align 8, !dbg !3520
  %30 = load i32, i32* %size, align 4, !dbg !3521
  %31 = load i32, i32* %j, align 4, !dbg !3522
  %add = add nsw i32 %31, 1, !dbg !3523
  %call9 = call i32 @lambda_vector_first_nz(i32* %29, i32 %30, i32 %add), !dbg !3524
  %32 = load i32, i32* %size, align 4, !dbg !3525
  %cmp10 = icmp slt i32 %call9, %32, !dbg !3526
  br i1 %cmp10, label %while.body, label %while.end, !dbg !3519

while.body:                                       ; preds = %while.cond
  %33 = load i32*, i32** %row, align 8, !dbg !3527
  %34 = load i32, i32* %size, align 4, !dbg !3529
  %35 = load i32, i32* %j, align 4, !dbg !3530
  %call11 = call i32 @lambda_vector_min_nz(i32* %33, i32 %34, i32 %35), !dbg !3531
  store i32 %call11, i32* %minimum_column, align 4, !dbg !3532
  %36 = load i32**, i32*** %H, align 8, !dbg !3533
  %37 = load i32, i32* %size, align 4, !dbg !3534
  %38 = load i32, i32* %j, align 4, !dbg !3535
  %39 = load i32, i32* %minimum_column, align 4, !dbg !3536
  call void @lambda_matrix_col_exchange(i32** %36, i32 %37, i32 %38, i32 %39), !dbg !3537
  %40 = load i32*, i32** %newsteps, align 8, !dbg !3538
  %41 = load i32, i32* %j, align 4, !dbg !3539
  %idxprom12 = sext i32 %41 to i64, !dbg !3538
  %arrayidx13 = getelementptr inbounds i32, i32* %40, i64 %idxprom12, !dbg !3538
  %42 = load i32, i32* %arrayidx13, align 4, !dbg !3538
  store i32 %42, i32* %temp, align 4, !dbg !3540
  %43 = load i32*, i32** %newsteps, align 8, !dbg !3541
  %44 = load i32, i32* %minimum_column, align 4, !dbg !3542
  %idxprom14 = sext i32 %44 to i64, !dbg !3541
  %arrayidx15 = getelementptr inbounds i32, i32* %43, i64 %idxprom14, !dbg !3541
  %45 = load i32, i32* %arrayidx15, align 4, !dbg !3541
  %46 = load i32*, i32** %newsteps, align 8, !dbg !3543
  %47 = load i32, i32* %j, align 4, !dbg !3544
  %idxprom16 = sext i32 %47 to i64, !dbg !3543
  %arrayidx17 = getelementptr inbounds i32, i32* %46, i64 %idxprom16, !dbg !3543
  store i32 %45, i32* %arrayidx17, align 4, !dbg !3545
  %48 = load i32, i32* %temp, align 4, !dbg !3546
  %49 = load i32*, i32** %newsteps, align 8, !dbg !3547
  %50 = load i32, i32* %minimum_column, align 4, !dbg !3548
  %idxprom18 = sext i32 %50 to i64, !dbg !3547
  %arrayidx19 = getelementptr inbounds i32, i32* %49, i64 %idxprom18, !dbg !3547
  store i32 %48, i32* %arrayidx19, align 4, !dbg !3549
  %51 = load i32, i32* %j, align 4, !dbg !3550
  %add20 = add nsw i32 %51, 1, !dbg !3552
  store i32 %add20, i32* %i, align 4, !dbg !3553
  br label %for.cond21, !dbg !3554

for.cond21:                                       ; preds = %for.inc28, %while.body
  %52 = load i32, i32* %i, align 4, !dbg !3555
  %53 = load i32, i32* %size, align 4, !dbg !3557
  %cmp22 = icmp slt i32 %52, %53, !dbg !3558
  br i1 %cmp22, label %for.body23, label %for.end30, !dbg !3559

for.body23:                                       ; preds = %for.cond21
  %54 = load i32*, i32** %row, align 8, !dbg !3560
  %55 = load i32, i32* %i, align 4, !dbg !3562
  %idxprom24 = sext i32 %55 to i64, !dbg !3560
  %arrayidx25 = getelementptr inbounds i32, i32* %54, i64 %idxprom24, !dbg !3560
  %56 = load i32, i32* %arrayidx25, align 4, !dbg !3560
  %57 = load i32*, i32** %row, align 8, !dbg !3563
  %58 = load i32, i32* %j, align 4, !dbg !3564
  %idxprom26 = sext i32 %58 to i64, !dbg !3563
  %arrayidx27 = getelementptr inbounds i32, i32* %57, i64 %idxprom26, !dbg !3563
  %59 = load i32, i32* %arrayidx27, align 4, !dbg !3563
  %div = sdiv i32 %56, %59, !dbg !3565
  store i32 %div, i32* %factor, align 4, !dbg !3566
  %60 = load i32**, i32*** %H, align 8, !dbg !3567
  %61 = load i32, i32* %size, align 4, !dbg !3568
  %62 = load i32, i32* %j, align 4, !dbg !3569
  %63 = load i32, i32* %i, align 4, !dbg !3570
  %64 = load i32, i32* %factor, align 4, !dbg !3571
  %mul = mul nsw i32 -1, %64, !dbg !3572
  call void @lambda_matrix_col_add(i32** %60, i32 %61, i32 %62, i32 %63, i32 %mul), !dbg !3573
  br label %for.inc28, !dbg !3574

for.inc28:                                        ; preds = %for.body23
  %65 = load i32, i32* %i, align 4, !dbg !3575
  %inc29 = add nsw i32 %65, 1, !dbg !3575
  store i32 %inc29, i32* %i, align 4, !dbg !3575
  br label %for.cond21, !dbg !3576, !llvm.loop !3577

for.end30:                                        ; preds = %for.cond21
  br label %while.cond, !dbg !3519, !llvm.loop !3579

while.end:                                        ; preds = %while.cond
  br label %for.inc31, !dbg !3581

for.inc31:                                        ; preds = %while.end
  %66 = load i32, i32* %j, align 4, !dbg !3582
  %inc32 = add nsw i32 %66, 1, !dbg !3582
  store i32 %inc32, i32* %j, align 4, !dbg !3582
  br label %for.cond, !dbg !3583, !llvm.loop !3584

for.end33:                                        ; preds = %for.cond
  %67 = load i32*, i32** %newsteps, align 8, !dbg !3586
  ret i32* %67, !dbg !3587
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.lambda_loopnest_s* @lambda_compute_target_space(%struct.lambda_loopnest_s* %auxillary_nest, %struct.lambda_trans_matrix_s* %H, i32* %stepsigns, %struct.obstack* %lambda_obstack) #0 !dbg !3588 {
entry:
  %auxillary_nest.addr = alloca %struct.lambda_loopnest_s*, align 8
  %H.addr = alloca %struct.lambda_trans_matrix_s*, align 8
  %stepsigns.addr = alloca i32*, align 8
  %lambda_obstack.addr = alloca %struct.obstack*, align 8
  %inverse = alloca i32**, align 8
  %H1 = alloca i32**, align 8
  %determinant = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gcd1 = alloca i32, align 4
  %gcd2 = alloca i32, align 4
  %factor = alloca i32, align 4
  %target_nest = alloca %struct.lambda_loopnest_s*, align 8
  %depth = alloca i32, align 4
  %invariants = alloca i32, align 4
  %target = alloca i32**, align 8
  %auxillary_loop = alloca %struct.lambda_loop_s*, align 8
  %target_loop = alloca %struct.lambda_loop_s*, align 8
  %expression = alloca %struct.lambda_linear_expression_s*, align 8
  %auxillary_expr = alloca %struct.lambda_linear_expression_s*, align 8
  %target_expr = alloca %struct.lambda_linear_expression_s*, align 8
  %tmp_expr = alloca %struct.lambda_linear_expression_s*, align 8
  store %struct.lambda_loopnest_s* %auxillary_nest, %struct.lambda_loopnest_s** %auxillary_nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_loopnest_s** %auxillary_nest.addr, metadata !3591, metadata !DIExpression()), !dbg !3592
  store %struct.lambda_trans_matrix_s* %H, %struct.lambda_trans_matrix_s** %H.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_trans_matrix_s** %H.addr, metadata !3593, metadata !DIExpression()), !dbg !3594
  store i32* %stepsigns, i32** %stepsigns.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %stepsigns.addr, metadata !3595, metadata !DIExpression()), !dbg !3596
  store %struct.obstack* %lambda_obstack, %struct.obstack** %lambda_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %lambda_obstack.addr, metadata !3597, metadata !DIExpression()), !dbg !3598
  call void @llvm.dbg.declare(metadata i32*** %inverse, metadata !3599, metadata !DIExpression()), !dbg !3600
  call void @llvm.dbg.declare(metadata i32*** %H1, metadata !3601, metadata !DIExpression()), !dbg !3602
  call void @llvm.dbg.declare(metadata i32* %determinant, metadata !3603, metadata !DIExpression()), !dbg !3604
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3605, metadata !DIExpression()), !dbg !3606
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3607, metadata !DIExpression()), !dbg !3608
  call void @llvm.dbg.declare(metadata i32* %gcd1, metadata !3609, metadata !DIExpression()), !dbg !3610
  call void @llvm.dbg.declare(metadata i32* %gcd2, metadata !3611, metadata !DIExpression()), !dbg !3612
  call void @llvm.dbg.declare(metadata i32* %factor, metadata !3613, metadata !DIExpression()), !dbg !3614
  call void @llvm.dbg.declare(metadata %struct.lambda_loopnest_s** %target_nest, metadata !3615, metadata !DIExpression()), !dbg !3616
  call void @llvm.dbg.declare(metadata i32* %depth, metadata !3617, metadata !DIExpression()), !dbg !3618
  call void @llvm.dbg.declare(metadata i32* %invariants, metadata !3619, metadata !DIExpression()), !dbg !3620
  call void @llvm.dbg.declare(metadata i32*** %target, metadata !3621, metadata !DIExpression()), !dbg !3622
  call void @llvm.dbg.declare(metadata %struct.lambda_loop_s** %auxillary_loop, metadata !3623, metadata !DIExpression()), !dbg !3624
  call void @llvm.dbg.declare(metadata %struct.lambda_loop_s** %target_loop, metadata !3625, metadata !DIExpression()), !dbg !3626
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %expression, metadata !3627, metadata !DIExpression()), !dbg !3628
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %auxillary_expr, metadata !3629, metadata !DIExpression()), !dbg !3630
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %target_expr, metadata !3631, metadata !DIExpression()), !dbg !3632
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %tmp_expr, metadata !3633, metadata !DIExpression()), !dbg !3634
  %0 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %auxillary_nest.addr, align 8, !dbg !3635
  %depth1 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %0, i32 0, i32 1, !dbg !3635
  %1 = load i32, i32* %depth1, align 8, !dbg !3635
  store i32 %1, i32* %depth, align 4, !dbg !3636
  %2 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %auxillary_nest.addr, align 8, !dbg !3637
  %invariants2 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %2, i32 0, i32 2, !dbg !3637
  %3 = load i32, i32* %invariants2, align 4, !dbg !3637
  store i32 %3, i32* %invariants, align 4, !dbg !3638
  %4 = load i32, i32* %depth, align 4, !dbg !3639
  %5 = load i32, i32* %depth, align 4, !dbg !3640
  %call = call i32** @lambda_matrix_new(i32 %4, i32 %5), !dbg !3641
  store i32** %call, i32*** %inverse, align 8, !dbg !3642
  %6 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %H.addr, align 8, !dbg !3643
  %matrix = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %6, i32 0, i32 0, !dbg !3643
  %7 = load i32**, i32*** %matrix, align 8, !dbg !3643
  %8 = load i32**, i32*** %inverse, align 8, !dbg !3644
  %9 = load i32, i32* %depth, align 4, !dbg !3645
  %call3 = call i32 @lambda_matrix_inverse(i32** %7, i32** %8, i32 %9), !dbg !3646
  store i32 %call3, i32* %determinant, align 4, !dbg !3647
  %10 = load i32, i32* %depth, align 4, !dbg !3648
  %11 = load i32, i32* %depth, align 4, !dbg !3649
  %call4 = call i32** @lambda_matrix_new(i32 %10, i32 %11), !dbg !3650
  store i32** %call4, i32*** %H1, align 8, !dbg !3651
  %12 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %H.addr, align 8, !dbg !3652
  %matrix5 = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %12, i32 0, i32 0, !dbg !3652
  %13 = load i32**, i32*** %matrix5, align 8, !dbg !3652
  %14 = load i32**, i32*** %H1, align 8, !dbg !3653
  %15 = load i32, i32* %depth, align 4, !dbg !3654
  %16 = load i32, i32* %depth, align 4, !dbg !3655
  call void @lambda_matrix_copy(i32** %13, i32** %14, i32 %15, i32 %16), !dbg !3656
  store i32 0, i32* %i, align 4, !dbg !3657
  br label %for.cond, !dbg !3659

for.cond:                                         ; preds = %for.inc, %entry
  %17 = load i32, i32* %i, align 4, !dbg !3660
  %18 = load i32, i32* %depth, align 4, !dbg !3662
  %cmp = icmp slt i32 %17, %18, !dbg !3663
  br i1 %cmp, label %for.body, label %for.end, !dbg !3664

for.body:                                         ; preds = %for.cond
  %19 = load i32**, i32*** %H1, align 8, !dbg !3665
  %20 = load i32, i32* %i, align 4, !dbg !3666
  %idxprom = sext i32 %20 to i64, !dbg !3665
  %arrayidx = getelementptr inbounds i32*, i32** %19, i64 %idxprom, !dbg !3665
  %21 = load i32*, i32** %arrayidx, align 8, !dbg !3665
  %22 = load i32, i32* %i, align 4, !dbg !3667
  %idxprom6 = sext i32 %22 to i64, !dbg !3665
  %arrayidx7 = getelementptr inbounds i32, i32* %21, i64 %idxprom6, !dbg !3665
  store i32 0, i32* %arrayidx7, align 4, !dbg !3668
  br label %for.inc, !dbg !3665

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %i, align 4, !dbg !3669
  %inc = add nsw i32 %23, 1, !dbg !3669
  store i32 %inc, i32* %i, align 4, !dbg !3669
  br label %for.cond, !dbg !3670, !llvm.loop !3671

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %depth, align 4, !dbg !3673
  %25 = load i32, i32* %depth, align 4, !dbg !3674
  %call8 = call i32** @lambda_matrix_new(i32 %24, i32 %25), !dbg !3675
  store i32** %call8, i32*** %target, align 8, !dbg !3676
  %26 = load i32**, i32*** %H1, align 8, !dbg !3677
  %27 = load i32**, i32*** %inverse, align 8, !dbg !3678
  %28 = load i32**, i32*** %target, align 8, !dbg !3679
  %29 = load i32, i32* %depth, align 4, !dbg !3680
  %30 = load i32, i32* %depth, align 4, !dbg !3681
  %31 = load i32, i32* %depth, align 4, !dbg !3682
  call void @lambda_matrix_mult(i32** %26, i32** %27, i32** %28, i32 %29, i32 %30, i32 %31), !dbg !3683
  %32 = load i32, i32* %depth, align 4, !dbg !3684
  %33 = load i32, i32* %invariants, align 4, !dbg !3685
  %34 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !3686
  %call9 = call %struct.lambda_loopnest_s* @lambda_loopnest_new(i32 %32, i32 %33, %struct.obstack* %34), !dbg !3687
  store %struct.lambda_loopnest_s* %call9, %struct.lambda_loopnest_s** %target_nest, align 8, !dbg !3688
  store i32 0, i32* %i, align 4, !dbg !3689
  br label %for.cond10, !dbg !3691

for.cond10:                                       ; preds = %for.inc38, %for.end
  %35 = load i32, i32* %i, align 4, !dbg !3692
  %36 = load i32, i32* %depth, align 4, !dbg !3694
  %cmp11 = icmp slt i32 %35, %36, !dbg !3695
  br i1 %cmp11, label %for.body12, label %for.end40, !dbg !3696

for.body12:                                       ; preds = %for.cond10
  %call13 = call i8* @ggc_alloc_cleared_stat(i64 32), !dbg !3697
  %37 = bitcast i8* %call13 to %struct.lambda_loop_s*, !dbg !3697
  store %struct.lambda_loop_s* %37, %struct.lambda_loop_s** %target_loop, align 8, !dbg !3699
  %38 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %target_loop, align 8, !dbg !3700
  %39 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %target_nest, align 8, !dbg !3701
  %loops = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %39, i32 0, i32 0, !dbg !3701
  %40 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %loops, align 8, !dbg !3701
  %41 = load i32, i32* %i, align 4, !dbg !3702
  %idxprom14 = sext i32 %41 to i64, !dbg !3701
  %arrayidx15 = getelementptr inbounds %struct.lambda_loop_s*, %struct.lambda_loop_s** %40, i64 %idxprom14, !dbg !3701
  store %struct.lambda_loop_s* %38, %struct.lambda_loop_s** %arrayidx15, align 8, !dbg !3703
  %42 = load i32**, i32*** %target, align 8, !dbg !3704
  %43 = load i32, i32* %i, align 4, !dbg !3705
  %idxprom16 = sext i32 %43 to i64, !dbg !3704
  %arrayidx17 = getelementptr inbounds i32*, i32** %42, i64 %idxprom16, !dbg !3704
  %44 = load i32*, i32** %arrayidx17, align 8, !dbg !3704
  %45 = load i32, i32* %i, align 4, !dbg !3706
  %call18 = call i32 @lambda_vector_gcd(i32* %44, i32 %45), !dbg !3707
  store i32 %call18, i32* %gcd1, align 4, !dbg !3708
  %46 = load i32, i32* %gcd1, align 4, !dbg !3709
  %47 = load i32, i32* %determinant, align 4, !dbg !3710
  %call19 = call i32 @gcd(i32 %46, i32 %47), !dbg !3711
  store i32 %call19, i32* %gcd1, align 4, !dbg !3712
  store i32 0, i32* %j, align 4, !dbg !3713
  br label %for.cond20, !dbg !3715

for.cond20:                                       ; preds = %for.inc31, %for.body12
  %48 = load i32, i32* %j, align 4, !dbg !3716
  %49 = load i32, i32* %i, align 4, !dbg !3718
  %cmp21 = icmp slt i32 %48, %49, !dbg !3719
  br i1 %cmp21, label %for.body22, label %for.end33, !dbg !3720

for.body22:                                       ; preds = %for.cond20
  %50 = load i32**, i32*** %target, align 8, !dbg !3721
  %51 = load i32, i32* %i, align 4, !dbg !3722
  %idxprom23 = sext i32 %51 to i64, !dbg !3721
  %arrayidx24 = getelementptr inbounds i32*, i32** %50, i64 %idxprom23, !dbg !3721
  %52 = load i32*, i32** %arrayidx24, align 8, !dbg !3721
  %53 = load i32, i32* %j, align 4, !dbg !3723
  %idxprom25 = sext i32 %53 to i64, !dbg !3721
  %arrayidx26 = getelementptr inbounds i32, i32* %52, i64 %idxprom25, !dbg !3721
  %54 = load i32, i32* %arrayidx26, align 4, !dbg !3721
  %55 = load i32, i32* %gcd1, align 4, !dbg !3724
  %div = sdiv i32 %54, %55, !dbg !3725
  %56 = load i32**, i32*** %target, align 8, !dbg !3726
  %57 = load i32, i32* %i, align 4, !dbg !3727
  %idxprom27 = sext i32 %57 to i64, !dbg !3726
  %arrayidx28 = getelementptr inbounds i32*, i32** %56, i64 %idxprom27, !dbg !3726
  %58 = load i32*, i32** %arrayidx28, align 8, !dbg !3726
  %59 = load i32, i32* %j, align 4, !dbg !3728
  %idxprom29 = sext i32 %59 to i64, !dbg !3726
  %arrayidx30 = getelementptr inbounds i32, i32* %58, i64 %idxprom29, !dbg !3726
  store i32 %div, i32* %arrayidx30, align 4, !dbg !3729
  br label %for.inc31, !dbg !3726

for.inc31:                                        ; preds = %for.body22
  %60 = load i32, i32* %j, align 4, !dbg !3730
  %inc32 = add nsw i32 %60, 1, !dbg !3730
  store i32 %inc32, i32* %j, align 4, !dbg !3730
  br label %for.cond20, !dbg !3731, !llvm.loop !3732

for.end33:                                        ; preds = %for.cond20
  %61 = load i32, i32* %depth, align 4, !dbg !3734
  %62 = load i32, i32* %invariants, align 4, !dbg !3735
  %63 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !3736
  %call34 = call %struct.lambda_linear_expression_s* @lambda_linear_expression_new(i32 %61, i32 %62, %struct.obstack* %63), !dbg !3737
  store %struct.lambda_linear_expression_s* %call34, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3738
  %64 = load i32**, i32*** %target, align 8, !dbg !3739
  %65 = load i32, i32* %i, align 4, !dbg !3740
  %idxprom35 = sext i32 %65 to i64, !dbg !3739
  %arrayidx36 = getelementptr inbounds i32*, i32** %64, i64 %idxprom35, !dbg !3739
  %66 = load i32*, i32** %arrayidx36, align 8, !dbg !3739
  %67 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3741
  %coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %67, i32 0, i32 0, !dbg !3741
  %68 = load i32*, i32** %coefficients, align 8, !dbg !3741
  %69 = load i32, i32* %depth, align 4, !dbg !3742
  call void @lambda_vector_copy(i32* %66, i32* %68, i32 %69), !dbg !3743
  %70 = load i32, i32* %determinant, align 4, !dbg !3744
  %71 = load i32, i32* %gcd1, align 4, !dbg !3745
  %div37 = sdiv i32 %70, %71, !dbg !3746
  %72 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3747
  %denominator = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %72, i32 0, i32 3, !dbg !3747
  store i32 %div37, i32* %denominator, align 8, !dbg !3748
  %73 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3749
  %constant = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %73, i32 0, i32 1, !dbg !3749
  store i32 0, i32* %constant, align 8, !dbg !3750
  %74 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3751
  %invariant_coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %74, i32 0, i32 2, !dbg !3751
  %75 = load i32*, i32** %invariant_coefficients, align 8, !dbg !3751
  %76 = load i32, i32* %invariants, align 4, !dbg !3752
  call void @lambda_vector_clear(i32* %75, i32 %76), !dbg !3753
  %77 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !3754
  %78 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %target_loop, align 8, !dbg !3755
  %linear_offset = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %78, i32 0, i32 2, !dbg !3755
  store %struct.lambda_linear_expression_s* %77, %struct.lambda_linear_expression_s** %linear_offset, align 8, !dbg !3756
  br label %for.inc38, !dbg !3757

for.inc38:                                        ; preds = %for.end33
  %79 = load i32, i32* %i, align 4, !dbg !3758
  %inc39 = add nsw i32 %79, 1, !dbg !3758
  store i32 %inc39, i32* %i, align 4, !dbg !3758
  br label %for.cond10, !dbg !3759, !llvm.loop !3760

for.end40:                                        ; preds = %for.cond10
  store i32 0, i32* %i, align 4, !dbg !3762
  br label %for.cond41, !dbg !3764

for.cond41:                                       ; preds = %for.inc203, %for.end40
  %80 = load i32, i32* %i, align 4, !dbg !3765
  %81 = load i32, i32* %depth, align 4, !dbg !3767
  %cmp42 = icmp slt i32 %80, %81, !dbg !3768
  br i1 %cmp42, label %for.body43, label %for.end205, !dbg !3769

for.body43:                                       ; preds = %for.cond41
  %82 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %auxillary_nest.addr, align 8, !dbg !3770
  %loops44 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %82, i32 0, i32 0, !dbg !3770
  %83 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %loops44, align 8, !dbg !3770
  %84 = load i32, i32* %i, align 4, !dbg !3772
  %idxprom45 = sext i32 %84 to i64, !dbg !3770
  %arrayidx46 = getelementptr inbounds %struct.lambda_loop_s*, %struct.lambda_loop_s** %83, i64 %idxprom45, !dbg !3770
  %85 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %arrayidx46, align 8, !dbg !3770
  store %struct.lambda_loop_s* %85, %struct.lambda_loop_s** %auxillary_loop, align 8, !dbg !3773
  %86 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %target_nest, align 8, !dbg !3774
  %loops47 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %86, i32 0, i32 0, !dbg !3774
  %87 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %loops47, align 8, !dbg !3774
  %88 = load i32, i32* %i, align 4, !dbg !3775
  %idxprom48 = sext i32 %88 to i64, !dbg !3774
  %arrayidx49 = getelementptr inbounds %struct.lambda_loop_s*, %struct.lambda_loop_s** %87, i64 %idxprom48, !dbg !3774
  %89 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %arrayidx49, align 8, !dbg !3774
  store %struct.lambda_loop_s* %89, %struct.lambda_loop_s** %target_loop, align 8, !dbg !3776
  %90 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %H.addr, align 8, !dbg !3777
  %matrix50 = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %90, i32 0, i32 0, !dbg !3777
  %91 = load i32**, i32*** %matrix50, align 8, !dbg !3777
  %92 = load i32, i32* %i, align 4, !dbg !3778
  %idxprom51 = sext i32 %92 to i64, !dbg !3777
  %arrayidx52 = getelementptr inbounds i32*, i32** %91, i64 %idxprom51, !dbg !3777
  %93 = load i32*, i32** %arrayidx52, align 8, !dbg !3777
  %94 = load i32, i32* %i, align 4, !dbg !3779
  %idxprom53 = sext i32 %94 to i64, !dbg !3777
  %arrayidx54 = getelementptr inbounds i32, i32* %93, i64 %idxprom53, !dbg !3777
  %95 = load i32, i32* %arrayidx54, align 4, !dbg !3777
  %96 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %target_loop, align 8, !dbg !3780
  %step = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %96, i32 0, i32 3, !dbg !3780
  store i32 %95, i32* %step, align 8, !dbg !3781
  %97 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %H.addr, align 8, !dbg !3782
  %matrix55 = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %97, i32 0, i32 0, !dbg !3782
  %98 = load i32**, i32*** %matrix55, align 8, !dbg !3782
  %99 = load i32, i32* %i, align 4, !dbg !3783
  %idxprom56 = sext i32 %99 to i64, !dbg !3782
  %arrayidx57 = getelementptr inbounds i32*, i32** %98, i64 %idxprom56, !dbg !3782
  %100 = load i32*, i32** %arrayidx57, align 8, !dbg !3782
  %101 = load i32, i32* %i, align 4, !dbg !3784
  %idxprom58 = sext i32 %101 to i64, !dbg !3782
  %arrayidx59 = getelementptr inbounds i32, i32* %100, i64 %idxprom58, !dbg !3782
  %102 = load i32, i32* %arrayidx59, align 4, !dbg !3782
  store i32 %102, i32* %factor, align 4, !dbg !3785
  %103 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %auxillary_loop, align 8, !dbg !3786
  %lower_bound = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %103, i32 0, i32 0, !dbg !3786
  %104 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lower_bound, align 8, !dbg !3786
  store %struct.lambda_linear_expression_s* %104, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !3787
  br label %for.cond60, !dbg !3788

for.cond60:                                       ; preds = %for.inc126, %for.body43
  %105 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !3789
  %cmp61 = icmp ne %struct.lambda_linear_expression_s* %105, null, !dbg !3792
  br i1 %cmp61, label %for.body62, label %for.end128, !dbg !3793

for.body62:                                       ; preds = %for.cond60
  %106 = load i32, i32* %depth, align 4, !dbg !3794
  %107 = load i32, i32* %invariants, align 4, !dbg !3796
  %108 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !3797
  %call63 = call %struct.lambda_linear_expression_s* @lambda_linear_expression_new(i32 %106, i32 %107, %struct.obstack* %108), !dbg !3798
  store %struct.lambda_linear_expression_s* %call63, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3799
  %109 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !3800
  %coefficients64 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %109, i32 0, i32 0, !dbg !3800
  %110 = load i32*, i32** %coefficients64, align 8, !dbg !3800
  %111 = load i32, i32* %depth, align 4, !dbg !3801
  %112 = load i32**, i32*** %inverse, align 8, !dbg !3802
  %113 = load i32, i32* %depth, align 4, !dbg !3803
  %114 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3804
  %coefficients65 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %114, i32 0, i32 0, !dbg !3804
  %115 = load i32*, i32** %coefficients65, align 8, !dbg !3804
  call void @lambda_vector_matrix_mult(i32* %110, i32 %111, i32** %112, i32 %113, i32* %115), !dbg !3805
  %116 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3806
  %coefficients66 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %116, i32 0, i32 0, !dbg !3806
  %117 = load i32*, i32** %coefficients66, align 8, !dbg !3806
  %118 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3807
  %coefficients67 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %118, i32 0, i32 0, !dbg !3807
  %119 = load i32*, i32** %coefficients67, align 8, !dbg !3807
  %120 = load i32, i32* %depth, align 4, !dbg !3808
  %121 = load i32, i32* %factor, align 4, !dbg !3809
  call void @lambda_vector_mult_const(i32* %117, i32* %119, i32 %120, i32 %121), !dbg !3810
  %122 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !3811
  %constant68 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %122, i32 0, i32 1, !dbg !3811
  %123 = load i32, i32* %constant68, align 8, !dbg !3811
  %124 = load i32, i32* %factor, align 4, !dbg !3812
  %mul = mul nsw i32 %123, %124, !dbg !3813
  %125 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3814
  %constant69 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %125, i32 0, i32 1, !dbg !3814
  store i32 %mul, i32* %constant69, align 8, !dbg !3815
  %126 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !3816
  %invariant_coefficients70 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %126, i32 0, i32 2, !dbg !3816
  %127 = load i32*, i32** %invariant_coefficients70, align 8, !dbg !3816
  %128 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3817
  %invariant_coefficients71 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %128, i32 0, i32 2, !dbg !3817
  %129 = load i32*, i32** %invariant_coefficients71, align 8, !dbg !3817
  %130 = load i32, i32* %invariants, align 4, !dbg !3818
  call void @lambda_vector_copy(i32* %127, i32* %129, i32 %130), !dbg !3819
  %131 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3820
  %invariant_coefficients72 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %131, i32 0, i32 2, !dbg !3820
  %132 = load i32*, i32** %invariant_coefficients72, align 8, !dbg !3820
  %133 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3821
  %invariant_coefficients73 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %133, i32 0, i32 2, !dbg !3821
  %134 = load i32*, i32** %invariant_coefficients73, align 8, !dbg !3821
  %135 = load i32, i32* %invariants, align 4, !dbg !3822
  %136 = load i32, i32* %factor, align 4, !dbg !3823
  call void @lambda_vector_mult_const(i32* %132, i32* %134, i32 %135, i32 %136), !dbg !3824
  %137 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !3825
  %denominator74 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %137, i32 0, i32 3, !dbg !3825
  %138 = load i32, i32* %denominator74, align 8, !dbg !3825
  %139 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3826
  %denominator75 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %139, i32 0, i32 3, !dbg !3826
  store i32 %138, i32* %denominator75, align 8, !dbg !3827
  %140 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3828
  %coefficients76 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %140, i32 0, i32 0, !dbg !3828
  %141 = load i32*, i32** %coefficients76, align 8, !dbg !3828
  %142 = load i32, i32* %depth, align 4, !dbg !3830
  %call77 = call zeroext i8 @lambda_vector_zerop(i32* %141, i32 %142), !dbg !3831
  %tobool = icmp ne i8 %call77, 0, !dbg !3831
  br i1 %tobool, label %if.end, label %if.then, !dbg !3832

if.then:                                          ; preds = %for.body62
  %143 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3833
  %constant78 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %143, i32 0, i32 1, !dbg !3833
  %144 = load i32, i32* %constant78, align 8, !dbg !3833
  %145 = load i32, i32* %determinant, align 4, !dbg !3835
  %mul79 = mul nsw i32 %144, %145, !dbg !3836
  %146 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3837
  %constant80 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %146, i32 0, i32 1, !dbg !3837
  store i32 %mul79, i32* %constant80, align 8, !dbg !3838
  %147 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3839
  %invariant_coefficients81 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %147, i32 0, i32 2, !dbg !3839
  %148 = load i32*, i32** %invariant_coefficients81, align 8, !dbg !3839
  %149 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3840
  %invariant_coefficients82 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %149, i32 0, i32 2, !dbg !3840
  %150 = load i32*, i32** %invariant_coefficients82, align 8, !dbg !3840
  %151 = load i32, i32* %invariants, align 4, !dbg !3841
  %152 = load i32, i32* %determinant, align 4, !dbg !3842
  call void @lambda_vector_mult_const(i32* %148, i32* %150, i32 %151, i32 %152), !dbg !3843
  %153 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3844
  %denominator83 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %153, i32 0, i32 3, !dbg !3844
  %154 = load i32, i32* %denominator83, align 8, !dbg !3844
  %155 = load i32, i32* %determinant, align 4, !dbg !3845
  %mul84 = mul nsw i32 %154, %155, !dbg !3846
  %156 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3847
  %denominator85 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %156, i32 0, i32 3, !dbg !3847
  store i32 %mul84, i32* %denominator85, align 8, !dbg !3848
  br label %if.end, !dbg !3849

if.end:                                           ; preds = %if.then, %for.body62
  %157 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3850
  %coefficients86 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %157, i32 0, i32 0, !dbg !3850
  %158 = load i32*, i32** %coefficients86, align 8, !dbg !3850
  %159 = load i32, i32* %depth, align 4, !dbg !3851
  %call87 = call i32 @lambda_vector_gcd(i32* %158, i32 %159), !dbg !3852
  store i32 %call87, i32* %gcd1, align 4, !dbg !3853
  %160 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3854
  %invariant_coefficients88 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %160, i32 0, i32 2, !dbg !3854
  %161 = load i32*, i32** %invariant_coefficients88, align 8, !dbg !3854
  %162 = load i32, i32* %invariants, align 4, !dbg !3855
  %call89 = call i32 @lambda_vector_gcd(i32* %161, i32 %162), !dbg !3856
  store i32 %call89, i32* %gcd2, align 4, !dbg !3857
  %163 = load i32, i32* %gcd1, align 4, !dbg !3858
  %164 = load i32, i32* %gcd2, align 4, !dbg !3859
  %call90 = call i32 @gcd(i32 %163, i32 %164), !dbg !3860
  store i32 %call90, i32* %gcd1, align 4, !dbg !3861
  %165 = load i32, i32* %gcd1, align 4, !dbg !3862
  %166 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3863
  %constant91 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %166, i32 0, i32 1, !dbg !3863
  %167 = load i32, i32* %constant91, align 8, !dbg !3863
  %call92 = call i32 @gcd(i32 %165, i32 %167), !dbg !3864
  store i32 %call92, i32* %gcd1, align 4, !dbg !3865
  %168 = load i32, i32* %gcd1, align 4, !dbg !3866
  %169 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3867
  %denominator93 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %169, i32 0, i32 3, !dbg !3867
  %170 = load i32, i32* %denominator93, align 8, !dbg !3867
  %call94 = call i32 @gcd(i32 %168, i32 %170), !dbg !3868
  store i32 %call94, i32* %gcd1, align 4, !dbg !3869
  store i32 0, i32* %j, align 4, !dbg !3870
  br label %for.cond95, !dbg !3872

for.cond95:                                       ; preds = %for.inc102, %if.end
  %171 = load i32, i32* %j, align 4, !dbg !3873
  %172 = load i32, i32* %depth, align 4, !dbg !3875
  %cmp96 = icmp slt i32 %171, %172, !dbg !3876
  br i1 %cmp96, label %for.body97, label %for.end104, !dbg !3877

for.body97:                                       ; preds = %for.cond95
  %173 = load i32, i32* %gcd1, align 4, !dbg !3878
  %174 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3879
  %coefficients98 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %174, i32 0, i32 0, !dbg !3879
  %175 = load i32*, i32** %coefficients98, align 8, !dbg !3879
  %176 = load i32, i32* %j, align 4, !dbg !3880
  %idxprom99 = sext i32 %176 to i64, !dbg !3879
  %arrayidx100 = getelementptr inbounds i32, i32* %175, i64 %idxprom99, !dbg !3879
  %177 = load i32, i32* %arrayidx100, align 4, !dbg !3881
  %div101 = sdiv i32 %177, %173, !dbg !3881
  store i32 %div101, i32* %arrayidx100, align 4, !dbg !3881
  br label %for.inc102, !dbg !3879

for.inc102:                                       ; preds = %for.body97
  %178 = load i32, i32* %j, align 4, !dbg !3882
  %inc103 = add nsw i32 %178, 1, !dbg !3882
  store i32 %inc103, i32* %j, align 4, !dbg !3882
  br label %for.cond95, !dbg !3883, !llvm.loop !3884

for.end104:                                       ; preds = %for.cond95
  store i32 0, i32* %j, align 4, !dbg !3886
  br label %for.cond105, !dbg !3888

for.cond105:                                      ; preds = %for.inc112, %for.end104
  %179 = load i32, i32* %j, align 4, !dbg !3889
  %180 = load i32, i32* %invariants, align 4, !dbg !3891
  %cmp106 = icmp slt i32 %179, %180, !dbg !3892
  br i1 %cmp106, label %for.body107, label %for.end114, !dbg !3893

for.body107:                                      ; preds = %for.cond105
  %181 = load i32, i32* %gcd1, align 4, !dbg !3894
  %182 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3895
  %invariant_coefficients108 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %182, i32 0, i32 2, !dbg !3895
  %183 = load i32*, i32** %invariant_coefficients108, align 8, !dbg !3895
  %184 = load i32, i32* %j, align 4, !dbg !3896
  %idxprom109 = sext i32 %184 to i64, !dbg !3895
  %arrayidx110 = getelementptr inbounds i32, i32* %183, i64 %idxprom109, !dbg !3895
  %185 = load i32, i32* %arrayidx110, align 4, !dbg !3897
  %div111 = sdiv i32 %185, %181, !dbg !3897
  store i32 %div111, i32* %arrayidx110, align 4, !dbg !3897
  br label %for.inc112, !dbg !3895

for.inc112:                                       ; preds = %for.body107
  %186 = load i32, i32* %j, align 4, !dbg !3898
  %inc113 = add nsw i32 %186, 1, !dbg !3898
  store i32 %inc113, i32* %j, align 4, !dbg !3898
  br label %for.cond105, !dbg !3899, !llvm.loop !3900

for.end114:                                       ; preds = %for.cond105
  %187 = load i32, i32* %gcd1, align 4, !dbg !3902
  %188 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3903
  %constant115 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %188, i32 0, i32 1, !dbg !3903
  %189 = load i32, i32* %constant115, align 8, !dbg !3904
  %div116 = sdiv i32 %189, %187, !dbg !3904
  store i32 %div116, i32* %constant115, align 8, !dbg !3904
  %190 = load i32, i32* %gcd1, align 4, !dbg !3905
  %191 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3906
  %denominator117 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %191, i32 0, i32 3, !dbg !3906
  %192 = load i32, i32* %denominator117, align 8, !dbg !3907
  %div118 = sdiv i32 %192, %190, !dbg !3907
  store i32 %div118, i32* %denominator117, align 8, !dbg !3907
  %193 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %target_loop, align 8, !dbg !3908
  %lower_bound119 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %193, i32 0, i32 0, !dbg !3908
  %194 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lower_bound119, align 8, !dbg !3908
  %195 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3910
  %196 = load i32, i32* %depth, align 4, !dbg !3911
  %197 = load i32, i32* %invariants, align 4, !dbg !3912
  %call120 = call zeroext i8 @lle_equal(%struct.lambda_linear_expression_s* %194, %struct.lambda_linear_expression_s* %195, i32 %196, i32 %197), !dbg !3913
  %tobool121 = icmp ne i8 %call120, 0, !dbg !3913
  br i1 %tobool121, label %if.end125, label %if.then122, !dbg !3914

if.then122:                                       ; preds = %for.end114
  %198 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %target_loop, align 8, !dbg !3915
  %lower_bound123 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %198, i32 0, i32 0, !dbg !3915
  %199 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lower_bound123, align 8, !dbg !3915
  %200 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3917
  %next = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %200, i32 0, i32 4, !dbg !3917
  store %struct.lambda_linear_expression_s* %199, %struct.lambda_linear_expression_s** %next, align 8, !dbg !3918
  %201 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3919
  %202 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %target_loop, align 8, !dbg !3920
  %lower_bound124 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %202, i32 0, i32 0, !dbg !3920
  store %struct.lambda_linear_expression_s* %201, %struct.lambda_linear_expression_s** %lower_bound124, align 8, !dbg !3921
  br label %if.end125, !dbg !3922

if.end125:                                        ; preds = %if.then122, %for.end114
  br label %for.inc126, !dbg !3923

for.inc126:                                       ; preds = %if.end125
  %203 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !3924
  %next127 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %203, i32 0, i32 4, !dbg !3924
  %204 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %next127, align 8, !dbg !3924
  store %struct.lambda_linear_expression_s* %204, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !3925
  br label %for.cond60, !dbg !3926, !llvm.loop !3927

for.end128:                                       ; preds = %for.cond60
  %205 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %auxillary_loop, align 8, !dbg !3929
  %upper_bound = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %205, i32 0, i32 1, !dbg !3929
  %206 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %upper_bound, align 8, !dbg !3929
  store %struct.lambda_linear_expression_s* %206, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !3930
  br label %for.cond129, !dbg !3931

for.cond129:                                      ; preds = %for.inc200, %for.end128
  %207 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !3932
  %cmp130 = icmp ne %struct.lambda_linear_expression_s* %207, null, !dbg !3935
  br i1 %cmp130, label %for.body131, label %for.end202, !dbg !3936

for.body131:                                      ; preds = %for.cond129
  %208 = load i32, i32* %depth, align 4, !dbg !3937
  %209 = load i32, i32* %invariants, align 4, !dbg !3939
  %210 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !3940
  %call132 = call %struct.lambda_linear_expression_s* @lambda_linear_expression_new(i32 %208, i32 %209, %struct.obstack* %210), !dbg !3941
  store %struct.lambda_linear_expression_s* %call132, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3942
  %211 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !3943
  %coefficients133 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %211, i32 0, i32 0, !dbg !3943
  %212 = load i32*, i32** %coefficients133, align 8, !dbg !3943
  %213 = load i32, i32* %depth, align 4, !dbg !3944
  %214 = load i32**, i32*** %inverse, align 8, !dbg !3945
  %215 = load i32, i32* %depth, align 4, !dbg !3946
  %216 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3947
  %coefficients134 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %216, i32 0, i32 0, !dbg !3947
  %217 = load i32*, i32** %coefficients134, align 8, !dbg !3947
  call void @lambda_vector_matrix_mult(i32* %212, i32 %213, i32** %214, i32 %215, i32* %217), !dbg !3948
  %218 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3949
  %coefficients135 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %218, i32 0, i32 0, !dbg !3949
  %219 = load i32*, i32** %coefficients135, align 8, !dbg !3949
  %220 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3950
  %coefficients136 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %220, i32 0, i32 0, !dbg !3950
  %221 = load i32*, i32** %coefficients136, align 8, !dbg !3950
  %222 = load i32, i32* %depth, align 4, !dbg !3951
  %223 = load i32, i32* %factor, align 4, !dbg !3952
  call void @lambda_vector_mult_const(i32* %219, i32* %221, i32 %222, i32 %223), !dbg !3953
  %224 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !3954
  %constant137 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %224, i32 0, i32 1, !dbg !3954
  %225 = load i32, i32* %constant137, align 8, !dbg !3954
  %226 = load i32, i32* %factor, align 4, !dbg !3955
  %mul138 = mul nsw i32 %225, %226, !dbg !3956
  %227 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3957
  %constant139 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %227, i32 0, i32 1, !dbg !3957
  store i32 %mul138, i32* %constant139, align 8, !dbg !3958
  %228 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !3959
  %invariant_coefficients140 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %228, i32 0, i32 2, !dbg !3959
  %229 = load i32*, i32** %invariant_coefficients140, align 8, !dbg !3959
  %230 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3960
  %invariant_coefficients141 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %230, i32 0, i32 2, !dbg !3960
  %231 = load i32*, i32** %invariant_coefficients141, align 8, !dbg !3960
  %232 = load i32, i32* %invariants, align 4, !dbg !3961
  call void @lambda_vector_copy(i32* %229, i32* %231, i32 %232), !dbg !3962
  %233 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3963
  %invariant_coefficients142 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %233, i32 0, i32 2, !dbg !3963
  %234 = load i32*, i32** %invariant_coefficients142, align 8, !dbg !3963
  %235 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3964
  %invariant_coefficients143 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %235, i32 0, i32 2, !dbg !3964
  %236 = load i32*, i32** %invariant_coefficients143, align 8, !dbg !3964
  %237 = load i32, i32* %invariants, align 4, !dbg !3965
  %238 = load i32, i32* %factor, align 4, !dbg !3966
  call void @lambda_vector_mult_const(i32* %234, i32* %236, i32 %237, i32 %238), !dbg !3967
  %239 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !3968
  %denominator144 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %239, i32 0, i32 3, !dbg !3968
  %240 = load i32, i32* %denominator144, align 8, !dbg !3968
  %241 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3969
  %denominator145 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %241, i32 0, i32 3, !dbg !3969
  store i32 %240, i32* %denominator145, align 8, !dbg !3970
  %242 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3971
  %coefficients146 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %242, i32 0, i32 0, !dbg !3971
  %243 = load i32*, i32** %coefficients146, align 8, !dbg !3971
  %244 = load i32, i32* %depth, align 4, !dbg !3973
  %call147 = call zeroext i8 @lambda_vector_zerop(i32* %243, i32 %244), !dbg !3974
  %tobool148 = icmp ne i8 %call147, 0, !dbg !3974
  br i1 %tobool148, label %if.end158, label %if.then149, !dbg !3975

if.then149:                                       ; preds = %for.body131
  %245 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3976
  %constant150 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %245, i32 0, i32 1, !dbg !3976
  %246 = load i32, i32* %constant150, align 8, !dbg !3976
  %247 = load i32, i32* %determinant, align 4, !dbg !3978
  %mul151 = mul nsw i32 %246, %247, !dbg !3979
  %248 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3980
  %constant152 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %248, i32 0, i32 1, !dbg !3980
  store i32 %mul151, i32* %constant152, align 8, !dbg !3981
  %249 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3982
  %invariant_coefficients153 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %249, i32 0, i32 2, !dbg !3982
  %250 = load i32*, i32** %invariant_coefficients153, align 8, !dbg !3982
  %251 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3983
  %invariant_coefficients154 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %251, i32 0, i32 2, !dbg !3983
  %252 = load i32*, i32** %invariant_coefficients154, align 8, !dbg !3983
  %253 = load i32, i32* %invariants, align 4, !dbg !3984
  %254 = load i32, i32* %determinant, align 4, !dbg !3985
  call void @lambda_vector_mult_const(i32* %250, i32* %252, i32 %253, i32 %254), !dbg !3986
  %255 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3987
  %denominator155 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %255, i32 0, i32 3, !dbg !3987
  %256 = load i32, i32* %denominator155, align 8, !dbg !3987
  %257 = load i32, i32* %determinant, align 4, !dbg !3988
  %mul156 = mul nsw i32 %256, %257, !dbg !3989
  %258 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3990
  %denominator157 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %258, i32 0, i32 3, !dbg !3990
  store i32 %mul156, i32* %denominator157, align 8, !dbg !3991
  br label %if.end158, !dbg !3992

if.end158:                                        ; preds = %if.then149, %for.body131
  %259 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3993
  %coefficients159 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %259, i32 0, i32 0, !dbg !3993
  %260 = load i32*, i32** %coefficients159, align 8, !dbg !3993
  %261 = load i32, i32* %depth, align 4, !dbg !3994
  %call160 = call i32 @lambda_vector_gcd(i32* %260, i32 %261), !dbg !3995
  store i32 %call160, i32* %gcd1, align 4, !dbg !3996
  %262 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !3997
  %invariant_coefficients161 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %262, i32 0, i32 2, !dbg !3997
  %263 = load i32*, i32** %invariant_coefficients161, align 8, !dbg !3997
  %264 = load i32, i32* %invariants, align 4, !dbg !3998
  %call162 = call i32 @lambda_vector_gcd(i32* %263, i32 %264), !dbg !3999
  store i32 %call162, i32* %gcd2, align 4, !dbg !4000
  %265 = load i32, i32* %gcd1, align 4, !dbg !4001
  %266 = load i32, i32* %gcd2, align 4, !dbg !4002
  %call163 = call i32 @gcd(i32 %265, i32 %266), !dbg !4003
  store i32 %call163, i32* %gcd1, align 4, !dbg !4004
  %267 = load i32, i32* %gcd1, align 4, !dbg !4005
  %268 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !4006
  %constant164 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %268, i32 0, i32 1, !dbg !4006
  %269 = load i32, i32* %constant164, align 8, !dbg !4006
  %call165 = call i32 @gcd(i32 %267, i32 %269), !dbg !4007
  store i32 %call165, i32* %gcd1, align 4, !dbg !4008
  %270 = load i32, i32* %gcd1, align 4, !dbg !4009
  %271 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !4010
  %denominator166 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %271, i32 0, i32 3, !dbg !4010
  %272 = load i32, i32* %denominator166, align 8, !dbg !4010
  %call167 = call i32 @gcd(i32 %270, i32 %272), !dbg !4011
  store i32 %call167, i32* %gcd1, align 4, !dbg !4012
  store i32 0, i32* %j, align 4, !dbg !4013
  br label %for.cond168, !dbg !4015

for.cond168:                                      ; preds = %for.inc175, %if.end158
  %273 = load i32, i32* %j, align 4, !dbg !4016
  %274 = load i32, i32* %depth, align 4, !dbg !4018
  %cmp169 = icmp slt i32 %273, %274, !dbg !4019
  br i1 %cmp169, label %for.body170, label %for.end177, !dbg !4020

for.body170:                                      ; preds = %for.cond168
  %275 = load i32, i32* %gcd1, align 4, !dbg !4021
  %276 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !4022
  %coefficients171 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %276, i32 0, i32 0, !dbg !4022
  %277 = load i32*, i32** %coefficients171, align 8, !dbg !4022
  %278 = load i32, i32* %j, align 4, !dbg !4023
  %idxprom172 = sext i32 %278 to i64, !dbg !4022
  %arrayidx173 = getelementptr inbounds i32, i32* %277, i64 %idxprom172, !dbg !4022
  %279 = load i32, i32* %arrayidx173, align 4, !dbg !4024
  %div174 = sdiv i32 %279, %275, !dbg !4024
  store i32 %div174, i32* %arrayidx173, align 4, !dbg !4024
  br label %for.inc175, !dbg !4022

for.inc175:                                       ; preds = %for.body170
  %280 = load i32, i32* %j, align 4, !dbg !4025
  %inc176 = add nsw i32 %280, 1, !dbg !4025
  store i32 %inc176, i32* %j, align 4, !dbg !4025
  br label %for.cond168, !dbg !4026, !llvm.loop !4027

for.end177:                                       ; preds = %for.cond168
  store i32 0, i32* %j, align 4, !dbg !4029
  br label %for.cond178, !dbg !4031

for.cond178:                                      ; preds = %for.inc185, %for.end177
  %281 = load i32, i32* %j, align 4, !dbg !4032
  %282 = load i32, i32* %invariants, align 4, !dbg !4034
  %cmp179 = icmp slt i32 %281, %282, !dbg !4035
  br i1 %cmp179, label %for.body180, label %for.end187, !dbg !4036

for.body180:                                      ; preds = %for.cond178
  %283 = load i32, i32* %gcd1, align 4, !dbg !4037
  %284 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !4038
  %invariant_coefficients181 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %284, i32 0, i32 2, !dbg !4038
  %285 = load i32*, i32** %invariant_coefficients181, align 8, !dbg !4038
  %286 = load i32, i32* %j, align 4, !dbg !4039
  %idxprom182 = sext i32 %286 to i64, !dbg !4038
  %arrayidx183 = getelementptr inbounds i32, i32* %285, i64 %idxprom182, !dbg !4038
  %287 = load i32, i32* %arrayidx183, align 4, !dbg !4040
  %div184 = sdiv i32 %287, %283, !dbg !4040
  store i32 %div184, i32* %arrayidx183, align 4, !dbg !4040
  br label %for.inc185, !dbg !4038

for.inc185:                                       ; preds = %for.body180
  %288 = load i32, i32* %j, align 4, !dbg !4041
  %inc186 = add nsw i32 %288, 1, !dbg !4041
  store i32 %inc186, i32* %j, align 4, !dbg !4041
  br label %for.cond178, !dbg !4042, !llvm.loop !4043

for.end187:                                       ; preds = %for.cond178
  %289 = load i32, i32* %gcd1, align 4, !dbg !4045
  %290 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !4046
  %constant188 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %290, i32 0, i32 1, !dbg !4046
  %291 = load i32, i32* %constant188, align 8, !dbg !4047
  %div189 = sdiv i32 %291, %289, !dbg !4047
  store i32 %div189, i32* %constant188, align 8, !dbg !4047
  %292 = load i32, i32* %gcd1, align 4, !dbg !4048
  %293 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !4049
  %denominator190 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %293, i32 0, i32 3, !dbg !4049
  %294 = load i32, i32* %denominator190, align 8, !dbg !4050
  %div191 = sdiv i32 %294, %292, !dbg !4050
  store i32 %div191, i32* %denominator190, align 8, !dbg !4050
  %295 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %target_loop, align 8, !dbg !4051
  %upper_bound192 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %295, i32 0, i32 1, !dbg !4051
  %296 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %upper_bound192, align 8, !dbg !4051
  %297 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !4053
  %298 = load i32, i32* %depth, align 4, !dbg !4054
  %299 = load i32, i32* %invariants, align 4, !dbg !4055
  %call193 = call zeroext i8 @lle_equal(%struct.lambda_linear_expression_s* %296, %struct.lambda_linear_expression_s* %297, i32 %298, i32 %299), !dbg !4056
  %tobool194 = icmp ne i8 %call193, 0, !dbg !4056
  br i1 %tobool194, label %if.end199, label %if.then195, !dbg !4057

if.then195:                                       ; preds = %for.end187
  %300 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %target_loop, align 8, !dbg !4058
  %upper_bound196 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %300, i32 0, i32 1, !dbg !4058
  %301 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %upper_bound196, align 8, !dbg !4058
  %302 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !4060
  %next197 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %302, i32 0, i32 4, !dbg !4060
  store %struct.lambda_linear_expression_s* %301, %struct.lambda_linear_expression_s** %next197, align 8, !dbg !4061
  %303 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %target_expr, align 8, !dbg !4062
  %304 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %target_loop, align 8, !dbg !4063
  %upper_bound198 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %304, i32 0, i32 1, !dbg !4063
  store %struct.lambda_linear_expression_s* %303, %struct.lambda_linear_expression_s** %upper_bound198, align 8, !dbg !4064
  br label %if.end199, !dbg !4065

if.end199:                                        ; preds = %if.then195, %for.end187
  br label %for.inc200, !dbg !4066

for.inc200:                                       ; preds = %if.end199
  %305 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !4067
  %next201 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %305, i32 0, i32 4, !dbg !4067
  %306 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %next201, align 8, !dbg !4067
  store %struct.lambda_linear_expression_s* %306, %struct.lambda_linear_expression_s** %auxillary_expr, align 8, !dbg !4068
  br label %for.cond129, !dbg !4069, !llvm.loop !4070

for.end202:                                       ; preds = %for.cond129
  br label %for.inc203, !dbg !4072

for.inc203:                                       ; preds = %for.end202
  %307 = load i32, i32* %i, align 4, !dbg !4073
  %inc204 = add nsw i32 %307, 1, !dbg !4073
  store i32 %inc204, i32* %i, align 4, !dbg !4073
  br label %for.cond41, !dbg !4074, !llvm.loop !4075

for.end205:                                       ; preds = %for.cond41
  store i32 0, i32* %i, align 4, !dbg !4077
  br label %for.cond206, !dbg !4079

for.cond206:                                      ; preds = %for.inc223, %for.end205
  %308 = load i32, i32* %i, align 4, !dbg !4080
  %309 = load i32, i32* %depth, align 4, !dbg !4082
  %cmp207 = icmp slt i32 %308, %309, !dbg !4083
  br i1 %cmp207, label %for.body208, label %for.end225, !dbg !4084

for.body208:                                      ; preds = %for.cond206
  %310 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %target_nest, align 8, !dbg !4085
  %loops209 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %310, i32 0, i32 0, !dbg !4085
  %311 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %loops209, align 8, !dbg !4085
  %312 = load i32, i32* %i, align 4, !dbg !4087
  %idxprom210 = sext i32 %312 to i64, !dbg !4085
  %arrayidx211 = getelementptr inbounds %struct.lambda_loop_s*, %struct.lambda_loop_s** %311, i64 %idxprom210, !dbg !4085
  %313 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %arrayidx211, align 8, !dbg !4085
  store %struct.lambda_loop_s* %313, %struct.lambda_loop_s** %target_loop, align 8, !dbg !4088
  %314 = load i32*, i32** %stepsigns.addr, align 8, !dbg !4089
  %315 = load i32, i32* %i, align 4, !dbg !4091
  %idxprom212 = sext i32 %315 to i64, !dbg !4089
  %arrayidx213 = getelementptr inbounds i32, i32* %314, i64 %idxprom212, !dbg !4089
  %316 = load i32, i32* %arrayidx213, align 4, !dbg !4089
  %cmp214 = icmp slt i32 %316, 0, !dbg !4092
  br i1 %cmp214, label %if.then215, label %if.end222, !dbg !4093

if.then215:                                       ; preds = %for.body208
  %317 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %target_loop, align 8, !dbg !4094
  %step216 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %317, i32 0, i32 3, !dbg !4094
  %318 = load i32, i32* %step216, align 8, !dbg !4096
  %mul217 = mul nsw i32 %318, -1, !dbg !4096
  store i32 %mul217, i32* %step216, align 8, !dbg !4096
  %319 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %target_loop, align 8, !dbg !4097
  %lower_bound218 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %319, i32 0, i32 0, !dbg !4097
  %320 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lower_bound218, align 8, !dbg !4097
  store %struct.lambda_linear_expression_s* %320, %struct.lambda_linear_expression_s** %tmp_expr, align 8, !dbg !4098
  %321 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %target_loop, align 8, !dbg !4099
  %upper_bound219 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %321, i32 0, i32 1, !dbg !4099
  %322 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %upper_bound219, align 8, !dbg !4099
  %323 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %target_loop, align 8, !dbg !4100
  %lower_bound220 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %323, i32 0, i32 0, !dbg !4100
  store %struct.lambda_linear_expression_s* %322, %struct.lambda_linear_expression_s** %lower_bound220, align 8, !dbg !4101
  %324 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %tmp_expr, align 8, !dbg !4102
  %325 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %target_loop, align 8, !dbg !4103
  %upper_bound221 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %325, i32 0, i32 1, !dbg !4103
  store %struct.lambda_linear_expression_s* %324, %struct.lambda_linear_expression_s** %upper_bound221, align 8, !dbg !4104
  br label %if.end222, !dbg !4105

if.end222:                                        ; preds = %if.then215, %for.body208
  br label %for.inc223, !dbg !4106

for.inc223:                                       ; preds = %if.end222
  %326 = load i32, i32* %i, align 4, !dbg !4107
  %inc224 = add nsw i32 %326, 1, !dbg !4107
  store i32 %inc224, i32* %i, align 4, !dbg !4107
  br label %for.cond206, !dbg !4108, !llvm.loop !4109

for.end225:                                       ; preds = %for.cond206
  %327 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %target_nest, align 8, !dbg !4111
  ret %struct.lambda_loopnest_s* %327, !dbg !4112
}

declare dso_local i32** @lambda_matrix_new(i32, i32) #2

declare dso_local void @lambda_matrix_vector_mult(i32**, i32, i32, i32*, i32*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @lambda_vector_zerop(i32* %vec1, i32 %size) #0 !dbg !4113 {
entry:
  %retval = alloca i8, align 1
  %vec1.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %vec1, i32** %vec1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec1.addr, metadata !4116, metadata !DIExpression()), !dbg !4117
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !4118, metadata !DIExpression()), !dbg !4119
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4120, metadata !DIExpression()), !dbg !4121
  store i32 0, i32* %i, align 4, !dbg !4122
  br label %for.cond, !dbg !4124

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !4125
  %1 = load i32, i32* %size.addr, align 4, !dbg !4127
  %cmp = icmp slt i32 %0, %1, !dbg !4128
  br i1 %cmp, label %for.body, label %for.end, !dbg !4129

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %vec1.addr, align 8, !dbg !4130
  %3 = load i32, i32* %i, align 4, !dbg !4132
  %idxprom = sext i32 %3 to i64, !dbg !4130
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !4130
  %4 = load i32, i32* %arrayidx, align 4, !dbg !4130
  %cmp1 = icmp ne i32 %4, 0, !dbg !4133
  br i1 %cmp1, label %if.then, label %if.end, !dbg !4134

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !4135
  br label %return, !dbg !4135

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4136

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4, !dbg !4137
  %inc = add nsw i32 %5, 1, !dbg !4137
  store i32 %inc, i32* %i, align 4, !dbg !4137
  br label %for.cond, !dbg !4138, !llvm.loop !4139

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !4141
  br label %return, !dbg !4141

return:                                           ; preds = %for.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !4142
  ret i8 %6, !dbg !4142
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @find_induction_var_from_exit_cond(%struct.loop* %loop) #0 !dbg !4143 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %expr = alloca %union.gimple_statement_d*, align 8
  %ivarop = alloca %union.tree_node*, align 8
  %test_lhs = alloca %union.tree_node*, align 8
  %test_rhs = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4146, metadata !DIExpression()), !dbg !4147
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %expr, metadata !4148, metadata !DIExpression()), !dbg !4149
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4150
  %call = call %union.gimple_statement_d* @get_loop_exit_condition(%struct.loop* %0), !dbg !4151
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %expr, align 8, !dbg !4149
  call void @llvm.dbg.declare(metadata %union.tree_node** %ivarop, metadata !4152, metadata !DIExpression()), !dbg !4153
  call void @llvm.dbg.declare(metadata %union.tree_node** %test_lhs, metadata !4154, metadata !DIExpression()), !dbg !4155
  call void @llvm.dbg.declare(metadata %union.tree_node** %test_rhs, metadata !4156, metadata !DIExpression()), !dbg !4157
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %expr, align 8, !dbg !4158
  %cmp = icmp eq %union.gimple_statement_d* %1, null, !dbg !4160
  br i1 %cmp, label %if.then, label %if.end, !dbg !4161

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4162
  br label %return, !dbg !4162

if.end:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %expr, align 8, !dbg !4163
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !4165
  %cmp2 = icmp ne i32 %call1, 1, !dbg !4166
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !4167

if.then3:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4168
  br label %return, !dbg !4168

if.end4:                                          ; preds = %if.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %expr, align 8, !dbg !4169
  %call5 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %3), !dbg !4170
  store %union.tree_node* %call5, %union.tree_node** %test_lhs, align 8, !dbg !4171
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %expr, align 8, !dbg !4172
  %call6 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %4), !dbg !4173
  store %union.tree_node* %call6, %union.tree_node** %test_rhs, align 8, !dbg !4174
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4175
  %6 = load %union.tree_node*, %union.tree_node** %test_lhs, align 8, !dbg !4177
  %call7 = call zeroext i8 @expr_invariant_in_loop_p(%struct.loop* %5, %union.tree_node* %6), !dbg !4178
  %tobool = icmp ne i8 %call7, 0, !dbg !4178
  br i1 %tobool, label %if.then8, label %if.else, !dbg !4179

if.then8:                                         ; preds = %if.end4
  %7 = load %union.tree_node*, %union.tree_node** %test_rhs, align 8, !dbg !4180
  store %union.tree_node* %7, %union.tree_node** %ivarop, align 8, !dbg !4181
  br label %if.end14, !dbg !4182

if.else:                                          ; preds = %if.end4
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4183
  %9 = load %union.tree_node*, %union.tree_node** %test_rhs, align 8, !dbg !4185
  %call9 = call zeroext i8 @expr_invariant_in_loop_p(%struct.loop* %8, %union.tree_node* %9), !dbg !4186
  %tobool10 = icmp ne i8 %call9, 0, !dbg !4186
  br i1 %tobool10, label %if.then11, label %if.else12, !dbg !4187

if.then11:                                        ; preds = %if.else
  %10 = load %union.tree_node*, %union.tree_node** %test_lhs, align 8, !dbg !4188
  store %union.tree_node* %10, %union.tree_node** %ivarop, align 8, !dbg !4189
  br label %if.end13, !dbg !4190

if.else12:                                        ; preds = %if.else
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4191
  br label %return, !dbg !4191

if.end13:                                         ; preds = %if.then11
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then8
  %11 = load %union.tree_node*, %union.tree_node** %ivarop, align 8, !dbg !4192
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !4192
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !4192
  %bf.load = load i64, i64* %12, align 8, !dbg !4192
  %bf.clear = and i64 %bf.load, 65535, !dbg !4192
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4192
  %cmp15 = icmp ne i32 %bf.cast, 141, !dbg !4194
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !4195

if.then16:                                        ; preds = %if.end14
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4196
  br label %return, !dbg !4196

if.end17:                                         ; preds = %if.end14
  %13 = load %union.tree_node*, %union.tree_node** %ivarop, align 8, !dbg !4197
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !4198
  br label %return, !dbg !4198

return:                                           ; preds = %if.end17, %if.then16, %if.else12, %if.then3, %if.then
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4199
  ret %union.tree_node* %14, !dbg !4199
}

declare dso_local %union.gimple_statement_d* @get_loop_exit_condition(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !4200 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4204, metadata !DIExpression()), !dbg !4205
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4206
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4207
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4208
  %bf.load = load i32, i32* %1, align 8, !dbg !4208
  %bf.clear = and i32 %bf.load, 255, !dbg !4208
  ret i32 %bf.clear, !dbg !4209
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) #0 !dbg !4210 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4213, metadata !DIExpression()), !dbg !4214
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4215
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !4216
  ret %union.tree_node* %call, !dbg !4217
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) #0 !dbg !4218 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4219, metadata !DIExpression()), !dbg !4220
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4221
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !4222
  ret %union.tree_node* %call, !dbg !4223
}

declare dso_local zeroext i8 @expr_invariant_in_loop_p(%struct.loop*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.lambda_loopnest_s* @gcc_loopnest_to_lambda_loopnest(%struct.loop* %loop_nest, %struct.VEC_tree_heap** %inductionvars, %struct.VEC_tree_heap** %invariants, %struct.obstack* %lambda_obstack) #0 !dbg !4224 {
entry:
  %loop_nest.addr = alloca %struct.loop*, align 8
  %inductionvars.addr = alloca %struct.VEC_tree_heap**, align 8
  %invariants.addr = alloca %struct.VEC_tree_heap**, align 8
  %lambda_obstack.addr = alloca %struct.obstack*, align 8
  %ret = alloca %struct.lambda_loopnest_s*, align 8
  %temp = alloca %struct.loop*, align 8
  %depth = alloca i32, align 4
  %i = alloca i64, align 8
  %loops = alloca %struct.VEC_lambda_loop_heap*, align 8
  %uboundvars = alloca %struct.VEC_tree_heap*, align 8
  %lboundvars = alloca %struct.VEC_tree_heap*, align 8
  %steps = alloca %struct.VEC_int_heap*, align 8
  %newloop = alloca %struct.lambda_loop_s*, align 8
  %inductionvar = alloca %union.tree_node*, align 8
  %perfect_nest = alloca i8, align 1
  store %struct.loop* %loop_nest, %struct.loop** %loop_nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop_nest.addr, metadata !4228, metadata !DIExpression()), !dbg !4229
  store %struct.VEC_tree_heap** %inductionvars, %struct.VEC_tree_heap*** %inductionvars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %inductionvars.addr, metadata !4230, metadata !DIExpression()), !dbg !4231
  store %struct.VEC_tree_heap** %invariants, %struct.VEC_tree_heap*** %invariants.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %invariants.addr, metadata !4232, metadata !DIExpression()), !dbg !4233
  store %struct.obstack* %lambda_obstack, %struct.obstack** %lambda_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %lambda_obstack.addr, metadata !4234, metadata !DIExpression()), !dbg !4235
  call void @llvm.dbg.declare(metadata %struct.lambda_loopnest_s** %ret, metadata !4236, metadata !DIExpression()), !dbg !4237
  store %struct.lambda_loopnest_s* null, %struct.lambda_loopnest_s** %ret, align 8, !dbg !4237
  call void @llvm.dbg.declare(metadata %struct.loop** %temp, metadata !4238, metadata !DIExpression()), !dbg !4239
  %0 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !4240
  store %struct.loop* %0, %struct.loop** %temp, align 8, !dbg !4239
  call void @llvm.dbg.declare(metadata i32* %depth, metadata !4241, metadata !DIExpression()), !dbg !4242
  %1 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !4243
  %call = call i32 @depth_of_nest(%struct.loop* %1), !dbg !4244
  store i32 %call, i32* %depth, align 4, !dbg !4242
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4245, metadata !DIExpression()), !dbg !4246
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_loop_heap** %loops, metadata !4247, metadata !DIExpression()), !dbg !4248
  store %struct.VEC_lambda_loop_heap* null, %struct.VEC_lambda_loop_heap** %loops, align 8, !dbg !4248
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %uboundvars, metadata !4249, metadata !DIExpression()), !dbg !4250
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %uboundvars, align 8, !dbg !4250
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %lboundvars, metadata !4251, metadata !DIExpression()), !dbg !4252
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %lboundvars, align 8, !dbg !4252
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap** %steps, metadata !4253, metadata !DIExpression()), !dbg !4254
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %steps, align 8, !dbg !4254
  call void @llvm.dbg.declare(metadata %struct.lambda_loop_s** %newloop, metadata !4255, metadata !DIExpression()), !dbg !4256
  call void @llvm.dbg.declare(metadata %union.tree_node** %inductionvar, metadata !4257, metadata !DIExpression()), !dbg !4258
  store %union.tree_node* null, %union.tree_node** %inductionvar, align 8, !dbg !4258
  call void @llvm.dbg.declare(metadata i8* %perfect_nest, metadata !4259, metadata !DIExpression()), !dbg !4260
  %2 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !4261
  %call1 = call zeroext i8 @perfect_nest_p(%struct.loop* %2), !dbg !4262
  store i8 %call1, i8* %perfect_nest, align 1, !dbg !4260
  %3 = load i8, i8* %perfect_nest, align 1, !dbg !4263
  %tobool = icmp ne i8 %3, 0, !dbg !4263
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !4265

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !4266
  %call2 = call zeroext i8 @can_convert_to_perfect_nest(%struct.loop* %4), !dbg !4267
  %tobool3 = icmp ne i8 %call2, 0, !dbg !4267
  br i1 %tobool3, label %if.end, label %if.then, !dbg !4268

if.then:                                          ; preds = %land.lhs.true
  br label %fail, !dbg !4269

if.end:                                           ; preds = %land.lhs.true, %entry
  br label %while.cond, !dbg !4270

while.cond:                                       ; preds = %if.end8, %if.end
  %5 = load %struct.loop*, %struct.loop** %temp, align 8, !dbg !4271
  %tobool4 = icmp ne %struct.loop* %5, null, !dbg !4270
  br i1 %tobool4, label %while.body, label %while.end, !dbg !4270

while.body:                                       ; preds = %while.cond
  %6 = load %struct.loop*, %struct.loop** %temp, align 8, !dbg !4272
  %7 = load i32, i32* %depth, align 4, !dbg !4274
  %8 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %invariants.addr, align 8, !dbg !4275
  %9 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %inductionvars.addr, align 8, !dbg !4276
  %10 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %9, align 8, !dbg !4277
  %11 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !4278
  %call5 = call %struct.lambda_loop_s* @gcc_loop_to_lambda_loop(%struct.loop* %6, i32 %7, %struct.VEC_tree_heap** %8, %union.tree_node** %inductionvar, %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %lboundvars, %struct.VEC_tree_heap** %uboundvars, %struct.VEC_int_heap** %steps, %struct.obstack* %11), !dbg !4279
  store %struct.lambda_loop_s* %call5, %struct.lambda_loop_s** %newloop, align 8, !dbg !4280
  %12 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %newloop, align 8, !dbg !4281
  %tobool6 = icmp ne %struct.lambda_loop_s* %12, null, !dbg !4281
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !4283

if.then7:                                         ; preds = %while.body
  br label %fail, !dbg !4284

if.end8:                                          ; preds = %while.body
  %13 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %inductionvars.addr, align 8, !dbg !4285
  %14 = load %union.tree_node*, %union.tree_node** %inductionvar, align 8, !dbg !4285
  %call9 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %13, %union.tree_node* %14), !dbg !4285
  %15 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %newloop, align 8, !dbg !4286
  %call10 = call %struct.lambda_loop_s** @VEC_lambda_loop_heap_safe_push(%struct.VEC_lambda_loop_heap** %loops, %struct.lambda_loop_s* %15), !dbg !4286
  %16 = load %struct.loop*, %struct.loop** %temp, align 8, !dbg !4287
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %16, i32 0, i32 8, !dbg !4288
  %17 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !4288
  store %struct.loop* %17, %struct.loop** %temp, align 8, !dbg !4289
  br label %while.cond, !dbg !4270, !llvm.loop !4290

while.end:                                        ; preds = %while.cond
  %18 = load i8, i8* %perfect_nest, align 1, !dbg !4292
  %tobool11 = icmp ne i8 %18, 0, !dbg !4292
  br i1 %tobool11, label %if.end25, label %if.then12, !dbg !4294

if.then12:                                        ; preds = %while.end
  %19 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !4295
  %20 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %lboundvars, align 8, !dbg !4298
  %21 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %uboundvars, align 8, !dbg !4299
  %22 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %steps, align 8, !dbg !4300
  %23 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %inductionvars.addr, align 8, !dbg !4301
  %24 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %23, align 8, !dbg !4302
  %call13 = call zeroext i8 @perfect_nestify(%struct.loop* %19, %struct.VEC_tree_heap* %20, %struct.VEC_tree_heap* %21, %struct.VEC_int_heap* %22, %struct.VEC_tree_heap* %24), !dbg !4303
  %tobool14 = icmp ne i8 %call13, 0, !dbg !4303
  br i1 %tobool14, label %if.else, label %if.then15, !dbg !4304

if.then15:                                        ; preds = %if.then12
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4305
  %tobool16 = icmp ne %struct._IO_FILE* %25, null, !dbg !4305
  br i1 %tobool16, label %if.then17, label %if.end19, !dbg !4308

if.then17:                                        ; preds = %if.then15
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4309
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.12, i64 0, i64 0)), !dbg !4310
  br label %if.end19, !dbg !4310

if.end19:                                         ; preds = %if.then17, %if.then15
  br label %fail, !dbg !4311

if.else:                                          ; preds = %if.then12
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4312
  %tobool20 = icmp ne %struct._IO_FILE* %27, null, !dbg !4312
  br i1 %tobool20, label %if.then21, label %if.end23, !dbg !4314

if.then21:                                        ; preds = %if.else
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4315
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.13, i64 0, i64 0)), !dbg !4316
  br label %if.end23, !dbg !4316

if.end23:                                         ; preds = %if.then21, %if.else
  br label %if.end24

if.end24:                                         ; preds = %if.end23
  br label %if.end25, !dbg !4317

if.end25:                                         ; preds = %if.end24, %while.end
  %29 = load i32, i32* %depth, align 4, !dbg !4318
  %30 = load i32, i32* %depth, align 4, !dbg !4319
  %mul = mul nsw i32 2, %30, !dbg !4320
  %31 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !4321
  %call26 = call %struct.lambda_loopnest_s* @lambda_loopnest_new(i32 %29, i32 %mul, %struct.obstack* %31), !dbg !4322
  store %struct.lambda_loopnest_s* %call26, %struct.lambda_loopnest_s** %ret, align 8, !dbg !4323
  store i64 0, i64* %i, align 8, !dbg !4324
  br label %for.cond, !dbg !4326

for.cond:                                         ; preds = %for.inc, %if.end25
  %32 = load %struct.VEC_lambda_loop_heap*, %struct.VEC_lambda_loop_heap** %loops, align 8, !dbg !4327
  %tobool27 = icmp ne %struct.VEC_lambda_loop_heap* %32, null, !dbg !4327
  br i1 %tobool27, label %cond.true, label %cond.false, !dbg !4327

cond.true:                                        ; preds = %for.cond
  %33 = load %struct.VEC_lambda_loop_heap*, %struct.VEC_lambda_loop_heap** %loops, align 8, !dbg !4327
  %base = getelementptr inbounds %struct.VEC_lambda_loop_heap, %struct.VEC_lambda_loop_heap* %33, i32 0, i32 0, !dbg !4327
  br label %cond.end, !dbg !4327

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4327

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_lambda_loop_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4327
  %34 = load i64, i64* %i, align 8, !dbg !4327
  %conv = trunc i64 %34 to i32, !dbg !4327
  %call28 = call i32 @VEC_lambda_loop_base_iterate(%struct.VEC_lambda_loop_base* %cond, i32 %conv, %struct.lambda_loop_s** %newloop), !dbg !4327
  %tobool29 = icmp ne i32 %call28, 0, !dbg !4329
  br i1 %tobool29, label %for.body, label %for.end, !dbg !4329

for.body:                                         ; preds = %cond.end
  %35 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %newloop, align 8, !dbg !4330
  %36 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %ret, align 8, !dbg !4331
  %loops30 = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %36, i32 0, i32 0, !dbg !4331
  %37 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %loops30, align 8, !dbg !4331
  %38 = load i64, i64* %i, align 8, !dbg !4332
  %arrayidx = getelementptr inbounds %struct.lambda_loop_s*, %struct.lambda_loop_s** %37, i64 %38, !dbg !4331
  store %struct.lambda_loop_s* %35, %struct.lambda_loop_s** %arrayidx, align 8, !dbg !4333
  br label %for.inc, !dbg !4331

for.inc:                                          ; preds = %for.body
  %39 = load i64, i64* %i, align 8, !dbg !4334
  %inc = add i64 %39, 1, !dbg !4334
  store i64 %inc, i64* %i, align 8, !dbg !4334
  br label %for.cond, !dbg !4335, !llvm.loop !4336

for.end:                                          ; preds = %cond.end
  br label %fail, !dbg !4337

fail:                                             ; preds = %for.end, %if.end19, %if.then7, %if.then
  call void @llvm.dbg.label(metadata !4338), !dbg !4339
  call void @VEC_lambda_loop_heap_free(%struct.VEC_lambda_loop_heap** %loops), !dbg !4340
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %uboundvars), !dbg !4341
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %lboundvars), !dbg !4342
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %steps), !dbg !4343
  %40 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %ret, align 8, !dbg !4344
  ret %struct.lambda_loopnest_s* %40, !dbg !4345
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @depth_of_nest(%struct.loop* %nest) #0 !dbg !4346 {
entry:
  %nest.addr = alloca %struct.loop*, align 8
  %depth = alloca i64, align 8
  store %struct.loop* %nest, %struct.loop** %nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %nest.addr, metadata !4349, metadata !DIExpression()), !dbg !4350
  call void @llvm.dbg.declare(metadata i64* %depth, metadata !4351, metadata !DIExpression()), !dbg !4352
  store i64 0, i64* %depth, align 8, !dbg !4352
  br label %while.cond, !dbg !4353

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.loop*, %struct.loop** %nest.addr, align 8, !dbg !4354
  %tobool = icmp ne %struct.loop* %0, null, !dbg !4353
  br i1 %tobool, label %while.body, label %while.end, !dbg !4353

while.body:                                       ; preds = %while.cond
  %1 = load i64, i64* %depth, align 8, !dbg !4355
  %inc = add i64 %1, 1, !dbg !4355
  store i64 %inc, i64* %depth, align 8, !dbg !4355
  %2 = load %struct.loop*, %struct.loop** %nest.addr, align 8, !dbg !4357
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 8, !dbg !4358
  %3 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !4358
  store %struct.loop* %3, %struct.loop** %nest.addr, align 8, !dbg !4359
  br label %while.cond, !dbg !4353, !llvm.loop !4360

while.end:                                        ; preds = %while.cond
  %4 = load i64, i64* %depth, align 8, !dbg !4362
  %conv = trunc i64 %4 to i32, !dbg !4362
  ret i32 %conv, !dbg !4363
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @perfect_nest_p(%struct.loop* %loop) #0 !dbg !4364 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  %i = alloca i64, align 8
  %exit_cond = alloca %union.gimple_statement_d*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4367, metadata !DIExpression()), !dbg !4368
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !4369, metadata !DIExpression()), !dbg !4371
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4372, metadata !DIExpression()), !dbg !4373
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %exit_cond, metadata !4374, metadata !DIExpression()), !dbg !4375
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4376
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 8, !dbg !4378
  %1 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !4378
  %tobool = icmp ne %struct.loop* %1, null, !dbg !4376
  br i1 %tobool, label %if.end, label %if.then, !dbg !4379

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !4380
  br label %return, !dbg !4380

if.end:                                           ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4381
  %call = call %struct.basic_block_def** @get_loop_body(%struct.loop* %2), !dbg !4382
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %bbs, align 8, !dbg !4383
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4384
  %call1 = call %union.gimple_statement_d* @get_loop_exit_condition(%struct.loop* %3), !dbg !4385
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %exit_cond, align 8, !dbg !4386
  store i64 0, i64* %i, align 8, !dbg !4387
  br label %for.cond, !dbg !4389

for.cond:                                         ; preds = %for.inc31, %if.end
  %4 = load i64, i64* %i, align 8, !dbg !4390
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4392
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 6, !dbg !4393
  %6 = load i32, i32* %num_nodes, align 4, !dbg !4393
  %conv = zext i32 %6 to i64, !dbg !4392
  %cmp = icmp ult i64 %4, %conv, !dbg !4394
  br i1 %cmp, label %for.body, label %for.end32, !dbg !4395

for.body:                                         ; preds = %for.cond
  %7 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4396
  %8 = load i64, i64* %i, align 8, !dbg !4399
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %7, i64 %8, !dbg !4396
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4396
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 3, !dbg !4400
  %10 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !4400
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4401
  %cmp3 = icmp eq %struct.loop* %10, %11, !dbg !4402
  br i1 %cmp3, label %if.then5, label %if.end30, !dbg !4403

if.then5:                                         ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4404, metadata !DIExpression()), !dbg !4412
  %12 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4413
  %13 = load i64, i64* %i, align 8, !dbg !4415
  %arrayidx6 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %12, i64 %13, !dbg !4413
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx6, align 8, !dbg !4413
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %14), !dbg !4416
  %15 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !4416
  %16 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4416
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !4416
  br label %for.cond7, !dbg !4417

for.cond7:                                        ; preds = %for.inc, %if.then5
  %call8 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4418
  %tobool9 = icmp ne i8 %call8, 0, !dbg !4420
  %lnot = xor i1 %tobool9, true, !dbg !4420
  br i1 %lnot, label %for.body10, label %for.end, !dbg !4421

for.body10:                                       ; preds = %for.cond7
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4422, metadata !DIExpression()), !dbg !4424
  %call11 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4425
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %stmt, align 8, !dbg !4424
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4426
  %call12 = call i32 @gimple_code(%union.gimple_statement_d* %17), !dbg !4428
  %cmp13 = icmp eq i32 %call12, 1, !dbg !4429
  br i1 %cmp13, label %land.lhs.true, label %if.end18, !dbg !4430

land.lhs.true:                                    ; preds = %for.body10
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exit_cond, align 8, !dbg !4431
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4432
  %cmp15 = icmp ne %union.gimple_statement_d* %18, %19, !dbg !4433
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !4434

if.then17:                                        ; preds = %land.lhs.true
  br label %non_perfectly_nested, !dbg !4435

if.end18:                                         ; preds = %land.lhs.true, %for.body10
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4436
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exit_cond, align 8, !dbg !4438
  %cmp19 = icmp eq %union.gimple_statement_d* %20, %21, !dbg !4439
  br i1 %cmp19, label %if.then28, label %lor.lhs.false, !dbg !4440

lor.lhs.false:                                    ; preds = %if.end18
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4441
  %call21 = call zeroext i8 @not_interesting_stmt(%union.gimple_statement_d* %22), !dbg !4442
  %conv22 = zext i8 %call21 to i32, !dbg !4442
  %tobool23 = icmp ne i32 %conv22, 0, !dbg !4442
  br i1 %tobool23, label %if.then28, label %lor.lhs.false24, !dbg !4443

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %23 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4444
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4445
  %call25 = call zeroext i8 @stmt_is_bumper_for_loop(%struct.loop* %23, %union.gimple_statement_d* %24), !dbg !4446
  %conv26 = zext i8 %call25 to i32, !dbg !4446
  %tobool27 = icmp ne i32 %conv26, 0, !dbg !4446
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !4447

if.then28:                                        ; preds = %lor.lhs.false24, %lor.lhs.false, %if.end18
  br label %for.inc, !dbg !4448

if.end29:                                         ; preds = %lor.lhs.false24
  br label %non_perfectly_nested, !dbg !4449

non_perfectly_nested:                             ; preds = %if.end29, %if.then17
  call void @llvm.dbg.label(metadata !4450), !dbg !4451
  %25 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4452
  %26 = bitcast %struct.basic_block_def** %25 to i8*, !dbg !4452
  call void @free(i8* %26), !dbg !4453
  store i8 0, i8* %retval, align 1, !dbg !4454
  br label %return, !dbg !4454

for.inc:                                          ; preds = %if.then28
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !4455
  br label %for.cond7, !dbg !4456, !llvm.loop !4457

for.end:                                          ; preds = %for.cond7
  br label %if.end30, !dbg !4459

if.end30:                                         ; preds = %for.end, %for.body
  br label %for.inc31, !dbg !4460

for.inc31:                                        ; preds = %if.end30
  %27 = load i64, i64* %i, align 8, !dbg !4461
  %inc = add i64 %27, 1, !dbg !4461
  store i64 %inc, i64* %i, align 8, !dbg !4461
  br label %for.cond, !dbg !4462, !llvm.loop !4463

for.end32:                                        ; preds = %for.cond
  %28 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4465
  %29 = bitcast %struct.basic_block_def** %28 to i8*, !dbg !4465
  call void @free(i8* %29), !dbg !4466
  %30 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4467
  %inner33 = getelementptr inbounds %struct.loop, %struct.loop* %30, i32 0, i32 8, !dbg !4468
  %31 = load %struct.loop*, %struct.loop** %inner33, align 8, !dbg !4468
  %call34 = call zeroext i8 @perfect_nest_p(%struct.loop* %31), !dbg !4469
  store i8 %call34, i8* %retval, align 1, !dbg !4470
  br label %return, !dbg !4470

return:                                           ; preds = %for.end32, %non_perfectly_nested, %if.then
  %32 = load i8, i8* %retval, align 1, !dbg !4471
  ret i8 %32, !dbg !4471
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @can_convert_to_perfect_nest(%struct.loop* %loop) #0 !dbg !4472 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  %i = alloca i64, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4473, metadata !DIExpression()), !dbg !4474
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !4475, metadata !DIExpression()), !dbg !4476
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4477, metadata !DIExpression()), !dbg !4478
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !4479, metadata !DIExpression()), !dbg !4480
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4481
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 8, !dbg !4483
  %1 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !4483
  %tobool = icmp ne %struct.loop* %1, null, !dbg !4481
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !4484

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4485
  %inner1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 8, !dbg !4486
  %3 = load %struct.loop*, %struct.loop** %inner1, align 8, !dbg !4486
  %inner2 = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 8, !dbg !4487
  %4 = load %struct.loop*, %struct.loop** %inner2, align 8, !dbg !4487
  %tobool3 = icmp ne %struct.loop* %4, null, !dbg !4485
  br i1 %tobool3, label %if.then, label %if.end, !dbg !4488

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !4489
  br label %return, !dbg !4489

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4490
  %call = call %struct.basic_block_def** @get_loop_body(%struct.loop* %5), !dbg !4491
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %bbs, align 8, !dbg !4492
  store i64 0, i64* %i, align 8, !dbg !4493
  br label %for.cond, !dbg !4495

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i64, i64* %i, align 8, !dbg !4496
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4498
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 6, !dbg !4499
  %8 = load i32, i32* %num_nodes, align 4, !dbg !4499
  %conv = zext i32 %8 to i64, !dbg !4498
  %cmp = icmp ult i64 %6, %conv, !dbg !4500
  br i1 %cmp, label %for.body, label %for.end, !dbg !4501

for.body:                                         ; preds = %for.cond
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4502
  %10 = load i64, i64* %i, align 8, !dbg !4504
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %9, i64 %10, !dbg !4502
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4502
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 3, !dbg !4505
  %12 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !4505
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4506
  %cmp5 = icmp eq %struct.loop* %12, %13, !dbg !4507
  br i1 %cmp5, label %land.lhs.true, label %if.end12, !dbg !4508

land.lhs.true:                                    ; preds = %for.body
  %14 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4509
  %15 = load i64, i64* %i, align 8, !dbg !4510
  %arrayidx7 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %14, i64 %15, !dbg !4509
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx7, align 8, !dbg !4509
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4511
  %call8 = call zeroext i8 @cannot_convert_bb_to_perfect_nest(%struct.basic_block_def* %16, %struct.loop* %17), !dbg !4512
  %conv9 = zext i8 %call8 to i32, !dbg !4512
  %tobool10 = icmp ne i32 %conv9, 0, !dbg !4512
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !4513

if.then11:                                        ; preds = %land.lhs.true
  br label %fail, !dbg !4514

if.end12:                                         ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !4515

for.inc:                                          ; preds = %if.end12
  %18 = load i64, i64* %i, align 8, !dbg !4516
  %inc = add i64 %18, 1, !dbg !4516
  store i64 %inc, i64* %i, align 8, !dbg !4516
  br label %for.cond, !dbg !4517, !llvm.loop !4518

for.end:                                          ; preds = %for.cond
  %19 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4520
  %call13 = call %struct.edge_def* @single_exit(%struct.loop* %19), !dbg !4522
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call13, i32 0, i32 1, !dbg !4523
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4523
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %20), !dbg !4524
  %21 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !4524
  %22 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4524
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false), !dbg !4524
  br label %for.cond14, !dbg !4525

for.cond14:                                       ; preds = %for.inc24, %for.end
  %call15 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4526
  %tobool16 = icmp ne i8 %call15, 0, !dbg !4528
  %lnot = xor i1 %tobool16, true, !dbg !4528
  br i1 %lnot, label %for.body17, label %for.end25, !dbg !4529

for.body17:                                       ; preds = %for.cond14
  %call18 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4530
  %call19 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %call18), !dbg !4532
  %cmp20 = icmp ne i32 %call19, 1, !dbg !4533
  br i1 %cmp20, label %if.then22, label %if.end23, !dbg !4534

if.then22:                                        ; preds = %for.body17
  br label %fail, !dbg !4535

if.end23:                                         ; preds = %for.body17
  br label %for.inc24, !dbg !4536

for.inc24:                                        ; preds = %if.end23
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !4537
  br label %for.cond14, !dbg !4538, !llvm.loop !4539

for.end25:                                        ; preds = %for.cond14
  %23 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4541
  %24 = bitcast %struct.basic_block_def** %23 to i8*, !dbg !4541
  call void @free(i8* %24), !dbg !4542
  store i8 1, i8* %retval, align 1, !dbg !4543
  br label %return, !dbg !4543

fail:                                             ; preds = %if.then22, %if.then11
  call void @llvm.dbg.label(metadata !4544), !dbg !4545
  %25 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4546
  %26 = bitcast %struct.basic_block_def** %25 to i8*, !dbg !4546
  call void @free(i8* %26), !dbg !4547
  store i8 0, i8* %retval, align 1, !dbg !4548
  br label %return, !dbg !4548

return:                                           ; preds = %fail, %for.end25, %if.then
  %27 = load i8, i8* %retval, align 1, !dbg !4549
  ret i8 %27, !dbg !4549
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.lambda_loop_s* @gcc_loop_to_lambda_loop(%struct.loop* %loop, i32 %depth, %struct.VEC_tree_heap** %invariants, %union.tree_node** %ourinductionvar, %struct.VEC_tree_heap* %outerinductionvars, %struct.VEC_tree_heap** %lboundvars, %struct.VEC_tree_heap** %uboundvars, %struct.VEC_int_heap** %steps, %struct.obstack* %lambda_obstack) #0 !dbg !4550 {
entry:
  %retval = alloca %struct.lambda_loop_s*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %depth.addr = alloca i32, align 4
  %invariants.addr = alloca %struct.VEC_tree_heap**, align 8
  %ourinductionvar.addr = alloca %union.tree_node**, align 8
  %outerinductionvars.addr = alloca %struct.VEC_tree_heap*, align 8
  %lboundvars.addr = alloca %struct.VEC_tree_heap**, align 8
  %uboundvars.addr = alloca %struct.VEC_tree_heap**, align 8
  %steps.addr = alloca %struct.VEC_int_heap**, align 8
  %lambda_obstack.addr = alloca %struct.obstack*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %exit_cond = alloca %union.gimple_statement_d*, align 8
  %access_fn = alloca %union.tree_node*, align 8
  %inductionvar = alloca %union.tree_node*, align 8
  %step = alloca %union.tree_node*, align 8
  %lloop = alloca %struct.lambda_loop_s*, align 8
  %lbound = alloca %struct.lambda_linear_expression_s*, align 8
  %ubound = alloca %struct.lambda_linear_expression_s*, align 8
  %test_lhs = alloca %union.tree_node*, align 8
  %test_rhs = alloca %union.tree_node*, align 8
  %stepint = alloca i32, align 4
  %extra = alloca i32, align 4
  %lboundvar = alloca %union.tree_node*, align 8
  %uboundvar = alloca %union.tree_node*, align 8
  %uboundresult = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4554, metadata !DIExpression()), !dbg !4555
  store i32 %depth, i32* %depth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %depth.addr, metadata !4556, metadata !DIExpression()), !dbg !4557
  store %struct.VEC_tree_heap** %invariants, %struct.VEC_tree_heap*** %invariants.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %invariants.addr, metadata !4558, metadata !DIExpression()), !dbg !4559
  store %union.tree_node** %ourinductionvar, %union.tree_node*** %ourinductionvar.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ourinductionvar.addr, metadata !4560, metadata !DIExpression()), !dbg !4561
  store %struct.VEC_tree_heap* %outerinductionvars, %struct.VEC_tree_heap** %outerinductionvars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %outerinductionvars.addr, metadata !4562, metadata !DIExpression()), !dbg !4563
  store %struct.VEC_tree_heap** %lboundvars, %struct.VEC_tree_heap*** %lboundvars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %lboundvars.addr, metadata !4564, metadata !DIExpression()), !dbg !4565
  store %struct.VEC_tree_heap** %uboundvars, %struct.VEC_tree_heap*** %uboundvars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %uboundvars.addr, metadata !4566, metadata !DIExpression()), !dbg !4567
  store %struct.VEC_int_heap** %steps, %struct.VEC_int_heap*** %steps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %steps.addr, metadata !4568, metadata !DIExpression()), !dbg !4569
  store %struct.obstack* %lambda_obstack, %struct.obstack** %lambda_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %lambda_obstack.addr, metadata !4570, metadata !DIExpression()), !dbg !4571
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4572, metadata !DIExpression()), !dbg !4573
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %exit_cond, metadata !4574, metadata !DIExpression()), !dbg !4575
  call void @llvm.dbg.declare(metadata %union.tree_node** %access_fn, metadata !4576, metadata !DIExpression()), !dbg !4577
  call void @llvm.dbg.declare(metadata %union.tree_node** %inductionvar, metadata !4578, metadata !DIExpression()), !dbg !4579
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !4580, metadata !DIExpression()), !dbg !4581
  call void @llvm.dbg.declare(metadata %struct.lambda_loop_s** %lloop, metadata !4582, metadata !DIExpression()), !dbg !4583
  store %struct.lambda_loop_s* null, %struct.lambda_loop_s** %lloop, align 8, !dbg !4583
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %lbound, metadata !4584, metadata !DIExpression()), !dbg !4585
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %ubound, metadata !4586, metadata !DIExpression()), !dbg !4587
  call void @llvm.dbg.declare(metadata %union.tree_node** %test_lhs, metadata !4588, metadata !DIExpression()), !dbg !4589
  call void @llvm.dbg.declare(metadata %union.tree_node** %test_rhs, metadata !4590, metadata !DIExpression()), !dbg !4591
  call void @llvm.dbg.declare(metadata i32* %stepint, metadata !4592, metadata !DIExpression()), !dbg !4593
  call void @llvm.dbg.declare(metadata i32* %extra, metadata !4594, metadata !DIExpression()), !dbg !4595
  store i32 0, i32* %extra, align 4, !dbg !4595
  call void @llvm.dbg.declare(metadata %union.tree_node** %lboundvar, metadata !4596, metadata !DIExpression()), !dbg !4597
  call void @llvm.dbg.declare(metadata %union.tree_node** %uboundvar, metadata !4598, metadata !DIExpression()), !dbg !4599
  call void @llvm.dbg.declare(metadata %union.tree_node** %uboundresult, metadata !4600, metadata !DIExpression()), !dbg !4601
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4602
  %call = call %union.tree_node* @find_induction_var_from_exit_cond(%struct.loop* %0), !dbg !4603
  store %union.tree_node* %call, %union.tree_node** %inductionvar, align 8, !dbg !4604
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4605
  %call1 = call %union.gimple_statement_d* @get_loop_exit_condition(%struct.loop* %1), !dbg !4606
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %exit_cond, align 8, !dbg !4607
  %2 = load %union.tree_node*, %union.tree_node** %inductionvar, align 8, !dbg !4608
  %cmp = icmp eq %union.tree_node* %2, null, !dbg !4610
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4611

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exit_cond, align 8, !dbg !4612
  %cmp2 = icmp eq %union.gimple_statement_d* %3, null, !dbg !4613
  br i1 %cmp2, label %if.then, label %if.end6, !dbg !4614

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4615
  %tobool = icmp ne %struct._IO_FILE* %4, null, !dbg !4615
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4618

land.lhs.true:                                    ; preds = %if.then
  %5 = load i32, i32* @dump_flags, align 4, !dbg !4619
  %and = and i32 %5, 8, !dbg !4620
  %tobool3 = icmp ne i32 %and, 0, !dbg !4620
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !4621

if.then4:                                         ; preds = %land.lhs.true
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4622
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.24, i64 0, i64 0)), !dbg !4623
  br label %if.end, !dbg !4623

if.end:                                           ; preds = %if.then4, %land.lhs.true, %if.then
  store %struct.lambda_loop_s* null, %struct.lambda_loop_s** %retval, align 8, !dbg !4624
  br label %return, !dbg !4624

if.end6:                                          ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %inductionvar, align 8, !dbg !4625
  %ssa_name = bitcast %union.tree_node* %7 to %struct.tree_ssa_name*, !dbg !4625
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4625
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4625
  %cmp7 = icmp eq %union.gimple_statement_d* %8, null, !dbg !4627
  br i1 %cmp7, label %if.then8, label %if.end16, !dbg !4628

if.then8:                                         ; preds = %if.end6
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4629
  %tobool9 = icmp ne %struct._IO_FILE* %9, null, !dbg !4629
  br i1 %tobool9, label %land.lhs.true10, label %if.end15, !dbg !4632

land.lhs.true10:                                  ; preds = %if.then8
  %10 = load i32, i32* @dump_flags, align 4, !dbg !4633
  %and11 = and i32 %10, 8, !dbg !4634
  %tobool12 = icmp ne i32 %and11, 0, !dbg !4634
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !4635

if.then13:                                        ; preds = %land.lhs.true10
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4636
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.25, i64 0, i64 0)), !dbg !4637
  br label %if.end15, !dbg !4637

if.end15:                                         ; preds = %if.then13, %land.lhs.true10, %if.then8
  store %struct.lambda_loop_s* null, %struct.lambda_loop_s** %retval, align 8, !dbg !4638
  br label %return, !dbg !4638

if.end16:                                         ; preds = %if.end6
  %12 = load %union.tree_node*, %union.tree_node** %inductionvar, align 8, !dbg !4639
  %ssa_name17 = bitcast %union.tree_node* %12 to %struct.tree_ssa_name*, !dbg !4639
  %def_stmt18 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name17, i32 0, i32 2, !dbg !4639
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt18, align 8, !dbg !4639
  store %union.gimple_statement_d* %13, %union.gimple_statement_d** %phi, align 8, !dbg !4640
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4641
  %call19 = call i32 @gimple_code(%union.gimple_statement_d* %14), !dbg !4643
  %cmp20 = icmp ne i32 %call19, 16, !dbg !4644
  br i1 %cmp20, label %if.then21, label %if.end46, !dbg !4645

if.then21:                                        ; preds = %if.end16
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !4646, metadata !DIExpression()), !dbg !4648
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4649
  %call22 = call %union.tree_node* @single_ssa_tree_operand(%union.gimple_statement_d* %15, i32 1), !dbg !4649
  store %union.tree_node* %call22, %union.tree_node** %op, align 8, !dbg !4648
  %16 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4650
  %tobool23 = icmp ne %union.tree_node* %16, null, !dbg !4650
  br i1 %tobool23, label %if.end32, label %if.then24, !dbg !4652

if.then24:                                        ; preds = %if.then21
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4653
  %tobool25 = icmp ne %struct._IO_FILE* %17, null, !dbg !4653
  br i1 %tobool25, label %land.lhs.true26, label %if.end31, !dbg !4656

land.lhs.true26:                                  ; preds = %if.then24
  %18 = load i32, i32* @dump_flags, align 4, !dbg !4657
  %and27 = and i32 %18, 8, !dbg !4658
  %tobool28 = icmp ne i32 %and27, 0, !dbg !4658
  br i1 %tobool28, label %if.then29, label %if.end31, !dbg !4659

if.then29:                                        ; preds = %land.lhs.true26
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4660
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.25, i64 0, i64 0)), !dbg !4661
  br label %if.end31, !dbg !4661

if.end31:                                         ; preds = %if.then29, %land.lhs.true26, %if.then24
  store %struct.lambda_loop_s* null, %struct.lambda_loop_s** %retval, align 8, !dbg !4662
  br label %return, !dbg !4662

if.end32:                                         ; preds = %if.then21
  %20 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4663
  %ssa_name33 = bitcast %union.tree_node* %20 to %struct.tree_ssa_name*, !dbg !4663
  %def_stmt34 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name33, i32 0, i32 2, !dbg !4663
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt34, align 8, !dbg !4663
  store %union.gimple_statement_d* %21, %union.gimple_statement_d** %phi, align 8, !dbg !4664
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4665
  %call35 = call i32 @gimple_code(%union.gimple_statement_d* %22), !dbg !4667
  %cmp36 = icmp ne i32 %call35, 16, !dbg !4668
  br i1 %cmp36, label %if.then37, label %if.end45, !dbg !4669

if.then37:                                        ; preds = %if.end32
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4670
  %tobool38 = icmp ne %struct._IO_FILE* %23, null, !dbg !4670
  br i1 %tobool38, label %land.lhs.true39, label %if.end44, !dbg !4673

land.lhs.true39:                                  ; preds = %if.then37
  %24 = load i32, i32* @dump_flags, align 4, !dbg !4674
  %and40 = and i32 %24, 8, !dbg !4675
  %tobool41 = icmp ne i32 %and40, 0, !dbg !4675
  br i1 %tobool41, label %if.then42, label %if.end44, !dbg !4676

if.then42:                                        ; preds = %land.lhs.true39
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4677
  %call43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.25, i64 0, i64 0)), !dbg !4678
  br label %if.end44, !dbg !4678

if.end44:                                         ; preds = %if.then42, %land.lhs.true39, %if.then37
  store %struct.lambda_loop_s* null, %struct.lambda_loop_s** %retval, align 8, !dbg !4679
  br label %return, !dbg !4679

if.end45:                                         ; preds = %if.end32
  br label %if.end46, !dbg !4680

if.end46:                                         ; preds = %if.end45, %if.end16
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4681
  %call47 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %26), !dbg !4681
  %call48 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call47), !dbg !4681
  %27 = load %union.tree_node**, %union.tree_node*** %ourinductionvar.addr, align 8, !dbg !4682
  store %union.tree_node* %call48, %union.tree_node** %27, align 8, !dbg !4683
  %28 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4684
  %29 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4685
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4686
  %call49 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %30), !dbg !4686
  %call50 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call49), !dbg !4686
  %call51 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %29, %union.tree_node* %call50), !dbg !4687
  %call52 = call %union.tree_node* @instantiate_parameters(%struct.loop* %28, %union.tree_node* %call51), !dbg !4688
  store %union.tree_node* %call52, %union.tree_node** %access_fn, align 8, !dbg !4689
  %31 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !4690
  %32 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4692
  %cmp53 = icmp eq %union.tree_node* %31, %32, !dbg !4693
  br i1 %cmp53, label %if.then54, label %if.end62, !dbg !4694

if.then54:                                        ; preds = %if.end46
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4695
  %tobool55 = icmp ne %struct._IO_FILE* %33, null, !dbg !4695
  br i1 %tobool55, label %land.lhs.true56, label %if.end61, !dbg !4698

land.lhs.true56:                                  ; preds = %if.then54
  %34 = load i32, i32* @dump_flags, align 4, !dbg !4699
  %and57 = and i32 %34, 8, !dbg !4700
  %tobool58 = icmp ne i32 %and57, 0, !dbg !4700
  br i1 %tobool58, label %if.then59, label %if.end61, !dbg !4701

if.then59:                                        ; preds = %land.lhs.true56
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4702
  %call60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.26, i64 0, i64 0)), !dbg !4703
  br label %if.end61, !dbg !4703

if.end61:                                         ; preds = %if.then59, %land.lhs.true56, %if.then54
  store %struct.lambda_loop_s* null, %struct.lambda_loop_s** %retval, align 8, !dbg !4704
  br label %return, !dbg !4704

if.end62:                                         ; preds = %if.end46
  %36 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !4705
  %37 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4706
  %num = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !4707
  %38 = load i32, i32* %num, align 8, !dbg !4707
  %call63 = call %union.tree_node* @evolution_part_in_loop_num(%union.tree_node* %36, i32 %38), !dbg !4708
  store %union.tree_node* %call63, %union.tree_node** %step, align 8, !dbg !4709
  %39 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !4710
  %tobool64 = icmp ne %union.tree_node* %39, null, !dbg !4710
  br i1 %tobool64, label %lor.lhs.false65, label %if.then67, !dbg !4712

lor.lhs.false65:                                  ; preds = %if.end62
  %40 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !4713
  %41 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4714
  %cmp66 = icmp eq %union.tree_node* %40, %41, !dbg !4715
  br i1 %cmp66, label %if.then67, label %if.end75, !dbg !4716

if.then67:                                        ; preds = %lor.lhs.false65, %if.end62
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4717
  %tobool68 = icmp ne %struct._IO_FILE* %42, null, !dbg !4717
  br i1 %tobool68, label %land.lhs.true69, label %if.end74, !dbg !4720

land.lhs.true69:                                  ; preds = %if.then67
  %43 = load i32, i32* @dump_flags, align 4, !dbg !4721
  %and70 = and i32 %43, 8, !dbg !4722
  %tobool71 = icmp ne i32 %and70, 0, !dbg !4722
  br i1 %tobool71, label %if.then72, label %if.end74, !dbg !4723

if.then72:                                        ; preds = %land.lhs.true69
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4724
  %call73 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.27, i64 0, i64 0)), !dbg !4725
  br label %if.end74, !dbg !4725

if.end74:                                         ; preds = %if.then72, %land.lhs.true69, %if.then67
  store %struct.lambda_loop_s* null, %struct.lambda_loop_s** %retval, align 8, !dbg !4726
  br label %return, !dbg !4726

if.end75:                                         ; preds = %lor.lhs.false65
  %45 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !4727
  %base = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !4727
  %46 = bitcast %struct.tree_base* %base to i64*, !dbg !4727
  %bf.load = load i64, i64* %46, align 8, !dbg !4727
  %bf.clear = and i64 %bf.load, 65535, !dbg !4727
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4727
  %cmp76 = icmp ne i32 %bf.cast, 23, !dbg !4729
  br i1 %cmp76, label %if.then77, label %if.end85, !dbg !4730

if.then77:                                        ; preds = %if.end75
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4731
  %tobool78 = icmp ne %struct._IO_FILE* %47, null, !dbg !4731
  br i1 %tobool78, label %land.lhs.true79, label %if.end84, !dbg !4734

land.lhs.true79:                                  ; preds = %if.then77
  %48 = load i32, i32* @dump_flags, align 4, !dbg !4735
  %and80 = and i32 %48, 8, !dbg !4736
  %tobool81 = icmp ne i32 %and80, 0, !dbg !4736
  br i1 %tobool81, label %if.then82, label %if.end84, !dbg !4737

if.then82:                                        ; preds = %land.lhs.true79
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4738
  %call83 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.28, i64 0, i64 0)), !dbg !4739
  br label %if.end84, !dbg !4739

if.end84:                                         ; preds = %if.then82, %land.lhs.true79, %if.then77
  store %struct.lambda_loop_s* null, %struct.lambda_loop_s** %retval, align 8, !dbg !4740
  br label %return, !dbg !4740

if.end85:                                         ; preds = %if.end75
  %50 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !4741
  %int_cst = bitcast %union.tree_node* %50 to %struct.tree_int_cst*, !dbg !4741
  %int_cst86 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !4741
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst86, i32 0, i32 0, !dbg !4741
  %51 = load i64, i64* %low, align 8, !dbg !4741
  %conv = trunc i64 %51 to i32, !dbg !4741
  store i32 %conv, i32* %stepint, align 4, !dbg !4742
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4743
  %call87 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %52), !dbg !4745
  %cmp88 = icmp ne i32 %call87, 2, !dbg !4746
  br i1 %cmp88, label %if.then90, label %if.end98, !dbg !4747

if.then90:                                        ; preds = %if.end85
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4748
  %tobool91 = icmp ne %struct._IO_FILE* %53, null, !dbg !4748
  br i1 %tobool91, label %land.lhs.true92, label %if.end97, !dbg !4751

land.lhs.true92:                                  ; preds = %if.then90
  %54 = load i32, i32* @dump_flags, align 4, !dbg !4752
  %and93 = and i32 %54, 8, !dbg !4753
  %tobool94 = icmp ne i32 %and93, 0, !dbg !4753
  br i1 %tobool94, label %if.then95, label %if.end97, !dbg !4754

if.then95:                                        ; preds = %land.lhs.true92
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4755
  %call96 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.29, i64 0, i64 0)), !dbg !4756
  br label %if.end97, !dbg !4756

if.end97:                                         ; preds = %if.then95, %land.lhs.true92, %if.then90
  store %struct.lambda_loop_s* null, %struct.lambda_loop_s** %retval, align 8, !dbg !4757
  br label %return, !dbg !4757

if.end98:                                         ; preds = %if.end85
  %56 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4758
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4760
  %call99 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %57, i64 0), !dbg !4761
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call99, i32 0, i32 0, !dbg !4762
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4762
  %call100 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %56, %struct.basic_block_def* %58), !dbg !4763
  %conv101 = zext i8 %call100 to i32, !dbg !4763
  %tobool102 = icmp ne i32 %conv101, 0, !dbg !4763
  br i1 %tobool102, label %land.lhs.true103, label %if.end117, !dbg !4764

land.lhs.true103:                                 ; preds = %if.end98
  %59 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4765
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4766
  %call104 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %60, i64 1), !dbg !4767
  %src105 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call104, i32 0, i32 0, !dbg !4768
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %src105, align 8, !dbg !4768
  %call106 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %59, %struct.basic_block_def* %61), !dbg !4769
  %conv107 = zext i8 %call106 to i32, !dbg !4769
  %tobool108 = icmp ne i32 %conv107, 0, !dbg !4769
  br i1 %tobool108, label %if.then109, label %if.end117, !dbg !4770

if.then109:                                       ; preds = %land.lhs.true103
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4771
  %tobool110 = icmp ne %struct._IO_FILE* %62, null, !dbg !4771
  br i1 %tobool110, label %land.lhs.true111, label %if.end116, !dbg !4774

land.lhs.true111:                                 ; preds = %if.then109
  %63 = load i32, i32* @dump_flags, align 4, !dbg !4775
  %and112 = and i32 %63, 8, !dbg !4776
  %tobool113 = icmp ne i32 %and112, 0, !dbg !4776
  br i1 %tobool113, label %if.then114, label %if.end116, !dbg !4777

if.then114:                                       ; preds = %land.lhs.true111
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4778
  %call115 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %64, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.30, i64 0, i64 0)), !dbg !4779
  br label %if.end116, !dbg !4779

if.end116:                                        ; preds = %if.then114, %land.lhs.true111, %if.then109
  store %struct.lambda_loop_s* null, %struct.lambda_loop_s** %retval, align 8, !dbg !4780
  br label %return, !dbg !4780

if.end117:                                        ; preds = %land.lhs.true103, %if.end98
  %65 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4781
  %66 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4783
  %call118 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %66, i64 0), !dbg !4784
  %src119 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call118, i32 0, i32 0, !dbg !4785
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %src119, align 8, !dbg !4785
  %call120 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %65, %struct.basic_block_def* %67), !dbg !4786
  %tobool121 = icmp ne i8 %call120, 0, !dbg !4786
  br i1 %tobool121, label %if.then122, label %if.else, !dbg !4787

if.then122:                                       ; preds = %if.end117
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4788
  %call123 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %68, i32 1), !dbg !4788
  %call124 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call123), !dbg !4788
  store %union.tree_node* %call124, %union.tree_node** %lboundvar, align 8, !dbg !4790
  %69 = load i32, i32* %depth.addr, align 4, !dbg !4791
  %70 = load %union.tree_node*, %union.tree_node** %lboundvar, align 8, !dbg !4792
  %71 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %outerinductionvars.addr, align 8, !dbg !4793
  %72 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %invariants.addr, align 8, !dbg !4794
  %73 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %72, align 8, !dbg !4795
  %74 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !4796
  %call125 = call %struct.lambda_linear_expression_s* @gcc_tree_to_linear_expression(i32 %69, %union.tree_node* %70, %struct.VEC_tree_heap* %71, %struct.VEC_tree_heap* %73, i32 0, %struct.obstack* %74), !dbg !4797
  store %struct.lambda_linear_expression_s* %call125, %struct.lambda_linear_expression_s** %lbound, align 8, !dbg !4798
  br label %if.end129, !dbg !4799

if.else:                                          ; preds = %if.end117
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4800
  %call126 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %75, i32 0), !dbg !4800
  %call127 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call126), !dbg !4800
  store %union.tree_node* %call127, %union.tree_node** %lboundvar, align 8, !dbg !4802
  %76 = load i32, i32* %depth.addr, align 4, !dbg !4803
  %77 = load %union.tree_node*, %union.tree_node** %lboundvar, align 8, !dbg !4804
  %78 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %outerinductionvars.addr, align 8, !dbg !4805
  %79 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %invariants.addr, align 8, !dbg !4806
  %80 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %79, align 8, !dbg !4807
  %81 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !4808
  %call128 = call %struct.lambda_linear_expression_s* @gcc_tree_to_linear_expression(i32 %76, %union.tree_node* %77, %struct.VEC_tree_heap* %78, %struct.VEC_tree_heap* %80, i32 0, %struct.obstack* %81), !dbg !4809
  store %struct.lambda_linear_expression_s* %call128, %struct.lambda_linear_expression_s** %lbound, align 8, !dbg !4810
  br label %if.end129

if.end129:                                        ; preds = %if.else, %if.then122
  %82 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lbound, align 8, !dbg !4811
  %tobool130 = icmp ne %struct.lambda_linear_expression_s* %82, null, !dbg !4811
  br i1 %tobool130, label %if.end139, label %if.then131, !dbg !4813

if.then131:                                       ; preds = %if.end129
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4814
  %tobool132 = icmp ne %struct._IO_FILE* %83, null, !dbg !4814
  br i1 %tobool132, label %land.lhs.true133, label %if.end138, !dbg !4817

land.lhs.true133:                                 ; preds = %if.then131
  %84 = load i32, i32* @dump_flags, align 4, !dbg !4818
  %and134 = and i32 %84, 8, !dbg !4819
  %tobool135 = icmp ne i32 %and134, 0, !dbg !4819
  br i1 %tobool135, label %if.then136, label %if.end138, !dbg !4820

if.then136:                                       ; preds = %land.lhs.true133
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4821
  %call137 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %85, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.31, i64 0, i64 0)), !dbg !4822
  br label %if.end138, !dbg !4822

if.end138:                                        ; preds = %if.then136, %land.lhs.true133, %if.then131
  store %struct.lambda_loop_s* null, %struct.lambda_loop_s** %retval, align 8, !dbg !4823
  br label %return, !dbg !4823

if.end139:                                        ; preds = %if.end129
  %86 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %invariants.addr, align 8, !dbg !4824
  %call140 = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %86, i32 1), !dbg !4824
  %87 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exit_cond, align 8, !dbg !4825
  %call141 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %87), !dbg !4826
  store %union.tree_node* %call141, %union.tree_node** %test_lhs, align 8, !dbg !4827
  %88 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exit_cond, align 8, !dbg !4828
  %call142 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %88), !dbg !4829
  store %union.tree_node* %call142, %union.tree_node** %test_rhs, align 8, !dbg !4830
  %89 = load %union.tree_node*, %union.tree_node** %test_rhs, align 8, !dbg !4831
  %base143 = bitcast %union.tree_node* %89 to %struct.tree_base*, !dbg !4831
  %90 = bitcast %struct.tree_base* %base143 to i64*, !dbg !4831
  %bf.load144 = load i64, i64* %90, align 8, !dbg !4831
  %bf.clear145 = and i64 %bf.load144, 65535, !dbg !4831
  %bf.cast146 = trunc i64 %bf.clear145 to i32, !dbg !4831
  %cmp147 = icmp eq i32 %bf.cast146, 141, !dbg !4833
  br i1 %cmp147, label %land.lhs.true149, label %if.else157, !dbg !4834

land.lhs.true149:                                 ; preds = %if.end139
  %91 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4835
  %92 = load %union.tree_node*, %union.tree_node** %test_rhs, align 8, !dbg !4836
  %call150 = call zeroext i8 @invariant_in_loop_and_outer_loops(%struct.loop* %91, %union.tree_node* %92), !dbg !4837
  %conv151 = zext i8 %call150 to i32, !dbg !4837
  %tobool152 = icmp ne i32 %conv151, 0, !dbg !4837
  br i1 %tobool152, label %if.then153, label %if.else157, !dbg !4838

if.then153:                                       ; preds = %land.lhs.true149
  %93 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %invariants.addr, align 8, !dbg !4839
  %94 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %93, align 8, !dbg !4839
  %tobool154 = icmp ne %struct.VEC_tree_heap* %94, null, !dbg !4839
  br i1 %tobool154, label %cond.true, label %cond.false, !dbg !4839

cond.true:                                        ; preds = %if.then153
  %95 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %invariants.addr, align 8, !dbg !4839
  %96 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %95, align 8, !dbg !4839
  %base155 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %96, i32 0, i32 0, !dbg !4839
  br label %cond.end, !dbg !4839

cond.false:                                       ; preds = %if.then153
  br label %cond.end, !dbg !4839

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base155, %cond.true ], [ null, %cond.false ], !dbg !4839
  %97 = load %union.tree_node*, %union.tree_node** %test_rhs, align 8, !dbg !4839
  %call156 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %97), !dbg !4839
  br label %if.end177, !dbg !4839

if.else157:                                       ; preds = %land.lhs.true149, %if.end139
  %98 = load %union.tree_node*, %union.tree_node** %test_lhs, align 8, !dbg !4840
  %base158 = bitcast %union.tree_node* %98 to %struct.tree_base*, !dbg !4840
  %99 = bitcast %struct.tree_base* %base158 to i64*, !dbg !4840
  %bf.load159 = load i64, i64* %99, align 8, !dbg !4840
  %bf.clear160 = and i64 %bf.load159, 65535, !dbg !4840
  %bf.cast161 = trunc i64 %bf.clear160 to i32, !dbg !4840
  %cmp162 = icmp eq i32 %bf.cast161, 141, !dbg !4842
  br i1 %cmp162, label %land.lhs.true164, label %if.end176, !dbg !4843

land.lhs.true164:                                 ; preds = %if.else157
  %100 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4844
  %101 = load %union.tree_node*, %union.tree_node** %test_lhs, align 8, !dbg !4845
  %call165 = call zeroext i8 @invariant_in_loop_and_outer_loops(%struct.loop* %100, %union.tree_node* %101), !dbg !4846
  %conv166 = zext i8 %call165 to i32, !dbg !4846
  %tobool167 = icmp ne i32 %conv166, 0, !dbg !4846
  br i1 %tobool167, label %if.then168, label %if.end176, !dbg !4847

if.then168:                                       ; preds = %land.lhs.true164
  %102 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %invariants.addr, align 8, !dbg !4848
  %103 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %102, align 8, !dbg !4848
  %tobool169 = icmp ne %struct.VEC_tree_heap* %103, null, !dbg !4848
  br i1 %tobool169, label %cond.true170, label %cond.false172, !dbg !4848

cond.true170:                                     ; preds = %if.then168
  %104 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %invariants.addr, align 8, !dbg !4848
  %105 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %104, align 8, !dbg !4848
  %base171 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %105, i32 0, i32 0, !dbg !4848
  br label %cond.end173, !dbg !4848

cond.false172:                                    ; preds = %if.then168
  br label %cond.end173, !dbg !4848

cond.end173:                                      ; preds = %cond.false172, %cond.true170
  %cond174 = phi %struct.VEC_tree_base* [ %base171, %cond.true170 ], [ null, %cond.false172 ], !dbg !4848
  %106 = load %union.tree_node*, %union.tree_node** %test_lhs, align 8, !dbg !4848
  %call175 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond174, %union.tree_node* %106), !dbg !4848
  br label %if.end176, !dbg !4848

if.end176:                                        ; preds = %cond.end173, %land.lhs.true164, %if.else157
  br label %if.end177

if.end177:                                        ; preds = %if.end176, %cond.end
  %107 = load %union.tree_node*, %union.tree_node** %test_lhs, align 8, !dbg !4849
  %108 = load %union.tree_node*, %union.tree_node** %inductionvar, align 8, !dbg !4851
  %cmp178 = icmp eq %union.tree_node* %107, %108, !dbg !4852
  br i1 %cmp178, label %if.then180, label %if.else181, !dbg !4853

if.then180:                                       ; preds = %if.end177
  %109 = load %union.tree_node*, %union.tree_node** %test_rhs, align 8, !dbg !4854
  store %union.tree_node* %109, %union.tree_node** %uboundvar, align 8, !dbg !4855
  br label %if.end182, !dbg !4856

if.else181:                                       ; preds = %if.end177
  %110 = load %union.tree_node*, %union.tree_node** %test_lhs, align 8, !dbg !4857
  store %union.tree_node* %110, %union.tree_node** %uboundvar, align 8, !dbg !4858
  br label %if.end182

if.end182:                                        ; preds = %if.else181, %if.then180
  %111 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %invariants.addr, align 8, !dbg !4859
  %112 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %111, align 8, !dbg !4859
  %tobool183 = icmp ne %struct.VEC_tree_heap* %112, null, !dbg !4859
  br i1 %tobool183, label %cond.true184, label %cond.false186, !dbg !4859

cond.true184:                                     ; preds = %if.end182
  %113 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %invariants.addr, align 8, !dbg !4859
  %114 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %113, align 8, !dbg !4859
  %base185 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %114, i32 0, i32 0, !dbg !4859
  br label %cond.end187, !dbg !4859

cond.false186:                                    ; preds = %if.end182
  br label %cond.end187, !dbg !4859

cond.end187:                                      ; preds = %cond.false186, %cond.true184
  %cond188 = phi %struct.VEC_tree_base* [ %base185, %cond.true184 ], [ null, %cond.false186 ], !dbg !4859
  %call189 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond188), !dbg !4859
  %115 = load i32, i32* %depth.addr, align 4, !dbg !4859
  %mul = mul nsw i32 2, %115, !dbg !4859
  %cmp190 = icmp ule i32 %call189, %mul, !dbg !4859
  br i1 %cmp190, label %cond.false193, label %cond.true192, !dbg !4859

cond.true192:                                     ; preds = %cond.end187
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1398, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4859
  br label %cond.end194, !dbg !4859

cond.false193:                                    ; preds = %cond.end187
  br label %cond.end194, !dbg !4859

cond.end194:                                      ; preds = %cond.false193, %cond.true192
  %cond195 = phi i32 [ 0, %cond.true192 ], [ 0, %cond.false193 ], !dbg !4859
  %116 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exit_cond, align 8, !dbg !4860
  %call196 = call i32 @gimple_cond_code(%union.gimple_statement_d* %116), !dbg !4862
  %cmp197 = icmp eq i32 %call196, 97, !dbg !4863
  br i1 %cmp197, label %if.then199, label %if.else201, !dbg !4864

if.then199:                                       ; preds = %cond.end194
  %117 = load i32, i32* %stepint, align 4, !dbg !4865
  %mul200 = mul nsw i32 -1, %117, !dbg !4866
  store i32 %mul200, i32* %extra, align 4, !dbg !4867
  br label %if.end222, !dbg !4868

if.else201:                                       ; preds = %cond.end194
  %118 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exit_cond, align 8, !dbg !4869
  %call202 = call i32 @gimple_cond_code(%union.gimple_statement_d* %118), !dbg !4871
  %cmp203 = icmp eq i32 %call202, 102, !dbg !4872
  br i1 %cmp203, label %if.then205, label %if.else207, !dbg !4873

if.then205:                                       ; preds = %if.else201
  %119 = load i32, i32* %stepint, align 4, !dbg !4874
  %mul206 = mul nsw i32 -1, %119, !dbg !4875
  store i32 %mul206, i32* %extra, align 4, !dbg !4876
  br label %if.end221, !dbg !4877

if.else207:                                       ; preds = %if.else201
  %120 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exit_cond, align 8, !dbg !4878
  %call208 = call i32 @gimple_cond_code(%union.gimple_statement_d* %120), !dbg !4880
  %cmp209 = icmp eq i32 %call208, 99, !dbg !4881
  br i1 %cmp209, label %if.then211, label %if.else213, !dbg !4882

if.then211:                                       ; preds = %if.else207
  %121 = load i32, i32* %stepint, align 4, !dbg !4883
  %mul212 = mul nsw i32 -1, %121, !dbg !4884
  store i32 %mul212, i32* %extra, align 4, !dbg !4885
  br label %if.end220, !dbg !4886

if.else213:                                       ; preds = %if.else207
  %122 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exit_cond, align 8, !dbg !4887
  %call214 = call i32 @gimple_cond_code(%union.gimple_statement_d* %122), !dbg !4889
  %cmp215 = icmp eq i32 %call214, 101, !dbg !4890
  br i1 %cmp215, label %if.then217, label %if.end219, !dbg !4891

if.then217:                                       ; preds = %if.else213
  %123 = load i32, i32* %stepint, align 4, !dbg !4892
  %mul218 = mul nsw i32 1, %123, !dbg !4893
  store i32 %mul218, i32* %extra, align 4, !dbg !4894
  br label %if.end219, !dbg !4895

if.end219:                                        ; preds = %if.then217, %if.else213
  br label %if.end220

if.end220:                                        ; preds = %if.end219, %if.then211
  br label %if.end221

if.end221:                                        ; preds = %if.end220, %if.then205
  br label %if.end222

if.end222:                                        ; preds = %if.end221, %if.then199
  %124 = load i32, i32* %depth.addr, align 4, !dbg !4896
  %125 = load %union.tree_node*, %union.tree_node** %uboundvar, align 8, !dbg !4897
  %126 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %outerinductionvars.addr, align 8, !dbg !4898
  %127 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %invariants.addr, align 8, !dbg !4899
  %128 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %127, align 8, !dbg !4900
  %129 = load i32, i32* %extra, align 4, !dbg !4901
  %130 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !4902
  %call223 = call %struct.lambda_linear_expression_s* @gcc_tree_to_linear_expression(i32 %124, %union.tree_node* %125, %struct.VEC_tree_heap* %126, %struct.VEC_tree_heap* %128, i32 %129, %struct.obstack* %130), !dbg !4903
  store %struct.lambda_linear_expression_s* %call223, %struct.lambda_linear_expression_s** %ubound, align 8, !dbg !4904
  %131 = load %union.tree_node*, %union.tree_node** %uboundvar, align 8, !dbg !4905
  %common = bitcast %union.tree_node* %131 to %struct.tree_common*, !dbg !4905
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4905
  %132 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4905
  %133 = load %union.tree_node*, %union.tree_node** %uboundvar, align 8, !dbg !4905
  %134 = load %union.tree_node*, %union.tree_node** %uboundvar, align 8, !dbg !4905
  %common224 = bitcast %union.tree_node* %134 to %struct.tree_common*, !dbg !4905
  %type225 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common224, i32 0, i32 2, !dbg !4905
  %135 = load %union.tree_node*, %union.tree_node** %type225, align 8, !dbg !4905
  %136 = load i32, i32* %extra, align 4, !dbg !4905
  %conv226 = sext i32 %136 to i64, !dbg !4905
  %call227 = call %union.tree_node* @build_int_cst(%union.tree_node* %135, i64 %conv226), !dbg !4905
  %call228 = call %union.tree_node* @build2_stat(i32 63, %union.tree_node* %132, %union.tree_node* %133, %union.tree_node* %call227), !dbg !4905
  store %union.tree_node* %call228, %union.tree_node** %uboundresult, align 8, !dbg !4906
  %137 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %uboundvars.addr, align 8, !dbg !4907
  %138 = load %union.tree_node*, %union.tree_node** %uboundresult, align 8, !dbg !4907
  %call229 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %137, %union.tree_node* %138), !dbg !4907
  %139 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %lboundvars.addr, align 8, !dbg !4908
  %140 = load %union.tree_node*, %union.tree_node** %lboundvar, align 8, !dbg !4908
  %call230 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %139, %union.tree_node* %140), !dbg !4908
  %141 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %steps.addr, align 8, !dbg !4909
  %142 = load i32, i32* %stepint, align 4, !dbg !4909
  %call231 = call i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %141, i32 %142), !dbg !4909
  %143 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %ubound, align 8, !dbg !4910
  %tobool232 = icmp ne %struct.lambda_linear_expression_s* %143, null, !dbg !4910
  br i1 %tobool232, label %if.end241, label %if.then233, !dbg !4912

if.then233:                                       ; preds = %if.end222
  %144 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4913
  %tobool234 = icmp ne %struct._IO_FILE* %144, null, !dbg !4913
  br i1 %tobool234, label %land.lhs.true235, label %if.end240, !dbg !4916

land.lhs.true235:                                 ; preds = %if.then233
  %145 = load i32, i32* @dump_flags, align 4, !dbg !4917
  %and236 = and i32 %145, 8, !dbg !4918
  %tobool237 = icmp ne i32 %and236, 0, !dbg !4918
  br i1 %tobool237, label %if.then238, label %if.end240, !dbg !4919

if.then238:                                       ; preds = %land.lhs.true235
  %146 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4920
  %call239 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %146, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.32, i64 0, i64 0)), !dbg !4921
  br label %if.end240, !dbg !4921

if.end240:                                        ; preds = %if.then238, %land.lhs.true235, %if.then233
  store %struct.lambda_loop_s* null, %struct.lambda_loop_s** %retval, align 8, !dbg !4922
  br label %return, !dbg !4922

if.end241:                                        ; preds = %if.end222
  %call242 = call i8* @ggc_alloc_cleared_stat(i64 32), !dbg !4923
  %147 = bitcast i8* %call242 to %struct.lambda_loop_s*, !dbg !4923
  store %struct.lambda_loop_s* %147, %struct.lambda_loop_s** %lloop, align 8, !dbg !4924
  %148 = load i32, i32* %stepint, align 4, !dbg !4925
  %149 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %lloop, align 8, !dbg !4926
  %step243 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %149, i32 0, i32 3, !dbg !4926
  store i32 %148, i32* %step243, align 8, !dbg !4927
  %150 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lbound, align 8, !dbg !4928
  %151 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %lloop, align 8, !dbg !4929
  %lower_bound = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %151, i32 0, i32 0, !dbg !4929
  store %struct.lambda_linear_expression_s* %150, %struct.lambda_linear_expression_s** %lower_bound, align 8, !dbg !4930
  %152 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %ubound, align 8, !dbg !4931
  %153 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %lloop, align 8, !dbg !4932
  %upper_bound = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %153, i32 0, i32 1, !dbg !4932
  store %struct.lambda_linear_expression_s* %152, %struct.lambda_linear_expression_s** %upper_bound, align 8, !dbg !4933
  %154 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %lloop, align 8, !dbg !4934
  store %struct.lambda_loop_s* %154, %struct.lambda_loop_s** %retval, align 8, !dbg !4935
  br label %return, !dbg !4935

return:                                           ; preds = %if.end241, %if.end240, %if.end138, %if.end116, %if.end97, %if.end84, %if.end74, %if.end61, %if.end44, %if.end31, %if.end15, %if.end
  %155 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %retval, align 8, !dbg !4936
  ret %struct.lambda_loop_s* %155, !dbg !4936
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vec_, %union.tree_node* %obj_) #0 !dbg !4937 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !4940, metadata !DIExpression()), !dbg !4941
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !4942, metadata !DIExpression()), !dbg !4941
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4941
  %call = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %0, i32 1), !dbg !4941
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4941
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !4941
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !4941
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4941

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4941
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !4941
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !4941
  br label %cond.end, !dbg !4941

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4941

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4941
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !4941
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !4941
  ret %union.tree_node** %call1, !dbg !4941
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.lambda_loop_s** @VEC_lambda_loop_heap_safe_push(%struct.VEC_lambda_loop_heap** %vec_, %struct.lambda_loop_s* %obj_) #0 !dbg !4943 {
entry:
  %vec_.addr = alloca %struct.VEC_lambda_loop_heap**, align 8
  %obj_.addr = alloca %struct.lambda_loop_s*, align 8
  store %struct.VEC_lambda_loop_heap** %vec_, %struct.VEC_lambda_loop_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_loop_heap*** %vec_.addr, metadata !4947, metadata !DIExpression()), !dbg !4948
  store %struct.lambda_loop_s* %obj_, %struct.lambda_loop_s** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_loop_s** %obj_.addr, metadata !4949, metadata !DIExpression()), !dbg !4948
  %0 = load %struct.VEC_lambda_loop_heap**, %struct.VEC_lambda_loop_heap*** %vec_.addr, align 8, !dbg !4948
  %call = call i32 @VEC_lambda_loop_heap_reserve(%struct.VEC_lambda_loop_heap** %0, i32 1), !dbg !4948
  %1 = load %struct.VEC_lambda_loop_heap**, %struct.VEC_lambda_loop_heap*** %vec_.addr, align 8, !dbg !4948
  %2 = load %struct.VEC_lambda_loop_heap*, %struct.VEC_lambda_loop_heap** %1, align 8, !dbg !4948
  %tobool = icmp ne %struct.VEC_lambda_loop_heap* %2, null, !dbg !4948
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4948

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_lambda_loop_heap**, %struct.VEC_lambda_loop_heap*** %vec_.addr, align 8, !dbg !4948
  %4 = load %struct.VEC_lambda_loop_heap*, %struct.VEC_lambda_loop_heap** %3, align 8, !dbg !4948
  %base = getelementptr inbounds %struct.VEC_lambda_loop_heap, %struct.VEC_lambda_loop_heap* %4, i32 0, i32 0, !dbg !4948
  br label %cond.end, !dbg !4948

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4948

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_lambda_loop_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4948
  %5 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %obj_.addr, align 8, !dbg !4948
  %call1 = call %struct.lambda_loop_s** @VEC_lambda_loop_base_quick_push(%struct.VEC_lambda_loop_base* %cond, %struct.lambda_loop_s* %5), !dbg !4948
  ret %struct.lambda_loop_s** %call1, !dbg !4948
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @perfect_nestify(%struct.loop* %loop, %struct.VEC_tree_heap* %lbounds, %struct.VEC_tree_heap* %ubounds, %struct.VEC_int_heap* %steps, %struct.VEC_tree_heap* %loopivs) #0 !dbg !4950 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %lbounds.addr = alloca %struct.VEC_tree_heap*, align 8
  %ubounds.addr = alloca %struct.VEC_tree_heap*, align 8
  %steps.addr = alloca %struct.VEC_int_heap*, align 8
  %loopivs.addr = alloca %struct.VEC_tree_heap*, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  %exit_condition = alloca %union.gimple_statement_d*, align 8
  %cond_stmt = alloca %union.gimple_statement_d*, align 8
  %preheaderbb = alloca %struct.basic_block_def*, align 8
  %headerbb = alloca %struct.basic_block_def*, align 8
  %bodybb = alloca %struct.basic_block_def*, align 8
  %latchbb = alloca %struct.basic_block_def*, align 8
  %olddest = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %firstbsi = alloca %struct.gimple_stmt_iterator, align 8
  %insert_after = alloca i8, align 1
  %e = alloca %struct.edge_def*, align 8
  %newloop = alloca %struct.loop*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %uboundvar = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %oldivvar = alloca %union.tree_node*, align 8
  %ivvar = alloca %union.tree_node*, align 8
  %ivvarinced = alloca %union.tree_node*, align 8
  %phis = alloca %struct.VEC_tree_heap*, align 8
  %locations = alloca %struct.VEC_source_location_heap*, align 8
  %replacements = alloca %struct.htab*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp31 = alloca %struct.gimple_stmt_iterator, align 8
  %def = alloca %union.tree_node*, align 8
  %phiname = alloca %union.tree_node*, align 8
  %locus = alloca i32, align 4
  %tmp80 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp144 = alloca %struct.gimple_stmt_iterator, align 8
  %tobsi = alloca %struct.gimple_stmt_iterator, align 8
  %header_bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp161 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt169 = alloca %union.gimple_statement_d*, align 8
  %tmp184 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt192 = alloca %union.gimple_statement_d*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4953, metadata !DIExpression()), !dbg !4954
  store %struct.VEC_tree_heap* %lbounds, %struct.VEC_tree_heap** %lbounds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %lbounds.addr, metadata !4955, metadata !DIExpression()), !dbg !4956
  store %struct.VEC_tree_heap* %ubounds, %struct.VEC_tree_heap** %ubounds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %ubounds.addr, metadata !4957, metadata !DIExpression()), !dbg !4958
  store %struct.VEC_int_heap* %steps, %struct.VEC_int_heap** %steps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap** %steps.addr, metadata !4959, metadata !DIExpression()), !dbg !4960
  store %struct.VEC_tree_heap* %loopivs, %struct.VEC_tree_heap** %loopivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %loopivs.addr, metadata !4961, metadata !DIExpression()), !dbg !4962
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !4963, metadata !DIExpression()), !dbg !4964
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %exit_condition, metadata !4965, metadata !DIExpression()), !dbg !4966
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond_stmt, metadata !4967, metadata !DIExpression()), !dbg !4968
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %preheaderbb, metadata !4969, metadata !DIExpression()), !dbg !4970
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %headerbb, metadata !4971, metadata !DIExpression()), !dbg !4972
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bodybb, metadata !4973, metadata !DIExpression()), !dbg !4974
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %latchbb, metadata !4975, metadata !DIExpression()), !dbg !4976
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %olddest, metadata !4977, metadata !DIExpression()), !dbg !4978
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4979, metadata !DIExpression()), !dbg !4980
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4981, metadata !DIExpression()), !dbg !4982
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %firstbsi, metadata !4983, metadata !DIExpression()), !dbg !4984
  call void @llvm.dbg.declare(metadata i8* %insert_after, metadata !4985, metadata !DIExpression()), !dbg !4986
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4987, metadata !DIExpression()), !dbg !4988
  call void @llvm.dbg.declare(metadata %struct.loop** %newloop, metadata !4989, metadata !DIExpression()), !dbg !4990
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4991, metadata !DIExpression()), !dbg !4992
  call void @llvm.dbg.declare(metadata %union.tree_node** %uboundvar, metadata !4993, metadata !DIExpression()), !dbg !4994
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4995, metadata !DIExpression()), !dbg !4996
  call void @llvm.dbg.declare(metadata %union.tree_node** %oldivvar, metadata !4997, metadata !DIExpression()), !dbg !4998
  call void @llvm.dbg.declare(metadata %union.tree_node** %ivvar, metadata !4999, metadata !DIExpression()), !dbg !5000
  call void @llvm.dbg.declare(metadata %union.tree_node** %ivvarinced, metadata !5001, metadata !DIExpression()), !dbg !5002
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %phis, metadata !5003, metadata !DIExpression()), !dbg !5004
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %phis, align 8, !dbg !5004
  call void @llvm.dbg.declare(metadata %struct.VEC_source_location_heap** %locations, metadata !5005, metadata !DIExpression()), !dbg !5006
  store %struct.VEC_source_location_heap* null, %struct.VEC_source_location_heap** %locations, align 8, !dbg !5006
  call void @llvm.dbg.declare(metadata %struct.htab** %replacements, metadata !5007, metadata !DIExpression()), !dbg !5008
  store %struct.htab* null, %struct.htab** %replacements, align 8, !dbg !5008
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5009
  %call = call %struct.edge_def* @single_exit(%struct.loop* %0), !dbg !5010
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !5011
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5011
  store %struct.basic_block_def* %1, %struct.basic_block_def** %olddest, align 8, !dbg !5012
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5013
  %call1 = call %struct.edge_def* @single_exit(%struct.loop* %2), !dbg !5014
  %call2 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call1), !dbg !5015
  store %struct.basic_block_def* %call2, %struct.basic_block_def** %preheaderbb, align 8, !dbg !5016
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5017
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !5017
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5017
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5017
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 1, !dbg !5017
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5017
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 5, !dbg !5018
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !5018
  %call3 = call %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def* %6), !dbg !5019
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %headerbb, align 8, !dbg !5020
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %olddest, align 8, !dbg !5021
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %7), !dbg !5023
  %8 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5023
  %9 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5023
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false), !dbg !5023
  br label %for.cond, !dbg !5024

for.cond:                                         ; preds = %for.inc, %entry
  %call4 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5025
  %tobool = icmp ne i8 %call4, 0, !dbg !5027
  %lnot = xor i1 %tobool, true, !dbg !5027
  br i1 %lnot, label %for.body, label %for.end, !dbg !5028

for.body:                                         ; preds = %for.cond
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5029
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %phi, align 8, !dbg !5031
  %call6 = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %phis, i32 2), !dbg !5032
  %call7 = call i32 @VEC_source_location_heap_reserve(%struct.VEC_source_location_heap** %locations, i32 1), !dbg !5033
  %10 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phis, align 8, !dbg !5034
  %tobool8 = icmp ne %struct.VEC_tree_heap* %10, null, !dbg !5034
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !5034

cond.true:                                        ; preds = %for.body
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phis, align 8, !dbg !5034
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %11, i32 0, i32 0, !dbg !5034
  br label %cond.end, !dbg !5034

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !5034

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5034
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5034
  %call9 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %12), !dbg !5034
  %call10 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call9), !dbg !5034
  %call11 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %call10), !dbg !5034
  %13 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phis, align 8, !dbg !5035
  %tobool12 = icmp ne %struct.VEC_tree_heap* %13, null, !dbg !5035
  br i1 %tobool12, label %cond.true13, label %cond.false15, !dbg !5035

cond.true13:                                      ; preds = %cond.end
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phis, align 8, !dbg !5035
  %base14 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %14, i32 0, i32 0, !dbg !5035
  br label %cond.end16, !dbg !5035

cond.false15:                                     ; preds = %cond.end
  br label %cond.end16, !dbg !5035

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi %struct.VEC_tree_base* [ %base14, %cond.true13 ], [ null, %cond.false15 ], !dbg !5035
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5035
  %call18 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %15, i32 0), !dbg !5035
  %call19 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call18), !dbg !5035
  %call20 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond17, %union.tree_node* %call19), !dbg !5035
  %16 = load %struct.VEC_source_location_heap*, %struct.VEC_source_location_heap** %locations, align 8, !dbg !5036
  %tobool21 = icmp ne %struct.VEC_source_location_heap* %16, null, !dbg !5036
  br i1 %tobool21, label %cond.true22, label %cond.false24, !dbg !5036

cond.true22:                                      ; preds = %cond.end16
  %17 = load %struct.VEC_source_location_heap*, %struct.VEC_source_location_heap** %locations, align 8, !dbg !5036
  %base23 = getelementptr inbounds %struct.VEC_source_location_heap, %struct.VEC_source_location_heap* %17, i32 0, i32 0, !dbg !5036
  br label %cond.end25, !dbg !5036

cond.false24:                                     ; preds = %cond.end16
  br label %cond.end25, !dbg !5036

cond.end25:                                       ; preds = %cond.false24, %cond.true22
  %cond26 = phi %struct.VEC_source_location_base* [ %base23, %cond.true22 ], [ null, %cond.false24 ], !dbg !5036
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5036
  %call27 = call i32 @gimple_phi_arg_location(%union.gimple_statement_d* %18, i64 0), !dbg !5036
  %call28 = call i32* @VEC_source_location_base_quick_push(%struct.VEC_source_location_base* %cond26, i32 %call27), !dbg !5036
  br label %for.inc, !dbg !5037

for.inc:                                          ; preds = %cond.end25
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !5038
  br label %for.cond, !dbg !5039, !llvm.loop !5040

for.end:                                          ; preds = %for.cond
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %preheaderbb, align 8, !dbg !5042
  %call29 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %19), !dbg !5043
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %headerbb, align 8, !dbg !5044
  %call30 = call %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def* %call29, %struct.basic_block_def* %20), !dbg !5045
  store %struct.edge_def* %call30, %struct.edge_def** %e, align 8, !dbg !5046
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %olddest, align 8, !dbg !5047
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp31, %struct.basic_block_def* %21), !dbg !5049
  %22 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5049
  %23 = bitcast %struct.gimple_stmt_iterator* %tmp31 to i8*, !dbg !5049
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 24, i1 false), !dbg !5049
  br label %for.cond32, !dbg !5050

for.cond32:                                       ; preds = %for.body36, %for.end
  %call33 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5051
  %tobool34 = icmp ne i8 %call33, 0, !dbg !5053
  %lnot35 = xor i1 %tobool34, true, !dbg !5053
  br i1 %lnot35, label %for.body36, label %for.end37, !dbg !5054

for.body36:                                       ; preds = %for.cond32
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %bsi, i8 zeroext 0), !dbg !5055
  br label %for.cond32, !dbg !5056, !llvm.loop !5057

for.end37:                                        ; preds = %for.cond32
  br label %while.cond, !dbg !5059

while.cond:                                       ; preds = %cond.end63, %for.end37
  %24 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phis, align 8, !dbg !5060
  %tobool38 = icmp ne %struct.VEC_tree_heap* %24, null, !dbg !5060
  br i1 %tobool38, label %cond.true39, label %cond.false41, !dbg !5060

cond.true39:                                      ; preds = %while.cond
  %25 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phis, align 8, !dbg !5060
  %base40 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %25, i32 0, i32 0, !dbg !5060
  br label %cond.end42, !dbg !5060

cond.false41:                                     ; preds = %while.cond
  br label %cond.end42, !dbg !5060

cond.end42:                                       ; preds = %cond.false41, %cond.true39
  %cond43 = phi %struct.VEC_tree_base* [ %base40, %cond.true39 ], [ null, %cond.false41 ], !dbg !5060
  %call44 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond43), !dbg !5060
  %cmp = icmp ne i32 %call44, 0, !dbg !5061
  br i1 %cmp, label %while.body, label %while.end, !dbg !5059

while.body:                                       ; preds = %cond.end42
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !5062, metadata !DIExpression()), !dbg !5064
  call void @llvm.dbg.declare(metadata %union.tree_node** %phiname, metadata !5065, metadata !DIExpression()), !dbg !5066
  call void @llvm.dbg.declare(metadata i32* %locus, metadata !5067, metadata !DIExpression()), !dbg !5068
  %26 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phis, align 8, !dbg !5069
  %tobool45 = icmp ne %struct.VEC_tree_heap* %26, null, !dbg !5069
  br i1 %tobool45, label %cond.true46, label %cond.false48, !dbg !5069

cond.true46:                                      ; preds = %while.body
  %27 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phis, align 8, !dbg !5069
  %base47 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %27, i32 0, i32 0, !dbg !5069
  br label %cond.end49, !dbg !5069

cond.false48:                                     ; preds = %while.body
  br label %cond.end49, !dbg !5069

cond.end49:                                       ; preds = %cond.false48, %cond.true46
  %cond50 = phi %struct.VEC_tree_base* [ %base47, %cond.true46 ], [ null, %cond.false48 ], !dbg !5069
  %call51 = call %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond50), !dbg !5069
  store %union.tree_node* %call51, %union.tree_node** %def, align 8, !dbg !5070
  %28 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phis, align 8, !dbg !5071
  %tobool52 = icmp ne %struct.VEC_tree_heap* %28, null, !dbg !5071
  br i1 %tobool52, label %cond.true53, label %cond.false55, !dbg !5071

cond.true53:                                      ; preds = %cond.end49
  %29 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %phis, align 8, !dbg !5071
  %base54 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %29, i32 0, i32 0, !dbg !5071
  br label %cond.end56, !dbg !5071

cond.false55:                                     ; preds = %cond.end49
  br label %cond.end56, !dbg !5071

cond.end56:                                       ; preds = %cond.false55, %cond.true53
  %cond57 = phi %struct.VEC_tree_base* [ %base54, %cond.true53 ], [ null, %cond.false55 ], !dbg !5071
  %call58 = call %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond57), !dbg !5071
  store %union.tree_node* %call58, %union.tree_node** %phiname, align 8, !dbg !5072
  %30 = load %struct.VEC_source_location_heap*, %struct.VEC_source_location_heap** %locations, align 8, !dbg !5073
  %tobool59 = icmp ne %struct.VEC_source_location_heap* %30, null, !dbg !5073
  br i1 %tobool59, label %cond.true60, label %cond.false62, !dbg !5073

cond.true60:                                      ; preds = %cond.end56
  %31 = load %struct.VEC_source_location_heap*, %struct.VEC_source_location_heap** %locations, align 8, !dbg !5073
  %base61 = getelementptr inbounds %struct.VEC_source_location_heap, %struct.VEC_source_location_heap* %31, i32 0, i32 0, !dbg !5073
  br label %cond.end63, !dbg !5073

cond.false62:                                     ; preds = %cond.end56
  br label %cond.end63, !dbg !5073

cond.end63:                                       ; preds = %cond.false62, %cond.true60
  %cond64 = phi %struct.VEC_source_location_base* [ %base61, %cond.true60 ], [ null, %cond.false62 ], !dbg !5073
  %call65 = call i32 @VEC_source_location_base_pop(%struct.VEC_source_location_base* %cond64), !dbg !5073
  store i32 %call65, i32* %locus, align 4, !dbg !5074
  %32 = load %union.tree_node*, %union.tree_node** %phiname, align 8, !dbg !5075
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %preheaderbb, align 8, !dbg !5076
  %call66 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %32, %struct.basic_block_def* %33), !dbg !5077
  store %union.gimple_statement_d* %call66, %union.gimple_statement_d** %phi, align 8, !dbg !5078
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5079
  %35 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !5080
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %preheaderbb, align 8, !dbg !5081
  %call67 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %36), !dbg !5082
  %37 = load i32, i32* %locus, align 4, !dbg !5083
  call void @add_phi_arg(%union.gimple_statement_d* %34, %union.tree_node* %35, %struct.edge_def* %call67, i32 %37), !dbg !5084
  br label %while.cond, !dbg !5059, !llvm.loop !5085

while.end:                                        ; preds = %cond.end42
  %38 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5087
  call void @flush_pending_stmts(%struct.edge_def* %38), !dbg !5088
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %phis), !dbg !5089
  %39 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5090
  %add.ptr68 = getelementptr inbounds %struct.function, %struct.function* %39, i64 0, !dbg !5090
  %cfg69 = getelementptr inbounds %struct.function, %struct.function* %add.ptr68, i32 0, i32 1, !dbg !5090
  %40 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg69, align 8, !dbg !5090
  %x_exit_block_ptr70 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %40, i32 0, i32 1, !dbg !5090
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr70, align 8, !dbg !5090
  %prev_bb71 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 5, !dbg !5091
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb71, align 8, !dbg !5091
  %call72 = call %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def* %42), !dbg !5092
  store %struct.basic_block_def* %call72, %struct.basic_block_def** %bodybb, align 8, !dbg !5093
  %43 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5094
  %add.ptr73 = getelementptr inbounds %struct.function, %struct.function* %43, i64 0, !dbg !5094
  %cfg74 = getelementptr inbounds %struct.function, %struct.function* %add.ptr73, i32 0, i32 1, !dbg !5094
  %44 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg74, align 8, !dbg !5094
  %x_exit_block_ptr75 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %44, i32 0, i32 1, !dbg !5094
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr75, align 8, !dbg !5094
  %prev_bb76 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 5, !dbg !5095
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb76, align 8, !dbg !5095
  %call77 = call %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def* %46), !dbg !5096
  store %struct.basic_block_def* %call77, %struct.basic_block_def** %latchbb, align 8, !dbg !5097
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %headerbb, align 8, !dbg !5098
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %bodybb, align 8, !dbg !5099
  %call78 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %47, %struct.basic_block_def* %48, i32 1), !dbg !5100
  %49 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !5101
  %50 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !5102
  %call79 = call %union.gimple_statement_d* @gimple_build_cond(i32 102, %union.tree_node* %49, %union.tree_node* %50, %union.tree_node* null, %union.tree_node* null), !dbg !5103
  store %union.gimple_statement_d* %call79, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !5104
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bodybb, align 8, !dbg !5105
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp80, %struct.basic_block_def* %51), !dbg !5106
  %52 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5106
  %53 = bitcast %struct.gimple_stmt_iterator* %tmp80 to i8*, !dbg !5106
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false), !dbg !5106
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !5107
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %54, i32 0), !dbg !5108
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %bodybb, align 8, !dbg !5109
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %olddest, align 8, !dbg !5110
  %call81 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %55, %struct.basic_block_def* %56, i32 2048), !dbg !5111
  store %struct.edge_def* %call81, %struct.edge_def** %e, align 8, !dbg !5112
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bodybb, align 8, !dbg !5113
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %latchbb, align 8, !dbg !5114
  %call82 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %57, %struct.basic_block_def* %58, i32 1024), !dbg !5115
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %latchbb, align 8, !dbg !5116
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %headerbb, align 8, !dbg !5117
  %call83 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %59, %struct.basic_block_def* %60, i32 1), !dbg !5118
  %61 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5119
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %olddest, align 8, !dbg !5120
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %62, i32 0, i32 3, !dbg !5121
  %63 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !5121
  %call84 = call %struct.loop* @duplicate_loop(%struct.loop* %61, %struct.loop* %63), !dbg !5122
  store %struct.loop* %call84, %struct.loop** %newloop, align 8, !dbg !5123
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %headerbb, align 8, !dbg !5124
  %65 = load %struct.loop*, %struct.loop** %newloop, align 8, !dbg !5125
  %header = getelementptr inbounds %struct.loop, %struct.loop* %65, i32 0, i32 2, !dbg !5126
  store %struct.basic_block_def* %64, %struct.basic_block_def** %header, align 8, !dbg !5127
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %latchbb, align 8, !dbg !5128
  %67 = load %struct.loop*, %struct.loop** %newloop, align 8, !dbg !5129
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %67, i32 0, i32 3, !dbg !5130
  store %struct.basic_block_def* %66, %struct.basic_block_def** %latch, align 8, !dbg !5131
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %latchbb, align 8, !dbg !5132
  %69 = load %struct.loop*, %struct.loop** %newloop, align 8, !dbg !5133
  call void @add_bb_to_loop(%struct.basic_block_def* %68, %struct.loop* %69), !dbg !5134
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %bodybb, align 8, !dbg !5135
  %71 = load %struct.loop*, %struct.loop** %newloop, align 8, !dbg !5136
  call void @add_bb_to_loop(%struct.basic_block_def* %70, %struct.loop* %71), !dbg !5137
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %headerbb, align 8, !dbg !5138
  %73 = load %struct.loop*, %struct.loop** %newloop, align 8, !dbg !5139
  call void @add_bb_to_loop(%struct.basic_block_def* %72, %struct.loop* %73), !dbg !5140
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %bodybb, align 8, !dbg !5141
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %headerbb, align 8, !dbg !5142
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %74, %struct.basic_block_def* %75), !dbg !5143
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %headerbb, align 8, !dbg !5144
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %preheaderbb, align 8, !dbg !5145
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %76, %struct.basic_block_def* %77), !dbg !5146
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %preheaderbb, align 8, !dbg !5147
  %79 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5148
  %call85 = call %struct.edge_def* @single_exit(%struct.loop* %79), !dbg !5149
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call85, i32 0, i32 0, !dbg !5150
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5150
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %78, %struct.basic_block_def* %80), !dbg !5151
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %latchbb, align 8, !dbg !5152
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %bodybb, align 8, !dbg !5153
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %81, %struct.basic_block_def* %82), !dbg !5154
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %olddest, align 8, !dbg !5155
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %olddest, align 8, !dbg !5156
  %call86 = call %struct.basic_block_def* @recompute_dominator(i32 1, %struct.basic_block_def* %84), !dbg !5157
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %83, %struct.basic_block_def* %call86), !dbg !5158
  %85 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %loopivs.addr, align 8, !dbg !5159
  %tobool87 = icmp ne %struct.VEC_tree_heap* %85, null, !dbg !5159
  br i1 %tobool87, label %cond.true88, label %cond.false90, !dbg !5159

cond.true88:                                      ; preds = %while.end
  %86 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %loopivs.addr, align 8, !dbg !5159
  %base89 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %86, i32 0, i32 0, !dbg !5159
  br label %cond.end91, !dbg !5159

cond.false90:                                     ; preds = %while.end
  br label %cond.end91, !dbg !5159

cond.end91:                                       ; preds = %cond.false90, %cond.true88
  %cond92 = phi %struct.VEC_tree_base* [ %base89, %cond.true88 ], [ null, %cond.false90 ], !dbg !5159
  %call93 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond92, i32 0), !dbg !5159
  store %union.tree_node* %call93, %union.tree_node** %oldivvar, align 8, !dbg !5160
  %87 = load %union.tree_node*, %union.tree_node** %oldivvar, align 8, !dbg !5161
  %common = bitcast %union.tree_node* %87 to %struct.tree_common*, !dbg !5161
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5161
  %88 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5161
  %call94 = call %union.tree_node* @create_tmp_var(%union.tree_node* %88, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i64 0, i64 0)), !dbg !5162
  store %union.tree_node* %call94, %union.tree_node** %ivvar, align 8, !dbg !5163
  %89 = load %union.tree_node*, %union.tree_node** %ivvar, align 8, !dbg !5164
  %call95 = call zeroext i8 @add_referenced_var(%union.tree_node* %89), !dbg !5165
  %90 = load %struct.loop*, %struct.loop** %newloop, align 8, !dbg !5166
  call void @standard_iv_increment_position(%struct.loop* %90, %struct.gimple_stmt_iterator* %bsi, i8* %insert_after), !dbg !5167
  %91 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %lbounds.addr, align 8, !dbg !5168
  %tobool96 = icmp ne %struct.VEC_tree_heap* %91, null, !dbg !5168
  br i1 %tobool96, label %cond.true97, label %cond.false99, !dbg !5168

cond.true97:                                      ; preds = %cond.end91
  %92 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %lbounds.addr, align 8, !dbg !5168
  %base98 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %92, i32 0, i32 0, !dbg !5168
  br label %cond.end100, !dbg !5168

cond.false99:                                     ; preds = %cond.end91
  br label %cond.end100, !dbg !5168

cond.end100:                                      ; preds = %cond.false99, %cond.true97
  %cond101 = phi %struct.VEC_tree_base* [ %base98, %cond.true97 ], [ null, %cond.false99 ], !dbg !5168
  %call102 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond101, i32 0), !dbg !5168
  %93 = load %union.tree_node*, %union.tree_node** %oldivvar, align 8, !dbg !5169
  %common103 = bitcast %union.tree_node* %93 to %struct.tree_common*, !dbg !5169
  %type104 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common103, i32 0, i32 2, !dbg !5169
  %94 = load %union.tree_node*, %union.tree_node** %type104, align 8, !dbg !5169
  %95 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %steps.addr, align 8, !dbg !5170
  %tobool105 = icmp ne %struct.VEC_int_heap* %95, null, !dbg !5170
  br i1 %tobool105, label %cond.true106, label %cond.false108, !dbg !5170

cond.true106:                                     ; preds = %cond.end100
  %96 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %steps.addr, align 8, !dbg !5170
  %base107 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %96, i32 0, i32 0, !dbg !5170
  br label %cond.end109, !dbg !5170

cond.false108:                                    ; preds = %cond.end100
  br label %cond.end109, !dbg !5170

cond.end109:                                      ; preds = %cond.false108, %cond.true106
  %cond110 = phi %struct.VEC_int_base* [ %base107, %cond.true106 ], [ null, %cond.false108 ], !dbg !5170
  %call111 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond110, i32 0), !dbg !5170
  %conv = sext i32 %call111 to i64, !dbg !5170
  %call112 = call %union.tree_node* @build_int_cst(%union.tree_node* %94, i64 %conv), !dbg !5171
  %97 = load %union.tree_node*, %union.tree_node** %ivvar, align 8, !dbg !5172
  %98 = load %struct.loop*, %struct.loop** %newloop, align 8, !dbg !5173
  %99 = load i8, i8* %insert_after, align 1, !dbg !5174
  call void @create_iv(%union.tree_node* %call102, %union.tree_node* %call112, %union.tree_node* %97, %struct.loop* %98, %struct.gimple_stmt_iterator* %bsi, i8 zeroext %99, %union.tree_node** %ivvar, %union.tree_node** %ivvarinced), !dbg !5175
  %100 = load %struct.loop*, %struct.loop** %newloop, align 8, !dbg !5176
  %call113 = call %union.gimple_statement_d* @get_loop_exit_condition(%struct.loop* %100), !dbg !5177
  store %union.gimple_statement_d* %call113, %union.gimple_statement_d** %exit_condition, align 8, !dbg !5178
  %101 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ubounds.addr, align 8, !dbg !5179
  %tobool114 = icmp ne %struct.VEC_tree_heap* %101, null, !dbg !5179
  br i1 %tobool114, label %cond.true115, label %cond.false117, !dbg !5179

cond.true115:                                     ; preds = %cond.end109
  %102 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ubounds.addr, align 8, !dbg !5179
  %base116 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %102, i32 0, i32 0, !dbg !5179
  br label %cond.end118, !dbg !5179

cond.false117:                                    ; preds = %cond.end109
  br label %cond.end118, !dbg !5179

cond.end118:                                      ; preds = %cond.false117, %cond.true115
  %cond119 = phi %struct.VEC_tree_base* [ %base116, %cond.true115 ], [ null, %cond.false117 ], !dbg !5179
  %call120 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond119, i32 0), !dbg !5179
  %common121 = bitcast %union.tree_node* %call120 to %struct.tree_common*, !dbg !5179
  %type122 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common121, i32 0, i32 2, !dbg !5179
  %103 = load %union.tree_node*, %union.tree_node** %type122, align 8, !dbg !5179
  %call123 = call %union.tree_node* @create_tmp_var(%union.tree_node* %103, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.37, i64 0, i64 0)), !dbg !5180
  store %union.tree_node* %call123, %union.tree_node** %uboundvar, align 8, !dbg !5181
  %104 = load %union.tree_node*, %union.tree_node** %uboundvar, align 8, !dbg !5182
  %call124 = call zeroext i8 @add_referenced_var(%union.tree_node* %104), !dbg !5183
  %105 = load %union.tree_node*, %union.tree_node** %uboundvar, align 8, !dbg !5184
  %106 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ubounds.addr, align 8, !dbg !5184
  %tobool125 = icmp ne %struct.VEC_tree_heap* %106, null, !dbg !5184
  br i1 %tobool125, label %cond.true126, label %cond.false128, !dbg !5184

cond.true126:                                     ; preds = %cond.end118
  %107 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ubounds.addr, align 8, !dbg !5184
  %base127 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %107, i32 0, i32 0, !dbg !5184
  br label %cond.end129, !dbg !5184

cond.false128:                                    ; preds = %cond.end118
  br label %cond.end129, !dbg !5184

cond.end129:                                      ; preds = %cond.false128, %cond.true126
  %cond130 = phi %struct.VEC_tree_base* [ %base127, %cond.true126 ], [ null, %cond.false128 ], !dbg !5184
  %call131 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond130, i32 0), !dbg !5184
  %call132 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %105, %union.tree_node* %call131), !dbg !5184
  store %union.gimple_statement_d* %call132, %union.gimple_statement_d** %stmt, align 8, !dbg !5185
  %108 = load %union.tree_node*, %union.tree_node** %uboundvar, align 8, !dbg !5186
  %109 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5187
  %call133 = call %union.tree_node* @make_ssa_name(%union.tree_node* %108, %union.gimple_statement_d* %109), !dbg !5188
  store %union.tree_node* %call133, %union.tree_node** %uboundvar, align 8, !dbg !5189
  %110 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5190
  %111 = load %union.tree_node*, %union.tree_node** %uboundvar, align 8, !dbg !5191
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %110, %union.tree_node* %111), !dbg !5192
  %112 = load i8, i8* %insert_after, align 1, !dbg !5193
  %tobool134 = icmp ne i8 %112, 0, !dbg !5193
  br i1 %tobool134, label %if.then, label %if.else, !dbg !5195

if.then:                                          ; preds = %cond.end129
  %113 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5196
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %113, i32 1), !dbg !5197
  br label %if.end, !dbg !5197

if.else:                                          ; preds = %cond.end129
  %114 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5198
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %114, i32 1), !dbg !5199
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %115 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5200
  call void @update_stmt(%union.gimple_statement_d* %115), !dbg !5201
  %116 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exit_condition, align 8, !dbg !5202
  %117 = load %union.tree_node*, %union.tree_node** %uboundvar, align 8, !dbg !5203
  %118 = load %union.tree_node*, %union.tree_node** %ivvarinced, align 8, !dbg !5204
  call void @gimple_cond_set_condition(%union.gimple_statement_d* %116, i32 100, %union.tree_node* %117, %union.tree_node* %118), !dbg !5205
  %119 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exit_condition, align 8, !dbg !5206
  call void @update_stmt(%union.gimple_statement_d* %119), !dbg !5207
  %call135 = call %struct.htab* @htab_create_alloc(i64 20, i32 (i8*)* @tree_map_hash, i32 (i8*, i8*)* @tree_map_base_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !5208
  store %struct.htab* %call135, %struct.htab** %replacements, align 8, !dbg !5209
  %120 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5210
  %call136 = call %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop* %120), !dbg !5211
  store %struct.basic_block_def** %call136, %struct.basic_block_def*** %bbs, align 8, !dbg !5212
  %121 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %loopivs.addr, align 8, !dbg !5213
  %tobool137 = icmp ne %struct.VEC_tree_heap* %121, null, !dbg !5213
  br i1 %tobool137, label %cond.true138, label %cond.false140, !dbg !5213

cond.true138:                                     ; preds = %if.end
  %122 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %loopivs.addr, align 8, !dbg !5213
  %base139 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %122, i32 0, i32 0, !dbg !5213
  br label %cond.end141, !dbg !5213

cond.false140:                                    ; preds = %if.end
  br label %cond.end141, !dbg !5213

cond.end141:                                      ; preds = %cond.false140, %cond.true138
  %cond142 = phi %struct.VEC_tree_base* [ %base139, %cond.true138 ], [ null, %cond.false140 ], !dbg !5213
  %call143 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond142, i32 0), !dbg !5213
  store %union.tree_node* %call143, %union.tree_node** %oldivvar, align 8, !dbg !5214
  %123 = load %struct.basic_block_def*, %struct.basic_block_def** %bodybb, align 8, !dbg !5215
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp144, %struct.basic_block_def* %123), !dbg !5216
  %124 = bitcast %struct.gimple_stmt_iterator* %firstbsi to i8*, !dbg !5216
  %125 = bitcast %struct.gimple_stmt_iterator* %tmp144 to i8*, !dbg !5216
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %124, i8* align 8 %125, i64 24, i1 false), !dbg !5216
  %126 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5217
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %126, i32 0, i32 6, !dbg !5219
  %127 = load i32, i32* %num_nodes, align 4, !dbg !5219
  %sub = sub i32 %127, 1, !dbg !5220
  store i32 %sub, i32* %i, align 4, !dbg !5221
  br label %for.cond145, !dbg !5222

for.cond145:                                      ; preds = %for.inc229, %cond.end141
  %128 = load i32, i32* %i, align 4, !dbg !5223
  %cmp146 = icmp sge i32 %128, 0, !dbg !5225
  br i1 %cmp146, label %for.body148, label %for.end230, !dbg !5226

for.body148:                                      ; preds = %for.cond145
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %tobsi, metadata !5227, metadata !DIExpression()), !dbg !5229
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %bodybb, align 8, !dbg !5230
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tobsi, %struct.basic_block_def* %129), !dbg !5231
  %130 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5232
  %131 = load i32, i32* %i, align 4, !dbg !5234
  %idxprom = sext i32 %131 to i64, !dbg !5232
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %130, i64 %idxprom, !dbg !5232
  %132 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !5232
  %loop_father149 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %132, i32 0, i32 3, !dbg !5235
  %133 = load %struct.loop*, %struct.loop** %loop_father149, align 8, !dbg !5235
  %134 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5236
  %cmp150 = icmp eq %struct.loop* %133, %134, !dbg !5237
  br i1 %cmp150, label %if.then152, label %if.end228, !dbg !5238

if.then152:                                       ; preds = %for.body148
  %135 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5239
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %135, i32 0, i32 8, !dbg !5242
  %136 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !5242
  %header153 = getelementptr inbounds %struct.loop, %struct.loop* %136, i32 0, i32 2, !dbg !5243
  %137 = load %struct.basic_block_def*, %struct.basic_block_def** %header153, align 8, !dbg !5243
  %138 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5244
  %139 = load i32, i32* %i, align 4, !dbg !5245
  %idxprom154 = sext i32 %139 to i64, !dbg !5244
  %arrayidx155 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %138, i64 %idxprom154, !dbg !5244
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx155, align 8, !dbg !5244
  %call156 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %137, %struct.basic_block_def* %140), !dbg !5246
  %tobool157 = icmp ne i8 %call156, 0, !dbg !5246
  br i1 %tobool157, label %if.then158, label %if.else183, !dbg !5247

if.then158:                                       ; preds = %if.then152
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %header_bsi, metadata !5248, metadata !DIExpression()), !dbg !5250
  %141 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5251
  %inner159 = getelementptr inbounds %struct.loop, %struct.loop* %141, i32 0, i32 8, !dbg !5252
  %142 = load %struct.loop*, %struct.loop** %inner159, align 8, !dbg !5252
  %header160 = getelementptr inbounds %struct.loop, %struct.loop* %142, i32 0, i32 2, !dbg !5253
  %143 = load %struct.basic_block_def*, %struct.basic_block_def** %header160, align 8, !dbg !5253
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %header_bsi, %struct.basic_block_def* %143), !dbg !5254
  %144 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5255
  %145 = load i32, i32* %i, align 4, !dbg !5257
  %idxprom162 = sext i32 %145 to i64, !dbg !5255
  %arrayidx163 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %144, i64 %idxprom162, !dbg !5255
  %146 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx163, align 8, !dbg !5255
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp161, %struct.basic_block_def* %146), !dbg !5258
  %147 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5258
  %148 = bitcast %struct.gimple_stmt_iterator* %tmp161 to i8*, !dbg !5258
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %147, i8* align 8 %148, i64 24, i1 false), !dbg !5258
  br label %for.cond164, !dbg !5259

for.cond164:                                      ; preds = %if.end181, %if.then180, %if.then158
  %call165 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5260
  %tobool166 = icmp ne i8 %call165, 0, !dbg !5262
  %lnot167 = xor i1 %tobool166, true, !dbg !5262
  br i1 %lnot167, label %for.body168, label %for.end182, !dbg !5263

for.body168:                                      ; preds = %for.cond164
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt169, metadata !5264, metadata !DIExpression()), !dbg !5266
  %call170 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5267
  store %union.gimple_statement_d* %call170, %union.gimple_statement_d** %stmt169, align 8, !dbg !5266
  %149 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt169, align 8, !dbg !5268
  %150 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exit_condition, align 8, !dbg !5270
  %cmp171 = icmp eq %union.gimple_statement_d* %149, %150, !dbg !5271
  br i1 %cmp171, label %if.then180, label %lor.lhs.false, !dbg !5272

lor.lhs.false:                                    ; preds = %for.body168
  %151 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt169, align 8, !dbg !5273
  %call173 = call zeroext i8 @not_interesting_stmt(%union.gimple_statement_d* %151), !dbg !5274
  %conv174 = zext i8 %call173 to i32, !dbg !5274
  %tobool175 = icmp ne i32 %conv174, 0, !dbg !5274
  br i1 %tobool175, label %if.then180, label %lor.lhs.false176, !dbg !5275

lor.lhs.false176:                                 ; preds = %lor.lhs.false
  %152 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5276
  %153 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt169, align 8, !dbg !5277
  %call177 = call zeroext i8 @stmt_is_bumper_for_loop(%struct.loop* %152, %union.gimple_statement_d* %153), !dbg !5278
  %conv178 = zext i8 %call177 to i32, !dbg !5278
  %tobool179 = icmp ne i32 %conv178, 0, !dbg !5278
  br i1 %tobool179, label %if.then180, label %if.end181, !dbg !5279

if.then180:                                       ; preds = %lor.lhs.false176, %lor.lhs.false, %for.body168
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !5280
  br label %for.cond164, !dbg !5282, !llvm.loop !5283

if.end181:                                        ; preds = %lor.lhs.false176
  call void @gsi_move_before(%struct.gimple_stmt_iterator* %bsi, %struct.gimple_stmt_iterator* %header_bsi), !dbg !5285
  br label %for.cond164, !dbg !5286, !llvm.loop !5283

for.end182:                                       ; preds = %for.cond164
  br label %if.end227, !dbg !5287

if.else183:                                       ; preds = %if.then152
  %154 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5288
  %155 = load i32, i32* %i, align 4, !dbg !5291
  %idxprom185 = sext i32 %155 to i64, !dbg !5288
  %arrayidx186 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %154, i64 %idxprom185, !dbg !5288
  %156 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx186, align 8, !dbg !5288
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp184, %struct.basic_block_def* %156), !dbg !5292
  %157 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5292
  %158 = bitcast %struct.gimple_stmt_iterator* %tmp184 to i8*, !dbg !5292
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %157, i8* align 8 %158, i64 24, i1 false), !dbg !5292
  br label %for.cond187, !dbg !5293

for.cond187:                                      ; preds = %if.end225, %if.then204, %if.else183
  %call188 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5294
  %tobool189 = icmp ne i8 %call188, 0, !dbg !5296
  %lnot190 = xor i1 %tobool189, true, !dbg !5296
  br i1 %lnot190, label %for.body191, label %for.end226, !dbg !5297

for.body191:                                      ; preds = %for.cond187
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt192, metadata !5298, metadata !DIExpression()), !dbg !5300
  %call193 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5301
  store %union.gimple_statement_d* %call193, %union.gimple_statement_d** %stmt192, align 8, !dbg !5300
  %159 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt192, align 8, !dbg !5302
  %160 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exit_condition, align 8, !dbg !5304
  %cmp194 = icmp eq %union.gimple_statement_d* %159, %160, !dbg !5305
  br i1 %cmp194, label %if.then204, label %lor.lhs.false196, !dbg !5306

lor.lhs.false196:                                 ; preds = %for.body191
  %161 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt192, align 8, !dbg !5307
  %call197 = call zeroext i8 @not_interesting_stmt(%union.gimple_statement_d* %161), !dbg !5308
  %conv198 = zext i8 %call197 to i32, !dbg !5308
  %tobool199 = icmp ne i32 %conv198, 0, !dbg !5308
  br i1 %tobool199, label %if.then204, label %lor.lhs.false200, !dbg !5309

lor.lhs.false200:                                 ; preds = %lor.lhs.false196
  %162 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5310
  %163 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt192, align 8, !dbg !5311
  %call201 = call zeroext i8 @stmt_is_bumper_for_loop(%struct.loop* %162, %union.gimple_statement_d* %163), !dbg !5312
  %conv202 = zext i8 %call201 to i32, !dbg !5312
  %tobool203 = icmp ne i32 %conv202, 0, !dbg !5312
  br i1 %tobool203, label %if.then204, label %if.end205, !dbg !5313

if.then204:                                       ; preds = %lor.lhs.false200, %lor.lhs.false196, %for.body191
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !5314
  br label %for.cond187, !dbg !5316, !llvm.loop !5317

if.end205:                                        ; preds = %lor.lhs.false200
  %164 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5319
  %165 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt192, align 8, !dbg !5320
  %166 = load %union.tree_node*, %union.tree_node** %oldivvar, align 8, !dbg !5321
  %167 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %steps.addr, align 8, !dbg !5322
  %tobool206 = icmp ne %struct.VEC_int_heap* %167, null, !dbg !5322
  br i1 %tobool206, label %cond.true207, label %cond.false209, !dbg !5322

cond.true207:                                     ; preds = %if.end205
  %168 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %steps.addr, align 8, !dbg !5322
  %base208 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %168, i32 0, i32 0, !dbg !5322
  br label %cond.end210, !dbg !5322

cond.false209:                                    ; preds = %if.end205
  br label %cond.end210, !dbg !5322

cond.end210:                                      ; preds = %cond.false209, %cond.true207
  %cond211 = phi %struct.VEC_int_base* [ %base208, %cond.true207 ], [ null, %cond.false209 ], !dbg !5322
  %call212 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond211, i32 0), !dbg !5322
  %169 = load %union.tree_node*, %union.tree_node** %ivvar, align 8, !dbg !5323
  %170 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %lbounds.addr, align 8, !dbg !5324
  %tobool213 = icmp ne %struct.VEC_tree_heap* %170, null, !dbg !5324
  br i1 %tobool213, label %cond.true214, label %cond.false216, !dbg !5324

cond.true214:                                     ; preds = %cond.end210
  %171 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %lbounds.addr, align 8, !dbg !5324
  %base215 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %171, i32 0, i32 0, !dbg !5324
  br label %cond.end217, !dbg !5324

cond.false216:                                    ; preds = %cond.end210
  br label %cond.end217, !dbg !5324

cond.end217:                                      ; preds = %cond.false216, %cond.true214
  %cond218 = phi %struct.VEC_tree_base* [ %base215, %cond.true214 ], [ null, %cond.false216 ], !dbg !5324
  %call219 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond218, i32 0), !dbg !5324
  %172 = load %struct.htab*, %struct.htab** %replacements, align 8, !dbg !5325
  call void @replace_uses_equiv_to_x_with_y(%struct.loop* %164, %union.gimple_statement_d* %165, %union.tree_node* %166, i32 %call212, %union.tree_node* %169, %union.tree_node* %call219, %struct.htab* %172, %struct.gimple_stmt_iterator* %firstbsi), !dbg !5326
  call void @gsi_move_before(%struct.gimple_stmt_iterator* %bsi, %struct.gimple_stmt_iterator* %tobsi), !dbg !5327
  %173 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt192, align 8, !dbg !5328
  %call220 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %173), !dbg !5330
  %tobool221 = icmp ne %union.tree_node* %call220, null, !dbg !5330
  br i1 %tobool221, label %if.then222, label %if.end225, !dbg !5331

if.then222:                                       ; preds = %cond.end217
  %174 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5332
  %add.ptr223 = getelementptr inbounds %struct.function, %struct.function* %174, i64 0, !dbg !5332
  %call224 = call %union.tree_node* @gimple_vop(%struct.function* %add.ptr223), !dbg !5333
  call void @mark_sym_for_renaming(%union.tree_node* %call224), !dbg !5334
  br label %if.end225, !dbg !5334

if.end225:                                        ; preds = %if.then222, %cond.end217
  br label %for.cond187, !dbg !5335, !llvm.loop !5317

for.end226:                                       ; preds = %for.cond187
  br label %if.end227

if.end227:                                        ; preds = %for.end226, %for.end182
  br label %if.end228, !dbg !5336

if.end228:                                        ; preds = %if.end227, %for.body148
  br label %for.inc229, !dbg !5337

for.inc229:                                       ; preds = %if.end228
  %175 = load i32, i32* %i, align 4, !dbg !5338
  %dec = add nsw i32 %175, -1, !dbg !5338
  store i32 %dec, i32* %i, align 4, !dbg !5338
  br label %for.cond145, !dbg !5339, !llvm.loop !5340

for.end230:                                       ; preds = %for.cond145
  %176 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5342
  %177 = bitcast %struct.basic_block_def** %176 to i8*, !dbg !5342
  call void @free(i8* %177), !dbg !5343
  %178 = load %struct.htab*, %struct.htab** %replacements, align 8, !dbg !5344
  call void @htab_delete(%struct.htab* %178), !dbg !5345
  %179 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5346
  %call231 = call zeroext i8 @perfect_nest_p(%struct.loop* %179), !dbg !5347
  ret i8 %call231, !dbg !5348
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_lambda_loop_base_iterate(%struct.VEC_lambda_loop_base* %vec_, i32 %ix_, %struct.lambda_loop_s** %ptr) #0 !dbg !5349 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_lambda_loop_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.lambda_loop_s**, align 8
  store %struct.VEC_lambda_loop_base* %vec_, %struct.VEC_lambda_loop_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_loop_base** %vec_.addr, metadata !5354, metadata !DIExpression()), !dbg !5355
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5356, metadata !DIExpression()), !dbg !5355
  store %struct.lambda_loop_s** %ptr, %struct.lambda_loop_s*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_loop_s*** %ptr.addr, metadata !5357, metadata !DIExpression()), !dbg !5355
  %0 = load %struct.VEC_lambda_loop_base*, %struct.VEC_lambda_loop_base** %vec_.addr, align 8, !dbg !5358
  %tobool = icmp ne %struct.VEC_lambda_loop_base* %0, null, !dbg !5358
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5358

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5358
  %2 = load %struct.VEC_lambda_loop_base*, %struct.VEC_lambda_loop_base** %vec_.addr, align 8, !dbg !5358
  %num = getelementptr inbounds %struct.VEC_lambda_loop_base, %struct.VEC_lambda_loop_base* %2, i32 0, i32 0, !dbg !5358
  %3 = load i32, i32* %num, align 8, !dbg !5358
  %cmp = icmp ult i32 %1, %3, !dbg !5358
  br i1 %cmp, label %if.then, label %if.else, !dbg !5355

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_lambda_loop_base*, %struct.VEC_lambda_loop_base** %vec_.addr, align 8, !dbg !5360
  %vec = getelementptr inbounds %struct.VEC_lambda_loop_base, %struct.VEC_lambda_loop_base* %4, i32 0, i32 2, !dbg !5360
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5360
  %idxprom = zext i32 %5 to i64, !dbg !5360
  %arrayidx = getelementptr inbounds [1 x %struct.lambda_loop_s*], [1 x %struct.lambda_loop_s*]* %vec, i64 0, i64 %idxprom, !dbg !5360
  %6 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %arrayidx, align 8, !dbg !5360
  %7 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %ptr.addr, align 8, !dbg !5360
  store %struct.lambda_loop_s* %6, %struct.lambda_loop_s** %7, align 8, !dbg !5360
  store i32 1, i32* %retval, align 4, !dbg !5360
  br label %return, !dbg !5360

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %ptr.addr, align 8, !dbg !5362
  store %struct.lambda_loop_s* null, %struct.lambda_loop_s** %8, align 8, !dbg !5362
  store i32 0, i32* %retval, align 4, !dbg !5362
  br label %return, !dbg !5362

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5355
  ret i32 %9, !dbg !5355
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_lambda_loop_heap_free(%struct.VEC_lambda_loop_heap** %vec_) #0 !dbg !5364 {
entry:
  %vec_.addr = alloca %struct.VEC_lambda_loop_heap**, align 8
  store %struct.VEC_lambda_loop_heap** %vec_, %struct.VEC_lambda_loop_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_loop_heap*** %vec_.addr, metadata !5367, metadata !DIExpression()), !dbg !5368
  %0 = load %struct.VEC_lambda_loop_heap**, %struct.VEC_lambda_loop_heap*** %vec_.addr, align 8, !dbg !5369
  %1 = load %struct.VEC_lambda_loop_heap*, %struct.VEC_lambda_loop_heap** %0, align 8, !dbg !5369
  %tobool = icmp ne %struct.VEC_lambda_loop_heap* %1, null, !dbg !5369
  br i1 %tobool, label %if.then, label %if.end, !dbg !5368

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_lambda_loop_heap**, %struct.VEC_lambda_loop_heap*** %vec_.addr, align 8, !dbg !5369
  %3 = load %struct.VEC_lambda_loop_heap*, %struct.VEC_lambda_loop_heap** %2, align 8, !dbg !5369
  %4 = bitcast %struct.VEC_lambda_loop_heap* %3 to i8*, !dbg !5369
  call void @free(i8* %4), !dbg !5369
  br label %if.end, !dbg !5369

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_lambda_loop_heap**, %struct.VEC_lambda_loop_heap*** %vec_.addr, align 8, !dbg !5368
  store %struct.VEC_lambda_loop_heap* null, %struct.VEC_lambda_loop_heap** %5, align 8, !dbg !5368
  ret void, !dbg !5368
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !5371 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !5374, metadata !DIExpression()), !dbg !5375
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !5376
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !5376
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !5376
  br i1 %tobool, label %if.then, label %if.end, !dbg !5375

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !5376
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !5376
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !5376
  call void @free(i8* %4), !dbg !5376
  br label %if.end, !dbg !5376

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !5375
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !5375
  ret void, !dbg !5375
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !5378 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !5381, metadata !DIExpression()), !dbg !5382
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !5383
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !5383
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !5383
  br i1 %tobool, label %if.then, label %if.end, !dbg !5382

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !5383
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !5383
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !5383
  call void @free(i8* %4), !dbg !5383
  br label %if.end, !dbg !5383

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !5382
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !5382
  ret void, !dbg !5382
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @remove_iv(%union.gimple_statement_d* %iv_stmt) #0 !dbg !5385 {
entry:
  %iv_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %i = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  %arg = alloca %union.tree_node*, align 8
  %used = alloca i8, align 1
  store %union.gimple_statement_d* %iv_stmt, %union.gimple_statement_d** %iv_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %iv_stmt.addr, metadata !5388, metadata !DIExpression()), !dbg !5389
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !5390, metadata !DIExpression()), !dbg !5391
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %iv_stmt.addr, align 8, !dbg !5392
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %si, %union.gimple_statement_d* %0), !dbg !5393
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %iv_stmt.addr, align 8, !dbg !5394
  %call = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5396
  %cmp = icmp eq i32 %call, 16, !dbg !5397
  br i1 %cmp, label %if.then, label %if.else, !dbg !5398

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5399, metadata !DIExpression()), !dbg !5401
  store i32 0, i32* %i, align 4, !dbg !5402
  br label %for.cond, !dbg !5404

for.cond:                                         ; preds = %for.inc21, %if.then
  %2 = load i32, i32* %i, align 4, !dbg !5405
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %iv_stmt.addr, align 8, !dbg !5407
  %call1 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %3), !dbg !5408
  %cmp2 = icmp ult i32 %2, %call1, !dbg !5409
  br i1 %cmp2, label %for.body, label %for.end22, !dbg !5410

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5411, metadata !DIExpression()), !dbg !5413
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !5414, metadata !DIExpression()), !dbg !5422
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !5423, metadata !DIExpression()), !dbg !5424
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %iv_stmt.addr, align 8, !dbg !5425
  %5 = load i32, i32* %i, align 4, !dbg !5426
  %conv = zext i32 %5 to i64, !dbg !5426
  %call3 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %4, i64 %conv), !dbg !5427
  store %union.tree_node* %call3, %union.tree_node** %arg, align 8, !dbg !5424
  call void @llvm.dbg.declare(metadata i8* %used, metadata !5428, metadata !DIExpression()), !dbg !5429
  store i8 0, i8* %used, align 1, !dbg !5429
  %6 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5430
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5430
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !5430
  %bf.load = load i64, i64* %7, align 8, !dbg !5430
  %bf.clear = and i64 %bf.load, 65535, !dbg !5430
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5430
  %cmp4 = icmp ne i32 %bf.cast, 141, !dbg !5432
  br i1 %cmp4, label %if.then6, label %if.end, !dbg !5433

if.then6:                                         ; preds = %for.body
  br label %for.inc21, !dbg !5434

if.end:                                           ; preds = %for.body
  %8 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5435
  %call7 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %8), !dbg !5435
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %stmt, align 8, !dbg !5435
  br label %for.cond8, !dbg !5435

for.cond8:                                        ; preds = %for.inc, %if.end
  %call9 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5437
  %tobool = icmp ne i8 %call9, 0, !dbg !5437
  %lnot = xor i1 %tobool, true, !dbg !5437
  br i1 %lnot, label %for.body10, label %for.end, !dbg !5435

for.body10:                                       ; preds = %for.cond8
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5439
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %iv_stmt.addr, align 8, !dbg !5441
  %cmp11 = icmp ne %union.gimple_statement_d* %9, %10, !dbg !5442
  br i1 %cmp11, label %land.lhs.true, label %if.end16, !dbg !5443

land.lhs.true:                                    ; preds = %for.body10
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5444
  %call13 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %11), !dbg !5445
  %tobool14 = icmp ne i8 %call13, 0, !dbg !5445
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !5446

if.then15:                                        ; preds = %land.lhs.true
  store i8 1, i8* %used, align 1, !dbg !5447
  br label %if.end16, !dbg !5448

if.end16:                                         ; preds = %if.then15, %land.lhs.true, %for.body10
  br label %for.inc, !dbg !5449

for.inc:                                          ; preds = %if.end16
  %call17 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5437
  store %union.gimple_statement_d* %call17, %union.gimple_statement_d** %stmt, align 8, !dbg !5437
  br label %for.cond8, !dbg !5437, !llvm.loop !5450

for.end:                                          ; preds = %for.cond8
  %12 = load i8, i8* %used, align 1, !dbg !5452
  %tobool18 = icmp ne i8 %12, 0, !dbg !5452
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !5454

if.then19:                                        ; preds = %for.end
  %13 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5455
  %ssa_name = bitcast %union.tree_node* %13 to %struct.tree_ssa_name*, !dbg !5455
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !5455
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5455
  call void @remove_iv(%union.gimple_statement_d* %14), !dbg !5456
  br label %if.end20, !dbg !5456

if.end20:                                         ; preds = %if.then19, %for.end
  br label %for.inc21, !dbg !5457

for.inc21:                                        ; preds = %if.end20, %if.then6
  %15 = load i32, i32* %i, align 4, !dbg !5458
  %inc = add i32 %15, 1, !dbg !5458
  store i32 %inc, i32* %i, align 4, !dbg !5458
  br label %for.cond, !dbg !5459, !llvm.loop !5460

for.end22:                                        ; preds = %for.cond
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %si, i8 zeroext 1), !dbg !5462
  br label %if.end23, !dbg !5463

if.else:                                          ; preds = %entry
  call void @gsi_remove(%struct.gimple_stmt_iterator* %si, i8 zeroext 1), !dbg !5464
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %iv_stmt.addr, align 8, !dbg !5466
  call void @release_defs(%union.gimple_statement_d* %16), !dbg !5467
  br label %if.end23

if.end23:                                         ; preds = %if.else, %for.end22
  ret void, !dbg !5468
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !5469 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5472, metadata !DIExpression()), !dbg !5473
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5474
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !5475
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !5476
  %1 = load i32, i32* %nargs, align 4, !dbg !5476
  ret i32 %1, !dbg !5477
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %gs, i64 %index) #0 !dbg !5478 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i64, align 8
  %pd = alloca %struct.phi_arg_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5482, metadata !DIExpression()), !dbg !5483
  store i64 %index, i64* %index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %index.addr, metadata !5484, metadata !DIExpression()), !dbg !5485
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %pd, metadata !5486, metadata !DIExpression()), !dbg !5488
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5489
  %1 = load i64, i64* %index.addr, align 8, !dbg !5490
  %conv = trunc i64 %1 to i32, !dbg !5490
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !5491
  store %struct.phi_arg_d* %call, %struct.phi_arg_d** %pd, align 8, !dbg !5488
  %2 = load %struct.phi_arg_d*, %struct.phi_arg_d** %pd, align 8, !dbg !5492
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %2, i32 0, i32 0, !dbg !5493
  %call1 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %imm_use), !dbg !5494
  ret %union.tree_node* %call1, !dbg !5495
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !5496 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5500, metadata !DIExpression()), !dbg !5501
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !5502, metadata !DIExpression()), !dbg !5503
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5504
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !5504
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !5504
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5505
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !5506
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !5507
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5508
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !5509
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !5509
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !5510
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5510
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5511
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !5512
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5513
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5514
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 3, !dbg !5515
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !5516
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5517
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 2, !dbg !5518
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !5519
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5520
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5521
  %iter_node2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 2, !dbg !5522
  %next3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node2, i32 0, i32 1, !dbg !5523
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !5524
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5525
  %iter_node4 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %9, i32 0, i32 2, !dbg !5526
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node4, i32 0, i32 2, !dbg !5527
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !5528
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !5529
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5530
  %iter_node5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 2, !dbg !5531
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node5, i32 0, i32 3, !dbg !5532
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !5533
  %11 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5534
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %11), !dbg !5536
  %tobool = icmp ne i8 %call, 0, !dbg !5536
  br i1 %tobool, label %if.then, label %if.end, !dbg !5537

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5538
  br label %return, !dbg !5538

if.end:                                           ; preds = %entry
  %12 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5539
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %12, i32 0, i32 0, !dbg !5540
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !5540
  %14 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5541
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %13, %struct.immediate_use_iterator_d* %14), !dbg !5542
  %15 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5543
  %imm_use7 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %15, i32 0, i32 0, !dbg !5543
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use7, align 8, !dbg !5543
  %loc8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !5543
  %stmt9 = bitcast %union.anon* %loc8 to %union.gimple_statement_d**, !dbg !5543
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !5543
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !5544
  br label %return, !dbg !5544

return:                                           ; preds = %if.end, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !5545
  ret %union.gimple_statement_d* %18, !dbg !5545
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5546 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5551, metadata !DIExpression()), !dbg !5552
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5553
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !5554
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5554
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5555
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !5556
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !5556
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !5557
  %conv = zext i1 %cmp to i32, !dbg !5557
  %conv1 = trunc i32 %conv to i8, !dbg !5558
  ret i8 %conv1, !dbg !5559
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !5560 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5563, metadata !DIExpression()), !dbg !5564
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5565
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5566
  %cmp = icmp eq i32 %call, 2, !dbg !5567
  %conv = zext i1 %cmp to i32, !dbg !5567
  %conv1 = trunc i32 %conv to i8, !dbg !5566
  ret i8 %conv1, !dbg !5568
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5569 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5572, metadata !DIExpression()), !dbg !5573
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5574
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !5575
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 1, !dbg !5576
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5576
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5577
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !5578
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5579
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5580
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !5582
  %tobool = icmp ne i8 %call, 0, !dbg !5582
  br i1 %tobool, label %if.then, label %if.end4, !dbg !5583

if.then:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5584
  %iter_node1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 2, !dbg !5587
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node1, i32 0, i32 0, !dbg !5588
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5588
  %cmp = icmp ne %struct.ssa_use_operand_d* %5, null, !dbg !5589
  br i1 %cmp, label %if.then2, label %if.end, !dbg !5590

if.then2:                                         ; preds = %if.then
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5591
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 2, !dbg !5592
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node3), !dbg !5593
  br label %if.end, !dbg !5593

if.end:                                           ; preds = %if.then2, %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5594
  br label %return, !dbg !5594

if.end4:                                          ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5595
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !5596
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !5596
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5597
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %8, %struct.immediate_use_iterator_d* %9), !dbg !5598
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5599
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 0, !dbg !5599
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !5599
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !5599
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !5599
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5599
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !5600
  br label %return, !dbg !5600

return:                                           ; preds = %if.end4, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !5601
  ret %union.gimple_statement_d* %13, !dbg !5601
}

declare dso_local void @remove_phi_node(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @release_defs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @lambda_loopnest_to_gcc_loopnest(%struct.loop* %old_loopnest, %struct.VEC_tree_heap* %old_ivs, %struct.VEC_tree_heap* %invariants, %struct.VEC_gimple_heap** %remove_ivs, %struct.lambda_loopnest_s* %new_loopnest, %struct.lambda_trans_matrix_s* %transform, %struct.obstack* %lambda_obstack) #0 !dbg !5602 {
entry:
  %old_loopnest.addr = alloca %struct.loop*, align 8
  %old_ivs.addr = alloca %struct.VEC_tree_heap*, align 8
  %invariants.addr = alloca %struct.VEC_tree_heap*, align 8
  %remove_ivs.addr = alloca %struct.VEC_gimple_heap**, align 8
  %new_loopnest.addr = alloca %struct.lambda_loopnest_s*, align 8
  %transform.addr = alloca %struct.lambda_trans_matrix_s*, align 8
  %lambda_obstack.addr = alloca %struct.obstack*, align 8
  %temp = alloca %struct.loop*, align 8
  %i = alloca i64, align 8
  %j = alloca i32, align 4
  %depth = alloca i64, align 8
  %new_ivs = alloca %struct.VEC_tree_heap*, align 8
  %oldiv = alloca %union.tree_node*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %newloop = alloca %struct.lambda_loop_s*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %exit = alloca %struct.edge_def*, align 8
  %ivvar = alloca %union.tree_node*, align 8
  %ivvarinced = alloca %union.tree_node*, align 8
  %exitcond = alloca %union.gimple_statement_d*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %testtype = alloca i32, align 4
  %newupperbound = alloca %union.tree_node*, align 8
  %newlowerbound = alloca %union.tree_node*, align 8
  %offset = alloca %struct.lambda_linear_expression_s*, align 8
  %type = alloca %union.tree_node*, align 8
  %insert_after = alloca i8, align 1
  %inc_stmt = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp43 = alloca %struct.gimple_stmt_iterator, align 8
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %oldiv_def = alloca %union.tree_node*, align 8
  %oldiv_stmt = alloca %union.gimple_statement_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %newiv = alloca %union.tree_node*, align 8
  %stmts89 = alloca %struct.gimple_seq_d*, align 8
  %lbv = alloca %struct.lambda_body_vector_s*, align 8
  %newlbv = alloca %struct.lambda_body_vector_s*, align 8
  %tmp116 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %old_loopnest, %struct.loop** %old_loopnest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %old_loopnest.addr, metadata !5606, metadata !DIExpression()), !dbg !5607
  store %struct.VEC_tree_heap* %old_ivs, %struct.VEC_tree_heap** %old_ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %old_ivs.addr, metadata !5608, metadata !DIExpression()), !dbg !5609
  store %struct.VEC_tree_heap* %invariants, %struct.VEC_tree_heap** %invariants.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %invariants.addr, metadata !5610, metadata !DIExpression()), !dbg !5611
  store %struct.VEC_gimple_heap** %remove_ivs, %struct.VEC_gimple_heap*** %remove_ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %remove_ivs.addr, metadata !5612, metadata !DIExpression()), !dbg !5613
  store %struct.lambda_loopnest_s* %new_loopnest, %struct.lambda_loopnest_s** %new_loopnest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_loopnest_s** %new_loopnest.addr, metadata !5614, metadata !DIExpression()), !dbg !5615
  store %struct.lambda_trans_matrix_s* %transform, %struct.lambda_trans_matrix_s** %transform.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_trans_matrix_s** %transform.addr, metadata !5616, metadata !DIExpression()), !dbg !5617
  store %struct.obstack* %lambda_obstack, %struct.obstack** %lambda_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %lambda_obstack.addr, metadata !5618, metadata !DIExpression()), !dbg !5619
  call void @llvm.dbg.declare(metadata %struct.loop** %temp, metadata !5620, metadata !DIExpression()), !dbg !5621
  call void @llvm.dbg.declare(metadata i64* %i, metadata !5622, metadata !DIExpression()), !dbg !5623
  store i64 0, i64* %i, align 8, !dbg !5623
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5624, metadata !DIExpression()), !dbg !5625
  call void @llvm.dbg.declare(metadata i64* %depth, metadata !5626, metadata !DIExpression()), !dbg !5627
  store i64 0, i64* %depth, align 8, !dbg !5627
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %new_ivs, metadata !5628, metadata !DIExpression()), !dbg !5629
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %new_ivs, align 8, !dbg !5629
  call void @llvm.dbg.declare(metadata %union.tree_node** %oldiv, metadata !5630, metadata !DIExpression()), !dbg !5631
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5632, metadata !DIExpression()), !dbg !5633
  %0 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %transform.addr, align 8, !dbg !5634
  %call = call %struct.lambda_trans_matrix_s* @lambda_trans_matrix_inverse(%struct.lambda_trans_matrix_s* %0), !dbg !5635
  store %struct.lambda_trans_matrix_s* %call, %struct.lambda_trans_matrix_s** %transform.addr, align 8, !dbg !5636
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5637
  %tobool = icmp ne %struct._IO_FILE* %1, null, !dbg !5637
  br i1 %tobool, label %if.then, label %if.end, !dbg !5639

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5640
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.14, i64 0, i64 0)), !dbg !5642
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5643
  %4 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %transform.addr, align 8, !dbg !5644
  call void @print_lambda_trans_matrix(%struct._IO_FILE* %3, %struct.lambda_trans_matrix_s* %4), !dbg !5645
  br label %if.end, !dbg !5646

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.loop*, %struct.loop** %old_loopnest.addr, align 8, !dbg !5647
  %call2 = call i32 @depth_of_nest(%struct.loop* %5), !dbg !5648
  %conv = sext i32 %call2 to i64, !dbg !5648
  store i64 %conv, i64* %depth, align 8, !dbg !5649
  %6 = load %struct.loop*, %struct.loop** %old_loopnest.addr, align 8, !dbg !5650
  store %struct.loop* %6, %struct.loop** %temp, align 8, !dbg !5651
  br label %while.cond, !dbg !5652

while.cond:                                       ; preds = %cond.end56, %if.end
  %7 = load %struct.loop*, %struct.loop** %temp, align 8, !dbg !5653
  %tobool3 = icmp ne %struct.loop* %7, null, !dbg !5652
  br i1 %tobool3, label %while.body, label %while.end, !dbg !5652

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.lambda_loop_s** %newloop, metadata !5654, metadata !DIExpression()), !dbg !5656
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5657, metadata !DIExpression()), !dbg !5658
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !5659, metadata !DIExpression()), !dbg !5660
  call void @llvm.dbg.declare(metadata %union.tree_node** %ivvar, metadata !5661, metadata !DIExpression()), !dbg !5662
  call void @llvm.dbg.declare(metadata %union.tree_node** %ivvarinced, metadata !5663, metadata !DIExpression()), !dbg !5664
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %exitcond, metadata !5665, metadata !DIExpression()), !dbg !5666
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !5667, metadata !DIExpression()), !dbg !5668
  call void @llvm.dbg.declare(metadata i32* %testtype, metadata !5669, metadata !DIExpression()), !dbg !5670
  call void @llvm.dbg.declare(metadata %union.tree_node** %newupperbound, metadata !5671, metadata !DIExpression()), !dbg !5672
  call void @llvm.dbg.declare(metadata %union.tree_node** %newlowerbound, metadata !5673, metadata !DIExpression()), !dbg !5674
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %offset, metadata !5675, metadata !DIExpression()), !dbg !5676
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5677, metadata !DIExpression()), !dbg !5678
  call void @llvm.dbg.declare(metadata i8* %insert_after, metadata !5679, metadata !DIExpression()), !dbg !5680
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %inc_stmt, metadata !5681, metadata !DIExpression()), !dbg !5682
  %8 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %old_ivs.addr, align 8, !dbg !5683
  %tobool4 = icmp ne %struct.VEC_tree_heap* %8, null, !dbg !5683
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !5683

cond.true:                                        ; preds = %while.body
  %9 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %old_ivs.addr, align 8, !dbg !5683
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %9, i32 0, i32 0, !dbg !5683
  br label %cond.end, !dbg !5683

cond.false:                                       ; preds = %while.body
  br label %cond.end, !dbg !5683

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5683
  %10 = load i64, i64* %i, align 8, !dbg !5683
  %conv5 = trunc i64 %10 to i32, !dbg !5683
  %call6 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %conv5), !dbg !5683
  store %union.tree_node* %call6, %union.tree_node** %oldiv, align 8, !dbg !5684
  %11 = load %union.tree_node*, %union.tree_node** %oldiv, align 8, !dbg !5685
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !5685
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5685
  %12 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !5685
  store %union.tree_node* %12, %union.tree_node** %type, align 8, !dbg !5686
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5687
  %call8 = call %union.tree_node* @create_tmp_var(%union.tree_node* %13, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i64 0, i64 0)), !dbg !5688
  store %union.tree_node* %call8, %union.tree_node** %ivvar, align 8, !dbg !5689
  %14 = load %union.tree_node*, %union.tree_node** %ivvar, align 8, !dbg !5690
  %call9 = call zeroext i8 @add_referenced_var(%union.tree_node* %14), !dbg !5691
  %15 = load %union.tree_node*, %union.tree_node** %ivvar, align 8, !dbg !5692
  %call10 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %new_ivs, %union.tree_node* %15), !dbg !5692
  %16 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %new_loopnest.addr, align 8, !dbg !5693
  %loops = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %16, i32 0, i32 0, !dbg !5693
  %17 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %loops, align 8, !dbg !5693
  %18 = load i64, i64* %i, align 8, !dbg !5694
  %arrayidx = getelementptr inbounds %struct.lambda_loop_s*, %struct.lambda_loop_s** %17, i64 %18, !dbg !5693
  %19 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %arrayidx, align 8, !dbg !5693
  store %struct.lambda_loop_s* %19, %struct.lambda_loop_s** %newloop, align 8, !dbg !5695
  %20 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %newloop, align 8, !dbg !5696
  %linear_offset = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %20, i32 0, i32 2, !dbg !5696
  %21 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %linear_offset, align 8, !dbg !5696
  store %struct.lambda_linear_expression_s* %21, %struct.lambda_linear_expression_s** %offset, align 8, !dbg !5697
  %22 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %offset, align 8, !dbg !5698
  %denominator = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %22, i32 0, i32 3, !dbg !5698
  %23 = load i32, i32* %denominator, align 8, !dbg !5698
  %cmp = icmp eq i32 %23, 1, !dbg !5698
  br i1 %cmp, label %land.lhs.true, label %cond.true16, !dbg !5698

land.lhs.true:                                    ; preds = %cond.end
  %24 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %offset, align 8, !dbg !5698
  %coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %24, i32 0, i32 0, !dbg !5698
  %25 = load i32*, i32** %coefficients, align 8, !dbg !5698
  %26 = load i64, i64* %depth, align 8, !dbg !5698
  %conv12 = trunc i64 %26 to i32, !dbg !5698
  %call13 = call zeroext i8 @lambda_vector_zerop(i32* %25, i32 %conv12), !dbg !5698
  %conv14 = zext i8 %call13 to i32, !dbg !5698
  %tobool15 = icmp ne i32 %conv14, 0, !dbg !5698
  br i1 %tobool15, label %cond.false17, label %cond.true16, !dbg !5698

cond.true16:                                      ; preds = %land.lhs.true, %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5698
  br label %cond.end18, !dbg !5698

cond.false17:                                     ; preds = %land.lhs.true
  br label %cond.end18, !dbg !5698

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i32 [ 0, %cond.true16 ], [ 0, %cond.false17 ], !dbg !5698
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %stmts, align 8, !dbg !5699
  %27 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %newloop, align 8, !dbg !5700
  %lower_bound = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %27, i32 0, i32 0, !dbg !5700
  %28 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lower_bound, align 8, !dbg !5700
  %29 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %newloop, align 8, !dbg !5701
  %linear_offset20 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %29, i32 0, i32 2, !dbg !5701
  %30 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %linear_offset20, align 8, !dbg !5701
  %31 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5702
  %32 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_ivs, align 8, !dbg !5703
  %33 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %invariants.addr, align 8, !dbg !5704
  %call21 = call %union.tree_node* @lle_to_gcc_expression(%struct.lambda_linear_expression_s* %28, %struct.lambda_linear_expression_s* %30, %union.tree_node* %31, %struct.VEC_tree_heap* %32, %struct.VEC_tree_heap* %33, i32 81, %struct.gimple_seq_d** %stmts), !dbg !5705
  store %union.tree_node* %call21, %union.tree_node** %newlowerbound, align 8, !dbg !5706
  %34 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !5707
  %tobool22 = icmp ne %struct.gimple_seq_d* %34, null, !dbg !5707
  br i1 %tobool22, label %if.then23, label %if.end25, !dbg !5709

if.then23:                                        ; preds = %cond.end18
  %35 = load %struct.loop*, %struct.loop** %temp, align 8, !dbg !5710
  %call24 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %35), !dbg !5712
  %36 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !5713
  call void @gsi_insert_seq_on_edge(%struct.edge_def* %call24, %struct.gimple_seq_d* %36), !dbg !5714
  call void @gsi_commit_edge_inserts(), !dbg !5715
  br label %if.end25, !dbg !5716

if.end25:                                         ; preds = %if.then23, %cond.end18
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %stmts, align 8, !dbg !5717
  %37 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %newloop, align 8, !dbg !5718
  %upper_bound = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %37, i32 0, i32 1, !dbg !5718
  %38 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %upper_bound, align 8, !dbg !5718
  %39 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %newloop, align 8, !dbg !5719
  %linear_offset26 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %39, i32 0, i32 2, !dbg !5719
  %40 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %linear_offset26, align 8, !dbg !5719
  %41 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5720
  %42 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_ivs, align 8, !dbg !5721
  %43 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %invariants.addr, align 8, !dbg !5722
  %call27 = call %union.tree_node* @lle_to_gcc_expression(%struct.lambda_linear_expression_s* %38, %struct.lambda_linear_expression_s* %40, %union.tree_node* %41, %struct.VEC_tree_heap* %42, %struct.VEC_tree_heap* %43, i32 80, %struct.gimple_seq_d** %stmts), !dbg !5723
  store %union.tree_node* %call27, %union.tree_node** %newupperbound, align 8, !dbg !5724
  %44 = load %struct.loop*, %struct.loop** %temp, align 8, !dbg !5725
  %call28 = call %struct.edge_def* @single_exit(%struct.loop* %44), !dbg !5726
  store %struct.edge_def* %call28, %struct.edge_def** %exit, align 8, !dbg !5727
  %45 = load %struct.loop*, %struct.loop** %temp, align 8, !dbg !5728
  %call29 = call %union.gimple_statement_d* @get_loop_exit_condition(%struct.loop* %45), !dbg !5729
  store %union.gimple_statement_d* %call29, %union.gimple_statement_d** %exitcond, align 8, !dbg !5730
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exitcond, align 8, !dbg !5731
  %call30 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %46), !dbg !5732
  store %struct.basic_block_def* %call30, %struct.basic_block_def** %bb, align 8, !dbg !5733
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5734
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %47), !dbg !5735
  %48 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5735
  %49 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5735
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 24, i1 false), !dbg !5735
  %50 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !5736
  %tobool31 = icmp ne %struct.gimple_seq_d* %50, null, !dbg !5736
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !5738

if.then32:                                        ; preds = %if.end25
  %51 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !5739
  call void @gsi_insert_seq_before(%struct.gimple_stmt_iterator* %bsi, %struct.gimple_seq_d* %51, i32 0), !dbg !5740
  br label %if.end33, !dbg !5740

if.end33:                                         ; preds = %if.then32, %if.end25
  %52 = load %struct.loop*, %struct.loop** %temp, align 8, !dbg !5741
  call void @standard_iv_increment_position(%struct.loop* %52, %struct.gimple_stmt_iterator* %bsi, i8* %insert_after), !dbg !5742
  %53 = load %union.tree_node*, %union.tree_node** %newlowerbound, align 8, !dbg !5743
  %54 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5744
  %55 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %newloop, align 8, !dbg !5745
  %step = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %55, i32 0, i32 3, !dbg !5745
  %56 = load i32, i32* %step, align 8, !dbg !5745
  %conv34 = sext i32 %56 to i64, !dbg !5745
  %call35 = call %union.tree_node* @build_int_cst(%union.tree_node* %54, i64 %conv34), !dbg !5746
  %57 = load %union.tree_node*, %union.tree_node** %ivvar, align 8, !dbg !5747
  %58 = load %struct.loop*, %struct.loop** %temp, align 8, !dbg !5748
  %59 = load i8, i8* %insert_after, align 1, !dbg !5749
  call void @create_iv(%union.tree_node* %53, %union.tree_node* %call35, %union.tree_node* %57, %struct.loop* %58, %struct.gimple_stmt_iterator* %bsi, i8 zeroext %59, %union.tree_node** %ivvar, %union.tree_node** null), !dbg !5750
  %60 = load %union.tree_node*, %union.tree_node** %ivvar, align 8, !dbg !5751
  %ssa_name = bitcast %union.tree_node* %60 to %struct.tree_ssa_name*, !dbg !5751
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5751
  %61 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5751
  %62 = load %union.tree_node*, %union.tree_node** %ivvar, align 8, !dbg !5751
  %63 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5751
  %64 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %newloop, align 8, !dbg !5751
  %step36 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %64, i32 0, i32 3, !dbg !5751
  %65 = load i32, i32* %step36, align 8, !dbg !5751
  %conv37 = sext i32 %65 to i64, !dbg !5751
  %call38 = call %union.tree_node* @build_int_cst(%union.tree_node* %63, i64 %conv37), !dbg !5751
  %call39 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 63, %union.tree_node* %61, %union.tree_node* %62, %union.tree_node* %call38), !dbg !5751
  store %union.gimple_statement_d* %call39, %union.gimple_statement_d** %inc_stmt, align 8, !dbg !5752
  %66 = load %union.tree_node*, %union.tree_node** %ivvar, align 8, !dbg !5753
  %ssa_name40 = bitcast %union.tree_node* %66 to %struct.tree_ssa_name*, !dbg !5753
  %var41 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name40, i32 0, i32 1, !dbg !5753
  %67 = load %union.tree_node*, %union.tree_node** %var41, align 8, !dbg !5753
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %inc_stmt, align 8, !dbg !5754
  %call42 = call %union.tree_node* @make_ssa_name(%union.tree_node* %67, %union.gimple_statement_d* %68), !dbg !5755
  store %union.tree_node* %call42, %union.tree_node** %ivvarinced, align 8, !dbg !5756
  %69 = load %union.gimple_statement_d*, %union.gimple_statement_d** %inc_stmt, align 8, !dbg !5757
  %70 = load %union.tree_node*, %union.tree_node** %ivvarinced, align 8, !dbg !5758
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %69, %union.tree_node* %70), !dbg !5759
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exitcond, align 8, !dbg !5760
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp43, %union.gimple_statement_d* %71), !dbg !5761
  %72 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5761
  %73 = bitcast %struct.gimple_stmt_iterator* %tmp43 to i8*, !dbg !5761
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* align 8 %73, i64 24, i1 false), !dbg !5761
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %inc_stmt, align 8, !dbg !5762
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %74, i32 1), !dbg !5763
  %75 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %newloop, align 8, !dbg !5764
  %step44 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %75, i32 0, i32 3, !dbg !5764
  %76 = load i32, i32* %step44, align 8, !dbg !5764
  %cmp45 = icmp sge i32 %76, 0, !dbg !5765
  %77 = zext i1 %cmp45 to i64, !dbg !5764
  %cond47 = select i1 %cmp45, i32 98, i32 100, !dbg !5764
  store i32 %cond47, i32* %testtype, align 4, !dbg !5766
  %78 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !5767
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %78, i32 0, i32 7, !dbg !5769
  %79 = load i32, i32* %flags, align 8, !dbg !5769
  %and = and i32 %79, 2048, !dbg !5770
  %tobool48 = icmp ne i32 %and, 0, !dbg !5770
  br i1 %tobool48, label %if.then49, label %if.end51, !dbg !5771

if.then49:                                        ; preds = %if.end33
  %80 = load i32, i32* %testtype, align 4, !dbg !5772
  %call50 = call i32 @swap_tree_comparison(i32 %80), !dbg !5773
  store i32 %call50, i32* %testtype, align 4, !dbg !5774
  br label %if.end51, !dbg !5775

if.end51:                                         ; preds = %if.then49, %if.end33
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exitcond, align 8, !dbg !5776
  %82 = load i32, i32* %testtype, align 4, !dbg !5777
  %83 = load %union.tree_node*, %union.tree_node** %newupperbound, align 8, !dbg !5778
  %84 = load %union.tree_node*, %union.tree_node** %ivvarinced, align 8, !dbg !5779
  call void @gimple_cond_set_condition(%union.gimple_statement_d* %81, i32 %82, %union.tree_node* %83, %union.tree_node* %84), !dbg !5780
  %85 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exitcond, align 8, !dbg !5781
  call void @update_stmt(%union.gimple_statement_d* %85), !dbg !5782
  %86 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_ivs, align 8, !dbg !5783
  %tobool52 = icmp ne %struct.VEC_tree_heap* %86, null, !dbg !5783
  br i1 %tobool52, label %cond.true53, label %cond.false55, !dbg !5783

cond.true53:                                      ; preds = %if.end51
  %87 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_ivs, align 8, !dbg !5783
  %base54 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %87, i32 0, i32 0, !dbg !5783
  br label %cond.end56, !dbg !5783

cond.false55:                                     ; preds = %if.end51
  br label %cond.end56, !dbg !5783

cond.end56:                                       ; preds = %cond.false55, %cond.true53
  %cond57 = phi %struct.VEC_tree_base* [ %base54, %cond.true53 ], [ null, %cond.false55 ], !dbg !5783
  %88 = load i64, i64* %i, align 8, !dbg !5783
  %conv58 = trunc i64 %88 to i32, !dbg !5783
  %89 = load %union.tree_node*, %union.tree_node** %ivvar, align 8, !dbg !5783
  %call59 = call %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %cond57, i32 %conv58, %union.tree_node* %89), !dbg !5783
  %90 = load i64, i64* %i, align 8, !dbg !5784
  %inc = add i64 %90, 1, !dbg !5784
  store i64 %inc, i64* %i, align 8, !dbg !5784
  %91 = load %struct.loop*, %struct.loop** %temp, align 8, !dbg !5785
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %91, i32 0, i32 8, !dbg !5786
  %92 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !5786
  store %struct.loop* %92, %struct.loop** %temp, align 8, !dbg !5787
  br label %while.cond, !dbg !5652, !llvm.loop !5788

while.end:                                        ; preds = %while.cond
  store i64 0, i64* %i, align 8, !dbg !5790
  br label %for.cond, !dbg !5792

for.cond:                                         ; preds = %for.inc152, %while.end
  %93 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %old_ivs.addr, align 8, !dbg !5793
  %tobool60 = icmp ne %struct.VEC_tree_heap* %93, null, !dbg !5793
  br i1 %tobool60, label %cond.true61, label %cond.false63, !dbg !5793

cond.true61:                                      ; preds = %for.cond
  %94 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %old_ivs.addr, align 8, !dbg !5793
  %base62 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %94, i32 0, i32 0, !dbg !5793
  br label %cond.end64, !dbg !5793

cond.false63:                                     ; preds = %for.cond
  br label %cond.end64, !dbg !5793

cond.end64:                                       ; preds = %cond.false63, %cond.true61
  %cond65 = phi %struct.VEC_tree_base* [ %base62, %cond.true61 ], [ null, %cond.false63 ], !dbg !5793
  %95 = load i64, i64* %i, align 8, !dbg !5793
  %conv66 = trunc i64 %95 to i32, !dbg !5793
  %call67 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond65, i32 %conv66, %union.tree_node** %oldiv), !dbg !5793
  %tobool68 = icmp ne i32 %call67, 0, !dbg !5795
  br i1 %tobool68, label %for.body, label %for.end154, !dbg !5795

for.body:                                         ; preds = %cond.end64
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !5796, metadata !DIExpression()), !dbg !5798
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !5799, metadata !DIExpression()), !dbg !5800
  call void @llvm.dbg.declare(metadata %union.tree_node** %oldiv_def, metadata !5801, metadata !DIExpression()), !dbg !5802
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %oldiv_stmt, metadata !5803, metadata !DIExpression()), !dbg !5804
  %96 = load %union.tree_node*, %union.tree_node** %oldiv, align 8, !dbg !5805
  %ssa_name69 = bitcast %union.tree_node* %96 to %struct.tree_ssa_name*, !dbg !5805
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name69, i32 0, i32 2, !dbg !5805
  %97 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5805
  store %union.gimple_statement_d* %97, %union.gimple_statement_d** %oldiv_stmt, align 8, !dbg !5804
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5806, metadata !DIExpression()), !dbg !5807
  %98 = load %union.gimple_statement_d*, %union.gimple_statement_d** %oldiv_stmt, align 8, !dbg !5808
  %call70 = call i32 @gimple_code(%union.gimple_statement_d* %98), !dbg !5810
  %cmp71 = icmp eq i32 %call70, 16, !dbg !5811
  br i1 %cmp71, label %if.then73, label %if.else, !dbg !5812

if.then73:                                        ; preds = %for.body
  %99 = load %union.gimple_statement_d*, %union.gimple_statement_d** %oldiv_stmt, align 8, !dbg !5813
  %call74 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %99), !dbg !5813
  %call75 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call74), !dbg !5813
  store %union.tree_node* %call75, %union.tree_node** %oldiv_def, align 8, !dbg !5814
  br label %if.end77, !dbg !5815

if.else:                                          ; preds = %for.body
  %100 = load %union.gimple_statement_d*, %union.gimple_statement_d** %oldiv_stmt, align 8, !dbg !5816
  %call76 = call %union.tree_node* @single_ssa_tree_operand(%union.gimple_statement_d* %100, i32 2), !dbg !5816
  store %union.tree_node* %call76, %union.tree_node** %oldiv_def, align 8, !dbg !5817
  br label %if.end77

if.end77:                                         ; preds = %if.else, %if.then73
  %101 = load %union.tree_node*, %union.tree_node** %oldiv_def, align 8, !dbg !5818
  %cmp78 = icmp ne %union.tree_node* %101, null, !dbg !5818
  br i1 %cmp78, label %cond.false81, label %cond.true80, !dbg !5818

cond.true80:                                      ; preds = %if.end77
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1834, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5818
  br label %cond.end82, !dbg !5818

cond.false81:                                     ; preds = %if.end77
  br label %cond.end82, !dbg !5818

cond.end82:                                       ; preds = %cond.false81, %cond.true80
  %cond83 = phi i32 [ 0, %cond.true80 ], [ 0, %cond.false81 ], !dbg !5818
  %102 = load %union.tree_node*, %union.tree_node** %oldiv_def, align 8, !dbg !5819
  %call84 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %102), !dbg !5819
  store %union.gimple_statement_d* %call84, %union.gimple_statement_d** %stmt, align 8, !dbg !5819
  br label %for.cond85, !dbg !5819

for.cond85:                                       ; preds = %for.inc148, %cond.end82
  %call86 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5821
  %tobool87 = icmp ne i8 %call86, 0, !dbg !5821
  %lnot = xor i1 %tobool87, true, !dbg !5821
  br i1 %lnot, label %for.body88, label %for.end150, !dbg !5819

for.body88:                                       ; preds = %for.cond85
  call void @llvm.dbg.declare(metadata %union.tree_node** %newiv, metadata !5823, metadata !DIExpression()), !dbg !5825
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts89, metadata !5826, metadata !DIExpression()), !dbg !5827
  call void @llvm.dbg.declare(metadata %struct.lambda_body_vector_s** %lbv, metadata !5828, metadata !DIExpression()), !dbg !5829
  call void @llvm.dbg.declare(metadata %struct.lambda_body_vector_s** %newlbv, metadata !5830, metadata !DIExpression()), !dbg !5831
  %103 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5832
  %call90 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %103), !dbg !5834
  %tobool91 = icmp ne i8 %call90, 0, !dbg !5834
  br i1 %tobool91, label %if.then92, label %if.end93, !dbg !5835

if.then92:                                        ; preds = %for.body88
  br label %for.inc148, !dbg !5836

if.end93:                                         ; preds = %for.body88
  %104 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_ivs, align 8, !dbg !5837
  %tobool94 = icmp ne %struct.VEC_tree_heap* %104, null, !dbg !5837
  br i1 %tobool94, label %cond.true95, label %cond.false97, !dbg !5837

cond.true95:                                      ; preds = %if.end93
  %105 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_ivs, align 8, !dbg !5837
  %base96 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %105, i32 0, i32 0, !dbg !5837
  br label %cond.end98, !dbg !5837

cond.false97:                                     ; preds = %if.end93
  br label %cond.end98, !dbg !5837

cond.end98:                                       ; preds = %cond.false97, %cond.true95
  %cond99 = phi %struct.VEC_tree_base* [ %base96, %cond.true95 ], [ null, %cond.false97 ], !dbg !5837
  %call100 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond99), !dbg !5837
  %conv101 = zext i32 %call100 to i64, !dbg !5837
  store i64 %conv101, i64* %depth, align 8, !dbg !5838
  %106 = load i64, i64* %depth, align 8, !dbg !5839
  %conv102 = trunc i64 %106 to i32, !dbg !5839
  %107 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !5840
  %call103 = call %struct.lambda_body_vector_s* @lambda_body_vector_new(i32 %conv102, %struct.obstack* %107), !dbg !5841
  store %struct.lambda_body_vector_s* %call103, %struct.lambda_body_vector_s** %lbv, align 8, !dbg !5842
  %108 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %lbv, align 8, !dbg !5843
  %coefficients104 = getelementptr inbounds %struct.lambda_body_vector_s, %struct.lambda_body_vector_s* %108, i32 0, i32 0, !dbg !5843
  %109 = load i32*, i32** %coefficients104, align 8, !dbg !5843
  %110 = load i64, i64* %i, align 8, !dbg !5844
  %arrayidx105 = getelementptr inbounds i32, i32* %109, i64 %110, !dbg !5843
  store i32 1, i32* %arrayidx105, align 4, !dbg !5845
  %111 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %transform.addr, align 8, !dbg !5846
  %112 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %lbv, align 8, !dbg !5847
  %113 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !5848
  %call106 = call %struct.lambda_body_vector_s* @lambda_body_vector_compute_new(%struct.lambda_trans_matrix_s* %111, %struct.lambda_body_vector_s* %112, %struct.obstack* %113), !dbg !5849
  store %struct.lambda_body_vector_s* %call106, %struct.lambda_body_vector_s** %newlbv, align 8, !dbg !5850
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %stmts89, align 8, !dbg !5851
  %114 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %newlbv, align 8, !dbg !5852
  %115 = load %union.tree_node*, %union.tree_node** %oldiv, align 8, !dbg !5853
  %common107 = bitcast %union.tree_node* %115 to %struct.tree_common*, !dbg !5853
  %type108 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common107, i32 0, i32 2, !dbg !5853
  %116 = load %union.tree_node*, %union.tree_node** %type108, align 8, !dbg !5853
  %117 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_ivs, align 8, !dbg !5854
  %call109 = call %union.tree_node* @lbv_to_gcc_expression(%struct.lambda_body_vector_s* %114, %union.tree_node* %116, %struct.VEC_tree_heap* %117, %struct.gimple_seq_d** %stmts89), !dbg !5855
  store %union.tree_node* %call109, %union.tree_node** %newiv, align 8, !dbg !5856
  %118 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts89, align 8, !dbg !5857
  %tobool110 = icmp ne %struct.gimple_seq_d* %118, null, !dbg !5857
  br i1 %tobool110, label %land.lhs.true111, label %if.end117, !dbg !5859

land.lhs.true111:                                 ; preds = %cond.end98
  %119 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5860
  %call112 = call i32 @gimple_code(%union.gimple_statement_d* %119), !dbg !5861
  %cmp113 = icmp ne i32 %call112, 16, !dbg !5862
  br i1 %cmp113, label %if.then115, label %if.end117, !dbg !5863

if.then115:                                       ; preds = %land.lhs.true111
  %120 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5864
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp116, %union.gimple_statement_d* %120), !dbg !5866
  %121 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5866
  %122 = bitcast %struct.gimple_stmt_iterator* %tmp116 to i8*, !dbg !5866
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %122, i64 24, i1 false), !dbg !5866
  %123 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts89, align 8, !dbg !5867
  call void @gsi_insert_seq_before(%struct.gimple_stmt_iterator* %bsi, %struct.gimple_seq_d* %123, i32 1), !dbg !5868
  br label %if.end117, !dbg !5869

if.end117:                                        ; preds = %if.then115, %land.lhs.true111, %cond.end98
  %call118 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5870
  store %struct.ssa_use_operand_d* %call118, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5870
  br label %for.cond119, !dbg !5870

for.cond119:                                      ; preds = %for.inc, %if.end117
  %call120 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5872
  %tobool121 = icmp ne i8 %call120, 0, !dbg !5872
  %lnot122 = xor i1 %tobool121, true, !dbg !5872
  br i1 %lnot122, label %for.body123, label %for.end, !dbg !5870

for.body123:                                      ; preds = %for.cond119
  %124 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5874
  %125 = load %union.tree_node*, %union.tree_node** %newiv, align 8, !dbg !5875
  call void @propagate_value(%struct.ssa_use_operand_d* %124, %union.tree_node* %125), !dbg !5876
  br label %for.inc, !dbg !5876

for.inc:                                          ; preds = %for.body123
  %call124 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5872
  store %struct.ssa_use_operand_d* %call124, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5872
  br label %for.cond119, !dbg !5872, !llvm.loop !5877

for.end:                                          ; preds = %for.cond119
  %126 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts89, align 8, !dbg !5879
  %tobool125 = icmp ne %struct.gimple_seq_d* %126, null, !dbg !5879
  br i1 %tobool125, label %land.lhs.true126, label %if.end147, !dbg !5881

land.lhs.true126:                                 ; preds = %for.end
  %127 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5882
  %call127 = call i32 @gimple_code(%union.gimple_statement_d* %127), !dbg !5883
  %cmp128 = icmp eq i32 %call127, 16, !dbg !5884
  br i1 %cmp128, label %if.then130, label %if.end147, !dbg !5885

if.then130:                                       ; preds = %land.lhs.true126
  store i32 0, i32* %j, align 4, !dbg !5886
  br label %for.cond131, !dbg !5888

for.cond131:                                      ; preds = %for.inc144, %if.then130
  %128 = load i32, i32* %j, align 4, !dbg !5889
  %129 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5891
  %call132 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %129), !dbg !5892
  %cmp133 = icmp ult i32 %128, %call132, !dbg !5893
  br i1 %cmp133, label %for.body135, label %for.end146, !dbg !5894

for.body135:                                      ; preds = %for.cond131
  %130 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5895
  %131 = load i32, i32* %j, align 4, !dbg !5897
  %conv136 = zext i32 %131 to i64, !dbg !5897
  %call137 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %130, i64 %conv136), !dbg !5898
  %132 = load %union.tree_node*, %union.tree_node** %newiv, align 8, !dbg !5899
  %cmp138 = icmp eq %union.tree_node* %call137, %132, !dbg !5900
  br i1 %cmp138, label %if.then140, label %if.end143, !dbg !5901

if.then140:                                       ; preds = %for.body135
  %133 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5902
  %134 = load i32, i32* %j, align 4, !dbg !5903
  %conv141 = zext i32 %134 to i64, !dbg !5903
  %call142 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %133, i64 %conv141), !dbg !5904
  %135 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts89, align 8, !dbg !5905
  call void @gsi_insert_seq_on_edge(%struct.edge_def* %call142, %struct.gimple_seq_d* %135), !dbg !5906
  br label %if.end143, !dbg !5906

if.end143:                                        ; preds = %if.then140, %for.body135
  br label %for.inc144, !dbg !5899

for.inc144:                                       ; preds = %if.end143
  %136 = load i32, i32* %j, align 4, !dbg !5907
  %inc145 = add i32 %136, 1, !dbg !5907
  store i32 %inc145, i32* %j, align 4, !dbg !5907
  br label %for.cond131, !dbg !5908, !llvm.loop !5909

for.end146:                                       ; preds = %for.cond131
  br label %if.end147, !dbg !5910

if.end147:                                        ; preds = %for.end146, %land.lhs.true126, %for.end
  %137 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5911
  call void @update_stmt(%union.gimple_statement_d* %137), !dbg !5912
  br label %for.inc148, !dbg !5913

for.inc148:                                       ; preds = %if.end147, %if.then92
  %call149 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5821
  store %union.gimple_statement_d* %call149, %union.gimple_statement_d** %stmt, align 8, !dbg !5821
  br label %for.cond85, !dbg !5821, !llvm.loop !5914

for.end150:                                       ; preds = %for.cond85
  %138 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %remove_ivs.addr, align 8, !dbg !5916
  %139 = load %union.gimple_statement_d*, %union.gimple_statement_d** %oldiv_stmt, align 8, !dbg !5916
  %call151 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %138, %union.gimple_statement_d* %139), !dbg !5916
  br label %for.inc152, !dbg !5917

for.inc152:                                       ; preds = %for.end150
  %140 = load i64, i64* %i, align 8, !dbg !5918
  %inc153 = add i64 %140, 1, !dbg !5918
  store i64 %inc153, i64* %i, align 8, !dbg !5918
  br label %for.cond, !dbg !5919, !llvm.loop !5920

for.end154:                                       ; preds = %cond.end64
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %new_ivs), !dbg !5922
  ret void, !dbg !5923
}

declare dso_local %struct.lambda_trans_matrix_s* @lambda_trans_matrix_inverse(%struct.lambda_trans_matrix_s*) #2

declare dso_local void @print_lambda_trans_matrix(%struct._IO_FILE*, %struct.lambda_trans_matrix_s*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !5924 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5929, metadata !DIExpression()), !dbg !5930
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5931, metadata !DIExpression()), !dbg !5930
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5930
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !5930
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5930

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5930
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5930
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !5930
  %3 = load i32, i32* %num, align 8, !dbg !5930
  %cmp = icmp ult i32 %1, %3, !dbg !5930
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5932
  %land.ext = zext i1 %4 to i32, !dbg !5930
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5930
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !5930
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5930
  %idxprom = zext i32 %6 to i64, !dbg !5930
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !5930
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5930
  ret %union.tree_node* %7, !dbg !5930
}

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lle_to_gcc_expression(%struct.lambda_linear_expression_s* %lle, %struct.lambda_linear_expression_s* %offset, %union.tree_node* %type, %struct.VEC_tree_heap* %induction_vars, %struct.VEC_tree_heap* %invariants, i32 %wrap, %struct.gimple_seq_d** %stmts_to_insert) #0 !dbg !5933 {
entry:
  %lle.addr = alloca %struct.lambda_linear_expression_s*, align 8
  %offset.addr = alloca %struct.lambda_linear_expression_s*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %induction_vars.addr = alloca %struct.VEC_tree_heap*, align 8
  %invariants.addr = alloca %struct.VEC_tree_heap*, align 8
  %wrap.addr = alloca i32, align 4
  %stmts_to_insert.addr = alloca %struct.gimple_seq_d**, align 8
  %k = alloca i32, align 4
  %resvar = alloca %union.tree_node*, align 8
  %expr = alloca %union.tree_node*, align 8
  %results = alloca %struct.VEC_tree_heap*, align 8
  %i = alloca i64, align 8
  %op = alloca %union.tree_node*, align 8
  store %struct.lambda_linear_expression_s* %lle, %struct.lambda_linear_expression_s** %lle.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %lle.addr, metadata !5937, metadata !DIExpression()), !dbg !5938
  store %struct.lambda_linear_expression_s* %offset, %struct.lambda_linear_expression_s** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %offset.addr, metadata !5939, metadata !DIExpression()), !dbg !5940
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5941, metadata !DIExpression()), !dbg !5942
  store %struct.VEC_tree_heap* %induction_vars, %struct.VEC_tree_heap** %induction_vars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %induction_vars.addr, metadata !5943, metadata !DIExpression()), !dbg !5944
  store %struct.VEC_tree_heap* %invariants, %struct.VEC_tree_heap** %invariants.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %invariants.addr, metadata !5945, metadata !DIExpression()), !dbg !5946
  store i32 %wrap, i32* %wrap.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %wrap.addr, metadata !5947, metadata !DIExpression()), !dbg !5948
  store %struct.gimple_seq_d** %stmts_to_insert, %struct.gimple_seq_d*** %stmts_to_insert.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %stmts_to_insert.addr, metadata !5949, metadata !DIExpression()), !dbg !5950
  call void @llvm.dbg.declare(metadata i32* %k, metadata !5951, metadata !DIExpression()), !dbg !5952
  call void @llvm.dbg.declare(metadata %union.tree_node** %resvar, metadata !5953, metadata !DIExpression()), !dbg !5954
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !5955, metadata !DIExpression()), !dbg !5956
  store %union.tree_node* null, %union.tree_node** %expr, align 8, !dbg !5956
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %results, metadata !5957, metadata !DIExpression()), !dbg !5958
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %results, align 8, !dbg !5958
  %0 = load i32, i32* %wrap.addr, align 4, !dbg !5959
  %cmp = icmp eq i32 %0, 81, !dbg !5959
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !5959

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %wrap.addr, align 4, !dbg !5959
  %cmp1 = icmp eq i32 %1, 80, !dbg !5959
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !5959

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1590, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5959
  br label %cond.end, !dbg !5959

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !5959

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5959
  br label %for.cond, !dbg !5960

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle.addr, align 8, !dbg !5961
  %cmp2 = icmp ne %struct.lambda_linear_expression_s* %2, null, !dbg !5964
  br i1 %cmp2, label %for.body, label %for.end, !dbg !5965

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5966
  %4 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle.addr, align 8, !dbg !5968
  %coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %4, i32 0, i32 0, !dbg !5968
  %5 = load i32*, i32** %coefficients, align 8, !dbg !5968
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %induction_vars.addr, align 8, !dbg !5969
  %call = call %union.tree_node* @build_linear_expr(%union.tree_node* %3, i32* %5, %struct.VEC_tree_heap* %6), !dbg !5970
  store %union.tree_node* %call, %union.tree_node** %expr, align 8, !dbg !5971
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5972
  %8 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5972
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5972
  %10 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle.addr, align 8, !dbg !5972
  %invariant_coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %10, i32 0, i32 2, !dbg !5972
  %11 = load i32*, i32** %invariant_coefficients, align 8, !dbg !5972
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %invariants.addr, align 8, !dbg !5972
  %call3 = call %union.tree_node* @build_linear_expr(%union.tree_node* %9, i32* %11, %struct.VEC_tree_heap* %12), !dbg !5972
  %call4 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %7, %union.tree_node* %8, %union.tree_node* %call3), !dbg !5972
  store %union.tree_node* %call4, %union.tree_node** %expr, align 8, !dbg !5973
  %13 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle.addr, align 8, !dbg !5974
  %constant = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %13, i32 0, i32 1, !dbg !5974
  %14 = load i32, i32* %constant, align 8, !dbg !5974
  store i32 %14, i32* %k, align 4, !dbg !5975
  %15 = load i32, i32* %k, align 4, !dbg !5976
  %tobool = icmp ne i32 %15, 0, !dbg !5976
  br i1 %tobool, label %if.then, label %if.end, !dbg !5978

if.then:                                          ; preds = %for.body
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5979
  %17 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5979
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5979
  %19 = load i32, i32* %k, align 4, !dbg !5979
  %conv = sext i32 %19 to i64, !dbg !5979
  %call5 = call %union.tree_node* @build_int_cst(%union.tree_node* %18, i64 %conv), !dbg !5979
  %call6 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %call5), !dbg !5979
  store %union.tree_node* %call6, %union.tree_node** %expr, align 8, !dbg !5980
  br label %if.end, !dbg !5981

if.end:                                           ; preds = %if.then, %for.body
  %20 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %offset.addr, align 8, !dbg !5982
  %constant7 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %20, i32 0, i32 1, !dbg !5982
  %21 = load i32, i32* %constant7, align 8, !dbg !5982
  store i32 %21, i32* %k, align 4, !dbg !5983
  %22 = load i32, i32* %k, align 4, !dbg !5984
  %tobool8 = icmp ne i32 %22, 0, !dbg !5984
  br i1 %tobool8, label %if.then9, label %if.end13, !dbg !5986

if.then9:                                         ; preds = %if.end
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5987
  %24 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5987
  %25 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5987
  %26 = load i32, i32* %k, align 4, !dbg !5987
  %conv10 = sext i32 %26 to i64, !dbg !5987
  %call11 = call %union.tree_node* @build_int_cst(%union.tree_node* %25, i64 %conv10), !dbg !5987
  %call12 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %23, %union.tree_node* %24, %union.tree_node* %call11), !dbg !5987
  store %union.tree_node* %call12, %union.tree_node** %expr, align 8, !dbg !5988
  br label %if.end13, !dbg !5989

if.end13:                                         ; preds = %if.then9, %if.end
  %27 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle.addr, align 8, !dbg !5990
  %denominator = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %27, i32 0, i32 3, !dbg !5990
  %28 = load i32, i32* %denominator, align 8, !dbg !5990
  store i32 %28, i32* %k, align 4, !dbg !5991
  %29 = load i32, i32* %k, align 4, !dbg !5992
  %cmp14 = icmp ne i32 %29, 1, !dbg !5994
  br i1 %cmp14, label %if.then16, label %if.end23, !dbg !5995

if.then16:                                        ; preds = %if.end13
  %30 = load i32, i32* %wrap.addr, align 4, !dbg !5996
  %cmp17 = icmp eq i32 %30, 81, !dbg !5996
  %31 = zext i1 %cmp17 to i64, !dbg !5996
  %cond19 = select i1 %cmp17, i32 68, i32 69, !dbg !5996
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5996
  %33 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5996
  %34 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5996
  %35 = load i32, i32* %k, align 4, !dbg !5996
  %conv20 = sext i32 %35 to i64, !dbg !5996
  %call21 = call %union.tree_node* @build_int_cst(%union.tree_node* %34, i64 %conv20), !dbg !5996
  %call22 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %cond19, %union.tree_node* %32, %union.tree_node* %33, %union.tree_node* %call21), !dbg !5996
  store %union.tree_node* %call22, %union.tree_node** %expr, align 8, !dbg !5997
  br label %if.end23, !dbg !5998

if.end23:                                         ; preds = %if.then16, %if.end13
  %36 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5999
  %call24 = call %union.tree_node* @fold(%union.tree_node* %36), !dbg !6000
  store %union.tree_node* %call24, %union.tree_node** %expr, align 8, !dbg !6001
  %37 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6002
  %call25 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %results, %union.tree_node* %37), !dbg !6002
  br label %for.inc, !dbg !6003

for.inc:                                          ; preds = %if.end23
  %38 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle.addr, align 8, !dbg !6004
  %next = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %38, i32 0, i32 4, !dbg !6004
  %39 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %next, align 8, !dbg !6004
  store %struct.lambda_linear_expression_s* %39, %struct.lambda_linear_expression_s** %lle.addr, align 8, !dbg !6005
  br label %for.cond, !dbg !6006, !llvm.loop !6007

for.end:                                          ; preds = %for.cond
  %40 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6009
  %tobool26 = icmp ne %union.tree_node* %40, null, !dbg !6009
  br i1 %tobool26, label %cond.false28, label %cond.true27, !dbg !6009

cond.true27:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1618, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6009
  br label %cond.end29, !dbg !6009

cond.false28:                                     ; preds = %for.end
  br label %cond.end29, !dbg !6009

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi i32 [ 0, %cond.true27 ], [ 0, %cond.false28 ], !dbg !6009
  %41 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %results, align 8, !dbg !6010
  %tobool31 = icmp ne %struct.VEC_tree_heap* %41, null, !dbg !6010
  br i1 %tobool31, label %cond.true32, label %cond.false33, !dbg !6010

cond.true32:                                      ; preds = %cond.end29
  %42 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %results, align 8, !dbg !6010
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %42, i32 0, i32 0, !dbg !6010
  br label %cond.end34, !dbg !6010

cond.false33:                                     ; preds = %cond.end29
  br label %cond.end34, !dbg !6010

cond.end34:                                       ; preds = %cond.false33, %cond.true32
  %cond35 = phi %struct.VEC_tree_base* [ %base, %cond.true32 ], [ null, %cond.false33 ], !dbg !6010
  %call36 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond35), !dbg !6010
  %cmp37 = icmp ugt i32 %call36, 1, !dbg !6012
  br i1 %cmp37, label %if.then39, label %if.end61, !dbg !6013

if.then39:                                        ; preds = %cond.end34
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6014, metadata !DIExpression()), !dbg !6016
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !6017, metadata !DIExpression()), !dbg !6018
  %43 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %results, align 8, !dbg !6019
  %tobool40 = icmp ne %struct.VEC_tree_heap* %43, null, !dbg !6019
  br i1 %tobool40, label %cond.true41, label %cond.false43, !dbg !6019

cond.true41:                                      ; preds = %if.then39
  %44 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %results, align 8, !dbg !6019
  %base42 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %44, i32 0, i32 0, !dbg !6019
  br label %cond.end44, !dbg !6019

cond.false43:                                     ; preds = %if.then39
  br label %cond.end44, !dbg !6019

cond.end44:                                       ; preds = %cond.false43, %cond.true41
  %cond45 = phi %struct.VEC_tree_base* [ %base42, %cond.true41 ], [ null, %cond.false43 ], !dbg !6019
  %call46 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond45, i32 0), !dbg !6019
  store %union.tree_node* %call46, %union.tree_node** %expr, align 8, !dbg !6020
  store i64 1, i64* %i, align 8, !dbg !6021
  br label %for.cond47, !dbg !6023

for.cond47:                                       ; preds = %for.inc59, %cond.end44
  %45 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %results, align 8, !dbg !6024
  %tobool48 = icmp ne %struct.VEC_tree_heap* %45, null, !dbg !6024
  br i1 %tobool48, label %cond.true49, label %cond.false51, !dbg !6024

cond.true49:                                      ; preds = %for.cond47
  %46 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %results, align 8, !dbg !6024
  %base50 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %46, i32 0, i32 0, !dbg !6024
  br label %cond.end52, !dbg !6024

cond.false51:                                     ; preds = %for.cond47
  br label %cond.end52, !dbg !6024

cond.end52:                                       ; preds = %cond.false51, %cond.true49
  %cond53 = phi %struct.VEC_tree_base* [ %base50, %cond.true49 ], [ null, %cond.false51 ], !dbg !6024
  %47 = load i64, i64* %i, align 8, !dbg !6024
  %conv54 = trunc i64 %47 to i32, !dbg !6024
  %call55 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond53, i32 %conv54, %union.tree_node** %op), !dbg !6024
  %tobool56 = icmp ne i32 %call55, 0, !dbg !6026
  br i1 %tobool56, label %for.body57, label %for.end60, !dbg !6026

for.body57:                                       ; preds = %cond.end52
  %48 = load i32, i32* %wrap.addr, align 4, !dbg !6027
  %49 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6027
  %50 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6027
  %51 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6027
  %call58 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %48, %union.tree_node* %49, %union.tree_node* %50, %union.tree_node* %51), !dbg !6027
  store %union.tree_node* %call58, %union.tree_node** %expr, align 8, !dbg !6028
  br label %for.inc59, !dbg !6029

for.inc59:                                        ; preds = %for.body57
  %52 = load i64, i64* %i, align 8, !dbg !6030
  %inc = add i64 %52, 1, !dbg !6030
  store i64 %inc, i64* %i, align 8, !dbg !6030
  br label %for.cond47, !dbg !6031, !llvm.loop !6032

for.end60:                                        ; preds = %cond.end52
  br label %if.end61, !dbg !6034

if.end61:                                         ; preds = %for.end60, %cond.end34
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %results), !dbg !6035
  %53 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6036
  %call62 = call %union.tree_node* @create_tmp_var(%union.tree_node* %53, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i64 0, i64 0)), !dbg !6037
  store %union.tree_node* %call62, %union.tree_node** %resvar, align 8, !dbg !6038
  %54 = load %union.tree_node*, %union.tree_node** %resvar, align 8, !dbg !6039
  %call63 = call zeroext i8 @add_referenced_var(%union.tree_node* %54), !dbg !6040
  %55 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6041
  %call64 = call %union.tree_node* @fold(%union.tree_node* %55), !dbg !6042
  %56 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts_to_insert.addr, align 8, !dbg !6043
  %57 = load %union.tree_node*, %union.tree_node** %resvar, align 8, !dbg !6044
  %call65 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %call64, %struct.gimple_seq_d** %56, i8 zeroext 1, %union.tree_node* %57), !dbg !6045
  ret %union.tree_node* %call65, !dbg !6046
}

declare dso_local void @gsi_insert_seq_on_edge(%struct.edge_def*, %struct.gimple_seq_d*) #2

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #2

declare dso_local void @gsi_commit_edge_inserts() #2

declare dso_local %struct.edge_def* @single_exit(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !6047 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6050, metadata !DIExpression()), !dbg !6051
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6052
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6053
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !6054
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6054
  ret %struct.basic_block_def* %1, !dbg !6055
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_after_labels(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6056 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6059, metadata !DIExpression()), !dbg !6060
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6061, metadata !DIExpression()), !dbg !6062
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6063
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %agg.result, %struct.basic_block_def* %0), !dbg !6064
  br label %while.cond, !dbg !6065

while.cond:                                       ; preds = %while.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !6066
  %tobool = icmp ne i8 %call, 0, !dbg !6066
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !6067

land.rhs:                                         ; preds = %while.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !6068
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %call1), !dbg !6069
  %cmp = icmp eq i32 %call2, 4, !dbg !6070
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !6071
  br i1 %1, label %while.body, label %while.end, !dbg !6065

while.body:                                       ; preds = %land.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %agg.result), !dbg !6072
  br label %while.cond, !dbg !6065, !llvm.loop !6073

while.end:                                        ; preds = %land.end
  ret void, !dbg !6075
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

declare dso_local void @gsi_insert_seq_before(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #2

declare dso_local void @standard_iv_increment_position(%struct.loop*, %struct.gimple_stmt_iterator*, i8*) #2

declare dso_local void @create_iv(%union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.loop*, %struct.gimple_stmt_iterator*, i8 zeroext, %union.tree_node**, %union.tree_node**) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !6076 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6079, metadata !DIExpression()), !dbg !6080
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6081, metadata !DIExpression()), !dbg !6082
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6083
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6083
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6084
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6085
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !6086
  ret %union.tree_node* %call, !dbg !6087
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !6088 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6091, metadata !DIExpression()), !dbg !6092
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !6093, metadata !DIExpression()), !dbg !6094
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6095
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6096
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !6097
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6098
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !6098
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6100

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6101
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6101
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6101
  %bf.load = load i64, i64* %4, align 8, !dbg !6101
  %bf.clear = and i64 %bf.load, 65535, !dbg !6101
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6101
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6102
  br i1 %cmp, label %if.then, label %if.end, !dbg !6103

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6104
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6105
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !6105
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6105
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6106
  br label %if.end, !dbg !6105

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !6107
}

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local i32 @swap_tree_comparison(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_condition(%union.gimple_statement_d* %stmt, i32 %code, %union.tree_node* %lhs, %union.tree_node* %rhs) #0 !dbg !6108 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code.addr = alloca i32, align 4
  %lhs.addr = alloca %union.tree_node*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6111, metadata !DIExpression()), !dbg !6112
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6113, metadata !DIExpression()), !dbg !6114
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !6115, metadata !DIExpression()), !dbg !6116
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !6117, metadata !DIExpression()), !dbg !6118
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6119
  %1 = load i32, i32* %code.addr, align 4, !dbg !6120
  call void @gimple_cond_set_code(%union.gimple_statement_d* %0, i32 %1), !dbg !6121
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6122
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6123
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !6124
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6125
  %5 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !6126
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %4, %union.tree_node* %5), !dbg !6127
  ret void, !dbg !6128
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !6129 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !6130, metadata !DIExpression()), !dbg !6131
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6132
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6134
  %tobool = icmp ne i8 %call, 0, !dbg !6134
  br i1 %tobool, label %if.then, label %if.end, !dbg !6135

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6136
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !6138
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6139
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !6140
  br label %if.end, !dbg !6141

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6142
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node* %obj_) #0 !dbg !6143 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %union.tree_node*, align 8
  %old_obj_ = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6147, metadata !DIExpression()), !dbg !6148
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6149, metadata !DIExpression()), !dbg !6148
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !6150, metadata !DIExpression()), !dbg !6148
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_obj_, metadata !6151, metadata !DIExpression()), !dbg !6148
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !6148
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6148
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !6148
  %2 = load i32, i32* %num, align 8, !dbg !6148
  %cmp = icmp ult i32 %0, %2, !dbg !6148
  %conv = zext i1 %cmp to i32, !dbg !6148
  %3 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6148
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %3, i32 0, i32 2, !dbg !6148
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !6148
  %idxprom = zext i32 %4 to i64, !dbg !6148
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !6148
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6148
  store %union.tree_node* %5, %union.tree_node** %old_obj_, align 8, !dbg !6148
  %6 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !6148
  %7 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6148
  %vec1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %7, i32 0, i32 2, !dbg !6148
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !6148
  %idxprom2 = zext i32 %8 to i64, !dbg !6148
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec1, i64 0, i64 %idxprom2, !dbg !6148
  store %union.tree_node* %6, %union.tree_node** %arrayidx3, align 8, !dbg !6148
  %9 = load %union.tree_node*, %union.tree_node** %old_obj_, align 8, !dbg !6148
  ret %union.tree_node* %9, !dbg !6148
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !6152 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6155, metadata !DIExpression()), !dbg !6156
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6157, metadata !DIExpression()), !dbg !6156
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !6158, metadata !DIExpression()), !dbg !6156
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6159
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6159
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6159

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6159
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6159
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !6159
  %3 = load i32, i32* %num, align 8, !dbg !6159
  %cmp = icmp ult i32 %1, %3, !dbg !6159
  br i1 %cmp, label %if.then, label %if.else, !dbg !6156

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6161
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !6161
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6161
  %idxprom = zext i32 %5 to i64, !dbg !6161
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !6161
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6161
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !6161
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !6161
  store i32 1, i32* %retval, align 4, !dbg !6161
  br label %return, !dbg !6161

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !6163
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !6163
  store i32 0, i32* %retval, align 4, !dbg !6163
  br label %return, !dbg !6163

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6156
  ret i32 %9, !dbg !6156
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !6165 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !6169, metadata !DIExpression()), !dbg !6170
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !6171
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6172
  ret %union.tree_node* %1, !dbg !6173
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !6174 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6177, metadata !DIExpression()), !dbg !6178
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6179
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6180
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !6181
  ret %union.tree_node** %result, !dbg !6182
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @single_ssa_tree_operand(%union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6183 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %var = alloca %union.tree_node*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6186, metadata !DIExpression()), !dbg !6187
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6188, metadata !DIExpression()), !dbg !6189
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !6190, metadata !DIExpression()), !dbg !6191
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6192, metadata !DIExpression()), !dbg !6205
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6206
  %1 = load i32, i32* %flags.addr, align 4, !dbg !6207
  %call = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %0, i32 %1), !dbg !6208
  store %union.tree_node* %call, %union.tree_node** %var, align 8, !dbg !6209
  %call1 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !6210
  %tobool = icmp ne i8 %call1, 0, !dbg !6210
  br i1 %tobool, label %if.then, label %if.end, !dbg !6212

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6213
  br label %return, !dbg !6213

if.end:                                           ; preds = %entry
  %call2 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !6214
  %call3 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !6215
  %tobool4 = icmp ne i8 %call3, 0, !dbg !6215
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !6217

if.then5:                                         ; preds = %if.end
  %2 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6218
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !6219
  br label %return, !dbg !6219

if.end6:                                          ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6220
  br label %return, !dbg !6220

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6221
  ret %union.tree_node* %3, !dbg !6221
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !6222 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6225, metadata !DIExpression()), !dbg !6226
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6226
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6226
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6226

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6226
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !6226
  %2 = load i32, i32* %num, align 8, !dbg !6226
  br label %cond.end, !dbg !6226

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6226

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6226
  ret i32 %cond, !dbg !6226
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lbv_to_gcc_expression(%struct.lambda_body_vector_s* %lbv, %union.tree_node* %type, %struct.VEC_tree_heap* %induction_vars, %struct.gimple_seq_d** %stmts_to_insert) #0 !dbg !6227 {
entry:
  %lbv.addr = alloca %struct.lambda_body_vector_s*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %induction_vars.addr = alloca %struct.VEC_tree_heap*, align 8
  %stmts_to_insert.addr = alloca %struct.gimple_seq_d**, align 8
  %k = alloca i32, align 4
  %resvar = alloca %union.tree_node*, align 8
  %expr = alloca %union.tree_node*, align 8
  store %struct.lambda_body_vector_s* %lbv, %struct.lambda_body_vector_s** %lbv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_body_vector_s** %lbv.addr, metadata !6230, metadata !DIExpression()), !dbg !6231
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6232, metadata !DIExpression()), !dbg !6233
  store %struct.VEC_tree_heap* %induction_vars, %struct.VEC_tree_heap** %induction_vars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %induction_vars.addr, metadata !6234, metadata !DIExpression()), !dbg !6235
  store %struct.gimple_seq_d** %stmts_to_insert, %struct.gimple_seq_d*** %stmts_to_insert.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %stmts_to_insert.addr, metadata !6236, metadata !DIExpression()), !dbg !6237
  call void @llvm.dbg.declare(metadata i32* %k, metadata !6238, metadata !DIExpression()), !dbg !6239
  call void @llvm.dbg.declare(metadata %union.tree_node** %resvar, metadata !6240, metadata !DIExpression()), !dbg !6241
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !6242, metadata !DIExpression()), !dbg !6243
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6244
  %1 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %lbv.addr, align 8, !dbg !6245
  %coefficients = getelementptr inbounds %struct.lambda_body_vector_s, %struct.lambda_body_vector_s* %1, i32 0, i32 0, !dbg !6245
  %2 = load i32*, i32** %coefficients, align 8, !dbg !6245
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %induction_vars.addr, align 8, !dbg !6246
  %call = call %union.tree_node* @build_linear_expr(%union.tree_node* %0, i32* %2, %struct.VEC_tree_heap* %3), !dbg !6247
  store %union.tree_node* %call, %union.tree_node** %expr, align 8, !dbg !6243
  %4 = load %struct.lambda_body_vector_s*, %struct.lambda_body_vector_s** %lbv.addr, align 8, !dbg !6248
  %denominator = getelementptr inbounds %struct.lambda_body_vector_s, %struct.lambda_body_vector_s* %4, i32 0, i32 2, !dbg !6248
  %5 = load i32, i32* %denominator, align 4, !dbg !6248
  store i32 %5, i32* %k, align 4, !dbg !6249
  %6 = load i32, i32* %k, align 4, !dbg !6250
  %cmp = icmp ne i32 %6, 0, !dbg !6250
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6250

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1555, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6250
  br label %cond.end, !dbg !6250

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6250

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6250
  %7 = load i32, i32* %k, align 4, !dbg !6251
  %cmp1 = icmp ne i32 %7, 1, !dbg !6253
  br i1 %cmp1, label %if.then, label %if.end, !dbg !6254

if.then:                                          ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6255
  %9 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6255
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6255
  %11 = load i32, i32* %k, align 4, !dbg !6255
  %conv = sext i32 %11 to i64, !dbg !6255
  %call2 = call %union.tree_node* @build_int_cst(%union.tree_node* %10, i64 %conv), !dbg !6255
  %call3 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 68, %union.tree_node* %8, %union.tree_node* %9, %union.tree_node* %call2), !dbg !6255
  store %union.tree_node* %call3, %union.tree_node** %expr, align 8, !dbg !6256
  br label %if.end, !dbg !6257

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6258
  %call4 = call %union.tree_node* @create_tmp_var(%union.tree_node* %12, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.35, i64 0, i64 0)), !dbg !6259
  store %union.tree_node* %call4, %union.tree_node** %resvar, align 8, !dbg !6260
  %13 = load %union.tree_node*, %union.tree_node** %resvar, align 8, !dbg !6261
  %call5 = call zeroext i8 @add_referenced_var(%union.tree_node* %13), !dbg !6262
  %14 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6263
  %call6 = call %union.tree_node* @fold(%union.tree_node* %14), !dbg !6264
  %15 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts_to_insert.addr, align 8, !dbg !6265
  %16 = load %union.tree_node*, %union.tree_node** %resvar, align 8, !dbg !6266
  %call7 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %call6, %struct.gimple_seq_d** %15, i8 zeroext 1, %union.tree_node* %16), !dbg !6267
  ret %union.tree_node* %call7, !dbg !6268
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6269 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6272, metadata !DIExpression()), !dbg !6273
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6274
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !6275
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6275
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 1, !dbg !6276
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6276
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6277
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %3, i32 0, i32 3, !dbg !6278
  store %struct.ssa_use_operand_d* %2, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !6279
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6280
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !6281
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !6281
  ret %struct.ssa_use_operand_d* %5, !dbg !6282
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6283 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6284, metadata !DIExpression()), !dbg !6285
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6286
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !6287
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6287
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6288
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 2, !dbg !6289
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %iter_node, !dbg !6290
  %conv = zext i1 %cmp to i32, !dbg !6290
  %conv1 = trunc i32 %conv to i8, !dbg !6291
  ret i8 %conv1, !dbg !6292
}

declare dso_local void @propagate_value(%struct.ssa_use_operand_d*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6293 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6294, metadata !DIExpression()), !dbg !6295
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6296
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 3, !dbg !6297
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !6297
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6298
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !6299
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6300
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6301
  %call = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !6303
  %tobool = icmp ne i8 %call, 0, !dbg !6303
  br i1 %tobool, label %if.then, label %if.else, !dbg !6304

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6305
  br label %return, !dbg !6305

if.else:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6306
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !6308
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !6308
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !6309
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6309
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6310
  %next_imm_name2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 3, !dbg !6311
  store %struct.ssa_use_operand_d* %6, %struct.ssa_use_operand_d** %next_imm_name2, align 8, !dbg !6312
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6313
  %imm_use3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 0, !dbg !6314
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use3, align 8, !dbg !6314
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6315
  br label %return, !dbg !6315

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6316
  ret %struct.ssa_use_operand_d* %10, !dbg !6316
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !6317 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6320, metadata !DIExpression()), !dbg !6321
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6322, metadata !DIExpression()), !dbg !6323
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6324
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !6324
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 0, !dbg !6324
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6324
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6324
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6324

cond.true:                                        ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6324
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !6324
  %preds2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call1, i32 0, i32 0, !dbg !6324
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds2, align 8, !dbg !6324
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6324
  br label %cond.end, !dbg !6324

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6324

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6324
  %4 = load i64, i64* %i.addr, align 8, !dbg !6324
  %conv = trunc i64 %4 to i32, !dbg !6324
  %call3 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %conv), !dbg !6324
  ret %struct.edge_def* %call3, !dbg !6325
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !6326 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !6330, metadata !DIExpression()), !dbg !6331
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !6332, metadata !DIExpression()), !dbg !6331
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6331
  %call = call i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %0, i32 1), !dbg !6331
  %1 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6331
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %1, align 8, !dbg !6331
  %tobool = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !6331
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6331

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6331
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %3, align 8, !dbg !6331
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i32 0, i32 0, !dbg !6331
  br label %cond.end, !dbg !6331

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6331

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6331
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !6331
  %call1 = call %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond, %union.gimple_statement_d* %5), !dbg !6331
  ret %union.gimple_statement_d** %call1, !dbg !6331
}

declare dso_local %struct.basic_block_def** @get_loop_body(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6333 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6334, metadata !DIExpression()), !dbg !6335
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6336, metadata !DIExpression()), !dbg !6337
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6338, metadata !DIExpression()), !dbg !6339
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6340
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6341
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6342
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6343
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !6344
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6345
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6346
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6347
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6348
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6349
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6350
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6351
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6352
  ret void, !dbg !6353
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6354 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6357, metadata !DIExpression()), !dbg !6358
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6359
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6359
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !6360
  %conv = zext i1 %cmp to i32, !dbg !6360
  %conv1 = trunc i32 %conv to i8, !dbg !6361
  ret i8 %conv1, !dbg !6362
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6363 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6366, metadata !DIExpression()), !dbg !6367
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6368
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6368
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !6369
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6369
  ret %union.gimple_statement_d* %1, !dbg !6370
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @not_interesting_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !6371 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6374, metadata !DIExpression()), !dbg !6375
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6376
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6378
  %cmp = icmp eq i32 %call, 4, !dbg !6379
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6380

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6381
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6382
  %cmp2 = icmp eq i32 %call1, 3, !dbg !6383
  br i1 %cmp2, label %if.then, label %lor.lhs.false3, !dbg !6384

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6385
  %call4 = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !6386
  %cmp5 = icmp eq i32 %call4, 1, !dbg !6387
  br i1 %cmp5, label %if.then, label %lor.lhs.false6, !dbg !6388

lor.lhs.false6:                                   ; preds = %lor.lhs.false3
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6389
  %call7 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %3), !dbg !6390
  %conv = zext i8 %call7 to i32, !dbg !6390
  %tobool = icmp ne i32 %conv, 0, !dbg !6390
  br i1 %tobool, label %if.then, label %if.end, !dbg !6391

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false3, %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !6392
  br label %return, !dbg !6392

if.end:                                           ; preds = %lor.lhs.false6
  store i8 0, i8* %retval, align 1, !dbg !6393
  br label %return, !dbg !6393

return:                                           ; preds = %if.end, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !6394
  ret i8 %4, !dbg !6394
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @stmt_is_bumper_for_loop(%struct.loop* %loop, %union.gimple_statement_d* %stmt) #0 !dbg !6395 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.gimple_statement_d*, align 8
  %def = alloca %union.tree_node*, align 8
  %iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6398, metadata !DIExpression()), !dbg !6399
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6400, metadata !DIExpression()), !dbg !6401
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use, metadata !6402, metadata !DIExpression()), !dbg !6403
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !6404, metadata !DIExpression()), !dbg !6405
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %iter, metadata !6406, metadata !DIExpression()), !dbg !6407
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !6408, metadata !DIExpression()), !dbg !6409
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6410
  %call = call %union.tree_node* @single_ssa_tree_operand(%union.gimple_statement_d* %0, i32 2), !dbg !6410
  store %union.tree_node* %call, %union.tree_node** %def, align 8, !dbg !6411
  %1 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6412
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !6412
  br i1 %tobool, label %if.end, label %if.then, !dbg !6414

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6415
  br label %return, !dbg !6415

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6416
  %call1 = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %iter, %union.tree_node* %2), !dbg !6416
  store %struct.ssa_use_operand_d* %call1, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6416
  br label %for.cond, !dbg !6416

for.cond:                                         ; preds = %for.inc, %if.end
  %call2 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %iter), !dbg !6418
  %tobool3 = icmp ne i8 %call2, 0, !dbg !6418
  %lnot = xor i1 %tobool3, true, !dbg !6418
  br i1 %lnot, label %for.body, label %for.end, !dbg !6416

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6420
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 2, !dbg !6420
  %stmt4 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !6420
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt4, align 8, !dbg !6420
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %use, align 8, !dbg !6422
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use, align 8, !dbg !6423
  %call5 = call i32 @gimple_code(%union.gimple_statement_d* %5), !dbg !6425
  %cmp = icmp eq i32 %call5, 16, !dbg !6426
  br i1 %cmp, label %if.then6, label %if.end17, !dbg !6427

if.then6:                                         ; preds = %for.body
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6428
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use, align 8, !dbg !6431
  %8 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6432
  %call7 = call zeroext i8 @phi_loop_edge_uses_def(%struct.loop* %6, %union.gimple_statement_d* %7, %union.tree_node* %8), !dbg !6433
  %tobool8 = icmp ne i8 %call7, 0, !dbg !6433
  br i1 %tobool8, label %if.then9, label %if.end16, !dbg !6434

if.then9:                                         ; preds = %if.then6
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6435
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use, align 8, !dbg !6437
  %call10 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %10), !dbg !6437
  %call11 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call10), !dbg !6437
  %call12 = call zeroext i8 @stmt_uses_phi_result(%union.gimple_statement_d* %9, %union.tree_node* %call11), !dbg !6438
  %tobool13 = icmp ne i8 %call12, 0, !dbg !6438
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !6439

if.then14:                                        ; preds = %if.then9
  store i8 1, i8* %retval, align 1, !dbg !6440
  br label %return, !dbg !6440

if.end15:                                         ; preds = %if.then9
  br label %if.end16, !dbg !6441

if.end16:                                         ; preds = %if.end15, %if.then6
  br label %if.end17, !dbg !6442

if.end17:                                         ; preds = %if.end16, %for.body
  br label %for.inc, !dbg !6443

for.inc:                                          ; preds = %if.end17
  %call18 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %iter), !dbg !6418
  store %struct.ssa_use_operand_d* %call18, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6418
  br label %for.cond, !dbg !6418, !llvm.loop !6444

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !6446
  br label %return, !dbg !6446

return:                                           ; preds = %for.end, %if.then14, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !6447
  ret i8 %11, !dbg !6447
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !6448 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !6452, metadata !DIExpression()), !dbg !6453
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6454
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !6455
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6455
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !6456
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !6456
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6457
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !6458
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !6459
  ret void, !dbg !6460
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @lambda_transform_legal_p(%struct.lambda_trans_matrix_s* %trans, i32 %nb_loops, %struct.VEC_ddr_p_heap* %dependence_relations) #0 !dbg !6461 {
entry:
  %retval = alloca i8, align 1
  %trans.addr = alloca %struct.lambda_trans_matrix_s*, align 8
  %nb_loops.addr = alloca i32, align 4
  %dependence_relations.addr = alloca %struct.VEC_ddr_p_heap*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %distres = alloca i32*, align 8
  %ddr = alloca %struct.data_dependence_relation*, align 8
  store %struct.lambda_trans_matrix_s* %trans, %struct.lambda_trans_matrix_s** %trans.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_trans_matrix_s** %trans.addr, metadata !6476, metadata !DIExpression()), !dbg !6477
  store i32 %nb_loops, i32* %nb_loops.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_loops.addr, metadata !6478, metadata !DIExpression()), !dbg !6479
  store %struct.VEC_ddr_p_heap* %dependence_relations, %struct.VEC_ddr_p_heap** %dependence_relations.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap** %dependence_relations.addr, metadata !6480, metadata !DIExpression()), !dbg !6481
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6482, metadata !DIExpression()), !dbg !6483
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6484, metadata !DIExpression()), !dbg !6485
  call void @llvm.dbg.declare(metadata i32** %distres, metadata !6486, metadata !DIExpression()), !dbg !6487
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr, metadata !6488, metadata !DIExpression()), !dbg !6489
  %0 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %trans.addr, align 8, !dbg !6490
  %colsize = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %0, i32 0, i32 2, !dbg !6490
  %1 = load i32, i32* %colsize, align 4, !dbg !6490
  %2 = load i32, i32* %nb_loops.addr, align 4, !dbg !6490
  %cmp = icmp eq i32 %1, %2, !dbg !6490
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !6490

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %trans.addr, align 8, !dbg !6490
  %rowsize = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %3, i32 0, i32 1, !dbg !6490
  %4 = load i32, i32* %rowsize, align 8, !dbg !6490
  %5 = load i32, i32* %nb_loops.addr, align 4, !dbg !6490
  %cmp1 = icmp eq i32 %4, %5, !dbg !6490
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !6490

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2608, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6490
  br label %cond.end, !dbg !6490

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6490

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6490
  %6 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations.addr, align 8, !dbg !6491
  %tobool = icmp ne %struct.VEC_ddr_p_heap* %6, null, !dbg !6491
  br i1 %tobool, label %cond.true2, label %cond.false3, !dbg !6491

cond.true2:                                       ; preds = %cond.end
  %7 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations.addr, align 8, !dbg !6491
  %base = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %7, i32 0, i32 0, !dbg !6491
  br label %cond.end4, !dbg !6491

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !6491

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi %struct.VEC_ddr_p_base* [ %base, %cond.true2 ], [ null, %cond.false3 ], !dbg !6491
  %call = call i32 @VEC_ddr_p_base_length(%struct.VEC_ddr_p_base* %cond5), !dbg !6491
  %cmp6 = icmp eq i32 %call, 0, !dbg !6493
  br i1 %cmp6, label %if.then, label %if.end, !dbg !6494

if.then:                                          ; preds = %cond.end4
  store i8 1, i8* %retval, align 1, !dbg !6495
  br label %return, !dbg !6495

if.end:                                           ; preds = %cond.end4
  %8 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations.addr, align 8, !dbg !6496
  %tobool7 = icmp ne %struct.VEC_ddr_p_heap* %8, null, !dbg !6496
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !6496

cond.true8:                                       ; preds = %if.end
  %9 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations.addr, align 8, !dbg !6496
  %base9 = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %9, i32 0, i32 0, !dbg !6496
  br label %cond.end11, !dbg !6496

cond.false10:                                     ; preds = %if.end
  br label %cond.end11, !dbg !6496

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_ddr_p_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !6496
  %call13 = call %struct.data_dependence_relation* @VEC_ddr_p_base_index(%struct.VEC_ddr_p_base* %cond12, i32 0), !dbg !6496
  store %struct.data_dependence_relation* %call13, %struct.data_dependence_relation** %ddr, align 8, !dbg !6497
  %10 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !6498
  %cmp14 = icmp eq %struct.data_dependence_relation* %10, null, !dbg !6500
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !6501

if.then15:                                        ; preds = %cond.end11
  store i8 1, i8* %retval, align 1, !dbg !6502
  br label %return, !dbg !6502

if.end16:                                         ; preds = %cond.end11
  %11 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !6503
  %are_dependent = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %11, i32 0, i32 2, !dbg !6503
  %12 = load %union.tree_node*, %union.tree_node** %are_dependent, align 8, !dbg !6503
  %13 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !6505
  %cmp17 = icmp eq %union.tree_node* %12, %13, !dbg !6506
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !6507

if.then18:                                        ; preds = %if.end16
  store i8 0, i8* %retval, align 1, !dbg !6508
  br label %return, !dbg !6508

if.end19:                                         ; preds = %if.end16
  %14 = load i32, i32* %nb_loops.addr, align 4, !dbg !6509
  %call20 = call i32* @lambda_vector_new(i32 %14), !dbg !6510
  store i32* %call20, i32** %distres, align 8, !dbg !6511
  store i32 0, i32* %i, align 4, !dbg !6512
  br label %for.cond, !dbg !6514

for.cond:                                         ; preds = %for.inc81, %if.end19
  %15 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations.addr, align 8, !dbg !6515
  %tobool21 = icmp ne %struct.VEC_ddr_p_heap* %15, null, !dbg !6515
  br i1 %tobool21, label %cond.true22, label %cond.false24, !dbg !6515

cond.true22:                                      ; preds = %for.cond
  %16 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations.addr, align 8, !dbg !6515
  %base23 = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %16, i32 0, i32 0, !dbg !6515
  br label %cond.end25, !dbg !6515

cond.false24:                                     ; preds = %for.cond
  br label %cond.end25, !dbg !6515

cond.end25:                                       ; preds = %cond.false24, %cond.true22
  %cond26 = phi %struct.VEC_ddr_p_base* [ %base23, %cond.true22 ], [ null, %cond.false24 ], !dbg !6515
  %17 = load i32, i32* %i, align 4, !dbg !6515
  %call27 = call i32 @VEC_ddr_p_base_iterate(%struct.VEC_ddr_p_base* %cond26, i32 %17, %struct.data_dependence_relation** %ddr), !dbg !6515
  %tobool28 = icmp ne i32 %call27, 0, !dbg !6517
  br i1 %tobool28, label %for.body, label %for.end83, !dbg !6517

for.body:                                         ; preds = %cond.end25
  %18 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !6518
  %are_dependent29 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %18, i32 0, i32 2, !dbg !6518
  %19 = load %union.tree_node*, %union.tree_node** %are_dependent29, align 8, !dbg !6518
  %20 = load %union.tree_node*, %union.tree_node** @chrec_known, align 8, !dbg !6521
  %cmp30 = icmp eq %union.tree_node* %19, %20, !dbg !6522
  br i1 %cmp30, label %if.then36, label %lor.lhs.false, !dbg !6523

lor.lhs.false:                                    ; preds = %for.body
  %21 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !6524
  %a = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %21, i32 0, i32 0, !dbg !6524
  %22 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !6524
  %is_read = getelementptr inbounds %struct.data_reference, %struct.data_reference* %22, i32 0, i32 3, !dbg !6524
  %23 = load i8, i8* %is_read, align 8, !dbg !6524
  %conv = zext i8 %23 to i32, !dbg !6524
  %tobool31 = icmp ne i32 %conv, 0, !dbg !6524
  br i1 %tobool31, label %land.lhs.true32, label %if.end37, !dbg !6525

land.lhs.true32:                                  ; preds = %lor.lhs.false
  %24 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !6526
  %b = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %24, i32 0, i32 1, !dbg !6526
  %25 = load %struct.data_reference*, %struct.data_reference** %b, align 8, !dbg !6526
  %is_read33 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %25, i32 0, i32 3, !dbg !6526
  %26 = load i8, i8* %is_read33, align 8, !dbg !6526
  %conv34 = zext i8 %26 to i32, !dbg !6526
  %tobool35 = icmp ne i32 %conv34, 0, !dbg !6526
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !6527

if.then36:                                        ; preds = %land.lhs.true32, %for.body
  br label %for.inc81, !dbg !6528

if.end37:                                         ; preds = %land.lhs.true32, %lor.lhs.false
  %27 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !6529
  %are_dependent38 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %27, i32 0, i32 2, !dbg !6529
  %28 = load %union.tree_node*, %union.tree_node** %are_dependent38, align 8, !dbg !6529
  %29 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !6531
  %cmp39 = icmp eq %union.tree_node* %28, %29, !dbg !6532
  br i1 %cmp39, label %if.then41, label %if.end42, !dbg !6533

if.then41:                                        ; preds = %if.end37
  store i8 0, i8* %retval, align 1, !dbg !6534
  br label %return, !dbg !6534

if.end42:                                         ; preds = %if.end37
  %30 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !6535
  %dist_vects = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %30, i32 0, i32 6, !dbg !6535
  %31 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects, align 8, !dbg !6535
  %tobool43 = icmp ne %struct.VEC_lambda_vector_heap* %31, null, !dbg !6535
  br i1 %tobool43, label %cond.true44, label %cond.false47, !dbg !6535

cond.true44:                                      ; preds = %if.end42
  %32 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !6535
  %dist_vects45 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %32, i32 0, i32 6, !dbg !6535
  %33 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects45, align 8, !dbg !6535
  %base46 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %33, i32 0, i32 0, !dbg !6535
  br label %cond.end48, !dbg !6535

cond.false47:                                     ; preds = %if.end42
  br label %cond.end48, !dbg !6535

cond.end48:                                       ; preds = %cond.false47, %cond.true44
  %cond49 = phi %struct.VEC_lambda_vector_base* [ %base46, %cond.true44 ], [ null, %cond.false47 ], !dbg !6535
  %call50 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond49), !dbg !6535
  %cmp51 = icmp eq i32 %call50, 0, !dbg !6537
  br i1 %cmp51, label %if.then53, label %if.end54, !dbg !6538

if.then53:                                        ; preds = %cond.end48
  store i8 0, i8* %retval, align 1, !dbg !6539
  br label %return, !dbg !6539

if.end54:                                         ; preds = %cond.end48
  store i32 0, i32* %j, align 4, !dbg !6540
  br label %for.cond55, !dbg !6542

for.cond55:                                       ; preds = %for.inc, %if.end54
  %34 = load i32, i32* %j, align 4, !dbg !6543
  %35 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !6545
  %dist_vects56 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %35, i32 0, i32 6, !dbg !6545
  %36 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects56, align 8, !dbg !6545
  %tobool57 = icmp ne %struct.VEC_lambda_vector_heap* %36, null, !dbg !6545
  br i1 %tobool57, label %cond.true58, label %cond.false61, !dbg !6545

cond.true58:                                      ; preds = %for.cond55
  %37 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !6545
  %dist_vects59 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %37, i32 0, i32 6, !dbg !6545
  %38 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects59, align 8, !dbg !6545
  %base60 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %38, i32 0, i32 0, !dbg !6545
  br label %cond.end62, !dbg !6545

cond.false61:                                     ; preds = %for.cond55
  br label %cond.end62, !dbg !6545

cond.end62:                                       ; preds = %cond.false61, %cond.true58
  %cond63 = phi %struct.VEC_lambda_vector_base* [ %base60, %cond.true58 ], [ null, %cond.false61 ], !dbg !6545
  %call64 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond63), !dbg !6545
  %cmp65 = icmp ult i32 %34, %call64, !dbg !6546
  br i1 %cmp65, label %for.body67, label %for.end, !dbg !6547

for.body67:                                       ; preds = %cond.end62
  %39 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %trans.addr, align 8, !dbg !6548
  %matrix = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %39, i32 0, i32 0, !dbg !6548
  %40 = load i32**, i32*** %matrix, align 8, !dbg !6548
  %41 = load i32, i32* %nb_loops.addr, align 4, !dbg !6550
  %42 = load i32, i32* %nb_loops.addr, align 4, !dbg !6551
  %43 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !6552
  %dist_vects68 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %43, i32 0, i32 6, !dbg !6552
  %44 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects68, align 8, !dbg !6552
  %tobool69 = icmp ne %struct.VEC_lambda_vector_heap* %44, null, !dbg !6552
  br i1 %tobool69, label %cond.true70, label %cond.false73, !dbg !6552

cond.true70:                                      ; preds = %for.body67
  %45 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !6552
  %dist_vects71 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %45, i32 0, i32 6, !dbg !6552
  %46 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects71, align 8, !dbg !6552
  %base72 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %46, i32 0, i32 0, !dbg !6552
  br label %cond.end74, !dbg !6552

cond.false73:                                     ; preds = %for.body67
  br label %cond.end74, !dbg !6552

cond.end74:                                       ; preds = %cond.false73, %cond.true70
  %cond75 = phi %struct.VEC_lambda_vector_base* [ %base72, %cond.true70 ], [ null, %cond.false73 ], !dbg !6552
  %47 = load i32, i32* %j, align 4, !dbg !6552
  %call76 = call i32* @VEC_lambda_vector_base_index(%struct.VEC_lambda_vector_base* %cond75, i32 %47), !dbg !6552
  %48 = load i32*, i32** %distres, align 8, !dbg !6553
  call void @lambda_matrix_vector_mult(i32** %40, i32 %41, i32 %42, i32* %call76, i32* %48), !dbg !6554
  %49 = load i32*, i32** %distres, align 8, !dbg !6555
  %50 = load i32, i32* %nb_loops.addr, align 4, !dbg !6557
  %call77 = call zeroext i8 @lambda_vector_lexico_pos(i32* %49, i32 %50), !dbg !6558
  %tobool78 = icmp ne i8 %call77, 0, !dbg !6558
  br i1 %tobool78, label %if.end80, label %if.then79, !dbg !6559

if.then79:                                        ; preds = %cond.end74
  store i8 0, i8* %retval, align 1, !dbg !6560
  br label %return, !dbg !6560

if.end80:                                         ; preds = %cond.end74
  br label %for.inc, !dbg !6561

for.inc:                                          ; preds = %if.end80
  %51 = load i32, i32* %j, align 4, !dbg !6562
  %inc = add i32 %51, 1, !dbg !6562
  store i32 %inc, i32* %j, align 4, !dbg !6562
  br label %for.cond55, !dbg !6563, !llvm.loop !6564

for.end:                                          ; preds = %cond.end62
  br label %for.inc81, !dbg !6566

for.inc81:                                        ; preds = %for.end, %if.then36
  %52 = load i32, i32* %i, align 4, !dbg !6567
  %inc82 = add i32 %52, 1, !dbg !6567
  store i32 %inc82, i32* %i, align 4, !dbg !6567
  br label %for.cond, !dbg !6568, !llvm.loop !6569

for.end83:                                        ; preds = %cond.end25
  store i8 1, i8* %retval, align 1, !dbg !6571
  br label %return, !dbg !6571

return:                                           ; preds = %for.end83, %if.then79, %if.then53, %if.then41, %if.then18, %if.then15, %if.then
  %53 = load i8, i8* %retval, align 1, !dbg !6572
  ret i8 %53, !dbg !6572
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ddr_p_base_length(%struct.VEC_ddr_p_base* %vec_) #0 !dbg !6573 {
entry:
  %vec_.addr = alloca %struct.VEC_ddr_p_base*, align 8
  store %struct.VEC_ddr_p_base* %vec_, %struct.VEC_ddr_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_base** %vec_.addr, metadata !6578, metadata !DIExpression()), !dbg !6579
  %0 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !6579
  %tobool = icmp ne %struct.VEC_ddr_p_base* %0, null, !dbg !6579
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6579

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !6579
  %num = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %1, i32 0, i32 0, !dbg !6579
  %2 = load i32, i32* %num, align 8, !dbg !6579
  br label %cond.end, !dbg !6579

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6579

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6579
  ret i32 %cond, !dbg !6579
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.data_dependence_relation* @VEC_ddr_p_base_index(%struct.VEC_ddr_p_base* %vec_, i32 %ix_) #0 !dbg !6580 {
entry:
  %vec_.addr = alloca %struct.VEC_ddr_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_ddr_p_base* %vec_, %struct.VEC_ddr_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_base** %vec_.addr, metadata !6583, metadata !DIExpression()), !dbg !6584
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6585, metadata !DIExpression()), !dbg !6584
  %0 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !6584
  %tobool = icmp ne %struct.VEC_ddr_p_base* %0, null, !dbg !6584
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6584

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6584
  %2 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !6584
  %num = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %2, i32 0, i32 0, !dbg !6584
  %3 = load i32, i32* %num, align 8, !dbg !6584
  %cmp = icmp ult i32 %1, %3, !dbg !6584
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6586
  %land.ext = zext i1 %4 to i32, !dbg !6584
  %5 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !6584
  %vec = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %5, i32 0, i32 2, !dbg !6584
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6584
  %idxprom = zext i32 %6 to i64, !dbg !6584
  %arrayidx = getelementptr inbounds [1 x %struct.data_dependence_relation*], [1 x %struct.data_dependence_relation*]* %vec, i64 0, i64 %idxprom, !dbg !6584
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %arrayidx, align 8, !dbg !6584
  ret %struct.data_dependence_relation* %7, !dbg !6584
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ddr_p_base_iterate(%struct.VEC_ddr_p_base* %vec_, i32 %ix_, %struct.data_dependence_relation** %ptr) #0 !dbg !6587 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_ddr_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.data_dependence_relation**, align 8
  store %struct.VEC_ddr_p_base* %vec_, %struct.VEC_ddr_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_base** %vec_.addr, metadata !6591, metadata !DIExpression()), !dbg !6592
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6593, metadata !DIExpression()), !dbg !6592
  store %struct.data_dependence_relation** %ptr, %struct.data_dependence_relation*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation*** %ptr.addr, metadata !6594, metadata !DIExpression()), !dbg !6592
  %0 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !6595
  %tobool = icmp ne %struct.VEC_ddr_p_base* %0, null, !dbg !6595
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6595

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6595
  %2 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !6595
  %num = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %2, i32 0, i32 0, !dbg !6595
  %3 = load i32, i32* %num, align 8, !dbg !6595
  %cmp = icmp ult i32 %1, %3, !dbg !6595
  br i1 %cmp, label %if.then, label %if.else, !dbg !6592

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !6597
  %vec = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %4, i32 0, i32 2, !dbg !6597
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6597
  %idxprom = zext i32 %5 to i64, !dbg !6597
  %arrayidx = getelementptr inbounds [1 x %struct.data_dependence_relation*], [1 x %struct.data_dependence_relation*]* %vec, i64 0, i64 %idxprom, !dbg !6597
  %6 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %arrayidx, align 8, !dbg !6597
  %7 = load %struct.data_dependence_relation**, %struct.data_dependence_relation*** %ptr.addr, align 8, !dbg !6597
  store %struct.data_dependence_relation* %6, %struct.data_dependence_relation** %7, align 8, !dbg !6597
  store i32 1, i32* %retval, align 4, !dbg !6597
  br label %return, !dbg !6597

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.data_dependence_relation**, %struct.data_dependence_relation*** %ptr.addr, align 8, !dbg !6599
  store %struct.data_dependence_relation* null, %struct.data_dependence_relation** %8, align 8, !dbg !6599
  store i32 0, i32* %retval, align 4, !dbg !6599
  br label %return, !dbg !6599

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6592
  ret i32 %9, !dbg !6592
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %vec_) #0 !dbg !6601 {
entry:
  %vec_.addr = alloca %struct.VEC_lambda_vector_base*, align 8
  store %struct.VEC_lambda_vector_base* %vec_, %struct.VEC_lambda_vector_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_base** %vec_.addr, metadata !6606, metadata !DIExpression()), !dbg !6607
  %0 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !6607
  %tobool = icmp ne %struct.VEC_lambda_vector_base* %0, null, !dbg !6607
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6607

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !6607
  %num = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %1, i32 0, i32 0, !dbg !6607
  %2 = load i32, i32* %num, align 8, !dbg !6607
  br label %cond.end, !dbg !6607

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6607

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6607
  ret i32 %cond, !dbg !6607
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_lambda_vector_base_index(%struct.VEC_lambda_vector_base* %vec_, i32 %ix_) #0 !dbg !6608 {
entry:
  %vec_.addr = alloca %struct.VEC_lambda_vector_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_lambda_vector_base* %vec_, %struct.VEC_lambda_vector_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_base** %vec_.addr, metadata !6611, metadata !DIExpression()), !dbg !6612
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6613, metadata !DIExpression()), !dbg !6612
  %0 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !6612
  %tobool = icmp ne %struct.VEC_lambda_vector_base* %0, null, !dbg !6612
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6612

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6612
  %2 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !6612
  %num = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %2, i32 0, i32 0, !dbg !6612
  %3 = load i32, i32* %num, align 8, !dbg !6612
  %cmp = icmp ult i32 %1, %3, !dbg !6612
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6614
  %land.ext = zext i1 %4 to i32, !dbg !6612
  %5 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !6612
  %vec = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %5, i32 0, i32 2, !dbg !6612
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6612
  %idxprom = zext i32 %6 to i64, !dbg !6612
  %arrayidx = getelementptr inbounds [1 x i32*], [1 x i32*]* %vec, i64 0, i64 %idxprom, !dbg !6612
  %7 = load i32*, i32** %arrayidx, align 8, !dbg !6612
  ret i32* %7, !dbg !6612
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @lambda_vector_lexico_pos(i32* %v, i32 %n) #0 !dbg !6615 {
entry:
  %retval = alloca i8, align 1
  %v.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %v, i32** %v.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %v.addr, metadata !6618, metadata !DIExpression()), !dbg !6619
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !6620, metadata !DIExpression()), !dbg !6621
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6622, metadata !DIExpression()), !dbg !6623
  store i32 0, i32* %i, align 4, !dbg !6624
  br label %for.cond, !dbg !6626

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !6627
  %1 = load i32, i32* %n.addr, align 4, !dbg !6629
  %cmp = icmp ult i32 %0, %1, !dbg !6630
  br i1 %cmp, label %for.body, label %for.end, !dbg !6631

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %v.addr, align 8, !dbg !6632
  %3 = load i32, i32* %i, align 4, !dbg !6635
  %idxprom = zext i32 %3 to i64, !dbg !6632
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !6632
  %4 = load i32, i32* %arrayidx, align 4, !dbg !6632
  %cmp1 = icmp eq i32 %4, 0, !dbg !6636
  br i1 %cmp1, label %if.then, label %if.end, !dbg !6637

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !6638

if.end:                                           ; preds = %for.body
  %5 = load i32*, i32** %v.addr, align 8, !dbg !6639
  %6 = load i32, i32* %i, align 4, !dbg !6641
  %idxprom2 = zext i32 %6 to i64, !dbg !6639
  %arrayidx3 = getelementptr inbounds i32, i32* %5, i64 %idxprom2, !dbg !6639
  %7 = load i32, i32* %arrayidx3, align 4, !dbg !6639
  %cmp4 = icmp slt i32 %7, 0, !dbg !6642
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !6643

if.then5:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !6644
  br label %return, !dbg !6644

if.end6:                                          ; preds = %if.end
  %8 = load i32*, i32** %v.addr, align 8, !dbg !6645
  %9 = load i32, i32* %i, align 4, !dbg !6647
  %idxprom7 = zext i32 %9 to i64, !dbg !6645
  %arrayidx8 = getelementptr inbounds i32, i32* %8, i64 %idxprom7, !dbg !6645
  %10 = load i32, i32* %arrayidx8, align 4, !dbg !6645
  %cmp9 = icmp sgt i32 %10, 0, !dbg !6648
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !6649

if.then10:                                        ; preds = %if.end6
  store i8 1, i8* %retval, align 1, !dbg !6650
  br label %return, !dbg !6650

if.end11:                                         ; preds = %if.end6
  br label %for.inc, !dbg !6651

for.inc:                                          ; preds = %if.end11, %if.then
  %11 = load i32, i32* %i, align 4, !dbg !6652
  %inc = add i32 %11, 1, !dbg !6652
  store i32 %inc, i32* %i, align 4, !dbg !6652
  br label %for.cond, !dbg !6653, !llvm.loop !6654

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !6656
  br label %return, !dbg !6656

return:                                           ; preds = %for.end, %if.then10, %if.then5
  %12 = load i8, i8* %retval, align 1, !dbg !6657
  ret i8 %12, !dbg !6657
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @lambda_collect_parameters(%struct.VEC_data_reference_p_heap* %datarefs, %struct.VEC_tree_heap** %parameters) #0 !dbg !6658 {
entry:
  %datarefs.addr = alloca %struct.VEC_data_reference_p_heap*, align 8
  %parameters.addr = alloca %struct.VEC_tree_heap**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %parameter_set = alloca %struct.pointer_set_t*, align 8
  %data_reference = alloca %struct.data_reference*, align 8
  store %struct.VEC_data_reference_p_heap* %datarefs, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap** %datarefs.addr, metadata !6673, metadata !DIExpression()), !dbg !6674
  store %struct.VEC_tree_heap** %parameters, %struct.VEC_tree_heap*** %parameters.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %parameters.addr, metadata !6675, metadata !DIExpression()), !dbg !6676
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6677, metadata !DIExpression()), !dbg !6678
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6679, metadata !DIExpression()), !dbg !6680
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %parameter_set, metadata !6681, metadata !DIExpression()), !dbg !6684
  %call = call %struct.pointer_set_t* @pointer_set_create(), !dbg !6685
  store %struct.pointer_set_t* %call, %struct.pointer_set_t** %parameter_set, align 8, !dbg !6684
  call void @llvm.dbg.declare(metadata %struct.data_reference** %data_reference, metadata !6686, metadata !DIExpression()), !dbg !6687
  store i32 0, i32* %i, align 4, !dbg !6688
  br label %for.cond, !dbg !6690

for.cond:                                         ; preds = %for.inc25, %entry
  %0 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !6691
  %tobool = icmp ne %struct.VEC_data_reference_p_heap* %0, null, !dbg !6691
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6691

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !6691
  %base = getelementptr inbounds %struct.VEC_data_reference_p_heap, %struct.VEC_data_reference_p_heap* %1, i32 0, i32 0, !dbg !6691
  br label %cond.end, !dbg !6691

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !6691

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_data_reference_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6691
  %2 = load i32, i32* %i, align 4, !dbg !6691
  %call1 = call i32 @VEC_data_reference_p_base_iterate(%struct.VEC_data_reference_p_base* %cond, i32 %2, %struct.data_reference** %data_reference), !dbg !6691
  %tobool2 = icmp ne i32 %call1, 0, !dbg !6693
  br i1 %tobool2, label %for.body, label %for.end27, !dbg !6693

for.body:                                         ; preds = %cond.end
  store i32 0, i32* %j, align 4, !dbg !6694
  br label %for.cond3, !dbg !6696

for.cond3:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4, !dbg !6697
  %4 = load %struct.data_reference*, %struct.data_reference** %data_reference, align 8, !dbg !6699
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %4, i32 0, i32 5, !dbg !6699
  %access_fns = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 1, !dbg !6699
  %5 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns, align 8, !dbg !6699
  %tobool4 = icmp ne %struct.VEC_tree_heap* %5, null, !dbg !6699
  br i1 %tobool4, label %cond.true5, label %cond.false9, !dbg !6699

cond.true5:                                       ; preds = %for.cond3
  %6 = load %struct.data_reference*, %struct.data_reference** %data_reference, align 8, !dbg !6699
  %indices6 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %6, i32 0, i32 5, !dbg !6699
  %access_fns7 = getelementptr inbounds %struct.indices, %struct.indices* %indices6, i32 0, i32 1, !dbg !6699
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns7, align 8, !dbg !6699
  %base8 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %7, i32 0, i32 0, !dbg !6699
  br label %cond.end10, !dbg !6699

cond.false9:                                      ; preds = %for.cond3
  br label %cond.end10, !dbg !6699

cond.end10:                                       ; preds = %cond.false9, %cond.true5
  %cond11 = phi %struct.VEC_tree_base* [ %base8, %cond.true5 ], [ null, %cond.false9 ], !dbg !6699
  %call12 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond11), !dbg !6699
  %cmp = icmp ult i32 %3, %call12, !dbg !6700
  br i1 %cmp, label %for.body13, label %for.end, !dbg !6701

for.body13:                                       ; preds = %cond.end10
  %8 = load %struct.data_reference*, %struct.data_reference** %data_reference, align 8, !dbg !6702
  %indices14 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %8, i32 0, i32 5, !dbg !6702
  %access_fns15 = getelementptr inbounds %struct.indices, %struct.indices* %indices14, i32 0, i32 1, !dbg !6702
  %9 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns15, align 8, !dbg !6702
  %tobool16 = icmp ne %struct.VEC_tree_heap* %9, null, !dbg !6702
  br i1 %tobool16, label %cond.true17, label %cond.false21, !dbg !6702

cond.true17:                                      ; preds = %for.body13
  %10 = load %struct.data_reference*, %struct.data_reference** %data_reference, align 8, !dbg !6702
  %indices18 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %10, i32 0, i32 5, !dbg !6702
  %access_fns19 = getelementptr inbounds %struct.indices, %struct.indices* %indices18, i32 0, i32 1, !dbg !6702
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns19, align 8, !dbg !6702
  %base20 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %11, i32 0, i32 0, !dbg !6702
  br label %cond.end22, !dbg !6702

cond.false21:                                     ; preds = %for.body13
  br label %cond.end22, !dbg !6702

cond.end22:                                       ; preds = %cond.false21, %cond.true17
  %cond23 = phi %struct.VEC_tree_base* [ %base20, %cond.true17 ], [ null, %cond.false21 ], !dbg !6702
  %12 = load i32, i32* %j, align 4, !dbg !6702
  %call24 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond23, i32 %12), !dbg !6702
  %13 = load %struct.pointer_set_t*, %struct.pointer_set_t** %parameter_set, align 8, !dbg !6703
  %14 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %parameters.addr, align 8, !dbg !6704
  call void @lambda_collect_parameters_from_af(%union.tree_node* %call24, %struct.pointer_set_t* %13, %struct.VEC_tree_heap** %14), !dbg !6705
  br label %for.inc, !dbg !6705

for.inc:                                          ; preds = %cond.end22
  %15 = load i32, i32* %j, align 4, !dbg !6706
  %inc = add i32 %15, 1, !dbg !6706
  store i32 %inc, i32* %j, align 4, !dbg !6706
  br label %for.cond3, !dbg !6707, !llvm.loop !6708

for.end:                                          ; preds = %cond.end10
  br label %for.inc25, !dbg !6709

for.inc25:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4, !dbg !6710
  %inc26 = add i32 %16, 1, !dbg !6710
  store i32 %inc26, i32* %i, align 4, !dbg !6710
  br label %for.cond, !dbg !6711, !llvm.loop !6712

for.end27:                                        ; preds = %cond.end
  %17 = load %struct.pointer_set_t*, %struct.pointer_set_t** %parameter_set, align 8, !dbg !6714
  call void @pointer_set_destroy(%struct.pointer_set_t* %17), !dbg !6715
  ret void, !dbg !6716
}

declare dso_local %struct.pointer_set_t* @pointer_set_create() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_data_reference_p_base_iterate(%struct.VEC_data_reference_p_base* %vec_, i32 %ix_, %struct.data_reference** %ptr) #0 !dbg !6717 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_data_reference_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.data_reference**, align 8
  store %struct.VEC_data_reference_p_base* %vec_, %struct.VEC_data_reference_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_base** %vec_.addr, metadata !6723, metadata !DIExpression()), !dbg !6724
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6725, metadata !DIExpression()), !dbg !6724
  store %struct.data_reference** %ptr, %struct.data_reference*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference*** %ptr.addr, metadata !6726, metadata !DIExpression()), !dbg !6724
  %0 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !6727
  %tobool = icmp ne %struct.VEC_data_reference_p_base* %0, null, !dbg !6727
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6727

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6727
  %2 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !6727
  %num = getelementptr inbounds %struct.VEC_data_reference_p_base, %struct.VEC_data_reference_p_base* %2, i32 0, i32 0, !dbg !6727
  %3 = load i32, i32* %num, align 8, !dbg !6727
  %cmp = icmp ult i32 %1, %3, !dbg !6727
  br i1 %cmp, label %if.then, label %if.else, !dbg !6724

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !6729
  %vec = getelementptr inbounds %struct.VEC_data_reference_p_base, %struct.VEC_data_reference_p_base* %4, i32 0, i32 2, !dbg !6729
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6729
  %idxprom = zext i32 %5 to i64, !dbg !6729
  %arrayidx = getelementptr inbounds [1 x %struct.data_reference*], [1 x %struct.data_reference*]* %vec, i64 0, i64 %idxprom, !dbg !6729
  %6 = load %struct.data_reference*, %struct.data_reference** %arrayidx, align 8, !dbg !6729
  %7 = load %struct.data_reference**, %struct.data_reference*** %ptr.addr, align 8, !dbg !6729
  store %struct.data_reference* %6, %struct.data_reference** %7, align 8, !dbg !6729
  store i32 1, i32* %retval, align 4, !dbg !6729
  br label %return, !dbg !6729

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.data_reference**, %struct.data_reference*** %ptr.addr, align 8, !dbg !6731
  store %struct.data_reference* null, %struct.data_reference** %8, align 8, !dbg !6731
  store i32 0, i32* %retval, align 4, !dbg !6731
  br label %return, !dbg !6731

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6724
  ret i32 %9, !dbg !6724
}

; Function Attrs: noinline nounwind uwtable
define internal void @lambda_collect_parameters_from_af(%union.tree_node* %access_function, %struct.pointer_set_t* %param_set, %struct.VEC_tree_heap** %parameters) #0 !dbg !6733 {
entry:
  %access_function.addr = alloca %union.tree_node*, align 8
  %param_set.addr = alloca %struct.pointer_set_t*, align 8
  %parameters.addr = alloca %struct.VEC_tree_heap**, align 8
  %i = alloca i32, align 4
  %num_operands = alloca i32, align 4
  store %union.tree_node* %access_function, %union.tree_node** %access_function.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %access_function.addr, metadata !6736, metadata !DIExpression()), !dbg !6737
  store %struct.pointer_set_t* %param_set, %struct.pointer_set_t** %param_set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %param_set.addr, metadata !6738, metadata !DIExpression()), !dbg !6739
  store %struct.VEC_tree_heap** %parameters, %struct.VEC_tree_heap*** %parameters.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %parameters.addr, metadata !6740, metadata !DIExpression()), !dbg !6741
  %0 = load %union.tree_node*, %union.tree_node** %access_function.addr, align 8, !dbg !6742
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !6744
  br i1 %cmp, label %if.then, label %if.end, !dbg !6745

if.then:                                          ; preds = %entry
  br label %if.end8, !dbg !6746

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %access_function.addr, align 8, !dbg !6747
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6747
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6747
  %bf.load = load i64, i64* %2, align 8, !dbg !6747
  %bf.clear = and i64 %bf.load, 65535, !dbg !6747
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6747
  %cmp1 = icmp eq i32 %bf.cast, 141, !dbg !6749
  br i1 %cmp1, label %land.lhs.true, label %if.else, !dbg !6750

land.lhs.true:                                    ; preds = %if.end
  %3 = load %struct.pointer_set_t*, %struct.pointer_set_t** %param_set.addr, align 8, !dbg !6751
  %4 = load %union.tree_node*, %union.tree_node** %access_function.addr, align 8, !dbg !6752
  %5 = bitcast %union.tree_node* %4 to i8*, !dbg !6752
  %call = call i32 @pointer_set_contains(%struct.pointer_set_t* %3, i8* %5), !dbg !6753
  %cmp2 = icmp eq i32 %call, 0, !dbg !6754
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !6755

if.then3:                                         ; preds = %land.lhs.true
  %6 = load %struct.pointer_set_t*, %struct.pointer_set_t** %param_set.addr, align 8, !dbg !6756
  %7 = load %union.tree_node*, %union.tree_node** %access_function.addr, align 8, !dbg !6758
  %8 = bitcast %union.tree_node* %7 to i8*, !dbg !6758
  %call4 = call i32 @pointer_set_insert(%struct.pointer_set_t* %6, i8* %8), !dbg !6759
  %9 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %parameters.addr, align 8, !dbg !6760
  %10 = load %union.tree_node*, %union.tree_node** %access_function.addr, align 8, !dbg !6760
  %call5 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %9, %union.tree_node* %10), !dbg !6760
  br label %if.end8, !dbg !6761

if.else:                                          ; preds = %land.lhs.true, %if.end
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6762, metadata !DIExpression()), !dbg !6764
  call void @llvm.dbg.declare(metadata i32* %num_operands, metadata !6765, metadata !DIExpression()), !dbg !6766
  %11 = load %union.tree_node*, %union.tree_node** %access_function.addr, align 8, !dbg !6767
  %call6 = call i32 @tree_operand_length(%union.tree_node* %11), !dbg !6768
  store i32 %call6, i32* %num_operands, align 4, !dbg !6766
  store i32 0, i32* %i, align 4, !dbg !6769
  br label %for.cond, !dbg !6771

for.cond:                                         ; preds = %for.inc, %if.else
  %12 = load i32, i32* %i, align 4, !dbg !6772
  %13 = load i32, i32* %num_operands, align 4, !dbg !6774
  %cmp7 = icmp slt i32 %12, %13, !dbg !6775
  br i1 %cmp7, label %for.body, label %for.end, !dbg !6776

for.body:                                         ; preds = %for.cond
  %14 = load %union.tree_node*, %union.tree_node** %access_function.addr, align 8, !dbg !6777
  %exp = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !6777
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6777
  %15 = load i32, i32* %i, align 4, !dbg !6777
  %idxprom = sext i32 %15 to i64, !dbg !6777
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom, !dbg !6777
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6777
  %17 = load %struct.pointer_set_t*, %struct.pointer_set_t** %param_set.addr, align 8, !dbg !6778
  %18 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %parameters.addr, align 8, !dbg !6779
  call void @lambda_collect_parameters_from_af(%union.tree_node* %16, %struct.pointer_set_t* %17, %struct.VEC_tree_heap** %18), !dbg !6780
  br label %for.inc, !dbg !6780

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4, !dbg !6781
  %inc = add nsw i32 %19, 1, !dbg !6781
  store i32 %inc, i32* %i, align 4, !dbg !6781
  br label %for.cond, !dbg !6782, !llvm.loop !6783

for.end:                                          ; preds = %for.cond
  br label %if.end8

if.end8:                                          ; preds = %if.then, %for.end, %if.then3
  ret void, !dbg !6785
}

declare dso_local void @pointer_set_destroy(%struct.pointer_set_t*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @lambda_compute_access_matrices(%struct.VEC_data_reference_p_heap* %datarefs, %struct.VEC_tree_heap* %parameters, %struct.VEC_loop_p_heap* %nest) #0 !dbg !6786 {
entry:
  %retval = alloca i8, align 1
  %datarefs.addr = alloca %struct.VEC_data_reference_p_heap*, align 8
  %parameters.addr = alloca %struct.VEC_tree_heap*, align 8
  %nest.addr = alloca %struct.VEC_loop_p_heap*, align 8
  %dataref = alloca %struct.data_reference*, align 8
  %ix = alloca i32, align 4
  store %struct.VEC_data_reference_p_heap* %datarefs, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap** %datarefs.addr, metadata !6789, metadata !DIExpression()), !dbg !6790
  store %struct.VEC_tree_heap* %parameters, %struct.VEC_tree_heap** %parameters.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %parameters.addr, metadata !6791, metadata !DIExpression()), !dbg !6792
  store %struct.VEC_loop_p_heap* %nest, %struct.VEC_loop_p_heap** %nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap** %nest.addr, metadata !6793, metadata !DIExpression()), !dbg !6794
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dataref, metadata !6795, metadata !DIExpression()), !dbg !6796
  call void @llvm.dbg.declare(metadata i32* %ix, metadata !6797, metadata !DIExpression()), !dbg !6798
  store i32 0, i32* %ix, align 4, !dbg !6799
  br label %for.cond, !dbg !6801

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !6802
  %tobool = icmp ne %struct.VEC_data_reference_p_heap* %0, null, !dbg !6802
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6802

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !6802
  %base = getelementptr inbounds %struct.VEC_data_reference_p_heap, %struct.VEC_data_reference_p_heap* %1, i32 0, i32 0, !dbg !6802
  br label %cond.end, !dbg !6802

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !6802

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_data_reference_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6802
  %2 = load i32, i32* %ix, align 4, !dbg !6802
  %call = call i32 @VEC_data_reference_p_base_iterate(%struct.VEC_data_reference_p_base* %cond, i32 %2, %struct.data_reference** %dataref), !dbg !6802
  %tobool1 = icmp ne i32 %call, 0, !dbg !6804
  br i1 %tobool1, label %for.body, label %for.end, !dbg !6804

for.body:                                         ; preds = %cond.end
  %3 = load %struct.data_reference*, %struct.data_reference** %dataref, align 8, !dbg !6805
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %parameters.addr, align 8, !dbg !6807
  %5 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %nest.addr, align 8, !dbg !6808
  %call2 = call zeroext i8 @build_access_matrix(%struct.data_reference* %3, %struct.VEC_tree_heap* %4, %struct.VEC_loop_p_heap* %5), !dbg !6809
  %tobool3 = icmp ne i8 %call2, 0, !dbg !6809
  br i1 %tobool3, label %if.end, label %if.then, !dbg !6810

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !6811
  br label %return, !dbg !6811

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6812

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %ix, align 4, !dbg !6813
  %inc = add i32 %6, 1, !dbg !6813
  store i32 %inc, i32* %ix, align 4, !dbg !6813
  br label %for.cond, !dbg !6814, !llvm.loop !6815

for.end:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !6817
  br label %return, !dbg !6817

return:                                           ; preds = %for.end, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !6818
  ret i8 %7, !dbg !6818
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @build_access_matrix(%struct.data_reference* %data_reference, %struct.VEC_tree_heap* %parameters, %struct.VEC_loop_p_heap* %nest) #0 !dbg !6819 {
entry:
  %retval = alloca i8, align 1
  %data_reference.addr = alloca %struct.data_reference*, align 8
  %parameters.addr = alloca %struct.VEC_tree_heap*, align 8
  %nest.addr = alloca %struct.VEC_loop_p_heap*, align 8
  %am = alloca %struct.access_matrix*, align 8
  %i = alloca i32, align 4
  %ndim = alloca i32, align 4
  %nivs = alloca i32, align 4
  %lambda_nb_columns = alloca i32, align 4
  %access_vector = alloca i32*, align 8
  %access_function = alloca %union.tree_node*, align 8
  store %struct.data_reference* %data_reference, %struct.data_reference** %data_reference.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %data_reference.addr, metadata !6822, metadata !DIExpression()), !dbg !6823
  store %struct.VEC_tree_heap* %parameters, %struct.VEC_tree_heap** %parameters.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %parameters.addr, metadata !6824, metadata !DIExpression()), !dbg !6825
  store %struct.VEC_loop_p_heap* %nest, %struct.VEC_loop_p_heap** %nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap** %nest.addr, metadata !6826, metadata !DIExpression()), !dbg !6827
  call void @llvm.dbg.declare(metadata %struct.access_matrix** %am, metadata !6828, metadata !DIExpression()), !dbg !6829
  %call = call i8* @ggc_alloc_stat(i64 32), !dbg !6830
  %0 = bitcast i8* %call to %struct.access_matrix*, !dbg !6830
  store %struct.access_matrix* %0, %struct.access_matrix** %am, align 8, !dbg !6829
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6831, metadata !DIExpression()), !dbg !6832
  call void @llvm.dbg.declare(metadata i32* %ndim, metadata !6833, metadata !DIExpression()), !dbg !6834
  %1 = load %struct.data_reference*, %struct.data_reference** %data_reference.addr, align 8, !dbg !6835
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %1, i32 0, i32 5, !dbg !6835
  %access_fns = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 1, !dbg !6835
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns, align 8, !dbg !6835
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !6835
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6835

cond.true:                                        ; preds = %entry
  %3 = load %struct.data_reference*, %struct.data_reference** %data_reference.addr, align 8, !dbg !6835
  %indices1 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %3, i32 0, i32 5, !dbg !6835
  %access_fns2 = getelementptr inbounds %struct.indices, %struct.indices* %indices1, i32 0, i32 1, !dbg !6835
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns2, align 8, !dbg !6835
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !6835
  br label %cond.end, !dbg !6835

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6835

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6835
  %call3 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !6835
  store i32 %call3, i32* %ndim, align 4, !dbg !6834
  call void @llvm.dbg.declare(metadata i32* %nivs, metadata !6836, metadata !DIExpression()), !dbg !6837
  %5 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %nest.addr, align 8, !dbg !6838
  %tobool4 = icmp ne %struct.VEC_loop_p_heap* %5, null, !dbg !6838
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !6838

cond.true5:                                       ; preds = %cond.end
  %6 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %nest.addr, align 8, !dbg !6838
  %base6 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %6, i32 0, i32 0, !dbg !6838
  br label %cond.end8, !dbg !6838

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !6838

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !6838
  %call10 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond9), !dbg !6838
  store i32 %call10, i32* %nivs, align 4, !dbg !6837
  call void @llvm.dbg.declare(metadata i32* %lambda_nb_columns, metadata !6839, metadata !DIExpression()), !dbg !6840
  %7 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %nest.addr, align 8, !dbg !6841
  %8 = load %struct.access_matrix*, %struct.access_matrix** %am, align 8, !dbg !6842
  %loop_nest = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %8, i32 0, i32 0, !dbg !6842
  store %struct.VEC_loop_p_heap* %7, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !6843
  %9 = load i32, i32* %nivs, align 4, !dbg !6844
  %10 = load %struct.access_matrix*, %struct.access_matrix** %am, align 8, !dbg !6845
  %nb_induction_vars = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %10, i32 0, i32 1, !dbg !6845
  store i32 %9, i32* %nb_induction_vars, align 8, !dbg !6846
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %parameters.addr, align 8, !dbg !6847
  %12 = load %struct.access_matrix*, %struct.access_matrix** %am, align 8, !dbg !6848
  %parameters11 = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %12, i32 0, i32 2, !dbg !6848
  store %struct.VEC_tree_heap* %11, %struct.VEC_tree_heap** %parameters11, align 8, !dbg !6849
  %13 = load %struct.access_matrix*, %struct.access_matrix** %am, align 8, !dbg !6850
  %nb_induction_vars12 = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %13, i32 0, i32 1, !dbg !6850
  %14 = load i32, i32* %nb_induction_vars12, align 8, !dbg !6850
  %15 = load %struct.access_matrix*, %struct.access_matrix** %am, align 8, !dbg !6850
  %parameters13 = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %15, i32 0, i32 2, !dbg !6850
  %16 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %parameters13, align 8, !dbg !6850
  %tobool14 = icmp ne %struct.VEC_tree_heap* %16, null, !dbg !6850
  br i1 %tobool14, label %cond.true15, label %cond.false18, !dbg !6850

cond.true15:                                      ; preds = %cond.end8
  %17 = load %struct.access_matrix*, %struct.access_matrix** %am, align 8, !dbg !6850
  %parameters16 = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %17, i32 0, i32 2, !dbg !6850
  %18 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %parameters16, align 8, !dbg !6850
  %base17 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %18, i32 0, i32 0, !dbg !6850
  br label %cond.end19, !dbg !6850

cond.false18:                                     ; preds = %cond.end8
  br label %cond.end19, !dbg !6850

cond.end19:                                       ; preds = %cond.false18, %cond.true15
  %cond20 = phi %struct.VEC_tree_base* [ %base17, %cond.true15 ], [ null, %cond.false18 ], !dbg !6850
  %call21 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond20), !dbg !6850
  %add = add i32 %14, %call21, !dbg !6850
  %add22 = add i32 %add, 1, !dbg !6850
  store i32 %add22, i32* %lambda_nb_columns, align 4, !dbg !6851
  %19 = load i32, i32* %ndim, align 4, !dbg !6852
  %call23 = call %struct.VEC_lambda_vector_gc* @VEC_lambda_vector_gc_alloc(i32 %19), !dbg !6852
  %20 = load %struct.access_matrix*, %struct.access_matrix** %am, align 8, !dbg !6853
  %matrix = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %20, i32 0, i32 3, !dbg !6853
  store %struct.VEC_lambda_vector_gc* %call23, %struct.VEC_lambda_vector_gc** %matrix, align 8, !dbg !6854
  store i32 0, i32* %i, align 4, !dbg !6855
  br label %for.cond, !dbg !6857

for.cond:                                         ; preds = %for.inc, %cond.end19
  %21 = load i32, i32* %i, align 4, !dbg !6858
  %22 = load i32, i32* %ndim, align 4, !dbg !6860
  %cmp = icmp ult i32 %21, %22, !dbg !6861
  br i1 %cmp, label %for.body, label %for.end, !dbg !6862

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32** %access_vector, metadata !6863, metadata !DIExpression()), !dbg !6865
  %23 = load i32, i32* %lambda_nb_columns, align 4, !dbg !6866
  %call24 = call i32* @lambda_vector_new(i32 %23), !dbg !6867
  store i32* %call24, i32** %access_vector, align 8, !dbg !6865
  call void @llvm.dbg.declare(metadata %union.tree_node** %access_function, metadata !6868, metadata !DIExpression()), !dbg !6869
  %24 = load %struct.data_reference*, %struct.data_reference** %data_reference.addr, align 8, !dbg !6870
  %indices25 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %24, i32 0, i32 5, !dbg !6870
  %access_fns26 = getelementptr inbounds %struct.indices, %struct.indices* %indices25, i32 0, i32 1, !dbg !6870
  %25 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns26, align 8, !dbg !6870
  %tobool27 = icmp ne %struct.VEC_tree_heap* %25, null, !dbg !6870
  br i1 %tobool27, label %cond.true28, label %cond.false32, !dbg !6870

cond.true28:                                      ; preds = %for.body
  %26 = load %struct.data_reference*, %struct.data_reference** %data_reference.addr, align 8, !dbg !6870
  %indices29 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %26, i32 0, i32 5, !dbg !6870
  %access_fns30 = getelementptr inbounds %struct.indices, %struct.indices* %indices29, i32 0, i32 1, !dbg !6870
  %27 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns30, align 8, !dbg !6870
  %base31 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %27, i32 0, i32 0, !dbg !6870
  br label %cond.end33, !dbg !6870

cond.false32:                                     ; preds = %for.body
  br label %cond.end33, !dbg !6870

cond.end33:                                       ; preds = %cond.false32, %cond.true28
  %cond34 = phi %struct.VEC_tree_base* [ %base31, %cond.true28 ], [ null, %cond.false32 ], !dbg !6870
  %28 = load i32, i32* %i, align 4, !dbg !6870
  %call35 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond34, i32 %28), !dbg !6870
  store %union.tree_node* %call35, %union.tree_node** %access_function, align 8, !dbg !6869
  %29 = load %union.tree_node*, %union.tree_node** %access_function, align 8, !dbg !6871
  %30 = load i32*, i32** %access_vector, align 8, !dbg !6873
  %31 = load %struct.access_matrix*, %struct.access_matrix** %am, align 8, !dbg !6874
  %call36 = call zeroext i8 @av_for_af(%union.tree_node* %29, i32* %30, %struct.access_matrix* %31), !dbg !6875
  %tobool37 = icmp ne i8 %call36, 0, !dbg !6875
  br i1 %tobool37, label %if.end, label %if.then, !dbg !6876

if.then:                                          ; preds = %cond.end33
  store i8 0, i8* %retval, align 1, !dbg !6877
  br label %return, !dbg !6877

if.end:                                           ; preds = %cond.end33
  %32 = load %struct.access_matrix*, %struct.access_matrix** %am, align 8, !dbg !6878
  %matrix38 = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %32, i32 0, i32 3, !dbg !6878
  %33 = load %struct.VEC_lambda_vector_gc*, %struct.VEC_lambda_vector_gc** %matrix38, align 8, !dbg !6878
  %tobool39 = icmp ne %struct.VEC_lambda_vector_gc* %33, null, !dbg !6878
  br i1 %tobool39, label %cond.true40, label %cond.false43, !dbg !6878

cond.true40:                                      ; preds = %if.end
  %34 = load %struct.access_matrix*, %struct.access_matrix** %am, align 8, !dbg !6878
  %matrix41 = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %34, i32 0, i32 3, !dbg !6878
  %35 = load %struct.VEC_lambda_vector_gc*, %struct.VEC_lambda_vector_gc** %matrix41, align 8, !dbg !6878
  %base42 = getelementptr inbounds %struct.VEC_lambda_vector_gc, %struct.VEC_lambda_vector_gc* %35, i32 0, i32 0, !dbg !6878
  br label %cond.end44, !dbg !6878

cond.false43:                                     ; preds = %if.end
  br label %cond.end44, !dbg !6878

cond.end44:                                       ; preds = %cond.false43, %cond.true40
  %cond45 = phi %struct.VEC_lambda_vector_base* [ %base42, %cond.true40 ], [ null, %cond.false43 ], !dbg !6878
  %36 = load i32*, i32** %access_vector, align 8, !dbg !6878
  %call46 = call i32** @VEC_lambda_vector_base_quick_push(%struct.VEC_lambda_vector_base* %cond45, i32* %36), !dbg !6878
  br label %for.inc, !dbg !6879

for.inc:                                          ; preds = %cond.end44
  %37 = load i32, i32* %i, align 4, !dbg !6880
  %inc = add i32 %37, 1, !dbg !6880
  store i32 %inc, i32* %i, align 4, !dbg !6880
  br label %for.cond, !dbg !6881, !llvm.loop !6882

for.end:                                          ; preds = %for.cond
  %38 = load %struct.access_matrix*, %struct.access_matrix** %am, align 8, !dbg !6884
  %39 = load %struct.data_reference*, %struct.data_reference** %data_reference.addr, align 8, !dbg !6885
  %access_matrix = getelementptr inbounds %struct.data_reference, %struct.data_reference* %39, i32 0, i32 7, !dbg !6885
  store %struct.access_matrix* %38, %struct.access_matrix** %access_matrix, align 8, !dbg !6886
  store i8 1, i8* %retval, align 1, !dbg !6887
  br label %return, !dbg !6887

return:                                           ; preds = %for.end, %if.then
  %40 = load i8, i8* %retval, align 1, !dbg !6888
  ret i8 %40, !dbg !6888
}

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @lambda_vector_clear(i32* %vec1, i32 %size) #0 !dbg !6889 {
entry:
  %vec1.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  store i32* %vec1, i32** %vec1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec1.addr, metadata !6892, metadata !DIExpression()), !dbg !6893
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !6894, metadata !DIExpression()), !dbg !6895
  %0 = load i32*, i32** %vec1.addr, align 8, !dbg !6896
  %1 = bitcast i32* %0 to i8*, !dbg !6897
  %2 = load i32, i32* %size.addr, align 4, !dbg !6898
  %conv = sext i32 %2 to i64, !dbg !6898
  %mul = mul i64 %conv, 4, !dbg !6899
  call void @llvm.memset.p0i8.i64(i8* align 4 %1, i8 0, i64 %mul, i1 false), !dbg !6897
  ret void, !dbg !6900
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: noinline nounwind uwtable
define internal %struct.lambda_lattice_s* @lambda_lattice_new(i32 %depth, i32 %invariants, %struct.obstack* %lambda_obstack) #0 !dbg !6901 {
entry:
  %depth.addr = alloca i32, align 4
  %invariants.addr = alloca i32, align 4
  %lambda_obstack.addr = alloca %struct.obstack*, align 8
  %ret = alloca %struct.lambda_lattice_s*, align 8
  store i32 %depth, i32* %depth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %depth.addr, metadata !6904, metadata !DIExpression()), !dbg !6905
  store i32 %invariants, i32* %invariants.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %invariants.addr, metadata !6906, metadata !DIExpression()), !dbg !6907
  store %struct.obstack* %lambda_obstack, %struct.obstack** %lambda_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %lambda_obstack.addr, metadata !6908, metadata !DIExpression()), !dbg !6909
  call void @llvm.dbg.declare(metadata %struct.lambda_lattice_s** %ret, metadata !6910, metadata !DIExpression()), !dbg !6911
  %0 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %temp = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 5, !dbg !6912
  store i64 40, i64* %temp, align 8, !dbg !6912
  %1 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 4, !dbg !6912
  %2 = load i8*, i8** %chunk_limit, align 8, !dbg !6912
  %3 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 3, !dbg !6912
  %4 = load i8*, i8** %next_free, align 8, !dbg !6912
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64, !dbg !6912
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64, !dbg !6912
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !6912
  %5 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %temp1 = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i32 0, i32 5, !dbg !6912
  %6 = load i64, i64* %temp1, align 8, !dbg !6912
  %cmp = icmp slt i64 %sub.ptr.sub, %6, !dbg !6912
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6912

cond.true:                                        ; preds = %entry
  %7 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %8 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %temp2 = getelementptr inbounds %struct.obstack, %struct.obstack* %8, i32 0, i32 5, !dbg !6912
  %9 = load i64, i64* %temp2, align 8, !dbg !6912
  %conv = trunc i64 %9 to i32, !dbg !6912
  call void @_obstack_newchunk(%struct.obstack* %7, i32 %conv), !dbg !6912
  br label %cond.end, !dbg !6912

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6912

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6912
  %10 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %temp3 = getelementptr inbounds %struct.obstack, %struct.obstack* %10, i32 0, i32 5, !dbg !6912
  %11 = load i64, i64* %temp3, align 8, !dbg !6912
  %12 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %next_free4 = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 3, !dbg !6912
  %13 = load i8*, i8** %next_free4, align 8, !dbg !6912
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %11, !dbg !6912
  store i8* %add.ptr, i8** %next_free4, align 8, !dbg !6912
  %14 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %next_free5 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 3, !dbg !6912
  %15 = load i8*, i8** %next_free5, align 8, !dbg !6912
  %16 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %16, i32 0, i32 2, !dbg !6912
  %17 = load i8*, i8** %object_base, align 8, !dbg !6912
  %cmp6 = icmp eq i8* %15, %17, !dbg !6912
  br i1 %cmp6, label %cond.true8, label %cond.false9, !dbg !6912

cond.true8:                                       ; preds = %cond.end
  %18 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 10, !dbg !6912
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !6912
  %bf.clear = and i8 %bf.load, -3, !dbg !6912
  %bf.set = or i8 %bf.clear, 2, !dbg !6912
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !6912
  br label %cond.end10, !dbg !6912

cond.false9:                                      ; preds = %cond.end
  br label %cond.end10, !dbg !6912

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !6912
  %19 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %object_base12 = getelementptr inbounds %struct.obstack, %struct.obstack* %19, i32 0, i32 2, !dbg !6912
  %20 = load i8*, i8** %object_base12, align 8, !dbg !6912
  %sub.ptr.lhs.cast13 = ptrtoint i8* %20 to i64, !dbg !6912
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast13, 0, !dbg !6912
  %21 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %temp15 = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 5, !dbg !6912
  store i64 %sub.ptr.sub14, i64* %temp15, align 8, !dbg !6912
  %22 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %next_free16 = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 3, !dbg !6912
  %23 = load i8*, i8** %next_free16, align 8, !dbg !6912
  %sub.ptr.lhs.cast17 = ptrtoint i8* %23 to i64, !dbg !6912
  %sub.ptr.sub18 = sub i64 %sub.ptr.lhs.cast17, 0, !dbg !6912
  %24 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 6, !dbg !6912
  %25 = load i32, i32* %alignment_mask, align 8, !dbg !6912
  %conv19 = sext i32 %25 to i64, !dbg !6912
  %add = add nsw i64 %sub.ptr.sub18, %conv19, !dbg !6912
  %26 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %alignment_mask20 = getelementptr inbounds %struct.obstack, %struct.obstack* %26, i32 0, i32 6, !dbg !6912
  %27 = load i32, i32* %alignment_mask20, align 8, !dbg !6912
  %neg = xor i32 %27, -1, !dbg !6912
  %conv21 = sext i32 %neg to i64, !dbg !6912
  %and = and i64 %add, %conv21, !dbg !6912
  %28 = inttoptr i64 %and to i8*, !dbg !6912
  %29 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %next_free22 = getelementptr inbounds %struct.obstack, %struct.obstack* %29, i32 0, i32 3, !dbg !6912
  store i8* %28, i8** %next_free22, align 8, !dbg !6912
  %30 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %next_free23 = getelementptr inbounds %struct.obstack, %struct.obstack* %30, i32 0, i32 3, !dbg !6912
  %31 = load i8*, i8** %next_free23, align 8, !dbg !6912
  %32 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 1, !dbg !6912
  %33 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !6912
  %34 = bitcast %struct._obstack_chunk* %33 to i8*, !dbg !6912
  %sub.ptr.lhs.cast24 = ptrtoint i8* %31 to i64, !dbg !6912
  %sub.ptr.rhs.cast25 = ptrtoint i8* %34 to i64, !dbg !6912
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25, !dbg !6912
  %35 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %chunk_limit27 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 4, !dbg !6912
  %36 = load i8*, i8** %chunk_limit27, align 8, !dbg !6912
  %37 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %chunk28 = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 1, !dbg !6912
  %38 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk28, align 8, !dbg !6912
  %39 = bitcast %struct._obstack_chunk* %38 to i8*, !dbg !6912
  %sub.ptr.lhs.cast29 = ptrtoint i8* %36 to i64, !dbg !6912
  %sub.ptr.rhs.cast30 = ptrtoint i8* %39 to i64, !dbg !6912
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30, !dbg !6912
  %cmp32 = icmp sgt i64 %sub.ptr.sub26, %sub.ptr.sub31, !dbg !6912
  br i1 %cmp32, label %cond.true34, label %cond.false37, !dbg !6912

cond.true34:                                      ; preds = %cond.end10
  %40 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %chunk_limit35 = getelementptr inbounds %struct.obstack, %struct.obstack* %40, i32 0, i32 4, !dbg !6912
  %41 = load i8*, i8** %chunk_limit35, align 8, !dbg !6912
  %42 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %next_free36 = getelementptr inbounds %struct.obstack, %struct.obstack* %42, i32 0, i32 3, !dbg !6912
  store i8* %41, i8** %next_free36, align 8, !dbg !6912
  br label %cond.end38, !dbg !6912

cond.false37:                                     ; preds = %cond.end10
  br label %cond.end38, !dbg !6912

cond.end38:                                       ; preds = %cond.false37, %cond.true34
  %cond39 = phi i8* [ %41, %cond.true34 ], [ null, %cond.false37 ], !dbg !6912
  %43 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %next_free40 = getelementptr inbounds %struct.obstack, %struct.obstack* %43, i32 0, i32 3, !dbg !6912
  %44 = load i8*, i8** %next_free40, align 8, !dbg !6912
  %45 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %object_base41 = getelementptr inbounds %struct.obstack, %struct.obstack* %45, i32 0, i32 2, !dbg !6912
  store i8* %44, i8** %object_base41, align 8, !dbg !6912
  %46 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !6912
  %temp42 = getelementptr inbounds %struct.obstack, %struct.obstack* %46, i32 0, i32 5, !dbg !6912
  %47 = load i64, i64* %temp42, align 8, !dbg !6912
  %48 = inttoptr i64 %47 to i8*, !dbg !6912
  %49 = bitcast i8* %48 to %struct.lambda_lattice_s*, !dbg !6913
  store %struct.lambda_lattice_s* %49, %struct.lambda_lattice_s** %ret, align 8, !dbg !6911
  %50 = load i32, i32* %depth.addr, align 4, !dbg !6914
  %51 = load i32, i32* %depth.addr, align 4, !dbg !6915
  %call = call i32** @lambda_matrix_new(i32 %50, i32 %51), !dbg !6916
  %52 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %ret, align 8, !dbg !6917
  %base = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %52, i32 0, i32 0, !dbg !6917
  store i32** %call, i32*** %base, align 8, !dbg !6918
  %53 = load i32, i32* %depth.addr, align 4, !dbg !6919
  %call43 = call i32* @lambda_vector_new(i32 %53), !dbg !6920
  %54 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %ret, align 8, !dbg !6921
  %origin = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %54, i32 0, i32 2, !dbg !6921
  store i32* %call43, i32** %origin, align 8, !dbg !6922
  %55 = load i32, i32* %depth.addr, align 4, !dbg !6923
  %56 = load i32, i32* %invariants.addr, align 4, !dbg !6924
  %call44 = call i32** @lambda_matrix_new(i32 %55, i32 %56), !dbg !6925
  %57 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %ret, align 8, !dbg !6926
  %origin_invariants = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %57, i32 0, i32 3, !dbg !6926
  store i32** %call44, i32*** %origin_invariants, align 8, !dbg !6927
  %58 = load i32, i32* %depth.addr, align 4, !dbg !6928
  %59 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %ret, align 8, !dbg !6929
  %dimension = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %59, i32 0, i32 1, !dbg !6929
  store i32 %58, i32* %dimension, align 8, !dbg !6930
  %60 = load i32, i32* %invariants.addr, align 4, !dbg !6931
  %61 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %ret, align 8, !dbg !6932
  %invariants45 = getelementptr inbounds %struct.lambda_lattice_s, %struct.lambda_lattice_s* %61, i32 0, i32 4, !dbg !6932
  store i32 %60, i32* %invariants45, align 8, !dbg !6933
  %62 = load %struct.lambda_lattice_s*, %struct.lambda_lattice_s** %ret, align 8, !dbg !6934
  ret %struct.lambda_lattice_s* %62, !dbg !6935
}

; Function Attrs: noinline nounwind uwtable
define internal void @lambda_vector_add_mc(i32* %vec1, i32 %const1, i32* %vec2, i32 %const2, i32* %vec3, i32 %size) #0 !dbg !6936 {
entry:
  %vec1.addr = alloca i32*, align 8
  %const1.addr = alloca i32, align 4
  %vec2.addr = alloca i32*, align 8
  %const2.addr = alloca i32, align 4
  %vec3.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %vec1, i32** %vec1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec1.addr, metadata !6939, metadata !DIExpression()), !dbg !6940
  store i32 %const1, i32* %const1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %const1.addr, metadata !6941, metadata !DIExpression()), !dbg !6942
  store i32* %vec2, i32** %vec2.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec2.addr, metadata !6943, metadata !DIExpression()), !dbg !6944
  store i32 %const2, i32* %const2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %const2.addr, metadata !6945, metadata !DIExpression()), !dbg !6946
  store i32* %vec3, i32** %vec3.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec3.addr, metadata !6947, metadata !DIExpression()), !dbg !6948
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !6949, metadata !DIExpression()), !dbg !6950
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6951, metadata !DIExpression()), !dbg !6952
  store i32 0, i32* %i, align 4, !dbg !6953
  br label %for.cond, !dbg !6955

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !6956
  %1 = load i32, i32* %size.addr, align 4, !dbg !6958
  %cmp = icmp slt i32 %0, %1, !dbg !6959
  br i1 %cmp, label %for.body, label %for.end, !dbg !6960

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %const1.addr, align 4, !dbg !6961
  %3 = load i32*, i32** %vec1.addr, align 8, !dbg !6962
  %4 = load i32, i32* %i, align 4, !dbg !6963
  %idxprom = sext i32 %4 to i64, !dbg !6962
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !6962
  %5 = load i32, i32* %arrayidx, align 4, !dbg !6962
  %mul = mul nsw i32 %2, %5, !dbg !6964
  %6 = load i32, i32* %const2.addr, align 4, !dbg !6965
  %7 = load i32*, i32** %vec2.addr, align 8, !dbg !6966
  %8 = load i32, i32* %i, align 4, !dbg !6967
  %idxprom1 = sext i32 %8 to i64, !dbg !6966
  %arrayidx2 = getelementptr inbounds i32, i32* %7, i64 %idxprom1, !dbg !6966
  %9 = load i32, i32* %arrayidx2, align 4, !dbg !6966
  %mul3 = mul nsw i32 %6, %9, !dbg !6968
  %add = add nsw i32 %mul, %mul3, !dbg !6969
  %10 = load i32*, i32** %vec3.addr, align 8, !dbg !6970
  %11 = load i32, i32* %i, align 4, !dbg !6971
  %idxprom4 = sext i32 %11 to i64, !dbg !6970
  %arrayidx5 = getelementptr inbounds i32, i32* %10, i64 %idxprom4, !dbg !6970
  store i32 %add, i32* %arrayidx5, align 4, !dbg !6972
  br label %for.inc, !dbg !6970

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !6973
  %inc = add nsw i32 %12, 1, !dbg !6973
  store i32 %inc, i32* %i, align 4, !dbg !6973
  br label %for.cond, !dbg !6974, !llvm.loop !6975

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6977
}

declare dso_local void @lambda_matrix_add_mc(i32**, i32, i32**, i32, i32**, i32, i32) #2

declare dso_local i32 @lambda_matrix_inverse(i32**, i32**, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.lambda_loopnest_s* @compute_nest_using_fourier_motzkin(i32 %size, i32 %depth, i32 %invariants, i32** %A, i32** %B, i32* %a, %struct.obstack* %lambda_obstack) #0 !dbg !6978 {
entry:
  %size.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %invariants.addr = alloca i32, align 4
  %A.addr = alloca i32**, align 8
  %B.addr = alloca i32**, align 8
  %a.addr = alloca i32*, align 8
  %lambda_obstack.addr = alloca %struct.obstack*, align 8
  %multiple = alloca i32, align 4
  %f1 = alloca i32, align 4
  %f2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %expression = alloca %struct.lambda_linear_expression_s*, align 8
  %loop = alloca %struct.lambda_loop_s*, align 8
  %auxillary_nest = alloca %struct.lambda_loopnest_s*, align 8
  %swapmatrix = alloca i32**, align 8
  %A1 = alloca i32**, align 8
  %B1 = alloca i32**, align 8
  %swapvector = alloca i32*, align 8
  %a1 = alloca i32*, align 8
  %newsize = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !6981, metadata !DIExpression()), !dbg !6982
  store i32 %depth, i32* %depth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %depth.addr, metadata !6983, metadata !DIExpression()), !dbg !6984
  store i32 %invariants, i32* %invariants.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %invariants.addr, metadata !6985, metadata !DIExpression()), !dbg !6986
  store i32** %A, i32*** %A.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %A.addr, metadata !6987, metadata !DIExpression()), !dbg !6988
  store i32** %B, i32*** %B.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %B.addr, metadata !6989, metadata !DIExpression()), !dbg !6990
  store i32* %a, i32** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %a.addr, metadata !6991, metadata !DIExpression()), !dbg !6992
  store %struct.obstack* %lambda_obstack, %struct.obstack** %lambda_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %lambda_obstack.addr, metadata !6993, metadata !DIExpression()), !dbg !6994
  call void @llvm.dbg.declare(metadata i32* %multiple, metadata !6995, metadata !DIExpression()), !dbg !6996
  call void @llvm.dbg.declare(metadata i32* %f1, metadata !6997, metadata !DIExpression()), !dbg !6998
  call void @llvm.dbg.declare(metadata i32* %f2, metadata !6999, metadata !DIExpression()), !dbg !7000
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7001, metadata !DIExpression()), !dbg !7002
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7003, metadata !DIExpression()), !dbg !7004
  call void @llvm.dbg.declare(metadata i32* %k, metadata !7005, metadata !DIExpression()), !dbg !7006
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %expression, metadata !7007, metadata !DIExpression()), !dbg !7008
  call void @llvm.dbg.declare(metadata %struct.lambda_loop_s** %loop, metadata !7009, metadata !DIExpression()), !dbg !7010
  call void @llvm.dbg.declare(metadata %struct.lambda_loopnest_s** %auxillary_nest, metadata !7011, metadata !DIExpression()), !dbg !7012
  call void @llvm.dbg.declare(metadata i32*** %swapmatrix, metadata !7013, metadata !DIExpression()), !dbg !7014
  call void @llvm.dbg.declare(metadata i32*** %A1, metadata !7015, metadata !DIExpression()), !dbg !7016
  call void @llvm.dbg.declare(metadata i32*** %B1, metadata !7017, metadata !DIExpression()), !dbg !7018
  call void @llvm.dbg.declare(metadata i32** %swapvector, metadata !7019, metadata !DIExpression()), !dbg !7020
  call void @llvm.dbg.declare(metadata i32** %a1, metadata !7021, metadata !DIExpression()), !dbg !7022
  call void @llvm.dbg.declare(metadata i32* %newsize, metadata !7023, metadata !DIExpression()), !dbg !7024
  %0 = load i32, i32* %depth.addr, align 4, !dbg !7025
  %call = call i32** @lambda_matrix_new(i32 128, i32 %0), !dbg !7026
  store i32** %call, i32*** %A1, align 8, !dbg !7027
  %1 = load i32, i32* %invariants.addr, align 4, !dbg !7028
  %call1 = call i32** @lambda_matrix_new(i32 128, i32 %1), !dbg !7029
  store i32** %call1, i32*** %B1, align 8, !dbg !7030
  %call2 = call i32* @lambda_vector_new(i32 128), !dbg !7031
  store i32* %call2, i32** %a1, align 8, !dbg !7032
  %2 = load i32, i32* %depth.addr, align 4, !dbg !7033
  %3 = load i32, i32* %invariants.addr, align 4, !dbg !7034
  %4 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !7035
  %call3 = call %struct.lambda_loopnest_s* @lambda_loopnest_new(i32 %2, i32 %3, %struct.obstack* %4), !dbg !7036
  store %struct.lambda_loopnest_s* %call3, %struct.lambda_loopnest_s** %auxillary_nest, align 8, !dbg !7037
  %5 = load i32, i32* %depth.addr, align 4, !dbg !7038
  %sub = sub nsw i32 %5, 1, !dbg !7040
  store i32 %sub, i32* %i, align 4, !dbg !7041
  br label %for.cond, !dbg !7042

for.cond:                                         ; preds = %for.inc188, %entry
  %6 = load i32, i32* %i, align 4, !dbg !7043
  %cmp = icmp sge i32 %6, 0, !dbg !7045
  br i1 %cmp, label %for.body, label %for.end189, !dbg !7046

for.body:                                         ; preds = %for.cond
  %call4 = call i8* @ggc_alloc_cleared_stat(i64 32), !dbg !7047
  %7 = bitcast i8* %call4 to %struct.lambda_loop_s*, !dbg !7047
  store %struct.lambda_loop_s* %7, %struct.lambda_loop_s** %loop, align 8, !dbg !7049
  %8 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !7050
  %9 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %auxillary_nest, align 8, !dbg !7051
  %loops = getelementptr inbounds %struct.lambda_loopnest_s, %struct.lambda_loopnest_s* %9, i32 0, i32 0, !dbg !7051
  %10 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %loops, align 8, !dbg !7051
  %11 = load i32, i32* %i, align 4, !dbg !7052
  %idxprom = sext i32 %11 to i64, !dbg !7051
  %arrayidx = getelementptr inbounds %struct.lambda_loop_s*, %struct.lambda_loop_s** %10, i64 %idxprom, !dbg !7051
  store %struct.lambda_loop_s* %8, %struct.lambda_loop_s** %arrayidx, align 8, !dbg !7053
  %12 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !7054
  %step = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %12, i32 0, i32 3, !dbg !7054
  store i32 1, i32* %step, align 8, !dbg !7055
  store i32 0, i32* %j, align 4, !dbg !7056
  br label %for.cond5, !dbg !7058

for.cond5:                                        ; preds = %for.inc98, %for.body
  %13 = load i32, i32* %j, align 4, !dbg !7059
  %14 = load i32, i32* %size.addr, align 4, !dbg !7061
  %cmp6 = icmp slt i32 %13, %14, !dbg !7062
  br i1 %cmp6, label %for.body7, label %for.end100, !dbg !7063

for.body7:                                        ; preds = %for.cond5
  %15 = load i32**, i32*** %A.addr, align 8, !dbg !7064
  %16 = load i32, i32* %j, align 4, !dbg !7067
  %idxprom8 = sext i32 %16 to i64, !dbg !7064
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i64 %idxprom8, !dbg !7064
  %17 = load i32*, i32** %arrayidx9, align 8, !dbg !7064
  %18 = load i32, i32* %i, align 4, !dbg !7068
  %idxprom10 = sext i32 %18 to i64, !dbg !7064
  %arrayidx11 = getelementptr inbounds i32, i32* %17, i64 %idxprom10, !dbg !7064
  %19 = load i32, i32* %arrayidx11, align 4, !dbg !7064
  %cmp12 = icmp slt i32 %19, 0, !dbg !7069
  br i1 %cmp12, label %if.then, label %if.else, !dbg !7070

if.then:                                          ; preds = %for.body7
  %20 = load i32, i32* %depth.addr, align 4, !dbg !7071
  %21 = load i32, i32* %invariants.addr, align 4, !dbg !7073
  %22 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !7074
  %call13 = call %struct.lambda_linear_expression_s* @lambda_linear_expression_new(i32 %20, i32 %21, %struct.obstack* %22), !dbg !7075
  store %struct.lambda_linear_expression_s* %call13, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7076
  store i32 0, i32* %k, align 4, !dbg !7077
  br label %for.cond14, !dbg !7079

for.cond14:                                       ; preds = %for.inc, %if.then
  %23 = load i32, i32* %k, align 4, !dbg !7080
  %24 = load i32, i32* %i, align 4, !dbg !7082
  %cmp15 = icmp slt i32 %23, %24, !dbg !7083
  br i1 %cmp15, label %for.body16, label %for.end, !dbg !7084

for.body16:                                       ; preds = %for.cond14
  %25 = load i32**, i32*** %A.addr, align 8, !dbg !7085
  %26 = load i32, i32* %j, align 4, !dbg !7086
  %idxprom17 = sext i32 %26 to i64, !dbg !7085
  %arrayidx18 = getelementptr inbounds i32*, i32** %25, i64 %idxprom17, !dbg !7085
  %27 = load i32*, i32** %arrayidx18, align 8, !dbg !7085
  %28 = load i32, i32* %k, align 4, !dbg !7087
  %idxprom19 = sext i32 %28 to i64, !dbg !7085
  %arrayidx20 = getelementptr inbounds i32, i32* %27, i64 %idxprom19, !dbg !7085
  %29 = load i32, i32* %arrayidx20, align 4, !dbg !7085
  %30 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7088
  %coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %30, i32 0, i32 0, !dbg !7088
  %31 = load i32*, i32** %coefficients, align 8, !dbg !7088
  %32 = load i32, i32* %k, align 4, !dbg !7089
  %idxprom21 = sext i32 %32 to i64, !dbg !7088
  %arrayidx22 = getelementptr inbounds i32, i32* %31, i64 %idxprom21, !dbg !7088
  store i32 %29, i32* %arrayidx22, align 4, !dbg !7090
  br label %for.inc, !dbg !7088

for.inc:                                          ; preds = %for.body16
  %33 = load i32, i32* %k, align 4, !dbg !7091
  %inc = add nsw i32 %33, 1, !dbg !7091
  store i32 %inc, i32* %k, align 4, !dbg !7091
  br label %for.cond14, !dbg !7092, !llvm.loop !7093

for.end:                                          ; preds = %for.cond14
  store i32 0, i32* %k, align 4, !dbg !7095
  br label %for.cond23, !dbg !7097

for.cond23:                                       ; preds = %for.inc32, %for.end
  %34 = load i32, i32* %k, align 4, !dbg !7098
  %35 = load i32, i32* %invariants.addr, align 4, !dbg !7100
  %cmp24 = icmp slt i32 %34, %35, !dbg !7101
  br i1 %cmp24, label %for.body25, label %for.end34, !dbg !7102

for.body25:                                       ; preds = %for.cond23
  %36 = load i32**, i32*** %B.addr, align 8, !dbg !7103
  %37 = load i32, i32* %j, align 4, !dbg !7104
  %idxprom26 = sext i32 %37 to i64, !dbg !7103
  %arrayidx27 = getelementptr inbounds i32*, i32** %36, i64 %idxprom26, !dbg !7103
  %38 = load i32*, i32** %arrayidx27, align 8, !dbg !7103
  %39 = load i32, i32* %k, align 4, !dbg !7105
  %idxprom28 = sext i32 %39 to i64, !dbg !7103
  %arrayidx29 = getelementptr inbounds i32, i32* %38, i64 %idxprom28, !dbg !7103
  %40 = load i32, i32* %arrayidx29, align 4, !dbg !7103
  %mul = mul nsw i32 -1, %40, !dbg !7106
  %41 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7107
  %invariant_coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %41, i32 0, i32 2, !dbg !7107
  %42 = load i32*, i32** %invariant_coefficients, align 8, !dbg !7107
  %43 = load i32, i32* %k, align 4, !dbg !7108
  %idxprom30 = sext i32 %43 to i64, !dbg !7107
  %arrayidx31 = getelementptr inbounds i32, i32* %42, i64 %idxprom30, !dbg !7107
  store i32 %mul, i32* %arrayidx31, align 4, !dbg !7109
  br label %for.inc32, !dbg !7107

for.inc32:                                        ; preds = %for.body25
  %44 = load i32, i32* %k, align 4, !dbg !7110
  %inc33 = add nsw i32 %44, 1, !dbg !7110
  store i32 %inc33, i32* %k, align 4, !dbg !7110
  br label %for.cond23, !dbg !7111, !llvm.loop !7112

for.end34:                                        ; preds = %for.cond23
  %45 = load i32**, i32*** %A.addr, align 8, !dbg !7114
  %46 = load i32, i32* %j, align 4, !dbg !7115
  %idxprom35 = sext i32 %46 to i64, !dbg !7114
  %arrayidx36 = getelementptr inbounds i32*, i32** %45, i64 %idxprom35, !dbg !7114
  %47 = load i32*, i32** %arrayidx36, align 8, !dbg !7114
  %48 = load i32, i32* %i, align 4, !dbg !7116
  %idxprom37 = sext i32 %48 to i64, !dbg !7114
  %arrayidx38 = getelementptr inbounds i32, i32* %47, i64 %idxprom37, !dbg !7114
  %49 = load i32, i32* %arrayidx38, align 4, !dbg !7114
  %mul39 = mul nsw i32 -1, %49, !dbg !7117
  %50 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7118
  %denominator = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %50, i32 0, i32 3, !dbg !7118
  store i32 %mul39, i32* %denominator, align 8, !dbg !7119
  %51 = load i32*, i32** %a.addr, align 8, !dbg !7120
  %52 = load i32, i32* %j, align 4, !dbg !7121
  %idxprom40 = sext i32 %52 to i64, !dbg !7120
  %arrayidx41 = getelementptr inbounds i32, i32* %51, i64 %idxprom40, !dbg !7120
  %53 = load i32, i32* %arrayidx41, align 4, !dbg !7120
  %mul42 = mul nsw i32 -1, %53, !dbg !7122
  %54 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7123
  %constant = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %54, i32 0, i32 1, !dbg !7123
  store i32 %mul42, i32* %constant, align 8, !dbg !7124
  %55 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !7125
  %lower_bound = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %55, i32 0, i32 0, !dbg !7125
  %56 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lower_bound, align 8, !dbg !7125
  %57 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7127
  %58 = load i32, i32* %depth.addr, align 4, !dbg !7128
  %59 = load i32, i32* %invariants.addr, align 4, !dbg !7129
  %call43 = call zeroext i8 @lle_equal(%struct.lambda_linear_expression_s* %56, %struct.lambda_linear_expression_s* %57, i32 %58, i32 %59), !dbg !7130
  %tobool = icmp ne i8 %call43, 0, !dbg !7130
  br i1 %tobool, label %if.end, label %if.then44, !dbg !7131

if.then44:                                        ; preds = %for.end34
  %60 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !7132
  %lower_bound45 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %60, i32 0, i32 0, !dbg !7132
  %61 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lower_bound45, align 8, !dbg !7132
  %62 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7134
  %next = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %62, i32 0, i32 4, !dbg !7134
  store %struct.lambda_linear_expression_s* %61, %struct.lambda_linear_expression_s** %next, align 8, !dbg !7135
  %63 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7136
  %64 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !7137
  %lower_bound46 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %64, i32 0, i32 0, !dbg !7137
  store %struct.lambda_linear_expression_s* %63, %struct.lambda_linear_expression_s** %lower_bound46, align 8, !dbg !7138
  br label %if.end, !dbg !7139

if.end:                                           ; preds = %if.then44, %for.end34
  br label %if.end97, !dbg !7140

if.else:                                          ; preds = %for.body7
  %65 = load i32**, i32*** %A.addr, align 8, !dbg !7141
  %66 = load i32, i32* %j, align 4, !dbg !7143
  %idxprom47 = sext i32 %66 to i64, !dbg !7141
  %arrayidx48 = getelementptr inbounds i32*, i32** %65, i64 %idxprom47, !dbg !7141
  %67 = load i32*, i32** %arrayidx48, align 8, !dbg !7141
  %68 = load i32, i32* %i, align 4, !dbg !7144
  %idxprom49 = sext i32 %68 to i64, !dbg !7141
  %arrayidx50 = getelementptr inbounds i32, i32* %67, i64 %idxprom49, !dbg !7141
  %69 = load i32, i32* %arrayidx50, align 4, !dbg !7141
  %cmp51 = icmp sgt i32 %69, 0, !dbg !7145
  br i1 %cmp51, label %if.then52, label %if.end96, !dbg !7146

if.then52:                                        ; preds = %if.else
  %70 = load i32, i32* %depth.addr, align 4, !dbg !7147
  %71 = load i32, i32* %invariants.addr, align 4, !dbg !7149
  %72 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !7150
  %call53 = call %struct.lambda_linear_expression_s* @lambda_linear_expression_new(i32 %70, i32 %71, %struct.obstack* %72), !dbg !7151
  store %struct.lambda_linear_expression_s* %call53, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7152
  store i32 0, i32* %k, align 4, !dbg !7153
  br label %for.cond54, !dbg !7155

for.cond54:                                       ; preds = %for.inc65, %if.then52
  %73 = load i32, i32* %k, align 4, !dbg !7156
  %74 = load i32, i32* %i, align 4, !dbg !7158
  %cmp55 = icmp slt i32 %73, %74, !dbg !7159
  br i1 %cmp55, label %for.body56, label %for.end67, !dbg !7160

for.body56:                                       ; preds = %for.cond54
  %75 = load i32**, i32*** %A.addr, align 8, !dbg !7161
  %76 = load i32, i32* %j, align 4, !dbg !7162
  %idxprom57 = sext i32 %76 to i64, !dbg !7161
  %arrayidx58 = getelementptr inbounds i32*, i32** %75, i64 %idxprom57, !dbg !7161
  %77 = load i32*, i32** %arrayidx58, align 8, !dbg !7161
  %78 = load i32, i32* %k, align 4, !dbg !7163
  %idxprom59 = sext i32 %78 to i64, !dbg !7161
  %arrayidx60 = getelementptr inbounds i32, i32* %77, i64 %idxprom59, !dbg !7161
  %79 = load i32, i32* %arrayidx60, align 4, !dbg !7161
  %mul61 = mul nsw i32 -1, %79, !dbg !7164
  %80 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7165
  %coefficients62 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %80, i32 0, i32 0, !dbg !7165
  %81 = load i32*, i32** %coefficients62, align 8, !dbg !7165
  %82 = load i32, i32* %k, align 4, !dbg !7166
  %idxprom63 = sext i32 %82 to i64, !dbg !7165
  %arrayidx64 = getelementptr inbounds i32, i32* %81, i64 %idxprom63, !dbg !7165
  store i32 %mul61, i32* %arrayidx64, align 4, !dbg !7167
  br label %for.inc65, !dbg !7165

for.inc65:                                        ; preds = %for.body56
  %83 = load i32, i32* %k, align 4, !dbg !7168
  %inc66 = add nsw i32 %83, 1, !dbg !7168
  store i32 %inc66, i32* %k, align 4, !dbg !7168
  br label %for.cond54, !dbg !7169, !llvm.loop !7170

for.end67:                                        ; preds = %for.cond54
  store i32 0, i32* %k, align 4, !dbg !7172
  br label %for.cond68, !dbg !7174

for.cond68:                                       ; preds = %for.inc78, %for.end67
  %84 = load i32, i32* %k, align 4, !dbg !7175
  %85 = load i32, i32* %invariants.addr, align 4, !dbg !7177
  %cmp69 = icmp slt i32 %84, %85, !dbg !7178
  br i1 %cmp69, label %for.body70, label %for.end80, !dbg !7179

for.body70:                                       ; preds = %for.cond68
  %86 = load i32**, i32*** %B.addr, align 8, !dbg !7180
  %87 = load i32, i32* %j, align 4, !dbg !7181
  %idxprom71 = sext i32 %87 to i64, !dbg !7180
  %arrayidx72 = getelementptr inbounds i32*, i32** %86, i64 %idxprom71, !dbg !7180
  %88 = load i32*, i32** %arrayidx72, align 8, !dbg !7180
  %89 = load i32, i32* %k, align 4, !dbg !7182
  %idxprom73 = sext i32 %89 to i64, !dbg !7180
  %arrayidx74 = getelementptr inbounds i32, i32* %88, i64 %idxprom73, !dbg !7180
  %90 = load i32, i32* %arrayidx74, align 4, !dbg !7180
  %91 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7183
  %invariant_coefficients75 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %91, i32 0, i32 2, !dbg !7183
  %92 = load i32*, i32** %invariant_coefficients75, align 8, !dbg !7183
  %93 = load i32, i32* %k, align 4, !dbg !7184
  %idxprom76 = sext i32 %93 to i64, !dbg !7183
  %arrayidx77 = getelementptr inbounds i32, i32* %92, i64 %idxprom76, !dbg !7183
  store i32 %90, i32* %arrayidx77, align 4, !dbg !7185
  br label %for.inc78, !dbg !7183

for.inc78:                                        ; preds = %for.body70
  %94 = load i32, i32* %k, align 4, !dbg !7186
  %inc79 = add nsw i32 %94, 1, !dbg !7186
  store i32 %inc79, i32* %k, align 4, !dbg !7186
  br label %for.cond68, !dbg !7187, !llvm.loop !7188

for.end80:                                        ; preds = %for.cond68
  %95 = load i32**, i32*** %A.addr, align 8, !dbg !7190
  %96 = load i32, i32* %j, align 4, !dbg !7191
  %idxprom81 = sext i32 %96 to i64, !dbg !7190
  %arrayidx82 = getelementptr inbounds i32*, i32** %95, i64 %idxprom81, !dbg !7190
  %97 = load i32*, i32** %arrayidx82, align 8, !dbg !7190
  %98 = load i32, i32* %i, align 4, !dbg !7192
  %idxprom83 = sext i32 %98 to i64, !dbg !7190
  %arrayidx84 = getelementptr inbounds i32, i32* %97, i64 %idxprom83, !dbg !7190
  %99 = load i32, i32* %arrayidx84, align 4, !dbg !7190
  %100 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7193
  %denominator85 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %100, i32 0, i32 3, !dbg !7193
  store i32 %99, i32* %denominator85, align 8, !dbg !7194
  %101 = load i32*, i32** %a.addr, align 8, !dbg !7195
  %102 = load i32, i32* %j, align 4, !dbg !7196
  %idxprom86 = sext i32 %102 to i64, !dbg !7195
  %arrayidx87 = getelementptr inbounds i32, i32* %101, i64 %idxprom86, !dbg !7195
  %103 = load i32, i32* %arrayidx87, align 4, !dbg !7195
  %104 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7197
  %constant88 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %104, i32 0, i32 1, !dbg !7197
  store i32 %103, i32* %constant88, align 8, !dbg !7198
  %105 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !7199
  %upper_bound = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %105, i32 0, i32 1, !dbg !7199
  %106 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %upper_bound, align 8, !dbg !7199
  %107 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7201
  %108 = load i32, i32* %depth.addr, align 4, !dbg !7202
  %109 = load i32, i32* %invariants.addr, align 4, !dbg !7203
  %call89 = call zeroext i8 @lle_equal(%struct.lambda_linear_expression_s* %106, %struct.lambda_linear_expression_s* %107, i32 %108, i32 %109), !dbg !7204
  %tobool90 = icmp ne i8 %call89, 0, !dbg !7204
  br i1 %tobool90, label %if.end95, label %if.then91, !dbg !7205

if.then91:                                        ; preds = %for.end80
  %110 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !7206
  %upper_bound92 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %110, i32 0, i32 1, !dbg !7206
  %111 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %upper_bound92, align 8, !dbg !7206
  %112 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7208
  %next93 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %112, i32 0, i32 4, !dbg !7208
  store %struct.lambda_linear_expression_s* %111, %struct.lambda_linear_expression_s** %next93, align 8, !dbg !7209
  %113 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %expression, align 8, !dbg !7210
  %114 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %loop, align 8, !dbg !7211
  %upper_bound94 = getelementptr inbounds %struct.lambda_loop_s, %struct.lambda_loop_s* %114, i32 0, i32 1, !dbg !7211
  store %struct.lambda_linear_expression_s* %113, %struct.lambda_linear_expression_s** %upper_bound94, align 8, !dbg !7212
  br label %if.end95, !dbg !7213

if.end95:                                         ; preds = %if.then91, %for.end80
  br label %if.end96, !dbg !7214

if.end96:                                         ; preds = %if.end95, %if.else
  br label %if.end97

if.end97:                                         ; preds = %if.end96, %if.end
  br label %for.inc98, !dbg !7215

for.inc98:                                        ; preds = %if.end97
  %115 = load i32, i32* %j, align 4, !dbg !7216
  %inc99 = add nsw i32 %115, 1, !dbg !7216
  store i32 %inc99, i32* %j, align 4, !dbg !7216
  br label %for.cond5, !dbg !7217, !llvm.loop !7218

for.end100:                                       ; preds = %for.cond5
  store i32 0, i32* %newsize, align 4, !dbg !7220
  store i32 0, i32* %j, align 4, !dbg !7221
  br label %for.cond101, !dbg !7223

for.cond101:                                      ; preds = %for.inc185, %for.end100
  %116 = load i32, i32* %j, align 4, !dbg !7224
  %117 = load i32, i32* %size.addr, align 4, !dbg !7226
  %cmp102 = icmp slt i32 %116, %117, !dbg !7227
  br i1 %cmp102, label %for.body103, label %for.end187, !dbg !7228

for.body103:                                      ; preds = %for.cond101
  %118 = load i32**, i32*** %A.addr, align 8, !dbg !7229
  %119 = load i32, i32* %j, align 4, !dbg !7232
  %idxprom104 = sext i32 %119 to i64, !dbg !7229
  %arrayidx105 = getelementptr inbounds i32*, i32** %118, i64 %idxprom104, !dbg !7229
  %120 = load i32*, i32** %arrayidx105, align 8, !dbg !7229
  %121 = load i32, i32* %i, align 4, !dbg !7233
  %idxprom106 = sext i32 %121 to i64, !dbg !7229
  %arrayidx107 = getelementptr inbounds i32, i32* %120, i64 %idxprom106, !dbg !7229
  %122 = load i32, i32* %arrayidx107, align 4, !dbg !7229
  %cmp108 = icmp eq i32 %122, 0, !dbg !7234
  br i1 %cmp108, label %if.then109, label %if.else123, !dbg !7235

if.then109:                                       ; preds = %for.body103
  %123 = load i32**, i32*** %A.addr, align 8, !dbg !7236
  %124 = load i32, i32* %j, align 4, !dbg !7238
  %idxprom110 = sext i32 %124 to i64, !dbg !7236
  %arrayidx111 = getelementptr inbounds i32*, i32** %123, i64 %idxprom110, !dbg !7236
  %125 = load i32*, i32** %arrayidx111, align 8, !dbg !7236
  %126 = load i32**, i32*** %A1, align 8, !dbg !7239
  %127 = load i32, i32* %newsize, align 4, !dbg !7240
  %idxprom112 = sext i32 %127 to i64, !dbg !7239
  %arrayidx113 = getelementptr inbounds i32*, i32** %126, i64 %idxprom112, !dbg !7239
  %128 = load i32*, i32** %arrayidx113, align 8, !dbg !7239
  %129 = load i32, i32* %depth.addr, align 4, !dbg !7241
  call void @lambda_vector_copy(i32* %125, i32* %128, i32 %129), !dbg !7242
  %130 = load i32**, i32*** %B.addr, align 8, !dbg !7243
  %131 = load i32, i32* %j, align 4, !dbg !7244
  %idxprom114 = sext i32 %131 to i64, !dbg !7243
  %arrayidx115 = getelementptr inbounds i32*, i32** %130, i64 %idxprom114, !dbg !7243
  %132 = load i32*, i32** %arrayidx115, align 8, !dbg !7243
  %133 = load i32**, i32*** %B1, align 8, !dbg !7245
  %134 = load i32, i32* %newsize, align 4, !dbg !7246
  %idxprom116 = sext i32 %134 to i64, !dbg !7245
  %arrayidx117 = getelementptr inbounds i32*, i32** %133, i64 %idxprom116, !dbg !7245
  %135 = load i32*, i32** %arrayidx117, align 8, !dbg !7245
  %136 = load i32, i32* %invariants.addr, align 4, !dbg !7247
  call void @lambda_vector_copy(i32* %132, i32* %135, i32 %136), !dbg !7248
  %137 = load i32*, i32** %a.addr, align 8, !dbg !7249
  %138 = load i32, i32* %j, align 4, !dbg !7250
  %idxprom118 = sext i32 %138 to i64, !dbg !7249
  %arrayidx119 = getelementptr inbounds i32, i32* %137, i64 %idxprom118, !dbg !7249
  %139 = load i32, i32* %arrayidx119, align 4, !dbg !7249
  %140 = load i32*, i32** %a1, align 8, !dbg !7251
  %141 = load i32, i32* %newsize, align 4, !dbg !7252
  %idxprom120 = sext i32 %141 to i64, !dbg !7251
  %arrayidx121 = getelementptr inbounds i32, i32* %140, i64 %idxprom120, !dbg !7251
  store i32 %139, i32* %arrayidx121, align 4, !dbg !7253
  %142 = load i32, i32* %newsize, align 4, !dbg !7254
  %inc122 = add nsw i32 %142, 1, !dbg !7254
  store i32 %inc122, i32* %newsize, align 4, !dbg !7254
  br label %if.end184, !dbg !7255

if.else123:                                       ; preds = %for.body103
  %143 = load i32**, i32*** %A.addr, align 8, !dbg !7256
  %144 = load i32, i32* %j, align 4, !dbg !7258
  %idxprom124 = sext i32 %144 to i64, !dbg !7256
  %arrayidx125 = getelementptr inbounds i32*, i32** %143, i64 %idxprom124, !dbg !7256
  %145 = load i32*, i32** %arrayidx125, align 8, !dbg !7256
  %146 = load i32, i32* %i, align 4, !dbg !7259
  %idxprom126 = sext i32 %146 to i64, !dbg !7256
  %arrayidx127 = getelementptr inbounds i32, i32* %145, i64 %idxprom126, !dbg !7256
  %147 = load i32, i32* %arrayidx127, align 4, !dbg !7256
  %cmp128 = icmp sgt i32 %147, 0, !dbg !7260
  br i1 %cmp128, label %if.then129, label %if.end183, !dbg !7261

if.then129:                                       ; preds = %if.else123
  store i32 0, i32* %k, align 4, !dbg !7262
  br label %for.cond130, !dbg !7265

for.cond130:                                      ; preds = %for.inc180, %if.then129
  %148 = load i32, i32* %k, align 4, !dbg !7266
  %149 = load i32, i32* %size.addr, align 4, !dbg !7268
  %cmp131 = icmp slt i32 %148, %149, !dbg !7269
  br i1 %cmp131, label %for.body132, label %for.end182, !dbg !7270

for.body132:                                      ; preds = %for.cond130
  %150 = load i32**, i32*** %A.addr, align 8, !dbg !7271
  %151 = load i32, i32* %k, align 4, !dbg !7274
  %idxprom133 = sext i32 %151 to i64, !dbg !7271
  %arrayidx134 = getelementptr inbounds i32*, i32** %150, i64 %idxprom133, !dbg !7271
  %152 = load i32*, i32** %arrayidx134, align 8, !dbg !7271
  %153 = load i32, i32* %i, align 4, !dbg !7275
  %idxprom135 = sext i32 %153 to i64, !dbg !7271
  %arrayidx136 = getelementptr inbounds i32, i32* %152, i64 %idxprom135, !dbg !7271
  %154 = load i32, i32* %arrayidx136, align 4, !dbg !7271
  %cmp137 = icmp slt i32 %154, 0, !dbg !7276
  br i1 %cmp137, label %if.then138, label %if.end179, !dbg !7277

if.then138:                                       ; preds = %for.body132
  %155 = load i32**, i32*** %A.addr, align 8, !dbg !7278
  %156 = load i32, i32* %j, align 4, !dbg !7280
  %idxprom139 = sext i32 %156 to i64, !dbg !7278
  %arrayidx140 = getelementptr inbounds i32*, i32** %155, i64 %idxprom139, !dbg !7278
  %157 = load i32*, i32** %arrayidx140, align 8, !dbg !7278
  %158 = load i32, i32* %i, align 4, !dbg !7281
  %idxprom141 = sext i32 %158 to i64, !dbg !7278
  %arrayidx142 = getelementptr inbounds i32, i32* %157, i64 %idxprom141, !dbg !7278
  %159 = load i32, i32* %arrayidx142, align 4, !dbg !7278
  %160 = load i32**, i32*** %A.addr, align 8, !dbg !7282
  %161 = load i32, i32* %k, align 4, !dbg !7283
  %idxprom143 = sext i32 %161 to i64, !dbg !7282
  %arrayidx144 = getelementptr inbounds i32*, i32** %160, i64 %idxprom143, !dbg !7282
  %162 = load i32*, i32** %arrayidx144, align 8, !dbg !7282
  %163 = load i32, i32* %i, align 4, !dbg !7284
  %idxprom145 = sext i32 %163 to i64, !dbg !7282
  %arrayidx146 = getelementptr inbounds i32, i32* %162, i64 %idxprom145, !dbg !7282
  %164 = load i32, i32* %arrayidx146, align 4, !dbg !7282
  %call147 = call i32 @least_common_multiple(i32 %159, i32 %164), !dbg !7285
  store i32 %call147, i32* %multiple, align 4, !dbg !7286
  %165 = load i32, i32* %multiple, align 4, !dbg !7287
  %166 = load i32**, i32*** %A.addr, align 8, !dbg !7288
  %167 = load i32, i32* %j, align 4, !dbg !7289
  %idxprom148 = sext i32 %167 to i64, !dbg !7288
  %arrayidx149 = getelementptr inbounds i32*, i32** %166, i64 %idxprom148, !dbg !7288
  %168 = load i32*, i32** %arrayidx149, align 8, !dbg !7288
  %169 = load i32, i32* %i, align 4, !dbg !7290
  %idxprom150 = sext i32 %169 to i64, !dbg !7288
  %arrayidx151 = getelementptr inbounds i32, i32* %168, i64 %idxprom150, !dbg !7288
  %170 = load i32, i32* %arrayidx151, align 4, !dbg !7288
  %div = sdiv i32 %165, %170, !dbg !7291
  store i32 %div, i32* %f1, align 4, !dbg !7292
  %171 = load i32, i32* %multiple, align 4, !dbg !7293
  %mul152 = mul nsw i32 -1, %171, !dbg !7294
  %172 = load i32**, i32*** %A.addr, align 8, !dbg !7295
  %173 = load i32, i32* %k, align 4, !dbg !7296
  %idxprom153 = sext i32 %173 to i64, !dbg !7295
  %arrayidx154 = getelementptr inbounds i32*, i32** %172, i64 %idxprom153, !dbg !7295
  %174 = load i32*, i32** %arrayidx154, align 8, !dbg !7295
  %175 = load i32, i32* %i, align 4, !dbg !7297
  %idxprom155 = sext i32 %175 to i64, !dbg !7295
  %arrayidx156 = getelementptr inbounds i32, i32* %174, i64 %idxprom155, !dbg !7295
  %176 = load i32, i32* %arrayidx156, align 4, !dbg !7295
  %div157 = sdiv i32 %mul152, %176, !dbg !7298
  store i32 %div157, i32* %f2, align 4, !dbg !7299
  %177 = load i32**, i32*** %A.addr, align 8, !dbg !7300
  %178 = load i32, i32* %j, align 4, !dbg !7301
  %idxprom158 = sext i32 %178 to i64, !dbg !7300
  %arrayidx159 = getelementptr inbounds i32*, i32** %177, i64 %idxprom158, !dbg !7300
  %179 = load i32*, i32** %arrayidx159, align 8, !dbg !7300
  %180 = load i32, i32* %f1, align 4, !dbg !7302
  %181 = load i32**, i32*** %A.addr, align 8, !dbg !7303
  %182 = load i32, i32* %k, align 4, !dbg !7304
  %idxprom160 = sext i32 %182 to i64, !dbg !7303
  %arrayidx161 = getelementptr inbounds i32*, i32** %181, i64 %idxprom160, !dbg !7303
  %183 = load i32*, i32** %arrayidx161, align 8, !dbg !7303
  %184 = load i32, i32* %f2, align 4, !dbg !7305
  %185 = load i32**, i32*** %A1, align 8, !dbg !7306
  %186 = load i32, i32* %newsize, align 4, !dbg !7307
  %idxprom162 = sext i32 %186 to i64, !dbg !7306
  %arrayidx163 = getelementptr inbounds i32*, i32** %185, i64 %idxprom162, !dbg !7306
  %187 = load i32*, i32** %arrayidx163, align 8, !dbg !7306
  %188 = load i32, i32* %depth.addr, align 4, !dbg !7308
  call void @lambda_vector_add_mc(i32* %179, i32 %180, i32* %183, i32 %184, i32* %187, i32 %188), !dbg !7309
  %189 = load i32**, i32*** %B.addr, align 8, !dbg !7310
  %190 = load i32, i32* %j, align 4, !dbg !7311
  %idxprom164 = sext i32 %190 to i64, !dbg !7310
  %arrayidx165 = getelementptr inbounds i32*, i32** %189, i64 %idxprom164, !dbg !7310
  %191 = load i32*, i32** %arrayidx165, align 8, !dbg !7310
  %192 = load i32, i32* %f1, align 4, !dbg !7312
  %193 = load i32**, i32*** %B.addr, align 8, !dbg !7313
  %194 = load i32, i32* %k, align 4, !dbg !7314
  %idxprom166 = sext i32 %194 to i64, !dbg !7313
  %arrayidx167 = getelementptr inbounds i32*, i32** %193, i64 %idxprom166, !dbg !7313
  %195 = load i32*, i32** %arrayidx167, align 8, !dbg !7313
  %196 = load i32, i32* %f2, align 4, !dbg !7315
  %197 = load i32**, i32*** %B1, align 8, !dbg !7316
  %198 = load i32, i32* %newsize, align 4, !dbg !7317
  %idxprom168 = sext i32 %198 to i64, !dbg !7316
  %arrayidx169 = getelementptr inbounds i32*, i32** %197, i64 %idxprom168, !dbg !7316
  %199 = load i32*, i32** %arrayidx169, align 8, !dbg !7316
  %200 = load i32, i32* %invariants.addr, align 4, !dbg !7318
  call void @lambda_vector_add_mc(i32* %191, i32 %192, i32* %195, i32 %196, i32* %199, i32 %200), !dbg !7319
  %201 = load i32, i32* %f1, align 4, !dbg !7320
  %202 = load i32*, i32** %a.addr, align 8, !dbg !7321
  %203 = load i32, i32* %j, align 4, !dbg !7322
  %idxprom170 = sext i32 %203 to i64, !dbg !7321
  %arrayidx171 = getelementptr inbounds i32, i32* %202, i64 %idxprom170, !dbg !7321
  %204 = load i32, i32* %arrayidx171, align 4, !dbg !7321
  %mul172 = mul nsw i32 %201, %204, !dbg !7323
  %205 = load i32, i32* %f2, align 4, !dbg !7324
  %206 = load i32*, i32** %a.addr, align 8, !dbg !7325
  %207 = load i32, i32* %k, align 4, !dbg !7326
  %idxprom173 = sext i32 %207 to i64, !dbg !7325
  %arrayidx174 = getelementptr inbounds i32, i32* %206, i64 %idxprom173, !dbg !7325
  %208 = load i32, i32* %arrayidx174, align 4, !dbg !7325
  %mul175 = mul nsw i32 %205, %208, !dbg !7327
  %add = add nsw i32 %mul172, %mul175, !dbg !7328
  %209 = load i32*, i32** %a1, align 8, !dbg !7329
  %210 = load i32, i32* %newsize, align 4, !dbg !7330
  %idxprom176 = sext i32 %210 to i64, !dbg !7329
  %arrayidx177 = getelementptr inbounds i32, i32* %209, i64 %idxprom176, !dbg !7329
  store i32 %add, i32* %arrayidx177, align 4, !dbg !7331
  %211 = load i32, i32* %newsize, align 4, !dbg !7332
  %inc178 = add nsw i32 %211, 1, !dbg !7332
  store i32 %inc178, i32* %newsize, align 4, !dbg !7332
  br label %if.end179, !dbg !7333

if.end179:                                        ; preds = %if.then138, %for.body132
  br label %for.inc180, !dbg !7334

for.inc180:                                       ; preds = %if.end179
  %212 = load i32, i32* %k, align 4, !dbg !7335
  %inc181 = add nsw i32 %212, 1, !dbg !7335
  store i32 %inc181, i32* %k, align 4, !dbg !7335
  br label %for.cond130, !dbg !7336, !llvm.loop !7337

for.end182:                                       ; preds = %for.cond130
  br label %if.end183, !dbg !7339

if.end183:                                        ; preds = %for.end182, %if.else123
  br label %if.end184

if.end184:                                        ; preds = %if.end183, %if.then109
  br label %for.inc185, !dbg !7340

for.inc185:                                       ; preds = %if.end184
  %213 = load i32, i32* %j, align 4, !dbg !7341
  %inc186 = add nsw i32 %213, 1, !dbg !7341
  store i32 %inc186, i32* %j, align 4, !dbg !7341
  br label %for.cond101, !dbg !7342, !llvm.loop !7343

for.end187:                                       ; preds = %for.cond101
  %214 = load i32**, i32*** %A.addr, align 8, !dbg !7345
  store i32** %214, i32*** %swapmatrix, align 8, !dbg !7346
  %215 = load i32**, i32*** %A1, align 8, !dbg !7347
  store i32** %215, i32*** %A.addr, align 8, !dbg !7348
  %216 = load i32**, i32*** %swapmatrix, align 8, !dbg !7349
  store i32** %216, i32*** %A1, align 8, !dbg !7350
  %217 = load i32**, i32*** %B.addr, align 8, !dbg !7351
  store i32** %217, i32*** %swapmatrix, align 8, !dbg !7352
  %218 = load i32**, i32*** %B1, align 8, !dbg !7353
  store i32** %218, i32*** %B.addr, align 8, !dbg !7354
  %219 = load i32**, i32*** %swapmatrix, align 8, !dbg !7355
  store i32** %219, i32*** %B1, align 8, !dbg !7356
  %220 = load i32*, i32** %a.addr, align 8, !dbg !7357
  store i32* %220, i32** %swapvector, align 8, !dbg !7358
  %221 = load i32*, i32** %a1, align 8, !dbg !7359
  store i32* %221, i32** %a.addr, align 8, !dbg !7360
  %222 = load i32*, i32** %swapvector, align 8, !dbg !7361
  store i32* %222, i32** %a1, align 8, !dbg !7362
  %223 = load i32, i32* %newsize, align 4, !dbg !7363
  store i32 %223, i32* %size.addr, align 4, !dbg !7364
  br label %for.inc188, !dbg !7365

for.inc188:                                       ; preds = %for.end187
  %224 = load i32, i32* %i, align 4, !dbg !7366
  %dec = add nsw i32 %224, -1, !dbg !7366
  store i32 %dec, i32* %i, align 4, !dbg !7366
  br label %for.cond, !dbg !7367, !llvm.loop !7368

for.end189:                                       ; preds = %for.cond
  %225 = load %struct.lambda_loopnest_s*, %struct.lambda_loopnest_s** %auxillary_nest, align 8, !dbg !7370
  ret %struct.lambda_loopnest_s* %225, !dbg !7371
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @lle_equal(%struct.lambda_linear_expression_s* %lle1, %struct.lambda_linear_expression_s* %lle2, i32 %depth, i32 %invariants) #0 !dbg !7372 {
entry:
  %retval = alloca i8, align 1
  %lle1.addr = alloca %struct.lambda_linear_expression_s*, align 8
  %lle2.addr = alloca %struct.lambda_linear_expression_s*, align 8
  %depth.addr = alloca i32, align 4
  %invariants.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.lambda_linear_expression_s* %lle1, %struct.lambda_linear_expression_s** %lle1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %lle1.addr, metadata !7375, metadata !DIExpression()), !dbg !7376
  store %struct.lambda_linear_expression_s* %lle2, %struct.lambda_linear_expression_s** %lle2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %lle2.addr, metadata !7377, metadata !DIExpression()), !dbg !7378
  store i32 %depth, i32* %depth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %depth.addr, metadata !7379, metadata !DIExpression()), !dbg !7380
  store i32 %invariants, i32* %invariants.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %invariants.addr, metadata !7381, metadata !DIExpression()), !dbg !7382
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7383, metadata !DIExpression()), !dbg !7384
  %0 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle1.addr, align 8, !dbg !7385
  %cmp = icmp eq %struct.lambda_linear_expression_s* %0, null, !dbg !7387
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7388

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle2.addr, align 8, !dbg !7389
  %cmp1 = icmp eq %struct.lambda_linear_expression_s* %1, null, !dbg !7390
  br i1 %cmp1, label %if.then, label %if.end, !dbg !7391

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !7392
  br label %return, !dbg !7392

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle1.addr, align 8, !dbg !7393
  %constant = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %2, i32 0, i32 1, !dbg !7393
  %3 = load i32, i32* %constant, align 8, !dbg !7393
  %4 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle2.addr, align 8, !dbg !7395
  %constant2 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %4, i32 0, i32 1, !dbg !7395
  %5 = load i32, i32* %constant2, align 8, !dbg !7395
  %cmp3 = icmp ne i32 %3, %5, !dbg !7396
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !7397

if.then4:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !7398
  br label %return, !dbg !7398

if.end5:                                          ; preds = %if.end
  %6 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle1.addr, align 8, !dbg !7399
  %denominator = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %6, i32 0, i32 3, !dbg !7399
  %7 = load i32, i32* %denominator, align 8, !dbg !7399
  %8 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle2.addr, align 8, !dbg !7401
  %denominator6 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %8, i32 0, i32 3, !dbg !7401
  %9 = load i32, i32* %denominator6, align 8, !dbg !7401
  %cmp7 = icmp ne i32 %7, %9, !dbg !7402
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !7403

if.then8:                                         ; preds = %if.end5
  store i8 0, i8* %retval, align 1, !dbg !7404
  br label %return, !dbg !7404

if.end9:                                          ; preds = %if.end5
  store i32 0, i32* %i, align 4, !dbg !7405
  br label %for.cond, !dbg !7407

for.cond:                                         ; preds = %for.inc, %if.end9
  %10 = load i32, i32* %i, align 4, !dbg !7408
  %11 = load i32, i32* %depth.addr, align 4, !dbg !7410
  %cmp10 = icmp slt i32 %10, %11, !dbg !7411
  br i1 %cmp10, label %for.body, label %for.end, !dbg !7412

for.body:                                         ; preds = %for.cond
  %12 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle1.addr, align 8, !dbg !7413
  %coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %12, i32 0, i32 0, !dbg !7413
  %13 = load i32*, i32** %coefficients, align 8, !dbg !7413
  %14 = load i32, i32* %i, align 4, !dbg !7415
  %idxprom = sext i32 %14 to i64, !dbg !7413
  %arrayidx = getelementptr inbounds i32, i32* %13, i64 %idxprom, !dbg !7413
  %15 = load i32, i32* %arrayidx, align 4, !dbg !7413
  %16 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle2.addr, align 8, !dbg !7416
  %coefficients11 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %16, i32 0, i32 0, !dbg !7416
  %17 = load i32*, i32** %coefficients11, align 8, !dbg !7416
  %18 = load i32, i32* %i, align 4, !dbg !7417
  %idxprom12 = sext i32 %18 to i64, !dbg !7416
  %arrayidx13 = getelementptr inbounds i32, i32* %17, i64 %idxprom12, !dbg !7416
  %19 = load i32, i32* %arrayidx13, align 4, !dbg !7416
  %cmp14 = icmp ne i32 %15, %19, !dbg !7418
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !7419

if.then15:                                        ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !7420
  br label %return, !dbg !7420

if.end16:                                         ; preds = %for.body
  br label %for.inc, !dbg !7421

for.inc:                                          ; preds = %if.end16
  %20 = load i32, i32* %i, align 4, !dbg !7422
  %inc = add nsw i32 %20, 1, !dbg !7422
  store i32 %inc, i32* %i, align 4, !dbg !7422
  br label %for.cond, !dbg !7423, !llvm.loop !7424

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !7426
  br label %for.cond17, !dbg !7428

for.cond17:                                       ; preds = %for.inc28, %for.end
  %21 = load i32, i32* %i, align 4, !dbg !7429
  %22 = load i32, i32* %invariants.addr, align 4, !dbg !7431
  %cmp18 = icmp slt i32 %21, %22, !dbg !7432
  br i1 %cmp18, label %for.body19, label %for.end30, !dbg !7433

for.body19:                                       ; preds = %for.cond17
  %23 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle1.addr, align 8, !dbg !7434
  %invariant_coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %23, i32 0, i32 2, !dbg !7434
  %24 = load i32*, i32** %invariant_coefficients, align 8, !dbg !7434
  %25 = load i32, i32* %i, align 4, !dbg !7436
  %idxprom20 = sext i32 %25 to i64, !dbg !7434
  %arrayidx21 = getelementptr inbounds i32, i32* %24, i64 %idxprom20, !dbg !7434
  %26 = load i32, i32* %arrayidx21, align 4, !dbg !7434
  %27 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle2.addr, align 8, !dbg !7437
  %invariant_coefficients22 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %27, i32 0, i32 2, !dbg !7437
  %28 = load i32*, i32** %invariant_coefficients22, align 8, !dbg !7437
  %29 = load i32, i32* %i, align 4, !dbg !7438
  %idxprom23 = sext i32 %29 to i64, !dbg !7437
  %arrayidx24 = getelementptr inbounds i32, i32* %28, i64 %idxprom23, !dbg !7437
  %30 = load i32, i32* %arrayidx24, align 4, !dbg !7437
  %cmp25 = icmp ne i32 %26, %30, !dbg !7439
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !7440

if.then26:                                        ; preds = %for.body19
  store i8 0, i8* %retval, align 1, !dbg !7441
  br label %return, !dbg !7441

if.end27:                                         ; preds = %for.body19
  br label %for.inc28, !dbg !7442

for.inc28:                                        ; preds = %if.end27
  %31 = load i32, i32* %i, align 4, !dbg !7443
  %inc29 = add nsw i32 %31, 1, !dbg !7443
  store i32 %inc29, i32* %i, align 4, !dbg !7443
  br label %for.cond17, !dbg !7444, !llvm.loop !7445

for.end30:                                        ; preds = %for.cond17
  store i8 1, i8* %retval, align 1, !dbg !7447
  br label %return, !dbg !7447

return:                                           ; preds = %for.end30, %if.then26, %if.then15, %if.then8, %if.then4, %if.then
  %32 = load i8, i8* %retval, align 1, !dbg !7448
  ret i8 %32, !dbg !7448
}

; Function Attrs: noinline nounwind uwtable
define internal void @lambda_vector_copy(i32* %vec1, i32* %vec2, i32 %size) #0 !dbg !7449 {
entry:
  %vec1.addr = alloca i32*, align 8
  %vec2.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  store i32* %vec1, i32** %vec1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec1.addr, metadata !7452, metadata !DIExpression()), !dbg !7453
  store i32* %vec2, i32** %vec2.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec2.addr, metadata !7454, metadata !DIExpression()), !dbg !7455
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !7456, metadata !DIExpression()), !dbg !7457
  %0 = load i32*, i32** %vec2.addr, align 8, !dbg !7458
  %1 = bitcast i32* %0 to i8*, !dbg !7459
  %2 = load i32*, i32** %vec1.addr, align 8, !dbg !7460
  %3 = bitcast i32* %2 to i8*, !dbg !7459
  %4 = load i32, i32* %size.addr, align 4, !dbg !7461
  %conv = sext i32 %4 to i64, !dbg !7461
  %mul = mul i64 %conv, 4, !dbg !7462
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 %3, i64 %mul, i1 false), !dbg !7459
  ret void, !dbg !7463
}

declare dso_local void @lambda_matrix_copy(i32**, i32**, i32, i32) #2

declare dso_local void @lambda_matrix_col_negate(i32**, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @lambda_vector_first_nz(i32* %vec1, i32 %n, i32 %start) #0 !dbg !7464 {
entry:
  %vec1.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %start.addr = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %vec1, i32** %vec1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec1.addr, metadata !7467, metadata !DIExpression()), !dbg !7468
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !7469, metadata !DIExpression()), !dbg !7470
  store i32 %start, i32* %start.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start.addr, metadata !7471, metadata !DIExpression()), !dbg !7472
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7473, metadata !DIExpression()), !dbg !7474
  %0 = load i32, i32* %start.addr, align 4, !dbg !7475
  store i32 %0, i32* %j, align 4, !dbg !7474
  br label %while.cond, !dbg !7476

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %j, align 4, !dbg !7477
  %2 = load i32, i32* %n.addr, align 4, !dbg !7478
  %cmp = icmp slt i32 %1, %2, !dbg !7479
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7480

land.rhs:                                         ; preds = %while.cond
  %3 = load i32*, i32** %vec1.addr, align 8, !dbg !7481
  %4 = load i32, i32* %j, align 4, !dbg !7482
  %idxprom = sext i32 %4 to i64, !dbg !7481
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !7481
  %5 = load i32, i32* %arrayidx, align 4, !dbg !7481
  %cmp1 = icmp eq i32 %5, 0, !dbg !7483
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ], !dbg !7484
  br i1 %6, label %while.body, label %while.end, !dbg !7476

while.body:                                       ; preds = %land.end
  %7 = load i32, i32* %j, align 4, !dbg !7485
  %inc = add nsw i32 %7, 1, !dbg !7485
  store i32 %inc, i32* %j, align 4, !dbg !7485
  br label %while.cond, !dbg !7476, !llvm.loop !7486

while.end:                                        ; preds = %land.end
  %8 = load i32, i32* %j, align 4, !dbg !7487
  ret i32 %8, !dbg !7488
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @lambda_vector_min_nz(i32* %vec1, i32 %n, i32 %start) #0 !dbg !7489 {
entry:
  %vec1.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %start.addr = alloca i32, align 4
  %j = alloca i32, align 4
  %min = alloca i32, align 4
  store i32* %vec1, i32** %vec1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec1.addr, metadata !7490, metadata !DIExpression()), !dbg !7491
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !7492, metadata !DIExpression()), !dbg !7493
  store i32 %start, i32* %start.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start.addr, metadata !7494, metadata !DIExpression()), !dbg !7495
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7496, metadata !DIExpression()), !dbg !7497
  call void @llvm.dbg.declare(metadata i32* %min, metadata !7498, metadata !DIExpression()), !dbg !7499
  store i32 -1, i32* %min, align 4, !dbg !7499
  %0 = load i32, i32* %start.addr, align 4, !dbg !7500
  %1 = load i32, i32* %n.addr, align 4, !dbg !7500
  %cmp = icmp sle i32 %0, %1, !dbg !7500
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7500

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i64 0, i64 0), i32 345, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7500
  br label %cond.end, !dbg !7500

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7500

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7500
  %2 = load i32, i32* %start.addr, align 4, !dbg !7501
  store i32 %2, i32* %j, align 4, !dbg !7503
  br label %for.cond, !dbg !7504

for.cond:                                         ; preds = %for.inc, %cond.end
  %3 = load i32, i32* %j, align 4, !dbg !7505
  %4 = load i32, i32* %n.addr, align 4, !dbg !7507
  %cmp1 = icmp slt i32 %3, %4, !dbg !7508
  br i1 %cmp1, label %for.body, label %for.end, !dbg !7509

for.body:                                         ; preds = %for.cond
  %5 = load i32*, i32** %vec1.addr, align 8, !dbg !7510
  %6 = load i32, i32* %j, align 4, !dbg !7513
  %idxprom = sext i32 %6 to i64, !dbg !7510
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom, !dbg !7510
  %7 = load i32, i32* %arrayidx, align 4, !dbg !7510
  %tobool = icmp ne i32 %7, 0, !dbg !7510
  br i1 %tobool, label %if.then, label %if.end9, !dbg !7514

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %min, align 4, !dbg !7515
  %cmp2 = icmp slt i32 %8, 0, !dbg !7517
  br i1 %cmp2, label %if.then8, label %lor.lhs.false, !dbg !7518

lor.lhs.false:                                    ; preds = %if.then
  %9 = load i32*, i32** %vec1.addr, align 8, !dbg !7519
  %10 = load i32, i32* %j, align 4, !dbg !7520
  %idxprom3 = sext i32 %10 to i64, !dbg !7519
  %arrayidx4 = getelementptr inbounds i32, i32* %9, i64 %idxprom3, !dbg !7519
  %11 = load i32, i32* %arrayidx4, align 4, !dbg !7519
  %12 = load i32*, i32** %vec1.addr, align 8, !dbg !7521
  %13 = load i32, i32* %min, align 4, !dbg !7522
  %idxprom5 = sext i32 %13 to i64, !dbg !7521
  %arrayidx6 = getelementptr inbounds i32, i32* %12, i64 %idxprom5, !dbg !7521
  %14 = load i32, i32* %arrayidx6, align 4, !dbg !7521
  %cmp7 = icmp slt i32 %11, %14, !dbg !7523
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !7524

if.then8:                                         ; preds = %lor.lhs.false, %if.then
  %15 = load i32, i32* %j, align 4, !dbg !7525
  store i32 %15, i32* %min, align 4, !dbg !7526
  br label %if.end, !dbg !7527

if.end:                                           ; preds = %if.then8, %lor.lhs.false
  br label %if.end9, !dbg !7528

if.end9:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !7529

for.inc:                                          ; preds = %if.end9
  %16 = load i32, i32* %j, align 4, !dbg !7530
  %inc = add nsw i32 %16, 1, !dbg !7530
  store i32 %inc, i32* %j, align 4, !dbg !7530
  br label %for.cond, !dbg !7531, !llvm.loop !7532

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %min, align 4, !dbg !7534
  %cmp10 = icmp sge i32 %17, 0, !dbg !7534
  br i1 %cmp10, label %cond.false12, label %cond.true11, !dbg !7534

cond.true11:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i64 0, i64 0), i32 352, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7534
  br label %cond.end13, !dbg !7534

cond.false12:                                     ; preds = %for.end
  br label %cond.end13, !dbg !7534

cond.end13:                                       ; preds = %cond.false12, %cond.true11
  %cond14 = phi i32 [ 0, %cond.true11 ], [ 0, %cond.false12 ], !dbg !7534
  %18 = load i32, i32* %min, align 4, !dbg !7535
  ret i32 %18, !dbg !7536
}

declare dso_local void @lambda_matrix_col_exchange(i32**, i32, i32, i32) #2

declare dso_local void @lambda_matrix_col_add(i32**, i32, i32, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @lambda_vector_gcd(i32* %vector, i32 %size) #0 !dbg !7537 {
entry:
  %vector.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %gcd1 = alloca i32, align 4
  store i32* %vector, i32** %vector.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vector.addr, metadata !7540, metadata !DIExpression()), !dbg !7541
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !7542, metadata !DIExpression()), !dbg !7543
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7544, metadata !DIExpression()), !dbg !7545
  call void @llvm.dbg.declare(metadata i32* %gcd1, metadata !7546, metadata !DIExpression()), !dbg !7547
  store i32 0, i32* %gcd1, align 4, !dbg !7547
  %0 = load i32, i32* %size.addr, align 4, !dbg !7548
  %cmp = icmp sgt i32 %0, 0, !dbg !7550
  br i1 %cmp, label %if.then, label %if.end, !dbg !7551

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %vector.addr, align 8, !dbg !7552
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 0, !dbg !7552
  %2 = load i32, i32* %arrayidx, align 4, !dbg !7552
  store i32 %2, i32* %gcd1, align 4, !dbg !7554
  store i32 1, i32* %i, align 4, !dbg !7555
  br label %for.cond, !dbg !7557

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %i, align 4, !dbg !7558
  %4 = load i32, i32* %size.addr, align 4, !dbg !7560
  %cmp1 = icmp slt i32 %3, %4, !dbg !7561
  br i1 %cmp1, label %for.body, label %for.end, !dbg !7562

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %gcd1, align 4, !dbg !7563
  %6 = load i32*, i32** %vector.addr, align 8, !dbg !7564
  %7 = load i32, i32* %i, align 4, !dbg !7565
  %idxprom = sext i32 %7 to i64, !dbg !7564
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i64 %idxprom, !dbg !7564
  %8 = load i32, i32* %arrayidx2, align 4, !dbg !7564
  %call = call i32 @gcd(i32 %5, i32 %8), !dbg !7566
  store i32 %call, i32* %gcd1, align 4, !dbg !7567
  br label %for.inc, !dbg !7568

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !7569
  %inc = add nsw i32 %9, 1, !dbg !7569
  store i32 %inc, i32* %i, align 4, !dbg !7569
  br label %for.cond, !dbg !7570, !llvm.loop !7571

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !7573

if.end:                                           ; preds = %for.end, %entry
  %10 = load i32, i32* %gcd1, align 4, !dbg !7574
  ret i32 %10, !dbg !7575
}

; Function Attrs: noinline nounwind uwtable
define internal void @lambda_vector_mult_const(i32* %vec1, i32* %vec2, i32 %size, i32 %const1) #0 !dbg !7576 {
entry:
  %vec1.addr = alloca i32*, align 8
  %vec2.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  %const1.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %vec1, i32** %vec1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec1.addr, metadata !7579, metadata !DIExpression()), !dbg !7580
  store i32* %vec2, i32** %vec2.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec2.addr, metadata !7581, metadata !DIExpression()), !dbg !7582
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !7583, metadata !DIExpression()), !dbg !7584
  store i32 %const1, i32* %const1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %const1.addr, metadata !7585, metadata !DIExpression()), !dbg !7586
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7587, metadata !DIExpression()), !dbg !7588
  %0 = load i32, i32* %const1.addr, align 4, !dbg !7589
  %cmp = icmp eq i32 %0, 0, !dbg !7591
  br i1 %cmp, label %if.then, label %if.else, !dbg !7592

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %vec2.addr, align 8, !dbg !7593
  %2 = load i32, i32* %size.addr, align 4, !dbg !7594
  call void @lambda_vector_clear(i32* %1, i32 %2), !dbg !7595
  br label %if.end, !dbg !7595

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !7596
  br label %for.cond, !dbg !7598

for.cond:                                         ; preds = %for.inc, %if.else
  %3 = load i32, i32* %i, align 4, !dbg !7599
  %4 = load i32, i32* %size.addr, align 4, !dbg !7601
  %cmp1 = icmp slt i32 %3, %4, !dbg !7602
  br i1 %cmp1, label %for.body, label %for.end, !dbg !7603

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %const1.addr, align 4, !dbg !7604
  %6 = load i32*, i32** %vec1.addr, align 8, !dbg !7605
  %7 = load i32, i32* %i, align 4, !dbg !7606
  %idxprom = sext i32 %7 to i64, !dbg !7605
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom, !dbg !7605
  %8 = load i32, i32* %arrayidx, align 4, !dbg !7605
  %mul = mul nsw i32 %5, %8, !dbg !7607
  %9 = load i32*, i32** %vec2.addr, align 8, !dbg !7608
  %10 = load i32, i32* %i, align 4, !dbg !7609
  %idxprom2 = sext i32 %10 to i64, !dbg !7608
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i64 %idxprom2, !dbg !7608
  store i32 %mul, i32* %arrayidx3, align 4, !dbg !7610
  br label %for.inc, !dbg !7608

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !7611
  %inc = add nsw i32 %11, 1, !dbg !7611
  store i32 %inc, i32* %i, align 4, !dbg !7611
  br label %for.cond, !dbg !7612, !llvm.loop !7613

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret void, !dbg !7615
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !7616 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7619, metadata !DIExpression()), !dbg !7620
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7621, metadata !DIExpression()), !dbg !7622
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7623
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7625
  %tobool = icmp ne i8 %call, 0, !dbg !7625
  br i1 %tobool, label %if.then, label %if.else, !dbg !7626

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7627
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !7629
  %2 = load i32, i32* %i.addr, align 4, !dbg !7630
  %idxprom = zext i32 %2 to i64, !dbg !7629
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !7629
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7629
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !7631
  br label %return, !dbg !7631

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7632
  br label %return, !dbg !7632

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7633
  ret %union.tree_node* %4, !dbg !7633
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !7634 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7635, metadata !DIExpression()), !dbg !7636
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7637
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7638
  %cmp = icmp uge i32 %call, 1, !dbg !7639
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7640

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7641
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !7642
  %cmp2 = icmp ule i32 %call1, 9, !dbg !7643
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !7644
  %land.ext = zext i1 %2 to i32, !dbg !7640
  %conv = trunc i32 %land.ext to i8, !dbg !7638
  ret i8 %conv, !dbg !7645
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !7646 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7647, metadata !DIExpression()), !dbg !7648
  call void @llvm.dbg.declare(metadata i64* %off, metadata !7649, metadata !DIExpression()), !dbg !7650
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7651
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !7652
  %idxprom = zext i32 %call to i64, !dbg !7653
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !7653
  %1 = load i64, i64* %arrayidx, align 8, !dbg !7653
  store i64 %1, i64* %off, align 8, !dbg !7654
  %2 = load i64, i64* %off, align 8, !dbg !7655
  %cmp = icmp ne i64 %2, 0, !dbg !7655
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7655

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7655
  br label %cond.end, !dbg !7655

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7655

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7655
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7656
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !7657
  %5 = load i64, i64* %off, align 8, !dbg !7658
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !7659
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !7660
  ret %union.tree_node** %6, !dbg !7661
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !7662 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7665, metadata !DIExpression()), !dbg !7666
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7667
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7668
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !7669
  ret i32 %call1, !dbg !7670
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !7671 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7674, metadata !DIExpression()), !dbg !7675
  %0 = load i32, i32* %code.addr, align 4, !dbg !7676
  %idxprom = zext i32 %0 to i64, !dbg !7677
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !7677
  %1 = load i32, i32* %arrayidx, align 4, !dbg !7677
  ret i32 %1, !dbg !7678
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @instantiate_parameters(%struct.loop* %loop, %union.tree_node* %chrec) #0 !dbg !7679 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7683, metadata !DIExpression()), !dbg !7684
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !7685, metadata !DIExpression()), !dbg !7686
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7687
  %call = call %struct.basic_block_def* @block_before_loop(%struct.loop* %0), !dbg !7688
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7689
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !7690
  %call1 = call %union.tree_node* @instantiate_scev(%struct.basic_block_def* %call, %struct.loop* %1, %union.tree_node* %2), !dbg !7691
  ret %union.tree_node* %call1, !dbg !7692
}

declare dso_local %union.tree_node* @analyze_scalar_evolution(%struct.loop*, %union.tree_node*) #2

declare dso_local %union.tree_node* @evolution_part_in_loop_num(%union.tree_node*, i32) #2

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !7693 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !7696, metadata !DIExpression()), !dbg !7697
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !7698
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !7699
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !7699
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !7700
  ret %union.tree_node* %2, !dbg !7701
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !7702 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7705, metadata !DIExpression()), !dbg !7706
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7707, metadata !DIExpression()), !dbg !7708
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7709
  %1 = load i32, i32* %i.addr, align 4, !dbg !7710
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !7711
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !7712
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !7713
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.lambda_linear_expression_s* @gcc_tree_to_linear_expression(i32 %depth, %union.tree_node* %expr, %struct.VEC_tree_heap* %outerinductionvars, %struct.VEC_tree_heap* %invariants, i32 %extra, %struct.obstack* %lambda_obstack) #0 !dbg !7714 {
entry:
  %retval = alloca %struct.lambda_linear_expression_s*, align 8
  %depth.addr = alloca i32, align 4
  %expr.addr = alloca %union.tree_node*, align 8
  %outerinductionvars.addr = alloca %struct.VEC_tree_heap*, align 8
  %invariants.addr = alloca %struct.VEC_tree_heap*, align 8
  %extra.addr = alloca i32, align 4
  %lambda_obstack.addr = alloca %struct.obstack*, align 8
  %lle = alloca %struct.lambda_linear_expression_s*, align 8
  %iv = alloca %union.tree_node*, align 8
  %invar = alloca %union.tree_node*, align 8
  %i = alloca i64, align 8
  store i32 %depth, i32* %depth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %depth.addr, metadata !7717, metadata !DIExpression()), !dbg !7718
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !7719, metadata !DIExpression()), !dbg !7720
  store %struct.VEC_tree_heap* %outerinductionvars, %struct.VEC_tree_heap** %outerinductionvars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %outerinductionvars.addr, metadata !7721, metadata !DIExpression()), !dbg !7722
  store %struct.VEC_tree_heap* %invariants, %struct.VEC_tree_heap** %invariants.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %invariants.addr, metadata !7723, metadata !DIExpression()), !dbg !7724
  store i32 %extra, i32* %extra.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %extra.addr, metadata !7725, metadata !DIExpression()), !dbg !7726
  store %struct.obstack* %lambda_obstack, %struct.obstack** %lambda_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %lambda_obstack.addr, metadata !7727, metadata !DIExpression()), !dbg !7728
  call void @llvm.dbg.declare(metadata %struct.lambda_linear_expression_s** %lle, metadata !7729, metadata !DIExpression()), !dbg !7730
  store %struct.lambda_linear_expression_s* null, %struct.lambda_linear_expression_s** %lle, align 8, !dbg !7730
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7731
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7731
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7731
  %bf.load = load i64, i64* %1, align 8, !dbg !7731
  %bf.clear = and i64 %bf.load, 65535, !dbg !7731
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7731
  switch i32 %bf.cast, label %sw.default [
    i32 23, label %sw.bb
    i32 141, label %sw.bb4
  ], !dbg !7732

sw.bb:                                            ; preds = %entry
  %2 = load i32, i32* %depth.addr, align 4, !dbg !7733
  %3 = load i32, i32* %depth.addr, align 4, !dbg !7736
  %mul = mul nsw i32 2, %3, !dbg !7737
  %4 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !7738
  %call = call %struct.lambda_linear_expression_s* @lambda_linear_expression_new(i32 %2, i32 %mul, %struct.obstack* %4), !dbg !7739
  store %struct.lambda_linear_expression_s* %call, %struct.lambda_linear_expression_s** %lle, align 8, !dbg !7740
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7741
  %int_cst = bitcast %union.tree_node* %5 to %struct.tree_int_cst*, !dbg !7741
  %int_cst1 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7741
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst1, i32 0, i32 0, !dbg !7741
  %6 = load i64, i64* %low, align 8, !dbg !7741
  %conv = trunc i64 %6 to i32, !dbg !7741
  %7 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle, align 8, !dbg !7742
  %constant = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %7, i32 0, i32 1, !dbg !7742
  store i32 %conv, i32* %constant, align 8, !dbg !7743
  %8 = load i32, i32* %extra.addr, align 4, !dbg !7744
  %cmp = icmp ne i32 %8, 0, !dbg !7746
  br i1 %cmp, label %if.then, label %if.end, !dbg !7747

if.then:                                          ; preds = %sw.bb
  %9 = load i32, i32* %extra.addr, align 4, !dbg !7748
  %10 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle, align 8, !dbg !7749
  %constant3 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %10, i32 0, i32 1, !dbg !7749
  %11 = load i32, i32* %constant3, align 8, !dbg !7750
  %add = add nsw i32 %11, %9, !dbg !7750
  store i32 %add, i32* %constant3, align 8, !dbg !7750
  br label %if.end, !dbg !7749

if.end:                                           ; preds = %if.then, %sw.bb
  %12 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle, align 8, !dbg !7751
  %denominator = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %12, i32 0, i32 3, !dbg !7751
  store i32 1, i32* %denominator, align 8, !dbg !7752
  br label %sw.epilog, !dbg !7753

sw.bb4:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %iv, metadata !7754, metadata !DIExpression()), !dbg !7756
  call void @llvm.dbg.declare(metadata %union.tree_node** %invar, metadata !7757, metadata !DIExpression()), !dbg !7758
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7759, metadata !DIExpression()), !dbg !7760
  store i64 0, i64* %i, align 8, !dbg !7761
  br label %for.cond, !dbg !7763

for.cond:                                         ; preds = %for.inc, %sw.bb4
  %13 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %outerinductionvars.addr, align 8, !dbg !7764
  %tobool = icmp ne %struct.VEC_tree_heap* %13, null, !dbg !7764
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7764

cond.true:                                        ; preds = %for.cond
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %outerinductionvars.addr, align 8, !dbg !7764
  %base5 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %14, i32 0, i32 0, !dbg !7764
  br label %cond.end, !dbg !7764

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7764

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base5, %cond.true ], [ null, %cond.false ], !dbg !7764
  %15 = load i64, i64* %i, align 8, !dbg !7764
  %conv6 = trunc i64 %15 to i32, !dbg !7764
  %call7 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %conv6, %union.tree_node** %iv), !dbg !7764
  %tobool8 = icmp ne i32 %call7, 0, !dbg !7766
  br i1 %tobool8, label %for.body, label %for.end, !dbg !7766

for.body:                                         ; preds = %cond.end
  %16 = load %union.tree_node*, %union.tree_node** %iv, align 8, !dbg !7767
  %cmp9 = icmp ne %union.tree_node* %16, null, !dbg !7769
  br i1 %cmp9, label %if.then11, label %if.end26, !dbg !7770

if.then11:                                        ; preds = %for.body
  %17 = load %union.tree_node*, %union.tree_node** %iv, align 8, !dbg !7771
  %ssa_name = bitcast %union.tree_node* %17 to %struct.tree_ssa_name*, !dbg !7771
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !7771
  %18 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7771
  %19 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7774
  %ssa_name12 = bitcast %union.tree_node* %19 to %struct.tree_ssa_name*, !dbg !7774
  %var13 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name12, i32 0, i32 1, !dbg !7774
  %20 = load %union.tree_node*, %union.tree_node** %var13, align 8, !dbg !7774
  %cmp14 = icmp eq %union.tree_node* %18, %20, !dbg !7775
  br i1 %cmp14, label %if.then16, label %if.end25, !dbg !7776

if.then16:                                        ; preds = %if.then11
  %21 = load i32, i32* %depth.addr, align 4, !dbg !7777
  %22 = load i32, i32* %depth.addr, align 4, !dbg !7779
  %mul17 = mul nsw i32 2, %22, !dbg !7780
  %23 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !7781
  %call18 = call %struct.lambda_linear_expression_s* @lambda_linear_expression_new(i32 %21, i32 %mul17, %struct.obstack* %23), !dbg !7782
  store %struct.lambda_linear_expression_s* %call18, %struct.lambda_linear_expression_s** %lle, align 8, !dbg !7783
  %24 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle, align 8, !dbg !7784
  %coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %24, i32 0, i32 0, !dbg !7784
  %25 = load i32*, i32** %coefficients, align 8, !dbg !7784
  %26 = load i64, i64* %i, align 8, !dbg !7785
  %arrayidx = getelementptr inbounds i32, i32* %25, i64 %26, !dbg !7784
  store i32 1, i32* %arrayidx, align 4, !dbg !7786
  %27 = load i32, i32* %extra.addr, align 4, !dbg !7787
  %cmp19 = icmp ne i32 %27, 0, !dbg !7789
  br i1 %cmp19, label %if.then21, label %if.end23, !dbg !7790

if.then21:                                        ; preds = %if.then16
  %28 = load i32, i32* %extra.addr, align 4, !dbg !7791
  %29 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle, align 8, !dbg !7792
  %constant22 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %29, i32 0, i32 1, !dbg !7792
  store i32 %28, i32* %constant22, align 8, !dbg !7793
  br label %if.end23, !dbg !7792

if.end23:                                         ; preds = %if.then21, %if.then16
  %30 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle, align 8, !dbg !7794
  %denominator24 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %30, i32 0, i32 3, !dbg !7794
  store i32 1, i32* %denominator24, align 8, !dbg !7795
  br label %if.end25, !dbg !7796

if.end25:                                         ; preds = %if.end23, %if.then11
  br label %if.end26, !dbg !7797

if.end26:                                         ; preds = %if.end25, %for.body
  br label %for.inc, !dbg !7798

for.inc:                                          ; preds = %if.end26
  %31 = load i64, i64* %i, align 8, !dbg !7799
  %inc = add i64 %31, 1, !dbg !7799
  store i64 %inc, i64* %i, align 8, !dbg !7799
  br label %for.cond, !dbg !7800, !llvm.loop !7801

for.end:                                          ; preds = %cond.end
  store i64 0, i64* %i, align 8, !dbg !7803
  br label %for.cond27, !dbg !7805

for.cond27:                                       ; preds = %for.inc59, %for.end
  %32 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %invariants.addr, align 8, !dbg !7806
  %tobool28 = icmp ne %struct.VEC_tree_heap* %32, null, !dbg !7806
  br i1 %tobool28, label %cond.true29, label %cond.false31, !dbg !7806

cond.true29:                                      ; preds = %for.cond27
  %33 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %invariants.addr, align 8, !dbg !7806
  %base30 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %33, i32 0, i32 0, !dbg !7806
  br label %cond.end32, !dbg !7806

cond.false31:                                     ; preds = %for.cond27
  br label %cond.end32, !dbg !7806

cond.end32:                                       ; preds = %cond.false31, %cond.true29
  %cond33 = phi %struct.VEC_tree_base* [ %base30, %cond.true29 ], [ null, %cond.false31 ], !dbg !7806
  %34 = load i64, i64* %i, align 8, !dbg !7806
  %conv34 = trunc i64 %34 to i32, !dbg !7806
  %call35 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond33, i32 %conv34, %union.tree_node** %invar), !dbg !7806
  %tobool36 = icmp ne i32 %call35, 0, !dbg !7808
  br i1 %tobool36, label %for.body37, label %for.end61, !dbg !7808

for.body37:                                       ; preds = %cond.end32
  %35 = load %union.tree_node*, %union.tree_node** %invar, align 8, !dbg !7809
  %cmp38 = icmp ne %union.tree_node* %35, null, !dbg !7811
  br i1 %cmp38, label %if.then40, label %if.end58, !dbg !7812

if.then40:                                        ; preds = %for.body37
  %36 = load %union.tree_node*, %union.tree_node** %invar, align 8, !dbg !7813
  %ssa_name41 = bitcast %union.tree_node* %36 to %struct.tree_ssa_name*, !dbg !7813
  %var42 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name41, i32 0, i32 1, !dbg !7813
  %37 = load %union.tree_node*, %union.tree_node** %var42, align 8, !dbg !7813
  %38 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7816
  %ssa_name43 = bitcast %union.tree_node* %38 to %struct.tree_ssa_name*, !dbg !7816
  %var44 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name43, i32 0, i32 1, !dbg !7816
  %39 = load %union.tree_node*, %union.tree_node** %var44, align 8, !dbg !7816
  %cmp45 = icmp eq %union.tree_node* %37, %39, !dbg !7817
  br i1 %cmp45, label %if.then47, label %if.end57, !dbg !7818

if.then47:                                        ; preds = %if.then40
  %40 = load i32, i32* %depth.addr, align 4, !dbg !7819
  %41 = load i32, i32* %depth.addr, align 4, !dbg !7821
  %mul48 = mul nsw i32 2, %41, !dbg !7822
  %42 = load %struct.obstack*, %struct.obstack** %lambda_obstack.addr, align 8, !dbg !7823
  %call49 = call %struct.lambda_linear_expression_s* @lambda_linear_expression_new(i32 %40, i32 %mul48, %struct.obstack* %42), !dbg !7824
  store %struct.lambda_linear_expression_s* %call49, %struct.lambda_linear_expression_s** %lle, align 8, !dbg !7825
  %43 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle, align 8, !dbg !7826
  %invariant_coefficients = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %43, i32 0, i32 2, !dbg !7826
  %44 = load i32*, i32** %invariant_coefficients, align 8, !dbg !7826
  %45 = load i64, i64* %i, align 8, !dbg !7827
  %arrayidx50 = getelementptr inbounds i32, i32* %44, i64 %45, !dbg !7826
  store i32 1, i32* %arrayidx50, align 4, !dbg !7828
  %46 = load i32, i32* %extra.addr, align 4, !dbg !7829
  %cmp51 = icmp ne i32 %46, 0, !dbg !7831
  br i1 %cmp51, label %if.then53, label %if.end55, !dbg !7832

if.then53:                                        ; preds = %if.then47
  %47 = load i32, i32* %extra.addr, align 4, !dbg !7833
  %48 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle, align 8, !dbg !7834
  %constant54 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %48, i32 0, i32 1, !dbg !7834
  store i32 %47, i32* %constant54, align 8, !dbg !7835
  br label %if.end55, !dbg !7834

if.end55:                                         ; preds = %if.then53, %if.then47
  %49 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle, align 8, !dbg !7836
  %denominator56 = getelementptr inbounds %struct.lambda_linear_expression_s, %struct.lambda_linear_expression_s* %49, i32 0, i32 3, !dbg !7836
  store i32 1, i32* %denominator56, align 8, !dbg !7837
  br label %if.end57, !dbg !7838

if.end57:                                         ; preds = %if.end55, %if.then40
  br label %if.end58, !dbg !7839

if.end58:                                         ; preds = %if.end57, %for.body37
  br label %for.inc59, !dbg !7840

for.inc59:                                        ; preds = %if.end58
  %50 = load i64, i64* %i, align 8, !dbg !7841
  %inc60 = add i64 %50, 1, !dbg !7841
  store i64 %inc60, i64* %i, align 8, !dbg !7841
  br label %for.cond27, !dbg !7842, !llvm.loop !7843

for.end61:                                        ; preds = %cond.end32
  br label %sw.epilog, !dbg !7845

sw.default:                                       ; preds = %entry
  store %struct.lambda_linear_expression_s* null, %struct.lambda_linear_expression_s** %retval, align 8, !dbg !7846
  br label %return, !dbg !7846

sw.epilog:                                        ; preds = %for.end61, %if.end
  %51 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %lle, align 8, !dbg !7847
  store %struct.lambda_linear_expression_s* %51, %struct.lambda_linear_expression_s** %retval, align 8, !dbg !7848
  br label %return, !dbg !7848

return:                                           ; preds = %sw.epilog, %sw.default
  %52 = load %struct.lambda_linear_expression_s*, %struct.lambda_linear_expression_s** %retval, align 8, !dbg !7849
  ret %struct.lambda_linear_expression_s* %52, !dbg !7849
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 %alloc_) #0 !dbg !7850 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !7853, metadata !DIExpression()), !dbg !7854
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7855, metadata !DIExpression()), !dbg !7854
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7856, metadata !DIExpression()), !dbg !7854
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7854
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !7854
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !7854
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7854

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7854
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !7854
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !7854
  br label %cond.end, !dbg !7854

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7854

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7854
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7854
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !7854
  %tobool1 = icmp ne i32 %call, 0, !dbg !7854
  %lnot = xor i1 %tobool1, true, !dbg !7854
  %lnot.ext = zext i1 %lnot to i32, !dbg !7854
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7854
  %5 = load i32, i32* %extend, align 4, !dbg !7857
  %tobool2 = icmp ne i32 %5, 0, !dbg !7857
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7854

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7857
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !7857
  %8 = bitcast %struct.VEC_tree_heap* %7 to i8*, !dbg !7857
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7857
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !7857
  %10 = bitcast i8* %call3 to %struct.VEC_tree_heap*, !dbg !7857
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7857
  store %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %11, align 8, !dbg !7857
  br label %if.end, !dbg !7857

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7854
  ret i32 %12, !dbg !7854
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @invariant_in_loop_and_outer_loops(%struct.loop* %loop, %union.tree_node* %op) #0 !dbg !7859 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7862, metadata !DIExpression()), !dbg !7863
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !7864, metadata !DIExpression()), !dbg !7865
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7866
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %0), !dbg !7868
  %tobool = icmp ne i8 %call, 0, !dbg !7868
  br i1 %tobool, label %if.then, label %if.end, !dbg !7869

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !7870
  br label %return, !dbg !7870

if.end:                                           ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7871
  %call1 = call i32 @loop_depth(%struct.loop* %1), !dbg !7873
  %cmp = icmp eq i32 %call1, 0, !dbg !7874
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !7875

if.then2:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !7876
  br label %return, !dbg !7876

if.end3:                                          ; preds = %if.end
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7877
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7879
  %call4 = call zeroext i8 @expr_invariant_in_loop_p(%struct.loop* %2, %union.tree_node* %3), !dbg !7880
  %tobool5 = icmp ne i8 %call4, 0, !dbg !7880
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !7881

if.then6:                                         ; preds = %if.end3
  store i8 0, i8* %retval, align 1, !dbg !7882
  br label %return, !dbg !7882

if.end7:                                          ; preds = %if.end3
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7883
  %call8 = call %struct.loop* @loop_outer(%struct.loop* %4), !dbg !7885
  %5 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7886
  %call9 = call zeroext i8 @invariant_in_loop_and_outer_loops(%struct.loop* %call8, %union.tree_node* %5), !dbg !7887
  %tobool10 = icmp ne i8 %call9, 0, !dbg !7887
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !7888

if.then11:                                        ; preds = %if.end7
  store i8 0, i8* %retval, align 1, !dbg !7889
  br label %return, !dbg !7889

if.end12:                                         ; preds = %if.end7
  store i8 1, i8* %retval, align 1, !dbg !7890
  br label %return, !dbg !7890

return:                                           ; preds = %if.end12, %if.then11, %if.then6, %if.then2, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !7891
  ret i8 %6, !dbg !7891
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !7892 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7895, metadata !DIExpression()), !dbg !7896
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !7897, metadata !DIExpression()), !dbg !7896
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !7898, metadata !DIExpression()), !dbg !7896
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7896
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !7896
  %1 = load i32, i32* %num, align 8, !dbg !7896
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7896
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !7896
  %3 = load i32, i32* %alloc, align 4, !dbg !7896
  %cmp = icmp ult i32 %1, %3, !dbg !7896
  %conv = zext i1 %cmp to i32, !dbg !7896
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7896
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !7896
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7896
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !7896
  %6 = load i32, i32* %num1, align 8, !dbg !7896
  %inc = add i32 %6, 1, !dbg !7896
  store i32 %inc, i32* %num1, align 8, !dbg !7896
  %idxprom = zext i32 %6 to i64, !dbg !7896
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !7896
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !7896
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !7896
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !7896
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !7896
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !7896
  ret %union.tree_node** %9, !dbg !7896
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_cond_code(%union.gimple_statement_d* %gs) #0 !dbg !7899 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7902, metadata !DIExpression()), !dbg !7903
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7904
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7905
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7906
  %bf.load = load i32, i32* %1, align 8, !dbg !7906
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7906
  ret i32 %bf.lshr, !dbg !7907
}

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %vec_, i32 %obj_) #0 !dbg !7908 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  %obj_.addr = alloca i32, align 4
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !7912, metadata !DIExpression()), !dbg !7913
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !7914, metadata !DIExpression()), !dbg !7913
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7913
  %call = call i32 @VEC_int_heap_reserve(%struct.VEC_int_heap** %0, i32 1), !dbg !7913
  %1 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7913
  %2 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %1, align 8, !dbg !7913
  %tobool = icmp ne %struct.VEC_int_heap* %2, null, !dbg !7913
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7913

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7913
  %4 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %3, align 8, !dbg !7913
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %4, i32 0, i32 0, !dbg !7913
  br label %cond.end, !dbg !7913

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7913

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7913
  %5 = load i32, i32* %obj_.addr, align 4, !dbg !7913
  %call1 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond, i32 %5), !dbg !7913
  ret i32* %call1, !dbg !7913
}

declare dso_local %union.tree_node* @instantiate_scev(%struct.basic_block_def*, %struct.loop*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @block_before_loop(%struct.loop* %loop) #0 !dbg !7915 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %preheader = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7918, metadata !DIExpression()), !dbg !7919
  call void @llvm.dbg.declare(metadata %struct.edge_def** %preheader, metadata !7920, metadata !DIExpression()), !dbg !7921
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7922
  %call = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %0), !dbg !7923
  store %struct.edge_def* %call, %struct.edge_def** %preheader, align 8, !dbg !7921
  %1 = load %struct.edge_def*, %struct.edge_def** %preheader, align 8, !dbg !7924
  %tobool = icmp ne %struct.edge_def* %1, null, !dbg !7924
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7924

cond.true:                                        ; preds = %entry
  %2 = load %struct.edge_def*, %struct.edge_def** %preheader, align 8, !dbg !7925
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 0, !dbg !7926
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7926
  br label %cond.end, !dbg !7924

cond.false:                                       ; preds = %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7927
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !7927
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7927
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7927
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !7927
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !7927
  br label %cond.end, !dbg !7924

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %3, %cond.true ], [ %6, %cond.false ], !dbg !7924
  ret %struct.basic_block_def* %cond, !dbg !7928
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !7929 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7932, metadata !DIExpression()), !dbg !7933
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7934, metadata !DIExpression()), !dbg !7935
  %0 = load i32, i32* %index.addr, align 4, !dbg !7936
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7936
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !7936
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !7936
  %2 = load i32, i32* %capacity, align 8, !dbg !7936
  %cmp = icmp ule i32 %0, %2, !dbg !7936
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7936

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7936
  br label %cond.end, !dbg !7936

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7936

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7936
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7937
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !7938
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !7939
  %4 = load i32, i32* %index.addr, align 4, !dbg !7940
  %idxprom = zext i32 %4 to i64, !dbg !7937
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !7937
  ret %struct.phi_arg_d* %arrayidx, !dbg !7941
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !7942 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7945, metadata !DIExpression()), !dbg !7946
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7947, metadata !DIExpression()), !dbg !7946
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7946
  %cmp = icmp sge i32 %0, 0, !dbg !7946
  %conv = zext i1 %cmp to i32, !dbg !7946
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7946
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !7946
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7946

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7946
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !7946
  %3 = load i32, i32* %alloc, align 4, !dbg !7946
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7946
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !7946
  %5 = load i32, i32* %num, align 8, !dbg !7946
  %sub = sub i32 %3, %5, !dbg !7946
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7946
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7946
  %conv2 = zext i1 %cmp1 to i32, !dbg !7946
  br label %cond.end, !dbg !7946

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7946
  %tobool3 = icmp ne i32 %7, 0, !dbg !7946
  %lnot = xor i1 %tobool3, true, !dbg !7946
  %lnot.ext = zext i1 %lnot to i32, !dbg !7946
  br label %cond.end, !dbg !7946

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7946
  ret i32 %cond, !dbg !7946
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @loop_depth(%struct.loop* %loop) #0 !dbg !7948 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7953, metadata !DIExpression()), !dbg !7954
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7955
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !7955
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !7955
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !7955
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7955

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7955
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !7955
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !7955
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !7955
  br label %cond.end, !dbg !7955

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7955

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7955
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !7955
  ret i32 %call, !dbg !7956
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !7957 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7960, metadata !DIExpression()), !dbg !7961
  call void @llvm.dbg.declare(metadata i32* %n, metadata !7962, metadata !DIExpression()), !dbg !7963
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7964
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !7964
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !7964
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !7964
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7964

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7964
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !7964
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !7964
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !7964
  br label %cond.end, !dbg !7964

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7964

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7964
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !7964
  store i32 %call, i32* %n, align 4, !dbg !7963
  %4 = load i32, i32* %n, align 4, !dbg !7965
  %cmp = icmp eq i32 %4, 0, !dbg !7967
  br i1 %cmp, label %if.then, label %if.end, !dbg !7968

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !7969
  br label %return, !dbg !7969

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7970
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !7970
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !7970
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !7970
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !7970

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7970
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !7970
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !7970
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !7970
  br label %cond.end8, !dbg !7970

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !7970

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !7970
  %9 = load i32, i32* %n, align 4, !dbg !7970
  %sub = sub i32 %9, 1, !dbg !7970
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !7970
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !7971
  br label %return, !dbg !7971

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !7972
  ret %struct.loop* %10, !dbg !7972
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !7973 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !7978, metadata !DIExpression()), !dbg !7979
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !7979
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !7979
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7979

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !7979
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !7979
  %2 = load i32, i32* %num, align 8, !dbg !7979
  br label %cond.end, !dbg !7979

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7979

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7979
  ret i32 %cond, !dbg !7979
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !7980 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !7983, metadata !DIExpression()), !dbg !7984
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7985, metadata !DIExpression()), !dbg !7984
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !7984
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !7984
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7984

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7984
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !7984
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !7984
  %3 = load i32, i32* %num, align 8, !dbg !7984
  %cmp = icmp ult i32 %1, %3, !dbg !7984
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7986
  %land.ext = zext i1 %4 to i32, !dbg !7984
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !7984
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !7984
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7984
  %idxprom = zext i32 %6 to i64, !dbg !7984
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !7984
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !7984
  ret %struct.loop* %7, !dbg !7984
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_heap_reserve(%struct.VEC_int_heap** %vec_, i32 %alloc_) #0 !dbg !7987 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !7990, metadata !DIExpression()), !dbg !7991
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7992, metadata !DIExpression()), !dbg !7991
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7993, metadata !DIExpression()), !dbg !7991
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7991
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !7991
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !7991
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7991

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7991
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !7991
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !7991
  br label %cond.end, !dbg !7991

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7991

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7991
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7991
  %call = call i32 @VEC_int_base_space(%struct.VEC_int_base* %cond, i32 %4), !dbg !7991
  %tobool1 = icmp ne i32 %call, 0, !dbg !7991
  %lnot = xor i1 %tobool1, true, !dbg !7991
  %lnot.ext = zext i1 %lnot to i32, !dbg !7991
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7991
  %5 = load i32, i32* %extend, align 4, !dbg !7994
  %tobool2 = icmp ne i32 %5, 0, !dbg !7994
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7991

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7994
  %7 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %6, align 8, !dbg !7994
  %8 = bitcast %struct.VEC_int_heap* %7 to i8*, !dbg !7994
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7994
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 4), !dbg !7994
  %10 = bitcast i8* %call3 to %struct.VEC_int_heap*, !dbg !7994
  %11 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7994
  store %struct.VEC_int_heap* %10, %struct.VEC_int_heap** %11, align 8, !dbg !7994
  br label %if.end, !dbg !7994

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7991
  ret i32 %12, !dbg !7991
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !7996 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !8000, metadata !DIExpression()), !dbg !8001
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !8002, metadata !DIExpression()), !dbg !8001
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !8003, metadata !DIExpression()), !dbg !8001
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8001
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !8001
  %1 = load i32, i32* %num, align 4, !dbg !8001
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8001
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !8001
  %3 = load i32, i32* %alloc, align 4, !dbg !8001
  %cmp = icmp ult i32 %1, %3, !dbg !8001
  %conv = zext i1 %cmp to i32, !dbg !8001
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8001
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !8001
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8001
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !8001
  %6 = load i32, i32* %num1, align 4, !dbg !8001
  %inc = add i32 %6, 1, !dbg !8001
  store i32 %inc, i32* %num1, align 4, !dbg !8001
  %idxprom = zext i32 %6 to i64, !dbg !8001
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !8001
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !8001
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !8001
  %8 = load i32*, i32** %slot_, align 8, !dbg !8001
  store i32 %7, i32* %8, align 4, !dbg !8001
  %9 = load i32*, i32** %slot_, align 8, !dbg !8001
  ret i32* %9, !dbg !8001
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_space(%struct.VEC_int_base* %vec_, i32 %alloc_) #0 !dbg !8004 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !8007, metadata !DIExpression()), !dbg !8008
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8009, metadata !DIExpression()), !dbg !8008
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !8008
  %cmp = icmp sge i32 %0, 0, !dbg !8008
  %conv = zext i1 %cmp to i32, !dbg !8008
  %1 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8008
  %tobool = icmp ne %struct.VEC_int_base* %1, null, !dbg !8008
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8008

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8008
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !8008
  %3 = load i32, i32* %alloc, align 4, !dbg !8008
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8008
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 0, !dbg !8008
  %5 = load i32, i32* %num, align 4, !dbg !8008
  %sub = sub i32 %3, %5, !dbg !8008
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !8008
  %cmp1 = icmp uge i32 %sub, %6, !dbg !8008
  %conv2 = zext i1 %cmp1 to i32, !dbg !8008
  br label %cond.end, !dbg !8008

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !8008
  %tobool3 = icmp ne i32 %7, 0, !dbg !8008
  %lnot = xor i1 %tobool3, true, !dbg !8008
  %lnot.ext = zext i1 %lnot to i32, !dbg !8008
  br label %cond.end, !dbg !8008

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !8008
  ret i32 %cond, !dbg !8008
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_lambda_loop_heap_reserve(%struct.VEC_lambda_loop_heap** %vec_, i32 %alloc_) #0 !dbg !8010 {
entry:
  %vec_.addr = alloca %struct.VEC_lambda_loop_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_lambda_loop_heap** %vec_, %struct.VEC_lambda_loop_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_loop_heap*** %vec_.addr, metadata !8013, metadata !DIExpression()), !dbg !8014
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8015, metadata !DIExpression()), !dbg !8014
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !8016, metadata !DIExpression()), !dbg !8014
  %0 = load %struct.VEC_lambda_loop_heap**, %struct.VEC_lambda_loop_heap*** %vec_.addr, align 8, !dbg !8014
  %1 = load %struct.VEC_lambda_loop_heap*, %struct.VEC_lambda_loop_heap** %0, align 8, !dbg !8014
  %tobool = icmp ne %struct.VEC_lambda_loop_heap* %1, null, !dbg !8014
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8014

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_lambda_loop_heap**, %struct.VEC_lambda_loop_heap*** %vec_.addr, align 8, !dbg !8014
  %3 = load %struct.VEC_lambda_loop_heap*, %struct.VEC_lambda_loop_heap** %2, align 8, !dbg !8014
  %base = getelementptr inbounds %struct.VEC_lambda_loop_heap, %struct.VEC_lambda_loop_heap* %3, i32 0, i32 0, !dbg !8014
  br label %cond.end, !dbg !8014

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8014

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_lambda_loop_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8014
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !8014
  %call = call i32 @VEC_lambda_loop_base_space(%struct.VEC_lambda_loop_base* %cond, i32 %4), !dbg !8014
  %tobool1 = icmp ne i32 %call, 0, !dbg !8014
  %lnot = xor i1 %tobool1, true, !dbg !8014
  %lnot.ext = zext i1 %lnot to i32, !dbg !8014
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !8014
  %5 = load i32, i32* %extend, align 4, !dbg !8017
  %tobool2 = icmp ne i32 %5, 0, !dbg !8017
  br i1 %tobool2, label %if.then, label %if.end, !dbg !8014

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_lambda_loop_heap**, %struct.VEC_lambda_loop_heap*** %vec_.addr, align 8, !dbg !8017
  %7 = load %struct.VEC_lambda_loop_heap*, %struct.VEC_lambda_loop_heap** %6, align 8, !dbg !8017
  %8 = bitcast %struct.VEC_lambda_loop_heap* %7 to i8*, !dbg !8017
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !8017
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !8017
  %10 = bitcast i8* %call3 to %struct.VEC_lambda_loop_heap*, !dbg !8017
  %11 = load %struct.VEC_lambda_loop_heap**, %struct.VEC_lambda_loop_heap*** %vec_.addr, align 8, !dbg !8017
  store %struct.VEC_lambda_loop_heap* %10, %struct.VEC_lambda_loop_heap** %11, align 8, !dbg !8017
  br label %if.end, !dbg !8017

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !8014
  ret i32 %12, !dbg !8014
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.lambda_loop_s** @VEC_lambda_loop_base_quick_push(%struct.VEC_lambda_loop_base* %vec_, %struct.lambda_loop_s* %obj_) #0 !dbg !8019 {
entry:
  %vec_.addr = alloca %struct.VEC_lambda_loop_base*, align 8
  %obj_.addr = alloca %struct.lambda_loop_s*, align 8
  %slot_ = alloca %struct.lambda_loop_s**, align 8
  store %struct.VEC_lambda_loop_base* %vec_, %struct.VEC_lambda_loop_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_loop_base** %vec_.addr, metadata !8023, metadata !DIExpression()), !dbg !8024
  store %struct.lambda_loop_s* %obj_, %struct.lambda_loop_s** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lambda_loop_s** %obj_.addr, metadata !8025, metadata !DIExpression()), !dbg !8024
  call void @llvm.dbg.declare(metadata %struct.lambda_loop_s*** %slot_, metadata !8026, metadata !DIExpression()), !dbg !8024
  %0 = load %struct.VEC_lambda_loop_base*, %struct.VEC_lambda_loop_base** %vec_.addr, align 8, !dbg !8024
  %num = getelementptr inbounds %struct.VEC_lambda_loop_base, %struct.VEC_lambda_loop_base* %0, i32 0, i32 0, !dbg !8024
  %1 = load i32, i32* %num, align 8, !dbg !8024
  %2 = load %struct.VEC_lambda_loop_base*, %struct.VEC_lambda_loop_base** %vec_.addr, align 8, !dbg !8024
  %alloc = getelementptr inbounds %struct.VEC_lambda_loop_base, %struct.VEC_lambda_loop_base* %2, i32 0, i32 1, !dbg !8024
  %3 = load i32, i32* %alloc, align 4, !dbg !8024
  %cmp = icmp ult i32 %1, %3, !dbg !8024
  %conv = zext i1 %cmp to i32, !dbg !8024
  %4 = load %struct.VEC_lambda_loop_base*, %struct.VEC_lambda_loop_base** %vec_.addr, align 8, !dbg !8024
  %vec = getelementptr inbounds %struct.VEC_lambda_loop_base, %struct.VEC_lambda_loop_base* %4, i32 0, i32 2, !dbg !8024
  %5 = load %struct.VEC_lambda_loop_base*, %struct.VEC_lambda_loop_base** %vec_.addr, align 8, !dbg !8024
  %num1 = getelementptr inbounds %struct.VEC_lambda_loop_base, %struct.VEC_lambda_loop_base* %5, i32 0, i32 0, !dbg !8024
  %6 = load i32, i32* %num1, align 8, !dbg !8024
  %inc = add i32 %6, 1, !dbg !8024
  store i32 %inc, i32* %num1, align 8, !dbg !8024
  %idxprom = zext i32 %6 to i64, !dbg !8024
  %arrayidx = getelementptr inbounds [1 x %struct.lambda_loop_s*], [1 x %struct.lambda_loop_s*]* %vec, i64 0, i64 %idxprom, !dbg !8024
  store %struct.lambda_loop_s** %arrayidx, %struct.lambda_loop_s*** %slot_, align 8, !dbg !8024
  %7 = load %struct.lambda_loop_s*, %struct.lambda_loop_s** %obj_.addr, align 8, !dbg !8024
  %8 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %slot_, align 8, !dbg !8024
  store %struct.lambda_loop_s* %7, %struct.lambda_loop_s** %8, align 8, !dbg !8024
  %9 = load %struct.lambda_loop_s**, %struct.lambda_loop_s*** %slot_, align 8, !dbg !8024
  ret %struct.lambda_loop_s** %9, !dbg !8024
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_lambda_loop_base_space(%struct.VEC_lambda_loop_base* %vec_, i32 %alloc_) #0 !dbg !8027 {
entry:
  %vec_.addr = alloca %struct.VEC_lambda_loop_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_lambda_loop_base* %vec_, %struct.VEC_lambda_loop_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_loop_base** %vec_.addr, metadata !8030, metadata !DIExpression()), !dbg !8031
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8032, metadata !DIExpression()), !dbg !8031
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !8031
  %cmp = icmp sge i32 %0, 0, !dbg !8031
  %conv = zext i1 %cmp to i32, !dbg !8031
  %1 = load %struct.VEC_lambda_loop_base*, %struct.VEC_lambda_loop_base** %vec_.addr, align 8, !dbg !8031
  %tobool = icmp ne %struct.VEC_lambda_loop_base* %1, null, !dbg !8031
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8031

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_lambda_loop_base*, %struct.VEC_lambda_loop_base** %vec_.addr, align 8, !dbg !8031
  %alloc = getelementptr inbounds %struct.VEC_lambda_loop_base, %struct.VEC_lambda_loop_base* %2, i32 0, i32 1, !dbg !8031
  %3 = load i32, i32* %alloc, align 4, !dbg !8031
  %4 = load %struct.VEC_lambda_loop_base*, %struct.VEC_lambda_loop_base** %vec_.addr, align 8, !dbg !8031
  %num = getelementptr inbounds %struct.VEC_lambda_loop_base, %struct.VEC_lambda_loop_base* %4, i32 0, i32 0, !dbg !8031
  %5 = load i32, i32* %num, align 8, !dbg !8031
  %sub = sub i32 %3, %5, !dbg !8031
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !8031
  %cmp1 = icmp uge i32 %sub, %6, !dbg !8031
  %conv2 = zext i1 %cmp1 to i32, !dbg !8031
  br label %cond.end, !dbg !8031

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !8031
  %tobool3 = icmp ne i32 %7, 0, !dbg !8031
  %lnot = xor i1 %tobool3, true, !dbg !8031
  %lnot.ext = zext i1 %lnot to i32, !dbg !8031
  br label %cond.end, !dbg !8031

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !8031
  ret i32 %cond, !dbg !8031
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) #0 !dbg !8033 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %last_p = alloca %struct.ssa_use_operand_d*, align 8
  %head_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %flag = alloca i32, align 4
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !8036, metadata !DIExpression()), !dbg !8037
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8038, metadata !DIExpression()), !dbg !8039
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !8040, metadata !DIExpression()), !dbg !8041
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p, metadata !8042, metadata !DIExpression()), !dbg !8043
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !8044
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8043
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %head_stmt, metadata !8045, metadata !DIExpression()), !dbg !8046
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !8047
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !8047
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !8047
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8047
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %head_stmt, align 8, !dbg !8046
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !8048, metadata !DIExpression()), !dbg !8049
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !8050
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !8050
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !8049
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !8051, metadata !DIExpression()), !dbg !8052
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !8053, metadata !DIExpression()), !dbg !8054
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8055
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !8056
  %conv = zext i8 %call1 to i32, !dbg !8056
  %tobool = icmp ne i32 %conv, 0, !dbg !8056
  %5 = zext i1 %tobool to i64, !dbg !8056
  %cond = select i1 %tobool, i32 1, i32 4, !dbg !8056
  store i32 %cond, i32* %flag, align 4, !dbg !8057
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !8058
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !8060
  %cmp = icmp eq i32 %call2, 16, !dbg !8061
  br i1 %cmp, label %if.then, label %if.else, !dbg !8062

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !8063
  %8 = load i32, i32* %flag, align 4, !dbg !8063
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %7, i32 %8), !dbg !8063
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8063
  br label %for.cond, !dbg !8063

for.cond:                                         ; preds = %for.inc, %if.then
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !8066
  %tobool6 = icmp ne i8 %call5, 0, !dbg !8066
  %lnot = xor i1 %tobool6, true, !dbg !8066
  br i1 %lnot, label %for.body, label %for.end, !dbg !8063

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8068
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %9), !dbg !8068
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8070
  %cmp8 = icmp eq %union.tree_node* %call7, %10, !dbg !8071
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !8072

if.then10:                                        ; preds = %for.body
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8073
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !8074
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8075
  %call11 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d* %13), !dbg !8076
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8077
  br label %if.end, !dbg !8078

if.end:                                           ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !8070

for.inc:                                          ; preds = %if.end
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !8066
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8066
  br label %for.cond, !dbg !8066, !llvm.loop !8079

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !8081

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %flag, align 4, !dbg !8082
  %cmp13 = icmp eq i32 %14, 1, !dbg !8085
  br i1 %cmp13, label %if.then15, label %if.else31, !dbg !8086

if.then15:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !8087
  %16 = load i32, i32* %flag, align 4, !dbg !8087
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %15, i32 %16), !dbg !8087
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8087
  br label %for.cond17, !dbg !8087

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %call18 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !8090
  %tobool19 = icmp ne i8 %call18, 0, !dbg !8090
  %lnot20 = xor i1 %tobool19, true, !dbg !8090
  br i1 %lnot20, label %for.body21, label %for.end30, !dbg !8087

for.body21:                                       ; preds = %for.cond17
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8092
  %call22 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %17), !dbg !8092
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8094
  %cmp23 = icmp eq %union.tree_node* %call22, %18, !dbg !8095
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !8096

if.then25:                                        ; preds = %for.body21
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8097
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !8098
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8099
  %call26 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %19, %struct.ssa_use_operand_d* %20, %struct.ssa_use_operand_d* %21), !dbg !8100
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8101
  br label %if.end27, !dbg !8102

if.end27:                                         ; preds = %if.then25, %for.body21
  br label %for.inc28, !dbg !8094

for.inc28:                                        ; preds = %if.end27
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !8090
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8090
  br label %for.cond17, !dbg !8090, !llvm.loop !8103

for.end30:                                        ; preds = %for.cond17
  br label %if.end43, !dbg !8105

if.else31:                                        ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !8106
  %call32 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %22), !dbg !8108
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8109
  %cmp33 = icmp ne %struct.ssa_use_operand_d* %call32, null, !dbg !8110
  br i1 %cmp33, label %if.then35, label %if.end42, !dbg !8111

if.then35:                                        ; preds = %if.else31
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8112
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !8112
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8115
  %cmp37 = icmp eq %union.tree_node* %call36, %24, !dbg !8116
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !8117

if.then39:                                        ; preds = %if.then35
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8118
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !8119
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8120
  %call40 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %25, %struct.ssa_use_operand_d* %26, %struct.ssa_use_operand_d* %27), !dbg !8121
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8122
  br label %if.end41, !dbg !8123

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !8124

if.end42:                                         ; preds = %if.end41, %if.else31
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %for.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.end
  %28 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8125
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %28, i32 0, i32 2, !dbg !8127
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !8128
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8128
  %cmp45 = icmp ne %struct.ssa_use_operand_d* %29, null, !dbg !8129
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !8130

if.then47:                                        ; preds = %if.end44
  %30 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8131
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %30, i32 0, i32 2, !dbg !8132
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node48), !dbg !8133
  br label %if.end49, !dbg !8133

if.end49:                                         ; preds = %if.then47, %if.end44
  %31 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8134
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %31, i32 0, i32 2, !dbg !8135
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !8136
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %iter_node50, %struct.ssa_use_operand_d* %32), !dbg !8137
  ret void, !dbg !8138
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !8139 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8143, metadata !DIExpression()), !dbg !8144
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !8145, metadata !DIExpression()), !dbg !8146
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8147, metadata !DIExpression()), !dbg !8148
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !8149, metadata !DIExpression()), !dbg !8150
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8151
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !8152
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !8150
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !8153, metadata !DIExpression()), !dbg !8154
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8155
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !8156
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8157
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !8158
  store i8 0, i8* %done, align 8, !dbg !8159
  %3 = load i32, i32* %flags.addr, align 4, !dbg !8160
  %and = and i32 %3, 5, !dbg !8160
  %cmp = icmp ne i32 %and, 0, !dbg !8160
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8160

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8160
  br label %cond.end, !dbg !8160

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8160

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8160
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !8161
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !8162
  %conv = zext i8 %call1 to i32, !dbg !8162
  %tobool = icmp ne i32 %conv, 0, !dbg !8162
  %5 = zext i1 %tobool to i64, !dbg !8162
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !8162
  store i32 %cond2, i32* %comp, align 4, !dbg !8163
  %6 = load i32, i32* %flags.addr, align 4, !dbg !8164
  %7 = load i32, i32* %comp, align 4, !dbg !8166
  %and3 = and i32 %6, %7, !dbg !8167
  %cmp4 = icmp eq i32 %and3, 0, !dbg !8168
  br i1 %cmp4, label %if.then, label %if.end, !dbg !8169

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8170
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !8172
  store i8 1, i8* %done6, align 8, !dbg !8173
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8174
  br label %return, !dbg !8174

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8175
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8176
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !8177
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !8178
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8179
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !8180
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8181
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !8182
  store i32 %call7, i32* %num_phi, align 4, !dbg !8183
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8184
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !8185
  store i32 2, i32* %iter_type, align 4, !dbg !8186
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8187
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !8188
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8189
  br label %return, !dbg !8189

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8190
  ret %struct.ssa_use_operand_d* %15, !dbg !8190
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8191 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8196, metadata !DIExpression()), !dbg !8197
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8198
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !8199
  %1 = load i8, i8* %done, align 8, !dbg !8199
  ret i8 %1, !dbg !8200
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) #0 !dbg !8201 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %last_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !8204, metadata !DIExpression()), !dbg !8205
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !8206, metadata !DIExpression()), !dbg !8207
  store %struct.ssa_use_operand_d* %last_p, %struct.ssa_use_operand_d** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p.addr, metadata !8208, metadata !DIExpression()), !dbg !8209
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8210
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !8212
  %cmp = icmp ne %struct.ssa_use_operand_d* %0, %1, !dbg !8213
  br i1 %cmp, label %if.then, label %if.end3, !dbg !8214

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !8215
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !8218
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8218
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8219
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %3, %4, !dbg !8220
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !8221

if.then2:                                         ; preds = %if.then
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8222
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !8223
  br label %if.end, !dbg !8224

if.else:                                          ; preds = %if.then
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8225
  call void @delink_imm_use(%struct.ssa_use_operand_d* %6), !dbg !8227
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8228
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !8229
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d* %8), !dbg !8230
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8231
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !8232
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3, !dbg !8233

if.end3:                                          ; preds = %if.end, %entry
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !8234
  ret %struct.ssa_use_operand_d* %10, !dbg !8235
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8236 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8239, metadata !DIExpression()), !dbg !8240
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !8241, metadata !DIExpression()), !dbg !8242
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8243
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !8245
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !8245
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !8243
  br i1 %tobool, label %if.then, label %if.end, !dbg !8246

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8247
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !8247
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !8247
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !8247
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8249
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8250
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !8251
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !8251
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !8252
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !8252
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8253
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !8254
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !8255
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8256
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8257
  br label %return, !dbg !8257

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8258
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !8260
  %10 = load i32, i32* %phi_i, align 8, !dbg !8260
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8261
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !8262
  %12 = load i32, i32* %num_phi, align 4, !dbg !8262
  %cmp = icmp slt i32 %10, %12, !dbg !8263
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !8264

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8265
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !8265
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !8265
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8265
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !8265
  %16 = load i32, i32* %phi_i5, align 8, !dbg !8265
  %inc = add nsw i32 %16, 1, !dbg !8265
  store i32 %inc, i32* %phi_i5, align 8, !dbg !8265
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !8265
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8267
  br label %return, !dbg !8267

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8268
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !8269
  store i8 1, i8* %done, align 8, !dbg !8270
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8271
  br label %return, !dbg !8271

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8272
  ret %struct.ssa_use_operand_d* %18, !dbg !8272
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !8273 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8274, metadata !DIExpression()), !dbg !8275
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8276, metadata !DIExpression()), !dbg !8277
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8278, metadata !DIExpression()), !dbg !8279
  %0 = load i32, i32* %flags.addr, align 4, !dbg !8280
  %and = and i32 %0, 10, !dbg !8280
  %cmp = icmp eq i32 %and, 0, !dbg !8280
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !8280

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !8280
  %and1 = and i32 %1, 1, !dbg !8280
  %tobool = icmp ne i32 %and1, 0, !dbg !8280
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8280

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8280
  br label %cond.end, !dbg !8280

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !8280

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8280
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8281
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8282
  %4 = load i32, i32* %flags.addr, align 4, !dbg !8283
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !8284
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8285
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !8286
  store i32 2, i32* %iter_type, align 4, !dbg !8287
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8288
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !8289
  ret %struct.ssa_use_operand_d* %call, !dbg !8290
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !8291 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8294, metadata !DIExpression()), !dbg !8295
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !8296, metadata !DIExpression()), !dbg !8297
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8298
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !8300
  %tobool = icmp ne i8 %call, 0, !dbg !8300
  br i1 %tobool, label %if.end, label %if.then, !dbg !8301

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8302
  br label %return, !dbg !8302

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8303
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !8304
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !8305
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !8306
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !8306
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !8307
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !8308
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !8308
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !8310

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !8311
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !8311
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !8312
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !8312
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8313
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !8314
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !8315
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !8316
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !8317

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !8318
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !8318
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8319
  br label %return, !dbg !8319

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8320
  br label %return, !dbg !8320

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8321
  ret %struct.ssa_use_operand_d* %8, !dbg !8321
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !8322 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !8325, metadata !DIExpression()), !dbg !8326
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8327
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !8329
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8329
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !8330
  br i1 %cmp, label %if.then, label %if.end, !dbg !8331

if.then:                                          ; preds = %entry
  br label %return, !dbg !8332

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8333
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !8334
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8334
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8335
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !8336
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !8336
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !8337
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !8338
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8339
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !8340
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !8340
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8341
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !8342
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !8342
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !8343
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !8344
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8345
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !8346
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !8347
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8348
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !8349
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !8350
  br label %return, !dbg !8351

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !8351
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !8352 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !8355, metadata !DIExpression()), !dbg !8356
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !8357, metadata !DIExpression()), !dbg !8358
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8359
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8360
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !8361
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8362
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8363
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !8364
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8364
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8365
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !8366
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !8367
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8368
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8369
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !8370
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !8370
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !8371
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !8372
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8373
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8374
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !8375
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !8376
  ret void, !dbg !8377
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !8378 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8379, metadata !DIExpression()), !dbg !8380
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8381
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !8382
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !8383
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8383
  ret %union.tree_node* %1, !dbg !8384
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8385 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8388, metadata !DIExpression()), !dbg !8389
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8390
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !8391
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !8392
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8393
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !8394
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !8395
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8396
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !8397
  store i32 0, i32* %iter_type, align 4, !dbg !8398
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8399
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !8400
  store i32 0, i32* %phi_i, align 8, !dbg !8401
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8402
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !8403
  store i32 0, i32* %num_phi, align 4, !dbg !8404
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8405
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !8406
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !8407
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8408
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !8409
  store i8 1, i8* %done, align 8, !dbg !8410
  ret void, !dbg !8411
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !8412 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8415, metadata !DIExpression()), !dbg !8416
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8417, metadata !DIExpression()), !dbg !8418
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8419, metadata !DIExpression()), !dbg !8420
  %0 = load i32, i32* %flags.addr, align 4, !dbg !8421
  %and = and i32 %0, 8, !dbg !8421
  %tobool = icmp ne i32 %and, 0, !dbg !8421
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !8421

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !8421
  %and1 = and i32 %1, 2, !dbg !8421
  %tobool2 = icmp ne i32 %and1, 0, !dbg !8421
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !8421

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !8421
  %and3 = and i32 %2, 4, !dbg !8421
  %tobool4 = icmp ne i32 %and3, 0, !dbg !8421
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !8421

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !8421
  %and6 = and i32 %3, 1, !dbg !8421
  %tobool7 = icmp ne i32 %and6, 0, !dbg !8421
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !8421

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8421
  br label %cond.end, !dbg !8421

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !8421

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8421
  %4 = load i32, i32* %flags.addr, align 4, !dbg !8422
  %and8 = and i32 %4, 10, !dbg !8423
  %tobool9 = icmp ne i32 %and8, 0, !dbg !8423
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !8424

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8425
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !8426
  br label %cond.end12, !dbg !8424

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !8424

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !8424
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8427
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !8428
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !8429
  %7 = load i32, i32* %flags.addr, align 4, !dbg !8430
  %and14 = and i32 %7, 8, !dbg !8432
  %tobool15 = icmp ne i32 %and14, 0, !dbg !8432
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !8433

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8434
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !8435
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !8435
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !8434
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !8436

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8437
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !8438
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !8439
  br i1 %cmp, label %if.then, label %if.end, !dbg !8440

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8441
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !8442
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !8442
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !8443
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !8443
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8444
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !8445
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !8446
  br label %if.end, !dbg !8444

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !8447
  %and23 = and i32 %15, 5, !dbg !8448
  %tobool24 = icmp ne i32 %and23, 0, !dbg !8448
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !8449

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8450
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !8451
  br label %cond.end28, !dbg !8449

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !8449

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !8449
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8452
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !8453
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !8454
  %18 = load i32, i32* %flags.addr, align 4, !dbg !8455
  %and30 = and i32 %18, 4, !dbg !8457
  %tobool31 = icmp ne i32 %and30, 0, !dbg !8457
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !8458

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8459
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !8460
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !8460
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !8459
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !8461

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8462
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !8463
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !8464
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !8465

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8466
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !8467
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !8467
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !8468
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !8468
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8469
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !8470
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !8471
  br label %if.end42, !dbg !8469

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8472
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !8473
  store i8 0, i8* %done, align 8, !dbg !8474
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8475
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !8476
  store i32 0, i32* %phi_i, align 8, !dbg !8477
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8478
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !8479
  store i32 0, i32* %num_phi, align 4, !dbg !8480
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8481
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !8482
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !8483
  ret void, !dbg !8484
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !8485 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8488, metadata !DIExpression()), !dbg !8489
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8490
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !8492
  %tobool = icmp ne i8 %call, 0, !dbg !8492
  br i1 %tobool, label %if.end, label %if.then, !dbg !8493

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !8494
  br label %return, !dbg !8494

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8495
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !8496
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !8497
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !8498
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !8498
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !8499
  br label %return, !dbg !8499

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !8500
  ret %struct.def_optype_d* %3, !dbg !8500
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !8501 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8502, metadata !DIExpression()), !dbg !8503
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8504
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !8506
  %tobool = icmp ne i8 %call, 0, !dbg !8506
  br i1 %tobool, label %if.end, label %if.then, !dbg !8507

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8508
  br label %return, !dbg !8508

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8509
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !8510
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !8511
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !8511
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !8512
  br label %return, !dbg !8512

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8513
  ret %union.tree_node* %3, !dbg !8513
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !8514 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8517, metadata !DIExpression()), !dbg !8518
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8519
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !8521
  %tobool = icmp ne i8 %call, 0, !dbg !8521
  br i1 %tobool, label %if.end, label %if.then, !dbg !8522

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !8523
  br label %return, !dbg !8523

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8524
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !8525
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !8526
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !8527
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !8527
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !8528
  br label %return, !dbg !8528

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !8529
  ret %struct.use_optype_d* %3, !dbg !8529
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !8530 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8531, metadata !DIExpression()), !dbg !8532
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8533
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !8535
  %tobool = icmp ne i8 %call, 0, !dbg !8535
  br i1 %tobool, label %if.end, label %if.then, !dbg !8536

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8537
  br label %return, !dbg !8537

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8538
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !8539
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !8540
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !8540
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !8541
  br label %return, !dbg !8541

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8542
  ret %union.tree_node* %3, !dbg !8542
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !8543 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8544, metadata !DIExpression()), !dbg !8545
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8546
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8547
  %cmp = icmp uge i32 %call, 6, !dbg !8548
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !8549

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8550
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !8551
  %cmp2 = icmp ule i32 %call1, 9, !dbg !8552
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !8553
  %land.ext = zext i1 %2 to i32, !dbg !8549
  %conv = trunc i32 %land.ext to i8, !dbg !8547
  ret i8 %conv, !dbg !8554
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @build_linear_expr(%union.tree_node* %type, i32* %coefs, %struct.VEC_tree_heap* %ivs) #0 !dbg !8555 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %coefs.addr = alloca i32*, align 8
  %ivs.addr = alloca %struct.VEC_tree_heap*, align 8
  %i = alloca i32, align 4
  %iv = alloca %union.tree_node*, align 8
  %expr = alloca %union.tree_node*, align 8
  %k = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !8558, metadata !DIExpression()), !dbg !8559
  store i32* %coefs, i32** %coefs.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %coefs.addr, metadata !8560, metadata !DIExpression()), !dbg !8561
  store %struct.VEC_tree_heap* %ivs, %struct.VEC_tree_heap** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %ivs.addr, metadata !8562, metadata !DIExpression()), !dbg !8563
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8564, metadata !DIExpression()), !dbg !8565
  call void @llvm.dbg.declare(metadata %union.tree_node** %iv, metadata !8566, metadata !DIExpression()), !dbg !8567
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !8568, metadata !DIExpression()), !dbg !8569
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8570
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !8570
  %call = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %0, %union.tree_node* %1), !dbg !8570
  store %union.tree_node* %call, %union.tree_node** %expr, align 8, !dbg !8569
  store i32 0, i32* %i, align 4, !dbg !8571
  br label %for.cond, !dbg !8573

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ivs.addr, align 8, !dbg !8574
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !8574
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8574

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ivs.addr, align 8, !dbg !8574
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !8574
  br label %cond.end, !dbg !8574

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8574

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8574
  %4 = load i32, i32* %i, align 4, !dbg !8574
  %call1 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %4, %union.tree_node** %iv), !dbg !8574
  %tobool2 = icmp ne i32 %call1, 0, !dbg !8576
  br i1 %tobool2, label %for.body, label %for.end, !dbg !8576

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %k, metadata !8577, metadata !DIExpression()), !dbg !8579
  %5 = load i32*, i32** %coefs.addr, align 8, !dbg !8580
  %6 = load i32, i32* %i, align 4, !dbg !8581
  %idxprom = zext i32 %6 to i64, !dbg !8580
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom, !dbg !8580
  %7 = load i32, i32* %arrayidx, align 4, !dbg !8580
  store i32 %7, i32* %k, align 4, !dbg !8579
  %8 = load i32, i32* %k, align 4, !dbg !8582
  %cmp = icmp eq i32 %8, 1, !dbg !8584
  br i1 %cmp, label %if.then, label %if.else, !dbg !8585

if.then:                                          ; preds = %for.body
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8586
  %10 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8586
  %11 = load %union.tree_node*, %union.tree_node** %iv, align 8, !dbg !8586
  %call3 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %9, %union.tree_node* %10, %union.tree_node* %11), !dbg !8586
  store %union.tree_node* %call3, %union.tree_node** %expr, align 8, !dbg !8587
  br label %if.end9, !dbg !8588

if.else:                                          ; preds = %for.body
  %12 = load i32, i32* %k, align 4, !dbg !8589
  %cmp4 = icmp ne i32 %12, 0, !dbg !8591
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !8592

if.then5:                                         ; preds = %if.else
  %13 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8593
  %14 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8593
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8593
  %16 = load %union.tree_node*, %union.tree_node** %iv, align 8, !dbg !8593
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8593
  %18 = load i32, i32* %k, align 4, !dbg !8593
  %conv = sext i32 %18 to i64, !dbg !8593
  %call6 = call %union.tree_node* @build_int_cst(%union.tree_node* %17, i64 %conv), !dbg !8593
  %call7 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %15, %union.tree_node* %16, %union.tree_node* %call6), !dbg !8593
  %call8 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %13, %union.tree_node* %14, %union.tree_node* %call7), !dbg !8593
  store %union.tree_node* %call8, %union.tree_node** %expr, align 8, !dbg !8594
  br label %if.end, !dbg !8595

if.end:                                           ; preds = %if.then5, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  br label %for.inc, !dbg !8596

for.inc:                                          ; preds = %if.end9
  %19 = load i32, i32* %i, align 4, !dbg !8597
  %inc = add i32 %19, 1, !dbg !8597
  store i32 %inc, i32* %i, align 4, !dbg !8597
  br label %for.cond, !dbg !8598, !llvm.loop !8599

for.end:                                          ; preds = %cond.end
  %20 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8601
  ret %union.tree_node* %20, !dbg !8602
}

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold(%union.tree_node*) #2

declare dso_local %union.tree_node* @force_gimple_operand(%union.tree_node*, %struct.gimple_seq_d**, i8 zeroext, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !8603 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8606, metadata !DIExpression()), !dbg !8607
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !8608, metadata !DIExpression()), !dbg !8609
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !8610, metadata !DIExpression()), !dbg !8611
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8612
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !8612
  %conv = zext i8 %call to i32, !dbg !8612
  %tobool = icmp ne i32 %conv, 0, !dbg !8612
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !8612

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !8612
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8612
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !8612
  %cmp = icmp ult i32 %1, %call1, !dbg !8612
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8612

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8612
  br label %cond.end, !dbg !8612

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !8612

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8612
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !8613
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8614
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !8615
  %5 = load i32, i32* %i.addr, align 4, !dbg !8616
  %idxprom = zext i32 %5 to i64, !dbg !8615
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !8615
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !8617
  ret void, !dbg !8618
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !8619 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8620, metadata !DIExpression()), !dbg !8621
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8622
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8623
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !8624
  %1 = load i32, i32* %num_ops, align 4, !dbg !8624
  ret i32 %1, !dbg !8625
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_code(%union.gimple_statement_d* %gs, i32 %code) #0 !dbg !8626 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8629, metadata !DIExpression()), !dbg !8630
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !8631, metadata !DIExpression()), !dbg !8632
  %0 = load i32, i32* %code.addr, align 4, !dbg !8633
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8634
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !8635
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8636
  %bf.load = load i32, i32* %2, align 8, !dbg !8637
  %bf.value = and i32 %0, 65535, !dbg !8637
  %bf.shl = shl i32 %bf.value, 16, !dbg !8637
  %bf.clear = and i32 %bf.load, 65535, !dbg !8637
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !8637
  store i32 %bf.set, i32* %2, align 8, !dbg !8637
  ret void, !dbg !8638
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !8639 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8640, metadata !DIExpression()), !dbg !8641
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !8642, metadata !DIExpression()), !dbg !8643
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8644
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8645
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !8646
  ret void, !dbg !8647
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_rhs(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !8648 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8649, metadata !DIExpression()), !dbg !8650
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !8651, metadata !DIExpression()), !dbg !8652
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8653
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8654
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !8655
  ret void, !dbg !8656
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !8657 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8660, metadata !DIExpression()), !dbg !8661
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8662, metadata !DIExpression()), !dbg !8663
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8664, metadata !DIExpression()), !dbg !8665
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8666
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8667
  %2 = load i32, i32* %flags.addr, align 4, !dbg !8668
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !8669
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8670
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !8671
  store i32 1, i32* %iter_type, align 4, !dbg !8672
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8673
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !8674
  ret %union.tree_node* %call, !dbg !8675
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8676 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8679, metadata !DIExpression()), !dbg !8680
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !8681, metadata !DIExpression()), !dbg !8682
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8683
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !8685
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !8685
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !8683
  br i1 %tobool, label %if.then, label %if.end, !dbg !8686

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8687
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !8687
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !8687
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !8687
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !8687
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !8689
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8690
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !8691
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !8691
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !8692
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !8692
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8693
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !8694
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !8695
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8696
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !8697
  br label %return, !dbg !8697

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8698
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !8700
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !8700
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !8698
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !8701

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8702
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !8702
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !8702
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !8702
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !8702
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !8702
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !8704
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8705
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !8706
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !8706
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !8707
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !8707
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8708
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !8709
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !8710
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8711
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !8712
  br label %return, !dbg !8712

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8713
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !8714
  store i8 1, i8* %done, align 8, !dbg !8715
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8716
  br label %return, !dbg !8716

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8717
  ret %union.tree_node* %20, !dbg !8717
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !8718 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !8723, metadata !DIExpression()), !dbg !8724
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8725, metadata !DIExpression()), !dbg !8724
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8724
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !8724
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8724

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8724
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8724
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !8724
  %3 = load i32, i32* %num, align 8, !dbg !8724
  %cmp = icmp ult i32 %1, %3, !dbg !8724
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8726
  %land.ext = zext i1 %4 to i32, !dbg !8724
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8724
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !8724
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8724
  %idxprom = zext i32 %6 to i64, !dbg !8724
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !8724
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !8724
  ret %struct.edge_def* %7, !dbg !8724
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %vec_, i32 %alloc_) #0 !dbg !8727 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !8730, metadata !DIExpression()), !dbg !8731
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8732, metadata !DIExpression()), !dbg !8731
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !8733, metadata !DIExpression()), !dbg !8731
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !8731
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !8731
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !8731
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8731

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !8731
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !8731
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !8731
  br label %cond.end, !dbg !8731

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8731

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8731
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !8731
  %call = call i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %cond, i32 %4), !dbg !8731
  %tobool1 = icmp ne i32 %call, 0, !dbg !8731
  %lnot = xor i1 %tobool1, true, !dbg !8731
  %lnot.ext = zext i1 %lnot to i32, !dbg !8731
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !8731
  %5 = load i32, i32* %extend, align 4, !dbg !8734
  %tobool2 = icmp ne i32 %5, 0, !dbg !8734
  br i1 %tobool2, label %if.then, label %if.end, !dbg !8731

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !8734
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %6, align 8, !dbg !8734
  %8 = bitcast %struct.VEC_gimple_heap* %7 to i8*, !dbg !8734
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !8734
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !8734
  %10 = bitcast i8* %call3 to %struct.VEC_gimple_heap*, !dbg !8734
  %11 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !8734
  store %struct.VEC_gimple_heap* %10, %struct.VEC_gimple_heap** %11, align 8, !dbg !8734
  br label %if.end, !dbg !8734

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !8731
  ret i32 %12, !dbg !8731
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !8736 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  %slot_ = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !8740, metadata !DIExpression()), !dbg !8741
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !8742, metadata !DIExpression()), !dbg !8741
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %slot_, metadata !8743, metadata !DIExpression()), !dbg !8741
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8741
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !8741
  %1 = load i32, i32* %num, align 8, !dbg !8741
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8741
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !8741
  %3 = load i32, i32* %alloc, align 4, !dbg !8741
  %cmp = icmp ult i32 %1, %3, !dbg !8741
  %conv = zext i1 %cmp to i32, !dbg !8741
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8741
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !8741
  %5 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8741
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %5, i32 0, i32 0, !dbg !8741
  %6 = load i32, i32* %num1, align 8, !dbg !8741
  %inc = add i32 %6, 1, !dbg !8741
  store i32 %inc, i32* %num1, align 8, !dbg !8741
  %idxprom = zext i32 %6 to i64, !dbg !8741
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !8741
  store %union.gimple_statement_d** %arrayidx, %union.gimple_statement_d*** %slot_, align 8, !dbg !8741
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !8741
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !8741
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %8, align 8, !dbg !8741
  %9 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !8741
  ret %union.gimple_statement_d** %9, !dbg !8741
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %vec_, i32 %alloc_) #0 !dbg !8744 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !8747, metadata !DIExpression()), !dbg !8748
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8749, metadata !DIExpression()), !dbg !8748
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !8748
  %cmp = icmp sge i32 %0, 0, !dbg !8748
  %conv = zext i1 %cmp to i32, !dbg !8748
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8748
  %tobool = icmp ne %struct.VEC_gimple_base* %1, null, !dbg !8748
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8748

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8748
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !8748
  %3 = load i32, i32* %alloc, align 4, !dbg !8748
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8748
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 0, !dbg !8748
  %5 = load i32, i32* %num, align 8, !dbg !8748
  %sub = sub i32 %3, %5, !dbg !8748
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !8748
  %cmp1 = icmp uge i32 %sub, %6, !dbg !8748
  %conv2 = zext i1 %cmp1 to i32, !dbg !8748
  br label %cond.end, !dbg !8748

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !8748
  %tobool3 = icmp ne i32 %7, 0, !dbg !8748
  %lnot = xor i1 %tobool3, true, !dbg !8748
  %lnot.ext = zext i1 %lnot to i32, !dbg !8748
  br label %cond.end, !dbg !8748

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !8748
  ret i32 %cond, !dbg !8748
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !8750 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8756, metadata !DIExpression()), !dbg !8757
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8758
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !8759
  %1 = load i32, i32* %flags, align 8, !dbg !8759
  %and = and i32 %1, 512, !dbg !8760
  %tobool = icmp ne i32 %and, 0, !dbg !8760
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !8761

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8762
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !8763
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !8764
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !8764
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !8762
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !8765

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8766
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !8767
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !8768
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !8768
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !8769
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !8769
  br label %cond.end, !dbg !8765

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !8765

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !8765
  ret %struct.gimple_seq_d* %cond, !dbg !8770
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !8771 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !8777, metadata !DIExpression()), !dbg !8778
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !8779
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !8779
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8779

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !8780
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !8781
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !8781
  br label %cond.end, !dbg !8779

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8779

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !8779
  ret %struct.gimple_seq_node_d* %cond, !dbg !8782
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !8783 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8786, metadata !DIExpression()), !dbg !8787
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !8788, metadata !DIExpression()), !dbg !8789
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8790
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !8790
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !8790
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8791
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !8792
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !8793
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8794
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !8795
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !8795
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !8796
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8796
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8797
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !8798
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8799
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8800
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %6), !dbg !8802
  %tobool = icmp ne i8 %call, 0, !dbg !8802
  br i1 %tobool, label %if.then, label %if.end, !dbg !8803

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8804
  br label %return, !dbg !8804

if.end:                                           ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8805
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !8806
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !8806
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8807
  br label %return, !dbg !8807

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8808
  ret %struct.ssa_use_operand_d* %9, !dbg !8808
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !8809 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8810, metadata !DIExpression()), !dbg !8811
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8812
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !8813
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8813
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8814
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !8815
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !8815
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !8816
  %conv = zext i1 %cmp to i32, !dbg !8816
  %conv1 = trunc i32 %conv to i8, !dbg !8817
  ret i8 %conv1, !dbg !8818
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @phi_loop_edge_uses_def(%struct.loop* %loop, %union.gimple_statement_d* %phi, %union.tree_node* %def) #0 !dbg !8819 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8822, metadata !DIExpression()), !dbg !8823
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !8824, metadata !DIExpression()), !dbg !8825
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !8826, metadata !DIExpression()), !dbg !8827
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8828, metadata !DIExpression()), !dbg !8829
  store i32 0, i32* %i, align 4, !dbg !8830
  br label %for.cond, !dbg !8832

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !8833
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8835
  %call = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %1), !dbg !8836
  %cmp = icmp ult i32 %0, %call, !dbg !8837
  br i1 %cmp, label %for.body, label %for.end, !dbg !8838

for.body:                                         ; preds = %for.cond
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8839
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8841
  %4 = load i32, i32* %i, align 4, !dbg !8842
  %conv = zext i32 %4 to i64, !dbg !8842
  %call1 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %3, i64 %conv), !dbg !8843
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call1, i32 0, i32 0, !dbg !8844
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !8844
  %call2 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %2, %struct.basic_block_def* %5), !dbg !8845
  %tobool = icmp ne i8 %call2, 0, !dbg !8845
  br i1 %tobool, label %if.then, label %if.end8, !dbg !8846

if.then:                                          ; preds = %for.body
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !8847
  %7 = load i32, i32* %i, align 4, !dbg !8847
  %call3 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %6, i32 %7), !dbg !8847
  %call4 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call3), !dbg !8847
  %8 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !8849
  %cmp5 = icmp eq %union.tree_node* %call4, %8, !dbg !8850
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !8851

if.then7:                                         ; preds = %if.then
  store i8 1, i8* %retval, align 1, !dbg !8852
  br label %return, !dbg !8852

if.end:                                           ; preds = %if.then
  br label %if.end8, !dbg !8849

if.end8:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !8853

for.inc:                                          ; preds = %if.end8
  %9 = load i32, i32* %i, align 4, !dbg !8854
  %inc = add i32 %9, 1, !dbg !8854
  store i32 %inc, i32* %i, align 4, !dbg !8854
  br label %for.cond, !dbg !8855, !llvm.loop !8856

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !8858
  br label %return, !dbg !8858

return:                                           ; preds = %for.end, %if.then7
  %10 = load i8, i8* %retval, align 1, !dbg !8859
  ret i8 %10, !dbg !8859
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @stmt_uses_phi_result(%union.gimple_statement_d* %stmt, %union.tree_node* %phi_result) #0 !dbg !8860 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %phi_result.addr = alloca %union.tree_node*, align 8
  %use = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8863, metadata !DIExpression()), !dbg !8864
  store %union.tree_node* %phi_result, %union.tree_node** %phi_result.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_result.addr, metadata !8865, metadata !DIExpression()), !dbg !8866
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !8867, metadata !DIExpression()), !dbg !8868
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8869
  %call = call %union.tree_node* @single_ssa_tree_operand(%union.gimple_statement_d* %0, i32 1), !dbg !8869
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !8868
  %1 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8870
  %2 = load %union.tree_node*, %union.tree_node** %phi_result.addr, align 8, !dbg !8871
  %cmp = icmp eq %union.tree_node* %1, %2, !dbg !8872
  %conv = zext i1 %cmp to i32, !dbg !8872
  %conv1 = trunc i32 %conv to i8, !dbg !8873
  ret i8 %conv1, !dbg !8874
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm) #0 !dbg !8875 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %old = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8876, metadata !DIExpression()), !dbg !8877
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %old, metadata !8878, metadata !DIExpression()), !dbg !8879
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8880
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !8881
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8881
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %old, align 8, !dbg !8879
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %old, align 8, !dbg !8882
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !8883
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8883
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8884
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !8885
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !8886
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8887
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %5), !dbg !8889
  %tobool = icmp ne i8 %call, 0, !dbg !8889
  br i1 %tobool, label %if.then, label %if.end, !dbg !8890

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8891
  br label %return, !dbg !8891

if.end:                                           ; preds = %entry
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8892
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 0, !dbg !8893
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !8893
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8894
  br label %return, !dbg !8894

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8895
  ret %struct.ssa_use_operand_d* %8, !dbg !8895
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cannot_convert_bb_to_perfect_nest(%struct.basic_block_def* %bb, %struct.loop* %loop) #0 !dbg !8896 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %exit_condition = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8899, metadata !DIExpression()), !dbg !8900
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8901, metadata !DIExpression()), !dbg !8902
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !8903, metadata !DIExpression()), !dbg !8904
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %exit_condition, metadata !8905, metadata !DIExpression()), !dbg !8906
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8907
  %call = call %union.gimple_statement_d* @get_loop_exit_condition(%struct.loop* %0), !dbg !8908
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %exit_condition, align 8, !dbg !8906
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8909
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %1), !dbg !8911
  %2 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !8911
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !8911
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false), !dbg !8911
  br label %for.cond, !dbg !8912

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !8913
  %tobool = icmp ne i8 %call1, 0, !dbg !8915
  %lnot = xor i1 %tobool, true, !dbg !8915
  br i1 %lnot, label %for.body, label %for.end, !dbg !8916

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !8917, metadata !DIExpression()), !dbg !8919
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !8920
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %stmt, align 8, !dbg !8919
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8921
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %exit_condition, align 8, !dbg !8923
  %cmp = icmp eq %union.gimple_statement_d* %4, %5, !dbg !8924
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8925

lor.lhs.false:                                    ; preds = %for.body
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8926
  %call3 = call zeroext i8 @not_interesting_stmt(%union.gimple_statement_d* %6), !dbg !8927
  %conv = zext i8 %call3 to i32, !dbg !8927
  %tobool4 = icmp ne i32 %conv, 0, !dbg !8927
  br i1 %tobool4, label %if.then, label %lor.lhs.false5, !dbg !8928

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8929
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8930
  %call6 = call zeroext i8 @stmt_is_bumper_for_loop(%struct.loop* %7, %union.gimple_statement_d* %8), !dbg !8931
  %conv7 = zext i8 %call6 to i32, !dbg !8931
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !8931
  br i1 %tobool8, label %if.then, label %if.end, !dbg !8932

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false, %for.body
  br label %for.inc, !dbg !8933

if.end:                                           ; preds = %lor.lhs.false5
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8934
  %call9 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %9), !dbg !8936
  %tobool10 = icmp ne i8 %call9, 0, !dbg !8936
  br i1 %tobool10, label %if.then11, label %if.end30, !dbg !8937

if.then11:                                        ; preds = %if.end
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8938
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8941
  %call12 = call zeroext i8 @cannot_convert_modify_to_perfect_nest(%union.gimple_statement_d* %10, %struct.loop* %11), !dbg !8942
  %tobool13 = icmp ne i8 %call12, 0, !dbg !8942
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !8943

if.then14:                                        ; preds = %if.then11
  store i8 1, i8* %retval, align 1, !dbg !8944
  br label %return, !dbg !8944

if.end15:                                         ; preds = %if.then11
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8945
  %call16 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %12), !dbg !8947
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8948
  %call17 = call zeroext i8 @can_duplicate_iv(%union.tree_node* %call16, %struct.loop* %13), !dbg !8949
  %tobool18 = icmp ne i8 %call17, 0, !dbg !8949
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !8950

if.then19:                                        ; preds = %if.end15
  br label %for.inc, !dbg !8951

if.end20:                                         ; preds = %if.end15
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8952
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 8, !dbg !8954
  %15 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !8954
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8955
  %call21 = call zeroext i8 @can_put_in_inner_loop(%struct.loop* %15, %union.gimple_statement_d* %16), !dbg !8956
  %conv22 = zext i8 %call21 to i32, !dbg !8956
  %tobool23 = icmp ne i32 %conv22, 0, !dbg !8956
  br i1 %tobool23, label %if.then28, label %lor.lhs.false24, !dbg !8957

lor.lhs.false24:                                  ; preds = %if.end20
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8958
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8959
  %call25 = call zeroext i8 @can_put_after_inner_loop(%struct.loop* %17, %union.gimple_statement_d* %18), !dbg !8960
  %conv26 = zext i8 %call25 to i32, !dbg !8960
  %tobool27 = icmp ne i32 %conv26, 0, !dbg !8960
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !8961

if.then28:                                        ; preds = %lor.lhs.false24, %if.end20
  br label %for.inc, !dbg !8962

if.end29:                                         ; preds = %lor.lhs.false24
  br label %if.end30, !dbg !8963

if.end30:                                         ; preds = %if.end29, %if.end
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8964
  %call31 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %19), !dbg !8966
  %20 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8967
  %inner32 = getelementptr inbounds %struct.loop, %struct.loop* %20, i32 0, i32 8, !dbg !8968
  %21 = load %struct.loop*, %struct.loop** %inner32, align 8, !dbg !8968
  %header = getelementptr inbounds %struct.loop, %struct.loop* %21, i32 0, i32 2, !dbg !8969
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !8969
  %call33 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %call31, %struct.basic_block_def* %22), !dbg !8970
  %tobool34 = icmp ne i8 %call33, 0, !dbg !8970
  br i1 %tobool34, label %if.end36, label %if.then35, !dbg !8971

if.then35:                                        ; preds = %if.end30
  store i8 1, i8* %retval, align 1, !dbg !8972
  br label %return, !dbg !8972

if.end36:                                         ; preds = %if.end30
  br label %for.inc, !dbg !8973

for.inc:                                          ; preds = %if.end36, %if.then28, %if.then19, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !8974
  br label %for.cond, !dbg !8975, !llvm.loop !8976

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !8978
  br label %return, !dbg !8978

return:                                           ; preds = %for.end, %if.then35, %if.then14
  %23 = load i8, i8* %retval, align 1, !dbg !8979
  ret i8 %23, !dbg !8979
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !8980 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8981, metadata !DIExpression()), !dbg !8982
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8983
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8984
  %cmp = icmp eq i32 %call, 6, !dbg !8985
  %conv = zext i1 %cmp to i32, !dbg !8985
  %conv1 = trunc i32 %conv to i8, !dbg !8984
  ret i8 %conv1, !dbg !8986
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cannot_convert_modify_to_perfect_nest(%union.gimple_statement_d* %stmt, %struct.loop* %loop) #0 !dbg !8987 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %use_a = alloca %struct.ssa_use_operand_d*, align 8
  %use_b = alloca %struct.ssa_use_operand_d*, align 8
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %op_iter1 = alloca %struct.ssa_operand_iterator_d, align 8
  %op0 = alloca %union.tree_node*, align 8
  %node = alloca %union.gimple_statement_d*, align 8
  %op = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  %arg_stmt = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8990, metadata !DIExpression()), !dbg !8991
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8992, metadata !DIExpression()), !dbg !8993
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_a, metadata !8994, metadata !DIExpression()), !dbg !8995
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_b, metadata !8996, metadata !DIExpression()), !dbg !8997
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !8998, metadata !DIExpression()), !dbg !8999
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !9000, metadata !DIExpression()), !dbg !9001
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter1, metadata !9002, metadata !DIExpression()), !dbg !9003
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !9004, metadata !DIExpression()), !dbg !9005
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9006
  %call = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %0), !dbg !9007
  store %union.tree_node* %call, %union.tree_node** %op0, align 8, !dbg !9005
  %1 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9008
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !9008
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !9008
  %bf.load = load i64, i64* %2, align 8, !dbg !9008
  %bf.clear = and i64 %bf.load, 65535, !dbg !9008
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9008
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !9010
  br i1 %cmp, label %land.lhs.true, label %if.end10, !dbg !9011

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9012
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9013
  %call1 = call zeroext i8 @can_duplicate_iv(%union.tree_node* %3, %struct.loop* %4), !dbg !9014
  %tobool = icmp ne i8 %call1, 0, !dbg !9014
  br i1 %tobool, label %if.end10, label %if.then, !dbg !9015

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9016
  %call2 = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %5), !dbg !9016
  store %struct.ssa_use_operand_d* %call2, %struct.ssa_use_operand_d** %use_a, align 8, !dbg !9016
  br label %for.cond, !dbg !9016

for.cond:                                         ; preds = %for.inc, %if.then
  %call3 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !9018
  %tobool4 = icmp ne i8 %call3, 0, !dbg !9018
  %lnot = xor i1 %tobool4, true, !dbg !9018
  br i1 %lnot, label %for.body, label %for.end, !dbg !9016

for.body:                                         ; preds = %for.cond
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_a, align 8, !dbg !9020
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 2, !dbg !9020
  %stmt5 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !9020
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt5, align 8, !dbg !9020
  %call6 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %7), !dbg !9022
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call6, i32 0, i32 3, !dbg !9023
  %8 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !9023
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9024
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 8, !dbg !9025
  %10 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !9025
  %cmp7 = icmp eq %struct.loop* %8, %10, !dbg !9026
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !9027

if.then8:                                         ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !9028
  br label %return, !dbg !9028

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !9025

for.inc:                                          ; preds = %if.end
  %call9 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter), !dbg !9018
  store %struct.ssa_use_operand_d* %call9, %struct.ssa_use_operand_d** %use_a, align 8, !dbg !9018
  br label %for.cond, !dbg !9018, !llvm.loop !9029

for.end:                                          ; preds = %for.cond
  br label %if.end10, !dbg !9030

if.end10:                                         ; preds = %for.end, %land.lhs.true, %entry
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9031
  %call11 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %11, i32 1), !dbg !9031
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %use_a, align 8, !dbg !9031
  br label %for.cond12, !dbg !9031

for.cond12:                                       ; preds = %for.inc71, %if.end10
  %call13 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !9033
  %tobool14 = icmp ne i8 %call13, 0, !dbg !9033
  %lnot15 = xor i1 %tobool14, true, !dbg !9033
  br i1 %lnot15, label %for.body16, label %for.end73, !dbg !9031

for.body16:                                       ; preds = %for.cond12
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %node, metadata !9035, metadata !DIExpression()), !dbg !9037
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !9038, metadata !DIExpression()), !dbg !9039
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_a, align 8, !dbg !9040
  %call17 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %12), !dbg !9040
  store %union.tree_node* %call17, %union.tree_node** %op, align 8, !dbg !9039
  %13 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !9041
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9043
  %call18 = call zeroext i8 @can_duplicate_iv(%union.tree_node* %13, %struct.loop* %14), !dbg !9044
  %tobool19 = icmp ne i8 %call18, 0, !dbg !9044
  br i1 %tobool19, label %if.end38, label %if.then20, !dbg !9045

if.then20:                                        ; preds = %for.body16
  %15 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !9046
  %call21 = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %15), !dbg !9046
  store %struct.ssa_use_operand_d* %call21, %struct.ssa_use_operand_d** %use_b, align 8, !dbg !9046
  br label %for.cond22, !dbg !9046

for.cond22:                                       ; preds = %for.inc35, %if.then20
  %call23 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !9048
  %tobool24 = icmp ne i8 %call23, 0, !dbg !9048
  %lnot25 = xor i1 %tobool24, true, !dbg !9048
  br i1 %lnot25, label %for.body26, label %for.end37, !dbg !9046

for.body26:                                       ; preds = %for.cond22
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_b, align 8, !dbg !9050
  %loc27 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !9050
  %stmt28 = bitcast %union.anon* %loc27 to %union.gimple_statement_d**, !dbg !9050
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt28, align 8, !dbg !9050
  %call29 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %17), !dbg !9052
  %loop_father30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call29, i32 0, i32 3, !dbg !9053
  %18 = load %struct.loop*, %struct.loop** %loop_father30, align 8, !dbg !9053
  %19 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9054
  %inner31 = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 8, !dbg !9055
  %20 = load %struct.loop*, %struct.loop** %inner31, align 8, !dbg !9055
  %cmp32 = icmp eq %struct.loop* %18, %20, !dbg !9056
  br i1 %cmp32, label %if.then33, label %if.end34, !dbg !9057

if.then33:                                        ; preds = %for.body26
  store i8 1, i8* %retval, align 1, !dbg !9058
  br label %return, !dbg !9058

if.end34:                                         ; preds = %for.body26
  br label %for.inc35, !dbg !9055

for.inc35:                                        ; preds = %if.end34
  %call36 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter), !dbg !9048
  store %struct.ssa_use_operand_d* %call36, %struct.ssa_use_operand_d** %use_b, align 8, !dbg !9048
  br label %for.cond22, !dbg !9048, !llvm.loop !9059

for.end37:                                        ; preds = %for.cond22
  br label %if.end38, !dbg !9060

if.end38:                                         ; preds = %for.end37, %for.body16
  %21 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !9061
  %ssa_name = bitcast %union.tree_node* %21 to %struct.tree_ssa_name*, !dbg !9061
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !9061
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !9061
  store %union.gimple_statement_d* %22, %union.gimple_statement_d** %node, align 8, !dbg !9062
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %node, align 8, !dbg !9063
  %call39 = call i32 @gimple_code(%union.gimple_statement_d* %23), !dbg !9065
  %cmp40 = icmp eq i32 %call39, 16, !dbg !9066
  br i1 %cmp40, label %if.then41, label %if.end70, !dbg !9067

if.then41:                                        ; preds = %if.end38
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %node, align 8, !dbg !9068
  %call42 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter1, %union.gimple_statement_d* %24, i32 1), !dbg !9068
  store %struct.ssa_use_operand_d* %call42, %struct.ssa_use_operand_d** %use_b, align 8, !dbg !9068
  br label %for.cond43, !dbg !9068

for.cond43:                                       ; preds = %for.inc67, %if.then41
  %call44 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter1), !dbg !9070
  %tobool45 = icmp ne i8 %call44, 0, !dbg !9070
  %lnot46 = xor i1 %tobool45, true, !dbg !9070
  br i1 %lnot46, label %for.body47, label %for.end69, !dbg !9068

for.body47:                                       ; preds = %for.cond43
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !9072, metadata !DIExpression()), !dbg !9074
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_b, align 8, !dbg !9075
  %call48 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %25), !dbg !9075
  store %union.tree_node* %call48, %union.tree_node** %arg, align 8, !dbg !9074
  %26 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9076
  %base49 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !9076
  %27 = bitcast %struct.tree_base* %base49 to i64*, !dbg !9076
  %bf.load50 = load i64, i64* %27, align 8, !dbg !9076
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !9076
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !9076
  %cmp53 = icmp eq i32 %bf.cast52, 141, !dbg !9078
  br i1 %cmp53, label %if.then54, label %if.end66, !dbg !9079

if.then54:                                        ; preds = %for.body47
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %arg_stmt, metadata !9080, metadata !DIExpression()), !dbg !9082
  %28 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9083
  %ssa_name55 = bitcast %union.tree_node* %28 to %struct.tree_ssa_name*, !dbg !9083
  %def_stmt56 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name55, i32 0, i32 2, !dbg !9083
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt56, align 8, !dbg !9083
  store %union.gimple_statement_d* %29, %union.gimple_statement_d** %arg_stmt, align 8, !dbg !9082
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arg_stmt, align 8, !dbg !9084
  %call57 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %30), !dbg !9086
  %tobool58 = icmp ne %struct.basic_block_def* %call57, null, !dbg !9086
  br i1 %tobool58, label %land.lhs.true59, label %if.end65, !dbg !9087

land.lhs.true59:                                  ; preds = %if.then54
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arg_stmt, align 8, !dbg !9088
  %call60 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %31), !dbg !9089
  %loop_father61 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call60, i32 0, i32 3, !dbg !9090
  %32 = load %struct.loop*, %struct.loop** %loop_father61, align 8, !dbg !9090
  %33 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9091
  %inner62 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !9092
  %34 = load %struct.loop*, %struct.loop** %inner62, align 8, !dbg !9092
  %cmp63 = icmp eq %struct.loop* %32, %34, !dbg !9093
  br i1 %cmp63, label %if.then64, label %if.end65, !dbg !9094

if.then64:                                        ; preds = %land.lhs.true59
  store i8 1, i8* %retval, align 1, !dbg !9095
  br label %return, !dbg !9095

if.end65:                                         ; preds = %land.lhs.true59, %if.then54
  br label %if.end66, !dbg !9096

if.end66:                                         ; preds = %if.end65, %for.body47
  br label %for.inc67, !dbg !9097

for.inc67:                                        ; preds = %if.end66
  %call68 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter1), !dbg !9070
  store %struct.ssa_use_operand_d* %call68, %struct.ssa_use_operand_d** %use_b, align 8, !dbg !9070
  br label %for.cond43, !dbg !9070, !llvm.loop !9098

for.end69:                                        ; preds = %for.cond43
  br label %if.end70, !dbg !9099

if.end70:                                         ; preds = %for.end69, %if.end38
  br label %for.inc71, !dbg !9100

for.inc71:                                        ; preds = %if.end70
  %call72 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !9033
  store %struct.ssa_use_operand_d* %call72, %struct.ssa_use_operand_d** %use_a, align 8, !dbg !9033
  br label %for.cond12, !dbg !9033, !llvm.loop !9101

for.end73:                                        ; preds = %for.cond12
  store i8 0, i8* %retval, align 1, !dbg !9103
  br label %return, !dbg !9103

return:                                           ; preds = %for.end73, %if.then64, %if.then33, %if.then8
  %35 = load i8, i8* %retval, align 1, !dbg !9104
  ret i8 %35, !dbg !9104
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @can_duplicate_iv(%union.tree_node* %iv, %struct.loop* %loop) #0 !dbg !9105 {
entry:
  %retval = alloca i8, align 1
  %iv.addr = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %scev = alloca %union.tree_node*, align 8
  %step = alloca %union.tree_node*, align 8
  store %union.tree_node* %iv, %union.tree_node** %iv.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %iv.addr, metadata !9108, metadata !DIExpression()), !dbg !9109
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !9110, metadata !DIExpression()), !dbg !9111
  call void @llvm.dbg.declare(metadata %union.tree_node** %scev, metadata !9112, metadata !DIExpression()), !dbg !9113
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9114
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9115
  %2 = load %union.tree_node*, %union.tree_node** %iv.addr, align 8, !dbg !9116
  %call = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %1, %union.tree_node* %2), !dbg !9117
  %call1 = call %union.tree_node* @instantiate_parameters(%struct.loop* %0, %union.tree_node* %call), !dbg !9118
  store %union.tree_node* %call1, %union.tree_node** %scev, align 8, !dbg !9113
  %3 = load %union.tree_node*, %union.tree_node** %scev, align 8, !dbg !9119
  %call2 = call zeroext i8 @automatically_generated_chrec_p(%union.tree_node* %3), !dbg !9121
  %tobool = icmp ne i8 %call2, 0, !dbg !9121
  br i1 %tobool, label %if.end8, label %if.then, !dbg !9122

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !9123, metadata !DIExpression()), !dbg !9125
  %4 = load %union.tree_node*, %union.tree_node** %scev, align 8, !dbg !9126
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9127
  %num = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 0, !dbg !9128
  %6 = load i32, i32* %num, align 8, !dbg !9128
  %call3 = call %union.tree_node* @evolution_part_in_loop_num(%union.tree_node* %4, i32 %6), !dbg !9129
  store %union.tree_node* %call3, %union.tree_node** %step, align 8, !dbg !9125
  %7 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9130
  %tobool4 = icmp ne %union.tree_node* %7, null, !dbg !9130
  br i1 %tobool4, label %land.lhs.true, label %if.end, !dbg !9132

land.lhs.true:                                    ; preds = %if.then
  %8 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9133
  %9 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !9134
  %cmp = icmp ne %union.tree_node* %8, %9, !dbg !9135
  br i1 %cmp, label %land.lhs.true5, label %if.end, !dbg !9136

land.lhs.true5:                                   ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9137
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !9137
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !9137
  %bf.load = load i64, i64* %11, align 8, !dbg !9137
  %bf.clear = and i64 %bf.load, 65535, !dbg !9137
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9137
  %cmp6 = icmp eq i32 %bf.cast, 23, !dbg !9138
  br i1 %cmp6, label %if.then7, label %if.end, !dbg !9139

if.then7:                                         ; preds = %land.lhs.true5
  store i8 1, i8* %retval, align 1, !dbg !9140
  br label %return, !dbg !9140

if.end:                                           ; preds = %land.lhs.true5, %land.lhs.true, %if.then
  br label %if.end8, !dbg !9141

if.end8:                                          ; preds = %if.end, %entry
  store i8 0, i8* %retval, align 1, !dbg !9142
  br label %return, !dbg !9142

return:                                           ; preds = %if.end8, %if.then7
  %12 = load i8, i8* %retval, align 1, !dbg !9143
  ret i8 %12, !dbg !9143
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !9144 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9145, metadata !DIExpression()), !dbg !9146
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9147
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !9148
  ret %union.tree_node* %call, !dbg !9149
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @can_put_in_inner_loop(%struct.loop* %inner, %union.gimple_statement_d* %stmt) #0 !dbg !9150 {
entry:
  %retval = alloca i8, align 1
  %inner.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %immbb = alloca %struct.basic_block_def*, align 8
  store %struct.loop* %inner, %struct.loop** %inner.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %inner.addr, metadata !9151, metadata !DIExpression()), !dbg !9152
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9153, metadata !DIExpression()), !dbg !9154
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !9155, metadata !DIExpression()), !dbg !9156
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !9157, metadata !DIExpression()), !dbg !9158
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9159
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !9159
  %tobool = icmp ne i8 %call, 0, !dbg !9159
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9159

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2148, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9159
  br label %cond.end, !dbg !9159

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9159

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9159
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9160
  %call1 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %1), !dbg !9162
  %tobool2 = icmp ne %union.tree_node* %call1, null, !dbg !9162
  br i1 %tobool2, label %if.then, label %lor.lhs.false, !dbg !9163

lor.lhs.false:                                    ; preds = %cond.end
  %2 = load %struct.loop*, %struct.loop** %inner.addr, align 8, !dbg !9164
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9165
  %call3 = call zeroext i8 @stmt_invariant_in_loop_p(%struct.loop* %2, %union.gimple_statement_d* %3), !dbg !9166
  %tobool4 = icmp ne i8 %call3, 0, !dbg !9166
  br i1 %tobool4, label %if.end, label %if.then, !dbg !9167

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  store i8 0, i8* %retval, align 1, !dbg !9168
  br label %return, !dbg !9168

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9169
  %call5 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %4), !dbg !9169
  %call6 = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %call5), !dbg !9169
  store %struct.ssa_use_operand_d* %call6, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9169
  br label %for.cond, !dbg !9169

for.cond:                                         ; preds = %for.inc, %if.end
  %call7 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !9171
  %tobool8 = icmp ne i8 %call7, 0, !dbg !9171
  %lnot = xor i1 %tobool8, true, !dbg !9171
  br i1 %lnot, label %for.body, label %for.end, !dbg !9169

for.body:                                         ; preds = %for.cond
  %5 = load %struct.loop*, %struct.loop** %inner.addr, align 8, !dbg !9173
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9176
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 2, !dbg !9176
  %stmt9 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !9176
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !9176
  %call10 = call zeroext i8 @exit_phi_for_loop_p(%struct.loop* %5, %union.gimple_statement_d* %7), !dbg !9177
  %tobool11 = icmp ne i8 %call10, 0, !dbg !9177
  br i1 %tobool11, label %if.end20, label %if.then12, !dbg !9178

if.then12:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %immbb, metadata !9179, metadata !DIExpression()), !dbg !9181
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9182
  %loc13 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 2, !dbg !9182
  %stmt14 = bitcast %union.anon* %loc13 to %union.gimple_statement_d**, !dbg !9182
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt14, align 8, !dbg !9182
  %call15 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %9), !dbg !9183
  store %struct.basic_block_def* %call15, %struct.basic_block_def** %immbb, align 8, !dbg !9181
  %10 = load %struct.loop*, %struct.loop** %inner.addr, align 8, !dbg !9184
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %immbb, align 8, !dbg !9186
  %call16 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %10, %struct.basic_block_def* %11), !dbg !9187
  %tobool17 = icmp ne i8 %call16, 0, !dbg !9187
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !9188

if.then18:                                        ; preds = %if.then12
  store i8 0, i8* %retval, align 1, !dbg !9189
  br label %return, !dbg !9189

if.end19:                                         ; preds = %if.then12
  br label %if.end20, !dbg !9190

if.end20:                                         ; preds = %if.end19, %for.body
  br label %for.inc, !dbg !9191

for.inc:                                          ; preds = %if.end20
  %call21 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter), !dbg !9171
  store %struct.ssa_use_operand_d* %call21, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9171
  br label %for.cond, !dbg !9171, !llvm.loop !9192

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !9194
  br label %return, !dbg !9194

return:                                           ; preds = %for.end, %if.then18, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !9195
  ret i8 %12, !dbg !9195
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @can_put_after_inner_loop(%struct.loop* %loop, %union.gimple_statement_d* %stmt) #0 !dbg !9196 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %immbb = alloca %struct.basic_block_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !9197, metadata !DIExpression()), !dbg !9198
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9199, metadata !DIExpression()), !dbg !9200
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !9201, metadata !DIExpression()), !dbg !9202
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !9203, metadata !DIExpression()), !dbg !9204
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9205
  %call = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %0), !dbg !9207
  %tobool = icmp ne %union.tree_node* %call, null, !dbg !9207
  br i1 %tobool, label %if.then, label %if.end, !dbg !9208

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !9209
  br label %return, !dbg !9209

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9210
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !9210
  %call2 = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %call1), !dbg !9210
  store %struct.ssa_use_operand_d* %call2, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9210
  br label %for.cond, !dbg !9210

for.cond:                                         ; preds = %for.inc, %if.end
  %call3 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !9212
  %tobool4 = icmp ne i8 %call3, 0, !dbg !9212
  %lnot = xor i1 %tobool4, true, !dbg !9212
  br i1 %lnot, label %for.body, label %for.end, !dbg !9210

for.body:                                         ; preds = %for.cond
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9214
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9217
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 2, !dbg !9217
  %stmt5 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !9217
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt5, align 8, !dbg !9217
  %call6 = call zeroext i8 @exit_phi_for_loop_p(%struct.loop* %2, %union.gimple_statement_d* %4), !dbg !9218
  %tobool7 = icmp ne i8 %call6, 0, !dbg !9218
  br i1 %tobool7, label %if.end19, label %if.then8, !dbg !9219

if.then8:                                         ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %immbb, metadata !9220, metadata !DIExpression()), !dbg !9222
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9223
  %loc9 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 2, !dbg !9223
  %stmt10 = bitcast %union.anon* %loc9 to %union.gimple_statement_d**, !dbg !9223
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt10, align 8, !dbg !9223
  %call11 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !9224
  store %struct.basic_block_def* %call11, %struct.basic_block_def** %immbb, align 8, !dbg !9222
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %immbb, align 8, !dbg !9225
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9227
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 8, !dbg !9228
  %9 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !9228
  %header = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 2, !dbg !9229
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !9229
  %call12 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %7, %struct.basic_block_def* %10), !dbg !9230
  %tobool13 = icmp ne i8 %call12, 0, !dbg !9230
  br i1 %tobool13, label %if.end18, label %land.lhs.true, !dbg !9231

land.lhs.true:                                    ; preds = %if.then8
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9232
  %inner14 = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 8, !dbg !9233
  %12 = load %struct.loop*, %struct.loop** %inner14, align 8, !dbg !9233
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9234
  %call15 = call zeroext i8 @can_put_in_inner_loop(%struct.loop* %12, %union.gimple_statement_d* %13), !dbg !9235
  %tobool16 = icmp ne i8 %call15, 0, !dbg !9235
  br i1 %tobool16, label %if.end18, label %if.then17, !dbg !9236

if.then17:                                        ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !9237
  br label %return, !dbg !9237

if.end18:                                         ; preds = %land.lhs.true, %if.then8
  br label %if.end19, !dbg !9238

if.end19:                                         ; preds = %if.end18, %for.body
  br label %for.inc, !dbg !9239

for.inc:                                          ; preds = %if.end19
  %call20 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter), !dbg !9212
  store %struct.ssa_use_operand_d* %call20, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9212
  br label %for.cond, !dbg !9212, !llvm.loop !9240

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !9242
  br label %return, !dbg !9242

return:                                           ; preds = %for.end, %if.then17, %if.then
  %14 = load i8, i8* %retval, align 1, !dbg !9243
  ret i8 %14, !dbg !9243
}

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @automatically_generated_chrec_p(%union.tree_node* %chrec) #0 !dbg !9244 {
entry:
  %chrec.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !9251, metadata !DIExpression()), !dbg !9252
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !9253
  %1 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !9254
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !9255
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !9256

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !9257
  %3 = load %union.tree_node*, %union.tree_node** @chrec_known, align 8, !dbg !9258
  %cmp1 = icmp eq %union.tree_node* %2, %3, !dbg !9259
  br label %lor.end, !dbg !9256

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !9256
  %conv = trunc i32 %lor.ext to i8, !dbg !9260
  ret i8 %conv, !dbg !9261
}

declare dso_local zeroext i8 @stmt_invariant_in_loop_p(%struct.loop*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @exit_phi_for_loop_p(%struct.loop* %loop, %union.gimple_statement_d* %stmt) #0 !dbg !9262 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !9263, metadata !DIExpression()), !dbg !9264
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9265, metadata !DIExpression()), !dbg !9266
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9267
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9269
  %cmp = icmp ne i32 %call, 16, !dbg !9270
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9271

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9272
  %call1 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %1), !dbg !9273
  %cmp2 = icmp ne i32 %call1, 1, !dbg !9274
  br i1 %cmp2, label %if.then, label %lor.lhs.false3, !dbg !9275

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9276
  %call4 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !9277
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9278
  %call5 = call %struct.edge_def* @single_exit(%struct.loop* %3), !dbg !9279
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call5, i32 0, i32 1, !dbg !9280
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !9280
  %cmp6 = icmp ne %struct.basic_block_def* %call4, %4, !dbg !9281
  br i1 %cmp6, label %if.then, label %if.end, !dbg !9282

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !9283
  br label %return, !dbg !9283

if.end:                                           ; preds = %lor.lhs.false3
  store i8 1, i8* %retval, align 1, !dbg !9284
  br label %return, !dbg !9284

return:                                           ; preds = %if.end, %if.then
  %5 = load i8, i8* %retval, align 1, !dbg !9285
  ret i8 %5, !dbg !9285
}

declare dso_local %struct.basic_block_def* @split_edge(%struct.edge_def*) #2

declare dso_local %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_source_location_heap_reserve(%struct.VEC_source_location_heap** %vec_, i32 %alloc_) #0 !dbg !9286 {
entry:
  %vec_.addr = alloca %struct.VEC_source_location_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_source_location_heap** %vec_, %struct.VEC_source_location_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_source_location_heap*** %vec_.addr, metadata !9290, metadata !DIExpression()), !dbg !9291
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9292, metadata !DIExpression()), !dbg !9291
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !9293, metadata !DIExpression()), !dbg !9291
  %0 = load %struct.VEC_source_location_heap**, %struct.VEC_source_location_heap*** %vec_.addr, align 8, !dbg !9291
  %1 = load %struct.VEC_source_location_heap*, %struct.VEC_source_location_heap** %0, align 8, !dbg !9291
  %tobool = icmp ne %struct.VEC_source_location_heap* %1, null, !dbg !9291
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9291

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_source_location_heap**, %struct.VEC_source_location_heap*** %vec_.addr, align 8, !dbg !9291
  %3 = load %struct.VEC_source_location_heap*, %struct.VEC_source_location_heap** %2, align 8, !dbg !9291
  %base = getelementptr inbounds %struct.VEC_source_location_heap, %struct.VEC_source_location_heap* %3, i32 0, i32 0, !dbg !9291
  br label %cond.end, !dbg !9291

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9291

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_source_location_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9291
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !9291
  %call = call i32 @VEC_source_location_base_space(%struct.VEC_source_location_base* %cond, i32 %4), !dbg !9291
  %tobool1 = icmp ne i32 %call, 0, !dbg !9291
  %lnot = xor i1 %tobool1, true, !dbg !9291
  %lnot.ext = zext i1 %lnot to i32, !dbg !9291
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !9291
  %5 = load i32, i32* %extend, align 4, !dbg !9294
  %tobool2 = icmp ne i32 %5, 0, !dbg !9294
  br i1 %tobool2, label %if.then, label %if.end, !dbg !9291

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_source_location_heap**, %struct.VEC_source_location_heap*** %vec_.addr, align 8, !dbg !9294
  %7 = load %struct.VEC_source_location_heap*, %struct.VEC_source_location_heap** %6, align 8, !dbg !9294
  %8 = bitcast %struct.VEC_source_location_heap* %7 to i8*, !dbg !9294
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !9294
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 4), !dbg !9294
  %10 = bitcast i8* %call3 to %struct.VEC_source_location_heap*, !dbg !9294
  %11 = load %struct.VEC_source_location_heap**, %struct.VEC_source_location_heap*** %vec_.addr, align 8, !dbg !9294
  store %struct.VEC_source_location_heap* %10, %struct.VEC_source_location_heap** %11, align 8, !dbg !9294
  br label %if.end, !dbg !9294

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !9291
  ret i32 %12, !dbg !9291
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_source_location_base_quick_push(%struct.VEC_source_location_base* %vec_, i32 %obj_) #0 !dbg !9296 {
entry:
  %vec_.addr = alloca %struct.VEC_source_location_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_source_location_base* %vec_, %struct.VEC_source_location_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_source_location_base** %vec_.addr, metadata !9301, metadata !DIExpression()), !dbg !9302
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !9303, metadata !DIExpression()), !dbg !9302
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !9304, metadata !DIExpression()), !dbg !9302
  %0 = load %struct.VEC_source_location_base*, %struct.VEC_source_location_base** %vec_.addr, align 8, !dbg !9302
  %num = getelementptr inbounds %struct.VEC_source_location_base, %struct.VEC_source_location_base* %0, i32 0, i32 0, !dbg !9302
  %1 = load i32, i32* %num, align 4, !dbg !9302
  %2 = load %struct.VEC_source_location_base*, %struct.VEC_source_location_base** %vec_.addr, align 8, !dbg !9302
  %alloc = getelementptr inbounds %struct.VEC_source_location_base, %struct.VEC_source_location_base* %2, i32 0, i32 1, !dbg !9302
  %3 = load i32, i32* %alloc, align 4, !dbg !9302
  %cmp = icmp ult i32 %1, %3, !dbg !9302
  %conv = zext i1 %cmp to i32, !dbg !9302
  %4 = load %struct.VEC_source_location_base*, %struct.VEC_source_location_base** %vec_.addr, align 8, !dbg !9302
  %vec = getelementptr inbounds %struct.VEC_source_location_base, %struct.VEC_source_location_base* %4, i32 0, i32 2, !dbg !9302
  %5 = load %struct.VEC_source_location_base*, %struct.VEC_source_location_base** %vec_.addr, align 8, !dbg !9302
  %num1 = getelementptr inbounds %struct.VEC_source_location_base, %struct.VEC_source_location_base* %5, i32 0, i32 0, !dbg !9302
  %6 = load i32, i32* %num1, align 4, !dbg !9302
  %inc = add i32 %6, 1, !dbg !9302
  store i32 %inc, i32* %num1, align 4, !dbg !9302
  %idxprom = zext i32 %6 to i64, !dbg !9302
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !9302
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !9302
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !9302
  %8 = load i32*, i32** %slot_, align 8, !dbg !9302
  store i32 %7, i32* %8, align 4, !dbg !9302
  %9 = load i32*, i32** %slot_, align 8, !dbg !9302
  ret i32* %9, !dbg !9302
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_arg_location(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !9305 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9308, metadata !DIExpression()), !dbg !9309
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !9310, metadata !DIExpression()), !dbg !9311
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9312
  %1 = load i64, i64* %i.addr, align 8, !dbg !9313
  %conv = trunc i64 %1 to i32, !dbg !9313
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !9314
  %locus = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 2, !dbg !9315
  %2 = load i32, i32* %locus, align 8, !dbg !9315
  ret i32 %2, !dbg !9316
}

declare dso_local %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !9317 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9320, metadata !DIExpression()), !dbg !9321
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9322
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !9322
  %tobool = icmp ne i8 %call, 0, !dbg !9322
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9322

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.38, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9322
  br label %cond.end, !dbg !9322

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9322

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9322
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9323
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !9323
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9323
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !9323
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !9323

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9323
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !9323
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !9323
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !9323
  br label %cond.end5, !dbg !9323

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !9323

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !9323
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !9323
  ret %struct.edge_def* %call7, !dbg !9324
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %vec_) #0 !dbg !9325 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_ = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !9328, metadata !DIExpression()), !dbg !9329
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_, metadata !9330, metadata !DIExpression()), !dbg !9329
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !9329
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !9329
  %1 = load i32, i32* %num, align 8, !dbg !9329
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !9329
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 2, !dbg !9329
  %3 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !9329
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %3, i32 0, i32 0, !dbg !9329
  %4 = load i32, i32* %num1, align 8, !dbg !9329
  %dec = add i32 %4, -1, !dbg !9329
  store i32 %dec, i32* %num1, align 8, !dbg !9329
  %idxprom = zext i32 %dec to i64, !dbg !9329
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !9329
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9329
  store %union.tree_node* %5, %union.tree_node** %obj_, align 8, !dbg !9329
  %6 = load %union.tree_node*, %union.tree_node** %obj_, align 8, !dbg !9329
  ret %union.tree_node* %6, !dbg !9329
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_source_location_base_pop(%struct.VEC_source_location_base* %vec_) #0 !dbg !9331 {
entry:
  %vec_.addr = alloca %struct.VEC_source_location_base*, align 8
  %obj_ = alloca i32, align 4
  store %struct.VEC_source_location_base* %vec_, %struct.VEC_source_location_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_source_location_base** %vec_.addr, metadata !9334, metadata !DIExpression()), !dbg !9335
  call void @llvm.dbg.declare(metadata i32* %obj_, metadata !9336, metadata !DIExpression()), !dbg !9335
  %0 = load %struct.VEC_source_location_base*, %struct.VEC_source_location_base** %vec_.addr, align 8, !dbg !9335
  %num = getelementptr inbounds %struct.VEC_source_location_base, %struct.VEC_source_location_base* %0, i32 0, i32 0, !dbg !9335
  %1 = load i32, i32* %num, align 4, !dbg !9335
  %2 = load %struct.VEC_source_location_base*, %struct.VEC_source_location_base** %vec_.addr, align 8, !dbg !9335
  %vec = getelementptr inbounds %struct.VEC_source_location_base, %struct.VEC_source_location_base* %2, i32 0, i32 2, !dbg !9335
  %3 = load %struct.VEC_source_location_base*, %struct.VEC_source_location_base** %vec_.addr, align 8, !dbg !9335
  %num1 = getelementptr inbounds %struct.VEC_source_location_base, %struct.VEC_source_location_base* %3, i32 0, i32 0, !dbg !9335
  %4 = load i32, i32* %num1, align 4, !dbg !9335
  %dec = add i32 %4, -1, !dbg !9335
  store i32 %dec, i32* %num1, align 4, !dbg !9335
  %idxprom = zext i32 %dec to i64, !dbg !9335
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !9335
  %5 = load i32, i32* %arrayidx, align 4, !dbg !9335
  store i32 %5, i32* %obj_, align 4, !dbg !9335
  %6 = load i32, i32* %obj_, align 4, !dbg !9335
  ret i32 %6, !dbg !9335
}

declare dso_local %union.gimple_statement_d* @create_phi_node(%union.tree_node*, %struct.basic_block_def*) #2

declare dso_local void @add_phi_arg(%union.gimple_statement_d*, %union.tree_node*, %struct.edge_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb) #0 !dbg !9337 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9338, metadata !DIExpression()), !dbg !9339
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9340
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %0), !dbg !9340
  %tobool = icmp ne i8 %call, 0, !dbg !9340
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9340

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.38, i64 0, i64 0), i32 655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9340
  br label %cond.end, !dbg !9340

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9340

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9340
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9341
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !9341
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !9341
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !9341
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !9341

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9341
  %preds3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0, !dbg !9341
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds3, align 8, !dbg !9341
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !9341
  br label %cond.end5, !dbg !9341

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !9341

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !9341
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !9341
  ret %struct.edge_def* %call7, !dbg !9342
}

declare dso_local void @flush_pending_stmts(%struct.edge_def*) #2

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

declare dso_local %union.gimple_statement_d* @gimple_build_cond(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local %struct.loop* @duplicate_loop(%struct.loop*, %struct.loop*) #2

declare dso_local void @add_bb_to_loop(%struct.basic_block_def*, %struct.loop*) #2

declare dso_local void @set_immediate_dominator(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @recompute_dominator(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_index(%struct.VEC_int_base* %vec_, i32 %ix_) #0 !dbg !9343 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !9348, metadata !DIExpression()), !dbg !9349
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9350, metadata !DIExpression()), !dbg !9349
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9349
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !9349
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !9349

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9349
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9349
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !9349
  %3 = load i32, i32* %num, align 4, !dbg !9349
  %cmp = icmp ult i32 %1, %3, !dbg !9349
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !9351
  %land.ext = zext i1 %4 to i32, !dbg !9349
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9349
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 2, !dbg !9349
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !9349
  %idxprom = zext i32 %6 to i64, !dbg !9349
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !9349
  %7 = load i32, i32* %arrayidx, align 4, !dbg !9349
  ret i32 %7, !dbg !9349
}

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local %struct.htab* @htab_create_alloc(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8* (i64, i64)*, void (i8*)*) #2

declare dso_local i32 @tree_map_hash(i8*) #2

declare dso_local i32 @tree_map_base_eq(i8*, i8*) #2

declare dso_local i8* @ggc_calloc(i64, i64) #2

declare dso_local void @ggc_free(i8*) #2

declare dso_local %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !9352 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9353, metadata !DIExpression()), !dbg !9354
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !9355, metadata !DIExpression()), !dbg !9356
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !9357, metadata !DIExpression()), !dbg !9358
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9359
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !9360
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !9361
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !9362
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !9363
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !9364
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !9365
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !9366
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !9367
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !9368
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9369
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !9370
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !9371
  ret void, !dbg !9372
}

declare dso_local void @gsi_move_before(%struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @replace_uses_equiv_to_x_with_y(%struct.loop* %loop, %union.gimple_statement_d* %stmt, %union.tree_node* %x, i32 %xstep, %union.tree_node* %y, %union.tree_node* %yinit, %struct.htab* %replacements, %struct.gimple_stmt_iterator* %firstbsi) #0 !dbg !9373 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %x.addr = alloca %union.tree_node*, align 8
  %xstep.addr = alloca i32, align 4
  %y.addr = alloca %union.tree_node*, align 8
  %yinit.addr = alloca %union.tree_node*, align 8
  %replacements.addr = alloca %struct.htab*, align 8
  %firstbsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %step = alloca %union.tree_node*, align 8
  %scev = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  %val = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %setstmt = alloca %union.gimple_statement_d*, align 8
  %h = alloca %struct.tree_map*, align 8
  %in = alloca %struct.tree_map, align 8
  %loc = alloca i8**, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !9376, metadata !DIExpression()), !dbg !9377
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9378, metadata !DIExpression()), !dbg !9379
  store %union.tree_node* %x, %union.tree_node** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %x.addr, metadata !9380, metadata !DIExpression()), !dbg !9381
  store i32 %xstep, i32* %xstep.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %xstep.addr, metadata !9382, metadata !DIExpression()), !dbg !9383
  store %union.tree_node* %y, %union.tree_node** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %y.addr, metadata !9384, metadata !DIExpression()), !dbg !9385
  store %union.tree_node* %yinit, %union.tree_node** %yinit.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %yinit.addr, metadata !9386, metadata !DIExpression()), !dbg !9387
  store %struct.htab* %replacements, %struct.htab** %replacements.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %replacements.addr, metadata !9388, metadata !DIExpression()), !dbg !9389
  store %struct.gimple_stmt_iterator* %firstbsi, %struct.gimple_stmt_iterator** %firstbsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %firstbsi.addr, metadata !9390, metadata !DIExpression()), !dbg !9391
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !9392, metadata !DIExpression()), !dbg !9393
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !9394, metadata !DIExpression()), !dbg !9395
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9396
  %call = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %0, i32 1), !dbg !9396
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9396
  br label %for.cond, !dbg !9396

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !9398
  %tobool = icmp ne i8 %call1, 0, !dbg !9398
  %lnot = xor i1 %tobool, true, !dbg !9398
  br i1 %lnot, label %for.body, label %for.end, !dbg !9396

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !9400, metadata !DIExpression()), !dbg !9402
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9403
  %call2 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %1), !dbg !9403
  store %union.tree_node* %call2, %union.tree_node** %use, align 8, !dbg !9402
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !9404, metadata !DIExpression()), !dbg !9405
  store %union.tree_node* null, %union.tree_node** %step, align 8, !dbg !9405
  call void @llvm.dbg.declare(metadata %union.tree_node** %scev, metadata !9406, metadata !DIExpression()), !dbg !9407
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !9408, metadata !DIExpression()), !dbg !9409
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !9410, metadata !DIExpression()), !dbg !9411
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !9412, metadata !DIExpression()), !dbg !9413
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %setstmt, metadata !9414, metadata !DIExpression()), !dbg !9415
  call void @llvm.dbg.declare(metadata %struct.tree_map** %h, metadata !9416, metadata !DIExpression()), !dbg !9417
  call void @llvm.dbg.declare(metadata %struct.tree_map* %in, metadata !9418, metadata !DIExpression()), !dbg !9419
  call void @llvm.dbg.declare(metadata i8*** %loc, metadata !9420, metadata !DIExpression()), !dbg !9421
  %2 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9422
  %3 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !9424
  %cmp = icmp eq %union.tree_node* %2, %3, !dbg !9425
  br i1 %cmp, label %if.then, label %if.end, !dbg !9426

if.then:                                          ; preds = %for.body
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9427
  %5 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !9427
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !9427
  br label %for.inc, !dbg !9429

if.end:                                           ; preds = %for.body
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9430
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9431
  %8 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9432
  %call3 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %7, %union.tree_node* %8), !dbg !9433
  %call4 = call %union.tree_node* @instantiate_parameters(%struct.loop* %6, %union.tree_node* %call3), !dbg !9434
  store %union.tree_node* %call4, %union.tree_node** %scev, align 8, !dbg !9435
  %9 = load %union.tree_node*, %union.tree_node** %scev, align 8, !dbg !9436
  %cmp5 = icmp eq %union.tree_node* %9, null, !dbg !9438
  br i1 %cmp5, label %if.then7, label %lor.lhs.false, !dbg !9439

lor.lhs.false:                                    ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %scev, align 8, !dbg !9440
  %11 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !9441
  %cmp6 = icmp eq %union.tree_node* %10, %11, !dbg !9442
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !9443

if.then7:                                         ; preds = %lor.lhs.false, %if.end
  br label %for.inc, !dbg !9444

if.end8:                                          ; preds = %lor.lhs.false
  %12 = load %union.tree_node*, %union.tree_node** %scev, align 8, !dbg !9445
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9446
  %num = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 0, !dbg !9447
  %14 = load i32, i32* %num, align 8, !dbg !9447
  %call9 = call %union.tree_node* @evolution_part_in_loop_num(%union.tree_node* %12, i32 %14), !dbg !9448
  store %union.tree_node* %call9, %union.tree_node** %step, align 8, !dbg !9449
  %15 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9450
  %cmp10 = icmp eq %union.tree_node* %15, null, !dbg !9452
  br i1 %cmp10, label %if.then19, label %lor.lhs.false11, !dbg !9453

lor.lhs.false11:                                  ; preds = %if.end8
  %16 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9454
  %17 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !9455
  %cmp12 = icmp eq %union.tree_node* %16, %17, !dbg !9456
  br i1 %cmp12, label %if.then19, label %lor.lhs.false13, !dbg !9457

lor.lhs.false13:                                  ; preds = %lor.lhs.false11
  %18 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9458
  %base = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !9458
  %19 = bitcast %struct.tree_base* %base to i64*, !dbg !9458
  %bf.load = load i64, i64* %19, align 8, !dbg !9458
  %bf.clear = and i64 %bf.load, 65535, !dbg !9458
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9458
  %cmp14 = icmp ne i32 %bf.cast, 23, !dbg !9459
  br i1 %cmp14, label %if.then19, label %lor.lhs.false15, !dbg !9460

lor.lhs.false15:                                  ; preds = %lor.lhs.false13
  %20 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9461
  %call16 = call i64 @int_cst_value(%union.tree_node* %20), !dbg !9462
  %21 = load i32, i32* %xstep.addr, align 4, !dbg !9463
  %conv = sext i32 %21 to i64, !dbg !9463
  %cmp17 = icmp ne i64 %call16, %conv, !dbg !9464
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !9465

if.then19:                                        ; preds = %lor.lhs.false15, %lor.lhs.false13, %lor.lhs.false11, %if.end8
  br label %for.inc, !dbg !9466

if.end20:                                         ; preds = %lor.lhs.false15
  %22 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !9467
  %23 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9468
  %24 = bitcast %union.tree_node* %23 to i8*, !dbg !9468
  %call21 = call i32 %22(i8* %24), !dbg !9467
  %hash = getelementptr inbounds %struct.tree_map, %struct.tree_map* %in, i32 0, i32 1, !dbg !9469
  store i32 %call21, i32* %hash, align 8, !dbg !9470
  %25 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9471
  %base22 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %in, i32 0, i32 0, !dbg !9472
  %from = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base22, i32 0, i32 0, !dbg !9473
  store %union.tree_node* %25, %union.tree_node** %from, align 8, !dbg !9474
  %26 = load %struct.htab*, %struct.htab** %replacements.addr, align 8, !dbg !9475
  %27 = bitcast %struct.tree_map* %in to i8*, !dbg !9476
  %hash23 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %in, i32 0, i32 1, !dbg !9477
  %28 = load i32, i32* %hash23, align 8, !dbg !9477
  %call24 = call i8* @htab_find_with_hash(%struct.htab* %26, i8* %27, i32 %28), !dbg !9478
  %29 = bitcast i8* %call24 to %struct.tree_map*, !dbg !9479
  store %struct.tree_map* %29, %struct.tree_map** %h, align 8, !dbg !9480
  %30 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !9481
  %cmp25 = icmp ne %struct.tree_map* %30, null, !dbg !9483
  br i1 %cmp25, label %if.then27, label %if.end28, !dbg !9484

if.then27:                                        ; preds = %if.end20
  %31 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9485
  %32 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !9485
  %to = getelementptr inbounds %struct.tree_map, %struct.tree_map* %32, i32 0, i32 2, !dbg !9485
  %33 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !9485
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %31, %union.tree_node* %33), !dbg !9485
  br label %for.inc, !dbg !9487

if.end28:                                         ; preds = %if.end20
  %34 = load %union.tree_node*, %union.tree_node** %scev, align 8, !dbg !9488
  %35 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9489
  %num29 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 0, !dbg !9490
  %36 = load i32, i32* %num29, align 8, !dbg !9490
  %call30 = call %union.tree_node* @initial_condition_in_loop_num(%union.tree_node* %34, i32 %36), !dbg !9491
  store %union.tree_node* %call30, %union.tree_node** %init, align 8, !dbg !9492
  %37 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !9493
  %cmp31 = icmp ne %union.tree_node* %37, null, !dbg !9493
  br i1 %cmp31, label %land.lhs.true, label %cond.true, !dbg !9493

land.lhs.true:                                    ; preds = %if.end28
  %38 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !9493
  %39 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !9493
  %cmp33 = icmp ne %union.tree_node* %38, %39, !dbg !9493
  br i1 %cmp33, label %cond.false, label %cond.true, !dbg !9493

cond.true:                                        ; preds = %land.lhs.true, %if.end28
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2083, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9493
  br label %cond.end, !dbg !9493

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !9493

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9493
  %40 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9494
  %common = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !9494
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9494
  %41 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9494
  %42 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !9496
  %common35 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !9496
  %type36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 2, !dbg !9496
  %43 = load %union.tree_node*, %union.tree_node** %type36, align 8, !dbg !9496
  %cmp37 = icmp eq %union.tree_node* %41, %43, !dbg !9497
  br i1 %cmp37, label %if.then39, label %if.else, !dbg !9498

if.then39:                                        ; preds = %cond.end
  %44 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !9499
  %common40 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !9499
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !9499
  %45 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !9499
  %46 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !9499
  %47 = load %union.tree_node*, %union.tree_node** %yinit.addr, align 8, !dbg !9499
  %call42 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %45, %union.tree_node* %46, %union.tree_node* %47), !dbg !9499
  store %union.tree_node* %call42, %union.tree_node** %val, align 8, !dbg !9501
  %48 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !9502
  %common43 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !9502
  %type44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 2, !dbg !9502
  %49 = load %union.tree_node*, %union.tree_node** %type44, align 8, !dbg !9502
  %50 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !9502
  %51 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9502
  %call45 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %49, %union.tree_node* %50, %union.tree_node* %51), !dbg !9502
  store %union.tree_node* %call45, %union.tree_node** %val, align 8, !dbg !9503
  %52 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9504
  %53 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !9506
  %cmp46 = icmp eq %union.tree_node* %52, %53, !dbg !9507
  br i1 %cmp46, label %if.then48, label %if.end49, !dbg !9508

if.then48:                                        ; preds = %if.then39
  %54 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9509
  %55 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !9509
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %54, %union.tree_node* %55), !dbg !9509
  br label %for.inc, !dbg !9511

if.end49:                                         ; preds = %if.then39
  br label %if.end59, !dbg !9512

if.else:                                          ; preds = %cond.end
  %56 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !9513
  %common50 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !9513
  %type51 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common50, i32 0, i32 2, !dbg !9513
  %57 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !9513
  %58 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !9513
  %59 = load %union.tree_node*, %union.tree_node** %yinit.addr, align 8, !dbg !9513
  %call52 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %57, %union.tree_node* %58, %union.tree_node* %59), !dbg !9513
  store %union.tree_node* %call52, %union.tree_node** %val, align 8, !dbg !9515
  %60 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9516
  %common53 = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !9516
  %type54 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common53, i32 0, i32 2, !dbg !9516
  %61 = load %union.tree_node*, %union.tree_node** %type54, align 8, !dbg !9516
  %62 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9516
  %call55 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %61, %union.tree_node* %62), !dbg !9516
  store %union.tree_node* %call55, %union.tree_node** %val, align 8, !dbg !9517
  %63 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9518
  %common56 = bitcast %union.tree_node* %63 to %struct.tree_common*, !dbg !9518
  %type57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2, !dbg !9518
  %64 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !9518
  %65 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9518
  %66 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !9518
  %call58 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %64, %union.tree_node* %65, %union.tree_node* %66), !dbg !9518
  store %union.tree_node* %call58, %union.tree_node** %val, align 8, !dbg !9519
  br label %if.end59

if.end59:                                         ; preds = %if.else, %if.end49
  %67 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9520
  %common60 = bitcast %union.tree_node* %67 to %struct.tree_common*, !dbg !9520
  %type61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 2, !dbg !9520
  %68 = load %union.tree_node*, %union.tree_node** %type61, align 8, !dbg !9520
  %call62 = call %union.tree_node* @create_tmp_var(%union.tree_node* %68, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39, i64 0, i64 0)), !dbg !9521
  store %union.tree_node* %call62, %union.tree_node** %var, align 8, !dbg !9522
  %69 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9523
  %call63 = call zeroext i8 @add_referenced_var(%union.tree_node* %69), !dbg !9524
  %70 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %firstbsi.addr, align 8, !dbg !9525
  %71 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9526
  %call64 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %70, %union.tree_node* %71, i8 zeroext 0, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !9527
  store %union.tree_node* %call64, %union.tree_node** %val, align 8, !dbg !9528
  %72 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9529
  %73 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9529
  %call65 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %72, %union.tree_node* %73), !dbg !9529
  store %union.gimple_statement_d* %call65, %union.gimple_statement_d** %setstmt, align 8, !dbg !9530
  %74 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9531
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %setstmt, align 8, !dbg !9532
  %call66 = call %union.tree_node* @make_ssa_name(%union.tree_node* %74, %union.gimple_statement_d* %75), !dbg !9533
  store %union.tree_node* %call66, %union.tree_node** %var, align 8, !dbg !9534
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %setstmt, align 8, !dbg !9535
  %77 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9536
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %76, %union.tree_node* %77), !dbg !9537
  %78 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %firstbsi.addr, align 8, !dbg !9538
  %79 = load %union.gimple_statement_d*, %union.gimple_statement_d** %setstmt, align 8, !dbg !9539
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %78, %union.gimple_statement_d* %79, i32 1), !dbg !9540
  %80 = load %union.gimple_statement_d*, %union.gimple_statement_d** %setstmt, align 8, !dbg !9541
  call void @update_stmt(%union.gimple_statement_d* %80), !dbg !9542
  %81 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9543
  %82 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9543
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %81, %union.tree_node* %82), !dbg !9543
  %call67 = call i8* @ggc_alloc_stat(i64 24), !dbg !9544
  %83 = bitcast i8* %call67 to %struct.tree_map*, !dbg !9544
  store %struct.tree_map* %83, %struct.tree_map** %h, align 8, !dbg !9545
  %hash68 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %in, i32 0, i32 1, !dbg !9546
  %84 = load i32, i32* %hash68, align 8, !dbg !9546
  %85 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !9547
  %hash69 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %85, i32 0, i32 1, !dbg !9548
  store i32 %84, i32* %hash69, align 8, !dbg !9549
  %86 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9550
  %87 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !9551
  %base70 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %87, i32 0, i32 0, !dbg !9552
  %from71 = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base70, i32 0, i32 0, !dbg !9553
  store %union.tree_node* %86, %union.tree_node** %from71, align 8, !dbg !9554
  %88 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9555
  %89 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !9556
  %to72 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %89, i32 0, i32 2, !dbg !9557
  store %union.tree_node* %88, %union.tree_node** %to72, align 8, !dbg !9558
  %90 = load %struct.htab*, %struct.htab** %replacements.addr, align 8, !dbg !9559
  %91 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !9560
  %92 = bitcast %struct.tree_map* %91 to i8*, !dbg !9560
  %hash73 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %in, i32 0, i32 1, !dbg !9561
  %93 = load i32, i32* %hash73, align 8, !dbg !9561
  %call74 = call i8** @htab_find_slot_with_hash(%struct.htab* %90, i8* %92, i32 %93, i32 1), !dbg !9562
  store i8** %call74, i8*** %loc, align 8, !dbg !9563
  %94 = load i8**, i8*** %loc, align 8, !dbg !9564
  %95 = bitcast i8** %94 to %struct.tree_map**, !dbg !9564
  %96 = load %struct.tree_map*, %struct.tree_map** %95, align 8, !dbg !9564
  %cmp75 = icmp eq %struct.tree_map* %96, null, !dbg !9564
  br i1 %cmp75, label %cond.false78, label %cond.true77, !dbg !9564

cond.true77:                                      ; preds = %if.end59
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2121, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9564
  br label %cond.end79, !dbg !9564

cond.false78:                                     ; preds = %if.end59
  br label %cond.end79, !dbg !9564

cond.end79:                                       ; preds = %cond.false78, %cond.true77
  %cond80 = phi i32 [ 0, %cond.true77 ], [ 0, %cond.false78 ], !dbg !9564
  %97 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !9565
  %98 = load i8**, i8*** %loc, align 8, !dbg !9566
  %99 = bitcast i8** %98 to %struct.tree_map**, !dbg !9567
  store %struct.tree_map* %97, %struct.tree_map** %99, align 8, !dbg !9568
  br label %for.inc, !dbg !9569

for.inc:                                          ; preds = %cond.end79, %if.then48, %if.then27, %if.then19, %if.then7, %if.then
  %call81 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !9398
  store %struct.ssa_use_operand_d* %call81, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9398
  br label %for.cond, !dbg !9398, !llvm.loop !9570

for.end:                                          ; preds = %for.cond
  ret void, !dbg !9572
}

declare dso_local void @mark_sym_for_renaming(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vop(%struct.function* %fun) #0 !dbg !9573 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !9578, metadata !DIExpression()), !dbg !9579
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !9580
  %tobool = icmp ne %struct.function* %0, null, !dbg !9580
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !9580

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !9580
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !9580
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !9580
  %tobool1 = icmp ne %struct.gimple_df* %2, null, !dbg !9580
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !9580

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0), i32 51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9580
  br label %cond.end, !dbg !9580

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !9580

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9580
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !9581
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !9582
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !9582
  %vop = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 3, !dbg !9583
  %5 = load %union.tree_node*, %union.tree_node** %vop, align 8, !dbg !9583
  ret %union.tree_node* %5, !dbg !9584
}

declare dso_local void @htab_delete(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_source_location_base_space(%struct.VEC_source_location_base* %vec_, i32 %alloc_) #0 !dbg !9585 {
entry:
  %vec_.addr = alloca %struct.VEC_source_location_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_source_location_base* %vec_, %struct.VEC_source_location_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_source_location_base** %vec_.addr, metadata !9588, metadata !DIExpression()), !dbg !9589
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9590, metadata !DIExpression()), !dbg !9589
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !9589
  %cmp = icmp sge i32 %0, 0, !dbg !9589
  %conv = zext i1 %cmp to i32, !dbg !9589
  %1 = load %struct.VEC_source_location_base*, %struct.VEC_source_location_base** %vec_.addr, align 8, !dbg !9589
  %tobool = icmp ne %struct.VEC_source_location_base* %1, null, !dbg !9589
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9589

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_source_location_base*, %struct.VEC_source_location_base** %vec_.addr, align 8, !dbg !9589
  %alloc = getelementptr inbounds %struct.VEC_source_location_base, %struct.VEC_source_location_base* %2, i32 0, i32 1, !dbg !9589
  %3 = load i32, i32* %alloc, align 4, !dbg !9589
  %4 = load %struct.VEC_source_location_base*, %struct.VEC_source_location_base** %vec_.addr, align 8, !dbg !9589
  %num = getelementptr inbounds %struct.VEC_source_location_base, %struct.VEC_source_location_base* %4, i32 0, i32 0, !dbg !9589
  %5 = load i32, i32* %num, align 4, !dbg !9589
  %sub = sub i32 %3, %5, !dbg !9589
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !9589
  %cmp1 = icmp uge i32 %sub, %6, !dbg !9589
  %conv2 = zext i1 %cmp1 to i32, !dbg !9589
  br label %cond.end, !dbg !9589

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !9589
  %tobool3 = icmp ne i32 %7, 0, !dbg !9589
  %lnot = xor i1 %tobool3, true, !dbg !9589
  %lnot.ext = zext i1 %lnot to i32, !dbg !9589
  br label %cond.end, !dbg !9589

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !9589
  ret i32 %cond, !dbg !9589
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !9591 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9594, metadata !DIExpression()), !dbg !9595
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9596
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !9596
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9596
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !9596
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9596

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9596
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !9596
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !9596
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !9596
  br label %cond.end, !dbg !9596

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9596

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9596
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !9596
  %cmp = icmp eq i32 %call, 1, !dbg !9597
  %conv = zext i1 %cmp to i32, !dbg !9597
  %conv2 = trunc i32 %conv to i8, !dbg !9596
  ret i8 %conv2, !dbg !9598
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !9599 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !9602, metadata !DIExpression()), !dbg !9603
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !9603
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !9603
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9603

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !9603
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !9603
  %2 = load i32, i32* %num, align 8, !dbg !9603
  br label %cond.end, !dbg !9603

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9603

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !9603
  ret i32 %cond, !dbg !9603
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !9604 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9605, metadata !DIExpression()), !dbg !9606
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9607
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !9607
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !9607
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !9607
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9607

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9607
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !9607
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !9607
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !9607
  br label %cond.end, !dbg !9607

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9607

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9607
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !9607
  %cmp = icmp eq i32 %call, 1, !dbg !9608
  %conv = zext i1 %cmp to i32, !dbg !9608
  %conv2 = trunc i32 %conv to i8, !dbg !9607
  ret i8 %conv2, !dbg !9609
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !9610 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !9611, metadata !DIExpression()), !dbg !9612
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !9613
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !9613
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9613

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !9614
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !9615
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !9615
  br label %cond.end, !dbg !9613

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9613

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !9613
  ret %struct.gimple_seq_node_d* %cond, !dbg !9616
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !9617 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !9620, metadata !DIExpression()), !dbg !9621
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !9622, metadata !DIExpression()), !dbg !9623
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !9624
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !9625
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !9626
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !9627
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !9628
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !9628
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !9629
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !9630
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !9631
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !9632
  ret void, !dbg !9633
}

declare dso_local i64 @int_cst_value(%union.tree_node*) #2

declare dso_local i8* @htab_find_with_hash(%struct.htab*, i8*, i32) #2

declare dso_local %union.tree_node* @initial_condition_in_loop_num(%union.tree_node*, i32) #2

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) #2

declare dso_local i8* @ggc_alloc_stat(i64) #2

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !9634 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !9637, metadata !DIExpression()), !dbg !9638
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !9639, metadata !DIExpression()), !dbg !9640
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !9641, metadata !DIExpression()), !dbg !9642
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !9643
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !9643
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !9645

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !9646
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !9646
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !9646
  %bf.load = load i64, i64* %2, align 8, !dbg !9646
  %bf.clear = and i64 %bf.load, 65535, !dbg !9646
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9646
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !9647
  br i1 %cmp, label %if.then, label %if.else, !dbg !9648

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !9649
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !9650
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !9651
  br label %if.end, !dbg !9649

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !9652
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !9652
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !9652
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !9654
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !9655
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !9656
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !9657
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !9658
}

declare dso_local i32 @pointer_set_contains(%struct.pointer_set_t*, i8*) #2

declare dso_local i32 @pointer_set_insert(%struct.pointer_set_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_operand_length(%union.tree_node* %node) #0 !dbg !9659 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %node, %union.tree_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %node.addr, metadata !9662, metadata !DIExpression()), !dbg !9663
  %0 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !9664
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9664
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9664
  %bf.load = load i64, i64* %1, align 8, !dbg !9664
  %bf.clear = and i64 %bf.load, 65535, !dbg !9664
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9664
  %idxprom = sext i32 %bf.cast to i64, !dbg !9664
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9664
  %2 = load i32, i32* %arrayidx, align 4, !dbg !9664
  %cmp = icmp eq i32 %2, 9, !dbg !9664
  br i1 %cmp, label %if.then, label %if.else, !dbg !9666

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !9667
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !9667
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9667
  %arrayidx1 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9667
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx1, align 8, !dbg !9667
  %int_cst = bitcast %union.tree_node* %4 to %struct.tree_int_cst*, !dbg !9667
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !9667
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !9667
  %5 = load i64, i64* %low, align 8, !dbg !9667
  %conv = trunc i64 %5 to i32, !dbg !9667
  store i32 %conv, i32* %retval, align 4, !dbg !9668
  br label %return, !dbg !9668

if.else:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !9669
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9669
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !9669
  %bf.load4 = load i64, i64* %7, align 8, !dbg !9669
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !9669
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !9669
  %idxprom7 = sext i32 %bf.cast6 to i64, !dbg !9669
  %arrayidx8 = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom7, !dbg !9669
  %8 = load i8, i8* %arrayidx8, align 1, !dbg !9669
  %conv9 = zext i8 %8 to i32, !dbg !9669
  store i32 %conv9, i32* %retval, align 4, !dbg !9670
  br label %return, !dbg !9670

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !9671
  ret i32 %9, !dbg !9671
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_lambda_vector_gc* @VEC_lambda_vector_gc_alloc(i32 %alloc_) #0 !dbg !9672 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9675, metadata !DIExpression()), !dbg !9676
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !9676
  %call = call i8* @vec_gc_p_reserve_exact(i8* null, i32 %0), !dbg !9676
  %1 = bitcast i8* %call to %struct.VEC_lambda_vector_gc*, !dbg !9676
  ret %struct.VEC_lambda_vector_gc* %1, !dbg !9676
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @av_for_af(%union.tree_node* %access_fun, i32* %cy, %struct.access_matrix* %am) #0 !dbg !9677 {
entry:
  %retval = alloca i8, align 1
  %access_fun.addr = alloca %union.tree_node*, align 8
  %cy.addr = alloca i32*, align 8
  %am.addr = alloca %struct.access_matrix*, align 8
  %left = alloca %union.tree_node*, align 8
  %right = alloca %union.tree_node*, align 8
  %var = alloca i32, align 4
  store %union.tree_node* %access_fun, %union.tree_node** %access_fun.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %access_fun.addr, metadata !9680, metadata !DIExpression()), !dbg !9681
  store i32* %cy, i32** %cy.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %cy.addr, metadata !9682, metadata !DIExpression()), !dbg !9683
  store %struct.access_matrix* %am, %struct.access_matrix** %am.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access_matrix** %am.addr, metadata !9684, metadata !DIExpression()), !dbg !9685
  %0 = load %union.tree_node*, %union.tree_node** %access_fun.addr, align 8, !dbg !9686
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9686
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9686
  %bf.load = load i64, i64* %1, align 8, !dbg !9686
  %bf.clear = and i64 %bf.load, 65535, !dbg !9686
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9686
  switch i32 %bf.cast, label %sw.default [
    i32 146, label %sw.bb
    i32 23, label %sw.bb24
  ], !dbg !9687

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %left, metadata !9688, metadata !DIExpression()), !dbg !9691
  %2 = load %union.tree_node*, %union.tree_node** %access_fun.addr, align 8, !dbg !9692
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !9692
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9692
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !9692
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9692
  store %union.tree_node* %3, %union.tree_node** %left, align 8, !dbg !9691
  call void @llvm.dbg.declare(metadata %union.tree_node** %right, metadata !9693, metadata !DIExpression()), !dbg !9694
  %4 = load %union.tree_node*, %union.tree_node** %access_fun.addr, align 8, !dbg !9695
  %exp1 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !9695
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !9695
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 2, !dbg !9695
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !9695
  store %union.tree_node* %5, %union.tree_node** %right, align 8, !dbg !9694
  call void @llvm.dbg.declare(metadata i32* %var, metadata !9696, metadata !DIExpression()), !dbg !9697
  %6 = load %union.tree_node*, %union.tree_node** %right, align 8, !dbg !9698
  %base4 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9698
  %7 = bitcast %struct.tree_base* %base4 to i64*, !dbg !9698
  %bf.load5 = load i64, i64* %7, align 8, !dbg !9698
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !9698
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !9698
  %cmp = icmp ne i32 %bf.cast7, 23, !dbg !9700
  br i1 %cmp, label %if.then, label %if.end, !dbg !9701

if.then:                                          ; preds = %sw.bb
  store i8 0, i8* %retval, align 1, !dbg !9702
  br label %return, !dbg !9702

if.end:                                           ; preds = %sw.bb
  %8 = load %struct.access_matrix*, %struct.access_matrix** %am.addr, align 8, !dbg !9703
  %9 = load %union.tree_node*, %union.tree_node** %access_fun.addr, align 8, !dbg !9704
  %exp8 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !9704
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !9704
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 0, !dbg !9704
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !9704
  %int_cst = bitcast %union.tree_node* %10 to %struct.tree_int_cst*, !dbg !9704
  %int_cst11 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !9704
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst11, i32 0, i32 0, !dbg !9704
  %11 = load i64, i64* %low, align 8, !dbg !9704
  %conv = trunc i64 %11 to i32, !dbg !9704
  %call = call i32 @am_vector_index_for_loop(%struct.access_matrix* %8, i32 %conv), !dbg !9705
  store i32 %call, i32* %var, align 4, !dbg !9706
  %12 = load %union.tree_node*, %union.tree_node** %right, align 8, !dbg !9707
  %call12 = call i64 @int_cst_value(%union.tree_node* %12), !dbg !9708
  %conv13 = trunc i64 %call12 to i32, !dbg !9708
  %13 = load i32*, i32** %cy.addr, align 8, !dbg !9709
  %14 = load i32, i32* %var, align 4, !dbg !9710
  %idxprom = zext i32 %14 to i64, !dbg !9709
  %arrayidx14 = getelementptr inbounds i32, i32* %13, i64 %idxprom, !dbg !9709
  store i32 %conv13, i32* %arrayidx14, align 4, !dbg !9711
  %15 = load %union.tree_node*, %union.tree_node** %left, align 8, !dbg !9712
  %base15 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !9712
  %16 = bitcast %struct.tree_base* %base15 to i64*, !dbg !9712
  %bf.load16 = load i64, i64* %16, align 8, !dbg !9712
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !9712
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !9712
  %cmp19 = icmp eq i32 %bf.cast18, 146, !dbg !9714
  br i1 %cmp19, label %if.then21, label %if.else, !dbg !9715

if.then21:                                        ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %left, align 8, !dbg !9716
  %18 = load i32*, i32** %cy.addr, align 8, !dbg !9717
  %19 = load %struct.access_matrix*, %struct.access_matrix** %am.addr, align 8, !dbg !9718
  %call22 = call zeroext i8 @av_for_af(%union.tree_node* %17, i32* %18, %struct.access_matrix* %19), !dbg !9719
  store i8 %call22, i8* %retval, align 1, !dbg !9720
  br label %return, !dbg !9720

if.else:                                          ; preds = %if.end
  %20 = load %union.tree_node*, %union.tree_node** %left, align 8, !dbg !9721
  %21 = load i32*, i32** %cy.addr, align 8, !dbg !9722
  %22 = load %struct.access_matrix*, %struct.access_matrix** %am.addr, align 8, !dbg !9723
  %call23 = call zeroext i8 @av_for_af_base(%union.tree_node* %20, i32* %21, %struct.access_matrix* %22, i32 1), !dbg !9724
  store i8 %call23, i8* %retval, align 1, !dbg !9725
  br label %return, !dbg !9725

sw.bb24:                                          ; preds = %entry
  %23 = load %union.tree_node*, %union.tree_node** %access_fun.addr, align 8, !dbg !9726
  %24 = load i32*, i32** %cy.addr, align 8, !dbg !9727
  %25 = load %struct.access_matrix*, %struct.access_matrix** %am.addr, align 8, !dbg !9728
  %call25 = call zeroext i8 @av_for_af_base(%union.tree_node* %23, i32* %24, %struct.access_matrix* %25, i32 1), !dbg !9729
  store i8 %call25, i8* %retval, align 1, !dbg !9730
  br label %return, !dbg !9730

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !9731
  br label %return, !dbg !9731

return:                                           ; preds = %sw.default, %sw.bb24, %if.else, %if.then21, %if.then
  %26 = load i8, i8* %retval, align 1, !dbg !9732
  ret i8 %26, !dbg !9732
}

; Function Attrs: noinline nounwind uwtable
define internal i32** @VEC_lambda_vector_base_quick_push(%struct.VEC_lambda_vector_base* %vec_, i32* %obj_) #0 !dbg !9733 {
entry:
  %vec_.addr = alloca %struct.VEC_lambda_vector_base*, align 8
  %obj_.addr = alloca i32*, align 8
  %slot_ = alloca i32**, align 8
  store %struct.VEC_lambda_vector_base* %vec_, %struct.VEC_lambda_vector_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_base** %vec_.addr, metadata !9737, metadata !DIExpression()), !dbg !9738
  store i32* %obj_, i32** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %obj_.addr, metadata !9739, metadata !DIExpression()), !dbg !9738
  call void @llvm.dbg.declare(metadata i32*** %slot_, metadata !9740, metadata !DIExpression()), !dbg !9738
  %0 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !9738
  %num = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %0, i32 0, i32 0, !dbg !9738
  %1 = load i32, i32* %num, align 8, !dbg !9738
  %2 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !9738
  %alloc = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %2, i32 0, i32 1, !dbg !9738
  %3 = load i32, i32* %alloc, align 4, !dbg !9738
  %cmp = icmp ult i32 %1, %3, !dbg !9738
  %conv = zext i1 %cmp to i32, !dbg !9738
  %4 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !9738
  %vec = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %4, i32 0, i32 2, !dbg !9738
  %5 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !9738
  %num1 = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %5, i32 0, i32 0, !dbg !9738
  %6 = load i32, i32* %num1, align 8, !dbg !9738
  %inc = add i32 %6, 1, !dbg !9738
  store i32 %inc, i32* %num1, align 8, !dbg !9738
  %idxprom = zext i32 %6 to i64, !dbg !9738
  %arrayidx = getelementptr inbounds [1 x i32*], [1 x i32*]* %vec, i64 0, i64 %idxprom, !dbg !9738
  store i32** %arrayidx, i32*** %slot_, align 8, !dbg !9738
  %7 = load i32*, i32** %obj_.addr, align 8, !dbg !9738
  %8 = load i32**, i32*** %slot_, align 8, !dbg !9738
  store i32* %7, i32** %8, align 8, !dbg !9738
  %9 = load i32**, i32*** %slot_, align 8, !dbg !9738
  ret i32** %9, !dbg !9738
}

declare dso_local i8* @vec_gc_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @am_vector_index_for_loop(%struct.access_matrix* %access_matrix, i32 %loop_num) #0 !dbg !9741 {
entry:
  %retval = alloca i32, align 4
  %access_matrix.addr = alloca %struct.access_matrix*, align 8
  %loop_num.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %l = alloca %struct.loop*, align 8
  store %struct.access_matrix* %access_matrix, %struct.access_matrix** %access_matrix.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access_matrix** %access_matrix.addr, metadata !9744, metadata !DIExpression()), !dbg !9745
  store i32 %loop_num, i32* %loop_num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loop_num.addr, metadata !9746, metadata !DIExpression()), !dbg !9747
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9748, metadata !DIExpression()), !dbg !9749
  call void @llvm.dbg.declare(metadata %struct.loop** %l, metadata !9750, metadata !DIExpression()), !dbg !9751
  store i32 0, i32* %i, align 4, !dbg !9752
  br label %for.cond, !dbg !9754

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.access_matrix*, %struct.access_matrix** %access_matrix.addr, align 8, !dbg !9755
  %loop_nest = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %0, i32 0, i32 0, !dbg !9755
  %1 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !9755
  %tobool = icmp ne %struct.VEC_loop_p_heap* %1, null, !dbg !9755
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9755

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.access_matrix*, %struct.access_matrix** %access_matrix.addr, align 8, !dbg !9755
  %loop_nest1 = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %2, i32 0, i32 0, !dbg !9755
  %3 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest1, align 8, !dbg !9755
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %3, i32 0, i32 0, !dbg !9755
  br label %cond.end, !dbg !9755

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !9755

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9755
  %4 = load i32, i32* %i, align 4, !dbg !9755
  %call = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond, i32 %4, %struct.loop** %l), !dbg !9755
  %tobool2 = icmp ne i32 %call, 0, !dbg !9757
  br i1 %tobool2, label %for.body, label %for.end, !dbg !9757

for.body:                                         ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !9758
  %num = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 0, !dbg !9760
  %6 = load i32, i32* %num, align 8, !dbg !9760
  %7 = load i32, i32* %loop_num.addr, align 4, !dbg !9761
  %cmp = icmp eq i32 %6, %7, !dbg !9762
  br i1 %cmp, label %if.then, label %if.end, !dbg !9763

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !9764
  store i32 %8, i32* %retval, align 4, !dbg !9765
  br label %return, !dbg !9765

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !9761

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !9766
  %inc = add nsw i32 %9, 1, !dbg !9766
  store i32 %inc, i32* %i, align 4, !dbg !9766
  br label %for.cond, !dbg !9767, !llvm.loop !9768

for.end:                                          ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.40, i64 0, i64 0), i32 157, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9770
  store i32 0, i32* %retval, align 4, !dbg !9771
  br label %return, !dbg !9771

return:                                           ; preds = %for.end, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !9772
  ret i32 %10, !dbg !9772
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @av_for_af_base(%union.tree_node* %base_expr, i32* %cy, %struct.access_matrix* %am, i32 %cst) #0 !dbg !9773 {
entry:
  %retval = alloca i8, align 1
  %base_expr.addr = alloca %union.tree_node*, align 8
  %cy.addr = alloca i32*, align 8
  %am.addr = alloca %struct.access_matrix*, align 8
  %cst.addr = alloca i32, align 4
  %result = alloca i8, align 1
  %param_index = alloca i32, align 4
  store %union.tree_node* %base_expr, %union.tree_node** %base_expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_expr.addr, metadata !9776, metadata !DIExpression()), !dbg !9777
  store i32* %cy, i32** %cy.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %cy.addr, metadata !9778, metadata !DIExpression()), !dbg !9779
  store %struct.access_matrix* %am, %struct.access_matrix** %am.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access_matrix** %am.addr, metadata !9780, metadata !DIExpression()), !dbg !9781
  store i32 %cst, i32* %cst.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cst.addr, metadata !9782, metadata !DIExpression()), !dbg !9783
  call void @llvm.dbg.declare(metadata i8* %result, metadata !9784, metadata !DIExpression()), !dbg !9785
  store i8 1, i8* %result, align 1, !dbg !9785
  %0 = load %union.tree_node*, %union.tree_node** %base_expr.addr, align 8, !dbg !9786
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9786
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9786
  %bf.load = load i64, i64* %1, align 8, !dbg !9786
  %bf.clear = and i64 %bf.load, 65535, !dbg !9786
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9786
  switch i32 %bf.cast, label %sw.default [
    i32 23, label %sw.bb
    i32 141, label %sw.bb7
    i32 63, label %sw.bb15
    i32 64, label %sw.bb27
    i32 65, label %sw.bb45
    i32 79, label %sw.bb91
  ], !dbg !9787

sw.bb:                                            ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %base_expr.addr, align 8, !dbg !9788
  %call = call i64 @int_cst_value(%union.tree_node* %2), !dbg !9790
  %3 = load i32, i32* %cst.addr, align 4, !dbg !9791
  %conv = sext i32 %3 to i64, !dbg !9791
  %mul = mul nsw i64 %call, %conv, !dbg !9792
  %4 = load i32*, i32** %cy.addr, align 8, !dbg !9793
  %5 = load %struct.access_matrix*, %struct.access_matrix** %am.addr, align 8, !dbg !9794
  %nb_induction_vars = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %5, i32 0, i32 1, !dbg !9794
  %6 = load i32, i32* %nb_induction_vars, align 8, !dbg !9794
  %7 = load %struct.access_matrix*, %struct.access_matrix** %am.addr, align 8, !dbg !9794
  %parameters = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %7, i32 0, i32 2, !dbg !9794
  %8 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %parameters, align 8, !dbg !9794
  %tobool = icmp ne %struct.VEC_tree_heap* %8, null, !dbg !9794
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9794

cond.true:                                        ; preds = %sw.bb
  %9 = load %struct.access_matrix*, %struct.access_matrix** %am.addr, align 8, !dbg !9794
  %parameters1 = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %9, i32 0, i32 2, !dbg !9794
  %10 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %parameters1, align 8, !dbg !9794
  %base2 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %10, i32 0, i32 0, !dbg !9794
  br label %cond.end, !dbg !9794

cond.false:                                       ; preds = %sw.bb
  br label %cond.end, !dbg !9794

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base2, %cond.true ], [ null, %cond.false ], !dbg !9794
  %call3 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !9794
  %add = add i32 %6, %call3, !dbg !9794
  %idxprom = zext i32 %add to i64, !dbg !9793
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom, !dbg !9793
  %11 = load i32, i32* %arrayidx, align 4, !dbg !9795
  %conv4 = sext i32 %11 to i64, !dbg !9795
  %add5 = add nsw i64 %conv4, %mul, !dbg !9795
  %conv6 = trunc i64 %add5 to i32, !dbg !9795
  store i32 %conv6, i32* %arrayidx, align 4, !dbg !9795
  store i8 1, i8* %retval, align 1, !dbg !9796
  br label %return, !dbg !9796

sw.bb7:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %param_index, metadata !9797, metadata !DIExpression()), !dbg !9799
  %12 = load %union.tree_node*, %union.tree_node** %base_expr.addr, align 8, !dbg !9800
  %13 = load %struct.access_matrix*, %struct.access_matrix** %am.addr, align 8, !dbg !9801
  %call8 = call i32 @access_matrix_get_index_for_parameter(%union.tree_node* %12, %struct.access_matrix* %13), !dbg !9802
  store i32 %call8, i32* %param_index, align 4, !dbg !9799
  %14 = load i32, i32* %param_index, align 4, !dbg !9803
  %cmp = icmp sge i32 %14, 0, !dbg !9805
  br i1 %cmp, label %if.then, label %if.end, !dbg !9806

if.then:                                          ; preds = %sw.bb7
  %15 = load i32, i32* %cst.addr, align 4, !dbg !9807
  %16 = load i32*, i32** %cy.addr, align 8, !dbg !9809
  %17 = load i32, i32* %param_index, align 4, !dbg !9810
  %idxprom10 = sext i32 %17 to i64, !dbg !9809
  %arrayidx11 = getelementptr inbounds i32, i32* %16, i64 %idxprom10, !dbg !9809
  %18 = load i32, i32* %arrayidx11, align 4, !dbg !9809
  %add12 = add nsw i32 %15, %18, !dbg !9811
  %19 = load i32*, i32** %cy.addr, align 8, !dbg !9812
  %20 = load i32, i32* %param_index, align 4, !dbg !9813
  %idxprom13 = sext i32 %20 to i64, !dbg !9812
  %arrayidx14 = getelementptr inbounds i32, i32* %19, i64 %idxprom13, !dbg !9812
  store i32 %add12, i32* %arrayidx14, align 4, !dbg !9814
  store i8 1, i8* %retval, align 1, !dbg !9815
  br label %return, !dbg !9815

if.end:                                           ; preds = %sw.bb7
  store i8 0, i8* %retval, align 1, !dbg !9816
  br label %return, !dbg !9816

sw.bb15:                                          ; preds = %entry
  %21 = load %union.tree_node*, %union.tree_node** %base_expr.addr, align 8, !dbg !9817
  %exp = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !9817
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9817
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9817
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8, !dbg !9817
  %23 = load i32*, i32** %cy.addr, align 8, !dbg !9818
  %24 = load %struct.access_matrix*, %struct.access_matrix** %am.addr, align 8, !dbg !9819
  %25 = load i32, i32* %cst.addr, align 4, !dbg !9820
  %call17 = call zeroext i8 @av_for_af_base(%union.tree_node* %22, i32* %23, %struct.access_matrix* %24, i32 %25), !dbg !9821
  %conv18 = zext i8 %call17 to i32, !dbg !9821
  %tobool19 = icmp ne i32 %conv18, 0, !dbg !9821
  br i1 %tobool19, label %land.rhs, label %land.end, !dbg !9822

land.rhs:                                         ; preds = %sw.bb15
  %26 = load %union.tree_node*, %union.tree_node** %base_expr.addr, align 8, !dbg !9823
  %exp20 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !9823
  %operands21 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp20, i32 0, i32 3, !dbg !9823
  %arrayidx22 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands21, i64 0, i64 1, !dbg !9823
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx22, align 8, !dbg !9823
  %28 = load i32*, i32** %cy.addr, align 8, !dbg !9824
  %29 = load %struct.access_matrix*, %struct.access_matrix** %am.addr, align 8, !dbg !9825
  %30 = load i32, i32* %cst.addr, align 4, !dbg !9826
  %call23 = call zeroext i8 @av_for_af_base(%union.tree_node* %27, i32* %28, %struct.access_matrix* %29, i32 %30), !dbg !9827
  %conv24 = zext i8 %call23 to i32, !dbg !9827
  %tobool25 = icmp ne i32 %conv24, 0, !dbg !9822
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb15
  %31 = phi i1 [ false, %sw.bb15 ], [ %tobool25, %land.rhs ], !dbg !9828
  %land.ext = zext i1 %31 to i32, !dbg !9822
  %conv26 = trunc i32 %land.ext to i8, !dbg !9821
  store i8 %conv26, i8* %retval, align 1, !dbg !9829
  br label %return, !dbg !9829

sw.bb27:                                          ; preds = %entry
  %32 = load %union.tree_node*, %union.tree_node** %base_expr.addr, align 8, !dbg !9830
  %exp28 = bitcast %union.tree_node* %32 to %struct.tree_exp*, !dbg !9830
  %operands29 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp28, i32 0, i32 3, !dbg !9830
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands29, i64 0, i64 0, !dbg !9830
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx30, align 8, !dbg !9830
  %34 = load i32*, i32** %cy.addr, align 8, !dbg !9831
  %35 = load %struct.access_matrix*, %struct.access_matrix** %am.addr, align 8, !dbg !9832
  %36 = load i32, i32* %cst.addr, align 4, !dbg !9833
  %call31 = call zeroext i8 @av_for_af_base(%union.tree_node* %33, i32* %34, %struct.access_matrix* %35, i32 %36), !dbg !9834
  %conv32 = zext i8 %call31 to i32, !dbg !9834
  %tobool33 = icmp ne i32 %conv32, 0, !dbg !9834
  br i1 %tobool33, label %land.rhs34, label %land.end42, !dbg !9835

land.rhs34:                                       ; preds = %sw.bb27
  %37 = load %union.tree_node*, %union.tree_node** %base_expr.addr, align 8, !dbg !9836
  %exp35 = bitcast %union.tree_node* %37 to %struct.tree_exp*, !dbg !9836
  %operands36 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp35, i32 0, i32 3, !dbg !9836
  %arrayidx37 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands36, i64 0, i64 1, !dbg !9836
  %38 = load %union.tree_node*, %union.tree_node** %arrayidx37, align 8, !dbg !9836
  %39 = load i32*, i32** %cy.addr, align 8, !dbg !9837
  %40 = load %struct.access_matrix*, %struct.access_matrix** %am.addr, align 8, !dbg !9838
  %41 = load i32, i32* %cst.addr, align 4, !dbg !9839
  %mul38 = mul nsw i32 -1, %41, !dbg !9840
  %call39 = call zeroext i8 @av_for_af_base(%union.tree_node* %38, i32* %39, %struct.access_matrix* %40, i32 %mul38), !dbg !9841
  %conv40 = zext i8 %call39 to i32, !dbg !9841
  %tobool41 = icmp ne i32 %conv40, 0, !dbg !9835
  br label %land.end42

land.end42:                                       ; preds = %land.rhs34, %sw.bb27
  %42 = phi i1 [ false, %sw.bb27 ], [ %tobool41, %land.rhs34 ], !dbg !9828
  %land.ext43 = zext i1 %42 to i32, !dbg !9835
  %conv44 = trunc i32 %land.ext43 to i8, !dbg !9834
  store i8 %conv44, i8* %retval, align 1, !dbg !9842
  br label %return, !dbg !9842

sw.bb45:                                          ; preds = %entry
  %43 = load %union.tree_node*, %union.tree_node** %base_expr.addr, align 8, !dbg !9843
  %exp46 = bitcast %union.tree_node* %43 to %struct.tree_exp*, !dbg !9843
  %operands47 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp46, i32 0, i32 3, !dbg !9843
  %arrayidx48 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands47, i64 0, i64 0, !dbg !9843
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx48, align 8, !dbg !9843
  %base49 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !9843
  %45 = bitcast %struct.tree_base* %base49 to i64*, !dbg !9843
  %bf.load50 = load i64, i64* %45, align 8, !dbg !9843
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !9843
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !9843
  %cmp53 = icmp eq i32 %bf.cast52, 23, !dbg !9845
  br i1 %cmp53, label %if.then55, label %if.else, !dbg !9846

if.then55:                                        ; preds = %sw.bb45
  %46 = load %union.tree_node*, %union.tree_node** %base_expr.addr, align 8, !dbg !9847
  %exp56 = bitcast %union.tree_node* %46 to %struct.tree_exp*, !dbg !9847
  %operands57 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp56, i32 0, i32 3, !dbg !9847
  %arrayidx58 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands57, i64 0, i64 1, !dbg !9847
  %47 = load %union.tree_node*, %union.tree_node** %arrayidx58, align 8, !dbg !9847
  %48 = load i32*, i32** %cy.addr, align 8, !dbg !9848
  %49 = load %struct.access_matrix*, %struct.access_matrix** %am.addr, align 8, !dbg !9849
  %50 = load i32, i32* %cst.addr, align 4, !dbg !9850
  %conv59 = sext i32 %50 to i64, !dbg !9850
  %51 = load %union.tree_node*, %union.tree_node** %base_expr.addr, align 8, !dbg !9851
  %exp60 = bitcast %union.tree_node* %51 to %struct.tree_exp*, !dbg !9851
  %operands61 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp60, i32 0, i32 3, !dbg !9851
  %arrayidx62 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands61, i64 0, i64 0, !dbg !9851
  %52 = load %union.tree_node*, %union.tree_node** %arrayidx62, align 8, !dbg !9851
  %call63 = call i64 @int_cst_value(%union.tree_node* %52), !dbg !9852
  %mul64 = mul nsw i64 %conv59, %call63, !dbg !9853
  %conv65 = trunc i64 %mul64 to i32, !dbg !9850
  %call66 = call zeroext i8 @av_for_af_base(%union.tree_node* %47, i32* %48, %struct.access_matrix* %49, i32 %conv65), !dbg !9854
  store i8 %call66, i8* %result, align 1, !dbg !9855
  br label %if.end90, !dbg !9856

if.else:                                          ; preds = %sw.bb45
  %53 = load %union.tree_node*, %union.tree_node** %base_expr.addr, align 8, !dbg !9857
  %exp67 = bitcast %union.tree_node* %53 to %struct.tree_exp*, !dbg !9857
  %operands68 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp67, i32 0, i32 3, !dbg !9857
  %arrayidx69 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands68, i64 0, i64 1, !dbg !9857
  %54 = load %union.tree_node*, %union.tree_node** %arrayidx69, align 8, !dbg !9857
  %base70 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !9857
  %55 = bitcast %struct.tree_base* %base70 to i64*, !dbg !9857
  %bf.load71 = load i64, i64* %55, align 8, !dbg !9857
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !9857
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !9857
  %cmp74 = icmp eq i32 %bf.cast73, 23, !dbg !9859
  br i1 %cmp74, label %if.then76, label %if.else88, !dbg !9860

if.then76:                                        ; preds = %if.else
  %56 = load %union.tree_node*, %union.tree_node** %base_expr.addr, align 8, !dbg !9861
  %exp77 = bitcast %union.tree_node* %56 to %struct.tree_exp*, !dbg !9861
  %operands78 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp77, i32 0, i32 3, !dbg !9861
  %arrayidx79 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands78, i64 0, i64 0, !dbg !9861
  %57 = load %union.tree_node*, %union.tree_node** %arrayidx79, align 8, !dbg !9861
  %58 = load i32*, i32** %cy.addr, align 8, !dbg !9862
  %59 = load %struct.access_matrix*, %struct.access_matrix** %am.addr, align 8, !dbg !9863
  %60 = load i32, i32* %cst.addr, align 4, !dbg !9864
  %conv80 = sext i32 %60 to i64, !dbg !9864
  %61 = load %union.tree_node*, %union.tree_node** %base_expr.addr, align 8, !dbg !9865
  %exp81 = bitcast %union.tree_node* %61 to %struct.tree_exp*, !dbg !9865
  %operands82 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp81, i32 0, i32 3, !dbg !9865
  %arrayidx83 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands82, i64 0, i64 1, !dbg !9865
  %62 = load %union.tree_node*, %union.tree_node** %arrayidx83, align 8, !dbg !9865
  %call84 = call i64 @int_cst_value(%union.tree_node* %62), !dbg !9866
  %mul85 = mul nsw i64 %conv80, %call84, !dbg !9867
  %conv86 = trunc i64 %mul85 to i32, !dbg !9864
  %call87 = call zeroext i8 @av_for_af_base(%union.tree_node* %57, i32* %58, %struct.access_matrix* %59, i32 %conv86), !dbg !9868
  store i8 %call87, i8* %result, align 1, !dbg !9869
  br label %if.end89, !dbg !9870

if.else88:                                        ; preds = %if.else
  store i8 0, i8* %result, align 1, !dbg !9871
  br label %if.end89

if.end89:                                         ; preds = %if.else88, %if.then76
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.then55
  %63 = load i8, i8* %result, align 1, !dbg !9872
  store i8 %63, i8* %retval, align 1, !dbg !9873
  br label %return, !dbg !9873

sw.bb91:                                          ; preds = %entry
  %64 = load %union.tree_node*, %union.tree_node** %base_expr.addr, align 8, !dbg !9874
  %exp92 = bitcast %union.tree_node* %64 to %struct.tree_exp*, !dbg !9874
  %operands93 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp92, i32 0, i32 3, !dbg !9874
  %arrayidx94 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands93, i64 0, i64 0, !dbg !9874
  %65 = load %union.tree_node*, %union.tree_node** %arrayidx94, align 8, !dbg !9874
  %66 = load i32*, i32** %cy.addr, align 8, !dbg !9875
  %67 = load %struct.access_matrix*, %struct.access_matrix** %am.addr, align 8, !dbg !9876
  %68 = load i32, i32* %cst.addr, align 4, !dbg !9877
  %mul95 = mul nsw i32 -1, %68, !dbg !9878
  %call96 = call zeroext i8 @av_for_af_base(%union.tree_node* %65, i32* %66, %struct.access_matrix* %67, i32 %mul95), !dbg !9879
  store i8 %call96, i8* %retval, align 1, !dbg !9880
  br label %return, !dbg !9880

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !9881
  br label %return, !dbg !9881

return:                                           ; preds = %sw.default, %sw.bb91, %if.end90, %land.end42, %land.end, %if.end, %if.then, %cond.end
  %69 = load i8, i8* %retval, align 1, !dbg !9882
  ret i8 %69, !dbg !9882
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !9883 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !9887, metadata !DIExpression()), !dbg !9888
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9889, metadata !DIExpression()), !dbg !9888
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !9890, metadata !DIExpression()), !dbg !9888
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !9891
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !9891
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !9891

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9891
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !9891
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !9891
  %3 = load i32, i32* %num, align 8, !dbg !9891
  %cmp = icmp ult i32 %1, %3, !dbg !9891
  br i1 %cmp, label %if.then, label %if.else, !dbg !9888

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !9893
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !9893
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !9893
  %idxprom = zext i32 %5 to i64, !dbg !9893
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !9893
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !9893
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !9893
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !9893
  store i32 1, i32* %retval, align 4, !dbg !9893
  br label %return, !dbg !9893

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !9895
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !9895
  store i32 0, i32* %retval, align 4, !dbg !9895
  br label %return, !dbg !9895

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !9888
  ret i32 %9, !dbg !9888
}

declare dso_local i32 @access_matrix_get_index_for_parameter(%union.tree_node*, %struct.access_matrix*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2202, !2203, !2204}
!llvm.ident = !{!2205}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !635, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "lambda-code.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2 = !{!3, !132, !327, !336, !340, !346, !351, !356, !374, !381, !388, !427, !432, !458, !465, !599, !613, !617, !622}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !4, line: 7, baseType: !5, size: 32, elements: !6)
!4 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!6 = !{!7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131}
!7 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!8 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!9 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!10 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!11 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!12 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!13 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!14 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!15 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!16 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!17 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!18 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!19 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!20 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!21 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!22 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!23 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!24 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!25 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!26 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!27 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!28 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!29 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!30 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!31 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!32 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!33 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!34 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!35 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!36 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!37 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!38 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!39 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!40 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!41 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!42 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!43 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!44 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!45 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!46 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!47 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!48 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!49 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!50 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!51 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!52 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!53 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!54 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!55 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!56 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!57 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!58 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!59 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!60 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!61 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!62 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!63 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!64 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!65 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!66 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!67 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!68 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!69 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!70 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!71 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!72 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!73 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!74 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!75 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!76 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!77 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!78 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!79 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!80 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!81 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!82 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!83 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!84 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!85 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!86 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!87 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!88 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!89 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!90 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!91 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!92 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!93 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!94 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!95 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!131 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!132 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !133, line: 39, baseType: !5, size: 32, elements: !134)
!133 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!134 = !{!135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326}
!135 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!136 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!137 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!138 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!139 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!140 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!141 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!142 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!143 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!144 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!145 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!146 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!147 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!148 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!149 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!150 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!151 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!152 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!153 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!154 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!155 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!156 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!157 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!158 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!159 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!160 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!161 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!162 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!163 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!164 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!165 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!166 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!167 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!168 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!169 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!170 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!171 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!172 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!173 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!174 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!175 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!176 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!177 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!178 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!179 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!180 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!181 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!182 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!183 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!184 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!185 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!186 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!187 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!188 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!189 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!190 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!191 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!192 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!193 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!194 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!195 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!196 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!197 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!198 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!199 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!200 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!201 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!202 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!203 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!204 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!205 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!206 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!207 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!208 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!209 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!210 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!211 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!212 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!213 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!214 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!215 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!216 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!217 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!218 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!219 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!220 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!221 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!222 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!223 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!226 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!227 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!232 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!233 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!234 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!235 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!236 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!237 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!238 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!239 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!240 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!241 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!242 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!243 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!244 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!245 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!246 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!247 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!248 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!249 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!250 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!251 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!252 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!253 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!254 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!255 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!256 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!257 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!258 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!259 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!260 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!261 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!262 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!263 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!264 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!265 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!266 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!267 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!268 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!269 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!270 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!271 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!272 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!273 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!274 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!275 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!276 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!277 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!278 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!279 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!280 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!281 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!282 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!283 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!284 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!285 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!286 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!287 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!288 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!289 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!299 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!300 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!302 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!303 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!304 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!305 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!306 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!320 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!321 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!322 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!323 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!324 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!325 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!326 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!327 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !328, line: 31, baseType: !5, size: 32, elements: !329)
!328 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!329 = !{!330, !331, !332, !333, !334, !335}
!330 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!331 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!332 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!333 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!334 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!335 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!336 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !328, line: 91, baseType: !5, size: 32, elements: !337)
!337 = !{!338, !339}
!338 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!339 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!340 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !341, line: 363, baseType: !5, size: 32, elements: !342)
!341 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!342 = !{!343, !344, !345}
!343 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!344 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!345 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!346 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !341, line: 355, baseType: !5, size: 32, elements: !347)
!347 = !{!348, !349, !350}
!348 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!349 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!350 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!351 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !352, line: 474, baseType: !5, size: 32, elements: !353)
!352 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!353 = !{!354, !355}
!354 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!356 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !133, line: 280, baseType: !5, size: 32, elements: !357)
!357 = !{!358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373}
!358 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!374 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !133, line: 1817, baseType: !5, size: 32, elements: !375)
!375 = !{!376, !377, !378, !379, !380}
!376 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!377 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!378 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!381 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !133, line: 1805, baseType: !5, size: 32, elements: !382)
!382 = !{!383, !384, !385, !386, !387}
!383 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!384 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!385 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!386 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!388 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !389, line: 51, baseType: !5, size: 32, elements: !390)
!389 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!390 = !{!391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426}
!391 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!392 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!393 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!394 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!395 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!396 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!397 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!398 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!399 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!400 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!401 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!402 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!403 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!404 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!405 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!406 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!407 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!408 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!409 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!410 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!411 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!412 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!413 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!414 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!415 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!416 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!417 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!418 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!419 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!420 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!421 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!422 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!423 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!424 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!425 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!426 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!427 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !389, line: 4603, baseType: !5, size: 32, elements: !428)
!428 = !{!429, !430, !431}
!429 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!430 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!431 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!432 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !389, line: 727, baseType: !5, size: 32, elements: !433)
!433 = !{!434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457}
!434 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!435 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!436 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!437 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!438 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!439 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!440 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!441 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!442 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!443 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!444 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!445 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!446 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!447 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!448 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!449 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!450 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!451 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!452 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!453 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!454 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!455 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!456 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!457 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!458 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !459, line: 119, baseType: !5, size: 32, elements: !460)
!459 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!460 = !{!461, !462, !463, !464}
!461 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!462 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!463 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!464 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!465 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !133, line: 3410, baseType: !5, size: 32, elements: !466)
!466 = !{!467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598}
!467 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!468 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!469 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!470 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!471 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!472 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!473 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!474 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!475 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!476 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!477 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!478 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!479 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!480 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!481 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!482 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!483 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!484 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!485 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!486 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!487 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!488 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!489 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!490 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!491 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!492 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!493 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!494 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!495 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!496 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!497 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!498 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!499 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!500 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!501 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!502 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!503 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!504 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!505 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!506 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!507 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!508 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!509 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!510 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!511 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!512 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!513 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!514 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!515 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!516 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!517 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!518 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!519 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!520 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!521 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!522 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!523 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!524 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!525 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!526 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!527 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!528 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!529 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!530 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!531 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!532 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!533 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!534 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!535 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!536 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!537 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!538 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!539 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!540 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!541 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!542 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!543 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!544 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!545 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!546 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!547 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!548 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!549 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!550 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!551 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!552 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!553 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!554 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!555 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!556 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!557 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!558 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!559 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!560 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!561 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!562 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!563 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!564 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!565 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!566 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!567 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!568 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!569 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!570 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!571 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!572 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!573 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!574 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!575 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!576 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!577 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!578 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!579 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!580 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!581 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!582 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!583 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!584 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!585 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!586 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!587 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!588 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!589 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!590 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!591 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!592 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!593 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!594 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!595 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!596 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!597 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!598 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!599 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !341, line: 295, baseType: !5, size: 32, elements: !600)
!600 = !{!601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612}
!601 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!602 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!603 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!604 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!605 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!606 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!607 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!608 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!609 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!610 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!611 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!612 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!613 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !341, line: 912, baseType: !5, size: 32, elements: !614)
!614 = !{!615, !616}
!615 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!616 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!617 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !618, line: 147, baseType: !5, size: 32, elements: !619)
!618 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!619 = !{!620, !621}
!620 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!621 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!622 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !133, line: 58, baseType: !5, size: 32, elements: !623)
!623 = !{!624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634}
!624 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!625 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!626 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!627 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!628 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!629 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!630 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!631 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!632 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!633 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!634 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!635 = !{!636, !647, !649, !650, !659, !664, !675, !132, !643, !2029, !665, !1003, !2040, !1036, !5, !2042, !2047, !2060, !2072, !803, !2075, !2080, !2092, !2101, !2102, !2201, !644, !2134, !2146, !1244}
!636 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_body_vector", file: !637, line: 76, baseType: !638)
!637 = !DIFile(filename: "./lambda.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!638 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !639, size: 64)
!639 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lambda_body_vector_s", file: !637, line: 71, size: 128, elements: !640)
!640 = !{!641, !645, !646}
!641 = !DIDerivedType(tag: DW_TAG_member, name: "coefficients", scope: !639, file: !637, line: 73, baseType: !642, size: 64)
!642 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_vector", file: !637, line: 31, baseType: !643)
!643 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !644, size: 64)
!644 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!645 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !639, file: !637, line: 74, baseType: !644, size: 32, offset: 64)
!646 = !DIDerivedType(tag: DW_TAG_member, name: "denominator", scope: !639, file: !637, line: 75, baseType: !644, size: 32, offset: 96)
!647 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !648, size: 64)
!648 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!650 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_linear_expression", file: !637, line: 100, baseType: !651)
!651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !652, size: 64)
!652 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lambda_linear_expression_s", file: !637, line: 93, size: 320, elements: !653)
!653 = !{!654, !655, !656, !657, !658}
!654 = !DIDerivedType(tag: DW_TAG_member, name: "coefficients", scope: !652, file: !637, line: 95, baseType: !642, size: 64)
!655 = !DIDerivedType(tag: DW_TAG_member, name: "constant", scope: !652, file: !637, line: 96, baseType: !644, size: 32, offset: 64)
!656 = !DIDerivedType(tag: DW_TAG_member, name: "invariant_coefficients", scope: !652, file: !637, line: 97, baseType: !642, size: 64, offset: 128)
!657 = !DIDerivedType(tag: DW_TAG_member, name: "denominator", scope: !652, file: !637, line: 98, baseType: !644, size: 32, offset: 192)
!658 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !652, file: !637, line: 99, baseType: !651, size: 64, offset: 256)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_loopnest", file: !637, line: 145, baseType: !660)
!660 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !661, size: 64)
!661 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lambda_loopnest_s", file: !637, line: 140, size: 128, elements: !662)
!662 = !{!663, !673, !674}
!663 = !DIDerivedType(tag: DW_TAG_member, name: "loops", scope: !661, file: !637, line: 142, baseType: !664, size: 64)
!664 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !665, size: 64)
!665 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_loop", file: !637, line: 127, baseType: !666)
!666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !667, size: 64)
!667 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lambda_loop_s", file: !637, line: 121, size: 256, elements: !668)
!668 = !{!669, !670, !671, !672}
!669 = !DIDerivedType(tag: DW_TAG_member, name: "lower_bound", scope: !667, file: !637, line: 123, baseType: !650, size: 64)
!670 = !DIDerivedType(tag: DW_TAG_member, name: "upper_bound", scope: !667, file: !637, line: 124, baseType: !650, size: 64, offset: 64)
!671 = !DIDerivedType(tag: DW_TAG_member, name: "linear_offset", scope: !667, file: !637, line: 125, baseType: !650, size: 64, offset: 128)
!672 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !667, file: !637, line: 126, baseType: !644, size: 32, offset: 192)
!673 = !DIDerivedType(tag: DW_TAG_member, name: "depth", scope: !661, file: !637, line: 143, baseType: !644, size: 32, offset: 64)
!674 = !DIDerivedType(tag: DW_TAG_member, name: "invariants", scope: !661, file: !637, line: 144, baseType: !644, size: 32, offset: 96)
!675 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !676, line: 56, baseType: !677)
!676 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!677 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !678, size: 64)
!678 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !133, line: 3371, size: 1792, elements: !679)
!679 = !{!680, !713, !719, !732, !751, !762, !767, !776, !782, !796, !808, !846, !1358, !1386, !1403, !1404, !1409, !1418, !1424, !1429, !1433, !1437, !1680, !1727, !1733, !1739, !1746, !1759, !1773, !1790, !1802, !1824, !1839, !2011}
!680 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !678, file: !133, line: 3372, baseType: !681, size: 64)
!681 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !133, line: 360, size: 64, elements: !682)
!682 = !{!683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712}
!683 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !681, file: !133, line: 361, baseType: !5, size: 16, flags: DIFlagBitField, extraData: i64 0)
!684 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !681, file: !133, line: 363, baseType: !5, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!685 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !681, file: !133, line: 364, baseType: !5, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!686 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !681, file: !133, line: 365, baseType: !5, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !681, file: !133, line: 366, baseType: !5, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!688 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !681, file: !133, line: 367, baseType: !5, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!689 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !681, file: !133, line: 368, baseType: !5, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!690 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !681, file: !133, line: 369, baseType: !5, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!691 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !681, file: !133, line: 370, baseType: !5, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!692 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !681, file: !133, line: 372, baseType: !5, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!693 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !681, file: !133, line: 373, baseType: !5, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!694 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !681, file: !133, line: 374, baseType: !5, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!695 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !681, file: !133, line: 375, baseType: !5, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!696 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !681, file: !133, line: 376, baseType: !5, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!697 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !681, file: !133, line: 377, baseType: !5, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!698 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !681, file: !133, line: 378, baseType: !5, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!699 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !681, file: !133, line: 379, baseType: !5, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!700 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !681, file: !133, line: 381, baseType: !5, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!701 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !681, file: !133, line: 382, baseType: !5, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !681, file: !133, line: 383, baseType: !5, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!703 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !681, file: !133, line: 384, baseType: !5, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!704 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !681, file: !133, line: 385, baseType: !5, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !681, file: !133, line: 386, baseType: !5, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !681, file: !133, line: 387, baseType: !5, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!707 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !681, file: !133, line: 388, baseType: !5, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!708 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !681, file: !133, line: 390, baseType: !5, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!709 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !681, file: !133, line: 391, baseType: !5, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!710 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !681, file: !133, line: 392, baseType: !5, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!711 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !681, file: !133, line: 394, baseType: !5, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!712 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !681, file: !133, line: 399, baseType: !5, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!713 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !678, file: !133, line: 3373, baseType: !714, size: 192)
!714 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !133, line: 402, size: 192, elements: !715)
!715 = !{!716, !717, !718}
!716 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !714, file: !133, line: 403, baseType: !681, size: 64)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !714, file: !133, line: 404, baseType: !675, size: 64, offset: 64)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !714, file: !133, line: 405, baseType: !675, size: 64, offset: 128)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !678, file: !133, line: 3374, baseType: !720, size: 320)
!720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !133, line: 1384, size: 320, elements: !721)
!721 = !{!722, !723}
!722 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !720, file: !133, line: 1385, baseType: !714, size: 192)
!723 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !720, file: !133, line: 1386, baseType: !724, size: 128, offset: 192)
!724 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !725, line: 58, baseType: !726)
!725 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!726 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !725, line: 54, size: 128, elements: !727)
!727 = !{!728, !730}
!728 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !726, file: !725, line: 56, baseType: !729, size: 64)
!729 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!730 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !726, file: !725, line: 57, baseType: !731, size: 64, offset: 64)
!731 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!732 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !678, file: !133, line: 3375, baseType: !733, size: 256)
!733 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !133, line: 1397, size: 256, elements: !734)
!734 = !{!735, !736}
!735 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !733, file: !133, line: 1398, baseType: !714, size: 192)
!736 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !733, file: !133, line: 1399, baseType: !737, size: 64, offset: 192)
!737 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !738, size: 64)
!738 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !739, line: 52, size: 256, elements: !740)
!739 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!740 = !{!741, !742, !743, !744, !745, !746, !747}
!741 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !738, file: !739, line: 56, baseType: !5, size: 2, flags: DIFlagBitField, extraData: i64 0)
!742 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !738, file: !739, line: 57, baseType: !5, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!743 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !738, file: !739, line: 58, baseType: !5, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!744 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !738, file: !739, line: 59, baseType: !5, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!745 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !738, file: !739, line: 60, baseType: !5, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!746 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !738, file: !739, line: 61, baseType: !5, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!747 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !738, file: !739, line: 62, baseType: !748, size: 192, offset: 64)
!748 = !DICompositeType(tag: DW_TAG_array_type, baseType: !729, size: 192, elements: !749)
!749 = !{!750}
!750 = !DISubrange(count: 3)
!751 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !678, file: !133, line: 3376, baseType: !752, size: 256)
!752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !133, line: 1408, size: 256, elements: !753)
!753 = !{!754, !755}
!754 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !752, file: !133, line: 1409, baseType: !714, size: 192)
!755 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !752, file: !133, line: 1410, baseType: !756, size: 64, offset: 192)
!756 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !757, size: 64)
!757 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !758, line: 27, size: 192, elements: !759)
!758 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!759 = !{!760, !761}
!760 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !757, file: !758, line: 29, baseType: !724, size: 128)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !757, file: !758, line: 30, baseType: !3, size: 32, offset: 128)
!762 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !678, file: !133, line: 3377, baseType: !763, size: 256)
!763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !133, line: 1437, size: 256, elements: !764)
!764 = !{!765, !766}
!765 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !763, file: !133, line: 1438, baseType: !714, size: 192)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !763, file: !133, line: 1439, baseType: !675, size: 64, offset: 192)
!767 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !678, file: !133, line: 3378, baseType: !768, size: 256)
!768 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !133, line: 1418, size: 256, elements: !769)
!769 = !{!770, !771, !772}
!770 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !768, file: !133, line: 1419, baseType: !714, size: 192)
!771 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !768, file: !133, line: 1420, baseType: !644, size: 32, offset: 192)
!772 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !768, file: !133, line: 1421, baseType: !773, size: 8, offset: 224)
!773 = !DICompositeType(tag: DW_TAG_array_type, baseType: !648, size: 8, elements: !774)
!774 = !{!775}
!775 = !DISubrange(count: 1)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !678, file: !133, line: 3379, baseType: !777, size: 320)
!777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !133, line: 1428, size: 320, elements: !778)
!778 = !{!779, !780, !781}
!779 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !777, file: !133, line: 1429, baseType: !714, size: 192)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !777, file: !133, line: 1430, baseType: !675, size: 64, offset: 192)
!781 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !777, file: !133, line: 1431, baseType: !675, size: 64, offset: 256)
!782 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !678, file: !133, line: 3380, baseType: !783, size: 320)
!783 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !133, line: 1460, size: 320, elements: !784)
!784 = !{!785, !786}
!785 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !783, file: !133, line: 1461, baseType: !714, size: 192)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !783, file: !133, line: 1462, baseType: !787, size: 128, offset: 192)
!787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !788, line: 31, size: 128, elements: !789)
!788 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!789 = !{!790, !794, !795}
!790 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !787, file: !788, line: 32, baseType: !791, size: 64)
!791 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !792, size: 64)
!792 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !793)
!793 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!794 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !787, file: !788, line: 33, baseType: !5, size: 32, offset: 64)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !787, file: !788, line: 34, baseType: !5, size: 32, offset: 96)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !678, file: !133, line: 3381, baseType: !797, size: 384)
!797 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !133, line: 2507, size: 384, elements: !798)
!798 = !{!799, !800, !805, !806, !807}
!799 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !797, file: !133, line: 2508, baseType: !714, size: 192)
!800 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !797, file: !133, line: 2509, baseType: !801, size: 32, offset: 192)
!801 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !802, line: 58, baseType: !803)
!802 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!803 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !804, line: 44, baseType: !5)
!804 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!805 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !797, file: !133, line: 2510, baseType: !5, size: 32, offset: 224)
!806 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !797, file: !133, line: 2511, baseType: !675, size: 64, offset: 256)
!807 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !797, file: !133, line: 2512, baseType: !675, size: 64, offset: 320)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !678, file: !133, line: 3382, baseType: !809, size: 896)
!809 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !133, line: 2652, size: 896, elements: !810)
!810 = !{!811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843}
!811 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !809, file: !133, line: 2653, baseType: !797, size: 384)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !809, file: !133, line: 2654, baseType: !675, size: 64, offset: 384)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !809, file: !133, line: 2656, baseType: !5, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !809, file: !133, line: 2658, baseType: !5, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !809, file: !133, line: 2659, baseType: !5, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !809, file: !133, line: 2660, baseType: !5, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !809, file: !133, line: 2661, baseType: !5, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !809, file: !133, line: 2662, baseType: !5, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!819 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !809, file: !133, line: 2663, baseType: !5, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!820 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !809, file: !133, line: 2664, baseType: !5, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!821 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !809, file: !133, line: 2666, baseType: !5, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!822 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !809, file: !133, line: 2667, baseType: !5, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !809, file: !133, line: 2668, baseType: !5, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!824 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !809, file: !133, line: 2669, baseType: !5, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!825 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !809, file: !133, line: 2670, baseType: !5, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!826 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !809, file: !133, line: 2671, baseType: !5, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!827 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !809, file: !133, line: 2672, baseType: !5, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!828 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !809, file: !133, line: 2673, baseType: !5, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!829 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !809, file: !133, line: 2674, baseType: !5, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !809, file: !133, line: 2678, baseType: !5, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !809, file: !133, line: 2682, baseType: !5, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!832 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !809, file: !133, line: 2685, baseType: !5, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !809, file: !133, line: 2688, baseType: !5, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !809, file: !133, line: 2690, baseType: !5, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !809, file: !133, line: 2692, baseType: !5, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !809, file: !133, line: 2695, baseType: !5, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !809, file: !133, line: 2698, baseType: !5, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !809, file: !133, line: 2703, baseType: !5, size: 32, offset: 512)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !809, file: !133, line: 2705, baseType: !675, size: 64, offset: 576)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !809, file: !133, line: 2706, baseType: !675, size: 64, offset: 640)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !809, file: !133, line: 2707, baseType: !675, size: 64, offset: 704)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !809, file: !133, line: 2708, baseType: !675, size: 64, offset: 768)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !809, file: !133, line: 2711, baseType: !844, size: 64, offset: 832)
!844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !845, size: 64)
!845 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !133, line: 2711, flags: DIFlagFwdDecl)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !678, file: !133, line: 3383, baseType: !847, size: 960)
!847 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !133, line: 2756, size: 960, elements: !848)
!848 = !{!849, !850}
!849 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !847, file: !133, line: 2757, baseType: !809, size: 896)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !847, file: !133, line: 2758, baseType: !851, size: 64, offset: 896)
!851 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !676, line: 50, baseType: !852)
!852 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !853, size: 64)
!853 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !854, line: 240, size: 384, elements: !855)
!854 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!855 = !{!856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866}
!856 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !853, file: !854, line: 242, baseType: !5, size: 16, flags: DIFlagBitField, extraData: i64 0)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !853, file: !854, line: 245, baseType: !5, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !853, file: !854, line: 252, baseType: !5, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !853, file: !854, line: 257, baseType: !5, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !853, file: !854, line: 265, baseType: !5, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!861 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !853, file: !854, line: 277, baseType: !5, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !853, file: !854, line: 291, baseType: !5, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !853, file: !854, line: 298, baseType: !5, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !853, file: !854, line: 305, baseType: !5, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!865 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !853, file: !854, line: 310, baseType: !5, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !853, file: !854, line: 321, baseType: !867, size: 320, offset: 64)
!867 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !854, line: 315, size: 320, elements: !868)
!868 = !{!869, !1325, !1327, !1356, !1357}
!869 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !867, file: !854, line: 316, baseType: !870, size: 64)
!870 = !DICompositeType(tag: DW_TAG_array_type, baseType: !871, size: 64, elements: !774)
!871 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !854, line: 183, baseType: !872)
!872 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !854, line: 166, size: 64, elements: !873)
!873 = !{!874, !875, !876, !879, !880, !888, !889, !901, !904, !964, !965, !1302, !1315, !1322}
!874 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !872, file: !854, line: 168, baseType: !644, size: 32)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !872, file: !854, line: 169, baseType: !5, size: 32)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !872, file: !854, line: 170, baseType: !877, size: 64)
!877 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !878, size: 64)
!878 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !648)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !872, file: !854, line: 171, baseType: !851, size: 64)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !872, file: !854, line: 172, baseType: !881, size: 64)
!881 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !676, line: 53, baseType: !882)
!882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !883, size: 64)
!883 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !854, line: 359, size: 128, elements: !884)
!884 = !{!885, !886}
!885 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !883, file: !854, line: 360, baseType: !644, size: 32)
!886 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !883, file: !854, line: 361, baseType: !887, size: 64, offset: 64)
!887 = !DICompositeType(tag: DW_TAG_array_type, baseType: !851, size: 64, elements: !774)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !872, file: !854, line: 173, baseType: !3, size: 32)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !872, file: !854, line: 174, baseType: !890, size: 32)
!890 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !854, line: 133, baseType: !891)
!891 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !854, line: 115, size: 32, elements: !892)
!892 = !{!893, !894, !895, !896, !897, !898, !899, !900}
!893 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !891, file: !854, line: 118, baseType: !5, size: 8, flags: DIFlagBitField, extraData: i64 0)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !891, file: !854, line: 120, baseType: !5, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !891, file: !854, line: 121, baseType: !5, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !891, file: !854, line: 123, baseType: !5, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !891, file: !854, line: 125, baseType: !5, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !891, file: !854, line: 127, baseType: !5, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !891, file: !854, line: 130, baseType: !5, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !891, file: !854, line: 132, baseType: !5, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !872, file: !854, line: 175, baseType: !902, size: 64)
!902 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !903, size: 64)
!903 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !854, line: 175, flags: DIFlagFwdDecl)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !872, file: !854, line: 176, baseType: !905, size: 64)
!905 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !906, size: 64)
!906 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !907, line: 75, size: 256, elements: !908)
!907 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!908 = !{!909, !923, !924, !925}
!909 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !906, file: !907, line: 76, baseType: !910, size: 64)
!910 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !911, size: 64)
!911 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !907, line: 68, baseType: !912)
!912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !907, line: 63, size: 320, elements: !913)
!913 = !{!914, !916, !917, !918}
!914 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !912, file: !907, line: 64, baseType: !915, size: 64)
!915 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !912, size: 64)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !912, file: !907, line: 65, baseType: !915, size: 64, offset: 64)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !912, file: !907, line: 66, baseType: !5, size: 32, offset: 128)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !912, file: !907, line: 67, baseType: !919, size: 128, offset: 192)
!919 = !DICompositeType(tag: DW_TAG_array_type, baseType: !920, size: 128, elements: !921)
!920 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !907, line: 29, baseType: !729)
!921 = !{!922}
!922 = !DISubrange(count: 2)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !906, file: !907, line: 77, baseType: !910, size: 64, offset: 64)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !906, file: !907, line: 78, baseType: !5, size: 32, offset: 128)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !906, file: !907, line: 79, baseType: !926, size: 64, offset: 192)
!926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !927, size: 64)
!927 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !907, line: 49, baseType: !928)
!928 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !907, line: 45, size: 832, elements: !929)
!929 = !{!930, !931, !932}
!930 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !928, file: !907, line: 46, baseType: !915, size: 64)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !928, file: !907, line: 47, baseType: !905, size: 64, offset: 64)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !928, file: !907, line: 48, baseType: !933, size: 704, offset: 128)
!933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !934, line: 164, size: 704, elements: !935)
!934 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!935 = !{!936, !937, !947, !948, !949, !950, !951, !952, !956, !960, !961, !962, !963}
!936 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !933, file: !934, line: 166, baseType: !731, size: 64)
!937 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !933, file: !934, line: 167, baseType: !938, size: 64, offset: 64)
!938 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !939, size: 64)
!939 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !934, line: 157, size: 192, elements: !940)
!940 = !{!941, !942, !943}
!941 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !939, file: !934, line: 159, baseType: !647, size: 64)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !939, file: !934, line: 160, baseType: !938, size: 64, offset: 64)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !939, file: !934, line: 161, baseType: !944, size: 32, offset: 128)
!944 = !DICompositeType(tag: DW_TAG_array_type, baseType: !648, size: 32, elements: !945)
!945 = !{!946}
!946 = !DISubrange(count: 4)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !933, file: !934, line: 168, baseType: !647, size: 64, offset: 128)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !933, file: !934, line: 169, baseType: !647, size: 64, offset: 192)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !933, file: !934, line: 170, baseType: !647, size: 64, offset: 256)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !933, file: !934, line: 171, baseType: !731, size: 64, offset: 320)
!951 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !933, file: !934, line: 172, baseType: !644, size: 32, offset: 384)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !933, file: !934, line: 176, baseType: !953, size: 64, offset: 448)
!953 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !954, size: 64)
!954 = !DISubroutineType(types: !955)
!955 = !{!938, !649, !731}
!956 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !933, file: !934, line: 177, baseType: !957, size: 64, offset: 512)
!957 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !958, size: 64)
!958 = !DISubroutineType(types: !959)
!959 = !{null, !649, !938}
!960 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !933, file: !934, line: 178, baseType: !649, size: 64, offset: 576)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !933, file: !934, line: 179, baseType: !5, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!962 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !933, file: !934, line: 180, baseType: !5, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !933, file: !934, line: 184, baseType: !5, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !872, file: !854, line: 177, baseType: !675, size: 64)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !872, file: !854, line: 178, baseType: !966, size: 64)
!966 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !967, size: 64)
!967 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !341, line: 217, size: 832, elements: !968)
!968 = !{!969, !1214, !1215, !1216, !1272, !1276, !1277, !1278, !1296, !1297, !1298, !1299, !1300, !1301}
!969 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !967, file: !341, line: 219, baseType: !970, size: 64)
!970 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !971, size: 64)
!971 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !341, line: 151, baseType: !972)
!972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !341, line: 151, size: 128, elements: !973)
!973 = !{!974}
!974 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !972, file: !341, line: 151, baseType: !975, size: 128)
!975 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !341, line: 150, baseType: !976)
!976 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !341, line: 150, size: 128, elements: !977)
!977 = !{!978, !979, !980}
!978 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !976, file: !341, line: 150, baseType: !5, size: 32)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !976, file: !341, line: 150, baseType: !5, size: 32, offset: 32)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !976, file: !341, line: 150, baseType: !981, size: 64, offset: 64)
!981 = !DICompositeType(tag: DW_TAG_array_type, baseType: !982, size: 64, elements: !774)
!982 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !676, line: 108, baseType: !983)
!983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !984, size: 64)
!984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !341, line: 122, size: 512, elements: !985)
!985 = !{!986, !987, !988, !1206, !1207, !1208, !1209, !1210, !1211, !1212}
!986 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !984, file: !341, line: 124, baseType: !966, size: 64)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !984, file: !341, line: 125, baseType: !966, size: 64, offset: 64)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !984, file: !341, line: 131, baseType: !989, size: 64, offset: 128)
!989 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !341, line: 128, size: 64, elements: !990)
!990 = !{!991, !1205}
!991 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !989, file: !341, line: 129, baseType: !992, size: 64)
!992 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !676, line: 66, baseType: !993)
!993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !994, size: 64)
!994 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !389, line: 143, size: 192, elements: !995)
!995 = !{!996, !1203, !1204}
!996 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !994, file: !389, line: 145, baseType: !997, size: 64)
!997 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !676, line: 69, baseType: !998)
!998 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !999, size: 64)
!999 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !389, line: 136, size: 192, elements: !1000)
!1000 = !{!1001, !1201, !1202}
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !999, file: !389, line: 137, baseType: !1002, size: 64)
!1002 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !676, line: 58, baseType: !1003)
!1003 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1004, size: 64)
!1004 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !389, line: 737, size: 768, elements: !1005)
!1005 = !{!1006, !1023, !1056, !1062, !1067, !1072, !1079, !1085, !1091, !1096, !1110, !1115, !1121, !1126, !1136, !1141, !1159, !1166, !1173, !1179, !1184, !1190, !1196}
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1004, file: !389, line: 738, baseType: !1007, size: 256)
!1007 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !389, line: 271, size: 256, elements: !1008)
!1008 = !{!1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022}
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1007, file: !389, line: 274, baseType: !5, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1007, file: !389, line: 277, baseType: !5, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1007, file: !389, line: 281, baseType: !5, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1007, file: !389, line: 284, baseType: !5, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1007, file: !389, line: 291, baseType: !5, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1007, file: !389, line: 295, baseType: !5, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1007, file: !389, line: 298, baseType: !5, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1007, file: !389, line: 301, baseType: !5, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1007, file: !389, line: 307, baseType: !5, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1007, file: !389, line: 312, baseType: !5, size: 32, offset: 32)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1007, file: !389, line: 316, baseType: !801, size: 32, offset: 64)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1007, file: !389, line: 319, baseType: !5, size: 32, offset: 96)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1007, file: !389, line: 323, baseType: !966, size: 64, offset: 128)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1007, file: !389, line: 327, baseType: !675, size: 64, offset: 192)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1004, file: !389, line: 739, baseType: !1024, size: 448)
!1024 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !389, line: 350, size: 448, elements: !1025)
!1025 = !{!1026, !1054}
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1024, file: !389, line: 353, baseType: !1027, size: 384)
!1027 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !389, line: 333, size: 384, elements: !1028)
!1028 = !{!1029, !1030, !1037}
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1027, file: !389, line: 336, baseType: !1007, size: 256)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1027, file: !389, line: 343, baseType: !1031, size: 64, offset: 256)
!1031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1032, size: 64)
!1032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !459, line: 37, size: 128, elements: !1033)
!1033 = !{!1034, !1035}
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1032, file: !459, line: 39, baseType: !1031, size: 64)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1032, file: !459, line: 40, baseType: !1036, size: 64, offset: 64)
!1036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !675, size: 64)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1027, file: !389, line: 344, baseType: !1038, size: 64, offset: 320)
!1038 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1039, size: 64)
!1039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !459, line: 45, size: 320, elements: !1040)
!1040 = !{!1041, !1042}
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1039, file: !459, line: 47, baseType: !1038, size: 64)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1039, file: !459, line: 48, baseType: !1043, size: 256, offset: 64)
!1043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !133, line: 1883, size: 256, elements: !1044)
!1044 = !{!1045, !1047, !1048, !1053}
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1043, file: !133, line: 1884, baseType: !1046, size: 64)
!1046 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1043, size: 64)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1043, file: !133, line: 1885, baseType: !1046, size: 64, offset: 64)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1043, file: !133, line: 1891, baseType: !1049, size: 64, offset: 128)
!1049 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1043, file: !133, line: 1891, size: 64, elements: !1050)
!1050 = !{!1051, !1052}
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1049, file: !133, line: 1891, baseType: !1002, size: 64)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1049, file: !133, line: 1891, baseType: !675, size: 64)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1043, file: !133, line: 1892, baseType: !1036, size: 64, offset: 192)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1024, file: !389, line: 359, baseType: !1055, size: 64, offset: 384)
!1055 = !DICompositeType(tag: DW_TAG_array_type, baseType: !675, size: 64, elements: !774)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1004, file: !389, line: 740, baseType: !1057, size: 512)
!1057 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !389, line: 365, size: 512, elements: !1058)
!1058 = !{!1059, !1060, !1061}
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1057, file: !389, line: 368, baseType: !1027, size: 384)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1057, file: !389, line: 373, baseType: !675, size: 64, offset: 384)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1057, file: !389, line: 374, baseType: !675, size: 64, offset: 448)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1004, file: !389, line: 741, baseType: !1063, size: 576)
!1063 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !389, line: 380, size: 576, elements: !1064)
!1064 = !{!1065, !1066}
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1063, file: !389, line: 383, baseType: !1057, size: 512)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1063, file: !389, line: 389, baseType: !1055, size: 64, offset: 512)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1004, file: !389, line: 742, baseType: !1068, size: 320)
!1068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !389, line: 395, size: 320, elements: !1069)
!1069 = !{!1070, !1071}
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1068, file: !389, line: 397, baseType: !1007, size: 256)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1068, file: !389, line: 400, baseType: !992, size: 64, offset: 256)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1004, file: !389, line: 743, baseType: !1073, size: 448)
!1073 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !389, line: 406, size: 448, elements: !1074)
!1074 = !{!1075, !1076, !1077, !1078}
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1073, file: !389, line: 408, baseType: !1007, size: 256)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1073, file: !389, line: 412, baseType: !675, size: 64, offset: 256)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1073, file: !389, line: 420, baseType: !675, size: 64, offset: 320)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1073, file: !389, line: 423, baseType: !992, size: 64, offset: 384)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1004, file: !389, line: 744, baseType: !1080, size: 384)
!1080 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !389, line: 429, size: 384, elements: !1081)
!1081 = !{!1082, !1083, !1084}
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1080, file: !389, line: 431, baseType: !1007, size: 256)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1080, file: !389, line: 434, baseType: !675, size: 64, offset: 256)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1080, file: !389, line: 437, baseType: !992, size: 64, offset: 320)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1004, file: !389, line: 745, baseType: !1086, size: 384)
!1086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !389, line: 443, size: 384, elements: !1087)
!1087 = !{!1088, !1089, !1090}
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1086, file: !389, line: 445, baseType: !1007, size: 256)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1086, file: !389, line: 449, baseType: !675, size: 64, offset: 256)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1086, file: !389, line: 453, baseType: !992, size: 64, offset: 320)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1004, file: !389, line: 746, baseType: !1092, size: 320)
!1092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !389, line: 459, size: 320, elements: !1093)
!1093 = !{!1094, !1095}
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1092, file: !389, line: 461, baseType: !1007, size: 256)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1092, file: !389, line: 464, baseType: !675, size: 64, offset: 256)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1004, file: !389, line: 747, baseType: !1097, size: 768)
!1097 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !389, line: 469, size: 768, elements: !1098)
!1098 = !{!1099, !1100, !1101, !1102, !1103}
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1097, file: !389, line: 471, baseType: !1007, size: 256)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1097, file: !389, line: 474, baseType: !5, size: 32, offset: 256)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1097, file: !389, line: 475, baseType: !5, size: 32, offset: 288)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1097, file: !389, line: 478, baseType: !675, size: 64, offset: 320)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1097, file: !389, line: 481, baseType: !1104, size: 384, offset: 384)
!1104 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1105, size: 384, elements: !774)
!1105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !133, line: 1917, size: 384, elements: !1106)
!1106 = !{!1107, !1108, !1109}
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1105, file: !133, line: 1920, baseType: !1043, size: 256)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1105, file: !133, line: 1921, baseType: !675, size: 64, offset: 256)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1105, file: !133, line: 1922, baseType: !801, size: 32, offset: 320)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1004, file: !389, line: 748, baseType: !1111, size: 320)
!1111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !389, line: 487, size: 320, elements: !1112)
!1112 = !{!1113, !1114}
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1111, file: !389, line: 490, baseType: !1007, size: 256)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1111, file: !389, line: 494, baseType: !644, size: 32, offset: 256)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1004, file: !389, line: 749, baseType: !1116, size: 384)
!1116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !389, line: 500, size: 384, elements: !1117)
!1117 = !{!1118, !1119, !1120}
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1116, file: !389, line: 502, baseType: !1007, size: 256)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1116, file: !389, line: 506, baseType: !992, size: 64, offset: 256)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1116, file: !389, line: 510, baseType: !992, size: 64, offset: 320)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1004, file: !389, line: 750, baseType: !1122, size: 320)
!1122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !389, line: 529, size: 320, elements: !1123)
!1123 = !{!1124, !1125}
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1122, file: !389, line: 531, baseType: !1007, size: 256)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1122, file: !389, line: 540, baseType: !992, size: 64, offset: 256)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1004, file: !389, line: 751, baseType: !1127, size: 704)
!1127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !389, line: 546, size: 704, elements: !1128)
!1128 = !{!1129, !1130, !1131, !1132, !1133, !1134, !1135}
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1127, file: !389, line: 549, baseType: !1057, size: 512)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1127, file: !389, line: 553, baseType: !877, size: 64, offset: 512)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1127, file: !389, line: 557, baseType: !793, size: 8, offset: 576)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1127, file: !389, line: 558, baseType: !793, size: 8, offset: 584)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1127, file: !389, line: 559, baseType: !793, size: 8, offset: 592)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1127, file: !389, line: 560, baseType: !793, size: 8, offset: 600)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1127, file: !389, line: 566, baseType: !1055, size: 64, offset: 640)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1004, file: !389, line: 752, baseType: !1137, size: 384)
!1137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !389, line: 571, size: 384, elements: !1138)
!1138 = !{!1139, !1140}
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1137, file: !389, line: 573, baseType: !1068, size: 320)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1137, file: !389, line: 577, baseType: !675, size: 64, offset: 320)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1004, file: !389, line: 753, baseType: !1142, size: 576)
!1142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !389, line: 600, size: 576, elements: !1143)
!1143 = !{!1144, !1145, !1146, !1149, !1158}
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1142, file: !389, line: 602, baseType: !1068, size: 320)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1142, file: !389, line: 605, baseType: !675, size: 64, offset: 320)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1142, file: !389, line: 609, baseType: !1147, size: 64, offset: 384)
!1147 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1148, line: 46, baseType: !729)
!1148 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1142, file: !389, line: 612, baseType: !1150, size: 64, offset: 448)
!1150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1151, size: 64)
!1151 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !389, line: 581, size: 320, elements: !1152)
!1152 = !{!1153, !1154, !1155, !1156, !1157}
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1151, file: !389, line: 583, baseType: !132, size: 32)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1151, file: !389, line: 586, baseType: !675, size: 64, offset: 64)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1151, file: !389, line: 589, baseType: !675, size: 64, offset: 128)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1151, file: !389, line: 592, baseType: !675, size: 64, offset: 192)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1151, file: !389, line: 595, baseType: !675, size: 64, offset: 256)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1142, file: !389, line: 616, baseType: !992, size: 64, offset: 512)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1004, file: !389, line: 754, baseType: !1160, size: 512)
!1160 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !389, line: 622, size: 512, elements: !1161)
!1161 = !{!1162, !1163, !1164, !1165}
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1160, file: !389, line: 624, baseType: !1068, size: 320)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1160, file: !389, line: 628, baseType: !675, size: 64, offset: 320)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1160, file: !389, line: 632, baseType: !675, size: 64, offset: 384)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1160, file: !389, line: 636, baseType: !675, size: 64, offset: 448)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1004, file: !389, line: 755, baseType: !1167, size: 704)
!1167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !389, line: 642, size: 704, elements: !1168)
!1168 = !{!1169, !1170, !1171, !1172}
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1167, file: !389, line: 644, baseType: !1160, size: 512)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1167, file: !389, line: 648, baseType: !675, size: 64, offset: 512)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1167, file: !389, line: 652, baseType: !675, size: 64, offset: 576)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1167, file: !389, line: 653, baseType: !675, size: 64, offset: 640)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1004, file: !389, line: 756, baseType: !1174, size: 448)
!1174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !389, line: 663, size: 448, elements: !1175)
!1175 = !{!1176, !1177, !1178}
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1174, file: !389, line: 665, baseType: !1068, size: 320)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1174, file: !389, line: 668, baseType: !675, size: 64, offset: 320)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1174, file: !389, line: 673, baseType: !675, size: 64, offset: 384)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1004, file: !389, line: 757, baseType: !1180, size: 384)
!1180 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !389, line: 694, size: 384, elements: !1181)
!1181 = !{!1182, !1183}
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1180, file: !389, line: 696, baseType: !1068, size: 320)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1180, file: !389, line: 699, baseType: !675, size: 64, offset: 320)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1004, file: !389, line: 758, baseType: !1185, size: 384)
!1185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !389, line: 681, size: 384, elements: !1186)
!1186 = !{!1187, !1188, !1189}
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1185, file: !389, line: 683, baseType: !1007, size: 256)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1185, file: !389, line: 686, baseType: !675, size: 64, offset: 256)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1185, file: !389, line: 689, baseType: !675, size: 64, offset: 320)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1004, file: !389, line: 759, baseType: !1191, size: 384)
!1191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !389, line: 707, size: 384, elements: !1192)
!1192 = !{!1193, !1194, !1195}
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1191, file: !389, line: 709, baseType: !1007, size: 256)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1191, file: !389, line: 712, baseType: !675, size: 64, offset: 256)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1191, file: !389, line: 712, baseType: !675, size: 64, offset: 320)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1004, file: !389, line: 760, baseType: !1197, size: 320)
!1197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !389, line: 718, size: 320, elements: !1198)
!1198 = !{!1199, !1200}
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1197, file: !389, line: 720, baseType: !1007, size: 256)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1197, file: !389, line: 723, baseType: !675, size: 64, offset: 256)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !999, file: !389, line: 138, baseType: !998, size: 64, offset: 64)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !999, file: !389, line: 139, baseType: !998, size: 64, offset: 128)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !994, file: !389, line: 146, baseType: !997, size: 64, offset: 64)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !994, file: !389, line: 152, baseType: !992, size: 64, offset: 128)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !989, file: !341, line: 130, baseType: !851, size: 64)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !984, file: !341, line: 134, baseType: !649, size: 64, offset: 192)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !984, file: !341, line: 137, baseType: !675, size: 64, offset: 256)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !984, file: !341, line: 138, baseType: !801, size: 32, offset: 320)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !984, file: !341, line: 142, baseType: !5, size: 32, offset: 352)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !984, file: !341, line: 144, baseType: !644, size: 32, offset: 384)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !984, file: !341, line: 145, baseType: !644, size: 32, offset: 416)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !984, file: !341, line: 146, baseType: !1213, size: 64, offset: 448)
!1213 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !341, line: 119, baseType: !731)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !967, file: !341, line: 220, baseType: !970, size: 64, offset: 64)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !967, file: !341, line: 223, baseType: !649, size: 64, offset: 128)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !967, file: !341, line: 226, baseType: !1217, size: 64, offset: 192)
!1217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1218, size: 64)
!1218 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !328, line: 100, size: 1216, elements: !1219)
!1219 = !{!1220, !1221, !1222, !1223, !1224, !1229, !1230, !1231, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1262, !1270, !1271}
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1218, file: !328, line: 102, baseType: !644, size: 32)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1218, file: !328, line: 105, baseType: !5, size: 32, offset: 32)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1218, file: !328, line: 108, baseType: !966, size: 64, offset: 64)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1218, file: !328, line: 111, baseType: !966, size: 64, offset: 128)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1218, file: !328, line: 114, baseType: !1225, size: 64, offset: 192)
!1225 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !328, line: 41, size: 64, elements: !1226)
!1226 = !{!1227, !1228}
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1225, file: !328, line: 42, baseType: !327, size: 32)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1225, file: !328, line: 43, baseType: !5, size: 32, offset: 32)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1218, file: !328, line: 117, baseType: !5, size: 32, offset: 256)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1218, file: !328, line: 120, baseType: !5, size: 32, offset: 288)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1218, file: !328, line: 123, baseType: !1232, size: 64, offset: 320)
!1232 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1233, size: 64)
!1233 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !328, line: 87, baseType: !1234)
!1234 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !328, line: 87, size: 128, elements: !1235)
!1235 = !{!1236}
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1234, file: !328, line: 87, baseType: !1237, size: 128)
!1237 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !328, line: 85, baseType: !1238)
!1238 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !328, line: 85, size: 128, elements: !1239)
!1239 = !{!1240, !1241, !1242}
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1238, file: !328, line: 85, baseType: !5, size: 32)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1238, file: !328, line: 85, baseType: !5, size: 32, offset: 32)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1238, file: !328, line: 85, baseType: !1243, size: 64, offset: 64)
!1243 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1244, size: 64, elements: !774)
!1244 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !328, line: 84, baseType: !1217)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1218, file: !328, line: 126, baseType: !1217, size: 64, offset: 384)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1218, file: !328, line: 129, baseType: !1217, size: 64, offset: 448)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1218, file: !328, line: 132, baseType: !649, size: 64, offset: 512)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1218, file: !328, line: 139, baseType: !675, size: 64, offset: 576)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1218, file: !328, line: 143, baseType: !724, size: 128, offset: 640)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1218, file: !328, line: 146, baseType: !724, size: 128, offset: 768)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1218, file: !328, line: 148, baseType: !793, size: 8, offset: 896)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1218, file: !328, line: 149, baseType: !793, size: 8, offset: 904)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1218, file: !328, line: 153, baseType: !336, size: 32, offset: 928)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1218, file: !328, line: 156, baseType: !1255, size: 64, offset: 960)
!1255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1256, size: 64)
!1256 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !328, line: 48, size: 320, elements: !1257)
!1257 = !{!1258, !1259, !1260, !1261}
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1256, file: !328, line: 50, baseType: !1002, size: 64)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1256, file: !328, line: 59, baseType: !724, size: 128, offset: 64)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1256, file: !328, line: 64, baseType: !793, size: 8, offset: 192)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1256, file: !328, line: 67, baseType: !1255, size: 64, offset: 256)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1218, file: !328, line: 159, baseType: !1263, size: 64, offset: 1024)
!1263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1264, size: 64)
!1264 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !328, line: 72, size: 256, elements: !1265)
!1265 = !{!1266, !1267, !1268, !1269}
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1264, file: !328, line: 74, baseType: !983, size: 64)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1264, file: !328, line: 77, baseType: !1263, size: 64, offset: 64)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1264, file: !328, line: 78, baseType: !1263, size: 64, offset: 128)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1264, file: !328, line: 81, baseType: !1263, size: 64, offset: 192)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1218, file: !328, line: 162, baseType: !793, size: 8, offset: 1088)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1218, file: !328, line: 166, baseType: !675, size: 64, offset: 1152)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !967, file: !341, line: 229, baseType: !1273, size: 128, offset: 256)
!1273 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1274, size: 128, elements: !921)
!1274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1275, size: 64)
!1275 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !341, line: 229, flags: DIFlagFwdDecl)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !967, file: !341, line: 232, baseType: !966, size: 64, offset: 384)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !967, file: !341, line: 233, baseType: !966, size: 64, offset: 448)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !967, file: !341, line: 238, baseType: !1279, size: 64, offset: 512)
!1279 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !341, line: 235, size: 64, elements: !1280)
!1280 = !{!1281, !1287}
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1279, file: !341, line: 236, baseType: !1282, size: 64)
!1282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1283, size: 64)
!1283 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !341, line: 273, size: 128, elements: !1284)
!1284 = !{!1285, !1286}
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1283, file: !341, line: 275, baseType: !992, size: 64)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1283, file: !341, line: 278, baseType: !992, size: 64, offset: 64)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1279, file: !341, line: 237, baseType: !1288, size: 64)
!1288 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1289, size: 64)
!1289 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !341, line: 259, size: 320, elements: !1290)
!1290 = !{!1291, !1292, !1293, !1294, !1295}
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1289, file: !341, line: 261, baseType: !851, size: 64)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1289, file: !341, line: 262, baseType: !851, size: 64, offset: 64)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1289, file: !341, line: 266, baseType: !851, size: 64, offset: 128)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1289, file: !341, line: 267, baseType: !851, size: 64, offset: 192)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1289, file: !341, line: 270, baseType: !644, size: 32, offset: 256)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !967, file: !341, line: 241, baseType: !1213, size: 64, offset: 576)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !967, file: !341, line: 244, baseType: !644, size: 32, offset: 640)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !967, file: !341, line: 247, baseType: !644, size: 32, offset: 672)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !967, file: !341, line: 250, baseType: !644, size: 32, offset: 704)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !967, file: !341, line: 253, baseType: !644, size: 32, offset: 736)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !967, file: !341, line: 256, baseType: !644, size: 32, offset: 768)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !872, file: !854, line: 179, baseType: !1303, size: 64)
!1303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1304, size: 64)
!1304 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !854, line: 150, baseType: !1305)
!1305 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !854, line: 142, size: 320, elements: !1306)
!1306 = !{!1307, !1308, !1309, !1310, !1313, !1314}
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1305, file: !854, line: 144, baseType: !675, size: 64)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1305, file: !854, line: 145, baseType: !851, size: 64, offset: 64)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1305, file: !854, line: 146, baseType: !851, size: 64, offset: 128)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1305, file: !854, line: 147, baseType: !1311, size: 32, offset: 192)
!1311 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1312, line: 31, baseType: !644)
!1312 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1305, file: !854, line: 148, baseType: !5, size: 32, offset: 224)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1305, file: !854, line: 149, baseType: !793, size: 8, offset: 256)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !872, file: !854, line: 180, baseType: !1316, size: 64)
!1316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1317, size: 64)
!1317 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !854, line: 162, baseType: !1318)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !854, line: 159, size: 128, elements: !1319)
!1319 = !{!1320, !1321}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1318, file: !854, line: 160, baseType: !675, size: 64)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1318, file: !854, line: 161, baseType: !731, size: 64, offset: 64)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !872, file: !854, line: 181, baseType: !1323, size: 64)
!1323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1324, size: 64)
!1324 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !854, line: 181, flags: DIFlagFwdDecl)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !867, file: !854, line: 317, baseType: !1326, size: 64)
!1326 = !DICompositeType(tag: DW_TAG_array_type, baseType: !731, size: 64, elements: !774)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !867, file: !854, line: 318, baseType: !1328, size: 320)
!1328 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !854, line: 188, size: 320, elements: !1329)
!1329 = !{!1330, !1332, !1355}
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1328, file: !854, line: 190, baseType: !1331, size: 192)
!1331 = !DICompositeType(tag: DW_TAG_array_type, baseType: !871, size: 192, elements: !749)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1328, file: !854, line: 193, baseType: !1333, size: 64, offset: 192)
!1333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1334, size: 64)
!1334 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !854, line: 206, size: 320, elements: !1335)
!1335 = !{!1336, !1340, !1341, !1342, !1354}
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1334, file: !854, line: 208, baseType: !1337, size: 64)
!1337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1338, size: 64)
!1338 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !676, line: 62, baseType: !1339)
!1339 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !676, line: 61, flags: DIFlagFwdDecl)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1334, file: !854, line: 211, baseType: !5, size: 32, offset: 64)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1334, file: !854, line: 214, baseType: !731, size: 64, offset: 128)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1334, file: !854, line: 224, baseType: !1343, size: 64, offset: 192)
!1343 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1344, size: 64)
!1344 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !854, line: 202, baseType: !1345)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !854, line: 202, size: 128, elements: !1346)
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1345, file: !854, line: 202, baseType: !1348, size: 128)
!1348 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !854, line: 200, baseType: !1349)
!1349 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !854, line: 200, size: 128, elements: !1350)
!1350 = !{!1351, !1352, !1353}
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1349, file: !854, line: 200, baseType: !5, size: 32)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1349, file: !854, line: 200, baseType: !5, size: 32, offset: 32)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1349, file: !854, line: 200, baseType: !887, size: 64, offset: 64)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1334, file: !854, line: 234, baseType: !1343, size: 64, offset: 256)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1328, file: !854, line: 197, baseType: !731, size: 64, offset: 256)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !867, file: !854, line: 319, baseType: !738, size: 256)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !867, file: !854, line: 320, baseType: !757, size: 192)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !678, file: !133, line: 3384, baseType: !1359, size: 1472)
!1359 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !133, line: 3114, size: 1472, elements: !1360)
!1360 = !{!1361, !1382, !1383, !1384, !1385}
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1359, file: !133, line: 3115, baseType: !1362, size: 1216)
!1362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !133, line: 2984, size: 1216, elements: !1363)
!1363 = !{!1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1362, file: !133, line: 2985, baseType: !847, size: 960)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1362, file: !133, line: 2986, baseType: !675, size: 64, offset: 960)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1362, file: !133, line: 2987, baseType: !675, size: 64, offset: 1024)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1362, file: !133, line: 2988, baseType: !675, size: 64, offset: 1088)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1362, file: !133, line: 2991, baseType: !5, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1362, file: !133, line: 2992, baseType: !5, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1362, file: !133, line: 2993, baseType: !5, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1362, file: !133, line: 2994, baseType: !5, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1362, file: !133, line: 2995, baseType: !5, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1362, file: !133, line: 2996, baseType: !5, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1362, file: !133, line: 2998, baseType: !5, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1362, file: !133, line: 3000, baseType: !5, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1362, file: !133, line: 3002, baseType: !5, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1362, file: !133, line: 3003, baseType: !5, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1362, file: !133, line: 3004, baseType: !5, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1362, file: !133, line: 3005, baseType: !5, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1362, file: !133, line: 3007, baseType: !5, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1362, file: !133, line: 3010, baseType: !5, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1359, file: !133, line: 3117, baseType: !675, size: 64, offset: 1216)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1359, file: !133, line: 3119, baseType: !675, size: 64, offset: 1280)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1359, file: !133, line: 3121, baseType: !675, size: 64, offset: 1344)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1359, file: !133, line: 3123, baseType: !675, size: 64, offset: 1408)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !678, file: !133, line: 3385, baseType: !1387, size: 1088)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !133, line: 2874, size: 1088, elements: !1388)
!1388 = !{!1389, !1390, !1391}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1387, file: !133, line: 2875, baseType: !847, size: 960)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1387, file: !133, line: 2876, baseType: !851, size: 64, offset: 960)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1387, file: !133, line: 2877, baseType: !1392, size: 64, offset: 1024)
!1392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1393, size: 64)
!1393 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1394, line: 172, size: 128, elements: !1395)
!1394 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1395 = !{!1396, !1397, !1398, !1399, !1400, !1401, !1402}
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1393, file: !1394, line: 174, baseType: !5, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1393, file: !1394, line: 178, baseType: !5, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1393, file: !1394, line: 183, baseType: !5, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1393, file: !1394, line: 187, baseType: !5, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1393, file: !1394, line: 192, baseType: !5, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1393, file: !1394, line: 195, baseType: !5, size: 32, offset: 32)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1393, file: !1394, line: 199, baseType: !675, size: 64, offset: 64)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !678, file: !133, line: 3386, baseType: !1362, size: 1216)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !678, file: !133, line: 3387, baseType: !1405, size: 1280)
!1405 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !133, line: 3093, size: 1280, elements: !1406)
!1406 = !{!1407, !1408}
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1405, file: !133, line: 3094, baseType: !1362, size: 1216)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1405, file: !133, line: 3095, baseType: !1392, size: 64, offset: 1216)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !678, file: !133, line: 3388, baseType: !1410, size: 1216)
!1410 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !133, line: 2824, size: 1216, elements: !1411)
!1411 = !{!1412, !1413, !1414, !1415, !1416, !1417}
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1410, file: !133, line: 2825, baseType: !809, size: 896)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1410, file: !133, line: 2827, baseType: !675, size: 64, offset: 896)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1410, file: !133, line: 2828, baseType: !675, size: 64, offset: 960)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1410, file: !133, line: 2829, baseType: !675, size: 64, offset: 1024)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1410, file: !133, line: 2830, baseType: !675, size: 64, offset: 1088)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1410, file: !133, line: 2831, baseType: !675, size: 64, offset: 1152)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !678, file: !133, line: 3389, baseType: !1419, size: 1024)
!1419 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !133, line: 2850, size: 1024, elements: !1420)
!1420 = !{!1421, !1422, !1423}
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1419, file: !133, line: 2851, baseType: !847, size: 960)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1419, file: !133, line: 2852, baseType: !644, size: 32, offset: 960)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1419, file: !133, line: 2853, baseType: !644, size: 32, offset: 992)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !678, file: !133, line: 3390, baseType: !1425, size: 1024)
!1425 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !133, line: 2857, size: 1024, elements: !1426)
!1426 = !{!1427, !1428}
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1425, file: !133, line: 2858, baseType: !847, size: 960)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1425, file: !133, line: 2859, baseType: !1392, size: 64, offset: 960)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !678, file: !133, line: 3391, baseType: !1430, size: 960)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !133, line: 2862, size: 960, elements: !1431)
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1430, file: !133, line: 2863, baseType: !847, size: 960)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !678, file: !133, line: 3392, baseType: !1434, size: 1472)
!1434 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !133, line: 3304, size: 1472, elements: !1435)
!1435 = !{!1436}
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1434, file: !133, line: 3305, baseType: !1359, size: 1472)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !678, file: !133, line: 3393, baseType: !1438, size: 1792)
!1438 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !133, line: 3248, size: 1792, elements: !1439)
!1439 = !{!1440, !1441, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679}
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1438, file: !133, line: 3249, baseType: !1359, size: 1472)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1438, file: !133, line: 3251, baseType: !1442, size: 64, offset: 1472)
!1442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1443, size: 64)
!1443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1444, line: 463, size: 1152, elements: !1445)
!1444 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1445 = !{!1446, !1449, !1480, !1481, !1595, !1603, !1604, !1605, !1606, !1607, !1608, !1632, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658}
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1443, file: !1444, line: 464, baseType: !1447, size: 64)
!1447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1448, size: 64)
!1448 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1444, line: 464, flags: DIFlagFwdDecl)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1443, file: !1444, line: 467, baseType: !1450, size: 64, offset: 64)
!1450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1451, size: 64)
!1451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !341, line: 374, size: 640, elements: !1452)
!1452 = !{!1453, !1455, !1456, !1469, !1470, !1471, !1472, !1473, !1474, !1476, !1478, !1479}
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1451, file: !341, line: 377, baseType: !1454, size: 64)
!1454 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !676, line: 111, baseType: !966)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1451, file: !341, line: 378, baseType: !1454, size: 64, offset: 64)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1451, file: !341, line: 381, baseType: !1457, size: 64, offset: 128)
!1457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1458, size: 64)
!1458 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !341, line: 282, baseType: !1459)
!1459 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !341, line: 282, size: 128, elements: !1460)
!1460 = !{!1461}
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1459, file: !341, line: 282, baseType: !1462, size: 128)
!1462 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !341, line: 281, baseType: !1463)
!1463 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !341, line: 281, size: 128, elements: !1464)
!1464 = !{!1465, !1466, !1467}
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1463, file: !341, line: 281, baseType: !5, size: 32)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1463, file: !341, line: 281, baseType: !5, size: 32, offset: 32)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1463, file: !341, line: 281, baseType: !1468, size: 64, offset: 64)
!1468 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1454, size: 64, elements: !774)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1451, file: !341, line: 384, baseType: !644, size: 32, offset: 192)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1451, file: !341, line: 387, baseType: !644, size: 32, offset: 224)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1451, file: !341, line: 390, baseType: !644, size: 32, offset: 256)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1451, file: !341, line: 394, baseType: !1457, size: 64, offset: 320)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1451, file: !341, line: 396, baseType: !340, size: 32, offset: 384)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1451, file: !341, line: 399, baseType: !1475, size: 64, offset: 416)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !346, size: 64, elements: !921)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1451, file: !341, line: 402, baseType: !1477, size: 64, offset: 480)
!1477 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 64, elements: !921)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1451, file: !341, line: 406, baseType: !644, size: 32, offset: 544)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1451, file: !341, line: 409, baseType: !644, size: 32, offset: 576)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1443, file: !1444, line: 470, baseType: !993, size: 64, offset: 128)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1443, file: !1444, line: 473, baseType: !1482, size: 64, offset: 192)
!1482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1483, size: 64)
!1483 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1394, line: 39, size: 1152, elements: !1484)
!1484 = !{!1485, !1534, !1547, !1559, !1560, !1572, !1573, !1577, !1578, !1579, !1580, !1581}
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1483, file: !1394, line: 41, baseType: !1486, size: 64)
!1486 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !618, line: 144, baseType: !1487)
!1487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1488, size: 64)
!1488 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !618, line: 100, size: 896, elements: !1489)
!1489 = !{!1490, !1498, !1503, !1508, !1510, !1511, !1512, !1513, !1514, !1515, !1520, !1522, !1523, !1528, !1533}
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1488, file: !618, line: 102, baseType: !1491, size: 64)
!1491 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !618, line: 52, baseType: !1492)
!1492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1493, size: 64)
!1493 = !DISubroutineType(types: !1494)
!1494 = !{!1495, !1496}
!1495 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !618, line: 47, baseType: !5)
!1496 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1497, size: 64)
!1497 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1488, file: !618, line: 105, baseType: !1499, size: 64, offset: 64)
!1499 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !618, line: 59, baseType: !1500)
!1500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1501, size: 64)
!1501 = !DISubroutineType(types: !1502)
!1502 = !{!644, !1496, !1496}
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1488, file: !618, line: 108, baseType: !1504, size: 64, offset: 128)
!1504 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !618, line: 63, baseType: !1505)
!1505 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1506, size: 64)
!1506 = !DISubroutineType(types: !1507)
!1507 = !{null, !649}
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1488, file: !618, line: 111, baseType: !1509, size: 64, offset: 192)
!1509 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !649, size: 64)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1488, file: !618, line: 114, baseType: !1147, size: 64, offset: 256)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1488, file: !618, line: 117, baseType: !1147, size: 64, offset: 320)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1488, file: !618, line: 120, baseType: !1147, size: 64, offset: 384)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1488, file: !618, line: 124, baseType: !5, size: 32, offset: 448)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1488, file: !618, line: 128, baseType: !5, size: 32, offset: 480)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1488, file: !618, line: 131, baseType: !1516, size: 64, offset: 512)
!1516 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !618, line: 75, baseType: !1517)
!1517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1518, size: 64)
!1518 = !DISubroutineType(types: !1519)
!1519 = !{!649, !1147, !1147}
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1488, file: !618, line: 132, baseType: !1521, size: 64, offset: 576)
!1521 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !618, line: 78, baseType: !1505)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1488, file: !618, line: 135, baseType: !649, size: 64, offset: 640)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1488, file: !618, line: 136, baseType: !1524, size: 64, offset: 704)
!1524 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !618, line: 82, baseType: !1525)
!1525 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1526, size: 64)
!1526 = !DISubroutineType(types: !1527)
!1527 = !{!649, !649, !1147, !1147}
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1488, file: !618, line: 137, baseType: !1529, size: 64, offset: 768)
!1529 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !618, line: 83, baseType: !1530)
!1530 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1531, size: 64)
!1531 = !DISubroutineType(types: !1532)
!1532 = !{null, !649, !649}
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1488, file: !618, line: 141, baseType: !5, size: 32, offset: 832)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1483, file: !1394, line: 48, baseType: !1535, size: 64, offset: 64)
!1535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1536, size: 64)
!1536 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !389, line: 35, baseType: !1537)
!1537 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !389, line: 35, size: 128, elements: !1538)
!1538 = !{!1539}
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1537, file: !389, line: 35, baseType: !1540, size: 128)
!1540 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !389, line: 33, baseType: !1541)
!1541 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !389, line: 33, size: 128, elements: !1542)
!1542 = !{!1543, !1544, !1545}
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1541, file: !389, line: 33, baseType: !5, size: 32)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1541, file: !389, line: 33, baseType: !5, size: 32, offset: 32)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1541, file: !389, line: 33, baseType: !1546, size: 64, offset: 64)
!1546 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1002, size: 64, elements: !774)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1483, file: !1394, line: 51, baseType: !1548, size: 64, offset: 128)
!1548 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1549, size: 64)
!1549 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !133, line: 183, baseType: !1550)
!1550 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !133, line: 183, size: 128, elements: !1551)
!1551 = !{!1552}
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1550, file: !133, line: 183, baseType: !1553, size: 128)
!1553 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !133, line: 182, baseType: !1554)
!1554 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !133, line: 182, size: 128, elements: !1555)
!1555 = !{!1556, !1557, !1558}
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1554, file: !133, line: 182, baseType: !5, size: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1554, file: !133, line: 182, baseType: !5, size: 32, offset: 32)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1554, file: !133, line: 182, baseType: !1055, size: 64, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1483, file: !1394, line: 54, baseType: !675, size: 64, offset: 192)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1483, file: !1394, line: 57, baseType: !1561, size: 128, offset: 256)
!1561 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1562, line: 31, size: 128, elements: !1563)
!1562 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1563 = !{!1564, !1565, !1566, !1567, !1568, !1569, !1570}
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1561, file: !1562, line: 35, baseType: !5, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1561, file: !1562, line: 39, baseType: !5, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1561, file: !1562, line: 42, baseType: !5, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1561, file: !1562, line: 46, baseType: !5, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1561, file: !1562, line: 50, baseType: !5, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1561, file: !1562, line: 53, baseType: !5, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1561, file: !1562, line: 56, baseType: !1571, size: 64, offset: 64)
!1571 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !676, line: 47, baseType: !905)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1483, file: !1394, line: 60, baseType: !1561, size: 128, offset: 384)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1483, file: !1394, line: 64, baseType: !1574, size: 64, offset: 512)
!1574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1575, size: 64)
!1575 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1576, line: 33, flags: DIFlagFwdDecl)
!1576 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1483, file: !1394, line: 67, baseType: !675, size: 64, offset: 576)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1483, file: !1394, line: 73, baseType: !1486, size: 64, offset: 640)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1483, file: !1394, line: 77, baseType: !1571, size: 64, offset: 704)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1483, file: !1394, line: 80, baseType: !5, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1483, file: !1394, line: 82, baseType: !1582, size: 320, offset: 832)
!1582 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !459, line: 62, size: 320, elements: !1583)
!1583 = !{!1584, !1590, !1591, !1592, !1593, !1594}
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1582, file: !459, line: 63, baseType: !1585, size: 64)
!1585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1586, size: 64)
!1586 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !459, line: 56, size: 128, elements: !1587)
!1587 = !{!1588, !1589}
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1586, file: !459, line: 57, baseType: !1585, size: 64)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1586, file: !459, line: 58, baseType: !773, size: 8, offset: 64)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1582, file: !459, line: 64, baseType: !5, size: 32, offset: 64)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1582, file: !459, line: 66, baseType: !5, size: 32, offset: 96)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1582, file: !459, line: 68, baseType: !793, size: 8, offset: 128)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1582, file: !459, line: 70, baseType: !1031, size: 64, offset: 192)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1582, file: !459, line: 71, baseType: !1038, size: 64, offset: 256)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1443, file: !1444, line: 476, baseType: !1596, size: 64, offset: 256)
!1596 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1597, size: 64)
!1597 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !328, line: 187, size: 256, elements: !1598)
!1598 = !{!1599, !1600, !1601, !1602}
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1597, file: !328, line: 189, baseType: !644, size: 32)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1597, file: !328, line: 192, baseType: !1232, size: 64, offset: 64)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1597, file: !328, line: 197, baseType: !1486, size: 64, offset: 128)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1597, file: !328, line: 200, baseType: !1217, size: 64, offset: 192)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1443, file: !1444, line: 479, baseType: !1486, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1443, file: !1444, line: 484, baseType: !675, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1443, file: !1444, line: 488, baseType: !675, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1443, file: !1444, line: 493, baseType: !675, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1443, file: !1444, line: 496, baseType: !675, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1443, file: !1444, line: 501, baseType: !1609, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1610, size: 64)
!1610 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !352, line: 2355, size: 576, elements: !1611)
!1611 = !{!1612, !1615, !1616, !1617, !1618, !1620, !1621, !1626, !1627, !1628, !1629, !1630, !1631}
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1610, file: !352, line: 2356, baseType: !1613, size: 64)
!1613 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1614, size: 64)
!1614 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !352, line: 2356, flags: DIFlagFwdDecl)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1610, file: !352, line: 2357, baseType: !877, size: 64, offset: 64)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1610, file: !352, line: 2358, baseType: !644, size: 32, offset: 128)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1610, file: !352, line: 2359, baseType: !644, size: 32, offset: 160)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1610, file: !352, line: 2360, baseType: !1619, size: 128, offset: 192)
!1619 = !DICompositeType(tag: DW_TAG_array_type, baseType: !644, size: 128, elements: !945)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1610, file: !352, line: 2364, baseType: !644, size: 32, offset: 320)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1610, file: !352, line: 2367, baseType: !1622, size: 128, offset: 384)
!1622 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !352, line: 2349, size: 128, elements: !1623)
!1623 = !{!1624, !1625}
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1622, file: !352, line: 2351, baseType: !851, size: 64)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1622, file: !352, line: 2352, baseType: !731, size: 64, offset: 64)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1610, file: !352, line: 2371, baseType: !351, size: 32, offset: 512)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1610, file: !352, line: 2374, baseType: !5, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1610, file: !352, line: 2377, baseType: !5, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1610, file: !352, line: 2381, baseType: !5, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1610, file: !352, line: 2392, baseType: !5, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1610, file: !352, line: 2396, baseType: !5, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1443, file: !1444, line: 504, baseType: !1633, size: 64, offset: 704)
!1633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1634, size: 64)
!1634 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1444, line: 504, flags: DIFlagFwdDecl)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1443, file: !1444, line: 507, baseType: !1486, size: 64, offset: 768)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1443, file: !1444, line: 510, baseType: !644, size: 32, offset: 832)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1443, file: !1444, line: 513, baseType: !644, size: 32, offset: 864)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1443, file: !1444, line: 516, baseType: !801, size: 32, offset: 896)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1443, file: !1444, line: 519, baseType: !801, size: 32, offset: 928)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1443, file: !1444, line: 522, baseType: !5, size: 32, offset: 960)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1443, file: !1444, line: 523, baseType: !5, size: 32, offset: 992)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1443, file: !1444, line: 528, baseType: !877, size: 64, offset: 1024)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1443, file: !1444, line: 535, baseType: !5, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1443, file: !1444, line: 539, baseType: !5, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1443, file: !1444, line: 543, baseType: !5, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1443, file: !1444, line: 546, baseType: !5, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1443, file: !1444, line: 550, baseType: !5, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1443, file: !1444, line: 554, baseType: !5, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1443, file: !1444, line: 559, baseType: !5, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1443, file: !1444, line: 562, baseType: !5, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1443, file: !1444, line: 571, baseType: !5, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1443, file: !1444, line: 573, baseType: !5, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1443, file: !1444, line: 574, baseType: !5, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1443, file: !1444, line: 581, baseType: !5, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1443, file: !1444, line: 585, baseType: !5, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1443, file: !1444, line: 588, baseType: !5, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1443, file: !1444, line: 592, baseType: !5, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1443, file: !1444, line: 598, baseType: !5, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1438, file: !133, line: 3254, baseType: !675, size: 64, offset: 1536)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1438, file: !133, line: 3257, baseType: !675, size: 64, offset: 1600)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1438, file: !133, line: 3258, baseType: !675, size: 64, offset: 1664)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1438, file: !133, line: 3264, baseType: !5, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1438, file: !133, line: 3265, baseType: !5, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1438, file: !133, line: 3267, baseType: !5, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1438, file: !133, line: 3268, baseType: !5, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1438, file: !133, line: 3269, baseType: !5, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1438, file: !133, line: 3271, baseType: !5, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1438, file: !133, line: 3272, baseType: !5, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1438, file: !133, line: 3273, baseType: !5, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1438, file: !133, line: 3274, baseType: !5, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1438, file: !133, line: 3275, baseType: !5, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1438, file: !133, line: 3276, baseType: !5, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1438, file: !133, line: 3277, baseType: !5, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1438, file: !133, line: 3279, baseType: !5, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1438, file: !133, line: 3280, baseType: !5, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1438, file: !133, line: 3281, baseType: !5, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1438, file: !133, line: 3282, baseType: !5, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1438, file: !133, line: 3283, baseType: !5, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1438, file: !133, line: 3284, baseType: !5, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !678, file: !133, line: 3394, baseType: !1681, size: 1344)
!1681 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !133, line: 2279, size: 1344, elements: !1682)
!1682 = !{!1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724}
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1681, file: !133, line: 2280, baseType: !714, size: 192)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1681, file: !133, line: 2281, baseType: !675, size: 64, offset: 192)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1681, file: !133, line: 2282, baseType: !675, size: 64, offset: 256)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1681, file: !133, line: 2283, baseType: !675, size: 64, offset: 320)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1681, file: !133, line: 2284, baseType: !675, size: 64, offset: 384)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1681, file: !133, line: 2285, baseType: !5, size: 32, offset: 448)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1681, file: !133, line: 2287, baseType: !5, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1681, file: !133, line: 2288, baseType: !5, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1681, file: !133, line: 2289, baseType: !5, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1681, file: !133, line: 2290, baseType: !5, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1681, file: !133, line: 2291, baseType: !5, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1681, file: !133, line: 2292, baseType: !5, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1681, file: !133, line: 2294, baseType: !5, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1681, file: !133, line: 2296, baseType: !5, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1681, file: !133, line: 2297, baseType: !5, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1681, file: !133, line: 2298, baseType: !5, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1681, file: !133, line: 2299, baseType: !5, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1681, file: !133, line: 2300, baseType: !5, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1681, file: !133, line: 2301, baseType: !5, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1681, file: !133, line: 2302, baseType: !5, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1681, file: !133, line: 2303, baseType: !5, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1681, file: !133, line: 2305, baseType: !5, size: 32, offset: 512)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1681, file: !133, line: 2306, baseType: !1311, size: 32, offset: 544)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1681, file: !133, line: 2307, baseType: !675, size: 64, offset: 576)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1681, file: !133, line: 2308, baseType: !675, size: 64, offset: 640)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1681, file: !133, line: 2314, baseType: !1709, size: 64, offset: 704)
!1709 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !133, line: 2309, size: 64, elements: !1710)
!1710 = !{!1711, !1712, !1713}
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1709, file: !133, line: 2310, baseType: !644, size: 32)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1709, file: !133, line: 2311, baseType: !877, size: 64)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1709, file: !133, line: 2312, baseType: !1714, size: 64)
!1714 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1715, size: 64)
!1715 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !133, line: 2277, flags: DIFlagFwdDecl)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1681, file: !133, line: 2315, baseType: !675, size: 64, offset: 768)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1681, file: !133, line: 2316, baseType: !675, size: 64, offset: 832)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1681, file: !133, line: 2317, baseType: !675, size: 64, offset: 896)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1681, file: !133, line: 2318, baseType: !675, size: 64, offset: 960)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1681, file: !133, line: 2319, baseType: !675, size: 64, offset: 1024)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1681, file: !133, line: 2320, baseType: !675, size: 64, offset: 1088)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1681, file: !133, line: 2321, baseType: !675, size: 64, offset: 1152)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1681, file: !133, line: 2322, baseType: !675, size: 64, offset: 1216)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1681, file: !133, line: 2324, baseType: !1725, size: 64, offset: 1280)
!1725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1726, size: 64)
!1726 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !133, line: 2324, flags: DIFlagFwdDecl)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !678, file: !133, line: 3395, baseType: !1728, size: 320)
!1728 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !133, line: 1469, size: 320, elements: !1729)
!1729 = !{!1730, !1731, !1732}
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1728, file: !133, line: 1470, baseType: !714, size: 192)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1728, file: !133, line: 1471, baseType: !675, size: 64, offset: 192)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1728, file: !133, line: 1472, baseType: !675, size: 64, offset: 256)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !678, file: !133, line: 3396, baseType: !1734, size: 320)
!1734 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !133, line: 1482, size: 320, elements: !1735)
!1735 = !{!1736, !1737, !1738}
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1734, file: !133, line: 1483, baseType: !714, size: 192)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1734, file: !133, line: 1484, baseType: !644, size: 32, offset: 192)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1734, file: !133, line: 1485, baseType: !1055, size: 64, offset: 256)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !678, file: !133, line: 3397, baseType: !1740, size: 384)
!1740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !133, line: 1829, size: 384, elements: !1741)
!1741 = !{!1742, !1743, !1744, !1745}
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1740, file: !133, line: 1830, baseType: !714, size: 192)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1740, file: !133, line: 1831, baseType: !801, size: 32, offset: 192)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1740, file: !133, line: 1832, baseType: !675, size: 64, offset: 256)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1740, file: !133, line: 1835, baseType: !1055, size: 64, offset: 320)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !678, file: !133, line: 3398, baseType: !1747, size: 704)
!1747 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !133, line: 1898, size: 704, elements: !1748)
!1748 = !{!1749, !1750, !1751, !1752, !1753, !1758}
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1747, file: !133, line: 1899, baseType: !714, size: 192)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1747, file: !133, line: 1902, baseType: !675, size: 64, offset: 192)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1747, file: !133, line: 1905, baseType: !1002, size: 64, offset: 256)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1747, file: !133, line: 1908, baseType: !5, size: 32, offset: 320)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1747, file: !133, line: 1911, baseType: !1754, size: 64, offset: 384)
!1754 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1755, size: 64)
!1755 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1394, line: 117, size: 128, elements: !1756)
!1756 = !{!1757}
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1755, file: !1394, line: 120, baseType: !1561, size: 128)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1747, file: !133, line: 1914, baseType: !1043, size: 256, offset: 448)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !678, file: !133, line: 3399, baseType: !1760, size: 704)
!1760 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !133, line: 2008, size: 704, elements: !1761)
!1761 = !{!1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772}
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1760, file: !133, line: 2009, baseType: !714, size: 192)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1760, file: !133, line: 2011, baseType: !5, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1760, file: !133, line: 2012, baseType: !5, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1760, file: !133, line: 2014, baseType: !801, size: 32, offset: 224)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1760, file: !133, line: 2016, baseType: !675, size: 64, offset: 256)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1760, file: !133, line: 2017, baseType: !1548, size: 64, offset: 320)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1760, file: !133, line: 2019, baseType: !675, size: 64, offset: 384)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1760, file: !133, line: 2020, baseType: !675, size: 64, offset: 448)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1760, file: !133, line: 2021, baseType: !675, size: 64, offset: 512)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1760, file: !133, line: 2022, baseType: !675, size: 64, offset: 576)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1760, file: !133, line: 2023, baseType: !675, size: 64, offset: 640)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !678, file: !133, line: 3400, baseType: !1774, size: 832)
!1774 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !133, line: 2430, size: 832, elements: !1775)
!1775 = !{!1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785}
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1774, file: !133, line: 2431, baseType: !714, size: 192)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1774, file: !133, line: 2433, baseType: !675, size: 64, offset: 192)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1774, file: !133, line: 2434, baseType: !675, size: 64, offset: 256)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1774, file: !133, line: 2435, baseType: !675, size: 64, offset: 320)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1774, file: !133, line: 2436, baseType: !675, size: 64, offset: 384)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1774, file: !133, line: 2437, baseType: !1548, size: 64, offset: 448)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1774, file: !133, line: 2438, baseType: !675, size: 64, offset: 512)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1774, file: !133, line: 2440, baseType: !675, size: 64, offset: 576)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1774, file: !133, line: 2441, baseType: !675, size: 64, offset: 640)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1774, file: !133, line: 2443, baseType: !1786, size: 128, offset: 704)
!1786 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !133, line: 182, baseType: !1787)
!1787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !133, line: 182, size: 128, elements: !1788)
!1788 = !{!1789}
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1787, file: !133, line: 182, baseType: !1553, size: 128)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !678, file: !133, line: 3401, baseType: !1791, size: 320)
!1791 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !133, line: 3327, size: 320, elements: !1792)
!1792 = !{!1793, !1794, !1801}
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1791, file: !133, line: 3329, baseType: !714, size: 192)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1791, file: !133, line: 3330, baseType: !1795, size: 64, offset: 192)
!1795 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1796, size: 64)
!1796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !133, line: 3320, size: 192, elements: !1797)
!1797 = !{!1798, !1799, !1800}
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1796, file: !133, line: 3322, baseType: !1795, size: 64)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1796, file: !133, line: 3323, baseType: !1795, size: 64, offset: 64)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1796, file: !133, line: 3324, baseType: !675, size: 64, offset: 128)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1791, file: !133, line: 3331, baseType: !1795, size: 64, offset: 256)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !678, file: !133, line: 3402, baseType: !1803, size: 256)
!1803 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !133, line: 1540, size: 256, elements: !1804)
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1803, file: !133, line: 1541, baseType: !714, size: 192)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1803, file: !133, line: 1542, baseType: !1807, size: 64, offset: 192)
!1807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1808, size: 64)
!1808 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !133, line: 1538, baseType: !1809)
!1809 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !133, line: 1538, size: 192, elements: !1810)
!1810 = !{!1811}
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1809, file: !133, line: 1538, baseType: !1812, size: 192)
!1812 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !133, line: 1537, baseType: !1813)
!1813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !133, line: 1537, size: 192, elements: !1814)
!1814 = !{!1815, !1816, !1817}
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1813, file: !133, line: 1537, baseType: !5, size: 32)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1813, file: !133, line: 1537, baseType: !5, size: 32, offset: 32)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1813, file: !133, line: 1537, baseType: !1818, size: 128, offset: 64)
!1818 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1819, size: 128, elements: !774)
!1819 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !133, line: 1535, baseType: !1820)
!1820 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !133, line: 1532, size: 128, elements: !1821)
!1821 = !{!1822, !1823}
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1820, file: !133, line: 1533, baseType: !675, size: 64)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1820, file: !133, line: 1534, baseType: !675, size: 64, offset: 64)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !678, file: !133, line: 3403, baseType: !1825, size: 512)
!1825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !133, line: 1938, size: 512, elements: !1826)
!1826 = !{!1827, !1828, !1829, !1830, !1836, !1837, !1838}
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1825, file: !133, line: 1939, baseType: !714, size: 192)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1825, file: !133, line: 1940, baseType: !801, size: 32, offset: 192)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1825, file: !133, line: 1941, baseType: !356, size: 32, offset: 224)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1825, file: !133, line: 1946, baseType: !1831, size: 32, offset: 256)
!1831 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !133, line: 1942, size: 32, elements: !1832)
!1832 = !{!1833, !1834, !1835}
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1831, file: !133, line: 1943, baseType: !374, size: 32)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1831, file: !133, line: 1944, baseType: !381, size: 32)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1831, file: !133, line: 1945, baseType: !132, size: 32)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1825, file: !133, line: 1950, baseType: !992, size: 64, offset: 320)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1825, file: !133, line: 1951, baseType: !992, size: 64, offset: 384)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1825, file: !133, line: 1953, baseType: !1055, size: 64, offset: 448)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !678, file: !133, line: 3404, baseType: !1840, size: 1664)
!1840 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !133, line: 3337, size: 1664, elements: !1841)
!1841 = !{!1842, !1843}
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1840, file: !133, line: 3338, baseType: !714, size: 192)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1840, file: !133, line: 3341, baseType: !1844, size: 1472, offset: 192)
!1844 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1845, line: 410, size: 1472, elements: !1846)
!1845 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1846 = !{!1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010}
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1844, file: !1845, line: 412, baseType: !644, size: 32)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1844, file: !1845, line: 413, baseType: !644, size: 32, offset: 32)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1844, file: !1845, line: 414, baseType: !644, size: 32, offset: 64)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1844, file: !1845, line: 415, baseType: !644, size: 32, offset: 96)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1844, file: !1845, line: 416, baseType: !644, size: 32, offset: 128)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1844, file: !1845, line: 417, baseType: !644, size: 32, offset: 160)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1844, file: !1845, line: 418, baseType: !793, size: 8, offset: 192)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1844, file: !1845, line: 419, baseType: !793, size: 8, offset: 200)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1844, file: !1845, line: 420, baseType: !1856, size: 8, offset: 208)
!1856 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1844, file: !1845, line: 421, baseType: !1856, size: 8, offset: 216)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1844, file: !1845, line: 422, baseType: !1856, size: 8, offset: 224)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1844, file: !1845, line: 423, baseType: !1856, size: 8, offset: 232)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1844, file: !1845, line: 424, baseType: !1856, size: 8, offset: 240)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1844, file: !1845, line: 425, baseType: !1856, size: 8, offset: 248)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1844, file: !1845, line: 426, baseType: !1856, size: 8, offset: 256)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1844, file: !1845, line: 427, baseType: !1856, size: 8, offset: 264)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1844, file: !1845, line: 428, baseType: !1856, size: 8, offset: 272)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1844, file: !1845, line: 429, baseType: !1856, size: 8, offset: 280)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1844, file: !1845, line: 430, baseType: !1856, size: 8, offset: 288)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1844, file: !1845, line: 431, baseType: !1856, size: 8, offset: 296)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1844, file: !1845, line: 432, baseType: !1856, size: 8, offset: 304)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1844, file: !1845, line: 433, baseType: !1856, size: 8, offset: 312)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1844, file: !1845, line: 434, baseType: !1856, size: 8, offset: 320)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1844, file: !1845, line: 435, baseType: !1856, size: 8, offset: 328)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1844, file: !1845, line: 436, baseType: !1856, size: 8, offset: 336)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1844, file: !1845, line: 437, baseType: !1856, size: 8, offset: 344)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1844, file: !1845, line: 438, baseType: !1856, size: 8, offset: 352)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1844, file: !1845, line: 439, baseType: !1856, size: 8, offset: 360)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1844, file: !1845, line: 440, baseType: !1856, size: 8, offset: 368)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1844, file: !1845, line: 441, baseType: !1856, size: 8, offset: 376)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1844, file: !1845, line: 442, baseType: !1856, size: 8, offset: 384)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1844, file: !1845, line: 443, baseType: !1856, size: 8, offset: 392)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1844, file: !1845, line: 444, baseType: !1856, size: 8, offset: 400)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1844, file: !1845, line: 445, baseType: !1856, size: 8, offset: 408)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1844, file: !1845, line: 446, baseType: !1856, size: 8, offset: 416)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1844, file: !1845, line: 447, baseType: !1856, size: 8, offset: 424)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1844, file: !1845, line: 448, baseType: !1856, size: 8, offset: 432)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1844, file: !1845, line: 449, baseType: !1856, size: 8, offset: 440)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1844, file: !1845, line: 450, baseType: !1856, size: 8, offset: 448)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1844, file: !1845, line: 451, baseType: !1856, size: 8, offset: 456)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1844, file: !1845, line: 452, baseType: !1856, size: 8, offset: 464)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1844, file: !1845, line: 453, baseType: !1856, size: 8, offset: 472)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1844, file: !1845, line: 454, baseType: !1856, size: 8, offset: 480)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1844, file: !1845, line: 455, baseType: !1856, size: 8, offset: 488)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1844, file: !1845, line: 456, baseType: !1856, size: 8, offset: 496)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1844, file: !1845, line: 457, baseType: !1856, size: 8, offset: 504)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1844, file: !1845, line: 458, baseType: !1856, size: 8, offset: 512)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1844, file: !1845, line: 459, baseType: !1856, size: 8, offset: 520)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1844, file: !1845, line: 460, baseType: !1856, size: 8, offset: 528)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1844, file: !1845, line: 461, baseType: !1856, size: 8, offset: 536)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1844, file: !1845, line: 462, baseType: !1856, size: 8, offset: 544)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1844, file: !1845, line: 463, baseType: !1856, size: 8, offset: 552)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1844, file: !1845, line: 464, baseType: !1856, size: 8, offset: 560)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1844, file: !1845, line: 465, baseType: !1856, size: 8, offset: 568)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1844, file: !1845, line: 466, baseType: !1856, size: 8, offset: 576)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1844, file: !1845, line: 467, baseType: !1856, size: 8, offset: 584)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1844, file: !1845, line: 468, baseType: !1856, size: 8, offset: 592)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1844, file: !1845, line: 469, baseType: !1856, size: 8, offset: 600)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1844, file: !1845, line: 470, baseType: !1856, size: 8, offset: 608)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1844, file: !1845, line: 471, baseType: !1856, size: 8, offset: 616)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1844, file: !1845, line: 472, baseType: !1856, size: 8, offset: 624)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1844, file: !1845, line: 473, baseType: !1856, size: 8, offset: 632)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1844, file: !1845, line: 474, baseType: !1856, size: 8, offset: 640)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1844, file: !1845, line: 475, baseType: !1856, size: 8, offset: 648)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1844, file: !1845, line: 476, baseType: !1856, size: 8, offset: 656)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1844, file: !1845, line: 477, baseType: !1856, size: 8, offset: 664)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1844, file: !1845, line: 478, baseType: !1856, size: 8, offset: 672)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1844, file: !1845, line: 479, baseType: !1856, size: 8, offset: 680)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1844, file: !1845, line: 480, baseType: !1856, size: 8, offset: 688)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1844, file: !1845, line: 481, baseType: !1856, size: 8, offset: 696)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1844, file: !1845, line: 482, baseType: !1856, size: 8, offset: 704)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1844, file: !1845, line: 483, baseType: !1856, size: 8, offset: 712)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1844, file: !1845, line: 484, baseType: !1856, size: 8, offset: 720)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1844, file: !1845, line: 485, baseType: !1856, size: 8, offset: 728)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1844, file: !1845, line: 486, baseType: !1856, size: 8, offset: 736)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1844, file: !1845, line: 487, baseType: !1856, size: 8, offset: 744)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1844, file: !1845, line: 488, baseType: !1856, size: 8, offset: 752)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1844, file: !1845, line: 489, baseType: !1856, size: 8, offset: 760)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1844, file: !1845, line: 490, baseType: !1856, size: 8, offset: 768)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1844, file: !1845, line: 491, baseType: !1856, size: 8, offset: 776)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1844, file: !1845, line: 492, baseType: !1856, size: 8, offset: 784)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1844, file: !1845, line: 493, baseType: !1856, size: 8, offset: 792)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1844, file: !1845, line: 494, baseType: !1856, size: 8, offset: 800)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1844, file: !1845, line: 495, baseType: !1856, size: 8, offset: 808)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1844, file: !1845, line: 496, baseType: !1856, size: 8, offset: 816)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1844, file: !1845, line: 497, baseType: !1856, size: 8, offset: 824)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1844, file: !1845, line: 498, baseType: !1856, size: 8, offset: 832)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1844, file: !1845, line: 499, baseType: !1856, size: 8, offset: 840)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1844, file: !1845, line: 500, baseType: !1856, size: 8, offset: 848)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1844, file: !1845, line: 501, baseType: !1856, size: 8, offset: 856)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1844, file: !1845, line: 502, baseType: !1856, size: 8, offset: 864)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1844, file: !1845, line: 503, baseType: !1856, size: 8, offset: 872)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1844, file: !1845, line: 504, baseType: !1856, size: 8, offset: 880)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1844, file: !1845, line: 505, baseType: !1856, size: 8, offset: 888)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1844, file: !1845, line: 506, baseType: !1856, size: 8, offset: 896)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1844, file: !1845, line: 507, baseType: !1856, size: 8, offset: 904)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1844, file: !1845, line: 508, baseType: !1856, size: 8, offset: 912)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1844, file: !1845, line: 509, baseType: !1856, size: 8, offset: 920)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1844, file: !1845, line: 510, baseType: !1856, size: 8, offset: 928)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1844, file: !1845, line: 511, baseType: !1856, size: 8, offset: 936)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1844, file: !1845, line: 512, baseType: !1856, size: 8, offset: 944)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1844, file: !1845, line: 513, baseType: !1856, size: 8, offset: 952)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1844, file: !1845, line: 514, baseType: !1856, size: 8, offset: 960)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1844, file: !1845, line: 515, baseType: !1856, size: 8, offset: 968)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1844, file: !1845, line: 516, baseType: !1856, size: 8, offset: 976)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1844, file: !1845, line: 517, baseType: !1856, size: 8, offset: 984)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1844, file: !1845, line: 518, baseType: !1856, size: 8, offset: 992)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1844, file: !1845, line: 519, baseType: !1856, size: 8, offset: 1000)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1844, file: !1845, line: 520, baseType: !1856, size: 8, offset: 1008)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1844, file: !1845, line: 521, baseType: !1856, size: 8, offset: 1016)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1844, file: !1845, line: 522, baseType: !1856, size: 8, offset: 1024)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1844, file: !1845, line: 523, baseType: !1856, size: 8, offset: 1032)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1844, file: !1845, line: 524, baseType: !1856, size: 8, offset: 1040)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1844, file: !1845, line: 525, baseType: !1856, size: 8, offset: 1048)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1844, file: !1845, line: 526, baseType: !1856, size: 8, offset: 1056)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1844, file: !1845, line: 527, baseType: !1856, size: 8, offset: 1064)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1844, file: !1845, line: 528, baseType: !1856, size: 8, offset: 1072)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1844, file: !1845, line: 529, baseType: !1856, size: 8, offset: 1080)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1844, file: !1845, line: 530, baseType: !1856, size: 8, offset: 1088)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1844, file: !1845, line: 531, baseType: !1856, size: 8, offset: 1096)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1844, file: !1845, line: 532, baseType: !1856, size: 8, offset: 1104)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1844, file: !1845, line: 533, baseType: !1856, size: 8, offset: 1112)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1844, file: !1845, line: 534, baseType: !1856, size: 8, offset: 1120)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1844, file: !1845, line: 535, baseType: !1856, size: 8, offset: 1128)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1844, file: !1845, line: 536, baseType: !1856, size: 8, offset: 1136)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1844, file: !1845, line: 537, baseType: !1856, size: 8, offset: 1144)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1844, file: !1845, line: 538, baseType: !1856, size: 8, offset: 1152)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1844, file: !1845, line: 539, baseType: !1856, size: 8, offset: 1160)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1844, file: !1845, line: 540, baseType: !1856, size: 8, offset: 1168)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1844, file: !1845, line: 541, baseType: !1856, size: 8, offset: 1176)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1844, file: !1845, line: 542, baseType: !1856, size: 8, offset: 1184)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1844, file: !1845, line: 543, baseType: !1856, size: 8, offset: 1192)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1844, file: !1845, line: 544, baseType: !1856, size: 8, offset: 1200)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1844, file: !1845, line: 545, baseType: !1856, size: 8, offset: 1208)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1844, file: !1845, line: 546, baseType: !1856, size: 8, offset: 1216)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1844, file: !1845, line: 547, baseType: !1856, size: 8, offset: 1224)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1844, file: !1845, line: 548, baseType: !1856, size: 8, offset: 1232)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1844, file: !1845, line: 549, baseType: !1856, size: 8, offset: 1240)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1844, file: !1845, line: 550, baseType: !1856, size: 8, offset: 1248)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1844, file: !1845, line: 551, baseType: !1856, size: 8, offset: 1256)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1844, file: !1845, line: 552, baseType: !1856, size: 8, offset: 1264)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1844, file: !1845, line: 553, baseType: !1856, size: 8, offset: 1272)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1844, file: !1845, line: 554, baseType: !1856, size: 8, offset: 1280)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1844, file: !1845, line: 555, baseType: !1856, size: 8, offset: 1288)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1844, file: !1845, line: 556, baseType: !1856, size: 8, offset: 1296)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1844, file: !1845, line: 557, baseType: !1856, size: 8, offset: 1304)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1844, file: !1845, line: 558, baseType: !1856, size: 8, offset: 1312)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1844, file: !1845, line: 559, baseType: !1856, size: 8, offset: 1320)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1844, file: !1845, line: 560, baseType: !1856, size: 8, offset: 1328)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1844, file: !1845, line: 561, baseType: !1856, size: 8, offset: 1336)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1844, file: !1845, line: 562, baseType: !1856, size: 8, offset: 1344)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1844, file: !1845, line: 563, baseType: !1856, size: 8, offset: 1352)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1844, file: !1845, line: 564, baseType: !1856, size: 8, offset: 1360)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1844, file: !1845, line: 565, baseType: !1856, size: 8, offset: 1368)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1844, file: !1845, line: 566, baseType: !1856, size: 8, offset: 1376)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1844, file: !1845, line: 567, baseType: !1856, size: 8, offset: 1384)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1844, file: !1845, line: 568, baseType: !1856, size: 8, offset: 1392)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1844, file: !1845, line: 569, baseType: !1856, size: 8, offset: 1400)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1844, file: !1845, line: 570, baseType: !1856, size: 8, offset: 1408)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1844, file: !1845, line: 571, baseType: !1856, size: 8, offset: 1416)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1844, file: !1845, line: 572, baseType: !1856, size: 8, offset: 1424)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1844, file: !1845, line: 573, baseType: !1856, size: 8, offset: 1432)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1844, file: !1845, line: 574, baseType: !1856, size: 8, offset: 1440)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !678, file: !133, line: 3405, baseType: !2012, size: 384)
!2012 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !133, line: 3352, size: 384, elements: !2013)
!2013 = !{!2014, !2015}
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2012, file: !133, line: 3353, baseType: !714, size: 192)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2012, file: !133, line: 3356, baseType: !2016, size: 192, offset: 192)
!2016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1845, line: 578, size: 192, elements: !2017)
!2017 = !{!2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028}
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2016, file: !1845, line: 580, baseType: !644, size: 32)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2016, file: !1845, line: 581, baseType: !644, size: 32, offset: 32)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2016, file: !1845, line: 582, baseType: !644, size: 32, offset: 64)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2016, file: !1845, line: 583, baseType: !644, size: 32, offset: 96)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2016, file: !1845, line: 584, baseType: !793, size: 8, offset: 128)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2016, file: !1845, line: 585, baseType: !793, size: 8, offset: 136)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2016, file: !1845, line: 586, baseType: !793, size: 8, offset: 144)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2016, file: !1845, line: 587, baseType: !793, size: 8, offset: 152)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2016, file: !1845, line: 588, baseType: !793, size: 8, offset: 160)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2016, file: !1845, line: 589, baseType: !793, size: 8, offset: 168)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2016, file: !1845, line: 590, baseType: !793, size: 8, offset: 176)
!2029 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_lattice", file: !1, line: 137, baseType: !2030)
!2030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2031, size: 64)
!2031 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lambda_lattice_s", file: !1, line: 125, size: 320, elements: !2032)
!2032 = !{!2033, !2036, !2037, !2038, !2039}
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2031, file: !1, line: 128, baseType: !2034, size: 64)
!2034 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_matrix", file: !637, line: 42, baseType: !2035)
!2035 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !642, size: 64)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "dimension", scope: !2031, file: !1, line: 130, baseType: !644, size: 32, offset: 64)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !2031, file: !1, line: 132, baseType: !642, size: 64, offset: 128)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "origin_invariants", scope: !2031, file: !1, line: 134, baseType: !2034, size: 64, offset: 192)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "invariants", scope: !2031, file: !1, line: 136, baseType: !644, size: 32, offset: 256)
!2040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2041, size: 64)
!2041 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1004)
!2042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2043, size: 64)
!2043 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !133, line: 184, baseType: !2044)
!2044 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !133, line: 184, size: 128, elements: !2045)
!2045 = !{!2046}
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2044, file: !133, line: 184, baseType: !1553, size: 128)
!2047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2048, size: 64)
!2048 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !2049, line: 32, baseType: !2050)
!2049 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !2049, line: 32, size: 96, elements: !2051)
!2051 = !{!2052}
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2050, file: !2049, line: 32, baseType: !2053, size: 96)
!2053 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !2049, line: 31, baseType: !2054)
!2054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !2049, line: 31, size: 96, elements: !2055)
!2055 = !{!2056, !2057, !2058}
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2054, file: !2049, line: 31, baseType: !5, size: 32)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2054, file: !2049, line: 31, baseType: !5, size: 32, offset: 32)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2054, file: !2049, line: 31, baseType: !2059, size: 32, offset: 64)
!2059 = !DICompositeType(tag: DW_TAG_array_type, baseType: !644, size: 32, elements: !774)
!2060 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2061, size: 64)
!2061 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_loop_heap", file: !1, line: 1466, baseType: !2062)
!2062 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_loop_heap", file: !1, line: 1466, size: 128, elements: !2063)
!2063 = !{!2064}
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2062, file: !1, line: 1466, baseType: !2065, size: 128)
!2065 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_loop_base", file: !1, line: 1465, baseType: !2066)
!2066 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_loop_base", file: !1, line: 1465, size: 128, elements: !2067)
!2067 = !{!2068, !2069, !2070}
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2066, file: !1, line: 1465, baseType: !5, size: 32)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2066, file: !1, line: 1465, baseType: !5, size: 32, offset: 32)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2066, file: !1, line: 1465, baseType: !2071, size: 64, offset: 64)
!2071 = !DICompositeType(tag: DW_TAG_array_type, baseType: !665, size: 64, elements: !774)
!2072 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !459, line: 30, baseType: !2073)
!2073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2074, size: 64)
!2074 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !133, line: 1893, baseType: !1043)
!2075 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2076, size: 64)
!2076 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !389, line: 34, baseType: !2077)
!2077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !389, line: 34, size: 128, elements: !2078)
!2078 = !{!2079}
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2077, file: !389, line: 34, baseType: !1540, size: 128)
!2080 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2081, size: 64)
!2081 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_source_location_heap", file: !1, line: 2352, baseType: !2082)
!2082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_source_location_heap", file: !1, line: 2352, size: 96, elements: !2083)
!2083 = !{!2084}
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2082, file: !1, line: 2352, baseType: !2085, size: 96)
!2085 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_source_location_base", file: !1, line: 2351, baseType: !2086)
!2086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_source_location_base", file: !1, line: 2351, size: 96, elements: !2087)
!2087 = !{!2088, !2089, !2090}
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2086, file: !1, line: 2351, baseType: !5, size: 32)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2086, file: !1, line: 2351, baseType: !5, size: 32, offset: 32)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2086, file: !1, line: 2351, baseType: !2091, size: 32, offset: 64)
!2091 = !DICompositeType(tag: DW_TAG_array_type, baseType: !803, size: 32, elements: !774)
!2092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2093, size: 64)
!2093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_map", file: !133, line: 5278, size: 192, elements: !2094)
!2094 = !{!2095, !2099, !2100}
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2093, file: !133, line: 5279, baseType: !2096, size: 64)
!2096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_map_base", file: !133, line: 5267, size: 64, elements: !2097)
!2097 = !{!2098}
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "from", scope: !2096, file: !133, line: 5268, baseType: !675, size: 64)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !2093, file: !133, line: 5280, baseType: !5, size: 32, offset: 64)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "to", scope: !2093, file: !133, line: 5281, baseType: !675, size: 64, offset: 128)
!2101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2092, size: 64)
!2102 = !DIDerivedType(tag: DW_TAG_typedef, name: "ddr_p", file: !2103, line: 331, baseType: !2104)
!2103 = !DIFile(filename: "./tree-data-ref.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2105, size: 64)
!2105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_dependence_relation", file: !2103, line: 282, size: 512, elements: !2106)
!2106 = !{!2107, !2158, !2159, !2160, !2189, !2190, !2196, !2197, !2198, !2199, !2200}
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2105, file: !2103, line: 285, baseType: !2108, size: 64)
!2108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2109, size: 64)
!2109 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_reference", file: !2103, line: 165, size: 896, elements: !2110)
!2110 = !{!2111, !2112, !2113, !2114, !2115, !2123, !2128, !2133}
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2109, file: !2103, line: 168, baseType: !1002, size: 64)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !2109, file: !2103, line: 171, baseType: !675, size: 64, offset: 64)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2109, file: !2103, line: 174, baseType: !649, size: 64, offset: 128)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "is_read", scope: !2109, file: !2103, line: 177, baseType: !793, size: 8, offset: 192)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "innermost", scope: !2109, file: !2103, line: 180, baseType: !2116, size: 320, offset: 256)
!2116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "innermost_loop_behavior", file: !2103, line: 51, size: 320, elements: !2117)
!2117 = !{!2118, !2119, !2120, !2121, !2122}
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "base_address", scope: !2116, file: !2103, line: 53, baseType: !675, size: 64)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2116, file: !2103, line: 54, baseType: !675, size: 64, offset: 64)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !2116, file: !2103, line: 55, baseType: !675, size: 64, offset: 128)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !2116, file: !2103, line: 56, baseType: !675, size: 64, offset: 192)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "aligned_to", scope: !2116, file: !2103, line: 60, baseType: !675, size: 64, offset: 256)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "indices", scope: !2109, file: !2103, line: 183, baseType: !2124, size: 128, offset: 576)
!2124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "indices", file: !2103, line: 78, size: 128, elements: !2125)
!2125 = !{!2126, !2127}
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "base_object", scope: !2124, file: !2103, line: 81, baseType: !675, size: 64)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "access_fns", scope: !2124, file: !2103, line: 84, baseType: !2042, size: 64, offset: 64)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2109, file: !2103, line: 186, baseType: !2129, size: 128, offset: 704)
!2129 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dr_alias", file: !2103, line: 87, size: 128, elements: !2130)
!2130 = !{!2131, !2132}
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2129, file: !2103, line: 91, baseType: !1754, size: 64)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "vops", scope: !2129, file: !2103, line: 96, baseType: !1571, size: 64, offset: 64)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "access_matrix", scope: !2109, file: !2103, line: 189, baseType: !2134, size: 64, offset: 832)
!2134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2135, size: 64)
!2135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "access_matrix", file: !2103, line: 127, size: 256, elements: !2136)
!2136 = !{!2137, !2143, !2144, !2145}
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2135, file: !2103, line: 129, baseType: !2138, size: 64)
!2138 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2139, size: 64)
!2139 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_heap", file: !328, line: 86, baseType: !2140)
!2140 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_heap", file: !328, line: 86, size: 128, elements: !2141)
!2141 = !{!2142}
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2140, file: !328, line: 86, baseType: !1237, size: 128)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "nb_induction_vars", scope: !2135, file: !2103, line: 130, baseType: !644, size: 32, offset: 64)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "parameters", scope: !2135, file: !2103, line: 131, baseType: !2042, size: 64, offset: 128)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "matrix", scope: !2135, file: !2103, line: 132, baseType: !2146, size: 64, offset: 192)
!2146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2147, size: 64)
!2147 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_gc", file: !637, line: 34, baseType: !2148)
!2148 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_gc", file: !637, line: 34, size: 128, elements: !2149)
!2149 = !{!2150}
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2148, file: !637, line: 34, baseType: !2151, size: 128)
!2151 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_base", file: !637, line: 32, baseType: !2152)
!2152 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_base", file: !637, line: 32, size: 128, elements: !2153)
!2153 = !{!2154, !2155, !2156}
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2152, file: !637, line: 32, baseType: !5, size: 32)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2152, file: !637, line: 32, baseType: !5, size: 32, offset: 32)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2152, file: !637, line: 32, baseType: !2157, size: 64, offset: 64)
!2157 = !DICompositeType(tag: DW_TAG_array_type, baseType: !642, size: 64, elements: !774)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !2105, file: !2103, line: 286, baseType: !2108, size: 64, offset: 64)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "are_dependent", scope: !2105, file: !2103, line: 299, baseType: !675, size: 64, offset: 128)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "subscripts", scope: !2105, file: !2103, line: 304, baseType: !2161, size: 64, offset: 192)
!2161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2162, size: 64)
!2162 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_heap", file: !2103, line: 272, baseType: !2163)
!2163 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_heap", file: !2103, line: 272, size: 128, elements: !2164)
!2164 = !{!2165}
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2163, file: !2103, line: 272, baseType: !2166, size: 128)
!2166 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_base", file: !2103, line: 271, baseType: !2167)
!2167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_base", file: !2103, line: 271, size: 128, elements: !2168)
!2168 = !{!2169, !2170, !2171}
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2167, file: !2103, line: 271, baseType: !5, size: 32)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2167, file: !2103, line: 271, baseType: !5, size: 32, offset: 32)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2167, file: !2103, line: 271, baseType: !2172, size: 64, offset: 64)
!2172 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2173, size: 64, elements: !774)
!2173 = !DIDerivedType(tag: DW_TAG_typedef, name: "subscript_p", file: !2103, line: 270, baseType: !2174)
!2174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2175, size: 64)
!2175 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "subscript", file: !2103, line: 252, size: 256, elements: !2176)
!2176 = !{!2177, !2186, !2187, !2188}
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_a", scope: !2175, file: !2103, line: 256, baseType: !2178, size: 64)
!2178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2179, size: 64)
!2179 = !DIDerivedType(tag: DW_TAG_typedef, name: "conflict_function", file: !2103, line: 243, baseType: !2180)
!2180 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2103, line: 239, size: 192, elements: !2181)
!2181 = !{!2182, !2183}
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !2180, file: !2103, line: 241, baseType: !5, size: 32)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "fns", scope: !2180, file: !2103, line: 242, baseType: !2184, size: 128, offset: 64)
!2184 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2185, size: 128, elements: !921)
!2185 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_fn", file: !2103, line: 237, baseType: !2042)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_b", scope: !2175, file: !2103, line: 257, baseType: !2178, size: 64, offset: 64)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "last_conflict", scope: !2175, file: !2103, line: 261, baseType: !675, size: 64, offset: 128)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "distance", scope: !2175, file: !2103, line: 267, baseType: !675, size: 64, offset: 192)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2105, file: !2103, line: 307, baseType: !2138, size: 64, offset: 256)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "dir_vects", scope: !2105, file: !2103, line: 310, baseType: !2191, size: 64, offset: 320)
!2191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2192, size: 64)
!2192 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_heap", file: !637, line: 33, baseType: !2193)
!2193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_heap", file: !637, line: 33, size: 128, elements: !2194)
!2194 = !{!2195}
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2193, file: !637, line: 33, baseType: !2151, size: 128)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "dist_vects", scope: !2105, file: !2103, line: 313, baseType: !2191, size: 64, offset: 384)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "inner_loop", scope: !2105, file: !2103, line: 317, baseType: !5, size: 32, offset: 448)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "reversed_p", scope: !2105, file: !2103, line: 320, baseType: !793, size: 8, offset: 480)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "affine_p", scope: !2105, file: !2103, line: 324, baseType: !793, size: 8, offset: 488)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "self_reference_p", scope: !2105, file: !2103, line: 328, baseType: !793, size: 8, offset: 496)
!2201 = !DIDerivedType(tag: DW_TAG_typedef, name: "data_reference_p", file: !2103, line: 207, baseType: !2108)
!2202 = !{i32 7, !"Dwarf Version", i32 4}
!2203 = !{i32 2, !"Debug Info Version", i32 3}
!2204 = !{i32 1, !"wchar_size", i32 4}
!2205 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2206 = distinct !DISubprogram(name: "lambda_body_vector_new", scope: !1, file: !1, line: 156, type: !2207, scopeLine: 157, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2207 = !DISubroutineType(types: !2208)
!2208 = !{!636, !644, !2209}
!2209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !933, size: 64)
!2210 = !{}
!2211 = !DILocalVariable(name: "size", arg: 1, scope: !2206, file: !1, line: 156, type: !644)
!2212 = !DILocation(line: 156, column: 29, scope: !2206)
!2213 = !DILocalVariable(name: "lambda_obstack", arg: 2, scope: !2206, file: !1, line: 156, type: !2209)
!2214 = !DILocation(line: 156, column: 52, scope: !2206)
!2215 = !DILocalVariable(name: "ret", scope: !2206, file: !1, line: 158, type: !636)
!2216 = !DILocation(line: 158, column: 22, scope: !2206)
!2217 = !DILocation(line: 160, column: 29, scope: !2206)
!2218 = !DILocation(line: 160, column: 9, scope: !2206)
!2219 = !DILocation(line: 160, column: 7, scope: !2206)
!2220 = !DILocation(line: 161, column: 47, scope: !2206)
!2221 = !DILocation(line: 161, column: 28, scope: !2206)
!2222 = !DILocation(line: 161, column: 3, scope: !2206)
!2223 = !DILocation(line: 161, column: 26, scope: !2206)
!2224 = !DILocation(line: 162, column: 20, scope: !2206)
!2225 = !DILocation(line: 162, column: 3, scope: !2206)
!2226 = !DILocation(line: 162, column: 18, scope: !2206)
!2227 = !DILocation(line: 163, column: 3, scope: !2206)
!2228 = !DILocation(line: 163, column: 25, scope: !2206)
!2229 = !DILocation(line: 164, column: 10, scope: !2206)
!2230 = !DILocation(line: 164, column: 3, scope: !2206)
!2231 = distinct !DISubprogram(name: "lambda_vector_new", scope: !637, file: !637, line: 240, type: !2232, scopeLine: 241, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2232 = !DISubroutineType(types: !2233)
!2233 = !{!642, !644}
!2234 = !DILocalVariable(name: "size", arg: 1, scope: !2231, file: !637, line: 240, type: !644)
!2235 = !DILocation(line: 240, column: 24, scope: !2231)
!2236 = !DILocation(line: 242, column: 10, scope: !2231)
!2237 = !DILocation(line: 242, column: 3, scope: !2231)
!2238 = distinct !DISubprogram(name: "lambda_body_vector_compute_new", scope: !1, file: !1, line: 171, type: !2239, scopeLine: 174, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2239 = !DISubroutineType(types: !2240)
!2240 = !{!636, !2241, !636, !2209}
!2241 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_trans_matrix", file: !637, line: 56, baseType: !2242)
!2242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2243, size: 64)
!2243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lambda_trans_matrix_s", file: !637, line: 50, size: 192, elements: !2244)
!2244 = !{!2245, !2246, !2247, !2248}
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "matrix", scope: !2243, file: !637, line: 52, baseType: !2034, size: 64)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "rowsize", scope: !2243, file: !637, line: 53, baseType: !644, size: 32, offset: 64)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "colsize", scope: !2243, file: !637, line: 54, baseType: !644, size: 32, offset: 96)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "denominator", scope: !2243, file: !637, line: 55, baseType: !644, size: 32, offset: 128)
!2249 = !DILocalVariable(name: "transform", arg: 1, scope: !2238, file: !1, line: 171, type: !2241)
!2250 = !DILocation(line: 171, column: 53, scope: !2238)
!2251 = !DILocalVariable(name: "vect", arg: 2, scope: !2238, file: !1, line: 172, type: !636)
!2252 = !DILocation(line: 172, column: 52, scope: !2238)
!2253 = !DILocalVariable(name: "lambda_obstack", arg: 3, scope: !2238, file: !1, line: 173, type: !2209)
!2254 = !DILocation(line: 173, column: 50, scope: !2238)
!2255 = !DILocalVariable(name: "temp", scope: !2238, file: !1, line: 175, type: !636)
!2256 = !DILocation(line: 175, column: 22, scope: !2238)
!2257 = !DILocalVariable(name: "depth", scope: !2238, file: !1, line: 176, type: !644)
!2258 = !DILocation(line: 176, column: 7, scope: !2238)
!2259 = !DILocation(line: 179, column: 3, scope: !2238)
!2260 = !DILocation(line: 181, column: 11, scope: !2238)
!2261 = !DILocation(line: 181, column: 9, scope: !2238)
!2262 = !DILocation(line: 183, column: 34, scope: !2238)
!2263 = !DILocation(line: 183, column: 41, scope: !2238)
!2264 = !DILocation(line: 183, column: 10, scope: !2238)
!2265 = !DILocation(line: 183, column: 8, scope: !2238)
!2266 = !DILocation(line: 185, column: 5, scope: !2238)
!2267 = !DILocation(line: 185, column: 30, scope: !2238)
!2268 = !DILocation(line: 185, column: 28, scope: !2238)
!2269 = !DILocation(line: 184, column: 3, scope: !2238)
!2270 = !DILocation(line: 184, column: 26, scope: !2238)
!2271 = !DILocation(line: 186, column: 30, scope: !2238)
!2272 = !DILocation(line: 186, column: 55, scope: !2238)
!2273 = !DILocation(line: 187, column: 9, scope: !2238)
!2274 = !DILocation(line: 187, column: 33, scope: !2238)
!2275 = !DILocation(line: 188, column: 9, scope: !2238)
!2276 = !DILocation(line: 186, column: 3, scope: !2238)
!2277 = !DILocation(line: 189, column: 21, scope: !2238)
!2278 = !DILocation(line: 189, column: 3, scope: !2238)
!2279 = !DILocation(line: 189, column: 19, scope: !2238)
!2280 = !DILocation(line: 190, column: 10, scope: !2238)
!2281 = !DILocation(line: 190, column: 3, scope: !2238)
!2282 = distinct !DISubprogram(name: "lambda_vector_matrix_mult", scope: !637, file: !637, line: 373, type: !2283, scopeLine: 375, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2283 = !DISubroutineType(types: !2284)
!2284 = !{null, !642, !644, !2034, !644, !642}
!2285 = !DILocalVariable(name: "vect", arg: 1, scope: !2282, file: !637, line: 373, type: !642)
!2286 = !DILocation(line: 373, column: 42, scope: !2282)
!2287 = !DILocalVariable(name: "m", arg: 2, scope: !2282, file: !637, line: 373, type: !644)
!2288 = !DILocation(line: 373, column: 52, scope: !2282)
!2289 = !DILocalVariable(name: "mat", arg: 3, scope: !2282, file: !637, line: 373, type: !2034)
!2290 = !DILocation(line: 373, column: 69, scope: !2282)
!2291 = !DILocalVariable(name: "n", arg: 4, scope: !2282, file: !637, line: 374, type: !644)
!2292 = !DILocation(line: 374, column: 11, scope: !2282)
!2293 = !DILocalVariable(name: "dest", arg: 5, scope: !2282, file: !637, line: 374, type: !642)
!2294 = !DILocation(line: 374, column: 28, scope: !2282)
!2295 = !DILocalVariable(name: "i", scope: !2282, file: !637, line: 376, type: !644)
!2296 = !DILocation(line: 376, column: 7, scope: !2282)
!2297 = !DILocalVariable(name: "j", scope: !2282, file: !637, line: 376, type: !644)
!2298 = !DILocation(line: 376, column: 10, scope: !2282)
!2299 = !DILocation(line: 377, column: 24, scope: !2282)
!2300 = !DILocation(line: 377, column: 30, scope: !2282)
!2301 = !DILocation(line: 377, column: 3, scope: !2282)
!2302 = !DILocation(line: 378, column: 10, scope: !2303)
!2303 = distinct !DILexicalBlock(scope: !2282, file: !637, line: 378, column: 3)
!2304 = !DILocation(line: 378, column: 8, scope: !2303)
!2305 = !DILocation(line: 378, column: 15, scope: !2306)
!2306 = distinct !DILexicalBlock(scope: !2303, file: !637, line: 378, column: 3)
!2307 = !DILocation(line: 378, column: 19, scope: !2306)
!2308 = !DILocation(line: 378, column: 17, scope: !2306)
!2309 = !DILocation(line: 378, column: 3, scope: !2303)
!2310 = !DILocation(line: 379, column: 12, scope: !2311)
!2311 = distinct !DILexicalBlock(scope: !2306, file: !637, line: 379, column: 5)
!2312 = !DILocation(line: 379, column: 10, scope: !2311)
!2313 = !DILocation(line: 379, column: 17, scope: !2314)
!2314 = distinct !DILexicalBlock(scope: !2311, file: !637, line: 379, column: 5)
!2315 = !DILocation(line: 379, column: 21, scope: !2314)
!2316 = !DILocation(line: 379, column: 19, scope: !2314)
!2317 = !DILocation(line: 379, column: 5, scope: !2311)
!2318 = !DILocation(line: 380, column: 18, scope: !2314)
!2319 = !DILocation(line: 380, column: 22, scope: !2314)
!2320 = !DILocation(line: 380, column: 25, scope: !2314)
!2321 = !DILocation(line: 380, column: 30, scope: !2314)
!2322 = !DILocation(line: 380, column: 35, scope: !2314)
!2323 = !DILocation(line: 380, column: 28, scope: !2314)
!2324 = !DILocation(line: 380, column: 7, scope: !2314)
!2325 = !DILocation(line: 380, column: 12, scope: !2314)
!2326 = !DILocation(line: 380, column: 15, scope: !2314)
!2327 = !DILocation(line: 379, column: 25, scope: !2314)
!2328 = !DILocation(line: 379, column: 5, scope: !2314)
!2329 = distinct !{!2329, !2317, !2330}
!2330 = !DILocation(line: 380, column: 36, scope: !2311)
!2331 = !DILocation(line: 378, column: 23, scope: !2306)
!2332 = !DILocation(line: 378, column: 3, scope: !2306)
!2333 = distinct !{!2333, !2309, !2334}
!2334 = !DILocation(line: 380, column: 36, scope: !2303)
!2335 = !DILocation(line: 381, column: 1, scope: !2282)
!2336 = distinct !DISubprogram(name: "print_lambda_body_vector", scope: !1, file: !1, line: 196, type: !2337, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2337 = !DISubroutineType(types: !2338)
!2338 = !{null, !2339, !636}
!2339 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2340, size: 64)
!2340 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2341, line: 7, baseType: !2342)
!2341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2342 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2343, line: 49, size: 1728, elements: !2344)
!2343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2344 = !{!2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2360, !2362, !2363, !2364, !2367, !2369, !2370, !2371, !2374, !2376, !2379, !2382, !2383, !2384, !2385, !2386}
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2342, file: !2343, line: 51, baseType: !644, size: 32)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2342, file: !2343, line: 54, baseType: !647, size: 64, offset: 64)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2342, file: !2343, line: 55, baseType: !647, size: 64, offset: 128)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2342, file: !2343, line: 56, baseType: !647, size: 64, offset: 192)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2342, file: !2343, line: 57, baseType: !647, size: 64, offset: 256)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2342, file: !2343, line: 58, baseType: !647, size: 64, offset: 320)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2342, file: !2343, line: 59, baseType: !647, size: 64, offset: 384)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2342, file: !2343, line: 60, baseType: !647, size: 64, offset: 448)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2342, file: !2343, line: 61, baseType: !647, size: 64, offset: 512)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2342, file: !2343, line: 64, baseType: !647, size: 64, offset: 576)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2342, file: !2343, line: 65, baseType: !647, size: 64, offset: 640)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2342, file: !2343, line: 66, baseType: !647, size: 64, offset: 704)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2342, file: !2343, line: 68, baseType: !2358, size: 64, offset: 768)
!2358 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2359, size: 64)
!2359 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2343, line: 36, flags: DIFlagFwdDecl)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2342, file: !2343, line: 70, baseType: !2361, size: 64, offset: 832)
!2361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2342, size: 64)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2342, file: !2343, line: 72, baseType: !644, size: 32, offset: 896)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2342, file: !2343, line: 73, baseType: !644, size: 32, offset: 928)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2342, file: !2343, line: 74, baseType: !2365, size: 64, offset: 960)
!2365 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2366, line: 152, baseType: !731)
!2366 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2342, file: !2343, line: 77, baseType: !2368, size: 16, offset: 1024)
!2368 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2342, file: !2343, line: 78, baseType: !1856, size: 8, offset: 1040)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2342, file: !2343, line: 79, baseType: !773, size: 8, offset: 1048)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2342, file: !2343, line: 81, baseType: !2372, size: 64, offset: 1088)
!2372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2373, size: 64)
!2373 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2343, line: 43, baseType: null)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2342, file: !2343, line: 89, baseType: !2375, size: 64, offset: 1152)
!2375 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2366, line: 153, baseType: !731)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2342, file: !2343, line: 91, baseType: !2377, size: 64, offset: 1216)
!2377 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2378, size: 64)
!2378 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2343, line: 37, flags: DIFlagFwdDecl)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2342, file: !2343, line: 92, baseType: !2380, size: 64, offset: 1280)
!2380 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2381, size: 64)
!2381 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2343, line: 38, flags: DIFlagFwdDecl)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2342, file: !2343, line: 93, baseType: !2361, size: 64, offset: 1344)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2342, file: !2343, line: 94, baseType: !649, size: 64, offset: 1408)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2342, file: !2343, line: 95, baseType: !1147, size: 64, offset: 1472)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2342, file: !2343, line: 96, baseType: !644, size: 32, offset: 1536)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2342, file: !2343, line: 98, baseType: !2387, size: 160, offset: 1568)
!2387 = !DICompositeType(tag: DW_TAG_array_type, baseType: !648, size: 160, elements: !2388)
!2388 = !{!2389}
!2389 = !DISubrange(count: 20)
!2390 = !DILocalVariable(name: "outfile", arg: 1, scope: !2336, file: !1, line: 196, type: !2339)
!2391 = !DILocation(line: 196, column: 34, scope: !2336)
!2392 = !DILocalVariable(name: "body", arg: 2, scope: !2336, file: !1, line: 196, type: !636)
!2393 = !DILocation(line: 196, column: 62, scope: !2336)
!2394 = !DILocation(line: 198, column: 24, scope: !2336)
!2395 = !DILocation(line: 198, column: 33, scope: !2336)
!2396 = !DILocation(line: 198, column: 58, scope: !2336)
!2397 = !DILocation(line: 198, column: 3, scope: !2336)
!2398 = !DILocation(line: 199, column: 1, scope: !2336)
!2399 = distinct !DISubprogram(name: "print_lambda_vector", scope: !637, file: !637, line: 414, type: !2400, scopeLine: 415, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2400 = !DISubroutineType(types: !2401)
!2401 = !{null, !2339, !642, !644}
!2402 = !DILocalVariable(name: "outfile", arg: 1, scope: !2399, file: !637, line: 414, type: !2339)
!2403 = !DILocation(line: 414, column: 29, scope: !2399)
!2404 = !DILocalVariable(name: "vector", arg: 2, scope: !2399, file: !637, line: 414, type: !642)
!2405 = !DILocation(line: 414, column: 52, scope: !2399)
!2406 = !DILocalVariable(name: "n", arg: 3, scope: !2399, file: !637, line: 414, type: !644)
!2407 = !DILocation(line: 414, column: 64, scope: !2399)
!2408 = !DILocalVariable(name: "i", scope: !2399, file: !637, line: 416, type: !644)
!2409 = !DILocation(line: 416, column: 7, scope: !2399)
!2410 = !DILocation(line: 418, column: 10, scope: !2411)
!2411 = distinct !DILexicalBlock(scope: !2399, file: !637, line: 418, column: 3)
!2412 = !DILocation(line: 418, column: 8, scope: !2411)
!2413 = !DILocation(line: 418, column: 15, scope: !2414)
!2414 = distinct !DILexicalBlock(scope: !2411, file: !637, line: 418, column: 3)
!2415 = !DILocation(line: 418, column: 19, scope: !2414)
!2416 = !DILocation(line: 418, column: 17, scope: !2414)
!2417 = !DILocation(line: 418, column: 3, scope: !2411)
!2418 = !DILocation(line: 419, column: 14, scope: !2414)
!2419 = !DILocation(line: 419, column: 31, scope: !2414)
!2420 = !DILocation(line: 419, column: 38, scope: !2414)
!2421 = !DILocation(line: 419, column: 5, scope: !2414)
!2422 = !DILocation(line: 418, column: 23, scope: !2414)
!2423 = !DILocation(line: 418, column: 3, scope: !2414)
!2424 = distinct !{!2424, !2417, !2425}
!2425 = !DILocation(line: 419, column: 40, scope: !2411)
!2426 = !DILocation(line: 420, column: 12, scope: !2399)
!2427 = !DILocation(line: 420, column: 3, scope: !2399)
!2428 = !DILocation(line: 421, column: 1, scope: !2399)
!2429 = distinct !DISubprogram(name: "lambda_linear_expression_new", scope: !1, file: !1, line: 229, type: !2430, scopeLine: 231, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2430 = !DISubroutineType(types: !2431)
!2431 = !{!650, !644, !644, !2209}
!2432 = !DILocalVariable(name: "dim", arg: 1, scope: !2429, file: !1, line: 229, type: !644)
!2433 = !DILocation(line: 229, column: 35, scope: !2429)
!2434 = !DILocalVariable(name: "invariants", arg: 2, scope: !2429, file: !1, line: 229, type: !644)
!2435 = !DILocation(line: 229, column: 44, scope: !2429)
!2436 = !DILocalVariable(name: "lambda_obstack", arg: 3, scope: !2429, file: !1, line: 230, type: !2209)
!2437 = !DILocation(line: 230, column: 48, scope: !2429)
!2438 = !DILocalVariable(name: "ret", scope: !2429, file: !1, line: 232, type: !650)
!2439 = !DILocation(line: 232, column: 28, scope: !2429)
!2440 = !DILocation(line: 234, column: 35, scope: !2429)
!2441 = !DILocation(line: 234, column: 9, scope: !2429)
!2442 = !DILocation(line: 234, column: 7, scope: !2429)
!2443 = !DILocation(line: 236, column: 47, scope: !2429)
!2444 = !DILocation(line: 236, column: 28, scope: !2429)
!2445 = !DILocation(line: 236, column: 3, scope: !2429)
!2446 = !DILocation(line: 236, column: 26, scope: !2429)
!2447 = !DILocation(line: 237, column: 3, scope: !2429)
!2448 = !DILocation(line: 237, column: 22, scope: !2429)
!2449 = !DILocation(line: 238, column: 57, scope: !2429)
!2450 = !DILocation(line: 238, column: 38, scope: !2429)
!2451 = !DILocation(line: 238, column: 3, scope: !2429)
!2452 = !DILocation(line: 238, column: 36, scope: !2429)
!2453 = !DILocation(line: 239, column: 3, scope: !2429)
!2454 = !DILocation(line: 239, column: 25, scope: !2429)
!2455 = !DILocation(line: 240, column: 3, scope: !2429)
!2456 = !DILocation(line: 240, column: 18, scope: !2429)
!2457 = !DILocation(line: 242, column: 10, scope: !2429)
!2458 = !DILocation(line: 242, column: 3, scope: !2429)
!2459 = distinct !DISubprogram(name: "print_lambda_linear_expression", scope: !1, file: !1, line: 282, type: !2460, scopeLine: 285, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2460 = !DISubroutineType(types: !2461)
!2461 = !{null, !2339, !650, !644, !644, !648}
!2462 = !DILocalVariable(name: "outfile", arg: 1, scope: !2459, file: !1, line: 282, type: !2339)
!2463 = !DILocation(line: 282, column: 40, scope: !2459)
!2464 = !DILocalVariable(name: "expr", arg: 2, scope: !2459, file: !1, line: 283, type: !650)
!2465 = !DILocation(line: 283, column: 30, scope: !2459)
!2466 = !DILocalVariable(name: "depth", arg: 3, scope: !2459, file: !1, line: 284, type: !644)
!2467 = !DILocation(line: 284, column: 9, scope: !2459)
!2468 = !DILocalVariable(name: "invariants", arg: 4, scope: !2459, file: !1, line: 284, type: !644)
!2469 = !DILocation(line: 284, column: 20, scope: !2459)
!2470 = !DILocalVariable(name: "start", arg: 5, scope: !2459, file: !1, line: 284, type: !648)
!2471 = !DILocation(line: 284, column: 37, scope: !2459)
!2472 = !DILocation(line: 286, column: 12, scope: !2459)
!2473 = !DILocation(line: 286, column: 3, scope: !2459)
!2474 = !DILocation(line: 287, column: 28, scope: !2459)
!2475 = !DILocation(line: 287, column: 37, scope: !2459)
!2476 = !DILocation(line: 287, column: 62, scope: !2459)
!2477 = !DILocation(line: 287, column: 69, scope: !2459)
!2478 = !DILocation(line: 287, column: 3, scope: !2459)
!2479 = !DILocation(line: 288, column: 12, scope: !2459)
!2480 = !DILocation(line: 288, column: 39, scope: !2459)
!2481 = !DILocation(line: 288, column: 3, scope: !2459)
!2482 = !DILocation(line: 289, column: 12, scope: !2459)
!2483 = !DILocation(line: 289, column: 3, scope: !2459)
!2484 = !DILocation(line: 290, column: 28, scope: !2459)
!2485 = !DILocation(line: 290, column: 37, scope: !2459)
!2486 = !DILocation(line: 291, column: 7, scope: !2459)
!2487 = !DILocation(line: 290, column: 3, scope: !2459)
!2488 = !DILocation(line: 292, column: 12, scope: !2459)
!2489 = !DILocation(line: 292, column: 44, scope: !2459)
!2490 = !DILocation(line: 292, column: 3, scope: !2459)
!2491 = !DILocation(line: 293, column: 1, scope: !2459)
!2492 = distinct !DISubprogram(name: "print_linear_expression", scope: !1, file: !1, line: 249, type: !2493, scopeLine: 251, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2493 = !DISubroutineType(types: !2494)
!2494 = !{null, !2339, !642, !644, !648}
!2495 = !DILocalVariable(name: "outfile", arg: 1, scope: !2492, file: !1, line: 249, type: !2339)
!2496 = !DILocation(line: 249, column: 33, scope: !2492)
!2497 = !DILocalVariable(name: "expr", arg: 2, scope: !2492, file: !1, line: 249, type: !642)
!2498 = !DILocation(line: 249, column: 56, scope: !2492)
!2499 = !DILocalVariable(name: "size", arg: 3, scope: !2492, file: !1, line: 249, type: !644)
!2500 = !DILocation(line: 249, column: 66, scope: !2492)
!2501 = !DILocalVariable(name: "start", arg: 4, scope: !2492, file: !1, line: 250, type: !648)
!2502 = !DILocation(line: 250, column: 10, scope: !2492)
!2503 = !DILocalVariable(name: "i", scope: !2492, file: !1, line: 252, type: !644)
!2504 = !DILocation(line: 252, column: 7, scope: !2492)
!2505 = !DILocalVariable(name: "first", scope: !2492, file: !1, line: 253, type: !793)
!2506 = !DILocation(line: 253, column: 8, scope: !2492)
!2507 = !DILocation(line: 254, column: 10, scope: !2508)
!2508 = distinct !DILexicalBlock(scope: !2492, file: !1, line: 254, column: 3)
!2509 = !DILocation(line: 254, column: 8, scope: !2508)
!2510 = !DILocation(line: 254, column: 15, scope: !2511)
!2511 = distinct !DILexicalBlock(scope: !2508, file: !1, line: 254, column: 3)
!2512 = !DILocation(line: 254, column: 19, scope: !2511)
!2513 = !DILocation(line: 254, column: 17, scope: !2511)
!2514 = !DILocation(line: 254, column: 3, scope: !2508)
!2515 = !DILocation(line: 256, column: 11, scope: !2516)
!2516 = distinct !DILexicalBlock(scope: !2517, file: !1, line: 256, column: 11)
!2517 = distinct !DILexicalBlock(scope: !2511, file: !1, line: 255, column: 5)
!2518 = !DILocation(line: 256, column: 16, scope: !2516)
!2519 = !DILocation(line: 256, column: 19, scope: !2516)
!2520 = !DILocation(line: 256, column: 11, scope: !2517)
!2521 = !DILocation(line: 258, column: 8, scope: !2522)
!2522 = distinct !DILexicalBlock(scope: !2523, file: !1, line: 258, column: 8)
!2523 = distinct !DILexicalBlock(scope: !2516, file: !1, line: 257, column: 2)
!2524 = !DILocation(line: 258, column: 8, scope: !2523)
!2525 = !DILocation(line: 260, column: 12, scope: !2526)
!2526 = distinct !DILexicalBlock(scope: !2527, file: !1, line: 260, column: 12)
!2527 = distinct !DILexicalBlock(scope: !2522, file: !1, line: 259, column: 6)
!2528 = !DILocation(line: 260, column: 17, scope: !2526)
!2529 = !DILocation(line: 260, column: 20, scope: !2526)
!2530 = !DILocation(line: 260, column: 12, scope: !2527)
!2531 = !DILocation(line: 261, column: 12, scope: !2526)
!2532 = !DILocation(line: 261, column: 3, scope: !2526)
!2533 = !DILocation(line: 262, column: 14, scope: !2527)
!2534 = !DILocation(line: 263, column: 6, scope: !2527)
!2535 = !DILocation(line: 264, column: 13, scope: !2536)
!2536 = distinct !DILexicalBlock(scope: !2522, file: !1, line: 264, column: 13)
!2537 = !DILocation(line: 264, column: 18, scope: !2536)
!2538 = !DILocation(line: 264, column: 21, scope: !2536)
!2539 = !DILocation(line: 264, column: 13, scope: !2522)
!2540 = !DILocation(line: 265, column: 15, scope: !2536)
!2541 = !DILocation(line: 265, column: 6, scope: !2536)
!2542 = !DILocation(line: 267, column: 15, scope: !2536)
!2543 = !DILocation(line: 267, column: 6, scope: !2536)
!2544 = !DILocation(line: 268, column: 13, scope: !2545)
!2545 = distinct !DILexicalBlock(scope: !2523, file: !1, line: 268, column: 8)
!2546 = !DILocation(line: 268, column: 18, scope: !2545)
!2547 = !DILocation(line: 268, column: 8, scope: !2545)
!2548 = !DILocation(line: 268, column: 22, scope: !2545)
!2549 = !DILocation(line: 268, column: 8, scope: !2523)
!2550 = !DILocation(line: 269, column: 15, scope: !2545)
!2551 = !DILocation(line: 269, column: 30, scope: !2545)
!2552 = !DILocation(line: 269, column: 38, scope: !2545)
!2553 = !DILocation(line: 269, column: 36, scope: !2545)
!2554 = !DILocation(line: 269, column: 6, scope: !2545)
!2555 = !DILocation(line: 271, column: 15, scope: !2545)
!2556 = !DILocation(line: 271, column: 37, scope: !2545)
!2557 = !DILocation(line: 271, column: 42, scope: !2545)
!2558 = !DILocation(line: 271, column: 32, scope: !2545)
!2559 = !DILocation(line: 271, column: 47, scope: !2545)
!2560 = !DILocation(line: 271, column: 55, scope: !2545)
!2561 = !DILocation(line: 271, column: 53, scope: !2545)
!2562 = !DILocation(line: 271, column: 6, scope: !2545)
!2563 = !DILocation(line: 272, column: 2, scope: !2523)
!2564 = !DILocation(line: 273, column: 5, scope: !2517)
!2565 = !DILocation(line: 254, column: 26, scope: !2511)
!2566 = !DILocation(line: 254, column: 3, scope: !2511)
!2567 = distinct !{!2567, !2514, !2568}
!2568 = !DILocation(line: 273, column: 5, scope: !2508)
!2569 = !DILocation(line: 274, column: 1, scope: !2492)
!2570 = distinct !DISubprogram(name: "print_lambda_loop", scope: !1, file: !1, line: 301, type: !2571, scopeLine: 303, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2571 = !DISubroutineType(types: !2572)
!2572 = !{null, !2339, !665, !644, !644, !648}
!2573 = !DILocalVariable(name: "outfile", arg: 1, scope: !2570, file: !1, line: 301, type: !2339)
!2574 = !DILocation(line: 301, column: 27, scope: !2570)
!2575 = !DILocalVariable(name: "loop", arg: 2, scope: !2570, file: !1, line: 301, type: !665)
!2576 = !DILocation(line: 301, column: 48, scope: !2570)
!2577 = !DILocalVariable(name: "depth", arg: 3, scope: !2570, file: !1, line: 301, type: !644)
!2578 = !DILocation(line: 301, column: 58, scope: !2570)
!2579 = !DILocalVariable(name: "invariants", arg: 4, scope: !2570, file: !1, line: 302, type: !644)
!2580 = !DILocation(line: 302, column: 10, scope: !2570)
!2581 = !DILocalVariable(name: "start", arg: 5, scope: !2570, file: !1, line: 302, type: !648)
!2582 = !DILocation(line: 302, column: 27, scope: !2570)
!2583 = !DILocalVariable(name: "step", scope: !2570, file: !1, line: 304, type: !644)
!2584 = !DILocation(line: 304, column: 7, scope: !2570)
!2585 = !DILocalVariable(name: "expr", scope: !2570, file: !1, line: 305, type: !650)
!2586 = !DILocation(line: 305, column: 28, scope: !2570)
!2587 = !DILocation(line: 307, column: 3, scope: !2570)
!2588 = !DILocation(line: 309, column: 10, scope: !2570)
!2589 = !DILocation(line: 309, column: 8, scope: !2570)
!2590 = !DILocation(line: 310, column: 10, scope: !2570)
!2591 = !DILocation(line: 310, column: 8, scope: !2570)
!2592 = !DILocation(line: 311, column: 12, scope: !2570)
!2593 = !DILocation(line: 311, column: 44, scope: !2570)
!2594 = !DILocation(line: 311, column: 3, scope: !2570)
!2595 = !DILocation(line: 313, column: 7, scope: !2596)
!2596 = distinct !DILexicalBlock(scope: !2570, file: !1, line: 313, column: 7)
!2597 = !DILocation(line: 313, column: 7, scope: !2570)
!2598 = !DILocation(line: 315, column: 16, scope: !2599)
!2599 = distinct !DILexicalBlock(scope: !2596, file: !1, line: 314, column: 5)
!2600 = !DILocation(line: 315, column: 7, scope: !2599)
!2601 = !DILocation(line: 316, column: 39, scope: !2599)
!2602 = !DILocation(line: 316, column: 48, scope: !2599)
!2603 = !DILocation(line: 316, column: 54, scope: !2599)
!2604 = !DILocation(line: 316, column: 61, scope: !2599)
!2605 = !DILocation(line: 317, column: 11, scope: !2599)
!2606 = !DILocation(line: 316, column: 7, scope: !2599)
!2607 = !DILocation(line: 318, column: 5, scope: !2599)
!2608 = !DILocation(line: 320, column: 12, scope: !2570)
!2609 = !DILocation(line: 320, column: 3, scope: !2570)
!2610 = !DILocation(line: 321, column: 15, scope: !2611)
!2611 = distinct !DILexicalBlock(scope: !2570, file: !1, line: 321, column: 3)
!2612 = !DILocation(line: 321, column: 13, scope: !2611)
!2613 = !DILocation(line: 321, column: 8, scope: !2611)
!2614 = !DILocation(line: 321, column: 38, scope: !2615)
!2615 = distinct !DILexicalBlock(scope: !2611, file: !1, line: 321, column: 3)
!2616 = !DILocation(line: 321, column: 43, scope: !2615)
!2617 = !DILocation(line: 321, column: 3, scope: !2611)
!2618 = !DILocation(line: 322, column: 37, scope: !2615)
!2619 = !DILocation(line: 322, column: 46, scope: !2615)
!2620 = !DILocation(line: 322, column: 52, scope: !2615)
!2621 = !DILocation(line: 322, column: 59, scope: !2615)
!2622 = !DILocation(line: 322, column: 71, scope: !2615)
!2623 = !DILocation(line: 322, column: 5, scope: !2615)
!2624 = !DILocation(line: 321, column: 59, scope: !2615)
!2625 = !DILocation(line: 321, column: 57, scope: !2615)
!2626 = !DILocation(line: 321, column: 3, scope: !2615)
!2627 = distinct !{!2627, !2617, !2628}
!2628 = !DILocation(line: 322, column: 76, scope: !2611)
!2629 = !DILocation(line: 323, column: 12, scope: !2570)
!2630 = !DILocation(line: 323, column: 3, scope: !2570)
!2631 = !DILocation(line: 324, column: 15, scope: !2632)
!2632 = distinct !DILexicalBlock(scope: !2570, file: !1, line: 324, column: 3)
!2633 = !DILocation(line: 324, column: 13, scope: !2632)
!2634 = !DILocation(line: 324, column: 8, scope: !2632)
!2635 = !DILocation(line: 324, column: 38, scope: !2636)
!2636 = distinct !DILexicalBlock(scope: !2632, file: !1, line: 324, column: 3)
!2637 = !DILocation(line: 324, column: 43, scope: !2636)
!2638 = !DILocation(line: 324, column: 3, scope: !2632)
!2639 = !DILocation(line: 325, column: 37, scope: !2636)
!2640 = !DILocation(line: 325, column: 46, scope: !2636)
!2641 = !DILocation(line: 325, column: 52, scope: !2636)
!2642 = !DILocation(line: 325, column: 59, scope: !2636)
!2643 = !DILocation(line: 325, column: 71, scope: !2636)
!2644 = !DILocation(line: 325, column: 5, scope: !2636)
!2645 = !DILocation(line: 324, column: 59, scope: !2636)
!2646 = !DILocation(line: 324, column: 57, scope: !2636)
!2647 = !DILocation(line: 324, column: 3, scope: !2636)
!2648 = distinct !{!2648, !2638, !2649}
!2649 = !DILocation(line: 325, column: 76, scope: !2632)
!2650 = !DILocation(line: 326, column: 1, scope: !2570)
!2651 = distinct !DISubprogram(name: "lambda_loopnest_new", scope: !1, file: !1, line: 332, type: !2652, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2652 = !DISubroutineType(types: !2653)
!2653 = !{!659, !644, !644, !2209}
!2654 = !DILocalVariable(name: "depth", arg: 1, scope: !2651, file: !1, line: 332, type: !644)
!2655 = !DILocation(line: 332, column: 26, scope: !2651)
!2656 = !DILocalVariable(name: "invariants", arg: 2, scope: !2651, file: !1, line: 332, type: !644)
!2657 = !DILocation(line: 332, column: 37, scope: !2651)
!2658 = !DILocalVariable(name: "lambda_obstack", arg: 3, scope: !2651, file: !1, line: 333, type: !2209)
!2659 = !DILocation(line: 333, column: 39, scope: !2651)
!2660 = !DILocalVariable(name: "ret", scope: !2651, file: !1, line: 335, type: !659)
!2661 = !DILocation(line: 335, column: 19, scope: !2651)
!2662 = !DILocation(line: 336, column: 26, scope: !2651)
!2663 = !DILocation(line: 336, column: 9, scope: !2651)
!2664 = !DILocation(line: 336, column: 7, scope: !2651)
!2665 = !DILocation(line: 339, column: 7, scope: !2651)
!2666 = !DILocation(line: 338, column: 20, scope: !2651)
!2667 = !DILocation(line: 338, column: 3, scope: !2651)
!2668 = !DILocation(line: 338, column: 18, scope: !2651)
!2669 = !DILocation(line: 340, column: 20, scope: !2651)
!2670 = !DILocation(line: 340, column: 3, scope: !2651)
!2671 = !DILocation(line: 340, column: 18, scope: !2651)
!2672 = !DILocation(line: 341, column: 25, scope: !2651)
!2673 = !DILocation(line: 341, column: 3, scope: !2651)
!2674 = !DILocation(line: 341, column: 23, scope: !2651)
!2675 = !DILocation(line: 343, column: 10, scope: !2651)
!2676 = !DILocation(line: 343, column: 3, scope: !2651)
!2677 = distinct !DISubprogram(name: "print_lambda_loopnest", scope: !1, file: !1, line: 350, type: !2678, scopeLine: 351, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2678 = !DISubroutineType(types: !2679)
!2679 = !{null, !2339, !659, !648}
!2680 = !DILocalVariable(name: "outfile", arg: 1, scope: !2677, file: !1, line: 350, type: !2339)
!2681 = !DILocation(line: 350, column: 31, scope: !2677)
!2682 = !DILocalVariable(name: "nest", arg: 2, scope: !2677, file: !1, line: 350, type: !659)
!2683 = !DILocation(line: 350, column: 56, scope: !2677)
!2684 = !DILocalVariable(name: "start", arg: 3, scope: !2677, file: !1, line: 350, type: !648)
!2685 = !DILocation(line: 350, column: 67, scope: !2677)
!2686 = !DILocalVariable(name: "i", scope: !2677, file: !1, line: 352, type: !644)
!2687 = !DILocation(line: 352, column: 7, scope: !2677)
!2688 = !DILocation(line: 353, column: 10, scope: !2689)
!2689 = distinct !DILexicalBlock(scope: !2677, file: !1, line: 353, column: 3)
!2690 = !DILocation(line: 353, column: 8, scope: !2689)
!2691 = !DILocation(line: 353, column: 15, scope: !2692)
!2692 = distinct !DILexicalBlock(scope: !2689, file: !1, line: 353, column: 3)
!2693 = !DILocation(line: 353, column: 19, scope: !2692)
!2694 = !DILocation(line: 353, column: 17, scope: !2692)
!2695 = !DILocation(line: 353, column: 3, scope: !2689)
!2696 = !DILocation(line: 355, column: 16, scope: !2697)
!2697 = distinct !DILexicalBlock(scope: !2692, file: !1, line: 354, column: 5)
!2698 = !DILocation(line: 355, column: 38, scope: !2697)
!2699 = !DILocation(line: 355, column: 46, scope: !2697)
!2700 = !DILocation(line: 355, column: 44, scope: !2697)
!2701 = !DILocation(line: 355, column: 7, scope: !2697)
!2702 = !DILocation(line: 356, column: 26, scope: !2697)
!2703 = !DILocation(line: 356, column: 35, scope: !2697)
!2704 = !DILocation(line: 356, column: 51, scope: !2697)
!2705 = !DILocation(line: 356, column: 55, scope: !2697)
!2706 = !DILocation(line: 357, column: 5, scope: !2697)
!2707 = !DILocation(line: 356, column: 7, scope: !2697)
!2708 = !DILocation(line: 358, column: 16, scope: !2697)
!2709 = !DILocation(line: 358, column: 7, scope: !2697)
!2710 = !DILocation(line: 359, column: 5, scope: !2697)
!2711 = !DILocation(line: 353, column: 37, scope: !2692)
!2712 = !DILocation(line: 353, column: 3, scope: !2692)
!2713 = distinct !{!2713, !2695, !2714}
!2714 = !DILocation(line: 359, column: 5, scope: !2689)
!2715 = !DILocation(line: 360, column: 1, scope: !2677)
!2716 = distinct !DISubprogram(name: "least_common_multiple", scope: !1, file: !1, line: 452, type: !2717, scopeLine: 453, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2717 = !DISubroutineType(types: !2718)
!2718 = !{!644, !644, !644}
!2719 = !DILocalVariable(name: "a", arg: 1, scope: !2716, file: !1, line: 452, type: !644)
!2720 = !DILocation(line: 452, column: 28, scope: !2716)
!2721 = !DILocalVariable(name: "b", arg: 2, scope: !2716, file: !1, line: 452, type: !644)
!2722 = !DILocation(line: 452, column: 35, scope: !2716)
!2723 = !DILocation(line: 454, column: 16, scope: !2716)
!2724 = !DILocation(line: 454, column: 11, scope: !2716)
!2725 = !DILocation(line: 454, column: 26, scope: !2716)
!2726 = !DILocation(line: 454, column: 21, scope: !2716)
!2727 = !DILocation(line: 454, column: 19, scope: !2716)
!2728 = !DILocation(line: 454, column: 36, scope: !2716)
!2729 = !DILocation(line: 454, column: 39, scope: !2716)
!2730 = !DILocation(line: 454, column: 31, scope: !2716)
!2731 = !DILocation(line: 454, column: 29, scope: !2716)
!2732 = !DILocation(line: 454, column: 3, scope: !2716)
!2733 = distinct !DISubprogram(name: "gcd", scope: !637, file: !637, line: 427, type: !2717, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2734 = !DILocalVariable(name: "a", arg: 1, scope: !2733, file: !637, line: 427, type: !644)
!2735 = !DILocation(line: 427, column: 10, scope: !2733)
!2736 = !DILocalVariable(name: "b", arg: 2, scope: !2733, file: !637, line: 427, type: !644)
!2737 = !DILocation(line: 427, column: 17, scope: !2733)
!2738 = !DILocalVariable(name: "x", scope: !2733, file: !637, line: 429, type: !644)
!2739 = !DILocation(line: 429, column: 7, scope: !2733)
!2740 = !DILocalVariable(name: "y", scope: !2733, file: !637, line: 429, type: !644)
!2741 = !DILocation(line: 429, column: 10, scope: !2733)
!2742 = !DILocalVariable(name: "z", scope: !2733, file: !637, line: 429, type: !644)
!2743 = !DILocation(line: 429, column: 13, scope: !2733)
!2744 = !DILocation(line: 431, column: 12, scope: !2733)
!2745 = !DILocation(line: 431, column: 7, scope: !2733)
!2746 = !DILocation(line: 431, column: 5, scope: !2733)
!2747 = !DILocation(line: 432, column: 12, scope: !2733)
!2748 = !DILocation(line: 432, column: 7, scope: !2733)
!2749 = !DILocation(line: 432, column: 5, scope: !2733)
!2750 = !DILocation(line: 434, column: 3, scope: !2733)
!2751 = !DILocation(line: 434, column: 10, scope: !2733)
!2752 = !DILocation(line: 434, column: 12, scope: !2733)
!2753 = !DILocation(line: 436, column: 11, scope: !2754)
!2754 = distinct !DILexicalBlock(scope: !2733, file: !637, line: 435, column: 5)
!2755 = !DILocation(line: 436, column: 15, scope: !2754)
!2756 = !DILocation(line: 436, column: 13, scope: !2754)
!2757 = !DILocation(line: 436, column: 9, scope: !2754)
!2758 = !DILocation(line: 437, column: 11, scope: !2754)
!2759 = !DILocation(line: 437, column: 9, scope: !2754)
!2760 = !DILocation(line: 438, column: 11, scope: !2754)
!2761 = !DILocation(line: 438, column: 9, scope: !2754)
!2762 = distinct !{!2762, !2750, !2763}
!2763 = !DILocation(line: 439, column: 5, scope: !2733)
!2764 = !DILocation(line: 441, column: 10, scope: !2733)
!2765 = !DILocation(line: 441, column: 3, scope: !2733)
!2766 = distinct !DISubprogram(name: "lambda_loopnest_transform", scope: !1, file: !1, line: 1039, type: !2767, scopeLine: 1041, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2767 = !DISubroutineType(types: !2768)
!2768 = !{!659, !659, !2241, !2209}
!2769 = !DILocalVariable(name: "nest", arg: 1, scope: !2766, file: !1, line: 1039, type: !659)
!2770 = !DILocation(line: 1039, column: 44, scope: !2766)
!2771 = !DILocalVariable(name: "trans", arg: 2, scope: !2766, file: !1, line: 1039, type: !2241)
!2772 = !DILocation(line: 1039, column: 70, scope: !2766)
!2773 = !DILocalVariable(name: "lambda_obstack", arg: 3, scope: !2766, file: !1, line: 1040, type: !2209)
!2774 = !DILocation(line: 1040, column: 45, scope: !2766)
!2775 = !DILocalVariable(name: "auxillary_nest", scope: !2766, file: !1, line: 1042, type: !659)
!2776 = !DILocation(line: 1042, column: 19, scope: !2766)
!2777 = !DILocalVariable(name: "target_nest", scope: !2766, file: !1, line: 1042, type: !659)
!2778 = !DILocation(line: 1042, column: 35, scope: !2766)
!2779 = !DILocalVariable(name: "depth", scope: !2766, file: !1, line: 1044, type: !644)
!2780 = !DILocation(line: 1044, column: 7, scope: !2766)
!2781 = !DILocalVariable(name: "invariants", scope: !2766, file: !1, line: 1044, type: !644)
!2782 = !DILocation(line: 1044, column: 14, scope: !2766)
!2783 = !DILocalVariable(name: "i", scope: !2766, file: !1, line: 1045, type: !644)
!2784 = !DILocation(line: 1045, column: 7, scope: !2766)
!2785 = !DILocalVariable(name: "j", scope: !2766, file: !1, line: 1045, type: !644)
!2786 = !DILocation(line: 1045, column: 10, scope: !2766)
!2787 = !DILocalVariable(name: "lattice", scope: !2766, file: !1, line: 1046, type: !2029)
!2788 = !DILocation(line: 1046, column: 18, scope: !2766)
!2789 = !DILocalVariable(name: "trans1", scope: !2766, file: !1, line: 1047, type: !2241)
!2790 = !DILocation(line: 1047, column: 23, scope: !2766)
!2791 = !DILocalVariable(name: "H", scope: !2766, file: !1, line: 1047, type: !2241)
!2792 = !DILocation(line: 1047, column: 31, scope: !2766)
!2793 = !DILocalVariable(name: "U", scope: !2766, file: !1, line: 1047, type: !2241)
!2794 = !DILocation(line: 1047, column: 34, scope: !2766)
!2795 = !DILocalVariable(name: "loop", scope: !2766, file: !1, line: 1048, type: !665)
!2796 = !DILocation(line: 1048, column: 15, scope: !2766)
!2797 = !DILocalVariable(name: "expression", scope: !2766, file: !1, line: 1049, type: !650)
!2798 = !DILocation(line: 1049, column: 28, scope: !2766)
!2799 = !DILocalVariable(name: "origin", scope: !2766, file: !1, line: 1050, type: !642)
!2800 = !DILocation(line: 1050, column: 17, scope: !2766)
!2801 = !DILocalVariable(name: "origin_invariants", scope: !2766, file: !1, line: 1051, type: !2034)
!2802 = !DILocation(line: 1051, column: 17, scope: !2766)
!2803 = !DILocalVariable(name: "stepsigns", scope: !2766, file: !1, line: 1052, type: !642)
!2804 = !DILocation(line: 1052, column: 17, scope: !2766)
!2805 = !DILocalVariable(name: "f", scope: !2766, file: !1, line: 1053, type: !644)
!2806 = !DILocation(line: 1053, column: 7, scope: !2766)
!2807 = !DILocation(line: 1055, column: 11, scope: !2766)
!2808 = !DILocation(line: 1055, column: 9, scope: !2766)
!2809 = !DILocation(line: 1056, column: 16, scope: !2766)
!2810 = !DILocation(line: 1056, column: 14, scope: !2766)
!2811 = !DILocation(line: 1059, column: 34, scope: !2766)
!2812 = !DILocation(line: 1059, column: 15, scope: !2766)
!2813 = !DILocation(line: 1059, column: 13, scope: !2766)
!2814 = !DILocation(line: 1060, column: 10, scope: !2815)
!2815 = distinct !DILexicalBlock(scope: !2766, file: !1, line: 1060, column: 3)
!2816 = !DILocation(line: 1060, column: 8, scope: !2815)
!2817 = !DILocation(line: 1060, column: 15, scope: !2818)
!2818 = distinct !DILexicalBlock(scope: !2815, file: !1, line: 1060, column: 3)
!2819 = !DILocation(line: 1060, column: 19, scope: !2818)
!2820 = !DILocation(line: 1060, column: 17, scope: !2818)
!2821 = !DILocation(line: 1060, column: 3, scope: !2815)
!2822 = !DILocation(line: 1062, column: 11, scope: !2823)
!2823 = distinct !DILexicalBlock(scope: !2824, file: !1, line: 1062, column: 11)
!2824 = distinct !DILexicalBlock(scope: !2818, file: !1, line: 1061, column: 5)
!2825 = !DILocation(line: 1062, column: 40, scope: !2823)
!2826 = !DILocation(line: 1062, column: 11, scope: !2824)
!2827 = !DILocation(line: 1063, column: 2, scope: !2823)
!2828 = !DILocation(line: 1063, column: 12, scope: !2823)
!2829 = !DILocation(line: 1063, column: 15, scope: !2823)
!2830 = !DILocation(line: 1065, column: 2, scope: !2823)
!2831 = !DILocation(line: 1065, column: 12, scope: !2823)
!2832 = !DILocation(line: 1065, column: 15, scope: !2823)
!2833 = !DILocation(line: 1066, column: 5, scope: !2824)
!2834 = !DILocation(line: 1060, column: 27, scope: !2818)
!2835 = !DILocation(line: 1060, column: 3, scope: !2818)
!2836 = distinct !{!2836, !2821, !2837}
!2837 = !DILocation(line: 1066, column: 5, scope: !2815)
!2838 = !DILocation(line: 1069, column: 42, scope: !2766)
!2839 = !DILocation(line: 1069, column: 48, scope: !2766)
!2840 = !DILocation(line: 1069, column: 13, scope: !2766)
!2841 = !DILocation(line: 1069, column: 11, scope: !2766)
!2842 = !DILocation(line: 1070, column: 37, scope: !2766)
!2843 = !DILocation(line: 1070, column: 44, scope: !2766)
!2844 = !DILocation(line: 1070, column: 12, scope: !2766)
!2845 = !DILocation(line: 1070, column: 10, scope: !2766)
!2846 = !DILocation(line: 1074, column: 23, scope: !2766)
!2847 = !DILocation(line: 1074, column: 43, scope: !2766)
!2848 = !DILocation(line: 1075, column: 9, scope: !2766)
!2849 = !DILocation(line: 1075, column: 30, scope: !2766)
!2850 = !DILocation(line: 1075, column: 37, scope: !2766)
!2851 = !DILocation(line: 1075, column: 44, scope: !2766)
!2852 = !DILocation(line: 1074, column: 3, scope: !2766)
!2853 = !DILocation(line: 1078, column: 32, scope: !2766)
!2854 = !DILocation(line: 1078, column: 39, scope: !2766)
!2855 = !DILocation(line: 1078, column: 7, scope: !2766)
!2856 = !DILocation(line: 1078, column: 5, scope: !2766)
!2857 = !DILocation(line: 1079, column: 32, scope: !2766)
!2858 = !DILocation(line: 1079, column: 39, scope: !2766)
!2859 = !DILocation(line: 1079, column: 7, scope: !2766)
!2860 = !DILocation(line: 1079, column: 5, scope: !2766)
!2861 = !DILocation(line: 1080, column: 26, scope: !2766)
!2862 = !DILocation(line: 1080, column: 47, scope: !2766)
!2863 = !DILocation(line: 1080, column: 54, scope: !2766)
!2864 = !DILocation(line: 1081, column: 5, scope: !2766)
!2865 = !DILocation(line: 1080, column: 3, scope: !2766)
!2866 = !DILocation(line: 1085, column: 52, scope: !2766)
!2867 = !DILocation(line: 1085, column: 58, scope: !2766)
!2868 = !DILocation(line: 1085, column: 61, scope: !2766)
!2869 = !DILocation(line: 1085, column: 20, scope: !2766)
!2870 = !DILocation(line: 1085, column: 18, scope: !2766)
!2871 = !DILocation(line: 1089, column: 42, scope: !2766)
!2872 = !DILocation(line: 1089, column: 50, scope: !2766)
!2873 = !DILocation(line: 1089, column: 15, scope: !2766)
!2874 = !DILocation(line: 1089, column: 13, scope: !2766)
!2875 = !DILocation(line: 1093, column: 46, scope: !2766)
!2876 = !DILocation(line: 1093, column: 62, scope: !2766)
!2877 = !DILocation(line: 1093, column: 65, scope: !2766)
!2878 = !DILocation(line: 1094, column: 46, scope: !2766)
!2879 = !DILocation(line: 1093, column: 17, scope: !2766)
!2880 = !DILocation(line: 1093, column: 15, scope: !2766)
!2881 = !DILocation(line: 1095, column: 31, scope: !2766)
!2882 = !DILocation(line: 1095, column: 12, scope: !2766)
!2883 = !DILocation(line: 1095, column: 10, scope: !2766)
!2884 = !DILocation(line: 1096, column: 42, scope: !2766)
!2885 = !DILocation(line: 1096, column: 49, scope: !2766)
!2886 = !DILocation(line: 1096, column: 23, scope: !2766)
!2887 = !DILocation(line: 1096, column: 21, scope: !2766)
!2888 = !DILocation(line: 1097, column: 30, scope: !2766)
!2889 = !DILocation(line: 1097, column: 50, scope: !2766)
!2890 = !DILocation(line: 1097, column: 57, scope: !2766)
!2891 = !DILocation(line: 1098, column: 9, scope: !2766)
!2892 = !DILocation(line: 1098, column: 35, scope: !2766)
!2893 = !DILocation(line: 1097, column: 3, scope: !2766)
!2894 = !DILocation(line: 1099, column: 23, scope: !2766)
!2895 = !DILocation(line: 1099, column: 43, scope: !2766)
!2896 = !DILocation(line: 1100, column: 9, scope: !2766)
!2897 = !DILocation(line: 1100, column: 28, scope: !2766)
!2898 = !DILocation(line: 1100, column: 35, scope: !2766)
!2899 = !DILocation(line: 1100, column: 42, scope: !2766)
!2900 = !DILocation(line: 1099, column: 3, scope: !2766)
!2901 = !DILocation(line: 1102, column: 10, scope: !2902)
!2902 = distinct !DILexicalBlock(scope: !2766, file: !1, line: 1102, column: 3)
!2903 = !DILocation(line: 1102, column: 8, scope: !2902)
!2904 = !DILocation(line: 1102, column: 15, scope: !2905)
!2905 = distinct !DILexicalBlock(scope: !2902, file: !1, line: 1102, column: 3)
!2906 = !DILocation(line: 1102, column: 19, scope: !2905)
!2907 = !DILocation(line: 1102, column: 17, scope: !2905)
!2908 = !DILocation(line: 1102, column: 3, scope: !2902)
!2909 = !DILocation(line: 1104, column: 14, scope: !2910)
!2910 = distinct !DILexicalBlock(scope: !2905, file: !1, line: 1103, column: 5)
!2911 = !DILocation(line: 1104, column: 37, scope: !2910)
!2912 = !DILocation(line: 1104, column: 12, scope: !2910)
!2913 = !DILocation(line: 1105, column: 20, scope: !2910)
!2914 = !DILocation(line: 1105, column: 18, scope: !2910)
!2915 = !DILocation(line: 1106, column: 32, scope: !2916)
!2916 = distinct !DILexicalBlock(scope: !2910, file: !1, line: 1106, column: 11)
!2917 = !DILocation(line: 1106, column: 63, scope: !2916)
!2918 = !DILocation(line: 1106, column: 11, scope: !2916)
!2919 = !DILocation(line: 1106, column: 11, scope: !2910)
!2920 = !DILocation(line: 1107, column: 4, scope: !2916)
!2921 = !DILocation(line: 1107, column: 2, scope: !2916)
!2922 = !DILocation(line: 1109, column: 6, scope: !2916)
!2923 = !DILocation(line: 1109, column: 4, scope: !2916)
!2924 = !DILocation(line: 1111, column: 36, scope: !2910)
!2925 = !DILocation(line: 1111, column: 40, scope: !2910)
!2926 = !DILocation(line: 1111, column: 47, scope: !2910)
!2927 = !DILocation(line: 1111, column: 38, scope: !2910)
!2928 = !DILocation(line: 1111, column: 7, scope: !2910)
!2929 = !DILocation(line: 1111, column: 33, scope: !2910)
!2930 = !DILocation(line: 1113, column: 14, scope: !2931)
!2931 = distinct !DILexicalBlock(scope: !2910, file: !1, line: 1113, column: 7)
!2932 = !DILocation(line: 1113, column: 12, scope: !2931)
!2933 = !DILocation(line: 1113, column: 19, scope: !2934)
!2934 = distinct !DILexicalBlock(scope: !2931, file: !1, line: 1113, column: 7)
!2935 = !DILocation(line: 1113, column: 23, scope: !2934)
!2936 = !DILocation(line: 1113, column: 21, scope: !2934)
!2937 = !DILocation(line: 1113, column: 7, scope: !2931)
!2938 = !DILocation(line: 1115, column: 4, scope: !2934)
!2939 = !DILocation(line: 1115, column: 8, scope: !2934)
!2940 = !DILocation(line: 1115, column: 26, scope: !2934)
!2941 = !DILocation(line: 1115, column: 29, scope: !2934)
!2942 = !DILocation(line: 1115, column: 6, scope: !2934)
!2943 = !DILocation(line: 1114, column: 2, scope: !2934)
!2944 = !DILocation(line: 1114, column: 42, scope: !2934)
!2945 = !DILocation(line: 1114, column: 45, scope: !2934)
!2946 = !DILocation(line: 1113, column: 36, scope: !2934)
!2947 = !DILocation(line: 1113, column: 7, scope: !2934)
!2948 = distinct !{!2948, !2937, !2949}
!2949 = !DILocation(line: 1115, column: 30, scope: !2931)
!2950 = !DILocation(line: 1116, column: 5, scope: !2910)
!2951 = !DILocation(line: 1102, column: 27, scope: !2905)
!2952 = !DILocation(line: 1102, column: 3, scope: !2905)
!2953 = distinct !{!2953, !2908, !2954}
!2954 = !DILocation(line: 1116, column: 5, scope: !2902)
!2955 = !DILocation(line: 1118, column: 10, scope: !2766)
!2956 = !DILocation(line: 1118, column: 3, scope: !2766)
!2957 = distinct !DISubprogram(name: "lambda_lattice_compute_base", scope: !1, file: !1, line: 386, type: !2958, scopeLine: 388, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!2958 = !DISubroutineType(types: !2959)
!2959 = !{!2029, !659, !2209}
!2960 = !DILocalVariable(name: "nest", arg: 1, scope: !2957, file: !1, line: 386, type: !659)
!2961 = !DILocation(line: 386, column: 46, scope: !2957)
!2962 = !DILocalVariable(name: "lambda_obstack", arg: 2, scope: !2957, file: !1, line: 387, type: !2209)
!2963 = !DILocation(line: 387, column: 47, scope: !2957)
!2964 = !DILocalVariable(name: "ret", scope: !2957, file: !1, line: 389, type: !2029)
!2965 = !DILocation(line: 389, column: 18, scope: !2957)
!2966 = !DILocalVariable(name: "depth", scope: !2957, file: !1, line: 390, type: !644)
!2967 = !DILocation(line: 390, column: 7, scope: !2957)
!2968 = !DILocalVariable(name: "invariants", scope: !2957, file: !1, line: 390, type: !644)
!2969 = !DILocation(line: 390, column: 14, scope: !2957)
!2970 = !DILocalVariable(name: "base", scope: !2957, file: !1, line: 391, type: !2034)
!2971 = !DILocation(line: 391, column: 17, scope: !2957)
!2972 = !DILocalVariable(name: "i", scope: !2957, file: !1, line: 393, type: !644)
!2973 = !DILocation(line: 393, column: 7, scope: !2957)
!2974 = !DILocalVariable(name: "j", scope: !2957, file: !1, line: 393, type: !644)
!2975 = !DILocation(line: 393, column: 10, scope: !2957)
!2976 = !DILocalVariable(name: "step", scope: !2957, file: !1, line: 393, type: !644)
!2977 = !DILocation(line: 393, column: 13, scope: !2957)
!2978 = !DILocalVariable(name: "loop", scope: !2957, file: !1, line: 394, type: !665)
!2979 = !DILocation(line: 394, column: 15, scope: !2957)
!2980 = !DILocalVariable(name: "expression", scope: !2957, file: !1, line: 395, type: !650)
!2981 = !DILocation(line: 395, column: 28, scope: !2957)
!2982 = !DILocation(line: 397, column: 11, scope: !2957)
!2983 = !DILocation(line: 397, column: 9, scope: !2957)
!2984 = !DILocation(line: 398, column: 16, scope: !2957)
!2985 = !DILocation(line: 398, column: 14, scope: !2957)
!2986 = !DILocation(line: 400, column: 29, scope: !2957)
!2987 = !DILocation(line: 400, column: 36, scope: !2957)
!2988 = !DILocation(line: 400, column: 48, scope: !2957)
!2989 = !DILocation(line: 400, column: 9, scope: !2957)
!2990 = !DILocation(line: 400, column: 7, scope: !2957)
!2991 = !DILocation(line: 401, column: 10, scope: !2957)
!2992 = !DILocation(line: 401, column: 8, scope: !2957)
!2993 = !DILocation(line: 402, column: 10, scope: !2994)
!2994 = distinct !DILexicalBlock(scope: !2957, file: !1, line: 402, column: 3)
!2995 = !DILocation(line: 402, column: 8, scope: !2994)
!2996 = !DILocation(line: 402, column: 15, scope: !2997)
!2997 = distinct !DILexicalBlock(scope: !2994, file: !1, line: 402, column: 3)
!2998 = !DILocation(line: 402, column: 19, scope: !2997)
!2999 = !DILocation(line: 402, column: 17, scope: !2997)
!3000 = !DILocation(line: 402, column: 3, scope: !2994)
!3001 = !DILocation(line: 404, column: 14, scope: !3002)
!3002 = distinct !DILexicalBlock(scope: !2997, file: !1, line: 403, column: 5)
!3003 = !DILocation(line: 404, column: 30, scope: !3002)
!3004 = !DILocation(line: 404, column: 12, scope: !3002)
!3005 = !DILocation(line: 405, column: 7, scope: !3002)
!3006 = !DILocation(line: 406, column: 14, scope: !3002)
!3007 = !DILocation(line: 406, column: 12, scope: !3002)
!3008 = !DILocation(line: 409, column: 11, scope: !3009)
!3009 = distinct !DILexicalBlock(scope: !3002, file: !1, line: 409, column: 11)
!3010 = !DILocation(line: 409, column: 16, scope: !3009)
!3011 = !DILocation(line: 409, column: 11, scope: !3002)
!3012 = !DILocation(line: 411, column: 11, scope: !3013)
!3013 = distinct !DILexicalBlock(scope: !3014, file: !1, line: 411, column: 4)
!3014 = distinct !DILexicalBlock(scope: !3009, file: !1, line: 410, column: 2)
!3015 = !DILocation(line: 411, column: 9, scope: !3013)
!3016 = !DILocation(line: 411, column: 16, scope: !3017)
!3017 = distinct !DILexicalBlock(scope: !3013, file: !1, line: 411, column: 4)
!3018 = !DILocation(line: 411, column: 20, scope: !3017)
!3019 = !DILocation(line: 411, column: 18, scope: !3017)
!3020 = !DILocation(line: 411, column: 4, scope: !3013)
!3021 = !DILocation(line: 412, column: 6, scope: !3017)
!3022 = !DILocation(line: 412, column: 11, scope: !3017)
!3023 = !DILocation(line: 412, column: 14, scope: !3017)
!3024 = !DILocation(line: 412, column: 17, scope: !3017)
!3025 = !DILocation(line: 411, column: 28, scope: !3017)
!3026 = !DILocation(line: 411, column: 4, scope: !3017)
!3027 = distinct !{!3027, !3020, !3028}
!3028 = !DILocation(line: 412, column: 19, scope: !3013)
!3029 = !DILocation(line: 413, column: 4, scope: !3014)
!3030 = !DILocation(line: 413, column: 9, scope: !3014)
!3031 = !DILocation(line: 413, column: 12, scope: !3014)
!3032 = !DILocation(line: 413, column: 15, scope: !3014)
!3033 = !DILocation(line: 414, column: 4, scope: !3014)
!3034 = !DILocation(line: 414, column: 25, scope: !3014)
!3035 = !DILocation(line: 414, column: 28, scope: !3014)
!3036 = !DILocation(line: 415, column: 11, scope: !3037)
!3037 = distinct !DILexicalBlock(scope: !3014, file: !1, line: 415, column: 4)
!3038 = !DILocation(line: 415, column: 9, scope: !3037)
!3039 = !DILocation(line: 415, column: 16, scope: !3040)
!3040 = distinct !DILexicalBlock(scope: !3037, file: !1, line: 415, column: 4)
!3041 = !DILocation(line: 415, column: 20, scope: !3040)
!3042 = !DILocation(line: 415, column: 18, scope: !3040)
!3043 = !DILocation(line: 415, column: 4, scope: !3037)
!3044 = !DILocation(line: 416, column: 6, scope: !3040)
!3045 = !DILocation(line: 416, column: 38, scope: !3040)
!3046 = !DILocation(line: 416, column: 41, scope: !3040)
!3047 = !DILocation(line: 416, column: 44, scope: !3040)
!3048 = !DILocation(line: 415, column: 33, scope: !3040)
!3049 = !DILocation(line: 415, column: 4, scope: !3040)
!3050 = distinct !{!3050, !3043, !3051}
!3051 = !DILocation(line: 416, column: 46, scope: !3037)
!3052 = !DILocation(line: 417, column: 2, scope: !3014)
!3053 = !DILocation(line: 422, column: 17, scope: !3054)
!3054 = distinct !DILexicalBlock(scope: !3009, file: !1, line: 419, column: 2)
!3055 = !DILocation(line: 422, column: 15, scope: !3054)
!3056 = !DILocation(line: 423, column: 4, scope: !3054)
!3057 = !DILocation(line: 428, column: 11, scope: !3058)
!3058 = distinct !DILexicalBlock(scope: !3054, file: !1, line: 428, column: 4)
!3059 = !DILocation(line: 428, column: 9, scope: !3058)
!3060 = !DILocation(line: 428, column: 16, scope: !3061)
!3061 = distinct !DILexicalBlock(scope: !3058, file: !1, line: 428, column: 4)
!3062 = !DILocation(line: 428, column: 20, scope: !3061)
!3063 = !DILocation(line: 428, column: 18, scope: !3061)
!3064 = !DILocation(line: 428, column: 4, scope: !3058)
!3065 = !DILocation(line: 429, column: 19, scope: !3061)
!3066 = !DILocation(line: 429, column: 49, scope: !3061)
!3067 = !DILocation(line: 430, column: 10, scope: !3061)
!3068 = !DILocation(line: 430, column: 8, scope: !3061)
!3069 = !DILocation(line: 429, column: 6, scope: !3061)
!3070 = !DILocation(line: 429, column: 11, scope: !3061)
!3071 = !DILocation(line: 429, column: 14, scope: !3061)
!3072 = !DILocation(line: 429, column: 17, scope: !3061)
!3073 = !DILocation(line: 428, column: 24, scope: !3061)
!3074 = !DILocation(line: 428, column: 4, scope: !3061)
!3075 = distinct !{!3075, !3064, !3076}
!3076 = !DILocation(line: 430, column: 10, scope: !3058)
!3077 = !DILocation(line: 431, column: 17, scope: !3054)
!3078 = !DILocation(line: 431, column: 4, scope: !3054)
!3079 = !DILocation(line: 431, column: 9, scope: !3054)
!3080 = !DILocation(line: 431, column: 12, scope: !3054)
!3081 = !DILocation(line: 431, column: 15, scope: !3054)
!3082 = !DILocation(line: 432, column: 13, scope: !3083)
!3083 = distinct !DILexicalBlock(scope: !3054, file: !1, line: 432, column: 4)
!3084 = !DILocation(line: 432, column: 15, scope: !3083)
!3085 = !DILocation(line: 432, column: 11, scope: !3083)
!3086 = !DILocation(line: 432, column: 9, scope: !3083)
!3087 = !DILocation(line: 432, column: 20, scope: !3088)
!3088 = distinct !DILexicalBlock(scope: !3083, file: !1, line: 432, column: 4)
!3089 = !DILocation(line: 432, column: 24, scope: !3088)
!3090 = !DILocation(line: 432, column: 22, scope: !3088)
!3091 = !DILocation(line: 432, column: 4, scope: !3083)
!3092 = !DILocation(line: 433, column: 6, scope: !3088)
!3093 = !DILocation(line: 433, column: 11, scope: !3088)
!3094 = !DILocation(line: 433, column: 14, scope: !3088)
!3095 = !DILocation(line: 433, column: 17, scope: !3088)
!3096 = !DILocation(line: 432, column: 32, scope: !3088)
!3097 = !DILocation(line: 432, column: 4, scope: !3088)
!3098 = distinct !{!3098, !3091, !3099}
!3099 = !DILocation(line: 433, column: 19, scope: !3083)
!3100 = !DILocation(line: 437, column: 30, scope: !3054)
!3101 = !DILocation(line: 437, column: 4, scope: !3054)
!3102 = !DILocation(line: 437, column: 25, scope: !3054)
!3103 = !DILocation(line: 437, column: 28, scope: !3054)
!3104 = !DILocation(line: 441, column: 11, scope: !3105)
!3105 = distinct !DILexicalBlock(scope: !3054, file: !1, line: 441, column: 4)
!3106 = !DILocation(line: 441, column: 9, scope: !3105)
!3107 = !DILocation(line: 441, column: 16, scope: !3108)
!3108 = distinct !DILexicalBlock(scope: !3105, file: !1, line: 441, column: 4)
!3109 = !DILocation(line: 441, column: 20, scope: !3108)
!3110 = !DILocation(line: 441, column: 18, scope: !3108)
!3111 = !DILocation(line: 441, column: 4, scope: !3105)
!3112 = !DILocation(line: 443, column: 8, scope: !3108)
!3113 = !DILocation(line: 443, column: 48, scope: !3108)
!3114 = !DILocation(line: 442, column: 6, scope: !3108)
!3115 = !DILocation(line: 442, column: 38, scope: !3108)
!3116 = !DILocation(line: 442, column: 41, scope: !3108)
!3117 = !DILocation(line: 442, column: 44, scope: !3108)
!3118 = !DILocation(line: 441, column: 33, scope: !3108)
!3119 = !DILocation(line: 441, column: 4, scope: !3108)
!3120 = distinct !{!3120, !3111, !3121}
!3121 = !DILocation(line: 443, column: 49, scope: !3105)
!3122 = !DILocation(line: 445, column: 5, scope: !3002)
!3123 = !DILocation(line: 402, column: 27, scope: !2997)
!3124 = !DILocation(line: 402, column: 3, scope: !2997)
!3125 = distinct !{!3125, !3000, !3126}
!3126 = !DILocation(line: 445, column: 5, scope: !2994)
!3127 = !DILocation(line: 446, column: 10, scope: !2957)
!3128 = !DILocation(line: 446, column: 3, scope: !2957)
!3129 = distinct !DISubprogram(name: "lambda_compute_auxillary_space", scope: !1, file: !1, line: 638, type: !2767, scopeLine: 641, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!3130 = !DILocalVariable(name: "nest", arg: 1, scope: !3129, file: !1, line: 638, type: !659)
!3131 = !DILocation(line: 638, column: 49, scope: !3129)
!3132 = !DILocalVariable(name: "trans", arg: 2, scope: !3129, file: !1, line: 639, type: !2241)
!3133 = !DILocation(line: 639, column: 53, scope: !3129)
!3134 = !DILocalVariable(name: "lambda_obstack", arg: 3, scope: !3129, file: !1, line: 640, type: !2209)
!3135 = !DILocation(line: 640, column: 50, scope: !3129)
!3136 = !DILocalVariable(name: "A", scope: !3129, file: !1, line: 642, type: !2034)
!3137 = !DILocation(line: 642, column: 17, scope: !3129)
!3138 = !DILocalVariable(name: "B", scope: !3129, file: !1, line: 642, type: !2034)
!3139 = !DILocation(line: 642, column: 20, scope: !3129)
!3140 = !DILocalVariable(name: "A1", scope: !3129, file: !1, line: 642, type: !2034)
!3141 = !DILocation(line: 642, column: 23, scope: !3129)
!3142 = !DILocalVariable(name: "B1", scope: !3129, file: !1, line: 642, type: !2034)
!3143 = !DILocation(line: 642, column: 27, scope: !3129)
!3144 = !DILocalVariable(name: "a", scope: !3129, file: !1, line: 643, type: !642)
!3145 = !DILocation(line: 643, column: 17, scope: !3129)
!3146 = !DILocalVariable(name: "a1", scope: !3129, file: !1, line: 643, type: !642)
!3147 = !DILocation(line: 643, column: 20, scope: !3129)
!3148 = !DILocalVariable(name: "invertedtrans", scope: !3129, file: !1, line: 644, type: !2034)
!3149 = !DILocation(line: 644, column: 17, scope: !3129)
!3150 = !DILocalVariable(name: "depth", scope: !3129, file: !1, line: 645, type: !644)
!3151 = !DILocation(line: 645, column: 7, scope: !3129)
!3152 = !DILocalVariable(name: "invariants", scope: !3129, file: !1, line: 645, type: !644)
!3153 = !DILocation(line: 645, column: 14, scope: !3129)
!3154 = !DILocalVariable(name: "size", scope: !3129, file: !1, line: 645, type: !644)
!3155 = !DILocation(line: 645, column: 26, scope: !3129)
!3156 = !DILocalVariable(name: "i", scope: !3129, file: !1, line: 646, type: !644)
!3157 = !DILocation(line: 646, column: 7, scope: !3129)
!3158 = !DILocalVariable(name: "j", scope: !3129, file: !1, line: 646, type: !644)
!3159 = !DILocation(line: 646, column: 10, scope: !3129)
!3160 = !DILocalVariable(name: "loop", scope: !3129, file: !1, line: 647, type: !665)
!3161 = !DILocation(line: 647, column: 15, scope: !3129)
!3162 = !DILocalVariable(name: "expression", scope: !3129, file: !1, line: 648, type: !650)
!3163 = !DILocation(line: 648, column: 28, scope: !3129)
!3164 = !DILocalVariable(name: "lattice", scope: !3129, file: !1, line: 649, type: !2029)
!3165 = !DILocation(line: 649, column: 18, scope: !3129)
!3166 = !DILocation(line: 651, column: 11, scope: !3129)
!3167 = !DILocation(line: 651, column: 9, scope: !3129)
!3168 = !DILocation(line: 652, column: 16, scope: !3129)
!3169 = !DILocation(line: 652, column: 14, scope: !3129)
!3170 = !DILocation(line: 657, column: 31, scope: !3129)
!3171 = !DILocation(line: 657, column: 7, scope: !3129)
!3172 = !DILocation(line: 657, column: 5, scope: !3129)
!3173 = !DILocation(line: 658, column: 31, scope: !3129)
!3174 = !DILocation(line: 658, column: 7, scope: !3129)
!3175 = !DILocation(line: 658, column: 5, scope: !3129)
!3176 = !DILocation(line: 659, column: 7, scope: !3129)
!3177 = !DILocation(line: 659, column: 5, scope: !3129)
!3178 = !DILocation(line: 661, column: 32, scope: !3129)
!3179 = !DILocation(line: 661, column: 8, scope: !3129)
!3180 = !DILocation(line: 661, column: 6, scope: !3129)
!3181 = !DILocation(line: 662, column: 32, scope: !3129)
!3182 = !DILocation(line: 662, column: 8, scope: !3129)
!3183 = !DILocation(line: 662, column: 6, scope: !3129)
!3184 = !DILocation(line: 663, column: 8, scope: !3129)
!3185 = !DILocation(line: 663, column: 6, scope: !3129)
!3186 = !DILocation(line: 669, column: 8, scope: !3129)
!3187 = !DILocation(line: 670, column: 10, scope: !3188)
!3188 = distinct !DILexicalBlock(scope: !3129, file: !1, line: 670, column: 3)
!3189 = !DILocation(line: 670, column: 8, scope: !3188)
!3190 = !DILocation(line: 670, column: 15, scope: !3191)
!3191 = distinct !DILexicalBlock(scope: !3188, file: !1, line: 670, column: 3)
!3192 = !DILocation(line: 670, column: 19, scope: !3191)
!3193 = !DILocation(line: 670, column: 17, scope: !3191)
!3194 = !DILocation(line: 670, column: 3, scope: !3188)
!3195 = !DILocation(line: 672, column: 14, scope: !3196)
!3196 = distinct !DILexicalBlock(scope: !3191, file: !1, line: 671, column: 5)
!3197 = !DILocation(line: 672, column: 30, scope: !3196)
!3198 = !DILocation(line: 672, column: 12, scope: !3196)
!3199 = !DILocation(line: 675, column: 11, scope: !3200)
!3200 = distinct !DILexicalBlock(scope: !3196, file: !1, line: 675, column: 11)
!3201 = !DILocation(line: 675, column: 26, scope: !3200)
!3202 = !DILocation(line: 675, column: 11, scope: !3196)
!3203 = !DILocation(line: 676, column: 15, scope: !3200)
!3204 = !DILocation(line: 676, column: 13, scope: !3200)
!3205 = !DILocation(line: 676, column: 2, scope: !3200)
!3206 = !DILocation(line: 678, column: 15, scope: !3200)
!3207 = !DILocation(line: 678, column: 13, scope: !3200)
!3208 = !DILocation(line: 680, column: 7, scope: !3196)
!3209 = !DILocation(line: 680, column: 14, scope: !3210)
!3210 = distinct !DILexicalBlock(scope: !3211, file: !1, line: 680, column: 7)
!3211 = distinct !DILexicalBlock(scope: !3196, file: !1, line: 680, column: 7)
!3212 = !DILocation(line: 680, column: 25, scope: !3210)
!3213 = !DILocation(line: 680, column: 7, scope: !3211)
!3214 = !DILocation(line: 683, column: 11, scope: !3215)
!3215 = distinct !DILexicalBlock(scope: !3216, file: !1, line: 683, column: 4)
!3216 = distinct !DILexicalBlock(scope: !3210, file: !1, line: 681, column: 2)
!3217 = !DILocation(line: 683, column: 9, scope: !3215)
!3218 = !DILocation(line: 683, column: 16, scope: !3219)
!3219 = distinct !DILexicalBlock(scope: !3215, file: !1, line: 683, column: 4)
!3220 = !DILocation(line: 683, column: 20, scope: !3219)
!3221 = !DILocation(line: 683, column: 18, scope: !3219)
!3222 = !DILocation(line: 683, column: 4, scope: !3215)
!3223 = !DILocation(line: 684, column: 19, scope: !3219)
!3224 = !DILocation(line: 684, column: 49, scope: !3219)
!3225 = !DILocation(line: 684, column: 6, scope: !3219)
!3226 = !DILocation(line: 684, column: 8, scope: !3219)
!3227 = !DILocation(line: 684, column: 14, scope: !3219)
!3228 = !DILocation(line: 684, column: 17, scope: !3219)
!3229 = !DILocation(line: 683, column: 24, scope: !3219)
!3230 = !DILocation(line: 683, column: 4, scope: !3219)
!3231 = distinct !{!3231, !3222, !3232}
!3232 = !DILocation(line: 684, column: 50, scope: !3215)
!3233 = !DILocation(line: 687, column: 11, scope: !3234)
!3234 = distinct !DILexicalBlock(scope: !3216, file: !1, line: 687, column: 4)
!3235 = !DILocation(line: 687, column: 9, scope: !3234)
!3236 = !DILocation(line: 687, column: 16, scope: !3237)
!3237 = distinct !DILexicalBlock(scope: !3234, file: !1, line: 687, column: 4)
!3238 = !DILocation(line: 687, column: 20, scope: !3237)
!3239 = !DILocation(line: 687, column: 18, scope: !3237)
!3240 = !DILocation(line: 687, column: 4, scope: !3234)
!3241 = !DILocation(line: 688, column: 19, scope: !3237)
!3242 = !DILocation(line: 688, column: 59, scope: !3237)
!3243 = !DILocation(line: 688, column: 6, scope: !3237)
!3244 = !DILocation(line: 688, column: 8, scope: !3237)
!3245 = !DILocation(line: 688, column: 14, scope: !3237)
!3246 = !DILocation(line: 688, column: 17, scope: !3237)
!3247 = !DILocation(line: 687, column: 33, scope: !3237)
!3248 = !DILocation(line: 687, column: 4, scope: !3237)
!3249 = distinct !{!3249, !3240, !3250}
!3250 = !DILocation(line: 688, column: 60, scope: !3234)
!3251 = !DILocation(line: 691, column: 14, scope: !3216)
!3252 = !DILocation(line: 691, column: 4, scope: !3216)
!3253 = !DILocation(line: 691, column: 6, scope: !3216)
!3254 = !DILocation(line: 691, column: 12, scope: !3216)
!3255 = !DILocation(line: 695, column: 22, scope: !3216)
!3256 = !DILocation(line: 695, column: 20, scope: !3216)
!3257 = !DILocation(line: 695, column: 4, scope: !3216)
!3258 = !DILocation(line: 695, column: 6, scope: !3216)
!3259 = !DILocation(line: 695, column: 12, scope: !3216)
!3260 = !DILocation(line: 695, column: 15, scope: !3216)
!3261 = !DILocation(line: 696, column: 4, scope: !3216)
!3262 = !DILocation(line: 696, column: 6, scope: !3216)
!3263 = !DILocation(line: 696, column: 12, scope: !3216)
!3264 = !DILocation(line: 697, column: 11, scope: !3265)
!3265 = distinct !DILexicalBlock(scope: !3216, file: !1, line: 697, column: 4)
!3266 = !DILocation(line: 697, column: 9, scope: !3265)
!3267 = !DILocation(line: 697, column: 16, scope: !3268)
!3268 = distinct !DILexicalBlock(scope: !3265, file: !1, line: 697, column: 4)
!3269 = !DILocation(line: 697, column: 20, scope: !3268)
!3270 = !DILocation(line: 697, column: 18, scope: !3268)
!3271 = !DILocation(line: 697, column: 4, scope: !3265)
!3272 = !DILocation(line: 698, column: 6, scope: !3268)
!3273 = !DILocation(line: 698, column: 8, scope: !3268)
!3274 = !DILocation(line: 698, column: 14, scope: !3268)
!3275 = !DILocation(line: 698, column: 17, scope: !3268)
!3276 = !DILocation(line: 697, column: 33, scope: !3268)
!3277 = !DILocation(line: 697, column: 4, scope: !3268)
!3278 = distinct !{!3278, !3271, !3279}
!3279 = !DILocation(line: 698, column: 21, scope: !3265)
!3280 = !DILocation(line: 700, column: 8, scope: !3216)
!3281 = !DILocation(line: 702, column: 4, scope: !3216)
!3282 = !DILocation(line: 704, column: 2, scope: !3216)
!3283 = !DILocation(line: 680, column: 47, scope: !3210)
!3284 = !DILocation(line: 680, column: 45, scope: !3210)
!3285 = !DILocation(line: 680, column: 7, scope: !3210)
!3286 = distinct !{!3286, !3213, !3287}
!3287 = !DILocation(line: 704, column: 2, scope: !3211)
!3288 = !DILocation(line: 707, column: 11, scope: !3289)
!3289 = distinct !DILexicalBlock(scope: !3196, file: !1, line: 707, column: 11)
!3290 = !DILocation(line: 707, column: 26, scope: !3289)
!3291 = !DILocation(line: 707, column: 11, scope: !3196)
!3292 = !DILocation(line: 708, column: 15, scope: !3289)
!3293 = !DILocation(line: 708, column: 13, scope: !3289)
!3294 = !DILocation(line: 708, column: 2, scope: !3289)
!3295 = !DILocation(line: 710, column: 15, scope: !3289)
!3296 = !DILocation(line: 710, column: 13, scope: !3289)
!3297 = !DILocation(line: 712, column: 7, scope: !3196)
!3298 = !DILocation(line: 712, column: 14, scope: !3299)
!3299 = distinct !DILexicalBlock(scope: !3300, file: !1, line: 712, column: 7)
!3300 = distinct !DILexicalBlock(scope: !3196, file: !1, line: 712, column: 7)
!3301 = !DILocation(line: 712, column: 25, scope: !3299)
!3302 = !DILocation(line: 712, column: 7, scope: !3300)
!3303 = !DILocation(line: 715, column: 11, scope: !3304)
!3304 = distinct !DILexicalBlock(scope: !3305, file: !1, line: 715, column: 4)
!3305 = distinct !DILexicalBlock(scope: !3299, file: !1, line: 713, column: 2)
!3306 = !DILocation(line: 715, column: 9, scope: !3304)
!3307 = !DILocation(line: 715, column: 16, scope: !3308)
!3308 = distinct !DILexicalBlock(scope: !3304, file: !1, line: 715, column: 4)
!3309 = !DILocation(line: 715, column: 20, scope: !3308)
!3310 = !DILocation(line: 715, column: 18, scope: !3308)
!3311 = !DILocation(line: 715, column: 4, scope: !3304)
!3312 = !DILocation(line: 716, column: 19, scope: !3308)
!3313 = !DILocation(line: 716, column: 49, scope: !3308)
!3314 = !DILocation(line: 716, column: 6, scope: !3308)
!3315 = !DILocation(line: 716, column: 8, scope: !3308)
!3316 = !DILocation(line: 716, column: 14, scope: !3308)
!3317 = !DILocation(line: 716, column: 17, scope: !3308)
!3318 = !DILocation(line: 715, column: 24, scope: !3308)
!3319 = !DILocation(line: 715, column: 4, scope: !3308)
!3320 = distinct !{!3320, !3311, !3321}
!3321 = !DILocation(line: 716, column: 50, scope: !3304)
!3322 = !DILocation(line: 719, column: 11, scope: !3323)
!3323 = distinct !DILexicalBlock(scope: !3305, file: !1, line: 719, column: 4)
!3324 = !DILocation(line: 719, column: 9, scope: !3323)
!3325 = !DILocation(line: 719, column: 16, scope: !3326)
!3326 = distinct !DILexicalBlock(scope: !3323, file: !1, line: 719, column: 4)
!3327 = !DILocation(line: 719, column: 20, scope: !3326)
!3328 = !DILocation(line: 719, column: 18, scope: !3326)
!3329 = !DILocation(line: 719, column: 4, scope: !3323)
!3330 = !DILocation(line: 720, column: 19, scope: !3326)
!3331 = !DILocation(line: 720, column: 59, scope: !3326)
!3332 = !DILocation(line: 720, column: 6, scope: !3326)
!3333 = !DILocation(line: 720, column: 8, scope: !3326)
!3334 = !DILocation(line: 720, column: 14, scope: !3326)
!3335 = !DILocation(line: 720, column: 17, scope: !3326)
!3336 = !DILocation(line: 719, column: 33, scope: !3326)
!3337 = !DILocation(line: 719, column: 4, scope: !3326)
!3338 = distinct !{!3338, !3329, !3339}
!3339 = !DILocation(line: 720, column: 60, scope: !3323)
!3340 = !DILocation(line: 723, column: 14, scope: !3305)
!3341 = !DILocation(line: 723, column: 4, scope: !3305)
!3342 = !DILocation(line: 723, column: 6, scope: !3305)
!3343 = !DILocation(line: 723, column: 12, scope: !3305)
!3344 = !DILocation(line: 726, column: 11, scope: !3345)
!3345 = distinct !DILexicalBlock(scope: !3305, file: !1, line: 726, column: 4)
!3346 = !DILocation(line: 726, column: 9, scope: !3345)
!3347 = !DILocation(line: 726, column: 16, scope: !3348)
!3348 = distinct !DILexicalBlock(scope: !3345, file: !1, line: 726, column: 4)
!3349 = !DILocation(line: 726, column: 20, scope: !3348)
!3350 = !DILocation(line: 726, column: 18, scope: !3348)
!3351 = !DILocation(line: 726, column: 4, scope: !3345)
!3352 = !DILocation(line: 727, column: 6, scope: !3348)
!3353 = !DILocation(line: 727, column: 8, scope: !3348)
!3354 = !DILocation(line: 727, column: 14, scope: !3348)
!3355 = !DILocation(line: 727, column: 17, scope: !3348)
!3356 = !DILocation(line: 726, column: 24, scope: !3348)
!3357 = !DILocation(line: 726, column: 4, scope: !3348)
!3358 = distinct !{!3358, !3351, !3359}
!3359 = !DILocation(line: 727, column: 21, scope: !3345)
!3360 = !DILocation(line: 728, column: 17, scope: !3305)
!3361 = !DILocation(line: 728, column: 4, scope: !3305)
!3362 = !DILocation(line: 728, column: 6, scope: !3305)
!3363 = !DILocation(line: 728, column: 12, scope: !3305)
!3364 = !DILocation(line: 728, column: 15, scope: !3305)
!3365 = !DILocation(line: 729, column: 8, scope: !3305)
!3366 = !DILocation(line: 731, column: 4, scope: !3305)
!3367 = !DILocation(line: 733, column: 2, scope: !3305)
!3368 = !DILocation(line: 712, column: 47, scope: !3299)
!3369 = !DILocation(line: 712, column: 45, scope: !3299)
!3370 = !DILocation(line: 712, column: 7, scope: !3299)
!3371 = distinct !{!3371, !3302, !3372}
!3372 = !DILocation(line: 733, column: 2, scope: !3300)
!3373 = !DILocation(line: 734, column: 5, scope: !3196)
!3374 = !DILocation(line: 670, column: 27, scope: !3191)
!3375 = !DILocation(line: 670, column: 3, scope: !3191)
!3376 = distinct !{!3376, !3194, !3377}
!3377 = !DILocation(line: 734, column: 5, scope: !3188)
!3378 = !DILocation(line: 738, column: 42, scope: !3129)
!3379 = !DILocation(line: 738, column: 48, scope: !3129)
!3380 = !DILocation(line: 738, column: 13, scope: !3129)
!3381 = !DILocation(line: 738, column: 11, scope: !3129)
!3382 = !DILocation(line: 743, column: 23, scope: !3129)
!3383 = !DILocation(line: 743, column: 26, scope: !3129)
!3384 = !DILocation(line: 743, column: 50, scope: !3129)
!3385 = !DILocation(line: 743, column: 54, scope: !3129)
!3386 = !DILocation(line: 743, column: 60, scope: !3129)
!3387 = !DILocation(line: 743, column: 67, scope: !3129)
!3388 = !DILocation(line: 743, column: 3, scope: !3129)
!3389 = !DILocation(line: 746, column: 30, scope: !3129)
!3390 = !DILocation(line: 746, column: 33, scope: !3129)
!3391 = !DILocation(line: 746, column: 39, scope: !3129)
!3392 = !DILocation(line: 746, column: 46, scope: !3129)
!3393 = !DILocation(line: 746, column: 72, scope: !3129)
!3394 = !DILocation(line: 746, column: 3, scope: !3129)
!3395 = !DILocation(line: 747, column: 25, scope: !3129)
!3396 = !DILocation(line: 747, column: 31, scope: !3129)
!3397 = !DILocation(line: 747, column: 39, scope: !3129)
!3398 = !DILocation(line: 747, column: 43, scope: !3129)
!3399 = !DILocation(line: 747, column: 3, scope: !3129)
!3400 = !DILocation(line: 750, column: 23, scope: !3129)
!3401 = !DILocation(line: 750, column: 26, scope: !3129)
!3402 = !DILocation(line: 750, column: 63, scope: !3129)
!3403 = !DILocation(line: 750, column: 67, scope: !3129)
!3404 = !DILocation(line: 750, column: 73, scope: !3129)
!3405 = !DILocation(line: 751, column: 9, scope: !3129)
!3406 = !DILocation(line: 750, column: 3, scope: !3129)
!3407 = !DILocation(line: 752, column: 25, scope: !3129)
!3408 = !DILocation(line: 752, column: 31, scope: !3129)
!3409 = !DILocation(line: 752, column: 39, scope: !3129)
!3410 = !DILocation(line: 752, column: 43, scope: !3129)
!3411 = !DILocation(line: 752, column: 49, scope: !3129)
!3412 = !DILocation(line: 752, column: 3, scope: !3129)
!3413 = !DILocation(line: 757, column: 38, scope: !3129)
!3414 = !DILocation(line: 757, column: 45, scope: !3129)
!3415 = !DILocation(line: 757, column: 19, scope: !3129)
!3416 = !DILocation(line: 757, column: 17, scope: !3129)
!3417 = !DILocation(line: 760, column: 26, scope: !3129)
!3418 = !DILocation(line: 761, column: 5, scope: !3129)
!3419 = !DILocation(line: 761, column: 20, scope: !3129)
!3420 = !DILocation(line: 760, column: 3, scope: !3129)
!3421 = !DILocation(line: 764, column: 23, scope: !3129)
!3422 = !DILocation(line: 764, column: 27, scope: !3129)
!3423 = !DILocation(line: 764, column: 42, scope: !3129)
!3424 = !DILocation(line: 764, column: 45, scope: !3129)
!3425 = !DILocation(line: 764, column: 51, scope: !3129)
!3426 = !DILocation(line: 764, column: 58, scope: !3129)
!3427 = !DILocation(line: 764, column: 3, scope: !3129)
!3428 = !DILocation(line: 766, column: 46, scope: !3129)
!3429 = !DILocation(line: 766, column: 52, scope: !3129)
!3430 = !DILocation(line: 766, column: 59, scope: !3129)
!3431 = !DILocation(line: 767, column: 46, scope: !3129)
!3432 = !DILocation(line: 767, column: 49, scope: !3129)
!3433 = !DILocation(line: 767, column: 53, scope: !3129)
!3434 = !DILocation(line: 767, column: 57, scope: !3129)
!3435 = !DILocation(line: 766, column: 10, scope: !3129)
!3436 = !DILocation(line: 766, column: 3, scope: !3129)
!3437 = distinct !DISubprogram(name: "lambda_compute_step_signs", scope: !1, file: !1, line: 985, type: !3438, scopeLine: 986, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!3438 = !DISubroutineType(types: !3439)
!3439 = !{!642, !2241, !642}
!3440 = !DILocalVariable(name: "trans", arg: 1, scope: !3437, file: !1, line: 985, type: !2241)
!3441 = !DILocation(line: 985, column: 48, scope: !3437)
!3442 = !DILocalVariable(name: "stepsigns", arg: 2, scope: !3437, file: !1, line: 985, type: !642)
!3443 = !DILocation(line: 985, column: 69, scope: !3437)
!3444 = !DILocalVariable(name: "matrix", scope: !3437, file: !1, line: 987, type: !2034)
!3445 = !DILocation(line: 987, column: 17, scope: !3437)
!3446 = !DILocalVariable(name: "H", scope: !3437, file: !1, line: 987, type: !2034)
!3447 = !DILocation(line: 987, column: 25, scope: !3437)
!3448 = !DILocalVariable(name: "size", scope: !3437, file: !1, line: 988, type: !644)
!3449 = !DILocation(line: 988, column: 7, scope: !3437)
!3450 = !DILocalVariable(name: "newsteps", scope: !3437, file: !1, line: 989, type: !642)
!3451 = !DILocation(line: 989, column: 17, scope: !3437)
!3452 = !DILocalVariable(name: "i", scope: !3437, file: !1, line: 990, type: !644)
!3453 = !DILocation(line: 990, column: 7, scope: !3437)
!3454 = !DILocalVariable(name: "j", scope: !3437, file: !1, line: 990, type: !644)
!3455 = !DILocation(line: 990, column: 10, scope: !3437)
!3456 = !DILocalVariable(name: "factor", scope: !3437, file: !1, line: 990, type: !644)
!3457 = !DILocation(line: 990, column: 13, scope: !3437)
!3458 = !DILocalVariable(name: "minimum_column", scope: !3437, file: !1, line: 990, type: !644)
!3459 = !DILocation(line: 990, column: 21, scope: !3437)
!3460 = !DILocalVariable(name: "temp", scope: !3437, file: !1, line: 991, type: !644)
!3461 = !DILocation(line: 991, column: 7, scope: !3437)
!3462 = !DILocation(line: 993, column: 12, scope: !3437)
!3463 = !DILocation(line: 993, column: 10, scope: !3437)
!3464 = !DILocation(line: 994, column: 10, scope: !3437)
!3465 = !DILocation(line: 994, column: 8, scope: !3437)
!3466 = !DILocation(line: 995, column: 26, scope: !3437)
!3467 = !DILocation(line: 995, column: 32, scope: !3437)
!3468 = !DILocation(line: 995, column: 7, scope: !3437)
!3469 = !DILocation(line: 995, column: 5, scope: !3437)
!3470 = !DILocation(line: 997, column: 33, scope: !3437)
!3471 = !DILocation(line: 997, column: 14, scope: !3437)
!3472 = !DILocation(line: 997, column: 12, scope: !3437)
!3473 = !DILocation(line: 998, column: 23, scope: !3437)
!3474 = !DILocation(line: 998, column: 34, scope: !3437)
!3475 = !DILocation(line: 998, column: 44, scope: !3437)
!3476 = !DILocation(line: 998, column: 3, scope: !3437)
!3477 = !DILocation(line: 1000, column: 23, scope: !3437)
!3478 = !DILocation(line: 1000, column: 31, scope: !3437)
!3479 = !DILocation(line: 1000, column: 34, scope: !3437)
!3480 = !DILocation(line: 1000, column: 40, scope: !3437)
!3481 = !DILocation(line: 1000, column: 3, scope: !3437)
!3482 = !DILocation(line: 1002, column: 10, scope: !3483)
!3483 = distinct !DILexicalBlock(scope: !3437, file: !1, line: 1002, column: 3)
!3484 = !DILocation(line: 1002, column: 8, scope: !3483)
!3485 = !DILocation(line: 1002, column: 15, scope: !3486)
!3486 = distinct !DILexicalBlock(scope: !3483, file: !1, line: 1002, column: 3)
!3487 = !DILocation(line: 1002, column: 19, scope: !3486)
!3488 = !DILocation(line: 1002, column: 17, scope: !3486)
!3489 = !DILocation(line: 1002, column: 3, scope: !3483)
!3490 = !DILocalVariable(name: "row", scope: !3491, file: !1, line: 1004, type: !642)
!3491 = distinct !DILexicalBlock(scope: !3486, file: !1, line: 1003, column: 5)
!3492 = !DILocation(line: 1004, column: 21, scope: !3491)
!3493 = !DILocation(line: 1005, column: 13, scope: !3491)
!3494 = !DILocation(line: 1005, column: 15, scope: !3491)
!3495 = !DILocation(line: 1005, column: 11, scope: !3491)
!3496 = !DILocation(line: 1006, column: 16, scope: !3497)
!3497 = distinct !DILexicalBlock(scope: !3491, file: !1, line: 1006, column: 7)
!3498 = !DILocation(line: 1006, column: 14, scope: !3497)
!3499 = !DILocation(line: 1006, column: 12, scope: !3497)
!3500 = !DILocation(line: 1006, column: 19, scope: !3501)
!3501 = distinct !DILexicalBlock(scope: !3497, file: !1, line: 1006, column: 7)
!3502 = !DILocation(line: 1006, column: 23, scope: !3501)
!3503 = !DILocation(line: 1006, column: 21, scope: !3501)
!3504 = !DILocation(line: 1006, column: 7, scope: !3497)
!3505 = !DILocation(line: 1007, column: 6, scope: !3506)
!3506 = distinct !DILexicalBlock(scope: !3501, file: !1, line: 1007, column: 6)
!3507 = !DILocation(line: 1007, column: 10, scope: !3506)
!3508 = !DILocation(line: 1007, column: 13, scope: !3506)
!3509 = !DILocation(line: 1007, column: 6, scope: !3501)
!3510 = !DILocation(line: 1008, column: 30, scope: !3506)
!3511 = !DILocation(line: 1008, column: 33, scope: !3506)
!3512 = !DILocation(line: 1008, column: 39, scope: !3506)
!3513 = !DILocation(line: 1008, column: 4, scope: !3506)
!3514 = !DILocation(line: 1007, column: 15, scope: !3506)
!3515 = !DILocation(line: 1006, column: 30, scope: !3501)
!3516 = !DILocation(line: 1006, column: 7, scope: !3501)
!3517 = distinct !{!3517, !3504, !3518}
!3518 = !DILocation(line: 1008, column: 40, scope: !3497)
!3519 = !DILocation(line: 1009, column: 7, scope: !3491)
!3520 = !DILocation(line: 1009, column: 38, scope: !3491)
!3521 = !DILocation(line: 1009, column: 43, scope: !3491)
!3522 = !DILocation(line: 1009, column: 49, scope: !3491)
!3523 = !DILocation(line: 1009, column: 51, scope: !3491)
!3524 = !DILocation(line: 1009, column: 14, scope: !3491)
!3525 = !DILocation(line: 1009, column: 58, scope: !3491)
!3526 = !DILocation(line: 1009, column: 56, scope: !3491)
!3527 = !DILocation(line: 1011, column: 43, scope: !3528)
!3528 = distinct !DILexicalBlock(scope: !3491, file: !1, line: 1010, column: 2)
!3529 = !DILocation(line: 1011, column: 48, scope: !3528)
!3530 = !DILocation(line: 1011, column: 54, scope: !3528)
!3531 = !DILocation(line: 1011, column: 21, scope: !3528)
!3532 = !DILocation(line: 1011, column: 19, scope: !3528)
!3533 = !DILocation(line: 1012, column: 32, scope: !3528)
!3534 = !DILocation(line: 1012, column: 35, scope: !3528)
!3535 = !DILocation(line: 1012, column: 41, scope: !3528)
!3536 = !DILocation(line: 1012, column: 44, scope: !3528)
!3537 = !DILocation(line: 1012, column: 4, scope: !3528)
!3538 = !DILocation(line: 1014, column: 11, scope: !3528)
!3539 = !DILocation(line: 1014, column: 20, scope: !3528)
!3540 = !DILocation(line: 1014, column: 9, scope: !3528)
!3541 = !DILocation(line: 1015, column: 18, scope: !3528)
!3542 = !DILocation(line: 1015, column: 27, scope: !3528)
!3543 = !DILocation(line: 1015, column: 4, scope: !3528)
!3544 = !DILocation(line: 1015, column: 13, scope: !3528)
!3545 = !DILocation(line: 1015, column: 16, scope: !3528)
!3546 = !DILocation(line: 1016, column: 31, scope: !3528)
!3547 = !DILocation(line: 1016, column: 4, scope: !3528)
!3548 = !DILocation(line: 1016, column: 13, scope: !3528)
!3549 = !DILocation(line: 1016, column: 29, scope: !3528)
!3550 = !DILocation(line: 1018, column: 13, scope: !3551)
!3551 = distinct !DILexicalBlock(scope: !3528, file: !1, line: 1018, column: 4)
!3552 = !DILocation(line: 1018, column: 15, scope: !3551)
!3553 = !DILocation(line: 1018, column: 11, scope: !3551)
!3554 = !DILocation(line: 1018, column: 9, scope: !3551)
!3555 = !DILocation(line: 1018, column: 20, scope: !3556)
!3556 = distinct !DILexicalBlock(scope: !3551, file: !1, line: 1018, column: 4)
!3557 = !DILocation(line: 1018, column: 24, scope: !3556)
!3558 = !DILocation(line: 1018, column: 22, scope: !3556)
!3559 = !DILocation(line: 1018, column: 4, scope: !3551)
!3560 = !DILocation(line: 1020, column: 17, scope: !3561)
!3561 = distinct !DILexicalBlock(scope: !3556, file: !1, line: 1019, column: 6)
!3562 = !DILocation(line: 1020, column: 21, scope: !3561)
!3563 = !DILocation(line: 1020, column: 26, scope: !3561)
!3564 = !DILocation(line: 1020, column: 30, scope: !3561)
!3565 = !DILocation(line: 1020, column: 24, scope: !3561)
!3566 = !DILocation(line: 1020, column: 15, scope: !3561)
!3567 = !DILocation(line: 1021, column: 31, scope: !3561)
!3568 = !DILocation(line: 1021, column: 34, scope: !3561)
!3569 = !DILocation(line: 1021, column: 40, scope: !3561)
!3570 = !DILocation(line: 1021, column: 43, scope: !3561)
!3571 = !DILocation(line: 1021, column: 51, scope: !3561)
!3572 = !DILocation(line: 1021, column: 49, scope: !3561)
!3573 = !DILocation(line: 1021, column: 8, scope: !3561)
!3574 = !DILocation(line: 1022, column: 6, scope: !3561)
!3575 = !DILocation(line: 1018, column: 31, scope: !3556)
!3576 = !DILocation(line: 1018, column: 4, scope: !3556)
!3577 = distinct !{!3577, !3559, !3578}
!3578 = !DILocation(line: 1022, column: 6, scope: !3551)
!3579 = distinct !{!3579, !3519, !3580}
!3580 = !DILocation(line: 1023, column: 2, scope: !3491)
!3581 = !DILocation(line: 1024, column: 5, scope: !3491)
!3582 = !DILocation(line: 1002, column: 26, scope: !3486)
!3583 = !DILocation(line: 1002, column: 3, scope: !3486)
!3584 = distinct !{!3584, !3489, !3585}
!3585 = !DILocation(line: 1024, column: 5, scope: !3483)
!3586 = !DILocation(line: 1025, column: 10, scope: !3437)
!3587 = !DILocation(line: 1025, column: 3, scope: !3437)
!3588 = distinct !DISubprogram(name: "lambda_compute_target_space", scope: !1, file: !1, line: 779, type: !3589, scopeLine: 782, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!3589 = !DISubroutineType(types: !3590)
!3590 = !{!659, !659, !2241, !642, !2209}
!3591 = !DILocalVariable(name: "auxillary_nest", arg: 1, scope: !3588, file: !1, line: 779, type: !659)
!3592 = !DILocation(line: 779, column: 46, scope: !3588)
!3593 = !DILocalVariable(name: "H", arg: 2, scope: !3588, file: !1, line: 780, type: !2241)
!3594 = !DILocation(line: 780, column: 50, scope: !3588)
!3595 = !DILocalVariable(name: "stepsigns", arg: 3, scope: !3588, file: !1, line: 780, type: !642)
!3596 = !DILocation(line: 780, column: 67, scope: !3588)
!3597 = !DILocalVariable(name: "lambda_obstack", arg: 4, scope: !3588, file: !1, line: 781, type: !2209)
!3598 = !DILocation(line: 781, column: 47, scope: !3588)
!3599 = !DILocalVariable(name: "inverse", scope: !3588, file: !1, line: 783, type: !2034)
!3600 = !DILocation(line: 783, column: 17, scope: !3588)
!3601 = !DILocalVariable(name: "H1", scope: !3588, file: !1, line: 783, type: !2034)
!3602 = !DILocation(line: 783, column: 26, scope: !3588)
!3603 = !DILocalVariable(name: "determinant", scope: !3588, file: !1, line: 784, type: !644)
!3604 = !DILocation(line: 784, column: 7, scope: !3588)
!3605 = !DILocalVariable(name: "i", scope: !3588, file: !1, line: 784, type: !644)
!3606 = !DILocation(line: 784, column: 20, scope: !3588)
!3607 = !DILocalVariable(name: "j", scope: !3588, file: !1, line: 784, type: !644)
!3608 = !DILocation(line: 784, column: 23, scope: !3588)
!3609 = !DILocalVariable(name: "gcd1", scope: !3588, file: !1, line: 785, type: !644)
!3610 = !DILocation(line: 785, column: 7, scope: !3588)
!3611 = !DILocalVariable(name: "gcd2", scope: !3588, file: !1, line: 785, type: !644)
!3612 = !DILocation(line: 785, column: 13, scope: !3588)
!3613 = !DILocalVariable(name: "factor", scope: !3588, file: !1, line: 786, type: !644)
!3614 = !DILocation(line: 786, column: 7, scope: !3588)
!3615 = !DILocalVariable(name: "target_nest", scope: !3588, file: !1, line: 788, type: !659)
!3616 = !DILocation(line: 788, column: 19, scope: !3588)
!3617 = !DILocalVariable(name: "depth", scope: !3588, file: !1, line: 789, type: !644)
!3618 = !DILocation(line: 789, column: 7, scope: !3588)
!3619 = !DILocalVariable(name: "invariants", scope: !3588, file: !1, line: 789, type: !644)
!3620 = !DILocation(line: 789, column: 14, scope: !3588)
!3621 = !DILocalVariable(name: "target", scope: !3588, file: !1, line: 790, type: !2034)
!3622 = !DILocation(line: 790, column: 17, scope: !3588)
!3623 = !DILocalVariable(name: "auxillary_loop", scope: !3588, file: !1, line: 792, type: !665)
!3624 = !DILocation(line: 792, column: 15, scope: !3588)
!3625 = !DILocalVariable(name: "target_loop", scope: !3588, file: !1, line: 792, type: !665)
!3626 = !DILocation(line: 792, column: 31, scope: !3588)
!3627 = !DILocalVariable(name: "expression", scope: !3588, file: !1, line: 793, type: !650)
!3628 = !DILocation(line: 793, column: 28, scope: !3588)
!3629 = !DILocalVariable(name: "auxillary_expr", scope: !3588, file: !1, line: 793, type: !650)
!3630 = !DILocation(line: 793, column: 40, scope: !3588)
!3631 = !DILocalVariable(name: "target_expr", scope: !3588, file: !1, line: 793, type: !650)
!3632 = !DILocation(line: 793, column: 56, scope: !3588)
!3633 = !DILocalVariable(name: "tmp_expr", scope: !3588, file: !1, line: 793, type: !650)
!3634 = !DILocation(line: 793, column: 69, scope: !3588)
!3635 = !DILocation(line: 795, column: 11, scope: !3588)
!3636 = !DILocation(line: 795, column: 9, scope: !3588)
!3637 = !DILocation(line: 796, column: 16, scope: !3588)
!3638 = !DILocation(line: 796, column: 14, scope: !3588)
!3639 = !DILocation(line: 798, column: 32, scope: !3588)
!3640 = !DILocation(line: 798, column: 39, scope: !3588)
!3641 = !DILocation(line: 798, column: 13, scope: !3588)
!3642 = !DILocation(line: 798, column: 11, scope: !3588)
!3643 = !DILocation(line: 799, column: 40, scope: !3588)
!3644 = !DILocation(line: 799, column: 56, scope: !3588)
!3645 = !DILocation(line: 799, column: 65, scope: !3588)
!3646 = !DILocation(line: 799, column: 17, scope: !3588)
!3647 = !DILocation(line: 799, column: 15, scope: !3588)
!3648 = !DILocation(line: 802, column: 27, scope: !3588)
!3649 = !DILocation(line: 802, column: 34, scope: !3588)
!3650 = !DILocation(line: 802, column: 8, scope: !3588)
!3651 = !DILocation(line: 802, column: 6, scope: !3588)
!3652 = !DILocation(line: 803, column: 23, scope: !3588)
!3653 = !DILocation(line: 803, column: 39, scope: !3588)
!3654 = !DILocation(line: 803, column: 43, scope: !3588)
!3655 = !DILocation(line: 803, column: 50, scope: !3588)
!3656 = !DILocation(line: 803, column: 3, scope: !3588)
!3657 = !DILocation(line: 805, column: 10, scope: !3658)
!3658 = distinct !DILexicalBlock(scope: !3588, file: !1, line: 805, column: 3)
!3659 = !DILocation(line: 805, column: 8, scope: !3658)
!3660 = !DILocation(line: 805, column: 15, scope: !3661)
!3661 = distinct !DILexicalBlock(scope: !3658, file: !1, line: 805, column: 3)
!3662 = !DILocation(line: 805, column: 19, scope: !3661)
!3663 = !DILocation(line: 805, column: 17, scope: !3661)
!3664 = !DILocation(line: 805, column: 3, scope: !3658)
!3665 = !DILocation(line: 806, column: 5, scope: !3661)
!3666 = !DILocation(line: 806, column: 8, scope: !3661)
!3667 = !DILocation(line: 806, column: 11, scope: !3661)
!3668 = !DILocation(line: 806, column: 14, scope: !3661)
!3669 = !DILocation(line: 805, column: 27, scope: !3661)
!3670 = !DILocation(line: 805, column: 3, scope: !3661)
!3671 = distinct !{!3671, !3664, !3672}
!3672 = !DILocation(line: 806, column: 16, scope: !3658)
!3673 = !DILocation(line: 809, column: 31, scope: !3588)
!3674 = !DILocation(line: 809, column: 38, scope: !3588)
!3675 = !DILocation(line: 809, column: 12, scope: !3588)
!3676 = !DILocation(line: 809, column: 10, scope: !3588)
!3677 = !DILocation(line: 810, column: 23, scope: !3588)
!3678 = !DILocation(line: 810, column: 27, scope: !3588)
!3679 = !DILocation(line: 810, column: 36, scope: !3588)
!3680 = !DILocation(line: 810, column: 44, scope: !3588)
!3681 = !DILocation(line: 810, column: 51, scope: !3588)
!3682 = !DILocation(line: 810, column: 58, scope: !3588)
!3683 = !DILocation(line: 810, column: 3, scope: !3588)
!3684 = !DILocation(line: 812, column: 38, scope: !3588)
!3685 = !DILocation(line: 812, column: 45, scope: !3588)
!3686 = !DILocation(line: 812, column: 57, scope: !3588)
!3687 = !DILocation(line: 812, column: 17, scope: !3588)
!3688 = !DILocation(line: 812, column: 15, scope: !3588)
!3689 = !DILocation(line: 814, column: 10, scope: !3690)
!3690 = distinct !DILexicalBlock(scope: !3588, file: !1, line: 814, column: 3)
!3691 = !DILocation(line: 814, column: 8, scope: !3690)
!3692 = !DILocation(line: 814, column: 15, scope: !3693)
!3693 = distinct !DILexicalBlock(scope: !3690, file: !1, line: 814, column: 3)
!3694 = !DILocation(line: 814, column: 19, scope: !3693)
!3695 = !DILocation(line: 814, column: 17, scope: !3693)
!3696 = !DILocation(line: 814, column: 3, scope: !3690)
!3697 = !DILocation(line: 818, column: 21, scope: !3698)
!3698 = distinct !DILexicalBlock(scope: !3693, file: !1, line: 815, column: 5)
!3699 = !DILocation(line: 818, column: 19, scope: !3698)
!3700 = !DILocation(line: 819, column: 35, scope: !3698)
!3701 = !DILocation(line: 819, column: 7, scope: !3698)
!3702 = !DILocation(line: 819, column: 30, scope: !3698)
!3703 = !DILocation(line: 819, column: 33, scope: !3698)
!3704 = !DILocation(line: 822, column: 33, scope: !3698)
!3705 = !DILocation(line: 822, column: 40, scope: !3698)
!3706 = !DILocation(line: 822, column: 44, scope: !3698)
!3707 = !DILocation(line: 822, column: 14, scope: !3698)
!3708 = !DILocation(line: 822, column: 12, scope: !3698)
!3709 = !DILocation(line: 825, column: 19, scope: !3698)
!3710 = !DILocation(line: 825, column: 25, scope: !3698)
!3711 = !DILocation(line: 825, column: 14, scope: !3698)
!3712 = !DILocation(line: 825, column: 12, scope: !3698)
!3713 = !DILocation(line: 828, column: 14, scope: !3714)
!3714 = distinct !DILexicalBlock(scope: !3698, file: !1, line: 828, column: 7)
!3715 = !DILocation(line: 828, column: 12, scope: !3714)
!3716 = !DILocation(line: 828, column: 19, scope: !3717)
!3717 = distinct !DILexicalBlock(scope: !3714, file: !1, line: 828, column: 7)
!3718 = !DILocation(line: 828, column: 23, scope: !3717)
!3719 = !DILocation(line: 828, column: 21, scope: !3717)
!3720 = !DILocation(line: 828, column: 7, scope: !3714)
!3721 = !DILocation(line: 829, column: 17, scope: !3717)
!3722 = !DILocation(line: 829, column: 24, scope: !3717)
!3723 = !DILocation(line: 829, column: 27, scope: !3717)
!3724 = !DILocation(line: 829, column: 32, scope: !3717)
!3725 = !DILocation(line: 829, column: 30, scope: !3717)
!3726 = !DILocation(line: 829, column: 2, scope: !3717)
!3727 = !DILocation(line: 829, column: 9, scope: !3717)
!3728 = !DILocation(line: 829, column: 12, scope: !3717)
!3729 = !DILocation(line: 829, column: 15, scope: !3717)
!3730 = !DILocation(line: 828, column: 27, scope: !3717)
!3731 = !DILocation(line: 828, column: 7, scope: !3717)
!3732 = distinct !{!3732, !3720, !3733}
!3733 = !DILocation(line: 829, column: 32, scope: !3714)
!3734 = !DILocation(line: 831, column: 50, scope: !3698)
!3735 = !DILocation(line: 831, column: 57, scope: !3698)
!3736 = !DILocation(line: 832, column: 50, scope: !3698)
!3737 = !DILocation(line: 831, column: 20, scope: !3698)
!3738 = !DILocation(line: 831, column: 18, scope: !3698)
!3739 = !DILocation(line: 833, column: 27, scope: !3698)
!3740 = !DILocation(line: 833, column: 34, scope: !3698)
!3741 = !DILocation(line: 833, column: 38, scope: !3698)
!3742 = !DILocation(line: 833, column: 69, scope: !3698)
!3743 = !DILocation(line: 833, column: 7, scope: !3698)
!3744 = !DILocation(line: 834, column: 38, scope: !3698)
!3745 = !DILocation(line: 834, column: 52, scope: !3698)
!3746 = !DILocation(line: 834, column: 50, scope: !3698)
!3747 = !DILocation(line: 834, column: 7, scope: !3698)
!3748 = !DILocation(line: 834, column: 36, scope: !3698)
!3749 = !DILocation(line: 835, column: 7, scope: !3698)
!3750 = !DILocation(line: 835, column: 33, scope: !3698)
!3751 = !DILocation(line: 836, column: 28, scope: !3698)
!3752 = !DILocation(line: 837, column: 7, scope: !3698)
!3753 = !DILocation(line: 836, column: 7, scope: !3698)
!3754 = !DILocation(line: 838, column: 40, scope: !3698)
!3755 = !DILocation(line: 838, column: 7, scope: !3698)
!3756 = !DILocation(line: 838, column: 38, scope: !3698)
!3757 = !DILocation(line: 839, column: 5, scope: !3698)
!3758 = !DILocation(line: 814, column: 27, scope: !3693)
!3759 = !DILocation(line: 814, column: 3, scope: !3693)
!3760 = distinct !{!3760, !3696, !3761}
!3761 = !DILocation(line: 839, column: 5, scope: !3690)
!3762 = !DILocation(line: 842, column: 10, scope: !3763)
!3763 = distinct !DILexicalBlock(scope: !3588, file: !1, line: 842, column: 3)
!3764 = !DILocation(line: 842, column: 8, scope: !3763)
!3765 = !DILocation(line: 842, column: 15, scope: !3766)
!3766 = distinct !DILexicalBlock(scope: !3763, file: !1, line: 842, column: 3)
!3767 = !DILocation(line: 842, column: 19, scope: !3766)
!3768 = !DILocation(line: 842, column: 17, scope: !3766)
!3769 = !DILocation(line: 842, column: 3, scope: !3763)
!3770 = !DILocation(line: 844, column: 24, scope: !3771)
!3771 = distinct !DILexicalBlock(scope: !3766, file: !1, line: 843, column: 5)
!3772 = !DILocation(line: 844, column: 50, scope: !3771)
!3773 = !DILocation(line: 844, column: 22, scope: !3771)
!3774 = !DILocation(line: 845, column: 21, scope: !3771)
!3775 = !DILocation(line: 845, column: 44, scope: !3771)
!3776 = !DILocation(line: 845, column: 19, scope: !3771)
!3777 = !DILocation(line: 846, column: 31, scope: !3771)
!3778 = !DILocation(line: 846, column: 46, scope: !3771)
!3779 = !DILocation(line: 846, column: 49, scope: !3771)
!3780 = !DILocation(line: 846, column: 7, scope: !3771)
!3781 = !DILocation(line: 846, column: 29, scope: !3771)
!3782 = !DILocation(line: 847, column: 16, scope: !3771)
!3783 = !DILocation(line: 847, column: 31, scope: !3771)
!3784 = !DILocation(line: 847, column: 34, scope: !3771)
!3785 = !DILocation(line: 847, column: 14, scope: !3771)
!3786 = !DILocation(line: 850, column: 24, scope: !3771)
!3787 = !DILocation(line: 850, column: 22, scope: !3771)
!3788 = !DILocation(line: 852, column: 7, scope: !3771)
!3789 = !DILocation(line: 852, column: 14, scope: !3790)
!3790 = distinct !DILexicalBlock(scope: !3791, file: !1, line: 852, column: 7)
!3791 = distinct !DILexicalBlock(scope: !3771, file: !1, line: 852, column: 7)
!3792 = !DILocation(line: 852, column: 29, scope: !3790)
!3793 = !DILocation(line: 852, column: 7, scope: !3791)
!3794 = !DILocation(line: 855, column: 55, scope: !3795)
!3795 = distinct !DILexicalBlock(scope: !3790, file: !1, line: 854, column: 2)
!3796 = !DILocation(line: 855, column: 62, scope: !3795)
!3797 = !DILocation(line: 856, column: 55, scope: !3795)
!3798 = !DILocation(line: 855, column: 25, scope: !3795)
!3799 = !DILocation(line: 855, column: 23, scope: !3795)
!3800 = !DILocation(line: 857, column: 31, scope: !3795)
!3801 = !DILocation(line: 858, column: 10, scope: !3795)
!3802 = !DILocation(line: 858, column: 17, scope: !3795)
!3803 = !DILocation(line: 858, column: 26, scope: !3795)
!3804 = !DILocation(line: 859, column: 10, scope: !3795)
!3805 = !DILocation(line: 857, column: 4, scope: !3795)
!3806 = !DILocation(line: 860, column: 30, scope: !3795)
!3807 = !DILocation(line: 861, column: 9, scope: !3795)
!3808 = !DILocation(line: 861, column: 41, scope: !3795)
!3809 = !DILocation(line: 862, column: 9, scope: !3795)
!3810 = !DILocation(line: 860, column: 4, scope: !3795)
!3811 = !DILocation(line: 864, column: 33, scope: !3795)
!3812 = !DILocation(line: 864, column: 65, scope: !3795)
!3813 = !DILocation(line: 864, column: 63, scope: !3795)
!3814 = !DILocation(line: 864, column: 4, scope: !3795)
!3815 = !DILocation(line: 864, column: 31, scope: !3795)
!3816 = !DILocation(line: 865, column: 24, scope: !3795)
!3817 = !DILocation(line: 866, column: 10, scope: !3795)
!3818 = !DILocation(line: 867, column: 10, scope: !3795)
!3819 = !DILocation(line: 865, column: 4, scope: !3795)
!3820 = !DILocation(line: 868, column: 30, scope: !3795)
!3821 = !DILocation(line: 869, column: 9, scope: !3795)
!3822 = !DILocation(line: 870, column: 9, scope: !3795)
!3823 = !DILocation(line: 870, column: 21, scope: !3795)
!3824 = !DILocation(line: 868, column: 4, scope: !3795)
!3825 = !DILocation(line: 871, column: 36, scope: !3795)
!3826 = !DILocation(line: 871, column: 4, scope: !3795)
!3827 = !DILocation(line: 871, column: 34, scope: !3795)
!3828 = !DILocation(line: 873, column: 30, scope: !3829)
!3829 = distinct !DILexicalBlock(scope: !3795, file: !1, line: 873, column: 8)
!3830 = !DILocation(line: 873, column: 62, scope: !3829)
!3831 = !DILocation(line: 873, column: 9, scope: !3829)
!3832 = !DILocation(line: 873, column: 8, scope: !3795)
!3833 = !DILocation(line: 875, column: 37, scope: !3834)
!3834 = distinct !DILexicalBlock(scope: !3829, file: !1, line: 874, column: 6)
!3835 = !DILocation(line: 876, column: 5, scope: !3834)
!3836 = !DILocation(line: 876, column: 3, scope: !3834)
!3837 = !DILocation(line: 875, column: 8, scope: !3834)
!3838 = !DILocation(line: 875, column: 35, scope: !3834)
!3839 = !DILocation(line: 877, column: 34, scope: !3834)
!3840 = !DILocation(line: 879, column: 6, scope: !3834)
!3841 = !DILocation(line: 880, column: 21, scope: !3834)
!3842 = !DILocation(line: 881, column: 6, scope: !3834)
!3843 = !DILocation(line: 877, column: 8, scope: !3834)
!3844 = !DILocation(line: 883, column: 3, scope: !3834)
!3845 = !DILocation(line: 883, column: 35, scope: !3834)
!3846 = !DILocation(line: 883, column: 33, scope: !3834)
!3847 = !DILocation(line: 882, column: 8, scope: !3834)
!3848 = !DILocation(line: 882, column: 38, scope: !3834)
!3849 = !DILocation(line: 884, column: 6, scope: !3834)
!3850 = !DILocation(line: 887, column: 30, scope: !3795)
!3851 = !DILocation(line: 887, column: 62, scope: !3795)
!3852 = !DILocation(line: 887, column: 11, scope: !3795)
!3853 = !DILocation(line: 887, column: 9, scope: !3795)
!3854 = !DILocation(line: 888, column: 30, scope: !3795)
!3855 = !DILocation(line: 889, column: 9, scope: !3795)
!3856 = !DILocation(line: 888, column: 11, scope: !3795)
!3857 = !DILocation(line: 888, column: 9, scope: !3795)
!3858 = !DILocation(line: 890, column: 16, scope: !3795)
!3859 = !DILocation(line: 890, column: 22, scope: !3795)
!3860 = !DILocation(line: 890, column: 11, scope: !3795)
!3861 = !DILocation(line: 890, column: 9, scope: !3795)
!3862 = !DILocation(line: 891, column: 16, scope: !3795)
!3863 = !DILocation(line: 891, column: 22, scope: !3795)
!3864 = !DILocation(line: 891, column: 11, scope: !3795)
!3865 = !DILocation(line: 891, column: 9, scope: !3795)
!3866 = !DILocation(line: 892, column: 16, scope: !3795)
!3867 = !DILocation(line: 892, column: 22, scope: !3795)
!3868 = !DILocation(line: 892, column: 11, scope: !3795)
!3869 = !DILocation(line: 892, column: 9, scope: !3795)
!3870 = !DILocation(line: 893, column: 11, scope: !3871)
!3871 = distinct !DILexicalBlock(scope: !3795, file: !1, line: 893, column: 4)
!3872 = !DILocation(line: 893, column: 9, scope: !3871)
!3873 = !DILocation(line: 893, column: 16, scope: !3874)
!3874 = distinct !DILexicalBlock(scope: !3871, file: !1, line: 893, column: 4)
!3875 = !DILocation(line: 893, column: 20, scope: !3874)
!3876 = !DILocation(line: 893, column: 18, scope: !3874)
!3877 = !DILocation(line: 893, column: 4, scope: !3871)
!3878 = !DILocation(line: 894, column: 43, scope: !3874)
!3879 = !DILocation(line: 894, column: 6, scope: !3874)
!3880 = !DILocation(line: 894, column: 37, scope: !3874)
!3881 = !DILocation(line: 894, column: 40, scope: !3874)
!3882 = !DILocation(line: 893, column: 28, scope: !3874)
!3883 = !DILocation(line: 893, column: 4, scope: !3874)
!3884 = distinct !{!3884, !3877, !3885}
!3885 = !DILocation(line: 894, column: 43, scope: !3871)
!3886 = !DILocation(line: 895, column: 11, scope: !3887)
!3887 = distinct !DILexicalBlock(scope: !3795, file: !1, line: 895, column: 4)
!3888 = !DILocation(line: 895, column: 9, scope: !3887)
!3889 = !DILocation(line: 895, column: 16, scope: !3890)
!3890 = distinct !DILexicalBlock(scope: !3887, file: !1, line: 895, column: 4)
!3891 = !DILocation(line: 895, column: 20, scope: !3890)
!3892 = !DILocation(line: 895, column: 18, scope: !3890)
!3893 = !DILocation(line: 895, column: 4, scope: !3887)
!3894 = !DILocation(line: 896, column: 53, scope: !3890)
!3895 = !DILocation(line: 896, column: 6, scope: !3890)
!3896 = !DILocation(line: 896, column: 47, scope: !3890)
!3897 = !DILocation(line: 896, column: 50, scope: !3890)
!3898 = !DILocation(line: 895, column: 33, scope: !3890)
!3899 = !DILocation(line: 895, column: 4, scope: !3890)
!3900 = distinct !{!3900, !3893, !3901}
!3901 = !DILocation(line: 896, column: 53, scope: !3887)
!3902 = !DILocation(line: 897, column: 34, scope: !3795)
!3903 = !DILocation(line: 897, column: 4, scope: !3795)
!3904 = !DILocation(line: 897, column: 31, scope: !3795)
!3905 = !DILocation(line: 898, column: 37, scope: !3795)
!3906 = !DILocation(line: 898, column: 4, scope: !3795)
!3907 = !DILocation(line: 898, column: 34, scope: !3795)
!3908 = !DILocation(line: 900, column: 20, scope: !3909)
!3909 = distinct !DILexicalBlock(scope: !3795, file: !1, line: 900, column: 8)
!3910 = !DILocation(line: 900, column: 50, scope: !3909)
!3911 = !DILocation(line: 900, column: 63, scope: !3909)
!3912 = !DILocation(line: 901, column: 6, scope: !3909)
!3913 = !DILocation(line: 900, column: 9, scope: !3909)
!3914 = !DILocation(line: 900, column: 8, scope: !3795)
!3915 = !DILocation(line: 903, column: 33, scope: !3916)
!3916 = distinct !DILexicalBlock(scope: !3909, file: !1, line: 902, column: 6)
!3917 = !DILocation(line: 903, column: 8, scope: !3916)
!3918 = !DILocation(line: 903, column: 31, scope: !3916)
!3919 = !DILocation(line: 904, column: 39, scope: !3916)
!3920 = !DILocation(line: 904, column: 8, scope: !3916)
!3921 = !DILocation(line: 904, column: 37, scope: !3916)
!3922 = !DILocation(line: 905, column: 6, scope: !3916)
!3923 = !DILocation(line: 906, column: 2, scope: !3795)
!3924 = !DILocation(line: 853, column: 22, scope: !3790)
!3925 = !DILocation(line: 853, column: 20, scope: !3790)
!3926 = !DILocation(line: 852, column: 7, scope: !3790)
!3927 = distinct !{!3927, !3793, !3928}
!3928 = !DILocation(line: 906, column: 2, scope: !3791)
!3929 = !DILocation(line: 908, column: 24, scope: !3771)
!3930 = !DILocation(line: 908, column: 22, scope: !3771)
!3931 = !DILocation(line: 910, column: 7, scope: !3771)
!3932 = !DILocation(line: 910, column: 14, scope: !3933)
!3933 = distinct !DILexicalBlock(scope: !3934, file: !1, line: 910, column: 7)
!3934 = distinct !DILexicalBlock(scope: !3771, file: !1, line: 910, column: 7)
!3935 = !DILocation(line: 910, column: 29, scope: !3933)
!3936 = !DILocation(line: 910, column: 7, scope: !3934)
!3937 = !DILocation(line: 913, column: 55, scope: !3938)
!3938 = distinct !DILexicalBlock(scope: !3933, file: !1, line: 912, column: 2)
!3939 = !DILocation(line: 913, column: 62, scope: !3938)
!3940 = !DILocation(line: 914, column: 55, scope: !3938)
!3941 = !DILocation(line: 913, column: 25, scope: !3938)
!3942 = !DILocation(line: 913, column: 23, scope: !3938)
!3943 = !DILocation(line: 915, column: 31, scope: !3938)
!3944 = !DILocation(line: 916, column: 10, scope: !3938)
!3945 = !DILocation(line: 916, column: 17, scope: !3938)
!3946 = !DILocation(line: 916, column: 26, scope: !3938)
!3947 = !DILocation(line: 917, column: 10, scope: !3938)
!3948 = !DILocation(line: 915, column: 4, scope: !3938)
!3949 = !DILocation(line: 918, column: 30, scope: !3938)
!3950 = !DILocation(line: 919, column: 9, scope: !3938)
!3951 = !DILocation(line: 919, column: 41, scope: !3938)
!3952 = !DILocation(line: 920, column: 9, scope: !3938)
!3953 = !DILocation(line: 918, column: 4, scope: !3938)
!3954 = !DILocation(line: 921, column: 33, scope: !3938)
!3955 = !DILocation(line: 921, column: 65, scope: !3938)
!3956 = !DILocation(line: 921, column: 63, scope: !3938)
!3957 = !DILocation(line: 921, column: 4, scope: !3938)
!3958 = !DILocation(line: 921, column: 31, scope: !3938)
!3959 = !DILocation(line: 922, column: 24, scope: !3938)
!3960 = !DILocation(line: 923, column: 10, scope: !3938)
!3961 = !DILocation(line: 924, column: 10, scope: !3938)
!3962 = !DILocation(line: 922, column: 4, scope: !3938)
!3963 = !DILocation(line: 925, column: 30, scope: !3938)
!3964 = !DILocation(line: 926, column: 9, scope: !3938)
!3965 = !DILocation(line: 927, column: 9, scope: !3938)
!3966 = !DILocation(line: 927, column: 21, scope: !3938)
!3967 = !DILocation(line: 925, column: 4, scope: !3938)
!3968 = !DILocation(line: 928, column: 36, scope: !3938)
!3969 = !DILocation(line: 928, column: 4, scope: !3938)
!3970 = !DILocation(line: 928, column: 34, scope: !3938)
!3971 = !DILocation(line: 930, column: 30, scope: !3972)
!3972 = distinct !DILexicalBlock(scope: !3938, file: !1, line: 930, column: 8)
!3973 = !DILocation(line: 930, column: 62, scope: !3972)
!3974 = !DILocation(line: 930, column: 9, scope: !3972)
!3975 = !DILocation(line: 930, column: 8, scope: !3938)
!3976 = !DILocation(line: 932, column: 37, scope: !3977)
!3977 = distinct !DILexicalBlock(scope: !3972, file: !1, line: 931, column: 6)
!3978 = !DILocation(line: 933, column: 5, scope: !3977)
!3979 = !DILocation(line: 933, column: 3, scope: !3977)
!3980 = !DILocation(line: 932, column: 8, scope: !3977)
!3981 = !DILocation(line: 932, column: 35, scope: !3977)
!3982 = !DILocation(line: 934, column: 34, scope: !3977)
!3983 = !DILocation(line: 936, column: 6, scope: !3977)
!3984 = !DILocation(line: 937, column: 21, scope: !3977)
!3985 = !DILocation(line: 938, column: 6, scope: !3977)
!3986 = !DILocation(line: 934, column: 8, scope: !3977)
!3987 = !DILocation(line: 940, column: 3, scope: !3977)
!3988 = !DILocation(line: 940, column: 35, scope: !3977)
!3989 = !DILocation(line: 940, column: 33, scope: !3977)
!3990 = !DILocation(line: 939, column: 8, scope: !3977)
!3991 = !DILocation(line: 939, column: 38, scope: !3977)
!3992 = !DILocation(line: 941, column: 6, scope: !3977)
!3993 = !DILocation(line: 944, column: 30, scope: !3938)
!3994 = !DILocation(line: 944, column: 62, scope: !3938)
!3995 = !DILocation(line: 944, column: 11, scope: !3938)
!3996 = !DILocation(line: 944, column: 9, scope: !3938)
!3997 = !DILocation(line: 945, column: 30, scope: !3938)
!3998 = !DILocation(line: 946, column: 9, scope: !3938)
!3999 = !DILocation(line: 945, column: 11, scope: !3938)
!4000 = !DILocation(line: 945, column: 9, scope: !3938)
!4001 = !DILocation(line: 947, column: 16, scope: !3938)
!4002 = !DILocation(line: 947, column: 22, scope: !3938)
!4003 = !DILocation(line: 947, column: 11, scope: !3938)
!4004 = !DILocation(line: 947, column: 9, scope: !3938)
!4005 = !DILocation(line: 948, column: 16, scope: !3938)
!4006 = !DILocation(line: 948, column: 22, scope: !3938)
!4007 = !DILocation(line: 948, column: 11, scope: !3938)
!4008 = !DILocation(line: 948, column: 9, scope: !3938)
!4009 = !DILocation(line: 949, column: 16, scope: !3938)
!4010 = !DILocation(line: 949, column: 22, scope: !3938)
!4011 = !DILocation(line: 949, column: 11, scope: !3938)
!4012 = !DILocation(line: 949, column: 9, scope: !3938)
!4013 = !DILocation(line: 950, column: 11, scope: !4014)
!4014 = distinct !DILexicalBlock(scope: !3938, file: !1, line: 950, column: 4)
!4015 = !DILocation(line: 950, column: 9, scope: !4014)
!4016 = !DILocation(line: 950, column: 16, scope: !4017)
!4017 = distinct !DILexicalBlock(scope: !4014, file: !1, line: 950, column: 4)
!4018 = !DILocation(line: 950, column: 20, scope: !4017)
!4019 = !DILocation(line: 950, column: 18, scope: !4017)
!4020 = !DILocation(line: 950, column: 4, scope: !4014)
!4021 = !DILocation(line: 951, column: 43, scope: !4017)
!4022 = !DILocation(line: 951, column: 6, scope: !4017)
!4023 = !DILocation(line: 951, column: 37, scope: !4017)
!4024 = !DILocation(line: 951, column: 40, scope: !4017)
!4025 = !DILocation(line: 950, column: 28, scope: !4017)
!4026 = !DILocation(line: 950, column: 4, scope: !4017)
!4027 = distinct !{!4027, !4020, !4028}
!4028 = !DILocation(line: 951, column: 43, scope: !4014)
!4029 = !DILocation(line: 952, column: 11, scope: !4030)
!4030 = distinct !DILexicalBlock(scope: !3938, file: !1, line: 952, column: 4)
!4031 = !DILocation(line: 952, column: 9, scope: !4030)
!4032 = !DILocation(line: 952, column: 16, scope: !4033)
!4033 = distinct !DILexicalBlock(scope: !4030, file: !1, line: 952, column: 4)
!4034 = !DILocation(line: 952, column: 20, scope: !4033)
!4035 = !DILocation(line: 952, column: 18, scope: !4033)
!4036 = !DILocation(line: 952, column: 4, scope: !4030)
!4037 = !DILocation(line: 953, column: 53, scope: !4033)
!4038 = !DILocation(line: 953, column: 6, scope: !4033)
!4039 = !DILocation(line: 953, column: 47, scope: !4033)
!4040 = !DILocation(line: 953, column: 50, scope: !4033)
!4041 = !DILocation(line: 952, column: 33, scope: !4033)
!4042 = !DILocation(line: 952, column: 4, scope: !4033)
!4043 = distinct !{!4043, !4036, !4044}
!4044 = !DILocation(line: 953, column: 53, scope: !4030)
!4045 = !DILocation(line: 954, column: 34, scope: !3938)
!4046 = !DILocation(line: 954, column: 4, scope: !3938)
!4047 = !DILocation(line: 954, column: 31, scope: !3938)
!4048 = !DILocation(line: 955, column: 37, scope: !3938)
!4049 = !DILocation(line: 955, column: 4, scope: !3938)
!4050 = !DILocation(line: 955, column: 34, scope: !3938)
!4051 = !DILocation(line: 957, column: 20, scope: !4052)
!4052 = distinct !DILexicalBlock(scope: !3938, file: !1, line: 957, column: 8)
!4053 = !DILocation(line: 957, column: 50, scope: !4052)
!4054 = !DILocation(line: 957, column: 63, scope: !4052)
!4055 = !DILocation(line: 958, column: 6, scope: !4052)
!4056 = !DILocation(line: 957, column: 9, scope: !4052)
!4057 = !DILocation(line: 957, column: 8, scope: !3938)
!4058 = !DILocation(line: 960, column: 33, scope: !4059)
!4059 = distinct !DILexicalBlock(scope: !4052, file: !1, line: 959, column: 6)
!4060 = !DILocation(line: 960, column: 8, scope: !4059)
!4061 = !DILocation(line: 960, column: 31, scope: !4059)
!4062 = !DILocation(line: 961, column: 39, scope: !4059)
!4063 = !DILocation(line: 961, column: 8, scope: !4059)
!4064 = !DILocation(line: 961, column: 37, scope: !4059)
!4065 = !DILocation(line: 962, column: 6, scope: !4059)
!4066 = !DILocation(line: 963, column: 2, scope: !3938)
!4067 = !DILocation(line: 911, column: 22, scope: !3933)
!4068 = !DILocation(line: 911, column: 20, scope: !3933)
!4069 = !DILocation(line: 910, column: 7, scope: !3933)
!4070 = distinct !{!4070, !3936, !4071}
!4071 = !DILocation(line: 963, column: 2, scope: !3934)
!4072 = !DILocation(line: 964, column: 5, scope: !3771)
!4073 = !DILocation(line: 842, column: 27, scope: !3766)
!4074 = !DILocation(line: 842, column: 3, scope: !3766)
!4075 = distinct !{!4075, !3769, !4076}
!4076 = !DILocation(line: 964, column: 5, scope: !3763)
!4077 = !DILocation(line: 965, column: 10, scope: !4078)
!4078 = distinct !DILexicalBlock(scope: !3588, file: !1, line: 965, column: 3)
!4079 = !DILocation(line: 965, column: 8, scope: !4078)
!4080 = !DILocation(line: 965, column: 15, scope: !4081)
!4081 = distinct !DILexicalBlock(scope: !4078, file: !1, line: 965, column: 3)
!4082 = !DILocation(line: 965, column: 19, scope: !4081)
!4083 = !DILocation(line: 965, column: 17, scope: !4081)
!4084 = !DILocation(line: 965, column: 3, scope: !4078)
!4085 = !DILocation(line: 967, column: 21, scope: !4086)
!4086 = distinct !DILexicalBlock(scope: !4081, file: !1, line: 966, column: 5)
!4087 = !DILocation(line: 967, column: 44, scope: !4086)
!4088 = !DILocation(line: 967, column: 19, scope: !4086)
!4089 = !DILocation(line: 970, column: 11, scope: !4090)
!4090 = distinct !DILexicalBlock(scope: !4086, file: !1, line: 970, column: 11)
!4091 = !DILocation(line: 970, column: 21, scope: !4090)
!4092 = !DILocation(line: 970, column: 24, scope: !4090)
!4093 = !DILocation(line: 970, column: 11, scope: !4086)
!4094 = !DILocation(line: 972, column: 4, scope: !4095)
!4095 = distinct !DILexicalBlock(scope: !4090, file: !1, line: 971, column: 2)
!4096 = !DILocation(line: 972, column: 26, scope: !4095)
!4097 = !DILocation(line: 973, column: 15, scope: !4095)
!4098 = !DILocation(line: 973, column: 13, scope: !4095)
!4099 = !DILocation(line: 974, column: 35, scope: !4095)
!4100 = !DILocation(line: 974, column: 4, scope: !4095)
!4101 = !DILocation(line: 974, column: 33, scope: !4095)
!4102 = !DILocation(line: 975, column: 35, scope: !4095)
!4103 = !DILocation(line: 975, column: 4, scope: !4095)
!4104 = !DILocation(line: 975, column: 33, scope: !4095)
!4105 = !DILocation(line: 976, column: 2, scope: !4095)
!4106 = !DILocation(line: 977, column: 5, scope: !4086)
!4107 = !DILocation(line: 965, column: 27, scope: !4081)
!4108 = !DILocation(line: 965, column: 3, scope: !4081)
!4109 = distinct !{!4109, !4084, !4110}
!4110 = !DILocation(line: 977, column: 5, scope: !4078)
!4111 = !DILocation(line: 978, column: 10, scope: !3588)
!4112 = !DILocation(line: 978, column: 3, scope: !3588)
!4113 = distinct !DISubprogram(name: "lambda_vector_zerop", scope: !637, file: !637, line: 307, type: !4114, scopeLine: 308, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!4114 = !DISubroutineType(types: !4115)
!4115 = !{!793, !642, !644}
!4116 = !DILocalVariable(name: "vec1", arg: 1, scope: !4113, file: !637, line: 307, type: !642)
!4117 = !DILocation(line: 307, column: 36, scope: !4113)
!4118 = !DILocalVariable(name: "size", arg: 2, scope: !4113, file: !637, line: 307, type: !644)
!4119 = !DILocation(line: 307, column: 46, scope: !4113)
!4120 = !DILocalVariable(name: "i", scope: !4113, file: !637, line: 309, type: !644)
!4121 = !DILocation(line: 309, column: 7, scope: !4113)
!4122 = !DILocation(line: 310, column: 10, scope: !4123)
!4123 = distinct !DILexicalBlock(scope: !4113, file: !637, line: 310, column: 3)
!4124 = !DILocation(line: 310, column: 8, scope: !4123)
!4125 = !DILocation(line: 310, column: 15, scope: !4126)
!4126 = distinct !DILexicalBlock(scope: !4123, file: !637, line: 310, column: 3)
!4127 = !DILocation(line: 310, column: 19, scope: !4126)
!4128 = !DILocation(line: 310, column: 17, scope: !4126)
!4129 = !DILocation(line: 310, column: 3, scope: !4123)
!4130 = !DILocation(line: 311, column: 9, scope: !4131)
!4131 = distinct !DILexicalBlock(scope: !4126, file: !637, line: 311, column: 9)
!4132 = !DILocation(line: 311, column: 14, scope: !4131)
!4133 = !DILocation(line: 311, column: 17, scope: !4131)
!4134 = !DILocation(line: 311, column: 9, scope: !4126)
!4135 = !DILocation(line: 312, column: 7, scope: !4131)
!4136 = !DILocation(line: 311, column: 20, scope: !4131)
!4137 = !DILocation(line: 310, column: 26, scope: !4126)
!4138 = !DILocation(line: 310, column: 3, scope: !4126)
!4139 = distinct !{!4139, !4129, !4140}
!4140 = !DILocation(line: 312, column: 14, scope: !4123)
!4141 = !DILocation(line: 313, column: 3, scope: !4113)
!4142 = !DILocation(line: 314, column: 1, scope: !4113)
!4143 = distinct !DISubprogram(name: "find_induction_var_from_exit_cond", scope: !1, file: !1, line: 1438, type: !4144, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!4144 = !DISubroutineType(types: !4145)
!4145 = !{!675, !1217}
!4146 = !DILocalVariable(name: "loop", arg: 1, scope: !4143, file: !1, line: 1438, type: !1217)
!4147 = !DILocation(line: 1438, column: 49, scope: !4143)
!4148 = !DILocalVariable(name: "expr", scope: !4143, file: !1, line: 1440, type: !1002)
!4149 = !DILocation(line: 1440, column: 10, scope: !4143)
!4150 = !DILocation(line: 1440, column: 42, scope: !4143)
!4151 = !DILocation(line: 1440, column: 17, scope: !4143)
!4152 = !DILocalVariable(name: "ivarop", scope: !4143, file: !1, line: 1441, type: !675)
!4153 = !DILocation(line: 1441, column: 8, scope: !4143)
!4154 = !DILocalVariable(name: "test_lhs", scope: !4143, file: !1, line: 1442, type: !675)
!4155 = !DILocation(line: 1442, column: 8, scope: !4143)
!4156 = !DILocalVariable(name: "test_rhs", scope: !4143, file: !1, line: 1442, type: !675)
!4157 = !DILocation(line: 1442, column: 18, scope: !4143)
!4158 = !DILocation(line: 1443, column: 7, scope: !4159)
!4159 = distinct !DILexicalBlock(scope: !4143, file: !1, line: 1443, column: 7)
!4160 = !DILocation(line: 1443, column: 12, scope: !4159)
!4161 = !DILocation(line: 1443, column: 7, scope: !4143)
!4162 = !DILocation(line: 1444, column: 5, scope: !4159)
!4163 = !DILocation(line: 1445, column: 20, scope: !4164)
!4164 = distinct !DILexicalBlock(scope: !4143, file: !1, line: 1445, column: 7)
!4165 = !DILocation(line: 1445, column: 7, scope: !4164)
!4166 = !DILocation(line: 1445, column: 26, scope: !4164)
!4167 = !DILocation(line: 1445, column: 7, scope: !4143)
!4168 = !DILocation(line: 1446, column: 5, scope: !4164)
!4169 = !DILocation(line: 1447, column: 31, scope: !4143)
!4170 = !DILocation(line: 1447, column: 14, scope: !4143)
!4171 = !DILocation(line: 1447, column: 12, scope: !4143)
!4172 = !DILocation(line: 1448, column: 31, scope: !4143)
!4173 = !DILocation(line: 1448, column: 14, scope: !4143)
!4174 = !DILocation(line: 1448, column: 12, scope: !4143)
!4175 = !DILocation(line: 1453, column: 33, scope: !4176)
!4176 = distinct !DILexicalBlock(scope: !4143, file: !1, line: 1453, column: 7)
!4177 = !DILocation(line: 1453, column: 39, scope: !4176)
!4178 = !DILocation(line: 1453, column: 7, scope: !4176)
!4179 = !DILocation(line: 1453, column: 7, scope: !4143)
!4180 = !DILocation(line: 1454, column: 16, scope: !4176)
!4181 = !DILocation(line: 1454, column: 14, scope: !4176)
!4182 = !DILocation(line: 1454, column: 7, scope: !4176)
!4183 = !DILocation(line: 1455, column: 38, scope: !4184)
!4184 = distinct !DILexicalBlock(scope: !4176, file: !1, line: 1455, column: 12)
!4185 = !DILocation(line: 1455, column: 44, scope: !4184)
!4186 = !DILocation(line: 1455, column: 12, scope: !4184)
!4187 = !DILocation(line: 1455, column: 12, scope: !4176)
!4188 = !DILocation(line: 1456, column: 16, scope: !4184)
!4189 = !DILocation(line: 1456, column: 14, scope: !4184)
!4190 = !DILocation(line: 1456, column: 7, scope: !4184)
!4191 = !DILocation(line: 1458, column: 5, scope: !4184)
!4192 = !DILocation(line: 1460, column: 7, scope: !4193)
!4193 = distinct !DILexicalBlock(scope: !4143, file: !1, line: 1460, column: 7)
!4194 = !DILocation(line: 1460, column: 26, scope: !4193)
!4195 = !DILocation(line: 1460, column: 7, scope: !4143)
!4196 = !DILocation(line: 1461, column: 5, scope: !4193)
!4197 = !DILocation(line: 1462, column: 10, scope: !4143)
!4198 = !DILocation(line: 1462, column: 3, scope: !4143)
!4199 = !DILocation(line: 1463, column: 1, scope: !4143)
!4200 = distinct !DISubprogram(name: "gimple_code", scope: !389, file: !389, line: 1052, type: !4201, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!4201 = !DISubroutineType(types: !4202)
!4202 = !{!388, !4203}
!4203 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !676, line: 60, baseType: !2040)
!4204 = !DILocalVariable(name: "g", arg: 1, scope: !4200, file: !389, line: 1052, type: !4203)
!4205 = !DILocation(line: 1052, column: 27, scope: !4200)
!4206 = !DILocation(line: 1054, column: 10, scope: !4200)
!4207 = !DILocation(line: 1054, column: 13, scope: !4200)
!4208 = !DILocation(line: 1054, column: 20, scope: !4200)
!4209 = !DILocation(line: 1054, column: 3, scope: !4200)
!4210 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !389, file: !389, line: 2241, type: !4211, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!4211 = !DISubroutineType(types: !4212)
!4212 = !{!675, !4203}
!4213 = !DILocalVariable(name: "gs", arg: 1, scope: !4210, file: !389, line: 2241, type: !4203)
!4214 = !DILocation(line: 2241, column: 31, scope: !4210)
!4215 = !DILocation(line: 2244, column: 21, scope: !4210)
!4216 = !DILocation(line: 2244, column: 10, scope: !4210)
!4217 = !DILocation(line: 2244, column: 3, scope: !4210)
!4218 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !389, file: !389, line: 2271, type: !4211, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!4219 = !DILocalVariable(name: "gs", arg: 1, scope: !4218, file: !389, line: 2271, type: !4203)
!4220 = !DILocation(line: 2271, column: 31, scope: !4218)
!4221 = !DILocation(line: 2274, column: 21, scope: !4218)
!4222 = !DILocation(line: 2274, column: 10, scope: !4218)
!4223 = !DILocation(line: 2274, column: 3, scope: !4218)
!4224 = distinct !DISubprogram(name: "gcc_loopnest_to_lambda_loopnest", scope: !1, file: !1, line: 1476, type: !4225, scopeLine: 1480, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!4225 = !DISubroutineType(types: !4226)
!4226 = !{!659, !1217, !4227, !4227, !2209}
!4227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2042, size: 64)
!4228 = !DILocalVariable(name: "loop_nest", arg: 1, scope: !4224, file: !1, line: 1476, type: !1217)
!4229 = !DILocation(line: 1476, column: 47, scope: !4224)
!4230 = !DILocalVariable(name: "inductionvars", arg: 2, scope: !4224, file: !1, line: 1477, type: !4227)
!4231 = !DILocation(line: 1477, column: 23, scope: !4224)
!4232 = !DILocalVariable(name: "invariants", arg: 3, scope: !4224, file: !1, line: 1478, type: !4227)
!4233 = !DILocation(line: 1478, column: 51, scope: !4224)
!4234 = !DILocalVariable(name: "lambda_obstack", arg: 4, scope: !4224, file: !1, line: 1479, type: !2209)
!4235 = !DILocation(line: 1479, column: 51, scope: !4224)
!4236 = !DILocalVariable(name: "ret", scope: !4224, file: !1, line: 1481, type: !659)
!4237 = !DILocation(line: 1481, column: 19, scope: !4224)
!4238 = !DILocalVariable(name: "temp", scope: !4224, file: !1, line: 1482, type: !1217)
!4239 = !DILocation(line: 1482, column: 16, scope: !4224)
!4240 = !DILocation(line: 1482, column: 23, scope: !4224)
!4241 = !DILocalVariable(name: "depth", scope: !4224, file: !1, line: 1483, type: !644)
!4242 = !DILocation(line: 1483, column: 7, scope: !4224)
!4243 = !DILocation(line: 1483, column: 30, scope: !4224)
!4244 = !DILocation(line: 1483, column: 15, scope: !4224)
!4245 = !DILocalVariable(name: "i", scope: !4224, file: !1, line: 1484, type: !1147)
!4246 = !DILocation(line: 1484, column: 10, scope: !4224)
!4247 = !DILocalVariable(name: "loops", scope: !4224, file: !1, line: 1485, type: !2060)
!4248 = !DILocation(line: 1485, column: 26, scope: !4224)
!4249 = !DILocalVariable(name: "uboundvars", scope: !4224, file: !1, line: 1486, type: !2042)
!4250 = !DILocation(line: 1486, column: 19, scope: !4224)
!4251 = !DILocalVariable(name: "lboundvars", scope: !4224, file: !1, line: 1487, type: !2042)
!4252 = !DILocation(line: 1487, column: 19, scope: !4224)
!4253 = !DILocalVariable(name: "steps", scope: !4224, file: !1, line: 1488, type: !2047)
!4254 = !DILocation(line: 1488, column: 18, scope: !4224)
!4255 = !DILocalVariable(name: "newloop", scope: !4224, file: !1, line: 1489, type: !665)
!4256 = !DILocation(line: 1489, column: 15, scope: !4224)
!4257 = !DILocalVariable(name: "inductionvar", scope: !4224, file: !1, line: 1490, type: !675)
!4258 = !DILocation(line: 1490, column: 8, scope: !4224)
!4259 = !DILocalVariable(name: "perfect_nest", scope: !4224, file: !1, line: 1491, type: !793)
!4260 = !DILocation(line: 1491, column: 8, scope: !4224)
!4261 = !DILocation(line: 1491, column: 39, scope: !4224)
!4262 = !DILocation(line: 1491, column: 23, scope: !4224)
!4263 = !DILocation(line: 1493, column: 8, scope: !4264)
!4264 = distinct !DILexicalBlock(scope: !4224, file: !1, line: 1493, column: 7)
!4265 = !DILocation(line: 1493, column: 21, scope: !4264)
!4266 = !DILocation(line: 1493, column: 54, scope: !4264)
!4267 = !DILocation(line: 1493, column: 25, scope: !4264)
!4268 = !DILocation(line: 1493, column: 7, scope: !4224)
!4269 = !DILocation(line: 1494, column: 5, scope: !4264)
!4270 = !DILocation(line: 1496, column: 3, scope: !4224)
!4271 = !DILocation(line: 1496, column: 10, scope: !4224)
!4272 = !DILocation(line: 1498, column: 42, scope: !4273)
!4273 = distinct !DILexicalBlock(scope: !4224, file: !1, line: 1497, column: 5)
!4274 = !DILocation(line: 1498, column: 48, scope: !4273)
!4275 = !DILocation(line: 1498, column: 55, scope: !4273)
!4276 = !DILocation(line: 1499, column: 23, scope: !4273)
!4277 = !DILocation(line: 1499, column: 22, scope: !4273)
!4278 = !DILocation(line: 1501, column: 50, scope: !4273)
!4279 = !DILocation(line: 1498, column: 17, scope: !4273)
!4280 = !DILocation(line: 1498, column: 15, scope: !4273)
!4281 = !DILocation(line: 1502, column: 12, scope: !4282)
!4282 = distinct !DILexicalBlock(scope: !4273, file: !1, line: 1502, column: 11)
!4283 = !DILocation(line: 1502, column: 11, scope: !4273)
!4284 = !DILocation(line: 1503, column: 2, scope: !4282)
!4285 = !DILocation(line: 1505, column: 7, scope: !4273)
!4286 = !DILocation(line: 1506, column: 7, scope: !4273)
!4287 = !DILocation(line: 1507, column: 14, scope: !4273)
!4288 = !DILocation(line: 1507, column: 20, scope: !4273)
!4289 = !DILocation(line: 1507, column: 12, scope: !4273)
!4290 = distinct !{!4290, !4270, !4291}
!4291 = !DILocation(line: 1508, column: 5, scope: !4224)
!4292 = !DILocation(line: 1510, column: 8, scope: !4293)
!4293 = distinct !DILexicalBlock(scope: !4224, file: !1, line: 1510, column: 7)
!4294 = !DILocation(line: 1510, column: 7, scope: !4224)
!4295 = !DILocation(line: 1512, column: 29, scope: !4296)
!4296 = distinct !DILexicalBlock(scope: !4297, file: !1, line: 1512, column: 11)
!4297 = distinct !DILexicalBlock(scope: !4293, file: !1, line: 1511, column: 5)
!4298 = !DILocation(line: 1512, column: 40, scope: !4296)
!4299 = !DILocation(line: 1512, column: 52, scope: !4296)
!4300 = !DILocation(line: 1512, column: 64, scope: !4296)
!4301 = !DILocation(line: 1513, column: 9, scope: !4296)
!4302 = !DILocation(line: 1513, column: 8, scope: !4296)
!4303 = !DILocation(line: 1512, column: 12, scope: !4296)
!4304 = !DILocation(line: 1512, column: 11, scope: !4297)
!4305 = !DILocation(line: 1515, column: 8, scope: !4306)
!4306 = distinct !DILexicalBlock(scope: !4307, file: !1, line: 1515, column: 8)
!4307 = distinct !DILexicalBlock(scope: !4296, file: !1, line: 1514, column: 2)
!4308 = !DILocation(line: 1515, column: 8, scope: !4307)
!4309 = !DILocation(line: 1516, column: 15, scope: !4306)
!4310 = !DILocation(line: 1516, column: 6, scope: !4306)
!4311 = !DILocation(line: 1518, column: 4, scope: !4307)
!4312 = !DILocation(line: 1520, column: 16, scope: !4313)
!4313 = distinct !DILexicalBlock(scope: !4296, file: !1, line: 1520, column: 16)
!4314 = !DILocation(line: 1520, column: 16, scope: !4296)
!4315 = !DILocation(line: 1521, column: 11, scope: !4313)
!4316 = !DILocation(line: 1521, column: 2, scope: !4313)
!4317 = !DILocation(line: 1523, column: 5, scope: !4297)
!4318 = !DILocation(line: 1525, column: 30, scope: !4224)
!4319 = !DILocation(line: 1525, column: 41, scope: !4224)
!4320 = !DILocation(line: 1525, column: 39, scope: !4224)
!4321 = !DILocation(line: 1525, column: 48, scope: !4224)
!4322 = !DILocation(line: 1525, column: 9, scope: !4224)
!4323 = !DILocation(line: 1525, column: 7, scope: !4224)
!4324 = !DILocation(line: 1527, column: 10, scope: !4325)
!4325 = distinct !DILexicalBlock(scope: !4224, file: !1, line: 1527, column: 3)
!4326 = !DILocation(line: 1527, column: 8, scope: !4325)
!4327 = !DILocation(line: 1527, column: 15, scope: !4328)
!4328 = distinct !DILexicalBlock(scope: !4325, file: !1, line: 1527, column: 3)
!4329 = !DILocation(line: 1527, column: 3, scope: !4325)
!4330 = !DILocation(line: 1528, column: 25, scope: !4328)
!4331 = !DILocation(line: 1528, column: 5, scope: !4328)
!4332 = !DILocation(line: 1528, column: 20, scope: !4328)
!4333 = !DILocation(line: 1528, column: 23, scope: !4328)
!4334 = !DILocation(line: 1527, column: 62, scope: !4328)
!4335 = !DILocation(line: 1527, column: 3, scope: !4328)
!4336 = distinct !{!4336, !4329, !4337}
!4337 = !DILocation(line: 1528, column: 25, scope: !4325)
!4338 = !DILabel(scope: !4224, name: "fail", file: !1, line: 1530)
!4339 = !DILocation(line: 1530, column: 2, scope: !4224)
!4340 = !DILocation(line: 1531, column: 3, scope: !4224)
!4341 = !DILocation(line: 1532, column: 3, scope: !4224)
!4342 = !DILocation(line: 1533, column: 3, scope: !4224)
!4343 = !DILocation(line: 1534, column: 3, scope: !4224)
!4344 = !DILocation(line: 1536, column: 10, scope: !4224)
!4345 = !DILocation(line: 1536, column: 3, scope: !4224)
!4346 = distinct !DISubprogram(name: "depth_of_nest", scope: !1, file: !1, line: 1191, type: !4347, scopeLine: 1192, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!4347 = !DISubroutineType(types: !4348)
!4348 = !{!644, !1217}
!4349 = !DILocalVariable(name: "nest", arg: 1, scope: !4346, file: !1, line: 1191, type: !1217)
!4350 = !DILocation(line: 1191, column: 29, scope: !4346)
!4351 = !DILocalVariable(name: "depth", scope: !4346, file: !1, line: 1193, type: !1147)
!4352 = !DILocation(line: 1193, column: 10, scope: !4346)
!4353 = !DILocation(line: 1194, column: 3, scope: !4346)
!4354 = !DILocation(line: 1194, column: 10, scope: !4346)
!4355 = !DILocation(line: 1196, column: 12, scope: !4356)
!4356 = distinct !DILexicalBlock(scope: !4346, file: !1, line: 1195, column: 5)
!4357 = !DILocation(line: 1197, column: 14, scope: !4356)
!4358 = !DILocation(line: 1197, column: 20, scope: !4356)
!4359 = !DILocation(line: 1197, column: 12, scope: !4356)
!4360 = distinct !{!4360, !4353, !4361}
!4361 = !DILocation(line: 1198, column: 5, scope: !4346)
!4362 = !DILocation(line: 1199, column: 10, scope: !4346)
!4363 = !DILocation(line: 1199, column: 3, scope: !4346)
!4364 = distinct !DISubprogram(name: "perfect_nest_p", scope: !1, file: !1, line: 1981, type: !4365, scopeLine: 1982, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!4365 = !DISubroutineType(types: !4366)
!4366 = !{!793, !1217}
!4367 = !DILocalVariable(name: "loop", arg: 1, scope: !4364, file: !1, line: 1981, type: !1217)
!4368 = !DILocation(line: 1981, column: 30, scope: !4364)
!4369 = !DILocalVariable(name: "bbs", scope: !4364, file: !1, line: 1983, type: !4370)
!4370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1454, size: 64)
!4371 = !DILocation(line: 1983, column: 16, scope: !4364)
!4372 = !DILocalVariable(name: "i", scope: !4364, file: !1, line: 1984, type: !1147)
!4373 = !DILocation(line: 1984, column: 10, scope: !4364)
!4374 = !DILocalVariable(name: "exit_cond", scope: !4364, file: !1, line: 1985, type: !1002)
!4375 = !DILocation(line: 1985, column: 10, scope: !4364)
!4376 = !DILocation(line: 1988, column: 8, scope: !4377)
!4377 = distinct !DILexicalBlock(scope: !4364, file: !1, line: 1988, column: 7)
!4378 = !DILocation(line: 1988, column: 14, scope: !4377)
!4379 = !DILocation(line: 1988, column: 7, scope: !4364)
!4380 = !DILocation(line: 1989, column: 5, scope: !4377)
!4381 = !DILocation(line: 1991, column: 24, scope: !4364)
!4382 = !DILocation(line: 1991, column: 9, scope: !4364)
!4383 = !DILocation(line: 1991, column: 7, scope: !4364)
!4384 = !DILocation(line: 1992, column: 40, scope: !4364)
!4385 = !DILocation(line: 1992, column: 15, scope: !4364)
!4386 = !DILocation(line: 1992, column: 13, scope: !4364)
!4387 = !DILocation(line: 1994, column: 10, scope: !4388)
!4388 = distinct !DILexicalBlock(scope: !4364, file: !1, line: 1994, column: 3)
!4389 = !DILocation(line: 1994, column: 8, scope: !4388)
!4390 = !DILocation(line: 1994, column: 15, scope: !4391)
!4391 = distinct !DILexicalBlock(scope: !4388, file: !1, line: 1994, column: 3)
!4392 = !DILocation(line: 1994, column: 19, scope: !4391)
!4393 = !DILocation(line: 1994, column: 25, scope: !4391)
!4394 = !DILocation(line: 1994, column: 17, scope: !4391)
!4395 = !DILocation(line: 1994, column: 3, scope: !4388)
!4396 = !DILocation(line: 1996, column: 11, scope: !4397)
!4397 = distinct !DILexicalBlock(scope: !4398, file: !1, line: 1996, column: 11)
!4398 = distinct !DILexicalBlock(scope: !4391, file: !1, line: 1995, column: 5)
!4399 = !DILocation(line: 1996, column: 15, scope: !4397)
!4400 = !DILocation(line: 1996, column: 19, scope: !4397)
!4401 = !DILocation(line: 1996, column: 34, scope: !4397)
!4402 = !DILocation(line: 1996, column: 31, scope: !4397)
!4403 = !DILocation(line: 1996, column: 11, scope: !4398)
!4404 = !DILocalVariable(name: "bsi", scope: !4405, file: !1, line: 1998, type: !4406)
!4405 = distinct !DILexicalBlock(scope: !4397, file: !1, line: 1997, column: 2)
!4406 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !389, line: 265, baseType: !4407)
!4407 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !389, line: 254, size: 192, elements: !4408)
!4408 = !{!4409, !4410, !4411}
!4409 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4407, file: !389, line: 257, baseType: !997, size: 64)
!4410 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4407, file: !389, line: 263, baseType: !992, size: 64, offset: 64)
!4411 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4407, file: !389, line: 264, baseType: !1454, size: 64, offset: 128)
!4412 = !DILocation(line: 1998, column: 25, scope: !4405)
!4413 = !DILocation(line: 2000, column: 29, scope: !4414)
!4414 = distinct !DILexicalBlock(scope: !4405, file: !1, line: 2000, column: 4)
!4415 = !DILocation(line: 2000, column: 33, scope: !4414)
!4416 = !DILocation(line: 2000, column: 15, scope: !4414)
!4417 = !DILocation(line: 2000, column: 9, scope: !4414)
!4418 = !DILocation(line: 2000, column: 39, scope: !4419)
!4419 = distinct !DILexicalBlock(scope: !4414, file: !1, line: 2000, column: 4)
!4420 = !DILocation(line: 2000, column: 38, scope: !4419)
!4421 = !DILocation(line: 2000, column: 4, scope: !4414)
!4422 = !DILocalVariable(name: "stmt", scope: !4423, file: !1, line: 2002, type: !1002)
!4423 = distinct !DILexicalBlock(scope: !4419, file: !1, line: 2001, column: 6)
!4424 = !DILocation(line: 2002, column: 15, scope: !4423)
!4425 = !DILocation(line: 2002, column: 22, scope: !4423)
!4426 = !DILocation(line: 2004, column: 25, scope: !4427)
!4427 = distinct !DILexicalBlock(scope: !4423, file: !1, line: 2004, column: 12)
!4428 = !DILocation(line: 2004, column: 12, scope: !4427)
!4429 = !DILocation(line: 2004, column: 31, scope: !4427)
!4430 = !DILocation(line: 2005, column: 5, scope: !4427)
!4431 = !DILocation(line: 2005, column: 8, scope: !4427)
!4432 = !DILocation(line: 2005, column: 21, scope: !4427)
!4433 = !DILocation(line: 2005, column: 18, scope: !4427)
!4434 = !DILocation(line: 2004, column: 12, scope: !4423)
!4435 = !DILocation(line: 2006, column: 3, scope: !4427)
!4436 = !DILocation(line: 2008, column: 12, scope: !4437)
!4437 = distinct !DILexicalBlock(scope: !4423, file: !1, line: 2008, column: 12)
!4438 = !DILocation(line: 2008, column: 20, scope: !4437)
!4439 = !DILocation(line: 2008, column: 17, scope: !4437)
!4440 = !DILocation(line: 2009, column: 5, scope: !4437)
!4441 = !DILocation(line: 2009, column: 30, scope: !4437)
!4442 = !DILocation(line: 2009, column: 8, scope: !4437)
!4443 = !DILocation(line: 2010, column: 5, scope: !4437)
!4444 = !DILocation(line: 2010, column: 33, scope: !4437)
!4445 = !DILocation(line: 2010, column: 39, scope: !4437)
!4446 = !DILocation(line: 2010, column: 8, scope: !4437)
!4447 = !DILocation(line: 2008, column: 12, scope: !4423)
!4448 = !DILocation(line: 2011, column: 3, scope: !4437)
!4449 = !DILocation(line: 2010, column: 43, scope: !4437)
!4450 = !DILabel(scope: !4423, name: "non_perfectly_nested", file: !1, line: 2013)
!4451 = !DILocation(line: 2013, column: 6, scope: !4423)
!4452 = !DILocation(line: 2014, column: 14, scope: !4423)
!4453 = !DILocation(line: 2014, column: 8, scope: !4423)
!4454 = !DILocation(line: 2015, column: 8, scope: !4423)
!4455 = !DILocation(line: 2000, column: 56, scope: !4419)
!4456 = !DILocation(line: 2000, column: 4, scope: !4419)
!4457 = distinct !{!4457, !4421, !4458}
!4458 = !DILocation(line: 2016, column: 6, scope: !4414)
!4459 = !DILocation(line: 2017, column: 2, scope: !4405)
!4460 = !DILocation(line: 2018, column: 5, scope: !4398)
!4461 = !DILocation(line: 1994, column: 37, scope: !4391)
!4462 = !DILocation(line: 1994, column: 3, scope: !4391)
!4463 = distinct !{!4463, !4395, !4464}
!4464 = !DILocation(line: 2018, column: 5, scope: !4388)
!4465 = !DILocation(line: 2020, column: 9, scope: !4364)
!4466 = !DILocation(line: 2020, column: 3, scope: !4364)
!4467 = !DILocation(line: 2022, column: 26, scope: !4364)
!4468 = !DILocation(line: 2022, column: 32, scope: !4364)
!4469 = !DILocation(line: 2022, column: 10, scope: !4364)
!4470 = !DILocation(line: 2022, column: 3, scope: !4364)
!4471 = !DILocation(line: 2023, column: 1, scope: !4364)
!4472 = distinct !DISubprogram(name: "can_convert_to_perfect_nest", scope: !1, file: !1, line: 2318, type: !4365, scopeLine: 2319, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!4473 = !DILocalVariable(name: "loop", arg: 1, scope: !4472, file: !1, line: 2318, type: !1217)
!4474 = !DILocation(line: 2318, column: 43, scope: !4472)
!4475 = !DILocalVariable(name: "bbs", scope: !4472, file: !1, line: 2320, type: !4370)
!4476 = !DILocation(line: 2320, column: 16, scope: !4472)
!4477 = !DILocalVariable(name: "i", scope: !4472, file: !1, line: 2321, type: !1147)
!4478 = !DILocation(line: 2321, column: 10, scope: !4472)
!4479 = !DILocalVariable(name: "si", scope: !4472, file: !1, line: 2322, type: !4406)
!4480 = !DILocation(line: 2322, column: 24, scope: !4472)
!4481 = !DILocation(line: 2325, column: 8, scope: !4482)
!4482 = distinct !DILexicalBlock(scope: !4472, file: !1, line: 2325, column: 7)
!4483 = !DILocation(line: 2325, column: 14, scope: !4482)
!4484 = !DILocation(line: 2325, column: 20, scope: !4482)
!4485 = !DILocation(line: 2325, column: 23, scope: !4482)
!4486 = !DILocation(line: 2325, column: 29, scope: !4482)
!4487 = !DILocation(line: 2325, column: 36, scope: !4482)
!4488 = !DILocation(line: 2325, column: 7, scope: !4472)
!4489 = !DILocation(line: 2326, column: 5, scope: !4482)
!4490 = !DILocation(line: 2328, column: 24, scope: !4472)
!4491 = !DILocation(line: 2328, column: 9, scope: !4472)
!4492 = !DILocation(line: 2328, column: 7, scope: !4472)
!4493 = !DILocation(line: 2329, column: 10, scope: !4494)
!4494 = distinct !DILexicalBlock(scope: !4472, file: !1, line: 2329, column: 3)
!4495 = !DILocation(line: 2329, column: 8, scope: !4494)
!4496 = !DILocation(line: 2329, column: 15, scope: !4497)
!4497 = distinct !DILexicalBlock(scope: !4494, file: !1, line: 2329, column: 3)
!4498 = !DILocation(line: 2329, column: 19, scope: !4497)
!4499 = !DILocation(line: 2329, column: 25, scope: !4497)
!4500 = !DILocation(line: 2329, column: 17, scope: !4497)
!4501 = !DILocation(line: 2329, column: 3, scope: !4494)
!4502 = !DILocation(line: 2330, column: 9, scope: !4503)
!4503 = distinct !DILexicalBlock(scope: !4497, file: !1, line: 2330, column: 9)
!4504 = !DILocation(line: 2330, column: 13, scope: !4503)
!4505 = !DILocation(line: 2330, column: 17, scope: !4503)
!4506 = !DILocation(line: 2330, column: 32, scope: !4503)
!4507 = !DILocation(line: 2330, column: 29, scope: !4503)
!4508 = !DILocation(line: 2331, column: 2, scope: !4503)
!4509 = !DILocation(line: 2331, column: 40, scope: !4503)
!4510 = !DILocation(line: 2331, column: 44, scope: !4503)
!4511 = !DILocation(line: 2331, column: 48, scope: !4503)
!4512 = !DILocation(line: 2331, column: 5, scope: !4503)
!4513 = !DILocation(line: 2330, column: 9, scope: !4497)
!4514 = !DILocation(line: 2332, column: 7, scope: !4503)
!4515 = !DILocation(line: 2331, column: 52, scope: !4503)
!4516 = !DILocation(line: 2329, column: 37, scope: !4497)
!4517 = !DILocation(line: 2329, column: 3, scope: !4497)
!4518 = distinct !{!4518, !4501, !4519}
!4519 = !DILocation(line: 2332, column: 12, scope: !4494)
!4520 = !DILocation(line: 2336, column: 42, scope: !4521)
!4521 = distinct !DILexicalBlock(scope: !4472, file: !1, line: 2336, column: 3)
!4522 = !DILocation(line: 2336, column: 29, scope: !4521)
!4523 = !DILocation(line: 2336, column: 49, scope: !4521)
!4524 = !DILocation(line: 2336, column: 13, scope: !4521)
!4525 = !DILocation(line: 2336, column: 8, scope: !4521)
!4526 = !DILocation(line: 2337, column: 9, scope: !4527)
!4527 = distinct !DILexicalBlock(scope: !4521, file: !1, line: 2336, column: 3)
!4528 = !DILocation(line: 2337, column: 8, scope: !4527)
!4529 = !DILocation(line: 2336, column: 3, scope: !4521)
!4530 = !DILocation(line: 2339, column: 30, scope: !4531)
!4531 = distinct !DILexicalBlock(scope: !4527, file: !1, line: 2339, column: 9)
!4532 = !DILocation(line: 2339, column: 9, scope: !4531)
!4533 = !DILocation(line: 2339, column: 45, scope: !4531)
!4534 = !DILocation(line: 2339, column: 9, scope: !4527)
!4535 = !DILocation(line: 2340, column: 7, scope: !4531)
!4536 = !DILocation(line: 2339, column: 48, scope: !4531)
!4537 = !DILocation(line: 2338, column: 8, scope: !4527)
!4538 = !DILocation(line: 2336, column: 3, scope: !4527)
!4539 = distinct !{!4539, !4529, !4540}
!4540 = !DILocation(line: 2340, column: 12, scope: !4521)
!4541 = !DILocation(line: 2342, column: 9, scope: !4472)
!4542 = !DILocation(line: 2342, column: 3, scope: !4472)
!4543 = !DILocation(line: 2343, column: 3, scope: !4472)
!4544 = !DILabel(scope: !4472, name: "fail", file: !1, line: 2345)
!4545 = !DILocation(line: 2345, column: 2, scope: !4472)
!4546 = !DILocation(line: 2346, column: 9, scope: !4472)
!4547 = !DILocation(line: 2346, column: 3, scope: !4472)
!4548 = !DILocation(line: 2347, column: 3, scope: !4472)
!4549 = !DILocation(line: 2348, column: 1, scope: !4472)
!4550 = distinct !DISubprogram(name: "gcc_loop_to_lambda_loop", scope: !1, file: !1, line: 1228, type: !4551, scopeLine: 1236, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!4551 = !DISubroutineType(types: !4552)
!4552 = !{!665, !1217, !644, !4227, !1036, !2042, !4227, !4227, !4553, !2209}
!4553 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2047, size: 64)
!4554 = !DILocalVariable(name: "loop", arg: 1, scope: !4550, file: !1, line: 1228, type: !1217)
!4555 = !DILocation(line: 1228, column: 39, scope: !4550)
!4556 = !DILocalVariable(name: "depth", arg: 2, scope: !4550, file: !1, line: 1228, type: !644)
!4557 = !DILocation(line: 1228, column: 49, scope: !4550)
!4558 = !DILocalVariable(name: "invariants", arg: 3, scope: !4550, file: !1, line: 1229, type: !4227)
!4559 = !DILocation(line: 1229, column: 23, scope: !4550)
!4560 = !DILocalVariable(name: "ourinductionvar", arg: 4, scope: !4550, file: !1, line: 1230, type: !1036)
!4561 = !DILocation(line: 1230, column: 12, scope: !4550)
!4562 = !DILocalVariable(name: "outerinductionvars", arg: 5, scope: !4550, file: !1, line: 1231, type: !2042)
!4563 = !DILocation(line: 1231, column: 22, scope: !4550)
!4564 = !DILocalVariable(name: "lboundvars", arg: 6, scope: !4550, file: !1, line: 1232, type: !4227)
!4565 = !DILocation(line: 1232, column: 23, scope: !4550)
!4566 = !DILocalVariable(name: "uboundvars", arg: 7, scope: !4550, file: !1, line: 1233, type: !4227)
!4567 = !DILocation(line: 1233, column: 23, scope: !4550)
!4568 = !DILocalVariable(name: "steps", arg: 8, scope: !4550, file: !1, line: 1234, type: !4553)
!4569 = !DILocation(line: 1234, column: 22, scope: !4550)
!4570 = !DILocalVariable(name: "lambda_obstack", arg: 9, scope: !4550, file: !1, line: 1235, type: !2209)
!4571 = !DILocation(line: 1235, column: 43, scope: !4550)
!4572 = !DILocalVariable(name: "phi", scope: !4550, file: !1, line: 1237, type: !1002)
!4573 = !DILocation(line: 1237, column: 10, scope: !4550)
!4574 = !DILocalVariable(name: "exit_cond", scope: !4550, file: !1, line: 1238, type: !1002)
!4575 = !DILocation(line: 1238, column: 10, scope: !4550)
!4576 = !DILocalVariable(name: "access_fn", scope: !4550, file: !1, line: 1239, type: !675)
!4577 = !DILocation(line: 1239, column: 8, scope: !4550)
!4578 = !DILocalVariable(name: "inductionvar", scope: !4550, file: !1, line: 1239, type: !675)
!4579 = !DILocation(line: 1239, column: 19, scope: !4550)
!4580 = !DILocalVariable(name: "step", scope: !4550, file: !1, line: 1240, type: !675)
!4581 = !DILocation(line: 1240, column: 8, scope: !4550)
!4582 = !DILocalVariable(name: "lloop", scope: !4550, file: !1, line: 1241, type: !665)
!4583 = !DILocation(line: 1241, column: 15, scope: !4550)
!4584 = !DILocalVariable(name: "lbound", scope: !4550, file: !1, line: 1242, type: !650)
!4585 = !DILocation(line: 1242, column: 28, scope: !4550)
!4586 = !DILocalVariable(name: "ubound", scope: !4550, file: !1, line: 1242, type: !650)
!4587 = !DILocation(line: 1242, column: 36, scope: !4550)
!4588 = !DILocalVariable(name: "test_lhs", scope: !4550, file: !1, line: 1243, type: !675)
!4589 = !DILocation(line: 1243, column: 8, scope: !4550)
!4590 = !DILocalVariable(name: "test_rhs", scope: !4550, file: !1, line: 1243, type: !675)
!4591 = !DILocation(line: 1243, column: 18, scope: !4550)
!4592 = !DILocalVariable(name: "stepint", scope: !4550, file: !1, line: 1244, type: !644)
!4593 = !DILocation(line: 1244, column: 7, scope: !4550)
!4594 = !DILocalVariable(name: "extra", scope: !4550, file: !1, line: 1245, type: !644)
!4595 = !DILocation(line: 1245, column: 7, scope: !4550)
!4596 = !DILocalVariable(name: "lboundvar", scope: !4550, file: !1, line: 1246, type: !675)
!4597 = !DILocation(line: 1246, column: 8, scope: !4550)
!4598 = !DILocalVariable(name: "uboundvar", scope: !4550, file: !1, line: 1246, type: !675)
!4599 = !DILocation(line: 1246, column: 19, scope: !4550)
!4600 = !DILocalVariable(name: "uboundresult", scope: !4550, file: !1, line: 1246, type: !675)
!4601 = !DILocation(line: 1246, column: 30, scope: !4550)
!4602 = !DILocation(line: 1249, column: 53, scope: !4550)
!4603 = !DILocation(line: 1249, column: 18, scope: !4550)
!4604 = !DILocation(line: 1249, column: 16, scope: !4550)
!4605 = !DILocation(line: 1250, column: 40, scope: !4550)
!4606 = !DILocation(line: 1250, column: 15, scope: !4550)
!4607 = !DILocation(line: 1250, column: 13, scope: !4550)
!4608 = !DILocation(line: 1252, column: 7, scope: !4609)
!4609 = distinct !DILexicalBlock(scope: !4550, file: !1, line: 1252, column: 7)
!4610 = !DILocation(line: 1252, column: 20, scope: !4609)
!4611 = !DILocation(line: 1252, column: 28, scope: !4609)
!4612 = !DILocation(line: 1252, column: 31, scope: !4609)
!4613 = !DILocation(line: 1252, column: 41, scope: !4609)
!4614 = !DILocation(line: 1252, column: 7, scope: !4550)
!4615 = !DILocation(line: 1254, column: 11, scope: !4616)
!4616 = distinct !DILexicalBlock(scope: !4617, file: !1, line: 1254, column: 11)
!4617 = distinct !DILexicalBlock(scope: !4609, file: !1, line: 1253, column: 5)
!4618 = !DILocation(line: 1254, column: 21, scope: !4616)
!4619 = !DILocation(line: 1254, column: 25, scope: !4616)
!4620 = !DILocation(line: 1254, column: 36, scope: !4616)
!4621 = !DILocation(line: 1254, column: 11, scope: !4617)
!4622 = !DILocation(line: 1255, column: 11, scope: !4616)
!4623 = !DILocation(line: 1255, column: 2, scope: !4616)
!4624 = !DILocation(line: 1257, column: 7, scope: !4617)
!4625 = !DILocation(line: 1260, column: 7, scope: !4626)
!4626 = distinct !DILexicalBlock(scope: !4550, file: !1, line: 1260, column: 7)
!4627 = !DILocation(line: 1260, column: 40, scope: !4626)
!4628 = !DILocation(line: 1260, column: 7, scope: !4550)
!4629 = !DILocation(line: 1263, column: 11, scope: !4630)
!4630 = distinct !DILexicalBlock(scope: !4631, file: !1, line: 1263, column: 11)
!4631 = distinct !DILexicalBlock(scope: !4626, file: !1, line: 1261, column: 5)
!4632 = !DILocation(line: 1263, column: 21, scope: !4630)
!4633 = !DILocation(line: 1263, column: 25, scope: !4630)
!4634 = !DILocation(line: 1263, column: 36, scope: !4630)
!4635 = !DILocation(line: 1263, column: 11, scope: !4631)
!4636 = !DILocation(line: 1264, column: 11, scope: !4630)
!4637 = !DILocation(line: 1264, column: 2, scope: !4630)
!4638 = !DILocation(line: 1267, column: 7, scope: !4631)
!4639 = !DILocation(line: 1270, column: 9, scope: !4550)
!4640 = !DILocation(line: 1270, column: 7, scope: !4550)
!4641 = !DILocation(line: 1271, column: 20, scope: !4642)
!4642 = distinct !DILexicalBlock(scope: !4550, file: !1, line: 1271, column: 7)
!4643 = !DILocation(line: 1271, column: 7, scope: !4642)
!4644 = !DILocation(line: 1271, column: 25, scope: !4642)
!4645 = !DILocation(line: 1271, column: 7, scope: !4550)
!4646 = !DILocalVariable(name: "op", scope: !4647, file: !1, line: 1273, type: !675)
!4647 = distinct !DILexicalBlock(scope: !4642, file: !1, line: 1272, column: 5)
!4648 = !DILocation(line: 1273, column: 12, scope: !4647)
!4649 = !DILocation(line: 1273, column: 17, scope: !4647)
!4650 = !DILocation(line: 1274, column: 12, scope: !4651)
!4651 = distinct !DILexicalBlock(scope: !4647, file: !1, line: 1274, column: 11)
!4652 = !DILocation(line: 1274, column: 11, scope: !4647)
!4653 = !DILocation(line: 1277, column: 8, scope: !4654)
!4654 = distinct !DILexicalBlock(scope: !4655, file: !1, line: 1277, column: 8)
!4655 = distinct !DILexicalBlock(scope: !4651, file: !1, line: 1275, column: 2)
!4656 = !DILocation(line: 1277, column: 18, scope: !4654)
!4657 = !DILocation(line: 1277, column: 22, scope: !4654)
!4658 = !DILocation(line: 1277, column: 33, scope: !4654)
!4659 = !DILocation(line: 1277, column: 8, scope: !4655)
!4660 = !DILocation(line: 1278, column: 15, scope: !4654)
!4661 = !DILocation(line: 1278, column: 6, scope: !4654)
!4662 = !DILocation(line: 1281, column: 4, scope: !4655)
!4663 = !DILocation(line: 1284, column: 13, scope: !4647)
!4664 = !DILocation(line: 1284, column: 11, scope: !4647)
!4665 = !DILocation(line: 1285, column: 24, scope: !4666)
!4666 = distinct !DILexicalBlock(scope: !4647, file: !1, line: 1285, column: 11)
!4667 = !DILocation(line: 1285, column: 11, scope: !4666)
!4668 = !DILocation(line: 1285, column: 29, scope: !4666)
!4669 = !DILocation(line: 1285, column: 11, scope: !4647)
!4670 = !DILocation(line: 1287, column: 8, scope: !4671)
!4671 = distinct !DILexicalBlock(scope: !4672, file: !1, line: 1287, column: 8)
!4672 = distinct !DILexicalBlock(scope: !4666, file: !1, line: 1286, column: 2)
!4673 = !DILocation(line: 1287, column: 18, scope: !4671)
!4674 = !DILocation(line: 1287, column: 22, scope: !4671)
!4675 = !DILocation(line: 1287, column: 33, scope: !4671)
!4676 = !DILocation(line: 1287, column: 8, scope: !4672)
!4677 = !DILocation(line: 1288, column: 15, scope: !4671)
!4678 = !DILocation(line: 1288, column: 6, scope: !4671)
!4679 = !DILocation(line: 1290, column: 4, scope: !4672)
!4680 = !DILocation(line: 1292, column: 5, scope: !4647)
!4681 = !DILocation(line: 1296, column: 22, scope: !4550)
!4682 = !DILocation(line: 1296, column: 4, scope: !4550)
!4683 = !DILocation(line: 1296, column: 20, scope: !4550)
!4684 = !DILocation(line: 1298, column: 6, scope: !4550)
!4685 = !DILocation(line: 1298, column: 38, scope: !4550)
!4686 = !DILocation(line: 1298, column: 44, scope: !4550)
!4687 = !DILocation(line: 1298, column: 12, scope: !4550)
!4688 = !DILocation(line: 1297, column: 15, scope: !4550)
!4689 = !DILocation(line: 1297, column: 13, scope: !4550)
!4690 = !DILocation(line: 1299, column: 7, scope: !4691)
!4691 = distinct !DILexicalBlock(scope: !4550, file: !1, line: 1299, column: 7)
!4692 = !DILocation(line: 1299, column: 20, scope: !4691)
!4693 = !DILocation(line: 1299, column: 17, scope: !4691)
!4694 = !DILocation(line: 1299, column: 7, scope: !4550)
!4695 = !DILocation(line: 1301, column: 11, scope: !4696)
!4696 = distinct !DILexicalBlock(scope: !4697, file: !1, line: 1301, column: 11)
!4697 = distinct !DILexicalBlock(scope: !4691, file: !1, line: 1300, column: 5)
!4698 = !DILocation(line: 1301, column: 21, scope: !4696)
!4699 = !DILocation(line: 1301, column: 25, scope: !4696)
!4700 = !DILocation(line: 1301, column: 36, scope: !4696)
!4701 = !DILocation(line: 1301, column: 11, scope: !4697)
!4702 = !DILocation(line: 1302, column: 11, scope: !4696)
!4703 = !DILocation(line: 1302, column: 2, scope: !4696)
!4704 = !DILocation(line: 1305, column: 7, scope: !4697)
!4705 = !DILocation(line: 1308, column: 38, scope: !4550)
!4706 = !DILocation(line: 1308, column: 49, scope: !4550)
!4707 = !DILocation(line: 1308, column: 55, scope: !4550)
!4708 = !DILocation(line: 1308, column: 10, scope: !4550)
!4709 = !DILocation(line: 1308, column: 8, scope: !4550)
!4710 = !DILocation(line: 1309, column: 8, scope: !4711)
!4711 = distinct !DILexicalBlock(scope: !4550, file: !1, line: 1309, column: 7)
!4712 = !DILocation(line: 1309, column: 13, scope: !4711)
!4713 = !DILocation(line: 1309, column: 16, scope: !4711)
!4714 = !DILocation(line: 1309, column: 24, scope: !4711)
!4715 = !DILocation(line: 1309, column: 21, scope: !4711)
!4716 = !DILocation(line: 1309, column: 7, scope: !4550)
!4717 = !DILocation(line: 1311, column: 11, scope: !4718)
!4718 = distinct !DILexicalBlock(scope: !4719, file: !1, line: 1311, column: 11)
!4719 = distinct !DILexicalBlock(scope: !4711, file: !1, line: 1310, column: 5)
!4720 = !DILocation(line: 1311, column: 21, scope: !4718)
!4721 = !DILocation(line: 1311, column: 25, scope: !4718)
!4722 = !DILocation(line: 1311, column: 36, scope: !4718)
!4723 = !DILocation(line: 1311, column: 11, scope: !4719)
!4724 = !DILocation(line: 1312, column: 11, scope: !4718)
!4725 = !DILocation(line: 1312, column: 2, scope: !4718)
!4726 = !DILocation(line: 1315, column: 7, scope: !4719)
!4727 = !DILocation(line: 1317, column: 7, scope: !4728)
!4728 = distinct !DILexicalBlock(scope: !4550, file: !1, line: 1317, column: 7)
!4729 = !DILocation(line: 1317, column: 24, scope: !4728)
!4730 = !DILocation(line: 1317, column: 7, scope: !4550)
!4731 = !DILocation(line: 1320, column: 11, scope: !4732)
!4732 = distinct !DILexicalBlock(scope: !4733, file: !1, line: 1320, column: 11)
!4733 = distinct !DILexicalBlock(scope: !4728, file: !1, line: 1318, column: 5)
!4734 = !DILocation(line: 1320, column: 21, scope: !4732)
!4735 = !DILocation(line: 1320, column: 25, scope: !4732)
!4736 = !DILocation(line: 1320, column: 36, scope: !4732)
!4737 = !DILocation(line: 1320, column: 11, scope: !4733)
!4738 = !DILocation(line: 1321, column: 11, scope: !4732)
!4739 = !DILocation(line: 1321, column: 2, scope: !4732)
!4740 = !DILocation(line: 1323, column: 7, scope: !4733)
!4741 = !DILocation(line: 1326, column: 13, scope: !4550)
!4742 = !DILocation(line: 1326, column: 11, scope: !4550)
!4743 = !DILocation(line: 1330, column: 28, scope: !4744)
!4744 = distinct !DILexicalBlock(scope: !4550, file: !1, line: 1330, column: 7)
!4745 = !DILocation(line: 1330, column: 7, scope: !4744)
!4746 = !DILocation(line: 1330, column: 33, scope: !4744)
!4747 = !DILocation(line: 1330, column: 7, scope: !4550)
!4748 = !DILocation(line: 1332, column: 11, scope: !4749)
!4749 = distinct !DILexicalBlock(scope: !4750, file: !1, line: 1332, column: 11)
!4750 = distinct !DILexicalBlock(scope: !4744, file: !1, line: 1331, column: 5)
!4751 = !DILocation(line: 1332, column: 21, scope: !4749)
!4752 = !DILocation(line: 1332, column: 25, scope: !4749)
!4753 = !DILocation(line: 1332, column: 36, scope: !4749)
!4754 = !DILocation(line: 1332, column: 11, scope: !4750)
!4755 = !DILocation(line: 1333, column: 11, scope: !4749)
!4756 = !DILocation(line: 1333, column: 2, scope: !4749)
!4757 = !DILocation(line: 1335, column: 7, scope: !4750)
!4758 = !DILocation(line: 1340, column: 30, scope: !4759)
!4759 = distinct !DILexicalBlock(scope: !4550, file: !1, line: 1340, column: 7)
!4760 = !DILocation(line: 1340, column: 57, scope: !4759)
!4761 = !DILocation(line: 1340, column: 36, scope: !4759)
!4762 = !DILocation(line: 1340, column: 66, scope: !4759)
!4763 = !DILocation(line: 1340, column: 7, scope: !4759)
!4764 = !DILocation(line: 1341, column: 7, scope: !4759)
!4765 = !DILocation(line: 1341, column: 33, scope: !4759)
!4766 = !DILocation(line: 1341, column: 60, scope: !4759)
!4767 = !DILocation(line: 1341, column: 39, scope: !4759)
!4768 = !DILocation(line: 1341, column: 69, scope: !4759)
!4769 = !DILocation(line: 1341, column: 10, scope: !4759)
!4770 = !DILocation(line: 1340, column: 7, scope: !4550)
!4771 = !DILocation(line: 1344, column: 11, scope: !4772)
!4772 = distinct !DILexicalBlock(scope: !4773, file: !1, line: 1344, column: 11)
!4773 = distinct !DILexicalBlock(scope: !4759, file: !1, line: 1342, column: 5)
!4774 = !DILocation(line: 1344, column: 21, scope: !4772)
!4775 = !DILocation(line: 1344, column: 25, scope: !4772)
!4776 = !DILocation(line: 1344, column: 36, scope: !4772)
!4777 = !DILocation(line: 1344, column: 11, scope: !4773)
!4778 = !DILocation(line: 1345, column: 11, scope: !4772)
!4779 = !DILocation(line: 1345, column: 2, scope: !4772)
!4780 = !DILocation(line: 1348, column: 7, scope: !4773)
!4781 = !DILocation(line: 1351, column: 30, scope: !4782)
!4782 = distinct !DILexicalBlock(scope: !4550, file: !1, line: 1351, column: 7)
!4783 = !DILocation(line: 1351, column: 57, scope: !4782)
!4784 = !DILocation(line: 1351, column: 36, scope: !4782)
!4785 = !DILocation(line: 1351, column: 66, scope: !4782)
!4786 = !DILocation(line: 1351, column: 7, scope: !4782)
!4787 = !DILocation(line: 1351, column: 7, scope: !4550)
!4788 = !DILocation(line: 1353, column: 19, scope: !4789)
!4789 = distinct !DILexicalBlock(scope: !4782, file: !1, line: 1352, column: 5)
!4790 = !DILocation(line: 1353, column: 17, scope: !4789)
!4791 = !DILocation(line: 1354, column: 47, scope: !4789)
!4792 = !DILocation(line: 1354, column: 54, scope: !4789)
!4793 = !DILocation(line: 1355, column: 12, scope: !4789)
!4794 = !DILocation(line: 1355, column: 33, scope: !4789)
!4795 = !DILocation(line: 1355, column: 32, scope: !4789)
!4796 = !DILocation(line: 1356, column: 50, scope: !4789)
!4797 = !DILocation(line: 1354, column: 16, scope: !4789)
!4798 = !DILocation(line: 1354, column: 14, scope: !4789)
!4799 = !DILocation(line: 1357, column: 5, scope: !4789)
!4800 = !DILocation(line: 1360, column: 19, scope: !4801)
!4801 = distinct !DILexicalBlock(scope: !4782, file: !1, line: 1359, column: 5)
!4802 = !DILocation(line: 1360, column: 17, scope: !4801)
!4803 = !DILocation(line: 1361, column: 47, scope: !4801)
!4804 = !DILocation(line: 1361, column: 54, scope: !4801)
!4805 = !DILocation(line: 1362, column: 12, scope: !4801)
!4806 = !DILocation(line: 1362, column: 33, scope: !4801)
!4807 = !DILocation(line: 1362, column: 32, scope: !4801)
!4808 = !DILocation(line: 1363, column: 50, scope: !4801)
!4809 = !DILocation(line: 1361, column: 16, scope: !4801)
!4810 = !DILocation(line: 1361, column: 14, scope: !4801)
!4811 = !DILocation(line: 1366, column: 8, scope: !4812)
!4812 = distinct !DILexicalBlock(scope: !4550, file: !1, line: 1366, column: 7)
!4813 = !DILocation(line: 1366, column: 7, scope: !4550)
!4814 = !DILocation(line: 1369, column: 11, scope: !4815)
!4815 = distinct !DILexicalBlock(scope: !4816, file: !1, line: 1369, column: 11)
!4816 = distinct !DILexicalBlock(scope: !4812, file: !1, line: 1367, column: 5)
!4817 = !DILocation(line: 1369, column: 21, scope: !4815)
!4818 = !DILocation(line: 1369, column: 25, scope: !4815)
!4819 = !DILocation(line: 1369, column: 36, scope: !4815)
!4820 = !DILocation(line: 1369, column: 11, scope: !4816)
!4821 = !DILocation(line: 1370, column: 11, scope: !4815)
!4822 = !DILocation(line: 1370, column: 2, scope: !4815)
!4823 = !DILocation(line: 1373, column: 7, scope: !4816)
!4824 = !DILocation(line: 1376, column: 3, scope: !4550)
!4825 = !DILocation(line: 1377, column: 31, scope: !4550)
!4826 = !DILocation(line: 1377, column: 14, scope: !4550)
!4827 = !DILocation(line: 1377, column: 12, scope: !4550)
!4828 = !DILocation(line: 1378, column: 31, scope: !4550)
!4829 = !DILocation(line: 1378, column: 14, scope: !4550)
!4830 = !DILocation(line: 1378, column: 12, scope: !4550)
!4831 = !DILocation(line: 1380, column: 7, scope: !4832)
!4832 = distinct !DILexicalBlock(scope: !4550, file: !1, line: 1380, column: 7)
!4833 = !DILocation(line: 1380, column: 28, scope: !4832)
!4834 = !DILocation(line: 1381, column: 7, scope: !4832)
!4835 = !DILocation(line: 1381, column: 45, scope: !4832)
!4836 = !DILocation(line: 1381, column: 51, scope: !4832)
!4837 = !DILocation(line: 1381, column: 10, scope: !4832)
!4838 = !DILocation(line: 1380, column: 7, scope: !4550)
!4839 = !DILocation(line: 1382, column: 5, scope: !4832)
!4840 = !DILocation(line: 1383, column: 12, scope: !4841)
!4841 = distinct !DILexicalBlock(scope: !4832, file: !1, line: 1383, column: 12)
!4842 = !DILocation(line: 1383, column: 33, scope: !4841)
!4843 = !DILocation(line: 1384, column: 5, scope: !4841)
!4844 = !DILocation(line: 1384, column: 43, scope: !4841)
!4845 = !DILocation(line: 1384, column: 49, scope: !4841)
!4846 = !DILocation(line: 1384, column: 8, scope: !4841)
!4847 = !DILocation(line: 1383, column: 12, scope: !4832)
!4848 = !DILocation(line: 1385, column: 5, scope: !4841)
!4849 = !DILocation(line: 1389, column: 7, scope: !4850)
!4850 = distinct !DILexicalBlock(scope: !4550, file: !1, line: 1389, column: 7)
!4851 = !DILocation(line: 1389, column: 19, scope: !4850)
!4852 = !DILocation(line: 1389, column: 16, scope: !4850)
!4853 = !DILocation(line: 1389, column: 7, scope: !4550)
!4854 = !DILocation(line: 1390, column: 17, scope: !4850)
!4855 = !DILocation(line: 1390, column: 15, scope: !4850)
!4856 = !DILocation(line: 1390, column: 5, scope: !4850)
!4857 = !DILocation(line: 1392, column: 17, scope: !4850)
!4858 = !DILocation(line: 1392, column: 15, scope: !4850)
!4859 = !DILocation(line: 1398, column: 3, scope: !4550)
!4860 = !DILocation(line: 1402, column: 25, scope: !4861)
!4861 = distinct !DILexicalBlock(scope: !4550, file: !1, line: 1402, column: 7)
!4862 = !DILocation(line: 1402, column: 7, scope: !4861)
!4863 = !DILocation(line: 1402, column: 36, scope: !4861)
!4864 = !DILocation(line: 1402, column: 7, scope: !4550)
!4865 = !DILocation(line: 1403, column: 18, scope: !4861)
!4866 = !DILocation(line: 1403, column: 16, scope: !4861)
!4867 = !DILocation(line: 1403, column: 11, scope: !4861)
!4868 = !DILocation(line: 1403, column: 5, scope: !4861)
!4869 = !DILocation(line: 1404, column: 30, scope: !4870)
!4870 = distinct !DILexicalBlock(scope: !4861, file: !1, line: 1404, column: 12)
!4871 = !DILocation(line: 1404, column: 12, scope: !4870)
!4872 = !DILocation(line: 1404, column: 41, scope: !4870)
!4873 = !DILocation(line: 1404, column: 12, scope: !4861)
!4874 = !DILocation(line: 1405, column: 18, scope: !4870)
!4875 = !DILocation(line: 1405, column: 16, scope: !4870)
!4876 = !DILocation(line: 1405, column: 11, scope: !4870)
!4877 = !DILocation(line: 1405, column: 5, scope: !4870)
!4878 = !DILocation(line: 1406, column: 30, scope: !4879)
!4879 = distinct !DILexicalBlock(scope: !4870, file: !1, line: 1406, column: 12)
!4880 = !DILocation(line: 1406, column: 12, scope: !4879)
!4881 = !DILocation(line: 1406, column: 41, scope: !4879)
!4882 = !DILocation(line: 1406, column: 12, scope: !4870)
!4883 = !DILocation(line: 1407, column: 18, scope: !4879)
!4884 = !DILocation(line: 1407, column: 16, scope: !4879)
!4885 = !DILocation(line: 1407, column: 11, scope: !4879)
!4886 = !DILocation(line: 1407, column: 5, scope: !4879)
!4887 = !DILocation(line: 1408, column: 30, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4879, file: !1, line: 1408, column: 12)
!4889 = !DILocation(line: 1408, column: 12, scope: !4888)
!4890 = !DILocation(line: 1408, column: 41, scope: !4888)
!4891 = !DILocation(line: 1408, column: 12, scope: !4879)
!4892 = !DILocation(line: 1409, column: 17, scope: !4888)
!4893 = !DILocation(line: 1409, column: 15, scope: !4888)
!4894 = !DILocation(line: 1409, column: 11, scope: !4888)
!4895 = !DILocation(line: 1409, column: 5, scope: !4888)
!4896 = !DILocation(line: 1411, column: 43, scope: !4550)
!4897 = !DILocation(line: 1411, column: 50, scope: !4550)
!4898 = !DILocation(line: 1412, column: 8, scope: !4550)
!4899 = !DILocation(line: 1413, column: 44, scope: !4550)
!4900 = !DILocation(line: 1413, column: 43, scope: !4550)
!4901 = !DILocation(line: 1413, column: 56, scope: !4550)
!4902 = !DILocation(line: 1413, column: 63, scope: !4550)
!4903 = !DILocation(line: 1411, column: 12, scope: !4550)
!4904 = !DILocation(line: 1411, column: 10, scope: !4550)
!4905 = !DILocation(line: 1414, column: 18, scope: !4550)
!4906 = !DILocation(line: 1414, column: 16, scope: !4550)
!4907 = !DILocation(line: 1416, column: 3, scope: !4550)
!4908 = !DILocation(line: 1417, column: 3, scope: !4550)
!4909 = !DILocation(line: 1418, column: 3, scope: !4550)
!4910 = !DILocation(line: 1419, column: 8, scope: !4911)
!4911 = distinct !DILexicalBlock(scope: !4550, file: !1, line: 1419, column: 7)
!4912 = !DILocation(line: 1419, column: 7, scope: !4550)
!4913 = !DILocation(line: 1421, column: 11, scope: !4914)
!4914 = distinct !DILexicalBlock(scope: !4915, file: !1, line: 1421, column: 11)
!4915 = distinct !DILexicalBlock(scope: !4911, file: !1, line: 1420, column: 5)
!4916 = !DILocation(line: 1421, column: 21, scope: !4914)
!4917 = !DILocation(line: 1421, column: 25, scope: !4914)
!4918 = !DILocation(line: 1421, column: 36, scope: !4914)
!4919 = !DILocation(line: 1421, column: 11, scope: !4915)
!4920 = !DILocation(line: 1422, column: 11, scope: !4914)
!4921 = !DILocation(line: 1422, column: 2, scope: !4914)
!4922 = !DILocation(line: 1424, column: 7, scope: !4915)
!4923 = !DILocation(line: 1427, column: 11, scope: !4550)
!4924 = !DILocation(line: 1427, column: 9, scope: !4550)
!4925 = !DILocation(line: 1428, column: 21, scope: !4550)
!4926 = !DILocation(line: 1428, column: 3, scope: !4550)
!4927 = !DILocation(line: 1428, column: 19, scope: !4550)
!4928 = !DILocation(line: 1429, column: 28, scope: !4550)
!4929 = !DILocation(line: 1429, column: 3, scope: !4550)
!4930 = !DILocation(line: 1429, column: 26, scope: !4550)
!4931 = !DILocation(line: 1430, column: 28, scope: !4550)
!4932 = !DILocation(line: 1430, column: 3, scope: !4550)
!4933 = !DILocation(line: 1430, column: 26, scope: !4550)
!4934 = !DILocation(line: 1431, column: 10, scope: !4550)
!4935 = !DILocation(line: 1431, column: 3, scope: !4550)
!4936 = !DILocation(line: 1432, column: 1, scope: !4550)
!4937 = distinct !DISubprogram(name: "VEC_tree_heap_safe_push", scope: !133, file: !133, line: 184, type: !4938, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!4938 = !DISubroutineType(types: !4939)
!4939 = !{!1036, !4227, !675}
!4940 = !DILocalVariable(name: "vec_", arg: 1, scope: !4937, file: !133, line: 184, type: !4227)
!4941 = !DILocation(line: 184, column: 1, scope: !4937)
!4942 = !DILocalVariable(name: "obj_", arg: 2, scope: !4937, file: !133, line: 184, type: !675)
!4943 = distinct !DISubprogram(name: "VEC_lambda_loop_heap_safe_push", scope: !1, file: !1, line: 1466, type: !4944, scopeLine: 1466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!4944 = !DISubroutineType(types: !4945)
!4945 = !{!664, !4946, !665}
!4946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2060, size: 64)
!4947 = !DILocalVariable(name: "vec_", arg: 1, scope: !4943, file: !1, line: 1466, type: !4946)
!4948 = !DILocation(line: 1466, column: 1, scope: !4943)
!4949 = !DILocalVariable(name: "obj_", arg: 2, scope: !4943, file: !1, line: 1466, type: !665)
!4950 = distinct !DISubprogram(name: "perfect_nestify", scope: !1, file: !1, line: 2391, type: !4951, scopeLine: 2396, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!4951 = !DISubroutineType(types: !4952)
!4952 = !{!793, !1217, !2042, !2042, !2047, !2042}
!4953 = !DILocalVariable(name: "loop", arg: 1, scope: !4950, file: !1, line: 2391, type: !1217)
!4954 = !DILocation(line: 2391, column: 31, scope: !4950)
!4955 = !DILocalVariable(name: "lbounds", arg: 2, scope: !4950, file: !1, line: 2392, type: !2042)
!4956 = !DILocation(line: 2392, column: 20, scope: !4950)
!4957 = !DILocalVariable(name: "ubounds", arg: 3, scope: !4950, file: !1, line: 2393, type: !2042)
!4958 = !DILocation(line: 2393, column: 20, scope: !4950)
!4959 = !DILocalVariable(name: "steps", arg: 4, scope: !4950, file: !1, line: 2394, type: !2047)
!4960 = !DILocation(line: 2394, column: 19, scope: !4950)
!4961 = !DILocalVariable(name: "loopivs", arg: 5, scope: !4950, file: !1, line: 2395, type: !2042)
!4962 = !DILocation(line: 2395, column: 20, scope: !4950)
!4963 = !DILocalVariable(name: "bbs", scope: !4950, file: !1, line: 2397, type: !4370)
!4964 = !DILocation(line: 2397, column: 16, scope: !4950)
!4965 = !DILocalVariable(name: "exit_condition", scope: !4950, file: !1, line: 2398, type: !1002)
!4966 = !DILocation(line: 2398, column: 10, scope: !4950)
!4967 = !DILocalVariable(name: "cond_stmt", scope: !4950, file: !1, line: 2399, type: !1002)
!4968 = !DILocation(line: 2399, column: 10, scope: !4950)
!4969 = !DILocalVariable(name: "preheaderbb", scope: !4950, file: !1, line: 2400, type: !1454)
!4970 = !DILocation(line: 2400, column: 15, scope: !4950)
!4971 = !DILocalVariable(name: "headerbb", scope: !4950, file: !1, line: 2400, type: !1454)
!4972 = !DILocation(line: 2400, column: 28, scope: !4950)
!4973 = !DILocalVariable(name: "bodybb", scope: !4950, file: !1, line: 2400, type: !1454)
!4974 = !DILocation(line: 2400, column: 38, scope: !4950)
!4975 = !DILocalVariable(name: "latchbb", scope: !4950, file: !1, line: 2400, type: !1454)
!4976 = !DILocation(line: 2400, column: 46, scope: !4950)
!4977 = !DILocalVariable(name: "olddest", scope: !4950, file: !1, line: 2400, type: !1454)
!4978 = !DILocation(line: 2400, column: 55, scope: !4950)
!4979 = !DILocalVariable(name: "i", scope: !4950, file: !1, line: 2401, type: !644)
!4980 = !DILocation(line: 2401, column: 7, scope: !4950)
!4981 = !DILocalVariable(name: "bsi", scope: !4950, file: !1, line: 2402, type: !4406)
!4982 = !DILocation(line: 2402, column: 24, scope: !4950)
!4983 = !DILocalVariable(name: "firstbsi", scope: !4950, file: !1, line: 2402, type: !4406)
!4984 = !DILocation(line: 2402, column: 29, scope: !4950)
!4985 = !DILocalVariable(name: "insert_after", scope: !4950, file: !1, line: 2403, type: !793)
!4986 = !DILocation(line: 2403, column: 8, scope: !4950)
!4987 = !DILocalVariable(name: "e", scope: !4950, file: !1, line: 2404, type: !982)
!4988 = !DILocation(line: 2404, column: 8, scope: !4950)
!4989 = !DILocalVariable(name: "newloop", scope: !4950, file: !1, line: 2405, type: !1217)
!4990 = !DILocation(line: 2405, column: 16, scope: !4950)
!4991 = !DILocalVariable(name: "phi", scope: !4950, file: !1, line: 2406, type: !1002)
!4992 = !DILocation(line: 2406, column: 10, scope: !4950)
!4993 = !DILocalVariable(name: "uboundvar", scope: !4950, file: !1, line: 2407, type: !675)
!4994 = !DILocation(line: 2407, column: 8, scope: !4950)
!4995 = !DILocalVariable(name: "stmt", scope: !4950, file: !1, line: 2408, type: !1002)
!4996 = !DILocation(line: 2408, column: 10, scope: !4950)
!4997 = !DILocalVariable(name: "oldivvar", scope: !4950, file: !1, line: 2409, type: !675)
!4998 = !DILocation(line: 2409, column: 8, scope: !4950)
!4999 = !DILocalVariable(name: "ivvar", scope: !4950, file: !1, line: 2409, type: !675)
!5000 = !DILocation(line: 2409, column: 18, scope: !4950)
!5001 = !DILocalVariable(name: "ivvarinced", scope: !4950, file: !1, line: 2409, type: !675)
!5002 = !DILocation(line: 2409, column: 25, scope: !4950)
!5003 = !DILocalVariable(name: "phis", scope: !4950, file: !1, line: 2410, type: !2042)
!5004 = !DILocation(line: 2410, column: 19, scope: !4950)
!5005 = !DILocalVariable(name: "locations", scope: !4950, file: !1, line: 2411, type: !2080)
!5006 = !DILocation(line: 2411, column: 30, scope: !4950)
!5007 = !DILocalVariable(name: "replacements", scope: !4950, file: !1, line: 2412, type: !1486)
!5008 = !DILocation(line: 2412, column: 10, scope: !4950)
!5009 = !DILocation(line: 2415, column: 26, scope: !4950)
!5010 = !DILocation(line: 2415, column: 13, scope: !4950)
!5011 = !DILocation(line: 2415, column: 33, scope: !4950)
!5012 = !DILocation(line: 2415, column: 11, scope: !4950)
!5013 = !DILocation(line: 2416, column: 42, scope: !4950)
!5014 = !DILocation(line: 2416, column: 29, scope: !4950)
!5015 = !DILocation(line: 2416, column: 17, scope: !4950)
!5016 = !DILocation(line: 2416, column: 15, scope: !4950)
!5017 = !DILocation(line: 2417, column: 31, scope: !4950)
!5018 = !DILocation(line: 2417, column: 47, scope: !4950)
!5019 = !DILocation(line: 2417, column: 14, scope: !4950)
!5020 = !DILocation(line: 2417, column: 12, scope: !4950)
!5021 = !DILocation(line: 2420, column: 30, scope: !5022)
!5022 = distinct !DILexicalBlock(scope: !4950, file: !1, line: 2420, column: 3)
!5023 = !DILocation(line: 2420, column: 14, scope: !5022)
!5024 = !DILocation(line: 2420, column: 8, scope: !5022)
!5025 = !DILocation(line: 2420, column: 41, scope: !5026)
!5026 = distinct !DILexicalBlock(scope: !5022, file: !1, line: 2420, column: 3)
!5027 = !DILocation(line: 2420, column: 40, scope: !5026)
!5028 = !DILocation(line: 2420, column: 3, scope: !5022)
!5029 = !DILocation(line: 2422, column: 13, scope: !5030)
!5030 = distinct !DILexicalBlock(scope: !5026, file: !1, line: 2421, column: 5)
!5031 = !DILocation(line: 2422, column: 11, scope: !5030)
!5032 = !DILocation(line: 2423, column: 7, scope: !5030)
!5033 = !DILocation(line: 2424, column: 7, scope: !5030)
!5034 = !DILocation(line: 2425, column: 7, scope: !5030)
!5035 = !DILocation(line: 2426, column: 7, scope: !5030)
!5036 = !DILocation(line: 2427, column: 7, scope: !5030)
!5037 = !DILocation(line: 2429, column: 5, scope: !5030)
!5038 = !DILocation(line: 2420, column: 58, scope: !5026)
!5039 = !DILocation(line: 2420, column: 3, scope: !5026)
!5040 = distinct !{!5040, !5028, !5041}
!5041 = !DILocation(line: 2429, column: 5, scope: !5022)
!5042 = !DILocation(line: 2430, column: 51, scope: !4950)
!5043 = !DILocation(line: 2430, column: 33, scope: !4950)
!5044 = !DILocation(line: 2430, column: 65, scope: !4950)
!5045 = !DILocation(line: 2430, column: 7, scope: !4950)
!5046 = !DILocation(line: 2430, column: 5, scope: !4950)
!5047 = !DILocation(line: 2433, column: 30, scope: !5048)
!5048 = distinct !DILexicalBlock(scope: !4950, file: !1, line: 2433, column: 3)
!5049 = !DILocation(line: 2433, column: 14, scope: !5048)
!5050 = !DILocation(line: 2433, column: 8, scope: !5048)
!5051 = !DILocation(line: 2433, column: 41, scope: !5052)
!5052 = distinct !DILexicalBlock(scope: !5048, file: !1, line: 2433, column: 3)
!5053 = !DILocation(line: 2433, column: 40, scope: !5052)
!5054 = !DILocation(line: 2433, column: 3, scope: !5048)
!5055 = !DILocation(line: 2434, column: 5, scope: !5052)
!5056 = !DILocation(line: 2433, column: 3, scope: !5052)
!5057 = distinct !{!5057, !5054, !5058}
!5058 = !DILocation(line: 2434, column: 33, scope: !5048)
!5059 = !DILocation(line: 2437, column: 3, scope: !4950)
!5060 = !DILocation(line: 2437, column: 10, scope: !4950)
!5061 = !DILocation(line: 2437, column: 34, scope: !4950)
!5062 = !DILocalVariable(name: "def", scope: !5063, file: !1, line: 2439, type: !675)
!5063 = distinct !DILexicalBlock(scope: !4950, file: !1, line: 2438, column: 5)
!5064 = !DILocation(line: 2439, column: 12, scope: !5063)
!5065 = !DILocalVariable(name: "phiname", scope: !5063, file: !1, line: 2440, type: !675)
!5066 = !DILocation(line: 2440, column: 12, scope: !5063)
!5067 = !DILocalVariable(name: "locus", scope: !5063, file: !1, line: 2441, type: !803)
!5068 = !DILocation(line: 2441, column: 23, scope: !5063)
!5069 = !DILocation(line: 2442, column: 13, scope: !5063)
!5070 = !DILocation(line: 2442, column: 11, scope: !5063)
!5071 = !DILocation(line: 2443, column: 17, scope: !5063)
!5072 = !DILocation(line: 2443, column: 15, scope: !5063)
!5073 = !DILocation(line: 2444, column: 15, scope: !5063)
!5074 = !DILocation(line: 2444, column: 13, scope: !5063)
!5075 = !DILocation(line: 2445, column: 30, scope: !5063)
!5076 = !DILocation(line: 2445, column: 39, scope: !5063)
!5077 = !DILocation(line: 2445, column: 13, scope: !5063)
!5078 = !DILocation(line: 2445, column: 11, scope: !5063)
!5079 = !DILocation(line: 2446, column: 20, scope: !5063)
!5080 = !DILocation(line: 2446, column: 25, scope: !5063)
!5081 = !DILocation(line: 2446, column: 48, scope: !5063)
!5082 = !DILocation(line: 2446, column: 30, scope: !5063)
!5083 = !DILocation(line: 2446, column: 62, scope: !5063)
!5084 = !DILocation(line: 2446, column: 7, scope: !5063)
!5085 = distinct !{!5085, !5059, !5086}
!5086 = !DILocation(line: 2447, column: 5, scope: !4950)
!5087 = !DILocation(line: 2448, column: 24, scope: !4950)
!5088 = !DILocation(line: 2448, column: 3, scope: !4950)
!5089 = !DILocation(line: 2449, column: 3, scope: !4950)
!5090 = !DILocation(line: 2451, column: 29, scope: !4950)
!5091 = !DILocation(line: 2451, column: 45, scope: !4950)
!5092 = !DILocation(line: 2451, column: 12, scope: !4950)
!5093 = !DILocation(line: 2451, column: 10, scope: !4950)
!5094 = !DILocation(line: 2452, column: 30, scope: !4950)
!5095 = !DILocation(line: 2452, column: 46, scope: !4950)
!5096 = !DILocation(line: 2452, column: 13, scope: !4950)
!5097 = !DILocation(line: 2452, column: 11, scope: !4950)
!5098 = !DILocation(line: 2453, column: 14, scope: !4950)
!5099 = !DILocation(line: 2453, column: 24, scope: !4950)
!5100 = !DILocation(line: 2453, column: 3, scope: !4950)
!5101 = !DILocation(line: 2454, column: 43, scope: !4950)
!5102 = !DILocation(line: 2454, column: 61, scope: !4950)
!5103 = !DILocation(line: 2454, column: 15, scope: !4950)
!5104 = !DILocation(line: 2454, column: 13, scope: !4950)
!5105 = !DILocation(line: 2456, column: 23, scope: !4950)
!5106 = !DILocation(line: 2456, column: 9, scope: !4950)
!5107 = !DILocation(line: 2457, column: 27, scope: !4950)
!5108 = !DILocation(line: 2457, column: 3, scope: !4950)
!5109 = !DILocation(line: 2458, column: 18, scope: !4950)
!5110 = !DILocation(line: 2458, column: 26, scope: !4950)
!5111 = !DILocation(line: 2458, column: 7, scope: !4950)
!5112 = !DILocation(line: 2458, column: 5, scope: !4950)
!5113 = !DILocation(line: 2459, column: 14, scope: !4950)
!5114 = !DILocation(line: 2459, column: 22, scope: !4950)
!5115 = !DILocation(line: 2459, column: 3, scope: !4950)
!5116 = !DILocation(line: 2460, column: 14, scope: !4950)
!5117 = !DILocation(line: 2460, column: 23, scope: !4950)
!5118 = !DILocation(line: 2460, column: 3, scope: !4950)
!5119 = !DILocation(line: 2463, column: 29, scope: !4950)
!5120 = !DILocation(line: 2463, column: 35, scope: !4950)
!5121 = !DILocation(line: 2463, column: 44, scope: !4950)
!5122 = !DILocation(line: 2463, column: 13, scope: !4950)
!5123 = !DILocation(line: 2463, column: 11, scope: !4950)
!5124 = !DILocation(line: 2464, column: 21, scope: !4950)
!5125 = !DILocation(line: 2464, column: 3, scope: !4950)
!5126 = !DILocation(line: 2464, column: 12, scope: !4950)
!5127 = !DILocation(line: 2464, column: 19, scope: !4950)
!5128 = !DILocation(line: 2465, column: 20, scope: !4950)
!5129 = !DILocation(line: 2465, column: 3, scope: !4950)
!5130 = !DILocation(line: 2465, column: 12, scope: !4950)
!5131 = !DILocation(line: 2465, column: 18, scope: !4950)
!5132 = !DILocation(line: 2466, column: 19, scope: !4950)
!5133 = !DILocation(line: 2466, column: 28, scope: !4950)
!5134 = !DILocation(line: 2466, column: 3, scope: !4950)
!5135 = !DILocation(line: 2467, column: 19, scope: !4950)
!5136 = !DILocation(line: 2467, column: 27, scope: !4950)
!5137 = !DILocation(line: 2467, column: 3, scope: !4950)
!5138 = !DILocation(line: 2468, column: 19, scope: !4950)
!5139 = !DILocation(line: 2468, column: 29, scope: !4950)
!5140 = !DILocation(line: 2468, column: 3, scope: !4950)
!5141 = !DILocation(line: 2469, column: 44, scope: !4950)
!5142 = !DILocation(line: 2469, column: 52, scope: !4950)
!5143 = !DILocation(line: 2469, column: 3, scope: !4950)
!5144 = !DILocation(line: 2470, column: 44, scope: !4950)
!5145 = !DILocation(line: 2470, column: 54, scope: !4950)
!5146 = !DILocation(line: 2470, column: 3, scope: !4950)
!5147 = !DILocation(line: 2471, column: 44, scope: !4950)
!5148 = !DILocation(line: 2472, column: 20, scope: !4950)
!5149 = !DILocation(line: 2472, column: 7, scope: !4950)
!5150 = !DILocation(line: 2472, column: 27, scope: !4950)
!5151 = !DILocation(line: 2471, column: 3, scope: !4950)
!5152 = !DILocation(line: 2473, column: 44, scope: !4950)
!5153 = !DILocation(line: 2473, column: 53, scope: !4950)
!5154 = !DILocation(line: 2473, column: 3, scope: !4950)
!5155 = !DILocation(line: 2474, column: 44, scope: !4950)
!5156 = !DILocation(line: 2475, column: 44, scope: !4950)
!5157 = !DILocation(line: 2475, column: 7, scope: !4950)
!5158 = !DILocation(line: 2474, column: 3, scope: !4950)
!5159 = !DILocation(line: 2477, column: 14, scope: !4950)
!5160 = !DILocation(line: 2477, column: 12, scope: !4950)
!5161 = !DILocation(line: 2478, column: 27, scope: !4950)
!5162 = !DILocation(line: 2478, column: 11, scope: !4950)
!5163 = !DILocation(line: 2478, column: 9, scope: !4950)
!5164 = !DILocation(line: 2479, column: 23, scope: !4950)
!5165 = !DILocation(line: 2479, column: 3, scope: !4950)
!5166 = !DILocation(line: 2480, column: 35, scope: !4950)
!5167 = !DILocation(line: 2480, column: 3, scope: !4950)
!5168 = !DILocation(line: 2481, column: 14, scope: !4950)
!5169 = !DILocation(line: 2482, column: 22, scope: !4950)
!5170 = !DILocation(line: 2482, column: 44, scope: !4950)
!5171 = !DILocation(line: 2482, column: 7, scope: !4950)
!5172 = !DILocation(line: 2483, column: 7, scope: !4950)
!5173 = !DILocation(line: 2483, column: 14, scope: !4950)
!5174 = !DILocation(line: 2483, column: 29, scope: !4950)
!5175 = !DILocation(line: 2481, column: 3, scope: !4950)
!5176 = !DILocation(line: 2488, column: 45, scope: !4950)
!5177 = !DILocation(line: 2488, column: 20, scope: !4950)
!5178 = !DILocation(line: 2488, column: 18, scope: !4950)
!5179 = !DILocation(line: 2489, column: 31, scope: !4950)
!5180 = !DILocation(line: 2489, column: 15, scope: !4950)
!5181 = !DILocation(line: 2489, column: 13, scope: !4950)
!5182 = !DILocation(line: 2491, column: 23, scope: !4950)
!5183 = !DILocation(line: 2491, column: 3, scope: !4950)
!5184 = !DILocation(line: 2492, column: 10, scope: !4950)
!5185 = !DILocation(line: 2492, column: 8, scope: !4950)
!5186 = !DILocation(line: 2493, column: 30, scope: !4950)
!5187 = !DILocation(line: 2493, column: 41, scope: !4950)
!5188 = !DILocation(line: 2493, column: 15, scope: !4950)
!5189 = !DILocation(line: 2493, column: 13, scope: !4950)
!5190 = !DILocation(line: 2494, column: 26, scope: !4950)
!5191 = !DILocation(line: 2494, column: 32, scope: !4950)
!5192 = !DILocation(line: 2494, column: 3, scope: !4950)
!5193 = !DILocation(line: 2496, column: 7, scope: !5194)
!5194 = distinct !DILexicalBlock(scope: !4950, file: !1, line: 2496, column: 7)
!5195 = !DILocation(line: 2496, column: 7, scope: !4950)
!5196 = !DILocation(line: 2497, column: 29, scope: !5194)
!5197 = !DILocation(line: 2497, column: 5, scope: !5194)
!5198 = !DILocation(line: 2499, column: 30, scope: !5194)
!5199 = !DILocation(line: 2499, column: 5, scope: !5194)
!5200 = !DILocation(line: 2500, column: 16, scope: !4950)
!5201 = !DILocation(line: 2500, column: 3, scope: !4950)
!5202 = !DILocation(line: 2501, column: 30, scope: !4950)
!5203 = !DILocation(line: 2501, column: 55, scope: !4950)
!5204 = !DILocation(line: 2501, column: 66, scope: !4950)
!5205 = !DILocation(line: 2501, column: 3, scope: !4950)
!5206 = !DILocation(line: 2502, column: 16, scope: !4950)
!5207 = !DILocation(line: 2502, column: 3, scope: !4950)
!5208 = !DILocation(line: 2503, column: 18, scope: !4950)
!5209 = !DILocation(line: 2503, column: 16, scope: !4950)
!5210 = !DILocation(line: 2505, column: 37, scope: !4950)
!5211 = !DILocation(line: 2505, column: 9, scope: !4950)
!5212 = !DILocation(line: 2505, column: 7, scope: !4950)
!5213 = !DILocation(line: 2508, column: 14, scope: !4950)
!5214 = !DILocation(line: 2508, column: 12, scope: !4950)
!5215 = !DILocation(line: 2509, column: 28, scope: !4950)
!5216 = !DILocation(line: 2509, column: 14, scope: !4950)
!5217 = !DILocation(line: 2510, column: 12, scope: !5218)
!5218 = distinct !DILexicalBlock(scope: !4950, file: !1, line: 2510, column: 3)
!5219 = !DILocation(line: 2510, column: 18, scope: !5218)
!5220 = !DILocation(line: 2510, column: 28, scope: !5218)
!5221 = !DILocation(line: 2510, column: 10, scope: !5218)
!5222 = !DILocation(line: 2510, column: 8, scope: !5218)
!5223 = !DILocation(line: 2510, column: 33, scope: !5224)
!5224 = distinct !DILexicalBlock(scope: !5218, file: !1, line: 2510, column: 3)
!5225 = !DILocation(line: 2510, column: 35, scope: !5224)
!5226 = !DILocation(line: 2510, column: 3, scope: !5218)
!5227 = !DILocalVariable(name: "tobsi", scope: !5228, file: !1, line: 2512, type: !4406)
!5228 = distinct !DILexicalBlock(scope: !5224, file: !1, line: 2511, column: 5)
!5229 = !DILocation(line: 2512, column: 28, scope: !5228)
!5230 = !DILocation(line: 2512, column: 49, scope: !5228)
!5231 = !DILocation(line: 2512, column: 36, scope: !5228)
!5232 = !DILocation(line: 2513, column: 11, scope: !5233)
!5233 = distinct !DILexicalBlock(scope: !5228, file: !1, line: 2513, column: 11)
!5234 = !DILocation(line: 2513, column: 15, scope: !5233)
!5235 = !DILocation(line: 2513, column: 19, scope: !5233)
!5236 = !DILocation(line: 2513, column: 34, scope: !5233)
!5237 = !DILocation(line: 2513, column: 31, scope: !5233)
!5238 = !DILocation(line: 2513, column: 11, scope: !5228)
!5239 = !DILocation(line: 2526, column: 40, scope: !5240)
!5240 = distinct !DILexicalBlock(scope: !5241, file: !1, line: 2526, column: 8)
!5241 = distinct !DILexicalBlock(scope: !5233, file: !1, line: 2514, column: 2)
!5242 = !DILocation(line: 2526, column: 46, scope: !5240)
!5243 = !DILocation(line: 2526, column: 53, scope: !5240)
!5244 = !DILocation(line: 2526, column: 61, scope: !5240)
!5245 = !DILocation(line: 2526, column: 65, scope: !5240)
!5246 = !DILocation(line: 2526, column: 8, scope: !5240)
!5247 = !DILocation(line: 2526, column: 8, scope: !5241)
!5248 = !DILocalVariable(name: "header_bsi", scope: !5249, file: !1, line: 2528, type: !4406)
!5249 = distinct !DILexicalBlock(scope: !5240, file: !1, line: 2527, column: 6)
!5250 = !DILocation(line: 2528, column: 29, scope: !5249)
!5251 = !DILocation(line: 2529, column: 23, scope: !5249)
!5252 = !DILocation(line: 2529, column: 29, scope: !5249)
!5253 = !DILocation(line: 2529, column: 36, scope: !5249)
!5254 = !DILocation(line: 2529, column: 5, scope: !5249)
!5255 = !DILocation(line: 2531, column: 33, scope: !5256)
!5256 = distinct !DILexicalBlock(scope: !5249, file: !1, line: 2531, column: 8)
!5257 = !DILocation(line: 2531, column: 37, scope: !5256)
!5258 = !DILocation(line: 2531, column: 19, scope: !5256)
!5259 = !DILocation(line: 2531, column: 13, scope: !5256)
!5260 = !DILocation(line: 2531, column: 43, scope: !5261)
!5261 = distinct !DILexicalBlock(scope: !5256, file: !1, line: 2531, column: 8)
!5262 = !DILocation(line: 2531, column: 42, scope: !5261)
!5263 = !DILocation(line: 2531, column: 8, scope: !5256)
!5264 = !DILocalVariable(name: "stmt", scope: !5265, file: !1, line: 2533, type: !1002)
!5265 = distinct !DILexicalBlock(scope: !5261, file: !1, line: 2532, column: 3)
!5266 = !DILocation(line: 2533, column: 12, scope: !5265)
!5267 = !DILocation(line: 2533, column: 19, scope: !5265)
!5268 = !DILocation(line: 2535, column: 9, scope: !5269)
!5269 = distinct !DILexicalBlock(scope: !5265, file: !1, line: 2535, column: 9)
!5270 = !DILocation(line: 2535, column: 17, scope: !5269)
!5271 = !DILocation(line: 2535, column: 14, scope: !5269)
!5272 = !DILocation(line: 2536, column: 9, scope: !5269)
!5273 = !DILocation(line: 2536, column: 34, scope: !5269)
!5274 = !DILocation(line: 2536, column: 12, scope: !5269)
!5275 = !DILocation(line: 2537, column: 9, scope: !5269)
!5276 = !DILocation(line: 2537, column: 37, scope: !5269)
!5277 = !DILocation(line: 2537, column: 43, scope: !5269)
!5278 = !DILocation(line: 2537, column: 12, scope: !5269)
!5279 = !DILocation(line: 2535, column: 9, scope: !5265)
!5280 = !DILocation(line: 2539, column: 9, scope: !5281)
!5281 = distinct !DILexicalBlock(scope: !5269, file: !1, line: 2538, column: 7)
!5282 = !DILocation(line: 2540, column: 9, scope: !5281)
!5283 = distinct !{!5283, !5263, !5284}
!5284 = !DILocation(line: 2544, column: 3, scope: !5256)
!5285 = !DILocation(line: 2543, column: 5, scope: !5265)
!5286 = !DILocation(line: 2531, column: 8, scope: !5261)
!5287 = !DILocation(line: 2545, column: 6, scope: !5249)
!5288 = !DILocation(line: 2551, column: 33, scope: !5289)
!5289 = distinct !DILexicalBlock(scope: !5290, file: !1, line: 2551, column: 8)
!5290 = distinct !DILexicalBlock(scope: !5240, file: !1, line: 2547, column: 6)
!5291 = !DILocation(line: 2551, column: 37, scope: !5289)
!5292 = !DILocation(line: 2551, column: 19, scope: !5289)
!5293 = !DILocation(line: 2551, column: 13, scope: !5289)
!5294 = !DILocation(line: 2551, column: 43, scope: !5295)
!5295 = distinct !DILexicalBlock(scope: !5289, file: !1, line: 2551, column: 8)
!5296 = !DILocation(line: 2551, column: 42, scope: !5295)
!5297 = !DILocation(line: 2551, column: 8, scope: !5289)
!5298 = !DILocalVariable(name: "stmt", scope: !5299, file: !1, line: 2553, type: !1002)
!5299 = distinct !DILexicalBlock(scope: !5295, file: !1, line: 2552, column: 3)
!5300 = !DILocation(line: 2553, column: 12, scope: !5299)
!5301 = !DILocation(line: 2553, column: 19, scope: !5299)
!5302 = !DILocation(line: 2555, column: 9, scope: !5303)
!5303 = distinct !DILexicalBlock(scope: !5299, file: !1, line: 2555, column: 9)
!5304 = !DILocation(line: 2555, column: 17, scope: !5303)
!5305 = !DILocation(line: 2555, column: 14, scope: !5303)
!5306 = !DILocation(line: 2556, column: 9, scope: !5303)
!5307 = !DILocation(line: 2556, column: 34, scope: !5303)
!5308 = !DILocation(line: 2556, column: 12, scope: !5303)
!5309 = !DILocation(line: 2557, column: 9, scope: !5303)
!5310 = !DILocation(line: 2557, column: 37, scope: !5303)
!5311 = !DILocation(line: 2557, column: 43, scope: !5303)
!5312 = !DILocation(line: 2557, column: 12, scope: !5303)
!5313 = !DILocation(line: 2555, column: 9, scope: !5299)
!5314 = !DILocation(line: 2559, column: 9, scope: !5315)
!5315 = distinct !DILexicalBlock(scope: !5303, file: !1, line: 2558, column: 7)
!5316 = !DILocation(line: 2560, column: 9, scope: !5315)
!5317 = distinct !{!5317, !5297, !5318}
!5318 = !DILocation(line: 2574, column: 3, scope: !5289)
!5319 = !DILocation(line: 2564, column: 8, scope: !5299)
!5320 = !DILocation(line: 2564, column: 14, scope: !5299)
!5321 = !DILocation(line: 2564, column: 20, scope: !5299)
!5322 = !DILocation(line: 2564, column: 30, scope: !5299)
!5323 = !DILocation(line: 2564, column: 57, scope: !5299)
!5324 = !DILocation(line: 2565, column: 8, scope: !5299)
!5325 = !DILocation(line: 2565, column: 38, scope: !5299)
!5326 = !DILocation(line: 2563, column: 5, scope: !5299)
!5327 = !DILocation(line: 2567, column: 5, scope: !5299)
!5328 = !DILocation(line: 2572, column: 22, scope: !5329)
!5329 = distinct !DILexicalBlock(scope: !5299, file: !1, line: 2572, column: 9)
!5330 = !DILocation(line: 2572, column: 9, scope: !5329)
!5331 = !DILocation(line: 2572, column: 9, scope: !5299)
!5332 = !DILocation(line: 2573, column: 42, scope: !5329)
!5333 = !DILocation(line: 2573, column: 30, scope: !5329)
!5334 = !DILocation(line: 2573, column: 7, scope: !5329)
!5335 = !DILocation(line: 2551, column: 8, scope: !5295)
!5336 = !DILocation(line: 2577, column: 2, scope: !5241)
!5337 = !DILocation(line: 2578, column: 5, scope: !5228)
!5338 = !DILocation(line: 2510, column: 43, scope: !5224)
!5339 = !DILocation(line: 2510, column: 3, scope: !5224)
!5340 = distinct !{!5340, !5226, !5341}
!5341 = !DILocation(line: 2578, column: 5, scope: !5218)
!5342 = !DILocation(line: 2580, column: 9, scope: !4950)
!5343 = !DILocation(line: 2580, column: 3, scope: !4950)
!5344 = !DILocation(line: 2581, column: 16, scope: !4950)
!5345 = !DILocation(line: 2581, column: 3, scope: !4950)
!5346 = !DILocation(line: 2582, column: 26, scope: !4950)
!5347 = !DILocation(line: 2582, column: 10, scope: !4950)
!5348 = !DILocation(line: 2582, column: 3, scope: !4950)
!5349 = distinct !DISubprogram(name: "VEC_lambda_loop_base_iterate", scope: !1, file: !1, line: 1465, type: !5350, scopeLine: 1465, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!5350 = !DISubroutineType(types: !5351)
!5351 = !{!644, !5352, !5, !664}
!5352 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5353, size: 64)
!5353 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2065)
!5354 = !DILocalVariable(name: "vec_", arg: 1, scope: !5349, file: !1, line: 1465, type: !5352)
!5355 = !DILocation(line: 1465, column: 1, scope: !5349)
!5356 = !DILocalVariable(name: "ix_", arg: 2, scope: !5349, file: !1, line: 1465, type: !5)
!5357 = !DILocalVariable(name: "ptr", arg: 3, scope: !5349, file: !1, line: 1465, type: !664)
!5358 = !DILocation(line: 1465, column: 1, scope: !5359)
!5359 = distinct !DILexicalBlock(scope: !5349, file: !1, line: 1465, column: 1)
!5360 = !DILocation(line: 1465, column: 1, scope: !5361)
!5361 = distinct !DILexicalBlock(scope: !5359, file: !1, line: 1465, column: 1)
!5362 = !DILocation(line: 1465, column: 1, scope: !5363)
!5363 = distinct !DILexicalBlock(scope: !5359, file: !1, line: 1465, column: 1)
!5364 = distinct !DISubprogram(name: "VEC_lambda_loop_heap_free", scope: !1, file: !1, line: 1466, type: !5365, scopeLine: 1466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!5365 = !DISubroutineType(types: !5366)
!5366 = !{null, !4946}
!5367 = !DILocalVariable(name: "vec_", arg: 1, scope: !5364, file: !1, line: 1466, type: !4946)
!5368 = !DILocation(line: 1466, column: 1, scope: !5364)
!5369 = !DILocation(line: 1466, column: 1, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !5364, file: !1, line: 1466, column: 1)
!5371 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !133, file: !133, line: 184, type: !5372, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!5372 = !DISubroutineType(types: !5373)
!5373 = !{null, !4227}
!5374 = !DILocalVariable(name: "vec_", arg: 1, scope: !5371, file: !133, line: 184, type: !4227)
!5375 = !DILocation(line: 184, column: 1, scope: !5371)
!5376 = !DILocation(line: 184, column: 1, scope: !5377)
!5377 = distinct !DILexicalBlock(scope: !5371, file: !133, line: 184, column: 1)
!5378 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !2049, file: !2049, line: 32, type: !5379, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!5379 = !DISubroutineType(types: !5380)
!5380 = !{null, !4553}
!5381 = !DILocalVariable(name: "vec_", arg: 1, scope: !5378, file: !2049, line: 32, type: !4553)
!5382 = !DILocation(line: 32, column: 1, scope: !5378)
!5383 = !DILocation(line: 32, column: 1, scope: !5384)
!5384 = distinct !DILexicalBlock(scope: !5378, file: !2049, line: 32, column: 1)
!5385 = distinct !DISubprogram(name: "remove_iv", scope: !1, file: !1, line: 1641, type: !5386, scopeLine: 1642, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!5386 = !DISubroutineType(types: !5387)
!5387 = !{null, !1002}
!5388 = !DILocalVariable(name: "iv_stmt", arg: 1, scope: !5385, file: !1, line: 1641, type: !1002)
!5389 = !DILocation(line: 1641, column: 19, scope: !5385)
!5390 = !DILocalVariable(name: "si", scope: !5385, file: !1, line: 1643, type: !4406)
!5391 = !DILocation(line: 1643, column: 24, scope: !5385)
!5392 = !DILocation(line: 1643, column: 43, scope: !5385)
!5393 = !DILocation(line: 1643, column: 29, scope: !5385)
!5394 = !DILocation(line: 1645, column: 20, scope: !5395)
!5395 = distinct !DILexicalBlock(scope: !5385, file: !1, line: 1645, column: 7)
!5396 = !DILocation(line: 1645, column: 7, scope: !5395)
!5397 = !DILocation(line: 1645, column: 29, scope: !5395)
!5398 = !DILocation(line: 1645, column: 7, scope: !5385)
!5399 = !DILocalVariable(name: "i", scope: !5400, file: !1, line: 1647, type: !5)
!5400 = distinct !DILexicalBlock(scope: !5395, file: !1, line: 1646, column: 5)
!5401 = !DILocation(line: 1647, column: 16, scope: !5400)
!5402 = !DILocation(line: 1649, column: 14, scope: !5403)
!5403 = distinct !DILexicalBlock(scope: !5400, file: !1, line: 1649, column: 7)
!5404 = !DILocation(line: 1649, column: 12, scope: !5403)
!5405 = !DILocation(line: 1649, column: 19, scope: !5406)
!5406 = distinct !DILexicalBlock(scope: !5403, file: !1, line: 1649, column: 7)
!5407 = !DILocation(line: 1649, column: 44, scope: !5406)
!5408 = !DILocation(line: 1649, column: 23, scope: !5406)
!5409 = !DILocation(line: 1649, column: 21, scope: !5406)
!5410 = !DILocation(line: 1649, column: 7, scope: !5403)
!5411 = !DILocalVariable(name: "stmt", scope: !5412, file: !1, line: 1651, type: !1002)
!5412 = distinct !DILexicalBlock(scope: !5406, file: !1, line: 1650, column: 2)
!5413 = !DILocation(line: 1651, column: 11, scope: !5412)
!5414 = !DILocalVariable(name: "imm_iter", scope: !5412, file: !1, line: 1652, type: !5415)
!5415 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !1394, line: 249, baseType: !5416)
!5416 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !1394, line: 238, size: 448, elements: !5417)
!5417 = !{!5418, !5419, !5420, !5421}
!5418 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !5416, file: !1394, line: 241, baseType: !2073, size: 64)
!5419 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !5416, file: !1394, line: 243, baseType: !2073, size: 64, offset: 64)
!5420 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !5416, file: !1394, line: 245, baseType: !2074, size: 256, offset: 128)
!5421 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !5416, file: !1394, line: 248, baseType: !2073, size: 64, offset: 384)
!5422 = !DILocation(line: 1652, column: 21, scope: !5412)
!5423 = !DILocalVariable(name: "arg", scope: !5412, file: !1, line: 1653, type: !675)
!5424 = !DILocation(line: 1653, column: 9, scope: !5412)
!5425 = !DILocation(line: 1653, column: 35, scope: !5412)
!5426 = !DILocation(line: 1653, column: 44, scope: !5412)
!5427 = !DILocation(line: 1653, column: 15, scope: !5412)
!5428 = !DILocalVariable(name: "used", scope: !5412, file: !1, line: 1654, type: !793)
!5429 = !DILocation(line: 1654, column: 9, scope: !5412)
!5430 = !DILocation(line: 1656, column: 8, scope: !5431)
!5431 = distinct !DILexicalBlock(scope: !5412, file: !1, line: 1656, column: 8)
!5432 = !DILocation(line: 1656, column: 24, scope: !5431)
!5433 = !DILocation(line: 1656, column: 8, scope: !5412)
!5434 = !DILocation(line: 1657, column: 6, scope: !5431)
!5435 = !DILocation(line: 1659, column: 4, scope: !5436)
!5436 = distinct !DILexicalBlock(scope: !5412, file: !1, line: 1659, column: 4)
!5437 = !DILocation(line: 1659, column: 4, scope: !5438)
!5438 = distinct !DILexicalBlock(scope: !5436, file: !1, line: 1659, column: 4)
!5439 = !DILocation(line: 1660, column: 10, scope: !5440)
!5440 = distinct !DILexicalBlock(scope: !5438, file: !1, line: 1660, column: 10)
!5441 = !DILocation(line: 1660, column: 18, scope: !5440)
!5442 = !DILocation(line: 1660, column: 15, scope: !5440)
!5443 = !DILocation(line: 1660, column: 26, scope: !5440)
!5444 = !DILocation(line: 1660, column: 47, scope: !5440)
!5445 = !DILocation(line: 1660, column: 30, scope: !5440)
!5446 = !DILocation(line: 1660, column: 10, scope: !5438)
!5447 = !DILocation(line: 1661, column: 13, scope: !5440)
!5448 = !DILocation(line: 1661, column: 8, scope: !5440)
!5449 = !DILocation(line: 1660, column: 51, scope: !5440)
!5450 = distinct !{!5450, !5435, !5451}
!5451 = !DILocation(line: 1661, column: 15, scope: !5436)
!5452 = !DILocation(line: 1663, column: 9, scope: !5453)
!5453 = distinct !DILexicalBlock(scope: !5412, file: !1, line: 1663, column: 8)
!5454 = !DILocation(line: 1663, column: 8, scope: !5412)
!5455 = !DILocation(line: 1664, column: 17, scope: !5453)
!5456 = !DILocation(line: 1664, column: 6, scope: !5453)
!5457 = !DILocation(line: 1665, column: 2, scope: !5412)
!5458 = !DILocation(line: 1649, column: 55, scope: !5406)
!5459 = !DILocation(line: 1649, column: 7, scope: !5406)
!5460 = distinct !{!5460, !5410, !5461}
!5461 = !DILocation(line: 1665, column: 2, scope: !5403)
!5462 = !DILocation(line: 1667, column: 7, scope: !5400)
!5463 = !DILocation(line: 1668, column: 5, scope: !5400)
!5464 = !DILocation(line: 1671, column: 7, scope: !5465)
!5465 = distinct !DILexicalBlock(scope: !5395, file: !1, line: 1670, column: 5)
!5466 = !DILocation(line: 1672, column: 21, scope: !5465)
!5467 = !DILocation(line: 1672, column: 7, scope: !5465)
!5468 = !DILocation(line: 1674, column: 1, scope: !5385)
!5469 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !389, file: !389, line: 3061, type: !5470, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!5470 = !DISubroutineType(types: !5471)
!5471 = !{!5, !4203}
!5472 = !DILocalVariable(name: "gs", arg: 1, scope: !5469, file: !389, line: 3061, type: !4203)
!5473 = !DILocation(line: 3061, column: 35, scope: !5469)
!5474 = !DILocation(line: 3064, column: 10, scope: !5469)
!5475 = !DILocation(line: 3064, column: 14, scope: !5469)
!5476 = !DILocation(line: 3064, column: 25, scope: !5469)
!5477 = !DILocation(line: 3064, column: 3, scope: !5469)
!5478 = distinct !DISubprogram(name: "gimple_phi_arg_def", scope: !5479, file: !5479, line: 450, type: !5480, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!5479 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5480 = !DISubroutineType(types: !5481)
!5481 = !{!675, !1002, !1147}
!5482 = !DILocalVariable(name: "gs", arg: 1, scope: !5478, file: !5479, line: 450, type: !1002)
!5483 = !DILocation(line: 450, column: 28, scope: !5478)
!5484 = !DILocalVariable(name: "index", arg: 2, scope: !5478, file: !5479, line: 450, type: !1147)
!5485 = !DILocation(line: 450, column: 39, scope: !5478)
!5486 = !DILocalVariable(name: "pd", scope: !5478, file: !5479, line: 452, type: !5487)
!5487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1105, size: 64)
!5488 = !DILocation(line: 452, column: 21, scope: !5478)
!5489 = !DILocation(line: 452, column: 42, scope: !5478)
!5490 = !DILocation(line: 452, column: 46, scope: !5478)
!5491 = !DILocation(line: 452, column: 26, scope: !5478)
!5492 = !DILocation(line: 453, column: 29, scope: !5478)
!5493 = !DILocation(line: 453, column: 33, scope: !5478)
!5494 = !DILocation(line: 453, column: 10, scope: !5478)
!5495 = !DILocation(line: 453, column: 3, scope: !5478)
!5496 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !5479, file: !5479, line: 1058, type: !5497, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!5497 = !DISubroutineType(types: !5498)
!5498 = !{!1002, !5499, !675}
!5499 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5415, size: 64)
!5500 = !DILocalVariable(name: "imm", arg: 1, scope: !5496, file: !5479, line: 1058, type: !5499)
!5501 = !DILocation(line: 1058, column: 39, scope: !5496)
!5502 = !DILocalVariable(name: "var", arg: 2, scope: !5496, file: !5479, line: 1058, type: !675)
!5503 = !DILocation(line: 1058, column: 49, scope: !5496)
!5504 = !DILocation(line: 1060, column: 18, scope: !5496)
!5505 = !DILocation(line: 1060, column: 3, scope: !5496)
!5506 = !DILocation(line: 1060, column: 8, scope: !5496)
!5507 = !DILocation(line: 1060, column: 14, scope: !5496)
!5508 = !DILocation(line: 1061, column: 18, scope: !5496)
!5509 = !DILocation(line: 1061, column: 23, scope: !5496)
!5510 = !DILocation(line: 1061, column: 30, scope: !5496)
!5511 = !DILocation(line: 1061, column: 3, scope: !5496)
!5512 = !DILocation(line: 1061, column: 8, scope: !5496)
!5513 = !DILocation(line: 1061, column: 16, scope: !5496)
!5514 = !DILocation(line: 1062, column: 3, scope: !5496)
!5515 = !DILocation(line: 1062, column: 8, scope: !5496)
!5516 = !DILocation(line: 1062, column: 22, scope: !5496)
!5517 = !DILocation(line: 1067, column: 3, scope: !5496)
!5518 = !DILocation(line: 1067, column: 8, scope: !5496)
!5519 = !DILocation(line: 1067, column: 18, scope: !5496)
!5520 = !DILocation(line: 1067, column: 23, scope: !5496)
!5521 = !DILocation(line: 1068, column: 3, scope: !5496)
!5522 = !DILocation(line: 1068, column: 8, scope: !5496)
!5523 = !DILocation(line: 1068, column: 18, scope: !5496)
!5524 = !DILocation(line: 1068, column: 23, scope: !5496)
!5525 = !DILocation(line: 1069, column: 3, scope: !5496)
!5526 = !DILocation(line: 1069, column: 8, scope: !5496)
!5527 = !DILocation(line: 1069, column: 18, scope: !5496)
!5528 = !DILocation(line: 1069, column: 22, scope: !5496)
!5529 = !DILocation(line: 1069, column: 27, scope: !5496)
!5530 = !DILocation(line: 1070, column: 3, scope: !5496)
!5531 = !DILocation(line: 1070, column: 8, scope: !5496)
!5532 = !DILocation(line: 1070, column: 18, scope: !5496)
!5533 = !DILocation(line: 1070, column: 22, scope: !5496)
!5534 = !DILocation(line: 1072, column: 27, scope: !5535)
!5535 = distinct !DILexicalBlock(scope: !5496, file: !5479, line: 1072, column: 7)
!5536 = !DILocation(line: 1072, column: 7, scope: !5535)
!5537 = !DILocation(line: 1072, column: 7, scope: !5496)
!5538 = !DILocation(line: 1073, column: 5, scope: !5535)
!5539 = !DILocation(line: 1075, column: 25, scope: !5496)
!5540 = !DILocation(line: 1075, column: 30, scope: !5496)
!5541 = !DILocation(line: 1075, column: 39, scope: !5496)
!5542 = !DILocation(line: 1075, column: 3, scope: !5496)
!5543 = !DILocation(line: 1077, column: 10, scope: !5496)
!5544 = !DILocation(line: 1077, column: 3, scope: !5496)
!5545 = !DILocation(line: 1078, column: 1, scope: !5496)
!5546 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !5479, file: !5479, line: 969, type: !5547, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!5547 = !DISubroutineType(types: !5548)
!5548 = !{!793, !5549}
!5549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5550, size: 64)
!5550 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5415)
!5551 = !DILocalVariable(name: "imm", arg: 1, scope: !5546, file: !5479, line: 969, type: !5549)
!5552 = !DILocation(line: 969, column: 45, scope: !5546)
!5553 = !DILocation(line: 971, column: 11, scope: !5546)
!5554 = !DILocation(line: 971, column: 16, scope: !5546)
!5555 = !DILocation(line: 971, column: 27, scope: !5546)
!5556 = !DILocation(line: 971, column: 32, scope: !5546)
!5557 = !DILocation(line: 971, column: 24, scope: !5546)
!5558 = !DILocation(line: 971, column: 10, scope: !5546)
!5559 = !DILocation(line: 971, column: 3, scope: !5546)
!5560 = distinct !DISubprogram(name: "is_gimple_debug", scope: !389, file: !389, line: 3249, type: !5561, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!5561 = !DISubroutineType(types: !5562)
!5562 = !{!793, !4203}
!5563 = !DILocalVariable(name: "gs", arg: 1, scope: !5560, file: !389, line: 3249, type: !4203)
!5564 = !DILocation(line: 3249, column: 31, scope: !5560)
!5565 = !DILocation(line: 3251, column: 23, scope: !5560)
!5566 = !DILocation(line: 3251, column: 10, scope: !5560)
!5567 = !DILocation(line: 3251, column: 27, scope: !5560)
!5568 = !DILocation(line: 3251, column: 3, scope: !5560)
!5569 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !5479, file: !5479, line: 1083, type: !5570, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!5570 = !DISubroutineType(types: !5571)
!5571 = !{!1002, !5499}
!5572 = !DILocalVariable(name: "imm", arg: 1, scope: !5569, file: !5479, line: 1083, type: !5499)
!5573 = !DILocation(line: 1083, column: 38, scope: !5569)
!5574 = !DILocation(line: 1085, column: 18, scope: !5569)
!5575 = !DILocation(line: 1085, column: 23, scope: !5569)
!5576 = !DILocation(line: 1085, column: 33, scope: !5569)
!5577 = !DILocation(line: 1085, column: 3, scope: !5569)
!5578 = !DILocation(line: 1085, column: 8, scope: !5569)
!5579 = !DILocation(line: 1085, column: 16, scope: !5569)
!5580 = !DILocation(line: 1086, column: 27, scope: !5581)
!5581 = distinct !DILexicalBlock(scope: !5569, file: !5479, line: 1086, column: 7)
!5582 = !DILocation(line: 1086, column: 7, scope: !5581)
!5583 = !DILocation(line: 1086, column: 7, scope: !5569)
!5584 = !DILocation(line: 1088, column: 11, scope: !5585)
!5585 = distinct !DILexicalBlock(scope: !5586, file: !5479, line: 1088, column: 11)
!5586 = distinct !DILexicalBlock(scope: !5581, file: !5479, line: 1087, column: 5)
!5587 = !DILocation(line: 1088, column: 16, scope: !5585)
!5588 = !DILocation(line: 1088, column: 26, scope: !5585)
!5589 = !DILocation(line: 1088, column: 31, scope: !5585)
!5590 = !DILocation(line: 1088, column: 11, scope: !5586)
!5591 = !DILocation(line: 1089, column: 19, scope: !5585)
!5592 = !DILocation(line: 1089, column: 24, scope: !5585)
!5593 = !DILocation(line: 1089, column: 2, scope: !5585)
!5594 = !DILocation(line: 1090, column: 7, scope: !5586)
!5595 = !DILocation(line: 1093, column: 25, scope: !5569)
!5596 = !DILocation(line: 1093, column: 30, scope: !5569)
!5597 = !DILocation(line: 1093, column: 39, scope: !5569)
!5598 = !DILocation(line: 1093, column: 3, scope: !5569)
!5599 = !DILocation(line: 1094, column: 10, scope: !5569)
!5600 = !DILocation(line: 1094, column: 3, scope: !5569)
!5601 = !DILocation(line: 1095, column: 1, scope: !5569)
!5602 = distinct !DISubprogram(name: "lambda_loopnest_to_gcc_loopnest", scope: !1, file: !1, line: 1689, type: !5603, scopeLine: 1696, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!5603 = !DISubroutineType(types: !5604)
!5604 = !{null, !1217, !2042, !2042, !5605, !659, !2241, !2209}
!5605 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2075, size: 64)
!5606 = !DILocalVariable(name: "old_loopnest", arg: 1, scope: !5602, file: !1, line: 1689, type: !1217)
!5607 = !DILocation(line: 1689, column: 47, scope: !5602)
!5608 = !DILocalVariable(name: "old_ivs", arg: 2, scope: !5602, file: !1, line: 1690, type: !2042)
!5609 = !DILocation(line: 1690, column: 22, scope: !5602)
!5610 = !DILocalVariable(name: "invariants", arg: 3, scope: !5602, file: !1, line: 1691, type: !2042)
!5611 = !DILocation(line: 1691, column: 22, scope: !5602)
!5612 = !DILocalVariable(name: "remove_ivs", arg: 4, scope: !5602, file: !1, line: 1692, type: !5605)
!5613 = !DILocation(line: 1692, column: 25, scope: !5602)
!5614 = !DILocalVariable(name: "new_loopnest", arg: 5, scope: !5602, file: !1, line: 1693, type: !659)
!5615 = !DILocation(line: 1693, column: 22, scope: !5602)
!5616 = !DILocalVariable(name: "transform", arg: 6, scope: !5602, file: !1, line: 1694, type: !2241)
!5617 = !DILocation(line: 1694, column: 54, scope: !5602)
!5618 = !DILocalVariable(name: "lambda_obstack", arg: 7, scope: !5602, file: !1, line: 1695, type: !2209)
!5619 = !DILocation(line: 1695, column: 51, scope: !5602)
!5620 = !DILocalVariable(name: "temp", scope: !5602, file: !1, line: 1697, type: !1217)
!5621 = !DILocation(line: 1697, column: 16, scope: !5602)
!5622 = !DILocalVariable(name: "i", scope: !5602, file: !1, line: 1698, type: !1147)
!5623 = !DILocation(line: 1698, column: 10, scope: !5602)
!5624 = !DILocalVariable(name: "j", scope: !5602, file: !1, line: 1699, type: !5)
!5625 = !DILocation(line: 1699, column: 12, scope: !5602)
!5626 = !DILocalVariable(name: "depth", scope: !5602, file: !1, line: 1700, type: !1147)
!5627 = !DILocation(line: 1700, column: 10, scope: !5602)
!5628 = !DILocalVariable(name: "new_ivs", scope: !5602, file: !1, line: 1701, type: !2042)
!5629 = !DILocation(line: 1701, column: 19, scope: !5602)
!5630 = !DILocalVariable(name: "oldiv", scope: !5602, file: !1, line: 1702, type: !675)
!5631 = !DILocation(line: 1702, column: 8, scope: !5602)
!5632 = !DILocalVariable(name: "bsi", scope: !5602, file: !1, line: 1703, type: !4406)
!5633 = !DILocation(line: 1703, column: 24, scope: !5602)
!5634 = !DILocation(line: 1705, column: 44, scope: !5602)
!5635 = !DILocation(line: 1705, column: 15, scope: !5602)
!5636 = !DILocation(line: 1705, column: 13, scope: !5602)
!5637 = !DILocation(line: 1707, column: 7, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5602, file: !1, line: 1707, column: 7)
!5639 = !DILocation(line: 1707, column: 7, scope: !5602)
!5640 = !DILocation(line: 1709, column: 16, scope: !5641)
!5641 = distinct !DILexicalBlock(scope: !5638, file: !1, line: 1708, column: 5)
!5642 = !DILocation(line: 1709, column: 7, scope: !5641)
!5643 = !DILocation(line: 1710, column: 34, scope: !5641)
!5644 = !DILocation(line: 1710, column: 45, scope: !5641)
!5645 = !DILocation(line: 1710, column: 7, scope: !5641)
!5646 = !DILocation(line: 1711, column: 5, scope: !5641)
!5647 = !DILocation(line: 1712, column: 26, scope: !5602)
!5648 = !DILocation(line: 1712, column: 11, scope: !5602)
!5649 = !DILocation(line: 1712, column: 9, scope: !5602)
!5650 = !DILocation(line: 1713, column: 10, scope: !5602)
!5651 = !DILocation(line: 1713, column: 8, scope: !5602)
!5652 = !DILocation(line: 1715, column: 3, scope: !5602)
!5653 = !DILocation(line: 1715, column: 10, scope: !5602)
!5654 = !DILocalVariable(name: "newloop", scope: !5655, file: !1, line: 1717, type: !665)
!5655 = distinct !DILexicalBlock(scope: !5602, file: !1, line: 1716, column: 5)
!5656 = !DILocation(line: 1717, column: 19, scope: !5655)
!5657 = !DILocalVariable(name: "bb", scope: !5655, file: !1, line: 1718, type: !1454)
!5658 = !DILocation(line: 1718, column: 19, scope: !5655)
!5659 = !DILocalVariable(name: "exit", scope: !5655, file: !1, line: 1719, type: !982)
!5660 = !DILocation(line: 1719, column: 12, scope: !5655)
!5661 = !DILocalVariable(name: "ivvar", scope: !5655, file: !1, line: 1720, type: !675)
!5662 = !DILocation(line: 1720, column: 12, scope: !5655)
!5663 = !DILocalVariable(name: "ivvarinced", scope: !5655, file: !1, line: 1720, type: !675)
!5664 = !DILocation(line: 1720, column: 19, scope: !5655)
!5665 = !DILocalVariable(name: "exitcond", scope: !5655, file: !1, line: 1721, type: !1002)
!5666 = !DILocation(line: 1721, column: 14, scope: !5655)
!5667 = !DILocalVariable(name: "stmts", scope: !5655, file: !1, line: 1722, type: !992)
!5668 = !DILocation(line: 1722, column: 18, scope: !5655)
!5669 = !DILocalVariable(name: "testtype", scope: !5655, file: !1, line: 1723, type: !132)
!5670 = !DILocation(line: 1723, column: 22, scope: !5655)
!5671 = !DILocalVariable(name: "newupperbound", scope: !5655, file: !1, line: 1724, type: !675)
!5672 = !DILocation(line: 1724, column: 12, scope: !5655)
!5673 = !DILocalVariable(name: "newlowerbound", scope: !5655, file: !1, line: 1724, type: !675)
!5674 = !DILocation(line: 1724, column: 27, scope: !5655)
!5675 = !DILocalVariable(name: "offset", scope: !5655, file: !1, line: 1725, type: !650)
!5676 = !DILocation(line: 1725, column: 32, scope: !5655)
!5677 = !DILocalVariable(name: "type", scope: !5655, file: !1, line: 1726, type: !675)
!5678 = !DILocation(line: 1726, column: 12, scope: !5655)
!5679 = !DILocalVariable(name: "insert_after", scope: !5655, file: !1, line: 1727, type: !793)
!5680 = !DILocation(line: 1727, column: 12, scope: !5655)
!5681 = !DILocalVariable(name: "inc_stmt", scope: !5655, file: !1, line: 1728, type: !1002)
!5682 = !DILocation(line: 1728, column: 14, scope: !5655)
!5683 = !DILocation(line: 1730, column: 15, scope: !5655)
!5684 = !DILocation(line: 1730, column: 13, scope: !5655)
!5685 = !DILocation(line: 1731, column: 14, scope: !5655)
!5686 = !DILocation(line: 1731, column: 12, scope: !5655)
!5687 = !DILocation(line: 1735, column: 31, scope: !5655)
!5688 = !DILocation(line: 1735, column: 15, scope: !5655)
!5689 = !DILocation(line: 1735, column: 13, scope: !5655)
!5690 = !DILocation(line: 1736, column: 27, scope: !5655)
!5691 = !DILocation(line: 1736, column: 7, scope: !5655)
!5692 = !DILocation(line: 1738, column: 7, scope: !5655)
!5693 = !DILocation(line: 1740, column: 17, scope: !5655)
!5694 = !DILocation(line: 1740, column: 41, scope: !5655)
!5695 = !DILocation(line: 1740, column: 15, scope: !5655)
!5696 = !DILocation(line: 1744, column: 16, scope: !5655)
!5697 = !DILocation(line: 1744, column: 14, scope: !5655)
!5698 = !DILocation(line: 1746, column: 7, scope: !5655)
!5699 = !DILocation(line: 1751, column: 13, scope: !5655)
!5700 = !DILocation(line: 1752, column: 46, scope: !5655)
!5701 = !DILocation(line: 1753, column: 11, scope: !5655)
!5702 = !DILocation(line: 1754, column: 11, scope: !5655)
!5703 = !DILocation(line: 1755, column: 11, scope: !5655)
!5704 = !DILocation(line: 1756, column: 11, scope: !5655)
!5705 = !DILocation(line: 1752, column: 23, scope: !5655)
!5706 = !DILocation(line: 1752, column: 21, scope: !5655)
!5707 = !DILocation(line: 1758, column: 11, scope: !5708)
!5708 = distinct !DILexicalBlock(scope: !5655, file: !1, line: 1758, column: 11)
!5709 = !DILocation(line: 1758, column: 11, scope: !5655)
!5710 = !DILocation(line: 1760, column: 49, scope: !5711)
!5711 = distinct !DILexicalBlock(scope: !5708, file: !1, line: 1759, column: 2)
!5712 = !DILocation(line: 1760, column: 28, scope: !5711)
!5713 = !DILocation(line: 1760, column: 56, scope: !5711)
!5714 = !DILocation(line: 1760, column: 4, scope: !5711)
!5715 = !DILocation(line: 1761, column: 4, scope: !5711)
!5716 = !DILocation(line: 1762, column: 2, scope: !5711)
!5717 = !DILocation(line: 1765, column: 13, scope: !5655)
!5718 = !DILocation(line: 1766, column: 46, scope: !5655)
!5719 = !DILocation(line: 1767, column: 11, scope: !5655)
!5720 = !DILocation(line: 1768, column: 11, scope: !5655)
!5721 = !DILocation(line: 1769, column: 11, scope: !5655)
!5722 = !DILocation(line: 1770, column: 11, scope: !5655)
!5723 = !DILocation(line: 1766, column: 23, scope: !5655)
!5724 = !DILocation(line: 1766, column: 21, scope: !5655)
!5725 = !DILocation(line: 1771, column: 27, scope: !5655)
!5726 = !DILocation(line: 1771, column: 14, scope: !5655)
!5727 = !DILocation(line: 1771, column: 12, scope: !5655)
!5728 = !DILocation(line: 1772, column: 43, scope: !5655)
!5729 = !DILocation(line: 1772, column: 18, scope: !5655)
!5730 = !DILocation(line: 1772, column: 16, scope: !5655)
!5731 = !DILocation(line: 1773, column: 23, scope: !5655)
!5732 = !DILocation(line: 1773, column: 12, scope: !5655)
!5733 = !DILocation(line: 1773, column: 10, scope: !5655)
!5734 = !DILocation(line: 1774, column: 31, scope: !5655)
!5735 = !DILocation(line: 1774, column: 13, scope: !5655)
!5736 = !DILocation(line: 1775, column: 11, scope: !5737)
!5737 = distinct !DILexicalBlock(scope: !5655, file: !1, line: 1775, column: 11)
!5738 = !DILocation(line: 1775, column: 11, scope: !5655)
!5739 = !DILocation(line: 1776, column: 31, scope: !5737)
!5740 = !DILocation(line: 1776, column: 2, scope: !5737)
!5741 = !DILocation(line: 1780, column: 39, scope: !5655)
!5742 = !DILocation(line: 1780, column: 7, scope: !5655)
!5743 = !DILocation(line: 1781, column: 18, scope: !5655)
!5744 = !DILocation(line: 1782, column: 19, scope: !5655)
!5745 = !DILocation(line: 1782, column: 25, scope: !5655)
!5746 = !DILocation(line: 1782, column: 4, scope: !5655)
!5747 = !DILocation(line: 1783, column: 4, scope: !5655)
!5748 = !DILocation(line: 1783, column: 11, scope: !5655)
!5749 = !DILocation(line: 1783, column: 23, scope: !5655)
!5750 = !DILocation(line: 1781, column: 7, scope: !5655)
!5751 = !DILocation(line: 1790, column: 18, scope: !5655)
!5752 = !DILocation(line: 1790, column: 16, scope: !5655)
!5753 = !DILocation(line: 1794, column: 35, scope: !5655)
!5754 = !DILocation(line: 1794, column: 57, scope: !5655)
!5755 = !DILocation(line: 1794, column: 20, scope: !5655)
!5756 = !DILocation(line: 1794, column: 18, scope: !5655)
!5757 = !DILocation(line: 1795, column: 30, scope: !5655)
!5758 = !DILocation(line: 1795, column: 40, scope: !5655)
!5759 = !DILocation(line: 1795, column: 7, scope: !5655)
!5760 = !DILocation(line: 1796, column: 27, scope: !5655)
!5761 = !DILocation(line: 1796, column: 13, scope: !5655)
!5762 = !DILocation(line: 1797, column: 32, scope: !5655)
!5763 = !DILocation(line: 1797, column: 7, scope: !5655)
!5764 = !DILocation(line: 1802, column: 18, scope: !5655)
!5765 = !DILocation(line: 1802, column: 36, scope: !5655)
!5766 = !DILocation(line: 1802, column: 16, scope: !5655)
!5767 = !DILocation(line: 1808, column: 11, scope: !5768)
!5768 = distinct !DILexicalBlock(scope: !5655, file: !1, line: 1808, column: 11)
!5769 = !DILocation(line: 1808, column: 17, scope: !5768)
!5770 = !DILocation(line: 1808, column: 23, scope: !5768)
!5771 = !DILocation(line: 1808, column: 11, scope: !5655)
!5772 = !DILocation(line: 1809, column: 35, scope: !5768)
!5773 = !DILocation(line: 1809, column: 13, scope: !5768)
!5774 = !DILocation(line: 1809, column: 11, scope: !5768)
!5775 = !DILocation(line: 1809, column: 2, scope: !5768)
!5776 = !DILocation(line: 1811, column: 34, scope: !5655)
!5777 = !DILocation(line: 1811, column: 44, scope: !5655)
!5778 = !DILocation(line: 1811, column: 54, scope: !5655)
!5779 = !DILocation(line: 1811, column: 69, scope: !5655)
!5780 = !DILocation(line: 1811, column: 7, scope: !5655)
!5781 = !DILocation(line: 1812, column: 20, scope: !5655)
!5782 = !DILocation(line: 1812, column: 7, scope: !5655)
!5783 = !DILocation(line: 1813, column: 7, scope: !5655)
!5784 = !DILocation(line: 1815, column: 8, scope: !5655)
!5785 = !DILocation(line: 1816, column: 14, scope: !5655)
!5786 = !DILocation(line: 1816, column: 20, scope: !5655)
!5787 = !DILocation(line: 1816, column: 12, scope: !5655)
!5788 = distinct !{!5788, !5652, !5789}
!5789 = !DILocation(line: 1817, column: 5, scope: !5602)
!5790 = !DILocation(line: 1822, column: 10, scope: !5791)
!5791 = distinct !DILexicalBlock(scope: !5602, file: !1, line: 1822, column: 3)
!5792 = !DILocation(line: 1822, column: 8, scope: !5791)
!5793 = !DILocation(line: 1822, column: 15, scope: !5794)
!5794 = distinct !DILexicalBlock(scope: !5791, file: !1, line: 1822, column: 3)
!5795 = !DILocation(line: 1822, column: 3, scope: !5791)
!5796 = !DILocalVariable(name: "imm_iter", scope: !5797, file: !1, line: 1824, type: !5415)
!5797 = distinct !DILexicalBlock(scope: !5794, file: !1, line: 1823, column: 5)
!5798 = !DILocation(line: 1824, column: 24, scope: !5797)
!5799 = !DILocalVariable(name: "use_p", scope: !5797, file: !1, line: 1825, type: !2072)
!5800 = !DILocation(line: 1825, column: 21, scope: !5797)
!5801 = !DILocalVariable(name: "oldiv_def", scope: !5797, file: !1, line: 1826, type: !675)
!5802 = !DILocation(line: 1826, column: 12, scope: !5797)
!5803 = !DILocalVariable(name: "oldiv_stmt", scope: !5797, file: !1, line: 1827, type: !1002)
!5804 = !DILocation(line: 1827, column: 14, scope: !5797)
!5805 = !DILocation(line: 1827, column: 27, scope: !5797)
!5806 = !DILocalVariable(name: "stmt", scope: !5797, file: !1, line: 1828, type: !1002)
!5807 = !DILocation(line: 1828, column: 14, scope: !5797)
!5808 = !DILocation(line: 1830, column: 24, scope: !5809)
!5809 = distinct !DILexicalBlock(scope: !5797, file: !1, line: 1830, column: 11)
!5810 = !DILocation(line: 1830, column: 11, scope: !5809)
!5811 = !DILocation(line: 1830, column: 36, scope: !5809)
!5812 = !DILocation(line: 1830, column: 11, scope: !5797)
!5813 = !DILocation(line: 1831, column: 21, scope: !5809)
!5814 = !DILocation(line: 1831, column: 19, scope: !5809)
!5815 = !DILocation(line: 1831, column: 9, scope: !5809)
!5816 = !DILocation(line: 1833, column: 14, scope: !5809)
!5817 = !DILocation(line: 1833, column: 12, scope: !5809)
!5818 = !DILocation(line: 1834, column: 7, scope: !5797)
!5819 = !DILocation(line: 1836, column: 7, scope: !5820)
!5820 = distinct !DILexicalBlock(scope: !5797, file: !1, line: 1836, column: 7)
!5821 = !DILocation(line: 1836, column: 7, scope: !5822)
!5822 = distinct !DILexicalBlock(scope: !5820, file: !1, line: 1836, column: 7)
!5823 = !DILocalVariable(name: "newiv", scope: !5824, file: !1, line: 1838, type: !675)
!5824 = distinct !DILexicalBlock(scope: !5822, file: !1, line: 1837, column: 9)
!5825 = !DILocation(line: 1838, column: 9, scope: !5824)
!5826 = !DILocalVariable(name: "stmts", scope: !5824, file: !1, line: 1839, type: !992)
!5827 = !DILocation(line: 1839, column: 15, scope: !5824)
!5828 = !DILocalVariable(name: "lbv", scope: !5824, file: !1, line: 1840, type: !636)
!5829 = !DILocation(line: 1840, column: 23, scope: !5824)
!5830 = !DILocalVariable(name: "newlbv", scope: !5824, file: !1, line: 1840, type: !636)
!5831 = !DILocation(line: 1840, column: 28, scope: !5824)
!5832 = !DILocation(line: 1842, column: 25, scope: !5833)
!5833 = distinct !DILexicalBlock(scope: !5824, file: !1, line: 1842, column: 8)
!5834 = !DILocation(line: 1842, column: 8, scope: !5833)
!5835 = !DILocation(line: 1842, column: 8, scope: !5824)
!5836 = !DILocation(line: 1843, column: 6, scope: !5833)
!5837 = !DILocation(line: 1847, column: 12, scope: !5824)
!5838 = !DILocation(line: 1847, column: 10, scope: !5824)
!5839 = !DILocation(line: 1848, column: 41, scope: !5824)
!5840 = !DILocation(line: 1848, column: 48, scope: !5824)
!5841 = !DILocation(line: 1848, column: 17, scope: !5824)
!5842 = !DILocation(line: 1848, column: 15, scope: !5824)
!5843 = !DILocation(line: 1849, column: 4, scope: !5824)
!5844 = !DILocation(line: 1849, column: 27, scope: !5824)
!5845 = !DILocation(line: 1849, column: 30, scope: !5824)
!5846 = !DILocation(line: 1851, column: 52, scope: !5824)
!5847 = !DILocation(line: 1851, column: 63, scope: !5824)
!5848 = !DILocation(line: 1852, column: 52, scope: !5824)
!5849 = !DILocation(line: 1851, column: 20, scope: !5824)
!5850 = !DILocation(line: 1851, column: 18, scope: !5824)
!5851 = !DILocation(line: 1854, column: 10, scope: !5824)
!5852 = !DILocation(line: 1855, column: 35, scope: !5824)
!5853 = !DILocation(line: 1855, column: 43, scope: !5824)
!5854 = !DILocation(line: 1856, column: 7, scope: !5824)
!5855 = !DILocation(line: 1855, column: 12, scope: !5824)
!5856 = !DILocation(line: 1855, column: 10, scope: !5824)
!5857 = !DILocation(line: 1858, column: 8, scope: !5858)
!5858 = distinct !DILexicalBlock(scope: !5824, file: !1, line: 1858, column: 8)
!5859 = !DILocation(line: 1858, column: 14, scope: !5858)
!5860 = !DILocation(line: 1858, column: 30, scope: !5858)
!5861 = !DILocation(line: 1858, column: 17, scope: !5858)
!5862 = !DILocation(line: 1858, column: 36, scope: !5858)
!5863 = !DILocation(line: 1858, column: 8, scope: !5824)
!5864 = !DILocation(line: 1860, column: 28, scope: !5865)
!5865 = distinct !DILexicalBlock(scope: !5858, file: !1, line: 1859, column: 6)
!5866 = !DILocation(line: 1860, column: 14, scope: !5865)
!5867 = !DILocation(line: 1861, column: 37, scope: !5865)
!5868 = !DILocation(line: 1861, column: 8, scope: !5865)
!5869 = !DILocation(line: 1862, column: 6, scope: !5865)
!5870 = !DILocation(line: 1864, column: 4, scope: !5871)
!5871 = distinct !DILexicalBlock(scope: !5824, file: !1, line: 1864, column: 4)
!5872 = !DILocation(line: 1864, column: 4, scope: !5873)
!5873 = distinct !DILexicalBlock(scope: !5871, file: !1, line: 1864, column: 4)
!5874 = !DILocation(line: 1865, column: 23, scope: !5873)
!5875 = !DILocation(line: 1865, column: 30, scope: !5873)
!5876 = !DILocation(line: 1865, column: 6, scope: !5873)
!5877 = distinct !{!5877, !5870, !5878}
!5878 = !DILocation(line: 1865, column: 35, scope: !5871)
!5879 = !DILocation(line: 1867, column: 8, scope: !5880)
!5880 = distinct !DILexicalBlock(scope: !5824, file: !1, line: 1867, column: 8)
!5881 = !DILocation(line: 1867, column: 14, scope: !5880)
!5882 = !DILocation(line: 1867, column: 30, scope: !5880)
!5883 = !DILocation(line: 1867, column: 17, scope: !5880)
!5884 = !DILocation(line: 1867, column: 36, scope: !5880)
!5885 = !DILocation(line: 1867, column: 8, scope: !5824)
!5886 = !DILocation(line: 1868, column: 13, scope: !5887)
!5887 = distinct !DILexicalBlock(scope: !5880, file: !1, line: 1868, column: 6)
!5888 = !DILocation(line: 1868, column: 11, scope: !5887)
!5889 = !DILocation(line: 1868, column: 18, scope: !5890)
!5890 = distinct !DILexicalBlock(scope: !5887, file: !1, line: 1868, column: 6)
!5891 = !DILocation(line: 1868, column: 43, scope: !5890)
!5892 = !DILocation(line: 1868, column: 22, scope: !5890)
!5893 = !DILocation(line: 1868, column: 20, scope: !5890)
!5894 = !DILocation(line: 1868, column: 6, scope: !5887)
!5895 = !DILocation(line: 1869, column: 32, scope: !5896)
!5896 = distinct !DILexicalBlock(scope: !5890, file: !1, line: 1869, column: 12)
!5897 = !DILocation(line: 1869, column: 38, scope: !5896)
!5898 = !DILocation(line: 1869, column: 12, scope: !5896)
!5899 = !DILocation(line: 1869, column: 44, scope: !5896)
!5900 = !DILocation(line: 1869, column: 41, scope: !5896)
!5901 = !DILocation(line: 1869, column: 12, scope: !5890)
!5902 = !DILocation(line: 1870, column: 48, scope: !5896)
!5903 = !DILocation(line: 1870, column: 54, scope: !5896)
!5904 = !DILocation(line: 1870, column: 27, scope: !5896)
!5905 = !DILocation(line: 1870, column: 58, scope: !5896)
!5906 = !DILocation(line: 1870, column: 3, scope: !5896)
!5907 = !DILocation(line: 1868, column: 51, scope: !5890)
!5908 = !DILocation(line: 1868, column: 6, scope: !5890)
!5909 = distinct !{!5909, !5894, !5910}
!5910 = !DILocation(line: 1870, column: 63, scope: !5887)
!5911 = !DILocation(line: 1872, column: 17, scope: !5824)
!5912 = !DILocation(line: 1872, column: 4, scope: !5824)
!5913 = !DILocation(line: 1873, column: 2, scope: !5824)
!5914 = distinct !{!5914, !5819, !5915}
!5915 = !DILocation(line: 1873, column: 2, scope: !5820)
!5916 = !DILocation(line: 1876, column: 7, scope: !5797)
!5917 = !DILocation(line: 1877, column: 5, scope: !5797)
!5918 = !DILocation(line: 1822, column: 55, scope: !5794)
!5919 = !DILocation(line: 1822, column: 3, scope: !5794)
!5920 = distinct !{!5920, !5795, !5921}
!5921 = !DILocation(line: 1877, column: 5, scope: !5791)
!5922 = !DILocation(line: 1878, column: 3, scope: !5602)
!5923 = !DILocation(line: 1879, column: 1, scope: !5602)
!5924 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !133, file: !133, line: 182, type: !5925, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!5925 = !DISubroutineType(types: !5926)
!5926 = !{!675, !5927, !5}
!5927 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5928, size: 64)
!5928 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1553)
!5929 = !DILocalVariable(name: "vec_", arg: 1, scope: !5924, file: !133, line: 182, type: !5927)
!5930 = !DILocation(line: 182, column: 1, scope: !5924)
!5931 = !DILocalVariable(name: "ix_", arg: 2, scope: !5924, file: !133, line: 182, type: !5)
!5932 = !DILocation(line: 0, scope: !5924)
!5933 = distinct !DISubprogram(name: "lle_to_gcc_expression", scope: !1, file: !1, line: 1578, type: !5934, scopeLine: 1584, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!5934 = !DISubroutineType(types: !5935)
!5935 = !{!675, !650, !650, !675, !2042, !2042, !132, !5936}
!5936 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !992, size: 64)
!5937 = !DILocalVariable(name: "lle", arg: 1, scope: !5933, file: !1, line: 1578, type: !650)
!5938 = !DILocation(line: 1578, column: 49, scope: !5933)
!5939 = !DILocalVariable(name: "offset", arg: 2, scope: !5933, file: !1, line: 1579, type: !650)
!5940 = !DILocation(line: 1579, column: 35, scope: !5933)
!5941 = !DILocalVariable(name: "type", arg: 3, scope: !5933, file: !1, line: 1580, type: !675)
!5942 = !DILocation(line: 1580, column: 15, scope: !5933)
!5943 = !DILocalVariable(name: "induction_vars", arg: 4, scope: !5933, file: !1, line: 1581, type: !2042)
!5944 = !DILocation(line: 1581, column: 26, scope: !5933)
!5945 = !DILocalVariable(name: "invariants", arg: 5, scope: !5933, file: !1, line: 1582, type: !2042)
!5946 = !DILocation(line: 1582, column: 26, scope: !5933)
!5947 = !DILocalVariable(name: "wrap", arg: 6, scope: !5933, file: !1, line: 1583, type: !132)
!5948 = !DILocation(line: 1583, column: 25, scope: !5933)
!5949 = !DILocalVariable(name: "stmts_to_insert", arg: 7, scope: !5933, file: !1, line: 1583, type: !5936)
!5950 = !DILocation(line: 1583, column: 43, scope: !5933)
!5951 = !DILocalVariable(name: "k", scope: !5933, file: !1, line: 1585, type: !644)
!5952 = !DILocation(line: 1585, column: 7, scope: !5933)
!5953 = !DILocalVariable(name: "resvar", scope: !5933, file: !1, line: 1586, type: !675)
!5954 = !DILocation(line: 1586, column: 8, scope: !5933)
!5955 = !DILocalVariable(name: "expr", scope: !5933, file: !1, line: 1587, type: !675)
!5956 = !DILocation(line: 1587, column: 8, scope: !5933)
!5957 = !DILocalVariable(name: "results", scope: !5933, file: !1, line: 1588, type: !2042)
!5958 = !DILocation(line: 1588, column: 19, scope: !5933)
!5959 = !DILocation(line: 1590, column: 3, scope: !5933)
!5960 = !DILocation(line: 1593, column: 3, scope: !5933)
!5961 = !DILocation(line: 1593, column: 10, scope: !5962)
!5962 = distinct !DILexicalBlock(scope: !5963, file: !1, line: 1593, column: 3)
!5963 = distinct !DILexicalBlock(scope: !5933, file: !1, line: 1593, column: 3)
!5964 = !DILocation(line: 1593, column: 14, scope: !5962)
!5965 = !DILocation(line: 1593, column: 3, scope: !5963)
!5966 = !DILocation(line: 1595, column: 33, scope: !5967)
!5967 = distinct !DILexicalBlock(scope: !5962, file: !1, line: 1594, column: 5)
!5968 = !DILocation(line: 1595, column: 39, scope: !5967)
!5969 = !DILocation(line: 1595, column: 63, scope: !5967)
!5970 = !DILocation(line: 1595, column: 14, scope: !5967)
!5971 = !DILocation(line: 1595, column: 12, scope: !5967)
!5972 = !DILocation(line: 1596, column: 14, scope: !5967)
!5973 = !DILocation(line: 1596, column: 12, scope: !5967)
!5974 = !DILocation(line: 1601, column: 11, scope: !5967)
!5975 = !DILocation(line: 1601, column: 9, scope: !5967)
!5976 = !DILocation(line: 1602, column: 11, scope: !5977)
!5977 = distinct !DILexicalBlock(scope: !5967, file: !1, line: 1602, column: 11)
!5978 = !DILocation(line: 1602, column: 11, scope: !5967)
!5979 = !DILocation(line: 1603, column: 9, scope: !5977)
!5980 = !DILocation(line: 1603, column: 7, scope: !5977)
!5981 = !DILocation(line: 1603, column: 2, scope: !5977)
!5982 = !DILocation(line: 1605, column: 11, scope: !5967)
!5983 = !DILocation(line: 1605, column: 9, scope: !5967)
!5984 = !DILocation(line: 1606, column: 11, scope: !5985)
!5985 = distinct !DILexicalBlock(scope: !5967, file: !1, line: 1606, column: 11)
!5986 = !DILocation(line: 1606, column: 11, scope: !5967)
!5987 = !DILocation(line: 1607, column: 9, scope: !5985)
!5988 = !DILocation(line: 1607, column: 7, scope: !5985)
!5989 = !DILocation(line: 1607, column: 2, scope: !5985)
!5990 = !DILocation(line: 1609, column: 11, scope: !5967)
!5991 = !DILocation(line: 1609, column: 9, scope: !5967)
!5992 = !DILocation(line: 1610, column: 11, scope: !5993)
!5993 = distinct !DILexicalBlock(scope: !5967, file: !1, line: 1610, column: 11)
!5994 = !DILocation(line: 1610, column: 13, scope: !5993)
!5995 = !DILocation(line: 1610, column: 11, scope: !5967)
!5996 = !DILocation(line: 1611, column: 9, scope: !5993)
!5997 = !DILocation(line: 1611, column: 7, scope: !5993)
!5998 = !DILocation(line: 1611, column: 2, scope: !5993)
!5999 = !DILocation(line: 1614, column: 20, scope: !5967)
!6000 = !DILocation(line: 1614, column: 14, scope: !5967)
!6001 = !DILocation(line: 1614, column: 12, scope: !5967)
!6002 = !DILocation(line: 1615, column: 7, scope: !5967)
!6003 = !DILocation(line: 1616, column: 5, scope: !5967)
!6004 = !DILocation(line: 1593, column: 29, scope: !5962)
!6005 = !DILocation(line: 1593, column: 27, scope: !5962)
!6006 = !DILocation(line: 1593, column: 3, scope: !5962)
!6007 = distinct !{!6007, !5965, !6008}
!6008 = !DILocation(line: 1616, column: 5, scope: !5963)
!6009 = !DILocation(line: 1618, column: 3, scope: !5933)
!6010 = !DILocation(line: 1621, column: 7, scope: !6011)
!6011 = distinct !DILexicalBlock(scope: !5933, file: !1, line: 1621, column: 7)
!6012 = !DILocation(line: 1621, column: 34, scope: !6011)
!6013 = !DILocation(line: 1621, column: 7, scope: !5933)
!6014 = !DILocalVariable(name: "i", scope: !6015, file: !1, line: 1623, type: !1147)
!6015 = distinct !DILexicalBlock(scope: !6011, file: !1, line: 1622, column: 5)
!6016 = !DILocation(line: 1623, column: 14, scope: !6015)
!6017 = !DILocalVariable(name: "op", scope: !6015, file: !1, line: 1624, type: !675)
!6018 = !DILocation(line: 1624, column: 12, scope: !6015)
!6019 = !DILocation(line: 1626, column: 14, scope: !6015)
!6020 = !DILocation(line: 1626, column: 12, scope: !6015)
!6021 = !DILocation(line: 1627, column: 14, scope: !6022)
!6022 = distinct !DILexicalBlock(scope: !6015, file: !1, line: 1627, column: 7)
!6023 = !DILocation(line: 1627, column: 12, scope: !6022)
!6024 = !DILocation(line: 1627, column: 19, scope: !6025)
!6025 = distinct !DILexicalBlock(scope: !6022, file: !1, line: 1627, column: 7)
!6026 = !DILocation(line: 1627, column: 7, scope: !6022)
!6027 = !DILocation(line: 1628, column: 9, scope: !6025)
!6028 = !DILocation(line: 1628, column: 7, scope: !6025)
!6029 = !DILocation(line: 1628, column: 2, scope: !6025)
!6030 = !DILocation(line: 1627, column: 56, scope: !6025)
!6031 = !DILocation(line: 1627, column: 7, scope: !6025)
!6032 = distinct !{!6032, !6026, !6033}
!6033 = !DILocation(line: 1628, column: 9, scope: !6022)
!6034 = !DILocation(line: 1629, column: 5, scope: !6015)
!6035 = !DILocation(line: 1631, column: 3, scope: !5933)
!6036 = !DILocation(line: 1633, column: 28, scope: !5933)
!6037 = !DILocation(line: 1633, column: 12, scope: !5933)
!6038 = !DILocation(line: 1633, column: 10, scope: !5933)
!6039 = !DILocation(line: 1634, column: 23, scope: !5933)
!6040 = !DILocation(line: 1634, column: 3, scope: !5933)
!6041 = !DILocation(line: 1635, column: 38, scope: !5933)
!6042 = !DILocation(line: 1635, column: 32, scope: !5933)
!6043 = !DILocation(line: 1635, column: 45, scope: !5933)
!6044 = !DILocation(line: 1635, column: 68, scope: !5933)
!6045 = !DILocation(line: 1635, column: 10, scope: !5933)
!6046 = !DILocation(line: 1635, column: 3, scope: !5933)
!6047 = distinct !DISubprogram(name: "gimple_bb", scope: !389, file: !389, line: 1112, type: !6048, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6048 = !DISubroutineType(types: !6049)
!6049 = !{!966, !4203}
!6050 = !DILocalVariable(name: "g", arg: 1, scope: !6047, file: !389, line: 1112, type: !4203)
!6051 = !DILocation(line: 1112, column: 25, scope: !6047)
!6052 = !DILocation(line: 1114, column: 10, scope: !6047)
!6053 = !DILocation(line: 1114, column: 13, scope: !6047)
!6054 = !DILocation(line: 1114, column: 20, scope: !6047)
!6055 = !DILocation(line: 1114, column: 3, scope: !6047)
!6056 = distinct !DISubprogram(name: "gsi_after_labels", scope: !389, file: !389, line: 4510, type: !6057, scopeLine: 4511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6057 = !DISubroutineType(types: !6058)
!6058 = !{!4406, !1454}
!6059 = !DILocalVariable(name: "bb", arg: 1, scope: !6056, file: !389, line: 4510, type: !1454)
!6060 = !DILocation(line: 4510, column: 31, scope: !6056)
!6061 = !DILocalVariable(name: "gsi", scope: !6056, file: !389, line: 4512, type: !4406)
!6062 = !DILocation(line: 4512, column: 24, scope: !6056)
!6063 = !DILocation(line: 4512, column: 44, scope: !6056)
!6064 = !DILocation(line: 4512, column: 30, scope: !6056)
!6065 = !DILocation(line: 4514, column: 3, scope: !6056)
!6066 = !DILocation(line: 4514, column: 11, scope: !6056)
!6067 = !DILocation(line: 4514, column: 27, scope: !6056)
!6068 = !DILocation(line: 4514, column: 43, scope: !6056)
!6069 = !DILocation(line: 4514, column: 30, scope: !6056)
!6070 = !DILocation(line: 4514, column: 59, scope: !6056)
!6071 = !DILocation(line: 0, scope: !6056)
!6072 = !DILocation(line: 4515, column: 5, scope: !6056)
!6073 = distinct !{!6073, !6065, !6074}
!6074 = !DILocation(line: 4515, column: 19, scope: !6056)
!6075 = !DILocation(line: 4517, column: 3, scope: !6056)
!6076 = distinct !DISubprogram(name: "make_ssa_name", scope: !5479, file: !5479, line: 1245, type: !6077, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6077 = !DISubroutineType(types: !6078)
!6078 = !{!675, !675, !1002}
!6079 = !DILocalVariable(name: "var", arg: 1, scope: !6076, file: !5479, line: 1245, type: !675)
!6080 = !DILocation(line: 1245, column: 21, scope: !6076)
!6081 = !DILocalVariable(name: "stmt", arg: 2, scope: !6076, file: !5479, line: 1245, type: !1002)
!6082 = !DILocation(line: 1245, column: 33, scope: !6076)
!6083 = !DILocation(line: 1247, column: 28, scope: !6076)
!6084 = !DILocation(line: 1247, column: 34, scope: !6076)
!6085 = !DILocation(line: 1247, column: 39, scope: !6076)
!6086 = !DILocation(line: 1247, column: 10, scope: !6076)
!6087 = !DILocation(line: 1247, column: 3, scope: !6076)
!6088 = distinct !DISubprogram(name: "gimple_assign_set_lhs", scope: !389, file: !389, line: 1714, type: !6089, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6089 = !DISubroutineType(types: !6090)
!6090 = !{null, !1002, !675}
!6091 = !DILocalVariable(name: "gs", arg: 1, scope: !6088, file: !389, line: 1714, type: !1002)
!6092 = !DILocation(line: 1714, column: 31, scope: !6088)
!6093 = !DILocalVariable(name: "lhs", arg: 2, scope: !6088, file: !389, line: 1714, type: !675)
!6094 = !DILocation(line: 1714, column: 40, scope: !6088)
!6095 = !DILocation(line: 1717, column: 18, scope: !6088)
!6096 = !DILocation(line: 1717, column: 25, scope: !6088)
!6097 = !DILocation(line: 1717, column: 3, scope: !6088)
!6098 = !DILocation(line: 1719, column: 7, scope: !6099)
!6099 = distinct !DILexicalBlock(scope: !6088, file: !389, line: 1719, column: 7)
!6100 = !DILocation(line: 1719, column: 11, scope: !6099)
!6101 = !DILocation(line: 1719, column: 14, scope: !6099)
!6102 = !DILocation(line: 1719, column: 30, scope: !6099)
!6103 = !DILocation(line: 1719, column: 7, scope: !6088)
!6104 = !DILocation(line: 1720, column: 31, scope: !6099)
!6105 = !DILocation(line: 1720, column: 5, scope: !6099)
!6106 = !DILocation(line: 1720, column: 29, scope: !6099)
!6107 = !DILocation(line: 1721, column: 1, scope: !6088)
!6108 = distinct !DISubprogram(name: "gimple_cond_set_condition", scope: !389, file: !389, line: 2434, type: !6109, scopeLine: 2435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6109 = !DISubroutineType(types: !6110)
!6110 = !{null, !1002, !132, !675, !675}
!6111 = !DILocalVariable(name: "stmt", arg: 1, scope: !6108, file: !389, line: 2434, type: !1002)
!6112 = !DILocation(line: 2434, column: 35, scope: !6108)
!6113 = !DILocalVariable(name: "code", arg: 2, scope: !6108, file: !389, line: 2434, type: !132)
!6114 = !DILocation(line: 2434, column: 56, scope: !6108)
!6115 = !DILocalVariable(name: "lhs", arg: 3, scope: !6108, file: !389, line: 2434, type: !675)
!6116 = !DILocation(line: 2434, column: 67, scope: !6108)
!6117 = !DILocalVariable(name: "rhs", arg: 4, scope: !6108, file: !389, line: 2434, type: !675)
!6118 = !DILocation(line: 2434, column: 77, scope: !6108)
!6119 = !DILocation(line: 2436, column: 25, scope: !6108)
!6120 = !DILocation(line: 2436, column: 31, scope: !6108)
!6121 = !DILocation(line: 2436, column: 3, scope: !6108)
!6122 = !DILocation(line: 2437, column: 24, scope: !6108)
!6123 = !DILocation(line: 2437, column: 30, scope: !6108)
!6124 = !DILocation(line: 2437, column: 3, scope: !6108)
!6125 = !DILocation(line: 2438, column: 24, scope: !6108)
!6126 = !DILocation(line: 2438, column: 30, scope: !6108)
!6127 = !DILocation(line: 2438, column: 3, scope: !6108)
!6128 = !DILocation(line: 2439, column: 1, scope: !6108)
!6129 = distinct !DISubprogram(name: "update_stmt", scope: !389, file: !389, line: 1456, type: !5386, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6130 = !DILocalVariable(name: "s", arg: 1, scope: !6129, file: !389, line: 1456, type: !1002)
!6131 = !DILocation(line: 1456, column: 21, scope: !6129)
!6132 = !DILocation(line: 1458, column: 23, scope: !6133)
!6133 = distinct !DILexicalBlock(scope: !6129, file: !389, line: 1458, column: 7)
!6134 = !DILocation(line: 1458, column: 7, scope: !6133)
!6135 = !DILocation(line: 1458, column: 7, scope: !6129)
!6136 = !DILocation(line: 1460, column: 28, scope: !6137)
!6137 = distinct !DILexicalBlock(scope: !6133, file: !389, line: 1459, column: 5)
!6138 = !DILocation(line: 1460, column: 7, scope: !6137)
!6139 = !DILocation(line: 1461, column: 29, scope: !6137)
!6140 = !DILocation(line: 1461, column: 7, scope: !6137)
!6141 = !DILocation(line: 1462, column: 5, scope: !6137)
!6142 = !DILocation(line: 1463, column: 1, scope: !6129)
!6143 = distinct !DISubprogram(name: "VEC_tree_base_replace", scope: !133, file: !133, line: 182, type: !6144, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6144 = !DISubroutineType(types: !6145)
!6145 = !{!675, !6146, !5, !675}
!6146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1553, size: 64)
!6147 = !DILocalVariable(name: "vec_", arg: 1, scope: !6143, file: !133, line: 182, type: !6146)
!6148 = !DILocation(line: 182, column: 1, scope: !6143)
!6149 = !DILocalVariable(name: "ix_", arg: 2, scope: !6143, file: !133, line: 182, type: !5)
!6150 = !DILocalVariable(name: "obj_", arg: 3, scope: !6143, file: !133, line: 182, type: !675)
!6151 = !DILocalVariable(name: "old_obj_", scope: !6143, file: !133, line: 182, type: !675)
!6152 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !133, file: !133, line: 182, type: !6153, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6153 = !DISubroutineType(types: !6154)
!6154 = !{!644, !5927, !5, !1036}
!6155 = !DILocalVariable(name: "vec_", arg: 1, scope: !6152, file: !133, line: 182, type: !5927)
!6156 = !DILocation(line: 182, column: 1, scope: !6152)
!6157 = !DILocalVariable(name: "ix_", arg: 2, scope: !6152, file: !133, line: 182, type: !5)
!6158 = !DILocalVariable(name: "ptr", arg: 3, scope: !6152, file: !133, line: 182, type: !1036)
!6159 = !DILocation(line: 182, column: 1, scope: !6160)
!6160 = distinct !DILexicalBlock(scope: !6152, file: !133, line: 182, column: 1)
!6161 = !DILocation(line: 182, column: 1, scope: !6162)
!6162 = distinct !DILexicalBlock(scope: !6160, file: !133, line: 182, column: 1)
!6163 = !DILocation(line: 182, column: 1, scope: !6164)
!6164 = distinct !DILexicalBlock(scope: !6160, file: !133, line: 182, column: 1)
!6165 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !5479, file: !5479, line: 434, type: !6166, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6166 = !DISubroutineType(types: !6167)
!6167 = !{!675, !6168}
!6168 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !459, line: 27, baseType: !1036)
!6169 = !DILocalVariable(name: "def", arg: 1, scope: !6165, file: !5479, line: 434, type: !6168)
!6170 = !DILocation(line: 434, column: 33, scope: !6165)
!6171 = !DILocation(line: 436, column: 11, scope: !6165)
!6172 = !DILocation(line: 436, column: 10, scope: !6165)
!6173 = !DILocation(line: 436, column: 3, scope: !6165)
!6174 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !389, file: !389, line: 3080, type: !6175, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6175 = !DISubroutineType(types: !6176)
!6176 = !{!1036, !1002}
!6177 = !DILocalVariable(name: "gs", arg: 1, scope: !6174, file: !389, line: 3080, type: !1002)
!6178 = !DILocation(line: 3080, column: 31, scope: !6174)
!6179 = !DILocation(line: 3083, column: 11, scope: !6174)
!6180 = !DILocation(line: 3083, column: 15, scope: !6174)
!6181 = !DILocation(line: 3083, column: 26, scope: !6174)
!6182 = !DILocation(line: 3083, column: 3, scope: !6174)
!6183 = distinct !DISubprogram(name: "single_ssa_tree_operand", scope: !5479, file: !5479, line: 803, type: !6184, scopeLine: 804, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6184 = !DISubroutineType(types: !6185)
!6185 = !{!675, !1002, !644}
!6186 = !DILocalVariable(name: "stmt", arg: 1, scope: !6183, file: !5479, line: 803, type: !1002)
!6187 = !DILocation(line: 803, column: 33, scope: !6183)
!6188 = !DILocalVariable(name: "flags", arg: 2, scope: !6183, file: !5479, line: 803, type: !644)
!6189 = !DILocation(line: 803, column: 43, scope: !6183)
!6190 = !DILocalVariable(name: "var", scope: !6183, file: !5479, line: 805, type: !675)
!6191 = !DILocation(line: 805, column: 8, scope: !6183)
!6192 = !DILocalVariable(name: "iter", scope: !6183, file: !5479, line: 806, type: !6193)
!6193 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !459, line: 140, baseType: !6194)
!6194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !459, line: 131, size: 320, elements: !6195)
!6195 = !{!6196, !6197, !6198, !6200, !6202, !6203, !6204}
!6196 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !6194, file: !459, line: 133, baseType: !793, size: 8)
!6197 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !6194, file: !459, line: 134, baseType: !458, size: 32, offset: 32)
!6198 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !6194, file: !459, line: 135, baseType: !6199, size: 64, offset: 64)
!6199 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !459, line: 42, baseType: !1031)
!6200 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !6194, file: !459, line: 136, baseType: !6201, size: 64, offset: 128)
!6201 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !459, line: 50, baseType: !1038)
!6202 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !6194, file: !459, line: 137, baseType: !644, size: 32, offset: 192)
!6203 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !6194, file: !459, line: 138, baseType: !644, size: 32, offset: 224)
!6204 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !6194, file: !459, line: 139, baseType: !1002, size: 64, offset: 256)
!6205 = !DILocation(line: 806, column: 15, scope: !6183)
!6206 = !DILocation(line: 808, column: 35, scope: !6183)
!6207 = !DILocation(line: 808, column: 41, scope: !6183)
!6208 = !DILocation(line: 808, column: 9, scope: !6183)
!6209 = !DILocation(line: 808, column: 7, scope: !6183)
!6210 = !DILocation(line: 809, column: 7, scope: !6211)
!6211 = distinct !DILexicalBlock(scope: !6183, file: !5479, line: 809, column: 7)
!6212 = !DILocation(line: 809, column: 7, scope: !6183)
!6213 = !DILocation(line: 810, column: 5, scope: !6211)
!6214 = !DILocation(line: 811, column: 3, scope: !6183)
!6215 = !DILocation(line: 812, column: 7, scope: !6216)
!6216 = distinct !DILexicalBlock(scope: !6183, file: !5479, line: 812, column: 7)
!6217 = !DILocation(line: 812, column: 7, scope: !6183)
!6218 = !DILocation(line: 813, column: 12, scope: !6216)
!6219 = !DILocation(line: 813, column: 5, scope: !6216)
!6220 = !DILocation(line: 814, column: 3, scope: !6183)
!6221 = !DILocation(line: 815, column: 1, scope: !6183)
!6222 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !133, file: !133, line: 182, type: !6223, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6223 = !DISubroutineType(types: !6224)
!6224 = !{!5, !5927}
!6225 = !DILocalVariable(name: "vec_", arg: 1, scope: !6222, file: !133, line: 182, type: !5927)
!6226 = !DILocation(line: 182, column: 1, scope: !6222)
!6227 = distinct !DISubprogram(name: "lbv_to_gcc_expression", scope: !1, file: !1, line: 1546, type: !6228, scopeLine: 1549, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6228 = !DISubroutineType(types: !6229)
!6229 = !{!675, !636, !675, !2042, !5936}
!6230 = !DILocalVariable(name: "lbv", arg: 1, scope: !6227, file: !1, line: 1546, type: !636)
!6231 = !DILocation(line: 1546, column: 43, scope: !6227)
!6232 = !DILocalVariable(name: "type", arg: 2, scope: !6227, file: !1, line: 1547, type: !675)
!6233 = !DILocation(line: 1547, column: 15, scope: !6227)
!6234 = !DILocalVariable(name: "induction_vars", arg: 3, scope: !6227, file: !1, line: 1547, type: !2042)
!6235 = !DILocation(line: 1547, column: 37, scope: !6227)
!6236 = !DILocalVariable(name: "stmts_to_insert", arg: 4, scope: !6227, file: !1, line: 1548, type: !5936)
!6237 = !DILocation(line: 1548, column: 22, scope: !6227)
!6238 = !DILocalVariable(name: "k", scope: !6227, file: !1, line: 1550, type: !644)
!6239 = !DILocation(line: 1550, column: 7, scope: !6227)
!6240 = !DILocalVariable(name: "resvar", scope: !6227, file: !1, line: 1551, type: !675)
!6241 = !DILocation(line: 1551, column: 8, scope: !6227)
!6242 = !DILocalVariable(name: "expr", scope: !6227, file: !1, line: 1552, type: !675)
!6243 = !DILocation(line: 1552, column: 8, scope: !6227)
!6244 = !DILocation(line: 1552, column: 34, scope: !6227)
!6245 = !DILocation(line: 1552, column: 40, scope: !6227)
!6246 = !DILocation(line: 1552, column: 64, scope: !6227)
!6247 = !DILocation(line: 1552, column: 15, scope: !6227)
!6248 = !DILocation(line: 1554, column: 7, scope: !6227)
!6249 = !DILocation(line: 1554, column: 5, scope: !6227)
!6250 = !DILocation(line: 1555, column: 3, scope: !6227)
!6251 = !DILocation(line: 1556, column: 7, scope: !6252)
!6252 = distinct !DILexicalBlock(scope: !6227, file: !1, line: 1556, column: 7)
!6253 = !DILocation(line: 1556, column: 9, scope: !6252)
!6254 = !DILocation(line: 1556, column: 7, scope: !6227)
!6255 = !DILocation(line: 1557, column: 12, scope: !6252)
!6256 = !DILocation(line: 1557, column: 10, scope: !6252)
!6257 = !DILocation(line: 1557, column: 5, scope: !6252)
!6258 = !DILocation(line: 1559, column: 28, scope: !6227)
!6259 = !DILocation(line: 1559, column: 12, scope: !6227)
!6260 = !DILocation(line: 1559, column: 10, scope: !6227)
!6261 = !DILocation(line: 1560, column: 23, scope: !6227)
!6262 = !DILocation(line: 1560, column: 3, scope: !6227)
!6263 = !DILocation(line: 1561, column: 38, scope: !6227)
!6264 = !DILocation(line: 1561, column: 32, scope: !6227)
!6265 = !DILocation(line: 1561, column: 45, scope: !6227)
!6266 = !DILocation(line: 1561, column: 68, scope: !6227)
!6267 = !DILocation(line: 1561, column: 10, scope: !6227)
!6268 = !DILocation(line: 1561, column: 3, scope: !6227)
!6269 = distinct !DISubprogram(name: "first_imm_use_on_stmt", scope: !5479, file: !5479, line: 1101, type: !6270, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6270 = !DISubroutineType(types: !6271)
!6271 = !{!2072, !5499}
!6272 = !DILocalVariable(name: "imm", arg: 1, scope: !6269, file: !5479, line: 1101, type: !5499)
!6273 = !DILocation(line: 1101, column: 42, scope: !6269)
!6274 = !DILocation(line: 1103, column: 24, scope: !6269)
!6275 = !DILocation(line: 1103, column: 29, scope: !6269)
!6276 = !DILocation(line: 1103, column: 38, scope: !6269)
!6277 = !DILocation(line: 1103, column: 3, scope: !6269)
!6278 = !DILocation(line: 1103, column: 8, scope: !6269)
!6279 = !DILocation(line: 1103, column: 22, scope: !6269)
!6280 = !DILocation(line: 1104, column: 10, scope: !6269)
!6281 = !DILocation(line: 1104, column: 15, scope: !6269)
!6282 = !DILocation(line: 1104, column: 3, scope: !6269)
!6283 = distinct !DISubprogram(name: "end_imm_use_on_stmt_p", scope: !5479, file: !5479, line: 1110, type: !5547, scopeLine: 1111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6284 = !DILocalVariable(name: "imm", arg: 1, scope: !6283, file: !5479, line: 1110, type: !5549)
!6285 = !DILocation(line: 1110, column: 48, scope: !6283)
!6286 = !DILocation(line: 1112, column: 11, scope: !6283)
!6287 = !DILocation(line: 1112, column: 16, scope: !6283)
!6288 = !DILocation(line: 1112, column: 29, scope: !6283)
!6289 = !DILocation(line: 1112, column: 34, scope: !6283)
!6290 = !DILocation(line: 1112, column: 24, scope: !6283)
!6291 = !DILocation(line: 1112, column: 10, scope: !6283)
!6292 = !DILocation(line: 1112, column: 3, scope: !6283)
!6293 = distinct !DISubprogram(name: "next_imm_use_on_stmt", scope: !5479, file: !5479, line: 1118, type: !6270, scopeLine: 1119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6294 = !DILocalVariable(name: "imm", arg: 1, scope: !6293, file: !5479, line: 1118, type: !5499)
!6295 = !DILocation(line: 1118, column: 41, scope: !6293)
!6296 = !DILocation(line: 1120, column: 18, scope: !6293)
!6297 = !DILocation(line: 1120, column: 23, scope: !6293)
!6298 = !DILocation(line: 1120, column: 3, scope: !6293)
!6299 = !DILocation(line: 1120, column: 8, scope: !6293)
!6300 = !DILocation(line: 1120, column: 16, scope: !6293)
!6301 = !DILocation(line: 1121, column: 30, scope: !6302)
!6302 = distinct !DILexicalBlock(scope: !6293, file: !5479, line: 1121, column: 7)
!6303 = !DILocation(line: 1121, column: 7, scope: !6302)
!6304 = !DILocation(line: 1121, column: 7, scope: !6293)
!6305 = !DILocation(line: 1122, column: 5, scope: !6302)
!6306 = !DILocation(line: 1125, column: 28, scope: !6307)
!6307 = distinct !DILexicalBlock(scope: !6302, file: !5479, line: 1124, column: 5)
!6308 = !DILocation(line: 1125, column: 33, scope: !6307)
!6309 = !DILocation(line: 1125, column: 42, scope: !6307)
!6310 = !DILocation(line: 1125, column: 7, scope: !6307)
!6311 = !DILocation(line: 1125, column: 12, scope: !6307)
!6312 = !DILocation(line: 1125, column: 26, scope: !6307)
!6313 = !DILocation(line: 1126, column: 14, scope: !6307)
!6314 = !DILocation(line: 1126, column: 19, scope: !6307)
!6315 = !DILocation(line: 1126, column: 7, scope: !6307)
!6316 = !DILocation(line: 1128, column: 1, scope: !6293)
!6317 = distinct !DISubprogram(name: "gimple_phi_arg_edge", scope: !5479, file: !5479, line: 467, type: !6318, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6318 = !DISubroutineType(types: !6319)
!6319 = !{!982, !1002, !1147}
!6320 = !DILocalVariable(name: "gs", arg: 1, scope: !6317, file: !5479, line: 467, type: !1002)
!6321 = !DILocation(line: 467, column: 29, scope: !6317)
!6322 = !DILocalVariable(name: "i", arg: 2, scope: !6317, file: !5479, line: 467, type: !1147)
!6323 = !DILocation(line: 467, column: 40, scope: !6317)
!6324 = !DILocation(line: 469, column: 10, scope: !6317)
!6325 = !DILocation(line: 469, column: 3, scope: !6317)
!6326 = distinct !DISubprogram(name: "VEC_gimple_heap_safe_push", scope: !389, file: !389, line: 34, type: !6327, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6327 = !DISubroutineType(types: !6328)
!6328 = !{!6329, !5605, !1002}
!6329 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1002, size: 64)
!6330 = !DILocalVariable(name: "vec_", arg: 1, scope: !6326, file: !389, line: 34, type: !5605)
!6331 = !DILocation(line: 34, column: 1, scope: !6326)
!6332 = !DILocalVariable(name: "obj_", arg: 2, scope: !6326, file: !389, line: 34, type: !1002)
!6333 = distinct !DISubprogram(name: "gsi_start_bb", scope: !389, file: !389, line: 4418, type: !6057, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6334 = !DILocalVariable(name: "bb", arg: 1, scope: !6333, file: !389, line: 4418, type: !1454)
!6335 = !DILocation(line: 4418, column: 27, scope: !6333)
!6336 = !DILocalVariable(name: "i", scope: !6333, file: !389, line: 4420, type: !4406)
!6337 = !DILocation(line: 4420, column: 24, scope: !6333)
!6338 = !DILocalVariable(name: "seq", scope: !6333, file: !389, line: 4421, type: !992)
!6339 = !DILocation(line: 4421, column: 14, scope: !6333)
!6340 = !DILocation(line: 4423, column: 17, scope: !6333)
!6341 = !DILocation(line: 4423, column: 9, scope: !6333)
!6342 = !DILocation(line: 4423, column: 7, scope: !6333)
!6343 = !DILocation(line: 4424, column: 29, scope: !6333)
!6344 = !DILocation(line: 4424, column: 11, scope: !6333)
!6345 = !DILocation(line: 4424, column: 5, scope: !6333)
!6346 = !DILocation(line: 4424, column: 9, scope: !6333)
!6347 = !DILocation(line: 4425, column: 11, scope: !6333)
!6348 = !DILocation(line: 4425, column: 5, scope: !6333)
!6349 = !DILocation(line: 4425, column: 9, scope: !6333)
!6350 = !DILocation(line: 4426, column: 10, scope: !6333)
!6351 = !DILocation(line: 4426, column: 5, scope: !6333)
!6352 = !DILocation(line: 4426, column: 8, scope: !6333)
!6353 = !DILocation(line: 4428, column: 3, scope: !6333)
!6354 = distinct !DISubprogram(name: "gsi_end_p", scope: !389, file: !389, line: 4467, type: !6355, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6355 = !DISubroutineType(types: !6356)
!6356 = !{!793, !4406}
!6357 = !DILocalVariable(name: "i", arg: 1, scope: !6354, file: !389, line: 4467, type: !4406)
!6358 = !DILocation(line: 4467, column: 33, scope: !6354)
!6359 = !DILocation(line: 4469, column: 12, scope: !6354)
!6360 = !DILocation(line: 4469, column: 16, scope: !6354)
!6361 = !DILocation(line: 4469, column: 10, scope: !6354)
!6362 = !DILocation(line: 4469, column: 3, scope: !6354)
!6363 = distinct !DISubprogram(name: "gsi_stmt", scope: !389, file: !389, line: 4501, type: !6364, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6364 = !DISubroutineType(types: !6365)
!6365 = !{!1002, !4406}
!6366 = !DILocalVariable(name: "i", arg: 1, scope: !6363, file: !389, line: 4501, type: !4406)
!6367 = !DILocation(line: 4501, column: 32, scope: !6363)
!6368 = !DILocation(line: 4503, column: 12, scope: !6363)
!6369 = !DILocation(line: 4503, column: 17, scope: !6363)
!6370 = !DILocation(line: 4503, column: 3, scope: !6363)
!6371 = distinct !DISubprogram(name: "not_interesting_stmt", scope: !1, file: !1, line: 1885, type: !6372, scopeLine: 1886, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6372 = !DISubroutineType(types: !6373)
!6373 = !{!793, !1002}
!6374 = !DILocalVariable(name: "stmt", arg: 1, scope: !6371, file: !1, line: 1885, type: !1002)
!6375 = !DILocation(line: 1885, column: 30, scope: !6371)
!6376 = !DILocation(line: 1889, column: 20, scope: !6377)
!6377 = distinct !DILexicalBlock(scope: !6371, file: !1, line: 1889, column: 7)
!6378 = !DILocation(line: 1889, column: 7, scope: !6377)
!6379 = !DILocation(line: 1889, column: 26, scope: !6377)
!6380 = !DILocation(line: 1890, column: 7, scope: !6377)
!6381 = !DILocation(line: 1890, column: 23, scope: !6377)
!6382 = !DILocation(line: 1890, column: 10, scope: !6377)
!6383 = !DILocation(line: 1890, column: 29, scope: !6377)
!6384 = !DILocation(line: 1891, column: 7, scope: !6377)
!6385 = !DILocation(line: 1891, column: 23, scope: !6377)
!6386 = !DILocation(line: 1891, column: 10, scope: !6377)
!6387 = !DILocation(line: 1891, column: 29, scope: !6377)
!6388 = !DILocation(line: 1892, column: 7, scope: !6377)
!6389 = !DILocation(line: 1892, column: 27, scope: !6377)
!6390 = !DILocation(line: 1892, column: 10, scope: !6377)
!6391 = !DILocation(line: 1889, column: 7, scope: !6371)
!6392 = !DILocation(line: 1893, column: 5, scope: !6377)
!6393 = !DILocation(line: 1894, column: 3, scope: !6371)
!6394 = !DILocation(line: 1895, column: 1, scope: !6371)
!6395 = distinct !DISubprogram(name: "stmt_is_bumper_for_loop", scope: !1, file: !1, line: 1929, type: !6396, scopeLine: 1930, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6396 = !DISubroutineType(types: !6397)
!6397 = !{!793, !1217, !1002}
!6398 = !DILocalVariable(name: "loop", arg: 1, scope: !6395, file: !1, line: 1929, type: !1217)
!6399 = !DILocation(line: 1929, column: 39, scope: !6395)
!6400 = !DILocalVariable(name: "stmt", arg: 2, scope: !6395, file: !1, line: 1929, type: !1002)
!6401 = !DILocation(line: 1929, column: 52, scope: !6395)
!6402 = !DILocalVariable(name: "use", scope: !6395, file: !1, line: 1931, type: !1002)
!6403 = !DILocation(line: 1931, column: 10, scope: !6395)
!6404 = !DILocalVariable(name: "def", scope: !6395, file: !1, line: 1932, type: !675)
!6405 = !DILocation(line: 1932, column: 8, scope: !6395)
!6406 = !DILocalVariable(name: "iter", scope: !6395, file: !1, line: 1933, type: !5415)
!6407 = !DILocation(line: 1933, column: 20, scope: !6395)
!6408 = !DILocalVariable(name: "use_p", scope: !6395, file: !1, line: 1934, type: !2072)
!6409 = !DILocation(line: 1934, column: 17, scope: !6395)
!6410 = !DILocation(line: 1936, column: 9, scope: !6395)
!6411 = !DILocation(line: 1936, column: 7, scope: !6395)
!6412 = !DILocation(line: 1937, column: 8, scope: !6413)
!6413 = distinct !DILexicalBlock(scope: !6395, file: !1, line: 1937, column: 7)
!6414 = !DILocation(line: 1937, column: 7, scope: !6395)
!6415 = !DILocation(line: 1938, column: 5, scope: !6413)
!6416 = !DILocation(line: 1940, column: 3, scope: !6417)
!6417 = distinct !DILexicalBlock(scope: !6395, file: !1, line: 1940, column: 3)
!6418 = !DILocation(line: 1940, column: 3, scope: !6419)
!6419 = distinct !DILexicalBlock(scope: !6417, file: !1, line: 1940, column: 3)
!6420 = !DILocation(line: 1942, column: 13, scope: !6421)
!6421 = distinct !DILexicalBlock(scope: !6419, file: !1, line: 1941, column: 5)
!6422 = !DILocation(line: 1942, column: 11, scope: !6421)
!6423 = !DILocation(line: 1943, column: 24, scope: !6424)
!6424 = distinct !DILexicalBlock(scope: !6421, file: !1, line: 1943, column: 11)
!6425 = !DILocation(line: 1943, column: 11, scope: !6424)
!6426 = !DILocation(line: 1943, column: 29, scope: !6424)
!6427 = !DILocation(line: 1943, column: 11, scope: !6421)
!6428 = !DILocation(line: 1945, column: 32, scope: !6429)
!6429 = distinct !DILexicalBlock(scope: !6430, file: !1, line: 1945, column: 8)
!6430 = distinct !DILexicalBlock(scope: !6424, file: !1, line: 1944, column: 2)
!6431 = !DILocation(line: 1945, column: 38, scope: !6429)
!6432 = !DILocation(line: 1945, column: 43, scope: !6429)
!6433 = !DILocation(line: 1945, column: 8, scope: !6429)
!6434 = !DILocation(line: 1945, column: 8, scope: !6430)
!6435 = !DILocation(line: 1946, column: 32, scope: !6436)
!6436 = distinct !DILexicalBlock(scope: !6429, file: !1, line: 1946, column: 10)
!6437 = !DILocation(line: 1946, column: 38, scope: !6436)
!6438 = !DILocation(line: 1946, column: 10, scope: !6436)
!6439 = !DILocation(line: 1946, column: 10, scope: !6429)
!6440 = !DILocation(line: 1947, column: 8, scope: !6436)
!6441 = !DILocation(line: 1946, column: 54, scope: !6436)
!6442 = !DILocation(line: 1948, column: 2, scope: !6430)
!6443 = !DILocation(line: 1949, column: 5, scope: !6421)
!6444 = distinct !{!6444, !6416, !6445}
!6445 = !DILocation(line: 1949, column: 5, scope: !6417)
!6446 = !DILocation(line: 1950, column: 3, scope: !6395)
!6447 = !DILocation(line: 1951, column: 1, scope: !6395)
!6448 = distinct !DISubprogram(name: "gsi_next", scope: !389, file: !389, line: 4485, type: !6449, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6449 = !DISubroutineType(types: !6450)
!6450 = !{null, !6451}
!6451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4406, size: 64)
!6452 = !DILocalVariable(name: "i", arg: 1, scope: !6448, file: !389, line: 4485, type: !6451)
!6453 = !DILocation(line: 4485, column: 33, scope: !6448)
!6454 = !DILocation(line: 4487, column: 12, scope: !6448)
!6455 = !DILocation(line: 4487, column: 15, scope: !6448)
!6456 = !DILocation(line: 4487, column: 20, scope: !6448)
!6457 = !DILocation(line: 4487, column: 3, scope: !6448)
!6458 = !DILocation(line: 4487, column: 6, scope: !6448)
!6459 = !DILocation(line: 4487, column: 10, scope: !6448)
!6460 = !DILocation(line: 4488, column: 1, scope: !6448)
!6461 = distinct !DISubprogram(name: "lambda_transform_legal_p", scope: !1, file: !1, line: 2599, type: !6462, scopeLine: 2602, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6462 = !DISubroutineType(types: !6463)
!6463 = !{!793, !2241, !644, !6464}
!6464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6465, size: 64)
!6465 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ddr_p_heap", file: !2103, line: 333, baseType: !6466)
!6466 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ddr_p_heap", file: !2103, line: 333, size: 128, elements: !6467)
!6467 = !{!6468}
!6468 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !6466, file: !2103, line: 333, baseType: !6469, size: 128)
!6469 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ddr_p_base", file: !2103, line: 332, baseType: !6470)
!6470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ddr_p_base", file: !2103, line: 332, size: 128, elements: !6471)
!6471 = !{!6472, !6473, !6474}
!6472 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !6470, file: !2103, line: 332, baseType: !5, size: 32)
!6473 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !6470, file: !2103, line: 332, baseType: !5, size: 32, offset: 32)
!6474 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !6470, file: !2103, line: 332, baseType: !6475, size: 64, offset: 64)
!6475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2102, size: 64, elements: !774)
!6476 = !DILocalVariable(name: "trans", arg: 1, scope: !6461, file: !1, line: 2599, type: !2241)
!6477 = !DILocation(line: 2599, column: 47, scope: !6461)
!6478 = !DILocalVariable(name: "nb_loops", arg: 2, scope: !6461, file: !1, line: 2600, type: !644)
!6479 = !DILocation(line: 2600, column: 10, scope: !6461)
!6480 = !DILocalVariable(name: "dependence_relations", arg: 3, scope: !6461, file: !1, line: 2601, type: !6464)
!6481 = !DILocation(line: 2601, column: 25, scope: !6461)
!6482 = !DILocalVariable(name: "i", scope: !6461, file: !1, line: 2603, type: !5)
!6483 = !DILocation(line: 2603, column: 16, scope: !6461)
!6484 = !DILocalVariable(name: "j", scope: !6461, file: !1, line: 2603, type: !5)
!6485 = !DILocation(line: 2603, column: 19, scope: !6461)
!6486 = !DILocalVariable(name: "distres", scope: !6461, file: !1, line: 2604, type: !642)
!6487 = !DILocation(line: 2604, column: 17, scope: !6461)
!6488 = !DILocalVariable(name: "ddr", scope: !6461, file: !1, line: 2605, type: !2104)
!6489 = !DILocation(line: 2605, column: 36, scope: !6461)
!6490 = !DILocation(line: 2607, column: 3, scope: !6461)
!6491 = !DILocation(line: 2611, column: 7, scope: !6492)
!6492 = distinct !DILexicalBlock(scope: !6461, file: !1, line: 2611, column: 7)
!6493 = !DILocation(line: 2611, column: 48, scope: !6492)
!6494 = !DILocation(line: 2611, column: 7, scope: !6461)
!6495 = !DILocation(line: 2612, column: 5, scope: !6492)
!6496 = !DILocation(line: 2614, column: 9, scope: !6461)
!6497 = !DILocation(line: 2614, column: 7, scope: !6461)
!6498 = !DILocation(line: 2615, column: 7, scope: !6499)
!6499 = distinct !DILexicalBlock(scope: !6461, file: !1, line: 2615, column: 7)
!6500 = !DILocation(line: 2615, column: 11, scope: !6499)
!6501 = !DILocation(line: 2615, column: 7, scope: !6461)
!6502 = !DILocation(line: 2616, column: 5, scope: !6499)
!6503 = !DILocation(line: 2620, column: 7, scope: !6504)
!6504 = distinct !DILexicalBlock(scope: !6461, file: !1, line: 2620, column: 7)
!6505 = !DILocation(line: 2620, column: 34, scope: !6504)
!6506 = !DILocation(line: 2620, column: 31, scope: !6504)
!6507 = !DILocation(line: 2620, column: 7, scope: !6461)
!6508 = !DILocation(line: 2621, column: 5, scope: !6504)
!6509 = !DILocation(line: 2623, column: 32, scope: !6461)
!6510 = !DILocation(line: 2623, column: 13, scope: !6461)
!6511 = !DILocation(line: 2623, column: 11, scope: !6461)
!6512 = !DILocation(line: 2626, column: 10, scope: !6513)
!6513 = distinct !DILexicalBlock(scope: !6461, file: !1, line: 2626, column: 3)
!6514 = !DILocation(line: 2626, column: 8, scope: !6513)
!6515 = !DILocation(line: 2626, column: 15, scope: !6516)
!6516 = distinct !DILexicalBlock(scope: !6513, file: !1, line: 2626, column: 3)
!6517 = !DILocation(line: 2626, column: 3, scope: !6513)
!6518 = !DILocation(line: 2631, column: 11, scope: !6519)
!6519 = distinct !DILexicalBlock(scope: !6520, file: !1, line: 2631, column: 11)
!6520 = distinct !DILexicalBlock(scope: !6516, file: !1, line: 2627, column: 5)
!6521 = !DILocation(line: 2631, column: 38, scope: !6519)
!6522 = !DILocation(line: 2631, column: 35, scope: !6519)
!6523 = !DILocation(line: 2632, column: 4, scope: !6519)
!6524 = !DILocation(line: 2632, column: 8, scope: !6519)
!6525 = !DILocation(line: 2632, column: 33, scope: !6519)
!6526 = !DILocation(line: 2632, column: 36, scope: !6519)
!6527 = !DILocation(line: 2631, column: 11, scope: !6520)
!6528 = !DILocation(line: 2633, column: 2, scope: !6519)
!6529 = !DILocation(line: 2636, column: 11, scope: !6530)
!6530 = distinct !DILexicalBlock(scope: !6520, file: !1, line: 2636, column: 11)
!6531 = !DILocation(line: 2636, column: 38, scope: !6530)
!6532 = !DILocation(line: 2636, column: 35, scope: !6530)
!6533 = !DILocation(line: 2636, column: 11, scope: !6520)
!6534 = !DILocation(line: 2637, column: 2, scope: !6530)
!6535 = !DILocation(line: 2641, column: 11, scope: !6536)
!6536 = distinct !DILexicalBlock(scope: !6520, file: !1, line: 2641, column: 11)
!6537 = !DILocation(line: 2641, column: 36, scope: !6536)
!6538 = !DILocation(line: 2641, column: 11, scope: !6520)
!6539 = !DILocation(line: 2642, column: 2, scope: !6536)
!6540 = !DILocation(line: 2645, column: 14, scope: !6541)
!6541 = distinct !DILexicalBlock(scope: !6520, file: !1, line: 2645, column: 7)
!6542 = !DILocation(line: 2645, column: 12, scope: !6541)
!6543 = !DILocation(line: 2645, column: 19, scope: !6544)
!6544 = distinct !DILexicalBlock(scope: !6541, file: !1, line: 2645, column: 7)
!6545 = !DILocation(line: 2645, column: 23, scope: !6544)
!6546 = !DILocation(line: 2645, column: 21, scope: !6544)
!6547 = !DILocation(line: 2645, column: 7, scope: !6541)
!6548 = !DILocation(line: 2647, column: 31, scope: !6549)
!6549 = distinct !DILexicalBlock(scope: !6544, file: !1, line: 2646, column: 2)
!6550 = !DILocation(line: 2647, column: 51, scope: !6549)
!6551 = !DILocation(line: 2647, column: 61, scope: !6549)
!6552 = !DILocation(line: 2648, column: 10, scope: !6549)
!6553 = !DILocation(line: 2648, column: 34, scope: !6549)
!6554 = !DILocation(line: 2647, column: 4, scope: !6549)
!6555 = !DILocation(line: 2650, column: 35, scope: !6556)
!6556 = distinct !DILexicalBlock(scope: !6549, file: !1, line: 2650, column: 8)
!6557 = !DILocation(line: 2650, column: 44, scope: !6556)
!6558 = !DILocation(line: 2650, column: 9, scope: !6556)
!6559 = !DILocation(line: 2650, column: 8, scope: !6549)
!6560 = !DILocation(line: 2651, column: 6, scope: !6556)
!6561 = !DILocation(line: 2652, column: 2, scope: !6549)
!6562 = !DILocation(line: 2645, column: 50, scope: !6544)
!6563 = !DILocation(line: 2645, column: 7, scope: !6544)
!6564 = distinct !{!6564, !6547, !6565}
!6565 = !DILocation(line: 2652, column: 2, scope: !6541)
!6566 = !DILocation(line: 2653, column: 5, scope: !6520)
!6567 = !DILocation(line: 2626, column: 67, scope: !6516)
!6568 = !DILocation(line: 2626, column: 3, scope: !6516)
!6569 = distinct !{!6569, !6517, !6570}
!6570 = !DILocation(line: 2653, column: 5, scope: !6513)
!6571 = !DILocation(line: 2654, column: 3, scope: !6461)
!6572 = !DILocation(line: 2655, column: 1, scope: !6461)
!6573 = distinct !DISubprogram(name: "VEC_ddr_p_base_length", scope: !2103, file: !2103, line: 332, type: !6574, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6574 = !DISubroutineType(types: !6575)
!6575 = !{!5, !6576}
!6576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6577, size: 64)
!6577 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6469)
!6578 = !DILocalVariable(name: "vec_", arg: 1, scope: !6573, file: !2103, line: 332, type: !6576)
!6579 = !DILocation(line: 332, column: 1, scope: !6573)
!6580 = distinct !DISubprogram(name: "VEC_ddr_p_base_index", scope: !2103, file: !2103, line: 332, type: !6581, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6581 = !DISubroutineType(types: !6582)
!6582 = !{!2102, !6576, !5}
!6583 = !DILocalVariable(name: "vec_", arg: 1, scope: !6580, file: !2103, line: 332, type: !6576)
!6584 = !DILocation(line: 332, column: 1, scope: !6580)
!6585 = !DILocalVariable(name: "ix_", arg: 2, scope: !6580, file: !2103, line: 332, type: !5)
!6586 = !DILocation(line: 0, scope: !6580)
!6587 = distinct !DISubprogram(name: "VEC_ddr_p_base_iterate", scope: !2103, file: !2103, line: 332, type: !6588, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6588 = !DISubroutineType(types: !6589)
!6589 = !{!644, !6576, !5, !6590}
!6590 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2102, size: 64)
!6591 = !DILocalVariable(name: "vec_", arg: 1, scope: !6587, file: !2103, line: 332, type: !6576)
!6592 = !DILocation(line: 332, column: 1, scope: !6587)
!6593 = !DILocalVariable(name: "ix_", arg: 2, scope: !6587, file: !2103, line: 332, type: !5)
!6594 = !DILocalVariable(name: "ptr", arg: 3, scope: !6587, file: !2103, line: 332, type: !6590)
!6595 = !DILocation(line: 332, column: 1, scope: !6596)
!6596 = distinct !DILexicalBlock(scope: !6587, file: !2103, line: 332, column: 1)
!6597 = !DILocation(line: 332, column: 1, scope: !6598)
!6598 = distinct !DILexicalBlock(scope: !6596, file: !2103, line: 332, column: 1)
!6599 = !DILocation(line: 332, column: 1, scope: !6600)
!6600 = distinct !DILexicalBlock(scope: !6596, file: !2103, line: 332, column: 1)
!6601 = distinct !DISubprogram(name: "VEC_lambda_vector_base_length", scope: !637, file: !637, line: 32, type: !6602, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6602 = !DISubroutineType(types: !6603)
!6603 = !{!5, !6604}
!6604 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6605, size: 64)
!6605 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2151)
!6606 = !DILocalVariable(name: "vec_", arg: 1, scope: !6601, file: !637, line: 32, type: !6604)
!6607 = !DILocation(line: 32, column: 1, scope: !6601)
!6608 = distinct !DISubprogram(name: "VEC_lambda_vector_base_index", scope: !637, file: !637, line: 32, type: !6609, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6609 = !DISubroutineType(types: !6610)
!6610 = !{!642, !6604, !5}
!6611 = !DILocalVariable(name: "vec_", arg: 1, scope: !6608, file: !637, line: 32, type: !6604)
!6612 = !DILocation(line: 32, column: 1, scope: !6608)
!6613 = !DILocalVariable(name: "ix_", arg: 2, scope: !6608, file: !637, line: 32, type: !5)
!6614 = !DILocation(line: 0, scope: !6608)
!6615 = distinct !DISubprogram(name: "lambda_vector_lexico_pos", scope: !637, file: !637, line: 465, type: !6616, scopeLine: 467, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6616 = !DISubroutineType(types: !6617)
!6617 = !{!793, !642, !5}
!6618 = !DILocalVariable(name: "v", arg: 1, scope: !6615, file: !637, line: 465, type: !642)
!6619 = !DILocation(line: 465, column: 41, scope: !6615)
!6620 = !DILocalVariable(name: "n", arg: 2, scope: !6615, file: !637, line: 466, type: !5)
!6621 = !DILocation(line: 466, column: 15, scope: !6615)
!6622 = !DILocalVariable(name: "i", scope: !6615, file: !637, line: 468, type: !5)
!6623 = !DILocation(line: 468, column: 12, scope: !6615)
!6624 = !DILocation(line: 469, column: 10, scope: !6625)
!6625 = distinct !DILexicalBlock(scope: !6615, file: !637, line: 469, column: 3)
!6626 = !DILocation(line: 469, column: 8, scope: !6625)
!6627 = !DILocation(line: 469, column: 15, scope: !6628)
!6628 = distinct !DILexicalBlock(scope: !6625, file: !637, line: 469, column: 3)
!6629 = !DILocation(line: 469, column: 19, scope: !6628)
!6630 = !DILocation(line: 469, column: 17, scope: !6628)
!6631 = !DILocation(line: 469, column: 3, scope: !6625)
!6632 = !DILocation(line: 471, column: 11, scope: !6633)
!6633 = distinct !DILexicalBlock(scope: !6634, file: !637, line: 471, column: 11)
!6634 = distinct !DILexicalBlock(scope: !6628, file: !637, line: 470, column: 5)
!6635 = !DILocation(line: 471, column: 13, scope: !6633)
!6636 = !DILocation(line: 471, column: 16, scope: !6633)
!6637 = !DILocation(line: 471, column: 11, scope: !6634)
!6638 = !DILocation(line: 472, column: 2, scope: !6633)
!6639 = !DILocation(line: 473, column: 11, scope: !6640)
!6640 = distinct !DILexicalBlock(scope: !6634, file: !637, line: 473, column: 11)
!6641 = !DILocation(line: 473, column: 13, scope: !6640)
!6642 = !DILocation(line: 473, column: 16, scope: !6640)
!6643 = !DILocation(line: 473, column: 11, scope: !6634)
!6644 = !DILocation(line: 474, column: 2, scope: !6640)
!6645 = !DILocation(line: 475, column: 11, scope: !6646)
!6646 = distinct !DILexicalBlock(scope: !6634, file: !637, line: 475, column: 11)
!6647 = !DILocation(line: 475, column: 13, scope: !6646)
!6648 = !DILocation(line: 475, column: 16, scope: !6646)
!6649 = !DILocation(line: 475, column: 11, scope: !6634)
!6650 = !DILocation(line: 476, column: 2, scope: !6646)
!6651 = !DILocation(line: 477, column: 5, scope: !6634)
!6652 = !DILocation(line: 469, column: 23, scope: !6628)
!6653 = !DILocation(line: 469, column: 3, scope: !6628)
!6654 = distinct !{!6654, !6631, !6655}
!6655 = !DILocation(line: 477, column: 5, scope: !6625)
!6656 = !DILocation(line: 478, column: 3, scope: !6615)
!6657 = !DILocation(line: 479, column: 1, scope: !6615)
!6658 = distinct !DISubprogram(name: "lambda_collect_parameters", scope: !1, file: !1, line: 2688, type: !6659, scopeLine: 2690, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6659 = !DISubroutineType(types: !6660)
!6660 = !{null, !6661, !4227}
!6661 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6662, size: 64)
!6662 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_reference_p_heap", file: !2103, line: 209, baseType: !6663)
!6663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_reference_p_heap", file: !2103, line: 209, size: 128, elements: !6664)
!6664 = !{!6665}
!6665 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !6663, file: !2103, line: 209, baseType: !6666, size: 128)
!6666 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_reference_p_base", file: !2103, line: 208, baseType: !6667)
!6667 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_reference_p_base", file: !2103, line: 208, size: 128, elements: !6668)
!6668 = !{!6669, !6670, !6671}
!6669 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !6667, file: !2103, line: 208, baseType: !5, size: 32)
!6670 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !6667, file: !2103, line: 208, baseType: !5, size: 32, offset: 32)
!6671 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !6667, file: !2103, line: 208, baseType: !6672, size: 64, offset: 64)
!6672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2201, size: 64, elements: !774)
!6673 = !DILocalVariable(name: "datarefs", arg: 1, scope: !6658, file: !1, line: 2688, type: !6661)
!6674 = !DILocation(line: 2688, column: 58, scope: !6658)
!6675 = !DILocalVariable(name: "parameters", arg: 2, scope: !6658, file: !1, line: 2689, type: !4227)
!6676 = !DILocation(line: 2689, column: 26, scope: !6658)
!6677 = !DILocalVariable(name: "i", scope: !6658, file: !1, line: 2691, type: !5)
!6678 = !DILocation(line: 2691, column: 12, scope: !6658)
!6679 = !DILocalVariable(name: "j", scope: !6658, file: !1, line: 2691, type: !5)
!6680 = !DILocation(line: 2691, column: 15, scope: !6658)
!6681 = !DILocalVariable(name: "parameter_set", scope: !6658, file: !1, line: 2692, type: !6682)
!6682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6683, size: 64)
!6683 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !133, line: 5199, flags: DIFlagFwdDecl)
!6684 = !DILocation(line: 2692, column: 25, scope: !6658)
!6685 = !DILocation(line: 2692, column: 41, scope: !6658)
!6686 = !DILocalVariable(name: "data_reference", scope: !6658, file: !1, line: 2693, type: !2201)
!6687 = !DILocation(line: 2693, column: 20, scope: !6658)
!6688 = !DILocation(line: 2695, column: 10, scope: !6689)
!6689 = distinct !DILexicalBlock(scope: !6658, file: !1, line: 2695, column: 3)
!6690 = !DILocation(line: 2695, column: 8, scope: !6689)
!6691 = !DILocation(line: 2695, column: 15, scope: !6692)
!6692 = distinct !DILexicalBlock(scope: !6689, file: !1, line: 2695, column: 3)
!6693 = !DILocation(line: 2695, column: 3, scope: !6689)
!6694 = !DILocation(line: 2696, column: 12, scope: !6695)
!6695 = distinct !DILexicalBlock(scope: !6692, file: !1, line: 2696, column: 5)
!6696 = !DILocation(line: 2696, column: 10, scope: !6695)
!6697 = !DILocation(line: 2696, column: 17, scope: !6698)
!6698 = distinct !DILexicalBlock(scope: !6695, file: !1, line: 2696, column: 5)
!6699 = !DILocation(line: 2696, column: 21, scope: !6698)
!6700 = !DILocation(line: 2696, column: 19, scope: !6698)
!6701 = !DILocation(line: 2696, column: 5, scope: !6695)
!6702 = !DILocation(line: 2697, column: 42, scope: !6698)
!6703 = !DILocation(line: 2698, column: 7, scope: !6698)
!6704 = !DILocation(line: 2698, column: 22, scope: !6698)
!6705 = !DILocation(line: 2697, column: 7, scope: !6698)
!6706 = !DILocation(line: 2696, column: 58, scope: !6698)
!6707 = !DILocation(line: 2696, column: 5, scope: !6698)
!6708 = distinct !{!6708, !6701, !6709}
!6709 = !DILocation(line: 2698, column: 32, scope: !6695)
!6710 = !DILocation(line: 2695, column: 77, scope: !6692)
!6711 = !DILocation(line: 2695, column: 3, scope: !6692)
!6712 = distinct !{!6712, !6693, !6713}
!6713 = !DILocation(line: 2698, column: 32, scope: !6689)
!6714 = !DILocation(line: 2699, column: 24, scope: !6658)
!6715 = !DILocation(line: 2699, column: 3, scope: !6658)
!6716 = !DILocation(line: 2700, column: 1, scope: !6658)
!6717 = distinct !DISubprogram(name: "VEC_data_reference_p_base_iterate", scope: !2103, file: !2103, line: 208, type: !6718, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6718 = !DISubroutineType(types: !6719)
!6719 = !{!644, !6720, !5, !6722}
!6720 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6721, size: 64)
!6721 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6666)
!6722 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2201, size: 64)
!6723 = !DILocalVariable(name: "vec_", arg: 1, scope: !6717, file: !2103, line: 208, type: !6720)
!6724 = !DILocation(line: 208, column: 1, scope: !6717)
!6725 = !DILocalVariable(name: "ix_", arg: 2, scope: !6717, file: !2103, line: 208, type: !5)
!6726 = !DILocalVariable(name: "ptr", arg: 3, scope: !6717, file: !2103, line: 208, type: !6722)
!6727 = !DILocation(line: 208, column: 1, scope: !6728)
!6728 = distinct !DILexicalBlock(scope: !6717, file: !2103, line: 208, column: 1)
!6729 = !DILocation(line: 208, column: 1, scope: !6730)
!6730 = distinct !DILexicalBlock(scope: !6728, file: !2103, line: 208, column: 1)
!6731 = !DILocation(line: 208, column: 1, scope: !6732)
!6732 = distinct !DILexicalBlock(scope: !6728, file: !2103, line: 208, column: 1)
!6733 = distinct !DISubprogram(name: "lambda_collect_parameters_from_af", scope: !1, file: !1, line: 2662, type: !6734, scopeLine: 2665, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6734 = !DISubroutineType(types: !6735)
!6735 = !{null, !675, !6682, !4227}
!6736 = !DILocalVariable(name: "access_function", arg: 1, scope: !6733, file: !1, line: 2662, type: !675)
!6737 = !DILocation(line: 2662, column: 41, scope: !6733)
!6738 = !DILocalVariable(name: "param_set", arg: 2, scope: !6733, file: !1, line: 2663, type: !6682)
!6739 = !DILocation(line: 2663, column: 30, scope: !6733)
!6740 = !DILocalVariable(name: "parameters", arg: 3, scope: !6733, file: !1, line: 2664, type: !4227)
!6741 = !DILocation(line: 2664, column: 27, scope: !6733)
!6742 = !DILocation(line: 2666, column: 7, scope: !6743)
!6743 = distinct !DILexicalBlock(scope: !6733, file: !1, line: 2666, column: 7)
!6744 = !DILocation(line: 2666, column: 23, scope: !6743)
!6745 = !DILocation(line: 2666, column: 7, scope: !6733)
!6746 = !DILocation(line: 2667, column: 5, scope: !6743)
!6747 = !DILocation(line: 2669, column: 7, scope: !6748)
!6748 = distinct !DILexicalBlock(scope: !6733, file: !1, line: 2669, column: 7)
!6749 = !DILocation(line: 2669, column: 35, scope: !6748)
!6750 = !DILocation(line: 2670, column: 7, scope: !6748)
!6751 = !DILocation(line: 2670, column: 32, scope: !6748)
!6752 = !DILocation(line: 2670, column: 43, scope: !6748)
!6753 = !DILocation(line: 2670, column: 10, scope: !6748)
!6754 = !DILocation(line: 2670, column: 60, scope: !6748)
!6755 = !DILocation(line: 2669, column: 7, scope: !6733)
!6756 = !DILocation(line: 2672, column: 27, scope: !6757)
!6757 = distinct !DILexicalBlock(scope: !6748, file: !1, line: 2671, column: 5)
!6758 = !DILocation(line: 2672, column: 38, scope: !6757)
!6759 = !DILocation(line: 2672, column: 7, scope: !6757)
!6760 = !DILocation(line: 2673, column: 7, scope: !6757)
!6761 = !DILocation(line: 2674, column: 5, scope: !6757)
!6762 = !DILocalVariable(name: "i", scope: !6763, file: !1, line: 2677, type: !644)
!6763 = distinct !DILexicalBlock(scope: !6748, file: !1, line: 2676, column: 5)
!6764 = !DILocation(line: 2677, column: 11, scope: !6763)
!6765 = !DILocalVariable(name: "num_operands", scope: !6763, file: !1, line: 2677, type: !644)
!6766 = !DILocation(line: 2677, column: 14, scope: !6763)
!6767 = !DILocation(line: 2677, column: 50, scope: !6763)
!6768 = !DILocation(line: 2677, column: 29, scope: !6763)
!6769 = !DILocation(line: 2679, column: 14, scope: !6770)
!6770 = distinct !DILexicalBlock(scope: !6763, file: !1, line: 2679, column: 7)
!6771 = !DILocation(line: 2679, column: 12, scope: !6770)
!6772 = !DILocation(line: 2679, column: 19, scope: !6773)
!6773 = distinct !DILexicalBlock(scope: !6770, file: !1, line: 2679, column: 7)
!6774 = !DILocation(line: 2679, column: 23, scope: !6773)
!6775 = !DILocation(line: 2679, column: 21, scope: !6773)
!6776 = !DILocation(line: 2679, column: 7, scope: !6770)
!6777 = !DILocation(line: 2680, column: 37, scope: !6773)
!6778 = !DILocation(line: 2681, column: 9, scope: !6773)
!6779 = !DILocation(line: 2681, column: 20, scope: !6773)
!6780 = !DILocation(line: 2680, column: 2, scope: !6773)
!6781 = !DILocation(line: 2679, column: 38, scope: !6773)
!6782 = !DILocation(line: 2679, column: 7, scope: !6773)
!6783 = distinct !{!6783, !6776, !6784}
!6784 = !DILocation(line: 2681, column: 30, scope: !6770)
!6785 = !DILocation(line: 2683, column: 1, scope: !6733)
!6786 = distinct !DISubprogram(name: "lambda_compute_access_matrices", scope: !1, file: !1, line: 2836, type: !6787, scopeLine: 2839, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6787 = !DISubroutineType(types: !6788)
!6788 = !{!793, !6661, !2042, !2138}
!6789 = !DILocalVariable(name: "datarefs", arg: 1, scope: !6786, file: !1, line: 2836, type: !6661)
!6790 = !DILocation(line: 2836, column: 63, scope: !6786)
!6791 = !DILocalVariable(name: "parameters", arg: 2, scope: !6786, file: !1, line: 2837, type: !2042)
!6792 = !DILocation(line: 2837, column: 23, scope: !6786)
!6793 = !DILocalVariable(name: "nest", arg: 3, scope: !6786, file: !1, line: 2838, type: !2138)
!6794 = !DILocation(line: 2838, column: 25, scope: !6786)
!6795 = !DILocalVariable(name: "dataref", scope: !6786, file: !1, line: 2840, type: !2201)
!6796 = !DILocation(line: 2840, column: 20, scope: !6786)
!6797 = !DILocalVariable(name: "ix", scope: !6786, file: !1, line: 2841, type: !5)
!6798 = !DILocation(line: 2841, column: 12, scope: !6786)
!6799 = !DILocation(line: 2843, column: 11, scope: !6800)
!6800 = distinct !DILexicalBlock(scope: !6786, file: !1, line: 2843, column: 3)
!6801 = !DILocation(line: 2843, column: 8, scope: !6800)
!6802 = !DILocation(line: 2843, column: 16, scope: !6803)
!6803 = distinct !DILexicalBlock(scope: !6800, file: !1, line: 2843, column: 3)
!6804 = !DILocation(line: 2843, column: 3, scope: !6800)
!6805 = !DILocation(line: 2844, column: 31, scope: !6806)
!6806 = distinct !DILexicalBlock(scope: !6803, file: !1, line: 2844, column: 9)
!6807 = !DILocation(line: 2844, column: 40, scope: !6806)
!6808 = !DILocation(line: 2844, column: 52, scope: !6806)
!6809 = !DILocation(line: 2844, column: 10, scope: !6806)
!6810 = !DILocation(line: 2844, column: 9, scope: !6803)
!6811 = !DILocation(line: 2845, column: 7, scope: !6806)
!6812 = !DILocation(line: 2844, column: 56, scope: !6806)
!6813 = !DILocation(line: 2843, column: 73, scope: !6803)
!6814 = !DILocation(line: 2843, column: 3, scope: !6803)
!6815 = distinct !{!6815, !6804, !6816}
!6816 = !DILocation(line: 2845, column: 14, scope: !6800)
!6817 = !DILocation(line: 2847, column: 3, scope: !6786)
!6818 = !DILocation(line: 2848, column: 1, scope: !6786)
!6819 = distinct !DISubprogram(name: "build_access_matrix", scope: !1, file: !1, line: 2803, type: !6820, scopeLine: 2805, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6820 = !DISubroutineType(types: !6821)
!6821 = !{!793, !2201, !2042, !2138}
!6822 = !DILocalVariable(name: "data_reference", arg: 1, scope: !6819, file: !1, line: 2803, type: !2201)
!6823 = !DILocation(line: 2803, column: 39, scope: !6819)
!6824 = !DILocalVariable(name: "parameters", arg: 2, scope: !6819, file: !1, line: 2804, type: !2042)
!6825 = !DILocation(line: 2804, column: 26, scope: !6819)
!6826 = !DILocalVariable(name: "nest", arg: 3, scope: !6819, file: !1, line: 2804, type: !2138)
!6827 = !DILocation(line: 2804, column: 58, scope: !6819)
!6828 = !DILocalVariable(name: "am", scope: !6819, file: !1, line: 2806, type: !2134)
!6829 = !DILocation(line: 2806, column: 25, scope: !6819)
!6830 = !DILocation(line: 2806, column: 30, scope: !6819)
!6831 = !DILocalVariable(name: "i", scope: !6819, file: !1, line: 2807, type: !5)
!6832 = !DILocation(line: 2807, column: 12, scope: !6819)
!6833 = !DILocalVariable(name: "ndim", scope: !6819, file: !1, line: 2807, type: !5)
!6834 = !DILocation(line: 2807, column: 15, scope: !6819)
!6835 = !DILocation(line: 2807, column: 22, scope: !6819)
!6836 = !DILocalVariable(name: "nivs", scope: !6819, file: !1, line: 2808, type: !5)
!6837 = !DILocation(line: 2808, column: 12, scope: !6819)
!6838 = !DILocation(line: 2808, column: 19, scope: !6819)
!6839 = !DILocalVariable(name: "lambda_nb_columns", scope: !6819, file: !1, line: 2809, type: !5)
!6840 = !DILocation(line: 2809, column: 12, scope: !6819)
!6841 = !DILocation(line: 2811, column: 23, scope: !6819)
!6842 = !DILocation(line: 2811, column: 3, scope: !6819)
!6843 = !DILocation(line: 2811, column: 21, scope: !6819)
!6844 = !DILocation(line: 2812, column: 31, scope: !6819)
!6845 = !DILocation(line: 2812, column: 3, scope: !6819)
!6846 = !DILocation(line: 2812, column: 29, scope: !6819)
!6847 = !DILocation(line: 2813, column: 24, scope: !6819)
!6848 = !DILocation(line: 2813, column: 3, scope: !6819)
!6849 = !DILocation(line: 2813, column: 22, scope: !6819)
!6850 = !DILocation(line: 2815, column: 23, scope: !6819)
!6851 = !DILocation(line: 2815, column: 21, scope: !6819)
!6852 = !DILocation(line: 2816, column: 20, scope: !6819)
!6853 = !DILocation(line: 2816, column: 3, scope: !6819)
!6854 = !DILocation(line: 2816, column: 18, scope: !6819)
!6855 = !DILocation(line: 2818, column: 10, scope: !6856)
!6856 = distinct !DILexicalBlock(scope: !6819, file: !1, line: 2818, column: 3)
!6857 = !DILocation(line: 2818, column: 8, scope: !6856)
!6858 = !DILocation(line: 2818, column: 15, scope: !6859)
!6859 = distinct !DILexicalBlock(scope: !6856, file: !1, line: 2818, column: 3)
!6860 = !DILocation(line: 2818, column: 19, scope: !6859)
!6861 = !DILocation(line: 2818, column: 17, scope: !6859)
!6862 = !DILocation(line: 2818, column: 3, scope: !6856)
!6863 = !DILocalVariable(name: "access_vector", scope: !6864, file: !1, line: 2820, type: !642)
!6864 = distinct !DILexicalBlock(scope: !6859, file: !1, line: 2819, column: 5)
!6865 = !DILocation(line: 2820, column: 21, scope: !6864)
!6866 = !DILocation(line: 2820, column: 56, scope: !6864)
!6867 = !DILocation(line: 2820, column: 37, scope: !6864)
!6868 = !DILocalVariable(name: "access_function", scope: !6864, file: !1, line: 2821, type: !675)
!6869 = !DILocation(line: 2821, column: 12, scope: !6864)
!6870 = !DILocation(line: 2821, column: 30, scope: !6864)
!6871 = !DILocation(line: 2823, column: 23, scope: !6872)
!6872 = distinct !DILexicalBlock(scope: !6864, file: !1, line: 2823, column: 11)
!6873 = !DILocation(line: 2823, column: 40, scope: !6872)
!6874 = !DILocation(line: 2823, column: 55, scope: !6872)
!6875 = !DILocation(line: 2823, column: 12, scope: !6872)
!6876 = !DILocation(line: 2823, column: 11, scope: !6864)
!6877 = !DILocation(line: 2824, column: 2, scope: !6872)
!6878 = !DILocation(line: 2826, column: 7, scope: !6864)
!6879 = !DILocation(line: 2827, column: 5, scope: !6864)
!6880 = !DILocation(line: 2818, column: 26, scope: !6859)
!6881 = !DILocation(line: 2818, column: 3, scope: !6859)
!6882 = distinct !{!6882, !6862, !6883}
!6883 = !DILocation(line: 2827, column: 5, scope: !6856)
!6884 = !DILocation(line: 2829, column: 39, scope: !6819)
!6885 = !DILocation(line: 2829, column: 3, scope: !6819)
!6886 = !DILocation(line: 2829, column: 37, scope: !6819)
!6887 = !DILocation(line: 2830, column: 3, scope: !6819)
!6888 = !DILocation(line: 2831, column: 1, scope: !6819)
!6889 = distinct !DISubprogram(name: "lambda_vector_clear", scope: !637, file: !637, line: 319, type: !6890, scopeLine: 320, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6890 = !DISubroutineType(types: !6891)
!6891 = !{null, !642, !644}
!6892 = !DILocalVariable(name: "vec1", arg: 1, scope: !6889, file: !637, line: 319, type: !642)
!6893 = !DILocation(line: 319, column: 36, scope: !6889)
!6894 = !DILocalVariable(name: "size", arg: 2, scope: !6889, file: !637, line: 319, type: !644)
!6895 = !DILocation(line: 319, column: 46, scope: !6889)
!6896 = !DILocation(line: 321, column: 11, scope: !6889)
!6897 = !DILocation(line: 321, column: 3, scope: !6889)
!6898 = !DILocation(line: 321, column: 20, scope: !6889)
!6899 = !DILocation(line: 321, column: 25, scope: !6889)
!6900 = !DILocation(line: 322, column: 1, scope: !6889)
!6901 = distinct !DISubprogram(name: "lambda_lattice_new", scope: !1, file: !1, line: 366, type: !6902, scopeLine: 367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6902 = !DISubroutineType(types: !6903)
!6903 = !{!2029, !644, !644, !2209}
!6904 = !DILocalVariable(name: "depth", arg: 1, scope: !6901, file: !1, line: 366, type: !644)
!6905 = !DILocation(line: 366, column: 25, scope: !6901)
!6906 = !DILocalVariable(name: "invariants", arg: 2, scope: !6901, file: !1, line: 366, type: !644)
!6907 = !DILocation(line: 366, column: 36, scope: !6901)
!6908 = !DILocalVariable(name: "lambda_obstack", arg: 3, scope: !6901, file: !1, line: 366, type: !2209)
!6909 = !DILocation(line: 366, column: 65, scope: !6901)
!6910 = !DILocalVariable(name: "ret", scope: !6901, file: !1, line: 368, type: !2029)
!6911 = !DILocation(line: 368, column: 18, scope: !6901)
!6912 = !DILocation(line: 369, column: 25, scope: !6901)
!6913 = !DILocation(line: 369, column: 9, scope: !6901)
!6914 = !DILocation(line: 370, column: 43, scope: !6901)
!6915 = !DILocation(line: 370, column: 50, scope: !6901)
!6916 = !DILocation(line: 370, column: 24, scope: !6901)
!6917 = !DILocation(line: 370, column: 3, scope: !6901)
!6918 = !DILocation(line: 370, column: 22, scope: !6901)
!6919 = !DILocation(line: 371, column: 45, scope: !6901)
!6920 = !DILocation(line: 371, column: 26, scope: !6901)
!6921 = !DILocation(line: 371, column: 3, scope: !6901)
!6922 = !DILocation(line: 371, column: 24, scope: !6901)
!6923 = !DILocation(line: 372, column: 56, scope: !6901)
!6924 = !DILocation(line: 372, column: 63, scope: !6901)
!6925 = !DILocation(line: 372, column: 37, scope: !6901)
!6926 = !DILocation(line: 372, column: 3, scope: !6901)
!6927 = !DILocation(line: 372, column: 35, scope: !6901)
!6928 = !DILocation(line: 373, column: 29, scope: !6901)
!6929 = !DILocation(line: 373, column: 3, scope: !6901)
!6930 = !DILocation(line: 373, column: 27, scope: !6901)
!6931 = !DILocation(line: 374, column: 30, scope: !6901)
!6932 = !DILocation(line: 374, column: 3, scope: !6901)
!6933 = !DILocation(line: 374, column: 28, scope: !6901)
!6934 = !DILocation(line: 375, column: 10, scope: !6901)
!6935 = !DILocation(line: 375, column: 3, scope: !6901)
!6936 = distinct !DISubprogram(name: "lambda_vector_add_mc", scope: !637, file: !637, line: 286, type: !6937, scopeLine: 289, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6937 = !DISubroutineType(types: !6938)
!6938 = !{null, !642, !644, !642, !644, !642, !644}
!6939 = !DILocalVariable(name: "vec1", arg: 1, scope: !6936, file: !637, line: 286, type: !642)
!6940 = !DILocation(line: 286, column: 37, scope: !6936)
!6941 = !DILocalVariable(name: "const1", arg: 2, scope: !6936, file: !637, line: 286, type: !644)
!6942 = !DILocation(line: 286, column: 47, scope: !6936)
!6943 = !DILocalVariable(name: "vec2", arg: 3, scope: !6936, file: !637, line: 287, type: !642)
!6944 = !DILocation(line: 287, column: 23, scope: !6936)
!6945 = !DILocalVariable(name: "const2", arg: 4, scope: !6936, file: !637, line: 287, type: !644)
!6946 = !DILocation(line: 287, column: 33, scope: !6936)
!6947 = !DILocalVariable(name: "vec3", arg: 5, scope: !6936, file: !637, line: 288, type: !642)
!6948 = !DILocation(line: 288, column: 23, scope: !6936)
!6949 = !DILocalVariable(name: "size", arg: 6, scope: !6936, file: !637, line: 288, type: !644)
!6950 = !DILocation(line: 288, column: 33, scope: !6936)
!6951 = !DILocalVariable(name: "i", scope: !6936, file: !637, line: 290, type: !644)
!6952 = !DILocation(line: 290, column: 7, scope: !6936)
!6953 = !DILocation(line: 291, column: 10, scope: !6954)
!6954 = distinct !DILexicalBlock(scope: !6936, file: !637, line: 291, column: 3)
!6955 = !DILocation(line: 291, column: 8, scope: !6954)
!6956 = !DILocation(line: 291, column: 15, scope: !6957)
!6957 = distinct !DILexicalBlock(scope: !6954, file: !637, line: 291, column: 3)
!6958 = !DILocation(line: 291, column: 19, scope: !6957)
!6959 = !DILocation(line: 291, column: 17, scope: !6957)
!6960 = !DILocation(line: 291, column: 3, scope: !6954)
!6961 = !DILocation(line: 292, column: 15, scope: !6957)
!6962 = !DILocation(line: 292, column: 24, scope: !6957)
!6963 = !DILocation(line: 292, column: 29, scope: !6957)
!6964 = !DILocation(line: 292, column: 22, scope: !6957)
!6965 = !DILocation(line: 292, column: 34, scope: !6957)
!6966 = !DILocation(line: 292, column: 43, scope: !6957)
!6967 = !DILocation(line: 292, column: 48, scope: !6957)
!6968 = !DILocation(line: 292, column: 41, scope: !6957)
!6969 = !DILocation(line: 292, column: 32, scope: !6957)
!6970 = !DILocation(line: 292, column: 5, scope: !6957)
!6971 = !DILocation(line: 292, column: 10, scope: !6957)
!6972 = !DILocation(line: 292, column: 13, scope: !6957)
!6973 = !DILocation(line: 291, column: 26, scope: !6957)
!6974 = !DILocation(line: 291, column: 3, scope: !6957)
!6975 = distinct !{!6975, !6960, !6976}
!6976 = !DILocation(line: 292, column: 49, scope: !6954)
!6977 = !DILocation(line: 293, column: 1, scope: !6936)
!6978 = distinct !DISubprogram(name: "compute_nest_using_fourier_motzkin", scope: !1, file: !1, line: 485, type: !6979, scopeLine: 492, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!6979 = !DISubroutineType(types: !6980)
!6980 = !{!659, !644, !644, !644, !2034, !2034, !642, !2209}
!6981 = !DILocalVariable(name: "size", arg: 1, scope: !6978, file: !1, line: 485, type: !644)
!6982 = !DILocation(line: 485, column: 41, scope: !6978)
!6983 = !DILocalVariable(name: "depth", arg: 2, scope: !6978, file: !1, line: 486, type: !644)
!6984 = !DILocation(line: 486, column: 13, scope: !6978)
!6985 = !DILocalVariable(name: "invariants", arg: 3, scope: !6978, file: !1, line: 487, type: !644)
!6986 = !DILocation(line: 487, column: 13, scope: !6978)
!6987 = !DILocalVariable(name: "A", arg: 4, scope: !6978, file: !1, line: 488, type: !2034)
!6988 = !DILocation(line: 488, column: 23, scope: !6978)
!6989 = !DILocalVariable(name: "B", arg: 5, scope: !6978, file: !1, line: 489, type: !2034)
!6990 = !DILocation(line: 489, column: 23, scope: !6978)
!6991 = !DILocalVariable(name: "a", arg: 6, scope: !6978, file: !1, line: 490, type: !642)
!6992 = !DILocation(line: 490, column: 51, scope: !6978)
!6993 = !DILocalVariable(name: "lambda_obstack", arg: 7, scope: !6978, file: !1, line: 491, type: !2209)
!6994 = !DILocation(line: 491, column: 54, scope: !6978)
!6995 = !DILocalVariable(name: "multiple", scope: !6978, file: !1, line: 494, type: !644)
!6996 = !DILocation(line: 494, column: 7, scope: !6978)
!6997 = !DILocalVariable(name: "f1", scope: !6978, file: !1, line: 494, type: !644)
!6998 = !DILocation(line: 494, column: 17, scope: !6978)
!6999 = !DILocalVariable(name: "f2", scope: !6978, file: !1, line: 494, type: !644)
!7000 = !DILocation(line: 494, column: 21, scope: !6978)
!7001 = !DILocalVariable(name: "i", scope: !6978, file: !1, line: 495, type: !644)
!7002 = !DILocation(line: 495, column: 7, scope: !6978)
!7003 = !DILocalVariable(name: "j", scope: !6978, file: !1, line: 495, type: !644)
!7004 = !DILocation(line: 495, column: 10, scope: !6978)
!7005 = !DILocalVariable(name: "k", scope: !6978, file: !1, line: 495, type: !644)
!7006 = !DILocation(line: 495, column: 13, scope: !6978)
!7007 = !DILocalVariable(name: "expression", scope: !6978, file: !1, line: 496, type: !650)
!7008 = !DILocation(line: 496, column: 28, scope: !6978)
!7009 = !DILocalVariable(name: "loop", scope: !6978, file: !1, line: 497, type: !665)
!7010 = !DILocation(line: 497, column: 15, scope: !6978)
!7011 = !DILocalVariable(name: "auxillary_nest", scope: !6978, file: !1, line: 498, type: !659)
!7012 = !DILocation(line: 498, column: 19, scope: !6978)
!7013 = !DILocalVariable(name: "swapmatrix", scope: !6978, file: !1, line: 499, type: !2034)
!7014 = !DILocation(line: 499, column: 17, scope: !6978)
!7015 = !DILocalVariable(name: "A1", scope: !6978, file: !1, line: 499, type: !2034)
!7016 = !DILocation(line: 499, column: 29, scope: !6978)
!7017 = !DILocalVariable(name: "B1", scope: !6978, file: !1, line: 499, type: !2034)
!7018 = !DILocation(line: 499, column: 33, scope: !6978)
!7019 = !DILocalVariable(name: "swapvector", scope: !6978, file: !1, line: 500, type: !642)
!7020 = !DILocation(line: 500, column: 17, scope: !6978)
!7021 = !DILocalVariable(name: "a1", scope: !6978, file: !1, line: 500, type: !642)
!7022 = !DILocation(line: 500, column: 29, scope: !6978)
!7023 = !DILocalVariable(name: "newsize", scope: !6978, file: !1, line: 501, type: !644)
!7024 = !DILocation(line: 501, column: 7, scope: !6978)
!7025 = !DILocation(line: 503, column: 32, scope: !6978)
!7026 = !DILocation(line: 503, column: 8, scope: !6978)
!7027 = !DILocation(line: 503, column: 6, scope: !6978)
!7028 = !DILocation(line: 504, column: 32, scope: !6978)
!7029 = !DILocation(line: 504, column: 8, scope: !6978)
!7030 = !DILocation(line: 504, column: 6, scope: !6978)
!7031 = !DILocation(line: 505, column: 8, scope: !6978)
!7032 = !DILocation(line: 505, column: 6, scope: !6978)
!7033 = !DILocation(line: 507, column: 41, scope: !6978)
!7034 = !DILocation(line: 507, column: 48, scope: !6978)
!7035 = !DILocation(line: 507, column: 60, scope: !6978)
!7036 = !DILocation(line: 507, column: 20, scope: !6978)
!7037 = !DILocation(line: 507, column: 18, scope: !6978)
!7038 = !DILocation(line: 509, column: 12, scope: !7039)
!7039 = distinct !DILexicalBlock(scope: !6978, file: !1, line: 509, column: 3)
!7040 = !DILocation(line: 509, column: 18, scope: !7039)
!7041 = !DILocation(line: 509, column: 10, scope: !7039)
!7042 = !DILocation(line: 509, column: 8, scope: !7039)
!7043 = !DILocation(line: 509, column: 23, scope: !7044)
!7044 = distinct !DILexicalBlock(scope: !7039, file: !1, line: 509, column: 3)
!7045 = !DILocation(line: 509, column: 25, scope: !7044)
!7046 = !DILocation(line: 509, column: 3, scope: !7039)
!7047 = !DILocation(line: 511, column: 14, scope: !7048)
!7048 = distinct !DILexicalBlock(scope: !7044, file: !1, line: 510, column: 5)
!7049 = !DILocation(line: 511, column: 12, scope: !7048)
!7050 = !DILocation(line: 512, column: 38, scope: !7048)
!7051 = !DILocation(line: 512, column: 7, scope: !7048)
!7052 = !DILocation(line: 512, column: 33, scope: !7048)
!7053 = !DILocation(line: 512, column: 36, scope: !7048)
!7054 = !DILocation(line: 513, column: 7, scope: !7048)
!7055 = !DILocation(line: 513, column: 22, scope: !7048)
!7056 = !DILocation(line: 515, column: 14, scope: !7057)
!7057 = distinct !DILexicalBlock(scope: !7048, file: !1, line: 515, column: 7)
!7058 = !DILocation(line: 515, column: 12, scope: !7057)
!7059 = !DILocation(line: 515, column: 19, scope: !7060)
!7060 = distinct !DILexicalBlock(scope: !7057, file: !1, line: 515, column: 7)
!7061 = !DILocation(line: 515, column: 23, scope: !7060)
!7062 = !DILocation(line: 515, column: 21, scope: !7060)
!7063 = !DILocation(line: 515, column: 7, scope: !7057)
!7064 = !DILocation(line: 517, column: 8, scope: !7065)
!7065 = distinct !DILexicalBlock(scope: !7066, file: !1, line: 517, column: 8)
!7066 = distinct !DILexicalBlock(scope: !7060, file: !1, line: 516, column: 2)
!7067 = !DILocation(line: 517, column: 10, scope: !7065)
!7068 = !DILocation(line: 517, column: 13, scope: !7065)
!7069 = !DILocation(line: 517, column: 16, scope: !7065)
!7070 = !DILocation(line: 517, column: 8, scope: !7066)
!7071 = !DILocation(line: 521, column: 58, scope: !7072)
!7072 = distinct !DILexicalBlock(scope: !7065, file: !1, line: 518, column: 6)
!7073 = !DILocation(line: 521, column: 65, scope: !7072)
!7074 = !DILocation(line: 522, column: 58, scope: !7072)
!7075 = !DILocation(line: 521, column: 28, scope: !7072)
!7076 = !DILocation(line: 521, column: 26, scope: !7072)
!7077 = !DILocation(line: 524, column: 15, scope: !7078)
!7078 = distinct !DILexicalBlock(scope: !7072, file: !1, line: 524, column: 8)
!7079 = !DILocation(line: 524, column: 13, scope: !7078)
!7080 = !DILocation(line: 524, column: 20, scope: !7081)
!7081 = distinct !DILexicalBlock(scope: !7078, file: !1, line: 524, column: 8)
!7082 = !DILocation(line: 524, column: 24, scope: !7081)
!7083 = !DILocation(line: 524, column: 22, scope: !7081)
!7084 = !DILocation(line: 524, column: 8, scope: !7078)
!7085 = !DILocation(line: 525, column: 38, scope: !7081)
!7086 = !DILocation(line: 525, column: 40, scope: !7081)
!7087 = !DILocation(line: 525, column: 43, scope: !7081)
!7088 = !DILocation(line: 525, column: 3, scope: !7081)
!7089 = !DILocation(line: 525, column: 33, scope: !7081)
!7090 = !DILocation(line: 525, column: 36, scope: !7081)
!7091 = !DILocation(line: 524, column: 28, scope: !7081)
!7092 = !DILocation(line: 524, column: 8, scope: !7081)
!7093 = distinct !{!7093, !7084, !7094}
!7094 = !DILocation(line: 525, column: 44, scope: !7078)
!7095 = !DILocation(line: 527, column: 15, scope: !7096)
!7096 = distinct !DILexicalBlock(scope: !7072, file: !1, line: 527, column: 8)
!7097 = !DILocation(line: 527, column: 13, scope: !7096)
!7098 = !DILocation(line: 527, column: 20, scope: !7099)
!7099 = distinct !DILexicalBlock(scope: !7096, file: !1, line: 527, column: 8)
!7100 = !DILocation(line: 527, column: 24, scope: !7099)
!7101 = !DILocation(line: 527, column: 22, scope: !7099)
!7102 = !DILocation(line: 527, column: 8, scope: !7096)
!7103 = !DILocation(line: 528, column: 53, scope: !7099)
!7104 = !DILocation(line: 528, column: 55, scope: !7099)
!7105 = !DILocation(line: 528, column: 58, scope: !7099)
!7106 = !DILocation(line: 528, column: 51, scope: !7099)
!7107 = !DILocation(line: 528, column: 3, scope: !7099)
!7108 = !DILocation(line: 528, column: 43, scope: !7099)
!7109 = !DILocation(line: 528, column: 46, scope: !7099)
!7110 = !DILocation(line: 527, column: 37, scope: !7099)
!7111 = !DILocation(line: 527, column: 8, scope: !7099)
!7112 = distinct !{!7112, !7102, !7113}
!7113 = !DILocation(line: 528, column: 59, scope: !7096)
!7114 = !DILocation(line: 530, column: 44, scope: !7072)
!7115 = !DILocation(line: 530, column: 46, scope: !7072)
!7116 = !DILocation(line: 530, column: 49, scope: !7072)
!7117 = !DILocation(line: 530, column: 42, scope: !7072)
!7118 = !DILocation(line: 530, column: 8, scope: !7072)
!7119 = !DILocation(line: 530, column: 37, scope: !7072)
!7120 = !DILocation(line: 531, column: 41, scope: !7072)
!7121 = !DILocation(line: 531, column: 43, scope: !7072)
!7122 = !DILocation(line: 531, column: 39, scope: !7072)
!7123 = !DILocation(line: 531, column: 8, scope: !7072)
!7124 = !DILocation(line: 531, column: 34, scope: !7072)
!7125 = !DILocation(line: 534, column: 24, scope: !7126)
!7126 = distinct !DILexicalBlock(scope: !7072, file: !1, line: 534, column: 12)
!7127 = !DILocation(line: 535, column: 10, scope: !7126)
!7128 = !DILocation(line: 535, column: 22, scope: !7126)
!7129 = !DILocation(line: 535, column: 29, scope: !7126)
!7130 = !DILocation(line: 534, column: 13, scope: !7126)
!7131 = !DILocation(line: 534, column: 12, scope: !7072)
!7132 = !DILocation(line: 537, column: 29, scope: !7133)
!7133 = distinct !DILexicalBlock(scope: !7126, file: !1, line: 536, column: 3)
!7134 = !DILocation(line: 537, column: 5, scope: !7133)
!7135 = !DILocation(line: 537, column: 27, scope: !7133)
!7136 = !DILocation(line: 538, column: 29, scope: !7133)
!7137 = !DILocation(line: 538, column: 5, scope: !7133)
!7138 = !DILocation(line: 538, column: 27, scope: !7133)
!7139 = !DILocation(line: 539, column: 3, scope: !7133)
!7140 = !DILocation(line: 541, column: 6, scope: !7072)
!7141 = !DILocation(line: 542, column: 13, scope: !7142)
!7142 = distinct !DILexicalBlock(scope: !7065, file: !1, line: 542, column: 13)
!7143 = !DILocation(line: 542, column: 15, scope: !7142)
!7144 = !DILocation(line: 542, column: 18, scope: !7142)
!7145 = !DILocation(line: 542, column: 21, scope: !7142)
!7146 = !DILocation(line: 542, column: 13, scope: !7065)
!7147 = !DILocation(line: 546, column: 58, scope: !7148)
!7148 = distinct !DILexicalBlock(scope: !7142, file: !1, line: 543, column: 6)
!7149 = !DILocation(line: 546, column: 65, scope: !7148)
!7150 = !DILocation(line: 547, column: 58, scope: !7148)
!7151 = !DILocation(line: 546, column: 28, scope: !7148)
!7152 = !DILocation(line: 546, column: 26, scope: !7148)
!7153 = !DILocation(line: 548, column: 15, scope: !7154)
!7154 = distinct !DILexicalBlock(scope: !7148, file: !1, line: 548, column: 8)
!7155 = !DILocation(line: 548, column: 13, scope: !7154)
!7156 = !DILocation(line: 548, column: 20, scope: !7157)
!7157 = distinct !DILexicalBlock(scope: !7154, file: !1, line: 548, column: 8)
!7158 = !DILocation(line: 548, column: 24, scope: !7157)
!7159 = !DILocation(line: 548, column: 22, scope: !7157)
!7160 = !DILocation(line: 548, column: 8, scope: !7154)
!7161 = !DILocation(line: 549, column: 43, scope: !7157)
!7162 = !DILocation(line: 549, column: 45, scope: !7157)
!7163 = !DILocation(line: 549, column: 48, scope: !7157)
!7164 = !DILocation(line: 549, column: 41, scope: !7157)
!7165 = !DILocation(line: 549, column: 3, scope: !7157)
!7166 = !DILocation(line: 549, column: 33, scope: !7157)
!7167 = !DILocation(line: 549, column: 36, scope: !7157)
!7168 = !DILocation(line: 548, column: 28, scope: !7157)
!7169 = !DILocation(line: 548, column: 8, scope: !7157)
!7170 = distinct !{!7170, !7160, !7171}
!7171 = !DILocation(line: 549, column: 49, scope: !7154)
!7172 = !DILocation(line: 551, column: 15, scope: !7173)
!7173 = distinct !DILexicalBlock(scope: !7148, file: !1, line: 551, column: 8)
!7174 = !DILocation(line: 551, column: 13, scope: !7173)
!7175 = !DILocation(line: 551, column: 20, scope: !7176)
!7176 = distinct !DILexicalBlock(scope: !7173, file: !1, line: 551, column: 8)
!7177 = !DILocation(line: 551, column: 24, scope: !7176)
!7178 = !DILocation(line: 551, column: 22, scope: !7176)
!7179 = !DILocation(line: 551, column: 8, scope: !7173)
!7180 = !DILocation(line: 552, column: 48, scope: !7176)
!7181 = !DILocation(line: 552, column: 50, scope: !7176)
!7182 = !DILocation(line: 552, column: 53, scope: !7176)
!7183 = !DILocation(line: 552, column: 3, scope: !7176)
!7184 = !DILocation(line: 552, column: 43, scope: !7176)
!7185 = !DILocation(line: 552, column: 46, scope: !7176)
!7186 = !DILocation(line: 551, column: 37, scope: !7176)
!7187 = !DILocation(line: 551, column: 8, scope: !7176)
!7188 = distinct !{!7188, !7179, !7189}
!7189 = !DILocation(line: 552, column: 54, scope: !7173)
!7190 = !DILocation(line: 554, column: 39, scope: !7148)
!7191 = !DILocation(line: 554, column: 41, scope: !7148)
!7192 = !DILocation(line: 554, column: 44, scope: !7148)
!7193 = !DILocation(line: 554, column: 8, scope: !7148)
!7194 = !DILocation(line: 554, column: 37, scope: !7148)
!7195 = !DILocation(line: 555, column: 36, scope: !7148)
!7196 = !DILocation(line: 555, column: 38, scope: !7148)
!7197 = !DILocation(line: 555, column: 8, scope: !7148)
!7198 = !DILocation(line: 555, column: 34, scope: !7148)
!7199 = !DILocation(line: 558, column: 24, scope: !7200)
!7200 = distinct !DILexicalBlock(scope: !7148, file: !1, line: 558, column: 12)
!7201 = !DILocation(line: 559, column: 10, scope: !7200)
!7202 = !DILocation(line: 559, column: 22, scope: !7200)
!7203 = !DILocation(line: 559, column: 29, scope: !7200)
!7204 = !DILocation(line: 558, column: 13, scope: !7200)
!7205 = !DILocation(line: 558, column: 12, scope: !7148)
!7206 = !DILocation(line: 561, column: 29, scope: !7207)
!7207 = distinct !DILexicalBlock(scope: !7200, file: !1, line: 560, column: 3)
!7208 = !DILocation(line: 561, column: 5, scope: !7207)
!7209 = !DILocation(line: 561, column: 27, scope: !7207)
!7210 = !DILocation(line: 562, column: 29, scope: !7207)
!7211 = !DILocation(line: 562, column: 5, scope: !7207)
!7212 = !DILocation(line: 562, column: 27, scope: !7207)
!7213 = !DILocation(line: 563, column: 3, scope: !7207)
!7214 = !DILocation(line: 565, column: 6, scope: !7148)
!7215 = !DILocation(line: 566, column: 2, scope: !7066)
!7216 = !DILocation(line: 515, column: 30, scope: !7060)
!7217 = !DILocation(line: 515, column: 7, scope: !7060)
!7218 = distinct !{!7218, !7063, !7219}
!7219 = !DILocation(line: 566, column: 2, scope: !7057)
!7220 = !DILocation(line: 570, column: 15, scope: !7048)
!7221 = !DILocation(line: 571, column: 14, scope: !7222)
!7222 = distinct !DILexicalBlock(scope: !7048, file: !1, line: 571, column: 7)
!7223 = !DILocation(line: 571, column: 12, scope: !7222)
!7224 = !DILocation(line: 571, column: 19, scope: !7225)
!7225 = distinct !DILexicalBlock(scope: !7222, file: !1, line: 571, column: 7)
!7226 = !DILocation(line: 571, column: 23, scope: !7225)
!7227 = !DILocation(line: 571, column: 21, scope: !7225)
!7228 = !DILocation(line: 571, column: 7, scope: !7222)
!7229 = !DILocation(line: 576, column: 8, scope: !7230)
!7230 = distinct !DILexicalBlock(scope: !7231, file: !1, line: 576, column: 8)
!7231 = distinct !DILexicalBlock(scope: !7225, file: !1, line: 572, column: 2)
!7232 = !DILocation(line: 576, column: 10, scope: !7230)
!7233 = !DILocation(line: 576, column: 13, scope: !7230)
!7234 = !DILocation(line: 576, column: 16, scope: !7230)
!7235 = !DILocation(line: 576, column: 8, scope: !7231)
!7236 = !DILocation(line: 578, column: 28, scope: !7237)
!7237 = distinct !DILexicalBlock(scope: !7230, file: !1, line: 577, column: 6)
!7238 = !DILocation(line: 578, column: 30, scope: !7237)
!7239 = !DILocation(line: 578, column: 34, scope: !7237)
!7240 = !DILocation(line: 578, column: 37, scope: !7237)
!7241 = !DILocation(line: 578, column: 47, scope: !7237)
!7242 = !DILocation(line: 578, column: 8, scope: !7237)
!7243 = !DILocation(line: 579, column: 28, scope: !7237)
!7244 = !DILocation(line: 579, column: 30, scope: !7237)
!7245 = !DILocation(line: 579, column: 34, scope: !7237)
!7246 = !DILocation(line: 579, column: 37, scope: !7237)
!7247 = !DILocation(line: 579, column: 47, scope: !7237)
!7248 = !DILocation(line: 579, column: 8, scope: !7237)
!7249 = !DILocation(line: 580, column: 22, scope: !7237)
!7250 = !DILocation(line: 580, column: 24, scope: !7237)
!7251 = !DILocation(line: 580, column: 8, scope: !7237)
!7252 = !DILocation(line: 580, column: 11, scope: !7237)
!7253 = !DILocation(line: 580, column: 20, scope: !7237)
!7254 = !DILocation(line: 581, column: 15, scope: !7237)
!7255 = !DILocation(line: 582, column: 6, scope: !7237)
!7256 = !DILocation(line: 583, column: 13, scope: !7257)
!7257 = distinct !DILexicalBlock(scope: !7230, file: !1, line: 583, column: 13)
!7258 = !DILocation(line: 583, column: 15, scope: !7257)
!7259 = !DILocation(line: 583, column: 18, scope: !7257)
!7260 = !DILocation(line: 583, column: 21, scope: !7257)
!7261 = !DILocation(line: 583, column: 13, scope: !7230)
!7262 = !DILocation(line: 585, column: 15, scope: !7263)
!7263 = distinct !DILexicalBlock(scope: !7264, file: !1, line: 585, column: 8)
!7264 = distinct !DILexicalBlock(scope: !7257, file: !1, line: 584, column: 6)
!7265 = !DILocation(line: 585, column: 13, scope: !7263)
!7266 = !DILocation(line: 585, column: 20, scope: !7267)
!7267 = distinct !DILexicalBlock(scope: !7263, file: !1, line: 585, column: 8)
!7268 = !DILocation(line: 585, column: 24, scope: !7267)
!7269 = !DILocation(line: 585, column: 22, scope: !7267)
!7270 = !DILocation(line: 585, column: 8, scope: !7263)
!7271 = !DILocation(line: 587, column: 9, scope: !7272)
!7272 = distinct !DILexicalBlock(scope: !7273, file: !1, line: 587, column: 9)
!7273 = distinct !DILexicalBlock(scope: !7267, file: !1, line: 586, column: 3)
!7274 = !DILocation(line: 587, column: 11, scope: !7272)
!7275 = !DILocation(line: 587, column: 14, scope: !7272)
!7276 = !DILocation(line: 587, column: 17, scope: !7272)
!7277 = !DILocation(line: 587, column: 9, scope: !7273)
!7278 = !DILocation(line: 589, column: 43, scope: !7279)
!7279 = distinct !DILexicalBlock(scope: !7272, file: !1, line: 588, column: 7)
!7280 = !DILocation(line: 589, column: 45, scope: !7279)
!7281 = !DILocation(line: 589, column: 48, scope: !7279)
!7282 = !DILocation(line: 589, column: 52, scope: !7279)
!7283 = !DILocation(line: 589, column: 54, scope: !7279)
!7284 = !DILocation(line: 589, column: 57, scope: !7279)
!7285 = !DILocation(line: 589, column: 20, scope: !7279)
!7286 = !DILocation(line: 589, column: 18, scope: !7279)
!7287 = !DILocation(line: 590, column: 14, scope: !7279)
!7288 = !DILocation(line: 590, column: 25, scope: !7279)
!7289 = !DILocation(line: 590, column: 27, scope: !7279)
!7290 = !DILocation(line: 590, column: 30, scope: !7279)
!7291 = !DILocation(line: 590, column: 23, scope: !7279)
!7292 = !DILocation(line: 590, column: 12, scope: !7279)
!7293 = !DILocation(line: 591, column: 19, scope: !7279)
!7294 = !DILocation(line: 591, column: 17, scope: !7279)
!7295 = !DILocation(line: 591, column: 30, scope: !7279)
!7296 = !DILocation(line: 591, column: 32, scope: !7279)
!7297 = !DILocation(line: 591, column: 35, scope: !7279)
!7298 = !DILocation(line: 591, column: 28, scope: !7279)
!7299 = !DILocation(line: 591, column: 12, scope: !7279)
!7300 = !DILocation(line: 593, column: 31, scope: !7279)
!7301 = !DILocation(line: 593, column: 33, scope: !7279)
!7302 = !DILocation(line: 593, column: 37, scope: !7279)
!7303 = !DILocation(line: 593, column: 41, scope: !7279)
!7304 = !DILocation(line: 593, column: 43, scope: !7279)
!7305 = !DILocation(line: 593, column: 47, scope: !7279)
!7306 = !DILocation(line: 594, column: 10, scope: !7279)
!7307 = !DILocation(line: 594, column: 13, scope: !7279)
!7308 = !DILocation(line: 594, column: 23, scope: !7279)
!7309 = !DILocation(line: 593, column: 9, scope: !7279)
!7310 = !DILocation(line: 595, column: 31, scope: !7279)
!7311 = !DILocation(line: 595, column: 33, scope: !7279)
!7312 = !DILocation(line: 595, column: 37, scope: !7279)
!7313 = !DILocation(line: 595, column: 41, scope: !7279)
!7314 = !DILocation(line: 595, column: 43, scope: !7279)
!7315 = !DILocation(line: 595, column: 47, scope: !7279)
!7316 = !DILocation(line: 596, column: 10, scope: !7279)
!7317 = !DILocation(line: 596, column: 13, scope: !7279)
!7318 = !DILocation(line: 596, column: 23, scope: !7279)
!7319 = !DILocation(line: 595, column: 9, scope: !7279)
!7320 = !DILocation(line: 597, column: 23, scope: !7279)
!7321 = !DILocation(line: 597, column: 28, scope: !7279)
!7322 = !DILocation(line: 597, column: 30, scope: !7279)
!7323 = !DILocation(line: 597, column: 26, scope: !7279)
!7324 = !DILocation(line: 597, column: 35, scope: !7279)
!7325 = !DILocation(line: 597, column: 40, scope: !7279)
!7326 = !DILocation(line: 597, column: 42, scope: !7279)
!7327 = !DILocation(line: 597, column: 38, scope: !7279)
!7328 = !DILocation(line: 597, column: 33, scope: !7279)
!7329 = !DILocation(line: 597, column: 9, scope: !7279)
!7330 = !DILocation(line: 597, column: 12, scope: !7279)
!7331 = !DILocation(line: 597, column: 21, scope: !7279)
!7332 = !DILocation(line: 598, column: 16, scope: !7279)
!7333 = !DILocation(line: 599, column: 7, scope: !7279)
!7334 = !DILocation(line: 600, column: 3, scope: !7273)
!7335 = !DILocation(line: 585, column: 31, scope: !7267)
!7336 = !DILocation(line: 585, column: 8, scope: !7267)
!7337 = distinct !{!7337, !7270, !7338}
!7338 = !DILocation(line: 600, column: 3, scope: !7263)
!7339 = !DILocation(line: 601, column: 6, scope: !7264)
!7340 = !DILocation(line: 602, column: 2, scope: !7231)
!7341 = !DILocation(line: 571, column: 30, scope: !7225)
!7342 = !DILocation(line: 571, column: 7, scope: !7225)
!7343 = distinct !{!7343, !7228, !7344}
!7344 = !DILocation(line: 602, column: 2, scope: !7222)
!7345 = !DILocation(line: 604, column: 20, scope: !7048)
!7346 = !DILocation(line: 604, column: 18, scope: !7048)
!7347 = !DILocation(line: 605, column: 11, scope: !7048)
!7348 = !DILocation(line: 605, column: 9, scope: !7048)
!7349 = !DILocation(line: 606, column: 12, scope: !7048)
!7350 = !DILocation(line: 606, column: 10, scope: !7048)
!7351 = !DILocation(line: 608, column: 20, scope: !7048)
!7352 = !DILocation(line: 608, column: 18, scope: !7048)
!7353 = !DILocation(line: 609, column: 11, scope: !7048)
!7354 = !DILocation(line: 609, column: 9, scope: !7048)
!7355 = !DILocation(line: 610, column: 12, scope: !7048)
!7356 = !DILocation(line: 610, column: 10, scope: !7048)
!7357 = !DILocation(line: 612, column: 20, scope: !7048)
!7358 = !DILocation(line: 612, column: 18, scope: !7048)
!7359 = !DILocation(line: 613, column: 11, scope: !7048)
!7360 = !DILocation(line: 613, column: 9, scope: !7048)
!7361 = !DILocation(line: 614, column: 12, scope: !7048)
!7362 = !DILocation(line: 614, column: 10, scope: !7048)
!7363 = !DILocation(line: 616, column: 14, scope: !7048)
!7364 = !DILocation(line: 616, column: 12, scope: !7048)
!7365 = !DILocation(line: 617, column: 5, scope: !7048)
!7366 = !DILocation(line: 509, column: 32, scope: !7044)
!7367 = !DILocation(line: 509, column: 3, scope: !7044)
!7368 = distinct !{!7368, !7046, !7369}
!7369 = !DILocation(line: 617, column: 5, scope: !7039)
!7370 = !DILocation(line: 619, column: 10, scope: !6978)
!7371 = !DILocation(line: 619, column: 3, scope: !6978)
!7372 = distinct !DISubprogram(name: "lle_equal", scope: !1, file: !1, line: 204, type: !7373, scopeLine: 206, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7373 = !DISubroutineType(types: !7374)
!7374 = !{!793, !650, !650, !644, !644}
!7375 = !DILocalVariable(name: "lle1", arg: 1, scope: !7372, file: !1, line: 204, type: !650)
!7376 = !DILocation(line: 204, column: 37, scope: !7372)
!7377 = !DILocalVariable(name: "lle2", arg: 2, scope: !7372, file: !1, line: 204, type: !650)
!7378 = !DILocation(line: 204, column: 68, scope: !7372)
!7379 = !DILocalVariable(name: "depth", arg: 3, scope: !7372, file: !1, line: 205, type: !644)
!7380 = !DILocation(line: 205, column: 9, scope: !7372)
!7381 = !DILocalVariable(name: "invariants", arg: 4, scope: !7372, file: !1, line: 205, type: !644)
!7382 = !DILocation(line: 205, column: 20, scope: !7372)
!7383 = !DILocalVariable(name: "i", scope: !7372, file: !1, line: 207, type: !644)
!7384 = !DILocation(line: 207, column: 7, scope: !7372)
!7385 = !DILocation(line: 209, column: 7, scope: !7386)
!7386 = distinct !DILexicalBlock(scope: !7372, file: !1, line: 209, column: 7)
!7387 = !DILocation(line: 209, column: 12, scope: !7386)
!7388 = !DILocation(line: 209, column: 20, scope: !7386)
!7389 = !DILocation(line: 209, column: 23, scope: !7386)
!7390 = !DILocation(line: 209, column: 28, scope: !7386)
!7391 = !DILocation(line: 209, column: 7, scope: !7372)
!7392 = !DILocation(line: 210, column: 5, scope: !7386)
!7393 = !DILocation(line: 211, column: 7, scope: !7394)
!7394 = distinct !DILexicalBlock(scope: !7372, file: !1, line: 211, column: 7)
!7395 = !DILocation(line: 211, column: 30, scope: !7394)
!7396 = !DILocation(line: 211, column: 27, scope: !7394)
!7397 = !DILocation(line: 211, column: 7, scope: !7372)
!7398 = !DILocation(line: 212, column: 5, scope: !7394)
!7399 = !DILocation(line: 213, column: 7, scope: !7400)
!7400 = distinct !DILexicalBlock(scope: !7372, file: !1, line: 213, column: 7)
!7401 = !DILocation(line: 213, column: 33, scope: !7400)
!7402 = !DILocation(line: 213, column: 30, scope: !7400)
!7403 = !DILocation(line: 213, column: 7, scope: !7372)
!7404 = !DILocation(line: 214, column: 5, scope: !7400)
!7405 = !DILocation(line: 215, column: 10, scope: !7406)
!7406 = distinct !DILexicalBlock(scope: !7372, file: !1, line: 215, column: 3)
!7407 = !DILocation(line: 215, column: 8, scope: !7406)
!7408 = !DILocation(line: 215, column: 15, scope: !7409)
!7409 = distinct !DILexicalBlock(scope: !7406, file: !1, line: 215, column: 3)
!7410 = !DILocation(line: 215, column: 19, scope: !7409)
!7411 = !DILocation(line: 215, column: 17, scope: !7409)
!7412 = !DILocation(line: 215, column: 3, scope: !7406)
!7413 = !DILocation(line: 216, column: 9, scope: !7414)
!7414 = distinct !DILexicalBlock(scope: !7409, file: !1, line: 216, column: 9)
!7415 = !DILocation(line: 216, column: 33, scope: !7414)
!7416 = !DILocation(line: 216, column: 39, scope: !7414)
!7417 = !DILocation(line: 216, column: 63, scope: !7414)
!7418 = !DILocation(line: 216, column: 36, scope: !7414)
!7419 = !DILocation(line: 216, column: 9, scope: !7409)
!7420 = !DILocation(line: 217, column: 7, scope: !7414)
!7421 = !DILocation(line: 216, column: 64, scope: !7414)
!7422 = !DILocation(line: 215, column: 27, scope: !7409)
!7423 = !DILocation(line: 215, column: 3, scope: !7409)
!7424 = distinct !{!7424, !7412, !7425}
!7425 = !DILocation(line: 217, column: 14, scope: !7406)
!7426 = !DILocation(line: 218, column: 10, scope: !7427)
!7427 = distinct !DILexicalBlock(scope: !7372, file: !1, line: 218, column: 3)
!7428 = !DILocation(line: 218, column: 8, scope: !7427)
!7429 = !DILocation(line: 218, column: 15, scope: !7430)
!7430 = distinct !DILexicalBlock(scope: !7427, file: !1, line: 218, column: 3)
!7431 = !DILocation(line: 218, column: 19, scope: !7430)
!7432 = !DILocation(line: 218, column: 17, scope: !7430)
!7433 = !DILocation(line: 218, column: 3, scope: !7427)
!7434 = !DILocation(line: 219, column: 9, scope: !7435)
!7435 = distinct !DILexicalBlock(scope: !7430, file: !1, line: 219, column: 9)
!7436 = !DILocation(line: 219, column: 43, scope: !7435)
!7437 = !DILocation(line: 220, column: 2, scope: !7435)
!7438 = !DILocation(line: 220, column: 36, scope: !7435)
!7439 = !DILocation(line: 219, column: 46, scope: !7435)
!7440 = !DILocation(line: 219, column: 9, scope: !7430)
!7441 = !DILocation(line: 221, column: 7, scope: !7435)
!7442 = !DILocation(line: 220, column: 37, scope: !7435)
!7443 = !DILocation(line: 218, column: 32, scope: !7430)
!7444 = !DILocation(line: 218, column: 3, scope: !7430)
!7445 = distinct !{!7445, !7433, !7446}
!7446 = !DILocation(line: 221, column: 14, scope: !7427)
!7447 = !DILocation(line: 222, column: 3, scope: !7372)
!7448 = !DILocation(line: 223, column: 1, scope: !7372)
!7449 = distinct !DISubprogram(name: "lambda_vector_copy", scope: !637, file: !637, line: 298, type: !7450, scopeLine: 300, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7450 = !DISubroutineType(types: !7451)
!7451 = !{null, !642, !642, !644}
!7452 = !DILocalVariable(name: "vec1", arg: 1, scope: !7449, file: !637, line: 298, type: !642)
!7453 = !DILocation(line: 298, column: 35, scope: !7449)
!7454 = !DILocalVariable(name: "vec2", arg: 2, scope: !7449, file: !637, line: 298, type: !642)
!7455 = !DILocation(line: 298, column: 55, scope: !7449)
!7456 = !DILocalVariable(name: "size", arg: 3, scope: !7449, file: !637, line: 299, type: !644)
!7457 = !DILocation(line: 299, column: 11, scope: !7449)
!7458 = !DILocation(line: 301, column: 11, scope: !7449)
!7459 = !DILocation(line: 301, column: 3, scope: !7449)
!7460 = !DILocation(line: 301, column: 17, scope: !7449)
!7461 = !DILocation(line: 301, column: 23, scope: !7449)
!7462 = !DILocation(line: 301, column: 28, scope: !7449)
!7463 = !DILocation(line: 302, column: 1, scope: !7449)
!7464 = distinct !DISubprogram(name: "lambda_vector_first_nz", scope: !637, file: !637, line: 361, type: !7465, scopeLine: 362, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7465 = !DISubroutineType(types: !7466)
!7466 = !{!644, !642, !644, !644}
!7467 = !DILocalVariable(name: "vec1", arg: 1, scope: !7464, file: !637, line: 361, type: !642)
!7468 = !DILocation(line: 361, column: 39, scope: !7464)
!7469 = !DILocalVariable(name: "n", arg: 2, scope: !7464, file: !637, line: 361, type: !644)
!7470 = !DILocation(line: 361, column: 49, scope: !7464)
!7471 = !DILocalVariable(name: "start", arg: 3, scope: !7464, file: !637, line: 361, type: !644)
!7472 = !DILocation(line: 361, column: 56, scope: !7464)
!7473 = !DILocalVariable(name: "j", scope: !7464, file: !637, line: 363, type: !644)
!7474 = !DILocation(line: 363, column: 7, scope: !7464)
!7475 = !DILocation(line: 363, column: 11, scope: !7464)
!7476 = !DILocation(line: 364, column: 3, scope: !7464)
!7477 = !DILocation(line: 364, column: 10, scope: !7464)
!7478 = !DILocation(line: 364, column: 14, scope: !7464)
!7479 = !DILocation(line: 364, column: 12, scope: !7464)
!7480 = !DILocation(line: 364, column: 16, scope: !7464)
!7481 = !DILocation(line: 364, column: 19, scope: !7464)
!7482 = !DILocation(line: 364, column: 24, scope: !7464)
!7483 = !DILocation(line: 364, column: 27, scope: !7464)
!7484 = !DILocation(line: 0, scope: !7464)
!7485 = !DILocation(line: 365, column: 6, scope: !7464)
!7486 = distinct !{!7486, !7476, !7485}
!7487 = !DILocation(line: 366, column: 10, scope: !7464)
!7488 = !DILocation(line: 366, column: 3, scope: !7464)
!7489 = distinct !DISubprogram(name: "lambda_vector_min_nz", scope: !637, file: !637, line: 340, type: !7465, scopeLine: 341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7490 = !DILocalVariable(name: "vec1", arg: 1, scope: !7489, file: !637, line: 340, type: !642)
!7491 = !DILocation(line: 340, column: 37, scope: !7489)
!7492 = !DILocalVariable(name: "n", arg: 2, scope: !7489, file: !637, line: 340, type: !644)
!7493 = !DILocation(line: 340, column: 47, scope: !7489)
!7494 = !DILocalVariable(name: "start", arg: 3, scope: !7489, file: !637, line: 340, type: !644)
!7495 = !DILocation(line: 340, column: 54, scope: !7489)
!7496 = !DILocalVariable(name: "j", scope: !7489, file: !637, line: 342, type: !644)
!7497 = !DILocation(line: 342, column: 7, scope: !7489)
!7498 = !DILocalVariable(name: "min", scope: !7489, file: !637, line: 343, type: !644)
!7499 = !DILocation(line: 343, column: 7, scope: !7489)
!7500 = !DILocation(line: 345, column: 3, scope: !7489)
!7501 = !DILocation(line: 346, column: 12, scope: !7502)
!7502 = distinct !DILexicalBlock(scope: !7489, file: !637, line: 346, column: 3)
!7503 = !DILocation(line: 346, column: 10, scope: !7502)
!7504 = !DILocation(line: 346, column: 8, scope: !7502)
!7505 = !DILocation(line: 346, column: 19, scope: !7506)
!7506 = distinct !DILexicalBlock(scope: !7502, file: !637, line: 346, column: 3)
!7507 = !DILocation(line: 346, column: 23, scope: !7506)
!7508 = !DILocation(line: 346, column: 21, scope: !7506)
!7509 = !DILocation(line: 346, column: 3, scope: !7502)
!7510 = !DILocation(line: 348, column: 11, scope: !7511)
!7511 = distinct !DILexicalBlock(scope: !7512, file: !637, line: 348, column: 11)
!7512 = distinct !DILexicalBlock(scope: !7506, file: !637, line: 347, column: 5)
!7513 = !DILocation(line: 348, column: 16, scope: !7511)
!7514 = !DILocation(line: 348, column: 11, scope: !7512)
!7515 = !DILocation(line: 349, column: 6, scope: !7516)
!7516 = distinct !DILexicalBlock(scope: !7511, file: !637, line: 349, column: 6)
!7517 = !DILocation(line: 349, column: 10, scope: !7516)
!7518 = !DILocation(line: 349, column: 14, scope: !7516)
!7519 = !DILocation(line: 349, column: 17, scope: !7516)
!7520 = !DILocation(line: 349, column: 22, scope: !7516)
!7521 = !DILocation(line: 349, column: 27, scope: !7516)
!7522 = !DILocation(line: 349, column: 32, scope: !7516)
!7523 = !DILocation(line: 349, column: 25, scope: !7516)
!7524 = !DILocation(line: 349, column: 6, scope: !7511)
!7525 = !DILocation(line: 350, column: 10, scope: !7516)
!7526 = !DILocation(line: 350, column: 8, scope: !7516)
!7527 = !DILocation(line: 350, column: 4, scope: !7516)
!7528 = !DILocation(line: 349, column: 35, scope: !7516)
!7529 = !DILocation(line: 351, column: 5, scope: !7512)
!7530 = !DILocation(line: 346, column: 27, scope: !7506)
!7531 = !DILocation(line: 346, column: 3, scope: !7506)
!7532 = distinct !{!7532, !7509, !7533}
!7533 = !DILocation(line: 351, column: 5, scope: !7502)
!7534 = !DILocation(line: 352, column: 3, scope: !7489)
!7535 = !DILocation(line: 354, column: 10, scope: !7489)
!7536 = !DILocation(line: 354, column: 3, scope: !7489)
!7537 = distinct !DISubprogram(name: "lambda_vector_gcd", scope: !637, file: !637, line: 447, type: !7538, scopeLine: 448, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7538 = !DISubroutineType(types: !7539)
!7539 = !{!644, !642, !644}
!7540 = !DILocalVariable(name: "vector", arg: 1, scope: !7537, file: !637, line: 447, type: !642)
!7541 = !DILocation(line: 447, column: 34, scope: !7537)
!7542 = !DILocalVariable(name: "size", arg: 2, scope: !7537, file: !637, line: 447, type: !644)
!7543 = !DILocation(line: 447, column: 46, scope: !7537)
!7544 = !DILocalVariable(name: "i", scope: !7537, file: !637, line: 449, type: !644)
!7545 = !DILocation(line: 449, column: 7, scope: !7537)
!7546 = !DILocalVariable(name: "gcd1", scope: !7537, file: !637, line: 450, type: !644)
!7547 = !DILocation(line: 450, column: 7, scope: !7537)
!7548 = !DILocation(line: 452, column: 7, scope: !7549)
!7549 = distinct !DILexicalBlock(scope: !7537, file: !637, line: 452, column: 7)
!7550 = !DILocation(line: 452, column: 12, scope: !7549)
!7551 = !DILocation(line: 452, column: 7, scope: !7537)
!7552 = !DILocation(line: 454, column: 14, scope: !7553)
!7553 = distinct !DILexicalBlock(scope: !7549, file: !637, line: 453, column: 5)
!7554 = !DILocation(line: 454, column: 12, scope: !7553)
!7555 = !DILocation(line: 455, column: 14, scope: !7556)
!7556 = distinct !DILexicalBlock(scope: !7553, file: !637, line: 455, column: 7)
!7557 = !DILocation(line: 455, column: 12, scope: !7556)
!7558 = !DILocation(line: 455, column: 19, scope: !7559)
!7559 = distinct !DILexicalBlock(scope: !7556, file: !637, line: 455, column: 7)
!7560 = !DILocation(line: 455, column: 23, scope: !7559)
!7561 = !DILocation(line: 455, column: 21, scope: !7559)
!7562 = !DILocation(line: 455, column: 7, scope: !7556)
!7563 = !DILocation(line: 456, column: 14, scope: !7559)
!7564 = !DILocation(line: 456, column: 20, scope: !7559)
!7565 = !DILocation(line: 456, column: 27, scope: !7559)
!7566 = !DILocation(line: 456, column: 9, scope: !7559)
!7567 = !DILocation(line: 456, column: 7, scope: !7559)
!7568 = !DILocation(line: 456, column: 2, scope: !7559)
!7569 = !DILocation(line: 455, column: 30, scope: !7559)
!7570 = !DILocation(line: 455, column: 7, scope: !7559)
!7571 = distinct !{!7571, !7562, !7572}
!7572 = !DILocation(line: 456, column: 29, scope: !7556)
!7573 = !DILocation(line: 457, column: 5, scope: !7553)
!7574 = !DILocation(line: 458, column: 10, scope: !7537)
!7575 = !DILocation(line: 458, column: 3, scope: !7537)
!7576 = distinct !DISubprogram(name: "lambda_vector_mult_const", scope: !637, file: !637, line: 251, type: !7577, scopeLine: 253, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7577 = !DISubroutineType(types: !7578)
!7578 = !{null, !642, !642, !644, !644}
!7579 = !DILocalVariable(name: "vec1", arg: 1, scope: !7576, file: !637, line: 251, type: !642)
!7580 = !DILocation(line: 251, column: 41, scope: !7576)
!7581 = !DILocalVariable(name: "vec2", arg: 2, scope: !7576, file: !637, line: 251, type: !642)
!7582 = !DILocation(line: 251, column: 61, scope: !7576)
!7583 = !DILocalVariable(name: "size", arg: 3, scope: !7576, file: !637, line: 252, type: !644)
!7584 = !DILocation(line: 252, column: 10, scope: !7576)
!7585 = !DILocalVariable(name: "const1", arg: 4, scope: !7576, file: !637, line: 252, type: !644)
!7586 = !DILocation(line: 252, column: 20, scope: !7576)
!7587 = !DILocalVariable(name: "i", scope: !7576, file: !637, line: 254, type: !644)
!7588 = !DILocation(line: 254, column: 7, scope: !7576)
!7589 = !DILocation(line: 256, column: 7, scope: !7590)
!7590 = distinct !DILexicalBlock(scope: !7576, file: !637, line: 256, column: 7)
!7591 = !DILocation(line: 256, column: 14, scope: !7590)
!7592 = !DILocation(line: 256, column: 7, scope: !7576)
!7593 = !DILocation(line: 257, column: 26, scope: !7590)
!7594 = !DILocation(line: 257, column: 32, scope: !7590)
!7595 = !DILocation(line: 257, column: 5, scope: !7590)
!7596 = !DILocation(line: 259, column: 12, scope: !7597)
!7597 = distinct !DILexicalBlock(scope: !7590, file: !637, line: 259, column: 5)
!7598 = !DILocation(line: 259, column: 10, scope: !7597)
!7599 = !DILocation(line: 259, column: 17, scope: !7600)
!7600 = distinct !DILexicalBlock(scope: !7597, file: !637, line: 259, column: 5)
!7601 = !DILocation(line: 259, column: 21, scope: !7600)
!7602 = !DILocation(line: 259, column: 19, scope: !7600)
!7603 = !DILocation(line: 259, column: 5, scope: !7597)
!7604 = !DILocation(line: 260, column: 17, scope: !7600)
!7605 = !DILocation(line: 260, column: 26, scope: !7600)
!7606 = !DILocation(line: 260, column: 31, scope: !7600)
!7607 = !DILocation(line: 260, column: 24, scope: !7600)
!7608 = !DILocation(line: 260, column: 7, scope: !7600)
!7609 = !DILocation(line: 260, column: 12, scope: !7600)
!7610 = !DILocation(line: 260, column: 15, scope: !7600)
!7611 = !DILocation(line: 259, column: 28, scope: !7600)
!7612 = !DILocation(line: 259, column: 5, scope: !7600)
!7613 = distinct !{!7613, !7603, !7614}
!7614 = !DILocation(line: 260, column: 32, scope: !7597)
!7615 = !DILocation(line: 261, column: 1, scope: !7576)
!7616 = distinct !DISubprogram(name: "gimple_op", scope: !389, file: !389, line: 1631, type: !7617, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7617 = !DISubroutineType(types: !7618)
!7618 = !{!675, !4203, !5}
!7619 = !DILocalVariable(name: "gs", arg: 1, scope: !7616, file: !389, line: 1631, type: !4203)
!7620 = !DILocation(line: 1631, column: 25, scope: !7616)
!7621 = !DILocalVariable(name: "i", arg: 2, scope: !7616, file: !389, line: 1631, type: !5)
!7622 = !DILocation(line: 1631, column: 38, scope: !7616)
!7623 = !DILocation(line: 1633, column: 23, scope: !7624)
!7624 = distinct !DILexicalBlock(scope: !7616, file: !389, line: 1633, column: 7)
!7625 = !DILocation(line: 1633, column: 7, scope: !7624)
!7626 = !DILocation(line: 1633, column: 7, scope: !7616)
!7627 = !DILocation(line: 1638, column: 26, scope: !7628)
!7628 = distinct !DILexicalBlock(scope: !7624, file: !389, line: 1634, column: 5)
!7629 = !DILocation(line: 1638, column: 14, scope: !7628)
!7630 = !DILocation(line: 1638, column: 50, scope: !7628)
!7631 = !DILocation(line: 1638, column: 7, scope: !7628)
!7632 = !DILocation(line: 1641, column: 5, scope: !7624)
!7633 = !DILocation(line: 1642, column: 1, scope: !7616)
!7634 = distinct !DISubprogram(name: "gimple_has_ops", scope: !389, file: !389, line: 1274, type: !5561, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7635 = !DILocalVariable(name: "g", arg: 1, scope: !7634, file: !389, line: 1274, type: !4203)
!7636 = !DILocation(line: 1274, column: 30, scope: !7634)
!7637 = !DILocation(line: 1276, column: 23, scope: !7634)
!7638 = !DILocation(line: 1276, column: 10, scope: !7634)
!7639 = !DILocation(line: 1276, column: 26, scope: !7634)
!7640 = !DILocation(line: 1276, column: 41, scope: !7634)
!7641 = !DILocation(line: 1276, column: 57, scope: !7634)
!7642 = !DILocation(line: 1276, column: 44, scope: !7634)
!7643 = !DILocation(line: 1276, column: 60, scope: !7634)
!7644 = !DILocation(line: 0, scope: !7634)
!7645 = !DILocation(line: 1276, column: 3, scope: !7634)
!7646 = distinct !DISubprogram(name: "gimple_ops", scope: !389, file: !389, line: 1614, type: !6175, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7647 = !DILocalVariable(name: "gs", arg: 1, scope: !7646, file: !389, line: 1614, type: !1002)
!7648 = !DILocation(line: 1614, column: 20, scope: !7646)
!7649 = !DILocalVariable(name: "off", scope: !7646, file: !389, line: 1616, type: !1147)
!7650 = !DILocation(line: 1616, column: 10, scope: !7646)
!7651 = !DILocation(line: 1621, column: 56, scope: !7646)
!7652 = !DILocation(line: 1621, column: 28, scope: !7646)
!7653 = !DILocation(line: 1621, column: 9, scope: !7646)
!7654 = !DILocation(line: 1621, column: 7, scope: !7646)
!7655 = !DILocation(line: 1622, column: 3, scope: !7646)
!7656 = !DILocation(line: 1624, column: 29, scope: !7646)
!7657 = !DILocation(line: 1624, column: 20, scope: !7646)
!7658 = !DILocation(line: 1624, column: 34, scope: !7646)
!7659 = !DILocation(line: 1624, column: 32, scope: !7646)
!7660 = !DILocation(line: 1624, column: 10, scope: !7646)
!7661 = !DILocation(line: 1624, column: 3, scope: !7646)
!7662 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !389, file: !389, line: 1073, type: !7663, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7663 = !DISubroutineType(types: !7664)
!7664 = !{!432, !1002}
!7665 = !DILocalVariable(name: "gs", arg: 1, scope: !7662, file: !389, line: 1073, type: !1002)
!7666 = !DILocation(line: 1073, column: 36, scope: !7662)
!7667 = !DILocation(line: 1075, column: 37, scope: !7662)
!7668 = !DILocation(line: 1075, column: 24, scope: !7662)
!7669 = !DILocation(line: 1075, column: 10, scope: !7662)
!7670 = !DILocation(line: 1075, column: 3, scope: !7662)
!7671 = distinct !DISubprogram(name: "gss_for_code", scope: !389, file: !389, line: 1061, type: !7672, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7672 = !DISubroutineType(types: !7673)
!7673 = !{!432, !388}
!7674 = !DILocalVariable(name: "code", arg: 1, scope: !7671, file: !389, line: 1061, type: !388)
!7675 = !DILocation(line: 1061, column: 32, scope: !7671)
!7676 = !DILocation(line: 1066, column: 24, scope: !7671)
!7677 = !DILocation(line: 1066, column: 10, scope: !7671)
!7678 = !DILocation(line: 1066, column: 3, scope: !7671)
!7679 = distinct !DISubprogram(name: "instantiate_parameters", scope: !7680, file: !7680, line: 57, type: !7681, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7680 = !DIFile(filename: "./tree-scalar-evolution.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7681 = !DISubroutineType(types: !7682)
!7682 = !{!675, !1217, !675}
!7683 = !DILocalVariable(name: "loop", arg: 1, scope: !7679, file: !7680, line: 57, type: !1217)
!7684 = !DILocation(line: 57, column: 38, scope: !7679)
!7685 = !DILocalVariable(name: "chrec", arg: 2, scope: !7679, file: !7680, line: 57, type: !675)
!7686 = !DILocation(line: 57, column: 49, scope: !7679)
!7687 = !DILocation(line: 59, column: 47, scope: !7679)
!7688 = !DILocation(line: 59, column: 28, scope: !7679)
!7689 = !DILocation(line: 59, column: 54, scope: !7679)
!7690 = !DILocation(line: 59, column: 60, scope: !7679)
!7691 = !DILocation(line: 59, column: 10, scope: !7679)
!7692 = !DILocation(line: 59, column: 3, scope: !7679)
!7693 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !5479, file: !5479, line: 427, type: !7694, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7694 = !DISubroutineType(types: !7695)
!7695 = !{!675, !2072}
!7696 = !DILocalVariable(name: "use", arg: 1, scope: !7693, file: !5479, line: 427, type: !2072)
!7697 = !DILocation(line: 427, column: 33, scope: !7693)
!7698 = !DILocation(line: 429, column: 12, scope: !7693)
!7699 = !DILocation(line: 429, column: 17, scope: !7693)
!7700 = !DILocation(line: 429, column: 10, scope: !7693)
!7701 = !DILocation(line: 429, column: 3, scope: !7693)
!7702 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !5479, file: !5479, line: 442, type: !7703, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7703 = !DISubroutineType(types: !7704)
!7704 = !{!2072, !1002, !644}
!7705 = !DILocalVariable(name: "gs", arg: 1, scope: !7702, file: !5479, line: 442, type: !1002)
!7706 = !DILocation(line: 442, column: 36, scope: !7702)
!7707 = !DILocalVariable(name: "i", arg: 2, scope: !7702, file: !5479, line: 442, type: !644)
!7708 = !DILocation(line: 442, column: 44, scope: !7702)
!7709 = !DILocation(line: 444, column: 27, scope: !7702)
!7710 = !DILocation(line: 444, column: 31, scope: !7702)
!7711 = !DILocation(line: 444, column: 11, scope: !7702)
!7712 = !DILocation(line: 444, column: 35, scope: !7702)
!7713 = !DILocation(line: 444, column: 3, scope: !7702)
!7714 = distinct !DISubprogram(name: "gcc_tree_to_linear_expression", scope: !1, file: !1, line: 1130, type: !7715, scopeLine: 1134, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7715 = !DISubroutineType(types: !7716)
!7716 = !{!650, !644, !675, !2042, !2042, !644, !2209}
!7717 = !DILocalVariable(name: "depth", arg: 1, scope: !7714, file: !1, line: 1130, type: !644)
!7718 = !DILocation(line: 1130, column: 36, scope: !7714)
!7719 = !DILocalVariable(name: "expr", arg: 2, scope: !7714, file: !1, line: 1130, type: !675)
!7720 = !DILocation(line: 1130, column: 48, scope: !7714)
!7721 = !DILocalVariable(name: "outerinductionvars", arg: 3, scope: !7714, file: !1, line: 1131, type: !2042)
!7722 = !DILocation(line: 1131, column: 27, scope: !7714)
!7723 = !DILocalVariable(name: "invariants", arg: 4, scope: !7714, file: !1, line: 1132, type: !2042)
!7724 = !DILocation(line: 1132, column: 48, scope: !7714)
!7725 = !DILocalVariable(name: "extra", arg: 5, scope: !7714, file: !1, line: 1132, type: !644)
!7726 = !DILocation(line: 1132, column: 64, scope: !7714)
!7727 = !DILocalVariable(name: "lambda_obstack", arg: 6, scope: !7714, file: !1, line: 1133, type: !2209)
!7728 = !DILocation(line: 1133, column: 49, scope: !7714)
!7729 = !DILocalVariable(name: "lle", scope: !7714, file: !1, line: 1135, type: !650)
!7730 = !DILocation(line: 1135, column: 28, scope: !7714)
!7731 = !DILocation(line: 1136, column: 11, scope: !7714)
!7732 = !DILocation(line: 1136, column: 3, scope: !7714)
!7733 = !DILocation(line: 1140, column: 45, scope: !7734)
!7734 = distinct !DILexicalBlock(scope: !7735, file: !1, line: 1139, column: 7)
!7735 = distinct !DILexicalBlock(scope: !7714, file: !1, line: 1137, column: 5)
!7736 = !DILocation(line: 1140, column: 56, scope: !7734)
!7737 = !DILocation(line: 1140, column: 54, scope: !7734)
!7738 = !DILocation(line: 1140, column: 63, scope: !7734)
!7739 = !DILocation(line: 1140, column: 15, scope: !7734)
!7740 = !DILocation(line: 1140, column: 13, scope: !7734)
!7741 = !DILocation(line: 1141, column: 23, scope: !7734)
!7742 = !DILocation(line: 1141, column: 2, scope: !7734)
!7743 = !DILocation(line: 1141, column: 21, scope: !7734)
!7744 = !DILocation(line: 1142, column: 6, scope: !7745)
!7745 = distinct !DILexicalBlock(scope: !7734, file: !1, line: 1142, column: 6)
!7746 = !DILocation(line: 1142, column: 12, scope: !7745)
!7747 = !DILocation(line: 1142, column: 6, scope: !7734)
!7748 = !DILocation(line: 1143, column: 26, scope: !7745)
!7749 = !DILocation(line: 1143, column: 4, scope: !7745)
!7750 = !DILocation(line: 1143, column: 23, scope: !7745)
!7751 = !DILocation(line: 1145, column: 2, scope: !7734)
!7752 = !DILocation(line: 1145, column: 24, scope: !7734)
!7753 = !DILocation(line: 1147, column: 7, scope: !7735)
!7754 = !DILocalVariable(name: "iv", scope: !7755, file: !1, line: 1150, type: !675)
!7755 = distinct !DILexicalBlock(scope: !7735, file: !1, line: 1149, column: 7)
!7756 = !DILocation(line: 1150, column: 7, scope: !7755)
!7757 = !DILocalVariable(name: "invar", scope: !7755, file: !1, line: 1150, type: !675)
!7758 = !DILocation(line: 1150, column: 11, scope: !7755)
!7759 = !DILocalVariable(name: "i", scope: !7755, file: !1, line: 1151, type: !1147)
!7760 = !DILocation(line: 1151, column: 9, scope: !7755)
!7761 = !DILocation(line: 1152, column: 9, scope: !7762)
!7762 = distinct !DILexicalBlock(scope: !7755, file: !1, line: 1152, column: 2)
!7763 = !DILocation(line: 1152, column: 7, scope: !7762)
!7764 = !DILocation(line: 1152, column: 14, scope: !7765)
!7765 = distinct !DILexicalBlock(scope: !7762, file: !1, line: 1152, column: 2)
!7766 = !DILocation(line: 1152, column: 2, scope: !7762)
!7767 = !DILocation(line: 1153, column: 8, scope: !7768)
!7768 = distinct !DILexicalBlock(scope: !7765, file: !1, line: 1153, column: 8)
!7769 = !DILocation(line: 1153, column: 11, scope: !7768)
!7770 = !DILocation(line: 1153, column: 8, scope: !7765)
!7771 = !DILocation(line: 1155, column: 12, scope: !7772)
!7772 = distinct !DILexicalBlock(scope: !7773, file: !1, line: 1155, column: 12)
!7773 = distinct !DILexicalBlock(scope: !7768, file: !1, line: 1154, column: 6)
!7774 = !DILocation(line: 1155, column: 33, scope: !7772)
!7775 = !DILocation(line: 1155, column: 30, scope: !7772)
!7776 = !DILocation(line: 1155, column: 12, scope: !7773)
!7777 = !DILocation(line: 1157, column: 55, scope: !7778)
!7778 = distinct !DILexicalBlock(scope: !7772, file: !1, line: 1156, column: 3)
!7779 = !DILocation(line: 1157, column: 66, scope: !7778)
!7780 = !DILocation(line: 1157, column: 64, scope: !7778)
!7781 = !DILocation(line: 1158, column: 55, scope: !7778)
!7782 = !DILocation(line: 1157, column: 25, scope: !7778)
!7783 = !DILocation(line: 1157, column: 23, scope: !7778)
!7784 = !DILocation(line: 1159, column: 5, scope: !7778)
!7785 = !DILocation(line: 1159, column: 28, scope: !7778)
!7786 = !DILocation(line: 1159, column: 31, scope: !7778)
!7787 = !DILocation(line: 1160, column: 9, scope: !7788)
!7788 = distinct !DILexicalBlock(scope: !7778, file: !1, line: 1160, column: 9)
!7789 = !DILocation(line: 1160, column: 15, scope: !7788)
!7790 = !DILocation(line: 1160, column: 9, scope: !7778)
!7791 = !DILocation(line: 1161, column: 28, scope: !7788)
!7792 = !DILocation(line: 1161, column: 7, scope: !7788)
!7793 = !DILocation(line: 1161, column: 26, scope: !7788)
!7794 = !DILocation(line: 1163, column: 5, scope: !7778)
!7795 = !DILocation(line: 1163, column: 27, scope: !7778)
!7796 = !DILocation(line: 1164, column: 3, scope: !7778)
!7797 = !DILocation(line: 1165, column: 6, scope: !7773)
!7798 = !DILocation(line: 1153, column: 14, scope: !7768)
!7799 = !DILocation(line: 1152, column: 62, scope: !7765)
!7800 = !DILocation(line: 1152, column: 2, scope: !7765)
!7801 = distinct !{!7801, !7766, !7802}
!7802 = !DILocation(line: 1165, column: 6, scope: !7762)
!7803 = !DILocation(line: 1166, column: 9, scope: !7804)
!7804 = distinct !DILexicalBlock(scope: !7755, file: !1, line: 1166, column: 2)
!7805 = !DILocation(line: 1166, column: 7, scope: !7804)
!7806 = !DILocation(line: 1166, column: 14, scope: !7807)
!7807 = distinct !DILexicalBlock(scope: !7804, file: !1, line: 1166, column: 2)
!7808 = !DILocation(line: 1166, column: 2, scope: !7804)
!7809 = !DILocation(line: 1167, column: 8, scope: !7810)
!7810 = distinct !DILexicalBlock(scope: !7807, file: !1, line: 1167, column: 8)
!7811 = !DILocation(line: 1167, column: 14, scope: !7810)
!7812 = !DILocation(line: 1167, column: 8, scope: !7807)
!7813 = !DILocation(line: 1169, column: 12, scope: !7814)
!7814 = distinct !DILexicalBlock(scope: !7815, file: !1, line: 1169, column: 12)
!7815 = distinct !DILexicalBlock(scope: !7810, file: !1, line: 1168, column: 6)
!7816 = !DILocation(line: 1169, column: 36, scope: !7814)
!7817 = !DILocation(line: 1169, column: 33, scope: !7814)
!7818 = !DILocation(line: 1169, column: 12, scope: !7815)
!7819 = !DILocation(line: 1171, column: 55, scope: !7820)
!7820 = distinct !DILexicalBlock(scope: !7814, file: !1, line: 1170, column: 3)
!7821 = !DILocation(line: 1171, column: 66, scope: !7820)
!7822 = !DILocation(line: 1171, column: 64, scope: !7820)
!7823 = !DILocation(line: 1172, column: 55, scope: !7820)
!7824 = !DILocation(line: 1171, column: 25, scope: !7820)
!7825 = !DILocation(line: 1171, column: 23, scope: !7820)
!7826 = !DILocation(line: 1173, column: 5, scope: !7820)
!7827 = !DILocation(line: 1173, column: 38, scope: !7820)
!7828 = !DILocation(line: 1173, column: 41, scope: !7820)
!7829 = !DILocation(line: 1174, column: 9, scope: !7830)
!7830 = distinct !DILexicalBlock(scope: !7820, file: !1, line: 1174, column: 9)
!7831 = !DILocation(line: 1174, column: 15, scope: !7830)
!7832 = !DILocation(line: 1174, column: 9, scope: !7820)
!7833 = !DILocation(line: 1175, column: 28, scope: !7830)
!7834 = !DILocation(line: 1175, column: 7, scope: !7830)
!7835 = !DILocation(line: 1175, column: 26, scope: !7830)
!7836 = !DILocation(line: 1176, column: 5, scope: !7820)
!7837 = !DILocation(line: 1176, column: 27, scope: !7820)
!7838 = !DILocation(line: 1177, column: 3, scope: !7820)
!7839 = !DILocation(line: 1178, column: 6, scope: !7815)
!7840 = !DILocation(line: 1167, column: 17, scope: !7810)
!7841 = !DILocation(line: 1166, column: 57, scope: !7807)
!7842 = !DILocation(line: 1166, column: 2, scope: !7807)
!7843 = distinct !{!7843, !7808, !7844}
!7844 = !DILocation(line: 1178, column: 6, scope: !7804)
!7845 = !DILocation(line: 1180, column: 7, scope: !7735)
!7846 = !DILocation(line: 1182, column: 7, scope: !7735)
!7847 = !DILocation(line: 1185, column: 10, scope: !7714)
!7848 = !DILocation(line: 1185, column: 3, scope: !7714)
!7849 = !DILocation(line: 1186, column: 1, scope: !7714)
!7850 = distinct !DISubprogram(name: "VEC_tree_heap_reserve", scope: !133, file: !133, line: 184, type: !7851, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7851 = !DISubroutineType(types: !7852)
!7852 = !{!644, !4227, !644}
!7853 = !DILocalVariable(name: "vec_", arg: 1, scope: !7850, file: !133, line: 184, type: !4227)
!7854 = !DILocation(line: 184, column: 1, scope: !7850)
!7855 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7850, file: !133, line: 184, type: !644)
!7856 = !DILocalVariable(name: "extend", scope: !7850, file: !133, line: 184, type: !644)
!7857 = !DILocation(line: 184, column: 1, scope: !7858)
!7858 = distinct !DILexicalBlock(scope: !7850, file: !133, line: 184, column: 1)
!7859 = distinct !DISubprogram(name: "invariant_in_loop_and_outer_loops", scope: !1, file: !1, line: 1206, type: !7860, scopeLine: 1207, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7860 = !DISubroutineType(types: !7861)
!7861 = !{!793, !1217, !675}
!7862 = !DILocalVariable(name: "loop", arg: 1, scope: !7859, file: !1, line: 1206, type: !1217)
!7863 = !DILocation(line: 1206, column: 49, scope: !7859)
!7864 = !DILocalVariable(name: "op", arg: 2, scope: !7859, file: !1, line: 1206, type: !675)
!7865 = !DILocation(line: 1206, column: 60, scope: !7859)
!7866 = !DILocation(line: 1208, column: 32, scope: !7867)
!7867 = distinct !DILexicalBlock(scope: !7859, file: !1, line: 1208, column: 7)
!7868 = !DILocation(line: 1208, column: 7, scope: !7867)
!7869 = !DILocation(line: 1208, column: 7, scope: !7859)
!7870 = !DILocation(line: 1209, column: 5, scope: !7867)
!7871 = !DILocation(line: 1210, column: 19, scope: !7872)
!7872 = distinct !DILexicalBlock(scope: !7859, file: !1, line: 1210, column: 7)
!7873 = !DILocation(line: 1210, column: 7, scope: !7872)
!7874 = !DILocation(line: 1210, column: 25, scope: !7872)
!7875 = !DILocation(line: 1210, column: 7, scope: !7859)
!7876 = !DILocation(line: 1211, column: 5, scope: !7872)
!7877 = !DILocation(line: 1212, column: 34, scope: !7878)
!7878 = distinct !DILexicalBlock(scope: !7859, file: !1, line: 1212, column: 7)
!7879 = !DILocation(line: 1212, column: 40, scope: !7878)
!7880 = !DILocation(line: 1212, column: 8, scope: !7878)
!7881 = !DILocation(line: 1212, column: 7, scope: !7859)
!7882 = !DILocation(line: 1213, column: 5, scope: !7878)
!7883 = !DILocation(line: 1214, column: 55, scope: !7884)
!7884 = distinct !DILexicalBlock(scope: !7859, file: !1, line: 1214, column: 7)
!7885 = !DILocation(line: 1214, column: 43, scope: !7884)
!7886 = !DILocation(line: 1214, column: 62, scope: !7884)
!7887 = !DILocation(line: 1214, column: 8, scope: !7884)
!7888 = !DILocation(line: 1214, column: 7, scope: !7859)
!7889 = !DILocation(line: 1215, column: 5, scope: !7884)
!7890 = !DILocation(line: 1216, column: 3, scope: !7859)
!7891 = !DILocation(line: 1217, column: 1, scope: !7859)
!7892 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !133, file: !133, line: 182, type: !7893, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7893 = !DISubroutineType(types: !7894)
!7894 = !{!1036, !6146, !675}
!7895 = !DILocalVariable(name: "vec_", arg: 1, scope: !7892, file: !133, line: 182, type: !6146)
!7896 = !DILocation(line: 182, column: 1, scope: !7892)
!7897 = !DILocalVariable(name: "obj_", arg: 2, scope: !7892, file: !133, line: 182, type: !675)
!7898 = !DILocalVariable(name: "slot_", scope: !7892, file: !133, line: 182, type: !1036)
!7899 = distinct !DISubprogram(name: "gimple_cond_code", scope: !389, file: !389, line: 2221, type: !7900, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7900 = !DISubroutineType(types: !7901)
!7901 = !{!132, !4203}
!7902 = !DILocalVariable(name: "gs", arg: 1, scope: !7899, file: !389, line: 2221, type: !4203)
!7903 = !DILocation(line: 2221, column: 32, scope: !7899)
!7904 = !DILocation(line: 2224, column: 27, scope: !7899)
!7905 = !DILocation(line: 2224, column: 31, scope: !7899)
!7906 = !DILocation(line: 2224, column: 38, scope: !7899)
!7907 = !DILocation(line: 2224, column: 3, scope: !7899)
!7908 = distinct !DISubprogram(name: "VEC_int_heap_safe_push", scope: !2049, file: !2049, line: 32, type: !7909, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7909 = !DISubroutineType(types: !7910)
!7910 = !{!643, !4553, !7911}
!7911 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !644)
!7912 = !DILocalVariable(name: "vec_", arg: 1, scope: !7908, file: !2049, line: 32, type: !4553)
!7913 = !DILocation(line: 32, column: 1, scope: !7908)
!7914 = !DILocalVariable(name: "obj_", arg: 2, scope: !7908, file: !2049, line: 32, type: !7911)
!7915 = distinct !DISubprogram(name: "block_before_loop", scope: !7680, file: !7680, line: 46, type: !7916, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7916 = !DISubroutineType(types: !7917)
!7917 = !{!1454, !1244}
!7918 = !DILocalVariable(name: "loop", arg: 1, scope: !7915, file: !7680, line: 46, type: !1244)
!7919 = !DILocation(line: 46, column: 27, scope: !7915)
!7920 = !DILocalVariable(name: "preheader", scope: !7915, file: !7680, line: 48, type: !982)
!7921 = !DILocation(line: 48, column: 8, scope: !7915)
!7922 = !DILocation(line: 48, column: 41, scope: !7915)
!7923 = !DILocation(line: 48, column: 20, scope: !7915)
!7924 = !DILocation(line: 49, column: 11, scope: !7915)
!7925 = !DILocation(line: 49, column: 23, scope: !7915)
!7926 = !DILocation(line: 49, column: 34, scope: !7915)
!7927 = !DILocation(line: 49, column: 40, scope: !7915)
!7928 = !DILocation(line: 49, column: 3, scope: !7915)
!7929 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !389, file: !389, line: 3100, type: !7930, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7930 = !DISubroutineType(types: !7931)
!7931 = !{!5487, !1002, !5}
!7932 = !DILocalVariable(name: "gs", arg: 1, scope: !7929, file: !389, line: 3100, type: !1002)
!7933 = !DILocation(line: 3100, column: 24, scope: !7929)
!7934 = !DILocalVariable(name: "index", arg: 2, scope: !7929, file: !389, line: 3100, type: !5)
!7935 = !DILocation(line: 3100, column: 37, scope: !7929)
!7936 = !DILocation(line: 3103, column: 3, scope: !7929)
!7937 = !DILocation(line: 3104, column: 12, scope: !7929)
!7938 = !DILocation(line: 3104, column: 16, scope: !7929)
!7939 = !DILocation(line: 3104, column: 27, scope: !7929)
!7940 = !DILocation(line: 3104, column: 32, scope: !7929)
!7941 = !DILocation(line: 3104, column: 3, scope: !7929)
!7942 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !133, file: !133, line: 182, type: !7943, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7943 = !DISubroutineType(types: !7944)
!7944 = !{!644, !6146, !644}
!7945 = !DILocalVariable(name: "vec_", arg: 1, scope: !7942, file: !133, line: 182, type: !6146)
!7946 = !DILocation(line: 182, column: 1, scope: !7942)
!7947 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7942, file: !133, line: 182, type: !644)
!7948 = distinct !DISubprogram(name: "loop_depth", scope: !328, file: !328, line: 425, type: !7949, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7949 = !DISubroutineType(types: !7950)
!7950 = !{!5, !7951}
!7951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7952, size: 64)
!7952 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1218)
!7953 = !DILocalVariable(name: "loop", arg: 1, scope: !7948, file: !328, line: 425, type: !7951)
!7954 = !DILocation(line: 425, column: 32, scope: !7948)
!7955 = !DILocation(line: 427, column: 10, scope: !7948)
!7956 = !DILocation(line: 427, column: 3, scope: !7948)
!7957 = distinct !DISubprogram(name: "loop_outer", scope: !328, file: !328, line: 434, type: !7958, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7958 = !DISubroutineType(types: !7959)
!7959 = !{!1217, !7951}
!7960 = !DILocalVariable(name: "loop", arg: 1, scope: !7957, file: !328, line: 434, type: !7951)
!7961 = !DILocation(line: 434, column: 32, scope: !7957)
!7962 = !DILocalVariable(name: "n", scope: !7957, file: !328, line: 436, type: !5)
!7963 = !DILocation(line: 436, column: 12, scope: !7957)
!7964 = !DILocation(line: 436, column: 16, scope: !7957)
!7965 = !DILocation(line: 438, column: 7, scope: !7966)
!7966 = distinct !DILexicalBlock(scope: !7957, file: !328, line: 438, column: 7)
!7967 = !DILocation(line: 438, column: 9, scope: !7966)
!7968 = !DILocation(line: 438, column: 7, scope: !7957)
!7969 = !DILocation(line: 439, column: 5, scope: !7966)
!7970 = !DILocation(line: 441, column: 10, scope: !7957)
!7971 = !DILocation(line: 441, column: 3, scope: !7957)
!7972 = !DILocation(line: 442, column: 1, scope: !7957)
!7973 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !328, file: !328, line: 85, type: !7974, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7974 = !DISubroutineType(types: !7975)
!7975 = !{!5, !7976}
!7976 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7977, size: 64)
!7977 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1237)
!7978 = !DILocalVariable(name: "vec_", arg: 1, scope: !7973, file: !328, line: 85, type: !7976)
!7979 = !DILocation(line: 85, column: 1, scope: !7973)
!7980 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !328, file: !328, line: 85, type: !7981, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7981 = !DISubroutineType(types: !7982)
!7982 = !{!1244, !7976, !5}
!7983 = !DILocalVariable(name: "vec_", arg: 1, scope: !7980, file: !328, line: 85, type: !7976)
!7984 = !DILocation(line: 85, column: 1, scope: !7980)
!7985 = !DILocalVariable(name: "ix_", arg: 2, scope: !7980, file: !328, line: 85, type: !5)
!7986 = !DILocation(line: 0, scope: !7980)
!7987 = distinct !DISubprogram(name: "VEC_int_heap_reserve", scope: !2049, file: !2049, line: 32, type: !7988, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7988 = !DISubroutineType(types: !7989)
!7989 = !{!644, !4553, !644}
!7990 = !DILocalVariable(name: "vec_", arg: 1, scope: !7987, file: !2049, line: 32, type: !4553)
!7991 = !DILocation(line: 32, column: 1, scope: !7987)
!7992 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7987, file: !2049, line: 32, type: !644)
!7993 = !DILocalVariable(name: "extend", scope: !7987, file: !2049, line: 32, type: !644)
!7994 = !DILocation(line: 32, column: 1, scope: !7995)
!7995 = distinct !DILexicalBlock(scope: !7987, file: !2049, line: 32, column: 1)
!7996 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !2049, file: !2049, line: 31, type: !7997, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!7997 = !DISubroutineType(types: !7998)
!7998 = !{!643, !7999, !644}
!7999 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2053, size: 64)
!8000 = !DILocalVariable(name: "vec_", arg: 1, scope: !7996, file: !2049, line: 31, type: !7999)
!8001 = !DILocation(line: 31, column: 1, scope: !7996)
!8002 = !DILocalVariable(name: "obj_", arg: 2, scope: !7996, file: !2049, line: 31, type: !644)
!8003 = !DILocalVariable(name: "slot_", scope: !7996, file: !2049, line: 31, type: !643)
!8004 = distinct !DISubprogram(name: "VEC_int_base_space", scope: !2049, file: !2049, line: 31, type: !8005, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8005 = !DISubroutineType(types: !8006)
!8006 = !{!644, !7999, !644}
!8007 = !DILocalVariable(name: "vec_", arg: 1, scope: !8004, file: !2049, line: 31, type: !7999)
!8008 = !DILocation(line: 31, column: 1, scope: !8004)
!8009 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8004, file: !2049, line: 31, type: !644)
!8010 = distinct !DISubprogram(name: "VEC_lambda_loop_heap_reserve", scope: !1, file: !1, line: 1466, type: !8011, scopeLine: 1466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8011 = !DISubroutineType(types: !8012)
!8012 = !{!644, !4946, !644}
!8013 = !DILocalVariable(name: "vec_", arg: 1, scope: !8010, file: !1, line: 1466, type: !4946)
!8014 = !DILocation(line: 1466, column: 1, scope: !8010)
!8015 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8010, file: !1, line: 1466, type: !644)
!8016 = !DILocalVariable(name: "extend", scope: !8010, file: !1, line: 1466, type: !644)
!8017 = !DILocation(line: 1466, column: 1, scope: !8018)
!8018 = distinct !DILexicalBlock(scope: !8010, file: !1, line: 1466, column: 1)
!8019 = distinct !DISubprogram(name: "VEC_lambda_loop_base_quick_push", scope: !1, file: !1, line: 1465, type: !8020, scopeLine: 1465, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8020 = !DISubroutineType(types: !8021)
!8021 = !{!664, !8022, !665}
!8022 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2065, size: 64)
!8023 = !DILocalVariable(name: "vec_", arg: 1, scope: !8019, file: !1, line: 1465, type: !8022)
!8024 = !DILocation(line: 1465, column: 1, scope: !8019)
!8025 = !DILocalVariable(name: "obj_", arg: 2, scope: !8019, file: !1, line: 1465, type: !665)
!8026 = !DILocalVariable(name: "slot_", scope: !8019, file: !1, line: 1465, type: !664)
!8027 = distinct !DISubprogram(name: "VEC_lambda_loop_base_space", scope: !1, file: !1, line: 1465, type: !8028, scopeLine: 1465, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8028 = !DISubroutineType(types: !8029)
!8029 = !{!644, !8022, !644}
!8030 = !DILocalVariable(name: "vec_", arg: 1, scope: !8027, file: !1, line: 1465, type: !8022)
!8031 = !DILocation(line: 1465, column: 1, scope: !8027)
!8032 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8027, file: !1, line: 1465, type: !644)
!8033 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !5479, file: !5479, line: 1018, type: !8034, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8034 = !DISubroutineType(types: !8035)
!8035 = !{null, !2072, !5499}
!8036 = !DILocalVariable(name: "head", arg: 1, scope: !8033, file: !5479, line: 1018, type: !2072)
!8037 = !DILocation(line: 1018, column: 37, scope: !8033)
!8038 = !DILocalVariable(name: "imm", arg: 2, scope: !8033, file: !5479, line: 1018, type: !5499)
!8039 = !DILocation(line: 1018, column: 61, scope: !8033)
!8040 = !DILocalVariable(name: "use_p", scope: !8033, file: !5479, line: 1020, type: !2072)
!8041 = !DILocation(line: 1020, column: 17, scope: !8033)
!8042 = !DILocalVariable(name: "last_p", scope: !8033, file: !5479, line: 1021, type: !2072)
!8043 = !DILocation(line: 1021, column: 17, scope: !8033)
!8044 = !DILocation(line: 1021, column: 26, scope: !8033)
!8045 = !DILocalVariable(name: "head_stmt", scope: !8033, file: !5479, line: 1022, type: !1002)
!8046 = !DILocation(line: 1022, column: 10, scope: !8033)
!8047 = !DILocation(line: 1022, column: 22, scope: !8033)
!8048 = !DILocalVariable(name: "use", scope: !8033, file: !5479, line: 1023, type: !675)
!8049 = !DILocation(line: 1023, column: 8, scope: !8033)
!8050 = !DILocation(line: 1023, column: 14, scope: !8033)
!8051 = !DILocalVariable(name: "op_iter", scope: !8033, file: !5479, line: 1024, type: !6193)
!8052 = !DILocation(line: 1024, column: 15, scope: !8033)
!8053 = !DILocalVariable(name: "flag", scope: !8033, file: !5479, line: 1025, type: !644)
!8054 = !DILocation(line: 1025, column: 7, scope: !8033)
!8055 = !DILocation(line: 1028, column: 26, scope: !8033)
!8056 = !DILocation(line: 1028, column: 11, scope: !8033)
!8057 = !DILocation(line: 1028, column: 8, scope: !8033)
!8058 = !DILocation(line: 1030, column: 20, scope: !8059)
!8059 = distinct !DILexicalBlock(scope: !8033, file: !5479, line: 1030, column: 7)
!8060 = !DILocation(line: 1030, column: 7, scope: !8059)
!8061 = !DILocation(line: 1030, column: 31, scope: !8059)
!8062 = !DILocation(line: 1030, column: 7, scope: !8033)
!8063 = !DILocation(line: 1032, column: 7, scope: !8064)
!8064 = distinct !DILexicalBlock(scope: !8065, file: !5479, line: 1032, column: 7)
!8065 = distinct !DILexicalBlock(scope: !8059, file: !5479, line: 1031, column: 5)
!8066 = !DILocation(line: 1032, column: 7, scope: !8067)
!8067 = distinct !DILexicalBlock(scope: !8064, file: !5479, line: 1032, column: 7)
!8068 = !DILocation(line: 1033, column: 6, scope: !8069)
!8069 = distinct !DILexicalBlock(scope: !8067, file: !5479, line: 1033, column: 6)
!8070 = !DILocation(line: 1033, column: 30, scope: !8069)
!8071 = !DILocation(line: 1033, column: 27, scope: !8069)
!8072 = !DILocation(line: 1033, column: 6, scope: !8067)
!8073 = !DILocation(line: 1034, column: 34, scope: !8069)
!8074 = !DILocation(line: 1034, column: 41, scope: !8069)
!8075 = !DILocation(line: 1034, column: 47, scope: !8069)
!8076 = !DILocation(line: 1034, column: 13, scope: !8069)
!8077 = !DILocation(line: 1034, column: 11, scope: !8069)
!8078 = !DILocation(line: 1034, column: 4, scope: !8069)
!8079 = distinct !{!8079, !8063, !8080}
!8080 = !DILocation(line: 1034, column: 53, scope: !8064)
!8081 = !DILocation(line: 1035, column: 5, scope: !8065)
!8082 = !DILocation(line: 1038, column: 11, scope: !8083)
!8083 = distinct !DILexicalBlock(scope: !8084, file: !5479, line: 1038, column: 11)
!8084 = distinct !DILexicalBlock(scope: !8059, file: !5479, line: 1037, column: 5)
!8085 = !DILocation(line: 1038, column: 16, scope: !8083)
!8086 = !DILocation(line: 1038, column: 11, scope: !8084)
!8087 = !DILocation(line: 1040, column: 4, scope: !8088)
!8088 = distinct !DILexicalBlock(scope: !8089, file: !5479, line: 1040, column: 4)
!8089 = distinct !DILexicalBlock(scope: !8083, file: !5479, line: 1039, column: 2)
!8090 = !DILocation(line: 1040, column: 4, scope: !8091)
!8091 = distinct !DILexicalBlock(scope: !8088, file: !5479, line: 1040, column: 4)
!8092 = !DILocation(line: 1041, column: 10, scope: !8093)
!8093 = distinct !DILexicalBlock(scope: !8091, file: !5479, line: 1041, column: 10)
!8094 = !DILocation(line: 1041, column: 34, scope: !8093)
!8095 = !DILocation(line: 1041, column: 31, scope: !8093)
!8096 = !DILocation(line: 1041, column: 10, scope: !8091)
!8097 = !DILocation(line: 1042, column: 38, scope: !8093)
!8098 = !DILocation(line: 1042, column: 45, scope: !8093)
!8099 = !DILocation(line: 1042, column: 51, scope: !8093)
!8100 = !DILocation(line: 1042, column: 17, scope: !8093)
!8101 = !DILocation(line: 1042, column: 15, scope: !8093)
!8102 = !DILocation(line: 1042, column: 8, scope: !8093)
!8103 = distinct !{!8103, !8087, !8104}
!8104 = !DILocation(line: 1042, column: 57, scope: !8088)
!8105 = !DILocation(line: 1043, column: 2, scope: !8089)
!8106 = !DILocation(line: 1044, column: 41, scope: !8107)
!8107 = distinct !DILexicalBlock(scope: !8083, file: !5479, line: 1044, column: 16)
!8108 = !DILocation(line: 1044, column: 25, scope: !8107)
!8109 = !DILocation(line: 1044, column: 23, scope: !8107)
!8110 = !DILocation(line: 1044, column: 53, scope: !8107)
!8111 = !DILocation(line: 1044, column: 16, scope: !8083)
!8112 = !DILocation(line: 1046, column: 8, scope: !8113)
!8113 = distinct !DILexicalBlock(scope: !8114, file: !5479, line: 1046, column: 8)
!8114 = distinct !DILexicalBlock(scope: !8107, file: !5479, line: 1045, column: 2)
!8115 = !DILocation(line: 1046, column: 32, scope: !8113)
!8116 = !DILocation(line: 1046, column: 29, scope: !8113)
!8117 = !DILocation(line: 1046, column: 8, scope: !8114)
!8118 = !DILocation(line: 1047, column: 36, scope: !8113)
!8119 = !DILocation(line: 1047, column: 43, scope: !8113)
!8120 = !DILocation(line: 1047, column: 49, scope: !8113)
!8121 = !DILocation(line: 1047, column: 15, scope: !8113)
!8122 = !DILocation(line: 1047, column: 13, scope: !8113)
!8123 = !DILocation(line: 1047, column: 6, scope: !8113)
!8124 = !DILocation(line: 1048, column: 2, scope: !8114)
!8125 = !DILocation(line: 1051, column: 7, scope: !8126)
!8126 = distinct !DILexicalBlock(scope: !8033, file: !5479, line: 1051, column: 7)
!8127 = !DILocation(line: 1051, column: 12, scope: !8126)
!8128 = !DILocation(line: 1051, column: 22, scope: !8126)
!8129 = !DILocation(line: 1051, column: 27, scope: !8126)
!8130 = !DILocation(line: 1051, column: 7, scope: !8033)
!8131 = !DILocation(line: 1052, column: 22, scope: !8126)
!8132 = !DILocation(line: 1052, column: 27, scope: !8126)
!8133 = !DILocation(line: 1052, column: 5, scope: !8126)
!8134 = !DILocation(line: 1053, column: 27, scope: !8033)
!8135 = !DILocation(line: 1053, column: 32, scope: !8033)
!8136 = !DILocation(line: 1053, column: 44, scope: !8033)
!8137 = !DILocation(line: 1053, column: 3, scope: !8033)
!8138 = !DILocation(line: 1054, column: 1, scope: !8033)
!8139 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !5479, file: !5479, line: 910, type: !8140, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8140 = !DISubroutineType(types: !8141)
!8141 = !{!2072, !8142, !1002, !644}
!8142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6193, size: 64)
!8143 = !DILocalVariable(name: "ptr", arg: 1, scope: !8139, file: !5479, line: 910, type: !8142)
!8144 = !DILocation(line: 910, column: 35, scope: !8139)
!8145 = !DILocalVariable(name: "phi", arg: 2, scope: !8139, file: !5479, line: 910, type: !1002)
!8146 = !DILocation(line: 910, column: 47, scope: !8139)
!8147 = !DILocalVariable(name: "flags", arg: 3, scope: !8139, file: !5479, line: 910, type: !644)
!8148 = !DILocation(line: 910, column: 56, scope: !8139)
!8149 = !DILocalVariable(name: "phi_def", scope: !8139, file: !5479, line: 912, type: !675)
!8150 = !DILocation(line: 912, column: 8, scope: !8139)
!8151 = !DILocation(line: 912, column: 37, scope: !8139)
!8152 = !DILocation(line: 912, column: 18, scope: !8139)
!8153 = !DILocalVariable(name: "comp", scope: !8139, file: !5479, line: 913, type: !644)
!8154 = !DILocation(line: 913, column: 7, scope: !8139)
!8155 = !DILocation(line: 915, column: 28, scope: !8139)
!8156 = !DILocation(line: 915, column: 3, scope: !8139)
!8157 = !DILocation(line: 916, column: 3, scope: !8139)
!8158 = !DILocation(line: 916, column: 8, scope: !8139)
!8159 = !DILocation(line: 916, column: 13, scope: !8139)
!8160 = !DILocation(line: 918, column: 3, scope: !8139)
!8161 = !DILocation(line: 920, column: 26, scope: !8139)
!8162 = !DILocation(line: 920, column: 11, scope: !8139)
!8163 = !DILocation(line: 920, column: 8, scope: !8139)
!8164 = !DILocation(line: 923, column: 8, scope: !8165)
!8165 = distinct !DILexicalBlock(scope: !8139, file: !5479, line: 923, column: 7)
!8166 = !DILocation(line: 923, column: 16, scope: !8165)
!8167 = !DILocation(line: 923, column: 14, scope: !8165)
!8168 = !DILocation(line: 923, column: 22, scope: !8165)
!8169 = !DILocation(line: 923, column: 7, scope: !8139)
!8170 = !DILocation(line: 925, column: 7, scope: !8171)
!8171 = distinct !DILexicalBlock(scope: !8165, file: !5479, line: 924, column: 5)
!8172 = !DILocation(line: 925, column: 12, scope: !8171)
!8173 = !DILocation(line: 925, column: 17, scope: !8171)
!8174 = !DILocation(line: 926, column: 7, scope: !8171)
!8175 = !DILocation(line: 929, column: 19, scope: !8139)
!8176 = !DILocation(line: 929, column: 3, scope: !8139)
!8177 = !DILocation(line: 929, column: 8, scope: !8139)
!8178 = !DILocation(line: 929, column: 17, scope: !8139)
!8179 = !DILocation(line: 930, column: 39, scope: !8139)
!8180 = !DILocation(line: 930, column: 18, scope: !8139)
!8181 = !DILocation(line: 930, column: 3, scope: !8139)
!8182 = !DILocation(line: 930, column: 8, scope: !8139)
!8183 = !DILocation(line: 930, column: 16, scope: !8139)
!8184 = !DILocation(line: 931, column: 3, scope: !8139)
!8185 = !DILocation(line: 931, column: 8, scope: !8139)
!8186 = !DILocation(line: 931, column: 18, scope: !8139)
!8187 = !DILocation(line: 932, column: 28, scope: !8139)
!8188 = !DILocation(line: 932, column: 10, scope: !8139)
!8189 = !DILocation(line: 932, column: 3, scope: !8139)
!8190 = !DILocation(line: 933, column: 1, scope: !8139)
!8191 = distinct !DISubprogram(name: "op_iter_done", scope: !5479, file: !5479, line: 652, type: !8192, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8192 = !DISubroutineType(types: !8193)
!8193 = !{!793, !8194}
!8194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8195, size: 64)
!8195 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6193)
!8196 = !DILocalVariable(name: "ptr", arg: 1, scope: !8191, file: !5479, line: 652, type: !8194)
!8197 = !DILocation(line: 652, column: 34, scope: !8191)
!8198 = !DILocation(line: 654, column: 10, scope: !8191)
!8199 = !DILocation(line: 654, column: 15, scope: !8191)
!8200 = !DILocation(line: 654, column: 3, scope: !8191)
!8201 = distinct !DISubprogram(name: "move_use_after_head", scope: !5479, file: !5479, line: 990, type: !8202, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8202 = !DISubroutineType(types: !8203)
!8203 = !{!2072, !2072, !2072, !2072}
!8204 = !DILocalVariable(name: "use_p", arg: 1, scope: !8201, file: !5479, line: 990, type: !2072)
!8205 = !DILocation(line: 990, column: 36, scope: !8201)
!8206 = !DILocalVariable(name: "head", arg: 2, scope: !8201, file: !5479, line: 990, type: !2072)
!8207 = !DILocation(line: 990, column: 57, scope: !8201)
!8208 = !DILocalVariable(name: "last_p", arg: 3, scope: !8201, file: !5479, line: 991, type: !2072)
!8209 = !DILocation(line: 991, column: 23, scope: !8201)
!8210 = !DILocation(line: 997, column: 7, scope: !8211)
!8211 = distinct !DILexicalBlock(scope: !8201, file: !5479, line: 997, column: 7)
!8212 = !DILocation(line: 997, column: 16, scope: !8211)
!8213 = !DILocation(line: 997, column: 13, scope: !8211)
!8214 = !DILocation(line: 997, column: 7, scope: !8201)
!8215 = !DILocation(line: 1000, column: 11, scope: !8216)
!8216 = distinct !DILexicalBlock(scope: !8217, file: !5479, line: 1000, column: 11)
!8217 = distinct !DILexicalBlock(scope: !8211, file: !5479, line: 998, column: 5)
!8218 = !DILocation(line: 1000, column: 19, scope: !8216)
!8219 = !DILocation(line: 1000, column: 27, scope: !8216)
!8220 = !DILocation(line: 1000, column: 24, scope: !8216)
!8221 = !DILocation(line: 1000, column: 11, scope: !8217)
!8222 = !DILocation(line: 1001, column: 11, scope: !8216)
!8223 = !DILocation(line: 1001, column: 9, scope: !8216)
!8224 = !DILocation(line: 1001, column: 2, scope: !8216)
!8225 = !DILocation(line: 1005, column: 20, scope: !8226)
!8226 = distinct !DILexicalBlock(scope: !8216, file: !5479, line: 1003, column: 2)
!8227 = !DILocation(line: 1005, column: 4, scope: !8226)
!8228 = !DILocation(line: 1006, column: 26, scope: !8226)
!8229 = !DILocation(line: 1006, column: 33, scope: !8226)
!8230 = !DILocation(line: 1006, column: 4, scope: !8226)
!8231 = !DILocation(line: 1007, column: 13, scope: !8226)
!8232 = !DILocation(line: 1007, column: 11, scope: !8226)
!8233 = !DILocation(line: 1009, column: 5, scope: !8217)
!8234 = !DILocation(line: 1010, column: 10, scope: !8201)
!8235 = !DILocation(line: 1010, column: 3, scope: !8201)
!8236 = distinct !DISubprogram(name: "op_iter_next_use", scope: !5479, file: !5479, line: 659, type: !8237, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8237 = !DISubroutineType(types: !8238)
!8238 = !{!2072, !8142}
!8239 = !DILocalVariable(name: "ptr", arg: 1, scope: !8236, file: !5479, line: 659, type: !8142)
!8240 = !DILocation(line: 659, column: 32, scope: !8236)
!8241 = !DILocalVariable(name: "use_p", scope: !8236, file: !5479, line: 661, type: !2072)
!8242 = !DILocation(line: 661, column: 17, scope: !8236)
!8243 = !DILocation(line: 665, column: 7, scope: !8244)
!8244 = distinct !DILexicalBlock(scope: !8236, file: !5479, line: 665, column: 7)
!8245 = !DILocation(line: 665, column: 12, scope: !8244)
!8246 = !DILocation(line: 665, column: 7, scope: !8236)
!8247 = !DILocation(line: 667, column: 15, scope: !8248)
!8248 = distinct !DILexicalBlock(scope: !8244, file: !5479, line: 666, column: 5)
!8249 = !DILocation(line: 667, column: 13, scope: !8248)
!8250 = !DILocation(line: 668, column: 19, scope: !8248)
!8251 = !DILocation(line: 668, column: 24, scope: !8248)
!8252 = !DILocation(line: 668, column: 30, scope: !8248)
!8253 = !DILocation(line: 668, column: 7, scope: !8248)
!8254 = !DILocation(line: 668, column: 12, scope: !8248)
!8255 = !DILocation(line: 668, column: 17, scope: !8248)
!8256 = !DILocation(line: 669, column: 14, scope: !8248)
!8257 = !DILocation(line: 669, column: 7, scope: !8248)
!8258 = !DILocation(line: 671, column: 7, scope: !8259)
!8259 = distinct !DILexicalBlock(scope: !8236, file: !5479, line: 671, column: 7)
!8260 = !DILocation(line: 671, column: 12, scope: !8259)
!8261 = !DILocation(line: 671, column: 20, scope: !8259)
!8262 = !DILocation(line: 671, column: 25, scope: !8259)
!8263 = !DILocation(line: 671, column: 18, scope: !8259)
!8264 = !DILocation(line: 671, column: 7, scope: !8236)
!8265 = !DILocation(line: 673, column: 14, scope: !8266)
!8266 = distinct !DILexicalBlock(scope: !8259, file: !5479, line: 672, column: 5)
!8267 = !DILocation(line: 673, column: 7, scope: !8266)
!8268 = !DILocation(line: 675, column: 3, scope: !8236)
!8269 = !DILocation(line: 675, column: 8, scope: !8236)
!8270 = !DILocation(line: 675, column: 13, scope: !8236)
!8271 = !DILocation(line: 676, column: 3, scope: !8236)
!8272 = !DILocation(line: 677, column: 1, scope: !8236)
!8273 = distinct !DISubprogram(name: "op_iter_init_use", scope: !5479, file: !5479, line: 768, type: !8140, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8274 = !DILocalVariable(name: "ptr", arg: 1, scope: !8273, file: !5479, line: 768, type: !8142)
!8275 = !DILocation(line: 768, column: 32, scope: !8273)
!8276 = !DILocalVariable(name: "stmt", arg: 2, scope: !8273, file: !5479, line: 768, type: !1002)
!8277 = !DILocation(line: 768, column: 44, scope: !8273)
!8278 = !DILocalVariable(name: "flags", arg: 3, scope: !8273, file: !5479, line: 768, type: !644)
!8279 = !DILocation(line: 768, column: 54, scope: !8273)
!8280 = !DILocation(line: 770, column: 3, scope: !8273)
!8281 = !DILocation(line: 772, column: 17, scope: !8273)
!8282 = !DILocation(line: 772, column: 22, scope: !8273)
!8283 = !DILocation(line: 772, column: 28, scope: !8273)
!8284 = !DILocation(line: 772, column: 3, scope: !8273)
!8285 = !DILocation(line: 773, column: 3, scope: !8273)
!8286 = !DILocation(line: 773, column: 8, scope: !8273)
!8287 = !DILocation(line: 773, column: 18, scope: !8273)
!8288 = !DILocation(line: 774, column: 28, scope: !8273)
!8289 = !DILocation(line: 774, column: 10, scope: !8273)
!8290 = !DILocation(line: 774, column: 3, scope: !8273)
!8291 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !389, file: !389, line: 1334, type: !8292, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8292 = !DISubroutineType(types: !8293)
!8293 = !{!2072, !4203}
!8294 = !DILocalVariable(name: "g", arg: 1, scope: !8291, file: !389, line: 1334, type: !4203)
!8295 = !DILocation(line: 1334, column: 30, scope: !8291)
!8296 = !DILocalVariable(name: "ops", scope: !8291, file: !389, line: 1336, type: !1038)
!8297 = !DILocation(line: 1336, column: 24, scope: !8291)
!8298 = !DILocation(line: 1337, column: 28, scope: !8299)
!8299 = distinct !DILexicalBlock(scope: !8291, file: !389, line: 1337, column: 7)
!8300 = !DILocation(line: 1337, column: 8, scope: !8299)
!8301 = !DILocation(line: 1337, column: 7, scope: !8291)
!8302 = !DILocation(line: 1338, column: 5, scope: !8299)
!8303 = !DILocation(line: 1339, column: 9, scope: !8291)
!8304 = !DILocation(line: 1339, column: 12, scope: !8291)
!8305 = !DILocation(line: 1339, column: 18, scope: !8291)
!8306 = !DILocation(line: 1339, column: 25, scope: !8291)
!8307 = !DILocation(line: 1339, column: 7, scope: !8291)
!8308 = !DILocation(line: 1340, column: 7, scope: !8309)
!8309 = distinct !DILexicalBlock(scope: !8291, file: !389, line: 1340, column: 7)
!8310 = !DILocation(line: 1341, column: 7, scope: !8309)
!8311 = !DILocation(line: 1341, column: 10, scope: !8309)
!8312 = !DILocation(line: 1341, column: 28, scope: !8309)
!8313 = !DILocation(line: 1341, column: 36, scope: !8309)
!8314 = !DILocation(line: 1341, column: 39, scope: !8309)
!8315 = !DILocation(line: 1341, column: 49, scope: !8309)
!8316 = !DILocation(line: 1341, column: 32, scope: !8309)
!8317 = !DILocation(line: 1340, column: 7, scope: !8291)
!8318 = !DILocation(line: 1342, column: 12, scope: !8309)
!8319 = !DILocation(line: 1342, column: 5, scope: !8309)
!8320 = !DILocation(line: 1343, column: 3, scope: !8291)
!8321 = !DILocation(line: 1344, column: 1, scope: !8291)
!8322 = distinct !DISubprogram(name: "delink_imm_use", scope: !5479, file: !5479, line: 188, type: !8323, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8323 = !DISubroutineType(types: !8324)
!8324 = !{null, !2073}
!8325 = !DILocalVariable(name: "linknode", arg: 1, scope: !8322, file: !5479, line: 188, type: !2073)
!8326 = !DILocation(line: 188, column: 36, scope: !8322)
!8327 = !DILocation(line: 191, column: 7, scope: !8328)
!8328 = distinct !DILexicalBlock(scope: !8322, file: !5479, line: 191, column: 7)
!8329 = !DILocation(line: 191, column: 17, scope: !8328)
!8330 = !DILocation(line: 191, column: 22, scope: !8328)
!8331 = !DILocation(line: 191, column: 7, scope: !8322)
!8332 = !DILocation(line: 192, column: 5, scope: !8328)
!8333 = !DILocation(line: 194, column: 26, scope: !8322)
!8334 = !DILocation(line: 194, column: 36, scope: !8322)
!8335 = !DILocation(line: 194, column: 3, scope: !8322)
!8336 = !DILocation(line: 194, column: 13, scope: !8322)
!8337 = !DILocation(line: 194, column: 19, scope: !8322)
!8338 = !DILocation(line: 194, column: 24, scope: !8322)
!8339 = !DILocation(line: 195, column: 26, scope: !8322)
!8340 = !DILocation(line: 195, column: 36, scope: !8322)
!8341 = !DILocation(line: 195, column: 3, scope: !8322)
!8342 = !DILocation(line: 195, column: 13, scope: !8322)
!8343 = !DILocation(line: 195, column: 19, scope: !8322)
!8344 = !DILocation(line: 195, column: 24, scope: !8322)
!8345 = !DILocation(line: 196, column: 3, scope: !8322)
!8346 = !DILocation(line: 196, column: 13, scope: !8322)
!8347 = !DILocation(line: 196, column: 18, scope: !8322)
!8348 = !DILocation(line: 197, column: 3, scope: !8322)
!8349 = !DILocation(line: 197, column: 13, scope: !8322)
!8350 = !DILocation(line: 197, column: 18, scope: !8322)
!8351 = !DILocation(line: 198, column: 1, scope: !8322)
!8352 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !5479, file: !5479, line: 202, type: !8353, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8353 = !DISubroutineType(types: !8354)
!8354 = !{null, !2073, !2073}
!8355 = !DILocalVariable(name: "linknode", arg: 1, scope: !8352, file: !5479, line: 202, type: !2073)
!8356 = !DILocation(line: 202, column: 42, scope: !8352)
!8357 = !DILocalVariable(name: "list", arg: 2, scope: !8352, file: !5479, line: 202, type: !2073)
!8358 = !DILocation(line: 202, column: 71, scope: !8352)
!8359 = !DILocation(line: 206, column: 20, scope: !8352)
!8360 = !DILocation(line: 206, column: 3, scope: !8352)
!8361 = !DILocation(line: 206, column: 13, scope: !8352)
!8362 = !DILocation(line: 206, column: 18, scope: !8352)
!8363 = !DILocation(line: 207, column: 20, scope: !8352)
!8364 = !DILocation(line: 207, column: 26, scope: !8352)
!8365 = !DILocation(line: 207, column: 3, scope: !8352)
!8366 = !DILocation(line: 207, column: 13, scope: !8352)
!8367 = !DILocation(line: 207, column: 18, scope: !8352)
!8368 = !DILocation(line: 208, column: 22, scope: !8352)
!8369 = !DILocation(line: 208, column: 3, scope: !8352)
!8370 = !DILocation(line: 208, column: 9, scope: !8352)
!8371 = !DILocation(line: 208, column: 15, scope: !8352)
!8372 = !DILocation(line: 208, column: 20, scope: !8352)
!8373 = !DILocation(line: 209, column: 16, scope: !8352)
!8374 = !DILocation(line: 209, column: 3, scope: !8352)
!8375 = !DILocation(line: 209, column: 9, scope: !8352)
!8376 = !DILocation(line: 209, column: 14, scope: !8352)
!8377 = !DILocation(line: 210, column: 1, scope: !8352)
!8378 = distinct !DISubprogram(name: "gimple_phi_result", scope: !389, file: !389, line: 3071, type: !4211, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8379 = !DILocalVariable(name: "gs", arg: 1, scope: !8378, file: !389, line: 3071, type: !4203)
!8380 = !DILocation(line: 3071, column: 33, scope: !8378)
!8381 = !DILocation(line: 3074, column: 10, scope: !8378)
!8382 = !DILocation(line: 3074, column: 14, scope: !8378)
!8383 = !DILocation(line: 3074, column: 25, scope: !8378)
!8384 = !DILocation(line: 3074, column: 3, scope: !8378)
!8385 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !5479, file: !5479, line: 729, type: !8386, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8386 = !DISubroutineType(types: !8387)
!8387 = !{null, !8142}
!8388 = !DILocalVariable(name: "ptr", arg: 1, scope: !8385, file: !5479, line: 729, type: !8142)
!8389 = !DILocation(line: 729, column: 39, scope: !8385)
!8390 = !DILocation(line: 731, column: 3, scope: !8385)
!8391 = !DILocation(line: 731, column: 8, scope: !8385)
!8392 = !DILocation(line: 731, column: 13, scope: !8385)
!8393 = !DILocation(line: 732, column: 3, scope: !8385)
!8394 = !DILocation(line: 732, column: 8, scope: !8385)
!8395 = !DILocation(line: 732, column: 13, scope: !8385)
!8396 = !DILocation(line: 733, column: 3, scope: !8385)
!8397 = !DILocation(line: 733, column: 8, scope: !8385)
!8398 = !DILocation(line: 733, column: 18, scope: !8385)
!8399 = !DILocation(line: 734, column: 3, scope: !8385)
!8400 = !DILocation(line: 734, column: 8, scope: !8385)
!8401 = !DILocation(line: 734, column: 14, scope: !8385)
!8402 = !DILocation(line: 735, column: 3, scope: !8385)
!8403 = !DILocation(line: 735, column: 8, scope: !8385)
!8404 = !DILocation(line: 735, column: 16, scope: !8385)
!8405 = !DILocation(line: 736, column: 3, scope: !8385)
!8406 = !DILocation(line: 736, column: 8, scope: !8385)
!8407 = !DILocation(line: 736, column: 17, scope: !8385)
!8408 = !DILocation(line: 737, column: 3, scope: !8385)
!8409 = !DILocation(line: 737, column: 8, scope: !8385)
!8410 = !DILocation(line: 737, column: 13, scope: !8385)
!8411 = !DILocation(line: 738, column: 1, scope: !8385)
!8412 = distinct !DISubprogram(name: "op_iter_init", scope: !5479, file: !5479, line: 742, type: !8413, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8413 = !DISubroutineType(types: !8414)
!8414 = !{null, !8142, !1002, !644}
!8415 = !DILocalVariable(name: "ptr", arg: 1, scope: !8412, file: !5479, line: 742, type: !8142)
!8416 = !DILocation(line: 742, column: 28, scope: !8412)
!8417 = !DILocalVariable(name: "stmt", arg: 2, scope: !8412, file: !5479, line: 742, type: !1002)
!8418 = !DILocation(line: 742, column: 40, scope: !8412)
!8419 = !DILocalVariable(name: "flags", arg: 3, scope: !8412, file: !5479, line: 742, type: !644)
!8420 = !DILocation(line: 742, column: 50, scope: !8412)
!8421 = !DILocation(line: 746, column: 3, scope: !8412)
!8422 = !DILocation(line: 748, column: 16, scope: !8412)
!8423 = !DILocation(line: 748, column: 22, scope: !8412)
!8424 = !DILocation(line: 748, column: 15, scope: !8412)
!8425 = !DILocation(line: 748, column: 68, scope: !8412)
!8426 = !DILocation(line: 748, column: 52, scope: !8412)
!8427 = !DILocation(line: 748, column: 3, scope: !8412)
!8428 = !DILocation(line: 748, column: 8, scope: !8412)
!8429 = !DILocation(line: 748, column: 13, scope: !8412)
!8430 = !DILocation(line: 749, column: 9, scope: !8431)
!8431 = distinct !DILexicalBlock(scope: !8412, file: !5479, line: 749, column: 7)
!8432 = !DILocation(line: 749, column: 15, scope: !8431)
!8433 = !DILocation(line: 750, column: 7, scope: !8431)
!8434 = !DILocation(line: 750, column: 10, scope: !8431)
!8435 = !DILocation(line: 750, column: 15, scope: !8431)
!8436 = !DILocation(line: 751, column: 7, scope: !8431)
!8437 = !DILocation(line: 751, column: 23, scope: !8431)
!8438 = !DILocation(line: 751, column: 10, scope: !8431)
!8439 = !DILocation(line: 751, column: 29, scope: !8431)
!8440 = !DILocation(line: 749, column: 7, scope: !8412)
!8441 = !DILocation(line: 752, column: 17, scope: !8431)
!8442 = !DILocation(line: 752, column: 22, scope: !8431)
!8443 = !DILocation(line: 752, column: 28, scope: !8431)
!8444 = !DILocation(line: 752, column: 5, scope: !8431)
!8445 = !DILocation(line: 752, column: 10, scope: !8431)
!8446 = !DILocation(line: 752, column: 15, scope: !8431)
!8447 = !DILocation(line: 753, column: 16, scope: !8412)
!8448 = !DILocation(line: 753, column: 22, scope: !8412)
!8449 = !DILocation(line: 753, column: 15, scope: !8412)
!8450 = !DILocation(line: 753, column: 68, scope: !8412)
!8451 = !DILocation(line: 753, column: 52, scope: !8412)
!8452 = !DILocation(line: 753, column: 3, scope: !8412)
!8453 = !DILocation(line: 753, column: 8, scope: !8412)
!8454 = !DILocation(line: 753, column: 13, scope: !8412)
!8455 = !DILocation(line: 754, column: 9, scope: !8456)
!8456 = distinct !DILexicalBlock(scope: !8412, file: !5479, line: 754, column: 7)
!8457 = !DILocation(line: 754, column: 15, scope: !8456)
!8458 = !DILocation(line: 755, column: 7, scope: !8456)
!8459 = !DILocation(line: 755, column: 10, scope: !8456)
!8460 = !DILocation(line: 755, column: 15, scope: !8456)
!8461 = !DILocation(line: 756, column: 7, scope: !8456)
!8462 = !DILocation(line: 756, column: 23, scope: !8456)
!8463 = !DILocation(line: 756, column: 10, scope: !8456)
!8464 = !DILocation(line: 756, column: 29, scope: !8456)
!8465 = !DILocation(line: 754, column: 7, scope: !8412)
!8466 = !DILocation(line: 757, column: 17, scope: !8456)
!8467 = !DILocation(line: 757, column: 22, scope: !8456)
!8468 = !DILocation(line: 757, column: 28, scope: !8456)
!8469 = !DILocation(line: 757, column: 5, scope: !8456)
!8470 = !DILocation(line: 757, column: 10, scope: !8456)
!8471 = !DILocation(line: 757, column: 15, scope: !8456)
!8472 = !DILocation(line: 758, column: 3, scope: !8412)
!8473 = !DILocation(line: 758, column: 8, scope: !8412)
!8474 = !DILocation(line: 758, column: 13, scope: !8412)
!8475 = !DILocation(line: 760, column: 3, scope: !8412)
!8476 = !DILocation(line: 760, column: 8, scope: !8412)
!8477 = !DILocation(line: 760, column: 14, scope: !8412)
!8478 = !DILocation(line: 761, column: 3, scope: !8412)
!8479 = !DILocation(line: 761, column: 8, scope: !8412)
!8480 = !DILocation(line: 761, column: 16, scope: !8412)
!8481 = !DILocation(line: 762, column: 3, scope: !8412)
!8482 = !DILocation(line: 762, column: 8, scope: !8412)
!8483 = !DILocation(line: 762, column: 17, scope: !8412)
!8484 = !DILocation(line: 763, column: 1, scope: !8412)
!8485 = distinct !DISubprogram(name: "gimple_def_ops", scope: !389, file: !389, line: 1292, type: !8486, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8486 = !DISubroutineType(types: !8487)
!8487 = !{!1031, !4203}
!8488 = !DILocalVariable(name: "g", arg: 1, scope: !8485, file: !389, line: 1292, type: !4203)
!8489 = !DILocation(line: 1292, column: 30, scope: !8485)
!8490 = !DILocation(line: 1294, column: 24, scope: !8491)
!8491 = distinct !DILexicalBlock(scope: !8485, file: !389, line: 1294, column: 7)
!8492 = !DILocation(line: 1294, column: 8, scope: !8491)
!8493 = !DILocation(line: 1294, column: 7, scope: !8485)
!8494 = !DILocation(line: 1295, column: 5, scope: !8491)
!8495 = !DILocation(line: 1296, column: 10, scope: !8485)
!8496 = !DILocation(line: 1296, column: 13, scope: !8485)
!8497 = !DILocation(line: 1296, column: 19, scope: !8485)
!8498 = !DILocation(line: 1296, column: 26, scope: !8485)
!8499 = !DILocation(line: 1296, column: 3, scope: !8485)
!8500 = !DILocation(line: 1297, column: 1, scope: !8485)
!8501 = distinct !DISubprogram(name: "gimple_vdef", scope: !389, file: !389, line: 1375, type: !4211, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8502 = !DILocalVariable(name: "g", arg: 1, scope: !8501, file: !389, line: 1375, type: !4203)
!8503 = !DILocation(line: 1375, column: 27, scope: !8501)
!8504 = !DILocation(line: 1377, column: 28, scope: !8505)
!8505 = distinct !DILexicalBlock(scope: !8501, file: !389, line: 1377, column: 7)
!8506 = !DILocation(line: 1377, column: 8, scope: !8505)
!8507 = !DILocation(line: 1377, column: 7, scope: !8501)
!8508 = !DILocation(line: 1378, column: 5, scope: !8505)
!8509 = !DILocation(line: 1379, column: 10, scope: !8501)
!8510 = !DILocation(line: 1379, column: 13, scope: !8501)
!8511 = !DILocation(line: 1379, column: 23, scope: !8501)
!8512 = !DILocation(line: 1379, column: 3, scope: !8501)
!8513 = !DILocation(line: 1380, column: 1, scope: !8501)
!8514 = distinct !DISubprogram(name: "gimple_use_ops", scope: !389, file: !389, line: 1313, type: !8515, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8515 = !DISubroutineType(types: !8516)
!8516 = !{!1038, !4203}
!8517 = !DILocalVariable(name: "g", arg: 1, scope: !8514, file: !389, line: 1313, type: !4203)
!8518 = !DILocation(line: 1313, column: 30, scope: !8514)
!8519 = !DILocation(line: 1315, column: 24, scope: !8520)
!8520 = distinct !DILexicalBlock(scope: !8514, file: !389, line: 1315, column: 7)
!8521 = !DILocation(line: 1315, column: 8, scope: !8520)
!8522 = !DILocation(line: 1315, column: 7, scope: !8514)
!8523 = !DILocation(line: 1316, column: 5, scope: !8520)
!8524 = !DILocation(line: 1317, column: 10, scope: !8514)
!8525 = !DILocation(line: 1317, column: 13, scope: !8514)
!8526 = !DILocation(line: 1317, column: 19, scope: !8514)
!8527 = !DILocation(line: 1317, column: 26, scope: !8514)
!8528 = !DILocation(line: 1317, column: 3, scope: !8514)
!8529 = !DILocation(line: 1318, column: 1, scope: !8514)
!8530 = distinct !DISubprogram(name: "gimple_vuse", scope: !389, file: !389, line: 1365, type: !4211, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8531 = !DILocalVariable(name: "g", arg: 1, scope: !8530, file: !389, line: 1365, type: !4203)
!8532 = !DILocation(line: 1365, column: 27, scope: !8530)
!8533 = !DILocation(line: 1367, column: 28, scope: !8534)
!8534 = distinct !DILexicalBlock(scope: !8530, file: !389, line: 1367, column: 7)
!8535 = !DILocation(line: 1367, column: 8, scope: !8534)
!8536 = !DILocation(line: 1367, column: 7, scope: !8530)
!8537 = !DILocation(line: 1368, column: 5, scope: !8534)
!8538 = !DILocation(line: 1369, column: 10, scope: !8530)
!8539 = !DILocation(line: 1369, column: 13, scope: !8530)
!8540 = !DILocation(line: 1369, column: 23, scope: !8530)
!8541 = !DILocation(line: 1369, column: 3, scope: !8530)
!8542 = !DILocation(line: 1370, column: 1, scope: !8530)
!8543 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !389, file: !389, line: 1283, type: !5561, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8544 = !DILocalVariable(name: "g", arg: 1, scope: !8543, file: !389, line: 1283, type: !4203)
!8545 = !DILocation(line: 1283, column: 34, scope: !8543)
!8546 = !DILocation(line: 1285, column: 23, scope: !8543)
!8547 = !DILocation(line: 1285, column: 10, scope: !8543)
!8548 = !DILocation(line: 1285, column: 26, scope: !8543)
!8549 = !DILocation(line: 1285, column: 43, scope: !8543)
!8550 = !DILocation(line: 1285, column: 59, scope: !8543)
!8551 = !DILocation(line: 1285, column: 46, scope: !8543)
!8552 = !DILocation(line: 1285, column: 62, scope: !8543)
!8553 = !DILocation(line: 0, scope: !8543)
!8554 = !DILocation(line: 1285, column: 3, scope: !8543)
!8555 = distinct !DISubprogram(name: "build_linear_expr", scope: !637, file: !637, line: 486, type: !8556, scopeLine: 487, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8556 = !DISubroutineType(types: !8557)
!8557 = !{!675, !675, !642, !2042}
!8558 = !DILocalVariable(name: "type", arg: 1, scope: !8555, file: !637, line: 486, type: !675)
!8559 = !DILocation(line: 486, column: 25, scope: !8555)
!8560 = !DILocalVariable(name: "coefs", arg: 2, scope: !8555, file: !637, line: 486, type: !642)
!8561 = !DILocation(line: 486, column: 45, scope: !8555)
!8562 = !DILocalVariable(name: "ivs", arg: 3, scope: !8555, file: !637, line: 486, type: !2042)
!8563 = !DILocation(line: 486, column: 70, scope: !8555)
!8564 = !DILocalVariable(name: "i", scope: !8555, file: !637, line: 488, type: !5)
!8565 = !DILocation(line: 488, column: 12, scope: !8555)
!8566 = !DILocalVariable(name: "iv", scope: !8555, file: !637, line: 489, type: !675)
!8567 = !DILocation(line: 489, column: 8, scope: !8555)
!8568 = !DILocalVariable(name: "expr", scope: !8555, file: !637, line: 490, type: !675)
!8569 = !DILocation(line: 490, column: 8, scope: !8555)
!8570 = !DILocation(line: 490, column: 15, scope: !8555)
!8571 = !DILocation(line: 492, column: 10, scope: !8572)
!8572 = distinct !DILexicalBlock(scope: !8555, file: !637, line: 492, column: 3)
!8573 = !DILocation(line: 492, column: 8, scope: !8572)
!8574 = !DILocation(line: 492, column: 15, scope: !8575)
!8575 = distinct !DILexicalBlock(scope: !8572, file: !637, line: 492, column: 3)
!8576 = !DILocation(line: 492, column: 3, scope: !8572)
!8577 = !DILocalVariable(name: "k", scope: !8578, file: !637, line: 494, type: !644)
!8578 = distinct !DILexicalBlock(scope: !8575, file: !637, line: 493, column: 5)
!8579 = !DILocation(line: 494, column: 11, scope: !8578)
!8580 = !DILocation(line: 494, column: 15, scope: !8578)
!8581 = !DILocation(line: 494, column: 21, scope: !8578)
!8582 = !DILocation(line: 496, column: 11, scope: !8583)
!8583 = distinct !DILexicalBlock(scope: !8578, file: !637, line: 496, column: 11)
!8584 = !DILocation(line: 496, column: 13, scope: !8583)
!8585 = !DILocation(line: 496, column: 11, scope: !8578)
!8586 = !DILocation(line: 497, column: 9, scope: !8583)
!8587 = !DILocation(line: 497, column: 7, scope: !8583)
!8588 = !DILocation(line: 497, column: 2, scope: !8583)
!8589 = !DILocation(line: 499, column: 16, scope: !8590)
!8590 = distinct !DILexicalBlock(scope: !8583, file: !637, line: 499, column: 16)
!8591 = !DILocation(line: 499, column: 18, scope: !8590)
!8592 = !DILocation(line: 499, column: 16, scope: !8583)
!8593 = !DILocation(line: 500, column: 9, scope: !8590)
!8594 = !DILocation(line: 500, column: 7, scope: !8590)
!8595 = !DILocation(line: 500, column: 2, scope: !8590)
!8596 = !DILocation(line: 503, column: 5, scope: !8578)
!8597 = !DILocation(line: 492, column: 48, scope: !8575)
!8598 = !DILocation(line: 492, column: 3, scope: !8575)
!8599 = distinct !{!8599, !8576, !8600}
!8600 = !DILocation(line: 503, column: 5, scope: !8572)
!8601 = !DILocation(line: 505, column: 10, scope: !8555)
!8602 = !DILocation(line: 505, column: 3, scope: !8555)
!8603 = distinct !DISubprogram(name: "gimple_set_op", scope: !389, file: !389, line: 1663, type: !8604, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8604 = !DISubroutineType(types: !8605)
!8605 = !{null, !1002, !5, !675}
!8606 = !DILocalVariable(name: "gs", arg: 1, scope: !8603, file: !389, line: 1663, type: !1002)
!8607 = !DILocation(line: 1663, column: 23, scope: !8603)
!8608 = !DILocalVariable(name: "i", arg: 2, scope: !8603, file: !389, line: 1663, type: !5)
!8609 = !DILocation(line: 1663, column: 36, scope: !8603)
!8610 = !DILocalVariable(name: "op", arg: 3, scope: !8603, file: !389, line: 1663, type: !675)
!8611 = !DILocation(line: 1663, column: 44, scope: !8603)
!8612 = !DILocation(line: 1665, column: 3, scope: !8603)
!8613 = !DILocation(line: 1671, column: 24, scope: !8603)
!8614 = !DILocation(line: 1671, column: 15, scope: !8603)
!8615 = !DILocation(line: 1671, column: 3, scope: !8603)
!8616 = !DILocation(line: 1671, column: 19, scope: !8603)
!8617 = !DILocation(line: 1671, column: 22, scope: !8603)
!8618 = !DILocation(line: 1672, column: 1, scope: !8603)
!8619 = distinct !DISubprogram(name: "gimple_num_ops", scope: !389, file: !389, line: 1596, type: !5470, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8620 = !DILocalVariable(name: "gs", arg: 1, scope: !8619, file: !389, line: 1596, type: !4203)
!8621 = !DILocation(line: 1596, column: 30, scope: !8619)
!8622 = !DILocation(line: 1598, column: 10, scope: !8619)
!8623 = !DILocation(line: 1598, column: 14, scope: !8619)
!8624 = !DILocation(line: 1598, column: 21, scope: !8619)
!8625 = !DILocation(line: 1598, column: 3, scope: !8619)
!8626 = distinct !DISubprogram(name: "gimple_cond_set_code", scope: !389, file: !389, line: 2231, type: !8627, scopeLine: 2232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8627 = !DISubroutineType(types: !8628)
!8628 = !{null, !1002, !132}
!8629 = !DILocalVariable(name: "gs", arg: 1, scope: !8626, file: !389, line: 2231, type: !1002)
!8630 = !DILocation(line: 2231, column: 30, scope: !8626)
!8631 = !DILocalVariable(name: "code", arg: 2, scope: !8626, file: !389, line: 2231, type: !132)
!8632 = !DILocation(line: 2231, column: 49, scope: !8626)
!8633 = !DILocation(line: 2234, column: 24, scope: !8626)
!8634 = !DILocation(line: 2234, column: 3, scope: !8626)
!8635 = !DILocation(line: 2234, column: 7, scope: !8626)
!8636 = !DILocation(line: 2234, column: 14, scope: !8626)
!8637 = !DILocation(line: 2234, column: 22, scope: !8626)
!8638 = !DILocation(line: 2235, column: 1, scope: !8626)
!8639 = distinct !DISubprogram(name: "gimple_cond_set_lhs", scope: !389, file: !389, line: 2261, type: !6089, scopeLine: 2262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8640 = !DILocalVariable(name: "gs", arg: 1, scope: !8639, file: !389, line: 2261, type: !1002)
!8641 = !DILocation(line: 2261, column: 29, scope: !8639)
!8642 = !DILocalVariable(name: "lhs", arg: 2, scope: !8639, file: !389, line: 2261, type: !675)
!8643 = !DILocation(line: 2261, column: 38, scope: !8639)
!8644 = !DILocation(line: 2264, column: 18, scope: !8639)
!8645 = !DILocation(line: 2264, column: 25, scope: !8639)
!8646 = !DILocation(line: 2264, column: 3, scope: !8639)
!8647 = !DILocation(line: 2265, column: 1, scope: !8639)
!8648 = distinct !DISubprogram(name: "gimple_cond_set_rhs", scope: !389, file: !389, line: 2292, type: !6089, scopeLine: 2293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8649 = !DILocalVariable(name: "gs", arg: 1, scope: !8648, file: !389, line: 2292, type: !1002)
!8650 = !DILocation(line: 2292, column: 29, scope: !8648)
!8651 = !DILocalVariable(name: "rhs", arg: 2, scope: !8648, file: !389, line: 2292, type: !675)
!8652 = !DILocation(line: 2292, column: 38, scope: !8648)
!8653 = !DILocation(line: 2295, column: 18, scope: !8648)
!8654 = !DILocation(line: 2295, column: 25, scope: !8648)
!8655 = !DILocation(line: 2295, column: 3, scope: !8648)
!8656 = !DILocation(line: 2296, column: 1, scope: !8648)
!8657 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !5479, file: !5479, line: 792, type: !8658, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8658 = !DISubroutineType(types: !8659)
!8659 = !{!675, !8142, !1002, !644}
!8660 = !DILocalVariable(name: "ptr", arg: 1, scope: !8657, file: !5479, line: 792, type: !8142)
!8661 = !DILocation(line: 792, column: 33, scope: !8657)
!8662 = !DILocalVariable(name: "stmt", arg: 2, scope: !8657, file: !5479, line: 792, type: !1002)
!8663 = !DILocation(line: 792, column: 45, scope: !8657)
!8664 = !DILocalVariable(name: "flags", arg: 3, scope: !8657, file: !5479, line: 792, type: !644)
!8665 = !DILocation(line: 792, column: 55, scope: !8657)
!8666 = !DILocation(line: 794, column: 17, scope: !8657)
!8667 = !DILocation(line: 794, column: 22, scope: !8657)
!8668 = !DILocation(line: 794, column: 28, scope: !8657)
!8669 = !DILocation(line: 794, column: 3, scope: !8657)
!8670 = !DILocation(line: 795, column: 3, scope: !8657)
!8671 = !DILocation(line: 795, column: 8, scope: !8657)
!8672 = !DILocation(line: 795, column: 18, scope: !8657)
!8673 = !DILocation(line: 796, column: 29, scope: !8657)
!8674 = !DILocation(line: 796, column: 10, scope: !8657)
!8675 = !DILocation(line: 796, column: 3, scope: !8657)
!8676 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !5479, file: !5479, line: 699, type: !8677, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8677 = !DISubroutineType(types: !8678)
!8678 = !{!675, !8142}
!8679 = !DILocalVariable(name: "ptr", arg: 1, scope: !8676, file: !5479, line: 699, type: !8142)
!8680 = !DILocation(line: 699, column: 33, scope: !8676)
!8681 = !DILocalVariable(name: "val", scope: !8676, file: !5479, line: 701, type: !675)
!8682 = !DILocation(line: 701, column: 8, scope: !8676)
!8683 = !DILocation(line: 705, column: 7, scope: !8684)
!8684 = distinct !DILexicalBlock(scope: !8676, file: !5479, line: 705, column: 7)
!8685 = !DILocation(line: 705, column: 12, scope: !8684)
!8686 = !DILocation(line: 705, column: 7, scope: !8676)
!8687 = !DILocation(line: 707, column: 13, scope: !8688)
!8688 = distinct !DILexicalBlock(scope: !8684, file: !5479, line: 706, column: 5)
!8689 = !DILocation(line: 707, column: 11, scope: !8688)
!8690 = !DILocation(line: 708, column: 19, scope: !8688)
!8691 = !DILocation(line: 708, column: 24, scope: !8688)
!8692 = !DILocation(line: 708, column: 30, scope: !8688)
!8693 = !DILocation(line: 708, column: 7, scope: !8688)
!8694 = !DILocation(line: 708, column: 12, scope: !8688)
!8695 = !DILocation(line: 708, column: 17, scope: !8688)
!8696 = !DILocation(line: 709, column: 14, scope: !8688)
!8697 = !DILocation(line: 709, column: 7, scope: !8688)
!8698 = !DILocation(line: 711, column: 7, scope: !8699)
!8699 = distinct !DILexicalBlock(scope: !8676, file: !5479, line: 711, column: 7)
!8700 = !DILocation(line: 711, column: 12, scope: !8699)
!8701 = !DILocation(line: 711, column: 7, scope: !8676)
!8702 = !DILocation(line: 713, column: 13, scope: !8703)
!8703 = distinct !DILexicalBlock(scope: !8699, file: !5479, line: 712, column: 5)
!8704 = !DILocation(line: 713, column: 11, scope: !8703)
!8705 = !DILocation(line: 714, column: 19, scope: !8703)
!8706 = !DILocation(line: 714, column: 24, scope: !8703)
!8707 = !DILocation(line: 714, column: 30, scope: !8703)
!8708 = !DILocation(line: 714, column: 7, scope: !8703)
!8709 = !DILocation(line: 714, column: 12, scope: !8703)
!8710 = !DILocation(line: 714, column: 17, scope: !8703)
!8711 = !DILocation(line: 715, column: 14, scope: !8703)
!8712 = !DILocation(line: 715, column: 7, scope: !8703)
!8713 = !DILocation(line: 718, column: 3, scope: !8676)
!8714 = !DILocation(line: 718, column: 8, scope: !8676)
!8715 = !DILocation(line: 718, column: 13, scope: !8676)
!8716 = !DILocation(line: 719, column: 3, scope: !8676)
!8717 = !DILocation(line: 721, column: 1, scope: !8676)
!8718 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !341, file: !341, line: 150, type: !8719, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8719 = !DISubroutineType(types: !8720)
!8720 = !{!982, !8721, !5}
!8721 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8722, size: 64)
!8722 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !975)
!8723 = !DILocalVariable(name: "vec_", arg: 1, scope: !8718, file: !341, line: 150, type: !8721)
!8724 = !DILocation(line: 150, column: 1, scope: !8718)
!8725 = !DILocalVariable(name: "ix_", arg: 2, scope: !8718, file: !341, line: 150, type: !5)
!8726 = !DILocation(line: 0, scope: !8718)
!8727 = distinct !DISubprogram(name: "VEC_gimple_heap_reserve", scope: !389, file: !389, line: 34, type: !8728, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8728 = !DISubroutineType(types: !8729)
!8729 = !{!644, !5605, !644}
!8730 = !DILocalVariable(name: "vec_", arg: 1, scope: !8727, file: !389, line: 34, type: !5605)
!8731 = !DILocation(line: 34, column: 1, scope: !8727)
!8732 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8727, file: !389, line: 34, type: !644)
!8733 = !DILocalVariable(name: "extend", scope: !8727, file: !389, line: 34, type: !644)
!8734 = !DILocation(line: 34, column: 1, scope: !8735)
!8735 = distinct !DILexicalBlock(scope: !8727, file: !389, line: 34, column: 1)
!8736 = distinct !DISubprogram(name: "VEC_gimple_base_quick_push", scope: !389, file: !389, line: 33, type: !8737, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8737 = !DISubroutineType(types: !8738)
!8738 = !{!6329, !8739, !1002}
!8739 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1540, size: 64)
!8740 = !DILocalVariable(name: "vec_", arg: 1, scope: !8736, file: !389, line: 33, type: !8739)
!8741 = !DILocation(line: 33, column: 1, scope: !8736)
!8742 = !DILocalVariable(name: "obj_", arg: 2, scope: !8736, file: !389, line: 33, type: !1002)
!8743 = !DILocalVariable(name: "slot_", scope: !8736, file: !389, line: 33, type: !6329)
!8744 = distinct !DISubprogram(name: "VEC_gimple_base_space", scope: !389, file: !389, line: 33, type: !8745, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8745 = !DISubroutineType(types: !8746)
!8746 = !{!644, !8739, !644}
!8747 = !DILocalVariable(name: "vec_", arg: 1, scope: !8744, file: !389, line: 33, type: !8739)
!8748 = !DILocation(line: 33, column: 1, scope: !8744)
!8749 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8744, file: !389, line: 33, type: !644)
!8750 = distinct !DISubprogram(name: "bb_seq", scope: !389, file: !389, line: 237, type: !8751, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8751 = !DISubroutineType(types: !8752)
!8752 = !{!992, !8753}
!8753 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !676, line: 112, baseType: !8754)
!8754 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8755, size: 64)
!8755 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !967)
!8756 = !DILocalVariable(name: "bb", arg: 1, scope: !8750, file: !389, line: 237, type: !8753)
!8757 = !DILocation(line: 237, column: 27, scope: !8750)
!8758 = !DILocation(line: 239, column: 13, scope: !8750)
!8759 = !DILocation(line: 239, column: 17, scope: !8750)
!8760 = !DILocation(line: 239, column: 23, scope: !8750)
!8761 = !DILocation(line: 239, column: 33, scope: !8750)
!8762 = !DILocation(line: 239, column: 36, scope: !8750)
!8763 = !DILocation(line: 239, column: 40, scope: !8750)
!8764 = !DILocation(line: 239, column: 43, scope: !8750)
!8765 = !DILocation(line: 239, column: 10, scope: !8750)
!8766 = !DILocation(line: 239, column: 53, scope: !8750)
!8767 = !DILocation(line: 239, column: 57, scope: !8750)
!8768 = !DILocation(line: 239, column: 60, scope: !8750)
!8769 = !DILocation(line: 239, column: 68, scope: !8750)
!8770 = !DILocation(line: 239, column: 3, scope: !8750)
!8771 = distinct !DISubprogram(name: "gimple_seq_first", scope: !389, file: !389, line: 159, type: !8772, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8772 = !DISubroutineType(types: !8773)
!8773 = !{!997, !8774}
!8774 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !676, line: 67, baseType: !8775)
!8775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8776, size: 64)
!8776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !994)
!8777 = !DILocalVariable(name: "s", arg: 1, scope: !8771, file: !389, line: 159, type: !8774)
!8778 = !DILocation(line: 159, column: 36, scope: !8771)
!8779 = !DILocation(line: 161, column: 10, scope: !8771)
!8780 = !DILocation(line: 161, column: 14, scope: !8771)
!8781 = !DILocation(line: 161, column: 17, scope: !8771)
!8782 = !DILocation(line: 161, column: 3, scope: !8771)
!8783 = distinct !DISubprogram(name: "first_readonly_imm_use", scope: !5479, file: !5479, line: 292, type: !8784, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8784 = !DISubroutineType(types: !8785)
!8785 = !{!2072, !5499, !675}
!8786 = !DILocalVariable(name: "imm", arg: 1, scope: !8783, file: !5479, line: 292, type: !5499)
!8787 = !DILocation(line: 292, column: 43, scope: !8783)
!8788 = !DILocalVariable(name: "var", arg: 2, scope: !8783, file: !5479, line: 292, type: !675)
!8789 = !DILocation(line: 292, column: 53, scope: !8783)
!8790 = !DILocation(line: 294, column: 18, scope: !8783)
!8791 = !DILocation(line: 294, column: 3, scope: !8783)
!8792 = !DILocation(line: 294, column: 8, scope: !8783)
!8793 = !DILocation(line: 294, column: 14, scope: !8783)
!8794 = !DILocation(line: 295, column: 18, scope: !8783)
!8795 = !DILocation(line: 295, column: 23, scope: !8783)
!8796 = !DILocation(line: 295, column: 30, scope: !8783)
!8797 = !DILocation(line: 295, column: 3, scope: !8783)
!8798 = !DILocation(line: 295, column: 8, scope: !8783)
!8799 = !DILocation(line: 295, column: 16, scope: !8783)
!8800 = !DILocation(line: 299, column: 31, scope: !8801)
!8801 = distinct !DILexicalBlock(scope: !8783, file: !5479, line: 299, column: 7)
!8802 = !DILocation(line: 299, column: 7, scope: !8801)
!8803 = !DILocation(line: 299, column: 7, scope: !8783)
!8804 = !DILocation(line: 300, column: 5, scope: !8801)
!8805 = !DILocation(line: 301, column: 10, scope: !8783)
!8806 = !DILocation(line: 301, column: 15, scope: !8783)
!8807 = !DILocation(line: 301, column: 3, scope: !8783)
!8808 = !DILocation(line: 302, column: 1, scope: !8783)
!8809 = distinct !DISubprogram(name: "end_readonly_imm_use_p", scope: !5479, file: !5479, line: 285, type: !5547, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8810 = !DILocalVariable(name: "imm", arg: 1, scope: !8809, file: !5479, line: 285, type: !5549)
!8811 = !DILocation(line: 285, column: 49, scope: !8809)
!8812 = !DILocation(line: 287, column: 11, scope: !8809)
!8813 = !DILocation(line: 287, column: 16, scope: !8809)
!8814 = !DILocation(line: 287, column: 27, scope: !8809)
!8815 = !DILocation(line: 287, column: 32, scope: !8809)
!8816 = !DILocation(line: 287, column: 24, scope: !8809)
!8817 = !DILocation(line: 287, column: 10, scope: !8809)
!8818 = !DILocation(line: 287, column: 3, scope: !8809)
!8819 = distinct !DISubprogram(name: "phi_loop_edge_uses_def", scope: !1, file: !1, line: 1900, type: !8820, scopeLine: 1901, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8820 = !DISubroutineType(types: !8821)
!8821 = !{!793, !1217, !1002, !675}
!8822 = !DILocalVariable(name: "loop", arg: 1, scope: !8819, file: !1, line: 1900, type: !1217)
!8823 = !DILocation(line: 1900, column: 38, scope: !8819)
!8824 = !DILocalVariable(name: "phi", arg: 2, scope: !8819, file: !1, line: 1900, type: !1002)
!8825 = !DILocation(line: 1900, column: 51, scope: !8819)
!8826 = !DILocalVariable(name: "def", arg: 3, scope: !8819, file: !1, line: 1900, type: !675)
!8827 = !DILocation(line: 1900, column: 61, scope: !8819)
!8828 = !DILocalVariable(name: "i", scope: !8819, file: !1, line: 1902, type: !5)
!8829 = !DILocation(line: 1902, column: 12, scope: !8819)
!8830 = !DILocation(line: 1903, column: 10, scope: !8831)
!8831 = distinct !DILexicalBlock(scope: !8819, file: !1, line: 1903, column: 3)
!8832 = !DILocation(line: 1903, column: 8, scope: !8831)
!8833 = !DILocation(line: 1903, column: 15, scope: !8834)
!8834 = distinct !DILexicalBlock(scope: !8831, file: !1, line: 1903, column: 3)
!8835 = !DILocation(line: 1903, column: 40, scope: !8834)
!8836 = !DILocation(line: 1903, column: 19, scope: !8834)
!8837 = !DILocation(line: 1903, column: 17, scope: !8834)
!8838 = !DILocation(line: 1903, column: 3, scope: !8831)
!8839 = !DILocation(line: 1904, column: 32, scope: !8840)
!8840 = distinct !DILexicalBlock(scope: !8834, file: !1, line: 1904, column: 9)
!8841 = !DILocation(line: 1904, column: 59, scope: !8840)
!8842 = !DILocation(line: 1904, column: 64, scope: !8840)
!8843 = !DILocation(line: 1904, column: 38, scope: !8840)
!8844 = !DILocation(line: 1904, column: 68, scope: !8840)
!8845 = !DILocation(line: 1904, column: 9, scope: !8840)
!8846 = !DILocation(line: 1904, column: 9, scope: !8834)
!8847 = !DILocation(line: 1905, column: 11, scope: !8848)
!8848 = distinct !DILexicalBlock(scope: !8840, file: !1, line: 1905, column: 11)
!8849 = !DILocation(line: 1905, column: 35, scope: !8848)
!8850 = !DILocation(line: 1905, column: 32, scope: !8848)
!8851 = !DILocation(line: 1905, column: 11, scope: !8840)
!8852 = !DILocation(line: 1906, column: 2, scope: !8848)
!8853 = !DILocation(line: 1904, column: 71, scope: !8840)
!8854 = !DILocation(line: 1903, column: 47, scope: !8834)
!8855 = !DILocation(line: 1903, column: 3, scope: !8834)
!8856 = distinct !{!8856, !8838, !8857}
!8857 = !DILocation(line: 1906, column: 9, scope: !8831)
!8858 = !DILocation(line: 1907, column: 3, scope: !8819)
!8859 = !DILocation(line: 1908, column: 1, scope: !8819)
!8860 = distinct !DISubprogram(name: "stmt_uses_phi_result", scope: !1, file: !1, line: 1913, type: !8861, scopeLine: 1914, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8861 = !DISubroutineType(types: !8862)
!8862 = !{!793, !1002, !675}
!8863 = !DILocalVariable(name: "stmt", arg: 1, scope: !8860, file: !1, line: 1913, type: !1002)
!8864 = !DILocation(line: 1913, column: 30, scope: !8860)
!8865 = !DILocalVariable(name: "phi_result", arg: 2, scope: !8860, file: !1, line: 1913, type: !675)
!8866 = !DILocation(line: 1913, column: 41, scope: !8860)
!8867 = !DILocalVariable(name: "use", scope: !8860, file: !1, line: 1915, type: !675)
!8868 = !DILocation(line: 1915, column: 8, scope: !8860)
!8869 = !DILocation(line: 1915, column: 14, scope: !8860)
!8870 = !DILocation(line: 1919, column: 11, scope: !8860)
!8871 = !DILocation(line: 1919, column: 18, scope: !8860)
!8872 = !DILocation(line: 1919, column: 15, scope: !8860)
!8873 = !DILocation(line: 1919, column: 10, scope: !8860)
!8874 = !DILocation(line: 1919, column: 3, scope: !8860)
!8875 = distinct !DISubprogram(name: "next_readonly_imm_use", scope: !5479, file: !5479, line: 306, type: !6270, scopeLine: 307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8876 = !DILocalVariable(name: "imm", arg: 1, scope: !8875, file: !5479, line: 306, type: !5499)
!8877 = !DILocation(line: 306, column: 42, scope: !8875)
!8878 = !DILocalVariable(name: "old", scope: !8875, file: !5479, line: 308, type: !2072)
!8879 = !DILocation(line: 308, column: 17, scope: !8875)
!8880 = !DILocation(line: 308, column: 23, scope: !8875)
!8881 = !DILocation(line: 308, column: 28, scope: !8875)
!8882 = !DILocation(line: 319, column: 18, scope: !8875)
!8883 = !DILocation(line: 319, column: 23, scope: !8875)
!8884 = !DILocation(line: 319, column: 3, scope: !8875)
!8885 = !DILocation(line: 319, column: 8, scope: !8875)
!8886 = !DILocation(line: 319, column: 16, scope: !8875)
!8887 = !DILocation(line: 320, column: 31, scope: !8888)
!8888 = distinct !DILexicalBlock(scope: !8875, file: !5479, line: 320, column: 7)
!8889 = !DILocation(line: 320, column: 7, scope: !8888)
!8890 = !DILocation(line: 320, column: 7, scope: !8875)
!8891 = !DILocation(line: 321, column: 5, scope: !8888)
!8892 = !DILocation(line: 322, column: 10, scope: !8875)
!8893 = !DILocation(line: 322, column: 15, scope: !8875)
!8894 = !DILocation(line: 322, column: 3, scope: !8875)
!8895 = !DILocation(line: 323, column: 1, scope: !8875)
!8896 = distinct !DISubprogram(name: "cannot_convert_bb_to_perfect_nest", scope: !1, file: !1, line: 2272, type: !8897, scopeLine: 2273, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8897 = !DISubroutineType(types: !8898)
!8898 = !{!793, !1454, !1217}
!8899 = !DILocalVariable(name: "bb", arg: 1, scope: !8896, file: !1, line: 2272, type: !1454)
!8900 = !DILocation(line: 2272, column: 48, scope: !8896)
!8901 = !DILocalVariable(name: "loop", arg: 2, scope: !8896, file: !1, line: 2272, type: !1217)
!8902 = !DILocation(line: 2272, column: 65, scope: !8896)
!8903 = !DILocalVariable(name: "bsi", scope: !8896, file: !1, line: 2274, type: !4406)
!8904 = !DILocation(line: 2274, column: 24, scope: !8896)
!8905 = !DILocalVariable(name: "exit_condition", scope: !8896, file: !1, line: 2275, type: !1002)
!8906 = !DILocation(line: 2275, column: 10, scope: !8896)
!8907 = !DILocation(line: 2275, column: 52, scope: !8896)
!8908 = !DILocation(line: 2275, column: 27, scope: !8896)
!8909 = !DILocation(line: 2277, column: 28, scope: !8910)
!8910 = distinct !DILexicalBlock(scope: !8896, file: !1, line: 2277, column: 3)
!8911 = !DILocation(line: 2277, column: 14, scope: !8910)
!8912 = !DILocation(line: 2277, column: 8, scope: !8910)
!8913 = !DILocation(line: 2277, column: 34, scope: !8914)
!8914 = distinct !DILexicalBlock(scope: !8910, file: !1, line: 2277, column: 3)
!8915 = !DILocation(line: 2277, column: 33, scope: !8914)
!8916 = !DILocation(line: 2277, column: 3, scope: !8910)
!8917 = !DILocalVariable(name: "stmt", scope: !8918, file: !1, line: 2279, type: !1002)
!8918 = distinct !DILexicalBlock(scope: !8914, file: !1, line: 2278, column: 5)
!8919 = !DILocation(line: 2279, column: 14, scope: !8918)
!8920 = !DILocation(line: 2279, column: 21, scope: !8918)
!8921 = !DILocation(line: 2281, column: 11, scope: !8922)
!8922 = distinct !DILexicalBlock(scope: !8918, file: !1, line: 2281, column: 11)
!8923 = !DILocation(line: 2281, column: 19, scope: !8922)
!8924 = !DILocation(line: 2281, column: 16, scope: !8922)
!8925 = !DILocation(line: 2282, column: 4, scope: !8922)
!8926 = !DILocation(line: 2282, column: 29, scope: !8922)
!8927 = !DILocation(line: 2282, column: 7, scope: !8922)
!8928 = !DILocation(line: 2283, column: 4, scope: !8922)
!8929 = !DILocation(line: 2283, column: 32, scope: !8922)
!8930 = !DILocation(line: 2283, column: 38, scope: !8922)
!8931 = !DILocation(line: 2283, column: 7, scope: !8922)
!8932 = !DILocation(line: 2281, column: 11, scope: !8918)
!8933 = !DILocation(line: 2284, column: 2, scope: !8922)
!8934 = !DILocation(line: 2286, column: 29, scope: !8935)
!8935 = distinct !DILexicalBlock(scope: !8918, file: !1, line: 2286, column: 11)
!8936 = !DILocation(line: 2286, column: 11, scope: !8935)
!8937 = !DILocation(line: 2286, column: 11, scope: !8918)
!8938 = !DILocation(line: 2288, column: 47, scope: !8939)
!8939 = distinct !DILexicalBlock(scope: !8940, file: !1, line: 2288, column: 8)
!8940 = distinct !DILexicalBlock(scope: !8935, file: !1, line: 2287, column: 2)
!8941 = !DILocation(line: 2288, column: 53, scope: !8939)
!8942 = !DILocation(line: 2288, column: 8, scope: !8939)
!8943 = !DILocation(line: 2288, column: 8, scope: !8940)
!8944 = !DILocation(line: 2289, column: 6, scope: !8939)
!8945 = !DILocation(line: 2291, column: 45, scope: !8946)
!8946 = distinct !DILexicalBlock(scope: !8940, file: !1, line: 2291, column: 8)
!8947 = !DILocation(line: 2291, column: 26, scope: !8946)
!8948 = !DILocation(line: 2291, column: 52, scope: !8946)
!8949 = !DILocation(line: 2291, column: 8, scope: !8946)
!8950 = !DILocation(line: 2291, column: 8, scope: !8940)
!8951 = !DILocation(line: 2292, column: 6, scope: !8946)
!8952 = !DILocation(line: 2294, column: 31, scope: !8953)
!8953 = distinct !DILexicalBlock(scope: !8940, file: !1, line: 2294, column: 8)
!8954 = !DILocation(line: 2294, column: 37, scope: !8953)
!8955 = !DILocation(line: 2294, column: 44, scope: !8953)
!8956 = !DILocation(line: 2294, column: 8, scope: !8953)
!8957 = !DILocation(line: 2295, column: 8, scope: !8953)
!8958 = !DILocation(line: 2295, column: 37, scope: !8953)
!8959 = !DILocation(line: 2295, column: 43, scope: !8953)
!8960 = !DILocation(line: 2295, column: 11, scope: !8953)
!8961 = !DILocation(line: 2294, column: 8, scope: !8940)
!8962 = !DILocation(line: 2296, column: 6, scope: !8953)
!8963 = !DILocation(line: 2297, column: 2, scope: !8940)
!8964 = !DILocation(line: 2304, column: 18, scope: !8965)
!8965 = distinct !DILexicalBlock(scope: !8918, file: !1, line: 2303, column: 11)
!8966 = !DILocation(line: 2304, column: 7, scope: !8965)
!8967 = !DILocation(line: 2305, column: 7, scope: !8965)
!8968 = !DILocation(line: 2305, column: 13, scope: !8965)
!8969 = !DILocation(line: 2305, column: 20, scope: !8965)
!8970 = !DILocation(line: 2303, column: 12, scope: !8965)
!8971 = !DILocation(line: 2303, column: 11, scope: !8918)
!8972 = !DILocation(line: 2306, column: 2, scope: !8965)
!8973 = !DILocation(line: 2307, column: 5, scope: !8918)
!8974 = !DILocation(line: 2277, column: 51, scope: !8914)
!8975 = !DILocation(line: 2277, column: 3, scope: !8914)
!8976 = distinct !{!8976, !8916, !8977}
!8977 = !DILocation(line: 2307, column: 5, scope: !8910)
!8978 = !DILocation(line: 2309, column: 3, scope: !8896)
!8979 = !DILocation(line: 2310, column: 1, scope: !8896)
!8980 = distinct !DISubprogram(name: "is_gimple_assign", scope: !389, file: !389, line: 1677, type: !5561, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8981 = !DILocalVariable(name: "gs", arg: 1, scope: !8980, file: !389, line: 1677, type: !4203)
!8982 = !DILocation(line: 1677, column: 32, scope: !8980)
!8983 = !DILocation(line: 1679, column: 23, scope: !8980)
!8984 = !DILocation(line: 1679, column: 10, scope: !8980)
!8985 = !DILocation(line: 1679, column: 27, scope: !8980)
!8986 = !DILocation(line: 1679, column: 3, scope: !8980)
!8987 = distinct !DISubprogram(name: "cannot_convert_modify_to_perfect_nest", scope: !1, file: !1, line: 2221, type: !8988, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!8988 = !DISubroutineType(types: !8989)
!8989 = !{!793, !1002, !1217}
!8990 = !DILocalVariable(name: "stmt", arg: 1, scope: !8987, file: !1, line: 2221, type: !1002)
!8991 = !DILocation(line: 2221, column: 47, scope: !8987)
!8992 = !DILocalVariable(name: "loop", arg: 2, scope: !8987, file: !1, line: 2221, type: !1217)
!8993 = !DILocation(line: 2221, column: 66, scope: !8987)
!8994 = !DILocalVariable(name: "use_a", scope: !8987, file: !1, line: 2223, type: !2072)
!8995 = !DILocation(line: 2223, column: 17, scope: !8987)
!8996 = !DILocalVariable(name: "use_b", scope: !8987, file: !1, line: 2223, type: !2072)
!8997 = !DILocation(line: 2223, column: 24, scope: !8987)
!8998 = !DILocalVariable(name: "imm_iter", scope: !8987, file: !1, line: 2224, type: !5415)
!8999 = !DILocation(line: 2224, column: 20, scope: !8987)
!9000 = !DILocalVariable(name: "op_iter", scope: !8987, file: !1, line: 2225, type: !6193)
!9001 = !DILocation(line: 2225, column: 15, scope: !8987)
!9002 = !DILocalVariable(name: "op_iter1", scope: !8987, file: !1, line: 2225, type: !6193)
!9003 = !DILocation(line: 2225, column: 24, scope: !8987)
!9004 = !DILocalVariable(name: "op0", scope: !8987, file: !1, line: 2226, type: !675)
!9005 = !DILocation(line: 2226, column: 8, scope: !8987)
!9006 = !DILocation(line: 2226, column: 33, scope: !8987)
!9007 = !DILocation(line: 2226, column: 14, scope: !8987)
!9008 = !DILocation(line: 2230, column: 7, scope: !9009)
!9009 = distinct !DILexicalBlock(scope: !8987, file: !1, line: 2230, column: 7)
!9010 = !DILocation(line: 2230, column: 23, scope: !9009)
!9011 = !DILocation(line: 2231, column: 7, scope: !9009)
!9012 = !DILocation(line: 2231, column: 29, scope: !9009)
!9013 = !DILocation(line: 2231, column: 34, scope: !9009)
!9014 = !DILocation(line: 2231, column: 11, scope: !9009)
!9015 = !DILocation(line: 2230, column: 7, scope: !8987)
!9016 = !DILocation(line: 2232, column: 5, scope: !9017)
!9017 = distinct !DILexicalBlock(scope: !9009, file: !1, line: 2232, column: 5)
!9018 = !DILocation(line: 2232, column: 5, scope: !9019)
!9019 = distinct !DILexicalBlock(scope: !9017, file: !1, line: 2232, column: 5)
!9020 = !DILocation(line: 2233, column: 22, scope: !9021)
!9021 = distinct !DILexicalBlock(scope: !9019, file: !1, line: 2233, column: 11)
!9022 = !DILocation(line: 2233, column: 11, scope: !9021)
!9023 = !DILocation(line: 2233, column: 41, scope: !9021)
!9024 = !DILocation(line: 2233, column: 56, scope: !9021)
!9025 = !DILocation(line: 2233, column: 62, scope: !9021)
!9026 = !DILocation(line: 2233, column: 53, scope: !9021)
!9027 = !DILocation(line: 2233, column: 11, scope: !9019)
!9028 = !DILocation(line: 2234, column: 2, scope: !9021)
!9029 = distinct !{!9029, !9016, !9030}
!9030 = !DILocation(line: 2234, column: 9, scope: !9017)
!9031 = !DILocation(line: 2236, column: 3, scope: !9032)
!9032 = distinct !DILexicalBlock(scope: !8987, file: !1, line: 2236, column: 3)
!9033 = !DILocation(line: 2236, column: 3, scope: !9034)
!9034 = distinct !DILexicalBlock(scope: !9032, file: !1, line: 2236, column: 3)
!9035 = !DILocalVariable(name: "node", scope: !9036, file: !1, line: 2238, type: !1002)
!9036 = distinct !DILexicalBlock(scope: !9034, file: !1, line: 2237, column: 5)
!9037 = !DILocation(line: 2238, column: 14, scope: !9036)
!9038 = !DILocalVariable(name: "op", scope: !9036, file: !1, line: 2239, type: !675)
!9039 = !DILocation(line: 2239, column: 12, scope: !9036)
!9040 = !DILocation(line: 2239, column: 17, scope: !9036)
!9041 = !DILocation(line: 2242, column: 30, scope: !9042)
!9042 = distinct !DILexicalBlock(scope: !9036, file: !1, line: 2242, column: 11)
!9043 = !DILocation(line: 2242, column: 34, scope: !9042)
!9044 = !DILocation(line: 2242, column: 12, scope: !9042)
!9045 = !DILocation(line: 2242, column: 11, scope: !9036)
!9046 = !DILocation(line: 2243, column: 2, scope: !9047)
!9047 = distinct !DILexicalBlock(scope: !9042, file: !1, line: 2243, column: 2)
!9048 = !DILocation(line: 2243, column: 2, scope: !9049)
!9049 = distinct !DILexicalBlock(scope: !9047, file: !1, line: 2243, column: 2)
!9050 = !DILocation(line: 2244, column: 19, scope: !9051)
!9051 = distinct !DILexicalBlock(scope: !9049, file: !1, line: 2244, column: 8)
!9052 = !DILocation(line: 2244, column: 8, scope: !9051)
!9053 = !DILocation(line: 2244, column: 38, scope: !9051)
!9054 = !DILocation(line: 2244, column: 53, scope: !9051)
!9055 = !DILocation(line: 2244, column: 59, scope: !9051)
!9056 = !DILocation(line: 2244, column: 50, scope: !9051)
!9057 = !DILocation(line: 2244, column: 8, scope: !9049)
!9058 = !DILocation(line: 2245, column: 6, scope: !9051)
!9059 = distinct !{!9059, !9046, !9060}
!9060 = !DILocation(line: 2245, column: 13, scope: !9047)
!9061 = !DILocation(line: 2249, column: 14, scope: !9036)
!9062 = !DILocation(line: 2249, column: 12, scope: !9036)
!9063 = !DILocation(line: 2250, column: 24, scope: !9064)
!9064 = distinct !DILexicalBlock(scope: !9036, file: !1, line: 2250, column: 11)
!9065 = !DILocation(line: 2250, column: 11, scope: !9064)
!9066 = !DILocation(line: 2250, column: 30, scope: !9064)
!9067 = !DILocation(line: 2250, column: 11, scope: !9036)
!9068 = !DILocation(line: 2251, column: 2, scope: !9069)
!9069 = distinct !DILexicalBlock(scope: !9064, file: !1, line: 2251, column: 2)
!9070 = !DILocation(line: 2251, column: 2, scope: !9071)
!9071 = distinct !DILexicalBlock(scope: !9069, file: !1, line: 2251, column: 2)
!9072 = !DILocalVariable(name: "arg", scope: !9073, file: !1, line: 2253, type: !675)
!9073 = distinct !DILexicalBlock(scope: !9071, file: !1, line: 2252, column: 4)
!9074 = !DILocation(line: 2253, column: 11, scope: !9073)
!9075 = !DILocation(line: 2253, column: 17, scope: !9073)
!9076 = !DILocation(line: 2255, column: 10, scope: !9077)
!9077 = distinct !DILexicalBlock(scope: !9073, file: !1, line: 2255, column: 10)
!9078 = !DILocation(line: 2255, column: 26, scope: !9077)
!9079 = !DILocation(line: 2255, column: 10, scope: !9073)
!9080 = !DILocalVariable(name: "arg_stmt", scope: !9081, file: !1, line: 2257, type: !1002)
!9081 = distinct !DILexicalBlock(scope: !9077, file: !1, line: 2256, column: 8)
!9082 = !DILocation(line: 2257, column: 10, scope: !9081)
!9083 = !DILocation(line: 2257, column: 21, scope: !9081)
!9084 = !DILocation(line: 2259, column: 18, scope: !9085)
!9085 = distinct !DILexicalBlock(scope: !9081, file: !1, line: 2259, column: 7)
!9086 = !DILocation(line: 2259, column: 7, scope: !9085)
!9087 = !DILocation(line: 2260, column: 7, scope: !9085)
!9088 = !DILocation(line: 2260, column: 22, scope: !9085)
!9089 = !DILocation(line: 2260, column: 11, scope: !9085)
!9090 = !DILocation(line: 2260, column: 33, scope: !9085)
!9091 = !DILocation(line: 2260, column: 48, scope: !9085)
!9092 = !DILocation(line: 2260, column: 54, scope: !9085)
!9093 = !DILocation(line: 2260, column: 45, scope: !9085)
!9094 = !DILocation(line: 2259, column: 7, scope: !9081)
!9095 = !DILocation(line: 2261, column: 5, scope: !9085)
!9096 = !DILocation(line: 2262, column: 8, scope: !9081)
!9097 = !DILocation(line: 2263, column: 4, scope: !9073)
!9098 = distinct !{!9098, !9068, !9099}
!9099 = !DILocation(line: 2263, column: 4, scope: !9069)
!9100 = !DILocation(line: 2264, column: 5, scope: !9036)
!9101 = distinct !{!9101, !9031, !9102}
!9102 = !DILocation(line: 2264, column: 5, scope: !9032)
!9103 = !DILocation(line: 2266, column: 3, scope: !8987)
!9104 = !DILocation(line: 2267, column: 1, scope: !8987)
!9105 = distinct !DISubprogram(name: "can_duplicate_iv", scope: !1, file: !1, line: 2197, type: !9106, scopeLine: 2198, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9106 = !DISubroutineType(types: !9107)
!9107 = !{!793, !675, !1217}
!9108 = !DILocalVariable(name: "iv", arg: 1, scope: !9105, file: !1, line: 2197, type: !675)
!9109 = !DILocation(line: 2197, column: 24, scope: !9105)
!9110 = !DILocalVariable(name: "loop", arg: 2, scope: !9105, file: !1, line: 2197, type: !1217)
!9111 = !DILocation(line: 2197, column: 41, scope: !9105)
!9112 = !DILocalVariable(name: "scev", scope: !9105, file: !1, line: 2199, type: !675)
!9113 = !DILocation(line: 2199, column: 8, scope: !9105)
!9114 = !DILocation(line: 2200, column: 6, scope: !9105)
!9115 = !DILocation(line: 2200, column: 38, scope: !9105)
!9116 = !DILocation(line: 2200, column: 44, scope: !9105)
!9117 = !DILocation(line: 2200, column: 12, scope: !9105)
!9118 = !DILocation(line: 2199, column: 15, scope: !9105)
!9119 = !DILocation(line: 2202, column: 41, scope: !9120)
!9120 = distinct !DILexicalBlock(scope: !9105, file: !1, line: 2202, column: 7)
!9121 = !DILocation(line: 2202, column: 8, scope: !9120)
!9122 = !DILocation(line: 2202, column: 7, scope: !9105)
!9123 = !DILocalVariable(name: "step", scope: !9124, file: !1, line: 2204, type: !675)
!9124 = distinct !DILexicalBlock(scope: !9120, file: !1, line: 2203, column: 5)
!9125 = !DILocation(line: 2204, column: 12, scope: !9124)
!9126 = !DILocation(line: 2204, column: 47, scope: !9124)
!9127 = !DILocation(line: 2204, column: 53, scope: !9124)
!9128 = !DILocation(line: 2204, column: 59, scope: !9124)
!9129 = !DILocation(line: 2204, column: 19, scope: !9124)
!9130 = !DILocation(line: 2206, column: 11, scope: !9131)
!9131 = distinct !DILexicalBlock(scope: !9124, file: !1, line: 2206, column: 11)
!9132 = !DILocation(line: 2206, column: 16, scope: !9131)
!9133 = !DILocation(line: 2206, column: 19, scope: !9131)
!9134 = !DILocation(line: 2206, column: 27, scope: !9131)
!9135 = !DILocation(line: 2206, column: 24, scope: !9131)
!9136 = !DILocation(line: 2206, column: 43, scope: !9131)
!9137 = !DILocation(line: 2206, column: 46, scope: !9131)
!9138 = !DILocation(line: 2206, column: 63, scope: !9131)
!9139 = !DILocation(line: 2206, column: 11, scope: !9124)
!9140 = !DILocation(line: 2207, column: 2, scope: !9131)
!9141 = !DILocation(line: 2208, column: 5, scope: !9124)
!9142 = !DILocation(line: 2210, column: 3, scope: !9105)
!9143 = !DILocation(line: 2211, column: 1, scope: !9105)
!9144 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !389, file: !389, line: 1694, type: !4211, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9145 = !DILocalVariable(name: "gs", arg: 1, scope: !9144, file: !389, line: 1694, type: !4203)
!9146 = !DILocation(line: 1694, column: 33, scope: !9144)
!9147 = !DILocation(line: 1697, column: 21, scope: !9144)
!9148 = !DILocation(line: 1697, column: 10, scope: !9144)
!9149 = !DILocation(line: 1697, column: 3, scope: !9144)
!9150 = distinct !DISubprogram(name: "can_put_in_inner_loop", scope: !1, file: !1, line: 2143, type: !6396, scopeLine: 2144, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9151 = !DILocalVariable(name: "inner", arg: 1, scope: !9150, file: !1, line: 2143, type: !1217)
!9152 = !DILocation(line: 2143, column: 37, scope: !9150)
!9153 = !DILocalVariable(name: "stmt", arg: 2, scope: !9150, file: !1, line: 2143, type: !1002)
!9154 = !DILocation(line: 2143, column: 51, scope: !9150)
!9155 = !DILocalVariable(name: "imm_iter", scope: !9150, file: !1, line: 2145, type: !5415)
!9156 = !DILocation(line: 2145, column: 20, scope: !9150)
!9157 = !DILocalVariable(name: "use_p", scope: !9150, file: !1, line: 2146, type: !2072)
!9158 = !DILocation(line: 2146, column: 17, scope: !9150)
!9159 = !DILocation(line: 2148, column: 3, scope: !9150)
!9160 = !DILocation(line: 2149, column: 20, scope: !9161)
!9161 = distinct !DILexicalBlock(scope: !9150, file: !1, line: 2149, column: 7)
!9162 = !DILocation(line: 2149, column: 7, scope: !9161)
!9163 = !DILocation(line: 2150, column: 7, scope: !9161)
!9164 = !DILocation(line: 2150, column: 37, scope: !9161)
!9165 = !DILocation(line: 2150, column: 44, scope: !9161)
!9166 = !DILocation(line: 2150, column: 11, scope: !9161)
!9167 = !DILocation(line: 2149, column: 7, scope: !9150)
!9168 = !DILocation(line: 2151, column: 5, scope: !9161)
!9169 = !DILocation(line: 2153, column: 3, scope: !9170)
!9170 = distinct !DILexicalBlock(scope: !9150, file: !1, line: 2153, column: 3)
!9171 = !DILocation(line: 2153, column: 3, scope: !9172)
!9172 = distinct !DILexicalBlock(scope: !9170, file: !1, line: 2153, column: 3)
!9173 = !DILocation(line: 2155, column: 33, scope: !9174)
!9174 = distinct !DILexicalBlock(scope: !9175, file: !1, line: 2155, column: 11)
!9175 = distinct !DILexicalBlock(scope: !9172, file: !1, line: 2154, column: 5)
!9176 = !DILocation(line: 2155, column: 40, scope: !9174)
!9177 = !DILocation(line: 2155, column: 12, scope: !9174)
!9178 = !DILocation(line: 2155, column: 11, scope: !9175)
!9179 = !DILocalVariable(name: "immbb", scope: !9180, file: !1, line: 2157, type: !1454)
!9180 = distinct !DILexicalBlock(scope: !9174, file: !1, line: 2156, column: 2)
!9181 = !DILocation(line: 2157, column: 16, scope: !9180)
!9182 = !DILocation(line: 2157, column: 35, scope: !9180)
!9183 = !DILocation(line: 2157, column: 24, scope: !9180)
!9184 = !DILocation(line: 2159, column: 32, scope: !9185)
!9185 = distinct !DILexicalBlock(scope: !9180, file: !1, line: 2159, column: 8)
!9186 = !DILocation(line: 2159, column: 39, scope: !9185)
!9187 = !DILocation(line: 2159, column: 9, scope: !9185)
!9188 = !DILocation(line: 2159, column: 8, scope: !9180)
!9189 = !DILocation(line: 2160, column: 6, scope: !9185)
!9190 = !DILocation(line: 2161, column: 2, scope: !9180)
!9191 = !DILocation(line: 2162, column: 5, scope: !9175)
!9192 = distinct !{!9192, !9169, !9193}
!9193 = !DILocation(line: 2162, column: 5, scope: !9170)
!9194 = !DILocation(line: 2163, column: 3, scope: !9150)
!9195 = !DILocation(line: 2164, column: 1, scope: !9150)
!9196 = distinct !DISubprogram(name: "can_put_after_inner_loop", scope: !1, file: !1, line: 2169, type: !6396, scopeLine: 2170, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9197 = !DILocalVariable(name: "loop", arg: 1, scope: !9196, file: !1, line: 2169, type: !1217)
!9198 = !DILocation(line: 2169, column: 40, scope: !9196)
!9199 = !DILocalVariable(name: "stmt", arg: 2, scope: !9196, file: !1, line: 2169, type: !1002)
!9200 = !DILocation(line: 2169, column: 53, scope: !9196)
!9201 = !DILocalVariable(name: "imm_iter", scope: !9196, file: !1, line: 2171, type: !5415)
!9202 = !DILocation(line: 2171, column: 20, scope: !9196)
!9203 = !DILocalVariable(name: "use_p", scope: !9196, file: !1, line: 2172, type: !2072)
!9204 = !DILocation(line: 2172, column: 17, scope: !9196)
!9205 = !DILocation(line: 2174, column: 20, scope: !9206)
!9206 = distinct !DILexicalBlock(scope: !9196, file: !1, line: 2174, column: 7)
!9207 = !DILocation(line: 2174, column: 7, scope: !9206)
!9208 = !DILocation(line: 2174, column: 7, scope: !9196)
!9209 = !DILocation(line: 2175, column: 5, scope: !9206)
!9210 = !DILocation(line: 2177, column: 3, scope: !9211)
!9211 = distinct !DILexicalBlock(scope: !9196, file: !1, line: 2177, column: 3)
!9212 = !DILocation(line: 2177, column: 3, scope: !9213)
!9213 = distinct !DILexicalBlock(scope: !9211, file: !1, line: 2177, column: 3)
!9214 = !DILocation(line: 2179, column: 33, scope: !9215)
!9215 = distinct !DILexicalBlock(scope: !9216, file: !1, line: 2179, column: 11)
!9216 = distinct !DILexicalBlock(scope: !9213, file: !1, line: 2178, column: 5)
!9217 = !DILocation(line: 2179, column: 39, scope: !9215)
!9218 = !DILocation(line: 2179, column: 12, scope: !9215)
!9219 = !DILocation(line: 2179, column: 11, scope: !9216)
!9220 = !DILocalVariable(name: "immbb", scope: !9221, file: !1, line: 2181, type: !1454)
!9221 = distinct !DILexicalBlock(scope: !9215, file: !1, line: 2180, column: 2)
!9222 = !DILocation(line: 2181, column: 16, scope: !9221)
!9223 = !DILocation(line: 2181, column: 35, scope: !9221)
!9224 = !DILocation(line: 2181, column: 24, scope: !9221)
!9225 = !DILocation(line: 2184, column: 11, scope: !9226)
!9226 = distinct !DILexicalBlock(scope: !9221, file: !1, line: 2183, column: 8)
!9227 = !DILocation(line: 2185, column: 11, scope: !9226)
!9228 = !DILocation(line: 2185, column: 17, scope: !9226)
!9229 = !DILocation(line: 2185, column: 24, scope: !9226)
!9230 = !DILocation(line: 2183, column: 9, scope: !9226)
!9231 = !DILocation(line: 2186, column: 8, scope: !9226)
!9232 = !DILocation(line: 2186, column: 35, scope: !9226)
!9233 = !DILocation(line: 2186, column: 41, scope: !9226)
!9234 = !DILocation(line: 2186, column: 48, scope: !9226)
!9235 = !DILocation(line: 2186, column: 12, scope: !9226)
!9236 = !DILocation(line: 2183, column: 8, scope: !9221)
!9237 = !DILocation(line: 2187, column: 6, scope: !9226)
!9238 = !DILocation(line: 2188, column: 2, scope: !9221)
!9239 = !DILocation(line: 2189, column: 5, scope: !9216)
!9240 = distinct !{!9240, !9210, !9241}
!9241 = !DILocation(line: 2189, column: 5, scope: !9211)
!9242 = !DILocation(line: 2190, column: 3, scope: !9196)
!9243 = !DILocation(line: 2191, column: 1, scope: !9196)
!9244 = distinct !DISubprogram(name: "automatically_generated_chrec_p", scope: !9245, file: !9245, line: 37, type: !9246, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9245 = !DIFile(filename: "./tree-chrec.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!9246 = !DISubroutineType(types: !9247)
!9247 = !{!793, !9248}
!9248 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !676, line: 59, baseType: !9249)
!9249 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9250, size: 64)
!9250 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !678)
!9251 = !DILocalVariable(name: "chrec", arg: 1, scope: !9244, file: !9245, line: 37, type: !9248)
!9252 = !DILocation(line: 37, column: 45, scope: !9244)
!9253 = !DILocation(line: 39, column: 11, scope: !9244)
!9254 = !DILocation(line: 39, column: 20, scope: !9244)
!9255 = !DILocation(line: 39, column: 17, scope: !9244)
!9256 = !DILocation(line: 40, column: 4, scope: !9244)
!9257 = !DILocation(line: 40, column: 7, scope: !9244)
!9258 = !DILocation(line: 40, column: 16, scope: !9244)
!9259 = !DILocation(line: 40, column: 13, scope: !9244)
!9260 = !DILocation(line: 39, column: 10, scope: !9244)
!9261 = !DILocation(line: 39, column: 3, scope: !9244)
!9262 = distinct !DISubprogram(name: "exit_phi_for_loop_p", scope: !1, file: !1, line: 2129, type: !6396, scopeLine: 2130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9263 = !DILocalVariable(name: "loop", arg: 1, scope: !9262, file: !1, line: 2129, type: !1217)
!9264 = !DILocation(line: 2129, column: 35, scope: !9262)
!9265 = !DILocalVariable(name: "stmt", arg: 2, scope: !9262, file: !1, line: 2129, type: !1002)
!9266 = !DILocation(line: 2129, column: 48, scope: !9262)
!9267 = !DILocation(line: 2131, column: 20, scope: !9268)
!9268 = distinct !DILexicalBlock(scope: !9262, file: !1, line: 2131, column: 7)
!9269 = !DILocation(line: 2131, column: 7, scope: !9268)
!9270 = !DILocation(line: 2131, column: 26, scope: !9268)
!9271 = !DILocation(line: 2132, column: 7, scope: !9268)
!9272 = !DILocation(line: 2132, column: 31, scope: !9268)
!9273 = !DILocation(line: 2132, column: 10, scope: !9268)
!9274 = !DILocation(line: 2132, column: 37, scope: !9268)
!9275 = !DILocation(line: 2133, column: 7, scope: !9268)
!9276 = !DILocation(line: 2133, column: 21, scope: !9268)
!9277 = !DILocation(line: 2133, column: 10, scope: !9268)
!9278 = !DILocation(line: 2133, column: 43, scope: !9268)
!9279 = !DILocation(line: 2133, column: 30, scope: !9268)
!9280 = !DILocation(line: 2133, column: 50, scope: !9268)
!9281 = !DILocation(line: 2133, column: 27, scope: !9268)
!9282 = !DILocation(line: 2131, column: 7, scope: !9262)
!9283 = !DILocation(line: 2134, column: 5, scope: !9268)
!9284 = !DILocation(line: 2136, column: 3, scope: !9262)
!9285 = !DILocation(line: 2137, column: 1, scope: !9262)
!9286 = distinct !DISubprogram(name: "VEC_source_location_heap_reserve", scope: !1, file: !1, line: 2352, type: !9287, scopeLine: 2352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9287 = !DISubroutineType(types: !9288)
!9288 = !{!644, !9289, !644}
!9289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2080, size: 64)
!9290 = !DILocalVariable(name: "vec_", arg: 1, scope: !9286, file: !1, line: 2352, type: !9289)
!9291 = !DILocation(line: 2352, column: 1, scope: !9286)
!9292 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9286, file: !1, line: 2352, type: !644)
!9293 = !DILocalVariable(name: "extend", scope: !9286, file: !1, line: 2352, type: !644)
!9294 = !DILocation(line: 2352, column: 1, scope: !9295)
!9295 = distinct !DILexicalBlock(scope: !9286, file: !1, line: 2352, column: 1)
!9296 = distinct !DISubprogram(name: "VEC_source_location_base_quick_push", scope: !1, file: !1, line: 2351, type: !9297, scopeLine: 2351, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9297 = !DISubroutineType(types: !9298)
!9298 = !{!9299, !9300, !803}
!9299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !803, size: 64)
!9300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2085, size: 64)
!9301 = !DILocalVariable(name: "vec_", arg: 1, scope: !9296, file: !1, line: 2351, type: !9300)
!9302 = !DILocation(line: 2351, column: 1, scope: !9296)
!9303 = !DILocalVariable(name: "obj_", arg: 2, scope: !9296, file: !1, line: 2351, type: !803)
!9304 = !DILocalVariable(name: "slot_", scope: !9296, file: !1, line: 2351, type: !9299)
!9305 = distinct !DISubprogram(name: "gimple_phi_arg_location", scope: !5479, file: !5479, line: 475, type: !9306, scopeLine: 476, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9306 = !DISubroutineType(types: !9307)
!9307 = !{!803, !1002, !1147}
!9308 = !DILocalVariable(name: "gs", arg: 1, scope: !9305, file: !5479, line: 475, type: !1002)
!9309 = !DILocation(line: 475, column: 33, scope: !9305)
!9310 = !DILocalVariable(name: "i", arg: 2, scope: !9305, file: !5479, line: 475, type: !1147)
!9311 = !DILocation(line: 475, column: 44, scope: !9305)
!9312 = !DILocation(line: 477, column: 26, scope: !9305)
!9313 = !DILocation(line: 477, column: 30, scope: !9305)
!9314 = !DILocation(line: 477, column: 10, scope: !9305)
!9315 = !DILocation(line: 477, column: 34, scope: !9305)
!9316 = !DILocation(line: 477, column: 3, scope: !9305)
!9317 = distinct !DISubprogram(name: "single_succ_edge", scope: !341, file: !341, line: 643, type: !9318, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9318 = !DISubroutineType(types: !9319)
!9319 = !{!982, !8753}
!9320 = !DILocalVariable(name: "bb", arg: 1, scope: !9317, file: !341, line: 643, type: !8753)
!9321 = !DILocation(line: 643, column: 37, scope: !9317)
!9322 = !DILocation(line: 645, column: 3, scope: !9317)
!9323 = !DILocation(line: 646, column: 10, scope: !9317)
!9324 = !DILocation(line: 646, column: 3, scope: !9317)
!9325 = distinct !DISubprogram(name: "VEC_tree_base_pop", scope: !133, file: !133, line: 182, type: !9326, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9326 = !DISubroutineType(types: !9327)
!9327 = !{!675, !6146}
!9328 = !DILocalVariable(name: "vec_", arg: 1, scope: !9325, file: !133, line: 182, type: !6146)
!9329 = !DILocation(line: 182, column: 1, scope: !9325)
!9330 = !DILocalVariable(name: "obj_", scope: !9325, file: !133, line: 182, type: !675)
!9331 = distinct !DISubprogram(name: "VEC_source_location_base_pop", scope: !1, file: !1, line: 2351, type: !9332, scopeLine: 2351, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9332 = !DISubroutineType(types: !9333)
!9333 = !{!803, !9300}
!9334 = !DILocalVariable(name: "vec_", arg: 1, scope: !9331, file: !1, line: 2351, type: !9300)
!9335 = !DILocation(line: 2351, column: 1, scope: !9331)
!9336 = !DILocalVariable(name: "obj_", scope: !9331, file: !1, line: 2351, type: !803)
!9337 = distinct !DISubprogram(name: "single_pred_edge", scope: !341, file: !341, line: 653, type: !9318, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9338 = !DILocalVariable(name: "bb", arg: 1, scope: !9337, file: !341, line: 653, type: !8753)
!9339 = !DILocation(line: 653, column: 37, scope: !9337)
!9340 = !DILocation(line: 655, column: 3, scope: !9337)
!9341 = !DILocation(line: 656, column: 10, scope: !9337)
!9342 = !DILocation(line: 656, column: 3, scope: !9337)
!9343 = distinct !DISubprogram(name: "VEC_int_base_index", scope: !2049, file: !2049, line: 31, type: !9344, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9344 = !DISubroutineType(types: !9345)
!9345 = !{!644, !9346, !5}
!9346 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9347, size: 64)
!9347 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2053)
!9348 = !DILocalVariable(name: "vec_", arg: 1, scope: !9343, file: !2049, line: 31, type: !9346)
!9349 = !DILocation(line: 31, column: 1, scope: !9343)
!9350 = !DILocalVariable(name: "ix_", arg: 2, scope: !9343, file: !2049, line: 31, type: !5)
!9351 = !DILocation(line: 0, scope: !9343)
!9352 = distinct !DISubprogram(name: "gsi_last_bb", scope: !389, file: !389, line: 4450, type: !6057, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9353 = !DILocalVariable(name: "bb", arg: 1, scope: !9352, file: !389, line: 4450, type: !1454)
!9354 = !DILocation(line: 4450, column: 26, scope: !9352)
!9355 = !DILocalVariable(name: "i", scope: !9352, file: !389, line: 4452, type: !4406)
!9356 = !DILocation(line: 4452, column: 24, scope: !9352)
!9357 = !DILocalVariable(name: "seq", scope: !9352, file: !389, line: 4453, type: !992)
!9358 = !DILocation(line: 4453, column: 14, scope: !9352)
!9359 = !DILocation(line: 4455, column: 17, scope: !9352)
!9360 = !DILocation(line: 4455, column: 9, scope: !9352)
!9361 = !DILocation(line: 4455, column: 7, scope: !9352)
!9362 = !DILocation(line: 4456, column: 28, scope: !9352)
!9363 = !DILocation(line: 4456, column: 11, scope: !9352)
!9364 = !DILocation(line: 4456, column: 5, scope: !9352)
!9365 = !DILocation(line: 4456, column: 9, scope: !9352)
!9366 = !DILocation(line: 4457, column: 11, scope: !9352)
!9367 = !DILocation(line: 4457, column: 5, scope: !9352)
!9368 = !DILocation(line: 4457, column: 9, scope: !9352)
!9369 = !DILocation(line: 4458, column: 10, scope: !9352)
!9370 = !DILocation(line: 4458, column: 5, scope: !9352)
!9371 = !DILocation(line: 4458, column: 8, scope: !9352)
!9372 = !DILocation(line: 4460, column: 3, scope: !9352)
!9373 = distinct !DISubprogram(name: "replace_uses_equiv_to_x_with_y", scope: !1, file: !1, line: 2032, type: !9374, scopeLine: 2036, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9374 = !DISubroutineType(types: !9375)
!9375 = !{null, !1217, !1002, !675, !644, !675, !675, !1486, !6451}
!9376 = !DILocalVariable(name: "loop", arg: 1, scope: !9373, file: !1, line: 2032, type: !1217)
!9377 = !DILocation(line: 2032, column: 46, scope: !9373)
!9378 = !DILocalVariable(name: "stmt", arg: 2, scope: !9373, file: !1, line: 2032, type: !1002)
!9379 = !DILocation(line: 2032, column: 59, scope: !9373)
!9380 = !DILocalVariable(name: "x", arg: 3, scope: !9373, file: !1, line: 2032, type: !675)
!9381 = !DILocation(line: 2032, column: 70, scope: !9373)
!9382 = !DILocalVariable(name: "xstep", arg: 4, scope: !9373, file: !1, line: 2033, type: !644)
!9383 = !DILocation(line: 2033, column: 9, scope: !9373)
!9384 = !DILocalVariable(name: "y", arg: 5, scope: !9373, file: !1, line: 2033, type: !675)
!9385 = !DILocation(line: 2033, column: 21, scope: !9373)
!9386 = !DILocalVariable(name: "yinit", arg: 6, scope: !9373, file: !1, line: 2033, type: !675)
!9387 = !DILocation(line: 2033, column: 29, scope: !9373)
!9388 = !DILocalVariable(name: "replacements", arg: 7, scope: !9373, file: !1, line: 2034, type: !1486)
!9389 = !DILocation(line: 2034, column: 12, scope: !9373)
!9390 = !DILocalVariable(name: "firstbsi", arg: 8, scope: !9373, file: !1, line: 2035, type: !6451)
!9391 = !DILocation(line: 2035, column: 27, scope: !9373)
!9392 = !DILocalVariable(name: "iter", scope: !9373, file: !1, line: 2037, type: !6193)
!9393 = !DILocation(line: 2037, column: 15, scope: !9373)
!9394 = !DILocalVariable(name: "use_p", scope: !9373, file: !1, line: 2038, type: !2072)
!9395 = !DILocation(line: 2038, column: 17, scope: !9373)
!9396 = !DILocation(line: 2040, column: 3, scope: !9397)
!9397 = distinct !DILexicalBlock(scope: !9373, file: !1, line: 2040, column: 3)
!9398 = !DILocation(line: 2040, column: 3, scope: !9399)
!9399 = distinct !DILexicalBlock(scope: !9397, file: !1, line: 2040, column: 3)
!9400 = !DILocalVariable(name: "use", scope: !9401, file: !1, line: 2042, type: !675)
!9401 = distinct !DILexicalBlock(scope: !9399, file: !1, line: 2041, column: 5)
!9402 = !DILocation(line: 2042, column: 12, scope: !9401)
!9403 = !DILocation(line: 2042, column: 18, scope: !9401)
!9404 = !DILocalVariable(name: "step", scope: !9401, file: !1, line: 2043, type: !675)
!9405 = !DILocation(line: 2043, column: 12, scope: !9401)
!9406 = !DILocalVariable(name: "scev", scope: !9401, file: !1, line: 2044, type: !675)
!9407 = !DILocation(line: 2044, column: 12, scope: !9401)
!9408 = !DILocalVariable(name: "init", scope: !9401, file: !1, line: 2044, type: !675)
!9409 = !DILocation(line: 2044, column: 18, scope: !9401)
!9410 = !DILocalVariable(name: "val", scope: !9401, file: !1, line: 2044, type: !675)
!9411 = !DILocation(line: 2044, column: 24, scope: !9401)
!9412 = !DILocalVariable(name: "var", scope: !9401, file: !1, line: 2044, type: !675)
!9413 = !DILocation(line: 2044, column: 29, scope: !9401)
!9414 = !DILocalVariable(name: "setstmt", scope: !9401, file: !1, line: 2045, type: !1002)
!9415 = !DILocation(line: 2045, column: 14, scope: !9401)
!9416 = !DILocalVariable(name: "h", scope: !9401, file: !1, line: 2046, type: !2092)
!9417 = !DILocation(line: 2046, column: 24, scope: !9401)
!9418 = !DILocalVariable(name: "in", scope: !9401, file: !1, line: 2046, type: !2093)
!9419 = !DILocation(line: 2046, column: 27, scope: !9401)
!9420 = !DILocalVariable(name: "loc", scope: !9401, file: !1, line: 2047, type: !1509)
!9421 = !DILocation(line: 2047, column: 14, scope: !9401)
!9422 = !DILocation(line: 2050, column: 11, scope: !9423)
!9423 = distinct !DILexicalBlock(scope: !9401, file: !1, line: 2050, column: 11)
!9424 = !DILocation(line: 2050, column: 18, scope: !9423)
!9425 = !DILocation(line: 2050, column: 15, scope: !9423)
!9426 = !DILocation(line: 2050, column: 11, scope: !9401)
!9427 = !DILocation(line: 2052, column: 4, scope: !9428)
!9428 = distinct !DILexicalBlock(scope: !9423, file: !1, line: 2051, column: 2)
!9429 = !DILocation(line: 2053, column: 4, scope: !9428)
!9430 = !DILocation(line: 2056, column: 38, scope: !9401)
!9431 = !DILocation(line: 2057, column: 36, scope: !9401)
!9432 = !DILocation(line: 2057, column: 42, scope: !9401)
!9433 = !DILocation(line: 2057, column: 10, scope: !9401)
!9434 = !DILocation(line: 2056, column: 14, scope: !9401)
!9435 = !DILocation(line: 2056, column: 12, scope: !9401)
!9436 = !DILocation(line: 2059, column: 11, scope: !9437)
!9437 = distinct !DILexicalBlock(scope: !9401, file: !1, line: 2059, column: 11)
!9438 = !DILocation(line: 2059, column: 16, scope: !9437)
!9439 = !DILocation(line: 2059, column: 24, scope: !9437)
!9440 = !DILocation(line: 2059, column: 27, scope: !9437)
!9441 = !DILocation(line: 2059, column: 35, scope: !9437)
!9442 = !DILocation(line: 2059, column: 32, scope: !9437)
!9443 = !DILocation(line: 2059, column: 11, scope: !9401)
!9444 = !DILocation(line: 2060, column: 2, scope: !9437)
!9445 = !DILocation(line: 2062, column: 42, scope: !9401)
!9446 = !DILocation(line: 2062, column: 48, scope: !9401)
!9447 = !DILocation(line: 2062, column: 54, scope: !9401)
!9448 = !DILocation(line: 2062, column: 14, scope: !9401)
!9449 = !DILocation(line: 2062, column: 12, scope: !9401)
!9450 = !DILocation(line: 2063, column: 11, scope: !9451)
!9451 = distinct !DILexicalBlock(scope: !9401, file: !1, line: 2063, column: 11)
!9452 = !DILocation(line: 2063, column: 16, scope: !9451)
!9453 = !DILocation(line: 2064, column: 4, scope: !9451)
!9454 = !DILocation(line: 2064, column: 7, scope: !9451)
!9455 = !DILocation(line: 2064, column: 15, scope: !9451)
!9456 = !DILocation(line: 2064, column: 12, scope: !9451)
!9457 = !DILocation(line: 2065, column: 4, scope: !9451)
!9458 = !DILocation(line: 2065, column: 7, scope: !9451)
!9459 = !DILocation(line: 2065, column: 24, scope: !9451)
!9460 = !DILocation(line: 2066, column: 4, scope: !9451)
!9461 = !DILocation(line: 2066, column: 22, scope: !9451)
!9462 = !DILocation(line: 2066, column: 7, scope: !9451)
!9463 = !DILocation(line: 2066, column: 31, scope: !9451)
!9464 = !DILocation(line: 2066, column: 28, scope: !9451)
!9465 = !DILocation(line: 2063, column: 11, scope: !9401)
!9466 = !DILocation(line: 2067, column: 2, scope: !9451)
!9467 = !DILocation(line: 2071, column: 17, scope: !9401)
!9468 = !DILocation(line: 2071, column: 36, scope: !9401)
!9469 = !DILocation(line: 2071, column: 10, scope: !9401)
!9470 = !DILocation(line: 2071, column: 15, scope: !9401)
!9471 = !DILocation(line: 2072, column: 22, scope: !9401)
!9472 = !DILocation(line: 2072, column: 10, scope: !9401)
!9473 = !DILocation(line: 2072, column: 15, scope: !9401)
!9474 = !DILocation(line: 2072, column: 20, scope: !9401)
!9475 = !DILocation(line: 2073, column: 52, scope: !9401)
!9476 = !DILocation(line: 2073, column: 66, scope: !9401)
!9477 = !DILocation(line: 2073, column: 74, scope: !9401)
!9478 = !DILocation(line: 2073, column: 31, scope: !9401)
!9479 = !DILocation(line: 2073, column: 11, scope: !9401)
!9480 = !DILocation(line: 2073, column: 9, scope: !9401)
!9481 = !DILocation(line: 2074, column: 11, scope: !9482)
!9482 = distinct !DILexicalBlock(scope: !9401, file: !1, line: 2074, column: 11)
!9483 = !DILocation(line: 2074, column: 13, scope: !9482)
!9484 = !DILocation(line: 2074, column: 11, scope: !9401)
!9485 = !DILocation(line: 2076, column: 4, scope: !9486)
!9486 = distinct !DILexicalBlock(scope: !9482, file: !1, line: 2075, column: 2)
!9487 = !DILocation(line: 2077, column: 4, scope: !9486)
!9488 = !DILocation(line: 2082, column: 45, scope: !9401)
!9489 = !DILocation(line: 2082, column: 51, scope: !9401)
!9490 = !DILocation(line: 2082, column: 57, scope: !9401)
!9491 = !DILocation(line: 2082, column: 14, scope: !9401)
!9492 = !DILocation(line: 2082, column: 12, scope: !9401)
!9493 = !DILocation(line: 2083, column: 7, scope: !9401)
!9494 = !DILocation(line: 2084, column: 11, scope: !9495)
!9495 = distinct !DILexicalBlock(scope: !9401, file: !1, line: 2084, column: 11)
!9496 = !DILocation(line: 2084, column: 30, scope: !9495)
!9497 = !DILocation(line: 2084, column: 27, scope: !9495)
!9498 = !DILocation(line: 2084, column: 11, scope: !9401)
!9499 = !DILocation(line: 2086, column: 10, scope: !9500)
!9500 = distinct !DILexicalBlock(scope: !9495, file: !1, line: 2085, column: 2)
!9501 = !DILocation(line: 2086, column: 8, scope: !9500)
!9502 = !DILocation(line: 2087, column: 10, scope: !9500)
!9503 = !DILocation(line: 2087, column: 8, scope: !9500)
!9504 = !DILocation(line: 2088, column: 8, scope: !9505)
!9505 = distinct !DILexicalBlock(scope: !9500, file: !1, line: 2088, column: 8)
!9506 = !DILocation(line: 2088, column: 15, scope: !9505)
!9507 = !DILocation(line: 2088, column: 12, scope: !9505)
!9508 = !DILocation(line: 2088, column: 8, scope: !9500)
!9509 = !DILocation(line: 2092, column: 8, scope: !9510)
!9510 = distinct !DILexicalBlock(scope: !9505, file: !1, line: 2089, column: 7)
!9511 = !DILocation(line: 2093, column: 8, scope: !9510)
!9512 = !DILocation(line: 2095, column: 2, scope: !9500)
!9513 = !DILocation(line: 2098, column: 10, scope: !9514)
!9514 = distinct !DILexicalBlock(scope: !9495, file: !1, line: 2097, column: 2)
!9515 = !DILocation(line: 2098, column: 8, scope: !9514)
!9516 = !DILocation(line: 2099, column: 10, scope: !9514)
!9517 = !DILocation(line: 2099, column: 8, scope: !9514)
!9518 = !DILocation(line: 2100, column: 10, scope: !9514)
!9519 = !DILocation(line: 2100, column: 8, scope: !9514)
!9520 = !DILocation(line: 2106, column: 29, scope: !9401)
!9521 = !DILocation(line: 2106, column: 13, scope: !9401)
!9522 = !DILocation(line: 2106, column: 11, scope: !9401)
!9523 = !DILocation(line: 2107, column: 27, scope: !9401)
!9524 = !DILocation(line: 2107, column: 7, scope: !9401)
!9525 = !DILocation(line: 2108, column: 39, scope: !9401)
!9526 = !DILocation(line: 2108, column: 49, scope: !9401)
!9527 = !DILocation(line: 2108, column: 13, scope: !9401)
!9528 = !DILocation(line: 2108, column: 11, scope: !9401)
!9529 = !DILocation(line: 2110, column: 17, scope: !9401)
!9530 = !DILocation(line: 2110, column: 15, scope: !9401)
!9531 = !DILocation(line: 2111, column: 28, scope: !9401)
!9532 = !DILocation(line: 2111, column: 33, scope: !9401)
!9533 = !DILocation(line: 2111, column: 13, scope: !9401)
!9534 = !DILocation(line: 2111, column: 11, scope: !9401)
!9535 = !DILocation(line: 2112, column: 30, scope: !9401)
!9536 = !DILocation(line: 2112, column: 39, scope: !9401)
!9537 = !DILocation(line: 2112, column: 7, scope: !9401)
!9538 = !DILocation(line: 2113, column: 26, scope: !9401)
!9539 = !DILocation(line: 2113, column: 36, scope: !9401)
!9540 = !DILocation(line: 2113, column: 7, scope: !9401)
!9541 = !DILocation(line: 2114, column: 20, scope: !9401)
!9542 = !DILocation(line: 2114, column: 7, scope: !9401)
!9543 = !DILocation(line: 2115, column: 7, scope: !9401)
!9544 = !DILocation(line: 2116, column: 11, scope: !9401)
!9545 = !DILocation(line: 2116, column: 9, scope: !9401)
!9546 = !DILocation(line: 2117, column: 20, scope: !9401)
!9547 = !DILocation(line: 2117, column: 7, scope: !9401)
!9548 = !DILocation(line: 2117, column: 10, scope: !9401)
!9549 = !DILocation(line: 2117, column: 15, scope: !9401)
!9550 = !DILocation(line: 2118, column: 22, scope: !9401)
!9551 = !DILocation(line: 2118, column: 7, scope: !9401)
!9552 = !DILocation(line: 2118, column: 10, scope: !9401)
!9553 = !DILocation(line: 2118, column: 15, scope: !9401)
!9554 = !DILocation(line: 2118, column: 20, scope: !9401)
!9555 = !DILocation(line: 2119, column: 15, scope: !9401)
!9556 = !DILocation(line: 2119, column: 7, scope: !9401)
!9557 = !DILocation(line: 2119, column: 10, scope: !9401)
!9558 = !DILocation(line: 2119, column: 13, scope: !9401)
!9559 = !DILocation(line: 2120, column: 39, scope: !9401)
!9560 = !DILocation(line: 2120, column: 53, scope: !9401)
!9561 = !DILocation(line: 2120, column: 59, scope: !9401)
!9562 = !DILocation(line: 2120, column: 13, scope: !9401)
!9563 = !DILocation(line: 2120, column: 11, scope: !9401)
!9564 = !DILocation(line: 2121, column: 7, scope: !9401)
!9565 = !DILocation(line: 2122, column: 35, scope: !9401)
!9566 = !DILocation(line: 2122, column: 29, scope: !9401)
!9567 = !DILocation(line: 2122, column: 7, scope: !9401)
!9568 = !DILocation(line: 2122, column: 33, scope: !9401)
!9569 = !DILocation(line: 2123, column: 5, scope: !9401)
!9570 = distinct !{!9570, !9396, !9571}
!9571 = !DILocation(line: 2123, column: 5, scope: !9397)
!9572 = !DILocation(line: 2124, column: 1, scope: !9373)
!9573 = distinct !DISubprogram(name: "gimple_vop", scope: !5479, file: !5479, line: 49, type: !9574, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9574 = !DISubroutineType(types: !9575)
!9575 = !{!675, !9576}
!9576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9577, size: 64)
!9577 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1443)
!9578 = !DILocalVariable(name: "fun", arg: 1, scope: !9573, file: !5479, line: 49, type: !9576)
!9579 = !DILocation(line: 49, column: 36, scope: !9573)
!9580 = !DILocation(line: 51, column: 3, scope: !9573)
!9581 = !DILocation(line: 52, column: 10, scope: !9573)
!9582 = !DILocation(line: 52, column: 15, scope: !9573)
!9583 = !DILocation(line: 52, column: 26, scope: !9573)
!9584 = !DILocation(line: 52, column: 3, scope: !9573)
!9585 = distinct !DISubprogram(name: "VEC_source_location_base_space", scope: !1, file: !1, line: 2351, type: !9586, scopeLine: 2351, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9586 = !DISubroutineType(types: !9587)
!9587 = !{!644, !9300, !644}
!9588 = !DILocalVariable(name: "vec_", arg: 1, scope: !9585, file: !1, line: 2351, type: !9300)
!9589 = !DILocation(line: 2351, column: 1, scope: !9585)
!9590 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9585, file: !1, line: 2351, type: !644)
!9591 = distinct !DISubprogram(name: "single_succ_p", scope: !341, file: !341, line: 626, type: !9592, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9592 = !DISubroutineType(types: !9593)
!9593 = !{!793, !8753}
!9594 = !DILocalVariable(name: "bb", arg: 1, scope: !9591, file: !341, line: 626, type: !8753)
!9595 = !DILocation(line: 626, column: 34, scope: !9591)
!9596 = !DILocation(line: 628, column: 10, scope: !9591)
!9597 = !DILocation(line: 628, column: 33, scope: !9591)
!9598 = !DILocation(line: 628, column: 3, scope: !9591)
!9599 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !341, file: !341, line: 150, type: !9600, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9600 = !DISubroutineType(types: !9601)
!9601 = !{!5, !8721}
!9602 = !DILocalVariable(name: "vec_", arg: 1, scope: !9599, file: !341, line: 150, type: !8721)
!9603 = !DILocation(line: 150, column: 1, scope: !9599)
!9604 = distinct !DISubprogram(name: "single_pred_p", scope: !341, file: !341, line: 634, type: !9592, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9605 = !DILocalVariable(name: "bb", arg: 1, scope: !9604, file: !341, line: 634, type: !8753)
!9606 = !DILocation(line: 634, column: 34, scope: !9604)
!9607 = !DILocation(line: 636, column: 10, scope: !9604)
!9608 = !DILocation(line: 636, column: 33, scope: !9604)
!9609 = !DILocation(line: 636, column: 3, scope: !9604)
!9610 = distinct !DISubprogram(name: "gimple_seq_last", scope: !389, file: !389, line: 178, type: !8772, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9611 = !DILocalVariable(name: "s", arg: 1, scope: !9610, file: !389, line: 178, type: !8774)
!9612 = !DILocation(line: 178, column: 35, scope: !9610)
!9613 = !DILocation(line: 180, column: 10, scope: !9610)
!9614 = !DILocation(line: 180, column: 14, scope: !9610)
!9615 = !DILocation(line: 180, column: 17, scope: !9610)
!9616 = !DILocation(line: 180, column: 3, scope: !9610)
!9617 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !5479, file: !5479, line: 233, type: !9618, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9618 = !DISubroutineType(types: !9619)
!9619 = !{null, !2072, !675}
!9620 = !DILocalVariable(name: "use", arg: 1, scope: !9617, file: !5479, line: 233, type: !2072)
!9621 = !DILocation(line: 233, column: 37, scope: !9617)
!9622 = !DILocalVariable(name: "val", arg: 2, scope: !9617, file: !5479, line: 233, type: !675)
!9623 = !DILocation(line: 233, column: 47, scope: !9617)
!9624 = !DILocation(line: 235, column: 19, scope: !9617)
!9625 = !DILocation(line: 235, column: 3, scope: !9617)
!9626 = !DILocation(line: 236, column: 17, scope: !9617)
!9627 = !DILocation(line: 236, column: 5, scope: !9617)
!9628 = !DILocation(line: 236, column: 10, scope: !9617)
!9629 = !DILocation(line: 236, column: 15, scope: !9617)
!9630 = !DILocation(line: 237, column: 17, scope: !9617)
!9631 = !DILocation(line: 237, column: 22, scope: !9617)
!9632 = !DILocation(line: 237, column: 3, scope: !9617)
!9633 = !DILocation(line: 238, column: 1, scope: !9617)
!9634 = distinct !DISubprogram(name: "link_imm_use", scope: !5479, file: !5479, line: 214, type: !9635, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9635 = !DISubroutineType(types: !9636)
!9636 = !{null, !2073, !675}
!9637 = !DILocalVariable(name: "linknode", arg: 1, scope: !9634, file: !5479, line: 214, type: !2073)
!9638 = !DILocation(line: 214, column: 34, scope: !9634)
!9639 = !DILocalVariable(name: "def", arg: 2, scope: !9634, file: !5479, line: 214, type: !675)
!9640 = !DILocation(line: 214, column: 49, scope: !9634)
!9641 = !DILocalVariable(name: "root", scope: !9634, file: !5479, line: 216, type: !2073)
!9642 = !DILocation(line: 216, column: 22, scope: !9634)
!9643 = !DILocation(line: 218, column: 8, scope: !9644)
!9644 = distinct !DILexicalBlock(scope: !9634, file: !5479, line: 218, column: 7)
!9645 = !DILocation(line: 218, column: 12, scope: !9644)
!9646 = !DILocation(line: 218, column: 15, scope: !9644)
!9647 = !DILocation(line: 218, column: 31, scope: !9644)
!9648 = !DILocation(line: 218, column: 7, scope: !9634)
!9649 = !DILocation(line: 219, column: 5, scope: !9644)
!9650 = !DILocation(line: 219, column: 15, scope: !9644)
!9651 = !DILocation(line: 219, column: 20, scope: !9644)
!9652 = !DILocation(line: 222, column: 16, scope: !9653)
!9653 = distinct !DILexicalBlock(scope: !9644, file: !5479, line: 221, column: 5)
!9654 = !DILocation(line: 222, column: 12, scope: !9653)
!9655 = !DILocation(line: 227, column: 29, scope: !9653)
!9656 = !DILocation(line: 227, column: 39, scope: !9653)
!9657 = !DILocation(line: 227, column: 7, scope: !9653)
!9658 = !DILocation(line: 229, column: 1, scope: !9634)
!9659 = distinct !DISubprogram(name: "tree_operand_length", scope: !133, file: !133, line: 5347, type: !9660, scopeLine: 5348, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9660 = !DISubroutineType(types: !9661)
!9661 = !{!644, !9248}
!9662 = !DILocalVariable(name: "node", arg: 1, scope: !9659, file: !133, line: 5347, type: !9248)
!9663 = !DILocation(line: 5347, column: 33, scope: !9659)
!9664 = !DILocation(line: 5349, column: 7, scope: !9665)
!9665 = distinct !DILexicalBlock(scope: !9659, file: !133, line: 5349, column: 7)
!9666 = !DILocation(line: 5349, column: 7, scope: !9659)
!9667 = !DILocation(line: 5350, column: 12, scope: !9665)
!9668 = !DILocation(line: 5350, column: 5, scope: !9665)
!9669 = !DILocation(line: 5352, column: 12, scope: !9665)
!9670 = !DILocation(line: 5352, column: 5, scope: !9665)
!9671 = !DILocation(line: 5353, column: 1, scope: !9659)
!9672 = distinct !DISubprogram(name: "VEC_lambda_vector_gc_alloc", scope: !637, file: !637, line: 34, type: !9673, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9673 = !DISubroutineType(types: !9674)
!9674 = !{!2146, !644}
!9675 = !DILocalVariable(name: "alloc_", arg: 1, scope: !9672, file: !637, line: 34, type: !644)
!9676 = !DILocation(line: 34, column: 1, scope: !9672)
!9677 = distinct !DISubprogram(name: "av_for_af", scope: !1, file: !1, line: 2769, type: !9678, scopeLine: 2770, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9678 = !DISubroutineType(types: !9679)
!9679 = !{!793, !675, !642, !2134}
!9680 = !DILocalVariable(name: "access_fun", arg: 1, scope: !9677, file: !1, line: 2769, type: !675)
!9681 = !DILocation(line: 2769, column: 17, scope: !9677)
!9682 = !DILocalVariable(name: "cy", arg: 2, scope: !9677, file: !1, line: 2769, type: !642)
!9683 = !DILocation(line: 2769, column: 43, scope: !9677)
!9684 = !DILocalVariable(name: "am", arg: 3, scope: !9677, file: !1, line: 2769, type: !2134)
!9685 = !DILocation(line: 2769, column: 69, scope: !9677)
!9686 = !DILocation(line: 2771, column: 11, scope: !9677)
!9687 = !DILocation(line: 2771, column: 3, scope: !9677)
!9688 = !DILocalVariable(name: "left", scope: !9689, file: !1, line: 2775, type: !675)
!9689 = distinct !DILexicalBlock(scope: !9690, file: !1, line: 2774, column: 7)
!9690 = distinct !DILexicalBlock(scope: !9677, file: !1, line: 2772, column: 5)
!9691 = !DILocation(line: 2775, column: 7, scope: !9689)
!9692 = !DILocation(line: 2775, column: 14, scope: !9689)
!9693 = !DILocalVariable(name: "right", scope: !9689, file: !1, line: 2776, type: !675)
!9694 = !DILocation(line: 2776, column: 7, scope: !9689)
!9695 = !DILocation(line: 2776, column: 15, scope: !9689)
!9696 = !DILocalVariable(name: "var", scope: !9689, file: !1, line: 2777, type: !5)
!9697 = !DILocation(line: 2777, column: 11, scope: !9689)
!9698 = !DILocation(line: 2779, column: 6, scope: !9699)
!9699 = distinct !DILexicalBlock(scope: !9689, file: !1, line: 2779, column: 6)
!9700 = !DILocation(line: 2779, column: 24, scope: !9699)
!9701 = !DILocation(line: 2779, column: 6, scope: !9689)
!9702 = !DILocation(line: 2780, column: 4, scope: !9699)
!9703 = !DILocation(line: 2782, column: 34, scope: !9689)
!9704 = !DILocation(line: 2782, column: 38, scope: !9689)
!9705 = !DILocation(line: 2782, column: 8, scope: !9689)
!9706 = !DILocation(line: 2782, column: 6, scope: !9689)
!9707 = !DILocation(line: 2783, column: 27, scope: !9689)
!9708 = !DILocation(line: 2783, column: 12, scope: !9689)
!9709 = !DILocation(line: 2783, column: 2, scope: !9689)
!9710 = !DILocation(line: 2783, column: 5, scope: !9689)
!9711 = !DILocation(line: 2783, column: 10, scope: !9689)
!9712 = !DILocation(line: 2785, column: 6, scope: !9713)
!9713 = distinct !DILexicalBlock(scope: !9689, file: !1, line: 2785, column: 6)
!9714 = !DILocation(line: 2785, column: 23, scope: !9713)
!9715 = !DILocation(line: 2785, column: 6, scope: !9689)
!9716 = !DILocation(line: 2786, column: 22, scope: !9713)
!9717 = !DILocation(line: 2786, column: 28, scope: !9713)
!9718 = !DILocation(line: 2786, column: 32, scope: !9713)
!9719 = !DILocation(line: 2786, column: 11, scope: !9713)
!9720 = !DILocation(line: 2786, column: 4, scope: !9713)
!9721 = !DILocation(line: 2788, column: 27, scope: !9713)
!9722 = !DILocation(line: 2788, column: 33, scope: !9713)
!9723 = !DILocation(line: 2788, column: 37, scope: !9713)
!9724 = !DILocation(line: 2788, column: 11, scope: !9713)
!9725 = !DILocation(line: 2788, column: 4, scope: !9713)
!9726 = !DILocation(line: 2793, column: 30, scope: !9690)
!9727 = !DILocation(line: 2793, column: 42, scope: !9690)
!9728 = !DILocation(line: 2793, column: 46, scope: !9690)
!9729 = !DILocation(line: 2793, column: 14, scope: !9690)
!9730 = !DILocation(line: 2793, column: 7, scope: !9690)
!9731 = !DILocation(line: 2796, column: 7, scope: !9690)
!9732 = !DILocation(line: 2798, column: 1, scope: !9677)
!9733 = distinct !DISubprogram(name: "VEC_lambda_vector_base_quick_push", scope: !637, file: !637, line: 32, type: !9734, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9734 = !DISubroutineType(types: !9735)
!9735 = !{!2035, !9736, !642}
!9736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2151, size: 64)
!9737 = !DILocalVariable(name: "vec_", arg: 1, scope: !9733, file: !637, line: 32, type: !9736)
!9738 = !DILocation(line: 32, column: 1, scope: !9733)
!9739 = !DILocalVariable(name: "obj_", arg: 2, scope: !9733, file: !637, line: 32, type: !642)
!9740 = !DILocalVariable(name: "slot_", scope: !9733, file: !637, line: 32, type: !2035)
!9741 = distinct !DISubprogram(name: "am_vector_index_for_loop", scope: !2103, file: !2103, line: 148, type: !9742, scopeLine: 149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9742 = !DISubroutineType(types: !9743)
!9743 = !{!644, !2134, !644}
!9744 = !DILocalVariable(name: "access_matrix", arg: 1, scope: !9741, file: !2103, line: 148, type: !2134)
!9745 = !DILocation(line: 148, column: 49, scope: !9741)
!9746 = !DILocalVariable(name: "loop_num", arg: 2, scope: !9741, file: !2103, line: 148, type: !644)
!9747 = !DILocation(line: 148, column: 68, scope: !9741)
!9748 = !DILocalVariable(name: "i", scope: !9741, file: !2103, line: 150, type: !644)
!9749 = !DILocation(line: 150, column: 7, scope: !9741)
!9750 = !DILocalVariable(name: "l", scope: !9741, file: !2103, line: 151, type: !1244)
!9751 = !DILocation(line: 151, column: 10, scope: !9741)
!9752 = !DILocation(line: 153, column: 10, scope: !9753)
!9753 = distinct !DILexicalBlock(scope: !9741, file: !2103, line: 153, column: 3)
!9754 = !DILocation(line: 153, column: 8, scope: !9753)
!9755 = !DILocation(line: 153, column: 15, scope: !9756)
!9756 = distinct !DILexicalBlock(scope: !9753, file: !2103, line: 153, column: 3)
!9757 = !DILocation(line: 153, column: 3, scope: !9753)
!9758 = !DILocation(line: 154, column: 9, scope: !9759)
!9759 = distinct !DILexicalBlock(scope: !9756, file: !2103, line: 154, column: 9)
!9760 = !DILocation(line: 154, column: 12, scope: !9759)
!9761 = !DILocation(line: 154, column: 19, scope: !9759)
!9762 = !DILocation(line: 154, column: 16, scope: !9759)
!9763 = !DILocation(line: 154, column: 9, scope: !9756)
!9764 = !DILocation(line: 155, column: 14, scope: !9759)
!9765 = !DILocation(line: 155, column: 7, scope: !9759)
!9766 = !DILocation(line: 153, column: 74, scope: !9756)
!9767 = !DILocation(line: 153, column: 3, scope: !9756)
!9768 = distinct !{!9768, !9757, !9769}
!9769 = !DILocation(line: 155, column: 14, scope: !9753)
!9770 = !DILocation(line: 157, column: 3, scope: !9741)
!9771 = !DILocation(line: 159, column: 5, scope: !9741)
!9772 = !DILocation(line: 161, column: 1, scope: !9741)
!9773 = distinct !DISubprogram(name: "av_for_af_base", scope: !1, file: !1, line: 2707, type: !9774, scopeLine: 2709, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9774 = !DISubroutineType(types: !9775)
!9775 = !{!793, !675, !642, !2134, !644}
!9776 = !DILocalVariable(name: "base_expr", arg: 1, scope: !9773, file: !1, line: 2707, type: !675)
!9777 = !DILocation(line: 2707, column: 22, scope: !9773)
!9778 = !DILocalVariable(name: "cy", arg: 2, scope: !9773, file: !1, line: 2707, type: !642)
!9779 = !DILocation(line: 2707, column: 47, scope: !9773)
!9780 = !DILocalVariable(name: "am", arg: 3, scope: !9773, file: !1, line: 2707, type: !2134)
!9781 = !DILocation(line: 2707, column: 73, scope: !9773)
!9782 = !DILocalVariable(name: "cst", arg: 4, scope: !9773, file: !1, line: 2708, type: !644)
!9783 = !DILocation(line: 2708, column: 7, scope: !9773)
!9784 = !DILocalVariable(name: "result", scope: !9773, file: !1, line: 2710, type: !793)
!9785 = !DILocation(line: 2710, column: 8, scope: !9773)
!9786 = !DILocation(line: 2712, column: 11, scope: !9773)
!9787 = !DILocation(line: 2712, column: 3, scope: !9773)
!9788 = !DILocation(line: 2716, column: 56, scope: !9789)
!9789 = distinct !DILexicalBlock(scope: !9773, file: !1, line: 2713, column: 5)
!9790 = !DILocation(line: 2716, column: 41, scope: !9789)
!9791 = !DILocation(line: 2716, column: 69, scope: !9789)
!9792 = !DILocation(line: 2716, column: 67, scope: !9789)
!9793 = !DILocation(line: 2716, column: 7, scope: !9789)
!9794 = !DILocation(line: 2716, column: 10, scope: !9789)
!9795 = !DILocation(line: 2716, column: 38, scope: !9789)
!9796 = !DILocation(line: 2717, column: 7, scope: !9789)
!9797 = !DILocalVariable(name: "param_index", scope: !9798, file: !1, line: 2721, type: !644)
!9798 = distinct !DILexicalBlock(scope: !9789, file: !1, line: 2720, column: 7)
!9799 = !DILocation(line: 2721, column: 6, scope: !9798)
!9800 = !DILocation(line: 2722, column: 43, scope: !9798)
!9801 = !DILocation(line: 2722, column: 54, scope: !9798)
!9802 = !DILocation(line: 2722, column: 4, scope: !9798)
!9803 = !DILocation(line: 2724, column: 6, scope: !9804)
!9804 = distinct !DILexicalBlock(scope: !9798, file: !1, line: 2724, column: 6)
!9805 = !DILocation(line: 2724, column: 18, scope: !9804)
!9806 = !DILocation(line: 2724, column: 6, scope: !9798)
!9807 = !DILocation(line: 2726, column: 24, scope: !9808)
!9808 = distinct !DILexicalBlock(scope: !9804, file: !1, line: 2725, column: 4)
!9809 = !DILocation(line: 2726, column: 30, scope: !9808)
!9810 = !DILocation(line: 2726, column: 33, scope: !9808)
!9811 = !DILocation(line: 2726, column: 28, scope: !9808)
!9812 = !DILocation(line: 2726, column: 6, scope: !9808)
!9813 = !DILocation(line: 2726, column: 9, scope: !9808)
!9814 = !DILocation(line: 2726, column: 22, scope: !9808)
!9815 = !DILocation(line: 2727, column: 6, scope: !9808)
!9816 = !DILocation(line: 2730, column: 2, scope: !9798)
!9817 = !DILocation(line: 2734, column: 30, scope: !9789)
!9818 = !DILocation(line: 2734, column: 59, scope: !9789)
!9819 = !DILocation(line: 2734, column: 63, scope: !9789)
!9820 = !DILocation(line: 2734, column: 67, scope: !9789)
!9821 = !DILocation(line: 2734, column: 14, scope: !9789)
!9822 = !DILocation(line: 2735, column: 2, scope: !9789)
!9823 = !DILocation(line: 2735, column: 21, scope: !9789)
!9824 = !DILocation(line: 2735, column: 50, scope: !9789)
!9825 = !DILocation(line: 2735, column: 54, scope: !9789)
!9826 = !DILocation(line: 2735, column: 58, scope: !9789)
!9827 = !DILocation(line: 2735, column: 5, scope: !9789)
!9828 = !DILocation(line: 0, scope: !9789)
!9829 = !DILocation(line: 2734, column: 7, scope: !9789)
!9830 = !DILocation(line: 2738, column: 30, scope: !9789)
!9831 = !DILocation(line: 2738, column: 59, scope: !9789)
!9832 = !DILocation(line: 2738, column: 63, scope: !9789)
!9833 = !DILocation(line: 2738, column: 67, scope: !9789)
!9834 = !DILocation(line: 2738, column: 14, scope: !9789)
!9835 = !DILocation(line: 2739, column: 2, scope: !9789)
!9836 = !DILocation(line: 2739, column: 21, scope: !9789)
!9837 = !DILocation(line: 2739, column: 50, scope: !9789)
!9838 = !DILocation(line: 2739, column: 54, scope: !9789)
!9839 = !DILocation(line: 2739, column: 63, scope: !9789)
!9840 = !DILocation(line: 2739, column: 61, scope: !9789)
!9841 = !DILocation(line: 2739, column: 5, scope: !9789)
!9842 = !DILocation(line: 2738, column: 7, scope: !9789)
!9843 = !DILocation(line: 2742, column: 11, scope: !9844)
!9844 = distinct !DILexicalBlock(scope: !9789, file: !1, line: 2742, column: 11)
!9845 = !DILocation(line: 2742, column: 51, scope: !9844)
!9846 = !DILocation(line: 2742, column: 11, scope: !9789)
!9847 = !DILocation(line: 2743, column: 27, scope: !9844)
!9848 = !DILocation(line: 2744, column: 6, scope: !9844)
!9849 = !DILocation(line: 2744, column: 10, scope: !9844)
!9850 = !DILocation(line: 2744, column: 14, scope: !9844)
!9851 = !DILocation(line: 2745, column: 21, scope: !9844)
!9852 = !DILocation(line: 2745, column: 6, scope: !9844)
!9853 = !DILocation(line: 2744, column: 18, scope: !9844)
!9854 = !DILocation(line: 2743, column: 11, scope: !9844)
!9855 = !DILocation(line: 2743, column: 9, scope: !9844)
!9856 = !DILocation(line: 2743, column: 2, scope: !9844)
!9857 = !DILocation(line: 2746, column: 16, scope: !9858)
!9858 = distinct !DILexicalBlock(scope: !9844, file: !1, line: 2746, column: 16)
!9859 = !DILocation(line: 2746, column: 56, scope: !9858)
!9860 = !DILocation(line: 2746, column: 16, scope: !9844)
!9861 = !DILocation(line: 2747, column: 27, scope: !9858)
!9862 = !DILocation(line: 2748, column: 6, scope: !9858)
!9863 = !DILocation(line: 2748, column: 10, scope: !9858)
!9864 = !DILocation(line: 2748, column: 14, scope: !9858)
!9865 = !DILocation(line: 2749, column: 21, scope: !9858)
!9866 = !DILocation(line: 2749, column: 6, scope: !9858)
!9867 = !DILocation(line: 2748, column: 18, scope: !9858)
!9868 = !DILocation(line: 2747, column: 11, scope: !9858)
!9869 = !DILocation(line: 2747, column: 9, scope: !9858)
!9870 = !DILocation(line: 2747, column: 2, scope: !9858)
!9871 = !DILocation(line: 2751, column: 9, scope: !9858)
!9872 = !DILocation(line: 2753, column: 14, scope: !9789)
!9873 = !DILocation(line: 2753, column: 7, scope: !9789)
!9874 = !DILocation(line: 2756, column: 30, scope: !9789)
!9875 = !DILocation(line: 2756, column: 59, scope: !9789)
!9876 = !DILocation(line: 2756, column: 63, scope: !9789)
!9877 = !DILocation(line: 2756, column: 72, scope: !9789)
!9878 = !DILocation(line: 2756, column: 70, scope: !9789)
!9879 = !DILocation(line: 2756, column: 14, scope: !9789)
!9880 = !DILocation(line: 2756, column: 7, scope: !9789)
!9881 = !DILocation(line: 2759, column: 7, scope: !9789)
!9882 = !DILocation(line: 2763, column: 1, scope: !9773)
!9883 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !328, file: !328, line: 85, type: !9884, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2210)
!9884 = !DISubroutineType(types: !9885)
!9885 = !{!644, !7976, !5, !9886}
!9886 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1244, size: 64)
!9887 = !DILocalVariable(name: "vec_", arg: 1, scope: !9883, file: !328, line: 85, type: !7976)
!9888 = !DILocation(line: 85, column: 1, scope: !9883)
!9889 = !DILocalVariable(name: "ix_", arg: 2, scope: !9883, file: !328, line: 85, type: !5)
!9890 = !DILocalVariable(name: "ptr", arg: 3, scope: !9883, file: !328, line: 85, type: !9886)
!9891 = !DILocation(line: 85, column: 1, scope: !9892)
!9892 = distinct !DILexicalBlock(scope: !9883, file: !328, line: 85, column: 1)
!9893 = !DILocation(line: 85, column: 1, scope: !9894)
!9894 = distinct !DILexicalBlock(scope: !9892, file: !328, line: 85, column: 1)
!9895 = !DILocation(line: 85, column: 1, scope: !9896)
!9896 = distinct !DILexicalBlock(scope: !9892, file: !328, line: 85, column: 1)
