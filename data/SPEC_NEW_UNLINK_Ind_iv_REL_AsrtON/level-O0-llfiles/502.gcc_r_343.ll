; ModuleID = 'value-prof.c'
source_filename = "value-prof.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.value_prof_hooks = type { void (%struct.VEC_histogram_value_heap**)*, i8 ()* }
%struct.VEC_histogram_value_heap = type { %struct.VEC_histogram_value_base }
%struct.VEC_histogram_value_base = type { i32, i32, [1 x %struct.histogram_value_t*] }
%struct.histogram_value_t = type { %struct.anon, i32, i32, %union.anon.0 }
%struct.anon = type { %union.tree_node*, %union.gimple_statement_d*, i64*, %struct.histogram_value_t* }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.pointer_set_t = type opaque
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }

@htab_hash_pointer = external dso_local global i32 (i8*)*, align 8
@error_found = internal global i8 0, align 1, !dbg !0
@cfun = external dso_local global %struct.function*, align 8
@.str = private unnamed_addr constant [85 x i8] c"Histogram value statement does not correspond to the statement it is associated with\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [25 x i8] c"verify_histograms failed\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"value-prof.c\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@gimple_value_prof_hooks = internal global %struct.value_prof_hooks { void (%struct.VEC_histogram_value_heap**)* @gimple_find_values_to_profile, i8 ()* @gimple_value_profile_transformations }, align 8, !dbg !3167
@value_prof_hooks = internal global %struct.value_prof_hooks* null, align 8, !dbg !3155
@.str.4 = private unnamed_addr constant [32 x i8] c"Interval counter range %d -- %d\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c" [\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c" %d:%ld\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c" ] outside range:%ld\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c".\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Pow2 counter \00", align 1
@.str.10 = private unnamed_addr constant [21 x i8] c"pow2:%ld nonpow2:%ld\00", align 1
@.str.11 = private unnamed_addr constant [14 x i8] c"Single value \00", align 1
@.str.12 = private unnamed_addr constant [30 x i8] c"value:%ld match:%ld wrong:%ld\00", align 1
@.str.13 = private unnamed_addr constant [15 x i8] c"Average value \00", align 1
@.str.14 = private unnamed_addr constant [18 x i8] c"sum:%ld times:%ld\00", align 1
@.str.15 = private unnamed_addr constant [11 x i8] c"IOR value \00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"ior:%ld\00", align 1
@.str.17 = private unnamed_addr constant [16 x i8] c"Constant delta \00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"Indirect call \00", align 1
@.str.19 = private unnamed_addr constant [28 x i8] c"value:%ld match:%ld all:%ld\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"Dead histogram\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.21 = private unnamed_addr constant [6 x i8] c"Stmt \00", align 1
@flag_value_profile_transformations = external dso_local global i32, align 4
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.22 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@.str.23 = private unnamed_addr constant [32 x i8] c"Trying transformations on stmt \00", align 1
@.str.24 = private unnamed_addr constant [9 x i8] c"interval\00", align 1
@flag_profile_correction = external dso_local global i32, align 4
@.str.25 = private unnamed_addr constant [37 x i8] c"Mod subtract transformation on insn \00", align 1
@current_function_decl = external dso_local global %union.tree_node*, align 8
@.str.26 = private unnamed_addr constant [99 x i8] c"Correcting inconsistent value profile: %s profiler overall count (%d) does not match BB count (%d)\00", align 1
@.str.27 = private unnamed_addr constant [85 x i8] c"Corrupted value profile: %s profiler overall count (%d) does not match BB count (%d)\00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c"PROF\00", align 1
@.str.29 = private unnamed_addr constant [6 x i8] c"value\00", align 1
@.str.30 = private unnamed_addr constant [21 x i8] c"Div/mod by constant \00", align 1
@.str.31 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@.str.32 = private unnamed_addr constant [25 x i8] c" transformation on insn \00", align 1
@.str.33 = private unnamed_addr constant [39 x i8] c"Mod power of 2 transformation on insn \00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"pow2\00", align 1
@ix86_isa_flags = external dso_local global i32, align 4
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.35 = private unnamed_addr constant [44 x i8] c"Single value %i stringop transformation on \00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"ic\00", align 1
@.str.37 = private unnamed_addr constant [30 x i8] c"Indirect call -> direct call \00", align 1
@.str.38 = private unnamed_addr constant [4 x i8] c"=> \00", align 1
@.str.39 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.40 = private unnamed_addr constant [31 x i8] c"hist->count %ld hist->all %ld\0A\00", align 1
@pid_map = internal global %struct.cgraph_node** null, align 8, !dbg !3169
@cgraph_max_pid = external dso_local global i32, align 4
@cgraph_nodes = external dso_local global %struct.cgraph_node*, align 8

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.histogram_value_t* @gimple_histogram_value(%struct.function* %fun, %union.gimple_statement_d* %stmt) #0 !dbg !3175 {
entry:
  %retval = alloca %struct.histogram_value_t*, align 8
  %fun.addr = alloca %struct.function*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !3179, metadata !DIExpression()), !dbg !3180
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3181, metadata !DIExpression()), !dbg !3182
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3183
  %value_histograms = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 5, !dbg !3183
  %1 = load %struct.htab*, %struct.htab** %value_histograms, align 8, !dbg !3183
  %tobool = icmp ne %struct.htab* %1, null, !dbg !3183
  br i1 %tobool, label %if.end, label %if.then, !dbg !3185

if.then:                                          ; preds = %entry
  store %struct.histogram_value_t* null, %struct.histogram_value_t** %retval, align 8, !dbg !3186
  br label %return, !dbg !3186

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3187
  %value_histograms1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 5, !dbg !3187
  %3 = load %struct.htab*, %struct.htab** %value_histograms1, align 8, !dbg !3187
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3188
  %5 = bitcast %union.gimple_statement_d* %4 to i8*, !dbg !3188
  %6 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !3189
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3190
  %8 = bitcast %union.gimple_statement_d* %7 to i8*, !dbg !3190
  %call = call i32 %6(i8* %8), !dbg !3189
  %call2 = call i8* @htab_find_with_hash(%struct.htab* %3, i8* %5, i32 %call), !dbg !3191
  %9 = bitcast i8* %call2 to %struct.histogram_value_t*, !dbg !3192
  store %struct.histogram_value_t* %9, %struct.histogram_value_t** %retval, align 8, !dbg !3193
  br label %return, !dbg !3193

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.histogram_value_t*, %struct.histogram_value_t** %retval, align 8, !dbg !3194
  ret %struct.histogram_value_t* %10, !dbg !3194
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i8* @htab_find_with_hash(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_add_histogram_value(%struct.function* %fun, %union.gimple_statement_d* %stmt, %struct.histogram_value_t* %hist) #0 !dbg !3195 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %hist.addr = alloca %struct.histogram_value_t*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !3198, metadata !DIExpression()), !dbg !3199
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3200, metadata !DIExpression()), !dbg !3201
  store %struct.histogram_value_t* %hist, %struct.histogram_value_t** %hist.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %hist.addr, metadata !3202, metadata !DIExpression()), !dbg !3203
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3204
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3205
  %call = call %struct.histogram_value_t* @gimple_histogram_value(%struct.function* %0, %union.gimple_statement_d* %1), !dbg !3206
  %2 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3207
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %2, i32 0, i32 0, !dbg !3208
  %next = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 3, !dbg !3209
  store %struct.histogram_value_t* %call, %struct.histogram_value_t** %next, align 8, !dbg !3210
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3211
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3212
  %5 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3213
  call void @set_histogram_value(%struct.function* %3, %union.gimple_statement_d* %4, %struct.histogram_value_t* %5), !dbg !3214
  ret void, !dbg !3215
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_histogram_value(%struct.function* %fun, %union.gimple_statement_d* %stmt, %struct.histogram_value_t* %hist) #0 !dbg !3216 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %hist.addr = alloca %struct.histogram_value_t*, align 8
  %loc = alloca i8**, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !3217, metadata !DIExpression()), !dbg !3218
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3219, metadata !DIExpression()), !dbg !3220
  store %struct.histogram_value_t* %hist, %struct.histogram_value_t** %hist.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %hist.addr, metadata !3221, metadata !DIExpression()), !dbg !3222
  call void @llvm.dbg.declare(metadata i8*** %loc, metadata !3223, metadata !DIExpression()), !dbg !3224
  %0 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3225
  %tobool = icmp ne %struct.histogram_value_t* %0, null, !dbg !3225
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !3227

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3228
  %value_histograms = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 5, !dbg !3228
  %2 = load %struct.htab*, %struct.htab** %value_histograms, align 8, !dbg !3228
  %tobool1 = icmp ne %struct.htab* %2, null, !dbg !3228
  br i1 %tobool1, label %if.end, label %if.then, !dbg !3229

if.then:                                          ; preds = %land.lhs.true
  br label %return, !dbg !3230

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3231
  %value_histograms2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 5, !dbg !3231
  %4 = load %struct.htab*, %struct.htab** %value_histograms2, align 8, !dbg !3231
  %tobool3 = icmp ne %struct.htab* %4, null, !dbg !3231
  br i1 %tobool3, label %if.end6, label %if.then4, !dbg !3233

if.then4:                                         ; preds = %if.end
  %call = call %struct.htab* @htab_create(i64 1, i32 (i8*)* @histogram_hash, i32 (i8*, i8*)* @histogram_eq, void (i8*)* null), !dbg !3234
  %5 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3235
  %value_histograms5 = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 5, !dbg !3235
  store %struct.htab* %call, %struct.htab** %value_histograms5, align 8, !dbg !3236
  br label %if.end6, !dbg !3235

if.end6:                                          ; preds = %if.then4, %if.end
  %6 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3237
  %value_histograms7 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 5, !dbg !3237
  %7 = load %struct.htab*, %struct.htab** %value_histograms7, align 8, !dbg !3237
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3238
  %9 = bitcast %union.gimple_statement_d* %8 to i8*, !dbg !3238
  %10 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !3239
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3240
  %12 = bitcast %union.gimple_statement_d* %11 to i8*, !dbg !3240
  %call8 = call i32 %10(i8* %12), !dbg !3239
  %13 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3241
  %tobool9 = icmp ne %struct.histogram_value_t* %13, null, !dbg !3241
  %14 = zext i1 %tobool9 to i64, !dbg !3241
  %cond = select i1 %tobool9, i32 1, i32 0, !dbg !3241
  %call10 = call i8** @htab_find_slot_with_hash(%struct.htab* %7, i8* %9, i32 %call8, i32 %cond), !dbg !3242
  store i8** %call10, i8*** %loc, align 8, !dbg !3243
  %15 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3244
  %tobool11 = icmp ne %struct.histogram_value_t* %15, null, !dbg !3244
  br i1 %tobool11, label %if.end17, label %if.then12, !dbg !3246

if.then12:                                        ; preds = %if.end6
  %16 = load i8**, i8*** %loc, align 8, !dbg !3247
  %tobool13 = icmp ne i8** %16, null, !dbg !3247
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !3250

if.then14:                                        ; preds = %if.then12
  %17 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3251
  %value_histograms15 = getelementptr inbounds %struct.function, %struct.function* %17, i32 0, i32 5, !dbg !3251
  %18 = load %struct.htab*, %struct.htab** %value_histograms15, align 8, !dbg !3251
  %19 = load i8**, i8*** %loc, align 8, !dbg !3252
  call void @htab_clear_slot(%struct.htab* %18, i8** %19), !dbg !3253
  br label %if.end16, !dbg !3253

if.end16:                                         ; preds = %if.then14, %if.then12
  br label %return, !dbg !3254

if.end17:                                         ; preds = %if.end6
  %20 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3255
  %21 = bitcast %struct.histogram_value_t* %20 to i8*, !dbg !3255
  %22 = load i8**, i8*** %loc, align 8, !dbg !3256
  store i8* %21, i8** %22, align 8, !dbg !3257
  br label %return, !dbg !3258

return:                                           ; preds = %if.end17, %if.end16, %if.then
  ret void, !dbg !3258
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_remove_histogram_value(%struct.function* %fun, %union.gimple_statement_d* %stmt, %struct.histogram_value_t* %hist) #0 !dbg !3259 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %hist.addr = alloca %struct.histogram_value_t*, align 8
  %hist2 = alloca %struct.histogram_value_t*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !3260, metadata !DIExpression()), !dbg !3261
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3262, metadata !DIExpression()), !dbg !3263
  store %struct.histogram_value_t* %hist, %struct.histogram_value_t** %hist.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %hist.addr, metadata !3264, metadata !DIExpression()), !dbg !3265
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %hist2, metadata !3266, metadata !DIExpression()), !dbg !3267
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3268
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3269
  %call = call %struct.histogram_value_t* @gimple_histogram_value(%struct.function* %0, %union.gimple_statement_d* %1), !dbg !3270
  store %struct.histogram_value_t* %call, %struct.histogram_value_t** %hist2, align 8, !dbg !3267
  %2 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3271
  %3 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist2, align 8, !dbg !3273
  %cmp = icmp eq %struct.histogram_value_t* %2, %3, !dbg !3274
  br i1 %cmp, label %if.then, label %if.else, !dbg !3275

if.then:                                          ; preds = %entry
  %4 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3276
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3278
  %6 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3279
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %6, i32 0, i32 0, !dbg !3280
  %next = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 3, !dbg !3281
  %7 = load %struct.histogram_value_t*, %struct.histogram_value_t** %next, align 8, !dbg !3281
  call void @set_histogram_value(%struct.function* %4, %union.gimple_statement_d* %5, %struct.histogram_value_t* %7), !dbg !3282
  br label %if.end, !dbg !3283

if.else:                                          ; preds = %entry
  br label %while.cond, !dbg !3284

while.cond:                                       ; preds = %while.body, %if.else
  %8 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist2, align 8, !dbg !3286
  %hvalue1 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %8, i32 0, i32 0, !dbg !3287
  %next2 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue1, i32 0, i32 3, !dbg !3288
  %9 = load %struct.histogram_value_t*, %struct.histogram_value_t** %next2, align 8, !dbg !3288
  %10 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3289
  %cmp3 = icmp ne %struct.histogram_value_t* %9, %10, !dbg !3290
  br i1 %cmp3, label %while.body, label %while.end, !dbg !3284

while.body:                                       ; preds = %while.cond
  %11 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist2, align 8, !dbg !3291
  %hvalue4 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %11, i32 0, i32 0, !dbg !3292
  %next5 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue4, i32 0, i32 3, !dbg !3293
  %12 = load %struct.histogram_value_t*, %struct.histogram_value_t** %next5, align 8, !dbg !3293
  store %struct.histogram_value_t* %12, %struct.histogram_value_t** %hist2, align 8, !dbg !3294
  br label %while.cond, !dbg !3284, !llvm.loop !3295

while.end:                                        ; preds = %while.cond
  %13 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3296
  %hvalue6 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %13, i32 0, i32 0, !dbg !3297
  %next7 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue6, i32 0, i32 3, !dbg !3298
  %14 = load %struct.histogram_value_t*, %struct.histogram_value_t** %next7, align 8, !dbg !3298
  %15 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist2, align 8, !dbg !3299
  %hvalue8 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %15, i32 0, i32 0, !dbg !3300
  %next9 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue8, i32 0, i32 3, !dbg !3301
  store %struct.histogram_value_t* %14, %struct.histogram_value_t** %next9, align 8, !dbg !3302
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  %16 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3303
  %hvalue10 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %16, i32 0, i32 0, !dbg !3304
  %counters = getelementptr inbounds %struct.anon, %struct.anon* %hvalue10, i32 0, i32 2, !dbg !3305
  %17 = load i64*, i64** %counters, align 8, !dbg !3305
  %18 = bitcast i64* %17 to i8*, !dbg !3303
  call void @free(i8* %18), !dbg !3306
  %19 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3307
  %20 = bitcast %struct.histogram_value_t* %19 to i8*, !dbg !3307
  call void @free(i8* %20), !dbg !3308
  ret void, !dbg !3309
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.histogram_value_t* @gimple_histogram_value_of_type(%struct.function* %fun, %union.gimple_statement_d* %stmt, i32 %type) #0 !dbg !3310 {
entry:
  %retval = alloca %struct.histogram_value_t*, align 8
  %fun.addr = alloca %struct.function*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %type.addr = alloca i32, align 4
  %hist = alloca %struct.histogram_value_t*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !3313, metadata !DIExpression()), !dbg !3314
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3315, metadata !DIExpression()), !dbg !3316
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !3317, metadata !DIExpression()), !dbg !3318
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %hist, metadata !3319, metadata !DIExpression()), !dbg !3320
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3321
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3323
  %call = call %struct.histogram_value_t* @gimple_histogram_value(%struct.function* %0, %union.gimple_statement_d* %1), !dbg !3324
  store %struct.histogram_value_t* %call, %struct.histogram_value_t** %hist, align 8, !dbg !3325
  br label %for.cond, !dbg !3326

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3327
  %tobool = icmp ne %struct.histogram_value_t* %2, null, !dbg !3329
  br i1 %tobool, label %for.body, label %for.end, !dbg !3329

for.body:                                         ; preds = %for.cond
  %3 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3330
  %type1 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %3, i32 0, i32 1, !dbg !3332
  %4 = load i32, i32* %type1, align 8, !dbg !3332
  %5 = load i32, i32* %type.addr, align 4, !dbg !3333
  %cmp = icmp eq i32 %4, %5, !dbg !3334
  br i1 %cmp, label %if.then, label %if.end, !dbg !3335

if.then:                                          ; preds = %for.body
  %6 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3336
  store %struct.histogram_value_t* %6, %struct.histogram_value_t** %retval, align 8, !dbg !3337
  br label %return, !dbg !3337

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !3333

for.inc:                                          ; preds = %if.end
  %7 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3338
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %7, i32 0, i32 0, !dbg !3339
  %next = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 3, !dbg !3340
  %8 = load %struct.histogram_value_t*, %struct.histogram_value_t** %next, align 8, !dbg !3340
  store %struct.histogram_value_t* %8, %struct.histogram_value_t** %hist, align 8, !dbg !3341
  br label %for.cond, !dbg !3342, !llvm.loop !3343

for.end:                                          ; preds = %for.cond
  store %struct.histogram_value_t* null, %struct.histogram_value_t** %retval, align 8, !dbg !3345
  br label %return, !dbg !3345

return:                                           ; preds = %for.end, %if.then
  %9 = load %struct.histogram_value_t*, %struct.histogram_value_t** %retval, align 8, !dbg !3346
  ret %struct.histogram_value_t* %9, !dbg !3346
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_histograms_for_stmt(%struct.function* %fun, %struct._IO_FILE* %dump_file, %union.gimple_statement_d* %stmt) #0 !dbg !3347 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  %dump_file.addr = alloca %struct._IO_FILE*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %hist = alloca %struct.histogram_value_t*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !3400, metadata !DIExpression()), !dbg !3401
  store %struct._IO_FILE* %dump_file, %struct._IO_FILE** %dump_file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %dump_file.addr, metadata !3402, metadata !DIExpression()), !dbg !3403
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3404, metadata !DIExpression()), !dbg !3405
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %hist, metadata !3406, metadata !DIExpression()), !dbg !3407
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3408
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3410
  %call = call %struct.histogram_value_t* @gimple_histogram_value(%struct.function* %0, %union.gimple_statement_d* %1), !dbg !3411
  store %struct.histogram_value_t* %call, %struct.histogram_value_t** %hist, align 8, !dbg !3412
  br label %for.cond, !dbg !3413

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3414
  %tobool = icmp ne %struct.histogram_value_t* %2, null, !dbg !3416
  br i1 %tobool, label %for.body, label %for.end, !dbg !3416

for.body:                                         ; preds = %for.cond
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3417
  %4 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3418
  call void @dump_histogram_value(%struct._IO_FILE* %3, %struct.histogram_value_t* %4), !dbg !3419
  br label %for.inc, !dbg !3419

for.inc:                                          ; preds = %for.body
  %5 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3420
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %5, i32 0, i32 0, !dbg !3421
  %next = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 3, !dbg !3422
  %6 = load %struct.histogram_value_t*, %struct.histogram_value_t** %next, align 8, !dbg !3422
  store %struct.histogram_value_t* %6, %struct.histogram_value_t** %hist, align 8, !dbg !3423
  br label %for.cond, !dbg !3424, !llvm.loop !3425

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3427
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_histogram_value(%struct._IO_FILE* %dump_file, %struct.histogram_value_t* %hist) #0 !dbg !3428 {
entry:
  %dump_file.addr = alloca %struct._IO_FILE*, align 8
  %hist.addr = alloca %struct.histogram_value_t*, align 8
  %i = alloca i32, align 4
  store %struct._IO_FILE* %dump_file, %struct._IO_FILE** %dump_file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %dump_file.addr, metadata !3431, metadata !DIExpression()), !dbg !3432
  store %struct.histogram_value_t* %hist, %struct.histogram_value_t** %hist.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %hist.addr, metadata !3433, metadata !DIExpression()), !dbg !3434
  %0 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3435
  %type = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %0, i32 0, i32 1, !dbg !3436
  %1 = load i32, i32* %type, align 8, !dbg !3436
  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb23
    i32 2, label %sw.bb38
    i32 5, label %sw.bb56
    i32 6, label %sw.bb71
    i32 3, label %sw.bb83
    i32 4, label %sw.bb101
  ], !dbg !3437

sw.bb:                                            ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3438
  %3 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3440
  %hdata = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %3, i32 0, i32 3, !dbg !3441
  %intvl = bitcast %union.anon.0* %hdata to %struct.anon.1*, !dbg !3442
  %int_start = getelementptr inbounds %struct.anon.1, %struct.anon.1* %intvl, i32 0, i32 0, !dbg !3443
  %4 = load i32, i32* %int_start, align 8, !dbg !3443
  %5 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3444
  %hdata1 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %5, i32 0, i32 3, !dbg !3445
  %intvl2 = bitcast %union.anon.0* %hdata1 to %struct.anon.1*, !dbg !3446
  %int_start3 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %intvl2, i32 0, i32 0, !dbg !3447
  %6 = load i32, i32* %int_start3, align 8, !dbg !3447
  %7 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3448
  %hdata4 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %7, i32 0, i32 3, !dbg !3449
  %intvl5 = bitcast %union.anon.0* %hdata4 to %struct.anon.1*, !dbg !3450
  %steps = getelementptr inbounds %struct.anon.1, %struct.anon.1* %intvl5, i32 0, i32 1, !dbg !3451
  %8 = load i32, i32* %steps, align 4, !dbg !3451
  %add = add i32 %6, %8, !dbg !3452
  %sub = sub i32 %add, 1, !dbg !3453
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0), i32 %4, i32 %sub), !dbg !3454
  %9 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3455
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %9, i32 0, i32 0, !dbg !3457
  %counters = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 2, !dbg !3458
  %10 = load i64*, i64** %counters, align 8, !dbg !3458
  %tobool = icmp ne i64* %10, null, !dbg !3455
  br i1 %tobool, label %if.then, label %if.end, !dbg !3459

if.then:                                          ; preds = %sw.bb
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3460, metadata !DIExpression()), !dbg !3462
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3463
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0)), !dbg !3464
  store i32 0, i32* %i, align 4, !dbg !3465
  br label %for.cond, !dbg !3467

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4, !dbg !3468
  %13 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3470
  %hdata7 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %13, i32 0, i32 3, !dbg !3471
  %intvl8 = bitcast %union.anon.0* %hdata7 to %struct.anon.1*, !dbg !3472
  %steps9 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %intvl8, i32 0, i32 1, !dbg !3473
  %14 = load i32, i32* %steps9, align 4, !dbg !3473
  %cmp = icmp ult i32 %12, %14, !dbg !3474
  br i1 %cmp, label %for.body, label %for.end, !dbg !3475

for.body:                                         ; preds = %for.cond
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3476
  %16 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3477
  %hdata10 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %16, i32 0, i32 3, !dbg !3478
  %intvl11 = bitcast %union.anon.0* %hdata10 to %struct.anon.1*, !dbg !3479
  %int_start12 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %intvl11, i32 0, i32 0, !dbg !3480
  %17 = load i32, i32* %int_start12, align 8, !dbg !3480
  %18 = load i32, i32* %i, align 4, !dbg !3481
  %add13 = add i32 %17, %18, !dbg !3482
  %19 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3483
  %hvalue14 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %19, i32 0, i32 0, !dbg !3484
  %counters15 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue14, i32 0, i32 2, !dbg !3485
  %20 = load i64*, i64** %counters15, align 8, !dbg !3485
  %21 = load i32, i32* %i, align 4, !dbg !3486
  %idxprom = zext i32 %21 to i64, !dbg !3483
  %arrayidx = getelementptr inbounds i64, i64* %20, i64 %idxprom, !dbg !3483
  %22 = load i64, i64* %arrayidx, align 8, !dbg !3483
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i32 %add13, i64 %22), !dbg !3487
  br label %for.inc, !dbg !3487

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %i, align 4, !dbg !3488
  %inc = add i32 %23, 1, !dbg !3488
  store i32 %inc, i32* %i, align 4, !dbg !3488
  br label %for.cond, !dbg !3489, !llvm.loop !3490

for.end:                                          ; preds = %for.cond
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3492
  %25 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3493
  %hvalue17 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %25, i32 0, i32 0, !dbg !3494
  %counters18 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue17, i32 0, i32 2, !dbg !3495
  %26 = load i64*, i64** %counters18, align 8, !dbg !3495
  %27 = load i32, i32* %i, align 4, !dbg !3496
  %idxprom19 = zext i32 %27 to i64, !dbg !3493
  %arrayidx20 = getelementptr inbounds i64, i64* %26, i64 %idxprom19, !dbg !3493
  %28 = load i64, i64* %arrayidx20, align 8, !dbg !3493
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i64 %28), !dbg !3497
  br label %if.end, !dbg !3498

if.end:                                           ; preds = %for.end, %sw.bb
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3499
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0)), !dbg !3500
  br label %sw.epilog, !dbg !3501

sw.bb23:                                          ; preds = %entry
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3502
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)), !dbg !3503
  %31 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3504
  %hvalue25 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %31, i32 0, i32 0, !dbg !3506
  %counters26 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue25, i32 0, i32 2, !dbg !3507
  %32 = load i64*, i64** %counters26, align 8, !dbg !3507
  %tobool27 = icmp ne i64* %32, null, !dbg !3504
  br i1 %tobool27, label %if.then28, label %if.end36, !dbg !3508

if.then28:                                        ; preds = %sw.bb23
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3509
  %34 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3511
  %hvalue29 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %34, i32 0, i32 0, !dbg !3512
  %counters30 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue29, i32 0, i32 2, !dbg !3513
  %35 = load i64*, i64** %counters30, align 8, !dbg !3513
  %arrayidx31 = getelementptr inbounds i64, i64* %35, i64 0, !dbg !3511
  %36 = load i64, i64* %arrayidx31, align 8, !dbg !3511
  %37 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3514
  %hvalue32 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %37, i32 0, i32 0, !dbg !3515
  %counters33 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue32, i32 0, i32 2, !dbg !3516
  %38 = load i64*, i64** %counters33, align 8, !dbg !3516
  %arrayidx34 = getelementptr inbounds i64, i64* %38, i64 1, !dbg !3514
  %39 = load i64, i64* %arrayidx34, align 8, !dbg !3514
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i64 0, i64 0), i64 %36, i64 %39), !dbg !3517
  br label %if.end36, !dbg !3518

if.end36:                                         ; preds = %if.then28, %sw.bb23
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3519
  %call37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0)), !dbg !3520
  br label %sw.epilog, !dbg !3521

sw.bb38:                                          ; preds = %entry
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3522
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0)), !dbg !3523
  %42 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3524
  %hvalue40 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %42, i32 0, i32 0, !dbg !3526
  %counters41 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue40, i32 0, i32 2, !dbg !3527
  %43 = load i64*, i64** %counters41, align 8, !dbg !3527
  %tobool42 = icmp ne i64* %43, null, !dbg !3524
  br i1 %tobool42, label %if.then43, label %if.end54, !dbg !3528

if.then43:                                        ; preds = %sw.bb38
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3529
  %45 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3531
  %hvalue44 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %45, i32 0, i32 0, !dbg !3532
  %counters45 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue44, i32 0, i32 2, !dbg !3533
  %46 = load i64*, i64** %counters45, align 8, !dbg !3533
  %arrayidx46 = getelementptr inbounds i64, i64* %46, i64 0, !dbg !3531
  %47 = load i64, i64* %arrayidx46, align 8, !dbg !3531
  %48 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3534
  %hvalue47 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %48, i32 0, i32 0, !dbg !3535
  %counters48 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue47, i32 0, i32 2, !dbg !3536
  %49 = load i64*, i64** %counters48, align 8, !dbg !3536
  %arrayidx49 = getelementptr inbounds i64, i64* %49, i64 1, !dbg !3534
  %50 = load i64, i64* %arrayidx49, align 8, !dbg !3534
  %51 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3537
  %hvalue50 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %51, i32 0, i32 0, !dbg !3538
  %counters51 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue50, i32 0, i32 2, !dbg !3539
  %52 = load i64*, i64** %counters51, align 8, !dbg !3539
  %arrayidx52 = getelementptr inbounds i64, i64* %52, i64 2, !dbg !3537
  %53 = load i64, i64* %arrayidx52, align 8, !dbg !3537
  %call53 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.12, i64 0, i64 0), i64 %47, i64 %50, i64 %53), !dbg !3540
  br label %if.end54, !dbg !3541

if.end54:                                         ; preds = %if.then43, %sw.bb38
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3542
  %call55 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0)), !dbg !3543
  br label %sw.epilog, !dbg !3544

sw.bb56:                                          ; preds = %entry
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3545
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i64 0, i64 0)), !dbg !3546
  %56 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3547
  %hvalue58 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %56, i32 0, i32 0, !dbg !3549
  %counters59 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue58, i32 0, i32 2, !dbg !3550
  %57 = load i64*, i64** %counters59, align 8, !dbg !3550
  %tobool60 = icmp ne i64* %57, null, !dbg !3547
  br i1 %tobool60, label %if.then61, label %if.end69, !dbg !3551

if.then61:                                        ; preds = %sw.bb56
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3552
  %59 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3554
  %hvalue62 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %59, i32 0, i32 0, !dbg !3555
  %counters63 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue62, i32 0, i32 2, !dbg !3556
  %60 = load i64*, i64** %counters63, align 8, !dbg !3556
  %arrayidx64 = getelementptr inbounds i64, i64* %60, i64 0, !dbg !3554
  %61 = load i64, i64* %arrayidx64, align 8, !dbg !3554
  %62 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3557
  %hvalue65 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %62, i32 0, i32 0, !dbg !3558
  %counters66 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue65, i32 0, i32 2, !dbg !3559
  %63 = load i64*, i64** %counters66, align 8, !dbg !3559
  %arrayidx67 = getelementptr inbounds i64, i64* %63, i64 1, !dbg !3557
  %64 = load i64, i64* %arrayidx67, align 8, !dbg !3557
  %call68 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0), i64 %61, i64 %64), !dbg !3560
  br label %if.end69, !dbg !3561

if.end69:                                         ; preds = %if.then61, %sw.bb56
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3562
  %call70 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %65, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0)), !dbg !3563
  br label %sw.epilog, !dbg !3564

sw.bb71:                                          ; preds = %entry
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3565
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %66, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0)), !dbg !3566
  %67 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3567
  %hvalue73 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %67, i32 0, i32 0, !dbg !3569
  %counters74 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue73, i32 0, i32 2, !dbg !3570
  %68 = load i64*, i64** %counters74, align 8, !dbg !3570
  %tobool75 = icmp ne i64* %68, null, !dbg !3567
  br i1 %tobool75, label %if.then76, label %if.end81, !dbg !3571

if.then76:                                        ; preds = %sw.bb71
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3572
  %70 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3574
  %hvalue77 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %70, i32 0, i32 0, !dbg !3575
  %counters78 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue77, i32 0, i32 2, !dbg !3576
  %71 = load i64*, i64** %counters78, align 8, !dbg !3576
  %arrayidx79 = getelementptr inbounds i64, i64* %71, i64 0, !dbg !3574
  %72 = load i64, i64* %arrayidx79, align 8, !dbg !3574
  %call80 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %69, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i64 %72), !dbg !3577
  br label %if.end81, !dbg !3578

if.end81:                                         ; preds = %if.then76, %sw.bb71
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3579
  %call82 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %73, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0)), !dbg !3580
  br label %sw.epilog, !dbg !3581

sw.bb83:                                          ; preds = %entry
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3582
  %call84 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %74, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.17, i64 0, i64 0)), !dbg !3583
  %75 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3584
  %hvalue85 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %75, i32 0, i32 0, !dbg !3586
  %counters86 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue85, i32 0, i32 2, !dbg !3587
  %76 = load i64*, i64** %counters86, align 8, !dbg !3587
  %tobool87 = icmp ne i64* %76, null, !dbg !3584
  br i1 %tobool87, label %if.then88, label %if.end99, !dbg !3588

if.then88:                                        ; preds = %sw.bb83
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3589
  %78 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3591
  %hvalue89 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %78, i32 0, i32 0, !dbg !3592
  %counters90 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue89, i32 0, i32 2, !dbg !3593
  %79 = load i64*, i64** %counters90, align 8, !dbg !3593
  %arrayidx91 = getelementptr inbounds i64, i64* %79, i64 0, !dbg !3591
  %80 = load i64, i64* %arrayidx91, align 8, !dbg !3591
  %81 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3594
  %hvalue92 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %81, i32 0, i32 0, !dbg !3595
  %counters93 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue92, i32 0, i32 2, !dbg !3596
  %82 = load i64*, i64** %counters93, align 8, !dbg !3596
  %arrayidx94 = getelementptr inbounds i64, i64* %82, i64 1, !dbg !3594
  %83 = load i64, i64* %arrayidx94, align 8, !dbg !3594
  %84 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3597
  %hvalue95 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %84, i32 0, i32 0, !dbg !3598
  %counters96 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue95, i32 0, i32 2, !dbg !3599
  %85 = load i64*, i64** %counters96, align 8, !dbg !3599
  %arrayidx97 = getelementptr inbounds i64, i64* %85, i64 2, !dbg !3597
  %86 = load i64, i64* %arrayidx97, align 8, !dbg !3597
  %call98 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %77, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.12, i64 0, i64 0), i64 %80, i64 %83, i64 %86), !dbg !3600
  br label %if.end99, !dbg !3601

if.end99:                                         ; preds = %if.then88, %sw.bb83
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3602
  %call100 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %87, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0)), !dbg !3603
  br label %sw.epilog, !dbg !3604

sw.bb101:                                         ; preds = %entry
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3605
  %call102 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i64 0, i64 0)), !dbg !3606
  %89 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3607
  %hvalue103 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %89, i32 0, i32 0, !dbg !3609
  %counters104 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue103, i32 0, i32 2, !dbg !3610
  %90 = load i64*, i64** %counters104, align 8, !dbg !3610
  %tobool105 = icmp ne i64* %90, null, !dbg !3607
  br i1 %tobool105, label %if.then106, label %if.end117, !dbg !3611

if.then106:                                       ; preds = %sw.bb101
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3612
  %92 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3614
  %hvalue107 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %92, i32 0, i32 0, !dbg !3615
  %counters108 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue107, i32 0, i32 2, !dbg !3616
  %93 = load i64*, i64** %counters108, align 8, !dbg !3616
  %arrayidx109 = getelementptr inbounds i64, i64* %93, i64 0, !dbg !3614
  %94 = load i64, i64* %arrayidx109, align 8, !dbg !3614
  %95 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3617
  %hvalue110 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %95, i32 0, i32 0, !dbg !3618
  %counters111 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue110, i32 0, i32 2, !dbg !3619
  %96 = load i64*, i64** %counters111, align 8, !dbg !3619
  %arrayidx112 = getelementptr inbounds i64, i64* %96, i64 1, !dbg !3617
  %97 = load i64, i64* %arrayidx112, align 8, !dbg !3617
  %98 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist.addr, align 8, !dbg !3620
  %hvalue113 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %98, i32 0, i32 0, !dbg !3621
  %counters114 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue113, i32 0, i32 2, !dbg !3622
  %99 = load i64*, i64** %counters114, align 8, !dbg !3622
  %arrayidx115 = getelementptr inbounds i64, i64* %99, i64 2, !dbg !3620
  %100 = load i64, i64* %arrayidx115, align 8, !dbg !3620
  %call116 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %91, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.19, i64 0, i64 0), i64 %94, i64 %97, i64 %100), !dbg !3623
  br label %if.end117, !dbg !3624

if.end117:                                        ; preds = %if.then106, %sw.bb101
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** %dump_file.addr, align 8, !dbg !3625
  %call118 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %101, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0)), !dbg !3626
  br label %sw.epilog, !dbg !3627

sw.epilog:                                        ; preds = %entry, %if.end117, %if.end99, %if.end81, %if.end69, %if.end54, %if.end36, %if.end
  ret void, !dbg !3628
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_remove_stmt_histograms(%struct.function* %fun, %union.gimple_statement_d* %stmt) #0 !dbg !3629 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %val = alloca %struct.histogram_value_t*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !3632, metadata !DIExpression()), !dbg !3633
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3634, metadata !DIExpression()), !dbg !3635
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %val, metadata !3636, metadata !DIExpression()), !dbg !3637
  br label %while.cond, !dbg !3638

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3639
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3640
  %call = call %struct.histogram_value_t* @gimple_histogram_value(%struct.function* %0, %union.gimple_statement_d* %1), !dbg !3641
  store %struct.histogram_value_t* %call, %struct.histogram_value_t** %val, align 8, !dbg !3642
  %cmp = icmp ne %struct.histogram_value_t* %call, null, !dbg !3643
  br i1 %cmp, label %while.body, label %while.end, !dbg !3638

while.body:                                       ; preds = %while.cond
  %2 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3644
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3645
  %4 = load %struct.histogram_value_t*, %struct.histogram_value_t** %val, align 8, !dbg !3646
  call void @gimple_remove_histogram_value(%struct.function* %2, %union.gimple_statement_d* %3, %struct.histogram_value_t* %4), !dbg !3647
  br label %while.cond, !dbg !3638, !llvm.loop !3648

while.end:                                        ; preds = %while.cond
  ret void, !dbg !3650
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_duplicate_stmt_histograms(%struct.function* %fun, %union.gimple_statement_d* %stmt, %struct.function* %ofun, %union.gimple_statement_d* %ostmt) #0 !dbg !3651 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %ofun.addr = alloca %struct.function*, align 8
  %ostmt.addr = alloca %union.gimple_statement_d*, align 8
  %val = alloca %struct.histogram_value_t*, align 8
  %new_val = alloca %struct.histogram_value_t*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !3654, metadata !DIExpression()), !dbg !3655
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3656, metadata !DIExpression()), !dbg !3657
  store %struct.function* %ofun, %struct.function** %ofun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %ofun.addr, metadata !3658, metadata !DIExpression()), !dbg !3659
  store %union.gimple_statement_d* %ostmt, %union.gimple_statement_d** %ostmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ostmt.addr, metadata !3660, metadata !DIExpression()), !dbg !3661
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %val, metadata !3662, metadata !DIExpression()), !dbg !3663
  %0 = load %struct.function*, %struct.function** %ofun.addr, align 8, !dbg !3664
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ostmt.addr, align 8, !dbg !3666
  %call = call %struct.histogram_value_t* @gimple_histogram_value(%struct.function* %0, %union.gimple_statement_d* %1), !dbg !3667
  store %struct.histogram_value_t* %call, %struct.histogram_value_t** %val, align 8, !dbg !3668
  br label %for.cond, !dbg !3669

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.histogram_value_t*, %struct.histogram_value_t** %val, align 8, !dbg !3670
  %cmp = icmp ne %struct.histogram_value_t* %2, null, !dbg !3672
  br i1 %cmp, label %for.body, label %for.end, !dbg !3673

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %new_val, metadata !3674, metadata !DIExpression()), !dbg !3676
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3677
  %4 = load %struct.histogram_value_t*, %struct.histogram_value_t** %val, align 8, !dbg !3678
  %type = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %4, i32 0, i32 1, !dbg !3679
  %5 = load i32, i32* %type, align 8, !dbg !3679
  %call1 = call %struct.histogram_value_t* @gimple_alloc_histogram_value(%struct.function* %3, i32 %5, %union.gimple_statement_d* null, %union.tree_node* null), !dbg !3680
  store %struct.histogram_value_t* %call1, %struct.histogram_value_t** %new_val, align 8, !dbg !3676
  %6 = load %struct.histogram_value_t*, %struct.histogram_value_t** %new_val, align 8, !dbg !3681
  %7 = bitcast %struct.histogram_value_t* %6 to i8*, !dbg !3682
  %8 = load %struct.histogram_value_t*, %struct.histogram_value_t** %val, align 8, !dbg !3683
  %9 = bitcast %struct.histogram_value_t* %8 to i8*, !dbg !3682
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %9, i64 48, i1 false), !dbg !3682
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3684
  %11 = load %struct.histogram_value_t*, %struct.histogram_value_t** %new_val, align 8, !dbg !3685
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %11, i32 0, i32 0, !dbg !3686
  %stmt2 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 1, !dbg !3687
  store %union.gimple_statement_d* %10, %union.gimple_statement_d** %stmt2, align 8, !dbg !3688
  %12 = load %struct.histogram_value_t*, %struct.histogram_value_t** %new_val, align 8, !dbg !3689
  %n_counters = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %12, i32 0, i32 2, !dbg !3689
  %13 = load i32, i32* %n_counters, align 4, !dbg !3689
  %conv = zext i32 %13 to i64, !dbg !3689
  %mul = mul i64 8, %conv, !dbg !3689
  %call3 = call i8* @xmalloc(i64 %mul), !dbg !3689
  %14 = bitcast i8* %call3 to i64*, !dbg !3689
  %15 = load %struct.histogram_value_t*, %struct.histogram_value_t** %new_val, align 8, !dbg !3690
  %hvalue4 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %15, i32 0, i32 0, !dbg !3691
  %counters = getelementptr inbounds %struct.anon, %struct.anon* %hvalue4, i32 0, i32 2, !dbg !3692
  store i64* %14, i64** %counters, align 8, !dbg !3693
  %16 = load %struct.histogram_value_t*, %struct.histogram_value_t** %new_val, align 8, !dbg !3694
  %hvalue5 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %16, i32 0, i32 0, !dbg !3695
  %counters6 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue5, i32 0, i32 2, !dbg !3696
  %17 = load i64*, i64** %counters6, align 8, !dbg !3696
  %18 = bitcast i64* %17 to i8*, !dbg !3697
  %19 = load %struct.histogram_value_t*, %struct.histogram_value_t** %val, align 8, !dbg !3698
  %hvalue7 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %19, i32 0, i32 0, !dbg !3699
  %counters8 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue7, i32 0, i32 2, !dbg !3700
  %20 = load i64*, i64** %counters8, align 8, !dbg !3700
  %21 = bitcast i64* %20 to i8*, !dbg !3697
  %22 = load %struct.histogram_value_t*, %struct.histogram_value_t** %new_val, align 8, !dbg !3701
  %n_counters9 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %22, i32 0, i32 2, !dbg !3702
  %23 = load i32, i32* %n_counters9, align 4, !dbg !3702
  %conv10 = zext i32 %23 to i64, !dbg !3701
  %mul11 = mul i64 8, %conv10, !dbg !3703
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %21, i64 %mul11, i1 false), !dbg !3697
  %24 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3704
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3705
  %26 = load %struct.histogram_value_t*, %struct.histogram_value_t** %new_val, align 8, !dbg !3706
  call void @gimple_add_histogram_value(%struct.function* %24, %union.gimple_statement_d* %25, %struct.histogram_value_t* %26), !dbg !3707
  br label %for.inc, !dbg !3708

for.inc:                                          ; preds = %for.body
  %27 = load %struct.histogram_value_t*, %struct.histogram_value_t** %val, align 8, !dbg !3709
  %hvalue12 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %27, i32 0, i32 0, !dbg !3710
  %next = getelementptr inbounds %struct.anon, %struct.anon* %hvalue12, i32 0, i32 3, !dbg !3711
  %28 = load %struct.histogram_value_t*, %struct.histogram_value_t** %next, align 8, !dbg !3711
  store %struct.histogram_value_t* %28, %struct.histogram_value_t** %val, align 8, !dbg !3712
  br label %for.cond, !dbg !3713, !llvm.loop !3714

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3716
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.histogram_value_t* @gimple_alloc_histogram_value(%struct.function* %fun, i32 %type, %union.gimple_statement_d* %stmt, %union.tree_node* %value) #0 !dbg !3717 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  %type.addr = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %value.addr = alloca %union.tree_node*, align 8
  %hist = alloca %struct.histogram_value_t*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !3720, metadata !DIExpression()), !dbg !3721
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !3722, metadata !DIExpression()), !dbg !3723
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3724, metadata !DIExpression()), !dbg !3725
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !3726, metadata !DIExpression()), !dbg !3727
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %hist, metadata !3728, metadata !DIExpression()), !dbg !3729
  %call = call i8* @xcalloc(i64 1, i64 48), !dbg !3730
  %0 = bitcast i8* %call to %struct.histogram_value_t*, !dbg !3731
  store %struct.histogram_value_t* %0, %struct.histogram_value_t** %hist, align 8, !dbg !3729
  %1 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !3732
  %2 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3733
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %2, i32 0, i32 0, !dbg !3734
  %value1 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 0, !dbg !3735
  store %union.tree_node* %1, %union.tree_node** %value1, align 8, !dbg !3736
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3737
  %4 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3738
  %hvalue2 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %4, i32 0, i32 0, !dbg !3739
  %stmt3 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue2, i32 0, i32 1, !dbg !3740
  store %union.gimple_statement_d* %3, %union.gimple_statement_d** %stmt3, align 8, !dbg !3741
  %5 = load i32, i32* %type.addr, align 4, !dbg !3742
  %6 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3743
  %type4 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %6, i32 0, i32 1, !dbg !3744
  store i32 %5, i32* %type4, align 8, !dbg !3745
  %7 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3746
  ret %struct.histogram_value_t* %7, !dbg !3747
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_move_stmt_histograms(%struct.function* %fun, %union.gimple_statement_d* %stmt, %union.gimple_statement_d* %ostmt) #0 !dbg !3748 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %ostmt.addr = alloca %union.gimple_statement_d*, align 8
  %val = alloca %struct.histogram_value_t*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !3751, metadata !DIExpression()), !dbg !3752
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3753, metadata !DIExpression()), !dbg !3754
  store %union.gimple_statement_d* %ostmt, %union.gimple_statement_d** %ostmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ostmt.addr, metadata !3755, metadata !DIExpression()), !dbg !3756
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %val, metadata !3757, metadata !DIExpression()), !dbg !3758
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3759
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ostmt.addr, align 8, !dbg !3760
  %call = call %struct.histogram_value_t* @gimple_histogram_value(%struct.function* %0, %union.gimple_statement_d* %1), !dbg !3761
  store %struct.histogram_value_t* %call, %struct.histogram_value_t** %val, align 8, !dbg !3758
  %2 = load %struct.histogram_value_t*, %struct.histogram_value_t** %val, align 8, !dbg !3762
  %tobool = icmp ne %struct.histogram_value_t* %2, null, !dbg !3762
  br i1 %tobool, label %if.then, label %if.end, !dbg !3764

if.then:                                          ; preds = %entry
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3765
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ostmt.addr, align 8, !dbg !3767
  call void @set_histogram_value(%struct.function* %3, %union.gimple_statement_d* %4, %struct.histogram_value_t* null), !dbg !3768
  br label %for.cond, !dbg !3769

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load %struct.histogram_value_t*, %struct.histogram_value_t** %val, align 8, !dbg !3770
  %cmp = icmp ne %struct.histogram_value_t* %5, null, !dbg !3773
  br i1 %cmp, label %for.body, label %for.end, !dbg !3774

for.body:                                         ; preds = %for.cond
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3775
  %7 = load %struct.histogram_value_t*, %struct.histogram_value_t** %val, align 8, !dbg !3776
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %7, i32 0, i32 0, !dbg !3777
  %stmt1 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 1, !dbg !3778
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %stmt1, align 8, !dbg !3779
  br label %for.inc, !dbg !3776

for.inc:                                          ; preds = %for.body
  %8 = load %struct.histogram_value_t*, %struct.histogram_value_t** %val, align 8, !dbg !3780
  %hvalue2 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %8, i32 0, i32 0, !dbg !3781
  %next = getelementptr inbounds %struct.anon, %struct.anon* %hvalue2, i32 0, i32 3, !dbg !3782
  %9 = load %struct.histogram_value_t*, %struct.histogram_value_t** %next, align 8, !dbg !3782
  store %struct.histogram_value_t* %9, %struct.histogram_value_t** %val, align 8, !dbg !3783
  br label %for.cond, !dbg !3784, !llvm.loop !3785

for.end:                                          ; preds = %for.cond
  %10 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3787
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3788
  %12 = load %struct.histogram_value_t*, %struct.histogram_value_t** %val, align 8, !dbg !3789
  call void @set_histogram_value(%struct.function* %10, %union.gimple_statement_d* %11, %struct.histogram_value_t* %12), !dbg !3790
  br label %if.end, !dbg !3791

if.end:                                           ; preds = %for.end, %entry
  ret void, !dbg !3792
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @verify_histograms() #0 !dbg !3793 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %hist = alloca %struct.histogram_value_t*, align 8
  %visited_hists = alloca %struct.pointer_set_t*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3794, metadata !DIExpression()), !dbg !3795
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3796, metadata !DIExpression()), !dbg !3803
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %hist, metadata !3804, metadata !DIExpression()), !dbg !3805
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %visited_hists, metadata !3806, metadata !DIExpression()), !dbg !3807
  store i8 0, i8* @error_found, align 1, !dbg !3808
  %call = call %struct.pointer_set_t* @pointer_set_create(), !dbg !3809
  store %struct.pointer_set_t* %call, %struct.pointer_set_t** %visited_hists, align 8, !dbg !3810
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3811
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3811
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3811
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3811
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !3811
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3811
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !3811
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3811
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !3811
  br label %for.cond, !dbg !3811

for.cond:                                         ; preds = %for.inc18, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3813
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3813
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3813
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3813
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3813
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !3813
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3813
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !3813
  br i1 %cmp, label %for.body, label %for.end20, !dbg !3811

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3815
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !3817
  %9 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3817
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3817
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !3817
  br label %for.cond3, !dbg !3818

for.cond3:                                        ; preds = %for.inc16, %for.body
  %call4 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3819
  %tobool = icmp ne i8 %call4, 0, !dbg !3821
  %lnot = xor i1 %tobool, true, !dbg !3821
  br i1 %lnot, label %for.body5, label %for.end17, !dbg !3822

for.body5:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3823, metadata !DIExpression()), !dbg !3825
  %call6 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3826
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %stmt, align 8, !dbg !3825
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3827
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !3827
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3829
  %call8 = call %struct.histogram_value_t* @gimple_histogram_value(%struct.function* %add.ptr7, %union.gimple_statement_d* %12), !dbg !3830
  store %struct.histogram_value_t* %call8, %struct.histogram_value_t** %hist, align 8, !dbg !3831
  br label %for.cond9, !dbg !3832

for.cond9:                                        ; preds = %for.inc, %for.body5
  %13 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3833
  %tobool10 = icmp ne %struct.histogram_value_t* %13, null, !dbg !3835
  br i1 %tobool10, label %for.body11, label %for.end, !dbg !3835

for.body11:                                       ; preds = %for.cond9
  %14 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3836
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %14, i32 0, i32 0, !dbg !3839
  %stmt12 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 1, !dbg !3840
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt12, align 8, !dbg !3840
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3841
  %cmp13 = icmp ne %union.gimple_statement_d* %15, %16, !dbg !3842
  br i1 %cmp13, label %if.then, label %if.end, !dbg !3843

if.then:                                          ; preds = %for.body11
  call void (i8*, ...) @error(i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str, i64 0, i64 0)), !dbg !3844
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3846
  call void @debug_gimple_stmt(%union.gimple_statement_d* %17), !dbg !3847
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3848
  %19 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3849
  call void @dump_histogram_value(%struct._IO_FILE* %18, %struct.histogram_value_t* %19), !dbg !3850
  store i8 1, i8* @error_found, align 1, !dbg !3851
  br label %if.end, !dbg !3852

if.end:                                           ; preds = %if.then, %for.body11
  %20 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited_hists, align 8, !dbg !3853
  %21 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3854
  %22 = bitcast %struct.histogram_value_t* %21 to i8*, !dbg !3854
  %call14 = call i32 @pointer_set_insert(%struct.pointer_set_t* %20, i8* %22), !dbg !3855
  br label %for.inc, !dbg !3856

for.inc:                                          ; preds = %if.end
  %23 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3857
  %hvalue15 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %23, i32 0, i32 0, !dbg !3858
  %next = getelementptr inbounds %struct.anon, %struct.anon* %hvalue15, i32 0, i32 3, !dbg !3859
  %24 = load %struct.histogram_value_t*, %struct.histogram_value_t** %next, align 8, !dbg !3859
  store %struct.histogram_value_t* %24, %struct.histogram_value_t** %hist, align 8, !dbg !3860
  br label %for.cond9, !dbg !3861, !llvm.loop !3862

for.end:                                          ; preds = %for.cond9
  br label %for.inc16, !dbg !3864

for.inc16:                                        ; preds = %for.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3865
  br label %for.cond3, !dbg !3866, !llvm.loop !3867

for.end17:                                        ; preds = %for.cond3
  br label %for.inc18, !dbg !3868

for.inc18:                                        ; preds = %for.end17
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3813
  %next_bb19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 6, !dbg !3813
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb19, align 8, !dbg !3813
  store %struct.basic_block_def* %26, %struct.basic_block_def** %bb, align 8, !dbg !3813
  br label %for.cond, !dbg !3813, !llvm.loop !3869

for.end20:                                        ; preds = %for.cond
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3871
  %add.ptr21 = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !3871
  %value_histograms = getelementptr inbounds %struct.function, %struct.function* %add.ptr21, i32 0, i32 5, !dbg !3871
  %28 = load %struct.htab*, %struct.htab** %value_histograms, align 8, !dbg !3871
  %tobool22 = icmp ne %struct.htab* %28, null, !dbg !3871
  br i1 %tobool22, label %if.then23, label %if.end26, !dbg !3873

if.then23:                                        ; preds = %for.end20
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3874
  %add.ptr24 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !3874
  %value_histograms25 = getelementptr inbounds %struct.function, %struct.function* %add.ptr24, i32 0, i32 5, !dbg !3874
  %30 = load %struct.htab*, %struct.htab** %value_histograms25, align 8, !dbg !3874
  %31 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited_hists, align 8, !dbg !3875
  %32 = bitcast %struct.pointer_set_t* %31 to i8*, !dbg !3875
  call void @htab_traverse(%struct.htab* %30, i32 (i8**, i8*)* @visit_hist, i8* %32), !dbg !3876
  br label %if.end26, !dbg !3876

if.end26:                                         ; preds = %if.then23, %for.end20
  %33 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited_hists, align 8, !dbg !3877
  call void @pointer_set_destroy(%struct.pointer_set_t* %33), !dbg !3878
  %34 = load i8, i8* @error_found, align 1, !dbg !3879
  %tobool27 = icmp ne i8 %34, 0, !dbg !3879
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !3881

if.then28:                                        ; preds = %if.end26
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0)), !dbg !3882
  br label %if.end29, !dbg !3882

if.end29:                                         ; preds = %if.then28, %if.end26
  ret void, !dbg !3883
}

declare dso_local %struct.pointer_set_t* @pointer_set_create() #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !3884 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3887, metadata !DIExpression()), !dbg !3888
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !3889, metadata !DIExpression()), !dbg !3890
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !3891, metadata !DIExpression()), !dbg !3892
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3893
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !3894
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !3895
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3896
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !3897
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !3898
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3899
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3900
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !3901
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !3902
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3903
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !3904
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !3905
  ret void, !dbg !3906
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3907 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3910, metadata !DIExpression()), !dbg !3911
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3912
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3912
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !3913
  %conv = zext i1 %cmp to i32, !dbg !3913
  %conv1 = trunc i32 %conv to i8, !dbg !3914
  ret i8 %conv1, !dbg !3915
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3916 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3919, metadata !DIExpression()), !dbg !3920
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3921
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3921
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !3922
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3922
  ret %union.gimple_statement_d* %1, !dbg !3923
}

declare dso_local void @error(i8*, ...) #2

declare dso_local void @debug_gimple_stmt(%union.gimple_statement_d*) #2

declare dso_local i32 @pointer_set_insert(%struct.pointer_set_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !3924 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !3928, metadata !DIExpression()), !dbg !3929
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3930
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !3931
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3931
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !3932
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !3932
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3933
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !3934
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !3935
  ret void, !dbg !3936
}

declare dso_local void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @visit_hist(i8** %slot, i8* %data) #0 !dbg !3937 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %visited = alloca %struct.pointer_set_t*, align 8
  %hist = alloca %struct.histogram_value_t*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !3940, metadata !DIExpression()), !dbg !3941
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3942, metadata !DIExpression()), !dbg !3943
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %visited, metadata !3944, metadata !DIExpression()), !dbg !3945
  %0 = load i8*, i8** %data.addr, align 8, !dbg !3946
  %1 = bitcast i8* %0 to %struct.pointer_set_t*, !dbg !3947
  store %struct.pointer_set_t* %1, %struct.pointer_set_t** %visited, align 8, !dbg !3945
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %hist, metadata !3948, metadata !DIExpression()), !dbg !3949
  %2 = load i8**, i8*** %slot.addr, align 8, !dbg !3950
  %3 = bitcast i8** %2 to %struct.histogram_value_t**, !dbg !3951
  %4 = load %struct.histogram_value_t*, %struct.histogram_value_t** %3, align 8, !dbg !3951
  store %struct.histogram_value_t* %4, %struct.histogram_value_t** %hist, align 8, !dbg !3949
  %5 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited, align 8, !dbg !3952
  %6 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3954
  %7 = bitcast %struct.histogram_value_t* %6 to i8*, !dbg !3954
  %call = call i32 @pointer_set_contains(%struct.pointer_set_t* %5, i8* %7), !dbg !3955
  %tobool = icmp ne i32 %call, 0, !dbg !3955
  br i1 %tobool, label %if.end, label %if.then, !dbg !3956

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i64 0, i64 0)), !dbg !3957
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3959
  %9 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3960
  call void @dump_histogram_value(%struct._IO_FILE* %8, %struct.histogram_value_t* %9), !dbg !3961
  %10 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3962
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %10, i32 0, i32 0, !dbg !3963
  %stmt = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 1, !dbg !3964
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3964
  call void @debug_gimple_stmt(%union.gimple_statement_d* %11), !dbg !3965
  store i8 1, i8* @error_found, align 1, !dbg !3966
  br label %if.end, !dbg !3967

if.end:                                           ; preds = %if.then, %entry
  ret i32 1, !dbg !3968
}

declare dso_local void @pointer_set_destroy(%struct.pointer_set_t*) #2

declare dso_local void @internal_error(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_histograms() #0 !dbg !3969 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3970
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3970
  %value_histograms = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 5, !dbg !3970
  %1 = load %struct.htab*, %struct.htab** %value_histograms, align 8, !dbg !3970
  %tobool = icmp ne %struct.htab* %1, null, !dbg !3970
  br i1 %tobool, label %if.then, label %if.end, !dbg !3972

if.then:                                          ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3973
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3973
  %value_histograms2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 5, !dbg !3973
  %3 = load %struct.htab*, %struct.htab** %value_histograms2, align 8, !dbg !3973
  call void @htab_traverse(%struct.htab* %3, i32 (i8**, i8*)* @free_hist, i8* null), !dbg !3975
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3976
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3976
  %value_histograms4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 5, !dbg !3976
  %5 = load %struct.htab*, %struct.htab** %value_histograms4, align 8, !dbg !3976
  call void @htab_delete(%struct.htab* %5), !dbg !3977
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3978
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !3978
  %value_histograms6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 5, !dbg !3978
  store %struct.htab* null, %struct.htab** %value_histograms6, align 8, !dbg !3979
  br label %if.end, !dbg !3980

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3981
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @free_hist(i8** %slot, i8* %data) #0 !dbg !3982 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %hist = alloca %struct.histogram_value_t*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !3983, metadata !DIExpression()), !dbg !3984
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3985, metadata !DIExpression()), !dbg !3986
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %hist, metadata !3987, metadata !DIExpression()), !dbg !3988
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !3989
  %1 = bitcast i8** %0 to %struct.histogram_value_t**, !dbg !3990
  %2 = load %struct.histogram_value_t*, %struct.histogram_value_t** %1, align 8, !dbg !3990
  store %struct.histogram_value_t* %2, %struct.histogram_value_t** %hist, align 8, !dbg !3988
  %3 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3991
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %3, i32 0, i32 0, !dbg !3992
  %counters = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 2, !dbg !3993
  %4 = load i64*, i64** %counters, align 8, !dbg !3993
  %5 = bitcast i64* %4 to i8*, !dbg !3991
  call void @free(i8* %5), !dbg !3994
  %6 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !3995
  %7 = bitcast %struct.histogram_value_t* %6 to i8*, !dbg !3995
  call void @free(i8* %7), !dbg !3996
  ret i32 1, !dbg !3997
}

declare dso_local void @htab_delete(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @stringop_block_profile(%union.gimple_statement_d* %stmt, i32* %expected_align, i64* %expected_size) #0 !dbg !3998 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %expected_align.addr = alloca i32*, align 8
  %expected_size.addr = alloca i64*, align 8
  %histogram = alloca %struct.histogram_value_t*, align 8
  %size = alloca i64, align 8
  %count = alloca i64, align 8
  %alignment = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4003, metadata !DIExpression()), !dbg !4004
  store i32* %expected_align, i32** %expected_align.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %expected_align.addr, metadata !4005, metadata !DIExpression()), !dbg !4006
  store i64* %expected_size, i64** %expected_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %expected_size.addr, metadata !4007, metadata !DIExpression()), !dbg !4008
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %histogram, metadata !4009, metadata !DIExpression()), !dbg !4010
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4011
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4011
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4012
  %call = call %struct.histogram_value_t* @gimple_histogram_value_of_type(%struct.function* %add.ptr, %union.gimple_statement_d* %1, i32 5), !dbg !4013
  store %struct.histogram_value_t* %call, %struct.histogram_value_t** %histogram, align 8, !dbg !4014
  %2 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4015
  %tobool = icmp ne %struct.histogram_value_t* %2, null, !dbg !4015
  br i1 %tobool, label %if.else, label %if.then, !dbg !4017

if.then:                                          ; preds = %entry
  %3 = load i64*, i64** %expected_size.addr, align 8, !dbg !4018
  store i64 -1, i64* %3, align 8, !dbg !4019
  br label %if.end18, !dbg !4020

if.else:                                          ; preds = %entry
  %4 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4021
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %4, i32 0, i32 0, !dbg !4023
  %counters = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 2, !dbg !4024
  %5 = load i64*, i64** %counters, align 8, !dbg !4024
  %arrayidx = getelementptr inbounds i64, i64* %5, i64 1, !dbg !4021
  %6 = load i64, i64* %arrayidx, align 8, !dbg !4021
  %tobool1 = icmp ne i64 %6, 0, !dbg !4021
  br i1 %tobool1, label %if.else4, label %if.then2, !dbg !4025

if.then2:                                         ; preds = %if.else
  %7 = load i64*, i64** %expected_size.addr, align 8, !dbg !4026
  store i64 -1, i64* %7, align 8, !dbg !4028
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4029
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !4029
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4030
  %10 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4031
  call void @gimple_remove_histogram_value(%struct.function* %add.ptr3, %union.gimple_statement_d* %9, %struct.histogram_value_t* %10), !dbg !4032
  br label %if.end17, !dbg !4033

if.else4:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i64* %size, metadata !4034, metadata !DIExpression()), !dbg !4036
  %11 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4037
  %hvalue5 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %11, i32 0, i32 0, !dbg !4038
  %counters6 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue5, i32 0, i32 2, !dbg !4039
  %12 = load i64*, i64** %counters6, align 8, !dbg !4039
  %arrayidx7 = getelementptr inbounds i64, i64* %12, i64 0, !dbg !4037
  %13 = load i64, i64* %arrayidx7, align 8, !dbg !4037
  %14 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4040
  %hvalue8 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %14, i32 0, i32 0, !dbg !4041
  %counters9 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue8, i32 0, i32 2, !dbg !4042
  %15 = load i64*, i64** %counters9, align 8, !dbg !4042
  %arrayidx10 = getelementptr inbounds i64, i64* %15, i64 1, !dbg !4040
  %16 = load i64, i64* %arrayidx10, align 8, !dbg !4040
  %div = sdiv i64 %16, 2, !dbg !4043
  %add = add nsw i64 %13, %div, !dbg !4044
  %17 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4045
  %hvalue11 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %17, i32 0, i32 0, !dbg !4046
  %counters12 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue11, i32 0, i32 2, !dbg !4047
  %18 = load i64*, i64** %counters12, align 8, !dbg !4047
  %arrayidx13 = getelementptr inbounds i64, i64* %18, i64 1, !dbg !4045
  %19 = load i64, i64* %arrayidx13, align 8, !dbg !4045
  %div14 = sdiv i64 %add, %19, !dbg !4048
  store i64 %div14, i64* %size, align 8, !dbg !4049
  %20 = load i64, i64* %size, align 8, !dbg !4050
  %cmp = icmp sgt i64 %20, 2147483647, !dbg !4052
  br i1 %cmp, label %if.then15, label %if.end, !dbg !4053

if.then15:                                        ; preds = %if.else4
  store i64 2147483647, i64* %size, align 8, !dbg !4054
  br label %if.end, !dbg !4055

if.end:                                           ; preds = %if.then15, %if.else4
  %21 = load i64, i64* %size, align 8, !dbg !4056
  %22 = load i64*, i64** %expected_size.addr, align 8, !dbg !4057
  store i64 %21, i64* %22, align 8, !dbg !4058
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4059
  %add.ptr16 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !4059
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4060
  %25 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4061
  call void @gimple_remove_histogram_value(%struct.function* %add.ptr16, %union.gimple_statement_d* %24, %struct.histogram_value_t* %25), !dbg !4062
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then2
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4063
  %add.ptr19 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !4063
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4064
  %call20 = call %struct.histogram_value_t* @gimple_histogram_value_of_type(%struct.function* %add.ptr19, %union.gimple_statement_d* %27, i32 6), !dbg !4065
  store %struct.histogram_value_t* %call20, %struct.histogram_value_t** %histogram, align 8, !dbg !4066
  %28 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4067
  %tobool21 = icmp ne %struct.histogram_value_t* %28, null, !dbg !4067
  br i1 %tobool21, label %if.else23, label %if.then22, !dbg !4069

if.then22:                                        ; preds = %if.end18
  %29 = load i32*, i32** %expected_align.addr, align 8, !dbg !4070
  store i32 0, i32* %29, align 4, !dbg !4071
  br label %if.end40, !dbg !4072

if.else23:                                        ; preds = %if.end18
  %30 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4073
  %hvalue24 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %30, i32 0, i32 0, !dbg !4075
  %counters25 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue24, i32 0, i32 2, !dbg !4076
  %31 = load i64*, i64** %counters25, align 8, !dbg !4076
  %arrayidx26 = getelementptr inbounds i64, i64* %31, i64 0, !dbg !4073
  %32 = load i64, i64* %arrayidx26, align 8, !dbg !4073
  %tobool27 = icmp ne i64 %32, 0, !dbg !4073
  br i1 %tobool27, label %if.else30, label %if.then28, !dbg !4077

if.then28:                                        ; preds = %if.else23
  %33 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4078
  %add.ptr29 = getelementptr inbounds %struct.function, %struct.function* %33, i64 0, !dbg !4078
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4080
  %35 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4081
  call void @gimple_remove_histogram_value(%struct.function* %add.ptr29, %union.gimple_statement_d* %34, %struct.histogram_value_t* %35), !dbg !4082
  %36 = load i32*, i32** %expected_align.addr, align 8, !dbg !4083
  store i32 0, i32* %36, align 4, !dbg !4084
  br label %if.end39, !dbg !4085

if.else30:                                        ; preds = %if.else23
  call void @llvm.dbg.declare(metadata i64* %count, metadata !4086, metadata !DIExpression()), !dbg !4088
  call void @llvm.dbg.declare(metadata i32* %alignment, metadata !4089, metadata !DIExpression()), !dbg !4090
  %37 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4091
  %hvalue31 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %37, i32 0, i32 0, !dbg !4092
  %counters32 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue31, i32 0, i32 2, !dbg !4093
  %38 = load i64*, i64** %counters32, align 8, !dbg !4093
  %arrayidx33 = getelementptr inbounds i64, i64* %38, i64 0, !dbg !4091
  %39 = load i64, i64* %arrayidx33, align 8, !dbg !4091
  store i64 %39, i64* %count, align 8, !dbg !4094
  store i32 1, i32* %alignment, align 4, !dbg !4095
  br label %while.cond, !dbg !4096

while.cond:                                       ; preds = %while.body, %if.else30
  %40 = load i64, i64* %count, align 8, !dbg !4097
  %41 = load i32, i32* %alignment, align 4, !dbg !4098
  %conv = sext i32 %41 to i64, !dbg !4098
  %and = and i64 %40, %conv, !dbg !4099
  %tobool34 = icmp ne i64 %and, 0, !dbg !4099
  br i1 %tobool34, label %land.end, label %land.rhs, !dbg !4100

land.rhs:                                         ; preds = %while.cond
  %42 = load i32, i32* %alignment, align 4, !dbg !4101
  %mul = mul nsw i32 %42, 2, !dbg !4102
  %mul35 = mul nsw i32 %mul, 8, !dbg !4103
  %tobool36 = icmp ne i32 %mul35, 0, !dbg !4100
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %43 = phi i1 [ false, %while.cond ], [ %tobool36, %land.rhs ], !dbg !4104
  br i1 %43, label %while.body, label %while.end, !dbg !4096

while.body:                                       ; preds = %land.end
  %44 = load i32, i32* %alignment, align 4, !dbg !4105
  %shl = shl i32 %44, 1, !dbg !4105
  store i32 %shl, i32* %alignment, align 4, !dbg !4105
  br label %while.cond, !dbg !4096, !llvm.loop !4106

while.end:                                        ; preds = %land.end
  %45 = load i32, i32* %alignment, align 4, !dbg !4108
  %mul37 = mul nsw i32 %45, 8, !dbg !4109
  %46 = load i32*, i32** %expected_align.addr, align 8, !dbg !4110
  store i32 %mul37, i32* %46, align 4, !dbg !4111
  %47 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4112
  %add.ptr38 = getelementptr inbounds %struct.function, %struct.function* %47, i64 0, !dbg !4112
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4113
  %49 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4114
  call void @gimple_remove_histogram_value(%struct.function* %add.ptr38, %union.gimple_statement_d* %48, %struct.histogram_value_t* %49), !dbg !4115
  br label %if.end39

if.end39:                                         ; preds = %while.end, %if.then28
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then22
  ret void, !dbg !4116
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_register_value_prof_hooks() #0 !dbg !4117 {
entry:
  %call = call i32 @current_ir_type(), !dbg !4118
  %cmp = icmp eq i32 %call, 0, !dbg !4118
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4118

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 1704, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4118
  br label %cond.end, !dbg !4118

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4118

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4118
  store %struct.value_prof_hooks* @gimple_value_prof_hooks, %struct.value_prof_hooks** @value_prof_hooks, align 8, !dbg !4119
  ret void, !dbg !4120
}

declare dso_local i32 @current_ir_type() #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @find_values_to_profile(%struct.VEC_histogram_value_heap** %values) #0 !dbg !4121 {
entry:
  %values.addr = alloca %struct.VEC_histogram_value_heap**, align 8
  store %struct.VEC_histogram_value_heap** %values, %struct.VEC_histogram_value_heap*** %values.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_histogram_value_heap*** %values.addr, metadata !4122, metadata !DIExpression()), !dbg !4123
  %0 = load %struct.value_prof_hooks*, %struct.value_prof_hooks** @value_prof_hooks, align 8, !dbg !4124
  %find_values_to_profile = getelementptr inbounds %struct.value_prof_hooks, %struct.value_prof_hooks* %0, i32 0, i32 0, !dbg !4125
  %1 = load void (%struct.VEC_histogram_value_heap**)*, void (%struct.VEC_histogram_value_heap**)** %find_values_to_profile, align 8, !dbg !4125
  %2 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4126
  call void %1(%struct.VEC_histogram_value_heap** %2), !dbg !4127
  ret void, !dbg !4128
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @value_profile_transformations() #0 !dbg !4129 {
entry:
  %0 = load %struct.value_prof_hooks*, %struct.value_prof_hooks** @value_prof_hooks, align 8, !dbg !4130
  %value_profile_transformations = getelementptr inbounds %struct.value_prof_hooks, %struct.value_prof_hooks* %0, i32 0, i32 1, !dbg !4131
  %1 = load i8 ()*, i8 ()** %value_profile_transformations, align 8, !dbg !4131
  %call = call zeroext i8 %1(), !dbg !4132
  ret i8 %call, !dbg !4133
}

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @histogram_hash(i8* %x) #0 !dbg !4134 {
entry:
  %x.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !4135, metadata !DIExpression()), !dbg !4136
  %0 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !4137
  %1 = load i8*, i8** %x.addr, align 8, !dbg !4138
  %2 = bitcast i8* %1 to %struct.histogram_value_t*, !dbg !4139
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %2, i32 0, i32 0, !dbg !4140
  %stmt = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 1, !dbg !4141
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4141
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !4142
  %call = call i32 %0(i8* %4), !dbg !4137
  ret i32 %call, !dbg !4143
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @histogram_eq(i8* %x, i8* %y) #0 !dbg !4144 {
entry:
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !4145, metadata !DIExpression()), !dbg !4146
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !4147, metadata !DIExpression()), !dbg !4148
  %0 = load i8*, i8** %x.addr, align 8, !dbg !4149
  %1 = bitcast i8* %0 to %struct.histogram_value_t*, !dbg !4150
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %1, i32 0, i32 0, !dbg !4151
  %stmt = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 1, !dbg !4152
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4152
  %3 = load i8*, i8** %y.addr, align 8, !dbg !4153
  %4 = bitcast i8* %3 to %union.gimple_statement_d*, !dbg !4154
  %cmp = icmp eq %union.gimple_statement_d* %2, %4, !dbg !4155
  %conv = zext i1 %cmp to i32, !dbg !4155
  ret i32 %conv, !dbg !4156
}

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

declare dso_local void @htab_clear_slot(%struct.htab*, i8**) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !4157 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4163, metadata !DIExpression()), !dbg !4164
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4165
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !4166
  %1 = load i32, i32* %flags, align 8, !dbg !4166
  %and = and i32 %1, 512, !dbg !4167
  %tobool = icmp ne i32 %and, 0, !dbg !4167
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !4168

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4169
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !4170
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !4171
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !4171
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !4169
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !4172

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4173
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !4174
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !4175
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !4175
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !4176
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4176
  br label %cond.end, !dbg !4172

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !4172

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !4172
  ret %struct.gimple_seq_d* %cond, !dbg !4177
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !4178 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !4184, metadata !DIExpression()), !dbg !4185
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4186
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !4186
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4186

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4187
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !4188
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !4188
  br label %cond.end, !dbg !4186

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4186

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !4186
  ret %struct.gimple_seq_node_d* %cond, !dbg !4189
}

declare dso_local i32 @pointer_set_contains(%struct.pointer_set_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_find_values_to_profile(%struct.VEC_histogram_value_heap** %values) #0 !dbg !4190 {
entry:
  %values.addr = alloca %struct.VEC_histogram_value_heap**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %i = alloca i32, align 4
  %hist = alloca %struct.histogram_value_t*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.VEC_histogram_value_heap** %values, %struct.VEC_histogram_value_heap*** %values.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_histogram_value_heap*** %values.addr, metadata !4191, metadata !DIExpression()), !dbg !4192
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4193, metadata !DIExpression()), !dbg !4194
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4195, metadata !DIExpression()), !dbg !4196
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4197, metadata !DIExpression()), !dbg !4198
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %hist, metadata !4199, metadata !DIExpression()), !dbg !4200
  store %struct.histogram_value_t* null, %struct.histogram_value_t** %hist, align 8, !dbg !4200
  %0 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4201
  store %struct.VEC_histogram_value_heap* null, %struct.VEC_histogram_value_heap** %0, align 8, !dbg !4202
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4203
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !4203
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4203
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4203
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 0, !dbg !4203
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4203
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 6, !dbg !4203
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4203
  store %struct.basic_block_def* %4, %struct.basic_block_def** %bb, align 8, !dbg !4203
  br label %for.cond, !dbg !4203

for.cond:                                         ; preds = %for.inc6, %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4205
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4205
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !4205
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4205
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4205
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 1, !dbg !4205
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4205
  %cmp = icmp ne %struct.basic_block_def* %5, %8, !dbg !4205
  br i1 %cmp, label %for.body, label %for.end8, !dbg !4203

for.body:                                         ; preds = %for.cond
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4207
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %9), !dbg !4209
  %10 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4209
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4209
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !4209
  br label %for.cond3, !dbg !4210

for.cond3:                                        ; preds = %for.inc, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4211
  %tobool = icmp ne i8 %call, 0, !dbg !4213
  %lnot = xor i1 %tobool, true, !dbg !4213
  br i1 %lnot, label %for.body4, label %for.end, !dbg !4214

for.body4:                                        ; preds = %for.cond3
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4215
  %12 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4216
  call void @gimple_values_to_profile(%union.gimple_statement_d* %call5, %struct.VEC_histogram_value_heap** %12), !dbg !4217
  br label %for.inc, !dbg !4217

for.inc:                                          ; preds = %for.body4
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4218
  br label %for.cond3, !dbg !4219, !llvm.loop !4220

for.end:                                          ; preds = %for.cond3
  br label %for.inc6, !dbg !4221

for.inc6:                                         ; preds = %for.end
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4205
  %next_bb7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 6, !dbg !4205
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb7, align 8, !dbg !4205
  store %struct.basic_block_def* %14, %struct.basic_block_def** %bb, align 8, !dbg !4205
  br label %for.cond, !dbg !4205, !llvm.loop !4222

for.end8:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !4224
  br label %for.cond9, !dbg !4226

for.cond9:                                        ; preds = %for.inc28, %for.end8
  %15 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4227
  %16 = load %struct.VEC_histogram_value_heap*, %struct.VEC_histogram_value_heap** %15, align 8, !dbg !4227
  %tobool10 = icmp ne %struct.VEC_histogram_value_heap* %16, null, !dbg !4227
  br i1 %tobool10, label %cond.true, label %cond.false, !dbg !4227

cond.true:                                        ; preds = %for.cond9
  %17 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4227
  %18 = load %struct.VEC_histogram_value_heap*, %struct.VEC_histogram_value_heap** %17, align 8, !dbg !4227
  %base = getelementptr inbounds %struct.VEC_histogram_value_heap, %struct.VEC_histogram_value_heap* %18, i32 0, i32 0, !dbg !4227
  br label %cond.end, !dbg !4227

cond.false:                                       ; preds = %for.cond9
  br label %cond.end, !dbg !4227

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_histogram_value_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4227
  %19 = load i32, i32* %i, align 4, !dbg !4227
  %call11 = call i32 @VEC_histogram_value_base_iterate(%struct.VEC_histogram_value_base* %cond, i32 %19, %struct.histogram_value_t** %hist), !dbg !4227
  %tobool12 = icmp ne i32 %call11, 0, !dbg !4229
  br i1 %tobool12, label %for.body13, label %for.end29, !dbg !4229

for.body13:                                       ; preds = %cond.end
  %20 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !4230
  %type = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %20, i32 0, i32 1, !dbg !4232
  %21 = load i32, i32* %type, align 8, !dbg !4232
  switch i32 %21, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb14
    i32 2, label %sw.bb16
    i32 3, label %sw.bb18
    i32 4, label %sw.bb20
    i32 5, label %sw.bb22
    i32 6, label %sw.bb24
  ], !dbg !4233

sw.bb:                                            ; preds = %for.body13
  %22 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !4234
  %hdata = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %22, i32 0, i32 3, !dbg !4236
  %intvl = bitcast %union.anon.0* %hdata to %struct.anon.1*, !dbg !4237
  %steps = getelementptr inbounds %struct.anon.1, %struct.anon.1* %intvl, i32 0, i32 1, !dbg !4238
  %23 = load i32, i32* %steps, align 4, !dbg !4238
  %add = add i32 %23, 2, !dbg !4239
  %24 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !4240
  %n_counters = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %24, i32 0, i32 2, !dbg !4241
  store i32 %add, i32* %n_counters, align 4, !dbg !4242
  br label %sw.epilog, !dbg !4243

sw.bb14:                                          ; preds = %for.body13
  %25 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !4244
  %n_counters15 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %25, i32 0, i32 2, !dbg !4245
  store i32 2, i32* %n_counters15, align 4, !dbg !4246
  br label %sw.epilog, !dbg !4247

sw.bb16:                                          ; preds = %for.body13
  %26 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !4248
  %n_counters17 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %26, i32 0, i32 2, !dbg !4249
  store i32 3, i32* %n_counters17, align 4, !dbg !4250
  br label %sw.epilog, !dbg !4251

sw.bb18:                                          ; preds = %for.body13
  %27 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !4252
  %n_counters19 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %27, i32 0, i32 2, !dbg !4253
  store i32 4, i32* %n_counters19, align 4, !dbg !4254
  br label %sw.epilog, !dbg !4255

sw.bb20:                                          ; preds = %for.body13
  %28 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !4256
  %n_counters21 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %28, i32 0, i32 2, !dbg !4257
  store i32 3, i32* %n_counters21, align 4, !dbg !4258
  br label %sw.epilog, !dbg !4259

sw.bb22:                                          ; preds = %for.body13
  %29 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !4260
  %n_counters23 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %29, i32 0, i32 2, !dbg !4261
  store i32 2, i32* %n_counters23, align 4, !dbg !4262
  br label %sw.epilog, !dbg !4263

sw.bb24:                                          ; preds = %for.body13
  %30 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !4264
  %n_counters25 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %30, i32 0, i32 2, !dbg !4265
  store i32 1, i32* %n_counters25, align 4, !dbg !4266
  br label %sw.epilog, !dbg !4267

sw.default:                                       ; preds = %for.body13
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 1685, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4268
  br label %sw.epilog, !dbg !4269

sw.epilog:                                        ; preds = %sw.default, %sw.bb24, %sw.bb22, %sw.bb20, %sw.bb18, %sw.bb16, %sw.bb14, %sw.bb
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4270
  %tobool26 = icmp ne %struct._IO_FILE* %31, null, !dbg !4270
  br i1 %tobool26, label %if.then, label %if.end, !dbg !4272

if.then:                                          ; preds = %sw.epilog
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4273
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i64 0, i64 0)), !dbg !4275
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4276
  %34 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !4277
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %34, i32 0, i32 0, !dbg !4278
  %stmt = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 1, !dbg !4279
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4279
  call void @print_gimple_stmt(%struct._IO_FILE* %33, %union.gimple_statement_d* %35, i32 0, i32 2), !dbg !4280
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4281
  %37 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !4282
  call void @dump_histogram_value(%struct._IO_FILE* %36, %struct.histogram_value_t* %37), !dbg !4283
  br label %if.end, !dbg !4284

if.end:                                           ; preds = %if.then, %sw.epilog
  br label %for.inc28, !dbg !4285

for.inc28:                                        ; preds = %if.end
  %38 = load i32, i32* %i, align 4, !dbg !4286
  %inc = add i32 %38, 1, !dbg !4286
  store i32 %inc, i32* %i, align 4, !dbg !4286
  br label %for.cond9, !dbg !4287, !llvm.loop !4288

for.end29:                                        ; preds = %cond.end
  ret void, !dbg !4290
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_value_profile_transformations() #0 !dbg !4291 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %changed = alloca i8, align 1
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %th = alloca %struct.histogram_value_t*, align 8
  %tmp39 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4292, metadata !DIExpression()), !dbg !4293
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4294, metadata !DIExpression()), !dbg !4295
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !4296, metadata !DIExpression()), !dbg !4297
  store i8 0, i8* %changed, align 1, !dbg !4297
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4298
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4298
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4298
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4298
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4298
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4298
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !4298
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4298
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !4298
  br label %for.cond, !dbg !4298

for.cond:                                         ; preds = %for.inc42, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4300
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4300
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4300
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4300
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4300
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4300
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4300
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !4300
  br i1 %cmp, label %for.body, label %for.end44, !dbg !4298

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4302
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !4305
  %9 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4305
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4305
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !4305
  br label %for.cond3, !dbg !4306

for.cond3:                                        ; preds = %for.inc, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4307
  %tobool = icmp ne i8 %call, 0, !dbg !4309
  %lnot = xor i1 %tobool, true, !dbg !4309
  br i1 %lnot, label %for.body4, label %for.end, !dbg !4310

for.body4:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4311, metadata !DIExpression()), !dbg !4313
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4314
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %stmt, align 8, !dbg !4313
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %th, metadata !4315, metadata !DIExpression()), !dbg !4316
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4317
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !4317
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4318
  %call7 = call %struct.histogram_value_t* @gimple_histogram_value(%struct.function* %add.ptr6, %union.gimple_statement_d* %12), !dbg !4319
  store %struct.histogram_value_t* %call7, %struct.histogram_value_t** %th, align 8, !dbg !4316
  %13 = load %struct.histogram_value_t*, %struct.histogram_value_t** %th, align 8, !dbg !4320
  %tobool8 = icmp ne %struct.histogram_value_t* %13, null, !dbg !4320
  br i1 %tobool8, label %if.end, label %if.then, !dbg !4322

if.then:                                          ; preds = %for.body4
  br label %for.inc, !dbg !4323

if.end:                                           ; preds = %for.body4
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4324
  %tobool9 = icmp ne %struct._IO_FILE* %14, null, !dbg !4324
  br i1 %tobool9, label %if.then10, label %if.end13, !dbg !4326

if.then10:                                        ; preds = %if.end
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4327
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.23, i64 0, i64 0)), !dbg !4329
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4330
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4331
  call void @print_gimple_stmt(%struct._IO_FILE* %16, %union.gimple_statement_d* %17, i32 0, i32 2), !dbg !4332
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4333
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !4333
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4334
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4335
  call void @dump_histograms_for_stmt(%struct.function* %add.ptr12, %struct._IO_FILE* %19, %union.gimple_statement_d* %20), !dbg !4336
  br label %if.end13, !dbg !4337

if.end13:                                         ; preds = %if.then10, %if.end
  %21 = load i32, i32* @flag_value_profile_transformations, align 4, !dbg !4338
  %tobool14 = icmp ne i32 %21, 0, !dbg !4338
  br i1 %tobool14, label %land.lhs.true, label %if.end41, !dbg !4340

land.lhs.true:                                    ; preds = %if.end13
  %call15 = call zeroext i8 @gimple_mod_subtract_transform(%struct.gimple_stmt_iterator* %gsi), !dbg !4341
  %conv = zext i8 %call15 to i32, !dbg !4341
  %tobool16 = icmp ne i32 %conv, 0, !dbg !4341
  br i1 %tobool16, label %if.then32, label %lor.lhs.false, !dbg !4342

lor.lhs.false:                                    ; preds = %land.lhs.true
  %call17 = call zeroext i8 @gimple_divmod_fixed_value_transform(%struct.gimple_stmt_iterator* %gsi), !dbg !4343
  %conv18 = zext i8 %call17 to i32, !dbg !4343
  %tobool19 = icmp ne i32 %conv18, 0, !dbg !4343
  br i1 %tobool19, label %if.then32, label %lor.lhs.false20, !dbg !4344

lor.lhs.false20:                                  ; preds = %lor.lhs.false
  %call21 = call zeroext i8 @gimple_mod_pow2_value_transform(%struct.gimple_stmt_iterator* %gsi), !dbg !4345
  %conv22 = zext i8 %call21 to i32, !dbg !4345
  %tobool23 = icmp ne i32 %conv22, 0, !dbg !4345
  br i1 %tobool23, label %if.then32, label %lor.lhs.false24, !dbg !4346

lor.lhs.false24:                                  ; preds = %lor.lhs.false20
  %call25 = call zeroext i8 @gimple_stringops_transform(%struct.gimple_stmt_iterator* %gsi), !dbg !4347
  %conv26 = zext i8 %call25 to i32, !dbg !4347
  %tobool27 = icmp ne i32 %conv26, 0, !dbg !4347
  br i1 %tobool27, label %if.then32, label %lor.lhs.false28, !dbg !4348

lor.lhs.false28:                                  ; preds = %lor.lhs.false24
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4349
  %call29 = call zeroext i8 @gimple_ic_transform(%union.gimple_statement_d* %22), !dbg !4350
  %conv30 = zext i8 %call29 to i32, !dbg !4350
  %tobool31 = icmp ne i32 %conv30, 0, !dbg !4350
  br i1 %tobool31, label %if.then32, label %if.end41, !dbg !4351

if.then32:                                        ; preds = %lor.lhs.false28, %lor.lhs.false24, %lor.lhs.false20, %lor.lhs.false, %land.lhs.true
  %call33 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4352
  store %union.gimple_statement_d* %call33, %union.gimple_statement_d** %stmt, align 8, !dbg !4354
  store i8 1, i8* %changed, align 1, !dbg !4355
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4356
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4358
  %call34 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %24), !dbg !4359
  %cmp35 = icmp ne %struct.basic_block_def* %23, %call34, !dbg !4360
  br i1 %cmp35, label %if.then37, label %if.end40, !dbg !4361

if.then37:                                        ; preds = %if.then32
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4362
  %call38 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %25), !dbg !4364
  store %struct.basic_block_def* %call38, %struct.basic_block_def** %bb, align 8, !dbg !4365
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4366
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp39, %union.gimple_statement_d* %26), !dbg !4367
  %27 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4367
  %28 = bitcast %struct.gimple_stmt_iterator* %tmp39 to i8*, !dbg !4367
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 24, i1 false), !dbg !4367
  br label %if.end40, !dbg !4368

if.end40:                                         ; preds = %if.then37, %if.then32
  br label %if.end41, !dbg !4369

if.end41:                                         ; preds = %if.end40, %lor.lhs.false28, %if.end13
  br label %for.inc, !dbg !4370

for.inc:                                          ; preds = %if.end41, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4371
  br label %for.cond3, !dbg !4372, !llvm.loop !4373

for.end:                                          ; preds = %for.cond3
  br label %for.inc42, !dbg !4375

for.inc42:                                        ; preds = %for.end
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4300
  %next_bb43 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 6, !dbg !4300
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb43, align 8, !dbg !4300
  store %struct.basic_block_def* %30, %struct.basic_block_def** %bb, align 8, !dbg !4300
  br label %for.cond, !dbg !4300, !llvm.loop !4376

for.end44:                                        ; preds = %for.cond
  %31 = load i8, i8* %changed, align 1, !dbg !4378
  %tobool45 = icmp ne i8 %31, 0, !dbg !4378
  br i1 %tobool45, label %if.then46, label %if.end48, !dbg !4380

if.then46:                                        ; preds = %for.end44
  %call47 = call i32 @counts_to_freqs(), !dbg !4381
  br label %if.end48, !dbg !4383

if.end48:                                         ; preds = %if.then46, %for.end44
  %32 = load i8, i8* %changed, align 1, !dbg !4384
  ret i8 %32, !dbg !4385
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_values_to_profile(%union.gimple_statement_d* %stmt, %struct.VEC_histogram_value_heap** %values) #0 !dbg !4386 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %values.addr = alloca %struct.VEC_histogram_value_heap**, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4389, metadata !DIExpression()), !dbg !4390
  store %struct.VEC_histogram_value_heap** %values, %struct.VEC_histogram_value_heap*** %values.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_histogram_value_heap*** %values.addr, metadata !4391, metadata !DIExpression()), !dbg !4392
  %0 = load i32, i32* @flag_value_profile_transformations, align 4, !dbg !4393
  %tobool = icmp ne i32 %0, 0, !dbg !4393
  br i1 %tobool, label %if.then, label %if.end, !dbg !4395

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4396
  %2 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4398
  call void @gimple_divmod_values_to_profile(%union.gimple_statement_d* %1, %struct.VEC_histogram_value_heap** %2), !dbg !4399
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4400
  %4 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4401
  call void @gimple_stringops_values_to_profile(%union.gimple_statement_d* %3, %struct.VEC_histogram_value_heap** %4), !dbg !4402
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4403
  %6 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4404
  call void @gimple_indirect_call_to_profile(%union.gimple_statement_d* %5, %struct.VEC_histogram_value_heap** %6), !dbg !4405
  br label %if.end, !dbg !4406

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !4407
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_histogram_value_base_iterate(%struct.VEC_histogram_value_base* %vec_, i32 %ix_, %struct.histogram_value_t** %ptr) #0 !dbg !4408 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_histogram_value_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.histogram_value_t**, align 8
  store %struct.VEC_histogram_value_base* %vec_, %struct.VEC_histogram_value_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_histogram_value_base** %vec_.addr, metadata !4413, metadata !DIExpression()), !dbg !4414
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4415, metadata !DIExpression()), !dbg !4414
  store %struct.histogram_value_t** %ptr, %struct.histogram_value_t*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t*** %ptr.addr, metadata !4416, metadata !DIExpression()), !dbg !4414
  %0 = load %struct.VEC_histogram_value_base*, %struct.VEC_histogram_value_base** %vec_.addr, align 8, !dbg !4417
  %tobool = icmp ne %struct.VEC_histogram_value_base* %0, null, !dbg !4417
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4417

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4417
  %2 = load %struct.VEC_histogram_value_base*, %struct.VEC_histogram_value_base** %vec_.addr, align 8, !dbg !4417
  %num = getelementptr inbounds %struct.VEC_histogram_value_base, %struct.VEC_histogram_value_base* %2, i32 0, i32 0, !dbg !4417
  %3 = load i32, i32* %num, align 8, !dbg !4417
  %cmp = icmp ult i32 %1, %3, !dbg !4417
  br i1 %cmp, label %if.then, label %if.else, !dbg !4414

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_histogram_value_base*, %struct.VEC_histogram_value_base** %vec_.addr, align 8, !dbg !4419
  %vec = getelementptr inbounds %struct.VEC_histogram_value_base, %struct.VEC_histogram_value_base* %4, i32 0, i32 2, !dbg !4419
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4419
  %idxprom = zext i32 %5 to i64, !dbg !4419
  %arrayidx = getelementptr inbounds [1 x %struct.histogram_value_t*], [1 x %struct.histogram_value_t*]* %vec, i64 0, i64 %idxprom, !dbg !4419
  %6 = load %struct.histogram_value_t*, %struct.histogram_value_t** %arrayidx, align 8, !dbg !4419
  %7 = load %struct.histogram_value_t**, %struct.histogram_value_t*** %ptr.addr, align 8, !dbg !4419
  store %struct.histogram_value_t* %6, %struct.histogram_value_t** %7, align 8, !dbg !4419
  store i32 1, i32* %retval, align 4, !dbg !4419
  br label %return, !dbg !4419

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.histogram_value_t**, %struct.histogram_value_t*** %ptr.addr, align 8, !dbg !4421
  store %struct.histogram_value_t* null, %struct.histogram_value_t** %8, align 8, !dbg !4421
  store i32 0, i32* %retval, align 4, !dbg !4421
  br label %return, !dbg !4421

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4414
  ret i32 %9, !dbg !4414
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_divmod_values_to_profile(%union.gimple_statement_d* %stmt, %struct.VEC_histogram_value_heap** %values) #0 !dbg !4423 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %values.addr = alloca %struct.VEC_histogram_value_heap**, align 8
  %lhs = alloca %union.tree_node*, align 8
  %divisor = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %hist = alloca %struct.histogram_value_t*, align 8
  %val = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4424, metadata !DIExpression()), !dbg !4425
  store %struct.VEC_histogram_value_heap** %values, %struct.VEC_histogram_value_heap*** %values.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_histogram_value_heap*** %values.addr, metadata !4426, metadata !DIExpression()), !dbg !4427
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !4428, metadata !DIExpression()), !dbg !4429
  call void @llvm.dbg.declare(metadata %union.tree_node** %divisor, metadata !4430, metadata !DIExpression()), !dbg !4431
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !4432, metadata !DIExpression()), !dbg !4433
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4434, metadata !DIExpression()), !dbg !4435
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %hist, metadata !4436, metadata !DIExpression()), !dbg !4437
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4438
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4440
  %cmp = icmp ne i32 %call, 6, !dbg !4441
  br i1 %cmp, label %if.then, label %if.end, !dbg !4442

if.then:                                          ; preds = %entry
  br label %return, !dbg !4443

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4444
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !4445
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !4446
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4447
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !4447
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4447
  %3 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !4447
  store %union.tree_node* %3, %union.tree_node** %type, align 8, !dbg !4448
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4449
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !4449
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !4449
  %bf.load = load i64, i64* %5, align 8, !dbg !4449
  %bf.clear = and i64 %bf.load, 65535, !dbg !4449
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4449
  %cmp3 = icmp eq i32 %bf.cast, 6, !dbg !4449
  br i1 %cmp3, label %if.end16, label %lor.lhs.false, !dbg !4449

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4449
  %base4 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4449
  %7 = bitcast %struct.tree_base* %base4 to i64*, !dbg !4449
  %bf.load5 = load i64, i64* %7, align 8, !dbg !4449
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !4449
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !4449
  %cmp8 = icmp eq i32 %bf.cast7, 7, !dbg !4449
  br i1 %cmp8, label %if.end16, label %lor.lhs.false9, !dbg !4449

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4449
  %base10 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4449
  %9 = bitcast %struct.tree_base* %base10 to i64*, !dbg !4449
  %bf.load11 = load i64, i64* %9, align 8, !dbg !4449
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !4449
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !4449
  %cmp14 = icmp eq i32 %bf.cast13, 8, !dbg !4449
  br i1 %cmp14, label %if.end16, label %if.then15, !dbg !4451

if.then15:                                        ; preds = %lor.lhs.false9
  br label %return, !dbg !4452

if.end16:                                         ; preds = %lor.lhs.false9, %lor.lhs.false, %if.end
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4453
  %call17 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %10), !dbg !4454
  switch i32 %call17, label %sw.default [
    i32 67, label %sw.bb
    i32 71, label %sw.bb
  ], !dbg !4455

sw.bb:                                            ; preds = %if.end16, %if.end16
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4456
  %call18 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %11), !dbg !4458
  store %union.tree_node* %call18, %union.tree_node** %divisor, align 8, !dbg !4459
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4460
  %call19 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %12), !dbg !4461
  store %union.tree_node* %call19, %union.tree_node** %op0, align 8, !dbg !4462
  %13 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4463
  %call20 = call i32 @VEC_histogram_value_heap_reserve(%struct.VEC_histogram_value_heap** %13, i32 3), !dbg !4463
  %14 = load %union.tree_node*, %union.tree_node** %divisor, align 8, !dbg !4464
  %call21 = call zeroext i8 @is_gimple_reg(%union.tree_node* %14), !dbg !4466
  %tobool = icmp ne i8 %call21, 0, !dbg !4466
  br i1 %tobool, label %if.then22, label %if.end27, !dbg !4467

if.then22:                                        ; preds = %sw.bb
  %15 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4468
  %16 = load %struct.VEC_histogram_value_heap*, %struct.VEC_histogram_value_heap** %15, align 8, !dbg !4468
  %tobool23 = icmp ne %struct.VEC_histogram_value_heap* %16, null, !dbg !4468
  br i1 %tobool23, label %cond.true, label %cond.false, !dbg !4468

cond.true:                                        ; preds = %if.then22
  %17 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4468
  %18 = load %struct.VEC_histogram_value_heap*, %struct.VEC_histogram_value_heap** %17, align 8, !dbg !4468
  %base24 = getelementptr inbounds %struct.VEC_histogram_value_heap, %struct.VEC_histogram_value_heap* %18, i32 0, i32 0, !dbg !4468
  br label %cond.end, !dbg !4468

cond.false:                                       ; preds = %if.then22
  br label %cond.end, !dbg !4468

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_histogram_value_base* [ %base24, %cond.true ], [ null, %cond.false ], !dbg !4468
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4468
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !4468
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4468
  %21 = load %union.tree_node*, %union.tree_node** %divisor, align 8, !dbg !4468
  %call25 = call %struct.histogram_value_t* @gimple_alloc_histogram_value(%struct.function* %add.ptr, i32 2, %union.gimple_statement_d* %20, %union.tree_node* %21), !dbg !4468
  %call26 = call %struct.histogram_value_t** @VEC_histogram_value_base_quick_push(%struct.VEC_histogram_value_base* %cond, %struct.histogram_value_t* %call25), !dbg !4468
  br label %if.end27, !dbg !4468

if.end27:                                         ; preds = %cond.end, %sw.bb
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4469
  %call28 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %22), !dbg !4471
  %cmp29 = icmp eq i32 %call28, 71, !dbg !4472
  br i1 %cmp29, label %land.lhs.true, label %if.end57, !dbg !4473

land.lhs.true:                                    ; preds = %if.end27
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4474
  %base30 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !4474
  %24 = bitcast %struct.tree_base* %base30 to i64*, !dbg !4474
  %bf.load31 = load i64, i64* %24, align 8, !dbg !4474
  %bf.lshr = lshr i64 %bf.load31, 21, !dbg !4474
  %bf.clear32 = and i64 %bf.lshr, 1, !dbg !4474
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !4474
  %tobool34 = icmp ne i32 %bf.cast33, 0, !dbg !4474
  br i1 %tobool34, label %if.then35, label %if.end57, !dbg !4475

if.then35:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !4476, metadata !DIExpression()), !dbg !4478
  %25 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4479
  %26 = load %struct.VEC_histogram_value_heap*, %struct.VEC_histogram_value_heap** %25, align 8, !dbg !4479
  %tobool36 = icmp ne %struct.VEC_histogram_value_heap* %26, null, !dbg !4479
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !4479

cond.true37:                                      ; preds = %if.then35
  %27 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4479
  %28 = load %struct.VEC_histogram_value_heap*, %struct.VEC_histogram_value_heap** %27, align 8, !dbg !4479
  %base38 = getelementptr inbounds %struct.VEC_histogram_value_heap, %struct.VEC_histogram_value_heap* %28, i32 0, i32 0, !dbg !4479
  br label %cond.end40, !dbg !4479

cond.false39:                                     ; preds = %if.then35
  br label %cond.end40, !dbg !4479

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_histogram_value_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !4479
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4479
  %add.ptr42 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !4479
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4479
  %31 = load %union.tree_node*, %union.tree_node** %divisor, align 8, !dbg !4479
  %call43 = call %struct.histogram_value_t* @gimple_alloc_histogram_value(%struct.function* %add.ptr42, i32 1, %union.gimple_statement_d* %30, %union.tree_node* %31), !dbg !4479
  %call44 = call %struct.histogram_value_t** @VEC_histogram_value_base_quick_push(%struct.VEC_histogram_value_base* %cond41, %struct.histogram_value_t* %call43), !dbg !4479
  %32 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4480
  %33 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !4480
  %34 = load %union.tree_node*, %union.tree_node** %divisor, align 8, !dbg !4480
  %call45 = call %union.tree_node* @build2_stat(i32 67, %union.tree_node* %32, %union.tree_node* %33, %union.tree_node* %34), !dbg !4480
  store %union.tree_node* %call45, %union.tree_node** %val, align 8, !dbg !4481
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4482
  %add.ptr46 = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !4482
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4483
  %37 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !4484
  %call47 = call %struct.histogram_value_t* @gimple_alloc_histogram_value(%struct.function* %add.ptr46, i32 0, %union.gimple_statement_d* %36, %union.tree_node* %37), !dbg !4485
  store %struct.histogram_value_t* %call47, %struct.histogram_value_t** %hist, align 8, !dbg !4486
  %38 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !4487
  %hdata = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %38, i32 0, i32 3, !dbg !4488
  %intvl = bitcast %union.anon.0* %hdata to %struct.anon.1*, !dbg !4489
  %int_start = getelementptr inbounds %struct.anon.1, %struct.anon.1* %intvl, i32 0, i32 0, !dbg !4490
  store i32 0, i32* %int_start, align 8, !dbg !4491
  %39 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !4492
  %hdata48 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %39, i32 0, i32 3, !dbg !4493
  %intvl49 = bitcast %union.anon.0* %hdata48 to %struct.anon.1*, !dbg !4494
  %steps = getelementptr inbounds %struct.anon.1, %struct.anon.1* %intvl49, i32 0, i32 1, !dbg !4495
  store i32 2, i32* %steps, align 4, !dbg !4496
  %40 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4497
  %41 = load %struct.VEC_histogram_value_heap*, %struct.VEC_histogram_value_heap** %40, align 8, !dbg !4497
  %tobool50 = icmp ne %struct.VEC_histogram_value_heap* %41, null, !dbg !4497
  br i1 %tobool50, label %cond.true51, label %cond.false53, !dbg !4497

cond.true51:                                      ; preds = %cond.end40
  %42 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4497
  %43 = load %struct.VEC_histogram_value_heap*, %struct.VEC_histogram_value_heap** %42, align 8, !dbg !4497
  %base52 = getelementptr inbounds %struct.VEC_histogram_value_heap, %struct.VEC_histogram_value_heap* %43, i32 0, i32 0, !dbg !4497
  br label %cond.end54, !dbg !4497

cond.false53:                                     ; preds = %cond.end40
  br label %cond.end54, !dbg !4497

cond.end54:                                       ; preds = %cond.false53, %cond.true51
  %cond55 = phi %struct.VEC_histogram_value_base* [ %base52, %cond.true51 ], [ null, %cond.false53 ], !dbg !4497
  %44 = load %struct.histogram_value_t*, %struct.histogram_value_t** %hist, align 8, !dbg !4497
  %call56 = call %struct.histogram_value_t** @VEC_histogram_value_base_quick_push(%struct.VEC_histogram_value_base* %cond55, %struct.histogram_value_t* %44), !dbg !4497
  br label %if.end57, !dbg !4498

if.end57:                                         ; preds = %cond.end54, %land.lhs.true, %if.end27
  br label %return, !dbg !4499

sw.default:                                       ; preds = %if.end16
  br label %return, !dbg !4500

return:                                           ; preds = %sw.default, %if.end57, %if.then15, %if.then
  ret void, !dbg !4501
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_stringops_values_to_profile(%union.gimple_statement_d* %stmt, %struct.VEC_histogram_value_heap** %values) #0 !dbg !4502 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %values.addr = alloca %struct.VEC_histogram_value_heap**, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %blck_size = alloca %union.tree_node*, align 8
  %dest = alloca %union.tree_node*, align 8
  %size_arg = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4503, metadata !DIExpression()), !dbg !4504
  store %struct.VEC_histogram_value_heap** %values, %struct.VEC_histogram_value_heap*** %values.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_histogram_value_heap*** %values.addr, metadata !4505, metadata !DIExpression()), !dbg !4506
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !4507, metadata !DIExpression()), !dbg !4508
  call void @llvm.dbg.declare(metadata %union.tree_node** %blck_size, metadata !4509, metadata !DIExpression()), !dbg !4510
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest, metadata !4511, metadata !DIExpression()), !dbg !4512
  call void @llvm.dbg.declare(metadata i32* %size_arg, metadata !4513, metadata !DIExpression()), !dbg !4514
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4515
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4517
  %cmp = icmp ne i32 %call, 8, !dbg !4518
  br i1 %cmp, label %if.then, label %if.end, !dbg !4519

if.then:                                          ; preds = %entry
  br label %if.end27, !dbg !4520

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4521
  %call1 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %1), !dbg !4522
  store %union.tree_node* %call1, %union.tree_node** %fndecl, align 8, !dbg !4523
  %2 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4524
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !4524
  br i1 %tobool, label %if.end3, label %if.then2, !dbg !4526

if.then2:                                         ; preds = %if.end
  br label %if.end27, !dbg !4527

if.end3:                                          ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4528
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4530
  %call4 = call zeroext i8 @interesting_stringop_to_profile_p(%union.tree_node* %3, %union.gimple_statement_d* %4, i32* %size_arg), !dbg !4531
  %tobool5 = icmp ne i8 %call4, 0, !dbg !4531
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !4532

if.then6:                                         ; preds = %if.end3
  br label %if.end27, !dbg !4533

if.end7:                                          ; preds = %if.end3
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4534
  %call8 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %5, i32 0), !dbg !4535
  store %union.tree_node* %call8, %union.tree_node** %dest, align 8, !dbg !4536
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4537
  %7 = load i32, i32* %size_arg, align 4, !dbg !4538
  %call9 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %6, i32 %7), !dbg !4539
  store %union.tree_node* %call9, %union.tree_node** %blck_size, align 8, !dbg !4540
  %8 = load %union.tree_node*, %union.tree_node** %blck_size, align 8, !dbg !4541
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4541
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !4541
  %bf.load = load i64, i64* %9, align 8, !dbg !4541
  %bf.clear = and i64 %bf.load, 65535, !dbg !4541
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4541
  %cmp10 = icmp ne i32 %bf.cast, 23, !dbg !4543
  br i1 %cmp10, label %if.then11, label %if.end17, !dbg !4544

if.then11:                                        ; preds = %if.end7
  %10 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4545
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4545
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !4545
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4545
  %13 = load %union.tree_node*, %union.tree_node** %blck_size, align 8, !dbg !4545
  %call12 = call %struct.histogram_value_t* @gimple_alloc_histogram_value(%struct.function* %add.ptr, i32 2, %union.gimple_statement_d* %12, %union.tree_node* %13), !dbg !4545
  %call13 = call %struct.histogram_value_t** @VEC_histogram_value_heap_safe_push(%struct.VEC_histogram_value_heap** %10, %struct.histogram_value_t* %call12), !dbg !4545
  %14 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4547
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4547
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !4547
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4547
  %17 = load %union.tree_node*, %union.tree_node** %blck_size, align 8, !dbg !4547
  %call15 = call %struct.histogram_value_t* @gimple_alloc_histogram_value(%struct.function* %add.ptr14, i32 5, %union.gimple_statement_d* %16, %union.tree_node* %17), !dbg !4547
  %call16 = call %struct.histogram_value_t** @VEC_histogram_value_heap_safe_push(%struct.VEC_histogram_value_heap** %14, %struct.histogram_value_t* %call15), !dbg !4547
  br label %if.end17, !dbg !4548

if.end17:                                         ; preds = %if.then11, %if.end7
  %18 = load %union.tree_node*, %union.tree_node** %blck_size, align 8, !dbg !4549
  %base18 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !4549
  %19 = bitcast %struct.tree_base* %base18 to i64*, !dbg !4549
  %bf.load19 = load i64, i64* %19, align 8, !dbg !4549
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !4549
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !4549
  %cmp22 = icmp ne i32 %bf.cast21, 23, !dbg !4551
  br i1 %cmp22, label %if.then23, label %if.end27, !dbg !4552

if.then23:                                        ; preds = %if.end17
  %20 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4553
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4553
  %add.ptr24 = getelementptr inbounds %struct.function, %struct.function* %21, i64 0, !dbg !4553
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4553
  %23 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !4553
  %call25 = call %struct.histogram_value_t* @gimple_alloc_histogram_value(%struct.function* %add.ptr24, i32 6, %union.gimple_statement_d* %22, %union.tree_node* %23), !dbg !4553
  %call26 = call %struct.histogram_value_t** @VEC_histogram_value_heap_safe_push(%struct.VEC_histogram_value_heap** %20, %struct.histogram_value_t* %call25), !dbg !4553
  br label %if.end27, !dbg !4553

if.end27:                                         ; preds = %if.then, %if.then2, %if.then6, %if.then23, %if.end17
  ret void, !dbg !4554
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_indirect_call_to_profile(%union.gimple_statement_d* %stmt, %struct.VEC_histogram_value_heap** %values) #0 !dbg !4555 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %values.addr = alloca %struct.VEC_histogram_value_heap**, align 8
  %callee = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4556, metadata !DIExpression()), !dbg !4557
  store %struct.VEC_histogram_value_heap** %values, %struct.VEC_histogram_value_heap*** %values.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_histogram_value_heap*** %values.addr, metadata !4558, metadata !DIExpression()), !dbg !4559
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee, metadata !4560, metadata !DIExpression()), !dbg !4561
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4562
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4564
  %cmp = icmp ne i32 %call, 8, !dbg !4565
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4566

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4567
  %call1 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %1), !dbg !4568
  %cmp2 = icmp ne %union.tree_node* %call1, null, !dbg !4569
  br i1 %cmp2, label %if.then, label %if.end, !dbg !4570

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !4571

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4572
  %call3 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %2), !dbg !4573
  store %union.tree_node* %call3, %union.tree_node** %callee, align 8, !dbg !4574
  %3 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4575
  %call4 = call i32 @VEC_histogram_value_heap_reserve(%struct.VEC_histogram_value_heap** %3, i32 3), !dbg !4575
  %4 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4576
  %5 = load %struct.VEC_histogram_value_heap*, %struct.VEC_histogram_value_heap** %4, align 8, !dbg !4576
  %tobool = icmp ne %struct.VEC_histogram_value_heap* %5, null, !dbg !4576
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4576

cond.true:                                        ; preds = %if.end
  %6 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %values.addr, align 8, !dbg !4576
  %7 = load %struct.VEC_histogram_value_heap*, %struct.VEC_histogram_value_heap** %6, align 8, !dbg !4576
  %base = getelementptr inbounds %struct.VEC_histogram_value_heap, %struct.VEC_histogram_value_heap* %7, i32 0, i32 0, !dbg !4576
  br label %cond.end, !dbg !4576

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4576

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_histogram_value_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4576
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4576
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !4576
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4576
  %10 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4576
  %call5 = call %struct.histogram_value_t* @gimple_alloc_histogram_value(%struct.function* %add.ptr, i32 4, %union.gimple_statement_d* %9, %union.tree_node* %10), !dbg !4576
  %call6 = call %struct.histogram_value_t** @VEC_histogram_value_base_quick_push(%struct.VEC_histogram_value_base* %cond, %struct.histogram_value_t* %call5), !dbg !4576
  br label %return, !dbg !4577

return:                                           ; preds = %cond.end, %if.then
  ret void, !dbg !4578
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !4579 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4582, metadata !DIExpression()), !dbg !4583
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4584
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4585
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4586
  %bf.load = load i32, i32* %1, align 8, !dbg !4586
  %bf.clear = and i32 %bf.load, 255, !dbg !4586
  ret i32 %bf.clear, !dbg !4587
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !4588 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4591, metadata !DIExpression()), !dbg !4592
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4593
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !4594
  ret %union.tree_node* %call, !dbg !4595
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !4596 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4599, metadata !DIExpression()), !dbg !4600
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4601, metadata !DIExpression()), !dbg !4602
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4603
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !4604
  store i32 %call, i32* %code, align 4, !dbg !4605
  %1 = load i32, i32* %code, align 4, !dbg !4606
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !4608
  %cmp = icmp eq i32 %call1, 3, !dbg !4609
  br i1 %cmp, label %if.then, label %if.end, !dbg !4610

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4611
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !4611
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !4611
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !4611
  %bf.load = load i64, i64* %3, align 8, !dbg !4611
  %bf.clear = and i64 %bf.load, 65535, !dbg !4611
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4611
  store i32 %bf.cast, i32* %code, align 4, !dbg !4612
  br label %if.end, !dbg !4613

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !4614
  ret i32 %4, !dbg !4615
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !4616 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4617, metadata !DIExpression()), !dbg !4618
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4619
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !4621
  %cmp = icmp uge i32 %call, 3, !dbg !4622
  br i1 %cmp, label %if.then, label %if.else, !dbg !4623

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4624
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !4625
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !4626
  br label %return, !dbg !4626

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4627
  br label %return, !dbg !4627

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4628
  ret %union.tree_node* %2, !dbg !4628
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !4629 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4630, metadata !DIExpression()), !dbg !4631
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4632
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !4633
  ret %union.tree_node* %call, !dbg !4634
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_histogram_value_heap_reserve(%struct.VEC_histogram_value_heap** %vec_, i32 %alloc_) #0 !dbg !4635 {
entry:
  %vec_.addr = alloca %struct.VEC_histogram_value_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_histogram_value_heap** %vec_, %struct.VEC_histogram_value_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_histogram_value_heap*** %vec_.addr, metadata !4639, metadata !DIExpression()), !dbg !4640
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4641, metadata !DIExpression()), !dbg !4640
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !4642, metadata !DIExpression()), !dbg !4640
  %0 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %vec_.addr, align 8, !dbg !4640
  %1 = load %struct.VEC_histogram_value_heap*, %struct.VEC_histogram_value_heap** %0, align 8, !dbg !4640
  %tobool = icmp ne %struct.VEC_histogram_value_heap* %1, null, !dbg !4640
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4640

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %vec_.addr, align 8, !dbg !4640
  %3 = load %struct.VEC_histogram_value_heap*, %struct.VEC_histogram_value_heap** %2, align 8, !dbg !4640
  %base = getelementptr inbounds %struct.VEC_histogram_value_heap, %struct.VEC_histogram_value_heap* %3, i32 0, i32 0, !dbg !4640
  br label %cond.end, !dbg !4640

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4640

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_histogram_value_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4640
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !4640
  %call = call i32 @VEC_histogram_value_base_space(%struct.VEC_histogram_value_base* %cond, i32 %4), !dbg !4640
  %tobool1 = icmp ne i32 %call, 0, !dbg !4640
  %lnot = xor i1 %tobool1, true, !dbg !4640
  %lnot.ext = zext i1 %lnot to i32, !dbg !4640
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !4640
  %5 = load i32, i32* %extend, align 4, !dbg !4643
  %tobool2 = icmp ne i32 %5, 0, !dbg !4643
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4640

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %vec_.addr, align 8, !dbg !4643
  %7 = load %struct.VEC_histogram_value_heap*, %struct.VEC_histogram_value_heap** %6, align 8, !dbg !4643
  %8 = bitcast %struct.VEC_histogram_value_heap* %7 to i8*, !dbg !4643
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !4643
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !4643
  %10 = bitcast i8* %call3 to %struct.VEC_histogram_value_heap*, !dbg !4643
  %11 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %vec_.addr, align 8, !dbg !4643
  store %struct.VEC_histogram_value_heap* %10, %struct.VEC_histogram_value_heap** %11, align 8, !dbg !4643
  br label %if.end, !dbg !4643

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !4640
  ret i32 %12, !dbg !4640
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.histogram_value_t** @VEC_histogram_value_base_quick_push(%struct.VEC_histogram_value_base* %vec_, %struct.histogram_value_t* %obj_) #0 !dbg !4645 {
entry:
  %vec_.addr = alloca %struct.VEC_histogram_value_base*, align 8
  %obj_.addr = alloca %struct.histogram_value_t*, align 8
  %slot_ = alloca %struct.histogram_value_t**, align 8
  store %struct.VEC_histogram_value_base* %vec_, %struct.VEC_histogram_value_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_histogram_value_base** %vec_.addr, metadata !4649, metadata !DIExpression()), !dbg !4650
  store %struct.histogram_value_t* %obj_, %struct.histogram_value_t** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %obj_.addr, metadata !4651, metadata !DIExpression()), !dbg !4650
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t*** %slot_, metadata !4652, metadata !DIExpression()), !dbg !4650
  %0 = load %struct.VEC_histogram_value_base*, %struct.VEC_histogram_value_base** %vec_.addr, align 8, !dbg !4650
  %num = getelementptr inbounds %struct.VEC_histogram_value_base, %struct.VEC_histogram_value_base* %0, i32 0, i32 0, !dbg !4650
  %1 = load i32, i32* %num, align 8, !dbg !4650
  %2 = load %struct.VEC_histogram_value_base*, %struct.VEC_histogram_value_base** %vec_.addr, align 8, !dbg !4650
  %alloc = getelementptr inbounds %struct.VEC_histogram_value_base, %struct.VEC_histogram_value_base* %2, i32 0, i32 1, !dbg !4650
  %3 = load i32, i32* %alloc, align 4, !dbg !4650
  %cmp = icmp ult i32 %1, %3, !dbg !4650
  %conv = zext i1 %cmp to i32, !dbg !4650
  %4 = load %struct.VEC_histogram_value_base*, %struct.VEC_histogram_value_base** %vec_.addr, align 8, !dbg !4650
  %vec = getelementptr inbounds %struct.VEC_histogram_value_base, %struct.VEC_histogram_value_base* %4, i32 0, i32 2, !dbg !4650
  %5 = load %struct.VEC_histogram_value_base*, %struct.VEC_histogram_value_base** %vec_.addr, align 8, !dbg !4650
  %num1 = getelementptr inbounds %struct.VEC_histogram_value_base, %struct.VEC_histogram_value_base* %5, i32 0, i32 0, !dbg !4650
  %6 = load i32, i32* %num1, align 8, !dbg !4650
  %inc = add i32 %6, 1, !dbg !4650
  store i32 %inc, i32* %num1, align 8, !dbg !4650
  %idxprom = zext i32 %6 to i64, !dbg !4650
  %arrayidx = getelementptr inbounds [1 x %struct.histogram_value_t*], [1 x %struct.histogram_value_t*]* %vec, i64 0, i64 %idxprom, !dbg !4650
  store %struct.histogram_value_t** %arrayidx, %struct.histogram_value_t*** %slot_, align 8, !dbg !4650
  %7 = load %struct.histogram_value_t*, %struct.histogram_value_t** %obj_.addr, align 8, !dbg !4650
  %8 = load %struct.histogram_value_t**, %struct.histogram_value_t*** %slot_, align 8, !dbg !4650
  store %struct.histogram_value_t* %7, %struct.histogram_value_t** %8, align 8, !dbg !4650
  %9 = load %struct.histogram_value_t**, %struct.histogram_value_t*** %slot_, align 8, !dbg !4650
  ret %struct.histogram_value_t** %9, !dbg !4650
}

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !4653 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4656, metadata !DIExpression()), !dbg !4657
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !4658, metadata !DIExpression()), !dbg !4659
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4660
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !4662
  %tobool = icmp ne i8 %call, 0, !dbg !4662
  br i1 %tobool, label %if.then, label %if.else, !dbg !4663

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4664
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !4666
  %2 = load i32, i32* %i.addr, align 4, !dbg !4667
  %idxprom = zext i32 %2 to i64, !dbg !4666
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !4666
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4666
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !4668
  br label %return, !dbg !4668

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4669
  br label %return, !dbg !4669

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4670
  ret %union.tree_node* %4, !dbg !4670
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !4671 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4674, metadata !DIExpression()), !dbg !4675
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4676
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4677
  %cmp = icmp uge i32 %call, 1, !dbg !4678
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4679

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4680
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !4681
  %cmp2 = icmp ule i32 %call1, 9, !dbg !4682
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !4683
  %land.ext = zext i1 %2 to i32, !dbg !4679
  %conv = trunc i32 %land.ext to i8, !dbg !4677
  ret i8 %conv, !dbg !4684
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !4685 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4688, metadata !DIExpression()), !dbg !4689
  call void @llvm.dbg.declare(metadata i64* %off, metadata !4690, metadata !DIExpression()), !dbg !4691
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4692
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !4693
  %idxprom = zext i32 %call to i64, !dbg !4694
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !4694
  %1 = load i64, i64* %arrayidx, align 8, !dbg !4694
  store i64 %1, i64* %off, align 8, !dbg !4695
  %2 = load i64, i64* %off, align 8, !dbg !4696
  %cmp = icmp ne i64 %2, 0, !dbg !4696
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4696

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4696
  br label %cond.end, !dbg !4696

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4696

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4696
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4697
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !4698
  %5 = load i64, i64* %off, align 8, !dbg !4699
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !4700
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !4701
  ret %union.tree_node** %6, !dbg !4702
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !4703 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4706, metadata !DIExpression()), !dbg !4707
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4708
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4709
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !4710
  ret i32 %call1, !dbg !4711
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !4712 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !4715, metadata !DIExpression()), !dbg !4716
  %0 = load i32, i32* %code.addr, align 4, !dbg !4717
  %idxprom = zext i32 %0 to i64, !dbg !4718
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !4718
  %1 = load i32, i32* %arrayidx, align 4, !dbg !4718
  ret i32 %1, !dbg !4719
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !4720 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4721, metadata !DIExpression()), !dbg !4722
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4723, metadata !DIExpression()), !dbg !4724
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4725
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4726
  store i32 %call, i32* %code, align 4, !dbg !4724
  %1 = load i32, i32* %code, align 4, !dbg !4727
  %cmp = icmp eq i32 %1, 6, !dbg !4729
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4730

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !4731
  %cmp1 = icmp eq i32 %2, 1, !dbg !4732
  br i1 %cmp1, label %if.then, label %if.else, !dbg !4733

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4734
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !4735
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4736
  %bf.load = load i32, i32* %4, align 8, !dbg !4736
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4736
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !4737
  br label %return, !dbg !4737

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !4738
  %cmp2 = icmp eq i32 %5, 8, !dbg !4740
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !4741

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !4742
  br label %return, !dbg !4742

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4743
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !4744
  br label %return, !dbg !4744

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !4745
  ret i32 %6, !dbg !4745
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !4746 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !4749, metadata !DIExpression()), !dbg !4750
  %0 = load i32, i32* %code.addr, align 4, !dbg !4751
  %idxprom = sext i32 %0 to i64, !dbg !4752
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !4752
  %1 = load i8, i8* %arrayidx, align 1, !dbg !4752
  %conv = zext i8 %1 to i32, !dbg !4753
  ret i32 %conv, !dbg !4754
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !4755 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4758, metadata !DIExpression()), !dbg !4759
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4760
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4761
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !4762
  %1 = load i32, i32* %num_ops, align 4, !dbg !4762
  ret i32 %1, !dbg !4763
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_histogram_value_base_space(%struct.VEC_histogram_value_base* %vec_, i32 %alloc_) #0 !dbg !4764 {
entry:
  %vec_.addr = alloca %struct.VEC_histogram_value_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_histogram_value_base* %vec_, %struct.VEC_histogram_value_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_histogram_value_base** %vec_.addr, metadata !4767, metadata !DIExpression()), !dbg !4768
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4769, metadata !DIExpression()), !dbg !4768
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4768
  %cmp = icmp sge i32 %0, 0, !dbg !4768
  %conv = zext i1 %cmp to i32, !dbg !4768
  %1 = load %struct.VEC_histogram_value_base*, %struct.VEC_histogram_value_base** %vec_.addr, align 8, !dbg !4768
  %tobool = icmp ne %struct.VEC_histogram_value_base* %1, null, !dbg !4768
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4768

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_histogram_value_base*, %struct.VEC_histogram_value_base** %vec_.addr, align 8, !dbg !4768
  %alloc = getelementptr inbounds %struct.VEC_histogram_value_base, %struct.VEC_histogram_value_base* %2, i32 0, i32 1, !dbg !4768
  %3 = load i32, i32* %alloc, align 4, !dbg !4768
  %4 = load %struct.VEC_histogram_value_base*, %struct.VEC_histogram_value_base** %vec_.addr, align 8, !dbg !4768
  %num = getelementptr inbounds %struct.VEC_histogram_value_base, %struct.VEC_histogram_value_base* %4, i32 0, i32 0, !dbg !4768
  %5 = load i32, i32* %num, align 8, !dbg !4768
  %sub = sub i32 %3, %5, !dbg !4768
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !4768
  %cmp1 = icmp uge i32 %sub, %6, !dbg !4768
  %conv2 = zext i1 %cmp1 to i32, !dbg !4768
  br label %cond.end, !dbg !4768

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !4768
  %tobool3 = icmp ne i32 %7, 0, !dbg !4768
  %lnot = xor i1 %tobool3, true, !dbg !4768
  %lnot.ext = zext i1 %lnot to i32, !dbg !4768
  br label %cond.end, !dbg !4768

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !4768
  ret i32 %cond, !dbg !4768
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !4770 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4771, metadata !DIExpression()), !dbg !4772
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !4773, metadata !DIExpression()), !dbg !4774
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4775
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !4776
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !4774
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !4777
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4777
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4777
  %bf.load = load i64, i64* %2, align 8, !dbg !4777
  %bf.clear = and i64 %bf.load, 65535, !dbg !4777
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4777
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !4779
  br i1 %cmp, label %if.then, label %if.end, !dbg !4780

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !4781
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !4781
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4781
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4781
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4781
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !4782
  br label %return, !dbg !4782

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4783
  br label %return, !dbg !4783

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4784
  ret %union.tree_node* %5, !dbg !4784
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @interesting_stringop_to_profile_p(%union.tree_node* %fndecl, %union.gimple_statement_d* %call, i32* %size_arg) #0 !dbg !4785 {
entry:
  %retval = alloca i8, align 1
  %fndecl.addr = alloca %union.tree_node*, align 8
  %call.addr = alloca %union.gimple_statement_d*, align 8
  %size_arg.addr = alloca i32*, align 8
  %fcode = alloca i32, align 4
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !4789, metadata !DIExpression()), !dbg !4790
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call.addr, metadata !4791, metadata !DIExpression()), !dbg !4792
  store i32* %size_arg, i32** %size_arg.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %size_arg.addr, metadata !4793, metadata !DIExpression()), !dbg !4794
  call void @llvm.dbg.declare(metadata i32* %fcode, metadata !4795, metadata !DIExpression()), !dbg !4796
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4797
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !4797
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4797
  %bf.load = load i32, i32* %function_code, align 8, !dbg !4797
  %bf.clear = and i32 %bf.load, 2047, !dbg !4797
  store i32 %bf.clear, i32* %fcode, align 4, !dbg !4796
  %1 = load i32, i32* %fcode, align 4, !dbg !4798
  %cmp = icmp ne i32 %1, 330, !dbg !4800
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4801

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %fcode, align 4, !dbg !4802
  %cmp1 = icmp ne i32 %2, 332, !dbg !4803
  br i1 %cmp1, label %land.lhs.true2, label %if.end, !dbg !4804

land.lhs.true2:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %fcode, align 4, !dbg !4805
  %cmp3 = icmp ne i32 %3, 333, !dbg !4806
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !4807

land.lhs.true4:                                   ; preds = %land.lhs.true2
  %4 = load i32, i32* %fcode, align 4, !dbg !4808
  %cmp5 = icmp ne i32 %4, 326, !dbg !4809
  br i1 %cmp5, label %if.then, label %if.end, !dbg !4810

if.then:                                          ; preds = %land.lhs.true4
  store i8 0, i8* %retval, align 1, !dbg !4811
  br label %return, !dbg !4811

if.end:                                           ; preds = %land.lhs.true4, %land.lhs.true2, %land.lhs.true, %entry
  %5 = load i32, i32* %fcode, align 4, !dbg !4812
  switch i32 %5, label %sw.default [
    i32 330, label %sw.bb
    i32 332, label %sw.bb
    i32 333, label %sw.bb7
    i32 326, label %sw.bb9
  ], !dbg !4813

sw.bb:                                            ; preds = %if.end, %if.end
  %6 = load i32*, i32** %size_arg.addr, align 8, !dbg !4814
  store i32 2, i32* %6, align 4, !dbg !4816
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !4817
  %call6 = call zeroext i8 (%union.gimple_statement_d*, ...) @validate_gimple_arglist(%union.gimple_statement_d* %7, i32 10, i32 10, i32 8, i32 19), !dbg !4818
  store i8 %call6, i8* %retval, align 1, !dbg !4819
  br label %return, !dbg !4819

sw.bb7:                                           ; preds = %if.end
  %8 = load i32*, i32** %size_arg.addr, align 8, !dbg !4820
  store i32 2, i32* %8, align 4, !dbg !4821
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !4822
  %call8 = call zeroext i8 (%union.gimple_statement_d*, ...) @validate_gimple_arglist(%union.gimple_statement_d* %9, i32 10, i32 8, i32 8, i32 19), !dbg !4823
  store i8 %call8, i8* %retval, align 1, !dbg !4824
  br label %return, !dbg !4824

sw.bb9:                                           ; preds = %if.end
  %10 = load i32*, i32** %size_arg.addr, align 8, !dbg !4825
  store i32 1, i32* %10, align 4, !dbg !4826
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !4827
  %call10 = call zeroext i8 (%union.gimple_statement_d*, ...) @validate_gimple_arglist(%union.gimple_statement_d* %11, i32 10, i32 8, i32 19), !dbg !4828
  store i8 %call10, i8* %retval, align 1, !dbg !4829
  br label %return, !dbg !4829

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 1273, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4830
  br label %sw.epilog, !dbg !4831

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !4832
  br label %return, !dbg !4832

return:                                           ; preds = %sw.epilog, %sw.bb9, %sw.bb7, %sw.bb, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !4833
  ret i8 %12, !dbg !4833
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !4834 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4835, metadata !DIExpression()), !dbg !4836
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !4837, metadata !DIExpression()), !dbg !4838
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4839
  %1 = load i32, i32* %index.addr, align 4, !dbg !4840
  %add = add i32 %1, 3, !dbg !4841
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !4842
  ret %union.tree_node* %call, !dbg !4843
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.histogram_value_t** @VEC_histogram_value_heap_safe_push(%struct.VEC_histogram_value_heap** %vec_, %struct.histogram_value_t* %obj_) #0 !dbg !4844 {
entry:
  %vec_.addr = alloca %struct.VEC_histogram_value_heap**, align 8
  %obj_.addr = alloca %struct.histogram_value_t*, align 8
  store %struct.VEC_histogram_value_heap** %vec_, %struct.VEC_histogram_value_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_histogram_value_heap*** %vec_.addr, metadata !4847, metadata !DIExpression()), !dbg !4848
  store %struct.histogram_value_t* %obj_, %struct.histogram_value_t** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %obj_.addr, metadata !4849, metadata !DIExpression()), !dbg !4848
  %0 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %vec_.addr, align 8, !dbg !4848
  %call = call i32 @VEC_histogram_value_heap_reserve(%struct.VEC_histogram_value_heap** %0, i32 1), !dbg !4848
  %1 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %vec_.addr, align 8, !dbg !4848
  %2 = load %struct.VEC_histogram_value_heap*, %struct.VEC_histogram_value_heap** %1, align 8, !dbg !4848
  %tobool = icmp ne %struct.VEC_histogram_value_heap* %2, null, !dbg !4848
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4848

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_histogram_value_heap**, %struct.VEC_histogram_value_heap*** %vec_.addr, align 8, !dbg !4848
  %4 = load %struct.VEC_histogram_value_heap*, %struct.VEC_histogram_value_heap** %3, align 8, !dbg !4848
  %base = getelementptr inbounds %struct.VEC_histogram_value_heap, %struct.VEC_histogram_value_heap* %4, i32 0, i32 0, !dbg !4848
  br label %cond.end, !dbg !4848

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4848

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_histogram_value_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4848
  %5 = load %struct.histogram_value_t*, %struct.histogram_value_t** %obj_.addr, align 8, !dbg !4848
  %call1 = call %struct.histogram_value_t** @VEC_histogram_value_base_quick_push(%struct.VEC_histogram_value_base* %cond, %struct.histogram_value_t* %5), !dbg !4848
  ret %struct.histogram_value_t** %call1, !dbg !4848
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !4850 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4851, metadata !DIExpression()), !dbg !4852
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4853
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !4854
  ret %union.tree_node* %call, !dbg !4855
}

declare dso_local zeroext i8 @validate_gimple_arglist(%union.gimple_statement_d*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_mod_subtract_transform(%struct.gimple_stmt_iterator* %si) #0 !dbg !4856 {
entry:
  %retval = alloca i8, align 1
  %si.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %histogram = alloca %struct.histogram_value_t*, align 8
  %code = alloca i32, align 4
  %count = alloca i64, align 8
  %wrong_values = alloca i64, align 8
  %all = alloca i64, align 8
  %lhs_type = alloca %union.tree_node*, align 8
  %result = alloca %union.tree_node*, align 8
  %prob1 = alloca i64, align 8
  %prob2 = alloca i64, align 8
  %i = alloca i32, align 4
  %steps = alloca i32, align 4
  %count1 = alloca i64, align 8
  %count2 = alloca i64, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_stmt_iterator* %si, %struct.gimple_stmt_iterator** %si.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %si.addr, metadata !4859, metadata !DIExpression()), !dbg !4860
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %histogram, metadata !4861, metadata !DIExpression()), !dbg !4862
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4863, metadata !DIExpression()), !dbg !4864
  call void @llvm.dbg.declare(metadata i64* %count, metadata !4865, metadata !DIExpression()), !dbg !4866
  call void @llvm.dbg.declare(metadata i64* %wrong_values, metadata !4867, metadata !DIExpression()), !dbg !4868
  call void @llvm.dbg.declare(metadata i64* %all, metadata !4869, metadata !DIExpression()), !dbg !4870
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs_type, metadata !4871, metadata !DIExpression()), !dbg !4872
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !4873, metadata !DIExpression()), !dbg !4874
  call void @llvm.dbg.declare(metadata i64* %prob1, metadata !4875, metadata !DIExpression()), !dbg !4876
  call void @llvm.dbg.declare(metadata i64* %prob2, metadata !4877, metadata !DIExpression()), !dbg !4878
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4879, metadata !DIExpression()), !dbg !4880
  call void @llvm.dbg.declare(metadata i32* %steps, metadata !4881, metadata !DIExpression()), !dbg !4882
  call void @llvm.dbg.declare(metadata i64* %count1, metadata !4883, metadata !DIExpression()), !dbg !4884
  call void @llvm.dbg.declare(metadata i64* %count2, metadata !4885, metadata !DIExpression()), !dbg !4886
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4887, metadata !DIExpression()), !dbg !4888
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %si.addr, align 8, !dbg !4889
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !4890
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !4891
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4892
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !4894
  %cmp = icmp ne i32 %call1, 6, !dbg !4895
  br i1 %cmp, label %if.then, label %if.end, !dbg !4896

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4897
  br label %return, !dbg !4897

if.end:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4898
  %call2 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %2), !dbg !4898
  %common = bitcast %union.tree_node* %call2 to %struct.tree_common*, !dbg !4898
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4898
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4898
  store %union.tree_node* %3, %union.tree_node** %lhs_type, align 8, !dbg !4899
  %4 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !4900
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !4900
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !4900
  %bf.load = load i64, i64* %5, align 8, !dbg !4900
  %bf.clear = and i64 %bf.load, 65535, !dbg !4900
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4900
  %cmp3 = icmp eq i32 %bf.cast, 6, !dbg !4900
  br i1 %cmp3, label %if.end16, label %lor.lhs.false, !dbg !4900

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !4900
  %base4 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4900
  %7 = bitcast %struct.tree_base* %base4 to i64*, !dbg !4900
  %bf.load5 = load i64, i64* %7, align 8, !dbg !4900
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !4900
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !4900
  %cmp8 = icmp eq i32 %bf.cast7, 7, !dbg !4900
  br i1 %cmp8, label %if.end16, label %lor.lhs.false9, !dbg !4900

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !4900
  %base10 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4900
  %9 = bitcast %struct.tree_base* %base10 to i64*, !dbg !4900
  %bf.load11 = load i64, i64* %9, align 8, !dbg !4900
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !4900
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !4900
  %cmp14 = icmp eq i32 %bf.cast13, 8, !dbg !4900
  br i1 %cmp14, label %if.end16, label %if.then15, !dbg !4902

if.then15:                                        ; preds = %lor.lhs.false9
  store i8 0, i8* %retval, align 1, !dbg !4903
  br label %return, !dbg !4903

if.end16:                                         ; preds = %lor.lhs.false9, %lor.lhs.false, %if.end
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4904
  %call17 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %10), !dbg !4905
  store i32 %call17, i32* %code, align 4, !dbg !4906
  %11 = load i32, i32* %code, align 4, !dbg !4907
  %cmp18 = icmp ne i32 %11, 71, !dbg !4909
  br i1 %cmp18, label %if.then24, label %lor.lhs.false19, !dbg !4910

lor.lhs.false19:                                  ; preds = %if.end16
  %12 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !4911
  %base20 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !4911
  %13 = bitcast %struct.tree_base* %base20 to i64*, !dbg !4911
  %bf.load21 = load i64, i64* %13, align 8, !dbg !4911
  %bf.lshr = lshr i64 %bf.load21, 21, !dbg !4911
  %bf.clear22 = and i64 %bf.lshr, 1, !dbg !4911
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !4911
  %tobool = icmp ne i32 %bf.cast23, 0, !dbg !4911
  br i1 %tobool, label %if.end25, label %if.then24, !dbg !4912

if.then24:                                        ; preds = %lor.lhs.false19, %if.end16
  store i8 0, i8* %retval, align 1, !dbg !4913
  br label %return, !dbg !4913

if.end25:                                         ; preds = %lor.lhs.false19
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4914
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !4914
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4915
  %call26 = call %struct.histogram_value_t* @gimple_histogram_value_of_type(%struct.function* %add.ptr, %union.gimple_statement_d* %15, i32 0), !dbg !4916
  store %struct.histogram_value_t* %call26, %struct.histogram_value_t** %histogram, align 8, !dbg !4917
  %16 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4918
  %tobool27 = icmp ne %struct.histogram_value_t* %16, null, !dbg !4918
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !4920

if.then28:                                        ; preds = %if.end25
  store i8 0, i8* %retval, align 1, !dbg !4921
  br label %return, !dbg !4921

if.end29:                                         ; preds = %if.end25
  store i64 0, i64* %all, align 8, !dbg !4922
  store i64 0, i64* %wrong_values, align 8, !dbg !4923
  store i32 0, i32* %i, align 4, !dbg !4924
  br label %for.cond, !dbg !4926

for.cond:                                         ; preds = %for.inc, %if.end29
  %17 = load i32, i32* %i, align 4, !dbg !4927
  %18 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4929
  %hdata = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %18, i32 0, i32 3, !dbg !4930
  %intvl = bitcast %union.anon.0* %hdata to %struct.anon.1*, !dbg !4931
  %steps30 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %intvl, i32 0, i32 1, !dbg !4932
  %19 = load i32, i32* %steps30, align 4, !dbg !4932
  %cmp31 = icmp ult i32 %17, %19, !dbg !4933
  br i1 %cmp31, label %for.body, label %for.end, !dbg !4934

for.body:                                         ; preds = %for.cond
  %20 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4935
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %20, i32 0, i32 0, !dbg !4936
  %counters = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 2, !dbg !4937
  %21 = load i64*, i64** %counters, align 8, !dbg !4937
  %22 = load i32, i32* %i, align 4, !dbg !4938
  %idxprom = zext i32 %22 to i64, !dbg !4935
  %arrayidx = getelementptr inbounds i64, i64* %21, i64 %idxprom, !dbg !4935
  %23 = load i64, i64* %arrayidx, align 8, !dbg !4935
  %24 = load i64, i64* %all, align 8, !dbg !4939
  %add = add nsw i64 %24, %23, !dbg !4939
  store i64 %add, i64* %all, align 8, !dbg !4939
  br label %for.inc, !dbg !4940

for.inc:                                          ; preds = %for.body
  %25 = load i32, i32* %i, align 4, !dbg !4941
  %inc = add i32 %25, 1, !dbg !4941
  store i32 %inc, i32* %i, align 4, !dbg !4941
  br label %for.cond, !dbg !4942, !llvm.loop !4943

for.end:                                          ; preds = %for.cond
  %26 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4945
  %hvalue32 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %26, i32 0, i32 0, !dbg !4946
  %counters33 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue32, i32 0, i32 2, !dbg !4947
  %27 = load i64*, i64** %counters33, align 8, !dbg !4947
  %28 = load i32, i32* %i, align 4, !dbg !4948
  %idxprom34 = zext i32 %28 to i64, !dbg !4945
  %arrayidx35 = getelementptr inbounds i64, i64* %27, i64 %idxprom34, !dbg !4945
  %29 = load i64, i64* %arrayidx35, align 8, !dbg !4945
  %30 = load i64, i64* %wrong_values, align 8, !dbg !4949
  %add36 = add nsw i64 %30, %29, !dbg !4949
  store i64 %add36, i64* %wrong_values, align 8, !dbg !4949
  %31 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4950
  %hvalue37 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %31, i32 0, i32 0, !dbg !4951
  %counters38 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue37, i32 0, i32 2, !dbg !4952
  %32 = load i64*, i64** %counters38, align 8, !dbg !4952
  %33 = load i32, i32* %i, align 4, !dbg !4953
  %add39 = add i32 %33, 1, !dbg !4954
  %idxprom40 = zext i32 %add39 to i64, !dbg !4950
  %arrayidx41 = getelementptr inbounds i64, i64* %32, i64 %idxprom40, !dbg !4950
  %34 = load i64, i64* %arrayidx41, align 8, !dbg !4950
  %35 = load i64, i64* %wrong_values, align 8, !dbg !4955
  %add42 = add nsw i64 %35, %34, !dbg !4955
  store i64 %add42, i64* %wrong_values, align 8, !dbg !4955
  %36 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4956
  %hdata43 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %36, i32 0, i32 3, !dbg !4957
  %intvl44 = bitcast %union.anon.0* %hdata43 to %struct.anon.1*, !dbg !4958
  %steps45 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %intvl44, i32 0, i32 1, !dbg !4959
  %37 = load i32, i32* %steps45, align 4, !dbg !4959
  store i32 %37, i32* %steps, align 4, !dbg !4960
  %38 = load i64, i64* %wrong_values, align 8, !dbg !4961
  %39 = load i64, i64* %all, align 8, !dbg !4962
  %add46 = add nsw i64 %39, %38, !dbg !4962
  store i64 %add46, i64* %all, align 8, !dbg !4962
  %40 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4963
  %hvalue47 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %40, i32 0, i32 0, !dbg !4964
  %counters48 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue47, i32 0, i32 2, !dbg !4965
  %41 = load i64*, i64** %counters48, align 8, !dbg !4965
  %arrayidx49 = getelementptr inbounds i64, i64* %41, i64 0, !dbg !4963
  %42 = load i64, i64* %arrayidx49, align 8, !dbg !4963
  store i64 %42, i64* %count1, align 8, !dbg !4966
  %43 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4967
  %hvalue50 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %43, i32 0, i32 0, !dbg !4968
  %counters51 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue50, i32 0, i32 2, !dbg !4969
  %44 = load i64*, i64** %counters51, align 8, !dbg !4969
  %arrayidx52 = getelementptr inbounds i64, i64* %44, i64 1, !dbg !4967
  %45 = load i64, i64* %arrayidx52, align 8, !dbg !4967
  store i64 %45, i64* %count2, align 8, !dbg !4970
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4971
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4973
  %call53 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %47), !dbg !4974
  %count54 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call53, i32 0, i32 8, !dbg !4975
  %48 = load i64, i64* %count54, align 8, !dbg !4975
  %call55 = call zeroext i8 @check_counter(%union.gimple_statement_d* %46, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i64 0, i64 0), i64* %count1, i64* %all, i64 %48), !dbg !4976
  %tobool56 = icmp ne i8 %call55, 0, !dbg !4976
  br i1 %tobool56, label %if.then57, label %if.end59, !dbg !4977

if.then57:                                        ; preds = %for.end
  %49 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4978
  %add.ptr58 = getelementptr inbounds %struct.function, %struct.function* %49, i64 0, !dbg !4978
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4980
  %51 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !4981
  call void @gimple_remove_histogram_value(%struct.function* %add.ptr58, %union.gimple_statement_d* %50, %struct.histogram_value_t* %51), !dbg !4982
  store i8 0, i8* %retval, align 1, !dbg !4983
  br label %return, !dbg !4983

if.end59:                                         ; preds = %for.end
  %52 = load i32, i32* @flag_profile_correction, align 4, !dbg !4984
  %tobool60 = icmp ne i32 %52, 0, !dbg !4984
  br i1 %tobool60, label %land.lhs.true, label %if.end65, !dbg !4986

land.lhs.true:                                    ; preds = %if.end59
  %53 = load i64, i64* %count1, align 8, !dbg !4987
  %54 = load i64, i64* %count2, align 8, !dbg !4988
  %add61 = add nsw i64 %53, %54, !dbg !4989
  %55 = load i64, i64* %all, align 8, !dbg !4990
  %cmp62 = icmp sgt i64 %add61, %55, !dbg !4991
  br i1 %cmp62, label %if.then63, label %if.end65, !dbg !4992

if.then63:                                        ; preds = %land.lhs.true
  %56 = load i64, i64* %count1, align 8, !dbg !4993
  %57 = load i64, i64* %count2, align 8, !dbg !4994
  %add64 = add nsw i64 %56, %57, !dbg !4995
  store i64 %add64, i64* %all, align 8, !dbg !4996
  br label %if.end65, !dbg !4997

if.end65:                                         ; preds = %if.then63, %land.lhs.true, %if.end59
  %58 = load i64, i64* %count1, align 8, !dbg !4998
  %59 = load i64, i64* %count2, align 8, !dbg !4998
  %add66 = add nsw i64 %58, %59, !dbg !4998
  %60 = load i64, i64* %all, align 8, !dbg !4998
  %cmp67 = icmp sle i64 %add66, %60, !dbg !4998
  br i1 %cmp67, label %cond.false, label %cond.true, !dbg !4998

cond.true:                                        ; preds = %if.end65
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 1007, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4998
  br label %cond.end, !dbg !4998

cond.false:                                       ; preds = %if.end65
  br label %cond.end, !dbg !4998

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4998
  store i64 0, i64* %count, align 8, !dbg !4999
  store i32 0, i32* %i, align 4, !dbg !5000
  br label %for.cond68, !dbg !5002

for.cond68:                                       ; preds = %for.inc82, %cond.end
  %61 = load i32, i32* %i, align 4, !dbg !5003
  %62 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5005
  %hdata69 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %62, i32 0, i32 3, !dbg !5006
  %intvl70 = bitcast %union.anon.0* %hdata69 to %struct.anon.1*, !dbg !5007
  %steps71 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %intvl70, i32 0, i32 1, !dbg !5008
  %63 = load i32, i32* %steps71, align 4, !dbg !5008
  %cmp72 = icmp ult i32 %61, %63, !dbg !5009
  br i1 %cmp72, label %for.body73, label %for.end84, !dbg !5010

for.body73:                                       ; preds = %for.cond68
  %64 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5011
  %hvalue74 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %64, i32 0, i32 0, !dbg !5013
  %counters75 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue74, i32 0, i32 2, !dbg !5014
  %65 = load i64*, i64** %counters75, align 8, !dbg !5014
  %66 = load i32, i32* %i, align 4, !dbg !5015
  %idxprom76 = zext i32 %66 to i64, !dbg !5011
  %arrayidx77 = getelementptr inbounds i64, i64* %65, i64 %idxprom76, !dbg !5011
  %67 = load i64, i64* %arrayidx77, align 8, !dbg !5011
  %68 = load i64, i64* %count, align 8, !dbg !5016
  %add78 = add nsw i64 %68, %67, !dbg !5016
  store i64 %add78, i64* %count, align 8, !dbg !5016
  %69 = load i64, i64* %count, align 8, !dbg !5017
  %mul = mul nsw i64 %69, 2, !dbg !5019
  %70 = load i64, i64* %all, align 8, !dbg !5020
  %cmp79 = icmp sge i64 %mul, %70, !dbg !5021
  br i1 %cmp79, label %if.then80, label %if.end81, !dbg !5022

if.then80:                                        ; preds = %for.body73
  br label %for.end84, !dbg !5023

if.end81:                                         ; preds = %for.body73
  br label %for.inc82, !dbg !5024

for.inc82:                                        ; preds = %if.end81
  %71 = load i32, i32* %i, align 4, !dbg !5025
  %inc83 = add i32 %71, 1, !dbg !5025
  store i32 %inc83, i32* %i, align 4, !dbg !5025
  br label %for.cond68, !dbg !5026, !llvm.loop !5027

for.end84:                                        ; preds = %if.then80, %for.cond68
  %72 = load i32, i32* %i, align 4, !dbg !5029
  %73 = load i32, i32* %steps, align 4, !dbg !5031
  %cmp85 = icmp eq i32 %72, %73, !dbg !5032
  br i1 %cmp85, label %if.then90, label %lor.lhs.false86, !dbg !5033

lor.lhs.false86:                                  ; preds = %for.end84
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5034
  %call87 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %74), !dbg !5035
  %call88 = call zeroext i8 @optimize_bb_for_size_p(%struct.basic_block_def* %call87), !dbg !5036
  %conv = zext i8 %call88 to i32, !dbg !5036
  %tobool89 = icmp ne i32 %conv, 0, !dbg !5036
  br i1 %tobool89, label %if.then90, label %if.end91, !dbg !5037

if.then90:                                        ; preds = %lor.lhs.false86, %for.end84
  store i8 0, i8* %retval, align 1, !dbg !5038
  br label %return, !dbg !5038

if.end91:                                         ; preds = %lor.lhs.false86
  %75 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5039
  %add.ptr92 = getelementptr inbounds %struct.function, %struct.function* %75, i64 0, !dbg !5039
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5040
  %77 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5041
  call void @gimple_remove_histogram_value(%struct.function* %add.ptr92, %union.gimple_statement_d* %76, %struct.histogram_value_t* %77), !dbg !5042
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5043
  %tobool93 = icmp ne %struct._IO_FILE* %78, null, !dbg !5043
  br i1 %tobool93, label %if.then94, label %if.end96, !dbg !5045

if.then94:                                        ; preds = %if.end91
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5046
  %call95 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %79, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.25, i64 0, i64 0)), !dbg !5048
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5049
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5050
  call void @print_gimple_stmt(%struct._IO_FILE* %80, %union.gimple_statement_d* %81, i32 0, i32 2), !dbg !5051
  br label %if.end96, !dbg !5052

if.end96:                                         ; preds = %if.then94, %if.end91
  %82 = load i64, i64* %all, align 8, !dbg !5053
  %cmp97 = icmp sgt i64 %82, 0, !dbg !5055
  br i1 %cmp97, label %if.then99, label %if.else, !dbg !5056

if.then99:                                        ; preds = %if.end96
  %83 = load i64, i64* %count1, align 8, !dbg !5057
  %mul100 = mul nsw i64 %83, 10000, !dbg !5059
  %84 = load i64, i64* %all, align 8, !dbg !5060
  %div = sdiv i64 %84, 2, !dbg !5061
  %add101 = add nsw i64 %mul100, %div, !dbg !5062
  %85 = load i64, i64* %all, align 8, !dbg !5063
  %div102 = sdiv i64 %add101, %85, !dbg !5064
  store i64 %div102, i64* %prob1, align 8, !dbg !5065
  %86 = load i64, i64* %count2, align 8, !dbg !5066
  %mul103 = mul nsw i64 %86, 10000, !dbg !5067
  %87 = load i64, i64* %all, align 8, !dbg !5068
  %div104 = sdiv i64 %87, 2, !dbg !5069
  %add105 = add nsw i64 %mul103, %div104, !dbg !5070
  %88 = load i64, i64* %all, align 8, !dbg !5071
  %div106 = sdiv i64 %add105, %88, !dbg !5072
  store i64 %div106, i64* %prob2, align 8, !dbg !5073
  br label %if.end107, !dbg !5074

if.else:                                          ; preds = %if.end96
  store i64 0, i64* %prob2, align 8, !dbg !5075
  store i64 0, i64* %prob1, align 8, !dbg !5077
  br label %if.end107

if.end107:                                        ; preds = %if.else, %if.then99
  %89 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5078
  %90 = load i64, i64* %prob1, align 8, !dbg !5079
  %conv108 = trunc i64 %90 to i32, !dbg !5079
  %91 = load i64, i64* %prob2, align 8, !dbg !5080
  %conv109 = trunc i64 %91 to i32, !dbg !5080
  %92 = load i32, i32* %i, align 4, !dbg !5081
  %93 = load i64, i64* %count1, align 8, !dbg !5082
  %94 = load i64, i64* %count2, align 8, !dbg !5083
  %95 = load i64, i64* %all, align 8, !dbg !5084
  %call110 = call %union.tree_node* @gimple_mod_subtract(%union.gimple_statement_d* %89, i32 %conv108, i32 %conv109, i32 %92, i64 %93, i64 %94, i64 %95), !dbg !5085
  store %union.tree_node* %call110, %union.tree_node** %result, align 8, !dbg !5086
  %96 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %si.addr, align 8, !dbg !5087
  %97 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5088
  call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %96, %union.tree_node* %97), !dbg !5089
  store i8 1, i8* %retval, align 1, !dbg !5090
  br label %return, !dbg !5090

return:                                           ; preds = %if.end107, %if.then90, %if.then57, %if.then28, %if.then24, %if.then15, %if.then
  %98 = load i8, i8* %retval, align 1, !dbg !5091
  ret i8 %98, !dbg !5091
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_divmod_fixed_value_transform(%struct.gimple_stmt_iterator* %si) #0 !dbg !5092 {
entry:
  %retval = alloca i8, align 1
  %si.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %histogram = alloca %struct.histogram_value_t*, align 8
  %code = alloca i32, align 4
  %val = alloca i64, align 8
  %count = alloca i64, align 8
  %all = alloca i64, align 8
  %result = alloca %union.tree_node*, align 8
  %value = alloca %union.tree_node*, align 8
  %tree_val = alloca %union.tree_node*, align 8
  %prob = alloca i64, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_stmt_iterator* %si, %struct.gimple_stmt_iterator** %si.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %si.addr, metadata !5093, metadata !DIExpression()), !dbg !5094
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %histogram, metadata !5095, metadata !DIExpression()), !dbg !5096
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5097, metadata !DIExpression()), !dbg !5098
  call void @llvm.dbg.declare(metadata i64* %val, metadata !5099, metadata !DIExpression()), !dbg !5100
  call void @llvm.dbg.declare(metadata i64* %count, metadata !5101, metadata !DIExpression()), !dbg !5102
  call void @llvm.dbg.declare(metadata i64* %all, metadata !5103, metadata !DIExpression()), !dbg !5104
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !5105, metadata !DIExpression()), !dbg !5106
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !5107, metadata !DIExpression()), !dbg !5108
  call void @llvm.dbg.declare(metadata %union.tree_node** %tree_val, metadata !5109, metadata !DIExpression()), !dbg !5110
  call void @llvm.dbg.declare(metadata i64* %prob, metadata !5111, metadata !DIExpression()), !dbg !5112
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5113, metadata !DIExpression()), !dbg !5114
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %si.addr, align 8, !dbg !5115
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !5116
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !5117
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5118
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5120
  %cmp = icmp ne i32 %call1, 6, !dbg !5121
  br i1 %cmp, label %if.then, label %if.end, !dbg !5122

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5123
  br label %return, !dbg !5123

if.end:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5124
  %call2 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %2), !dbg !5124
  %common = bitcast %union.tree_node* %call2 to %struct.tree_common*, !dbg !5124
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5124
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5124
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5124
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5124
  %bf.load = load i64, i64* %4, align 8, !dbg !5124
  %bf.clear = and i64 %bf.load, 65535, !dbg !5124
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5124
  %cmp3 = icmp eq i32 %bf.cast, 6, !dbg !5124
  br i1 %cmp3, label %if.end22, label %lor.lhs.false, !dbg !5124

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5124
  %call4 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %5), !dbg !5124
  %common5 = bitcast %union.tree_node* %call4 to %struct.tree_common*, !dbg !5124
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !5124
  %6 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !5124
  %base7 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5124
  %7 = bitcast %struct.tree_base* %base7 to i64*, !dbg !5124
  %bf.load8 = load i64, i64* %7, align 8, !dbg !5124
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !5124
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !5124
  %cmp11 = icmp eq i32 %bf.cast10, 7, !dbg !5124
  br i1 %cmp11, label %if.end22, label %lor.lhs.false12, !dbg !5124

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5124
  %call13 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %8), !dbg !5124
  %common14 = bitcast %union.tree_node* %call13 to %struct.tree_common*, !dbg !5124
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !5124
  %9 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !5124
  %base16 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5124
  %10 = bitcast %struct.tree_base* %base16 to i64*, !dbg !5124
  %bf.load17 = load i64, i64* %10, align 8, !dbg !5124
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !5124
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !5124
  %cmp20 = icmp eq i32 %bf.cast19, 8, !dbg !5124
  br i1 %cmp20, label %if.end22, label %if.then21, !dbg !5126

if.then21:                                        ; preds = %lor.lhs.false12
  store i8 0, i8* %retval, align 1, !dbg !5127
  br label %return, !dbg !5127

if.end22:                                         ; preds = %lor.lhs.false12, %lor.lhs.false, %if.end
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5128
  %call23 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %11), !dbg !5129
  store i32 %call23, i32* %code, align 4, !dbg !5130
  %12 = load i32, i32* %code, align 4, !dbg !5131
  %cmp24 = icmp ne i32 %12, 67, !dbg !5133
  br i1 %cmp24, label %land.lhs.true, label %if.end27, !dbg !5134

land.lhs.true:                                    ; preds = %if.end22
  %13 = load i32, i32* %code, align 4, !dbg !5135
  %cmp25 = icmp ne i32 %13, 71, !dbg !5136
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !5137

if.then26:                                        ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !5138
  br label %return, !dbg !5138

if.end27:                                         ; preds = %land.lhs.true, %if.end22
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5139
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !5139
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5140
  %call28 = call %struct.histogram_value_t* @gimple_histogram_value_of_type(%struct.function* %add.ptr, %union.gimple_statement_d* %15, i32 2), !dbg !5141
  store %struct.histogram_value_t* %call28, %struct.histogram_value_t** %histogram, align 8, !dbg !5142
  %16 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5143
  %tobool = icmp ne %struct.histogram_value_t* %16, null, !dbg !5143
  br i1 %tobool, label %if.end30, label %if.then29, !dbg !5145

if.then29:                                        ; preds = %if.end27
  store i8 0, i8* %retval, align 1, !dbg !5146
  br label %return, !dbg !5146

if.end30:                                         ; preds = %if.end27
  %17 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5147
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %17, i32 0, i32 0, !dbg !5148
  %value31 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 0, !dbg !5149
  %18 = load %union.tree_node*, %union.tree_node** %value31, align 8, !dbg !5149
  store %union.tree_node* %18, %union.tree_node** %value, align 8, !dbg !5150
  %19 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5151
  %hvalue32 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %19, i32 0, i32 0, !dbg !5152
  %counters = getelementptr inbounds %struct.anon, %struct.anon* %hvalue32, i32 0, i32 2, !dbg !5153
  %20 = load i64*, i64** %counters, align 8, !dbg !5153
  %arrayidx = getelementptr inbounds i64, i64* %20, i64 0, !dbg !5151
  %21 = load i64, i64* %arrayidx, align 8, !dbg !5151
  store i64 %21, i64* %val, align 8, !dbg !5154
  %22 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5155
  %hvalue33 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %22, i32 0, i32 0, !dbg !5156
  %counters34 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue33, i32 0, i32 2, !dbg !5157
  %23 = load i64*, i64** %counters34, align 8, !dbg !5157
  %arrayidx35 = getelementptr inbounds i64, i64* %23, i64 1, !dbg !5155
  %24 = load i64, i64* %arrayidx35, align 8, !dbg !5155
  store i64 %24, i64* %count, align 8, !dbg !5158
  %25 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5159
  %hvalue36 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %25, i32 0, i32 0, !dbg !5160
  %counters37 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue36, i32 0, i32 2, !dbg !5161
  %26 = load i64*, i64** %counters37, align 8, !dbg !5161
  %arrayidx38 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !5159
  %27 = load i64, i64* %arrayidx38, align 8, !dbg !5159
  store i64 %27, i64* %all, align 8, !dbg !5162
  %28 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5163
  %add.ptr39 = getelementptr inbounds %struct.function, %struct.function* %28, i64 0, !dbg !5163
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5164
  %30 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5165
  call void @gimple_remove_histogram_value(%struct.function* %add.ptr39, %union.gimple_statement_d* %29, %struct.histogram_value_t* %30), !dbg !5166
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5167
  %call40 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %31), !dbg !5169
  %32 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5170
  %call41 = call i32 @simple_cst_equal(%union.tree_node* %call40, %union.tree_node* %32), !dbg !5171
  %cmp42 = icmp ne i32 %call41, 1, !dbg !5172
  br i1 %cmp42, label %if.then49, label %lor.lhs.false43, !dbg !5173

lor.lhs.false43:                                  ; preds = %if.end30
  %33 = load i64, i64* %count, align 8, !dbg !5174
  %mul = mul nsw i64 2, %33, !dbg !5175
  %34 = load i64, i64* %all, align 8, !dbg !5176
  %cmp44 = icmp slt i64 %mul, %34, !dbg !5177
  br i1 %cmp44, label %if.then49, label %lor.lhs.false45, !dbg !5178

lor.lhs.false45:                                  ; preds = %lor.lhs.false43
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5179
  %call46 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %35), !dbg !5180
  %call47 = call zeroext i8 @optimize_bb_for_size_p(%struct.basic_block_def* %call46), !dbg !5181
  %conv = zext i8 %call47 to i32, !dbg !5181
  %tobool48 = icmp ne i32 %conv, 0, !dbg !5181
  br i1 %tobool48, label %if.then49, label %if.end50, !dbg !5182

if.then49:                                        ; preds = %lor.lhs.false45, %lor.lhs.false43, %if.end30
  store i8 0, i8* %retval, align 1, !dbg !5183
  br label %return, !dbg !5183

if.end50:                                         ; preds = %lor.lhs.false45
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5184
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5186
  %call51 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %37), !dbg !5187
  %count52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call51, i32 0, i32 8, !dbg !5188
  %38 = load i64, i64* %count52, align 8, !dbg !5188
  %call53 = call zeroext i8 @check_counter(%union.gimple_statement_d* %36, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i64 0, i64 0), i64* %count, i64* %all, i64 %38), !dbg !5189
  %tobool54 = icmp ne i8 %call53, 0, !dbg !5189
  br i1 %tobool54, label %if.then55, label %if.end56, !dbg !5190

if.then55:                                        ; preds = %if.end50
  store i8 0, i8* %retval, align 1, !dbg !5191
  br label %return, !dbg !5191

if.end56:                                         ; preds = %if.end50
  %39 = load i64, i64* %all, align 8, !dbg !5192
  %cmp57 = icmp sgt i64 %39, 0, !dbg !5194
  br i1 %cmp57, label %if.then59, label %if.else, !dbg !5195

if.then59:                                        ; preds = %if.end56
  %40 = load i64, i64* %count, align 8, !dbg !5196
  %mul60 = mul nsw i64 %40, 10000, !dbg !5197
  %41 = load i64, i64* %all, align 8, !dbg !5198
  %div = sdiv i64 %41, 2, !dbg !5199
  %add = add nsw i64 %mul60, %div, !dbg !5200
  %42 = load i64, i64* %all, align 8, !dbg !5201
  %div61 = sdiv i64 %add, %42, !dbg !5202
  store i64 %div61, i64* %prob, align 8, !dbg !5203
  br label %if.end62, !dbg !5204

if.else:                                          ; preds = %if.end56
  store i64 0, i64* %prob, align 8, !dbg !5205
  br label %if.end62

if.end62:                                         ; preds = %if.else, %if.then59
  %call63 = call %union.tree_node* @get_gcov_type(), !dbg !5206
  %43 = load i64, i64* %val, align 8, !dbg !5207
  %44 = load i64, i64* %val, align 8, !dbg !5208
  %shr = ashr i64 %44, 63, !dbg !5209
  %shr64 = ashr i64 %shr, 1, !dbg !5210
  %call65 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %call63, i64 %43, i64 %shr64), !dbg !5211
  store %union.tree_node* %call65, %union.tree_node** %tree_val, align 8, !dbg !5212
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5213
  %46 = load %union.tree_node*, %union.tree_node** %tree_val, align 8, !dbg !5214
  %47 = load i64, i64* %prob, align 8, !dbg !5215
  %conv66 = trunc i64 %47 to i32, !dbg !5215
  %48 = load i64, i64* %count, align 8, !dbg !5216
  %49 = load i64, i64* %all, align 8, !dbg !5217
  %call67 = call %union.tree_node* @gimple_divmod_fixed_value(%union.gimple_statement_d* %45, %union.tree_node* %46, i32 %conv66, i64 %48, i64 %49), !dbg !5218
  store %union.tree_node* %call67, %union.tree_node** %result, align 8, !dbg !5219
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5220
  %tobool68 = icmp ne %struct._IO_FILE* %50, null, !dbg !5220
  br i1 %tobool68, label %if.then69, label %if.end73, !dbg !5222

if.then69:                                        ; preds = %if.end62
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5223
  %call70 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.30, i64 0, i64 0)), !dbg !5225
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5226
  %53 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5227
  call void @print_generic_expr(%struct._IO_FILE* %52, %union.tree_node* %53, i32 2), !dbg !5228
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5229
  %call71 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0)), !dbg !5230
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5231
  %56 = load %union.tree_node*, %union.tree_node** %tree_val, align 8, !dbg !5232
  call void @print_generic_expr(%struct._IO_FILE* %55, %union.tree_node* %56, i32 2), !dbg !5233
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5234
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.32, i64 0, i64 0)), !dbg !5235
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5236
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5237
  call void @print_gimple_stmt(%struct._IO_FILE* %58, %union.gimple_statement_d* %59, i32 0, i32 2), !dbg !5238
  br label %if.end73, !dbg !5239

if.end73:                                         ; preds = %if.then69, %if.end62
  %60 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %si.addr, align 8, !dbg !5240
  %61 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5241
  call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %60, %union.tree_node* %61), !dbg !5242
  store i8 1, i8* %retval, align 1, !dbg !5243
  br label %return, !dbg !5243

return:                                           ; preds = %if.end73, %if.then55, %if.then49, %if.then29, %if.then26, %if.then21, %if.then
  %62 = load i8, i8* %retval, align 1, !dbg !5244
  ret i8 %62, !dbg !5244
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_mod_pow2_value_transform(%struct.gimple_stmt_iterator* %si) #0 !dbg !5245 {
entry:
  %retval = alloca i8, align 1
  %si.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %histogram = alloca %struct.histogram_value_t*, align 8
  %code = alloca i32, align 4
  %count = alloca i64, align 8
  %wrong_values = alloca i64, align 8
  %all = alloca i64, align 8
  %lhs_type = alloca %union.tree_node*, align 8
  %result = alloca %union.tree_node*, align 8
  %value = alloca %union.tree_node*, align 8
  %prob = alloca i64, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_stmt_iterator* %si, %struct.gimple_stmt_iterator** %si.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %si.addr, metadata !5246, metadata !DIExpression()), !dbg !5247
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %histogram, metadata !5248, metadata !DIExpression()), !dbg !5249
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5250, metadata !DIExpression()), !dbg !5251
  call void @llvm.dbg.declare(metadata i64* %count, metadata !5252, metadata !DIExpression()), !dbg !5253
  call void @llvm.dbg.declare(metadata i64* %wrong_values, metadata !5254, metadata !DIExpression()), !dbg !5255
  call void @llvm.dbg.declare(metadata i64* %all, metadata !5256, metadata !DIExpression()), !dbg !5257
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs_type, metadata !5258, metadata !DIExpression()), !dbg !5259
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !5260, metadata !DIExpression()), !dbg !5261
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !5262, metadata !DIExpression()), !dbg !5263
  call void @llvm.dbg.declare(metadata i64* %prob, metadata !5264, metadata !DIExpression()), !dbg !5265
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5266, metadata !DIExpression()), !dbg !5267
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %si.addr, align 8, !dbg !5268
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !5269
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !5270
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5271
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5273
  %cmp = icmp ne i32 %call1, 6, !dbg !5274
  br i1 %cmp, label %if.then, label %if.end, !dbg !5275

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5276
  br label %return, !dbg !5276

if.end:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5277
  %call2 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %2), !dbg !5277
  %common = bitcast %union.tree_node* %call2 to %struct.tree_common*, !dbg !5277
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5277
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5277
  store %union.tree_node* %3, %union.tree_node** %lhs_type, align 8, !dbg !5278
  %4 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !5279
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5279
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !5279
  %bf.load = load i64, i64* %5, align 8, !dbg !5279
  %bf.clear = and i64 %bf.load, 65535, !dbg !5279
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5279
  %cmp3 = icmp eq i32 %bf.cast, 6, !dbg !5279
  br i1 %cmp3, label %if.end16, label %lor.lhs.false, !dbg !5279

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !5279
  %base4 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5279
  %7 = bitcast %struct.tree_base* %base4 to i64*, !dbg !5279
  %bf.load5 = load i64, i64* %7, align 8, !dbg !5279
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !5279
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !5279
  %cmp8 = icmp eq i32 %bf.cast7, 7, !dbg !5279
  br i1 %cmp8, label %if.end16, label %lor.lhs.false9, !dbg !5279

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !5279
  %base10 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5279
  %9 = bitcast %struct.tree_base* %base10 to i64*, !dbg !5279
  %bf.load11 = load i64, i64* %9, align 8, !dbg !5279
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !5279
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !5279
  %cmp14 = icmp eq i32 %bf.cast13, 8, !dbg !5279
  br i1 %cmp14, label %if.end16, label %if.then15, !dbg !5281

if.then15:                                        ; preds = %lor.lhs.false9
  store i8 0, i8* %retval, align 1, !dbg !5282
  br label %return, !dbg !5282

if.end16:                                         ; preds = %lor.lhs.false9, %lor.lhs.false, %if.end
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5283
  %call17 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %10), !dbg !5284
  store i32 %call17, i32* %code, align 4, !dbg !5285
  %11 = load i32, i32* %code, align 4, !dbg !5286
  %cmp18 = icmp ne i32 %11, 71, !dbg !5288
  br i1 %cmp18, label %if.then24, label %lor.lhs.false19, !dbg !5289

lor.lhs.false19:                                  ; preds = %if.end16
  %12 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !5290
  %base20 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !5290
  %13 = bitcast %struct.tree_base* %base20 to i64*, !dbg !5290
  %bf.load21 = load i64, i64* %13, align 8, !dbg !5290
  %bf.lshr = lshr i64 %bf.load21, 21, !dbg !5290
  %bf.clear22 = and i64 %bf.lshr, 1, !dbg !5290
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !5290
  %tobool = icmp ne i32 %bf.cast23, 0, !dbg !5290
  br i1 %tobool, label %if.end25, label %if.then24, !dbg !5291

if.then24:                                        ; preds = %lor.lhs.false19, %if.end16
  store i8 0, i8* %retval, align 1, !dbg !5292
  br label %return, !dbg !5292

if.end25:                                         ; preds = %lor.lhs.false19
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5293
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !5293
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5294
  %call26 = call %struct.histogram_value_t* @gimple_histogram_value_of_type(%struct.function* %add.ptr, %union.gimple_statement_d* %15, i32 1), !dbg !5295
  store %struct.histogram_value_t* %call26, %struct.histogram_value_t** %histogram, align 8, !dbg !5296
  %16 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5297
  %tobool27 = icmp ne %struct.histogram_value_t* %16, null, !dbg !5297
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !5299

if.then28:                                        ; preds = %if.end25
  store i8 0, i8* %retval, align 1, !dbg !5300
  br label %return, !dbg !5300

if.end29:                                         ; preds = %if.end25
  %17 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5301
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %17, i32 0, i32 0, !dbg !5302
  %value30 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 0, !dbg !5303
  %18 = load %union.tree_node*, %union.tree_node** %value30, align 8, !dbg !5303
  store %union.tree_node* %18, %union.tree_node** %value, align 8, !dbg !5304
  %19 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5305
  %hvalue31 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %19, i32 0, i32 0, !dbg !5306
  %counters = getelementptr inbounds %struct.anon, %struct.anon* %hvalue31, i32 0, i32 2, !dbg !5307
  %20 = load i64*, i64** %counters, align 8, !dbg !5307
  %arrayidx = getelementptr inbounds i64, i64* %20, i64 0, !dbg !5305
  %21 = load i64, i64* %arrayidx, align 8, !dbg !5305
  store i64 %21, i64* %wrong_values, align 8, !dbg !5308
  %22 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5309
  %hvalue32 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %22, i32 0, i32 0, !dbg !5310
  %counters33 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue32, i32 0, i32 2, !dbg !5311
  %23 = load i64*, i64** %counters33, align 8, !dbg !5311
  %arrayidx34 = getelementptr inbounds i64, i64* %23, i64 1, !dbg !5309
  %24 = load i64, i64* %arrayidx34, align 8, !dbg !5309
  store i64 %24, i64* %count, align 8, !dbg !5312
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5313
  %add.ptr35 = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !5313
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5314
  %27 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5315
  call void @gimple_remove_histogram_value(%struct.function* %add.ptr35, %union.gimple_statement_d* %26, %struct.histogram_value_t* %27), !dbg !5316
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5317
  %call36 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %28), !dbg !5319
  %29 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5320
  %call37 = call i32 @simple_cst_equal(%union.tree_node* %call36, %union.tree_node* %29), !dbg !5321
  %cmp38 = icmp ne i32 %call37, 1, !dbg !5322
  br i1 %cmp38, label %if.then45, label %lor.lhs.false39, !dbg !5323

lor.lhs.false39:                                  ; preds = %if.end29
  %30 = load i64, i64* %count, align 8, !dbg !5324
  %31 = load i64, i64* %wrong_values, align 8, !dbg !5325
  %cmp40 = icmp slt i64 %30, %31, !dbg !5326
  br i1 %cmp40, label %if.then45, label %lor.lhs.false41, !dbg !5327

lor.lhs.false41:                                  ; preds = %lor.lhs.false39
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5328
  %call42 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %32), !dbg !5329
  %call43 = call zeroext i8 @optimize_bb_for_size_p(%struct.basic_block_def* %call42), !dbg !5330
  %conv = zext i8 %call43 to i32, !dbg !5330
  %tobool44 = icmp ne i32 %conv, 0, !dbg !5330
  br i1 %tobool44, label %if.then45, label %if.end46, !dbg !5331

if.then45:                                        ; preds = %lor.lhs.false41, %lor.lhs.false39, %if.end29
  store i8 0, i8* %retval, align 1, !dbg !5332
  br label %return, !dbg !5332

if.end46:                                         ; preds = %lor.lhs.false41
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5333
  %tobool47 = icmp ne %struct._IO_FILE* %33, null, !dbg !5333
  br i1 %tobool47, label %if.then48, label %if.end50, !dbg !5335

if.then48:                                        ; preds = %if.end46
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5336
  %call49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.33, i64 0, i64 0)), !dbg !5338
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5339
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5340
  call void @print_gimple_stmt(%struct._IO_FILE* %35, %union.gimple_statement_d* %36, i32 0, i32 2), !dbg !5341
  br label %if.end50, !dbg !5342

if.end50:                                         ; preds = %if.then48, %if.end46
  %37 = load i64, i64* %count, align 8, !dbg !5343
  %38 = load i64, i64* %wrong_values, align 8, !dbg !5344
  %add = add nsw i64 %37, %38, !dbg !5345
  store i64 %add, i64* %all, align 8, !dbg !5346
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5347
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5349
  %call51 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %40), !dbg !5350
  %count52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call51, i32 0, i32 8, !dbg !5351
  %41 = load i64, i64* %count52, align 8, !dbg !5351
  %call53 = call zeroext i8 @check_counter(%union.gimple_statement_d* %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i64 0, i64 0), i64* %count, i64* %all, i64 %41), !dbg !5352
  %tobool54 = icmp ne i8 %call53, 0, !dbg !5352
  br i1 %tobool54, label %if.then55, label %if.end56, !dbg !5353

if.then55:                                        ; preds = %if.end50
  store i8 0, i8* %retval, align 1, !dbg !5354
  br label %return, !dbg !5354

if.end56:                                         ; preds = %if.end50
  %42 = load i64, i64* %all, align 8, !dbg !5355
  %cmp57 = icmp sgt i64 %42, 0, !dbg !5357
  br i1 %cmp57, label %if.then59, label %if.else, !dbg !5358

if.then59:                                        ; preds = %if.end56
  %43 = load i64, i64* %count, align 8, !dbg !5359
  %mul = mul nsw i64 %43, 10000, !dbg !5360
  %44 = load i64, i64* %all, align 8, !dbg !5361
  %div = sdiv i64 %44, 2, !dbg !5362
  %add60 = add nsw i64 %mul, %div, !dbg !5363
  %45 = load i64, i64* %all, align 8, !dbg !5364
  %div61 = sdiv i64 %add60, %45, !dbg !5365
  store i64 %div61, i64* %prob, align 8, !dbg !5366
  br label %if.end62, !dbg !5367

if.else:                                          ; preds = %if.end56
  store i64 0, i64* %prob, align 8, !dbg !5368
  br label %if.end62

if.end62:                                         ; preds = %if.else, %if.then59
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5369
  %47 = load i64, i64* %prob, align 8, !dbg !5370
  %conv63 = trunc i64 %47 to i32, !dbg !5370
  %48 = load i64, i64* %count, align 8, !dbg !5371
  %49 = load i64, i64* %all, align 8, !dbg !5372
  %call64 = call %union.tree_node* @gimple_mod_pow2(%union.gimple_statement_d* %46, i32 %conv63, i64 %48, i64 %49), !dbg !5373
  store %union.tree_node* %call64, %union.tree_node** %result, align 8, !dbg !5374
  %50 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %si.addr, align 8, !dbg !5375
  %51 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5376
  call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %50, %union.tree_node* %51), !dbg !5377
  store i8 1, i8* %retval, align 1, !dbg !5378
  br label %return, !dbg !5378

return:                                           ; preds = %if.end62, %if.then55, %if.then45, %if.then28, %if.then24, %if.then15, %if.then
  %52 = load i8, i8* %retval, align 1, !dbg !5379
  ret i8 %52, !dbg !5379
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_stringops_transform(%struct.gimple_stmt_iterator* %gsi) #0 !dbg !5380 {
entry:
  %retval = alloca i8, align 1
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %blck_size = alloca %union.tree_node*, align 8
  %fcode = alloca i32, align 4
  %histogram = alloca %struct.histogram_value_t*, align 8
  %count = alloca i64, align 8
  %all = alloca i64, align 8
  %val = alloca i64, align 8
  %dest = alloca %union.tree_node*, align 8
  %src = alloca %union.tree_node*, align 8
  %dest_align = alloca i32, align 4
  %src_align = alloca i32, align 4
  %prob = alloca i64, align 8
  %tree_val = alloca %union.tree_node*, align 8
  %size_arg = alloca i32, align 4
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !5381, metadata !DIExpression()), !dbg !5382
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5383, metadata !DIExpression()), !dbg !5384
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5385
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !5386
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !5384
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !5387, metadata !DIExpression()), !dbg !5388
  call void @llvm.dbg.declare(metadata %union.tree_node** %blck_size, metadata !5389, metadata !DIExpression()), !dbg !5390
  call void @llvm.dbg.declare(metadata i32* %fcode, metadata !5391, metadata !DIExpression()), !dbg !5392
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %histogram, metadata !5393, metadata !DIExpression()), !dbg !5394
  call void @llvm.dbg.declare(metadata i64* %count, metadata !5395, metadata !DIExpression()), !dbg !5396
  call void @llvm.dbg.declare(metadata i64* %all, metadata !5397, metadata !DIExpression()), !dbg !5398
  call void @llvm.dbg.declare(metadata i64* %val, metadata !5399, metadata !DIExpression()), !dbg !5400
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest, metadata !5401, metadata !DIExpression()), !dbg !5402
  call void @llvm.dbg.declare(metadata %union.tree_node** %src, metadata !5403, metadata !DIExpression()), !dbg !5404
  call void @llvm.dbg.declare(metadata i32* %dest_align, metadata !5405, metadata !DIExpression()), !dbg !5406
  call void @llvm.dbg.declare(metadata i32* %src_align, metadata !5407, metadata !DIExpression()), !dbg !5408
  call void @llvm.dbg.declare(metadata i64* %prob, metadata !5409, metadata !DIExpression()), !dbg !5410
  call void @llvm.dbg.declare(metadata %union.tree_node** %tree_val, metadata !5411, metadata !DIExpression()), !dbg !5412
  call void @llvm.dbg.declare(metadata i32* %size_arg, metadata !5413, metadata !DIExpression()), !dbg !5414
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5415
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5417
  %cmp = icmp ne i32 %call1, 8, !dbg !5418
  br i1 %cmp, label %if.then, label %if.end, !dbg !5419

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5420
  br label %return, !dbg !5420

if.end:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5421
  %call2 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %2), !dbg !5422
  store %union.tree_node* %call2, %union.tree_node** %fndecl, align 8, !dbg !5423
  %3 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5424
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !5424
  br i1 %tobool, label %if.end4, label %if.then3, !dbg !5426

if.then3:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !5427
  br label %return, !dbg !5427

if.end4:                                          ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5428
  %function_decl = bitcast %union.tree_node* %4 to %struct.tree_function_decl*, !dbg !5428
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !5428
  %bf.load = load i32, i32* %function_code, align 8, !dbg !5428
  %bf.clear = and i32 %bf.load, 2047, !dbg !5428
  store i32 %bf.clear, i32* %fcode, align 4, !dbg !5429
  %5 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5430
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5432
  %call5 = call zeroext i8 @interesting_stringop_to_profile_p(%union.tree_node* %5, %union.gimple_statement_d* %6, i32* %size_arg), !dbg !5433
  %tobool6 = icmp ne i8 %call5, 0, !dbg !5433
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !5434

if.then7:                                         ; preds = %if.end4
  store i8 0, i8* %retval, align 1, !dbg !5435
  br label %return, !dbg !5435

if.end8:                                          ; preds = %if.end4
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5436
  %8 = load i32, i32* %size_arg, align 4, !dbg !5437
  %call9 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %7, i32 %8), !dbg !5438
  store %union.tree_node* %call9, %union.tree_node** %blck_size, align 8, !dbg !5439
  %9 = load %union.tree_node*, %union.tree_node** %blck_size, align 8, !dbg !5440
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5440
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !5440
  %bf.load10 = load i64, i64* %10, align 8, !dbg !5440
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !5440
  %bf.cast = trunc i64 %bf.clear11 to i32, !dbg !5440
  %cmp12 = icmp eq i32 %bf.cast, 23, !dbg !5442
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !5443

if.then13:                                        ; preds = %if.end8
  store i8 0, i8* %retval, align 1, !dbg !5444
  br label %return, !dbg !5444

if.end14:                                         ; preds = %if.end8
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5445
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !5445
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5446
  %call15 = call %struct.histogram_value_t* @gimple_histogram_value_of_type(%struct.function* %add.ptr, %union.gimple_statement_d* %12, i32 2), !dbg !5447
  store %struct.histogram_value_t* %call15, %struct.histogram_value_t** %histogram, align 8, !dbg !5448
  %13 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5449
  %tobool16 = icmp ne %struct.histogram_value_t* %13, null, !dbg !5449
  br i1 %tobool16, label %if.end18, label %if.then17, !dbg !5451

if.then17:                                        ; preds = %if.end14
  store i8 0, i8* %retval, align 1, !dbg !5452
  br label %return, !dbg !5452

if.end18:                                         ; preds = %if.end14
  %14 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5453
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %14, i32 0, i32 0, !dbg !5454
  %counters = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 2, !dbg !5455
  %15 = load i64*, i64** %counters, align 8, !dbg !5455
  %arrayidx = getelementptr inbounds i64, i64* %15, i64 0, !dbg !5453
  %16 = load i64, i64* %arrayidx, align 8, !dbg !5453
  store i64 %16, i64* %val, align 8, !dbg !5456
  %17 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5457
  %hvalue19 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %17, i32 0, i32 0, !dbg !5458
  %counters20 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue19, i32 0, i32 2, !dbg !5459
  %18 = load i64*, i64** %counters20, align 8, !dbg !5459
  %arrayidx21 = getelementptr inbounds i64, i64* %18, i64 1, !dbg !5457
  %19 = load i64, i64* %arrayidx21, align 8, !dbg !5457
  store i64 %19, i64* %count, align 8, !dbg !5460
  %20 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5461
  %hvalue22 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %20, i32 0, i32 0, !dbg !5462
  %counters23 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue22, i32 0, i32 2, !dbg !5463
  %21 = load i64*, i64** %counters23, align 8, !dbg !5463
  %arrayidx24 = getelementptr inbounds i64, i64* %21, i64 2, !dbg !5461
  %22 = load i64, i64* %arrayidx24, align 8, !dbg !5461
  store i64 %22, i64* %all, align 8, !dbg !5464
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5465
  %add.ptr25 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !5465
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5466
  %25 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5467
  call void @gimple_remove_histogram_value(%struct.function* %add.ptr25, %union.gimple_statement_d* %24, %struct.histogram_value_t* %25), !dbg !5468
  %26 = load i64, i64* %count, align 8, !dbg !5469
  %mul = mul nsw i64 6, %26, !dbg !5471
  %div = sdiv i64 %mul, 5, !dbg !5472
  %27 = load i64, i64* %all, align 8, !dbg !5473
  %cmp26 = icmp slt i64 %div, %27, !dbg !5474
  br i1 %cmp26, label %if.then30, label %lor.lhs.false, !dbg !5475

lor.lhs.false:                                    ; preds = %if.end18
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5476
  %call27 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %28), !dbg !5477
  %call28 = call zeroext i8 @optimize_bb_for_size_p(%struct.basic_block_def* %call27), !dbg !5478
  %conv = zext i8 %call28 to i32, !dbg !5478
  %tobool29 = icmp ne i32 %conv, 0, !dbg !5478
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !5479

if.then30:                                        ; preds = %lor.lhs.false, %if.end18
  store i8 0, i8* %retval, align 1, !dbg !5480
  br label %return, !dbg !5480

if.end31:                                         ; preds = %lor.lhs.false
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5481
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5483
  %call32 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %30), !dbg !5484
  %count33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call32, i32 0, i32 8, !dbg !5485
  %31 = load i64, i64* %count33, align 8, !dbg !5485
  %call34 = call zeroext i8 @check_counter(%union.gimple_statement_d* %29, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i64 0, i64 0), i64* %count, i64* %all, i64 %31), !dbg !5486
  %tobool35 = icmp ne i8 %call34, 0, !dbg !5486
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !5487

if.then36:                                        ; preds = %if.end31
  store i8 0, i8* %retval, align 1, !dbg !5488
  br label %return, !dbg !5488

if.end37:                                         ; preds = %if.end31
  %32 = load i64, i64* %all, align 8, !dbg !5489
  %cmp38 = icmp sgt i64 %32, 0, !dbg !5491
  br i1 %cmp38, label %if.then40, label %if.else, !dbg !5492

if.then40:                                        ; preds = %if.end37
  %33 = load i64, i64* %count, align 8, !dbg !5493
  %mul41 = mul nsw i64 %33, 10000, !dbg !5494
  %34 = load i64, i64* %all, align 8, !dbg !5495
  %div42 = sdiv i64 %34, 2, !dbg !5496
  %add = add nsw i64 %mul41, %div42, !dbg !5497
  %35 = load i64, i64* %all, align 8, !dbg !5498
  %div43 = sdiv i64 %add, %35, !dbg !5499
  store i64 %div43, i64* %prob, align 8, !dbg !5500
  br label %if.end44, !dbg !5501

if.else:                                          ; preds = %if.end37
  store i64 0, i64* %prob, align 8, !dbg !5502
  br label %if.end44

if.end44:                                         ; preds = %if.else, %if.then40
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5503
  %call45 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %36, i32 0), !dbg !5504
  store %union.tree_node* %call45, %union.tree_node** %dest, align 8, !dbg !5505
  %37 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !5506
  %38 = load i32, i32* @ix86_isa_flags, align 4, !dbg !5507
  %and = and i32 %38, 32, !dbg !5507
  %cmp46 = icmp ne i32 %and, 0, !dbg !5507
  %39 = zext i1 %cmp46 to i64, !dbg !5507
  %cond = select i1 %cmp46, i32 256, i32 128, !dbg !5507
  %call48 = call i32 @get_pointer_alignment(%union.tree_node* %37, i32 %cond), !dbg !5508
  store i32 %call48, i32* %dest_align, align 4, !dbg !5509
  %40 = load i32, i32* %fcode, align 4, !dbg !5510
  switch i32 %40, label %sw.default [
    i32 330, label %sw.bb
    i32 332, label %sw.bb
    i32 333, label %sw.bb62
    i32 326, label %sw.bb68
  ], !dbg !5511

sw.bb:                                            ; preds = %if.end44, %if.end44
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5512
  %call49 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %41, i32 1), !dbg !5514
  store %union.tree_node* %call49, %union.tree_node** %src, align 8, !dbg !5515
  %42 = load %union.tree_node*, %union.tree_node** %src, align 8, !dbg !5516
  %43 = load i32, i32* @ix86_isa_flags, align 4, !dbg !5517
  %and50 = and i32 %43, 32, !dbg !5517
  %cmp51 = icmp ne i32 %and50, 0, !dbg !5517
  %44 = zext i1 %cmp51 to i64, !dbg !5517
  %cond53 = select i1 %cmp51, i32 256, i32 128, !dbg !5517
  %call54 = call i32 @get_pointer_alignment(%union.tree_node* %42, i32 %cond53), !dbg !5518
  store i32 %call54, i32* %src_align, align 4, !dbg !5519
  %45 = load i64, i64* %val, align 8, !dbg !5520
  %46 = load i32, i32* %dest_align, align 4, !dbg !5522
  %47 = load i32, i32* %src_align, align 4, !dbg !5522
  %cmp55 = icmp ult i32 %46, %47, !dbg !5522
  br i1 %cmp55, label %cond.true, label %cond.false, !dbg !5522

cond.true:                                        ; preds = %sw.bb
  %48 = load i32, i32* %dest_align, align 4, !dbg !5522
  br label %cond.end, !dbg !5522

cond.false:                                       ; preds = %sw.bb
  %49 = load i32, i32* %src_align, align 4, !dbg !5522
  br label %cond.end, !dbg !5522

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond57 = phi i32 [ %48, %cond.true ], [ %49, %cond.false ], !dbg !5522
  %call58 = call i32 @can_move_by_pieces(i64 %45, i32 %cond57), !dbg !5523
  %tobool59 = icmp ne i32 %call58, 0, !dbg !5523
  br i1 %tobool59, label %if.end61, label %if.then60, !dbg !5524

if.then60:                                        ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !5525
  br label %return, !dbg !5525

if.end61:                                         ; preds = %cond.end
  br label %sw.epilog, !dbg !5526

sw.bb62:                                          ; preds = %if.end44
  %50 = load i64, i64* %val, align 8, !dbg !5527
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5529
  %call63 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %51, i32 1), !dbg !5530
  %52 = bitcast %union.tree_node* %call63 to i8*, !dbg !5530
  %53 = load i32, i32* %dest_align, align 4, !dbg !5531
  %call64 = call i32 @can_store_by_pieces(i64 %50, %struct.rtx_def* (i8*, i64, i32)* @builtin_memset_read_str, i8* %52, i32 %53, i8 zeroext 1), !dbg !5532
  %tobool65 = icmp ne i32 %call64, 0, !dbg !5532
  br i1 %tobool65, label %if.end67, label %if.then66, !dbg !5533

if.then66:                                        ; preds = %sw.bb62
  store i8 0, i8* %retval, align 1, !dbg !5534
  br label %return, !dbg !5534

if.end67:                                         ; preds = %sw.bb62
  br label %sw.epilog, !dbg !5535

sw.bb68:                                          ; preds = %if.end44
  %54 = load i64, i64* %val, align 8, !dbg !5536
  %55 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !5538
  %56 = bitcast %union.tree_node* %55 to i8*, !dbg !5538
  %57 = load i32, i32* %dest_align, align 4, !dbg !5539
  %call69 = call i32 @can_store_by_pieces(i64 %54, %struct.rtx_def* (i8*, i64, i32)* @builtin_memset_read_str, i8* %56, i32 %57, i8 zeroext 1), !dbg !5540
  %tobool70 = icmp ne i32 %call69, 0, !dbg !5540
  br i1 %tobool70, label %if.end72, label %if.then71, !dbg !5541

if.then71:                                        ; preds = %sw.bb68
  store i8 0, i8* %retval, align 1, !dbg !5542
  br label %return, !dbg !5542

if.end72:                                         ; preds = %sw.bb68
  br label %sw.epilog, !dbg !5543

sw.default:                                       ; preds = %if.end44
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 1433, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5544
  br label %sw.epilog, !dbg !5545

sw.epilog:                                        ; preds = %sw.default, %if.end72, %if.end67, %if.end61
  %call73 = call %union.tree_node* @get_gcov_type(), !dbg !5546
  %58 = load i64, i64* %val, align 8, !dbg !5547
  %59 = load i64, i64* %val, align 8, !dbg !5548
  %shr = ashr i64 %59, 63, !dbg !5549
  %shr74 = ashr i64 %shr, 1, !dbg !5550
  %call75 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %call73, i64 %58, i64 %shr74), !dbg !5551
  store %union.tree_node* %call75, %union.tree_node** %tree_val, align 8, !dbg !5552
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5553
  %tobool76 = icmp ne %struct._IO_FILE* %60, null, !dbg !5553
  br i1 %tobool76, label %if.then77, label %if.end80, !dbg !5555

if.then77:                                        ; preds = %sw.epilog
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5556
  %62 = load i64, i64* %val, align 8, !dbg !5558
  %conv78 = trunc i64 %62 to i32, !dbg !5559
  %call79 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %61, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.35, i64 0, i64 0), i32 %conv78), !dbg !5560
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5561
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5562
  call void @print_gimple_stmt(%struct._IO_FILE* %63, %union.gimple_statement_d* %64, i32 0, i32 2), !dbg !5563
  br label %if.end80, !dbg !5564

if.end80:                                         ; preds = %if.then77, %sw.epilog
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5565
  %66 = load %union.tree_node*, %union.tree_node** %tree_val, align 8, !dbg !5566
  %67 = load i64, i64* %prob, align 8, !dbg !5567
  %conv81 = trunc i64 %67 to i32, !dbg !5567
  %68 = load i64, i64* %count, align 8, !dbg !5568
  %69 = load i64, i64* %all, align 8, !dbg !5569
  call void @gimple_stringop_fixed_value(%union.gimple_statement_d* %65, %union.tree_node* %66, i32 %conv81, i64 %68, i64 %69), !dbg !5570
  store i8 1, i8* %retval, align 1, !dbg !5571
  br label %return, !dbg !5571

return:                                           ; preds = %if.end80, %if.then71, %if.then66, %if.then60, %if.then36, %if.then30, %if.then17, %if.then13, %if.then7, %if.then3, %if.then
  %70 = load i8, i8* %retval, align 1, !dbg !5572
  ret i8 %70, !dbg !5572
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_ic_transform(%union.gimple_statement_d* %stmt) #0 !dbg !5573 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %histogram = alloca %struct.histogram_value_t*, align 8
  %val = alloca i64, align 8
  %count = alloca i64, align 8
  %all = alloca i64, align 8
  %bb_all = alloca i64, align 8
  %prob = alloca i64, align 8
  %callee = alloca %union.tree_node*, align 8
  %modify = alloca %union.gimple_statement_d*, align 8
  %direct_call = alloca %struct.cgraph_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5576, metadata !DIExpression()), !dbg !5577
  call void @llvm.dbg.declare(metadata %struct.histogram_value_t** %histogram, metadata !5578, metadata !DIExpression()), !dbg !5579
  call void @llvm.dbg.declare(metadata i64* %val, metadata !5580, metadata !DIExpression()), !dbg !5581
  call void @llvm.dbg.declare(metadata i64* %count, metadata !5582, metadata !DIExpression()), !dbg !5583
  call void @llvm.dbg.declare(metadata i64* %all, metadata !5584, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.declare(metadata i64* %bb_all, metadata !5586, metadata !DIExpression()), !dbg !5587
  call void @llvm.dbg.declare(metadata i64* %prob, metadata !5588, metadata !DIExpression()), !dbg !5589
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee, metadata !5590, metadata !DIExpression()), !dbg !5591
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %modify, metadata !5592, metadata !DIExpression()), !dbg !5593
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %direct_call, metadata !5594, metadata !DIExpression()), !dbg !5595
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5596
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5598
  %cmp = icmp ne i32 %call, 8, !dbg !5599
  br i1 %cmp, label %if.then, label %if.end, !dbg !5600

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5601
  br label %return, !dbg !5601

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5602
  %call1 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %1), !dbg !5603
  store %union.tree_node* %call1, %union.tree_node** %callee, align 8, !dbg !5604
  %2 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !5605
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5605
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !5605
  %bf.load = load i64, i64* %3, align 8, !dbg !5605
  %bf.clear = and i64 %bf.load, 65535, !dbg !5605
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5605
  %cmp2 = icmp eq i32 %bf.cast, 29, !dbg !5607
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !5608

if.then3:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !5609
  br label %return, !dbg !5609

if.end4:                                          ; preds = %if.end
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5610
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !5610
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5611
  %call5 = call %struct.histogram_value_t* @gimple_histogram_value_of_type(%struct.function* %add.ptr, %union.gimple_statement_d* %5, i32 4), !dbg !5612
  store %struct.histogram_value_t* %call5, %struct.histogram_value_t** %histogram, align 8, !dbg !5613
  %6 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5614
  %tobool = icmp ne %struct.histogram_value_t* %6, null, !dbg !5614
  br i1 %tobool, label %if.end7, label %if.then6, !dbg !5616

if.then6:                                         ; preds = %if.end4
  store i8 0, i8* %retval, align 1, !dbg !5617
  br label %return, !dbg !5617

if.end7:                                          ; preds = %if.end4
  %7 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5618
  %hvalue = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %7, i32 0, i32 0, !dbg !5619
  %counters = getelementptr inbounds %struct.anon, %struct.anon* %hvalue, i32 0, i32 2, !dbg !5620
  %8 = load i64*, i64** %counters, align 8, !dbg !5620
  %arrayidx = getelementptr inbounds i64, i64* %8, i64 0, !dbg !5618
  %9 = load i64, i64* %arrayidx, align 8, !dbg !5618
  store i64 %9, i64* %val, align 8, !dbg !5621
  %10 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5622
  %hvalue8 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %10, i32 0, i32 0, !dbg !5623
  %counters9 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue8, i32 0, i32 2, !dbg !5624
  %11 = load i64*, i64** %counters9, align 8, !dbg !5624
  %arrayidx10 = getelementptr inbounds i64, i64* %11, i64 1, !dbg !5622
  %12 = load i64, i64* %arrayidx10, align 8, !dbg !5622
  store i64 %12, i64* %count, align 8, !dbg !5625
  %13 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5626
  %hvalue11 = getelementptr inbounds %struct.histogram_value_t, %struct.histogram_value_t* %13, i32 0, i32 0, !dbg !5627
  %counters12 = getelementptr inbounds %struct.anon, %struct.anon* %hvalue11, i32 0, i32 2, !dbg !5628
  %14 = load i64*, i64** %counters12, align 8, !dbg !5628
  %arrayidx13 = getelementptr inbounds i64, i64* %14, i64 2, !dbg !5626
  %15 = load i64, i64* %arrayidx13, align 8, !dbg !5626
  store i64 %15, i64* %all, align 8, !dbg !5629
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5630
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !5630
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5631
  %18 = load %struct.histogram_value_t*, %struct.histogram_value_t** %histogram, align 8, !dbg !5632
  call void @gimple_remove_histogram_value(%struct.function* %add.ptr14, %union.gimple_statement_d* %17, %struct.histogram_value_t* %18), !dbg !5633
  %19 = load i64, i64* %count, align 8, !dbg !5634
  %mul = mul nsw i64 4, %19, !dbg !5636
  %20 = load i64, i64* %all, align 8, !dbg !5637
  %mul15 = mul nsw i64 3, %20, !dbg !5638
  %cmp16 = icmp sle i64 %mul, %mul15, !dbg !5639
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !5640

if.then17:                                        ; preds = %if.end7
  store i8 0, i8* %retval, align 1, !dbg !5641
  br label %return, !dbg !5641

if.end18:                                         ; preds = %if.end7
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5642
  %call19 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %21), !dbg !5643
  %count20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call19, i32 0, i32 8, !dbg !5644
  %22 = load i64, i64* %count20, align 8, !dbg !5644
  store i64 %22, i64* %bb_all, align 8, !dbg !5645
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5646
  %24 = load i64, i64* %bb_all, align 8, !dbg !5648
  %call21 = call zeroext i8 @check_counter(%union.gimple_statement_d* %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i64 0, i64 0), i64* %all, i64* %bb_all, i64 %24), !dbg !5649
  %conv = zext i8 %call21 to i32, !dbg !5649
  %tobool22 = icmp ne i32 %conv, 0, !dbg !5649
  br i1 %tobool22, label %if.then26, label %lor.lhs.false, !dbg !5650

lor.lhs.false:                                    ; preds = %if.end18
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5651
  %26 = load i64, i64* %all, align 8, !dbg !5652
  %call23 = call zeroext i8 @check_counter(%union.gimple_statement_d* %25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i64 0, i64 0), i64* %count, i64* %all, i64 %26), !dbg !5653
  %conv24 = zext i8 %call23 to i32, !dbg !5653
  %tobool25 = icmp ne i32 %conv24, 0, !dbg !5653
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !5654

if.then26:                                        ; preds = %lor.lhs.false, %if.end18
  store i8 0, i8* %retval, align 1, !dbg !5655
  br label %return, !dbg !5655

if.end27:                                         ; preds = %lor.lhs.false
  %27 = load i64, i64* %all, align 8, !dbg !5656
  %cmp28 = icmp sgt i64 %27, 0, !dbg !5658
  br i1 %cmp28, label %if.then30, label %if.else, !dbg !5659

if.then30:                                        ; preds = %if.end27
  %28 = load i64, i64* %count, align 8, !dbg !5660
  %mul31 = mul nsw i64 %28, 10000, !dbg !5661
  %29 = load i64, i64* %all, align 8, !dbg !5662
  %div = sdiv i64 %29, 2, !dbg !5663
  %add = add nsw i64 %mul31, %div, !dbg !5664
  %30 = load i64, i64* %all, align 8, !dbg !5665
  %div32 = sdiv i64 %add, %30, !dbg !5666
  store i64 %div32, i64* %prob, align 8, !dbg !5667
  br label %if.end33, !dbg !5668

if.else:                                          ; preds = %if.end27
  store i64 0, i64* %prob, align 8, !dbg !5669
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.then30
  %31 = load i64, i64* %val, align 8, !dbg !5670
  %conv34 = trunc i64 %31 to i32, !dbg !5671
  %call35 = call %struct.cgraph_node* @find_func_by_pid(i32 %conv34), !dbg !5672
  store %struct.cgraph_node* %call35, %struct.cgraph_node** %direct_call, align 8, !dbg !5673
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %direct_call, align 8, !dbg !5674
  %cmp36 = icmp eq %struct.cgraph_node* %32, null, !dbg !5676
  br i1 %cmp36, label %if.then38, label %if.end39, !dbg !5677

if.then38:                                        ; preds = %if.end33
  store i8 0, i8* %retval, align 1, !dbg !5678
  br label %return, !dbg !5678

if.end39:                                         ; preds = %if.end33
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5679
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %direct_call, align 8, !dbg !5680
  %35 = load i64, i64* %prob, align 8, !dbg !5681
  %conv40 = trunc i64 %35 to i32, !dbg !5681
  %36 = load i64, i64* %count, align 8, !dbg !5682
  %37 = load i64, i64* %all, align 8, !dbg !5683
  %call41 = call %union.gimple_statement_d* @gimple_ic(%union.gimple_statement_d* %33, %struct.cgraph_node* %34, i32 %conv40, i64 %36, i64 %37), !dbg !5684
  store %union.gimple_statement_d* %call41, %union.gimple_statement_d** %modify, align 8, !dbg !5685
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5686
  %tobool42 = icmp ne %struct._IO_FILE* %38, null, !dbg !5686
  br i1 %tobool42, label %if.then43, label %if.end50, !dbg !5688

if.then43:                                        ; preds = %if.end39
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5689
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.37, i64 0, i64 0)), !dbg !5691
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5692
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5693
  %call45 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %41), !dbg !5694
  call void @print_generic_expr(%struct._IO_FILE* %40, %union.tree_node* %call45, i32 2), !dbg !5695
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5696
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.38, i64 0, i64 0)), !dbg !5697
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5698
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %direct_call, align 8, !dbg !5699
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %44, i32 0, i32 0, !dbg !5700
  %45 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5700
  call void @print_generic_expr(%struct._IO_FILE* %43, %union.tree_node* %45, i32 2), !dbg !5701
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5702
  %call47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.32, i64 0, i64 0)), !dbg !5703
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5704
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5705
  call void @print_gimple_stmt(%struct._IO_FILE* %47, %union.gimple_statement_d* %48, i32 0, i32 2), !dbg !5706
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5707
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.39, i64 0, i64 0)), !dbg !5708
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5709
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %modify, align 8, !dbg !5710
  call void @print_gimple_stmt(%struct._IO_FILE* %50, %union.gimple_statement_d* %51, i32 0, i32 2), !dbg !5711
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5712
  %53 = load i64, i64* %count, align 8, !dbg !5713
  %54 = load i64, i64* %all, align 8, !dbg !5714
  %call49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.40, i64 0, i64 0), i64 %53, i64 %54), !dbg !5715
  br label %if.end50, !dbg !5716

if.end50:                                         ; preds = %if.then43, %if.end39
  store i8 1, i8* %retval, align 1, !dbg !5717
  br label %return, !dbg !5717

return:                                           ; preds = %if.end50, %if.then38, %if.then26, %if.then17, %if.then6, %if.then3, %if.then
  %55 = load i8, i8* %retval, align 1, !dbg !5718
  ret i8 %55, !dbg !5718
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !5719 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5722, metadata !DIExpression()), !dbg !5723
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5724
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5725
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !5726
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5726
  ret %struct.basic_block_def* %1, !dbg !5727
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

declare dso_local i32 @counts_to_freqs() #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @check_counter(%union.gimple_statement_d* %stmt, i8* %name, i64* %count, i64* %all, i64 %bb_count) #0 !dbg !5728 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %name.addr = alloca i8*, align 8
  %count.addr = alloca i64*, align 8
  %all.addr = alloca i64*, align 8
  %bb_count.addr = alloca i64, align 8
  %locus = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5731, metadata !DIExpression()), !dbg !5732
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !5733, metadata !DIExpression()), !dbg !5734
  store i64* %count, i64** %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %count.addr, metadata !5735, metadata !DIExpression()), !dbg !5736
  store i64* %all, i64** %all.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %all.addr, metadata !5737, metadata !DIExpression()), !dbg !5738
  store i64 %bb_count, i64* %bb_count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bb_count.addr, metadata !5739, metadata !DIExpression()), !dbg !5740
  %0 = load i64*, i64** %all.addr, align 8, !dbg !5741
  %1 = load i64, i64* %0, align 8, !dbg !5743
  %2 = load i64, i64* %bb_count.addr, align 8, !dbg !5744
  %cmp = icmp ne i64 %1, %2, !dbg !5745
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5746

lor.lhs.false:                                    ; preds = %entry
  %3 = load i64*, i64** %count.addr, align 8, !dbg !5747
  %4 = load i64, i64* %3, align 8, !dbg !5748
  %5 = load i64*, i64** %all.addr, align 8, !dbg !5749
  %6 = load i64, i64* %5, align 8, !dbg !5750
  %cmp1 = icmp sgt i64 %4, %6, !dbg !5751
  br i1 %cmp1, label %if.then, label %if.end11, !dbg !5752

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata i32* %locus, metadata !5753, metadata !DIExpression()), !dbg !5755
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5756
  %cmp2 = icmp ne %union.gimple_statement_d* %7, null, !dbg !5757
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !5758

cond.true:                                        ; preds = %if.then
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5759
  %call = call i32 @gimple_location(%union.gimple_statement_d* %8), !dbg !5760
  br label %cond.end, !dbg !5758

cond.false:                                       ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5761
  %decl_minimal = bitcast %union.tree_node* %9 to %struct.tree_decl_minimal*, !dbg !5761
  %locus3 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !5761
  %10 = load i32, i32* %locus3, align 8, !dbg !5761
  br label %cond.end, !dbg !5758

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %10, %cond.false ], !dbg !5758
  store i32 %cond, i32* %locus, align 4, !dbg !5762
  %11 = load i32, i32* @flag_profile_correction, align 4, !dbg !5763
  %tobool = icmp ne i32 %11, 0, !dbg !5763
  br i1 %tobool, label %if.then4, label %if.else, !dbg !5765

if.then4:                                         ; preds = %cond.end
  %12 = load i32, i32* %locus, align 4, !dbg !5766
  %13 = load i8*, i8** %name.addr, align 8, !dbg !5768
  %14 = load i64*, i64** %all.addr, align 8, !dbg !5769
  %15 = load i64, i64* %14, align 8, !dbg !5770
  %conv = trunc i64 %15 to i32, !dbg !5771
  %16 = load i64, i64* %bb_count.addr, align 8, !dbg !5772
  %conv5 = trunc i64 %16 to i32, !dbg !5773
  call void (i32, i8*, ...) @inform(i32 %12, i8* getelementptr inbounds ([99 x i8], [99 x i8]* @.str.26, i64 0, i64 0), i8* %13, i32 %conv, i32 %conv5), !dbg !5774
  %17 = load i64, i64* %bb_count.addr, align 8, !dbg !5775
  %18 = load i64*, i64** %all.addr, align 8, !dbg !5776
  store i64 %17, i64* %18, align 8, !dbg !5777
  %19 = load i64*, i64** %count.addr, align 8, !dbg !5778
  %20 = load i64, i64* %19, align 8, !dbg !5780
  %21 = load i64*, i64** %all.addr, align 8, !dbg !5781
  %22 = load i64, i64* %21, align 8, !dbg !5782
  %cmp6 = icmp sgt i64 %20, %22, !dbg !5783
  br i1 %cmp6, label %if.then8, label %if.end, !dbg !5784

if.then8:                                         ; preds = %if.then4
  %23 = load i64*, i64** %all.addr, align 8, !dbg !5785
  %24 = load i64, i64* %23, align 8, !dbg !5786
  %25 = load i64*, i64** %count.addr, align 8, !dbg !5787
  store i64 %24, i64* %25, align 8, !dbg !5788
  br label %if.end, !dbg !5789

if.end:                                           ; preds = %if.then8, %if.then4
  store i8 0, i8* %retval, align 1, !dbg !5790
  br label %return, !dbg !5790

if.else:                                          ; preds = %cond.end
  %26 = load i32, i32* %locus, align 4, !dbg !5791
  %27 = load i8*, i8** %name.addr, align 8, !dbg !5793
  %28 = load i64*, i64** %all.addr, align 8, !dbg !5794
  %29 = load i64, i64* %28, align 8, !dbg !5795
  %conv9 = trunc i64 %29 to i32, !dbg !5796
  %30 = load i64, i64* %bb_count.addr, align 8, !dbg !5797
  %conv10 = trunc i64 %30 to i32, !dbg !5798
  call void (i32, i8*, ...) @error_at(i32 %26, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.27, i64 0, i64 0), i8* %27, i32 %conv9, i32 %conv10), !dbg !5799
  store i8 1, i8* %retval, align 1, !dbg !5800
  br label %return, !dbg !5800

if.end11:                                         ; preds = %lor.lhs.false
  store i8 0, i8* %retval, align 1, !dbg !5801
  br label %return, !dbg !5801

return:                                           ; preds = %if.end11, %if.else, %if.end
  %31 = load i8, i8* %retval, align 1, !dbg !5802
  ret i8 %31, !dbg !5802
}

declare dso_local zeroext i8 @optimize_bb_for_size_p(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_mod_subtract(%union.gimple_statement_d* %stmt, i32 %prob1, i32 %prob2, i32 %ncounts, i64 %count1, i64 %count2, i64 %all) #0 !dbg !5803 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %prob1.addr = alloca i32, align 4
  %prob2.addr = alloca i32, align 4
  %ncounts.addr = alloca i32, align 4
  %count1.addr = alloca i64, align 8
  %count2.addr = alloca i64, align 8
  %all.addr = alloca i64, align 8
  %stmt1 = alloca %union.gimple_statement_d*, align 8
  %stmt2 = alloca %union.gimple_statement_d*, align 8
  %stmt3 = alloca %union.gimple_statement_d*, align 8
  %tmp1 = alloca %union.tree_node*, align 8
  %bb1end = alloca %union.gimple_statement_d*, align 8
  %bb2end = alloca %union.gimple_statement_d*, align 8
  %bb3end = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %bb2 = alloca %struct.basic_block_def*, align 8
  %bb3 = alloca %struct.basic_block_def*, align 8
  %bb4 = alloca %struct.basic_block_def*, align 8
  %optype = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %op2 = alloca %union.tree_node*, align 8
  %e12 = alloca %struct.edge_def*, align 8
  %e23 = alloca %struct.edge_def*, align 8
  %e24 = alloca %struct.edge_def*, align 8
  %e34 = alloca %struct.edge_def*, align 8
  %e14 = alloca %struct.edge_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %result = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5806, metadata !DIExpression()), !dbg !5807
  store i32 %prob1, i32* %prob1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %prob1.addr, metadata !5808, metadata !DIExpression()), !dbg !5809
  store i32 %prob2, i32* %prob2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %prob2.addr, metadata !5810, metadata !DIExpression()), !dbg !5811
  store i32 %ncounts, i32* %ncounts.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ncounts.addr, metadata !5812, metadata !DIExpression()), !dbg !5813
  store i64 %count1, i64* %count1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count1.addr, metadata !5814, metadata !DIExpression()), !dbg !5815
  store i64 %count2, i64* %count2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count2.addr, metadata !5816, metadata !DIExpression()), !dbg !5817
  store i64 %all, i64* %all.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %all.addr, metadata !5818, metadata !DIExpression()), !dbg !5819
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt1, metadata !5820, metadata !DIExpression()), !dbg !5821
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt2, metadata !5822, metadata !DIExpression()), !dbg !5823
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt3, metadata !5824, metadata !DIExpression()), !dbg !5825
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp1, metadata !5826, metadata !DIExpression()), !dbg !5827
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %bb1end, metadata !5828, metadata !DIExpression()), !dbg !5829
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %bb2end, metadata !5830, metadata !DIExpression()), !dbg !5831
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %bb2end, align 8, !dbg !5831
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %bb3end, metadata !5832, metadata !DIExpression()), !dbg !5833
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5834, metadata !DIExpression()), !dbg !5835
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb2, metadata !5836, metadata !DIExpression()), !dbg !5837
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb3, metadata !5838, metadata !DIExpression()), !dbg !5839
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb4, metadata !5840, metadata !DIExpression()), !dbg !5841
  call void @llvm.dbg.declare(metadata %union.tree_node** %optype, metadata !5842, metadata !DIExpression()), !dbg !5843
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !5844, metadata !DIExpression()), !dbg !5845
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2, metadata !5846, metadata !DIExpression()), !dbg !5847
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e12, metadata !5848, metadata !DIExpression()), !dbg !5849
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e23, metadata !5850, metadata !DIExpression()), !dbg !5851
  store %struct.edge_def* null, %struct.edge_def** %e23, align 8, !dbg !5851
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e24, metadata !5852, metadata !DIExpression()), !dbg !5853
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e34, metadata !5854, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e14, metadata !5856, metadata !DIExpression()), !dbg !5857
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5858, metadata !DIExpression()), !dbg !5859
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !5860, metadata !DIExpression()), !dbg !5861
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5862
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !5862
  %conv = zext i8 %call to i32, !dbg !5862
  %tobool = icmp ne i32 %conv, 0, !dbg !5862
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !5862

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5862
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !5862
  %cmp = icmp eq i32 %call1, 71, !dbg !5862
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5862

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 873, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5862
  br label %cond.end, !dbg !5862

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !5862

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5862
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5863
  %call3 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %2), !dbg !5863
  %common = bitcast %union.tree_node* %call3 to %struct.tree_common*, !dbg !5863
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5863
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5863
  store %union.tree_node* %3, %union.tree_node** %optype, align 8, !dbg !5864
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5865
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !5866
  store %union.tree_node* %call4, %union.tree_node** %op1, align 8, !dbg !5867
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5868
  %call5 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %5), !dbg !5869
  store %union.tree_node* %call5, %union.tree_node** %op2, align 8, !dbg !5870
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5871
  %call6 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !5872
  store %struct.basic_block_def* %call6, %struct.basic_block_def** %bb, align 8, !dbg !5873
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5874
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %7), !dbg !5875
  %8 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5875
  %9 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5875
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false), !dbg !5875
  %10 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !5876
  %call7 = call %union.tree_node* @create_tmp_var(%union.tree_node* %10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0)), !dbg !5877
  store %union.tree_node* %call7, %union.tree_node** %result, align 8, !dbg !5878
  %11 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !5879
  %call8 = call %union.tree_node* @create_tmp_var(%union.tree_node* %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0)), !dbg !5880
  store %union.tree_node* %call8, %union.tree_node** %tmp1, align 8, !dbg !5881
  %12 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5882
  %13 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5882
  %call9 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %12, %union.tree_node* %13), !dbg !5882
  store %union.gimple_statement_d* %call9, %union.gimple_statement_d** %stmt1, align 8, !dbg !5883
  %14 = load %union.tree_node*, %union.tree_node** %tmp1, align 8, !dbg !5884
  %15 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !5884
  %call10 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %14, %union.tree_node* %15), !dbg !5884
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %stmt2, align 8, !dbg !5885
  %16 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5886
  %17 = load %union.tree_node*, %union.tree_node** %tmp1, align 8, !dbg !5887
  %call11 = call %union.gimple_statement_d* @gimple_build_cond(i32 97, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* null, %union.tree_node* null), !dbg !5888
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %stmt3, align 8, !dbg !5889
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !5890
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %18, i32 1), !dbg !5891
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !5892
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %19, i32 1), !dbg !5893
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt3, align 8, !dbg !5894
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %20, i32 1), !dbg !5895
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt3, align 8, !dbg !5896
  store %union.gimple_statement_d* %21, %union.gimple_statement_d** %bb1end, align 8, !dbg !5897
  %22 = load i32, i32* %ncounts.addr, align 4, !dbg !5898
  %tobool12 = icmp ne i32 %22, 0, !dbg !5898
  br i1 %tobool12, label %if.then, label %if.end, !dbg !5900

if.then:                                          ; preds = %cond.end
  %23 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5901
  %24 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5901
  %25 = load %union.tree_node*, %union.tree_node** %tmp1, align 8, !dbg !5901
  %call13 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 64, %union.tree_node* %23, %union.tree_node* %24, %union.tree_node* %25), !dbg !5901
  store %union.gimple_statement_d* %call13, %union.gimple_statement_d** %stmt1, align 8, !dbg !5903
  %26 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5904
  %27 = load %union.tree_node*, %union.tree_node** %tmp1, align 8, !dbg !5905
  %call14 = call %union.gimple_statement_d* @gimple_build_cond(i32 97, %union.tree_node* %26, %union.tree_node* %27, %union.tree_node* null, %union.tree_node* null), !dbg !5906
  store %union.gimple_statement_d* %call14, %union.gimple_statement_d** %stmt2, align 8, !dbg !5907
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !5908
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %28, i32 1), !dbg !5909
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !5910
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %29, i32 1), !dbg !5911
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !5912
  store %union.gimple_statement_d* %30, %union.gimple_statement_d** %bb2end, align 8, !dbg !5913
  br label %if.end, !dbg !5914

if.end:                                           ; preds = %if.then, %cond.end
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5915
  %call15 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %31), !dbg !5915
  %32 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5915
  %33 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5915
  %34 = load %union.tree_node*, %union.tree_node** %tmp1, align 8, !dbg !5915
  %call16 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 %call15, %union.tree_node* %32, %union.tree_node* %33, %union.tree_node* %34), !dbg !5915
  store %union.gimple_statement_d* %call16, %union.gimple_statement_d** %stmt1, align 8, !dbg !5916
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !5917
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %35, i32 1), !dbg !5918
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !5919
  store %union.gimple_statement_d* %36, %union.gimple_statement_d** %bb3end, align 8, !dbg !5920
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5921
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %bb1end, align 8, !dbg !5922
  %39 = bitcast %union.gimple_statement_d* %38 to i8*, !dbg !5922
  %call17 = call %struct.edge_def* @split_block(%struct.basic_block_def* %37, i8* %39), !dbg !5923
  store %struct.edge_def* %call17, %struct.edge_def** %e12, align 8, !dbg !5924
  %40 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !5925
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %40, i32 0, i32 1, !dbg !5926
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5926
  store %struct.basic_block_def* %41, %struct.basic_block_def** %bb2, align 8, !dbg !5927
  %42 = load i64, i64* %all.addr, align 8, !dbg !5928
  %43 = load i64, i64* %count1.addr, align 8, !dbg !5929
  %sub = sub nsw i64 %42, %43, !dbg !5930
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !5931
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 8, !dbg !5932
  store i64 %sub, i64* %count, align 8, !dbg !5933
  %45 = load i32, i32* %ncounts.addr, align 4, !dbg !5934
  %tobool18 = icmp ne i32 %45, 0, !dbg !5934
  br i1 %tobool18, label %if.then19, label %if.end25, !dbg !5936

if.then19:                                        ; preds = %if.end
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !5937
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %bb2end, align 8, !dbg !5939
  %48 = bitcast %union.gimple_statement_d* %47 to i8*, !dbg !5939
  %call20 = call %struct.edge_def* @split_block(%struct.basic_block_def* %46, i8* %48), !dbg !5940
  store %struct.edge_def* %call20, %struct.edge_def** %e23, align 8, !dbg !5941
  %49 = load %struct.edge_def*, %struct.edge_def** %e23, align 8, !dbg !5942
  %dest21 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %49, i32 0, i32 1, !dbg !5943
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %dest21, align 8, !dbg !5943
  store %struct.basic_block_def* %50, %struct.basic_block_def** %bb3, align 8, !dbg !5944
  %51 = load i64, i64* %all.addr, align 8, !dbg !5945
  %52 = load i64, i64* %count1.addr, align 8, !dbg !5946
  %sub22 = sub nsw i64 %51, %52, !dbg !5947
  %53 = load i64, i64* %count2.addr, align 8, !dbg !5948
  %sub23 = sub nsw i64 %sub22, %53, !dbg !5949
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb3, align 8, !dbg !5950
  %count24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 8, !dbg !5951
  store i64 %sub23, i64* %count24, align 8, !dbg !5952
  br label %if.end25, !dbg !5953

if.end25:                                         ; preds = %if.then19, %if.end
  %55 = load i32, i32* %ncounts.addr, align 4, !dbg !5954
  %tobool26 = icmp ne i32 %55, 0, !dbg !5954
  br i1 %tobool26, label %cond.true27, label %cond.false28, !dbg !5954

cond.true27:                                      ; preds = %if.end25
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %bb3, align 8, !dbg !5955
  br label %cond.end29, !dbg !5954

cond.false28:                                     ; preds = %if.end25
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !5956
  br label %cond.end29, !dbg !5954

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi %struct.basic_block_def* [ %56, %cond.true27 ], [ %57, %cond.false28 ], !dbg !5954
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %bb3end, align 8, !dbg !5957
  %59 = bitcast %union.gimple_statement_d* %58 to i8*, !dbg !5957
  %call31 = call %struct.edge_def* @split_block(%struct.basic_block_def* %cond30, i8* %59), !dbg !5958
  store %struct.edge_def* %call31, %struct.edge_def** %e34, align 8, !dbg !5959
  %60 = load %struct.edge_def*, %struct.edge_def** %e34, align 8, !dbg !5960
  %dest32 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %60, i32 0, i32 1, !dbg !5961
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %dest32, align 8, !dbg !5961
  store %struct.basic_block_def* %61, %struct.basic_block_def** %bb4, align 8, !dbg !5962
  %62 = load i64, i64* %all.addr, align 8, !dbg !5963
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %bb4, align 8, !dbg !5964
  %count33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 8, !dbg !5965
  store i64 %62, i64* %count33, align 8, !dbg !5966
  %64 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !5967
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %64, i32 0, i32 7, !dbg !5968
  %65 = load i32, i32* %flags, align 8, !dbg !5969
  %and = and i32 %65, -2, !dbg !5969
  store i32 %and, i32* %flags, align 8, !dbg !5969
  %66 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !5970
  %flags34 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %66, i32 0, i32 7, !dbg !5971
  %67 = load i32, i32* %flags34, align 8, !dbg !5972
  %or = or i32 %67, 2048, !dbg !5972
  store i32 %or, i32* %flags34, align 8, !dbg !5972
  %68 = load i32, i32* %prob1.addr, align 4, !dbg !5973
  %sub35 = sub nsw i32 10000, %68, !dbg !5974
  %69 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !5975
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %69, i32 0, i32 8, !dbg !5976
  store i32 %sub35, i32* %probability, align 4, !dbg !5977
  %70 = load i64, i64* %all.addr, align 8, !dbg !5978
  %71 = load i64, i64* %count1.addr, align 8, !dbg !5979
  %sub36 = sub nsw i64 %70, %71, !dbg !5980
  %72 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !5981
  %count37 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %72, i32 0, i32 9, !dbg !5982
  store i64 %sub36, i64* %count37, align 8, !dbg !5983
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5984
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %bb4, align 8, !dbg !5985
  %call38 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %73, %struct.basic_block_def* %74, i32 1024), !dbg !5986
  store %struct.edge_def* %call38, %struct.edge_def** %e14, align 8, !dbg !5987
  %75 = load i32, i32* %prob1.addr, align 4, !dbg !5988
  %76 = load %struct.edge_def*, %struct.edge_def** %e14, align 8, !dbg !5989
  %probability39 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %76, i32 0, i32 8, !dbg !5990
  store i32 %75, i32* %probability39, align 4, !dbg !5991
  %77 = load i64, i64* %count1.addr, align 8, !dbg !5992
  %78 = load %struct.edge_def*, %struct.edge_def** %e14, align 8, !dbg !5993
  %count40 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %78, i32 0, i32 9, !dbg !5994
  store i64 %77, i64* %count40, align 8, !dbg !5995
  %79 = load i32, i32* %ncounts.addr, align 4, !dbg !5996
  %tobool41 = icmp ne i32 %79, 0, !dbg !5996
  br i1 %tobool41, label %if.then42, label %if.end55, !dbg !5998

if.then42:                                        ; preds = %cond.end29
  %80 = load %struct.edge_def*, %struct.edge_def** %e23, align 8, !dbg !5999
  %flags43 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %80, i32 0, i32 7, !dbg !6001
  %81 = load i32, i32* %flags43, align 8, !dbg !6002
  %and44 = and i32 %81, -2, !dbg !6002
  store i32 %and44, i32* %flags43, align 8, !dbg !6002
  %82 = load %struct.edge_def*, %struct.edge_def** %e23, align 8, !dbg !6003
  %flags45 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %82, i32 0, i32 7, !dbg !6004
  %83 = load i32, i32* %flags45, align 8, !dbg !6005
  %or46 = or i32 %83, 2048, !dbg !6005
  store i32 %or46, i32* %flags45, align 8, !dbg !6005
  %84 = load i64, i64* %all.addr, align 8, !dbg !6006
  %85 = load i64, i64* %count1.addr, align 8, !dbg !6007
  %sub47 = sub nsw i64 %84, %85, !dbg !6008
  %86 = load i64, i64* %count2.addr, align 8, !dbg !6009
  %sub48 = sub nsw i64 %sub47, %86, !dbg !6010
  %87 = load %struct.edge_def*, %struct.edge_def** %e23, align 8, !dbg !6011
  %count49 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %87, i32 0, i32 9, !dbg !6012
  store i64 %sub48, i64* %count49, align 8, !dbg !6013
  %88 = load i32, i32* %prob2.addr, align 4, !dbg !6014
  %sub50 = sub nsw i32 10000, %88, !dbg !6015
  %89 = load %struct.edge_def*, %struct.edge_def** %e23, align 8, !dbg !6016
  %probability51 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %89, i32 0, i32 8, !dbg !6017
  store i32 %sub50, i32* %probability51, align 4, !dbg !6018
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !6019
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %bb4, align 8, !dbg !6020
  %call52 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %90, %struct.basic_block_def* %91, i32 1024), !dbg !6021
  store %struct.edge_def* %call52, %struct.edge_def** %e24, align 8, !dbg !6022
  %92 = load i32, i32* %prob2.addr, align 4, !dbg !6023
  %93 = load %struct.edge_def*, %struct.edge_def** %e24, align 8, !dbg !6024
  %probability53 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %93, i32 0, i32 8, !dbg !6025
  store i32 %92, i32* %probability53, align 4, !dbg !6026
  %94 = load i64, i64* %count2.addr, align 8, !dbg !6027
  %95 = load %struct.edge_def*, %struct.edge_def** %e24, align 8, !dbg !6028
  %count54 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %95, i32 0, i32 9, !dbg !6029
  store i64 %94, i64* %count54, align 8, !dbg !6030
  br label %if.end55, !dbg !6031

if.end55:                                         ; preds = %if.then42, %cond.end29
  %96 = load %struct.edge_def*, %struct.edge_def** %e34, align 8, !dbg !6032
  %probability56 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %96, i32 0, i32 8, !dbg !6033
  store i32 10000, i32* %probability56, align 4, !dbg !6034
  %97 = load i64, i64* %all.addr, align 8, !dbg !6035
  %98 = load i64, i64* %count1.addr, align 8, !dbg !6036
  %sub57 = sub nsw i64 %97, %98, !dbg !6037
  %99 = load i64, i64* %count2.addr, align 8, !dbg !6038
  %sub58 = sub nsw i64 %sub57, %99, !dbg !6039
  %100 = load %struct.edge_def*, %struct.edge_def** %e34, align 8, !dbg !6040
  %count59 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %100, i32 0, i32 9, !dbg !6041
  store i64 %sub58, i64* %count59, align 8, !dbg !6042
  %101 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6043
  ret %union.tree_node* %101, !dbg !6044
}

declare dso_local void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !6045 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6048, metadata !DIExpression()), !dbg !6049
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6050
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6051
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !6052
  %1 = load i32, i32* %location, align 8, !dbg !6052
  ret i32 %1, !dbg !6053
}

declare dso_local void @inform(i32, i8*, ...) #2

declare dso_local void @error_at(i32, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !6054 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6055, metadata !DIExpression()), !dbg !6056
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6057
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6058
  %cmp = icmp eq i32 %call, 6, !dbg !6059
  %conv = zext i1 %cmp to i32, !dbg !6059
  %conv1 = trunc i32 %conv to i8, !dbg !6058
  ret i8 %conv1, !dbg !6060
}

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_cond(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %struct.edge_def* @split_block(%struct.basic_block_def*, i8*) #2

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

declare dso_local i32 @simple_cst_equal(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst_wide(%union.tree_node*, i64, i64) #2

declare dso_local %union.tree_node* @get_gcov_type() #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_divmod_fixed_value(%union.gimple_statement_d* %stmt, %union.tree_node* %value, i32 %prob, i64 %count, i64 %all) #0 !dbg !6061 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %value.addr = alloca %union.tree_node*, align 8
  %prob.addr = alloca i32, align 4
  %count.addr = alloca i64, align 8
  %all.addr = alloca i64, align 8
  %stmt1 = alloca %union.gimple_statement_d*, align 8
  %stmt2 = alloca %union.gimple_statement_d*, align 8
  %stmt3 = alloca %union.gimple_statement_d*, align 8
  %tmp1 = alloca %union.tree_node*, align 8
  %tmp2 = alloca %union.tree_node*, align 8
  %tmpv = alloca %union.tree_node*, align 8
  %bb1end = alloca %union.gimple_statement_d*, align 8
  %bb2end = alloca %union.gimple_statement_d*, align 8
  %bb3end = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %bb2 = alloca %struct.basic_block_def*, align 8
  %bb3 = alloca %struct.basic_block_def*, align 8
  %bb4 = alloca %struct.basic_block_def*, align 8
  %optype = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %op2 = alloca %union.tree_node*, align 8
  %e12 = alloca %struct.edge_def*, align 8
  %e13 = alloca %struct.edge_def*, align 8
  %e23 = alloca %struct.edge_def*, align 8
  %e24 = alloca %struct.edge_def*, align 8
  %e34 = alloca %struct.edge_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6064, metadata !DIExpression()), !dbg !6065
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !6066, metadata !DIExpression()), !dbg !6067
  store i32 %prob, i32* %prob.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %prob.addr, metadata !6068, metadata !DIExpression()), !dbg !6069
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !6070, metadata !DIExpression()), !dbg !6071
  store i64 %all, i64* %all.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %all.addr, metadata !6072, metadata !DIExpression()), !dbg !6073
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt1, metadata !6074, metadata !DIExpression()), !dbg !6075
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt2, metadata !6076, metadata !DIExpression()), !dbg !6077
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt3, metadata !6078, metadata !DIExpression()), !dbg !6079
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp1, metadata !6080, metadata !DIExpression()), !dbg !6081
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp2, metadata !6082, metadata !DIExpression()), !dbg !6083
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmpv, metadata !6084, metadata !DIExpression()), !dbg !6085
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %bb1end, metadata !6086, metadata !DIExpression()), !dbg !6087
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %bb2end, metadata !6088, metadata !DIExpression()), !dbg !6089
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %bb3end, metadata !6090, metadata !DIExpression()), !dbg !6091
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6092, metadata !DIExpression()), !dbg !6093
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb2, metadata !6094, metadata !DIExpression()), !dbg !6095
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb3, metadata !6096, metadata !DIExpression()), !dbg !6097
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb4, metadata !6098, metadata !DIExpression()), !dbg !6099
  call void @llvm.dbg.declare(metadata %union.tree_node** %optype, metadata !6100, metadata !DIExpression()), !dbg !6101
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !6102, metadata !DIExpression()), !dbg !6103
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2, metadata !6104, metadata !DIExpression()), !dbg !6105
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e12, metadata !6106, metadata !DIExpression()), !dbg !6107
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e13, metadata !6108, metadata !DIExpression()), !dbg !6109
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e23, metadata !6110, metadata !DIExpression()), !dbg !6111
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e24, metadata !6112, metadata !DIExpression()), !dbg !6113
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e34, metadata !6114, metadata !DIExpression()), !dbg !6115
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6116, metadata !DIExpression()), !dbg !6117
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6118
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !6118
  %conv = zext i8 %call to i32, !dbg !6118
  %tobool = icmp ne i32 %conv, 0, !dbg !6118
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6118

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6118
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !6118
  %cmp = icmp eq i32 %call1, 67, !dbg !6118
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !6118

lor.lhs.false:                                    ; preds = %land.lhs.true
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6118
  %call3 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %2), !dbg !6118
  %cmp4 = icmp eq i32 %call3, 71, !dbg !6118
  br i1 %cmp4, label %cond.false, label %cond.true, !dbg !6118

cond.true:                                        ; preds = %lor.lhs.false, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 568, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6118
  br label %cond.end, !dbg !6118

cond.false:                                       ; preds = %lor.lhs.false, %land.lhs.true
  br label %cond.end, !dbg !6118

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6118
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6119
  %call6 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %3), !dbg !6119
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !6119
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6119
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6119
  store %union.tree_node* %4, %union.tree_node** %optype, align 8, !dbg !6120
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6121
  %call7 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %5), !dbg !6122
  store %union.tree_node* %call7, %union.tree_node** %op1, align 8, !dbg !6123
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6124
  %call8 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %6), !dbg !6125
  store %union.tree_node* %call8, %union.tree_node** %op2, align 8, !dbg !6126
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6127
  %call9 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %7), !dbg !6128
  store %struct.basic_block_def* %call9, %struct.basic_block_def** %bb, align 8, !dbg !6129
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6130
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %8), !dbg !6131
  %9 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6131
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6131
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !6131
  %11 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !6132
  %call10 = call %union.tree_node* @create_tmp_var(%union.tree_node* %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0)), !dbg !6133
  store %union.tree_node* %call10, %union.tree_node** %tmpv, align 8, !dbg !6134
  %12 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !6135
  %call11 = call %union.tree_node* @create_tmp_var(%union.tree_node* %12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0)), !dbg !6136
  store %union.tree_node* %call11, %union.tree_node** %tmp1, align 8, !dbg !6137
  %13 = load %union.tree_node*, %union.tree_node** %tmpv, align 8, !dbg !6138
  %14 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !6138
  %15 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !6138
  %call12 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %14, %union.tree_node* %15), !dbg !6138
  %call13 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %13, %union.tree_node* %call12), !dbg !6138
  store %union.gimple_statement_d* %call13, %union.gimple_statement_d** %stmt1, align 8, !dbg !6139
  %16 = load %union.tree_node*, %union.tree_node** %tmp1, align 8, !dbg !6140
  %17 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !6140
  %call14 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %16, %union.tree_node* %17), !dbg !6140
  store %union.gimple_statement_d* %call14, %union.gimple_statement_d** %stmt2, align 8, !dbg !6141
  %18 = load %union.tree_node*, %union.tree_node** %tmp1, align 8, !dbg !6142
  %19 = load %union.tree_node*, %union.tree_node** %tmpv, align 8, !dbg !6143
  %call15 = call %union.gimple_statement_d* @gimple_build_cond(i32 102, %union.tree_node* %18, %union.tree_node* %19, %union.tree_node* null, %union.tree_node* null), !dbg !6144
  store %union.gimple_statement_d* %call15, %union.gimple_statement_d** %stmt3, align 8, !dbg !6145
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6146
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %20, i32 1), !dbg !6147
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6148
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %21, i32 1), !dbg !6149
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt3, align 8, !dbg !6150
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %22, i32 1), !dbg !6151
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt3, align 8, !dbg !6152
  store %union.gimple_statement_d* %23, %union.gimple_statement_d** %bb1end, align 8, !dbg !6153
  %24 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !6154
  %call16 = call %union.tree_node* @create_tmp_var(%union.tree_node* %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0)), !dbg !6155
  store %union.tree_node* %call16, %union.tree_node** %tmp2, align 8, !dbg !6156
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6157
  %call17 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %25), !dbg !6157
  %26 = load %union.tree_node*, %union.tree_node** %tmp2, align 8, !dbg !6157
  %27 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6157
  %28 = load %union.tree_node*, %union.tree_node** %tmpv, align 8, !dbg !6157
  %call18 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 %call17, %union.tree_node* %26, %union.tree_node* %27, %union.tree_node* %28), !dbg !6157
  store %union.gimple_statement_d* %call18, %union.gimple_statement_d** %stmt1, align 8, !dbg !6158
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6159
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %29, i32 1), !dbg !6160
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6161
  store %union.gimple_statement_d* %30, %union.gimple_statement_d** %bb2end, align 8, !dbg !6162
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6163
  %call19 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %31), !dbg !6163
  %32 = load %union.tree_node*, %union.tree_node** %tmp2, align 8, !dbg !6163
  %33 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6163
  %34 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !6163
  %call20 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 %call19, %union.tree_node* %32, %union.tree_node* %33, %union.tree_node* %34), !dbg !6163
  store %union.gimple_statement_d* %call20, %union.gimple_statement_d** %stmt1, align 8, !dbg !6164
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6165
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %35, i32 1), !dbg !6166
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6167
  store %union.gimple_statement_d* %36, %union.gimple_statement_d** %bb3end, align 8, !dbg !6168
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6169
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %bb1end, align 8, !dbg !6170
  %39 = bitcast %union.gimple_statement_d* %38 to i8*, !dbg !6170
  %call21 = call %struct.edge_def* @split_block(%struct.basic_block_def* %37, i8* %39), !dbg !6171
  store %struct.edge_def* %call21, %struct.edge_def** %e12, align 8, !dbg !6172
  %40 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !6173
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %40, i32 0, i32 1, !dbg !6174
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6174
  store %struct.basic_block_def* %41, %struct.basic_block_def** %bb2, align 8, !dbg !6175
  %42 = load i64, i64* %count.addr, align 8, !dbg !6176
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !6177
  %count22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 8, !dbg !6178
  store i64 %42, i64* %count22, align 8, !dbg !6179
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !6180
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %bb2end, align 8, !dbg !6181
  %46 = bitcast %union.gimple_statement_d* %45 to i8*, !dbg !6181
  %call23 = call %struct.edge_def* @split_block(%struct.basic_block_def* %44, i8* %46), !dbg !6182
  store %struct.edge_def* %call23, %struct.edge_def** %e23, align 8, !dbg !6183
  %47 = load %struct.edge_def*, %struct.edge_def** %e23, align 8, !dbg !6184
  %dest24 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 1, !dbg !6185
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %dest24, align 8, !dbg !6185
  store %struct.basic_block_def* %48, %struct.basic_block_def** %bb3, align 8, !dbg !6186
  %49 = load i64, i64* %all.addr, align 8, !dbg !6187
  %50 = load i64, i64* %count.addr, align 8, !dbg !6188
  %sub = sub nsw i64 %49, %50, !dbg !6189
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb3, align 8, !dbg !6190
  %count25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 8, !dbg !6191
  store i64 %sub, i64* %count25, align 8, !dbg !6192
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %bb3, align 8, !dbg !6193
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %bb3end, align 8, !dbg !6194
  %54 = bitcast %union.gimple_statement_d* %53 to i8*, !dbg !6194
  %call26 = call %struct.edge_def* @split_block(%struct.basic_block_def* %52, i8* %54), !dbg !6195
  store %struct.edge_def* %call26, %struct.edge_def** %e34, align 8, !dbg !6196
  %55 = load %struct.edge_def*, %struct.edge_def** %e34, align 8, !dbg !6197
  %dest27 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %55, i32 0, i32 1, !dbg !6198
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %dest27, align 8, !dbg !6198
  store %struct.basic_block_def* %56, %struct.basic_block_def** %bb4, align 8, !dbg !6199
  %57 = load i64, i64* %all.addr, align 8, !dbg !6200
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %bb4, align 8, !dbg !6201
  %count28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 8, !dbg !6202
  store i64 %57, i64* %count28, align 8, !dbg !6203
  %59 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !6204
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %59, i32 0, i32 7, !dbg !6205
  %60 = load i32, i32* %flags, align 8, !dbg !6206
  %and = and i32 %60, -2, !dbg !6206
  store i32 %and, i32* %flags, align 8, !dbg !6206
  %61 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !6207
  %flags29 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %61, i32 0, i32 7, !dbg !6208
  %62 = load i32, i32* %flags29, align 8, !dbg !6209
  %or = or i32 %62, 2048, !dbg !6209
  store i32 %or, i32* %flags29, align 8, !dbg !6209
  %63 = load i32, i32* %prob.addr, align 4, !dbg !6210
  %64 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !6211
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %64, i32 0, i32 8, !dbg !6212
  store i32 %63, i32* %probability, align 4, !dbg !6213
  %65 = load i64, i64* %count.addr, align 8, !dbg !6214
  %66 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !6215
  %count30 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %66, i32 0, i32 9, !dbg !6216
  store i64 %65, i64* %count30, align 8, !dbg !6217
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6218
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %bb3, align 8, !dbg !6219
  %call31 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %67, %struct.basic_block_def* %68, i32 1024), !dbg !6220
  store %struct.edge_def* %call31, %struct.edge_def** %e13, align 8, !dbg !6221
  %69 = load i32, i32* %prob.addr, align 4, !dbg !6222
  %sub32 = sub nsw i32 10000, %69, !dbg !6223
  %70 = load %struct.edge_def*, %struct.edge_def** %e13, align 8, !dbg !6224
  %probability33 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %70, i32 0, i32 8, !dbg !6225
  store i32 %sub32, i32* %probability33, align 4, !dbg !6226
  %71 = load i64, i64* %all.addr, align 8, !dbg !6227
  %72 = load i64, i64* %count.addr, align 8, !dbg !6228
  %sub34 = sub nsw i64 %71, %72, !dbg !6229
  %73 = load %struct.edge_def*, %struct.edge_def** %e13, align 8, !dbg !6230
  %count35 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %73, i32 0, i32 9, !dbg !6231
  store i64 %sub34, i64* %count35, align 8, !dbg !6232
  %74 = load %struct.edge_def*, %struct.edge_def** %e23, align 8, !dbg !6233
  call void @remove_edge(%struct.edge_def* %74), !dbg !6234
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !6235
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %bb4, align 8, !dbg !6236
  %call36 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %75, %struct.basic_block_def* %76, i32 1), !dbg !6237
  store %struct.edge_def* %call36, %struct.edge_def** %e24, align 8, !dbg !6238
  %77 = load %struct.edge_def*, %struct.edge_def** %e24, align 8, !dbg !6239
  %probability37 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %77, i32 0, i32 8, !dbg !6240
  store i32 10000, i32* %probability37, align 4, !dbg !6241
  %78 = load i64, i64* %count.addr, align 8, !dbg !6242
  %79 = load %struct.edge_def*, %struct.edge_def** %e24, align 8, !dbg !6243
  %count38 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %79, i32 0, i32 9, !dbg !6244
  store i64 %78, i64* %count38, align 8, !dbg !6245
  %80 = load %struct.edge_def*, %struct.edge_def** %e34, align 8, !dbg !6246
  %probability39 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %80, i32 0, i32 8, !dbg !6247
  store i32 10000, i32* %probability39, align 4, !dbg !6248
  %81 = load i64, i64* %all.addr, align 8, !dbg !6249
  %82 = load i64, i64* %count.addr, align 8, !dbg !6250
  %sub40 = sub nsw i64 %81, %82, !dbg !6251
  %83 = load %struct.edge_def*, %struct.edge_def** %e34, align 8, !dbg !6252
  %count41 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %83, i32 0, i32 9, !dbg !6253
  store i64 %sub40, i64* %count41, align 8, !dbg !6254
  %84 = load %union.tree_node*, %union.tree_node** %tmp2, align 8, !dbg !6255
  ret %union.tree_node* %84, !dbg !6256
}

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @remove_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_mod_pow2(%union.gimple_statement_d* %stmt, i32 %prob, i64 %count, i64 %all) #0 !dbg !6257 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %prob.addr = alloca i32, align 4
  %count.addr = alloca i64, align 8
  %all.addr = alloca i64, align 8
  %stmt1 = alloca %union.gimple_statement_d*, align 8
  %stmt2 = alloca %union.gimple_statement_d*, align 8
  %stmt3 = alloca %union.gimple_statement_d*, align 8
  %stmt4 = alloca %union.gimple_statement_d*, align 8
  %tmp2 = alloca %union.tree_node*, align 8
  %tmp3 = alloca %union.tree_node*, align 8
  %bb1end = alloca %union.gimple_statement_d*, align 8
  %bb2end = alloca %union.gimple_statement_d*, align 8
  %bb3end = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %bb2 = alloca %struct.basic_block_def*, align 8
  %bb3 = alloca %struct.basic_block_def*, align 8
  %bb4 = alloca %struct.basic_block_def*, align 8
  %optype = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %op2 = alloca %union.tree_node*, align 8
  %e12 = alloca %struct.edge_def*, align 8
  %e13 = alloca %struct.edge_def*, align 8
  %e23 = alloca %struct.edge_def*, align 8
  %e24 = alloca %struct.edge_def*, align 8
  %e34 = alloca %struct.edge_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %result = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6260, metadata !DIExpression()), !dbg !6261
  store i32 %prob, i32* %prob.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %prob.addr, metadata !6262, metadata !DIExpression()), !dbg !6263
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !6264, metadata !DIExpression()), !dbg !6265
  store i64 %all, i64* %all.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %all.addr, metadata !6266, metadata !DIExpression()), !dbg !6267
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt1, metadata !6268, metadata !DIExpression()), !dbg !6269
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt2, metadata !6270, metadata !DIExpression()), !dbg !6271
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt3, metadata !6272, metadata !DIExpression()), !dbg !6273
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt4, metadata !6274, metadata !DIExpression()), !dbg !6275
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp2, metadata !6276, metadata !DIExpression()), !dbg !6277
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp3, metadata !6278, metadata !DIExpression()), !dbg !6279
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %bb1end, metadata !6280, metadata !DIExpression()), !dbg !6281
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %bb2end, metadata !6282, metadata !DIExpression()), !dbg !6283
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %bb3end, metadata !6284, metadata !DIExpression()), !dbg !6285
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6286, metadata !DIExpression()), !dbg !6287
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb2, metadata !6288, metadata !DIExpression()), !dbg !6289
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb3, metadata !6290, metadata !DIExpression()), !dbg !6291
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb4, metadata !6292, metadata !DIExpression()), !dbg !6293
  call void @llvm.dbg.declare(metadata %union.tree_node** %optype, metadata !6294, metadata !DIExpression()), !dbg !6295
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !6296, metadata !DIExpression()), !dbg !6297
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2, metadata !6298, metadata !DIExpression()), !dbg !6299
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e12, metadata !6300, metadata !DIExpression()), !dbg !6301
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e13, metadata !6302, metadata !DIExpression()), !dbg !6303
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e23, metadata !6304, metadata !DIExpression()), !dbg !6305
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e24, metadata !6306, metadata !DIExpression()), !dbg !6307
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e34, metadata !6308, metadata !DIExpression()), !dbg !6309
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6310, metadata !DIExpression()), !dbg !6311
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !6312, metadata !DIExpression()), !dbg !6313
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6314
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !6314
  %conv = zext i8 %call to i32, !dbg !6314
  %tobool = icmp ne i32 %conv, 0, !dbg !6314
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6314

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6314
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !6314
  %cmp = icmp eq i32 %call1, 71, !dbg !6314
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6314

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 721, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6314
  br label %cond.end, !dbg !6314

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6314

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6314
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6315
  %call3 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %2), !dbg !6315
  %common = bitcast %union.tree_node* %call3 to %struct.tree_common*, !dbg !6315
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6315
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6315
  store %union.tree_node* %3, %union.tree_node** %optype, align 8, !dbg !6316
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6317
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !6318
  store %union.tree_node* %call4, %union.tree_node** %op1, align 8, !dbg !6319
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6320
  %call5 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %5), !dbg !6321
  store %union.tree_node* %call5, %union.tree_node** %op2, align 8, !dbg !6322
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6323
  %call6 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !6324
  store %struct.basic_block_def* %call6, %struct.basic_block_def** %bb, align 8, !dbg !6325
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6326
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %7), !dbg !6327
  %8 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6327
  %9 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6327
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false), !dbg !6327
  %10 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !6328
  %call7 = call %union.tree_node* @create_tmp_var(%union.tree_node* %10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0)), !dbg !6329
  store %union.tree_node* %call7, %union.tree_node** %result, align 8, !dbg !6330
  %11 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !6331
  %call8 = call %union.tree_node* @create_tmp_var(%union.tree_node* %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0)), !dbg !6332
  store %union.tree_node* %call8, %union.tree_node** %tmp2, align 8, !dbg !6333
  %12 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !6334
  %call9 = call %union.tree_node* @create_tmp_var(%union.tree_node* %12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0)), !dbg !6335
  store %union.tree_node* %call9, %union.tree_node** %tmp3, align 8, !dbg !6336
  %13 = load %union.tree_node*, %union.tree_node** %tmp2, align 8, !dbg !6337
  %14 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !6337
  %15 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !6337
  %call10 = call %union.tree_node* @build_int_cst(%union.tree_node* %15, i64 -1), !dbg !6337
  %call11 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 63, %union.tree_node* %13, %union.tree_node* %14, %union.tree_node* %call10), !dbg !6337
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %stmt2, align 8, !dbg !6338
  %16 = load %union.tree_node*, %union.tree_node** %tmp3, align 8, !dbg !6339
  %17 = load %union.tree_node*, %union.tree_node** %tmp2, align 8, !dbg !6339
  %18 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !6339
  %call12 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 89, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %18), !dbg !6339
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %stmt3, align 8, !dbg !6340
  %19 = load %union.tree_node*, %union.tree_node** %tmp3, align 8, !dbg !6341
  %20 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !6342
  %call13 = call %union.tree_node* @build_int_cst(%union.tree_node* %20, i64 0), !dbg !6343
  %call14 = call %union.gimple_statement_d* @gimple_build_cond(i32 102, %union.tree_node* %19, %union.tree_node* %call13, %union.tree_node* null, %union.tree_node* null), !dbg !6344
  store %union.gimple_statement_d* %call14, %union.gimple_statement_d** %stmt4, align 8, !dbg !6345
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6346
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %21, i32 1), !dbg !6347
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt3, align 8, !dbg !6348
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %22, i32 1), !dbg !6349
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt4, align 8, !dbg !6350
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %23, i32 1), !dbg !6351
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt4, align 8, !dbg !6352
  store %union.gimple_statement_d* %24, %union.gimple_statement_d** %bb1end, align 8, !dbg !6353
  %25 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6354
  %26 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6354
  %27 = load %union.tree_node*, %union.tree_node** %tmp2, align 8, !dbg !6354
  %call15 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 89, %union.tree_node* %25, %union.tree_node* %26, %union.tree_node* %27), !dbg !6354
  store %union.gimple_statement_d* %call15, %union.gimple_statement_d** %stmt1, align 8, !dbg !6355
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6356
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %28, i32 1), !dbg !6357
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6358
  store %union.gimple_statement_d* %29, %union.gimple_statement_d** %bb2end, align 8, !dbg !6359
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6360
  %call16 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %30), !dbg !6360
  %31 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6360
  %32 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6360
  %33 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !6360
  %call17 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 %call16, %union.tree_node* %31, %union.tree_node* %32, %union.tree_node* %33), !dbg !6360
  store %union.gimple_statement_d* %call17, %union.gimple_statement_d** %stmt1, align 8, !dbg !6361
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6362
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %34, i32 1), !dbg !6363
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6364
  store %union.gimple_statement_d* %35, %union.gimple_statement_d** %bb3end, align 8, !dbg !6365
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6366
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %bb1end, align 8, !dbg !6367
  %38 = bitcast %union.gimple_statement_d* %37 to i8*, !dbg !6367
  %call18 = call %struct.edge_def* @split_block(%struct.basic_block_def* %36, i8* %38), !dbg !6368
  store %struct.edge_def* %call18, %struct.edge_def** %e12, align 8, !dbg !6369
  %39 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !6370
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 1, !dbg !6371
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6371
  store %struct.basic_block_def* %40, %struct.basic_block_def** %bb2, align 8, !dbg !6372
  %41 = load i64, i64* %count.addr, align 8, !dbg !6373
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !6374
  %count19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 8, !dbg !6375
  store i64 %41, i64* %count19, align 8, !dbg !6376
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !6377
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %bb2end, align 8, !dbg !6378
  %45 = bitcast %union.gimple_statement_d* %44 to i8*, !dbg !6378
  %call20 = call %struct.edge_def* @split_block(%struct.basic_block_def* %43, i8* %45), !dbg !6379
  store %struct.edge_def* %call20, %struct.edge_def** %e23, align 8, !dbg !6380
  %46 = load %struct.edge_def*, %struct.edge_def** %e23, align 8, !dbg !6381
  %dest21 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %46, i32 0, i32 1, !dbg !6382
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %dest21, align 8, !dbg !6382
  store %struct.basic_block_def* %47, %struct.basic_block_def** %bb3, align 8, !dbg !6383
  %48 = load i64, i64* %all.addr, align 8, !dbg !6384
  %49 = load i64, i64* %count.addr, align 8, !dbg !6385
  %sub = sub nsw i64 %48, %49, !dbg !6386
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb3, align 8, !dbg !6387
  %count22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 8, !dbg !6388
  store i64 %sub, i64* %count22, align 8, !dbg !6389
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb3, align 8, !dbg !6390
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %bb3end, align 8, !dbg !6391
  %53 = bitcast %union.gimple_statement_d* %52 to i8*, !dbg !6391
  %call23 = call %struct.edge_def* @split_block(%struct.basic_block_def* %51, i8* %53), !dbg !6392
  store %struct.edge_def* %call23, %struct.edge_def** %e34, align 8, !dbg !6393
  %54 = load %struct.edge_def*, %struct.edge_def** %e34, align 8, !dbg !6394
  %dest24 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %54, i32 0, i32 1, !dbg !6395
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %dest24, align 8, !dbg !6395
  store %struct.basic_block_def* %55, %struct.basic_block_def** %bb4, align 8, !dbg !6396
  %56 = load i64, i64* %all.addr, align 8, !dbg !6397
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bb4, align 8, !dbg !6398
  %count25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 8, !dbg !6399
  store i64 %56, i64* %count25, align 8, !dbg !6400
  %58 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !6401
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %58, i32 0, i32 7, !dbg !6402
  %59 = load i32, i32* %flags, align 8, !dbg !6403
  %and = and i32 %59, -2, !dbg !6403
  store i32 %and, i32* %flags, align 8, !dbg !6403
  %60 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !6404
  %flags26 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %60, i32 0, i32 7, !dbg !6405
  %61 = load i32, i32* %flags26, align 8, !dbg !6406
  %or = or i32 %61, 2048, !dbg !6406
  store i32 %or, i32* %flags26, align 8, !dbg !6406
  %62 = load i32, i32* %prob.addr, align 4, !dbg !6407
  %63 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !6408
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %63, i32 0, i32 8, !dbg !6409
  store i32 %62, i32* %probability, align 4, !dbg !6410
  %64 = load i64, i64* %count.addr, align 8, !dbg !6411
  %65 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !6412
  %count27 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %65, i32 0, i32 9, !dbg !6413
  store i64 %64, i64* %count27, align 8, !dbg !6414
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6415
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %bb3, align 8, !dbg !6416
  %call28 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %66, %struct.basic_block_def* %67, i32 1024), !dbg !6417
  store %struct.edge_def* %call28, %struct.edge_def** %e13, align 8, !dbg !6418
  %68 = load i32, i32* %prob.addr, align 4, !dbg !6419
  %sub29 = sub nsw i32 10000, %68, !dbg !6420
  %69 = load %struct.edge_def*, %struct.edge_def** %e13, align 8, !dbg !6421
  %probability30 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %69, i32 0, i32 8, !dbg !6422
  store i32 %sub29, i32* %probability30, align 4, !dbg !6423
  %70 = load i64, i64* %all.addr, align 8, !dbg !6424
  %71 = load i64, i64* %count.addr, align 8, !dbg !6425
  %sub31 = sub nsw i64 %70, %71, !dbg !6426
  %72 = load %struct.edge_def*, %struct.edge_def** %e13, align 8, !dbg !6427
  %count32 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %72, i32 0, i32 9, !dbg !6428
  store i64 %sub31, i64* %count32, align 8, !dbg !6429
  %73 = load %struct.edge_def*, %struct.edge_def** %e23, align 8, !dbg !6430
  call void @remove_edge(%struct.edge_def* %73), !dbg !6431
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !6432
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb4, align 8, !dbg !6433
  %call33 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %74, %struct.basic_block_def* %75, i32 1), !dbg !6434
  store %struct.edge_def* %call33, %struct.edge_def** %e24, align 8, !dbg !6435
  %76 = load %struct.edge_def*, %struct.edge_def** %e24, align 8, !dbg !6436
  %probability34 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %76, i32 0, i32 8, !dbg !6437
  store i32 10000, i32* %probability34, align 4, !dbg !6438
  %77 = load i64, i64* %count.addr, align 8, !dbg !6439
  %78 = load %struct.edge_def*, %struct.edge_def** %e24, align 8, !dbg !6440
  %count35 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %78, i32 0, i32 9, !dbg !6441
  store i64 %77, i64* %count35, align 8, !dbg !6442
  %79 = load %struct.edge_def*, %struct.edge_def** %e34, align 8, !dbg !6443
  %probability36 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %79, i32 0, i32 8, !dbg !6444
  store i32 10000, i32* %probability36, align 4, !dbg !6445
  %80 = load i64, i64* %all.addr, align 8, !dbg !6446
  %81 = load i64, i64* %count.addr, align 8, !dbg !6447
  %sub37 = sub nsw i64 %80, %81, !dbg !6448
  %82 = load %struct.edge_def*, %struct.edge_def** %e34, align 8, !dbg !6449
  %count38 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %82, i32 0, i32 9, !dbg !6450
  store i64 %sub37, i64* %count38, align 8, !dbg !6451
  %83 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6452
  ret %union.tree_node* %83, !dbg !6453
}

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local i32 @get_pointer_alignment(%union.tree_node*, i32) #2

declare dso_local i32 @can_move_by_pieces(i64, i32) #2

declare dso_local i32 @can_store_by_pieces(i64, %struct.rtx_def* (i8*, i64, i32)*, i8*, i32, i8 zeroext) #2

declare dso_local %struct.rtx_def* @builtin_memset_read_str(i8*, i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_stringop_fixed_value(%union.gimple_statement_d* %vcall_stmt, %union.tree_node* %icall_size, i32 %prob, i64 %count, i64 %all) #0 !dbg !6454 {
entry:
  %vcall_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %icall_size.addr = alloca %union.tree_node*, align 8
  %prob.addr = alloca i32, align 4
  %count.addr = alloca i64, align 8
  %all.addr = alloca i64, align 8
  %tmp_stmt = alloca %union.gimple_statement_d*, align 8
  %cond_stmt = alloca %union.gimple_statement_d*, align 8
  %icall_stmt = alloca %union.gimple_statement_d*, align 8
  %tmp1 = alloca %union.tree_node*, align 8
  %tmpv = alloca %union.tree_node*, align 8
  %vcall_size = alloca %union.tree_node*, align 8
  %optype = alloca %union.tree_node*, align 8
  %cond_bb = alloca %struct.basic_block_def*, align 8
  %icall_bb = alloca %struct.basic_block_def*, align 8
  %vcall_bb = alloca %struct.basic_block_def*, align 8
  %join_bb = alloca %struct.basic_block_def*, align 8
  %e_ci = alloca %struct.edge_def*, align 8
  %e_cv = alloca %struct.edge_def*, align 8
  %e_iv = alloca %struct.edge_def*, align 8
  %e_ij = alloca %struct.edge_def*, align 8
  %e_vj = alloca %struct.edge_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %size_arg = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %vcall_stmt, %union.gimple_statement_d** %vcall_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %vcall_stmt.addr, metadata !6457, metadata !DIExpression()), !dbg !6458
  store %union.tree_node* %icall_size, %union.tree_node** %icall_size.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %icall_size.addr, metadata !6459, metadata !DIExpression()), !dbg !6460
  store i32 %prob, i32* %prob.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %prob.addr, metadata !6461, metadata !DIExpression()), !dbg !6462
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !6463, metadata !DIExpression()), !dbg !6464
  store i64 %all, i64* %all.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %all.addr, metadata !6465, metadata !DIExpression()), !dbg !6466
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %tmp_stmt, metadata !6467, metadata !DIExpression()), !dbg !6468
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond_stmt, metadata !6469, metadata !DIExpression()), !dbg !6470
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %icall_stmt, metadata !6471, metadata !DIExpression()), !dbg !6472
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp1, metadata !6473, metadata !DIExpression()), !dbg !6474
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmpv, metadata !6475, metadata !DIExpression()), !dbg !6476
  call void @llvm.dbg.declare(metadata %union.tree_node** %vcall_size, metadata !6477, metadata !DIExpression()), !dbg !6478
  call void @llvm.dbg.declare(metadata %union.tree_node** %optype, metadata !6479, metadata !DIExpression()), !dbg !6480
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %cond_bb, metadata !6481, metadata !DIExpression()), !dbg !6482
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %icall_bb, metadata !6483, metadata !DIExpression()), !dbg !6484
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %vcall_bb, metadata !6485, metadata !DIExpression()), !dbg !6486
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %join_bb, metadata !6487, metadata !DIExpression()), !dbg !6488
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_ci, metadata !6489, metadata !DIExpression()), !dbg !6490
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_cv, metadata !6491, metadata !DIExpression()), !dbg !6492
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_iv, metadata !6493, metadata !DIExpression()), !dbg !6494
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_ij, metadata !6495, metadata !DIExpression()), !dbg !6496
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_vj, metadata !6497, metadata !DIExpression()), !dbg !6498
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6499, metadata !DIExpression()), !dbg !6500
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !6501, metadata !DIExpression()), !dbg !6502
  call void @llvm.dbg.declare(metadata i32* %size_arg, metadata !6503, metadata !DIExpression()), !dbg !6504
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %vcall_stmt.addr, align 8, !dbg !6505
  %call = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %0), !dbg !6506
  store %union.tree_node* %call, %union.tree_node** %fndecl, align 8, !dbg !6507
  %1 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6508
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %vcall_stmt.addr, align 8, !dbg !6510
  %call1 = call zeroext i8 @interesting_stringop_to_profile_p(%union.tree_node* %1, %union.gimple_statement_d* %2, i32* %size_arg), !dbg !6511
  %tobool = icmp ne i8 %call1, 0, !dbg !6511
  br i1 %tobool, label %if.end, label %if.then, !dbg !6512

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 1302, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6513
  br label %if.end, !dbg !6513

if.end:                                           ; preds = %if.then, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %vcall_stmt.addr, align 8, !dbg !6514
  %call2 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %3), !dbg !6515
  store %struct.basic_block_def* %call2, %struct.basic_block_def** %cond_bb, align 8, !dbg !6516
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %vcall_stmt.addr, align 8, !dbg !6517
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %4), !dbg !6518
  %5 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6518
  %6 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6518
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 24, i1 false), !dbg !6518
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %vcall_stmt.addr, align 8, !dbg !6519
  %8 = load i32, i32* %size_arg, align 4, !dbg !6520
  %call3 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %7, i32 %8), !dbg !6521
  store %union.tree_node* %call3, %union.tree_node** %vcall_size, align 8, !dbg !6522
  %9 = load %union.tree_node*, %union.tree_node** %vcall_size, align 8, !dbg !6523
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !6523
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6523
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6523
  store %union.tree_node* %10, %union.tree_node** %optype, align 8, !dbg !6524
  %11 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !6525
  %call4 = call %union.tree_node* @create_tmp_var(%union.tree_node* %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0)), !dbg !6526
  store %union.tree_node* %call4, %union.tree_node** %tmpv, align 8, !dbg !6527
  %12 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !6528
  %call5 = call %union.tree_node* @create_tmp_var(%union.tree_node* %12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0)), !dbg !6529
  store %union.tree_node* %call5, %union.tree_node** %tmp1, align 8, !dbg !6530
  %13 = load %union.tree_node*, %union.tree_node** %tmpv, align 8, !dbg !6531
  %14 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !6531
  %15 = load %union.tree_node*, %union.tree_node** %icall_size.addr, align 8, !dbg !6531
  %call6 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %14, %union.tree_node* %15), !dbg !6531
  %call7 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %13, %union.tree_node* %call6), !dbg !6531
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %tmp_stmt, align 8, !dbg !6532
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tmp_stmt, align 8, !dbg !6533
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %16, i32 1), !dbg !6534
  %17 = load %union.tree_node*, %union.tree_node** %tmp1, align 8, !dbg !6535
  %18 = load %union.tree_node*, %union.tree_node** %vcall_size, align 8, !dbg !6535
  %call8 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %17, %union.tree_node* %18), !dbg !6535
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %tmp_stmt, align 8, !dbg !6536
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tmp_stmt, align 8, !dbg !6537
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %19, i32 1), !dbg !6538
  %20 = load %union.tree_node*, %union.tree_node** %tmp1, align 8, !dbg !6539
  %21 = load %union.tree_node*, %union.tree_node** %tmpv, align 8, !dbg !6540
  %call9 = call %union.gimple_statement_d* @gimple_build_cond(i32 101, %union.tree_node* %20, %union.tree_node* %21, %union.tree_node* null, %union.tree_node* null), !dbg !6541
  store %union.gimple_statement_d* %call9, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !6542
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !6543
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %22, i32 1), !dbg !6544
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %vcall_stmt.addr, align 8, !dbg !6545
  %call10 = call %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d* %23), !dbg !6546
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %icall_stmt, align 8, !dbg !6547
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %icall_stmt, align 8, !dbg !6548
  %25 = load i32, i32* %size_arg, align 4, !dbg !6549
  %26 = load %union.tree_node*, %union.tree_node** %icall_size.addr, align 8, !dbg !6550
  call void @gimple_call_set_arg(%union.gimple_statement_d* %24, i32 %25, %union.tree_node* %26), !dbg !6551
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %icall_stmt, align 8, !dbg !6552
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %27, i32 1), !dbg !6553
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !6554
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !6555
  %30 = bitcast %union.gimple_statement_d* %29 to i8*, !dbg !6555
  %call11 = call %struct.edge_def* @split_block(%struct.basic_block_def* %28, i8* %30), !dbg !6556
  store %struct.edge_def* %call11, %struct.edge_def** %e_ci, align 8, !dbg !6557
  %31 = load %struct.edge_def*, %struct.edge_def** %e_ci, align 8, !dbg !6558
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 1, !dbg !6559
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6559
  store %struct.basic_block_def* %32, %struct.basic_block_def** %icall_bb, align 8, !dbg !6560
  %33 = load i64, i64* %count.addr, align 8, !dbg !6561
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %icall_bb, align 8, !dbg !6562
  %count12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 8, !dbg !6563
  store i64 %33, i64* %count12, align 8, !dbg !6564
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %icall_bb, align 8, !dbg !6565
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %icall_stmt, align 8, !dbg !6566
  %37 = bitcast %union.gimple_statement_d* %36 to i8*, !dbg !6566
  %call13 = call %struct.edge_def* @split_block(%struct.basic_block_def* %35, i8* %37), !dbg !6567
  store %struct.edge_def* %call13, %struct.edge_def** %e_iv, align 8, !dbg !6568
  %38 = load %struct.edge_def*, %struct.edge_def** %e_iv, align 8, !dbg !6569
  %dest14 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i32 0, i32 1, !dbg !6570
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %dest14, align 8, !dbg !6570
  store %struct.basic_block_def* %39, %struct.basic_block_def** %vcall_bb, align 8, !dbg !6571
  %40 = load i64, i64* %all.addr, align 8, !dbg !6572
  %41 = load i64, i64* %count.addr, align 8, !dbg !6573
  %sub = sub nsw i64 %40, %41, !dbg !6574
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %vcall_bb, align 8, !dbg !6575
  %count15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 8, !dbg !6576
  store i64 %sub, i64* %count15, align 8, !dbg !6577
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %vcall_bb, align 8, !dbg !6578
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %vcall_stmt.addr, align 8, !dbg !6579
  %45 = bitcast %union.gimple_statement_d* %44 to i8*, !dbg !6579
  %call16 = call %struct.edge_def* @split_block(%struct.basic_block_def* %43, i8* %45), !dbg !6580
  store %struct.edge_def* %call16, %struct.edge_def** %e_vj, align 8, !dbg !6581
  %46 = load %struct.edge_def*, %struct.edge_def** %e_vj, align 8, !dbg !6582
  %dest17 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %46, i32 0, i32 1, !dbg !6583
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %dest17, align 8, !dbg !6583
  store %struct.basic_block_def* %47, %struct.basic_block_def** %join_bb, align 8, !dbg !6584
  %48 = load i64, i64* %all.addr, align 8, !dbg !6585
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !6586
  %count18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 8, !dbg !6587
  store i64 %48, i64* %count18, align 8, !dbg !6588
  %50 = load %struct.edge_def*, %struct.edge_def** %e_ci, align 8, !dbg !6589
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %50, i32 0, i32 7, !dbg !6590
  %51 = load i32, i32* %flags, align 8, !dbg !6590
  %and = and i32 %51, -2, !dbg !6591
  %or = or i32 %and, 1024, !dbg !6592
  %52 = load %struct.edge_def*, %struct.edge_def** %e_ci, align 8, !dbg !6593
  %flags19 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %52, i32 0, i32 7, !dbg !6594
  store i32 %or, i32* %flags19, align 8, !dbg !6595
  %53 = load i32, i32* %prob.addr, align 4, !dbg !6596
  %54 = load %struct.edge_def*, %struct.edge_def** %e_ci, align 8, !dbg !6597
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %54, i32 0, i32 8, !dbg !6598
  store i32 %53, i32* %probability, align 4, !dbg !6599
  %55 = load i64, i64* %count.addr, align 8, !dbg !6600
  %56 = load %struct.edge_def*, %struct.edge_def** %e_ci, align 8, !dbg !6601
  %count20 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %56, i32 0, i32 9, !dbg !6602
  store i64 %55, i64* %count20, align 8, !dbg !6603
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !6604
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %vcall_bb, align 8, !dbg !6605
  %call21 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %57, %struct.basic_block_def* %58, i32 2048), !dbg !6606
  store %struct.edge_def* %call21, %struct.edge_def** %e_cv, align 8, !dbg !6607
  %59 = load i32, i32* %prob.addr, align 4, !dbg !6608
  %sub22 = sub nsw i32 10000, %59, !dbg !6609
  %60 = load %struct.edge_def*, %struct.edge_def** %e_cv, align 8, !dbg !6610
  %probability23 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %60, i32 0, i32 8, !dbg !6611
  store i32 %sub22, i32* %probability23, align 4, !dbg !6612
  %61 = load i64, i64* %all.addr, align 8, !dbg !6613
  %62 = load i64, i64* %count.addr, align 8, !dbg !6614
  %sub24 = sub nsw i64 %61, %62, !dbg !6615
  %63 = load %struct.edge_def*, %struct.edge_def** %e_cv, align 8, !dbg !6616
  %count25 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %63, i32 0, i32 9, !dbg !6617
  store i64 %sub24, i64* %count25, align 8, !dbg !6618
  %64 = load %struct.edge_def*, %struct.edge_def** %e_iv, align 8, !dbg !6619
  call void @remove_edge(%struct.edge_def* %64), !dbg !6620
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %icall_bb, align 8, !dbg !6621
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !6622
  %call26 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %65, %struct.basic_block_def* %66, i32 1), !dbg !6623
  store %struct.edge_def* %call26, %struct.edge_def** %e_ij, align 8, !dbg !6624
  %67 = load %struct.edge_def*, %struct.edge_def** %e_ij, align 8, !dbg !6625
  %probability27 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %67, i32 0, i32 8, !dbg !6626
  store i32 10000, i32* %probability27, align 4, !dbg !6627
  %68 = load i64, i64* %count.addr, align 8, !dbg !6628
  %69 = load %struct.edge_def*, %struct.edge_def** %e_ij, align 8, !dbg !6629
  %count28 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %69, i32 0, i32 9, !dbg !6630
  store i64 %68, i64* %count28, align 8, !dbg !6631
  %70 = load %struct.edge_def*, %struct.edge_def** %e_vj, align 8, !dbg !6632
  %probability29 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %70, i32 0, i32 8, !dbg !6633
  store i32 10000, i32* %probability29, align 4, !dbg !6634
  %71 = load i64, i64* %all.addr, align 8, !dbg !6635
  %72 = load i64, i64* %count.addr, align 8, !dbg !6636
  %sub30 = sub nsw i64 %71, %72, !dbg !6637
  %73 = load %struct.edge_def*, %struct.edge_def** %e_vj, align 8, !dbg !6638
  %count31 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %73, i32 0, i32 9, !dbg !6639
  store i64 %sub30, i64* %count31, align 8, !dbg !6640
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %vcall_stmt.addr, align 8, !dbg !6641
  %call32 = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %74), !dbg !6641
  %tobool33 = icmp ne i8 %call32, 0, !dbg !6641
  br i1 %tobool33, label %cond.true, label %cond.false, !dbg !6641

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 1357, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6641
  br label %cond.end, !dbg !6641

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !6641

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6641
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %icall_stmt, align 8, !dbg !6642
  %call34 = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %75), !dbg !6642
  %tobool35 = icmp ne i8 %call34, 0, !dbg !6642
  br i1 %tobool35, label %cond.true36, label %cond.false37, !dbg !6642

cond.true36:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 1358, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6642
  br label %cond.end38, !dbg !6642

cond.false37:                                     ; preds = %cond.end
  br label %cond.end38, !dbg !6642

cond.end38:                                       ; preds = %cond.false37, %cond.true36
  %cond39 = phi i32 [ 0, %cond.true36 ], [ 0, %cond.false37 ], !dbg !6642
  ret void, !dbg !6643
}

declare dso_local %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_arg(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %arg) #0 !dbg !6644 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6647, metadata !DIExpression()), !dbg !6648
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6649, metadata !DIExpression()), !dbg !6650
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !6651, metadata !DIExpression()), !dbg !6652
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6653
  %1 = load i32, i32* %index.addr, align 4, !dbg !6654
  %add = add i32 %1, 3, !dbg !6655
  %2 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !6656
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 %add, %union.tree_node* %2), !dbg !6657
  ret void, !dbg !6658
}

declare dso_local zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !6659 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6660, metadata !DIExpression()), !dbg !6661
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6662, metadata !DIExpression()), !dbg !6663
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6664, metadata !DIExpression()), !dbg !6665
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6666
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6666
  %conv = zext i8 %call to i32, !dbg !6666
  %tobool = icmp ne i32 %conv, 0, !dbg !6666
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6666

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !6666
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6666
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !6666
  %cmp = icmp ult i32 %1, %call1, !dbg !6666
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6666

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6666
  br label %cond.end, !dbg !6666

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6666

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6666
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6667
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6668
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !6669
  %5 = load i32, i32* %i.addr, align 4, !dbg !6670
  %idxprom = zext i32 %5 to i64, !dbg !6669
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !6669
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !6671
  ret void, !dbg !6672
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cgraph_node* @find_func_by_pid(i32 %pid) #0 !dbg !6673 {
entry:
  %pid.addr = alloca i32, align 4
  store i32 %pid, i32* %pid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pid.addr, metadata !6676, metadata !DIExpression()), !dbg !6677
  call void @init_pid_map(), !dbg !6678
  %0 = load %struct.cgraph_node**, %struct.cgraph_node*** @pid_map, align 8, !dbg !6679
  %1 = load i32, i32* %pid.addr, align 4, !dbg !6680
  %idxprom = sext i32 %1 to i64, !dbg !6679
  %arrayidx = getelementptr inbounds %struct.cgraph_node*, %struct.cgraph_node** %0, i64 %idxprom, !dbg !6679
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %arrayidx, align 8, !dbg !6679
  ret %struct.cgraph_node* %2, !dbg !6681
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gimple_ic(%union.gimple_statement_d* %icall_stmt, %struct.cgraph_node* %direct_call, i32 %prob, i64 %count, i64 %all) #0 !dbg !6682 {
entry:
  %icall_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %direct_call.addr = alloca %struct.cgraph_node*, align 8
  %prob.addr = alloca i32, align 4
  %count.addr = alloca i64, align 8
  %all.addr = alloca i64, align 8
  %dcall_stmt = alloca %union.gimple_statement_d*, align 8
  %load_stmt = alloca %union.gimple_statement_d*, align 8
  %cond_stmt = alloca %union.gimple_statement_d*, align 8
  %tmp1 = alloca %union.tree_node*, align 8
  %tmpv = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %cond_bb = alloca %struct.basic_block_def*, align 8
  %dcall_bb = alloca %struct.basic_block_def*, align 8
  %icall_bb = alloca %struct.basic_block_def*, align 8
  %join_bb = alloca %struct.basic_block_def*, align 8
  %optype = alloca %union.tree_node*, align 8
  %e_cd = alloca %struct.edge_def*, align 8
  %e_ci = alloca %struct.edge_def*, align 8
  %e_di = alloca %struct.edge_def*, align 8
  %e_dj = alloca %struct.edge_def*, align 8
  %e_ij = alloca %struct.edge_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %lp_nr = alloca i32, align 4
  %tmp2 = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %icall_stmt, %union.gimple_statement_d** %icall_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %icall_stmt.addr, metadata !6685, metadata !DIExpression()), !dbg !6686
  store %struct.cgraph_node* %direct_call, %struct.cgraph_node** %direct_call.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %direct_call.addr, metadata !6687, metadata !DIExpression()), !dbg !6688
  store i32 %prob, i32* %prob.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %prob.addr, metadata !6689, metadata !DIExpression()), !dbg !6690
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !6691, metadata !DIExpression()), !dbg !6692
  store i64 %all, i64* %all.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %all.addr, metadata !6693, metadata !DIExpression()), !dbg !6694
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dcall_stmt, metadata !6695, metadata !DIExpression()), !dbg !6696
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %load_stmt, metadata !6697, metadata !DIExpression()), !dbg !6698
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond_stmt, metadata !6699, metadata !DIExpression()), !dbg !6700
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp1, metadata !6701, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmpv, metadata !6703, metadata !DIExpression()), !dbg !6704
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !6705, metadata !DIExpression()), !dbg !6706
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %cond_bb, metadata !6707, metadata !DIExpression()), !dbg !6708
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dcall_bb, metadata !6709, metadata !DIExpression()), !dbg !6710
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %icall_bb, metadata !6711, metadata !DIExpression()), !dbg !6712
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %join_bb, metadata !6713, metadata !DIExpression()), !dbg !6714
  call void @llvm.dbg.declare(metadata %union.tree_node** %optype, metadata !6715, metadata !DIExpression()), !dbg !6716
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !6717
  %call = call %union.tree_node* @build_pointer_type(%union.tree_node* %0), !dbg !6718
  store %union.tree_node* %call, %union.tree_node** %optype, align 8, !dbg !6716
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_cd, metadata !6719, metadata !DIExpression()), !dbg !6720
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_ci, metadata !6721, metadata !DIExpression()), !dbg !6722
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_di, metadata !6723, metadata !DIExpression()), !dbg !6724
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_dj, metadata !6725, metadata !DIExpression()), !dbg !6726
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_ij, metadata !6727, metadata !DIExpression()), !dbg !6728
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6729, metadata !DIExpression()), !dbg !6730
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !6731, metadata !DIExpression()), !dbg !6732
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %icall_stmt.addr, align 8, !dbg !6733
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %1), !dbg !6734
  store %struct.basic_block_def* %call1, %struct.basic_block_def** %cond_bb, align 8, !dbg !6735
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %icall_stmt.addr, align 8, !dbg !6736
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp2, %union.gimple_statement_d* %2), !dbg !6737
  %3 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6737
  %4 = bitcast %struct.gimple_stmt_iterator* %tmp2 to i8*, !dbg !6737
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !6737
  %5 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !6738
  %call3 = call %union.tree_node* @create_tmp_var(%union.tree_node* %5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0)), !dbg !6739
  store %union.tree_node* %call3, %union.tree_node** %tmpv, align 8, !dbg !6740
  %6 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !6741
  %call4 = call %union.tree_node* @create_tmp_var(%union.tree_node* %6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0)), !dbg !6742
  store %union.tree_node* %call4, %union.tree_node** %tmp1, align 8, !dbg !6743
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %icall_stmt.addr, align 8, !dbg !6744
  %call5 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %7), !dbg !6745
  %call6 = call %union.tree_node* @unshare_expr(%union.tree_node* %call5), !dbg !6746
  store %union.tree_node* %call6, %union.tree_node** %tmp, align 8, !dbg !6747
  %8 = load %union.tree_node*, %union.tree_node** %tmpv, align 8, !dbg !6748
  %9 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !6748
  %call7 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %8, %union.tree_node* %9), !dbg !6748
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %load_stmt, align 8, !dbg !6749
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %load_stmt, align 8, !dbg !6750
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %10, i32 1), !dbg !6751
  %11 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !6752
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %direct_call.addr, align 8, !dbg !6752
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 0, !dbg !6752
  %13 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6752
  %14 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6752
  %call8 = call %union.tree_node* @build_addr(%union.tree_node* %13, %union.tree_node* %14), !dbg !6752
  %call9 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %11, %union.tree_node* %call8), !dbg !6752
  store %union.tree_node* %call9, %union.tree_node** %tmp, align 8, !dbg !6753
  %15 = load %union.tree_node*, %union.tree_node** %tmp1, align 8, !dbg !6754
  %16 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !6754
  %call10 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %15, %union.tree_node* %16), !dbg !6754
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %load_stmt, align 8, !dbg !6755
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %load_stmt, align 8, !dbg !6756
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %17, i32 1), !dbg !6757
  %18 = load %union.tree_node*, %union.tree_node** %tmp1, align 8, !dbg !6758
  %19 = load %union.tree_node*, %union.tree_node** %tmpv, align 8, !dbg !6759
  %call11 = call %union.gimple_statement_d* @gimple_build_cond(i32 101, %union.tree_node* %18, %union.tree_node* %19, %union.tree_node* null, %union.tree_node* null), !dbg !6760
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !6761
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !6762
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %20, i32 1), !dbg !6763
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %icall_stmt.addr, align 8, !dbg !6764
  %call12 = call %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d* %21), !dbg !6765
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %dcall_stmt, align 8, !dbg !6766
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dcall_stmt, align 8, !dbg !6767
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %direct_call.addr, align 8, !dbg !6768
  %decl13 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %23, i32 0, i32 0, !dbg !6769
  %24 = load %union.tree_node*, %union.tree_node** %decl13, align 8, !dbg !6769
  call void @gimple_call_set_fndecl(%union.gimple_statement_d* %22, %union.tree_node* %24), !dbg !6770
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dcall_stmt, align 8, !dbg !6771
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %25, i32 1), !dbg !6772
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !6773
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !6774
  %28 = bitcast %union.gimple_statement_d* %27 to i8*, !dbg !6774
  %call14 = call %struct.edge_def* @split_block(%struct.basic_block_def* %26, i8* %28), !dbg !6775
  store %struct.edge_def* %call14, %struct.edge_def** %e_cd, align 8, !dbg !6776
  %29 = load %struct.edge_def*, %struct.edge_def** %e_cd, align 8, !dbg !6777
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %29, i32 0, i32 1, !dbg !6778
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6778
  store %struct.basic_block_def* %30, %struct.basic_block_def** %dcall_bb, align 8, !dbg !6779
  %31 = load i64, i64* %count.addr, align 8, !dbg !6780
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %dcall_bb, align 8, !dbg !6781
  %count15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 8, !dbg !6782
  store i64 %31, i64* %count15, align 8, !dbg !6783
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %dcall_bb, align 8, !dbg !6784
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dcall_stmt, align 8, !dbg !6785
  %35 = bitcast %union.gimple_statement_d* %34 to i8*, !dbg !6785
  %call16 = call %struct.edge_def* @split_block(%struct.basic_block_def* %33, i8* %35), !dbg !6786
  store %struct.edge_def* %call16, %struct.edge_def** %e_di, align 8, !dbg !6787
  %36 = load %struct.edge_def*, %struct.edge_def** %e_di, align 8, !dbg !6788
  %dest17 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %36, i32 0, i32 1, !dbg !6789
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %dest17, align 8, !dbg !6789
  store %struct.basic_block_def* %37, %struct.basic_block_def** %icall_bb, align 8, !dbg !6790
  %38 = load i64, i64* %all.addr, align 8, !dbg !6791
  %39 = load i64, i64* %count.addr, align 8, !dbg !6792
  %sub = sub nsw i64 %38, %39, !dbg !6793
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %icall_bb, align 8, !dbg !6794
  %count18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 8, !dbg !6795
  store i64 %sub, i64* %count18, align 8, !dbg !6796
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %icall_bb, align 8, !dbg !6797
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %icall_stmt.addr, align 8, !dbg !6798
  %43 = bitcast %union.gimple_statement_d* %42 to i8*, !dbg !6798
  %call19 = call %struct.edge_def* @split_block(%struct.basic_block_def* %41, i8* %43), !dbg !6799
  store %struct.edge_def* %call19, %struct.edge_def** %e_ij, align 8, !dbg !6800
  %44 = load %struct.edge_def*, %struct.edge_def** %e_ij, align 8, !dbg !6801
  %dest20 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %44, i32 0, i32 1, !dbg !6802
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %dest20, align 8, !dbg !6802
  store %struct.basic_block_def* %45, %struct.basic_block_def** %join_bb, align 8, !dbg !6803
  %46 = load i64, i64* %all.addr, align 8, !dbg !6804
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !6805
  %count21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 8, !dbg !6806
  store i64 %46, i64* %count21, align 8, !dbg !6807
  %48 = load %struct.edge_def*, %struct.edge_def** %e_cd, align 8, !dbg !6808
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %48, i32 0, i32 7, !dbg !6809
  %49 = load i32, i32* %flags, align 8, !dbg !6809
  %and = and i32 %49, -2, !dbg !6810
  %or = or i32 %and, 1024, !dbg !6811
  %50 = load %struct.edge_def*, %struct.edge_def** %e_cd, align 8, !dbg !6812
  %flags22 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %50, i32 0, i32 7, !dbg !6813
  store i32 %or, i32* %flags22, align 8, !dbg !6814
  %51 = load i32, i32* %prob.addr, align 4, !dbg !6815
  %52 = load %struct.edge_def*, %struct.edge_def** %e_cd, align 8, !dbg !6816
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %52, i32 0, i32 8, !dbg !6817
  store i32 %51, i32* %probability, align 4, !dbg !6818
  %53 = load i64, i64* %count.addr, align 8, !dbg !6819
  %54 = load %struct.edge_def*, %struct.edge_def** %e_cd, align 8, !dbg !6820
  %count23 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %54, i32 0, i32 9, !dbg !6821
  store i64 %53, i64* %count23, align 8, !dbg !6822
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !6823
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %icall_bb, align 8, !dbg !6824
  %call24 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %55, %struct.basic_block_def* %56, i32 2048), !dbg !6825
  store %struct.edge_def* %call24, %struct.edge_def** %e_ci, align 8, !dbg !6826
  %57 = load i32, i32* %prob.addr, align 4, !dbg !6827
  %sub25 = sub nsw i32 10000, %57, !dbg !6828
  %58 = load %struct.edge_def*, %struct.edge_def** %e_ci, align 8, !dbg !6829
  %probability26 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %58, i32 0, i32 8, !dbg !6830
  store i32 %sub25, i32* %probability26, align 4, !dbg !6831
  %59 = load i64, i64* %all.addr, align 8, !dbg !6832
  %60 = load i64, i64* %count.addr, align 8, !dbg !6833
  %sub27 = sub nsw i64 %59, %60, !dbg !6834
  %61 = load %struct.edge_def*, %struct.edge_def** %e_ci, align 8, !dbg !6835
  %count28 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %61, i32 0, i32 9, !dbg !6836
  store i64 %sub27, i64* %count28, align 8, !dbg !6837
  %62 = load %struct.edge_def*, %struct.edge_def** %e_di, align 8, !dbg !6838
  call void @remove_edge(%struct.edge_def* %62), !dbg !6839
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %dcall_bb, align 8, !dbg !6840
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !6841
  %call29 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %63, %struct.basic_block_def* %64, i32 1), !dbg !6842
  store %struct.edge_def* %call29, %struct.edge_def** %e_dj, align 8, !dbg !6843
  %65 = load %struct.edge_def*, %struct.edge_def** %e_dj, align 8, !dbg !6844
  %probability30 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %65, i32 0, i32 8, !dbg !6845
  store i32 10000, i32* %probability30, align 4, !dbg !6846
  %66 = load i64, i64* %count.addr, align 8, !dbg !6847
  %67 = load %struct.edge_def*, %struct.edge_def** %e_dj, align 8, !dbg !6848
  %count31 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %67, i32 0, i32 9, !dbg !6849
  store i64 %66, i64* %count31, align 8, !dbg !6850
  %68 = load %struct.edge_def*, %struct.edge_def** %e_ij, align 8, !dbg !6851
  %probability32 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %68, i32 0, i32 8, !dbg !6852
  store i32 10000, i32* %probability32, align 4, !dbg !6853
  %69 = load i64, i64* %all.addr, align 8, !dbg !6854
  %70 = load i64, i64* %count.addr, align 8, !dbg !6855
  %sub33 = sub nsw i64 %69, %70, !dbg !6856
  %71 = load %struct.edge_def*, %struct.edge_def** %e_ij, align 8, !dbg !6857
  %count34 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %71, i32 0, i32 9, !dbg !6858
  store i64 %sub33, i64* %count34, align 8, !dbg !6859
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %icall_stmt.addr, align 8, !dbg !6860
  %call35 = call i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %72), !dbg !6861
  store i32 %call35, i32* %lp_nr, align 4, !dbg !6862
  %73 = load i32, i32* %lp_nr, align 4, !dbg !6863
  %cmp = icmp ne i32 %73, 0, !dbg !6865
  br i1 %cmp, label %if.then, label %if.end41, !dbg !6866

if.then:                                          ; preds = %entry
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dcall_stmt, align 8, !dbg !6867
  %call36 = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %74), !dbg !6870
  %tobool = icmp ne i8 %call36, 0, !dbg !6870
  br i1 %tobool, label %if.then37, label %if.end, !dbg !6871

if.then37:                                        ; preds = %if.then
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dcall_stmt, align 8, !dbg !6872
  %76 = load i32, i32* %lp_nr, align 4, !dbg !6874
  call void @add_stmt_to_eh_lp(%union.gimple_statement_d* %75, i32 %76), !dbg !6875
  %77 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dcall_stmt, align 8, !dbg !6876
  call void @make_eh_edges(%union.gimple_statement_d* %77), !dbg !6877
  br label %if.end, !dbg !6878

if.end:                                           ; preds = %if.then37, %if.then
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %icall_stmt.addr, align 8, !dbg !6879
  %call38 = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %78), !dbg !6879
  %tobool39 = icmp ne i8 %call38, 0, !dbg !6879
  br i1 %tobool39, label %cond.false, label %cond.true, !dbg !6879

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 1162, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6879
  br label %cond.end, !dbg !6879

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !6879

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6879
  %79 = load %union.gimple_statement_d*, %union.gimple_statement_d** %icall_stmt.addr, align 8, !dbg !6880
  call void @make_eh_edges(%union.gimple_statement_d* %79), !dbg !6881
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !6882
  %call40 = call zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def* %80), !dbg !6883
  br label %if.end41, !dbg !6884

if.end41:                                         ; preds = %cond.end, %entry
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dcall_stmt, align 8, !dbg !6885
  ret %union.gimple_statement_d* %81, !dbg !6886
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_pid_map() #0 !dbg !6887 {
entry:
  %n = alloca %struct.cgraph_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n, metadata !6888, metadata !DIExpression()), !dbg !6889
  %0 = load %struct.cgraph_node**, %struct.cgraph_node*** @pid_map, align 8, !dbg !6890
  %cmp = icmp ne %struct.cgraph_node** %0, null, !dbg !6892
  br i1 %cmp, label %if.then, label %if.end, !dbg !6893

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !6894

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @cgraph_max_pid, align 4, !dbg !6895
  %conv = sext i32 %1 to i64, !dbg !6895
  %call = call i8* @xcalloc(i64 %conv, i64 8), !dbg !6895
  %2 = bitcast i8* %call to %struct.cgraph_node**, !dbg !6895
  store %struct.cgraph_node** %2, %struct.cgraph_node*** @pid_map, align 8, !dbg !6896
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !6897
  store %struct.cgraph_node* %3, %struct.cgraph_node** %n, align 8, !dbg !6899
  br label %for.cond, !dbg !6900

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6901
  %tobool = icmp ne %struct.cgraph_node* %4, null, !dbg !6903
  br i1 %tobool, label %for.body, label %for.end, !dbg !6903

for.body:                                         ; preds = %for.cond
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6904
  %pid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 26, !dbg !6907
  %6 = load i32, i32* %pid, align 8, !dbg !6907
  %cmp1 = icmp ne i32 %6, -1, !dbg !6908
  br i1 %cmp1, label %if.then3, label %if.end5, !dbg !6909

if.then3:                                         ; preds = %for.body
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6910
  %8 = load %struct.cgraph_node**, %struct.cgraph_node*** @pid_map, align 8, !dbg !6911
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6912
  %pid4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 26, !dbg !6913
  %10 = load i32, i32* %pid4, align 8, !dbg !6913
  %idxprom = sext i32 %10 to i64, !dbg !6911
  %arrayidx = getelementptr inbounds %struct.cgraph_node*, %struct.cgraph_node** %8, i64 %idxprom, !dbg !6911
  store %struct.cgraph_node* %7, %struct.cgraph_node** %arrayidx, align 8, !dbg !6914
  br label %if.end5, !dbg !6911

if.end5:                                          ; preds = %if.then3, %for.body
  br label %for.inc, !dbg !6915

for.inc:                                          ; preds = %if.end5
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6916
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 3, !dbg !6917
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !6917
  store %struct.cgraph_node* %12, %struct.cgraph_node** %n, align 8, !dbg !6918
  br label %for.cond, !dbg !6919, !llvm.loop !6920

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !6922
}

declare dso_local %union.tree_node* @build_pointer_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_addr(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_fndecl(%union.gimple_statement_d* %gs, %union.tree_node* %decl) #0 !dbg !6923 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6926, metadata !DIExpression()), !dbg !6927
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6928, metadata !DIExpression()), !dbg !6929
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6930
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6931
  %call = call i32 @gimple_location(%union.gimple_statement_d* %1), !dbg !6932
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6933
  %call1 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %call, %union.tree_node* %2), !dbg !6934
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %call1), !dbg !6935
  ret void, !dbg !6936
}

declare dso_local i32 @lookup_stmt_eh_lp(%union.gimple_statement_d*) #2

declare dso_local void @add_stmt_to_eh_lp(%union.gimple_statement_d*, i32) #2

declare dso_local void @make_eh_edges(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def*) #2

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3171, !3172, !3173}
!llvm.ident = !{!3174}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "error_found", scope: !2, file: !3, line: 364, type: !1676, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1548, globals: !3154, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "value-prof.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !335, !340, !345, !363, !370, !377, !387, !393, !398, !412, !451, !477, !483, !1203, !1208, !1342, !1365, !1372}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !330, line: 363, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334}
!332 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!335 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !330, line: 355, baseType: !7, size: 32, elements: !336)
!336 = !{!337, !338, !339}
!337 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!338 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!339 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!340 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !341, line: 474, baseType: !7, size: 32, elements: !342)
!341 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!342 = !{!343, !344}
!343 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!344 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!345 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !346)
!346 = !{!347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362}
!347 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!363 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !364)
!364 = !{!365, !366, !367, !368, !369}
!365 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!370 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !371)
!371 = !{!372, !373, !374, !375, !376}
!372 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "hist_type", file: !378, line: 24, baseType: !7, size: 32, elements: !379)
!378 = !DIFile(filename: "./value-prof.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!379 = !{!380, !381, !382, !383, !384, !385, !386}
!380 = !DIEnumerator(name: "HIST_TYPE_INTERVAL", value: 0, isUnsigned: true)
!381 = !DIEnumerator(name: "HIST_TYPE_POW2", value: 1, isUnsigned: true)
!382 = !DIEnumerator(name: "HIST_TYPE_SINGLE_VALUE", value: 2, isUnsigned: true)
!383 = !DIEnumerator(name: "HIST_TYPE_CONST_DELTA", value: 3, isUnsigned: true)
!384 = !DIEnumerator(name: "HIST_TYPE_INDIR_CALL", value: 4, isUnsigned: true)
!385 = !DIEnumerator(name: "HIST_TYPE_AVERAGE", value: 5, isUnsigned: true)
!386 = !DIEnumerator(name: "HIST_TYPE_IOR", value: 6, isUnsigned: true)
!387 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ir_type", file: !388, line: 80, baseType: !7, size: 32, elements: !389)
!388 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!389 = !{!390, !391, !392}
!390 = !DIEnumerator(name: "IR_GIMPLE", value: 0, isUnsigned: true)
!391 = !DIEnumerator(name: "IR_RTL_CFGRTL", value: 1, isUnsigned: true)
!392 = !DIEnumerator(name: "IR_RTL_CFGLAYOUT", value: 2, isUnsigned: true)
!393 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !394, line: 147, baseType: !7, size: 32, elements: !395)
!394 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!395 = !{!396, !397}
!396 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!397 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!398 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !330, line: 295, baseType: !7, size: 32, elements: !399)
!399 = !{!400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411}
!400 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!401 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!402 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!403 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!404 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!405 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!406 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!407 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!408 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!409 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!410 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!411 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!412 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !413, line: 51, baseType: !7, size: 32, elements: !414)
!413 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!414 = !{!415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450}
!415 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!416 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!417 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!418 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!419 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!420 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!421 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!422 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!423 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!424 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!425 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!426 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!427 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!428 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!429 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!430 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!431 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!432 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!433 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!434 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!435 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!436 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!437 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!438 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!439 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!440 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!441 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!442 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!443 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!444 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!445 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!446 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!447 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!448 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!449 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!450 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!451 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !413, line: 727, baseType: !7, size: 32, elements: !452)
!452 = !{!453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476}
!453 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!454 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!455 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!456 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!457 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!458 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!459 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!460 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!461 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!462 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!463 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!464 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!465 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!466 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!467 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!468 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!469 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!470 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!471 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!472 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!473 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!474 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!475 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!476 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!477 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !413, line: 80, baseType: !7, size: 32, elements: !478)
!478 = !{!479, !480, !481, !482}
!479 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!480 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!481 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!482 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!483 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !135, line: 220, baseType: !7, size: 32, elements: !484)
!484 = !{!485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202}
!485 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!486 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!487 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!488 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!489 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!490 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!491 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!492 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!493 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!494 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!495 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!496 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!497 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!498 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!499 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!500 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!501 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!502 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!503 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!504 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!505 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!506 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!507 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!508 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!509 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!510 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!511 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!512 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!513 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!514 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!515 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!516 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!517 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!518 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!519 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!520 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!521 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!522 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!523 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!524 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!525 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!526 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!527 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!528 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!529 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!530 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!531 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!532 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!533 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!534 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!535 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!536 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!537 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!538 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!539 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!540 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!541 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!542 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!543 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!544 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!545 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!546 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!547 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!548 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!549 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!550 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!551 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!552 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!553 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!554 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!555 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!556 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!557 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!558 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!559 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!560 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!561 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!562 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!563 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!564 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!565 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!566 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!567 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!568 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!569 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!570 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!571 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!572 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!573 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!574 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!575 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!576 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!577 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!578 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!579 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!580 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!581 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!582 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!583 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!584 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!585 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!586 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!587 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!588 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!589 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!590 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!591 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!592 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!593 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!594 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!595 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!596 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!597 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!598 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!599 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!600 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!601 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!602 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!603 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!604 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!605 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!606 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!607 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!608 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!609 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!610 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!611 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!612 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!613 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!614 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!615 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!616 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!617 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!618 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!619 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!620 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!621 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!622 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!623 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!624 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!625 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!626 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!627 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!628 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!629 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!630 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!631 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!632 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!633 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!634 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!635 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!636 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!637 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!638 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!639 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!640 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!641 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!642 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!643 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!644 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!645 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!646 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!647 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!648 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!649 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!650 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!651 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!652 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!653 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!654 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!655 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!656 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!657 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!658 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!659 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!660 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!661 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!662 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!663 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!664 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!665 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!666 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!667 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!668 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!669 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!670 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!671 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!672 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!673 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!674 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!675 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!676 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!677 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!678 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!679 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!680 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!681 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!682 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!683 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!684 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!685 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!686 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!687 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!688 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!689 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!690 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!691 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!692 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!693 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!694 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!695 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!696 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!697 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!698 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!699 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!700 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!701 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!702 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!703 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!704 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!705 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!706 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!707 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!708 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!709 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!710 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!711 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!712 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!713 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!714 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!715 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!716 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!717 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!718 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!719 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!720 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!721 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!722 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!723 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!724 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!725 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!726 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!727 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!728 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!729 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!730 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!731 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!732 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!733 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!734 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!735 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!736 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!737 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!738 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!739 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!740 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!741 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!742 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!743 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!744 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!745 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!746 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!747 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!748 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!749 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!750 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!751 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!752 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!753 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!754 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!755 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!756 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!757 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!758 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!759 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!760 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!761 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!762 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!763 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!764 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!765 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!766 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!767 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!768 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!769 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1202 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1203 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !413, line: 4603, baseType: !7, size: 32, elements: !1204)
!1204 = !{!1205, !1206, !1207}
!1205 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!1206 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!1207 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!1208 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !1209)
!1209 = !{!1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341}
!1210 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!1211 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!1212 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!1213 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!1214 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!1215 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!1216 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!1217 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!1218 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!1219 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!1220 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!1221 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!1222 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!1223 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!1224 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!1225 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!1226 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!1227 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!1228 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!1229 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!1230 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!1231 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!1232 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!1233 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!1234 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!1235 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!1236 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!1237 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!1238 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!1239 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!1240 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!1241 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!1242 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!1243 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!1244 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!1245 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!1246 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!1247 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!1248 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!1249 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!1250 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!1251 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!1252 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!1253 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!1254 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!1255 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!1256 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!1257 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!1258 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!1259 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!1260 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!1261 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!1262 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!1263 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!1264 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!1265 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!1266 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!1267 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!1268 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!1269 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!1270 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!1271 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!1272 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!1273 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!1274 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!1275 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!1276 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!1277 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!1278 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!1279 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!1280 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!1281 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!1282 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!1283 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!1284 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!1285 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!1286 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!1287 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!1288 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!1289 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!1290 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!1291 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!1292 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!1293 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!1294 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!1295 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!1296 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!1297 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!1298 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!1299 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!1300 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!1301 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!1302 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!1303 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!1304 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!1305 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!1306 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!1307 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!1308 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!1309 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!1310 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!1311 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!1312 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!1313 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!1314 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!1315 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!1316 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!1317 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!1318 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!1319 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!1320 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!1321 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!1322 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!1323 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!1324 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!1325 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!1326 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!1327 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!1328 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!1329 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!1330 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!1331 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!1332 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!1333 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!1334 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!1335 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!1336 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!1337 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!1338 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!1339 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!1340 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!1341 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!1342 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1343, line: 309, baseType: !7, size: 32, elements: !1344)
!1343 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1344 = !{!1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364}
!1345 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!1346 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!1347 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!1348 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!1349 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!1350 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!1351 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!1352 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!1353 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!1354 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!1355 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!1356 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!1357 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!1358 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!1359 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!1360 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!1361 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!1362 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!1363 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!1364 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!1365 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !1366, line: 104, baseType: !7, size: 32, elements: !1367)
!1366 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1367 = !{!1368, !1369, !1370, !1371}
!1368 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!1369 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!1370 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!1371 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!1372 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1373, line: 74, baseType: !7, size: 32, elements: !1374)
!1373 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1374 = !{!1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547}
!1375 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!1376 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!1377 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!1378 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!1379 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!1380 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!1381 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!1382 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!1383 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!1384 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!1385 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!1386 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!1387 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!1388 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!1389 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!1390 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!1391 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!1392 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!1393 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!1394 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!1395 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!1396 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!1397 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!1398 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!1399 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!1400 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!1401 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!1402 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!1403 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!1404 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!1405 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!1406 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!1407 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!1408 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!1409 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!1410 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!1411 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!1412 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!1413 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!1414 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!1415 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!1416 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!1417 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!1418 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!1419 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!1420 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!1421 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!1422 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!1423 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!1424 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!1425 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!1426 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!1427 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!1428 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!1429 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!1430 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!1431 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!1432 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!1433 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!1434 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!1435 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!1436 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!1437 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!1438 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!1439 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!1440 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!1441 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!1442 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!1443 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!1444 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!1445 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!1446 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!1447 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!1448 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!1449 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!1450 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!1451 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!1452 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!1453 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!1454 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!1455 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!1456 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!1457 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!1458 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!1459 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!1460 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!1461 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!1462 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!1463 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!1464 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!1465 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!1466 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!1467 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!1468 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!1469 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!1470 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!1471 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!1472 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!1473 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!1474 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!1475 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!1476 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!1477 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!1478 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!1479 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!1480 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!1481 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!1482 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!1483 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!1484 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!1485 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!1486 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!1487 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!1488 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!1489 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!1490 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!1491 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!1492 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!1493 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!1494 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!1495 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!1496 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!1497 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!1498 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!1499 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!1500 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!1501 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!1502 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!1503 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!1504 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!1505 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!1506 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!1507 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!1508 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!1509 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!1510 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!1511 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!1512 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!1513 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!1514 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!1515 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!1516 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!1517 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!1518 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!1519 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!1520 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!1521 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!1522 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!1523 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!1524 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!1525 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!1526 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!1527 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!1528 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!1529 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!1530 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!1531 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!1532 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!1533 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!1534 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!1535 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!1536 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!1537 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!1538 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!1539 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!1540 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!1541 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!1542 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!1543 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!1544 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!1545 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!1546 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!1547 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!1548 = !{!1549, !1840, !2891, !2903, !2906, !1612, !2909, !2911, !134, !1888, !2907, !1557, !1922, !1825, !477, !1653, !2912, !7, !1610, !1686, !2924}
!1549 = !DIDerivedType(tag: DW_TAG_typedef, name: "histogram_value", file: !378, line: 65, baseType: !1550)
!1550 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1551, size: 64)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "histogram_value_t", file: !378, line: 44, size: 384, elements: !1552)
!1552 = !{!1553, !2893, !2894, !2895}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "hvalue", scope: !1551, file: !378, line: 52, baseType: !1554, size: 256)
!1554 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1551, file: !378, line: 46, size: 256, elements: !1555)
!1555 = !{!1556, !2889, !2890, !2892}
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1554, file: !378, line: 48, baseType: !1557, size: 64)
!1557 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !388, line: 56, baseType: !1558)
!1558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1559, size: 64)
!1559 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !1560)
!1560 = !{!1561, !1594, !1600, !1613, !1632, !1643, !1648, !1659, !1665, !1679, !1691, !1729, !2225, !2253, !2270, !2271, !2276, !2285, !2291, !2296, !2300, !2304, !2540, !2587, !2593, !2599, !2606, !2619, !2633, !2650, !2662, !2684, !2699, !2871}
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1559, file: !135, line: 3372, baseType: !1562, size: 64)
!1562 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !1563)
!1563 = !{!1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593}
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1562, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1562, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1562, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1562, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1562, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1562, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1562, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1562, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1562, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1562, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1562, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1562, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1562, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1562, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1562, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1562, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1562, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1562, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1562, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1562, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1562, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1562, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1562, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1562, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1562, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1562, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1562, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1562, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1562, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1562, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1559, file: !135, line: 3373, baseType: !1595, size: 192)
!1595 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !1596)
!1596 = !{!1597, !1598, !1599}
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1595, file: !135, line: 403, baseType: !1562, size: 64)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1595, file: !135, line: 404, baseType: !1557, size: 64, offset: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1595, file: !135, line: 405, baseType: !1557, size: 64, offset: 128)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1559, file: !135, line: 3374, baseType: !1601, size: 320)
!1601 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !1602)
!1602 = !{!1603, !1604}
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1601, file: !135, line: 1385, baseType: !1595, size: 192)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1601, file: !135, line: 1386, baseType: !1605, size: 128, offset: 192)
!1605 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1606, line: 58, baseType: !1607)
!1606 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1607 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1606, line: 54, size: 128, elements: !1608)
!1608 = !{!1609, !1611}
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1607, file: !1606, line: 56, baseType: !1610, size: 64)
!1610 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1607, file: !1606, line: 57, baseType: !1612, size: 64, offset: 64)
!1612 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1559, file: !135, line: 3375, baseType: !1614, size: 256)
!1614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !1615)
!1615 = !{!1616, !1617}
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1614, file: !135, line: 1398, baseType: !1595, size: 192)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1614, file: !135, line: 1399, baseType: !1618, size: 64, offset: 192)
!1618 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1619, size: 64)
!1619 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1620, line: 52, size: 256, elements: !1621)
!1620 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1621 = !{!1622, !1623, !1624, !1625, !1626, !1627, !1628}
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1619, file: !1620, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1619, file: !1620, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1619, file: !1620, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1619, file: !1620, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1619, file: !1620, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1619, file: !1620, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1619, file: !1620, line: 62, baseType: !1629, size: 192, offset: 64)
!1629 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1610, size: 192, elements: !1630)
!1630 = !{!1631}
!1631 = !DISubrange(count: 3)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1559, file: !135, line: 3376, baseType: !1633, size: 256)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !1634)
!1634 = !{!1635, !1636}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1633, file: !135, line: 1409, baseType: !1595, size: 192)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1633, file: !135, line: 1410, baseType: !1637, size: 64, offset: 192)
!1637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1638, size: 64)
!1638 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1639, line: 27, size: 192, elements: !1640)
!1639 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1640 = !{!1641, !1642}
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1638, file: !1639, line: 29, baseType: !1605, size: 128)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1638, file: !1639, line: 30, baseType: !5, size: 32, offset: 128)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1559, file: !135, line: 3377, baseType: !1644, size: 256)
!1644 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !1645)
!1645 = !{!1646, !1647}
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1644, file: !135, line: 1438, baseType: !1595, size: 192)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1644, file: !135, line: 1439, baseType: !1557, size: 64, offset: 192)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1559, file: !135, line: 3378, baseType: !1649, size: 256)
!1649 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !1650)
!1650 = !{!1651, !1652, !1654}
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1649, file: !135, line: 1419, baseType: !1595, size: 192)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1649, file: !135, line: 1420, baseType: !1653, size: 32, offset: 192)
!1653 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1649, file: !135, line: 1421, baseType: !1655, size: 8, offset: 224)
!1655 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1656, size: 8, elements: !1657)
!1656 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1657 = !{!1658}
!1658 = !DISubrange(count: 1)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1559, file: !135, line: 3379, baseType: !1660, size: 320)
!1660 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !1661)
!1661 = !{!1662, !1663, !1664}
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1660, file: !135, line: 1429, baseType: !1595, size: 192)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1660, file: !135, line: 1430, baseType: !1557, size: 64, offset: 192)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1660, file: !135, line: 1431, baseType: !1557, size: 64, offset: 256)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1559, file: !135, line: 3380, baseType: !1666, size: 320)
!1666 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !1667)
!1667 = !{!1668, !1669}
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1666, file: !135, line: 1461, baseType: !1595, size: 192)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1666, file: !135, line: 1462, baseType: !1670, size: 128, offset: 192)
!1670 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1671, line: 31, size: 128, elements: !1672)
!1671 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1672 = !{!1673, !1677, !1678}
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1670, file: !1671, line: 32, baseType: !1674, size: 64)
!1674 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1675, size: 64)
!1675 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1676)
!1676 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1670, file: !1671, line: 33, baseType: !7, size: 32, offset: 64)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1670, file: !1671, line: 34, baseType: !7, size: 32, offset: 96)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1559, file: !135, line: 3381, baseType: !1680, size: 384)
!1680 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !1681)
!1681 = !{!1682, !1683, !1688, !1689, !1690}
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1680, file: !135, line: 2508, baseType: !1595, size: 192)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1680, file: !135, line: 2509, baseType: !1684, size: 32, offset: 192)
!1684 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1685, line: 58, baseType: !1686)
!1685 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1686 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1687, line: 44, baseType: !7)
!1687 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1680, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1680, file: !135, line: 2511, baseType: !1557, size: 64, offset: 256)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1680, file: !135, line: 2512, baseType: !1557, size: 64, offset: 320)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1559, file: !135, line: 3382, baseType: !1692, size: 896)
!1692 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1693)
!1693 = !{!1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1692, file: !135, line: 2653, baseType: !1680, size: 384)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1692, file: !135, line: 2654, baseType: !1557, size: 64, offset: 384)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1692, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1692, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1692, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1692, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1692, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1692, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1692, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1692, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1692, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1692, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1692, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1692, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1692, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1692, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1692, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1692, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1692, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1692, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1692, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1692, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1692, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1692, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1692, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1692, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1692, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1692, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1692, file: !135, line: 2705, baseType: !1557, size: 64, offset: 576)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1692, file: !135, line: 2706, baseType: !1557, size: 64, offset: 640)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1692, file: !135, line: 2707, baseType: !1557, size: 64, offset: 704)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1692, file: !135, line: 2708, baseType: !1557, size: 64, offset: 768)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1692, file: !135, line: 2711, baseType: !1727, size: 64, offset: 832)
!1727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1728, size: 64)
!1728 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1559, file: !135, line: 3383, baseType: !1730, size: 960)
!1730 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1731)
!1731 = !{!1732, !1733}
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1730, file: !135, line: 2757, baseType: !1692, size: 896)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1730, file: !135, line: 2758, baseType: !1734, size: 64, offset: 896)
!1734 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !388, line: 50, baseType: !1735)
!1735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1736, size: 64)
!1736 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1737, line: 240, size: 384, elements: !1738)
!1737 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1738 = !{!1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749}
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1736, file: !1737, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1736, file: !1737, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1736, file: !1737, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1736, file: !1737, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1736, file: !1737, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1736, file: !1737, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1736, file: !1737, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1736, file: !1737, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1736, file: !1737, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1736, file: !1737, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1736, file: !1737, line: 321, baseType: !1750, size: 320, offset: 64)
!1750 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1737, line: 315, size: 320, elements: !1751)
!1751 = !{!1752, !2158, !2160, !2223, !2224}
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1750, file: !1737, line: 316, baseType: !1753, size: 64)
!1753 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1754, size: 64, elements: !1657)
!1754 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1737, line: 183, baseType: !1755)
!1755 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1737, line: 166, size: 64, elements: !1756)
!1756 = !{!1757, !1758, !1759, !1762, !1763, !1771, !1772, !1784, !1787, !1849, !1850, !2135, !2148, !2155}
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1755, file: !1737, line: 168, baseType: !1653, size: 32)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1755, file: !1737, line: 169, baseType: !7, size: 32)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1755, file: !1737, line: 170, baseType: !1760, size: 64)
!1760 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1761, size: 64)
!1761 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1656)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1755, file: !1737, line: 171, baseType: !1734, size: 64)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1755, file: !1737, line: 172, baseType: !1764, size: 64)
!1764 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !388, line: 53, baseType: !1765)
!1765 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1766, size: 64)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1737, line: 359, size: 128, elements: !1767)
!1767 = !{!1768, !1769}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1766, file: !1737, line: 360, baseType: !1653, size: 32)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1766, file: !1737, line: 361, baseType: !1770, size: 64, offset: 64)
!1770 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1734, size: 64, elements: !1657)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1755, file: !1737, line: 173, baseType: !5, size: 32)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1755, file: !1737, line: 174, baseType: !1773, size: 32)
!1773 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1737, line: 133, baseType: !1774)
!1774 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1737, line: 115, size: 32, elements: !1775)
!1775 = !{!1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783}
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1774, file: !1737, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1774, file: !1737, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1774, file: !1737, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1774, file: !1737, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1774, file: !1737, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1774, file: !1737, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1774, file: !1737, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1774, file: !1737, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1755, file: !1737, line: 175, baseType: !1785, size: 64)
!1785 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1786, size: 64)
!1786 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1737, line: 175, flags: DIFlagFwdDecl)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1755, file: !1737, line: 176, baseType: !1788, size: 64)
!1788 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1789, size: 64)
!1789 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1790, line: 75, size: 256, elements: !1791)
!1790 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1791 = !{!1792, !1806, !1807, !1808}
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1789, file: !1790, line: 76, baseType: !1793, size: 64)
!1793 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1794, size: 64)
!1794 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1790, line: 68, baseType: !1795)
!1795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1790, line: 63, size: 320, elements: !1796)
!1796 = !{!1797, !1799, !1800, !1801}
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1795, file: !1790, line: 64, baseType: !1798, size: 64)
!1798 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1795, size: 64)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1795, file: !1790, line: 65, baseType: !1798, size: 64, offset: 64)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1795, file: !1790, line: 66, baseType: !7, size: 32, offset: 128)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1795, file: !1790, line: 67, baseType: !1802, size: 128, offset: 192)
!1802 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1803, size: 128, elements: !1804)
!1803 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1790, line: 29, baseType: !1610)
!1804 = !{!1805}
!1805 = !DISubrange(count: 2)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1789, file: !1790, line: 77, baseType: !1793, size: 64, offset: 64)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1789, file: !1790, line: 78, baseType: !7, size: 32, offset: 128)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1789, file: !1790, line: 79, baseType: !1809, size: 64, offset: 192)
!1809 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1810, size: 64)
!1810 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1790, line: 49, baseType: !1811)
!1811 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1790, line: 45, size: 832, elements: !1812)
!1812 = !{!1813, !1814, !1815}
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1811, file: !1790, line: 46, baseType: !1798, size: 64)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1811, file: !1790, line: 47, baseType: !1788, size: 64, offset: 64)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1811, file: !1790, line: 48, baseType: !1816, size: 704, offset: 128)
!1816 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1817, line: 164, size: 704, elements: !1818)
!1817 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1818 = !{!1819, !1820, !1831, !1832, !1833, !1834, !1835, !1836, !1841, !1845, !1846, !1847, !1848}
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1816, file: !1817, line: 166, baseType: !1612, size: 64)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1816, file: !1817, line: 167, baseType: !1821, size: 64, offset: 64)
!1821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1822, size: 64)
!1822 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1817, line: 157, size: 192, elements: !1823)
!1823 = !{!1824, !1826, !1827}
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1822, file: !1817, line: 159, baseType: !1825, size: 64)
!1825 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1656, size: 64)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1822, file: !1817, line: 160, baseType: !1821, size: 64, offset: 64)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1822, file: !1817, line: 161, baseType: !1828, size: 32, offset: 128)
!1828 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1656, size: 32, elements: !1829)
!1829 = !{!1830}
!1830 = !DISubrange(count: 4)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1816, file: !1817, line: 168, baseType: !1825, size: 64, offset: 128)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1816, file: !1817, line: 169, baseType: !1825, size: 64, offset: 192)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1816, file: !1817, line: 170, baseType: !1825, size: 64, offset: 256)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1816, file: !1817, line: 171, baseType: !1612, size: 64, offset: 320)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1816, file: !1817, line: 172, baseType: !1653, size: 32, offset: 384)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1816, file: !1817, line: 176, baseType: !1837, size: 64, offset: 448)
!1837 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1838, size: 64)
!1838 = !DISubroutineType(types: !1839)
!1839 = !{!1821, !1840, !1612}
!1840 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1816, file: !1817, line: 177, baseType: !1842, size: 64, offset: 512)
!1842 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1843, size: 64)
!1843 = !DISubroutineType(types: !1844)
!1844 = !{null, !1840, !1821}
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1816, file: !1817, line: 178, baseType: !1840, size: 64, offset: 576)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1816, file: !1817, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1816, file: !1817, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1816, file: !1817, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1755, file: !1737, line: 177, baseType: !1557, size: 64)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1755, file: !1737, line: 178, baseType: !1851, size: 64)
!1851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1852, size: 64)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !330, line: 217, size: 832, elements: !1853)
!1853 = !{!1854, !2100, !2101, !2102, !2105, !2109, !2110, !2111, !2129, !2130, !2131, !2132, !2133, !2134}
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1852, file: !330, line: 219, baseType: !1855, size: 64)
!1855 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1856, size: 64)
!1856 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !330, line: 151, baseType: !1857)
!1857 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !330, line: 151, size: 128, elements: !1858)
!1858 = !{!1859}
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1857, file: !330, line: 151, baseType: !1860, size: 128)
!1860 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !330, line: 150, baseType: !1861)
!1861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !330, line: 150, size: 128, elements: !1862)
!1862 = !{!1863, !1864, !1865}
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1861, file: !330, line: 150, baseType: !7, size: 32)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1861, file: !330, line: 150, baseType: !7, size: 32, offset: 32)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1861, file: !330, line: 150, baseType: !1866, size: 64, offset: 64)
!1866 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1867, size: 64, elements: !1657)
!1867 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !388, line: 108, baseType: !1868)
!1868 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1869, size: 64)
!1869 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !330, line: 122, size: 512, elements: !1870)
!1870 = !{!1871, !1872, !1873, !2092, !2093, !2094, !2095, !2096, !2097, !2098}
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1869, file: !330, line: 124, baseType: !1851, size: 64)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1869, file: !330, line: 125, baseType: !1851, size: 64, offset: 64)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1869, file: !330, line: 131, baseType: !1874, size: 64, offset: 128)
!1874 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !330, line: 128, size: 64, elements: !1875)
!1875 = !{!1876, !2091}
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1874, file: !330, line: 129, baseType: !1877, size: 64)
!1877 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !388, line: 66, baseType: !1878)
!1878 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1879, size: 64)
!1879 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !413, line: 143, size: 192, elements: !1880)
!1880 = !{!1881, !2089, !2090}
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1879, file: !413, line: 145, baseType: !1882, size: 64)
!1882 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !388, line: 69, baseType: !1883)
!1883 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1884, size: 64)
!1884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !413, line: 136, size: 192, elements: !1885)
!1885 = !{!1886, !2087, !2088}
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1884, file: !413, line: 137, baseType: !1887, size: 64)
!1887 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !388, line: 58, baseType: !1888)
!1888 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1889, size: 64)
!1889 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !413, line: 737, size: 768, elements: !1890)
!1890 = !{!1891, !1908, !1942, !1948, !1953, !1958, !1965, !1971, !1977, !1982, !1996, !2001, !2007, !2012, !2022, !2027, !2045, !2052, !2059, !2065, !2070, !2076, !2082}
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1889, file: !413, line: 738, baseType: !1892, size: 256)
!1892 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !413, line: 271, size: 256, elements: !1893)
!1893 = !{!1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907}
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1892, file: !413, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1892, file: !413, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1892, file: !413, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1892, file: !413, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1892, file: !413, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1892, file: !413, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1892, file: !413, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1892, file: !413, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1892, file: !413, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1892, file: !413, line: 312, baseType: !7, size: 32, offset: 32)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1892, file: !413, line: 316, baseType: !1684, size: 32, offset: 64)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1892, file: !413, line: 319, baseType: !7, size: 32, offset: 96)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1892, file: !413, line: 323, baseType: !1851, size: 64, offset: 128)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1892, file: !413, line: 327, baseType: !1557, size: 64, offset: 192)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1889, file: !413, line: 739, baseType: !1909, size: 448)
!1909 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !413, line: 350, size: 448, elements: !1910)
!1910 = !{!1911, !1940}
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1909, file: !413, line: 353, baseType: !1912, size: 384)
!1912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !413, line: 333, size: 384, elements: !1913)
!1913 = !{!1914, !1915, !1923}
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1912, file: !413, line: 336, baseType: !1892, size: 256)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1912, file: !413, line: 343, baseType: !1916, size: 64, offset: 256)
!1916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1917, size: 64)
!1917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1918, line: 37, size: 128, elements: !1919)
!1918 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1919 = !{!1920, !1921}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1917, file: !1918, line: 39, baseType: !1916, size: 64)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1917, file: !1918, line: 40, baseType: !1922, size: 64, offset: 64)
!1922 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1557, size: 64)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1912, file: !413, line: 344, baseType: !1924, size: 64, offset: 320)
!1924 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1925, size: 64)
!1925 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1918, line: 45, size: 320, elements: !1926)
!1926 = !{!1927, !1928}
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1925, file: !1918, line: 47, baseType: !1924, size: 64)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1925, file: !1918, line: 48, baseType: !1929, size: 256, offset: 64)
!1929 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !1930)
!1930 = !{!1931, !1933, !1934, !1939}
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1929, file: !135, line: 1884, baseType: !1932, size: 64)
!1932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1929, size: 64)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1929, file: !135, line: 1885, baseType: !1932, size: 64, offset: 64)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1929, file: !135, line: 1891, baseType: !1935, size: 64, offset: 128)
!1935 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1929, file: !135, line: 1891, size: 64, elements: !1936)
!1936 = !{!1937, !1938}
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1935, file: !135, line: 1891, baseType: !1887, size: 64)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1935, file: !135, line: 1891, baseType: !1557, size: 64)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1929, file: !135, line: 1892, baseType: !1922, size: 64, offset: 192)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1909, file: !413, line: 359, baseType: !1941, size: 64, offset: 384)
!1941 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1557, size: 64, elements: !1657)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1889, file: !413, line: 740, baseType: !1943, size: 512)
!1943 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !413, line: 365, size: 512, elements: !1944)
!1944 = !{!1945, !1946, !1947}
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1943, file: !413, line: 368, baseType: !1912, size: 384)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1943, file: !413, line: 373, baseType: !1557, size: 64, offset: 384)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1943, file: !413, line: 374, baseType: !1557, size: 64, offset: 448)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1889, file: !413, line: 741, baseType: !1949, size: 576)
!1949 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !413, line: 380, size: 576, elements: !1950)
!1950 = !{!1951, !1952}
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1949, file: !413, line: 383, baseType: !1943, size: 512)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1949, file: !413, line: 389, baseType: !1941, size: 64, offset: 512)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1889, file: !413, line: 742, baseType: !1954, size: 320)
!1954 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !413, line: 395, size: 320, elements: !1955)
!1955 = !{!1956, !1957}
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1954, file: !413, line: 397, baseType: !1892, size: 256)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1954, file: !413, line: 400, baseType: !1877, size: 64, offset: 256)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1889, file: !413, line: 743, baseType: !1959, size: 448)
!1959 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !413, line: 406, size: 448, elements: !1960)
!1960 = !{!1961, !1962, !1963, !1964}
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1959, file: !413, line: 408, baseType: !1892, size: 256)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1959, file: !413, line: 412, baseType: !1557, size: 64, offset: 256)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1959, file: !413, line: 420, baseType: !1557, size: 64, offset: 320)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1959, file: !413, line: 423, baseType: !1877, size: 64, offset: 384)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1889, file: !413, line: 744, baseType: !1966, size: 384)
!1966 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !413, line: 429, size: 384, elements: !1967)
!1967 = !{!1968, !1969, !1970}
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1966, file: !413, line: 431, baseType: !1892, size: 256)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1966, file: !413, line: 434, baseType: !1557, size: 64, offset: 256)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1966, file: !413, line: 437, baseType: !1877, size: 64, offset: 320)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1889, file: !413, line: 745, baseType: !1972, size: 384)
!1972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !413, line: 443, size: 384, elements: !1973)
!1973 = !{!1974, !1975, !1976}
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1972, file: !413, line: 445, baseType: !1892, size: 256)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1972, file: !413, line: 449, baseType: !1557, size: 64, offset: 256)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1972, file: !413, line: 453, baseType: !1877, size: 64, offset: 320)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1889, file: !413, line: 746, baseType: !1978, size: 320)
!1978 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !413, line: 459, size: 320, elements: !1979)
!1979 = !{!1980, !1981}
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1978, file: !413, line: 461, baseType: !1892, size: 256)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1978, file: !413, line: 464, baseType: !1557, size: 64, offset: 256)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1889, file: !413, line: 747, baseType: !1983, size: 768)
!1983 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !413, line: 469, size: 768, elements: !1984)
!1984 = !{!1985, !1986, !1987, !1988, !1989}
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1983, file: !413, line: 471, baseType: !1892, size: 256)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1983, file: !413, line: 474, baseType: !7, size: 32, offset: 256)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1983, file: !413, line: 475, baseType: !7, size: 32, offset: 288)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1983, file: !413, line: 478, baseType: !1557, size: 64, offset: 320)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1983, file: !413, line: 481, baseType: !1990, size: 384, offset: 384)
!1990 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1991, size: 384, elements: !1657)
!1991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !1992)
!1992 = !{!1993, !1994, !1995}
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1991, file: !135, line: 1920, baseType: !1929, size: 256)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1991, file: !135, line: 1921, baseType: !1557, size: 64, offset: 256)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1991, file: !135, line: 1922, baseType: !1684, size: 32, offset: 320)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1889, file: !413, line: 748, baseType: !1997, size: 320)
!1997 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !413, line: 487, size: 320, elements: !1998)
!1998 = !{!1999, !2000}
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1997, file: !413, line: 490, baseType: !1892, size: 256)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1997, file: !413, line: 494, baseType: !1653, size: 32, offset: 256)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1889, file: !413, line: 749, baseType: !2002, size: 384)
!2002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !413, line: 500, size: 384, elements: !2003)
!2003 = !{!2004, !2005, !2006}
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2002, file: !413, line: 502, baseType: !1892, size: 256)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2002, file: !413, line: 506, baseType: !1877, size: 64, offset: 256)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2002, file: !413, line: 510, baseType: !1877, size: 64, offset: 320)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1889, file: !413, line: 750, baseType: !2008, size: 320)
!2008 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !413, line: 529, size: 320, elements: !2009)
!2009 = !{!2010, !2011}
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2008, file: !413, line: 531, baseType: !1892, size: 256)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2008, file: !413, line: 540, baseType: !1877, size: 64, offset: 256)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1889, file: !413, line: 751, baseType: !2013, size: 704)
!2013 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !413, line: 546, size: 704, elements: !2014)
!2014 = !{!2015, !2016, !2017, !2018, !2019, !2020, !2021}
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2013, file: !413, line: 549, baseType: !1943, size: 512)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2013, file: !413, line: 553, baseType: !1760, size: 64, offset: 512)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2013, file: !413, line: 557, baseType: !1676, size: 8, offset: 576)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2013, file: !413, line: 558, baseType: !1676, size: 8, offset: 584)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2013, file: !413, line: 559, baseType: !1676, size: 8, offset: 592)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2013, file: !413, line: 560, baseType: !1676, size: 8, offset: 600)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2013, file: !413, line: 566, baseType: !1941, size: 64, offset: 640)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1889, file: !413, line: 752, baseType: !2023, size: 384)
!2023 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !413, line: 571, size: 384, elements: !2024)
!2024 = !{!2025, !2026}
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2023, file: !413, line: 573, baseType: !1954, size: 320)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2023, file: !413, line: 577, baseType: !1557, size: 64, offset: 320)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1889, file: !413, line: 753, baseType: !2028, size: 576)
!2028 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !413, line: 600, size: 576, elements: !2029)
!2029 = !{!2030, !2031, !2032, !2035, !2044}
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2028, file: !413, line: 602, baseType: !1954, size: 320)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2028, file: !413, line: 605, baseType: !1557, size: 64, offset: 320)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2028, file: !413, line: 609, baseType: !2033, size: 64, offset: 384)
!2033 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2034, line: 46, baseType: !1610)
!2034 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2028, file: !413, line: 612, baseType: !2036, size: 64, offset: 448)
!2036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2037, size: 64)
!2037 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !413, line: 581, size: 320, elements: !2038)
!2038 = !{!2039, !2040, !2041, !2042, !2043}
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2037, file: !413, line: 583, baseType: !134, size: 32)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2037, file: !413, line: 586, baseType: !1557, size: 64, offset: 64)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2037, file: !413, line: 589, baseType: !1557, size: 64, offset: 128)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2037, file: !413, line: 592, baseType: !1557, size: 64, offset: 192)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2037, file: !413, line: 595, baseType: !1557, size: 64, offset: 256)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2028, file: !413, line: 616, baseType: !1877, size: 64, offset: 512)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1889, file: !413, line: 754, baseType: !2046, size: 512)
!2046 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !413, line: 622, size: 512, elements: !2047)
!2047 = !{!2048, !2049, !2050, !2051}
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2046, file: !413, line: 624, baseType: !1954, size: 320)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2046, file: !413, line: 628, baseType: !1557, size: 64, offset: 320)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2046, file: !413, line: 632, baseType: !1557, size: 64, offset: 384)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2046, file: !413, line: 636, baseType: !1557, size: 64, offset: 448)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1889, file: !413, line: 755, baseType: !2053, size: 704)
!2053 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !413, line: 642, size: 704, elements: !2054)
!2054 = !{!2055, !2056, !2057, !2058}
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2053, file: !413, line: 644, baseType: !2046, size: 512)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2053, file: !413, line: 648, baseType: !1557, size: 64, offset: 512)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2053, file: !413, line: 652, baseType: !1557, size: 64, offset: 576)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2053, file: !413, line: 653, baseType: !1557, size: 64, offset: 640)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1889, file: !413, line: 756, baseType: !2060, size: 448)
!2060 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !413, line: 663, size: 448, elements: !2061)
!2061 = !{!2062, !2063, !2064}
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2060, file: !413, line: 665, baseType: !1954, size: 320)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2060, file: !413, line: 668, baseType: !1557, size: 64, offset: 320)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2060, file: !413, line: 673, baseType: !1557, size: 64, offset: 384)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1889, file: !413, line: 757, baseType: !2066, size: 384)
!2066 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !413, line: 694, size: 384, elements: !2067)
!2067 = !{!2068, !2069}
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2066, file: !413, line: 696, baseType: !1954, size: 320)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2066, file: !413, line: 699, baseType: !1557, size: 64, offset: 320)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1889, file: !413, line: 758, baseType: !2071, size: 384)
!2071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !413, line: 681, size: 384, elements: !2072)
!2072 = !{!2073, !2074, !2075}
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2071, file: !413, line: 683, baseType: !1892, size: 256)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2071, file: !413, line: 686, baseType: !1557, size: 64, offset: 256)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2071, file: !413, line: 689, baseType: !1557, size: 64, offset: 320)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1889, file: !413, line: 759, baseType: !2077, size: 384)
!2077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !413, line: 707, size: 384, elements: !2078)
!2078 = !{!2079, !2080, !2081}
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2077, file: !413, line: 709, baseType: !1892, size: 256)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2077, file: !413, line: 712, baseType: !1557, size: 64, offset: 256)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2077, file: !413, line: 712, baseType: !1557, size: 64, offset: 320)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1889, file: !413, line: 760, baseType: !2083, size: 320)
!2083 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !413, line: 718, size: 320, elements: !2084)
!2084 = !{!2085, !2086}
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2083, file: !413, line: 720, baseType: !1892, size: 256)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2083, file: !413, line: 723, baseType: !1557, size: 64, offset: 256)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1884, file: !413, line: 138, baseType: !1883, size: 64, offset: 64)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1884, file: !413, line: 139, baseType: !1883, size: 64, offset: 128)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1879, file: !413, line: 146, baseType: !1882, size: 64, offset: 64)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1879, file: !413, line: 152, baseType: !1877, size: 64, offset: 128)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1874, file: !330, line: 130, baseType: !1734, size: 64)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1869, file: !330, line: 134, baseType: !1840, size: 64, offset: 192)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1869, file: !330, line: 137, baseType: !1557, size: 64, offset: 256)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1869, file: !330, line: 138, baseType: !1684, size: 32, offset: 320)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1869, file: !330, line: 142, baseType: !7, size: 32, offset: 352)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1869, file: !330, line: 144, baseType: !1653, size: 32, offset: 384)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1869, file: !330, line: 145, baseType: !1653, size: 32, offset: 416)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1869, file: !330, line: 146, baseType: !2099, size: 64, offset: 448)
!2099 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !330, line: 119, baseType: !1612)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1852, file: !330, line: 220, baseType: !1855, size: 64, offset: 64)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1852, file: !330, line: 223, baseType: !1840, size: 64, offset: 128)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1852, file: !330, line: 226, baseType: !2103, size: 64, offset: 192)
!2103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2104, size: 64)
!2104 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !330, line: 185, flags: DIFlagFwdDecl)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1852, file: !330, line: 229, baseType: !2106, size: 128, offset: 256)
!2106 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2107, size: 128, elements: !1804)
!2107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2108, size: 64)
!2108 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !330, line: 229, flags: DIFlagFwdDecl)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1852, file: !330, line: 232, baseType: !1851, size: 64, offset: 384)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1852, file: !330, line: 233, baseType: !1851, size: 64, offset: 448)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1852, file: !330, line: 238, baseType: !2112, size: 64, offset: 512)
!2112 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !330, line: 235, size: 64, elements: !2113)
!2113 = !{!2114, !2120}
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2112, file: !330, line: 236, baseType: !2115, size: 64)
!2115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2116, size: 64)
!2116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !330, line: 273, size: 128, elements: !2117)
!2117 = !{!2118, !2119}
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2116, file: !330, line: 275, baseType: !1877, size: 64)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2116, file: !330, line: 278, baseType: !1877, size: 64, offset: 64)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2112, file: !330, line: 237, baseType: !2121, size: 64)
!2121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2122, size: 64)
!2122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !330, line: 259, size: 320, elements: !2123)
!2123 = !{!2124, !2125, !2126, !2127, !2128}
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2122, file: !330, line: 261, baseType: !1734, size: 64)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2122, file: !330, line: 262, baseType: !1734, size: 64, offset: 64)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2122, file: !330, line: 266, baseType: !1734, size: 64, offset: 128)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2122, file: !330, line: 267, baseType: !1734, size: 64, offset: 192)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2122, file: !330, line: 270, baseType: !1653, size: 32, offset: 256)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1852, file: !330, line: 241, baseType: !2099, size: 64, offset: 576)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1852, file: !330, line: 244, baseType: !1653, size: 32, offset: 640)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1852, file: !330, line: 247, baseType: !1653, size: 32, offset: 672)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1852, file: !330, line: 250, baseType: !1653, size: 32, offset: 704)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1852, file: !330, line: 253, baseType: !1653, size: 32, offset: 736)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1852, file: !330, line: 256, baseType: !1653, size: 32, offset: 768)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1755, file: !1737, line: 179, baseType: !2136, size: 64)
!2136 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2137, size: 64)
!2137 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1737, line: 150, baseType: !2138)
!2138 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1737, line: 142, size: 320, elements: !2139)
!2139 = !{!2140, !2141, !2142, !2143, !2146, !2147}
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2138, file: !1737, line: 144, baseType: !1557, size: 64)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2138, file: !1737, line: 145, baseType: !1734, size: 64, offset: 64)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2138, file: !1737, line: 146, baseType: !1734, size: 64, offset: 128)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2138, file: !1737, line: 147, baseType: !2144, size: 32, offset: 192)
!2144 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2145, line: 31, baseType: !1653)
!2145 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2138, file: !1737, line: 148, baseType: !7, size: 32, offset: 224)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2138, file: !1737, line: 149, baseType: !1676, size: 8, offset: 256)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1755, file: !1737, line: 180, baseType: !2149, size: 64)
!2149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2150, size: 64)
!2150 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1737, line: 162, baseType: !2151)
!2151 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1737, line: 159, size: 128, elements: !2152)
!2152 = !{!2153, !2154}
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2151, file: !1737, line: 160, baseType: !1557, size: 64)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2151, file: !1737, line: 161, baseType: !1612, size: 64, offset: 64)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1755, file: !1737, line: 181, baseType: !2156, size: 64)
!2156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2157, size: 64)
!2157 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1737, line: 181, flags: DIFlagFwdDecl)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1750, file: !1737, line: 317, baseType: !2159, size: 64)
!2159 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1612, size: 64, elements: !1657)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1750, file: !1737, line: 318, baseType: !2161, size: 320)
!2161 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1737, line: 188, size: 320, elements: !2162)
!2162 = !{!2163, !2165, !2222}
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2161, file: !1737, line: 190, baseType: !2164, size: 192)
!2164 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1754, size: 192, elements: !1630)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2161, file: !1737, line: 193, baseType: !2166, size: 64, offset: 192)
!2166 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2167, size: 64)
!2167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1737, line: 206, size: 320, elements: !2168)
!2168 = !{!2169, !2207, !2208, !2209, !2221}
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2167, file: !1737, line: 208, baseType: !2170, size: 64)
!2170 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2171, size: 64)
!2171 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !388, line: 62, baseType: !2172)
!2172 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2173, line: 538, size: 256, elements: !2174)
!2173 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2174 = !{!2175, !2179, !2185, !2198}
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2172, file: !2173, line: 539, baseType: !2176, size: 32)
!2176 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2173, line: 482, size: 32, elements: !2177)
!2177 = !{!2178}
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2176, file: !2173, line: 484, baseType: !7, size: 32)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2172, file: !2173, line: 540, baseType: !2180, size: 192)
!2180 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2173, line: 488, size: 192, elements: !2181)
!2181 = !{!2182, !2183, !2184}
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2180, file: !2173, line: 489, baseType: !2176, size: 32)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2180, file: !2173, line: 492, baseType: !1760, size: 64, offset: 64)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2180, file: !2173, line: 496, baseType: !1557, size: 64, offset: 128)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2172, file: !2173, line: 541, baseType: !2186, size: 256)
!2186 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2173, line: 504, size: 256, elements: !2187)
!2187 = !{!2188, !2189, !2196, !2197}
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2186, file: !2173, line: 505, baseType: !2176, size: 32)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2186, file: !2173, line: 509, baseType: !2190, size: 64, offset: 64)
!2190 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2173, line: 501, baseType: !2191)
!2191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2192, size: 64)
!2192 = !DISubroutineType(types: !2193)
!2193 = !{null, !2194}
!2194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2195, size: 64)
!2195 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2186, file: !2173, line: 510, baseType: !2194, size: 64, offset: 128)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2186, file: !2173, line: 513, baseType: !2170, size: 64, offset: 192)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2172, file: !2173, line: 542, baseType: !2199, size: 128)
!2199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2173, line: 530, size: 128, elements: !2200)
!2200 = !{!2201, !2202}
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2199, file: !2173, line: 531, baseType: !2176, size: 32)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2199, file: !2173, line: 534, baseType: !2203, size: 64, offset: 64)
!2203 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2173, line: 525, baseType: !2204)
!2204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2205, size: 64)
!2205 = !DISubroutineType(types: !2206)
!2206 = !{!1676, !1557, !1760, !1610, !1610}
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2167, file: !1737, line: 211, baseType: !7, size: 32, offset: 64)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2167, file: !1737, line: 214, baseType: !1612, size: 64, offset: 128)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2167, file: !1737, line: 224, baseType: !2210, size: 64, offset: 192)
!2210 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2211, size: 64)
!2211 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1737, line: 202, baseType: !2212)
!2212 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1737, line: 202, size: 128, elements: !2213)
!2213 = !{!2214}
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2212, file: !1737, line: 202, baseType: !2215, size: 128)
!2215 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1737, line: 200, baseType: !2216)
!2216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1737, line: 200, size: 128, elements: !2217)
!2217 = !{!2218, !2219, !2220}
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2216, file: !1737, line: 200, baseType: !7, size: 32)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2216, file: !1737, line: 200, baseType: !7, size: 32, offset: 32)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2216, file: !1737, line: 200, baseType: !1770, size: 64, offset: 64)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2167, file: !1737, line: 234, baseType: !2210, size: 64, offset: 256)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2161, file: !1737, line: 197, baseType: !1612, size: 64, offset: 256)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1750, file: !1737, line: 319, baseType: !1619, size: 256)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1750, file: !1737, line: 320, baseType: !1638, size: 192)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1559, file: !135, line: 3384, baseType: !2226, size: 1472)
!2226 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !2227)
!2227 = !{!2228, !2249, !2250, !2251, !2252}
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2226, file: !135, line: 3115, baseType: !2229, size: 1216)
!2229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !2230)
!2230 = !{!2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248}
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2229, file: !135, line: 2985, baseType: !1730, size: 960)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2229, file: !135, line: 2986, baseType: !1557, size: 64, offset: 960)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2229, file: !135, line: 2987, baseType: !1557, size: 64, offset: 1024)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2229, file: !135, line: 2988, baseType: !1557, size: 64, offset: 1088)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2229, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2229, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2229, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2229, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2229, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2229, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2229, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2229, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2229, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2229, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2229, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2229, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2229, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2229, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2226, file: !135, line: 3117, baseType: !1557, size: 64, offset: 1216)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2226, file: !135, line: 3119, baseType: !1557, size: 64, offset: 1280)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2226, file: !135, line: 3121, baseType: !1557, size: 64, offset: 1344)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2226, file: !135, line: 3123, baseType: !1557, size: 64, offset: 1408)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1559, file: !135, line: 3385, baseType: !2254, size: 1088)
!2254 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !2255)
!2255 = !{!2256, !2257, !2258}
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2254, file: !135, line: 2875, baseType: !1730, size: 960)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2254, file: !135, line: 2876, baseType: !1734, size: 64, offset: 960)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2254, file: !135, line: 2877, baseType: !2259, size: 64, offset: 1024)
!2259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2260, size: 64)
!2260 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !2261, line: 172, size: 128, elements: !2262)
!2261 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2262 = !{!2263, !2264, !2265, !2266, !2267, !2268, !2269}
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2260, file: !2261, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2260, file: !2261, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2260, file: !2261, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2260, file: !2261, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2260, file: !2261, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2260, file: !2261, line: 195, baseType: !7, size: 32, offset: 32)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2260, file: !2261, line: 199, baseType: !1557, size: 64, offset: 64)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1559, file: !135, line: 3386, baseType: !2229, size: 1216)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1559, file: !135, line: 3387, baseType: !2272, size: 1280)
!2272 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !2273)
!2273 = !{!2274, !2275}
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2272, file: !135, line: 3094, baseType: !2229, size: 1216)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2272, file: !135, line: 3095, baseType: !2259, size: 64, offset: 1216)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1559, file: !135, line: 3388, baseType: !2277, size: 1216)
!2277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !2278)
!2278 = !{!2279, !2280, !2281, !2282, !2283, !2284}
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2277, file: !135, line: 2825, baseType: !1692, size: 896)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2277, file: !135, line: 2827, baseType: !1557, size: 64, offset: 896)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2277, file: !135, line: 2828, baseType: !1557, size: 64, offset: 960)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2277, file: !135, line: 2829, baseType: !1557, size: 64, offset: 1024)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2277, file: !135, line: 2830, baseType: !1557, size: 64, offset: 1088)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2277, file: !135, line: 2831, baseType: !1557, size: 64, offset: 1152)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1559, file: !135, line: 3389, baseType: !2286, size: 1024)
!2286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !2287)
!2287 = !{!2288, !2289, !2290}
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2286, file: !135, line: 2851, baseType: !1730, size: 960)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2286, file: !135, line: 2852, baseType: !1653, size: 32, offset: 960)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2286, file: !135, line: 2853, baseType: !1653, size: 32, offset: 992)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1559, file: !135, line: 3390, baseType: !2292, size: 1024)
!2292 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !2293)
!2293 = !{!2294, !2295}
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2292, file: !135, line: 2858, baseType: !1730, size: 960)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2292, file: !135, line: 2859, baseType: !2259, size: 64, offset: 960)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1559, file: !135, line: 3391, baseType: !2297, size: 960)
!2297 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !2298)
!2298 = !{!2299}
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2297, file: !135, line: 2863, baseType: !1730, size: 960)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1559, file: !135, line: 3392, baseType: !2301, size: 1472)
!2301 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !2302)
!2302 = !{!2303}
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2301, file: !135, line: 3305, baseType: !2226, size: 1472)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1559, file: !135, line: 3393, baseType: !2305, size: 1792)
!2305 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !2306)
!2306 = !{!2307, !2308, !2519, !2520, !2521, !2522, !2523, !2524, !2525, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539}
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2305, file: !135, line: 3249, baseType: !2226, size: 1472)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2305, file: !135, line: 3251, baseType: !2309, size: 64, offset: 1472)
!2309 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2310, size: 64)
!2310 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2311, line: 463, size: 1152, elements: !2312)
!2311 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2312 = !{!2313, !2316, !2347, !2348, !2460, !2463, !2464, !2465, !2466, !2467, !2468, !2492, !2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518}
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2310, file: !2311, line: 464, baseType: !2314, size: 64)
!2314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2315, size: 64)
!2315 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2311, line: 464, flags: DIFlagFwdDecl)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2310, file: !2311, line: 467, baseType: !2317, size: 64, offset: 64)
!2317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2318, size: 64)
!2318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !330, line: 374, size: 640, elements: !2319)
!2319 = !{!2320, !2322, !2323, !2336, !2337, !2338, !2339, !2340, !2341, !2343, !2345, !2346}
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2318, file: !330, line: 377, baseType: !2321, size: 64)
!2321 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !388, line: 111, baseType: !1851)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2318, file: !330, line: 378, baseType: !2321, size: 64, offset: 64)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2318, file: !330, line: 381, baseType: !2324, size: 64, offset: 128)
!2324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2325, size: 64)
!2325 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !330, line: 282, baseType: !2326)
!2326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !330, line: 282, size: 128, elements: !2327)
!2327 = !{!2328}
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2326, file: !330, line: 282, baseType: !2329, size: 128)
!2329 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !330, line: 281, baseType: !2330)
!2330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !330, line: 281, size: 128, elements: !2331)
!2331 = !{!2332, !2333, !2334}
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2330, file: !330, line: 281, baseType: !7, size: 32)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2330, file: !330, line: 281, baseType: !7, size: 32, offset: 32)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2330, file: !330, line: 281, baseType: !2335, size: 64, offset: 64)
!2335 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2321, size: 64, elements: !1657)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2318, file: !330, line: 384, baseType: !1653, size: 32, offset: 192)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2318, file: !330, line: 387, baseType: !1653, size: 32, offset: 224)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2318, file: !330, line: 390, baseType: !1653, size: 32, offset: 256)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2318, file: !330, line: 394, baseType: !2324, size: 64, offset: 320)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2318, file: !330, line: 396, baseType: !329, size: 32, offset: 384)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2318, file: !330, line: 399, baseType: !2342, size: 64, offset: 416)
!2342 = !DICompositeType(tag: DW_TAG_array_type, baseType: !335, size: 64, elements: !1804)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2318, file: !330, line: 402, baseType: !2344, size: 64, offset: 480)
!2344 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1804)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2318, file: !330, line: 406, baseType: !1653, size: 32, offset: 544)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2318, file: !330, line: 409, baseType: !1653, size: 32, offset: 576)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2310, file: !2311, line: 470, baseType: !1878, size: 64, offset: 128)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2310, file: !2311, line: 473, baseType: !2349, size: 64, offset: 192)
!2349 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2350, size: 64)
!2350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2261, line: 39, size: 1152, elements: !2351)
!2351 = !{!2352, !2399, !2412, !2424, !2425, !2437, !2438, !2442, !2443, !2444, !2445, !2446}
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2350, file: !2261, line: 41, baseType: !2353, size: 64)
!2353 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !394, line: 144, baseType: !2354)
!2354 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2355, size: 64)
!2355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !394, line: 100, size: 896, elements: !2356)
!2356 = !{!2357, !2363, !2368, !2373, !2375, !2376, !2377, !2378, !2379, !2380, !2385, !2387, !2388, !2393, !2398}
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2355, file: !394, line: 102, baseType: !2358, size: 64)
!2358 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !394, line: 52, baseType: !2359)
!2359 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2360, size: 64)
!2360 = !DISubroutineType(types: !2361)
!2361 = !{!2362, !2194}
!2362 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !394, line: 47, baseType: !7)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2355, file: !394, line: 105, baseType: !2364, size: 64, offset: 64)
!2364 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !394, line: 59, baseType: !2365)
!2365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2366, size: 64)
!2366 = !DISubroutineType(types: !2367)
!2367 = !{!1653, !2194, !2194}
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2355, file: !394, line: 108, baseType: !2369, size: 64, offset: 128)
!2369 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !394, line: 63, baseType: !2370)
!2370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2371, size: 64)
!2371 = !DISubroutineType(types: !2372)
!2372 = !{null, !1840}
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2355, file: !394, line: 111, baseType: !2374, size: 64, offset: 192)
!2374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1840, size: 64)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2355, file: !394, line: 114, baseType: !2033, size: 64, offset: 256)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2355, file: !394, line: 117, baseType: !2033, size: 64, offset: 320)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2355, file: !394, line: 120, baseType: !2033, size: 64, offset: 384)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2355, file: !394, line: 124, baseType: !7, size: 32, offset: 448)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2355, file: !394, line: 128, baseType: !7, size: 32, offset: 480)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2355, file: !394, line: 131, baseType: !2381, size: 64, offset: 512)
!2381 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !394, line: 75, baseType: !2382)
!2382 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2383, size: 64)
!2383 = !DISubroutineType(types: !2384)
!2384 = !{!1840, !2033, !2033}
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2355, file: !394, line: 132, baseType: !2386, size: 64, offset: 576)
!2386 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !394, line: 78, baseType: !2370)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2355, file: !394, line: 135, baseType: !1840, size: 64, offset: 640)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2355, file: !394, line: 136, baseType: !2389, size: 64, offset: 704)
!2389 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !394, line: 82, baseType: !2390)
!2390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2391, size: 64)
!2391 = !DISubroutineType(types: !2392)
!2392 = !{!1840, !1840, !2033, !2033}
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2355, file: !394, line: 137, baseType: !2394, size: 64, offset: 768)
!2394 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !394, line: 83, baseType: !2395)
!2395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2396, size: 64)
!2396 = !DISubroutineType(types: !2397)
!2397 = !{null, !1840, !1840}
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2355, file: !394, line: 141, baseType: !7, size: 32, offset: 832)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2350, file: !2261, line: 48, baseType: !2400, size: 64, offset: 64)
!2400 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2401, size: 64)
!2401 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !413, line: 35, baseType: !2402)
!2402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !413, line: 35, size: 128, elements: !2403)
!2403 = !{!2404}
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2402, file: !413, line: 35, baseType: !2405, size: 128)
!2405 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !413, line: 33, baseType: !2406)
!2406 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !413, line: 33, size: 128, elements: !2407)
!2407 = !{!2408, !2409, !2410}
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2406, file: !413, line: 33, baseType: !7, size: 32)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2406, file: !413, line: 33, baseType: !7, size: 32, offset: 32)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2406, file: !413, line: 33, baseType: !2411, size: 64, offset: 64)
!2411 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1887, size: 64, elements: !1657)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2350, file: !2261, line: 51, baseType: !2413, size: 64, offset: 128)
!2413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2414, size: 64)
!2414 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !2415)
!2415 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !2416)
!2416 = !{!2417}
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2415, file: !135, line: 183, baseType: !2418, size: 128)
!2418 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !2419)
!2419 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !2420)
!2420 = !{!2421, !2422, !2423}
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2419, file: !135, line: 182, baseType: !7, size: 32)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2419, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2419, file: !135, line: 182, baseType: !1941, size: 64, offset: 64)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2350, file: !2261, line: 54, baseType: !1557, size: 64, offset: 192)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2350, file: !2261, line: 57, baseType: !2426, size: 128, offset: 256)
!2426 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2427, line: 31, size: 128, elements: !2428)
!2427 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2428 = !{!2429, !2430, !2431, !2432, !2433, !2434, !2435}
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2426, file: !2427, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2426, file: !2427, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2426, file: !2427, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2426, file: !2427, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2426, file: !2427, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2426, file: !2427, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2426, file: !2427, line: 56, baseType: !2436, size: 64, offset: 64)
!2436 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !388, line: 47, baseType: !1788)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2350, file: !2261, line: 60, baseType: !2426, size: 128, offset: 384)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2350, file: !2261, line: 64, baseType: !2439, size: 64, offset: 512)
!2439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2440, size: 64)
!2440 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2441, line: 33, flags: DIFlagFwdDecl)
!2441 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2350, file: !2261, line: 67, baseType: !1557, size: 64, offset: 576)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2350, file: !2261, line: 73, baseType: !2353, size: 64, offset: 640)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2350, file: !2261, line: 77, baseType: !2436, size: 64, offset: 704)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2350, file: !2261, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2350, file: !2261, line: 82, baseType: !2447, size: 320, offset: 832)
!2447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1918, line: 62, size: 320, elements: !2448)
!2448 = !{!2449, !2455, !2456, !2457, !2458, !2459}
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2447, file: !1918, line: 63, baseType: !2450, size: 64)
!2450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2451, size: 64)
!2451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1918, line: 56, size: 128, elements: !2452)
!2452 = !{!2453, !2454}
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2451, file: !1918, line: 57, baseType: !2450, size: 64)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2451, file: !1918, line: 58, baseType: !1655, size: 8, offset: 64)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2447, file: !1918, line: 64, baseType: !7, size: 32, offset: 64)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2447, file: !1918, line: 66, baseType: !7, size: 32, offset: 96)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2447, file: !1918, line: 68, baseType: !1676, size: 8, offset: 128)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2447, file: !1918, line: 70, baseType: !1916, size: 64, offset: 192)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2447, file: !1918, line: 71, baseType: !1924, size: 64, offset: 256)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2310, file: !2311, line: 476, baseType: !2461, size: 64, offset: 256)
!2461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2462, size: 64)
!2462 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2311, line: 476, flags: DIFlagFwdDecl)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2310, file: !2311, line: 479, baseType: !2353, size: 64, offset: 320)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2310, file: !2311, line: 484, baseType: !1557, size: 64, offset: 384)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2310, file: !2311, line: 488, baseType: !1557, size: 64, offset: 448)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2310, file: !2311, line: 493, baseType: !1557, size: 64, offset: 512)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2310, file: !2311, line: 496, baseType: !1557, size: 64, offset: 576)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2310, file: !2311, line: 501, baseType: !2469, size: 64, offset: 640)
!2469 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2470, size: 64)
!2470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !341, line: 2355, size: 576, elements: !2471)
!2471 = !{!2472, !2475, !2476, !2477, !2478, !2480, !2481, !2486, !2487, !2488, !2489, !2490, !2491}
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2470, file: !341, line: 2356, baseType: !2473, size: 64)
!2473 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2474, size: 64)
!2474 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !341, line: 2356, flags: DIFlagFwdDecl)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2470, file: !341, line: 2357, baseType: !1760, size: 64, offset: 64)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2470, file: !341, line: 2358, baseType: !1653, size: 32, offset: 128)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2470, file: !341, line: 2359, baseType: !1653, size: 32, offset: 160)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2470, file: !341, line: 2360, baseType: !2479, size: 128, offset: 192)
!2479 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1653, size: 128, elements: !1829)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2470, file: !341, line: 2364, baseType: !1653, size: 32, offset: 320)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2470, file: !341, line: 2367, baseType: !2482, size: 128, offset: 384)
!2482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !341, line: 2349, size: 128, elements: !2483)
!2483 = !{!2484, !2485}
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2482, file: !341, line: 2351, baseType: !1734, size: 64)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2482, file: !341, line: 2352, baseType: !1612, size: 64, offset: 64)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2470, file: !341, line: 2371, baseType: !340, size: 32, offset: 512)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2470, file: !341, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2470, file: !341, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2470, file: !341, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2470, file: !341, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2470, file: !341, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2310, file: !2311, line: 504, baseType: !2493, size: 64, offset: 704)
!2493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2494, size: 64)
!2494 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2311, line: 504, flags: DIFlagFwdDecl)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2310, file: !2311, line: 507, baseType: !2353, size: 64, offset: 768)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2310, file: !2311, line: 510, baseType: !1653, size: 32, offset: 832)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2310, file: !2311, line: 513, baseType: !1653, size: 32, offset: 864)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2310, file: !2311, line: 516, baseType: !1684, size: 32, offset: 896)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2310, file: !2311, line: 519, baseType: !1684, size: 32, offset: 928)
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2310, file: !2311, line: 522, baseType: !7, size: 32, offset: 960)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2310, file: !2311, line: 523, baseType: !7, size: 32, offset: 992)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2310, file: !2311, line: 528, baseType: !1760, size: 64, offset: 1024)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2310, file: !2311, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2310, file: !2311, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2310, file: !2311, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2310, file: !2311, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2310, file: !2311, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2310, file: !2311, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2310, file: !2311, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2310, file: !2311, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2310, file: !2311, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2310, file: !2311, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2310, file: !2311, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2310, file: !2311, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2310, file: !2311, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2310, file: !2311, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2310, file: !2311, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2310, file: !2311, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2305, file: !135, line: 3254, baseType: !1557, size: 64, offset: 1536)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2305, file: !135, line: 3257, baseType: !1557, size: 64, offset: 1600)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2305, file: !135, line: 3258, baseType: !1557, size: 64, offset: 1664)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2305, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2305, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2305, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2305, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2305, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2305, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2305, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2305, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2305, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2305, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2305, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2305, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2305, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2305, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2305, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2305, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2305, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2305, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1559, file: !135, line: 3394, baseType: !2541, size: 1344)
!2541 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !2542)
!2542 = !{!2543, !2544, !2545, !2546, !2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584}
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2541, file: !135, line: 2280, baseType: !1595, size: 192)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2541, file: !135, line: 2281, baseType: !1557, size: 64, offset: 192)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2541, file: !135, line: 2282, baseType: !1557, size: 64, offset: 256)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2541, file: !135, line: 2283, baseType: !1557, size: 64, offset: 320)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2541, file: !135, line: 2284, baseType: !1557, size: 64, offset: 384)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2541, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2541, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2541, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2541, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2541, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2541, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2541, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2541, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2541, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2541, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2541, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2541, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2541, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2541, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2541, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2541, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2541, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2541, file: !135, line: 2306, baseType: !2144, size: 32, offset: 544)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2541, file: !135, line: 2307, baseType: !1557, size: 64, offset: 576)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2541, file: !135, line: 2308, baseType: !1557, size: 64, offset: 640)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2541, file: !135, line: 2314, baseType: !2569, size: 64, offset: 704)
!2569 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !2570)
!2570 = !{!2571, !2572, !2573}
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2569, file: !135, line: 2310, baseType: !1653, size: 32)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2569, file: !135, line: 2311, baseType: !1760, size: 64)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2569, file: !135, line: 2312, baseType: !2574, size: 64)
!2574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2575, size: 64)
!2575 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2541, file: !135, line: 2315, baseType: !1557, size: 64, offset: 768)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2541, file: !135, line: 2316, baseType: !1557, size: 64, offset: 832)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2541, file: !135, line: 2317, baseType: !1557, size: 64, offset: 896)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2541, file: !135, line: 2318, baseType: !1557, size: 64, offset: 960)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2541, file: !135, line: 2319, baseType: !1557, size: 64, offset: 1024)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2541, file: !135, line: 2320, baseType: !1557, size: 64, offset: 1088)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2541, file: !135, line: 2321, baseType: !1557, size: 64, offset: 1152)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2541, file: !135, line: 2322, baseType: !1557, size: 64, offset: 1216)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2541, file: !135, line: 2324, baseType: !2585, size: 64, offset: 1280)
!2585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2586, size: 64)
!2586 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1559, file: !135, line: 3395, baseType: !2588, size: 320)
!2588 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !2589)
!2589 = !{!2590, !2591, !2592}
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2588, file: !135, line: 1470, baseType: !1595, size: 192)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2588, file: !135, line: 1471, baseType: !1557, size: 64, offset: 192)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2588, file: !135, line: 1472, baseType: !1557, size: 64, offset: 256)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1559, file: !135, line: 3396, baseType: !2594, size: 320)
!2594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !2595)
!2595 = !{!2596, !2597, !2598}
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2594, file: !135, line: 1483, baseType: !1595, size: 192)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2594, file: !135, line: 1484, baseType: !1653, size: 32, offset: 192)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2594, file: !135, line: 1485, baseType: !1941, size: 64, offset: 256)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1559, file: !135, line: 3397, baseType: !2600, size: 384)
!2600 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !2601)
!2601 = !{!2602, !2603, !2604, !2605}
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2600, file: !135, line: 1830, baseType: !1595, size: 192)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2600, file: !135, line: 1831, baseType: !1684, size: 32, offset: 192)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2600, file: !135, line: 1832, baseType: !1557, size: 64, offset: 256)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2600, file: !135, line: 1835, baseType: !1941, size: 64, offset: 320)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1559, file: !135, line: 3398, baseType: !2607, size: 704)
!2607 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !2608)
!2608 = !{!2609, !2610, !2611, !2612, !2613, !2618}
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2607, file: !135, line: 1899, baseType: !1595, size: 192)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2607, file: !135, line: 1902, baseType: !1557, size: 64, offset: 192)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2607, file: !135, line: 1905, baseType: !1887, size: 64, offset: 256)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2607, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2607, file: !135, line: 1911, baseType: !2614, size: 64, offset: 384)
!2614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2615, size: 64)
!2615 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !2261, line: 117, size: 128, elements: !2616)
!2616 = !{!2617}
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2615, file: !2261, line: 120, baseType: !2426, size: 128)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2607, file: !135, line: 1914, baseType: !1929, size: 256, offset: 448)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1559, file: !135, line: 3399, baseType: !2620, size: 704)
!2620 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !2621)
!2621 = !{!2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632}
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2620, file: !135, line: 2009, baseType: !1595, size: 192)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2620, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2620, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2620, file: !135, line: 2014, baseType: !1684, size: 32, offset: 224)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2620, file: !135, line: 2016, baseType: !1557, size: 64, offset: 256)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2620, file: !135, line: 2017, baseType: !2413, size: 64, offset: 320)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2620, file: !135, line: 2019, baseType: !1557, size: 64, offset: 384)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2620, file: !135, line: 2020, baseType: !1557, size: 64, offset: 448)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2620, file: !135, line: 2021, baseType: !1557, size: 64, offset: 512)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2620, file: !135, line: 2022, baseType: !1557, size: 64, offset: 576)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2620, file: !135, line: 2023, baseType: !1557, size: 64, offset: 640)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1559, file: !135, line: 3400, baseType: !2634, size: 832)
!2634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !2635)
!2635 = !{!2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645}
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2634, file: !135, line: 2431, baseType: !1595, size: 192)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2634, file: !135, line: 2433, baseType: !1557, size: 64, offset: 192)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2634, file: !135, line: 2434, baseType: !1557, size: 64, offset: 256)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2634, file: !135, line: 2435, baseType: !1557, size: 64, offset: 320)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2634, file: !135, line: 2436, baseType: !1557, size: 64, offset: 384)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2634, file: !135, line: 2437, baseType: !2413, size: 64, offset: 448)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2634, file: !135, line: 2438, baseType: !1557, size: 64, offset: 512)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2634, file: !135, line: 2440, baseType: !1557, size: 64, offset: 576)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2634, file: !135, line: 2441, baseType: !1557, size: 64, offset: 640)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2634, file: !135, line: 2443, baseType: !2646, size: 128, offset: 704)
!2646 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !2647)
!2647 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !2648)
!2648 = !{!2649}
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2647, file: !135, line: 182, baseType: !2418, size: 128)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1559, file: !135, line: 3401, baseType: !2651, size: 320)
!2651 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !2652)
!2652 = !{!2653, !2654, !2661}
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2651, file: !135, line: 3329, baseType: !1595, size: 192)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2651, file: !135, line: 3330, baseType: !2655, size: 64, offset: 192)
!2655 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2656, size: 64)
!2656 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !2657)
!2657 = !{!2658, !2659, !2660}
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2656, file: !135, line: 3322, baseType: !2655, size: 64)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2656, file: !135, line: 3323, baseType: !2655, size: 64, offset: 64)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2656, file: !135, line: 3324, baseType: !1557, size: 64, offset: 128)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2651, file: !135, line: 3331, baseType: !2655, size: 64, offset: 256)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1559, file: !135, line: 3402, baseType: !2663, size: 256)
!2663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !2664)
!2664 = !{!2665, !2666}
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2663, file: !135, line: 1541, baseType: !1595, size: 192)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2663, file: !135, line: 1542, baseType: !2667, size: 64, offset: 192)
!2667 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2668, size: 64)
!2668 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !2669)
!2669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !2670)
!2670 = !{!2671}
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2669, file: !135, line: 1538, baseType: !2672, size: 192)
!2672 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !2673)
!2673 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !2674)
!2674 = !{!2675, !2676, !2677}
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2673, file: !135, line: 1537, baseType: !7, size: 32)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2673, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2673, file: !135, line: 1537, baseType: !2678, size: 128, offset: 64)
!2678 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2679, size: 128, elements: !1657)
!2679 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !2680)
!2680 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !2681)
!2681 = !{!2682, !2683}
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2680, file: !135, line: 1533, baseType: !1557, size: 64)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2680, file: !135, line: 1534, baseType: !1557, size: 64, offset: 64)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1559, file: !135, line: 3403, baseType: !2685, size: 512)
!2685 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !2686)
!2686 = !{!2687, !2688, !2689, !2690, !2696, !2697, !2698}
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2685, file: !135, line: 1939, baseType: !1595, size: 192)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2685, file: !135, line: 1940, baseType: !1684, size: 32, offset: 192)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2685, file: !135, line: 1941, baseType: !345, size: 32, offset: 224)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2685, file: !135, line: 1946, baseType: !2691, size: 32, offset: 256)
!2691 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !2692)
!2692 = !{!2693, !2694, !2695}
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2691, file: !135, line: 1943, baseType: !363, size: 32)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2691, file: !135, line: 1944, baseType: !370, size: 32)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2691, file: !135, line: 1945, baseType: !134, size: 32)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2685, file: !135, line: 1950, baseType: !1877, size: 64, offset: 320)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2685, file: !135, line: 1951, baseType: !1877, size: 64, offset: 384)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2685, file: !135, line: 1953, baseType: !1941, size: 64, offset: 448)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1559, file: !135, line: 3404, baseType: !2700, size: 1664)
!2700 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !2701)
!2701 = !{!2702, !2703}
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2700, file: !135, line: 3338, baseType: !1595, size: 192)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2700, file: !135, line: 3341, baseType: !2704, size: 1472, offset: 192)
!2704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2705, line: 410, size: 1472, elements: !2706)
!2705 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2706 = !{!2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2788, !2789, !2790, !2791, !2792, !2793, !2794, !2795, !2796, !2797, !2798, !2799, !2800, !2801, !2802, !2803, !2804, !2805, !2806, !2807, !2808, !2809, !2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870}
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2704, file: !2705, line: 412, baseType: !1653, size: 32)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2704, file: !2705, line: 413, baseType: !1653, size: 32, offset: 32)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2704, file: !2705, line: 414, baseType: !1653, size: 32, offset: 64)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2704, file: !2705, line: 415, baseType: !1653, size: 32, offset: 96)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2704, file: !2705, line: 416, baseType: !1653, size: 32, offset: 128)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2704, file: !2705, line: 417, baseType: !1653, size: 32, offset: 160)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2704, file: !2705, line: 418, baseType: !1676, size: 8, offset: 192)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2704, file: !2705, line: 419, baseType: !1676, size: 8, offset: 200)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2704, file: !2705, line: 420, baseType: !2716, size: 8, offset: 208)
!2716 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2704, file: !2705, line: 421, baseType: !2716, size: 8, offset: 216)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2704, file: !2705, line: 422, baseType: !2716, size: 8, offset: 224)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2704, file: !2705, line: 423, baseType: !2716, size: 8, offset: 232)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2704, file: !2705, line: 424, baseType: !2716, size: 8, offset: 240)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2704, file: !2705, line: 425, baseType: !2716, size: 8, offset: 248)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2704, file: !2705, line: 426, baseType: !2716, size: 8, offset: 256)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2704, file: !2705, line: 427, baseType: !2716, size: 8, offset: 264)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2704, file: !2705, line: 428, baseType: !2716, size: 8, offset: 272)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2704, file: !2705, line: 429, baseType: !2716, size: 8, offset: 280)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2704, file: !2705, line: 430, baseType: !2716, size: 8, offset: 288)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2704, file: !2705, line: 431, baseType: !2716, size: 8, offset: 296)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2704, file: !2705, line: 432, baseType: !2716, size: 8, offset: 304)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2704, file: !2705, line: 433, baseType: !2716, size: 8, offset: 312)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2704, file: !2705, line: 434, baseType: !2716, size: 8, offset: 320)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2704, file: !2705, line: 435, baseType: !2716, size: 8, offset: 328)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2704, file: !2705, line: 436, baseType: !2716, size: 8, offset: 336)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2704, file: !2705, line: 437, baseType: !2716, size: 8, offset: 344)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2704, file: !2705, line: 438, baseType: !2716, size: 8, offset: 352)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2704, file: !2705, line: 439, baseType: !2716, size: 8, offset: 360)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2704, file: !2705, line: 440, baseType: !2716, size: 8, offset: 368)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2704, file: !2705, line: 441, baseType: !2716, size: 8, offset: 376)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2704, file: !2705, line: 442, baseType: !2716, size: 8, offset: 384)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2704, file: !2705, line: 443, baseType: !2716, size: 8, offset: 392)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2704, file: !2705, line: 444, baseType: !2716, size: 8, offset: 400)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2704, file: !2705, line: 445, baseType: !2716, size: 8, offset: 408)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2704, file: !2705, line: 446, baseType: !2716, size: 8, offset: 416)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2704, file: !2705, line: 447, baseType: !2716, size: 8, offset: 424)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2704, file: !2705, line: 448, baseType: !2716, size: 8, offset: 432)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2704, file: !2705, line: 449, baseType: !2716, size: 8, offset: 440)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2704, file: !2705, line: 450, baseType: !2716, size: 8, offset: 448)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2704, file: !2705, line: 451, baseType: !2716, size: 8, offset: 456)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2704, file: !2705, line: 452, baseType: !2716, size: 8, offset: 464)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2704, file: !2705, line: 453, baseType: !2716, size: 8, offset: 472)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2704, file: !2705, line: 454, baseType: !2716, size: 8, offset: 480)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2704, file: !2705, line: 455, baseType: !2716, size: 8, offset: 488)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2704, file: !2705, line: 456, baseType: !2716, size: 8, offset: 496)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2704, file: !2705, line: 457, baseType: !2716, size: 8, offset: 504)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2704, file: !2705, line: 458, baseType: !2716, size: 8, offset: 512)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2704, file: !2705, line: 459, baseType: !2716, size: 8, offset: 520)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2704, file: !2705, line: 460, baseType: !2716, size: 8, offset: 528)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2704, file: !2705, line: 461, baseType: !2716, size: 8, offset: 536)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2704, file: !2705, line: 462, baseType: !2716, size: 8, offset: 544)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2704, file: !2705, line: 463, baseType: !2716, size: 8, offset: 552)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2704, file: !2705, line: 464, baseType: !2716, size: 8, offset: 560)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2704, file: !2705, line: 465, baseType: !2716, size: 8, offset: 568)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2704, file: !2705, line: 466, baseType: !2716, size: 8, offset: 576)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2704, file: !2705, line: 467, baseType: !2716, size: 8, offset: 584)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2704, file: !2705, line: 468, baseType: !2716, size: 8, offset: 592)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2704, file: !2705, line: 469, baseType: !2716, size: 8, offset: 600)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2704, file: !2705, line: 470, baseType: !2716, size: 8, offset: 608)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2704, file: !2705, line: 471, baseType: !2716, size: 8, offset: 616)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2704, file: !2705, line: 472, baseType: !2716, size: 8, offset: 624)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2704, file: !2705, line: 473, baseType: !2716, size: 8, offset: 632)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2704, file: !2705, line: 474, baseType: !2716, size: 8, offset: 640)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2704, file: !2705, line: 475, baseType: !2716, size: 8, offset: 648)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2704, file: !2705, line: 476, baseType: !2716, size: 8, offset: 656)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2704, file: !2705, line: 477, baseType: !2716, size: 8, offset: 664)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2704, file: !2705, line: 478, baseType: !2716, size: 8, offset: 672)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2704, file: !2705, line: 479, baseType: !2716, size: 8, offset: 680)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2704, file: !2705, line: 480, baseType: !2716, size: 8, offset: 688)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2704, file: !2705, line: 481, baseType: !2716, size: 8, offset: 696)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2704, file: !2705, line: 482, baseType: !2716, size: 8, offset: 704)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2704, file: !2705, line: 483, baseType: !2716, size: 8, offset: 712)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2704, file: !2705, line: 484, baseType: !2716, size: 8, offset: 720)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2704, file: !2705, line: 485, baseType: !2716, size: 8, offset: 728)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2704, file: !2705, line: 486, baseType: !2716, size: 8, offset: 736)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2704, file: !2705, line: 487, baseType: !2716, size: 8, offset: 744)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2704, file: !2705, line: 488, baseType: !2716, size: 8, offset: 752)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2704, file: !2705, line: 489, baseType: !2716, size: 8, offset: 760)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2704, file: !2705, line: 490, baseType: !2716, size: 8, offset: 768)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2704, file: !2705, line: 491, baseType: !2716, size: 8, offset: 776)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2704, file: !2705, line: 492, baseType: !2716, size: 8, offset: 784)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2704, file: !2705, line: 493, baseType: !2716, size: 8, offset: 792)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2704, file: !2705, line: 494, baseType: !2716, size: 8, offset: 800)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2704, file: !2705, line: 495, baseType: !2716, size: 8, offset: 808)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2704, file: !2705, line: 496, baseType: !2716, size: 8, offset: 816)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2704, file: !2705, line: 497, baseType: !2716, size: 8, offset: 824)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2704, file: !2705, line: 498, baseType: !2716, size: 8, offset: 832)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2704, file: !2705, line: 499, baseType: !2716, size: 8, offset: 840)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2704, file: !2705, line: 500, baseType: !2716, size: 8, offset: 848)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2704, file: !2705, line: 501, baseType: !2716, size: 8, offset: 856)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2704, file: !2705, line: 502, baseType: !2716, size: 8, offset: 864)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2704, file: !2705, line: 503, baseType: !2716, size: 8, offset: 872)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2704, file: !2705, line: 504, baseType: !2716, size: 8, offset: 880)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2704, file: !2705, line: 505, baseType: !2716, size: 8, offset: 888)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2704, file: !2705, line: 506, baseType: !2716, size: 8, offset: 896)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2704, file: !2705, line: 507, baseType: !2716, size: 8, offset: 904)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2704, file: !2705, line: 508, baseType: !2716, size: 8, offset: 912)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2704, file: !2705, line: 509, baseType: !2716, size: 8, offset: 920)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2704, file: !2705, line: 510, baseType: !2716, size: 8, offset: 928)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2704, file: !2705, line: 511, baseType: !2716, size: 8, offset: 936)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2704, file: !2705, line: 512, baseType: !2716, size: 8, offset: 944)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2704, file: !2705, line: 513, baseType: !2716, size: 8, offset: 952)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2704, file: !2705, line: 514, baseType: !2716, size: 8, offset: 960)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2704, file: !2705, line: 515, baseType: !2716, size: 8, offset: 968)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2704, file: !2705, line: 516, baseType: !2716, size: 8, offset: 976)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2704, file: !2705, line: 517, baseType: !2716, size: 8, offset: 984)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2704, file: !2705, line: 518, baseType: !2716, size: 8, offset: 992)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2704, file: !2705, line: 519, baseType: !2716, size: 8, offset: 1000)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2704, file: !2705, line: 520, baseType: !2716, size: 8, offset: 1008)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2704, file: !2705, line: 521, baseType: !2716, size: 8, offset: 1016)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2704, file: !2705, line: 522, baseType: !2716, size: 8, offset: 1024)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2704, file: !2705, line: 523, baseType: !2716, size: 8, offset: 1032)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2704, file: !2705, line: 524, baseType: !2716, size: 8, offset: 1040)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2704, file: !2705, line: 525, baseType: !2716, size: 8, offset: 1048)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2704, file: !2705, line: 526, baseType: !2716, size: 8, offset: 1056)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2704, file: !2705, line: 527, baseType: !2716, size: 8, offset: 1064)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2704, file: !2705, line: 528, baseType: !2716, size: 8, offset: 1072)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2704, file: !2705, line: 529, baseType: !2716, size: 8, offset: 1080)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2704, file: !2705, line: 530, baseType: !2716, size: 8, offset: 1088)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2704, file: !2705, line: 531, baseType: !2716, size: 8, offset: 1096)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2704, file: !2705, line: 532, baseType: !2716, size: 8, offset: 1104)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2704, file: !2705, line: 533, baseType: !2716, size: 8, offset: 1112)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2704, file: !2705, line: 534, baseType: !2716, size: 8, offset: 1120)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2704, file: !2705, line: 535, baseType: !2716, size: 8, offset: 1128)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2704, file: !2705, line: 536, baseType: !2716, size: 8, offset: 1136)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2704, file: !2705, line: 537, baseType: !2716, size: 8, offset: 1144)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2704, file: !2705, line: 538, baseType: !2716, size: 8, offset: 1152)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2704, file: !2705, line: 539, baseType: !2716, size: 8, offset: 1160)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2704, file: !2705, line: 540, baseType: !2716, size: 8, offset: 1168)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2704, file: !2705, line: 541, baseType: !2716, size: 8, offset: 1176)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2704, file: !2705, line: 542, baseType: !2716, size: 8, offset: 1184)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2704, file: !2705, line: 543, baseType: !2716, size: 8, offset: 1192)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2704, file: !2705, line: 544, baseType: !2716, size: 8, offset: 1200)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2704, file: !2705, line: 545, baseType: !2716, size: 8, offset: 1208)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2704, file: !2705, line: 546, baseType: !2716, size: 8, offset: 1216)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2704, file: !2705, line: 547, baseType: !2716, size: 8, offset: 1224)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2704, file: !2705, line: 548, baseType: !2716, size: 8, offset: 1232)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2704, file: !2705, line: 549, baseType: !2716, size: 8, offset: 1240)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2704, file: !2705, line: 550, baseType: !2716, size: 8, offset: 1248)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2704, file: !2705, line: 551, baseType: !2716, size: 8, offset: 1256)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2704, file: !2705, line: 552, baseType: !2716, size: 8, offset: 1264)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2704, file: !2705, line: 553, baseType: !2716, size: 8, offset: 1272)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2704, file: !2705, line: 554, baseType: !2716, size: 8, offset: 1280)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2704, file: !2705, line: 555, baseType: !2716, size: 8, offset: 1288)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2704, file: !2705, line: 556, baseType: !2716, size: 8, offset: 1296)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2704, file: !2705, line: 557, baseType: !2716, size: 8, offset: 1304)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2704, file: !2705, line: 558, baseType: !2716, size: 8, offset: 1312)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2704, file: !2705, line: 559, baseType: !2716, size: 8, offset: 1320)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2704, file: !2705, line: 560, baseType: !2716, size: 8, offset: 1328)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2704, file: !2705, line: 561, baseType: !2716, size: 8, offset: 1336)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2704, file: !2705, line: 562, baseType: !2716, size: 8, offset: 1344)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2704, file: !2705, line: 563, baseType: !2716, size: 8, offset: 1352)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2704, file: !2705, line: 564, baseType: !2716, size: 8, offset: 1360)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2704, file: !2705, line: 565, baseType: !2716, size: 8, offset: 1368)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2704, file: !2705, line: 566, baseType: !2716, size: 8, offset: 1376)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2704, file: !2705, line: 567, baseType: !2716, size: 8, offset: 1384)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2704, file: !2705, line: 568, baseType: !2716, size: 8, offset: 1392)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2704, file: !2705, line: 569, baseType: !2716, size: 8, offset: 1400)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2704, file: !2705, line: 570, baseType: !2716, size: 8, offset: 1408)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2704, file: !2705, line: 571, baseType: !2716, size: 8, offset: 1416)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2704, file: !2705, line: 572, baseType: !2716, size: 8, offset: 1424)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2704, file: !2705, line: 573, baseType: !2716, size: 8, offset: 1432)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2704, file: !2705, line: 574, baseType: !2716, size: 8, offset: 1440)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1559, file: !135, line: 3405, baseType: !2872, size: 384)
!2872 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !2873)
!2873 = !{!2874, !2875}
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2872, file: !135, line: 3353, baseType: !1595, size: 192)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2872, file: !135, line: 3356, baseType: !2876, size: 192, offset: 192)
!2876 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2705, line: 578, size: 192, elements: !2877)
!2877 = !{!2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888}
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2876, file: !2705, line: 580, baseType: !1653, size: 32)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2876, file: !2705, line: 581, baseType: !1653, size: 32, offset: 32)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2876, file: !2705, line: 582, baseType: !1653, size: 32, offset: 64)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2876, file: !2705, line: 583, baseType: !1653, size: 32, offset: 96)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2876, file: !2705, line: 584, baseType: !1676, size: 8, offset: 128)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2876, file: !2705, line: 585, baseType: !1676, size: 8, offset: 136)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2876, file: !2705, line: 586, baseType: !1676, size: 8, offset: 144)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2876, file: !2705, line: 587, baseType: !1676, size: 8, offset: 152)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2876, file: !2705, line: 588, baseType: !1676, size: 8, offset: 160)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2876, file: !2705, line: 589, baseType: !1676, size: 8, offset: 168)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2876, file: !2705, line: 590, baseType: !1676, size: 8, offset: 176)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1554, file: !378, line: 49, baseType: !1887, size: 64, offset: 64)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "counters", scope: !1554, file: !378, line: 50, baseType: !2891, size: 64, offset: 128)
!2891 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2099, size: 64)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1554, file: !378, line: 51, baseType: !1550, size: 64, offset: 192)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1551, file: !378, line: 53, baseType: !377, size: 32, offset: 256)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "n_counters", scope: !1551, file: !378, line: 54, baseType: !7, size: 32, offset: 288)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "hdata", scope: !1551, file: !378, line: 62, baseType: !2896, size: 64, offset: 320)
!2896 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1551, file: !378, line: 55, size: 64, elements: !2897)
!2897 = !{!2898}
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "intvl", scope: !2896, file: !378, line: 61, baseType: !2899, size: 64)
!2899 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2896, file: !378, line: 57, size: 64, elements: !2900)
!2900 = !{!2901, !2902}
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "int_start", scope: !2899, file: !378, line: 59, baseType: !1653, size: 32)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "steps", scope: !2899, file: !378, line: 60, baseType: !7, size: 32, offset: 32)
!2903 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_histogram_value", file: !378, line: 66, baseType: !2904)
!2904 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2905, size: 64)
!2905 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1551)
!2906 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !388, line: 60, baseType: !2907)
!2907 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2908, size: 64)
!2908 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1889)
!2909 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2910, size: 64)
!2910 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !135, line: 5199, flags: DIFlagFwdDecl)
!2911 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1549, size: 64)
!2912 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2913, size: 64)
!2913 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_histogram_value_heap", file: !378, line: 69, baseType: !2914)
!2914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_histogram_value_heap", file: !378, line: 69, size: 128, elements: !2915)
!2915 = !{!2916}
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2914, file: !378, line: 69, baseType: !2917, size: 128)
!2917 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_histogram_value_base", file: !378, line: 68, baseType: !2918)
!2918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_histogram_value_base", file: !378, line: 68, size: 128, elements: !2919)
!2919 = !{!2920, !2921, !2922}
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2918, file: !378, line: 68, baseType: !7, size: 32)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2918, file: !378, line: 68, baseType: !7, size: 32, offset: 32)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2918, file: !378, line: 68, baseType: !2923, size: 64, offset: 64)
!2923 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1549, size: 64, elements: !1657)
!2924 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2925, size: 64)
!2925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2926, size: 64)
!2926 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !1343, line: 181, size: 2496, elements: !2927)
!2927 = !{!2928, !2929, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965, !2966, !2967, !3069, !3091, !3101, !3105, !3131, !3140, !3141, !3142, !3143, !3144, !3145, !3146, !3147, !3148, !3149, !3150, !3151, !3152, !3153}
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2926, file: !1343, line: 182, baseType: !1557, size: 64)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !2926, file: !1343, line: 183, baseType: !2930, size: 64, offset: 64)
!2930 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2931, size: 64)
!2931 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !1343, line: 314, size: 768, elements: !2932)
!2932 = !{!2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2944, !2945, !2946, !2947, !2949, !2950, !2951}
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2931, file: !1343, line: 316, baseType: !2099, size: 64)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !2931, file: !1343, line: 317, baseType: !2925, size: 64, offset: 64)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !2931, file: !1343, line: 318, baseType: !2925, size: 64, offset: 128)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !2931, file: !1343, line: 319, baseType: !2930, size: 64, offset: 192)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !2931, file: !1343, line: 320, baseType: !2930, size: 64, offset: 256)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !2931, file: !1343, line: 321, baseType: !2930, size: 64, offset: 320)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !2931, file: !1343, line: 322, baseType: !2930, size: 64, offset: 384)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !2931, file: !1343, line: 323, baseType: !1887, size: 64, offset: 448)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2931, file: !1343, line: 324, baseType: !1840, size: 64, offset: 512)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !2931, file: !1343, line: 327, baseType: !2943, size: 32, offset: 576)
!2943 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !1343, line: 312, baseType: !1342)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !2931, file: !1343, line: 330, baseType: !7, size: 32, offset: 608)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2931, file: !1343, line: 334, baseType: !1653, size: 32, offset: 640)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2931, file: !1343, line: 336, baseType: !1653, size: 32, offset: 672)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2931, file: !1343, line: 338, baseType: !2948, size: 16, offset: 704)
!2948 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !2931, file: !1343, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !2931, file: !1343, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !2931, file: !1343, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !2926, file: !1343, line: 184, baseType: !2930, size: 64, offset: 128)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2926, file: !1343, line: 185, baseType: !2925, size: 64, offset: 192)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !2926, file: !1343, line: 186, baseType: !2925, size: 64, offset: 256)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !2926, file: !1343, line: 188, baseType: !2925, size: 64, offset: 320)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !2926, file: !1343, line: 190, baseType: !2925, size: 64, offset: 384)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !2926, file: !1343, line: 192, baseType: !2925, size: 64, offset: 448)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !2926, file: !1343, line: 194, baseType: !2925, size: 64, offset: 512)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !2926, file: !1343, line: 196, baseType: !2925, size: 64, offset: 576)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !2926, file: !1343, line: 197, baseType: !2925, size: 64, offset: 640)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !2926, file: !1343, line: 198, baseType: !2925, size: 64, offset: 704)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !2926, file: !1343, line: 199, baseType: !2925, size: 64, offset: 768)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !2926, file: !1343, line: 202, baseType: !2925, size: 64, offset: 832)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !2926, file: !1343, line: 204, baseType: !2925, size: 64, offset: 896)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !2926, file: !1343, line: 207, baseType: !2353, size: 64, offset: 960)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2926, file: !1343, line: 209, baseType: !1840, size: 64, offset: 1024)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !2926, file: !1343, line: 214, baseType: !2968, size: 64, offset: 1088)
!2968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2969, size: 64)
!2969 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !2311, line: 177, baseType: !2970)
!2970 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !2311, line: 177, size: 128, elements: !2971)
!2971 = !{!2972}
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2970, file: !2311, line: 177, baseType: !2973, size: 128)
!2973 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !2311, line: 176, baseType: !2974)
!2974 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !2311, line: 176, size: 128, elements: !2975)
!2975 = !{!2976, !2977, !2978}
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2974, file: !2311, line: 176, baseType: !7, size: 32)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2974, file: !2311, line: 176, baseType: !7, size: 32, offset: 32)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2974, file: !2311, line: 176, baseType: !2979, size: 64, offset: 64)
!2979 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2980, size: 64, elements: !1657)
!2980 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !2311, line: 174, baseType: !2981)
!2981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2982, size: 64)
!2982 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !1366, line: 173, size: 1152, elements: !2983)
!2983 = !{!2984, !3008, !3012, !3035, !3036, !3040, !3045, !3046, !3050}
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2982, file: !1366, line: 175, baseType: !2985, size: 640)
!2985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !1366, line: 114, size: 640, elements: !2986)
!2986 = !{!2987, !2988, !2989, !2993, !2997, !2999, !3000, !3001, !3003, !3004, !3005, !3006, !3007}
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2985, file: !1366, line: 117, baseType: !1365, size: 32)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2985, file: !1366, line: 121, baseType: !1760, size: 64, offset: 64)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2985, file: !1366, line: 125, baseType: !2990, size: 64, offset: 128)
!2990 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2991, size: 64)
!2991 = !DISubroutineType(types: !2992)
!2992 = !{!1676}
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2985, file: !1366, line: 130, baseType: !2994, size: 64, offset: 192)
!2994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2995, size: 64)
!2995 = !DISubroutineType(types: !2996)
!2996 = !{!7}
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2985, file: !1366, line: 133, baseType: !2998, size: 64, offset: 256)
!2998 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2985, size: 64)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2985, file: !1366, line: 136, baseType: !2998, size: 64, offset: 320)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2985, file: !1366, line: 139, baseType: !1653, size: 32, offset: 384)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2985, file: !1366, line: 143, baseType: !3002, size: 32, offset: 416)
!3002 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !1373, line: 80, baseType: !1372)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2985, file: !1366, line: 146, baseType: !7, size: 32, offset: 448)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2985, file: !1366, line: 147, baseType: !7, size: 32, offset: 480)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2985, file: !1366, line: 148, baseType: !7, size: 32, offset: 512)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2985, file: !1366, line: 151, baseType: !7, size: 32, offset: 544)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2985, file: !1366, line: 152, baseType: !7, size: 32, offset: 576)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !2982, file: !1366, line: 179, baseType: !3009, size: 64, offset: 640)
!3009 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3010, size: 64)
!3010 = !DISubroutineType(types: !3011)
!3011 = !{null}
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !2982, file: !1366, line: 182, baseType: !3013, size: 64, offset: 704)
!3013 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3014, size: 64)
!3014 = !DISubroutineType(types: !3015)
!3015 = !{null, !3016}
!3016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3017, size: 64)
!3017 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !1343, line: 276, size: 192, elements: !3018)
!3018 = !{!3019, !3020, !3034}
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !3017, file: !1343, line: 278, baseType: !2353, size: 64)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !3017, file: !1343, line: 279, baseType: !3021, size: 64, offset: 64)
!3021 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3022, size: 64)
!3022 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !1343, line: 272, baseType: !3023)
!3023 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !1343, line: 272, size: 128, elements: !3024)
!3024 = !{!3025}
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3023, file: !1343, line: 272, baseType: !3026, size: 128)
!3026 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !1343, line: 270, baseType: !3027)
!3027 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !1343, line: 270, size: 128, elements: !3028)
!3028 = !{!3029, !3030, !3031}
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3027, file: !1343, line: 270, baseType: !7, size: 32)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3027, file: !1343, line: 270, baseType: !7, size: 32, offset: 32)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3027, file: !1343, line: 270, baseType: !3032, size: 64, offset: 64)
!3032 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3033, size: 64, elements: !1657)
!3033 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !1343, line: 268, baseType: !2925)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3017, file: !1343, line: 280, baseType: !1840, size: 64, offset: 128)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !2982, file: !1366, line: 187, baseType: !3009, size: 64, offset: 768)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !2982, file: !1366, line: 188, baseType: !3037, size: 64, offset: 832)
!3037 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3038, size: 64)
!3038 = !DISubroutineType(types: !3039)
!3039 = !{null, !2925}
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !2982, file: !1366, line: 191, baseType: !3041, size: 64, offset: 896)
!3041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3042, size: 64)
!3042 = !DISubroutineType(types: !3043)
!3043 = !{null, !2925, !3044}
!3044 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1887, size: 64)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !2982, file: !1366, line: 195, baseType: !7, size: 32, offset: 960)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !2982, file: !1366, line: 196, baseType: !3047, size: 64, offset: 1024)
!3047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3048, size: 64)
!3048 = !DISubroutineType(types: !3049)
!3049 = !{!7, !2925}
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !2982, file: !1366, line: 197, baseType: !3051, size: 64, offset: 1088)
!3051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3052, size: 64)
!3052 = !DISubroutineType(types: !3053)
!3053 = !{null, !3054}
!3054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3055, size: 64)
!3055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !1343, line: 358, size: 320, elements: !3056)
!3056 = !{!3057, !3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3068}
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3055, file: !1343, line: 359, baseType: !1557, size: 64)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3055, file: !1343, line: 361, baseType: !3054, size: 64, offset: 64)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !3055, file: !1343, line: 363, baseType: !3054, size: 64, offset: 128)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !3055, file: !1343, line: 366, baseType: !3054, size: 64, offset: 192)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3055, file: !1343, line: 368, baseType: !1653, size: 32, offset: 256)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !3055, file: !1343, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !3055, file: !1343, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !3055, file: !1343, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3055, file: !1343, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !3055, file: !1343, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3055, file: !1343, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3055, file: !1343, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !2926, file: !1343, line: 216, baseType: !3070, size: 320, offset: 1152)
!3070 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !1343, line: 88, size: 320, elements: !3071)
!3071 = !{!3072, !3075, !3083, !3084, !3085, !3086, !3087, !3088, !3089, !3090}
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !3070, file: !1343, line: 90, baseType: !3073, size: 64)
!3073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3074, size: 64)
!3074 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !1343, line: 51, flags: DIFlagFwdDecl)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !3070, file: !1343, line: 92, baseType: !3076, size: 192, offset: 64)
!3076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !1343, line: 57, size: 192, elements: !3077)
!3077 = !{!3078, !3079, !3080, !3081, !3082}
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !3076, file: !1343, line: 60, baseType: !1612, size: 64)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !3076, file: !1343, line: 63, baseType: !1653, size: 32, offset: 64)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !3076, file: !1343, line: 65, baseType: !1653, size: 32, offset: 96)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !3076, file: !1343, line: 67, baseType: !1653, size: 32, offset: 128)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !3076, file: !1343, line: 69, baseType: !1653, size: 32, offset: 160)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !3070, file: !1343, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3070, file: !1343, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3070, file: !1343, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !3070, file: !1343, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !3070, file: !1343, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !3070, file: !1343, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !3070, file: !1343, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !3070, file: !1343, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !2926, file: !1343, line: 217, baseType: !3092, size: 320, offset: 1472)
!3092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !1343, line: 126, size: 320, elements: !3093)
!3093 = !{!3094, !3095, !3096, !3097, !3098, !3099, !3100}
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !3092, file: !1343, line: 128, baseType: !1612, size: 64)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !3092, file: !1343, line: 130, baseType: !1612, size: 64, offset: 64)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !3092, file: !1343, line: 134, baseType: !2925, size: 64, offset: 128)
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !3092, file: !1343, line: 137, baseType: !1653, size: 32, offset: 192)
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3092, file: !1343, line: 138, baseType: !1653, size: 32, offset: 224)
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !3092, file: !1343, line: 141, baseType: !1653, size: 32, offset: 256)
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !3092, file: !1343, line: 144, baseType: !1676, size: 8, offset: 288)
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2926, file: !1343, line: 218, baseType: !3102, size: 32, offset: 1792)
!3102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !1343, line: 150, size: 32, elements: !3103)
!3103 = !{!3104}
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !3102, file: !1343, line: 151, baseType: !7, size: 32)
!3105 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !2926, file: !1343, line: 219, baseType: !3106, size: 192, offset: 1856)
!3106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !1343, line: 171, size: 192, elements: !3107)
!3107 = !{!3108, !3129, !3130}
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !3106, file: !1343, line: 173, baseType: !3109, size: 64)
!3109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3110, size: 64)
!3110 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !1343, line: 169, baseType: !3111)
!3111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !1343, line: 169, size: 128, elements: !3112)
!3112 = !{!3113}
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3111, file: !1343, line: 169, baseType: !3114, size: 128)
!3114 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !1343, line: 168, baseType: !3115)
!3115 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !1343, line: 168, size: 128, elements: !3116)
!3116 = !{!3117, !3118, !3119}
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3115, file: !1343, line: 168, baseType: !7, size: 32)
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3115, file: !1343, line: 168, baseType: !7, size: 32, offset: 32)
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3115, file: !1343, line: 168, baseType: !3120, size: 64, offset: 64)
!3120 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3121, size: 64, elements: !1657)
!3121 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !1343, line: 167, baseType: !3122)
!3122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3123, size: 64)
!3123 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !1343, line: 156, size: 192, elements: !3124)
!3124 = !{!3125, !3126, !3127, !3128}
!3125 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !3123, file: !1343, line: 159, baseType: !1557, size: 64)
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !3123, file: !1343, line: 161, baseType: !1557, size: 64, offset: 64)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !3123, file: !1343, line: 163, baseType: !1676, size: 8, offset: 128)
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !3123, file: !1343, line: 165, baseType: !1676, size: 8, offset: 136)
!3129 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !3106, file: !1343, line: 174, baseType: !2436, size: 64, offset: 64)
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !3106, file: !1343, line: 175, baseType: !2436, size: 64, offset: 128)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !2926, file: !1343, line: 220, baseType: !3132, size: 256, offset: 2048)
!3132 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !1343, line: 74, size: 256, elements: !3133)
!3133 = !{!3134, !3135, !3136, !3137, !3138, !3139}
!3134 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !3132, file: !1343, line: 76, baseType: !1612, size: 64)
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !3132, file: !1343, line: 77, baseType: !1612, size: 64, offset: 64)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3132, file: !1343, line: 78, baseType: !1557, size: 64, offset: 128)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !3132, file: !1343, line: 79, baseType: !1676, size: 8, offset: 192)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !3132, file: !1343, line: 80, baseType: !1676, size: 8, offset: 200)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !3132, file: !1343, line: 82, baseType: !1676, size: 8, offset: 208)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2926, file: !1343, line: 223, baseType: !2099, size: 64, offset: 2304)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2926, file: !1343, line: 225, baseType: !1653, size: 32, offset: 2368)
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !2926, file: !1343, line: 227, baseType: !1653, size: 32, offset: 2400)
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !2926, file: !1343, line: 231, baseType: !1653, size: 32, offset: 2432)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !2926, file: !1343, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !2926, file: !1343, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !2926, file: !1343, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !2926, file: !1343, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !2926, file: !1343, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !2926, file: !1343, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !2926, file: !1343, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2926, file: !1343, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !2926, file: !1343, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!3153 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !2926, file: !1343, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!3154 = !{!3155, !0, !3167, !3169}
!3155 = !DIGlobalVariableExpression(var: !3156, expr: !DIExpression())
!3156 = distinct !DIGlobalVariable(name: "value_prof_hooks", scope: !2, file: !3, line: 49, type: !3157, isLocal: true, isDefinition: true)
!3157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3158, size: 64)
!3158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "value_prof_hooks", file: !3, line: 1498, size: 128, elements: !3159)
!3159 = !{!3160, !3166}
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "find_values_to_profile", scope: !3158, file: !3, line: 1500, baseType: !3161, size: 64)
!3161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3162, size: 64)
!3162 = !DISubroutineType(types: !3163)
!3163 = !{null, !3164}
!3164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3165, size: 64)
!3165 = !DIDerivedType(tag: DW_TAG_typedef, name: "histogram_values", file: !378, line: 71, baseType: !2912)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "value_profile_transformations", scope: !3158, file: !3, line: 1504, baseType: !2990, size: 64, offset: 64)
!3167 = !DIGlobalVariableExpression(var: !3168, expr: !DIExpression())
!3168 = distinct !DIGlobalVariable(name: "gimple_value_prof_hooks", scope: !2, file: !3, line: 1696, type: !3158, isLocal: true, isDefinition: true)
!3169 = !DIGlobalVariableExpression(var: !3170, expr: !DIExpression())
!3170 = distinct !DIGlobalVariable(name: "pid_map", scope: !2, file: !3, line: 1049, type: !2924, isLocal: true, isDefinition: true)
!3171 = !{i32 7, !"Dwarf Version", i32 4}
!3172 = !{i32 2, !"Debug Info Version", i32 3}
!3173 = !{i32 1, !"wchar_size", i32 4}
!3174 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3175 = distinct !DISubprogram(name: "gimple_histogram_value", scope: !3, file: !3, line: 146, type: !3176, scopeLine: 147, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3176 = !DISubroutineType(types: !3177)
!3177 = !{!1549, !2309, !1887}
!3178 = !{}
!3179 = !DILocalVariable(name: "fun", arg: 1, scope: !3175, file: !3, line: 146, type: !2309)
!3180 = !DILocation(line: 146, column: 42, scope: !3175)
!3181 = !DILocalVariable(name: "stmt", arg: 2, scope: !3175, file: !3, line: 146, type: !1887)
!3182 = !DILocation(line: 146, column: 54, scope: !3175)
!3183 = !DILocation(line: 148, column: 8, scope: !3184)
!3184 = distinct !DILexicalBlock(scope: !3175, file: !3, line: 148, column: 7)
!3185 = !DILocation(line: 148, column: 7, scope: !3175)
!3186 = !DILocation(line: 149, column: 5, scope: !3184)
!3187 = !DILocation(line: 150, column: 49, scope: !3175)
!3188 = !DILocation(line: 150, column: 73, scope: !3175)
!3189 = !DILocation(line: 151, column: 7, scope: !3175)
!3190 = !DILocation(line: 151, column: 26, scope: !3175)
!3191 = !DILocation(line: 150, column: 28, scope: !3175)
!3192 = !DILocation(line: 150, column: 10, scope: !3175)
!3193 = !DILocation(line: 150, column: 3, scope: !3175)
!3194 = !DILocation(line: 152, column: 1, scope: !3175)
!3195 = distinct !DISubprogram(name: "gimple_add_histogram_value", scope: !3, file: !3, line: 157, type: !3196, scopeLine: 159, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3196 = !DISubroutineType(types: !3197)
!3197 = !{null, !2309, !1887, !1549}
!3198 = !DILocalVariable(name: "fun", arg: 1, scope: !3195, file: !3, line: 157, type: !2309)
!3199 = !DILocation(line: 157, column: 46, scope: !3195)
!3200 = !DILocalVariable(name: "stmt", arg: 2, scope: !3195, file: !3, line: 157, type: !1887)
!3201 = !DILocation(line: 157, column: 58, scope: !3195)
!3202 = !DILocalVariable(name: "hist", arg: 3, scope: !3195, file: !3, line: 158, type: !1549)
!3203 = !DILocation(line: 158, column: 24, scope: !3195)
!3204 = !DILocation(line: 160, column: 47, scope: !3195)
!3205 = !DILocation(line: 160, column: 52, scope: !3195)
!3206 = !DILocation(line: 160, column: 23, scope: !3195)
!3207 = !DILocation(line: 160, column: 3, scope: !3195)
!3208 = !DILocation(line: 160, column: 9, scope: !3195)
!3209 = !DILocation(line: 160, column: 16, scope: !3195)
!3210 = !DILocation(line: 160, column: 21, scope: !3195)
!3211 = !DILocation(line: 161, column: 24, scope: !3195)
!3212 = !DILocation(line: 161, column: 29, scope: !3195)
!3213 = !DILocation(line: 161, column: 35, scope: !3195)
!3214 = !DILocation(line: 161, column: 3, scope: !3195)
!3215 = !DILocation(line: 162, column: 1, scope: !3195)
!3216 = distinct !DISubprogram(name: "set_histogram_value", scope: !3, file: !3, line: 123, type: !3196, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3217 = !DILocalVariable(name: "fun", arg: 1, scope: !3216, file: !3, line: 123, type: !2309)
!3218 = !DILocation(line: 123, column: 39, scope: !3216)
!3219 = !DILocalVariable(name: "stmt", arg: 2, scope: !3216, file: !3, line: 123, type: !1887)
!3220 = !DILocation(line: 123, column: 51, scope: !3216)
!3221 = !DILocalVariable(name: "hist", arg: 3, scope: !3216, file: !3, line: 123, type: !1549)
!3222 = !DILocation(line: 123, column: 73, scope: !3216)
!3223 = !DILocalVariable(name: "loc", scope: !3216, file: !3, line: 125, type: !2374)
!3224 = !DILocation(line: 125, column: 10, scope: !3216)
!3225 = !DILocation(line: 126, column: 8, scope: !3226)
!3226 = distinct !DILexicalBlock(scope: !3216, file: !3, line: 126, column: 7)
!3227 = !DILocation(line: 126, column: 13, scope: !3226)
!3228 = !DILocation(line: 126, column: 17, scope: !3226)
!3229 = !DILocation(line: 126, column: 7, scope: !3216)
!3230 = !DILocation(line: 127, column: 5, scope: !3226)
!3231 = !DILocation(line: 128, column: 8, scope: !3232)
!3232 = distinct !DILexicalBlock(scope: !3216, file: !3, line: 128, column: 7)
!3233 = !DILocation(line: 128, column: 7, scope: !3216)
!3234 = !DILocation(line: 129, column: 30, scope: !3232)
!3235 = !DILocation(line: 129, column: 5, scope: !3232)
!3236 = !DILocation(line: 129, column: 28, scope: !3232)
!3237 = !DILocation(line: 131, column: 35, scope: !3216)
!3238 = !DILocation(line: 131, column: 59, scope: !3216)
!3239 = !DILocation(line: 132, column: 35, scope: !3216)
!3240 = !DILocation(line: 132, column: 54, scope: !3216)
!3241 = !DILocation(line: 133, column: 7, scope: !3216)
!3242 = !DILocation(line: 131, column: 9, scope: !3216)
!3243 = !DILocation(line: 131, column: 7, scope: !3216)
!3244 = !DILocation(line: 134, column: 8, scope: !3245)
!3245 = distinct !DILexicalBlock(scope: !3216, file: !3, line: 134, column: 7)
!3246 = !DILocation(line: 134, column: 7, scope: !3216)
!3247 = !DILocation(line: 136, column: 11, scope: !3248)
!3248 = distinct !DILexicalBlock(scope: !3249, file: !3, line: 136, column: 11)
!3249 = distinct !DILexicalBlock(scope: !3245, file: !3, line: 135, column: 5)
!3250 = !DILocation(line: 136, column: 11, scope: !3249)
!3251 = !DILocation(line: 137, column: 19, scope: !3248)
!3252 = !DILocation(line: 137, column: 43, scope: !3248)
!3253 = !DILocation(line: 137, column: 2, scope: !3248)
!3254 = !DILocation(line: 138, column: 7, scope: !3249)
!3255 = !DILocation(line: 140, column: 10, scope: !3216)
!3256 = !DILocation(line: 140, column: 4, scope: !3216)
!3257 = !DILocation(line: 140, column: 8, scope: !3216)
!3258 = !DILocation(line: 141, column: 1, scope: !3216)
!3259 = distinct !DISubprogram(name: "gimple_remove_histogram_value", scope: !3, file: !3, line: 168, type: !3196, scopeLine: 170, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3260 = !DILocalVariable(name: "fun", arg: 1, scope: !3259, file: !3, line: 168, type: !2309)
!3261 = !DILocation(line: 168, column: 49, scope: !3259)
!3262 = !DILocalVariable(name: "stmt", arg: 2, scope: !3259, file: !3, line: 168, type: !1887)
!3263 = !DILocation(line: 168, column: 61, scope: !3259)
!3264 = !DILocalVariable(name: "hist", arg: 3, scope: !3259, file: !3, line: 169, type: !1549)
!3265 = !DILocation(line: 169, column: 27, scope: !3259)
!3266 = !DILocalVariable(name: "hist2", scope: !3259, file: !3, line: 171, type: !1549)
!3267 = !DILocation(line: 171, column: 19, scope: !3259)
!3268 = !DILocation(line: 171, column: 51, scope: !3259)
!3269 = !DILocation(line: 171, column: 56, scope: !3259)
!3270 = !DILocation(line: 171, column: 27, scope: !3259)
!3271 = !DILocation(line: 172, column: 7, scope: !3272)
!3272 = distinct !DILexicalBlock(scope: !3259, file: !3, line: 172, column: 7)
!3273 = !DILocation(line: 172, column: 15, scope: !3272)
!3274 = !DILocation(line: 172, column: 12, scope: !3272)
!3275 = !DILocation(line: 172, column: 7, scope: !3259)
!3276 = !DILocation(line: 174, column: 28, scope: !3277)
!3277 = distinct !DILexicalBlock(scope: !3272, file: !3, line: 173, column: 5)
!3278 = !DILocation(line: 174, column: 33, scope: !3277)
!3279 = !DILocation(line: 174, column: 39, scope: !3277)
!3280 = !DILocation(line: 174, column: 45, scope: !3277)
!3281 = !DILocation(line: 174, column: 52, scope: !3277)
!3282 = !DILocation(line: 174, column: 7, scope: !3277)
!3283 = !DILocation(line: 175, column: 5, scope: !3277)
!3284 = !DILocation(line: 178, column: 7, scope: !3285)
!3285 = distinct !DILexicalBlock(scope: !3272, file: !3, line: 177, column: 5)
!3286 = !DILocation(line: 178, column: 14, scope: !3285)
!3287 = !DILocation(line: 178, column: 21, scope: !3285)
!3288 = !DILocation(line: 178, column: 28, scope: !3285)
!3289 = !DILocation(line: 178, column: 36, scope: !3285)
!3290 = !DILocation(line: 178, column: 33, scope: !3285)
!3291 = !DILocation(line: 179, column: 10, scope: !3285)
!3292 = !DILocation(line: 179, column: 17, scope: !3285)
!3293 = !DILocation(line: 179, column: 24, scope: !3285)
!3294 = !DILocation(line: 179, column: 8, scope: !3285)
!3295 = distinct !{!3295, !3284, !3293}
!3296 = !DILocation(line: 180, column: 28, scope: !3285)
!3297 = !DILocation(line: 180, column: 34, scope: !3285)
!3298 = !DILocation(line: 180, column: 41, scope: !3285)
!3299 = !DILocation(line: 180, column: 7, scope: !3285)
!3300 = !DILocation(line: 180, column: 14, scope: !3285)
!3301 = !DILocation(line: 180, column: 21, scope: !3285)
!3302 = !DILocation(line: 180, column: 26, scope: !3285)
!3303 = !DILocation(line: 182, column: 9, scope: !3259)
!3304 = !DILocation(line: 182, column: 15, scope: !3259)
!3305 = !DILocation(line: 182, column: 22, scope: !3259)
!3306 = !DILocation(line: 182, column: 3, scope: !3259)
!3307 = !DILocation(line: 186, column: 9, scope: !3259)
!3308 = !DILocation(line: 186, column: 3, scope: !3259)
!3309 = !DILocation(line: 187, column: 1, scope: !3259)
!3310 = distinct !DISubprogram(name: "gimple_histogram_value_of_type", scope: !3, file: !3, line: 193, type: !3311, scopeLine: 195, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3311 = !DISubroutineType(types: !3312)
!3312 = !{!1549, !2309, !1887, !377}
!3313 = !DILocalVariable(name: "fun", arg: 1, scope: !3310, file: !3, line: 193, type: !2309)
!3314 = !DILocation(line: 193, column: 50, scope: !3310)
!3315 = !DILocalVariable(name: "stmt", arg: 2, scope: !3310, file: !3, line: 193, type: !1887)
!3316 = !DILocation(line: 193, column: 62, scope: !3310)
!3317 = !DILocalVariable(name: "type", arg: 3, scope: !3310, file: !3, line: 194, type: !377)
!3318 = !DILocation(line: 194, column: 20, scope: !3310)
!3319 = !DILocalVariable(name: "hist", scope: !3310, file: !3, line: 196, type: !1549)
!3320 = !DILocation(line: 196, column: 19, scope: !3310)
!3321 = !DILocation(line: 197, column: 39, scope: !3322)
!3322 = distinct !DILexicalBlock(scope: !3310, file: !3, line: 197, column: 3)
!3323 = !DILocation(line: 197, column: 44, scope: !3322)
!3324 = !DILocation(line: 197, column: 15, scope: !3322)
!3325 = !DILocation(line: 197, column: 13, scope: !3322)
!3326 = !DILocation(line: 197, column: 8, scope: !3322)
!3327 = !DILocation(line: 197, column: 51, scope: !3328)
!3328 = distinct !DILexicalBlock(scope: !3322, file: !3, line: 197, column: 3)
!3329 = !DILocation(line: 197, column: 3, scope: !3322)
!3330 = !DILocation(line: 199, column: 9, scope: !3331)
!3331 = distinct !DILexicalBlock(scope: !3328, file: !3, line: 199, column: 9)
!3332 = !DILocation(line: 199, column: 15, scope: !3331)
!3333 = !DILocation(line: 199, column: 23, scope: !3331)
!3334 = !DILocation(line: 199, column: 20, scope: !3331)
!3335 = !DILocation(line: 199, column: 9, scope: !3328)
!3336 = !DILocation(line: 200, column: 14, scope: !3331)
!3337 = !DILocation(line: 200, column: 7, scope: !3331)
!3338 = !DILocation(line: 198, column: 15, scope: !3328)
!3339 = !DILocation(line: 198, column: 21, scope: !3328)
!3340 = !DILocation(line: 198, column: 28, scope: !3328)
!3341 = !DILocation(line: 198, column: 13, scope: !3328)
!3342 = !DILocation(line: 197, column: 3, scope: !3328)
!3343 = distinct !{!3343, !3329, !3344}
!3344 = !DILocation(line: 200, column: 14, scope: !3322)
!3345 = !DILocation(line: 201, column: 3, scope: !3310)
!3346 = !DILocation(line: 202, column: 1, scope: !3310)
!3347 = distinct !DISubprogram(name: "dump_histograms_for_stmt", scope: !3, file: !3, line: 310, type: !3348, scopeLine: 311, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3348 = !DISubroutineType(types: !3349)
!3349 = !{null, !2309, !3350, !1887}
!3350 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3351, size: 64)
!3351 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3352, line: 7, baseType: !3353)
!3352 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3353 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3354, line: 49, size: 1728, elements: !3355)
!3354 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3355 = !{!3356, !3357, !3358, !3359, !3360, !3361, !3362, !3363, !3364, !3365, !3366, !3367, !3368, !3371, !3373, !3374, !3375, !3378, !3379, !3380, !3381, !3384, !3386, !3389, !3392, !3393, !3394, !3395, !3396}
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3353, file: !3354, line: 51, baseType: !1653, size: 32)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3353, file: !3354, line: 54, baseType: !1825, size: 64, offset: 64)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3353, file: !3354, line: 55, baseType: !1825, size: 64, offset: 128)
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3353, file: !3354, line: 56, baseType: !1825, size: 64, offset: 192)
!3360 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3353, file: !3354, line: 57, baseType: !1825, size: 64, offset: 256)
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3353, file: !3354, line: 58, baseType: !1825, size: 64, offset: 320)
!3362 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3353, file: !3354, line: 59, baseType: !1825, size: 64, offset: 384)
!3363 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3353, file: !3354, line: 60, baseType: !1825, size: 64, offset: 448)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3353, file: !3354, line: 61, baseType: !1825, size: 64, offset: 512)
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3353, file: !3354, line: 64, baseType: !1825, size: 64, offset: 576)
!3366 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3353, file: !3354, line: 65, baseType: !1825, size: 64, offset: 640)
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3353, file: !3354, line: 66, baseType: !1825, size: 64, offset: 704)
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3353, file: !3354, line: 68, baseType: !3369, size: 64, offset: 768)
!3369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3370, size: 64)
!3370 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3354, line: 36, flags: DIFlagFwdDecl)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3353, file: !3354, line: 70, baseType: !3372, size: 64, offset: 832)
!3372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3353, size: 64)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3353, file: !3354, line: 72, baseType: !1653, size: 32, offset: 896)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3353, file: !3354, line: 73, baseType: !1653, size: 32, offset: 928)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3353, file: !3354, line: 74, baseType: !3376, size: 64, offset: 960)
!3376 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !3377, line: 152, baseType: !1612)
!3377 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3353, file: !3354, line: 77, baseType: !2948, size: 16, offset: 1024)
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3353, file: !3354, line: 78, baseType: !2716, size: 8, offset: 1040)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3353, file: !3354, line: 79, baseType: !1655, size: 8, offset: 1048)
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3353, file: !3354, line: 81, baseType: !3382, size: 64, offset: 1088)
!3382 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3383, size: 64)
!3383 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3354, line: 43, baseType: null)
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3353, file: !3354, line: 89, baseType: !3385, size: 64, offset: 1152)
!3385 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !3377, line: 153, baseType: !1612)
!3386 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3353, file: !3354, line: 91, baseType: !3387, size: 64, offset: 1216)
!3387 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3388, size: 64)
!3388 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3354, line: 37, flags: DIFlagFwdDecl)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3353, file: !3354, line: 92, baseType: !3390, size: 64, offset: 1280)
!3390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3391, size: 64)
!3391 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3354, line: 38, flags: DIFlagFwdDecl)
!3392 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3353, file: !3354, line: 93, baseType: !3372, size: 64, offset: 1344)
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3353, file: !3354, line: 94, baseType: !1840, size: 64, offset: 1408)
!3394 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3353, file: !3354, line: 95, baseType: !2033, size: 64, offset: 1472)
!3395 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3353, file: !3354, line: 96, baseType: !1653, size: 32, offset: 1536)
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3353, file: !3354, line: 98, baseType: !3397, size: 160, offset: 1568)
!3397 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1656, size: 160, elements: !3398)
!3398 = !{!3399}
!3399 = !DISubrange(count: 20)
!3400 = !DILocalVariable(name: "fun", arg: 1, scope: !3347, file: !3, line: 310, type: !2309)
!3401 = !DILocation(line: 310, column: 44, scope: !3347)
!3402 = !DILocalVariable(name: "dump_file", arg: 2, scope: !3347, file: !3, line: 310, type: !3350)
!3403 = !DILocation(line: 310, column: 55, scope: !3347)
!3404 = !DILocalVariable(name: "stmt", arg: 3, scope: !3347, file: !3, line: 310, type: !1887)
!3405 = !DILocation(line: 310, column: 73, scope: !3347)
!3406 = !DILocalVariable(name: "hist", scope: !3347, file: !3, line: 312, type: !1549)
!3407 = !DILocation(line: 312, column: 19, scope: !3347)
!3408 = !DILocation(line: 313, column: 39, scope: !3409)
!3409 = distinct !DILexicalBlock(scope: !3347, file: !3, line: 313, column: 3)
!3410 = !DILocation(line: 313, column: 44, scope: !3409)
!3411 = !DILocation(line: 313, column: 15, scope: !3409)
!3412 = !DILocation(line: 313, column: 13, scope: !3409)
!3413 = !DILocation(line: 313, column: 8, scope: !3409)
!3414 = !DILocation(line: 313, column: 51, scope: !3415)
!3415 = distinct !DILexicalBlock(scope: !3409, file: !3, line: 313, column: 3)
!3416 = !DILocation(line: 313, column: 3, scope: !3409)
!3417 = !DILocation(line: 314, column: 26, scope: !3415)
!3418 = !DILocation(line: 314, column: 37, scope: !3415)
!3419 = !DILocation(line: 314, column: 4, scope: !3415)
!3420 = !DILocation(line: 313, column: 64, scope: !3415)
!3421 = !DILocation(line: 313, column: 70, scope: !3415)
!3422 = !DILocation(line: 313, column: 77, scope: !3415)
!3423 = !DILocation(line: 313, column: 62, scope: !3415)
!3424 = !DILocation(line: 313, column: 3, scope: !3415)
!3425 = distinct !{!3425, !3416, !3426}
!3426 = !DILocation(line: 314, column: 41, scope: !3409)
!3427 = !DILocation(line: 315, column: 1, scope: !3347)
!3428 = distinct !DISubprogram(name: "dump_histogram_value", scope: !3, file: !3, line: 207, type: !3429, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3429 = !DISubroutineType(types: !3430)
!3430 = !{null, !3350, !1549}
!3431 = !DILocalVariable(name: "dump_file", arg: 1, scope: !3428, file: !3, line: 207, type: !3350)
!3432 = !DILocation(line: 207, column: 29, scope: !3428)
!3433 = !DILocalVariable(name: "hist", arg: 2, scope: !3428, file: !3, line: 207, type: !1549)
!3434 = !DILocation(line: 207, column: 56, scope: !3428)
!3435 = !DILocation(line: 209, column: 11, scope: !3428)
!3436 = !DILocation(line: 209, column: 17, scope: !3428)
!3437 = !DILocation(line: 209, column: 3, scope: !3428)
!3438 = !DILocation(line: 212, column: 16, scope: !3439)
!3439 = distinct !DILexicalBlock(scope: !3428, file: !3, line: 210, column: 5)
!3440 = !DILocation(line: 213, column: 9, scope: !3439)
!3441 = !DILocation(line: 213, column: 15, scope: !3439)
!3442 = !DILocation(line: 213, column: 21, scope: !3439)
!3443 = !DILocation(line: 213, column: 27, scope: !3439)
!3444 = !DILocation(line: 214, column: 10, scope: !3439)
!3445 = !DILocation(line: 214, column: 16, scope: !3439)
!3446 = !DILocation(line: 214, column: 22, scope: !3439)
!3447 = !DILocation(line: 214, column: 28, scope: !3439)
!3448 = !DILocation(line: 215, column: 12, scope: !3439)
!3449 = !DILocation(line: 215, column: 18, scope: !3439)
!3450 = !DILocation(line: 215, column: 24, scope: !3439)
!3451 = !DILocation(line: 215, column: 30, scope: !3439)
!3452 = !DILocation(line: 215, column: 10, scope: !3439)
!3453 = !DILocation(line: 215, column: 36, scope: !3439)
!3454 = !DILocation(line: 212, column: 7, scope: !3439)
!3455 = !DILocation(line: 216, column: 11, scope: !3456)
!3456 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 216, column: 11)
!3457 = !DILocation(line: 216, column: 17, scope: !3456)
!3458 = !DILocation(line: 216, column: 24, scope: !3456)
!3459 = !DILocation(line: 216, column: 11, scope: !3439)
!3460 = !DILocalVariable(name: "i", scope: !3461, file: !3, line: 218, type: !7)
!3461 = distinct !DILexicalBlock(scope: !3456, file: !3, line: 217, column: 2)
!3462 = !DILocation(line: 218, column: 18, scope: !3461)
!3463 = !DILocation(line: 219, column: 13, scope: !3461)
!3464 = !DILocation(line: 219, column: 5, scope: !3461)
!3465 = !DILocation(line: 220, column: 19, scope: !3466)
!3466 = distinct !DILexicalBlock(scope: !3461, file: !3, line: 220, column: 12)
!3467 = !DILocation(line: 220, column: 17, scope: !3466)
!3468 = !DILocation(line: 220, column: 24, scope: !3469)
!3469 = distinct !DILexicalBlock(scope: !3466, file: !3, line: 220, column: 12)
!3470 = !DILocation(line: 220, column: 28, scope: !3469)
!3471 = !DILocation(line: 220, column: 34, scope: !3469)
!3472 = !DILocation(line: 220, column: 40, scope: !3469)
!3473 = !DILocation(line: 220, column: 46, scope: !3469)
!3474 = !DILocation(line: 220, column: 26, scope: !3469)
!3475 = !DILocation(line: 220, column: 12, scope: !3466)
!3476 = !DILocation(line: 221, column: 16, scope: !3469)
!3477 = !DILocation(line: 222, column: 9, scope: !3469)
!3478 = !DILocation(line: 222, column: 15, scope: !3469)
!3479 = !DILocation(line: 222, column: 21, scope: !3469)
!3480 = !DILocation(line: 222, column: 27, scope: !3469)
!3481 = !DILocation(line: 222, column: 39, scope: !3469)
!3482 = !DILocation(line: 222, column: 37, scope: !3469)
!3483 = !DILocation(line: 223, column: 27, scope: !3469)
!3484 = !DILocation(line: 223, column: 33, scope: !3469)
!3485 = !DILocation(line: 223, column: 40, scope: !3469)
!3486 = !DILocation(line: 223, column: 49, scope: !3469)
!3487 = !DILocation(line: 221, column: 7, scope: !3469)
!3488 = !DILocation(line: 220, column: 54, scope: !3469)
!3489 = !DILocation(line: 220, column: 12, scope: !3469)
!3490 = distinct !{!3490, !3475, !3491}
!3491 = !DILocation(line: 223, column: 51, scope: !3466)
!3492 = !DILocation(line: 224, column: 14, scope: !3461)
!3493 = !DILocation(line: 225, column: 25, scope: !3461)
!3494 = !DILocation(line: 225, column: 31, scope: !3461)
!3495 = !DILocation(line: 225, column: 38, scope: !3461)
!3496 = !DILocation(line: 225, column: 47, scope: !3461)
!3497 = !DILocation(line: 224, column: 5, scope: !3461)
!3498 = !DILocation(line: 226, column: 2, scope: !3461)
!3499 = !DILocation(line: 227, column: 16, scope: !3439)
!3500 = !DILocation(line: 227, column: 7, scope: !3439)
!3501 = !DILocation(line: 228, column: 7, scope: !3439)
!3502 = !DILocation(line: 231, column: 16, scope: !3439)
!3503 = !DILocation(line: 231, column: 7, scope: !3439)
!3504 = !DILocation(line: 232, column: 11, scope: !3505)
!3505 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 232, column: 11)
!3506 = !DILocation(line: 232, column: 17, scope: !3505)
!3507 = !DILocation(line: 232, column: 24, scope: !3505)
!3508 = !DILocation(line: 232, column: 11, scope: !3439)
!3509 = !DILocation(line: 234, column: 14, scope: !3510)
!3510 = distinct !DILexicalBlock(scope: !3505, file: !3, line: 233, column: 2)
!3511 = !DILocation(line: 236, column: 25, scope: !3510)
!3512 = !DILocation(line: 236, column: 31, scope: !3510)
!3513 = !DILocation(line: 236, column: 38, scope: !3510)
!3514 = !DILocation(line: 237, column: 25, scope: !3510)
!3515 = !DILocation(line: 237, column: 31, scope: !3510)
!3516 = !DILocation(line: 237, column: 38, scope: !3510)
!3517 = !DILocation(line: 234, column: 5, scope: !3510)
!3518 = !DILocation(line: 238, column: 2, scope: !3510)
!3519 = !DILocation(line: 239, column: 16, scope: !3439)
!3520 = !DILocation(line: 239, column: 7, scope: !3439)
!3521 = !DILocation(line: 240, column: 7, scope: !3439)
!3522 = !DILocation(line: 243, column: 16, scope: !3439)
!3523 = !DILocation(line: 243, column: 7, scope: !3439)
!3524 = !DILocation(line: 244, column: 11, scope: !3525)
!3525 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 244, column: 11)
!3526 = !DILocation(line: 244, column: 17, scope: !3525)
!3527 = !DILocation(line: 244, column: 24, scope: !3525)
!3528 = !DILocation(line: 244, column: 11, scope: !3439)
!3529 = !DILocation(line: 246, column: 14, scope: !3530)
!3530 = distinct !DILexicalBlock(scope: !3525, file: !3, line: 245, column: 2)
!3531 = !DILocation(line: 249, column: 25, scope: !3530)
!3532 = !DILocation(line: 249, column: 31, scope: !3530)
!3533 = !DILocation(line: 249, column: 38, scope: !3530)
!3534 = !DILocation(line: 250, column: 25, scope: !3530)
!3535 = !DILocation(line: 250, column: 31, scope: !3530)
!3536 = !DILocation(line: 250, column: 38, scope: !3530)
!3537 = !DILocation(line: 251, column: 25, scope: !3530)
!3538 = !DILocation(line: 251, column: 31, scope: !3530)
!3539 = !DILocation(line: 251, column: 38, scope: !3530)
!3540 = !DILocation(line: 246, column: 5, scope: !3530)
!3541 = !DILocation(line: 252, column: 2, scope: !3530)
!3542 = !DILocation(line: 253, column: 16, scope: !3439)
!3543 = !DILocation(line: 253, column: 7, scope: !3439)
!3544 = !DILocation(line: 254, column: 7, scope: !3439)
!3545 = !DILocation(line: 257, column: 16, scope: !3439)
!3546 = !DILocation(line: 257, column: 7, scope: !3439)
!3547 = !DILocation(line: 258, column: 11, scope: !3548)
!3548 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 258, column: 11)
!3549 = !DILocation(line: 258, column: 17, scope: !3548)
!3550 = !DILocation(line: 258, column: 24, scope: !3548)
!3551 = !DILocation(line: 258, column: 11, scope: !3439)
!3552 = !DILocation(line: 260, column: 14, scope: !3553)
!3553 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 259, column: 2)
!3554 = !DILocation(line: 262, column: 25, scope: !3553)
!3555 = !DILocation(line: 262, column: 31, scope: !3553)
!3556 = !DILocation(line: 262, column: 38, scope: !3553)
!3557 = !DILocation(line: 263, column: 25, scope: !3553)
!3558 = !DILocation(line: 263, column: 31, scope: !3553)
!3559 = !DILocation(line: 263, column: 38, scope: !3553)
!3560 = !DILocation(line: 260, column: 5, scope: !3553)
!3561 = !DILocation(line: 264, column: 2, scope: !3553)
!3562 = !DILocation(line: 265, column: 16, scope: !3439)
!3563 = !DILocation(line: 265, column: 7, scope: !3439)
!3564 = !DILocation(line: 266, column: 7, scope: !3439)
!3565 = !DILocation(line: 269, column: 16, scope: !3439)
!3566 = !DILocation(line: 269, column: 7, scope: !3439)
!3567 = !DILocation(line: 270, column: 11, scope: !3568)
!3568 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 270, column: 11)
!3569 = !DILocation(line: 270, column: 17, scope: !3568)
!3570 = !DILocation(line: 270, column: 24, scope: !3568)
!3571 = !DILocation(line: 270, column: 11, scope: !3439)
!3572 = !DILocation(line: 272, column: 14, scope: !3573)
!3573 = distinct !DILexicalBlock(scope: !3568, file: !3, line: 271, column: 2)
!3574 = !DILocation(line: 273, column: 25, scope: !3573)
!3575 = !DILocation(line: 273, column: 31, scope: !3573)
!3576 = !DILocation(line: 273, column: 38, scope: !3573)
!3577 = !DILocation(line: 272, column: 5, scope: !3573)
!3578 = !DILocation(line: 274, column: 2, scope: !3573)
!3579 = !DILocation(line: 275, column: 16, scope: !3439)
!3580 = !DILocation(line: 275, column: 7, scope: !3439)
!3581 = !DILocation(line: 276, column: 7, scope: !3439)
!3582 = !DILocation(line: 279, column: 16, scope: !3439)
!3583 = !DILocation(line: 279, column: 7, scope: !3439)
!3584 = !DILocation(line: 280, column: 11, scope: !3585)
!3585 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 280, column: 11)
!3586 = !DILocation(line: 280, column: 17, scope: !3585)
!3587 = !DILocation(line: 280, column: 24, scope: !3585)
!3588 = !DILocation(line: 280, column: 11, scope: !3439)
!3589 = !DILocation(line: 282, column: 14, scope: !3590)
!3590 = distinct !DILexicalBlock(scope: !3585, file: !3, line: 281, column: 2)
!3591 = !DILocation(line: 285, column: 25, scope: !3590)
!3592 = !DILocation(line: 285, column: 31, scope: !3590)
!3593 = !DILocation(line: 285, column: 38, scope: !3590)
!3594 = !DILocation(line: 286, column: 25, scope: !3590)
!3595 = !DILocation(line: 286, column: 31, scope: !3590)
!3596 = !DILocation(line: 286, column: 38, scope: !3590)
!3597 = !DILocation(line: 287, column: 25, scope: !3590)
!3598 = !DILocation(line: 287, column: 31, scope: !3590)
!3599 = !DILocation(line: 287, column: 38, scope: !3590)
!3600 = !DILocation(line: 282, column: 5, scope: !3590)
!3601 = !DILocation(line: 288, column: 2, scope: !3590)
!3602 = !DILocation(line: 289, column: 16, scope: !3439)
!3603 = !DILocation(line: 289, column: 7, scope: !3439)
!3604 = !DILocation(line: 290, column: 7, scope: !3439)
!3605 = !DILocation(line: 292, column: 16, scope: !3439)
!3606 = !DILocation(line: 292, column: 7, scope: !3439)
!3607 = !DILocation(line: 293, column: 11, scope: !3608)
!3608 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 293, column: 11)
!3609 = !DILocation(line: 293, column: 17, scope: !3608)
!3610 = !DILocation(line: 293, column: 24, scope: !3608)
!3611 = !DILocation(line: 293, column: 11, scope: !3439)
!3612 = !DILocation(line: 295, column: 14, scope: !3613)
!3613 = distinct !DILexicalBlock(scope: !3608, file: !3, line: 294, column: 2)
!3614 = !DILocation(line: 298, column: 25, scope: !3613)
!3615 = !DILocation(line: 298, column: 31, scope: !3613)
!3616 = !DILocation(line: 298, column: 38, scope: !3613)
!3617 = !DILocation(line: 299, column: 25, scope: !3613)
!3618 = !DILocation(line: 299, column: 31, scope: !3613)
!3619 = !DILocation(line: 299, column: 38, scope: !3613)
!3620 = !DILocation(line: 300, column: 25, scope: !3613)
!3621 = !DILocation(line: 300, column: 31, scope: !3613)
!3622 = !DILocation(line: 300, column: 38, scope: !3613)
!3623 = !DILocation(line: 295, column: 5, scope: !3613)
!3624 = !DILocation(line: 301, column: 2, scope: !3613)
!3625 = !DILocation(line: 302, column: 16, scope: !3439)
!3626 = !DILocation(line: 302, column: 7, scope: !3439)
!3627 = !DILocation(line: 303, column: 7, scope: !3439)
!3628 = !DILocation(line: 305, column: 1, scope: !3428)
!3629 = distinct !DISubprogram(name: "gimple_remove_stmt_histograms", scope: !3, file: !3, line: 320, type: !3630, scopeLine: 321, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3630 = !DISubroutineType(types: !3631)
!3631 = !{null, !2309, !1887}
!3632 = !DILocalVariable(name: "fun", arg: 1, scope: !3629, file: !3, line: 320, type: !2309)
!3633 = !DILocation(line: 320, column: 49, scope: !3629)
!3634 = !DILocalVariable(name: "stmt", arg: 2, scope: !3629, file: !3, line: 320, type: !1887)
!3635 = !DILocation(line: 320, column: 61, scope: !3629)
!3636 = !DILocalVariable(name: "val", scope: !3629, file: !3, line: 322, type: !1549)
!3637 = !DILocation(line: 322, column: 19, scope: !3629)
!3638 = !DILocation(line: 323, column: 3, scope: !3629)
!3639 = !DILocation(line: 323, column: 41, scope: !3629)
!3640 = !DILocation(line: 323, column: 46, scope: !3629)
!3641 = !DILocation(line: 323, column: 17, scope: !3629)
!3642 = !DILocation(line: 323, column: 15, scope: !3629)
!3643 = !DILocation(line: 323, column: 53, scope: !3629)
!3644 = !DILocation(line: 324, column: 36, scope: !3629)
!3645 = !DILocation(line: 324, column: 41, scope: !3629)
!3646 = !DILocation(line: 324, column: 47, scope: !3629)
!3647 = !DILocation(line: 324, column: 5, scope: !3629)
!3648 = distinct !{!3648, !3638, !3649}
!3649 = !DILocation(line: 324, column: 50, scope: !3629)
!3650 = !DILocation(line: 325, column: 1, scope: !3629)
!3651 = distinct !DISubprogram(name: "gimple_duplicate_stmt_histograms", scope: !3, file: !3, line: 330, type: !3652, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3652 = !DISubroutineType(types: !3653)
!3653 = !{null, !2309, !1887, !2309, !1887}
!3654 = !DILocalVariable(name: "fun", arg: 1, scope: !3651, file: !3, line: 330, type: !2309)
!3655 = !DILocation(line: 330, column: 52, scope: !3651)
!3656 = !DILocalVariable(name: "stmt", arg: 2, scope: !3651, file: !3, line: 330, type: !1887)
!3657 = !DILocation(line: 330, column: 64, scope: !3651)
!3658 = !DILocalVariable(name: "ofun", arg: 3, scope: !3651, file: !3, line: 331, type: !2309)
!3659 = !DILocation(line: 331, column: 24, scope: !3651)
!3660 = !DILocalVariable(name: "ostmt", arg: 4, scope: !3651, file: !3, line: 331, type: !1887)
!3661 = !DILocation(line: 331, column: 37, scope: !3651)
!3662 = !DILocalVariable(name: "val", scope: !3651, file: !3, line: 333, type: !1549)
!3663 = !DILocation(line: 333, column: 19, scope: !3651)
!3664 = !DILocation(line: 334, column: 38, scope: !3665)
!3665 = distinct !DILexicalBlock(scope: !3651, file: !3, line: 334, column: 3)
!3666 = !DILocation(line: 334, column: 44, scope: !3665)
!3667 = !DILocation(line: 334, column: 14, scope: !3665)
!3668 = !DILocation(line: 334, column: 12, scope: !3665)
!3669 = !DILocation(line: 334, column: 8, scope: !3665)
!3670 = !DILocation(line: 334, column: 52, scope: !3671)
!3671 = distinct !DILexicalBlock(scope: !3665, file: !3, line: 334, column: 3)
!3672 = !DILocation(line: 334, column: 56, scope: !3671)
!3673 = !DILocation(line: 334, column: 3, scope: !3665)
!3674 = !DILocalVariable(name: "new_val", scope: !3675, file: !3, line: 336, type: !1549)
!3675 = distinct !DILexicalBlock(scope: !3671, file: !3, line: 335, column: 5)
!3676 = !DILocation(line: 336, column: 23, scope: !3675)
!3677 = !DILocation(line: 336, column: 63, scope: !3675)
!3678 = !DILocation(line: 336, column: 68, scope: !3675)
!3679 = !DILocation(line: 336, column: 73, scope: !3675)
!3680 = !DILocation(line: 336, column: 33, scope: !3675)
!3681 = !DILocation(line: 337, column: 15, scope: !3675)
!3682 = !DILocation(line: 337, column: 7, scope: !3675)
!3683 = !DILocation(line: 337, column: 24, scope: !3675)
!3684 = !DILocation(line: 338, column: 30, scope: !3675)
!3685 = !DILocation(line: 338, column: 7, scope: !3675)
!3686 = !DILocation(line: 338, column: 16, scope: !3675)
!3687 = !DILocation(line: 338, column: 23, scope: !3675)
!3688 = !DILocation(line: 338, column: 28, scope: !3675)
!3689 = !DILocation(line: 339, column: 34, scope: !3675)
!3690 = !DILocation(line: 339, column: 7, scope: !3675)
!3691 = !DILocation(line: 339, column: 16, scope: !3675)
!3692 = !DILocation(line: 339, column: 23, scope: !3675)
!3693 = !DILocation(line: 339, column: 32, scope: !3675)
!3694 = !DILocation(line: 340, column: 15, scope: !3675)
!3695 = !DILocation(line: 340, column: 24, scope: !3675)
!3696 = !DILocation(line: 340, column: 31, scope: !3675)
!3697 = !DILocation(line: 340, column: 7, scope: !3675)
!3698 = !DILocation(line: 340, column: 41, scope: !3675)
!3699 = !DILocation(line: 340, column: 46, scope: !3675)
!3700 = !DILocation(line: 340, column: 53, scope: !3675)
!3701 = !DILocation(line: 340, column: 100, scope: !3675)
!3702 = !DILocation(line: 340, column: 109, scope: !3675)
!3703 = !DILocation(line: 340, column: 98, scope: !3675)
!3704 = !DILocation(line: 341, column: 35, scope: !3675)
!3705 = !DILocation(line: 341, column: 40, scope: !3675)
!3706 = !DILocation(line: 341, column: 46, scope: !3675)
!3707 = !DILocation(line: 341, column: 7, scope: !3675)
!3708 = !DILocation(line: 342, column: 5, scope: !3675)
!3709 = !DILocation(line: 334, column: 71, scope: !3671)
!3710 = !DILocation(line: 334, column: 76, scope: !3671)
!3711 = !DILocation(line: 334, column: 83, scope: !3671)
!3712 = !DILocation(line: 334, column: 69, scope: !3671)
!3713 = !DILocation(line: 334, column: 3, scope: !3671)
!3714 = distinct !{!3714, !3673, !3715}
!3715 = !DILocation(line: 342, column: 5, scope: !3665)
!3716 = !DILocation(line: 343, column: 1, scope: !3651)
!3717 = distinct !DISubprogram(name: "gimple_alloc_histogram_value", scope: !3, file: !3, line: 94, type: !3718, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3718 = !DISubroutineType(types: !3719)
!3719 = !{!1549, !2309, !377, !1887, !1557}
!3720 = !DILocalVariable(name: "fun", arg: 1, scope: !3717, file: !3, line: 94, type: !2309)
!3721 = !DILocation(line: 94, column: 48, scope: !3717)
!3722 = !DILocalVariable(name: "type", arg: 2, scope: !3717, file: !3, line: 95, type: !377)
!3723 = !DILocation(line: 95, column: 25, scope: !3717)
!3724 = !DILocalVariable(name: "stmt", arg: 3, scope: !3717, file: !3, line: 95, type: !1887)
!3725 = !DILocation(line: 95, column: 38, scope: !3717)
!3726 = !DILocalVariable(name: "value", arg: 4, scope: !3717, file: !3, line: 95, type: !1557)
!3727 = !DILocation(line: 95, column: 49, scope: !3717)
!3728 = !DILocalVariable(name: "hist", scope: !3717, file: !3, line: 97, type: !1549)
!3729 = !DILocation(line: 97, column: 20, scope: !3717)
!3730 = !DILocation(line: 97, column: 45, scope: !3717)
!3731 = !DILocation(line: 97, column: 27, scope: !3717)
!3732 = !DILocation(line: 98, column: 25, scope: !3717)
!3733 = !DILocation(line: 98, column: 4, scope: !3717)
!3734 = !DILocation(line: 98, column: 10, scope: !3717)
!3735 = !DILocation(line: 98, column: 17, scope: !3717)
!3736 = !DILocation(line: 98, column: 23, scope: !3717)
!3737 = !DILocation(line: 99, column: 24, scope: !3717)
!3738 = !DILocation(line: 99, column: 4, scope: !3717)
!3739 = !DILocation(line: 99, column: 10, scope: !3717)
!3740 = !DILocation(line: 99, column: 17, scope: !3717)
!3741 = !DILocation(line: 99, column: 22, scope: !3717)
!3742 = !DILocation(line: 100, column: 17, scope: !3717)
!3743 = !DILocation(line: 100, column: 4, scope: !3717)
!3744 = !DILocation(line: 100, column: 10, scope: !3717)
!3745 = !DILocation(line: 100, column: 15, scope: !3717)
!3746 = !DILocation(line: 101, column: 11, scope: !3717)
!3747 = !DILocation(line: 101, column: 4, scope: !3717)
!3748 = distinct !DISubprogram(name: "gimple_move_stmt_histograms", scope: !3, file: !3, line: 349, type: !3749, scopeLine: 350, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3749 = !DISubroutineType(types: !3750)
!3750 = !{null, !2309, !1887, !1887}
!3751 = !DILocalVariable(name: "fun", arg: 1, scope: !3748, file: !3, line: 349, type: !2309)
!3752 = !DILocation(line: 349, column: 47, scope: !3748)
!3753 = !DILocalVariable(name: "stmt", arg: 2, scope: !3748, file: !3, line: 349, type: !1887)
!3754 = !DILocation(line: 349, column: 59, scope: !3748)
!3755 = !DILocalVariable(name: "ostmt", arg: 3, scope: !3748, file: !3, line: 349, type: !1887)
!3756 = !DILocation(line: 349, column: 72, scope: !3748)
!3757 = !DILocalVariable(name: "val", scope: !3748, file: !3, line: 351, type: !1549)
!3758 = !DILocation(line: 351, column: 19, scope: !3748)
!3759 = !DILocation(line: 351, column: 49, scope: !3748)
!3760 = !DILocation(line: 351, column: 54, scope: !3748)
!3761 = !DILocation(line: 351, column: 25, scope: !3748)
!3762 = !DILocation(line: 352, column: 7, scope: !3763)
!3763 = distinct !DILexicalBlock(scope: !3748, file: !3, line: 352, column: 7)
!3764 = !DILocation(line: 352, column: 7, scope: !3748)
!3765 = !DILocation(line: 357, column: 28, scope: !3766)
!3766 = distinct !DILexicalBlock(scope: !3763, file: !3, line: 353, column: 5)
!3767 = !DILocation(line: 357, column: 33, scope: !3766)
!3768 = !DILocation(line: 357, column: 7, scope: !3766)
!3769 = !DILocation(line: 358, column: 7, scope: !3766)
!3770 = !DILocation(line: 358, column: 14, scope: !3771)
!3771 = distinct !DILexicalBlock(scope: !3772, file: !3, line: 358, column: 7)
!3772 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 358, column: 7)
!3773 = !DILocation(line: 358, column: 18, scope: !3771)
!3774 = !DILocation(line: 358, column: 7, scope: !3772)
!3775 = !DILocation(line: 359, column: 21, scope: !3771)
!3776 = !DILocation(line: 359, column: 2, scope: !3771)
!3777 = !DILocation(line: 359, column: 7, scope: !3771)
!3778 = !DILocation(line: 359, column: 14, scope: !3771)
!3779 = !DILocation(line: 359, column: 19, scope: !3771)
!3780 = !DILocation(line: 358, column: 33, scope: !3771)
!3781 = !DILocation(line: 358, column: 38, scope: !3771)
!3782 = !DILocation(line: 358, column: 45, scope: !3771)
!3783 = !DILocation(line: 358, column: 31, scope: !3771)
!3784 = !DILocation(line: 358, column: 7, scope: !3771)
!3785 = distinct !{!3785, !3774, !3786}
!3786 = !DILocation(line: 359, column: 21, scope: !3772)
!3787 = !DILocation(line: 360, column: 28, scope: !3766)
!3788 = !DILocation(line: 360, column: 33, scope: !3766)
!3789 = !DILocation(line: 360, column: 39, scope: !3766)
!3790 = !DILocation(line: 360, column: 7, scope: !3766)
!3791 = !DILocation(line: 361, column: 5, scope: !3766)
!3792 = !DILocation(line: 362, column: 1, scope: !3748)
!3793 = distinct !DISubprogram(name: "verify_histograms", scope: !3, file: !3, line: 388, type: !3010, scopeLine: 389, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3794 = !DILocalVariable(name: "bb", scope: !3793, file: !3, line: 390, type: !2321)
!3795 = !DILocation(line: 390, column: 15, scope: !3793)
!3796 = !DILocalVariable(name: "gsi", scope: !3793, file: !3, line: 391, type: !3797)
!3797 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !413, line: 265, baseType: !3798)
!3798 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !413, line: 254, size: 192, elements: !3799)
!3799 = !{!3800, !3801, !3802}
!3800 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3798, file: !413, line: 257, baseType: !1882, size: 64)
!3801 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3798, file: !413, line: 263, baseType: !1877, size: 64, offset: 64)
!3802 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3798, file: !413, line: 264, baseType: !2321, size: 64, offset: 128)
!3803 = !DILocation(line: 391, column: 24, scope: !3793)
!3804 = !DILocalVariable(name: "hist", scope: !3793, file: !3, line: 392, type: !1549)
!3805 = !DILocation(line: 392, column: 19, scope: !3793)
!3806 = !DILocalVariable(name: "visited_hists", scope: !3793, file: !3, line: 393, type: !2909)
!3807 = !DILocation(line: 393, column: 25, scope: !3793)
!3808 = !DILocation(line: 395, column: 15, scope: !3793)
!3809 = !DILocation(line: 396, column: 19, scope: !3793)
!3810 = !DILocation(line: 396, column: 17, scope: !3793)
!3811 = !DILocation(line: 397, column: 3, scope: !3812)
!3812 = distinct !DILexicalBlock(scope: !3793, file: !3, line: 397, column: 3)
!3813 = !DILocation(line: 397, column: 3, scope: !3814)
!3814 = distinct !DILexicalBlock(scope: !3812, file: !3, line: 397, column: 3)
!3815 = !DILocation(line: 398, column: 30, scope: !3816)
!3816 = distinct !DILexicalBlock(scope: !3814, file: !3, line: 398, column: 5)
!3817 = !DILocation(line: 398, column: 16, scope: !3816)
!3818 = !DILocation(line: 398, column: 10, scope: !3816)
!3819 = !DILocation(line: 398, column: 36, scope: !3820)
!3820 = distinct !DILexicalBlock(scope: !3816, file: !3, line: 398, column: 5)
!3821 = !DILocation(line: 398, column: 35, scope: !3820)
!3822 = !DILocation(line: 398, column: 5, scope: !3816)
!3823 = !DILocalVariable(name: "stmt", scope: !3824, file: !3, line: 400, type: !1887)
!3824 = distinct !DILexicalBlock(scope: !3820, file: !3, line: 399, column: 7)
!3825 = !DILocation(line: 400, column: 9, scope: !3824)
!3826 = !DILocation(line: 400, column: 16, scope: !3824)
!3827 = !DILocation(line: 402, column: 38, scope: !3828)
!3828 = distinct !DILexicalBlock(scope: !3824, file: !3, line: 402, column: 2)
!3829 = !DILocation(line: 402, column: 44, scope: !3828)
!3830 = !DILocation(line: 402, column: 14, scope: !3828)
!3831 = !DILocation(line: 402, column: 12, scope: !3828)
!3832 = !DILocation(line: 402, column: 7, scope: !3828)
!3833 = !DILocation(line: 402, column: 51, scope: !3834)
!3834 = distinct !DILexicalBlock(scope: !3828, file: !3, line: 402, column: 2)
!3835 = !DILocation(line: 402, column: 2, scope: !3828)
!3836 = !DILocation(line: 405, column: 10, scope: !3837)
!3837 = distinct !DILexicalBlock(scope: !3838, file: !3, line: 405, column: 10)
!3838 = distinct !DILexicalBlock(scope: !3834, file: !3, line: 404, column: 4)
!3839 = !DILocation(line: 405, column: 16, scope: !3837)
!3840 = !DILocation(line: 405, column: 23, scope: !3837)
!3841 = !DILocation(line: 405, column: 31, scope: !3837)
!3842 = !DILocation(line: 405, column: 28, scope: !3837)
!3843 = !DILocation(line: 405, column: 10, scope: !3838)
!3844 = !DILocation(line: 407, column: 3, scope: !3845)
!3845 = distinct !DILexicalBlock(scope: !3837, file: !3, line: 406, column: 8)
!3846 = !DILocation(line: 409, column: 22, scope: !3845)
!3847 = !DILocation(line: 409, column: 3, scope: !3845)
!3848 = !DILocation(line: 410, column: 25, scope: !3845)
!3849 = !DILocation(line: 410, column: 33, scope: !3845)
!3850 = !DILocation(line: 410, column: 3, scope: !3845)
!3851 = !DILocation(line: 411, column: 15, scope: !3845)
!3852 = !DILocation(line: 412, column: 8, scope: !3845)
!3853 = !DILocation(line: 413, column: 33, scope: !3838)
!3854 = !DILocation(line: 413, column: 48, scope: !3838)
!3855 = !DILocation(line: 413, column: 13, scope: !3838)
!3856 = !DILocation(line: 414, column: 4, scope: !3838)
!3857 = !DILocation(line: 403, column: 14, scope: !3834)
!3858 = !DILocation(line: 403, column: 20, scope: !3834)
!3859 = !DILocation(line: 403, column: 27, scope: !3834)
!3860 = !DILocation(line: 403, column: 12, scope: !3834)
!3861 = !DILocation(line: 402, column: 2, scope: !3834)
!3862 = distinct !{!3862, !3835, !3863}
!3863 = !DILocation(line: 414, column: 4, scope: !3828)
!3864 = !DILocation(line: 415, column: 7, scope: !3824)
!3865 = !DILocation(line: 398, column: 53, scope: !3820)
!3866 = !DILocation(line: 398, column: 5, scope: !3820)
!3867 = distinct !{!3867, !3822, !3868}
!3868 = !DILocation(line: 415, column: 7, scope: !3816)
!3869 = distinct !{!3869, !3811, !3870}
!3870 = !DILocation(line: 415, column: 7, scope: !3812)
!3871 = !DILocation(line: 416, column: 7, scope: !3872)
!3872 = distinct !DILexicalBlock(scope: !3793, file: !3, line: 416, column: 7)
!3873 = !DILocation(line: 416, column: 7, scope: !3793)
!3874 = !DILocation(line: 417, column: 20, scope: !3872)
!3875 = !DILocation(line: 417, column: 57, scope: !3872)
!3876 = !DILocation(line: 417, column: 5, scope: !3872)
!3877 = !DILocation(line: 418, column: 24, scope: !3793)
!3878 = !DILocation(line: 418, column: 3, scope: !3793)
!3879 = !DILocation(line: 419, column: 7, scope: !3880)
!3880 = distinct !DILexicalBlock(scope: !3793, file: !3, line: 419, column: 7)
!3881 = !DILocation(line: 419, column: 7, scope: !3793)
!3882 = !DILocation(line: 420, column: 5, scope: !3880)
!3883 = !DILocation(line: 421, column: 1, scope: !3793)
!3884 = distinct !DISubprogram(name: "gsi_start_bb", scope: !413, file: !413, line: 4418, type: !3885, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3885 = !DISubroutineType(types: !3886)
!3886 = !{!3797, !2321}
!3887 = !DILocalVariable(name: "bb", arg: 1, scope: !3884, file: !413, line: 4418, type: !2321)
!3888 = !DILocation(line: 4418, column: 27, scope: !3884)
!3889 = !DILocalVariable(name: "i", scope: !3884, file: !413, line: 4420, type: !3797)
!3890 = !DILocation(line: 4420, column: 24, scope: !3884)
!3891 = !DILocalVariable(name: "seq", scope: !3884, file: !413, line: 4421, type: !1877)
!3892 = !DILocation(line: 4421, column: 14, scope: !3884)
!3893 = !DILocation(line: 4423, column: 17, scope: !3884)
!3894 = !DILocation(line: 4423, column: 9, scope: !3884)
!3895 = !DILocation(line: 4423, column: 7, scope: !3884)
!3896 = !DILocation(line: 4424, column: 29, scope: !3884)
!3897 = !DILocation(line: 4424, column: 11, scope: !3884)
!3898 = !DILocation(line: 4424, column: 5, scope: !3884)
!3899 = !DILocation(line: 4424, column: 9, scope: !3884)
!3900 = !DILocation(line: 4425, column: 11, scope: !3884)
!3901 = !DILocation(line: 4425, column: 5, scope: !3884)
!3902 = !DILocation(line: 4425, column: 9, scope: !3884)
!3903 = !DILocation(line: 4426, column: 10, scope: !3884)
!3904 = !DILocation(line: 4426, column: 5, scope: !3884)
!3905 = !DILocation(line: 4426, column: 8, scope: !3884)
!3906 = !DILocation(line: 4428, column: 3, scope: !3884)
!3907 = distinct !DISubprogram(name: "gsi_end_p", scope: !413, file: !413, line: 4467, type: !3908, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3908 = !DISubroutineType(types: !3909)
!3909 = !{!1676, !3797}
!3910 = !DILocalVariable(name: "i", arg: 1, scope: !3907, file: !413, line: 4467, type: !3797)
!3911 = !DILocation(line: 4467, column: 33, scope: !3907)
!3912 = !DILocation(line: 4469, column: 12, scope: !3907)
!3913 = !DILocation(line: 4469, column: 16, scope: !3907)
!3914 = !DILocation(line: 4469, column: 10, scope: !3907)
!3915 = !DILocation(line: 4469, column: 3, scope: !3907)
!3916 = distinct !DISubprogram(name: "gsi_stmt", scope: !413, file: !413, line: 4501, type: !3917, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3917 = !DISubroutineType(types: !3918)
!3918 = !{!1887, !3797}
!3919 = !DILocalVariable(name: "i", arg: 1, scope: !3916, file: !413, line: 4501, type: !3797)
!3920 = !DILocation(line: 4501, column: 32, scope: !3916)
!3921 = !DILocation(line: 4503, column: 12, scope: !3916)
!3922 = !DILocation(line: 4503, column: 17, scope: !3916)
!3923 = !DILocation(line: 4503, column: 3, scope: !3916)
!3924 = distinct !DISubprogram(name: "gsi_next", scope: !413, file: !413, line: 4485, type: !3925, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3925 = !DISubroutineType(types: !3926)
!3926 = !{null, !3927}
!3927 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3797, size: 64)
!3928 = !DILocalVariable(name: "i", arg: 1, scope: !3924, file: !413, line: 4485, type: !3927)
!3929 = !DILocation(line: 4485, column: 33, scope: !3924)
!3930 = !DILocation(line: 4487, column: 12, scope: !3924)
!3931 = !DILocation(line: 4487, column: 15, scope: !3924)
!3932 = !DILocation(line: 4487, column: 20, scope: !3924)
!3933 = !DILocation(line: 4487, column: 3, scope: !3924)
!3934 = !DILocation(line: 4487, column: 6, scope: !3924)
!3935 = !DILocation(line: 4487, column: 10, scope: !3924)
!3936 = !DILocation(line: 4488, column: 1, scope: !3924)
!3937 = distinct !DISubprogram(name: "visit_hist", scope: !3, file: !3, line: 370, type: !3938, scopeLine: 371, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3938 = !DISubroutineType(types: !3939)
!3939 = !{!1653, !2374, !1840}
!3940 = !DILocalVariable(name: "slot", arg: 1, scope: !3937, file: !3, line: 370, type: !2374)
!3941 = !DILocation(line: 370, column: 20, scope: !3937)
!3942 = !DILocalVariable(name: "data", arg: 2, scope: !3937, file: !3, line: 370, type: !1840)
!3943 = !DILocation(line: 370, column: 32, scope: !3937)
!3944 = !DILocalVariable(name: "visited", scope: !3937, file: !3, line: 372, type: !2909)
!3945 = !DILocation(line: 372, column: 25, scope: !3937)
!3946 = !DILocation(line: 372, column: 60, scope: !3937)
!3947 = !DILocation(line: 372, column: 35, scope: !3937)
!3948 = !DILocalVariable(name: "hist", scope: !3937, file: !3, line: 373, type: !1549)
!3949 = !DILocation(line: 373, column: 19, scope: !3937)
!3950 = !DILocation(line: 373, column: 47, scope: !3937)
!3951 = !DILocation(line: 373, column: 26, scope: !3937)
!3952 = !DILocation(line: 374, column: 30, scope: !3953)
!3953 = distinct !DILexicalBlock(scope: !3937, file: !3, line: 374, column: 7)
!3954 = !DILocation(line: 374, column: 39, scope: !3953)
!3955 = !DILocation(line: 374, column: 8, scope: !3953)
!3956 = !DILocation(line: 374, column: 7, scope: !3937)
!3957 = !DILocation(line: 376, column: 7, scope: !3958)
!3958 = distinct !DILexicalBlock(scope: !3953, file: !3, line: 375, column: 5)
!3959 = !DILocation(line: 377, column: 29, scope: !3958)
!3960 = !DILocation(line: 377, column: 37, scope: !3958)
!3961 = !DILocation(line: 377, column: 7, scope: !3958)
!3962 = !DILocation(line: 378, column: 26, scope: !3958)
!3963 = !DILocation(line: 378, column: 32, scope: !3958)
!3964 = !DILocation(line: 378, column: 39, scope: !3958)
!3965 = !DILocation(line: 378, column: 7, scope: !3958)
!3966 = !DILocation(line: 379, column: 19, scope: !3958)
!3967 = !DILocation(line: 380, column: 5, scope: !3958)
!3968 = !DILocation(line: 381, column: 3, scope: !3937)
!3969 = distinct !DISubprogram(name: "free_histograms", scope: !3, file: !3, line: 439, type: !3010, scopeLine: 440, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3970 = !DILocation(line: 441, column: 7, scope: !3971)
!3971 = distinct !DILexicalBlock(scope: !3969, file: !3, line: 441, column: 7)
!3972 = !DILocation(line: 441, column: 7, scope: !3969)
!3973 = !DILocation(line: 443, column: 22, scope: !3974)
!3974 = distinct !DILexicalBlock(scope: !3971, file: !3, line: 442, column: 5)
!3975 = !DILocation(line: 443, column: 7, scope: !3974)
!3976 = !DILocation(line: 444, column: 20, scope: !3974)
!3977 = !DILocation(line: 444, column: 7, scope: !3974)
!3978 = !DILocation(line: 445, column: 7, scope: !3974)
!3979 = !DILocation(line: 445, column: 31, scope: !3974)
!3980 = !DILocation(line: 446, column: 5, scope: !3974)
!3981 = !DILocation(line: 447, column: 1, scope: !3969)
!3982 = distinct !DISubprogram(name: "free_hist", scope: !3, file: !3, line: 427, type: !3938, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3983 = !DILocalVariable(name: "slot", arg: 1, scope: !3982, file: !3, line: 427, type: !2374)
!3984 = !DILocation(line: 427, column: 19, scope: !3982)
!3985 = !DILocalVariable(name: "data", arg: 2, scope: !3982, file: !3, line: 427, type: !1840)
!3986 = !DILocation(line: 427, column: 31, scope: !3982)
!3987 = !DILocalVariable(name: "hist", scope: !3982, file: !3, line: 429, type: !1549)
!3988 = !DILocation(line: 429, column: 19, scope: !3982)
!3989 = !DILocation(line: 429, column: 47, scope: !3982)
!3990 = !DILocation(line: 429, column: 26, scope: !3982)
!3991 = !DILocation(line: 430, column: 9, scope: !3982)
!3992 = !DILocation(line: 430, column: 15, scope: !3982)
!3993 = !DILocation(line: 430, column: 22, scope: !3982)
!3994 = !DILocation(line: 430, column: 3, scope: !3982)
!3995 = !DILocation(line: 434, column: 9, scope: !3982)
!3996 = !DILocation(line: 434, column: 3, scope: !3982)
!3997 = !DILocation(line: 435, column: 3, scope: !3982)
!3998 = distinct !DISubprogram(name: "stringop_block_profile", scope: !3, file: !3, line: 1450, type: !3999, scopeLine: 1452, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!3999 = !DISubroutineType(types: !4000)
!4000 = !{null, !1887, !4001, !4002}
!4001 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!4002 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1612, size: 64)
!4003 = !DILocalVariable(name: "stmt", arg: 1, scope: !3998, file: !3, line: 1450, type: !1887)
!4004 = !DILocation(line: 1450, column: 32, scope: !3998)
!4005 = !DILocalVariable(name: "expected_align", arg: 2, scope: !3998, file: !3, line: 1450, type: !4001)
!4006 = !DILocation(line: 1450, column: 52, scope: !3998)
!4007 = !DILocalVariable(name: "expected_size", arg: 3, scope: !3998, file: !3, line: 1451, type: !4002)
!4008 = !DILocation(line: 1451, column: 19, scope: !3998)
!4009 = !DILocalVariable(name: "histogram", scope: !3998, file: !3, line: 1453, type: !1549)
!4010 = !DILocation(line: 1453, column: 19, scope: !3998)
!4011 = !DILocation(line: 1454, column: 47, scope: !3998)
!4012 = !DILocation(line: 1454, column: 53, scope: !3998)
!4013 = !DILocation(line: 1454, column: 15, scope: !3998)
!4014 = !DILocation(line: 1454, column: 13, scope: !3998)
!4015 = !DILocation(line: 1455, column: 8, scope: !4016)
!4016 = distinct !DILexicalBlock(scope: !3998, file: !3, line: 1455, column: 7)
!4017 = !DILocation(line: 1455, column: 7, scope: !3998)
!4018 = !DILocation(line: 1456, column: 6, scope: !4016)
!4019 = !DILocation(line: 1456, column: 20, scope: !4016)
!4020 = !DILocation(line: 1456, column: 5, scope: !4016)
!4021 = !DILocation(line: 1457, column: 13, scope: !4022)
!4022 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1457, column: 12)
!4023 = !DILocation(line: 1457, column: 24, scope: !4022)
!4024 = !DILocation(line: 1457, column: 31, scope: !4022)
!4025 = !DILocation(line: 1457, column: 12, scope: !4016)
!4026 = !DILocation(line: 1459, column: 8, scope: !4027)
!4027 = distinct !DILexicalBlock(scope: !4022, file: !3, line: 1458, column: 5)
!4028 = !DILocation(line: 1459, column: 22, scope: !4027)
!4029 = !DILocation(line: 1460, column: 38, scope: !4027)
!4030 = !DILocation(line: 1460, column: 44, scope: !4027)
!4031 = !DILocation(line: 1460, column: 50, scope: !4027)
!4032 = !DILocation(line: 1460, column: 7, scope: !4027)
!4033 = !DILocation(line: 1461, column: 5, scope: !4027)
!4034 = !DILocalVariable(name: "size", scope: !4035, file: !3, line: 1464, type: !2099)
!4035 = distinct !DILexicalBlock(scope: !4022, file: !3, line: 1463, column: 5)
!4036 = !DILocation(line: 1464, column: 17, scope: !4035)
!4037 = !DILocation(line: 1465, column: 16, scope: !4035)
!4038 = !DILocation(line: 1465, column: 27, scope: !4035)
!4039 = !DILocation(line: 1465, column: 34, scope: !4035)
!4040 = !DILocation(line: 1466, column: 10, scope: !4035)
!4041 = !DILocation(line: 1466, column: 21, scope: !4035)
!4042 = !DILocation(line: 1466, column: 28, scope: !4035)
!4043 = !DILocation(line: 1466, column: 40, scope: !4035)
!4044 = !DILocation(line: 1466, column: 8, scope: !4035)
!4045 = !DILocation(line: 1467, column: 11, scope: !4035)
!4046 = !DILocation(line: 1467, column: 22, scope: !4035)
!4047 = !DILocation(line: 1467, column: 29, scope: !4035)
!4048 = !DILocation(line: 1467, column: 9, scope: !4035)
!4049 = !DILocation(line: 1465, column: 12, scope: !4035)
!4050 = !DILocation(line: 1470, column: 11, scope: !4051)
!4051 = distinct !DILexicalBlock(scope: !4035, file: !3, line: 1470, column: 11)
!4052 = !DILocation(line: 1470, column: 16, scope: !4051)
!4053 = !DILocation(line: 1470, column: 11, scope: !4035)
!4054 = !DILocation(line: 1471, column: 7, scope: !4051)
!4055 = !DILocation(line: 1471, column: 2, scope: !4051)
!4056 = !DILocation(line: 1472, column: 24, scope: !4035)
!4057 = !DILocation(line: 1472, column: 8, scope: !4035)
!4058 = !DILocation(line: 1472, column: 22, scope: !4035)
!4059 = !DILocation(line: 1473, column: 38, scope: !4035)
!4060 = !DILocation(line: 1473, column: 44, scope: !4035)
!4061 = !DILocation(line: 1473, column: 50, scope: !4035)
!4062 = !DILocation(line: 1473, column: 7, scope: !4035)
!4063 = !DILocation(line: 1475, column: 47, scope: !3998)
!4064 = !DILocation(line: 1475, column: 53, scope: !3998)
!4065 = !DILocation(line: 1475, column: 15, scope: !3998)
!4066 = !DILocation(line: 1475, column: 13, scope: !3998)
!4067 = !DILocation(line: 1476, column: 8, scope: !4068)
!4068 = distinct !DILexicalBlock(scope: !3998, file: !3, line: 1476, column: 7)
!4069 = !DILocation(line: 1476, column: 7, scope: !3998)
!4070 = !DILocation(line: 1477, column: 6, scope: !4068)
!4071 = !DILocation(line: 1477, column: 21, scope: !4068)
!4072 = !DILocation(line: 1477, column: 5, scope: !4068)
!4073 = !DILocation(line: 1478, column: 13, scope: !4074)
!4074 = distinct !DILexicalBlock(scope: !4068, file: !3, line: 1478, column: 12)
!4075 = !DILocation(line: 1478, column: 24, scope: !4074)
!4076 = !DILocation(line: 1478, column: 31, scope: !4074)
!4077 = !DILocation(line: 1478, column: 12, scope: !4068)
!4078 = !DILocation(line: 1480, column: 38, scope: !4079)
!4079 = distinct !DILexicalBlock(scope: !4074, file: !3, line: 1479, column: 5)
!4080 = !DILocation(line: 1480, column: 44, scope: !4079)
!4081 = !DILocation(line: 1480, column: 50, scope: !4079)
!4082 = !DILocation(line: 1480, column: 7, scope: !4079)
!4083 = !DILocation(line: 1481, column: 8, scope: !4079)
!4084 = !DILocation(line: 1481, column: 23, scope: !4079)
!4085 = !DILocation(line: 1482, column: 5, scope: !4079)
!4086 = !DILocalVariable(name: "count", scope: !4087, file: !3, line: 1485, type: !2099)
!4087 = distinct !DILexicalBlock(scope: !4074, file: !3, line: 1484, column: 5)
!4088 = !DILocation(line: 1485, column: 17, scope: !4087)
!4089 = !DILocalVariable(name: "alignment", scope: !4087, file: !3, line: 1486, type: !1653)
!4090 = !DILocation(line: 1486, column: 11, scope: !4087)
!4091 = !DILocation(line: 1488, column: 15, scope: !4087)
!4092 = !DILocation(line: 1488, column: 26, scope: !4087)
!4093 = !DILocation(line: 1488, column: 33, scope: !4087)
!4094 = !DILocation(line: 1488, column: 13, scope: !4087)
!4095 = !DILocation(line: 1489, column: 17, scope: !4087)
!4096 = !DILocation(line: 1490, column: 7, scope: !4087)
!4097 = !DILocation(line: 1490, column: 16, scope: !4087)
!4098 = !DILocation(line: 1490, column: 24, scope: !4087)
!4099 = !DILocation(line: 1490, column: 22, scope: !4087)
!4100 = !DILocation(line: 1491, column: 7, scope: !4087)
!4101 = !DILocation(line: 1491, column: 11, scope: !4087)
!4102 = !DILocation(line: 1491, column: 21, scope: !4087)
!4103 = !DILocation(line: 1491, column: 25, scope: !4087)
!4104 = !DILocation(line: 0, scope: !4087)
!4105 = !DILocation(line: 1492, column: 12, scope: !4087)
!4106 = distinct !{!4106, !4096, !4107}
!4107 = !DILocation(line: 1492, column: 16, scope: !4087)
!4108 = !DILocation(line: 1493, column: 25, scope: !4087)
!4109 = !DILocation(line: 1493, column: 35, scope: !4087)
!4110 = !DILocation(line: 1493, column: 8, scope: !4087)
!4111 = !DILocation(line: 1493, column: 23, scope: !4087)
!4112 = !DILocation(line: 1494, column: 38, scope: !4087)
!4113 = !DILocation(line: 1494, column: 44, scope: !4087)
!4114 = !DILocation(line: 1494, column: 50, scope: !4087)
!4115 = !DILocation(line: 1494, column: 7, scope: !4087)
!4116 = !DILocation(line: 1496, column: 1, scope: !3998)
!4117 = distinct !DISubprogram(name: "gimple_register_value_prof_hooks", scope: !3, file: !3, line: 1702, type: !3010, scopeLine: 1703, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4118 = !DILocation(line: 1704, column: 3, scope: !4117)
!4119 = !DILocation(line: 1705, column: 20, scope: !4117)
!4120 = !DILocation(line: 1706, column: 1, scope: !4117)
!4121 = distinct !DISubprogram(name: "find_values_to_profile", scope: !3, file: !3, line: 1710, type: !3162, scopeLine: 1711, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4122 = !DILocalVariable(name: "values", arg: 1, scope: !4121, file: !3, line: 1710, type: !3164)
!4123 = !DILocation(line: 1710, column: 43, scope: !4121)
!4124 = !DILocation(line: 1712, column: 4, scope: !4121)
!4125 = !DILocation(line: 1712, column: 22, scope: !4121)
!4126 = !DILocation(line: 1712, column: 47, scope: !4121)
!4127 = !DILocation(line: 1712, column: 3, scope: !4121)
!4128 = !DILocation(line: 1713, column: 1, scope: !4121)
!4129 = distinct !DISubprogram(name: "value_profile_transformations", scope: !3, file: !3, line: 1716, type: !2991, scopeLine: 1717, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4130 = !DILocation(line: 1718, column: 11, scope: !4129)
!4131 = !DILocation(line: 1718, column: 29, scope: !4129)
!4132 = !DILocation(line: 1718, column: 10, scope: !4129)
!4133 = !DILocation(line: 1718, column: 3, scope: !4129)
!4134 = distinct !DISubprogram(name: "histogram_hash", scope: !3, file: !3, line: 107, type: !2360, scopeLine: 108, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4135 = !DILocalVariable(name: "x", arg: 1, scope: !4134, file: !3, line: 107, type: !2194)
!4136 = !DILocation(line: 107, column: 29, scope: !4134)
!4137 = !DILocation(line: 109, column: 10, scope: !4134)
!4138 = !DILocation(line: 109, column: 53, scope: !4134)
!4139 = !DILocation(line: 109, column: 30, scope: !4134)
!4140 = !DILocation(line: 109, column: 57, scope: !4134)
!4141 = !DILocation(line: 109, column: 64, scope: !4134)
!4142 = !DILocation(line: 109, column: 29, scope: !4134)
!4143 = !DILocation(line: 109, column: 3, scope: !4134)
!4144 = distinct !DISubprogram(name: "histogram_eq", scope: !3, file: !3, line: 115, type: !2366, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4145 = !DILocalVariable(name: "x", arg: 1, scope: !4144, file: !3, line: 115, type: !2194)
!4146 = !DILocation(line: 115, column: 27, scope: !4144)
!4147 = !DILocalVariable(name: "y", arg: 2, scope: !4144, file: !3, line: 115, type: !2194)
!4148 = !DILocation(line: 115, column: 42, scope: !4144)
!4149 = !DILocation(line: 117, column: 35, scope: !4144)
!4150 = !DILocation(line: 117, column: 11, scope: !4144)
!4151 = !DILocation(line: 117, column: 39, scope: !4144)
!4152 = !DILocation(line: 117, column: 46, scope: !4144)
!4153 = !DILocation(line: 117, column: 69, scope: !4144)
!4154 = !DILocation(line: 117, column: 54, scope: !4144)
!4155 = !DILocation(line: 117, column: 51, scope: !4144)
!4156 = !DILocation(line: 117, column: 3, scope: !4144)
!4157 = distinct !DISubprogram(name: "bb_seq", scope: !413, file: !413, line: 237, type: !4158, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4158 = !DISubroutineType(types: !4159)
!4159 = !{!1877, !4160}
!4160 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !388, line: 112, baseType: !4161)
!4161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4162, size: 64)
!4162 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1852)
!4163 = !DILocalVariable(name: "bb", arg: 1, scope: !4157, file: !413, line: 237, type: !4160)
!4164 = !DILocation(line: 237, column: 27, scope: !4157)
!4165 = !DILocation(line: 239, column: 13, scope: !4157)
!4166 = !DILocation(line: 239, column: 17, scope: !4157)
!4167 = !DILocation(line: 239, column: 23, scope: !4157)
!4168 = !DILocation(line: 239, column: 33, scope: !4157)
!4169 = !DILocation(line: 239, column: 36, scope: !4157)
!4170 = !DILocation(line: 239, column: 40, scope: !4157)
!4171 = !DILocation(line: 239, column: 43, scope: !4157)
!4172 = !DILocation(line: 239, column: 10, scope: !4157)
!4173 = !DILocation(line: 239, column: 53, scope: !4157)
!4174 = !DILocation(line: 239, column: 57, scope: !4157)
!4175 = !DILocation(line: 239, column: 60, scope: !4157)
!4176 = !DILocation(line: 239, column: 68, scope: !4157)
!4177 = !DILocation(line: 239, column: 3, scope: !4157)
!4178 = distinct !DISubprogram(name: "gimple_seq_first", scope: !413, file: !413, line: 159, type: !4179, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4179 = !DISubroutineType(types: !4180)
!4180 = !{!1882, !4181}
!4181 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !388, line: 67, baseType: !4182)
!4182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4183, size: 64)
!4183 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1879)
!4184 = !DILocalVariable(name: "s", arg: 1, scope: !4178, file: !413, line: 159, type: !4181)
!4185 = !DILocation(line: 159, column: 36, scope: !4178)
!4186 = !DILocation(line: 161, column: 10, scope: !4178)
!4187 = !DILocation(line: 161, column: 14, scope: !4178)
!4188 = !DILocation(line: 161, column: 17, scope: !4178)
!4189 = !DILocation(line: 161, column: 3, scope: !4178)
!4190 = distinct !DISubprogram(name: "gimple_find_values_to_profile", scope: !3, file: !3, line: 1640, type: !3162, scopeLine: 1641, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4191 = !DILocalVariable(name: "values", arg: 1, scope: !4190, file: !3, line: 1640, type: !3164)
!4192 = !DILocation(line: 1640, column: 50, scope: !4190)
!4193 = !DILocalVariable(name: "bb", scope: !4190, file: !3, line: 1642, type: !2321)
!4194 = !DILocation(line: 1642, column: 15, scope: !4190)
!4195 = !DILocalVariable(name: "gsi", scope: !4190, file: !3, line: 1643, type: !3797)
!4196 = !DILocation(line: 1643, column: 24, scope: !4190)
!4197 = !DILocalVariable(name: "i", scope: !4190, file: !3, line: 1644, type: !7)
!4198 = !DILocation(line: 1644, column: 12, scope: !4190)
!4199 = !DILocalVariable(name: "hist", scope: !4190, file: !3, line: 1645, type: !1549)
!4200 = !DILocation(line: 1645, column: 19, scope: !4190)
!4201 = !DILocation(line: 1647, column: 4, scope: !4190)
!4202 = !DILocation(line: 1647, column: 11, scope: !4190)
!4203 = !DILocation(line: 1648, column: 3, scope: !4204)
!4204 = distinct !DILexicalBlock(scope: !4190, file: !3, line: 1648, column: 3)
!4205 = !DILocation(line: 1648, column: 3, scope: !4206)
!4206 = distinct !DILexicalBlock(scope: !4204, file: !3, line: 1648, column: 3)
!4207 = !DILocation(line: 1649, column: 30, scope: !4208)
!4208 = distinct !DILexicalBlock(scope: !4206, file: !3, line: 1649, column: 5)
!4209 = !DILocation(line: 1649, column: 16, scope: !4208)
!4210 = !DILocation(line: 1649, column: 10, scope: !4208)
!4211 = !DILocation(line: 1649, column: 36, scope: !4212)
!4212 = distinct !DILexicalBlock(scope: !4208, file: !3, line: 1649, column: 5)
!4213 = !DILocation(line: 1649, column: 35, scope: !4212)
!4214 = !DILocation(line: 1649, column: 5, scope: !4208)
!4215 = !DILocation(line: 1650, column: 33, scope: !4212)
!4216 = !DILocation(line: 1650, column: 49, scope: !4212)
!4217 = !DILocation(line: 1650, column: 7, scope: !4212)
!4218 = !DILocation(line: 1649, column: 53, scope: !4212)
!4219 = !DILocation(line: 1649, column: 5, scope: !4212)
!4220 = distinct !{!4220, !4214, !4221}
!4221 = !DILocation(line: 1650, column: 55, scope: !4208)
!4222 = distinct !{!4222, !4203, !4223}
!4223 = !DILocation(line: 1650, column: 55, scope: !4204)
!4224 = !DILocation(line: 1652, column: 10, scope: !4225)
!4225 = distinct !DILexicalBlock(scope: !4190, file: !3, line: 1652, column: 3)
!4226 = !DILocation(line: 1652, column: 8, scope: !4225)
!4227 = !DILocation(line: 1652, column: 15, scope: !4228)
!4228 = distinct !DILexicalBlock(scope: !4225, file: !3, line: 1652, column: 3)
!4229 = !DILocation(line: 1652, column: 3, scope: !4225)
!4230 = !DILocation(line: 1654, column: 15, scope: !4231)
!4231 = distinct !DILexicalBlock(scope: !4228, file: !3, line: 1653, column: 5)
!4232 = !DILocation(line: 1654, column: 21, scope: !4231)
!4233 = !DILocation(line: 1654, column: 7, scope: !4231)
!4234 = !DILocation(line: 1657, column: 23, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 1655, column: 9)
!4236 = !DILocation(line: 1657, column: 29, scope: !4235)
!4237 = !DILocation(line: 1657, column: 35, scope: !4235)
!4238 = !DILocation(line: 1657, column: 41, scope: !4235)
!4239 = !DILocation(line: 1657, column: 47, scope: !4235)
!4240 = !DILocation(line: 1657, column: 4, scope: !4235)
!4241 = !DILocation(line: 1657, column: 10, scope: !4235)
!4242 = !DILocation(line: 1657, column: 21, scope: !4235)
!4243 = !DILocation(line: 1658, column: 4, scope: !4235)
!4244 = !DILocation(line: 1661, column: 4, scope: !4235)
!4245 = !DILocation(line: 1661, column: 10, scope: !4235)
!4246 = !DILocation(line: 1661, column: 21, scope: !4235)
!4247 = !DILocation(line: 1662, column: 4, scope: !4235)
!4248 = !DILocation(line: 1665, column: 4, scope: !4235)
!4249 = !DILocation(line: 1665, column: 10, scope: !4235)
!4250 = !DILocation(line: 1665, column: 21, scope: !4235)
!4251 = !DILocation(line: 1666, column: 4, scope: !4235)
!4252 = !DILocation(line: 1669, column: 4, scope: !4235)
!4253 = !DILocation(line: 1669, column: 10, scope: !4235)
!4254 = !DILocation(line: 1669, column: 21, scope: !4235)
!4255 = !DILocation(line: 1670, column: 4, scope: !4235)
!4256 = !DILocation(line: 1673, column: 5, scope: !4235)
!4257 = !DILocation(line: 1673, column: 11, scope: !4235)
!4258 = !DILocation(line: 1673, column: 22, scope: !4235)
!4259 = !DILocation(line: 1674, column: 4, scope: !4235)
!4260 = !DILocation(line: 1677, column: 4, scope: !4235)
!4261 = !DILocation(line: 1677, column: 10, scope: !4235)
!4262 = !DILocation(line: 1677, column: 21, scope: !4235)
!4263 = !DILocation(line: 1678, column: 4, scope: !4235)
!4264 = !DILocation(line: 1681, column: 4, scope: !4235)
!4265 = !DILocation(line: 1681, column: 10, scope: !4235)
!4266 = !DILocation(line: 1681, column: 21, scope: !4235)
!4267 = !DILocation(line: 1682, column: 4, scope: !4235)
!4268 = !DILocation(line: 1685, column: 4, scope: !4235)
!4269 = !DILocation(line: 1686, column: 2, scope: !4235)
!4270 = !DILocation(line: 1687, column: 11, scope: !4271)
!4271 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 1687, column: 11)
!4272 = !DILocation(line: 1687, column: 11, scope: !4231)
!4273 = !DILocation(line: 1689, column: 13, scope: !4274)
!4274 = distinct !DILexicalBlock(scope: !4271, file: !3, line: 1688, column: 9)
!4275 = !DILocation(line: 1689, column: 4, scope: !4274)
!4276 = !DILocation(line: 1690, column: 30, scope: !4274)
!4277 = !DILocation(line: 1690, column: 41, scope: !4274)
!4278 = !DILocation(line: 1690, column: 47, scope: !4274)
!4279 = !DILocation(line: 1690, column: 54, scope: !4274)
!4280 = !DILocation(line: 1690, column: 11, scope: !4274)
!4281 = !DILocation(line: 1691, column: 26, scope: !4274)
!4282 = !DILocation(line: 1691, column: 37, scope: !4274)
!4283 = !DILocation(line: 1691, column: 4, scope: !4274)
!4284 = !DILocation(line: 1692, column: 9, scope: !4274)
!4285 = !DILocation(line: 1693, column: 5, scope: !4231)
!4286 = !DILocation(line: 1652, column: 65, scope: !4228)
!4287 = !DILocation(line: 1652, column: 3, scope: !4228)
!4288 = distinct !{!4288, !4229, !4289}
!4289 = !DILocation(line: 1693, column: 5, scope: !4225)
!4290 = !DILocation(line: 1694, column: 1, scope: !4190)
!4291 = distinct !DISubprogram(name: "gimple_value_profile_transformations", scope: !3, file: !3, line: 491, type: !2991, scopeLine: 492, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4292 = !DILocalVariable(name: "bb", scope: !4291, file: !3, line: 493, type: !2321)
!4293 = !DILocation(line: 493, column: 15, scope: !4291)
!4294 = !DILocalVariable(name: "gsi", scope: !4291, file: !3, line: 494, type: !3797)
!4295 = !DILocation(line: 494, column: 24, scope: !4291)
!4296 = !DILocalVariable(name: "changed", scope: !4291, file: !3, line: 495, type: !1676)
!4297 = !DILocation(line: 495, column: 8, scope: !4291)
!4298 = !DILocation(line: 497, column: 3, scope: !4299)
!4299 = distinct !DILexicalBlock(scope: !4291, file: !3, line: 497, column: 3)
!4300 = !DILocation(line: 497, column: 3, scope: !4301)
!4301 = distinct !DILexicalBlock(scope: !4299, file: !3, line: 497, column: 3)
!4302 = !DILocation(line: 499, column: 32, scope: !4303)
!4303 = distinct !DILexicalBlock(scope: !4304, file: !3, line: 499, column: 7)
!4304 = distinct !DILexicalBlock(scope: !4301, file: !3, line: 498, column: 5)
!4305 = !DILocation(line: 499, column: 18, scope: !4303)
!4306 = !DILocation(line: 499, column: 12, scope: !4303)
!4307 = !DILocation(line: 499, column: 38, scope: !4308)
!4308 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 499, column: 7)
!4309 = !DILocation(line: 499, column: 37, scope: !4308)
!4310 = !DILocation(line: 499, column: 7, scope: !4303)
!4311 = !DILocalVariable(name: "stmt", scope: !4312, file: !3, line: 501, type: !1887)
!4312 = distinct !DILexicalBlock(scope: !4308, file: !3, line: 500, column: 2)
!4313 = !DILocation(line: 501, column: 11, scope: !4312)
!4314 = !DILocation(line: 501, column: 18, scope: !4312)
!4315 = !DILocalVariable(name: "th", scope: !4312, file: !3, line: 502, type: !1549)
!4316 = !DILocation(line: 502, column: 20, scope: !4312)
!4317 = !DILocation(line: 502, column: 49, scope: !4312)
!4318 = !DILocation(line: 502, column: 55, scope: !4312)
!4319 = !DILocation(line: 502, column: 25, scope: !4312)
!4320 = !DILocation(line: 503, column: 9, scope: !4321)
!4321 = distinct !DILexicalBlock(scope: !4312, file: !3, line: 503, column: 8)
!4322 = !DILocation(line: 503, column: 8, scope: !4312)
!4323 = !DILocation(line: 504, column: 6, scope: !4321)
!4324 = !DILocation(line: 506, column: 8, scope: !4325)
!4325 = distinct !DILexicalBlock(scope: !4312, file: !3, line: 506, column: 8)
!4326 = !DILocation(line: 506, column: 8, scope: !4312)
!4327 = !DILocation(line: 508, column: 17, scope: !4328)
!4328 = distinct !DILexicalBlock(scope: !4325, file: !3, line: 507, column: 6)
!4329 = !DILocation(line: 508, column: 8, scope: !4328)
!4330 = !DILocation(line: 509, column: 27, scope: !4328)
!4331 = !DILocation(line: 509, column: 38, scope: !4328)
!4332 = !DILocation(line: 509, column: 8, scope: !4328)
!4333 = !DILocation(line: 510, column: 34, scope: !4328)
!4334 = !DILocation(line: 510, column: 40, scope: !4328)
!4335 = !DILocation(line: 510, column: 51, scope: !4328)
!4336 = !DILocation(line: 510, column: 8, scope: !4328)
!4337 = !DILocation(line: 511, column: 6, scope: !4328)
!4338 = !DILocation(line: 520, column: 8, scope: !4339)
!4339 = distinct !DILexicalBlock(scope: !4312, file: !3, line: 520, column: 8)
!4340 = !DILocation(line: 521, column: 8, scope: !4339)
!4341 = !DILocation(line: 521, column: 12, scope: !4339)
!4342 = !DILocation(line: 522, column: 5, scope: !4339)
!4343 = !DILocation(line: 522, column: 8, scope: !4339)
!4344 = !DILocation(line: 523, column: 5, scope: !4339)
!4345 = !DILocation(line: 523, column: 8, scope: !4339)
!4346 = !DILocation(line: 524, column: 5, scope: !4339)
!4347 = !DILocation(line: 524, column: 8, scope: !4339)
!4348 = !DILocation(line: 525, column: 5, scope: !4339)
!4349 = !DILocation(line: 525, column: 29, scope: !4339)
!4350 = !DILocation(line: 525, column: 8, scope: !4339)
!4351 = !DILocation(line: 520, column: 8, scope: !4312)
!4352 = !DILocation(line: 527, column: 15, scope: !4353)
!4353 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 526, column: 6)
!4354 = !DILocation(line: 527, column: 13, scope: !4353)
!4355 = !DILocation(line: 528, column: 16, scope: !4353)
!4356 = !DILocation(line: 530, column: 12, scope: !4357)
!4357 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 530, column: 12)
!4358 = !DILocation(line: 530, column: 29, scope: !4357)
!4359 = !DILocation(line: 530, column: 18, scope: !4357)
!4360 = !DILocation(line: 530, column: 15, scope: !4357)
!4361 = !DILocation(line: 530, column: 12, scope: !4353)
!4362 = !DILocation(line: 532, column: 28, scope: !4363)
!4363 = distinct !DILexicalBlock(scope: !4357, file: !3, line: 531, column: 3)
!4364 = !DILocation(line: 532, column: 17, scope: !4363)
!4365 = !DILocation(line: 532, column: 15, scope: !4363)
!4366 = !DILocation(line: 533, column: 25, scope: !4363)
!4367 = !DILocation(line: 533, column: 11, scope: !4363)
!4368 = !DILocation(line: 534, column: 3, scope: !4363)
!4369 = !DILocation(line: 535, column: 6, scope: !4353)
!4370 = !DILocation(line: 536, column: 9, scope: !4312)
!4371 = !DILocation(line: 499, column: 55, scope: !4308)
!4372 = !DILocation(line: 499, column: 7, scope: !4308)
!4373 = distinct !{!4373, !4310, !4374}
!4374 = !DILocation(line: 536, column: 9, scope: !4303)
!4375 = !DILocation(line: 537, column: 5, scope: !4304)
!4376 = distinct !{!4376, !4298, !4377}
!4377 = !DILocation(line: 537, column: 5, scope: !4299)
!4378 = !DILocation(line: 539, column: 7, scope: !4379)
!4379 = distinct !DILexicalBlock(scope: !4291, file: !3, line: 539, column: 7)
!4380 = !DILocation(line: 539, column: 7, scope: !4291)
!4381 = !DILocation(line: 541, column: 7, scope: !4382)
!4382 = distinct !DILexicalBlock(scope: !4379, file: !3, line: 540, column: 5)
!4383 = !DILocation(line: 542, column: 5, scope: !4382)
!4384 = !DILocation(line: 544, column: 10, scope: !4291)
!4385 = !DILocation(line: 544, column: 3, scope: !4291)
!4386 = distinct !DISubprogram(name: "gimple_values_to_profile", scope: !3, file: !3, line: 1629, type: !4387, scopeLine: 1630, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4387 = !DISubroutineType(types: !4388)
!4388 = !{null, !1887, !3164}
!4389 = !DILocalVariable(name: "stmt", arg: 1, scope: !4386, file: !3, line: 1629, type: !1887)
!4390 = !DILocation(line: 1629, column: 34, scope: !4386)
!4391 = !DILocalVariable(name: "values", arg: 2, scope: !4386, file: !3, line: 1629, type: !3164)
!4392 = !DILocation(line: 1629, column: 58, scope: !4386)
!4393 = !DILocation(line: 1631, column: 7, scope: !4394)
!4394 = distinct !DILexicalBlock(scope: !4386, file: !3, line: 1631, column: 7)
!4395 = !DILocation(line: 1631, column: 7, scope: !4386)
!4396 = !DILocation(line: 1633, column: 40, scope: !4397)
!4397 = distinct !DILexicalBlock(scope: !4394, file: !3, line: 1632, column: 5)
!4398 = !DILocation(line: 1633, column: 46, scope: !4397)
!4399 = !DILocation(line: 1633, column: 7, scope: !4397)
!4400 = !DILocation(line: 1634, column: 43, scope: !4397)
!4401 = !DILocation(line: 1634, column: 49, scope: !4397)
!4402 = !DILocation(line: 1634, column: 7, scope: !4397)
!4403 = !DILocation(line: 1635, column: 40, scope: !4397)
!4404 = !DILocation(line: 1635, column: 46, scope: !4397)
!4405 = !DILocation(line: 1635, column: 7, scope: !4397)
!4406 = !DILocation(line: 1636, column: 5, scope: !4397)
!4407 = !DILocation(line: 1637, column: 1, scope: !4386)
!4408 = distinct !DISubprogram(name: "VEC_histogram_value_base_iterate", scope: !378, file: !378, line: 68, type: !4409, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4409 = !DISubroutineType(types: !4410)
!4410 = !{!1653, !4411, !7, !2911}
!4411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4412, size: 64)
!4412 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2917)
!4413 = !DILocalVariable(name: "vec_", arg: 1, scope: !4408, file: !378, line: 68, type: !4411)
!4414 = !DILocation(line: 68, column: 1, scope: !4408)
!4415 = !DILocalVariable(name: "ix_", arg: 2, scope: !4408, file: !378, line: 68, type: !7)
!4416 = !DILocalVariable(name: "ptr", arg: 3, scope: !4408, file: !378, line: 68, type: !2911)
!4417 = !DILocation(line: 68, column: 1, scope: !4418)
!4418 = distinct !DILexicalBlock(scope: !4408, file: !378, line: 68, column: 1)
!4419 = !DILocation(line: 68, column: 1, scope: !4420)
!4420 = distinct !DILexicalBlock(scope: !4418, file: !378, line: 68, column: 1)
!4421 = !DILocation(line: 68, column: 1, scope: !4422)
!4422 = distinct !DILexicalBlock(scope: !4418, file: !378, line: 68, column: 1)
!4423 = distinct !DISubprogram(name: "gimple_divmod_values_to_profile", scope: !3, file: !3, line: 1510, type: !4387, scopeLine: 1511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4424 = !DILocalVariable(name: "stmt", arg: 1, scope: !4423, file: !3, line: 1510, type: !1887)
!4425 = !DILocation(line: 1510, column: 41, scope: !4423)
!4426 = !DILocalVariable(name: "values", arg: 2, scope: !4423, file: !3, line: 1510, type: !3164)
!4427 = !DILocation(line: 1510, column: 65, scope: !4423)
!4428 = !DILocalVariable(name: "lhs", scope: !4423, file: !3, line: 1512, type: !1557)
!4429 = !DILocation(line: 1512, column: 8, scope: !4423)
!4430 = !DILocalVariable(name: "divisor", scope: !4423, file: !3, line: 1512, type: !1557)
!4431 = !DILocation(line: 1512, column: 13, scope: !4423)
!4432 = !DILocalVariable(name: "op0", scope: !4423, file: !3, line: 1512, type: !1557)
!4433 = !DILocation(line: 1512, column: 22, scope: !4423)
!4434 = !DILocalVariable(name: "type", scope: !4423, file: !3, line: 1512, type: !1557)
!4435 = !DILocation(line: 1512, column: 27, scope: !4423)
!4436 = !DILocalVariable(name: "hist", scope: !4423, file: !3, line: 1513, type: !1549)
!4437 = !DILocation(line: 1513, column: 19, scope: !4423)
!4438 = !DILocation(line: 1515, column: 20, scope: !4439)
!4439 = distinct !DILexicalBlock(scope: !4423, file: !3, line: 1515, column: 7)
!4440 = !DILocation(line: 1515, column: 7, scope: !4439)
!4441 = !DILocation(line: 1515, column: 26, scope: !4439)
!4442 = !DILocation(line: 1515, column: 7, scope: !4423)
!4443 = !DILocation(line: 1516, column: 5, scope: !4439)
!4444 = !DILocation(line: 1518, column: 28, scope: !4423)
!4445 = !DILocation(line: 1518, column: 9, scope: !4423)
!4446 = !DILocation(line: 1518, column: 7, scope: !4423)
!4447 = !DILocation(line: 1519, column: 10, scope: !4423)
!4448 = !DILocation(line: 1519, column: 8, scope: !4423)
!4449 = !DILocation(line: 1520, column: 8, scope: !4450)
!4450 = distinct !DILexicalBlock(scope: !4423, file: !3, line: 1520, column: 7)
!4451 = !DILocation(line: 1520, column: 7, scope: !4423)
!4452 = !DILocation(line: 1521, column: 5, scope: !4450)
!4453 = !DILocation(line: 1523, column: 35, scope: !4423)
!4454 = !DILocation(line: 1523, column: 11, scope: !4423)
!4455 = !DILocation(line: 1523, column: 3, scope: !4423)
!4456 = !DILocation(line: 1527, column: 37, scope: !4457)
!4457 = distinct !DILexicalBlock(scope: !4423, file: !3, line: 1524, column: 5)
!4458 = !DILocation(line: 1527, column: 17, scope: !4457)
!4459 = !DILocation(line: 1527, column: 15, scope: !4457)
!4460 = !DILocation(line: 1528, column: 33, scope: !4457)
!4461 = !DILocation(line: 1528, column: 13, scope: !4457)
!4462 = !DILocation(line: 1528, column: 11, scope: !4457)
!4463 = !DILocation(line: 1530, column: 7, scope: !4457)
!4464 = !DILocation(line: 1532, column: 26, scope: !4465)
!4465 = distinct !DILexicalBlock(scope: !4457, file: !3, line: 1532, column: 11)
!4466 = !DILocation(line: 1532, column: 11, scope: !4465)
!4467 = !DILocation(line: 1532, column: 11, scope: !4457)
!4468 = !DILocation(line: 1535, column: 2, scope: !4465)
!4469 = !DILocation(line: 1542, column: 35, scope: !4470)
!4470 = distinct !DILexicalBlock(scope: !4457, file: !3, line: 1542, column: 11)
!4471 = !DILocation(line: 1542, column: 11, scope: !4470)
!4472 = !DILocation(line: 1542, column: 41, scope: !4470)
!4473 = !DILocation(line: 1543, column: 4, scope: !4470)
!4474 = !DILocation(line: 1543, column: 7, scope: !4470)
!4475 = !DILocation(line: 1542, column: 11, scope: !4457)
!4476 = !DILocalVariable(name: "val", scope: !4477, file: !3, line: 1545, type: !1557)
!4477 = distinct !DILexicalBlock(scope: !4470, file: !3, line: 1544, column: 2)
!4478 = !DILocation(line: 1545, column: 16, scope: !4477)
!4479 = !DILocation(line: 1547, column: 4, scope: !4477)
!4480 = !DILocation(line: 1551, column: 10, scope: !4477)
!4481 = !DILocation(line: 1551, column: 8, scope: !4477)
!4482 = !DILocation(line: 1552, column: 41, scope: !4477)
!4483 = !DILocation(line: 1553, column: 13, scope: !4477)
!4484 = !DILocation(line: 1553, column: 19, scope: !4477)
!4485 = !DILocation(line: 1552, column: 11, scope: !4477)
!4486 = !DILocation(line: 1552, column: 9, scope: !4477)
!4487 = !DILocation(line: 1554, column: 4, scope: !4477)
!4488 = !DILocation(line: 1554, column: 10, scope: !4477)
!4489 = !DILocation(line: 1554, column: 16, scope: !4477)
!4490 = !DILocation(line: 1554, column: 22, scope: !4477)
!4491 = !DILocation(line: 1554, column: 32, scope: !4477)
!4492 = !DILocation(line: 1555, column: 4, scope: !4477)
!4493 = !DILocation(line: 1555, column: 10, scope: !4477)
!4494 = !DILocation(line: 1555, column: 16, scope: !4477)
!4495 = !DILocation(line: 1555, column: 22, scope: !4477)
!4496 = !DILocation(line: 1555, column: 28, scope: !4477)
!4497 = !DILocation(line: 1556, column: 4, scope: !4477)
!4498 = !DILocation(line: 1557, column: 2, scope: !4477)
!4499 = !DILocation(line: 1558, column: 7, scope: !4457)
!4500 = !DILocation(line: 1561, column: 7, scope: !4457)
!4501 = !DILocation(line: 1563, column: 1, scope: !4423)
!4502 = distinct !DISubprogram(name: "gimple_stringops_values_to_profile", scope: !3, file: !3, line: 1591, type: !4387, scopeLine: 1592, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4503 = !DILocalVariable(name: "stmt", arg: 1, scope: !4502, file: !3, line: 1591, type: !1887)
!4504 = !DILocation(line: 1591, column: 44, scope: !4502)
!4505 = !DILocalVariable(name: "values", arg: 2, scope: !4502, file: !3, line: 1591, type: !3164)
!4506 = !DILocation(line: 1591, column: 68, scope: !4502)
!4507 = !DILocalVariable(name: "fndecl", scope: !4502, file: !3, line: 1593, type: !1557)
!4508 = !DILocation(line: 1593, column: 8, scope: !4502)
!4509 = !DILocalVariable(name: "blck_size", scope: !4502, file: !3, line: 1594, type: !1557)
!4510 = !DILocation(line: 1594, column: 8, scope: !4502)
!4511 = !DILocalVariable(name: "dest", scope: !4502, file: !3, line: 1595, type: !1557)
!4512 = !DILocation(line: 1595, column: 8, scope: !4502)
!4513 = !DILocalVariable(name: "size_arg", scope: !4502, file: !3, line: 1596, type: !1653)
!4514 = !DILocation(line: 1596, column: 7, scope: !4502)
!4515 = !DILocation(line: 1598, column: 20, scope: !4516)
!4516 = distinct !DILexicalBlock(scope: !4502, file: !3, line: 1598, column: 7)
!4517 = !DILocation(line: 1598, column: 7, scope: !4516)
!4518 = !DILocation(line: 1598, column: 26, scope: !4516)
!4519 = !DILocation(line: 1598, column: 7, scope: !4502)
!4520 = !DILocation(line: 1599, column: 5, scope: !4516)
!4521 = !DILocation(line: 1600, column: 32, scope: !4502)
!4522 = !DILocation(line: 1600, column: 12, scope: !4502)
!4523 = !DILocation(line: 1600, column: 10, scope: !4502)
!4524 = !DILocation(line: 1601, column: 8, scope: !4525)
!4525 = distinct !DILexicalBlock(scope: !4502, file: !3, line: 1601, column: 7)
!4526 = !DILocation(line: 1601, column: 7, scope: !4502)
!4527 = !DILocation(line: 1602, column: 5, scope: !4525)
!4528 = !DILocation(line: 1604, column: 43, scope: !4529)
!4529 = distinct !DILexicalBlock(scope: !4502, file: !3, line: 1604, column: 7)
!4530 = !DILocation(line: 1604, column: 51, scope: !4529)
!4531 = !DILocation(line: 1604, column: 8, scope: !4529)
!4532 = !DILocation(line: 1604, column: 7, scope: !4502)
!4533 = !DILocation(line: 1605, column: 5, scope: !4529)
!4534 = !DILocation(line: 1607, column: 27, scope: !4502)
!4535 = !DILocation(line: 1607, column: 10, scope: !4502)
!4536 = !DILocation(line: 1607, column: 8, scope: !4502)
!4537 = !DILocation(line: 1608, column: 32, scope: !4502)
!4538 = !DILocation(line: 1608, column: 38, scope: !4502)
!4539 = !DILocation(line: 1608, column: 15, scope: !4502)
!4540 = !DILocation(line: 1608, column: 13, scope: !4502)
!4541 = !DILocation(line: 1610, column: 7, scope: !4542)
!4542 = distinct !DILexicalBlock(scope: !4502, file: !3, line: 1610, column: 7)
!4543 = !DILocation(line: 1610, column: 29, scope: !4542)
!4544 = !DILocation(line: 1610, column: 7, scope: !4502)
!4545 = !DILocation(line: 1612, column: 7, scope: !4546)
!4546 = distinct !DILexicalBlock(scope: !4542, file: !3, line: 1611, column: 5)
!4547 = !DILocation(line: 1615, column: 7, scope: !4546)
!4548 = !DILocation(line: 1618, column: 5, scope: !4546)
!4549 = !DILocation(line: 1619, column: 7, scope: !4550)
!4550 = distinct !DILexicalBlock(scope: !4502, file: !3, line: 1619, column: 7)
!4551 = !DILocation(line: 1619, column: 29, scope: !4550)
!4552 = !DILocation(line: 1619, column: 7, scope: !4502)
!4553 = !DILocation(line: 1620, column: 5, scope: !4550)
!4554 = !DILocation(line: 1623, column: 1, scope: !4502)
!4555 = distinct !DISubprogram(name: "gimple_indirect_call_to_profile", scope: !3, file: !3, line: 1569, type: !4387, scopeLine: 1570, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4556 = !DILocalVariable(name: "stmt", arg: 1, scope: !4555, file: !3, line: 1569, type: !1887)
!4557 = !DILocation(line: 1569, column: 41, scope: !4555)
!4558 = !DILocalVariable(name: "values", arg: 2, scope: !4555, file: !3, line: 1569, type: !3164)
!4559 = !DILocation(line: 1569, column: 65, scope: !4555)
!4560 = !DILocalVariable(name: "callee", scope: !4555, file: !3, line: 1571, type: !1557)
!4561 = !DILocation(line: 1571, column: 8, scope: !4555)
!4562 = !DILocation(line: 1573, column: 20, scope: !4563)
!4563 = distinct !DILexicalBlock(scope: !4555, file: !3, line: 1573, column: 7)
!4564 = !DILocation(line: 1573, column: 7, scope: !4563)
!4565 = !DILocation(line: 1573, column: 26, scope: !4563)
!4566 = !DILocation(line: 1574, column: 7, scope: !4563)
!4567 = !DILocation(line: 1574, column: 30, scope: !4563)
!4568 = !DILocation(line: 1574, column: 10, scope: !4563)
!4569 = !DILocation(line: 1574, column: 36, scope: !4563)
!4570 = !DILocation(line: 1573, column: 7, scope: !4555)
!4571 = !DILocation(line: 1575, column: 5, scope: !4563)
!4572 = !DILocation(line: 1577, column: 28, scope: !4555)
!4573 = !DILocation(line: 1577, column: 12, scope: !4555)
!4574 = !DILocation(line: 1577, column: 10, scope: !4555)
!4575 = !DILocation(line: 1579, column: 3, scope: !4555)
!4576 = !DILocation(line: 1581, column: 3, scope: !4555)
!4577 = !DILocation(line: 1585, column: 3, scope: !4555)
!4578 = !DILocation(line: 1586, column: 1, scope: !4555)
!4579 = distinct !DISubprogram(name: "gimple_code", scope: !413, file: !413, line: 1052, type: !4580, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4580 = !DISubroutineType(types: !4581)
!4581 = !{!412, !2906}
!4582 = !DILocalVariable(name: "g", arg: 1, scope: !4579, file: !413, line: 1052, type: !2906)
!4583 = !DILocation(line: 1052, column: 27, scope: !4579)
!4584 = !DILocation(line: 1054, column: 10, scope: !4579)
!4585 = !DILocation(line: 1054, column: 13, scope: !4579)
!4586 = !DILocation(line: 1054, column: 20, scope: !4579)
!4587 = !DILocation(line: 1054, column: 3, scope: !4579)
!4588 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !413, file: !413, line: 1694, type: !4589, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4589 = !DISubroutineType(types: !4590)
!4590 = !{!1557, !2906}
!4591 = !DILocalVariable(name: "gs", arg: 1, scope: !4588, file: !413, line: 1694, type: !2906)
!4592 = !DILocation(line: 1694, column: 33, scope: !4588)
!4593 = !DILocation(line: 1697, column: 21, scope: !4588)
!4594 = !DILocation(line: 1697, column: 10, scope: !4588)
!4595 = !DILocation(line: 1697, column: 3, scope: !4588)
!4596 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !413, file: !413, line: 1815, type: !4597, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4597 = !DISubroutineType(types: !4598)
!4598 = !{!134, !2906}
!4599 = !DILocalVariable(name: "gs", arg: 1, scope: !4596, file: !413, line: 1815, type: !2906)
!4600 = !DILocation(line: 1815, column: 38, scope: !4596)
!4601 = !DILocalVariable(name: "code", scope: !4596, file: !413, line: 1817, type: !134)
!4602 = !DILocation(line: 1817, column: 18, scope: !4596)
!4603 = !DILocation(line: 1820, column: 28, scope: !4596)
!4604 = !DILocation(line: 1820, column: 10, scope: !4596)
!4605 = !DILocation(line: 1820, column: 8, scope: !4596)
!4606 = !DILocation(line: 1821, column: 29, scope: !4607)
!4607 = distinct !DILexicalBlock(scope: !4596, file: !413, line: 1821, column: 7)
!4608 = !DILocation(line: 1821, column: 7, scope: !4607)
!4609 = !DILocation(line: 1821, column: 35, scope: !4607)
!4610 = !DILocation(line: 1821, column: 7, scope: !4596)
!4611 = !DILocation(line: 1822, column: 12, scope: !4607)
!4612 = !DILocation(line: 1822, column: 10, scope: !4607)
!4613 = !DILocation(line: 1822, column: 5, scope: !4607)
!4614 = !DILocation(line: 1824, column: 10, scope: !4596)
!4615 = !DILocation(line: 1824, column: 3, scope: !4596)
!4616 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !413, file: !413, line: 1759, type: !4589, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4617 = !DILocalVariable(name: "gs", arg: 1, scope: !4616, file: !413, line: 1759, type: !2906)
!4618 = !DILocation(line: 1759, column: 34, scope: !4616)
!4619 = !DILocation(line: 1763, column: 23, scope: !4620)
!4620 = distinct !DILexicalBlock(scope: !4616, file: !413, line: 1763, column: 7)
!4621 = !DILocation(line: 1763, column: 7, scope: !4620)
!4622 = !DILocation(line: 1763, column: 27, scope: !4620)
!4623 = !DILocation(line: 1763, column: 7, scope: !4616)
!4624 = !DILocation(line: 1764, column: 23, scope: !4620)
!4625 = !DILocation(line: 1764, column: 12, scope: !4620)
!4626 = !DILocation(line: 1764, column: 5, scope: !4620)
!4627 = !DILocation(line: 1766, column: 5, scope: !4620)
!4628 = !DILocation(line: 1767, column: 1, scope: !4616)
!4629 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !413, file: !413, line: 1727, type: !4589, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4630 = !DILocalVariable(name: "gs", arg: 1, scope: !4629, file: !413, line: 1727, type: !2906)
!4631 = !DILocation(line: 1727, column: 34, scope: !4629)
!4632 = !DILocation(line: 1730, column: 21, scope: !4629)
!4633 = !DILocation(line: 1730, column: 10, scope: !4629)
!4634 = !DILocation(line: 1730, column: 3, scope: !4629)
!4635 = distinct !DISubprogram(name: "VEC_histogram_value_heap_reserve", scope: !378, file: !378, line: 69, type: !4636, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4636 = !DISubroutineType(types: !4637)
!4637 = !{!1653, !4638, !1653}
!4638 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2912, size: 64)
!4639 = !DILocalVariable(name: "vec_", arg: 1, scope: !4635, file: !378, line: 69, type: !4638)
!4640 = !DILocation(line: 69, column: 1, scope: !4635)
!4641 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4635, file: !378, line: 69, type: !1653)
!4642 = !DILocalVariable(name: "extend", scope: !4635, file: !378, line: 69, type: !1653)
!4643 = !DILocation(line: 69, column: 1, scope: !4644)
!4644 = distinct !DILexicalBlock(scope: !4635, file: !378, line: 69, column: 1)
!4645 = distinct !DISubprogram(name: "VEC_histogram_value_base_quick_push", scope: !378, file: !378, line: 68, type: !4646, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4646 = !DISubroutineType(types: !4647)
!4647 = !{!2911, !4648, !1549}
!4648 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2917, size: 64)
!4649 = !DILocalVariable(name: "vec_", arg: 1, scope: !4645, file: !378, line: 68, type: !4648)
!4650 = !DILocation(line: 68, column: 1, scope: !4645)
!4651 = !DILocalVariable(name: "obj_", arg: 2, scope: !4645, file: !378, line: 68, type: !1549)
!4652 = !DILocalVariable(name: "slot_", scope: !4645, file: !378, line: 68, type: !2911)
!4653 = distinct !DISubprogram(name: "gimple_op", scope: !413, file: !413, line: 1631, type: !4654, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4654 = !DISubroutineType(types: !4655)
!4655 = !{!1557, !2906, !7}
!4656 = !DILocalVariable(name: "gs", arg: 1, scope: !4653, file: !413, line: 1631, type: !2906)
!4657 = !DILocation(line: 1631, column: 25, scope: !4653)
!4658 = !DILocalVariable(name: "i", arg: 2, scope: !4653, file: !413, line: 1631, type: !7)
!4659 = !DILocation(line: 1631, column: 38, scope: !4653)
!4660 = !DILocation(line: 1633, column: 23, scope: !4661)
!4661 = distinct !DILexicalBlock(scope: !4653, file: !413, line: 1633, column: 7)
!4662 = !DILocation(line: 1633, column: 7, scope: !4661)
!4663 = !DILocation(line: 1633, column: 7, scope: !4653)
!4664 = !DILocation(line: 1638, column: 26, scope: !4665)
!4665 = distinct !DILexicalBlock(scope: !4661, file: !413, line: 1634, column: 5)
!4666 = !DILocation(line: 1638, column: 14, scope: !4665)
!4667 = !DILocation(line: 1638, column: 50, scope: !4665)
!4668 = !DILocation(line: 1638, column: 7, scope: !4665)
!4669 = !DILocation(line: 1641, column: 5, scope: !4661)
!4670 = !DILocation(line: 1642, column: 1, scope: !4653)
!4671 = distinct !DISubprogram(name: "gimple_has_ops", scope: !413, file: !413, line: 1274, type: !4672, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4672 = !DISubroutineType(types: !4673)
!4673 = !{!1676, !2906}
!4674 = !DILocalVariable(name: "g", arg: 1, scope: !4671, file: !413, line: 1274, type: !2906)
!4675 = !DILocation(line: 1274, column: 30, scope: !4671)
!4676 = !DILocation(line: 1276, column: 23, scope: !4671)
!4677 = !DILocation(line: 1276, column: 10, scope: !4671)
!4678 = !DILocation(line: 1276, column: 26, scope: !4671)
!4679 = !DILocation(line: 1276, column: 41, scope: !4671)
!4680 = !DILocation(line: 1276, column: 57, scope: !4671)
!4681 = !DILocation(line: 1276, column: 44, scope: !4671)
!4682 = !DILocation(line: 1276, column: 60, scope: !4671)
!4683 = !DILocation(line: 0, scope: !4671)
!4684 = !DILocation(line: 1276, column: 3, scope: !4671)
!4685 = distinct !DISubprogram(name: "gimple_ops", scope: !413, file: !413, line: 1614, type: !4686, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4686 = !DISubroutineType(types: !4687)
!4687 = !{!1922, !1887}
!4688 = !DILocalVariable(name: "gs", arg: 1, scope: !4685, file: !413, line: 1614, type: !1887)
!4689 = !DILocation(line: 1614, column: 20, scope: !4685)
!4690 = !DILocalVariable(name: "off", scope: !4685, file: !413, line: 1616, type: !2033)
!4691 = !DILocation(line: 1616, column: 10, scope: !4685)
!4692 = !DILocation(line: 1621, column: 56, scope: !4685)
!4693 = !DILocation(line: 1621, column: 28, scope: !4685)
!4694 = !DILocation(line: 1621, column: 9, scope: !4685)
!4695 = !DILocation(line: 1621, column: 7, scope: !4685)
!4696 = !DILocation(line: 1622, column: 3, scope: !4685)
!4697 = !DILocation(line: 1624, column: 29, scope: !4685)
!4698 = !DILocation(line: 1624, column: 20, scope: !4685)
!4699 = !DILocation(line: 1624, column: 34, scope: !4685)
!4700 = !DILocation(line: 1624, column: 32, scope: !4685)
!4701 = !DILocation(line: 1624, column: 10, scope: !4685)
!4702 = !DILocation(line: 1624, column: 3, scope: !4685)
!4703 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !413, file: !413, line: 1073, type: !4704, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4704 = !DISubroutineType(types: !4705)
!4705 = !{!451, !1887}
!4706 = !DILocalVariable(name: "gs", arg: 1, scope: !4703, file: !413, line: 1073, type: !1887)
!4707 = !DILocation(line: 1073, column: 36, scope: !4703)
!4708 = !DILocation(line: 1075, column: 37, scope: !4703)
!4709 = !DILocation(line: 1075, column: 24, scope: !4703)
!4710 = !DILocation(line: 1075, column: 10, scope: !4703)
!4711 = !DILocation(line: 1075, column: 3, scope: !4703)
!4712 = distinct !DISubprogram(name: "gss_for_code", scope: !413, file: !413, line: 1061, type: !4713, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4713 = !DISubroutineType(types: !4714)
!4714 = !{!451, !412}
!4715 = !DILocalVariable(name: "code", arg: 1, scope: !4712, file: !413, line: 1061, type: !412)
!4716 = !DILocation(line: 1061, column: 32, scope: !4712)
!4717 = !DILocation(line: 1066, column: 24, scope: !4712)
!4718 = !DILocation(line: 1066, column: 10, scope: !4712)
!4719 = !DILocation(line: 1066, column: 3, scope: !4712)
!4720 = distinct !DISubprogram(name: "gimple_expr_code", scope: !413, file: !413, line: 1438, type: !4597, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4721 = !DILocalVariable(name: "stmt", arg: 1, scope: !4720, file: !413, line: 1438, type: !2906)
!4722 = !DILocation(line: 1438, column: 32, scope: !4720)
!4723 = !DILocalVariable(name: "code", scope: !4720, file: !413, line: 1440, type: !412)
!4724 = !DILocation(line: 1440, column: 20, scope: !4720)
!4725 = !DILocation(line: 1440, column: 40, scope: !4720)
!4726 = !DILocation(line: 1440, column: 27, scope: !4720)
!4727 = !DILocation(line: 1441, column: 7, scope: !4728)
!4728 = distinct !DILexicalBlock(scope: !4720, file: !413, line: 1441, column: 7)
!4729 = !DILocation(line: 1441, column: 12, scope: !4728)
!4730 = !DILocation(line: 1441, column: 29, scope: !4728)
!4731 = !DILocation(line: 1441, column: 32, scope: !4728)
!4732 = !DILocation(line: 1441, column: 37, scope: !4728)
!4733 = !DILocation(line: 1441, column: 7, scope: !4720)
!4734 = !DILocation(line: 1442, column: 29, scope: !4728)
!4735 = !DILocation(line: 1442, column: 35, scope: !4728)
!4736 = !DILocation(line: 1442, column: 42, scope: !4728)
!4737 = !DILocation(line: 1442, column: 5, scope: !4728)
!4738 = !DILocation(line: 1443, column: 12, scope: !4739)
!4739 = distinct !DILexicalBlock(scope: !4728, file: !413, line: 1443, column: 12)
!4740 = !DILocation(line: 1443, column: 17, scope: !4739)
!4741 = !DILocation(line: 1443, column: 12, scope: !4728)
!4742 = !DILocation(line: 1444, column: 5, scope: !4739)
!4743 = !DILocation(line: 1446, column: 5, scope: !4739)
!4744 = !DILocation(line: 1448, column: 5, scope: !4720)
!4745 = !DILocation(line: 1450, column: 1, scope: !4720)
!4746 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !413, file: !413, line: 1686, type: !4747, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4747 = !DISubroutineType(types: !4748)
!4748 = !{!477, !134}
!4749 = !DILocalVariable(name: "code", arg: 1, scope: !4746, file: !413, line: 1686, type: !134)
!4750 = !DILocation(line: 1686, column: 38, scope: !4746)
!4751 = !DILocation(line: 1688, column: 63, scope: !4746)
!4752 = !DILocation(line: 1688, column: 34, scope: !4746)
!4753 = !DILocation(line: 1688, column: 10, scope: !4746)
!4754 = !DILocation(line: 1688, column: 3, scope: !4746)
!4755 = distinct !DISubprogram(name: "gimple_num_ops", scope: !413, file: !413, line: 1596, type: !4756, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4756 = !DISubroutineType(types: !4757)
!4757 = !{!7, !2906}
!4758 = !DILocalVariable(name: "gs", arg: 1, scope: !4755, file: !413, line: 1596, type: !2906)
!4759 = !DILocation(line: 1596, column: 30, scope: !4755)
!4760 = !DILocation(line: 1598, column: 10, scope: !4755)
!4761 = !DILocation(line: 1598, column: 14, scope: !4755)
!4762 = !DILocation(line: 1598, column: 21, scope: !4755)
!4763 = !DILocation(line: 1598, column: 3, scope: !4755)
!4764 = distinct !DISubprogram(name: "VEC_histogram_value_base_space", scope: !378, file: !378, line: 68, type: !4765, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4765 = !DISubroutineType(types: !4766)
!4766 = !{!1653, !4648, !1653}
!4767 = !DILocalVariable(name: "vec_", arg: 1, scope: !4764, file: !378, line: 68, type: !4648)
!4768 = !DILocation(line: 68, column: 1, scope: !4764)
!4769 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4764, file: !378, line: 68, type: !1653)
!4770 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !413, file: !413, line: 1954, type: !4589, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4771 = !DILocalVariable(name: "gs", arg: 1, scope: !4770, file: !413, line: 1954, type: !2906)
!4772 = !DILocation(line: 1954, column: 34, scope: !4770)
!4773 = !DILocalVariable(name: "addr", scope: !4770, file: !413, line: 1956, type: !1557)
!4774 = !DILocation(line: 1956, column: 8, scope: !4770)
!4775 = !DILocation(line: 1956, column: 31, scope: !4770)
!4776 = !DILocation(line: 1956, column: 15, scope: !4770)
!4777 = !DILocation(line: 1957, column: 7, scope: !4778)
!4778 = distinct !DILexicalBlock(scope: !4770, file: !413, line: 1957, column: 7)
!4779 = !DILocation(line: 1957, column: 24, scope: !4778)
!4780 = !DILocation(line: 1957, column: 7, scope: !4770)
!4781 = !DILocation(line: 1958, column: 12, scope: !4778)
!4782 = !DILocation(line: 1958, column: 5, scope: !4778)
!4783 = !DILocation(line: 1959, column: 3, scope: !4770)
!4784 = !DILocation(line: 1960, column: 1, scope: !4770)
!4785 = distinct !DISubprogram(name: "interesting_stringop_to_profile_p", scope: !3, file: !3, line: 1249, type: !4786, scopeLine: 1250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4786 = !DISubroutineType(types: !4787)
!4787 = !{!1676, !1557, !1887, !4788}
!4788 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1653, size: 64)
!4789 = !DILocalVariable(name: "fndecl", arg: 1, scope: !4785, file: !3, line: 1249, type: !1557)
!4790 = !DILocation(line: 1249, column: 41, scope: !4785)
!4791 = !DILocalVariable(name: "call", arg: 2, scope: !4785, file: !3, line: 1249, type: !1887)
!4792 = !DILocation(line: 1249, column: 56, scope: !4785)
!4793 = !DILocalVariable(name: "size_arg", arg: 3, scope: !4785, file: !3, line: 1249, type: !4788)
!4794 = !DILocation(line: 1249, column: 67, scope: !4785)
!4795 = !DILocalVariable(name: "fcode", scope: !4785, file: !3, line: 1251, type: !483)
!4796 = !DILocation(line: 1251, column: 26, scope: !4785)
!4797 = !DILocation(line: 1251, column: 34, scope: !4785)
!4798 = !DILocation(line: 1253, column: 7, scope: !4799)
!4799 = distinct !DILexicalBlock(scope: !4785, file: !3, line: 1253, column: 7)
!4800 = !DILocation(line: 1253, column: 13, scope: !4799)
!4801 = !DILocation(line: 1253, column: 32, scope: !4799)
!4802 = !DILocation(line: 1253, column: 35, scope: !4799)
!4803 = !DILocation(line: 1253, column: 41, scope: !4799)
!4804 = !DILocation(line: 1254, column: 7, scope: !4799)
!4805 = !DILocation(line: 1254, column: 10, scope: !4799)
!4806 = !DILocation(line: 1254, column: 16, scope: !4799)
!4807 = !DILocation(line: 1254, column: 35, scope: !4799)
!4808 = !DILocation(line: 1254, column: 38, scope: !4799)
!4809 = !DILocation(line: 1254, column: 44, scope: !4799)
!4810 = !DILocation(line: 1253, column: 7, scope: !4785)
!4811 = !DILocation(line: 1255, column: 5, scope: !4799)
!4812 = !DILocation(line: 1257, column: 11, scope: !4785)
!4813 = !DILocation(line: 1257, column: 3, scope: !4785)
!4814 = !DILocation(line: 1261, column: 9, scope: !4815)
!4815 = distinct !DILexicalBlock(scope: !4785, file: !3, line: 1258, column: 5)
!4816 = !DILocation(line: 1261, column: 18, scope: !4815)
!4817 = !DILocation(line: 1262, column: 40, scope: !4815)
!4818 = !DILocation(line: 1262, column: 15, scope: !4815)
!4819 = !DILocation(line: 1262, column: 8, scope: !4815)
!4820 = !DILocation(line: 1265, column: 9, scope: !4815)
!4821 = !DILocation(line: 1265, column: 18, scope: !4815)
!4822 = !DILocation(line: 1266, column: 40, scope: !4815)
!4823 = !DILocation(line: 1266, column: 15, scope: !4815)
!4824 = !DILocation(line: 1266, column: 8, scope: !4815)
!4825 = !DILocation(line: 1269, column: 9, scope: !4815)
!4826 = !DILocation(line: 1269, column: 18, scope: !4815)
!4827 = !DILocation(line: 1270, column: 40, scope: !4815)
!4828 = !DILocation(line: 1270, column: 15, scope: !4815)
!4829 = !DILocation(line: 1270, column: 8, scope: !4815)
!4830 = !DILocation(line: 1273, column: 8, scope: !4815)
!4831 = !DILocation(line: 1274, column: 5, scope: !4815)
!4832 = !DILocation(line: 1276, column: 5, scope: !4785)
!4833 = !DILocation(line: 1278, column: 1, scope: !4785)
!4834 = distinct !DISubprogram(name: "gimple_call_arg", scope: !413, file: !413, line: 2025, type: !4654, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4835 = !DILocalVariable(name: "gs", arg: 1, scope: !4834, file: !413, line: 2025, type: !2906)
!4836 = !DILocation(line: 2025, column: 31, scope: !4834)
!4837 = !DILocalVariable(name: "index", arg: 2, scope: !4834, file: !413, line: 2025, type: !7)
!4838 = !DILocation(line: 2025, column: 44, scope: !4834)
!4839 = !DILocation(line: 2028, column: 21, scope: !4834)
!4840 = !DILocation(line: 2028, column: 25, scope: !4834)
!4841 = !DILocation(line: 2028, column: 31, scope: !4834)
!4842 = !DILocation(line: 2028, column: 10, scope: !4834)
!4843 = !DILocation(line: 2028, column: 3, scope: !4834)
!4844 = distinct !DISubprogram(name: "VEC_histogram_value_heap_safe_push", scope: !378, file: !378, line: 69, type: !4845, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4845 = !DISubroutineType(types: !4846)
!4846 = !{!2911, !4638, !1549}
!4847 = !DILocalVariable(name: "vec_", arg: 1, scope: !4844, file: !378, line: 69, type: !4638)
!4848 = !DILocation(line: 69, column: 1, scope: !4844)
!4849 = !DILocalVariable(name: "obj_", arg: 2, scope: !4844, file: !378, line: 69, type: !1549)
!4850 = distinct !DISubprogram(name: "gimple_call_fn", scope: !413, file: !413, line: 1911, type: !4589, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4851 = !DILocalVariable(name: "gs", arg: 1, scope: !4850, file: !413, line: 1911, type: !2906)
!4852 = !DILocation(line: 1911, column: 30, scope: !4850)
!4853 = !DILocation(line: 1914, column: 21, scope: !4850)
!4854 = !DILocation(line: 1914, column: 10, scope: !4850)
!4855 = !DILocation(line: 1914, column: 3, scope: !4850)
!4856 = distinct !DISubprogram(name: "gimple_mod_subtract_transform", scope: !3, file: !3, line: 957, type: !4857, scopeLine: 958, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!4857 = !DISubroutineType(types: !4858)
!4858 = !{!1676, !3927}
!4859 = !DILocalVariable(name: "si", arg: 1, scope: !4856, file: !3, line: 957, type: !3927)
!4860 = !DILocation(line: 957, column: 54, scope: !4856)
!4861 = !DILocalVariable(name: "histogram", scope: !4856, file: !3, line: 959, type: !1549)
!4862 = !DILocation(line: 959, column: 19, scope: !4856)
!4863 = !DILocalVariable(name: "code", scope: !4856, file: !3, line: 960, type: !134)
!4864 = !DILocation(line: 960, column: 18, scope: !4856)
!4865 = !DILocalVariable(name: "count", scope: !4856, file: !3, line: 961, type: !2099)
!4866 = !DILocation(line: 961, column: 13, scope: !4856)
!4867 = !DILocalVariable(name: "wrong_values", scope: !4856, file: !3, line: 961, type: !2099)
!4868 = !DILocation(line: 961, column: 20, scope: !4856)
!4869 = !DILocalVariable(name: "all", scope: !4856, file: !3, line: 961, type: !2099)
!4870 = !DILocation(line: 961, column: 34, scope: !4856)
!4871 = !DILocalVariable(name: "lhs_type", scope: !4856, file: !3, line: 962, type: !1557)
!4872 = !DILocation(line: 962, column: 8, scope: !4856)
!4873 = !DILocalVariable(name: "result", scope: !4856, file: !3, line: 962, type: !1557)
!4874 = !DILocation(line: 962, column: 18, scope: !4856)
!4875 = !DILocalVariable(name: "prob1", scope: !4856, file: !3, line: 963, type: !2099)
!4876 = !DILocation(line: 963, column: 13, scope: !4856)
!4877 = !DILocalVariable(name: "prob2", scope: !4856, file: !3, line: 963, type: !2099)
!4878 = !DILocation(line: 963, column: 20, scope: !4856)
!4879 = !DILocalVariable(name: "i", scope: !4856, file: !3, line: 964, type: !7)
!4880 = !DILocation(line: 964, column: 16, scope: !4856)
!4881 = !DILocalVariable(name: "steps", scope: !4856, file: !3, line: 964, type: !7)
!4882 = !DILocation(line: 964, column: 19, scope: !4856)
!4883 = !DILocalVariable(name: "count1", scope: !4856, file: !3, line: 965, type: !2099)
!4884 = !DILocation(line: 965, column: 13, scope: !4856)
!4885 = !DILocalVariable(name: "count2", scope: !4856, file: !3, line: 965, type: !2099)
!4886 = !DILocation(line: 965, column: 21, scope: !4856)
!4887 = !DILocalVariable(name: "stmt", scope: !4856, file: !3, line: 966, type: !1887)
!4888 = !DILocation(line: 966, column: 10, scope: !4856)
!4889 = !DILocation(line: 968, column: 21, scope: !4856)
!4890 = !DILocation(line: 968, column: 10, scope: !4856)
!4891 = !DILocation(line: 968, column: 8, scope: !4856)
!4892 = !DILocation(line: 969, column: 20, scope: !4893)
!4893 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 969, column: 7)
!4894 = !DILocation(line: 969, column: 7, scope: !4893)
!4895 = !DILocation(line: 969, column: 26, scope: !4893)
!4896 = !DILocation(line: 969, column: 7, scope: !4856)
!4897 = !DILocation(line: 970, column: 5, scope: !4893)
!4898 = !DILocation(line: 972, column: 14, scope: !4856)
!4899 = !DILocation(line: 972, column: 12, scope: !4856)
!4900 = !DILocation(line: 973, column: 8, scope: !4901)
!4901 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 973, column: 7)
!4902 = !DILocation(line: 973, column: 7, scope: !4856)
!4903 = !DILocation(line: 974, column: 5, scope: !4901)
!4904 = !DILocation(line: 976, column: 34, scope: !4856)
!4905 = !DILocation(line: 976, column: 10, scope: !4856)
!4906 = !DILocation(line: 976, column: 8, scope: !4856)
!4907 = !DILocation(line: 978, column: 7, scope: !4908)
!4908 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 978, column: 7)
!4909 = !DILocation(line: 978, column: 12, scope: !4908)
!4910 = !DILocation(line: 978, column: 30, scope: !4908)
!4911 = !DILocation(line: 978, column: 34, scope: !4908)
!4912 = !DILocation(line: 978, column: 7, scope: !4856)
!4913 = !DILocation(line: 979, column: 5, scope: !4908)
!4914 = !DILocation(line: 981, column: 47, scope: !4856)
!4915 = !DILocation(line: 981, column: 53, scope: !4856)
!4916 = !DILocation(line: 981, column: 15, scope: !4856)
!4917 = !DILocation(line: 981, column: 13, scope: !4856)
!4918 = !DILocation(line: 982, column: 8, scope: !4919)
!4919 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 982, column: 7)
!4920 = !DILocation(line: 982, column: 7, scope: !4856)
!4921 = !DILocation(line: 983, column: 5, scope: !4919)
!4922 = !DILocation(line: 985, column: 7, scope: !4856)
!4923 = !DILocation(line: 986, column: 16, scope: !4856)
!4924 = !DILocation(line: 987, column: 10, scope: !4925)
!4925 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 987, column: 3)
!4926 = !DILocation(line: 987, column: 8, scope: !4925)
!4927 = !DILocation(line: 987, column: 15, scope: !4928)
!4928 = distinct !DILexicalBlock(scope: !4925, file: !3, line: 987, column: 3)
!4929 = !DILocation(line: 987, column: 19, scope: !4928)
!4930 = !DILocation(line: 987, column: 30, scope: !4928)
!4931 = !DILocation(line: 987, column: 36, scope: !4928)
!4932 = !DILocation(line: 987, column: 42, scope: !4928)
!4933 = !DILocation(line: 987, column: 17, scope: !4928)
!4934 = !DILocation(line: 987, column: 3, scope: !4925)
!4935 = !DILocation(line: 988, column: 12, scope: !4928)
!4936 = !DILocation(line: 988, column: 23, scope: !4928)
!4937 = !DILocation(line: 988, column: 30, scope: !4928)
!4938 = !DILocation(line: 988, column: 39, scope: !4928)
!4939 = !DILocation(line: 988, column: 9, scope: !4928)
!4940 = !DILocation(line: 988, column: 5, scope: !4928)
!4941 = !DILocation(line: 987, column: 50, scope: !4928)
!4942 = !DILocation(line: 987, column: 3, scope: !4928)
!4943 = distinct !{!4943, !4934, !4944}
!4944 = !DILocation(line: 988, column: 40, scope: !4925)
!4945 = !DILocation(line: 990, column: 19, scope: !4856)
!4946 = !DILocation(line: 990, column: 30, scope: !4856)
!4947 = !DILocation(line: 990, column: 37, scope: !4856)
!4948 = !DILocation(line: 990, column: 46, scope: !4856)
!4949 = !DILocation(line: 990, column: 16, scope: !4856)
!4950 = !DILocation(line: 991, column: 19, scope: !4856)
!4951 = !DILocation(line: 991, column: 30, scope: !4856)
!4952 = !DILocation(line: 991, column: 37, scope: !4856)
!4953 = !DILocation(line: 991, column: 46, scope: !4856)
!4954 = !DILocation(line: 991, column: 47, scope: !4856)
!4955 = !DILocation(line: 991, column: 16, scope: !4856)
!4956 = !DILocation(line: 992, column: 11, scope: !4856)
!4957 = !DILocation(line: 992, column: 22, scope: !4856)
!4958 = !DILocation(line: 992, column: 28, scope: !4856)
!4959 = !DILocation(line: 992, column: 34, scope: !4856)
!4960 = !DILocation(line: 992, column: 9, scope: !4856)
!4961 = !DILocation(line: 993, column: 10, scope: !4856)
!4962 = !DILocation(line: 993, column: 7, scope: !4856)
!4963 = !DILocation(line: 994, column: 12, scope: !4856)
!4964 = !DILocation(line: 994, column: 23, scope: !4856)
!4965 = !DILocation(line: 994, column: 30, scope: !4856)
!4966 = !DILocation(line: 994, column: 10, scope: !4856)
!4967 = !DILocation(line: 995, column: 12, scope: !4856)
!4968 = !DILocation(line: 995, column: 23, scope: !4856)
!4969 = !DILocation(line: 995, column: 30, scope: !4856)
!4970 = !DILocation(line: 995, column: 10, scope: !4856)
!4971 = !DILocation(line: 998, column: 22, scope: !4972)
!4972 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 998, column: 7)
!4973 = !DILocation(line: 998, column: 66, scope: !4972)
!4974 = !DILocation(line: 998, column: 55, scope: !4972)
!4975 = !DILocation(line: 998, column: 73, scope: !4972)
!4976 = !DILocation(line: 998, column: 7, scope: !4972)
!4977 = !DILocation(line: 998, column: 7, scope: !4856)
!4978 = !DILocation(line: 1000, column: 38, scope: !4979)
!4979 = distinct !DILexicalBlock(scope: !4972, file: !3, line: 999, column: 5)
!4980 = !DILocation(line: 1000, column: 44, scope: !4979)
!4981 = !DILocation(line: 1000, column: 50, scope: !4979)
!4982 = !DILocation(line: 1000, column: 7, scope: !4979)
!4983 = !DILocation(line: 1001, column: 7, scope: !4979)
!4984 = !DILocation(line: 1004, column: 7, scope: !4985)
!4985 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 1004, column: 7)
!4986 = !DILocation(line: 1004, column: 31, scope: !4985)
!4987 = !DILocation(line: 1004, column: 34, scope: !4985)
!4988 = !DILocation(line: 1004, column: 43, scope: !4985)
!4989 = !DILocation(line: 1004, column: 41, scope: !4985)
!4990 = !DILocation(line: 1004, column: 52, scope: !4985)
!4991 = !DILocation(line: 1004, column: 50, scope: !4985)
!4992 = !DILocation(line: 1004, column: 7, scope: !4856)
!4993 = !DILocation(line: 1005, column: 13, scope: !4985)
!4994 = !DILocation(line: 1005, column: 22, scope: !4985)
!4995 = !DILocation(line: 1005, column: 20, scope: !4985)
!4996 = !DILocation(line: 1005, column: 11, scope: !4985)
!4997 = !DILocation(line: 1005, column: 7, scope: !4985)
!4998 = !DILocation(line: 1007, column: 3, scope: !4856)
!4999 = !DILocation(line: 1011, column: 9, scope: !4856)
!5000 = !DILocation(line: 1012, column: 10, scope: !5001)
!5001 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 1012, column: 3)
!5002 = !DILocation(line: 1012, column: 8, scope: !5001)
!5003 = !DILocation(line: 1012, column: 15, scope: !5004)
!5004 = distinct !DILexicalBlock(scope: !5001, file: !3, line: 1012, column: 3)
!5005 = !DILocation(line: 1012, column: 19, scope: !5004)
!5006 = !DILocation(line: 1012, column: 30, scope: !5004)
!5007 = !DILocation(line: 1012, column: 36, scope: !5004)
!5008 = !DILocation(line: 1012, column: 42, scope: !5004)
!5009 = !DILocation(line: 1012, column: 17, scope: !5004)
!5010 = !DILocation(line: 1012, column: 3, scope: !5001)
!5011 = !DILocation(line: 1014, column: 16, scope: !5012)
!5012 = distinct !DILexicalBlock(scope: !5004, file: !3, line: 1013, column: 5)
!5013 = !DILocation(line: 1014, column: 27, scope: !5012)
!5014 = !DILocation(line: 1014, column: 34, scope: !5012)
!5015 = !DILocation(line: 1014, column: 43, scope: !5012)
!5016 = !DILocation(line: 1014, column: 13, scope: !5012)
!5017 = !DILocation(line: 1015, column: 11, scope: !5018)
!5018 = distinct !DILexicalBlock(scope: !5012, file: !3, line: 1015, column: 11)
!5019 = !DILocation(line: 1015, column: 17, scope: !5018)
!5020 = !DILocation(line: 1015, column: 24, scope: !5018)
!5021 = !DILocation(line: 1015, column: 21, scope: !5018)
!5022 = !DILocation(line: 1015, column: 11, scope: !5012)
!5023 = !DILocation(line: 1016, column: 2, scope: !5018)
!5024 = !DILocation(line: 1017, column: 5, scope: !5012)
!5025 = !DILocation(line: 1012, column: 50, scope: !5004)
!5026 = !DILocation(line: 1012, column: 3, scope: !5004)
!5027 = distinct !{!5027, !5010, !5028}
!5028 = !DILocation(line: 1017, column: 5, scope: !5001)
!5029 = !DILocation(line: 1018, column: 7, scope: !5030)
!5030 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 1018, column: 7)
!5031 = !DILocation(line: 1018, column: 12, scope: !5030)
!5032 = !DILocation(line: 1018, column: 9, scope: !5030)
!5033 = !DILocation(line: 1019, column: 7, scope: !5030)
!5034 = !DILocation(line: 1019, column: 45, scope: !5030)
!5035 = !DILocation(line: 1019, column: 34, scope: !5030)
!5036 = !DILocation(line: 1019, column: 10, scope: !5030)
!5037 = !DILocation(line: 1018, column: 7, scope: !4856)
!5038 = !DILocation(line: 1020, column: 5, scope: !5030)
!5039 = !DILocation(line: 1022, column: 34, scope: !4856)
!5040 = !DILocation(line: 1022, column: 40, scope: !4856)
!5041 = !DILocation(line: 1022, column: 46, scope: !4856)
!5042 = !DILocation(line: 1022, column: 3, scope: !4856)
!5043 = !DILocation(line: 1023, column: 7, scope: !5044)
!5044 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 1023, column: 7)
!5045 = !DILocation(line: 1023, column: 7, scope: !4856)
!5046 = !DILocation(line: 1025, column: 16, scope: !5047)
!5047 = distinct !DILexicalBlock(scope: !5044, file: !3, line: 1024, column: 5)
!5048 = !DILocation(line: 1025, column: 7, scope: !5047)
!5049 = !DILocation(line: 1026, column: 26, scope: !5047)
!5050 = !DILocation(line: 1026, column: 37, scope: !5047)
!5051 = !DILocation(line: 1026, column: 7, scope: !5047)
!5052 = !DILocation(line: 1027, column: 5, scope: !5047)
!5053 = !DILocation(line: 1030, column: 7, scope: !5054)
!5054 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 1030, column: 7)
!5055 = !DILocation(line: 1030, column: 11, scope: !5054)
!5056 = !DILocation(line: 1030, column: 7, scope: !4856)
!5057 = !DILocation(line: 1032, column: 16, scope: !5058)
!5058 = distinct !DILexicalBlock(scope: !5054, file: !3, line: 1031, column: 5)
!5059 = !DILocation(line: 1032, column: 23, scope: !5058)
!5060 = !DILocation(line: 1032, column: 44, scope: !5058)
!5061 = !DILocation(line: 1032, column: 48, scope: !5058)
!5062 = !DILocation(line: 1032, column: 42, scope: !5058)
!5063 = !DILocation(line: 1032, column: 55, scope: !5058)
!5064 = !DILocation(line: 1032, column: 53, scope: !5058)
!5065 = !DILocation(line: 1032, column: 13, scope: !5058)
!5066 = !DILocation(line: 1033, column: 16, scope: !5058)
!5067 = !DILocation(line: 1033, column: 23, scope: !5058)
!5068 = !DILocation(line: 1033, column: 44, scope: !5058)
!5069 = !DILocation(line: 1033, column: 48, scope: !5058)
!5070 = !DILocation(line: 1033, column: 42, scope: !5058)
!5071 = !DILocation(line: 1033, column: 55, scope: !5058)
!5072 = !DILocation(line: 1033, column: 53, scope: !5058)
!5073 = !DILocation(line: 1033, column: 13, scope: !5058)
!5074 = !DILocation(line: 1034, column: 5, scope: !5058)
!5075 = !DILocation(line: 1037, column: 21, scope: !5076)
!5076 = distinct !DILexicalBlock(scope: !5054, file: !3, line: 1036, column: 5)
!5077 = !DILocation(line: 1037, column: 13, scope: !5076)
!5078 = !DILocation(line: 1042, column: 33, scope: !4856)
!5079 = !DILocation(line: 1042, column: 39, scope: !4856)
!5080 = !DILocation(line: 1042, column: 46, scope: !4856)
!5081 = !DILocation(line: 1042, column: 53, scope: !4856)
!5082 = !DILocation(line: 1042, column: 56, scope: !4856)
!5083 = !DILocation(line: 1042, column: 64, scope: !4856)
!5084 = !DILocation(line: 1042, column: 72, scope: !4856)
!5085 = !DILocation(line: 1042, column: 12, scope: !4856)
!5086 = !DILocation(line: 1042, column: 10, scope: !4856)
!5087 = !DILocation(line: 1044, column: 36, scope: !4856)
!5088 = !DILocation(line: 1044, column: 40, scope: !4856)
!5089 = !DILocation(line: 1044, column: 3, scope: !4856)
!5090 = !DILocation(line: 1046, column: 3, scope: !4856)
!5091 = !DILocation(line: 1047, column: 1, scope: !4856)
!5092 = distinct !DISubprogram(name: "gimple_divmod_fixed_value_transform", scope: !3, file: !3, line: 635, type: !4857, scopeLine: 636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!5093 = !DILocalVariable(name: "si", arg: 1, scope: !5092, file: !3, line: 635, type: !3927)
!5094 = !DILocation(line: 635, column: 60, scope: !5092)
!5095 = !DILocalVariable(name: "histogram", scope: !5092, file: !3, line: 637, type: !1549)
!5096 = !DILocation(line: 637, column: 19, scope: !5092)
!5097 = !DILocalVariable(name: "code", scope: !5092, file: !3, line: 638, type: !134)
!5098 = !DILocation(line: 638, column: 18, scope: !5092)
!5099 = !DILocalVariable(name: "val", scope: !5092, file: !3, line: 639, type: !2099)
!5100 = !DILocation(line: 639, column: 13, scope: !5092)
!5101 = !DILocalVariable(name: "count", scope: !5092, file: !3, line: 639, type: !2099)
!5102 = !DILocation(line: 639, column: 18, scope: !5092)
!5103 = !DILocalVariable(name: "all", scope: !5092, file: !3, line: 639, type: !2099)
!5104 = !DILocation(line: 639, column: 25, scope: !5092)
!5105 = !DILocalVariable(name: "result", scope: !5092, file: !3, line: 640, type: !1557)
!5106 = !DILocation(line: 640, column: 8, scope: !5092)
!5107 = !DILocalVariable(name: "value", scope: !5092, file: !3, line: 640, type: !1557)
!5108 = !DILocation(line: 640, column: 16, scope: !5092)
!5109 = !DILocalVariable(name: "tree_val", scope: !5092, file: !3, line: 640, type: !1557)
!5110 = !DILocation(line: 640, column: 23, scope: !5092)
!5111 = !DILocalVariable(name: "prob", scope: !5092, file: !3, line: 641, type: !2099)
!5112 = !DILocation(line: 641, column: 13, scope: !5092)
!5113 = !DILocalVariable(name: "stmt", scope: !5092, file: !3, line: 642, type: !1887)
!5114 = !DILocation(line: 642, column: 10, scope: !5092)
!5115 = !DILocation(line: 644, column: 21, scope: !5092)
!5116 = !DILocation(line: 644, column: 10, scope: !5092)
!5117 = !DILocation(line: 644, column: 8, scope: !5092)
!5118 = !DILocation(line: 645, column: 20, scope: !5119)
!5119 = distinct !DILexicalBlock(scope: !5092, file: !3, line: 645, column: 7)
!5120 = !DILocation(line: 645, column: 7, scope: !5119)
!5121 = !DILocation(line: 645, column: 26, scope: !5119)
!5122 = !DILocation(line: 645, column: 7, scope: !5092)
!5123 = !DILocation(line: 646, column: 5, scope: !5119)
!5124 = !DILocation(line: 648, column: 8, scope: !5125)
!5125 = distinct !DILexicalBlock(scope: !5092, file: !3, line: 648, column: 7)
!5126 = !DILocation(line: 648, column: 7, scope: !5092)
!5127 = !DILocation(line: 649, column: 5, scope: !5125)
!5128 = !DILocation(line: 651, column: 34, scope: !5092)
!5129 = !DILocation(line: 651, column: 10, scope: !5092)
!5130 = !DILocation(line: 651, column: 8, scope: !5092)
!5131 = !DILocation(line: 653, column: 7, scope: !5132)
!5132 = distinct !DILexicalBlock(scope: !5092, file: !3, line: 653, column: 7)
!5133 = !DILocation(line: 653, column: 12, scope: !5132)
!5134 = !DILocation(line: 653, column: 30, scope: !5132)
!5135 = !DILocation(line: 653, column: 33, scope: !5132)
!5136 = !DILocation(line: 653, column: 38, scope: !5132)
!5137 = !DILocation(line: 653, column: 7, scope: !5092)
!5138 = !DILocation(line: 654, column: 5, scope: !5132)
!5139 = !DILocation(line: 656, column: 47, scope: !5092)
!5140 = !DILocation(line: 656, column: 53, scope: !5092)
!5141 = !DILocation(line: 656, column: 15, scope: !5092)
!5142 = !DILocation(line: 656, column: 13, scope: !5092)
!5143 = !DILocation(line: 658, column: 8, scope: !5144)
!5144 = distinct !DILexicalBlock(scope: !5092, file: !3, line: 658, column: 7)
!5145 = !DILocation(line: 658, column: 7, scope: !5092)
!5146 = !DILocation(line: 659, column: 5, scope: !5144)
!5147 = !DILocation(line: 661, column: 11, scope: !5092)
!5148 = !DILocation(line: 661, column: 22, scope: !5092)
!5149 = !DILocation(line: 661, column: 29, scope: !5092)
!5150 = !DILocation(line: 661, column: 9, scope: !5092)
!5151 = !DILocation(line: 662, column: 9, scope: !5092)
!5152 = !DILocation(line: 662, column: 20, scope: !5092)
!5153 = !DILocation(line: 662, column: 27, scope: !5092)
!5154 = !DILocation(line: 662, column: 7, scope: !5092)
!5155 = !DILocation(line: 663, column: 11, scope: !5092)
!5156 = !DILocation(line: 663, column: 22, scope: !5092)
!5157 = !DILocation(line: 663, column: 29, scope: !5092)
!5158 = !DILocation(line: 663, column: 9, scope: !5092)
!5159 = !DILocation(line: 664, column: 9, scope: !5092)
!5160 = !DILocation(line: 664, column: 20, scope: !5092)
!5161 = !DILocation(line: 664, column: 27, scope: !5092)
!5162 = !DILocation(line: 664, column: 7, scope: !5092)
!5163 = !DILocation(line: 665, column: 34, scope: !5092)
!5164 = !DILocation(line: 665, column: 40, scope: !5092)
!5165 = !DILocation(line: 665, column: 46, scope: !5092)
!5166 = !DILocation(line: 665, column: 3, scope: !5092)
!5167 = !DILocation(line: 670, column: 45, scope: !5168)
!5168 = distinct !DILexicalBlock(scope: !5092, file: !3, line: 670, column: 7)
!5169 = !DILocation(line: 670, column: 25, scope: !5168)
!5170 = !DILocation(line: 670, column: 52, scope: !5168)
!5171 = !DILocation(line: 670, column: 7, scope: !5168)
!5172 = !DILocation(line: 670, column: 59, scope: !5168)
!5173 = !DILocation(line: 671, column: 7, scope: !5168)
!5174 = !DILocation(line: 671, column: 14, scope: !5168)
!5175 = !DILocation(line: 671, column: 12, scope: !5168)
!5176 = !DILocation(line: 671, column: 22, scope: !5168)
!5177 = !DILocation(line: 671, column: 20, scope: !5168)
!5178 = !DILocation(line: 672, column: 7, scope: !5168)
!5179 = !DILocation(line: 672, column: 45, scope: !5168)
!5180 = !DILocation(line: 672, column: 34, scope: !5168)
!5181 = !DILocation(line: 672, column: 10, scope: !5168)
!5182 = !DILocation(line: 670, column: 7, scope: !5092)
!5183 = !DILocation(line: 673, column: 5, scope: !5168)
!5184 = !DILocation(line: 675, column: 22, scope: !5185)
!5185 = distinct !DILexicalBlock(scope: !5092, file: !3, line: 675, column: 7)
!5186 = !DILocation(line: 675, column: 62, scope: !5185)
!5187 = !DILocation(line: 675, column: 51, scope: !5185)
!5188 = !DILocation(line: 675, column: 69, scope: !5185)
!5189 = !DILocation(line: 675, column: 7, scope: !5185)
!5190 = !DILocation(line: 675, column: 7, scope: !5092)
!5191 = !DILocation(line: 676, column: 5, scope: !5185)
!5192 = !DILocation(line: 679, column: 7, scope: !5193)
!5193 = distinct !DILexicalBlock(scope: !5092, file: !3, line: 679, column: 7)
!5194 = !DILocation(line: 679, column: 11, scope: !5193)
!5195 = !DILocation(line: 679, column: 7, scope: !5092)
!5196 = !DILocation(line: 680, column: 13, scope: !5193)
!5197 = !DILocation(line: 680, column: 19, scope: !5193)
!5198 = !DILocation(line: 680, column: 40, scope: !5193)
!5199 = !DILocation(line: 680, column: 44, scope: !5193)
!5200 = !DILocation(line: 680, column: 38, scope: !5193)
!5201 = !DILocation(line: 680, column: 51, scope: !5193)
!5202 = !DILocation(line: 680, column: 49, scope: !5193)
!5203 = !DILocation(line: 680, column: 10, scope: !5193)
!5204 = !DILocation(line: 680, column: 5, scope: !5193)
!5205 = !DILocation(line: 682, column: 10, scope: !5193)
!5206 = !DILocation(line: 684, column: 34, scope: !5092)
!5207 = !DILocation(line: 685, column: 31, scope: !5092)
!5208 = !DILocation(line: 686, column: 6, scope: !5092)
!5209 = !DILocation(line: 686, column: 10, scope: !5092)
!5210 = !DILocation(line: 686, column: 42, scope: !5092)
!5211 = !DILocation(line: 684, column: 14, scope: !5092)
!5212 = !DILocation(line: 684, column: 12, scope: !5092)
!5213 = !DILocation(line: 687, column: 39, scope: !5092)
!5214 = !DILocation(line: 687, column: 45, scope: !5092)
!5215 = !DILocation(line: 687, column: 55, scope: !5092)
!5216 = !DILocation(line: 687, column: 61, scope: !5092)
!5217 = !DILocation(line: 687, column: 68, scope: !5092)
!5218 = !DILocation(line: 687, column: 12, scope: !5092)
!5219 = !DILocation(line: 687, column: 10, scope: !5092)
!5220 = !DILocation(line: 689, column: 7, scope: !5221)
!5221 = distinct !DILexicalBlock(scope: !5092, file: !3, line: 689, column: 7)
!5222 = !DILocation(line: 689, column: 7, scope: !5092)
!5223 = !DILocation(line: 691, column: 16, scope: !5224)
!5224 = distinct !DILexicalBlock(scope: !5221, file: !3, line: 690, column: 5)
!5225 = !DILocation(line: 691, column: 7, scope: !5224)
!5226 = !DILocation(line: 692, column: 27, scope: !5224)
!5227 = !DILocation(line: 692, column: 38, scope: !5224)
!5228 = !DILocation(line: 692, column: 7, scope: !5224)
!5229 = !DILocation(line: 693, column: 16, scope: !5224)
!5230 = !DILocation(line: 693, column: 7, scope: !5224)
!5231 = !DILocation(line: 694, column: 27, scope: !5224)
!5232 = !DILocation(line: 694, column: 38, scope: !5224)
!5233 = !DILocation(line: 694, column: 7, scope: !5224)
!5234 = !DILocation(line: 695, column: 16, scope: !5224)
!5235 = !DILocation(line: 695, column: 7, scope: !5224)
!5236 = !DILocation(line: 696, column: 26, scope: !5224)
!5237 = !DILocation(line: 696, column: 37, scope: !5224)
!5238 = !DILocation(line: 696, column: 7, scope: !5224)
!5239 = !DILocation(line: 697, column: 5, scope: !5224)
!5240 = !DILocation(line: 699, column: 36, scope: !5092)
!5241 = !DILocation(line: 699, column: 40, scope: !5092)
!5242 = !DILocation(line: 699, column: 3, scope: !5092)
!5243 = !DILocation(line: 701, column: 3, scope: !5092)
!5244 = !DILocation(line: 702, column: 1, scope: !5092)
!5245 = distinct !DISubprogram(name: "gimple_mod_pow2_value_transform", scope: !3, file: !3, line: 788, type: !4857, scopeLine: 789, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!5246 = !DILocalVariable(name: "si", arg: 1, scope: !5245, file: !3, line: 788, type: !3927)
!5247 = !DILocation(line: 788, column: 56, scope: !5245)
!5248 = !DILocalVariable(name: "histogram", scope: !5245, file: !3, line: 790, type: !1549)
!5249 = !DILocation(line: 790, column: 19, scope: !5245)
!5250 = !DILocalVariable(name: "code", scope: !5245, file: !3, line: 791, type: !134)
!5251 = !DILocation(line: 791, column: 18, scope: !5245)
!5252 = !DILocalVariable(name: "count", scope: !5245, file: !3, line: 792, type: !2099)
!5253 = !DILocation(line: 792, column: 13, scope: !5245)
!5254 = !DILocalVariable(name: "wrong_values", scope: !5245, file: !3, line: 792, type: !2099)
!5255 = !DILocation(line: 792, column: 20, scope: !5245)
!5256 = !DILocalVariable(name: "all", scope: !5245, file: !3, line: 792, type: !2099)
!5257 = !DILocation(line: 792, column: 34, scope: !5245)
!5258 = !DILocalVariable(name: "lhs_type", scope: !5245, file: !3, line: 793, type: !1557)
!5259 = !DILocation(line: 793, column: 8, scope: !5245)
!5260 = !DILocalVariable(name: "result", scope: !5245, file: !3, line: 793, type: !1557)
!5261 = !DILocation(line: 793, column: 18, scope: !5245)
!5262 = !DILocalVariable(name: "value", scope: !5245, file: !3, line: 793, type: !1557)
!5263 = !DILocation(line: 793, column: 26, scope: !5245)
!5264 = !DILocalVariable(name: "prob", scope: !5245, file: !3, line: 794, type: !2099)
!5265 = !DILocation(line: 794, column: 13, scope: !5245)
!5266 = !DILocalVariable(name: "stmt", scope: !5245, file: !3, line: 795, type: !1887)
!5267 = !DILocation(line: 795, column: 10, scope: !5245)
!5268 = !DILocation(line: 797, column: 21, scope: !5245)
!5269 = !DILocation(line: 797, column: 10, scope: !5245)
!5270 = !DILocation(line: 797, column: 8, scope: !5245)
!5271 = !DILocation(line: 798, column: 20, scope: !5272)
!5272 = distinct !DILexicalBlock(scope: !5245, file: !3, line: 798, column: 7)
!5273 = !DILocation(line: 798, column: 7, scope: !5272)
!5274 = !DILocation(line: 798, column: 26, scope: !5272)
!5275 = !DILocation(line: 798, column: 7, scope: !5245)
!5276 = !DILocation(line: 799, column: 5, scope: !5272)
!5277 = !DILocation(line: 801, column: 14, scope: !5245)
!5278 = !DILocation(line: 801, column: 12, scope: !5245)
!5279 = !DILocation(line: 802, column: 8, scope: !5280)
!5280 = distinct !DILexicalBlock(scope: !5245, file: !3, line: 802, column: 7)
!5281 = !DILocation(line: 802, column: 7, scope: !5245)
!5282 = !DILocation(line: 803, column: 5, scope: !5280)
!5283 = !DILocation(line: 805, column: 34, scope: !5245)
!5284 = !DILocation(line: 805, column: 10, scope: !5245)
!5285 = !DILocation(line: 805, column: 8, scope: !5245)
!5286 = !DILocation(line: 807, column: 7, scope: !5287)
!5287 = distinct !DILexicalBlock(scope: !5245, file: !3, line: 807, column: 7)
!5288 = !DILocation(line: 807, column: 12, scope: !5287)
!5289 = !DILocation(line: 807, column: 30, scope: !5287)
!5290 = !DILocation(line: 807, column: 34, scope: !5287)
!5291 = !DILocation(line: 807, column: 7, scope: !5245)
!5292 = !DILocation(line: 808, column: 5, scope: !5287)
!5293 = !DILocation(line: 810, column: 47, scope: !5245)
!5294 = !DILocation(line: 810, column: 53, scope: !5245)
!5295 = !DILocation(line: 810, column: 15, scope: !5245)
!5296 = !DILocation(line: 810, column: 13, scope: !5245)
!5297 = !DILocation(line: 811, column: 8, scope: !5298)
!5298 = distinct !DILexicalBlock(scope: !5245, file: !3, line: 811, column: 7)
!5299 = !DILocation(line: 811, column: 7, scope: !5245)
!5300 = !DILocation(line: 812, column: 5, scope: !5298)
!5301 = !DILocation(line: 814, column: 11, scope: !5245)
!5302 = !DILocation(line: 814, column: 22, scope: !5245)
!5303 = !DILocation(line: 814, column: 29, scope: !5245)
!5304 = !DILocation(line: 814, column: 9, scope: !5245)
!5305 = !DILocation(line: 815, column: 18, scope: !5245)
!5306 = !DILocation(line: 815, column: 29, scope: !5245)
!5307 = !DILocation(line: 815, column: 36, scope: !5245)
!5308 = !DILocation(line: 815, column: 16, scope: !5245)
!5309 = !DILocation(line: 816, column: 11, scope: !5245)
!5310 = !DILocation(line: 816, column: 22, scope: !5245)
!5311 = !DILocation(line: 816, column: 29, scope: !5245)
!5312 = !DILocation(line: 816, column: 9, scope: !5245)
!5313 = !DILocation(line: 818, column: 34, scope: !5245)
!5314 = !DILocation(line: 818, column: 40, scope: !5245)
!5315 = !DILocation(line: 818, column: 46, scope: !5245)
!5316 = !DILocation(line: 818, column: 3, scope: !5245)
!5317 = !DILocation(line: 821, column: 45, scope: !5318)
!5318 = distinct !DILexicalBlock(scope: !5245, file: !3, line: 821, column: 7)
!5319 = !DILocation(line: 821, column: 25, scope: !5318)
!5320 = !DILocation(line: 821, column: 52, scope: !5318)
!5321 = !DILocation(line: 821, column: 7, scope: !5318)
!5322 = !DILocation(line: 821, column: 59, scope: !5318)
!5323 = !DILocation(line: 822, column: 7, scope: !5318)
!5324 = !DILocation(line: 822, column: 10, scope: !5318)
!5325 = !DILocation(line: 822, column: 18, scope: !5318)
!5326 = !DILocation(line: 822, column: 16, scope: !5318)
!5327 = !DILocation(line: 823, column: 7, scope: !5318)
!5328 = !DILocation(line: 823, column: 45, scope: !5318)
!5329 = !DILocation(line: 823, column: 34, scope: !5318)
!5330 = !DILocation(line: 823, column: 10, scope: !5318)
!5331 = !DILocation(line: 821, column: 7, scope: !5245)
!5332 = !DILocation(line: 824, column: 5, scope: !5318)
!5333 = !DILocation(line: 826, column: 7, scope: !5334)
!5334 = distinct !DILexicalBlock(scope: !5245, file: !3, line: 826, column: 7)
!5335 = !DILocation(line: 826, column: 7, scope: !5245)
!5336 = !DILocation(line: 828, column: 16, scope: !5337)
!5337 = distinct !DILexicalBlock(scope: !5334, file: !3, line: 827, column: 5)
!5338 = !DILocation(line: 828, column: 7, scope: !5337)
!5339 = !DILocation(line: 829, column: 26, scope: !5337)
!5340 = !DILocation(line: 829, column: 37, scope: !5337)
!5341 = !DILocation(line: 829, column: 7, scope: !5337)
!5342 = !DILocation(line: 830, column: 5, scope: !5337)
!5343 = !DILocation(line: 833, column: 9, scope: !5245)
!5344 = !DILocation(line: 833, column: 17, scope: !5245)
!5345 = !DILocation(line: 833, column: 15, scope: !5245)
!5346 = !DILocation(line: 833, column: 7, scope: !5245)
!5347 = !DILocation(line: 835, column: 22, scope: !5348)
!5348 = distinct !DILexicalBlock(scope: !5245, file: !3, line: 835, column: 7)
!5349 = !DILocation(line: 835, column: 61, scope: !5348)
!5350 = !DILocation(line: 835, column: 50, scope: !5348)
!5351 = !DILocation(line: 835, column: 68, scope: !5348)
!5352 = !DILocation(line: 835, column: 7, scope: !5348)
!5353 = !DILocation(line: 835, column: 7, scope: !5245)
!5354 = !DILocation(line: 836, column: 5, scope: !5348)
!5355 = !DILocation(line: 838, column: 7, scope: !5356)
!5356 = distinct !DILexicalBlock(scope: !5245, file: !3, line: 838, column: 7)
!5357 = !DILocation(line: 838, column: 11, scope: !5356)
!5358 = !DILocation(line: 838, column: 7, scope: !5245)
!5359 = !DILocation(line: 839, column: 13, scope: !5356)
!5360 = !DILocation(line: 839, column: 19, scope: !5356)
!5361 = !DILocation(line: 839, column: 40, scope: !5356)
!5362 = !DILocation(line: 839, column: 44, scope: !5356)
!5363 = !DILocation(line: 839, column: 38, scope: !5356)
!5364 = !DILocation(line: 839, column: 51, scope: !5356)
!5365 = !DILocation(line: 839, column: 49, scope: !5356)
!5366 = !DILocation(line: 839, column: 10, scope: !5356)
!5367 = !DILocation(line: 839, column: 5, scope: !5356)
!5368 = !DILocation(line: 841, column: 10, scope: !5356)
!5369 = !DILocation(line: 843, column: 29, scope: !5245)
!5370 = !DILocation(line: 843, column: 35, scope: !5245)
!5371 = !DILocation(line: 843, column: 41, scope: !5245)
!5372 = !DILocation(line: 843, column: 48, scope: !5245)
!5373 = !DILocation(line: 843, column: 12, scope: !5245)
!5374 = !DILocation(line: 843, column: 10, scope: !5245)
!5375 = !DILocation(line: 845, column: 36, scope: !5245)
!5376 = !DILocation(line: 845, column: 40, scope: !5245)
!5377 = !DILocation(line: 845, column: 3, scope: !5245)
!5378 = !DILocation(line: 847, column: 3, scope: !5245)
!5379 = !DILocation(line: 848, column: 1, scope: !5245)
!5380 = distinct !DISubprogram(name: "gimple_stringops_transform", scope: !3, file: !3, line: 1364, type: !4857, scopeLine: 1365, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!5381 = !DILocalVariable(name: "gsi", arg: 1, scope: !5380, file: !3, line: 1364, type: !3927)
!5382 = !DILocation(line: 1364, column: 51, scope: !5380)
!5383 = !DILocalVariable(name: "stmt", scope: !5380, file: !3, line: 1366, type: !1887)
!5384 = !DILocation(line: 1366, column: 10, scope: !5380)
!5385 = !DILocation(line: 1366, column: 28, scope: !5380)
!5386 = !DILocation(line: 1366, column: 17, scope: !5380)
!5387 = !DILocalVariable(name: "fndecl", scope: !5380, file: !3, line: 1367, type: !1557)
!5388 = !DILocation(line: 1367, column: 8, scope: !5380)
!5389 = !DILocalVariable(name: "blck_size", scope: !5380, file: !3, line: 1368, type: !1557)
!5390 = !DILocation(line: 1368, column: 8, scope: !5380)
!5391 = !DILocalVariable(name: "fcode", scope: !5380, file: !3, line: 1369, type: !483)
!5392 = !DILocation(line: 1369, column: 26, scope: !5380)
!5393 = !DILocalVariable(name: "histogram", scope: !5380, file: !3, line: 1370, type: !1549)
!5394 = !DILocation(line: 1370, column: 19, scope: !5380)
!5395 = !DILocalVariable(name: "count", scope: !5380, file: !3, line: 1371, type: !2099)
!5396 = !DILocation(line: 1371, column: 13, scope: !5380)
!5397 = !DILocalVariable(name: "all", scope: !5380, file: !3, line: 1371, type: !2099)
!5398 = !DILocation(line: 1371, column: 20, scope: !5380)
!5399 = !DILocalVariable(name: "val", scope: !5380, file: !3, line: 1371, type: !2099)
!5400 = !DILocation(line: 1371, column: 25, scope: !5380)
!5401 = !DILocalVariable(name: "dest", scope: !5380, file: !3, line: 1372, type: !1557)
!5402 = !DILocation(line: 1372, column: 8, scope: !5380)
!5403 = !DILocalVariable(name: "src", scope: !5380, file: !3, line: 1372, type: !1557)
!5404 = !DILocation(line: 1372, column: 14, scope: !5380)
!5405 = !DILocalVariable(name: "dest_align", scope: !5380, file: !3, line: 1373, type: !7)
!5406 = !DILocation(line: 1373, column: 16, scope: !5380)
!5407 = !DILocalVariable(name: "src_align", scope: !5380, file: !3, line: 1373, type: !7)
!5408 = !DILocation(line: 1373, column: 28, scope: !5380)
!5409 = !DILocalVariable(name: "prob", scope: !5380, file: !3, line: 1374, type: !2099)
!5410 = !DILocation(line: 1374, column: 13, scope: !5380)
!5411 = !DILocalVariable(name: "tree_val", scope: !5380, file: !3, line: 1375, type: !1557)
!5412 = !DILocation(line: 1375, column: 8, scope: !5380)
!5413 = !DILocalVariable(name: "size_arg", scope: !5380, file: !3, line: 1376, type: !1653)
!5414 = !DILocation(line: 1376, column: 7, scope: !5380)
!5415 = !DILocation(line: 1378, column: 20, scope: !5416)
!5416 = distinct !DILexicalBlock(scope: !5380, file: !3, line: 1378, column: 7)
!5417 = !DILocation(line: 1378, column: 7, scope: !5416)
!5418 = !DILocation(line: 1378, column: 26, scope: !5416)
!5419 = !DILocation(line: 1378, column: 7, scope: !5380)
!5420 = !DILocation(line: 1379, column: 5, scope: !5416)
!5421 = !DILocation(line: 1380, column: 32, scope: !5380)
!5422 = !DILocation(line: 1380, column: 12, scope: !5380)
!5423 = !DILocation(line: 1380, column: 10, scope: !5380)
!5424 = !DILocation(line: 1381, column: 8, scope: !5425)
!5425 = distinct !DILexicalBlock(scope: !5380, file: !3, line: 1381, column: 7)
!5426 = !DILocation(line: 1381, column: 7, scope: !5380)
!5427 = !DILocation(line: 1382, column: 5, scope: !5425)
!5428 = !DILocation(line: 1383, column: 11, scope: !5380)
!5429 = !DILocation(line: 1383, column: 9, scope: !5380)
!5430 = !DILocation(line: 1384, column: 43, scope: !5431)
!5431 = distinct !DILexicalBlock(scope: !5380, file: !3, line: 1384, column: 7)
!5432 = !DILocation(line: 1384, column: 51, scope: !5431)
!5433 = !DILocation(line: 1384, column: 8, scope: !5431)
!5434 = !DILocation(line: 1384, column: 7, scope: !5380)
!5435 = !DILocation(line: 1385, column: 5, scope: !5431)
!5436 = !DILocation(line: 1387, column: 32, scope: !5380)
!5437 = !DILocation(line: 1387, column: 38, scope: !5380)
!5438 = !DILocation(line: 1387, column: 15, scope: !5380)
!5439 = !DILocation(line: 1387, column: 13, scope: !5380)
!5440 = !DILocation(line: 1388, column: 7, scope: !5441)
!5441 = distinct !DILexicalBlock(scope: !5380, file: !3, line: 1388, column: 7)
!5442 = !DILocation(line: 1388, column: 29, scope: !5441)
!5443 = !DILocation(line: 1388, column: 7, scope: !5380)
!5444 = !DILocation(line: 1389, column: 5, scope: !5441)
!5445 = !DILocation(line: 1391, column: 47, scope: !5380)
!5446 = !DILocation(line: 1391, column: 53, scope: !5380)
!5447 = !DILocation(line: 1391, column: 15, scope: !5380)
!5448 = !DILocation(line: 1391, column: 13, scope: !5380)
!5449 = !DILocation(line: 1392, column: 8, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5380, file: !3, line: 1392, column: 7)
!5451 = !DILocation(line: 1392, column: 7, scope: !5380)
!5452 = !DILocation(line: 1393, column: 5, scope: !5450)
!5453 = !DILocation(line: 1394, column: 9, scope: !5380)
!5454 = !DILocation(line: 1394, column: 20, scope: !5380)
!5455 = !DILocation(line: 1394, column: 27, scope: !5380)
!5456 = !DILocation(line: 1394, column: 7, scope: !5380)
!5457 = !DILocation(line: 1395, column: 11, scope: !5380)
!5458 = !DILocation(line: 1395, column: 22, scope: !5380)
!5459 = !DILocation(line: 1395, column: 29, scope: !5380)
!5460 = !DILocation(line: 1395, column: 9, scope: !5380)
!5461 = !DILocation(line: 1396, column: 9, scope: !5380)
!5462 = !DILocation(line: 1396, column: 20, scope: !5380)
!5463 = !DILocation(line: 1396, column: 27, scope: !5380)
!5464 = !DILocation(line: 1396, column: 7, scope: !5380)
!5465 = !DILocation(line: 1397, column: 34, scope: !5380)
!5466 = !DILocation(line: 1397, column: 40, scope: !5380)
!5467 = !DILocation(line: 1397, column: 46, scope: !5380)
!5468 = !DILocation(line: 1397, column: 3, scope: !5380)
!5469 = !DILocation(line: 1401, column: 12, scope: !5470)
!5470 = distinct !DILexicalBlock(scope: !5380, file: !3, line: 1401, column: 7)
!5471 = !DILocation(line: 1401, column: 10, scope: !5470)
!5472 = !DILocation(line: 1401, column: 18, scope: !5470)
!5473 = !DILocation(line: 1401, column: 25, scope: !5470)
!5474 = !DILocation(line: 1401, column: 23, scope: !5470)
!5475 = !DILocation(line: 1401, column: 29, scope: !5470)
!5476 = !DILocation(line: 1401, column: 67, scope: !5470)
!5477 = !DILocation(line: 1401, column: 56, scope: !5470)
!5478 = !DILocation(line: 1401, column: 32, scope: !5470)
!5479 = !DILocation(line: 1401, column: 7, scope: !5380)
!5480 = !DILocation(line: 1402, column: 5, scope: !5470)
!5481 = !DILocation(line: 1403, column: 22, scope: !5482)
!5482 = distinct !DILexicalBlock(scope: !5380, file: !3, line: 1403, column: 7)
!5483 = !DILocation(line: 1403, column: 62, scope: !5482)
!5484 = !DILocation(line: 1403, column: 51, scope: !5482)
!5485 = !DILocation(line: 1403, column: 69, scope: !5482)
!5486 = !DILocation(line: 1403, column: 7, scope: !5482)
!5487 = !DILocation(line: 1403, column: 7, scope: !5380)
!5488 = !DILocation(line: 1404, column: 5, scope: !5482)
!5489 = !DILocation(line: 1405, column: 7, scope: !5490)
!5490 = distinct !DILexicalBlock(scope: !5380, file: !3, line: 1405, column: 7)
!5491 = !DILocation(line: 1405, column: 11, scope: !5490)
!5492 = !DILocation(line: 1405, column: 7, scope: !5380)
!5493 = !DILocation(line: 1406, column: 13, scope: !5490)
!5494 = !DILocation(line: 1406, column: 19, scope: !5490)
!5495 = !DILocation(line: 1406, column: 40, scope: !5490)
!5496 = !DILocation(line: 1406, column: 44, scope: !5490)
!5497 = !DILocation(line: 1406, column: 38, scope: !5490)
!5498 = !DILocation(line: 1406, column: 51, scope: !5490)
!5499 = !DILocation(line: 1406, column: 49, scope: !5490)
!5500 = !DILocation(line: 1406, column: 10, scope: !5490)
!5501 = !DILocation(line: 1406, column: 5, scope: !5490)
!5502 = !DILocation(line: 1408, column: 10, scope: !5490)
!5503 = !DILocation(line: 1409, column: 27, scope: !5380)
!5504 = !DILocation(line: 1409, column: 10, scope: !5380)
!5505 = !DILocation(line: 1409, column: 8, scope: !5380)
!5506 = !DILocation(line: 1410, column: 39, scope: !5380)
!5507 = !DILocation(line: 1410, column: 45, scope: !5380)
!5508 = !DILocation(line: 1410, column: 16, scope: !5380)
!5509 = !DILocation(line: 1410, column: 14, scope: !5380)
!5510 = !DILocation(line: 1411, column: 11, scope: !5380)
!5511 = !DILocation(line: 1411, column: 3, scope: !5380)
!5512 = !DILocation(line: 1415, column: 30, scope: !5513)
!5513 = distinct !DILexicalBlock(scope: !5380, file: !3, line: 1412, column: 5)
!5514 = !DILocation(line: 1415, column: 13, scope: !5513)
!5515 = !DILocation(line: 1415, column: 11, scope: !5513)
!5516 = !DILocation(line: 1416, column: 42, scope: !5513)
!5517 = !DILocation(line: 1416, column: 47, scope: !5513)
!5518 = !DILocation(line: 1416, column: 19, scope: !5513)
!5519 = !DILocation(line: 1416, column: 17, scope: !5513)
!5520 = !DILocation(line: 1417, column: 32, scope: !5521)
!5521 = distinct !DILexicalBlock(scope: !5513, file: !3, line: 1417, column: 11)
!5522 = !DILocation(line: 1417, column: 37, scope: !5521)
!5523 = !DILocation(line: 1417, column: 12, scope: !5521)
!5524 = !DILocation(line: 1417, column: 11, scope: !5513)
!5525 = !DILocation(line: 1418, column: 2, scope: !5521)
!5526 = !DILocation(line: 1419, column: 7, scope: !5513)
!5527 = !DILocation(line: 1421, column: 33, scope: !5528)
!5528 = distinct !DILexicalBlock(scope: !5513, file: !3, line: 1421, column: 11)
!5529 = !DILocation(line: 1422, column: 22, scope: !5528)
!5530 = !DILocation(line: 1422, column: 5, scope: !5528)
!5531 = !DILocation(line: 1423, column: 5, scope: !5528)
!5532 = !DILocation(line: 1421, column: 12, scope: !5528)
!5533 = !DILocation(line: 1421, column: 11, scope: !5513)
!5534 = !DILocation(line: 1424, column: 2, scope: !5528)
!5535 = !DILocation(line: 1425, column: 7, scope: !5513)
!5536 = !DILocation(line: 1427, column: 33, scope: !5537)
!5537 = distinct !DILexicalBlock(scope: !5513, file: !3, line: 1427, column: 11)
!5538 = !DILocation(line: 1428, column: 5, scope: !5537)
!5539 = !DILocation(line: 1429, column: 5, scope: !5537)
!5540 = !DILocation(line: 1427, column: 12, scope: !5537)
!5541 = !DILocation(line: 1427, column: 11, scope: !5513)
!5542 = !DILocation(line: 1430, column: 2, scope: !5537)
!5543 = !DILocation(line: 1431, column: 7, scope: !5513)
!5544 = !DILocation(line: 1433, column: 7, scope: !5513)
!5545 = !DILocation(line: 1434, column: 5, scope: !5513)
!5546 = !DILocation(line: 1435, column: 34, scope: !5380)
!5547 = !DILocation(line: 1436, column: 31, scope: !5380)
!5548 = !DILocation(line: 1437, column: 6, scope: !5380)
!5549 = !DILocation(line: 1437, column: 10, scope: !5380)
!5550 = !DILocation(line: 1437, column: 42, scope: !5380)
!5551 = !DILocation(line: 1435, column: 14, scope: !5380)
!5552 = !DILocation(line: 1435, column: 12, scope: !5380)
!5553 = !DILocation(line: 1438, column: 7, scope: !5554)
!5554 = distinct !DILexicalBlock(scope: !5380, file: !3, line: 1438, column: 7)
!5555 = !DILocation(line: 1438, column: 7, scope: !5380)
!5556 = !DILocation(line: 1440, column: 16, scope: !5557)
!5557 = distinct !DILexicalBlock(scope: !5554, file: !3, line: 1439, column: 5)
!5558 = !DILocation(line: 1441, column: 14, scope: !5557)
!5559 = !DILocation(line: 1441, column: 9, scope: !5557)
!5560 = !DILocation(line: 1440, column: 7, scope: !5557)
!5561 = !DILocation(line: 1442, column: 26, scope: !5557)
!5562 = !DILocation(line: 1442, column: 37, scope: !5557)
!5563 = !DILocation(line: 1442, column: 7, scope: !5557)
!5564 = !DILocation(line: 1443, column: 5, scope: !5557)
!5565 = !DILocation(line: 1444, column: 32, scope: !5380)
!5566 = !DILocation(line: 1444, column: 38, scope: !5380)
!5567 = !DILocation(line: 1444, column: 48, scope: !5380)
!5568 = !DILocation(line: 1444, column: 54, scope: !5380)
!5569 = !DILocation(line: 1444, column: 61, scope: !5380)
!5570 = !DILocation(line: 1444, column: 3, scope: !5380)
!5571 = !DILocation(line: 1446, column: 3, scope: !5380)
!5572 = !DILocation(line: 1447, column: 1, scope: !5380)
!5573 = distinct !DISubprogram(name: "gimple_ic_transform", scope: !3, file: !3, line: 1179, type: !5574, scopeLine: 1180, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!5574 = !DISubroutineType(types: !5575)
!5575 = !{!1676, !1887}
!5576 = !DILocalVariable(name: "stmt", arg: 1, scope: !5573, file: !3, line: 1179, type: !1887)
!5577 = !DILocation(line: 1179, column: 29, scope: !5573)
!5578 = !DILocalVariable(name: "histogram", scope: !5573, file: !3, line: 1181, type: !1549)
!5579 = !DILocation(line: 1181, column: 19, scope: !5573)
!5580 = !DILocalVariable(name: "val", scope: !5573, file: !3, line: 1182, type: !2099)
!5581 = !DILocation(line: 1182, column: 13, scope: !5573)
!5582 = !DILocalVariable(name: "count", scope: !5573, file: !3, line: 1182, type: !2099)
!5583 = !DILocation(line: 1182, column: 18, scope: !5573)
!5584 = !DILocalVariable(name: "all", scope: !5573, file: !3, line: 1182, type: !2099)
!5585 = !DILocation(line: 1182, column: 25, scope: !5573)
!5586 = !DILocalVariable(name: "bb_all", scope: !5573, file: !3, line: 1182, type: !2099)
!5587 = !DILocation(line: 1182, column: 30, scope: !5573)
!5588 = !DILocalVariable(name: "prob", scope: !5573, file: !3, line: 1183, type: !2099)
!5589 = !DILocation(line: 1183, column: 13, scope: !5573)
!5590 = !DILocalVariable(name: "callee", scope: !5573, file: !3, line: 1184, type: !1557)
!5591 = !DILocation(line: 1184, column: 8, scope: !5573)
!5592 = !DILocalVariable(name: "modify", scope: !5573, file: !3, line: 1185, type: !1887)
!5593 = !DILocation(line: 1185, column: 10, scope: !5573)
!5594 = !DILocalVariable(name: "direct_call", scope: !5573, file: !3, line: 1186, type: !2925)
!5595 = !DILocation(line: 1186, column: 23, scope: !5573)
!5596 = !DILocation(line: 1188, column: 20, scope: !5597)
!5597 = distinct !DILexicalBlock(scope: !5573, file: !3, line: 1188, column: 7)
!5598 = !DILocation(line: 1188, column: 7, scope: !5597)
!5599 = !DILocation(line: 1188, column: 26, scope: !5597)
!5600 = !DILocation(line: 1188, column: 7, scope: !5573)
!5601 = !DILocation(line: 1189, column: 5, scope: !5597)
!5602 = !DILocation(line: 1191, column: 28, scope: !5573)
!5603 = !DILocation(line: 1191, column: 12, scope: !5573)
!5604 = !DILocation(line: 1191, column: 10, scope: !5573)
!5605 = !DILocation(line: 1193, column: 7, scope: !5606)
!5606 = distinct !DILexicalBlock(scope: !5573, file: !3, line: 1193, column: 7)
!5607 = !DILocation(line: 1193, column: 26, scope: !5606)
!5608 = !DILocation(line: 1193, column: 7, scope: !5573)
!5609 = !DILocation(line: 1194, column: 5, scope: !5606)
!5610 = !DILocation(line: 1196, column: 47, scope: !5573)
!5611 = !DILocation(line: 1196, column: 53, scope: !5573)
!5612 = !DILocation(line: 1196, column: 15, scope: !5573)
!5613 = !DILocation(line: 1196, column: 13, scope: !5573)
!5614 = !DILocation(line: 1197, column: 8, scope: !5615)
!5615 = distinct !DILexicalBlock(scope: !5573, file: !3, line: 1197, column: 7)
!5616 = !DILocation(line: 1197, column: 7, scope: !5573)
!5617 = !DILocation(line: 1198, column: 5, scope: !5615)
!5618 = !DILocation(line: 1200, column: 9, scope: !5573)
!5619 = !DILocation(line: 1200, column: 20, scope: !5573)
!5620 = !DILocation(line: 1200, column: 27, scope: !5573)
!5621 = !DILocation(line: 1200, column: 7, scope: !5573)
!5622 = !DILocation(line: 1201, column: 11, scope: !5573)
!5623 = !DILocation(line: 1201, column: 22, scope: !5573)
!5624 = !DILocation(line: 1201, column: 29, scope: !5573)
!5625 = !DILocation(line: 1201, column: 9, scope: !5573)
!5626 = !DILocation(line: 1202, column: 9, scope: !5573)
!5627 = !DILocation(line: 1202, column: 20, scope: !5573)
!5628 = !DILocation(line: 1202, column: 27, scope: !5573)
!5629 = !DILocation(line: 1202, column: 7, scope: !5573)
!5630 = !DILocation(line: 1203, column: 34, scope: !5573)
!5631 = !DILocation(line: 1203, column: 40, scope: !5573)
!5632 = !DILocation(line: 1203, column: 46, scope: !5573)
!5633 = !DILocation(line: 1203, column: 3, scope: !5573)
!5634 = !DILocation(line: 1205, column: 11, scope: !5635)
!5635 = distinct !DILexicalBlock(scope: !5573, file: !3, line: 1205, column: 7)
!5636 = !DILocation(line: 1205, column: 9, scope: !5635)
!5637 = !DILocation(line: 1205, column: 24, scope: !5635)
!5638 = !DILocation(line: 1205, column: 22, scope: !5635)
!5639 = !DILocation(line: 1205, column: 17, scope: !5635)
!5640 = !DILocation(line: 1205, column: 7, scope: !5573)
!5641 = !DILocation(line: 1206, column: 5, scope: !5635)
!5642 = !DILocation(line: 1208, column: 23, scope: !5573)
!5643 = !DILocation(line: 1208, column: 12, scope: !5573)
!5644 = !DILocation(line: 1208, column: 30, scope: !5573)
!5645 = !DILocation(line: 1208, column: 10, scope: !5573)
!5646 = !DILocation(line: 1212, column: 23, scope: !5647)
!5647 = distinct !DILexicalBlock(scope: !5573, file: !3, line: 1212, column: 8)
!5648 = !DILocation(line: 1212, column: 50, scope: !5647)
!5649 = !DILocation(line: 1212, column: 8, scope: !5647)
!5650 = !DILocation(line: 1213, column: 7, scope: !5647)
!5651 = !DILocation(line: 1213, column: 25, scope: !5647)
!5652 = !DILocation(line: 1213, column: 51, scope: !5647)
!5653 = !DILocation(line: 1213, column: 10, scope: !5647)
!5654 = !DILocation(line: 1212, column: 8, scope: !5573)
!5655 = !DILocation(line: 1214, column: 5, scope: !5647)
!5656 = !DILocation(line: 1216, column: 7, scope: !5657)
!5657 = distinct !DILexicalBlock(scope: !5573, file: !3, line: 1216, column: 7)
!5658 = !DILocation(line: 1216, column: 11, scope: !5657)
!5659 = !DILocation(line: 1216, column: 7, scope: !5573)
!5660 = !DILocation(line: 1217, column: 13, scope: !5657)
!5661 = !DILocation(line: 1217, column: 19, scope: !5657)
!5662 = !DILocation(line: 1217, column: 40, scope: !5657)
!5663 = !DILocation(line: 1217, column: 44, scope: !5657)
!5664 = !DILocation(line: 1217, column: 38, scope: !5657)
!5665 = !DILocation(line: 1217, column: 51, scope: !5657)
!5666 = !DILocation(line: 1217, column: 49, scope: !5657)
!5667 = !DILocation(line: 1217, column: 10, scope: !5657)
!5668 = !DILocation(line: 1217, column: 5, scope: !5657)
!5669 = !DILocation(line: 1219, column: 10, scope: !5657)
!5670 = !DILocation(line: 1220, column: 40, scope: !5573)
!5671 = !DILocation(line: 1220, column: 35, scope: !5573)
!5672 = !DILocation(line: 1220, column: 17, scope: !5573)
!5673 = !DILocation(line: 1220, column: 15, scope: !5573)
!5674 = !DILocation(line: 1222, column: 7, scope: !5675)
!5675 = distinct !DILexicalBlock(scope: !5573, file: !3, line: 1222, column: 7)
!5676 = !DILocation(line: 1222, column: 19, scope: !5675)
!5677 = !DILocation(line: 1222, column: 7, scope: !5573)
!5678 = !DILocation(line: 1223, column: 5, scope: !5675)
!5679 = !DILocation(line: 1225, column: 23, scope: !5573)
!5680 = !DILocation(line: 1225, column: 29, scope: !5573)
!5681 = !DILocation(line: 1225, column: 42, scope: !5573)
!5682 = !DILocation(line: 1225, column: 48, scope: !5573)
!5683 = !DILocation(line: 1225, column: 55, scope: !5573)
!5684 = !DILocation(line: 1225, column: 12, scope: !5573)
!5685 = !DILocation(line: 1225, column: 10, scope: !5573)
!5686 = !DILocation(line: 1227, column: 7, scope: !5687)
!5687 = distinct !DILexicalBlock(scope: !5573, file: !3, line: 1227, column: 7)
!5688 = !DILocation(line: 1227, column: 7, scope: !5573)
!5689 = !DILocation(line: 1229, column: 16, scope: !5690)
!5690 = distinct !DILexicalBlock(scope: !5687, file: !3, line: 1228, column: 5)
!5691 = !DILocation(line: 1229, column: 7, scope: !5690)
!5692 = !DILocation(line: 1230, column: 27, scope: !5690)
!5693 = !DILocation(line: 1230, column: 54, scope: !5690)
!5694 = !DILocation(line: 1230, column: 38, scope: !5690)
!5695 = !DILocation(line: 1230, column: 7, scope: !5690)
!5696 = !DILocation(line: 1231, column: 16, scope: !5690)
!5697 = !DILocation(line: 1231, column: 7, scope: !5690)
!5698 = !DILocation(line: 1232, column: 27, scope: !5690)
!5699 = !DILocation(line: 1232, column: 38, scope: !5690)
!5700 = !DILocation(line: 1232, column: 51, scope: !5690)
!5701 = !DILocation(line: 1232, column: 7, scope: !5690)
!5702 = !DILocation(line: 1233, column: 16, scope: !5690)
!5703 = !DILocation(line: 1233, column: 7, scope: !5690)
!5704 = !DILocation(line: 1234, column: 26, scope: !5690)
!5705 = !DILocation(line: 1234, column: 37, scope: !5690)
!5706 = !DILocation(line: 1234, column: 7, scope: !5690)
!5707 = !DILocation(line: 1235, column: 16, scope: !5690)
!5708 = !DILocation(line: 1235, column: 7, scope: !5690)
!5709 = !DILocation(line: 1236, column: 26, scope: !5690)
!5710 = !DILocation(line: 1236, column: 37, scope: !5690)
!5711 = !DILocation(line: 1236, column: 7, scope: !5690)
!5712 = !DILocation(line: 1237, column: 16, scope: !5690)
!5713 = !DILocation(line: 1238, column: 53, scope: !5690)
!5714 = !DILocation(line: 1238, column: 60, scope: !5690)
!5715 = !DILocation(line: 1237, column: 7, scope: !5690)
!5716 = !DILocation(line: 1239, column: 5, scope: !5690)
!5717 = !DILocation(line: 1241, column: 3, scope: !5573)
!5718 = !DILocation(line: 1242, column: 1, scope: !5573)
!5719 = distinct !DISubprogram(name: "gimple_bb", scope: !413, file: !413, line: 1112, type: !5720, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!5720 = !DISubroutineType(types: !5721)
!5721 = !{!1851, !2906}
!5722 = !DILocalVariable(name: "g", arg: 1, scope: !5719, file: !413, line: 1112, type: !2906)
!5723 = !DILocation(line: 1112, column: 25, scope: !5719)
!5724 = !DILocation(line: 1114, column: 10, scope: !5719)
!5725 = !DILocation(line: 1114, column: 13, scope: !5719)
!5726 = !DILocation(line: 1114, column: 20, scope: !5719)
!5727 = !DILocation(line: 1114, column: 3, scope: !5719)
!5728 = distinct !DISubprogram(name: "check_counter", scope: !3, file: !3, line: 456, type: !5729, scopeLine: 458, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!5729 = !DISubroutineType(types: !5730)
!5730 = !{!1676, !1887, !1760, !2891, !2891, !2099}
!5731 = !DILocalVariable(name: "stmt", arg: 1, scope: !5728, file: !3, line: 456, type: !1887)
!5732 = !DILocation(line: 456, column: 23, scope: !5728)
!5733 = !DILocalVariable(name: "name", arg: 2, scope: !5728, file: !3, line: 456, type: !1760)
!5734 = !DILocation(line: 456, column: 42, scope: !5728)
!5735 = !DILocalVariable(name: "count", arg: 3, scope: !5728, file: !3, line: 457, type: !2891)
!5736 = !DILocation(line: 457, column: 20, scope: !5728)
!5737 = !DILocalVariable(name: "all", arg: 4, scope: !5728, file: !3, line: 457, type: !2891)
!5738 = !DILocation(line: 457, column: 38, scope: !5728)
!5739 = !DILocalVariable(name: "bb_count", arg: 5, scope: !5728, file: !3, line: 457, type: !2099)
!5740 = !DILocation(line: 457, column: 53, scope: !5728)
!5741 = !DILocation(line: 459, column: 8, scope: !5742)
!5742 = distinct !DILexicalBlock(scope: !5728, file: !3, line: 459, column: 7)
!5743 = !DILocation(line: 459, column: 7, scope: !5742)
!5744 = !DILocation(line: 459, column: 15, scope: !5742)
!5745 = !DILocation(line: 459, column: 12, scope: !5742)
!5746 = !DILocation(line: 459, column: 24, scope: !5742)
!5747 = !DILocation(line: 459, column: 28, scope: !5742)
!5748 = !DILocation(line: 459, column: 27, scope: !5742)
!5749 = !DILocation(line: 459, column: 37, scope: !5742)
!5750 = !DILocation(line: 459, column: 36, scope: !5742)
!5751 = !DILocation(line: 459, column: 34, scope: !5742)
!5752 = !DILocation(line: 459, column: 7, scope: !5728)
!5753 = !DILocalVariable(name: "locus", scope: !5754, file: !3, line: 461, type: !1684)
!5754 = distinct !DILexicalBlock(scope: !5742, file: !3, line: 460, column: 5)
!5755 = !DILocation(line: 461, column: 18, scope: !5754)
!5756 = !DILocation(line: 462, column: 16, scope: !5754)
!5757 = !DILocation(line: 462, column: 21, scope: !5754)
!5758 = !DILocation(line: 462, column: 15, scope: !5754)
!5759 = !DILocation(line: 463, column: 34, scope: !5754)
!5760 = !DILocation(line: 463, column: 17, scope: !5754)
!5761 = !DILocation(line: 464, column: 17, scope: !5754)
!5762 = !DILocation(line: 462, column: 13, scope: !5754)
!5763 = !DILocation(line: 465, column: 11, scope: !5764)
!5764 = distinct !DILexicalBlock(scope: !5754, file: !3, line: 465, column: 11)
!5765 = !DILocation(line: 465, column: 11, scope: !5754)
!5766 = !DILocation(line: 467, column: 12, scope: !5767)
!5767 = distinct !DILexicalBlock(scope: !5764, file: !3, line: 466, column: 9)
!5768 = !DILocation(line: 469, column: 27, scope: !5767)
!5769 = !DILocation(line: 469, column: 39, scope: !5767)
!5770 = !DILocation(line: 469, column: 38, scope: !5767)
!5771 = !DILocation(line: 469, column: 33, scope: !5767)
!5772 = !DILocation(line: 469, column: 49, scope: !5767)
!5773 = !DILocation(line: 469, column: 44, scope: !5767)
!5774 = !DILocation(line: 467, column: 4, scope: !5767)
!5775 = !DILocation(line: 470, column: 11, scope: !5767)
!5776 = !DILocation(line: 470, column: 5, scope: !5767)
!5777 = !DILocation(line: 470, column: 9, scope: !5767)
!5778 = !DILocation(line: 471, column: 9, scope: !5779)
!5779 = distinct !DILexicalBlock(scope: !5767, file: !3, line: 471, column: 8)
!5780 = !DILocation(line: 471, column: 8, scope: !5779)
!5781 = !DILocation(line: 471, column: 18, scope: !5779)
!5782 = !DILocation(line: 471, column: 17, scope: !5779)
!5783 = !DILocation(line: 471, column: 15, scope: !5779)
!5784 = !DILocation(line: 471, column: 8, scope: !5767)
!5785 = !DILocation(line: 472, column: 23, scope: !5779)
!5786 = !DILocation(line: 472, column: 22, scope: !5779)
!5787 = !DILocation(line: 472, column: 14, scope: !5779)
!5788 = !DILocation(line: 472, column: 20, scope: !5779)
!5789 = !DILocation(line: 472, column: 13, scope: !5779)
!5790 = !DILocation(line: 473, column: 4, scope: !5767)
!5791 = !DILocation(line: 477, column: 14, scope: !5792)
!5792 = distinct !DILexicalBlock(scope: !5764, file: !3, line: 476, column: 2)
!5793 = !DILocation(line: 479, column: 7, scope: !5792)
!5794 = !DILocation(line: 479, column: 19, scope: !5792)
!5795 = !DILocation(line: 479, column: 18, scope: !5792)
!5796 = !DILocation(line: 479, column: 13, scope: !5792)
!5797 = !DILocation(line: 479, column: 29, scope: !5792)
!5798 = !DILocation(line: 479, column: 24, scope: !5792)
!5799 = !DILocation(line: 477, column: 4, scope: !5792)
!5800 = !DILocation(line: 480, column: 4, scope: !5792)
!5801 = !DILocation(line: 484, column: 3, scope: !5728)
!5802 = !DILocation(line: 485, column: 1, scope: !5728)
!5803 = distinct !DISubprogram(name: "gimple_mod_subtract", scope: !3, file: !3, line: 860, type: !5804, scopeLine: 862, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!5804 = !DISubroutineType(types: !5805)
!5805 = !{!1557, !1887, !1653, !1653, !1653, !2099, !2099, !2099}
!5806 = !DILocalVariable(name: "stmt", arg: 1, scope: !5803, file: !3, line: 860, type: !1887)
!5807 = !DILocation(line: 860, column: 29, scope: !5803)
!5808 = !DILocalVariable(name: "prob1", arg: 2, scope: !5803, file: !3, line: 860, type: !1653)
!5809 = !DILocation(line: 860, column: 39, scope: !5803)
!5810 = !DILocalVariable(name: "prob2", arg: 3, scope: !5803, file: !3, line: 860, type: !1653)
!5811 = !DILocation(line: 860, column: 50, scope: !5803)
!5812 = !DILocalVariable(name: "ncounts", arg: 4, scope: !5803, file: !3, line: 860, type: !1653)
!5813 = !DILocation(line: 860, column: 61, scope: !5803)
!5814 = !DILocalVariable(name: "count1", arg: 5, scope: !5803, file: !3, line: 861, type: !2099)
!5815 = !DILocation(line: 861, column: 18, scope: !5803)
!5816 = !DILocalVariable(name: "count2", arg: 6, scope: !5803, file: !3, line: 861, type: !2099)
!5817 = !DILocation(line: 861, column: 36, scope: !5803)
!5818 = !DILocalVariable(name: "all", arg: 7, scope: !5803, file: !3, line: 861, type: !2099)
!5819 = !DILocation(line: 861, column: 54, scope: !5803)
!5820 = !DILocalVariable(name: "stmt1", scope: !5803, file: !3, line: 863, type: !1887)
!5821 = !DILocation(line: 863, column: 10, scope: !5803)
!5822 = !DILocalVariable(name: "stmt2", scope: !5803, file: !3, line: 863, type: !1887)
!5823 = !DILocation(line: 863, column: 17, scope: !5803)
!5824 = !DILocalVariable(name: "stmt3", scope: !5803, file: !3, line: 863, type: !1887)
!5825 = !DILocation(line: 863, column: 24, scope: !5803)
!5826 = !DILocalVariable(name: "tmp1", scope: !5803, file: !3, line: 864, type: !1557)
!5827 = !DILocation(line: 864, column: 8, scope: !5803)
!5828 = !DILocalVariable(name: "bb1end", scope: !5803, file: !3, line: 865, type: !1887)
!5829 = !DILocation(line: 865, column: 10, scope: !5803)
!5830 = !DILocalVariable(name: "bb2end", scope: !5803, file: !3, line: 865, type: !1887)
!5831 = !DILocation(line: 865, column: 18, scope: !5803)
!5832 = !DILocalVariable(name: "bb3end", scope: !5803, file: !3, line: 865, type: !1887)
!5833 = !DILocation(line: 865, column: 33, scope: !5803)
!5834 = !DILocalVariable(name: "bb", scope: !5803, file: !3, line: 866, type: !2321)
!5835 = !DILocation(line: 866, column: 15, scope: !5803)
!5836 = !DILocalVariable(name: "bb2", scope: !5803, file: !3, line: 866, type: !2321)
!5837 = !DILocation(line: 866, column: 19, scope: !5803)
!5838 = !DILocalVariable(name: "bb3", scope: !5803, file: !3, line: 866, type: !2321)
!5839 = !DILocation(line: 866, column: 24, scope: !5803)
!5840 = !DILocalVariable(name: "bb4", scope: !5803, file: !3, line: 866, type: !2321)
!5841 = !DILocation(line: 866, column: 29, scope: !5803)
!5842 = !DILocalVariable(name: "optype", scope: !5803, file: !3, line: 867, type: !1557)
!5843 = !DILocation(line: 867, column: 8, scope: !5803)
!5844 = !DILocalVariable(name: "op1", scope: !5803, file: !3, line: 867, type: !1557)
!5845 = !DILocation(line: 867, column: 16, scope: !5803)
!5846 = !DILocalVariable(name: "op2", scope: !5803, file: !3, line: 867, type: !1557)
!5847 = !DILocation(line: 867, column: 21, scope: !5803)
!5848 = !DILocalVariable(name: "e12", scope: !5803, file: !3, line: 868, type: !1867)
!5849 = !DILocation(line: 868, column: 8, scope: !5803)
!5850 = !DILocalVariable(name: "e23", scope: !5803, file: !3, line: 868, type: !1867)
!5851 = !DILocation(line: 868, column: 13, scope: !5803)
!5852 = !DILocalVariable(name: "e24", scope: !5803, file: !3, line: 868, type: !1867)
!5853 = !DILocation(line: 868, column: 22, scope: !5803)
!5854 = !DILocalVariable(name: "e34", scope: !5803, file: !3, line: 868, type: !1867)
!5855 = !DILocation(line: 868, column: 27, scope: !5803)
!5856 = !DILocalVariable(name: "e14", scope: !5803, file: !3, line: 868, type: !1867)
!5857 = !DILocation(line: 868, column: 32, scope: !5803)
!5858 = !DILocalVariable(name: "gsi", scope: !5803, file: !3, line: 869, type: !3797)
!5859 = !DILocation(line: 869, column: 24, scope: !5803)
!5860 = !DILocalVariable(name: "result", scope: !5803, file: !3, line: 870, type: !1557)
!5861 = !DILocation(line: 870, column: 8, scope: !5803)
!5862 = !DILocation(line: 872, column: 3, scope: !5803)
!5863 = !DILocation(line: 875, column: 12, scope: !5803)
!5864 = !DILocation(line: 875, column: 10, scope: !5803)
!5865 = !DILocation(line: 876, column: 29, scope: !5803)
!5866 = !DILocation(line: 876, column: 9, scope: !5803)
!5867 = !DILocation(line: 876, column: 7, scope: !5803)
!5868 = !DILocation(line: 877, column: 29, scope: !5803)
!5869 = !DILocation(line: 877, column: 9, scope: !5803)
!5870 = !DILocation(line: 877, column: 7, scope: !5803)
!5871 = !DILocation(line: 879, column: 19, scope: !5803)
!5872 = !DILocation(line: 879, column: 8, scope: !5803)
!5873 = !DILocation(line: 879, column: 6, scope: !5803)
!5874 = !DILocation(line: 880, column: 23, scope: !5803)
!5875 = !DILocation(line: 880, column: 9, scope: !5803)
!5876 = !DILocation(line: 882, column: 28, scope: !5803)
!5877 = !DILocation(line: 882, column: 12, scope: !5803)
!5878 = !DILocation(line: 882, column: 10, scope: !5803)
!5879 = !DILocation(line: 883, column: 26, scope: !5803)
!5880 = !DILocation(line: 883, column: 10, scope: !5803)
!5881 = !DILocation(line: 883, column: 8, scope: !5803)
!5882 = !DILocation(line: 884, column: 11, scope: !5803)
!5883 = !DILocation(line: 884, column: 9, scope: !5803)
!5884 = !DILocation(line: 885, column: 11, scope: !5803)
!5885 = !DILocation(line: 885, column: 9, scope: !5803)
!5886 = !DILocation(line: 886, column: 39, scope: !5803)
!5887 = !DILocation(line: 886, column: 47, scope: !5803)
!5888 = !DILocation(line: 886, column: 11, scope: !5803)
!5889 = !DILocation(line: 886, column: 9, scope: !5803)
!5890 = !DILocation(line: 887, column: 28, scope: !5803)
!5891 = !DILocation(line: 887, column: 3, scope: !5803)
!5892 = !DILocation(line: 888, column: 28, scope: !5803)
!5893 = !DILocation(line: 888, column: 3, scope: !5803)
!5894 = !DILocation(line: 889, column: 28, scope: !5803)
!5895 = !DILocation(line: 889, column: 3, scope: !5803)
!5896 = !DILocation(line: 890, column: 12, scope: !5803)
!5897 = !DILocation(line: 890, column: 10, scope: !5803)
!5898 = !DILocation(line: 892, column: 7, scope: !5899)
!5899 = distinct !DILexicalBlock(scope: !5803, file: !3, line: 892, column: 7)
!5900 = !DILocation(line: 892, column: 7, scope: !5803)
!5901 = !DILocation(line: 894, column: 15, scope: !5902)
!5902 = distinct !DILexicalBlock(scope: !5899, file: !3, line: 893, column: 5)
!5903 = !DILocation(line: 894, column: 13, scope: !5902)
!5904 = !DILocation(line: 895, column: 43, scope: !5902)
!5905 = !DILocation(line: 895, column: 51, scope: !5902)
!5906 = !DILocation(line: 895, column: 15, scope: !5902)
!5907 = !DILocation(line: 895, column: 13, scope: !5902)
!5908 = !DILocation(line: 896, column: 32, scope: !5902)
!5909 = !DILocation(line: 896, column: 7, scope: !5902)
!5910 = !DILocation(line: 897, column: 32, scope: !5902)
!5911 = !DILocation(line: 897, column: 7, scope: !5902)
!5912 = !DILocation(line: 898, column: 16, scope: !5902)
!5913 = !DILocation(line: 898, column: 14, scope: !5902)
!5914 = !DILocation(line: 899, column: 5, scope: !5902)
!5915 = !DILocation(line: 902, column: 11, scope: !5803)
!5916 = !DILocation(line: 902, column: 9, scope: !5803)
!5917 = !DILocation(line: 904, column: 28, scope: !5803)
!5918 = !DILocation(line: 904, column: 3, scope: !5803)
!5919 = !DILocation(line: 905, column: 12, scope: !5803)
!5920 = !DILocation(line: 905, column: 10, scope: !5803)
!5921 = !DILocation(line: 911, column: 22, scope: !5803)
!5922 = !DILocation(line: 911, column: 26, scope: !5803)
!5923 = !DILocation(line: 911, column: 9, scope: !5803)
!5924 = !DILocation(line: 911, column: 7, scope: !5803)
!5925 = !DILocation(line: 912, column: 9, scope: !5803)
!5926 = !DILocation(line: 912, column: 14, scope: !5803)
!5927 = !DILocation(line: 912, column: 7, scope: !5803)
!5928 = !DILocation(line: 913, column: 16, scope: !5803)
!5929 = !DILocation(line: 913, column: 22, scope: !5803)
!5930 = !DILocation(line: 913, column: 20, scope: !5803)
!5931 = !DILocation(line: 913, column: 3, scope: !5803)
!5932 = !DILocation(line: 913, column: 8, scope: !5803)
!5933 = !DILocation(line: 913, column: 14, scope: !5803)
!5934 = !DILocation(line: 915, column: 7, scope: !5935)
!5935 = distinct !DILexicalBlock(scope: !5803, file: !3, line: 915, column: 7)
!5936 = !DILocation(line: 915, column: 7, scope: !5803)
!5937 = !DILocation(line: 917, column: 26, scope: !5938)
!5938 = distinct !DILexicalBlock(scope: !5935, file: !3, line: 916, column: 5)
!5939 = !DILocation(line: 917, column: 31, scope: !5938)
!5940 = !DILocation(line: 917, column: 13, scope: !5938)
!5941 = !DILocation(line: 917, column: 11, scope: !5938)
!5942 = !DILocation(line: 918, column: 13, scope: !5938)
!5943 = !DILocation(line: 918, column: 18, scope: !5938)
!5944 = !DILocation(line: 918, column: 11, scope: !5938)
!5945 = !DILocation(line: 919, column: 20, scope: !5938)
!5946 = !DILocation(line: 919, column: 26, scope: !5938)
!5947 = !DILocation(line: 919, column: 24, scope: !5938)
!5948 = !DILocation(line: 919, column: 35, scope: !5938)
!5949 = !DILocation(line: 919, column: 33, scope: !5938)
!5950 = !DILocation(line: 919, column: 7, scope: !5938)
!5951 = !DILocation(line: 919, column: 12, scope: !5938)
!5952 = !DILocation(line: 919, column: 18, scope: !5938)
!5953 = !DILocation(line: 920, column: 5, scope: !5938)
!5954 = !DILocation(line: 922, column: 22, scope: !5803)
!5955 = !DILocation(line: 922, column: 32, scope: !5803)
!5956 = !DILocation(line: 922, column: 38, scope: !5803)
!5957 = !DILocation(line: 922, column: 43, scope: !5803)
!5958 = !DILocation(line: 922, column: 9, scope: !5803)
!5959 = !DILocation(line: 922, column: 7, scope: !5803)
!5960 = !DILocation(line: 923, column: 9, scope: !5803)
!5961 = !DILocation(line: 923, column: 14, scope: !5803)
!5962 = !DILocation(line: 923, column: 7, scope: !5803)
!5963 = !DILocation(line: 924, column: 16, scope: !5803)
!5964 = !DILocation(line: 924, column: 3, scope: !5803)
!5965 = !DILocation(line: 924, column: 8, scope: !5803)
!5966 = !DILocation(line: 924, column: 14, scope: !5803)
!5967 = !DILocation(line: 926, column: 3, scope: !5803)
!5968 = !DILocation(line: 926, column: 8, scope: !5803)
!5969 = !DILocation(line: 926, column: 14, scope: !5803)
!5970 = !DILocation(line: 927, column: 3, scope: !5803)
!5971 = !DILocation(line: 927, column: 8, scope: !5803)
!5972 = !DILocation(line: 927, column: 14, scope: !5803)
!5973 = !DILocation(line: 928, column: 41, scope: !5803)
!5974 = !DILocation(line: 928, column: 39, scope: !5803)
!5975 = !DILocation(line: 928, column: 3, scope: !5803)
!5976 = !DILocation(line: 928, column: 8, scope: !5803)
!5977 = !DILocation(line: 928, column: 20, scope: !5803)
!5978 = !DILocation(line: 929, column: 16, scope: !5803)
!5979 = !DILocation(line: 929, column: 22, scope: !5803)
!5980 = !DILocation(line: 929, column: 20, scope: !5803)
!5981 = !DILocation(line: 929, column: 3, scope: !5803)
!5982 = !DILocation(line: 929, column: 8, scope: !5803)
!5983 = !DILocation(line: 929, column: 14, scope: !5803)
!5984 = !DILocation(line: 931, column: 20, scope: !5803)
!5985 = !DILocation(line: 931, column: 24, scope: !5803)
!5986 = !DILocation(line: 931, column: 9, scope: !5803)
!5987 = !DILocation(line: 931, column: 7, scope: !5803)
!5988 = !DILocation(line: 932, column: 22, scope: !5803)
!5989 = !DILocation(line: 932, column: 3, scope: !5803)
!5990 = !DILocation(line: 932, column: 8, scope: !5803)
!5991 = !DILocation(line: 932, column: 20, scope: !5803)
!5992 = !DILocation(line: 933, column: 16, scope: !5803)
!5993 = !DILocation(line: 933, column: 3, scope: !5803)
!5994 = !DILocation(line: 933, column: 8, scope: !5803)
!5995 = !DILocation(line: 933, column: 14, scope: !5803)
!5996 = !DILocation(line: 935, column: 7, scope: !5997)
!5997 = distinct !DILexicalBlock(scope: !5803, file: !3, line: 935, column: 7)
!5998 = !DILocation(line: 935, column: 7, scope: !5803)
!5999 = !DILocation(line: 937, column: 7, scope: !6000)
!6000 = distinct !DILexicalBlock(scope: !5997, file: !3, line: 936, column: 5)
!6001 = !DILocation(line: 937, column: 12, scope: !6000)
!6002 = !DILocation(line: 937, column: 18, scope: !6000)
!6003 = !DILocation(line: 938, column: 7, scope: !6000)
!6004 = !DILocation(line: 938, column: 12, scope: !6000)
!6005 = !DILocation(line: 938, column: 18, scope: !6000)
!6006 = !DILocation(line: 939, column: 20, scope: !6000)
!6007 = !DILocation(line: 939, column: 26, scope: !6000)
!6008 = !DILocation(line: 939, column: 24, scope: !6000)
!6009 = !DILocation(line: 939, column: 35, scope: !6000)
!6010 = !DILocation(line: 939, column: 33, scope: !6000)
!6011 = !DILocation(line: 939, column: 7, scope: !6000)
!6012 = !DILocation(line: 939, column: 12, scope: !6000)
!6013 = !DILocation(line: 939, column: 18, scope: !6000)
!6014 = !DILocation(line: 940, column: 45, scope: !6000)
!6015 = !DILocation(line: 940, column: 43, scope: !6000)
!6016 = !DILocation(line: 940, column: 7, scope: !6000)
!6017 = !DILocation(line: 940, column: 12, scope: !6000)
!6018 = !DILocation(line: 940, column: 24, scope: !6000)
!6019 = !DILocation(line: 942, column: 24, scope: !6000)
!6020 = !DILocation(line: 942, column: 29, scope: !6000)
!6021 = !DILocation(line: 942, column: 13, scope: !6000)
!6022 = !DILocation(line: 942, column: 11, scope: !6000)
!6023 = !DILocation(line: 943, column: 26, scope: !6000)
!6024 = !DILocation(line: 943, column: 7, scope: !6000)
!6025 = !DILocation(line: 943, column: 12, scope: !6000)
!6026 = !DILocation(line: 943, column: 24, scope: !6000)
!6027 = !DILocation(line: 944, column: 20, scope: !6000)
!6028 = !DILocation(line: 944, column: 7, scope: !6000)
!6029 = !DILocation(line: 944, column: 12, scope: !6000)
!6030 = !DILocation(line: 944, column: 18, scope: !6000)
!6031 = !DILocation(line: 945, column: 5, scope: !6000)
!6032 = !DILocation(line: 947, column: 3, scope: !5803)
!6033 = !DILocation(line: 947, column: 8, scope: !5803)
!6034 = !DILocation(line: 947, column: 20, scope: !5803)
!6035 = !DILocation(line: 948, column: 16, scope: !5803)
!6036 = !DILocation(line: 948, column: 22, scope: !5803)
!6037 = !DILocation(line: 948, column: 20, scope: !5803)
!6038 = !DILocation(line: 948, column: 31, scope: !5803)
!6039 = !DILocation(line: 948, column: 29, scope: !5803)
!6040 = !DILocation(line: 948, column: 3, scope: !5803)
!6041 = !DILocation(line: 948, column: 8, scope: !5803)
!6042 = !DILocation(line: 948, column: 14, scope: !5803)
!6043 = !DILocation(line: 950, column: 10, scope: !5803)
!6044 = !DILocation(line: 950, column: 3, scope: !5803)
!6045 = distinct !DISubprogram(name: "gimple_location", scope: !413, file: !413, line: 1139, type: !6046, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!6046 = !DISubroutineType(types: !6047)
!6047 = !{!1684, !2906}
!6048 = !DILocalVariable(name: "g", arg: 1, scope: !6045, file: !413, line: 1139, type: !2906)
!6049 = !DILocation(line: 1139, column: 31, scope: !6045)
!6050 = !DILocation(line: 1141, column: 10, scope: !6045)
!6051 = !DILocation(line: 1141, column: 13, scope: !6045)
!6052 = !DILocation(line: 1141, column: 20, scope: !6045)
!6053 = !DILocation(line: 1141, column: 3, scope: !6045)
!6054 = distinct !DISubprogram(name: "is_gimple_assign", scope: !413, file: !413, line: 1677, type: !4672, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!6055 = !DILocalVariable(name: "gs", arg: 1, scope: !6054, file: !413, line: 1677, type: !2906)
!6056 = !DILocation(line: 1677, column: 32, scope: !6054)
!6057 = !DILocation(line: 1679, column: 23, scope: !6054)
!6058 = !DILocation(line: 1679, column: 10, scope: !6054)
!6059 = !DILocation(line: 1679, column: 27, scope: !6054)
!6060 = !DILocation(line: 1679, column: 3, scope: !6054)
!6061 = distinct !DISubprogram(name: "gimple_divmod_fixed_value", scope: !3, file: !3, line: 555, type: !6062, scopeLine: 557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!6062 = !DISubroutineType(types: !6063)
!6063 = !{!1557, !1887, !1557, !1653, !2099, !2099}
!6064 = !DILocalVariable(name: "stmt", arg: 1, scope: !6061, file: !3, line: 555, type: !1887)
!6065 = !DILocation(line: 555, column: 35, scope: !6061)
!6066 = !DILocalVariable(name: "value", arg: 2, scope: !6061, file: !3, line: 555, type: !1557)
!6067 = !DILocation(line: 555, column: 46, scope: !6061)
!6068 = !DILocalVariable(name: "prob", arg: 3, scope: !6061, file: !3, line: 555, type: !1653)
!6069 = !DILocation(line: 555, column: 57, scope: !6061)
!6070 = !DILocalVariable(name: "count", arg: 4, scope: !6061, file: !3, line: 555, type: !2099)
!6071 = !DILocation(line: 555, column: 73, scope: !6061)
!6072 = !DILocalVariable(name: "all", arg: 5, scope: !6061, file: !3, line: 556, type: !2099)
!6073 = !DILocation(line: 556, column: 17, scope: !6061)
!6074 = !DILocalVariable(name: "stmt1", scope: !6061, file: !3, line: 558, type: !1887)
!6075 = !DILocation(line: 558, column: 10, scope: !6061)
!6076 = !DILocalVariable(name: "stmt2", scope: !6061, file: !3, line: 558, type: !1887)
!6077 = !DILocation(line: 558, column: 17, scope: !6061)
!6078 = !DILocalVariable(name: "stmt3", scope: !6061, file: !3, line: 558, type: !1887)
!6079 = !DILocation(line: 558, column: 24, scope: !6061)
!6080 = !DILocalVariable(name: "tmp1", scope: !6061, file: !3, line: 559, type: !1557)
!6081 = !DILocation(line: 559, column: 8, scope: !6061)
!6082 = !DILocalVariable(name: "tmp2", scope: !6061, file: !3, line: 559, type: !1557)
!6083 = !DILocation(line: 559, column: 14, scope: !6061)
!6084 = !DILocalVariable(name: "tmpv", scope: !6061, file: !3, line: 559, type: !1557)
!6085 = !DILocation(line: 559, column: 20, scope: !6061)
!6086 = !DILocalVariable(name: "bb1end", scope: !6061, file: !3, line: 560, type: !1887)
!6087 = !DILocation(line: 560, column: 10, scope: !6061)
!6088 = !DILocalVariable(name: "bb2end", scope: !6061, file: !3, line: 560, type: !1887)
!6089 = !DILocation(line: 560, column: 18, scope: !6061)
!6090 = !DILocalVariable(name: "bb3end", scope: !6061, file: !3, line: 560, type: !1887)
!6091 = !DILocation(line: 560, column: 26, scope: !6061)
!6092 = !DILocalVariable(name: "bb", scope: !6061, file: !3, line: 561, type: !2321)
!6093 = !DILocation(line: 561, column: 15, scope: !6061)
!6094 = !DILocalVariable(name: "bb2", scope: !6061, file: !3, line: 561, type: !2321)
!6095 = !DILocation(line: 561, column: 19, scope: !6061)
!6096 = !DILocalVariable(name: "bb3", scope: !6061, file: !3, line: 561, type: !2321)
!6097 = !DILocation(line: 561, column: 24, scope: !6061)
!6098 = !DILocalVariable(name: "bb4", scope: !6061, file: !3, line: 561, type: !2321)
!6099 = !DILocation(line: 561, column: 29, scope: !6061)
!6100 = !DILocalVariable(name: "optype", scope: !6061, file: !3, line: 562, type: !1557)
!6101 = !DILocation(line: 562, column: 8, scope: !6061)
!6102 = !DILocalVariable(name: "op1", scope: !6061, file: !3, line: 562, type: !1557)
!6103 = !DILocation(line: 562, column: 16, scope: !6061)
!6104 = !DILocalVariable(name: "op2", scope: !6061, file: !3, line: 562, type: !1557)
!6105 = !DILocation(line: 562, column: 21, scope: !6061)
!6106 = !DILocalVariable(name: "e12", scope: !6061, file: !3, line: 563, type: !1867)
!6107 = !DILocation(line: 563, column: 8, scope: !6061)
!6108 = !DILocalVariable(name: "e13", scope: !6061, file: !3, line: 563, type: !1867)
!6109 = !DILocation(line: 563, column: 13, scope: !6061)
!6110 = !DILocalVariable(name: "e23", scope: !6061, file: !3, line: 563, type: !1867)
!6111 = !DILocation(line: 563, column: 18, scope: !6061)
!6112 = !DILocalVariable(name: "e24", scope: !6061, file: !3, line: 563, type: !1867)
!6113 = !DILocation(line: 563, column: 23, scope: !6061)
!6114 = !DILocalVariable(name: "e34", scope: !6061, file: !3, line: 563, type: !1867)
!6115 = !DILocation(line: 563, column: 28, scope: !6061)
!6116 = !DILocalVariable(name: "gsi", scope: !6061, file: !3, line: 564, type: !3797)
!6117 = !DILocation(line: 564, column: 24, scope: !6061)
!6118 = !DILocation(line: 566, column: 3, scope: !6061)
!6119 = !DILocation(line: 570, column: 12, scope: !6061)
!6120 = !DILocation(line: 570, column: 10, scope: !6061)
!6121 = !DILocation(line: 571, column: 29, scope: !6061)
!6122 = !DILocation(line: 571, column: 9, scope: !6061)
!6123 = !DILocation(line: 571, column: 7, scope: !6061)
!6124 = !DILocation(line: 572, column: 29, scope: !6061)
!6125 = !DILocation(line: 572, column: 9, scope: !6061)
!6126 = !DILocation(line: 572, column: 7, scope: !6061)
!6127 = !DILocation(line: 574, column: 19, scope: !6061)
!6128 = !DILocation(line: 574, column: 8, scope: !6061)
!6129 = !DILocation(line: 574, column: 6, scope: !6061)
!6130 = !DILocation(line: 575, column: 23, scope: !6061)
!6131 = !DILocation(line: 575, column: 9, scope: !6061)
!6132 = !DILocation(line: 577, column: 26, scope: !6061)
!6133 = !DILocation(line: 577, column: 10, scope: !6061)
!6134 = !DILocation(line: 577, column: 8, scope: !6061)
!6135 = !DILocation(line: 578, column: 26, scope: !6061)
!6136 = !DILocation(line: 578, column: 10, scope: !6061)
!6137 = !DILocation(line: 578, column: 8, scope: !6061)
!6138 = !DILocation(line: 579, column: 11, scope: !6061)
!6139 = !DILocation(line: 579, column: 9, scope: !6061)
!6140 = !DILocation(line: 580, column: 11, scope: !6061)
!6141 = !DILocation(line: 580, column: 9, scope: !6061)
!6142 = !DILocation(line: 581, column: 39, scope: !6061)
!6143 = !DILocation(line: 581, column: 45, scope: !6061)
!6144 = !DILocation(line: 581, column: 11, scope: !6061)
!6145 = !DILocation(line: 581, column: 9, scope: !6061)
!6146 = !DILocation(line: 582, column: 28, scope: !6061)
!6147 = !DILocation(line: 582, column: 3, scope: !6061)
!6148 = !DILocation(line: 583, column: 28, scope: !6061)
!6149 = !DILocation(line: 583, column: 3, scope: !6061)
!6150 = !DILocation(line: 584, column: 28, scope: !6061)
!6151 = !DILocation(line: 584, column: 3, scope: !6061)
!6152 = !DILocation(line: 585, column: 12, scope: !6061)
!6153 = !DILocation(line: 585, column: 10, scope: !6061)
!6154 = !DILocation(line: 587, column: 26, scope: !6061)
!6155 = !DILocation(line: 587, column: 10, scope: !6061)
!6156 = !DILocation(line: 587, column: 8, scope: !6061)
!6157 = !DILocation(line: 588, column: 11, scope: !6061)
!6158 = !DILocation(line: 588, column: 9, scope: !6061)
!6159 = !DILocation(line: 590, column: 28, scope: !6061)
!6160 = !DILocation(line: 590, column: 3, scope: !6061)
!6161 = !DILocation(line: 591, column: 12, scope: !6061)
!6162 = !DILocation(line: 591, column: 10, scope: !6061)
!6163 = !DILocation(line: 593, column: 11, scope: !6061)
!6164 = !DILocation(line: 593, column: 9, scope: !6061)
!6165 = !DILocation(line: 595, column: 28, scope: !6061)
!6166 = !DILocation(line: 595, column: 3, scope: !6061)
!6167 = !DILocation(line: 596, column: 12, scope: !6061)
!6168 = !DILocation(line: 596, column: 10, scope: !6061)
!6169 = !DILocation(line: 600, column: 22, scope: !6061)
!6170 = !DILocation(line: 600, column: 26, scope: !6061)
!6171 = !DILocation(line: 600, column: 9, scope: !6061)
!6172 = !DILocation(line: 600, column: 7, scope: !6061)
!6173 = !DILocation(line: 601, column: 9, scope: !6061)
!6174 = !DILocation(line: 601, column: 14, scope: !6061)
!6175 = !DILocation(line: 601, column: 7, scope: !6061)
!6176 = !DILocation(line: 602, column: 16, scope: !6061)
!6177 = !DILocation(line: 602, column: 3, scope: !6061)
!6178 = !DILocation(line: 602, column: 8, scope: !6061)
!6179 = !DILocation(line: 602, column: 14, scope: !6061)
!6180 = !DILocation(line: 603, column: 22, scope: !6061)
!6181 = !DILocation(line: 603, column: 27, scope: !6061)
!6182 = !DILocation(line: 603, column: 9, scope: !6061)
!6183 = !DILocation(line: 603, column: 7, scope: !6061)
!6184 = !DILocation(line: 604, column: 9, scope: !6061)
!6185 = !DILocation(line: 604, column: 14, scope: !6061)
!6186 = !DILocation(line: 604, column: 7, scope: !6061)
!6187 = !DILocation(line: 605, column: 16, scope: !6061)
!6188 = !DILocation(line: 605, column: 22, scope: !6061)
!6189 = !DILocation(line: 605, column: 20, scope: !6061)
!6190 = !DILocation(line: 605, column: 3, scope: !6061)
!6191 = !DILocation(line: 605, column: 8, scope: !6061)
!6192 = !DILocation(line: 605, column: 14, scope: !6061)
!6193 = !DILocation(line: 606, column: 22, scope: !6061)
!6194 = !DILocation(line: 606, column: 27, scope: !6061)
!6195 = !DILocation(line: 606, column: 9, scope: !6061)
!6196 = !DILocation(line: 606, column: 7, scope: !6061)
!6197 = !DILocation(line: 607, column: 9, scope: !6061)
!6198 = !DILocation(line: 607, column: 14, scope: !6061)
!6199 = !DILocation(line: 607, column: 7, scope: !6061)
!6200 = !DILocation(line: 608, column: 16, scope: !6061)
!6201 = !DILocation(line: 608, column: 3, scope: !6061)
!6202 = !DILocation(line: 608, column: 8, scope: !6061)
!6203 = !DILocation(line: 608, column: 14, scope: !6061)
!6204 = !DILocation(line: 610, column: 3, scope: !6061)
!6205 = !DILocation(line: 610, column: 8, scope: !6061)
!6206 = !DILocation(line: 610, column: 14, scope: !6061)
!6207 = !DILocation(line: 611, column: 3, scope: !6061)
!6208 = !DILocation(line: 611, column: 8, scope: !6061)
!6209 = !DILocation(line: 611, column: 14, scope: !6061)
!6210 = !DILocation(line: 612, column: 22, scope: !6061)
!6211 = !DILocation(line: 612, column: 3, scope: !6061)
!6212 = !DILocation(line: 612, column: 8, scope: !6061)
!6213 = !DILocation(line: 612, column: 20, scope: !6061)
!6214 = !DILocation(line: 613, column: 16, scope: !6061)
!6215 = !DILocation(line: 613, column: 3, scope: !6061)
!6216 = !DILocation(line: 613, column: 8, scope: !6061)
!6217 = !DILocation(line: 613, column: 14, scope: !6061)
!6218 = !DILocation(line: 615, column: 20, scope: !6061)
!6219 = !DILocation(line: 615, column: 24, scope: !6061)
!6220 = !DILocation(line: 615, column: 9, scope: !6061)
!6221 = !DILocation(line: 615, column: 7, scope: !6061)
!6222 = !DILocation(line: 616, column: 41, scope: !6061)
!6223 = !DILocation(line: 616, column: 39, scope: !6061)
!6224 = !DILocation(line: 616, column: 3, scope: !6061)
!6225 = !DILocation(line: 616, column: 8, scope: !6061)
!6226 = !DILocation(line: 616, column: 20, scope: !6061)
!6227 = !DILocation(line: 617, column: 16, scope: !6061)
!6228 = !DILocation(line: 617, column: 22, scope: !6061)
!6229 = !DILocation(line: 617, column: 20, scope: !6061)
!6230 = !DILocation(line: 617, column: 3, scope: !6061)
!6231 = !DILocation(line: 617, column: 8, scope: !6061)
!6232 = !DILocation(line: 617, column: 14, scope: !6061)
!6233 = !DILocation(line: 619, column: 16, scope: !6061)
!6234 = !DILocation(line: 619, column: 3, scope: !6061)
!6235 = !DILocation(line: 621, column: 20, scope: !6061)
!6236 = !DILocation(line: 621, column: 25, scope: !6061)
!6237 = !DILocation(line: 621, column: 9, scope: !6061)
!6238 = !DILocation(line: 621, column: 7, scope: !6061)
!6239 = !DILocation(line: 622, column: 3, scope: !6061)
!6240 = !DILocation(line: 622, column: 8, scope: !6061)
!6241 = !DILocation(line: 622, column: 20, scope: !6061)
!6242 = !DILocation(line: 623, column: 16, scope: !6061)
!6243 = !DILocation(line: 623, column: 3, scope: !6061)
!6244 = !DILocation(line: 623, column: 8, scope: !6061)
!6245 = !DILocation(line: 623, column: 14, scope: !6061)
!6246 = !DILocation(line: 625, column: 3, scope: !6061)
!6247 = !DILocation(line: 625, column: 8, scope: !6061)
!6248 = !DILocation(line: 625, column: 20, scope: !6061)
!6249 = !DILocation(line: 626, column: 16, scope: !6061)
!6250 = !DILocation(line: 626, column: 22, scope: !6061)
!6251 = !DILocation(line: 626, column: 20, scope: !6061)
!6252 = !DILocation(line: 626, column: 3, scope: !6061)
!6253 = !DILocation(line: 626, column: 8, scope: !6061)
!6254 = !DILocation(line: 626, column: 14, scope: !6061)
!6255 = !DILocation(line: 628, column: 10, scope: !6061)
!6256 = !DILocation(line: 628, column: 3, scope: !6061)
!6257 = distinct !DISubprogram(name: "gimple_mod_pow2", scope: !3, file: !3, line: 709, type: !6258, scopeLine: 710, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!6258 = !DISubroutineType(types: !6259)
!6259 = !{!1557, !1887, !1653, !2099, !2099}
!6260 = !DILocalVariable(name: "stmt", arg: 1, scope: !6257, file: !3, line: 709, type: !1887)
!6261 = !DILocation(line: 709, column: 25, scope: !6257)
!6262 = !DILocalVariable(name: "prob", arg: 2, scope: !6257, file: !3, line: 709, type: !1653)
!6263 = !DILocation(line: 709, column: 35, scope: !6257)
!6264 = !DILocalVariable(name: "count", arg: 3, scope: !6257, file: !3, line: 709, type: !2099)
!6265 = !DILocation(line: 709, column: 51, scope: !6257)
!6266 = !DILocalVariable(name: "all", arg: 4, scope: !6257, file: !3, line: 709, type: !2099)
!6267 = !DILocation(line: 709, column: 68, scope: !6257)
!6268 = !DILocalVariable(name: "stmt1", scope: !6257, file: !3, line: 711, type: !1887)
!6269 = !DILocation(line: 711, column: 10, scope: !6257)
!6270 = !DILocalVariable(name: "stmt2", scope: !6257, file: !3, line: 711, type: !1887)
!6271 = !DILocation(line: 711, column: 17, scope: !6257)
!6272 = !DILocalVariable(name: "stmt3", scope: !6257, file: !3, line: 711, type: !1887)
!6273 = !DILocation(line: 711, column: 24, scope: !6257)
!6274 = !DILocalVariable(name: "stmt4", scope: !6257, file: !3, line: 711, type: !1887)
!6275 = !DILocation(line: 711, column: 31, scope: !6257)
!6276 = !DILocalVariable(name: "tmp2", scope: !6257, file: !3, line: 712, type: !1557)
!6277 = !DILocation(line: 712, column: 8, scope: !6257)
!6278 = !DILocalVariable(name: "tmp3", scope: !6257, file: !3, line: 712, type: !1557)
!6279 = !DILocation(line: 712, column: 14, scope: !6257)
!6280 = !DILocalVariable(name: "bb1end", scope: !6257, file: !3, line: 713, type: !1887)
!6281 = !DILocation(line: 713, column: 10, scope: !6257)
!6282 = !DILocalVariable(name: "bb2end", scope: !6257, file: !3, line: 713, type: !1887)
!6283 = !DILocation(line: 713, column: 18, scope: !6257)
!6284 = !DILocalVariable(name: "bb3end", scope: !6257, file: !3, line: 713, type: !1887)
!6285 = !DILocation(line: 713, column: 26, scope: !6257)
!6286 = !DILocalVariable(name: "bb", scope: !6257, file: !3, line: 714, type: !2321)
!6287 = !DILocation(line: 714, column: 15, scope: !6257)
!6288 = !DILocalVariable(name: "bb2", scope: !6257, file: !3, line: 714, type: !2321)
!6289 = !DILocation(line: 714, column: 19, scope: !6257)
!6290 = !DILocalVariable(name: "bb3", scope: !6257, file: !3, line: 714, type: !2321)
!6291 = !DILocation(line: 714, column: 24, scope: !6257)
!6292 = !DILocalVariable(name: "bb4", scope: !6257, file: !3, line: 714, type: !2321)
!6293 = !DILocation(line: 714, column: 29, scope: !6257)
!6294 = !DILocalVariable(name: "optype", scope: !6257, file: !3, line: 715, type: !1557)
!6295 = !DILocation(line: 715, column: 8, scope: !6257)
!6296 = !DILocalVariable(name: "op1", scope: !6257, file: !3, line: 715, type: !1557)
!6297 = !DILocation(line: 715, column: 16, scope: !6257)
!6298 = !DILocalVariable(name: "op2", scope: !6257, file: !3, line: 715, type: !1557)
!6299 = !DILocation(line: 715, column: 21, scope: !6257)
!6300 = !DILocalVariable(name: "e12", scope: !6257, file: !3, line: 716, type: !1867)
!6301 = !DILocation(line: 716, column: 8, scope: !6257)
!6302 = !DILocalVariable(name: "e13", scope: !6257, file: !3, line: 716, type: !1867)
!6303 = !DILocation(line: 716, column: 13, scope: !6257)
!6304 = !DILocalVariable(name: "e23", scope: !6257, file: !3, line: 716, type: !1867)
!6305 = !DILocation(line: 716, column: 18, scope: !6257)
!6306 = !DILocalVariable(name: "e24", scope: !6257, file: !3, line: 716, type: !1867)
!6307 = !DILocation(line: 716, column: 23, scope: !6257)
!6308 = !DILocalVariable(name: "e34", scope: !6257, file: !3, line: 716, type: !1867)
!6309 = !DILocation(line: 716, column: 28, scope: !6257)
!6310 = !DILocalVariable(name: "gsi", scope: !6257, file: !3, line: 717, type: !3797)
!6311 = !DILocation(line: 717, column: 24, scope: !6257)
!6312 = !DILocalVariable(name: "result", scope: !6257, file: !3, line: 718, type: !1557)
!6313 = !DILocation(line: 718, column: 8, scope: !6257)
!6314 = !DILocation(line: 720, column: 3, scope: !6257)
!6315 = !DILocation(line: 723, column: 12, scope: !6257)
!6316 = !DILocation(line: 723, column: 10, scope: !6257)
!6317 = !DILocation(line: 724, column: 29, scope: !6257)
!6318 = !DILocation(line: 724, column: 9, scope: !6257)
!6319 = !DILocation(line: 724, column: 7, scope: !6257)
!6320 = !DILocation(line: 725, column: 29, scope: !6257)
!6321 = !DILocation(line: 725, column: 9, scope: !6257)
!6322 = !DILocation(line: 725, column: 7, scope: !6257)
!6323 = !DILocation(line: 727, column: 19, scope: !6257)
!6324 = !DILocation(line: 727, column: 8, scope: !6257)
!6325 = !DILocation(line: 727, column: 6, scope: !6257)
!6326 = !DILocation(line: 728, column: 23, scope: !6257)
!6327 = !DILocation(line: 728, column: 9, scope: !6257)
!6328 = !DILocation(line: 730, column: 28, scope: !6257)
!6329 = !DILocation(line: 730, column: 12, scope: !6257)
!6330 = !DILocation(line: 730, column: 10, scope: !6257)
!6331 = !DILocation(line: 731, column: 26, scope: !6257)
!6332 = !DILocation(line: 731, column: 10, scope: !6257)
!6333 = !DILocation(line: 731, column: 8, scope: !6257)
!6334 = !DILocation(line: 732, column: 26, scope: !6257)
!6335 = !DILocation(line: 732, column: 10, scope: !6257)
!6336 = !DILocation(line: 732, column: 8, scope: !6257)
!6337 = !DILocation(line: 733, column: 11, scope: !6257)
!6338 = !DILocation(line: 733, column: 9, scope: !6257)
!6339 = !DILocation(line: 735, column: 11, scope: !6257)
!6340 = !DILocation(line: 735, column: 9, scope: !6257)
!6341 = !DILocation(line: 736, column: 39, scope: !6257)
!6342 = !DILocation(line: 736, column: 60, scope: !6257)
!6343 = !DILocation(line: 736, column: 45, scope: !6257)
!6344 = !DILocation(line: 736, column: 11, scope: !6257)
!6345 = !DILocation(line: 736, column: 9, scope: !6257)
!6346 = !DILocation(line: 738, column: 28, scope: !6257)
!6347 = !DILocation(line: 738, column: 3, scope: !6257)
!6348 = !DILocation(line: 739, column: 28, scope: !6257)
!6349 = !DILocation(line: 739, column: 3, scope: !6257)
!6350 = !DILocation(line: 740, column: 28, scope: !6257)
!6351 = !DILocation(line: 740, column: 3, scope: !6257)
!6352 = !DILocation(line: 741, column: 12, scope: !6257)
!6353 = !DILocation(line: 741, column: 10, scope: !6257)
!6354 = !DILocation(line: 744, column: 11, scope: !6257)
!6355 = !DILocation(line: 744, column: 9, scope: !6257)
!6356 = !DILocation(line: 745, column: 28, scope: !6257)
!6357 = !DILocation(line: 745, column: 3, scope: !6257)
!6358 = !DILocation(line: 746, column: 12, scope: !6257)
!6359 = !DILocation(line: 746, column: 10, scope: !6257)
!6360 = !DILocation(line: 748, column: 11, scope: !6257)
!6361 = !DILocation(line: 748, column: 9, scope: !6257)
!6362 = !DILocation(line: 750, column: 28, scope: !6257)
!6363 = !DILocation(line: 750, column: 3, scope: !6257)
!6364 = !DILocation(line: 751, column: 12, scope: !6257)
!6365 = !DILocation(line: 751, column: 10, scope: !6257)
!6366 = !DILocation(line: 755, column: 22, scope: !6257)
!6367 = !DILocation(line: 755, column: 26, scope: !6257)
!6368 = !DILocation(line: 755, column: 9, scope: !6257)
!6369 = !DILocation(line: 755, column: 7, scope: !6257)
!6370 = !DILocation(line: 756, column: 9, scope: !6257)
!6371 = !DILocation(line: 756, column: 14, scope: !6257)
!6372 = !DILocation(line: 756, column: 7, scope: !6257)
!6373 = !DILocation(line: 757, column: 16, scope: !6257)
!6374 = !DILocation(line: 757, column: 3, scope: !6257)
!6375 = !DILocation(line: 757, column: 8, scope: !6257)
!6376 = !DILocation(line: 757, column: 14, scope: !6257)
!6377 = !DILocation(line: 758, column: 22, scope: !6257)
!6378 = !DILocation(line: 758, column: 27, scope: !6257)
!6379 = !DILocation(line: 758, column: 9, scope: !6257)
!6380 = !DILocation(line: 758, column: 7, scope: !6257)
!6381 = !DILocation(line: 759, column: 9, scope: !6257)
!6382 = !DILocation(line: 759, column: 14, scope: !6257)
!6383 = !DILocation(line: 759, column: 7, scope: !6257)
!6384 = !DILocation(line: 760, column: 16, scope: !6257)
!6385 = !DILocation(line: 760, column: 22, scope: !6257)
!6386 = !DILocation(line: 760, column: 20, scope: !6257)
!6387 = !DILocation(line: 760, column: 3, scope: !6257)
!6388 = !DILocation(line: 760, column: 8, scope: !6257)
!6389 = !DILocation(line: 760, column: 14, scope: !6257)
!6390 = !DILocation(line: 761, column: 22, scope: !6257)
!6391 = !DILocation(line: 761, column: 27, scope: !6257)
!6392 = !DILocation(line: 761, column: 9, scope: !6257)
!6393 = !DILocation(line: 761, column: 7, scope: !6257)
!6394 = !DILocation(line: 762, column: 9, scope: !6257)
!6395 = !DILocation(line: 762, column: 14, scope: !6257)
!6396 = !DILocation(line: 762, column: 7, scope: !6257)
!6397 = !DILocation(line: 763, column: 16, scope: !6257)
!6398 = !DILocation(line: 763, column: 3, scope: !6257)
!6399 = !DILocation(line: 763, column: 8, scope: !6257)
!6400 = !DILocation(line: 763, column: 14, scope: !6257)
!6401 = !DILocation(line: 765, column: 3, scope: !6257)
!6402 = !DILocation(line: 765, column: 8, scope: !6257)
!6403 = !DILocation(line: 765, column: 14, scope: !6257)
!6404 = !DILocation(line: 766, column: 3, scope: !6257)
!6405 = !DILocation(line: 766, column: 8, scope: !6257)
!6406 = !DILocation(line: 766, column: 14, scope: !6257)
!6407 = !DILocation(line: 767, column: 22, scope: !6257)
!6408 = !DILocation(line: 767, column: 3, scope: !6257)
!6409 = !DILocation(line: 767, column: 8, scope: !6257)
!6410 = !DILocation(line: 767, column: 20, scope: !6257)
!6411 = !DILocation(line: 768, column: 16, scope: !6257)
!6412 = !DILocation(line: 768, column: 3, scope: !6257)
!6413 = !DILocation(line: 768, column: 8, scope: !6257)
!6414 = !DILocation(line: 768, column: 14, scope: !6257)
!6415 = !DILocation(line: 770, column: 20, scope: !6257)
!6416 = !DILocation(line: 770, column: 24, scope: !6257)
!6417 = !DILocation(line: 770, column: 9, scope: !6257)
!6418 = !DILocation(line: 770, column: 7, scope: !6257)
!6419 = !DILocation(line: 771, column: 41, scope: !6257)
!6420 = !DILocation(line: 771, column: 39, scope: !6257)
!6421 = !DILocation(line: 771, column: 3, scope: !6257)
!6422 = !DILocation(line: 771, column: 8, scope: !6257)
!6423 = !DILocation(line: 771, column: 20, scope: !6257)
!6424 = !DILocation(line: 772, column: 16, scope: !6257)
!6425 = !DILocation(line: 772, column: 22, scope: !6257)
!6426 = !DILocation(line: 772, column: 20, scope: !6257)
!6427 = !DILocation(line: 772, column: 3, scope: !6257)
!6428 = !DILocation(line: 772, column: 8, scope: !6257)
!6429 = !DILocation(line: 772, column: 14, scope: !6257)
!6430 = !DILocation(line: 774, column: 16, scope: !6257)
!6431 = !DILocation(line: 774, column: 3, scope: !6257)
!6432 = !DILocation(line: 776, column: 20, scope: !6257)
!6433 = !DILocation(line: 776, column: 25, scope: !6257)
!6434 = !DILocation(line: 776, column: 9, scope: !6257)
!6435 = !DILocation(line: 776, column: 7, scope: !6257)
!6436 = !DILocation(line: 777, column: 3, scope: !6257)
!6437 = !DILocation(line: 777, column: 8, scope: !6257)
!6438 = !DILocation(line: 777, column: 20, scope: !6257)
!6439 = !DILocation(line: 778, column: 16, scope: !6257)
!6440 = !DILocation(line: 778, column: 3, scope: !6257)
!6441 = !DILocation(line: 778, column: 8, scope: !6257)
!6442 = !DILocation(line: 778, column: 14, scope: !6257)
!6443 = !DILocation(line: 780, column: 3, scope: !6257)
!6444 = !DILocation(line: 780, column: 8, scope: !6257)
!6445 = !DILocation(line: 780, column: 20, scope: !6257)
!6446 = !DILocation(line: 781, column: 16, scope: !6257)
!6447 = !DILocation(line: 781, column: 22, scope: !6257)
!6448 = !DILocation(line: 781, column: 20, scope: !6257)
!6449 = !DILocation(line: 781, column: 3, scope: !6257)
!6450 = !DILocation(line: 781, column: 8, scope: !6257)
!6451 = !DILocation(line: 781, column: 14, scope: !6257)
!6452 = !DILocation(line: 783, column: 10, scope: !6257)
!6453 = !DILocation(line: 783, column: 3, scope: !6257)
!6454 = distinct !DISubprogram(name: "gimple_stringop_fixed_value", scope: !3, file: !3, line: 1289, type: !6455, scopeLine: 1291, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!6455 = !DISubroutineType(types: !6456)
!6456 = !{null, !1887, !1557, !1653, !2099, !2099}
!6457 = !DILocalVariable(name: "vcall_stmt", arg: 1, scope: !6454, file: !3, line: 1289, type: !1887)
!6458 = !DILocation(line: 1289, column: 37, scope: !6454)
!6459 = !DILocalVariable(name: "icall_size", arg: 2, scope: !6454, file: !3, line: 1289, type: !1557)
!6460 = !DILocation(line: 1289, column: 54, scope: !6454)
!6461 = !DILocalVariable(name: "prob", arg: 3, scope: !6454, file: !3, line: 1289, type: !1653)
!6462 = !DILocation(line: 1289, column: 70, scope: !6454)
!6463 = !DILocalVariable(name: "count", arg: 4, scope: !6454, file: !3, line: 1290, type: !2099)
!6464 = !DILocation(line: 1290, column: 19, scope: !6454)
!6465 = !DILocalVariable(name: "all", arg: 5, scope: !6454, file: !3, line: 1290, type: !2099)
!6466 = !DILocation(line: 1290, column: 36, scope: !6454)
!6467 = !DILocalVariable(name: "tmp_stmt", scope: !6454, file: !3, line: 1292, type: !1887)
!6468 = !DILocation(line: 1292, column: 10, scope: !6454)
!6469 = !DILocalVariable(name: "cond_stmt", scope: !6454, file: !3, line: 1292, type: !1887)
!6470 = !DILocation(line: 1292, column: 20, scope: !6454)
!6471 = !DILocalVariable(name: "icall_stmt", scope: !6454, file: !3, line: 1292, type: !1887)
!6472 = !DILocation(line: 1292, column: 31, scope: !6454)
!6473 = !DILocalVariable(name: "tmp1", scope: !6454, file: !3, line: 1293, type: !1557)
!6474 = !DILocation(line: 1293, column: 8, scope: !6454)
!6475 = !DILocalVariable(name: "tmpv", scope: !6454, file: !3, line: 1293, type: !1557)
!6476 = !DILocation(line: 1293, column: 14, scope: !6454)
!6477 = !DILocalVariable(name: "vcall_size", scope: !6454, file: !3, line: 1293, type: !1557)
!6478 = !DILocation(line: 1293, column: 20, scope: !6454)
!6479 = !DILocalVariable(name: "optype", scope: !6454, file: !3, line: 1293, type: !1557)
!6480 = !DILocation(line: 1293, column: 32, scope: !6454)
!6481 = !DILocalVariable(name: "cond_bb", scope: !6454, file: !3, line: 1294, type: !2321)
!6482 = !DILocation(line: 1294, column: 15, scope: !6454)
!6483 = !DILocalVariable(name: "icall_bb", scope: !6454, file: !3, line: 1294, type: !2321)
!6484 = !DILocation(line: 1294, column: 24, scope: !6454)
!6485 = !DILocalVariable(name: "vcall_bb", scope: !6454, file: !3, line: 1294, type: !2321)
!6486 = !DILocation(line: 1294, column: 34, scope: !6454)
!6487 = !DILocalVariable(name: "join_bb", scope: !6454, file: !3, line: 1294, type: !2321)
!6488 = !DILocation(line: 1294, column: 44, scope: !6454)
!6489 = !DILocalVariable(name: "e_ci", scope: !6454, file: !3, line: 1295, type: !1867)
!6490 = !DILocation(line: 1295, column: 8, scope: !6454)
!6491 = !DILocalVariable(name: "e_cv", scope: !6454, file: !3, line: 1295, type: !1867)
!6492 = !DILocation(line: 1295, column: 14, scope: !6454)
!6493 = !DILocalVariable(name: "e_iv", scope: !6454, file: !3, line: 1295, type: !1867)
!6494 = !DILocation(line: 1295, column: 20, scope: !6454)
!6495 = !DILocalVariable(name: "e_ij", scope: !6454, file: !3, line: 1295, type: !1867)
!6496 = !DILocation(line: 1295, column: 26, scope: !6454)
!6497 = !DILocalVariable(name: "e_vj", scope: !6454, file: !3, line: 1295, type: !1867)
!6498 = !DILocation(line: 1295, column: 32, scope: !6454)
!6499 = !DILocalVariable(name: "gsi", scope: !6454, file: !3, line: 1296, type: !3797)
!6500 = !DILocation(line: 1296, column: 24, scope: !6454)
!6501 = !DILocalVariable(name: "fndecl", scope: !6454, file: !3, line: 1297, type: !1557)
!6502 = !DILocation(line: 1297, column: 8, scope: !6454)
!6503 = !DILocalVariable(name: "size_arg", scope: !6454, file: !3, line: 1298, type: !1653)
!6504 = !DILocation(line: 1298, column: 7, scope: !6454)
!6505 = !DILocation(line: 1300, column: 32, scope: !6454)
!6506 = !DILocation(line: 1300, column: 12, scope: !6454)
!6507 = !DILocation(line: 1300, column: 10, scope: !6454)
!6508 = !DILocation(line: 1301, column: 43, scope: !6509)
!6509 = distinct !DILexicalBlock(scope: !6454, file: !3, line: 1301, column: 7)
!6510 = !DILocation(line: 1301, column: 51, scope: !6509)
!6511 = !DILocation(line: 1301, column: 8, scope: !6509)
!6512 = !DILocation(line: 1301, column: 7, scope: !6454)
!6513 = !DILocation(line: 1302, column: 5, scope: !6509)
!6514 = !DILocation(line: 1304, column: 24, scope: !6454)
!6515 = !DILocation(line: 1304, column: 13, scope: !6454)
!6516 = !DILocation(line: 1304, column: 11, scope: !6454)
!6517 = !DILocation(line: 1305, column: 23, scope: !6454)
!6518 = !DILocation(line: 1305, column: 9, scope: !6454)
!6519 = !DILocation(line: 1307, column: 33, scope: !6454)
!6520 = !DILocation(line: 1307, column: 45, scope: !6454)
!6521 = !DILocation(line: 1307, column: 16, scope: !6454)
!6522 = !DILocation(line: 1307, column: 14, scope: !6454)
!6523 = !DILocation(line: 1308, column: 12, scope: !6454)
!6524 = !DILocation(line: 1308, column: 10, scope: !6454)
!6525 = !DILocation(line: 1310, column: 26, scope: !6454)
!6526 = !DILocation(line: 1310, column: 10, scope: !6454)
!6527 = !DILocation(line: 1310, column: 8, scope: !6454)
!6528 = !DILocation(line: 1311, column: 26, scope: !6454)
!6529 = !DILocation(line: 1311, column: 10, scope: !6454)
!6530 = !DILocation(line: 1311, column: 8, scope: !6454)
!6531 = !DILocation(line: 1312, column: 14, scope: !6454)
!6532 = !DILocation(line: 1312, column: 12, scope: !6454)
!6533 = !DILocation(line: 1313, column: 28, scope: !6454)
!6534 = !DILocation(line: 1313, column: 3, scope: !6454)
!6535 = !DILocation(line: 1315, column: 14, scope: !6454)
!6536 = !DILocation(line: 1315, column: 12, scope: !6454)
!6537 = !DILocation(line: 1316, column: 28, scope: !6454)
!6538 = !DILocation(line: 1316, column: 3, scope: !6454)
!6539 = !DILocation(line: 1318, column: 43, scope: !6454)
!6540 = !DILocation(line: 1318, column: 49, scope: !6454)
!6541 = !DILocation(line: 1318, column: 15, scope: !6454)
!6542 = !DILocation(line: 1318, column: 13, scope: !6454)
!6543 = !DILocation(line: 1319, column: 28, scope: !6454)
!6544 = !DILocation(line: 1319, column: 3, scope: !6454)
!6545 = !DILocation(line: 1321, column: 29, scope: !6454)
!6546 = !DILocation(line: 1321, column: 16, scope: !6454)
!6547 = !DILocation(line: 1321, column: 14, scope: !6454)
!6548 = !DILocation(line: 1322, column: 24, scope: !6454)
!6549 = !DILocation(line: 1322, column: 36, scope: !6454)
!6550 = !DILocation(line: 1322, column: 46, scope: !6454)
!6551 = !DILocation(line: 1322, column: 3, scope: !6454)
!6552 = !DILocation(line: 1323, column: 28, scope: !6454)
!6553 = !DILocation(line: 1323, column: 3, scope: !6454)
!6554 = !DILocation(line: 1327, column: 23, scope: !6454)
!6555 = !DILocation(line: 1327, column: 32, scope: !6454)
!6556 = !DILocation(line: 1327, column: 10, scope: !6454)
!6557 = !DILocation(line: 1327, column: 8, scope: !6454)
!6558 = !DILocation(line: 1328, column: 14, scope: !6454)
!6559 = !DILocation(line: 1328, column: 20, scope: !6454)
!6560 = !DILocation(line: 1328, column: 12, scope: !6454)
!6561 = !DILocation(line: 1329, column: 21, scope: !6454)
!6562 = !DILocation(line: 1329, column: 3, scope: !6454)
!6563 = !DILocation(line: 1329, column: 13, scope: !6454)
!6564 = !DILocation(line: 1329, column: 19, scope: !6454)
!6565 = !DILocation(line: 1331, column: 23, scope: !6454)
!6566 = !DILocation(line: 1331, column: 33, scope: !6454)
!6567 = !DILocation(line: 1331, column: 10, scope: !6454)
!6568 = !DILocation(line: 1331, column: 8, scope: !6454)
!6569 = !DILocation(line: 1332, column: 14, scope: !6454)
!6570 = !DILocation(line: 1332, column: 20, scope: !6454)
!6571 = !DILocation(line: 1332, column: 12, scope: !6454)
!6572 = !DILocation(line: 1333, column: 21, scope: !6454)
!6573 = !DILocation(line: 1333, column: 27, scope: !6454)
!6574 = !DILocation(line: 1333, column: 25, scope: !6454)
!6575 = !DILocation(line: 1333, column: 3, scope: !6454)
!6576 = !DILocation(line: 1333, column: 13, scope: !6454)
!6577 = !DILocation(line: 1333, column: 19, scope: !6454)
!6578 = !DILocation(line: 1335, column: 23, scope: !6454)
!6579 = !DILocation(line: 1335, column: 33, scope: !6454)
!6580 = !DILocation(line: 1335, column: 10, scope: !6454)
!6581 = !DILocation(line: 1335, column: 8, scope: !6454)
!6582 = !DILocation(line: 1336, column: 13, scope: !6454)
!6583 = !DILocation(line: 1336, column: 19, scope: !6454)
!6584 = !DILocation(line: 1336, column: 11, scope: !6454)
!6585 = !DILocation(line: 1337, column: 20, scope: !6454)
!6586 = !DILocation(line: 1337, column: 3, scope: !6454)
!6587 = !DILocation(line: 1337, column: 12, scope: !6454)
!6588 = !DILocation(line: 1337, column: 18, scope: !6454)
!6589 = !DILocation(line: 1339, column: 18, scope: !6454)
!6590 = !DILocation(line: 1339, column: 24, scope: !6454)
!6591 = !DILocation(line: 1339, column: 30, scope: !6454)
!6592 = !DILocation(line: 1339, column: 48, scope: !6454)
!6593 = !DILocation(line: 1339, column: 3, scope: !6454)
!6594 = !DILocation(line: 1339, column: 9, scope: !6454)
!6595 = !DILocation(line: 1339, column: 15, scope: !6454)
!6596 = !DILocation(line: 1340, column: 23, scope: !6454)
!6597 = !DILocation(line: 1340, column: 3, scope: !6454)
!6598 = !DILocation(line: 1340, column: 9, scope: !6454)
!6599 = !DILocation(line: 1340, column: 21, scope: !6454)
!6600 = !DILocation(line: 1341, column: 17, scope: !6454)
!6601 = !DILocation(line: 1341, column: 3, scope: !6454)
!6602 = !DILocation(line: 1341, column: 9, scope: !6454)
!6603 = !DILocation(line: 1341, column: 15, scope: !6454)
!6604 = !DILocation(line: 1343, column: 21, scope: !6454)
!6605 = !DILocation(line: 1343, column: 30, scope: !6454)
!6606 = !DILocation(line: 1343, column: 10, scope: !6454)
!6607 = !DILocation(line: 1343, column: 8, scope: !6454)
!6608 = !DILocation(line: 1344, column: 42, scope: !6454)
!6609 = !DILocation(line: 1344, column: 40, scope: !6454)
!6610 = !DILocation(line: 1344, column: 3, scope: !6454)
!6611 = !DILocation(line: 1344, column: 9, scope: !6454)
!6612 = !DILocation(line: 1344, column: 21, scope: !6454)
!6613 = !DILocation(line: 1345, column: 17, scope: !6454)
!6614 = !DILocation(line: 1345, column: 23, scope: !6454)
!6615 = !DILocation(line: 1345, column: 21, scope: !6454)
!6616 = !DILocation(line: 1345, column: 3, scope: !6454)
!6617 = !DILocation(line: 1345, column: 9, scope: !6454)
!6618 = !DILocation(line: 1345, column: 15, scope: !6454)
!6619 = !DILocation(line: 1347, column: 16, scope: !6454)
!6620 = !DILocation(line: 1347, column: 3, scope: !6454)
!6621 = !DILocation(line: 1349, column: 21, scope: !6454)
!6622 = !DILocation(line: 1349, column: 31, scope: !6454)
!6623 = !DILocation(line: 1349, column: 10, scope: !6454)
!6624 = !DILocation(line: 1349, column: 8, scope: !6454)
!6625 = !DILocation(line: 1350, column: 3, scope: !6454)
!6626 = !DILocation(line: 1350, column: 9, scope: !6454)
!6627 = !DILocation(line: 1350, column: 21, scope: !6454)
!6628 = !DILocation(line: 1351, column: 17, scope: !6454)
!6629 = !DILocation(line: 1351, column: 3, scope: !6454)
!6630 = !DILocation(line: 1351, column: 9, scope: !6454)
!6631 = !DILocation(line: 1351, column: 15, scope: !6454)
!6632 = !DILocation(line: 1353, column: 3, scope: !6454)
!6633 = !DILocation(line: 1353, column: 9, scope: !6454)
!6634 = !DILocation(line: 1353, column: 21, scope: !6454)
!6635 = !DILocation(line: 1354, column: 17, scope: !6454)
!6636 = !DILocation(line: 1354, column: 23, scope: !6454)
!6637 = !DILocation(line: 1354, column: 21, scope: !6454)
!6638 = !DILocation(line: 1354, column: 3, scope: !6454)
!6639 = !DILocation(line: 1354, column: 9, scope: !6454)
!6640 = !DILocation(line: 1354, column: 15, scope: !6454)
!6641 = !DILocation(line: 1357, column: 3, scope: !6454)
!6642 = !DILocation(line: 1358, column: 3, scope: !6454)
!6643 = !DILocation(line: 1359, column: 1, scope: !6454)
!6644 = distinct !DISubprogram(name: "gimple_call_set_arg", scope: !413, file: !413, line: 2046, type: !6645, scopeLine: 2047, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!6645 = !DISubroutineType(types: !6646)
!6646 = !{null, !1887, !7, !1557}
!6647 = !DILocalVariable(name: "gs", arg: 1, scope: !6644, file: !413, line: 2046, type: !1887)
!6648 = !DILocation(line: 2046, column: 29, scope: !6644)
!6649 = !DILocalVariable(name: "index", arg: 2, scope: !6644, file: !413, line: 2046, type: !7)
!6650 = !DILocation(line: 2046, column: 42, scope: !6644)
!6651 = !DILocalVariable(name: "arg", arg: 3, scope: !6644, file: !413, line: 2046, type: !1557)
!6652 = !DILocation(line: 2046, column: 54, scope: !6644)
!6653 = !DILocation(line: 2049, column: 18, scope: !6644)
!6654 = !DILocation(line: 2049, column: 22, scope: !6644)
!6655 = !DILocation(line: 2049, column: 28, scope: !6644)
!6656 = !DILocation(line: 2049, column: 33, scope: !6644)
!6657 = !DILocation(line: 2049, column: 3, scope: !6644)
!6658 = !DILocation(line: 2050, column: 1, scope: !6644)
!6659 = distinct !DISubprogram(name: "gimple_set_op", scope: !413, file: !413, line: 1663, type: !6645, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!6660 = !DILocalVariable(name: "gs", arg: 1, scope: !6659, file: !413, line: 1663, type: !1887)
!6661 = !DILocation(line: 1663, column: 23, scope: !6659)
!6662 = !DILocalVariable(name: "i", arg: 2, scope: !6659, file: !413, line: 1663, type: !7)
!6663 = !DILocation(line: 1663, column: 36, scope: !6659)
!6664 = !DILocalVariable(name: "op", arg: 3, scope: !6659, file: !413, line: 1663, type: !1557)
!6665 = !DILocation(line: 1663, column: 44, scope: !6659)
!6666 = !DILocation(line: 1665, column: 3, scope: !6659)
!6667 = !DILocation(line: 1671, column: 24, scope: !6659)
!6668 = !DILocation(line: 1671, column: 15, scope: !6659)
!6669 = !DILocation(line: 1671, column: 3, scope: !6659)
!6670 = !DILocation(line: 1671, column: 19, scope: !6659)
!6671 = !DILocation(line: 1671, column: 22, scope: !6659)
!6672 = !DILocation(line: 1672, column: 1, scope: !6659)
!6673 = distinct !DISubprogram(name: "find_func_by_pid", scope: !3, file: !3, line: 1073, type: !6674, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!6674 = !DISubroutineType(types: !6675)
!6675 = !{!2925, !1653}
!6676 = !DILocalVariable(name: "pid", arg: 1, scope: !6673, file: !3, line: 1073, type: !1653)
!6677 = !DILocation(line: 1073, column: 23, scope: !6673)
!6678 = !DILocation(line: 1075, column: 3, scope: !6673)
!6679 = !DILocation(line: 1077, column: 10, scope: !6673)
!6680 = !DILocation(line: 1077, column: 19, scope: !6673)
!6681 = !DILocation(line: 1077, column: 3, scope: !6673)
!6682 = distinct !DISubprogram(name: "gimple_ic", scope: !3, file: !3, line: 1089, type: !6683, scopeLine: 1091, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!6683 = !DISubroutineType(types: !6684)
!6684 = !{!1887, !1887, !2925, !1653, !2099, !2099}
!6685 = !DILocalVariable(name: "icall_stmt", arg: 1, scope: !6682, file: !3, line: 1089, type: !1887)
!6686 = !DILocation(line: 1089, column: 19, scope: !6682)
!6687 = !DILocalVariable(name: "direct_call", arg: 2, scope: !6682, file: !3, line: 1089, type: !2925)
!6688 = !DILocation(line: 1089, column: 51, scope: !6682)
!6689 = !DILocalVariable(name: "prob", arg: 3, scope: !6682, file: !3, line: 1090, type: !1653)
!6690 = !DILocation(line: 1090, column: 9, scope: !6682)
!6691 = !DILocalVariable(name: "count", arg: 4, scope: !6682, file: !3, line: 1090, type: !2099)
!6692 = !DILocation(line: 1090, column: 25, scope: !6682)
!6693 = !DILocalVariable(name: "all", arg: 5, scope: !6682, file: !3, line: 1090, type: !2099)
!6694 = !DILocation(line: 1090, column: 42, scope: !6682)
!6695 = !DILocalVariable(name: "dcall_stmt", scope: !6682, file: !3, line: 1092, type: !1887)
!6696 = !DILocation(line: 1092, column: 10, scope: !6682)
!6697 = !DILocalVariable(name: "load_stmt", scope: !6682, file: !3, line: 1092, type: !1887)
!6698 = !DILocation(line: 1092, column: 22, scope: !6682)
!6699 = !DILocalVariable(name: "cond_stmt", scope: !6682, file: !3, line: 1092, type: !1887)
!6700 = !DILocation(line: 1092, column: 33, scope: !6682)
!6701 = !DILocalVariable(name: "tmp1", scope: !6682, file: !3, line: 1093, type: !1557)
!6702 = !DILocation(line: 1093, column: 8, scope: !6682)
!6703 = !DILocalVariable(name: "tmpv", scope: !6682, file: !3, line: 1093, type: !1557)
!6704 = !DILocation(line: 1093, column: 14, scope: !6682)
!6705 = !DILocalVariable(name: "tmp", scope: !6682, file: !3, line: 1093, type: !1557)
!6706 = !DILocation(line: 1093, column: 20, scope: !6682)
!6707 = !DILocalVariable(name: "cond_bb", scope: !6682, file: !3, line: 1094, type: !2321)
!6708 = !DILocation(line: 1094, column: 15, scope: !6682)
!6709 = !DILocalVariable(name: "dcall_bb", scope: !6682, file: !3, line: 1094, type: !2321)
!6710 = !DILocation(line: 1094, column: 24, scope: !6682)
!6711 = !DILocalVariable(name: "icall_bb", scope: !6682, file: !3, line: 1094, type: !2321)
!6712 = !DILocation(line: 1094, column: 34, scope: !6682)
!6713 = !DILocalVariable(name: "join_bb", scope: !6682, file: !3, line: 1094, type: !2321)
!6714 = !DILocation(line: 1094, column: 44, scope: !6682)
!6715 = !DILocalVariable(name: "optype", scope: !6682, file: !3, line: 1095, type: !1557)
!6716 = !DILocation(line: 1095, column: 8, scope: !6682)
!6717 = !DILocation(line: 1095, column: 37, scope: !6682)
!6718 = !DILocation(line: 1095, column: 17, scope: !6682)
!6719 = !DILocalVariable(name: "e_cd", scope: !6682, file: !3, line: 1096, type: !1867)
!6720 = !DILocation(line: 1096, column: 8, scope: !6682)
!6721 = !DILocalVariable(name: "e_ci", scope: !6682, file: !3, line: 1096, type: !1867)
!6722 = !DILocation(line: 1096, column: 14, scope: !6682)
!6723 = !DILocalVariable(name: "e_di", scope: !6682, file: !3, line: 1096, type: !1867)
!6724 = !DILocation(line: 1096, column: 20, scope: !6682)
!6725 = !DILocalVariable(name: "e_dj", scope: !6682, file: !3, line: 1096, type: !1867)
!6726 = !DILocation(line: 1096, column: 26, scope: !6682)
!6727 = !DILocalVariable(name: "e_ij", scope: !6682, file: !3, line: 1096, type: !1867)
!6728 = !DILocation(line: 1096, column: 32, scope: !6682)
!6729 = !DILocalVariable(name: "gsi", scope: !6682, file: !3, line: 1097, type: !3797)
!6730 = !DILocation(line: 1097, column: 24, scope: !6682)
!6731 = !DILocalVariable(name: "lp_nr", scope: !6682, file: !3, line: 1098, type: !1653)
!6732 = !DILocation(line: 1098, column: 7, scope: !6682)
!6733 = !DILocation(line: 1100, column: 24, scope: !6682)
!6734 = !DILocation(line: 1100, column: 13, scope: !6682)
!6735 = !DILocation(line: 1100, column: 11, scope: !6682)
!6736 = !DILocation(line: 1101, column: 23, scope: !6682)
!6737 = !DILocation(line: 1101, column: 9, scope: !6682)
!6738 = !DILocation(line: 1103, column: 26, scope: !6682)
!6739 = !DILocation(line: 1103, column: 10, scope: !6682)
!6740 = !DILocation(line: 1103, column: 8, scope: !6682)
!6741 = !DILocation(line: 1104, column: 26, scope: !6682)
!6742 = !DILocation(line: 1104, column: 10, scope: !6682)
!6743 = !DILocation(line: 1104, column: 8, scope: !6682)
!6744 = !DILocation(line: 1105, column: 39, scope: !6682)
!6745 = !DILocation(line: 1105, column: 23, scope: !6682)
!6746 = !DILocation(line: 1105, column: 9, scope: !6682)
!6747 = !DILocation(line: 1105, column: 7, scope: !6682)
!6748 = !DILocation(line: 1106, column: 15, scope: !6682)
!6749 = !DILocation(line: 1106, column: 13, scope: !6682)
!6750 = !DILocation(line: 1107, column: 28, scope: !6682)
!6751 = !DILocation(line: 1107, column: 3, scope: !6682)
!6752 = !DILocation(line: 1109, column: 9, scope: !6682)
!6753 = !DILocation(line: 1109, column: 7, scope: !6682)
!6754 = !DILocation(line: 1111, column: 15, scope: !6682)
!6755 = !DILocation(line: 1111, column: 13, scope: !6682)
!6756 = !DILocation(line: 1112, column: 28, scope: !6682)
!6757 = !DILocation(line: 1112, column: 3, scope: !6682)
!6758 = !DILocation(line: 1114, column: 43, scope: !6682)
!6759 = !DILocation(line: 1114, column: 49, scope: !6682)
!6760 = !DILocation(line: 1114, column: 15, scope: !6682)
!6761 = !DILocation(line: 1114, column: 13, scope: !6682)
!6762 = !DILocation(line: 1115, column: 28, scope: !6682)
!6763 = !DILocation(line: 1115, column: 3, scope: !6682)
!6764 = !DILocation(line: 1117, column: 29, scope: !6682)
!6765 = !DILocation(line: 1117, column: 16, scope: !6682)
!6766 = !DILocation(line: 1117, column: 14, scope: !6682)
!6767 = !DILocation(line: 1118, column: 27, scope: !6682)
!6768 = !DILocation(line: 1118, column: 39, scope: !6682)
!6769 = !DILocation(line: 1118, column: 52, scope: !6682)
!6770 = !DILocation(line: 1118, column: 3, scope: !6682)
!6771 = !DILocation(line: 1119, column: 28, scope: !6682)
!6772 = !DILocation(line: 1119, column: 3, scope: !6682)
!6773 = !DILocation(line: 1123, column: 23, scope: !6682)
!6774 = !DILocation(line: 1123, column: 32, scope: !6682)
!6775 = !DILocation(line: 1123, column: 10, scope: !6682)
!6776 = !DILocation(line: 1123, column: 8, scope: !6682)
!6777 = !DILocation(line: 1124, column: 14, scope: !6682)
!6778 = !DILocation(line: 1124, column: 20, scope: !6682)
!6779 = !DILocation(line: 1124, column: 12, scope: !6682)
!6780 = !DILocation(line: 1125, column: 21, scope: !6682)
!6781 = !DILocation(line: 1125, column: 3, scope: !6682)
!6782 = !DILocation(line: 1125, column: 13, scope: !6682)
!6783 = !DILocation(line: 1125, column: 19, scope: !6682)
!6784 = !DILocation(line: 1127, column: 23, scope: !6682)
!6785 = !DILocation(line: 1127, column: 33, scope: !6682)
!6786 = !DILocation(line: 1127, column: 10, scope: !6682)
!6787 = !DILocation(line: 1127, column: 8, scope: !6682)
!6788 = !DILocation(line: 1128, column: 14, scope: !6682)
!6789 = !DILocation(line: 1128, column: 20, scope: !6682)
!6790 = !DILocation(line: 1128, column: 12, scope: !6682)
!6791 = !DILocation(line: 1129, column: 21, scope: !6682)
!6792 = !DILocation(line: 1129, column: 27, scope: !6682)
!6793 = !DILocation(line: 1129, column: 25, scope: !6682)
!6794 = !DILocation(line: 1129, column: 3, scope: !6682)
!6795 = !DILocation(line: 1129, column: 13, scope: !6682)
!6796 = !DILocation(line: 1129, column: 19, scope: !6682)
!6797 = !DILocation(line: 1131, column: 23, scope: !6682)
!6798 = !DILocation(line: 1131, column: 33, scope: !6682)
!6799 = !DILocation(line: 1131, column: 10, scope: !6682)
!6800 = !DILocation(line: 1131, column: 8, scope: !6682)
!6801 = !DILocation(line: 1132, column: 13, scope: !6682)
!6802 = !DILocation(line: 1132, column: 19, scope: !6682)
!6803 = !DILocation(line: 1132, column: 11, scope: !6682)
!6804 = !DILocation(line: 1133, column: 20, scope: !6682)
!6805 = !DILocation(line: 1133, column: 3, scope: !6682)
!6806 = !DILocation(line: 1133, column: 12, scope: !6682)
!6807 = !DILocation(line: 1133, column: 18, scope: !6682)
!6808 = !DILocation(line: 1135, column: 18, scope: !6682)
!6809 = !DILocation(line: 1135, column: 24, scope: !6682)
!6810 = !DILocation(line: 1135, column: 30, scope: !6682)
!6811 = !DILocation(line: 1135, column: 48, scope: !6682)
!6812 = !DILocation(line: 1135, column: 3, scope: !6682)
!6813 = !DILocation(line: 1135, column: 9, scope: !6682)
!6814 = !DILocation(line: 1135, column: 15, scope: !6682)
!6815 = !DILocation(line: 1136, column: 23, scope: !6682)
!6816 = !DILocation(line: 1136, column: 3, scope: !6682)
!6817 = !DILocation(line: 1136, column: 9, scope: !6682)
!6818 = !DILocation(line: 1136, column: 21, scope: !6682)
!6819 = !DILocation(line: 1137, column: 17, scope: !6682)
!6820 = !DILocation(line: 1137, column: 3, scope: !6682)
!6821 = !DILocation(line: 1137, column: 9, scope: !6682)
!6822 = !DILocation(line: 1137, column: 15, scope: !6682)
!6823 = !DILocation(line: 1139, column: 21, scope: !6682)
!6824 = !DILocation(line: 1139, column: 30, scope: !6682)
!6825 = !DILocation(line: 1139, column: 10, scope: !6682)
!6826 = !DILocation(line: 1139, column: 8, scope: !6682)
!6827 = !DILocation(line: 1140, column: 42, scope: !6682)
!6828 = !DILocation(line: 1140, column: 40, scope: !6682)
!6829 = !DILocation(line: 1140, column: 3, scope: !6682)
!6830 = !DILocation(line: 1140, column: 9, scope: !6682)
!6831 = !DILocation(line: 1140, column: 21, scope: !6682)
!6832 = !DILocation(line: 1141, column: 17, scope: !6682)
!6833 = !DILocation(line: 1141, column: 23, scope: !6682)
!6834 = !DILocation(line: 1141, column: 21, scope: !6682)
!6835 = !DILocation(line: 1141, column: 3, scope: !6682)
!6836 = !DILocation(line: 1141, column: 9, scope: !6682)
!6837 = !DILocation(line: 1141, column: 15, scope: !6682)
!6838 = !DILocation(line: 1143, column: 16, scope: !6682)
!6839 = !DILocation(line: 1143, column: 3, scope: !6682)
!6840 = !DILocation(line: 1145, column: 21, scope: !6682)
!6841 = !DILocation(line: 1145, column: 31, scope: !6682)
!6842 = !DILocation(line: 1145, column: 10, scope: !6682)
!6843 = !DILocation(line: 1145, column: 8, scope: !6682)
!6844 = !DILocation(line: 1146, column: 3, scope: !6682)
!6845 = !DILocation(line: 1146, column: 9, scope: !6682)
!6846 = !DILocation(line: 1146, column: 21, scope: !6682)
!6847 = !DILocation(line: 1147, column: 17, scope: !6682)
!6848 = !DILocation(line: 1147, column: 3, scope: !6682)
!6849 = !DILocation(line: 1147, column: 9, scope: !6682)
!6850 = !DILocation(line: 1147, column: 15, scope: !6682)
!6851 = !DILocation(line: 1149, column: 3, scope: !6682)
!6852 = !DILocation(line: 1149, column: 9, scope: !6682)
!6853 = !DILocation(line: 1149, column: 21, scope: !6682)
!6854 = !DILocation(line: 1150, column: 17, scope: !6682)
!6855 = !DILocation(line: 1150, column: 23, scope: !6682)
!6856 = !DILocation(line: 1150, column: 21, scope: !6682)
!6857 = !DILocation(line: 1150, column: 3, scope: !6682)
!6858 = !DILocation(line: 1150, column: 9, scope: !6682)
!6859 = !DILocation(line: 1150, column: 15, scope: !6682)
!6860 = !DILocation(line: 1153, column: 30, scope: !6682)
!6861 = !DILocation(line: 1153, column: 11, scope: !6682)
!6862 = !DILocation(line: 1153, column: 9, scope: !6682)
!6863 = !DILocation(line: 1154, column: 7, scope: !6864)
!6864 = distinct !DILexicalBlock(scope: !6682, file: !3, line: 1154, column: 7)
!6865 = !DILocation(line: 1154, column: 13, scope: !6864)
!6866 = !DILocation(line: 1154, column: 7, scope: !6682)
!6867 = !DILocation(line: 1156, column: 31, scope: !6868)
!6868 = distinct !DILexicalBlock(scope: !6869, file: !3, line: 1156, column: 11)
!6869 = distinct !DILexicalBlock(scope: !6864, file: !3, line: 1155, column: 5)
!6870 = !DILocation(line: 1156, column: 11, scope: !6868)
!6871 = !DILocation(line: 1156, column: 11, scope: !6869)
!6872 = !DILocation(line: 1158, column: 23, scope: !6873)
!6873 = distinct !DILexicalBlock(scope: !6868, file: !3, line: 1157, column: 2)
!6874 = !DILocation(line: 1158, column: 35, scope: !6873)
!6875 = !DILocation(line: 1158, column: 4, scope: !6873)
!6876 = !DILocation(line: 1159, column: 19, scope: !6873)
!6877 = !DILocation(line: 1159, column: 4, scope: !6873)
!6878 = !DILocation(line: 1160, column: 2, scope: !6873)
!6879 = !DILocation(line: 1162, column: 7, scope: !6869)
!6880 = !DILocation(line: 1163, column: 22, scope: !6869)
!6881 = !DILocation(line: 1163, column: 7, scope: !6869)
!6882 = !DILocation(line: 1166, column: 35, scope: !6869)
!6883 = !DILocation(line: 1166, column: 7, scope: !6869)
!6884 = !DILocation(line: 1167, column: 5, scope: !6869)
!6885 = !DILocation(line: 1169, column: 10, scope: !6682)
!6886 = !DILocation(line: 1169, column: 3, scope: !6682)
!6887 = distinct !DISubprogram(name: "init_pid_map", scope: !3, file: !3, line: 1054, type: !3010, scopeLine: 1055, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!6888 = !DILocalVariable(name: "n", scope: !6887, file: !3, line: 1056, type: !2925)
!6889 = !DILocation(line: 1056, column: 23, scope: !6887)
!6890 = !DILocation(line: 1058, column: 7, scope: !6891)
!6891 = distinct !DILexicalBlock(scope: !6887, file: !3, line: 1058, column: 7)
!6892 = !DILocation(line: 1058, column: 15, scope: !6891)
!6893 = !DILocation(line: 1058, column: 7, scope: !6887)
!6894 = !DILocation(line: 1059, column: 5, scope: !6891)
!6895 = !DILocation(line: 1061, column: 13, scope: !6887)
!6896 = !DILocation(line: 1061, column: 11, scope: !6887)
!6897 = !DILocation(line: 1063, column: 12, scope: !6898)
!6898 = distinct !DILexicalBlock(scope: !6887, file: !3, line: 1063, column: 3)
!6899 = !DILocation(line: 1063, column: 10, scope: !6898)
!6900 = !DILocation(line: 1063, column: 8, scope: !6898)
!6901 = !DILocation(line: 1063, column: 26, scope: !6902)
!6902 = distinct !DILexicalBlock(scope: !6898, file: !3, line: 1063, column: 3)
!6903 = !DILocation(line: 1063, column: 3, scope: !6898)
!6904 = !DILocation(line: 1065, column: 11, scope: !6905)
!6905 = distinct !DILexicalBlock(scope: !6906, file: !3, line: 1065, column: 11)
!6906 = distinct !DILexicalBlock(scope: !6902, file: !3, line: 1064, column: 5)
!6907 = !DILocation(line: 1065, column: 14, scope: !6905)
!6908 = !DILocation(line: 1065, column: 18, scope: !6905)
!6909 = !DILocation(line: 1065, column: 11, scope: !6906)
!6910 = !DILocation(line: 1066, column: 21, scope: !6905)
!6911 = !DILocation(line: 1066, column: 2, scope: !6905)
!6912 = !DILocation(line: 1066, column: 11, scope: !6905)
!6913 = !DILocation(line: 1066, column: 14, scope: !6905)
!6914 = !DILocation(line: 1066, column: 19, scope: !6905)
!6915 = !DILocation(line: 1067, column: 5, scope: !6906)
!6916 = !DILocation(line: 1063, column: 33, scope: !6902)
!6917 = !DILocation(line: 1063, column: 36, scope: !6902)
!6918 = !DILocation(line: 1063, column: 31, scope: !6902)
!6919 = !DILocation(line: 1063, column: 3, scope: !6902)
!6920 = distinct !{!6920, !6903, !6921}
!6921 = !DILocation(line: 1067, column: 5, scope: !6898)
!6922 = !DILocation(line: 1068, column: 1, scope: !6887)
!6923 = distinct !DISubprogram(name: "gimple_call_set_fndecl", scope: !413, file: !413, line: 1942, type: !6924, scopeLine: 1943, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3178)
!6924 = !DISubroutineType(types: !6925)
!6925 = !{null, !1887, !1557}
!6926 = !DILocalVariable(name: "gs", arg: 1, scope: !6923, file: !413, line: 1942, type: !1887)
!6927 = !DILocation(line: 1942, column: 32, scope: !6923)
!6928 = !DILocalVariable(name: "decl", arg: 2, scope: !6923, file: !413, line: 1942, type: !1557)
!6929 = !DILocation(line: 1942, column: 41, scope: !6923)
!6930 = !DILocation(line: 1945, column: 18, scope: !6923)
!6931 = !DILocation(line: 1945, column: 68, scope: !6923)
!6932 = !DILocation(line: 1945, column: 51, scope: !6923)
!6933 = !DILocation(line: 1945, column: 73, scope: !6923)
!6934 = !DILocation(line: 1945, column: 25, scope: !6923)
!6935 = !DILocation(line: 1945, column: 3, scope: !6923)
!6936 = !DILocation(line: 1946, column: 1, scope: !6923)
