; ModuleID = 'mini-gmp.c'
source_filename = "mini-gmp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.mpn_base_info = type { i32, i64 }
%struct.gmp_div_inverse = type { i32, i64, i64, i64 }
%struct.__mpz_struct = type { i32, i32, i64* }

@mp_bits_per_limb = dso_local constant i32 64, align 4, !dbg !0
@gmp_allocate_func = internal global i8* (i64)* @gmp_default_alloc, align 8, !dbg !44
@gmp_reallocate_func = internal global i8* (i8*, i64, i64)* @gmp_default_realloc, align 8, !dbg !51
@gmp_free_func = internal global void (i8*, i64)* @gmp_default_free, align 8, !dbg !56
@.str = private unnamed_addr constant [23 x i8] c"mpz_powm: Zero modulo.\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"mpz_powm: Negative exponent and non-invertible base.\00", align 1
@.str.2 = private unnamed_addr constant [48 x i8] c"mpz_rootrem: Negative argument, with even root.\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"mpz_rootrem: Zeroth root.\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"0123456789abcdefghijklmnopqrstuvwxyz\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"mpz_import: Nails not supported.\00", align 1
@.str.7 = private unnamed_addr constant [45 x i8] c"gmp_default_alloc: Virtual memory exhausted.\00", align 1
@.str.8 = private unnamed_addr constant [46 x i8] c"gmp_default_realoc: Virtual memory exhausted.\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"mpz_div_qr: Divide by zero.\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.10 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@gmp_detect_endian.i = internal constant i32 2, align 4, !dbg !61

; Function Attrs: noinline nounwind uwtable
define dso_local void @mp_get_memory_functions(i8* (i64)** %alloc_func, i8* (i8*, i64, i64)** %realloc_func, void (i8*, i64)** %free_func) #0 !dbg !72 {
entry:
  %alloc_func.addr = alloca i8* (i64)**, align 8
  %realloc_func.addr = alloca i8* (i8*, i64, i64)**, align 8
  %free_func.addr = alloca void (i8*, i64)**, align 8
  store i8* (i64)** %alloc_func, i8* (i64)*** %alloc_func.addr, align 8
  call void @llvm.dbg.declare(metadata i8* (i64)*** %alloc_func.addr, metadata !78, metadata !DIExpression()), !dbg !79
  store i8* (i8*, i64, i64)** %realloc_func, i8* (i8*, i64, i64)*** %realloc_func.addr, align 8
  call void @llvm.dbg.declare(metadata i8* (i8*, i64, i64)*** %realloc_func.addr, metadata !80, metadata !DIExpression()), !dbg !81
  store void (i8*, i64)** %free_func, void (i8*, i64)*** %free_func.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i64)*** %free_func.addr, metadata !82, metadata !DIExpression()), !dbg !83
  %0 = load i8* (i64)**, i8* (i64)*** %alloc_func.addr, align 8, !dbg !84
  %tobool = icmp ne i8* (i64)** %0, null, !dbg !84
  br i1 %tobool, label %if.then, label %if.end, !dbg !86

if.then:                                          ; preds = %entry
  %1 = load i8* (i64)*, i8* (i64)** @gmp_allocate_func, align 8, !dbg !87
  %2 = load i8* (i64)**, i8* (i64)*** %alloc_func.addr, align 8, !dbg !88
  store i8* (i64)* %1, i8* (i64)** %2, align 8, !dbg !89
  br label %if.end, !dbg !90

if.end:                                           ; preds = %if.then, %entry
  %3 = load i8* (i8*, i64, i64)**, i8* (i8*, i64, i64)*** %realloc_func.addr, align 8, !dbg !91
  %tobool1 = icmp ne i8* (i8*, i64, i64)** %3, null, !dbg !91
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !93

if.then2:                                         ; preds = %if.end
  %4 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** @gmp_reallocate_func, align 8, !dbg !94
  %5 = load i8* (i8*, i64, i64)**, i8* (i8*, i64, i64)*** %realloc_func.addr, align 8, !dbg !95
  store i8* (i8*, i64, i64)* %4, i8* (i8*, i64, i64)** %5, align 8, !dbg !96
  br label %if.end3, !dbg !97

if.end3:                                          ; preds = %if.then2, %if.end
  %6 = load void (i8*, i64)**, void (i8*, i64)*** %free_func.addr, align 8, !dbg !98
  %tobool4 = icmp ne void (i8*, i64)** %6, null, !dbg !98
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !100

if.then5:                                         ; preds = %if.end3
  %7 = load void (i8*, i64)*, void (i8*, i64)** @gmp_free_func, align 8, !dbg !101
  %8 = load void (i8*, i64)**, void (i8*, i64)*** %free_func.addr, align 8, !dbg !102
  store void (i8*, i64)* %7, void (i8*, i64)** %8, align 8, !dbg !103
  br label %if.end6, !dbg !104

if.end6:                                          ; preds = %if.then5, %if.end3
  ret void, !dbg !105
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @mp_set_memory_functions(i8* (i64)* %alloc_func, i8* (i8*, i64, i64)* %realloc_func, void (i8*, i64)* %free_func) #0 !dbg !106 {
entry:
  %alloc_func.addr = alloca i8* (i64)*, align 8
  %realloc_func.addr = alloca i8* (i8*, i64, i64)*, align 8
  %free_func.addr = alloca void (i8*, i64)*, align 8
  store i8* (i64)* %alloc_func, i8* (i64)** %alloc_func.addr, align 8
  call void @llvm.dbg.declare(metadata i8* (i64)** %alloc_func.addr, metadata !109, metadata !DIExpression()), !dbg !110
  store i8* (i8*, i64, i64)* %realloc_func, i8* (i8*, i64, i64)** %realloc_func.addr, align 8
  call void @llvm.dbg.declare(metadata i8* (i8*, i64, i64)** %realloc_func.addr, metadata !111, metadata !DIExpression()), !dbg !112
  store void (i8*, i64)* %free_func, void (i8*, i64)** %free_func.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i64)** %free_func.addr, metadata !113, metadata !DIExpression()), !dbg !114
  %0 = load i8* (i64)*, i8* (i64)** %alloc_func.addr, align 8, !dbg !115
  %tobool = icmp ne i8* (i64)* %0, null, !dbg !115
  br i1 %tobool, label %if.end, label %if.then, !dbg !117

if.then:                                          ; preds = %entry
  store i8* (i64)* @gmp_default_alloc, i8* (i64)** %alloc_func.addr, align 8, !dbg !118
  br label %if.end, !dbg !119

if.end:                                           ; preds = %if.then, %entry
  %1 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %realloc_func.addr, align 8, !dbg !120
  %tobool1 = icmp ne i8* (i8*, i64, i64)* %1, null, !dbg !120
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !122

if.then2:                                         ; preds = %if.end
  store i8* (i8*, i64, i64)* @gmp_default_realloc, i8* (i8*, i64, i64)** %realloc_func.addr, align 8, !dbg !123
  br label %if.end3, !dbg !124

if.end3:                                          ; preds = %if.then2, %if.end
  %2 = load void (i8*, i64)*, void (i8*, i64)** %free_func.addr, align 8, !dbg !125
  %tobool4 = icmp ne void (i8*, i64)* %2, null, !dbg !125
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !127

if.then5:                                         ; preds = %if.end3
  store void (i8*, i64)* @gmp_default_free, void (i8*, i64)** %free_func.addr, align 8, !dbg !128
  br label %if.end6, !dbg !129

if.end6:                                          ; preds = %if.then5, %if.end3
  %3 = load i8* (i64)*, i8* (i64)** %alloc_func.addr, align 8, !dbg !130
  store i8* (i64)* %3, i8* (i64)** @gmp_allocate_func, align 8, !dbg !131
  %4 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %realloc_func.addr, align 8, !dbg !132
  store i8* (i8*, i64, i64)* %4, i8* (i8*, i64, i64)** @gmp_reallocate_func, align 8, !dbg !133
  %5 = load void (i8*, i64)*, void (i8*, i64)** %free_func.addr, align 8, !dbg !134
  store void (i8*, i64)* %5, void (i8*, i64)** @gmp_free_func, align 8, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @gmp_default_alloc(i64 %size) #0 !dbg !137 {
entry:
  %size.addr = alloca i64, align 8
  %p = alloca i8*, align 8
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !138, metadata !DIExpression()), !dbg !139
  call void @llvm.dbg.declare(metadata i8** %p, metadata !140, metadata !DIExpression()), !dbg !141
  %0 = load i64, i64* %size.addr, align 8, !dbg !142
  %call = call noalias i8* @malloc(i64 %0) #7, !dbg !143
  store i8* %call, i8** %p, align 8, !dbg !144
  %1 = load i8*, i8** %p, align 8, !dbg !145
  %tobool = icmp ne i8* %1, null, !dbg !145
  br i1 %tobool, label %if.end, label %if.then, !dbg !147

if.then:                                          ; preds = %entry
  call void @gmp_die(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.7, i64 0, i64 0)), !dbg !148
  br label %if.end, !dbg !148

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8*, i8** %p, align 8, !dbg !149
  ret i8* %2, !dbg !150
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @gmp_default_realloc(i8* %old, i64 %old_size, i64 %new_size) #0 !dbg !151 {
entry:
  %old.addr = alloca i8*, align 8
  %old_size.addr = alloca i64, align 8
  %new_size.addr = alloca i64, align 8
  %p = alloca i64*, align 8
  store i8* %old, i8** %old.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %old.addr, metadata !152, metadata !DIExpression()), !dbg !153
  store i64 %old_size, i64* %old_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %old_size.addr, metadata !154, metadata !DIExpression()), !dbg !155
  store i64 %new_size, i64* %new_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %new_size.addr, metadata !156, metadata !DIExpression()), !dbg !157
  call void @llvm.dbg.declare(metadata i64** %p, metadata !158, metadata !DIExpression()), !dbg !159
  %0 = load i8*, i8** %old.addr, align 8, !dbg !160
  %1 = load i64, i64* %new_size.addr, align 8, !dbg !161
  %call = call i8* @realloc(i8* %0, i64 %1) #7, !dbg !162
  %2 = bitcast i8* %call to i64*, !dbg !162
  store i64* %2, i64** %p, align 8, !dbg !163
  %3 = load i64*, i64** %p, align 8, !dbg !164
  %tobool = icmp ne i64* %3, null, !dbg !164
  br i1 %tobool, label %if.end, label %if.then, !dbg !166

if.then:                                          ; preds = %entry
  call void @gmp_die(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.8, i64 0, i64 0)), !dbg !167
  br label %if.end, !dbg !167

if.end:                                           ; preds = %if.then, %entry
  %4 = load i64*, i64** %p, align 8, !dbg !168
  %5 = bitcast i64* %4 to i8*, !dbg !168
  ret i8* %5, !dbg !169
}

; Function Attrs: noinline nounwind uwtable
define internal void @gmp_default_free(i8* %p, i64 %size) #0 !dbg !170 {
entry:
  %p.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !171, metadata !DIExpression()), !dbg !172
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !173, metadata !DIExpression()), !dbg !174
  %0 = load i8*, i8** %p.addr, align 8, !dbg !175
  call void @free(i8* %0) #7, !dbg !176
  ret void, !dbg !177
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpn_copyi(i64* %d, i64* %s, i64 %n) #0 !dbg !178 {
entry:
  %d.addr = alloca i64*, align 8
  %s.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i64* %d, i64** %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %d.addr, metadata !185, metadata !DIExpression()), !dbg !186
  store i64* %s, i64** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %s.addr, metadata !187, metadata !DIExpression()), !dbg !188
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !189, metadata !DIExpression()), !dbg !190
  call void @llvm.dbg.declare(metadata i64* %i, metadata !191, metadata !DIExpression()), !dbg !192
  store i64 0, i64* %i, align 8, !dbg !193
  br label %for.cond, !dbg !195

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8, !dbg !196
  %1 = load i64, i64* %n.addr, align 8, !dbg !198
  %cmp = icmp slt i64 %0, %1, !dbg !199
  br i1 %cmp, label %for.body, label %for.end, !dbg !200

for.body:                                         ; preds = %for.cond
  %2 = load i64*, i64** %s.addr, align 8, !dbg !201
  %3 = load i64, i64* %i, align 8, !dbg !202
  %arrayidx = getelementptr inbounds i64, i64* %2, i64 %3, !dbg !201
  %4 = load i64, i64* %arrayidx, align 8, !dbg !201
  %5 = load i64*, i64** %d.addr, align 8, !dbg !203
  %6 = load i64, i64* %i, align 8, !dbg !204
  %arrayidx1 = getelementptr inbounds i64, i64* %5, i64 %6, !dbg !203
  store i64 %4, i64* %arrayidx1, align 8, !dbg !205
  br label %for.inc, !dbg !203

for.inc:                                          ; preds = %for.body
  %7 = load i64, i64* %i, align 8, !dbg !206
  %inc = add nsw i64 %7, 1, !dbg !206
  store i64 %inc, i64* %i, align 8, !dbg !206
  br label %for.cond, !dbg !207, !llvm.loop !208

for.end:                                          ; preds = %for.cond
  ret void, !dbg !210
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpn_copyd(i64* %d, i64* %s, i64 %n) #0 !dbg !211 {
entry:
  %d.addr = alloca i64*, align 8
  %s.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  store i64* %d, i64** %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %d.addr, metadata !212, metadata !DIExpression()), !dbg !213
  store i64* %s, i64** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %s.addr, metadata !214, metadata !DIExpression()), !dbg !215
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !216, metadata !DIExpression()), !dbg !217
  br label %while.cond, !dbg !218

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i64, i64* %n.addr, align 8, !dbg !219
  %dec = add nsw i64 %0, -1, !dbg !219
  store i64 %dec, i64* %n.addr, align 8, !dbg !219
  %cmp = icmp sgt i64 %0, 0, !dbg !220
  br i1 %cmp, label %while.body, label %while.end, !dbg !218

while.body:                                       ; preds = %while.cond
  %1 = load i64*, i64** %s.addr, align 8, !dbg !221
  %2 = load i64, i64* %n.addr, align 8, !dbg !222
  %arrayidx = getelementptr inbounds i64, i64* %1, i64 %2, !dbg !221
  %3 = load i64, i64* %arrayidx, align 8, !dbg !221
  %4 = load i64*, i64** %d.addr, align 8, !dbg !223
  %5 = load i64, i64* %n.addr, align 8, !dbg !224
  %arrayidx1 = getelementptr inbounds i64, i64* %4, i64 %5, !dbg !223
  store i64 %3, i64* %arrayidx1, align 8, !dbg !225
  br label %while.cond, !dbg !218, !llvm.loop !226

while.end:                                        ; preds = %while.cond
  ret void, !dbg !228
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpn_cmp(i64* %ap, i64* %bp, i64 %n) #0 !dbg !229 {
entry:
  %retval = alloca i32, align 4
  %ap.addr = alloca i64*, align 8
  %bp.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  store i64* %ap, i64** %ap.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %ap.addr, metadata !232, metadata !DIExpression()), !dbg !233
  store i64* %bp, i64** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %bp.addr, metadata !234, metadata !DIExpression()), !dbg !235
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !236, metadata !DIExpression()), !dbg !237
  br label %while.cond, !dbg !238

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i64, i64* %n.addr, align 8, !dbg !239
  %dec = add nsw i64 %0, -1, !dbg !239
  store i64 %dec, i64* %n.addr, align 8, !dbg !239
  %cmp = icmp sge i64 %dec, 0, !dbg !240
  br i1 %cmp, label %while.body, label %while.end, !dbg !238

while.body:                                       ; preds = %while.cond
  %1 = load i64*, i64** %ap.addr, align 8, !dbg !241
  %2 = load i64, i64* %n.addr, align 8, !dbg !244
  %arrayidx = getelementptr inbounds i64, i64* %1, i64 %2, !dbg !241
  %3 = load i64, i64* %arrayidx, align 8, !dbg !241
  %4 = load i64*, i64** %bp.addr, align 8, !dbg !245
  %5 = load i64, i64* %n.addr, align 8, !dbg !246
  %arrayidx1 = getelementptr inbounds i64, i64* %4, i64 %5, !dbg !245
  %6 = load i64, i64* %arrayidx1, align 8, !dbg !245
  %cmp2 = icmp ne i64 %3, %6, !dbg !247
  br i1 %cmp2, label %if.then, label %if.end, !dbg !248

if.then:                                          ; preds = %while.body
  %7 = load i64*, i64** %ap.addr, align 8, !dbg !249
  %8 = load i64, i64* %n.addr, align 8, !dbg !250
  %arrayidx3 = getelementptr inbounds i64, i64* %7, i64 %8, !dbg !249
  %9 = load i64, i64* %arrayidx3, align 8, !dbg !249
  %10 = load i64*, i64** %bp.addr, align 8, !dbg !251
  %11 = load i64, i64* %n.addr, align 8, !dbg !252
  %arrayidx4 = getelementptr inbounds i64, i64* %10, i64 %11, !dbg !251
  %12 = load i64, i64* %arrayidx4, align 8, !dbg !251
  %cmp5 = icmp ugt i64 %9, %12, !dbg !253
  %13 = zext i1 %cmp5 to i64, !dbg !249
  %cond = select i1 %cmp5, i32 1, i32 -1, !dbg !249
  store i32 %cond, i32* %retval, align 4, !dbg !254
  br label %return, !dbg !254

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !238, !llvm.loop !255

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4, !dbg !257
  br label %return, !dbg !257

return:                                           ; preds = %while.end, %if.then
  %14 = load i32, i32* %retval, align 4, !dbg !258
  ret i32 %14, !dbg !258
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpn_zero(i64* %rp, i64 %n) #0 !dbg !259 {
entry:
  %rp.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !262, metadata !DIExpression()), !dbg !263
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !264, metadata !DIExpression()), !dbg !265
  call void @llvm.dbg.declare(metadata i64* %i, metadata !266, metadata !DIExpression()), !dbg !267
  store i64 0, i64* %i, align 8, !dbg !268
  br label %for.cond, !dbg !270

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8, !dbg !271
  %1 = load i64, i64* %n.addr, align 8, !dbg !273
  %cmp = icmp slt i64 %0, %1, !dbg !274
  br i1 %cmp, label %for.body, label %for.end, !dbg !275

for.body:                                         ; preds = %for.cond
  %2 = load i64*, i64** %rp.addr, align 8, !dbg !276
  %3 = load i64, i64* %i, align 8, !dbg !277
  %arrayidx = getelementptr inbounds i64, i64* %2, i64 %3, !dbg !276
  store i64 0, i64* %arrayidx, align 8, !dbg !278
  br label %for.inc, !dbg !276

for.inc:                                          ; preds = %for.body
  %4 = load i64, i64* %i, align 8, !dbg !279
  %inc = add nsw i64 %4, 1, !dbg !279
  store i64 %inc, i64* %i, align 8, !dbg !279
  br label %for.cond, !dbg !280, !llvm.loop !281

for.end:                                          ; preds = %for.cond
  ret void, !dbg !283
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_add_1(i64* %rp, i64* %ap, i64 %n, i64 %b) #0 !dbg !284 {
entry:
  %rp.addr = alloca i64*, align 8
  %ap.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %r = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !287, metadata !DIExpression()), !dbg !288
  store i64* %ap, i64** %ap.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %ap.addr, metadata !289, metadata !DIExpression()), !dbg !290
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !291, metadata !DIExpression()), !dbg !292
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !293, metadata !DIExpression()), !dbg !294
  call void @llvm.dbg.declare(metadata i64* %i, metadata !295, metadata !DIExpression()), !dbg !296
  store i64 0, i64* %i, align 8, !dbg !297
  br label %do.body, !dbg !298

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata i64* %r, metadata !299, metadata !DIExpression()), !dbg !301
  %0 = load i64*, i64** %ap.addr, align 8, !dbg !302
  %1 = load i64, i64* %i, align 8, !dbg !303
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 %1, !dbg !302
  %2 = load i64, i64* %arrayidx, align 8, !dbg !302
  %3 = load i64, i64* %b.addr, align 8, !dbg !304
  %add = add i64 %2, %3, !dbg !305
  store i64 %add, i64* %r, align 8, !dbg !301
  %4 = load i64, i64* %r, align 8, !dbg !306
  %5 = load i64, i64* %b.addr, align 8, !dbg !307
  %cmp = icmp ult i64 %4, %5, !dbg !308
  %conv = zext i1 %cmp to i32, !dbg !308
  %conv1 = sext i32 %conv to i64, !dbg !309
  store i64 %conv1, i64* %b.addr, align 8, !dbg !310
  %6 = load i64, i64* %r, align 8, !dbg !311
  %7 = load i64*, i64** %rp.addr, align 8, !dbg !312
  %8 = load i64, i64* %i, align 8, !dbg !313
  %arrayidx2 = getelementptr inbounds i64, i64* %7, i64 %8, !dbg !312
  store i64 %6, i64* %arrayidx2, align 8, !dbg !314
  br label %do.cond, !dbg !315

do.cond:                                          ; preds = %do.body
  %9 = load i64, i64* %i, align 8, !dbg !316
  %inc = add nsw i64 %9, 1, !dbg !316
  store i64 %inc, i64* %i, align 8, !dbg !316
  %10 = load i64, i64* %n.addr, align 8, !dbg !317
  %cmp3 = icmp slt i64 %inc, %10, !dbg !318
  br i1 %cmp3, label %do.body, label %do.end, !dbg !315, !llvm.loop !319

do.end:                                           ; preds = %do.cond
  %11 = load i64, i64* %b.addr, align 8, !dbg !321
  ret i64 %11, !dbg !322
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_add_n(i64* %rp, i64* %ap, i64* %bp, i64 %n) #0 !dbg !323 {
entry:
  %rp.addr = alloca i64*, align 8
  %ap.addr = alloca i64*, align 8
  %bp.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %cy = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %r = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !326, metadata !DIExpression()), !dbg !327
  store i64* %ap, i64** %ap.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %ap.addr, metadata !328, metadata !DIExpression()), !dbg !329
  store i64* %bp, i64** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %bp.addr, metadata !330, metadata !DIExpression()), !dbg !331
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !332, metadata !DIExpression()), !dbg !333
  call void @llvm.dbg.declare(metadata i64* %i, metadata !334, metadata !DIExpression()), !dbg !335
  call void @llvm.dbg.declare(metadata i64* %cy, metadata !336, metadata !DIExpression()), !dbg !337
  store i64 0, i64* %i, align 8, !dbg !338
  store i64 0, i64* %cy, align 8, !dbg !340
  br label %for.cond, !dbg !341

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8, !dbg !342
  %1 = load i64, i64* %n.addr, align 8, !dbg !344
  %cmp = icmp slt i64 %0, %1, !dbg !345
  br i1 %cmp, label %for.body, label %for.end, !dbg !346

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %a, metadata !347, metadata !DIExpression()), !dbg !349
  call void @llvm.dbg.declare(metadata i64* %b, metadata !350, metadata !DIExpression()), !dbg !351
  call void @llvm.dbg.declare(metadata i64* %r, metadata !352, metadata !DIExpression()), !dbg !353
  %2 = load i64*, i64** %ap.addr, align 8, !dbg !354
  %3 = load i64, i64* %i, align 8, !dbg !355
  %arrayidx = getelementptr inbounds i64, i64* %2, i64 %3, !dbg !354
  %4 = load i64, i64* %arrayidx, align 8, !dbg !354
  store i64 %4, i64* %a, align 8, !dbg !356
  %5 = load i64*, i64** %bp.addr, align 8, !dbg !357
  %6 = load i64, i64* %i, align 8, !dbg !358
  %arrayidx1 = getelementptr inbounds i64, i64* %5, i64 %6, !dbg !357
  %7 = load i64, i64* %arrayidx1, align 8, !dbg !357
  store i64 %7, i64* %b, align 8, !dbg !359
  %8 = load i64, i64* %a, align 8, !dbg !360
  %9 = load i64, i64* %cy, align 8, !dbg !361
  %add = add i64 %8, %9, !dbg !362
  store i64 %add, i64* %r, align 8, !dbg !363
  %10 = load i64, i64* %r, align 8, !dbg !364
  %11 = load i64, i64* %cy, align 8, !dbg !365
  %cmp2 = icmp ult i64 %10, %11, !dbg !366
  %conv = zext i1 %cmp2 to i32, !dbg !366
  %conv3 = sext i32 %conv to i64, !dbg !367
  store i64 %conv3, i64* %cy, align 8, !dbg !368
  %12 = load i64, i64* %b, align 8, !dbg !369
  %13 = load i64, i64* %r, align 8, !dbg !370
  %add4 = add i64 %13, %12, !dbg !370
  store i64 %add4, i64* %r, align 8, !dbg !370
  %14 = load i64, i64* %r, align 8, !dbg !371
  %15 = load i64, i64* %b, align 8, !dbg !372
  %cmp5 = icmp ult i64 %14, %15, !dbg !373
  %conv6 = zext i1 %cmp5 to i32, !dbg !373
  %conv7 = sext i32 %conv6 to i64, !dbg !374
  %16 = load i64, i64* %cy, align 8, !dbg !375
  %add8 = add i64 %16, %conv7, !dbg !375
  store i64 %add8, i64* %cy, align 8, !dbg !375
  %17 = load i64, i64* %r, align 8, !dbg !376
  %18 = load i64*, i64** %rp.addr, align 8, !dbg !377
  %19 = load i64, i64* %i, align 8, !dbg !378
  %arrayidx9 = getelementptr inbounds i64, i64* %18, i64 %19, !dbg !377
  store i64 %17, i64* %arrayidx9, align 8, !dbg !379
  br label %for.inc, !dbg !380

for.inc:                                          ; preds = %for.body
  %20 = load i64, i64* %i, align 8, !dbg !381
  %inc = add nsw i64 %20, 1, !dbg !381
  store i64 %inc, i64* %i, align 8, !dbg !381
  br label %for.cond, !dbg !382, !llvm.loop !383

for.end:                                          ; preds = %for.cond
  %21 = load i64, i64* %cy, align 8, !dbg !385
  ret i64 %21, !dbg !386
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_add(i64* %rp, i64* %ap, i64 %an, i64* %bp, i64 %bn) #0 !dbg !387 {
entry:
  %rp.addr = alloca i64*, align 8
  %ap.addr = alloca i64*, align 8
  %an.addr = alloca i64, align 8
  %bp.addr = alloca i64*, align 8
  %bn.addr = alloca i64, align 8
  %cy = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !390, metadata !DIExpression()), !dbg !391
  store i64* %ap, i64** %ap.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %ap.addr, metadata !392, metadata !DIExpression()), !dbg !393
  store i64 %an, i64* %an.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %an.addr, metadata !394, metadata !DIExpression()), !dbg !395
  store i64* %bp, i64** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %bp.addr, metadata !396, metadata !DIExpression()), !dbg !397
  store i64 %bn, i64* %bn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bn.addr, metadata !398, metadata !DIExpression()), !dbg !399
  call void @llvm.dbg.declare(metadata i64* %cy, metadata !400, metadata !DIExpression()), !dbg !401
  %0 = load i64*, i64** %rp.addr, align 8, !dbg !402
  %1 = load i64*, i64** %ap.addr, align 8, !dbg !403
  %2 = load i64*, i64** %bp.addr, align 8, !dbg !404
  %3 = load i64, i64* %bn.addr, align 8, !dbg !405
  %call = call i64 @mpn_add_n(i64* %0, i64* %1, i64* %2, i64 %3), !dbg !406
  store i64 %call, i64* %cy, align 8, !dbg !407
  %4 = load i64, i64* %an.addr, align 8, !dbg !408
  %5 = load i64, i64* %bn.addr, align 8, !dbg !410
  %cmp = icmp sgt i64 %4, %5, !dbg !411
  br i1 %cmp, label %if.then, label %if.end, !dbg !412

if.then:                                          ; preds = %entry
  %6 = load i64*, i64** %rp.addr, align 8, !dbg !413
  %7 = load i64, i64* %bn.addr, align 8, !dbg !414
  %add.ptr = getelementptr inbounds i64, i64* %6, i64 %7, !dbg !415
  %8 = load i64*, i64** %ap.addr, align 8, !dbg !416
  %9 = load i64, i64* %bn.addr, align 8, !dbg !417
  %add.ptr1 = getelementptr inbounds i64, i64* %8, i64 %9, !dbg !418
  %10 = load i64, i64* %an.addr, align 8, !dbg !419
  %11 = load i64, i64* %bn.addr, align 8, !dbg !420
  %sub = sub nsw i64 %10, %11, !dbg !421
  %12 = load i64, i64* %cy, align 8, !dbg !422
  %call2 = call i64 @mpn_add_1(i64* %add.ptr, i64* %add.ptr1, i64 %sub, i64 %12), !dbg !423
  store i64 %call2, i64* %cy, align 8, !dbg !424
  br label %if.end, !dbg !425

if.end:                                           ; preds = %if.then, %entry
  %13 = load i64, i64* %cy, align 8, !dbg !426
  ret i64 %13, !dbg !427
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_sub_1(i64* %rp, i64* %ap, i64 %n, i64 %b) #0 !dbg !428 {
entry:
  %rp.addr = alloca i64*, align 8
  %ap.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %a = alloca i64, align 8
  %cy = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !429, metadata !DIExpression()), !dbg !430
  store i64* %ap, i64** %ap.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %ap.addr, metadata !431, metadata !DIExpression()), !dbg !432
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !433, metadata !DIExpression()), !dbg !434
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !435, metadata !DIExpression()), !dbg !436
  call void @llvm.dbg.declare(metadata i64* %i, metadata !437, metadata !DIExpression()), !dbg !438
  store i64 0, i64* %i, align 8, !dbg !439
  br label %do.body, !dbg !440

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata i64* %a, metadata !441, metadata !DIExpression()), !dbg !443
  %0 = load i64*, i64** %ap.addr, align 8, !dbg !444
  %1 = load i64, i64* %i, align 8, !dbg !445
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 %1, !dbg !444
  %2 = load i64, i64* %arrayidx, align 8, !dbg !444
  store i64 %2, i64* %a, align 8, !dbg !443
  call void @llvm.dbg.declare(metadata i64* %cy, metadata !446, metadata !DIExpression()), !dbg !447
  %3 = load i64, i64* %a, align 8, !dbg !448
  %4 = load i64, i64* %b.addr, align 8, !dbg !449
  %cmp = icmp ult i64 %3, %4, !dbg !450
  %conv = zext i1 %cmp to i32, !dbg !450
  %conv1 = sext i32 %conv to i64, !dbg !448
  store i64 %conv1, i64* %cy, align 8, !dbg !447
  %5 = load i64, i64* %a, align 8, !dbg !451
  %6 = load i64, i64* %b.addr, align 8, !dbg !452
  %sub = sub i64 %5, %6, !dbg !453
  %7 = load i64*, i64** %rp.addr, align 8, !dbg !454
  %8 = load i64, i64* %i, align 8, !dbg !455
  %arrayidx2 = getelementptr inbounds i64, i64* %7, i64 %8, !dbg !454
  store i64 %sub, i64* %arrayidx2, align 8, !dbg !456
  %9 = load i64, i64* %cy, align 8, !dbg !457
  store i64 %9, i64* %b.addr, align 8, !dbg !458
  br label %do.cond, !dbg !459

do.cond:                                          ; preds = %do.body
  %10 = load i64, i64* %i, align 8, !dbg !460
  %inc = add nsw i64 %10, 1, !dbg !460
  store i64 %inc, i64* %i, align 8, !dbg !460
  %11 = load i64, i64* %n.addr, align 8, !dbg !461
  %cmp3 = icmp slt i64 %inc, %11, !dbg !462
  br i1 %cmp3, label %do.body, label %do.end, !dbg !459, !llvm.loop !463

do.end:                                           ; preds = %do.cond
  %12 = load i64, i64* %b.addr, align 8, !dbg !465
  ret i64 %12, !dbg !466
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_sub_n(i64* %rp, i64* %ap, i64* %bp, i64 %n) #0 !dbg !467 {
entry:
  %rp.addr = alloca i64*, align 8
  %ap.addr = alloca i64*, align 8
  %bp.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %cy = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !468, metadata !DIExpression()), !dbg !469
  store i64* %ap, i64** %ap.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %ap.addr, metadata !470, metadata !DIExpression()), !dbg !471
  store i64* %bp, i64** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %bp.addr, metadata !472, metadata !DIExpression()), !dbg !473
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !474, metadata !DIExpression()), !dbg !475
  call void @llvm.dbg.declare(metadata i64* %i, metadata !476, metadata !DIExpression()), !dbg !477
  call void @llvm.dbg.declare(metadata i64* %cy, metadata !478, metadata !DIExpression()), !dbg !479
  store i64 0, i64* %i, align 8, !dbg !480
  store i64 0, i64* %cy, align 8, !dbg !482
  br label %for.cond, !dbg !483

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8, !dbg !484
  %1 = load i64, i64* %n.addr, align 8, !dbg !486
  %cmp = icmp slt i64 %0, %1, !dbg !487
  br i1 %cmp, label %for.body, label %for.end, !dbg !488

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %a, metadata !489, metadata !DIExpression()), !dbg !491
  call void @llvm.dbg.declare(metadata i64* %b, metadata !492, metadata !DIExpression()), !dbg !493
  %2 = load i64*, i64** %ap.addr, align 8, !dbg !494
  %3 = load i64, i64* %i, align 8, !dbg !495
  %arrayidx = getelementptr inbounds i64, i64* %2, i64 %3, !dbg !494
  %4 = load i64, i64* %arrayidx, align 8, !dbg !494
  store i64 %4, i64* %a, align 8, !dbg !496
  %5 = load i64*, i64** %bp.addr, align 8, !dbg !497
  %6 = load i64, i64* %i, align 8, !dbg !498
  %arrayidx1 = getelementptr inbounds i64, i64* %5, i64 %6, !dbg !497
  %7 = load i64, i64* %arrayidx1, align 8, !dbg !497
  store i64 %7, i64* %b, align 8, !dbg !499
  %8 = load i64, i64* %cy, align 8, !dbg !500
  %9 = load i64, i64* %b, align 8, !dbg !501
  %add = add i64 %9, %8, !dbg !501
  store i64 %add, i64* %b, align 8, !dbg !501
  %10 = load i64, i64* %b, align 8, !dbg !502
  %11 = load i64, i64* %cy, align 8, !dbg !503
  %cmp2 = icmp ult i64 %10, %11, !dbg !504
  %conv = zext i1 %cmp2 to i32, !dbg !504
  %conv3 = sext i32 %conv to i64, !dbg !505
  store i64 %conv3, i64* %cy, align 8, !dbg !506
  %12 = load i64, i64* %a, align 8, !dbg !507
  %13 = load i64, i64* %b, align 8, !dbg !508
  %cmp4 = icmp ult i64 %12, %13, !dbg !509
  %conv5 = zext i1 %cmp4 to i32, !dbg !509
  %conv6 = sext i32 %conv5 to i64, !dbg !510
  %14 = load i64, i64* %cy, align 8, !dbg !511
  %add7 = add i64 %14, %conv6, !dbg !511
  store i64 %add7, i64* %cy, align 8, !dbg !511
  %15 = load i64, i64* %a, align 8, !dbg !512
  %16 = load i64, i64* %b, align 8, !dbg !513
  %sub = sub i64 %15, %16, !dbg !514
  %17 = load i64*, i64** %rp.addr, align 8, !dbg !515
  %18 = load i64, i64* %i, align 8, !dbg !516
  %arrayidx8 = getelementptr inbounds i64, i64* %17, i64 %18, !dbg !515
  store i64 %sub, i64* %arrayidx8, align 8, !dbg !517
  br label %for.inc, !dbg !518

for.inc:                                          ; preds = %for.body
  %19 = load i64, i64* %i, align 8, !dbg !519
  %inc = add nsw i64 %19, 1, !dbg !519
  store i64 %inc, i64* %i, align 8, !dbg !519
  br label %for.cond, !dbg !520, !llvm.loop !521

for.end:                                          ; preds = %for.cond
  %20 = load i64, i64* %cy, align 8, !dbg !523
  ret i64 %20, !dbg !524
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_sub(i64* %rp, i64* %ap, i64 %an, i64* %bp, i64 %bn) #0 !dbg !525 {
entry:
  %rp.addr = alloca i64*, align 8
  %ap.addr = alloca i64*, align 8
  %an.addr = alloca i64, align 8
  %bp.addr = alloca i64*, align 8
  %bn.addr = alloca i64, align 8
  %cy = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !526, metadata !DIExpression()), !dbg !527
  store i64* %ap, i64** %ap.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %ap.addr, metadata !528, metadata !DIExpression()), !dbg !529
  store i64 %an, i64* %an.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %an.addr, metadata !530, metadata !DIExpression()), !dbg !531
  store i64* %bp, i64** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %bp.addr, metadata !532, metadata !DIExpression()), !dbg !533
  store i64 %bn, i64* %bn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bn.addr, metadata !534, metadata !DIExpression()), !dbg !535
  call void @llvm.dbg.declare(metadata i64* %cy, metadata !536, metadata !DIExpression()), !dbg !537
  %0 = load i64*, i64** %rp.addr, align 8, !dbg !538
  %1 = load i64*, i64** %ap.addr, align 8, !dbg !539
  %2 = load i64*, i64** %bp.addr, align 8, !dbg !540
  %3 = load i64, i64* %bn.addr, align 8, !dbg !541
  %call = call i64 @mpn_sub_n(i64* %0, i64* %1, i64* %2, i64 %3), !dbg !542
  store i64 %call, i64* %cy, align 8, !dbg !543
  %4 = load i64, i64* %an.addr, align 8, !dbg !544
  %5 = load i64, i64* %bn.addr, align 8, !dbg !546
  %cmp = icmp sgt i64 %4, %5, !dbg !547
  br i1 %cmp, label %if.then, label %if.end, !dbg !548

if.then:                                          ; preds = %entry
  %6 = load i64*, i64** %rp.addr, align 8, !dbg !549
  %7 = load i64, i64* %bn.addr, align 8, !dbg !550
  %add.ptr = getelementptr inbounds i64, i64* %6, i64 %7, !dbg !551
  %8 = load i64*, i64** %ap.addr, align 8, !dbg !552
  %9 = load i64, i64* %bn.addr, align 8, !dbg !553
  %add.ptr1 = getelementptr inbounds i64, i64* %8, i64 %9, !dbg !554
  %10 = load i64, i64* %an.addr, align 8, !dbg !555
  %11 = load i64, i64* %bn.addr, align 8, !dbg !556
  %sub = sub nsw i64 %10, %11, !dbg !557
  %12 = load i64, i64* %cy, align 8, !dbg !558
  %call2 = call i64 @mpn_sub_1(i64* %add.ptr, i64* %add.ptr1, i64 %sub, i64 %12), !dbg !559
  store i64 %call2, i64* %cy, align 8, !dbg !560
  br label %if.end, !dbg !561

if.end:                                           ; preds = %if.then, %entry
  %13 = load i64, i64* %cy, align 8, !dbg !562
  ret i64 %13, !dbg !563
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_mul_1(i64* %rp, i64* %up, i64 %n, i64 %vl) #0 !dbg !564 {
entry:
  %rp.addr = alloca i64*, align 8
  %up.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  %vl.addr = alloca i64, align 8
  %ul = alloca i64, align 8
  %cl = alloca i64, align 8
  %hpl = alloca i64, align 8
  %lpl = alloca i64, align 8
  %__x0 = alloca i64, align 8
  %__x1 = alloca i64, align 8
  %__x2 = alloca i64, align 8
  %__x3 = alloca i64, align 8
  %__ul = alloca i32, align 4
  %__vl = alloca i32, align 4
  %__uh = alloca i32, align 4
  %__vh = alloca i32, align 4
  %__u = alloca i64, align 8
  %__v = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !565, metadata !DIExpression()), !dbg !566
  store i64* %up, i64** %up.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %up.addr, metadata !567, metadata !DIExpression()), !dbg !568
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !569, metadata !DIExpression()), !dbg !570
  store i64 %vl, i64* %vl.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %vl.addr, metadata !571, metadata !DIExpression()), !dbg !572
  call void @llvm.dbg.declare(metadata i64* %ul, metadata !573, metadata !DIExpression()), !dbg !574
  call void @llvm.dbg.declare(metadata i64* %cl, metadata !575, metadata !DIExpression()), !dbg !576
  call void @llvm.dbg.declare(metadata i64* %hpl, metadata !577, metadata !DIExpression()), !dbg !578
  call void @llvm.dbg.declare(metadata i64* %lpl, metadata !579, metadata !DIExpression()), !dbg !580
  store i64 0, i64* %cl, align 8, !dbg !581
  br label %do.body, !dbg !582

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i64*, i64** %up.addr, align 8, !dbg !583
  %incdec.ptr = getelementptr inbounds i64, i64* %0, i32 1, !dbg !583
  store i64* %incdec.ptr, i64** %up.addr, align 8, !dbg !583
  %1 = load i64, i64* %0, align 8, !dbg !585
  store i64 %1, i64* %ul, align 8, !dbg !586
  br label %do.body1, !dbg !587

do.body1:                                         ; preds = %do.body
  call void @llvm.dbg.declare(metadata i64* %__x0, metadata !588, metadata !DIExpression()), !dbg !590
  call void @llvm.dbg.declare(metadata i64* %__x1, metadata !591, metadata !DIExpression()), !dbg !590
  call void @llvm.dbg.declare(metadata i64* %__x2, metadata !592, metadata !DIExpression()), !dbg !590
  call void @llvm.dbg.declare(metadata i64* %__x3, metadata !593, metadata !DIExpression()), !dbg !590
  call void @llvm.dbg.declare(metadata i32* %__ul, metadata !594, metadata !DIExpression()), !dbg !590
  call void @llvm.dbg.declare(metadata i32* %__vl, metadata !595, metadata !DIExpression()), !dbg !590
  call void @llvm.dbg.declare(metadata i32* %__uh, metadata !596, metadata !DIExpression()), !dbg !590
  call void @llvm.dbg.declare(metadata i32* %__vh, metadata !597, metadata !DIExpression()), !dbg !590
  call void @llvm.dbg.declare(metadata i64* %__u, metadata !598, metadata !DIExpression()), !dbg !590
  %2 = load i64, i64* %ul, align 8, !dbg !590
  store i64 %2, i64* %__u, align 8, !dbg !590
  call void @llvm.dbg.declare(metadata i64* %__v, metadata !599, metadata !DIExpression()), !dbg !590
  %3 = load i64, i64* %vl.addr, align 8, !dbg !590
  store i64 %3, i64* %__v, align 8, !dbg !590
  %4 = load i64, i64* %__u, align 8, !dbg !590
  %and = and i64 %4, 4294967295, !dbg !590
  %conv = trunc i64 %and to i32, !dbg !590
  store i32 %conv, i32* %__ul, align 4, !dbg !590
  %5 = load i64, i64* %__u, align 8, !dbg !590
  %shr = lshr i64 %5, 32, !dbg !590
  %conv2 = trunc i64 %shr to i32, !dbg !590
  store i32 %conv2, i32* %__uh, align 4, !dbg !590
  %6 = load i64, i64* %__v, align 8, !dbg !590
  %and3 = and i64 %6, 4294967295, !dbg !590
  %conv4 = trunc i64 %and3 to i32, !dbg !590
  store i32 %conv4, i32* %__vl, align 4, !dbg !590
  %7 = load i64, i64* %__v, align 8, !dbg !590
  %shr5 = lshr i64 %7, 32, !dbg !590
  %conv6 = trunc i64 %shr5 to i32, !dbg !590
  store i32 %conv6, i32* %__vh, align 4, !dbg !590
  %8 = load i32, i32* %__ul, align 4, !dbg !590
  %conv7 = zext i32 %8 to i64, !dbg !590
  %9 = load i32, i32* %__vl, align 4, !dbg !590
  %conv8 = zext i32 %9 to i64, !dbg !590
  %mul = mul i64 %conv7, %conv8, !dbg !590
  store i64 %mul, i64* %__x0, align 8, !dbg !590
  %10 = load i32, i32* %__ul, align 4, !dbg !590
  %conv9 = zext i32 %10 to i64, !dbg !590
  %11 = load i32, i32* %__vh, align 4, !dbg !590
  %conv10 = zext i32 %11 to i64, !dbg !590
  %mul11 = mul i64 %conv9, %conv10, !dbg !590
  store i64 %mul11, i64* %__x1, align 8, !dbg !590
  %12 = load i32, i32* %__uh, align 4, !dbg !590
  %conv12 = zext i32 %12 to i64, !dbg !590
  %13 = load i32, i32* %__vl, align 4, !dbg !590
  %conv13 = zext i32 %13 to i64, !dbg !590
  %mul14 = mul i64 %conv12, %conv13, !dbg !590
  store i64 %mul14, i64* %__x2, align 8, !dbg !590
  %14 = load i32, i32* %__uh, align 4, !dbg !590
  %conv15 = zext i32 %14 to i64, !dbg !590
  %15 = load i32, i32* %__vh, align 4, !dbg !590
  %conv16 = zext i32 %15 to i64, !dbg !590
  %mul17 = mul i64 %conv15, %conv16, !dbg !590
  store i64 %mul17, i64* %__x3, align 8, !dbg !590
  %16 = load i64, i64* %__x0, align 8, !dbg !590
  %shr18 = lshr i64 %16, 32, !dbg !590
  %17 = load i64, i64* %__x1, align 8, !dbg !590
  %add = add i64 %17, %shr18, !dbg !590
  store i64 %add, i64* %__x1, align 8, !dbg !590
  %18 = load i64, i64* %__x2, align 8, !dbg !590
  %19 = load i64, i64* %__x1, align 8, !dbg !590
  %add19 = add i64 %19, %18, !dbg !590
  store i64 %add19, i64* %__x1, align 8, !dbg !590
  %20 = load i64, i64* %__x1, align 8, !dbg !600
  %21 = load i64, i64* %__x2, align 8, !dbg !600
  %cmp = icmp ult i64 %20, %21, !dbg !600
  br i1 %cmp, label %if.then, label %if.end, !dbg !590

if.then:                                          ; preds = %do.body1
  %22 = load i64, i64* %__x3, align 8, !dbg !600
  %add21 = add i64 %22, 4294967296, !dbg !600
  store i64 %add21, i64* %__x3, align 8, !dbg !600
  br label %if.end, !dbg !600

if.end:                                           ; preds = %if.then, %do.body1
  %23 = load i64, i64* %__x3, align 8, !dbg !590
  %24 = load i64, i64* %__x1, align 8, !dbg !590
  %shr22 = lshr i64 %24, 32, !dbg !590
  %add23 = add i64 %23, %shr22, !dbg !590
  store i64 %add23, i64* %hpl, align 8, !dbg !590
  %25 = load i64, i64* %__x1, align 8, !dbg !590
  %shl = shl i64 %25, 32, !dbg !590
  %26 = load i64, i64* %__x0, align 8, !dbg !590
  %and24 = and i64 %26, 4294967295, !dbg !590
  %add25 = add i64 %shl, %and24, !dbg !590
  store i64 %add25, i64* %lpl, align 8, !dbg !590
  br label %do.end, !dbg !590

do.end:                                           ; preds = %if.end
  %27 = load i64, i64* %cl, align 8, !dbg !602
  %28 = load i64, i64* %lpl, align 8, !dbg !603
  %add26 = add i64 %28, %27, !dbg !603
  store i64 %add26, i64* %lpl, align 8, !dbg !603
  %29 = load i64, i64* %lpl, align 8, !dbg !604
  %30 = load i64, i64* %cl, align 8, !dbg !605
  %cmp27 = icmp ult i64 %29, %30, !dbg !606
  %conv28 = zext i1 %cmp27 to i32, !dbg !606
  %conv29 = sext i32 %conv28 to i64, !dbg !607
  %31 = load i64, i64* %hpl, align 8, !dbg !608
  %add30 = add i64 %conv29, %31, !dbg !609
  store i64 %add30, i64* %cl, align 8, !dbg !610
  %32 = load i64, i64* %lpl, align 8, !dbg !611
  %33 = load i64*, i64** %rp.addr, align 8, !dbg !612
  %incdec.ptr31 = getelementptr inbounds i64, i64* %33, i32 1, !dbg !612
  store i64* %incdec.ptr31, i64** %rp.addr, align 8, !dbg !612
  store i64 %32, i64* %33, align 8, !dbg !613
  br label %do.cond, !dbg !614

do.cond:                                          ; preds = %do.end
  %34 = load i64, i64* %n.addr, align 8, !dbg !615
  %dec = add nsw i64 %34, -1, !dbg !615
  store i64 %dec, i64* %n.addr, align 8, !dbg !615
  %cmp32 = icmp ne i64 %dec, 0, !dbg !616
  br i1 %cmp32, label %do.body, label %do.end34, !dbg !614, !llvm.loop !617

do.end34:                                         ; preds = %do.cond
  %35 = load i64, i64* %cl, align 8, !dbg !619
  ret i64 %35, !dbg !620
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_addmul_1(i64* %rp, i64* %up, i64 %n, i64 %vl) #0 !dbg !621 {
entry:
  %rp.addr = alloca i64*, align 8
  %up.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  %vl.addr = alloca i64, align 8
  %ul = alloca i64, align 8
  %cl = alloca i64, align 8
  %hpl = alloca i64, align 8
  %lpl = alloca i64, align 8
  %rl = alloca i64, align 8
  %__x0 = alloca i64, align 8
  %__x1 = alloca i64, align 8
  %__x2 = alloca i64, align 8
  %__x3 = alloca i64, align 8
  %__ul = alloca i32, align 4
  %__vl = alloca i32, align 4
  %__uh = alloca i32, align 4
  %__vh = alloca i32, align 4
  %__u = alloca i64, align 8
  %__v = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !622, metadata !DIExpression()), !dbg !623
  store i64* %up, i64** %up.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %up.addr, metadata !624, metadata !DIExpression()), !dbg !625
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !626, metadata !DIExpression()), !dbg !627
  store i64 %vl, i64* %vl.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %vl.addr, metadata !628, metadata !DIExpression()), !dbg !629
  call void @llvm.dbg.declare(metadata i64* %ul, metadata !630, metadata !DIExpression()), !dbg !631
  call void @llvm.dbg.declare(metadata i64* %cl, metadata !632, metadata !DIExpression()), !dbg !633
  call void @llvm.dbg.declare(metadata i64* %hpl, metadata !634, metadata !DIExpression()), !dbg !635
  call void @llvm.dbg.declare(metadata i64* %lpl, metadata !636, metadata !DIExpression()), !dbg !637
  call void @llvm.dbg.declare(metadata i64* %rl, metadata !638, metadata !DIExpression()), !dbg !639
  store i64 0, i64* %cl, align 8, !dbg !640
  br label %do.body, !dbg !641

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i64*, i64** %up.addr, align 8, !dbg !642
  %incdec.ptr = getelementptr inbounds i64, i64* %0, i32 1, !dbg !642
  store i64* %incdec.ptr, i64** %up.addr, align 8, !dbg !642
  %1 = load i64, i64* %0, align 8, !dbg !644
  store i64 %1, i64* %ul, align 8, !dbg !645
  br label %do.body1, !dbg !646

do.body1:                                         ; preds = %do.body
  call void @llvm.dbg.declare(metadata i64* %__x0, metadata !647, metadata !DIExpression()), !dbg !649
  call void @llvm.dbg.declare(metadata i64* %__x1, metadata !650, metadata !DIExpression()), !dbg !649
  call void @llvm.dbg.declare(metadata i64* %__x2, metadata !651, metadata !DIExpression()), !dbg !649
  call void @llvm.dbg.declare(metadata i64* %__x3, metadata !652, metadata !DIExpression()), !dbg !649
  call void @llvm.dbg.declare(metadata i32* %__ul, metadata !653, metadata !DIExpression()), !dbg !649
  call void @llvm.dbg.declare(metadata i32* %__vl, metadata !654, metadata !DIExpression()), !dbg !649
  call void @llvm.dbg.declare(metadata i32* %__uh, metadata !655, metadata !DIExpression()), !dbg !649
  call void @llvm.dbg.declare(metadata i32* %__vh, metadata !656, metadata !DIExpression()), !dbg !649
  call void @llvm.dbg.declare(metadata i64* %__u, metadata !657, metadata !DIExpression()), !dbg !649
  %2 = load i64, i64* %ul, align 8, !dbg !649
  store i64 %2, i64* %__u, align 8, !dbg !649
  call void @llvm.dbg.declare(metadata i64* %__v, metadata !658, metadata !DIExpression()), !dbg !649
  %3 = load i64, i64* %vl.addr, align 8, !dbg !649
  store i64 %3, i64* %__v, align 8, !dbg !649
  %4 = load i64, i64* %__u, align 8, !dbg !649
  %and = and i64 %4, 4294967295, !dbg !649
  %conv = trunc i64 %and to i32, !dbg !649
  store i32 %conv, i32* %__ul, align 4, !dbg !649
  %5 = load i64, i64* %__u, align 8, !dbg !649
  %shr = lshr i64 %5, 32, !dbg !649
  %conv2 = trunc i64 %shr to i32, !dbg !649
  store i32 %conv2, i32* %__uh, align 4, !dbg !649
  %6 = load i64, i64* %__v, align 8, !dbg !649
  %and3 = and i64 %6, 4294967295, !dbg !649
  %conv4 = trunc i64 %and3 to i32, !dbg !649
  store i32 %conv4, i32* %__vl, align 4, !dbg !649
  %7 = load i64, i64* %__v, align 8, !dbg !649
  %shr5 = lshr i64 %7, 32, !dbg !649
  %conv6 = trunc i64 %shr5 to i32, !dbg !649
  store i32 %conv6, i32* %__vh, align 4, !dbg !649
  %8 = load i32, i32* %__ul, align 4, !dbg !649
  %conv7 = zext i32 %8 to i64, !dbg !649
  %9 = load i32, i32* %__vl, align 4, !dbg !649
  %conv8 = zext i32 %9 to i64, !dbg !649
  %mul = mul i64 %conv7, %conv8, !dbg !649
  store i64 %mul, i64* %__x0, align 8, !dbg !649
  %10 = load i32, i32* %__ul, align 4, !dbg !649
  %conv9 = zext i32 %10 to i64, !dbg !649
  %11 = load i32, i32* %__vh, align 4, !dbg !649
  %conv10 = zext i32 %11 to i64, !dbg !649
  %mul11 = mul i64 %conv9, %conv10, !dbg !649
  store i64 %mul11, i64* %__x1, align 8, !dbg !649
  %12 = load i32, i32* %__uh, align 4, !dbg !649
  %conv12 = zext i32 %12 to i64, !dbg !649
  %13 = load i32, i32* %__vl, align 4, !dbg !649
  %conv13 = zext i32 %13 to i64, !dbg !649
  %mul14 = mul i64 %conv12, %conv13, !dbg !649
  store i64 %mul14, i64* %__x2, align 8, !dbg !649
  %14 = load i32, i32* %__uh, align 4, !dbg !649
  %conv15 = zext i32 %14 to i64, !dbg !649
  %15 = load i32, i32* %__vh, align 4, !dbg !649
  %conv16 = zext i32 %15 to i64, !dbg !649
  %mul17 = mul i64 %conv15, %conv16, !dbg !649
  store i64 %mul17, i64* %__x3, align 8, !dbg !649
  %16 = load i64, i64* %__x0, align 8, !dbg !649
  %shr18 = lshr i64 %16, 32, !dbg !649
  %17 = load i64, i64* %__x1, align 8, !dbg !649
  %add = add i64 %17, %shr18, !dbg !649
  store i64 %add, i64* %__x1, align 8, !dbg !649
  %18 = load i64, i64* %__x2, align 8, !dbg !649
  %19 = load i64, i64* %__x1, align 8, !dbg !649
  %add19 = add i64 %19, %18, !dbg !649
  store i64 %add19, i64* %__x1, align 8, !dbg !649
  %20 = load i64, i64* %__x1, align 8, !dbg !659
  %21 = load i64, i64* %__x2, align 8, !dbg !659
  %cmp = icmp ult i64 %20, %21, !dbg !659
  br i1 %cmp, label %if.then, label %if.end, !dbg !649

if.then:                                          ; preds = %do.body1
  %22 = load i64, i64* %__x3, align 8, !dbg !659
  %add21 = add i64 %22, 4294967296, !dbg !659
  store i64 %add21, i64* %__x3, align 8, !dbg !659
  br label %if.end, !dbg !659

if.end:                                           ; preds = %if.then, %do.body1
  %23 = load i64, i64* %__x3, align 8, !dbg !649
  %24 = load i64, i64* %__x1, align 8, !dbg !649
  %shr22 = lshr i64 %24, 32, !dbg !649
  %add23 = add i64 %23, %shr22, !dbg !649
  store i64 %add23, i64* %hpl, align 8, !dbg !649
  %25 = load i64, i64* %__x1, align 8, !dbg !649
  %shl = shl i64 %25, 32, !dbg !649
  %26 = load i64, i64* %__x0, align 8, !dbg !649
  %and24 = and i64 %26, 4294967295, !dbg !649
  %add25 = add i64 %shl, %and24, !dbg !649
  store i64 %add25, i64* %lpl, align 8, !dbg !649
  br label %do.end, !dbg !649

do.end:                                           ; preds = %if.end
  %27 = load i64, i64* %cl, align 8, !dbg !661
  %28 = load i64, i64* %lpl, align 8, !dbg !662
  %add26 = add i64 %28, %27, !dbg !662
  store i64 %add26, i64* %lpl, align 8, !dbg !662
  %29 = load i64, i64* %lpl, align 8, !dbg !663
  %30 = load i64, i64* %cl, align 8, !dbg !664
  %cmp27 = icmp ult i64 %29, %30, !dbg !665
  %conv28 = zext i1 %cmp27 to i32, !dbg !665
  %conv29 = sext i32 %conv28 to i64, !dbg !666
  %31 = load i64, i64* %hpl, align 8, !dbg !667
  %add30 = add i64 %conv29, %31, !dbg !668
  store i64 %add30, i64* %cl, align 8, !dbg !669
  %32 = load i64*, i64** %rp.addr, align 8, !dbg !670
  %33 = load i64, i64* %32, align 8, !dbg !671
  store i64 %33, i64* %rl, align 8, !dbg !672
  %34 = load i64, i64* %rl, align 8, !dbg !673
  %35 = load i64, i64* %lpl, align 8, !dbg !674
  %add31 = add i64 %34, %35, !dbg !675
  store i64 %add31, i64* %lpl, align 8, !dbg !676
  %36 = load i64, i64* %lpl, align 8, !dbg !677
  %37 = load i64, i64* %rl, align 8, !dbg !678
  %cmp32 = icmp ult i64 %36, %37, !dbg !679
  %conv33 = zext i1 %cmp32 to i32, !dbg !679
  %conv34 = sext i32 %conv33 to i64, !dbg !677
  %38 = load i64, i64* %cl, align 8, !dbg !680
  %add35 = add i64 %38, %conv34, !dbg !680
  store i64 %add35, i64* %cl, align 8, !dbg !680
  %39 = load i64, i64* %lpl, align 8, !dbg !681
  %40 = load i64*, i64** %rp.addr, align 8, !dbg !682
  %incdec.ptr36 = getelementptr inbounds i64, i64* %40, i32 1, !dbg !682
  store i64* %incdec.ptr36, i64** %rp.addr, align 8, !dbg !682
  store i64 %39, i64* %40, align 8, !dbg !683
  br label %do.cond, !dbg !684

do.cond:                                          ; preds = %do.end
  %41 = load i64, i64* %n.addr, align 8, !dbg !685
  %dec = add nsw i64 %41, -1, !dbg !685
  store i64 %dec, i64* %n.addr, align 8, !dbg !685
  %cmp37 = icmp ne i64 %dec, 0, !dbg !686
  br i1 %cmp37, label %do.body, label %do.end39, !dbg !684, !llvm.loop !687

do.end39:                                         ; preds = %do.cond
  %42 = load i64, i64* %cl, align 8, !dbg !689
  ret i64 %42, !dbg !690
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_submul_1(i64* %rp, i64* %up, i64 %n, i64 %vl) #0 !dbg !691 {
entry:
  %rp.addr = alloca i64*, align 8
  %up.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  %vl.addr = alloca i64, align 8
  %ul = alloca i64, align 8
  %cl = alloca i64, align 8
  %hpl = alloca i64, align 8
  %lpl = alloca i64, align 8
  %rl = alloca i64, align 8
  %__x0 = alloca i64, align 8
  %__x1 = alloca i64, align 8
  %__x2 = alloca i64, align 8
  %__x3 = alloca i64, align 8
  %__ul = alloca i32, align 4
  %__vl = alloca i32, align 4
  %__uh = alloca i32, align 4
  %__vh = alloca i32, align 4
  %__u = alloca i64, align 8
  %__v = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !692, metadata !DIExpression()), !dbg !693
  store i64* %up, i64** %up.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %up.addr, metadata !694, metadata !DIExpression()), !dbg !695
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !696, metadata !DIExpression()), !dbg !697
  store i64 %vl, i64* %vl.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %vl.addr, metadata !698, metadata !DIExpression()), !dbg !699
  call void @llvm.dbg.declare(metadata i64* %ul, metadata !700, metadata !DIExpression()), !dbg !701
  call void @llvm.dbg.declare(metadata i64* %cl, metadata !702, metadata !DIExpression()), !dbg !703
  call void @llvm.dbg.declare(metadata i64* %hpl, metadata !704, metadata !DIExpression()), !dbg !705
  call void @llvm.dbg.declare(metadata i64* %lpl, metadata !706, metadata !DIExpression()), !dbg !707
  call void @llvm.dbg.declare(metadata i64* %rl, metadata !708, metadata !DIExpression()), !dbg !709
  store i64 0, i64* %cl, align 8, !dbg !710
  br label %do.body, !dbg !711

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i64*, i64** %up.addr, align 8, !dbg !712
  %incdec.ptr = getelementptr inbounds i64, i64* %0, i32 1, !dbg !712
  store i64* %incdec.ptr, i64** %up.addr, align 8, !dbg !712
  %1 = load i64, i64* %0, align 8, !dbg !714
  store i64 %1, i64* %ul, align 8, !dbg !715
  br label %do.body1, !dbg !716

do.body1:                                         ; preds = %do.body
  call void @llvm.dbg.declare(metadata i64* %__x0, metadata !717, metadata !DIExpression()), !dbg !719
  call void @llvm.dbg.declare(metadata i64* %__x1, metadata !720, metadata !DIExpression()), !dbg !719
  call void @llvm.dbg.declare(metadata i64* %__x2, metadata !721, metadata !DIExpression()), !dbg !719
  call void @llvm.dbg.declare(metadata i64* %__x3, metadata !722, metadata !DIExpression()), !dbg !719
  call void @llvm.dbg.declare(metadata i32* %__ul, metadata !723, metadata !DIExpression()), !dbg !719
  call void @llvm.dbg.declare(metadata i32* %__vl, metadata !724, metadata !DIExpression()), !dbg !719
  call void @llvm.dbg.declare(metadata i32* %__uh, metadata !725, metadata !DIExpression()), !dbg !719
  call void @llvm.dbg.declare(metadata i32* %__vh, metadata !726, metadata !DIExpression()), !dbg !719
  call void @llvm.dbg.declare(metadata i64* %__u, metadata !727, metadata !DIExpression()), !dbg !719
  %2 = load i64, i64* %ul, align 8, !dbg !719
  store i64 %2, i64* %__u, align 8, !dbg !719
  call void @llvm.dbg.declare(metadata i64* %__v, metadata !728, metadata !DIExpression()), !dbg !719
  %3 = load i64, i64* %vl.addr, align 8, !dbg !719
  store i64 %3, i64* %__v, align 8, !dbg !719
  %4 = load i64, i64* %__u, align 8, !dbg !719
  %and = and i64 %4, 4294967295, !dbg !719
  %conv = trunc i64 %and to i32, !dbg !719
  store i32 %conv, i32* %__ul, align 4, !dbg !719
  %5 = load i64, i64* %__u, align 8, !dbg !719
  %shr = lshr i64 %5, 32, !dbg !719
  %conv2 = trunc i64 %shr to i32, !dbg !719
  store i32 %conv2, i32* %__uh, align 4, !dbg !719
  %6 = load i64, i64* %__v, align 8, !dbg !719
  %and3 = and i64 %6, 4294967295, !dbg !719
  %conv4 = trunc i64 %and3 to i32, !dbg !719
  store i32 %conv4, i32* %__vl, align 4, !dbg !719
  %7 = load i64, i64* %__v, align 8, !dbg !719
  %shr5 = lshr i64 %7, 32, !dbg !719
  %conv6 = trunc i64 %shr5 to i32, !dbg !719
  store i32 %conv6, i32* %__vh, align 4, !dbg !719
  %8 = load i32, i32* %__ul, align 4, !dbg !719
  %conv7 = zext i32 %8 to i64, !dbg !719
  %9 = load i32, i32* %__vl, align 4, !dbg !719
  %conv8 = zext i32 %9 to i64, !dbg !719
  %mul = mul i64 %conv7, %conv8, !dbg !719
  store i64 %mul, i64* %__x0, align 8, !dbg !719
  %10 = load i32, i32* %__ul, align 4, !dbg !719
  %conv9 = zext i32 %10 to i64, !dbg !719
  %11 = load i32, i32* %__vh, align 4, !dbg !719
  %conv10 = zext i32 %11 to i64, !dbg !719
  %mul11 = mul i64 %conv9, %conv10, !dbg !719
  store i64 %mul11, i64* %__x1, align 8, !dbg !719
  %12 = load i32, i32* %__uh, align 4, !dbg !719
  %conv12 = zext i32 %12 to i64, !dbg !719
  %13 = load i32, i32* %__vl, align 4, !dbg !719
  %conv13 = zext i32 %13 to i64, !dbg !719
  %mul14 = mul i64 %conv12, %conv13, !dbg !719
  store i64 %mul14, i64* %__x2, align 8, !dbg !719
  %14 = load i32, i32* %__uh, align 4, !dbg !719
  %conv15 = zext i32 %14 to i64, !dbg !719
  %15 = load i32, i32* %__vh, align 4, !dbg !719
  %conv16 = zext i32 %15 to i64, !dbg !719
  %mul17 = mul i64 %conv15, %conv16, !dbg !719
  store i64 %mul17, i64* %__x3, align 8, !dbg !719
  %16 = load i64, i64* %__x0, align 8, !dbg !719
  %shr18 = lshr i64 %16, 32, !dbg !719
  %17 = load i64, i64* %__x1, align 8, !dbg !719
  %add = add i64 %17, %shr18, !dbg !719
  store i64 %add, i64* %__x1, align 8, !dbg !719
  %18 = load i64, i64* %__x2, align 8, !dbg !719
  %19 = load i64, i64* %__x1, align 8, !dbg !719
  %add19 = add i64 %19, %18, !dbg !719
  store i64 %add19, i64* %__x1, align 8, !dbg !719
  %20 = load i64, i64* %__x1, align 8, !dbg !729
  %21 = load i64, i64* %__x2, align 8, !dbg !729
  %cmp = icmp ult i64 %20, %21, !dbg !729
  br i1 %cmp, label %if.then, label %if.end, !dbg !719

if.then:                                          ; preds = %do.body1
  %22 = load i64, i64* %__x3, align 8, !dbg !729
  %add21 = add i64 %22, 4294967296, !dbg !729
  store i64 %add21, i64* %__x3, align 8, !dbg !729
  br label %if.end, !dbg !729

if.end:                                           ; preds = %if.then, %do.body1
  %23 = load i64, i64* %__x3, align 8, !dbg !719
  %24 = load i64, i64* %__x1, align 8, !dbg !719
  %shr22 = lshr i64 %24, 32, !dbg !719
  %add23 = add i64 %23, %shr22, !dbg !719
  store i64 %add23, i64* %hpl, align 8, !dbg !719
  %25 = load i64, i64* %__x1, align 8, !dbg !719
  %shl = shl i64 %25, 32, !dbg !719
  %26 = load i64, i64* %__x0, align 8, !dbg !719
  %and24 = and i64 %26, 4294967295, !dbg !719
  %add25 = add i64 %shl, %and24, !dbg !719
  store i64 %add25, i64* %lpl, align 8, !dbg !719
  br label %do.end, !dbg !719

do.end:                                           ; preds = %if.end
  %27 = load i64, i64* %cl, align 8, !dbg !731
  %28 = load i64, i64* %lpl, align 8, !dbg !732
  %add26 = add i64 %28, %27, !dbg !732
  store i64 %add26, i64* %lpl, align 8, !dbg !732
  %29 = load i64, i64* %lpl, align 8, !dbg !733
  %30 = load i64, i64* %cl, align 8, !dbg !734
  %cmp27 = icmp ult i64 %29, %30, !dbg !735
  %conv28 = zext i1 %cmp27 to i32, !dbg !735
  %conv29 = sext i32 %conv28 to i64, !dbg !736
  %31 = load i64, i64* %hpl, align 8, !dbg !737
  %add30 = add i64 %conv29, %31, !dbg !738
  store i64 %add30, i64* %cl, align 8, !dbg !739
  %32 = load i64*, i64** %rp.addr, align 8, !dbg !740
  %33 = load i64, i64* %32, align 8, !dbg !741
  store i64 %33, i64* %rl, align 8, !dbg !742
  %34 = load i64, i64* %rl, align 8, !dbg !743
  %35 = load i64, i64* %lpl, align 8, !dbg !744
  %sub = sub i64 %34, %35, !dbg !745
  store i64 %sub, i64* %lpl, align 8, !dbg !746
  %36 = load i64, i64* %lpl, align 8, !dbg !747
  %37 = load i64, i64* %rl, align 8, !dbg !748
  %cmp31 = icmp ugt i64 %36, %37, !dbg !749
  %conv32 = zext i1 %cmp31 to i32, !dbg !749
  %conv33 = sext i32 %conv32 to i64, !dbg !747
  %38 = load i64, i64* %cl, align 8, !dbg !750
  %add34 = add i64 %38, %conv33, !dbg !750
  store i64 %add34, i64* %cl, align 8, !dbg !750
  %39 = load i64, i64* %lpl, align 8, !dbg !751
  %40 = load i64*, i64** %rp.addr, align 8, !dbg !752
  %incdec.ptr35 = getelementptr inbounds i64, i64* %40, i32 1, !dbg !752
  store i64* %incdec.ptr35, i64** %rp.addr, align 8, !dbg !752
  store i64 %39, i64* %40, align 8, !dbg !753
  br label %do.cond, !dbg !754

do.cond:                                          ; preds = %do.end
  %41 = load i64, i64* %n.addr, align 8, !dbg !755
  %dec = add nsw i64 %41, -1, !dbg !755
  store i64 %dec, i64* %n.addr, align 8, !dbg !755
  %cmp36 = icmp ne i64 %dec, 0, !dbg !756
  br i1 %cmp36, label %do.body, label %do.end38, !dbg !754, !llvm.loop !757

do.end38:                                         ; preds = %do.cond
  %42 = load i64, i64* %cl, align 8, !dbg !759
  ret i64 %42, !dbg !760
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_mul(i64* %rp, i64* %up, i64 %un, i64* %vp, i64 %vn) #0 !dbg !761 {
entry:
  %rp.addr = alloca i64*, align 8
  %up.addr = alloca i64*, align 8
  %un.addr = alloca i64, align 8
  %vp.addr = alloca i64*, align 8
  %vn.addr = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !762, metadata !DIExpression()), !dbg !763
  store i64* %up, i64** %up.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %up.addr, metadata !764, metadata !DIExpression()), !dbg !765
  store i64 %un, i64* %un.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %un.addr, metadata !766, metadata !DIExpression()), !dbg !767
  store i64* %vp, i64** %vp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %vp.addr, metadata !768, metadata !DIExpression()), !dbg !769
  store i64 %vn, i64* %vn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %vn.addr, metadata !770, metadata !DIExpression()), !dbg !771
  %0 = load i64*, i64** %rp.addr, align 8, !dbg !772
  %1 = load i64*, i64** %up.addr, align 8, !dbg !773
  %2 = load i64, i64* %un.addr, align 8, !dbg !774
  %3 = load i64*, i64** %vp.addr, align 8, !dbg !775
  %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !775
  %4 = load i64, i64* %arrayidx, align 8, !dbg !775
  %call = call i64 @mpn_mul_1(i64* %0, i64* %1, i64 %2, i64 %4), !dbg !776
  %5 = load i64*, i64** %rp.addr, align 8, !dbg !777
  %6 = load i64, i64* %un.addr, align 8, !dbg !778
  %arrayidx1 = getelementptr inbounds i64, i64* %5, i64 %6, !dbg !777
  store i64 %call, i64* %arrayidx1, align 8, !dbg !779
  %7 = load i64*, i64** %rp.addr, align 8, !dbg !780
  %add.ptr = getelementptr inbounds i64, i64* %7, i64 1, !dbg !780
  store i64* %add.ptr, i64** %rp.addr, align 8, !dbg !780
  %8 = load i64*, i64** %vp.addr, align 8, !dbg !781
  %add.ptr2 = getelementptr inbounds i64, i64* %8, i64 1, !dbg !781
  store i64* %add.ptr2, i64** %vp.addr, align 8, !dbg !781
  %9 = load i64, i64* %vn.addr, align 8, !dbg !782
  %sub = sub nsw i64 %9, 1, !dbg !782
  store i64 %sub, i64* %vn.addr, align 8, !dbg !782
  br label %while.cond, !dbg !783

while.cond:                                       ; preds = %while.body, %entry
  %10 = load i64, i64* %vn.addr, align 8, !dbg !784
  %cmp = icmp sge i64 %10, 1, !dbg !785
  br i1 %cmp, label %while.body, label %while.end, !dbg !783

while.body:                                       ; preds = %while.cond
  %11 = load i64*, i64** %rp.addr, align 8, !dbg !786
  %12 = load i64*, i64** %up.addr, align 8, !dbg !788
  %13 = load i64, i64* %un.addr, align 8, !dbg !789
  %14 = load i64*, i64** %vp.addr, align 8, !dbg !790
  %arrayidx3 = getelementptr inbounds i64, i64* %14, i64 0, !dbg !790
  %15 = load i64, i64* %arrayidx3, align 8, !dbg !790
  %call4 = call i64 @mpn_addmul_1(i64* %11, i64* %12, i64 %13, i64 %15), !dbg !791
  %16 = load i64*, i64** %rp.addr, align 8, !dbg !792
  %17 = load i64, i64* %un.addr, align 8, !dbg !793
  %arrayidx5 = getelementptr inbounds i64, i64* %16, i64 %17, !dbg !792
  store i64 %call4, i64* %arrayidx5, align 8, !dbg !794
  %18 = load i64*, i64** %rp.addr, align 8, !dbg !795
  %add.ptr6 = getelementptr inbounds i64, i64* %18, i64 1, !dbg !795
  store i64* %add.ptr6, i64** %rp.addr, align 8, !dbg !795
  %19 = load i64*, i64** %vp.addr, align 8, !dbg !796
  %add.ptr7 = getelementptr inbounds i64, i64* %19, i64 1, !dbg !796
  store i64* %add.ptr7, i64** %vp.addr, align 8, !dbg !796
  %20 = load i64, i64* %vn.addr, align 8, !dbg !797
  %sub8 = sub nsw i64 %20, 1, !dbg !797
  store i64 %sub8, i64* %vn.addr, align 8, !dbg !797
  br label %while.cond, !dbg !783, !llvm.loop !798

while.end:                                        ; preds = %while.cond
  %21 = load i64*, i64** %rp.addr, align 8, !dbg !800
  %22 = load i64, i64* %un.addr, align 8, !dbg !801
  %sub9 = sub nsw i64 %22, 1, !dbg !802
  %arrayidx10 = getelementptr inbounds i64, i64* %21, i64 %sub9, !dbg !800
  %23 = load i64, i64* %arrayidx10, align 8, !dbg !800
  ret i64 %23, !dbg !803
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpn_mul_n(i64* %rp, i64* %ap, i64* %bp, i64 %n) #0 !dbg !804 {
entry:
  %rp.addr = alloca i64*, align 8
  %ap.addr = alloca i64*, align 8
  %bp.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !807, metadata !DIExpression()), !dbg !808
  store i64* %ap, i64** %ap.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %ap.addr, metadata !809, metadata !DIExpression()), !dbg !810
  store i64* %bp, i64** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %bp.addr, metadata !811, metadata !DIExpression()), !dbg !812
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !813, metadata !DIExpression()), !dbg !814
  %0 = load i64*, i64** %rp.addr, align 8, !dbg !815
  %1 = load i64*, i64** %ap.addr, align 8, !dbg !816
  %2 = load i64, i64* %n.addr, align 8, !dbg !817
  %3 = load i64*, i64** %bp.addr, align 8, !dbg !818
  %4 = load i64, i64* %n.addr, align 8, !dbg !819
  %call = call i64 @mpn_mul(i64* %0, i64* %1, i64 %2, i64* %3, i64 %4), !dbg !820
  ret void, !dbg !821
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpn_sqr(i64* %rp, i64* %ap, i64 %n) #0 !dbg !822 {
entry:
  %rp.addr = alloca i64*, align 8
  %ap.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !823, metadata !DIExpression()), !dbg !824
  store i64* %ap, i64** %ap.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %ap.addr, metadata !825, metadata !DIExpression()), !dbg !826
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !827, metadata !DIExpression()), !dbg !828
  %0 = load i64*, i64** %rp.addr, align 8, !dbg !829
  %1 = load i64*, i64** %ap.addr, align 8, !dbg !830
  %2 = load i64, i64* %n.addr, align 8, !dbg !831
  %3 = load i64*, i64** %ap.addr, align 8, !dbg !832
  %4 = load i64, i64* %n.addr, align 8, !dbg !833
  %call = call i64 @mpn_mul(i64* %0, i64* %1, i64 %2, i64* %3, i64 %4), !dbg !834
  ret void, !dbg !835
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_lshift(i64* %rp, i64* %up, i64 %n, i32 %cnt) #0 !dbg !836 {
entry:
  %rp.addr = alloca i64*, align 8
  %up.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  %cnt.addr = alloca i32, align 4
  %high_limb = alloca i64, align 8
  %low_limb = alloca i64, align 8
  %tnc = alloca i32, align 4
  %i = alloca i64, align 8
  %retval1 = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !839, metadata !DIExpression()), !dbg !840
  store i64* %up, i64** %up.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %up.addr, metadata !841, metadata !DIExpression()), !dbg !842
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !843, metadata !DIExpression()), !dbg !844
  store i32 %cnt, i32* %cnt.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cnt.addr, metadata !845, metadata !DIExpression()), !dbg !846
  call void @llvm.dbg.declare(metadata i64* %high_limb, metadata !847, metadata !DIExpression()), !dbg !848
  call void @llvm.dbg.declare(metadata i64* %low_limb, metadata !849, metadata !DIExpression()), !dbg !850
  call void @llvm.dbg.declare(metadata i32* %tnc, metadata !851, metadata !DIExpression()), !dbg !852
  call void @llvm.dbg.declare(metadata i64* %i, metadata !853, metadata !DIExpression()), !dbg !854
  call void @llvm.dbg.declare(metadata i64* %retval1, metadata !855, metadata !DIExpression()), !dbg !856
  %0 = load i64, i64* %n.addr, align 8, !dbg !857
  %1 = load i64*, i64** %up.addr, align 8, !dbg !858
  %add.ptr = getelementptr inbounds i64, i64* %1, i64 %0, !dbg !858
  store i64* %add.ptr, i64** %up.addr, align 8, !dbg !858
  %2 = load i64, i64* %n.addr, align 8, !dbg !859
  %3 = load i64*, i64** %rp.addr, align 8, !dbg !860
  %add.ptr2 = getelementptr inbounds i64, i64* %3, i64 %2, !dbg !860
  store i64* %add.ptr2, i64** %rp.addr, align 8, !dbg !860
  %4 = load i32, i32* %cnt.addr, align 4, !dbg !861
  %conv = zext i32 %4 to i64, !dbg !861
  %sub = sub i64 64, %conv, !dbg !862
  %conv3 = trunc i64 %sub to i32, !dbg !863
  store i32 %conv3, i32* %tnc, align 4, !dbg !864
  %5 = load i64*, i64** %up.addr, align 8, !dbg !865
  %incdec.ptr = getelementptr inbounds i64, i64* %5, i32 -1, !dbg !865
  store i64* %incdec.ptr, i64** %up.addr, align 8, !dbg !865
  %6 = load i64, i64* %incdec.ptr, align 8, !dbg !866
  store i64 %6, i64* %low_limb, align 8, !dbg !867
  %7 = load i64, i64* %low_limb, align 8, !dbg !868
  %8 = load i32, i32* %tnc, align 4, !dbg !869
  %sh_prom = zext i32 %8 to i64, !dbg !870
  %shr = lshr i64 %7, %sh_prom, !dbg !870
  store i64 %shr, i64* %retval1, align 8, !dbg !871
  %9 = load i64, i64* %low_limb, align 8, !dbg !872
  %10 = load i32, i32* %cnt.addr, align 4, !dbg !873
  %sh_prom4 = zext i32 %10 to i64, !dbg !874
  %shl = shl i64 %9, %sh_prom4, !dbg !874
  store i64 %shl, i64* %high_limb, align 8, !dbg !875
  %11 = load i64, i64* %n.addr, align 8, !dbg !876
  store i64 %11, i64* %i, align 8, !dbg !878
  br label %for.cond, !dbg !879

for.cond:                                         ; preds = %for.body, %entry
  %12 = load i64, i64* %i, align 8, !dbg !880
  %dec = add nsw i64 %12, -1, !dbg !880
  store i64 %dec, i64* %i, align 8, !dbg !880
  %cmp = icmp ne i64 %dec, 0, !dbg !882
  br i1 %cmp, label %for.body, label %for.end, !dbg !883

for.body:                                         ; preds = %for.cond
  %13 = load i64*, i64** %up.addr, align 8, !dbg !884
  %incdec.ptr6 = getelementptr inbounds i64, i64* %13, i32 -1, !dbg !884
  store i64* %incdec.ptr6, i64** %up.addr, align 8, !dbg !884
  %14 = load i64, i64* %incdec.ptr6, align 8, !dbg !886
  store i64 %14, i64* %low_limb, align 8, !dbg !887
  %15 = load i64, i64* %high_limb, align 8, !dbg !888
  %16 = load i64, i64* %low_limb, align 8, !dbg !889
  %17 = load i32, i32* %tnc, align 4, !dbg !890
  %sh_prom7 = zext i32 %17 to i64, !dbg !891
  %shr8 = lshr i64 %16, %sh_prom7, !dbg !891
  %or = or i64 %15, %shr8, !dbg !892
  %18 = load i64*, i64** %rp.addr, align 8, !dbg !893
  %incdec.ptr9 = getelementptr inbounds i64, i64* %18, i32 -1, !dbg !893
  store i64* %incdec.ptr9, i64** %rp.addr, align 8, !dbg !893
  store i64 %or, i64* %incdec.ptr9, align 8, !dbg !894
  %19 = load i64, i64* %low_limb, align 8, !dbg !895
  %20 = load i32, i32* %cnt.addr, align 4, !dbg !896
  %sh_prom10 = zext i32 %20 to i64, !dbg !897
  %shl11 = shl i64 %19, %sh_prom10, !dbg !897
  store i64 %shl11, i64* %high_limb, align 8, !dbg !898
  br label %for.cond, !dbg !899, !llvm.loop !900

for.end:                                          ; preds = %for.cond
  %21 = load i64, i64* %high_limb, align 8, !dbg !902
  %22 = load i64*, i64** %rp.addr, align 8, !dbg !903
  %incdec.ptr12 = getelementptr inbounds i64, i64* %22, i32 -1, !dbg !903
  store i64* %incdec.ptr12, i64** %rp.addr, align 8, !dbg !903
  store i64 %21, i64* %incdec.ptr12, align 8, !dbg !904
  %23 = load i64, i64* %retval1, align 8, !dbg !905
  ret i64 %23, !dbg !906
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_rshift(i64* %rp, i64* %up, i64 %n, i32 %cnt) #0 !dbg !907 {
entry:
  %rp.addr = alloca i64*, align 8
  %up.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  %cnt.addr = alloca i32, align 4
  %high_limb = alloca i64, align 8
  %low_limb = alloca i64, align 8
  %tnc = alloca i32, align 4
  %i = alloca i64, align 8
  %retval1 = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !908, metadata !DIExpression()), !dbg !909
  store i64* %up, i64** %up.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %up.addr, metadata !910, metadata !DIExpression()), !dbg !911
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !912, metadata !DIExpression()), !dbg !913
  store i32 %cnt, i32* %cnt.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cnt.addr, metadata !914, metadata !DIExpression()), !dbg !915
  call void @llvm.dbg.declare(metadata i64* %high_limb, metadata !916, metadata !DIExpression()), !dbg !917
  call void @llvm.dbg.declare(metadata i64* %low_limb, metadata !918, metadata !DIExpression()), !dbg !919
  call void @llvm.dbg.declare(metadata i32* %tnc, metadata !920, metadata !DIExpression()), !dbg !921
  call void @llvm.dbg.declare(metadata i64* %i, metadata !922, metadata !DIExpression()), !dbg !923
  call void @llvm.dbg.declare(metadata i64* %retval1, metadata !924, metadata !DIExpression()), !dbg !925
  %0 = load i32, i32* %cnt.addr, align 4, !dbg !926
  %conv = zext i32 %0 to i64, !dbg !926
  %sub = sub i64 64, %conv, !dbg !927
  %conv2 = trunc i64 %sub to i32, !dbg !928
  store i32 %conv2, i32* %tnc, align 4, !dbg !929
  %1 = load i64*, i64** %up.addr, align 8, !dbg !930
  %incdec.ptr = getelementptr inbounds i64, i64* %1, i32 1, !dbg !930
  store i64* %incdec.ptr, i64** %up.addr, align 8, !dbg !930
  %2 = load i64, i64* %1, align 8, !dbg !931
  store i64 %2, i64* %high_limb, align 8, !dbg !932
  %3 = load i64, i64* %high_limb, align 8, !dbg !933
  %4 = load i32, i32* %tnc, align 4, !dbg !934
  %sh_prom = zext i32 %4 to i64, !dbg !935
  %shl = shl i64 %3, %sh_prom, !dbg !935
  store i64 %shl, i64* %retval1, align 8, !dbg !936
  %5 = load i64, i64* %high_limb, align 8, !dbg !937
  %6 = load i32, i32* %cnt.addr, align 4, !dbg !938
  %sh_prom3 = zext i32 %6 to i64, !dbg !939
  %shr = lshr i64 %5, %sh_prom3, !dbg !939
  store i64 %shr, i64* %low_limb, align 8, !dbg !940
  %7 = load i64, i64* %n.addr, align 8, !dbg !941
  store i64 %7, i64* %i, align 8, !dbg !943
  br label %for.cond, !dbg !944

for.cond:                                         ; preds = %for.body, %entry
  %8 = load i64, i64* %i, align 8, !dbg !945
  %dec = add nsw i64 %8, -1, !dbg !945
  store i64 %dec, i64* %i, align 8, !dbg !945
  %cmp = icmp ne i64 %dec, 0, !dbg !947
  br i1 %cmp, label %for.body, label %for.end, !dbg !948

for.body:                                         ; preds = %for.cond
  %9 = load i64*, i64** %up.addr, align 8, !dbg !949
  %incdec.ptr5 = getelementptr inbounds i64, i64* %9, i32 1, !dbg !949
  store i64* %incdec.ptr5, i64** %up.addr, align 8, !dbg !949
  %10 = load i64, i64* %9, align 8, !dbg !951
  store i64 %10, i64* %high_limb, align 8, !dbg !952
  %11 = load i64, i64* %low_limb, align 8, !dbg !953
  %12 = load i64, i64* %high_limb, align 8, !dbg !954
  %13 = load i32, i32* %tnc, align 4, !dbg !955
  %sh_prom6 = zext i32 %13 to i64, !dbg !956
  %shl7 = shl i64 %12, %sh_prom6, !dbg !956
  %or = or i64 %11, %shl7, !dbg !957
  %14 = load i64*, i64** %rp.addr, align 8, !dbg !958
  %incdec.ptr8 = getelementptr inbounds i64, i64* %14, i32 1, !dbg !958
  store i64* %incdec.ptr8, i64** %rp.addr, align 8, !dbg !958
  store i64 %or, i64* %14, align 8, !dbg !959
  %15 = load i64, i64* %high_limb, align 8, !dbg !960
  %16 = load i32, i32* %cnt.addr, align 4, !dbg !961
  %sh_prom9 = zext i32 %16 to i64, !dbg !962
  %shr10 = lshr i64 %15, %sh_prom9, !dbg !962
  store i64 %shr10, i64* %low_limb, align 8, !dbg !963
  br label %for.cond, !dbg !964, !llvm.loop !965

for.end:                                          ; preds = %for.cond
  %17 = load i64, i64* %low_limb, align 8, !dbg !967
  %18 = load i64*, i64** %rp.addr, align 8, !dbg !968
  store i64 %17, i64* %18, align 8, !dbg !969
  %19 = load i64, i64* %retval1, align 8, !dbg !970
  ret i64 %19, !dbg !971
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_scan1(i64* %ptr, i64 %bit) #0 !dbg !972 {
entry:
  %ptr.addr = alloca i64*, align 8
  %bit.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i64* %ptr, i64** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %ptr.addr, metadata !975, metadata !DIExpression()), !dbg !976
  store i64 %bit, i64* %bit.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bit.addr, metadata !977, metadata !DIExpression()), !dbg !978
  call void @llvm.dbg.declare(metadata i64* %i, metadata !979, metadata !DIExpression()), !dbg !980
  %0 = load i64, i64* %bit.addr, align 8, !dbg !981
  %div = udiv i64 %0, 64, !dbg !982
  store i64 %div, i64* %i, align 8, !dbg !983
  %1 = load i64*, i64** %ptr.addr, align 8, !dbg !984
  %2 = load i64, i64* %i, align 8, !dbg !985
  %arrayidx = getelementptr inbounds i64, i64* %1, i64 %2, !dbg !984
  %3 = load i64, i64* %arrayidx, align 8, !dbg !984
  %4 = load i64, i64* %bit.addr, align 8, !dbg !986
  %rem = urem i64 %4, 64, !dbg !987
  %shl = shl i64 -1, %rem, !dbg !988
  %and = and i64 %3, %shl, !dbg !989
  %5 = load i64, i64* %i, align 8, !dbg !990
  %6 = load i64*, i64** %ptr.addr, align 8, !dbg !991
  %7 = load i64, i64* %i, align 8, !dbg !992
  %call = call i64 @mpn_common_scan(i64 %and, i64 %5, i64* %6, i64 %7, i64 0), !dbg !993
  ret i64 %call, !dbg !994
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpn_common_scan(i64 %limb, i64 %i, i64* %up, i64 %un, i64 %ux) #0 !dbg !995 {
entry:
  %retval = alloca i64, align 8
  %limb.addr = alloca i64, align 8
  %i.addr = alloca i64, align 8
  %up.addr = alloca i64*, align 8
  %un.addr = alloca i64, align 8
  %ux.addr = alloca i64, align 8
  %cnt = alloca i32, align 4
  %__ctz_x = alloca i64, align 8
  %__ctz_c = alloca i32, align 4
  %__clz_x = alloca i64, align 8
  %__clz_c = alloca i32, align 4
  store i64 %limb, i64* %limb.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %limb.addr, metadata !998, metadata !DIExpression()), !dbg !999
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !1000, metadata !DIExpression()), !dbg !1001
  store i64* %up, i64** %up.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %up.addr, metadata !1002, metadata !DIExpression()), !dbg !1003
  store i64 %un, i64* %un.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %un.addr, metadata !1004, metadata !DIExpression()), !dbg !1005
  store i64 %ux, i64* %ux.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ux.addr, metadata !1006, metadata !DIExpression()), !dbg !1007
  call void @llvm.dbg.declare(metadata i32* %cnt, metadata !1008, metadata !DIExpression()), !dbg !1009
  br label %while.cond, !dbg !1010

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i64, i64* %limb.addr, align 8, !dbg !1011
  %cmp = icmp eq i64 %0, 0, !dbg !1012
  br i1 %cmp, label %while.body, label %while.end, !dbg !1010

while.body:                                       ; preds = %while.cond
  %1 = load i64, i64* %i.addr, align 8, !dbg !1013
  %inc = add nsw i64 %1, 1, !dbg !1013
  store i64 %inc, i64* %i.addr, align 8, !dbg !1013
  %2 = load i64, i64* %i.addr, align 8, !dbg !1015
  %3 = load i64, i64* %un.addr, align 8, !dbg !1017
  %cmp1 = icmp eq i64 %2, %3, !dbg !1018
  br i1 %cmp1, label %if.then, label %if.end, !dbg !1019

if.then:                                          ; preds = %while.body
  %4 = load i64, i64* %ux.addr, align 8, !dbg !1020
  %cmp2 = icmp eq i64 %4, 0, !dbg !1021
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !1020

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !1020

cond.false:                                       ; preds = %if.then
  %5 = load i64, i64* %un.addr, align 8, !dbg !1022
  %mul = mul i64 %5, 64, !dbg !1023
  br label %cond.end, !dbg !1020

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ -1, %cond.true ], [ %mul, %cond.false ], !dbg !1020
  store i64 %cond, i64* %retval, align 8, !dbg !1024
  br label %return, !dbg !1024

if.end:                                           ; preds = %while.body
  %6 = load i64, i64* %ux.addr, align 8, !dbg !1025
  %7 = load i64*, i64** %up.addr, align 8, !dbg !1026
  %8 = load i64, i64* %i.addr, align 8, !dbg !1027
  %arrayidx = getelementptr inbounds i64, i64* %7, i64 %8, !dbg !1026
  %9 = load i64, i64* %arrayidx, align 8, !dbg !1026
  %xor = xor i64 %6, %9, !dbg !1028
  store i64 %xor, i64* %limb.addr, align 8, !dbg !1029
  br label %while.cond, !dbg !1010, !llvm.loop !1030

while.end:                                        ; preds = %while.cond
  br label %do.body, !dbg !1032

do.body:                                          ; preds = %while.end
  call void @llvm.dbg.declare(metadata i64* %__ctz_x, metadata !1033, metadata !DIExpression()), !dbg !1035
  %10 = load i64, i64* %limb.addr, align 8, !dbg !1035
  store i64 %10, i64* %__ctz_x, align 8, !dbg !1035
  call void @llvm.dbg.declare(metadata i32* %__ctz_c, metadata !1036, metadata !DIExpression()), !dbg !1035
  store i32 0, i32* %__ctz_c, align 4, !dbg !1035
  br label %do.body3, !dbg !1035

do.body3:                                         ; preds = %do.body
  call void @llvm.dbg.declare(metadata i64* %__clz_x, metadata !1037, metadata !DIExpression()), !dbg !1039
  %11 = load i64, i64* %__ctz_x, align 8, !dbg !1039
  %12 = load i64, i64* %__ctz_x, align 8, !dbg !1039
  %sub = sub i64 0, %12, !dbg !1039
  %and = and i64 %11, %sub, !dbg !1039
  store i64 %and, i64* %__clz_x, align 8, !dbg !1039
  call void @llvm.dbg.declare(metadata i32* %__clz_c, metadata !1040, metadata !DIExpression()), !dbg !1039
  store i32 0, i32* %__clz_c, align 4, !dbg !1041
  br label %for.cond, !dbg !1041

for.cond:                                         ; preds = %for.inc, %do.body3
  %13 = load i64, i64* %__clz_x, align 8, !dbg !1043
  %and4 = and i64 %13, -72057594037927936, !dbg !1043
  %cmp5 = icmp eq i64 %and4, 0, !dbg !1043
  br i1 %cmp5, label %for.body, label %for.end, !dbg !1041

for.body:                                         ; preds = %for.cond
  %14 = load i64, i64* %__clz_x, align 8, !dbg !1043
  %shl = shl i64 %14, 8, !dbg !1043
  store i64 %shl, i64* %__clz_x, align 8, !dbg !1043
  br label %for.inc, !dbg !1043

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %__clz_c, align 4, !dbg !1043
  %add = add i32 %15, 8, !dbg !1043
  store i32 %add, i32* %__clz_c, align 4, !dbg !1043
  br label %for.cond, !dbg !1043, !llvm.loop !1045

for.end:                                          ; preds = %for.cond
  br label %for.cond6, !dbg !1039

for.cond6:                                        ; preds = %for.inc11, %for.end
  %16 = load i64, i64* %__clz_x, align 8, !dbg !1046
  %and7 = and i64 %16, -9223372036854775808, !dbg !1046
  %cmp8 = icmp eq i64 %and7, 0, !dbg !1046
  br i1 %cmp8, label %for.body9, label %for.end13, !dbg !1049

for.body9:                                        ; preds = %for.cond6
  %17 = load i64, i64* %__clz_x, align 8, !dbg !1046
  %shl10 = shl i64 %17, 1, !dbg !1046
  store i64 %shl10, i64* %__clz_x, align 8, !dbg !1046
  br label %for.inc11, !dbg !1046

for.inc11:                                        ; preds = %for.body9
  %18 = load i32, i32* %__clz_c, align 4, !dbg !1046
  %inc12 = add i32 %18, 1, !dbg !1046
  store i32 %inc12, i32* %__clz_c, align 4, !dbg !1046
  br label %for.cond6, !dbg !1046, !llvm.loop !1050

for.end13:                                        ; preds = %for.cond6
  %19 = load i32, i32* %__clz_c, align 4, !dbg !1039
  store i32 %19, i32* %__ctz_c, align 4, !dbg !1039
  br label %do.end, !dbg !1039

do.end:                                           ; preds = %for.end13
  %20 = load i32, i32* %__ctz_c, align 4, !dbg !1035
  %conv = zext i32 %20 to i64, !dbg !1035
  %sub14 = sub i64 63, %conv, !dbg !1035
  %conv15 = trunc i64 %sub14 to i32, !dbg !1035
  store i32 %conv15, i32* %cnt, align 4, !dbg !1035
  br label %do.end16, !dbg !1035

do.end16:                                         ; preds = %do.end
  %21 = load i64, i64* %i.addr, align 8, !dbg !1051
  %mul17 = mul i64 %21, 64, !dbg !1052
  %22 = load i32, i32* %cnt, align 4, !dbg !1053
  %conv18 = zext i32 %22 to i64, !dbg !1053
  %add19 = add i64 %mul17, %conv18, !dbg !1054
  store i64 %add19, i64* %retval, align 8, !dbg !1055
  br label %return, !dbg !1055

return:                                           ; preds = %do.end16, %cond.end
  %23 = load i64, i64* %retval, align 8, !dbg !1056
  ret i64 %23, !dbg !1056
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_scan0(i64* %ptr, i64 %bit) #0 !dbg !1057 {
entry:
  %ptr.addr = alloca i64*, align 8
  %bit.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i64* %ptr, i64** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %ptr.addr, metadata !1058, metadata !DIExpression()), !dbg !1059
  store i64 %bit, i64* %bit.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bit.addr, metadata !1060, metadata !DIExpression()), !dbg !1061
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1062, metadata !DIExpression()), !dbg !1063
  %0 = load i64, i64* %bit.addr, align 8, !dbg !1064
  %div = udiv i64 %0, 64, !dbg !1065
  store i64 %div, i64* %i, align 8, !dbg !1066
  %1 = load i64*, i64** %ptr.addr, align 8, !dbg !1067
  %2 = load i64, i64* %i, align 8, !dbg !1068
  %arrayidx = getelementptr inbounds i64, i64* %1, i64 %2, !dbg !1067
  %3 = load i64, i64* %arrayidx, align 8, !dbg !1067
  %neg = xor i64 %3, -1, !dbg !1069
  %4 = load i64, i64* %bit.addr, align 8, !dbg !1070
  %rem = urem i64 %4, 64, !dbg !1071
  %shl = shl i64 -1, %rem, !dbg !1072
  %and = and i64 %neg, %shl, !dbg !1073
  %5 = load i64, i64* %i, align 8, !dbg !1074
  %6 = load i64*, i64** %ptr.addr, align 8, !dbg !1075
  %7 = load i64, i64* %i, align 8, !dbg !1076
  %call = call i64 @mpn_common_scan(i64 %and, i64 %5, i64* %6, i64 %7, i64 -1), !dbg !1077
  ret i64 %call, !dbg !1078
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_invert_3by2(i64 %u1, i64 %u0) #0 !dbg !1079 {
entry:
  %u1.addr = alloca i64, align 8
  %u0.addr = alloca i64, align 8
  %r = alloca i64, align 8
  %p = alloca i64, align 8
  %m = alloca i64, align 8
  %ul = alloca i32, align 4
  %uh = alloca i32, align 4
  %ql = alloca i32, align 4
  %qh = alloca i32, align 4
  %th = alloca i64, align 8
  %tl = alloca i64, align 8
  %__x0 = alloca i64, align 8
  %__x1 = alloca i64, align 8
  %__x2 = alloca i64, align 8
  %__x3 = alloca i64, align 8
  %__ul = alloca i32, align 4
  %__vl = alloca i32, align 4
  %__uh = alloca i32, align 4
  %__vh = alloca i32, align 4
  %__u = alloca i64, align 8
  %__v = alloca i64, align 8
  store i64 %u1, i64* %u1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %u1.addr, metadata !1082, metadata !DIExpression()), !dbg !1083
  store i64 %u0, i64* %u0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %u0.addr, metadata !1084, metadata !DIExpression()), !dbg !1085
  call void @llvm.dbg.declare(metadata i64* %r, metadata !1086, metadata !DIExpression()), !dbg !1087
  call void @llvm.dbg.declare(metadata i64* %p, metadata !1088, metadata !DIExpression()), !dbg !1089
  call void @llvm.dbg.declare(metadata i64* %m, metadata !1090, metadata !DIExpression()), !dbg !1091
  call void @llvm.dbg.declare(metadata i32* %ul, metadata !1092, metadata !DIExpression()), !dbg !1093
  call void @llvm.dbg.declare(metadata i32* %uh, metadata !1094, metadata !DIExpression()), !dbg !1095
  call void @llvm.dbg.declare(metadata i32* %ql, metadata !1096, metadata !DIExpression()), !dbg !1097
  call void @llvm.dbg.declare(metadata i32* %qh, metadata !1098, metadata !DIExpression()), !dbg !1099
  %0 = load i64, i64* %u1.addr, align 8, !dbg !1100
  %and = and i64 %0, 4294967295, !dbg !1101
  %conv = trunc i64 %and to i32, !dbg !1100
  store i32 %conv, i32* %ul, align 4, !dbg !1102
  %1 = load i64, i64* %u1.addr, align 8, !dbg !1103
  %shr = lshr i64 %1, 32, !dbg !1104
  %conv1 = trunc i64 %shr to i32, !dbg !1103
  store i32 %conv1, i32* %uh, align 4, !dbg !1105
  %2 = load i64, i64* %u1.addr, align 8, !dbg !1106
  %neg = xor i64 %2, -1, !dbg !1107
  %3 = load i32, i32* %uh, align 4, !dbg !1108
  %conv2 = zext i32 %3 to i64, !dbg !1108
  %div = udiv i64 %neg, %conv2, !dbg !1109
  %conv3 = trunc i64 %div to i32, !dbg !1107
  store i32 %conv3, i32* %qh, align 4, !dbg !1110
  %4 = load i64, i64* %u1.addr, align 8, !dbg !1111
  %neg4 = xor i64 %4, -1, !dbg !1112
  %5 = load i32, i32* %qh, align 4, !dbg !1113
  %conv5 = zext i32 %5 to i64, !dbg !1114
  %6 = load i32, i32* %uh, align 4, !dbg !1115
  %conv6 = zext i32 %6 to i64, !dbg !1115
  %mul = mul i64 %conv5, %conv6, !dbg !1116
  %sub = sub i64 %neg4, %mul, !dbg !1117
  %shl = shl i64 %sub, 32, !dbg !1118
  %or = or i64 %shl, 4294967295, !dbg !1119
  store i64 %or, i64* %r, align 8, !dbg !1120
  %7 = load i32, i32* %qh, align 4, !dbg !1121
  %conv7 = zext i32 %7 to i64, !dbg !1122
  %8 = load i32, i32* %ul, align 4, !dbg !1123
  %conv8 = zext i32 %8 to i64, !dbg !1123
  %mul9 = mul i64 %conv7, %conv8, !dbg !1124
  store i64 %mul9, i64* %p, align 8, !dbg !1125
  %9 = load i64, i64* %r, align 8, !dbg !1126
  %10 = load i64, i64* %p, align 8, !dbg !1128
  %cmp = icmp ult i64 %9, %10, !dbg !1129
  br i1 %cmp, label %if.then, label %if.end20, !dbg !1130

if.then:                                          ; preds = %entry
  %11 = load i32, i32* %qh, align 4, !dbg !1131
  %dec = add i32 %11, -1, !dbg !1131
  store i32 %dec, i32* %qh, align 4, !dbg !1131
  %12 = load i64, i64* %u1.addr, align 8, !dbg !1133
  %13 = load i64, i64* %r, align 8, !dbg !1134
  %add = add i64 %13, %12, !dbg !1134
  store i64 %add, i64* %r, align 8, !dbg !1134
  %14 = load i64, i64* %r, align 8, !dbg !1135
  %15 = load i64, i64* %u1.addr, align 8, !dbg !1137
  %cmp11 = icmp uge i64 %14, %15, !dbg !1138
  br i1 %cmp11, label %if.then13, label %if.end19, !dbg !1139

if.then13:                                        ; preds = %if.then
  %16 = load i64, i64* %r, align 8, !dbg !1140
  %17 = load i64, i64* %p, align 8, !dbg !1142
  %cmp14 = icmp ult i64 %16, %17, !dbg !1143
  br i1 %cmp14, label %if.then16, label %if.end, !dbg !1144

if.then16:                                        ; preds = %if.then13
  %18 = load i32, i32* %qh, align 4, !dbg !1145
  %dec17 = add i32 %18, -1, !dbg !1145
  store i32 %dec17, i32* %qh, align 4, !dbg !1145
  %19 = load i64, i64* %u1.addr, align 8, !dbg !1147
  %20 = load i64, i64* %r, align 8, !dbg !1148
  %add18 = add i64 %20, %19, !dbg !1148
  store i64 %add18, i64* %r, align 8, !dbg !1148
  br label %if.end, !dbg !1149

if.end:                                           ; preds = %if.then16, %if.then13
  br label %if.end19, !dbg !1142

if.end19:                                         ; preds = %if.end, %if.then
  br label %if.end20, !dbg !1150

if.end20:                                         ; preds = %if.end19, %entry
  %21 = load i64, i64* %p, align 8, !dbg !1151
  %22 = load i64, i64* %r, align 8, !dbg !1152
  %sub21 = sub i64 %22, %21, !dbg !1152
  store i64 %sub21, i64* %r, align 8, !dbg !1152
  %23 = load i64, i64* %r, align 8, !dbg !1153
  %shr22 = lshr i64 %23, 32, !dbg !1154
  %24 = load i32, i32* %qh, align 4, !dbg !1155
  %conv23 = zext i32 %24 to i64, !dbg !1155
  %mul24 = mul i64 %shr22, %conv23, !dbg !1156
  %25 = load i64, i64* %r, align 8, !dbg !1157
  %add25 = add i64 %mul24, %25, !dbg !1158
  store i64 %add25, i64* %p, align 8, !dbg !1159
  %26 = load i64, i64* %p, align 8, !dbg !1160
  %shr26 = lshr i64 %26, 32, !dbg !1161
  %add27 = add i64 %shr26, 1, !dbg !1162
  %conv28 = trunc i64 %add27 to i32, !dbg !1163
  store i32 %conv28, i32* %ql, align 4, !dbg !1164
  %27 = load i64, i64* %r, align 8, !dbg !1165
  %shl29 = shl i64 %27, 32, !dbg !1166
  %add30 = add i64 %shl29, 4294967295, !dbg !1167
  %28 = load i32, i32* %ql, align 4, !dbg !1168
  %conv31 = zext i32 %28 to i64, !dbg !1168
  %29 = load i64, i64* %u1.addr, align 8, !dbg !1169
  %mul32 = mul i64 %conv31, %29, !dbg !1170
  %sub33 = sub i64 %add30, %mul32, !dbg !1171
  store i64 %sub33, i64* %r, align 8, !dbg !1172
  %30 = load i64, i64* %r, align 8, !dbg !1173
  %31 = load i64, i64* %p, align 8, !dbg !1175
  %shl34 = shl i64 %31, 32, !dbg !1176
  %cmp35 = icmp uge i64 %30, %shl34, !dbg !1177
  br i1 %cmp35, label %if.then37, label %if.end40, !dbg !1178

if.then37:                                        ; preds = %if.end20
  %32 = load i32, i32* %ql, align 4, !dbg !1179
  %dec38 = add i32 %32, -1, !dbg !1179
  store i32 %dec38, i32* %ql, align 4, !dbg !1179
  %33 = load i64, i64* %u1.addr, align 8, !dbg !1181
  %34 = load i64, i64* %r, align 8, !dbg !1182
  %add39 = add i64 %34, %33, !dbg !1182
  store i64 %add39, i64* %r, align 8, !dbg !1182
  br label %if.end40, !dbg !1183

if.end40:                                         ; preds = %if.then37, %if.end20
  %35 = load i32, i32* %qh, align 4, !dbg !1184
  %conv41 = zext i32 %35 to i64, !dbg !1185
  %shl42 = shl i64 %conv41, 32, !dbg !1186
  %36 = load i32, i32* %ql, align 4, !dbg !1187
  %conv43 = zext i32 %36 to i64, !dbg !1187
  %add44 = add i64 %shl42, %conv43, !dbg !1188
  store i64 %add44, i64* %m, align 8, !dbg !1189
  %37 = load i64, i64* %r, align 8, !dbg !1190
  %38 = load i64, i64* %u1.addr, align 8, !dbg !1192
  %cmp45 = icmp uge i64 %37, %38, !dbg !1193
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !1194

if.then47:                                        ; preds = %if.end40
  %39 = load i64, i64* %m, align 8, !dbg !1195
  %inc = add i64 %39, 1, !dbg !1195
  store i64 %inc, i64* %m, align 8, !dbg !1195
  %40 = load i64, i64* %u1.addr, align 8, !dbg !1197
  %41 = load i64, i64* %r, align 8, !dbg !1198
  %sub48 = sub i64 %41, %40, !dbg !1198
  store i64 %sub48, i64* %r, align 8, !dbg !1198
  br label %if.end49, !dbg !1199

if.end49:                                         ; preds = %if.then47, %if.end40
  %42 = load i64, i64* %u0.addr, align 8, !dbg !1200
  %cmp50 = icmp ugt i64 %42, 0, !dbg !1202
  br i1 %cmp50, label %if.then52, label %if.end116, !dbg !1203

if.then52:                                        ; preds = %if.end49
  call void @llvm.dbg.declare(metadata i64* %th, metadata !1204, metadata !DIExpression()), !dbg !1206
  call void @llvm.dbg.declare(metadata i64* %tl, metadata !1207, metadata !DIExpression()), !dbg !1208
  %43 = load i64, i64* %r, align 8, !dbg !1209
  %neg53 = xor i64 %43, -1, !dbg !1210
  store i64 %neg53, i64* %r, align 8, !dbg !1211
  %44 = load i64, i64* %u0.addr, align 8, !dbg !1212
  %45 = load i64, i64* %r, align 8, !dbg !1213
  %add54 = add i64 %45, %44, !dbg !1213
  store i64 %add54, i64* %r, align 8, !dbg !1213
  %46 = load i64, i64* %r, align 8, !dbg !1214
  %47 = load i64, i64* %u0.addr, align 8, !dbg !1216
  %cmp55 = icmp ult i64 %46, %47, !dbg !1217
  br i1 %cmp55, label %if.then57, label %if.end66, !dbg !1218

if.then57:                                        ; preds = %if.then52
  %48 = load i64, i64* %m, align 8, !dbg !1219
  %dec58 = add i64 %48, -1, !dbg !1219
  store i64 %dec58, i64* %m, align 8, !dbg !1219
  %49 = load i64, i64* %r, align 8, !dbg !1221
  %50 = load i64, i64* %u1.addr, align 8, !dbg !1223
  %cmp59 = icmp uge i64 %49, %50, !dbg !1224
  br i1 %cmp59, label %if.then61, label %if.end64, !dbg !1225

if.then61:                                        ; preds = %if.then57
  %51 = load i64, i64* %m, align 8, !dbg !1226
  %dec62 = add i64 %51, -1, !dbg !1226
  store i64 %dec62, i64* %m, align 8, !dbg !1226
  %52 = load i64, i64* %u1.addr, align 8, !dbg !1228
  %53 = load i64, i64* %r, align 8, !dbg !1229
  %sub63 = sub i64 %53, %52, !dbg !1229
  store i64 %sub63, i64* %r, align 8, !dbg !1229
  br label %if.end64, !dbg !1230

if.end64:                                         ; preds = %if.then61, %if.then57
  %54 = load i64, i64* %u1.addr, align 8, !dbg !1231
  %55 = load i64, i64* %r, align 8, !dbg !1232
  %sub65 = sub i64 %55, %54, !dbg !1232
  store i64 %sub65, i64* %r, align 8, !dbg !1232
  br label %if.end66, !dbg !1233

if.end66:                                         ; preds = %if.end64, %if.then52
  br label %do.body, !dbg !1234

do.body:                                          ; preds = %if.end66
  call void @llvm.dbg.declare(metadata i64* %__x0, metadata !1235, metadata !DIExpression()), !dbg !1237
  call void @llvm.dbg.declare(metadata i64* %__x1, metadata !1238, metadata !DIExpression()), !dbg !1237
  call void @llvm.dbg.declare(metadata i64* %__x2, metadata !1239, metadata !DIExpression()), !dbg !1237
  call void @llvm.dbg.declare(metadata i64* %__x3, metadata !1240, metadata !DIExpression()), !dbg !1237
  call void @llvm.dbg.declare(metadata i32* %__ul, metadata !1241, metadata !DIExpression()), !dbg !1237
  call void @llvm.dbg.declare(metadata i32* %__vl, metadata !1242, metadata !DIExpression()), !dbg !1237
  call void @llvm.dbg.declare(metadata i32* %__uh, metadata !1243, metadata !DIExpression()), !dbg !1237
  call void @llvm.dbg.declare(metadata i32* %__vh, metadata !1244, metadata !DIExpression()), !dbg !1237
  call void @llvm.dbg.declare(metadata i64* %__u, metadata !1245, metadata !DIExpression()), !dbg !1237
  %56 = load i64, i64* %u0.addr, align 8, !dbg !1237
  store i64 %56, i64* %__u, align 8, !dbg !1237
  call void @llvm.dbg.declare(metadata i64* %__v, metadata !1246, metadata !DIExpression()), !dbg !1237
  %57 = load i64, i64* %m, align 8, !dbg !1237
  store i64 %57, i64* %__v, align 8, !dbg !1237
  %58 = load i64, i64* %__u, align 8, !dbg !1237
  %and67 = and i64 %58, 4294967295, !dbg !1237
  %conv68 = trunc i64 %and67 to i32, !dbg !1237
  store i32 %conv68, i32* %__ul, align 4, !dbg !1237
  %59 = load i64, i64* %__u, align 8, !dbg !1237
  %shr69 = lshr i64 %59, 32, !dbg !1237
  %conv70 = trunc i64 %shr69 to i32, !dbg !1237
  store i32 %conv70, i32* %__uh, align 4, !dbg !1237
  %60 = load i64, i64* %__v, align 8, !dbg !1237
  %and71 = and i64 %60, 4294967295, !dbg !1237
  %conv72 = trunc i64 %and71 to i32, !dbg !1237
  store i32 %conv72, i32* %__vl, align 4, !dbg !1237
  %61 = load i64, i64* %__v, align 8, !dbg !1237
  %shr73 = lshr i64 %61, 32, !dbg !1237
  %conv74 = trunc i64 %shr73 to i32, !dbg !1237
  store i32 %conv74, i32* %__vh, align 4, !dbg !1237
  %62 = load i32, i32* %__ul, align 4, !dbg !1237
  %conv75 = zext i32 %62 to i64, !dbg !1237
  %63 = load i32, i32* %__vl, align 4, !dbg !1237
  %conv76 = zext i32 %63 to i64, !dbg !1237
  %mul77 = mul i64 %conv75, %conv76, !dbg !1237
  store i64 %mul77, i64* %__x0, align 8, !dbg !1237
  %64 = load i32, i32* %__ul, align 4, !dbg !1237
  %conv78 = zext i32 %64 to i64, !dbg !1237
  %65 = load i32, i32* %__vh, align 4, !dbg !1237
  %conv79 = zext i32 %65 to i64, !dbg !1237
  %mul80 = mul i64 %conv78, %conv79, !dbg !1237
  store i64 %mul80, i64* %__x1, align 8, !dbg !1237
  %66 = load i32, i32* %__uh, align 4, !dbg !1237
  %conv81 = zext i32 %66 to i64, !dbg !1237
  %67 = load i32, i32* %__vl, align 4, !dbg !1237
  %conv82 = zext i32 %67 to i64, !dbg !1237
  %mul83 = mul i64 %conv81, %conv82, !dbg !1237
  store i64 %mul83, i64* %__x2, align 8, !dbg !1237
  %68 = load i32, i32* %__uh, align 4, !dbg !1237
  %conv84 = zext i32 %68 to i64, !dbg !1237
  %69 = load i32, i32* %__vh, align 4, !dbg !1237
  %conv85 = zext i32 %69 to i64, !dbg !1237
  %mul86 = mul i64 %conv84, %conv85, !dbg !1237
  store i64 %mul86, i64* %__x3, align 8, !dbg !1237
  %70 = load i64, i64* %__x0, align 8, !dbg !1237
  %shr87 = lshr i64 %70, 32, !dbg !1237
  %71 = load i64, i64* %__x1, align 8, !dbg !1237
  %add88 = add i64 %71, %shr87, !dbg !1237
  store i64 %add88, i64* %__x1, align 8, !dbg !1237
  %72 = load i64, i64* %__x2, align 8, !dbg !1237
  %73 = load i64, i64* %__x1, align 8, !dbg !1237
  %add89 = add i64 %73, %72, !dbg !1237
  store i64 %add89, i64* %__x1, align 8, !dbg !1237
  %74 = load i64, i64* %__x1, align 8, !dbg !1247
  %75 = load i64, i64* %__x2, align 8, !dbg !1247
  %cmp90 = icmp ult i64 %74, %75, !dbg !1247
  br i1 %cmp90, label %if.then92, label %if.end94, !dbg !1237

if.then92:                                        ; preds = %do.body
  %76 = load i64, i64* %__x3, align 8, !dbg !1247
  %add93 = add i64 %76, 4294967296, !dbg !1247
  store i64 %add93, i64* %__x3, align 8, !dbg !1247
  br label %if.end94, !dbg !1247

if.end94:                                         ; preds = %if.then92, %do.body
  %77 = load i64, i64* %__x3, align 8, !dbg !1237
  %78 = load i64, i64* %__x1, align 8, !dbg !1237
  %shr95 = lshr i64 %78, 32, !dbg !1237
  %add96 = add i64 %77, %shr95, !dbg !1237
  store i64 %add96, i64* %th, align 8, !dbg !1237
  %79 = load i64, i64* %__x1, align 8, !dbg !1237
  %shl97 = shl i64 %79, 32, !dbg !1237
  %80 = load i64, i64* %__x0, align 8, !dbg !1237
  %and98 = and i64 %80, 4294967295, !dbg !1237
  %add99 = add i64 %shl97, %and98, !dbg !1237
  store i64 %add99, i64* %tl, align 8, !dbg !1237
  br label %do.end, !dbg !1237

do.end:                                           ; preds = %if.end94
  %81 = load i64, i64* %th, align 8, !dbg !1249
  %82 = load i64, i64* %r, align 8, !dbg !1250
  %add100 = add i64 %82, %81, !dbg !1250
  store i64 %add100, i64* %r, align 8, !dbg !1250
  %83 = load i64, i64* %r, align 8, !dbg !1251
  %84 = load i64, i64* %th, align 8, !dbg !1253
  %cmp101 = icmp ult i64 %83, %84, !dbg !1254
  br i1 %cmp101, label %if.then103, label %if.end115, !dbg !1255

if.then103:                                       ; preds = %do.end
  %85 = load i64, i64* %m, align 8, !dbg !1256
  %dec104 = add i64 %85, -1, !dbg !1256
  store i64 %dec104, i64* %m, align 8, !dbg !1256
  %86 = load i64, i64* %r, align 8, !dbg !1258
  %87 = load i64, i64* %u1.addr, align 8, !dbg !1259
  %cmp105 = icmp ugt i64 %86, %87, !dbg !1260
  %conv106 = zext i1 %cmp105 to i32, !dbg !1260
  %88 = load i64, i64* %r, align 8, !dbg !1261
  %89 = load i64, i64* %u1.addr, align 8, !dbg !1262
  %cmp107 = icmp eq i64 %88, %89, !dbg !1263
  %conv108 = zext i1 %cmp107 to i32, !dbg !1263
  %90 = load i64, i64* %tl, align 8, !dbg !1264
  %91 = load i64, i64* %u0.addr, align 8, !dbg !1265
  %cmp109 = icmp ugt i64 %90, %91, !dbg !1266
  %conv110 = zext i1 %cmp109 to i32, !dbg !1266
  %and111 = and i32 %conv108, %conv110, !dbg !1267
  %or112 = or i32 %conv106, %and111, !dbg !1268
  %conv113 = sext i32 %or112 to i64, !dbg !1269
  %92 = load i64, i64* %m, align 8, !dbg !1270
  %sub114 = sub i64 %92, %conv113, !dbg !1270
  store i64 %sub114, i64* %m, align 8, !dbg !1270
  br label %if.end115, !dbg !1271

if.end115:                                        ; preds = %if.then103, %do.end
  br label %if.end116, !dbg !1272

if.end116:                                        ; preds = %if.end115, %if.end49
  %93 = load i64, i64* %m, align 8, !dbg !1273
  ret i64 %93, !dbg !1274
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_get_str(i8* %sp, i32 %base, i64* %up, i64 %un) #0 !dbg !1275 {
entry:
  %retval = alloca i64, align 8
  %sp.addr = alloca i8*, align 8
  %base.addr = alloca i32, align 4
  %up.addr = alloca i64*, align 8
  %un.addr = alloca i64, align 8
  %bits = alloca i32, align 4
  %info = alloca %struct.mpn_base_info, align 8
  store i8* %sp, i8** %sp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %sp.addr, metadata !1278, metadata !DIExpression()), !dbg !1279
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !1280, metadata !DIExpression()), !dbg !1281
  store i64* %up, i64** %up.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %up.addr, metadata !1282, metadata !DIExpression()), !dbg !1283
  store i64 %un, i64* %un.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %un.addr, metadata !1284, metadata !DIExpression()), !dbg !1285
  call void @llvm.dbg.declare(metadata i32* %bits, metadata !1286, metadata !DIExpression()), !dbg !1287
  %0 = load i32, i32* %base.addr, align 4, !dbg !1288
  %call = call i32 @mpn_base_power_of_two_p(i32 %0), !dbg !1289
  store i32 %call, i32* %bits, align 4, !dbg !1290
  %1 = load i32, i32* %bits, align 4, !dbg !1291
  %tobool = icmp ne i32 %1, 0, !dbg !1291
  br i1 %tobool, label %if.then, label %if.else, !dbg !1293

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %sp.addr, align 8, !dbg !1294
  %3 = load i32, i32* %bits, align 4, !dbg !1295
  %4 = load i64*, i64** %up.addr, align 8, !dbg !1296
  %5 = load i64, i64* %un.addr, align 8, !dbg !1297
  %call1 = call i64 @mpn_get_str_bits(i8* %2, i32 %3, i64* %4, i64 %5), !dbg !1298
  store i64 %call1, i64* %retval, align 8, !dbg !1299
  br label %return, !dbg !1299

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.mpn_base_info* %info, metadata !1300, metadata !DIExpression()), !dbg !1306
  %6 = load i32, i32* %base.addr, align 4, !dbg !1307
  %conv = sext i32 %6 to i64, !dbg !1307
  call void @mpn_get_base_info(%struct.mpn_base_info* %info, i64 %conv), !dbg !1308
  %7 = load i8*, i8** %sp.addr, align 8, !dbg !1309
  %8 = load i32, i32* %base.addr, align 4, !dbg !1310
  %9 = load i64*, i64** %up.addr, align 8, !dbg !1311
  %10 = load i64, i64* %un.addr, align 8, !dbg !1312
  %call2 = call i64 @mpn_get_str_other(i8* %7, i32 %8, %struct.mpn_base_info* %info, i64* %9, i64 %10), !dbg !1313
  store i64 %call2, i64* %retval, align 8, !dbg !1314
  br label %return, !dbg !1314

return:                                           ; preds = %if.else, %if.then
  %11 = load i64, i64* %retval, align 8, !dbg !1315
  ret i64 %11, !dbg !1315
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mpn_base_power_of_two_p(i32 %b) #0 !dbg !1316 {
entry:
  %retval = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !1319, metadata !DIExpression()), !dbg !1320
  %0 = load i32, i32* %b.addr, align 4, !dbg !1321
  switch i32 %0, label %sw.default [
    i32 2, label %sw.bb
    i32 4, label %sw.bb1
    i32 8, label %sw.bb2
    i32 16, label %sw.bb3
    i32 32, label %sw.bb4
    i32 64, label %sw.bb5
    i32 128, label %sw.bb6
    i32 256, label %sw.bb7
  ], !dbg !1322

sw.bb:                                            ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !1323
  br label %return, !dbg !1323

sw.bb1:                                           ; preds = %entry
  store i32 2, i32* %retval, align 4, !dbg !1325
  br label %return, !dbg !1325

sw.bb2:                                           ; preds = %entry
  store i32 3, i32* %retval, align 4, !dbg !1326
  br label %return, !dbg !1326

sw.bb3:                                           ; preds = %entry
  store i32 4, i32* %retval, align 4, !dbg !1327
  br label %return, !dbg !1327

sw.bb4:                                           ; preds = %entry
  store i32 5, i32* %retval, align 4, !dbg !1328
  br label %return, !dbg !1328

sw.bb5:                                           ; preds = %entry
  store i32 6, i32* %retval, align 4, !dbg !1329
  br label %return, !dbg !1329

sw.bb6:                                           ; preds = %entry
  store i32 7, i32* %retval, align 4, !dbg !1330
  br label %return, !dbg !1330

sw.bb7:                                           ; preds = %entry
  store i32 8, i32* %retval, align 4, !dbg !1331
  br label %return, !dbg !1331

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !1332
  br label %return, !dbg !1332

return:                                           ; preds = %sw.default, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i32, i32* %retval, align 4, !dbg !1333
  ret i32 %1, !dbg !1333
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpn_get_str_bits(i8* %sp, i32 %bits, i64* %up, i64 %un) #0 !dbg !1334 {
entry:
  %sp.addr = alloca i8*, align 8
  %bits.addr = alloca i32, align 4
  %up.addr = alloca i64*, align 8
  %un.addr = alloca i64, align 8
  %mask = alloca i8, align 1
  %sn = alloca i64, align 8
  %j = alloca i64, align 8
  %i = alloca i64, align 8
  %shift = alloca i32, align 4
  %digit = alloca i8, align 1
  store i8* %sp, i8** %sp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %sp.addr, metadata !1337, metadata !DIExpression()), !dbg !1338
  store i32 %bits, i32* %bits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bits.addr, metadata !1339, metadata !DIExpression()), !dbg !1340
  store i64* %up, i64** %up.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %up.addr, metadata !1341, metadata !DIExpression()), !dbg !1342
  store i64 %un, i64* %un.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %un.addr, metadata !1343, metadata !DIExpression()), !dbg !1344
  call void @llvm.dbg.declare(metadata i8* %mask, metadata !1345, metadata !DIExpression()), !dbg !1346
  call void @llvm.dbg.declare(metadata i64* %sn, metadata !1347, metadata !DIExpression()), !dbg !1348
  call void @llvm.dbg.declare(metadata i64* %j, metadata !1349, metadata !DIExpression()), !dbg !1350
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1351, metadata !DIExpression()), !dbg !1352
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !1353, metadata !DIExpression()), !dbg !1354
  %0 = load i64, i64* %un.addr, align 8, !dbg !1355
  %sub = sub nsw i64 %0, 1, !dbg !1356
  %mul = mul i64 %sub, 64, !dbg !1357
  %1 = load i64*, i64** %up.addr, align 8, !dbg !1358
  %2 = load i64, i64* %un.addr, align 8, !dbg !1359
  %sub1 = sub nsw i64 %2, 1, !dbg !1360
  %arrayidx = getelementptr inbounds i64, i64* %1, i64 %sub1, !dbg !1358
  %3 = load i64, i64* %arrayidx, align 8, !dbg !1358
  %call = call i64 @mpn_limb_size_in_base_2(i64 %3), !dbg !1361
  %add = add i64 %mul, %call, !dbg !1362
  %4 = load i32, i32* %bits.addr, align 4, !dbg !1363
  %conv = zext i32 %4 to i64, !dbg !1363
  %add2 = add i64 %add, %conv, !dbg !1364
  %sub3 = sub i64 %add2, 1, !dbg !1365
  %5 = load i32, i32* %bits.addr, align 4, !dbg !1366
  %conv4 = zext i32 %5 to i64, !dbg !1366
  %div = udiv i64 %sub3, %conv4, !dbg !1367
  store i64 %div, i64* %sn, align 8, !dbg !1368
  %6 = load i32, i32* %bits.addr, align 4, !dbg !1369
  %shl = shl i32 1, %6, !dbg !1370
  %sub5 = sub i32 %shl, 1, !dbg !1371
  %conv6 = trunc i32 %sub5 to i8, !dbg !1372
  store i8 %conv6, i8* %mask, align 1, !dbg !1373
  store i64 0, i64* %i, align 8, !dbg !1374
  %7 = load i64, i64* %sn, align 8, !dbg !1376
  store i64 %7, i64* %j, align 8, !dbg !1377
  store i32 0, i32* %shift, align 4, !dbg !1378
  br label %for.cond, !dbg !1379

for.cond:                                         ; preds = %if.end, %entry
  %8 = load i64, i64* %j, align 8, !dbg !1380
  %dec = add i64 %8, -1, !dbg !1380
  store i64 %dec, i64* %j, align 8, !dbg !1380
  %cmp = icmp ugt i64 %8, 0, !dbg !1382
  br i1 %cmp, label %for.body, label %for.end, !dbg !1383

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8* %digit, metadata !1384, metadata !DIExpression()), !dbg !1386
  %9 = load i64*, i64** %up.addr, align 8, !dbg !1387
  %10 = load i64, i64* %i, align 8, !dbg !1388
  %arrayidx8 = getelementptr inbounds i64, i64* %9, i64 %10, !dbg !1387
  %11 = load i64, i64* %arrayidx8, align 8, !dbg !1387
  %12 = load i32, i32* %shift, align 4, !dbg !1389
  %sh_prom = zext i32 %12 to i64, !dbg !1390
  %shr = lshr i64 %11, %sh_prom, !dbg !1390
  %conv9 = trunc i64 %shr to i8, !dbg !1387
  store i8 %conv9, i8* %digit, align 1, !dbg !1386
  %13 = load i32, i32* %bits.addr, align 4, !dbg !1391
  %14 = load i32, i32* %shift, align 4, !dbg !1392
  %add10 = add i32 %14, %13, !dbg !1392
  store i32 %add10, i32* %shift, align 4, !dbg !1392
  %15 = load i32, i32* %shift, align 4, !dbg !1393
  %conv11 = sext i32 %15 to i64, !dbg !1393
  %cmp12 = icmp uge i64 %conv11, 64, !dbg !1395
  br i1 %cmp12, label %land.lhs.true, label %if.end, !dbg !1396

land.lhs.true:                                    ; preds = %for.body
  %16 = load i64, i64* %i, align 8, !dbg !1397
  %inc = add nsw i64 %16, 1, !dbg !1397
  store i64 %inc, i64* %i, align 8, !dbg !1397
  %17 = load i64, i64* %un.addr, align 8, !dbg !1398
  %cmp14 = icmp slt i64 %inc, %17, !dbg !1399
  br i1 %cmp14, label %if.then, label %if.end, !dbg !1400

if.then:                                          ; preds = %land.lhs.true
  %18 = load i32, i32* %shift, align 4, !dbg !1401
  %conv16 = sext i32 %18 to i64, !dbg !1401
  %sub17 = sub i64 %conv16, 64, !dbg !1401
  %conv18 = trunc i64 %sub17 to i32, !dbg !1401
  store i32 %conv18, i32* %shift, align 4, !dbg !1401
  %19 = load i64*, i64** %up.addr, align 8, !dbg !1403
  %20 = load i64, i64* %i, align 8, !dbg !1404
  %arrayidx19 = getelementptr inbounds i64, i64* %19, i64 %20, !dbg !1403
  %21 = load i64, i64* %arrayidx19, align 8, !dbg !1403
  %22 = load i32, i32* %bits.addr, align 4, !dbg !1405
  %23 = load i32, i32* %shift, align 4, !dbg !1406
  %sub20 = sub i32 %22, %23, !dbg !1407
  %sh_prom21 = zext i32 %sub20 to i64, !dbg !1408
  %shl22 = shl i64 %21, %sh_prom21, !dbg !1408
  %24 = load i8, i8* %digit, align 1, !dbg !1409
  %conv23 = zext i8 %24 to i64, !dbg !1409
  %or = or i64 %conv23, %shl22, !dbg !1409
  %conv24 = trunc i64 %or to i8, !dbg !1409
  store i8 %conv24, i8* %digit, align 1, !dbg !1409
  br label %if.end, !dbg !1410

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  %25 = load i8, i8* %digit, align 1, !dbg !1411
  %conv25 = zext i8 %25 to i32, !dbg !1411
  %26 = load i8, i8* %mask, align 1, !dbg !1412
  %conv26 = zext i8 %26 to i32, !dbg !1412
  %and = and i32 %conv25, %conv26, !dbg !1413
  %conv27 = trunc i32 %and to i8, !dbg !1411
  %27 = load i8*, i8** %sp.addr, align 8, !dbg !1414
  %28 = load i64, i64* %j, align 8, !dbg !1415
  %arrayidx28 = getelementptr inbounds i8, i8* %27, i64 %28, !dbg !1414
  store i8 %conv27, i8* %arrayidx28, align 1, !dbg !1416
  br label %for.cond, !dbg !1417, !llvm.loop !1418

for.end:                                          ; preds = %for.cond
  %29 = load i64, i64* %sn, align 8, !dbg !1420
  ret i64 %29, !dbg !1421
}

; Function Attrs: noinline nounwind uwtable
define internal void @mpn_get_base_info(%struct.mpn_base_info* %info, i64 %b) #0 !dbg !1422 {
entry:
  %info.addr = alloca %struct.mpn_base_info*, align 8
  %b.addr = alloca i64, align 8
  %m = alloca i64, align 8
  %p = alloca i64, align 8
  %exp = alloca i32, align 4
  store %struct.mpn_base_info* %info, %struct.mpn_base_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mpn_base_info** %info.addr, metadata !1426, metadata !DIExpression()), !dbg !1427
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !1428, metadata !DIExpression()), !dbg !1429
  call void @llvm.dbg.declare(metadata i64* %m, metadata !1430, metadata !DIExpression()), !dbg !1431
  call void @llvm.dbg.declare(metadata i64* %p, metadata !1432, metadata !DIExpression()), !dbg !1433
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !1434, metadata !DIExpression()), !dbg !1435
  %0 = load i64, i64* %b.addr, align 8, !dbg !1436
  %div = udiv i64 -1, %0, !dbg !1437
  store i64 %div, i64* %m, align 8, !dbg !1438
  store i32 1, i32* %exp, align 4, !dbg !1439
  %1 = load i64, i64* %b.addr, align 8, !dbg !1441
  store i64 %1, i64* %p, align 8, !dbg !1442
  br label %for.cond, !dbg !1443

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %p, align 8, !dbg !1444
  %3 = load i64, i64* %m, align 8, !dbg !1446
  %cmp = icmp ule i64 %2, %3, !dbg !1447
  br i1 %cmp, label %for.body, label %for.end, !dbg !1448

for.body:                                         ; preds = %for.cond
  %4 = load i64, i64* %b.addr, align 8, !dbg !1449
  %5 = load i64, i64* %p, align 8, !dbg !1450
  %mul = mul i64 %5, %4, !dbg !1450
  store i64 %mul, i64* %p, align 8, !dbg !1450
  br label %for.inc, !dbg !1451

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %exp, align 4, !dbg !1452
  %inc = add i32 %6, 1, !dbg !1452
  store i32 %inc, i32* %exp, align 4, !dbg !1452
  br label %for.cond, !dbg !1453, !llvm.loop !1454

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* %exp, align 4, !dbg !1456
  %8 = load %struct.mpn_base_info*, %struct.mpn_base_info** %info.addr, align 8, !dbg !1457
  %exp1 = getelementptr inbounds %struct.mpn_base_info, %struct.mpn_base_info* %8, i32 0, i32 0, !dbg !1458
  store i32 %7, i32* %exp1, align 8, !dbg !1459
  %9 = load i64, i64* %p, align 8, !dbg !1460
  %10 = load %struct.mpn_base_info*, %struct.mpn_base_info** %info.addr, align 8, !dbg !1461
  %bb = getelementptr inbounds %struct.mpn_base_info, %struct.mpn_base_info* %10, i32 0, i32 1, !dbg !1462
  store i64 %9, i64* %bb, align 8, !dbg !1463
  ret void, !dbg !1464
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpn_get_str_other(i8* %sp, i32 %base, %struct.mpn_base_info* %info, i64* %up, i64 %un) #0 !dbg !1465 {
entry:
  %sp.addr = alloca i8*, align 8
  %base.addr = alloca i32, align 4
  %info.addr = alloca %struct.mpn_base_info*, align 8
  %up.addr = alloca i64*, align 8
  %un.addr = alloca i64, align 8
  %binv = alloca %struct.gmp_div_inverse, align 8
  %sn = alloca i64, align 8
  %i = alloca i64, align 8
  %bbinv = alloca %struct.gmp_div_inverse, align 8
  %w = alloca i64, align 8
  %done = alloca i64, align 8
  %t = alloca i8, align 1
  store i8* %sp, i8** %sp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %sp.addr, metadata !1470, metadata !DIExpression()), !dbg !1471
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !1472, metadata !DIExpression()), !dbg !1473
  store %struct.mpn_base_info* %info, %struct.mpn_base_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mpn_base_info** %info.addr, metadata !1474, metadata !DIExpression()), !dbg !1475
  store i64* %up, i64** %up.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %up.addr, metadata !1476, metadata !DIExpression()), !dbg !1477
  store i64 %un, i64* %un.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %un.addr, metadata !1478, metadata !DIExpression()), !dbg !1479
  call void @llvm.dbg.declare(metadata %struct.gmp_div_inverse* %binv, metadata !1480, metadata !DIExpression()), !dbg !1487
  call void @llvm.dbg.declare(metadata i64* %sn, metadata !1488, metadata !DIExpression()), !dbg !1489
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1490, metadata !DIExpression()), !dbg !1491
  %0 = load i32, i32* %base.addr, align 4, !dbg !1492
  %conv = sext i32 %0 to i64, !dbg !1492
  call void @mpn_div_qr_1_invert(%struct.gmp_div_inverse* %binv, i64 %conv), !dbg !1493
  store i64 0, i64* %sn, align 8, !dbg !1494
  %1 = load i64, i64* %un.addr, align 8, !dbg !1495
  %cmp = icmp sgt i64 %1, 1, !dbg !1497
  br i1 %cmp, label %if.then, label %if.end, !dbg !1498

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.gmp_div_inverse* %bbinv, metadata !1499, metadata !DIExpression()), !dbg !1501
  %2 = load %struct.mpn_base_info*, %struct.mpn_base_info** %info.addr, align 8, !dbg !1502
  %bb = getelementptr inbounds %struct.mpn_base_info, %struct.mpn_base_info* %2, i32 0, i32 1, !dbg !1503
  %3 = load i64, i64* %bb, align 8, !dbg !1503
  call void @mpn_div_qr_1_invert(%struct.gmp_div_inverse* %bbinv, i64 %3), !dbg !1504
  br label %do.body, !dbg !1505

do.body:                                          ; preds = %do.cond, %if.then
  call void @llvm.dbg.declare(metadata i64* %w, metadata !1506, metadata !DIExpression()), !dbg !1508
  call void @llvm.dbg.declare(metadata i64* %done, metadata !1509, metadata !DIExpression()), !dbg !1510
  %4 = load i64*, i64** %up.addr, align 8, !dbg !1511
  %5 = load i64*, i64** %up.addr, align 8, !dbg !1512
  %6 = load i64, i64* %un.addr, align 8, !dbg !1513
  %call = call i64 @mpn_div_qr_1_preinv(i64* %4, i64* %5, i64 %6, %struct.gmp_div_inverse* %bbinv), !dbg !1514
  store i64 %call, i64* %w, align 8, !dbg !1515
  %7 = load i64*, i64** %up.addr, align 8, !dbg !1516
  %8 = load i64, i64* %un.addr, align 8, !dbg !1517
  %sub = sub nsw i64 %8, 1, !dbg !1518
  %arrayidx = getelementptr inbounds i64, i64* %7, i64 %sub, !dbg !1516
  %9 = load i64, i64* %arrayidx, align 8, !dbg !1516
  %cmp2 = icmp eq i64 %9, 0, !dbg !1519
  %conv3 = zext i1 %cmp2 to i32, !dbg !1519
  %conv4 = sext i32 %conv3 to i64, !dbg !1520
  %10 = load i64, i64* %un.addr, align 8, !dbg !1521
  %sub5 = sub nsw i64 %10, %conv4, !dbg !1521
  store i64 %sub5, i64* %un.addr, align 8, !dbg !1521
  %11 = load i8*, i8** %sp.addr, align 8, !dbg !1522
  %12 = load i64, i64* %sn, align 8, !dbg !1523
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !1524
  %13 = load i64, i64* %w, align 8, !dbg !1525
  %call6 = call i64 @mpn_limb_get_str(i8* %add.ptr, i64 %13, %struct.gmp_div_inverse* %binv), !dbg !1526
  store i64 %call6, i64* %done, align 8, !dbg !1527
  %14 = load i64, i64* %done, align 8, !dbg !1528
  %15 = load i64, i64* %sn, align 8, !dbg !1530
  %add = add i64 %15, %14, !dbg !1530
  store i64 %add, i64* %sn, align 8, !dbg !1530
  br label %for.cond, !dbg !1531

for.cond:                                         ; preds = %for.inc, %do.body
  %16 = load i64, i64* %done, align 8, !dbg !1532
  %17 = load %struct.mpn_base_info*, %struct.mpn_base_info** %info.addr, align 8, !dbg !1534
  %exp = getelementptr inbounds %struct.mpn_base_info, %struct.mpn_base_info* %17, i32 0, i32 0, !dbg !1535
  %18 = load i32, i32* %exp, align 8, !dbg !1535
  %conv7 = zext i32 %18 to i64, !dbg !1534
  %cmp8 = icmp ult i64 %16, %conv7, !dbg !1536
  br i1 %cmp8, label %for.body, label %for.end, !dbg !1537

for.body:                                         ; preds = %for.cond
  %19 = load i8*, i8** %sp.addr, align 8, !dbg !1538
  %20 = load i64, i64* %sn, align 8, !dbg !1539
  %inc = add i64 %20, 1, !dbg !1539
  store i64 %inc, i64* %sn, align 8, !dbg !1539
  %arrayidx10 = getelementptr inbounds i8, i8* %19, i64 %20, !dbg !1538
  store i8 0, i8* %arrayidx10, align 1, !dbg !1540
  br label %for.inc, !dbg !1538

for.inc:                                          ; preds = %for.body
  %21 = load i64, i64* %done, align 8, !dbg !1541
  %inc11 = add i64 %21, 1, !dbg !1541
  store i64 %inc11, i64* %done, align 8, !dbg !1541
  br label %for.cond, !dbg !1542, !llvm.loop !1543

for.end:                                          ; preds = %for.cond
  br label %do.cond, !dbg !1545

do.cond:                                          ; preds = %for.end
  %22 = load i64, i64* %un.addr, align 8, !dbg !1546
  %cmp12 = icmp sgt i64 %22, 1, !dbg !1547
  br i1 %cmp12, label %do.body, label %do.end, !dbg !1545, !llvm.loop !1548

do.end:                                           ; preds = %do.cond
  br label %if.end, !dbg !1550

if.end:                                           ; preds = %do.end, %entry
  %23 = load i8*, i8** %sp.addr, align 8, !dbg !1551
  %24 = load i64, i64* %sn, align 8, !dbg !1552
  %add.ptr14 = getelementptr inbounds i8, i8* %23, i64 %24, !dbg !1553
  %25 = load i64*, i64** %up.addr, align 8, !dbg !1554
  %arrayidx15 = getelementptr inbounds i64, i64* %25, i64 0, !dbg !1554
  %26 = load i64, i64* %arrayidx15, align 8, !dbg !1554
  %call16 = call i64 @mpn_limb_get_str(i8* %add.ptr14, i64 %26, %struct.gmp_div_inverse* %binv), !dbg !1555
  %27 = load i64, i64* %sn, align 8, !dbg !1556
  %add17 = add i64 %27, %call16, !dbg !1556
  store i64 %add17, i64* %sn, align 8, !dbg !1556
  store i64 0, i64* %i, align 8, !dbg !1557
  br label %for.cond18, !dbg !1559

for.cond18:                                       ; preds = %for.inc31, %if.end
  %28 = load i64, i64* %i, align 8, !dbg !1560
  %mul = mul i64 2, %28, !dbg !1562
  %add19 = add i64 %mul, 1, !dbg !1563
  %29 = load i64, i64* %sn, align 8, !dbg !1564
  %cmp20 = icmp ult i64 %add19, %29, !dbg !1565
  br i1 %cmp20, label %for.body22, label %for.end33, !dbg !1566

for.body22:                                       ; preds = %for.cond18
  call void @llvm.dbg.declare(metadata i8* %t, metadata !1567, metadata !DIExpression()), !dbg !1569
  %30 = load i8*, i8** %sp.addr, align 8, !dbg !1570
  %31 = load i64, i64* %i, align 8, !dbg !1571
  %arrayidx23 = getelementptr inbounds i8, i8* %30, i64 %31, !dbg !1570
  %32 = load i8, i8* %arrayidx23, align 1, !dbg !1570
  store i8 %32, i8* %t, align 1, !dbg !1569
  %33 = load i8*, i8** %sp.addr, align 8, !dbg !1572
  %34 = load i64, i64* %sn, align 8, !dbg !1573
  %35 = load i64, i64* %i, align 8, !dbg !1574
  %sub24 = sub i64 %34, %35, !dbg !1575
  %sub25 = sub i64 %sub24, 1, !dbg !1576
  %arrayidx26 = getelementptr inbounds i8, i8* %33, i64 %sub25, !dbg !1572
  %36 = load i8, i8* %arrayidx26, align 1, !dbg !1572
  %37 = load i8*, i8** %sp.addr, align 8, !dbg !1577
  %38 = load i64, i64* %i, align 8, !dbg !1578
  %arrayidx27 = getelementptr inbounds i8, i8* %37, i64 %38, !dbg !1577
  store i8 %36, i8* %arrayidx27, align 1, !dbg !1579
  %39 = load i8, i8* %t, align 1, !dbg !1580
  %40 = load i8*, i8** %sp.addr, align 8, !dbg !1581
  %41 = load i64, i64* %sn, align 8, !dbg !1582
  %42 = load i64, i64* %i, align 8, !dbg !1583
  %sub28 = sub i64 %41, %42, !dbg !1584
  %sub29 = sub i64 %sub28, 1, !dbg !1585
  %arrayidx30 = getelementptr inbounds i8, i8* %40, i64 %sub29, !dbg !1581
  store i8 %39, i8* %arrayidx30, align 1, !dbg !1586
  br label %for.inc31, !dbg !1587

for.inc31:                                        ; preds = %for.body22
  %43 = load i64, i64* %i, align 8, !dbg !1588
  %inc32 = add i64 %43, 1, !dbg !1588
  store i64 %inc32, i64* %i, align 8, !dbg !1588
  br label %for.cond18, !dbg !1589, !llvm.loop !1590

for.end33:                                        ; preds = %for.cond18
  %44 = load i64, i64* %sn, align 8, !dbg !1592
  ret i64 %44, !dbg !1593
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_set_str(i64* %rp, i8* %sp, i64 %sn, i32 %base) #0 !dbg !1594 {
entry:
  %retval = alloca i64, align 8
  %rp.addr = alloca i64*, align 8
  %sp.addr = alloca i8*, align 8
  %sn.addr = alloca i64, align 8
  %base.addr = alloca i32, align 4
  %bits = alloca i32, align 4
  %info = alloca %struct.mpn_base_info, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !1597, metadata !DIExpression()), !dbg !1598
  store i8* %sp, i8** %sp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %sp.addr, metadata !1599, metadata !DIExpression()), !dbg !1600
  store i64 %sn, i64* %sn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %sn.addr, metadata !1601, metadata !DIExpression()), !dbg !1602
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !1603, metadata !DIExpression()), !dbg !1604
  call void @llvm.dbg.declare(metadata i32* %bits, metadata !1605, metadata !DIExpression()), !dbg !1606
  %0 = load i64, i64* %sn.addr, align 8, !dbg !1607
  %cmp = icmp eq i64 %0, 0, !dbg !1609
  br i1 %cmp, label %if.then, label %if.end, !dbg !1610

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8, !dbg !1611
  br label %return, !dbg !1611

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %base.addr, align 4, !dbg !1612
  %call = call i32 @mpn_base_power_of_two_p(i32 %1), !dbg !1613
  store i32 %call, i32* %bits, align 4, !dbg !1614
  %2 = load i32, i32* %bits, align 4, !dbg !1615
  %tobool = icmp ne i32 %2, 0, !dbg !1615
  br i1 %tobool, label %if.then1, label %if.else, !dbg !1617

if.then1:                                         ; preds = %if.end
  %3 = load i64*, i64** %rp.addr, align 8, !dbg !1618
  %4 = load i8*, i8** %sp.addr, align 8, !dbg !1619
  %5 = load i64, i64* %sn.addr, align 8, !dbg !1620
  %6 = load i32, i32* %bits, align 4, !dbg !1621
  %call2 = call i64 @mpn_set_str_bits(i64* %3, i8* %4, i64 %5, i32 %6), !dbg !1622
  store i64 %call2, i64* %retval, align 8, !dbg !1623
  br label %return, !dbg !1623

if.else:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.mpn_base_info* %info, metadata !1624, metadata !DIExpression()), !dbg !1626
  %7 = load i32, i32* %base.addr, align 4, !dbg !1627
  %conv = sext i32 %7 to i64, !dbg !1627
  call void @mpn_get_base_info(%struct.mpn_base_info* %info, i64 %conv), !dbg !1628
  %8 = load i64*, i64** %rp.addr, align 8, !dbg !1629
  %9 = load i8*, i8** %sp.addr, align 8, !dbg !1630
  %10 = load i64, i64* %sn.addr, align 8, !dbg !1631
  %11 = load i32, i32* %base.addr, align 4, !dbg !1632
  %conv3 = sext i32 %11 to i64, !dbg !1632
  %call4 = call i64 @mpn_set_str_other(i64* %8, i8* %9, i64 %10, i64 %conv3, %struct.mpn_base_info* %info), !dbg !1633
  store i64 %call4, i64* %retval, align 8, !dbg !1634
  br label %return, !dbg !1634

return:                                           ; preds = %if.else, %if.then1, %if.then
  %12 = load i64, i64* %retval, align 8, !dbg !1635
  ret i64 %12, !dbg !1635
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpn_set_str_bits(i64* %rp, i8* %sp, i64 %sn, i32 %bits) #0 !dbg !1636 {
entry:
  %rp.addr = alloca i64*, align 8
  %sp.addr = alloca i8*, align 8
  %sn.addr = alloca i64, align 8
  %bits.addr = alloca i32, align 4
  %rn = alloca i64, align 8
  %j = alloca i64, align 8
  %shift = alloca i32, align 4
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !1639, metadata !DIExpression()), !dbg !1640
  store i8* %sp, i8** %sp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %sp.addr, metadata !1641, metadata !DIExpression()), !dbg !1642
  store i64 %sn, i64* %sn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %sn.addr, metadata !1643, metadata !DIExpression()), !dbg !1644
  store i32 %bits, i32* %bits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bits.addr, metadata !1645, metadata !DIExpression()), !dbg !1646
  call void @llvm.dbg.declare(metadata i64* %rn, metadata !1647, metadata !DIExpression()), !dbg !1648
  call void @llvm.dbg.declare(metadata i64* %j, metadata !1649, metadata !DIExpression()), !dbg !1650
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !1651, metadata !DIExpression()), !dbg !1652
  %0 = load i64, i64* %sn.addr, align 8, !dbg !1653
  store i64 %0, i64* %j, align 8, !dbg !1655
  store i64 0, i64* %rn, align 8, !dbg !1656
  store i32 0, i32* %shift, align 4, !dbg !1657
  br label %for.cond, !dbg !1658

for.cond:                                         ; preds = %if.end24, %entry
  %1 = load i64, i64* %j, align 8, !dbg !1659
  %dec = add i64 %1, -1, !dbg !1659
  store i64 %dec, i64* %j, align 8, !dbg !1659
  %cmp = icmp ugt i64 %1, 0, !dbg !1661
  br i1 %cmp, label %for.body, label %for.end, !dbg !1662

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %shift, align 4, !dbg !1663
  %cmp1 = icmp eq i32 %2, 0, !dbg !1666
  br i1 %cmp1, label %if.then, label %if.else, !dbg !1667

if.then:                                          ; preds = %for.body
  %3 = load i8*, i8** %sp.addr, align 8, !dbg !1668
  %4 = load i64, i64* %j, align 8, !dbg !1670
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %4, !dbg !1668
  %5 = load i8, i8* %arrayidx, align 1, !dbg !1668
  %conv = zext i8 %5 to i64, !dbg !1668
  %6 = load i64*, i64** %rp.addr, align 8, !dbg !1671
  %7 = load i64, i64* %rn, align 8, !dbg !1672
  %inc = add nsw i64 %7, 1, !dbg !1672
  store i64 %inc, i64* %rn, align 8, !dbg !1672
  %arrayidx2 = getelementptr inbounds i64, i64* %6, i64 %7, !dbg !1671
  store i64 %conv, i64* %arrayidx2, align 8, !dbg !1673
  %8 = load i32, i32* %bits.addr, align 4, !dbg !1674
  %9 = load i32, i32* %shift, align 4, !dbg !1675
  %add = add i32 %9, %8, !dbg !1675
  store i32 %add, i32* %shift, align 4, !dbg !1675
  br label %if.end24, !dbg !1676

if.else:                                          ; preds = %for.body
  %10 = load i8*, i8** %sp.addr, align 8, !dbg !1677
  %11 = load i64, i64* %j, align 8, !dbg !1679
  %arrayidx3 = getelementptr inbounds i8, i8* %10, i64 %11, !dbg !1677
  %12 = load i8, i8* %arrayidx3, align 1, !dbg !1677
  %conv4 = zext i8 %12 to i64, !dbg !1680
  %13 = load i32, i32* %shift, align 4, !dbg !1681
  %sh_prom = zext i32 %13 to i64, !dbg !1682
  %shl = shl i64 %conv4, %sh_prom, !dbg !1682
  %14 = load i64*, i64** %rp.addr, align 8, !dbg !1683
  %15 = load i64, i64* %rn, align 8, !dbg !1684
  %sub = sub nsw i64 %15, 1, !dbg !1685
  %arrayidx5 = getelementptr inbounds i64, i64* %14, i64 %sub, !dbg !1683
  %16 = load i64, i64* %arrayidx5, align 8, !dbg !1686
  %or = or i64 %16, %shl, !dbg !1686
  store i64 %or, i64* %arrayidx5, align 8, !dbg !1686
  %17 = load i32, i32* %bits.addr, align 4, !dbg !1687
  %18 = load i32, i32* %shift, align 4, !dbg !1688
  %add6 = add i32 %18, %17, !dbg !1688
  store i32 %add6, i32* %shift, align 4, !dbg !1688
  %19 = load i32, i32* %shift, align 4, !dbg !1689
  %conv7 = zext i32 %19 to i64, !dbg !1689
  %cmp8 = icmp uge i64 %conv7, 64, !dbg !1691
  br i1 %cmp8, label %if.then10, label %if.end23, !dbg !1692

if.then10:                                        ; preds = %if.else
  %20 = load i32, i32* %shift, align 4, !dbg !1693
  %conv11 = zext i32 %20 to i64, !dbg !1693
  %sub12 = sub i64 %conv11, 64, !dbg !1693
  %conv13 = trunc i64 %sub12 to i32, !dbg !1693
  store i32 %conv13, i32* %shift, align 4, !dbg !1693
  %21 = load i32, i32* %shift, align 4, !dbg !1695
  %cmp14 = icmp ugt i32 %21, 0, !dbg !1697
  br i1 %cmp14, label %if.then16, label %if.end, !dbg !1698

if.then16:                                        ; preds = %if.then10
  %22 = load i8*, i8** %sp.addr, align 8, !dbg !1699
  %23 = load i64, i64* %j, align 8, !dbg !1700
  %arrayidx17 = getelementptr inbounds i8, i8* %22, i64 %23, !dbg !1699
  %24 = load i8, i8* %arrayidx17, align 1, !dbg !1699
  %conv18 = zext i8 %24 to i64, !dbg !1701
  %25 = load i32, i32* %bits.addr, align 4, !dbg !1702
  %26 = load i32, i32* %shift, align 4, !dbg !1703
  %sub19 = sub i32 %25, %26, !dbg !1704
  %sh_prom20 = zext i32 %sub19 to i64, !dbg !1705
  %shr = lshr i64 %conv18, %sh_prom20, !dbg !1705
  %27 = load i64*, i64** %rp.addr, align 8, !dbg !1706
  %28 = load i64, i64* %rn, align 8, !dbg !1707
  %inc21 = add nsw i64 %28, 1, !dbg !1707
  store i64 %inc21, i64* %rn, align 8, !dbg !1707
  %arrayidx22 = getelementptr inbounds i64, i64* %27, i64 %28, !dbg !1706
  store i64 %shr, i64* %arrayidx22, align 8, !dbg !1708
  br label %if.end, !dbg !1706

if.end:                                           ; preds = %if.then16, %if.then10
  br label %if.end23, !dbg !1709

if.end23:                                         ; preds = %if.end, %if.else
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.then
  br label %for.cond, !dbg !1710, !llvm.loop !1711

for.end:                                          ; preds = %for.cond
  %29 = load i64*, i64** %rp.addr, align 8, !dbg !1713
  %30 = load i64, i64* %rn, align 8, !dbg !1714
  %call = call i64 @mpn_normalized_size(i64* %29, i64 %30), !dbg !1715
  store i64 %call, i64* %rn, align 8, !dbg !1716
  %31 = load i64, i64* %rn, align 8, !dbg !1717
  ret i64 %31, !dbg !1718
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpn_set_str_other(i64* %rp, i8* %sp, i64 %sn, i64 %b, %struct.mpn_base_info* %info) #0 !dbg !1719 {
entry:
  %rp.addr = alloca i64*, align 8
  %sp.addr = alloca i8*, align 8
  %sn.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %info.addr = alloca %struct.mpn_base_info*, align 8
  %rn = alloca i64, align 8
  %w = alloca i64, align 8
  %k = alloca i32, align 4
  %j = alloca i64, align 8
  %cy = alloca i64, align 8
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !1722, metadata !DIExpression()), !dbg !1723
  store i8* %sp, i8** %sp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %sp.addr, metadata !1724, metadata !DIExpression()), !dbg !1725
  store i64 %sn, i64* %sn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %sn.addr, metadata !1726, metadata !DIExpression()), !dbg !1727
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !1728, metadata !DIExpression()), !dbg !1729
  store %struct.mpn_base_info* %info, %struct.mpn_base_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mpn_base_info** %info.addr, metadata !1730, metadata !DIExpression()), !dbg !1731
  call void @llvm.dbg.declare(metadata i64* %rn, metadata !1732, metadata !DIExpression()), !dbg !1733
  call void @llvm.dbg.declare(metadata i64* %w, metadata !1734, metadata !DIExpression()), !dbg !1735
  call void @llvm.dbg.declare(metadata i32* %k, metadata !1736, metadata !DIExpression()), !dbg !1737
  call void @llvm.dbg.declare(metadata i64* %j, metadata !1738, metadata !DIExpression()), !dbg !1739
  %0 = load i64, i64* %sn.addr, align 8, !dbg !1740
  %sub = sub i64 %0, 1, !dbg !1741
  %1 = load %struct.mpn_base_info*, %struct.mpn_base_info** %info.addr, align 8, !dbg !1742
  %exp = getelementptr inbounds %struct.mpn_base_info, %struct.mpn_base_info* %1, i32 0, i32 0, !dbg !1743
  %2 = load i32, i32* %exp, align 8, !dbg !1743
  %conv = zext i32 %2 to i64, !dbg !1742
  %rem = urem i64 %sub, %conv, !dbg !1744
  %add = add i64 1, %rem, !dbg !1745
  %conv1 = trunc i64 %add to i32, !dbg !1746
  store i32 %conv1, i32* %k, align 4, !dbg !1747
  store i64 0, i64* %j, align 8, !dbg !1748
  %3 = load i8*, i8** %sp.addr, align 8, !dbg !1749
  %4 = load i64, i64* %j, align 8, !dbg !1750
  %inc = add i64 %4, 1, !dbg !1750
  store i64 %inc, i64* %j, align 8, !dbg !1750
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %4, !dbg !1749
  %5 = load i8, i8* %arrayidx, align 1, !dbg !1749
  %conv2 = zext i8 %5 to i64, !dbg !1749
  store i64 %conv2, i64* %w, align 8, !dbg !1751
  br label %for.cond, !dbg !1752

for.cond:                                         ; preds = %for.body, %entry
  %6 = load i32, i32* %k, align 4, !dbg !1753
  %dec = add i32 %6, -1, !dbg !1753
  store i32 %dec, i32* %k, align 4, !dbg !1753
  %cmp = icmp ugt i32 %dec, 0, !dbg !1756
  br i1 %cmp, label %for.body, label %for.end, !dbg !1757

for.body:                                         ; preds = %for.cond
  %7 = load i64, i64* %w, align 8, !dbg !1758
  %8 = load i64, i64* %b.addr, align 8, !dbg !1759
  %mul = mul i64 %7, %8, !dbg !1760
  %9 = load i8*, i8** %sp.addr, align 8, !dbg !1761
  %10 = load i64, i64* %j, align 8, !dbg !1762
  %inc4 = add i64 %10, 1, !dbg !1762
  store i64 %inc4, i64* %j, align 8, !dbg !1762
  %arrayidx5 = getelementptr inbounds i8, i8* %9, i64 %10, !dbg !1761
  %11 = load i8, i8* %arrayidx5, align 1, !dbg !1761
  %conv6 = zext i8 %11 to i64, !dbg !1761
  %add7 = add i64 %mul, %conv6, !dbg !1763
  store i64 %add7, i64* %w, align 8, !dbg !1764
  br label %for.cond, !dbg !1765, !llvm.loop !1766

for.end:                                          ; preds = %for.cond
  %12 = load i64, i64* %w, align 8, !dbg !1768
  %13 = load i64*, i64** %rp.addr, align 8, !dbg !1769
  %arrayidx8 = getelementptr inbounds i64, i64* %13, i64 0, !dbg !1769
  store i64 %12, i64* %arrayidx8, align 8, !dbg !1770
  %14 = load i64, i64* %w, align 8, !dbg !1771
  %cmp9 = icmp ugt i64 %14, 0, !dbg !1773
  %conv10 = zext i1 %cmp9 to i32, !dbg !1773
  %conv11 = sext i32 %conv10 to i64, !dbg !1774
  store i64 %conv11, i64* %rn, align 8, !dbg !1775
  br label %for.cond12, !dbg !1776

for.cond12:                                       ; preds = %if.end, %for.end
  %15 = load i64, i64* %j, align 8, !dbg !1777
  %16 = load i64, i64* %sn.addr, align 8, !dbg !1779
  %cmp13 = icmp ult i64 %15, %16, !dbg !1780
  br i1 %cmp13, label %for.body15, label %for.end37, !dbg !1781

for.body15:                                       ; preds = %for.cond12
  call void @llvm.dbg.declare(metadata i64* %cy, metadata !1782, metadata !DIExpression()), !dbg !1784
  %17 = load i8*, i8** %sp.addr, align 8, !dbg !1785
  %18 = load i64, i64* %j, align 8, !dbg !1786
  %inc16 = add i64 %18, 1, !dbg !1786
  store i64 %inc16, i64* %j, align 8, !dbg !1786
  %arrayidx17 = getelementptr inbounds i8, i8* %17, i64 %18, !dbg !1785
  %19 = load i8, i8* %arrayidx17, align 1, !dbg !1785
  %conv18 = zext i8 %19 to i64, !dbg !1785
  store i64 %conv18, i64* %w, align 8, !dbg !1787
  store i32 1, i32* %k, align 4, !dbg !1788
  br label %for.cond19, !dbg !1790

for.cond19:                                       ; preds = %for.inc, %for.body15
  %20 = load i32, i32* %k, align 4, !dbg !1791
  %21 = load %struct.mpn_base_info*, %struct.mpn_base_info** %info.addr, align 8, !dbg !1793
  %exp20 = getelementptr inbounds %struct.mpn_base_info, %struct.mpn_base_info* %21, i32 0, i32 0, !dbg !1794
  %22 = load i32, i32* %exp20, align 8, !dbg !1794
  %cmp21 = icmp ult i32 %20, %22, !dbg !1795
  br i1 %cmp21, label %for.body23, label %for.end30, !dbg !1796

for.body23:                                       ; preds = %for.cond19
  %23 = load i64, i64* %w, align 8, !dbg !1797
  %24 = load i64, i64* %b.addr, align 8, !dbg !1798
  %mul24 = mul i64 %23, %24, !dbg !1799
  %25 = load i8*, i8** %sp.addr, align 8, !dbg !1800
  %26 = load i64, i64* %j, align 8, !dbg !1801
  %inc25 = add i64 %26, 1, !dbg !1801
  store i64 %inc25, i64* %j, align 8, !dbg !1801
  %arrayidx26 = getelementptr inbounds i8, i8* %25, i64 %26, !dbg !1800
  %27 = load i8, i8* %arrayidx26, align 1, !dbg !1800
  %conv27 = zext i8 %27 to i64, !dbg !1800
  %add28 = add i64 %mul24, %conv27, !dbg !1802
  store i64 %add28, i64* %w, align 8, !dbg !1803
  br label %for.inc, !dbg !1804

for.inc:                                          ; preds = %for.body23
  %28 = load i32, i32* %k, align 4, !dbg !1805
  %inc29 = add i32 %28, 1, !dbg !1805
  store i32 %inc29, i32* %k, align 4, !dbg !1805
  br label %for.cond19, !dbg !1806, !llvm.loop !1807

for.end30:                                        ; preds = %for.cond19
  %29 = load i64*, i64** %rp.addr, align 8, !dbg !1809
  %30 = load i64*, i64** %rp.addr, align 8, !dbg !1810
  %31 = load i64, i64* %rn, align 8, !dbg !1811
  %32 = load %struct.mpn_base_info*, %struct.mpn_base_info** %info.addr, align 8, !dbg !1812
  %bb = getelementptr inbounds %struct.mpn_base_info, %struct.mpn_base_info* %32, i32 0, i32 1, !dbg !1813
  %33 = load i64, i64* %bb, align 8, !dbg !1813
  %call = call i64 @mpn_mul_1(i64* %29, i64* %30, i64 %31, i64 %33), !dbg !1814
  store i64 %call, i64* %cy, align 8, !dbg !1815
  %34 = load i64*, i64** %rp.addr, align 8, !dbg !1816
  %35 = load i64*, i64** %rp.addr, align 8, !dbg !1817
  %36 = load i64, i64* %rn, align 8, !dbg !1818
  %37 = load i64, i64* %w, align 8, !dbg !1819
  %call31 = call i64 @mpn_add_1(i64* %34, i64* %35, i64 %36, i64 %37), !dbg !1820
  %38 = load i64, i64* %cy, align 8, !dbg !1821
  %add32 = add i64 %38, %call31, !dbg !1821
  store i64 %add32, i64* %cy, align 8, !dbg !1821
  %39 = load i64, i64* %cy, align 8, !dbg !1822
  %cmp33 = icmp ugt i64 %39, 0, !dbg !1824
  br i1 %cmp33, label %if.then, label %if.end, !dbg !1825

if.then:                                          ; preds = %for.end30
  %40 = load i64, i64* %cy, align 8, !dbg !1826
  %41 = load i64*, i64** %rp.addr, align 8, !dbg !1827
  %42 = load i64, i64* %rn, align 8, !dbg !1828
  %inc35 = add nsw i64 %42, 1, !dbg !1828
  store i64 %inc35, i64* %rn, align 8, !dbg !1828
  %arrayidx36 = getelementptr inbounds i64, i64* %41, i64 %42, !dbg !1827
  store i64 %40, i64* %arrayidx36, align 8, !dbg !1829
  br label %if.end, !dbg !1827

if.end:                                           ; preds = %if.then, %for.end30
  br label %for.cond12, !dbg !1830, !llvm.loop !1831

for.end37:                                        ; preds = %for.cond12
  %43 = load i64, i64* %rn, align 8, !dbg !1833
  ret i64 %43, !dbg !1834
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_init(%struct.__mpz_struct* %r) #0 !dbg !1835 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !1845, metadata !DIExpression()), !dbg !1846
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1847
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 0, !dbg !1848
  store i32 1, i32* %_mp_alloc, align 8, !dbg !1849
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1850
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %1, i32 0, i32 1, !dbg !1851
  store i32 0, i32* %_mp_size, align 4, !dbg !1852
  %call = call i64* @gmp_xalloc_limbs(i64 1), !dbg !1853
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1854
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 2, !dbg !1855
  store i64* %call, i64** %_mp_d, align 8, !dbg !1856
  ret void, !dbg !1857
}

; Function Attrs: noinline nounwind uwtable
define internal i64* @gmp_xalloc_limbs(i64 %size) #0 !dbg !1858 {
entry:
  %size.addr = alloca i64, align 8
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !1861, metadata !DIExpression()), !dbg !1862
  %0 = load i8* (i64)*, i8* (i64)** @gmp_allocate_func, align 8, !dbg !1863
  %1 = load i64, i64* %size.addr, align 8, !dbg !1863
  %mul = mul i64 %1, 8, !dbg !1863
  %call = call i8* %0(i64 %mul), !dbg !1863
  %2 = bitcast i8* %call to i64*, !dbg !1863
  ret i64* %2, !dbg !1864
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_init2(%struct.__mpz_struct* %r, i64 %bits) #0 !dbg !1865 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %bits.addr = alloca i64, align 8
  %rn = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !1868, metadata !DIExpression()), !dbg !1869
  store i64 %bits, i64* %bits.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bits.addr, metadata !1870, metadata !DIExpression()), !dbg !1871
  call void @llvm.dbg.declare(metadata i64* %rn, metadata !1872, metadata !DIExpression()), !dbg !1873
  %0 = load i64, i64* %bits.addr, align 8, !dbg !1874
  %cmp = icmp ne i64 %0, 0, !dbg !1875
  %conv = zext i1 %cmp to i32, !dbg !1875
  %conv1 = sext i32 %conv to i64, !dbg !1876
  %1 = load i64, i64* %bits.addr, align 8, !dbg !1877
  %sub = sub i64 %1, %conv1, !dbg !1877
  store i64 %sub, i64* %bits.addr, align 8, !dbg !1877
  %2 = load i64, i64* %bits.addr, align 8, !dbg !1878
  %div = udiv i64 %2, 64, !dbg !1879
  %add = add i64 1, %div, !dbg !1880
  store i64 %add, i64* %rn, align 8, !dbg !1881
  %3 = load i64, i64* %rn, align 8, !dbg !1882
  %conv2 = trunc i64 %3 to i32, !dbg !1882
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1883
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 0, !dbg !1884
  store i32 %conv2, i32* %_mp_alloc, align 8, !dbg !1885
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1886
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %5, i32 0, i32 1, !dbg !1887
  store i32 0, i32* %_mp_size, align 4, !dbg !1888
  %6 = load i64, i64* %rn, align 8, !dbg !1889
  %call = call i64* @gmp_xalloc_limbs(i64 %6), !dbg !1890
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1891
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %7, i32 0, i32 2, !dbg !1892
  store i64* %call, i64** %_mp_d, align 8, !dbg !1893
  ret void, !dbg !1894
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_clear(%struct.__mpz_struct* %r) #0 !dbg !1895 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !1896, metadata !DIExpression()), !dbg !1897
  %0 = load void (i8*, i64)*, void (i8*, i64)** @gmp_free_func, align 8, !dbg !1898
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1898
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %1, i32 0, i32 2, !dbg !1898
  %2 = load i64*, i64** %_mp_d, align 8, !dbg !1898
  %3 = bitcast i64* %2 to i8*, !dbg !1898
  call void %0(i8* %3, i64 0), !dbg !1898
  ret void, !dbg !1899
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_set_si(%struct.__mpz_struct* %r, i64 %x) #0 !dbg !1900 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %x.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !1903, metadata !DIExpression()), !dbg !1904
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !1905, metadata !DIExpression()), !dbg !1906
  %0 = load i64, i64* %x.addr, align 8, !dbg !1907
  %cmp = icmp sge i64 %0, 0, !dbg !1909
  br i1 %cmp, label %if.then, label %if.else, !dbg !1910

if.then:                                          ; preds = %entry
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1911
  %2 = load i64, i64* %x.addr, align 8, !dbg !1912
  call void @mpz_set_ui(%struct.__mpz_struct* %1, i64 %2), !dbg !1913
  br label %if.end, !dbg !1913

if.else:                                          ; preds = %entry
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1914
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %3, i32 0, i32 1, !dbg !1916
  store i32 -1, i32* %_mp_size, align 4, !dbg !1917
  %4 = load i64, i64* %x.addr, align 8, !dbg !1918
  %add = add nsw i64 %4, 1, !dbg !1918
  %sub = sub i64 %add, 1, !dbg !1918
  %sub1 = sub i64 0, %sub, !dbg !1918
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1919
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %5, i32 0, i32 2, !dbg !1920
  %6 = load i64*, i64** %_mp_d, align 8, !dbg !1920
  %arrayidx = getelementptr inbounds i64, i64* %6, i64 0, !dbg !1919
  store i64 %sub1, i64* %arrayidx, align 8, !dbg !1921
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !1922
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_set_ui(%struct.__mpz_struct* %r, i64 %x) #0 !dbg !1923 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %x.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !1926, metadata !DIExpression()), !dbg !1927
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !1928, metadata !DIExpression()), !dbg !1929
  %0 = load i64, i64* %x.addr, align 8, !dbg !1930
  %cmp = icmp ugt i64 %0, 0, !dbg !1932
  br i1 %cmp, label %if.then, label %if.else, !dbg !1933

if.then:                                          ; preds = %entry
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1934
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %1, i32 0, i32 1, !dbg !1936
  store i32 1, i32* %_mp_size, align 4, !dbg !1937
  %2 = load i64, i64* %x.addr, align 8, !dbg !1938
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1939
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %3, i32 0, i32 2, !dbg !1940
  %4 = load i64*, i64** %_mp_d, align 8, !dbg !1940
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !1939
  store i64 %2, i64* %arrayidx, align 8, !dbg !1941
  br label %if.end, !dbg !1942

if.else:                                          ; preds = %entry
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1943
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %5, i32 0, i32 1, !dbg !1944
  store i32 0, i32* %_mp_size1, align 4, !dbg !1945
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !1946
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_set(%struct.__mpz_struct* %r, %struct.__mpz_struct* %x) #0 !dbg !1947 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %x.addr = alloca %struct.__mpz_struct*, align 8
  %n = alloca i64, align 8
  %rp = alloca i64*, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !1952, metadata !DIExpression()), !dbg !1953
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %x.addr, metadata !1954, metadata !DIExpression()), !dbg !1955
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1956
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !1958
  %cmp = icmp ne %struct.__mpz_struct* %0, %1, !dbg !1959
  br i1 %cmp, label %if.then, label %if.end, !dbg !1960

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1961, metadata !DIExpression()), !dbg !1963
  call void @llvm.dbg.declare(metadata i64** %rp, metadata !1964, metadata !DIExpression()), !dbg !1965
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !1966
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !1966
  %3 = load i32, i32* %_mp_size, align 4, !dbg !1966
  %cmp1 = icmp sge i32 %3, 0, !dbg !1966
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !1966

cond.true:                                        ; preds = %if.then
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !1966
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !1966
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !1966
  br label %cond.end, !dbg !1966

cond.false:                                       ; preds = %if.then
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !1966
  %_mp_size3 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 1, !dbg !1966
  %7 = load i32, i32* %_mp_size3, align 4, !dbg !1966
  %sub = sub nsw i32 0, %7, !dbg !1966
  br label %cond.end, !dbg !1966

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %5, %cond.true ], [ %sub, %cond.false ], !dbg !1966
  %conv = sext i32 %cond to i64, !dbg !1966
  store i64 %conv, i64* %n, align 8, !dbg !1967
  %8 = load i64, i64* %n, align 8, !dbg !1968
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1968
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %9, i32 0, i32 0, !dbg !1968
  %10 = load i32, i32* %_mp_alloc, align 8, !dbg !1968
  %conv4 = sext i32 %10 to i64, !dbg !1968
  %cmp5 = icmp sgt i64 %8, %conv4, !dbg !1968
  br i1 %cmp5, label %cond.true7, label %cond.false8, !dbg !1968

cond.true7:                                       ; preds = %cond.end
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1968
  %12 = load i64, i64* %n, align 8, !dbg !1968
  %call = call i8* @mpz_realloc(%struct.__mpz_struct* %11, i64 %12), !dbg !1968
  br label %cond.end9, !dbg !1968

cond.false8:                                      ; preds = %cond.end
  %13 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1968
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %13, i32 0, i32 2, !dbg !1968
  %14 = load i64*, i64** %_mp_d, align 8, !dbg !1968
  %15 = bitcast i64* %14 to i8*, !dbg !1968
  br label %cond.end9, !dbg !1968

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i8* [ %call, %cond.true7 ], [ %15, %cond.false8 ], !dbg !1968
  %16 = bitcast i8* %cond10 to i64*, !dbg !1968
  store i64* %16, i64** %rp, align 8, !dbg !1969
  %17 = load i64*, i64** %rp, align 8, !dbg !1970
  %18 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !1971
  %_mp_d11 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %18, i32 0, i32 2, !dbg !1972
  %19 = load i64*, i64** %_mp_d11, align 8, !dbg !1972
  %20 = load i64, i64* %n, align 8, !dbg !1973
  call void @mpn_copyi(i64* %17, i64* %19, i64 %20), !dbg !1974
  %21 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !1975
  %_mp_size12 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %21, i32 0, i32 1, !dbg !1976
  %22 = load i32, i32* %_mp_size12, align 4, !dbg !1976
  %23 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1977
  %_mp_size13 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %23, i32 0, i32 1, !dbg !1978
  store i32 %22, i32* %_mp_size13, align 4, !dbg !1979
  br label %if.end, !dbg !1980

if.end:                                           ; preds = %cond.end9, %entry
  ret void, !dbg !1981
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @mpz_realloc(%struct.__mpz_struct* %r, i64 %size) #0 !dbg !1982 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %size.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !1985, metadata !DIExpression()), !dbg !1986
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !1987, metadata !DIExpression()), !dbg !1988
  %0 = load i64, i64* %size.addr, align 8, !dbg !1989
  %cmp = icmp sgt i64 %0, 1, !dbg !1989
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !1989

cond.true:                                        ; preds = %entry
  %1 = load i64, i64* %size.addr, align 8, !dbg !1989
  br label %cond.end, !dbg !1989

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !1989

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %1, %cond.true ], [ 1, %cond.false ], !dbg !1989
  store i64 %cond, i64* %size.addr, align 8, !dbg !1990
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1991
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 2, !dbg !1992
  %3 = load i64*, i64** %_mp_d, align 8, !dbg !1992
  %4 = load i64, i64* %size.addr, align 8, !dbg !1993
  %call = call i64* @gmp_xrealloc_limbs(i64* %3, i64 %4), !dbg !1994
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1995
  %_mp_d1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %5, i32 0, i32 2, !dbg !1996
  store i64* %call, i64** %_mp_d1, align 8, !dbg !1997
  %6 = load i64, i64* %size.addr, align 8, !dbg !1998
  %conv = trunc i64 %6 to i32, !dbg !1998
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !1999
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %7, i32 0, i32 0, !dbg !2000
  store i32 %conv, i32* %_mp_alloc, align 8, !dbg !2001
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2002
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 1, !dbg !2002
  %9 = load i32, i32* %_mp_size, align 4, !dbg !2002
  %cmp2 = icmp sge i32 %9, 0, !dbg !2002
  br i1 %cmp2, label %cond.true4, label %cond.false6, !dbg !2002

cond.true4:                                       ; preds = %cond.end
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2002
  %_mp_size5 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 1, !dbg !2002
  %11 = load i32, i32* %_mp_size5, align 4, !dbg !2002
  br label %cond.end8, !dbg !2002

cond.false6:                                      ; preds = %cond.end
  %12 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2002
  %_mp_size7 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %12, i32 0, i32 1, !dbg !2002
  %13 = load i32, i32* %_mp_size7, align 4, !dbg !2002
  %sub = sub nsw i32 0, %13, !dbg !2002
  br label %cond.end8, !dbg !2002

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i32 [ %11, %cond.true4 ], [ %sub, %cond.false6 ], !dbg !2002
  %conv10 = sext i32 %cond9 to i64, !dbg !2002
  %14 = load i64, i64* %size.addr, align 8, !dbg !2004
  %cmp11 = icmp sgt i64 %conv10, %14, !dbg !2005
  br i1 %cmp11, label %if.then, label %if.end, !dbg !2006

if.then:                                          ; preds = %cond.end8
  %15 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2007
  %_mp_size13 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %15, i32 0, i32 1, !dbg !2008
  store i32 0, i32* %_mp_size13, align 4, !dbg !2009
  br label %if.end, !dbg !2007

if.end:                                           ; preds = %if.then, %cond.end8
  %16 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2010
  %_mp_d14 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %16, i32 0, i32 2, !dbg !2011
  %17 = load i64*, i64** %_mp_d14, align 8, !dbg !2011
  %18 = bitcast i64* %17 to i8*, !dbg !2010
  ret i8* %18, !dbg !2012
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_init_set_si(%struct.__mpz_struct* %r, i64 %x) #0 !dbg !2013 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %x.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !2014, metadata !DIExpression()), !dbg !2015
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !2016, metadata !DIExpression()), !dbg !2017
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2018
  call void @mpz_init(%struct.__mpz_struct* %0), !dbg !2019
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2020
  %2 = load i64, i64* %x.addr, align 8, !dbg !2021
  call void @mpz_set_si(%struct.__mpz_struct* %1, i64 %2), !dbg !2022
  ret void, !dbg !2023
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_init_set_ui(%struct.__mpz_struct* %r, i64 %x) #0 !dbg !2024 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %x.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !2025, metadata !DIExpression()), !dbg !2026
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !2027, metadata !DIExpression()), !dbg !2028
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2029
  call void @mpz_init(%struct.__mpz_struct* %0), !dbg !2030
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2031
  %2 = load i64, i64* %x.addr, align 8, !dbg !2032
  call void @mpz_set_ui(%struct.__mpz_struct* %1, i64 %2), !dbg !2033
  ret void, !dbg !2034
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_init_set(%struct.__mpz_struct* %r, %struct.__mpz_struct* %x) #0 !dbg !2035 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %x.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !2036, metadata !DIExpression()), !dbg !2037
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %x.addr, metadata !2038, metadata !DIExpression()), !dbg !2039
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2040
  call void @mpz_init(%struct.__mpz_struct* %0), !dbg !2041
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2042
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2043
  call void @mpz_set(%struct.__mpz_struct* %1, %struct.__mpz_struct* %2), !dbg !2044
  ret void, !dbg !2045
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_fits_slong_p(%struct.__mpz_struct* %u) #0 !dbg !2046 {
entry:
  %retval = alloca i32, align 4
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %us = alloca i64, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !2049, metadata !DIExpression()), !dbg !2050
  call void @llvm.dbg.declare(metadata i64* %us, metadata !2051, metadata !DIExpression()), !dbg !2052
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2053
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2054
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2054
  %conv = sext i32 %1 to i64, !dbg !2053
  store i64 %conv, i64* %us, align 8, !dbg !2052
  %2 = load i64, i64* %us, align 8, !dbg !2055
  %cmp = icmp eq i64 %2, 0, !dbg !2057
  br i1 %cmp, label %if.then, label %if.else, !dbg !2058

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !2059
  br label %return, !dbg !2059

if.else:                                          ; preds = %entry
  %3 = load i64, i64* %us, align 8, !dbg !2060
  %cmp2 = icmp eq i64 %3, 1, !dbg !2062
  br i1 %cmp2, label %if.then4, label %if.else7, !dbg !2063

if.then4:                                         ; preds = %if.else
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2064
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 2, !dbg !2065
  %5 = load i64*, i64** %_mp_d, align 8, !dbg !2065
  %arrayidx = getelementptr inbounds i64, i64* %5, i64 0, !dbg !2064
  %6 = load i64, i64* %arrayidx, align 8, !dbg !2064
  %cmp5 = icmp ult i64 %6, -9223372036854775808, !dbg !2066
  %conv6 = zext i1 %cmp5 to i32, !dbg !2066
  store i32 %conv6, i32* %retval, align 4, !dbg !2067
  br label %return, !dbg !2067

if.else7:                                         ; preds = %if.else
  %7 = load i64, i64* %us, align 8, !dbg !2068
  %cmp8 = icmp eq i64 %7, -1, !dbg !2070
  br i1 %cmp8, label %if.then10, label %if.else15, !dbg !2071

if.then10:                                        ; preds = %if.else7
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2072
  %_mp_d11 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 2, !dbg !2073
  %9 = load i64*, i64** %_mp_d11, align 8, !dbg !2073
  %arrayidx12 = getelementptr inbounds i64, i64* %9, i64 0, !dbg !2072
  %10 = load i64, i64* %arrayidx12, align 8, !dbg !2072
  %cmp13 = icmp ule i64 %10, -9223372036854775808, !dbg !2074
  %conv14 = zext i1 %cmp13 to i32, !dbg !2074
  store i32 %conv14, i32* %retval, align 4, !dbg !2075
  br label %return, !dbg !2075

if.else15:                                        ; preds = %if.else7
  store i32 0, i32* %retval, align 4, !dbg !2076
  br label %return, !dbg !2076

return:                                           ; preds = %if.else15, %if.then10, %if.then4, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !2077
  ret i32 %11, !dbg !2077
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_fits_ulong_p(%struct.__mpz_struct* %u) #0 !dbg !2078 {
entry:
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %us = alloca i64, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !2079, metadata !DIExpression()), !dbg !2080
  call void @llvm.dbg.declare(metadata i64* %us, metadata !2081, metadata !DIExpression()), !dbg !2082
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2083
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2084
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2084
  %conv = sext i32 %1 to i64, !dbg !2083
  store i64 %conv, i64* %us, align 8, !dbg !2082
  %2 = load i64, i64* %us, align 8, !dbg !2085
  %3 = load i64, i64* %us, align 8, !dbg !2086
  %cmp = icmp sgt i64 %3, 0, !dbg !2087
  %conv1 = zext i1 %cmp to i32, !dbg !2087
  %conv2 = sext i32 %conv1 to i64, !dbg !2088
  %cmp3 = icmp eq i64 %2, %conv2, !dbg !2089
  %conv4 = zext i1 %cmp3 to i32, !dbg !2089
  ret i32 %conv4, !dbg !2090
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_get_si(%struct.__mpz_struct* %u) #0 !dbg !2091 {
entry:
  %retval = alloca i64, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %us = alloca i64, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !2094, metadata !DIExpression()), !dbg !2095
  call void @llvm.dbg.declare(metadata i64* %us, metadata !2096, metadata !DIExpression()), !dbg !2097
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2098
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2099
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2099
  %conv = sext i32 %1 to i64, !dbg !2098
  store i64 %conv, i64* %us, align 8, !dbg !2097
  %2 = load i64, i64* %us, align 8, !dbg !2100
  %cmp = icmp sgt i64 %2, 0, !dbg !2102
  br i1 %cmp, label %if.then, label %if.else, !dbg !2103

if.then:                                          ; preds = %entry
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2104
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %3, i32 0, i32 2, !dbg !2105
  %4 = load i64*, i64** %_mp_d, align 8, !dbg !2105
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 0, !dbg !2104
  %5 = load i64, i64* %arrayidx, align 8, !dbg !2104
  %and = and i64 %5, 9223372036854775807, !dbg !2106
  store i64 %and, i64* %retval, align 8, !dbg !2107
  br label %return, !dbg !2107

if.else:                                          ; preds = %entry
  %6 = load i64, i64* %us, align 8, !dbg !2108
  %cmp2 = icmp slt i64 %6, 0, !dbg !2110
  br i1 %cmp2, label %if.then4, label %if.else7, !dbg !2111

if.then4:                                         ; preds = %if.else
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2112
  %_mp_d5 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %7, i32 0, i32 2, !dbg !2113
  %8 = load i64*, i64** %_mp_d5, align 8, !dbg !2113
  %arrayidx6 = getelementptr inbounds i64, i64* %8, i64 0, !dbg !2112
  %9 = load i64, i64* %arrayidx6, align 8, !dbg !2112
  %sub = sub i64 0, %9, !dbg !2114
  %or = or i64 %sub, -9223372036854775808, !dbg !2115
  store i64 %or, i64* %retval, align 8, !dbg !2116
  br label %return, !dbg !2116

if.else7:                                         ; preds = %if.else
  store i64 0, i64* %retval, align 8, !dbg !2117
  br label %return, !dbg !2117

return:                                           ; preds = %if.else7, %if.then4, %if.then
  %10 = load i64, i64* %retval, align 8, !dbg !2118
  ret i64 %10, !dbg !2118
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_get_ui(%struct.__mpz_struct* %u) #0 !dbg !2119 {
entry:
  %u.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !2122, metadata !DIExpression()), !dbg !2123
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2124
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2125
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2125
  %cmp = icmp eq i32 %1, 0, !dbg !2126
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2124

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !2124

cond.false:                                       ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2127
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 2, !dbg !2128
  %3 = load i64*, i64** %_mp_d, align 8, !dbg !2128
  %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !2127
  %4 = load i64, i64* %arrayidx, align 8, !dbg !2127
  br label %cond.end, !dbg !2124

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %4, %cond.false ], !dbg !2124
  ret i64 %cond, !dbg !2129
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_size(%struct.__mpz_struct* %u) #0 !dbg !2130 {
entry:
  %u.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !2133, metadata !DIExpression()), !dbg !2134
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2135
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2135
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2135
  %cmp = icmp sge i32 %1, 0, !dbg !2135
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2135

cond.true:                                        ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2135
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !2135
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !2135
  br label %cond.end, !dbg !2135

cond.false:                                       ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2135
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !2135
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !2135
  %sub = sub nsw i32 0, %5, !dbg !2135
  br label %cond.end, !dbg !2135

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !2135
  %conv = sext i32 %cond to i64, !dbg !2135
  ret i64 %conv, !dbg !2136
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_getlimbn(%struct.__mpz_struct* %u, i64 %n) #0 !dbg !2137 {
entry:
  %retval = alloca i64, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca i64, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !2140, metadata !DIExpression()), !dbg !2141
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !2142, metadata !DIExpression()), !dbg !2143
  %0 = load i64, i64* %n.addr, align 8, !dbg !2144
  %cmp = icmp sge i64 %0, 0, !dbg !2146
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !2147

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8, !dbg !2148
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2149
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !2149
  %3 = load i32, i32* %_mp_size, align 4, !dbg !2149
  %cmp1 = icmp sge i32 %3, 0, !dbg !2149
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !2149

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2149
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !2149
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !2149
  br label %cond.end, !dbg !2149

cond.false:                                       ; preds = %land.lhs.true
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2149
  %_mp_size3 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 1, !dbg !2149
  %7 = load i32, i32* %_mp_size3, align 4, !dbg !2149
  %sub = sub nsw i32 0, %7, !dbg !2149
  br label %cond.end, !dbg !2149

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %5, %cond.true ], [ %sub, %cond.false ], !dbg !2149
  %conv = sext i32 %cond to i64, !dbg !2149
  %cmp4 = icmp slt i64 %1, %conv, !dbg !2150
  br i1 %cmp4, label %if.then, label %if.else, !dbg !2151

if.then:                                          ; preds = %cond.end
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2152
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 2, !dbg !2153
  %9 = load i64*, i64** %_mp_d, align 8, !dbg !2153
  %10 = load i64, i64* %n.addr, align 8, !dbg !2154
  %arrayidx = getelementptr inbounds i64, i64* %9, i64 %10, !dbg !2152
  %11 = load i64, i64* %arrayidx, align 8, !dbg !2152
  store i64 %11, i64* %retval, align 8, !dbg !2155
  br label %return, !dbg !2155

if.else:                                          ; preds = %cond.end, %entry
  store i64 0, i64* %retval, align 8, !dbg !2156
  br label %return, !dbg !2156

return:                                           ; preds = %if.else, %if.then
  %12 = load i64, i64* %retval, align 8, !dbg !2157
  ret i64 %12, !dbg !2157
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_realloc2(%struct.__mpz_struct* %x, i64 %n) #0 !dbg !2158 {
entry:
  %x.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca i64, align 8
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %x.addr, metadata !2159, metadata !DIExpression()), !dbg !2160
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !2161, metadata !DIExpression()), !dbg !2162
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2163
  %1 = load i64, i64* %n.addr, align 8, !dbg !2164
  %2 = load i64, i64* %n.addr, align 8, !dbg !2165
  %cmp = icmp ne i64 %2, 0, !dbg !2166
  %conv = zext i1 %cmp to i32, !dbg !2166
  %conv1 = sext i32 %conv to i64, !dbg !2167
  %sub = sub i64 %1, %conv1, !dbg !2168
  %div = udiv i64 %sub, 64, !dbg !2169
  %add = add i64 1, %div, !dbg !2170
  %call = call i8* @mpz_realloc(%struct.__mpz_struct* %0, i64 %add), !dbg !2171
  ret void, !dbg !2172
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64* @mpz_limbs_read(%struct.__mpz_struct* %x) #0 !dbg !2173 {
entry:
  %x.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %x.addr, metadata !2177, metadata !DIExpression()), !dbg !2178
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2179
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 2, !dbg !2180
  %1 = load i64*, i64** %_mp_d, align 8, !dbg !2180
  ret i64* %1, !dbg !2181
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64* @mpz_limbs_modify(%struct.__mpz_struct* %x, i64 %n) #0 !dbg !2182 {
entry:
  %x.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca i64, align 8
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %x.addr, metadata !2185, metadata !DIExpression()), !dbg !2186
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !2187, metadata !DIExpression()), !dbg !2188
  %0 = load i64, i64* %n.addr, align 8, !dbg !2189
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2189
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %1, i32 0, i32 0, !dbg !2189
  %2 = load i32, i32* %_mp_alloc, align 8, !dbg !2189
  %conv = sext i32 %2 to i64, !dbg !2189
  %cmp = icmp sgt i64 %0, %conv, !dbg !2189
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2189

cond.true:                                        ; preds = %entry
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2189
  %4 = load i64, i64* %n.addr, align 8, !dbg !2189
  %call = call i8* @mpz_realloc(%struct.__mpz_struct* %3, i64 %4), !dbg !2189
  br label %cond.end, !dbg !2189

cond.false:                                       ; preds = %entry
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2189
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %5, i32 0, i32 2, !dbg !2189
  %6 = load i64*, i64** %_mp_d, align 8, !dbg !2189
  %7 = bitcast i64* %6 to i8*, !dbg !2189
  br label %cond.end, !dbg !2189

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %7, %cond.false ], !dbg !2189
  %8 = bitcast i8* %cond to i64*, !dbg !2189
  ret i64* %8, !dbg !2190
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64* @mpz_limbs_write(%struct.__mpz_struct* %x, i64 %n) #0 !dbg !2191 {
entry:
  %x.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca i64, align 8
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %x.addr, metadata !2192, metadata !DIExpression()), !dbg !2193
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !2194, metadata !DIExpression()), !dbg !2195
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2196
  %1 = load i64, i64* %n.addr, align 8, !dbg !2197
  %call = call i64* @mpz_limbs_modify(%struct.__mpz_struct* %0, i64 %1), !dbg !2198
  ret i64* %call, !dbg !2199
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_limbs_finish(%struct.__mpz_struct* %x, i64 %xs) #0 !dbg !2200 {
entry:
  %x.addr = alloca %struct.__mpz_struct*, align 8
  %xs.addr = alloca i64, align 8
  %xn = alloca i64, align 8
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %x.addr, metadata !2203, metadata !DIExpression()), !dbg !2204
  store i64 %xs, i64* %xs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %xs.addr, metadata !2205, metadata !DIExpression()), !dbg !2206
  call void @llvm.dbg.declare(metadata i64* %xn, metadata !2207, metadata !DIExpression()), !dbg !2208
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2209
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 2, !dbg !2210
  %1 = load i64*, i64** %_mp_d, align 8, !dbg !2210
  %2 = load i64, i64* %xs.addr, align 8, !dbg !2211
  %cmp = icmp sge i64 %2, 0, !dbg !2211
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2211

cond.true:                                        ; preds = %entry
  %3 = load i64, i64* %xs.addr, align 8, !dbg !2211
  br label %cond.end, !dbg !2211

cond.false:                                       ; preds = %entry
  %4 = load i64, i64* %xs.addr, align 8, !dbg !2211
  %sub = sub nsw i64 0, %4, !dbg !2211
  br label %cond.end, !dbg !2211

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !2211
  %call = call i64 @mpn_normalized_size(i64* %1, i64 %cond), !dbg !2212
  store i64 %call, i64* %xn, align 8, !dbg !2213
  %5 = load i64, i64* %xs.addr, align 8, !dbg !2214
  %cmp1 = icmp slt i64 %5, 0, !dbg !2215
  br i1 %cmp1, label %cond.true2, label %cond.false4, !dbg !2214

cond.true2:                                       ; preds = %cond.end
  %6 = load i64, i64* %xn, align 8, !dbg !2216
  %sub3 = sub nsw i64 0, %6, !dbg !2217
  br label %cond.end5, !dbg !2214

cond.false4:                                      ; preds = %cond.end
  %7 = load i64, i64* %xn, align 8, !dbg !2218
  br label %cond.end5, !dbg !2214

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi i64 [ %sub3, %cond.true2 ], [ %7, %cond.false4 ], !dbg !2214
  %conv = trunc i64 %cond6 to i32, !dbg !2214
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2219
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 1, !dbg !2220
  store i32 %conv, i32* %_mp_size, align 4, !dbg !2221
  ret void, !dbg !2222
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpn_normalized_size(i64* %xp, i64 %n) #0 !dbg !2223 {
entry:
  %xp.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  store i64* %xp, i64** %xp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %xp.addr, metadata !2226, metadata !DIExpression()), !dbg !2227
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !2228, metadata !DIExpression()), !dbg !2229
  br label %for.cond, !dbg !2230

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %n.addr, align 8, !dbg !2231
  %cmp = icmp sgt i64 %0, 0, !dbg !2234
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !2235

land.rhs:                                         ; preds = %for.cond
  %1 = load i64*, i64** %xp.addr, align 8, !dbg !2236
  %2 = load i64, i64* %n.addr, align 8, !dbg !2237
  %sub = sub nsw i64 %2, 1, !dbg !2238
  %arrayidx = getelementptr inbounds i64, i64* %1, i64 %sub, !dbg !2236
  %3 = load i64, i64* %arrayidx, align 8, !dbg !2236
  %cmp1 = icmp eq i64 %3, 0, !dbg !2239
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %4 = phi i1 [ false, %for.cond ], [ %cmp1, %land.rhs ], !dbg !2240
  br i1 %4, label %for.body, label %for.end, !dbg !2241

for.body:                                         ; preds = %land.end
  br label %for.inc, !dbg !2241

for.inc:                                          ; preds = %for.body
  %5 = load i64, i64* %n.addr, align 8, !dbg !2242
  %dec = add nsw i64 %5, -1, !dbg !2242
  store i64 %dec, i64* %n.addr, align 8, !dbg !2242
  br label %for.cond, !dbg !2243, !llvm.loop !2244

for.end:                                          ; preds = %land.end
  %6 = load i64, i64* %n.addr, align 8, !dbg !2246
  ret i64 %6, !dbg !2247
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.__mpz_struct* @mpz_roinit_n(%struct.__mpz_struct* %x, i64* %xp, i64 %xs) #0 !dbg !2248 {
entry:
  %x.addr = alloca %struct.__mpz_struct*, align 8
  %xp.addr = alloca i64*, align 8
  %xs.addr = alloca i64, align 8
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %x.addr, metadata !2251, metadata !DIExpression()), !dbg !2252
  store i64* %xp, i64** %xp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %xp.addr, metadata !2253, metadata !DIExpression()), !dbg !2254
  store i64 %xs, i64* %xs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %xs.addr, metadata !2255, metadata !DIExpression()), !dbg !2256
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2257
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 0, !dbg !2258
  store i32 0, i32* %_mp_alloc, align 8, !dbg !2259
  %1 = load i64*, i64** %xp.addr, align 8, !dbg !2260
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2261
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 2, !dbg !2262
  store i64* %1, i64** %_mp_d, align 8, !dbg !2263
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2264
  %4 = load i64, i64* %xs.addr, align 8, !dbg !2265
  call void @mpz_limbs_finish(%struct.__mpz_struct* %3, i64 %4), !dbg !2266
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2267
  ret %struct.__mpz_struct* %5, !dbg !2268
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_set_d(%struct.__mpz_struct* %r, double %x) #0 !dbg !2269 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %x.addr = alloca double, align 8
  %sign = alloca i32, align 4
  %rp = alloca i64*, align 8
  %rn = alloca i64, align 8
  %i = alloca i64, align 8
  %B = alloca double, align 8
  %Bi = alloca double, align 8
  %f = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !2272, metadata !DIExpression()), !dbg !2273
  store double %x, double* %x.addr, align 8
  call void @llvm.dbg.declare(metadata double* %x.addr, metadata !2274, metadata !DIExpression()), !dbg !2275
  call void @llvm.dbg.declare(metadata i32* %sign, metadata !2276, metadata !DIExpression()), !dbg !2277
  call void @llvm.dbg.declare(metadata i64** %rp, metadata !2278, metadata !DIExpression()), !dbg !2279
  call void @llvm.dbg.declare(metadata i64* %rn, metadata !2280, metadata !DIExpression()), !dbg !2281
  call void @llvm.dbg.declare(metadata i64* %i, metadata !2282, metadata !DIExpression()), !dbg !2283
  call void @llvm.dbg.declare(metadata double* %B, metadata !2284, metadata !DIExpression()), !dbg !2285
  call void @llvm.dbg.declare(metadata double* %Bi, metadata !2286, metadata !DIExpression()), !dbg !2287
  call void @llvm.dbg.declare(metadata i64* %f, metadata !2288, metadata !DIExpression()), !dbg !2289
  %0 = load double, double* %x.addr, align 8, !dbg !2290
  %1 = load double, double* %x.addr, align 8, !dbg !2292
  %cmp = fcmp une double %0, %1, !dbg !2293
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2294

lor.lhs.false:                                    ; preds = %entry
  %2 = load double, double* %x.addr, align 8, !dbg !2295
  %3 = load double, double* %x.addr, align 8, !dbg !2296
  %mul = fmul double %3, 5.000000e-01, !dbg !2297
  %cmp1 = fcmp oeq double %2, %mul, !dbg !2298
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2299

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2300
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !2302
  store i32 0, i32* %_mp_size, align 4, !dbg !2303
  br label %return, !dbg !2304

if.end:                                           ; preds = %lor.lhs.false
  %5 = load double, double* %x.addr, align 8, !dbg !2305
  %cmp2 = fcmp olt double %5, 0.000000e+00, !dbg !2306
  %conv = zext i1 %cmp2 to i32, !dbg !2306
  store i32 %conv, i32* %sign, align 4, !dbg !2307
  %6 = load i32, i32* %sign, align 4, !dbg !2308
  %tobool = icmp ne i32 %6, 0, !dbg !2308
  br i1 %tobool, label %if.then3, label %if.end4, !dbg !2310

if.then3:                                         ; preds = %if.end
  %7 = load double, double* %x.addr, align 8, !dbg !2311
  %fneg = fneg double %7, !dbg !2312
  store double %fneg, double* %x.addr, align 8, !dbg !2313
  br label %if.end4, !dbg !2314

if.end4:                                          ; preds = %if.then3, %if.end
  %8 = load double, double* %x.addr, align 8, !dbg !2315
  %cmp5 = fcmp olt double %8, 1.000000e+00, !dbg !2317
  br i1 %cmp5, label %if.then7, label %if.end9, !dbg !2318

if.then7:                                         ; preds = %if.end4
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2319
  %_mp_size8 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %9, i32 0, i32 1, !dbg !2321
  store i32 0, i32* %_mp_size8, align 4, !dbg !2322
  br label %return, !dbg !2323

if.end9:                                          ; preds = %if.end4
  store double 0x43F0000000000000, double* %B, align 8, !dbg !2324
  %10 = load double, double* %B, align 8, !dbg !2325
  %div = fdiv double 1.000000e+00, %10, !dbg !2326
  store double %div, double* %Bi, align 8, !dbg !2327
  store i64 1, i64* %rn, align 8, !dbg !2328
  br label %for.cond, !dbg !2330

for.cond:                                         ; preds = %for.inc, %if.end9
  %11 = load double, double* %x.addr, align 8, !dbg !2331
  %12 = load double, double* %B, align 8, !dbg !2333
  %cmp10 = fcmp oge double %11, %12, !dbg !2334
  br i1 %cmp10, label %for.body, label %for.end, !dbg !2335

for.body:                                         ; preds = %for.cond
  %13 = load double, double* %Bi, align 8, !dbg !2336
  %14 = load double, double* %x.addr, align 8, !dbg !2337
  %mul12 = fmul double %14, %13, !dbg !2337
  store double %mul12, double* %x.addr, align 8, !dbg !2337
  br label %for.inc, !dbg !2338

for.inc:                                          ; preds = %for.body
  %15 = load i64, i64* %rn, align 8, !dbg !2339
  %inc = add nsw i64 %15, 1, !dbg !2339
  store i64 %inc, i64* %rn, align 8, !dbg !2339
  br label %for.cond, !dbg !2340, !llvm.loop !2341

for.end:                                          ; preds = %for.cond
  %16 = load i64, i64* %rn, align 8, !dbg !2343
  %17 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2343
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %17, i32 0, i32 0, !dbg !2343
  %18 = load i32, i32* %_mp_alloc, align 8, !dbg !2343
  %conv13 = sext i32 %18 to i64, !dbg !2343
  %cmp14 = icmp sgt i64 %16, %conv13, !dbg !2343
  br i1 %cmp14, label %cond.true, label %cond.false, !dbg !2343

cond.true:                                        ; preds = %for.end
  %19 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2343
  %20 = load i64, i64* %rn, align 8, !dbg !2343
  %call = call i8* @mpz_realloc(%struct.__mpz_struct* %19, i64 %20), !dbg !2343
  br label %cond.end, !dbg !2343

cond.false:                                       ; preds = %for.end
  %21 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2343
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %21, i32 0, i32 2, !dbg !2343
  %22 = load i64*, i64** %_mp_d, align 8, !dbg !2343
  %23 = bitcast i64* %22 to i8*, !dbg !2343
  br label %cond.end, !dbg !2343

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %23, %cond.false ], !dbg !2343
  %24 = bitcast i8* %cond to i64*, !dbg !2343
  store i64* %24, i64** %rp, align 8, !dbg !2344
  %25 = load double, double* %x.addr, align 8, !dbg !2345
  %conv16 = fptoui double %25 to i64, !dbg !2346
  store i64 %conv16, i64* %f, align 8, !dbg !2347
  %26 = load i64, i64* %f, align 8, !dbg !2348
  %conv17 = uitofp i64 %26 to double, !dbg !2348
  %27 = load double, double* %x.addr, align 8, !dbg !2349
  %sub = fsub double %27, %conv17, !dbg !2349
  store double %sub, double* %x.addr, align 8, !dbg !2349
  %28 = load i64, i64* %rn, align 8, !dbg !2350
  %sub18 = sub nsw i64 %28, 1, !dbg !2351
  store i64 %sub18, i64* %i, align 8, !dbg !2352
  %29 = load i64, i64* %f, align 8, !dbg !2353
  %30 = load i64*, i64** %rp, align 8, !dbg !2354
  %31 = load i64, i64* %i, align 8, !dbg !2355
  %arrayidx = getelementptr inbounds i64, i64* %30, i64 %31, !dbg !2354
  store i64 %29, i64* %arrayidx, align 8, !dbg !2356
  br label %while.cond, !dbg !2357

while.cond:                                       ; preds = %while.body, %cond.end
  %32 = load i64, i64* %i, align 8, !dbg !2358
  %dec = add nsw i64 %32, -1, !dbg !2358
  store i64 %dec, i64* %i, align 8, !dbg !2358
  %cmp19 = icmp sge i64 %dec, 0, !dbg !2359
  br i1 %cmp19, label %while.body, label %while.end, !dbg !2357

while.body:                                       ; preds = %while.cond
  %33 = load double, double* %B, align 8, !dbg !2360
  %34 = load double, double* %x.addr, align 8, !dbg !2362
  %mul21 = fmul double %33, %34, !dbg !2363
  store double %mul21, double* %x.addr, align 8, !dbg !2364
  %35 = load double, double* %x.addr, align 8, !dbg !2365
  %conv22 = fptoui double %35 to i64, !dbg !2366
  store i64 %conv22, i64* %f, align 8, !dbg !2367
  %36 = load i64, i64* %f, align 8, !dbg !2368
  %conv23 = uitofp i64 %36 to double, !dbg !2368
  %37 = load double, double* %x.addr, align 8, !dbg !2369
  %sub24 = fsub double %37, %conv23, !dbg !2369
  store double %sub24, double* %x.addr, align 8, !dbg !2369
  %38 = load i64, i64* %f, align 8, !dbg !2370
  %39 = load i64*, i64** %rp, align 8, !dbg !2371
  %40 = load i64, i64* %i, align 8, !dbg !2372
  %arrayidx25 = getelementptr inbounds i64, i64* %39, i64 %40, !dbg !2371
  store i64 %38, i64* %arrayidx25, align 8, !dbg !2373
  br label %while.cond, !dbg !2357, !llvm.loop !2374

while.end:                                        ; preds = %while.cond
  %41 = load i32, i32* %sign, align 4, !dbg !2376
  %tobool26 = icmp ne i32 %41, 0, !dbg !2376
  br i1 %tobool26, label %cond.true27, label %cond.false29, !dbg !2376

cond.true27:                                      ; preds = %while.end
  %42 = load i64, i64* %rn, align 8, !dbg !2377
  %sub28 = sub nsw i64 0, %42, !dbg !2378
  br label %cond.end30, !dbg !2376

cond.false29:                                     ; preds = %while.end
  %43 = load i64, i64* %rn, align 8, !dbg !2379
  br label %cond.end30, !dbg !2376

cond.end30:                                       ; preds = %cond.false29, %cond.true27
  %cond31 = phi i64 [ %sub28, %cond.true27 ], [ %43, %cond.false29 ], !dbg !2376
  %conv32 = trunc i64 %cond31 to i32, !dbg !2376
  %44 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2380
  %_mp_size33 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %44, i32 0, i32 1, !dbg !2381
  store i32 %conv32, i32* %_mp_size33, align 4, !dbg !2382
  br label %return, !dbg !2383

return:                                           ; preds = %cond.end30, %if.then7, %if.then
  ret void, !dbg !2383
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_init_set_d(%struct.__mpz_struct* %r, double %x) #0 !dbg !2384 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %x.addr = alloca double, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !2385, metadata !DIExpression()), !dbg !2386
  store double %x, double* %x.addr, align 8
  call void @llvm.dbg.declare(metadata double* %x.addr, metadata !2387, metadata !DIExpression()), !dbg !2388
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2389
  call void @mpz_init(%struct.__mpz_struct* %0), !dbg !2390
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2391
  %2 = load double, double* %x.addr, align 8, !dbg !2392
  call void @mpz_set_d(%struct.__mpz_struct* %1, double %2), !dbg !2393
  ret void, !dbg !2394
}

; Function Attrs: noinline nounwind uwtable
define dso_local double @mpz_get_d(%struct.__mpz_struct* %u) #0 !dbg !2395 {
entry:
  %retval = alloca double, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %un = alloca i64, align 8
  %x = alloca double, align 8
  %B = alloca double, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !2398, metadata !DIExpression()), !dbg !2399
  call void @llvm.dbg.declare(metadata i64* %un, metadata !2400, metadata !DIExpression()), !dbg !2401
  call void @llvm.dbg.declare(metadata double* %x, metadata !2402, metadata !DIExpression()), !dbg !2403
  call void @llvm.dbg.declare(metadata double* %B, metadata !2404, metadata !DIExpression()), !dbg !2405
  store double 0x43F0000000000000, double* %B, align 8, !dbg !2405
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2406
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2406
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2406
  %cmp = icmp sge i32 %1, 0, !dbg !2406
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2406

cond.true:                                        ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2406
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !2406
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !2406
  br label %cond.end, !dbg !2406

cond.false:                                       ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2406
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !2406
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !2406
  %sub = sub nsw i32 0, %5, !dbg !2406
  br label %cond.end, !dbg !2406

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !2406
  %conv = sext i32 %cond to i64, !dbg !2406
  store i64 %conv, i64* %un, align 8, !dbg !2407
  %6 = load i64, i64* %un, align 8, !dbg !2408
  %cmp3 = icmp eq i64 %6, 0, !dbg !2410
  br i1 %cmp3, label %if.then, label %if.end, !dbg !2411

if.then:                                          ; preds = %cond.end
  store double 0.000000e+00, double* %retval, align 8, !dbg !2412
  br label %return, !dbg !2412

if.end:                                           ; preds = %cond.end
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2413
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %7, i32 0, i32 2, !dbg !2414
  %8 = load i64*, i64** %_mp_d, align 8, !dbg !2414
  %9 = load i64, i64* %un, align 8, !dbg !2415
  %dec = add nsw i64 %9, -1, !dbg !2415
  store i64 %dec, i64* %un, align 8, !dbg !2415
  %arrayidx = getelementptr inbounds i64, i64* %8, i64 %dec, !dbg !2413
  %10 = load i64, i64* %arrayidx, align 8, !dbg !2413
  %conv5 = uitofp i64 %10 to double, !dbg !2413
  store double %conv5, double* %x, align 8, !dbg !2416
  br label %while.cond, !dbg !2417

while.cond:                                       ; preds = %while.body, %if.end
  %11 = load i64, i64* %un, align 8, !dbg !2418
  %cmp6 = icmp sgt i64 %11, 0, !dbg !2419
  br i1 %cmp6, label %while.body, label %while.end, !dbg !2417

while.body:                                       ; preds = %while.cond
  %12 = load double, double* %B, align 8, !dbg !2420
  %13 = load double, double* %x, align 8, !dbg !2421
  %mul = fmul double %12, %13, !dbg !2422
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2423
  %_mp_d8 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %14, i32 0, i32 2, !dbg !2424
  %15 = load i64*, i64** %_mp_d8, align 8, !dbg !2424
  %16 = load i64, i64* %un, align 8, !dbg !2425
  %dec9 = add nsw i64 %16, -1, !dbg !2425
  store i64 %dec9, i64* %un, align 8, !dbg !2425
  %arrayidx10 = getelementptr inbounds i64, i64* %15, i64 %dec9, !dbg !2423
  %17 = load i64, i64* %arrayidx10, align 8, !dbg !2423
  %conv11 = uitofp i64 %17 to double, !dbg !2423
  %add = fadd double %mul, %conv11, !dbg !2426
  store double %add, double* %x, align 8, !dbg !2427
  br label %while.cond, !dbg !2417, !llvm.loop !2428

while.end:                                        ; preds = %while.cond
  %18 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2430
  %_mp_size12 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %18, i32 0, i32 1, !dbg !2432
  %19 = load i32, i32* %_mp_size12, align 4, !dbg !2432
  %cmp13 = icmp slt i32 %19, 0, !dbg !2433
  br i1 %cmp13, label %if.then15, label %if.end16, !dbg !2434

if.then15:                                        ; preds = %while.end
  %20 = load double, double* %x, align 8, !dbg !2435
  %fneg = fneg double %20, !dbg !2436
  store double %fneg, double* %x, align 8, !dbg !2437
  br label %if.end16, !dbg !2438

if.end16:                                         ; preds = %if.then15, %while.end
  %21 = load double, double* %x, align 8, !dbg !2439
  store double %21, double* %retval, align 8, !dbg !2440
  br label %return, !dbg !2440

return:                                           ; preds = %if.end16, %if.then
  %22 = load double, double* %retval, align 8, !dbg !2441
  ret double %22, !dbg !2441
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_cmpabs_d(%struct.__mpz_struct* %x, double %d) #0 !dbg !2442 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca double, align 8
  %xn = alloca i64, align 8
  %B = alloca double, align 8
  %Bi = alloca double, align 8
  %i = alloca i64, align 8
  %f = alloca i64, align 8
  %xl = alloca i64, align 8
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %x.addr, metadata !2445, metadata !DIExpression()), !dbg !2446
  store double %d, double* %d.addr, align 8
  call void @llvm.dbg.declare(metadata double* %d.addr, metadata !2447, metadata !DIExpression()), !dbg !2448
  call void @llvm.dbg.declare(metadata i64* %xn, metadata !2449, metadata !DIExpression()), !dbg !2450
  call void @llvm.dbg.declare(metadata double* %B, metadata !2451, metadata !DIExpression()), !dbg !2452
  call void @llvm.dbg.declare(metadata double* %Bi, metadata !2453, metadata !DIExpression()), !dbg !2454
  call void @llvm.dbg.declare(metadata i64* %i, metadata !2455, metadata !DIExpression()), !dbg !2456
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2457
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2458
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2458
  %conv = sext i32 %1 to i64, !dbg !2457
  store i64 %conv, i64* %xn, align 8, !dbg !2459
  %2 = load double, double* %d.addr, align 8, !dbg !2460
  %cmp = fcmp oge double %2, 0.000000e+00, !dbg !2460
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2460

cond.true:                                        ; preds = %entry
  %3 = load double, double* %d.addr, align 8, !dbg !2460
  br label %cond.end, !dbg !2460

cond.false:                                       ; preds = %entry
  %4 = load double, double* %d.addr, align 8, !dbg !2460
  %fneg = fneg double %4, !dbg !2460
  br label %cond.end, !dbg !2460

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %3, %cond.true ], [ %fneg, %cond.false ], !dbg !2460
  store double %cond, double* %d.addr, align 8, !dbg !2461
  %5 = load i64, i64* %xn, align 8, !dbg !2462
  %cmp2 = icmp ne i64 %5, 0, !dbg !2464
  br i1 %cmp2, label %if.then, label %if.end32, !dbg !2465

if.then:                                          ; preds = %cond.end
  %6 = load i64, i64* %xn, align 8, !dbg !2466
  %cmp4 = icmp sge i64 %6, 0, !dbg !2466
  br i1 %cmp4, label %cond.true6, label %cond.false7, !dbg !2466

cond.true6:                                       ; preds = %if.then
  %7 = load i64, i64* %xn, align 8, !dbg !2466
  br label %cond.end8, !dbg !2466

cond.false7:                                      ; preds = %if.then
  %8 = load i64, i64* %xn, align 8, !dbg !2466
  %sub = sub nsw i64 0, %8, !dbg !2466
  br label %cond.end8, !dbg !2466

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i64 [ %7, %cond.true6 ], [ %sub, %cond.false7 ], !dbg !2466
  store i64 %cond9, i64* %xn, align 8, !dbg !2468
  store double 0x43F0000000000000, double* %B, align 8, !dbg !2469
  %9 = load double, double* %B, align 8, !dbg !2470
  %div = fdiv double 1.000000e+00, %9, !dbg !2471
  store double %div, double* %Bi, align 8, !dbg !2472
  store i64 1, i64* %i, align 8, !dbg !2473
  br label %for.cond, !dbg !2475

for.cond:                                         ; preds = %for.inc, %cond.end8
  %10 = load i64, i64* %i, align 8, !dbg !2476
  %11 = load i64, i64* %xn, align 8, !dbg !2478
  %cmp10 = icmp slt i64 %10, %11, !dbg !2479
  br i1 %cmp10, label %for.body, label %for.end, !dbg !2480

for.body:                                         ; preds = %for.cond
  %12 = load double, double* %Bi, align 8, !dbg !2481
  %13 = load double, double* %d.addr, align 8, !dbg !2482
  %mul = fmul double %13, %12, !dbg !2482
  store double %mul, double* %d.addr, align 8, !dbg !2482
  br label %for.inc, !dbg !2483

for.inc:                                          ; preds = %for.body
  %14 = load i64, i64* %i, align 8, !dbg !2484
  %inc = add nsw i64 %14, 1, !dbg !2484
  store i64 %inc, i64* %i, align 8, !dbg !2484
  br label %for.cond, !dbg !2485, !llvm.loop !2486

for.end:                                          ; preds = %for.cond
  %15 = load double, double* %d.addr, align 8, !dbg !2488
  %16 = load double, double* %B, align 8, !dbg !2490
  %cmp12 = fcmp oge double %15, %16, !dbg !2491
  br i1 %cmp12, label %if.then14, label %if.end, !dbg !2492

if.then14:                                        ; preds = %for.end
  store i32 -1, i32* %retval, align 4, !dbg !2493
  br label %return, !dbg !2493

if.end:                                           ; preds = %for.end
  %17 = load i64, i64* %xn, align 8, !dbg !2494
  store i64 %17, i64* %i, align 8, !dbg !2496
  br label %for.cond15, !dbg !2497

for.cond15:                                       ; preds = %if.end27, %if.end
  %18 = load i64, i64* %i, align 8, !dbg !2498
  %dec = add nsw i64 %18, -1, !dbg !2498
  store i64 %dec, i64* %i, align 8, !dbg !2498
  %cmp16 = icmp sgt i64 %18, 0, !dbg !2500
  br i1 %cmp16, label %for.body18, label %for.end31, !dbg !2501

for.body18:                                       ; preds = %for.cond15
  call void @llvm.dbg.declare(metadata i64* %f, metadata !2502, metadata !DIExpression()), !dbg !2504
  call void @llvm.dbg.declare(metadata i64* %xl, metadata !2505, metadata !DIExpression()), !dbg !2506
  %19 = load double, double* %d.addr, align 8, !dbg !2507
  %conv19 = fptoui double %19 to i64, !dbg !2508
  store i64 %conv19, i64* %f, align 8, !dbg !2509
  %20 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2510
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %20, i32 0, i32 2, !dbg !2511
  %21 = load i64*, i64** %_mp_d, align 8, !dbg !2511
  %22 = load i64, i64* %i, align 8, !dbg !2512
  %arrayidx = getelementptr inbounds i64, i64* %21, i64 %22, !dbg !2510
  %23 = load i64, i64* %arrayidx, align 8, !dbg !2510
  store i64 %23, i64* %xl, align 8, !dbg !2513
  %24 = load i64, i64* %xl, align 8, !dbg !2514
  %25 = load i64, i64* %f, align 8, !dbg !2516
  %cmp20 = icmp ugt i64 %24, %25, !dbg !2517
  br i1 %cmp20, label %if.then22, label %if.else, !dbg !2518

if.then22:                                        ; preds = %for.body18
  store i32 1, i32* %retval, align 4, !dbg !2519
  br label %return, !dbg !2519

if.else:                                          ; preds = %for.body18
  %26 = load i64, i64* %xl, align 8, !dbg !2520
  %27 = load i64, i64* %f, align 8, !dbg !2522
  %cmp23 = icmp ult i64 %26, %27, !dbg !2523
  br i1 %cmp23, label %if.then25, label %if.end26, !dbg !2524

if.then25:                                        ; preds = %if.else
  store i32 -1, i32* %retval, align 4, !dbg !2525
  br label %return, !dbg !2525

if.end26:                                         ; preds = %if.else
  br label %if.end27

if.end27:                                         ; preds = %if.end26
  %28 = load double, double* %B, align 8, !dbg !2526
  %29 = load double, double* %d.addr, align 8, !dbg !2527
  %30 = load i64, i64* %f, align 8, !dbg !2528
  %conv28 = uitofp i64 %30 to double, !dbg !2528
  %sub29 = fsub double %29, %conv28, !dbg !2529
  %mul30 = fmul double %28, %sub29, !dbg !2530
  store double %mul30, double* %d.addr, align 8, !dbg !2531
  br label %for.cond15, !dbg !2532, !llvm.loop !2533

for.end31:                                        ; preds = %for.cond15
  br label %if.end32, !dbg !2535

if.end32:                                         ; preds = %for.end31, %cond.end
  %31 = load double, double* %d.addr, align 8, !dbg !2536
  %cmp33 = fcmp ogt double %31, 0.000000e+00, !dbg !2537
  %conv34 = zext i1 %cmp33 to i32, !dbg !2537
  %sub35 = sub nsw i32 0, %conv34, !dbg !2538
  store i32 %sub35, i32* %retval, align 4, !dbg !2539
  br label %return, !dbg !2539

return:                                           ; preds = %if.end32, %if.then25, %if.then22, %if.then14
  %32 = load i32, i32* %retval, align 4, !dbg !2540
  ret i32 %32, !dbg !2540
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_cmp_d(%struct.__mpz_struct* %x, double %d) #0 !dbg !2541 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca double, align 8
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %x.addr, metadata !2542, metadata !DIExpression()), !dbg !2543
  store double %d, double* %d.addr, align 8
  call void @llvm.dbg.declare(metadata double* %d.addr, metadata !2544, metadata !DIExpression()), !dbg !2545
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2546
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2548
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2548
  %cmp = icmp slt i32 %1, 0, !dbg !2549
  br i1 %cmp, label %if.then, label %if.else3, !dbg !2550

if.then:                                          ; preds = %entry
  %2 = load double, double* %d.addr, align 8, !dbg !2551
  %cmp1 = fcmp oge double %2, 0.000000e+00, !dbg !2554
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !2555

if.then2:                                         ; preds = %if.then
  store i32 -1, i32* %retval, align 4, !dbg !2556
  br label %return, !dbg !2556

if.else:                                          ; preds = %if.then
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2557
  %4 = load double, double* %d.addr, align 8, !dbg !2558
  %call = call i32 @mpz_cmpabs_d(%struct.__mpz_struct* %3, double %4), !dbg !2559
  %sub = sub nsw i32 0, %call, !dbg !2560
  store i32 %sub, i32* %retval, align 4, !dbg !2561
  br label %return, !dbg !2561

if.else3:                                         ; preds = %entry
  %5 = load double, double* %d.addr, align 8, !dbg !2562
  %cmp4 = fcmp olt double %5, 0.000000e+00, !dbg !2565
  br i1 %cmp4, label %if.then5, label %if.else6, !dbg !2566

if.then5:                                         ; preds = %if.else3
  store i32 1, i32* %retval, align 4, !dbg !2567
  br label %return, !dbg !2567

if.else6:                                         ; preds = %if.else3
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !2568
  %7 = load double, double* %d.addr, align 8, !dbg !2569
  %call7 = call i32 @mpz_cmpabs_d(%struct.__mpz_struct* %6, double %7), !dbg !2570
  store i32 %call7, i32* %retval, align 4, !dbg !2571
  br label %return, !dbg !2571

return:                                           ; preds = %if.else6, %if.then5, %if.else, %if.then2
  %8 = load i32, i32* %retval, align 4, !dbg !2572
  ret i32 %8, !dbg !2572
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_sgn(%struct.__mpz_struct* %u) #0 !dbg !2573 {
entry:
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %usize = alloca i64, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !2574, metadata !DIExpression()), !dbg !2575
  call void @llvm.dbg.declare(metadata i64* %usize, metadata !2576, metadata !DIExpression()), !dbg !2577
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2578
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2579
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2579
  %conv = sext i32 %1 to i64, !dbg !2578
  store i64 %conv, i64* %usize, align 8, !dbg !2577
  %2 = load i64, i64* %usize, align 8, !dbg !2580
  %cmp = icmp sgt i64 %2, 0, !dbg !2581
  %conv1 = zext i1 %cmp to i32, !dbg !2581
  %3 = load i64, i64* %usize, align 8, !dbg !2582
  %cmp2 = icmp slt i64 %3, 0, !dbg !2583
  %conv3 = zext i1 %cmp2 to i32, !dbg !2583
  %sub = sub nsw i32 %conv1, %conv3, !dbg !2584
  ret i32 %sub, !dbg !2585
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_cmp_si(%struct.__mpz_struct* %u, i64 %v) #0 !dbg !2586 {
entry:
  %retval = alloca i32, align 4
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca i64, align 8
  %usize = alloca i64, align 8
  %ul = alloca i64, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !2589, metadata !DIExpression()), !dbg !2590
  store i64 %v, i64* %v.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %v.addr, metadata !2591, metadata !DIExpression()), !dbg !2592
  call void @llvm.dbg.declare(metadata i64* %usize, metadata !2593, metadata !DIExpression()), !dbg !2594
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2595
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2596
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2596
  %conv = sext i32 %1 to i64, !dbg !2595
  store i64 %conv, i64* %usize, align 8, !dbg !2594
  %2 = load i64, i64* %usize, align 8, !dbg !2597
  %cmp = icmp slt i64 %2, -1, !dbg !2599
  br i1 %cmp, label %if.then, label %if.else, !dbg !2600

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !2601
  br label %return, !dbg !2601

if.else:                                          ; preds = %entry
  %3 = load i64, i64* %v.addr, align 8, !dbg !2602
  %cmp2 = icmp sge i64 %3, 0, !dbg !2604
  br i1 %cmp2, label %if.then4, label %if.else5, !dbg !2605

if.then4:                                         ; preds = %if.else
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2606
  %5 = load i64, i64* %v.addr, align 8, !dbg !2607
  %call = call i32 @mpz_cmp_ui(%struct.__mpz_struct* %4, i64 %5), !dbg !2608
  store i32 %call, i32* %retval, align 4, !dbg !2609
  br label %return, !dbg !2609

if.else5:                                         ; preds = %if.else
  %6 = load i64, i64* %usize, align 8, !dbg !2610
  %cmp6 = icmp sge i64 %6, 0, !dbg !2612
  br i1 %cmp6, label %if.then8, label %if.else9, !dbg !2613

if.then8:                                         ; preds = %if.else5
  store i32 1, i32* %retval, align 4, !dbg !2614
  br label %return, !dbg !2614

if.else9:                                         ; preds = %if.else5
  call void @llvm.dbg.declare(metadata i64* %ul, metadata !2615, metadata !DIExpression()), !dbg !2617
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2618
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %7, i32 0, i32 2, !dbg !2619
  %8 = load i64*, i64** %_mp_d, align 8, !dbg !2619
  %arrayidx = getelementptr inbounds i64, i64* %8, i64 0, !dbg !2618
  %9 = load i64, i64* %arrayidx, align 8, !dbg !2618
  store i64 %9, i64* %ul, align 8, !dbg !2617
  %10 = load i64, i64* %v.addr, align 8, !dbg !2620
  %add = add nsw i64 %10, 1, !dbg !2620
  %sub = sub i64 %add, 1, !dbg !2620
  %sub10 = sub i64 0, %sub, !dbg !2620
  %11 = load i64, i64* %ul, align 8, !dbg !2622
  %cmp11 = icmp ult i64 %sub10, %11, !dbg !2623
  br i1 %cmp11, label %if.then13, label %if.else14, !dbg !2624

if.then13:                                        ; preds = %if.else9
  store i32 -1, i32* %retval, align 4, !dbg !2625
  br label %return, !dbg !2625

if.else14:                                        ; preds = %if.else9
  %12 = load i64, i64* %v.addr, align 8, !dbg !2626
  %add15 = add nsw i64 %12, 1, !dbg !2626
  %sub16 = sub i64 %add15, 1, !dbg !2626
  %sub17 = sub i64 0, %sub16, !dbg !2626
  %13 = load i64, i64* %ul, align 8, !dbg !2627
  %cmp18 = icmp ugt i64 %sub17, %13, !dbg !2628
  %conv19 = zext i1 %cmp18 to i32, !dbg !2628
  store i32 %conv19, i32* %retval, align 4, !dbg !2629
  br label %return, !dbg !2629

return:                                           ; preds = %if.else14, %if.then13, %if.then8, %if.then4, %if.then
  %14 = load i32, i32* %retval, align 4, !dbg !2630
  ret i32 %14, !dbg !2630
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_cmp_ui(%struct.__mpz_struct* %u, i64 %v) #0 !dbg !2631 {
entry:
  %retval = alloca i32, align 4
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca i64, align 8
  %usize = alloca i64, align 8
  %ul = alloca i64, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !2634, metadata !DIExpression()), !dbg !2635
  store i64 %v, i64* %v.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %v.addr, metadata !2636, metadata !DIExpression()), !dbg !2637
  call void @llvm.dbg.declare(metadata i64* %usize, metadata !2638, metadata !DIExpression()), !dbg !2639
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2640
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2641
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2641
  %conv = sext i32 %1 to i64, !dbg !2640
  store i64 %conv, i64* %usize, align 8, !dbg !2639
  %2 = load i64, i64* %usize, align 8, !dbg !2642
  %cmp = icmp sgt i64 %2, 1, !dbg !2644
  br i1 %cmp, label %if.then, label %if.else, !dbg !2645

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !2646
  br label %return, !dbg !2646

if.else:                                          ; preds = %entry
  %3 = load i64, i64* %usize, align 8, !dbg !2647
  %cmp2 = icmp slt i64 %3, 0, !dbg !2649
  br i1 %cmp2, label %if.then4, label %if.else5, !dbg !2650

if.then4:                                         ; preds = %if.else
  store i32 -1, i32* %retval, align 4, !dbg !2651
  br label %return, !dbg !2651

if.else5:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i64* %ul, metadata !2652, metadata !DIExpression()), !dbg !2654
  %4 = load i64, i64* %usize, align 8, !dbg !2655
  %cmp6 = icmp sgt i64 %4, 0, !dbg !2656
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !2657

cond.true:                                        ; preds = %if.else5
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2658
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %5, i32 0, i32 2, !dbg !2659
  %6 = load i64*, i64** %_mp_d, align 8, !dbg !2659
  %arrayidx = getelementptr inbounds i64, i64* %6, i64 0, !dbg !2658
  %7 = load i64, i64* %arrayidx, align 8, !dbg !2658
  br label %cond.end, !dbg !2657

cond.false:                                       ; preds = %if.else5
  br label %cond.end, !dbg !2657

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %7, %cond.true ], [ 0, %cond.false ], !dbg !2657
  store i64 %cond, i64* %ul, align 8, !dbg !2654
  %8 = load i64, i64* %ul, align 8, !dbg !2660
  %9 = load i64, i64* %v.addr, align 8, !dbg !2661
  %cmp8 = icmp ugt i64 %8, %9, !dbg !2662
  %conv9 = zext i1 %cmp8 to i32, !dbg !2662
  %10 = load i64, i64* %ul, align 8, !dbg !2663
  %11 = load i64, i64* %v.addr, align 8, !dbg !2664
  %cmp10 = icmp ult i64 %10, %11, !dbg !2665
  %conv11 = zext i1 %cmp10 to i32, !dbg !2665
  %sub = sub nsw i32 %conv9, %conv11, !dbg !2666
  store i32 %sub, i32* %retval, align 4, !dbg !2667
  br label %return, !dbg !2667

return:                                           ; preds = %cond.end, %if.then4, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !2668
  ret i32 %12, !dbg !2668
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_cmp(%struct.__mpz_struct* %a, %struct.__mpz_struct* %b) #0 !dbg !2669 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.__mpz_struct*, align 8
  %b.addr = alloca %struct.__mpz_struct*, align 8
  %asize = alloca i64, align 8
  %bsize = alloca i64, align 8
  store %struct.__mpz_struct* %a, %struct.__mpz_struct** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %a.addr, metadata !2672, metadata !DIExpression()), !dbg !2673
  store %struct.__mpz_struct* %b, %struct.__mpz_struct** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %b.addr, metadata !2674, metadata !DIExpression()), !dbg !2675
  call void @llvm.dbg.declare(metadata i64* %asize, metadata !2676, metadata !DIExpression()), !dbg !2677
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2678
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2679
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2679
  %conv = sext i32 %1 to i64, !dbg !2678
  store i64 %conv, i64* %asize, align 8, !dbg !2677
  call void @llvm.dbg.declare(metadata i64* %bsize, metadata !2680, metadata !DIExpression()), !dbg !2681
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !2682
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !2683
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !2683
  %conv2 = sext i32 %3 to i64, !dbg !2682
  store i64 %conv2, i64* %bsize, align 8, !dbg !2681
  %4 = load i64, i64* %asize, align 8, !dbg !2684
  %5 = load i64, i64* %bsize, align 8, !dbg !2686
  %cmp = icmp ne i64 %4, %5, !dbg !2687
  br i1 %cmp, label %if.then, label %if.else, !dbg !2688

if.then:                                          ; preds = %entry
  %6 = load i64, i64* %asize, align 8, !dbg !2689
  %7 = load i64, i64* %bsize, align 8, !dbg !2690
  %cmp4 = icmp slt i64 %6, %7, !dbg !2691
  %8 = zext i1 %cmp4 to i64, !dbg !2692
  %cond = select i1 %cmp4, i32 -1, i32 1, !dbg !2692
  store i32 %cond, i32* %retval, align 4, !dbg !2693
  br label %return, !dbg !2693

if.else:                                          ; preds = %entry
  %9 = load i64, i64* %asize, align 8, !dbg !2694
  %cmp6 = icmp sge i64 %9, 0, !dbg !2696
  br i1 %cmp6, label %if.then8, label %if.else10, !dbg !2697

if.then8:                                         ; preds = %if.else
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2698
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 2, !dbg !2699
  %11 = load i64*, i64** %_mp_d, align 8, !dbg !2699
  %12 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !2700
  %_mp_d9 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %12, i32 0, i32 2, !dbg !2701
  %13 = load i64*, i64** %_mp_d9, align 8, !dbg !2701
  %14 = load i64, i64* %asize, align 8, !dbg !2702
  %call = call i32 @mpn_cmp(i64* %11, i64* %13, i64 %14), !dbg !2703
  store i32 %call, i32* %retval, align 4, !dbg !2704
  br label %return, !dbg !2704

if.else10:                                        ; preds = %if.else
  %15 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !2705
  %_mp_d11 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %15, i32 0, i32 2, !dbg !2706
  %16 = load i64*, i64** %_mp_d11, align 8, !dbg !2706
  %17 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2707
  %_mp_d12 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %17, i32 0, i32 2, !dbg !2708
  %18 = load i64*, i64** %_mp_d12, align 8, !dbg !2708
  %19 = load i64, i64* %asize, align 8, !dbg !2709
  %sub = sub nsw i64 0, %19, !dbg !2710
  %call13 = call i32 @mpn_cmp(i64* %16, i64* %18, i64 %sub), !dbg !2711
  store i32 %call13, i32* %retval, align 4, !dbg !2712
  br label %return, !dbg !2712

return:                                           ; preds = %if.else10, %if.then8, %if.then
  %20 = load i32, i32* %retval, align 4, !dbg !2713
  ret i32 %20, !dbg !2713
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_cmpabs_ui(%struct.__mpz_struct* %u, i64 %v) #0 !dbg !2714 {
entry:
  %retval = alloca i32, align 4
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca i64, align 8
  %un = alloca i64, align 8
  %ul = alloca i64, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !2715, metadata !DIExpression()), !dbg !2716
  store i64 %v, i64* %v.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %v.addr, metadata !2717, metadata !DIExpression()), !dbg !2718
  call void @llvm.dbg.declare(metadata i64* %un, metadata !2719, metadata !DIExpression()), !dbg !2720
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2721
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2721
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2721
  %cmp = icmp sge i32 %1, 0, !dbg !2721
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2721

cond.true:                                        ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2721
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !2721
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !2721
  br label %cond.end, !dbg !2721

cond.false:                                       ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2721
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !2721
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !2721
  %sub = sub nsw i32 0, %5, !dbg !2721
  br label %cond.end, !dbg !2721

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !2721
  %conv = sext i32 %cond to i64, !dbg !2721
  store i64 %conv, i64* %un, align 8, !dbg !2720
  call void @llvm.dbg.declare(metadata i64* %ul, metadata !2722, metadata !DIExpression()), !dbg !2723
  %6 = load i64, i64* %un, align 8, !dbg !2724
  %cmp3 = icmp sgt i64 %6, 1, !dbg !2726
  br i1 %cmp3, label %if.then, label %if.end, !dbg !2727

if.then:                                          ; preds = %cond.end
  store i32 1, i32* %retval, align 4, !dbg !2728
  br label %return, !dbg !2728

if.end:                                           ; preds = %cond.end
  %7 = load i64, i64* %un, align 8, !dbg !2729
  %cmp5 = icmp eq i64 %7, 1, !dbg !2730
  br i1 %cmp5, label %cond.true7, label %cond.false8, !dbg !2731

cond.true7:                                       ; preds = %if.end
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2732
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 2, !dbg !2733
  %9 = load i64*, i64** %_mp_d, align 8, !dbg !2733
  %arrayidx = getelementptr inbounds i64, i64* %9, i64 0, !dbg !2732
  %10 = load i64, i64* %arrayidx, align 8, !dbg !2732
  br label %cond.end9, !dbg !2731

cond.false8:                                      ; preds = %if.end
  br label %cond.end9, !dbg !2731

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i64 [ %10, %cond.true7 ], [ 0, %cond.false8 ], !dbg !2731
  store i64 %cond10, i64* %ul, align 8, !dbg !2734
  %11 = load i64, i64* %ul, align 8, !dbg !2735
  %12 = load i64, i64* %v.addr, align 8, !dbg !2736
  %cmp11 = icmp ugt i64 %11, %12, !dbg !2737
  %conv12 = zext i1 %cmp11 to i32, !dbg !2737
  %13 = load i64, i64* %ul, align 8, !dbg !2738
  %14 = load i64, i64* %v.addr, align 8, !dbg !2739
  %cmp13 = icmp ult i64 %13, %14, !dbg !2740
  %conv14 = zext i1 %cmp13 to i32, !dbg !2740
  %sub15 = sub nsw i32 %conv12, %conv14, !dbg !2741
  store i32 %sub15, i32* %retval, align 4, !dbg !2742
  br label %return, !dbg !2742

return:                                           ; preds = %cond.end9, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !2743
  ret i32 %15, !dbg !2743
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_cmpabs(%struct.__mpz_struct* %u, %struct.__mpz_struct* %v) #0 !dbg !2744 {
entry:
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !2745, metadata !DIExpression()), !dbg !2746
  store %struct.__mpz_struct* %v, %struct.__mpz_struct** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %v.addr, metadata !2747, metadata !DIExpression()), !dbg !2748
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2749
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 2, !dbg !2750
  %1 = load i64*, i64** %_mp_d, align 8, !dbg !2750
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2751
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !2751
  %3 = load i32, i32* %_mp_size, align 4, !dbg !2751
  %cmp = icmp sge i32 %3, 0, !dbg !2751
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2751

cond.true:                                        ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2751
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !2751
  %5 = load i32, i32* %_mp_size1, align 4, !dbg !2751
  br label %cond.end, !dbg !2751

cond.false:                                       ; preds = %entry
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2751
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 1, !dbg !2751
  %7 = load i32, i32* %_mp_size2, align 4, !dbg !2751
  %sub = sub nsw i32 0, %7, !dbg !2751
  br label %cond.end, !dbg !2751

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %5, %cond.true ], [ %sub, %cond.false ], !dbg !2751
  %conv = sext i32 %cond to i64, !dbg !2751
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !2752
  %_mp_d3 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 2, !dbg !2753
  %9 = load i64*, i64** %_mp_d3, align 8, !dbg !2753
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !2754
  %_mp_size4 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 1, !dbg !2754
  %11 = load i32, i32* %_mp_size4, align 4, !dbg !2754
  %cmp5 = icmp sge i32 %11, 0, !dbg !2754
  br i1 %cmp5, label %cond.true7, label %cond.false9, !dbg !2754

cond.true7:                                       ; preds = %cond.end
  %12 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !2754
  %_mp_size8 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %12, i32 0, i32 1, !dbg !2754
  %13 = load i32, i32* %_mp_size8, align 4, !dbg !2754
  br label %cond.end12, !dbg !2754

cond.false9:                                      ; preds = %cond.end
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !2754
  %_mp_size10 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %14, i32 0, i32 1, !dbg !2754
  %15 = load i32, i32* %_mp_size10, align 4, !dbg !2754
  %sub11 = sub nsw i32 0, %15, !dbg !2754
  br label %cond.end12, !dbg !2754

cond.end12:                                       ; preds = %cond.false9, %cond.true7
  %cond13 = phi i32 [ %13, %cond.true7 ], [ %sub11, %cond.false9 ], !dbg !2754
  %conv14 = sext i32 %cond13 to i64, !dbg !2754
  %call = call i32 @mpn_cmp4(i64* %1, i64 %conv, i64* %9, i64 %conv14), !dbg !2755
  ret i32 %call, !dbg !2756
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mpn_cmp4(i64* %ap, i64 %an, i64* %bp, i64 %bn) #0 !dbg !2757 {
entry:
  %retval = alloca i32, align 4
  %ap.addr = alloca i64*, align 8
  %an.addr = alloca i64, align 8
  %bp.addr = alloca i64*, align 8
  %bn.addr = alloca i64, align 8
  store i64* %ap, i64** %ap.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %ap.addr, metadata !2760, metadata !DIExpression()), !dbg !2761
  store i64 %an, i64* %an.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %an.addr, metadata !2762, metadata !DIExpression()), !dbg !2763
  store i64* %bp, i64** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %bp.addr, metadata !2764, metadata !DIExpression()), !dbg !2765
  store i64 %bn, i64* %bn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bn.addr, metadata !2766, metadata !DIExpression()), !dbg !2767
  %0 = load i64, i64* %an.addr, align 8, !dbg !2768
  %1 = load i64, i64* %bn.addr, align 8, !dbg !2770
  %cmp = icmp ne i64 %0, %1, !dbg !2771
  br i1 %cmp, label %if.then, label %if.else, !dbg !2772

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %an.addr, align 8, !dbg !2773
  %3 = load i64, i64* %bn.addr, align 8, !dbg !2774
  %cmp1 = icmp slt i64 %2, %3, !dbg !2775
  %4 = zext i1 %cmp1 to i64, !dbg !2773
  %cond = select i1 %cmp1, i32 -1, i32 1, !dbg !2773
  store i32 %cond, i32* %retval, align 4, !dbg !2776
  br label %return, !dbg !2776

if.else:                                          ; preds = %entry
  %5 = load i64*, i64** %ap.addr, align 8, !dbg !2777
  %6 = load i64*, i64** %bp.addr, align 8, !dbg !2778
  %7 = load i64, i64* %an.addr, align 8, !dbg !2779
  %call = call i32 @mpn_cmp(i64* %5, i64* %6, i64 %7), !dbg !2780
  store i32 %call, i32* %retval, align 4, !dbg !2781
  br label %return, !dbg !2781

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !2782
  ret i32 %8, !dbg !2782
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_abs(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u) #0 !dbg !2783 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !2784, metadata !DIExpression()), !dbg !2785
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !2786, metadata !DIExpression()), !dbg !2787
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2788
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2790
  %cmp = icmp ne %struct.__mpz_struct* %0, %1, !dbg !2791
  br i1 %cmp, label %if.then, label %if.end, !dbg !2792

if.then:                                          ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2793
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2794
  call void @mpz_set(%struct.__mpz_struct* %2, %struct.__mpz_struct* %3), !dbg !2795
  br label %if.end, !dbg !2795

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2796
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !2796
  %5 = load i32, i32* %_mp_size, align 4, !dbg !2796
  %cmp1 = icmp sge i32 %5, 0, !dbg !2796
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !2796

cond.true:                                        ; preds = %if.end
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2796
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 1, !dbg !2796
  %7 = load i32, i32* %_mp_size2, align 4, !dbg !2796
  br label %cond.end, !dbg !2796

cond.false:                                       ; preds = %if.end
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2796
  %_mp_size3 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 1, !dbg !2796
  %9 = load i32, i32* %_mp_size3, align 4, !dbg !2796
  %sub = sub nsw i32 0, %9, !dbg !2796
  br label %cond.end, !dbg !2796

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %7, %cond.true ], [ %sub, %cond.false ], !dbg !2796
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2797
  %_mp_size4 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 1, !dbg !2798
  store i32 %cond, i32* %_mp_size4, align 4, !dbg !2799
  ret void, !dbg !2800
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_neg(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u) #0 !dbg !2801 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !2802, metadata !DIExpression()), !dbg !2803
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !2804, metadata !DIExpression()), !dbg !2805
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2806
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2808
  %cmp = icmp ne %struct.__mpz_struct* %0, %1, !dbg !2809
  br i1 %cmp, label %if.then, label %if.end, !dbg !2810

if.then:                                          ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2811
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2812
  call void @mpz_set(%struct.__mpz_struct* %2, %struct.__mpz_struct* %3), !dbg !2813
  br label %if.end, !dbg !2813

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2814
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !2815
  %5 = load i32, i32* %_mp_size, align 4, !dbg !2815
  %sub = sub nsw i32 0, %5, !dbg !2816
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2817
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 1, !dbg !2818
  store i32 %sub, i32* %_mp_size1, align 4, !dbg !2819
  ret void, !dbg !2820
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_swap(%struct.__mpz_struct* %u, %struct.__mpz_struct* %v) #0 !dbg !2821 {
entry:
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca %struct.__mpz_struct*, align 8
  %__mp_size_t_swap__tmp = alloca i64, align 8
  %__mp_size_t_swap__tmp6 = alloca i64, align 8
  %__mp_ptr_swap__tmp = alloca i64*, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !2824, metadata !DIExpression()), !dbg !2825
  store %struct.__mpz_struct* %v, %struct.__mpz_struct** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %v.addr, metadata !2826, metadata !DIExpression()), !dbg !2827
  br label %do.body, !dbg !2828

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %__mp_size_t_swap__tmp, metadata !2829, metadata !DIExpression()), !dbg !2831
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2831
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2831
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2831
  %conv = sext i32 %1 to i64, !dbg !2831
  store i64 %conv, i64* %__mp_size_t_swap__tmp, align 8, !dbg !2831
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !2831
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !2831
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !2831
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2831
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !2831
  store i32 %3, i32* %_mp_size2, align 4, !dbg !2831
  %5 = load i64, i64* %__mp_size_t_swap__tmp, align 8, !dbg !2831
  %conv3 = trunc i64 %5 to i32, !dbg !2831
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !2831
  %_mp_size4 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 1, !dbg !2831
  store i32 %conv3, i32* %_mp_size4, align 4, !dbg !2831
  br label %do.end, !dbg !2831

do.end:                                           ; preds = %do.body
  br label %do.body5, !dbg !2832

do.body5:                                         ; preds = %do.end
  call void @llvm.dbg.declare(metadata i64* %__mp_size_t_swap__tmp6, metadata !2833, metadata !DIExpression()), !dbg !2835
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2835
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %7, i32 0, i32 0, !dbg !2835
  %8 = load i32, i32* %_mp_alloc, align 8, !dbg !2835
  %conv7 = sext i32 %8 to i64, !dbg !2835
  store i64 %conv7, i64* %__mp_size_t_swap__tmp6, align 8, !dbg !2835
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !2835
  %_mp_alloc8 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %9, i32 0, i32 0, !dbg !2835
  %10 = load i32, i32* %_mp_alloc8, align 8, !dbg !2835
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2835
  %_mp_alloc9 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %11, i32 0, i32 0, !dbg !2835
  store i32 %10, i32* %_mp_alloc9, align 8, !dbg !2835
  %12 = load i64, i64* %__mp_size_t_swap__tmp6, align 8, !dbg !2835
  %conv10 = trunc i64 %12 to i32, !dbg !2835
  %13 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !2835
  %_mp_alloc11 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %13, i32 0, i32 0, !dbg !2835
  store i32 %conv10, i32* %_mp_alloc11, align 8, !dbg !2835
  br label %do.end12, !dbg !2835

do.end12:                                         ; preds = %do.body5
  br label %do.body13, !dbg !2836

do.body13:                                        ; preds = %do.end12
  call void @llvm.dbg.declare(metadata i64** %__mp_ptr_swap__tmp, metadata !2837, metadata !DIExpression()), !dbg !2839
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2839
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %14, i32 0, i32 2, !dbg !2839
  %15 = load i64*, i64** %_mp_d, align 8, !dbg !2839
  store i64* %15, i64** %__mp_ptr_swap__tmp, align 8, !dbg !2839
  %16 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !2839
  %_mp_d14 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %16, i32 0, i32 2, !dbg !2839
  %17 = load i64*, i64** %_mp_d14, align 8, !dbg !2839
  %18 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !2839
  %_mp_d15 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %18, i32 0, i32 2, !dbg !2839
  store i64* %17, i64** %_mp_d15, align 8, !dbg !2839
  %19 = load i64*, i64** %__mp_ptr_swap__tmp, align 8, !dbg !2839
  %20 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !2839
  %_mp_d16 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %20, i32 0, i32 2, !dbg !2839
  store i64* %19, i64** %_mp_d16, align 8, !dbg !2839
  br label %do.end17, !dbg !2839

do.end17:                                         ; preds = %do.body13
  ret void, !dbg !2840
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_add_ui(%struct.__mpz_struct* %r, %struct.__mpz_struct* %a, i64 %b) #0 !dbg !2841 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %a.addr = alloca %struct.__mpz_struct*, align 8
  %b.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !2844, metadata !DIExpression()), !dbg !2845
  store %struct.__mpz_struct* %a, %struct.__mpz_struct** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %a.addr, metadata !2846, metadata !DIExpression()), !dbg !2847
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !2848, metadata !DIExpression()), !dbg !2849
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2850
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2852
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2852
  %cmp = icmp sge i32 %1, 0, !dbg !2853
  br i1 %cmp, label %if.then, label %if.else, !dbg !2854

if.then:                                          ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2855
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2856
  %4 = load i64, i64* %b.addr, align 8, !dbg !2857
  %call = call i64 @mpz_abs_add_ui(%struct.__mpz_struct* %2, %struct.__mpz_struct* %3, i64 %4), !dbg !2858
  %conv = trunc i64 %call to i32, !dbg !2858
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2859
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %5, i32 0, i32 1, !dbg !2860
  store i32 %conv, i32* %_mp_size1, align 4, !dbg !2861
  br label %if.end, !dbg !2859

if.else:                                          ; preds = %entry
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2862
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2863
  %8 = load i64, i64* %b.addr, align 8, !dbg !2864
  %call2 = call i64 @mpz_abs_sub_ui(%struct.__mpz_struct* %6, %struct.__mpz_struct* %7, i64 %8), !dbg !2865
  %sub = sub nsw i64 0, %call2, !dbg !2866
  %conv3 = trunc i64 %sub to i32, !dbg !2866
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2867
  %_mp_size4 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %9, i32 0, i32 1, !dbg !2868
  store i32 %conv3, i32* %_mp_size4, align 4, !dbg !2869
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2870
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpz_abs_add_ui(%struct.__mpz_struct* %r, %struct.__mpz_struct* %a, i64 %b) #0 !dbg !2871 {
entry:
  %retval = alloca i64, align 8
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %a.addr = alloca %struct.__mpz_struct*, align 8
  %b.addr = alloca i64, align 8
  %an = alloca i64, align 8
  %rp = alloca i64*, align 8
  %cy = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !2874, metadata !DIExpression()), !dbg !2875
  store %struct.__mpz_struct* %a, %struct.__mpz_struct** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %a.addr, metadata !2876, metadata !DIExpression()), !dbg !2877
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !2878, metadata !DIExpression()), !dbg !2879
  call void @llvm.dbg.declare(metadata i64* %an, metadata !2880, metadata !DIExpression()), !dbg !2881
  call void @llvm.dbg.declare(metadata i64** %rp, metadata !2882, metadata !DIExpression()), !dbg !2883
  call void @llvm.dbg.declare(metadata i64* %cy, metadata !2884, metadata !DIExpression()), !dbg !2885
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2886
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2886
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2886
  %cmp = icmp sge i32 %1, 0, !dbg !2886
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2886

cond.true:                                        ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2886
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !2886
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !2886
  br label %cond.end, !dbg !2886

cond.false:                                       ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2886
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !2886
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !2886
  %sub = sub nsw i32 0, %5, !dbg !2886
  br label %cond.end, !dbg !2886

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !2886
  %conv = sext i32 %cond to i64, !dbg !2886
  store i64 %conv, i64* %an, align 8, !dbg !2887
  %6 = load i64, i64* %an, align 8, !dbg !2888
  %cmp3 = icmp eq i64 %6, 0, !dbg !2890
  br i1 %cmp3, label %if.then, label %if.end, !dbg !2891

if.then:                                          ; preds = %cond.end
  %7 = load i64, i64* %b.addr, align 8, !dbg !2892
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2894
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 2, !dbg !2895
  %9 = load i64*, i64** %_mp_d, align 8, !dbg !2895
  %arrayidx = getelementptr inbounds i64, i64* %9, i64 0, !dbg !2894
  store i64 %7, i64* %arrayidx, align 8, !dbg !2896
  %10 = load i64, i64* %b.addr, align 8, !dbg !2897
  %cmp5 = icmp ugt i64 %10, 0, !dbg !2898
  %conv6 = zext i1 %cmp5 to i32, !dbg !2898
  %conv7 = sext i32 %conv6 to i64, !dbg !2897
  store i64 %conv7, i64* %retval, align 8, !dbg !2899
  br label %return, !dbg !2899

if.end:                                           ; preds = %cond.end
  %11 = load i64, i64* %an, align 8, !dbg !2900
  %add = add nsw i64 %11, 1, !dbg !2900
  %12 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2900
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %12, i32 0, i32 0, !dbg !2900
  %13 = load i32, i32* %_mp_alloc, align 8, !dbg !2900
  %conv8 = sext i32 %13 to i64, !dbg !2900
  %cmp9 = icmp sgt i64 %add, %conv8, !dbg !2900
  br i1 %cmp9, label %cond.true11, label %cond.false13, !dbg !2900

cond.true11:                                      ; preds = %if.end
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2900
  %15 = load i64, i64* %an, align 8, !dbg !2900
  %add12 = add nsw i64 %15, 1, !dbg !2900
  %call = call i8* @mpz_realloc(%struct.__mpz_struct* %14, i64 %add12), !dbg !2900
  br label %cond.end15, !dbg !2900

cond.false13:                                     ; preds = %if.end
  %16 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2900
  %_mp_d14 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %16, i32 0, i32 2, !dbg !2900
  %17 = load i64*, i64** %_mp_d14, align 8, !dbg !2900
  %18 = bitcast i64* %17 to i8*, !dbg !2900
  br label %cond.end15, !dbg !2900

cond.end15:                                       ; preds = %cond.false13, %cond.true11
  %cond16 = phi i8* [ %call, %cond.true11 ], [ %18, %cond.false13 ], !dbg !2900
  %19 = bitcast i8* %cond16 to i64*, !dbg !2900
  store i64* %19, i64** %rp, align 8, !dbg !2901
  %20 = load i64*, i64** %rp, align 8, !dbg !2902
  %21 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2903
  %_mp_d17 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %21, i32 0, i32 2, !dbg !2904
  %22 = load i64*, i64** %_mp_d17, align 8, !dbg !2904
  %23 = load i64, i64* %an, align 8, !dbg !2905
  %24 = load i64, i64* %b.addr, align 8, !dbg !2906
  %call18 = call i64 @mpn_add_1(i64* %20, i64* %22, i64 %23, i64 %24), !dbg !2907
  store i64 %call18, i64* %cy, align 8, !dbg !2908
  %25 = load i64, i64* %cy, align 8, !dbg !2909
  %26 = load i64*, i64** %rp, align 8, !dbg !2910
  %27 = load i64, i64* %an, align 8, !dbg !2911
  %arrayidx19 = getelementptr inbounds i64, i64* %26, i64 %27, !dbg !2910
  store i64 %25, i64* %arrayidx19, align 8, !dbg !2912
  %28 = load i64, i64* %cy, align 8, !dbg !2913
  %29 = load i64, i64* %an, align 8, !dbg !2914
  %add20 = add i64 %29, %28, !dbg !2914
  store i64 %add20, i64* %an, align 8, !dbg !2914
  %30 = load i64, i64* %an, align 8, !dbg !2915
  store i64 %30, i64* %retval, align 8, !dbg !2916
  br label %return, !dbg !2916

return:                                           ; preds = %cond.end15, %if.then
  %31 = load i64, i64* %retval, align 8, !dbg !2917
  ret i64 %31, !dbg !2917
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpz_abs_sub_ui(%struct.__mpz_struct* %r, %struct.__mpz_struct* %a, i64 %b) #0 !dbg !2918 {
entry:
  %retval = alloca i64, align 8
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %a.addr = alloca %struct.__mpz_struct*, align 8
  %b.addr = alloca i64, align 8
  %an = alloca i64, align 8
  %rp = alloca i64*, align 8
  %__cy = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !2919, metadata !DIExpression()), !dbg !2920
  store %struct.__mpz_struct* %a, %struct.__mpz_struct** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %a.addr, metadata !2921, metadata !DIExpression()), !dbg !2922
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !2923, metadata !DIExpression()), !dbg !2924
  call void @llvm.dbg.declare(metadata i64* %an, metadata !2925, metadata !DIExpression()), !dbg !2926
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2927
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2927
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2927
  %cmp = icmp sge i32 %1, 0, !dbg !2927
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2927

cond.true:                                        ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2927
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !2927
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !2927
  br label %cond.end, !dbg !2927

cond.false:                                       ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2927
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !2927
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !2927
  %sub = sub nsw i32 0, %5, !dbg !2927
  br label %cond.end, !dbg !2927

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !2927
  %conv = sext i32 %cond to i64, !dbg !2927
  store i64 %conv, i64* %an, align 8, !dbg !2926
  call void @llvm.dbg.declare(metadata i64** %rp, metadata !2928, metadata !DIExpression()), !dbg !2929
  %6 = load i64, i64* %an, align 8, !dbg !2930
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2930
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %7, i32 0, i32 0, !dbg !2930
  %8 = load i32, i32* %_mp_alloc, align 8, !dbg !2930
  %conv3 = sext i32 %8 to i64, !dbg !2930
  %cmp4 = icmp sgt i64 %6, %conv3, !dbg !2930
  br i1 %cmp4, label %cond.true6, label %cond.false7, !dbg !2930

cond.true6:                                       ; preds = %cond.end
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2930
  %10 = load i64, i64* %an, align 8, !dbg !2930
  %call = call i8* @mpz_realloc(%struct.__mpz_struct* %9, i64 %10), !dbg !2930
  br label %cond.end8, !dbg !2930

cond.false7:                                      ; preds = %cond.end
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2930
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %11, i32 0, i32 2, !dbg !2930
  %12 = load i64*, i64** %_mp_d, align 8, !dbg !2930
  %13 = bitcast i64* %12 to i8*, !dbg !2930
  br label %cond.end8, !dbg !2930

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i8* [ %call, %cond.true6 ], [ %13, %cond.false7 ], !dbg !2930
  %14 = bitcast i8* %cond9 to i64*, !dbg !2930
  store i64* %14, i64** %rp, align 8, !dbg !2929
  %15 = load i64, i64* %an, align 8, !dbg !2931
  %cmp10 = icmp eq i64 %15, 0, !dbg !2933
  br i1 %cmp10, label %if.then, label %if.else, !dbg !2934

if.then:                                          ; preds = %cond.end8
  %16 = load i64, i64* %b.addr, align 8, !dbg !2935
  %17 = load i64*, i64** %rp, align 8, !dbg !2937
  %arrayidx = getelementptr inbounds i64, i64* %17, i64 0, !dbg !2937
  store i64 %16, i64* %arrayidx, align 8, !dbg !2938
  %18 = load i64, i64* %b.addr, align 8, !dbg !2939
  %cmp12 = icmp ugt i64 %18, 0, !dbg !2940
  %conv13 = zext i1 %cmp12 to i32, !dbg !2940
  %sub14 = sub nsw i32 0, %conv13, !dbg !2941
  %conv15 = sext i32 %sub14 to i64, !dbg !2941
  store i64 %conv15, i64* %retval, align 8, !dbg !2942
  br label %return, !dbg !2942

if.else:                                          ; preds = %cond.end8
  %19 = load i64, i64* %an, align 8, !dbg !2943
  %cmp16 = icmp eq i64 %19, 1, !dbg !2945
  br i1 %cmp16, label %land.lhs.true, label %if.else27, !dbg !2946

land.lhs.true:                                    ; preds = %if.else
  %20 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2947
  %_mp_d18 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %20, i32 0, i32 2, !dbg !2948
  %21 = load i64*, i64** %_mp_d18, align 8, !dbg !2948
  %arrayidx19 = getelementptr inbounds i64, i64* %21, i64 0, !dbg !2947
  %22 = load i64, i64* %arrayidx19, align 8, !dbg !2947
  %23 = load i64, i64* %b.addr, align 8, !dbg !2949
  %cmp20 = icmp ult i64 %22, %23, !dbg !2950
  br i1 %cmp20, label %if.then22, label %if.else27, !dbg !2951

if.then22:                                        ; preds = %land.lhs.true
  %24 = load i64, i64* %b.addr, align 8, !dbg !2952
  %25 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2954
  %_mp_d23 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %25, i32 0, i32 2, !dbg !2955
  %26 = load i64*, i64** %_mp_d23, align 8, !dbg !2955
  %arrayidx24 = getelementptr inbounds i64, i64* %26, i64 0, !dbg !2954
  %27 = load i64, i64* %arrayidx24, align 8, !dbg !2954
  %sub25 = sub i64 %24, %27, !dbg !2956
  %28 = load i64*, i64** %rp, align 8, !dbg !2957
  %arrayidx26 = getelementptr inbounds i64, i64* %28, i64 0, !dbg !2957
  store i64 %sub25, i64* %arrayidx26, align 8, !dbg !2958
  store i64 -1, i64* %retval, align 8, !dbg !2959
  br label %return, !dbg !2959

if.else27:                                        ; preds = %land.lhs.true, %if.else
  br label %do.body, !dbg !2960

do.body:                                          ; preds = %if.else27
  call void @llvm.dbg.declare(metadata i64* %__cy, metadata !2962, metadata !DIExpression()), !dbg !2964
  %29 = load i64*, i64** %rp, align 8, !dbg !2964
  %30 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2964
  %_mp_d28 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %30, i32 0, i32 2, !dbg !2964
  %31 = load i64*, i64** %_mp_d28, align 8, !dbg !2964
  %32 = load i64, i64* %an, align 8, !dbg !2964
  %33 = load i64, i64* %b.addr, align 8, !dbg !2964
  %call29 = call i64 @mpn_sub_1(i64* %29, i64* %31, i64 %32, i64 %33), !dbg !2964
  store i64 %call29, i64* %__cy, align 8, !dbg !2964
  br label %do.end, !dbg !2964

do.end:                                           ; preds = %do.body
  %34 = load i64*, i64** %rp, align 8, !dbg !2965
  %35 = load i64, i64* %an, align 8, !dbg !2966
  %call30 = call i64 @mpn_normalized_size(i64* %34, i64 %35), !dbg !2967
  store i64 %call30, i64* %retval, align 8, !dbg !2968
  br label %return, !dbg !2968

return:                                           ; preds = %do.end, %if.then22, %if.then
  %36 = load i64, i64* %retval, align 8, !dbg !2969
  ret i64 %36, !dbg !2969
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_sub_ui(%struct.__mpz_struct* %r, %struct.__mpz_struct* %a, i64 %b) #0 !dbg !2970 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %a.addr = alloca %struct.__mpz_struct*, align 8
  %b.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !2971, metadata !DIExpression()), !dbg !2972
  store %struct.__mpz_struct* %a, %struct.__mpz_struct** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %a.addr, metadata !2973, metadata !DIExpression()), !dbg !2974
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !2975, metadata !DIExpression()), !dbg !2976
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2977
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !2979
  %1 = load i32, i32* %_mp_size, align 4, !dbg !2979
  %cmp = icmp slt i32 %1, 0, !dbg !2980
  br i1 %cmp, label %if.then, label %if.else, !dbg !2981

if.then:                                          ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2982
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2983
  %4 = load i64, i64* %b.addr, align 8, !dbg !2984
  %call = call i64 @mpz_abs_add_ui(%struct.__mpz_struct* %2, %struct.__mpz_struct* %3, i64 %4), !dbg !2985
  %sub = sub nsw i64 0, %call, !dbg !2986
  %conv = trunc i64 %sub to i32, !dbg !2986
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2987
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %5, i32 0, i32 1, !dbg !2988
  store i32 %conv, i32* %_mp_size1, align 4, !dbg !2989
  br label %if.end, !dbg !2987

if.else:                                          ; preds = %entry
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2990
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !2991
  %8 = load i64, i64* %b.addr, align 8, !dbg !2992
  %call2 = call i64 @mpz_abs_sub_ui(%struct.__mpz_struct* %6, %struct.__mpz_struct* %7, i64 %8), !dbg !2993
  %conv3 = trunc i64 %call2 to i32, !dbg !2993
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !2994
  %_mp_size4 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %9, i32 0, i32 1, !dbg !2995
  store i32 %conv3, i32* %_mp_size4, align 4, !dbg !2996
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2997
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_ui_sub(%struct.__mpz_struct* %r, i64 %a, %struct.__mpz_struct* %b) #0 !dbg !2998 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %a.addr = alloca i64, align 8
  %b.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3001, metadata !DIExpression()), !dbg !3002
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !3003, metadata !DIExpression()), !dbg !3004
  store %struct.__mpz_struct* %b, %struct.__mpz_struct** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %b.addr, metadata !3005, metadata !DIExpression()), !dbg !3006
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3007
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !3009
  %1 = load i32, i32* %_mp_size, align 4, !dbg !3009
  %cmp = icmp slt i32 %1, 0, !dbg !3010
  br i1 %cmp, label %if.then, label %if.else, !dbg !3011

if.then:                                          ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3012
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3013
  %4 = load i64, i64* %a.addr, align 8, !dbg !3014
  %call = call i64 @mpz_abs_add_ui(%struct.__mpz_struct* %2, %struct.__mpz_struct* %3, i64 %4), !dbg !3015
  %conv = trunc i64 %call to i32, !dbg !3015
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3016
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %5, i32 0, i32 1, !dbg !3017
  store i32 %conv, i32* %_mp_size1, align 4, !dbg !3018
  br label %if.end, !dbg !3016

if.else:                                          ; preds = %entry
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3019
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3020
  %8 = load i64, i64* %a.addr, align 8, !dbg !3021
  %call2 = call i64 @mpz_abs_sub_ui(%struct.__mpz_struct* %6, %struct.__mpz_struct* %7, i64 %8), !dbg !3022
  %sub = sub nsw i64 0, %call2, !dbg !3023
  %conv3 = trunc i64 %sub to i32, !dbg !3023
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3024
  %_mp_size4 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %9, i32 0, i32 1, !dbg !3025
  store i32 %conv3, i32* %_mp_size4, align 4, !dbg !3026
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !3027
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_add(%struct.__mpz_struct* %r, %struct.__mpz_struct* %a, %struct.__mpz_struct* %b) #0 !dbg !3028 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %a.addr = alloca %struct.__mpz_struct*, align 8
  %b.addr = alloca %struct.__mpz_struct*, align 8
  %rn = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3031, metadata !DIExpression()), !dbg !3032
  store %struct.__mpz_struct* %a, %struct.__mpz_struct** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %a.addr, metadata !3033, metadata !DIExpression()), !dbg !3034
  store %struct.__mpz_struct* %b, %struct.__mpz_struct** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %b.addr, metadata !3035, metadata !DIExpression()), !dbg !3036
  call void @llvm.dbg.declare(metadata i64* %rn, metadata !3037, metadata !DIExpression()), !dbg !3038
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3039
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !3041
  %1 = load i32, i32* %_mp_size, align 4, !dbg !3041
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3042
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !3043
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !3043
  %xor = xor i32 %1, %3, !dbg !3044
  %cmp = icmp sge i32 %xor, 0, !dbg !3045
  br i1 %cmp, label %if.then, label %if.else, !dbg !3046

if.then:                                          ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3047
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3048
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3049
  %call = call i64 @mpz_abs_add(%struct.__mpz_struct* %4, %struct.__mpz_struct* %5, %struct.__mpz_struct* %6), !dbg !3050
  store i64 %call, i64* %rn, align 8, !dbg !3051
  br label %if.end, !dbg !3052

if.else:                                          ; preds = %entry
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3053
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3054
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3055
  %call2 = call i64 @mpz_abs_sub(%struct.__mpz_struct* %7, %struct.__mpz_struct* %8, %struct.__mpz_struct* %9), !dbg !3056
  store i64 %call2, i64* %rn, align 8, !dbg !3057
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3058
  %_mp_size3 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 1, !dbg !3059
  %11 = load i32, i32* %_mp_size3, align 4, !dbg !3059
  %cmp4 = icmp sge i32 %11, 0, !dbg !3060
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !3058

cond.true:                                        ; preds = %if.end
  %12 = load i64, i64* %rn, align 8, !dbg !3061
  br label %cond.end, !dbg !3058

cond.false:                                       ; preds = %if.end
  %13 = load i64, i64* %rn, align 8, !dbg !3062
  %sub = sub nsw i64 0, %13, !dbg !3063
  br label %cond.end, !dbg !3058

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %12, %cond.true ], [ %sub, %cond.false ], !dbg !3058
  %conv = trunc i64 %cond to i32, !dbg !3058
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3064
  %_mp_size5 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %14, i32 0, i32 1, !dbg !3065
  store i32 %conv, i32* %_mp_size5, align 4, !dbg !3066
  ret void, !dbg !3067
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpz_abs_add(%struct.__mpz_struct* %r, %struct.__mpz_struct* %a, %struct.__mpz_struct* %b) #0 !dbg !3068 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %a.addr = alloca %struct.__mpz_struct*, align 8
  %b.addr = alloca %struct.__mpz_struct*, align 8
  %an = alloca i64, align 8
  %bn = alloca i64, align 8
  %rp = alloca i64*, align 8
  %cy = alloca i64, align 8
  %__mpz_srcptr_swap__tmp = alloca %struct.__mpz_struct*, align 8
  %__mp_size_t_swap__tmp = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3071, metadata !DIExpression()), !dbg !3072
  store %struct.__mpz_struct* %a, %struct.__mpz_struct** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %a.addr, metadata !3073, metadata !DIExpression()), !dbg !3074
  store %struct.__mpz_struct* %b, %struct.__mpz_struct** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %b.addr, metadata !3075, metadata !DIExpression()), !dbg !3076
  call void @llvm.dbg.declare(metadata i64* %an, metadata !3077, metadata !DIExpression()), !dbg !3078
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3079
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !3079
  %1 = load i32, i32* %_mp_size, align 4, !dbg !3079
  %cmp = icmp sge i32 %1, 0, !dbg !3079
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3079

cond.true:                                        ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3079
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !3079
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !3079
  br label %cond.end, !dbg !3079

cond.false:                                       ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3079
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !3079
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !3079
  %sub = sub nsw i32 0, %5, !dbg !3079
  br label %cond.end, !dbg !3079

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !3079
  %conv = sext i32 %cond to i64, !dbg !3079
  store i64 %conv, i64* %an, align 8, !dbg !3078
  call void @llvm.dbg.declare(metadata i64* %bn, metadata !3080, metadata !DIExpression()), !dbg !3081
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3082
  %_mp_size3 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 1, !dbg !3082
  %7 = load i32, i32* %_mp_size3, align 4, !dbg !3082
  %cmp4 = icmp sge i32 %7, 0, !dbg !3082
  br i1 %cmp4, label %cond.true6, label %cond.false8, !dbg !3082

cond.true6:                                       ; preds = %cond.end
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3082
  %_mp_size7 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 1, !dbg !3082
  %9 = load i32, i32* %_mp_size7, align 4, !dbg !3082
  br label %cond.end11, !dbg !3082

cond.false8:                                      ; preds = %cond.end
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3082
  %_mp_size9 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 1, !dbg !3082
  %11 = load i32, i32* %_mp_size9, align 4, !dbg !3082
  %sub10 = sub nsw i32 0, %11, !dbg !3082
  br label %cond.end11, !dbg !3082

cond.end11:                                       ; preds = %cond.false8, %cond.true6
  %cond12 = phi i32 [ %9, %cond.true6 ], [ %sub10, %cond.false8 ], !dbg !3082
  %conv13 = sext i32 %cond12 to i64, !dbg !3082
  store i64 %conv13, i64* %bn, align 8, !dbg !3081
  call void @llvm.dbg.declare(metadata i64** %rp, metadata !3083, metadata !DIExpression()), !dbg !3084
  call void @llvm.dbg.declare(metadata i64* %cy, metadata !3085, metadata !DIExpression()), !dbg !3086
  %12 = load i64, i64* %an, align 8, !dbg !3087
  %13 = load i64, i64* %bn, align 8, !dbg !3089
  %cmp14 = icmp slt i64 %12, %13, !dbg !3090
  br i1 %cmp14, label %if.then, label %if.end, !dbg !3091

if.then:                                          ; preds = %cond.end11
  br label %do.body, !dbg !3092

do.body:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %__mpz_srcptr_swap__tmp, metadata !3094, metadata !DIExpression()), !dbg !3096
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3096
  store %struct.__mpz_struct* %14, %struct.__mpz_struct** %__mpz_srcptr_swap__tmp, align 8, !dbg !3096
  %15 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3096
  store %struct.__mpz_struct* %15, %struct.__mpz_struct** %a.addr, align 8, !dbg !3096
  %16 = load %struct.__mpz_struct*, %struct.__mpz_struct** %__mpz_srcptr_swap__tmp, align 8, !dbg !3096
  store %struct.__mpz_struct* %16, %struct.__mpz_struct** %b.addr, align 8, !dbg !3096
  br label %do.end, !dbg !3096

do.end:                                           ; preds = %do.body
  br label %do.body16, !dbg !3097

do.body16:                                        ; preds = %do.end
  call void @llvm.dbg.declare(metadata i64* %__mp_size_t_swap__tmp, metadata !3098, metadata !DIExpression()), !dbg !3100
  %17 = load i64, i64* %an, align 8, !dbg !3100
  store i64 %17, i64* %__mp_size_t_swap__tmp, align 8, !dbg !3100
  %18 = load i64, i64* %bn, align 8, !dbg !3100
  store i64 %18, i64* %an, align 8, !dbg !3100
  %19 = load i64, i64* %__mp_size_t_swap__tmp, align 8, !dbg !3100
  store i64 %19, i64* %bn, align 8, !dbg !3100
  br label %do.end17, !dbg !3100

do.end17:                                         ; preds = %do.body16
  br label %if.end, !dbg !3101

if.end:                                           ; preds = %do.end17, %cond.end11
  %20 = load i64, i64* %an, align 8, !dbg !3102
  %add = add nsw i64 %20, 1, !dbg !3102
  %21 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3102
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %21, i32 0, i32 0, !dbg !3102
  %22 = load i32, i32* %_mp_alloc, align 8, !dbg !3102
  %conv18 = sext i32 %22 to i64, !dbg !3102
  %cmp19 = icmp sgt i64 %add, %conv18, !dbg !3102
  br i1 %cmp19, label %cond.true21, label %cond.false23, !dbg !3102

cond.true21:                                      ; preds = %if.end
  %23 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3102
  %24 = load i64, i64* %an, align 8, !dbg !3102
  %add22 = add nsw i64 %24, 1, !dbg !3102
  %call = call i8* @mpz_realloc(%struct.__mpz_struct* %23, i64 %add22), !dbg !3102
  br label %cond.end24, !dbg !3102

cond.false23:                                     ; preds = %if.end
  %25 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3102
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %25, i32 0, i32 2, !dbg !3102
  %26 = load i64*, i64** %_mp_d, align 8, !dbg !3102
  %27 = bitcast i64* %26 to i8*, !dbg !3102
  br label %cond.end24, !dbg !3102

cond.end24:                                       ; preds = %cond.false23, %cond.true21
  %cond25 = phi i8* [ %call, %cond.true21 ], [ %27, %cond.false23 ], !dbg !3102
  %28 = bitcast i8* %cond25 to i64*, !dbg !3102
  store i64* %28, i64** %rp, align 8, !dbg !3103
  %29 = load i64*, i64** %rp, align 8, !dbg !3104
  %30 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3105
  %_mp_d26 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %30, i32 0, i32 2, !dbg !3106
  %31 = load i64*, i64** %_mp_d26, align 8, !dbg !3106
  %32 = load i64, i64* %an, align 8, !dbg !3107
  %33 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3108
  %_mp_d27 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %33, i32 0, i32 2, !dbg !3109
  %34 = load i64*, i64** %_mp_d27, align 8, !dbg !3109
  %35 = load i64, i64* %bn, align 8, !dbg !3110
  %call28 = call i64 @mpn_add(i64* %29, i64* %31, i64 %32, i64* %34, i64 %35), !dbg !3111
  store i64 %call28, i64* %cy, align 8, !dbg !3112
  %36 = load i64, i64* %cy, align 8, !dbg !3113
  %37 = load i64*, i64** %rp, align 8, !dbg !3114
  %38 = load i64, i64* %an, align 8, !dbg !3115
  %arrayidx = getelementptr inbounds i64, i64* %37, i64 %38, !dbg !3114
  store i64 %36, i64* %arrayidx, align 8, !dbg !3116
  %39 = load i64, i64* %an, align 8, !dbg !3117
  %40 = load i64, i64* %cy, align 8, !dbg !3118
  %add29 = add i64 %39, %40, !dbg !3119
  ret i64 %add29, !dbg !3120
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpz_abs_sub(%struct.__mpz_struct* %r, %struct.__mpz_struct* %a, %struct.__mpz_struct* %b) #0 !dbg !3121 {
entry:
  %retval = alloca i64, align 8
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %a.addr = alloca %struct.__mpz_struct*, align 8
  %b.addr = alloca %struct.__mpz_struct*, align 8
  %an = alloca i64, align 8
  %bn = alloca i64, align 8
  %cmp14 = alloca i32, align 4
  %rp = alloca i64*, align 8
  %__cy = alloca i64, align 8
  %__cy45 = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3122, metadata !DIExpression()), !dbg !3123
  store %struct.__mpz_struct* %a, %struct.__mpz_struct** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %a.addr, metadata !3124, metadata !DIExpression()), !dbg !3125
  store %struct.__mpz_struct* %b, %struct.__mpz_struct** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %b.addr, metadata !3126, metadata !DIExpression()), !dbg !3127
  call void @llvm.dbg.declare(metadata i64* %an, metadata !3128, metadata !DIExpression()), !dbg !3129
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3130
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !3130
  %1 = load i32, i32* %_mp_size, align 4, !dbg !3130
  %cmp = icmp sge i32 %1, 0, !dbg !3130
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3130

cond.true:                                        ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3130
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !3130
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !3130
  br label %cond.end, !dbg !3130

cond.false:                                       ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3130
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !3130
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !3130
  %sub = sub nsw i32 0, %5, !dbg !3130
  br label %cond.end, !dbg !3130

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !3130
  %conv = sext i32 %cond to i64, !dbg !3130
  store i64 %conv, i64* %an, align 8, !dbg !3129
  call void @llvm.dbg.declare(metadata i64* %bn, metadata !3131, metadata !DIExpression()), !dbg !3132
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3133
  %_mp_size3 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 1, !dbg !3133
  %7 = load i32, i32* %_mp_size3, align 4, !dbg !3133
  %cmp4 = icmp sge i32 %7, 0, !dbg !3133
  br i1 %cmp4, label %cond.true6, label %cond.false8, !dbg !3133

cond.true6:                                       ; preds = %cond.end
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3133
  %_mp_size7 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 1, !dbg !3133
  %9 = load i32, i32* %_mp_size7, align 4, !dbg !3133
  br label %cond.end11, !dbg !3133

cond.false8:                                      ; preds = %cond.end
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3133
  %_mp_size9 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 1, !dbg !3133
  %11 = load i32, i32* %_mp_size9, align 4, !dbg !3133
  %sub10 = sub nsw i32 0, %11, !dbg !3133
  br label %cond.end11, !dbg !3133

cond.end11:                                       ; preds = %cond.false8, %cond.true6
  %cond12 = phi i32 [ %9, %cond.true6 ], [ %sub10, %cond.false8 ], !dbg !3133
  %conv13 = sext i32 %cond12 to i64, !dbg !3133
  store i64 %conv13, i64* %bn, align 8, !dbg !3132
  call void @llvm.dbg.declare(metadata i32* %cmp14, metadata !3134, metadata !DIExpression()), !dbg !3135
  call void @llvm.dbg.declare(metadata i64** %rp, metadata !3136, metadata !DIExpression()), !dbg !3137
  %12 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3138
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %12, i32 0, i32 2, !dbg !3139
  %13 = load i64*, i64** %_mp_d, align 8, !dbg !3139
  %14 = load i64, i64* %an, align 8, !dbg !3140
  %15 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3141
  %_mp_d15 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %15, i32 0, i32 2, !dbg !3142
  %16 = load i64*, i64** %_mp_d15, align 8, !dbg !3142
  %17 = load i64, i64* %bn, align 8, !dbg !3143
  %call = call i32 @mpn_cmp4(i64* %13, i64 %14, i64* %16, i64 %17), !dbg !3144
  store i32 %call, i32* %cmp14, align 4, !dbg !3145
  %18 = load i32, i32* %cmp14, align 4, !dbg !3146
  %cmp16 = icmp sgt i32 %18, 0, !dbg !3148
  br i1 %cmp16, label %if.then, label %if.else, !dbg !3149

if.then:                                          ; preds = %cond.end11
  %19 = load i64, i64* %an, align 8, !dbg !3150
  %20 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3150
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %20, i32 0, i32 0, !dbg !3150
  %21 = load i32, i32* %_mp_alloc, align 8, !dbg !3150
  %conv18 = sext i32 %21 to i64, !dbg !3150
  %cmp19 = icmp sgt i64 %19, %conv18, !dbg !3150
  br i1 %cmp19, label %cond.true21, label %cond.false23, !dbg !3150

cond.true21:                                      ; preds = %if.then
  %22 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3150
  %23 = load i64, i64* %an, align 8, !dbg !3150
  %call22 = call i8* @mpz_realloc(%struct.__mpz_struct* %22, i64 %23), !dbg !3150
  br label %cond.end25, !dbg !3150

cond.false23:                                     ; preds = %if.then
  %24 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3150
  %_mp_d24 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %24, i32 0, i32 2, !dbg !3150
  %25 = load i64*, i64** %_mp_d24, align 8, !dbg !3150
  %26 = bitcast i64* %25 to i8*, !dbg !3150
  br label %cond.end25, !dbg !3150

cond.end25:                                       ; preds = %cond.false23, %cond.true21
  %cond26 = phi i8* [ %call22, %cond.true21 ], [ %26, %cond.false23 ], !dbg !3150
  %27 = bitcast i8* %cond26 to i64*, !dbg !3150
  store i64* %27, i64** %rp, align 8, !dbg !3152
  br label %do.body, !dbg !3153

do.body:                                          ; preds = %cond.end25
  call void @llvm.dbg.declare(metadata i64* %__cy, metadata !3154, metadata !DIExpression()), !dbg !3156
  %28 = load i64*, i64** %rp, align 8, !dbg !3156
  %29 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3156
  %_mp_d27 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %29, i32 0, i32 2, !dbg !3156
  %30 = load i64*, i64** %_mp_d27, align 8, !dbg !3156
  %31 = load i64, i64* %an, align 8, !dbg !3156
  %32 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3156
  %_mp_d28 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %32, i32 0, i32 2, !dbg !3156
  %33 = load i64*, i64** %_mp_d28, align 8, !dbg !3156
  %34 = load i64, i64* %bn, align 8, !dbg !3156
  %call29 = call i64 @mpn_sub(i64* %28, i64* %30, i64 %31, i64* %33, i64 %34), !dbg !3156
  store i64 %call29, i64* %__cy, align 8, !dbg !3156
  br label %do.end, !dbg !3156

do.end:                                           ; preds = %do.body
  %35 = load i64*, i64** %rp, align 8, !dbg !3157
  %36 = load i64, i64* %an, align 8, !dbg !3158
  %call30 = call i64 @mpn_normalized_size(i64* %35, i64 %36), !dbg !3159
  store i64 %call30, i64* %retval, align 8, !dbg !3160
  br label %return, !dbg !3160

if.else:                                          ; preds = %cond.end11
  %37 = load i32, i32* %cmp14, align 4, !dbg !3161
  %cmp31 = icmp slt i32 %37, 0, !dbg !3163
  br i1 %cmp31, label %if.then33, label %if.else52, !dbg !3164

if.then33:                                        ; preds = %if.else
  %38 = load i64, i64* %bn, align 8, !dbg !3165
  %39 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3165
  %_mp_alloc34 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %39, i32 0, i32 0, !dbg !3165
  %40 = load i32, i32* %_mp_alloc34, align 8, !dbg !3165
  %conv35 = sext i32 %40 to i64, !dbg !3165
  %cmp36 = icmp sgt i64 %38, %conv35, !dbg !3165
  br i1 %cmp36, label %cond.true38, label %cond.false40, !dbg !3165

cond.true38:                                      ; preds = %if.then33
  %41 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3165
  %42 = load i64, i64* %bn, align 8, !dbg !3165
  %call39 = call i8* @mpz_realloc(%struct.__mpz_struct* %41, i64 %42), !dbg !3165
  br label %cond.end42, !dbg !3165

cond.false40:                                     ; preds = %if.then33
  %43 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3165
  %_mp_d41 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %43, i32 0, i32 2, !dbg !3165
  %44 = load i64*, i64** %_mp_d41, align 8, !dbg !3165
  %45 = bitcast i64* %44 to i8*, !dbg !3165
  br label %cond.end42, !dbg !3165

cond.end42:                                       ; preds = %cond.false40, %cond.true38
  %cond43 = phi i8* [ %call39, %cond.true38 ], [ %45, %cond.false40 ], !dbg !3165
  %46 = bitcast i8* %cond43 to i64*, !dbg !3165
  store i64* %46, i64** %rp, align 8, !dbg !3167
  br label %do.body44, !dbg !3168

do.body44:                                        ; preds = %cond.end42
  call void @llvm.dbg.declare(metadata i64* %__cy45, metadata !3169, metadata !DIExpression()), !dbg !3171
  %47 = load i64*, i64** %rp, align 8, !dbg !3171
  %48 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3171
  %_mp_d46 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %48, i32 0, i32 2, !dbg !3171
  %49 = load i64*, i64** %_mp_d46, align 8, !dbg !3171
  %50 = load i64, i64* %bn, align 8, !dbg !3171
  %51 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3171
  %_mp_d47 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %51, i32 0, i32 2, !dbg !3171
  %52 = load i64*, i64** %_mp_d47, align 8, !dbg !3171
  %53 = load i64, i64* %an, align 8, !dbg !3171
  %call48 = call i64 @mpn_sub(i64* %47, i64* %49, i64 %50, i64* %52, i64 %53), !dbg !3171
  store i64 %call48, i64* %__cy45, align 8, !dbg !3171
  br label %do.end49, !dbg !3171

do.end49:                                         ; preds = %do.body44
  %54 = load i64*, i64** %rp, align 8, !dbg !3172
  %55 = load i64, i64* %bn, align 8, !dbg !3173
  %call50 = call i64 @mpn_normalized_size(i64* %54, i64 %55), !dbg !3174
  %sub51 = sub nsw i64 0, %call50, !dbg !3175
  store i64 %sub51, i64* %retval, align 8, !dbg !3176
  br label %return, !dbg !3176

if.else52:                                        ; preds = %if.else
  store i64 0, i64* %retval, align 8, !dbg !3177
  br label %return, !dbg !3177

return:                                           ; preds = %if.else52, %do.end49, %do.end
  %56 = load i64, i64* %retval, align 8, !dbg !3178
  ret i64 %56, !dbg !3178
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_sub(%struct.__mpz_struct* %r, %struct.__mpz_struct* %a, %struct.__mpz_struct* %b) #0 !dbg !3179 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %a.addr = alloca %struct.__mpz_struct*, align 8
  %b.addr = alloca %struct.__mpz_struct*, align 8
  %rn = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3180, metadata !DIExpression()), !dbg !3181
  store %struct.__mpz_struct* %a, %struct.__mpz_struct** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %a.addr, metadata !3182, metadata !DIExpression()), !dbg !3183
  store %struct.__mpz_struct* %b, %struct.__mpz_struct** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %b.addr, metadata !3184, metadata !DIExpression()), !dbg !3185
  call void @llvm.dbg.declare(metadata i64* %rn, metadata !3186, metadata !DIExpression()), !dbg !3187
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3188
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !3190
  %1 = load i32, i32* %_mp_size, align 4, !dbg !3190
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3191
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !3192
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !3192
  %xor = xor i32 %1, %3, !dbg !3193
  %cmp = icmp sge i32 %xor, 0, !dbg !3194
  br i1 %cmp, label %if.then, label %if.else, !dbg !3195

if.then:                                          ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3196
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3197
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3198
  %call = call i64 @mpz_abs_sub(%struct.__mpz_struct* %4, %struct.__mpz_struct* %5, %struct.__mpz_struct* %6), !dbg !3199
  store i64 %call, i64* %rn, align 8, !dbg !3200
  br label %if.end, !dbg !3201

if.else:                                          ; preds = %entry
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3202
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3203
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !3204
  %call2 = call i64 @mpz_abs_add(%struct.__mpz_struct* %7, %struct.__mpz_struct* %8, %struct.__mpz_struct* %9), !dbg !3205
  store i64 %call2, i64* %rn, align 8, !dbg !3206
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !3207
  %_mp_size3 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 1, !dbg !3208
  %11 = load i32, i32* %_mp_size3, align 4, !dbg !3208
  %cmp4 = icmp sge i32 %11, 0, !dbg !3209
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !3207

cond.true:                                        ; preds = %if.end
  %12 = load i64, i64* %rn, align 8, !dbg !3210
  br label %cond.end, !dbg !3207

cond.false:                                       ; preds = %if.end
  %13 = load i64, i64* %rn, align 8, !dbg !3211
  %sub = sub nsw i64 0, %13, !dbg !3212
  br label %cond.end, !dbg !3207

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %12, %cond.true ], [ %sub, %cond.false ], !dbg !3207
  %conv = trunc i64 %cond to i32, !dbg !3207
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3213
  %_mp_size5 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %14, i32 0, i32 1, !dbg !3214
  store i32 %conv, i32* %_mp_size5, align 4, !dbg !3215
  ret void, !dbg !3216
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_mul_si(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, i64 %v) #0 !dbg !3217 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3220, metadata !DIExpression()), !dbg !3221
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !3222, metadata !DIExpression()), !dbg !3223
  store i64 %v, i64* %v.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %v.addr, metadata !3224, metadata !DIExpression()), !dbg !3225
  %0 = load i64, i64* %v.addr, align 8, !dbg !3226
  %cmp = icmp slt i64 %0, 0, !dbg !3228
  br i1 %cmp, label %if.then, label %if.else, !dbg !3229

if.then:                                          ; preds = %entry
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3230
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3232
  %3 = load i64, i64* %v.addr, align 8, !dbg !3233
  %add = add nsw i64 %3, 1, !dbg !3233
  %sub = sub i64 %add, 1, !dbg !3233
  %sub1 = sub i64 0, %sub, !dbg !3233
  call void @mpz_mul_ui(%struct.__mpz_struct* %1, %struct.__mpz_struct* %2, i64 %sub1), !dbg !3234
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3235
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3236
  call void @mpz_neg(%struct.__mpz_struct* %4, %struct.__mpz_struct* %5), !dbg !3237
  br label %if.end, !dbg !3238

if.else:                                          ; preds = %entry
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3239
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3240
  %8 = load i64, i64* %v.addr, align 8, !dbg !3241
  call void @mpz_mul_ui(%struct.__mpz_struct* %6, %struct.__mpz_struct* %7, i64 %8), !dbg !3242
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !3243
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_mul_ui(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, i64 %v) #0 !dbg !3244 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca i64, align 8
  %un = alloca i64, align 8
  %us = alloca i64, align 8
  %tp = alloca i64*, align 8
  %cy = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3245, metadata !DIExpression()), !dbg !3246
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !3247, metadata !DIExpression()), !dbg !3248
  store i64 %v, i64* %v.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %v.addr, metadata !3249, metadata !DIExpression()), !dbg !3250
  call void @llvm.dbg.declare(metadata i64* %un, metadata !3251, metadata !DIExpression()), !dbg !3252
  call void @llvm.dbg.declare(metadata i64* %us, metadata !3253, metadata !DIExpression()), !dbg !3254
  call void @llvm.dbg.declare(metadata i64** %tp, metadata !3255, metadata !DIExpression()), !dbg !3256
  call void @llvm.dbg.declare(metadata i64* %cy, metadata !3257, metadata !DIExpression()), !dbg !3258
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3259
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !3260
  %1 = load i32, i32* %_mp_size, align 4, !dbg !3260
  %conv = sext i32 %1 to i64, !dbg !3259
  store i64 %conv, i64* %us, align 8, !dbg !3261
  %2 = load i64, i64* %us, align 8, !dbg !3262
  %cmp = icmp eq i64 %2, 0, !dbg !3264
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3265

lor.lhs.false:                                    ; preds = %entry
  %3 = load i64, i64* %v.addr, align 8, !dbg !3266
  %cmp2 = icmp eq i64 %3, 0, !dbg !3267
  br i1 %cmp2, label %if.then, label %if.end, !dbg !3268

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3269
  %_mp_size4 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !3271
  store i32 0, i32* %_mp_size4, align 4, !dbg !3272
  br label %return, !dbg !3273

if.end:                                           ; preds = %lor.lhs.false
  %5 = load i64, i64* %us, align 8, !dbg !3274
  %cmp5 = icmp sge i64 %5, 0, !dbg !3274
  br i1 %cmp5, label %cond.true, label %cond.false, !dbg !3274

cond.true:                                        ; preds = %if.end
  %6 = load i64, i64* %us, align 8, !dbg !3274
  br label %cond.end, !dbg !3274

cond.false:                                       ; preds = %if.end
  %7 = load i64, i64* %us, align 8, !dbg !3274
  %sub = sub nsw i64 0, %7, !dbg !3274
  br label %cond.end, !dbg !3274

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %6, %cond.true ], [ %sub, %cond.false ], !dbg !3274
  store i64 %cond, i64* %un, align 8, !dbg !3275
  %8 = load i64, i64* %un, align 8, !dbg !3276
  %add = add nsw i64 %8, 1, !dbg !3276
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3276
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %9, i32 0, i32 0, !dbg !3276
  %10 = load i32, i32* %_mp_alloc, align 8, !dbg !3276
  %conv7 = sext i32 %10 to i64, !dbg !3276
  %cmp8 = icmp sgt i64 %add, %conv7, !dbg !3276
  br i1 %cmp8, label %cond.true10, label %cond.false12, !dbg !3276

cond.true10:                                      ; preds = %cond.end
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3276
  %12 = load i64, i64* %un, align 8, !dbg !3276
  %add11 = add nsw i64 %12, 1, !dbg !3276
  %call = call i8* @mpz_realloc(%struct.__mpz_struct* %11, i64 %add11), !dbg !3276
  br label %cond.end13, !dbg !3276

cond.false12:                                     ; preds = %cond.end
  %13 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3276
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %13, i32 0, i32 2, !dbg !3276
  %14 = load i64*, i64** %_mp_d, align 8, !dbg !3276
  %15 = bitcast i64* %14 to i8*, !dbg !3276
  br label %cond.end13, !dbg !3276

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi i8* [ %call, %cond.true10 ], [ %15, %cond.false12 ], !dbg !3276
  %16 = bitcast i8* %cond14 to i64*, !dbg !3276
  store i64* %16, i64** %tp, align 8, !dbg !3277
  %17 = load i64*, i64** %tp, align 8, !dbg !3278
  %18 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3279
  %_mp_d15 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %18, i32 0, i32 2, !dbg !3280
  %19 = load i64*, i64** %_mp_d15, align 8, !dbg !3280
  %20 = load i64, i64* %un, align 8, !dbg !3281
  %21 = load i64, i64* %v.addr, align 8, !dbg !3282
  %call16 = call i64 @mpn_mul_1(i64* %17, i64* %19, i64 %20, i64 %21), !dbg !3283
  store i64 %call16, i64* %cy, align 8, !dbg !3284
  %22 = load i64, i64* %cy, align 8, !dbg !3285
  %23 = load i64*, i64** %tp, align 8, !dbg !3286
  %24 = load i64, i64* %un, align 8, !dbg !3287
  %arrayidx = getelementptr inbounds i64, i64* %23, i64 %24, !dbg !3286
  store i64 %22, i64* %arrayidx, align 8, !dbg !3288
  %25 = load i64, i64* %cy, align 8, !dbg !3289
  %cmp17 = icmp ugt i64 %25, 0, !dbg !3290
  %conv18 = zext i1 %cmp17 to i32, !dbg !3290
  %conv19 = sext i32 %conv18 to i64, !dbg !3291
  %26 = load i64, i64* %un, align 8, !dbg !3292
  %add20 = add nsw i64 %26, %conv19, !dbg !3292
  store i64 %add20, i64* %un, align 8, !dbg !3292
  %27 = load i64, i64* %us, align 8, !dbg !3293
  %cmp21 = icmp slt i64 %27, 0, !dbg !3294
  br i1 %cmp21, label %cond.true23, label %cond.false25, !dbg !3295

cond.true23:                                      ; preds = %cond.end13
  %28 = load i64, i64* %un, align 8, !dbg !3296
  %sub24 = sub nsw i64 0, %28, !dbg !3297
  br label %cond.end26, !dbg !3295

cond.false25:                                     ; preds = %cond.end13
  %29 = load i64, i64* %un, align 8, !dbg !3298
  br label %cond.end26, !dbg !3295

cond.end26:                                       ; preds = %cond.false25, %cond.true23
  %cond27 = phi i64 [ %sub24, %cond.true23 ], [ %29, %cond.false25 ], !dbg !3295
  %conv28 = trunc i64 %cond27 to i32, !dbg !3295
  %30 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3299
  %_mp_size29 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %30, i32 0, i32 1, !dbg !3300
  store i32 %conv28, i32* %_mp_size29, align 4, !dbg !3301
  br label %return, !dbg !3302

return:                                           ; preds = %cond.end26, %if.then
  ret void, !dbg !3302
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_mul(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, %struct.__mpz_struct* %v) #0 !dbg !3303 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca %struct.__mpz_struct*, align 8
  %sign = alloca i32, align 4
  %un = alloca i64, align 8
  %vn = alloca i64, align 8
  %rn = alloca i64, align 8
  %t = alloca [1 x %struct.__mpz_struct], align 16
  %tp = alloca i64*, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3304, metadata !DIExpression()), !dbg !3305
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !3306, metadata !DIExpression()), !dbg !3307
  store %struct.__mpz_struct* %v, %struct.__mpz_struct** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %v.addr, metadata !3308, metadata !DIExpression()), !dbg !3309
  call void @llvm.dbg.declare(metadata i32* %sign, metadata !3310, metadata !DIExpression()), !dbg !3311
  call void @llvm.dbg.declare(metadata i64* %un, metadata !3312, metadata !DIExpression()), !dbg !3313
  call void @llvm.dbg.declare(metadata i64* %vn, metadata !3314, metadata !DIExpression()), !dbg !3315
  call void @llvm.dbg.declare(metadata i64* %rn, metadata !3316, metadata !DIExpression()), !dbg !3317
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %t, metadata !3318, metadata !DIExpression()), !dbg !3323
  call void @llvm.dbg.declare(metadata i64** %tp, metadata !3324, metadata !DIExpression()), !dbg !3325
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3326
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !3327
  %1 = load i32, i32* %_mp_size, align 4, !dbg !3327
  %conv = sext i32 %1 to i64, !dbg !3326
  store i64 %conv, i64* %un, align 8, !dbg !3328
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !3329
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !3330
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !3330
  %conv2 = sext i32 %3 to i64, !dbg !3329
  store i64 %conv2, i64* %vn, align 8, !dbg !3331
  %4 = load i64, i64* %un, align 8, !dbg !3332
  %cmp = icmp eq i64 %4, 0, !dbg !3334
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3335

lor.lhs.false:                                    ; preds = %entry
  %5 = load i64, i64* %vn, align 8, !dbg !3336
  %cmp4 = icmp eq i64 %5, 0, !dbg !3337
  br i1 %cmp4, label %if.then, label %if.end, !dbg !3338

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3339
  %_mp_size6 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 1, !dbg !3341
  store i32 0, i32* %_mp_size6, align 4, !dbg !3342
  br label %return, !dbg !3343

if.end:                                           ; preds = %lor.lhs.false
  %7 = load i64, i64* %un, align 8, !dbg !3344
  %8 = load i64, i64* %vn, align 8, !dbg !3345
  %xor = xor i64 %7, %8, !dbg !3346
  %cmp7 = icmp slt i64 %xor, 0, !dbg !3347
  %conv8 = zext i1 %cmp7 to i32, !dbg !3347
  store i32 %conv8, i32* %sign, align 4, !dbg !3348
  %9 = load i64, i64* %un, align 8, !dbg !3349
  %cmp9 = icmp sge i64 %9, 0, !dbg !3349
  br i1 %cmp9, label %cond.true, label %cond.false, !dbg !3349

cond.true:                                        ; preds = %if.end
  %10 = load i64, i64* %un, align 8, !dbg !3349
  br label %cond.end, !dbg !3349

cond.false:                                       ; preds = %if.end
  %11 = load i64, i64* %un, align 8, !dbg !3349
  %sub = sub nsw i64 0, %11, !dbg !3349
  br label %cond.end, !dbg !3349

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %10, %cond.true ], [ %sub, %cond.false ], !dbg !3349
  store i64 %cond, i64* %un, align 8, !dbg !3350
  %12 = load i64, i64* %vn, align 8, !dbg !3351
  %cmp11 = icmp sge i64 %12, 0, !dbg !3351
  br i1 %cmp11, label %cond.true13, label %cond.false14, !dbg !3351

cond.true13:                                      ; preds = %cond.end
  %13 = load i64, i64* %vn, align 8, !dbg !3351
  br label %cond.end16, !dbg !3351

cond.false14:                                     ; preds = %cond.end
  %14 = load i64, i64* %vn, align 8, !dbg !3351
  %sub15 = sub nsw i64 0, %14, !dbg !3351
  br label %cond.end16, !dbg !3351

cond.end16:                                       ; preds = %cond.false14, %cond.true13
  %cond17 = phi i64 [ %13, %cond.true13 ], [ %sub15, %cond.false14 ], !dbg !3351
  store i64 %cond17, i64* %vn, align 8, !dbg !3352
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3353
  %15 = load i64, i64* %un, align 8, !dbg !3354
  %16 = load i64, i64* %vn, align 8, !dbg !3355
  %add = add nsw i64 %15, %16, !dbg !3356
  %mul = mul i64 %add, 64, !dbg !3357
  call void @mpz_init2(%struct.__mpz_struct* %arraydecay, i64 %mul), !dbg !3358
  %arraydecay18 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3359
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay18, i32 0, i32 2, !dbg !3359
  %17 = load i64*, i64** %_mp_d, align 8, !dbg !3359
  store i64* %17, i64** %tp, align 8, !dbg !3360
  %18 = load i64, i64* %un, align 8, !dbg !3361
  %19 = load i64, i64* %vn, align 8, !dbg !3363
  %cmp19 = icmp sge i64 %18, %19, !dbg !3364
  br i1 %cmp19, label %if.then21, label %if.else, !dbg !3365

if.then21:                                        ; preds = %cond.end16
  %20 = load i64*, i64** %tp, align 8, !dbg !3366
  %21 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3367
  %_mp_d22 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %21, i32 0, i32 2, !dbg !3368
  %22 = load i64*, i64** %_mp_d22, align 8, !dbg !3368
  %23 = load i64, i64* %un, align 8, !dbg !3369
  %24 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !3370
  %_mp_d23 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %24, i32 0, i32 2, !dbg !3371
  %25 = load i64*, i64** %_mp_d23, align 8, !dbg !3371
  %26 = load i64, i64* %vn, align 8, !dbg !3372
  %call = call i64 @mpn_mul(i64* %20, i64* %22, i64 %23, i64* %25, i64 %26), !dbg !3373
  br label %if.end27, !dbg !3373

if.else:                                          ; preds = %cond.end16
  %27 = load i64*, i64** %tp, align 8, !dbg !3374
  %28 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !3375
  %_mp_d24 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %28, i32 0, i32 2, !dbg !3376
  %29 = load i64*, i64** %_mp_d24, align 8, !dbg !3376
  %30 = load i64, i64* %vn, align 8, !dbg !3377
  %31 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3378
  %_mp_d25 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %31, i32 0, i32 2, !dbg !3379
  %32 = load i64*, i64** %_mp_d25, align 8, !dbg !3379
  %33 = load i64, i64* %un, align 8, !dbg !3380
  %call26 = call i64 @mpn_mul(i64* %27, i64* %29, i64 %30, i64* %32, i64 %33), !dbg !3381
  br label %if.end27

if.end27:                                         ; preds = %if.else, %if.then21
  %34 = load i64, i64* %un, align 8, !dbg !3382
  %35 = load i64, i64* %vn, align 8, !dbg !3383
  %add28 = add nsw i64 %34, %35, !dbg !3384
  store i64 %add28, i64* %rn, align 8, !dbg !3385
  %36 = load i64*, i64** %tp, align 8, !dbg !3386
  %37 = load i64, i64* %rn, align 8, !dbg !3387
  %sub29 = sub nsw i64 %37, 1, !dbg !3388
  %arrayidx = getelementptr inbounds i64, i64* %36, i64 %sub29, !dbg !3386
  %38 = load i64, i64* %arrayidx, align 8, !dbg !3386
  %cmp30 = icmp eq i64 %38, 0, !dbg !3389
  %conv31 = zext i1 %cmp30 to i32, !dbg !3389
  %conv32 = sext i32 %conv31 to i64, !dbg !3386
  %39 = load i64, i64* %rn, align 8, !dbg !3390
  %sub33 = sub nsw i64 %39, %conv32, !dbg !3390
  store i64 %sub33, i64* %rn, align 8, !dbg !3390
  %40 = load i32, i32* %sign, align 4, !dbg !3391
  %tobool = icmp ne i32 %40, 0, !dbg !3391
  br i1 %tobool, label %cond.true34, label %cond.false36, !dbg !3391

cond.true34:                                      ; preds = %if.end27
  %41 = load i64, i64* %rn, align 8, !dbg !3392
  %sub35 = sub nsw i64 0, %41, !dbg !3393
  br label %cond.end37, !dbg !3391

cond.false36:                                     ; preds = %if.end27
  %42 = load i64, i64* %rn, align 8, !dbg !3394
  br label %cond.end37, !dbg !3391

cond.end37:                                       ; preds = %cond.false36, %cond.true34
  %cond38 = phi i64 [ %sub35, %cond.true34 ], [ %42, %cond.false36 ], !dbg !3391
  %conv39 = trunc i64 %cond38 to i32, !dbg !3391
  %arraydecay40 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3395
  %_mp_size41 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay40, i32 0, i32 1, !dbg !3395
  store i32 %conv39, i32* %_mp_size41, align 4, !dbg !3396
  %43 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3397
  %arraydecay42 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3398
  call void @mpz_swap(%struct.__mpz_struct* %43, %struct.__mpz_struct* %arraydecay42), !dbg !3399
  %arraydecay43 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3400
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay43), !dbg !3401
  br label %return, !dbg !3402

return:                                           ; preds = %cond.end37, %if.then
  ret void, !dbg !3402
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_mul_2exp(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, i64 %bits) #0 !dbg !3403 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %bits.addr = alloca i64, align 8
  %un = alloca i64, align 8
  %rn = alloca i64, align 8
  %limbs = alloca i64, align 8
  %shift = alloca i32, align 4
  %rp = alloca i64*, align 8
  %cy = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3406, metadata !DIExpression()), !dbg !3407
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !3408, metadata !DIExpression()), !dbg !3409
  store i64 %bits, i64* %bits.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bits.addr, metadata !3410, metadata !DIExpression()), !dbg !3411
  call void @llvm.dbg.declare(metadata i64* %un, metadata !3412, metadata !DIExpression()), !dbg !3413
  call void @llvm.dbg.declare(metadata i64* %rn, metadata !3414, metadata !DIExpression()), !dbg !3415
  call void @llvm.dbg.declare(metadata i64* %limbs, metadata !3416, metadata !DIExpression()), !dbg !3417
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !3418, metadata !DIExpression()), !dbg !3419
  call void @llvm.dbg.declare(metadata i64** %rp, metadata !3420, metadata !DIExpression()), !dbg !3421
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3422
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !3422
  %1 = load i32, i32* %_mp_size, align 4, !dbg !3422
  %cmp = icmp sge i32 %1, 0, !dbg !3422
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3422

cond.true:                                        ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3422
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !3422
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !3422
  br label %cond.end, !dbg !3422

cond.false:                                       ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3422
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !3422
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !3422
  %sub = sub nsw i32 0, %5, !dbg !3422
  br label %cond.end, !dbg !3422

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !3422
  %conv = sext i32 %cond to i64, !dbg !3422
  store i64 %conv, i64* %un, align 8, !dbg !3423
  %6 = load i64, i64* %un, align 8, !dbg !3424
  %cmp3 = icmp eq i64 %6, 0, !dbg !3426
  br i1 %cmp3, label %if.then, label %if.end, !dbg !3427

if.then:                                          ; preds = %cond.end
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3428
  %_mp_size5 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %7, i32 0, i32 1, !dbg !3430
  store i32 0, i32* %_mp_size5, align 4, !dbg !3431
  br label %return, !dbg !3432

if.end:                                           ; preds = %cond.end
  %8 = load i64, i64* %bits.addr, align 8, !dbg !3433
  %div = udiv i64 %8, 64, !dbg !3434
  store i64 %div, i64* %limbs, align 8, !dbg !3435
  %9 = load i64, i64* %bits.addr, align 8, !dbg !3436
  %rem = urem i64 %9, 64, !dbg !3437
  %conv6 = trunc i64 %rem to i32, !dbg !3436
  store i32 %conv6, i32* %shift, align 4, !dbg !3438
  %10 = load i64, i64* %un, align 8, !dbg !3439
  %11 = load i64, i64* %limbs, align 8, !dbg !3440
  %add = add nsw i64 %10, %11, !dbg !3441
  %12 = load i32, i32* %shift, align 4, !dbg !3442
  %cmp7 = icmp ugt i32 %12, 0, !dbg !3443
  %conv8 = zext i1 %cmp7 to i32, !dbg !3443
  %conv9 = sext i32 %conv8 to i64, !dbg !3444
  %add10 = add nsw i64 %add, %conv9, !dbg !3445
  store i64 %add10, i64* %rn, align 8, !dbg !3446
  %13 = load i64, i64* %rn, align 8, !dbg !3447
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3447
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %14, i32 0, i32 0, !dbg !3447
  %15 = load i32, i32* %_mp_alloc, align 8, !dbg !3447
  %conv11 = sext i32 %15 to i64, !dbg !3447
  %cmp12 = icmp sgt i64 %13, %conv11, !dbg !3447
  br i1 %cmp12, label %cond.true14, label %cond.false15, !dbg !3447

cond.true14:                                      ; preds = %if.end
  %16 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3447
  %17 = load i64, i64* %rn, align 8, !dbg !3447
  %call = call i8* @mpz_realloc(%struct.__mpz_struct* %16, i64 %17), !dbg !3447
  br label %cond.end16, !dbg !3447

cond.false15:                                     ; preds = %if.end
  %18 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3447
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %18, i32 0, i32 2, !dbg !3447
  %19 = load i64*, i64** %_mp_d, align 8, !dbg !3447
  %20 = bitcast i64* %19 to i8*, !dbg !3447
  br label %cond.end16, !dbg !3447

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi i8* [ %call, %cond.true14 ], [ %20, %cond.false15 ], !dbg !3447
  %21 = bitcast i8* %cond17 to i64*, !dbg !3447
  store i64* %21, i64** %rp, align 8, !dbg !3448
  %22 = load i32, i32* %shift, align 4, !dbg !3449
  %cmp18 = icmp ugt i32 %22, 0, !dbg !3451
  br i1 %cmp18, label %if.then20, label %if.else, !dbg !3452

if.then20:                                        ; preds = %cond.end16
  call void @llvm.dbg.declare(metadata i64* %cy, metadata !3453, metadata !DIExpression()), !dbg !3455
  %23 = load i64*, i64** %rp, align 8, !dbg !3456
  %24 = load i64, i64* %limbs, align 8, !dbg !3457
  %add.ptr = getelementptr inbounds i64, i64* %23, i64 %24, !dbg !3458
  %25 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3459
  %_mp_d21 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %25, i32 0, i32 2, !dbg !3460
  %26 = load i64*, i64** %_mp_d21, align 8, !dbg !3460
  %27 = load i64, i64* %un, align 8, !dbg !3461
  %28 = load i32, i32* %shift, align 4, !dbg !3462
  %call22 = call i64 @mpn_lshift(i64* %add.ptr, i64* %26, i64 %27, i32 %28), !dbg !3463
  store i64 %call22, i64* %cy, align 8, !dbg !3455
  %29 = load i64, i64* %cy, align 8, !dbg !3464
  %30 = load i64*, i64** %rp, align 8, !dbg !3465
  %31 = load i64, i64* %rn, align 8, !dbg !3466
  %sub23 = sub nsw i64 %31, 1, !dbg !3467
  %arrayidx = getelementptr inbounds i64, i64* %30, i64 %sub23, !dbg !3465
  store i64 %29, i64* %arrayidx, align 8, !dbg !3468
  %32 = load i64, i64* %cy, align 8, !dbg !3469
  %cmp24 = icmp eq i64 %32, 0, !dbg !3470
  %conv25 = zext i1 %cmp24 to i32, !dbg !3470
  %conv26 = sext i32 %conv25 to i64, !dbg !3471
  %33 = load i64, i64* %rn, align 8, !dbg !3472
  %sub27 = sub nsw i64 %33, %conv26, !dbg !3472
  store i64 %sub27, i64* %rn, align 8, !dbg !3472
  br label %if.end30, !dbg !3473

if.else:                                          ; preds = %cond.end16
  %34 = load i64*, i64** %rp, align 8, !dbg !3474
  %35 = load i64, i64* %limbs, align 8, !dbg !3475
  %add.ptr28 = getelementptr inbounds i64, i64* %34, i64 %35, !dbg !3476
  %36 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3477
  %_mp_d29 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %36, i32 0, i32 2, !dbg !3478
  %37 = load i64*, i64** %_mp_d29, align 8, !dbg !3478
  %38 = load i64, i64* %un, align 8, !dbg !3479
  call void @mpn_copyd(i64* %add.ptr28, i64* %37, i64 %38), !dbg !3480
  br label %if.end30

if.end30:                                         ; preds = %if.else, %if.then20
  br label %while.cond, !dbg !3481

while.cond:                                       ; preds = %while.body, %if.end30
  %39 = load i64, i64* %limbs, align 8, !dbg !3482
  %cmp31 = icmp sgt i64 %39, 0, !dbg !3483
  br i1 %cmp31, label %while.body, label %while.end, !dbg !3481

while.body:                                       ; preds = %while.cond
  %40 = load i64*, i64** %rp, align 8, !dbg !3484
  %41 = load i64, i64* %limbs, align 8, !dbg !3485
  %dec = add nsw i64 %41, -1, !dbg !3485
  store i64 %dec, i64* %limbs, align 8, !dbg !3485
  %arrayidx33 = getelementptr inbounds i64, i64* %40, i64 %dec, !dbg !3484
  store i64 0, i64* %arrayidx33, align 8, !dbg !3486
  br label %while.cond, !dbg !3481, !llvm.loop !3487

while.end:                                        ; preds = %while.cond
  %42 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3489
  %_mp_size34 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %42, i32 0, i32 1, !dbg !3490
  %43 = load i32, i32* %_mp_size34, align 4, !dbg !3490
  %cmp35 = icmp slt i32 %43, 0, !dbg !3491
  br i1 %cmp35, label %cond.true37, label %cond.false39, !dbg !3492

cond.true37:                                      ; preds = %while.end
  %44 = load i64, i64* %rn, align 8, !dbg !3493
  %sub38 = sub nsw i64 0, %44, !dbg !3494
  br label %cond.end40, !dbg !3492

cond.false39:                                     ; preds = %while.end
  %45 = load i64, i64* %rn, align 8, !dbg !3495
  br label %cond.end40, !dbg !3492

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi i64 [ %sub38, %cond.true37 ], [ %45, %cond.false39 ], !dbg !3492
  %conv42 = trunc i64 %cond41 to i32, !dbg !3492
  %46 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3496
  %_mp_size43 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %46, i32 0, i32 1, !dbg !3497
  store i32 %conv42, i32* %_mp_size43, align 4, !dbg !3498
  br label %return, !dbg !3499

return:                                           ; preds = %cond.end40, %if.then
  ret void, !dbg !3499
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_addmul_ui(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, i64 %v) #0 !dbg !3500 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca i64, align 8
  %t = alloca [1 x %struct.__mpz_struct], align 16
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3501, metadata !DIExpression()), !dbg !3502
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !3503, metadata !DIExpression()), !dbg !3504
  store i64 %v, i64* %v.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %v.addr, metadata !3505, metadata !DIExpression()), !dbg !3506
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %t, metadata !3507, metadata !DIExpression()), !dbg !3508
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3509
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !3510
  %arraydecay1 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3511
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3512
  %1 = load i64, i64* %v.addr, align 8, !dbg !3513
  call void @mpz_mul_ui(%struct.__mpz_struct* %arraydecay1, %struct.__mpz_struct* %0, i64 %1), !dbg !3514
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3515
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3516
  %arraydecay2 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3517
  call void @mpz_add(%struct.__mpz_struct* %2, %struct.__mpz_struct* %3, %struct.__mpz_struct* %arraydecay2), !dbg !3518
  %arraydecay3 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3519
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay3), !dbg !3520
  ret void, !dbg !3521
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_submul_ui(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, i64 %v) #0 !dbg !3522 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca i64, align 8
  %t = alloca [1 x %struct.__mpz_struct], align 16
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3523, metadata !DIExpression()), !dbg !3524
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !3525, metadata !DIExpression()), !dbg !3526
  store i64 %v, i64* %v.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %v.addr, metadata !3527, metadata !DIExpression()), !dbg !3528
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %t, metadata !3529, metadata !DIExpression()), !dbg !3530
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3531
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !3532
  %arraydecay1 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3533
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3534
  %1 = load i64, i64* %v.addr, align 8, !dbg !3535
  call void @mpz_mul_ui(%struct.__mpz_struct* %arraydecay1, %struct.__mpz_struct* %0, i64 %1), !dbg !3536
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3537
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3538
  %arraydecay2 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3539
  call void @mpz_sub(%struct.__mpz_struct* %2, %struct.__mpz_struct* %3, %struct.__mpz_struct* %arraydecay2), !dbg !3540
  %arraydecay3 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3541
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay3), !dbg !3542
  ret void, !dbg !3543
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_addmul(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, %struct.__mpz_struct* %v) #0 !dbg !3544 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca %struct.__mpz_struct*, align 8
  %t = alloca [1 x %struct.__mpz_struct], align 16
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3545, metadata !DIExpression()), !dbg !3546
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !3547, metadata !DIExpression()), !dbg !3548
  store %struct.__mpz_struct* %v, %struct.__mpz_struct** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %v.addr, metadata !3549, metadata !DIExpression()), !dbg !3550
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %t, metadata !3551, metadata !DIExpression()), !dbg !3552
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3553
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !3554
  %arraydecay1 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3555
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3556
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !3557
  call void @mpz_mul(%struct.__mpz_struct* %arraydecay1, %struct.__mpz_struct* %0, %struct.__mpz_struct* %1), !dbg !3558
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3559
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3560
  %arraydecay2 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3561
  call void @mpz_add(%struct.__mpz_struct* %2, %struct.__mpz_struct* %3, %struct.__mpz_struct* %arraydecay2), !dbg !3562
  %arraydecay3 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3563
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay3), !dbg !3564
  ret void, !dbg !3565
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_submul(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, %struct.__mpz_struct* %v) #0 !dbg !3566 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca %struct.__mpz_struct*, align 8
  %t = alloca [1 x %struct.__mpz_struct], align 16
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3567, metadata !DIExpression()), !dbg !3568
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !3569, metadata !DIExpression()), !dbg !3570
  store %struct.__mpz_struct* %v, %struct.__mpz_struct** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %v.addr, metadata !3571, metadata !DIExpression()), !dbg !3572
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %t, metadata !3573, metadata !DIExpression()), !dbg !3574
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3575
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !3576
  %arraydecay1 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3577
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3578
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !3579
  call void @mpz_mul(%struct.__mpz_struct* %arraydecay1, %struct.__mpz_struct* %0, %struct.__mpz_struct* %1), !dbg !3580
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3581
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3582
  %arraydecay2 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3583
  call void @mpz_sub(%struct.__mpz_struct* %2, %struct.__mpz_struct* %3, %struct.__mpz_struct* %arraydecay2), !dbg !3584
  %arraydecay3 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !3585
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay3), !dbg !3586
  ret void, !dbg !3587
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_cdiv_qr(%struct.__mpz_struct* %q, %struct.__mpz_struct* %r, %struct.__mpz_struct* %n, %struct.__mpz_struct* %d) #0 !dbg !3588 {
entry:
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !3591, metadata !DIExpression()), !dbg !3592
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3593, metadata !DIExpression()), !dbg !3594
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !3595, metadata !DIExpression()), !dbg !3596
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !3597, metadata !DIExpression()), !dbg !3598
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3599
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3600
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !3601
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3602
  %call = call i32 @mpz_div_qr(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, %struct.__mpz_struct* %3, i32 1), !dbg !3603
  ret void, !dbg !3604
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mpz_div_qr(%struct.__mpz_struct* %q, %struct.__mpz_struct* %r, %struct.__mpz_struct* %n, %struct.__mpz_struct* %d, i32 %mode) #0 !dbg !3605 {
entry:
  %retval = alloca i32, align 4
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca %struct.__mpz_struct*, align 8
  %mode.addr = alloca i32, align 4
  %ns = alloca i64, align 8
  %ds = alloca i64, align 8
  %nn = alloca i64, align 8
  %dn = alloca i64, align 8
  %qs = alloca i64, align 8
  %np = alloca i64*, align 8
  %qp = alloca i64*, align 8
  %qn = alloca i64, align 8
  %rn = alloca i64, align 8
  %tq = alloca [1 x %struct.__mpz_struct], align 16
  %tr = alloca [1 x %struct.__mpz_struct], align 16
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !3608, metadata !DIExpression()), !dbg !3609
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3610, metadata !DIExpression()), !dbg !3611
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !3612, metadata !DIExpression()), !dbg !3613
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !3614, metadata !DIExpression()), !dbg !3615
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3616, metadata !DIExpression()), !dbg !3617
  call void @llvm.dbg.declare(metadata i64* %ns, metadata !3618, metadata !DIExpression()), !dbg !3619
  call void @llvm.dbg.declare(metadata i64* %ds, metadata !3620, metadata !DIExpression()), !dbg !3621
  call void @llvm.dbg.declare(metadata i64* %nn, metadata !3622, metadata !DIExpression()), !dbg !3623
  call void @llvm.dbg.declare(metadata i64* %dn, metadata !3624, metadata !DIExpression()), !dbg !3625
  call void @llvm.dbg.declare(metadata i64* %qs, metadata !3626, metadata !DIExpression()), !dbg !3627
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !3628
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !3629
  %1 = load i32, i32* %_mp_size, align 4, !dbg !3629
  %conv = sext i32 %1 to i64, !dbg !3628
  store i64 %conv, i64* %ns, align 8, !dbg !3630
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3631
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !3632
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !3632
  %conv2 = sext i32 %3 to i64, !dbg !3631
  store i64 %conv2, i64* %ds, align 8, !dbg !3633
  %4 = load i64, i64* %ds, align 8, !dbg !3634
  %cmp = icmp eq i64 %4, 0, !dbg !3636
  br i1 %cmp, label %if.then, label %if.end, !dbg !3637

if.then:                                          ; preds = %entry
  call void @gmp_die(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0)), !dbg !3638
  br label %if.end, !dbg !3638

if.end:                                           ; preds = %if.then, %entry
  %5 = load i64, i64* %ns, align 8, !dbg !3639
  %cmp4 = icmp eq i64 %5, 0, !dbg !3641
  br i1 %cmp4, label %if.then6, label %if.end14, !dbg !3642

if.then6:                                         ; preds = %if.end
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3643
  %tobool = icmp ne %struct.__mpz_struct* %6, null, !dbg !3643
  br i1 %tobool, label %if.then7, label %if.end9, !dbg !3646

if.then7:                                         ; preds = %if.then6
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3647
  %_mp_size8 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %7, i32 0, i32 1, !dbg !3648
  store i32 0, i32* %_mp_size8, align 4, !dbg !3649
  br label %if.end9, !dbg !3647

if.end9:                                          ; preds = %if.then7, %if.then6
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3650
  %tobool10 = icmp ne %struct.__mpz_struct* %8, null, !dbg !3650
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !3652

if.then11:                                        ; preds = %if.end9
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3653
  %_mp_size12 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %9, i32 0, i32 1, !dbg !3654
  store i32 0, i32* %_mp_size12, align 4, !dbg !3655
  br label %if.end13, !dbg !3653

if.end13:                                         ; preds = %if.then11, %if.end9
  store i32 0, i32* %retval, align 4, !dbg !3656
  br label %return, !dbg !3656

if.end14:                                         ; preds = %if.end
  %10 = load i64, i64* %ns, align 8, !dbg !3657
  %cmp15 = icmp sge i64 %10, 0, !dbg !3657
  br i1 %cmp15, label %cond.true, label %cond.false, !dbg !3657

cond.true:                                        ; preds = %if.end14
  %11 = load i64, i64* %ns, align 8, !dbg !3657
  br label %cond.end, !dbg !3657

cond.false:                                       ; preds = %if.end14
  %12 = load i64, i64* %ns, align 8, !dbg !3657
  %sub = sub nsw i64 0, %12, !dbg !3657
  br label %cond.end, !dbg !3657

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %11, %cond.true ], [ %sub, %cond.false ], !dbg !3657
  store i64 %cond, i64* %nn, align 8, !dbg !3658
  %13 = load i64, i64* %ds, align 8, !dbg !3659
  %cmp17 = icmp sge i64 %13, 0, !dbg !3659
  br i1 %cmp17, label %cond.true19, label %cond.false20, !dbg !3659

cond.true19:                                      ; preds = %cond.end
  %14 = load i64, i64* %ds, align 8, !dbg !3659
  br label %cond.end22, !dbg !3659

cond.false20:                                     ; preds = %cond.end
  %15 = load i64, i64* %ds, align 8, !dbg !3659
  %sub21 = sub nsw i64 0, %15, !dbg !3659
  br label %cond.end22, !dbg !3659

cond.end22:                                       ; preds = %cond.false20, %cond.true19
  %cond23 = phi i64 [ %14, %cond.true19 ], [ %sub21, %cond.false20 ], !dbg !3659
  store i64 %cond23, i64* %dn, align 8, !dbg !3660
  %16 = load i64, i64* %ds, align 8, !dbg !3661
  %17 = load i64, i64* %ns, align 8, !dbg !3662
  %xor = xor i64 %16, %17, !dbg !3663
  store i64 %xor, i64* %qs, align 8, !dbg !3664
  %18 = load i64, i64* %nn, align 8, !dbg !3665
  %19 = load i64, i64* %dn, align 8, !dbg !3667
  %cmp24 = icmp slt i64 %18, %19, !dbg !3668
  br i1 %cmp24, label %if.then26, label %if.else60, !dbg !3669

if.then26:                                        ; preds = %cond.end22
  %20 = load i32, i32* %mode.addr, align 4, !dbg !3670
  %cmp27 = icmp eq i32 %20, 1, !dbg !3673
  br i1 %cmp27, label %land.lhs.true, label %if.else, !dbg !3674

land.lhs.true:                                    ; preds = %if.then26
  %21 = load i64, i64* %qs, align 8, !dbg !3675
  %cmp29 = icmp sge i64 %21, 0, !dbg !3676
  br i1 %cmp29, label %if.then31, label %if.else, !dbg !3677

if.then31:                                        ; preds = %land.lhs.true
  %22 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3678
  %tobool32 = icmp ne %struct.__mpz_struct* %22, null, !dbg !3678
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !3681

if.then33:                                        ; preds = %if.then31
  %23 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3682
  %24 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !3683
  %25 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3684
  call void @mpz_sub(%struct.__mpz_struct* %23, %struct.__mpz_struct* %24, %struct.__mpz_struct* %25), !dbg !3685
  br label %if.end34, !dbg !3685

if.end34:                                         ; preds = %if.then33, %if.then31
  %26 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3686
  %tobool35 = icmp ne %struct.__mpz_struct* %26, null, !dbg !3686
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !3688

if.then36:                                        ; preds = %if.end34
  %27 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3689
  call void @mpz_set_ui(%struct.__mpz_struct* %27, i64 1), !dbg !3690
  br label %if.end37, !dbg !3690

if.end37:                                         ; preds = %if.then36, %if.end34
  br label %if.end59, !dbg !3691

if.else:                                          ; preds = %land.lhs.true, %if.then26
  %28 = load i32, i32* %mode.addr, align 4, !dbg !3692
  %cmp38 = icmp eq i32 %28, 0, !dbg !3694
  br i1 %cmp38, label %land.lhs.true40, label %if.else50, !dbg !3695

land.lhs.true40:                                  ; preds = %if.else
  %29 = load i64, i64* %qs, align 8, !dbg !3696
  %cmp41 = icmp slt i64 %29, 0, !dbg !3697
  br i1 %cmp41, label %if.then43, label %if.else50, !dbg !3698

if.then43:                                        ; preds = %land.lhs.true40
  %30 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3699
  %tobool44 = icmp ne %struct.__mpz_struct* %30, null, !dbg !3699
  br i1 %tobool44, label %if.then45, label %if.end46, !dbg !3702

if.then45:                                        ; preds = %if.then43
  %31 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3703
  %32 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !3704
  %33 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3705
  call void @mpz_add(%struct.__mpz_struct* %31, %struct.__mpz_struct* %32, %struct.__mpz_struct* %33), !dbg !3706
  br label %if.end46, !dbg !3706

if.end46:                                         ; preds = %if.then45, %if.then43
  %34 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3707
  %tobool47 = icmp ne %struct.__mpz_struct* %34, null, !dbg !3707
  br i1 %tobool47, label %if.then48, label %if.end49, !dbg !3709

if.then48:                                        ; preds = %if.end46
  %35 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3710
  call void @mpz_set_si(%struct.__mpz_struct* %35, i64 -1), !dbg !3711
  br label %if.end49, !dbg !3711

if.end49:                                         ; preds = %if.then48, %if.end46
  br label %if.end58, !dbg !3712

if.else50:                                        ; preds = %land.lhs.true40, %if.else
  %36 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3713
  %tobool51 = icmp ne %struct.__mpz_struct* %36, null, !dbg !3713
  br i1 %tobool51, label %if.then52, label %if.end53, !dbg !3716

if.then52:                                        ; preds = %if.else50
  %37 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3717
  %38 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !3718
  call void @mpz_set(%struct.__mpz_struct* %37, %struct.__mpz_struct* %38), !dbg !3719
  br label %if.end53, !dbg !3719

if.end53:                                         ; preds = %if.then52, %if.else50
  %39 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3720
  %tobool54 = icmp ne %struct.__mpz_struct* %39, null, !dbg !3720
  br i1 %tobool54, label %if.then55, label %if.end57, !dbg !3722

if.then55:                                        ; preds = %if.end53
  %40 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3723
  %_mp_size56 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %40, i32 0, i32 1, !dbg !3724
  store i32 0, i32* %_mp_size56, align 4, !dbg !3725
  br label %if.end57, !dbg !3723

if.end57:                                         ; preds = %if.then55, %if.end53
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.end49
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.end37
  store i32 1, i32* %retval, align 4, !dbg !3726
  br label %return, !dbg !3726

if.else60:                                        ; preds = %cond.end22
  call void @llvm.dbg.declare(metadata i64** %np, metadata !3727, metadata !DIExpression()), !dbg !3729
  call void @llvm.dbg.declare(metadata i64** %qp, metadata !3730, metadata !DIExpression()), !dbg !3731
  call void @llvm.dbg.declare(metadata i64* %qn, metadata !3732, metadata !DIExpression()), !dbg !3733
  call void @llvm.dbg.declare(metadata i64* %rn, metadata !3734, metadata !DIExpression()), !dbg !3735
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %tq, metadata !3736, metadata !DIExpression()), !dbg !3737
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %tr, metadata !3738, metadata !DIExpression()), !dbg !3739
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !3740
  %41 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !3741
  call void @mpz_init_set(%struct.__mpz_struct* %arraydecay, %struct.__mpz_struct* %41), !dbg !3742
  %arraydecay61 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !3743
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay61, i32 0, i32 2, !dbg !3743
  %42 = load i64*, i64** %_mp_d, align 8, !dbg !3743
  store i64* %42, i64** %np, align 8, !dbg !3744
  %43 = load i64, i64* %nn, align 8, !dbg !3745
  %44 = load i64, i64* %dn, align 8, !dbg !3746
  %sub62 = sub nsw i64 %43, %44, !dbg !3747
  %add = add nsw i64 %sub62, 1, !dbg !3748
  store i64 %add, i64* %qn, align 8, !dbg !3749
  %45 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3750
  %tobool63 = icmp ne %struct.__mpz_struct* %45, null, !dbg !3750
  br i1 %tobool63, label %if.then64, label %if.else68, !dbg !3752

if.then64:                                        ; preds = %if.else60
  %arraydecay65 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tq, i64 0, i64 0, !dbg !3753
  %46 = load i64, i64* %qn, align 8, !dbg !3755
  %mul = mul i64 %46, 64, !dbg !3756
  call void @mpz_init2(%struct.__mpz_struct* %arraydecay65, i64 %mul), !dbg !3757
  %arraydecay66 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tq, i64 0, i64 0, !dbg !3758
  %_mp_d67 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay66, i32 0, i32 2, !dbg !3758
  %47 = load i64*, i64** %_mp_d67, align 8, !dbg !3758
  store i64* %47, i64** %qp, align 8, !dbg !3759
  br label %if.end69, !dbg !3760

if.else68:                                        ; preds = %if.else60
  store i64* null, i64** %qp, align 8, !dbg !3761
  br label %if.end69

if.end69:                                         ; preds = %if.else68, %if.then64
  %48 = load i64*, i64** %qp, align 8, !dbg !3762
  %49 = load i64*, i64** %np, align 8, !dbg !3763
  %50 = load i64, i64* %nn, align 8, !dbg !3764
  %51 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3765
  %_mp_d70 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %51, i32 0, i32 2, !dbg !3766
  %52 = load i64*, i64** %_mp_d70, align 8, !dbg !3766
  %53 = load i64, i64* %dn, align 8, !dbg !3767
  call void @mpn_div_qr(i64* %48, i64* %49, i64 %50, i64* %52, i64 %53), !dbg !3768
  %54 = load i64*, i64** %qp, align 8, !dbg !3769
  %tobool71 = icmp ne i64* %54, null, !dbg !3769
  br i1 %tobool71, label %if.then72, label %if.end88, !dbg !3771

if.then72:                                        ; preds = %if.end69
  %55 = load i64*, i64** %qp, align 8, !dbg !3772
  %56 = load i64, i64* %qn, align 8, !dbg !3774
  %sub73 = sub nsw i64 %56, 1, !dbg !3775
  %arrayidx = getelementptr inbounds i64, i64* %55, i64 %sub73, !dbg !3772
  %57 = load i64, i64* %arrayidx, align 8, !dbg !3772
  %cmp74 = icmp eq i64 %57, 0, !dbg !3776
  %conv75 = zext i1 %cmp74 to i32, !dbg !3776
  %conv76 = sext i32 %conv75 to i64, !dbg !3777
  %58 = load i64, i64* %qn, align 8, !dbg !3778
  %sub77 = sub nsw i64 %58, %conv76, !dbg !3778
  store i64 %sub77, i64* %qn, align 8, !dbg !3778
  %59 = load i64, i64* %qs, align 8, !dbg !3779
  %cmp78 = icmp slt i64 %59, 0, !dbg !3780
  br i1 %cmp78, label %cond.true80, label %cond.false82, !dbg !3779

cond.true80:                                      ; preds = %if.then72
  %60 = load i64, i64* %qn, align 8, !dbg !3781
  %sub81 = sub nsw i64 0, %60, !dbg !3782
  br label %cond.end83, !dbg !3779

cond.false82:                                     ; preds = %if.then72
  %61 = load i64, i64* %qn, align 8, !dbg !3783
  br label %cond.end83, !dbg !3779

cond.end83:                                       ; preds = %cond.false82, %cond.true80
  %cond84 = phi i64 [ %sub81, %cond.true80 ], [ %61, %cond.false82 ], !dbg !3779
  %conv85 = trunc i64 %cond84 to i32, !dbg !3779
  %arraydecay86 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tq, i64 0, i64 0, !dbg !3784
  %_mp_size87 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay86, i32 0, i32 1, !dbg !3784
  store i32 %conv85, i32* %_mp_size87, align 4, !dbg !3785
  br label %if.end88, !dbg !3786

if.end88:                                         ; preds = %cond.end83, %if.end69
  %62 = load i64*, i64** %np, align 8, !dbg !3787
  %63 = load i64, i64* %dn, align 8, !dbg !3788
  %call = call i64 @mpn_normalized_size(i64* %62, i64 %63), !dbg !3789
  store i64 %call, i64* %rn, align 8, !dbg !3790
  %64 = load i64, i64* %ns, align 8, !dbg !3791
  %cmp89 = icmp slt i64 %64, 0, !dbg !3792
  br i1 %cmp89, label %cond.true91, label %cond.false93, !dbg !3791

cond.true91:                                      ; preds = %if.end88
  %65 = load i64, i64* %rn, align 8, !dbg !3793
  %sub92 = sub nsw i64 0, %65, !dbg !3794
  br label %cond.end94, !dbg !3791

cond.false93:                                     ; preds = %if.end88
  %66 = load i64, i64* %rn, align 8, !dbg !3795
  br label %cond.end94, !dbg !3791

cond.end94:                                       ; preds = %cond.false93, %cond.true91
  %cond95 = phi i64 [ %sub92, %cond.true91 ], [ %66, %cond.false93 ], !dbg !3791
  %conv96 = trunc i64 %cond95 to i32, !dbg !3791
  %arraydecay97 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !3796
  %_mp_size98 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay97, i32 0, i32 1, !dbg !3796
  store i32 %conv96, i32* %_mp_size98, align 4, !dbg !3797
  %67 = load i32, i32* %mode.addr, align 4, !dbg !3798
  %cmp99 = icmp eq i32 %67, 0, !dbg !3800
  br i1 %cmp99, label %land.lhs.true101, label %if.else118, !dbg !3801

land.lhs.true101:                                 ; preds = %cond.end94
  %68 = load i64, i64* %qs, align 8, !dbg !3802
  %cmp102 = icmp slt i64 %68, 0, !dbg !3803
  br i1 %cmp102, label %land.lhs.true104, label %if.else118, !dbg !3804

land.lhs.true104:                                 ; preds = %land.lhs.true101
  %69 = load i64, i64* %rn, align 8, !dbg !3805
  %cmp105 = icmp ne i64 %69, 0, !dbg !3806
  br i1 %cmp105, label %if.then107, label %if.else118, !dbg !3807

if.then107:                                       ; preds = %land.lhs.true104
  %70 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3808
  %tobool108 = icmp ne %struct.__mpz_struct* %70, null, !dbg !3808
  br i1 %tobool108, label %if.then109, label %if.end112, !dbg !3811

if.then109:                                       ; preds = %if.then107
  %arraydecay110 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tq, i64 0, i64 0, !dbg !3812
  %arraydecay111 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tq, i64 0, i64 0, !dbg !3813
  call void @mpz_sub_ui(%struct.__mpz_struct* %arraydecay110, %struct.__mpz_struct* %arraydecay111, i64 1), !dbg !3814
  br label %if.end112, !dbg !3814

if.end112:                                        ; preds = %if.then109, %if.then107
  %71 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3815
  %tobool113 = icmp ne %struct.__mpz_struct* %71, null, !dbg !3815
  br i1 %tobool113, label %if.then114, label %if.end117, !dbg !3817

if.then114:                                       ; preds = %if.end112
  %arraydecay115 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !3818
  %arraydecay116 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !3819
  %72 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3820
  call void @mpz_add(%struct.__mpz_struct* %arraydecay115, %struct.__mpz_struct* %arraydecay116, %struct.__mpz_struct* %72), !dbg !3821
  br label %if.end117, !dbg !3821

if.end117:                                        ; preds = %if.then114, %if.end112
  br label %if.end139, !dbg !3822

if.else118:                                       ; preds = %land.lhs.true104, %land.lhs.true101, %cond.end94
  %73 = load i32, i32* %mode.addr, align 4, !dbg !3823
  %cmp119 = icmp eq i32 %73, 1, !dbg !3825
  br i1 %cmp119, label %land.lhs.true121, label %if.end138, !dbg !3826

land.lhs.true121:                                 ; preds = %if.else118
  %74 = load i64, i64* %qs, align 8, !dbg !3827
  %cmp122 = icmp sge i64 %74, 0, !dbg !3828
  br i1 %cmp122, label %land.lhs.true124, label %if.end138, !dbg !3829

land.lhs.true124:                                 ; preds = %land.lhs.true121
  %75 = load i64, i64* %rn, align 8, !dbg !3830
  %cmp125 = icmp ne i64 %75, 0, !dbg !3831
  br i1 %cmp125, label %if.then127, label %if.end138, !dbg !3832

if.then127:                                       ; preds = %land.lhs.true124
  %76 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3833
  %tobool128 = icmp ne %struct.__mpz_struct* %76, null, !dbg !3833
  br i1 %tobool128, label %if.then129, label %if.end132, !dbg !3836

if.then129:                                       ; preds = %if.then127
  %arraydecay130 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tq, i64 0, i64 0, !dbg !3837
  %arraydecay131 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tq, i64 0, i64 0, !dbg !3838
  call void @mpz_add_ui(%struct.__mpz_struct* %arraydecay130, %struct.__mpz_struct* %arraydecay131, i64 1), !dbg !3839
  br label %if.end132, !dbg !3839

if.end132:                                        ; preds = %if.then129, %if.then127
  %77 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3840
  %tobool133 = icmp ne %struct.__mpz_struct* %77, null, !dbg !3840
  br i1 %tobool133, label %if.then134, label %if.end137, !dbg !3842

if.then134:                                       ; preds = %if.end132
  %arraydecay135 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !3843
  %arraydecay136 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !3844
  %78 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3845
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay135, %struct.__mpz_struct* %arraydecay136, %struct.__mpz_struct* %78), !dbg !3846
  br label %if.end137, !dbg !3846

if.end137:                                        ; preds = %if.then134, %if.end132
  br label %if.end138, !dbg !3847

if.end138:                                        ; preds = %if.end137, %land.lhs.true124, %land.lhs.true121, %if.else118
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %if.end117
  %79 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3848
  %tobool140 = icmp ne %struct.__mpz_struct* %79, null, !dbg !3848
  br i1 %tobool140, label %if.then141, label %if.end144, !dbg !3850

if.then141:                                       ; preds = %if.end139
  %arraydecay142 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tq, i64 0, i64 0, !dbg !3851
  %80 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3853
  call void @mpz_swap(%struct.__mpz_struct* %arraydecay142, %struct.__mpz_struct* %80), !dbg !3854
  %arraydecay143 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tq, i64 0, i64 0, !dbg !3855
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay143), !dbg !3856
  br label %if.end144, !dbg !3857

if.end144:                                        ; preds = %if.then141, %if.end139
  %81 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3858
  %tobool145 = icmp ne %struct.__mpz_struct* %81, null, !dbg !3858
  br i1 %tobool145, label %if.then146, label %if.end148, !dbg !3860

if.then146:                                       ; preds = %if.end144
  %arraydecay147 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !3861
  %82 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3862
  call void @mpz_swap(%struct.__mpz_struct* %arraydecay147, %struct.__mpz_struct* %82), !dbg !3863
  br label %if.end148, !dbg !3863

if.end148:                                        ; preds = %if.then146, %if.end144
  %arraydecay149 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !3864
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay149), !dbg !3865
  %83 = load i64, i64* %rn, align 8, !dbg !3866
  %cmp150 = icmp ne i64 %83, 0, !dbg !3867
  %conv151 = zext i1 %cmp150 to i32, !dbg !3867
  store i32 %conv151, i32* %retval, align 4, !dbg !3868
  br label %return, !dbg !3868

return:                                           ; preds = %if.end148, %if.end59, %if.end13
  %84 = load i32, i32* %retval, align 4, !dbg !3869
  ret i32 %84, !dbg !3869
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_fdiv_qr(%struct.__mpz_struct* %q, %struct.__mpz_struct* %r, %struct.__mpz_struct* %n, %struct.__mpz_struct* %d) #0 !dbg !3870 {
entry:
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !3871, metadata !DIExpression()), !dbg !3872
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3873, metadata !DIExpression()), !dbg !3874
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !3875, metadata !DIExpression()), !dbg !3876
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !3877, metadata !DIExpression()), !dbg !3878
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3879
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3880
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !3881
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3882
  %call = call i32 @mpz_div_qr(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, %struct.__mpz_struct* %3, i32 0), !dbg !3883
  ret void, !dbg !3884
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_tdiv_qr(%struct.__mpz_struct* %q, %struct.__mpz_struct* %r, %struct.__mpz_struct* %n, %struct.__mpz_struct* %d) #0 !dbg !3885 {
entry:
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !3886, metadata !DIExpression()), !dbg !3887
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3888, metadata !DIExpression()), !dbg !3889
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !3890, metadata !DIExpression()), !dbg !3891
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !3892, metadata !DIExpression()), !dbg !3893
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3894
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3895
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !3896
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3897
  %call = call i32 @mpz_div_qr(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, %struct.__mpz_struct* %3, i32 2), !dbg !3898
  ret void, !dbg !3899
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_cdiv_q(%struct.__mpz_struct* %q, %struct.__mpz_struct* %n, %struct.__mpz_struct* %d) #0 !dbg !3900 {
entry:
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !3901, metadata !DIExpression()), !dbg !3902
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !3903, metadata !DIExpression()), !dbg !3904
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !3905, metadata !DIExpression()), !dbg !3906
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3907
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !3908
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3909
  %call = call i32 @mpz_div_qr(%struct.__mpz_struct* %0, %struct.__mpz_struct* null, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, i32 1), !dbg !3910
  ret void, !dbg !3911
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_fdiv_q(%struct.__mpz_struct* %q, %struct.__mpz_struct* %n, %struct.__mpz_struct* %d) #0 !dbg !3912 {
entry:
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !3913, metadata !DIExpression()), !dbg !3914
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !3915, metadata !DIExpression()), !dbg !3916
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !3917, metadata !DIExpression()), !dbg !3918
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3919
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !3920
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3921
  %call = call i32 @mpz_div_qr(%struct.__mpz_struct* %0, %struct.__mpz_struct* null, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, i32 0), !dbg !3922
  ret void, !dbg !3923
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_tdiv_q(%struct.__mpz_struct* %q, %struct.__mpz_struct* %n, %struct.__mpz_struct* %d) #0 !dbg !3924 {
entry:
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !3925, metadata !DIExpression()), !dbg !3926
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !3927, metadata !DIExpression()), !dbg !3928
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !3929, metadata !DIExpression()), !dbg !3930
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !3931
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !3932
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3933
  %call = call i32 @mpz_div_qr(%struct.__mpz_struct* %0, %struct.__mpz_struct* null, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, i32 2), !dbg !3934
  ret void, !dbg !3935
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_cdiv_r(%struct.__mpz_struct* %r, %struct.__mpz_struct* %n, %struct.__mpz_struct* %d) #0 !dbg !3936 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3937, metadata !DIExpression()), !dbg !3938
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !3939, metadata !DIExpression()), !dbg !3940
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !3941, metadata !DIExpression()), !dbg !3942
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3943
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !3944
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3945
  %call = call i32 @mpz_div_qr(%struct.__mpz_struct* null, %struct.__mpz_struct* %0, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, i32 1), !dbg !3946
  ret void, !dbg !3947
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_fdiv_r(%struct.__mpz_struct* %r, %struct.__mpz_struct* %n, %struct.__mpz_struct* %d) #0 !dbg !3948 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3949, metadata !DIExpression()), !dbg !3950
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !3951, metadata !DIExpression()), !dbg !3952
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !3953, metadata !DIExpression()), !dbg !3954
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3955
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !3956
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3957
  %call = call i32 @mpz_div_qr(%struct.__mpz_struct* null, %struct.__mpz_struct* %0, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, i32 0), !dbg !3958
  ret void, !dbg !3959
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_tdiv_r(%struct.__mpz_struct* %r, %struct.__mpz_struct* %n, %struct.__mpz_struct* %d) #0 !dbg !3960 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3961, metadata !DIExpression()), !dbg !3962
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !3963, metadata !DIExpression()), !dbg !3964
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !3965, metadata !DIExpression()), !dbg !3966
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3967
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !3968
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3969
  %call = call i32 @mpz_div_qr(%struct.__mpz_struct* null, %struct.__mpz_struct* %0, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, i32 2), !dbg !3970
  ret void, !dbg !3971
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_mod(%struct.__mpz_struct* %r, %struct.__mpz_struct* %n, %struct.__mpz_struct* %d) #0 !dbg !3972 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3973, metadata !DIExpression()), !dbg !3974
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !3975, metadata !DIExpression()), !dbg !3976
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !3977, metadata !DIExpression()), !dbg !3978
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3979
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !3980
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3981
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !3982
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %3, i32 0, i32 1, !dbg !3983
  %4 = load i32, i32* %_mp_size, align 4, !dbg !3983
  %cmp = icmp sge i32 %4, 0, !dbg !3984
  %5 = zext i1 %cmp to i64, !dbg !3982
  %cond = select i1 %cmp, i32 0, i32 1, !dbg !3982
  %call = call i32 @mpz_div_qr(%struct.__mpz_struct* null, %struct.__mpz_struct* %0, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, i32 %cond), !dbg !3985
  ret void, !dbg !3986
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_cdiv_q_2exp(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, i64 %cnt) #0 !dbg !3987 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %cnt.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !3988, metadata !DIExpression()), !dbg !3989
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !3990, metadata !DIExpression()), !dbg !3991
  store i64 %cnt, i64* %cnt.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %cnt.addr, metadata !3992, metadata !DIExpression()), !dbg !3993
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !3994
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !3995
  %2 = load i64, i64* %cnt.addr, align 8, !dbg !3996
  call void @mpz_div_q_2exp(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1, i64 %2, i32 1), !dbg !3997
  ret void, !dbg !3998
}

; Function Attrs: noinline nounwind uwtable
define internal void @mpz_div_q_2exp(%struct.__mpz_struct* %q, %struct.__mpz_struct* %u, i64 %bit_index, i32 %mode) #0 !dbg !3999 {
entry:
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %bit_index.addr = alloca i64, align 8
  %mode.addr = alloca i32, align 4
  %un = alloca i64, align 8
  %qn = alloca i64, align 8
  %limb_cnt = alloca i64, align 8
  %qp = alloca i64*, align 8
  %adjust = alloca i32, align 4
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !4002, metadata !DIExpression()), !dbg !4003
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !4004, metadata !DIExpression()), !dbg !4005
  store i64 %bit_index, i64* %bit_index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bit_index.addr, metadata !4006, metadata !DIExpression()), !dbg !4007
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4008, metadata !DIExpression()), !dbg !4009
  call void @llvm.dbg.declare(metadata i64* %un, metadata !4010, metadata !DIExpression()), !dbg !4011
  call void @llvm.dbg.declare(metadata i64* %qn, metadata !4012, metadata !DIExpression()), !dbg !4013
  call void @llvm.dbg.declare(metadata i64* %limb_cnt, metadata !4014, metadata !DIExpression()), !dbg !4015
  call void @llvm.dbg.declare(metadata i64** %qp, metadata !4016, metadata !DIExpression()), !dbg !4017
  call void @llvm.dbg.declare(metadata i32* %adjust, metadata !4018, metadata !DIExpression()), !dbg !4019
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4020
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !4021
  %1 = load i32, i32* %_mp_size, align 4, !dbg !4021
  %conv = sext i32 %1 to i64, !dbg !4020
  store i64 %conv, i64* %un, align 8, !dbg !4022
  %2 = load i64, i64* %un, align 8, !dbg !4023
  %cmp = icmp eq i64 %2, 0, !dbg !4025
  br i1 %cmp, label %if.then, label %if.end, !dbg !4026

if.then:                                          ; preds = %entry
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4027
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %3, i32 0, i32 1, !dbg !4029
  store i32 0, i32* %_mp_size2, align 4, !dbg !4030
  br label %if.end57, !dbg !4031

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %bit_index.addr, align 8, !dbg !4032
  %div = udiv i64 %4, 64, !dbg !4033
  store i64 %div, i64* %limb_cnt, align 8, !dbg !4034
  %5 = load i64, i64* %un, align 8, !dbg !4035
  %cmp3 = icmp sge i64 %5, 0, !dbg !4035
  br i1 %cmp3, label %cond.true, label %cond.false, !dbg !4035

cond.true:                                        ; preds = %if.end
  %6 = load i64, i64* %un, align 8, !dbg !4035
  br label %cond.end, !dbg !4035

cond.false:                                       ; preds = %if.end
  %7 = load i64, i64* %un, align 8, !dbg !4035
  %sub = sub nsw i64 0, %7, !dbg !4035
  br label %cond.end, !dbg !4035

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %6, %cond.true ], [ %sub, %cond.false ], !dbg !4035
  %8 = load i64, i64* %limb_cnt, align 8, !dbg !4036
  %sub5 = sub nsw i64 %cond, %8, !dbg !4037
  store i64 %sub5, i64* %qn, align 8, !dbg !4038
  %9 = load i64, i64* %bit_index.addr, align 8, !dbg !4039
  %rem = urem i64 %9, 64, !dbg !4039
  store i64 %rem, i64* %bit_index.addr, align 8, !dbg !4039
  %10 = load i32, i32* %mode.addr, align 4, !dbg !4040
  %11 = load i64, i64* %un, align 8, !dbg !4042
  %cmp6 = icmp sgt i64 %11, 0, !dbg !4043
  %12 = zext i1 %cmp6 to i64, !dbg !4044
  %cond8 = select i1 %cmp6, i32 1, i32 0, !dbg !4044
  %cmp9 = icmp eq i32 %10, %cond8, !dbg !4045
  br i1 %cmp9, label %if.then11, label %if.else, !dbg !4046

if.then11:                                        ; preds = %cond.end
  %13 = load i64, i64* %qn, align 8, !dbg !4047
  %cmp12 = icmp sle i64 %13, 0, !dbg !4048
  br i1 %cmp12, label %lor.end, label %lor.lhs.false, !dbg !4049

lor.lhs.false:                                    ; preds = %if.then11
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4050
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %14, i32 0, i32 2, !dbg !4050
  %15 = load i64*, i64** %_mp_d, align 8, !dbg !4050
  %16 = load i64, i64* %limb_cnt, align 8, !dbg !4050
  %call = call i64 @mpn_normalized_size(i64* %15, i64 %16), !dbg !4050
  %cmp14 = icmp eq i64 %call, 0, !dbg !4050
  br i1 %cmp14, label %lor.rhs, label %lor.end, !dbg !4051

lor.rhs:                                          ; preds = %lor.lhs.false
  %17 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4052
  %_mp_d16 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %17, i32 0, i32 2, !dbg !4053
  %18 = load i64*, i64** %_mp_d16, align 8, !dbg !4053
  %19 = load i64, i64* %limb_cnt, align 8, !dbg !4054
  %arrayidx = getelementptr inbounds i64, i64* %18, i64 %19, !dbg !4052
  %20 = load i64, i64* %arrayidx, align 8, !dbg !4052
  %21 = load i64, i64* %bit_index.addr, align 8, !dbg !4055
  %shl = shl i64 1, %21, !dbg !4056
  %sub17 = sub i64 %shl, 1, !dbg !4057
  %and = and i64 %20, %sub17, !dbg !4058
  %tobool = icmp ne i64 %and, 0, !dbg !4051
  br label %lor.end, !dbg !4051

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %if.then11
  %22 = phi i1 [ true, %lor.lhs.false ], [ true, %if.then11 ], [ %tobool, %lor.rhs ]
  %lor.ext = zext i1 %22 to i32, !dbg !4051
  store i32 %lor.ext, i32* %adjust, align 4, !dbg !4059
  br label %if.end18, !dbg !4060

if.else:                                          ; preds = %cond.end
  store i32 0, i32* %adjust, align 4, !dbg !4061
  br label %if.end18

if.end18:                                         ; preds = %if.else, %lor.end
  %23 = load i64, i64* %qn, align 8, !dbg !4062
  %cmp19 = icmp sle i64 %23, 0, !dbg !4064
  br i1 %cmp19, label %if.then21, label %if.else22, !dbg !4065

if.then21:                                        ; preds = %if.end18
  store i64 0, i64* %qn, align 8, !dbg !4066
  br label %if.end48, !dbg !4067

if.else22:                                        ; preds = %if.end18
  %24 = load i64, i64* %qn, align 8, !dbg !4068
  %25 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4068
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %25, i32 0, i32 0, !dbg !4068
  %26 = load i32, i32* %_mp_alloc, align 8, !dbg !4068
  %conv23 = sext i32 %26 to i64, !dbg !4068
  %cmp24 = icmp sgt i64 %24, %conv23, !dbg !4068
  br i1 %cmp24, label %cond.true26, label %cond.false28, !dbg !4068

cond.true26:                                      ; preds = %if.else22
  %27 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4068
  %28 = load i64, i64* %qn, align 8, !dbg !4068
  %call27 = call i8* @mpz_realloc(%struct.__mpz_struct* %27, i64 %28), !dbg !4068
  br label %cond.end30, !dbg !4068

cond.false28:                                     ; preds = %if.else22
  %29 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4068
  %_mp_d29 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %29, i32 0, i32 2, !dbg !4068
  %30 = load i64*, i64** %_mp_d29, align 8, !dbg !4068
  %31 = bitcast i64* %30 to i8*, !dbg !4068
  br label %cond.end30, !dbg !4068

cond.end30:                                       ; preds = %cond.false28, %cond.true26
  %cond31 = phi i8* [ %call27, %cond.true26 ], [ %31, %cond.false28 ], !dbg !4068
  %32 = bitcast i8* %cond31 to i64*, !dbg !4068
  store i64* %32, i64** %qp, align 8, !dbg !4070
  %33 = load i64, i64* %bit_index.addr, align 8, !dbg !4071
  %cmp32 = icmp ne i64 %33, 0, !dbg !4073
  br i1 %cmp32, label %if.then34, label %if.else44, !dbg !4074

if.then34:                                        ; preds = %cond.end30
  %34 = load i64*, i64** %qp, align 8, !dbg !4075
  %35 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4077
  %_mp_d35 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %35, i32 0, i32 2, !dbg !4078
  %36 = load i64*, i64** %_mp_d35, align 8, !dbg !4078
  %37 = load i64, i64* %limb_cnt, align 8, !dbg !4079
  %add.ptr = getelementptr inbounds i64, i64* %36, i64 %37, !dbg !4080
  %38 = load i64, i64* %qn, align 8, !dbg !4081
  %39 = load i64, i64* %bit_index.addr, align 8, !dbg !4082
  %conv36 = trunc i64 %39 to i32, !dbg !4082
  %call37 = call i64 @mpn_rshift(i64* %34, i64* %add.ptr, i64 %38, i32 %conv36), !dbg !4083
  %40 = load i64*, i64** %qp, align 8, !dbg !4084
  %41 = load i64, i64* %qn, align 8, !dbg !4085
  %sub38 = sub nsw i64 %41, 1, !dbg !4086
  %arrayidx39 = getelementptr inbounds i64, i64* %40, i64 %sub38, !dbg !4084
  %42 = load i64, i64* %arrayidx39, align 8, !dbg !4084
  %cmp40 = icmp eq i64 %42, 0, !dbg !4087
  %conv41 = zext i1 %cmp40 to i32, !dbg !4087
  %conv42 = sext i32 %conv41 to i64, !dbg !4084
  %43 = load i64, i64* %qn, align 8, !dbg !4088
  %sub43 = sub nsw i64 %43, %conv42, !dbg !4088
  store i64 %sub43, i64* %qn, align 8, !dbg !4088
  br label %if.end47, !dbg !4089

if.else44:                                        ; preds = %cond.end30
  %44 = load i64*, i64** %qp, align 8, !dbg !4090
  %45 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4092
  %_mp_d45 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %45, i32 0, i32 2, !dbg !4093
  %46 = load i64*, i64** %_mp_d45, align 8, !dbg !4093
  %47 = load i64, i64* %limb_cnt, align 8, !dbg !4094
  %add.ptr46 = getelementptr inbounds i64, i64* %46, i64 %47, !dbg !4095
  %48 = load i64, i64* %qn, align 8, !dbg !4096
  call void @mpn_copyi(i64* %44, i64* %add.ptr46, i64 %48), !dbg !4097
  br label %if.end47

if.end47:                                         ; preds = %if.else44, %if.then34
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then21
  %49 = load i64, i64* %qn, align 8, !dbg !4098
  %conv49 = trunc i64 %49 to i32, !dbg !4098
  %50 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4099
  %_mp_size50 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %50, i32 0, i32 1, !dbg !4100
  store i32 %conv49, i32* %_mp_size50, align 4, !dbg !4101
  %51 = load i32, i32* %adjust, align 4, !dbg !4102
  %tobool51 = icmp ne i32 %51, 0, !dbg !4102
  br i1 %tobool51, label %if.then52, label %if.end53, !dbg !4104

if.then52:                                        ; preds = %if.end48
  %52 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4105
  %53 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4106
  call void @mpz_add_ui(%struct.__mpz_struct* %52, %struct.__mpz_struct* %53, i64 1), !dbg !4107
  br label %if.end53, !dbg !4107

if.end53:                                         ; preds = %if.then52, %if.end48
  %54 = load i64, i64* %un, align 8, !dbg !4108
  %cmp54 = icmp slt i64 %54, 0, !dbg !4110
  br i1 %cmp54, label %if.then56, label %if.end57, !dbg !4111

if.then56:                                        ; preds = %if.end53
  %55 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4112
  %56 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4113
  call void @mpz_neg(%struct.__mpz_struct* %55, %struct.__mpz_struct* %56), !dbg !4114
  br label %if.end57, !dbg !4114

if.end57:                                         ; preds = %if.then, %if.then56, %if.end53
  ret void, !dbg !4115
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_fdiv_q_2exp(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, i64 %cnt) #0 !dbg !4116 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %cnt.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !4117, metadata !DIExpression()), !dbg !4118
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !4119, metadata !DIExpression()), !dbg !4120
  store i64 %cnt, i64* %cnt.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %cnt.addr, metadata !4121, metadata !DIExpression()), !dbg !4122
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4123
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4124
  %2 = load i64, i64* %cnt.addr, align 8, !dbg !4125
  call void @mpz_div_q_2exp(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1, i64 %2, i32 0), !dbg !4126
  ret void, !dbg !4127
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_tdiv_q_2exp(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, i64 %cnt) #0 !dbg !4128 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %cnt.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !4129, metadata !DIExpression()), !dbg !4130
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !4131, metadata !DIExpression()), !dbg !4132
  store i64 %cnt, i64* %cnt.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %cnt.addr, metadata !4133, metadata !DIExpression()), !dbg !4134
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4135
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4136
  %2 = load i64, i64* %cnt.addr, align 8, !dbg !4137
  call void @mpz_div_q_2exp(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1, i64 %2, i32 2), !dbg !4138
  ret void, !dbg !4139
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_cdiv_r_2exp(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, i64 %cnt) #0 !dbg !4140 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %cnt.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !4141, metadata !DIExpression()), !dbg !4142
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !4143, metadata !DIExpression()), !dbg !4144
  store i64 %cnt, i64* %cnt.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %cnt.addr, metadata !4145, metadata !DIExpression()), !dbg !4146
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4147
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4148
  %2 = load i64, i64* %cnt.addr, align 8, !dbg !4149
  call void @mpz_div_r_2exp(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1, i64 %2, i32 1), !dbg !4150
  ret void, !dbg !4151
}

; Function Attrs: noinline nounwind uwtable
define internal void @mpz_div_r_2exp(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, i64 %bit_index, i32 %mode) #0 !dbg !4152 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %bit_index.addr = alloca i64, align 8
  %mode.addr = alloca i32, align 4
  %us = alloca i64, align 8
  %un = alloca i64, align 8
  %rn = alloca i64, align 8
  %rp = alloca i64*, align 8
  %mask = alloca i64, align 8
  %i = alloca i64, align 8
  %cy = alloca i64, align 8
  %s = alloca i64, align 8
  %i69 = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !4153, metadata !DIExpression()), !dbg !4154
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !4155, metadata !DIExpression()), !dbg !4156
  store i64 %bit_index, i64* %bit_index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bit_index.addr, metadata !4157, metadata !DIExpression()), !dbg !4158
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4159, metadata !DIExpression()), !dbg !4160
  call void @llvm.dbg.declare(metadata i64* %us, metadata !4161, metadata !DIExpression()), !dbg !4162
  call void @llvm.dbg.declare(metadata i64* %un, metadata !4163, metadata !DIExpression()), !dbg !4164
  call void @llvm.dbg.declare(metadata i64* %rn, metadata !4165, metadata !DIExpression()), !dbg !4166
  call void @llvm.dbg.declare(metadata i64** %rp, metadata !4167, metadata !DIExpression()), !dbg !4168
  call void @llvm.dbg.declare(metadata i64* %mask, metadata !4169, metadata !DIExpression()), !dbg !4170
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4171
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !4172
  %1 = load i32, i32* %_mp_size, align 4, !dbg !4172
  %conv = sext i32 %1 to i64, !dbg !4171
  store i64 %conv, i64* %us, align 8, !dbg !4173
  %2 = load i64, i64* %us, align 8, !dbg !4174
  %cmp = icmp eq i64 %2, 0, !dbg !4176
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4177

lor.lhs.false:                                    ; preds = %entry
  %3 = load i64, i64* %bit_index.addr, align 8, !dbg !4178
  %cmp2 = icmp eq i64 %3, 0, !dbg !4179
  br i1 %cmp2, label %if.then, label %if.end, !dbg !4180

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4181
  %_mp_size4 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !4183
  store i32 0, i32* %_mp_size4, align 4, !dbg !4184
  br label %return, !dbg !4185

if.end:                                           ; preds = %lor.lhs.false
  %5 = load i64, i64* %bit_index.addr, align 8, !dbg !4186
  %add = add i64 %5, 64, !dbg !4187
  %sub = sub i64 %add, 1, !dbg !4188
  %div = udiv i64 %sub, 64, !dbg !4189
  store i64 %div, i64* %rn, align 8, !dbg !4190
  %6 = load i64, i64* %rn, align 8, !dbg !4191
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4191
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %7, i32 0, i32 0, !dbg !4191
  %8 = load i32, i32* %_mp_alloc, align 8, !dbg !4191
  %conv5 = sext i32 %8 to i64, !dbg !4191
  %cmp6 = icmp sgt i64 %6, %conv5, !dbg !4191
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !4191

cond.true:                                        ; preds = %if.end
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4191
  %10 = load i64, i64* %rn, align 8, !dbg !4191
  %call = call i8* @mpz_realloc(%struct.__mpz_struct* %9, i64 %10), !dbg !4191
  br label %cond.end, !dbg !4191

cond.false:                                       ; preds = %if.end
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4191
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %11, i32 0, i32 2, !dbg !4191
  %12 = load i64*, i64** %_mp_d, align 8, !dbg !4191
  %13 = bitcast i64* %12 to i8*, !dbg !4191
  br label %cond.end, !dbg !4191

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %13, %cond.false ], !dbg !4191
  %14 = bitcast i8* %cond to i64*, !dbg !4191
  store i64* %14, i64** %rp, align 8, !dbg !4192
  %15 = load i64, i64* %us, align 8, !dbg !4193
  %cmp8 = icmp sge i64 %15, 0, !dbg !4193
  br i1 %cmp8, label %cond.true10, label %cond.false11, !dbg !4193

cond.true10:                                      ; preds = %cond.end
  %16 = load i64, i64* %us, align 8, !dbg !4193
  br label %cond.end13, !dbg !4193

cond.false11:                                     ; preds = %cond.end
  %17 = load i64, i64* %us, align 8, !dbg !4193
  %sub12 = sub nsw i64 0, %17, !dbg !4193
  br label %cond.end13, !dbg !4193

cond.end13:                                       ; preds = %cond.false11, %cond.true10
  %cond14 = phi i64 [ %16, %cond.true10 ], [ %sub12, %cond.false11 ], !dbg !4193
  store i64 %cond14, i64* %un, align 8, !dbg !4194
  %18 = load i64, i64* %rn, align 8, !dbg !4195
  %mul = mul i64 %18, 64, !dbg !4196
  %19 = load i64, i64* %bit_index.addr, align 8, !dbg !4197
  %sub15 = sub i64 %mul, %19, !dbg !4198
  %shr = lshr i64 -1, %sub15, !dbg !4199
  store i64 %shr, i64* %mask, align 8, !dbg !4200
  %20 = load i64, i64* %rn, align 8, !dbg !4201
  %21 = load i64, i64* %un, align 8, !dbg !4203
  %cmp16 = icmp sgt i64 %20, %21, !dbg !4204
  br i1 %cmp16, label %if.then18, label %if.else51, !dbg !4205

if.then18:                                        ; preds = %cond.end13
  %22 = load i32, i32* %mode.addr, align 4, !dbg !4206
  %23 = load i64, i64* %us, align 8, !dbg !4209
  %cmp19 = icmp sgt i64 %23, 0, !dbg !4210
  %24 = zext i1 %cmp19 to i64, !dbg !4211
  %cond21 = select i1 %cmp19, i32 1, i32 0, !dbg !4211
  %cmp22 = icmp eq i32 %22, %cond21, !dbg !4212
  br i1 %cmp22, label %if.then24, label %if.else, !dbg !4213

if.then24:                                        ; preds = %if.then18
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4214, metadata !DIExpression()), !dbg !4216
  call void @llvm.dbg.declare(metadata i64* %cy, metadata !4217, metadata !DIExpression()), !dbg !4218
  store i64 1, i64* %cy, align 8, !dbg !4219
  store i64 0, i64* %i, align 8, !dbg !4221
  br label %for.cond, !dbg !4222

for.cond:                                         ; preds = %for.inc, %if.then24
  %25 = load i64, i64* %i, align 8, !dbg !4223
  %26 = load i64, i64* %un, align 8, !dbg !4225
  %cmp25 = icmp slt i64 %25, %26, !dbg !4226
  br i1 %cmp25, label %for.body, label %for.end, !dbg !4227

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %s, metadata !4228, metadata !DIExpression()), !dbg !4230
  %27 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4231
  %_mp_d27 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %27, i32 0, i32 2, !dbg !4232
  %28 = load i64*, i64** %_mp_d27, align 8, !dbg !4232
  %29 = load i64, i64* %i, align 8, !dbg !4233
  %arrayidx = getelementptr inbounds i64, i64* %28, i64 %29, !dbg !4231
  %30 = load i64, i64* %arrayidx, align 8, !dbg !4231
  %neg = xor i64 %30, -1, !dbg !4234
  %31 = load i64, i64* %cy, align 8, !dbg !4235
  %add28 = add i64 %neg, %31, !dbg !4236
  store i64 %add28, i64* %s, align 8, !dbg !4230
  %32 = load i64, i64* %s, align 8, !dbg !4237
  %33 = load i64, i64* %cy, align 8, !dbg !4238
  %cmp29 = icmp ult i64 %32, %33, !dbg !4239
  %conv30 = zext i1 %cmp29 to i32, !dbg !4239
  %conv31 = sext i32 %conv30 to i64, !dbg !4237
  store i64 %conv31, i64* %cy, align 8, !dbg !4240
  %34 = load i64, i64* %s, align 8, !dbg !4241
  %35 = load i64*, i64** %rp, align 8, !dbg !4242
  %36 = load i64, i64* %i, align 8, !dbg !4243
  %arrayidx32 = getelementptr inbounds i64, i64* %35, i64 %36, !dbg !4242
  store i64 %34, i64* %arrayidx32, align 8, !dbg !4244
  br label %for.inc, !dbg !4245

for.inc:                                          ; preds = %for.body
  %37 = load i64, i64* %i, align 8, !dbg !4246
  %inc = add nsw i64 %37, 1, !dbg !4246
  store i64 %inc, i64* %i, align 8, !dbg !4246
  br label %for.cond, !dbg !4247, !llvm.loop !4248

for.end:                                          ; preds = %for.cond
  br label %for.cond33, !dbg !4250

for.cond33:                                       ; preds = %for.inc39, %for.end
  %38 = load i64, i64* %i, align 8, !dbg !4251
  %39 = load i64, i64* %rn, align 8, !dbg !4254
  %sub34 = sub nsw i64 %39, 1, !dbg !4255
  %cmp35 = icmp slt i64 %38, %sub34, !dbg !4256
  br i1 %cmp35, label %for.body37, label %for.end41, !dbg !4257

for.body37:                                       ; preds = %for.cond33
  %40 = load i64*, i64** %rp, align 8, !dbg !4258
  %41 = load i64, i64* %i, align 8, !dbg !4259
  %arrayidx38 = getelementptr inbounds i64, i64* %40, i64 %41, !dbg !4258
  store i64 -1, i64* %arrayidx38, align 8, !dbg !4260
  br label %for.inc39, !dbg !4258

for.inc39:                                        ; preds = %for.body37
  %42 = load i64, i64* %i, align 8, !dbg !4261
  %inc40 = add nsw i64 %42, 1, !dbg !4261
  store i64 %inc40, i64* %i, align 8, !dbg !4261
  br label %for.cond33, !dbg !4262, !llvm.loop !4263

for.end41:                                        ; preds = %for.cond33
  %43 = load i64, i64* %mask, align 8, !dbg !4265
  %44 = load i64*, i64** %rp, align 8, !dbg !4266
  %45 = load i64, i64* %rn, align 8, !dbg !4267
  %sub42 = sub nsw i64 %45, 1, !dbg !4268
  %arrayidx43 = getelementptr inbounds i64, i64* %44, i64 %sub42, !dbg !4266
  store i64 %43, i64* %arrayidx43, align 8, !dbg !4269
  %46 = load i64, i64* %us, align 8, !dbg !4270
  %sub44 = sub nsw i64 0, %46, !dbg !4271
  store i64 %sub44, i64* %us, align 8, !dbg !4272
  br label %if.end50, !dbg !4273

if.else:                                          ; preds = %if.then18
  %47 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4274
  %48 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4277
  %cmp45 = icmp ne %struct.__mpz_struct* %47, %48, !dbg !4278
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !4279

if.then47:                                        ; preds = %if.else
  %49 = load i64*, i64** %rp, align 8, !dbg !4280
  %50 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4281
  %_mp_d48 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %50, i32 0, i32 2, !dbg !4282
  %51 = load i64*, i64** %_mp_d48, align 8, !dbg !4282
  %52 = load i64, i64* %un, align 8, !dbg !4283
  call void @mpn_copyi(i64* %49, i64* %51, i64 %52), !dbg !4284
  br label %if.end49, !dbg !4284

if.end49:                                         ; preds = %if.then47, %if.else
  %53 = load i64, i64* %un, align 8, !dbg !4285
  store i64 %53, i64* %rn, align 8, !dbg !4286
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %for.end41
  br label %if.end99, !dbg !4287

if.else51:                                        ; preds = %cond.end13
  %54 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4288
  %55 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4291
  %cmp52 = icmp ne %struct.__mpz_struct* %54, %55, !dbg !4292
  br i1 %cmp52, label %if.then54, label %if.end57, !dbg !4293

if.then54:                                        ; preds = %if.else51
  %56 = load i64*, i64** %rp, align 8, !dbg !4294
  %57 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4295
  %_mp_d55 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %57, i32 0, i32 2, !dbg !4296
  %58 = load i64*, i64** %_mp_d55, align 8, !dbg !4296
  %59 = load i64, i64* %rn, align 8, !dbg !4297
  %sub56 = sub nsw i64 %59, 1, !dbg !4298
  call void @mpn_copyi(i64* %56, i64* %58, i64 %sub56), !dbg !4299
  br label %if.end57, !dbg !4299

if.end57:                                         ; preds = %if.then54, %if.else51
  %60 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4300
  %_mp_d58 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %60, i32 0, i32 2, !dbg !4301
  %61 = load i64*, i64** %_mp_d58, align 8, !dbg !4301
  %62 = load i64, i64* %rn, align 8, !dbg !4302
  %sub59 = sub nsw i64 %62, 1, !dbg !4303
  %arrayidx60 = getelementptr inbounds i64, i64* %61, i64 %sub59, !dbg !4300
  %63 = load i64, i64* %arrayidx60, align 8, !dbg !4300
  %64 = load i64, i64* %mask, align 8, !dbg !4304
  %and = and i64 %63, %64, !dbg !4305
  %65 = load i64*, i64** %rp, align 8, !dbg !4306
  %66 = load i64, i64* %rn, align 8, !dbg !4307
  %sub61 = sub nsw i64 %66, 1, !dbg !4308
  %arrayidx62 = getelementptr inbounds i64, i64* %65, i64 %sub61, !dbg !4306
  store i64 %and, i64* %arrayidx62, align 8, !dbg !4309
  %67 = load i32, i32* %mode.addr, align 4, !dbg !4310
  %68 = load i64, i64* %us, align 8, !dbg !4312
  %cmp63 = icmp sgt i64 %68, 0, !dbg !4313
  %69 = zext i1 %cmp63 to i64, !dbg !4314
  %cond65 = select i1 %cmp63, i32 1, i32 0, !dbg !4314
  %cmp66 = icmp eq i32 %67, %cond65, !dbg !4315
  br i1 %cmp66, label %if.then68, label %if.end98, !dbg !4316

if.then68:                                        ; preds = %if.end57
  call void @llvm.dbg.declare(metadata i64* %i69, metadata !4317, metadata !DIExpression()), !dbg !4319
  store i64 0, i64* %i69, align 8, !dbg !4320
  br label %for.cond70, !dbg !4322

for.cond70:                                       ; preds = %for.inc77, %if.then68
  %70 = load i64, i64* %i69, align 8, !dbg !4323
  %71 = load i64, i64* %rn, align 8, !dbg !4325
  %cmp71 = icmp slt i64 %70, %71, !dbg !4326
  br i1 %cmp71, label %land.rhs, label %land.end, !dbg !4327

land.rhs:                                         ; preds = %for.cond70
  %72 = load i64*, i64** %rp, align 8, !dbg !4328
  %73 = load i64, i64* %i69, align 8, !dbg !4329
  %arrayidx73 = getelementptr inbounds i64, i64* %72, i64 %73, !dbg !4328
  %74 = load i64, i64* %arrayidx73, align 8, !dbg !4328
  %cmp74 = icmp eq i64 %74, 0, !dbg !4330
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond70
  %75 = phi i1 [ false, %for.cond70 ], [ %cmp74, %land.rhs ], !dbg !4331
  br i1 %75, label %for.body76, label %for.end79, !dbg !4332

for.body76:                                       ; preds = %land.end
  br label %for.inc77, !dbg !4332

for.inc77:                                        ; preds = %for.body76
  %76 = load i64, i64* %i69, align 8, !dbg !4333
  %inc78 = add nsw i64 %76, 1, !dbg !4333
  store i64 %inc78, i64* %i69, align 8, !dbg !4333
  br label %for.cond70, !dbg !4334, !llvm.loop !4335

for.end79:                                        ; preds = %land.end
  %77 = load i64, i64* %i69, align 8, !dbg !4337
  %78 = load i64, i64* %rn, align 8, !dbg !4339
  %cmp80 = icmp slt i64 %77, %78, !dbg !4340
  br i1 %cmp80, label %if.then82, label %if.end97, !dbg !4341

if.then82:                                        ; preds = %for.end79
  %79 = load i64*, i64** %rp, align 8, !dbg !4342
  %80 = load i64, i64* %i69, align 8, !dbg !4344
  %arrayidx83 = getelementptr inbounds i64, i64* %79, i64 %80, !dbg !4342
  %81 = load i64, i64* %arrayidx83, align 8, !dbg !4342
  %neg84 = xor i64 %81, -1, !dbg !4345
  %add85 = add i64 %neg84, 1, !dbg !4346
  %82 = load i64*, i64** %rp, align 8, !dbg !4347
  %83 = load i64, i64* %i69, align 8, !dbg !4348
  %arrayidx86 = getelementptr inbounds i64, i64* %82, i64 %83, !dbg !4347
  store i64 %add85, i64* %arrayidx86, align 8, !dbg !4349
  br label %while.cond, !dbg !4350

while.cond:                                       ; preds = %while.body, %if.then82
  %84 = load i64, i64* %i69, align 8, !dbg !4351
  %inc87 = add nsw i64 %84, 1, !dbg !4351
  store i64 %inc87, i64* %i69, align 8, !dbg !4351
  %85 = load i64, i64* %rn, align 8, !dbg !4352
  %cmp88 = icmp slt i64 %inc87, %85, !dbg !4353
  br i1 %cmp88, label %while.body, label %while.end, !dbg !4350

while.body:                                       ; preds = %while.cond
  %86 = load i64*, i64** %rp, align 8, !dbg !4354
  %87 = load i64, i64* %i69, align 8, !dbg !4355
  %arrayidx90 = getelementptr inbounds i64, i64* %86, i64 %87, !dbg !4354
  %88 = load i64, i64* %arrayidx90, align 8, !dbg !4354
  %neg91 = xor i64 %88, -1, !dbg !4356
  %89 = load i64*, i64** %rp, align 8, !dbg !4357
  %90 = load i64, i64* %i69, align 8, !dbg !4358
  %arrayidx92 = getelementptr inbounds i64, i64* %89, i64 %90, !dbg !4357
  store i64 %neg91, i64* %arrayidx92, align 8, !dbg !4359
  br label %while.cond, !dbg !4350, !llvm.loop !4360

while.end:                                        ; preds = %while.cond
  %91 = load i64, i64* %mask, align 8, !dbg !4362
  %92 = load i64*, i64** %rp, align 8, !dbg !4363
  %93 = load i64, i64* %rn, align 8, !dbg !4364
  %sub93 = sub nsw i64 %93, 1, !dbg !4365
  %arrayidx94 = getelementptr inbounds i64, i64* %92, i64 %sub93, !dbg !4363
  %94 = load i64, i64* %arrayidx94, align 8, !dbg !4366
  %and95 = and i64 %94, %91, !dbg !4366
  store i64 %and95, i64* %arrayidx94, align 8, !dbg !4366
  %95 = load i64, i64* %us, align 8, !dbg !4367
  %sub96 = sub nsw i64 0, %95, !dbg !4368
  store i64 %sub96, i64* %us, align 8, !dbg !4369
  br label %if.end97, !dbg !4370

if.end97:                                         ; preds = %while.end, %for.end79
  br label %if.end98, !dbg !4371

if.end98:                                         ; preds = %if.end97, %if.end57
  br label %if.end99

if.end99:                                         ; preds = %if.end98, %if.end50
  %96 = load i64*, i64** %rp, align 8, !dbg !4372
  %97 = load i64, i64* %rn, align 8, !dbg !4373
  %call100 = call i64 @mpn_normalized_size(i64* %96, i64 %97), !dbg !4374
  store i64 %call100, i64* %rn, align 8, !dbg !4375
  %98 = load i64, i64* %us, align 8, !dbg !4376
  %cmp101 = icmp slt i64 %98, 0, !dbg !4377
  br i1 %cmp101, label %cond.true103, label %cond.false105, !dbg !4376

cond.true103:                                     ; preds = %if.end99
  %99 = load i64, i64* %rn, align 8, !dbg !4378
  %sub104 = sub nsw i64 0, %99, !dbg !4379
  br label %cond.end106, !dbg !4376

cond.false105:                                    ; preds = %if.end99
  %100 = load i64, i64* %rn, align 8, !dbg !4380
  br label %cond.end106, !dbg !4376

cond.end106:                                      ; preds = %cond.false105, %cond.true103
  %cond107 = phi i64 [ %sub104, %cond.true103 ], [ %100, %cond.false105 ], !dbg !4376
  %conv108 = trunc i64 %cond107 to i32, !dbg !4376
  %101 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4381
  %_mp_size109 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %101, i32 0, i32 1, !dbg !4382
  store i32 %conv108, i32* %_mp_size109, align 4, !dbg !4383
  br label %return, !dbg !4384

return:                                           ; preds = %cond.end106, %if.then
  ret void, !dbg !4384
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_fdiv_r_2exp(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, i64 %cnt) #0 !dbg !4385 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %cnt.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !4386, metadata !DIExpression()), !dbg !4387
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !4388, metadata !DIExpression()), !dbg !4389
  store i64 %cnt, i64* %cnt.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %cnt.addr, metadata !4390, metadata !DIExpression()), !dbg !4391
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4392
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4393
  %2 = load i64, i64* %cnt.addr, align 8, !dbg !4394
  call void @mpz_div_r_2exp(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1, i64 %2, i32 0), !dbg !4395
  ret void, !dbg !4396
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_tdiv_r_2exp(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, i64 %cnt) #0 !dbg !4397 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %cnt.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !4398, metadata !DIExpression()), !dbg !4399
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !4400, metadata !DIExpression()), !dbg !4401
  store i64 %cnt, i64* %cnt.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %cnt.addr, metadata !4402, metadata !DIExpression()), !dbg !4403
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4404
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4405
  %2 = load i64, i64* %cnt.addr, align 8, !dbg !4406
  call void @mpz_div_r_2exp(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1, i64 %2, i32 2), !dbg !4407
  ret void, !dbg !4408
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_divexact(%struct.__mpz_struct* %q, %struct.__mpz_struct* %n, %struct.__mpz_struct* %d) #0 !dbg !4409 {
entry:
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca %struct.__mpz_struct*, align 8
  %__cy = alloca i64, align 8
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !4410, metadata !DIExpression()), !dbg !4411
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4412, metadata !DIExpression()), !dbg !4413
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !4414, metadata !DIExpression()), !dbg !4415
  br label %do.body, !dbg !4416

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %__cy, metadata !4417, metadata !DIExpression()), !dbg !4419
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4419
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4419
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !4419
  %call = call i32 @mpz_div_qr(%struct.__mpz_struct* %0, %struct.__mpz_struct* null, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, i32 2), !dbg !4419
  %conv = sext i32 %call to i64, !dbg !4419
  store i64 %conv, i64* %__cy, align 8, !dbg !4419
  br label %do.end, !dbg !4419

do.end:                                           ; preds = %do.body
  ret void, !dbg !4420
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_divisible_p(%struct.__mpz_struct* %n, %struct.__mpz_struct* %d) #0 !dbg !4421 {
entry:
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4422, metadata !DIExpression()), !dbg !4423
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !4424, metadata !DIExpression()), !dbg !4425
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4426
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !4427
  %call = call i32 @mpz_div_qr(%struct.__mpz_struct* null, %struct.__mpz_struct* null, %struct.__mpz_struct* %0, %struct.__mpz_struct* %1, i32 2), !dbg !4428
  %cmp = icmp eq i32 %call, 0, !dbg !4429
  %conv = zext i1 %cmp to i32, !dbg !4429
  ret i32 %conv, !dbg !4430
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_congruent_p(%struct.__mpz_struct* %a, %struct.__mpz_struct* %b, %struct.__mpz_struct* %m) #0 !dbg !4431 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.__mpz_struct*, align 8
  %b.addr = alloca %struct.__mpz_struct*, align 8
  %m.addr = alloca %struct.__mpz_struct*, align 8
  %t = alloca [1 x %struct.__mpz_struct], align 16
  %res = alloca i32, align 4
  store %struct.__mpz_struct* %a, %struct.__mpz_struct** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %a.addr, metadata !4434, metadata !DIExpression()), !dbg !4435
  store %struct.__mpz_struct* %b, %struct.__mpz_struct** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %b.addr, metadata !4436, metadata !DIExpression()), !dbg !4437
  store %struct.__mpz_struct* %m, %struct.__mpz_struct** %m.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %m.addr, metadata !4438, metadata !DIExpression()), !dbg !4439
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %t, metadata !4440, metadata !DIExpression()), !dbg !4441
  call void @llvm.dbg.declare(metadata i32* %res, metadata !4442, metadata !DIExpression()), !dbg !4443
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %m.addr, align 8, !dbg !4444
  %call = call i32 @mpz_sgn(%struct.__mpz_struct* %0), !dbg !4446
  %cmp = icmp eq i32 %call, 0, !dbg !4447
  br i1 %cmp, label %if.then, label %if.end, !dbg !4448

if.then:                                          ; preds = %entry
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !4449
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !4450
  %call1 = call i32 @mpz_cmp(%struct.__mpz_struct* %1, %struct.__mpz_struct* %2), !dbg !4451
  %cmp2 = icmp eq i32 %call1, 0, !dbg !4452
  %conv = zext i1 %cmp2 to i32, !dbg !4452
  store i32 %conv, i32* %retval, align 4, !dbg !4453
  br label %return, !dbg !4453

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !4454
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !4455
  %arraydecay3 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !4456
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %a.addr, align 8, !dbg !4457
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !4458
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay3, %struct.__mpz_struct* %3, %struct.__mpz_struct* %4), !dbg !4459
  %arraydecay4 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !4460
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %m.addr, align 8, !dbg !4461
  %call5 = call i32 @mpz_divisible_p(%struct.__mpz_struct* %arraydecay4, %struct.__mpz_struct* %5), !dbg !4462
  store i32 %call5, i32* %res, align 4, !dbg !4463
  %arraydecay6 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !4464
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay6), !dbg !4465
  %6 = load i32, i32* %res, align 4, !dbg !4466
  store i32 %6, i32* %retval, align 4, !dbg !4467
  br label %return, !dbg !4467

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !4468
  ret i32 %7, !dbg !4468
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_cdiv_qr_ui(%struct.__mpz_struct* %q, %struct.__mpz_struct* %r, %struct.__mpz_struct* %n, i64 %d) #0 !dbg !4469 {
entry:
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !4472, metadata !DIExpression()), !dbg !4473
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !4474, metadata !DIExpression()), !dbg !4475
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4476, metadata !DIExpression()), !dbg !4477
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4478, metadata !DIExpression()), !dbg !4479
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4480
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4481
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4482
  %3 = load i64, i64* %d.addr, align 8, !dbg !4483
  %call = call i64 @mpz_div_qr_ui(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, i64 %3, i32 1), !dbg !4484
  ret i64 %call, !dbg !4485
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpz_div_qr_ui(%struct.__mpz_struct* %q, %struct.__mpz_struct* %r, %struct.__mpz_struct* %n, i64 %d, i32 %mode) #0 !dbg !4486 {
entry:
  %retval = alloca i64, align 8
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  %mode.addr = alloca i32, align 4
  %ns = alloca i64, align 8
  %qn = alloca i64, align 8
  %qp = alloca i64*, align 8
  %rl = alloca i64, align 8
  %rs = alloca i64, align 8
  %__cy = alloca i64, align 8
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !4489, metadata !DIExpression()), !dbg !4490
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !4491, metadata !DIExpression()), !dbg !4492
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4493, metadata !DIExpression()), !dbg !4494
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4495, metadata !DIExpression()), !dbg !4496
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4497, metadata !DIExpression()), !dbg !4498
  call void @llvm.dbg.declare(metadata i64* %ns, metadata !4499, metadata !DIExpression()), !dbg !4500
  call void @llvm.dbg.declare(metadata i64* %qn, metadata !4501, metadata !DIExpression()), !dbg !4502
  call void @llvm.dbg.declare(metadata i64** %qp, metadata !4503, metadata !DIExpression()), !dbg !4504
  call void @llvm.dbg.declare(metadata i64* %rl, metadata !4505, metadata !DIExpression()), !dbg !4506
  call void @llvm.dbg.declare(metadata i64* %rs, metadata !4507, metadata !DIExpression()), !dbg !4508
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4509
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !4510
  %1 = load i32, i32* %_mp_size, align 4, !dbg !4510
  %conv = sext i32 %1 to i64, !dbg !4509
  store i64 %conv, i64* %ns, align 8, !dbg !4511
  %2 = load i64, i64* %ns, align 8, !dbg !4512
  %cmp = icmp eq i64 %2, 0, !dbg !4514
  br i1 %cmp, label %if.then, label %if.end8, !dbg !4515

if.then:                                          ; preds = %entry
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4516
  %tobool = icmp ne %struct.__mpz_struct* %3, null, !dbg !4516
  br i1 %tobool, label %if.then2, label %if.end, !dbg !4519

if.then2:                                         ; preds = %if.then
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4520
  %_mp_size3 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !4521
  store i32 0, i32* %_mp_size3, align 4, !dbg !4522
  br label %if.end, !dbg !4520

if.end:                                           ; preds = %if.then2, %if.then
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4523
  %tobool4 = icmp ne %struct.__mpz_struct* %5, null, !dbg !4523
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !4525

if.then5:                                         ; preds = %if.end
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4526
  %_mp_size6 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 1, !dbg !4527
  store i32 0, i32* %_mp_size6, align 4, !dbg !4528
  br label %if.end7, !dbg !4526

if.end7:                                          ; preds = %if.then5, %if.end
  store i64 0, i64* %retval, align 8, !dbg !4529
  br label %return, !dbg !4529

if.end8:                                          ; preds = %entry
  %7 = load i64, i64* %ns, align 8, !dbg !4530
  %cmp9 = icmp sge i64 %7, 0, !dbg !4530
  br i1 %cmp9, label %cond.true, label %cond.false, !dbg !4530

cond.true:                                        ; preds = %if.end8
  %8 = load i64, i64* %ns, align 8, !dbg !4530
  br label %cond.end, !dbg !4530

cond.false:                                       ; preds = %if.end8
  %9 = load i64, i64* %ns, align 8, !dbg !4530
  %sub = sub nsw i64 0, %9, !dbg !4530
  br label %cond.end, !dbg !4530

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %sub, %cond.false ], !dbg !4530
  store i64 %cond, i64* %qn, align 8, !dbg !4531
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4532
  %tobool11 = icmp ne %struct.__mpz_struct* %10, null, !dbg !4532
  br i1 %tobool11, label %if.then12, label %if.else, !dbg !4534

if.then12:                                        ; preds = %cond.end
  %11 = load i64, i64* %qn, align 8, !dbg !4535
  %12 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4535
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %12, i32 0, i32 0, !dbg !4535
  %13 = load i32, i32* %_mp_alloc, align 8, !dbg !4535
  %conv13 = sext i32 %13 to i64, !dbg !4535
  %cmp14 = icmp sgt i64 %11, %conv13, !dbg !4535
  br i1 %cmp14, label %cond.true16, label %cond.false17, !dbg !4535

cond.true16:                                      ; preds = %if.then12
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4535
  %15 = load i64, i64* %qn, align 8, !dbg !4535
  %call = call i8* @mpz_realloc(%struct.__mpz_struct* %14, i64 %15), !dbg !4535
  br label %cond.end18, !dbg !4535

cond.false17:                                     ; preds = %if.then12
  %16 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4535
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %16, i32 0, i32 2, !dbg !4535
  %17 = load i64*, i64** %_mp_d, align 8, !dbg !4535
  %18 = bitcast i64* %17 to i8*, !dbg !4535
  br label %cond.end18, !dbg !4535

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i8* [ %call, %cond.true16 ], [ %18, %cond.false17 ], !dbg !4535
  %19 = bitcast i8* %cond19 to i64*, !dbg !4535
  store i64* %19, i64** %qp, align 8, !dbg !4536
  br label %if.end20, !dbg !4537

if.else:                                          ; preds = %cond.end
  store i64* null, i64** %qp, align 8, !dbg !4538
  br label %if.end20

if.end20:                                         ; preds = %if.else, %cond.end18
  %20 = load i64*, i64** %qp, align 8, !dbg !4539
  %21 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4540
  %_mp_d21 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %21, i32 0, i32 2, !dbg !4541
  %22 = load i64*, i64** %_mp_d21, align 8, !dbg !4541
  %23 = load i64, i64* %qn, align 8, !dbg !4542
  %24 = load i64, i64* %d.addr, align 8, !dbg !4543
  %call22 = call i64 @mpn_div_qr_1(i64* %20, i64* %22, i64 %23, i64 %24), !dbg !4544
  store i64 %call22, i64* %rl, align 8, !dbg !4545
  %25 = load i64, i64* %rl, align 8, !dbg !4546
  %cmp23 = icmp ugt i64 %25, 0, !dbg !4547
  %conv24 = zext i1 %cmp23 to i32, !dbg !4547
  %conv25 = sext i32 %conv24 to i64, !dbg !4546
  store i64 %conv25, i64* %rs, align 8, !dbg !4548
  %26 = load i64, i64* %ns, align 8, !dbg !4549
  %cmp26 = icmp slt i64 %26, 0, !dbg !4550
  br i1 %cmp26, label %cond.true28, label %cond.false30, !dbg !4551

cond.true28:                                      ; preds = %if.end20
  %27 = load i64, i64* %rs, align 8, !dbg !4552
  %sub29 = sub nsw i64 0, %27, !dbg !4553
  br label %cond.end31, !dbg !4551

cond.false30:                                     ; preds = %if.end20
  %28 = load i64, i64* %rs, align 8, !dbg !4554
  br label %cond.end31, !dbg !4551

cond.end31:                                       ; preds = %cond.false30, %cond.true28
  %cond32 = phi i64 [ %sub29, %cond.true28 ], [ %28, %cond.false30 ], !dbg !4551
  store i64 %cond32, i64* %rs, align 8, !dbg !4555
  %29 = load i64, i64* %rl, align 8, !dbg !4556
  %cmp33 = icmp ugt i64 %29, 0, !dbg !4558
  br i1 %cmp33, label %land.lhs.true, label %if.end52, !dbg !4559

land.lhs.true:                                    ; preds = %cond.end31
  %30 = load i32, i32* %mode.addr, align 4, !dbg !4560
  %cmp35 = icmp eq i32 %30, 0, !dbg !4561
  br i1 %cmp35, label %land.lhs.true37, label %lor.lhs.false, !dbg !4562

land.lhs.true37:                                  ; preds = %land.lhs.true
  %31 = load i64, i64* %ns, align 8, !dbg !4563
  %cmp38 = icmp slt i64 %31, 0, !dbg !4564
  br i1 %cmp38, label %if.then45, label %lor.lhs.false, !dbg !4565

lor.lhs.false:                                    ; preds = %land.lhs.true37, %land.lhs.true
  %32 = load i32, i32* %mode.addr, align 4, !dbg !4566
  %cmp40 = icmp eq i32 %32, 1, !dbg !4567
  br i1 %cmp40, label %land.lhs.true42, label %if.end52, !dbg !4568

land.lhs.true42:                                  ; preds = %lor.lhs.false
  %33 = load i64, i64* %ns, align 8, !dbg !4569
  %cmp43 = icmp sge i64 %33, 0, !dbg !4570
  br i1 %cmp43, label %if.then45, label %if.end52, !dbg !4571

if.then45:                                        ; preds = %land.lhs.true42, %land.lhs.true37
  %34 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4572
  %tobool46 = icmp ne %struct.__mpz_struct* %34, null, !dbg !4572
  br i1 %tobool46, label %if.then47, label %if.end49, !dbg !4575

if.then47:                                        ; preds = %if.then45
  br label %do.body, !dbg !4576

do.body:                                          ; preds = %if.then47
  call void @llvm.dbg.declare(metadata i64* %__cy, metadata !4577, metadata !DIExpression()), !dbg !4579
  %35 = load i64*, i64** %qp, align 8, !dbg !4579
  %36 = load i64*, i64** %qp, align 8, !dbg !4579
  %37 = load i64, i64* %qn, align 8, !dbg !4579
  %call48 = call i64 @mpn_add_1(i64* %35, i64* %36, i64 %37, i64 1), !dbg !4579
  store i64 %call48, i64* %__cy, align 8, !dbg !4579
  br label %do.end, !dbg !4579

do.end:                                           ; preds = %do.body
  br label %if.end49, !dbg !4579

if.end49:                                         ; preds = %do.end, %if.then45
  %38 = load i64, i64* %d.addr, align 8, !dbg !4580
  %39 = load i64, i64* %rl, align 8, !dbg !4581
  %sub50 = sub i64 %38, %39, !dbg !4582
  store i64 %sub50, i64* %rl, align 8, !dbg !4583
  %40 = load i64, i64* %rs, align 8, !dbg !4584
  %sub51 = sub nsw i64 0, %40, !dbg !4585
  store i64 %sub51, i64* %rs, align 8, !dbg !4586
  br label %if.end52, !dbg !4587

if.end52:                                         ; preds = %if.end49, %land.lhs.true42, %lor.lhs.false, %cond.end31
  %41 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4588
  %tobool53 = icmp ne %struct.__mpz_struct* %41, null, !dbg !4588
  br i1 %tobool53, label %if.then54, label %if.end58, !dbg !4590

if.then54:                                        ; preds = %if.end52
  %42 = load i64, i64* %rl, align 8, !dbg !4591
  %43 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4593
  %_mp_d55 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %43, i32 0, i32 2, !dbg !4594
  %44 = load i64*, i64** %_mp_d55, align 8, !dbg !4594
  %arrayidx = getelementptr inbounds i64, i64* %44, i64 0, !dbg !4593
  store i64 %42, i64* %arrayidx, align 8, !dbg !4595
  %45 = load i64, i64* %rs, align 8, !dbg !4596
  %conv56 = trunc i64 %45 to i32, !dbg !4596
  %46 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4597
  %_mp_size57 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %46, i32 0, i32 1, !dbg !4598
  store i32 %conv56, i32* %_mp_size57, align 4, !dbg !4599
  br label %if.end58, !dbg !4600

if.end58:                                         ; preds = %if.then54, %if.end52
  %47 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4601
  %tobool59 = icmp ne %struct.__mpz_struct* %47, null, !dbg !4601
  br i1 %tobool59, label %if.then60, label %if.end76, !dbg !4603

if.then60:                                        ; preds = %if.end58
  %48 = load i64*, i64** %qp, align 8, !dbg !4604
  %49 = load i64, i64* %qn, align 8, !dbg !4606
  %sub61 = sub nsw i64 %49, 1, !dbg !4607
  %arrayidx62 = getelementptr inbounds i64, i64* %48, i64 %sub61, !dbg !4604
  %50 = load i64, i64* %arrayidx62, align 8, !dbg !4604
  %cmp63 = icmp eq i64 %50, 0, !dbg !4608
  %conv64 = zext i1 %cmp63 to i32, !dbg !4608
  %conv65 = sext i32 %conv64 to i64, !dbg !4609
  %51 = load i64, i64* %qn, align 8, !dbg !4610
  %sub66 = sub nsw i64 %51, %conv65, !dbg !4610
  store i64 %sub66, i64* %qn, align 8, !dbg !4610
  %52 = load i64, i64* %ns, align 8, !dbg !4611
  %cmp67 = icmp slt i64 %52, 0, !dbg !4612
  br i1 %cmp67, label %cond.true69, label %cond.false71, !dbg !4613

cond.true69:                                      ; preds = %if.then60
  %53 = load i64, i64* %qn, align 8, !dbg !4614
  %sub70 = sub nsw i64 0, %53, !dbg !4615
  br label %cond.end72, !dbg !4613

cond.false71:                                     ; preds = %if.then60
  %54 = load i64, i64* %qn, align 8, !dbg !4616
  br label %cond.end72, !dbg !4613

cond.end72:                                       ; preds = %cond.false71, %cond.true69
  %cond73 = phi i64 [ %sub70, %cond.true69 ], [ %54, %cond.false71 ], !dbg !4613
  %conv74 = trunc i64 %cond73 to i32, !dbg !4613
  %55 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4617
  %_mp_size75 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %55, i32 0, i32 1, !dbg !4618
  store i32 %conv74, i32* %_mp_size75, align 4, !dbg !4619
  br label %if.end76, !dbg !4620

if.end76:                                         ; preds = %cond.end72, %if.end58
  %56 = load i64, i64* %rl, align 8, !dbg !4621
  store i64 %56, i64* %retval, align 8, !dbg !4622
  br label %return, !dbg !4622

return:                                           ; preds = %if.end76, %if.end7
  %57 = load i64, i64* %retval, align 8, !dbg !4623
  ret i64 %57, !dbg !4623
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_fdiv_qr_ui(%struct.__mpz_struct* %q, %struct.__mpz_struct* %r, %struct.__mpz_struct* %n, i64 %d) #0 !dbg !4624 {
entry:
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !4625, metadata !DIExpression()), !dbg !4626
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !4627, metadata !DIExpression()), !dbg !4628
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4629, metadata !DIExpression()), !dbg !4630
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4631, metadata !DIExpression()), !dbg !4632
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4633
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4634
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4635
  %3 = load i64, i64* %d.addr, align 8, !dbg !4636
  %call = call i64 @mpz_div_qr_ui(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, i64 %3, i32 0), !dbg !4637
  ret i64 %call, !dbg !4638
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_tdiv_qr_ui(%struct.__mpz_struct* %q, %struct.__mpz_struct* %r, %struct.__mpz_struct* %n, i64 %d) #0 !dbg !4639 {
entry:
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !4640, metadata !DIExpression()), !dbg !4641
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !4642, metadata !DIExpression()), !dbg !4643
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4644, metadata !DIExpression()), !dbg !4645
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4646, metadata !DIExpression()), !dbg !4647
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4648
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4649
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4650
  %3 = load i64, i64* %d.addr, align 8, !dbg !4651
  %call = call i64 @mpz_div_qr_ui(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, i64 %3, i32 2), !dbg !4652
  ret i64 %call, !dbg !4653
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_cdiv_q_ui(%struct.__mpz_struct* %q, %struct.__mpz_struct* %n, i64 %d) #0 !dbg !4654 {
entry:
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !4657, metadata !DIExpression()), !dbg !4658
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4659, metadata !DIExpression()), !dbg !4660
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4661, metadata !DIExpression()), !dbg !4662
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4663
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4664
  %2 = load i64, i64* %d.addr, align 8, !dbg !4665
  %call = call i64 @mpz_div_qr_ui(%struct.__mpz_struct* %0, %struct.__mpz_struct* null, %struct.__mpz_struct* %1, i64 %2, i32 1), !dbg !4666
  ret i64 %call, !dbg !4667
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_fdiv_q_ui(%struct.__mpz_struct* %q, %struct.__mpz_struct* %n, i64 %d) #0 !dbg !4668 {
entry:
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !4669, metadata !DIExpression()), !dbg !4670
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4671, metadata !DIExpression()), !dbg !4672
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4673, metadata !DIExpression()), !dbg !4674
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4675
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4676
  %2 = load i64, i64* %d.addr, align 8, !dbg !4677
  %call = call i64 @mpz_div_qr_ui(%struct.__mpz_struct* %0, %struct.__mpz_struct* null, %struct.__mpz_struct* %1, i64 %2, i32 0), !dbg !4678
  ret i64 %call, !dbg !4679
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_tdiv_q_ui(%struct.__mpz_struct* %q, %struct.__mpz_struct* %n, i64 %d) #0 !dbg !4680 {
entry:
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !4681, metadata !DIExpression()), !dbg !4682
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4683, metadata !DIExpression()), !dbg !4684
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4685, metadata !DIExpression()), !dbg !4686
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4687
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4688
  %2 = load i64, i64* %d.addr, align 8, !dbg !4689
  %call = call i64 @mpz_div_qr_ui(%struct.__mpz_struct* %0, %struct.__mpz_struct* null, %struct.__mpz_struct* %1, i64 %2, i32 2), !dbg !4690
  ret i64 %call, !dbg !4691
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_cdiv_r_ui(%struct.__mpz_struct* %r, %struct.__mpz_struct* %n, i64 %d) #0 !dbg !4692 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !4693, metadata !DIExpression()), !dbg !4694
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4695, metadata !DIExpression()), !dbg !4696
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4697, metadata !DIExpression()), !dbg !4698
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4699
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4700
  %2 = load i64, i64* %d.addr, align 8, !dbg !4701
  %call = call i64 @mpz_div_qr_ui(%struct.__mpz_struct* null, %struct.__mpz_struct* %0, %struct.__mpz_struct* %1, i64 %2, i32 1), !dbg !4702
  ret i64 %call, !dbg !4703
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_fdiv_r_ui(%struct.__mpz_struct* %r, %struct.__mpz_struct* %n, i64 %d) #0 !dbg !4704 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !4705, metadata !DIExpression()), !dbg !4706
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4707, metadata !DIExpression()), !dbg !4708
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4709, metadata !DIExpression()), !dbg !4710
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4711
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4712
  %2 = load i64, i64* %d.addr, align 8, !dbg !4713
  %call = call i64 @mpz_div_qr_ui(%struct.__mpz_struct* null, %struct.__mpz_struct* %0, %struct.__mpz_struct* %1, i64 %2, i32 0), !dbg !4714
  ret i64 %call, !dbg !4715
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_tdiv_r_ui(%struct.__mpz_struct* %r, %struct.__mpz_struct* %n, i64 %d) #0 !dbg !4716 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !4717, metadata !DIExpression()), !dbg !4718
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4719, metadata !DIExpression()), !dbg !4720
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4721, metadata !DIExpression()), !dbg !4722
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4723
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4724
  %2 = load i64, i64* %d.addr, align 8, !dbg !4725
  %call = call i64 @mpz_div_qr_ui(%struct.__mpz_struct* null, %struct.__mpz_struct* %0, %struct.__mpz_struct* %1, i64 %2, i32 2), !dbg !4726
  ret i64 %call, !dbg !4727
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_cdiv_ui(%struct.__mpz_struct* %n, i64 %d) #0 !dbg !4728 {
entry:
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4731, metadata !DIExpression()), !dbg !4732
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4733, metadata !DIExpression()), !dbg !4734
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4735
  %1 = load i64, i64* %d.addr, align 8, !dbg !4736
  %call = call i64 @mpz_div_qr_ui(%struct.__mpz_struct* null, %struct.__mpz_struct* null, %struct.__mpz_struct* %0, i64 %1, i32 1), !dbg !4737
  ret i64 %call, !dbg !4738
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_fdiv_ui(%struct.__mpz_struct* %n, i64 %d) #0 !dbg !4739 {
entry:
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4740, metadata !DIExpression()), !dbg !4741
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4742, metadata !DIExpression()), !dbg !4743
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4744
  %1 = load i64, i64* %d.addr, align 8, !dbg !4745
  %call = call i64 @mpz_div_qr_ui(%struct.__mpz_struct* null, %struct.__mpz_struct* null, %struct.__mpz_struct* %0, i64 %1, i32 0), !dbg !4746
  ret i64 %call, !dbg !4747
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_tdiv_ui(%struct.__mpz_struct* %n, i64 %d) #0 !dbg !4748 {
entry:
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4749, metadata !DIExpression()), !dbg !4750
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4751, metadata !DIExpression()), !dbg !4752
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4753
  %1 = load i64, i64* %d.addr, align 8, !dbg !4754
  %call = call i64 @mpz_div_qr_ui(%struct.__mpz_struct* null, %struct.__mpz_struct* null, %struct.__mpz_struct* %0, i64 %1, i32 2), !dbg !4755
  ret i64 %call, !dbg !4756
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_mod_ui(%struct.__mpz_struct* %r, %struct.__mpz_struct* %n, i64 %d) #0 !dbg !4757 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !4758, metadata !DIExpression()), !dbg !4759
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4760, metadata !DIExpression()), !dbg !4761
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4762, metadata !DIExpression()), !dbg !4763
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !4764
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4765
  %2 = load i64, i64* %d.addr, align 8, !dbg !4766
  %call = call i64 @mpz_div_qr_ui(%struct.__mpz_struct* null, %struct.__mpz_struct* %0, %struct.__mpz_struct* %1, i64 %2, i32 0), !dbg !4767
  ret i64 %call, !dbg !4768
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_divexact_ui(%struct.__mpz_struct* %q, %struct.__mpz_struct* %n, i64 %d) #0 !dbg !4769 {
entry:
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  %__cy = alloca i64, align 8
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !4770, metadata !DIExpression()), !dbg !4771
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4772, metadata !DIExpression()), !dbg !4773
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4774, metadata !DIExpression()), !dbg !4775
  br label %do.body, !dbg !4776

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %__cy, metadata !4777, metadata !DIExpression()), !dbg !4779
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !4779
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4779
  %2 = load i64, i64* %d.addr, align 8, !dbg !4779
  %call = call i64 @mpz_div_qr_ui(%struct.__mpz_struct* %0, %struct.__mpz_struct* null, %struct.__mpz_struct* %1, i64 %2, i32 2), !dbg !4779
  store i64 %call, i64* %__cy, align 8, !dbg !4779
  br label %do.end, !dbg !4779

do.end:                                           ; preds = %do.body
  ret void, !dbg !4780
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_divisible_ui_p(%struct.__mpz_struct* %n, i64 %d) #0 !dbg !4781 {
entry:
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %d.addr = alloca i64, align 8
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !4782, metadata !DIExpression()), !dbg !4783
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4784, metadata !DIExpression()), !dbg !4785
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !4786
  %1 = load i64, i64* %d.addr, align 8, !dbg !4787
  %call = call i64 @mpz_div_qr_ui(%struct.__mpz_struct* null, %struct.__mpz_struct* null, %struct.__mpz_struct* %0, i64 %1, i32 2), !dbg !4788
  %cmp = icmp eq i64 %call, 0, !dbg !4789
  %conv = zext i1 %cmp to i32, !dbg !4789
  ret i32 %conv, !dbg !4790
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_gcd_ui(%struct.__mpz_struct* %g, %struct.__mpz_struct* %u, i64 %v) #0 !dbg !4791 {
entry:
  %g.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca i64, align 8
  %un = alloca i64, align 8
  store %struct.__mpz_struct* %g, %struct.__mpz_struct** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %g.addr, metadata !4792, metadata !DIExpression()), !dbg !4793
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !4794, metadata !DIExpression()), !dbg !4795
  store i64 %v, i64* %v.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %v.addr, metadata !4796, metadata !DIExpression()), !dbg !4797
  call void @llvm.dbg.declare(metadata i64* %un, metadata !4798, metadata !DIExpression()), !dbg !4799
  %0 = load i64, i64* %v.addr, align 8, !dbg !4800
  %cmp = icmp eq i64 %0, 0, !dbg !4802
  br i1 %cmp, label %if.then, label %if.else, !dbg !4803

if.then:                                          ; preds = %entry
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %g.addr, align 8, !dbg !4804
  %tobool = icmp ne %struct.__mpz_struct* %1, null, !dbg !4804
  br i1 %tobool, label %if.then1, label %if.end, !dbg !4807

if.then1:                                         ; preds = %if.then
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %g.addr, align 8, !dbg !4808
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4809
  call void @mpz_abs(%struct.__mpz_struct* %2, %struct.__mpz_struct* %3), !dbg !4810
  br label %if.end, !dbg !4810

if.end:                                           ; preds = %if.then1, %if.then
  br label %if.end13, !dbg !4811

if.else:                                          ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4812
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !4812
  %5 = load i32, i32* %_mp_size, align 4, !dbg !4812
  %cmp2 = icmp sge i32 %5, 0, !dbg !4812
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !4812

cond.true:                                        ; preds = %if.else
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4812
  %_mp_size3 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 1, !dbg !4812
  %7 = load i32, i32* %_mp_size3, align 4, !dbg !4812
  br label %cond.end, !dbg !4812

cond.false:                                       ; preds = %if.else
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4812
  %_mp_size4 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 1, !dbg !4812
  %9 = load i32, i32* %_mp_size4, align 4, !dbg !4812
  %sub = sub nsw i32 0, %9, !dbg !4812
  br label %cond.end, !dbg !4812

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %7, %cond.true ], [ %sub, %cond.false ], !dbg !4812
  %conv = sext i32 %cond to i64, !dbg !4812
  store i64 %conv, i64* %un, align 8, !dbg !4814
  %10 = load i64, i64* %un, align 8, !dbg !4815
  %cmp5 = icmp ne i64 %10, 0, !dbg !4817
  br i1 %cmp5, label %if.then7, label %if.end9, !dbg !4818

if.then7:                                         ; preds = %cond.end
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !4819
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %11, i32 0, i32 2, !dbg !4820
  %12 = load i64*, i64** %_mp_d, align 8, !dbg !4820
  %13 = load i64, i64* %un, align 8, !dbg !4821
  %14 = load i64, i64* %v.addr, align 8, !dbg !4822
  %call = call i64 @mpn_div_qr_1(i64* null, i64* %12, i64 %13, i64 %14), !dbg !4823
  %15 = load i64, i64* %v.addr, align 8, !dbg !4824
  %call8 = call i64 @mpn_gcd_11(i64 %call, i64 %15), !dbg !4825
  store i64 %call8, i64* %v.addr, align 8, !dbg !4826
  br label %if.end9, !dbg !4827

if.end9:                                          ; preds = %if.then7, %cond.end
  %16 = load %struct.__mpz_struct*, %struct.__mpz_struct** %g.addr, align 8, !dbg !4828
  %tobool10 = icmp ne %struct.__mpz_struct* %16, null, !dbg !4828
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !4830

if.then11:                                        ; preds = %if.end9
  %17 = load %struct.__mpz_struct*, %struct.__mpz_struct** %g.addr, align 8, !dbg !4831
  %18 = load i64, i64* %v.addr, align 8, !dbg !4832
  call void @mpz_set_ui(%struct.__mpz_struct* %17, i64 %18), !dbg !4833
  br label %if.end12, !dbg !4833

if.end12:                                         ; preds = %if.then11, %if.end9
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  %19 = load i64, i64* %v.addr, align 8, !dbg !4834
  ret i64 %19, !dbg !4835
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpn_gcd_11(i64 %u, i64 %v) #0 !dbg !4836 {
entry:
  %retval = alloca i64, align 8
  %u.addr = alloca i64, align 8
  %v.addr = alloca i64, align 8
  %shift = alloca i32, align 4
  %__ctz_x = alloca i64, align 8
  %__ctz_c = alloca i32, align 4
  %__clz_x = alloca i64, align 8
  %__clz_c = alloca i32, align 4
  %__mp_limb_t_swap__tmp = alloca i64, align 8
  store i64 %u, i64* %u.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %u.addr, metadata !4837, metadata !DIExpression()), !dbg !4838
  store i64 %v, i64* %v.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %v.addr, metadata !4839, metadata !DIExpression()), !dbg !4840
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !4841, metadata !DIExpression()), !dbg !4842
  %0 = load i64, i64* %u.addr, align 8, !dbg !4843
  %cmp = icmp eq i64 %0, 0, !dbg !4845
  br i1 %cmp, label %if.then, label %if.else, !dbg !4846

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %v.addr, align 8, !dbg !4847
  store i64 %1, i64* %retval, align 8, !dbg !4848
  br label %return, !dbg !4848

if.else:                                          ; preds = %entry
  %2 = load i64, i64* %v.addr, align 8, !dbg !4849
  %cmp1 = icmp eq i64 %2, 0, !dbg !4851
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !4852

if.then2:                                         ; preds = %if.else
  %3 = load i64, i64* %u.addr, align 8, !dbg !4853
  store i64 %3, i64* %retval, align 8, !dbg !4854
  br label %return, !dbg !4854

if.end:                                           ; preds = %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end
  br label %do.body, !dbg !4855

do.body:                                          ; preds = %if.end3
  call void @llvm.dbg.declare(metadata i64* %__ctz_x, metadata !4856, metadata !DIExpression()), !dbg !4858
  %4 = load i64, i64* %u.addr, align 8, !dbg !4858
  %5 = load i64, i64* %v.addr, align 8, !dbg !4858
  %or = or i64 %4, %5, !dbg !4858
  store i64 %or, i64* %__ctz_x, align 8, !dbg !4858
  call void @llvm.dbg.declare(metadata i32* %__ctz_c, metadata !4859, metadata !DIExpression()), !dbg !4858
  store i32 0, i32* %__ctz_c, align 4, !dbg !4858
  br label %do.body4, !dbg !4858

do.body4:                                         ; preds = %do.body
  call void @llvm.dbg.declare(metadata i64* %__clz_x, metadata !4860, metadata !DIExpression()), !dbg !4862
  %6 = load i64, i64* %__ctz_x, align 8, !dbg !4862
  %7 = load i64, i64* %__ctz_x, align 8, !dbg !4862
  %sub = sub i64 0, %7, !dbg !4862
  %and = and i64 %6, %sub, !dbg !4862
  store i64 %and, i64* %__clz_x, align 8, !dbg !4862
  call void @llvm.dbg.declare(metadata i32* %__clz_c, metadata !4863, metadata !DIExpression()), !dbg !4862
  store i32 0, i32* %__clz_c, align 4, !dbg !4864
  br label %for.cond, !dbg !4864

for.cond:                                         ; preds = %for.inc, %do.body4
  %8 = load i64, i64* %__clz_x, align 8, !dbg !4866
  %and5 = and i64 %8, -72057594037927936, !dbg !4866
  %cmp6 = icmp eq i64 %and5, 0, !dbg !4866
  br i1 %cmp6, label %for.body, label %for.end, !dbg !4864

for.body:                                         ; preds = %for.cond
  %9 = load i64, i64* %__clz_x, align 8, !dbg !4866
  %shl = shl i64 %9, 8, !dbg !4866
  store i64 %shl, i64* %__clz_x, align 8, !dbg !4866
  br label %for.inc, !dbg !4866

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %__clz_c, align 4, !dbg !4866
  %add = add i32 %10, 8, !dbg !4866
  store i32 %add, i32* %__clz_c, align 4, !dbg !4866
  br label %for.cond, !dbg !4866, !llvm.loop !4868

for.end:                                          ; preds = %for.cond
  br label %for.cond7, !dbg !4862

for.cond7:                                        ; preds = %for.inc12, %for.end
  %11 = load i64, i64* %__clz_x, align 8, !dbg !4869
  %and8 = and i64 %11, -9223372036854775808, !dbg !4869
  %cmp9 = icmp eq i64 %and8, 0, !dbg !4869
  br i1 %cmp9, label %for.body10, label %for.end13, !dbg !4872

for.body10:                                       ; preds = %for.cond7
  %12 = load i64, i64* %__clz_x, align 8, !dbg !4869
  %shl11 = shl i64 %12, 1, !dbg !4869
  store i64 %shl11, i64* %__clz_x, align 8, !dbg !4869
  br label %for.inc12, !dbg !4869

for.inc12:                                        ; preds = %for.body10
  %13 = load i32, i32* %__clz_c, align 4, !dbg !4869
  %inc = add i32 %13, 1, !dbg !4869
  store i32 %inc, i32* %__clz_c, align 4, !dbg !4869
  br label %for.cond7, !dbg !4869, !llvm.loop !4873

for.end13:                                        ; preds = %for.cond7
  %14 = load i32, i32* %__clz_c, align 4, !dbg !4862
  store i32 %14, i32* %__ctz_c, align 4, !dbg !4862
  br label %do.end, !dbg !4862

do.end:                                           ; preds = %for.end13
  %15 = load i32, i32* %__ctz_c, align 4, !dbg !4858
  %conv = zext i32 %15 to i64, !dbg !4858
  %sub14 = sub i64 63, %conv, !dbg !4858
  %conv15 = trunc i64 %sub14 to i32, !dbg !4858
  store i32 %conv15, i32* %shift, align 4, !dbg !4858
  br label %do.end16, !dbg !4858

do.end16:                                         ; preds = %do.end
  %16 = load i32, i32* %shift, align 4, !dbg !4874
  %17 = load i64, i64* %u.addr, align 8, !dbg !4875
  %sh_prom = zext i32 %16 to i64, !dbg !4875
  %shr = lshr i64 %17, %sh_prom, !dbg !4875
  store i64 %shr, i64* %u.addr, align 8, !dbg !4875
  %18 = load i32, i32* %shift, align 4, !dbg !4876
  %19 = load i64, i64* %v.addr, align 8, !dbg !4877
  %sh_prom17 = zext i32 %18 to i64, !dbg !4877
  %shr18 = lshr i64 %19, %sh_prom17, !dbg !4877
  store i64 %shr18, i64* %v.addr, align 8, !dbg !4877
  %20 = load i64, i64* %u.addr, align 8, !dbg !4878
  %and19 = and i64 %20, 1, !dbg !4880
  %cmp20 = icmp eq i64 %and19, 0, !dbg !4881
  br i1 %cmp20, label %if.then22, label %if.end25, !dbg !4882

if.then22:                                        ; preds = %do.end16
  br label %do.body23, !dbg !4883

do.body23:                                        ; preds = %if.then22
  call void @llvm.dbg.declare(metadata i64* %__mp_limb_t_swap__tmp, metadata !4884, metadata !DIExpression()), !dbg !4886
  %21 = load i64, i64* %u.addr, align 8, !dbg !4886
  store i64 %21, i64* %__mp_limb_t_swap__tmp, align 8, !dbg !4886
  %22 = load i64, i64* %v.addr, align 8, !dbg !4886
  store i64 %22, i64* %u.addr, align 8, !dbg !4886
  %23 = load i64, i64* %__mp_limb_t_swap__tmp, align 8, !dbg !4886
  store i64 %23, i64* %v.addr, align 8, !dbg !4886
  br label %do.end24, !dbg !4886

do.end24:                                         ; preds = %do.body23
  br label %if.end25, !dbg !4886

if.end25:                                         ; preds = %do.end24, %do.end16
  br label %while.cond, !dbg !4887

while.cond:                                       ; preds = %while.body, %if.end25
  %24 = load i64, i64* %v.addr, align 8, !dbg !4888
  %and26 = and i64 %24, 1, !dbg !4889
  %cmp27 = icmp eq i64 %and26, 0, !dbg !4890
  br i1 %cmp27, label %while.body, label %while.end, !dbg !4887

while.body:                                       ; preds = %while.cond
  %25 = load i64, i64* %v.addr, align 8, !dbg !4891
  %shr29 = lshr i64 %25, 1, !dbg !4891
  store i64 %shr29, i64* %v.addr, align 8, !dbg !4891
  br label %while.cond, !dbg !4887, !llvm.loop !4892

while.end:                                        ; preds = %while.cond
  br label %while.cond30, !dbg !4894

while.cond30:                                     ; preds = %if.end53, %while.end
  %26 = load i64, i64* %u.addr, align 8, !dbg !4895
  %27 = load i64, i64* %v.addr, align 8, !dbg !4896
  %cmp31 = icmp ne i64 %26, %27, !dbg !4897
  br i1 %cmp31, label %while.body33, label %while.end54, !dbg !4894

while.body33:                                     ; preds = %while.cond30
  %28 = load i64, i64* %u.addr, align 8, !dbg !4898
  %29 = load i64, i64* %v.addr, align 8, !dbg !4901
  %cmp34 = icmp ugt i64 %28, %29, !dbg !4902
  br i1 %cmp34, label %if.then36, label %if.else44, !dbg !4903

if.then36:                                        ; preds = %while.body33
  %30 = load i64, i64* %v.addr, align 8, !dbg !4904
  %31 = load i64, i64* %u.addr, align 8, !dbg !4906
  %sub37 = sub i64 %31, %30, !dbg !4906
  store i64 %sub37, i64* %u.addr, align 8, !dbg !4906
  br label %do.body38, !dbg !4907

do.body38:                                        ; preds = %do.cond, %if.then36
  %32 = load i64, i64* %u.addr, align 8, !dbg !4908
  %shr39 = lshr i64 %32, 1, !dbg !4908
  store i64 %shr39, i64* %u.addr, align 8, !dbg !4908
  br label %do.cond, !dbg !4909

do.cond:                                          ; preds = %do.body38
  %33 = load i64, i64* %u.addr, align 8, !dbg !4910
  %and40 = and i64 %33, 1, !dbg !4911
  %cmp41 = icmp eq i64 %and40, 0, !dbg !4912
  br i1 %cmp41, label %do.body38, label %do.end43, !dbg !4909, !llvm.loop !4913

do.end43:                                         ; preds = %do.cond
  br label %if.end53, !dbg !4915

if.else44:                                        ; preds = %while.body33
  %34 = load i64, i64* %u.addr, align 8, !dbg !4916
  %35 = load i64, i64* %v.addr, align 8, !dbg !4918
  %sub45 = sub i64 %35, %34, !dbg !4918
  store i64 %sub45, i64* %v.addr, align 8, !dbg !4918
  br label %do.body46, !dbg !4919

do.body46:                                        ; preds = %do.cond48, %if.else44
  %36 = load i64, i64* %v.addr, align 8, !dbg !4920
  %shr47 = lshr i64 %36, 1, !dbg !4920
  store i64 %shr47, i64* %v.addr, align 8, !dbg !4920
  br label %do.cond48, !dbg !4921

do.cond48:                                        ; preds = %do.body46
  %37 = load i64, i64* %v.addr, align 8, !dbg !4922
  %and49 = and i64 %37, 1, !dbg !4923
  %cmp50 = icmp eq i64 %and49, 0, !dbg !4924
  br i1 %cmp50, label %do.body46, label %do.end52, !dbg !4921, !llvm.loop !4925

do.end52:                                         ; preds = %do.cond48
  br label %if.end53

if.end53:                                         ; preds = %do.end52, %do.end43
  br label %while.cond30, !dbg !4894, !llvm.loop !4927

while.end54:                                      ; preds = %while.cond30
  %38 = load i64, i64* %u.addr, align 8, !dbg !4929
  %39 = load i32, i32* %shift, align 4, !dbg !4930
  %sh_prom55 = zext i32 %39 to i64, !dbg !4931
  %shl56 = shl i64 %38, %sh_prom55, !dbg !4931
  store i64 %shl56, i64* %retval, align 8, !dbg !4932
  br label %return, !dbg !4932

return:                                           ; preds = %while.end54, %if.then2, %if.then
  %40 = load i64, i64* %retval, align 8, !dbg !4933
  ret i64 %40, !dbg !4933
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpn_div_qr_1(i64* %qp, i64* %np, i64 %nn, i64 %d) #0 !dbg !4934 {
entry:
  %retval = alloca i64, align 8
  %qp.addr = alloca i64*, align 8
  %np.addr = alloca i64*, align 8
  %nn.addr = alloca i64, align 8
  %d.addr = alloca i64, align 8
  %r = alloca i64, align 8
  %shift = alloca i32, align 4
  %__ctz_x = alloca i64, align 8
  %__ctz_c = alloca i32, align 4
  %__clz_x = alloca i64, align 8
  %__clz_c = alloca i32, align 4
  %inv = alloca %struct.gmp_div_inverse, align 8
  store i64* %qp, i64** %qp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %qp.addr, metadata !4935, metadata !DIExpression()), !dbg !4936
  store i64* %np, i64** %np.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %np.addr, metadata !4937, metadata !DIExpression()), !dbg !4938
  store i64 %nn, i64* %nn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nn.addr, metadata !4939, metadata !DIExpression()), !dbg !4940
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !4941, metadata !DIExpression()), !dbg !4942
  %0 = load i64, i64* %d.addr, align 8, !dbg !4943
  %1 = load i64, i64* %d.addr, align 8, !dbg !4945
  %sub = sub i64 %1, 1, !dbg !4946
  %and = and i64 %0, %sub, !dbg !4947
  %cmp = icmp eq i64 %and, 0, !dbg !4948
  br i1 %cmp, label %if.then, label %if.else22, !dbg !4949

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %r, metadata !4950, metadata !DIExpression()), !dbg !4952
  %2 = load i64*, i64** %np.addr, align 8, !dbg !4953
  %arrayidx = getelementptr inbounds i64, i64* %2, i64 0, !dbg !4953
  %3 = load i64, i64* %arrayidx, align 8, !dbg !4953
  %4 = load i64, i64* %d.addr, align 8, !dbg !4954
  %sub1 = sub i64 %4, 1, !dbg !4955
  %and2 = and i64 %3, %sub1, !dbg !4956
  store i64 %and2, i64* %r, align 8, !dbg !4952
  %5 = load i64*, i64** %qp.addr, align 8, !dbg !4957
  %tobool = icmp ne i64* %5, null, !dbg !4957
  br i1 %tobool, label %if.then3, label %if.end21, !dbg !4959

if.then3:                                         ; preds = %if.then
  %6 = load i64, i64* %d.addr, align 8, !dbg !4960
  %cmp4 = icmp ule i64 %6, 1, !dbg !4963
  br i1 %cmp4, label %if.then5, label %if.else, !dbg !4964

if.then5:                                         ; preds = %if.then3
  %7 = load i64*, i64** %qp.addr, align 8, !dbg !4965
  %8 = load i64*, i64** %np.addr, align 8, !dbg !4966
  %9 = load i64, i64* %nn.addr, align 8, !dbg !4967
  call void @mpn_copyi(i64* %7, i64* %8, i64 %9), !dbg !4968
  br label %if.end, !dbg !4968

if.else:                                          ; preds = %if.then3
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !4969, metadata !DIExpression()), !dbg !4971
  br label %do.body, !dbg !4972

do.body:                                          ; preds = %if.else
  call void @llvm.dbg.declare(metadata i64* %__ctz_x, metadata !4973, metadata !DIExpression()), !dbg !4975
  %10 = load i64, i64* %d.addr, align 8, !dbg !4975
  store i64 %10, i64* %__ctz_x, align 8, !dbg !4975
  call void @llvm.dbg.declare(metadata i32* %__ctz_c, metadata !4976, metadata !DIExpression()), !dbg !4975
  store i32 0, i32* %__ctz_c, align 4, !dbg !4975
  br label %do.body6, !dbg !4975

do.body6:                                         ; preds = %do.body
  call void @llvm.dbg.declare(metadata i64* %__clz_x, metadata !4977, metadata !DIExpression()), !dbg !4979
  %11 = load i64, i64* %__ctz_x, align 8, !dbg !4979
  %12 = load i64, i64* %__ctz_x, align 8, !dbg !4979
  %sub7 = sub i64 0, %12, !dbg !4979
  %and8 = and i64 %11, %sub7, !dbg !4979
  store i64 %and8, i64* %__clz_x, align 8, !dbg !4979
  call void @llvm.dbg.declare(metadata i32* %__clz_c, metadata !4980, metadata !DIExpression()), !dbg !4979
  store i32 0, i32* %__clz_c, align 4, !dbg !4981
  br label %for.cond, !dbg !4981

for.cond:                                         ; preds = %for.inc, %do.body6
  %13 = load i64, i64* %__clz_x, align 8, !dbg !4983
  %and9 = and i64 %13, -72057594037927936, !dbg !4983
  %cmp10 = icmp eq i64 %and9, 0, !dbg !4983
  br i1 %cmp10, label %for.body, label %for.end, !dbg !4981

for.body:                                         ; preds = %for.cond
  %14 = load i64, i64* %__clz_x, align 8, !dbg !4983
  %shl = shl i64 %14, 8, !dbg !4983
  store i64 %shl, i64* %__clz_x, align 8, !dbg !4983
  br label %for.inc, !dbg !4983

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %__clz_c, align 4, !dbg !4983
  %add = add i32 %15, 8, !dbg !4983
  store i32 %add, i32* %__clz_c, align 4, !dbg !4983
  br label %for.cond, !dbg !4983, !llvm.loop !4985

for.end:                                          ; preds = %for.cond
  br label %for.cond11, !dbg !4979

for.cond11:                                       ; preds = %for.inc16, %for.end
  %16 = load i64, i64* %__clz_x, align 8, !dbg !4986
  %and12 = and i64 %16, -9223372036854775808, !dbg !4986
  %cmp13 = icmp eq i64 %and12, 0, !dbg !4986
  br i1 %cmp13, label %for.body14, label %for.end17, !dbg !4989

for.body14:                                       ; preds = %for.cond11
  %17 = load i64, i64* %__clz_x, align 8, !dbg !4986
  %shl15 = shl i64 %17, 1, !dbg !4986
  store i64 %shl15, i64* %__clz_x, align 8, !dbg !4986
  br label %for.inc16, !dbg !4986

for.inc16:                                        ; preds = %for.body14
  %18 = load i32, i32* %__clz_c, align 4, !dbg !4986
  %inc = add i32 %18, 1, !dbg !4986
  store i32 %inc, i32* %__clz_c, align 4, !dbg !4986
  br label %for.cond11, !dbg !4986, !llvm.loop !4990

for.end17:                                        ; preds = %for.cond11
  %19 = load i32, i32* %__clz_c, align 4, !dbg !4979
  store i32 %19, i32* %__ctz_c, align 4, !dbg !4979
  br label %do.end, !dbg !4979

do.end:                                           ; preds = %for.end17
  %20 = load i32, i32* %__ctz_c, align 4, !dbg !4975
  %conv = zext i32 %20 to i64, !dbg !4975
  %sub18 = sub i64 63, %conv, !dbg !4975
  %conv19 = trunc i64 %sub18 to i32, !dbg !4975
  store i32 %conv19, i32* %shift, align 4, !dbg !4975
  br label %do.end20, !dbg !4975

do.end20:                                         ; preds = %do.end
  %21 = load i64*, i64** %qp.addr, align 8, !dbg !4991
  %22 = load i64*, i64** %np.addr, align 8, !dbg !4992
  %23 = load i64, i64* %nn.addr, align 8, !dbg !4993
  %24 = load i32, i32* %shift, align 4, !dbg !4994
  %call = call i64 @mpn_rshift(i64* %21, i64* %22, i64 %23, i32 %24), !dbg !4995
  br label %if.end

if.end:                                           ; preds = %do.end20, %if.then5
  br label %if.end21, !dbg !4996

if.end21:                                         ; preds = %if.end, %if.then
  %25 = load i64, i64* %r, align 8, !dbg !4997
  store i64 %25, i64* %retval, align 8, !dbg !4998
  br label %return, !dbg !4998

if.else22:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.gmp_div_inverse* %inv, metadata !4999, metadata !DIExpression()), !dbg !5001
  %26 = load i64, i64* %d.addr, align 8, !dbg !5002
  call void @mpn_div_qr_1_invert(%struct.gmp_div_inverse* %inv, i64 %26), !dbg !5003
  %27 = load i64*, i64** %qp.addr, align 8, !dbg !5004
  %28 = load i64*, i64** %np.addr, align 8, !dbg !5005
  %29 = load i64, i64* %nn.addr, align 8, !dbg !5006
  %call23 = call i64 @mpn_div_qr_1_preinv(i64* %27, i64* %28, i64 %29, %struct.gmp_div_inverse* %inv), !dbg !5007
  store i64 %call23, i64* %retval, align 8, !dbg !5008
  br label %return, !dbg !5008

return:                                           ; preds = %if.else22, %if.end21
  %30 = load i64, i64* %retval, align 8, !dbg !5009
  ret i64 %30, !dbg !5009
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_gcd(%struct.__mpz_struct* %g, %struct.__mpz_struct* %u, %struct.__mpz_struct* %v) #0 !dbg !5010 {
entry:
  %g.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca %struct.__mpz_struct*, align 8
  %tu = alloca [1 x %struct.__mpz_struct], align 16
  %tv = alloca [1 x %struct.__mpz_struct], align 16
  %uz = alloca i64, align 8
  %vz = alloca i64, align 8
  %gz = alloca i64, align 8
  %c = alloca i32, align 4
  %vl = alloca i64, align 8
  %ul = alloca i64, align 8
  store %struct.__mpz_struct* %g, %struct.__mpz_struct** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %g.addr, metadata !5011, metadata !DIExpression()), !dbg !5012
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !5013, metadata !DIExpression()), !dbg !5014
  store %struct.__mpz_struct* %v, %struct.__mpz_struct** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %v.addr, metadata !5015, metadata !DIExpression()), !dbg !5016
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %tu, metadata !5017, metadata !DIExpression()), !dbg !5018
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %tv, metadata !5019, metadata !DIExpression()), !dbg !5020
  call void @llvm.dbg.declare(metadata i64* %uz, metadata !5021, metadata !DIExpression()), !dbg !5022
  call void @llvm.dbg.declare(metadata i64* %vz, metadata !5023, metadata !DIExpression()), !dbg !5024
  call void @llvm.dbg.declare(metadata i64* %gz, metadata !5025, metadata !DIExpression()), !dbg !5026
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5027
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !5029
  %1 = load i32, i32* %_mp_size, align 4, !dbg !5029
  %cmp = icmp eq i32 %1, 0, !dbg !5030
  br i1 %cmp, label %if.then, label %if.end, !dbg !5031

if.then:                                          ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %g.addr, align 8, !dbg !5032
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !5034
  call void @mpz_abs(%struct.__mpz_struct* %2, %struct.__mpz_struct* %3), !dbg !5035
  br label %return, !dbg !5036

if.end:                                           ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !5037
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !5039
  %5 = load i32, i32* %_mp_size1, align 4, !dbg !5039
  %cmp2 = icmp eq i32 %5, 0, !dbg !5040
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !5041

if.then3:                                         ; preds = %if.end
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %g.addr, align 8, !dbg !5042
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5044
  call void @mpz_abs(%struct.__mpz_struct* %6, %struct.__mpz_struct* %7), !dbg !5045
  br label %return, !dbg !5046

if.end4:                                          ; preds = %if.end
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5047
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !5048
  %arraydecay5 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5049
  call void @mpz_init(%struct.__mpz_struct* %arraydecay5), !dbg !5050
  %arraydecay6 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5051
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5052
  call void @mpz_abs(%struct.__mpz_struct* %arraydecay6, %struct.__mpz_struct* %8), !dbg !5053
  %arraydecay7 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5054
  %call = call i64 @mpz_make_odd(%struct.__mpz_struct* %arraydecay7), !dbg !5055
  store i64 %call, i64* %uz, align 8, !dbg !5056
  %arraydecay8 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5057
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !5058
  call void @mpz_abs(%struct.__mpz_struct* %arraydecay8, %struct.__mpz_struct* %9), !dbg !5059
  %arraydecay9 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5060
  %call10 = call i64 @mpz_make_odd(%struct.__mpz_struct* %arraydecay9), !dbg !5061
  store i64 %call10, i64* %vz, align 8, !dbg !5062
  %10 = load i64, i64* %uz, align 8, !dbg !5063
  %11 = load i64, i64* %vz, align 8, !dbg !5063
  %cmp11 = icmp ult i64 %10, %11, !dbg !5063
  br i1 %cmp11, label %cond.true, label %cond.false, !dbg !5063

cond.true:                                        ; preds = %if.end4
  %12 = load i64, i64* %uz, align 8, !dbg !5063
  br label %cond.end, !dbg !5063

cond.false:                                       ; preds = %if.end4
  %13 = load i64, i64* %vz, align 8, !dbg !5063
  br label %cond.end, !dbg !5063

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %12, %cond.true ], [ %13, %cond.false ], !dbg !5063
  store i64 %cond, i64* %gz, align 8, !dbg !5064
  %arraydecay12 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5065
  %_mp_size13 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay12, i32 0, i32 1, !dbg !5065
  %14 = load i32, i32* %_mp_size13, align 4, !dbg !5065
  %arraydecay14 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5067
  %_mp_size15 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay14, i32 0, i32 1, !dbg !5067
  %15 = load i32, i32* %_mp_size15, align 4, !dbg !5067
  %cmp16 = icmp slt i32 %14, %15, !dbg !5068
  br i1 %cmp16, label %if.then17, label %if.end20, !dbg !5069

if.then17:                                        ; preds = %cond.end
  %arraydecay18 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5070
  %arraydecay19 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5071
  call void @mpz_swap(%struct.__mpz_struct* %arraydecay18, %struct.__mpz_struct* %arraydecay19), !dbg !5072
  br label %if.end20, !dbg !5072

if.end20:                                         ; preds = %if.then17, %cond.end
  %arraydecay21 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5073
  %arraydecay22 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5074
  %arraydecay23 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5075
  call void @mpz_tdiv_r(%struct.__mpz_struct* %arraydecay21, %struct.__mpz_struct* %arraydecay22, %struct.__mpz_struct* %arraydecay23), !dbg !5076
  %arraydecay24 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5077
  %_mp_size25 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay24, i32 0, i32 1, !dbg !5077
  %16 = load i32, i32* %_mp_size25, align 4, !dbg !5077
  %cmp26 = icmp eq i32 %16, 0, !dbg !5079
  br i1 %cmp26, label %if.then27, label %if.else, !dbg !5080

if.then27:                                        ; preds = %if.end20
  %17 = load %struct.__mpz_struct*, %struct.__mpz_struct** %g.addr, align 8, !dbg !5081
  %arraydecay28 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5083
  call void @mpz_swap(%struct.__mpz_struct* %17, %struct.__mpz_struct* %arraydecay28), !dbg !5084
  br label %if.end55, !dbg !5085

if.else:                                          ; preds = %if.end20
  br label %for.cond, !dbg !5086

for.cond:                                         ; preds = %if.end51, %if.else
  call void @llvm.dbg.declare(metadata i32* %c, metadata !5087, metadata !DIExpression()), !dbg !5091
  %arraydecay29 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5092
  %call30 = call i64 @mpz_make_odd(%struct.__mpz_struct* %arraydecay29), !dbg !5093
  %arraydecay31 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5094
  %arraydecay32 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5095
  %call33 = call i32 @mpz_cmp(%struct.__mpz_struct* %arraydecay31, %struct.__mpz_struct* %arraydecay32), !dbg !5096
  store i32 %call33, i32* %c, align 4, !dbg !5097
  %18 = load i32, i32* %c, align 4, !dbg !5098
  %cmp34 = icmp eq i32 %18, 0, !dbg !5100
  br i1 %cmp34, label %if.then35, label %if.end37, !dbg !5101

if.then35:                                        ; preds = %for.cond
  %19 = load %struct.__mpz_struct*, %struct.__mpz_struct** %g.addr, align 8, !dbg !5102
  %arraydecay36 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5104
  call void @mpz_swap(%struct.__mpz_struct* %19, %struct.__mpz_struct* %arraydecay36), !dbg !5105
  br label %for.end, !dbg !5106

if.end37:                                         ; preds = %for.cond
  %20 = load i32, i32* %c, align 4, !dbg !5107
  %cmp38 = icmp slt i32 %20, 0, !dbg !5109
  br i1 %cmp38, label %if.then39, label %if.end42, !dbg !5110

if.then39:                                        ; preds = %if.end37
  %arraydecay40 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5111
  %arraydecay41 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5112
  call void @mpz_swap(%struct.__mpz_struct* %arraydecay40, %struct.__mpz_struct* %arraydecay41), !dbg !5113
  br label %if.end42, !dbg !5113

if.end42:                                         ; preds = %if.then39, %if.end37
  %arraydecay43 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5114
  %_mp_size44 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay43, i32 0, i32 1, !dbg !5114
  %21 = load i32, i32* %_mp_size44, align 4, !dbg !5114
  %cmp45 = icmp eq i32 %21, 1, !dbg !5116
  br i1 %cmp45, label %if.then46, label %if.end51, !dbg !5117

if.then46:                                        ; preds = %if.end42
  call void @llvm.dbg.declare(metadata i64* %vl, metadata !5118, metadata !DIExpression()), !dbg !5120
  %arraydecay47 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5121
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay47, i32 0, i32 2, !dbg !5121
  %22 = load i64*, i64** %_mp_d, align 8, !dbg !5121
  %arrayidx = getelementptr inbounds i64, i64* %22, i64 0, !dbg !5122
  %23 = load i64, i64* %arrayidx, align 8, !dbg !5122
  store i64 %23, i64* %vl, align 8, !dbg !5120
  call void @llvm.dbg.declare(metadata i64* %ul, metadata !5123, metadata !DIExpression()), !dbg !5124
  %arraydecay48 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5125
  %24 = load i64, i64* %vl, align 8, !dbg !5126
  %call49 = call i64 @mpz_tdiv_ui(%struct.__mpz_struct* %arraydecay48, i64 %24), !dbg !5127
  store i64 %call49, i64* %ul, align 8, !dbg !5124
  %25 = load %struct.__mpz_struct*, %struct.__mpz_struct** %g.addr, align 8, !dbg !5128
  %26 = load i64, i64* %ul, align 8, !dbg !5129
  %27 = load i64, i64* %vl, align 8, !dbg !5130
  %call50 = call i64 @mpn_gcd_11(i64 %26, i64 %27), !dbg !5131
  call void @mpz_set_ui(%struct.__mpz_struct* %25, i64 %call50), !dbg !5132
  br label %for.end, !dbg !5133

if.end51:                                         ; preds = %if.end42
  %arraydecay52 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5134
  %arraydecay53 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5135
  %arraydecay54 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5136
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay52, %struct.__mpz_struct* %arraydecay53, %struct.__mpz_struct* %arraydecay54), !dbg !5137
  br label %for.cond, !dbg !5138, !llvm.loop !5139

for.end:                                          ; preds = %if.then46, %if.then35
  br label %if.end55

if.end55:                                         ; preds = %for.end, %if.then27
  %arraydecay56 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5142
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay56), !dbg !5143
  %arraydecay57 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5144
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay57), !dbg !5145
  %28 = load %struct.__mpz_struct*, %struct.__mpz_struct** %g.addr, align 8, !dbg !5146
  %29 = load %struct.__mpz_struct*, %struct.__mpz_struct** %g.addr, align 8, !dbg !5147
  %30 = load i64, i64* %gz, align 8, !dbg !5148
  call void @mpz_mul_2exp(%struct.__mpz_struct* %28, %struct.__mpz_struct* %29, i64 %30), !dbg !5149
  br label %return, !dbg !5150

return:                                           ; preds = %if.end55, %if.then3, %if.then
  ret void, !dbg !5150
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpz_make_odd(%struct.__mpz_struct* %r) #0 !dbg !5151 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %shift = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !5154, metadata !DIExpression()), !dbg !5155
  call void @llvm.dbg.declare(metadata i64* %shift, metadata !5156, metadata !DIExpression()), !dbg !5157
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5158
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 2, !dbg !5159
  %1 = load i64*, i64** %_mp_d, align 8, !dbg !5159
  %arrayidx = getelementptr inbounds i64, i64* %1, i64 0, !dbg !5158
  %2 = load i64, i64* %arrayidx, align 8, !dbg !5158
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5160
  %_mp_d1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %3, i32 0, i32 2, !dbg !5161
  %4 = load i64*, i64** %_mp_d1, align 8, !dbg !5161
  %call = call i64 @mpn_common_scan(i64 %2, i64 0, i64* %4, i64 0, i64 0), !dbg !5162
  store i64 %call, i64* %shift, align 8, !dbg !5163
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5164
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5165
  %7 = load i64, i64* %shift, align 8, !dbg !5166
  call void @mpz_tdiv_q_2exp(%struct.__mpz_struct* %5, %struct.__mpz_struct* %6, i64 %7), !dbg !5167
  %8 = load i64, i64* %shift, align 8, !dbg !5168
  ret i64 %8, !dbg !5169
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_gcdext(%struct.__mpz_struct* %g, %struct.__mpz_struct* %s, %struct.__mpz_struct* %t, %struct.__mpz_struct* %u, %struct.__mpz_struct* %v) #0 !dbg !5170 {
entry:
  %g.addr = alloca %struct.__mpz_struct*, align 8
  %s.addr = alloca %struct.__mpz_struct*, align 8
  %t.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca %struct.__mpz_struct*, align 8
  %tu = alloca [1 x %struct.__mpz_struct], align 16
  %tv = alloca [1 x %struct.__mpz_struct], align 16
  %s0 = alloca [1 x %struct.__mpz_struct], align 16
  %s1 = alloca [1 x %struct.__mpz_struct], align 16
  %t0 = alloca [1 x %struct.__mpz_struct], align 16
  %t1 = alloca [1 x %struct.__mpz_struct], align 16
  %uz = alloca i64, align 8
  %vz = alloca i64, align 8
  %gz = alloca i64, align 8
  %power = alloca i64, align 8
  %sign = alloca i64, align 8
  %sign10 = alloca i64, align 8
  %__mpz_srcptr_swap__tmp = alloca %struct.__mpz_struct*, align 8
  %__mpz_ptr_swap__tmp = alloca %struct.__mpz_struct*, align 8
  %__mp_bitcnt_t_swap__tmp = alloca i64, align 8
  %shift = alloca i64, align 8
  %c = alloca i32, align 4
  store %struct.__mpz_struct* %g, %struct.__mpz_struct** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %g.addr, metadata !5173, metadata !DIExpression()), !dbg !5174
  store %struct.__mpz_struct* %s, %struct.__mpz_struct** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %s.addr, metadata !5175, metadata !DIExpression()), !dbg !5176
  store %struct.__mpz_struct* %t, %struct.__mpz_struct** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %t.addr, metadata !5177, metadata !DIExpression()), !dbg !5178
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !5179, metadata !DIExpression()), !dbg !5180
  store %struct.__mpz_struct* %v, %struct.__mpz_struct** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %v.addr, metadata !5181, metadata !DIExpression()), !dbg !5182
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %tu, metadata !5183, metadata !DIExpression()), !dbg !5184
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %tv, metadata !5185, metadata !DIExpression()), !dbg !5186
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %s0, metadata !5187, metadata !DIExpression()), !dbg !5188
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %s1, metadata !5189, metadata !DIExpression()), !dbg !5190
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %t0, metadata !5191, metadata !DIExpression()), !dbg !5192
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %t1, metadata !5193, metadata !DIExpression()), !dbg !5194
  call void @llvm.dbg.declare(metadata i64* %uz, metadata !5195, metadata !DIExpression()), !dbg !5196
  call void @llvm.dbg.declare(metadata i64* %vz, metadata !5197, metadata !DIExpression()), !dbg !5198
  call void @llvm.dbg.declare(metadata i64* %gz, metadata !5199, metadata !DIExpression()), !dbg !5200
  call void @llvm.dbg.declare(metadata i64* %power, metadata !5201, metadata !DIExpression()), !dbg !5202
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5203
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !5205
  %1 = load i32, i32* %_mp_size, align 4, !dbg !5205
  %cmp = icmp eq i32 %1, 0, !dbg !5206
  br i1 %cmp, label %if.then, label %if.end5, !dbg !5207

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %sign, metadata !5208, metadata !DIExpression()), !dbg !5210
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !5211
  %call = call i32 @mpz_sgn(%struct.__mpz_struct* %2), !dbg !5212
  %conv = sext i32 %call to i64, !dbg !5212
  store i64 %conv, i64* %sign, align 8, !dbg !5210
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %g.addr, align 8, !dbg !5213
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !5214
  call void @mpz_abs(%struct.__mpz_struct* %3, %struct.__mpz_struct* %4), !dbg !5215
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %s.addr, align 8, !dbg !5216
  %tobool = icmp ne %struct.__mpz_struct* %5, null, !dbg !5216
  br i1 %tobool, label %if.then1, label %if.end, !dbg !5218

if.then1:                                         ; preds = %if.then
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %s.addr, align 8, !dbg !5219
  call void @mpz_set_ui(%struct.__mpz_struct* %6, i64 0), !dbg !5220
  br label %if.end, !dbg !5220

if.end:                                           ; preds = %if.then1, %if.then
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %t.addr, align 8, !dbg !5221
  %tobool2 = icmp ne %struct.__mpz_struct* %7, null, !dbg !5221
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !5223

if.then3:                                         ; preds = %if.end
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %t.addr, align 8, !dbg !5224
  %9 = load i64, i64* %sign, align 8, !dbg !5225
  call void @mpz_set_si(%struct.__mpz_struct* %8, i64 %9), !dbg !5226
  br label %if.end4, !dbg !5226

if.end4:                                          ; preds = %if.then3, %if.end
  br label %return, !dbg !5227

if.end5:                                          ; preds = %entry
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !5228
  %_mp_size6 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 1, !dbg !5230
  %11 = load i32, i32* %_mp_size6, align 4, !dbg !5230
  %cmp7 = icmp eq i32 %11, 0, !dbg !5231
  br i1 %cmp7, label %if.then9, label %if.end19, !dbg !5232

if.then9:                                         ; preds = %if.end5
  call void @llvm.dbg.declare(metadata i64* %sign10, metadata !5233, metadata !DIExpression()), !dbg !5235
  %12 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5236
  %call11 = call i32 @mpz_sgn(%struct.__mpz_struct* %12), !dbg !5237
  %conv12 = sext i32 %call11 to i64, !dbg !5237
  store i64 %conv12, i64* %sign10, align 8, !dbg !5235
  %13 = load %struct.__mpz_struct*, %struct.__mpz_struct** %g.addr, align 8, !dbg !5238
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5239
  call void @mpz_abs(%struct.__mpz_struct* %13, %struct.__mpz_struct* %14), !dbg !5240
  %15 = load %struct.__mpz_struct*, %struct.__mpz_struct** %s.addr, align 8, !dbg !5241
  %tobool13 = icmp ne %struct.__mpz_struct* %15, null, !dbg !5241
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !5243

if.then14:                                        ; preds = %if.then9
  %16 = load %struct.__mpz_struct*, %struct.__mpz_struct** %s.addr, align 8, !dbg !5244
  %17 = load i64, i64* %sign10, align 8, !dbg !5245
  call void @mpz_set_si(%struct.__mpz_struct* %16, i64 %17), !dbg !5246
  br label %if.end15, !dbg !5246

if.end15:                                         ; preds = %if.then14, %if.then9
  %18 = load %struct.__mpz_struct*, %struct.__mpz_struct** %t.addr, align 8, !dbg !5247
  %tobool16 = icmp ne %struct.__mpz_struct* %18, null, !dbg !5247
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !5249

if.then17:                                        ; preds = %if.end15
  %19 = load %struct.__mpz_struct*, %struct.__mpz_struct** %t.addr, align 8, !dbg !5250
  call void @mpz_set_ui(%struct.__mpz_struct* %19, i64 0), !dbg !5251
  br label %if.end18, !dbg !5251

if.end18:                                         ; preds = %if.then17, %if.end15
  br label %return, !dbg !5252

if.end19:                                         ; preds = %if.end5
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5253
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !5254
  %arraydecay20 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5255
  call void @mpz_init(%struct.__mpz_struct* %arraydecay20), !dbg !5256
  %arraydecay21 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5257
  call void @mpz_init(%struct.__mpz_struct* %arraydecay21), !dbg !5258
  %arraydecay22 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5259
  call void @mpz_init(%struct.__mpz_struct* %arraydecay22), !dbg !5260
  %arraydecay23 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5261
  call void @mpz_init(%struct.__mpz_struct* %arraydecay23), !dbg !5262
  %arraydecay24 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t1, i64 0, i64 0, !dbg !5263
  call void @mpz_init(%struct.__mpz_struct* %arraydecay24), !dbg !5264
  %arraydecay25 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5265
  %20 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5266
  call void @mpz_abs(%struct.__mpz_struct* %arraydecay25, %struct.__mpz_struct* %20), !dbg !5267
  %arraydecay26 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5268
  %call27 = call i64 @mpz_make_odd(%struct.__mpz_struct* %arraydecay26), !dbg !5269
  store i64 %call27, i64* %uz, align 8, !dbg !5270
  %arraydecay28 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5271
  %21 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !5272
  call void @mpz_abs(%struct.__mpz_struct* %arraydecay28, %struct.__mpz_struct* %21), !dbg !5273
  %arraydecay29 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5274
  %call30 = call i64 @mpz_make_odd(%struct.__mpz_struct* %arraydecay29), !dbg !5275
  store i64 %call30, i64* %vz, align 8, !dbg !5276
  %22 = load i64, i64* %uz, align 8, !dbg !5277
  %23 = load i64, i64* %vz, align 8, !dbg !5277
  %cmp31 = icmp ult i64 %22, %23, !dbg !5277
  br i1 %cmp31, label %cond.true, label %cond.false, !dbg !5277

cond.true:                                        ; preds = %if.end19
  %24 = load i64, i64* %uz, align 8, !dbg !5277
  br label %cond.end, !dbg !5277

cond.false:                                       ; preds = %if.end19
  %25 = load i64, i64* %vz, align 8, !dbg !5277
  br label %cond.end, !dbg !5277

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %24, %cond.true ], [ %25, %cond.false ], !dbg !5277
  store i64 %cond, i64* %gz, align 8, !dbg !5278
  %26 = load i64, i64* %gz, align 8, !dbg !5279
  %27 = load i64, i64* %uz, align 8, !dbg !5280
  %sub = sub i64 %27, %26, !dbg !5280
  store i64 %sub, i64* %uz, align 8, !dbg !5280
  %28 = load i64, i64* %gz, align 8, !dbg !5281
  %29 = load i64, i64* %vz, align 8, !dbg !5282
  %sub33 = sub i64 %29, %28, !dbg !5282
  store i64 %sub33, i64* %vz, align 8, !dbg !5282
  %arraydecay34 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5283
  %_mp_size35 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay34, i32 0, i32 1, !dbg !5283
  %30 = load i32, i32* %_mp_size35, align 4, !dbg !5283
  %arraydecay36 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5285
  %_mp_size37 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay36, i32 0, i32 1, !dbg !5285
  %31 = load i32, i32* %_mp_size37, align 4, !dbg !5285
  %cmp38 = icmp slt i32 %30, %31, !dbg !5286
  br i1 %cmp38, label %if.then40, label %if.end47, !dbg !5287

if.then40:                                        ; preds = %cond.end
  %arraydecay41 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5288
  %arraydecay42 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5290
  call void @mpz_swap(%struct.__mpz_struct* %arraydecay41, %struct.__mpz_struct* %arraydecay42), !dbg !5291
  br label %do.body, !dbg !5292

do.body:                                          ; preds = %if.then40
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %__mpz_srcptr_swap__tmp, metadata !5293, metadata !DIExpression()), !dbg !5295
  %32 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5295
  store %struct.__mpz_struct* %32, %struct.__mpz_struct** %__mpz_srcptr_swap__tmp, align 8, !dbg !5295
  %33 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !5295
  store %struct.__mpz_struct* %33, %struct.__mpz_struct** %u.addr, align 8, !dbg !5295
  %34 = load %struct.__mpz_struct*, %struct.__mpz_struct** %__mpz_srcptr_swap__tmp, align 8, !dbg !5295
  store %struct.__mpz_struct* %34, %struct.__mpz_struct** %v.addr, align 8, !dbg !5295
  br label %do.end, !dbg !5295

do.end:                                           ; preds = %do.body
  br label %do.body43, !dbg !5296

do.body43:                                        ; preds = %do.end
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %__mpz_ptr_swap__tmp, metadata !5297, metadata !DIExpression()), !dbg !5300
  %35 = load %struct.__mpz_struct*, %struct.__mpz_struct** %s.addr, align 8, !dbg !5300
  store %struct.__mpz_struct* %35, %struct.__mpz_struct** %__mpz_ptr_swap__tmp, align 8, !dbg !5300
  %36 = load %struct.__mpz_struct*, %struct.__mpz_struct** %t.addr, align 8, !dbg !5300
  store %struct.__mpz_struct* %36, %struct.__mpz_struct** %s.addr, align 8, !dbg !5300
  %37 = load %struct.__mpz_struct*, %struct.__mpz_struct** %__mpz_ptr_swap__tmp, align 8, !dbg !5300
  store %struct.__mpz_struct* %37, %struct.__mpz_struct** %t.addr, align 8, !dbg !5300
  br label %do.end44, !dbg !5300

do.end44:                                         ; preds = %do.body43
  br label %do.body45, !dbg !5301

do.body45:                                        ; preds = %do.end44
  call void @llvm.dbg.declare(metadata i64* %__mp_bitcnt_t_swap__tmp, metadata !5302, metadata !DIExpression()), !dbg !5304
  %38 = load i64, i64* %uz, align 8, !dbg !5304
  store i64 %38, i64* %__mp_bitcnt_t_swap__tmp, align 8, !dbg !5304
  %39 = load i64, i64* %vz, align 8, !dbg !5304
  store i64 %39, i64* %uz, align 8, !dbg !5304
  %40 = load i64, i64* %__mp_bitcnt_t_swap__tmp, align 8, !dbg !5304
  store i64 %40, i64* %vz, align 8, !dbg !5304
  br label %do.end46, !dbg !5304

do.end46:                                         ; preds = %do.body45
  br label %if.end47, !dbg !5305

if.end47:                                         ; preds = %do.end46, %cond.end
  %arraydecay48 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5306
  %41 = load i64, i64* %uz, align 8, !dbg !5307
  call void @mpz_setbit(%struct.__mpz_struct* %arraydecay48, i64 %41), !dbg !5308
  %arraydecay49 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t1, i64 0, i64 0, !dbg !5309
  %arraydecay50 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5310
  %arraydecay51 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5311
  %arraydecay52 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5312
  call void @mpz_tdiv_qr(%struct.__mpz_struct* %arraydecay49, %struct.__mpz_struct* %arraydecay50, %struct.__mpz_struct* %arraydecay51, %struct.__mpz_struct* %arraydecay52), !dbg !5313
  %arraydecay53 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t1, i64 0, i64 0, !dbg !5314
  %arraydecay54 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t1, i64 0, i64 0, !dbg !5315
  %42 = load i64, i64* %uz, align 8, !dbg !5316
  call void @mpz_mul_2exp(%struct.__mpz_struct* %arraydecay53, %struct.__mpz_struct* %arraydecay54, i64 %42), !dbg !5317
  %arraydecay55 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5318
  %43 = load i64, i64* %vz, align 8, !dbg !5319
  call void @mpz_setbit(%struct.__mpz_struct* %arraydecay55, i64 %43), !dbg !5320
  %44 = load i64, i64* %uz, align 8, !dbg !5321
  %45 = load i64, i64* %vz, align 8, !dbg !5322
  %add = add i64 %44, %45, !dbg !5323
  store i64 %add, i64* %power, align 8, !dbg !5324
  %arraydecay56 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5325
  %_mp_size57 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay56, i32 0, i32 1, !dbg !5325
  %46 = load i32, i32* %_mp_size57, align 4, !dbg !5325
  %cmp58 = icmp sgt i32 %46, 0, !dbg !5327
  br i1 %cmp58, label %if.then60, label %if.end110, !dbg !5328

if.then60:                                        ; preds = %if.end47
  call void @llvm.dbg.declare(metadata i64* %shift, metadata !5329, metadata !DIExpression()), !dbg !5331
  %arraydecay61 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5332
  %call62 = call i64 @mpz_make_odd(%struct.__mpz_struct* %arraydecay61), !dbg !5333
  store i64 %call62, i64* %shift, align 8, !dbg !5334
  %arraydecay63 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5335
  %arraydecay64 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5336
  %47 = load i64, i64* %shift, align 8, !dbg !5337
  call void @mpz_mul_2exp(%struct.__mpz_struct* %arraydecay63, %struct.__mpz_struct* %arraydecay64, i64 %47), !dbg !5338
  %arraydecay65 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5339
  %arraydecay66 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5340
  %48 = load i64, i64* %shift, align 8, !dbg !5341
  call void @mpz_mul_2exp(%struct.__mpz_struct* %arraydecay65, %struct.__mpz_struct* %arraydecay66, i64 %48), !dbg !5342
  %49 = load i64, i64* %shift, align 8, !dbg !5343
  %50 = load i64, i64* %power, align 8, !dbg !5344
  %add67 = add i64 %50, %49, !dbg !5344
  store i64 %add67, i64* %power, align 8, !dbg !5344
  br label %for.cond, !dbg !5345

for.cond:                                         ; preds = %if.end108, %if.then60
  call void @llvm.dbg.declare(metadata i32* %c, metadata !5346, metadata !DIExpression()), !dbg !5350
  %arraydecay68 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5351
  %arraydecay69 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5352
  %call70 = call i32 @mpz_cmp(%struct.__mpz_struct* %arraydecay68, %struct.__mpz_struct* %arraydecay69), !dbg !5353
  store i32 %call70, i32* %c, align 4, !dbg !5354
  %51 = load i32, i32* %c, align 4, !dbg !5355
  %cmp71 = icmp eq i32 %51, 0, !dbg !5357
  br i1 %cmp71, label %if.then73, label %if.end74, !dbg !5358

if.then73:                                        ; preds = %for.cond
  br label %for.end, !dbg !5359

if.end74:                                         ; preds = %for.cond
  %52 = load i32, i32* %c, align 4, !dbg !5360
  %cmp75 = icmp slt i32 %52, 0, !dbg !5362
  br i1 %cmp75, label %if.then77, label %if.else, !dbg !5363

if.then77:                                        ; preds = %if.end74
  %arraydecay78 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5364
  %arraydecay79 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5366
  %arraydecay80 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5367
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay78, %struct.__mpz_struct* %arraydecay79, %struct.__mpz_struct* %arraydecay80), !dbg !5368
  %arraydecay81 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5369
  %arraydecay82 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5370
  %arraydecay83 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t1, i64 0, i64 0, !dbg !5371
  call void @mpz_add(%struct.__mpz_struct* %arraydecay81, %struct.__mpz_struct* %arraydecay82, %struct.__mpz_struct* %arraydecay83), !dbg !5372
  %arraydecay84 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5373
  %arraydecay85 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5374
  %arraydecay86 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5375
  call void @mpz_add(%struct.__mpz_struct* %arraydecay84, %struct.__mpz_struct* %arraydecay85, %struct.__mpz_struct* %arraydecay86), !dbg !5376
  %arraydecay87 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5377
  %call88 = call i64 @mpz_make_odd(%struct.__mpz_struct* %arraydecay87), !dbg !5378
  store i64 %call88, i64* %shift, align 8, !dbg !5379
  %arraydecay89 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t1, i64 0, i64 0, !dbg !5380
  %arraydecay90 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t1, i64 0, i64 0, !dbg !5381
  %53 = load i64, i64* %shift, align 8, !dbg !5382
  call void @mpz_mul_2exp(%struct.__mpz_struct* %arraydecay89, %struct.__mpz_struct* %arraydecay90, i64 %53), !dbg !5383
  %arraydecay91 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5384
  %arraydecay92 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5385
  %54 = load i64, i64* %shift, align 8, !dbg !5386
  call void @mpz_mul_2exp(%struct.__mpz_struct* %arraydecay91, %struct.__mpz_struct* %arraydecay92, i64 %54), !dbg !5387
  br label %if.end108, !dbg !5388

if.else:                                          ; preds = %if.end74
  %arraydecay93 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5389
  %arraydecay94 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5391
  %arraydecay95 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5392
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay93, %struct.__mpz_struct* %arraydecay94, %struct.__mpz_struct* %arraydecay95), !dbg !5393
  %arraydecay96 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t1, i64 0, i64 0, !dbg !5394
  %arraydecay97 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5395
  %arraydecay98 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t1, i64 0, i64 0, !dbg !5396
  call void @mpz_add(%struct.__mpz_struct* %arraydecay96, %struct.__mpz_struct* %arraydecay97, %struct.__mpz_struct* %arraydecay98), !dbg !5397
  %arraydecay99 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5398
  %arraydecay100 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5399
  %arraydecay101 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5400
  call void @mpz_add(%struct.__mpz_struct* %arraydecay99, %struct.__mpz_struct* %arraydecay100, %struct.__mpz_struct* %arraydecay101), !dbg !5401
  %arraydecay102 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5402
  %call103 = call i64 @mpz_make_odd(%struct.__mpz_struct* %arraydecay102), !dbg !5403
  store i64 %call103, i64* %shift, align 8, !dbg !5404
  %arraydecay104 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5405
  %arraydecay105 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5406
  %55 = load i64, i64* %shift, align 8, !dbg !5407
  call void @mpz_mul_2exp(%struct.__mpz_struct* %arraydecay104, %struct.__mpz_struct* %arraydecay105, i64 %55), !dbg !5408
  %arraydecay106 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5409
  %arraydecay107 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5410
  %56 = load i64, i64* %shift, align 8, !dbg !5411
  call void @mpz_mul_2exp(%struct.__mpz_struct* %arraydecay106, %struct.__mpz_struct* %arraydecay107, i64 %56), !dbg !5412
  br label %if.end108

if.end108:                                        ; preds = %if.else, %if.then77
  %57 = load i64, i64* %shift, align 8, !dbg !5413
  %58 = load i64, i64* %power, align 8, !dbg !5414
  %add109 = add i64 %58, %57, !dbg !5414
  store i64 %add109, i64* %power, align 8, !dbg !5414
  br label %for.cond, !dbg !5415, !llvm.loop !5416

for.end:                                          ; preds = %if.then73
  br label %if.end110, !dbg !5419

if.end110:                                        ; preds = %for.end, %if.end47
  %arraydecay111 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5420
  %arraydecay112 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5421
  %59 = load i64, i64* %gz, align 8, !dbg !5422
  call void @mpz_mul_2exp(%struct.__mpz_struct* %arraydecay111, %struct.__mpz_struct* %arraydecay112, i64 %59), !dbg !5423
  %arraydecay113 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5424
  %arraydecay114 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5425
  call void @mpz_neg(%struct.__mpz_struct* %arraydecay113, %struct.__mpz_struct* %arraydecay114), !dbg !5426
  %arraydecay115 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5427
  %60 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !5428
  %arraydecay116 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5429
  call void @mpz_divexact(%struct.__mpz_struct* %arraydecay115, %struct.__mpz_struct* %60, %struct.__mpz_struct* %arraydecay116), !dbg !5430
  %arraydecay117 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5431
  %arraydecay118 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5432
  call void @mpz_abs(%struct.__mpz_struct* %arraydecay117, %struct.__mpz_struct* %arraydecay118), !dbg !5433
  %arraydecay119 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t1, i64 0, i64 0, !dbg !5434
  %61 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5435
  %arraydecay120 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5436
  call void @mpz_divexact(%struct.__mpz_struct* %arraydecay119, %struct.__mpz_struct* %61, %struct.__mpz_struct* %arraydecay120), !dbg !5437
  %arraydecay121 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t1, i64 0, i64 0, !dbg !5438
  %arraydecay122 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t1, i64 0, i64 0, !dbg !5439
  call void @mpz_abs(%struct.__mpz_struct* %arraydecay121, %struct.__mpz_struct* %arraydecay122), !dbg !5440
  br label %while.cond, !dbg !5441

while.cond:                                       ; preds = %if.end149, %if.end110
  %62 = load i64, i64* %power, align 8, !dbg !5442
  %dec = add i64 %62, -1, !dbg !5442
  store i64 %dec, i64* %power, align 8, !dbg !5442
  %cmp123 = icmp ugt i64 %62, 0, !dbg !5443
  br i1 %cmp123, label %while.body, label %while.end, !dbg !5441

while.body:                                       ; preds = %while.cond
  %arraydecay125 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5444
  %_mp_size126 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay125, i32 0, i32 1, !dbg !5444
  %63 = load i32, i32* %_mp_size126, align 4, !dbg !5444
  %cmp127 = icmp ne i32 %63, 0, !dbg !5444
  %conv128 = zext i1 %cmp127 to i32, !dbg !5444
  %arraydecay129 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5444
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay129, i32 0, i32 2, !dbg !5444
  %64 = load i64*, i64** %_mp_d, align 8, !dbg !5444
  %arrayidx = getelementptr inbounds i64, i64* %64, i64 0, !dbg !5444
  %65 = load i64, i64* %arrayidx, align 8, !dbg !5444
  %conv130 = trunc i64 %65 to i32, !dbg !5444
  %and = and i32 %conv128, %conv130, !dbg !5444
  %tobool131 = icmp ne i32 %and, 0, !dbg !5444
  br i1 %tobool131, label %if.then142, label %lor.lhs.false, !dbg !5447

lor.lhs.false:                                    ; preds = %while.body
  %arraydecay132 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5448
  %_mp_size133 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay132, i32 0, i32 1, !dbg !5448
  %66 = load i32, i32* %_mp_size133, align 4, !dbg !5448
  %cmp134 = icmp ne i32 %66, 0, !dbg !5448
  %conv135 = zext i1 %cmp134 to i32, !dbg !5448
  %arraydecay136 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5448
  %_mp_d137 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay136, i32 0, i32 2, !dbg !5448
  %67 = load i64*, i64** %_mp_d137, align 8, !dbg !5448
  %arrayidx138 = getelementptr inbounds i64, i64* %67, i64 0, !dbg !5448
  %68 = load i64, i64* %arrayidx138, align 8, !dbg !5448
  %conv139 = trunc i64 %68 to i32, !dbg !5448
  %and140 = and i32 %conv135, %conv139, !dbg !5448
  %tobool141 = icmp ne i32 %and140, 0, !dbg !5448
  br i1 %tobool141, label %if.then142, label %if.end149, !dbg !5449

if.then142:                                       ; preds = %lor.lhs.false, %while.body
  %arraydecay143 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5450
  %arraydecay144 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5452
  %arraydecay145 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5453
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay143, %struct.__mpz_struct* %arraydecay144, %struct.__mpz_struct* %arraydecay145), !dbg !5454
  %arraydecay146 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5455
  %arraydecay147 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5456
  %arraydecay148 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t1, i64 0, i64 0, !dbg !5457
  call void @mpz_add(%struct.__mpz_struct* %arraydecay146, %struct.__mpz_struct* %arraydecay147, %struct.__mpz_struct* %arraydecay148), !dbg !5458
  br label %if.end149, !dbg !5459

if.end149:                                        ; preds = %if.then142, %lor.lhs.false
  %arraydecay150 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5460
  %arraydecay151 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5461
  call void @mpz_divexact_ui(%struct.__mpz_struct* %arraydecay150, %struct.__mpz_struct* %arraydecay151, i64 2), !dbg !5462
  %arraydecay152 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5463
  %arraydecay153 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5464
  call void @mpz_divexact_ui(%struct.__mpz_struct* %arraydecay152, %struct.__mpz_struct* %arraydecay153, i64 2), !dbg !5465
  br label %while.cond, !dbg !5441, !llvm.loop !5466

while.end:                                        ; preds = %while.cond
  %arraydecay154 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5468
  %arraydecay155 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5469
  %arraydecay156 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5470
  call void @mpz_add(%struct.__mpz_struct* %arraydecay154, %struct.__mpz_struct* %arraydecay155, %struct.__mpz_struct* %arraydecay156), !dbg !5471
  %arraydecay157 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5472
  %arraydecay158 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5474
  %call159 = call i32 @mpz_cmpabs(%struct.__mpz_struct* %arraydecay157, %struct.__mpz_struct* %arraydecay158), !dbg !5475
  %cmp160 = icmp sgt i32 %call159, 0, !dbg !5476
  br i1 %cmp160, label %if.then162, label %if.end168, !dbg !5477

if.then162:                                       ; preds = %while.end
  %arraydecay163 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5478
  %arraydecay164 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5480
  call void @mpz_swap(%struct.__mpz_struct* %arraydecay163, %struct.__mpz_struct* %arraydecay164), !dbg !5481
  %arraydecay165 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5482
  %arraydecay166 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5483
  %arraydecay167 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t1, i64 0, i64 0, !dbg !5484
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay165, %struct.__mpz_struct* %arraydecay166, %struct.__mpz_struct* %arraydecay167), !dbg !5485
  br label %if.end168, !dbg !5486

if.end168:                                        ; preds = %if.then162, %while.end
  %69 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5487
  %_mp_size169 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %69, i32 0, i32 1, !dbg !5489
  %70 = load i32, i32* %_mp_size169, align 4, !dbg !5489
  %cmp170 = icmp slt i32 %70, 0, !dbg !5490
  br i1 %cmp170, label %if.then172, label %if.end175, !dbg !5491

if.then172:                                       ; preds = %if.end168
  %arraydecay173 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5492
  %arraydecay174 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5493
  call void @mpz_neg(%struct.__mpz_struct* %arraydecay173, %struct.__mpz_struct* %arraydecay174), !dbg !5494
  br label %if.end175, !dbg !5494

if.end175:                                        ; preds = %if.then172, %if.end168
  %71 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !5495
  %_mp_size176 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %71, i32 0, i32 1, !dbg !5497
  %72 = load i32, i32* %_mp_size176, align 4, !dbg !5497
  %cmp177 = icmp slt i32 %72, 0, !dbg !5498
  br i1 %cmp177, label %if.then179, label %if.end182, !dbg !5499

if.then179:                                       ; preds = %if.end175
  %arraydecay180 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5500
  %arraydecay181 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5501
  call void @mpz_neg(%struct.__mpz_struct* %arraydecay180, %struct.__mpz_struct* %arraydecay181), !dbg !5502
  br label %if.end182, !dbg !5502

if.end182:                                        ; preds = %if.then179, %if.end175
  %73 = load %struct.__mpz_struct*, %struct.__mpz_struct** %g.addr, align 8, !dbg !5503
  %arraydecay183 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5504
  call void @mpz_swap(%struct.__mpz_struct* %73, %struct.__mpz_struct* %arraydecay183), !dbg !5505
  %74 = load %struct.__mpz_struct*, %struct.__mpz_struct** %s.addr, align 8, !dbg !5506
  %tobool184 = icmp ne %struct.__mpz_struct* %74, null, !dbg !5506
  br i1 %tobool184, label %if.then185, label %if.end187, !dbg !5508

if.then185:                                       ; preds = %if.end182
  %75 = load %struct.__mpz_struct*, %struct.__mpz_struct** %s.addr, align 8, !dbg !5509
  %arraydecay186 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5510
  call void @mpz_swap(%struct.__mpz_struct* %75, %struct.__mpz_struct* %arraydecay186), !dbg !5511
  br label %if.end187, !dbg !5511

if.end187:                                        ; preds = %if.then185, %if.end182
  %76 = load %struct.__mpz_struct*, %struct.__mpz_struct** %t.addr, align 8, !dbg !5512
  %tobool188 = icmp ne %struct.__mpz_struct* %76, null, !dbg !5512
  br i1 %tobool188, label %if.then189, label %if.end191, !dbg !5514

if.then189:                                       ; preds = %if.end187
  %77 = load %struct.__mpz_struct*, %struct.__mpz_struct** %t.addr, align 8, !dbg !5515
  %arraydecay190 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5516
  call void @mpz_swap(%struct.__mpz_struct* %77, %struct.__mpz_struct* %arraydecay190), !dbg !5517
  br label %if.end191, !dbg !5517

if.end191:                                        ; preds = %if.then189, %if.end187
  %arraydecay192 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tu, i64 0, i64 0, !dbg !5518
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay192), !dbg !5519
  %arraydecay193 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tv, i64 0, i64 0, !dbg !5520
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay193), !dbg !5521
  %arraydecay194 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s0, i64 0, i64 0, !dbg !5522
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay194), !dbg !5523
  %arraydecay195 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s1, i64 0, i64 0, !dbg !5524
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay195), !dbg !5525
  %arraydecay196 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t0, i64 0, i64 0, !dbg !5526
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay196), !dbg !5527
  %arraydecay197 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t1, i64 0, i64 0, !dbg !5528
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay197), !dbg !5529
  br label %return, !dbg !5530

return:                                           ; preds = %if.end191, %if.end18, %if.end4
  ret void, !dbg !5530
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_setbit(%struct.__mpz_struct* %d, i64 %bit_index) #0 !dbg !5531 {
entry:
  %d.addr = alloca %struct.__mpz_struct*, align 8
  %bit_index.addr = alloca i64, align 8
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !5532, metadata !DIExpression()), !dbg !5533
  store i64 %bit_index, i64* %bit_index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bit_index.addr, metadata !5534, metadata !DIExpression()), !dbg !5535
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !5536
  %1 = load i64, i64* %bit_index.addr, align 8, !dbg !5538
  %call = call i32 @mpz_tstbit(%struct.__mpz_struct* %0, i64 %1), !dbg !5539
  %tobool = icmp ne i32 %call, 0, !dbg !5539
  br i1 %tobool, label %if.end2, label %if.then, !dbg !5540

if.then:                                          ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !5541
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !5544
  %3 = load i32, i32* %_mp_size, align 4, !dbg !5544
  %cmp = icmp sge i32 %3, 0, !dbg !5545
  br i1 %cmp, label %if.then1, label %if.else, !dbg !5546

if.then1:                                         ; preds = %if.then
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !5547
  %5 = load i64, i64* %bit_index.addr, align 8, !dbg !5548
  call void @mpz_abs_add_bit(%struct.__mpz_struct* %4, i64 %5), !dbg !5549
  br label %if.end, !dbg !5549

if.else:                                          ; preds = %if.then
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !5550
  %7 = load i64, i64* %bit_index.addr, align 8, !dbg !5551
  call void @mpz_abs_sub_bit(%struct.__mpz_struct* %6, i64 %7), !dbg !5552
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then1
  br label %if.end2, !dbg !5553

if.end2:                                          ; preds = %if.end, %entry
  ret void, !dbg !5554
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_lcm(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, %struct.__mpz_struct* %v) #0 !dbg !5555 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca %struct.__mpz_struct*, align 8
  %g = alloca [1 x %struct.__mpz_struct], align 16
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !5556, metadata !DIExpression()), !dbg !5557
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !5558, metadata !DIExpression()), !dbg !5559
  store %struct.__mpz_struct* %v, %struct.__mpz_struct** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %v.addr, metadata !5560, metadata !DIExpression()), !dbg !5561
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %g, metadata !5562, metadata !DIExpression()), !dbg !5563
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5564
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !5566
  %1 = load i32, i32* %_mp_size, align 4, !dbg !5566
  %cmp = icmp eq i32 %1, 0, !dbg !5567
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5568

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !5569
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !5570
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !5570
  %cmp2 = icmp eq i32 %3, 0, !dbg !5571
  br i1 %cmp2, label %if.then, label %if.end, !dbg !5572

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5573
  %_mp_size3 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !5575
  store i32 0, i32* %_mp_size3, align 4, !dbg !5576
  br label %return, !dbg !5577

if.end:                                           ; preds = %lor.lhs.false
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %g, i64 0, i64 0, !dbg !5578
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !5579
  %arraydecay4 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %g, i64 0, i64 0, !dbg !5580
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5581
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !5582
  call void @mpz_gcd(%struct.__mpz_struct* %arraydecay4, %struct.__mpz_struct* %5, %struct.__mpz_struct* %6), !dbg !5583
  %arraydecay5 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %g, i64 0, i64 0, !dbg !5584
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5585
  %arraydecay6 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %g, i64 0, i64 0, !dbg !5586
  call void @mpz_divexact(%struct.__mpz_struct* %arraydecay5, %struct.__mpz_struct* %7, %struct.__mpz_struct* %arraydecay6), !dbg !5587
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5588
  %arraydecay7 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %g, i64 0, i64 0, !dbg !5589
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !5590
  call void @mpz_mul(%struct.__mpz_struct* %8, %struct.__mpz_struct* %arraydecay7, %struct.__mpz_struct* %9), !dbg !5591
  %arraydecay8 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %g, i64 0, i64 0, !dbg !5592
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay8), !dbg !5593
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5594
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5595
  call void @mpz_abs(%struct.__mpz_struct* %10, %struct.__mpz_struct* %11), !dbg !5596
  br label %return, !dbg !5597

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !5597
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_lcm_ui(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, i64 %v) #0 !dbg !5598 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !5599, metadata !DIExpression()), !dbg !5600
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !5601, metadata !DIExpression()), !dbg !5602
  store i64 %v, i64* %v.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %v.addr, metadata !5603, metadata !DIExpression()), !dbg !5604
  %0 = load i64, i64* %v.addr, align 8, !dbg !5605
  %cmp = icmp eq i64 %0, 0, !dbg !5607
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5608

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5609
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %1, i32 0, i32 1, !dbg !5610
  %2 = load i32, i32* %_mp_size, align 4, !dbg !5610
  %cmp1 = icmp eq i32 %2, 0, !dbg !5611
  br i1 %cmp1, label %if.then, label %if.end, !dbg !5612

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5613
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %3, i32 0, i32 1, !dbg !5615
  store i32 0, i32* %_mp_size2, align 4, !dbg !5616
  br label %return, !dbg !5617

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5618
  %5 = load i64, i64* %v.addr, align 8, !dbg !5619
  %call = call i64 @mpz_gcd_ui(%struct.__mpz_struct* null, %struct.__mpz_struct* %4, i64 %5), !dbg !5620
  %6 = load i64, i64* %v.addr, align 8, !dbg !5621
  %div = udiv i64 %6, %call, !dbg !5621
  store i64 %div, i64* %v.addr, align 8, !dbg !5621
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5622
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5623
  %9 = load i64, i64* %v.addr, align 8, !dbg !5624
  call void @mpz_mul_ui(%struct.__mpz_struct* %7, %struct.__mpz_struct* %8, i64 %9), !dbg !5625
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5626
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5627
  call void @mpz_abs(%struct.__mpz_struct* %10, %struct.__mpz_struct* %11), !dbg !5628
  br label %return, !dbg !5629

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !5629
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_invert(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, %struct.__mpz_struct* %m) #0 !dbg !5630 {
entry:
  %retval = alloca i32, align 4
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %m.addr = alloca %struct.__mpz_struct*, align 8
  %g = alloca [1 x %struct.__mpz_struct], align 16
  %tr = alloca [1 x %struct.__mpz_struct], align 16
  %invertible = alloca i32, align 4
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !5633, metadata !DIExpression()), !dbg !5634
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !5635, metadata !DIExpression()), !dbg !5636
  store %struct.__mpz_struct* %m, %struct.__mpz_struct** %m.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %m.addr, metadata !5637, metadata !DIExpression()), !dbg !5638
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %g, metadata !5639, metadata !DIExpression()), !dbg !5640
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %tr, metadata !5641, metadata !DIExpression()), !dbg !5642
  call void @llvm.dbg.declare(metadata i32* %invertible, metadata !5643, metadata !DIExpression()), !dbg !5644
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5645
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !5647
  %1 = load i32, i32* %_mp_size, align 4, !dbg !5647
  %cmp = icmp eq i32 %1, 0, !dbg !5648
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5649

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %m.addr, align 8, !dbg !5650
  %call = call i32 @mpz_cmpabs_ui(%struct.__mpz_struct* %2, i64 1), !dbg !5651
  %cmp1 = icmp sle i32 %call, 0, !dbg !5652
  br i1 %cmp1, label %if.then, label %if.end, !dbg !5653

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !5654
  br label %return, !dbg !5654

if.end:                                           ; preds = %lor.lhs.false
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %g, i64 0, i64 0, !dbg !5655
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !5656
  %arraydecay2 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5657
  call void @mpz_init(%struct.__mpz_struct* %arraydecay2), !dbg !5658
  %arraydecay3 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %g, i64 0, i64 0, !dbg !5659
  %arraydecay4 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5660
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !5661
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %m.addr, align 8, !dbg !5662
  call void @mpz_gcdext(%struct.__mpz_struct* %arraydecay3, %struct.__mpz_struct* %arraydecay4, %struct.__mpz_struct* null, %struct.__mpz_struct* %3, %struct.__mpz_struct* %4), !dbg !5663
  %arraydecay5 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %g, i64 0, i64 0, !dbg !5664
  %call6 = call i32 @mpz_cmp_ui(%struct.__mpz_struct* %arraydecay5, i64 1), !dbg !5665
  %cmp7 = icmp eq i32 %call6, 0, !dbg !5666
  %conv = zext i1 %cmp7 to i32, !dbg !5666
  store i32 %conv, i32* %invertible, align 4, !dbg !5667
  %5 = load i32, i32* %invertible, align 4, !dbg !5668
  %tobool = icmp ne i32 %5, 0, !dbg !5668
  br i1 %tobool, label %if.then8, label %if.end25, !dbg !5670

if.then8:                                         ; preds = %if.end
  %arraydecay9 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5671
  %_mp_size10 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay9, i32 0, i32 1, !dbg !5671
  %6 = load i32, i32* %_mp_size10, align 4, !dbg !5671
  %cmp11 = icmp slt i32 %6, 0, !dbg !5674
  br i1 %cmp11, label %if.then13, label %if.end23, !dbg !5675

if.then13:                                        ; preds = %if.then8
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %m.addr, align 8, !dbg !5676
  %_mp_size14 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %7, i32 0, i32 1, !dbg !5679
  %8 = load i32, i32* %_mp_size14, align 4, !dbg !5679
  %cmp15 = icmp sge i32 %8, 0, !dbg !5680
  br i1 %cmp15, label %if.then17, label %if.else, !dbg !5681

if.then17:                                        ; preds = %if.then13
  %arraydecay18 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5682
  %arraydecay19 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5683
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %m.addr, align 8, !dbg !5684
  call void @mpz_add(%struct.__mpz_struct* %arraydecay18, %struct.__mpz_struct* %arraydecay19, %struct.__mpz_struct* %9), !dbg !5685
  br label %if.end22, !dbg !5685

if.else:                                          ; preds = %if.then13
  %arraydecay20 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5686
  %arraydecay21 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5687
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %m.addr, align 8, !dbg !5688
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay20, %struct.__mpz_struct* %arraydecay21, %struct.__mpz_struct* %10), !dbg !5689
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then17
  br label %if.end23, !dbg !5690

if.end23:                                         ; preds = %if.end22, %if.then8
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5691
  %arraydecay24 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5692
  call void @mpz_swap(%struct.__mpz_struct* %11, %struct.__mpz_struct* %arraydecay24), !dbg !5693
  br label %if.end25, !dbg !5694

if.end25:                                         ; preds = %if.end23, %if.end
  %arraydecay26 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %g, i64 0, i64 0, !dbg !5695
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay26), !dbg !5696
  %arraydecay27 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5697
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay27), !dbg !5698
  %12 = load i32, i32* %invertible, align 4, !dbg !5699
  store i32 %12, i32* %retval, align 4, !dbg !5700
  br label %return, !dbg !5700

return:                                           ; preds = %if.end25, %if.then
  %13 = load i32, i32* %retval, align 4, !dbg !5701
  ret i32 %13, !dbg !5701
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_pow_ui(%struct.__mpz_struct* %r, %struct.__mpz_struct* %b, i64 %e) #0 !dbg !5702 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %b.addr = alloca %struct.__mpz_struct*, align 8
  %e.addr = alloca i64, align 8
  %bit = alloca i64, align 8
  %tr = alloca [1 x %struct.__mpz_struct], align 16
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !5703, metadata !DIExpression()), !dbg !5704
  store %struct.__mpz_struct* %b, %struct.__mpz_struct** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %b.addr, metadata !5705, metadata !DIExpression()), !dbg !5706
  store i64 %e, i64* %e.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %e.addr, metadata !5707, metadata !DIExpression()), !dbg !5708
  call void @llvm.dbg.declare(metadata i64* %bit, metadata !5709, metadata !DIExpression()), !dbg !5710
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %tr, metadata !5711, metadata !DIExpression()), !dbg !5712
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5713
  call void @mpz_init_set_ui(%struct.__mpz_struct* %arraydecay, i64 1), !dbg !5714
  store i64 -9223372036854775808, i64* %bit, align 8, !dbg !5715
  br label %do.body, !dbg !5716

do.body:                                          ; preds = %do.cond, %entry
  %arraydecay1 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5717
  %arraydecay2 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5719
  %arraydecay3 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5720
  call void @mpz_mul(%struct.__mpz_struct* %arraydecay1, %struct.__mpz_struct* %arraydecay2, %struct.__mpz_struct* %arraydecay3), !dbg !5721
  %0 = load i64, i64* %e.addr, align 8, !dbg !5722
  %1 = load i64, i64* %bit, align 8, !dbg !5724
  %and = and i64 %0, %1, !dbg !5725
  %tobool = icmp ne i64 %and, 0, !dbg !5725
  br i1 %tobool, label %if.then, label %if.end, !dbg !5726

if.then:                                          ; preds = %do.body
  %arraydecay4 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5727
  %arraydecay5 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5728
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !5729
  call void @mpz_mul(%struct.__mpz_struct* %arraydecay4, %struct.__mpz_struct* %arraydecay5, %struct.__mpz_struct* %2), !dbg !5730
  br label %if.end, !dbg !5730

if.end:                                           ; preds = %if.then, %do.body
  %3 = load i64, i64* %bit, align 8, !dbg !5731
  %shr = lshr i64 %3, 1, !dbg !5731
  store i64 %shr, i64* %bit, align 8, !dbg !5731
  br label %do.cond, !dbg !5732

do.cond:                                          ; preds = %if.end
  %4 = load i64, i64* %bit, align 8, !dbg !5733
  %cmp = icmp ugt i64 %4, 0, !dbg !5734
  br i1 %cmp, label %do.body, label %do.end, !dbg !5732, !llvm.loop !5735

do.end:                                           ; preds = %do.cond
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5737
  %arraydecay6 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5738
  call void @mpz_swap(%struct.__mpz_struct* %5, %struct.__mpz_struct* %arraydecay6), !dbg !5739
  %arraydecay7 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5740
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay7), !dbg !5741
  ret void, !dbg !5742
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_ui_pow_ui(%struct.__mpz_struct* %r, i64 %blimb, i64 %e) #0 !dbg !5743 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %blimb.addr = alloca i64, align 8
  %e.addr = alloca i64, align 8
  %b = alloca [1 x %struct.__mpz_struct], align 16
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !5746, metadata !DIExpression()), !dbg !5747
  store i64 %blimb, i64* %blimb.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %blimb.addr, metadata !5748, metadata !DIExpression()), !dbg !5749
  store i64 %e, i64* %e.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %e.addr, metadata !5750, metadata !DIExpression()), !dbg !5751
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %b, metadata !5752, metadata !DIExpression()), !dbg !5753
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %b, i64 0, i64 0, !dbg !5754
  %0 = load i64, i64* %blimb.addr, align 8, !dbg !5755
  call void @mpz_init_set_ui(%struct.__mpz_struct* %arraydecay, i64 %0), !dbg !5756
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5757
  %arraydecay1 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %b, i64 0, i64 0, !dbg !5758
  %2 = load i64, i64* %e.addr, align 8, !dbg !5759
  call void @mpz_pow_ui(%struct.__mpz_struct* %1, %struct.__mpz_struct* %arraydecay1, i64 %2), !dbg !5760
  %arraydecay2 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %b, i64 0, i64 0, !dbg !5761
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay2), !dbg !5762
  ret void, !dbg !5763
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_powm(%struct.__mpz_struct* %r, %struct.__mpz_struct* %b, %struct.__mpz_struct* %e, %struct.__mpz_struct* %m) #0 !dbg !5764 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %b.addr = alloca %struct.__mpz_struct*, align 8
  %e.addr = alloca %struct.__mpz_struct*, align 8
  %m.addr = alloca %struct.__mpz_struct*, align 8
  %tr = alloca [1 x %struct.__mpz_struct], align 16
  %base = alloca [1 x %struct.__mpz_struct], align 16
  %en = alloca i64, align 8
  %mn = alloca i64, align 8
  %mp = alloca i64*, align 8
  %minv = alloca %struct.gmp_div_inverse, align 8
  %shift = alloca i32, align 4
  %tp = alloca i64*, align 8
  %__cy = alloca i64, align 8
  %bn = alloca i64, align 8
  %bp = alloca i64*, align 8
  %__cy65 = alloca i64, align 8
  %w = alloca i64, align 8
  %bit = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !5767, metadata !DIExpression()), !dbg !5768
  store %struct.__mpz_struct* %b, %struct.__mpz_struct** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %b.addr, metadata !5769, metadata !DIExpression()), !dbg !5770
  store %struct.__mpz_struct* %e, %struct.__mpz_struct** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %e.addr, metadata !5771, metadata !DIExpression()), !dbg !5772
  store %struct.__mpz_struct* %m, %struct.__mpz_struct** %m.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %m.addr, metadata !5773, metadata !DIExpression()), !dbg !5774
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %tr, metadata !5775, metadata !DIExpression()), !dbg !5776
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %base, metadata !5777, metadata !DIExpression()), !dbg !5778
  call void @llvm.dbg.declare(metadata i64* %en, metadata !5779, metadata !DIExpression()), !dbg !5780
  call void @llvm.dbg.declare(metadata i64* %mn, metadata !5781, metadata !DIExpression()), !dbg !5782
  call void @llvm.dbg.declare(metadata i64** %mp, metadata !5783, metadata !DIExpression()), !dbg !5784
  call void @llvm.dbg.declare(metadata %struct.gmp_div_inverse* %minv, metadata !5785, metadata !DIExpression()), !dbg !5786
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !5787, metadata !DIExpression()), !dbg !5788
  call void @llvm.dbg.declare(metadata i64** %tp, metadata !5789, metadata !DIExpression()), !dbg !5790
  store i64* null, i64** %tp, align 8, !dbg !5790
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %e.addr, align 8, !dbg !5791
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !5791
  %1 = load i32, i32* %_mp_size, align 4, !dbg !5791
  %cmp = icmp sge i32 %1, 0, !dbg !5791
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5791

cond.true:                                        ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %e.addr, align 8, !dbg !5791
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !5791
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !5791
  br label %cond.end, !dbg !5791

cond.false:                                       ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %e.addr, align 8, !dbg !5791
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !5791
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !5791
  %sub = sub nsw i32 0, %5, !dbg !5791
  br label %cond.end, !dbg !5791

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !5791
  %conv = sext i32 %cond to i64, !dbg !5791
  store i64 %conv, i64* %en, align 8, !dbg !5792
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %m.addr, align 8, !dbg !5793
  %_mp_size3 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 1, !dbg !5793
  %7 = load i32, i32* %_mp_size3, align 4, !dbg !5793
  %cmp4 = icmp sge i32 %7, 0, !dbg !5793
  br i1 %cmp4, label %cond.true6, label %cond.false8, !dbg !5793

cond.true6:                                       ; preds = %cond.end
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %m.addr, align 8, !dbg !5793
  %_mp_size7 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 1, !dbg !5793
  %9 = load i32, i32* %_mp_size7, align 4, !dbg !5793
  br label %cond.end11, !dbg !5793

cond.false8:                                      ; preds = %cond.end
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %m.addr, align 8, !dbg !5793
  %_mp_size9 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 1, !dbg !5793
  %11 = load i32, i32* %_mp_size9, align 4, !dbg !5793
  %sub10 = sub nsw i32 0, %11, !dbg !5793
  br label %cond.end11, !dbg !5793

cond.end11:                                       ; preds = %cond.false8, %cond.true6
  %cond12 = phi i32 [ %9, %cond.true6 ], [ %sub10, %cond.false8 ], !dbg !5793
  %conv13 = sext i32 %cond12 to i64, !dbg !5793
  store i64 %conv13, i64* %mn, align 8, !dbg !5794
  %12 = load i64, i64* %mn, align 8, !dbg !5795
  %cmp14 = icmp eq i64 %12, 0, !dbg !5797
  br i1 %cmp14, label %if.then, label %if.end, !dbg !5798

if.then:                                          ; preds = %cond.end11
  call void @gmp_die(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0)), !dbg !5799
  br label %if.end, !dbg !5799

if.end:                                           ; preds = %if.then, %cond.end11
  %13 = load i64, i64* %en, align 8, !dbg !5800
  %cmp16 = icmp eq i64 %13, 0, !dbg !5802
  br i1 %cmp16, label %if.then18, label %if.end19, !dbg !5803

if.then18:                                        ; preds = %if.end
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5804
  call void @mpz_set_ui(%struct.__mpz_struct* %14, i64 1), !dbg !5806
  br label %return, !dbg !5807

if.end19:                                         ; preds = %if.end
  %15 = load %struct.__mpz_struct*, %struct.__mpz_struct** %m.addr, align 8, !dbg !5808
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %15, i32 0, i32 2, !dbg !5809
  %16 = load i64*, i64** %_mp_d, align 8, !dbg !5809
  store i64* %16, i64** %mp, align 8, !dbg !5810
  %17 = load i64*, i64** %mp, align 8, !dbg !5811
  %18 = load i64, i64* %mn, align 8, !dbg !5812
  call void @mpn_div_qr_invert(%struct.gmp_div_inverse* %minv, i64* %17, i64 %18), !dbg !5813
  %shift20 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %minv, i32 0, i32 0, !dbg !5814
  %19 = load i32, i32* %shift20, align 8, !dbg !5814
  store i32 %19, i32* %shift, align 4, !dbg !5815
  %20 = load i32, i32* %shift, align 4, !dbg !5816
  %cmp21 = icmp ugt i32 %20, 0, !dbg !5818
  br i1 %cmp21, label %if.then23, label %if.end26, !dbg !5819

if.then23:                                        ; preds = %if.end19
  %shift24 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %minv, i32 0, i32 0, !dbg !5820
  store i32 0, i32* %shift24, align 8, !dbg !5822
  %21 = load i64, i64* %mn, align 8, !dbg !5823
  %call = call i64* @gmp_xalloc_limbs(i64 %21), !dbg !5824
  store i64* %call, i64** %tp, align 8, !dbg !5825
  br label %do.body, !dbg !5826

do.body:                                          ; preds = %if.then23
  call void @llvm.dbg.declare(metadata i64* %__cy, metadata !5827, metadata !DIExpression()), !dbg !5829
  %22 = load i64*, i64** %tp, align 8, !dbg !5829
  %23 = load i64*, i64** %mp, align 8, !dbg !5829
  %24 = load i64, i64* %mn, align 8, !dbg !5829
  %25 = load i32, i32* %shift, align 4, !dbg !5829
  %call25 = call i64 @mpn_lshift(i64* %22, i64* %23, i64 %24, i32 %25), !dbg !5829
  store i64 %call25, i64* %__cy, align 8, !dbg !5829
  br label %do.end, !dbg !5829

do.end:                                           ; preds = %do.body
  %26 = load i64*, i64** %tp, align 8, !dbg !5830
  store i64* %26, i64** %mp, align 8, !dbg !5831
  br label %if.end26, !dbg !5832

if.end26:                                         ; preds = %do.end, %if.end19
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %base, i64 0, i64 0, !dbg !5833
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !5834
  %27 = load %struct.__mpz_struct*, %struct.__mpz_struct** %e.addr, align 8, !dbg !5835
  %_mp_size27 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %27, i32 0, i32 1, !dbg !5837
  %28 = load i32, i32* %_mp_size27, align 4, !dbg !5837
  %cmp28 = icmp slt i32 %28, 0, !dbg !5838
  br i1 %cmp28, label %if.then30, label %if.else, !dbg !5839

if.then30:                                        ; preds = %if.end26
  %arraydecay31 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %base, i64 0, i64 0, !dbg !5840
  %29 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !5843
  %30 = load %struct.__mpz_struct*, %struct.__mpz_struct** %m.addr, align 8, !dbg !5844
  %call32 = call i32 @mpz_invert(%struct.__mpz_struct* %arraydecay31, %struct.__mpz_struct* %29, %struct.__mpz_struct* %30), !dbg !5845
  %tobool = icmp ne i32 %call32, 0, !dbg !5845
  br i1 %tobool, label %if.end34, label %if.then33, !dbg !5846

if.then33:                                        ; preds = %if.then30
  call void @gmp_die(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0)), !dbg !5847
  br label %if.end34, !dbg !5847

if.end34:                                         ; preds = %if.then33, %if.then30
  br label %if.end75, !dbg !5848

if.else:                                          ; preds = %if.end26
  call void @llvm.dbg.declare(metadata i64* %bn, metadata !5849, metadata !DIExpression()), !dbg !5851
  %arraydecay35 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %base, i64 0, i64 0, !dbg !5852
  %31 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !5853
  call void @mpz_abs(%struct.__mpz_struct* %arraydecay35, %struct.__mpz_struct* %31), !dbg !5854
  %arraydecay36 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %base, i64 0, i64 0, !dbg !5855
  %_mp_size37 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay36, i32 0, i32 1, !dbg !5855
  %32 = load i32, i32* %_mp_size37, align 4, !dbg !5855
  %conv38 = sext i32 %32 to i64, !dbg !5856
  store i64 %conv38, i64* %bn, align 8, !dbg !5857
  %33 = load i64, i64* %bn, align 8, !dbg !5858
  %34 = load i64, i64* %mn, align 8, !dbg !5860
  %cmp39 = icmp sge i64 %33, %34, !dbg !5861
  br i1 %cmp39, label %if.then41, label %if.end47, !dbg !5862

if.then41:                                        ; preds = %if.else
  %arraydecay42 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %base, i64 0, i64 0, !dbg !5863
  %_mp_d43 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay42, i32 0, i32 2, !dbg !5863
  %35 = load i64*, i64** %_mp_d43, align 8, !dbg !5863
  %arraydecay44 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %base, i64 0, i64 0, !dbg !5865
  %_mp_size45 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay44, i32 0, i32 1, !dbg !5865
  %36 = load i32, i32* %_mp_size45, align 4, !dbg !5865
  %conv46 = sext i32 %36 to i64, !dbg !5866
  %37 = load i64*, i64** %mp, align 8, !dbg !5867
  %38 = load i64, i64* %mn, align 8, !dbg !5868
  call void @mpn_div_qr_preinv(i64* null, i64* %35, i64 %conv46, i64* %37, i64 %38, %struct.gmp_div_inverse* %minv), !dbg !5869
  %39 = load i64, i64* %mn, align 8, !dbg !5870
  store i64 %39, i64* %bn, align 8, !dbg !5871
  br label %if.end47, !dbg !5872

if.end47:                                         ; preds = %if.then41, %if.else
  %40 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !5873
  %_mp_size48 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %40, i32 0, i32 1, !dbg !5875
  %41 = load i32, i32* %_mp_size48, align 4, !dbg !5875
  %cmp49 = icmp slt i32 %41, 0, !dbg !5876
  br i1 %cmp49, label %if.then51, label %if.end68, !dbg !5877

if.then51:                                        ; preds = %if.end47
  call void @llvm.dbg.declare(metadata i64** %bp, metadata !5878, metadata !DIExpression()), !dbg !5880
  %42 = load i64, i64* %mn, align 8, !dbg !5881
  %arraydecay52 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %base, i64 0, i64 0, !dbg !5881
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay52, i32 0, i32 0, !dbg !5881
  %43 = load i32, i32* %_mp_alloc, align 16, !dbg !5881
  %conv53 = sext i32 %43 to i64, !dbg !5881
  %cmp54 = icmp sgt i64 %42, %conv53, !dbg !5881
  br i1 %cmp54, label %cond.true56, label %cond.false59, !dbg !5881

cond.true56:                                      ; preds = %if.then51
  %arraydecay57 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %base, i64 0, i64 0, !dbg !5881
  %44 = load i64, i64* %mn, align 8, !dbg !5881
  %call58 = call i8* @mpz_realloc(%struct.__mpz_struct* %arraydecay57, i64 %44), !dbg !5881
  br label %cond.end62, !dbg !5881

cond.false59:                                     ; preds = %if.then51
  %arraydecay60 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %base, i64 0, i64 0, !dbg !5881
  %_mp_d61 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay60, i32 0, i32 2, !dbg !5881
  %45 = load i64*, i64** %_mp_d61, align 8, !dbg !5881
  %46 = bitcast i64* %45 to i8*, !dbg !5881
  br label %cond.end62, !dbg !5881

cond.end62:                                       ; preds = %cond.false59, %cond.true56
  %cond63 = phi i8* [ %call58, %cond.true56 ], [ %46, %cond.false59 ], !dbg !5881
  %47 = bitcast i8* %cond63 to i64*, !dbg !5881
  store i64* %47, i64** %bp, align 8, !dbg !5880
  br label %do.body64, !dbg !5882

do.body64:                                        ; preds = %cond.end62
  call void @llvm.dbg.declare(metadata i64* %__cy65, metadata !5883, metadata !DIExpression()), !dbg !5885
  %48 = load i64*, i64** %bp, align 8, !dbg !5885
  %49 = load i64*, i64** %mp, align 8, !dbg !5885
  %50 = load i64, i64* %mn, align 8, !dbg !5885
  %51 = load i64*, i64** %bp, align 8, !dbg !5885
  %52 = load i64, i64* %bn, align 8, !dbg !5885
  %call66 = call i64 @mpn_sub(i64* %48, i64* %49, i64 %50, i64* %51, i64 %52), !dbg !5885
  store i64 %call66, i64* %__cy65, align 8, !dbg !5885
  br label %do.end67, !dbg !5885

do.end67:                                         ; preds = %do.body64
  %53 = load i64, i64* %mn, align 8, !dbg !5886
  store i64 %53, i64* %bn, align 8, !dbg !5887
  br label %if.end68, !dbg !5888

if.end68:                                         ; preds = %do.end67, %if.end47
  %arraydecay69 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %base, i64 0, i64 0, !dbg !5889
  %_mp_d70 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay69, i32 0, i32 2, !dbg !5889
  %54 = load i64*, i64** %_mp_d70, align 8, !dbg !5889
  %55 = load i64, i64* %bn, align 8, !dbg !5890
  %call71 = call i64 @mpn_normalized_size(i64* %54, i64 %55), !dbg !5891
  %conv72 = trunc i64 %call71 to i32, !dbg !5891
  %arraydecay73 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %base, i64 0, i64 0, !dbg !5892
  %_mp_size74 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay73, i32 0, i32 1, !dbg !5892
  store i32 %conv72, i32* %_mp_size74, align 4, !dbg !5893
  br label %if.end75

if.end75:                                         ; preds = %if.end68, %if.end34
  %arraydecay76 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5894
  call void @mpz_init_set_ui(%struct.__mpz_struct* %arraydecay76, i64 1), !dbg !5895
  br label %while.cond, !dbg !5896

while.cond:                                       ; preds = %do.end110, %if.end75
  %56 = load i64, i64* %en, align 8, !dbg !5897
  %dec = add nsw i64 %56, -1, !dbg !5897
  store i64 %dec, i64* %en, align 8, !dbg !5897
  %cmp77 = icmp sgt i64 %56, 0, !dbg !5898
  br i1 %cmp77, label %while.body, label %while.end, !dbg !5896

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i64* %w, metadata !5899, metadata !DIExpression()), !dbg !5901
  %57 = load %struct.__mpz_struct*, %struct.__mpz_struct** %e.addr, align 8, !dbg !5902
  %_mp_d79 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %57, i32 0, i32 2, !dbg !5903
  %58 = load i64*, i64** %_mp_d79, align 8, !dbg !5903
  %59 = load i64, i64* %en, align 8, !dbg !5904
  %arrayidx = getelementptr inbounds i64, i64* %58, i64 %59, !dbg !5902
  %60 = load i64, i64* %arrayidx, align 8, !dbg !5902
  store i64 %60, i64* %w, align 8, !dbg !5901
  call void @llvm.dbg.declare(metadata i64* %bit, metadata !5905, metadata !DIExpression()), !dbg !5906
  store i64 -9223372036854775808, i64* %bit, align 8, !dbg !5907
  br label %do.body80, !dbg !5908

do.body80:                                        ; preds = %do.cond, %while.body
  %arraydecay81 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5909
  %arraydecay82 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5911
  %arraydecay83 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5912
  call void @mpz_mul(%struct.__mpz_struct* %arraydecay81, %struct.__mpz_struct* %arraydecay82, %struct.__mpz_struct* %arraydecay83), !dbg !5913
  %61 = load i64, i64* %w, align 8, !dbg !5914
  %62 = load i64, i64* %bit, align 8, !dbg !5916
  %and = and i64 %61, %62, !dbg !5917
  %tobool84 = icmp ne i64 %and, 0, !dbg !5917
  br i1 %tobool84, label %if.then85, label %if.end89, !dbg !5918

if.then85:                                        ; preds = %do.body80
  %arraydecay86 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5919
  %arraydecay87 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5920
  %arraydecay88 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %base, i64 0, i64 0, !dbg !5921
  call void @mpz_mul(%struct.__mpz_struct* %arraydecay86, %struct.__mpz_struct* %arraydecay87, %struct.__mpz_struct* %arraydecay88), !dbg !5922
  br label %if.end89, !dbg !5922

if.end89:                                         ; preds = %if.then85, %do.body80
  %arraydecay90 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5923
  %_mp_size91 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay90, i32 0, i32 1, !dbg !5923
  %63 = load i32, i32* %_mp_size91, align 4, !dbg !5923
  %conv92 = sext i32 %63 to i64, !dbg !5925
  %64 = load i64, i64* %mn, align 8, !dbg !5926
  %cmp93 = icmp sgt i64 %conv92, %64, !dbg !5927
  br i1 %cmp93, label %if.then95, label %if.end107, !dbg !5928

if.then95:                                        ; preds = %if.end89
  %arraydecay96 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5929
  %_mp_d97 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay96, i32 0, i32 2, !dbg !5929
  %65 = load i64*, i64** %_mp_d97, align 8, !dbg !5929
  %arraydecay98 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5931
  %_mp_size99 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay98, i32 0, i32 1, !dbg !5931
  %66 = load i32, i32* %_mp_size99, align 4, !dbg !5931
  %conv100 = sext i32 %66 to i64, !dbg !5932
  %67 = load i64*, i64** %mp, align 8, !dbg !5933
  %68 = load i64, i64* %mn, align 8, !dbg !5934
  call void @mpn_div_qr_preinv(i64* null, i64* %65, i64 %conv100, i64* %67, i64 %68, %struct.gmp_div_inverse* %minv), !dbg !5935
  %arraydecay101 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5936
  %_mp_d102 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay101, i32 0, i32 2, !dbg !5936
  %69 = load i64*, i64** %_mp_d102, align 8, !dbg !5936
  %70 = load i64, i64* %mn, align 8, !dbg !5937
  %call103 = call i64 @mpn_normalized_size(i64* %69, i64 %70), !dbg !5938
  %conv104 = trunc i64 %call103 to i32, !dbg !5938
  %arraydecay105 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5939
  %_mp_size106 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay105, i32 0, i32 1, !dbg !5939
  store i32 %conv104, i32* %_mp_size106, align 4, !dbg !5940
  br label %if.end107, !dbg !5941

if.end107:                                        ; preds = %if.then95, %if.end89
  %71 = load i64, i64* %bit, align 8, !dbg !5942
  %shr = lshr i64 %71, 1, !dbg !5942
  store i64 %shr, i64* %bit, align 8, !dbg !5942
  br label %do.cond, !dbg !5943

do.cond:                                          ; preds = %if.end107
  %72 = load i64, i64* %bit, align 8, !dbg !5944
  %cmp108 = icmp ugt i64 %72, 0, !dbg !5945
  br i1 %cmp108, label %do.body80, label %do.end110, !dbg !5943, !llvm.loop !5946

do.end110:                                        ; preds = %do.cond
  br label %while.cond, !dbg !5896, !llvm.loop !5948

while.end:                                        ; preds = %while.cond
  %arraydecay111 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5950
  %_mp_size112 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay111, i32 0, i32 1, !dbg !5950
  %73 = load i32, i32* %_mp_size112, align 4, !dbg !5950
  %conv113 = sext i32 %73 to i64, !dbg !5952
  %74 = load i64, i64* %mn, align 8, !dbg !5953
  %cmp114 = icmp sge i64 %conv113, %74, !dbg !5954
  br i1 %cmp114, label %if.then116, label %if.end129, !dbg !5955

if.then116:                                       ; preds = %while.end
  %75 = load i32, i32* %shift, align 4, !dbg !5956
  %shift117 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %minv, i32 0, i32 0, !dbg !5958
  store i32 %75, i32* %shift117, align 8, !dbg !5959
  %arraydecay118 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5960
  %_mp_d119 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay118, i32 0, i32 2, !dbg !5960
  %76 = load i64*, i64** %_mp_d119, align 8, !dbg !5960
  %arraydecay120 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5961
  %_mp_size121 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay120, i32 0, i32 1, !dbg !5961
  %77 = load i32, i32* %_mp_size121, align 4, !dbg !5961
  %conv122 = sext i32 %77 to i64, !dbg !5962
  %78 = load i64*, i64** %mp, align 8, !dbg !5963
  %79 = load i64, i64* %mn, align 8, !dbg !5964
  call void @mpn_div_qr_preinv(i64* null, i64* %76, i64 %conv122, i64* %78, i64 %79, %struct.gmp_div_inverse* %minv), !dbg !5965
  %arraydecay123 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5966
  %_mp_d124 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay123, i32 0, i32 2, !dbg !5966
  %80 = load i64*, i64** %_mp_d124, align 8, !dbg !5966
  %81 = load i64, i64* %mn, align 8, !dbg !5967
  %call125 = call i64 @mpn_normalized_size(i64* %80, i64 %81), !dbg !5968
  %conv126 = trunc i64 %call125 to i32, !dbg !5968
  %arraydecay127 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5969
  %_mp_size128 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay127, i32 0, i32 1, !dbg !5969
  store i32 %conv126, i32* %_mp_size128, align 4, !dbg !5970
  br label %if.end129, !dbg !5971

if.end129:                                        ; preds = %if.then116, %while.end
  %82 = load i64*, i64** %tp, align 8, !dbg !5972
  %tobool130 = icmp ne i64* %82, null, !dbg !5972
  br i1 %tobool130, label %if.then131, label %if.end132, !dbg !5974

if.then131:                                       ; preds = %if.end129
  %83 = load void (i8*, i64)*, void (i8*, i64)** @gmp_free_func, align 8, !dbg !5975
  %84 = load i64*, i64** %tp, align 8, !dbg !5975
  %85 = bitcast i64* %84 to i8*, !dbg !5975
  call void %83(i8* %85, i64 0), !dbg !5975
  br label %if.end132, !dbg !5975

if.end132:                                        ; preds = %if.then131, %if.end129
  %86 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !5976
  %arraydecay133 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5977
  call void @mpz_swap(%struct.__mpz_struct* %86, %struct.__mpz_struct* %arraydecay133), !dbg !5978
  %arraydecay134 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tr, i64 0, i64 0, !dbg !5979
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay134), !dbg !5980
  %arraydecay135 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %base, i64 0, i64 0, !dbg !5981
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay135), !dbg !5982
  br label %return, !dbg !5983

return:                                           ; preds = %if.end132, %if.then18
  ret void, !dbg !5983
}

; Function Attrs: noinline nounwind uwtable
define internal void @gmp_die(i8* %msg) #0 !dbg !5984 {
entry:
  %msg.addr = alloca i8*, align 8
  store i8* %msg, i8** %msg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msg.addr, metadata !5990, metadata !DIExpression()), !dbg !5991
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5992
  %1 = load i8*, i8** %msg.addr, align 8, !dbg !5993
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0), i8* %1), !dbg !5994
  call void @abort() #8, !dbg !5995
  unreachable, !dbg !5995
}

; Function Attrs: noinline nounwind uwtable
define internal void @mpn_div_qr_invert(%struct.gmp_div_inverse* %inv, i64* %dp, i64 %dn) #0 !dbg !5996 {
entry:
  %inv.addr = alloca %struct.gmp_div_inverse*, align 8
  %dp.addr = alloca i64*, align 8
  %dn.addr = alloca i64, align 8
  %shift = alloca i32, align 4
  %d1 = alloca i64, align 8
  %d0 = alloca i64, align 8
  %__clz_x = alloca i64, align 8
  %__clz_c = alloca i32, align 4
  store %struct.gmp_div_inverse* %inv, %struct.gmp_div_inverse** %inv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gmp_div_inverse** %inv.addr, metadata !6000, metadata !DIExpression()), !dbg !6001
  store i64* %dp, i64** %dp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %dp.addr, metadata !6002, metadata !DIExpression()), !dbg !6003
  store i64 %dn, i64* %dn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %dn.addr, metadata !6004, metadata !DIExpression()), !dbg !6005
  %0 = load i64, i64* %dn.addr, align 8, !dbg !6006
  %cmp = icmp eq i64 %0, 1, !dbg !6008
  br i1 %cmp, label %if.then, label %if.else, !dbg !6009

if.then:                                          ; preds = %entry
  %1 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !6010
  %2 = load i64*, i64** %dp.addr, align 8, !dbg !6011
  %arrayidx = getelementptr inbounds i64, i64* %2, i64 0, !dbg !6011
  %3 = load i64, i64* %arrayidx, align 8, !dbg !6011
  call void @mpn_div_qr_1_invert(%struct.gmp_div_inverse* %1, i64 %3), !dbg !6012
  br label %if.end33, !dbg !6012

if.else:                                          ; preds = %entry
  %4 = load i64, i64* %dn.addr, align 8, !dbg !6013
  %cmp1 = icmp eq i64 %4, 2, !dbg !6015
  br i1 %cmp1, label %if.then2, label %if.else5, !dbg !6016

if.then2:                                         ; preds = %if.else
  %5 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !6017
  %6 = load i64*, i64** %dp.addr, align 8, !dbg !6018
  %arrayidx3 = getelementptr inbounds i64, i64* %6, i64 1, !dbg !6018
  %7 = load i64, i64* %arrayidx3, align 8, !dbg !6018
  %8 = load i64*, i64** %dp.addr, align 8, !dbg !6019
  %arrayidx4 = getelementptr inbounds i64, i64* %8, i64 0, !dbg !6019
  %9 = load i64, i64* %arrayidx4, align 8, !dbg !6019
  call void @mpn_div_qr_2_invert(%struct.gmp_div_inverse* %5, i64 %7, i64 %9), !dbg !6020
  br label %if.end32, !dbg !6020

if.else5:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !6021, metadata !DIExpression()), !dbg !6023
  call void @llvm.dbg.declare(metadata i64* %d1, metadata !6024, metadata !DIExpression()), !dbg !6025
  call void @llvm.dbg.declare(metadata i64* %d0, metadata !6026, metadata !DIExpression()), !dbg !6027
  %10 = load i64*, i64** %dp.addr, align 8, !dbg !6028
  %11 = load i64, i64* %dn.addr, align 8, !dbg !6029
  %sub = sub nsw i64 %11, 1, !dbg !6030
  %arrayidx6 = getelementptr inbounds i64, i64* %10, i64 %sub, !dbg !6028
  %12 = load i64, i64* %arrayidx6, align 8, !dbg !6028
  store i64 %12, i64* %d1, align 8, !dbg !6031
  %13 = load i64*, i64** %dp.addr, align 8, !dbg !6032
  %14 = load i64, i64* %dn.addr, align 8, !dbg !6033
  %sub7 = sub nsw i64 %14, 2, !dbg !6034
  %arrayidx8 = getelementptr inbounds i64, i64* %13, i64 %sub7, !dbg !6032
  %15 = load i64, i64* %arrayidx8, align 8, !dbg !6032
  store i64 %15, i64* %d0, align 8, !dbg !6035
  br label %do.body, !dbg !6036

do.body:                                          ; preds = %if.else5
  call void @llvm.dbg.declare(metadata i64* %__clz_x, metadata !6037, metadata !DIExpression()), !dbg !6039
  %16 = load i64, i64* %d1, align 8, !dbg !6039
  store i64 %16, i64* %__clz_x, align 8, !dbg !6039
  call void @llvm.dbg.declare(metadata i32* %__clz_c, metadata !6040, metadata !DIExpression()), !dbg !6039
  store i32 0, i32* %__clz_c, align 4, !dbg !6041
  br label %for.cond, !dbg !6041

for.cond:                                         ; preds = %for.inc, %do.body
  %17 = load i64, i64* %__clz_x, align 8, !dbg !6043
  %and = and i64 %17, -72057594037927936, !dbg !6043
  %cmp9 = icmp eq i64 %and, 0, !dbg !6043
  br i1 %cmp9, label %for.body, label %for.end, !dbg !6041

for.body:                                         ; preds = %for.cond
  %18 = load i64, i64* %__clz_x, align 8, !dbg !6043
  %shl = shl i64 %18, 8, !dbg !6043
  store i64 %shl, i64* %__clz_x, align 8, !dbg !6043
  br label %for.inc, !dbg !6043

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %__clz_c, align 4, !dbg !6043
  %add = add i32 %19, 8, !dbg !6043
  store i32 %add, i32* %__clz_c, align 4, !dbg !6043
  br label %for.cond, !dbg !6043, !llvm.loop !6045

for.end:                                          ; preds = %for.cond
  br label %for.cond10, !dbg !6039

for.cond10:                                       ; preds = %for.inc15, %for.end
  %20 = load i64, i64* %__clz_x, align 8, !dbg !6046
  %and11 = and i64 %20, -9223372036854775808, !dbg !6046
  %cmp12 = icmp eq i64 %and11, 0, !dbg !6046
  br i1 %cmp12, label %for.body13, label %for.end16, !dbg !6049

for.body13:                                       ; preds = %for.cond10
  %21 = load i64, i64* %__clz_x, align 8, !dbg !6046
  %shl14 = shl i64 %21, 1, !dbg !6046
  store i64 %shl14, i64* %__clz_x, align 8, !dbg !6046
  br label %for.inc15, !dbg !6046

for.inc15:                                        ; preds = %for.body13
  %22 = load i32, i32* %__clz_c, align 4, !dbg !6046
  %inc = add i32 %22, 1, !dbg !6046
  store i32 %inc, i32* %__clz_c, align 4, !dbg !6046
  br label %for.cond10, !dbg !6046, !llvm.loop !6050

for.end16:                                        ; preds = %for.cond10
  %23 = load i32, i32* %__clz_c, align 4, !dbg !6039
  store i32 %23, i32* %shift, align 4, !dbg !6039
  br label %do.end, !dbg !6039

do.end:                                           ; preds = %for.end16
  %24 = load i32, i32* %shift, align 4, !dbg !6051
  %25 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !6052
  %shift17 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %25, i32 0, i32 0, !dbg !6053
  store i32 %24, i32* %shift17, align 8, !dbg !6054
  %26 = load i32, i32* %shift, align 4, !dbg !6055
  %cmp18 = icmp ugt i32 %26, 0, !dbg !6057
  br i1 %cmp18, label %if.then19, label %if.end, !dbg !6058

if.then19:                                        ; preds = %do.end
  %27 = load i64, i64* %d1, align 8, !dbg !6059
  %28 = load i32, i32* %shift, align 4, !dbg !6061
  %sh_prom = zext i32 %28 to i64, !dbg !6062
  %shl20 = shl i64 %27, %sh_prom, !dbg !6062
  %29 = load i64, i64* %d0, align 8, !dbg !6063
  %30 = load i32, i32* %shift, align 4, !dbg !6064
  %conv = zext i32 %30 to i64, !dbg !6064
  %sub21 = sub i64 64, %conv, !dbg !6065
  %shr = lshr i64 %29, %sub21, !dbg !6066
  %or = or i64 %shl20, %shr, !dbg !6067
  store i64 %or, i64* %d1, align 8, !dbg !6068
  %31 = load i64, i64* %d0, align 8, !dbg !6069
  %32 = load i32, i32* %shift, align 4, !dbg !6070
  %sh_prom22 = zext i32 %32 to i64, !dbg !6071
  %shl23 = shl i64 %31, %sh_prom22, !dbg !6071
  %33 = load i64*, i64** %dp.addr, align 8, !dbg !6072
  %34 = load i64, i64* %dn.addr, align 8, !dbg !6073
  %sub24 = sub nsw i64 %34, 3, !dbg !6074
  %arrayidx25 = getelementptr inbounds i64, i64* %33, i64 %sub24, !dbg !6072
  %35 = load i64, i64* %arrayidx25, align 8, !dbg !6072
  %36 = load i32, i32* %shift, align 4, !dbg !6075
  %conv26 = zext i32 %36 to i64, !dbg !6075
  %sub27 = sub i64 64, %conv26, !dbg !6076
  %shr28 = lshr i64 %35, %sub27, !dbg !6077
  %or29 = or i64 %shl23, %shr28, !dbg !6078
  store i64 %or29, i64* %d0, align 8, !dbg !6079
  br label %if.end, !dbg !6080

if.end:                                           ; preds = %if.then19, %do.end
  %37 = load i64, i64* %d1, align 8, !dbg !6081
  %38 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !6082
  %d130 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %38, i32 0, i32 1, !dbg !6083
  store i64 %37, i64* %d130, align 8, !dbg !6084
  %39 = load i64, i64* %d0, align 8, !dbg !6085
  %40 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !6086
  %d031 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %40, i32 0, i32 2, !dbg !6087
  store i64 %39, i64* %d031, align 8, !dbg !6088
  %41 = load i64, i64* %d1, align 8, !dbg !6089
  %42 = load i64, i64* %d0, align 8, !dbg !6090
  %call = call i64 @mpn_invert_3by2(i64 %41, i64 %42), !dbg !6091
  %43 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !6092
  %di = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %43, i32 0, i32 3, !dbg !6093
  store i64 %call, i64* %di, align 8, !dbg !6094
  br label %if.end32

if.end32:                                         ; preds = %if.end, %if.then2
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then
  ret void, !dbg !6095
}

; Function Attrs: noinline nounwind uwtable
define internal void @mpn_div_qr_preinv(i64* %qp, i64* %np, i64 %nn, i64* %dp, i64 %dn, %struct.gmp_div_inverse* %inv) #0 !dbg !6096 {
entry:
  %qp.addr = alloca i64*, align 8
  %np.addr = alloca i64*, align 8
  %nn.addr = alloca i64, align 8
  %dp.addr = alloca i64*, align 8
  %dn.addr = alloca i64, align 8
  %inv.addr = alloca %struct.gmp_div_inverse*, align 8
  %nh = alloca i64, align 8
  %shift = alloca i32, align 4
  %__cy = alloca i64, align 8
  store i64* %qp, i64** %qp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %qp.addr, metadata !6101, metadata !DIExpression()), !dbg !6102
  store i64* %np, i64** %np.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %np.addr, metadata !6103, metadata !DIExpression()), !dbg !6104
  store i64 %nn, i64* %nn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nn.addr, metadata !6105, metadata !DIExpression()), !dbg !6106
  store i64* %dp, i64** %dp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %dp.addr, metadata !6107, metadata !DIExpression()), !dbg !6108
  store i64 %dn, i64* %dn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %dn.addr, metadata !6109, metadata !DIExpression()), !dbg !6110
  store %struct.gmp_div_inverse* %inv, %struct.gmp_div_inverse** %inv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gmp_div_inverse** %inv.addr, metadata !6111, metadata !DIExpression()), !dbg !6112
  %0 = load i64, i64* %dn.addr, align 8, !dbg !6113
  %cmp = icmp eq i64 %0, 1, !dbg !6115
  br i1 %cmp, label %if.then, label %if.else, !dbg !6116

if.then:                                          ; preds = %entry
  %1 = load i64*, i64** %qp.addr, align 8, !dbg !6117
  %2 = load i64*, i64** %np.addr, align 8, !dbg !6118
  %3 = load i64, i64* %nn.addr, align 8, !dbg !6119
  %4 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !6120
  %call = call i64 @mpn_div_qr_1_preinv(i64* %1, i64* %2, i64 %3, %struct.gmp_div_inverse* %4), !dbg !6121
  %5 = load i64*, i64** %np.addr, align 8, !dbg !6122
  %arrayidx = getelementptr inbounds i64, i64* %5, i64 0, !dbg !6122
  store i64 %call, i64* %arrayidx, align 8, !dbg !6123
  br label %if.end14, !dbg !6122

if.else:                                          ; preds = %entry
  %6 = load i64, i64* %dn.addr, align 8, !dbg !6124
  %cmp1 = icmp eq i64 %6, 2, !dbg !6126
  br i1 %cmp1, label %if.then2, label %if.else3, !dbg !6127

if.then2:                                         ; preds = %if.else
  %7 = load i64*, i64** %qp.addr, align 8, !dbg !6128
  %8 = load i64*, i64** %np.addr, align 8, !dbg !6129
  %9 = load i64*, i64** %np.addr, align 8, !dbg !6130
  %10 = load i64, i64* %nn.addr, align 8, !dbg !6131
  %11 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !6132
  call void @mpn_div_qr_2_preinv(i64* %7, i64* %8, i64* %9, i64 %10, %struct.gmp_div_inverse* %11), !dbg !6133
  br label %if.end13, !dbg !6133

if.else3:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i64* %nh, metadata !6134, metadata !DIExpression()), !dbg !6136
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !6137, metadata !DIExpression()), !dbg !6138
  %12 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !6139
  %shift4 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %12, i32 0, i32 0, !dbg !6140
  %13 = load i32, i32* %shift4, align 8, !dbg !6140
  store i32 %13, i32* %shift, align 4, !dbg !6141
  %14 = load i32, i32* %shift, align 4, !dbg !6142
  %cmp5 = icmp ugt i32 %14, 0, !dbg !6144
  br i1 %cmp5, label %if.then6, label %if.else8, !dbg !6145

if.then6:                                         ; preds = %if.else3
  %15 = load i64*, i64** %np.addr, align 8, !dbg !6146
  %16 = load i64*, i64** %np.addr, align 8, !dbg !6147
  %17 = load i64, i64* %nn.addr, align 8, !dbg !6148
  %18 = load i32, i32* %shift, align 4, !dbg !6149
  %call7 = call i64 @mpn_lshift(i64* %15, i64* %16, i64 %17, i32 %18), !dbg !6150
  store i64 %call7, i64* %nh, align 8, !dbg !6151
  br label %if.end, !dbg !6152

if.else8:                                         ; preds = %if.else3
  store i64 0, i64* %nh, align 8, !dbg !6153
  br label %if.end

if.end:                                           ; preds = %if.else8, %if.then6
  %19 = load i64*, i64** %qp.addr, align 8, !dbg !6154
  %20 = load i64*, i64** %np.addr, align 8, !dbg !6155
  %21 = load i64, i64* %nn.addr, align 8, !dbg !6156
  %22 = load i64, i64* %nh, align 8, !dbg !6157
  %23 = load i64*, i64** %dp.addr, align 8, !dbg !6158
  %24 = load i64, i64* %dn.addr, align 8, !dbg !6159
  %25 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !6160
  %di = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %25, i32 0, i32 3, !dbg !6161
  %26 = load i64, i64* %di, align 8, !dbg !6161
  call void @mpn_div_qr_pi1(i64* %19, i64* %20, i64 %21, i64 %22, i64* %23, i64 %24, i64 %26), !dbg !6162
  %27 = load i32, i32* %shift, align 4, !dbg !6163
  %cmp9 = icmp ugt i32 %27, 0, !dbg !6165
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !6166

if.then10:                                        ; preds = %if.end
  br label %do.body, !dbg !6167

do.body:                                          ; preds = %if.then10
  call void @llvm.dbg.declare(metadata i64* %__cy, metadata !6168, metadata !DIExpression()), !dbg !6170
  %28 = load i64*, i64** %np.addr, align 8, !dbg !6170
  %29 = load i64*, i64** %np.addr, align 8, !dbg !6170
  %30 = load i64, i64* %dn.addr, align 8, !dbg !6170
  %31 = load i32, i32* %shift, align 4, !dbg !6170
  %call11 = call i64 @mpn_rshift(i64* %28, i64* %29, i64 %30, i32 %31), !dbg !6170
  store i64 %call11, i64* %__cy, align 8, !dbg !6170
  br label %do.end, !dbg !6170

do.end:                                           ; preds = %do.body
  br label %if.end12, !dbg !6170

if.end12:                                         ; preds = %do.end, %if.end
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.then2
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then
  ret void, !dbg !6171
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_powm_ui(%struct.__mpz_struct* %r, %struct.__mpz_struct* %b, i64 %elimb, %struct.__mpz_struct* %m) #0 !dbg !6172 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %b.addr = alloca %struct.__mpz_struct*, align 8
  %elimb.addr = alloca i64, align 8
  %m.addr = alloca %struct.__mpz_struct*, align 8
  %e = alloca [1 x %struct.__mpz_struct], align 16
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !6175, metadata !DIExpression()), !dbg !6176
  store %struct.__mpz_struct* %b, %struct.__mpz_struct** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %b.addr, metadata !6177, metadata !DIExpression()), !dbg !6178
  store i64 %elimb, i64* %elimb.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %elimb.addr, metadata !6179, metadata !DIExpression()), !dbg !6180
  store %struct.__mpz_struct* %m, %struct.__mpz_struct** %m.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %m.addr, metadata !6181, metadata !DIExpression()), !dbg !6182
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %e, metadata !6183, metadata !DIExpression()), !dbg !6184
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %e, i64 0, i64 0, !dbg !6185
  %0 = load i64, i64* %elimb.addr, align 8, !dbg !6186
  call void @mpz_init_set_ui(%struct.__mpz_struct* %arraydecay, i64 %0), !dbg !6187
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !6188
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %b.addr, align 8, !dbg !6189
  %arraydecay1 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %e, i64 0, i64 0, !dbg !6190
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %m.addr, align 8, !dbg !6191
  call void @mpz_powm(%struct.__mpz_struct* %1, %struct.__mpz_struct* %2, %struct.__mpz_struct* %arraydecay1, %struct.__mpz_struct* %3), !dbg !6192
  %arraydecay2 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %e, i64 0, i64 0, !dbg !6193
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay2), !dbg !6194
  ret void, !dbg !6195
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_rootrem(%struct.__mpz_struct* %x, %struct.__mpz_struct* %r, %struct.__mpz_struct* %y, i64 %z) #0 !dbg !6196 {
entry:
  %x.addr = alloca %struct.__mpz_struct*, align 8
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %y.addr = alloca %struct.__mpz_struct*, align 8
  %z.addr = alloca i64, align 8
  %sgn = alloca i32, align 4
  %t = alloca [1 x %struct.__mpz_struct], align 16
  %u = alloca [1 x %struct.__mpz_struct], align 16
  %tb = alloca i64, align 8
  %v = alloca [1 x %struct.__mpz_struct], align 16
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %x.addr, metadata !6199, metadata !DIExpression()), !dbg !6200
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !6201, metadata !DIExpression()), !dbg !6202
  store %struct.__mpz_struct* %y, %struct.__mpz_struct** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %y.addr, metadata !6203, metadata !DIExpression()), !dbg !6204
  store i64 %z, i64* %z.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %z.addr, metadata !6205, metadata !DIExpression()), !dbg !6206
  call void @llvm.dbg.declare(metadata i32* %sgn, metadata !6207, metadata !DIExpression()), !dbg !6208
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %t, metadata !6209, metadata !DIExpression()), !dbg !6210
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %u, metadata !6211, metadata !DIExpression()), !dbg !6212
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6213
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !6214
  %1 = load i32, i32* %_mp_size, align 4, !dbg !6214
  %cmp = icmp slt i32 %1, 0, !dbg !6215
  %conv = zext i1 %cmp to i32, !dbg !6215
  store i32 %conv, i32* %sgn, align 4, !dbg !6216
  %2 = load i64, i64* %z.addr, align 8, !dbg !6217
  %neg = xor i64 %2, -1, !dbg !6219
  %3 = load i32, i32* %sgn, align 4, !dbg !6220
  %conv1 = sext i32 %3 to i64, !dbg !6220
  %and = and i64 %neg, %conv1, !dbg !6221
  %cmp2 = icmp ne i64 %and, 0, !dbg !6222
  br i1 %cmp2, label %if.then, label %if.end, !dbg !6223

if.then:                                          ; preds = %entry
  call void @gmp_die(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0)), !dbg !6224
  br label %if.end, !dbg !6224

if.end:                                           ; preds = %if.then, %entry
  %4 = load i64, i64* %z.addr, align 8, !dbg !6225
  %cmp4 = icmp eq i64 %4, 0, !dbg !6227
  br i1 %cmp4, label %if.then6, label %if.end7, !dbg !6228

if.then6:                                         ; preds = %if.end
  call void @gmp_die(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0)), !dbg !6229
  br label %if.end7, !dbg !6229

if.end7:                                          ; preds = %if.then6, %if.end
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6230
  %call = call i32 @mpz_cmpabs_ui(%struct.__mpz_struct* %5, i64 1), !dbg !6232
  %cmp8 = icmp sle i32 %call, 0, !dbg !6233
  br i1 %cmp8, label %if.then10, label %if.end17, !dbg !6234

if.then10:                                        ; preds = %if.end7
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !6235
  %tobool = icmp ne %struct.__mpz_struct* %6, null, !dbg !6235
  br i1 %tobool, label %if.then11, label %if.end12, !dbg !6238

if.then11:                                        ; preds = %if.then10
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !6239
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6240
  call void @mpz_set(%struct.__mpz_struct* %7, %struct.__mpz_struct* %8), !dbg !6241
  br label %if.end12, !dbg !6241

if.end12:                                         ; preds = %if.then11, %if.then10
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !6242
  %tobool13 = icmp ne %struct.__mpz_struct* %9, null, !dbg !6242
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !6244

if.then14:                                        ; preds = %if.end12
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !6245
  %_mp_size15 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 1, !dbg !6246
  store i32 0, i32* %_mp_size15, align 4, !dbg !6247
  br label %if.end16, !dbg !6245

if.end16:                                         ; preds = %if.then14, %if.end12
  br label %return, !dbg !6248

if.end17:                                         ; preds = %if.end7
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %u, i64 0, i64 0, !dbg !6249
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !6250
  call void @llvm.dbg.declare(metadata i64* %tb, metadata !6251, metadata !DIExpression()), !dbg !6253
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6254
  %call18 = call i64 @mpz_sizeinbase(%struct.__mpz_struct* %11, i32 2), !dbg !6255
  %12 = load i64, i64* %z.addr, align 8, !dbg !6256
  %div = udiv i64 %call18, %12, !dbg !6257
  %add = add i64 %div, 1, !dbg !6258
  store i64 %add, i64* %tb, align 8, !dbg !6259
  %arraydecay19 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6260
  %13 = load i64, i64* %tb, align 8, !dbg !6261
  call void @mpz_init2(%struct.__mpz_struct* %arraydecay19, i64 %13), !dbg !6262
  %arraydecay20 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6263
  %14 = load i64, i64* %tb, align 8, !dbg !6264
  call void @mpz_setbit(%struct.__mpz_struct* %arraydecay20, i64 %14), !dbg !6265
  %15 = load i64, i64* %z.addr, align 8, !dbg !6266
  %cmp21 = icmp eq i64 %15, 2, !dbg !6268
  br i1 %cmp21, label %if.then23, label %if.else, !dbg !6269

if.then23:                                        ; preds = %if.end17
  br label %do.body, !dbg !6270

do.body:                                          ; preds = %do.cond, %if.then23
  %arraydecay24 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %u, i64 0, i64 0, !dbg !6271
  %arraydecay25 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6273
  call void @mpz_swap(%struct.__mpz_struct* %arraydecay24, %struct.__mpz_struct* %arraydecay25), !dbg !6274
  %arraydecay26 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6275
  %16 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6276
  %arraydecay27 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %u, i64 0, i64 0, !dbg !6277
  call void @mpz_tdiv_q(%struct.__mpz_struct* %arraydecay26, %struct.__mpz_struct* %16, %struct.__mpz_struct* %arraydecay27), !dbg !6278
  %arraydecay28 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6279
  %arraydecay29 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6280
  %arraydecay30 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %u, i64 0, i64 0, !dbg !6281
  call void @mpz_add(%struct.__mpz_struct* %arraydecay28, %struct.__mpz_struct* %arraydecay29, %struct.__mpz_struct* %arraydecay30), !dbg !6282
  %arraydecay31 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6283
  %arraydecay32 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6284
  call void @mpz_tdiv_q_2exp(%struct.__mpz_struct* %arraydecay31, %struct.__mpz_struct* %arraydecay32, i64 1), !dbg !6285
  br label %do.cond, !dbg !6286

do.cond:                                          ; preds = %do.body
  %arraydecay33 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6287
  %arraydecay34 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %u, i64 0, i64 0, !dbg !6288
  %call35 = call i32 @mpz_cmpabs(%struct.__mpz_struct* %arraydecay33, %struct.__mpz_struct* %arraydecay34), !dbg !6289
  %cmp36 = icmp slt i32 %call35, 0, !dbg !6290
  br i1 %cmp36, label %do.body, label %do.end, !dbg !6286, !llvm.loop !6291

do.end:                                           ; preds = %do.cond
  br label %if.end68, !dbg !6286

if.else:                                          ; preds = %if.end17
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %v, metadata !6293, metadata !DIExpression()), !dbg !6295
  %arraydecay38 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %v, i64 0, i64 0, !dbg !6296
  call void @mpz_init(%struct.__mpz_struct* %arraydecay38), !dbg !6297
  %17 = load i32, i32* %sgn, align 4, !dbg !6298
  %tobool39 = icmp ne i32 %17, 0, !dbg !6298
  br i1 %tobool39, label %if.then40, label %if.end43, !dbg !6300

if.then40:                                        ; preds = %if.else
  %arraydecay41 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6301
  %arraydecay42 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6302
  call void @mpz_neg(%struct.__mpz_struct* %arraydecay41, %struct.__mpz_struct* %arraydecay42), !dbg !6303
  br label %if.end43, !dbg !6303

if.end43:                                         ; preds = %if.then40, %if.else
  br label %do.body44, !dbg !6304

do.body44:                                        ; preds = %do.cond60, %if.end43
  %arraydecay45 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %u, i64 0, i64 0, !dbg !6305
  %arraydecay46 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6307
  call void @mpz_swap(%struct.__mpz_struct* %arraydecay45, %struct.__mpz_struct* %arraydecay46), !dbg !6308
  %arraydecay47 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6309
  %arraydecay48 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %u, i64 0, i64 0, !dbg !6310
  %18 = load i64, i64* %z.addr, align 8, !dbg !6311
  %sub = sub i64 %18, 1, !dbg !6312
  call void @mpz_pow_ui(%struct.__mpz_struct* %arraydecay47, %struct.__mpz_struct* %arraydecay48, i64 %sub), !dbg !6313
  %arraydecay49 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6314
  %19 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6315
  %arraydecay50 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6316
  call void @mpz_tdiv_q(%struct.__mpz_struct* %arraydecay49, %struct.__mpz_struct* %19, %struct.__mpz_struct* %arraydecay50), !dbg !6317
  %arraydecay51 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %v, i64 0, i64 0, !dbg !6318
  %arraydecay52 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %u, i64 0, i64 0, !dbg !6319
  %20 = load i64, i64* %z.addr, align 8, !dbg !6320
  %sub53 = sub i64 %20, 1, !dbg !6321
  call void @mpz_mul_ui(%struct.__mpz_struct* %arraydecay51, %struct.__mpz_struct* %arraydecay52, i64 %sub53), !dbg !6322
  %arraydecay54 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6323
  %arraydecay55 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6324
  %arraydecay56 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %v, i64 0, i64 0, !dbg !6325
  call void @mpz_add(%struct.__mpz_struct* %arraydecay54, %struct.__mpz_struct* %arraydecay55, %struct.__mpz_struct* %arraydecay56), !dbg !6326
  %arraydecay57 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6327
  %arraydecay58 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6328
  %21 = load i64, i64* %z.addr, align 8, !dbg !6329
  %call59 = call i64 @mpz_tdiv_q_ui(%struct.__mpz_struct* %arraydecay57, %struct.__mpz_struct* %arraydecay58, i64 %21), !dbg !6330
  br label %do.cond60, !dbg !6331

do.cond60:                                        ; preds = %do.body44
  %arraydecay61 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6332
  %arraydecay62 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %u, i64 0, i64 0, !dbg !6333
  %call63 = call i32 @mpz_cmpabs(%struct.__mpz_struct* %arraydecay61, %struct.__mpz_struct* %arraydecay62), !dbg !6334
  %cmp64 = icmp slt i32 %call63, 0, !dbg !6335
  br i1 %cmp64, label %do.body44, label %do.end66, !dbg !6331, !llvm.loop !6336

do.end66:                                         ; preds = %do.cond60
  %arraydecay67 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %v, i64 0, i64 0, !dbg !6338
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay67), !dbg !6339
  br label %if.end68

if.end68:                                         ; preds = %do.end66, %do.end
  %22 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !6340
  %tobool69 = icmp ne %struct.__mpz_struct* %22, null, !dbg !6340
  br i1 %tobool69, label %if.then70, label %if.end74, !dbg !6342

if.then70:                                        ; preds = %if.end68
  %arraydecay71 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6343
  %arraydecay72 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %u, i64 0, i64 0, !dbg !6345
  %23 = load i64, i64* %z.addr, align 8, !dbg !6346
  call void @mpz_pow_ui(%struct.__mpz_struct* %arraydecay71, %struct.__mpz_struct* %arraydecay72, i64 %23), !dbg !6347
  %24 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !6348
  %25 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6349
  %arraydecay73 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6350
  call void @mpz_sub(%struct.__mpz_struct* %24, %struct.__mpz_struct* %25, %struct.__mpz_struct* %arraydecay73), !dbg !6351
  br label %if.end74, !dbg !6352

if.end74:                                         ; preds = %if.then70, %if.end68
  %26 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !6353
  %tobool75 = icmp ne %struct.__mpz_struct* %26, null, !dbg !6353
  br i1 %tobool75, label %if.then76, label %if.end78, !dbg !6355

if.then76:                                        ; preds = %if.end74
  %27 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !6356
  %arraydecay77 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %u, i64 0, i64 0, !dbg !6357
  call void @mpz_swap(%struct.__mpz_struct* %27, %struct.__mpz_struct* %arraydecay77), !dbg !6358
  br label %if.end78, !dbg !6358

if.end78:                                         ; preds = %if.then76, %if.end74
  %arraydecay79 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %u, i64 0, i64 0, !dbg !6359
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay79), !dbg !6360
  %arraydecay80 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6361
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay80), !dbg !6362
  br label %return, !dbg !6363

return:                                           ; preds = %if.end78, %if.end16
  ret void, !dbg !6363
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_sizeinbase(%struct.__mpz_struct* %u, i32 %base) #0 !dbg !6364 {
entry:
  %retval = alloca i64, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %base.addr = alloca i32, align 4
  %un = alloca i64, align 8
  %up = alloca i64*, align 8
  %tp = alloca i64*, align 8
  %bits = alloca i64, align 8
  %bi = alloca %struct.gmp_div_inverse, align 8
  %ndigits = alloca i64, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !6367, metadata !DIExpression()), !dbg !6368
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !6369, metadata !DIExpression()), !dbg !6370
  call void @llvm.dbg.declare(metadata i64* %un, metadata !6371, metadata !DIExpression()), !dbg !6372
  call void @llvm.dbg.declare(metadata i64** %up, metadata !6373, metadata !DIExpression()), !dbg !6374
  call void @llvm.dbg.declare(metadata i64** %tp, metadata !6375, metadata !DIExpression()), !dbg !6376
  call void @llvm.dbg.declare(metadata i64* %bits, metadata !6377, metadata !DIExpression()), !dbg !6378
  call void @llvm.dbg.declare(metadata %struct.gmp_div_inverse* %bi, metadata !6379, metadata !DIExpression()), !dbg !6380
  call void @llvm.dbg.declare(metadata i64* %ndigits, metadata !6381, metadata !DIExpression()), !dbg !6382
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !6383
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !6383
  %1 = load i32, i32* %_mp_size, align 4, !dbg !6383
  %cmp = icmp sge i32 %1, 0, !dbg !6383
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6383

cond.true:                                        ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !6383
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !6383
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !6383
  br label %cond.end, !dbg !6383

cond.false:                                       ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !6383
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !6383
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !6383
  %sub = sub nsw i32 0, %5, !dbg !6383
  br label %cond.end, !dbg !6383

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !6383
  %conv = sext i32 %cond to i64, !dbg !6383
  store i64 %conv, i64* %un, align 8, !dbg !6384
  %6 = load i64, i64* %un, align 8, !dbg !6385
  %cmp3 = icmp eq i64 %6, 0, !dbg !6387
  br i1 %cmp3, label %if.then, label %if.end, !dbg !6388

if.then:                                          ; preds = %cond.end
  store i64 1, i64* %retval, align 8, !dbg !6389
  br label %return, !dbg !6389

if.end:                                           ; preds = %cond.end
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !6390
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %7, i32 0, i32 2, !dbg !6391
  %8 = load i64*, i64** %_mp_d, align 8, !dbg !6391
  store i64* %8, i64** %up, align 8, !dbg !6392
  %9 = load i64, i64* %un, align 8, !dbg !6393
  %sub5 = sub nsw i64 %9, 1, !dbg !6394
  %mul = mul i64 %sub5, 64, !dbg !6395
  %10 = load i64*, i64** %up, align 8, !dbg !6396
  %11 = load i64, i64* %un, align 8, !dbg !6397
  %sub6 = sub nsw i64 %11, 1, !dbg !6398
  %arrayidx = getelementptr inbounds i64, i64* %10, i64 %sub6, !dbg !6396
  %12 = load i64, i64* %arrayidx, align 8, !dbg !6396
  %call = call i64 @mpn_limb_size_in_base_2(i64 %12), !dbg !6399
  %add = add i64 %mul, %call, !dbg !6400
  store i64 %add, i64* %bits, align 8, !dbg !6401
  %13 = load i32, i32* %base.addr, align 4, !dbg !6402
  switch i32 %13, label %sw.epilog [
    i32 2, label %sw.bb
    i32 4, label %sw.bb7
    i32 8, label %sw.bb9
    i32 16, label %sw.bb12
    i32 32, label %sw.bb15
  ], !dbg !6403

sw.bb:                                            ; preds = %if.end
  %14 = load i64, i64* %bits, align 8, !dbg !6404
  store i64 %14, i64* %retval, align 8, !dbg !6406
  br label %return, !dbg !6406

sw.bb7:                                           ; preds = %if.end
  %15 = load i64, i64* %bits, align 8, !dbg !6407
  %add8 = add i64 %15, 1, !dbg !6408
  %div = udiv i64 %add8, 2, !dbg !6409
  store i64 %div, i64* %retval, align 8, !dbg !6410
  br label %return, !dbg !6410

sw.bb9:                                           ; preds = %if.end
  %16 = load i64, i64* %bits, align 8, !dbg !6411
  %add10 = add i64 %16, 2, !dbg !6412
  %div11 = udiv i64 %add10, 3, !dbg !6413
  store i64 %div11, i64* %retval, align 8, !dbg !6414
  br label %return, !dbg !6414

sw.bb12:                                          ; preds = %if.end
  %17 = load i64, i64* %bits, align 8, !dbg !6415
  %add13 = add i64 %17, 3, !dbg !6416
  %div14 = udiv i64 %add13, 4, !dbg !6417
  store i64 %div14, i64* %retval, align 8, !dbg !6418
  br label %return, !dbg !6418

sw.bb15:                                          ; preds = %if.end
  %18 = load i64, i64* %bits, align 8, !dbg !6419
  %add16 = add i64 %18, 4, !dbg !6420
  %div17 = udiv i64 %add16, 5, !dbg !6421
  store i64 %div17, i64* %retval, align 8, !dbg !6422
  br label %return, !dbg !6422

sw.epilog:                                        ; preds = %if.end
  %19 = load i64, i64* %un, align 8, !dbg !6423
  %call18 = call i64* @gmp_xalloc_limbs(i64 %19), !dbg !6424
  store i64* %call18, i64** %tp, align 8, !dbg !6425
  %20 = load i64*, i64** %tp, align 8, !dbg !6426
  %21 = load i64*, i64** %up, align 8, !dbg !6427
  %22 = load i64, i64* %un, align 8, !dbg !6428
  call void @mpn_copyi(i64* %20, i64* %21, i64 %22), !dbg !6429
  %23 = load i32, i32* %base.addr, align 4, !dbg !6430
  %conv19 = sext i32 %23 to i64, !dbg !6430
  call void @mpn_div_qr_1_invert(%struct.gmp_div_inverse* %bi, i64 %conv19), !dbg !6431
  store i64 0, i64* %ndigits, align 8, !dbg !6432
  br label %do.body, !dbg !6433

do.body:                                          ; preds = %do.cond, %sw.epilog
  %24 = load i64, i64* %ndigits, align 8, !dbg !6434
  %inc = add i64 %24, 1, !dbg !6434
  store i64 %inc, i64* %ndigits, align 8, !dbg !6434
  %25 = load i64*, i64** %tp, align 8, !dbg !6436
  %26 = load i64*, i64** %tp, align 8, !dbg !6437
  %27 = load i64, i64* %un, align 8, !dbg !6438
  %call20 = call i64 @mpn_div_qr_1_preinv(i64* %25, i64* %26, i64 %27, %struct.gmp_div_inverse* %bi), !dbg !6439
  %28 = load i64*, i64** %tp, align 8, !dbg !6440
  %29 = load i64, i64* %un, align 8, !dbg !6441
  %sub21 = sub nsw i64 %29, 1, !dbg !6442
  %arrayidx22 = getelementptr inbounds i64, i64* %28, i64 %sub21, !dbg !6440
  %30 = load i64, i64* %arrayidx22, align 8, !dbg !6440
  %cmp23 = icmp eq i64 %30, 0, !dbg !6443
  %conv24 = zext i1 %cmp23 to i32, !dbg !6443
  %conv25 = sext i32 %conv24 to i64, !dbg !6444
  %31 = load i64, i64* %un, align 8, !dbg !6445
  %sub26 = sub nsw i64 %31, %conv25, !dbg !6445
  store i64 %sub26, i64* %un, align 8, !dbg !6445
  br label %do.cond, !dbg !6446

do.cond:                                          ; preds = %do.body
  %32 = load i64, i64* %un, align 8, !dbg !6447
  %cmp27 = icmp sgt i64 %32, 0, !dbg !6448
  br i1 %cmp27, label %do.body, label %do.end, !dbg !6446, !llvm.loop !6449

do.end:                                           ; preds = %do.cond
  %33 = load void (i8*, i64)*, void (i8*, i64)** @gmp_free_func, align 8, !dbg !6451
  %34 = load i64*, i64** %tp, align 8, !dbg !6451
  %35 = bitcast i64* %34 to i8*, !dbg !6451
  call void %33(i8* %35, i64 0), !dbg !6451
  %36 = load i64, i64* %ndigits, align 8, !dbg !6452
  store i64 %36, i64* %retval, align 8, !dbg !6453
  br label %return, !dbg !6453

return:                                           ; preds = %do.end, %sw.bb15, %sw.bb12, %sw.bb9, %sw.bb7, %sw.bb, %if.then
  %37 = load i64, i64* %retval, align 8, !dbg !6454
  ret i64 %37, !dbg !6454
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_root(%struct.__mpz_struct* %x, %struct.__mpz_struct* %y, i64 %z) #0 !dbg !6455 {
entry:
  %x.addr = alloca %struct.__mpz_struct*, align 8
  %y.addr = alloca %struct.__mpz_struct*, align 8
  %z.addr = alloca i64, align 8
  %res = alloca i32, align 4
  %r = alloca [1 x %struct.__mpz_struct], align 16
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %x.addr, metadata !6458, metadata !DIExpression()), !dbg !6459
  store %struct.__mpz_struct* %y, %struct.__mpz_struct** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %y.addr, metadata !6460, metadata !DIExpression()), !dbg !6461
  store i64 %z, i64* %z.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %z.addr, metadata !6462, metadata !DIExpression()), !dbg !6463
  call void @llvm.dbg.declare(metadata i32* %res, metadata !6464, metadata !DIExpression()), !dbg !6465
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %r, metadata !6466, metadata !DIExpression()), !dbg !6467
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %r, i64 0, i64 0, !dbg !6468
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !6469
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !6470
  %arraydecay1 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %r, i64 0, i64 0, !dbg !6471
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6472
  %2 = load i64, i64* %z.addr, align 8, !dbg !6473
  call void @mpz_rootrem(%struct.__mpz_struct* %0, %struct.__mpz_struct* %arraydecay1, %struct.__mpz_struct* %1, i64 %2), !dbg !6474
  %arraydecay2 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %r, i64 0, i64 0, !dbg !6475
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay2, i32 0, i32 1, !dbg !6475
  %3 = load i32, i32* %_mp_size, align 4, !dbg !6475
  %cmp = icmp eq i32 %3, 0, !dbg !6476
  %conv = zext i1 %cmp to i32, !dbg !6476
  store i32 %conv, i32* %res, align 4, !dbg !6477
  %arraydecay3 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %r, i64 0, i64 0, !dbg !6478
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay3), !dbg !6479
  %4 = load i32, i32* %res, align 4, !dbg !6480
  ret i32 %4, !dbg !6481
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_sqrtrem(%struct.__mpz_struct* %s, %struct.__mpz_struct* %r, %struct.__mpz_struct* %u) #0 !dbg !6482 {
entry:
  %s.addr = alloca %struct.__mpz_struct*, align 8
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %s, %struct.__mpz_struct** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %s.addr, metadata !6485, metadata !DIExpression()), !dbg !6486
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !6487, metadata !DIExpression()), !dbg !6488
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !6489, metadata !DIExpression()), !dbg !6490
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %s.addr, align 8, !dbg !6491
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !6492
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !6493
  call void @mpz_rootrem(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, i64 2), !dbg !6494
  ret void, !dbg !6495
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_sqrt(%struct.__mpz_struct* %s, %struct.__mpz_struct* %u) #0 !dbg !6496 {
entry:
  %s.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %s, %struct.__mpz_struct** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %s.addr, metadata !6497, metadata !DIExpression()), !dbg !6498
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !6499, metadata !DIExpression()), !dbg !6500
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %s.addr, align 8, !dbg !6501
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !6502
  call void @mpz_rootrem(%struct.__mpz_struct* %0, %struct.__mpz_struct* null, %struct.__mpz_struct* %1, i64 2), !dbg !6503
  ret void, !dbg !6504
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_perfect_square_p(%struct.__mpz_struct* %u) #0 !dbg !6505 {
entry:
  %retval = alloca i32, align 4
  %u.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !6506, metadata !DIExpression()), !dbg !6507
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !6508
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !6510
  %1 = load i32, i32* %_mp_size, align 4, !dbg !6510
  %cmp = icmp sle i32 %1, 0, !dbg !6511
  br i1 %cmp, label %if.then, label %if.else, !dbg !6512

if.then:                                          ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !6513
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !6514
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !6514
  %cmp2 = icmp eq i32 %3, 0, !dbg !6515
  %conv = zext i1 %cmp2 to i32, !dbg !6515
  store i32 %conv, i32* %retval, align 4, !dbg !6516
  br label %return, !dbg !6516

if.else:                                          ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !6517
  %call = call i32 @mpz_root(%struct.__mpz_struct* null, %struct.__mpz_struct* %4, i64 2), !dbg !6518
  store i32 %call, i32* %retval, align 4, !dbg !6519
  br label %return, !dbg !6519

return:                                           ; preds = %if.else, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !6520
  ret i32 %5, !dbg !6520
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpn_perfect_square_p(i64* %p, i64 %n) #0 !dbg !6521 {
entry:
  %p.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  %t = alloca [1 x %struct.__mpz_struct], align 16
  store i64* %p, i64** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %p.addr, metadata !6524, metadata !DIExpression()), !dbg !6525
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !6526, metadata !DIExpression()), !dbg !6527
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %t, metadata !6528, metadata !DIExpression()), !dbg !6529
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6530
  %0 = load i64*, i64** %p.addr, align 8, !dbg !6531
  %1 = load i64, i64* %n.addr, align 8, !dbg !6532
  %call = call %struct.__mpz_struct* @mpz_roinit_n(%struct.__mpz_struct* %arraydecay, i64* %0, i64 %1), !dbg !6533
  %call1 = call i32 @mpz_root(%struct.__mpz_struct* null, %struct.__mpz_struct* %call, i64 2), !dbg !6534
  ret i32 %call1, !dbg !6535
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_sqrtrem(i64* %sp, i64* %rp, i64* %p, i64 %n) #0 !dbg !6536 {
entry:
  %sp.addr = alloca i64*, align 8
  %rp.addr = alloca i64*, align 8
  %p.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  %s = alloca [1 x %struct.__mpz_struct], align 16
  %r = alloca [1 x %struct.__mpz_struct], align 16
  %u = alloca [1 x %struct.__mpz_struct], align 16
  %res = alloca i64, align 8
  store i64* %sp, i64** %sp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %sp.addr, metadata !6539, metadata !DIExpression()), !dbg !6540
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !6541, metadata !DIExpression()), !dbg !6542
  store i64* %p, i64** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %p.addr, metadata !6543, metadata !DIExpression()), !dbg !6544
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !6545, metadata !DIExpression()), !dbg !6546
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %s, metadata !6547, metadata !DIExpression()), !dbg !6548
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %r, metadata !6549, metadata !DIExpression()), !dbg !6550
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %u, metadata !6551, metadata !DIExpression()), !dbg !6552
  call void @llvm.dbg.declare(metadata i64* %res, metadata !6553, metadata !DIExpression()), !dbg !6554
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %r, i64 0, i64 0, !dbg !6555
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !6556
  %arraydecay1 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s, i64 0, i64 0, !dbg !6557
  call void @mpz_init(%struct.__mpz_struct* %arraydecay1), !dbg !6558
  %arraydecay2 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s, i64 0, i64 0, !dbg !6559
  %arraydecay3 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %r, i64 0, i64 0, !dbg !6560
  %arraydecay4 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %u, i64 0, i64 0, !dbg !6561
  %0 = load i64*, i64** %p.addr, align 8, !dbg !6562
  %1 = load i64, i64* %n.addr, align 8, !dbg !6563
  %call = call %struct.__mpz_struct* @mpz_roinit_n(%struct.__mpz_struct* %arraydecay4, i64* %0, i64 %1), !dbg !6564
  call void @mpz_rootrem(%struct.__mpz_struct* %arraydecay2, %struct.__mpz_struct* %arraydecay3, %struct.__mpz_struct* %call, i64 2), !dbg !6565
  %2 = load i64*, i64** %sp.addr, align 8, !dbg !6566
  %arraydecay5 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s, i64 0, i64 0, !dbg !6567
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay5, i32 0, i32 2, !dbg !6567
  %3 = load i64*, i64** %_mp_d, align 8, !dbg !6567
  %arraydecay6 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s, i64 0, i64 0, !dbg !6568
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay6, i32 0, i32 1, !dbg !6568
  %4 = load i32, i32* %_mp_size, align 4, !dbg !6568
  %conv = sext i32 %4 to i64, !dbg !6569
  call void @mpn_copyd(i64* %2, i64* %3, i64 %conv), !dbg !6570
  %arraydecay7 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %s, i64 0, i64 0, !dbg !6571
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay7), !dbg !6572
  %arraydecay8 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %r, i64 0, i64 0, !dbg !6573
  %_mp_size9 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay8, i32 0, i32 1, !dbg !6573
  %5 = load i32, i32* %_mp_size9, align 4, !dbg !6573
  %conv10 = sext i32 %5 to i64, !dbg !6574
  store i64 %conv10, i64* %res, align 8, !dbg !6575
  %6 = load i64*, i64** %rp.addr, align 8, !dbg !6576
  %tobool = icmp ne i64* %6, null, !dbg !6576
  br i1 %tobool, label %if.then, label %if.end, !dbg !6578

if.then:                                          ; preds = %entry
  %7 = load i64*, i64** %rp.addr, align 8, !dbg !6579
  %arraydecay11 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %r, i64 0, i64 0, !dbg !6580
  %_mp_d12 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay11, i32 0, i32 2, !dbg !6580
  %8 = load i64*, i64** %_mp_d12, align 8, !dbg !6580
  %9 = load i64, i64* %res, align 8, !dbg !6581
  call void @mpn_copyd(i64* %7, i64* %8, i64 %9), !dbg !6582
  br label %if.end, !dbg !6582

if.end:                                           ; preds = %if.then, %entry
  %arraydecay13 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %r, i64 0, i64 0, !dbg !6583
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay13), !dbg !6584
  %10 = load i64, i64* %res, align 8, !dbg !6585
  ret i64 %10, !dbg !6586
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_fac_ui(%struct.__mpz_struct* %x, i64 %n) #0 !dbg !6587 {
entry:
  %x.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca i64, align 8
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %x.addr, metadata !6588, metadata !DIExpression()), !dbg !6589
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !6590, metadata !DIExpression()), !dbg !6591
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !6592
  %1 = load i64, i64* %n.addr, align 8, !dbg !6593
  %2 = load i64, i64* %n.addr, align 8, !dbg !6594
  %cmp = icmp eq i64 %2, 0, !dbg !6595
  %conv = zext i1 %cmp to i32, !dbg !6595
  %conv1 = sext i32 %conv to i64, !dbg !6596
  %add = add i64 %1, %conv1, !dbg !6597
  call void @mpz_set_ui(%struct.__mpz_struct* %0, i64 %add), !dbg !6598
  br label %for.cond, !dbg !6599

for.cond:                                         ; preds = %for.body, %entry
  %3 = load i64, i64* %n.addr, align 8, !dbg !6600
  %cmp2 = icmp ugt i64 %3, 2, !dbg !6603
  br i1 %cmp2, label %for.body, label %for.end, !dbg !6604

for.body:                                         ; preds = %for.cond
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !6605
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !6606
  %6 = load i64, i64* %n.addr, align 8, !dbg !6607
  %dec = add i64 %6, -1, !dbg !6607
  store i64 %dec, i64* %n.addr, align 8, !dbg !6607
  call void @mpz_mul_ui(%struct.__mpz_struct* %4, %struct.__mpz_struct* %5, i64 %dec), !dbg !6608
  br label %for.cond, !dbg !6609, !llvm.loop !6610

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6612
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_bin_uiui(%struct.__mpz_struct* %r, i64 %n, i64 %k) #0 !dbg !6613 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %n.addr = alloca i64, align 8
  %k.addr = alloca i64, align 8
  %t = alloca [1 x %struct.__mpz_struct], align 16
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !6614, metadata !DIExpression()), !dbg !6615
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !6616, metadata !DIExpression()), !dbg !6617
  store i64 %k, i64* %k.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %k.addr, metadata !6618, metadata !DIExpression()), !dbg !6619
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %t, metadata !6620, metadata !DIExpression()), !dbg !6621
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !6622
  %1 = load i64, i64* %k.addr, align 8, !dbg !6623
  %2 = load i64, i64* %n.addr, align 8, !dbg !6624
  %cmp = icmp ule i64 %1, %2, !dbg !6625
  %conv = zext i1 %cmp to i32, !dbg !6625
  %conv1 = sext i32 %conv to i64, !dbg !6623
  call void @mpz_set_ui(%struct.__mpz_struct* %0, i64 %conv1), !dbg !6626
  %3 = load i64, i64* %k.addr, align 8, !dbg !6627
  %4 = load i64, i64* %n.addr, align 8, !dbg !6629
  %shr = lshr i64 %4, 1, !dbg !6630
  %cmp2 = icmp ugt i64 %3, %shr, !dbg !6631
  br i1 %cmp2, label %if.then, label %if.end, !dbg !6632

if.then:                                          ; preds = %entry
  %5 = load i64, i64* %k.addr, align 8, !dbg !6633
  %6 = load i64, i64* %n.addr, align 8, !dbg !6634
  %cmp4 = icmp ule i64 %5, %6, !dbg !6635
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !6636

cond.true:                                        ; preds = %if.then
  %7 = load i64, i64* %n.addr, align 8, !dbg !6637
  %8 = load i64, i64* %k.addr, align 8, !dbg !6638
  %sub = sub i64 %7, %8, !dbg !6639
  br label %cond.end, !dbg !6636

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !6636

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub, %cond.true ], [ 0, %cond.false ], !dbg !6636
  store i64 %cond, i64* %k.addr, align 8, !dbg !6640
  br label %if.end, !dbg !6641

if.end:                                           ; preds = %cond.end, %entry
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6642
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !6643
  %arraydecay6 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6644
  %9 = load i64, i64* %k.addr, align 8, !dbg !6645
  call void @mpz_fac_ui(%struct.__mpz_struct* %arraydecay6, i64 %9), !dbg !6646
  br label %for.cond, !dbg !6647

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i64, i64* %k.addr, align 8, !dbg !6648
  %cmp7 = icmp ugt i64 %10, 0, !dbg !6651
  br i1 %cmp7, label %for.body, label %for.end, !dbg !6652

for.body:                                         ; preds = %for.cond
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !6653
  %12 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !6654
  %13 = load i64, i64* %n.addr, align 8, !dbg !6655
  %dec = add i64 %13, -1, !dbg !6655
  store i64 %dec, i64* %n.addr, align 8, !dbg !6655
  call void @mpz_mul_ui(%struct.__mpz_struct* %11, %struct.__mpz_struct* %12, i64 %13), !dbg !6656
  br label %for.inc, !dbg !6656

for.inc:                                          ; preds = %for.body
  %14 = load i64, i64* %k.addr, align 8, !dbg !6657
  %dec9 = add i64 %14, -1, !dbg !6657
  store i64 %dec9, i64* %k.addr, align 8, !dbg !6657
  br label %for.cond, !dbg !6658, !llvm.loop !6659

for.end:                                          ; preds = %for.cond
  %15 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !6661
  %16 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !6662
  %arraydecay10 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6663
  call void @mpz_divexact(%struct.__mpz_struct* %15, %struct.__mpz_struct* %16, %struct.__mpz_struct* %arraydecay10), !dbg !6664
  %arraydecay11 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %t, i64 0, i64 0, !dbg !6665
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay11), !dbg !6666
  ret void, !dbg !6667
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_probab_prime_p(%struct.__mpz_struct* %n, i32 %reps) #0 !dbg !6668 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %reps.addr = alloca i32, align 4
  %nm1 = alloca [1 x %struct.__mpz_struct], align 16
  %q = alloca [1 x %struct.__mpz_struct], align 16
  %y = alloca [1 x %struct.__mpz_struct], align 16
  %k = alloca i64, align 8
  %is_prime = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !6671, metadata !DIExpression()), !dbg !6672
  store i32 %reps, i32* %reps.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reps.addr, metadata !6673, metadata !DIExpression()), !dbg !6674
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %nm1, metadata !6675, metadata !DIExpression()), !dbg !6676
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %q, metadata !6677, metadata !DIExpression()), !dbg !6678
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %y, metadata !6679, metadata !DIExpression()), !dbg !6680
  call void @llvm.dbg.declare(metadata i64* %k, metadata !6681, metadata !DIExpression()), !dbg !6682
  call void @llvm.dbg.declare(metadata i32* %is_prime, metadata !6683, metadata !DIExpression()), !dbg !6684
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6685, metadata !DIExpression()), !dbg !6686
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !6687
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !6687
  %1 = load i32, i32* %_mp_size, align 4, !dbg !6687
  %cmp = icmp ne i32 %1, 0, !dbg !6687
  %conv = zext i1 %cmp to i32, !dbg !6687
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !6687
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 2, !dbg !6687
  %3 = load i64*, i64** %_mp_d, align 8, !dbg !6687
  %arrayidx = getelementptr inbounds i64, i64* %3, i64 0, !dbg !6687
  %4 = load i64, i64* %arrayidx, align 8, !dbg !6687
  %conv1 = trunc i64 %4 to i32, !dbg !6687
  %and = and i32 %conv, %conv1, !dbg !6687
  %tobool = icmp ne i32 %and, 0, !dbg !6687
  br i1 %tobool, label %if.end, label %if.then, !dbg !6689

if.then:                                          ; preds = %entry
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !6690
  %call = call i32 @mpz_cmpabs_ui(%struct.__mpz_struct* %5, i64 2), !dbg !6691
  %cmp2 = icmp eq i32 %call, 0, !dbg !6692
  %6 = zext i1 %cmp2 to i64, !dbg !6693
  %cond = select i1 %cmp2, i32 2, i32 0, !dbg !6693
  store i32 %cond, i32* %retval, align 4, !dbg !6694
  br label %return, !dbg !6694

if.end:                                           ; preds = %entry
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !6695
  %call4 = call i32 @mpz_cmpabs_ui(%struct.__mpz_struct* %7, i64 64), !dbg !6697
  %cmp5 = icmp slt i32 %call4, 0, !dbg !6698
  br i1 %cmp5, label %if.then7, label %if.end13, !dbg !6699

if.then7:                                         ; preds = %if.end
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !6700
  %_mp_d8 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 2, !dbg !6701
  %9 = load i64*, i64** %_mp_d8, align 8, !dbg !6701
  %arrayidx9 = getelementptr inbounds i64, i64* %9, i64 0, !dbg !6700
  %10 = load i64, i64* %arrayidx9, align 8, !dbg !6700
  %shr = lshr i64 %10, 1, !dbg !6702
  %shr10 = lshr i64 3379140316, %shr, !dbg !6703
  %and11 = and i64 %shr10, 2, !dbg !6704
  %conv12 = trunc i64 %and11 to i32, !dbg !6705
  store i32 %conv12, i32* %retval, align 4, !dbg !6706
  br label %return, !dbg !6706

if.end13:                                         ; preds = %if.end
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !6707
  %call14 = call i64 @mpz_gcd_ui(%struct.__mpz_struct* null, %struct.__mpz_struct* %11, i64 3234846615), !dbg !6709
  %cmp15 = icmp ne i64 %call14, 1, !dbg !6710
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !6711

if.then17:                                        ; preds = %if.end13
  store i32 0, i32* %retval, align 4, !dbg !6712
  br label %return, !dbg !6712

if.end18:                                         ; preds = %if.end13
  %12 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !6713
  %call19 = call i32 @mpz_cmpabs_ui(%struct.__mpz_struct* %12, i64 961), !dbg !6715
  %cmp20 = icmp slt i32 %call19, 0, !dbg !6716
  br i1 %cmp20, label %if.then22, label %if.end23, !dbg !6717

if.then22:                                        ; preds = %if.end18
  store i32 2, i32* %retval, align 4, !dbg !6718
  br label %return, !dbg !6718

if.end23:                                         ; preds = %if.end18
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %nm1, i64 0, i64 0, !dbg !6719
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !6720
  %arraydecay24 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %q, i64 0, i64 0, !dbg !6721
  call void @mpz_init(%struct.__mpz_struct* %arraydecay24), !dbg !6722
  %arraydecay25 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %y, i64 0, i64 0, !dbg !6723
  call void @mpz_init(%struct.__mpz_struct* %arraydecay25), !dbg !6724
  %arraydecay26 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %nm1, i64 0, i64 0, !dbg !6725
  %13 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !6726
  %call27 = call i64 @mpz_abs_sub_ui(%struct.__mpz_struct* %arraydecay26, %struct.__mpz_struct* %13, i64 1), !dbg !6727
  %conv28 = trunc i64 %call27 to i32, !dbg !6727
  %arraydecay29 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %nm1, i64 0, i64 0, !dbg !6728
  %_mp_size30 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %arraydecay29, i32 0, i32 1, !dbg !6728
  store i32 %conv28, i32* %_mp_size30, align 4, !dbg !6729
  %arraydecay31 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %nm1, i64 0, i64 0, !dbg !6730
  %call32 = call i64 @mpz_scan1(%struct.__mpz_struct* %arraydecay31, i64 0), !dbg !6731
  store i64 %call32, i64* %k, align 8, !dbg !6732
  %arraydecay33 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %q, i64 0, i64 0, !dbg !6733
  %arraydecay34 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %nm1, i64 0, i64 0, !dbg !6734
  %14 = load i64, i64* %k, align 8, !dbg !6735
  call void @mpz_tdiv_q_2exp(%struct.__mpz_struct* %arraydecay33, %struct.__mpz_struct* %arraydecay34, i64 %14), !dbg !6736
  store i32 0, i32* %j, align 4, !dbg !6737
  store i32 1, i32* %is_prime, align 4, !dbg !6739
  br label %for.cond, !dbg !6740

for.cond:                                         ; preds = %for.inc, %if.end23
  %15 = load i32, i32* %is_prime, align 4, !dbg !6741
  %16 = load i32, i32* %j, align 4, !dbg !6743
  %17 = load i32, i32* %reps.addr, align 4, !dbg !6744
  %cmp35 = icmp slt i32 %16, %17, !dbg !6745
  %conv36 = zext i1 %cmp35 to i32, !dbg !6745
  %and37 = and i32 %15, %conv36, !dbg !6746
  %tobool38 = icmp ne i32 %and37, 0, !dbg !6747
  br i1 %tobool38, label %for.body, label %for.end, !dbg !6747

for.body:                                         ; preds = %for.cond
  %arraydecay39 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %y, i64 0, i64 0, !dbg !6748
  %18 = load i32, i32* %j, align 4, !dbg !6750
  %conv40 = sext i32 %18 to i64, !dbg !6751
  %19 = load i32, i32* %j, align 4, !dbg !6752
  %conv41 = sext i32 %19 to i64, !dbg !6752
  %mul = mul i64 %conv40, %conv41, !dbg !6753
  %20 = load i32, i32* %j, align 4, !dbg !6754
  %conv42 = sext i32 %20 to i64, !dbg !6754
  %add = add i64 %mul, %conv42, !dbg !6755
  %add43 = add i64 %add, 41, !dbg !6756
  call void @mpz_set_ui(%struct.__mpz_struct* %arraydecay39, i64 %add43), !dbg !6757
  %arraydecay44 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %y, i64 0, i64 0, !dbg !6758
  %arraydecay45 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %nm1, i64 0, i64 0, !dbg !6760
  %call46 = call i32 @mpz_cmp(%struct.__mpz_struct* %arraydecay44, %struct.__mpz_struct* %arraydecay45), !dbg !6761
  %cmp47 = icmp sge i32 %call46, 0, !dbg !6762
  br i1 %cmp47, label %if.then49, label %if.end50, !dbg !6763

if.then49:                                        ; preds = %for.body
  br label %for.end, !dbg !6764

if.end50:                                         ; preds = %for.body
  %21 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !6766
  %arraydecay51 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %nm1, i64 0, i64 0, !dbg !6767
  %arraydecay52 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %y, i64 0, i64 0, !dbg !6768
  %arraydecay53 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %q, i64 0, i64 0, !dbg !6769
  %22 = load i64, i64* %k, align 8, !dbg !6770
  %call54 = call i32 @gmp_millerrabin(%struct.__mpz_struct* %21, %struct.__mpz_struct* %arraydecay51, %struct.__mpz_struct* %arraydecay52, %struct.__mpz_struct* %arraydecay53, i64 %22), !dbg !6771
  store i32 %call54, i32* %is_prime, align 4, !dbg !6772
  br label %for.inc, !dbg !6773

for.inc:                                          ; preds = %if.end50
  %23 = load i32, i32* %j, align 4, !dbg !6774
  %inc = add nsw i32 %23, 1, !dbg !6774
  store i32 %inc, i32* %j, align 4, !dbg !6774
  br label %for.cond, !dbg !6775, !llvm.loop !6776

for.end:                                          ; preds = %if.then49, %for.cond
  %arraydecay55 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %nm1, i64 0, i64 0, !dbg !6778
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay55), !dbg !6779
  %arraydecay56 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %q, i64 0, i64 0, !dbg !6780
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay56), !dbg !6781
  %arraydecay57 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %y, i64 0, i64 0, !dbg !6782
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay57), !dbg !6783
  %24 = load i32, i32* %is_prime, align 4, !dbg !6784
  store i32 %24, i32* %retval, align 4, !dbg !6785
  br label %return, !dbg !6785

return:                                           ; preds = %for.end, %if.then22, %if.then17, %if.then7, %if.then
  %25 = load i32, i32* %retval, align 4, !dbg !6786
  ret i32 %25, !dbg !6786
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_scan1(%struct.__mpz_struct* %u, i64 %starting_bit) #0 !dbg !6787 {
entry:
  %retval = alloca i64, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %starting_bit.addr = alloca i64, align 8
  %up = alloca i64*, align 8
  %us = alloca i64, align 8
  %un = alloca i64, align 8
  %i = alloca i64, align 8
  %limb = alloca i64, align 8
  %ux = alloca i64, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !6790, metadata !DIExpression()), !dbg !6791
  store i64 %starting_bit, i64* %starting_bit.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %starting_bit.addr, metadata !6792, metadata !DIExpression()), !dbg !6793
  call void @llvm.dbg.declare(metadata i64** %up, metadata !6794, metadata !DIExpression()), !dbg !6795
  call void @llvm.dbg.declare(metadata i64* %us, metadata !6796, metadata !DIExpression()), !dbg !6797
  call void @llvm.dbg.declare(metadata i64* %un, metadata !6798, metadata !DIExpression()), !dbg !6799
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6800, metadata !DIExpression()), !dbg !6801
  call void @llvm.dbg.declare(metadata i64* %limb, metadata !6802, metadata !DIExpression()), !dbg !6803
  call void @llvm.dbg.declare(metadata i64* %ux, metadata !6804, metadata !DIExpression()), !dbg !6805
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !6806
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !6807
  %1 = load i32, i32* %_mp_size, align 4, !dbg !6807
  %conv = sext i32 %1 to i64, !dbg !6806
  store i64 %conv, i64* %us, align 8, !dbg !6808
  %2 = load i64, i64* %us, align 8, !dbg !6809
  %cmp = icmp sge i64 %2, 0, !dbg !6809
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6809

cond.true:                                        ; preds = %entry
  %3 = load i64, i64* %us, align 8, !dbg !6809
  br label %cond.end, !dbg !6809

cond.false:                                       ; preds = %entry
  %4 = load i64, i64* %us, align 8, !dbg !6809
  %sub = sub nsw i64 0, %4, !dbg !6809
  br label %cond.end, !dbg !6809

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !6809
  store i64 %cond, i64* %un, align 8, !dbg !6810
  %5 = load i64, i64* %starting_bit.addr, align 8, !dbg !6811
  %div = udiv i64 %5, 64, !dbg !6812
  store i64 %div, i64* %i, align 8, !dbg !6813
  %6 = load i64, i64* %i, align 8, !dbg !6814
  %7 = load i64, i64* %un, align 8, !dbg !6816
  %cmp2 = icmp sge i64 %6, %7, !dbg !6817
  br i1 %cmp2, label %if.then, label %if.end, !dbg !6818

if.then:                                          ; preds = %cond.end
  %8 = load i64, i64* %us, align 8, !dbg !6819
  %cmp4 = icmp sge i64 %8, 0, !dbg !6820
  br i1 %cmp4, label %cond.true6, label %cond.false7, !dbg !6819

cond.true6:                                       ; preds = %if.then
  br label %cond.end8, !dbg !6819

cond.false7:                                      ; preds = %if.then
  %9 = load i64, i64* %starting_bit.addr, align 8, !dbg !6821
  br label %cond.end8, !dbg !6819

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i64 [ -1, %cond.true6 ], [ %9, %cond.false7 ], !dbg !6819
  store i64 %cond9, i64* %retval, align 8, !dbg !6822
  br label %return, !dbg !6822

if.end:                                           ; preds = %cond.end
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !6823
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 2, !dbg !6824
  %11 = load i64*, i64** %_mp_d, align 8, !dbg !6824
  store i64* %11, i64** %up, align 8, !dbg !6825
  store i64 0, i64* %ux, align 8, !dbg !6826
  %12 = load i64*, i64** %up, align 8, !dbg !6827
  %13 = load i64, i64* %i, align 8, !dbg !6828
  %arrayidx = getelementptr inbounds i64, i64* %12, i64 %13, !dbg !6827
  %14 = load i64, i64* %arrayidx, align 8, !dbg !6827
  store i64 %14, i64* %limb, align 8, !dbg !6829
  %15 = load i64, i64* %starting_bit.addr, align 8, !dbg !6830
  %cmp10 = icmp ne i64 %15, 0, !dbg !6832
  br i1 %cmp10, label %if.then12, label %if.end24, !dbg !6833

if.then12:                                        ; preds = %if.end
  %16 = load i64, i64* %us, align 8, !dbg !6834
  %cmp13 = icmp slt i64 %16, 0, !dbg !6837
  br i1 %cmp13, label %if.then15, label %if.end23, !dbg !6838

if.then15:                                        ; preds = %if.then12
  %17 = load i64*, i64** %up, align 8, !dbg !6839
  %18 = load i64, i64* %i, align 8, !dbg !6839
  %call = call i64 @mpn_normalized_size(i64* %17, i64 %18), !dbg !6839
  %cmp16 = icmp eq i64 %call, 0, !dbg !6839
  %conv17 = zext i1 %cmp16 to i32, !dbg !6839
  %conv18 = sext i32 %conv17 to i64, !dbg !6839
  store i64 %conv18, i64* %ux, align 8, !dbg !6841
  %19 = load i64, i64* %limb, align 8, !dbg !6842
  %neg = xor i64 %19, -1, !dbg !6843
  %20 = load i64, i64* %ux, align 8, !dbg !6844
  %add = add i64 %neg, %20, !dbg !6845
  store i64 %add, i64* %limb, align 8, !dbg !6846
  %21 = load i64, i64* %limb, align 8, !dbg !6847
  %22 = load i64, i64* %ux, align 8, !dbg !6848
  %cmp19 = icmp uge i64 %21, %22, !dbg !6849
  %conv20 = zext i1 %cmp19 to i32, !dbg !6849
  %conv21 = sext i32 %conv20 to i64, !dbg !6850
  %sub22 = sub i64 0, %conv21, !dbg !6851
  store i64 %sub22, i64* %ux, align 8, !dbg !6852
  br label %if.end23, !dbg !6853

if.end23:                                         ; preds = %if.then15, %if.then12
  %23 = load i64, i64* %starting_bit.addr, align 8, !dbg !6854
  %rem = urem i64 %23, 64, !dbg !6855
  %shl = shl i64 -1, %rem, !dbg !6856
  %24 = load i64, i64* %limb, align 8, !dbg !6857
  %and = and i64 %24, %shl, !dbg !6857
  store i64 %and, i64* %limb, align 8, !dbg !6857
  br label %if.end24, !dbg !6858

if.end24:                                         ; preds = %if.end23, %if.end
  %25 = load i64, i64* %limb, align 8, !dbg !6859
  %26 = load i64, i64* %i, align 8, !dbg !6860
  %27 = load i64*, i64** %up, align 8, !dbg !6861
  %28 = load i64, i64* %un, align 8, !dbg !6862
  %29 = load i64, i64* %ux, align 8, !dbg !6863
  %call25 = call i64 @mpn_common_scan(i64 %25, i64 %26, i64* %27, i64 %28, i64 %29), !dbg !6864
  store i64 %call25, i64* %retval, align 8, !dbg !6865
  br label %return, !dbg !6865

return:                                           ; preds = %if.end24, %cond.end8
  %30 = load i64, i64* %retval, align 8, !dbg !6866
  ret i64 %30, !dbg !6866
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gmp_millerrabin(%struct.__mpz_struct* %n, %struct.__mpz_struct* %nm1, %struct.__mpz_struct* %y, %struct.__mpz_struct* %q, i64 %k) #0 !dbg !6867 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca %struct.__mpz_struct*, align 8
  %nm1.addr = alloca %struct.__mpz_struct*, align 8
  %y.addr = alloca %struct.__mpz_struct*, align 8
  %q.addr = alloca %struct.__mpz_struct*, align 8
  %k.addr = alloca i64, align 8
  store %struct.__mpz_struct* %n, %struct.__mpz_struct** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %n.addr, metadata !6870, metadata !DIExpression()), !dbg !6871
  store %struct.__mpz_struct* %nm1, %struct.__mpz_struct** %nm1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %nm1.addr, metadata !6872, metadata !DIExpression()), !dbg !6873
  store %struct.__mpz_struct* %y, %struct.__mpz_struct** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %y.addr, metadata !6874, metadata !DIExpression()), !dbg !6875
  store %struct.__mpz_struct* %q, %struct.__mpz_struct** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %q.addr, metadata !6876, metadata !DIExpression()), !dbg !6877
  store i64 %k, i64* %k.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %k.addr, metadata !6878, metadata !DIExpression()), !dbg !6879
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6880
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6881
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %q.addr, align 8, !dbg !6882
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !6883
  call void @mpz_powm(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1, %struct.__mpz_struct* %2, %struct.__mpz_struct* %3), !dbg !6884
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6885
  %call = call i32 @mpz_cmp_ui(%struct.__mpz_struct* %4, i64 1), !dbg !6887
  %cmp = icmp eq i32 %call, 0, !dbg !6888
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6889

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6890
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %nm1.addr, align 8, !dbg !6891
  %call1 = call i32 @mpz_cmp(%struct.__mpz_struct* %5, %struct.__mpz_struct* %6), !dbg !6892
  %cmp2 = icmp eq i32 %call1, 0, !dbg !6893
  br i1 %cmp2, label %if.then, label %if.end, !dbg !6894

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval, align 4, !dbg !6895
  br label %return, !dbg !6895

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond, !dbg !6896

while.cond:                                       ; preds = %if.end11, %if.end
  %7 = load i64, i64* %k.addr, align 8, !dbg !6897
  %dec = add i64 %7, -1, !dbg !6897
  store i64 %dec, i64* %k.addr, align 8, !dbg !6897
  %cmp3 = icmp ugt i64 %dec, 0, !dbg !6898
  br i1 %cmp3, label %while.body, label %while.end, !dbg !6896

while.body:                                       ; preds = %while.cond
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6899
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6901
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %n.addr, align 8, !dbg !6902
  call void @mpz_powm_ui(%struct.__mpz_struct* %8, %struct.__mpz_struct* %9, i64 2, %struct.__mpz_struct* %10), !dbg !6903
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6904
  %12 = load %struct.__mpz_struct*, %struct.__mpz_struct** %nm1.addr, align 8, !dbg !6906
  %call4 = call i32 @mpz_cmp(%struct.__mpz_struct* %11, %struct.__mpz_struct* %12), !dbg !6907
  %cmp5 = icmp eq i32 %call4, 0, !dbg !6908
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !6909

if.then6:                                         ; preds = %while.body
  store i32 1, i32* %retval, align 4, !dbg !6910
  br label %return, !dbg !6910

if.end7:                                          ; preds = %while.body
  %13 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !6911
  %call8 = call i32 @mpz_cmp_ui(%struct.__mpz_struct* %13, i64 1), !dbg !6913
  %cmp9 = icmp sle i32 %call8, 0, !dbg !6914
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !6915

if.then10:                                        ; preds = %if.end7
  store i32 0, i32* %retval, align 4, !dbg !6916
  br label %return, !dbg !6916

if.end11:                                         ; preds = %if.end7
  br label %while.cond, !dbg !6896, !llvm.loop !6917

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4, !dbg !6919
  br label %return, !dbg !6919

return:                                           ; preds = %while.end, %if.then10, %if.then6, %if.then
  %14 = load i32, i32* %retval, align 4, !dbg !6920
  ret i32 %14, !dbg !6920
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_tstbit(%struct.__mpz_struct* %d, i64 %bit_index) #0 !dbg !6921 {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.__mpz_struct*, align 8
  %bit_index.addr = alloca i64, align 8
  %limb_index = alloca i64, align 8
  %shift = alloca i32, align 4
  %ds = alloca i64, align 8
  %dn = alloca i64, align 8
  %w = alloca i64, align 8
  %bit = alloca i32, align 4
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !6924, metadata !DIExpression()), !dbg !6925
  store i64 %bit_index, i64* %bit_index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bit_index.addr, metadata !6926, metadata !DIExpression()), !dbg !6927
  call void @llvm.dbg.declare(metadata i64* %limb_index, metadata !6928, metadata !DIExpression()), !dbg !6929
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !6930, metadata !DIExpression()), !dbg !6931
  call void @llvm.dbg.declare(metadata i64* %ds, metadata !6932, metadata !DIExpression()), !dbg !6933
  call void @llvm.dbg.declare(metadata i64* %dn, metadata !6934, metadata !DIExpression()), !dbg !6935
  call void @llvm.dbg.declare(metadata i64* %w, metadata !6936, metadata !DIExpression()), !dbg !6937
  call void @llvm.dbg.declare(metadata i32* %bit, metadata !6938, metadata !DIExpression()), !dbg !6939
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !6940
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !6941
  %1 = load i32, i32* %_mp_size, align 4, !dbg !6941
  %conv = sext i32 %1 to i64, !dbg !6940
  store i64 %conv, i64* %ds, align 8, !dbg !6942
  %2 = load i64, i64* %ds, align 8, !dbg !6943
  %cmp = icmp sge i64 %2, 0, !dbg !6943
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6943

cond.true:                                        ; preds = %entry
  %3 = load i64, i64* %ds, align 8, !dbg !6943
  br label %cond.end, !dbg !6943

cond.false:                                       ; preds = %entry
  %4 = load i64, i64* %ds, align 8, !dbg !6943
  %sub = sub nsw i64 0, %4, !dbg !6943
  br label %cond.end, !dbg !6943

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !6943
  store i64 %cond, i64* %dn, align 8, !dbg !6944
  %5 = load i64, i64* %bit_index.addr, align 8, !dbg !6945
  %div = udiv i64 %5, 64, !dbg !6946
  store i64 %div, i64* %limb_index, align 8, !dbg !6947
  %6 = load i64, i64* %limb_index, align 8, !dbg !6948
  %7 = load i64, i64* %dn, align 8, !dbg !6950
  %cmp2 = icmp sge i64 %6, %7, !dbg !6951
  br i1 %cmp2, label %if.then, label %if.end, !dbg !6952

if.then:                                          ; preds = %cond.end
  %8 = load i64, i64* %ds, align 8, !dbg !6953
  %cmp4 = icmp slt i64 %8, 0, !dbg !6954
  %conv5 = zext i1 %cmp4 to i32, !dbg !6954
  store i32 %conv5, i32* %retval, align 4, !dbg !6955
  br label %return, !dbg !6955

if.end:                                           ; preds = %cond.end
  %9 = load i64, i64* %bit_index.addr, align 8, !dbg !6956
  %rem = urem i64 %9, 64, !dbg !6957
  %conv6 = trunc i64 %rem to i32, !dbg !6956
  store i32 %conv6, i32* %shift, align 4, !dbg !6958
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !6959
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 2, !dbg !6960
  %11 = load i64*, i64** %_mp_d, align 8, !dbg !6960
  %12 = load i64, i64* %limb_index, align 8, !dbg !6961
  %arrayidx = getelementptr inbounds i64, i64* %11, i64 %12, !dbg !6959
  %13 = load i64, i64* %arrayidx, align 8, !dbg !6959
  store i64 %13, i64* %w, align 8, !dbg !6962
  %14 = load i64, i64* %w, align 8, !dbg !6963
  %15 = load i32, i32* %shift, align 4, !dbg !6964
  %sh_prom = zext i32 %15 to i64, !dbg !6965
  %shr = lshr i64 %14, %sh_prom, !dbg !6965
  %and = and i64 %shr, 1, !dbg !6966
  %conv7 = trunc i64 %and to i32, !dbg !6967
  store i32 %conv7, i32* %bit, align 4, !dbg !6968
  %16 = load i64, i64* %ds, align 8, !dbg !6969
  %cmp8 = icmp slt i64 %16, 0, !dbg !6971
  br i1 %cmp8, label %if.then10, label %if.end28, !dbg !6972

if.then10:                                        ; preds = %if.end
  %17 = load i32, i32* %shift, align 4, !dbg !6973
  %cmp11 = icmp ugt i32 %17, 0, !dbg !6976
  br i1 %cmp11, label %land.lhs.true, label %if.end18, !dbg !6977

land.lhs.true:                                    ; preds = %if.then10
  %18 = load i64, i64* %w, align 8, !dbg !6978
  %19 = load i32, i32* %shift, align 4, !dbg !6979
  %conv13 = zext i32 %19 to i64, !dbg !6979
  %sub14 = sub i64 64, %conv13, !dbg !6980
  %shl = shl i64 %18, %sub14, !dbg !6981
  %cmp15 = icmp ugt i64 %shl, 0, !dbg !6982
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !6983

if.then17:                                        ; preds = %land.lhs.true
  %20 = load i32, i32* %bit, align 4, !dbg !6984
  %xor = xor i32 %20, 1, !dbg !6985
  store i32 %xor, i32* %retval, align 4, !dbg !6986
  br label %return, !dbg !6986

if.end18:                                         ; preds = %land.lhs.true, %if.then10
  br label %while.cond, !dbg !6987

while.cond:                                       ; preds = %if.end27, %if.end18
  %21 = load i64, i64* %limb_index, align 8, !dbg !6988
  %dec = add nsw i64 %21, -1, !dbg !6988
  store i64 %dec, i64* %limb_index, align 8, !dbg !6988
  %cmp19 = icmp sgt i64 %21, 0, !dbg !6989
  br i1 %cmp19, label %while.body, label %while.end, !dbg !6987

while.body:                                       ; preds = %while.cond
  %22 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !6990
  %_mp_d21 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %22, i32 0, i32 2, !dbg !6992
  %23 = load i64*, i64** %_mp_d21, align 8, !dbg !6992
  %24 = load i64, i64* %limb_index, align 8, !dbg !6993
  %arrayidx22 = getelementptr inbounds i64, i64* %23, i64 %24, !dbg !6990
  %25 = load i64, i64* %arrayidx22, align 8, !dbg !6990
  %cmp23 = icmp ugt i64 %25, 0, !dbg !6994
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !6995

if.then25:                                        ; preds = %while.body
  %26 = load i32, i32* %bit, align 4, !dbg !6996
  %xor26 = xor i32 %26, 1, !dbg !6997
  store i32 %xor26, i32* %retval, align 4, !dbg !6998
  br label %return, !dbg !6998

if.end27:                                         ; preds = %while.body
  br label %while.cond, !dbg !6987, !llvm.loop !6999

while.end:                                        ; preds = %while.cond
  br label %if.end28, !dbg !7001

if.end28:                                         ; preds = %while.end, %if.end
  %27 = load i32, i32* %bit, align 4, !dbg !7002
  store i32 %27, i32* %retval, align 4, !dbg !7003
  br label %return, !dbg !7003

return:                                           ; preds = %if.end28, %if.then25, %if.then17, %if.then
  %28 = load i32, i32* %retval, align 4, !dbg !7004
  ret i32 %28, !dbg !7004
}

; Function Attrs: noinline nounwind uwtable
define internal void @mpz_abs_add_bit(%struct.__mpz_struct* %d, i64 %bit_index) #0 !dbg !7005 {
entry:
  %d.addr = alloca %struct.__mpz_struct*, align 8
  %bit_index.addr = alloca i64, align 8
  %dn = alloca i64, align 8
  %limb_index = alloca i64, align 8
  %bit = alloca i64, align 8
  %dp = alloca i64*, align 8
  %i = alloca i64, align 8
  %cy = alloca i64, align 8
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !7006, metadata !DIExpression()), !dbg !7007
  store i64 %bit_index, i64* %bit_index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bit_index.addr, metadata !7008, metadata !DIExpression()), !dbg !7009
  call void @llvm.dbg.declare(metadata i64* %dn, metadata !7010, metadata !DIExpression()), !dbg !7011
  call void @llvm.dbg.declare(metadata i64* %limb_index, metadata !7012, metadata !DIExpression()), !dbg !7013
  call void @llvm.dbg.declare(metadata i64* %bit, metadata !7014, metadata !DIExpression()), !dbg !7015
  call void @llvm.dbg.declare(metadata i64** %dp, metadata !7016, metadata !DIExpression()), !dbg !7017
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7018
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !7018
  %1 = load i32, i32* %_mp_size, align 4, !dbg !7018
  %cmp = icmp sge i32 %1, 0, !dbg !7018
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7018

cond.true:                                        ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7018
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !7018
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !7018
  br label %cond.end, !dbg !7018

cond.false:                                       ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7018
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !7018
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !7018
  %sub = sub nsw i32 0, %5, !dbg !7018
  br label %cond.end, !dbg !7018

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !7018
  %conv = sext i32 %cond to i64, !dbg !7018
  store i64 %conv, i64* %dn, align 8, !dbg !7019
  %6 = load i64, i64* %bit_index.addr, align 8, !dbg !7020
  %div = udiv i64 %6, 64, !dbg !7021
  store i64 %div, i64* %limb_index, align 8, !dbg !7022
  %7 = load i64, i64* %bit_index.addr, align 8, !dbg !7023
  %rem = urem i64 %7, 64, !dbg !7024
  %shl = shl i64 1, %rem, !dbg !7025
  store i64 %shl, i64* %bit, align 8, !dbg !7026
  %8 = load i64, i64* %limb_index, align 8, !dbg !7027
  %9 = load i64, i64* %dn, align 8, !dbg !7029
  %cmp3 = icmp sge i64 %8, %9, !dbg !7030
  br i1 %cmp3, label %if.then, label %if.else, !dbg !7031

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7032, metadata !DIExpression()), !dbg !7034
  %10 = load i64, i64* %limb_index, align 8, !dbg !7035
  %add = add nsw i64 %10, 1, !dbg !7035
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7035
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %11, i32 0, i32 0, !dbg !7035
  %12 = load i32, i32* %_mp_alloc, align 8, !dbg !7035
  %conv5 = sext i32 %12 to i64, !dbg !7035
  %cmp6 = icmp sgt i64 %add, %conv5, !dbg !7035
  br i1 %cmp6, label %cond.true8, label %cond.false10, !dbg !7035

cond.true8:                                       ; preds = %if.then
  %13 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7035
  %14 = load i64, i64* %limb_index, align 8, !dbg !7035
  %add9 = add nsw i64 %14, 1, !dbg !7035
  %call = call i8* @mpz_realloc(%struct.__mpz_struct* %13, i64 %add9), !dbg !7035
  br label %cond.end11, !dbg !7035

cond.false10:                                     ; preds = %if.then
  %15 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7035
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %15, i32 0, i32 2, !dbg !7035
  %16 = load i64*, i64** %_mp_d, align 8, !dbg !7035
  %17 = bitcast i64* %16 to i8*, !dbg !7035
  br label %cond.end11, !dbg !7035

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi i8* [ %call, %cond.true8 ], [ %17, %cond.false10 ], !dbg !7035
  %18 = bitcast i8* %cond12 to i64*, !dbg !7035
  store i64* %18, i64** %dp, align 8, !dbg !7036
  %19 = load i64, i64* %bit, align 8, !dbg !7037
  %20 = load i64*, i64** %dp, align 8, !dbg !7038
  %21 = load i64, i64* %limb_index, align 8, !dbg !7039
  %arrayidx = getelementptr inbounds i64, i64* %20, i64 %21, !dbg !7038
  store i64 %19, i64* %arrayidx, align 8, !dbg !7040
  %22 = load i64, i64* %dn, align 8, !dbg !7041
  store i64 %22, i64* %i, align 8, !dbg !7043
  br label %for.cond, !dbg !7044

for.cond:                                         ; preds = %for.inc, %cond.end11
  %23 = load i64, i64* %i, align 8, !dbg !7045
  %24 = load i64, i64* %limb_index, align 8, !dbg !7047
  %cmp13 = icmp slt i64 %23, %24, !dbg !7048
  br i1 %cmp13, label %for.body, label %for.end, !dbg !7049

for.body:                                         ; preds = %for.cond
  %25 = load i64*, i64** %dp, align 8, !dbg !7050
  %26 = load i64, i64* %i, align 8, !dbg !7051
  %arrayidx15 = getelementptr inbounds i64, i64* %25, i64 %26, !dbg !7050
  store i64 0, i64* %arrayidx15, align 8, !dbg !7052
  br label %for.inc, !dbg !7050

for.inc:                                          ; preds = %for.body
  %27 = load i64, i64* %i, align 8, !dbg !7053
  %inc = add nsw i64 %27, 1, !dbg !7053
  store i64 %inc, i64* %i, align 8, !dbg !7053
  br label %for.cond, !dbg !7054, !llvm.loop !7055

for.end:                                          ; preds = %for.cond
  %28 = load i64, i64* %limb_index, align 8, !dbg !7057
  %add16 = add nsw i64 %28, 1, !dbg !7058
  store i64 %add16, i64* %dn, align 8, !dbg !7059
  br label %if.end38, !dbg !7060

if.else:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i64* %cy, metadata !7061, metadata !DIExpression()), !dbg !7063
  %29 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7064
  %_mp_d17 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %29, i32 0, i32 2, !dbg !7065
  %30 = load i64*, i64** %_mp_d17, align 8, !dbg !7065
  store i64* %30, i64** %dp, align 8, !dbg !7066
  %31 = load i64*, i64** %dp, align 8, !dbg !7067
  %32 = load i64, i64* %limb_index, align 8, !dbg !7068
  %add.ptr = getelementptr inbounds i64, i64* %31, i64 %32, !dbg !7069
  %33 = load i64*, i64** %dp, align 8, !dbg !7070
  %34 = load i64, i64* %limb_index, align 8, !dbg !7071
  %add.ptr18 = getelementptr inbounds i64, i64* %33, i64 %34, !dbg !7072
  %35 = load i64, i64* %dn, align 8, !dbg !7073
  %36 = load i64, i64* %limb_index, align 8, !dbg !7074
  %sub19 = sub nsw i64 %35, %36, !dbg !7075
  %37 = load i64, i64* %bit, align 8, !dbg !7076
  %call20 = call i64 @mpn_add_1(i64* %add.ptr, i64* %add.ptr18, i64 %sub19, i64 %37), !dbg !7077
  store i64 %call20, i64* %cy, align 8, !dbg !7078
  %38 = load i64, i64* %cy, align 8, !dbg !7079
  %cmp21 = icmp ugt i64 %38, 0, !dbg !7081
  br i1 %cmp21, label %if.then23, label %if.end, !dbg !7082

if.then23:                                        ; preds = %if.else
  %39 = load i64, i64* %dn, align 8, !dbg !7083
  %add24 = add nsw i64 %39, 1, !dbg !7083
  %40 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7083
  %_mp_alloc25 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %40, i32 0, i32 0, !dbg !7083
  %41 = load i32, i32* %_mp_alloc25, align 8, !dbg !7083
  %conv26 = sext i32 %41 to i64, !dbg !7083
  %cmp27 = icmp sgt i64 %add24, %conv26, !dbg !7083
  br i1 %cmp27, label %cond.true29, label %cond.false32, !dbg !7083

cond.true29:                                      ; preds = %if.then23
  %42 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7083
  %43 = load i64, i64* %dn, align 8, !dbg !7083
  %add30 = add nsw i64 %43, 1, !dbg !7083
  %call31 = call i8* @mpz_realloc(%struct.__mpz_struct* %42, i64 %add30), !dbg !7083
  br label %cond.end34, !dbg !7083

cond.false32:                                     ; preds = %if.then23
  %44 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7083
  %_mp_d33 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %44, i32 0, i32 2, !dbg !7083
  %45 = load i64*, i64** %_mp_d33, align 8, !dbg !7083
  %46 = bitcast i64* %45 to i8*, !dbg !7083
  br label %cond.end34, !dbg !7083

cond.end34:                                       ; preds = %cond.false32, %cond.true29
  %cond35 = phi i8* [ %call31, %cond.true29 ], [ %46, %cond.false32 ], !dbg !7083
  %47 = bitcast i8* %cond35 to i64*, !dbg !7083
  store i64* %47, i64** %dp, align 8, !dbg !7085
  %48 = load i64, i64* %cy, align 8, !dbg !7086
  %49 = load i64*, i64** %dp, align 8, !dbg !7087
  %50 = load i64, i64* %dn, align 8, !dbg !7088
  %inc36 = add nsw i64 %50, 1, !dbg !7088
  store i64 %inc36, i64* %dn, align 8, !dbg !7088
  %arrayidx37 = getelementptr inbounds i64, i64* %49, i64 %50, !dbg !7087
  store i64 %48, i64* %arrayidx37, align 8, !dbg !7089
  br label %if.end, !dbg !7090

if.end:                                           ; preds = %cond.end34, %if.else
  br label %if.end38

if.end38:                                         ; preds = %if.end, %for.end
  %51 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7091
  %_mp_size39 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %51, i32 0, i32 1, !dbg !7092
  %52 = load i32, i32* %_mp_size39, align 4, !dbg !7092
  %cmp40 = icmp slt i32 %52, 0, !dbg !7093
  br i1 %cmp40, label %cond.true42, label %cond.false44, !dbg !7094

cond.true42:                                      ; preds = %if.end38
  %53 = load i64, i64* %dn, align 8, !dbg !7095
  %sub43 = sub nsw i64 0, %53, !dbg !7096
  br label %cond.end45, !dbg !7094

cond.false44:                                     ; preds = %if.end38
  %54 = load i64, i64* %dn, align 8, !dbg !7097
  br label %cond.end45, !dbg !7094

cond.end45:                                       ; preds = %cond.false44, %cond.true42
  %cond46 = phi i64 [ %sub43, %cond.true42 ], [ %54, %cond.false44 ], !dbg !7094
  %conv47 = trunc i64 %cond46 to i32, !dbg !7094
  %55 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7098
  %_mp_size48 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %55, i32 0, i32 1, !dbg !7099
  store i32 %conv47, i32* %_mp_size48, align 4, !dbg !7100
  ret void, !dbg !7101
}

; Function Attrs: noinline nounwind uwtable
define internal void @mpz_abs_sub_bit(%struct.__mpz_struct* %d, i64 %bit_index) #0 !dbg !7102 {
entry:
  %d.addr = alloca %struct.__mpz_struct*, align 8
  %bit_index.addr = alloca i64, align 8
  %dn = alloca i64, align 8
  %limb_index = alloca i64, align 8
  %dp = alloca i64*, align 8
  %bit = alloca i64, align 8
  %__cy = alloca i64, align 8
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !7103, metadata !DIExpression()), !dbg !7104
  store i64 %bit_index, i64* %bit_index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bit_index.addr, metadata !7105, metadata !DIExpression()), !dbg !7106
  call void @llvm.dbg.declare(metadata i64* %dn, metadata !7107, metadata !DIExpression()), !dbg !7108
  call void @llvm.dbg.declare(metadata i64* %limb_index, metadata !7109, metadata !DIExpression()), !dbg !7110
  call void @llvm.dbg.declare(metadata i64** %dp, metadata !7111, metadata !DIExpression()), !dbg !7112
  call void @llvm.dbg.declare(metadata i64* %bit, metadata !7113, metadata !DIExpression()), !dbg !7114
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7115
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !7115
  %1 = load i32, i32* %_mp_size, align 4, !dbg !7115
  %cmp = icmp sge i32 %1, 0, !dbg !7115
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7115

cond.true:                                        ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7115
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !7115
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !7115
  br label %cond.end, !dbg !7115

cond.false:                                       ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7115
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !7115
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !7115
  %sub = sub nsw i32 0, %5, !dbg !7115
  br label %cond.end, !dbg !7115

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !7115
  %conv = sext i32 %cond to i64, !dbg !7115
  store i64 %conv, i64* %dn, align 8, !dbg !7116
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7117
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 2, !dbg !7118
  %7 = load i64*, i64** %_mp_d, align 8, !dbg !7118
  store i64* %7, i64** %dp, align 8, !dbg !7119
  %8 = load i64, i64* %bit_index.addr, align 8, !dbg !7120
  %div = udiv i64 %8, 64, !dbg !7121
  store i64 %div, i64* %limb_index, align 8, !dbg !7122
  %9 = load i64, i64* %bit_index.addr, align 8, !dbg !7123
  %rem = urem i64 %9, 64, !dbg !7124
  %shl = shl i64 1, %rem, !dbg !7125
  store i64 %shl, i64* %bit, align 8, !dbg !7126
  br label %do.body, !dbg !7127

do.body:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i64* %__cy, metadata !7128, metadata !DIExpression()), !dbg !7130
  %10 = load i64*, i64** %dp, align 8, !dbg !7130
  %11 = load i64, i64* %limb_index, align 8, !dbg !7130
  %add.ptr = getelementptr inbounds i64, i64* %10, i64 %11, !dbg !7130
  %12 = load i64*, i64** %dp, align 8, !dbg !7130
  %13 = load i64, i64* %limb_index, align 8, !dbg !7130
  %add.ptr3 = getelementptr inbounds i64, i64* %12, i64 %13, !dbg !7130
  %14 = load i64, i64* %dn, align 8, !dbg !7130
  %15 = load i64, i64* %limb_index, align 8, !dbg !7130
  %sub4 = sub nsw i64 %14, %15, !dbg !7130
  %16 = load i64, i64* %bit, align 8, !dbg !7130
  %call = call i64 @mpn_sub_1(i64* %add.ptr, i64* %add.ptr3, i64 %sub4, i64 %16), !dbg !7130
  store i64 %call, i64* %__cy, align 8, !dbg !7130
  br label %do.end, !dbg !7130

do.end:                                           ; preds = %do.body
  %17 = load i64*, i64** %dp, align 8, !dbg !7131
  %18 = load i64, i64* %dn, align 8, !dbg !7132
  %sub5 = sub nsw i64 %18, 1, !dbg !7133
  %arrayidx = getelementptr inbounds i64, i64* %17, i64 %sub5, !dbg !7131
  %19 = load i64, i64* %arrayidx, align 8, !dbg !7131
  %cmp6 = icmp eq i64 %19, 0, !dbg !7134
  %conv7 = zext i1 %cmp6 to i32, !dbg !7134
  %conv8 = sext i32 %conv7 to i64, !dbg !7135
  %20 = load i64, i64* %dn, align 8, !dbg !7136
  %sub9 = sub nsw i64 %20, %conv8, !dbg !7136
  store i64 %sub9, i64* %dn, align 8, !dbg !7136
  %21 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7137
  %_mp_size10 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %21, i32 0, i32 1, !dbg !7138
  %22 = load i32, i32* %_mp_size10, align 4, !dbg !7138
  %cmp11 = icmp slt i32 %22, 0, !dbg !7139
  br i1 %cmp11, label %cond.true13, label %cond.false15, !dbg !7140

cond.true13:                                      ; preds = %do.end
  %23 = load i64, i64* %dn, align 8, !dbg !7141
  %sub14 = sub nsw i64 0, %23, !dbg !7142
  br label %cond.end16, !dbg !7140

cond.false15:                                     ; preds = %do.end
  %24 = load i64, i64* %dn, align 8, !dbg !7143
  br label %cond.end16, !dbg !7140

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi i64 [ %sub14, %cond.true13 ], [ %24, %cond.false15 ], !dbg !7140
  %conv18 = trunc i64 %cond17 to i32, !dbg !7140
  %25 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7144
  %_mp_size19 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %25, i32 0, i32 1, !dbg !7145
  store i32 %conv18, i32* %_mp_size19, align 4, !dbg !7146
  ret void, !dbg !7147
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_clrbit(%struct.__mpz_struct* %d, i64 %bit_index) #0 !dbg !7148 {
entry:
  %d.addr = alloca %struct.__mpz_struct*, align 8
  %bit_index.addr = alloca i64, align 8
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !7149, metadata !DIExpression()), !dbg !7150
  store i64 %bit_index, i64* %bit_index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bit_index.addr, metadata !7151, metadata !DIExpression()), !dbg !7152
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7153
  %1 = load i64, i64* %bit_index.addr, align 8, !dbg !7155
  %call = call i32 @mpz_tstbit(%struct.__mpz_struct* %0, i64 %1), !dbg !7156
  %tobool = icmp ne i32 %call, 0, !dbg !7156
  br i1 %tobool, label %if.then, label %if.end2, !dbg !7157

if.then:                                          ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7158
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !7161
  %3 = load i32, i32* %_mp_size, align 4, !dbg !7161
  %cmp = icmp sge i32 %3, 0, !dbg !7162
  br i1 %cmp, label %if.then1, label %if.else, !dbg !7163

if.then1:                                         ; preds = %if.then
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7164
  %5 = load i64, i64* %bit_index.addr, align 8, !dbg !7165
  call void @mpz_abs_sub_bit(%struct.__mpz_struct* %4, i64 %5), !dbg !7166
  br label %if.end, !dbg !7166

if.else:                                          ; preds = %if.then
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7167
  %7 = load i64, i64* %bit_index.addr, align 8, !dbg !7168
  call void @mpz_abs_add_bit(%struct.__mpz_struct* %6, i64 %7), !dbg !7169
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then1
  br label %if.end2, !dbg !7170

if.end2:                                          ; preds = %if.end, %entry
  ret void, !dbg !7171
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_combit(%struct.__mpz_struct* %d, i64 %bit_index) #0 !dbg !7172 {
entry:
  %d.addr = alloca %struct.__mpz_struct*, align 8
  %bit_index.addr = alloca i64, align 8
  store %struct.__mpz_struct* %d, %struct.__mpz_struct** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %d.addr, metadata !7173, metadata !DIExpression()), !dbg !7174
  store i64 %bit_index, i64* %bit_index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bit_index.addr, metadata !7175, metadata !DIExpression()), !dbg !7176
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7177
  %1 = load i64, i64* %bit_index.addr, align 8, !dbg !7179
  %call = call i32 @mpz_tstbit(%struct.__mpz_struct* %0, i64 %1), !dbg !7180
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7181
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !7182
  %3 = load i32, i32* %_mp_size, align 4, !dbg !7182
  %cmp = icmp slt i32 %3, 0, !dbg !7183
  %conv = zext i1 %cmp to i32, !dbg !7183
  %xor = xor i32 %call, %conv, !dbg !7184
  %tobool = icmp ne i32 %xor, 0, !dbg !7184
  br i1 %tobool, label %if.then, label %if.else, !dbg !7185

if.then:                                          ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7186
  %5 = load i64, i64* %bit_index.addr, align 8, !dbg !7187
  call void @mpz_abs_sub_bit(%struct.__mpz_struct* %4, i64 %5), !dbg !7188
  br label %if.end, !dbg !7188

if.else:                                          ; preds = %entry
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %d.addr, align 8, !dbg !7189
  %7 = load i64, i64* %bit_index.addr, align 8, !dbg !7190
  call void @mpz_abs_add_bit(%struct.__mpz_struct* %6, i64 %7), !dbg !7191
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !7192
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_com(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u) #0 !dbg !7193 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !7194, metadata !DIExpression()), !dbg !7195
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !7196, metadata !DIExpression()), !dbg !7197
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7198
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7199
  call void @mpz_neg(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1), !dbg !7200
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7201
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7202
  call void @mpz_sub_ui(%struct.__mpz_struct* %2, %struct.__mpz_struct* %3, i64 1), !dbg !7203
  ret void, !dbg !7204
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_and(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, %struct.__mpz_struct* %v) #0 !dbg !7205 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca %struct.__mpz_struct*, align 8
  %un = alloca i64, align 8
  %vn = alloca i64, align 8
  %rn = alloca i64, align 8
  %i = alloca i64, align 8
  %up = alloca i64*, align 8
  %vp = alloca i64*, align 8
  %rp = alloca i64*, align 8
  %ux = alloca i64, align 8
  %vx = alloca i64, align 8
  %rx = alloca i64, align 8
  %uc = alloca i64, align 8
  %vc = alloca i64, align 8
  %rc = alloca i64, align 8
  %ul = alloca i64, align 8
  %vl = alloca i64, align 8
  %rl = alloca i64, align 8
  %__mpz_srcptr_swap__tmp = alloca %struct.__mpz_struct*, align 8
  %__mp_size_t_swap__tmp = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !7206, metadata !DIExpression()), !dbg !7207
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !7208, metadata !DIExpression()), !dbg !7209
  store %struct.__mpz_struct* %v, %struct.__mpz_struct** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %v.addr, metadata !7210, metadata !DIExpression()), !dbg !7211
  call void @llvm.dbg.declare(metadata i64* %un, metadata !7212, metadata !DIExpression()), !dbg !7213
  call void @llvm.dbg.declare(metadata i64* %vn, metadata !7214, metadata !DIExpression()), !dbg !7215
  call void @llvm.dbg.declare(metadata i64* %rn, metadata !7216, metadata !DIExpression()), !dbg !7217
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7218, metadata !DIExpression()), !dbg !7219
  call void @llvm.dbg.declare(metadata i64** %up, metadata !7220, metadata !DIExpression()), !dbg !7221
  call void @llvm.dbg.declare(metadata i64** %vp, metadata !7222, metadata !DIExpression()), !dbg !7223
  call void @llvm.dbg.declare(metadata i64** %rp, metadata !7224, metadata !DIExpression()), !dbg !7225
  call void @llvm.dbg.declare(metadata i64* %ux, metadata !7226, metadata !DIExpression()), !dbg !7227
  call void @llvm.dbg.declare(metadata i64* %vx, metadata !7228, metadata !DIExpression()), !dbg !7229
  call void @llvm.dbg.declare(metadata i64* %rx, metadata !7230, metadata !DIExpression()), !dbg !7231
  call void @llvm.dbg.declare(metadata i64* %uc, metadata !7232, metadata !DIExpression()), !dbg !7233
  call void @llvm.dbg.declare(metadata i64* %vc, metadata !7234, metadata !DIExpression()), !dbg !7235
  call void @llvm.dbg.declare(metadata i64* %rc, metadata !7236, metadata !DIExpression()), !dbg !7237
  call void @llvm.dbg.declare(metadata i64* %ul, metadata !7238, metadata !DIExpression()), !dbg !7239
  call void @llvm.dbg.declare(metadata i64* %vl, metadata !7240, metadata !DIExpression()), !dbg !7241
  call void @llvm.dbg.declare(metadata i64* %rl, metadata !7242, metadata !DIExpression()), !dbg !7243
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7244
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !7244
  %1 = load i32, i32* %_mp_size, align 4, !dbg !7244
  %cmp = icmp sge i32 %1, 0, !dbg !7244
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7244

cond.true:                                        ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7244
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !7244
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !7244
  br label %cond.end, !dbg !7244

cond.false:                                       ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7244
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !7244
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !7244
  %sub = sub nsw i32 0, %5, !dbg !7244
  br label %cond.end, !dbg !7244

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !7244
  %conv = sext i32 %cond to i64, !dbg !7244
  store i64 %conv, i64* %un, align 8, !dbg !7245
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7246
  %_mp_size3 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 1, !dbg !7246
  %7 = load i32, i32* %_mp_size3, align 4, !dbg !7246
  %cmp4 = icmp sge i32 %7, 0, !dbg !7246
  br i1 %cmp4, label %cond.true6, label %cond.false8, !dbg !7246

cond.true6:                                       ; preds = %cond.end
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7246
  %_mp_size7 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 1, !dbg !7246
  %9 = load i32, i32* %_mp_size7, align 4, !dbg !7246
  br label %cond.end11, !dbg !7246

cond.false8:                                      ; preds = %cond.end
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7246
  %_mp_size9 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 1, !dbg !7246
  %11 = load i32, i32* %_mp_size9, align 4, !dbg !7246
  %sub10 = sub nsw i32 0, %11, !dbg !7246
  br label %cond.end11, !dbg !7246

cond.end11:                                       ; preds = %cond.false8, %cond.true6
  %cond12 = phi i32 [ %9, %cond.true6 ], [ %sub10, %cond.false8 ], !dbg !7246
  %conv13 = sext i32 %cond12 to i64, !dbg !7246
  store i64 %conv13, i64* %vn, align 8, !dbg !7247
  %12 = load i64, i64* %un, align 8, !dbg !7248
  %13 = load i64, i64* %vn, align 8, !dbg !7250
  %cmp14 = icmp slt i64 %12, %13, !dbg !7251
  br i1 %cmp14, label %if.then, label %if.end, !dbg !7252

if.then:                                          ; preds = %cond.end11
  br label %do.body, !dbg !7253

do.body:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %__mpz_srcptr_swap__tmp, metadata !7255, metadata !DIExpression()), !dbg !7257
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7257
  store %struct.__mpz_struct* %14, %struct.__mpz_struct** %__mpz_srcptr_swap__tmp, align 8, !dbg !7257
  %15 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7257
  store %struct.__mpz_struct* %15, %struct.__mpz_struct** %u.addr, align 8, !dbg !7257
  %16 = load %struct.__mpz_struct*, %struct.__mpz_struct** %__mpz_srcptr_swap__tmp, align 8, !dbg !7257
  store %struct.__mpz_struct* %16, %struct.__mpz_struct** %v.addr, align 8, !dbg !7257
  br label %do.end, !dbg !7257

do.end:                                           ; preds = %do.body
  br label %do.body16, !dbg !7258

do.body16:                                        ; preds = %do.end
  call void @llvm.dbg.declare(metadata i64* %__mp_size_t_swap__tmp, metadata !7259, metadata !DIExpression()), !dbg !7261
  %17 = load i64, i64* %un, align 8, !dbg !7261
  store i64 %17, i64* %__mp_size_t_swap__tmp, align 8, !dbg !7261
  %18 = load i64, i64* %vn, align 8, !dbg !7261
  store i64 %18, i64* %un, align 8, !dbg !7261
  %19 = load i64, i64* %__mp_size_t_swap__tmp, align 8, !dbg !7261
  store i64 %19, i64* %vn, align 8, !dbg !7261
  br label %do.end17, !dbg !7261

do.end17:                                         ; preds = %do.body16
  br label %if.end, !dbg !7262

if.end:                                           ; preds = %do.end17, %cond.end11
  %20 = load i64, i64* %vn, align 8, !dbg !7263
  %cmp18 = icmp eq i64 %20, 0, !dbg !7265
  br i1 %cmp18, label %if.then20, label %if.end22, !dbg !7266

if.then20:                                        ; preds = %if.end
  %21 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7267
  %_mp_size21 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %21, i32 0, i32 1, !dbg !7269
  store i32 0, i32* %_mp_size21, align 4, !dbg !7270
  br label %return, !dbg !7271

if.end22:                                         ; preds = %if.end
  %22 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7272
  %_mp_size23 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %22, i32 0, i32 1, !dbg !7273
  %23 = load i32, i32* %_mp_size23, align 4, !dbg !7273
  %cmp24 = icmp slt i32 %23, 0, !dbg !7274
  %conv25 = zext i1 %cmp24 to i32, !dbg !7274
  %conv26 = sext i32 %conv25 to i64, !dbg !7272
  store i64 %conv26, i64* %uc, align 8, !dbg !7275
  %24 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7276
  %_mp_size27 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %24, i32 0, i32 1, !dbg !7277
  %25 = load i32, i32* %_mp_size27, align 4, !dbg !7277
  %cmp28 = icmp slt i32 %25, 0, !dbg !7278
  %conv29 = zext i1 %cmp28 to i32, !dbg !7278
  %conv30 = sext i32 %conv29 to i64, !dbg !7276
  store i64 %conv30, i64* %vc, align 8, !dbg !7279
  %26 = load i64, i64* %uc, align 8, !dbg !7280
  %27 = load i64, i64* %vc, align 8, !dbg !7281
  %and = and i64 %26, %27, !dbg !7282
  store i64 %and, i64* %rc, align 8, !dbg !7283
  %28 = load i64, i64* %uc, align 8, !dbg !7284
  %sub31 = sub i64 0, %28, !dbg !7285
  store i64 %sub31, i64* %ux, align 8, !dbg !7286
  %29 = load i64, i64* %vc, align 8, !dbg !7287
  %sub32 = sub i64 0, %29, !dbg !7288
  store i64 %sub32, i64* %vx, align 8, !dbg !7289
  %30 = load i64, i64* %rc, align 8, !dbg !7290
  %sub33 = sub i64 0, %30, !dbg !7291
  store i64 %sub33, i64* %rx, align 8, !dbg !7292
  %31 = load i64, i64* %vx, align 8, !dbg !7293
  %tobool = icmp ne i64 %31, 0, !dbg !7293
  br i1 %tobool, label %cond.true34, label %cond.false35, !dbg !7293

cond.true34:                                      ; preds = %if.end22
  %32 = load i64, i64* %un, align 8, !dbg !7294
  br label %cond.end36, !dbg !7293

cond.false35:                                     ; preds = %if.end22
  %33 = load i64, i64* %vn, align 8, !dbg !7295
  br label %cond.end36, !dbg !7293

cond.end36:                                       ; preds = %cond.false35, %cond.true34
  %cond37 = phi i64 [ %32, %cond.true34 ], [ %33, %cond.false35 ], !dbg !7293
  store i64 %cond37, i64* %rn, align 8, !dbg !7296
  %34 = load i64, i64* %rn, align 8, !dbg !7297
  %35 = load i64, i64* %rc, align 8, !dbg !7297
  %add = add i64 %34, %35, !dbg !7297
  %36 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7297
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %36, i32 0, i32 0, !dbg !7297
  %37 = load i32, i32* %_mp_alloc, align 8, !dbg !7297
  %conv38 = sext i32 %37 to i64, !dbg !7297
  %cmp39 = icmp ugt i64 %add, %conv38, !dbg !7297
  br i1 %cmp39, label %cond.true41, label %cond.false43, !dbg !7297

cond.true41:                                      ; preds = %cond.end36
  %38 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7297
  %39 = load i64, i64* %rn, align 8, !dbg !7297
  %40 = load i64, i64* %rc, align 8, !dbg !7297
  %add42 = add i64 %39, %40, !dbg !7297
  %call = call i8* @mpz_realloc(%struct.__mpz_struct* %38, i64 %add42), !dbg !7297
  br label %cond.end44, !dbg !7297

cond.false43:                                     ; preds = %cond.end36
  %41 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7297
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %41, i32 0, i32 2, !dbg !7297
  %42 = load i64*, i64** %_mp_d, align 8, !dbg !7297
  %43 = bitcast i64* %42 to i8*, !dbg !7297
  br label %cond.end44, !dbg !7297

cond.end44:                                       ; preds = %cond.false43, %cond.true41
  %cond45 = phi i8* [ %call, %cond.true41 ], [ %43, %cond.false43 ], !dbg !7297
  %44 = bitcast i8* %cond45 to i64*, !dbg !7297
  store i64* %44, i64** %rp, align 8, !dbg !7298
  %45 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7299
  %_mp_d46 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %45, i32 0, i32 2, !dbg !7300
  %46 = load i64*, i64** %_mp_d46, align 8, !dbg !7300
  store i64* %46, i64** %up, align 8, !dbg !7301
  %47 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7302
  %_mp_d47 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %47, i32 0, i32 2, !dbg !7303
  %48 = load i64*, i64** %_mp_d47, align 8, !dbg !7303
  store i64* %48, i64** %vp, align 8, !dbg !7304
  store i64 0, i64* %i, align 8, !dbg !7305
  br label %do.body48, !dbg !7306

do.body48:                                        ; preds = %do.cond, %cond.end44
  %49 = load i64*, i64** %up, align 8, !dbg !7307
  %50 = load i64, i64* %i, align 8, !dbg !7309
  %arrayidx = getelementptr inbounds i64, i64* %49, i64 %50, !dbg !7307
  %51 = load i64, i64* %arrayidx, align 8, !dbg !7307
  %52 = load i64, i64* %ux, align 8, !dbg !7310
  %xor = xor i64 %51, %52, !dbg !7311
  %53 = load i64, i64* %uc, align 8, !dbg !7312
  %add49 = add i64 %xor, %53, !dbg !7313
  store i64 %add49, i64* %ul, align 8, !dbg !7314
  %54 = load i64, i64* %ul, align 8, !dbg !7315
  %55 = load i64, i64* %uc, align 8, !dbg !7316
  %cmp50 = icmp ult i64 %54, %55, !dbg !7317
  %conv51 = zext i1 %cmp50 to i32, !dbg !7317
  %conv52 = sext i32 %conv51 to i64, !dbg !7315
  store i64 %conv52, i64* %uc, align 8, !dbg !7318
  %56 = load i64*, i64** %vp, align 8, !dbg !7319
  %57 = load i64, i64* %i, align 8, !dbg !7320
  %arrayidx53 = getelementptr inbounds i64, i64* %56, i64 %57, !dbg !7319
  %58 = load i64, i64* %arrayidx53, align 8, !dbg !7319
  %59 = load i64, i64* %vx, align 8, !dbg !7321
  %xor54 = xor i64 %58, %59, !dbg !7322
  %60 = load i64, i64* %vc, align 8, !dbg !7323
  %add55 = add i64 %xor54, %60, !dbg !7324
  store i64 %add55, i64* %vl, align 8, !dbg !7325
  %61 = load i64, i64* %vl, align 8, !dbg !7326
  %62 = load i64, i64* %vc, align 8, !dbg !7327
  %cmp56 = icmp ult i64 %61, %62, !dbg !7328
  %conv57 = zext i1 %cmp56 to i32, !dbg !7328
  %conv58 = sext i32 %conv57 to i64, !dbg !7326
  store i64 %conv58, i64* %vc, align 8, !dbg !7329
  %63 = load i64, i64* %ul, align 8, !dbg !7330
  %64 = load i64, i64* %vl, align 8, !dbg !7331
  %and59 = and i64 %63, %64, !dbg !7332
  %65 = load i64, i64* %rx, align 8, !dbg !7333
  %xor60 = xor i64 %and59, %65, !dbg !7334
  %66 = load i64, i64* %rc, align 8, !dbg !7335
  %add61 = add i64 %xor60, %66, !dbg !7336
  store i64 %add61, i64* %rl, align 8, !dbg !7337
  %67 = load i64, i64* %rl, align 8, !dbg !7338
  %68 = load i64, i64* %rc, align 8, !dbg !7339
  %cmp62 = icmp ult i64 %67, %68, !dbg !7340
  %conv63 = zext i1 %cmp62 to i32, !dbg !7340
  %conv64 = sext i32 %conv63 to i64, !dbg !7338
  store i64 %conv64, i64* %rc, align 8, !dbg !7341
  %69 = load i64, i64* %rl, align 8, !dbg !7342
  %70 = load i64*, i64** %rp, align 8, !dbg !7343
  %71 = load i64, i64* %i, align 8, !dbg !7344
  %arrayidx65 = getelementptr inbounds i64, i64* %70, i64 %71, !dbg !7343
  store i64 %69, i64* %arrayidx65, align 8, !dbg !7345
  br label %do.cond, !dbg !7346

do.cond:                                          ; preds = %do.body48
  %72 = load i64, i64* %i, align 8, !dbg !7347
  %inc = add nsw i64 %72, 1, !dbg !7347
  store i64 %inc, i64* %i, align 8, !dbg !7347
  %73 = load i64, i64* %vn, align 8, !dbg !7348
  %cmp66 = icmp slt i64 %inc, %73, !dbg !7349
  br i1 %cmp66, label %do.body48, label %do.end68, !dbg !7346, !llvm.loop !7350

do.end68:                                         ; preds = %do.cond
  br label %for.cond, !dbg !7352

for.cond:                                         ; preds = %for.inc, %do.end68
  %74 = load i64, i64* %i, align 8, !dbg !7353
  %75 = load i64, i64* %rn, align 8, !dbg !7356
  %cmp69 = icmp slt i64 %74, %75, !dbg !7357
  br i1 %cmp69, label %for.body, label %for.end, !dbg !7358

for.body:                                         ; preds = %for.cond
  %76 = load i64*, i64** %up, align 8, !dbg !7359
  %77 = load i64, i64* %i, align 8, !dbg !7361
  %arrayidx71 = getelementptr inbounds i64, i64* %76, i64 %77, !dbg !7359
  %78 = load i64, i64* %arrayidx71, align 8, !dbg !7359
  %79 = load i64, i64* %ux, align 8, !dbg !7362
  %xor72 = xor i64 %78, %79, !dbg !7363
  %80 = load i64, i64* %uc, align 8, !dbg !7364
  %add73 = add i64 %xor72, %80, !dbg !7365
  store i64 %add73, i64* %ul, align 8, !dbg !7366
  %81 = load i64, i64* %ul, align 8, !dbg !7367
  %82 = load i64, i64* %uc, align 8, !dbg !7368
  %cmp74 = icmp ult i64 %81, %82, !dbg !7369
  %conv75 = zext i1 %cmp74 to i32, !dbg !7369
  %conv76 = sext i32 %conv75 to i64, !dbg !7367
  store i64 %conv76, i64* %uc, align 8, !dbg !7370
  %83 = load i64, i64* %ul, align 8, !dbg !7371
  %84 = load i64, i64* %vx, align 8, !dbg !7372
  %and77 = and i64 %83, %84, !dbg !7373
  %85 = load i64, i64* %rx, align 8, !dbg !7374
  %xor78 = xor i64 %and77, %85, !dbg !7375
  %86 = load i64, i64* %rc, align 8, !dbg !7376
  %add79 = add i64 %xor78, %86, !dbg !7377
  store i64 %add79, i64* %rl, align 8, !dbg !7378
  %87 = load i64, i64* %rl, align 8, !dbg !7379
  %88 = load i64, i64* %rc, align 8, !dbg !7380
  %cmp80 = icmp ult i64 %87, %88, !dbg !7381
  %conv81 = zext i1 %cmp80 to i32, !dbg !7381
  %conv82 = sext i32 %conv81 to i64, !dbg !7379
  store i64 %conv82, i64* %rc, align 8, !dbg !7382
  %89 = load i64, i64* %rl, align 8, !dbg !7383
  %90 = load i64*, i64** %rp, align 8, !dbg !7384
  %91 = load i64, i64* %i, align 8, !dbg !7385
  %arrayidx83 = getelementptr inbounds i64, i64* %90, i64 %91, !dbg !7384
  store i64 %89, i64* %arrayidx83, align 8, !dbg !7386
  br label %for.inc, !dbg !7387

for.inc:                                          ; preds = %for.body
  %92 = load i64, i64* %i, align 8, !dbg !7388
  %inc84 = add nsw i64 %92, 1, !dbg !7388
  store i64 %inc84, i64* %i, align 8, !dbg !7388
  br label %for.cond, !dbg !7389, !llvm.loop !7390

for.end:                                          ; preds = %for.cond
  %93 = load i64, i64* %rc, align 8, !dbg !7392
  %tobool85 = icmp ne i64 %93, 0, !dbg !7392
  br i1 %tobool85, label %if.then86, label %if.else, !dbg !7394

if.then86:                                        ; preds = %for.end
  %94 = load i64, i64* %rc, align 8, !dbg !7395
  %95 = load i64*, i64** %rp, align 8, !dbg !7396
  %96 = load i64, i64* %rn, align 8, !dbg !7397
  %inc87 = add nsw i64 %96, 1, !dbg !7397
  store i64 %inc87, i64* %rn, align 8, !dbg !7397
  %arrayidx88 = getelementptr inbounds i64, i64* %95, i64 %96, !dbg !7396
  store i64 %94, i64* %arrayidx88, align 8, !dbg !7398
  br label %if.end90, !dbg !7396

if.else:                                          ; preds = %for.end
  %97 = load i64*, i64** %rp, align 8, !dbg !7399
  %98 = load i64, i64* %rn, align 8, !dbg !7400
  %call89 = call i64 @mpn_normalized_size(i64* %97, i64 %98), !dbg !7401
  store i64 %call89, i64* %rn, align 8, !dbg !7402
  br label %if.end90

if.end90:                                         ; preds = %if.else, %if.then86
  %99 = load i64, i64* %rx, align 8, !dbg !7403
  %tobool91 = icmp ne i64 %99, 0, !dbg !7403
  br i1 %tobool91, label %cond.true92, label %cond.false94, !dbg !7403

cond.true92:                                      ; preds = %if.end90
  %100 = load i64, i64* %rn, align 8, !dbg !7404
  %sub93 = sub nsw i64 0, %100, !dbg !7405
  br label %cond.end95, !dbg !7403

cond.false94:                                     ; preds = %if.end90
  %101 = load i64, i64* %rn, align 8, !dbg !7406
  br label %cond.end95, !dbg !7403

cond.end95:                                       ; preds = %cond.false94, %cond.true92
  %cond96 = phi i64 [ %sub93, %cond.true92 ], [ %101, %cond.false94 ], !dbg !7403
  %conv97 = trunc i64 %cond96 to i32, !dbg !7403
  %102 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7407
  %_mp_size98 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %102, i32 0, i32 1, !dbg !7408
  store i32 %conv97, i32* %_mp_size98, align 4, !dbg !7409
  br label %return, !dbg !7410

return:                                           ; preds = %cond.end95, %if.then20
  ret void, !dbg !7410
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_ior(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, %struct.__mpz_struct* %v) #0 !dbg !7411 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca %struct.__mpz_struct*, align 8
  %un = alloca i64, align 8
  %vn = alloca i64, align 8
  %rn = alloca i64, align 8
  %i = alloca i64, align 8
  %up = alloca i64*, align 8
  %vp = alloca i64*, align 8
  %rp = alloca i64*, align 8
  %ux = alloca i64, align 8
  %vx = alloca i64, align 8
  %rx = alloca i64, align 8
  %uc = alloca i64, align 8
  %vc = alloca i64, align 8
  %rc = alloca i64, align 8
  %ul = alloca i64, align 8
  %vl = alloca i64, align 8
  %rl = alloca i64, align 8
  %__mpz_srcptr_swap__tmp = alloca %struct.__mpz_struct*, align 8
  %__mp_size_t_swap__tmp = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !7412, metadata !DIExpression()), !dbg !7413
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !7414, metadata !DIExpression()), !dbg !7415
  store %struct.__mpz_struct* %v, %struct.__mpz_struct** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %v.addr, metadata !7416, metadata !DIExpression()), !dbg !7417
  call void @llvm.dbg.declare(metadata i64* %un, metadata !7418, metadata !DIExpression()), !dbg !7419
  call void @llvm.dbg.declare(metadata i64* %vn, metadata !7420, metadata !DIExpression()), !dbg !7421
  call void @llvm.dbg.declare(metadata i64* %rn, metadata !7422, metadata !DIExpression()), !dbg !7423
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7424, metadata !DIExpression()), !dbg !7425
  call void @llvm.dbg.declare(metadata i64** %up, metadata !7426, metadata !DIExpression()), !dbg !7427
  call void @llvm.dbg.declare(metadata i64** %vp, metadata !7428, metadata !DIExpression()), !dbg !7429
  call void @llvm.dbg.declare(metadata i64** %rp, metadata !7430, metadata !DIExpression()), !dbg !7431
  call void @llvm.dbg.declare(metadata i64* %ux, metadata !7432, metadata !DIExpression()), !dbg !7433
  call void @llvm.dbg.declare(metadata i64* %vx, metadata !7434, metadata !DIExpression()), !dbg !7435
  call void @llvm.dbg.declare(metadata i64* %rx, metadata !7436, metadata !DIExpression()), !dbg !7437
  call void @llvm.dbg.declare(metadata i64* %uc, metadata !7438, metadata !DIExpression()), !dbg !7439
  call void @llvm.dbg.declare(metadata i64* %vc, metadata !7440, metadata !DIExpression()), !dbg !7441
  call void @llvm.dbg.declare(metadata i64* %rc, metadata !7442, metadata !DIExpression()), !dbg !7443
  call void @llvm.dbg.declare(metadata i64* %ul, metadata !7444, metadata !DIExpression()), !dbg !7445
  call void @llvm.dbg.declare(metadata i64* %vl, metadata !7446, metadata !DIExpression()), !dbg !7447
  call void @llvm.dbg.declare(metadata i64* %rl, metadata !7448, metadata !DIExpression()), !dbg !7449
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7450
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !7450
  %1 = load i32, i32* %_mp_size, align 4, !dbg !7450
  %cmp = icmp sge i32 %1, 0, !dbg !7450
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7450

cond.true:                                        ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7450
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !7450
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !7450
  br label %cond.end, !dbg !7450

cond.false:                                       ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7450
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !7450
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !7450
  %sub = sub nsw i32 0, %5, !dbg !7450
  br label %cond.end, !dbg !7450

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !7450
  %conv = sext i32 %cond to i64, !dbg !7450
  store i64 %conv, i64* %un, align 8, !dbg !7451
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7452
  %_mp_size3 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 1, !dbg !7452
  %7 = load i32, i32* %_mp_size3, align 4, !dbg !7452
  %cmp4 = icmp sge i32 %7, 0, !dbg !7452
  br i1 %cmp4, label %cond.true6, label %cond.false8, !dbg !7452

cond.true6:                                       ; preds = %cond.end
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7452
  %_mp_size7 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 1, !dbg !7452
  %9 = load i32, i32* %_mp_size7, align 4, !dbg !7452
  br label %cond.end11, !dbg !7452

cond.false8:                                      ; preds = %cond.end
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7452
  %_mp_size9 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 1, !dbg !7452
  %11 = load i32, i32* %_mp_size9, align 4, !dbg !7452
  %sub10 = sub nsw i32 0, %11, !dbg !7452
  br label %cond.end11, !dbg !7452

cond.end11:                                       ; preds = %cond.false8, %cond.true6
  %cond12 = phi i32 [ %9, %cond.true6 ], [ %sub10, %cond.false8 ], !dbg !7452
  %conv13 = sext i32 %cond12 to i64, !dbg !7452
  store i64 %conv13, i64* %vn, align 8, !dbg !7453
  %12 = load i64, i64* %un, align 8, !dbg !7454
  %13 = load i64, i64* %vn, align 8, !dbg !7456
  %cmp14 = icmp slt i64 %12, %13, !dbg !7457
  br i1 %cmp14, label %if.then, label %if.end, !dbg !7458

if.then:                                          ; preds = %cond.end11
  br label %do.body, !dbg !7459

do.body:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %__mpz_srcptr_swap__tmp, metadata !7461, metadata !DIExpression()), !dbg !7463
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7463
  store %struct.__mpz_struct* %14, %struct.__mpz_struct** %__mpz_srcptr_swap__tmp, align 8, !dbg !7463
  %15 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7463
  store %struct.__mpz_struct* %15, %struct.__mpz_struct** %u.addr, align 8, !dbg !7463
  %16 = load %struct.__mpz_struct*, %struct.__mpz_struct** %__mpz_srcptr_swap__tmp, align 8, !dbg !7463
  store %struct.__mpz_struct* %16, %struct.__mpz_struct** %v.addr, align 8, !dbg !7463
  br label %do.end, !dbg !7463

do.end:                                           ; preds = %do.body
  br label %do.body16, !dbg !7464

do.body16:                                        ; preds = %do.end
  call void @llvm.dbg.declare(metadata i64* %__mp_size_t_swap__tmp, metadata !7465, metadata !DIExpression()), !dbg !7467
  %17 = load i64, i64* %un, align 8, !dbg !7467
  store i64 %17, i64* %__mp_size_t_swap__tmp, align 8, !dbg !7467
  %18 = load i64, i64* %vn, align 8, !dbg !7467
  store i64 %18, i64* %un, align 8, !dbg !7467
  %19 = load i64, i64* %__mp_size_t_swap__tmp, align 8, !dbg !7467
  store i64 %19, i64* %vn, align 8, !dbg !7467
  br label %do.end17, !dbg !7467

do.end17:                                         ; preds = %do.body16
  br label %if.end, !dbg !7468

if.end:                                           ; preds = %do.end17, %cond.end11
  %20 = load i64, i64* %vn, align 8, !dbg !7469
  %cmp18 = icmp eq i64 %20, 0, !dbg !7471
  br i1 %cmp18, label %if.then20, label %if.end21, !dbg !7472

if.then20:                                        ; preds = %if.end
  %21 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7473
  %22 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7475
  call void @mpz_set(%struct.__mpz_struct* %21, %struct.__mpz_struct* %22), !dbg !7476
  br label %return, !dbg !7477

if.end21:                                         ; preds = %if.end
  %23 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7478
  %_mp_size22 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %23, i32 0, i32 1, !dbg !7479
  %24 = load i32, i32* %_mp_size22, align 4, !dbg !7479
  %cmp23 = icmp slt i32 %24, 0, !dbg !7480
  %conv24 = zext i1 %cmp23 to i32, !dbg !7480
  %conv25 = sext i32 %conv24 to i64, !dbg !7478
  store i64 %conv25, i64* %uc, align 8, !dbg !7481
  %25 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7482
  %_mp_size26 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %25, i32 0, i32 1, !dbg !7483
  %26 = load i32, i32* %_mp_size26, align 4, !dbg !7483
  %cmp27 = icmp slt i32 %26, 0, !dbg !7484
  %conv28 = zext i1 %cmp27 to i32, !dbg !7484
  %conv29 = sext i32 %conv28 to i64, !dbg !7482
  store i64 %conv29, i64* %vc, align 8, !dbg !7485
  %27 = load i64, i64* %uc, align 8, !dbg !7486
  %28 = load i64, i64* %vc, align 8, !dbg !7487
  %or = or i64 %27, %28, !dbg !7488
  store i64 %or, i64* %rc, align 8, !dbg !7489
  %29 = load i64, i64* %uc, align 8, !dbg !7490
  %sub30 = sub i64 0, %29, !dbg !7491
  store i64 %sub30, i64* %ux, align 8, !dbg !7492
  %30 = load i64, i64* %vc, align 8, !dbg !7493
  %sub31 = sub i64 0, %30, !dbg !7494
  store i64 %sub31, i64* %vx, align 8, !dbg !7495
  %31 = load i64, i64* %rc, align 8, !dbg !7496
  %sub32 = sub i64 0, %31, !dbg !7497
  store i64 %sub32, i64* %rx, align 8, !dbg !7498
  %32 = load i64, i64* %vx, align 8, !dbg !7499
  %tobool = icmp ne i64 %32, 0, !dbg !7499
  br i1 %tobool, label %cond.true33, label %cond.false34, !dbg !7499

cond.true33:                                      ; preds = %if.end21
  %33 = load i64, i64* %vn, align 8, !dbg !7500
  br label %cond.end35, !dbg !7499

cond.false34:                                     ; preds = %if.end21
  %34 = load i64, i64* %un, align 8, !dbg !7501
  br label %cond.end35, !dbg !7499

cond.end35:                                       ; preds = %cond.false34, %cond.true33
  %cond36 = phi i64 [ %33, %cond.true33 ], [ %34, %cond.false34 ], !dbg !7499
  store i64 %cond36, i64* %rn, align 8, !dbg !7502
  %35 = load i64, i64* %rn, align 8, !dbg !7503
  %36 = load i64, i64* %rc, align 8, !dbg !7503
  %add = add i64 %35, %36, !dbg !7503
  %37 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7503
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %37, i32 0, i32 0, !dbg !7503
  %38 = load i32, i32* %_mp_alloc, align 8, !dbg !7503
  %conv37 = sext i32 %38 to i64, !dbg !7503
  %cmp38 = icmp ugt i64 %add, %conv37, !dbg !7503
  br i1 %cmp38, label %cond.true40, label %cond.false42, !dbg !7503

cond.true40:                                      ; preds = %cond.end35
  %39 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7503
  %40 = load i64, i64* %rn, align 8, !dbg !7503
  %41 = load i64, i64* %rc, align 8, !dbg !7503
  %add41 = add i64 %40, %41, !dbg !7503
  %call = call i8* @mpz_realloc(%struct.__mpz_struct* %39, i64 %add41), !dbg !7503
  br label %cond.end43, !dbg !7503

cond.false42:                                     ; preds = %cond.end35
  %42 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7503
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %42, i32 0, i32 2, !dbg !7503
  %43 = load i64*, i64** %_mp_d, align 8, !dbg !7503
  %44 = bitcast i64* %43 to i8*, !dbg !7503
  br label %cond.end43, !dbg !7503

cond.end43:                                       ; preds = %cond.false42, %cond.true40
  %cond44 = phi i8* [ %call, %cond.true40 ], [ %44, %cond.false42 ], !dbg !7503
  %45 = bitcast i8* %cond44 to i64*, !dbg !7503
  store i64* %45, i64** %rp, align 8, !dbg !7504
  %46 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7505
  %_mp_d45 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %46, i32 0, i32 2, !dbg !7506
  %47 = load i64*, i64** %_mp_d45, align 8, !dbg !7506
  store i64* %47, i64** %up, align 8, !dbg !7507
  %48 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7508
  %_mp_d46 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %48, i32 0, i32 2, !dbg !7509
  %49 = load i64*, i64** %_mp_d46, align 8, !dbg !7509
  store i64* %49, i64** %vp, align 8, !dbg !7510
  store i64 0, i64* %i, align 8, !dbg !7511
  br label %do.body47, !dbg !7512

do.body47:                                        ; preds = %do.cond, %cond.end43
  %50 = load i64*, i64** %up, align 8, !dbg !7513
  %51 = load i64, i64* %i, align 8, !dbg !7515
  %arrayidx = getelementptr inbounds i64, i64* %50, i64 %51, !dbg !7513
  %52 = load i64, i64* %arrayidx, align 8, !dbg !7513
  %53 = load i64, i64* %ux, align 8, !dbg !7516
  %xor = xor i64 %52, %53, !dbg !7517
  %54 = load i64, i64* %uc, align 8, !dbg !7518
  %add48 = add i64 %xor, %54, !dbg !7519
  store i64 %add48, i64* %ul, align 8, !dbg !7520
  %55 = load i64, i64* %ul, align 8, !dbg !7521
  %56 = load i64, i64* %uc, align 8, !dbg !7522
  %cmp49 = icmp ult i64 %55, %56, !dbg !7523
  %conv50 = zext i1 %cmp49 to i32, !dbg !7523
  %conv51 = sext i32 %conv50 to i64, !dbg !7521
  store i64 %conv51, i64* %uc, align 8, !dbg !7524
  %57 = load i64*, i64** %vp, align 8, !dbg !7525
  %58 = load i64, i64* %i, align 8, !dbg !7526
  %arrayidx52 = getelementptr inbounds i64, i64* %57, i64 %58, !dbg !7525
  %59 = load i64, i64* %arrayidx52, align 8, !dbg !7525
  %60 = load i64, i64* %vx, align 8, !dbg !7527
  %xor53 = xor i64 %59, %60, !dbg !7528
  %61 = load i64, i64* %vc, align 8, !dbg !7529
  %add54 = add i64 %xor53, %61, !dbg !7530
  store i64 %add54, i64* %vl, align 8, !dbg !7531
  %62 = load i64, i64* %vl, align 8, !dbg !7532
  %63 = load i64, i64* %vc, align 8, !dbg !7533
  %cmp55 = icmp ult i64 %62, %63, !dbg !7534
  %conv56 = zext i1 %cmp55 to i32, !dbg !7534
  %conv57 = sext i32 %conv56 to i64, !dbg !7532
  store i64 %conv57, i64* %vc, align 8, !dbg !7535
  %64 = load i64, i64* %ul, align 8, !dbg !7536
  %65 = load i64, i64* %vl, align 8, !dbg !7537
  %or58 = or i64 %64, %65, !dbg !7538
  %66 = load i64, i64* %rx, align 8, !dbg !7539
  %xor59 = xor i64 %or58, %66, !dbg !7540
  %67 = load i64, i64* %rc, align 8, !dbg !7541
  %add60 = add i64 %xor59, %67, !dbg !7542
  store i64 %add60, i64* %rl, align 8, !dbg !7543
  %68 = load i64, i64* %rl, align 8, !dbg !7544
  %69 = load i64, i64* %rc, align 8, !dbg !7545
  %cmp61 = icmp ult i64 %68, %69, !dbg !7546
  %conv62 = zext i1 %cmp61 to i32, !dbg !7546
  %conv63 = sext i32 %conv62 to i64, !dbg !7544
  store i64 %conv63, i64* %rc, align 8, !dbg !7547
  %70 = load i64, i64* %rl, align 8, !dbg !7548
  %71 = load i64*, i64** %rp, align 8, !dbg !7549
  %72 = load i64, i64* %i, align 8, !dbg !7550
  %arrayidx64 = getelementptr inbounds i64, i64* %71, i64 %72, !dbg !7549
  store i64 %70, i64* %arrayidx64, align 8, !dbg !7551
  br label %do.cond, !dbg !7552

do.cond:                                          ; preds = %do.body47
  %73 = load i64, i64* %i, align 8, !dbg !7553
  %inc = add nsw i64 %73, 1, !dbg !7553
  store i64 %inc, i64* %i, align 8, !dbg !7553
  %74 = load i64, i64* %vn, align 8, !dbg !7554
  %cmp65 = icmp slt i64 %inc, %74, !dbg !7555
  br i1 %cmp65, label %do.body47, label %do.end67, !dbg !7552, !llvm.loop !7556

do.end67:                                         ; preds = %do.cond
  br label %for.cond, !dbg !7558

for.cond:                                         ; preds = %for.inc, %do.end67
  %75 = load i64, i64* %i, align 8, !dbg !7559
  %76 = load i64, i64* %rn, align 8, !dbg !7562
  %cmp68 = icmp slt i64 %75, %76, !dbg !7563
  br i1 %cmp68, label %for.body, label %for.end, !dbg !7564

for.body:                                         ; preds = %for.cond
  %77 = load i64*, i64** %up, align 8, !dbg !7565
  %78 = load i64, i64* %i, align 8, !dbg !7567
  %arrayidx70 = getelementptr inbounds i64, i64* %77, i64 %78, !dbg !7565
  %79 = load i64, i64* %arrayidx70, align 8, !dbg !7565
  %80 = load i64, i64* %ux, align 8, !dbg !7568
  %xor71 = xor i64 %79, %80, !dbg !7569
  %81 = load i64, i64* %uc, align 8, !dbg !7570
  %add72 = add i64 %xor71, %81, !dbg !7571
  store i64 %add72, i64* %ul, align 8, !dbg !7572
  %82 = load i64, i64* %ul, align 8, !dbg !7573
  %83 = load i64, i64* %uc, align 8, !dbg !7574
  %cmp73 = icmp ult i64 %82, %83, !dbg !7575
  %conv74 = zext i1 %cmp73 to i32, !dbg !7575
  %conv75 = sext i32 %conv74 to i64, !dbg !7573
  store i64 %conv75, i64* %uc, align 8, !dbg !7576
  %84 = load i64, i64* %ul, align 8, !dbg !7577
  %85 = load i64, i64* %vx, align 8, !dbg !7578
  %or76 = or i64 %84, %85, !dbg !7579
  %86 = load i64, i64* %rx, align 8, !dbg !7580
  %xor77 = xor i64 %or76, %86, !dbg !7581
  %87 = load i64, i64* %rc, align 8, !dbg !7582
  %add78 = add i64 %xor77, %87, !dbg !7583
  store i64 %add78, i64* %rl, align 8, !dbg !7584
  %88 = load i64, i64* %rl, align 8, !dbg !7585
  %89 = load i64, i64* %rc, align 8, !dbg !7586
  %cmp79 = icmp ult i64 %88, %89, !dbg !7587
  %conv80 = zext i1 %cmp79 to i32, !dbg !7587
  %conv81 = sext i32 %conv80 to i64, !dbg !7585
  store i64 %conv81, i64* %rc, align 8, !dbg !7588
  %90 = load i64, i64* %rl, align 8, !dbg !7589
  %91 = load i64*, i64** %rp, align 8, !dbg !7590
  %92 = load i64, i64* %i, align 8, !dbg !7591
  %arrayidx82 = getelementptr inbounds i64, i64* %91, i64 %92, !dbg !7590
  store i64 %90, i64* %arrayidx82, align 8, !dbg !7592
  br label %for.inc, !dbg !7593

for.inc:                                          ; preds = %for.body
  %93 = load i64, i64* %i, align 8, !dbg !7594
  %inc83 = add nsw i64 %93, 1, !dbg !7594
  store i64 %inc83, i64* %i, align 8, !dbg !7594
  br label %for.cond, !dbg !7595, !llvm.loop !7596

for.end:                                          ; preds = %for.cond
  %94 = load i64, i64* %rc, align 8, !dbg !7598
  %tobool84 = icmp ne i64 %94, 0, !dbg !7598
  br i1 %tobool84, label %if.then85, label %if.else, !dbg !7600

if.then85:                                        ; preds = %for.end
  %95 = load i64, i64* %rc, align 8, !dbg !7601
  %96 = load i64*, i64** %rp, align 8, !dbg !7602
  %97 = load i64, i64* %rn, align 8, !dbg !7603
  %inc86 = add nsw i64 %97, 1, !dbg !7603
  store i64 %inc86, i64* %rn, align 8, !dbg !7603
  %arrayidx87 = getelementptr inbounds i64, i64* %96, i64 %97, !dbg !7602
  store i64 %95, i64* %arrayidx87, align 8, !dbg !7604
  br label %if.end89, !dbg !7602

if.else:                                          ; preds = %for.end
  %98 = load i64*, i64** %rp, align 8, !dbg !7605
  %99 = load i64, i64* %rn, align 8, !dbg !7606
  %call88 = call i64 @mpn_normalized_size(i64* %98, i64 %99), !dbg !7607
  store i64 %call88, i64* %rn, align 8, !dbg !7608
  br label %if.end89

if.end89:                                         ; preds = %if.else, %if.then85
  %100 = load i64, i64* %rx, align 8, !dbg !7609
  %tobool90 = icmp ne i64 %100, 0, !dbg !7609
  br i1 %tobool90, label %cond.true91, label %cond.false93, !dbg !7609

cond.true91:                                      ; preds = %if.end89
  %101 = load i64, i64* %rn, align 8, !dbg !7610
  %sub92 = sub nsw i64 0, %101, !dbg !7611
  br label %cond.end94, !dbg !7609

cond.false93:                                     ; preds = %if.end89
  %102 = load i64, i64* %rn, align 8, !dbg !7612
  br label %cond.end94, !dbg !7609

cond.end94:                                       ; preds = %cond.false93, %cond.true91
  %cond95 = phi i64 [ %sub92, %cond.true91 ], [ %102, %cond.false93 ], !dbg !7609
  %conv96 = trunc i64 %cond95 to i32, !dbg !7609
  %103 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7613
  %_mp_size97 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %103, i32 0, i32 1, !dbg !7614
  store i32 %conv96, i32* %_mp_size97, align 4, !dbg !7615
  br label %return, !dbg !7616

return:                                           ; preds = %cond.end94, %if.then20
  ret void, !dbg !7616
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_xor(%struct.__mpz_struct* %r, %struct.__mpz_struct* %u, %struct.__mpz_struct* %v) #0 !dbg !7617 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca %struct.__mpz_struct*, align 8
  %un = alloca i64, align 8
  %vn = alloca i64, align 8
  %i = alloca i64, align 8
  %up = alloca i64*, align 8
  %vp = alloca i64*, align 8
  %rp = alloca i64*, align 8
  %ux = alloca i64, align 8
  %vx = alloca i64, align 8
  %rx = alloca i64, align 8
  %uc = alloca i64, align 8
  %vc = alloca i64, align 8
  %rc = alloca i64, align 8
  %ul = alloca i64, align 8
  %vl = alloca i64, align 8
  %rl = alloca i64, align 8
  %__mpz_srcptr_swap__tmp = alloca %struct.__mpz_struct*, align 8
  %__mp_size_t_swap__tmp = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !7618, metadata !DIExpression()), !dbg !7619
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !7620, metadata !DIExpression()), !dbg !7621
  store %struct.__mpz_struct* %v, %struct.__mpz_struct** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %v.addr, metadata !7622, metadata !DIExpression()), !dbg !7623
  call void @llvm.dbg.declare(metadata i64* %un, metadata !7624, metadata !DIExpression()), !dbg !7625
  call void @llvm.dbg.declare(metadata i64* %vn, metadata !7626, metadata !DIExpression()), !dbg !7627
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7628, metadata !DIExpression()), !dbg !7629
  call void @llvm.dbg.declare(metadata i64** %up, metadata !7630, metadata !DIExpression()), !dbg !7631
  call void @llvm.dbg.declare(metadata i64** %vp, metadata !7632, metadata !DIExpression()), !dbg !7633
  call void @llvm.dbg.declare(metadata i64** %rp, metadata !7634, metadata !DIExpression()), !dbg !7635
  call void @llvm.dbg.declare(metadata i64* %ux, metadata !7636, metadata !DIExpression()), !dbg !7637
  call void @llvm.dbg.declare(metadata i64* %vx, metadata !7638, metadata !DIExpression()), !dbg !7639
  call void @llvm.dbg.declare(metadata i64* %rx, metadata !7640, metadata !DIExpression()), !dbg !7641
  call void @llvm.dbg.declare(metadata i64* %uc, metadata !7642, metadata !DIExpression()), !dbg !7643
  call void @llvm.dbg.declare(metadata i64* %vc, metadata !7644, metadata !DIExpression()), !dbg !7645
  call void @llvm.dbg.declare(metadata i64* %rc, metadata !7646, metadata !DIExpression()), !dbg !7647
  call void @llvm.dbg.declare(metadata i64* %ul, metadata !7648, metadata !DIExpression()), !dbg !7649
  call void @llvm.dbg.declare(metadata i64* %vl, metadata !7650, metadata !DIExpression()), !dbg !7651
  call void @llvm.dbg.declare(metadata i64* %rl, metadata !7652, metadata !DIExpression()), !dbg !7653
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7654
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !7654
  %1 = load i32, i32* %_mp_size, align 4, !dbg !7654
  %cmp = icmp sge i32 %1, 0, !dbg !7654
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7654

cond.true:                                        ; preds = %entry
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7654
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !7654
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !7654
  br label %cond.end, !dbg !7654

cond.false:                                       ; preds = %entry
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7654
  %_mp_size2 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %4, i32 0, i32 1, !dbg !7654
  %5 = load i32, i32* %_mp_size2, align 4, !dbg !7654
  %sub = sub nsw i32 0, %5, !dbg !7654
  br label %cond.end, !dbg !7654

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %sub, %cond.false ], !dbg !7654
  %conv = sext i32 %cond to i64, !dbg !7654
  store i64 %conv, i64* %un, align 8, !dbg !7655
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7656
  %_mp_size3 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %6, i32 0, i32 1, !dbg !7656
  %7 = load i32, i32* %_mp_size3, align 4, !dbg !7656
  %cmp4 = icmp sge i32 %7, 0, !dbg !7656
  br i1 %cmp4, label %cond.true6, label %cond.false8, !dbg !7656

cond.true6:                                       ; preds = %cond.end
  %8 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7656
  %_mp_size7 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %8, i32 0, i32 1, !dbg !7656
  %9 = load i32, i32* %_mp_size7, align 4, !dbg !7656
  br label %cond.end11, !dbg !7656

cond.false8:                                      ; preds = %cond.end
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7656
  %_mp_size9 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 1, !dbg !7656
  %11 = load i32, i32* %_mp_size9, align 4, !dbg !7656
  %sub10 = sub nsw i32 0, %11, !dbg !7656
  br label %cond.end11, !dbg !7656

cond.end11:                                       ; preds = %cond.false8, %cond.true6
  %cond12 = phi i32 [ %9, %cond.true6 ], [ %sub10, %cond.false8 ], !dbg !7656
  %conv13 = sext i32 %cond12 to i64, !dbg !7656
  store i64 %conv13, i64* %vn, align 8, !dbg !7657
  %12 = load i64, i64* %un, align 8, !dbg !7658
  %13 = load i64, i64* %vn, align 8, !dbg !7660
  %cmp14 = icmp slt i64 %12, %13, !dbg !7661
  br i1 %cmp14, label %if.then, label %if.end, !dbg !7662

if.then:                                          ; preds = %cond.end11
  br label %do.body, !dbg !7663

do.body:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %__mpz_srcptr_swap__tmp, metadata !7665, metadata !DIExpression()), !dbg !7667
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7667
  store %struct.__mpz_struct* %14, %struct.__mpz_struct** %__mpz_srcptr_swap__tmp, align 8, !dbg !7667
  %15 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7667
  store %struct.__mpz_struct* %15, %struct.__mpz_struct** %u.addr, align 8, !dbg !7667
  %16 = load %struct.__mpz_struct*, %struct.__mpz_struct** %__mpz_srcptr_swap__tmp, align 8, !dbg !7667
  store %struct.__mpz_struct* %16, %struct.__mpz_struct** %v.addr, align 8, !dbg !7667
  br label %do.end, !dbg !7667

do.end:                                           ; preds = %do.body
  br label %do.body16, !dbg !7668

do.body16:                                        ; preds = %do.end
  call void @llvm.dbg.declare(metadata i64* %__mp_size_t_swap__tmp, metadata !7669, metadata !DIExpression()), !dbg !7671
  %17 = load i64, i64* %un, align 8, !dbg !7671
  store i64 %17, i64* %__mp_size_t_swap__tmp, align 8, !dbg !7671
  %18 = load i64, i64* %vn, align 8, !dbg !7671
  store i64 %18, i64* %un, align 8, !dbg !7671
  %19 = load i64, i64* %__mp_size_t_swap__tmp, align 8, !dbg !7671
  store i64 %19, i64* %vn, align 8, !dbg !7671
  br label %do.end17, !dbg !7671

do.end17:                                         ; preds = %do.body16
  br label %if.end, !dbg !7672

if.end:                                           ; preds = %do.end17, %cond.end11
  %20 = load i64, i64* %vn, align 8, !dbg !7673
  %cmp18 = icmp eq i64 %20, 0, !dbg !7675
  br i1 %cmp18, label %if.then20, label %if.end21, !dbg !7676

if.then20:                                        ; preds = %if.end
  %21 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7677
  %22 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7679
  call void @mpz_set(%struct.__mpz_struct* %21, %struct.__mpz_struct* %22), !dbg !7680
  br label %return, !dbg !7681

if.end21:                                         ; preds = %if.end
  %23 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7682
  %_mp_size22 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %23, i32 0, i32 1, !dbg !7683
  %24 = load i32, i32* %_mp_size22, align 4, !dbg !7683
  %cmp23 = icmp slt i32 %24, 0, !dbg !7684
  %conv24 = zext i1 %cmp23 to i32, !dbg !7684
  %conv25 = sext i32 %conv24 to i64, !dbg !7682
  store i64 %conv25, i64* %uc, align 8, !dbg !7685
  %25 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7686
  %_mp_size26 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %25, i32 0, i32 1, !dbg !7687
  %26 = load i32, i32* %_mp_size26, align 4, !dbg !7687
  %cmp27 = icmp slt i32 %26, 0, !dbg !7688
  %conv28 = zext i1 %cmp27 to i32, !dbg !7688
  %conv29 = sext i32 %conv28 to i64, !dbg !7686
  store i64 %conv29, i64* %vc, align 8, !dbg !7689
  %27 = load i64, i64* %uc, align 8, !dbg !7690
  %28 = load i64, i64* %vc, align 8, !dbg !7691
  %xor = xor i64 %27, %28, !dbg !7692
  store i64 %xor, i64* %rc, align 8, !dbg !7693
  %29 = load i64, i64* %uc, align 8, !dbg !7694
  %sub30 = sub i64 0, %29, !dbg !7695
  store i64 %sub30, i64* %ux, align 8, !dbg !7696
  %30 = load i64, i64* %vc, align 8, !dbg !7697
  %sub31 = sub i64 0, %30, !dbg !7698
  store i64 %sub31, i64* %vx, align 8, !dbg !7699
  %31 = load i64, i64* %rc, align 8, !dbg !7700
  %sub32 = sub i64 0, %31, !dbg !7701
  store i64 %sub32, i64* %rx, align 8, !dbg !7702
  %32 = load i64, i64* %un, align 8, !dbg !7703
  %33 = load i64, i64* %rc, align 8, !dbg !7703
  %add = add i64 %32, %33, !dbg !7703
  %34 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7703
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %34, i32 0, i32 0, !dbg !7703
  %35 = load i32, i32* %_mp_alloc, align 8, !dbg !7703
  %conv33 = sext i32 %35 to i64, !dbg !7703
  %cmp34 = icmp ugt i64 %add, %conv33, !dbg !7703
  br i1 %cmp34, label %cond.true36, label %cond.false38, !dbg !7703

cond.true36:                                      ; preds = %if.end21
  %36 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7703
  %37 = load i64, i64* %un, align 8, !dbg !7703
  %38 = load i64, i64* %rc, align 8, !dbg !7703
  %add37 = add i64 %37, %38, !dbg !7703
  %call = call i8* @mpz_realloc(%struct.__mpz_struct* %36, i64 %add37), !dbg !7703
  br label %cond.end39, !dbg !7703

cond.false38:                                     ; preds = %if.end21
  %39 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7703
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %39, i32 0, i32 2, !dbg !7703
  %40 = load i64*, i64** %_mp_d, align 8, !dbg !7703
  %41 = bitcast i64* %40 to i8*, !dbg !7703
  br label %cond.end39, !dbg !7703

cond.end39:                                       ; preds = %cond.false38, %cond.true36
  %cond40 = phi i8* [ %call, %cond.true36 ], [ %41, %cond.false38 ], !dbg !7703
  %42 = bitcast i8* %cond40 to i64*, !dbg !7703
  store i64* %42, i64** %rp, align 8, !dbg !7704
  %43 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7705
  %_mp_d41 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %43, i32 0, i32 2, !dbg !7706
  %44 = load i64*, i64** %_mp_d41, align 8, !dbg !7706
  store i64* %44, i64** %up, align 8, !dbg !7707
  %45 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7708
  %_mp_d42 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %45, i32 0, i32 2, !dbg !7709
  %46 = load i64*, i64** %_mp_d42, align 8, !dbg !7709
  store i64* %46, i64** %vp, align 8, !dbg !7710
  store i64 0, i64* %i, align 8, !dbg !7711
  br label %do.body43, !dbg !7712

do.body43:                                        ; preds = %do.cond, %cond.end39
  %47 = load i64*, i64** %up, align 8, !dbg !7713
  %48 = load i64, i64* %i, align 8, !dbg !7715
  %arrayidx = getelementptr inbounds i64, i64* %47, i64 %48, !dbg !7713
  %49 = load i64, i64* %arrayidx, align 8, !dbg !7713
  %50 = load i64, i64* %ux, align 8, !dbg !7716
  %xor44 = xor i64 %49, %50, !dbg !7717
  %51 = load i64, i64* %uc, align 8, !dbg !7718
  %add45 = add i64 %xor44, %51, !dbg !7719
  store i64 %add45, i64* %ul, align 8, !dbg !7720
  %52 = load i64, i64* %ul, align 8, !dbg !7721
  %53 = load i64, i64* %uc, align 8, !dbg !7722
  %cmp46 = icmp ult i64 %52, %53, !dbg !7723
  %conv47 = zext i1 %cmp46 to i32, !dbg !7723
  %conv48 = sext i32 %conv47 to i64, !dbg !7721
  store i64 %conv48, i64* %uc, align 8, !dbg !7724
  %54 = load i64*, i64** %vp, align 8, !dbg !7725
  %55 = load i64, i64* %i, align 8, !dbg !7726
  %arrayidx49 = getelementptr inbounds i64, i64* %54, i64 %55, !dbg !7725
  %56 = load i64, i64* %arrayidx49, align 8, !dbg !7725
  %57 = load i64, i64* %vx, align 8, !dbg !7727
  %xor50 = xor i64 %56, %57, !dbg !7728
  %58 = load i64, i64* %vc, align 8, !dbg !7729
  %add51 = add i64 %xor50, %58, !dbg !7730
  store i64 %add51, i64* %vl, align 8, !dbg !7731
  %59 = load i64, i64* %vl, align 8, !dbg !7732
  %60 = load i64, i64* %vc, align 8, !dbg !7733
  %cmp52 = icmp ult i64 %59, %60, !dbg !7734
  %conv53 = zext i1 %cmp52 to i32, !dbg !7734
  %conv54 = sext i32 %conv53 to i64, !dbg !7732
  store i64 %conv54, i64* %vc, align 8, !dbg !7735
  %61 = load i64, i64* %ul, align 8, !dbg !7736
  %62 = load i64, i64* %vl, align 8, !dbg !7737
  %xor55 = xor i64 %61, %62, !dbg !7738
  %63 = load i64, i64* %rx, align 8, !dbg !7739
  %xor56 = xor i64 %xor55, %63, !dbg !7740
  %64 = load i64, i64* %rc, align 8, !dbg !7741
  %add57 = add i64 %xor56, %64, !dbg !7742
  store i64 %add57, i64* %rl, align 8, !dbg !7743
  %65 = load i64, i64* %rl, align 8, !dbg !7744
  %66 = load i64, i64* %rc, align 8, !dbg !7745
  %cmp58 = icmp ult i64 %65, %66, !dbg !7746
  %conv59 = zext i1 %cmp58 to i32, !dbg !7746
  %conv60 = sext i32 %conv59 to i64, !dbg !7744
  store i64 %conv60, i64* %rc, align 8, !dbg !7747
  %67 = load i64, i64* %rl, align 8, !dbg !7748
  %68 = load i64*, i64** %rp, align 8, !dbg !7749
  %69 = load i64, i64* %i, align 8, !dbg !7750
  %arrayidx61 = getelementptr inbounds i64, i64* %68, i64 %69, !dbg !7749
  store i64 %67, i64* %arrayidx61, align 8, !dbg !7751
  br label %do.cond, !dbg !7752

do.cond:                                          ; preds = %do.body43
  %70 = load i64, i64* %i, align 8, !dbg !7753
  %inc = add nsw i64 %70, 1, !dbg !7753
  store i64 %inc, i64* %i, align 8, !dbg !7753
  %71 = load i64, i64* %vn, align 8, !dbg !7754
  %cmp62 = icmp slt i64 %inc, %71, !dbg !7755
  br i1 %cmp62, label %do.body43, label %do.end64, !dbg !7752, !llvm.loop !7756

do.end64:                                         ; preds = %do.cond
  br label %for.cond, !dbg !7758

for.cond:                                         ; preds = %for.inc, %do.end64
  %72 = load i64, i64* %i, align 8, !dbg !7759
  %73 = load i64, i64* %un, align 8, !dbg !7762
  %cmp65 = icmp slt i64 %72, %73, !dbg !7763
  br i1 %cmp65, label %for.body, label %for.end, !dbg !7764

for.body:                                         ; preds = %for.cond
  %74 = load i64*, i64** %up, align 8, !dbg !7765
  %75 = load i64, i64* %i, align 8, !dbg !7767
  %arrayidx67 = getelementptr inbounds i64, i64* %74, i64 %75, !dbg !7765
  %76 = load i64, i64* %arrayidx67, align 8, !dbg !7765
  %77 = load i64, i64* %ux, align 8, !dbg !7768
  %xor68 = xor i64 %76, %77, !dbg !7769
  %78 = load i64, i64* %uc, align 8, !dbg !7770
  %add69 = add i64 %xor68, %78, !dbg !7771
  store i64 %add69, i64* %ul, align 8, !dbg !7772
  %79 = load i64, i64* %ul, align 8, !dbg !7773
  %80 = load i64, i64* %uc, align 8, !dbg !7774
  %cmp70 = icmp ult i64 %79, %80, !dbg !7775
  %conv71 = zext i1 %cmp70 to i32, !dbg !7775
  %conv72 = sext i32 %conv71 to i64, !dbg !7773
  store i64 %conv72, i64* %uc, align 8, !dbg !7776
  %81 = load i64, i64* %ul, align 8, !dbg !7777
  %82 = load i64, i64* %ux, align 8, !dbg !7778
  %xor73 = xor i64 %81, %82, !dbg !7779
  %83 = load i64, i64* %rc, align 8, !dbg !7780
  %add74 = add i64 %xor73, %83, !dbg !7781
  store i64 %add74, i64* %rl, align 8, !dbg !7782
  %84 = load i64, i64* %rl, align 8, !dbg !7783
  %85 = load i64, i64* %rc, align 8, !dbg !7784
  %cmp75 = icmp ult i64 %84, %85, !dbg !7785
  %conv76 = zext i1 %cmp75 to i32, !dbg !7785
  %conv77 = sext i32 %conv76 to i64, !dbg !7783
  store i64 %conv77, i64* %rc, align 8, !dbg !7786
  %86 = load i64, i64* %rl, align 8, !dbg !7787
  %87 = load i64*, i64** %rp, align 8, !dbg !7788
  %88 = load i64, i64* %i, align 8, !dbg !7789
  %arrayidx78 = getelementptr inbounds i64, i64* %87, i64 %88, !dbg !7788
  store i64 %86, i64* %arrayidx78, align 8, !dbg !7790
  br label %for.inc, !dbg !7791

for.inc:                                          ; preds = %for.body
  %89 = load i64, i64* %i, align 8, !dbg !7792
  %inc79 = add nsw i64 %89, 1, !dbg !7792
  store i64 %inc79, i64* %i, align 8, !dbg !7792
  br label %for.cond, !dbg !7793, !llvm.loop !7794

for.end:                                          ; preds = %for.cond
  %90 = load i64, i64* %rc, align 8, !dbg !7796
  %tobool = icmp ne i64 %90, 0, !dbg !7796
  br i1 %tobool, label %if.then80, label %if.else, !dbg !7798

if.then80:                                        ; preds = %for.end
  %91 = load i64, i64* %rc, align 8, !dbg !7799
  %92 = load i64*, i64** %rp, align 8, !dbg !7800
  %93 = load i64, i64* %un, align 8, !dbg !7801
  %inc81 = add nsw i64 %93, 1, !dbg !7801
  store i64 %inc81, i64* %un, align 8, !dbg !7801
  %arrayidx82 = getelementptr inbounds i64, i64* %92, i64 %93, !dbg !7800
  store i64 %91, i64* %arrayidx82, align 8, !dbg !7802
  br label %if.end84, !dbg !7800

if.else:                                          ; preds = %for.end
  %94 = load i64*, i64** %rp, align 8, !dbg !7803
  %95 = load i64, i64* %un, align 8, !dbg !7804
  %call83 = call i64 @mpn_normalized_size(i64* %94, i64 %95), !dbg !7805
  store i64 %call83, i64* %un, align 8, !dbg !7806
  br label %if.end84

if.end84:                                         ; preds = %if.else, %if.then80
  %96 = load i64, i64* %rx, align 8, !dbg !7807
  %tobool85 = icmp ne i64 %96, 0, !dbg !7807
  br i1 %tobool85, label %cond.true86, label %cond.false88, !dbg !7807

cond.true86:                                      ; preds = %if.end84
  %97 = load i64, i64* %un, align 8, !dbg !7808
  %sub87 = sub nsw i64 0, %97, !dbg !7809
  br label %cond.end89, !dbg !7807

cond.false88:                                     ; preds = %if.end84
  %98 = load i64, i64* %un, align 8, !dbg !7810
  br label %cond.end89, !dbg !7807

cond.end89:                                       ; preds = %cond.false88, %cond.true86
  %cond90 = phi i64 [ %sub87, %cond.true86 ], [ %98, %cond.false88 ], !dbg !7807
  %conv91 = trunc i64 %cond90 to i32, !dbg !7807
  %99 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !7811
  %_mp_size92 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %99, i32 0, i32 1, !dbg !7812
  store i32 %conv91, i32* %_mp_size92, align 4, !dbg !7813
  br label %return, !dbg !7814

return:                                           ; preds = %cond.end89, %if.then20
  ret void, !dbg !7814
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpn_popcount(i64* %p, i64 %n) #0 !dbg !7815 {
entry:
  %p.addr = alloca i64*, align 8
  %n.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i64, align 8
  store i64* %p, i64** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %p.addr, metadata !7818, metadata !DIExpression()), !dbg !7819
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !7820, metadata !DIExpression()), !dbg !7821
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7822, metadata !DIExpression()), !dbg !7823
  call void @llvm.dbg.declare(metadata i64* %c, metadata !7824, metadata !DIExpression()), !dbg !7825
  store i64 0, i64* %c, align 8, !dbg !7826
  store i64 0, i64* %i, align 8, !dbg !7828
  br label %for.cond, !dbg !7829

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8, !dbg !7830
  %1 = load i64, i64* %n.addr, align 8, !dbg !7832
  %cmp = icmp slt i64 %0, %1, !dbg !7833
  br i1 %cmp, label %for.body, label %for.end, !dbg !7834

for.body:                                         ; preds = %for.cond
  %2 = load i64*, i64** %p.addr, align 8, !dbg !7835
  %3 = load i64, i64* %i, align 8, !dbg !7836
  %arrayidx = getelementptr inbounds i64, i64* %2, i64 %3, !dbg !7835
  %4 = load i64, i64* %arrayidx, align 8, !dbg !7835
  %call = call i32 @gmp_popcount_limb(i64 %4), !dbg !7837
  %conv = zext i32 %call to i64, !dbg !7837
  %5 = load i64, i64* %c, align 8, !dbg !7838
  %add = add i64 %5, %conv, !dbg !7838
  store i64 %add, i64* %c, align 8, !dbg !7838
  br label %for.inc, !dbg !7839

for.inc:                                          ; preds = %for.body
  %6 = load i64, i64* %i, align 8, !dbg !7840
  %inc = add nsw i64 %6, 1, !dbg !7840
  store i64 %inc, i64* %i, align 8, !dbg !7840
  br label %for.cond, !dbg !7841, !llvm.loop !7842

for.end:                                          ; preds = %for.cond
  %7 = load i64, i64* %c, align 8, !dbg !7844
  ret i64 %7, !dbg !7845
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gmp_popcount_limb(i64 %x) #0 !dbg !7846 {
entry:
  %x.addr = alloca i64, align 8
  %c = alloca i32, align 4
  %w = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !7849, metadata !DIExpression()), !dbg !7850
  call void @llvm.dbg.declare(metadata i32* %c, metadata !7851, metadata !DIExpression()), !dbg !7852
  store i32 0, i32* %c, align 4, !dbg !7853
  br label %for.cond, !dbg !7855

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %x.addr, align 8, !dbg !7856
  %cmp = icmp ugt i64 %0, 0, !dbg !7858
  br i1 %cmp, label %for.body, label %for.end, !dbg !7859

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %w, metadata !7860, metadata !DIExpression()), !dbg !7862
  %1 = load i64, i64* %x.addr, align 8, !dbg !7863
  %shr = lshr i64 %1, 1, !dbg !7864
  %and = and i64 %shr, 21845, !dbg !7865
  %2 = load i64, i64* %x.addr, align 8, !dbg !7866
  %and1 = and i64 %2, 21845, !dbg !7867
  %add = add i64 %and, %and1, !dbg !7868
  %conv = trunc i64 %add to i32, !dbg !7869
  store i32 %conv, i32* %w, align 4, !dbg !7862
  %3 = load i32, i32* %w, align 4, !dbg !7870
  %shr2 = lshr i32 %3, 2, !dbg !7871
  %and3 = and i32 %shr2, 13107, !dbg !7872
  %4 = load i32, i32* %w, align 4, !dbg !7873
  %and4 = and i32 %4, 13107, !dbg !7874
  %add5 = add i32 %and3, %and4, !dbg !7875
  store i32 %add5, i32* %w, align 4, !dbg !7876
  %5 = load i32, i32* %w, align 4, !dbg !7877
  %shr6 = lshr i32 %5, 4, !dbg !7878
  %and7 = and i32 %shr6, 3855, !dbg !7879
  %6 = load i32, i32* %w, align 4, !dbg !7880
  %and8 = and i32 %6, 3855, !dbg !7881
  %add9 = add i32 %and7, %and8, !dbg !7882
  store i32 %add9, i32* %w, align 4, !dbg !7883
  %7 = load i32, i32* %w, align 4, !dbg !7884
  %shr10 = lshr i32 %7, 8, !dbg !7885
  %8 = load i32, i32* %w, align 4, !dbg !7886
  %and11 = and i32 %8, 255, !dbg !7887
  %add12 = add i32 %shr10, %and11, !dbg !7888
  store i32 %add12, i32* %w, align 4, !dbg !7889
  %9 = load i32, i32* %w, align 4, !dbg !7890
  %10 = load i32, i32* %c, align 4, !dbg !7891
  %add13 = add i32 %10, %9, !dbg !7891
  store i32 %add13, i32* %c, align 4, !dbg !7891
  br label %for.inc, !dbg !7892

for.inc:                                          ; preds = %for.body
  %11 = load i64, i64* %x.addr, align 8, !dbg !7893
  %shr14 = lshr i64 %11, 16, !dbg !7893
  store i64 %shr14, i64* %x.addr, align 8, !dbg !7893
  br label %for.cond, !dbg !7894, !llvm.loop !7895

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %c, align 4, !dbg !7897
  ret i32 %12, !dbg !7898
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_popcount(%struct.__mpz_struct* %u) #0 !dbg !7899 {
entry:
  %retval = alloca i64, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %un = alloca i64, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !7902, metadata !DIExpression()), !dbg !7903
  call void @llvm.dbg.declare(metadata i64* %un, metadata !7904, metadata !DIExpression()), !dbg !7905
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7906
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !7907
  %1 = load i32, i32* %_mp_size, align 4, !dbg !7907
  %conv = sext i32 %1 to i64, !dbg !7906
  store i64 %conv, i64* %un, align 8, !dbg !7908
  %2 = load i64, i64* %un, align 8, !dbg !7909
  %cmp = icmp slt i64 %2, 0, !dbg !7911
  br i1 %cmp, label %if.then, label %if.end, !dbg !7912

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval, align 8, !dbg !7913
  br label %return, !dbg !7913

if.end:                                           ; preds = %entry
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7914
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %3, i32 0, i32 2, !dbg !7915
  %4 = load i64*, i64** %_mp_d, align 8, !dbg !7915
  %5 = load i64, i64* %un, align 8, !dbg !7916
  %call = call i64 @mpn_popcount(i64* %4, i64 %5), !dbg !7917
  store i64 %call, i64* %retval, align 8, !dbg !7918
  br label %return, !dbg !7918

return:                                           ; preds = %if.end, %if.then
  %6 = load i64, i64* %retval, align 8, !dbg !7919
  ret i64 %6, !dbg !7919
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_hamdist(%struct.__mpz_struct* %u, %struct.__mpz_struct* %v) #0 !dbg !7920 {
entry:
  %retval = alloca i64, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %v.addr = alloca %struct.__mpz_struct*, align 8
  %un = alloca i64, align 8
  %vn = alloca i64, align 8
  %i = alloca i64, align 8
  %uc = alloca i64, align 8
  %vc = alloca i64, align 8
  %ul = alloca i64, align 8
  %vl = alloca i64, align 8
  %comp = alloca i64, align 8
  %up = alloca i64*, align 8
  %vp = alloca i64*, align 8
  %c = alloca i64, align 8
  %__mp_srcptr_swap__tmp = alloca i64*, align 8
  %__mp_size_t_swap__tmp = alloca i64, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !7923, metadata !DIExpression()), !dbg !7924
  store %struct.__mpz_struct* %v, %struct.__mpz_struct** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %v.addr, metadata !7925, metadata !DIExpression()), !dbg !7926
  call void @llvm.dbg.declare(metadata i64* %un, metadata !7927, metadata !DIExpression()), !dbg !7928
  call void @llvm.dbg.declare(metadata i64* %vn, metadata !7929, metadata !DIExpression()), !dbg !7930
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7931, metadata !DIExpression()), !dbg !7932
  call void @llvm.dbg.declare(metadata i64* %uc, metadata !7933, metadata !DIExpression()), !dbg !7934
  call void @llvm.dbg.declare(metadata i64* %vc, metadata !7935, metadata !DIExpression()), !dbg !7936
  call void @llvm.dbg.declare(metadata i64* %ul, metadata !7937, metadata !DIExpression()), !dbg !7938
  call void @llvm.dbg.declare(metadata i64* %vl, metadata !7939, metadata !DIExpression()), !dbg !7940
  call void @llvm.dbg.declare(metadata i64* %comp, metadata !7941, metadata !DIExpression()), !dbg !7942
  call void @llvm.dbg.declare(metadata i64** %up, metadata !7943, metadata !DIExpression()), !dbg !7944
  call void @llvm.dbg.declare(metadata i64** %vp, metadata !7945, metadata !DIExpression()), !dbg !7946
  call void @llvm.dbg.declare(metadata i64* %c, metadata !7947, metadata !DIExpression()), !dbg !7948
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7949
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !7950
  %1 = load i32, i32* %_mp_size, align 4, !dbg !7950
  %conv = sext i32 %1 to i64, !dbg !7949
  store i64 %conv, i64* %un, align 8, !dbg !7951
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7952
  %_mp_size1 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %2, i32 0, i32 1, !dbg !7953
  %3 = load i32, i32* %_mp_size1, align 4, !dbg !7953
  %conv2 = sext i32 %3 to i64, !dbg !7952
  store i64 %conv2, i64* %vn, align 8, !dbg !7954
  %4 = load i64, i64* %un, align 8, !dbg !7955
  %5 = load i64, i64* %vn, align 8, !dbg !7957
  %xor = xor i64 %4, %5, !dbg !7958
  %cmp = icmp slt i64 %xor, 0, !dbg !7959
  br i1 %cmp, label %if.then, label %if.end, !dbg !7960

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval, align 8, !dbg !7961
  br label %return, !dbg !7961

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %un, align 8, !dbg !7962
  %cmp4 = icmp slt i64 %6, 0, !dbg !7963
  %conv5 = zext i1 %cmp4 to i32, !dbg !7963
  %conv6 = sext i32 %conv5 to i64, !dbg !7964
  store i64 %conv6, i64* %vc, align 8, !dbg !7965
  store i64 %conv6, i64* %uc, align 8, !dbg !7966
  %sub = sub i64 0, %conv6, !dbg !7967
  store i64 %sub, i64* %comp, align 8, !dbg !7968
  %7 = load i64, i64* %uc, align 8, !dbg !7969
  %tobool = icmp ne i64 %7, 0, !dbg !7969
  br i1 %tobool, label %if.then7, label %if.end10, !dbg !7971

if.then7:                                         ; preds = %if.end
  %8 = load i64, i64* %un, align 8, !dbg !7972
  %sub8 = sub nsw i64 0, %8, !dbg !7974
  store i64 %sub8, i64* %un, align 8, !dbg !7975
  %9 = load i64, i64* %vn, align 8, !dbg !7976
  %sub9 = sub nsw i64 0, %9, !dbg !7977
  store i64 %sub9, i64* %vn, align 8, !dbg !7978
  br label %if.end10, !dbg !7979

if.end10:                                         ; preds = %if.then7, %if.end
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !7980
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %10, i32 0, i32 2, !dbg !7981
  %11 = load i64*, i64** %_mp_d, align 8, !dbg !7981
  store i64* %11, i64** %up, align 8, !dbg !7982
  %12 = load %struct.__mpz_struct*, %struct.__mpz_struct** %v.addr, align 8, !dbg !7983
  %_mp_d11 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %12, i32 0, i32 2, !dbg !7984
  %13 = load i64*, i64** %_mp_d11, align 8, !dbg !7984
  store i64* %13, i64** %vp, align 8, !dbg !7985
  %14 = load i64, i64* %un, align 8, !dbg !7986
  %15 = load i64, i64* %vn, align 8, !dbg !7988
  %cmp12 = icmp slt i64 %14, %15, !dbg !7989
  br i1 %cmp12, label %if.then14, label %if.end19, !dbg !7990

if.then14:                                        ; preds = %if.end10
  br label %do.body, !dbg !7991

do.body:                                          ; preds = %if.then14
  br label %do.body15, !dbg !7992

do.body15:                                        ; preds = %do.body
  call void @llvm.dbg.declare(metadata i64** %__mp_srcptr_swap__tmp, metadata !7994, metadata !DIExpression()), !dbg !7996
  %16 = load i64*, i64** %up, align 8, !dbg !7996
  store i64* %16, i64** %__mp_srcptr_swap__tmp, align 8, !dbg !7996
  %17 = load i64*, i64** %vp, align 8, !dbg !7996
  store i64* %17, i64** %up, align 8, !dbg !7996
  %18 = load i64*, i64** %__mp_srcptr_swap__tmp, align 8, !dbg !7996
  store i64* %18, i64** %vp, align 8, !dbg !7996
  br label %do.end, !dbg !7996

do.end:                                           ; preds = %do.body15
  br label %do.body16, !dbg !7992

do.body16:                                        ; preds = %do.end
  call void @llvm.dbg.declare(metadata i64* %__mp_size_t_swap__tmp, metadata !7997, metadata !DIExpression()), !dbg !7999
  %19 = load i64, i64* %un, align 8, !dbg !7999
  store i64 %19, i64* %__mp_size_t_swap__tmp, align 8, !dbg !7999
  %20 = load i64, i64* %vn, align 8, !dbg !7999
  store i64 %20, i64* %un, align 8, !dbg !7999
  %21 = load i64, i64* %__mp_size_t_swap__tmp, align 8, !dbg !7999
  store i64 %21, i64* %vn, align 8, !dbg !7999
  br label %do.end17, !dbg !7999

do.end17:                                         ; preds = %do.body16
  br label %do.end18, !dbg !7992

do.end18:                                         ; preds = %do.end17
  br label %if.end19, !dbg !7992

if.end19:                                         ; preds = %do.end18, %if.end10
  store i64 0, i64* %i, align 8, !dbg !8000
  store i64 0, i64* %c, align 8, !dbg !8002
  br label %for.cond, !dbg !8003

for.cond:                                         ; preds = %for.inc, %if.end19
  %22 = load i64, i64* %i, align 8, !dbg !8004
  %23 = load i64, i64* %vn, align 8, !dbg !8006
  %cmp20 = icmp slt i64 %22, %23, !dbg !8007
  br i1 %cmp20, label %for.body, label %for.end, !dbg !8008

for.body:                                         ; preds = %for.cond
  %24 = load i64*, i64** %up, align 8, !dbg !8009
  %25 = load i64, i64* %i, align 8, !dbg !8011
  %arrayidx = getelementptr inbounds i64, i64* %24, i64 %25, !dbg !8009
  %26 = load i64, i64* %arrayidx, align 8, !dbg !8009
  %27 = load i64, i64* %comp, align 8, !dbg !8012
  %xor22 = xor i64 %26, %27, !dbg !8013
  %28 = load i64, i64* %uc, align 8, !dbg !8014
  %add = add i64 %xor22, %28, !dbg !8015
  store i64 %add, i64* %ul, align 8, !dbg !8016
  %29 = load i64, i64* %ul, align 8, !dbg !8017
  %30 = load i64, i64* %uc, align 8, !dbg !8018
  %cmp23 = icmp ult i64 %29, %30, !dbg !8019
  %conv24 = zext i1 %cmp23 to i32, !dbg !8019
  %conv25 = sext i32 %conv24 to i64, !dbg !8017
  store i64 %conv25, i64* %uc, align 8, !dbg !8020
  %31 = load i64*, i64** %vp, align 8, !dbg !8021
  %32 = load i64, i64* %i, align 8, !dbg !8022
  %arrayidx26 = getelementptr inbounds i64, i64* %31, i64 %32, !dbg !8021
  %33 = load i64, i64* %arrayidx26, align 8, !dbg !8021
  %34 = load i64, i64* %comp, align 8, !dbg !8023
  %xor27 = xor i64 %33, %34, !dbg !8024
  %35 = load i64, i64* %vc, align 8, !dbg !8025
  %add28 = add i64 %xor27, %35, !dbg !8026
  store i64 %add28, i64* %vl, align 8, !dbg !8027
  %36 = load i64, i64* %vl, align 8, !dbg !8028
  %37 = load i64, i64* %vc, align 8, !dbg !8029
  %cmp29 = icmp ult i64 %36, %37, !dbg !8030
  %conv30 = zext i1 %cmp29 to i32, !dbg !8030
  %conv31 = sext i32 %conv30 to i64, !dbg !8028
  store i64 %conv31, i64* %vc, align 8, !dbg !8031
  %38 = load i64, i64* %ul, align 8, !dbg !8032
  %39 = load i64, i64* %vl, align 8, !dbg !8033
  %xor32 = xor i64 %38, %39, !dbg !8034
  %call = call i32 @gmp_popcount_limb(i64 %xor32), !dbg !8035
  %conv33 = zext i32 %call to i64, !dbg !8035
  %40 = load i64, i64* %c, align 8, !dbg !8036
  %add34 = add i64 %40, %conv33, !dbg !8036
  store i64 %add34, i64* %c, align 8, !dbg !8036
  br label %for.inc, !dbg !8037

for.inc:                                          ; preds = %for.body
  %41 = load i64, i64* %i, align 8, !dbg !8038
  %inc = add nsw i64 %41, 1, !dbg !8038
  store i64 %inc, i64* %i, align 8, !dbg !8038
  br label %for.cond, !dbg !8039, !llvm.loop !8040

for.end:                                          ; preds = %for.cond
  br label %for.cond35, !dbg !8042

for.cond35:                                       ; preds = %for.inc49, %for.end
  %42 = load i64, i64* %i, align 8, !dbg !8043
  %43 = load i64, i64* %un, align 8, !dbg !8046
  %cmp36 = icmp slt i64 %42, %43, !dbg !8047
  br i1 %cmp36, label %for.body38, label %for.end51, !dbg !8048

for.body38:                                       ; preds = %for.cond35
  %44 = load i64*, i64** %up, align 8, !dbg !8049
  %45 = load i64, i64* %i, align 8, !dbg !8051
  %arrayidx39 = getelementptr inbounds i64, i64* %44, i64 %45, !dbg !8049
  %46 = load i64, i64* %arrayidx39, align 8, !dbg !8049
  %47 = load i64, i64* %comp, align 8, !dbg !8052
  %xor40 = xor i64 %46, %47, !dbg !8053
  %48 = load i64, i64* %uc, align 8, !dbg !8054
  %add41 = add i64 %xor40, %48, !dbg !8055
  store i64 %add41, i64* %ul, align 8, !dbg !8056
  %49 = load i64, i64* %ul, align 8, !dbg !8057
  %50 = load i64, i64* %uc, align 8, !dbg !8058
  %cmp42 = icmp ult i64 %49, %50, !dbg !8059
  %conv43 = zext i1 %cmp42 to i32, !dbg !8059
  %conv44 = sext i32 %conv43 to i64, !dbg !8057
  store i64 %conv44, i64* %uc, align 8, !dbg !8060
  %51 = load i64, i64* %ul, align 8, !dbg !8061
  %52 = load i64, i64* %comp, align 8, !dbg !8062
  %xor45 = xor i64 %51, %52, !dbg !8063
  %call46 = call i32 @gmp_popcount_limb(i64 %xor45), !dbg !8064
  %conv47 = zext i32 %call46 to i64, !dbg !8064
  %53 = load i64, i64* %c, align 8, !dbg !8065
  %add48 = add i64 %53, %conv47, !dbg !8065
  store i64 %add48, i64* %c, align 8, !dbg !8065
  br label %for.inc49, !dbg !8066

for.inc49:                                        ; preds = %for.body38
  %54 = load i64, i64* %i, align 8, !dbg !8067
  %inc50 = add nsw i64 %54, 1, !dbg !8067
  store i64 %inc50, i64* %i, align 8, !dbg !8067
  br label %for.cond35, !dbg !8068, !llvm.loop !8069

for.end51:                                        ; preds = %for.cond35
  %55 = load i64, i64* %c, align 8, !dbg !8071
  store i64 %55, i64* %retval, align 8, !dbg !8072
  br label %return, !dbg !8072

return:                                           ; preds = %for.end51, %if.then
  %56 = load i64, i64* %retval, align 8, !dbg !8073
  ret i64 %56, !dbg !8073
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_scan0(%struct.__mpz_struct* %u, i64 %starting_bit) #0 !dbg !8074 {
entry:
  %retval = alloca i64, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %starting_bit.addr = alloca i64, align 8
  %up = alloca i64*, align 8
  %us = alloca i64, align 8
  %un = alloca i64, align 8
  %i = alloca i64, align 8
  %limb = alloca i64, align 8
  %ux = alloca i64, align 8
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !8075, metadata !DIExpression()), !dbg !8076
  store i64 %starting_bit, i64* %starting_bit.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %starting_bit.addr, metadata !8077, metadata !DIExpression()), !dbg !8078
  call void @llvm.dbg.declare(metadata i64** %up, metadata !8079, metadata !DIExpression()), !dbg !8080
  call void @llvm.dbg.declare(metadata i64* %us, metadata !8081, metadata !DIExpression()), !dbg !8082
  call void @llvm.dbg.declare(metadata i64* %un, metadata !8083, metadata !DIExpression()), !dbg !8084
  call void @llvm.dbg.declare(metadata i64* %i, metadata !8085, metadata !DIExpression()), !dbg !8086
  call void @llvm.dbg.declare(metadata i64* %limb, metadata !8087, metadata !DIExpression()), !dbg !8088
  call void @llvm.dbg.declare(metadata i64* %ux, metadata !8089, metadata !DIExpression()), !dbg !8090
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !8091
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %0, i32 0, i32 1, !dbg !8092
  %1 = load i32, i32* %_mp_size, align 4, !dbg !8092
  %conv = sext i32 %1 to i64, !dbg !8091
  store i64 %conv, i64* %us, align 8, !dbg !8093
  %2 = load i64, i64* %us, align 8, !dbg !8094
  %cmp = icmp sge i64 %2, 0, !dbg !8095
  %conv1 = zext i1 %cmp to i32, !dbg !8095
  %conv2 = sext i32 %conv1 to i64, !dbg !8096
  %sub = sub i64 0, %conv2, !dbg !8097
  store i64 %sub, i64* %ux, align 8, !dbg !8098
  %3 = load i64, i64* %us, align 8, !dbg !8099
  %cmp3 = icmp sge i64 %3, 0, !dbg !8099
  br i1 %cmp3, label %cond.true, label %cond.false, !dbg !8099

cond.true:                                        ; preds = %entry
  %4 = load i64, i64* %us, align 8, !dbg !8099
  br label %cond.end, !dbg !8099

cond.false:                                       ; preds = %entry
  %5 = load i64, i64* %us, align 8, !dbg !8099
  %sub5 = sub nsw i64 0, %5, !dbg !8099
  br label %cond.end, !dbg !8099

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %4, %cond.true ], [ %sub5, %cond.false ], !dbg !8099
  store i64 %cond, i64* %un, align 8, !dbg !8100
  %6 = load i64, i64* %starting_bit.addr, align 8, !dbg !8101
  %div = udiv i64 %6, 64, !dbg !8102
  store i64 %div, i64* %i, align 8, !dbg !8103
  %7 = load i64, i64* %i, align 8, !dbg !8104
  %8 = load i64, i64* %un, align 8, !dbg !8106
  %cmp6 = icmp sge i64 %7, %8, !dbg !8107
  br i1 %cmp6, label %if.then, label %if.end, !dbg !8108

if.then:                                          ; preds = %cond.end
  %9 = load i64, i64* %ux, align 8, !dbg !8109
  %tobool = icmp ne i64 %9, 0, !dbg !8109
  br i1 %tobool, label %cond.true8, label %cond.false9, !dbg !8109

cond.true8:                                       ; preds = %if.then
  %10 = load i64, i64* %starting_bit.addr, align 8, !dbg !8110
  br label %cond.end10, !dbg !8109

cond.false9:                                      ; preds = %if.then
  br label %cond.end10, !dbg !8109

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i64 [ %10, %cond.true8 ], [ -1, %cond.false9 ], !dbg !8109
  store i64 %cond11, i64* %retval, align 8, !dbg !8111
  br label %return, !dbg !8111

if.end:                                           ; preds = %cond.end
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !8112
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %11, i32 0, i32 2, !dbg !8113
  %12 = load i64*, i64** %_mp_d, align 8, !dbg !8113
  store i64* %12, i64** %up, align 8, !dbg !8114
  %13 = load i64*, i64** %up, align 8, !dbg !8115
  %14 = load i64, i64* %i, align 8, !dbg !8116
  %arrayidx = getelementptr inbounds i64, i64* %13, i64 %14, !dbg !8115
  %15 = load i64, i64* %arrayidx, align 8, !dbg !8115
  %16 = load i64, i64* %ux, align 8, !dbg !8117
  %xor = xor i64 %15, %16, !dbg !8118
  store i64 %xor, i64* %limb, align 8, !dbg !8119
  %17 = load i64, i64* %ux, align 8, !dbg !8120
  %cmp12 = icmp eq i64 %17, 0, !dbg !8122
  br i1 %cmp12, label %if.then14, label %if.end19, !dbg !8123

if.then14:                                        ; preds = %if.end
  %18 = load i64*, i64** %up, align 8, !dbg !8124
  %19 = load i64, i64* %i, align 8, !dbg !8124
  %call = call i64 @mpn_normalized_size(i64* %18, i64 %19), !dbg !8124
  %cmp15 = icmp eq i64 %call, 0, !dbg !8124
  %conv16 = zext i1 %cmp15 to i32, !dbg !8124
  %conv17 = sext i32 %conv16 to i64, !dbg !8124
  %20 = load i64, i64* %limb, align 8, !dbg !8125
  %sub18 = sub i64 %20, %conv17, !dbg !8125
  store i64 %sub18, i64* %limb, align 8, !dbg !8125
  br label %if.end19, !dbg !8126

if.end19:                                         ; preds = %if.then14, %if.end
  %21 = load i64, i64* %starting_bit.addr, align 8, !dbg !8127
  %rem = urem i64 %21, 64, !dbg !8128
  %shl = shl i64 -1, %rem, !dbg !8129
  %22 = load i64, i64* %limb, align 8, !dbg !8130
  %and = and i64 %22, %shl, !dbg !8130
  store i64 %and, i64* %limb, align 8, !dbg !8130
  %23 = load i64, i64* %limb, align 8, !dbg !8131
  %24 = load i64, i64* %i, align 8, !dbg !8132
  %25 = load i64*, i64** %up, align 8, !dbg !8133
  %26 = load i64, i64* %un, align 8, !dbg !8134
  %27 = load i64, i64* %ux, align 8, !dbg !8135
  %call20 = call i64 @mpn_common_scan(i64 %23, i64 %24, i64* %25, i64 %26, i64 %27), !dbg !8136
  store i64 %call20, i64* %retval, align 8, !dbg !8137
  br label %return, !dbg !8137

return:                                           ; preds = %if.end19, %cond.end10
  %28 = load i64, i64* %retval, align 8, !dbg !8138
  ret i64 %28, !dbg !8138
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpn_limb_size_in_base_2(i64 %u) #0 !dbg !8139 {
entry:
  %u.addr = alloca i64, align 8
  %shift = alloca i32, align 4
  %__clz_x = alloca i64, align 8
  %__clz_c = alloca i32, align 4
  store i64 %u, i64* %u.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %u.addr, metadata !8142, metadata !DIExpression()), !dbg !8143
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !8144, metadata !DIExpression()), !dbg !8145
  br label %do.body, !dbg !8146

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %__clz_x, metadata !8147, metadata !DIExpression()), !dbg !8149
  %0 = load i64, i64* %u.addr, align 8, !dbg !8149
  store i64 %0, i64* %__clz_x, align 8, !dbg !8149
  call void @llvm.dbg.declare(metadata i32* %__clz_c, metadata !8150, metadata !DIExpression()), !dbg !8149
  store i32 0, i32* %__clz_c, align 4, !dbg !8151
  br label %for.cond, !dbg !8151

for.cond:                                         ; preds = %for.inc, %do.body
  %1 = load i64, i64* %__clz_x, align 8, !dbg !8153
  %and = and i64 %1, -72057594037927936, !dbg !8153
  %cmp = icmp eq i64 %and, 0, !dbg !8153
  br i1 %cmp, label %for.body, label %for.end, !dbg !8151

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %__clz_x, align 8, !dbg !8153
  %shl = shl i64 %2, 8, !dbg !8153
  store i64 %shl, i64* %__clz_x, align 8, !dbg !8153
  br label %for.inc, !dbg !8153

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %__clz_c, align 4, !dbg !8153
  %add = add i32 %3, 8, !dbg !8153
  store i32 %add, i32* %__clz_c, align 4, !dbg !8153
  br label %for.cond, !dbg !8153, !llvm.loop !8155

for.end:                                          ; preds = %for.cond
  br label %for.cond1, !dbg !8149

for.cond1:                                        ; preds = %for.inc6, %for.end
  %4 = load i64, i64* %__clz_x, align 8, !dbg !8156
  %and2 = and i64 %4, -9223372036854775808, !dbg !8156
  %cmp3 = icmp eq i64 %and2, 0, !dbg !8156
  br i1 %cmp3, label %for.body4, label %for.end7, !dbg !8159

for.body4:                                        ; preds = %for.cond1
  %5 = load i64, i64* %__clz_x, align 8, !dbg !8156
  %shl5 = shl i64 %5, 1, !dbg !8156
  store i64 %shl5, i64* %__clz_x, align 8, !dbg !8156
  br label %for.inc6, !dbg !8156

for.inc6:                                         ; preds = %for.body4
  %6 = load i32, i32* %__clz_c, align 4, !dbg !8156
  %inc = add i32 %6, 1, !dbg !8156
  store i32 %inc, i32* %__clz_c, align 4, !dbg !8156
  br label %for.cond1, !dbg !8156, !llvm.loop !8160

for.end7:                                         ; preds = %for.cond1
  %7 = load i32, i32* %__clz_c, align 4, !dbg !8149
  store i32 %7, i32* %shift, align 4, !dbg !8149
  br label %do.end, !dbg !8149

do.end:                                           ; preds = %for.end7
  %8 = load i32, i32* %shift, align 4, !dbg !8161
  %conv = zext i32 %8 to i64, !dbg !8161
  %sub = sub i64 64, %conv, !dbg !8162
  ret i64 %sub, !dbg !8163
}

; Function Attrs: noinline nounwind uwtable
define internal void @mpn_div_qr_1_invert(%struct.gmp_div_inverse* %inv, i64 %d) #0 !dbg !8164 {
entry:
  %inv.addr = alloca %struct.gmp_div_inverse*, align 8
  %d.addr = alloca i64, align 8
  %shift = alloca i32, align 4
  %__clz_x = alloca i64, align 8
  %__clz_c = alloca i32, align 4
  store %struct.gmp_div_inverse* %inv, %struct.gmp_div_inverse** %inv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gmp_div_inverse** %inv.addr, metadata !8167, metadata !DIExpression()), !dbg !8168
  store i64 %d, i64* %d.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d.addr, metadata !8169, metadata !DIExpression()), !dbg !8170
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !8171, metadata !DIExpression()), !dbg !8172
  br label %do.body, !dbg !8173

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %__clz_x, metadata !8174, metadata !DIExpression()), !dbg !8176
  %0 = load i64, i64* %d.addr, align 8, !dbg !8176
  store i64 %0, i64* %__clz_x, align 8, !dbg !8176
  call void @llvm.dbg.declare(metadata i32* %__clz_c, metadata !8177, metadata !DIExpression()), !dbg !8176
  store i32 0, i32* %__clz_c, align 4, !dbg !8178
  br label %for.cond, !dbg !8178

for.cond:                                         ; preds = %for.inc, %do.body
  %1 = load i64, i64* %__clz_x, align 8, !dbg !8180
  %and = and i64 %1, -72057594037927936, !dbg !8180
  %cmp = icmp eq i64 %and, 0, !dbg !8180
  br i1 %cmp, label %for.body, label %for.end, !dbg !8178

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %__clz_x, align 8, !dbg !8180
  %shl = shl i64 %2, 8, !dbg !8180
  store i64 %shl, i64* %__clz_x, align 8, !dbg !8180
  br label %for.inc, !dbg !8180

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %__clz_c, align 4, !dbg !8180
  %add = add i32 %3, 8, !dbg !8180
  store i32 %add, i32* %__clz_c, align 4, !dbg !8180
  br label %for.cond, !dbg !8180, !llvm.loop !8182

for.end:                                          ; preds = %for.cond
  br label %for.cond1, !dbg !8176

for.cond1:                                        ; preds = %for.inc6, %for.end
  %4 = load i64, i64* %__clz_x, align 8, !dbg !8183
  %and2 = and i64 %4, -9223372036854775808, !dbg !8183
  %cmp3 = icmp eq i64 %and2, 0, !dbg !8183
  br i1 %cmp3, label %for.body4, label %for.end7, !dbg !8186

for.body4:                                        ; preds = %for.cond1
  %5 = load i64, i64* %__clz_x, align 8, !dbg !8183
  %shl5 = shl i64 %5, 1, !dbg !8183
  store i64 %shl5, i64* %__clz_x, align 8, !dbg !8183
  br label %for.inc6, !dbg !8183

for.inc6:                                         ; preds = %for.body4
  %6 = load i32, i32* %__clz_c, align 4, !dbg !8183
  %inc = add i32 %6, 1, !dbg !8183
  store i32 %inc, i32* %__clz_c, align 4, !dbg !8183
  br label %for.cond1, !dbg !8183, !llvm.loop !8187

for.end7:                                         ; preds = %for.cond1
  %7 = load i32, i32* %__clz_c, align 4, !dbg !8176
  store i32 %7, i32* %shift, align 4, !dbg !8176
  br label %do.end, !dbg !8176

do.end:                                           ; preds = %for.end7
  %8 = load i32, i32* %shift, align 4, !dbg !8188
  %9 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !8189
  %shift8 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %9, i32 0, i32 0, !dbg !8190
  store i32 %8, i32* %shift8, align 8, !dbg !8191
  %10 = load i64, i64* %d.addr, align 8, !dbg !8192
  %11 = load i32, i32* %shift, align 4, !dbg !8193
  %sh_prom = zext i32 %11 to i64, !dbg !8194
  %shl9 = shl i64 %10, %sh_prom, !dbg !8194
  %12 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !8195
  %d1 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %12, i32 0, i32 1, !dbg !8196
  store i64 %shl9, i64* %d1, align 8, !dbg !8197
  %13 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !8198
  %d110 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %13, i32 0, i32 1, !dbg !8198
  %14 = load i64, i64* %d110, align 8, !dbg !8198
  %call = call i64 @mpn_invert_3by2(i64 %14, i64 0), !dbg !8198
  %15 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !8199
  %di = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %15, i32 0, i32 3, !dbg !8200
  store i64 %call, i64* %di, align 8, !dbg !8201
  ret void, !dbg !8202
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpn_div_qr_1_preinv(i64* %qp, i64* %np, i64 %nn, %struct.gmp_div_inverse* %inv) #0 !dbg !8203 {
entry:
  %qp.addr = alloca i64*, align 8
  %np.addr = alloca i64*, align 8
  %nn.addr = alloca i64, align 8
  %inv.addr = alloca %struct.gmp_div_inverse*, align 8
  %d = alloca i64, align 8
  %di = alloca i64, align 8
  %r = alloca i64, align 8
  %tp = alloca i64*, align 8
  %q = alloca i64, align 8
  %_qh = alloca i64, align 8
  %_ql = alloca i64, align 8
  %_r = alloca i64, align 8
  %_mask = alloca i64, align 8
  %__x0 = alloca i64, align 8
  %__x1 = alloca i64, align 8
  %__x2 = alloca i64, align 8
  %__x3 = alloca i64, align 8
  %__ul = alloca i32, align 4
  %__vl = alloca i32, align 4
  %__uh = alloca i32, align 4
  %__vh = alloca i32, align 4
  %__u = alloca i64, align 8
  %__v = alloca i64, align 8
  %__x = alloca i64, align 8
  store i64* %qp, i64** %qp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %qp.addr, metadata !8206, metadata !DIExpression()), !dbg !8207
  store i64* %np, i64** %np.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %np.addr, metadata !8208, metadata !DIExpression()), !dbg !8209
  store i64 %nn, i64* %nn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nn.addr, metadata !8210, metadata !DIExpression()), !dbg !8211
  store %struct.gmp_div_inverse* %inv, %struct.gmp_div_inverse** %inv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gmp_div_inverse** %inv.addr, metadata !8212, metadata !DIExpression()), !dbg !8213
  call void @llvm.dbg.declare(metadata i64* %d, metadata !8214, metadata !DIExpression()), !dbg !8215
  call void @llvm.dbg.declare(metadata i64* %di, metadata !8216, metadata !DIExpression()), !dbg !8217
  call void @llvm.dbg.declare(metadata i64* %r, metadata !8218, metadata !DIExpression()), !dbg !8219
  call void @llvm.dbg.declare(metadata i64** %tp, metadata !8220, metadata !DIExpression()), !dbg !8221
  store i64* null, i64** %tp, align 8, !dbg !8221
  %0 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !8222
  %shift = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %0, i32 0, i32 0, !dbg !8224
  %1 = load i32, i32* %shift, align 8, !dbg !8224
  %cmp = icmp ugt i32 %1, 0, !dbg !8225
  br i1 %cmp, label %if.then, label %if.else, !dbg !8226

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %nn.addr, align 8, !dbg !8227
  %call = call i64* @gmp_xalloc_limbs(i64 %2), !dbg !8229
  store i64* %call, i64** %tp, align 8, !dbg !8230
  %3 = load i64*, i64** %tp, align 8, !dbg !8231
  %4 = load i64*, i64** %np.addr, align 8, !dbg !8232
  %5 = load i64, i64* %nn.addr, align 8, !dbg !8233
  %6 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !8234
  %shift1 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %6, i32 0, i32 0, !dbg !8235
  %7 = load i32, i32* %shift1, align 8, !dbg !8235
  %call2 = call i64 @mpn_lshift(i64* %3, i64* %4, i64 %5, i32 %7), !dbg !8236
  store i64 %call2, i64* %r, align 8, !dbg !8237
  %8 = load i64*, i64** %tp, align 8, !dbg !8238
  store i64* %8, i64** %np.addr, align 8, !dbg !8239
  br label %if.end, !dbg !8240

if.else:                                          ; preds = %entry
  store i64 0, i64* %r, align 8, !dbg !8241
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !8242
  %d1 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %9, i32 0, i32 1, !dbg !8243
  %10 = load i64, i64* %d1, align 8, !dbg !8243
  store i64 %10, i64* %d, align 8, !dbg !8244
  %11 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !8245
  %di3 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %11, i32 0, i32 3, !dbg !8246
  %12 = load i64, i64* %di3, align 8, !dbg !8246
  store i64 %12, i64* %di, align 8, !dbg !8247
  br label %while.cond, !dbg !8248

while.cond:                                       ; preds = %if.end59, %if.end
  %13 = load i64, i64* %nn.addr, align 8, !dbg !8249
  %dec = add nsw i64 %13, -1, !dbg !8249
  store i64 %dec, i64* %nn.addr, align 8, !dbg !8249
  %cmp4 = icmp sgt i64 %13, 0, !dbg !8250
  br i1 %cmp4, label %while.body, label %while.end, !dbg !8248

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i64* %q, metadata !8251, metadata !DIExpression()), !dbg !8253
  br label %do.body, !dbg !8254

do.body:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata i64* %_qh, metadata !8255, metadata !DIExpression()), !dbg !8257
  call void @llvm.dbg.declare(metadata i64* %_ql, metadata !8258, metadata !DIExpression()), !dbg !8257
  call void @llvm.dbg.declare(metadata i64* %_r, metadata !8259, metadata !DIExpression()), !dbg !8257
  call void @llvm.dbg.declare(metadata i64* %_mask, metadata !8260, metadata !DIExpression()), !dbg !8257
  br label %do.body5, !dbg !8257

do.body5:                                         ; preds = %do.body
  call void @llvm.dbg.declare(metadata i64* %__x0, metadata !8261, metadata !DIExpression()), !dbg !8263
  call void @llvm.dbg.declare(metadata i64* %__x1, metadata !8264, metadata !DIExpression()), !dbg !8263
  call void @llvm.dbg.declare(metadata i64* %__x2, metadata !8265, metadata !DIExpression()), !dbg !8263
  call void @llvm.dbg.declare(metadata i64* %__x3, metadata !8266, metadata !DIExpression()), !dbg !8263
  call void @llvm.dbg.declare(metadata i32* %__ul, metadata !8267, metadata !DIExpression()), !dbg !8263
  call void @llvm.dbg.declare(metadata i32* %__vl, metadata !8268, metadata !DIExpression()), !dbg !8263
  call void @llvm.dbg.declare(metadata i32* %__uh, metadata !8269, metadata !DIExpression()), !dbg !8263
  call void @llvm.dbg.declare(metadata i32* %__vh, metadata !8270, metadata !DIExpression()), !dbg !8263
  call void @llvm.dbg.declare(metadata i64* %__u, metadata !8271, metadata !DIExpression()), !dbg !8263
  %14 = load i64, i64* %r, align 8, !dbg !8263
  store i64 %14, i64* %__u, align 8, !dbg !8263
  call void @llvm.dbg.declare(metadata i64* %__v, metadata !8272, metadata !DIExpression()), !dbg !8263
  %15 = load i64, i64* %di, align 8, !dbg !8263
  store i64 %15, i64* %__v, align 8, !dbg !8263
  %16 = load i64, i64* %__u, align 8, !dbg !8263
  %and = and i64 %16, 4294967295, !dbg !8263
  %conv = trunc i64 %and to i32, !dbg !8263
  store i32 %conv, i32* %__ul, align 4, !dbg !8263
  %17 = load i64, i64* %__u, align 8, !dbg !8263
  %shr = lshr i64 %17, 32, !dbg !8263
  %conv6 = trunc i64 %shr to i32, !dbg !8263
  store i32 %conv6, i32* %__uh, align 4, !dbg !8263
  %18 = load i64, i64* %__v, align 8, !dbg !8263
  %and7 = and i64 %18, 4294967295, !dbg !8263
  %conv8 = trunc i64 %and7 to i32, !dbg !8263
  store i32 %conv8, i32* %__vl, align 4, !dbg !8263
  %19 = load i64, i64* %__v, align 8, !dbg !8263
  %shr9 = lshr i64 %19, 32, !dbg !8263
  %conv10 = trunc i64 %shr9 to i32, !dbg !8263
  store i32 %conv10, i32* %__vh, align 4, !dbg !8263
  %20 = load i32, i32* %__ul, align 4, !dbg !8263
  %conv11 = zext i32 %20 to i64, !dbg !8263
  %21 = load i32, i32* %__vl, align 4, !dbg !8263
  %conv12 = zext i32 %21 to i64, !dbg !8263
  %mul = mul i64 %conv11, %conv12, !dbg !8263
  store i64 %mul, i64* %__x0, align 8, !dbg !8263
  %22 = load i32, i32* %__ul, align 4, !dbg !8263
  %conv13 = zext i32 %22 to i64, !dbg !8263
  %23 = load i32, i32* %__vh, align 4, !dbg !8263
  %conv14 = zext i32 %23 to i64, !dbg !8263
  %mul15 = mul i64 %conv13, %conv14, !dbg !8263
  store i64 %mul15, i64* %__x1, align 8, !dbg !8263
  %24 = load i32, i32* %__uh, align 4, !dbg !8263
  %conv16 = zext i32 %24 to i64, !dbg !8263
  %25 = load i32, i32* %__vl, align 4, !dbg !8263
  %conv17 = zext i32 %25 to i64, !dbg !8263
  %mul18 = mul i64 %conv16, %conv17, !dbg !8263
  store i64 %mul18, i64* %__x2, align 8, !dbg !8263
  %26 = load i32, i32* %__uh, align 4, !dbg !8263
  %conv19 = zext i32 %26 to i64, !dbg !8263
  %27 = load i32, i32* %__vh, align 4, !dbg !8263
  %conv20 = zext i32 %27 to i64, !dbg !8263
  %mul21 = mul i64 %conv19, %conv20, !dbg !8263
  store i64 %mul21, i64* %__x3, align 8, !dbg !8263
  %28 = load i64, i64* %__x0, align 8, !dbg !8263
  %shr22 = lshr i64 %28, 32, !dbg !8263
  %29 = load i64, i64* %__x1, align 8, !dbg !8263
  %add = add i64 %29, %shr22, !dbg !8263
  store i64 %add, i64* %__x1, align 8, !dbg !8263
  %30 = load i64, i64* %__x2, align 8, !dbg !8263
  %31 = load i64, i64* %__x1, align 8, !dbg !8263
  %add23 = add i64 %31, %30, !dbg !8263
  store i64 %add23, i64* %__x1, align 8, !dbg !8263
  %32 = load i64, i64* %__x1, align 8, !dbg !8273
  %33 = load i64, i64* %__x2, align 8, !dbg !8273
  %cmp24 = icmp ult i64 %32, %33, !dbg !8273
  br i1 %cmp24, label %if.then26, label %if.end28, !dbg !8263

if.then26:                                        ; preds = %do.body5
  %34 = load i64, i64* %__x3, align 8, !dbg !8273
  %add27 = add i64 %34, 4294967296, !dbg !8273
  store i64 %add27, i64* %__x3, align 8, !dbg !8273
  br label %if.end28, !dbg !8273

if.end28:                                         ; preds = %if.then26, %do.body5
  %35 = load i64, i64* %__x3, align 8, !dbg !8263
  %36 = load i64, i64* %__x1, align 8, !dbg !8263
  %shr29 = lshr i64 %36, 32, !dbg !8263
  %add30 = add i64 %35, %shr29, !dbg !8263
  store i64 %add30, i64* %_qh, align 8, !dbg !8263
  %37 = load i64, i64* %__x1, align 8, !dbg !8263
  %shl = shl i64 %37, 32, !dbg !8263
  %38 = load i64, i64* %__x0, align 8, !dbg !8263
  %and31 = and i64 %38, 4294967295, !dbg !8263
  %add32 = add i64 %shl, %and31, !dbg !8263
  store i64 %add32, i64* %_ql, align 8, !dbg !8263
  br label %do.end, !dbg !8263

do.end:                                           ; preds = %if.end28
  br label %do.body33, !dbg !8257

do.body33:                                        ; preds = %do.end
  call void @llvm.dbg.declare(metadata i64* %__x, metadata !8275, metadata !DIExpression()), !dbg !8277
  %39 = load i64, i64* %_ql, align 8, !dbg !8277
  %40 = load i64*, i64** %np.addr, align 8, !dbg !8277
  %41 = load i64, i64* %nn.addr, align 8, !dbg !8277
  %arrayidx = getelementptr inbounds i64, i64* %40, i64 %41, !dbg !8277
  %42 = load i64, i64* %arrayidx, align 8, !dbg !8277
  %add34 = add i64 %39, %42, !dbg !8277
  store i64 %add34, i64* %__x, align 8, !dbg !8277
  %43 = load i64, i64* %_qh, align 8, !dbg !8277
  %44 = load i64, i64* %r, align 8, !dbg !8277
  %add35 = add i64 %44, 1, !dbg !8277
  %add36 = add i64 %43, %add35, !dbg !8277
  %45 = load i64, i64* %__x, align 8, !dbg !8277
  %46 = load i64, i64* %_ql, align 8, !dbg !8277
  %cmp37 = icmp ult i64 %45, %46, !dbg !8277
  %conv38 = zext i1 %cmp37 to i32, !dbg !8277
  %conv39 = sext i32 %conv38 to i64, !dbg !8277
  %add40 = add i64 %add36, %conv39, !dbg !8277
  store i64 %add40, i64* %_qh, align 8, !dbg !8277
  %47 = load i64, i64* %__x, align 8, !dbg !8277
  store i64 %47, i64* %_ql, align 8, !dbg !8277
  br label %do.end41, !dbg !8277

do.end41:                                         ; preds = %do.body33
  %48 = load i64*, i64** %np.addr, align 8, !dbg !8257
  %49 = load i64, i64* %nn.addr, align 8, !dbg !8257
  %arrayidx42 = getelementptr inbounds i64, i64* %48, i64 %49, !dbg !8257
  %50 = load i64, i64* %arrayidx42, align 8, !dbg !8257
  %51 = load i64, i64* %_qh, align 8, !dbg !8257
  %52 = load i64, i64* %d, align 8, !dbg !8257
  %mul43 = mul i64 %51, %52, !dbg !8257
  %sub = sub i64 %50, %mul43, !dbg !8257
  store i64 %sub, i64* %_r, align 8, !dbg !8257
  %53 = load i64, i64* %_r, align 8, !dbg !8257
  %54 = load i64, i64* %_ql, align 8, !dbg !8257
  %cmp44 = icmp ugt i64 %53, %54, !dbg !8257
  %conv45 = zext i1 %cmp44 to i32, !dbg !8257
  %conv46 = sext i32 %conv45 to i64, !dbg !8257
  %sub47 = sub i64 0, %conv46, !dbg !8257
  store i64 %sub47, i64* %_mask, align 8, !dbg !8257
  %55 = load i64, i64* %_mask, align 8, !dbg !8257
  %56 = load i64, i64* %_qh, align 8, !dbg !8257
  %add48 = add i64 %56, %55, !dbg !8257
  store i64 %add48, i64* %_qh, align 8, !dbg !8257
  %57 = load i64, i64* %_mask, align 8, !dbg !8257
  %58 = load i64, i64* %d, align 8, !dbg !8257
  %and49 = and i64 %57, %58, !dbg !8257
  %59 = load i64, i64* %_r, align 8, !dbg !8257
  %add50 = add i64 %59, %and49, !dbg !8257
  store i64 %add50, i64* %_r, align 8, !dbg !8257
  %60 = load i64, i64* %_r, align 8, !dbg !8278
  %61 = load i64, i64* %d, align 8, !dbg !8278
  %cmp51 = icmp uge i64 %60, %61, !dbg !8278
  br i1 %cmp51, label %if.then53, label %if.end55, !dbg !8257

if.then53:                                        ; preds = %do.end41
  %62 = load i64, i64* %d, align 8, !dbg !8280
  %63 = load i64, i64* %_r, align 8, !dbg !8280
  %sub54 = sub i64 %63, %62, !dbg !8280
  store i64 %sub54, i64* %_r, align 8, !dbg !8280
  %64 = load i64, i64* %_qh, align 8, !dbg !8280
  %inc = add i64 %64, 1, !dbg !8280
  store i64 %inc, i64* %_qh, align 8, !dbg !8280
  br label %if.end55, !dbg !8280

if.end55:                                         ; preds = %if.then53, %do.end41
  %65 = load i64, i64* %_r, align 8, !dbg !8257
  store i64 %65, i64* %r, align 8, !dbg !8257
  %66 = load i64, i64* %_qh, align 8, !dbg !8257
  store i64 %66, i64* %q, align 8, !dbg !8257
  br label %do.end56, !dbg !8257

do.end56:                                         ; preds = %if.end55
  %67 = load i64*, i64** %qp.addr, align 8, !dbg !8282
  %tobool = icmp ne i64* %67, null, !dbg !8282
  br i1 %tobool, label %if.then57, label %if.end59, !dbg !8284

if.then57:                                        ; preds = %do.end56
  %68 = load i64, i64* %q, align 8, !dbg !8285
  %69 = load i64*, i64** %qp.addr, align 8, !dbg !8286
  %70 = load i64, i64* %nn.addr, align 8, !dbg !8287
  %arrayidx58 = getelementptr inbounds i64, i64* %69, i64 %70, !dbg !8286
  store i64 %68, i64* %arrayidx58, align 8, !dbg !8288
  br label %if.end59, !dbg !8286

if.end59:                                         ; preds = %if.then57, %do.end56
  br label %while.cond, !dbg !8248, !llvm.loop !8289

while.end:                                        ; preds = %while.cond
  %71 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !8291
  %shift60 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %71, i32 0, i32 0, !dbg !8293
  %72 = load i32, i32* %shift60, align 8, !dbg !8293
  %cmp61 = icmp ugt i32 %72, 0, !dbg !8294
  br i1 %cmp61, label %if.then63, label %if.end64, !dbg !8295

if.then63:                                        ; preds = %while.end
  %73 = load void (i8*, i64)*, void (i8*, i64)** @gmp_free_func, align 8, !dbg !8296
  %74 = load i64*, i64** %tp, align 8, !dbg !8296
  %75 = bitcast i64* %74 to i8*, !dbg !8296
  call void %73(i8* %75, i64 0), !dbg !8296
  br label %if.end64, !dbg !8296

if.end64:                                         ; preds = %if.then63, %while.end
  %76 = load i64, i64* %r, align 8, !dbg !8297
  %77 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !8298
  %shift65 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %77, i32 0, i32 0, !dbg !8299
  %78 = load i32, i32* %shift65, align 8, !dbg !8299
  %sh_prom = zext i32 %78 to i64, !dbg !8300
  %shr66 = lshr i64 %76, %sh_prom, !dbg !8300
  ret i64 %shr66, !dbg !8301
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @mpz_get_str(i8* %sp, i32 %base, %struct.__mpz_struct* %u) #0 !dbg !8302 {
entry:
  %retval = alloca i8*, align 8
  %sp.addr = alloca i8*, align 8
  %base.addr = alloca i32, align 4
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %bits = alloca i32, align 4
  %digits = alloca i8*, align 8
  %un = alloca i64, align 8
  %i = alloca i64, align 8
  %sn = alloca i64, align 8
  %info = alloca %struct.mpn_base_info, align 8
  %tp = alloca i64*, align 8
  store i8* %sp, i8** %sp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %sp.addr, metadata !8306, metadata !DIExpression()), !dbg !8307
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !8308, metadata !DIExpression()), !dbg !8309
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !8310, metadata !DIExpression()), !dbg !8311
  call void @llvm.dbg.declare(metadata i32* %bits, metadata !8312, metadata !DIExpression()), !dbg !8313
  call void @llvm.dbg.declare(metadata i8** %digits, metadata !8314, metadata !DIExpression()), !dbg !8315
  call void @llvm.dbg.declare(metadata i64* %un, metadata !8316, metadata !DIExpression()), !dbg !8317
  call void @llvm.dbg.declare(metadata i64* %i, metadata !8318, metadata !DIExpression()), !dbg !8319
  call void @llvm.dbg.declare(metadata i64* %sn, metadata !8320, metadata !DIExpression()), !dbg !8321
  %0 = load i32, i32* %base.addr, align 4, !dbg !8322
  %cmp = icmp sge i32 %0, 0, !dbg !8324
  br i1 %cmp, label %if.then, label %if.else, !dbg !8325

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0), i8** %digits, align 8, !dbg !8326
  br label %if.end, !dbg !8328

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %base.addr, align 4, !dbg !8329
  %sub = sub nsw i32 0, %1, !dbg !8331
  store i32 %sub, i32* %base.addr, align 4, !dbg !8332
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0), i8** %digits, align 8, !dbg !8333
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %2 = load i32, i32* %base.addr, align 4, !dbg !8334
  %cmp1 = icmp sle i32 %2, 1, !dbg !8336
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !8337

if.then2:                                         ; preds = %if.end
  store i32 10, i32* %base.addr, align 4, !dbg !8338
  br label %if.end3, !dbg !8339

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load i32, i32* %base.addr, align 4, !dbg !8340
  %cmp4 = icmp sgt i32 %3, 36, !dbg !8342
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !8343

if.then5:                                         ; preds = %if.end3
  store i8* null, i8** %retval, align 8, !dbg !8344
  br label %return, !dbg !8344

if.end6:                                          ; preds = %if.end3
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !8345
  %5 = load i32, i32* %base.addr, align 4, !dbg !8346
  %call = call i64 @mpz_sizeinbase(%struct.__mpz_struct* %4, i32 %5), !dbg !8347
  %add = add i64 1, %call, !dbg !8348
  store i64 %add, i64* %sn, align 8, !dbg !8349
  %6 = load i8*, i8** %sp.addr, align 8, !dbg !8350
  %tobool = icmp ne i8* %6, null, !dbg !8350
  br i1 %tobool, label %if.end10, label %if.then7, !dbg !8352

if.then7:                                         ; preds = %if.end6
  %7 = load i8* (i64)*, i8* (i64)** @gmp_allocate_func, align 8, !dbg !8353
  %8 = load i64, i64* %sn, align 8, !dbg !8353
  %add8 = add i64 1, %8, !dbg !8353
  %call9 = call i8* %7(i64 %add8), !dbg !8353
  store i8* %call9, i8** %sp.addr, align 8, !dbg !8354
  br label %if.end10, !dbg !8355

if.end10:                                         ; preds = %if.then7, %if.end6
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !8356
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %9, i32 0, i32 1, !dbg !8356
  %10 = load i32, i32* %_mp_size, align 4, !dbg !8356
  %cmp11 = icmp sge i32 %10, 0, !dbg !8356
  br i1 %cmp11, label %cond.true, label %cond.false, !dbg !8356

cond.true:                                        ; preds = %if.end10
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !8356
  %_mp_size12 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %11, i32 0, i32 1, !dbg !8356
  %12 = load i32, i32* %_mp_size12, align 4, !dbg !8356
  br label %cond.end, !dbg !8356

cond.false:                                       ; preds = %if.end10
  %13 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !8356
  %_mp_size13 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %13, i32 0, i32 1, !dbg !8356
  %14 = load i32, i32* %_mp_size13, align 4, !dbg !8356
  %sub14 = sub nsw i32 0, %14, !dbg !8356
  br label %cond.end, !dbg !8356

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %12, %cond.true ], [ %sub14, %cond.false ], !dbg !8356
  %conv = sext i32 %cond to i64, !dbg !8356
  store i64 %conv, i64* %un, align 8, !dbg !8357
  %15 = load i64, i64* %un, align 8, !dbg !8358
  %cmp15 = icmp eq i64 %15, 0, !dbg !8360
  br i1 %cmp15, label %if.then17, label %if.end19, !dbg !8361

if.then17:                                        ; preds = %cond.end
  %16 = load i8*, i8** %sp.addr, align 8, !dbg !8362
  %arrayidx = getelementptr inbounds i8, i8* %16, i64 0, !dbg !8362
  store i8 48, i8* %arrayidx, align 1, !dbg !8364
  %17 = load i8*, i8** %sp.addr, align 8, !dbg !8365
  %arrayidx18 = getelementptr inbounds i8, i8* %17, i64 1, !dbg !8365
  store i8 0, i8* %arrayidx18, align 1, !dbg !8366
  %18 = load i8*, i8** %sp.addr, align 8, !dbg !8367
  store i8* %18, i8** %retval, align 8, !dbg !8368
  br label %return, !dbg !8368

if.end19:                                         ; preds = %cond.end
  store i64 0, i64* %i, align 8, !dbg !8369
  %19 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !8370
  %_mp_size20 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %19, i32 0, i32 1, !dbg !8372
  %20 = load i32, i32* %_mp_size20, align 4, !dbg !8372
  %cmp21 = icmp slt i32 %20, 0, !dbg !8373
  br i1 %cmp21, label %if.then23, label %if.end25, !dbg !8374

if.then23:                                        ; preds = %if.end19
  %21 = load i8*, i8** %sp.addr, align 8, !dbg !8375
  %22 = load i64, i64* %i, align 8, !dbg !8376
  %inc = add i64 %22, 1, !dbg !8376
  store i64 %inc, i64* %i, align 8, !dbg !8376
  %arrayidx24 = getelementptr inbounds i8, i8* %21, i64 %22, !dbg !8375
  store i8 45, i8* %arrayidx24, align 1, !dbg !8377
  br label %if.end25, !dbg !8375

if.end25:                                         ; preds = %if.then23, %if.end19
  %23 = load i32, i32* %base.addr, align 4, !dbg !8378
  %call26 = call i32 @mpn_base_power_of_two_p(i32 %23), !dbg !8379
  store i32 %call26, i32* %bits, align 4, !dbg !8380
  %24 = load i32, i32* %bits, align 4, !dbg !8381
  %tobool27 = icmp ne i32 %24, 0, !dbg !8381
  br i1 %tobool27, label %if.then28, label %if.else31, !dbg !8383

if.then28:                                        ; preds = %if.end25
  %25 = load i64, i64* %i, align 8, !dbg !8384
  %26 = load i8*, i8** %sp.addr, align 8, !dbg !8385
  %27 = load i64, i64* %i, align 8, !dbg !8386
  %add.ptr = getelementptr inbounds i8, i8* %26, i64 %27, !dbg !8387
  %28 = load i32, i32* %bits, align 4, !dbg !8388
  %29 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !8389
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %29, i32 0, i32 2, !dbg !8390
  %30 = load i64*, i64** %_mp_d, align 8, !dbg !8390
  %31 = load i64, i64* %un, align 8, !dbg !8391
  %call29 = call i64 @mpn_get_str_bits(i8* %add.ptr, i32 %28, i64* %30, i64 %31), !dbg !8392
  %add30 = add i64 %25, %call29, !dbg !8393
  store i64 %add30, i64* %sn, align 8, !dbg !8394
  br label %if.end38, !dbg !8395

if.else31:                                        ; preds = %if.end25
  call void @llvm.dbg.declare(metadata %struct.mpn_base_info* %info, metadata !8396, metadata !DIExpression()), !dbg !8398
  call void @llvm.dbg.declare(metadata i64** %tp, metadata !8399, metadata !DIExpression()), !dbg !8400
  %32 = load i32, i32* %base.addr, align 4, !dbg !8401
  %conv32 = sext i32 %32 to i64, !dbg !8401
  call void @mpn_get_base_info(%struct.mpn_base_info* %info, i64 %conv32), !dbg !8402
  %33 = load i64, i64* %un, align 8, !dbg !8403
  %call33 = call i64* @gmp_xalloc_limbs(i64 %33), !dbg !8404
  store i64* %call33, i64** %tp, align 8, !dbg !8405
  %34 = load i64*, i64** %tp, align 8, !dbg !8406
  %35 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !8407
  %_mp_d34 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %35, i32 0, i32 2, !dbg !8408
  %36 = load i64*, i64** %_mp_d34, align 8, !dbg !8408
  %37 = load i64, i64* %un, align 8, !dbg !8409
  call void @mpn_copyi(i64* %34, i64* %36, i64 %37), !dbg !8410
  %38 = load i64, i64* %i, align 8, !dbg !8411
  %39 = load i8*, i8** %sp.addr, align 8, !dbg !8412
  %40 = load i64, i64* %i, align 8, !dbg !8413
  %add.ptr35 = getelementptr inbounds i8, i8* %39, i64 %40, !dbg !8414
  %41 = load i32, i32* %base.addr, align 4, !dbg !8415
  %42 = load i64*, i64** %tp, align 8, !dbg !8416
  %43 = load i64, i64* %un, align 8, !dbg !8417
  %call36 = call i64 @mpn_get_str_other(i8* %add.ptr35, i32 %41, %struct.mpn_base_info* %info, i64* %42, i64 %43), !dbg !8418
  %add37 = add i64 %38, %call36, !dbg !8419
  store i64 %add37, i64* %sn, align 8, !dbg !8420
  %44 = load void (i8*, i64)*, void (i8*, i64)** @gmp_free_func, align 8, !dbg !8421
  %45 = load i64*, i64** %tp, align 8, !dbg !8421
  %46 = bitcast i64* %45 to i8*, !dbg !8421
  call void %44(i8* %46, i64 0), !dbg !8421
  br label %if.end38

if.end38:                                         ; preds = %if.else31, %if.then28
  br label %for.cond, !dbg !8422

for.cond:                                         ; preds = %for.inc, %if.end38
  %47 = load i64, i64* %i, align 8, !dbg !8423
  %48 = load i64, i64* %sn, align 8, !dbg !8426
  %cmp39 = icmp ult i64 %47, %48, !dbg !8427
  br i1 %cmp39, label %for.body, label %for.end, !dbg !8428

for.body:                                         ; preds = %for.cond
  %49 = load i8*, i8** %digits, align 8, !dbg !8429
  %50 = load i8*, i8** %sp.addr, align 8, !dbg !8430
  %51 = load i64, i64* %i, align 8, !dbg !8431
  %arrayidx41 = getelementptr inbounds i8, i8* %50, i64 %51, !dbg !8430
  %52 = load i8, i8* %arrayidx41, align 1, !dbg !8430
  %idxprom = zext i8 %52 to i64, !dbg !8429
  %arrayidx42 = getelementptr inbounds i8, i8* %49, i64 %idxprom, !dbg !8429
  %53 = load i8, i8* %arrayidx42, align 1, !dbg !8429
  %54 = load i8*, i8** %sp.addr, align 8, !dbg !8432
  %55 = load i64, i64* %i, align 8, !dbg !8433
  %arrayidx43 = getelementptr inbounds i8, i8* %54, i64 %55, !dbg !8432
  store i8 %53, i8* %arrayidx43, align 1, !dbg !8434
  br label %for.inc, !dbg !8432

for.inc:                                          ; preds = %for.body
  %56 = load i64, i64* %i, align 8, !dbg !8435
  %inc44 = add i64 %56, 1, !dbg !8435
  store i64 %inc44, i64* %i, align 8, !dbg !8435
  br label %for.cond, !dbg !8436, !llvm.loop !8437

for.end:                                          ; preds = %for.cond
  %57 = load i8*, i8** %sp.addr, align 8, !dbg !8439
  %58 = load i64, i64* %sn, align 8, !dbg !8440
  %arrayidx45 = getelementptr inbounds i8, i8* %57, i64 %58, !dbg !8439
  store i8 0, i8* %arrayidx45, align 1, !dbg !8441
  %59 = load i8*, i8** %sp.addr, align 8, !dbg !8442
  store i8* %59, i8** %retval, align 8, !dbg !8443
  br label %return, !dbg !8443

return:                                           ; preds = %for.end, %if.then17, %if.then5
  %60 = load i8*, i8** %retval, align 8, !dbg !8444
  ret i8* %60, !dbg !8444
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_set_str(%struct.__mpz_struct* %r, i8* %sp, i32 %base) #0 !dbg !8445 {
entry:
  %retval = alloca i32, align 4
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %sp.addr = alloca i8*, align 8
  %base.addr = alloca i32, align 4
  %bits = alloca i32, align 4
  %rn = alloca i64, align 8
  %alloc = alloca i64, align 8
  %rp = alloca i64*, align 8
  %sn = alloca i64, align 8
  %sign = alloca i32, align 4
  %dp = alloca i8*, align 8
  %digit = alloca i32, align 4
  %info = alloca %struct.mpn_base_info, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !8448, metadata !DIExpression()), !dbg !8449
  store i8* %sp, i8** %sp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %sp.addr, metadata !8450, metadata !DIExpression()), !dbg !8451
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !8452, metadata !DIExpression()), !dbg !8453
  call void @llvm.dbg.declare(metadata i32* %bits, metadata !8454, metadata !DIExpression()), !dbg !8455
  call void @llvm.dbg.declare(metadata i64* %rn, metadata !8456, metadata !DIExpression()), !dbg !8457
  call void @llvm.dbg.declare(metadata i64* %alloc, metadata !8458, metadata !DIExpression()), !dbg !8459
  call void @llvm.dbg.declare(metadata i64** %rp, metadata !8460, metadata !DIExpression()), !dbg !8461
  call void @llvm.dbg.declare(metadata i64* %sn, metadata !8462, metadata !DIExpression()), !dbg !8463
  call void @llvm.dbg.declare(metadata i32* %sign, metadata !8464, metadata !DIExpression()), !dbg !8465
  call void @llvm.dbg.declare(metadata i8** %dp, metadata !8466, metadata !DIExpression()), !dbg !8467
  br label %while.cond, !dbg !8468

while.cond:                                       ; preds = %while.body, %entry
  %call = call i16** @__ctype_b_loc() #9, !dbg !8469
  %0 = load i16*, i16** %call, align 8, !dbg !8469
  %1 = load i8*, i8** %sp.addr, align 8, !dbg !8469
  %2 = load i8, i8* %1, align 1, !dbg !8469
  %conv = zext i8 %2 to i32, !dbg !8469
  %idxprom = sext i32 %conv to i64, !dbg !8469
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom, !dbg !8469
  %3 = load i16, i16* %arrayidx, align 2, !dbg !8469
  %conv1 = zext i16 %3 to i32, !dbg !8469
  %and = and i32 %conv1, 8192, !dbg !8469
  %tobool = icmp ne i32 %and, 0, !dbg !8468
  br i1 %tobool, label %while.body, label %while.end, !dbg !8468

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %sp.addr, align 8, !dbg !8470
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1, !dbg !8470
  store i8* %incdec.ptr, i8** %sp.addr, align 8, !dbg !8470
  br label %while.cond, !dbg !8468, !llvm.loop !8471

while.end:                                        ; preds = %while.cond
  %5 = load i8*, i8** %sp.addr, align 8, !dbg !8472
  %6 = load i8, i8* %5, align 1, !dbg !8473
  %conv2 = sext i8 %6 to i32, !dbg !8473
  %cmp = icmp eq i32 %conv2, 45, !dbg !8474
  %conv3 = zext i1 %cmp to i32, !dbg !8474
  store i32 %conv3, i32* %sign, align 4, !dbg !8475
  %7 = load i32, i32* %sign, align 4, !dbg !8476
  %8 = load i8*, i8** %sp.addr, align 8, !dbg !8477
  %idx.ext = sext i32 %7 to i64, !dbg !8477
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %idx.ext, !dbg !8477
  store i8* %add.ptr, i8** %sp.addr, align 8, !dbg !8477
  %9 = load i32, i32* %base.addr, align 4, !dbg !8478
  %cmp4 = icmp eq i32 %9, 0, !dbg !8480
  br i1 %cmp4, label %if.then, label %if.end32, !dbg !8481

if.then:                                          ; preds = %while.end
  %10 = load i8*, i8** %sp.addr, align 8, !dbg !8482
  %11 = load i8, i8* %10, align 1, !dbg !8485
  %conv6 = sext i8 %11 to i32, !dbg !8485
  %cmp7 = icmp eq i32 %conv6, 48, !dbg !8486
  br i1 %cmp7, label %if.then9, label %if.else30, !dbg !8487

if.then9:                                         ; preds = %if.then
  %12 = load i8*, i8** %sp.addr, align 8, !dbg !8488
  %incdec.ptr10 = getelementptr inbounds i8, i8* %12, i32 1, !dbg !8488
  store i8* %incdec.ptr10, i8** %sp.addr, align 8, !dbg !8488
  %13 = load i8*, i8** %sp.addr, align 8, !dbg !8490
  %14 = load i8, i8* %13, align 1, !dbg !8492
  %conv11 = sext i8 %14 to i32, !dbg !8492
  %cmp12 = icmp eq i32 %conv11, 120, !dbg !8493
  br i1 %cmp12, label %if.then17, label %lor.lhs.false, !dbg !8494

lor.lhs.false:                                    ; preds = %if.then9
  %15 = load i8*, i8** %sp.addr, align 8, !dbg !8495
  %16 = load i8, i8* %15, align 1, !dbg !8496
  %conv14 = sext i8 %16 to i32, !dbg !8496
  %cmp15 = icmp eq i32 %conv14, 88, !dbg !8497
  br i1 %cmp15, label %if.then17, label %if.else, !dbg !8498

if.then17:                                        ; preds = %lor.lhs.false, %if.then9
  store i32 16, i32* %base.addr, align 4, !dbg !8499
  %17 = load i8*, i8** %sp.addr, align 8, !dbg !8501
  %incdec.ptr18 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !8501
  store i8* %incdec.ptr18, i8** %sp.addr, align 8, !dbg !8501
  br label %if.end29, !dbg !8502

if.else:                                          ; preds = %lor.lhs.false
  %18 = load i8*, i8** %sp.addr, align 8, !dbg !8503
  %19 = load i8, i8* %18, align 1, !dbg !8505
  %conv19 = sext i8 %19 to i32, !dbg !8505
  %cmp20 = icmp eq i32 %conv19, 98, !dbg !8506
  br i1 %cmp20, label %if.then26, label %lor.lhs.false22, !dbg !8507

lor.lhs.false22:                                  ; preds = %if.else
  %20 = load i8*, i8** %sp.addr, align 8, !dbg !8508
  %21 = load i8, i8* %20, align 1, !dbg !8509
  %conv23 = sext i8 %21 to i32, !dbg !8509
  %cmp24 = icmp eq i32 %conv23, 66, !dbg !8510
  br i1 %cmp24, label %if.then26, label %if.else28, !dbg !8511

if.then26:                                        ; preds = %lor.lhs.false22, %if.else
  store i32 2, i32* %base.addr, align 4, !dbg !8512
  %22 = load i8*, i8** %sp.addr, align 8, !dbg !8514
  %incdec.ptr27 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !8514
  store i8* %incdec.ptr27, i8** %sp.addr, align 8, !dbg !8514
  br label %if.end, !dbg !8515

if.else28:                                        ; preds = %lor.lhs.false22
  store i32 8, i32* %base.addr, align 4, !dbg !8516
  br label %if.end

if.end:                                           ; preds = %if.else28, %if.then26
  br label %if.end29

if.end29:                                         ; preds = %if.end, %if.then17
  br label %if.end31, !dbg !8517

if.else30:                                        ; preds = %if.then
  store i32 10, i32* %base.addr, align 4, !dbg !8518
  br label %if.end31

if.end31:                                         ; preds = %if.else30, %if.end29
  br label %if.end32, !dbg !8519

if.end32:                                         ; preds = %if.end31, %while.end
  %23 = load i8*, i8** %sp.addr, align 8, !dbg !8520
  %call33 = call i64 @strlen(i8* %23) #10, !dbg !8521
  store i64 %call33, i64* %sn, align 8, !dbg !8522
  %24 = load i8* (i64)*, i8* (i64)** @gmp_allocate_func, align 8, !dbg !8523
  %25 = load i64, i64* %sn, align 8, !dbg !8523
  %26 = load i64, i64* %sn, align 8, !dbg !8523
  %cmp34 = icmp eq i64 %26, 0, !dbg !8523
  %conv35 = zext i1 %cmp34 to i32, !dbg !8523
  %conv36 = sext i32 %conv35 to i64, !dbg !8523
  %add = add i64 %25, %conv36, !dbg !8523
  %call37 = call i8* %24(i64 %add), !dbg !8523
  store i8* %call37, i8** %dp, align 8, !dbg !8524
  store i64 0, i64* %sn, align 8, !dbg !8525
  br label %for.cond, !dbg !8527

for.cond:                                         ; preds = %for.inc, %if.end32
  %27 = load i8*, i8** %sp.addr, align 8, !dbg !8528
  %28 = load i8, i8* %27, align 1, !dbg !8530
  %tobool38 = icmp ne i8 %28, 0, !dbg !8531
  br i1 %tobool38, label %for.body, label %for.end, !dbg !8531

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %digit, metadata !8532, metadata !DIExpression()), !dbg !8534
  %call39 = call i16** @__ctype_b_loc() #9, !dbg !8535
  %29 = load i16*, i16** %call39, align 8, !dbg !8535
  %30 = load i8*, i8** %sp.addr, align 8, !dbg !8535
  %31 = load i8, i8* %30, align 1, !dbg !8535
  %conv40 = zext i8 %31 to i32, !dbg !8535
  %idxprom41 = sext i32 %conv40 to i64, !dbg !8535
  %arrayidx42 = getelementptr inbounds i16, i16* %29, i64 %idxprom41, !dbg !8535
  %32 = load i16, i16* %arrayidx42, align 2, !dbg !8535
  %conv43 = zext i16 %32 to i32, !dbg !8535
  %and44 = and i32 %conv43, 8192, !dbg !8535
  %tobool45 = icmp ne i32 %and44, 0, !dbg !8535
  br i1 %tobool45, label %if.then46, label %if.end47, !dbg !8537

if.then46:                                        ; preds = %for.body
  br label %for.inc, !dbg !8538

if.end47:                                         ; preds = %for.body
  %33 = load i8*, i8** %sp.addr, align 8, !dbg !8539
  %34 = load i8, i8* %33, align 1, !dbg !8541
  %conv48 = sext i8 %34 to i32, !dbg !8541
  %cmp49 = icmp sge i32 %conv48, 48, !dbg !8542
  br i1 %cmp49, label %land.lhs.true, label %if.else56, !dbg !8543

land.lhs.true:                                    ; preds = %if.end47
  %35 = load i8*, i8** %sp.addr, align 8, !dbg !8544
  %36 = load i8, i8* %35, align 1, !dbg !8545
  %conv51 = sext i8 %36 to i32, !dbg !8545
  %cmp52 = icmp sle i32 %conv51, 57, !dbg !8546
  br i1 %cmp52, label %if.then54, label %if.else56, !dbg !8547

if.then54:                                        ; preds = %land.lhs.true
  %37 = load i8*, i8** %sp.addr, align 8, !dbg !8548
  %38 = load i8, i8* %37, align 1, !dbg !8549
  %conv55 = sext i8 %38 to i32, !dbg !8549
  %sub = sub nsw i32 %conv55, 48, !dbg !8550
  store i32 %sub, i32* %digit, align 4, !dbg !8551
  br label %if.end83, !dbg !8552

if.else56:                                        ; preds = %land.lhs.true, %if.end47
  %39 = load i8*, i8** %sp.addr, align 8, !dbg !8553
  %40 = load i8, i8* %39, align 1, !dbg !8555
  %conv57 = sext i8 %40 to i32, !dbg !8555
  %cmp58 = icmp sge i32 %conv57, 97, !dbg !8556
  br i1 %cmp58, label %land.lhs.true60, label %if.else68, !dbg !8557

land.lhs.true60:                                  ; preds = %if.else56
  %41 = load i8*, i8** %sp.addr, align 8, !dbg !8558
  %42 = load i8, i8* %41, align 1, !dbg !8559
  %conv61 = sext i8 %42 to i32, !dbg !8559
  %cmp62 = icmp sle i32 %conv61, 122, !dbg !8560
  br i1 %cmp62, label %if.then64, label %if.else68, !dbg !8561

if.then64:                                        ; preds = %land.lhs.true60
  %43 = load i8*, i8** %sp.addr, align 8, !dbg !8562
  %44 = load i8, i8* %43, align 1, !dbg !8563
  %conv65 = sext i8 %44 to i32, !dbg !8563
  %sub66 = sub nsw i32 %conv65, 97, !dbg !8564
  %add67 = add nsw i32 %sub66, 10, !dbg !8565
  store i32 %add67, i32* %digit, align 4, !dbg !8566
  br label %if.end82, !dbg !8567

if.else68:                                        ; preds = %land.lhs.true60, %if.else56
  %45 = load i8*, i8** %sp.addr, align 8, !dbg !8568
  %46 = load i8, i8* %45, align 1, !dbg !8570
  %conv69 = sext i8 %46 to i32, !dbg !8570
  %cmp70 = icmp sge i32 %conv69, 65, !dbg !8571
  br i1 %cmp70, label %land.lhs.true72, label %if.else80, !dbg !8572

land.lhs.true72:                                  ; preds = %if.else68
  %47 = load i8*, i8** %sp.addr, align 8, !dbg !8573
  %48 = load i8, i8* %47, align 1, !dbg !8574
  %conv73 = sext i8 %48 to i32, !dbg !8574
  %cmp74 = icmp sle i32 %conv73, 90, !dbg !8575
  br i1 %cmp74, label %if.then76, label %if.else80, !dbg !8576

if.then76:                                        ; preds = %land.lhs.true72
  %49 = load i8*, i8** %sp.addr, align 8, !dbg !8577
  %50 = load i8, i8* %49, align 1, !dbg !8578
  %conv77 = sext i8 %50 to i32, !dbg !8578
  %sub78 = sub nsw i32 %conv77, 65, !dbg !8579
  %add79 = add nsw i32 %sub78, 10, !dbg !8580
  store i32 %add79, i32* %digit, align 4, !dbg !8581
  br label %if.end81, !dbg !8582

if.else80:                                        ; preds = %land.lhs.true72, %if.else68
  %51 = load i32, i32* %base.addr, align 4, !dbg !8583
  store i32 %51, i32* %digit, align 4, !dbg !8584
  br label %if.end81

if.end81:                                         ; preds = %if.else80, %if.then76
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.then64
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.then54
  %52 = load i32, i32* %digit, align 4, !dbg !8585
  %53 = load i32, i32* %base.addr, align 4, !dbg !8587
  %cmp84 = icmp uge i32 %52, %53, !dbg !8588
  br i1 %cmp84, label %if.then86, label %if.end87, !dbg !8589

if.then86:                                        ; preds = %if.end83
  %54 = load void (i8*, i64)*, void (i8*, i64)** @gmp_free_func, align 8, !dbg !8590
  %55 = load i8*, i8** %dp, align 8, !dbg !8590
  call void %54(i8* %55, i64 0), !dbg !8590
  %56 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !8592
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %56, i32 0, i32 1, !dbg !8593
  store i32 0, i32* %_mp_size, align 4, !dbg !8594
  store i32 -1, i32* %retval, align 4, !dbg !8595
  br label %return, !dbg !8595

if.end87:                                         ; preds = %if.end83
  %57 = load i32, i32* %digit, align 4, !dbg !8596
  %conv88 = trunc i32 %57 to i8, !dbg !8596
  %58 = load i8*, i8** %dp, align 8, !dbg !8597
  %59 = load i64, i64* %sn, align 8, !dbg !8598
  %inc = add i64 %59, 1, !dbg !8598
  store i64 %inc, i64* %sn, align 8, !dbg !8598
  %arrayidx89 = getelementptr inbounds i8, i8* %58, i64 %59, !dbg !8597
  store i8 %conv88, i8* %arrayidx89, align 1, !dbg !8599
  br label %for.inc, !dbg !8600

for.inc:                                          ; preds = %if.end87, %if.then46
  %60 = load i8*, i8** %sp.addr, align 8, !dbg !8601
  %incdec.ptr90 = getelementptr inbounds i8, i8* %60, i32 1, !dbg !8601
  store i8* %incdec.ptr90, i8** %sp.addr, align 8, !dbg !8601
  br label %for.cond, !dbg !8602, !llvm.loop !8603

for.end:                                          ; preds = %for.cond
  %61 = load i32, i32* %base.addr, align 4, !dbg !8605
  %call91 = call i32 @mpn_base_power_of_two_p(i32 %61), !dbg !8606
  store i32 %call91, i32* %bits, align 4, !dbg !8607
  %62 = load i32, i32* %bits, align 4, !dbg !8608
  %cmp92 = icmp ugt i32 %62, 0, !dbg !8610
  br i1 %cmp92, label %if.then94, label %if.else103, !dbg !8611

if.then94:                                        ; preds = %for.end
  %63 = load i64, i64* %sn, align 8, !dbg !8612
  %64 = load i32, i32* %bits, align 4, !dbg !8614
  %conv95 = zext i32 %64 to i64, !dbg !8614
  %mul = mul i64 %63, %conv95, !dbg !8615
  %add96 = add i64 %mul, 64, !dbg !8616
  %sub97 = sub i64 %add96, 1, !dbg !8617
  %div = udiv i64 %sub97, 64, !dbg !8618
  store i64 %div, i64* %alloc, align 8, !dbg !8619
  %65 = load i64, i64* %alloc, align 8, !dbg !8620
  %66 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !8620
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %66, i32 0, i32 0, !dbg !8620
  %67 = load i32, i32* %_mp_alloc, align 8, !dbg !8620
  %conv98 = sext i32 %67 to i64, !dbg !8620
  %cmp99 = icmp sgt i64 %65, %conv98, !dbg !8620
  br i1 %cmp99, label %cond.true, label %cond.false, !dbg !8620

cond.true:                                        ; preds = %if.then94
  %68 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !8620
  %69 = load i64, i64* %alloc, align 8, !dbg !8620
  %call101 = call i8* @mpz_realloc(%struct.__mpz_struct* %68, i64 %69), !dbg !8620
  br label %cond.end, !dbg !8620

cond.false:                                       ; preds = %if.then94
  %70 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !8620
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %70, i32 0, i32 2, !dbg !8620
  %71 = load i64*, i64** %_mp_d, align 8, !dbg !8620
  %72 = bitcast i64* %71 to i8*, !dbg !8620
  br label %cond.end, !dbg !8620

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call101, %cond.true ], [ %72, %cond.false ], !dbg !8620
  %73 = bitcast i8* %cond to i64*, !dbg !8620
  store i64* %73, i64** %rp, align 8, !dbg !8621
  %74 = load i64*, i64** %rp, align 8, !dbg !8622
  %75 = load i8*, i8** %dp, align 8, !dbg !8623
  %76 = load i64, i64* %sn, align 8, !dbg !8624
  %77 = load i32, i32* %bits, align 4, !dbg !8625
  %call102 = call i64 @mpn_set_str_bits(i64* %74, i8* %75, i64 %76, i32 %77), !dbg !8626
  store i64 %call102, i64* %rn, align 8, !dbg !8627
  br label %if.end123, !dbg !8628

if.else103:                                       ; preds = %for.end
  call void @llvm.dbg.declare(metadata %struct.mpn_base_info* %info, metadata !8629, metadata !DIExpression()), !dbg !8631
  %78 = load i32, i32* %base.addr, align 4, !dbg !8632
  %conv104 = sext i32 %78 to i64, !dbg !8632
  call void @mpn_get_base_info(%struct.mpn_base_info* %info, i64 %conv104), !dbg !8633
  %79 = load i64, i64* %sn, align 8, !dbg !8634
  %exp = getelementptr inbounds %struct.mpn_base_info, %struct.mpn_base_info* %info, i32 0, i32 0, !dbg !8635
  %80 = load i32, i32* %exp, align 8, !dbg !8635
  %conv105 = zext i32 %80 to i64, !dbg !8636
  %add106 = add i64 %79, %conv105, !dbg !8637
  %sub107 = sub i64 %add106, 1, !dbg !8638
  %exp108 = getelementptr inbounds %struct.mpn_base_info, %struct.mpn_base_info* %info, i32 0, i32 0, !dbg !8639
  %81 = load i32, i32* %exp108, align 8, !dbg !8639
  %conv109 = zext i32 %81 to i64, !dbg !8640
  %div110 = udiv i64 %sub107, %conv109, !dbg !8641
  store i64 %div110, i64* %alloc, align 8, !dbg !8642
  %82 = load i64, i64* %alloc, align 8, !dbg !8643
  %83 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !8643
  %_mp_alloc111 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %83, i32 0, i32 0, !dbg !8643
  %84 = load i32, i32* %_mp_alloc111, align 8, !dbg !8643
  %conv112 = sext i32 %84 to i64, !dbg !8643
  %cmp113 = icmp sgt i64 %82, %conv112, !dbg !8643
  br i1 %cmp113, label %cond.true115, label %cond.false117, !dbg !8643

cond.true115:                                     ; preds = %if.else103
  %85 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !8643
  %86 = load i64, i64* %alloc, align 8, !dbg !8643
  %call116 = call i8* @mpz_realloc(%struct.__mpz_struct* %85, i64 %86), !dbg !8643
  br label %cond.end119, !dbg !8643

cond.false117:                                    ; preds = %if.else103
  %87 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !8643
  %_mp_d118 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %87, i32 0, i32 2, !dbg !8643
  %88 = load i64*, i64** %_mp_d118, align 8, !dbg !8643
  %89 = bitcast i64* %88 to i8*, !dbg !8643
  br label %cond.end119, !dbg !8643

cond.end119:                                      ; preds = %cond.false117, %cond.true115
  %cond120 = phi i8* [ %call116, %cond.true115 ], [ %89, %cond.false117 ], !dbg !8643
  %90 = bitcast i8* %cond120 to i64*, !dbg !8643
  store i64* %90, i64** %rp, align 8, !dbg !8644
  %91 = load i64*, i64** %rp, align 8, !dbg !8645
  %92 = load i8*, i8** %dp, align 8, !dbg !8646
  %93 = load i64, i64* %sn, align 8, !dbg !8647
  %94 = load i32, i32* %base.addr, align 4, !dbg !8648
  %conv121 = sext i32 %94 to i64, !dbg !8648
  %call122 = call i64 @mpn_set_str_other(i64* %91, i8* %92, i64 %93, i64 %conv121, %struct.mpn_base_info* %info), !dbg !8649
  store i64 %call122, i64* %rn, align 8, !dbg !8650
  br label %if.end123

if.end123:                                        ; preds = %cond.end119, %cond.end
  %95 = load void (i8*, i64)*, void (i8*, i64)** @gmp_free_func, align 8, !dbg !8651
  %96 = load i8*, i8** %dp, align 8, !dbg !8651
  call void %95(i8* %96, i64 0), !dbg !8651
  %97 = load i32, i32* %sign, align 4, !dbg !8652
  %tobool124 = icmp ne i32 %97, 0, !dbg !8652
  br i1 %tobool124, label %cond.true125, label %cond.false127, !dbg !8652

cond.true125:                                     ; preds = %if.end123
  %98 = load i64, i64* %rn, align 8, !dbg !8653
  %sub126 = sub nsw i64 0, %98, !dbg !8654
  br label %cond.end128, !dbg !8652

cond.false127:                                    ; preds = %if.end123
  %99 = load i64, i64* %rn, align 8, !dbg !8655
  br label %cond.end128, !dbg !8652

cond.end128:                                      ; preds = %cond.false127, %cond.true125
  %cond129 = phi i64 [ %sub126, %cond.true125 ], [ %99, %cond.false127 ], !dbg !8652
  %conv130 = trunc i64 %cond129 to i32, !dbg !8652
  %100 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !8656
  %_mp_size131 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %100, i32 0, i32 1, !dbg !8657
  store i32 %conv130, i32* %_mp_size131, align 4, !dbg !8658
  store i32 0, i32* %retval, align 4, !dbg !8659
  br label %return, !dbg !8659

return:                                           ; preds = %cond.end128, %if.then86
  %101 = load i32, i32* %retval, align 4, !dbg !8660
  ret i32 %101, !dbg !8660
}

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #2

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mpz_init_set_str(%struct.__mpz_struct* %r, i8* %sp, i32 %base) #0 !dbg !8661 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %sp.addr = alloca i8*, align 8
  %base.addr = alloca i32, align 4
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !8662, metadata !DIExpression()), !dbg !8663
  store i8* %sp, i8** %sp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %sp.addr, metadata !8664, metadata !DIExpression()), !dbg !8665
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !8666, metadata !DIExpression()), !dbg !8667
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !8668
  call void @mpz_init(%struct.__mpz_struct* %0), !dbg !8669
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !8670
  %2 = load i8*, i8** %sp.addr, align 8, !dbg !8671
  %3 = load i32, i32* %base.addr, align 4, !dbg !8672
  %call = call i32 @mpz_set_str(%struct.__mpz_struct* %1, i8* %2, i32 %3), !dbg !8673
  ret i32 %call, !dbg !8674
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mpz_out_str(%struct._IO_FILE* %stream, i32 %base, %struct.__mpz_struct* %x) #0 !dbg !8675 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %base.addr = alloca i32, align 4
  %x.addr = alloca %struct.__mpz_struct*, align 8
  %str = alloca i8*, align 8
  %len = alloca i64, align 8
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !8730, metadata !DIExpression()), !dbg !8731
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !8732, metadata !DIExpression()), !dbg !8733
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %x.addr, metadata !8734, metadata !DIExpression()), !dbg !8735
  call void @llvm.dbg.declare(metadata i8** %str, metadata !8736, metadata !DIExpression()), !dbg !8737
  call void @llvm.dbg.declare(metadata i64* %len, metadata !8738, metadata !DIExpression()), !dbg !8739
  %0 = load i32, i32* %base.addr, align 4, !dbg !8740
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !8741
  %call = call i8* @mpz_get_str(i8* null, i32 %0, %struct.__mpz_struct* %1), !dbg !8742
  store i8* %call, i8** %str, align 8, !dbg !8743
  %2 = load i8*, i8** %str, align 8, !dbg !8744
  %call1 = call i64 @strlen(i8* %2) #10, !dbg !8745
  store i64 %call1, i64* %len, align 8, !dbg !8746
  %3 = load i8*, i8** %str, align 8, !dbg !8747
  %4 = load i64, i64* %len, align 8, !dbg !8748
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !8749
  %call2 = call i64 @fwrite(i8* %3, i64 1, i64 %4, %struct._IO_FILE* %5), !dbg !8750
  store i64 %call2, i64* %len, align 8, !dbg !8751
  %6 = load void (i8*, i64)*, void (i8*, i64)** @gmp_free_func, align 8, !dbg !8752
  %7 = load i8*, i8** %str, align 8, !dbg !8752
  call void %6(i8* %7, i64 0), !dbg !8752
  %8 = load i64, i64* %len, align 8, !dbg !8753
  ret i64 %8, !dbg !8754
}

declare dso_local i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #4

; Function Attrs: noinline nounwind uwtable
define dso_local void @mpz_import(%struct.__mpz_struct* %r, i64 %count, i32 %order, i64 %size, i32 %endian, i64 %nails, i8* %src) #0 !dbg !8755 {
entry:
  %r.addr = alloca %struct.__mpz_struct*, align 8
  %count.addr = alloca i64, align 8
  %order.addr = alloca i32, align 4
  %size.addr = alloca i64, align 8
  %endian.addr = alloca i32, align 4
  %nails.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %p = alloca i8*, align 8
  %word_step = alloca i64, align 8
  %rp = alloca i64*, align 8
  %rn = alloca i64, align 8
  %limb = alloca i64, align 8
  %bytes = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  store %struct.__mpz_struct* %r, %struct.__mpz_struct** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %r.addr, metadata !8760, metadata !DIExpression()), !dbg !8761
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !8762, metadata !DIExpression()), !dbg !8763
  store i32 %order, i32* %order.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %order.addr, metadata !8764, metadata !DIExpression()), !dbg !8765
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !8766, metadata !DIExpression()), !dbg !8767
  store i32 %endian, i32* %endian.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %endian.addr, metadata !8768, metadata !DIExpression()), !dbg !8769
  store i64 %nails, i64* %nails.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nails.addr, metadata !8770, metadata !DIExpression()), !dbg !8771
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !8772, metadata !DIExpression()), !dbg !8773
  call void @llvm.dbg.declare(metadata i8** %p, metadata !8774, metadata !DIExpression()), !dbg !8775
  call void @llvm.dbg.declare(metadata i64* %word_step, metadata !8776, metadata !DIExpression()), !dbg !8777
  call void @llvm.dbg.declare(metadata i64** %rp, metadata !8778, metadata !DIExpression()), !dbg !8779
  call void @llvm.dbg.declare(metadata i64* %rn, metadata !8780, metadata !DIExpression()), !dbg !8781
  call void @llvm.dbg.declare(metadata i64* %limb, metadata !8782, metadata !DIExpression()), !dbg !8783
  call void @llvm.dbg.declare(metadata i64* %bytes, metadata !8784, metadata !DIExpression()), !dbg !8785
  call void @llvm.dbg.declare(metadata i64* %i, metadata !8786, metadata !DIExpression()), !dbg !8787
  %0 = load i64, i64* %nails.addr, align 8, !dbg !8788
  %cmp = icmp ne i64 %0, 0, !dbg !8790
  br i1 %cmp, label %if.then, label %if.end, !dbg !8791

if.then:                                          ; preds = %entry
  call void @gmp_die(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0)), !dbg !8792
  br label %if.end, !dbg !8792

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %endian.addr, align 4, !dbg !8793
  %cmp1 = icmp eq i32 %1, 0, !dbg !8795
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !8796

if.then2:                                         ; preds = %if.end
  %call = call i32 @gmp_detect_endian(), !dbg !8797
  store i32 %call, i32* %endian.addr, align 4, !dbg !8798
  br label %if.end3, !dbg !8799

if.end3:                                          ; preds = %if.then2, %if.end
  %2 = load i8*, i8** %src.addr, align 8, !dbg !8800
  store i8* %2, i8** %p, align 8, !dbg !8801
  %3 = load i32, i32* %order.addr, align 4, !dbg !8802
  %4 = load i32, i32* %endian.addr, align 4, !dbg !8803
  %cmp4 = icmp ne i32 %3, %4, !dbg !8804
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !8805

cond.true:                                        ; preds = %if.end3
  %5 = load i64, i64* %size.addr, align 8, !dbg !8806
  %mul = mul i64 2, %5, !dbg !8807
  br label %cond.end, !dbg !8805

cond.false:                                       ; preds = %if.end3
  br label %cond.end, !dbg !8805

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %mul, %cond.true ], [ 0, %cond.false ], !dbg !8805
  store i64 %cond, i64* %word_step, align 8, !dbg !8808
  %6 = load i32, i32* %order.addr, align 4, !dbg !8809
  %cmp5 = icmp eq i32 %6, 1, !dbg !8811
  br i1 %cmp5, label %if.then6, label %if.end9, !dbg !8812

if.then6:                                         ; preds = %cond.end
  %7 = load i64, i64* %size.addr, align 8, !dbg !8813
  %8 = load i64, i64* %count.addr, align 8, !dbg !8815
  %sub = sub i64 %8, 1, !dbg !8816
  %mul7 = mul i64 %7, %sub, !dbg !8817
  %9 = load i8*, i8** %p, align 8, !dbg !8818
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %mul7, !dbg !8818
  store i8* %add.ptr, i8** %p, align 8, !dbg !8818
  %10 = load i64, i64* %word_step, align 8, !dbg !8819
  %sub8 = sub nsw i64 0, %10, !dbg !8820
  store i64 %sub8, i64* %word_step, align 8, !dbg !8821
  br label %if.end9, !dbg !8822

if.end9:                                          ; preds = %if.then6, %cond.end
  %11 = load i32, i32* %endian.addr, align 4, !dbg !8823
  %cmp10 = icmp eq i32 %11, 1, !dbg !8825
  br i1 %cmp10, label %if.then11, label %if.end14, !dbg !8826

if.then11:                                        ; preds = %if.end9
  %12 = load i64, i64* %size.addr, align 8, !dbg !8827
  %sub12 = sub i64 %12, 1, !dbg !8828
  %13 = load i8*, i8** %p, align 8, !dbg !8829
  %add.ptr13 = getelementptr inbounds i8, i8* %13, i64 %sub12, !dbg !8829
  store i8* %add.ptr13, i8** %p, align 8, !dbg !8829
  br label %if.end14, !dbg !8830

if.end14:                                         ; preds = %if.then11, %if.end9
  %14 = load i64, i64* %size.addr, align 8, !dbg !8831
  %15 = load i64, i64* %count.addr, align 8, !dbg !8832
  %mul15 = mul i64 %14, %15, !dbg !8833
  %add = add i64 %mul15, 8, !dbg !8834
  %sub16 = sub i64 %add, 1, !dbg !8835
  %div = udiv i64 %sub16, 8, !dbg !8836
  store i64 %div, i64* %rn, align 8, !dbg !8837
  %16 = load i64, i64* %rn, align 8, !dbg !8838
  %17 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !8838
  %_mp_alloc = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %17, i32 0, i32 0, !dbg !8838
  %18 = load i32, i32* %_mp_alloc, align 8, !dbg !8838
  %conv = sext i32 %18 to i64, !dbg !8838
  %cmp17 = icmp sgt i64 %16, %conv, !dbg !8838
  br i1 %cmp17, label %cond.true19, label %cond.false21, !dbg !8838

cond.true19:                                      ; preds = %if.end14
  %19 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !8838
  %20 = load i64, i64* %rn, align 8, !dbg !8838
  %call20 = call i8* @mpz_realloc(%struct.__mpz_struct* %19, i64 %20), !dbg !8838
  br label %cond.end22, !dbg !8838

cond.false21:                                     ; preds = %if.end14
  %21 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !8838
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %21, i32 0, i32 2, !dbg !8838
  %22 = load i64*, i64** %_mp_d, align 8, !dbg !8838
  %23 = bitcast i64* %22 to i8*, !dbg !8838
  br label %cond.end22, !dbg !8838

cond.end22:                                       ; preds = %cond.false21, %cond.true19
  %cond23 = phi i8* [ %call20, %cond.true19 ], [ %23, %cond.false21 ], !dbg !8838
  %24 = bitcast i8* %cond23 to i64*, !dbg !8838
  store i64* %24, i64** %rp, align 8, !dbg !8839
  store i64 0, i64* %limb, align 8, !dbg !8840
  store i64 0, i64* %bytes, align 8, !dbg !8842
  store i64 0, i64* %i, align 8, !dbg !8843
  br label %for.cond, !dbg !8844

for.cond:                                         ; preds = %for.inc40, %cond.end22
  %25 = load i64, i64* %count.addr, align 8, !dbg !8845
  %cmp24 = icmp ugt i64 %25, 0, !dbg !8847
  br i1 %cmp24, label %for.body, label %for.end42, !dbg !8848

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %j, metadata !8849, metadata !DIExpression()), !dbg !8851
  store i64 0, i64* %j, align 8, !dbg !8852
  br label %for.cond26, !dbg !8854

for.cond26:                                       ; preds = %for.inc, %for.body
  %26 = load i64, i64* %j, align 8, !dbg !8855
  %27 = load i64, i64* %size.addr, align 8, !dbg !8857
  %cmp27 = icmp ult i64 %26, %27, !dbg !8858
  br i1 %cmp27, label %for.body29, label %for.end, !dbg !8859

for.body29:                                       ; preds = %for.cond26
  %28 = load i8*, i8** %p, align 8, !dbg !8860
  %29 = load i8, i8* %28, align 1, !dbg !8862
  %conv30 = zext i8 %29 to i64, !dbg !8863
  %30 = load i64, i64* %bytes, align 8, !dbg !8864
  %inc = add i64 %30, 1, !dbg !8864
  store i64 %inc, i64* %bytes, align 8, !dbg !8864
  %mul31 = mul i64 %30, 8, !dbg !8865
  %shl = shl i64 %conv30, %mul31, !dbg !8866
  %31 = load i64, i64* %limb, align 8, !dbg !8867
  %or = or i64 %31, %shl, !dbg !8867
  store i64 %or, i64* %limb, align 8, !dbg !8867
  %32 = load i64, i64* %bytes, align 8, !dbg !8868
  %cmp32 = icmp eq i64 %32, 8, !dbg !8870
  br i1 %cmp32, label %if.then34, label %if.end36, !dbg !8871

if.then34:                                        ; preds = %for.body29
  %33 = load i64, i64* %limb, align 8, !dbg !8872
  %34 = load i64*, i64** %rp, align 8, !dbg !8874
  %35 = load i64, i64* %i, align 8, !dbg !8875
  %inc35 = add nsw i64 %35, 1, !dbg !8875
  store i64 %inc35, i64* %i, align 8, !dbg !8875
  %arrayidx = getelementptr inbounds i64, i64* %34, i64 %35, !dbg !8874
  store i64 %33, i64* %arrayidx, align 8, !dbg !8876
  store i64 0, i64* %bytes, align 8, !dbg !8877
  store i64 0, i64* %limb, align 8, !dbg !8878
  br label %if.end36, !dbg !8879

if.end36:                                         ; preds = %if.then34, %for.body29
  br label %for.inc, !dbg !8880

for.inc:                                          ; preds = %if.end36
  %36 = load i64, i64* %j, align 8, !dbg !8881
  %inc37 = add i64 %36, 1, !dbg !8881
  store i64 %inc37, i64* %j, align 8, !dbg !8881
  %37 = load i32, i32* %endian.addr, align 4, !dbg !8882
  %conv38 = sext i32 %37 to i64, !dbg !8883
  %38 = load i8*, i8** %p, align 8, !dbg !8884
  %idx.neg = sub i64 0, %conv38, !dbg !8884
  %add.ptr39 = getelementptr inbounds i8, i8* %38, i64 %idx.neg, !dbg !8884
  store i8* %add.ptr39, i8** %p, align 8, !dbg !8884
  br label %for.cond26, !dbg !8885, !llvm.loop !8886

for.end:                                          ; preds = %for.cond26
  br label %for.inc40, !dbg !8888

for.inc40:                                        ; preds = %for.end
  %39 = load i64, i64* %count.addr, align 8, !dbg !8889
  %dec = add i64 %39, -1, !dbg !8889
  store i64 %dec, i64* %count.addr, align 8, !dbg !8889
  %40 = load i64, i64* %word_step, align 8, !dbg !8890
  %41 = load i8*, i8** %p, align 8, !dbg !8891
  %add.ptr41 = getelementptr inbounds i8, i8* %41, i64 %40, !dbg !8891
  store i8* %add.ptr41, i8** %p, align 8, !dbg !8891
  br label %for.cond, !dbg !8892, !llvm.loop !8893

for.end42:                                        ; preds = %for.cond
  %42 = load i64, i64* %limb, align 8, !dbg !8895
  %cmp43 = icmp ne i64 %42, 0, !dbg !8897
  br i1 %cmp43, label %if.then45, label %if.else, !dbg !8898

if.then45:                                        ; preds = %for.end42
  %43 = load i64, i64* %limb, align 8, !dbg !8899
  %44 = load i64*, i64** %rp, align 8, !dbg !8900
  %45 = load i64, i64* %i, align 8, !dbg !8901
  %inc46 = add nsw i64 %45, 1, !dbg !8901
  store i64 %inc46, i64* %i, align 8, !dbg !8901
  %arrayidx47 = getelementptr inbounds i64, i64* %44, i64 %45, !dbg !8900
  store i64 %43, i64* %arrayidx47, align 8, !dbg !8902
  br label %if.end49, !dbg !8900

if.else:                                          ; preds = %for.end42
  %46 = load i64*, i64** %rp, align 8, !dbg !8903
  %47 = load i64, i64* %i, align 8, !dbg !8904
  %call48 = call i64 @mpn_normalized_size(i64* %46, i64 %47), !dbg !8905
  store i64 %call48, i64* %i, align 8, !dbg !8906
  br label %if.end49

if.end49:                                         ; preds = %if.else, %if.then45
  %48 = load i64, i64* %i, align 8, !dbg !8907
  %conv50 = trunc i64 %48 to i32, !dbg !8907
  %49 = load %struct.__mpz_struct*, %struct.__mpz_struct** %r.addr, align 8, !dbg !8908
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %49, i32 0, i32 1, !dbg !8909
  store i32 %conv50, i32* %_mp_size, align 4, !dbg !8910
  ret void, !dbg !8911
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gmp_detect_endian() #0 !dbg !63 {
entry:
  %p = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p, metadata !8912, metadata !DIExpression()), !dbg !8913
  store i8* bitcast (i32* @gmp_detect_endian.i to i8*), i8** %p, align 8, !dbg !8913
  %0 = load i8*, i8** %p, align 8, !dbg !8914
  %1 = load i8, i8* %0, align 1, !dbg !8915
  %conv = zext i8 %1 to i32, !dbg !8915
  %sub = sub nsw i32 1, %conv, !dbg !8916
  ret i32 %sub, !dbg !8917
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @mpz_export(i8* %r, i64* %countp, i32 %order, i64 %size, i32 %endian, i64 %nails, %struct.__mpz_struct* %u) #0 !dbg !8918 {
entry:
  %r.addr = alloca i8*, align 8
  %countp.addr = alloca i64*, align 8
  %order.addr = alloca i32, align 4
  %size.addr = alloca i64, align 8
  %endian.addr = alloca i32, align 4
  %nails.addr = alloca i64, align 8
  %u.addr = alloca %struct.__mpz_struct*, align 8
  %count = alloca i64, align 8
  %un = alloca i64, align 8
  %k = alloca i64, align 8
  %p = alloca i8*, align 8
  %word_step = alloca i64, align 8
  %limb = alloca i64, align 8
  %bytes = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  store i8* %r, i8** %r.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %r.addr, metadata !8922, metadata !DIExpression()), !dbg !8923
  store i64* %countp, i64** %countp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %countp.addr, metadata !8924, metadata !DIExpression()), !dbg !8925
  store i32 %order, i32* %order.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %order.addr, metadata !8926, metadata !DIExpression()), !dbg !8927
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !8928, metadata !DIExpression()), !dbg !8929
  store i32 %endian, i32* %endian.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %endian.addr, metadata !8930, metadata !DIExpression()), !dbg !8931
  store i64 %nails, i64* %nails.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nails.addr, metadata !8932, metadata !DIExpression()), !dbg !8933
  store %struct.__mpz_struct* %u, %struct.__mpz_struct** %u.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %u.addr, metadata !8934, metadata !DIExpression()), !dbg !8935
  call void @llvm.dbg.declare(metadata i64* %count, metadata !8936, metadata !DIExpression()), !dbg !8937
  call void @llvm.dbg.declare(metadata i64* %un, metadata !8938, metadata !DIExpression()), !dbg !8939
  %0 = load i64, i64* %nails.addr, align 8, !dbg !8940
  %cmp = icmp ne i64 %0, 0, !dbg !8942
  br i1 %cmp, label %if.then, label %if.end, !dbg !8943

if.then:                                          ; preds = %entry
  call void @gmp_die(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0)), !dbg !8944
  br label %if.end, !dbg !8944

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !8945
  %_mp_size = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %1, i32 0, i32 1, !dbg !8946
  %2 = load i32, i32* %_mp_size, align 4, !dbg !8946
  %conv = sext i32 %2 to i64, !dbg !8945
  store i64 %conv, i64* %un, align 8, !dbg !8947
  store i64 0, i64* %count, align 8, !dbg !8948
  %3 = load i64, i64* %un, align 8, !dbg !8949
  %cmp1 = icmp ne i64 %3, 0, !dbg !8951
  br i1 %cmp1, label %if.then3, label %if.end66, !dbg !8952

if.then3:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i64* %k, metadata !8953, metadata !DIExpression()), !dbg !8955
  call void @llvm.dbg.declare(metadata i8** %p, metadata !8956, metadata !DIExpression()), !dbg !8957
  call void @llvm.dbg.declare(metadata i64* %word_step, metadata !8958, metadata !DIExpression()), !dbg !8959
  call void @llvm.dbg.declare(metadata i64* %limb, metadata !8960, metadata !DIExpression()), !dbg !8961
  call void @llvm.dbg.declare(metadata i64* %bytes, metadata !8962, metadata !DIExpression()), !dbg !8963
  call void @llvm.dbg.declare(metadata i64* %i, metadata !8964, metadata !DIExpression()), !dbg !8965
  %4 = load i64, i64* %un, align 8, !dbg !8966
  %cmp4 = icmp sge i64 %4, 0, !dbg !8966
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !8966

cond.true:                                        ; preds = %if.then3
  %5 = load i64, i64* %un, align 8, !dbg !8966
  br label %cond.end, !dbg !8966

cond.false:                                       ; preds = %if.then3
  %6 = load i64, i64* %un, align 8, !dbg !8966
  %sub = sub nsw i64 0, %6, !dbg !8966
  br label %cond.end, !dbg !8966

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %5, %cond.true ], [ %sub, %cond.false ], !dbg !8966
  store i64 %cond, i64* %un, align 8, !dbg !8967
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !8968
  %_mp_d = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %7, i32 0, i32 2, !dbg !8969
  %8 = load i64*, i64** %_mp_d, align 8, !dbg !8969
  %9 = load i64, i64* %un, align 8, !dbg !8970
  %sub6 = sub nsw i64 %9, 1, !dbg !8971
  %arrayidx = getelementptr inbounds i64, i64* %8, i64 %sub6, !dbg !8968
  %10 = load i64, i64* %arrayidx, align 8, !dbg !8968
  store i64 %10, i64* %limb, align 8, !dbg !8972
  store i64 0, i64* %k, align 8, !dbg !8973
  br label %do.body, !dbg !8974

do.body:                                          ; preds = %do.cond, %cond.end
  %11 = load i64, i64* %k, align 8, !dbg !8975
  %inc = add i64 %11, 1, !dbg !8975
  store i64 %inc, i64* %k, align 8, !dbg !8975
  %12 = load i64, i64* %limb, align 8, !dbg !8977
  %shr = lshr i64 %12, 8, !dbg !8977
  store i64 %shr, i64* %limb, align 8, !dbg !8977
  br label %do.cond, !dbg !8978

do.cond:                                          ; preds = %do.body
  %13 = load i64, i64* %limb, align 8, !dbg !8979
  %cmp7 = icmp ne i64 %13, 0, !dbg !8980
  br i1 %cmp7, label %do.body, label %do.end, !dbg !8978, !llvm.loop !8981

do.end:                                           ; preds = %do.cond
  %14 = load i64, i64* %k, align 8, !dbg !8983
  %15 = load i64, i64* %un, align 8, !dbg !8984
  %sub9 = sub nsw i64 %15, 1, !dbg !8985
  %mul = mul i64 %sub9, 8, !dbg !8986
  %add = add i64 %14, %mul, !dbg !8987
  %16 = load i64, i64* %size.addr, align 8, !dbg !8988
  %add10 = add i64 %add, %16, !dbg !8989
  %sub11 = sub i64 %add10, 1, !dbg !8990
  %17 = load i64, i64* %size.addr, align 8, !dbg !8991
  %div = udiv i64 %sub11, %17, !dbg !8992
  store i64 %div, i64* %count, align 8, !dbg !8993
  %18 = load i8*, i8** %r.addr, align 8, !dbg !8994
  %tobool = icmp ne i8* %18, null, !dbg !8994
  br i1 %tobool, label %if.end14, label %if.then12, !dbg !8996

if.then12:                                        ; preds = %do.end
  %19 = load i8* (i64)*, i8* (i64)** @gmp_allocate_func, align 8, !dbg !8997
  %20 = load i64, i64* %count, align 8, !dbg !8997
  %21 = load i64, i64* %size.addr, align 8, !dbg !8997
  %mul13 = mul i64 %20, %21, !dbg !8997
  %call = call i8* %19(i64 %mul13), !dbg !8997
  store i8* %call, i8** %r.addr, align 8, !dbg !8998
  br label %if.end14, !dbg !8999

if.end14:                                         ; preds = %if.then12, %do.end
  %22 = load i32, i32* %endian.addr, align 4, !dbg !9000
  %cmp15 = icmp eq i32 %22, 0, !dbg !9002
  br i1 %cmp15, label %if.then17, label %if.end19, !dbg !9003

if.then17:                                        ; preds = %if.end14
  %call18 = call i32 @gmp_detect_endian(), !dbg !9004
  store i32 %call18, i32* %endian.addr, align 4, !dbg !9005
  br label %if.end19, !dbg !9006

if.end19:                                         ; preds = %if.then17, %if.end14
  %23 = load i8*, i8** %r.addr, align 8, !dbg !9007
  store i8* %23, i8** %p, align 8, !dbg !9008
  %24 = load i32, i32* %order.addr, align 4, !dbg !9009
  %25 = load i32, i32* %endian.addr, align 4, !dbg !9010
  %cmp20 = icmp ne i32 %24, %25, !dbg !9011
  br i1 %cmp20, label %cond.true22, label %cond.false24, !dbg !9012

cond.true22:                                      ; preds = %if.end19
  %26 = load i64, i64* %size.addr, align 8, !dbg !9013
  %mul23 = mul i64 2, %26, !dbg !9014
  br label %cond.end25, !dbg !9012

cond.false24:                                     ; preds = %if.end19
  br label %cond.end25, !dbg !9012

cond.end25:                                       ; preds = %cond.false24, %cond.true22
  %cond26 = phi i64 [ %mul23, %cond.true22 ], [ 0, %cond.false24 ], !dbg !9012
  store i64 %cond26, i64* %word_step, align 8, !dbg !9015
  %27 = load i32, i32* %order.addr, align 4, !dbg !9016
  %cmp27 = icmp eq i32 %27, 1, !dbg !9018
  br i1 %cmp27, label %if.then29, label %if.end33, !dbg !9019

if.then29:                                        ; preds = %cond.end25
  %28 = load i64, i64* %size.addr, align 8, !dbg !9020
  %29 = load i64, i64* %count, align 8, !dbg !9022
  %sub30 = sub i64 %29, 1, !dbg !9023
  %mul31 = mul i64 %28, %sub30, !dbg !9024
  %30 = load i8*, i8** %p, align 8, !dbg !9025
  %add.ptr = getelementptr inbounds i8, i8* %30, i64 %mul31, !dbg !9025
  store i8* %add.ptr, i8** %p, align 8, !dbg !9025
  %31 = load i64, i64* %word_step, align 8, !dbg !9026
  %sub32 = sub nsw i64 0, %31, !dbg !9027
  store i64 %sub32, i64* %word_step, align 8, !dbg !9028
  br label %if.end33, !dbg !9029

if.end33:                                         ; preds = %if.then29, %cond.end25
  %32 = load i32, i32* %endian.addr, align 4, !dbg !9030
  %cmp34 = icmp eq i32 %32, 1, !dbg !9032
  br i1 %cmp34, label %if.then36, label %if.end39, !dbg !9033

if.then36:                                        ; preds = %if.end33
  %33 = load i64, i64* %size.addr, align 8, !dbg !9034
  %sub37 = sub i64 %33, 1, !dbg !9035
  %34 = load i8*, i8** %p, align 8, !dbg !9036
  %add.ptr38 = getelementptr inbounds i8, i8* %34, i64 %sub37, !dbg !9036
  store i8* %add.ptr38, i8** %p, align 8, !dbg !9036
  br label %if.end39, !dbg !9037

if.end39:                                         ; preds = %if.then36, %if.end33
  store i64 0, i64* %bytes, align 8, !dbg !9038
  store i64 0, i64* %i, align 8, !dbg !9040
  store i64 0, i64* %k, align 8, !dbg !9041
  br label %for.cond, !dbg !9042

for.cond:                                         ; preds = %for.inc62, %if.end39
  %35 = load i64, i64* %k, align 8, !dbg !9043
  %36 = load i64, i64* %count, align 8, !dbg !9045
  %cmp40 = icmp ult i64 %35, %36, !dbg !9046
  br i1 %cmp40, label %for.body, label %for.end65, !dbg !9047

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %j, metadata !9048, metadata !DIExpression()), !dbg !9050
  store i64 0, i64* %j, align 8, !dbg !9051
  br label %for.cond42, !dbg !9053

for.cond42:                                       ; preds = %for.inc, %for.body
  %37 = load i64, i64* %j, align 8, !dbg !9054
  %38 = load i64, i64* %size.addr, align 8, !dbg !9056
  %cmp43 = icmp ult i64 %37, %38, !dbg !9057
  br i1 %cmp43, label %for.body45, label %for.end, !dbg !9058

for.body45:                                       ; preds = %for.cond42
  %39 = load i64, i64* %bytes, align 8, !dbg !9059
  %cmp46 = icmp eq i64 %39, 0, !dbg !9062
  br i1 %cmp46, label %if.then48, label %if.end56, !dbg !9063

if.then48:                                        ; preds = %for.body45
  %40 = load i64, i64* %i, align 8, !dbg !9064
  %41 = load i64, i64* %un, align 8, !dbg !9067
  %cmp49 = icmp slt i64 %40, %41, !dbg !9068
  br i1 %cmp49, label %if.then51, label %if.end55, !dbg !9069

if.then51:                                        ; preds = %if.then48
  %42 = load %struct.__mpz_struct*, %struct.__mpz_struct** %u.addr, align 8, !dbg !9070
  %_mp_d52 = getelementptr inbounds %struct.__mpz_struct, %struct.__mpz_struct* %42, i32 0, i32 2, !dbg !9071
  %43 = load i64*, i64** %_mp_d52, align 8, !dbg !9071
  %44 = load i64, i64* %i, align 8, !dbg !9072
  %inc53 = add nsw i64 %44, 1, !dbg !9072
  store i64 %inc53, i64* %i, align 8, !dbg !9072
  %arrayidx54 = getelementptr inbounds i64, i64* %43, i64 %44, !dbg !9070
  %45 = load i64, i64* %arrayidx54, align 8, !dbg !9070
  store i64 %45, i64* %limb, align 8, !dbg !9073
  br label %if.end55, !dbg !9074

if.end55:                                         ; preds = %if.then51, %if.then48
  store i64 8, i64* %bytes, align 8, !dbg !9075
  br label %if.end56, !dbg !9076

if.end56:                                         ; preds = %if.end55, %for.body45
  %46 = load i64, i64* %limb, align 8, !dbg !9077
  %conv57 = trunc i64 %46 to i8, !dbg !9077
  %47 = load i8*, i8** %p, align 8, !dbg !9078
  store i8 %conv57, i8* %47, align 1, !dbg !9079
  %48 = load i64, i64* %limb, align 8, !dbg !9080
  %shr58 = lshr i64 %48, 8, !dbg !9080
  store i64 %shr58, i64* %limb, align 8, !dbg !9080
  %49 = load i64, i64* %bytes, align 8, !dbg !9081
  %dec = add i64 %49, -1, !dbg !9081
  store i64 %dec, i64* %bytes, align 8, !dbg !9081
  br label %for.inc, !dbg !9082

for.inc:                                          ; preds = %if.end56
  %50 = load i64, i64* %j, align 8, !dbg !9083
  %inc59 = add i64 %50, 1, !dbg !9083
  store i64 %inc59, i64* %j, align 8, !dbg !9083
  %51 = load i32, i32* %endian.addr, align 4, !dbg !9084
  %conv60 = sext i32 %51 to i64, !dbg !9085
  %52 = load i8*, i8** %p, align 8, !dbg !9086
  %idx.neg = sub i64 0, %conv60, !dbg !9086
  %add.ptr61 = getelementptr inbounds i8, i8* %52, i64 %idx.neg, !dbg !9086
  store i8* %add.ptr61, i8** %p, align 8, !dbg !9086
  br label %for.cond42, !dbg !9087, !llvm.loop !9088

for.end:                                          ; preds = %for.cond42
  br label %for.inc62, !dbg !9090

for.inc62:                                        ; preds = %for.end
  %53 = load i64, i64* %k, align 8, !dbg !9091
  %inc63 = add i64 %53, 1, !dbg !9091
  store i64 %inc63, i64* %k, align 8, !dbg !9091
  %54 = load i64, i64* %word_step, align 8, !dbg !9092
  %55 = load i8*, i8** %p, align 8, !dbg !9093
  %add.ptr64 = getelementptr inbounds i8, i8* %55, i64 %54, !dbg !9093
  store i8* %add.ptr64, i8** %p, align 8, !dbg !9093
  br label %for.cond, !dbg !9094, !llvm.loop !9095

for.end65:                                        ; preds = %for.cond
  br label %if.end66, !dbg !9097

if.end66:                                         ; preds = %for.end65, %if.end
  %56 = load i64*, i64** %countp.addr, align 8, !dbg !9098
  %tobool67 = icmp ne i64* %56, null, !dbg !9098
  br i1 %tobool67, label %if.then68, label %if.end69, !dbg !9100

if.then68:                                        ; preds = %if.end66
  %57 = load i64, i64* %count, align 8, !dbg !9101
  %58 = load i64*, i64** %countp.addr, align 8, !dbg !9102
  store i64 %57, i64* %58, align 8, !dbg !9103
  br label %if.end69, !dbg !9104

if.end69:                                         ; preds = %if.then68, %if.end66
  %59 = load i8*, i8** %r.addr, align 8, !dbg !9105
  ret i8* %59, !dbg !9106
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #5

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #5

; Function Attrs: nounwind
declare dso_local void @free(i8*) #5

; Function Attrs: noinline nounwind uwtable
define internal i64 @mpn_limb_get_str(i8* %sp, i64 %w, %struct.gmp_div_inverse* %binv) #0 !dbg !9107 {
entry:
  %sp.addr = alloca i8*, align 8
  %w.addr = alloca i64, align 8
  %binv.addr = alloca %struct.gmp_div_inverse*, align 8
  %i = alloca i64, align 8
  %h = alloca i64, align 8
  %l = alloca i64, align 8
  %r = alloca i64, align 8
  %_qh = alloca i64, align 8
  %_ql = alloca i64, align 8
  %_r = alloca i64, align 8
  %_mask = alloca i64, align 8
  %__x0 = alloca i64, align 8
  %__x1 = alloca i64, align 8
  %__x2 = alloca i64, align 8
  %__x3 = alloca i64, align 8
  %__ul = alloca i32, align 4
  %__vl = alloca i32, align 4
  %__uh = alloca i32, align 4
  %__vh = alloca i32, align 4
  %__u = alloca i64, align 8
  %__v = alloca i64, align 8
  %__x = alloca i64, align 8
  store i8* %sp, i8** %sp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %sp.addr, metadata !9110, metadata !DIExpression()), !dbg !9111
  store i64 %w, i64* %w.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %w.addr, metadata !9112, metadata !DIExpression()), !dbg !9113
  store %struct.gmp_div_inverse* %binv, %struct.gmp_div_inverse** %binv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gmp_div_inverse** %binv.addr, metadata !9114, metadata !DIExpression()), !dbg !9115
  call void @llvm.dbg.declare(metadata i64* %i, metadata !9116, metadata !DIExpression()), !dbg !9117
  store i64 0, i64* %i, align 8, !dbg !9118
  br label %for.cond, !dbg !9120

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %w.addr, align 8, !dbg !9121
  %cmp = icmp ugt i64 %0, 0, !dbg !9123
  br i1 %cmp, label %for.body, label %for.end, !dbg !9124

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %h, metadata !9125, metadata !DIExpression()), !dbg !9127
  call void @llvm.dbg.declare(metadata i64* %l, metadata !9128, metadata !DIExpression()), !dbg !9129
  call void @llvm.dbg.declare(metadata i64* %r, metadata !9130, metadata !DIExpression()), !dbg !9131
  %1 = load i64, i64* %w.addr, align 8, !dbg !9132
  %2 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %binv.addr, align 8, !dbg !9133
  %shift = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %2, i32 0, i32 0, !dbg !9134
  %3 = load i32, i32* %shift, align 8, !dbg !9134
  %conv = zext i32 %3 to i64, !dbg !9133
  %sub = sub i64 64, %conv, !dbg !9135
  %shr = lshr i64 %1, %sub, !dbg !9136
  store i64 %shr, i64* %h, align 8, !dbg !9137
  %4 = load i64, i64* %w.addr, align 8, !dbg !9138
  %5 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %binv.addr, align 8, !dbg !9139
  %shift1 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %5, i32 0, i32 0, !dbg !9140
  %6 = load i32, i32* %shift1, align 8, !dbg !9140
  %sh_prom = zext i32 %6 to i64, !dbg !9141
  %shl = shl i64 %4, %sh_prom, !dbg !9141
  store i64 %shl, i64* %l, align 8, !dbg !9142
  br label %do.body, !dbg !9143

do.body:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i64* %_qh, metadata !9144, metadata !DIExpression()), !dbg !9146
  call void @llvm.dbg.declare(metadata i64* %_ql, metadata !9147, metadata !DIExpression()), !dbg !9146
  call void @llvm.dbg.declare(metadata i64* %_r, metadata !9148, metadata !DIExpression()), !dbg !9146
  call void @llvm.dbg.declare(metadata i64* %_mask, metadata !9149, metadata !DIExpression()), !dbg !9146
  br label %do.body2, !dbg !9146

do.body2:                                         ; preds = %do.body
  call void @llvm.dbg.declare(metadata i64* %__x0, metadata !9150, metadata !DIExpression()), !dbg !9152
  call void @llvm.dbg.declare(metadata i64* %__x1, metadata !9153, metadata !DIExpression()), !dbg !9152
  call void @llvm.dbg.declare(metadata i64* %__x2, metadata !9154, metadata !DIExpression()), !dbg !9152
  call void @llvm.dbg.declare(metadata i64* %__x3, metadata !9155, metadata !DIExpression()), !dbg !9152
  call void @llvm.dbg.declare(metadata i32* %__ul, metadata !9156, metadata !DIExpression()), !dbg !9152
  call void @llvm.dbg.declare(metadata i32* %__vl, metadata !9157, metadata !DIExpression()), !dbg !9152
  call void @llvm.dbg.declare(metadata i32* %__uh, metadata !9158, metadata !DIExpression()), !dbg !9152
  call void @llvm.dbg.declare(metadata i32* %__vh, metadata !9159, metadata !DIExpression()), !dbg !9152
  call void @llvm.dbg.declare(metadata i64* %__u, metadata !9160, metadata !DIExpression()), !dbg !9152
  %7 = load i64, i64* %h, align 8, !dbg !9152
  store i64 %7, i64* %__u, align 8, !dbg !9152
  call void @llvm.dbg.declare(metadata i64* %__v, metadata !9161, metadata !DIExpression()), !dbg !9152
  %8 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %binv.addr, align 8, !dbg !9152
  %di = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %8, i32 0, i32 3, !dbg !9152
  %9 = load i64, i64* %di, align 8, !dbg !9152
  store i64 %9, i64* %__v, align 8, !dbg !9152
  %10 = load i64, i64* %__u, align 8, !dbg !9152
  %and = and i64 %10, 4294967295, !dbg !9152
  %conv3 = trunc i64 %and to i32, !dbg !9152
  store i32 %conv3, i32* %__ul, align 4, !dbg !9152
  %11 = load i64, i64* %__u, align 8, !dbg !9152
  %shr4 = lshr i64 %11, 32, !dbg !9152
  %conv5 = trunc i64 %shr4 to i32, !dbg !9152
  store i32 %conv5, i32* %__uh, align 4, !dbg !9152
  %12 = load i64, i64* %__v, align 8, !dbg !9152
  %and6 = and i64 %12, 4294967295, !dbg !9152
  %conv7 = trunc i64 %and6 to i32, !dbg !9152
  store i32 %conv7, i32* %__vl, align 4, !dbg !9152
  %13 = load i64, i64* %__v, align 8, !dbg !9152
  %shr8 = lshr i64 %13, 32, !dbg !9152
  %conv9 = trunc i64 %shr8 to i32, !dbg !9152
  store i32 %conv9, i32* %__vh, align 4, !dbg !9152
  %14 = load i32, i32* %__ul, align 4, !dbg !9152
  %conv10 = zext i32 %14 to i64, !dbg !9152
  %15 = load i32, i32* %__vl, align 4, !dbg !9152
  %conv11 = zext i32 %15 to i64, !dbg !9152
  %mul = mul i64 %conv10, %conv11, !dbg !9152
  store i64 %mul, i64* %__x0, align 8, !dbg !9152
  %16 = load i32, i32* %__ul, align 4, !dbg !9152
  %conv12 = zext i32 %16 to i64, !dbg !9152
  %17 = load i32, i32* %__vh, align 4, !dbg !9152
  %conv13 = zext i32 %17 to i64, !dbg !9152
  %mul14 = mul i64 %conv12, %conv13, !dbg !9152
  store i64 %mul14, i64* %__x1, align 8, !dbg !9152
  %18 = load i32, i32* %__uh, align 4, !dbg !9152
  %conv15 = zext i32 %18 to i64, !dbg !9152
  %19 = load i32, i32* %__vl, align 4, !dbg !9152
  %conv16 = zext i32 %19 to i64, !dbg !9152
  %mul17 = mul i64 %conv15, %conv16, !dbg !9152
  store i64 %mul17, i64* %__x2, align 8, !dbg !9152
  %20 = load i32, i32* %__uh, align 4, !dbg !9152
  %conv18 = zext i32 %20 to i64, !dbg !9152
  %21 = load i32, i32* %__vh, align 4, !dbg !9152
  %conv19 = zext i32 %21 to i64, !dbg !9152
  %mul20 = mul i64 %conv18, %conv19, !dbg !9152
  store i64 %mul20, i64* %__x3, align 8, !dbg !9152
  %22 = load i64, i64* %__x0, align 8, !dbg !9152
  %shr21 = lshr i64 %22, 32, !dbg !9152
  %23 = load i64, i64* %__x1, align 8, !dbg !9152
  %add = add i64 %23, %shr21, !dbg !9152
  store i64 %add, i64* %__x1, align 8, !dbg !9152
  %24 = load i64, i64* %__x2, align 8, !dbg !9152
  %25 = load i64, i64* %__x1, align 8, !dbg !9152
  %add22 = add i64 %25, %24, !dbg !9152
  store i64 %add22, i64* %__x1, align 8, !dbg !9152
  %26 = load i64, i64* %__x1, align 8, !dbg !9162
  %27 = load i64, i64* %__x2, align 8, !dbg !9162
  %cmp23 = icmp ult i64 %26, %27, !dbg !9162
  br i1 %cmp23, label %if.then, label %if.end, !dbg !9152

if.then:                                          ; preds = %do.body2
  %28 = load i64, i64* %__x3, align 8, !dbg !9162
  %add25 = add i64 %28, 4294967296, !dbg !9162
  store i64 %add25, i64* %__x3, align 8, !dbg !9162
  br label %if.end, !dbg !9162

if.end:                                           ; preds = %if.then, %do.body2
  %29 = load i64, i64* %__x3, align 8, !dbg !9152
  %30 = load i64, i64* %__x1, align 8, !dbg !9152
  %shr26 = lshr i64 %30, 32, !dbg !9152
  %add27 = add i64 %29, %shr26, !dbg !9152
  store i64 %add27, i64* %_qh, align 8, !dbg !9152
  %31 = load i64, i64* %__x1, align 8, !dbg !9152
  %shl28 = shl i64 %31, 32, !dbg !9152
  %32 = load i64, i64* %__x0, align 8, !dbg !9152
  %and29 = and i64 %32, 4294967295, !dbg !9152
  %add30 = add i64 %shl28, %and29, !dbg !9152
  store i64 %add30, i64* %_ql, align 8, !dbg !9152
  br label %do.end, !dbg !9152

do.end:                                           ; preds = %if.end
  br label %do.body31, !dbg !9146

do.body31:                                        ; preds = %do.end
  call void @llvm.dbg.declare(metadata i64* %__x, metadata !9164, metadata !DIExpression()), !dbg !9166
  %33 = load i64, i64* %_ql, align 8, !dbg !9166
  %34 = load i64, i64* %l, align 8, !dbg !9166
  %add32 = add i64 %33, %34, !dbg !9166
  store i64 %add32, i64* %__x, align 8, !dbg !9166
  %35 = load i64, i64* %_qh, align 8, !dbg !9166
  %36 = load i64, i64* %h, align 8, !dbg !9166
  %add33 = add i64 %36, 1, !dbg !9166
  %add34 = add i64 %35, %add33, !dbg !9166
  %37 = load i64, i64* %__x, align 8, !dbg !9166
  %38 = load i64, i64* %_ql, align 8, !dbg !9166
  %cmp35 = icmp ult i64 %37, %38, !dbg !9166
  %conv36 = zext i1 %cmp35 to i32, !dbg !9166
  %conv37 = sext i32 %conv36 to i64, !dbg !9166
  %add38 = add i64 %add34, %conv37, !dbg !9166
  store i64 %add38, i64* %_qh, align 8, !dbg !9166
  %39 = load i64, i64* %__x, align 8, !dbg !9166
  store i64 %39, i64* %_ql, align 8, !dbg !9166
  br label %do.end39, !dbg !9166

do.end39:                                         ; preds = %do.body31
  %40 = load i64, i64* %l, align 8, !dbg !9146
  %41 = load i64, i64* %_qh, align 8, !dbg !9146
  %42 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %binv.addr, align 8, !dbg !9146
  %d1 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %42, i32 0, i32 1, !dbg !9146
  %43 = load i64, i64* %d1, align 8, !dbg !9146
  %mul40 = mul i64 %41, %43, !dbg !9146
  %sub41 = sub i64 %40, %mul40, !dbg !9146
  store i64 %sub41, i64* %_r, align 8, !dbg !9146
  %44 = load i64, i64* %_r, align 8, !dbg !9146
  %45 = load i64, i64* %_ql, align 8, !dbg !9146
  %cmp42 = icmp ugt i64 %44, %45, !dbg !9146
  %conv43 = zext i1 %cmp42 to i32, !dbg !9146
  %conv44 = sext i32 %conv43 to i64, !dbg !9146
  %sub45 = sub i64 0, %conv44, !dbg !9146
  store i64 %sub45, i64* %_mask, align 8, !dbg !9146
  %46 = load i64, i64* %_mask, align 8, !dbg !9146
  %47 = load i64, i64* %_qh, align 8, !dbg !9146
  %add46 = add i64 %47, %46, !dbg !9146
  store i64 %add46, i64* %_qh, align 8, !dbg !9146
  %48 = load i64, i64* %_mask, align 8, !dbg !9146
  %49 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %binv.addr, align 8, !dbg !9146
  %d147 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %49, i32 0, i32 1, !dbg !9146
  %50 = load i64, i64* %d147, align 8, !dbg !9146
  %and48 = and i64 %48, %50, !dbg !9146
  %51 = load i64, i64* %_r, align 8, !dbg !9146
  %add49 = add i64 %51, %and48, !dbg !9146
  store i64 %add49, i64* %_r, align 8, !dbg !9146
  %52 = load i64, i64* %_r, align 8, !dbg !9167
  %53 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %binv.addr, align 8, !dbg !9167
  %d150 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %53, i32 0, i32 1, !dbg !9167
  %54 = load i64, i64* %d150, align 8, !dbg !9167
  %cmp51 = icmp uge i64 %52, %54, !dbg !9167
  br i1 %cmp51, label %if.then53, label %if.end56, !dbg !9146

if.then53:                                        ; preds = %do.end39
  %55 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %binv.addr, align 8, !dbg !9169
  %d154 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %55, i32 0, i32 1, !dbg !9169
  %56 = load i64, i64* %d154, align 8, !dbg !9169
  %57 = load i64, i64* %_r, align 8, !dbg !9169
  %sub55 = sub i64 %57, %56, !dbg !9169
  store i64 %sub55, i64* %_r, align 8, !dbg !9169
  %58 = load i64, i64* %_qh, align 8, !dbg !9169
  %inc = add i64 %58, 1, !dbg !9169
  store i64 %inc, i64* %_qh, align 8, !dbg !9169
  br label %if.end56, !dbg !9169

if.end56:                                         ; preds = %if.then53, %do.end39
  %59 = load i64, i64* %_r, align 8, !dbg !9146
  store i64 %59, i64* %r, align 8, !dbg !9146
  %60 = load i64, i64* %_qh, align 8, !dbg !9146
  store i64 %60, i64* %w.addr, align 8, !dbg !9146
  br label %do.end57, !dbg !9146

do.end57:                                         ; preds = %if.end56
  %61 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %binv.addr, align 8, !dbg !9171
  %shift58 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %61, i32 0, i32 0, !dbg !9172
  %62 = load i32, i32* %shift58, align 8, !dbg !9172
  %63 = load i64, i64* %r, align 8, !dbg !9173
  %sh_prom59 = zext i32 %62 to i64, !dbg !9173
  %shr60 = lshr i64 %63, %sh_prom59, !dbg !9173
  store i64 %shr60, i64* %r, align 8, !dbg !9173
  %64 = load i64, i64* %r, align 8, !dbg !9174
  %conv61 = trunc i64 %64 to i8, !dbg !9174
  %65 = load i8*, i8** %sp.addr, align 8, !dbg !9175
  %66 = load i64, i64* %i, align 8, !dbg !9176
  %arrayidx = getelementptr inbounds i8, i8* %65, i64 %66, !dbg !9175
  store i8 %conv61, i8* %arrayidx, align 1, !dbg !9177
  br label %for.inc, !dbg !9178

for.inc:                                          ; preds = %do.end57
  %67 = load i64, i64* %i, align 8, !dbg !9179
  %inc62 = add nsw i64 %67, 1, !dbg !9179
  store i64 %inc62, i64* %i, align 8, !dbg !9179
  br label %for.cond, !dbg !9180, !llvm.loop !9181

for.end:                                          ; preds = %for.cond
  %68 = load i64, i64* %i, align 8, !dbg !9183
  ret i64 %68, !dbg !9184
}

; Function Attrs: noinline nounwind uwtable
define internal i64* @gmp_xrealloc_limbs(i64* %old, i64 %size) #0 !dbg !9185 {
entry:
  %old.addr = alloca i64*, align 8
  %size.addr = alloca i64, align 8
  store i64* %old, i64** %old.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %old.addr, metadata !9188, metadata !DIExpression()), !dbg !9189
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !9190, metadata !DIExpression()), !dbg !9191
  %0 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** @gmp_reallocate_func, align 8, !dbg !9192
  %1 = load i64*, i64** %old.addr, align 8, !dbg !9193
  %2 = bitcast i64* %1 to i8*, !dbg !9193
  %3 = load i64, i64* %size.addr, align 8, !dbg !9194
  %mul = mul i64 %3, 8, !dbg !9195
  %call = call i8* %0(i8* %2, i64 0, i64 %mul), !dbg !9196
  %4 = bitcast i8* %call to i64*, !dbg !9196
  ret i64* %4, !dbg !9197
}

; Function Attrs: noinline nounwind uwtable
define internal void @mpn_div_qr(i64* %qp, i64* %np, i64 %nn, i64* %dp, i64 %dn) #0 !dbg !9198 {
entry:
  %qp.addr = alloca i64*, align 8
  %np.addr = alloca i64*, align 8
  %nn.addr = alloca i64, align 8
  %dp.addr = alloca i64*, align 8
  %dn.addr = alloca i64, align 8
  %inv = alloca %struct.gmp_div_inverse, align 8
  %tp = alloca i64*, align 8
  %__cy = alloca i64, align 8
  store i64* %qp, i64** %qp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %qp.addr, metadata !9201, metadata !DIExpression()), !dbg !9202
  store i64* %np, i64** %np.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %np.addr, metadata !9203, metadata !DIExpression()), !dbg !9204
  store i64 %nn, i64* %nn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nn.addr, metadata !9205, metadata !DIExpression()), !dbg !9206
  store i64* %dp, i64** %dp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %dp.addr, metadata !9207, metadata !DIExpression()), !dbg !9208
  store i64 %dn, i64* %dn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %dn.addr, metadata !9209, metadata !DIExpression()), !dbg !9210
  call void @llvm.dbg.declare(metadata %struct.gmp_div_inverse* %inv, metadata !9211, metadata !DIExpression()), !dbg !9212
  call void @llvm.dbg.declare(metadata i64** %tp, metadata !9213, metadata !DIExpression()), !dbg !9214
  store i64* null, i64** %tp, align 8, !dbg !9214
  %0 = load i64*, i64** %dp.addr, align 8, !dbg !9215
  %1 = load i64, i64* %dn.addr, align 8, !dbg !9216
  call void @mpn_div_qr_invert(%struct.gmp_div_inverse* %inv, i64* %0, i64 %1), !dbg !9217
  %2 = load i64, i64* %dn.addr, align 8, !dbg !9218
  %cmp = icmp sgt i64 %2, 2, !dbg !9220
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !9221

land.lhs.true:                                    ; preds = %entry
  %shift = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %inv, i32 0, i32 0, !dbg !9222
  %3 = load i32, i32* %shift, align 8, !dbg !9222
  %cmp1 = icmp ugt i32 %3, 0, !dbg !9223
  br i1 %cmp1, label %if.then, label %if.end, !dbg !9224

if.then:                                          ; preds = %land.lhs.true
  %4 = load i64, i64* %dn.addr, align 8, !dbg !9225
  %call = call i64* @gmp_xalloc_limbs(i64 %4), !dbg !9227
  store i64* %call, i64** %tp, align 8, !dbg !9228
  br label %do.body, !dbg !9229

do.body:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata i64* %__cy, metadata !9230, metadata !DIExpression()), !dbg !9232
  %5 = load i64*, i64** %tp, align 8, !dbg !9232
  %6 = load i64*, i64** %dp.addr, align 8, !dbg !9232
  %7 = load i64, i64* %dn.addr, align 8, !dbg !9232
  %shift2 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %inv, i32 0, i32 0, !dbg !9232
  %8 = load i32, i32* %shift2, align 8, !dbg !9232
  %call3 = call i64 @mpn_lshift(i64* %5, i64* %6, i64 %7, i32 %8), !dbg !9232
  store i64 %call3, i64* %__cy, align 8, !dbg !9232
  br label %do.end, !dbg !9232

do.end:                                           ; preds = %do.body
  %9 = load i64*, i64** %tp, align 8, !dbg !9233
  store i64* %9, i64** %dp.addr, align 8, !dbg !9234
  br label %if.end, !dbg !9235

if.end:                                           ; preds = %do.end, %land.lhs.true, %entry
  %10 = load i64*, i64** %qp.addr, align 8, !dbg !9236
  %11 = load i64*, i64** %np.addr, align 8, !dbg !9237
  %12 = load i64, i64* %nn.addr, align 8, !dbg !9238
  %13 = load i64*, i64** %dp.addr, align 8, !dbg !9239
  %14 = load i64, i64* %dn.addr, align 8, !dbg !9240
  call void @mpn_div_qr_preinv(i64* %10, i64* %11, i64 %12, i64* %13, i64 %14, %struct.gmp_div_inverse* %inv), !dbg !9241
  %15 = load i64*, i64** %tp, align 8, !dbg !9242
  %tobool = icmp ne i64* %15, null, !dbg !9242
  br i1 %tobool, label %if.then4, label %if.end5, !dbg !9244

if.then4:                                         ; preds = %if.end
  %16 = load void (i8*, i64)*, void (i8*, i64)** @gmp_free_func, align 8, !dbg !9245
  %17 = load i64*, i64** %tp, align 8, !dbg !9245
  %18 = bitcast i64* %17 to i8*, !dbg !9245
  call void %16(i8* %18, i64 0), !dbg !9245
  br label %if.end5, !dbg !9245

if.end5:                                          ; preds = %if.then4, %if.end
  ret void, !dbg !9246
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #4

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #6

; Function Attrs: noinline nounwind uwtable
define internal void @mpn_div_qr_2_invert(%struct.gmp_div_inverse* %inv, i64 %d1, i64 %d0) #0 !dbg !9247 {
entry:
  %inv.addr = alloca %struct.gmp_div_inverse*, align 8
  %d1.addr = alloca i64, align 8
  %d0.addr = alloca i64, align 8
  %shift = alloca i32, align 4
  %__clz_x = alloca i64, align 8
  %__clz_c = alloca i32, align 4
  store %struct.gmp_div_inverse* %inv, %struct.gmp_div_inverse** %inv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gmp_div_inverse** %inv.addr, metadata !9250, metadata !DIExpression()), !dbg !9251
  store i64 %d1, i64* %d1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d1.addr, metadata !9252, metadata !DIExpression()), !dbg !9253
  store i64 %d0, i64* %d0.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %d0.addr, metadata !9254, metadata !DIExpression()), !dbg !9255
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !9256, metadata !DIExpression()), !dbg !9257
  br label %do.body, !dbg !9258

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %__clz_x, metadata !9259, metadata !DIExpression()), !dbg !9261
  %0 = load i64, i64* %d1.addr, align 8, !dbg !9261
  store i64 %0, i64* %__clz_x, align 8, !dbg !9261
  call void @llvm.dbg.declare(metadata i32* %__clz_c, metadata !9262, metadata !DIExpression()), !dbg !9261
  store i32 0, i32* %__clz_c, align 4, !dbg !9263
  br label %for.cond, !dbg !9263

for.cond:                                         ; preds = %for.inc, %do.body
  %1 = load i64, i64* %__clz_x, align 8, !dbg !9265
  %and = and i64 %1, -72057594037927936, !dbg !9265
  %cmp = icmp eq i64 %and, 0, !dbg !9265
  br i1 %cmp, label %for.body, label %for.end, !dbg !9263

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %__clz_x, align 8, !dbg !9265
  %shl = shl i64 %2, 8, !dbg !9265
  store i64 %shl, i64* %__clz_x, align 8, !dbg !9265
  br label %for.inc, !dbg !9265

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %__clz_c, align 4, !dbg !9265
  %add = add i32 %3, 8, !dbg !9265
  store i32 %add, i32* %__clz_c, align 4, !dbg !9265
  br label %for.cond, !dbg !9265, !llvm.loop !9267

for.end:                                          ; preds = %for.cond
  br label %for.cond1, !dbg !9261

for.cond1:                                        ; preds = %for.inc6, %for.end
  %4 = load i64, i64* %__clz_x, align 8, !dbg !9268
  %and2 = and i64 %4, -9223372036854775808, !dbg !9268
  %cmp3 = icmp eq i64 %and2, 0, !dbg !9268
  br i1 %cmp3, label %for.body4, label %for.end7, !dbg !9271

for.body4:                                        ; preds = %for.cond1
  %5 = load i64, i64* %__clz_x, align 8, !dbg !9268
  %shl5 = shl i64 %5, 1, !dbg !9268
  store i64 %shl5, i64* %__clz_x, align 8, !dbg !9268
  br label %for.inc6, !dbg !9268

for.inc6:                                         ; preds = %for.body4
  %6 = load i32, i32* %__clz_c, align 4, !dbg !9268
  %inc = add i32 %6, 1, !dbg !9268
  store i32 %inc, i32* %__clz_c, align 4, !dbg !9268
  br label %for.cond1, !dbg !9268, !llvm.loop !9272

for.end7:                                         ; preds = %for.cond1
  %7 = load i32, i32* %__clz_c, align 4, !dbg !9261
  store i32 %7, i32* %shift, align 4, !dbg !9261
  br label %do.end, !dbg !9261

do.end:                                           ; preds = %for.end7
  %8 = load i32, i32* %shift, align 4, !dbg !9273
  %9 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !9274
  %shift8 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %9, i32 0, i32 0, !dbg !9275
  store i32 %8, i32* %shift8, align 8, !dbg !9276
  %10 = load i32, i32* %shift, align 4, !dbg !9277
  %cmp9 = icmp ugt i32 %10, 0, !dbg !9279
  br i1 %cmp9, label %if.then, label %if.end, !dbg !9280

if.then:                                          ; preds = %do.end
  %11 = load i64, i64* %d1.addr, align 8, !dbg !9281
  %12 = load i32, i32* %shift, align 4, !dbg !9283
  %sh_prom = zext i32 %12 to i64, !dbg !9284
  %shl10 = shl i64 %11, %sh_prom, !dbg !9284
  %13 = load i64, i64* %d0.addr, align 8, !dbg !9285
  %14 = load i32, i32* %shift, align 4, !dbg !9286
  %conv = zext i32 %14 to i64, !dbg !9286
  %sub = sub i64 64, %conv, !dbg !9287
  %shr = lshr i64 %13, %sub, !dbg !9288
  %or = or i64 %shl10, %shr, !dbg !9289
  store i64 %or, i64* %d1.addr, align 8, !dbg !9290
  %15 = load i32, i32* %shift, align 4, !dbg !9291
  %16 = load i64, i64* %d0.addr, align 8, !dbg !9292
  %sh_prom11 = zext i32 %15 to i64, !dbg !9292
  %shl12 = shl i64 %16, %sh_prom11, !dbg !9292
  store i64 %shl12, i64* %d0.addr, align 8, !dbg !9292
  br label %if.end, !dbg !9293

if.end:                                           ; preds = %if.then, %do.end
  %17 = load i64, i64* %d1.addr, align 8, !dbg !9294
  %18 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !9295
  %d113 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %18, i32 0, i32 1, !dbg !9296
  store i64 %17, i64* %d113, align 8, !dbg !9297
  %19 = load i64, i64* %d0.addr, align 8, !dbg !9298
  %20 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !9299
  %d014 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %20, i32 0, i32 2, !dbg !9300
  store i64 %19, i64* %d014, align 8, !dbg !9301
  %21 = load i64, i64* %d1.addr, align 8, !dbg !9302
  %22 = load i64, i64* %d0.addr, align 8, !dbg !9303
  %call = call i64 @mpn_invert_3by2(i64 %21, i64 %22), !dbg !9304
  %23 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !9305
  %di = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %23, i32 0, i32 3, !dbg !9306
  store i64 %call, i64* %di, align 8, !dbg !9307
  ret void, !dbg !9308
}

; Function Attrs: noinline nounwind uwtable
define internal void @mpn_div_qr_2_preinv(i64* %qp, i64* %rp, i64* %np, i64 %nn, %struct.gmp_div_inverse* %inv) #0 !dbg !9309 {
entry:
  %qp.addr = alloca i64*, align 8
  %rp.addr = alloca i64*, align 8
  %np.addr = alloca i64*, align 8
  %nn.addr = alloca i64, align 8
  %inv.addr = alloca %struct.gmp_div_inverse*, align 8
  %shift = alloca i32, align 4
  %i = alloca i64, align 8
  %d1 = alloca i64, align 8
  %d0 = alloca i64, align 8
  %di = alloca i64, align 8
  %r1 = alloca i64, align 8
  %r0 = alloca i64, align 8
  %tp = alloca i64*, align 8
  %n0 = alloca i64, align 8
  %q = alloca i64, align 8
  %_q0 = alloca i64, align 8
  %_t1 = alloca i64, align 8
  %_t0 = alloca i64, align 8
  %_mask = alloca i64, align 8
  %__x0 = alloca i64, align 8
  %__x1 = alloca i64, align 8
  %__x2 = alloca i64, align 8
  %__x3 = alloca i64, align 8
  %__ul = alloca i32, align 4
  %__vl = alloca i32, align 4
  %__uh = alloca i32, align 4
  %__vh = alloca i32, align 4
  %__u = alloca i64, align 8
  %__v = alloca i64, align 8
  %__x = alloca i64, align 8
  %__x48 = alloca i64, align 8
  %__x057 = alloca i64, align 8
  %__x158 = alloca i64, align 8
  %__x259 = alloca i64, align 8
  %__x360 = alloca i64, align 8
  %__ul61 = alloca i32, align 4
  %__vl62 = alloca i32, align 4
  %__uh63 = alloca i32, align 4
  %__vh64 = alloca i32, align 4
  %__u65 = alloca i64, align 8
  %__v66 = alloca i64, align 8
  %__x102 = alloca i64, align 8
  %__x116 = alloca i64, align 8
  %__x136 = alloca i64, align 8
  store i64* %qp, i64** %qp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %qp.addr, metadata !9312, metadata !DIExpression()), !dbg !9313
  store i64* %rp, i64** %rp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %rp.addr, metadata !9314, metadata !DIExpression()), !dbg !9315
  store i64* %np, i64** %np.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %np.addr, metadata !9316, metadata !DIExpression()), !dbg !9317
  store i64 %nn, i64* %nn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nn.addr, metadata !9318, metadata !DIExpression()), !dbg !9319
  store %struct.gmp_div_inverse* %inv, %struct.gmp_div_inverse** %inv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gmp_div_inverse** %inv.addr, metadata !9320, metadata !DIExpression()), !dbg !9321
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !9322, metadata !DIExpression()), !dbg !9323
  call void @llvm.dbg.declare(metadata i64* %i, metadata !9324, metadata !DIExpression()), !dbg !9325
  call void @llvm.dbg.declare(metadata i64* %d1, metadata !9326, metadata !DIExpression()), !dbg !9327
  call void @llvm.dbg.declare(metadata i64* %d0, metadata !9328, metadata !DIExpression()), !dbg !9329
  call void @llvm.dbg.declare(metadata i64* %di, metadata !9330, metadata !DIExpression()), !dbg !9331
  call void @llvm.dbg.declare(metadata i64* %r1, metadata !9332, metadata !DIExpression()), !dbg !9333
  call void @llvm.dbg.declare(metadata i64* %r0, metadata !9334, metadata !DIExpression()), !dbg !9335
  call void @llvm.dbg.declare(metadata i64** %tp, metadata !9336, metadata !DIExpression()), !dbg !9337
  %0 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !9338
  %shift1 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %0, i32 0, i32 0, !dbg !9339
  %1 = load i32, i32* %shift1, align 8, !dbg !9339
  store i32 %1, i32* %shift, align 4, !dbg !9340
  %2 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !9341
  %d12 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %2, i32 0, i32 1, !dbg !9342
  %3 = load i64, i64* %d12, align 8, !dbg !9342
  store i64 %3, i64* %d1, align 8, !dbg !9343
  %4 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !9344
  %d03 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %4, i32 0, i32 2, !dbg !9345
  %5 = load i64, i64* %d03, align 8, !dbg !9345
  store i64 %5, i64* %d0, align 8, !dbg !9346
  %6 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %inv.addr, align 8, !dbg !9347
  %di4 = getelementptr inbounds %struct.gmp_div_inverse, %struct.gmp_div_inverse* %6, i32 0, i32 3, !dbg !9348
  %7 = load i64, i64* %di4, align 8, !dbg !9348
  store i64 %7, i64* %di, align 8, !dbg !9349
  %8 = load i32, i32* %shift, align 4, !dbg !9350
  %cmp = icmp ugt i32 %8, 0, !dbg !9352
  br i1 %cmp, label %if.then, label %if.else, !dbg !9353

if.then:                                          ; preds = %entry
  %9 = load i64, i64* %nn.addr, align 8, !dbg !9354
  %call = call i64* @gmp_xalloc_limbs(i64 %9), !dbg !9356
  store i64* %call, i64** %tp, align 8, !dbg !9357
  %10 = load i64*, i64** %tp, align 8, !dbg !9358
  %11 = load i64*, i64** %np.addr, align 8, !dbg !9359
  %12 = load i64, i64* %nn.addr, align 8, !dbg !9360
  %13 = load i32, i32* %shift, align 4, !dbg !9361
  %call5 = call i64 @mpn_lshift(i64* %10, i64* %11, i64 %12, i32 %13), !dbg !9362
  store i64 %call5, i64* %r1, align 8, !dbg !9363
  %14 = load i64*, i64** %tp, align 8, !dbg !9364
  store i64* %14, i64** %np.addr, align 8, !dbg !9365
  br label %if.end, !dbg !9366

if.else:                                          ; preds = %entry
  store i64 0, i64* %r1, align 8, !dbg !9367
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %15 = load i64*, i64** %np.addr, align 8, !dbg !9368
  %16 = load i64, i64* %nn.addr, align 8, !dbg !9369
  %sub = sub nsw i64 %16, 1, !dbg !9370
  %arrayidx = getelementptr inbounds i64, i64* %15, i64 %sub, !dbg !9368
  %17 = load i64, i64* %arrayidx, align 8, !dbg !9368
  store i64 %17, i64* %r0, align 8, !dbg !9371
  %18 = load i64, i64* %nn.addr, align 8, !dbg !9372
  %sub6 = sub nsw i64 %18, 2, !dbg !9373
  store i64 %sub6, i64* %i, align 8, !dbg !9374
  br label %do.body, !dbg !9375

do.body:                                          ; preds = %do.cond, %if.end
  call void @llvm.dbg.declare(metadata i64* %n0, metadata !9376, metadata !DIExpression()), !dbg !9378
  call void @llvm.dbg.declare(metadata i64* %q, metadata !9379, metadata !DIExpression()), !dbg !9380
  %19 = load i64*, i64** %np.addr, align 8, !dbg !9381
  %20 = load i64, i64* %i, align 8, !dbg !9382
  %arrayidx7 = getelementptr inbounds i64, i64* %19, i64 %20, !dbg !9381
  %21 = load i64, i64* %arrayidx7, align 8, !dbg !9381
  store i64 %21, i64* %n0, align 8, !dbg !9383
  br label %do.body8, !dbg !9384

do.body8:                                         ; preds = %do.body
  call void @llvm.dbg.declare(metadata i64* %_q0, metadata !9385, metadata !DIExpression()), !dbg !9387
  call void @llvm.dbg.declare(metadata i64* %_t1, metadata !9388, metadata !DIExpression()), !dbg !9387
  call void @llvm.dbg.declare(metadata i64* %_t0, metadata !9389, metadata !DIExpression()), !dbg !9387
  call void @llvm.dbg.declare(metadata i64* %_mask, metadata !9390, metadata !DIExpression()), !dbg !9387
  br label %do.body9, !dbg !9387

do.body9:                                         ; preds = %do.body8
  call void @llvm.dbg.declare(metadata i64* %__x0, metadata !9391, metadata !DIExpression()), !dbg !9393
  call void @llvm.dbg.declare(metadata i64* %__x1, metadata !9394, metadata !DIExpression()), !dbg !9393
  call void @llvm.dbg.declare(metadata i64* %__x2, metadata !9395, metadata !DIExpression()), !dbg !9393
  call void @llvm.dbg.declare(metadata i64* %__x3, metadata !9396, metadata !DIExpression()), !dbg !9393
  call void @llvm.dbg.declare(metadata i32* %__ul, metadata !9397, metadata !DIExpression()), !dbg !9393
  call void @llvm.dbg.declare(metadata i32* %__vl, metadata !9398, metadata !DIExpression()), !dbg !9393
  call void @llvm.dbg.declare(metadata i32* %__uh, metadata !9399, metadata !DIExpression()), !dbg !9393
  call void @llvm.dbg.declare(metadata i32* %__vh, metadata !9400, metadata !DIExpression()), !dbg !9393
  call void @llvm.dbg.declare(metadata i64* %__u, metadata !9401, metadata !DIExpression()), !dbg !9393
  %22 = load i64, i64* %r1, align 8, !dbg !9393
  store i64 %22, i64* %__u, align 8, !dbg !9393
  call void @llvm.dbg.declare(metadata i64* %__v, metadata !9402, metadata !DIExpression()), !dbg !9393
  %23 = load i64, i64* %di, align 8, !dbg !9393
  store i64 %23, i64* %__v, align 8, !dbg !9393
  %24 = load i64, i64* %__u, align 8, !dbg !9393
  %and = and i64 %24, 4294967295, !dbg !9393
  %conv = trunc i64 %and to i32, !dbg !9393
  store i32 %conv, i32* %__ul, align 4, !dbg !9393
  %25 = load i64, i64* %__u, align 8, !dbg !9393
  %shr = lshr i64 %25, 32, !dbg !9393
  %conv10 = trunc i64 %shr to i32, !dbg !9393
  store i32 %conv10, i32* %__uh, align 4, !dbg !9393
  %26 = load i64, i64* %__v, align 8, !dbg !9393
  %and11 = and i64 %26, 4294967295, !dbg !9393
  %conv12 = trunc i64 %and11 to i32, !dbg !9393
  store i32 %conv12, i32* %__vl, align 4, !dbg !9393
  %27 = load i64, i64* %__v, align 8, !dbg !9393
  %shr13 = lshr i64 %27, 32, !dbg !9393
  %conv14 = trunc i64 %shr13 to i32, !dbg !9393
  store i32 %conv14, i32* %__vh, align 4, !dbg !9393
  %28 = load i32, i32* %__ul, align 4, !dbg !9393
  %conv15 = zext i32 %28 to i64, !dbg !9393
  %29 = load i32, i32* %__vl, align 4, !dbg !9393
  %conv16 = zext i32 %29 to i64, !dbg !9393
  %mul = mul i64 %conv15, %conv16, !dbg !9393
  store i64 %mul, i64* %__x0, align 8, !dbg !9393
  %30 = load i32, i32* %__ul, align 4, !dbg !9393
  %conv17 = zext i32 %30 to i64, !dbg !9393
  %31 = load i32, i32* %__vh, align 4, !dbg !9393
  %conv18 = zext i32 %31 to i64, !dbg !9393
  %mul19 = mul i64 %conv17, %conv18, !dbg !9393
  store i64 %mul19, i64* %__x1, align 8, !dbg !9393
  %32 = load i32, i32* %__uh, align 4, !dbg !9393
  %conv20 = zext i32 %32 to i64, !dbg !9393
  %33 = load i32, i32* %__vl, align 4, !dbg !9393
  %conv21 = zext i32 %33 to i64, !dbg !9393
  %mul22 = mul i64 %conv20, %conv21, !dbg !9393
  store i64 %mul22, i64* %__x2, align 8, !dbg !9393
  %34 = load i32, i32* %__uh, align 4, !dbg !9393
  %conv23 = zext i32 %34 to i64, !dbg !9393
  %35 = load i32, i32* %__vh, align 4, !dbg !9393
  %conv24 = zext i32 %35 to i64, !dbg !9393
  %mul25 = mul i64 %conv23, %conv24, !dbg !9393
  store i64 %mul25, i64* %__x3, align 8, !dbg !9393
  %36 = load i64, i64* %__x0, align 8, !dbg !9393
  %shr26 = lshr i64 %36, 32, !dbg !9393
  %37 = load i64, i64* %__x1, align 8, !dbg !9393
  %add = add i64 %37, %shr26, !dbg !9393
  store i64 %add, i64* %__x1, align 8, !dbg !9393
  %38 = load i64, i64* %__x2, align 8, !dbg !9393
  %39 = load i64, i64* %__x1, align 8, !dbg !9393
  %add27 = add i64 %39, %38, !dbg !9393
  store i64 %add27, i64* %__x1, align 8, !dbg !9393
  %40 = load i64, i64* %__x1, align 8, !dbg !9403
  %41 = load i64, i64* %__x2, align 8, !dbg !9403
  %cmp28 = icmp ult i64 %40, %41, !dbg !9403
  br i1 %cmp28, label %if.then30, label %if.end32, !dbg !9393

if.then30:                                        ; preds = %do.body9
  %42 = load i64, i64* %__x3, align 8, !dbg !9403
  %add31 = add i64 %42, 4294967296, !dbg !9403
  store i64 %add31, i64* %__x3, align 8, !dbg !9403
  br label %if.end32, !dbg !9403

if.end32:                                         ; preds = %if.then30, %do.body9
  %43 = load i64, i64* %__x3, align 8, !dbg !9393
  %44 = load i64, i64* %__x1, align 8, !dbg !9393
  %shr33 = lshr i64 %44, 32, !dbg !9393
  %add34 = add i64 %43, %shr33, !dbg !9393
  store i64 %add34, i64* %q, align 8, !dbg !9393
  %45 = load i64, i64* %__x1, align 8, !dbg !9393
  %shl = shl i64 %45, 32, !dbg !9393
  %46 = load i64, i64* %__x0, align 8, !dbg !9393
  %and35 = and i64 %46, 4294967295, !dbg !9393
  %add36 = add i64 %shl, %and35, !dbg !9393
  store i64 %add36, i64* %_q0, align 8, !dbg !9393
  br label %do.end, !dbg !9393

do.end:                                           ; preds = %if.end32
  br label %do.body37, !dbg !9387

do.body37:                                        ; preds = %do.end
  call void @llvm.dbg.declare(metadata i64* %__x, metadata !9405, metadata !DIExpression()), !dbg !9407
  %47 = load i64, i64* %_q0, align 8, !dbg !9407
  %48 = load i64, i64* %r0, align 8, !dbg !9407
  %add38 = add i64 %47, %48, !dbg !9407
  store i64 %add38, i64* %__x, align 8, !dbg !9407
  %49 = load i64, i64* %q, align 8, !dbg !9407
  %50 = load i64, i64* %r1, align 8, !dbg !9407
  %add39 = add i64 %49, %50, !dbg !9407
  %51 = load i64, i64* %__x, align 8, !dbg !9407
  %52 = load i64, i64* %_q0, align 8, !dbg !9407
  %cmp40 = icmp ult i64 %51, %52, !dbg !9407
  %conv41 = zext i1 %cmp40 to i32, !dbg !9407
  %conv42 = sext i32 %conv41 to i64, !dbg !9407
  %add43 = add i64 %add39, %conv42, !dbg !9407
  store i64 %add43, i64* %q, align 8, !dbg !9407
  %53 = load i64, i64* %__x, align 8, !dbg !9407
  store i64 %53, i64* %_q0, align 8, !dbg !9407
  br label %do.end44, !dbg !9407

do.end44:                                         ; preds = %do.body37
  %54 = load i64, i64* %r0, align 8, !dbg !9387
  %55 = load i64, i64* %d1, align 8, !dbg !9387
  %56 = load i64, i64* %q, align 8, !dbg !9387
  %mul45 = mul i64 %55, %56, !dbg !9387
  %sub46 = sub i64 %54, %mul45, !dbg !9387
  store i64 %sub46, i64* %r1, align 8, !dbg !9387
  br label %do.body47, !dbg !9387

do.body47:                                        ; preds = %do.end44
  call void @llvm.dbg.declare(metadata i64* %__x48, metadata !9408, metadata !DIExpression()), !dbg !9410
  %57 = load i64, i64* %n0, align 8, !dbg !9410
  %58 = load i64, i64* %d0, align 8, !dbg !9410
  %sub49 = sub i64 %57, %58, !dbg !9410
  store i64 %sub49, i64* %__x48, align 8, !dbg !9410
  %59 = load i64, i64* %r1, align 8, !dbg !9410
  %60 = load i64, i64* %d1, align 8, !dbg !9410
  %sub50 = sub i64 %59, %60, !dbg !9410
  %61 = load i64, i64* %n0, align 8, !dbg !9410
  %62 = load i64, i64* %d0, align 8, !dbg !9410
  %cmp51 = icmp ult i64 %61, %62, !dbg !9410
  %conv52 = zext i1 %cmp51 to i32, !dbg !9410
  %conv53 = sext i32 %conv52 to i64, !dbg !9410
  %sub54 = sub i64 %sub50, %conv53, !dbg !9410
  store i64 %sub54, i64* %r1, align 8, !dbg !9410
  %63 = load i64, i64* %__x48, align 8, !dbg !9410
  store i64 %63, i64* %r0, align 8, !dbg !9410
  br label %do.end55, !dbg !9410

do.end55:                                         ; preds = %do.body47
  br label %do.body56, !dbg !9387

do.body56:                                        ; preds = %do.end55
  call void @llvm.dbg.declare(metadata i64* %__x057, metadata !9411, metadata !DIExpression()), !dbg !9413
  call void @llvm.dbg.declare(metadata i64* %__x158, metadata !9414, metadata !DIExpression()), !dbg !9413
  call void @llvm.dbg.declare(metadata i64* %__x259, metadata !9415, metadata !DIExpression()), !dbg !9413
  call void @llvm.dbg.declare(metadata i64* %__x360, metadata !9416, metadata !DIExpression()), !dbg !9413
  call void @llvm.dbg.declare(metadata i32* %__ul61, metadata !9417, metadata !DIExpression()), !dbg !9413
  call void @llvm.dbg.declare(metadata i32* %__vl62, metadata !9418, metadata !DIExpression()), !dbg !9413
  call void @llvm.dbg.declare(metadata i32* %__uh63, metadata !9419, metadata !DIExpression()), !dbg !9413
  call void @llvm.dbg.declare(metadata i32* %__vh64, metadata !9420, metadata !DIExpression()), !dbg !9413
  call void @llvm.dbg.declare(metadata i64* %__u65, metadata !9421, metadata !DIExpression()), !dbg !9413
  %64 = load i64, i64* %d0, align 8, !dbg !9413
  store i64 %64, i64* %__u65, align 8, !dbg !9413
  call void @llvm.dbg.declare(metadata i64* %__v66, metadata !9422, metadata !DIExpression()), !dbg !9413
  %65 = load i64, i64* %q, align 8, !dbg !9413
  store i64 %65, i64* %__v66, align 8, !dbg !9413
  %66 = load i64, i64* %__u65, align 8, !dbg !9413
  %and67 = and i64 %66, 4294967295, !dbg !9413
  %conv68 = trunc i64 %and67 to i32, !dbg !9413
  store i32 %conv68, i32* %__ul61, align 4, !dbg !9413
  %67 = load i64, i64* %__u65, align 8, !dbg !9413
  %shr69 = lshr i64 %67, 32, !dbg !9413
  %conv70 = trunc i64 %shr69 to i32, !dbg !9413
  store i32 %conv70, i32* %__uh63, align 4, !dbg !9413
  %68 = load i64, i64* %__v66, align 8, !dbg !9413
  %and71 = and i64 %68, 4294967295, !dbg !9413
  %conv72 = trunc i64 %and71 to i32, !dbg !9413
  store i32 %conv72, i32* %__vl62, align 4, !dbg !9413
  %69 = load i64, i64* %__v66, align 8, !dbg !9413
  %shr73 = lshr i64 %69, 32, !dbg !9413
  %conv74 = trunc i64 %shr73 to i32, !dbg !9413
  store i32 %conv74, i32* %__vh64, align 4, !dbg !9413
  %70 = load i32, i32* %__ul61, align 4, !dbg !9413
  %conv75 = zext i32 %70 to i64, !dbg !9413
  %71 = load i32, i32* %__vl62, align 4, !dbg !9413
  %conv76 = zext i32 %71 to i64, !dbg !9413
  %mul77 = mul i64 %conv75, %conv76, !dbg !9413
  store i64 %mul77, i64* %__x057, align 8, !dbg !9413
  %72 = load i32, i32* %__ul61, align 4, !dbg !9413
  %conv78 = zext i32 %72 to i64, !dbg !9413
  %73 = load i32, i32* %__vh64, align 4, !dbg !9413
  %conv79 = zext i32 %73 to i64, !dbg !9413
  %mul80 = mul i64 %conv78, %conv79, !dbg !9413
  store i64 %mul80, i64* %__x158, align 8, !dbg !9413
  %74 = load i32, i32* %__uh63, align 4, !dbg !9413
  %conv81 = zext i32 %74 to i64, !dbg !9413
  %75 = load i32, i32* %__vl62, align 4, !dbg !9413
  %conv82 = zext i32 %75 to i64, !dbg !9413
  %mul83 = mul i64 %conv81, %conv82, !dbg !9413
  store i64 %mul83, i64* %__x259, align 8, !dbg !9413
  %76 = load i32, i32* %__uh63, align 4, !dbg !9413
  %conv84 = zext i32 %76 to i64, !dbg !9413
  %77 = load i32, i32* %__vh64, align 4, !dbg !9413
  %conv85 = zext i32 %77 to i64, !dbg !9413
  %mul86 = mul i64 %conv84, %conv85, !dbg !9413
  store i64 %mul86, i64* %__x360, align 8, !dbg !9413
  %78 = load i64, i64* %__x057, align 8, !dbg !9413
  %shr87 = lshr i64 %78, 32, !dbg !9413
  %79 = load i64, i64* %__x158, align 8, !dbg !9413
  %add88 = add i64 %79, %shr87, !dbg !9413
  store i64 %add88, i64* %__x158, align 8, !dbg !9413
  %80 = load i64, i64* %__x259, align 8, !dbg !9413
  %81 = load i64, i64* %__x158, align 8, !dbg !9413
  %add89 = add i64 %81, %80, !dbg !9413
  store i64 %add89, i64* %__x158, align 8, !dbg !9413
  %82 = load i64, i64* %__x158, align 8, !dbg !9423
  %83 = load i64, i64* %__x259, align 8, !dbg !9423
  %cmp90 = icmp ult i64 %82, %83, !dbg !9423
  br i1 %cmp90, label %if.then92, label %if.end94, !dbg !9413

if.then92:                                        ; preds = %do.body56
  %84 = load i64, i64* %__x360, align 8, !dbg !9423
  %add93 = add i64 %84, 4294967296, !dbg !9423
  store i64 %add93, i64* %__x360, align 8, !dbg !9423
  br label %if.end94, !dbg !9423

if.end94:                                         ; preds = %if.then92, %do.body56
  %85 = load i64, i64* %__x360, align 8, !dbg !9413
  %86 = load i64, i64* %__x158, align 8, !dbg !9413
  %shr95 = lshr i64 %86, 32, !dbg !9413
  %add96 = add i64 %85, %shr95, !dbg !9413
  store i64 %add96, i64* %_t1, align 8, !dbg !9413
  %87 = load i64, i64* %__x158, align 8, !dbg !9413
  %shl97 = shl i64 %87, 32, !dbg !9413
  %88 = load i64, i64* %__x057, align 8, !dbg !9413
  %and98 = and i64 %88, 4294967295, !dbg !9413
  %add99 = add i64 %shl97, %and98, !dbg !9413
  store i64 %add99, i64* %_t0, align 8, !dbg !9413
  br label %do.end100, !dbg !9413

do.end100:                                        ; preds = %if.end94
  br label %do.body101, !dbg !9387

do.body101:                                       ; preds = %do.end100
  call void @llvm.dbg.declare(metadata i64* %__x102, metadata !9425, metadata !DIExpression()), !dbg !9427
  %89 = load i64, i64* %r0, align 8, !dbg !9427
  %90 = load i64, i64* %_t0, align 8, !dbg !9427
  %sub103 = sub i64 %89, %90, !dbg !9427
  store i64 %sub103, i64* %__x102, align 8, !dbg !9427
  %91 = load i64, i64* %r1, align 8, !dbg !9427
  %92 = load i64, i64* %_t1, align 8, !dbg !9427
  %sub104 = sub i64 %91, %92, !dbg !9427
  %93 = load i64, i64* %r0, align 8, !dbg !9427
  %94 = load i64, i64* %_t0, align 8, !dbg !9427
  %cmp105 = icmp ult i64 %93, %94, !dbg !9427
  %conv106 = zext i1 %cmp105 to i32, !dbg !9427
  %conv107 = sext i32 %conv106 to i64, !dbg !9427
  %sub108 = sub i64 %sub104, %conv107, !dbg !9427
  store i64 %sub108, i64* %r1, align 8, !dbg !9427
  %95 = load i64, i64* %__x102, align 8, !dbg !9427
  store i64 %95, i64* %r0, align 8, !dbg !9427
  br label %do.end109, !dbg !9427

do.end109:                                        ; preds = %do.body101
  %96 = load i64, i64* %q, align 8, !dbg !9387
  %inc = add i64 %96, 1, !dbg !9387
  store i64 %inc, i64* %q, align 8, !dbg !9387
  %97 = load i64, i64* %r1, align 8, !dbg !9387
  %98 = load i64, i64* %_q0, align 8, !dbg !9387
  %cmp110 = icmp uge i64 %97, %98, !dbg !9387
  %conv111 = zext i1 %cmp110 to i32, !dbg !9387
  %conv112 = sext i32 %conv111 to i64, !dbg !9387
  %sub113 = sub i64 0, %conv112, !dbg !9387
  store i64 %sub113, i64* %_mask, align 8, !dbg !9387
  %99 = load i64, i64* %_mask, align 8, !dbg !9387
  %100 = load i64, i64* %q, align 8, !dbg !9387
  %add114 = add i64 %100, %99, !dbg !9387
  store i64 %add114, i64* %q, align 8, !dbg !9387
  br label %do.body115, !dbg !9387

do.body115:                                       ; preds = %do.end109
  call void @llvm.dbg.declare(metadata i64* %__x116, metadata !9428, metadata !DIExpression()), !dbg !9430
  %101 = load i64, i64* %r0, align 8, !dbg !9430
  %102 = load i64, i64* %_mask, align 8, !dbg !9430
  %103 = load i64, i64* %d0, align 8, !dbg !9430
  %and117 = and i64 %102, %103, !dbg !9430
  %add118 = add i64 %101, %and117, !dbg !9430
  store i64 %add118, i64* %__x116, align 8, !dbg !9430
  %104 = load i64, i64* %r1, align 8, !dbg !9430
  %105 = load i64, i64* %_mask, align 8, !dbg !9430
  %106 = load i64, i64* %d1, align 8, !dbg !9430
  %and119 = and i64 %105, %106, !dbg !9430
  %add120 = add i64 %104, %and119, !dbg !9430
  %107 = load i64, i64* %__x116, align 8, !dbg !9430
  %108 = load i64, i64* %r0, align 8, !dbg !9430
  %cmp121 = icmp ult i64 %107, %108, !dbg !9430
  %conv122 = zext i1 %cmp121 to i32, !dbg !9430
  %conv123 = sext i32 %conv122 to i64, !dbg !9430
  %add124 = add i64 %add120, %conv123, !dbg !9430
  store i64 %add124, i64* %r1, align 8, !dbg !9430
  %109 = load i64, i64* %__x116, align 8, !dbg !9430
  store i64 %109, i64* %r0, align 8, !dbg !9430
  br label %do.end125, !dbg !9430

do.end125:                                        ; preds = %do.body115
  %110 = load i64, i64* %r1, align 8, !dbg !9431
  %111 = load i64, i64* %d1, align 8, !dbg !9431
  %cmp126 = icmp uge i64 %110, %111, !dbg !9431
  br i1 %cmp126, label %if.then128, label %if.end145, !dbg !9387

if.then128:                                       ; preds = %do.end125
  %112 = load i64, i64* %r1, align 8, !dbg !9433
  %113 = load i64, i64* %d1, align 8, !dbg !9433
  %cmp129 = icmp ugt i64 %112, %113, !dbg !9433
  br i1 %cmp129, label %if.then133, label %lor.lhs.false, !dbg !9433

lor.lhs.false:                                    ; preds = %if.then128
  %114 = load i64, i64* %r0, align 8, !dbg !9433
  %115 = load i64, i64* %d0, align 8, !dbg !9433
  %cmp131 = icmp uge i64 %114, %115, !dbg !9433
  br i1 %cmp131, label %if.then133, label %if.end144, !dbg !9436

if.then133:                                       ; preds = %lor.lhs.false, %if.then128
  %116 = load i64, i64* %q, align 8, !dbg !9437
  %inc134 = add i64 %116, 1, !dbg !9437
  store i64 %inc134, i64* %q, align 8, !dbg !9437
  br label %do.body135, !dbg !9437

do.body135:                                       ; preds = %if.then133
  call void @llvm.dbg.declare(metadata i64* %__x136, metadata !9439, metadata !DIExpression()), !dbg !9441
  %117 = load i64, i64* %r0, align 8, !dbg !9441
  %118 = load i64, i64* %d0, align 8, !dbg !9441
  %sub137 = sub i64 %117, %118, !dbg !9441
  store i64 %sub137, i64* %__x136, align 8, !dbg !9441
  %119 = load i64, i64* %r1, align 8, !dbg !9441
  %120 = load i64, i64* %d1, align 8, !dbg !9441
  %sub138 = sub i64 %119, %120, !dbg !9441
  %121 = load i64, i64* %r0, align 8, !dbg !9441
  %122 = load i64, i64* %d0, align 8, !dbg !9441
  %cmp139 = icmp ult i64 %121, %122, !dbg !9441
  %conv140 = zext i1 %cmp139 to i32, !dbg !9441
  %conv141 = sext i32 %conv140 to i64, !dbg !9441
  %sub142 = sub i64 %sub138, %conv141, !dbg !9441
  store i64 %sub142, i64* %r1, align 8, !dbg !9441
  %123 = load i64, i64* %__x136, align 8, !dbg !9441
  store i64 %123, i64* %r0, align 8, !dbg !9441
  br label %do.end143, !dbg !9441

do.end143:                                        ; preds = %do.body135
  br label %if.end144, !dbg !9437

if.end144:                                        ; preds = %do.end143, %lor.lhs.false
  br label %if.end145, !dbg !9436

if.end145:                                        ; preds = %if.end144, %do.end125
  br label %do.end146, !dbg !9387

do.end146:                                        ; preds = %if.end145
  %124 = load i64*, i64** %qp.addr, align 8, !dbg !9442
  %tobool = icmp ne i64* %124, null, !dbg !9442
  br i1 %tobool, label %if.then147, label %if.end149, !dbg !9444

if.then147:                                       ; preds = %do.end146
  %125 = load i64, i64* %q, align 8, !dbg !9445
  %126 = load i64*, i64** %qp.addr, align 8, !dbg !9446
  %127 = load i64, i64* %i, align 8, !dbg !9447
  %arrayidx148 = getelementptr inbounds i64, i64* %126, i64 %127, !dbg !9446
  store i64 %125, i64* %arrayidx148, align 8, !dbg !9448
  br label %if.end149, !dbg !9446

if.end149:                                        ; preds = %if.then147, %do.end146
  br label %do.cond, !dbg !9449

do.cond:                                          ; preds = %if.end149
  %128 = load i64, i64* %i, align 8, !dbg !9450
  %dec = add nsw i64 %128, -1, !dbg !9450
  store i64 %dec, i64* %i, align 8, !dbg !9450
  %cmp150 = icmp sge i64 %dec, 0, !dbg !9451
  br i1 %cmp150, label %do.body, label %do.end152, !dbg !9449, !llvm.loop !9452

do.end152:                                        ; preds = %do.cond
  %129 = load i32, i32* %shift, align 4, !dbg !9454
  %cmp153 = icmp ugt i32 %129, 0, !dbg !9456
  br i1 %cmp153, label %if.then155, label %if.end162, !dbg !9457

if.then155:                                       ; preds = %do.end152
  %130 = load i64, i64* %r0, align 8, !dbg !9458
  %131 = load i32, i32* %shift, align 4, !dbg !9460
  %sh_prom = zext i32 %131 to i64, !dbg !9461
  %shr156 = lshr i64 %130, %sh_prom, !dbg !9461
  %132 = load i64, i64* %r1, align 8, !dbg !9462
  %133 = load i32, i32* %shift, align 4, !dbg !9463
  %conv157 = zext i32 %133 to i64, !dbg !9463
  %sub158 = sub i64 64, %conv157, !dbg !9464
  %shl159 = shl i64 %132, %sub158, !dbg !9465
  %or = or i64 %shr156, %shl159, !dbg !9466
  store i64 %or, i64* %r0, align 8, !dbg !9467
  %134 = load i32, i32* %shift, align 4, !dbg !9468
  %135 = load i64, i64* %r1, align 8, !dbg !9469
  %sh_prom160 = zext i32 %134 to i64, !dbg !9469
  %shr161 = lshr i64 %135, %sh_prom160, !dbg !9469
  store i64 %shr161, i64* %r1, align 8, !dbg !9469
  %136 = load void (i8*, i64)*, void (i8*, i64)** @gmp_free_func, align 8, !dbg !9470
  %137 = load i64*, i64** %tp, align 8, !dbg !9470
  %138 = bitcast i64* %137 to i8*, !dbg !9470
  call void %136(i8* %138, i64 0), !dbg !9470
  br label %if.end162, !dbg !9471

if.end162:                                        ; preds = %if.then155, %do.end152
  %139 = load i64, i64* %r1, align 8, !dbg !9472
  %140 = load i64*, i64** %rp.addr, align 8, !dbg !9473
  %arrayidx163 = getelementptr inbounds i64, i64* %140, i64 1, !dbg !9473
  store i64 %139, i64* %arrayidx163, align 8, !dbg !9474
  %141 = load i64, i64* %r0, align 8, !dbg !9475
  %142 = load i64*, i64** %rp.addr, align 8, !dbg !9476
  %arrayidx164 = getelementptr inbounds i64, i64* %142, i64 0, !dbg !9476
  store i64 %141, i64* %arrayidx164, align 8, !dbg !9477
  ret void, !dbg !9478
}

; Function Attrs: noinline nounwind uwtable
define internal void @mpn_div_qr_pi1(i64* %qp, i64* %np, i64 %nn, i64 %n1, i64* %dp, i64 %dn, i64 %dinv) #0 !dbg !9479 {
entry:
  %qp.addr = alloca i64*, align 8
  %np.addr = alloca i64*, align 8
  %nn.addr = alloca i64, align 8
  %n1.addr = alloca i64, align 8
  %dp.addr = alloca i64*, align 8
  %dn.addr = alloca i64, align 8
  %dinv.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %d1 = alloca i64, align 8
  %d0 = alloca i64, align 8
  %cy = alloca i64, align 8
  %cy1 = alloca i64, align 8
  %q = alloca i64, align 8
  %n0 = alloca i64, align 8
  %_q0 = alloca i64, align 8
  %_t1 = alloca i64, align 8
  %_t0 = alloca i64, align 8
  %_mask = alloca i64, align 8
  %__x0 = alloca i64, align 8
  %__x1 = alloca i64, align 8
  %__x2 = alloca i64, align 8
  %__x3 = alloca i64, align 8
  %__ul = alloca i32, align 4
  %__vl = alloca i32, align 4
  %__uh = alloca i32, align 4
  %__vh = alloca i32, align 4
  %__u = alloca i64, align 8
  %__v = alloca i64, align 8
  %__x = alloca i64, align 8
  %__x50 = alloca i64, align 8
  %__x065 = alloca i64, align 8
  %__x166 = alloca i64, align 8
  %__x267 = alloca i64, align 8
  %__x368 = alloca i64, align 8
  %__ul69 = alloca i32, align 4
  %__vl70 = alloca i32, align 4
  %__uh71 = alloca i32, align 4
  %__vh72 = alloca i32, align 4
  %__u73 = alloca i64, align 8
  %__v74 = alloca i64, align 8
  %__x110 = alloca i64, align 8
  %__x124 = alloca i64, align 8
  %__x144 = alloca i64, align 8
  store i64* %qp, i64** %qp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %qp.addr, metadata !9482, metadata !DIExpression()), !dbg !9483
  store i64* %np, i64** %np.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %np.addr, metadata !9484, metadata !DIExpression()), !dbg !9485
  store i64 %nn, i64* %nn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nn.addr, metadata !9486, metadata !DIExpression()), !dbg !9487
  store i64 %n1, i64* %n1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n1.addr, metadata !9488, metadata !DIExpression()), !dbg !9489
  store i64* %dp, i64** %dp.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %dp.addr, metadata !9490, metadata !DIExpression()), !dbg !9491
  store i64 %dn, i64* %dn.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %dn.addr, metadata !9492, metadata !DIExpression()), !dbg !9493
  store i64 %dinv, i64* %dinv.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %dinv.addr, metadata !9494, metadata !DIExpression()), !dbg !9495
  call void @llvm.dbg.declare(metadata i64* %i, metadata !9496, metadata !DIExpression()), !dbg !9497
  call void @llvm.dbg.declare(metadata i64* %d1, metadata !9498, metadata !DIExpression()), !dbg !9499
  call void @llvm.dbg.declare(metadata i64* %d0, metadata !9500, metadata !DIExpression()), !dbg !9501
  call void @llvm.dbg.declare(metadata i64* %cy, metadata !9502, metadata !DIExpression()), !dbg !9503
  call void @llvm.dbg.declare(metadata i64* %cy1, metadata !9504, metadata !DIExpression()), !dbg !9505
  call void @llvm.dbg.declare(metadata i64* %q, metadata !9506, metadata !DIExpression()), !dbg !9507
  %0 = load i64*, i64** %dp.addr, align 8, !dbg !9508
  %1 = load i64, i64* %dn.addr, align 8, !dbg !9509
  %sub = sub nsw i64 %1, 1, !dbg !9510
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 %sub, !dbg !9508
  %2 = load i64, i64* %arrayidx, align 8, !dbg !9508
  store i64 %2, i64* %d1, align 8, !dbg !9511
  %3 = load i64*, i64** %dp.addr, align 8, !dbg !9512
  %4 = load i64, i64* %dn.addr, align 8, !dbg !9513
  %sub1 = sub nsw i64 %4, 2, !dbg !9514
  %arrayidx2 = getelementptr inbounds i64, i64* %3, i64 %sub1, !dbg !9512
  %5 = load i64, i64* %arrayidx2, align 8, !dbg !9512
  store i64 %5, i64* %d0, align 8, !dbg !9515
  %6 = load i64, i64* %nn.addr, align 8, !dbg !9516
  %7 = load i64, i64* %dn.addr, align 8, !dbg !9517
  %sub3 = sub nsw i64 %6, %7, !dbg !9518
  store i64 %sub3, i64* %i, align 8, !dbg !9519
  br label %do.body, !dbg !9520

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata i64* %n0, metadata !9521, metadata !DIExpression()), !dbg !9523
  %8 = load i64*, i64** %np.addr, align 8, !dbg !9524
  %9 = load i64, i64* %dn.addr, align 8, !dbg !9525
  %sub4 = sub nsw i64 %9, 1, !dbg !9526
  %10 = load i64, i64* %i, align 8, !dbg !9527
  %add = add nsw i64 %sub4, %10, !dbg !9528
  %arrayidx5 = getelementptr inbounds i64, i64* %8, i64 %add, !dbg !9524
  %11 = load i64, i64* %arrayidx5, align 8, !dbg !9524
  store i64 %11, i64* %n0, align 8, !dbg !9523
  %12 = load i64, i64* %n1.addr, align 8, !dbg !9529
  %13 = load i64, i64* %d1, align 8, !dbg !9531
  %cmp = icmp eq i64 %12, %13, !dbg !9532
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !9533

land.lhs.true:                                    ; preds = %do.body
  %14 = load i64, i64* %n0, align 8, !dbg !9534
  %15 = load i64, i64* %d0, align 8, !dbg !9535
  %cmp6 = icmp eq i64 %14, %15, !dbg !9536
  br i1 %cmp6, label %if.then, label %if.else, !dbg !9537

if.then:                                          ; preds = %land.lhs.true
  store i64 -1, i64* %q, align 8, !dbg !9538
  %16 = load i64*, i64** %np.addr, align 8, !dbg !9540
  %17 = load i64, i64* %i, align 8, !dbg !9541
  %add.ptr = getelementptr inbounds i64, i64* %16, i64 %17, !dbg !9542
  %18 = load i64*, i64** %dp.addr, align 8, !dbg !9543
  %19 = load i64, i64* %dn.addr, align 8, !dbg !9544
  %20 = load i64, i64* %q, align 8, !dbg !9545
  %call = call i64 @mpn_submul_1(i64* %add.ptr, i64* %18, i64 %19, i64 %20), !dbg !9546
  %21 = load i64*, i64** %np.addr, align 8, !dbg !9547
  %22 = load i64, i64* %dn.addr, align 8, !dbg !9548
  %sub7 = sub nsw i64 %22, 1, !dbg !9549
  %23 = load i64, i64* %i, align 8, !dbg !9550
  %add8 = add nsw i64 %sub7, %23, !dbg !9551
  %arrayidx9 = getelementptr inbounds i64, i64* %21, i64 %add8, !dbg !9547
  %24 = load i64, i64* %arrayidx9, align 8, !dbg !9547
  store i64 %24, i64* %n1.addr, align 8, !dbg !9552
  br label %if.end179, !dbg !9553

if.else:                                          ; preds = %land.lhs.true, %do.body
  br label %do.body10, !dbg !9554

do.body10:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i64* %_q0, metadata !9556, metadata !DIExpression()), !dbg !9558
  call void @llvm.dbg.declare(metadata i64* %_t1, metadata !9559, metadata !DIExpression()), !dbg !9558
  call void @llvm.dbg.declare(metadata i64* %_t0, metadata !9560, metadata !DIExpression()), !dbg !9558
  call void @llvm.dbg.declare(metadata i64* %_mask, metadata !9561, metadata !DIExpression()), !dbg !9558
  br label %do.body11, !dbg !9558

do.body11:                                        ; preds = %do.body10
  call void @llvm.dbg.declare(metadata i64* %__x0, metadata !9562, metadata !DIExpression()), !dbg !9564
  call void @llvm.dbg.declare(metadata i64* %__x1, metadata !9565, metadata !DIExpression()), !dbg !9564
  call void @llvm.dbg.declare(metadata i64* %__x2, metadata !9566, metadata !DIExpression()), !dbg !9564
  call void @llvm.dbg.declare(metadata i64* %__x3, metadata !9567, metadata !DIExpression()), !dbg !9564
  call void @llvm.dbg.declare(metadata i32* %__ul, metadata !9568, metadata !DIExpression()), !dbg !9564
  call void @llvm.dbg.declare(metadata i32* %__vl, metadata !9569, metadata !DIExpression()), !dbg !9564
  call void @llvm.dbg.declare(metadata i32* %__uh, metadata !9570, metadata !DIExpression()), !dbg !9564
  call void @llvm.dbg.declare(metadata i32* %__vh, metadata !9571, metadata !DIExpression()), !dbg !9564
  call void @llvm.dbg.declare(metadata i64* %__u, metadata !9572, metadata !DIExpression()), !dbg !9564
  %25 = load i64, i64* %n1.addr, align 8, !dbg !9564
  store i64 %25, i64* %__u, align 8, !dbg !9564
  call void @llvm.dbg.declare(metadata i64* %__v, metadata !9573, metadata !DIExpression()), !dbg !9564
  %26 = load i64, i64* %dinv.addr, align 8, !dbg !9564
  store i64 %26, i64* %__v, align 8, !dbg !9564
  %27 = load i64, i64* %__u, align 8, !dbg !9564
  %and = and i64 %27, 4294967295, !dbg !9564
  %conv = trunc i64 %and to i32, !dbg !9564
  store i32 %conv, i32* %__ul, align 4, !dbg !9564
  %28 = load i64, i64* %__u, align 8, !dbg !9564
  %shr = lshr i64 %28, 32, !dbg !9564
  %conv12 = trunc i64 %shr to i32, !dbg !9564
  store i32 %conv12, i32* %__uh, align 4, !dbg !9564
  %29 = load i64, i64* %__v, align 8, !dbg !9564
  %and13 = and i64 %29, 4294967295, !dbg !9564
  %conv14 = trunc i64 %and13 to i32, !dbg !9564
  store i32 %conv14, i32* %__vl, align 4, !dbg !9564
  %30 = load i64, i64* %__v, align 8, !dbg !9564
  %shr15 = lshr i64 %30, 32, !dbg !9564
  %conv16 = trunc i64 %shr15 to i32, !dbg !9564
  store i32 %conv16, i32* %__vh, align 4, !dbg !9564
  %31 = load i32, i32* %__ul, align 4, !dbg !9564
  %conv17 = zext i32 %31 to i64, !dbg !9564
  %32 = load i32, i32* %__vl, align 4, !dbg !9564
  %conv18 = zext i32 %32 to i64, !dbg !9564
  %mul = mul i64 %conv17, %conv18, !dbg !9564
  store i64 %mul, i64* %__x0, align 8, !dbg !9564
  %33 = load i32, i32* %__ul, align 4, !dbg !9564
  %conv19 = zext i32 %33 to i64, !dbg !9564
  %34 = load i32, i32* %__vh, align 4, !dbg !9564
  %conv20 = zext i32 %34 to i64, !dbg !9564
  %mul21 = mul i64 %conv19, %conv20, !dbg !9564
  store i64 %mul21, i64* %__x1, align 8, !dbg !9564
  %35 = load i32, i32* %__uh, align 4, !dbg !9564
  %conv22 = zext i32 %35 to i64, !dbg !9564
  %36 = load i32, i32* %__vl, align 4, !dbg !9564
  %conv23 = zext i32 %36 to i64, !dbg !9564
  %mul24 = mul i64 %conv22, %conv23, !dbg !9564
  store i64 %mul24, i64* %__x2, align 8, !dbg !9564
  %37 = load i32, i32* %__uh, align 4, !dbg !9564
  %conv25 = zext i32 %37 to i64, !dbg !9564
  %38 = load i32, i32* %__vh, align 4, !dbg !9564
  %conv26 = zext i32 %38 to i64, !dbg !9564
  %mul27 = mul i64 %conv25, %conv26, !dbg !9564
  store i64 %mul27, i64* %__x3, align 8, !dbg !9564
  %39 = load i64, i64* %__x0, align 8, !dbg !9564
  %shr28 = lshr i64 %39, 32, !dbg !9564
  %40 = load i64, i64* %__x1, align 8, !dbg !9564
  %add29 = add i64 %40, %shr28, !dbg !9564
  store i64 %add29, i64* %__x1, align 8, !dbg !9564
  %41 = load i64, i64* %__x2, align 8, !dbg !9564
  %42 = load i64, i64* %__x1, align 8, !dbg !9564
  %add30 = add i64 %42, %41, !dbg !9564
  store i64 %add30, i64* %__x1, align 8, !dbg !9564
  %43 = load i64, i64* %__x1, align 8, !dbg !9574
  %44 = load i64, i64* %__x2, align 8, !dbg !9574
  %cmp31 = icmp ult i64 %43, %44, !dbg !9574
  br i1 %cmp31, label %if.then33, label %if.end, !dbg !9564

if.then33:                                        ; preds = %do.body11
  %45 = load i64, i64* %__x3, align 8, !dbg !9574
  %add34 = add i64 %45, 4294967296, !dbg !9574
  store i64 %add34, i64* %__x3, align 8, !dbg !9574
  br label %if.end, !dbg !9574

if.end:                                           ; preds = %if.then33, %do.body11
  %46 = load i64, i64* %__x3, align 8, !dbg !9564
  %47 = load i64, i64* %__x1, align 8, !dbg !9564
  %shr35 = lshr i64 %47, 32, !dbg !9564
  %add36 = add i64 %46, %shr35, !dbg !9564
  store i64 %add36, i64* %q, align 8, !dbg !9564
  %48 = load i64, i64* %__x1, align 8, !dbg !9564
  %shl = shl i64 %48, 32, !dbg !9564
  %49 = load i64, i64* %__x0, align 8, !dbg !9564
  %and37 = and i64 %49, 4294967295, !dbg !9564
  %add38 = add i64 %shl, %and37, !dbg !9564
  store i64 %add38, i64* %_q0, align 8, !dbg !9564
  br label %do.end, !dbg !9564

do.end:                                           ; preds = %if.end
  br label %do.body39, !dbg !9558

do.body39:                                        ; preds = %do.end
  call void @llvm.dbg.declare(metadata i64* %__x, metadata !9576, metadata !DIExpression()), !dbg !9578
  %50 = load i64, i64* %_q0, align 8, !dbg !9578
  %51 = load i64, i64* %n0, align 8, !dbg !9578
  %add40 = add i64 %50, %51, !dbg !9578
  store i64 %add40, i64* %__x, align 8, !dbg !9578
  %52 = load i64, i64* %q, align 8, !dbg !9578
  %53 = load i64, i64* %n1.addr, align 8, !dbg !9578
  %add41 = add i64 %52, %53, !dbg !9578
  %54 = load i64, i64* %__x, align 8, !dbg !9578
  %55 = load i64, i64* %_q0, align 8, !dbg !9578
  %cmp42 = icmp ult i64 %54, %55, !dbg !9578
  %conv43 = zext i1 %cmp42 to i32, !dbg !9578
  %conv44 = sext i32 %conv43 to i64, !dbg !9578
  %add45 = add i64 %add41, %conv44, !dbg !9578
  store i64 %add45, i64* %q, align 8, !dbg !9578
  %56 = load i64, i64* %__x, align 8, !dbg !9578
  store i64 %56, i64* %_q0, align 8, !dbg !9578
  br label %do.end46, !dbg !9578

do.end46:                                         ; preds = %do.body39
  %57 = load i64, i64* %n0, align 8, !dbg !9558
  %58 = load i64, i64* %d1, align 8, !dbg !9558
  %59 = load i64, i64* %q, align 8, !dbg !9558
  %mul47 = mul i64 %58, %59, !dbg !9558
  %sub48 = sub i64 %57, %mul47, !dbg !9558
  store i64 %sub48, i64* %n1.addr, align 8, !dbg !9558
  br label %do.body49, !dbg !9558

do.body49:                                        ; preds = %do.end46
  call void @llvm.dbg.declare(metadata i64* %__x50, metadata !9579, metadata !DIExpression()), !dbg !9581
  %60 = load i64*, i64** %np.addr, align 8, !dbg !9581
  %61 = load i64, i64* %dn.addr, align 8, !dbg !9581
  %sub51 = sub nsw i64 %61, 2, !dbg !9581
  %62 = load i64, i64* %i, align 8, !dbg !9581
  %add52 = add nsw i64 %sub51, %62, !dbg !9581
  %arrayidx53 = getelementptr inbounds i64, i64* %60, i64 %add52, !dbg !9581
  %63 = load i64, i64* %arrayidx53, align 8, !dbg !9581
  %64 = load i64, i64* %d0, align 8, !dbg !9581
  %sub54 = sub i64 %63, %64, !dbg !9581
  store i64 %sub54, i64* %__x50, align 8, !dbg !9581
  %65 = load i64, i64* %n1.addr, align 8, !dbg !9581
  %66 = load i64, i64* %d1, align 8, !dbg !9581
  %sub55 = sub i64 %65, %66, !dbg !9581
  %67 = load i64*, i64** %np.addr, align 8, !dbg !9581
  %68 = load i64, i64* %dn.addr, align 8, !dbg !9581
  %sub56 = sub nsw i64 %68, 2, !dbg !9581
  %69 = load i64, i64* %i, align 8, !dbg !9581
  %add57 = add nsw i64 %sub56, %69, !dbg !9581
  %arrayidx58 = getelementptr inbounds i64, i64* %67, i64 %add57, !dbg !9581
  %70 = load i64, i64* %arrayidx58, align 8, !dbg !9581
  %71 = load i64, i64* %d0, align 8, !dbg !9581
  %cmp59 = icmp ult i64 %70, %71, !dbg !9581
  %conv60 = zext i1 %cmp59 to i32, !dbg !9581
  %conv61 = sext i32 %conv60 to i64, !dbg !9581
  %sub62 = sub i64 %sub55, %conv61, !dbg !9581
  store i64 %sub62, i64* %n1.addr, align 8, !dbg !9581
  %72 = load i64, i64* %__x50, align 8, !dbg !9581
  store i64 %72, i64* %n0, align 8, !dbg !9581
  br label %do.end63, !dbg !9581

do.end63:                                         ; preds = %do.body49
  br label %do.body64, !dbg !9558

do.body64:                                        ; preds = %do.end63
  call void @llvm.dbg.declare(metadata i64* %__x065, metadata !9582, metadata !DIExpression()), !dbg !9584
  call void @llvm.dbg.declare(metadata i64* %__x166, metadata !9585, metadata !DIExpression()), !dbg !9584
  call void @llvm.dbg.declare(metadata i64* %__x267, metadata !9586, metadata !DIExpression()), !dbg !9584
  call void @llvm.dbg.declare(metadata i64* %__x368, metadata !9587, metadata !DIExpression()), !dbg !9584
  call void @llvm.dbg.declare(metadata i32* %__ul69, metadata !9588, metadata !DIExpression()), !dbg !9584
  call void @llvm.dbg.declare(metadata i32* %__vl70, metadata !9589, metadata !DIExpression()), !dbg !9584
  call void @llvm.dbg.declare(metadata i32* %__uh71, metadata !9590, metadata !DIExpression()), !dbg !9584
  call void @llvm.dbg.declare(metadata i32* %__vh72, metadata !9591, metadata !DIExpression()), !dbg !9584
  call void @llvm.dbg.declare(metadata i64* %__u73, metadata !9592, metadata !DIExpression()), !dbg !9584
  %73 = load i64, i64* %d0, align 8, !dbg !9584
  store i64 %73, i64* %__u73, align 8, !dbg !9584
  call void @llvm.dbg.declare(metadata i64* %__v74, metadata !9593, metadata !DIExpression()), !dbg !9584
  %74 = load i64, i64* %q, align 8, !dbg !9584
  store i64 %74, i64* %__v74, align 8, !dbg !9584
  %75 = load i64, i64* %__u73, align 8, !dbg !9584
  %and75 = and i64 %75, 4294967295, !dbg !9584
  %conv76 = trunc i64 %and75 to i32, !dbg !9584
  store i32 %conv76, i32* %__ul69, align 4, !dbg !9584
  %76 = load i64, i64* %__u73, align 8, !dbg !9584
  %shr77 = lshr i64 %76, 32, !dbg !9584
  %conv78 = trunc i64 %shr77 to i32, !dbg !9584
  store i32 %conv78, i32* %__uh71, align 4, !dbg !9584
  %77 = load i64, i64* %__v74, align 8, !dbg !9584
  %and79 = and i64 %77, 4294967295, !dbg !9584
  %conv80 = trunc i64 %and79 to i32, !dbg !9584
  store i32 %conv80, i32* %__vl70, align 4, !dbg !9584
  %78 = load i64, i64* %__v74, align 8, !dbg !9584
  %shr81 = lshr i64 %78, 32, !dbg !9584
  %conv82 = trunc i64 %shr81 to i32, !dbg !9584
  store i32 %conv82, i32* %__vh72, align 4, !dbg !9584
  %79 = load i32, i32* %__ul69, align 4, !dbg !9584
  %conv83 = zext i32 %79 to i64, !dbg !9584
  %80 = load i32, i32* %__vl70, align 4, !dbg !9584
  %conv84 = zext i32 %80 to i64, !dbg !9584
  %mul85 = mul i64 %conv83, %conv84, !dbg !9584
  store i64 %mul85, i64* %__x065, align 8, !dbg !9584
  %81 = load i32, i32* %__ul69, align 4, !dbg !9584
  %conv86 = zext i32 %81 to i64, !dbg !9584
  %82 = load i32, i32* %__vh72, align 4, !dbg !9584
  %conv87 = zext i32 %82 to i64, !dbg !9584
  %mul88 = mul i64 %conv86, %conv87, !dbg !9584
  store i64 %mul88, i64* %__x166, align 8, !dbg !9584
  %83 = load i32, i32* %__uh71, align 4, !dbg !9584
  %conv89 = zext i32 %83 to i64, !dbg !9584
  %84 = load i32, i32* %__vl70, align 4, !dbg !9584
  %conv90 = zext i32 %84 to i64, !dbg !9584
  %mul91 = mul i64 %conv89, %conv90, !dbg !9584
  store i64 %mul91, i64* %__x267, align 8, !dbg !9584
  %85 = load i32, i32* %__uh71, align 4, !dbg !9584
  %conv92 = zext i32 %85 to i64, !dbg !9584
  %86 = load i32, i32* %__vh72, align 4, !dbg !9584
  %conv93 = zext i32 %86 to i64, !dbg !9584
  %mul94 = mul i64 %conv92, %conv93, !dbg !9584
  store i64 %mul94, i64* %__x368, align 8, !dbg !9584
  %87 = load i64, i64* %__x065, align 8, !dbg !9584
  %shr95 = lshr i64 %87, 32, !dbg !9584
  %88 = load i64, i64* %__x166, align 8, !dbg !9584
  %add96 = add i64 %88, %shr95, !dbg !9584
  store i64 %add96, i64* %__x166, align 8, !dbg !9584
  %89 = load i64, i64* %__x267, align 8, !dbg !9584
  %90 = load i64, i64* %__x166, align 8, !dbg !9584
  %add97 = add i64 %90, %89, !dbg !9584
  store i64 %add97, i64* %__x166, align 8, !dbg !9584
  %91 = load i64, i64* %__x166, align 8, !dbg !9594
  %92 = load i64, i64* %__x267, align 8, !dbg !9594
  %cmp98 = icmp ult i64 %91, %92, !dbg !9594
  br i1 %cmp98, label %if.then100, label %if.end102, !dbg !9584

if.then100:                                       ; preds = %do.body64
  %93 = load i64, i64* %__x368, align 8, !dbg !9594
  %add101 = add i64 %93, 4294967296, !dbg !9594
  store i64 %add101, i64* %__x368, align 8, !dbg !9594
  br label %if.end102, !dbg !9594

if.end102:                                        ; preds = %if.then100, %do.body64
  %94 = load i64, i64* %__x368, align 8, !dbg !9584
  %95 = load i64, i64* %__x166, align 8, !dbg !9584
  %shr103 = lshr i64 %95, 32, !dbg !9584
  %add104 = add i64 %94, %shr103, !dbg !9584
  store i64 %add104, i64* %_t1, align 8, !dbg !9584
  %96 = load i64, i64* %__x166, align 8, !dbg !9584
  %shl105 = shl i64 %96, 32, !dbg !9584
  %97 = load i64, i64* %__x065, align 8, !dbg !9584
  %and106 = and i64 %97, 4294967295, !dbg !9584
  %add107 = add i64 %shl105, %and106, !dbg !9584
  store i64 %add107, i64* %_t0, align 8, !dbg !9584
  br label %do.end108, !dbg !9584

do.end108:                                        ; preds = %if.end102
  br label %do.body109, !dbg !9558

do.body109:                                       ; preds = %do.end108
  call void @llvm.dbg.declare(metadata i64* %__x110, metadata !9596, metadata !DIExpression()), !dbg !9598
  %98 = load i64, i64* %n0, align 8, !dbg !9598
  %99 = load i64, i64* %_t0, align 8, !dbg !9598
  %sub111 = sub i64 %98, %99, !dbg !9598
  store i64 %sub111, i64* %__x110, align 8, !dbg !9598
  %100 = load i64, i64* %n1.addr, align 8, !dbg !9598
  %101 = load i64, i64* %_t1, align 8, !dbg !9598
  %sub112 = sub i64 %100, %101, !dbg !9598
  %102 = load i64, i64* %n0, align 8, !dbg !9598
  %103 = load i64, i64* %_t0, align 8, !dbg !9598
  %cmp113 = icmp ult i64 %102, %103, !dbg !9598
  %conv114 = zext i1 %cmp113 to i32, !dbg !9598
  %conv115 = sext i32 %conv114 to i64, !dbg !9598
  %sub116 = sub i64 %sub112, %conv115, !dbg !9598
  store i64 %sub116, i64* %n1.addr, align 8, !dbg !9598
  %104 = load i64, i64* %__x110, align 8, !dbg !9598
  store i64 %104, i64* %n0, align 8, !dbg !9598
  br label %do.end117, !dbg !9598

do.end117:                                        ; preds = %do.body109
  %105 = load i64, i64* %q, align 8, !dbg !9558
  %inc = add i64 %105, 1, !dbg !9558
  store i64 %inc, i64* %q, align 8, !dbg !9558
  %106 = load i64, i64* %n1.addr, align 8, !dbg !9558
  %107 = load i64, i64* %_q0, align 8, !dbg !9558
  %cmp118 = icmp uge i64 %106, %107, !dbg !9558
  %conv119 = zext i1 %cmp118 to i32, !dbg !9558
  %conv120 = sext i32 %conv119 to i64, !dbg !9558
  %sub121 = sub i64 0, %conv120, !dbg !9558
  store i64 %sub121, i64* %_mask, align 8, !dbg !9558
  %108 = load i64, i64* %_mask, align 8, !dbg !9558
  %109 = load i64, i64* %q, align 8, !dbg !9558
  %add122 = add i64 %109, %108, !dbg !9558
  store i64 %add122, i64* %q, align 8, !dbg !9558
  br label %do.body123, !dbg !9558

do.body123:                                       ; preds = %do.end117
  call void @llvm.dbg.declare(metadata i64* %__x124, metadata !9599, metadata !DIExpression()), !dbg !9601
  %110 = load i64, i64* %n0, align 8, !dbg !9601
  %111 = load i64, i64* %_mask, align 8, !dbg !9601
  %112 = load i64, i64* %d0, align 8, !dbg !9601
  %and125 = and i64 %111, %112, !dbg !9601
  %add126 = add i64 %110, %and125, !dbg !9601
  store i64 %add126, i64* %__x124, align 8, !dbg !9601
  %113 = load i64, i64* %n1.addr, align 8, !dbg !9601
  %114 = load i64, i64* %_mask, align 8, !dbg !9601
  %115 = load i64, i64* %d1, align 8, !dbg !9601
  %and127 = and i64 %114, %115, !dbg !9601
  %add128 = add i64 %113, %and127, !dbg !9601
  %116 = load i64, i64* %__x124, align 8, !dbg !9601
  %117 = load i64, i64* %n0, align 8, !dbg !9601
  %cmp129 = icmp ult i64 %116, %117, !dbg !9601
  %conv130 = zext i1 %cmp129 to i32, !dbg !9601
  %conv131 = sext i32 %conv130 to i64, !dbg !9601
  %add132 = add i64 %add128, %conv131, !dbg !9601
  store i64 %add132, i64* %n1.addr, align 8, !dbg !9601
  %118 = load i64, i64* %__x124, align 8, !dbg !9601
  store i64 %118, i64* %n0, align 8, !dbg !9601
  br label %do.end133, !dbg !9601

do.end133:                                        ; preds = %do.body123
  %119 = load i64, i64* %n1.addr, align 8, !dbg !9602
  %120 = load i64, i64* %d1, align 8, !dbg !9602
  %cmp134 = icmp uge i64 %119, %120, !dbg !9602
  br i1 %cmp134, label %if.then136, label %if.end153, !dbg !9558

if.then136:                                       ; preds = %do.end133
  %121 = load i64, i64* %n1.addr, align 8, !dbg !9604
  %122 = load i64, i64* %d1, align 8, !dbg !9604
  %cmp137 = icmp ugt i64 %121, %122, !dbg !9604
  br i1 %cmp137, label %if.then141, label %lor.lhs.false, !dbg !9604

lor.lhs.false:                                    ; preds = %if.then136
  %123 = load i64, i64* %n0, align 8, !dbg !9604
  %124 = load i64, i64* %d0, align 8, !dbg !9604
  %cmp139 = icmp uge i64 %123, %124, !dbg !9604
  br i1 %cmp139, label %if.then141, label %if.end152, !dbg !9607

if.then141:                                       ; preds = %lor.lhs.false, %if.then136
  %125 = load i64, i64* %q, align 8, !dbg !9608
  %inc142 = add i64 %125, 1, !dbg !9608
  store i64 %inc142, i64* %q, align 8, !dbg !9608
  br label %do.body143, !dbg !9608

do.body143:                                       ; preds = %if.then141
  call void @llvm.dbg.declare(metadata i64* %__x144, metadata !9610, metadata !DIExpression()), !dbg !9612
  %126 = load i64, i64* %n0, align 8, !dbg !9612
  %127 = load i64, i64* %d0, align 8, !dbg !9612
  %sub145 = sub i64 %126, %127, !dbg !9612
  store i64 %sub145, i64* %__x144, align 8, !dbg !9612
  %128 = load i64, i64* %n1.addr, align 8, !dbg !9612
  %129 = load i64, i64* %d1, align 8, !dbg !9612
  %sub146 = sub i64 %128, %129, !dbg !9612
  %130 = load i64, i64* %n0, align 8, !dbg !9612
  %131 = load i64, i64* %d0, align 8, !dbg !9612
  %cmp147 = icmp ult i64 %130, %131, !dbg !9612
  %conv148 = zext i1 %cmp147 to i32, !dbg !9612
  %conv149 = sext i32 %conv148 to i64, !dbg !9612
  %sub150 = sub i64 %sub146, %conv149, !dbg !9612
  store i64 %sub150, i64* %n1.addr, align 8, !dbg !9612
  %132 = load i64, i64* %__x144, align 8, !dbg !9612
  store i64 %132, i64* %n0, align 8, !dbg !9612
  br label %do.end151, !dbg !9612

do.end151:                                        ; preds = %do.body143
  br label %if.end152, !dbg !9608

if.end152:                                        ; preds = %do.end151, %lor.lhs.false
  br label %if.end153, !dbg !9607

if.end153:                                        ; preds = %if.end152, %do.end133
  br label %do.end154, !dbg !9558

do.end154:                                        ; preds = %if.end153
  %133 = load i64*, i64** %np.addr, align 8, !dbg !9613
  %134 = load i64, i64* %i, align 8, !dbg !9614
  %add.ptr155 = getelementptr inbounds i64, i64* %133, i64 %134, !dbg !9615
  %135 = load i64*, i64** %dp.addr, align 8, !dbg !9616
  %136 = load i64, i64* %dn.addr, align 8, !dbg !9617
  %sub156 = sub nsw i64 %136, 2, !dbg !9618
  %137 = load i64, i64* %q, align 8, !dbg !9619
  %call157 = call i64 @mpn_submul_1(i64* %add.ptr155, i64* %135, i64 %sub156, i64 %137), !dbg !9620
  store i64 %call157, i64* %cy, align 8, !dbg !9621
  %138 = load i64, i64* %n0, align 8, !dbg !9622
  %139 = load i64, i64* %cy, align 8, !dbg !9623
  %cmp158 = icmp ult i64 %138, %139, !dbg !9624
  %conv159 = zext i1 %cmp158 to i32, !dbg !9624
  %conv160 = sext i32 %conv159 to i64, !dbg !9622
  store i64 %conv160, i64* %cy1, align 8, !dbg !9625
  %140 = load i64, i64* %n0, align 8, !dbg !9626
  %141 = load i64, i64* %cy, align 8, !dbg !9627
  %sub161 = sub i64 %140, %141, !dbg !9628
  store i64 %sub161, i64* %n0, align 8, !dbg !9629
  %142 = load i64, i64* %n1.addr, align 8, !dbg !9630
  %143 = load i64, i64* %cy1, align 8, !dbg !9631
  %cmp162 = icmp ult i64 %142, %143, !dbg !9632
  %conv163 = zext i1 %cmp162 to i32, !dbg !9632
  %conv164 = sext i32 %conv163 to i64, !dbg !9630
  store i64 %conv164, i64* %cy, align 8, !dbg !9633
  %144 = load i64, i64* %n1.addr, align 8, !dbg !9634
  %145 = load i64, i64* %cy1, align 8, !dbg !9635
  %sub165 = sub i64 %144, %145, !dbg !9636
  store i64 %sub165, i64* %n1.addr, align 8, !dbg !9637
  %146 = load i64, i64* %n0, align 8, !dbg !9638
  %147 = load i64*, i64** %np.addr, align 8, !dbg !9639
  %148 = load i64, i64* %dn.addr, align 8, !dbg !9640
  %sub166 = sub nsw i64 %148, 2, !dbg !9641
  %149 = load i64, i64* %i, align 8, !dbg !9642
  %add167 = add nsw i64 %sub166, %149, !dbg !9643
  %arrayidx168 = getelementptr inbounds i64, i64* %147, i64 %add167, !dbg !9639
  store i64 %146, i64* %arrayidx168, align 8, !dbg !9644
  %150 = load i64, i64* %cy, align 8, !dbg !9645
  %cmp169 = icmp ne i64 %150, 0, !dbg !9647
  br i1 %cmp169, label %if.then171, label %if.end178, !dbg !9648

if.then171:                                       ; preds = %do.end154
  %151 = load i64, i64* %d1, align 8, !dbg !9649
  %152 = load i64*, i64** %np.addr, align 8, !dbg !9651
  %153 = load i64, i64* %i, align 8, !dbg !9652
  %add.ptr172 = getelementptr inbounds i64, i64* %152, i64 %153, !dbg !9653
  %154 = load i64*, i64** %np.addr, align 8, !dbg !9654
  %155 = load i64, i64* %i, align 8, !dbg !9655
  %add.ptr173 = getelementptr inbounds i64, i64* %154, i64 %155, !dbg !9656
  %156 = load i64*, i64** %dp.addr, align 8, !dbg !9657
  %157 = load i64, i64* %dn.addr, align 8, !dbg !9658
  %sub174 = sub nsw i64 %157, 1, !dbg !9659
  %call175 = call i64 @mpn_add_n(i64* %add.ptr172, i64* %add.ptr173, i64* %156, i64 %sub174), !dbg !9660
  %add176 = add i64 %151, %call175, !dbg !9661
  %158 = load i64, i64* %n1.addr, align 8, !dbg !9662
  %add177 = add i64 %158, %add176, !dbg !9662
  store i64 %add177, i64* %n1.addr, align 8, !dbg !9662
  %159 = load i64, i64* %q, align 8, !dbg !9663
  %dec = add i64 %159, -1, !dbg !9663
  store i64 %dec, i64* %q, align 8, !dbg !9663
  br label %if.end178, !dbg !9664

if.end178:                                        ; preds = %if.then171, %do.end154
  br label %if.end179

if.end179:                                        ; preds = %if.end178, %if.then
  %160 = load i64*, i64** %qp.addr, align 8, !dbg !9665
  %tobool = icmp ne i64* %160, null, !dbg !9665
  br i1 %tobool, label %if.then180, label %if.end182, !dbg !9667

if.then180:                                       ; preds = %if.end179
  %161 = load i64, i64* %q, align 8, !dbg !9668
  %162 = load i64*, i64** %qp.addr, align 8, !dbg !9669
  %163 = load i64, i64* %i, align 8, !dbg !9670
  %arrayidx181 = getelementptr inbounds i64, i64* %162, i64 %163, !dbg !9669
  store i64 %161, i64* %arrayidx181, align 8, !dbg !9671
  br label %if.end182, !dbg !9669

if.end182:                                        ; preds = %if.then180, %if.end179
  br label %do.cond, !dbg !9672

do.cond:                                          ; preds = %if.end182
  %164 = load i64, i64* %i, align 8, !dbg !9673
  %dec183 = add nsw i64 %164, -1, !dbg !9673
  store i64 %dec183, i64* %i, align 8, !dbg !9673
  %cmp184 = icmp sge i64 %dec183, 0, !dbg !9674
  br i1 %cmp184, label %do.body, label %do.end186, !dbg !9672, !llvm.loop !9675

do.end186:                                        ; preds = %do.cond
  %165 = load i64, i64* %n1.addr, align 8, !dbg !9677
  %166 = load i64*, i64** %np.addr, align 8, !dbg !9678
  %167 = load i64, i64* %dn.addr, align 8, !dbg !9679
  %sub187 = sub nsw i64 %167, 1, !dbg !9680
  %arrayidx188 = getelementptr inbounds i64, i64* %166, i64 %sub187, !dbg !9678
  store i64 %165, i64* %arrayidx188, align 8, !dbg !9681
  ret void, !dbg !9682
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind readonly }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!68, !69, !70}
!llvm.ident = !{!71}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "mp_bits_per_limb", scope: !2, file: !3, line: 239, type: !67, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !26, globals: !43, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "mini-gmp.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !11}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mpz_div_round_mode", file: !3, line: 2128, baseType: !6, size: 32, elements: !7)
!6 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!7 = !{!8, !9, !10}
!8 = !DIEnumerator(name: "GMP_DIV_FLOOR", value: 0, isUnsigned: true)
!9 = !DIEnumerator(name: "GMP_DIV_CEIL", value: 1, isUnsigned: true)
!10 = !DIEnumerator(name: "GMP_DIV_TRUNC", value: 2, isUnsigned: true)
!11 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !12, line: 46, baseType: !6, size: 32, elements: !13)
!12 = !DIFile(filename: "/usr/include/ctype.h", directory: "")
!13 = !{!14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!14 = !DIEnumerator(name: "_ISupper", value: 256, isUnsigned: true)
!15 = !DIEnumerator(name: "_ISlower", value: 512, isUnsigned: true)
!16 = !DIEnumerator(name: "_ISalpha", value: 1024, isUnsigned: true)
!17 = !DIEnumerator(name: "_ISdigit", value: 2048, isUnsigned: true)
!18 = !DIEnumerator(name: "_ISxdigit", value: 4096, isUnsigned: true)
!19 = !DIEnumerator(name: "_ISspace", value: 8192, isUnsigned: true)
!20 = !DIEnumerator(name: "_ISprint", value: 16384, isUnsigned: true)
!21 = !DIEnumerator(name: "_ISgraph", value: 32768, isUnsigned: true)
!22 = !DIEnumerator(name: "_ISblank", value: 1, isUnsigned: true)
!23 = !DIEnumerator(name: "_IScntrl", value: 2, isUnsigned: true)
!24 = !DIEnumerator(name: "_ISpunct", value: 4, isUnsigned: true)
!25 = !DIEnumerator(name: "_ISalnum", value: 8, isUnsigned: true)
!26 = !{!27, !29, !30, !31, !33, !34, !35, !36, !37, !38, !39, !41}
!27 = !DIDerivedType(tag: DW_TAG_typedef, name: "mp_limb_t", file: !28, line: 56, baseType: !29)
!28 = !DIFile(filename: "./mini-gmp.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!29 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!30 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!31 = !DIDerivedType(tag: DW_TAG_typedef, name: "mp_ptr", file: !28, line: 60, baseType: !32)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 64)
!33 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!34 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!35 = !DIDerivedType(tag: DW_TAG_typedef, name: "mp_bitcnt_t", file: !28, line: 58, baseType: !29)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64)
!37 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!38 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!39 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", file: !40, line: 35, baseType: !30)
!40 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!42 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !37)
!43 = !{!0, !44, !51, !56, !61}
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "gmp_allocate_func", scope: !2, file: !3, line: 283, type: !46, isLocal: true, isDefinition: true)
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !47, size: 64)
!47 = !DISubroutineType(types: !48)
!48 = !{!49, !50}
!49 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!50 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !40, line: 46, baseType: !29)
!51 = !DIGlobalVariableExpression(var: !52, expr: !DIExpression())
!52 = distinct !DIGlobalVariable(name: "gmp_reallocate_func", scope: !2, file: !3, line: 284, type: !53, isLocal: true, isDefinition: true)
!53 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !54, size: 64)
!54 = !DISubroutineType(types: !55)
!55 = !{!49, !49, !50, !50}
!56 = !DIGlobalVariableExpression(var: !57, expr: !DIExpression())
!57 = distinct !DIGlobalVariable(name: "gmp_free_func", scope: !2, file: !3, line: 285, type: !58, isLocal: true, isDefinition: true)
!58 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !59, size: 64)
!59 = !DISubroutineType(types: !60)
!60 = !{null, !49, !50}
!61 = !DIGlobalVariableExpression(var: !62, expr: !DIExpression())
!62 = distinct !DIGlobalVariable(name: "i", scope: !63, file: !3, line: 4225, type: !67, isLocal: true, isDefinition: true)
!63 = distinct !DISubprogram(name: "gmp_detect_endian", scope: !3, file: !3, line: 4223, type: !64, scopeLine: 4224, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!64 = !DISubroutineType(types: !65)
!65 = !{!34}
!66 = !{}
!67 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !34)
!68 = !{i32 7, !"Dwarf Version", i32 4}
!69 = !{i32 2, !"Debug Info Version", i32 3}
!70 = !{i32 1, !"wchar_size", i32 4}
!71 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!72 = distinct !DISubprogram(name: "mp_get_memory_functions", scope: !3, file: !3, line: 288, type: !73, scopeLine: 291, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!73 = !DISubroutineType(types: !74)
!74 = !{null, !75, !76, !77}
!75 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !46, size: 64)
!76 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !53, size: 64)
!77 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !58, size: 64)
!78 = !DILocalVariable(name: "alloc_func", arg: 1, scope: !72, file: !3, line: 288, type: !75)
!79 = !DILocation(line: 288, column: 35, scope: !72)
!80 = !DILocalVariable(name: "realloc_func", arg: 2, scope: !72, file: !3, line: 289, type: !76)
!81 = !DILocation(line: 289, column: 14, scope: !72)
!82 = !DILocalVariable(name: "free_func", arg: 3, scope: !72, file: !3, line: 290, type: !77)
!83 = !DILocation(line: 290, column: 13, scope: !72)
!84 = !DILocation(line: 292, column: 7, scope: !85)
!85 = distinct !DILexicalBlock(scope: !72, file: !3, line: 292, column: 7)
!86 = !DILocation(line: 292, column: 7, scope: !72)
!87 = !DILocation(line: 293, column: 19, scope: !85)
!88 = !DILocation(line: 293, column: 6, scope: !85)
!89 = !DILocation(line: 293, column: 17, scope: !85)
!90 = !DILocation(line: 293, column: 5, scope: !85)
!91 = !DILocation(line: 295, column: 7, scope: !92)
!92 = distinct !DILexicalBlock(scope: !72, file: !3, line: 295, column: 7)
!93 = !DILocation(line: 295, column: 7, scope: !72)
!94 = !DILocation(line: 296, column: 21, scope: !92)
!95 = !DILocation(line: 296, column: 6, scope: !92)
!96 = !DILocation(line: 296, column: 19, scope: !92)
!97 = !DILocation(line: 296, column: 5, scope: !92)
!98 = !DILocation(line: 298, column: 7, scope: !99)
!99 = distinct !DILexicalBlock(scope: !72, file: !3, line: 298, column: 7)
!100 = !DILocation(line: 298, column: 7, scope: !72)
!101 = !DILocation(line: 299, column: 18, scope: !99)
!102 = !DILocation(line: 299, column: 6, scope: !99)
!103 = !DILocation(line: 299, column: 16, scope: !99)
!104 = !DILocation(line: 299, column: 5, scope: !99)
!105 = !DILocation(line: 300, column: 1, scope: !72)
!106 = distinct !DISubprogram(name: "mp_set_memory_functions", scope: !3, file: !3, line: 303, type: !107, scopeLine: 306, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!107 = !DISubroutineType(types: !108)
!108 = !{null, !46, !53, !58}
!109 = !DILocalVariable(name: "alloc_func", arg: 1, scope: !106, file: !3, line: 303, type: !46)
!110 = !DILocation(line: 303, column: 34, scope: !106)
!111 = !DILocalVariable(name: "realloc_func", arg: 2, scope: !106, file: !3, line: 304, type: !53)
!112 = !DILocation(line: 304, column: 13, scope: !106)
!113 = !DILocalVariable(name: "free_func", arg: 3, scope: !106, file: !3, line: 305, type: !58)
!114 = !DILocation(line: 305, column: 12, scope: !106)
!115 = !DILocation(line: 307, column: 8, scope: !116)
!116 = distinct !DILexicalBlock(scope: !106, file: !3, line: 307, column: 7)
!117 = !DILocation(line: 307, column: 7, scope: !106)
!118 = !DILocation(line: 308, column: 16, scope: !116)
!119 = !DILocation(line: 308, column: 5, scope: !116)
!120 = !DILocation(line: 309, column: 8, scope: !121)
!121 = distinct !DILexicalBlock(scope: !106, file: !3, line: 309, column: 7)
!122 = !DILocation(line: 309, column: 7, scope: !106)
!123 = !DILocation(line: 310, column: 18, scope: !121)
!124 = !DILocation(line: 310, column: 5, scope: !121)
!125 = !DILocation(line: 311, column: 8, scope: !126)
!126 = distinct !DILexicalBlock(scope: !106, file: !3, line: 311, column: 7)
!127 = !DILocation(line: 311, column: 7, scope: !106)
!128 = !DILocation(line: 312, column: 15, scope: !126)
!129 = !DILocation(line: 312, column: 5, scope: !126)
!130 = !DILocation(line: 314, column: 23, scope: !106)
!131 = !DILocation(line: 314, column: 21, scope: !106)
!132 = !DILocation(line: 315, column: 25, scope: !106)
!133 = !DILocation(line: 315, column: 23, scope: !106)
!134 = !DILocation(line: 316, column: 19, scope: !106)
!135 = !DILocation(line: 316, column: 17, scope: !106)
!136 = !DILocation(line: 317, column: 1, scope: !106)
!137 = distinct !DISubprogram(name: "gmp_default_alloc", scope: !3, file: !3, line: 251, type: !47, scopeLine: 252, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!138 = !DILocalVariable(name: "size", arg: 1, scope: !137, file: !3, line: 251, type: !50)
!139 = !DILocation(line: 251, column: 27, scope: !137)
!140 = !DILocalVariable(name: "p", scope: !137, file: !3, line: 253, type: !49)
!141 = !DILocation(line: 253, column: 9, scope: !137)
!142 = !DILocation(line: 257, column: 15, scope: !137)
!143 = !DILocation(line: 257, column: 7, scope: !137)
!144 = !DILocation(line: 257, column: 5, scope: !137)
!145 = !DILocation(line: 258, column: 8, scope: !146)
!146 = distinct !DILexicalBlock(scope: !137, file: !3, line: 258, column: 7)
!147 = !DILocation(line: 258, column: 7, scope: !137)
!148 = !DILocation(line: 259, column: 5, scope: !146)
!149 = !DILocation(line: 261, column: 10, scope: !137)
!150 = !DILocation(line: 261, column: 3, scope: !137)
!151 = distinct !DISubprogram(name: "gmp_default_realloc", scope: !3, file: !3, line: 265, type: !54, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!152 = !DILocalVariable(name: "old", arg: 1, scope: !151, file: !3, line: 265, type: !49)
!153 = !DILocation(line: 265, column: 28, scope: !151)
!154 = !DILocalVariable(name: "old_size", arg: 2, scope: !151, file: !3, line: 265, type: !50)
!155 = !DILocation(line: 265, column: 40, scope: !151)
!156 = !DILocalVariable(name: "new_size", arg: 3, scope: !151, file: !3, line: 265, type: !50)
!157 = !DILocation(line: 265, column: 57, scope: !151)
!158 = !DILocalVariable(name: "p", scope: !151, file: !3, line: 267, type: !31)
!159 = !DILocation(line: 267, column: 10, scope: !151)
!160 = !DILocation(line: 269, column: 16, scope: !151)
!161 = !DILocation(line: 269, column: 21, scope: !151)
!162 = !DILocation(line: 269, column: 7, scope: !151)
!163 = !DILocation(line: 269, column: 5, scope: !151)
!164 = !DILocation(line: 271, column: 8, scope: !165)
!165 = distinct !DILexicalBlock(scope: !151, file: !3, line: 271, column: 7)
!166 = !DILocation(line: 271, column: 7, scope: !151)
!167 = !DILocation(line: 272, column: 5, scope: !165)
!168 = !DILocation(line: 274, column: 10, scope: !151)
!169 = !DILocation(line: 274, column: 3, scope: !151)
!170 = distinct !DISubprogram(name: "gmp_default_free", scope: !3, file: !3, line: 278, type: !59, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!171 = !DILocalVariable(name: "p", arg: 1, scope: !170, file: !3, line: 278, type: !49)
!172 = !DILocation(line: 278, column: 25, scope: !170)
!173 = !DILocalVariable(name: "size", arg: 2, scope: !170, file: !3, line: 278, type: !50)
!174 = !DILocation(line: 278, column: 35, scope: !170)
!175 = !DILocation(line: 280, column: 9, scope: !170)
!176 = !DILocation(line: 280, column: 3, scope: !170)
!177 = !DILocation(line: 281, column: 1, scope: !170)
!178 = distinct !DISubprogram(name: "mpn_copyi", scope: !3, file: !3, line: 339, type: !179, scopeLine: 340, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!179 = !DISubroutineType(types: !180)
!180 = !{null, !31, !181, !184}
!181 = !DIDerivedType(tag: DW_TAG_typedef, name: "mp_srcptr", file: !28, line: 61, baseType: !182)
!182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !183, size: 64)
!183 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !27)
!184 = !DIDerivedType(tag: DW_TAG_typedef, name: "mp_size_t", file: !28, line: 57, baseType: !30)
!185 = !DILocalVariable(name: "d", arg: 1, scope: !178, file: !3, line: 339, type: !31)
!186 = !DILocation(line: 339, column: 19, scope: !178)
!187 = !DILocalVariable(name: "s", arg: 2, scope: !178, file: !3, line: 339, type: !181)
!188 = !DILocation(line: 339, column: 32, scope: !178)
!189 = !DILocalVariable(name: "n", arg: 3, scope: !178, file: !3, line: 339, type: !184)
!190 = !DILocation(line: 339, column: 45, scope: !178)
!191 = !DILocalVariable(name: "i", scope: !178, file: !3, line: 341, type: !184)
!192 = !DILocation(line: 341, column: 13, scope: !178)
!193 = !DILocation(line: 342, column: 10, scope: !194)
!194 = distinct !DILexicalBlock(scope: !178, file: !3, line: 342, column: 3)
!195 = !DILocation(line: 342, column: 8, scope: !194)
!196 = !DILocation(line: 342, column: 15, scope: !197)
!197 = distinct !DILexicalBlock(scope: !194, file: !3, line: 342, column: 3)
!198 = !DILocation(line: 342, column: 19, scope: !197)
!199 = !DILocation(line: 342, column: 17, scope: !197)
!200 = !DILocation(line: 342, column: 3, scope: !194)
!201 = !DILocation(line: 343, column: 12, scope: !197)
!202 = !DILocation(line: 343, column: 14, scope: !197)
!203 = !DILocation(line: 343, column: 5, scope: !197)
!204 = !DILocation(line: 343, column: 7, scope: !197)
!205 = !DILocation(line: 343, column: 10, scope: !197)
!206 = !DILocation(line: 342, column: 23, scope: !197)
!207 = !DILocation(line: 342, column: 3, scope: !197)
!208 = distinct !{!208, !200, !209}
!209 = !DILocation(line: 343, column: 15, scope: !194)
!210 = !DILocation(line: 344, column: 1, scope: !178)
!211 = distinct !DISubprogram(name: "mpn_copyd", scope: !3, file: !3, line: 347, type: !179, scopeLine: 348, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!212 = !DILocalVariable(name: "d", arg: 1, scope: !211, file: !3, line: 347, type: !31)
!213 = !DILocation(line: 347, column: 19, scope: !211)
!214 = !DILocalVariable(name: "s", arg: 2, scope: !211, file: !3, line: 347, type: !181)
!215 = !DILocation(line: 347, column: 32, scope: !211)
!216 = !DILocalVariable(name: "n", arg: 3, scope: !211, file: !3, line: 347, type: !184)
!217 = !DILocation(line: 347, column: 45, scope: !211)
!218 = !DILocation(line: 349, column: 3, scope: !211)
!219 = !DILocation(line: 349, column: 11, scope: !211)
!220 = !DILocation(line: 349, column: 14, scope: !211)
!221 = !DILocation(line: 350, column: 12, scope: !211)
!222 = !DILocation(line: 350, column: 14, scope: !211)
!223 = !DILocation(line: 350, column: 5, scope: !211)
!224 = !DILocation(line: 350, column: 7, scope: !211)
!225 = !DILocation(line: 350, column: 10, scope: !211)
!226 = distinct !{!226, !218, !227}
!227 = !DILocation(line: 350, column: 15, scope: !211)
!228 = !DILocation(line: 351, column: 1, scope: !211)
!229 = distinct !DISubprogram(name: "mpn_cmp", scope: !3, file: !3, line: 354, type: !230, scopeLine: 355, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!230 = !DISubroutineType(types: !231)
!231 = !{!34, !181, !181, !184}
!232 = !DILocalVariable(name: "ap", arg: 1, scope: !229, file: !3, line: 354, type: !181)
!233 = !DILocation(line: 354, column: 20, scope: !229)
!234 = !DILocalVariable(name: "bp", arg: 2, scope: !229, file: !3, line: 354, type: !181)
!235 = !DILocation(line: 354, column: 34, scope: !229)
!236 = !DILocalVariable(name: "n", arg: 3, scope: !229, file: !3, line: 354, type: !184)
!237 = !DILocation(line: 354, column: 48, scope: !229)
!238 = !DILocation(line: 356, column: 3, scope: !229)
!239 = !DILocation(line: 356, column: 10, scope: !229)
!240 = !DILocation(line: 356, column: 14, scope: !229)
!241 = !DILocation(line: 358, column: 11, scope: !242)
!242 = distinct !DILexicalBlock(scope: !243, file: !3, line: 358, column: 11)
!243 = distinct !DILexicalBlock(scope: !229, file: !3, line: 357, column: 5)
!244 = !DILocation(line: 358, column: 14, scope: !242)
!245 = !DILocation(line: 358, column: 20, scope: !242)
!246 = !DILocation(line: 358, column: 23, scope: !242)
!247 = !DILocation(line: 358, column: 17, scope: !242)
!248 = !DILocation(line: 358, column: 11, scope: !243)
!249 = !DILocation(line: 359, column: 9, scope: !242)
!250 = !DILocation(line: 359, column: 12, scope: !242)
!251 = !DILocation(line: 359, column: 17, scope: !242)
!252 = !DILocation(line: 359, column: 20, scope: !242)
!253 = !DILocation(line: 359, column: 15, scope: !242)
!254 = !DILocation(line: 359, column: 2, scope: !242)
!255 = distinct !{!255, !238, !256}
!256 = !DILocation(line: 360, column: 5, scope: !229)
!257 = !DILocation(line: 361, column: 3, scope: !229)
!258 = !DILocation(line: 362, column: 1, scope: !229)
!259 = distinct !DISubprogram(name: "mpn_zero", scope: !3, file: !3, line: 384, type: !260, scopeLine: 385, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!260 = !DISubroutineType(types: !261)
!261 = !{null, !31, !184}
!262 = !DILocalVariable(name: "rp", arg: 1, scope: !259, file: !3, line: 384, type: !31)
!263 = !DILocation(line: 384, column: 18, scope: !259)
!264 = !DILocalVariable(name: "n", arg: 2, scope: !259, file: !3, line: 384, type: !184)
!265 = !DILocation(line: 384, column: 32, scope: !259)
!266 = !DILocalVariable(name: "i", scope: !259, file: !3, line: 386, type: !184)
!267 = !DILocation(line: 386, column: 13, scope: !259)
!268 = !DILocation(line: 388, column: 10, scope: !269)
!269 = distinct !DILexicalBlock(scope: !259, file: !3, line: 388, column: 3)
!270 = !DILocation(line: 388, column: 8, scope: !269)
!271 = !DILocation(line: 388, column: 15, scope: !272)
!272 = distinct !DILexicalBlock(scope: !269, file: !3, line: 388, column: 3)
!273 = !DILocation(line: 388, column: 19, scope: !272)
!274 = !DILocation(line: 388, column: 17, scope: !272)
!275 = !DILocation(line: 388, column: 3, scope: !269)
!276 = !DILocation(line: 389, column: 5, scope: !272)
!277 = !DILocation(line: 389, column: 8, scope: !272)
!278 = !DILocation(line: 389, column: 11, scope: !272)
!279 = !DILocation(line: 388, column: 23, scope: !272)
!280 = !DILocation(line: 388, column: 3, scope: !272)
!281 = distinct !{!281, !275, !282}
!282 = !DILocation(line: 389, column: 13, scope: !269)
!283 = !DILocation(line: 390, column: 1, scope: !259)
!284 = distinct !DISubprogram(name: "mpn_add_1", scope: !3, file: !3, line: 393, type: !285, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!285 = !DISubroutineType(types: !286)
!286 = !{!27, !31, !181, !184, !27}
!287 = !DILocalVariable(name: "rp", arg: 1, scope: !284, file: !3, line: 393, type: !31)
!288 = !DILocation(line: 393, column: 19, scope: !284)
!289 = !DILocalVariable(name: "ap", arg: 2, scope: !284, file: !3, line: 393, type: !181)
!290 = !DILocation(line: 393, column: 33, scope: !284)
!291 = !DILocalVariable(name: "n", arg: 3, scope: !284, file: !3, line: 393, type: !184)
!292 = !DILocation(line: 393, column: 47, scope: !284)
!293 = !DILocalVariable(name: "b", arg: 4, scope: !284, file: !3, line: 393, type: !27)
!294 = !DILocation(line: 393, column: 60, scope: !284)
!295 = !DILocalVariable(name: "i", scope: !284, file: !3, line: 395, type: !184)
!296 = !DILocation(line: 395, column: 13, scope: !284)
!297 = !DILocation(line: 398, column: 5, scope: !284)
!298 = !DILocation(line: 399, column: 3, scope: !284)
!299 = !DILocalVariable(name: "r", scope: !300, file: !3, line: 401, type: !27)
!300 = distinct !DILexicalBlock(scope: !284, file: !3, line: 400, column: 5)
!301 = !DILocation(line: 401, column: 17, scope: !300)
!302 = !DILocation(line: 401, column: 21, scope: !300)
!303 = !DILocation(line: 401, column: 24, scope: !300)
!304 = !DILocation(line: 401, column: 29, scope: !300)
!305 = !DILocation(line: 401, column: 27, scope: !300)
!306 = !DILocation(line: 403, column: 12, scope: !300)
!307 = !DILocation(line: 403, column: 16, scope: !300)
!308 = !DILocation(line: 403, column: 14, scope: !300)
!309 = !DILocation(line: 403, column: 11, scope: !300)
!310 = !DILocation(line: 403, column: 9, scope: !300)
!311 = !DILocation(line: 404, column: 15, scope: !300)
!312 = !DILocation(line: 404, column: 7, scope: !300)
!313 = !DILocation(line: 404, column: 10, scope: !300)
!314 = !DILocation(line: 404, column: 13, scope: !300)
!315 = !DILocation(line: 405, column: 5, scope: !300)
!316 = !DILocation(line: 406, column: 10, scope: !284)
!317 = !DILocation(line: 406, column: 16, scope: !284)
!318 = !DILocation(line: 406, column: 14, scope: !284)
!319 = distinct !{!319, !298, !320}
!320 = !DILocation(line: 406, column: 17, scope: !284)
!321 = !DILocation(line: 408, column: 10, scope: !284)
!322 = !DILocation(line: 408, column: 3, scope: !284)
!323 = distinct !DISubprogram(name: "mpn_add_n", scope: !3, file: !3, line: 412, type: !324, scopeLine: 413, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!324 = !DISubroutineType(types: !325)
!325 = !{!27, !31, !181, !181, !184}
!326 = !DILocalVariable(name: "rp", arg: 1, scope: !323, file: !3, line: 412, type: !31)
!327 = !DILocation(line: 412, column: 19, scope: !323)
!328 = !DILocalVariable(name: "ap", arg: 2, scope: !323, file: !3, line: 412, type: !181)
!329 = !DILocation(line: 412, column: 33, scope: !323)
!330 = !DILocalVariable(name: "bp", arg: 3, scope: !323, file: !3, line: 412, type: !181)
!331 = !DILocation(line: 412, column: 47, scope: !323)
!332 = !DILocalVariable(name: "n", arg: 4, scope: !323, file: !3, line: 412, type: !184)
!333 = !DILocation(line: 412, column: 61, scope: !323)
!334 = !DILocalVariable(name: "i", scope: !323, file: !3, line: 414, type: !184)
!335 = !DILocation(line: 414, column: 13, scope: !323)
!336 = !DILocalVariable(name: "cy", scope: !323, file: !3, line: 415, type: !27)
!337 = !DILocation(line: 415, column: 13, scope: !323)
!338 = !DILocation(line: 417, column: 10, scope: !339)
!339 = distinct !DILexicalBlock(scope: !323, file: !3, line: 417, column: 3)
!340 = !DILocation(line: 417, column: 18, scope: !339)
!341 = !DILocation(line: 417, column: 8, scope: !339)
!342 = !DILocation(line: 417, column: 23, scope: !343)
!343 = distinct !DILexicalBlock(scope: !339, file: !3, line: 417, column: 3)
!344 = !DILocation(line: 417, column: 27, scope: !343)
!345 = !DILocation(line: 417, column: 25, scope: !343)
!346 = !DILocation(line: 417, column: 3, scope: !339)
!347 = !DILocalVariable(name: "a", scope: !348, file: !3, line: 419, type: !27)
!348 = distinct !DILexicalBlock(scope: !343, file: !3, line: 418, column: 5)
!349 = !DILocation(line: 419, column: 17, scope: !348)
!350 = !DILocalVariable(name: "b", scope: !348, file: !3, line: 419, type: !27)
!351 = !DILocation(line: 419, column: 20, scope: !348)
!352 = !DILocalVariable(name: "r", scope: !348, file: !3, line: 419, type: !27)
!353 = !DILocation(line: 419, column: 23, scope: !348)
!354 = !DILocation(line: 420, column: 11, scope: !348)
!355 = !DILocation(line: 420, column: 14, scope: !348)
!356 = !DILocation(line: 420, column: 9, scope: !348)
!357 = !DILocation(line: 420, column: 22, scope: !348)
!358 = !DILocation(line: 420, column: 25, scope: !348)
!359 = !DILocation(line: 420, column: 20, scope: !348)
!360 = !DILocation(line: 421, column: 11, scope: !348)
!361 = !DILocation(line: 421, column: 15, scope: !348)
!362 = !DILocation(line: 421, column: 13, scope: !348)
!363 = !DILocation(line: 421, column: 9, scope: !348)
!364 = !DILocation(line: 422, column: 13, scope: !348)
!365 = !DILocation(line: 422, column: 17, scope: !348)
!366 = !DILocation(line: 422, column: 15, scope: !348)
!367 = !DILocation(line: 422, column: 12, scope: !348)
!368 = !DILocation(line: 422, column: 10, scope: !348)
!369 = !DILocation(line: 423, column: 12, scope: !348)
!370 = !DILocation(line: 423, column: 9, scope: !348)
!371 = !DILocation(line: 424, column: 14, scope: !348)
!372 = !DILocation(line: 424, column: 18, scope: !348)
!373 = !DILocation(line: 424, column: 16, scope: !348)
!374 = !DILocation(line: 424, column: 13, scope: !348)
!375 = !DILocation(line: 424, column: 10, scope: !348)
!376 = !DILocation(line: 425, column: 15, scope: !348)
!377 = !DILocation(line: 425, column: 7, scope: !348)
!378 = !DILocation(line: 425, column: 10, scope: !348)
!379 = !DILocation(line: 425, column: 13, scope: !348)
!380 = !DILocation(line: 426, column: 5, scope: !348)
!381 = !DILocation(line: 417, column: 31, scope: !343)
!382 = !DILocation(line: 417, column: 3, scope: !343)
!383 = distinct !{!383, !346, !384}
!384 = !DILocation(line: 426, column: 5, scope: !339)
!385 = !DILocation(line: 427, column: 10, scope: !323)
!386 = !DILocation(line: 427, column: 3, scope: !323)
!387 = distinct !DISubprogram(name: "mpn_add", scope: !3, file: !3, line: 431, type: !388, scopeLine: 432, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!388 = !DISubroutineType(types: !389)
!389 = !{!27, !31, !181, !184, !181, !184}
!390 = !DILocalVariable(name: "rp", arg: 1, scope: !387, file: !3, line: 431, type: !31)
!391 = !DILocation(line: 431, column: 17, scope: !387)
!392 = !DILocalVariable(name: "ap", arg: 2, scope: !387, file: !3, line: 431, type: !181)
!393 = !DILocation(line: 431, column: 31, scope: !387)
!394 = !DILocalVariable(name: "an", arg: 3, scope: !387, file: !3, line: 431, type: !184)
!395 = !DILocation(line: 431, column: 45, scope: !387)
!396 = !DILocalVariable(name: "bp", arg: 4, scope: !387, file: !3, line: 431, type: !181)
!397 = !DILocation(line: 431, column: 59, scope: !387)
!398 = !DILocalVariable(name: "bn", arg: 5, scope: !387, file: !3, line: 431, type: !184)
!399 = !DILocation(line: 431, column: 73, scope: !387)
!400 = !DILocalVariable(name: "cy", scope: !387, file: !3, line: 433, type: !27)
!401 = !DILocation(line: 433, column: 13, scope: !387)
!402 = !DILocation(line: 437, column: 19, scope: !387)
!403 = !DILocation(line: 437, column: 23, scope: !387)
!404 = !DILocation(line: 437, column: 27, scope: !387)
!405 = !DILocation(line: 437, column: 31, scope: !387)
!406 = !DILocation(line: 437, column: 8, scope: !387)
!407 = !DILocation(line: 437, column: 6, scope: !387)
!408 = !DILocation(line: 438, column: 7, scope: !409)
!409 = distinct !DILexicalBlock(scope: !387, file: !3, line: 438, column: 7)
!410 = !DILocation(line: 438, column: 12, scope: !409)
!411 = !DILocation(line: 438, column: 10, scope: !409)
!412 = !DILocation(line: 438, column: 7, scope: !387)
!413 = !DILocation(line: 439, column: 21, scope: !409)
!414 = !DILocation(line: 439, column: 26, scope: !409)
!415 = !DILocation(line: 439, column: 24, scope: !409)
!416 = !DILocation(line: 439, column: 30, scope: !409)
!417 = !DILocation(line: 439, column: 35, scope: !409)
!418 = !DILocation(line: 439, column: 33, scope: !409)
!419 = !DILocation(line: 439, column: 39, scope: !409)
!420 = !DILocation(line: 439, column: 44, scope: !409)
!421 = !DILocation(line: 439, column: 42, scope: !409)
!422 = !DILocation(line: 439, column: 48, scope: !409)
!423 = !DILocation(line: 439, column: 10, scope: !409)
!424 = !DILocation(line: 439, column: 8, scope: !409)
!425 = !DILocation(line: 439, column: 5, scope: !409)
!426 = !DILocation(line: 440, column: 10, scope: !387)
!427 = !DILocation(line: 440, column: 3, scope: !387)
!428 = distinct !DISubprogram(name: "mpn_sub_1", scope: !3, file: !3, line: 444, type: !285, scopeLine: 445, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!429 = !DILocalVariable(name: "rp", arg: 1, scope: !428, file: !3, line: 444, type: !31)
!430 = !DILocation(line: 444, column: 19, scope: !428)
!431 = !DILocalVariable(name: "ap", arg: 2, scope: !428, file: !3, line: 444, type: !181)
!432 = !DILocation(line: 444, column: 33, scope: !428)
!433 = !DILocalVariable(name: "n", arg: 3, scope: !428, file: !3, line: 444, type: !184)
!434 = !DILocation(line: 444, column: 47, scope: !428)
!435 = !DILocalVariable(name: "b", arg: 4, scope: !428, file: !3, line: 444, type: !27)
!436 = !DILocation(line: 444, column: 60, scope: !428)
!437 = !DILocalVariable(name: "i", scope: !428, file: !3, line: 446, type: !184)
!438 = !DILocation(line: 446, column: 13, scope: !428)
!439 = !DILocation(line: 450, column: 5, scope: !428)
!440 = !DILocation(line: 451, column: 3, scope: !428)
!441 = !DILocalVariable(name: "a", scope: !442, file: !3, line: 453, type: !27)
!442 = distinct !DILexicalBlock(scope: !428, file: !3, line: 452, column: 5)
!443 = !DILocation(line: 453, column: 17, scope: !442)
!444 = !DILocation(line: 453, column: 21, scope: !442)
!445 = !DILocation(line: 453, column: 24, scope: !442)
!446 = !DILocalVariable(name: "cy", scope: !442, file: !3, line: 455, type: !27)
!447 = !DILocation(line: 455, column: 17, scope: !442)
!448 = !DILocation(line: 455, column: 22, scope: !442)
!449 = !DILocation(line: 455, column: 26, scope: !442)
!450 = !DILocation(line: 455, column: 24, scope: !442)
!451 = !DILocation(line: 456, column: 15, scope: !442)
!452 = !DILocation(line: 456, column: 19, scope: !442)
!453 = !DILocation(line: 456, column: 17, scope: !442)
!454 = !DILocation(line: 456, column: 7, scope: !442)
!455 = !DILocation(line: 456, column: 10, scope: !442)
!456 = !DILocation(line: 456, column: 13, scope: !442)
!457 = !DILocation(line: 457, column: 11, scope: !442)
!458 = !DILocation(line: 457, column: 9, scope: !442)
!459 = !DILocation(line: 458, column: 5, scope: !442)
!460 = !DILocation(line: 459, column: 10, scope: !428)
!461 = !DILocation(line: 459, column: 16, scope: !428)
!462 = !DILocation(line: 459, column: 14, scope: !428)
!463 = distinct !{!463, !440, !464}
!464 = !DILocation(line: 459, column: 17, scope: !428)
!465 = !DILocation(line: 461, column: 10, scope: !428)
!466 = !DILocation(line: 461, column: 3, scope: !428)
!467 = distinct !DISubprogram(name: "mpn_sub_n", scope: !3, file: !3, line: 465, type: !324, scopeLine: 466, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!468 = !DILocalVariable(name: "rp", arg: 1, scope: !467, file: !3, line: 465, type: !31)
!469 = !DILocation(line: 465, column: 19, scope: !467)
!470 = !DILocalVariable(name: "ap", arg: 2, scope: !467, file: !3, line: 465, type: !181)
!471 = !DILocation(line: 465, column: 33, scope: !467)
!472 = !DILocalVariable(name: "bp", arg: 3, scope: !467, file: !3, line: 465, type: !181)
!473 = !DILocation(line: 465, column: 47, scope: !467)
!474 = !DILocalVariable(name: "n", arg: 4, scope: !467, file: !3, line: 465, type: !184)
!475 = !DILocation(line: 465, column: 61, scope: !467)
!476 = !DILocalVariable(name: "i", scope: !467, file: !3, line: 467, type: !184)
!477 = !DILocation(line: 467, column: 13, scope: !467)
!478 = !DILocalVariable(name: "cy", scope: !467, file: !3, line: 468, type: !27)
!479 = !DILocation(line: 468, column: 13, scope: !467)
!480 = !DILocation(line: 470, column: 10, scope: !481)
!481 = distinct !DILexicalBlock(scope: !467, file: !3, line: 470, column: 3)
!482 = !DILocation(line: 470, column: 18, scope: !481)
!483 = !DILocation(line: 470, column: 8, scope: !481)
!484 = !DILocation(line: 470, column: 23, scope: !485)
!485 = distinct !DILexicalBlock(scope: !481, file: !3, line: 470, column: 3)
!486 = !DILocation(line: 470, column: 27, scope: !485)
!487 = !DILocation(line: 470, column: 25, scope: !485)
!488 = !DILocation(line: 470, column: 3, scope: !481)
!489 = !DILocalVariable(name: "a", scope: !490, file: !3, line: 472, type: !27)
!490 = distinct !DILexicalBlock(scope: !485, file: !3, line: 471, column: 5)
!491 = !DILocation(line: 472, column: 17, scope: !490)
!492 = !DILocalVariable(name: "b", scope: !490, file: !3, line: 472, type: !27)
!493 = !DILocation(line: 472, column: 20, scope: !490)
!494 = !DILocation(line: 473, column: 11, scope: !490)
!495 = !DILocation(line: 473, column: 14, scope: !490)
!496 = !DILocation(line: 473, column: 9, scope: !490)
!497 = !DILocation(line: 473, column: 22, scope: !490)
!498 = !DILocation(line: 473, column: 25, scope: !490)
!499 = !DILocation(line: 473, column: 20, scope: !490)
!500 = !DILocation(line: 474, column: 12, scope: !490)
!501 = !DILocation(line: 474, column: 9, scope: !490)
!502 = !DILocation(line: 475, column: 13, scope: !490)
!503 = !DILocation(line: 475, column: 17, scope: !490)
!504 = !DILocation(line: 475, column: 15, scope: !490)
!505 = !DILocation(line: 475, column: 12, scope: !490)
!506 = !DILocation(line: 475, column: 10, scope: !490)
!507 = !DILocation(line: 476, column: 14, scope: !490)
!508 = !DILocation(line: 476, column: 18, scope: !490)
!509 = !DILocation(line: 476, column: 16, scope: !490)
!510 = !DILocation(line: 476, column: 13, scope: !490)
!511 = !DILocation(line: 476, column: 10, scope: !490)
!512 = !DILocation(line: 477, column: 15, scope: !490)
!513 = !DILocation(line: 477, column: 19, scope: !490)
!514 = !DILocation(line: 477, column: 17, scope: !490)
!515 = !DILocation(line: 477, column: 7, scope: !490)
!516 = !DILocation(line: 477, column: 10, scope: !490)
!517 = !DILocation(line: 477, column: 13, scope: !490)
!518 = !DILocation(line: 478, column: 5, scope: !490)
!519 = !DILocation(line: 470, column: 31, scope: !485)
!520 = !DILocation(line: 470, column: 3, scope: !485)
!521 = distinct !{!521, !488, !522}
!522 = !DILocation(line: 478, column: 5, scope: !481)
!523 = !DILocation(line: 479, column: 10, scope: !467)
!524 = !DILocation(line: 479, column: 3, scope: !467)
!525 = distinct !DISubprogram(name: "mpn_sub", scope: !3, file: !3, line: 483, type: !388, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!526 = !DILocalVariable(name: "rp", arg: 1, scope: !525, file: !3, line: 483, type: !31)
!527 = !DILocation(line: 483, column: 17, scope: !525)
!528 = !DILocalVariable(name: "ap", arg: 2, scope: !525, file: !3, line: 483, type: !181)
!529 = !DILocation(line: 483, column: 31, scope: !525)
!530 = !DILocalVariable(name: "an", arg: 3, scope: !525, file: !3, line: 483, type: !184)
!531 = !DILocation(line: 483, column: 45, scope: !525)
!532 = !DILocalVariable(name: "bp", arg: 4, scope: !525, file: !3, line: 483, type: !181)
!533 = !DILocation(line: 483, column: 59, scope: !525)
!534 = !DILocalVariable(name: "bn", arg: 5, scope: !525, file: !3, line: 483, type: !184)
!535 = !DILocation(line: 483, column: 73, scope: !525)
!536 = !DILocalVariable(name: "cy", scope: !525, file: !3, line: 485, type: !27)
!537 = !DILocation(line: 485, column: 13, scope: !525)
!538 = !DILocation(line: 489, column: 19, scope: !525)
!539 = !DILocation(line: 489, column: 23, scope: !525)
!540 = !DILocation(line: 489, column: 27, scope: !525)
!541 = !DILocation(line: 489, column: 31, scope: !525)
!542 = !DILocation(line: 489, column: 8, scope: !525)
!543 = !DILocation(line: 489, column: 6, scope: !525)
!544 = !DILocation(line: 490, column: 7, scope: !545)
!545 = distinct !DILexicalBlock(scope: !525, file: !3, line: 490, column: 7)
!546 = !DILocation(line: 490, column: 12, scope: !545)
!547 = !DILocation(line: 490, column: 10, scope: !545)
!548 = !DILocation(line: 490, column: 7, scope: !525)
!549 = !DILocation(line: 491, column: 21, scope: !545)
!550 = !DILocation(line: 491, column: 26, scope: !545)
!551 = !DILocation(line: 491, column: 24, scope: !545)
!552 = !DILocation(line: 491, column: 30, scope: !545)
!553 = !DILocation(line: 491, column: 35, scope: !545)
!554 = !DILocation(line: 491, column: 33, scope: !545)
!555 = !DILocation(line: 491, column: 39, scope: !545)
!556 = !DILocation(line: 491, column: 44, scope: !545)
!557 = !DILocation(line: 491, column: 42, scope: !545)
!558 = !DILocation(line: 491, column: 48, scope: !545)
!559 = !DILocation(line: 491, column: 10, scope: !545)
!560 = !DILocation(line: 491, column: 8, scope: !545)
!561 = !DILocation(line: 491, column: 5, scope: !545)
!562 = !DILocation(line: 492, column: 10, scope: !525)
!563 = !DILocation(line: 492, column: 3, scope: !525)
!564 = distinct !DISubprogram(name: "mpn_mul_1", scope: !3, file: !3, line: 496, type: !285, scopeLine: 497, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!565 = !DILocalVariable(name: "rp", arg: 1, scope: !564, file: !3, line: 496, type: !31)
!566 = !DILocation(line: 496, column: 19, scope: !564)
!567 = !DILocalVariable(name: "up", arg: 2, scope: !564, file: !3, line: 496, type: !181)
!568 = !DILocation(line: 496, column: 33, scope: !564)
!569 = !DILocalVariable(name: "n", arg: 3, scope: !564, file: !3, line: 496, type: !184)
!570 = !DILocation(line: 496, column: 47, scope: !564)
!571 = !DILocalVariable(name: "vl", arg: 4, scope: !564, file: !3, line: 496, type: !27)
!572 = !DILocation(line: 496, column: 60, scope: !564)
!573 = !DILocalVariable(name: "ul", scope: !564, file: !3, line: 498, type: !27)
!574 = !DILocation(line: 498, column: 13, scope: !564)
!575 = !DILocalVariable(name: "cl", scope: !564, file: !3, line: 498, type: !27)
!576 = !DILocation(line: 498, column: 17, scope: !564)
!577 = !DILocalVariable(name: "hpl", scope: !564, file: !3, line: 498, type: !27)
!578 = !DILocation(line: 498, column: 21, scope: !564)
!579 = !DILocalVariable(name: "lpl", scope: !564, file: !3, line: 498, type: !27)
!580 = !DILocation(line: 498, column: 26, scope: !564)
!581 = !DILocation(line: 502, column: 6, scope: !564)
!582 = !DILocation(line: 503, column: 3, scope: !564)
!583 = !DILocation(line: 505, column: 15, scope: !584)
!584 = distinct !DILexicalBlock(scope: !564, file: !3, line: 504, column: 5)
!585 = !DILocation(line: 505, column: 12, scope: !584)
!586 = !DILocation(line: 505, column: 10, scope: !584)
!587 = !DILocation(line: 506, column: 7, scope: !584)
!588 = !DILocalVariable(name: "__x0", scope: !589, file: !3, line: 506, type: !27)
!589 = distinct !DILexicalBlock(scope: !584, file: !3, line: 506, column: 7)
!590 = !DILocation(line: 506, column: 7, scope: !589)
!591 = !DILocalVariable(name: "__x1", scope: !589, file: !3, line: 506, type: !27)
!592 = !DILocalVariable(name: "__x2", scope: !589, file: !3, line: 506, type: !27)
!593 = !DILocalVariable(name: "__x3", scope: !589, file: !3, line: 506, type: !27)
!594 = !DILocalVariable(name: "__ul", scope: !589, file: !3, line: 506, type: !6)
!595 = !DILocalVariable(name: "__vl", scope: !589, file: !3, line: 506, type: !6)
!596 = !DILocalVariable(name: "__uh", scope: !589, file: !3, line: 506, type: !6)
!597 = !DILocalVariable(name: "__vh", scope: !589, file: !3, line: 506, type: !6)
!598 = !DILocalVariable(name: "__u", scope: !589, file: !3, line: 506, type: !27)
!599 = !DILocalVariable(name: "__v", scope: !589, file: !3, line: 506, type: !27)
!600 = !DILocation(line: 506, column: 7, scope: !601)
!601 = distinct !DILexicalBlock(scope: !589, file: !3, line: 506, column: 7)
!602 = !DILocation(line: 508, column: 14, scope: !584)
!603 = !DILocation(line: 508, column: 11, scope: !584)
!604 = !DILocation(line: 509, column: 13, scope: !584)
!605 = !DILocation(line: 509, column: 19, scope: !584)
!606 = !DILocation(line: 509, column: 17, scope: !584)
!607 = !DILocation(line: 509, column: 12, scope: !584)
!608 = !DILocation(line: 509, column: 25, scope: !584)
!609 = !DILocation(line: 509, column: 23, scope: !584)
!610 = !DILocation(line: 509, column: 10, scope: !584)
!611 = !DILocation(line: 511, column: 15, scope: !584)
!612 = !DILocation(line: 511, column: 10, scope: !584)
!613 = !DILocation(line: 511, column: 13, scope: !584)
!614 = !DILocation(line: 512, column: 5, scope: !584)
!615 = !DILocation(line: 513, column: 10, scope: !564)
!616 = !DILocation(line: 513, column: 14, scope: !564)
!617 = distinct !{!617, !582, !618}
!618 = !DILocation(line: 513, column: 18, scope: !564)
!619 = !DILocation(line: 515, column: 10, scope: !564)
!620 = !DILocation(line: 515, column: 3, scope: !564)
!621 = distinct !DISubprogram(name: "mpn_addmul_1", scope: !3, file: !3, line: 519, type: !285, scopeLine: 520, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!622 = !DILocalVariable(name: "rp", arg: 1, scope: !621, file: !3, line: 519, type: !31)
!623 = !DILocation(line: 519, column: 22, scope: !621)
!624 = !DILocalVariable(name: "up", arg: 2, scope: !621, file: !3, line: 519, type: !181)
!625 = !DILocation(line: 519, column: 36, scope: !621)
!626 = !DILocalVariable(name: "n", arg: 3, scope: !621, file: !3, line: 519, type: !184)
!627 = !DILocation(line: 519, column: 50, scope: !621)
!628 = !DILocalVariable(name: "vl", arg: 4, scope: !621, file: !3, line: 519, type: !27)
!629 = !DILocation(line: 519, column: 63, scope: !621)
!630 = !DILocalVariable(name: "ul", scope: !621, file: !3, line: 521, type: !27)
!631 = !DILocation(line: 521, column: 13, scope: !621)
!632 = !DILocalVariable(name: "cl", scope: !621, file: !3, line: 521, type: !27)
!633 = !DILocation(line: 521, column: 17, scope: !621)
!634 = !DILocalVariable(name: "hpl", scope: !621, file: !3, line: 521, type: !27)
!635 = !DILocation(line: 521, column: 21, scope: !621)
!636 = !DILocalVariable(name: "lpl", scope: !621, file: !3, line: 521, type: !27)
!637 = !DILocation(line: 521, column: 26, scope: !621)
!638 = !DILocalVariable(name: "rl", scope: !621, file: !3, line: 521, type: !27)
!639 = !DILocation(line: 521, column: 31, scope: !621)
!640 = !DILocation(line: 525, column: 6, scope: !621)
!641 = !DILocation(line: 526, column: 3, scope: !621)
!642 = !DILocation(line: 528, column: 15, scope: !643)
!643 = distinct !DILexicalBlock(scope: !621, file: !3, line: 527, column: 5)
!644 = !DILocation(line: 528, column: 12, scope: !643)
!645 = !DILocation(line: 528, column: 10, scope: !643)
!646 = !DILocation(line: 529, column: 7, scope: !643)
!647 = !DILocalVariable(name: "__x0", scope: !648, file: !3, line: 529, type: !27)
!648 = distinct !DILexicalBlock(scope: !643, file: !3, line: 529, column: 7)
!649 = !DILocation(line: 529, column: 7, scope: !648)
!650 = !DILocalVariable(name: "__x1", scope: !648, file: !3, line: 529, type: !27)
!651 = !DILocalVariable(name: "__x2", scope: !648, file: !3, line: 529, type: !27)
!652 = !DILocalVariable(name: "__x3", scope: !648, file: !3, line: 529, type: !27)
!653 = !DILocalVariable(name: "__ul", scope: !648, file: !3, line: 529, type: !6)
!654 = !DILocalVariable(name: "__vl", scope: !648, file: !3, line: 529, type: !6)
!655 = !DILocalVariable(name: "__uh", scope: !648, file: !3, line: 529, type: !6)
!656 = !DILocalVariable(name: "__vh", scope: !648, file: !3, line: 529, type: !6)
!657 = !DILocalVariable(name: "__u", scope: !648, file: !3, line: 529, type: !27)
!658 = !DILocalVariable(name: "__v", scope: !648, file: !3, line: 529, type: !27)
!659 = !DILocation(line: 529, column: 7, scope: !660)
!660 = distinct !DILexicalBlock(scope: !648, file: !3, line: 529, column: 7)
!661 = !DILocation(line: 531, column: 14, scope: !643)
!662 = !DILocation(line: 531, column: 11, scope: !643)
!663 = !DILocation(line: 532, column: 13, scope: !643)
!664 = !DILocation(line: 532, column: 19, scope: !643)
!665 = !DILocation(line: 532, column: 17, scope: !643)
!666 = !DILocation(line: 532, column: 12, scope: !643)
!667 = !DILocation(line: 532, column: 25, scope: !643)
!668 = !DILocation(line: 532, column: 23, scope: !643)
!669 = !DILocation(line: 532, column: 10, scope: !643)
!670 = !DILocation(line: 534, column: 13, scope: !643)
!671 = !DILocation(line: 534, column: 12, scope: !643)
!672 = !DILocation(line: 534, column: 10, scope: !643)
!673 = !DILocation(line: 535, column: 13, scope: !643)
!674 = !DILocation(line: 535, column: 18, scope: !643)
!675 = !DILocation(line: 535, column: 16, scope: !643)
!676 = !DILocation(line: 535, column: 11, scope: !643)
!677 = !DILocation(line: 536, column: 13, scope: !643)
!678 = !DILocation(line: 536, column: 19, scope: !643)
!679 = !DILocation(line: 536, column: 17, scope: !643)
!680 = !DILocation(line: 536, column: 10, scope: !643)
!681 = !DILocation(line: 537, column: 15, scope: !643)
!682 = !DILocation(line: 537, column: 10, scope: !643)
!683 = !DILocation(line: 537, column: 13, scope: !643)
!684 = !DILocation(line: 538, column: 5, scope: !643)
!685 = !DILocation(line: 539, column: 10, scope: !621)
!686 = !DILocation(line: 539, column: 14, scope: !621)
!687 = distinct !{!687, !641, !688}
!688 = !DILocation(line: 539, column: 18, scope: !621)
!689 = !DILocation(line: 541, column: 10, scope: !621)
!690 = !DILocation(line: 541, column: 3, scope: !621)
!691 = distinct !DISubprogram(name: "mpn_submul_1", scope: !3, file: !3, line: 545, type: !285, scopeLine: 546, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!692 = !DILocalVariable(name: "rp", arg: 1, scope: !691, file: !3, line: 545, type: !31)
!693 = !DILocation(line: 545, column: 22, scope: !691)
!694 = !DILocalVariable(name: "up", arg: 2, scope: !691, file: !3, line: 545, type: !181)
!695 = !DILocation(line: 545, column: 36, scope: !691)
!696 = !DILocalVariable(name: "n", arg: 3, scope: !691, file: !3, line: 545, type: !184)
!697 = !DILocation(line: 545, column: 50, scope: !691)
!698 = !DILocalVariable(name: "vl", arg: 4, scope: !691, file: !3, line: 545, type: !27)
!699 = !DILocation(line: 545, column: 63, scope: !691)
!700 = !DILocalVariable(name: "ul", scope: !691, file: !3, line: 547, type: !27)
!701 = !DILocation(line: 547, column: 13, scope: !691)
!702 = !DILocalVariable(name: "cl", scope: !691, file: !3, line: 547, type: !27)
!703 = !DILocation(line: 547, column: 17, scope: !691)
!704 = !DILocalVariable(name: "hpl", scope: !691, file: !3, line: 547, type: !27)
!705 = !DILocation(line: 547, column: 21, scope: !691)
!706 = !DILocalVariable(name: "lpl", scope: !691, file: !3, line: 547, type: !27)
!707 = !DILocation(line: 547, column: 26, scope: !691)
!708 = !DILocalVariable(name: "rl", scope: !691, file: !3, line: 547, type: !27)
!709 = !DILocation(line: 547, column: 31, scope: !691)
!710 = !DILocation(line: 551, column: 6, scope: !691)
!711 = !DILocation(line: 552, column: 3, scope: !691)
!712 = !DILocation(line: 554, column: 15, scope: !713)
!713 = distinct !DILexicalBlock(scope: !691, file: !3, line: 553, column: 5)
!714 = !DILocation(line: 554, column: 12, scope: !713)
!715 = !DILocation(line: 554, column: 10, scope: !713)
!716 = !DILocation(line: 555, column: 7, scope: !713)
!717 = !DILocalVariable(name: "__x0", scope: !718, file: !3, line: 555, type: !27)
!718 = distinct !DILexicalBlock(scope: !713, file: !3, line: 555, column: 7)
!719 = !DILocation(line: 555, column: 7, scope: !718)
!720 = !DILocalVariable(name: "__x1", scope: !718, file: !3, line: 555, type: !27)
!721 = !DILocalVariable(name: "__x2", scope: !718, file: !3, line: 555, type: !27)
!722 = !DILocalVariable(name: "__x3", scope: !718, file: !3, line: 555, type: !27)
!723 = !DILocalVariable(name: "__ul", scope: !718, file: !3, line: 555, type: !6)
!724 = !DILocalVariable(name: "__vl", scope: !718, file: !3, line: 555, type: !6)
!725 = !DILocalVariable(name: "__uh", scope: !718, file: !3, line: 555, type: !6)
!726 = !DILocalVariable(name: "__vh", scope: !718, file: !3, line: 555, type: !6)
!727 = !DILocalVariable(name: "__u", scope: !718, file: !3, line: 555, type: !27)
!728 = !DILocalVariable(name: "__v", scope: !718, file: !3, line: 555, type: !27)
!729 = !DILocation(line: 555, column: 7, scope: !730)
!730 = distinct !DILexicalBlock(scope: !718, file: !3, line: 555, column: 7)
!731 = !DILocation(line: 557, column: 14, scope: !713)
!732 = !DILocation(line: 557, column: 11, scope: !713)
!733 = !DILocation(line: 558, column: 13, scope: !713)
!734 = !DILocation(line: 558, column: 19, scope: !713)
!735 = !DILocation(line: 558, column: 17, scope: !713)
!736 = !DILocation(line: 558, column: 12, scope: !713)
!737 = !DILocation(line: 558, column: 25, scope: !713)
!738 = !DILocation(line: 558, column: 23, scope: !713)
!739 = !DILocation(line: 558, column: 10, scope: !713)
!740 = !DILocation(line: 560, column: 13, scope: !713)
!741 = !DILocation(line: 560, column: 12, scope: !713)
!742 = !DILocation(line: 560, column: 10, scope: !713)
!743 = !DILocation(line: 561, column: 13, scope: !713)
!744 = !DILocation(line: 561, column: 18, scope: !713)
!745 = !DILocation(line: 561, column: 16, scope: !713)
!746 = !DILocation(line: 561, column: 11, scope: !713)
!747 = !DILocation(line: 562, column: 13, scope: !713)
!748 = !DILocation(line: 562, column: 19, scope: !713)
!749 = !DILocation(line: 562, column: 17, scope: !713)
!750 = !DILocation(line: 562, column: 10, scope: !713)
!751 = !DILocation(line: 563, column: 15, scope: !713)
!752 = !DILocation(line: 563, column: 10, scope: !713)
!753 = !DILocation(line: 563, column: 13, scope: !713)
!754 = !DILocation(line: 564, column: 5, scope: !713)
!755 = !DILocation(line: 565, column: 10, scope: !691)
!756 = !DILocation(line: 565, column: 14, scope: !691)
!757 = distinct !{!757, !711, !758}
!758 = !DILocation(line: 565, column: 18, scope: !691)
!759 = !DILocation(line: 567, column: 10, scope: !691)
!760 = !DILocation(line: 567, column: 3, scope: !691)
!761 = distinct !DISubprogram(name: "mpn_mul", scope: !3, file: !3, line: 571, type: !388, scopeLine: 572, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!762 = !DILocalVariable(name: "rp", arg: 1, scope: !761, file: !3, line: 571, type: !31)
!763 = !DILocation(line: 571, column: 17, scope: !761)
!764 = !DILocalVariable(name: "up", arg: 2, scope: !761, file: !3, line: 571, type: !181)
!765 = !DILocation(line: 571, column: 31, scope: !761)
!766 = !DILocalVariable(name: "un", arg: 3, scope: !761, file: !3, line: 571, type: !184)
!767 = !DILocation(line: 571, column: 45, scope: !761)
!768 = !DILocalVariable(name: "vp", arg: 4, scope: !761, file: !3, line: 571, type: !181)
!769 = !DILocation(line: 571, column: 59, scope: !761)
!770 = !DILocalVariable(name: "vn", arg: 5, scope: !761, file: !3, line: 571, type: !184)
!771 = !DILocation(line: 571, column: 73, scope: !761)
!772 = !DILocation(line: 580, column: 23, scope: !761)
!773 = !DILocation(line: 580, column: 27, scope: !761)
!774 = !DILocation(line: 580, column: 31, scope: !761)
!775 = !DILocation(line: 580, column: 35, scope: !761)
!776 = !DILocation(line: 580, column: 12, scope: !761)
!777 = !DILocation(line: 580, column: 3, scope: !761)
!778 = !DILocation(line: 580, column: 6, scope: !761)
!779 = !DILocation(line: 580, column: 10, scope: !761)
!780 = !DILocation(line: 581, column: 6, scope: !761)
!781 = !DILocation(line: 581, column: 15, scope: !761)
!782 = !DILocation(line: 581, column: 24, scope: !761)
!783 = !DILocation(line: 586, column: 3, scope: !761)
!784 = !DILocation(line: 586, column: 10, scope: !761)
!785 = !DILocation(line: 586, column: 13, scope: !761)
!786 = !DILocation(line: 588, column: 30, scope: !787)
!787 = distinct !DILexicalBlock(scope: !761, file: !3, line: 587, column: 5)
!788 = !DILocation(line: 588, column: 34, scope: !787)
!789 = !DILocation(line: 588, column: 38, scope: !787)
!790 = !DILocation(line: 588, column: 42, scope: !787)
!791 = !DILocation(line: 588, column: 16, scope: !787)
!792 = !DILocation(line: 588, column: 7, scope: !787)
!793 = !DILocation(line: 588, column: 10, scope: !787)
!794 = !DILocation(line: 588, column: 14, scope: !787)
!795 = !DILocation(line: 589, column: 10, scope: !787)
!796 = !DILocation(line: 589, column: 19, scope: !787)
!797 = !DILocation(line: 589, column: 28, scope: !787)
!798 = distinct !{!798, !783, !799}
!799 = !DILocation(line: 590, column: 5, scope: !761)
!800 = !DILocation(line: 591, column: 10, scope: !761)
!801 = !DILocation(line: 591, column: 13, scope: !761)
!802 = !DILocation(line: 591, column: 16, scope: !761)
!803 = !DILocation(line: 591, column: 3, scope: !761)
!804 = distinct !DISubprogram(name: "mpn_mul_n", scope: !3, file: !3, line: 595, type: !805, scopeLine: 596, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!805 = !DISubroutineType(types: !806)
!806 = !{null, !31, !181, !181, !184}
!807 = !DILocalVariable(name: "rp", arg: 1, scope: !804, file: !3, line: 595, type: !31)
!808 = !DILocation(line: 595, column: 19, scope: !804)
!809 = !DILocalVariable(name: "ap", arg: 2, scope: !804, file: !3, line: 595, type: !181)
!810 = !DILocation(line: 595, column: 33, scope: !804)
!811 = !DILocalVariable(name: "bp", arg: 3, scope: !804, file: !3, line: 595, type: !181)
!812 = !DILocation(line: 595, column: 47, scope: !804)
!813 = !DILocalVariable(name: "n", arg: 4, scope: !804, file: !3, line: 595, type: !184)
!814 = !DILocation(line: 595, column: 61, scope: !804)
!815 = !DILocation(line: 597, column: 12, scope: !804)
!816 = !DILocation(line: 597, column: 16, scope: !804)
!817 = !DILocation(line: 597, column: 20, scope: !804)
!818 = !DILocation(line: 597, column: 23, scope: !804)
!819 = !DILocation(line: 597, column: 27, scope: !804)
!820 = !DILocation(line: 597, column: 3, scope: !804)
!821 = !DILocation(line: 598, column: 1, scope: !804)
!822 = distinct !DISubprogram(name: "mpn_sqr", scope: !3, file: !3, line: 601, type: !179, scopeLine: 602, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!823 = !DILocalVariable(name: "rp", arg: 1, scope: !822, file: !3, line: 601, type: !31)
!824 = !DILocation(line: 601, column: 17, scope: !822)
!825 = !DILocalVariable(name: "ap", arg: 2, scope: !822, file: !3, line: 601, type: !181)
!826 = !DILocation(line: 601, column: 31, scope: !822)
!827 = !DILocalVariable(name: "n", arg: 3, scope: !822, file: !3, line: 601, type: !184)
!828 = !DILocation(line: 601, column: 45, scope: !822)
!829 = !DILocation(line: 603, column: 12, scope: !822)
!830 = !DILocation(line: 603, column: 16, scope: !822)
!831 = !DILocation(line: 603, column: 20, scope: !822)
!832 = !DILocation(line: 603, column: 23, scope: !822)
!833 = !DILocation(line: 603, column: 27, scope: !822)
!834 = !DILocation(line: 603, column: 3, scope: !822)
!835 = !DILocation(line: 604, column: 1, scope: !822)
!836 = distinct !DISubprogram(name: "mpn_lshift", scope: !3, file: !3, line: 607, type: !837, scopeLine: 608, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!837 = !DISubroutineType(types: !838)
!838 = !{!27, !31, !181, !184, !6}
!839 = !DILocalVariable(name: "rp", arg: 1, scope: !836, file: !3, line: 607, type: !31)
!840 = !DILocation(line: 607, column: 20, scope: !836)
!841 = !DILocalVariable(name: "up", arg: 2, scope: !836, file: !3, line: 607, type: !181)
!842 = !DILocation(line: 607, column: 34, scope: !836)
!843 = !DILocalVariable(name: "n", arg: 3, scope: !836, file: !3, line: 607, type: !184)
!844 = !DILocation(line: 607, column: 48, scope: !836)
!845 = !DILocalVariable(name: "cnt", arg: 4, scope: !836, file: !3, line: 607, type: !6)
!846 = !DILocation(line: 607, column: 64, scope: !836)
!847 = !DILocalVariable(name: "high_limb", scope: !836, file: !3, line: 609, type: !27)
!848 = !DILocation(line: 609, column: 13, scope: !836)
!849 = !DILocalVariable(name: "low_limb", scope: !836, file: !3, line: 609, type: !27)
!850 = !DILocation(line: 609, column: 24, scope: !836)
!851 = !DILocalVariable(name: "tnc", scope: !836, file: !3, line: 610, type: !6)
!852 = !DILocation(line: 610, column: 16, scope: !836)
!853 = !DILocalVariable(name: "i", scope: !836, file: !3, line: 611, type: !184)
!854 = !DILocation(line: 611, column: 13, scope: !836)
!855 = !DILocalVariable(name: "retval", scope: !836, file: !3, line: 612, type: !27)
!856 = !DILocation(line: 612, column: 13, scope: !836)
!857 = !DILocation(line: 618, column: 9, scope: !836)
!858 = !DILocation(line: 618, column: 6, scope: !836)
!859 = !DILocation(line: 619, column: 9, scope: !836)
!860 = !DILocation(line: 619, column: 6, scope: !836)
!861 = !DILocation(line: 621, column: 25, scope: !836)
!862 = !DILocation(line: 621, column: 23, scope: !836)
!863 = !DILocation(line: 621, column: 9, scope: !836)
!864 = !DILocation(line: 621, column: 7, scope: !836)
!865 = !DILocation(line: 622, column: 15, scope: !836)
!866 = !DILocation(line: 622, column: 14, scope: !836)
!867 = !DILocation(line: 622, column: 12, scope: !836)
!868 = !DILocation(line: 623, column: 12, scope: !836)
!869 = !DILocation(line: 623, column: 24, scope: !836)
!870 = !DILocation(line: 623, column: 21, scope: !836)
!871 = !DILocation(line: 623, column: 10, scope: !836)
!872 = !DILocation(line: 624, column: 16, scope: !836)
!873 = !DILocation(line: 624, column: 28, scope: !836)
!874 = !DILocation(line: 624, column: 25, scope: !836)
!875 = !DILocation(line: 624, column: 13, scope: !836)
!876 = !DILocation(line: 626, column: 12, scope: !877)
!877 = distinct !DILexicalBlock(scope: !836, file: !3, line: 626, column: 3)
!878 = !DILocation(line: 626, column: 10, scope: !877)
!879 = !DILocation(line: 626, column: 8, scope: !877)
!880 = !DILocation(line: 626, column: 15, scope: !881)
!881 = distinct !DILexicalBlock(scope: !877, file: !3, line: 626, column: 3)
!882 = !DILocation(line: 626, column: 19, scope: !881)
!883 = !DILocation(line: 626, column: 3, scope: !877)
!884 = !DILocation(line: 628, column: 19, scope: !885)
!885 = distinct !DILexicalBlock(scope: !881, file: !3, line: 627, column: 5)
!886 = !DILocation(line: 628, column: 18, scope: !885)
!887 = !DILocation(line: 628, column: 16, scope: !885)
!888 = !DILocation(line: 629, column: 15, scope: !885)
!889 = !DILocation(line: 629, column: 28, scope: !885)
!890 = !DILocation(line: 629, column: 40, scope: !885)
!891 = !DILocation(line: 629, column: 37, scope: !885)
!892 = !DILocation(line: 629, column: 25, scope: !885)
!893 = !DILocation(line: 629, column: 8, scope: !885)
!894 = !DILocation(line: 629, column: 13, scope: !885)
!895 = !DILocation(line: 630, column: 20, scope: !885)
!896 = !DILocation(line: 630, column: 32, scope: !885)
!897 = !DILocation(line: 630, column: 29, scope: !885)
!898 = !DILocation(line: 630, column: 17, scope: !885)
!899 = !DILocation(line: 626, column: 3, scope: !881)
!900 = distinct !{!900, !883, !901}
!901 = !DILocation(line: 631, column: 5, scope: !877)
!902 = !DILocation(line: 632, column: 11, scope: !836)
!903 = !DILocation(line: 632, column: 4, scope: !836)
!904 = !DILocation(line: 632, column: 9, scope: !836)
!905 = !DILocation(line: 634, column: 10, scope: !836)
!906 = !DILocation(line: 634, column: 3, scope: !836)
!907 = distinct !DISubprogram(name: "mpn_rshift", scope: !3, file: !3, line: 638, type: !837, scopeLine: 639, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!908 = !DILocalVariable(name: "rp", arg: 1, scope: !907, file: !3, line: 638, type: !31)
!909 = !DILocation(line: 638, column: 20, scope: !907)
!910 = !DILocalVariable(name: "up", arg: 2, scope: !907, file: !3, line: 638, type: !181)
!911 = !DILocation(line: 638, column: 34, scope: !907)
!912 = !DILocalVariable(name: "n", arg: 3, scope: !907, file: !3, line: 638, type: !184)
!913 = !DILocation(line: 638, column: 48, scope: !907)
!914 = !DILocalVariable(name: "cnt", arg: 4, scope: !907, file: !3, line: 638, type: !6)
!915 = !DILocation(line: 638, column: 64, scope: !907)
!916 = !DILocalVariable(name: "high_limb", scope: !907, file: !3, line: 640, type: !27)
!917 = !DILocation(line: 640, column: 13, scope: !907)
!918 = !DILocalVariable(name: "low_limb", scope: !907, file: !3, line: 640, type: !27)
!919 = !DILocation(line: 640, column: 24, scope: !907)
!920 = !DILocalVariable(name: "tnc", scope: !907, file: !3, line: 641, type: !6)
!921 = !DILocation(line: 641, column: 16, scope: !907)
!922 = !DILocalVariable(name: "i", scope: !907, file: !3, line: 642, type: !184)
!923 = !DILocation(line: 642, column: 13, scope: !907)
!924 = !DILocalVariable(name: "retval", scope: !907, file: !3, line: 643, type: !27)
!925 = !DILocation(line: 643, column: 13, scope: !907)
!926 = !DILocation(line: 649, column: 25, scope: !907)
!927 = !DILocation(line: 649, column: 23, scope: !907)
!928 = !DILocation(line: 649, column: 9, scope: !907)
!929 = !DILocation(line: 649, column: 7, scope: !907)
!930 = !DILocation(line: 650, column: 18, scope: !907)
!931 = !DILocation(line: 650, column: 15, scope: !907)
!932 = !DILocation(line: 650, column: 13, scope: !907)
!933 = !DILocation(line: 651, column: 13, scope: !907)
!934 = !DILocation(line: 651, column: 26, scope: !907)
!935 = !DILocation(line: 651, column: 23, scope: !907)
!936 = !DILocation(line: 651, column: 10, scope: !907)
!937 = !DILocation(line: 652, column: 14, scope: !907)
!938 = !DILocation(line: 652, column: 27, scope: !907)
!939 = !DILocation(line: 652, column: 24, scope: !907)
!940 = !DILocation(line: 652, column: 12, scope: !907)
!941 = !DILocation(line: 654, column: 12, scope: !942)
!942 = distinct !DILexicalBlock(scope: !907, file: !3, line: 654, column: 3)
!943 = !DILocation(line: 654, column: 10, scope: !942)
!944 = !DILocation(line: 654, column: 8, scope: !942)
!945 = !DILocation(line: 654, column: 15, scope: !946)
!946 = distinct !DILexicalBlock(scope: !942, file: !3, line: 654, column: 3)
!947 = !DILocation(line: 654, column: 19, scope: !946)
!948 = !DILocation(line: 654, column: 3, scope: !942)
!949 = !DILocation(line: 656, column: 22, scope: !950)
!950 = distinct !DILexicalBlock(scope: !946, file: !3, line: 655, column: 5)
!951 = !DILocation(line: 656, column: 19, scope: !950)
!952 = !DILocation(line: 656, column: 17, scope: !950)
!953 = !DILocation(line: 657, column: 15, scope: !950)
!954 = !DILocation(line: 657, column: 27, scope: !950)
!955 = !DILocation(line: 657, column: 40, scope: !950)
!956 = !DILocation(line: 657, column: 37, scope: !950)
!957 = !DILocation(line: 657, column: 24, scope: !950)
!958 = !DILocation(line: 657, column: 10, scope: !950)
!959 = !DILocation(line: 657, column: 13, scope: !950)
!960 = !DILocation(line: 658, column: 18, scope: !950)
!961 = !DILocation(line: 658, column: 31, scope: !950)
!962 = !DILocation(line: 658, column: 28, scope: !950)
!963 = !DILocation(line: 658, column: 16, scope: !950)
!964 = !DILocation(line: 654, column: 3, scope: !946)
!965 = distinct !{!965, !948, !966}
!966 = !DILocation(line: 659, column: 5, scope: !942)
!967 = !DILocation(line: 660, column: 9, scope: !907)
!968 = !DILocation(line: 660, column: 4, scope: !907)
!969 = !DILocation(line: 660, column: 7, scope: !907)
!970 = !DILocation(line: 662, column: 10, scope: !907)
!971 = !DILocation(line: 662, column: 3, scope: !907)
!972 = distinct !DISubprogram(name: "mpn_scan1", scope: !3, file: !3, line: 686, type: !973, scopeLine: 687, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!973 = !DISubroutineType(types: !974)
!974 = !{!35, !181, !35}
!975 = !DILocalVariable(name: "ptr", arg: 1, scope: !972, file: !3, line: 686, type: !181)
!976 = !DILocation(line: 686, column: 22, scope: !972)
!977 = !DILocalVariable(name: "bit", arg: 2, scope: !972, file: !3, line: 686, type: !35)
!978 = !DILocation(line: 686, column: 39, scope: !972)
!979 = !DILocalVariable(name: "i", scope: !972, file: !3, line: 688, type: !184)
!980 = !DILocation(line: 688, column: 13, scope: !972)
!981 = !DILocation(line: 689, column: 7, scope: !972)
!982 = !DILocation(line: 689, column: 11, scope: !972)
!983 = !DILocation(line: 689, column: 5, scope: !972)
!984 = !DILocation(line: 691, column: 28, scope: !972)
!985 = !DILocation(line: 691, column: 32, scope: !972)
!986 = !DILocation(line: 691, column: 55, scope: !972)
!987 = !DILocation(line: 691, column: 59, scope: !972)
!988 = !DILocation(line: 691, column: 51, scope: !972)
!989 = !DILocation(line: 691, column: 35, scope: !972)
!990 = !DILocation(line: 692, column: 6, scope: !972)
!991 = !DILocation(line: 692, column: 9, scope: !972)
!992 = !DILocation(line: 692, column: 14, scope: !972)
!993 = !DILocation(line: 691, column: 10, scope: !972)
!994 = !DILocation(line: 691, column: 3, scope: !972)
!995 = distinct !DISubprogram(name: "mpn_common_scan", scope: !3, file: !3, line: 666, type: !996, scopeLine: 668, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!996 = !DISubroutineType(types: !997)
!997 = !{!35, !27, !184, !181, !184, !27}
!998 = !DILocalVariable(name: "limb", arg: 1, scope: !995, file: !3, line: 666, type: !27)
!999 = !DILocation(line: 666, column: 28, scope: !995)
!1000 = !DILocalVariable(name: "i", arg: 2, scope: !995, file: !3, line: 666, type: !184)
!1001 = !DILocation(line: 666, column: 44, scope: !995)
!1002 = !DILocalVariable(name: "up", arg: 3, scope: !995, file: !3, line: 666, type: !181)
!1003 = !DILocation(line: 666, column: 57, scope: !995)
!1004 = !DILocalVariable(name: "un", arg: 4, scope: !995, file: !3, line: 666, type: !184)
!1005 = !DILocation(line: 666, column: 71, scope: !995)
!1006 = !DILocalVariable(name: "ux", arg: 5, scope: !995, file: !3, line: 667, type: !27)
!1007 = !DILocation(line: 667, column: 14, scope: !995)
!1008 = !DILocalVariable(name: "cnt", scope: !995, file: !3, line: 669, type: !6)
!1009 = !DILocation(line: 669, column: 12, scope: !995)
!1010 = !DILocation(line: 674, column: 3, scope: !995)
!1011 = !DILocation(line: 674, column: 10, scope: !995)
!1012 = !DILocation(line: 674, column: 15, scope: !995)
!1013 = !DILocation(line: 676, column: 8, scope: !1014)
!1014 = distinct !DILexicalBlock(scope: !995, file: !3, line: 675, column: 5)
!1015 = !DILocation(line: 677, column: 11, scope: !1016)
!1016 = distinct !DILexicalBlock(scope: !1014, file: !3, line: 677, column: 11)
!1017 = !DILocation(line: 677, column: 16, scope: !1016)
!1018 = !DILocation(line: 677, column: 13, scope: !1016)
!1019 = !DILocation(line: 677, column: 11, scope: !1014)
!1020 = !DILocation(line: 678, column: 10, scope: !1016)
!1021 = !DILocation(line: 678, column: 13, scope: !1016)
!1022 = !DILocation(line: 678, column: 39, scope: !1016)
!1023 = !DILocation(line: 678, column: 42, scope: !1016)
!1024 = !DILocation(line: 678, column: 2, scope: !1016)
!1025 = !DILocation(line: 679, column: 14, scope: !1014)
!1026 = !DILocation(line: 679, column: 19, scope: !1014)
!1027 = !DILocation(line: 679, column: 22, scope: !1014)
!1028 = !DILocation(line: 679, column: 17, scope: !1014)
!1029 = !DILocation(line: 679, column: 12, scope: !1014)
!1030 = distinct !{!1030, !1010, !1031}
!1031 = !DILocation(line: 680, column: 5, scope: !995)
!1032 = !DILocation(line: 681, column: 3, scope: !995)
!1033 = !DILocalVariable(name: "__ctz_x", scope: !1034, file: !3, line: 681, type: !27)
!1034 = distinct !DILexicalBlock(scope: !995, file: !3, line: 681, column: 3)
!1035 = !DILocation(line: 681, column: 3, scope: !1034)
!1036 = !DILocalVariable(name: "__ctz_c", scope: !1034, file: !3, line: 681, type: !6)
!1037 = !DILocalVariable(name: "__clz_x", scope: !1038, file: !3, line: 681, type: !27)
!1038 = distinct !DILexicalBlock(scope: !1034, file: !3, line: 681, column: 3)
!1039 = !DILocation(line: 681, column: 3, scope: !1038)
!1040 = !DILocalVariable(name: "__clz_c", scope: !1038, file: !3, line: 681, type: !6)
!1041 = !DILocation(line: 681, column: 3, scope: !1042)
!1042 = distinct !DILexicalBlock(scope: !1038, file: !3, line: 681, column: 3)
!1043 = !DILocation(line: 681, column: 3, scope: !1044)
!1044 = distinct !DILexicalBlock(scope: !1042, file: !3, line: 681, column: 3)
!1045 = distinct !{!1045, !1041, !1041}
!1046 = !DILocation(line: 681, column: 3, scope: !1047)
!1047 = distinct !DILexicalBlock(scope: !1048, file: !3, line: 681, column: 3)
!1048 = distinct !DILexicalBlock(scope: !1038, file: !3, line: 681, column: 3)
!1049 = !DILocation(line: 681, column: 3, scope: !1048)
!1050 = distinct !{!1050, !1049, !1049}
!1051 = !DILocation(line: 682, column: 24, scope: !995)
!1052 = !DILocation(line: 682, column: 26, scope: !995)
!1053 = !DILocation(line: 682, column: 44, scope: !995)
!1054 = !DILocation(line: 682, column: 42, scope: !995)
!1055 = !DILocation(line: 682, column: 3, scope: !995)
!1056 = !DILocation(line: 683, column: 1, scope: !995)
!1057 = distinct !DISubprogram(name: "mpn_scan0", scope: !3, file: !3, line: 696, type: !973, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1058 = !DILocalVariable(name: "ptr", arg: 1, scope: !1057, file: !3, line: 696, type: !181)
!1059 = !DILocation(line: 696, column: 22, scope: !1057)
!1060 = !DILocalVariable(name: "bit", arg: 2, scope: !1057, file: !3, line: 696, type: !35)
!1061 = !DILocation(line: 696, column: 39, scope: !1057)
!1062 = !DILocalVariable(name: "i", scope: !1057, file: !3, line: 698, type: !184)
!1063 = !DILocation(line: 698, column: 13, scope: !1057)
!1064 = !DILocation(line: 699, column: 7, scope: !1057)
!1065 = !DILocation(line: 699, column: 11, scope: !1057)
!1066 = !DILocation(line: 699, column: 5, scope: !1057)
!1067 = !DILocation(line: 701, column: 28, scope: !1057)
!1068 = !DILocation(line: 701, column: 32, scope: !1057)
!1069 = !DILocation(line: 701, column: 27, scope: !1057)
!1070 = !DILocation(line: 701, column: 55, scope: !1057)
!1071 = !DILocation(line: 701, column: 59, scope: !1057)
!1072 = !DILocation(line: 701, column: 51, scope: !1057)
!1073 = !DILocation(line: 701, column: 35, scope: !1057)
!1074 = !DILocation(line: 702, column: 6, scope: !1057)
!1075 = !DILocation(line: 702, column: 9, scope: !1057)
!1076 = !DILocation(line: 702, column: 14, scope: !1057)
!1077 = !DILocation(line: 701, column: 10, scope: !1057)
!1078 = !DILocation(line: 701, column: 3, scope: !1057)
!1079 = distinct !DISubprogram(name: "mpn_invert_3by2", scope: !3, file: !3, line: 708, type: !1080, scopeLine: 709, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1080 = !DISubroutineType(types: !1081)
!1081 = !{!27, !27, !27}
!1082 = !DILocalVariable(name: "u1", arg: 1, scope: !1079, file: !3, line: 708, type: !27)
!1083 = !DILocation(line: 708, column: 28, scope: !1079)
!1084 = !DILocalVariable(name: "u0", arg: 2, scope: !1079, file: !3, line: 708, type: !27)
!1085 = !DILocation(line: 708, column: 42, scope: !1079)
!1086 = !DILocalVariable(name: "r", scope: !1079, file: !3, line: 710, type: !27)
!1087 = !DILocation(line: 710, column: 13, scope: !1079)
!1088 = !DILocalVariable(name: "p", scope: !1079, file: !3, line: 710, type: !27)
!1089 = !DILocation(line: 710, column: 16, scope: !1079)
!1090 = !DILocalVariable(name: "m", scope: !1079, file: !3, line: 710, type: !27)
!1091 = !DILocation(line: 710, column: 19, scope: !1079)
!1092 = !DILocalVariable(name: "ul", scope: !1079, file: !3, line: 711, type: !6)
!1093 = !DILocation(line: 711, column: 12, scope: !1079)
!1094 = !DILocalVariable(name: "uh", scope: !1079, file: !3, line: 711, type: !6)
!1095 = !DILocation(line: 711, column: 16, scope: !1079)
!1096 = !DILocalVariable(name: "ql", scope: !1079, file: !3, line: 712, type: !6)
!1097 = !DILocation(line: 712, column: 12, scope: !1079)
!1098 = !DILocalVariable(name: "qh", scope: !1079, file: !3, line: 712, type: !6)
!1099 = !DILocation(line: 712, column: 16, scope: !1079)
!1100 = !DILocation(line: 719, column: 8, scope: !1079)
!1101 = !DILocation(line: 719, column: 11, scope: !1079)
!1102 = !DILocation(line: 719, column: 6, scope: !1079)
!1103 = !DILocation(line: 720, column: 8, scope: !1079)
!1104 = !DILocation(line: 720, column: 11, scope: !1079)
!1105 = !DILocation(line: 720, column: 6, scope: !1079)
!1106 = !DILocation(line: 722, column: 9, scope: !1079)
!1107 = !DILocation(line: 722, column: 8, scope: !1079)
!1108 = !DILocation(line: 722, column: 14, scope: !1079)
!1109 = !DILocation(line: 722, column: 12, scope: !1079)
!1110 = !DILocation(line: 722, column: 6, scope: !1079)
!1111 = !DILocation(line: 723, column: 10, scope: !1079)
!1112 = !DILocation(line: 723, column: 9, scope: !1079)
!1113 = !DILocation(line: 723, column: 27, scope: !1079)
!1114 = !DILocation(line: 723, column: 15, scope: !1079)
!1115 = !DILocation(line: 723, column: 32, scope: !1079)
!1116 = !DILocation(line: 723, column: 30, scope: !1079)
!1117 = !DILocation(line: 723, column: 13, scope: !1079)
!1118 = !DILocation(line: 723, column: 36, scope: !1079)
!1119 = !DILocation(line: 723, column: 60, scope: !1079)
!1120 = !DILocation(line: 723, column: 5, scope: !1079)
!1121 = !DILocation(line: 725, column: 19, scope: !1079)
!1122 = !DILocation(line: 725, column: 7, scope: !1079)
!1123 = !DILocation(line: 725, column: 24, scope: !1079)
!1124 = !DILocation(line: 725, column: 22, scope: !1079)
!1125 = !DILocation(line: 725, column: 5, scope: !1079)
!1126 = !DILocation(line: 727, column: 7, scope: !1127)
!1127 = distinct !DILexicalBlock(scope: !1079, file: !3, line: 727, column: 7)
!1128 = !DILocation(line: 727, column: 11, scope: !1127)
!1129 = !DILocation(line: 727, column: 9, scope: !1127)
!1130 = !DILocation(line: 727, column: 7, scope: !1079)
!1131 = !DILocation(line: 729, column: 9, scope: !1132)
!1132 = distinct !DILexicalBlock(scope: !1127, file: !3, line: 728, column: 5)
!1133 = !DILocation(line: 730, column: 12, scope: !1132)
!1134 = !DILocation(line: 730, column: 9, scope: !1132)
!1135 = !DILocation(line: 731, column: 11, scope: !1136)
!1136 = distinct !DILexicalBlock(scope: !1132, file: !3, line: 731, column: 11)
!1137 = !DILocation(line: 731, column: 16, scope: !1136)
!1138 = !DILocation(line: 731, column: 13, scope: !1136)
!1139 = !DILocation(line: 731, column: 11, scope: !1132)
!1140 = !DILocation(line: 732, column: 6, scope: !1141)
!1141 = distinct !DILexicalBlock(scope: !1136, file: !3, line: 732, column: 6)
!1142 = !DILocation(line: 732, column: 10, scope: !1141)
!1143 = !DILocation(line: 732, column: 8, scope: !1141)
!1144 = !DILocation(line: 732, column: 6, scope: !1136)
!1145 = !DILocation(line: 734, column: 8, scope: !1146)
!1146 = distinct !DILexicalBlock(scope: !1141, file: !3, line: 733, column: 4)
!1147 = !DILocation(line: 735, column: 11, scope: !1146)
!1148 = !DILocation(line: 735, column: 8, scope: !1146)
!1149 = !DILocation(line: 736, column: 4, scope: !1146)
!1150 = !DILocation(line: 737, column: 5, scope: !1132)
!1151 = !DILocation(line: 738, column: 8, scope: !1079)
!1152 = !DILocation(line: 738, column: 5, scope: !1079)
!1153 = !DILocation(line: 741, column: 8, scope: !1079)
!1154 = !DILocation(line: 741, column: 10, scope: !1079)
!1155 = !DILocation(line: 741, column: 36, scope: !1079)
!1156 = !DILocation(line: 741, column: 34, scope: !1079)
!1157 = !DILocation(line: 741, column: 41, scope: !1079)
!1158 = !DILocation(line: 741, column: 39, scope: !1079)
!1159 = !DILocation(line: 741, column: 5, scope: !1079)
!1160 = !DILocation(line: 742, column: 9, scope: !1079)
!1161 = !DILocation(line: 742, column: 11, scope: !1079)
!1162 = !DILocation(line: 742, column: 35, scope: !1079)
!1163 = !DILocation(line: 742, column: 8, scope: !1079)
!1164 = !DILocation(line: 742, column: 6, scope: !1079)
!1165 = !DILocation(line: 745, column: 8, scope: !1079)
!1166 = !DILocation(line: 745, column: 10, scope: !1079)
!1167 = !DILocation(line: 745, column: 34, scope: !1079)
!1168 = !DILocation(line: 745, column: 53, scope: !1079)
!1169 = !DILocation(line: 745, column: 58, scope: !1079)
!1170 = !DILocation(line: 745, column: 56, scope: !1079)
!1171 = !DILocation(line: 745, column: 51, scope: !1079)
!1172 = !DILocation(line: 745, column: 5, scope: !1079)
!1173 = !DILocation(line: 747, column: 7, scope: !1174)
!1174 = distinct !DILexicalBlock(scope: !1079, file: !3, line: 747, column: 7)
!1175 = !DILocation(line: 747, column: 13, scope: !1174)
!1176 = !DILocation(line: 747, column: 15, scope: !1174)
!1177 = !DILocation(line: 747, column: 9, scope: !1174)
!1178 = !DILocation(line: 747, column: 7, scope: !1079)
!1179 = !DILocation(line: 749, column: 9, scope: !1180)
!1180 = distinct !DILexicalBlock(scope: !1174, file: !3, line: 748, column: 5)
!1181 = !DILocation(line: 750, column: 12, scope: !1180)
!1182 = !DILocation(line: 750, column: 9, scope: !1180)
!1183 = !DILocation(line: 751, column: 5, scope: !1180)
!1184 = !DILocation(line: 752, column: 20, scope: !1079)
!1185 = !DILocation(line: 752, column: 8, scope: !1079)
!1186 = !DILocation(line: 752, column: 23, scope: !1079)
!1187 = !DILocation(line: 752, column: 49, scope: !1079)
!1188 = !DILocation(line: 752, column: 47, scope: !1079)
!1189 = !DILocation(line: 752, column: 5, scope: !1079)
!1190 = !DILocation(line: 753, column: 7, scope: !1191)
!1191 = distinct !DILexicalBlock(scope: !1079, file: !3, line: 753, column: 7)
!1192 = !DILocation(line: 753, column: 12, scope: !1191)
!1193 = !DILocation(line: 753, column: 9, scope: !1191)
!1194 = !DILocation(line: 753, column: 7, scope: !1079)
!1195 = !DILocation(line: 755, column: 8, scope: !1196)
!1196 = distinct !DILexicalBlock(scope: !1191, file: !3, line: 754, column: 5)
!1197 = !DILocation(line: 756, column: 12, scope: !1196)
!1198 = !DILocation(line: 756, column: 9, scope: !1196)
!1199 = !DILocation(line: 757, column: 5, scope: !1196)
!1200 = !DILocation(line: 759, column: 7, scope: !1201)
!1201 = distinct !DILexicalBlock(scope: !1079, file: !3, line: 759, column: 7)
!1202 = !DILocation(line: 759, column: 10, scope: !1201)
!1203 = !DILocation(line: 759, column: 7, scope: !1079)
!1204 = !DILocalVariable(name: "th", scope: !1205, file: !3, line: 761, type: !27)
!1205 = distinct !DILexicalBlock(scope: !1201, file: !3, line: 760, column: 5)
!1206 = !DILocation(line: 761, column: 17, scope: !1205)
!1207 = !DILocalVariable(name: "tl", scope: !1205, file: !3, line: 761, type: !27)
!1208 = !DILocation(line: 761, column: 21, scope: !1205)
!1209 = !DILocation(line: 762, column: 12, scope: !1205)
!1210 = !DILocation(line: 762, column: 11, scope: !1205)
!1211 = !DILocation(line: 762, column: 9, scope: !1205)
!1212 = !DILocation(line: 763, column: 12, scope: !1205)
!1213 = !DILocation(line: 763, column: 9, scope: !1205)
!1214 = !DILocation(line: 764, column: 11, scope: !1215)
!1215 = distinct !DILexicalBlock(scope: !1205, file: !3, line: 764, column: 11)
!1216 = !DILocation(line: 764, column: 15, scope: !1215)
!1217 = !DILocation(line: 764, column: 13, scope: !1215)
!1218 = !DILocation(line: 764, column: 11, scope: !1205)
!1219 = !DILocation(line: 766, column: 5, scope: !1220)
!1220 = distinct !DILexicalBlock(scope: !1215, file: !3, line: 765, column: 2)
!1221 = !DILocation(line: 767, column: 8, scope: !1222)
!1222 = distinct !DILexicalBlock(scope: !1220, file: !3, line: 767, column: 8)
!1223 = !DILocation(line: 767, column: 13, scope: !1222)
!1224 = !DILocation(line: 767, column: 10, scope: !1222)
!1225 = !DILocation(line: 767, column: 8, scope: !1220)
!1226 = !DILocation(line: 769, column: 9, scope: !1227)
!1227 = distinct !DILexicalBlock(scope: !1222, file: !3, line: 768, column: 6)
!1228 = !DILocation(line: 770, column: 13, scope: !1227)
!1229 = !DILocation(line: 770, column: 10, scope: !1227)
!1230 = !DILocation(line: 771, column: 6, scope: !1227)
!1231 = !DILocation(line: 772, column: 9, scope: !1220)
!1232 = !DILocation(line: 772, column: 6, scope: !1220)
!1233 = !DILocation(line: 773, column: 2, scope: !1220)
!1234 = !DILocation(line: 774, column: 7, scope: !1205)
!1235 = !DILocalVariable(name: "__x0", scope: !1236, file: !3, line: 774, type: !27)
!1236 = distinct !DILexicalBlock(scope: !1205, file: !3, line: 774, column: 7)
!1237 = !DILocation(line: 774, column: 7, scope: !1236)
!1238 = !DILocalVariable(name: "__x1", scope: !1236, file: !3, line: 774, type: !27)
!1239 = !DILocalVariable(name: "__x2", scope: !1236, file: !3, line: 774, type: !27)
!1240 = !DILocalVariable(name: "__x3", scope: !1236, file: !3, line: 774, type: !27)
!1241 = !DILocalVariable(name: "__ul", scope: !1236, file: !3, line: 774, type: !6)
!1242 = !DILocalVariable(name: "__vl", scope: !1236, file: !3, line: 774, type: !6)
!1243 = !DILocalVariable(name: "__uh", scope: !1236, file: !3, line: 774, type: !6)
!1244 = !DILocalVariable(name: "__vh", scope: !1236, file: !3, line: 774, type: !6)
!1245 = !DILocalVariable(name: "__u", scope: !1236, file: !3, line: 774, type: !27)
!1246 = !DILocalVariable(name: "__v", scope: !1236, file: !3, line: 774, type: !27)
!1247 = !DILocation(line: 774, column: 7, scope: !1248)
!1248 = distinct !DILexicalBlock(scope: !1236, file: !3, line: 774, column: 7)
!1249 = !DILocation(line: 775, column: 12, scope: !1205)
!1250 = !DILocation(line: 775, column: 9, scope: !1205)
!1251 = !DILocation(line: 776, column: 11, scope: !1252)
!1252 = distinct !DILexicalBlock(scope: !1205, file: !3, line: 776, column: 11)
!1253 = !DILocation(line: 776, column: 15, scope: !1252)
!1254 = !DILocation(line: 776, column: 13, scope: !1252)
!1255 = !DILocation(line: 776, column: 11, scope: !1205)
!1256 = !DILocation(line: 778, column: 5, scope: !1257)
!1257 = distinct !DILexicalBlock(scope: !1252, file: !3, line: 777, column: 2)
!1258 = !DILocation(line: 779, column: 11, scope: !1257)
!1259 = !DILocation(line: 779, column: 15, scope: !1257)
!1260 = !DILocation(line: 779, column: 13, scope: !1257)
!1261 = !DILocation(line: 779, column: 23, scope: !1257)
!1262 = !DILocation(line: 779, column: 28, scope: !1257)
!1263 = !DILocation(line: 779, column: 25, scope: !1257)
!1264 = !DILocation(line: 779, column: 35, scope: !1257)
!1265 = !DILocation(line: 779, column: 40, scope: !1257)
!1266 = !DILocation(line: 779, column: 38, scope: !1257)
!1267 = !DILocation(line: 779, column: 32, scope: !1257)
!1268 = !DILocation(line: 779, column: 19, scope: !1257)
!1269 = !DILocation(line: 779, column: 9, scope: !1257)
!1270 = !DILocation(line: 779, column: 6, scope: !1257)
!1271 = !DILocation(line: 780, column: 2, scope: !1257)
!1272 = !DILocation(line: 781, column: 5, scope: !1205)
!1273 = !DILocation(line: 783, column: 10, scope: !1079)
!1274 = !DILocation(line: 783, column: 3, scope: !1079)
!1275 = distinct !DISubprogram(name: "mpn_get_str", scope: !3, file: !3, line: 1254, type: !1276, scopeLine: 1255, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1276 = !DISubroutineType(types: !1277)
!1277 = !{!50, !36, !34, !31, !184}
!1278 = !DILocalVariable(name: "sp", arg: 1, scope: !1275, file: !3, line: 1254, type: !36)
!1279 = !DILocation(line: 1254, column: 29, scope: !1275)
!1280 = !DILocalVariable(name: "base", arg: 2, scope: !1275, file: !3, line: 1254, type: !34)
!1281 = !DILocation(line: 1254, column: 37, scope: !1275)
!1282 = !DILocalVariable(name: "up", arg: 3, scope: !1275, file: !3, line: 1254, type: !31)
!1283 = !DILocation(line: 1254, column: 50, scope: !1275)
!1284 = !DILocalVariable(name: "un", arg: 4, scope: !1275, file: !3, line: 1254, type: !184)
!1285 = !DILocation(line: 1254, column: 64, scope: !1275)
!1286 = !DILocalVariable(name: "bits", scope: !1275, file: !3, line: 1256, type: !6)
!1287 = !DILocation(line: 1256, column: 12, scope: !1275)
!1288 = !DILocation(line: 1261, column: 35, scope: !1275)
!1289 = !DILocation(line: 1261, column: 10, scope: !1275)
!1290 = !DILocation(line: 1261, column: 8, scope: !1275)
!1291 = !DILocation(line: 1262, column: 7, scope: !1292)
!1292 = distinct !DILexicalBlock(scope: !1275, file: !3, line: 1262, column: 7)
!1293 = !DILocation(line: 1262, column: 7, scope: !1275)
!1294 = !DILocation(line: 1263, column: 30, scope: !1292)
!1295 = !DILocation(line: 1263, column: 34, scope: !1292)
!1296 = !DILocation(line: 1263, column: 40, scope: !1292)
!1297 = !DILocation(line: 1263, column: 44, scope: !1292)
!1298 = !DILocation(line: 1263, column: 12, scope: !1292)
!1299 = !DILocation(line: 1263, column: 5, scope: !1292)
!1300 = !DILocalVariable(name: "info", scope: !1301, file: !3, line: 1266, type: !1302)
!1301 = distinct !DILexicalBlock(scope: !1292, file: !3, line: 1265, column: 5)
!1302 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mpn_base_info", file: !3, line: 1124, size: 128, elements: !1303)
!1303 = !{!1304, !1305}
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1302, file: !3, line: 1128, baseType: !6, size: 32)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1302, file: !3, line: 1129, baseType: !27, size: 64, offset: 64)
!1306 = !DILocation(line: 1266, column: 28, scope: !1301)
!1307 = !DILocation(line: 1268, column: 33, scope: !1301)
!1308 = !DILocation(line: 1268, column: 7, scope: !1301)
!1309 = !DILocation(line: 1269, column: 33, scope: !1301)
!1310 = !DILocation(line: 1269, column: 37, scope: !1301)
!1311 = !DILocation(line: 1269, column: 50, scope: !1301)
!1312 = !DILocation(line: 1269, column: 54, scope: !1301)
!1313 = !DILocation(line: 1269, column: 14, scope: !1301)
!1314 = !DILocation(line: 1269, column: 7, scope: !1301)
!1315 = !DILocation(line: 1271, column: 1, scope: !1275)
!1316 = distinct !DISubprogram(name: "mpn_base_power_of_two_p", scope: !3, file: !3, line: 1108, type: !1317, scopeLine: 1109, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1317 = !DISubroutineType(types: !1318)
!1318 = !{!6, !6}
!1319 = !DILocalVariable(name: "b", arg: 1, scope: !1316, file: !3, line: 1108, type: !6)
!1320 = !DILocation(line: 1108, column: 35, scope: !1316)
!1321 = !DILocation(line: 1110, column: 11, scope: !1316)
!1322 = !DILocation(line: 1110, column: 3, scope: !1316)
!1323 = !DILocation(line: 1112, column: 13, scope: !1324)
!1324 = distinct !DILexicalBlock(scope: !1316, file: !3, line: 1111, column: 5)
!1325 = !DILocation(line: 1113, column: 13, scope: !1324)
!1326 = !DILocation(line: 1114, column: 13, scope: !1324)
!1327 = !DILocation(line: 1115, column: 14, scope: !1324)
!1328 = !DILocation(line: 1116, column: 14, scope: !1324)
!1329 = !DILocation(line: 1117, column: 14, scope: !1324)
!1330 = !DILocation(line: 1118, column: 15, scope: !1324)
!1331 = !DILocation(line: 1119, column: 15, scope: !1324)
!1332 = !DILocation(line: 1120, column: 14, scope: !1324)
!1333 = !DILocation(line: 1122, column: 1, scope: !1316)
!1334 = distinct !DISubprogram(name: "mpn_get_str_bits", scope: !3, file: !3, line: 1158, type: !1335, scopeLine: 1159, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1335 = !DISubroutineType(types: !1336)
!1336 = !{!50, !36, !6, !181, !184}
!1337 = !DILocalVariable(name: "sp", arg: 1, scope: !1334, file: !3, line: 1158, type: !36)
!1338 = !DILocation(line: 1158, column: 34, scope: !1334)
!1339 = !DILocalVariable(name: "bits", arg: 2, scope: !1334, file: !3, line: 1158, type: !6)
!1340 = !DILocation(line: 1158, column: 47, scope: !1334)
!1341 = !DILocalVariable(name: "up", arg: 3, scope: !1334, file: !3, line: 1158, type: !181)
!1342 = !DILocation(line: 1158, column: 63, scope: !1334)
!1343 = !DILocalVariable(name: "un", arg: 4, scope: !1334, file: !3, line: 1158, type: !184)
!1344 = !DILocation(line: 1158, column: 77, scope: !1334)
!1345 = !DILocalVariable(name: "mask", scope: !1334, file: !3, line: 1160, type: !37)
!1346 = !DILocation(line: 1160, column: 17, scope: !1334)
!1347 = !DILocalVariable(name: "sn", scope: !1334, file: !3, line: 1161, type: !50)
!1348 = !DILocation(line: 1161, column: 10, scope: !1334)
!1349 = !DILocalVariable(name: "j", scope: !1334, file: !3, line: 1161, type: !50)
!1350 = !DILocation(line: 1161, column: 14, scope: !1334)
!1351 = !DILocalVariable(name: "i", scope: !1334, file: !3, line: 1162, type: !184)
!1352 = !DILocation(line: 1162, column: 13, scope: !1334)
!1353 = !DILocalVariable(name: "shift", scope: !1334, file: !3, line: 1163, type: !34)
!1354 = !DILocation(line: 1163, column: 7, scope: !1334)
!1355 = !DILocation(line: 1165, column: 10, scope: !1334)
!1356 = !DILocation(line: 1165, column: 13, scope: !1334)
!1357 = !DILocation(line: 1165, column: 18, scope: !1334)
!1358 = !DILocation(line: 1165, column: 61, scope: !1334)
!1359 = !DILocation(line: 1165, column: 64, scope: !1334)
!1360 = !DILocation(line: 1165, column: 66, scope: !1334)
!1361 = !DILocation(line: 1165, column: 36, scope: !1334)
!1362 = !DILocation(line: 1165, column: 34, scope: !1334)
!1363 = !DILocation(line: 1166, column: 4, scope: !1334)
!1364 = !DILocation(line: 1166, column: 2, scope: !1334)
!1365 = !DILocation(line: 1166, column: 9, scope: !1334)
!1366 = !DILocation(line: 1166, column: 16, scope: !1334)
!1367 = !DILocation(line: 1166, column: 14, scope: !1334)
!1368 = !DILocation(line: 1165, column: 6, scope: !1334)
!1369 = !DILocation(line: 1168, column: 17, scope: !1334)
!1370 = !DILocation(line: 1168, column: 14, scope: !1334)
!1371 = !DILocation(line: 1168, column: 23, scope: !1334)
!1372 = !DILocation(line: 1168, column: 10, scope: !1334)
!1373 = !DILocation(line: 1168, column: 8, scope: !1334)
!1374 = !DILocation(line: 1170, column: 10, scope: !1375)
!1375 = distinct !DILexicalBlock(scope: !1334, file: !3, line: 1170, column: 3)
!1376 = !DILocation(line: 1170, column: 19, scope: !1375)
!1377 = !DILocation(line: 1170, column: 17, scope: !1375)
!1378 = !DILocation(line: 1170, column: 29, scope: !1375)
!1379 = !DILocation(line: 1170, column: 8, scope: !1375)
!1380 = !DILocation(line: 1170, column: 35, scope: !1381)
!1381 = distinct !DILexicalBlock(scope: !1375, file: !3, line: 1170, column: 3)
!1382 = !DILocation(line: 1170, column: 38, scope: !1381)
!1383 = !DILocation(line: 1170, column: 3, scope: !1375)
!1384 = !DILocalVariable(name: "digit", scope: !1385, file: !3, line: 1172, type: !37)
!1385 = distinct !DILexicalBlock(scope: !1381, file: !3, line: 1171, column: 5)
!1386 = !DILocation(line: 1172, column: 21, scope: !1385)
!1387 = !DILocation(line: 1172, column: 29, scope: !1385)
!1388 = !DILocation(line: 1172, column: 32, scope: !1385)
!1389 = !DILocation(line: 1172, column: 38, scope: !1385)
!1390 = !DILocation(line: 1172, column: 35, scope: !1385)
!1391 = !DILocation(line: 1174, column: 16, scope: !1385)
!1392 = !DILocation(line: 1174, column: 13, scope: !1385)
!1393 = !DILocation(line: 1176, column: 11, scope: !1394)
!1394 = distinct !DILexicalBlock(scope: !1385, file: !3, line: 1176, column: 11)
!1395 = !DILocation(line: 1176, column: 17, scope: !1394)
!1396 = !DILocation(line: 1176, column: 34, scope: !1394)
!1397 = !DILocation(line: 1176, column: 37, scope: !1394)
!1398 = !DILocation(line: 1176, column: 43, scope: !1394)
!1399 = !DILocation(line: 1176, column: 41, scope: !1394)
!1400 = !DILocation(line: 1176, column: 11, scope: !1385)
!1401 = !DILocation(line: 1178, column: 10, scope: !1402)
!1402 = distinct !DILexicalBlock(scope: !1394, file: !3, line: 1177, column: 2)
!1403 = !DILocation(line: 1179, column: 13, scope: !1402)
!1404 = !DILocation(line: 1179, column: 16, scope: !1402)
!1405 = !DILocation(line: 1179, column: 23, scope: !1402)
!1406 = !DILocation(line: 1179, column: 30, scope: !1402)
!1407 = !DILocation(line: 1179, column: 28, scope: !1402)
!1408 = !DILocation(line: 1179, column: 19, scope: !1402)
!1409 = !DILocation(line: 1179, column: 10, scope: !1402)
!1410 = !DILocation(line: 1180, column: 2, scope: !1402)
!1411 = !DILocation(line: 1181, column: 15, scope: !1385)
!1412 = !DILocation(line: 1181, column: 23, scope: !1385)
!1413 = !DILocation(line: 1181, column: 21, scope: !1385)
!1414 = !DILocation(line: 1181, column: 7, scope: !1385)
!1415 = !DILocation(line: 1181, column: 10, scope: !1385)
!1416 = !DILocation(line: 1181, column: 13, scope: !1385)
!1417 = !DILocation(line: 1170, column: 3, scope: !1381)
!1418 = distinct !{!1418, !1383, !1419}
!1419 = !DILocation(line: 1182, column: 5, scope: !1375)
!1420 = !DILocation(line: 1183, column: 10, scope: !1334)
!1421 = !DILocation(line: 1183, column: 3, scope: !1334)
!1422 = distinct !DISubprogram(name: "mpn_get_base_info", scope: !3, file: !3, line: 1133, type: !1423, scopeLine: 1134, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1423 = !DISubroutineType(types: !1424)
!1424 = !{null, !1425, !27}
!1425 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1302, size: 64)
!1426 = !DILocalVariable(name: "info", arg: 1, scope: !1422, file: !3, line: 1133, type: !1425)
!1427 = !DILocation(line: 1133, column: 42, scope: !1422)
!1428 = !DILocalVariable(name: "b", arg: 2, scope: !1422, file: !3, line: 1133, type: !27)
!1429 = !DILocation(line: 1133, column: 58, scope: !1422)
!1430 = !DILocalVariable(name: "m", scope: !1422, file: !3, line: 1135, type: !27)
!1431 = !DILocation(line: 1135, column: 13, scope: !1422)
!1432 = !DILocalVariable(name: "p", scope: !1422, file: !3, line: 1136, type: !27)
!1433 = !DILocation(line: 1136, column: 13, scope: !1422)
!1434 = !DILocalVariable(name: "exp", scope: !1422, file: !3, line: 1137, type: !6)
!1435 = !DILocation(line: 1137, column: 12, scope: !1422)
!1436 = !DILocation(line: 1139, column: 22, scope: !1422)
!1437 = !DILocation(line: 1139, column: 20, scope: !1422)
!1438 = !DILocation(line: 1139, column: 5, scope: !1422)
!1439 = !DILocation(line: 1140, column: 12, scope: !1440)
!1440 = distinct !DILexicalBlock(scope: !1422, file: !3, line: 1140, column: 3)
!1441 = !DILocation(line: 1140, column: 21, scope: !1440)
!1442 = !DILocation(line: 1140, column: 19, scope: !1440)
!1443 = !DILocation(line: 1140, column: 8, scope: !1440)
!1444 = !DILocation(line: 1140, column: 24, scope: !1445)
!1445 = distinct !DILexicalBlock(scope: !1440, file: !3, line: 1140, column: 3)
!1446 = !DILocation(line: 1140, column: 29, scope: !1445)
!1447 = !DILocation(line: 1140, column: 26, scope: !1445)
!1448 = !DILocation(line: 1140, column: 3, scope: !1440)
!1449 = !DILocation(line: 1141, column: 10, scope: !1445)
!1450 = !DILocation(line: 1141, column: 7, scope: !1445)
!1451 = !DILocation(line: 1141, column: 5, scope: !1445)
!1452 = !DILocation(line: 1140, column: 35, scope: !1445)
!1453 = !DILocation(line: 1140, column: 3, scope: !1445)
!1454 = distinct !{!1454, !1448, !1455}
!1455 = !DILocation(line: 1141, column: 10, scope: !1440)
!1456 = !DILocation(line: 1143, column: 15, scope: !1422)
!1457 = !DILocation(line: 1143, column: 3, scope: !1422)
!1458 = !DILocation(line: 1143, column: 9, scope: !1422)
!1459 = !DILocation(line: 1143, column: 13, scope: !1422)
!1460 = !DILocation(line: 1144, column: 14, scope: !1422)
!1461 = !DILocation(line: 1144, column: 3, scope: !1422)
!1462 = !DILocation(line: 1144, column: 9, scope: !1422)
!1463 = !DILocation(line: 1144, column: 12, scope: !1422)
!1464 = !DILocation(line: 1145, column: 1, scope: !1422)
!1465 = distinct !DISubprogram(name: "mpn_get_str_other", scope: !3, file: !3, line: 1210, type: !1466, scopeLine: 1213, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1466 = !DISubroutineType(types: !1467)
!1467 = !{!50, !36, !34, !1468, !31, !184}
!1468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1469, size: 64)
!1469 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1302)
!1470 = !DILocalVariable(name: "sp", arg: 1, scope: !1465, file: !3, line: 1210, type: !36)
!1471 = !DILocation(line: 1210, column: 35, scope: !1465)
!1472 = !DILocalVariable(name: "base", arg: 2, scope: !1465, file: !3, line: 1211, type: !34)
!1473 = !DILocation(line: 1211, column: 10, scope: !1465)
!1474 = !DILocalVariable(name: "info", arg: 3, scope: !1465, file: !3, line: 1211, type: !1468)
!1475 = !DILocation(line: 1211, column: 44, scope: !1465)
!1476 = !DILocalVariable(name: "up", arg: 4, scope: !1465, file: !3, line: 1212, type: !31)
!1477 = !DILocation(line: 1212, column: 13, scope: !1465)
!1478 = !DILocalVariable(name: "un", arg: 5, scope: !1465, file: !3, line: 1212, type: !184)
!1479 = !DILocation(line: 1212, column: 27, scope: !1465)
!1480 = !DILocalVariable(name: "binv", scope: !1465, file: !3, line: 1214, type: !1481)
!1481 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gmp_div_inverse", file: !3, line: 786, size: 256, elements: !1482)
!1482 = !{!1483, !1484, !1485, !1486}
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "shift", scope: !1481, file: !3, line: 789, baseType: !6, size: 32)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "d1", scope: !1481, file: !3, line: 791, baseType: !27, size: 64, offset: 64)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "d0", scope: !1481, file: !3, line: 791, baseType: !27, size: 64, offset: 128)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "di", scope: !1481, file: !3, line: 793, baseType: !27, size: 64, offset: 192)
!1487 = !DILocation(line: 1214, column: 26, scope: !1465)
!1488 = !DILocalVariable(name: "sn", scope: !1465, file: !3, line: 1215, type: !50)
!1489 = !DILocation(line: 1215, column: 10, scope: !1465)
!1490 = !DILocalVariable(name: "i", scope: !1465, file: !3, line: 1216, type: !50)
!1491 = !DILocation(line: 1216, column: 10, scope: !1465)
!1492 = !DILocation(line: 1218, column: 31, scope: !1465)
!1493 = !DILocation(line: 1218, column: 3, scope: !1465)
!1494 = !DILocation(line: 1220, column: 6, scope: !1465)
!1495 = !DILocation(line: 1222, column: 7, scope: !1496)
!1496 = distinct !DILexicalBlock(scope: !1465, file: !3, line: 1222, column: 7)
!1497 = !DILocation(line: 1222, column: 10, scope: !1496)
!1498 = !DILocation(line: 1222, column: 7, scope: !1465)
!1499 = !DILocalVariable(name: "bbinv", scope: !1500, file: !3, line: 1224, type: !1481)
!1500 = distinct !DILexicalBlock(scope: !1496, file: !3, line: 1223, column: 5)
!1501 = !DILocation(line: 1224, column: 30, scope: !1500)
!1502 = !DILocation(line: 1225, column: 36, scope: !1500)
!1503 = !DILocation(line: 1225, column: 42, scope: !1500)
!1504 = !DILocation(line: 1225, column: 7, scope: !1500)
!1505 = !DILocation(line: 1227, column: 7, scope: !1500)
!1506 = !DILocalVariable(name: "w", scope: !1507, file: !3, line: 1229, type: !27)
!1507 = distinct !DILexicalBlock(scope: !1500, file: !3, line: 1228, column: 2)
!1508 = !DILocation(line: 1229, column: 14, scope: !1507)
!1509 = !DILocalVariable(name: "done", scope: !1507, file: !3, line: 1230, type: !50)
!1510 = !DILocation(line: 1230, column: 11, scope: !1507)
!1511 = !DILocation(line: 1231, column: 29, scope: !1507)
!1512 = !DILocation(line: 1231, column: 33, scope: !1507)
!1513 = !DILocation(line: 1231, column: 37, scope: !1507)
!1514 = !DILocation(line: 1231, column: 8, scope: !1507)
!1515 = !DILocation(line: 1231, column: 6, scope: !1507)
!1516 = !DILocation(line: 1232, column: 11, scope: !1507)
!1517 = !DILocation(line: 1232, column: 14, scope: !1507)
!1518 = !DILocation(line: 1232, column: 16, scope: !1507)
!1519 = !DILocation(line: 1232, column: 20, scope: !1507)
!1520 = !DILocation(line: 1232, column: 10, scope: !1507)
!1521 = !DILocation(line: 1232, column: 7, scope: !1507)
!1522 = !DILocation(line: 1233, column: 29, scope: !1507)
!1523 = !DILocation(line: 1233, column: 34, scope: !1507)
!1524 = !DILocation(line: 1233, column: 32, scope: !1507)
!1525 = !DILocation(line: 1233, column: 38, scope: !1507)
!1526 = !DILocation(line: 1233, column: 11, scope: !1507)
!1527 = !DILocation(line: 1233, column: 9, scope: !1507)
!1528 = !DILocation(line: 1235, column: 15, scope: !1529)
!1529 = distinct !DILexicalBlock(scope: !1507, file: !3, line: 1235, column: 4)
!1530 = !DILocation(line: 1235, column: 12, scope: !1529)
!1531 = !DILocation(line: 1235, column: 9, scope: !1529)
!1532 = !DILocation(line: 1235, column: 21, scope: !1533)
!1533 = distinct !DILexicalBlock(scope: !1529, file: !3, line: 1235, column: 4)
!1534 = !DILocation(line: 1235, column: 28, scope: !1533)
!1535 = !DILocation(line: 1235, column: 34, scope: !1533)
!1536 = !DILocation(line: 1235, column: 26, scope: !1533)
!1537 = !DILocation(line: 1235, column: 4, scope: !1529)
!1538 = !DILocation(line: 1236, column: 6, scope: !1533)
!1539 = !DILocation(line: 1236, column: 11, scope: !1533)
!1540 = !DILocation(line: 1236, column: 15, scope: !1533)
!1541 = !DILocation(line: 1235, column: 43, scope: !1533)
!1542 = !DILocation(line: 1235, column: 4, scope: !1533)
!1543 = distinct !{!1543, !1537, !1544}
!1544 = !DILocation(line: 1236, column: 17, scope: !1529)
!1545 = !DILocation(line: 1237, column: 2, scope: !1507)
!1546 = !DILocation(line: 1238, column: 14, scope: !1500)
!1547 = !DILocation(line: 1238, column: 17, scope: !1500)
!1548 = distinct !{!1548, !1505, !1549}
!1549 = !DILocation(line: 1238, column: 20, scope: !1500)
!1550 = !DILocation(line: 1239, column: 5, scope: !1500)
!1551 = !DILocation(line: 1240, column: 27, scope: !1465)
!1552 = !DILocation(line: 1240, column: 32, scope: !1465)
!1553 = !DILocation(line: 1240, column: 30, scope: !1465)
!1554 = !DILocation(line: 1240, column: 36, scope: !1465)
!1555 = !DILocation(line: 1240, column: 9, scope: !1465)
!1556 = !DILocation(line: 1240, column: 6, scope: !1465)
!1557 = !DILocation(line: 1243, column: 10, scope: !1558)
!1558 = distinct !DILexicalBlock(scope: !1465, file: !3, line: 1243, column: 3)
!1559 = !DILocation(line: 1243, column: 8, scope: !1558)
!1560 = !DILocation(line: 1243, column: 17, scope: !1561)
!1561 = distinct !DILexicalBlock(scope: !1558, file: !3, line: 1243, column: 3)
!1562 = !DILocation(line: 1243, column: 16, scope: !1561)
!1563 = !DILocation(line: 1243, column: 19, scope: !1561)
!1564 = !DILocation(line: 1243, column: 25, scope: !1561)
!1565 = !DILocation(line: 1243, column: 23, scope: !1561)
!1566 = !DILocation(line: 1243, column: 3, scope: !1558)
!1567 = !DILocalVariable(name: "t", scope: !1568, file: !3, line: 1245, type: !37)
!1568 = distinct !DILexicalBlock(scope: !1561, file: !3, line: 1244, column: 5)
!1569 = !DILocation(line: 1245, column: 21, scope: !1568)
!1570 = !DILocation(line: 1245, column: 25, scope: !1568)
!1571 = !DILocation(line: 1245, column: 28, scope: !1568)
!1572 = !DILocation(line: 1246, column: 15, scope: !1568)
!1573 = !DILocation(line: 1246, column: 18, scope: !1568)
!1574 = !DILocation(line: 1246, column: 23, scope: !1568)
!1575 = !DILocation(line: 1246, column: 21, scope: !1568)
!1576 = !DILocation(line: 1246, column: 25, scope: !1568)
!1577 = !DILocation(line: 1246, column: 7, scope: !1568)
!1578 = !DILocation(line: 1246, column: 10, scope: !1568)
!1579 = !DILocation(line: 1246, column: 13, scope: !1568)
!1580 = !DILocation(line: 1247, column: 24, scope: !1568)
!1581 = !DILocation(line: 1247, column: 7, scope: !1568)
!1582 = !DILocation(line: 1247, column: 10, scope: !1568)
!1583 = !DILocation(line: 1247, column: 15, scope: !1568)
!1584 = !DILocation(line: 1247, column: 13, scope: !1568)
!1585 = !DILocation(line: 1247, column: 17, scope: !1568)
!1586 = !DILocation(line: 1247, column: 22, scope: !1568)
!1587 = !DILocation(line: 1248, column: 5, scope: !1568)
!1588 = !DILocation(line: 1243, column: 30, scope: !1561)
!1589 = !DILocation(line: 1243, column: 3, scope: !1561)
!1590 = distinct !{!1590, !1566, !1591}
!1591 = !DILocation(line: 1248, column: 5, scope: !1558)
!1592 = !DILocation(line: 1250, column: 10, scope: !1465)
!1593 = !DILocation(line: 1250, column: 3, scope: !1465)
!1594 = distinct !DISubprogram(name: "mpn_set_str", scope: !3, file: !3, line: 1341, type: !1595, scopeLine: 1342, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1595 = !DISubroutineType(types: !1596)
!1596 = !{!184, !31, !41, !50, !34}
!1597 = !DILocalVariable(name: "rp", arg: 1, scope: !1594, file: !3, line: 1341, type: !31)
!1598 = !DILocation(line: 1341, column: 21, scope: !1594)
!1599 = !DILocalVariable(name: "sp", arg: 2, scope: !1594, file: !3, line: 1341, type: !41)
!1600 = !DILocation(line: 1341, column: 46, scope: !1594)
!1601 = !DILocalVariable(name: "sn", arg: 3, scope: !1594, file: !3, line: 1341, type: !50)
!1602 = !DILocation(line: 1341, column: 57, scope: !1594)
!1603 = !DILocalVariable(name: "base", arg: 4, scope: !1594, file: !3, line: 1341, type: !34)
!1604 = !DILocation(line: 1341, column: 65, scope: !1594)
!1605 = !DILocalVariable(name: "bits", scope: !1594, file: !3, line: 1343, type: !6)
!1606 = !DILocation(line: 1343, column: 12, scope: !1594)
!1607 = !DILocation(line: 1345, column: 7, scope: !1608)
!1608 = distinct !DILexicalBlock(scope: !1594, file: !3, line: 1345, column: 7)
!1609 = !DILocation(line: 1345, column: 10, scope: !1608)
!1610 = !DILocation(line: 1345, column: 7, scope: !1594)
!1611 = !DILocation(line: 1346, column: 5, scope: !1608)
!1612 = !DILocation(line: 1348, column: 35, scope: !1594)
!1613 = !DILocation(line: 1348, column: 10, scope: !1594)
!1614 = !DILocation(line: 1348, column: 8, scope: !1594)
!1615 = !DILocation(line: 1349, column: 7, scope: !1616)
!1616 = distinct !DILexicalBlock(scope: !1594, file: !3, line: 1349, column: 7)
!1617 = !DILocation(line: 1349, column: 7, scope: !1594)
!1618 = !DILocation(line: 1350, column: 30, scope: !1616)
!1619 = !DILocation(line: 1350, column: 34, scope: !1616)
!1620 = !DILocation(line: 1350, column: 38, scope: !1616)
!1621 = !DILocation(line: 1350, column: 42, scope: !1616)
!1622 = !DILocation(line: 1350, column: 12, scope: !1616)
!1623 = !DILocation(line: 1350, column: 5, scope: !1616)
!1624 = !DILocalVariable(name: "info", scope: !1625, file: !3, line: 1353, type: !1302)
!1625 = distinct !DILexicalBlock(scope: !1616, file: !3, line: 1352, column: 5)
!1626 = !DILocation(line: 1353, column: 28, scope: !1625)
!1627 = !DILocation(line: 1355, column: 33, scope: !1625)
!1628 = !DILocation(line: 1355, column: 7, scope: !1625)
!1629 = !DILocation(line: 1356, column: 33, scope: !1625)
!1630 = !DILocation(line: 1356, column: 37, scope: !1625)
!1631 = !DILocation(line: 1356, column: 41, scope: !1625)
!1632 = !DILocation(line: 1356, column: 45, scope: !1625)
!1633 = !DILocation(line: 1356, column: 14, scope: !1625)
!1634 = !DILocation(line: 1356, column: 7, scope: !1625)
!1635 = !DILocation(line: 1358, column: 1, scope: !1594)
!1636 = distinct !DISubprogram(name: "mpn_set_str_bits", scope: !3, file: !3, line: 1274, type: !1637, scopeLine: 1276, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1637 = !DISubroutineType(types: !1638)
!1638 = !{!184, !31, !41, !50, !6}
!1639 = !DILocalVariable(name: "rp", arg: 1, scope: !1636, file: !3, line: 1274, type: !31)
!1640 = !DILocation(line: 1274, column: 26, scope: !1636)
!1641 = !DILocalVariable(name: "sp", arg: 2, scope: !1636, file: !3, line: 1274, type: !41)
!1642 = !DILocation(line: 1274, column: 51, scope: !1636)
!1643 = !DILocalVariable(name: "sn", arg: 3, scope: !1636, file: !3, line: 1274, type: !50)
!1644 = !DILocation(line: 1274, column: 62, scope: !1636)
!1645 = !DILocalVariable(name: "bits", arg: 4, scope: !1636, file: !3, line: 1275, type: !6)
!1646 = !DILocation(line: 1275, column: 14, scope: !1636)
!1647 = !DILocalVariable(name: "rn", scope: !1636, file: !3, line: 1277, type: !184)
!1648 = !DILocation(line: 1277, column: 13, scope: !1636)
!1649 = !DILocalVariable(name: "j", scope: !1636, file: !3, line: 1278, type: !50)
!1650 = !DILocation(line: 1278, column: 10, scope: !1636)
!1651 = !DILocalVariable(name: "shift", scope: !1636, file: !3, line: 1279, type: !6)
!1652 = !DILocation(line: 1279, column: 12, scope: !1636)
!1653 = !DILocation(line: 1281, column: 12, scope: !1654)
!1654 = distinct !DILexicalBlock(scope: !1636, file: !3, line: 1281, column: 3)
!1655 = !DILocation(line: 1281, column: 10, scope: !1654)
!1656 = !DILocation(line: 1281, column: 19, scope: !1654)
!1657 = !DILocation(line: 1281, column: 30, scope: !1654)
!1658 = !DILocation(line: 1281, column: 8, scope: !1654)
!1659 = !DILocation(line: 1281, column: 36, scope: !1660)
!1660 = distinct !DILexicalBlock(scope: !1654, file: !3, line: 1281, column: 3)
!1661 = !DILocation(line: 1281, column: 39, scope: !1660)
!1662 = !DILocation(line: 1281, column: 3, scope: !1654)
!1663 = !DILocation(line: 1283, column: 11, scope: !1664)
!1664 = distinct !DILexicalBlock(scope: !1665, file: !3, line: 1283, column: 11)
!1665 = distinct !DILexicalBlock(scope: !1660, file: !3, line: 1282, column: 5)
!1666 = !DILocation(line: 1283, column: 17, scope: !1664)
!1667 = !DILocation(line: 1283, column: 11, scope: !1665)
!1668 = !DILocation(line: 1285, column: 15, scope: !1669)
!1669 = distinct !DILexicalBlock(scope: !1664, file: !3, line: 1284, column: 2)
!1670 = !DILocation(line: 1285, column: 18, scope: !1669)
!1671 = !DILocation(line: 1285, column: 4, scope: !1669)
!1672 = !DILocation(line: 1285, column: 9, scope: !1669)
!1673 = !DILocation(line: 1285, column: 13, scope: !1669)
!1674 = !DILocation(line: 1286, column: 13, scope: !1669)
!1675 = !DILocation(line: 1286, column: 10, scope: !1669)
!1676 = !DILocation(line: 1287, column: 2, scope: !1669)
!1677 = !DILocation(line: 1290, column: 28, scope: !1678)
!1678 = distinct !DILexicalBlock(scope: !1664, file: !3, line: 1289, column: 2)
!1679 = !DILocation(line: 1290, column: 31, scope: !1678)
!1680 = !DILocation(line: 1290, column: 16, scope: !1678)
!1681 = !DILocation(line: 1290, column: 37, scope: !1678)
!1682 = !DILocation(line: 1290, column: 34, scope: !1678)
!1683 = !DILocation(line: 1290, column: 4, scope: !1678)
!1684 = !DILocation(line: 1290, column: 7, scope: !1678)
!1685 = !DILocation(line: 1290, column: 9, scope: !1678)
!1686 = !DILocation(line: 1290, column: 13, scope: !1678)
!1687 = !DILocation(line: 1291, column: 13, scope: !1678)
!1688 = !DILocation(line: 1291, column: 10, scope: !1678)
!1689 = !DILocation(line: 1292, column: 8, scope: !1690)
!1690 = distinct !DILexicalBlock(scope: !1678, file: !3, line: 1292, column: 8)
!1691 = !DILocation(line: 1292, column: 14, scope: !1690)
!1692 = !DILocation(line: 1292, column: 8, scope: !1678)
!1693 = !DILocation(line: 1294, column: 14, scope: !1694)
!1694 = distinct !DILexicalBlock(scope: !1690, file: !3, line: 1293, column: 6)
!1695 = !DILocation(line: 1295, column: 12, scope: !1696)
!1696 = distinct !DILexicalBlock(scope: !1694, file: !3, line: 1295, column: 12)
!1697 = !DILocation(line: 1295, column: 18, scope: !1696)
!1698 = !DILocation(line: 1295, column: 12, scope: !1694)
!1699 = !DILocation(line: 1296, column: 26, scope: !1696)
!1700 = !DILocation(line: 1296, column: 29, scope: !1696)
!1701 = !DILocation(line: 1296, column: 14, scope: !1696)
!1702 = !DILocation(line: 1296, column: 36, scope: !1696)
!1703 = !DILocation(line: 1296, column: 43, scope: !1696)
!1704 = !DILocation(line: 1296, column: 41, scope: !1696)
!1705 = !DILocation(line: 1296, column: 32, scope: !1696)
!1706 = !DILocation(line: 1296, column: 3, scope: !1696)
!1707 = !DILocation(line: 1296, column: 8, scope: !1696)
!1708 = !DILocation(line: 1296, column: 12, scope: !1696)
!1709 = !DILocation(line: 1297, column: 6, scope: !1694)
!1710 = !DILocation(line: 1281, column: 3, scope: !1660)
!1711 = distinct !{!1711, !1662, !1712}
!1712 = !DILocation(line: 1299, column: 5, scope: !1654)
!1713 = !DILocation(line: 1300, column: 29, scope: !1636)
!1714 = !DILocation(line: 1300, column: 33, scope: !1636)
!1715 = !DILocation(line: 1300, column: 8, scope: !1636)
!1716 = !DILocation(line: 1300, column: 6, scope: !1636)
!1717 = !DILocation(line: 1301, column: 10, scope: !1636)
!1718 = !DILocation(line: 1301, column: 3, scope: !1636)
!1719 = distinct !DISubprogram(name: "mpn_set_str_other", scope: !3, file: !3, line: 1305, type: !1720, scopeLine: 1307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1720 = !DISubroutineType(types: !1721)
!1721 = !{!184, !31, !41, !50, !27, !1468}
!1722 = !DILocalVariable(name: "rp", arg: 1, scope: !1719, file: !3, line: 1305, type: !31)
!1723 = !DILocation(line: 1305, column: 27, scope: !1719)
!1724 = !DILocalVariable(name: "sp", arg: 2, scope: !1719, file: !3, line: 1305, type: !41)
!1725 = !DILocation(line: 1305, column: 52, scope: !1719)
!1726 = !DILocalVariable(name: "sn", arg: 3, scope: !1719, file: !3, line: 1305, type: !50)
!1727 = !DILocation(line: 1305, column: 63, scope: !1719)
!1728 = !DILocalVariable(name: "b", arg: 4, scope: !1719, file: !3, line: 1306, type: !27)
!1729 = !DILocation(line: 1306, column: 16, scope: !1719)
!1730 = !DILocalVariable(name: "info", arg: 5, scope: !1719, file: !3, line: 1306, type: !1468)
!1731 = !DILocation(line: 1306, column: 47, scope: !1719)
!1732 = !DILocalVariable(name: "rn", scope: !1719, file: !3, line: 1308, type: !184)
!1733 = !DILocation(line: 1308, column: 13, scope: !1719)
!1734 = !DILocalVariable(name: "w", scope: !1719, file: !3, line: 1309, type: !27)
!1735 = !DILocation(line: 1309, column: 13, scope: !1719)
!1736 = !DILocalVariable(name: "k", scope: !1719, file: !3, line: 1310, type: !6)
!1737 = !DILocation(line: 1310, column: 12, scope: !1719)
!1738 = !DILocalVariable(name: "j", scope: !1719, file: !3, line: 1311, type: !50)
!1739 = !DILocation(line: 1311, column: 10, scope: !1719)
!1740 = !DILocation(line: 1313, column: 12, scope: !1719)
!1741 = !DILocation(line: 1313, column: 15, scope: !1719)
!1742 = !DILocation(line: 1313, column: 22, scope: !1719)
!1743 = !DILocation(line: 1313, column: 28, scope: !1719)
!1744 = !DILocation(line: 1313, column: 20, scope: !1719)
!1745 = !DILocation(line: 1313, column: 9, scope: !1719)
!1746 = !DILocation(line: 1313, column: 7, scope: !1719)
!1747 = !DILocation(line: 1313, column: 5, scope: !1719)
!1748 = !DILocation(line: 1315, column: 5, scope: !1719)
!1749 = !DILocation(line: 1316, column: 7, scope: !1719)
!1750 = !DILocation(line: 1316, column: 11, scope: !1719)
!1751 = !DILocation(line: 1316, column: 5, scope: !1719)
!1752 = !DILocation(line: 1317, column: 3, scope: !1719)
!1753 = !DILocation(line: 1317, column: 10, scope: !1754)
!1754 = distinct !DILexicalBlock(scope: !1755, file: !3, line: 1317, column: 3)
!1755 = distinct !DILexicalBlock(scope: !1719, file: !3, line: 1317, column: 3)
!1756 = !DILocation(line: 1317, column: 14, scope: !1754)
!1757 = !DILocation(line: 1317, column: 3, scope: !1755)
!1758 = !DILocation(line: 1318, column: 9, scope: !1754)
!1759 = !DILocation(line: 1318, column: 13, scope: !1754)
!1760 = !DILocation(line: 1318, column: 11, scope: !1754)
!1761 = !DILocation(line: 1318, column: 17, scope: !1754)
!1762 = !DILocation(line: 1318, column: 21, scope: !1754)
!1763 = !DILocation(line: 1318, column: 15, scope: !1754)
!1764 = !DILocation(line: 1318, column: 7, scope: !1754)
!1765 = !DILocation(line: 1317, column: 3, scope: !1754)
!1766 = distinct !{!1766, !1757, !1767}
!1767 = !DILocation(line: 1318, column: 23, scope: !1755)
!1768 = !DILocation(line: 1320, column: 11, scope: !1719)
!1769 = !DILocation(line: 1320, column: 3, scope: !1719)
!1770 = !DILocation(line: 1320, column: 9, scope: !1719)
!1771 = !DILocation(line: 1322, column: 14, scope: !1772)
!1772 = distinct !DILexicalBlock(scope: !1719, file: !3, line: 1322, column: 3)
!1773 = !DILocation(line: 1322, column: 16, scope: !1772)
!1774 = !DILocation(line: 1322, column: 13, scope: !1772)
!1775 = !DILocation(line: 1322, column: 11, scope: !1772)
!1776 = !DILocation(line: 1322, column: 8, scope: !1772)
!1777 = !DILocation(line: 1322, column: 22, scope: !1778)
!1778 = distinct !DILexicalBlock(scope: !1772, file: !3, line: 1322, column: 3)
!1779 = !DILocation(line: 1322, column: 26, scope: !1778)
!1780 = !DILocation(line: 1322, column: 24, scope: !1778)
!1781 = !DILocation(line: 1322, column: 3, scope: !1772)
!1782 = !DILocalVariable(name: "cy", scope: !1783, file: !3, line: 1324, type: !27)
!1783 = distinct !DILexicalBlock(scope: !1778, file: !3, line: 1323, column: 5)
!1784 = !DILocation(line: 1324, column: 17, scope: !1783)
!1785 = !DILocation(line: 1326, column: 11, scope: !1783)
!1786 = !DILocation(line: 1326, column: 15, scope: !1783)
!1787 = !DILocation(line: 1326, column: 9, scope: !1783)
!1788 = !DILocation(line: 1327, column: 14, scope: !1789)
!1789 = distinct !DILexicalBlock(scope: !1783, file: !3, line: 1327, column: 7)
!1790 = !DILocation(line: 1327, column: 12, scope: !1789)
!1791 = !DILocation(line: 1327, column: 19, scope: !1792)
!1792 = distinct !DILexicalBlock(scope: !1789, file: !3, line: 1327, column: 7)
!1793 = !DILocation(line: 1327, column: 23, scope: !1792)
!1794 = !DILocation(line: 1327, column: 29, scope: !1792)
!1795 = !DILocation(line: 1327, column: 21, scope: !1792)
!1796 = !DILocation(line: 1327, column: 7, scope: !1789)
!1797 = !DILocation(line: 1328, column: 6, scope: !1792)
!1798 = !DILocation(line: 1328, column: 10, scope: !1792)
!1799 = !DILocation(line: 1328, column: 8, scope: !1792)
!1800 = !DILocation(line: 1328, column: 14, scope: !1792)
!1801 = !DILocation(line: 1328, column: 18, scope: !1792)
!1802 = !DILocation(line: 1328, column: 12, scope: !1792)
!1803 = !DILocation(line: 1328, column: 4, scope: !1792)
!1804 = !DILocation(line: 1328, column: 2, scope: !1792)
!1805 = !DILocation(line: 1327, column: 35, scope: !1792)
!1806 = !DILocation(line: 1327, column: 7, scope: !1792)
!1807 = distinct !{!1807, !1796, !1808}
!1808 = !DILocation(line: 1328, column: 20, scope: !1789)
!1809 = !DILocation(line: 1330, column: 23, scope: !1783)
!1810 = !DILocation(line: 1330, column: 27, scope: !1783)
!1811 = !DILocation(line: 1330, column: 31, scope: !1783)
!1812 = !DILocation(line: 1330, column: 35, scope: !1783)
!1813 = !DILocation(line: 1330, column: 41, scope: !1783)
!1814 = !DILocation(line: 1330, column: 12, scope: !1783)
!1815 = !DILocation(line: 1330, column: 10, scope: !1783)
!1816 = !DILocation(line: 1331, column: 24, scope: !1783)
!1817 = !DILocation(line: 1331, column: 28, scope: !1783)
!1818 = !DILocation(line: 1331, column: 32, scope: !1783)
!1819 = !DILocation(line: 1331, column: 36, scope: !1783)
!1820 = !DILocation(line: 1331, column: 13, scope: !1783)
!1821 = !DILocation(line: 1331, column: 10, scope: !1783)
!1822 = !DILocation(line: 1332, column: 11, scope: !1823)
!1823 = distinct !DILexicalBlock(scope: !1783, file: !3, line: 1332, column: 11)
!1824 = !DILocation(line: 1332, column: 14, scope: !1823)
!1825 = !DILocation(line: 1332, column: 11, scope: !1783)
!1826 = !DILocation(line: 1333, column: 13, scope: !1823)
!1827 = !DILocation(line: 1333, column: 2, scope: !1823)
!1828 = !DILocation(line: 1333, column: 7, scope: !1823)
!1829 = !DILocation(line: 1333, column: 11, scope: !1823)
!1830 = !DILocation(line: 1322, column: 3, scope: !1778)
!1831 = distinct !{!1831, !1781, !1832}
!1832 = !DILocation(line: 1334, column: 5, scope: !1772)
!1833 = !DILocation(line: 1337, column: 10, scope: !1719)
!1834 = !DILocation(line: 1337, column: 3, scope: !1719)
!1835 = distinct !DISubprogram(name: "mpz_init", scope: !3, file: !3, line: 1363, type: !1836, scopeLine: 1364, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1836 = !DISubroutineType(types: !1837)
!1837 = !{null, !1838}
!1838 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1839, size: 64)
!1839 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mpz_struct", file: !28, line: 71, baseType: !1840)
!1840 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !28, line: 63, size: 128, elements: !1841)
!1841 = !{!1842, !1843, !1844}
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "_mp_alloc", scope: !1840, file: !28, line: 65, baseType: !34, size: 32)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_mp_size", scope: !1840, file: !28, line: 67, baseType: !34, size: 32, offset: 32)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "_mp_d", scope: !1840, file: !28, line: 70, baseType: !32, size: 64, offset: 64)
!1845 = !DILocalVariable(name: "r", arg: 1, scope: !1835, file: !3, line: 1363, type: !1838)
!1846 = !DILocation(line: 1363, column: 17, scope: !1835)
!1847 = !DILocation(line: 1365, column: 3, scope: !1835)
!1848 = !DILocation(line: 1365, column: 6, scope: !1835)
!1849 = !DILocation(line: 1365, column: 16, scope: !1835)
!1850 = !DILocation(line: 1366, column: 3, scope: !1835)
!1851 = !DILocation(line: 1366, column: 6, scope: !1835)
!1852 = !DILocation(line: 1366, column: 15, scope: !1835)
!1853 = !DILocation(line: 1367, column: 14, scope: !1835)
!1854 = !DILocation(line: 1367, column: 3, scope: !1835)
!1855 = !DILocation(line: 1367, column: 6, scope: !1835)
!1856 = !DILocation(line: 1367, column: 12, scope: !1835)
!1857 = !DILocation(line: 1368, column: 1, scope: !1835)
!1858 = distinct !DISubprogram(name: "gmp_xalloc_limbs", scope: !3, file: !3, line: 323, type: !1859, scopeLine: 324, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1859 = !DISubroutineType(types: !1860)
!1860 = !{!31, !184}
!1861 = !DILocalVariable(name: "size", arg: 1, scope: !1858, file: !3, line: 323, type: !184)
!1862 = !DILocation(line: 323, column: 29, scope: !1858)
!1863 = !DILocation(line: 325, column: 10, scope: !1858)
!1864 = !DILocation(line: 325, column: 3, scope: !1858)
!1865 = distinct !DISubprogram(name: "mpz_init2", scope: !3, file: !3, line: 1373, type: !1866, scopeLine: 1374, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1866 = !DISubroutineType(types: !1867)
!1867 = !{null, !1838, !35}
!1868 = !DILocalVariable(name: "r", arg: 1, scope: !1865, file: !3, line: 1373, type: !1838)
!1869 = !DILocation(line: 1373, column: 18, scope: !1865)
!1870 = !DILocalVariable(name: "bits", arg: 2, scope: !1865, file: !3, line: 1373, type: !35)
!1871 = !DILocation(line: 1373, column: 33, scope: !1865)
!1872 = !DILocalVariable(name: "rn", scope: !1865, file: !3, line: 1375, type: !184)
!1873 = !DILocation(line: 1375, column: 13, scope: !1865)
!1874 = !DILocation(line: 1377, column: 12, scope: !1865)
!1875 = !DILocation(line: 1377, column: 17, scope: !1865)
!1876 = !DILocation(line: 1377, column: 11, scope: !1865)
!1877 = !DILocation(line: 1377, column: 8, scope: !1865)
!1878 = !DILocation(line: 1378, column: 12, scope: !1865)
!1879 = !DILocation(line: 1378, column: 17, scope: !1865)
!1880 = !DILocation(line: 1378, column: 10, scope: !1865)
!1881 = !DILocation(line: 1378, column: 6, scope: !1865)
!1882 = !DILocation(line: 1380, column: 18, scope: !1865)
!1883 = !DILocation(line: 1380, column: 3, scope: !1865)
!1884 = !DILocation(line: 1380, column: 6, scope: !1865)
!1885 = !DILocation(line: 1380, column: 16, scope: !1865)
!1886 = !DILocation(line: 1381, column: 3, scope: !1865)
!1887 = !DILocation(line: 1381, column: 6, scope: !1865)
!1888 = !DILocation(line: 1381, column: 15, scope: !1865)
!1889 = !DILocation(line: 1382, column: 32, scope: !1865)
!1890 = !DILocation(line: 1382, column: 14, scope: !1865)
!1891 = !DILocation(line: 1382, column: 3, scope: !1865)
!1892 = !DILocation(line: 1382, column: 6, scope: !1865)
!1893 = !DILocation(line: 1382, column: 12, scope: !1865)
!1894 = !DILocation(line: 1383, column: 1, scope: !1865)
!1895 = distinct !DISubprogram(name: "mpz_clear", scope: !3, file: !3, line: 1386, type: !1836, scopeLine: 1387, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1896 = !DILocalVariable(name: "r", arg: 1, scope: !1895, file: !3, line: 1386, type: !1838)
!1897 = !DILocation(line: 1386, column: 18, scope: !1895)
!1898 = !DILocation(line: 1388, column: 3, scope: !1895)
!1899 = !DILocation(line: 1389, column: 1, scope: !1895)
!1900 = distinct !DISubprogram(name: "mpz_set_si", scope: !3, file: !3, line: 1412, type: !1901, scopeLine: 1413, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1901 = !DISubroutineType(types: !1902)
!1902 = !{null, !1838, !30}
!1903 = !DILocalVariable(name: "r", arg: 1, scope: !1900, file: !3, line: 1412, type: !1838)
!1904 = !DILocation(line: 1412, column: 19, scope: !1900)
!1905 = !DILocalVariable(name: "x", arg: 2, scope: !1900, file: !3, line: 1412, type: !30)
!1906 = !DILocation(line: 1412, column: 38, scope: !1900)
!1907 = !DILocation(line: 1414, column: 7, scope: !1908)
!1908 = distinct !DILexicalBlock(scope: !1900, file: !3, line: 1414, column: 7)
!1909 = !DILocation(line: 1414, column: 9, scope: !1908)
!1910 = !DILocation(line: 1414, column: 7, scope: !1900)
!1911 = !DILocation(line: 1415, column: 17, scope: !1908)
!1912 = !DILocation(line: 1415, column: 20, scope: !1908)
!1913 = !DILocation(line: 1415, column: 5, scope: !1908)
!1914 = !DILocation(line: 1418, column: 7, scope: !1915)
!1915 = distinct !DILexicalBlock(scope: !1908, file: !3, line: 1417, column: 5)
!1916 = !DILocation(line: 1418, column: 10, scope: !1915)
!1917 = !DILocation(line: 1418, column: 19, scope: !1915)
!1918 = !DILocation(line: 1419, column: 21, scope: !1915)
!1919 = !DILocation(line: 1419, column: 7, scope: !1915)
!1920 = !DILocation(line: 1419, column: 10, scope: !1915)
!1921 = !DILocation(line: 1419, column: 19, scope: !1915)
!1922 = !DILocation(line: 1421, column: 1, scope: !1900)
!1923 = distinct !DISubprogram(name: "mpz_set_ui", scope: !3, file: !3, line: 1424, type: !1924, scopeLine: 1425, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1924 = !DISubroutineType(types: !1925)
!1925 = !{null, !1838, !29}
!1926 = !DILocalVariable(name: "r", arg: 1, scope: !1923, file: !3, line: 1424, type: !1838)
!1927 = !DILocation(line: 1424, column: 19, scope: !1923)
!1928 = !DILocalVariable(name: "x", arg: 2, scope: !1923, file: !3, line: 1424, type: !29)
!1929 = !DILocation(line: 1424, column: 40, scope: !1923)
!1930 = !DILocation(line: 1426, column: 7, scope: !1931)
!1931 = distinct !DILexicalBlock(scope: !1923, file: !3, line: 1426, column: 7)
!1932 = !DILocation(line: 1426, column: 9, scope: !1931)
!1933 = !DILocation(line: 1426, column: 7, scope: !1923)
!1934 = !DILocation(line: 1428, column: 7, scope: !1935)
!1935 = distinct !DILexicalBlock(scope: !1931, file: !3, line: 1427, column: 5)
!1936 = !DILocation(line: 1428, column: 10, scope: !1935)
!1937 = !DILocation(line: 1428, column: 19, scope: !1935)
!1938 = !DILocation(line: 1429, column: 21, scope: !1935)
!1939 = !DILocation(line: 1429, column: 7, scope: !1935)
!1940 = !DILocation(line: 1429, column: 10, scope: !1935)
!1941 = !DILocation(line: 1429, column: 19, scope: !1935)
!1942 = !DILocation(line: 1430, column: 5, scope: !1935)
!1943 = !DILocation(line: 1432, column: 5, scope: !1931)
!1944 = !DILocation(line: 1432, column: 8, scope: !1931)
!1945 = !DILocation(line: 1432, column: 17, scope: !1931)
!1946 = !DILocation(line: 1433, column: 1, scope: !1923)
!1947 = distinct !DISubprogram(name: "mpz_set", scope: !3, file: !3, line: 1436, type: !1948, scopeLine: 1437, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1948 = !DISubroutineType(types: !1949)
!1949 = !{null, !1838, !1950}
!1950 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1951, size: 64)
!1951 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1839)
!1952 = !DILocalVariable(name: "r", arg: 1, scope: !1947, file: !3, line: 1436, type: !1838)
!1953 = !DILocation(line: 1436, column: 16, scope: !1947)
!1954 = !DILocalVariable(name: "x", arg: 2, scope: !1947, file: !3, line: 1436, type: !1950)
!1955 = !DILocation(line: 1436, column: 31, scope: !1947)
!1956 = !DILocation(line: 1439, column: 7, scope: !1957)
!1957 = distinct !DILexicalBlock(scope: !1947, file: !3, line: 1439, column: 7)
!1958 = !DILocation(line: 1439, column: 12, scope: !1957)
!1959 = !DILocation(line: 1439, column: 9, scope: !1957)
!1960 = !DILocation(line: 1439, column: 7, scope: !1947)
!1961 = !DILocalVariable(name: "n", scope: !1962, file: !3, line: 1441, type: !184)
!1962 = distinct !DILexicalBlock(scope: !1957, file: !3, line: 1440, column: 5)
!1963 = !DILocation(line: 1441, column: 17, scope: !1962)
!1964 = !DILocalVariable(name: "rp", scope: !1962, file: !3, line: 1442, type: !31)
!1965 = !DILocation(line: 1442, column: 14, scope: !1962)
!1966 = !DILocation(line: 1444, column: 11, scope: !1962)
!1967 = !DILocation(line: 1444, column: 9, scope: !1962)
!1968 = !DILocation(line: 1445, column: 12, scope: !1962)
!1969 = !DILocation(line: 1445, column: 10, scope: !1962)
!1970 = !DILocation(line: 1447, column: 18, scope: !1962)
!1971 = !DILocation(line: 1447, column: 22, scope: !1962)
!1972 = !DILocation(line: 1447, column: 25, scope: !1962)
!1973 = !DILocation(line: 1447, column: 32, scope: !1962)
!1974 = !DILocation(line: 1447, column: 7, scope: !1962)
!1975 = !DILocation(line: 1448, column: 21, scope: !1962)
!1976 = !DILocation(line: 1448, column: 24, scope: !1962)
!1977 = !DILocation(line: 1448, column: 7, scope: !1962)
!1978 = !DILocation(line: 1448, column: 10, scope: !1962)
!1979 = !DILocation(line: 1448, column: 19, scope: !1962)
!1980 = !DILocation(line: 1449, column: 5, scope: !1962)
!1981 = !DILocation(line: 1450, column: 1, scope: !1947)
!1982 = distinct !DISubprogram(name: "mpz_realloc", scope: !3, file: !3, line: 1392, type: !1983, scopeLine: 1393, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!1983 = !DISubroutineType(types: !1984)
!1984 = !{!49, !1838, !184}
!1985 = !DILocalVariable(name: "r", arg: 1, scope: !1982, file: !3, line: 1392, type: !1838)
!1986 = !DILocation(line: 1392, column: 20, scope: !1982)
!1987 = !DILocalVariable(name: "size", arg: 2, scope: !1982, file: !3, line: 1392, type: !184)
!1988 = !DILocation(line: 1392, column: 33, scope: !1982)
!1989 = !DILocation(line: 1394, column: 10, scope: !1982)
!1990 = !DILocation(line: 1394, column: 8, scope: !1982)
!1991 = !DILocation(line: 1396, column: 34, scope: !1982)
!1992 = !DILocation(line: 1396, column: 37, scope: !1982)
!1993 = !DILocation(line: 1396, column: 44, scope: !1982)
!1994 = !DILocation(line: 1396, column: 14, scope: !1982)
!1995 = !DILocation(line: 1396, column: 3, scope: !1982)
!1996 = !DILocation(line: 1396, column: 6, scope: !1982)
!1997 = !DILocation(line: 1396, column: 12, scope: !1982)
!1998 = !DILocation(line: 1397, column: 18, scope: !1982)
!1999 = !DILocation(line: 1397, column: 3, scope: !1982)
!2000 = !DILocation(line: 1397, column: 6, scope: !1982)
!2001 = !DILocation(line: 1397, column: 16, scope: !1982)
!2002 = !DILocation(line: 1399, column: 7, scope: !2003)
!2003 = distinct !DILexicalBlock(scope: !1982, file: !3, line: 1399, column: 7)
!2004 = !DILocation(line: 1399, column: 31, scope: !2003)
!2005 = !DILocation(line: 1399, column: 29, scope: !2003)
!2006 = !DILocation(line: 1399, column: 7, scope: !1982)
!2007 = !DILocation(line: 1400, column: 5, scope: !2003)
!2008 = !DILocation(line: 1400, column: 8, scope: !2003)
!2009 = !DILocation(line: 1400, column: 17, scope: !2003)
!2010 = !DILocation(line: 1402, column: 10, scope: !1982)
!2011 = !DILocation(line: 1402, column: 13, scope: !1982)
!2012 = !DILocation(line: 1402, column: 3, scope: !1982)
!2013 = distinct !DISubprogram(name: "mpz_init_set_si", scope: !3, file: !3, line: 1453, type: !1901, scopeLine: 1454, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2014 = !DILocalVariable(name: "r", arg: 1, scope: !2013, file: !3, line: 1453, type: !1838)
!2015 = !DILocation(line: 1453, column: 24, scope: !2013)
!2016 = !DILocalVariable(name: "x", arg: 2, scope: !2013, file: !3, line: 1453, type: !30)
!2017 = !DILocation(line: 1453, column: 43, scope: !2013)
!2018 = !DILocation(line: 1455, column: 13, scope: !2013)
!2019 = !DILocation(line: 1455, column: 3, scope: !2013)
!2020 = !DILocation(line: 1456, column: 15, scope: !2013)
!2021 = !DILocation(line: 1456, column: 18, scope: !2013)
!2022 = !DILocation(line: 1456, column: 3, scope: !2013)
!2023 = !DILocation(line: 1457, column: 1, scope: !2013)
!2024 = distinct !DISubprogram(name: "mpz_init_set_ui", scope: !3, file: !3, line: 1460, type: !1924, scopeLine: 1461, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2025 = !DILocalVariable(name: "r", arg: 1, scope: !2024, file: !3, line: 1460, type: !1838)
!2026 = !DILocation(line: 1460, column: 24, scope: !2024)
!2027 = !DILocalVariable(name: "x", arg: 2, scope: !2024, file: !3, line: 1460, type: !29)
!2028 = !DILocation(line: 1460, column: 45, scope: !2024)
!2029 = !DILocation(line: 1462, column: 13, scope: !2024)
!2030 = !DILocation(line: 1462, column: 3, scope: !2024)
!2031 = !DILocation(line: 1463, column: 15, scope: !2024)
!2032 = !DILocation(line: 1463, column: 18, scope: !2024)
!2033 = !DILocation(line: 1463, column: 3, scope: !2024)
!2034 = !DILocation(line: 1464, column: 1, scope: !2024)
!2035 = distinct !DISubprogram(name: "mpz_init_set", scope: !3, file: !3, line: 1467, type: !1948, scopeLine: 1468, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2036 = !DILocalVariable(name: "r", arg: 1, scope: !2035, file: !3, line: 1467, type: !1838)
!2037 = !DILocation(line: 1467, column: 21, scope: !2035)
!2038 = !DILocalVariable(name: "x", arg: 2, scope: !2035, file: !3, line: 1467, type: !1950)
!2039 = !DILocation(line: 1467, column: 36, scope: !2035)
!2040 = !DILocation(line: 1469, column: 13, scope: !2035)
!2041 = !DILocation(line: 1469, column: 3, scope: !2035)
!2042 = !DILocation(line: 1470, column: 12, scope: !2035)
!2043 = !DILocation(line: 1470, column: 15, scope: !2035)
!2044 = !DILocation(line: 1470, column: 3, scope: !2035)
!2045 = !DILocation(line: 1471, column: 1, scope: !2035)
!2046 = distinct !DISubprogram(name: "mpz_fits_slong_p", scope: !3, file: !3, line: 1474, type: !2047, scopeLine: 1475, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2047 = !DISubroutineType(types: !2048)
!2048 = !{!34, !1950}
!2049 = !DILocalVariable(name: "u", arg: 1, scope: !2046, file: !3, line: 1474, type: !1950)
!2050 = !DILocation(line: 1474, column: 31, scope: !2046)
!2051 = !DILocalVariable(name: "us", scope: !2046, file: !3, line: 1476, type: !184)
!2052 = !DILocation(line: 1476, column: 13, scope: !2046)
!2053 = !DILocation(line: 1476, column: 18, scope: !2046)
!2054 = !DILocation(line: 1476, column: 21, scope: !2046)
!2055 = !DILocation(line: 1478, column: 7, scope: !2056)
!2056 = distinct !DILexicalBlock(scope: !2046, file: !3, line: 1478, column: 7)
!2057 = !DILocation(line: 1478, column: 10, scope: !2056)
!2058 = !DILocation(line: 1478, column: 7, scope: !2046)
!2059 = !DILocation(line: 1479, column: 5, scope: !2056)
!2060 = !DILocation(line: 1480, column: 12, scope: !2061)
!2061 = distinct !DILexicalBlock(scope: !2056, file: !3, line: 1480, column: 12)
!2062 = !DILocation(line: 1480, column: 15, scope: !2061)
!2063 = !DILocation(line: 1480, column: 12, scope: !2056)
!2064 = !DILocation(line: 1481, column: 12, scope: !2061)
!2065 = !DILocation(line: 1481, column: 15, scope: !2061)
!2066 = !DILocation(line: 1481, column: 24, scope: !2061)
!2067 = !DILocation(line: 1481, column: 5, scope: !2061)
!2068 = !DILocation(line: 1482, column: 12, scope: !2069)
!2069 = distinct !DILexicalBlock(scope: !2061, file: !3, line: 1482, column: 12)
!2070 = !DILocation(line: 1482, column: 15, scope: !2069)
!2071 = !DILocation(line: 1482, column: 12, scope: !2061)
!2072 = !DILocation(line: 1483, column: 12, scope: !2069)
!2073 = !DILocation(line: 1483, column: 15, scope: !2069)
!2074 = !DILocation(line: 1483, column: 24, scope: !2069)
!2075 = !DILocation(line: 1483, column: 5, scope: !2069)
!2076 = !DILocation(line: 1485, column: 5, scope: !2069)
!2077 = !DILocation(line: 1486, column: 1, scope: !2046)
!2078 = distinct !DISubprogram(name: "mpz_fits_ulong_p", scope: !3, file: !3, line: 1489, type: !2047, scopeLine: 1490, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2079 = !DILocalVariable(name: "u", arg: 1, scope: !2078, file: !3, line: 1489, type: !1950)
!2080 = !DILocation(line: 1489, column: 31, scope: !2078)
!2081 = !DILocalVariable(name: "us", scope: !2078, file: !3, line: 1491, type: !184)
!2082 = !DILocation(line: 1491, column: 13, scope: !2078)
!2083 = !DILocation(line: 1491, column: 18, scope: !2078)
!2084 = !DILocation(line: 1491, column: 21, scope: !2078)
!2085 = !DILocation(line: 1493, column: 11, scope: !2078)
!2086 = !DILocation(line: 1493, column: 18, scope: !2078)
!2087 = !DILocation(line: 1493, column: 21, scope: !2078)
!2088 = !DILocation(line: 1493, column: 17, scope: !2078)
!2089 = !DILocation(line: 1493, column: 14, scope: !2078)
!2090 = !DILocation(line: 1493, column: 3, scope: !2078)
!2091 = distinct !DISubprogram(name: "mpz_get_si", scope: !3, file: !3, line: 1497, type: !2092, scopeLine: 1498, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2092 = !DISubroutineType(types: !2093)
!2093 = !{!30, !1950}
!2094 = !DILocalVariable(name: "u", arg: 1, scope: !2091, file: !3, line: 1497, type: !1950)
!2095 = !DILocation(line: 1497, column: 25, scope: !2091)
!2096 = !DILocalVariable(name: "us", scope: !2091, file: !3, line: 1499, type: !184)
!2097 = !DILocation(line: 1499, column: 13, scope: !2091)
!2098 = !DILocation(line: 1499, column: 18, scope: !2091)
!2099 = !DILocation(line: 1499, column: 21, scope: !2091)
!2100 = !DILocation(line: 1501, column: 7, scope: !2101)
!2101 = distinct !DILexicalBlock(scope: !2091, file: !3, line: 1501, column: 7)
!2102 = !DILocation(line: 1501, column: 10, scope: !2101)
!2103 = !DILocation(line: 1501, column: 7, scope: !2091)
!2104 = !DILocation(line: 1502, column: 20, scope: !2101)
!2105 = !DILocation(line: 1502, column: 23, scope: !2101)
!2106 = !DILocation(line: 1502, column: 32, scope: !2101)
!2107 = !DILocation(line: 1502, column: 5, scope: !2101)
!2108 = !DILocation(line: 1503, column: 12, scope: !2109)
!2109 = distinct !DILexicalBlock(scope: !2101, file: !3, line: 1503, column: 12)
!2110 = !DILocation(line: 1503, column: 15, scope: !2109)
!2111 = !DILocation(line: 1503, column: 12, scope: !2101)
!2112 = !DILocation(line: 1504, column: 22, scope: !2109)
!2113 = !DILocation(line: 1504, column: 25, scope: !2109)
!2114 = !DILocation(line: 1504, column: 20, scope: !2109)
!2115 = !DILocation(line: 1504, column: 34, scope: !2109)
!2116 = !DILocation(line: 1504, column: 5, scope: !2109)
!2117 = !DILocation(line: 1506, column: 5, scope: !2109)
!2118 = !DILocation(line: 1507, column: 1, scope: !2091)
!2119 = distinct !DISubprogram(name: "mpz_get_ui", scope: !3, file: !3, line: 1510, type: !2120, scopeLine: 1511, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2120 = !DISubroutineType(types: !2121)
!2121 = !{!29, !1950}
!2122 = !DILocalVariable(name: "u", arg: 1, scope: !2119, file: !3, line: 1510, type: !1950)
!2123 = !DILocation(line: 1510, column: 25, scope: !2119)
!2124 = !DILocation(line: 1512, column: 10, scope: !2119)
!2125 = !DILocation(line: 1512, column: 13, scope: !2119)
!2126 = !DILocation(line: 1512, column: 22, scope: !2119)
!2127 = !DILocation(line: 1512, column: 33, scope: !2119)
!2128 = !DILocation(line: 1512, column: 36, scope: !2119)
!2129 = !DILocation(line: 1512, column: 3, scope: !2119)
!2130 = distinct !DISubprogram(name: "mpz_size", scope: !3, file: !3, line: 1516, type: !2131, scopeLine: 1517, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2131 = !DISubroutineType(types: !2132)
!2132 = !{!50, !1950}
!2133 = !DILocalVariable(name: "u", arg: 1, scope: !2130, file: !3, line: 1516, type: !1950)
!2134 = !DILocation(line: 1516, column: 23, scope: !2130)
!2135 = !DILocation(line: 1518, column: 10, scope: !2130)
!2136 = !DILocation(line: 1518, column: 3, scope: !2130)
!2137 = distinct !DISubprogram(name: "mpz_getlimbn", scope: !3, file: !3, line: 1522, type: !2138, scopeLine: 1523, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2138 = !DISubroutineType(types: !2139)
!2139 = !{!27, !1950, !184}
!2140 = !DILocalVariable(name: "u", arg: 1, scope: !2137, file: !3, line: 1522, type: !1950)
!2141 = !DILocation(line: 1522, column: 27, scope: !2137)
!2142 = !DILocalVariable(name: "n", arg: 2, scope: !2137, file: !3, line: 1522, type: !184)
!2143 = !DILocation(line: 1522, column: 40, scope: !2137)
!2144 = !DILocation(line: 1524, column: 7, scope: !2145)
!2145 = distinct !DILexicalBlock(scope: !2137, file: !3, line: 1524, column: 7)
!2146 = !DILocation(line: 1524, column: 9, scope: !2145)
!2147 = !DILocation(line: 1524, column: 14, scope: !2145)
!2148 = !DILocation(line: 1524, column: 17, scope: !2145)
!2149 = !DILocation(line: 1524, column: 21, scope: !2145)
!2150 = !DILocation(line: 1524, column: 19, scope: !2145)
!2151 = !DILocation(line: 1524, column: 7, scope: !2137)
!2152 = !DILocation(line: 1525, column: 12, scope: !2145)
!2153 = !DILocation(line: 1525, column: 15, scope: !2145)
!2154 = !DILocation(line: 1525, column: 21, scope: !2145)
!2155 = !DILocation(line: 1525, column: 5, scope: !2145)
!2156 = !DILocation(line: 1527, column: 5, scope: !2145)
!2157 = !DILocation(line: 1528, column: 1, scope: !2137)
!2158 = distinct !DISubprogram(name: "mpz_realloc2", scope: !3, file: !3, line: 1531, type: !1866, scopeLine: 1532, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2159 = !DILocalVariable(name: "x", arg: 1, scope: !2158, file: !3, line: 1531, type: !1838)
!2160 = !DILocation(line: 1531, column: 21, scope: !2158)
!2161 = !DILocalVariable(name: "n", arg: 2, scope: !2158, file: !3, line: 1531, type: !35)
!2162 = !DILocation(line: 1531, column: 36, scope: !2158)
!2163 = !DILocation(line: 1533, column: 16, scope: !2158)
!2164 = !DILocation(line: 1533, column: 24, scope: !2158)
!2165 = !DILocation(line: 1533, column: 29, scope: !2158)
!2166 = !DILocation(line: 1533, column: 31, scope: !2158)
!2167 = !DILocation(line: 1533, column: 28, scope: !2158)
!2168 = !DILocation(line: 1533, column: 26, scope: !2158)
!2169 = !DILocation(line: 1533, column: 38, scope: !2158)
!2170 = !DILocation(line: 1533, column: 21, scope: !2158)
!2171 = !DILocation(line: 1533, column: 3, scope: !2158)
!2172 = !DILocation(line: 1534, column: 1, scope: !2158)
!2173 = distinct !DISubprogram(name: "mpz_limbs_read", scope: !3, file: !3, line: 1537, type: !2174, scopeLine: 1538, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2174 = !DISubroutineType(types: !2175)
!2175 = !{!181, !2176}
!2176 = !DIDerivedType(tag: DW_TAG_typedef, name: "mpz_srcptr", file: !28, line: 76, baseType: !1950)
!2177 = !DILocalVariable(name: "x", arg: 1, scope: !2173, file: !3, line: 1537, type: !2176)
!2178 = !DILocation(line: 1537, column: 28, scope: !2173)
!2179 = !DILocation(line: 1539, column: 10, scope: !2173)
!2180 = !DILocation(line: 1539, column: 13, scope: !2173)
!2181 = !DILocation(line: 1539, column: 3, scope: !2173)
!2182 = distinct !DISubprogram(name: "mpz_limbs_modify", scope: !3, file: !3, line: 1543, type: !2183, scopeLine: 1544, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2183 = !DISubroutineType(types: !2184)
!2184 = !{!31, !1838, !184}
!2185 = !DILocalVariable(name: "x", arg: 1, scope: !2182, file: !3, line: 1543, type: !1838)
!2186 = !DILocation(line: 1543, column: 25, scope: !2182)
!2187 = !DILocalVariable(name: "n", arg: 2, scope: !2182, file: !3, line: 1543, type: !184)
!2188 = !DILocation(line: 1543, column: 38, scope: !2182)
!2189 = !DILocation(line: 1546, column: 10, scope: !2182)
!2190 = !DILocation(line: 1546, column: 3, scope: !2182)
!2191 = distinct !DISubprogram(name: "mpz_limbs_write", scope: !3, file: !3, line: 1550, type: !2183, scopeLine: 1551, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2192 = !DILocalVariable(name: "x", arg: 1, scope: !2191, file: !3, line: 1550, type: !1838)
!2193 = !DILocation(line: 1550, column: 24, scope: !2191)
!2194 = !DILocalVariable(name: "n", arg: 2, scope: !2191, file: !3, line: 1550, type: !184)
!2195 = !DILocation(line: 1550, column: 37, scope: !2191)
!2196 = !DILocation(line: 1552, column: 28, scope: !2191)
!2197 = !DILocation(line: 1552, column: 31, scope: !2191)
!2198 = !DILocation(line: 1552, column: 10, scope: !2191)
!2199 = !DILocation(line: 1552, column: 3, scope: !2191)
!2200 = distinct !DISubprogram(name: "mpz_limbs_finish", scope: !3, file: !3, line: 1556, type: !2201, scopeLine: 1557, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2201 = !DISubroutineType(types: !2202)
!2202 = !{null, !1838, !184}
!2203 = !DILocalVariable(name: "x", arg: 1, scope: !2200, file: !3, line: 1556, type: !1838)
!2204 = !DILocation(line: 1556, column: 25, scope: !2200)
!2205 = !DILocalVariable(name: "xs", arg: 2, scope: !2200, file: !3, line: 1556, type: !184)
!2206 = !DILocation(line: 1556, column: 38, scope: !2200)
!2207 = !DILocalVariable(name: "xn", scope: !2200, file: !3, line: 1558, type: !184)
!2208 = !DILocation(line: 1558, column: 13, scope: !2200)
!2209 = !DILocation(line: 1559, column: 29, scope: !2200)
!2210 = !DILocation(line: 1559, column: 32, scope: !2200)
!2211 = !DILocation(line: 1559, column: 39, scope: !2200)
!2212 = !DILocation(line: 1559, column: 8, scope: !2200)
!2213 = !DILocation(line: 1559, column: 6, scope: !2200)
!2214 = !DILocation(line: 1560, column: 17, scope: !2200)
!2215 = !DILocation(line: 1560, column: 20, scope: !2200)
!2216 = !DILocation(line: 1560, column: 27, scope: !2200)
!2217 = !DILocation(line: 1560, column: 26, scope: !2200)
!2218 = !DILocation(line: 1560, column: 32, scope: !2200)
!2219 = !DILocation(line: 1560, column: 3, scope: !2200)
!2220 = !DILocation(line: 1560, column: 6, scope: !2200)
!2221 = !DILocation(line: 1560, column: 15, scope: !2200)
!2222 = !DILocation(line: 1561, column: 1, scope: !2200)
!2223 = distinct !DISubprogram(name: "mpn_normalized_size", scope: !3, file: !3, line: 374, type: !2224, scopeLine: 375, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2224 = !DISubroutineType(types: !2225)
!2225 = !{!184, !181, !184}
!2226 = !DILocalVariable(name: "xp", arg: 1, scope: !2223, file: !3, line: 374, type: !181)
!2227 = !DILocation(line: 374, column: 32, scope: !2223)
!2228 = !DILocalVariable(name: "n", arg: 2, scope: !2223, file: !3, line: 374, type: !184)
!2229 = !DILocation(line: 374, column: 46, scope: !2223)
!2230 = !DILocation(line: 376, column: 3, scope: !2223)
!2231 = !DILocation(line: 376, column: 10, scope: !2232)
!2232 = distinct !DILexicalBlock(scope: !2233, file: !3, line: 376, column: 3)
!2233 = distinct !DILexicalBlock(scope: !2223, file: !3, line: 376, column: 3)
!2234 = !DILocation(line: 376, column: 12, scope: !2232)
!2235 = !DILocation(line: 376, column: 16, scope: !2232)
!2236 = !DILocation(line: 376, column: 19, scope: !2232)
!2237 = !DILocation(line: 376, column: 22, scope: !2232)
!2238 = !DILocation(line: 376, column: 23, scope: !2232)
!2239 = !DILocation(line: 376, column: 27, scope: !2232)
!2240 = !DILocation(line: 0, scope: !2232)
!2241 = !DILocation(line: 376, column: 3, scope: !2233)
!2242 = !DILocation(line: 376, column: 34, scope: !2232)
!2243 = !DILocation(line: 376, column: 3, scope: !2232)
!2244 = distinct !{!2244, !2241, !2245}
!2245 = !DILocation(line: 377, column: 5, scope: !2233)
!2246 = !DILocation(line: 378, column: 10, scope: !2223)
!2247 = !DILocation(line: 378, column: 3, scope: !2223)
!2248 = distinct !DISubprogram(name: "mpz_roinit_n", scope: !3, file: !3, line: 1564, type: !2249, scopeLine: 1565, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2249 = !DISubroutineType(types: !2250)
!2250 = !{!2176, !1838, !181, !184}
!2251 = !DILocalVariable(name: "x", arg: 1, scope: !2248, file: !3, line: 1564, type: !1838)
!2252 = !DILocation(line: 1564, column: 21, scope: !2248)
!2253 = !DILocalVariable(name: "xp", arg: 2, scope: !2248, file: !3, line: 1564, type: !181)
!2254 = !DILocation(line: 1564, column: 34, scope: !2248)
!2255 = !DILocalVariable(name: "xs", arg: 3, scope: !2248, file: !3, line: 1564, type: !184)
!2256 = !DILocation(line: 1564, column: 48, scope: !2248)
!2257 = !DILocation(line: 1566, column: 3, scope: !2248)
!2258 = !DILocation(line: 1566, column: 6, scope: !2248)
!2259 = !DILocation(line: 1566, column: 16, scope: !2248)
!2260 = !DILocation(line: 1567, column: 23, scope: !2248)
!2261 = !DILocation(line: 1567, column: 3, scope: !2248)
!2262 = !DILocation(line: 1567, column: 6, scope: !2248)
!2263 = !DILocation(line: 1567, column: 12, scope: !2248)
!2264 = !DILocation(line: 1568, column: 21, scope: !2248)
!2265 = !DILocation(line: 1568, column: 24, scope: !2248)
!2266 = !DILocation(line: 1568, column: 3, scope: !2248)
!2267 = !DILocation(line: 1569, column: 10, scope: !2248)
!2268 = !DILocation(line: 1569, column: 3, scope: !2248)
!2269 = distinct !DISubprogram(name: "mpz_set_d", scope: !3, file: !3, line: 1575, type: !2270, scopeLine: 1576, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2270 = !DISubroutineType(types: !2271)
!2271 = !{null, !1838, !33}
!2272 = !DILocalVariable(name: "r", arg: 1, scope: !2269, file: !3, line: 1575, type: !1838)
!2273 = !DILocation(line: 1575, column: 18, scope: !2269)
!2274 = !DILocalVariable(name: "x", arg: 2, scope: !2269, file: !3, line: 1575, type: !33)
!2275 = !DILocation(line: 1575, column: 28, scope: !2269)
!2276 = !DILocalVariable(name: "sign", scope: !2269, file: !3, line: 1577, type: !34)
!2277 = !DILocation(line: 1577, column: 7, scope: !2269)
!2278 = !DILocalVariable(name: "rp", scope: !2269, file: !3, line: 1578, type: !31)
!2279 = !DILocation(line: 1578, column: 10, scope: !2269)
!2280 = !DILocalVariable(name: "rn", scope: !2269, file: !3, line: 1579, type: !184)
!2281 = !DILocation(line: 1579, column: 13, scope: !2269)
!2282 = !DILocalVariable(name: "i", scope: !2269, file: !3, line: 1579, type: !184)
!2283 = !DILocation(line: 1579, column: 17, scope: !2269)
!2284 = !DILocalVariable(name: "B", scope: !2269, file: !3, line: 1580, type: !33)
!2285 = !DILocation(line: 1580, column: 10, scope: !2269)
!2286 = !DILocalVariable(name: "Bi", scope: !2269, file: !3, line: 1581, type: !33)
!2287 = !DILocation(line: 1581, column: 10, scope: !2269)
!2288 = !DILocalVariable(name: "f", scope: !2269, file: !3, line: 1582, type: !27)
!2289 = !DILocation(line: 1582, column: 13, scope: !2269)
!2290 = !DILocation(line: 1586, column: 7, scope: !2291)
!2291 = distinct !DILexicalBlock(scope: !2269, file: !3, line: 1586, column: 7)
!2292 = !DILocation(line: 1586, column: 12, scope: !2291)
!2293 = !DILocation(line: 1586, column: 9, scope: !2291)
!2294 = !DILocation(line: 1586, column: 14, scope: !2291)
!2295 = !DILocation(line: 1586, column: 17, scope: !2291)
!2296 = !DILocation(line: 1586, column: 22, scope: !2291)
!2297 = !DILocation(line: 1586, column: 24, scope: !2291)
!2298 = !DILocation(line: 1586, column: 19, scope: !2291)
!2299 = !DILocation(line: 1586, column: 7, scope: !2269)
!2300 = !DILocation(line: 1588, column: 7, scope: !2301)
!2301 = distinct !DILexicalBlock(scope: !2291, file: !3, line: 1587, column: 5)
!2302 = !DILocation(line: 1588, column: 10, scope: !2301)
!2303 = !DILocation(line: 1588, column: 19, scope: !2301)
!2304 = !DILocation(line: 1589, column: 7, scope: !2301)
!2305 = !DILocation(line: 1592, column: 10, scope: !2269)
!2306 = !DILocation(line: 1592, column: 12, scope: !2269)
!2307 = !DILocation(line: 1592, column: 8, scope: !2269)
!2308 = !DILocation(line: 1593, column: 7, scope: !2309)
!2309 = distinct !DILexicalBlock(scope: !2269, file: !3, line: 1593, column: 7)
!2310 = !DILocation(line: 1593, column: 7, scope: !2269)
!2311 = !DILocation(line: 1594, column: 11, scope: !2309)
!2312 = !DILocation(line: 1594, column: 9, scope: !2309)
!2313 = !DILocation(line: 1594, column: 7, scope: !2309)
!2314 = !DILocation(line: 1594, column: 5, scope: !2309)
!2315 = !DILocation(line: 1596, column: 7, scope: !2316)
!2316 = distinct !DILexicalBlock(scope: !2269, file: !3, line: 1596, column: 7)
!2317 = !DILocation(line: 1596, column: 9, scope: !2316)
!2318 = !DILocation(line: 1596, column: 7, scope: !2269)
!2319 = !DILocation(line: 1598, column: 7, scope: !2320)
!2320 = distinct !DILexicalBlock(scope: !2316, file: !3, line: 1597, column: 5)
!2321 = !DILocation(line: 1598, column: 10, scope: !2320)
!2322 = !DILocation(line: 1598, column: 19, scope: !2320)
!2323 = !DILocation(line: 1599, column: 7, scope: !2320)
!2324 = !DILocation(line: 1601, column: 5, scope: !2269)
!2325 = !DILocation(line: 1602, column: 14, scope: !2269)
!2326 = !DILocation(line: 1602, column: 12, scope: !2269)
!2327 = !DILocation(line: 1602, column: 6, scope: !2269)
!2328 = !DILocation(line: 1603, column: 11, scope: !2329)
!2329 = distinct !DILexicalBlock(scope: !2269, file: !3, line: 1603, column: 3)
!2330 = !DILocation(line: 1603, column: 8, scope: !2329)
!2331 = !DILocation(line: 1603, column: 16, scope: !2332)
!2332 = distinct !DILexicalBlock(scope: !2329, file: !3, line: 1603, column: 3)
!2333 = !DILocation(line: 1603, column: 21, scope: !2332)
!2334 = !DILocation(line: 1603, column: 18, scope: !2332)
!2335 = !DILocation(line: 1603, column: 3, scope: !2329)
!2336 = !DILocation(line: 1604, column: 10, scope: !2332)
!2337 = !DILocation(line: 1604, column: 7, scope: !2332)
!2338 = !DILocation(line: 1604, column: 5, scope: !2332)
!2339 = !DILocation(line: 1603, column: 26, scope: !2332)
!2340 = !DILocation(line: 1603, column: 3, scope: !2332)
!2341 = distinct !{!2341, !2335, !2342}
!2342 = !DILocation(line: 1604, column: 10, scope: !2329)
!2343 = !DILocation(line: 1606, column: 8, scope: !2269)
!2344 = !DILocation(line: 1606, column: 6, scope: !2269)
!2345 = !DILocation(line: 1608, column: 19, scope: !2269)
!2346 = !DILocation(line: 1608, column: 7, scope: !2269)
!2347 = !DILocation(line: 1608, column: 5, scope: !2269)
!2348 = !DILocation(line: 1609, column: 8, scope: !2269)
!2349 = !DILocation(line: 1609, column: 5, scope: !2269)
!2350 = !DILocation(line: 1611, column: 7, scope: !2269)
!2351 = !DILocation(line: 1611, column: 9, scope: !2269)
!2352 = !DILocation(line: 1611, column: 5, scope: !2269)
!2353 = !DILocation(line: 1612, column: 11, scope: !2269)
!2354 = !DILocation(line: 1612, column: 3, scope: !2269)
!2355 = !DILocation(line: 1612, column: 6, scope: !2269)
!2356 = !DILocation(line: 1612, column: 9, scope: !2269)
!2357 = !DILocation(line: 1613, column: 3, scope: !2269)
!2358 = !DILocation(line: 1613, column: 10, scope: !2269)
!2359 = !DILocation(line: 1613, column: 14, scope: !2269)
!2360 = !DILocation(line: 1615, column: 11, scope: !2361)
!2361 = distinct !DILexicalBlock(scope: !2269, file: !3, line: 1614, column: 5)
!2362 = !DILocation(line: 1615, column: 15, scope: !2361)
!2363 = !DILocation(line: 1615, column: 13, scope: !2361)
!2364 = !DILocation(line: 1615, column: 9, scope: !2361)
!2365 = !DILocation(line: 1616, column: 23, scope: !2361)
!2366 = !DILocation(line: 1616, column: 11, scope: !2361)
!2367 = !DILocation(line: 1616, column: 9, scope: !2361)
!2368 = !DILocation(line: 1617, column: 12, scope: !2361)
!2369 = !DILocation(line: 1617, column: 9, scope: !2361)
!2370 = !DILocation(line: 1619, column: 15, scope: !2361)
!2371 = !DILocation(line: 1619, column: 7, scope: !2361)
!2372 = !DILocation(line: 1619, column: 10, scope: !2361)
!2373 = !DILocation(line: 1619, column: 13, scope: !2361)
!2374 = distinct !{!2374, !2357, !2375}
!2375 = !DILocation(line: 1620, column: 5, scope: !2269)
!2376 = !DILocation(line: 1622, column: 17, scope: !2269)
!2377 = !DILocation(line: 1622, column: 26, scope: !2269)
!2378 = !DILocation(line: 1622, column: 24, scope: !2269)
!2379 = !DILocation(line: 1622, column: 31, scope: !2269)
!2380 = !DILocation(line: 1622, column: 3, scope: !2269)
!2381 = !DILocation(line: 1622, column: 6, scope: !2269)
!2382 = !DILocation(line: 1622, column: 15, scope: !2269)
!2383 = !DILocation(line: 1623, column: 1, scope: !2269)
!2384 = distinct !DISubprogram(name: "mpz_init_set_d", scope: !3, file: !3, line: 1626, type: !2270, scopeLine: 1627, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2385 = !DILocalVariable(name: "r", arg: 1, scope: !2384, file: !3, line: 1626, type: !1838)
!2386 = !DILocation(line: 1626, column: 23, scope: !2384)
!2387 = !DILocalVariable(name: "x", arg: 2, scope: !2384, file: !3, line: 1626, type: !33)
!2388 = !DILocation(line: 1626, column: 33, scope: !2384)
!2389 = !DILocation(line: 1628, column: 13, scope: !2384)
!2390 = !DILocation(line: 1628, column: 3, scope: !2384)
!2391 = !DILocation(line: 1629, column: 14, scope: !2384)
!2392 = !DILocation(line: 1629, column: 17, scope: !2384)
!2393 = !DILocation(line: 1629, column: 3, scope: !2384)
!2394 = !DILocation(line: 1630, column: 1, scope: !2384)
!2395 = distinct !DISubprogram(name: "mpz_get_d", scope: !3, file: !3, line: 1633, type: !2396, scopeLine: 1634, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2396 = !DISubroutineType(types: !2397)
!2397 = !{!33, !1950}
!2398 = !DILocalVariable(name: "u", arg: 1, scope: !2395, file: !3, line: 1633, type: !1950)
!2399 = !DILocation(line: 1633, column: 24, scope: !2395)
!2400 = !DILocalVariable(name: "un", scope: !2395, file: !3, line: 1635, type: !184)
!2401 = !DILocation(line: 1635, column: 13, scope: !2395)
!2402 = !DILocalVariable(name: "x", scope: !2395, file: !3, line: 1636, type: !33)
!2403 = !DILocation(line: 1636, column: 10, scope: !2395)
!2404 = !DILocalVariable(name: "B", scope: !2395, file: !3, line: 1637, type: !33)
!2405 = !DILocation(line: 1637, column: 10, scope: !2395)
!2406 = !DILocation(line: 1639, column: 8, scope: !2395)
!2407 = !DILocation(line: 1639, column: 6, scope: !2395)
!2408 = !DILocation(line: 1641, column: 7, scope: !2409)
!2409 = distinct !DILexicalBlock(scope: !2395, file: !3, line: 1641, column: 7)
!2410 = !DILocation(line: 1641, column: 10, scope: !2409)
!2411 = !DILocation(line: 1641, column: 7, scope: !2395)
!2412 = !DILocation(line: 1642, column: 5, scope: !2409)
!2413 = !DILocation(line: 1644, column: 7, scope: !2395)
!2414 = !DILocation(line: 1644, column: 10, scope: !2395)
!2415 = !DILocation(line: 1644, column: 16, scope: !2395)
!2416 = !DILocation(line: 1644, column: 5, scope: !2395)
!2417 = !DILocation(line: 1645, column: 3, scope: !2395)
!2418 = !DILocation(line: 1645, column: 10, scope: !2395)
!2419 = !DILocation(line: 1645, column: 13, scope: !2395)
!2420 = !DILocation(line: 1646, column: 9, scope: !2395)
!2421 = !DILocation(line: 1646, column: 11, scope: !2395)
!2422 = !DILocation(line: 1646, column: 10, scope: !2395)
!2423 = !DILocation(line: 1646, column: 15, scope: !2395)
!2424 = !DILocation(line: 1646, column: 18, scope: !2395)
!2425 = !DILocation(line: 1646, column: 24, scope: !2395)
!2426 = !DILocation(line: 1646, column: 13, scope: !2395)
!2427 = !DILocation(line: 1646, column: 7, scope: !2395)
!2428 = distinct !{!2428, !2417, !2429}
!2429 = !DILocation(line: 1646, column: 28, scope: !2395)
!2430 = !DILocation(line: 1648, column: 7, scope: !2431)
!2431 = distinct !DILexicalBlock(scope: !2395, file: !3, line: 1648, column: 7)
!2432 = !DILocation(line: 1648, column: 10, scope: !2431)
!2433 = !DILocation(line: 1648, column: 19, scope: !2431)
!2434 = !DILocation(line: 1648, column: 7, scope: !2395)
!2435 = !DILocation(line: 1649, column: 10, scope: !2431)
!2436 = !DILocation(line: 1649, column: 9, scope: !2431)
!2437 = !DILocation(line: 1649, column: 7, scope: !2431)
!2438 = !DILocation(line: 1649, column: 5, scope: !2431)
!2439 = !DILocation(line: 1651, column: 10, scope: !2395)
!2440 = !DILocation(line: 1651, column: 3, scope: !2395)
!2441 = !DILocation(line: 1652, column: 1, scope: !2395)
!2442 = distinct !DISubprogram(name: "mpz_cmpabs_d", scope: !3, file: !3, line: 1655, type: !2443, scopeLine: 1656, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2443 = !DISubroutineType(types: !2444)
!2444 = !{!34, !1950, !33}
!2445 = !DILocalVariable(name: "x", arg: 1, scope: !2442, file: !3, line: 1655, type: !1950)
!2446 = !DILocation(line: 1655, column: 27, scope: !2442)
!2447 = !DILocalVariable(name: "d", arg: 2, scope: !2442, file: !3, line: 1655, type: !33)
!2448 = !DILocation(line: 1655, column: 37, scope: !2442)
!2449 = !DILocalVariable(name: "xn", scope: !2442, file: !3, line: 1657, type: !184)
!2450 = !DILocation(line: 1657, column: 13, scope: !2442)
!2451 = !DILocalVariable(name: "B", scope: !2442, file: !3, line: 1658, type: !33)
!2452 = !DILocation(line: 1658, column: 10, scope: !2442)
!2453 = !DILocalVariable(name: "Bi", scope: !2442, file: !3, line: 1658, type: !33)
!2454 = !DILocation(line: 1658, column: 13, scope: !2442)
!2455 = !DILocalVariable(name: "i", scope: !2442, file: !3, line: 1659, type: !184)
!2456 = !DILocation(line: 1659, column: 13, scope: !2442)
!2457 = !DILocation(line: 1661, column: 8, scope: !2442)
!2458 = !DILocation(line: 1661, column: 11, scope: !2442)
!2459 = !DILocation(line: 1661, column: 6, scope: !2442)
!2460 = !DILocation(line: 1662, column: 7, scope: !2442)
!2461 = !DILocation(line: 1662, column: 5, scope: !2442)
!2462 = !DILocation(line: 1664, column: 7, scope: !2463)
!2463 = distinct !DILexicalBlock(scope: !2442, file: !3, line: 1664, column: 7)
!2464 = !DILocation(line: 1664, column: 10, scope: !2463)
!2465 = !DILocation(line: 1664, column: 7, scope: !2442)
!2466 = !DILocation(line: 1666, column: 12, scope: !2467)
!2467 = distinct !DILexicalBlock(scope: !2463, file: !3, line: 1665, column: 5)
!2468 = !DILocation(line: 1666, column: 10, scope: !2467)
!2469 = !DILocation(line: 1668, column: 9, scope: !2467)
!2470 = !DILocation(line: 1669, column: 18, scope: !2467)
!2471 = !DILocation(line: 1669, column: 16, scope: !2467)
!2472 = !DILocation(line: 1669, column: 10, scope: !2467)
!2473 = !DILocation(line: 1672, column: 14, scope: !2474)
!2474 = distinct !DILexicalBlock(scope: !2467, file: !3, line: 1672, column: 7)
!2475 = !DILocation(line: 1672, column: 12, scope: !2474)
!2476 = !DILocation(line: 1672, column: 19, scope: !2477)
!2477 = distinct !DILexicalBlock(scope: !2474, file: !3, line: 1672, column: 7)
!2478 = !DILocation(line: 1672, column: 23, scope: !2477)
!2479 = !DILocation(line: 1672, column: 21, scope: !2477)
!2480 = !DILocation(line: 1672, column: 7, scope: !2474)
!2481 = !DILocation(line: 1673, column: 7, scope: !2477)
!2482 = !DILocation(line: 1673, column: 4, scope: !2477)
!2483 = !DILocation(line: 1673, column: 2, scope: !2477)
!2484 = !DILocation(line: 1672, column: 28, scope: !2477)
!2485 = !DILocation(line: 1672, column: 7, scope: !2477)
!2486 = distinct !{!2486, !2480, !2487}
!2487 = !DILocation(line: 1673, column: 7, scope: !2474)
!2488 = !DILocation(line: 1675, column: 11, scope: !2489)
!2489 = distinct !DILexicalBlock(scope: !2467, file: !3, line: 1675, column: 11)
!2490 = !DILocation(line: 1675, column: 16, scope: !2489)
!2491 = !DILocation(line: 1675, column: 13, scope: !2489)
!2492 = !DILocation(line: 1675, column: 11, scope: !2467)
!2493 = !DILocation(line: 1676, column: 2, scope: !2489)
!2494 = !DILocation(line: 1679, column: 16, scope: !2495)
!2495 = distinct !DILexicalBlock(scope: !2467, file: !3, line: 1679, column: 7)
!2496 = !DILocation(line: 1679, column: 14, scope: !2495)
!2497 = !DILocation(line: 1679, column: 12, scope: !2495)
!2498 = !DILocation(line: 1679, column: 21, scope: !2499)
!2499 = distinct !DILexicalBlock(scope: !2495, file: !3, line: 1679, column: 7)
!2500 = !DILocation(line: 1679, column: 24, scope: !2499)
!2501 = !DILocation(line: 1679, column: 7, scope: !2495)
!2502 = !DILocalVariable(name: "f", scope: !2503, file: !3, line: 1681, type: !27)
!2503 = distinct !DILexicalBlock(scope: !2499, file: !3, line: 1680, column: 2)
!2504 = !DILocation(line: 1681, column: 14, scope: !2503)
!2505 = !DILocalVariable(name: "xl", scope: !2503, file: !3, line: 1681, type: !27)
!2506 = !DILocation(line: 1681, column: 17, scope: !2503)
!2507 = !DILocation(line: 1683, column: 20, scope: !2503)
!2508 = !DILocation(line: 1683, column: 8, scope: !2503)
!2509 = !DILocation(line: 1683, column: 6, scope: !2503)
!2510 = !DILocation(line: 1684, column: 9, scope: !2503)
!2511 = !DILocation(line: 1684, column: 12, scope: !2503)
!2512 = !DILocation(line: 1684, column: 18, scope: !2503)
!2513 = !DILocation(line: 1684, column: 7, scope: !2503)
!2514 = !DILocation(line: 1685, column: 8, scope: !2515)
!2515 = distinct !DILexicalBlock(scope: !2503, file: !3, line: 1685, column: 8)
!2516 = !DILocation(line: 1685, column: 13, scope: !2515)
!2517 = !DILocation(line: 1685, column: 11, scope: !2515)
!2518 = !DILocation(line: 1685, column: 8, scope: !2503)
!2519 = !DILocation(line: 1686, column: 6, scope: !2515)
!2520 = !DILocation(line: 1687, column: 13, scope: !2521)
!2521 = distinct !DILexicalBlock(scope: !2515, file: !3, line: 1687, column: 13)
!2522 = !DILocation(line: 1687, column: 18, scope: !2521)
!2523 = !DILocation(line: 1687, column: 16, scope: !2521)
!2524 = !DILocation(line: 1687, column: 13, scope: !2515)
!2525 = !DILocation(line: 1688, column: 6, scope: !2521)
!2526 = !DILocation(line: 1689, column: 8, scope: !2503)
!2527 = !DILocation(line: 1689, column: 13, scope: !2503)
!2528 = !DILocation(line: 1689, column: 17, scope: !2503)
!2529 = !DILocation(line: 1689, column: 15, scope: !2503)
!2530 = !DILocation(line: 1689, column: 10, scope: !2503)
!2531 = !DILocation(line: 1689, column: 6, scope: !2503)
!2532 = !DILocation(line: 1679, column: 7, scope: !2499)
!2533 = distinct !{!2533, !2501, !2534}
!2534 = !DILocation(line: 1690, column: 2, scope: !2495)
!2535 = !DILocation(line: 1691, column: 5, scope: !2467)
!2536 = !DILocation(line: 1692, column: 13, scope: !2442)
!2537 = !DILocation(line: 1692, column: 15, scope: !2442)
!2538 = !DILocation(line: 1692, column: 10, scope: !2442)
!2539 = !DILocation(line: 1692, column: 3, scope: !2442)
!2540 = !DILocation(line: 1693, column: 1, scope: !2442)
!2541 = distinct !DISubprogram(name: "mpz_cmp_d", scope: !3, file: !3, line: 1696, type: !2443, scopeLine: 1697, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2542 = !DILocalVariable(name: "x", arg: 1, scope: !2541, file: !3, line: 1696, type: !1950)
!2543 = !DILocation(line: 1696, column: 24, scope: !2541)
!2544 = !DILocalVariable(name: "d", arg: 2, scope: !2541, file: !3, line: 1696, type: !33)
!2545 = !DILocation(line: 1696, column: 34, scope: !2541)
!2546 = !DILocation(line: 1698, column: 7, scope: !2547)
!2547 = distinct !DILexicalBlock(scope: !2541, file: !3, line: 1698, column: 7)
!2548 = !DILocation(line: 1698, column: 10, scope: !2547)
!2549 = !DILocation(line: 1698, column: 19, scope: !2547)
!2550 = !DILocation(line: 1698, column: 7, scope: !2541)
!2551 = !DILocation(line: 1700, column: 11, scope: !2552)
!2552 = distinct !DILexicalBlock(scope: !2553, file: !3, line: 1700, column: 11)
!2553 = distinct !DILexicalBlock(scope: !2547, file: !3, line: 1699, column: 5)
!2554 = !DILocation(line: 1700, column: 13, scope: !2552)
!2555 = !DILocation(line: 1700, column: 11, scope: !2553)
!2556 = !DILocation(line: 1701, column: 2, scope: !2552)
!2557 = !DILocation(line: 1703, column: 24, scope: !2552)
!2558 = !DILocation(line: 1703, column: 27, scope: !2552)
!2559 = !DILocation(line: 1703, column: 10, scope: !2552)
!2560 = !DILocation(line: 1703, column: 9, scope: !2552)
!2561 = !DILocation(line: 1703, column: 2, scope: !2552)
!2562 = !DILocation(line: 1707, column: 11, scope: !2563)
!2563 = distinct !DILexicalBlock(scope: !2564, file: !3, line: 1707, column: 11)
!2564 = distinct !DILexicalBlock(scope: !2547, file: !3, line: 1706, column: 5)
!2565 = !DILocation(line: 1707, column: 13, scope: !2563)
!2566 = !DILocation(line: 1707, column: 11, scope: !2564)
!2567 = !DILocation(line: 1708, column: 2, scope: !2563)
!2568 = !DILocation(line: 1710, column: 23, scope: !2563)
!2569 = !DILocation(line: 1710, column: 26, scope: !2563)
!2570 = !DILocation(line: 1710, column: 9, scope: !2563)
!2571 = !DILocation(line: 1710, column: 2, scope: !2563)
!2572 = !DILocation(line: 1712, column: 1, scope: !2541)
!2573 = distinct !DISubprogram(name: "mpz_sgn", scope: !3, file: !3, line: 1717, type: !2047, scopeLine: 1718, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2574 = !DILocalVariable(name: "u", arg: 1, scope: !2573, file: !3, line: 1717, type: !1950)
!2575 = !DILocation(line: 1717, column: 22, scope: !2573)
!2576 = !DILocalVariable(name: "usize", scope: !2573, file: !3, line: 1719, type: !184)
!2577 = !DILocation(line: 1719, column: 13, scope: !2573)
!2578 = !DILocation(line: 1719, column: 21, scope: !2573)
!2579 = !DILocation(line: 1719, column: 24, scope: !2573)
!2580 = !DILocation(line: 1721, column: 11, scope: !2573)
!2581 = !DILocation(line: 1721, column: 17, scope: !2573)
!2582 = !DILocation(line: 1721, column: 25, scope: !2573)
!2583 = !DILocation(line: 1721, column: 31, scope: !2573)
!2584 = !DILocation(line: 1721, column: 22, scope: !2573)
!2585 = !DILocation(line: 1721, column: 3, scope: !2573)
!2586 = distinct !DISubprogram(name: "mpz_cmp_si", scope: !3, file: !3, line: 1725, type: !2587, scopeLine: 1726, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2587 = !DISubroutineType(types: !2588)
!2588 = !{!34, !1950, !30}
!2589 = !DILocalVariable(name: "u", arg: 1, scope: !2586, file: !3, line: 1725, type: !1950)
!2590 = !DILocation(line: 1725, column: 25, scope: !2586)
!2591 = !DILocalVariable(name: "v", arg: 2, scope: !2586, file: !3, line: 1725, type: !30)
!2592 = !DILocation(line: 1725, column: 33, scope: !2586)
!2593 = !DILocalVariable(name: "usize", scope: !2586, file: !3, line: 1727, type: !184)
!2594 = !DILocation(line: 1727, column: 13, scope: !2586)
!2595 = !DILocation(line: 1727, column: 21, scope: !2586)
!2596 = !DILocation(line: 1727, column: 24, scope: !2586)
!2597 = !DILocation(line: 1729, column: 7, scope: !2598)
!2598 = distinct !DILexicalBlock(scope: !2586, file: !3, line: 1729, column: 7)
!2599 = !DILocation(line: 1729, column: 13, scope: !2598)
!2600 = !DILocation(line: 1729, column: 7, scope: !2586)
!2601 = !DILocation(line: 1730, column: 5, scope: !2598)
!2602 = !DILocation(line: 1731, column: 12, scope: !2603)
!2603 = distinct !DILexicalBlock(scope: !2598, file: !3, line: 1731, column: 12)
!2604 = !DILocation(line: 1731, column: 14, scope: !2603)
!2605 = !DILocation(line: 1731, column: 12, scope: !2598)
!2606 = !DILocation(line: 1732, column: 24, scope: !2603)
!2607 = !DILocation(line: 1732, column: 27, scope: !2603)
!2608 = !DILocation(line: 1732, column: 12, scope: !2603)
!2609 = !DILocation(line: 1732, column: 5, scope: !2603)
!2610 = !DILocation(line: 1733, column: 12, scope: !2611)
!2611 = distinct !DILexicalBlock(scope: !2603, file: !3, line: 1733, column: 12)
!2612 = !DILocation(line: 1733, column: 18, scope: !2611)
!2613 = !DILocation(line: 1733, column: 12, scope: !2603)
!2614 = !DILocation(line: 1734, column: 5, scope: !2611)
!2615 = !DILocalVariable(name: "ul", scope: !2616, file: !3, line: 1737, type: !27)
!2616 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 1736, column: 5)
!2617 = !DILocation(line: 1737, column: 17, scope: !2616)
!2618 = !DILocation(line: 1737, column: 22, scope: !2616)
!2619 = !DILocation(line: 1737, column: 25, scope: !2616)
!2620 = !DILocation(line: 1738, column: 22, scope: !2621)
!2621 = distinct !DILexicalBlock(scope: !2616, file: !3, line: 1738, column: 11)
!2622 = !DILocation(line: 1738, column: 60, scope: !2621)
!2623 = !DILocation(line: 1738, column: 58, scope: !2621)
!2624 = !DILocation(line: 1738, column: 11, scope: !2616)
!2625 = !DILocation(line: 1739, column: 2, scope: !2621)
!2626 = !DILocation(line: 1741, column: 20, scope: !2621)
!2627 = !DILocation(line: 1741, column: 58, scope: !2621)
!2628 = !DILocation(line: 1741, column: 56, scope: !2621)
!2629 = !DILocation(line: 1741, column: 2, scope: !2621)
!2630 = !DILocation(line: 1743, column: 1, scope: !2586)
!2631 = distinct !DISubprogram(name: "mpz_cmp_ui", scope: !3, file: !3, line: 1746, type: !2632, scopeLine: 1747, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2632 = !DISubroutineType(types: !2633)
!2633 = !{!34, !1950, !29}
!2634 = !DILocalVariable(name: "u", arg: 1, scope: !2631, file: !3, line: 1746, type: !1950)
!2635 = !DILocation(line: 1746, column: 25, scope: !2631)
!2636 = !DILocalVariable(name: "v", arg: 2, scope: !2631, file: !3, line: 1746, type: !29)
!2637 = !DILocation(line: 1746, column: 42, scope: !2631)
!2638 = !DILocalVariable(name: "usize", scope: !2631, file: !3, line: 1748, type: !184)
!2639 = !DILocation(line: 1748, column: 13, scope: !2631)
!2640 = !DILocation(line: 1748, column: 21, scope: !2631)
!2641 = !DILocation(line: 1748, column: 24, scope: !2631)
!2642 = !DILocation(line: 1750, column: 7, scope: !2643)
!2643 = distinct !DILexicalBlock(scope: !2631, file: !3, line: 1750, column: 7)
!2644 = !DILocation(line: 1750, column: 13, scope: !2643)
!2645 = !DILocation(line: 1750, column: 7, scope: !2631)
!2646 = !DILocation(line: 1751, column: 5, scope: !2643)
!2647 = !DILocation(line: 1752, column: 12, scope: !2648)
!2648 = distinct !DILexicalBlock(scope: !2643, file: !3, line: 1752, column: 12)
!2649 = !DILocation(line: 1752, column: 18, scope: !2648)
!2650 = !DILocation(line: 1752, column: 12, scope: !2643)
!2651 = !DILocation(line: 1753, column: 5, scope: !2648)
!2652 = !DILocalVariable(name: "ul", scope: !2653, file: !3, line: 1756, type: !27)
!2653 = distinct !DILexicalBlock(scope: !2648, file: !3, line: 1755, column: 5)
!2654 = !DILocation(line: 1756, column: 17, scope: !2653)
!2655 = !DILocation(line: 1756, column: 23, scope: !2653)
!2656 = !DILocation(line: 1756, column: 29, scope: !2653)
!2657 = !DILocation(line: 1756, column: 22, scope: !2653)
!2658 = !DILocation(line: 1756, column: 36, scope: !2653)
!2659 = !DILocation(line: 1756, column: 39, scope: !2653)
!2660 = !DILocation(line: 1757, column: 15, scope: !2653)
!2661 = !DILocation(line: 1757, column: 20, scope: !2653)
!2662 = !DILocation(line: 1757, column: 18, scope: !2653)
!2663 = !DILocation(line: 1757, column: 26, scope: !2653)
!2664 = !DILocation(line: 1757, column: 31, scope: !2653)
!2665 = !DILocation(line: 1757, column: 29, scope: !2653)
!2666 = !DILocation(line: 1757, column: 23, scope: !2653)
!2667 = !DILocation(line: 1757, column: 7, scope: !2653)
!2668 = !DILocation(line: 1759, column: 1, scope: !2631)
!2669 = distinct !DISubprogram(name: "mpz_cmp", scope: !3, file: !3, line: 1762, type: !2670, scopeLine: 1763, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2670 = !DISubroutineType(types: !2671)
!2671 = !{!34, !1950, !1950}
!2672 = !DILocalVariable(name: "a", arg: 1, scope: !2669, file: !3, line: 1762, type: !1950)
!2673 = !DILocation(line: 1762, column: 22, scope: !2669)
!2674 = !DILocalVariable(name: "b", arg: 2, scope: !2669, file: !3, line: 1762, type: !1950)
!2675 = !DILocation(line: 1762, column: 37, scope: !2669)
!2676 = !DILocalVariable(name: "asize", scope: !2669, file: !3, line: 1764, type: !184)
!2677 = !DILocation(line: 1764, column: 13, scope: !2669)
!2678 = !DILocation(line: 1764, column: 21, scope: !2669)
!2679 = !DILocation(line: 1764, column: 24, scope: !2669)
!2680 = !DILocalVariable(name: "bsize", scope: !2669, file: !3, line: 1765, type: !184)
!2681 = !DILocation(line: 1765, column: 13, scope: !2669)
!2682 = !DILocation(line: 1765, column: 21, scope: !2669)
!2683 = !DILocation(line: 1765, column: 24, scope: !2669)
!2684 = !DILocation(line: 1767, column: 7, scope: !2685)
!2685 = distinct !DILexicalBlock(scope: !2669, file: !3, line: 1767, column: 7)
!2686 = !DILocation(line: 1767, column: 16, scope: !2685)
!2687 = !DILocation(line: 1767, column: 13, scope: !2685)
!2688 = !DILocation(line: 1767, column: 7, scope: !2669)
!2689 = !DILocation(line: 1768, column: 13, scope: !2685)
!2690 = !DILocation(line: 1768, column: 21, scope: !2685)
!2691 = !DILocation(line: 1768, column: 19, scope: !2685)
!2692 = !DILocation(line: 1768, column: 12, scope: !2685)
!2693 = !DILocation(line: 1768, column: 5, scope: !2685)
!2694 = !DILocation(line: 1769, column: 12, scope: !2695)
!2695 = distinct !DILexicalBlock(scope: !2685, file: !3, line: 1769, column: 12)
!2696 = !DILocation(line: 1769, column: 18, scope: !2695)
!2697 = !DILocation(line: 1769, column: 12, scope: !2685)
!2698 = !DILocation(line: 1770, column: 21, scope: !2695)
!2699 = !DILocation(line: 1770, column: 24, scope: !2695)
!2700 = !DILocation(line: 1770, column: 31, scope: !2695)
!2701 = !DILocation(line: 1770, column: 34, scope: !2695)
!2702 = !DILocation(line: 1770, column: 41, scope: !2695)
!2703 = !DILocation(line: 1770, column: 12, scope: !2695)
!2704 = !DILocation(line: 1770, column: 5, scope: !2695)
!2705 = !DILocation(line: 1772, column: 21, scope: !2695)
!2706 = !DILocation(line: 1772, column: 24, scope: !2695)
!2707 = !DILocation(line: 1772, column: 31, scope: !2695)
!2708 = !DILocation(line: 1772, column: 34, scope: !2695)
!2709 = !DILocation(line: 1772, column: 42, scope: !2695)
!2710 = !DILocation(line: 1772, column: 41, scope: !2695)
!2711 = !DILocation(line: 1772, column: 12, scope: !2695)
!2712 = !DILocation(line: 1772, column: 5, scope: !2695)
!2713 = !DILocation(line: 1773, column: 1, scope: !2669)
!2714 = distinct !DISubprogram(name: "mpz_cmpabs_ui", scope: !3, file: !3, line: 1776, type: !2632, scopeLine: 1777, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2715 = !DILocalVariable(name: "u", arg: 1, scope: !2714, file: !3, line: 1776, type: !1950)
!2716 = !DILocation(line: 1776, column: 28, scope: !2714)
!2717 = !DILocalVariable(name: "v", arg: 2, scope: !2714, file: !3, line: 1776, type: !29)
!2718 = !DILocation(line: 1776, column: 45, scope: !2714)
!2719 = !DILocalVariable(name: "un", scope: !2714, file: !3, line: 1778, type: !184)
!2720 = !DILocation(line: 1778, column: 13, scope: !2714)
!2721 = !DILocation(line: 1778, column: 18, scope: !2714)
!2722 = !DILocalVariable(name: "ul", scope: !2714, file: !3, line: 1779, type: !27)
!2723 = !DILocation(line: 1779, column: 13, scope: !2714)
!2724 = !DILocation(line: 1781, column: 7, scope: !2725)
!2725 = distinct !DILexicalBlock(scope: !2714, file: !3, line: 1781, column: 7)
!2726 = !DILocation(line: 1781, column: 10, scope: !2725)
!2727 = !DILocation(line: 1781, column: 7, scope: !2714)
!2728 = !DILocation(line: 1782, column: 5, scope: !2725)
!2729 = !DILocation(line: 1784, column: 9, scope: !2714)
!2730 = !DILocation(line: 1784, column: 12, scope: !2714)
!2731 = !DILocation(line: 1784, column: 8, scope: !2714)
!2732 = !DILocation(line: 1784, column: 20, scope: !2714)
!2733 = !DILocation(line: 1784, column: 23, scope: !2714)
!2734 = !DILocation(line: 1784, column: 6, scope: !2714)
!2735 = !DILocation(line: 1786, column: 11, scope: !2714)
!2736 = !DILocation(line: 1786, column: 16, scope: !2714)
!2737 = !DILocation(line: 1786, column: 14, scope: !2714)
!2738 = !DILocation(line: 1786, column: 22, scope: !2714)
!2739 = !DILocation(line: 1786, column: 27, scope: !2714)
!2740 = !DILocation(line: 1786, column: 25, scope: !2714)
!2741 = !DILocation(line: 1786, column: 19, scope: !2714)
!2742 = !DILocation(line: 1786, column: 3, scope: !2714)
!2743 = !DILocation(line: 1787, column: 1, scope: !2714)
!2744 = distinct !DISubprogram(name: "mpz_cmpabs", scope: !3, file: !3, line: 1790, type: !2670, scopeLine: 1791, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2745 = !DILocalVariable(name: "u", arg: 1, scope: !2744, file: !3, line: 1790, type: !1950)
!2746 = !DILocation(line: 1790, column: 25, scope: !2744)
!2747 = !DILocalVariable(name: "v", arg: 2, scope: !2744, file: !3, line: 1790, type: !1950)
!2748 = !DILocation(line: 1790, column: 40, scope: !2744)
!2749 = !DILocation(line: 1792, column: 20, scope: !2744)
!2750 = !DILocation(line: 1792, column: 23, scope: !2744)
!2751 = !DILocation(line: 1792, column: 30, scope: !2744)
!2752 = !DILocation(line: 1793, column: 6, scope: !2744)
!2753 = !DILocation(line: 1793, column: 9, scope: !2744)
!2754 = !DILocation(line: 1793, column: 16, scope: !2744)
!2755 = !DILocation(line: 1792, column: 10, scope: !2744)
!2756 = !DILocation(line: 1792, column: 3, scope: !2744)
!2757 = distinct !DISubprogram(name: "mpn_cmp4", scope: !3, file: !3, line: 365, type: !2758, scopeLine: 366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2758 = !DISubroutineType(types: !2759)
!2759 = !{!34, !181, !184, !181, !184}
!2760 = !DILocalVariable(name: "ap", arg: 1, scope: !2757, file: !3, line: 365, type: !181)
!2761 = !DILocation(line: 365, column: 21, scope: !2757)
!2762 = !DILocalVariable(name: "an", arg: 2, scope: !2757, file: !3, line: 365, type: !184)
!2763 = !DILocation(line: 365, column: 35, scope: !2757)
!2764 = !DILocalVariable(name: "bp", arg: 3, scope: !2757, file: !3, line: 365, type: !181)
!2765 = !DILocation(line: 365, column: 49, scope: !2757)
!2766 = !DILocalVariable(name: "bn", arg: 4, scope: !2757, file: !3, line: 365, type: !184)
!2767 = !DILocation(line: 365, column: 63, scope: !2757)
!2768 = !DILocation(line: 367, column: 7, scope: !2769)
!2769 = distinct !DILexicalBlock(scope: !2757, file: !3, line: 367, column: 7)
!2770 = !DILocation(line: 367, column: 13, scope: !2769)
!2771 = !DILocation(line: 367, column: 10, scope: !2769)
!2772 = !DILocation(line: 367, column: 7, scope: !2757)
!2773 = !DILocation(line: 368, column: 12, scope: !2769)
!2774 = !DILocation(line: 368, column: 17, scope: !2769)
!2775 = !DILocation(line: 368, column: 15, scope: !2769)
!2776 = !DILocation(line: 368, column: 5, scope: !2769)
!2777 = !DILocation(line: 370, column: 21, scope: !2769)
!2778 = !DILocation(line: 370, column: 25, scope: !2769)
!2779 = !DILocation(line: 370, column: 29, scope: !2769)
!2780 = !DILocation(line: 370, column: 12, scope: !2769)
!2781 = !DILocation(line: 370, column: 5, scope: !2769)
!2782 = !DILocation(line: 371, column: 1, scope: !2757)
!2783 = distinct !DISubprogram(name: "mpz_abs", scope: !3, file: !3, line: 1797, type: !1948, scopeLine: 1798, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2784 = !DILocalVariable(name: "r", arg: 1, scope: !2783, file: !3, line: 1797, type: !1838)
!2785 = !DILocation(line: 1797, column: 16, scope: !2783)
!2786 = !DILocalVariable(name: "u", arg: 2, scope: !2783, file: !3, line: 1797, type: !1950)
!2787 = !DILocation(line: 1797, column: 31, scope: !2783)
!2788 = !DILocation(line: 1799, column: 7, scope: !2789)
!2789 = distinct !DILexicalBlock(scope: !2783, file: !3, line: 1799, column: 7)
!2790 = !DILocation(line: 1799, column: 12, scope: !2789)
!2791 = !DILocation(line: 1799, column: 9, scope: !2789)
!2792 = !DILocation(line: 1799, column: 7, scope: !2783)
!2793 = !DILocation(line: 1800, column: 14, scope: !2789)
!2794 = !DILocation(line: 1800, column: 17, scope: !2789)
!2795 = !DILocation(line: 1800, column: 5, scope: !2789)
!2796 = !DILocation(line: 1802, column: 17, scope: !2783)
!2797 = !DILocation(line: 1802, column: 3, scope: !2783)
!2798 = !DILocation(line: 1802, column: 6, scope: !2783)
!2799 = !DILocation(line: 1802, column: 15, scope: !2783)
!2800 = !DILocation(line: 1803, column: 1, scope: !2783)
!2801 = distinct !DISubprogram(name: "mpz_neg", scope: !3, file: !3, line: 1806, type: !1948, scopeLine: 1807, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2802 = !DILocalVariable(name: "r", arg: 1, scope: !2801, file: !3, line: 1806, type: !1838)
!2803 = !DILocation(line: 1806, column: 16, scope: !2801)
!2804 = !DILocalVariable(name: "u", arg: 2, scope: !2801, file: !3, line: 1806, type: !1950)
!2805 = !DILocation(line: 1806, column: 31, scope: !2801)
!2806 = !DILocation(line: 1808, column: 7, scope: !2807)
!2807 = distinct !DILexicalBlock(scope: !2801, file: !3, line: 1808, column: 7)
!2808 = !DILocation(line: 1808, column: 12, scope: !2807)
!2809 = !DILocation(line: 1808, column: 9, scope: !2807)
!2810 = !DILocation(line: 1808, column: 7, scope: !2801)
!2811 = !DILocation(line: 1809, column: 14, scope: !2807)
!2812 = !DILocation(line: 1809, column: 17, scope: !2807)
!2813 = !DILocation(line: 1809, column: 5, scope: !2807)
!2814 = !DILocation(line: 1811, column: 18, scope: !2801)
!2815 = !DILocation(line: 1811, column: 21, scope: !2801)
!2816 = !DILocation(line: 1811, column: 17, scope: !2801)
!2817 = !DILocation(line: 1811, column: 3, scope: !2801)
!2818 = !DILocation(line: 1811, column: 6, scope: !2801)
!2819 = !DILocation(line: 1811, column: 15, scope: !2801)
!2820 = !DILocation(line: 1812, column: 1, scope: !2801)
!2821 = distinct !DISubprogram(name: "mpz_swap", scope: !3, file: !3, line: 1815, type: !2822, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2822 = !DISubroutineType(types: !2823)
!2823 = !{null, !1838, !1838}
!2824 = !DILocalVariable(name: "u", arg: 1, scope: !2821, file: !3, line: 1815, type: !1838)
!2825 = !DILocation(line: 1815, column: 17, scope: !2821)
!2826 = !DILocalVariable(name: "v", arg: 2, scope: !2821, file: !3, line: 1815, type: !1838)
!2827 = !DILocation(line: 1815, column: 26, scope: !2821)
!2828 = !DILocation(line: 1817, column: 3, scope: !2821)
!2829 = !DILocalVariable(name: "__mp_size_t_swap__tmp", scope: !2830, file: !3, line: 1817, type: !184)
!2830 = distinct !DILexicalBlock(scope: !2821, file: !3, line: 1817, column: 3)
!2831 = !DILocation(line: 1817, column: 3, scope: !2830)
!2832 = !DILocation(line: 1818, column: 3, scope: !2821)
!2833 = !DILocalVariable(name: "__mp_size_t_swap__tmp", scope: !2834, file: !3, line: 1818, type: !184)
!2834 = distinct !DILexicalBlock(scope: !2821, file: !3, line: 1818, column: 3)
!2835 = !DILocation(line: 1818, column: 3, scope: !2834)
!2836 = !DILocation(line: 1819, column: 3, scope: !2821)
!2837 = !DILocalVariable(name: "__mp_ptr_swap__tmp", scope: !2838, file: !3, line: 1819, type: !31)
!2838 = distinct !DILexicalBlock(scope: !2821, file: !3, line: 1819, column: 3)
!2839 = !DILocation(line: 1819, column: 3, scope: !2838)
!2840 = !DILocation(line: 1820, column: 1, scope: !2821)
!2841 = distinct !DISubprogram(name: "mpz_add_ui", scope: !3, file: !3, line: 1875, type: !2842, scopeLine: 1876, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2842 = !DISubroutineType(types: !2843)
!2843 = !{null, !1838, !1950, !29}
!2844 = !DILocalVariable(name: "r", arg: 1, scope: !2841, file: !3, line: 1875, type: !1838)
!2845 = !DILocation(line: 1875, column: 19, scope: !2841)
!2846 = !DILocalVariable(name: "a", arg: 2, scope: !2841, file: !3, line: 1875, type: !1950)
!2847 = !DILocation(line: 1875, column: 34, scope: !2841)
!2848 = !DILocalVariable(name: "b", arg: 3, scope: !2841, file: !3, line: 1875, type: !29)
!2849 = !DILocation(line: 1875, column: 51, scope: !2841)
!2850 = !DILocation(line: 1877, column: 7, scope: !2851)
!2851 = distinct !DILexicalBlock(scope: !2841, file: !3, line: 1877, column: 7)
!2852 = !DILocation(line: 1877, column: 10, scope: !2851)
!2853 = !DILocation(line: 1877, column: 19, scope: !2851)
!2854 = !DILocation(line: 1877, column: 7, scope: !2841)
!2855 = !DILocation(line: 1878, column: 35, scope: !2851)
!2856 = !DILocation(line: 1878, column: 38, scope: !2851)
!2857 = !DILocation(line: 1878, column: 41, scope: !2851)
!2858 = !DILocation(line: 1878, column: 19, scope: !2851)
!2859 = !DILocation(line: 1878, column: 5, scope: !2851)
!2860 = !DILocation(line: 1878, column: 8, scope: !2851)
!2861 = !DILocation(line: 1878, column: 17, scope: !2851)
!2862 = !DILocation(line: 1880, column: 36, scope: !2851)
!2863 = !DILocation(line: 1880, column: 39, scope: !2851)
!2864 = !DILocation(line: 1880, column: 42, scope: !2851)
!2865 = !DILocation(line: 1880, column: 20, scope: !2851)
!2866 = !DILocation(line: 1880, column: 19, scope: !2851)
!2867 = !DILocation(line: 1880, column: 5, scope: !2851)
!2868 = !DILocation(line: 1880, column: 8, scope: !2851)
!2869 = !DILocation(line: 1880, column: 17, scope: !2851)
!2870 = !DILocation(line: 1881, column: 1, scope: !2841)
!2871 = distinct !DISubprogram(name: "mpz_abs_add_ui", scope: !3, file: !3, line: 1827, type: !2872, scopeLine: 1828, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2872 = !DISubroutineType(types: !2873)
!2873 = !{!184, !1838, !1950, !29}
!2874 = !DILocalVariable(name: "r", arg: 1, scope: !2871, file: !3, line: 1827, type: !1838)
!2875 = !DILocation(line: 1827, column: 23, scope: !2871)
!2876 = !DILocalVariable(name: "a", arg: 2, scope: !2871, file: !3, line: 1827, type: !1950)
!2877 = !DILocation(line: 1827, column: 38, scope: !2871)
!2878 = !DILocalVariable(name: "b", arg: 3, scope: !2871, file: !3, line: 1827, type: !29)
!2879 = !DILocation(line: 1827, column: 55, scope: !2871)
!2880 = !DILocalVariable(name: "an", scope: !2871, file: !3, line: 1829, type: !184)
!2881 = !DILocation(line: 1829, column: 13, scope: !2871)
!2882 = !DILocalVariable(name: "rp", scope: !2871, file: !3, line: 1830, type: !31)
!2883 = !DILocation(line: 1830, column: 10, scope: !2871)
!2884 = !DILocalVariable(name: "cy", scope: !2871, file: !3, line: 1831, type: !27)
!2885 = !DILocation(line: 1831, column: 13, scope: !2871)
!2886 = !DILocation(line: 1833, column: 8, scope: !2871)
!2887 = !DILocation(line: 1833, column: 6, scope: !2871)
!2888 = !DILocation(line: 1834, column: 7, scope: !2889)
!2889 = distinct !DILexicalBlock(scope: !2871, file: !3, line: 1834, column: 7)
!2890 = !DILocation(line: 1834, column: 10, scope: !2889)
!2891 = !DILocation(line: 1834, column: 7, scope: !2871)
!2892 = !DILocation(line: 1836, column: 21, scope: !2893)
!2893 = distinct !DILexicalBlock(scope: !2889, file: !3, line: 1835, column: 5)
!2894 = !DILocation(line: 1836, column: 7, scope: !2893)
!2895 = !DILocation(line: 1836, column: 10, scope: !2893)
!2896 = !DILocation(line: 1836, column: 19, scope: !2893)
!2897 = !DILocation(line: 1837, column: 14, scope: !2893)
!2898 = !DILocation(line: 1837, column: 16, scope: !2893)
!2899 = !DILocation(line: 1837, column: 7, scope: !2893)
!2900 = !DILocation(line: 1840, column: 8, scope: !2871)
!2901 = !DILocation(line: 1840, column: 6, scope: !2871)
!2902 = !DILocation(line: 1842, column: 19, scope: !2871)
!2903 = !DILocation(line: 1842, column: 23, scope: !2871)
!2904 = !DILocation(line: 1842, column: 26, scope: !2871)
!2905 = !DILocation(line: 1842, column: 33, scope: !2871)
!2906 = !DILocation(line: 1842, column: 37, scope: !2871)
!2907 = !DILocation(line: 1842, column: 8, scope: !2871)
!2908 = !DILocation(line: 1842, column: 6, scope: !2871)
!2909 = !DILocation(line: 1843, column: 12, scope: !2871)
!2910 = !DILocation(line: 1843, column: 3, scope: !2871)
!2911 = !DILocation(line: 1843, column: 6, scope: !2871)
!2912 = !DILocation(line: 1843, column: 10, scope: !2871)
!2913 = !DILocation(line: 1844, column: 9, scope: !2871)
!2914 = !DILocation(line: 1844, column: 6, scope: !2871)
!2915 = !DILocation(line: 1846, column: 10, scope: !2871)
!2916 = !DILocation(line: 1846, column: 3, scope: !2871)
!2917 = !DILocation(line: 1847, column: 1, scope: !2871)
!2918 = distinct !DISubprogram(name: "mpz_abs_sub_ui", scope: !3, file: !3, line: 1852, type: !2872, scopeLine: 1853, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2919 = !DILocalVariable(name: "r", arg: 1, scope: !2918, file: !3, line: 1852, type: !1838)
!2920 = !DILocation(line: 1852, column: 23, scope: !2918)
!2921 = !DILocalVariable(name: "a", arg: 2, scope: !2918, file: !3, line: 1852, type: !1950)
!2922 = !DILocation(line: 1852, column: 38, scope: !2918)
!2923 = !DILocalVariable(name: "b", arg: 3, scope: !2918, file: !3, line: 1852, type: !29)
!2924 = !DILocation(line: 1852, column: 55, scope: !2918)
!2925 = !DILocalVariable(name: "an", scope: !2918, file: !3, line: 1854, type: !184)
!2926 = !DILocation(line: 1854, column: 13, scope: !2918)
!2927 = !DILocation(line: 1854, column: 18, scope: !2918)
!2928 = !DILocalVariable(name: "rp", scope: !2918, file: !3, line: 1855, type: !31)
!2929 = !DILocation(line: 1855, column: 10, scope: !2918)
!2930 = !DILocation(line: 1855, column: 15, scope: !2918)
!2931 = !DILocation(line: 1857, column: 7, scope: !2932)
!2932 = distinct !DILexicalBlock(scope: !2918, file: !3, line: 1857, column: 7)
!2933 = !DILocation(line: 1857, column: 10, scope: !2932)
!2934 = !DILocation(line: 1857, column: 7, scope: !2918)
!2935 = !DILocation(line: 1859, column: 15, scope: !2936)
!2936 = distinct !DILexicalBlock(scope: !2932, file: !3, line: 1858, column: 5)
!2937 = !DILocation(line: 1859, column: 7, scope: !2936)
!2938 = !DILocation(line: 1859, column: 13, scope: !2936)
!2939 = !DILocation(line: 1860, column: 16, scope: !2936)
!2940 = !DILocation(line: 1860, column: 18, scope: !2936)
!2941 = !DILocation(line: 1860, column: 14, scope: !2936)
!2942 = !DILocation(line: 1860, column: 7, scope: !2936)
!2943 = !DILocation(line: 1862, column: 12, scope: !2944)
!2944 = distinct !DILexicalBlock(scope: !2932, file: !3, line: 1862, column: 12)
!2945 = !DILocation(line: 1862, column: 15, scope: !2944)
!2946 = !DILocation(line: 1862, column: 20, scope: !2944)
!2947 = !DILocation(line: 1862, column: 23, scope: !2944)
!2948 = !DILocation(line: 1862, column: 26, scope: !2944)
!2949 = !DILocation(line: 1862, column: 37, scope: !2944)
!2950 = !DILocation(line: 1862, column: 35, scope: !2944)
!2951 = !DILocation(line: 1862, column: 12, scope: !2932)
!2952 = !DILocation(line: 1864, column: 15, scope: !2953)
!2953 = distinct !DILexicalBlock(scope: !2944, file: !3, line: 1863, column: 5)
!2954 = !DILocation(line: 1864, column: 19, scope: !2953)
!2955 = !DILocation(line: 1864, column: 22, scope: !2953)
!2956 = !DILocation(line: 1864, column: 17, scope: !2953)
!2957 = !DILocation(line: 1864, column: 7, scope: !2953)
!2958 = !DILocation(line: 1864, column: 13, scope: !2953)
!2959 = !DILocation(line: 1865, column: 7, scope: !2953)
!2960 = !DILocation(line: 1869, column: 7, scope: !2961)
!2961 = distinct !DILexicalBlock(scope: !2944, file: !3, line: 1868, column: 5)
!2962 = !DILocalVariable(name: "__cy", scope: !2963, file: !3, line: 1869, type: !27)
!2963 = distinct !DILexicalBlock(scope: !2961, file: !3, line: 1869, column: 7)
!2964 = !DILocation(line: 1869, column: 7, scope: !2963)
!2965 = !DILocation(line: 1870, column: 35, scope: !2961)
!2966 = !DILocation(line: 1870, column: 39, scope: !2961)
!2967 = !DILocation(line: 1870, column: 14, scope: !2961)
!2968 = !DILocation(line: 1870, column: 7, scope: !2961)
!2969 = !DILocation(line: 1872, column: 1, scope: !2918)
!2970 = distinct !DISubprogram(name: "mpz_sub_ui", scope: !3, file: !3, line: 1884, type: !2842, scopeLine: 1885, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2971 = !DILocalVariable(name: "r", arg: 1, scope: !2970, file: !3, line: 1884, type: !1838)
!2972 = !DILocation(line: 1884, column: 19, scope: !2970)
!2973 = !DILocalVariable(name: "a", arg: 2, scope: !2970, file: !3, line: 1884, type: !1950)
!2974 = !DILocation(line: 1884, column: 34, scope: !2970)
!2975 = !DILocalVariable(name: "b", arg: 3, scope: !2970, file: !3, line: 1884, type: !29)
!2976 = !DILocation(line: 1884, column: 51, scope: !2970)
!2977 = !DILocation(line: 1886, column: 7, scope: !2978)
!2978 = distinct !DILexicalBlock(scope: !2970, file: !3, line: 1886, column: 7)
!2979 = !DILocation(line: 1886, column: 10, scope: !2978)
!2980 = !DILocation(line: 1886, column: 19, scope: !2978)
!2981 = !DILocation(line: 1886, column: 7, scope: !2970)
!2982 = !DILocation(line: 1887, column: 36, scope: !2978)
!2983 = !DILocation(line: 1887, column: 39, scope: !2978)
!2984 = !DILocation(line: 1887, column: 42, scope: !2978)
!2985 = !DILocation(line: 1887, column: 20, scope: !2978)
!2986 = !DILocation(line: 1887, column: 19, scope: !2978)
!2987 = !DILocation(line: 1887, column: 5, scope: !2978)
!2988 = !DILocation(line: 1887, column: 8, scope: !2978)
!2989 = !DILocation(line: 1887, column: 17, scope: !2978)
!2990 = !DILocation(line: 1889, column: 35, scope: !2978)
!2991 = !DILocation(line: 1889, column: 38, scope: !2978)
!2992 = !DILocation(line: 1889, column: 41, scope: !2978)
!2993 = !DILocation(line: 1889, column: 19, scope: !2978)
!2994 = !DILocation(line: 1889, column: 5, scope: !2978)
!2995 = !DILocation(line: 1889, column: 8, scope: !2978)
!2996 = !DILocation(line: 1889, column: 17, scope: !2978)
!2997 = !DILocation(line: 1890, column: 1, scope: !2970)
!2998 = distinct !DISubprogram(name: "mpz_ui_sub", scope: !3, file: !3, line: 1893, type: !2999, scopeLine: 1894, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!2999 = !DISubroutineType(types: !3000)
!3000 = !{null, !1838, !29, !1950}
!3001 = !DILocalVariable(name: "r", arg: 1, scope: !2998, file: !3, line: 1893, type: !1838)
!3002 = !DILocation(line: 1893, column: 19, scope: !2998)
!3003 = !DILocalVariable(name: "a", arg: 2, scope: !2998, file: !3, line: 1893, type: !29)
!3004 = !DILocation(line: 1893, column: 36, scope: !2998)
!3005 = !DILocalVariable(name: "b", arg: 3, scope: !2998, file: !3, line: 1893, type: !1950)
!3006 = !DILocation(line: 1893, column: 51, scope: !2998)
!3007 = !DILocation(line: 1895, column: 7, scope: !3008)
!3008 = distinct !DILexicalBlock(scope: !2998, file: !3, line: 1895, column: 7)
!3009 = !DILocation(line: 1895, column: 10, scope: !3008)
!3010 = !DILocation(line: 1895, column: 19, scope: !3008)
!3011 = !DILocation(line: 1895, column: 7, scope: !2998)
!3012 = !DILocation(line: 1896, column: 35, scope: !3008)
!3013 = !DILocation(line: 1896, column: 38, scope: !3008)
!3014 = !DILocation(line: 1896, column: 41, scope: !3008)
!3015 = !DILocation(line: 1896, column: 19, scope: !3008)
!3016 = !DILocation(line: 1896, column: 5, scope: !3008)
!3017 = !DILocation(line: 1896, column: 8, scope: !3008)
!3018 = !DILocation(line: 1896, column: 17, scope: !3008)
!3019 = !DILocation(line: 1898, column: 36, scope: !3008)
!3020 = !DILocation(line: 1898, column: 39, scope: !3008)
!3021 = !DILocation(line: 1898, column: 42, scope: !3008)
!3022 = !DILocation(line: 1898, column: 20, scope: !3008)
!3023 = !DILocation(line: 1898, column: 19, scope: !3008)
!3024 = !DILocation(line: 1898, column: 5, scope: !3008)
!3025 = !DILocation(line: 1898, column: 8, scope: !3008)
!3026 = !DILocation(line: 1898, column: 17, scope: !3008)
!3027 = !DILocation(line: 1899, column: 1, scope: !2998)
!3028 = distinct !DISubprogram(name: "mpz_add", scope: !3, file: !3, line: 1949, type: !3029, scopeLine: 1950, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3029 = !DISubroutineType(types: !3030)
!3030 = !{null, !1838, !1950, !1950}
!3031 = !DILocalVariable(name: "r", arg: 1, scope: !3028, file: !3, line: 1949, type: !1838)
!3032 = !DILocation(line: 1949, column: 16, scope: !3028)
!3033 = !DILocalVariable(name: "a", arg: 2, scope: !3028, file: !3, line: 1949, type: !1950)
!3034 = !DILocation(line: 1949, column: 31, scope: !3028)
!3035 = !DILocalVariable(name: "b", arg: 3, scope: !3028, file: !3, line: 1949, type: !1950)
!3036 = !DILocation(line: 1949, column: 46, scope: !3028)
!3037 = !DILocalVariable(name: "rn", scope: !3028, file: !3, line: 1951, type: !184)
!3038 = !DILocation(line: 1951, column: 13, scope: !3028)
!3039 = !DILocation(line: 1953, column: 9, scope: !3040)
!3040 = distinct !DILexicalBlock(scope: !3028, file: !3, line: 1953, column: 8)
!3041 = !DILocation(line: 1953, column: 12, scope: !3040)
!3042 = !DILocation(line: 1953, column: 23, scope: !3040)
!3043 = !DILocation(line: 1953, column: 26, scope: !3040)
!3044 = !DILocation(line: 1953, column: 21, scope: !3040)
!3045 = !DILocation(line: 1953, column: 36, scope: !3040)
!3046 = !DILocation(line: 1953, column: 8, scope: !3028)
!3047 = !DILocation(line: 1954, column: 23, scope: !3040)
!3048 = !DILocation(line: 1954, column: 26, scope: !3040)
!3049 = !DILocation(line: 1954, column: 29, scope: !3040)
!3050 = !DILocation(line: 1954, column: 10, scope: !3040)
!3051 = !DILocation(line: 1954, column: 8, scope: !3040)
!3052 = !DILocation(line: 1954, column: 5, scope: !3040)
!3053 = !DILocation(line: 1956, column: 23, scope: !3040)
!3054 = !DILocation(line: 1956, column: 26, scope: !3040)
!3055 = !DILocation(line: 1956, column: 29, scope: !3040)
!3056 = !DILocation(line: 1956, column: 10, scope: !3040)
!3057 = !DILocation(line: 1956, column: 8, scope: !3040)
!3058 = !DILocation(line: 1958, column: 17, scope: !3028)
!3059 = !DILocation(line: 1958, column: 20, scope: !3028)
!3060 = !DILocation(line: 1958, column: 29, scope: !3028)
!3061 = !DILocation(line: 1958, column: 36, scope: !3028)
!3062 = !DILocation(line: 1958, column: 43, scope: !3028)
!3063 = !DILocation(line: 1958, column: 41, scope: !3028)
!3064 = !DILocation(line: 1958, column: 3, scope: !3028)
!3065 = !DILocation(line: 1958, column: 6, scope: !3028)
!3066 = !DILocation(line: 1958, column: 15, scope: !3028)
!3067 = !DILocation(line: 1959, column: 1, scope: !3028)
!3068 = distinct !DISubprogram(name: "mpz_abs_add", scope: !3, file: !3, line: 1902, type: !3069, scopeLine: 1903, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3069 = !DISubroutineType(types: !3070)
!3070 = !{!184, !1838, !1950, !1950}
!3071 = !DILocalVariable(name: "r", arg: 1, scope: !3068, file: !3, line: 1902, type: !1838)
!3072 = !DILocation(line: 1902, column: 20, scope: !3068)
!3073 = !DILocalVariable(name: "a", arg: 2, scope: !3068, file: !3, line: 1902, type: !1950)
!3074 = !DILocation(line: 1902, column: 35, scope: !3068)
!3075 = !DILocalVariable(name: "b", arg: 3, scope: !3068, file: !3, line: 1902, type: !1950)
!3076 = !DILocation(line: 1902, column: 50, scope: !3068)
!3077 = !DILocalVariable(name: "an", scope: !3068, file: !3, line: 1904, type: !184)
!3078 = !DILocation(line: 1904, column: 13, scope: !3068)
!3079 = !DILocation(line: 1904, column: 18, scope: !3068)
!3080 = !DILocalVariable(name: "bn", scope: !3068, file: !3, line: 1905, type: !184)
!3081 = !DILocation(line: 1905, column: 13, scope: !3068)
!3082 = !DILocation(line: 1905, column: 18, scope: !3068)
!3083 = !DILocalVariable(name: "rp", scope: !3068, file: !3, line: 1906, type: !31)
!3084 = !DILocation(line: 1906, column: 10, scope: !3068)
!3085 = !DILocalVariable(name: "cy", scope: !3068, file: !3, line: 1907, type: !27)
!3086 = !DILocation(line: 1907, column: 13, scope: !3068)
!3087 = !DILocation(line: 1909, column: 7, scope: !3088)
!3088 = distinct !DILexicalBlock(scope: !3068, file: !3, line: 1909, column: 7)
!3089 = !DILocation(line: 1909, column: 12, scope: !3088)
!3090 = !DILocation(line: 1909, column: 10, scope: !3088)
!3091 = !DILocation(line: 1909, column: 7, scope: !3068)
!3092 = !DILocation(line: 1911, column: 7, scope: !3093)
!3093 = distinct !DILexicalBlock(scope: !3088, file: !3, line: 1910, column: 5)
!3094 = !DILocalVariable(name: "__mpz_srcptr_swap__tmp", scope: !3095, file: !3, line: 1911, type: !2176)
!3095 = distinct !DILexicalBlock(scope: !3093, file: !3, line: 1911, column: 7)
!3096 = !DILocation(line: 1911, column: 7, scope: !3095)
!3097 = !DILocation(line: 1912, column: 7, scope: !3093)
!3098 = !DILocalVariable(name: "__mp_size_t_swap__tmp", scope: !3099, file: !3, line: 1912, type: !184)
!3099 = distinct !DILexicalBlock(scope: !3093, file: !3, line: 1912, column: 7)
!3100 = !DILocation(line: 1912, column: 7, scope: !3099)
!3101 = !DILocation(line: 1913, column: 5, scope: !3093)
!3102 = !DILocation(line: 1915, column: 8, scope: !3068)
!3103 = !DILocation(line: 1915, column: 6, scope: !3068)
!3104 = !DILocation(line: 1916, column: 17, scope: !3068)
!3105 = !DILocation(line: 1916, column: 21, scope: !3068)
!3106 = !DILocation(line: 1916, column: 24, scope: !3068)
!3107 = !DILocation(line: 1916, column: 31, scope: !3068)
!3108 = !DILocation(line: 1916, column: 35, scope: !3068)
!3109 = !DILocation(line: 1916, column: 38, scope: !3068)
!3110 = !DILocation(line: 1916, column: 45, scope: !3068)
!3111 = !DILocation(line: 1916, column: 8, scope: !3068)
!3112 = !DILocation(line: 1916, column: 6, scope: !3068)
!3113 = !DILocation(line: 1918, column: 12, scope: !3068)
!3114 = !DILocation(line: 1918, column: 3, scope: !3068)
!3115 = !DILocation(line: 1918, column: 6, scope: !3068)
!3116 = !DILocation(line: 1918, column: 10, scope: !3068)
!3117 = !DILocation(line: 1920, column: 10, scope: !3068)
!3118 = !DILocation(line: 1920, column: 15, scope: !3068)
!3119 = !DILocation(line: 1920, column: 13, scope: !3068)
!3120 = !DILocation(line: 1920, column: 3, scope: !3068)
!3121 = distinct !DISubprogram(name: "mpz_abs_sub", scope: !3, file: !3, line: 1924, type: !3069, scopeLine: 1925, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3122 = !DILocalVariable(name: "r", arg: 1, scope: !3121, file: !3, line: 1924, type: !1838)
!3123 = !DILocation(line: 1924, column: 20, scope: !3121)
!3124 = !DILocalVariable(name: "a", arg: 2, scope: !3121, file: !3, line: 1924, type: !1950)
!3125 = !DILocation(line: 1924, column: 35, scope: !3121)
!3126 = !DILocalVariable(name: "b", arg: 3, scope: !3121, file: !3, line: 1924, type: !1950)
!3127 = !DILocation(line: 1924, column: 50, scope: !3121)
!3128 = !DILocalVariable(name: "an", scope: !3121, file: !3, line: 1926, type: !184)
!3129 = !DILocation(line: 1926, column: 13, scope: !3121)
!3130 = !DILocation(line: 1926, column: 18, scope: !3121)
!3131 = !DILocalVariable(name: "bn", scope: !3121, file: !3, line: 1927, type: !184)
!3132 = !DILocation(line: 1927, column: 13, scope: !3121)
!3133 = !DILocation(line: 1927, column: 18, scope: !3121)
!3134 = !DILocalVariable(name: "cmp", scope: !3121, file: !3, line: 1928, type: !34)
!3135 = !DILocation(line: 1928, column: 7, scope: !3121)
!3136 = !DILocalVariable(name: "rp", scope: !3121, file: !3, line: 1929, type: !31)
!3137 = !DILocation(line: 1929, column: 10, scope: !3121)
!3138 = !DILocation(line: 1931, column: 19, scope: !3121)
!3139 = !DILocation(line: 1931, column: 22, scope: !3121)
!3140 = !DILocation(line: 1931, column: 29, scope: !3121)
!3141 = !DILocation(line: 1931, column: 33, scope: !3121)
!3142 = !DILocation(line: 1931, column: 36, scope: !3121)
!3143 = !DILocation(line: 1931, column: 43, scope: !3121)
!3144 = !DILocation(line: 1931, column: 9, scope: !3121)
!3145 = !DILocation(line: 1931, column: 7, scope: !3121)
!3146 = !DILocation(line: 1932, column: 7, scope: !3147)
!3147 = distinct !DILexicalBlock(scope: !3121, file: !3, line: 1932, column: 7)
!3148 = !DILocation(line: 1932, column: 11, scope: !3147)
!3149 = !DILocation(line: 1932, column: 7, scope: !3121)
!3150 = !DILocation(line: 1934, column: 12, scope: !3151)
!3151 = distinct !DILexicalBlock(scope: !3147, file: !3, line: 1933, column: 5)
!3152 = !DILocation(line: 1934, column: 10, scope: !3151)
!3153 = !DILocation(line: 1935, column: 7, scope: !3151)
!3154 = !DILocalVariable(name: "__cy", scope: !3155, file: !3, line: 1935, type: !27)
!3155 = distinct !DILexicalBlock(scope: !3151, file: !3, line: 1935, column: 7)
!3156 = !DILocation(line: 1935, column: 7, scope: !3155)
!3157 = !DILocation(line: 1936, column: 35, scope: !3151)
!3158 = !DILocation(line: 1936, column: 39, scope: !3151)
!3159 = !DILocation(line: 1936, column: 14, scope: !3151)
!3160 = !DILocation(line: 1936, column: 7, scope: !3151)
!3161 = !DILocation(line: 1938, column: 12, scope: !3162)
!3162 = distinct !DILexicalBlock(scope: !3147, file: !3, line: 1938, column: 12)
!3163 = !DILocation(line: 1938, column: 16, scope: !3162)
!3164 = !DILocation(line: 1938, column: 12, scope: !3147)
!3165 = !DILocation(line: 1940, column: 12, scope: !3166)
!3166 = distinct !DILexicalBlock(scope: !3162, file: !3, line: 1939, column: 5)
!3167 = !DILocation(line: 1940, column: 10, scope: !3166)
!3168 = !DILocation(line: 1941, column: 7, scope: !3166)
!3169 = !DILocalVariable(name: "__cy", scope: !3170, file: !3, line: 1941, type: !27)
!3170 = distinct !DILexicalBlock(scope: !3166, file: !3, line: 1941, column: 7)
!3171 = !DILocation(line: 1941, column: 7, scope: !3170)
!3172 = !DILocation(line: 1942, column: 36, scope: !3166)
!3173 = !DILocation(line: 1942, column: 40, scope: !3166)
!3174 = !DILocation(line: 1942, column: 15, scope: !3166)
!3175 = !DILocation(line: 1942, column: 14, scope: !3166)
!3176 = !DILocation(line: 1942, column: 7, scope: !3166)
!3177 = !DILocation(line: 1945, column: 5, scope: !3162)
!3178 = !DILocation(line: 1946, column: 1, scope: !3121)
!3179 = distinct !DISubprogram(name: "mpz_sub", scope: !3, file: !3, line: 1962, type: !3029, scopeLine: 1963, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3180 = !DILocalVariable(name: "r", arg: 1, scope: !3179, file: !3, line: 1962, type: !1838)
!3181 = !DILocation(line: 1962, column: 16, scope: !3179)
!3182 = !DILocalVariable(name: "a", arg: 2, scope: !3179, file: !3, line: 1962, type: !1950)
!3183 = !DILocation(line: 1962, column: 31, scope: !3179)
!3184 = !DILocalVariable(name: "b", arg: 3, scope: !3179, file: !3, line: 1962, type: !1950)
!3185 = !DILocation(line: 1962, column: 46, scope: !3179)
!3186 = !DILocalVariable(name: "rn", scope: !3179, file: !3, line: 1964, type: !184)
!3187 = !DILocation(line: 1964, column: 13, scope: !3179)
!3188 = !DILocation(line: 1966, column: 9, scope: !3189)
!3189 = distinct !DILexicalBlock(scope: !3179, file: !3, line: 1966, column: 8)
!3190 = !DILocation(line: 1966, column: 12, scope: !3189)
!3191 = !DILocation(line: 1966, column: 23, scope: !3189)
!3192 = !DILocation(line: 1966, column: 26, scope: !3189)
!3193 = !DILocation(line: 1966, column: 21, scope: !3189)
!3194 = !DILocation(line: 1966, column: 36, scope: !3189)
!3195 = !DILocation(line: 1966, column: 8, scope: !3179)
!3196 = !DILocation(line: 1967, column: 23, scope: !3189)
!3197 = !DILocation(line: 1967, column: 26, scope: !3189)
!3198 = !DILocation(line: 1967, column: 29, scope: !3189)
!3199 = !DILocation(line: 1967, column: 10, scope: !3189)
!3200 = !DILocation(line: 1967, column: 8, scope: !3189)
!3201 = !DILocation(line: 1967, column: 5, scope: !3189)
!3202 = !DILocation(line: 1969, column: 23, scope: !3189)
!3203 = !DILocation(line: 1969, column: 26, scope: !3189)
!3204 = !DILocation(line: 1969, column: 29, scope: !3189)
!3205 = !DILocation(line: 1969, column: 10, scope: !3189)
!3206 = !DILocation(line: 1969, column: 8, scope: !3189)
!3207 = !DILocation(line: 1971, column: 17, scope: !3179)
!3208 = !DILocation(line: 1971, column: 20, scope: !3179)
!3209 = !DILocation(line: 1971, column: 29, scope: !3179)
!3210 = !DILocation(line: 1971, column: 36, scope: !3179)
!3211 = !DILocation(line: 1971, column: 43, scope: !3179)
!3212 = !DILocation(line: 1971, column: 41, scope: !3179)
!3213 = !DILocation(line: 1971, column: 3, scope: !3179)
!3214 = !DILocation(line: 1971, column: 6, scope: !3179)
!3215 = !DILocation(line: 1971, column: 15, scope: !3179)
!3216 = !DILocation(line: 1972, column: 1, scope: !3179)
!3217 = distinct !DISubprogram(name: "mpz_mul_si", scope: !3, file: !3, line: 1977, type: !3218, scopeLine: 1978, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3218 = !DISubroutineType(types: !3219)
!3219 = !{null, !1838, !1950, !30}
!3220 = !DILocalVariable(name: "r", arg: 1, scope: !3217, file: !3, line: 1977, type: !1838)
!3221 = !DILocation(line: 1977, column: 19, scope: !3217)
!3222 = !DILocalVariable(name: "u", arg: 2, scope: !3217, file: !3, line: 1977, type: !1950)
!3223 = !DILocation(line: 1977, column: 34, scope: !3217)
!3224 = !DILocalVariable(name: "v", arg: 3, scope: !3217, file: !3, line: 1977, type: !30)
!3225 = !DILocation(line: 1977, column: 46, scope: !3217)
!3226 = !DILocation(line: 1979, column: 7, scope: !3227)
!3227 = distinct !DILexicalBlock(scope: !3217, file: !3, line: 1979, column: 7)
!3228 = !DILocation(line: 1979, column: 9, scope: !3227)
!3229 = !DILocation(line: 1979, column: 7, scope: !3217)
!3230 = !DILocation(line: 1981, column: 19, scope: !3231)
!3231 = distinct !DILexicalBlock(scope: !3227, file: !3, line: 1980, column: 5)
!3232 = !DILocation(line: 1981, column: 22, scope: !3231)
!3233 = !DILocation(line: 1981, column: 25, scope: !3231)
!3234 = !DILocation(line: 1981, column: 7, scope: !3231)
!3235 = !DILocation(line: 1982, column: 16, scope: !3231)
!3236 = !DILocation(line: 1982, column: 19, scope: !3231)
!3237 = !DILocation(line: 1982, column: 7, scope: !3231)
!3238 = !DILocation(line: 1983, column: 5, scope: !3231)
!3239 = !DILocation(line: 1985, column: 17, scope: !3227)
!3240 = !DILocation(line: 1985, column: 20, scope: !3227)
!3241 = !DILocation(line: 1985, column: 43, scope: !3227)
!3242 = !DILocation(line: 1985, column: 5, scope: !3227)
!3243 = !DILocation(line: 1986, column: 1, scope: !3217)
!3244 = distinct !DISubprogram(name: "mpz_mul_ui", scope: !3, file: !3, line: 1989, type: !2842, scopeLine: 1990, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3245 = !DILocalVariable(name: "r", arg: 1, scope: !3244, file: !3, line: 1989, type: !1838)
!3246 = !DILocation(line: 1989, column: 19, scope: !3244)
!3247 = !DILocalVariable(name: "u", arg: 2, scope: !3244, file: !3, line: 1989, type: !1950)
!3248 = !DILocation(line: 1989, column: 34, scope: !3244)
!3249 = !DILocalVariable(name: "v", arg: 3, scope: !3244, file: !3, line: 1989, type: !29)
!3250 = !DILocation(line: 1989, column: 55, scope: !3244)
!3251 = !DILocalVariable(name: "un", scope: !3244, file: !3, line: 1991, type: !184)
!3252 = !DILocation(line: 1991, column: 13, scope: !3244)
!3253 = !DILocalVariable(name: "us", scope: !3244, file: !3, line: 1991, type: !184)
!3254 = !DILocation(line: 1991, column: 17, scope: !3244)
!3255 = !DILocalVariable(name: "tp", scope: !3244, file: !3, line: 1992, type: !31)
!3256 = !DILocation(line: 1992, column: 10, scope: !3244)
!3257 = !DILocalVariable(name: "cy", scope: !3244, file: !3, line: 1993, type: !27)
!3258 = !DILocation(line: 1993, column: 13, scope: !3244)
!3259 = !DILocation(line: 1995, column: 8, scope: !3244)
!3260 = !DILocation(line: 1995, column: 11, scope: !3244)
!3261 = !DILocation(line: 1995, column: 6, scope: !3244)
!3262 = !DILocation(line: 1997, column: 7, scope: !3263)
!3263 = distinct !DILexicalBlock(scope: !3244, file: !3, line: 1997, column: 7)
!3264 = !DILocation(line: 1997, column: 10, scope: !3263)
!3265 = !DILocation(line: 1997, column: 15, scope: !3263)
!3266 = !DILocation(line: 1997, column: 18, scope: !3263)
!3267 = !DILocation(line: 1997, column: 20, scope: !3263)
!3268 = !DILocation(line: 1997, column: 7, scope: !3244)
!3269 = !DILocation(line: 1999, column: 7, scope: !3270)
!3270 = distinct !DILexicalBlock(scope: !3263, file: !3, line: 1998, column: 5)
!3271 = !DILocation(line: 1999, column: 10, scope: !3270)
!3272 = !DILocation(line: 1999, column: 19, scope: !3270)
!3273 = !DILocation(line: 2000, column: 7, scope: !3270)
!3274 = !DILocation(line: 2003, column: 8, scope: !3244)
!3275 = !DILocation(line: 2003, column: 6, scope: !3244)
!3276 = !DILocation(line: 2005, column: 8, scope: !3244)
!3277 = !DILocation(line: 2005, column: 6, scope: !3244)
!3278 = !DILocation(line: 2006, column: 19, scope: !3244)
!3279 = !DILocation(line: 2006, column: 23, scope: !3244)
!3280 = !DILocation(line: 2006, column: 26, scope: !3244)
!3281 = !DILocation(line: 2006, column: 33, scope: !3244)
!3282 = !DILocation(line: 2006, column: 37, scope: !3244)
!3283 = !DILocation(line: 2006, column: 8, scope: !3244)
!3284 = !DILocation(line: 2006, column: 6, scope: !3244)
!3285 = !DILocation(line: 2007, column: 12, scope: !3244)
!3286 = !DILocation(line: 2007, column: 3, scope: !3244)
!3287 = !DILocation(line: 2007, column: 6, scope: !3244)
!3288 = !DILocation(line: 2007, column: 10, scope: !3244)
!3289 = !DILocation(line: 2009, column: 10, scope: !3244)
!3290 = !DILocation(line: 2009, column: 13, scope: !3244)
!3291 = !DILocation(line: 2009, column: 9, scope: !3244)
!3292 = !DILocation(line: 2009, column: 6, scope: !3244)
!3293 = !DILocation(line: 2010, column: 18, scope: !3244)
!3294 = !DILocation(line: 2010, column: 21, scope: !3244)
!3295 = !DILocation(line: 2010, column: 17, scope: !3244)
!3296 = !DILocation(line: 2010, column: 30, scope: !3244)
!3297 = !DILocation(line: 2010, column: 28, scope: !3244)
!3298 = !DILocation(line: 2010, column: 35, scope: !3244)
!3299 = !DILocation(line: 2010, column: 3, scope: !3244)
!3300 = !DILocation(line: 2010, column: 6, scope: !3244)
!3301 = !DILocation(line: 2010, column: 15, scope: !3244)
!3302 = !DILocation(line: 2011, column: 1, scope: !3244)
!3303 = distinct !DISubprogram(name: "mpz_mul", scope: !3, file: !3, line: 2014, type: !3029, scopeLine: 2015, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3304 = !DILocalVariable(name: "r", arg: 1, scope: !3303, file: !3, line: 2014, type: !1838)
!3305 = !DILocation(line: 2014, column: 16, scope: !3303)
!3306 = !DILocalVariable(name: "u", arg: 2, scope: !3303, file: !3, line: 2014, type: !1950)
!3307 = !DILocation(line: 2014, column: 31, scope: !3303)
!3308 = !DILocalVariable(name: "v", arg: 3, scope: !3303, file: !3, line: 2014, type: !1950)
!3309 = !DILocation(line: 2014, column: 46, scope: !3303)
!3310 = !DILocalVariable(name: "sign", scope: !3303, file: !3, line: 2016, type: !34)
!3311 = !DILocation(line: 2016, column: 7, scope: !3303)
!3312 = !DILocalVariable(name: "un", scope: !3303, file: !3, line: 2017, type: !184)
!3313 = !DILocation(line: 2017, column: 13, scope: !3303)
!3314 = !DILocalVariable(name: "vn", scope: !3303, file: !3, line: 2017, type: !184)
!3315 = !DILocation(line: 2017, column: 17, scope: !3303)
!3316 = !DILocalVariable(name: "rn", scope: !3303, file: !3, line: 2017, type: !184)
!3317 = !DILocation(line: 2017, column: 21, scope: !3303)
!3318 = !DILocalVariable(name: "t", scope: !3303, file: !3, line: 2018, type: !3319)
!3319 = !DIDerivedType(tag: DW_TAG_typedef, name: "mpz_t", file: !28, line: 73, baseType: !3320)
!3320 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1839, size: 128, elements: !3321)
!3321 = !{!3322}
!3322 = !DISubrange(count: 1)
!3323 = !DILocation(line: 2018, column: 9, scope: !3303)
!3324 = !DILocalVariable(name: "tp", scope: !3303, file: !3, line: 2019, type: !31)
!3325 = !DILocation(line: 2019, column: 10, scope: !3303)
!3326 = !DILocation(line: 2021, column: 8, scope: !3303)
!3327 = !DILocation(line: 2021, column: 11, scope: !3303)
!3328 = !DILocation(line: 2021, column: 6, scope: !3303)
!3329 = !DILocation(line: 2022, column: 8, scope: !3303)
!3330 = !DILocation(line: 2022, column: 11, scope: !3303)
!3331 = !DILocation(line: 2022, column: 6, scope: !3303)
!3332 = !DILocation(line: 2024, column: 7, scope: !3333)
!3333 = distinct !DILexicalBlock(scope: !3303, file: !3, line: 2024, column: 7)
!3334 = !DILocation(line: 2024, column: 10, scope: !3333)
!3335 = !DILocation(line: 2024, column: 15, scope: !3333)
!3336 = !DILocation(line: 2024, column: 18, scope: !3333)
!3337 = !DILocation(line: 2024, column: 21, scope: !3333)
!3338 = !DILocation(line: 2024, column: 7, scope: !3303)
!3339 = !DILocation(line: 2026, column: 7, scope: !3340)
!3340 = distinct !DILexicalBlock(scope: !3333, file: !3, line: 2025, column: 5)
!3341 = !DILocation(line: 2026, column: 10, scope: !3340)
!3342 = !DILocation(line: 2026, column: 19, scope: !3340)
!3343 = !DILocation(line: 2027, column: 7, scope: !3340)
!3344 = !DILocation(line: 2030, column: 11, scope: !3303)
!3345 = !DILocation(line: 2030, column: 16, scope: !3303)
!3346 = !DILocation(line: 2030, column: 14, scope: !3303)
!3347 = !DILocation(line: 2030, column: 20, scope: !3303)
!3348 = !DILocation(line: 2030, column: 8, scope: !3303)
!3349 = !DILocation(line: 2032, column: 8, scope: !3303)
!3350 = !DILocation(line: 2032, column: 6, scope: !3303)
!3351 = !DILocation(line: 2033, column: 8, scope: !3303)
!3352 = !DILocation(line: 2033, column: 6, scope: !3303)
!3353 = !DILocation(line: 2035, column: 14, scope: !3303)
!3354 = !DILocation(line: 2035, column: 18, scope: !3303)
!3355 = !DILocation(line: 2035, column: 23, scope: !3303)
!3356 = !DILocation(line: 2035, column: 21, scope: !3303)
!3357 = !DILocation(line: 2035, column: 27, scope: !3303)
!3358 = !DILocation(line: 2035, column: 3, scope: !3303)
!3359 = !DILocation(line: 2037, column: 11, scope: !3303)
!3360 = !DILocation(line: 2037, column: 6, scope: !3303)
!3361 = !DILocation(line: 2038, column: 7, scope: !3362)
!3362 = distinct !DILexicalBlock(scope: !3303, file: !3, line: 2038, column: 7)
!3363 = !DILocation(line: 2038, column: 13, scope: !3362)
!3364 = !DILocation(line: 2038, column: 10, scope: !3362)
!3365 = !DILocation(line: 2038, column: 7, scope: !3303)
!3366 = !DILocation(line: 2039, column: 14, scope: !3362)
!3367 = !DILocation(line: 2039, column: 18, scope: !3362)
!3368 = !DILocation(line: 2039, column: 21, scope: !3362)
!3369 = !DILocation(line: 2039, column: 28, scope: !3362)
!3370 = !DILocation(line: 2039, column: 32, scope: !3362)
!3371 = !DILocation(line: 2039, column: 35, scope: !3362)
!3372 = !DILocation(line: 2039, column: 42, scope: !3362)
!3373 = !DILocation(line: 2039, column: 5, scope: !3362)
!3374 = !DILocation(line: 2041, column: 14, scope: !3362)
!3375 = !DILocation(line: 2041, column: 18, scope: !3362)
!3376 = !DILocation(line: 2041, column: 21, scope: !3362)
!3377 = !DILocation(line: 2041, column: 28, scope: !3362)
!3378 = !DILocation(line: 2041, column: 32, scope: !3362)
!3379 = !DILocation(line: 2041, column: 35, scope: !3362)
!3380 = !DILocation(line: 2041, column: 42, scope: !3362)
!3381 = !DILocation(line: 2041, column: 5, scope: !3362)
!3382 = !DILocation(line: 2043, column: 8, scope: !3303)
!3383 = !DILocation(line: 2043, column: 13, scope: !3303)
!3384 = !DILocation(line: 2043, column: 11, scope: !3303)
!3385 = !DILocation(line: 2043, column: 6, scope: !3303)
!3386 = !DILocation(line: 2044, column: 9, scope: !3303)
!3387 = !DILocation(line: 2044, column: 12, scope: !3303)
!3388 = !DILocation(line: 2044, column: 14, scope: !3303)
!3389 = !DILocation(line: 2044, column: 18, scope: !3303)
!3390 = !DILocation(line: 2044, column: 6, scope: !3303)
!3391 = !DILocation(line: 2046, column: 17, scope: !3303)
!3392 = !DILocation(line: 2046, column: 26, scope: !3303)
!3393 = !DILocation(line: 2046, column: 24, scope: !3303)
!3394 = !DILocation(line: 2046, column: 31, scope: !3303)
!3395 = !DILocation(line: 2046, column: 6, scope: !3303)
!3396 = !DILocation(line: 2046, column: 15, scope: !3303)
!3397 = !DILocation(line: 2047, column: 13, scope: !3303)
!3398 = !DILocation(line: 2047, column: 16, scope: !3303)
!3399 = !DILocation(line: 2047, column: 3, scope: !3303)
!3400 = !DILocation(line: 2048, column: 14, scope: !3303)
!3401 = !DILocation(line: 2048, column: 3, scope: !3303)
!3402 = !DILocation(line: 2049, column: 1, scope: !3303)
!3403 = distinct !DISubprogram(name: "mpz_mul_2exp", scope: !3, file: !3, line: 2052, type: !3404, scopeLine: 2053, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3404 = !DISubroutineType(types: !3405)
!3405 = !{null, !1838, !1950, !35}
!3406 = !DILocalVariable(name: "r", arg: 1, scope: !3403, file: !3, line: 2052, type: !1838)
!3407 = !DILocation(line: 2052, column: 21, scope: !3403)
!3408 = !DILocalVariable(name: "u", arg: 2, scope: !3403, file: !3, line: 2052, type: !1950)
!3409 = !DILocation(line: 2052, column: 36, scope: !3403)
!3410 = !DILocalVariable(name: "bits", arg: 3, scope: !3403, file: !3, line: 2052, type: !35)
!3411 = !DILocation(line: 2052, column: 51, scope: !3403)
!3412 = !DILocalVariable(name: "un", scope: !3403, file: !3, line: 2054, type: !184)
!3413 = !DILocation(line: 2054, column: 13, scope: !3403)
!3414 = !DILocalVariable(name: "rn", scope: !3403, file: !3, line: 2054, type: !184)
!3415 = !DILocation(line: 2054, column: 17, scope: !3403)
!3416 = !DILocalVariable(name: "limbs", scope: !3403, file: !3, line: 2055, type: !184)
!3417 = !DILocation(line: 2055, column: 13, scope: !3403)
!3418 = !DILocalVariable(name: "shift", scope: !3403, file: !3, line: 2056, type: !6)
!3419 = !DILocation(line: 2056, column: 12, scope: !3403)
!3420 = !DILocalVariable(name: "rp", scope: !3403, file: !3, line: 2057, type: !31)
!3421 = !DILocation(line: 2057, column: 10, scope: !3403)
!3422 = !DILocation(line: 2059, column: 8, scope: !3403)
!3423 = !DILocation(line: 2059, column: 6, scope: !3403)
!3424 = !DILocation(line: 2060, column: 7, scope: !3425)
!3425 = distinct !DILexicalBlock(scope: !3403, file: !3, line: 2060, column: 7)
!3426 = !DILocation(line: 2060, column: 10, scope: !3425)
!3427 = !DILocation(line: 2060, column: 7, scope: !3403)
!3428 = !DILocation(line: 2062, column: 7, scope: !3429)
!3429 = distinct !DILexicalBlock(scope: !3425, file: !3, line: 2061, column: 5)
!3430 = !DILocation(line: 2062, column: 10, scope: !3429)
!3431 = !DILocation(line: 2062, column: 19, scope: !3429)
!3432 = !DILocation(line: 2063, column: 7, scope: !3429)
!3433 = !DILocation(line: 2066, column: 11, scope: !3403)
!3434 = !DILocation(line: 2066, column: 16, scope: !3403)
!3435 = !DILocation(line: 2066, column: 9, scope: !3403)
!3436 = !DILocation(line: 2067, column: 11, scope: !3403)
!3437 = !DILocation(line: 2067, column: 16, scope: !3403)
!3438 = !DILocation(line: 2067, column: 9, scope: !3403)
!3439 = !DILocation(line: 2069, column: 8, scope: !3403)
!3440 = !DILocation(line: 2069, column: 13, scope: !3403)
!3441 = !DILocation(line: 2069, column: 11, scope: !3403)
!3442 = !DILocation(line: 2069, column: 22, scope: !3403)
!3443 = !DILocation(line: 2069, column: 28, scope: !3403)
!3444 = !DILocation(line: 2069, column: 21, scope: !3403)
!3445 = !DILocation(line: 2069, column: 19, scope: !3403)
!3446 = !DILocation(line: 2069, column: 6, scope: !3403)
!3447 = !DILocation(line: 2070, column: 8, scope: !3403)
!3448 = !DILocation(line: 2070, column: 6, scope: !3403)
!3449 = !DILocation(line: 2071, column: 7, scope: !3450)
!3450 = distinct !DILexicalBlock(scope: !3403, file: !3, line: 2071, column: 7)
!3451 = !DILocation(line: 2071, column: 13, scope: !3450)
!3452 = !DILocation(line: 2071, column: 7, scope: !3403)
!3453 = !DILocalVariable(name: "cy", scope: !3454, file: !3, line: 2073, type: !27)
!3454 = distinct !DILexicalBlock(scope: !3450, file: !3, line: 2072, column: 5)
!3455 = !DILocation(line: 2073, column: 17, scope: !3454)
!3456 = !DILocation(line: 2073, column: 34, scope: !3454)
!3457 = !DILocation(line: 2073, column: 39, scope: !3454)
!3458 = !DILocation(line: 2073, column: 37, scope: !3454)
!3459 = !DILocation(line: 2073, column: 46, scope: !3454)
!3460 = !DILocation(line: 2073, column: 49, scope: !3454)
!3461 = !DILocation(line: 2073, column: 56, scope: !3454)
!3462 = !DILocation(line: 2073, column: 60, scope: !3454)
!3463 = !DILocation(line: 2073, column: 22, scope: !3454)
!3464 = !DILocation(line: 2074, column: 18, scope: !3454)
!3465 = !DILocation(line: 2074, column: 7, scope: !3454)
!3466 = !DILocation(line: 2074, column: 10, scope: !3454)
!3467 = !DILocation(line: 2074, column: 12, scope: !3454)
!3468 = !DILocation(line: 2074, column: 16, scope: !3454)
!3469 = !DILocation(line: 2075, column: 14, scope: !3454)
!3470 = !DILocation(line: 2075, column: 17, scope: !3454)
!3471 = !DILocation(line: 2075, column: 13, scope: !3454)
!3472 = !DILocation(line: 2075, column: 10, scope: !3454)
!3473 = !DILocation(line: 2076, column: 5, scope: !3454)
!3474 = !DILocation(line: 2078, column: 16, scope: !3450)
!3475 = !DILocation(line: 2078, column: 21, scope: !3450)
!3476 = !DILocation(line: 2078, column: 19, scope: !3450)
!3477 = !DILocation(line: 2078, column: 28, scope: !3450)
!3478 = !DILocation(line: 2078, column: 31, scope: !3450)
!3479 = !DILocation(line: 2078, column: 38, scope: !3450)
!3480 = !DILocation(line: 2078, column: 5, scope: !3450)
!3481 = !DILocation(line: 2080, column: 3, scope: !3403)
!3482 = !DILocation(line: 2080, column: 10, scope: !3403)
!3483 = !DILocation(line: 2080, column: 16, scope: !3403)
!3484 = !DILocation(line: 2081, column: 5, scope: !3403)
!3485 = !DILocation(line: 2081, column: 8, scope: !3403)
!3486 = !DILocation(line: 2081, column: 17, scope: !3403)
!3487 = distinct !{!3487, !3481, !3488}
!3488 = !DILocation(line: 2081, column: 19, scope: !3403)
!3489 = !DILocation(line: 2083, column: 18, scope: !3403)
!3490 = !DILocation(line: 2083, column: 21, scope: !3403)
!3491 = !DILocation(line: 2083, column: 30, scope: !3403)
!3492 = !DILocation(line: 2083, column: 17, scope: !3403)
!3493 = !DILocation(line: 2083, column: 39, scope: !3403)
!3494 = !DILocation(line: 2083, column: 37, scope: !3403)
!3495 = !DILocation(line: 2083, column: 44, scope: !3403)
!3496 = !DILocation(line: 2083, column: 3, scope: !3403)
!3497 = !DILocation(line: 2083, column: 6, scope: !3403)
!3498 = !DILocation(line: 2083, column: 15, scope: !3403)
!3499 = !DILocation(line: 2084, column: 1, scope: !3403)
!3500 = distinct !DISubprogram(name: "mpz_addmul_ui", scope: !3, file: !3, line: 2087, type: !2842, scopeLine: 2088, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3501 = !DILocalVariable(name: "r", arg: 1, scope: !3500, file: !3, line: 2087, type: !1838)
!3502 = !DILocation(line: 2087, column: 22, scope: !3500)
!3503 = !DILocalVariable(name: "u", arg: 2, scope: !3500, file: !3, line: 2087, type: !1950)
!3504 = !DILocation(line: 2087, column: 37, scope: !3500)
!3505 = !DILocalVariable(name: "v", arg: 3, scope: !3500, file: !3, line: 2087, type: !29)
!3506 = !DILocation(line: 2087, column: 58, scope: !3500)
!3507 = !DILocalVariable(name: "t", scope: !3500, file: !3, line: 2089, type: !3319)
!3508 = !DILocation(line: 2089, column: 9, scope: !3500)
!3509 = !DILocation(line: 2090, column: 13, scope: !3500)
!3510 = !DILocation(line: 2090, column: 3, scope: !3500)
!3511 = !DILocation(line: 2091, column: 15, scope: !3500)
!3512 = !DILocation(line: 2091, column: 18, scope: !3500)
!3513 = !DILocation(line: 2091, column: 21, scope: !3500)
!3514 = !DILocation(line: 2091, column: 3, scope: !3500)
!3515 = !DILocation(line: 2092, column: 12, scope: !3500)
!3516 = !DILocation(line: 2092, column: 15, scope: !3500)
!3517 = !DILocation(line: 2092, column: 18, scope: !3500)
!3518 = !DILocation(line: 2092, column: 3, scope: !3500)
!3519 = !DILocation(line: 2093, column: 14, scope: !3500)
!3520 = !DILocation(line: 2093, column: 3, scope: !3500)
!3521 = !DILocation(line: 2094, column: 1, scope: !3500)
!3522 = distinct !DISubprogram(name: "mpz_submul_ui", scope: !3, file: !3, line: 2097, type: !2842, scopeLine: 2098, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3523 = !DILocalVariable(name: "r", arg: 1, scope: !3522, file: !3, line: 2097, type: !1838)
!3524 = !DILocation(line: 2097, column: 22, scope: !3522)
!3525 = !DILocalVariable(name: "u", arg: 2, scope: !3522, file: !3, line: 2097, type: !1950)
!3526 = !DILocation(line: 2097, column: 37, scope: !3522)
!3527 = !DILocalVariable(name: "v", arg: 3, scope: !3522, file: !3, line: 2097, type: !29)
!3528 = !DILocation(line: 2097, column: 58, scope: !3522)
!3529 = !DILocalVariable(name: "t", scope: !3522, file: !3, line: 2099, type: !3319)
!3530 = !DILocation(line: 2099, column: 9, scope: !3522)
!3531 = !DILocation(line: 2100, column: 13, scope: !3522)
!3532 = !DILocation(line: 2100, column: 3, scope: !3522)
!3533 = !DILocation(line: 2101, column: 15, scope: !3522)
!3534 = !DILocation(line: 2101, column: 18, scope: !3522)
!3535 = !DILocation(line: 2101, column: 21, scope: !3522)
!3536 = !DILocation(line: 2101, column: 3, scope: !3522)
!3537 = !DILocation(line: 2102, column: 12, scope: !3522)
!3538 = !DILocation(line: 2102, column: 15, scope: !3522)
!3539 = !DILocation(line: 2102, column: 18, scope: !3522)
!3540 = !DILocation(line: 2102, column: 3, scope: !3522)
!3541 = !DILocation(line: 2103, column: 14, scope: !3522)
!3542 = !DILocation(line: 2103, column: 3, scope: !3522)
!3543 = !DILocation(line: 2104, column: 1, scope: !3522)
!3544 = distinct !DISubprogram(name: "mpz_addmul", scope: !3, file: !3, line: 2107, type: !3029, scopeLine: 2108, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3545 = !DILocalVariable(name: "r", arg: 1, scope: !3544, file: !3, line: 2107, type: !1838)
!3546 = !DILocation(line: 2107, column: 19, scope: !3544)
!3547 = !DILocalVariable(name: "u", arg: 2, scope: !3544, file: !3, line: 2107, type: !1950)
!3548 = !DILocation(line: 2107, column: 34, scope: !3544)
!3549 = !DILocalVariable(name: "v", arg: 3, scope: !3544, file: !3, line: 2107, type: !1950)
!3550 = !DILocation(line: 2107, column: 49, scope: !3544)
!3551 = !DILocalVariable(name: "t", scope: !3544, file: !3, line: 2109, type: !3319)
!3552 = !DILocation(line: 2109, column: 9, scope: !3544)
!3553 = !DILocation(line: 2110, column: 13, scope: !3544)
!3554 = !DILocation(line: 2110, column: 3, scope: !3544)
!3555 = !DILocation(line: 2111, column: 12, scope: !3544)
!3556 = !DILocation(line: 2111, column: 15, scope: !3544)
!3557 = !DILocation(line: 2111, column: 18, scope: !3544)
!3558 = !DILocation(line: 2111, column: 3, scope: !3544)
!3559 = !DILocation(line: 2112, column: 12, scope: !3544)
!3560 = !DILocation(line: 2112, column: 15, scope: !3544)
!3561 = !DILocation(line: 2112, column: 18, scope: !3544)
!3562 = !DILocation(line: 2112, column: 3, scope: !3544)
!3563 = !DILocation(line: 2113, column: 14, scope: !3544)
!3564 = !DILocation(line: 2113, column: 3, scope: !3544)
!3565 = !DILocation(line: 2114, column: 1, scope: !3544)
!3566 = distinct !DISubprogram(name: "mpz_submul", scope: !3, file: !3, line: 2117, type: !3029, scopeLine: 2118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3567 = !DILocalVariable(name: "r", arg: 1, scope: !3566, file: !3, line: 2117, type: !1838)
!3568 = !DILocation(line: 2117, column: 19, scope: !3566)
!3569 = !DILocalVariable(name: "u", arg: 2, scope: !3566, file: !3, line: 2117, type: !1950)
!3570 = !DILocation(line: 2117, column: 34, scope: !3566)
!3571 = !DILocalVariable(name: "v", arg: 3, scope: !3566, file: !3, line: 2117, type: !1950)
!3572 = !DILocation(line: 2117, column: 49, scope: !3566)
!3573 = !DILocalVariable(name: "t", scope: !3566, file: !3, line: 2119, type: !3319)
!3574 = !DILocation(line: 2119, column: 9, scope: !3566)
!3575 = !DILocation(line: 2120, column: 13, scope: !3566)
!3576 = !DILocation(line: 2120, column: 3, scope: !3566)
!3577 = !DILocation(line: 2121, column: 12, scope: !3566)
!3578 = !DILocation(line: 2121, column: 15, scope: !3566)
!3579 = !DILocation(line: 2121, column: 18, scope: !3566)
!3580 = !DILocation(line: 2121, column: 3, scope: !3566)
!3581 = !DILocation(line: 2122, column: 12, scope: !3566)
!3582 = !DILocation(line: 2122, column: 15, scope: !3566)
!3583 = !DILocation(line: 2122, column: 18, scope: !3566)
!3584 = !DILocation(line: 2122, column: 3, scope: !3566)
!3585 = !DILocation(line: 2123, column: 14, scope: !3566)
!3586 = !DILocation(line: 2123, column: 3, scope: !3566)
!3587 = !DILocation(line: 2124, column: 1, scope: !3566)
!3588 = distinct !DISubprogram(name: "mpz_cdiv_qr", scope: !3, file: !3, line: 2244, type: !3589, scopeLine: 2245, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3589 = !DISubroutineType(types: !3590)
!3590 = !{null, !1838, !1838, !1950, !1950}
!3591 = !DILocalVariable(name: "q", arg: 1, scope: !3588, file: !3, line: 2244, type: !1838)
!3592 = !DILocation(line: 2244, column: 20, scope: !3588)
!3593 = !DILocalVariable(name: "r", arg: 2, scope: !3588, file: !3, line: 2244, type: !1838)
!3594 = !DILocation(line: 2244, column: 29, scope: !3588)
!3595 = !DILocalVariable(name: "n", arg: 3, scope: !3588, file: !3, line: 2244, type: !1950)
!3596 = !DILocation(line: 2244, column: 44, scope: !3588)
!3597 = !DILocalVariable(name: "d", arg: 4, scope: !3588, file: !3, line: 2244, type: !1950)
!3598 = !DILocation(line: 2244, column: 59, scope: !3588)
!3599 = !DILocation(line: 2246, column: 15, scope: !3588)
!3600 = !DILocation(line: 2246, column: 18, scope: !3588)
!3601 = !DILocation(line: 2246, column: 21, scope: !3588)
!3602 = !DILocation(line: 2246, column: 24, scope: !3588)
!3603 = !DILocation(line: 2246, column: 3, scope: !3588)
!3604 = !DILocation(line: 2247, column: 1, scope: !3588)
!3605 = distinct !DISubprogram(name: "mpz_div_qr", scope: !3, file: !3, line: 2132, type: !3606, scopeLine: 2134, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3606 = !DISubroutineType(types: !3607)
!3607 = !{!34, !1838, !1838, !1950, !1950, !5}
!3608 = !DILocalVariable(name: "q", arg: 1, scope: !3605, file: !3, line: 2132, type: !1838)
!3609 = !DILocation(line: 2132, column: 19, scope: !3605)
!3610 = !DILocalVariable(name: "r", arg: 2, scope: !3605, file: !3, line: 2132, type: !1838)
!3611 = !DILocation(line: 2132, column: 28, scope: !3605)
!3612 = !DILocalVariable(name: "n", arg: 3, scope: !3605, file: !3, line: 2133, type: !1950)
!3613 = !DILocation(line: 2133, column: 18, scope: !3605)
!3614 = !DILocalVariable(name: "d", arg: 4, scope: !3605, file: !3, line: 2133, type: !1950)
!3615 = !DILocation(line: 2133, column: 33, scope: !3605)
!3616 = !DILocalVariable(name: "mode", arg: 5, scope: !3605, file: !3, line: 2133, type: !5)
!3617 = !DILocation(line: 2133, column: 60, scope: !3605)
!3618 = !DILocalVariable(name: "ns", scope: !3605, file: !3, line: 2135, type: !184)
!3619 = !DILocation(line: 2135, column: 13, scope: !3605)
!3620 = !DILocalVariable(name: "ds", scope: !3605, file: !3, line: 2135, type: !184)
!3621 = !DILocation(line: 2135, column: 17, scope: !3605)
!3622 = !DILocalVariable(name: "nn", scope: !3605, file: !3, line: 2135, type: !184)
!3623 = !DILocation(line: 2135, column: 21, scope: !3605)
!3624 = !DILocalVariable(name: "dn", scope: !3605, file: !3, line: 2135, type: !184)
!3625 = !DILocation(line: 2135, column: 25, scope: !3605)
!3626 = !DILocalVariable(name: "qs", scope: !3605, file: !3, line: 2135, type: !184)
!3627 = !DILocation(line: 2135, column: 29, scope: !3605)
!3628 = !DILocation(line: 2136, column: 8, scope: !3605)
!3629 = !DILocation(line: 2136, column: 11, scope: !3605)
!3630 = !DILocation(line: 2136, column: 6, scope: !3605)
!3631 = !DILocation(line: 2137, column: 8, scope: !3605)
!3632 = !DILocation(line: 2137, column: 11, scope: !3605)
!3633 = !DILocation(line: 2137, column: 6, scope: !3605)
!3634 = !DILocation(line: 2139, column: 7, scope: !3635)
!3635 = distinct !DILexicalBlock(scope: !3605, file: !3, line: 2139, column: 7)
!3636 = !DILocation(line: 2139, column: 10, scope: !3635)
!3637 = !DILocation(line: 2139, column: 7, scope: !3605)
!3638 = !DILocation(line: 2140, column: 5, scope: !3635)
!3639 = !DILocation(line: 2142, column: 7, scope: !3640)
!3640 = distinct !DILexicalBlock(scope: !3605, file: !3, line: 2142, column: 7)
!3641 = !DILocation(line: 2142, column: 10, scope: !3640)
!3642 = !DILocation(line: 2142, column: 7, scope: !3605)
!3643 = !DILocation(line: 2144, column: 11, scope: !3644)
!3644 = distinct !DILexicalBlock(scope: !3645, file: !3, line: 2144, column: 11)
!3645 = distinct !DILexicalBlock(scope: !3640, file: !3, line: 2143, column: 5)
!3646 = !DILocation(line: 2144, column: 11, scope: !3645)
!3647 = !DILocation(line: 2145, column: 2, scope: !3644)
!3648 = !DILocation(line: 2145, column: 5, scope: !3644)
!3649 = !DILocation(line: 2145, column: 14, scope: !3644)
!3650 = !DILocation(line: 2146, column: 11, scope: !3651)
!3651 = distinct !DILexicalBlock(scope: !3645, file: !3, line: 2146, column: 11)
!3652 = !DILocation(line: 2146, column: 11, scope: !3645)
!3653 = !DILocation(line: 2147, column: 2, scope: !3651)
!3654 = !DILocation(line: 2147, column: 5, scope: !3651)
!3655 = !DILocation(line: 2147, column: 14, scope: !3651)
!3656 = !DILocation(line: 2148, column: 7, scope: !3645)
!3657 = !DILocation(line: 2151, column: 8, scope: !3605)
!3658 = !DILocation(line: 2151, column: 6, scope: !3605)
!3659 = !DILocation(line: 2152, column: 8, scope: !3605)
!3660 = !DILocation(line: 2152, column: 6, scope: !3605)
!3661 = !DILocation(line: 2154, column: 8, scope: !3605)
!3662 = !DILocation(line: 2154, column: 13, scope: !3605)
!3663 = !DILocation(line: 2154, column: 11, scope: !3605)
!3664 = !DILocation(line: 2154, column: 6, scope: !3605)
!3665 = !DILocation(line: 2156, column: 7, scope: !3666)
!3666 = distinct !DILexicalBlock(scope: !3605, file: !3, line: 2156, column: 7)
!3667 = !DILocation(line: 2156, column: 12, scope: !3666)
!3668 = !DILocation(line: 2156, column: 10, scope: !3666)
!3669 = !DILocation(line: 2156, column: 7, scope: !3605)
!3670 = !DILocation(line: 2158, column: 11, scope: !3671)
!3671 = distinct !DILexicalBlock(scope: !3672, file: !3, line: 2158, column: 11)
!3672 = distinct !DILexicalBlock(scope: !3666, file: !3, line: 2157, column: 5)
!3673 = !DILocation(line: 2158, column: 16, scope: !3671)
!3674 = !DILocation(line: 2158, column: 32, scope: !3671)
!3675 = !DILocation(line: 2158, column: 35, scope: !3671)
!3676 = !DILocation(line: 2158, column: 38, scope: !3671)
!3677 = !DILocation(line: 2158, column: 11, scope: !3672)
!3678 = !DILocation(line: 2161, column: 8, scope: !3679)
!3679 = distinct !DILexicalBlock(scope: !3680, file: !3, line: 2161, column: 8)
!3680 = distinct !DILexicalBlock(scope: !3671, file: !3, line: 2159, column: 2)
!3681 = !DILocation(line: 2161, column: 8, scope: !3680)
!3682 = !DILocation(line: 2162, column: 15, scope: !3679)
!3683 = !DILocation(line: 2162, column: 18, scope: !3679)
!3684 = !DILocation(line: 2162, column: 21, scope: !3679)
!3685 = !DILocation(line: 2162, column: 6, scope: !3679)
!3686 = !DILocation(line: 2163, column: 8, scope: !3687)
!3687 = distinct !DILexicalBlock(scope: !3680, file: !3, line: 2163, column: 8)
!3688 = !DILocation(line: 2163, column: 8, scope: !3680)
!3689 = !DILocation(line: 2164, column: 18, scope: !3687)
!3690 = !DILocation(line: 2164, column: 6, scope: !3687)
!3691 = !DILocation(line: 2165, column: 2, scope: !3680)
!3692 = !DILocation(line: 2166, column: 16, scope: !3693)
!3693 = distinct !DILexicalBlock(scope: !3671, file: !3, line: 2166, column: 16)
!3694 = !DILocation(line: 2166, column: 21, scope: !3693)
!3695 = !DILocation(line: 2166, column: 38, scope: !3693)
!3696 = !DILocation(line: 2166, column: 41, scope: !3693)
!3697 = !DILocation(line: 2166, column: 44, scope: !3693)
!3698 = !DILocation(line: 2166, column: 16, scope: !3671)
!3699 = !DILocation(line: 2169, column: 8, scope: !3700)
!3700 = distinct !DILexicalBlock(scope: !3701, file: !3, line: 2169, column: 8)
!3701 = distinct !DILexicalBlock(scope: !3693, file: !3, line: 2167, column: 2)
!3702 = !DILocation(line: 2169, column: 8, scope: !3701)
!3703 = !DILocation(line: 2170, column: 15, scope: !3700)
!3704 = !DILocation(line: 2170, column: 18, scope: !3700)
!3705 = !DILocation(line: 2170, column: 21, scope: !3700)
!3706 = !DILocation(line: 2170, column: 6, scope: !3700)
!3707 = !DILocation(line: 2171, column: 8, scope: !3708)
!3708 = distinct !DILexicalBlock(scope: !3701, file: !3, line: 2171, column: 8)
!3709 = !DILocation(line: 2171, column: 8, scope: !3701)
!3710 = !DILocation(line: 2172, column: 18, scope: !3708)
!3711 = !DILocation(line: 2172, column: 6, scope: !3708)
!3712 = !DILocation(line: 2173, column: 2, scope: !3701)
!3713 = !DILocation(line: 2177, column: 8, scope: !3714)
!3714 = distinct !DILexicalBlock(scope: !3715, file: !3, line: 2177, column: 8)
!3715 = distinct !DILexicalBlock(scope: !3693, file: !3, line: 2175, column: 2)
!3716 = !DILocation(line: 2177, column: 8, scope: !3715)
!3717 = !DILocation(line: 2178, column: 15, scope: !3714)
!3718 = !DILocation(line: 2178, column: 18, scope: !3714)
!3719 = !DILocation(line: 2178, column: 6, scope: !3714)
!3720 = !DILocation(line: 2179, column: 8, scope: !3721)
!3721 = distinct !DILexicalBlock(scope: !3715, file: !3, line: 2179, column: 8)
!3722 = !DILocation(line: 2179, column: 8, scope: !3715)
!3723 = !DILocation(line: 2180, column: 6, scope: !3721)
!3724 = !DILocation(line: 2180, column: 9, scope: !3721)
!3725 = !DILocation(line: 2180, column: 18, scope: !3721)
!3726 = !DILocation(line: 2182, column: 7, scope: !3672)
!3727 = !DILocalVariable(name: "np", scope: !3728, file: !3, line: 2186, type: !31)
!3728 = distinct !DILexicalBlock(scope: !3666, file: !3, line: 2185, column: 5)
!3729 = !DILocation(line: 2186, column: 14, scope: !3728)
!3730 = !DILocalVariable(name: "qp", scope: !3728, file: !3, line: 2186, type: !31)
!3731 = !DILocation(line: 2186, column: 18, scope: !3728)
!3732 = !DILocalVariable(name: "qn", scope: !3728, file: !3, line: 2187, type: !184)
!3733 = !DILocation(line: 2187, column: 17, scope: !3728)
!3734 = !DILocalVariable(name: "rn", scope: !3728, file: !3, line: 2187, type: !184)
!3735 = !DILocation(line: 2187, column: 21, scope: !3728)
!3736 = !DILocalVariable(name: "tq", scope: !3728, file: !3, line: 2188, type: !3319)
!3737 = !DILocation(line: 2188, column: 13, scope: !3728)
!3738 = !DILocalVariable(name: "tr", scope: !3728, file: !3, line: 2188, type: !3319)
!3739 = !DILocation(line: 2188, column: 17, scope: !3728)
!3740 = !DILocation(line: 2190, column: 21, scope: !3728)
!3741 = !DILocation(line: 2190, column: 25, scope: !3728)
!3742 = !DILocation(line: 2190, column: 7, scope: !3728)
!3743 = !DILocation(line: 2191, column: 16, scope: !3728)
!3744 = !DILocation(line: 2191, column: 10, scope: !3728)
!3745 = !DILocation(line: 2193, column: 12, scope: !3728)
!3746 = !DILocation(line: 2193, column: 17, scope: !3728)
!3747 = !DILocation(line: 2193, column: 15, scope: !3728)
!3748 = !DILocation(line: 2193, column: 20, scope: !3728)
!3749 = !DILocation(line: 2193, column: 10, scope: !3728)
!3750 = !DILocation(line: 2195, column: 11, scope: !3751)
!3751 = distinct !DILexicalBlock(scope: !3728, file: !3, line: 2195, column: 11)
!3752 = !DILocation(line: 2195, column: 11, scope: !3728)
!3753 = !DILocation(line: 2197, column: 15, scope: !3754)
!3754 = distinct !DILexicalBlock(scope: !3751, file: !3, line: 2196, column: 2)
!3755 = !DILocation(line: 2197, column: 19, scope: !3754)
!3756 = !DILocation(line: 2197, column: 22, scope: !3754)
!3757 = !DILocation(line: 2197, column: 4, scope: !3754)
!3758 = !DILocation(line: 2198, column: 13, scope: !3754)
!3759 = !DILocation(line: 2198, column: 7, scope: !3754)
!3760 = !DILocation(line: 2199, column: 2, scope: !3754)
!3761 = !DILocation(line: 2201, column: 5, scope: !3751)
!3762 = !DILocation(line: 2203, column: 19, scope: !3728)
!3763 = !DILocation(line: 2203, column: 23, scope: !3728)
!3764 = !DILocation(line: 2203, column: 27, scope: !3728)
!3765 = !DILocation(line: 2203, column: 31, scope: !3728)
!3766 = !DILocation(line: 2203, column: 34, scope: !3728)
!3767 = !DILocation(line: 2203, column: 41, scope: !3728)
!3768 = !DILocation(line: 2203, column: 7, scope: !3728)
!3769 = !DILocation(line: 2205, column: 11, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !3728, file: !3, line: 2205, column: 11)
!3771 = !DILocation(line: 2205, column: 11, scope: !3728)
!3772 = !DILocation(line: 2207, column: 11, scope: !3773)
!3773 = distinct !DILexicalBlock(scope: !3770, file: !3, line: 2206, column: 2)
!3774 = !DILocation(line: 2207, column: 14, scope: !3773)
!3775 = !DILocation(line: 2207, column: 16, scope: !3773)
!3776 = !DILocation(line: 2207, column: 20, scope: !3773)
!3777 = !DILocation(line: 2207, column: 10, scope: !3773)
!3778 = !DILocation(line: 2207, column: 7, scope: !3773)
!3779 = !DILocation(line: 2209, column: 19, scope: !3773)
!3780 = !DILocation(line: 2209, column: 22, scope: !3773)
!3781 = !DILocation(line: 2209, column: 29, scope: !3773)
!3782 = !DILocation(line: 2209, column: 28, scope: !3773)
!3783 = !DILocation(line: 2209, column: 34, scope: !3773)
!3784 = !DILocation(line: 2209, column: 8, scope: !3773)
!3785 = !DILocation(line: 2209, column: 17, scope: !3773)
!3786 = !DILocation(line: 2210, column: 2, scope: !3773)
!3787 = !DILocation(line: 2211, column: 33, scope: !3728)
!3788 = !DILocation(line: 2211, column: 37, scope: !3728)
!3789 = !DILocation(line: 2211, column: 12, scope: !3728)
!3790 = !DILocation(line: 2211, column: 10, scope: !3728)
!3791 = !DILocation(line: 2212, column: 22, scope: !3728)
!3792 = !DILocation(line: 2212, column: 25, scope: !3728)
!3793 = !DILocation(line: 2212, column: 33, scope: !3728)
!3794 = !DILocation(line: 2212, column: 31, scope: !3728)
!3795 = !DILocation(line: 2212, column: 38, scope: !3728)
!3796 = !DILocation(line: 2212, column: 11, scope: !3728)
!3797 = !DILocation(line: 2212, column: 20, scope: !3728)
!3798 = !DILocation(line: 2214, column: 11, scope: !3799)
!3799 = distinct !DILexicalBlock(scope: !3728, file: !3, line: 2214, column: 11)
!3800 = !DILocation(line: 2214, column: 16, scope: !3799)
!3801 = !DILocation(line: 2214, column: 33, scope: !3799)
!3802 = !DILocation(line: 2214, column: 36, scope: !3799)
!3803 = !DILocation(line: 2214, column: 39, scope: !3799)
!3804 = !DILocation(line: 2214, column: 43, scope: !3799)
!3805 = !DILocation(line: 2214, column: 46, scope: !3799)
!3806 = !DILocation(line: 2214, column: 49, scope: !3799)
!3807 = !DILocation(line: 2214, column: 11, scope: !3728)
!3808 = !DILocation(line: 2216, column: 8, scope: !3809)
!3809 = distinct !DILexicalBlock(scope: !3810, file: !3, line: 2216, column: 8)
!3810 = distinct !DILexicalBlock(scope: !3799, file: !3, line: 2215, column: 2)
!3811 = !DILocation(line: 2216, column: 8, scope: !3810)
!3812 = !DILocation(line: 2217, column: 18, scope: !3809)
!3813 = !DILocation(line: 2217, column: 22, scope: !3809)
!3814 = !DILocation(line: 2217, column: 6, scope: !3809)
!3815 = !DILocation(line: 2218, column: 8, scope: !3816)
!3816 = distinct !DILexicalBlock(scope: !3810, file: !3, line: 2218, column: 8)
!3817 = !DILocation(line: 2218, column: 8, scope: !3810)
!3818 = !DILocation(line: 2219, column: 15, scope: !3816)
!3819 = !DILocation(line: 2219, column: 19, scope: !3816)
!3820 = !DILocation(line: 2219, column: 23, scope: !3816)
!3821 = !DILocation(line: 2219, column: 6, scope: !3816)
!3822 = !DILocation(line: 2220, column: 2, scope: !3810)
!3823 = !DILocation(line: 2221, column: 16, scope: !3824)
!3824 = distinct !DILexicalBlock(scope: !3799, file: !3, line: 2221, column: 16)
!3825 = !DILocation(line: 2221, column: 21, scope: !3824)
!3826 = !DILocation(line: 2221, column: 37, scope: !3824)
!3827 = !DILocation(line: 2221, column: 40, scope: !3824)
!3828 = !DILocation(line: 2221, column: 43, scope: !3824)
!3829 = !DILocation(line: 2221, column: 48, scope: !3824)
!3830 = !DILocation(line: 2221, column: 51, scope: !3824)
!3831 = !DILocation(line: 2221, column: 54, scope: !3824)
!3832 = !DILocation(line: 2221, column: 16, scope: !3799)
!3833 = !DILocation(line: 2223, column: 8, scope: !3834)
!3834 = distinct !DILexicalBlock(scope: !3835, file: !3, line: 2223, column: 8)
!3835 = distinct !DILexicalBlock(scope: !3824, file: !3, line: 2222, column: 2)
!3836 = !DILocation(line: 2223, column: 8, scope: !3835)
!3837 = !DILocation(line: 2224, column: 18, scope: !3834)
!3838 = !DILocation(line: 2224, column: 22, scope: !3834)
!3839 = !DILocation(line: 2224, column: 6, scope: !3834)
!3840 = !DILocation(line: 2225, column: 8, scope: !3841)
!3841 = distinct !DILexicalBlock(scope: !3835, file: !3, line: 2225, column: 8)
!3842 = !DILocation(line: 2225, column: 8, scope: !3835)
!3843 = !DILocation(line: 2226, column: 15, scope: !3841)
!3844 = !DILocation(line: 2226, column: 19, scope: !3841)
!3845 = !DILocation(line: 2226, column: 23, scope: !3841)
!3846 = !DILocation(line: 2226, column: 6, scope: !3841)
!3847 = !DILocation(line: 2227, column: 2, scope: !3835)
!3848 = !DILocation(line: 2229, column: 11, scope: !3849)
!3849 = distinct !DILexicalBlock(scope: !3728, file: !3, line: 2229, column: 11)
!3850 = !DILocation(line: 2229, column: 11, scope: !3728)
!3851 = !DILocation(line: 2231, column: 14, scope: !3852)
!3852 = distinct !DILexicalBlock(scope: !3849, file: !3, line: 2230, column: 2)
!3853 = !DILocation(line: 2231, column: 18, scope: !3852)
!3854 = !DILocation(line: 2231, column: 4, scope: !3852)
!3855 = !DILocation(line: 2232, column: 15, scope: !3852)
!3856 = !DILocation(line: 2232, column: 4, scope: !3852)
!3857 = !DILocation(line: 2233, column: 2, scope: !3852)
!3858 = !DILocation(line: 2234, column: 11, scope: !3859)
!3859 = distinct !DILexicalBlock(scope: !3728, file: !3, line: 2234, column: 11)
!3860 = !DILocation(line: 2234, column: 11, scope: !3728)
!3861 = !DILocation(line: 2235, column: 12, scope: !3859)
!3862 = !DILocation(line: 2235, column: 16, scope: !3859)
!3863 = !DILocation(line: 2235, column: 2, scope: !3859)
!3864 = !DILocation(line: 2237, column: 18, scope: !3728)
!3865 = !DILocation(line: 2237, column: 7, scope: !3728)
!3866 = !DILocation(line: 2239, column: 14, scope: !3728)
!3867 = !DILocation(line: 2239, column: 17, scope: !3728)
!3868 = !DILocation(line: 2239, column: 7, scope: !3728)
!3869 = !DILocation(line: 2241, column: 1, scope: !3605)
!3870 = distinct !DISubprogram(name: "mpz_fdiv_qr", scope: !3, file: !3, line: 2250, type: !3589, scopeLine: 2251, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3871 = !DILocalVariable(name: "q", arg: 1, scope: !3870, file: !3, line: 2250, type: !1838)
!3872 = !DILocation(line: 2250, column: 20, scope: !3870)
!3873 = !DILocalVariable(name: "r", arg: 2, scope: !3870, file: !3, line: 2250, type: !1838)
!3874 = !DILocation(line: 2250, column: 29, scope: !3870)
!3875 = !DILocalVariable(name: "n", arg: 3, scope: !3870, file: !3, line: 2250, type: !1950)
!3876 = !DILocation(line: 2250, column: 44, scope: !3870)
!3877 = !DILocalVariable(name: "d", arg: 4, scope: !3870, file: !3, line: 2250, type: !1950)
!3878 = !DILocation(line: 2250, column: 59, scope: !3870)
!3879 = !DILocation(line: 2252, column: 15, scope: !3870)
!3880 = !DILocation(line: 2252, column: 18, scope: !3870)
!3881 = !DILocation(line: 2252, column: 21, scope: !3870)
!3882 = !DILocation(line: 2252, column: 24, scope: !3870)
!3883 = !DILocation(line: 2252, column: 3, scope: !3870)
!3884 = !DILocation(line: 2253, column: 1, scope: !3870)
!3885 = distinct !DISubprogram(name: "mpz_tdiv_qr", scope: !3, file: !3, line: 2256, type: !3589, scopeLine: 2257, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3886 = !DILocalVariable(name: "q", arg: 1, scope: !3885, file: !3, line: 2256, type: !1838)
!3887 = !DILocation(line: 2256, column: 20, scope: !3885)
!3888 = !DILocalVariable(name: "r", arg: 2, scope: !3885, file: !3, line: 2256, type: !1838)
!3889 = !DILocation(line: 2256, column: 29, scope: !3885)
!3890 = !DILocalVariable(name: "n", arg: 3, scope: !3885, file: !3, line: 2256, type: !1950)
!3891 = !DILocation(line: 2256, column: 44, scope: !3885)
!3892 = !DILocalVariable(name: "d", arg: 4, scope: !3885, file: !3, line: 2256, type: !1950)
!3893 = !DILocation(line: 2256, column: 59, scope: !3885)
!3894 = !DILocation(line: 2258, column: 15, scope: !3885)
!3895 = !DILocation(line: 2258, column: 18, scope: !3885)
!3896 = !DILocation(line: 2258, column: 21, scope: !3885)
!3897 = !DILocation(line: 2258, column: 24, scope: !3885)
!3898 = !DILocation(line: 2258, column: 3, scope: !3885)
!3899 = !DILocation(line: 2259, column: 1, scope: !3885)
!3900 = distinct !DISubprogram(name: "mpz_cdiv_q", scope: !3, file: !3, line: 2262, type: !3029, scopeLine: 2263, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3901 = !DILocalVariable(name: "q", arg: 1, scope: !3900, file: !3, line: 2262, type: !1838)
!3902 = !DILocation(line: 2262, column: 19, scope: !3900)
!3903 = !DILocalVariable(name: "n", arg: 2, scope: !3900, file: !3, line: 2262, type: !1950)
!3904 = !DILocation(line: 2262, column: 34, scope: !3900)
!3905 = !DILocalVariable(name: "d", arg: 3, scope: !3900, file: !3, line: 2262, type: !1950)
!3906 = !DILocation(line: 2262, column: 49, scope: !3900)
!3907 = !DILocation(line: 2264, column: 15, scope: !3900)
!3908 = !DILocation(line: 2264, column: 24, scope: !3900)
!3909 = !DILocation(line: 2264, column: 27, scope: !3900)
!3910 = !DILocation(line: 2264, column: 3, scope: !3900)
!3911 = !DILocation(line: 2265, column: 1, scope: !3900)
!3912 = distinct !DISubprogram(name: "mpz_fdiv_q", scope: !3, file: !3, line: 2268, type: !3029, scopeLine: 2269, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3913 = !DILocalVariable(name: "q", arg: 1, scope: !3912, file: !3, line: 2268, type: !1838)
!3914 = !DILocation(line: 2268, column: 19, scope: !3912)
!3915 = !DILocalVariable(name: "n", arg: 2, scope: !3912, file: !3, line: 2268, type: !1950)
!3916 = !DILocation(line: 2268, column: 34, scope: !3912)
!3917 = !DILocalVariable(name: "d", arg: 3, scope: !3912, file: !3, line: 2268, type: !1950)
!3918 = !DILocation(line: 2268, column: 49, scope: !3912)
!3919 = !DILocation(line: 2270, column: 15, scope: !3912)
!3920 = !DILocation(line: 2270, column: 24, scope: !3912)
!3921 = !DILocation(line: 2270, column: 27, scope: !3912)
!3922 = !DILocation(line: 2270, column: 3, scope: !3912)
!3923 = !DILocation(line: 2271, column: 1, scope: !3912)
!3924 = distinct !DISubprogram(name: "mpz_tdiv_q", scope: !3, file: !3, line: 2274, type: !3029, scopeLine: 2275, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3925 = !DILocalVariable(name: "q", arg: 1, scope: !3924, file: !3, line: 2274, type: !1838)
!3926 = !DILocation(line: 2274, column: 19, scope: !3924)
!3927 = !DILocalVariable(name: "n", arg: 2, scope: !3924, file: !3, line: 2274, type: !1950)
!3928 = !DILocation(line: 2274, column: 34, scope: !3924)
!3929 = !DILocalVariable(name: "d", arg: 3, scope: !3924, file: !3, line: 2274, type: !1950)
!3930 = !DILocation(line: 2274, column: 49, scope: !3924)
!3931 = !DILocation(line: 2276, column: 15, scope: !3924)
!3932 = !DILocation(line: 2276, column: 24, scope: !3924)
!3933 = !DILocation(line: 2276, column: 27, scope: !3924)
!3934 = !DILocation(line: 2276, column: 3, scope: !3924)
!3935 = !DILocation(line: 2277, column: 1, scope: !3924)
!3936 = distinct !DISubprogram(name: "mpz_cdiv_r", scope: !3, file: !3, line: 2280, type: !3029, scopeLine: 2281, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3937 = !DILocalVariable(name: "r", arg: 1, scope: !3936, file: !3, line: 2280, type: !1838)
!3938 = !DILocation(line: 2280, column: 19, scope: !3936)
!3939 = !DILocalVariable(name: "n", arg: 2, scope: !3936, file: !3, line: 2280, type: !1950)
!3940 = !DILocation(line: 2280, column: 34, scope: !3936)
!3941 = !DILocalVariable(name: "d", arg: 3, scope: !3936, file: !3, line: 2280, type: !1950)
!3942 = !DILocation(line: 2280, column: 49, scope: !3936)
!3943 = !DILocation(line: 2282, column: 21, scope: !3936)
!3944 = !DILocation(line: 2282, column: 24, scope: !3936)
!3945 = !DILocation(line: 2282, column: 27, scope: !3936)
!3946 = !DILocation(line: 2282, column: 3, scope: !3936)
!3947 = !DILocation(line: 2283, column: 1, scope: !3936)
!3948 = distinct !DISubprogram(name: "mpz_fdiv_r", scope: !3, file: !3, line: 2286, type: !3029, scopeLine: 2287, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3949 = !DILocalVariable(name: "r", arg: 1, scope: !3948, file: !3, line: 2286, type: !1838)
!3950 = !DILocation(line: 2286, column: 19, scope: !3948)
!3951 = !DILocalVariable(name: "n", arg: 2, scope: !3948, file: !3, line: 2286, type: !1950)
!3952 = !DILocation(line: 2286, column: 34, scope: !3948)
!3953 = !DILocalVariable(name: "d", arg: 3, scope: !3948, file: !3, line: 2286, type: !1950)
!3954 = !DILocation(line: 2286, column: 49, scope: !3948)
!3955 = !DILocation(line: 2288, column: 21, scope: !3948)
!3956 = !DILocation(line: 2288, column: 24, scope: !3948)
!3957 = !DILocation(line: 2288, column: 27, scope: !3948)
!3958 = !DILocation(line: 2288, column: 3, scope: !3948)
!3959 = !DILocation(line: 2289, column: 1, scope: !3948)
!3960 = distinct !DISubprogram(name: "mpz_tdiv_r", scope: !3, file: !3, line: 2292, type: !3029, scopeLine: 2293, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3961 = !DILocalVariable(name: "r", arg: 1, scope: !3960, file: !3, line: 2292, type: !1838)
!3962 = !DILocation(line: 2292, column: 19, scope: !3960)
!3963 = !DILocalVariable(name: "n", arg: 2, scope: !3960, file: !3, line: 2292, type: !1950)
!3964 = !DILocation(line: 2292, column: 34, scope: !3960)
!3965 = !DILocalVariable(name: "d", arg: 3, scope: !3960, file: !3, line: 2292, type: !1950)
!3966 = !DILocation(line: 2292, column: 49, scope: !3960)
!3967 = !DILocation(line: 2294, column: 21, scope: !3960)
!3968 = !DILocation(line: 2294, column: 24, scope: !3960)
!3969 = !DILocation(line: 2294, column: 27, scope: !3960)
!3970 = !DILocation(line: 2294, column: 3, scope: !3960)
!3971 = !DILocation(line: 2295, column: 1, scope: !3960)
!3972 = distinct !DISubprogram(name: "mpz_mod", scope: !3, file: !3, line: 2298, type: !3029, scopeLine: 2299, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3973 = !DILocalVariable(name: "r", arg: 1, scope: !3972, file: !3, line: 2298, type: !1838)
!3974 = !DILocation(line: 2298, column: 16, scope: !3972)
!3975 = !DILocalVariable(name: "n", arg: 2, scope: !3972, file: !3, line: 2298, type: !1950)
!3976 = !DILocation(line: 2298, column: 31, scope: !3972)
!3977 = !DILocalVariable(name: "d", arg: 3, scope: !3972, file: !3, line: 2298, type: !1950)
!3978 = !DILocation(line: 2298, column: 46, scope: !3972)
!3979 = !DILocation(line: 2300, column: 21, scope: !3972)
!3980 = !DILocation(line: 2300, column: 24, scope: !3972)
!3981 = !DILocation(line: 2300, column: 27, scope: !3972)
!3982 = !DILocation(line: 2300, column: 30, scope: !3972)
!3983 = !DILocation(line: 2300, column: 33, scope: !3972)
!3984 = !DILocation(line: 2300, column: 42, scope: !3972)
!3985 = !DILocation(line: 2300, column: 3, scope: !3972)
!3986 = !DILocation(line: 2301, column: 1, scope: !3972)
!3987 = distinct !DISubprogram(name: "mpz_cdiv_q_2exp", scope: !3, file: !3, line: 2446, type: !3404, scopeLine: 2447, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!3988 = !DILocalVariable(name: "r", arg: 1, scope: !3987, file: !3, line: 2446, type: !1838)
!3989 = !DILocation(line: 2446, column: 24, scope: !3987)
!3990 = !DILocalVariable(name: "u", arg: 2, scope: !3987, file: !3, line: 2446, type: !1950)
!3991 = !DILocation(line: 2446, column: 39, scope: !3987)
!3992 = !DILocalVariable(name: "cnt", arg: 3, scope: !3987, file: !3, line: 2446, type: !35)
!3993 = !DILocation(line: 2446, column: 54, scope: !3987)
!3994 = !DILocation(line: 2448, column: 19, scope: !3987)
!3995 = !DILocation(line: 2448, column: 22, scope: !3987)
!3996 = !DILocation(line: 2448, column: 25, scope: !3987)
!3997 = !DILocation(line: 2448, column: 3, scope: !3987)
!3998 = !DILocation(line: 2449, column: 1, scope: !3987)
!3999 = distinct !DISubprogram(name: "mpz_div_q_2exp", scope: !3, file: !3, line: 2304, type: !4000, scopeLine: 2306, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4000 = !DISubroutineType(types: !4001)
!4001 = !{null, !1838, !1950, !35, !5}
!4002 = !DILocalVariable(name: "q", arg: 1, scope: !3999, file: !3, line: 2304, type: !1838)
!4003 = !DILocation(line: 2304, column: 23, scope: !3999)
!4004 = !DILocalVariable(name: "u", arg: 2, scope: !3999, file: !3, line: 2304, type: !1950)
!4005 = !DILocation(line: 2304, column: 38, scope: !3999)
!4006 = !DILocalVariable(name: "bit_index", arg: 3, scope: !3999, file: !3, line: 2304, type: !35)
!4007 = !DILocation(line: 2304, column: 53, scope: !3999)
!4008 = !DILocalVariable(name: "mode", arg: 4, scope: !3999, file: !3, line: 2305, type: !5)
!4009 = !DILocation(line: 2305, column: 27, scope: !3999)
!4010 = !DILocalVariable(name: "un", scope: !3999, file: !3, line: 2307, type: !184)
!4011 = !DILocation(line: 2307, column: 13, scope: !3999)
!4012 = !DILocalVariable(name: "qn", scope: !3999, file: !3, line: 2307, type: !184)
!4013 = !DILocation(line: 2307, column: 17, scope: !3999)
!4014 = !DILocalVariable(name: "limb_cnt", scope: !3999, file: !3, line: 2308, type: !184)
!4015 = !DILocation(line: 2308, column: 13, scope: !3999)
!4016 = !DILocalVariable(name: "qp", scope: !3999, file: !3, line: 2309, type: !31)
!4017 = !DILocation(line: 2309, column: 10, scope: !3999)
!4018 = !DILocalVariable(name: "adjust", scope: !3999, file: !3, line: 2310, type: !34)
!4019 = !DILocation(line: 2310, column: 7, scope: !3999)
!4020 = !DILocation(line: 2312, column: 8, scope: !3999)
!4021 = !DILocation(line: 2312, column: 11, scope: !3999)
!4022 = !DILocation(line: 2312, column: 6, scope: !3999)
!4023 = !DILocation(line: 2313, column: 7, scope: !4024)
!4024 = distinct !DILexicalBlock(scope: !3999, file: !3, line: 2313, column: 7)
!4025 = !DILocation(line: 2313, column: 10, scope: !4024)
!4026 = !DILocation(line: 2313, column: 7, scope: !3999)
!4027 = !DILocation(line: 2315, column: 7, scope: !4028)
!4028 = distinct !DILexicalBlock(scope: !4024, file: !3, line: 2314, column: 5)
!4029 = !DILocation(line: 2315, column: 10, scope: !4028)
!4030 = !DILocation(line: 2315, column: 19, scope: !4028)
!4031 = !DILocation(line: 2316, column: 7, scope: !4028)
!4032 = !DILocation(line: 2318, column: 14, scope: !3999)
!4033 = !DILocation(line: 2318, column: 24, scope: !3999)
!4034 = !DILocation(line: 2318, column: 12, scope: !3999)
!4035 = !DILocation(line: 2319, column: 8, scope: !3999)
!4036 = !DILocation(line: 2319, column: 23, scope: !3999)
!4037 = !DILocation(line: 2319, column: 21, scope: !3999)
!4038 = !DILocation(line: 2319, column: 6, scope: !3999)
!4039 = !DILocation(line: 2320, column: 13, scope: !3999)
!4040 = !DILocation(line: 2322, column: 7, scope: !4041)
!4041 = distinct !DILexicalBlock(scope: !3999, file: !3, line: 2322, column: 7)
!4042 = !DILocation(line: 2322, column: 17, scope: !4041)
!4043 = !DILocation(line: 2322, column: 20, scope: !4041)
!4044 = !DILocation(line: 2322, column: 16, scope: !4041)
!4045 = !DILocation(line: 2322, column: 12, scope: !4041)
!4046 = !DILocation(line: 2322, column: 7, scope: !3999)
!4047 = !DILocation(line: 2325, column: 15, scope: !4041)
!4048 = !DILocation(line: 2325, column: 18, scope: !4041)
!4049 = !DILocation(line: 2326, column: 8, scope: !4041)
!4050 = !DILocation(line: 2326, column: 12, scope: !4041)
!4051 = !DILocation(line: 2327, column: 8, scope: !4041)
!4052 = !DILocation(line: 2327, column: 12, scope: !4041)
!4053 = !DILocation(line: 2327, column: 15, scope: !4041)
!4054 = !DILocation(line: 2327, column: 21, scope: !4041)
!4055 = !DILocation(line: 2328, column: 26, scope: !4041)
!4056 = !DILocation(line: 2328, column: 23, scope: !4041)
!4057 = !DILocation(line: 2328, column: 37, scope: !4041)
!4058 = !DILocation(line: 2328, column: 5, scope: !4041)
!4059 = !DILocation(line: 2325, column: 12, scope: !4041)
!4060 = !DILocation(line: 2325, column: 5, scope: !4041)
!4061 = !DILocation(line: 2330, column: 12, scope: !4041)
!4062 = !DILocation(line: 2332, column: 7, scope: !4063)
!4063 = distinct !DILexicalBlock(scope: !3999, file: !3, line: 2332, column: 7)
!4064 = !DILocation(line: 2332, column: 10, scope: !4063)
!4065 = !DILocation(line: 2332, column: 7, scope: !3999)
!4066 = !DILocation(line: 2333, column: 8, scope: !4063)
!4067 = !DILocation(line: 2333, column: 5, scope: !4063)
!4068 = !DILocation(line: 2337, column: 12, scope: !4069)
!4069 = distinct !DILexicalBlock(scope: !4063, file: !3, line: 2336, column: 5)
!4070 = !DILocation(line: 2337, column: 10, scope: !4069)
!4071 = !DILocation(line: 2339, column: 11, scope: !4072)
!4072 = distinct !DILexicalBlock(scope: !4069, file: !3, line: 2339, column: 11)
!4073 = !DILocation(line: 2339, column: 21, scope: !4072)
!4074 = !DILocation(line: 2339, column: 11, scope: !4069)
!4075 = !DILocation(line: 2341, column: 16, scope: !4076)
!4076 = distinct !DILexicalBlock(scope: !4072, file: !3, line: 2340, column: 2)
!4077 = !DILocation(line: 2341, column: 20, scope: !4076)
!4078 = !DILocation(line: 2341, column: 23, scope: !4076)
!4079 = !DILocation(line: 2341, column: 31, scope: !4076)
!4080 = !DILocation(line: 2341, column: 29, scope: !4076)
!4081 = !DILocation(line: 2341, column: 41, scope: !4076)
!4082 = !DILocation(line: 2341, column: 45, scope: !4076)
!4083 = !DILocation(line: 2341, column: 4, scope: !4076)
!4084 = !DILocation(line: 2342, column: 10, scope: !4076)
!4085 = !DILocation(line: 2342, column: 13, scope: !4076)
!4086 = !DILocation(line: 2342, column: 16, scope: !4076)
!4087 = !DILocation(line: 2342, column: 21, scope: !4076)
!4088 = !DILocation(line: 2342, column: 7, scope: !4076)
!4089 = !DILocation(line: 2343, column: 2, scope: !4076)
!4090 = !DILocation(line: 2346, column: 15, scope: !4091)
!4091 = distinct !DILexicalBlock(scope: !4072, file: !3, line: 2345, column: 2)
!4092 = !DILocation(line: 2346, column: 19, scope: !4091)
!4093 = !DILocation(line: 2346, column: 22, scope: !4091)
!4094 = !DILocation(line: 2346, column: 30, scope: !4091)
!4095 = !DILocation(line: 2346, column: 28, scope: !4091)
!4096 = !DILocation(line: 2346, column: 40, scope: !4091)
!4097 = !DILocation(line: 2346, column: 4, scope: !4091)
!4098 = !DILocation(line: 2350, column: 17, scope: !3999)
!4099 = !DILocation(line: 2350, column: 3, scope: !3999)
!4100 = !DILocation(line: 2350, column: 6, scope: !3999)
!4101 = !DILocation(line: 2350, column: 15, scope: !3999)
!4102 = !DILocation(line: 2352, column: 7, scope: !4103)
!4103 = distinct !DILexicalBlock(scope: !3999, file: !3, line: 2352, column: 7)
!4104 = !DILocation(line: 2352, column: 7, scope: !3999)
!4105 = !DILocation(line: 2353, column: 17, scope: !4103)
!4106 = !DILocation(line: 2353, column: 20, scope: !4103)
!4107 = !DILocation(line: 2353, column: 5, scope: !4103)
!4108 = !DILocation(line: 2354, column: 7, scope: !4109)
!4109 = distinct !DILexicalBlock(scope: !3999, file: !3, line: 2354, column: 7)
!4110 = !DILocation(line: 2354, column: 10, scope: !4109)
!4111 = !DILocation(line: 2354, column: 7, scope: !3999)
!4112 = !DILocation(line: 2355, column: 14, scope: !4109)
!4113 = !DILocation(line: 2355, column: 17, scope: !4109)
!4114 = !DILocation(line: 2355, column: 5, scope: !4109)
!4115 = !DILocation(line: 2356, column: 1, scope: !3999)
!4116 = distinct !DISubprogram(name: "mpz_fdiv_q_2exp", scope: !3, file: !3, line: 2452, type: !3404, scopeLine: 2453, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4117 = !DILocalVariable(name: "r", arg: 1, scope: !4116, file: !3, line: 2452, type: !1838)
!4118 = !DILocation(line: 2452, column: 24, scope: !4116)
!4119 = !DILocalVariable(name: "u", arg: 2, scope: !4116, file: !3, line: 2452, type: !1950)
!4120 = !DILocation(line: 2452, column: 39, scope: !4116)
!4121 = !DILocalVariable(name: "cnt", arg: 3, scope: !4116, file: !3, line: 2452, type: !35)
!4122 = !DILocation(line: 2452, column: 54, scope: !4116)
!4123 = !DILocation(line: 2454, column: 19, scope: !4116)
!4124 = !DILocation(line: 2454, column: 22, scope: !4116)
!4125 = !DILocation(line: 2454, column: 25, scope: !4116)
!4126 = !DILocation(line: 2454, column: 3, scope: !4116)
!4127 = !DILocation(line: 2455, column: 1, scope: !4116)
!4128 = distinct !DISubprogram(name: "mpz_tdiv_q_2exp", scope: !3, file: !3, line: 2458, type: !3404, scopeLine: 2459, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4129 = !DILocalVariable(name: "r", arg: 1, scope: !4128, file: !3, line: 2458, type: !1838)
!4130 = !DILocation(line: 2458, column: 24, scope: !4128)
!4131 = !DILocalVariable(name: "u", arg: 2, scope: !4128, file: !3, line: 2458, type: !1950)
!4132 = !DILocation(line: 2458, column: 39, scope: !4128)
!4133 = !DILocalVariable(name: "cnt", arg: 3, scope: !4128, file: !3, line: 2458, type: !35)
!4134 = !DILocation(line: 2458, column: 54, scope: !4128)
!4135 = !DILocation(line: 2460, column: 19, scope: !4128)
!4136 = !DILocation(line: 2460, column: 22, scope: !4128)
!4137 = !DILocation(line: 2460, column: 25, scope: !4128)
!4138 = !DILocation(line: 2460, column: 3, scope: !4128)
!4139 = !DILocation(line: 2461, column: 1, scope: !4128)
!4140 = distinct !DISubprogram(name: "mpz_cdiv_r_2exp", scope: !3, file: !3, line: 2464, type: !3404, scopeLine: 2465, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4141 = !DILocalVariable(name: "r", arg: 1, scope: !4140, file: !3, line: 2464, type: !1838)
!4142 = !DILocation(line: 2464, column: 24, scope: !4140)
!4143 = !DILocalVariable(name: "u", arg: 2, scope: !4140, file: !3, line: 2464, type: !1950)
!4144 = !DILocation(line: 2464, column: 39, scope: !4140)
!4145 = !DILocalVariable(name: "cnt", arg: 3, scope: !4140, file: !3, line: 2464, type: !35)
!4146 = !DILocation(line: 2464, column: 54, scope: !4140)
!4147 = !DILocation(line: 2466, column: 19, scope: !4140)
!4148 = !DILocation(line: 2466, column: 22, scope: !4140)
!4149 = !DILocation(line: 2466, column: 25, scope: !4140)
!4150 = !DILocation(line: 2466, column: 3, scope: !4140)
!4151 = !DILocation(line: 2467, column: 1, scope: !4140)
!4152 = distinct !DISubprogram(name: "mpz_div_r_2exp", scope: !3, file: !3, line: 2359, type: !4000, scopeLine: 2361, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4153 = !DILocalVariable(name: "r", arg: 1, scope: !4152, file: !3, line: 2359, type: !1838)
!4154 = !DILocation(line: 2359, column: 23, scope: !4152)
!4155 = !DILocalVariable(name: "u", arg: 2, scope: !4152, file: !3, line: 2359, type: !1950)
!4156 = !DILocation(line: 2359, column: 38, scope: !4152)
!4157 = !DILocalVariable(name: "bit_index", arg: 3, scope: !4152, file: !3, line: 2359, type: !35)
!4158 = !DILocation(line: 2359, column: 53, scope: !4152)
!4159 = !DILocalVariable(name: "mode", arg: 4, scope: !4152, file: !3, line: 2360, type: !5)
!4160 = !DILocation(line: 2360, column: 27, scope: !4152)
!4161 = !DILocalVariable(name: "us", scope: !4152, file: !3, line: 2362, type: !184)
!4162 = !DILocation(line: 2362, column: 13, scope: !4152)
!4163 = !DILocalVariable(name: "un", scope: !4152, file: !3, line: 2362, type: !184)
!4164 = !DILocation(line: 2362, column: 17, scope: !4152)
!4165 = !DILocalVariable(name: "rn", scope: !4152, file: !3, line: 2362, type: !184)
!4166 = !DILocation(line: 2362, column: 21, scope: !4152)
!4167 = !DILocalVariable(name: "rp", scope: !4152, file: !3, line: 2363, type: !31)
!4168 = !DILocation(line: 2363, column: 10, scope: !4152)
!4169 = !DILocalVariable(name: "mask", scope: !4152, file: !3, line: 2364, type: !27)
!4170 = !DILocation(line: 2364, column: 13, scope: !4152)
!4171 = !DILocation(line: 2366, column: 8, scope: !4152)
!4172 = !DILocation(line: 2366, column: 11, scope: !4152)
!4173 = !DILocation(line: 2366, column: 6, scope: !4152)
!4174 = !DILocation(line: 2367, column: 7, scope: !4175)
!4175 = distinct !DILexicalBlock(scope: !4152, file: !3, line: 2367, column: 7)
!4176 = !DILocation(line: 2367, column: 10, scope: !4175)
!4177 = !DILocation(line: 2367, column: 15, scope: !4175)
!4178 = !DILocation(line: 2367, column: 18, scope: !4175)
!4179 = !DILocation(line: 2367, column: 28, scope: !4175)
!4180 = !DILocation(line: 2367, column: 7, scope: !4152)
!4181 = !DILocation(line: 2369, column: 7, scope: !4182)
!4182 = distinct !DILexicalBlock(scope: !4175, file: !3, line: 2368, column: 5)
!4183 = !DILocation(line: 2369, column: 10, scope: !4182)
!4184 = !DILocation(line: 2369, column: 19, scope: !4182)
!4185 = !DILocation(line: 2370, column: 7, scope: !4182)
!4186 = !DILocation(line: 2372, column: 9, scope: !4152)
!4187 = !DILocation(line: 2372, column: 19, scope: !4152)
!4188 = !DILocation(line: 2372, column: 35, scope: !4152)
!4189 = !DILocation(line: 2372, column: 40, scope: !4152)
!4190 = !DILocation(line: 2372, column: 6, scope: !4152)
!4191 = !DILocation(line: 2375, column: 8, scope: !4152)
!4192 = !DILocation(line: 2375, column: 6, scope: !4152)
!4193 = !DILocation(line: 2376, column: 8, scope: !4152)
!4194 = !DILocation(line: 2376, column: 6, scope: !4152)
!4195 = !DILocation(line: 2378, column: 27, scope: !4152)
!4196 = !DILocation(line: 2378, column: 30, scope: !4152)
!4197 = !DILocation(line: 2378, column: 48, scope: !4152)
!4198 = !DILocation(line: 2378, column: 46, scope: !4152)
!4199 = !DILocation(line: 2378, column: 23, scope: !4152)
!4200 = !DILocation(line: 2378, column: 8, scope: !4152)
!4201 = !DILocation(line: 2380, column: 7, scope: !4202)
!4202 = distinct !DILexicalBlock(scope: !4152, file: !3, line: 2380, column: 7)
!4203 = !DILocation(line: 2380, column: 12, scope: !4202)
!4204 = !DILocation(line: 2380, column: 10, scope: !4202)
!4205 = !DILocation(line: 2380, column: 7, scope: !4152)
!4206 = !DILocation(line: 2384, column: 11, scope: !4207)
!4207 = distinct !DILexicalBlock(scope: !4208, file: !3, line: 2384, column: 11)
!4208 = distinct !DILexicalBlock(scope: !4202, file: !3, line: 2381, column: 5)
!4209 = !DILocation(line: 2384, column: 21, scope: !4207)
!4210 = !DILocation(line: 2384, column: 24, scope: !4207)
!4211 = !DILocation(line: 2384, column: 20, scope: !4207)
!4212 = !DILocation(line: 2384, column: 16, scope: !4207)
!4213 = !DILocation(line: 2384, column: 11, scope: !4208)
!4214 = !DILocalVariable(name: "i", scope: !4215, file: !3, line: 2387, type: !184)
!4215 = distinct !DILexicalBlock(scope: !4207, file: !3, line: 2385, column: 2)
!4216 = !DILocation(line: 2387, column: 14, scope: !4215)
!4217 = !DILocalVariable(name: "cy", scope: !4215, file: !3, line: 2388, type: !27)
!4218 = !DILocation(line: 2388, column: 14, scope: !4215)
!4219 = !DILocation(line: 2390, column: 12, scope: !4220)
!4220 = distinct !DILexicalBlock(scope: !4215, file: !3, line: 2390, column: 4)
!4221 = !DILocation(line: 2390, column: 19, scope: !4220)
!4222 = !DILocation(line: 2390, column: 9, scope: !4220)
!4223 = !DILocation(line: 2390, column: 24, scope: !4224)
!4224 = distinct !DILexicalBlock(scope: !4220, file: !3, line: 2390, column: 4)
!4225 = !DILocation(line: 2390, column: 28, scope: !4224)
!4226 = !DILocation(line: 2390, column: 26, scope: !4224)
!4227 = !DILocation(line: 2390, column: 4, scope: !4220)
!4228 = !DILocalVariable(name: "s", scope: !4229, file: !3, line: 2392, type: !27)
!4229 = distinct !DILexicalBlock(scope: !4224, file: !3, line: 2391, column: 6)
!4230 = !DILocation(line: 2392, column: 18, scope: !4229)
!4231 = !DILocation(line: 2392, column: 23, scope: !4229)
!4232 = !DILocation(line: 2392, column: 26, scope: !4229)
!4233 = !DILocation(line: 2392, column: 32, scope: !4229)
!4234 = !DILocation(line: 2392, column: 22, scope: !4229)
!4235 = !DILocation(line: 2392, column: 37, scope: !4229)
!4236 = !DILocation(line: 2392, column: 35, scope: !4229)
!4237 = !DILocation(line: 2393, column: 13, scope: !4229)
!4238 = !DILocation(line: 2393, column: 17, scope: !4229)
!4239 = !DILocation(line: 2393, column: 15, scope: !4229)
!4240 = !DILocation(line: 2393, column: 11, scope: !4229)
!4241 = !DILocation(line: 2394, column: 16, scope: !4229)
!4242 = !DILocation(line: 2394, column: 8, scope: !4229)
!4243 = !DILocation(line: 2394, column: 11, scope: !4229)
!4244 = !DILocation(line: 2394, column: 14, scope: !4229)
!4245 = !DILocation(line: 2395, column: 6, scope: !4229)
!4246 = !DILocation(line: 2390, column: 33, scope: !4224)
!4247 = !DILocation(line: 2390, column: 4, scope: !4224)
!4248 = distinct !{!4248, !4227, !4249}
!4249 = !DILocation(line: 2395, column: 6, scope: !4220)
!4250 = !DILocation(line: 2397, column: 4, scope: !4215)
!4251 = !DILocation(line: 2397, column: 11, scope: !4252)
!4252 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 2397, column: 4)
!4253 = distinct !DILexicalBlock(scope: !4215, file: !3, line: 2397, column: 4)
!4254 = !DILocation(line: 2397, column: 15, scope: !4252)
!4255 = !DILocation(line: 2397, column: 18, scope: !4252)
!4256 = !DILocation(line: 2397, column: 13, scope: !4252)
!4257 = !DILocation(line: 2397, column: 4, scope: !4253)
!4258 = !DILocation(line: 2398, column: 6, scope: !4252)
!4259 = !DILocation(line: 2398, column: 9, scope: !4252)
!4260 = !DILocation(line: 2398, column: 12, scope: !4252)
!4261 = !DILocation(line: 2397, column: 24, scope: !4252)
!4262 = !DILocation(line: 2397, column: 4, scope: !4252)
!4263 = distinct !{!4263, !4257, !4264}
!4264 = !DILocation(line: 2398, column: 14, scope: !4253)
!4265 = !DILocation(line: 2400, column: 15, scope: !4215)
!4266 = !DILocation(line: 2400, column: 4, scope: !4215)
!4267 = !DILocation(line: 2400, column: 7, scope: !4215)
!4268 = !DILocation(line: 2400, column: 9, scope: !4215)
!4269 = !DILocation(line: 2400, column: 13, scope: !4215)
!4270 = !DILocation(line: 2401, column: 10, scope: !4215)
!4271 = !DILocation(line: 2401, column: 9, scope: !4215)
!4272 = !DILocation(line: 2401, column: 7, scope: !4215)
!4273 = !DILocation(line: 2402, column: 2, scope: !4215)
!4274 = !DILocation(line: 2406, column: 8, scope: !4275)
!4275 = distinct !DILexicalBlock(scope: !4276, file: !3, line: 2406, column: 8)
!4276 = distinct !DILexicalBlock(scope: !4207, file: !3, line: 2404, column: 2)
!4277 = !DILocation(line: 2406, column: 13, scope: !4275)
!4278 = !DILocation(line: 2406, column: 10, scope: !4275)
!4279 = !DILocation(line: 2406, column: 8, scope: !4276)
!4280 = !DILocation(line: 2407, column: 17, scope: !4275)
!4281 = !DILocation(line: 2407, column: 21, scope: !4275)
!4282 = !DILocation(line: 2407, column: 24, scope: !4275)
!4283 = !DILocation(line: 2407, column: 31, scope: !4275)
!4284 = !DILocation(line: 2407, column: 6, scope: !4275)
!4285 = !DILocation(line: 2409, column: 9, scope: !4276)
!4286 = !DILocation(line: 2409, column: 7, scope: !4276)
!4287 = !DILocation(line: 2411, column: 5, scope: !4208)
!4288 = !DILocation(line: 2414, column: 11, scope: !4289)
!4289 = distinct !DILexicalBlock(scope: !4290, file: !3, line: 2414, column: 11)
!4290 = distinct !DILexicalBlock(scope: !4202, file: !3, line: 2413, column: 5)
!4291 = !DILocation(line: 2414, column: 16, scope: !4289)
!4292 = !DILocation(line: 2414, column: 13, scope: !4289)
!4293 = !DILocation(line: 2414, column: 11, scope: !4290)
!4294 = !DILocation(line: 2415, column: 13, scope: !4289)
!4295 = !DILocation(line: 2415, column: 17, scope: !4289)
!4296 = !DILocation(line: 2415, column: 20, scope: !4289)
!4297 = !DILocation(line: 2415, column: 27, scope: !4289)
!4298 = !DILocation(line: 2415, column: 30, scope: !4289)
!4299 = !DILocation(line: 2415, column: 2, scope: !4289)
!4300 = !DILocation(line: 2417, column: 18, scope: !4290)
!4301 = !DILocation(line: 2417, column: 21, scope: !4290)
!4302 = !DILocation(line: 2417, column: 27, scope: !4290)
!4303 = !DILocation(line: 2417, column: 29, scope: !4290)
!4304 = !DILocation(line: 2417, column: 35, scope: !4290)
!4305 = !DILocation(line: 2417, column: 33, scope: !4290)
!4306 = !DILocation(line: 2417, column: 7, scope: !4290)
!4307 = !DILocation(line: 2417, column: 10, scope: !4290)
!4308 = !DILocation(line: 2417, column: 12, scope: !4290)
!4309 = !DILocation(line: 2417, column: 16, scope: !4290)
!4310 = !DILocation(line: 2419, column: 11, scope: !4311)
!4311 = distinct !DILexicalBlock(scope: !4290, file: !3, line: 2419, column: 11)
!4312 = !DILocation(line: 2419, column: 21, scope: !4311)
!4313 = !DILocation(line: 2419, column: 24, scope: !4311)
!4314 = !DILocation(line: 2419, column: 20, scope: !4311)
!4315 = !DILocation(line: 2419, column: 16, scope: !4311)
!4316 = !DILocation(line: 2419, column: 11, scope: !4290)
!4317 = !DILocalVariable(name: "i", scope: !4318, file: !3, line: 2422, type: !184)
!4318 = distinct !DILexicalBlock(scope: !4311, file: !3, line: 2420, column: 2)
!4319 = !DILocation(line: 2422, column: 14, scope: !4318)
!4320 = !DILocation(line: 2424, column: 11, scope: !4321)
!4321 = distinct !DILexicalBlock(scope: !4318, file: !3, line: 2424, column: 4)
!4322 = !DILocation(line: 2424, column: 9, scope: !4321)
!4323 = !DILocation(line: 2424, column: 16, scope: !4324)
!4324 = distinct !DILexicalBlock(scope: !4321, file: !3, line: 2424, column: 4)
!4325 = !DILocation(line: 2424, column: 20, scope: !4324)
!4326 = !DILocation(line: 2424, column: 18, scope: !4324)
!4327 = !DILocation(line: 2424, column: 23, scope: !4324)
!4328 = !DILocation(line: 2424, column: 26, scope: !4324)
!4329 = !DILocation(line: 2424, column: 29, scope: !4324)
!4330 = !DILocation(line: 2424, column: 32, scope: !4324)
!4331 = !DILocation(line: 0, scope: !4324)
!4332 = !DILocation(line: 2424, column: 4, scope: !4321)
!4333 = !DILocation(line: 2424, column: 39, scope: !4324)
!4334 = !DILocation(line: 2424, column: 4, scope: !4324)
!4335 = distinct !{!4335, !4332, !4336}
!4336 = !DILocation(line: 2425, column: 6, scope: !4321)
!4337 = !DILocation(line: 2426, column: 8, scope: !4338)
!4338 = distinct !DILexicalBlock(scope: !4318, file: !3, line: 2426, column: 8)
!4339 = !DILocation(line: 2426, column: 12, scope: !4338)
!4340 = !DILocation(line: 2426, column: 10, scope: !4338)
!4341 = !DILocation(line: 2426, column: 8, scope: !4318)
!4342 = !DILocation(line: 2429, column: 17, scope: !4343)
!4343 = distinct !DILexicalBlock(scope: !4338, file: !3, line: 2427, column: 6)
!4344 = !DILocation(line: 2429, column: 20, scope: !4343)
!4345 = !DILocation(line: 2429, column: 16, scope: !4343)
!4346 = !DILocation(line: 2429, column: 23, scope: !4343)
!4347 = !DILocation(line: 2429, column: 8, scope: !4343)
!4348 = !DILocation(line: 2429, column: 11, scope: !4343)
!4349 = !DILocation(line: 2429, column: 14, scope: !4343)
!4350 = !DILocation(line: 2430, column: 8, scope: !4343)
!4351 = !DILocation(line: 2430, column: 15, scope: !4343)
!4352 = !DILocation(line: 2430, column: 21, scope: !4343)
!4353 = !DILocation(line: 2430, column: 19, scope: !4343)
!4354 = !DILocation(line: 2431, column: 12, scope: !4343)
!4355 = !DILocation(line: 2431, column: 15, scope: !4343)
!4356 = !DILocation(line: 2431, column: 11, scope: !4343)
!4357 = !DILocation(line: 2431, column: 3, scope: !4343)
!4358 = !DILocation(line: 2431, column: 6, scope: !4343)
!4359 = !DILocation(line: 2431, column: 9, scope: !4343)
!4360 = distinct !{!4360, !4350, !4361}
!4361 = !DILocation(line: 2431, column: 16, scope: !4343)
!4362 = !DILocation(line: 2433, column: 20, scope: !4343)
!4363 = !DILocation(line: 2433, column: 8, scope: !4343)
!4364 = !DILocation(line: 2433, column: 11, scope: !4343)
!4365 = !DILocation(line: 2433, column: 13, scope: !4343)
!4366 = !DILocation(line: 2433, column: 17, scope: !4343)
!4367 = !DILocation(line: 2437, column: 14, scope: !4343)
!4368 = !DILocation(line: 2437, column: 13, scope: !4343)
!4369 = !DILocation(line: 2437, column: 11, scope: !4343)
!4370 = !DILocation(line: 2438, column: 6, scope: !4343)
!4371 = !DILocation(line: 2439, column: 2, scope: !4318)
!4372 = !DILocation(line: 2441, column: 29, scope: !4152)
!4373 = !DILocation(line: 2441, column: 33, scope: !4152)
!4374 = !DILocation(line: 2441, column: 8, scope: !4152)
!4375 = !DILocation(line: 2441, column: 6, scope: !4152)
!4376 = !DILocation(line: 2442, column: 17, scope: !4152)
!4377 = !DILocation(line: 2442, column: 20, scope: !4152)
!4378 = !DILocation(line: 2442, column: 27, scope: !4152)
!4379 = !DILocation(line: 2442, column: 26, scope: !4152)
!4380 = !DILocation(line: 2442, column: 32, scope: !4152)
!4381 = !DILocation(line: 2442, column: 3, scope: !4152)
!4382 = !DILocation(line: 2442, column: 6, scope: !4152)
!4383 = !DILocation(line: 2442, column: 15, scope: !4152)
!4384 = !DILocation(line: 2443, column: 1, scope: !4152)
!4385 = distinct !DISubprogram(name: "mpz_fdiv_r_2exp", scope: !3, file: !3, line: 2470, type: !3404, scopeLine: 2471, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4386 = !DILocalVariable(name: "r", arg: 1, scope: !4385, file: !3, line: 2470, type: !1838)
!4387 = !DILocation(line: 2470, column: 24, scope: !4385)
!4388 = !DILocalVariable(name: "u", arg: 2, scope: !4385, file: !3, line: 2470, type: !1950)
!4389 = !DILocation(line: 2470, column: 39, scope: !4385)
!4390 = !DILocalVariable(name: "cnt", arg: 3, scope: !4385, file: !3, line: 2470, type: !35)
!4391 = !DILocation(line: 2470, column: 54, scope: !4385)
!4392 = !DILocation(line: 2472, column: 19, scope: !4385)
!4393 = !DILocation(line: 2472, column: 22, scope: !4385)
!4394 = !DILocation(line: 2472, column: 25, scope: !4385)
!4395 = !DILocation(line: 2472, column: 3, scope: !4385)
!4396 = !DILocation(line: 2473, column: 1, scope: !4385)
!4397 = distinct !DISubprogram(name: "mpz_tdiv_r_2exp", scope: !3, file: !3, line: 2476, type: !3404, scopeLine: 2477, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4398 = !DILocalVariable(name: "r", arg: 1, scope: !4397, file: !3, line: 2476, type: !1838)
!4399 = !DILocation(line: 2476, column: 24, scope: !4397)
!4400 = !DILocalVariable(name: "u", arg: 2, scope: !4397, file: !3, line: 2476, type: !1950)
!4401 = !DILocation(line: 2476, column: 39, scope: !4397)
!4402 = !DILocalVariable(name: "cnt", arg: 3, scope: !4397, file: !3, line: 2476, type: !35)
!4403 = !DILocation(line: 2476, column: 54, scope: !4397)
!4404 = !DILocation(line: 2478, column: 19, scope: !4397)
!4405 = !DILocation(line: 2478, column: 22, scope: !4397)
!4406 = !DILocation(line: 2478, column: 25, scope: !4397)
!4407 = !DILocation(line: 2478, column: 3, scope: !4397)
!4408 = !DILocation(line: 2479, column: 1, scope: !4397)
!4409 = distinct !DISubprogram(name: "mpz_divexact", scope: !3, file: !3, line: 2482, type: !3029, scopeLine: 2483, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4410 = !DILocalVariable(name: "q", arg: 1, scope: !4409, file: !3, line: 2482, type: !1838)
!4411 = !DILocation(line: 2482, column: 21, scope: !4409)
!4412 = !DILocalVariable(name: "n", arg: 2, scope: !4409, file: !3, line: 2482, type: !1950)
!4413 = !DILocation(line: 2482, column: 36, scope: !4409)
!4414 = !DILocalVariable(name: "d", arg: 3, scope: !4409, file: !3, line: 2482, type: !1950)
!4415 = !DILocation(line: 2482, column: 51, scope: !4409)
!4416 = !DILocation(line: 2484, column: 3, scope: !4409)
!4417 = !DILocalVariable(name: "__cy", scope: !4418, file: !3, line: 2484, type: !27)
!4418 = distinct !DILexicalBlock(scope: !4409, file: !3, line: 2484, column: 3)
!4419 = !DILocation(line: 2484, column: 3, scope: !4418)
!4420 = !DILocation(line: 2485, column: 1, scope: !4409)
!4421 = distinct !DISubprogram(name: "mpz_divisible_p", scope: !3, file: !3, line: 2488, type: !2670, scopeLine: 2489, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4422 = !DILocalVariable(name: "n", arg: 1, scope: !4421, file: !3, line: 2488, type: !1950)
!4423 = !DILocation(line: 2488, column: 30, scope: !4421)
!4424 = !DILocalVariable(name: "d", arg: 2, scope: !4421, file: !3, line: 2488, type: !1950)
!4425 = !DILocation(line: 2488, column: 45, scope: !4421)
!4426 = !DILocation(line: 2490, column: 34, scope: !4421)
!4427 = !DILocation(line: 2490, column: 37, scope: !4421)
!4428 = !DILocation(line: 2490, column: 10, scope: !4421)
!4429 = !DILocation(line: 2490, column: 55, scope: !4421)
!4430 = !DILocation(line: 2490, column: 3, scope: !4421)
!4431 = distinct !DISubprogram(name: "mpz_congruent_p", scope: !3, file: !3, line: 2494, type: !4432, scopeLine: 2495, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4432 = !DISubroutineType(types: !4433)
!4433 = !{!34, !1950, !1950, !1950}
!4434 = !DILocalVariable(name: "a", arg: 1, scope: !4431, file: !3, line: 2494, type: !1950)
!4435 = !DILocation(line: 2494, column: 30, scope: !4431)
!4436 = !DILocalVariable(name: "b", arg: 2, scope: !4431, file: !3, line: 2494, type: !1950)
!4437 = !DILocation(line: 2494, column: 45, scope: !4431)
!4438 = !DILocalVariable(name: "m", arg: 3, scope: !4431, file: !3, line: 2494, type: !1950)
!4439 = !DILocation(line: 2494, column: 60, scope: !4431)
!4440 = !DILocalVariable(name: "t", scope: !4431, file: !3, line: 2496, type: !3319)
!4441 = !DILocation(line: 2496, column: 9, scope: !4431)
!4442 = !DILocalVariable(name: "res", scope: !4431, file: !3, line: 2497, type: !34)
!4443 = !DILocation(line: 2497, column: 7, scope: !4431)
!4444 = !DILocation(line: 2500, column: 16, scope: !4445)
!4445 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 2500, column: 7)
!4446 = !DILocation(line: 2500, column: 7, scope: !4445)
!4447 = !DILocation(line: 2500, column: 19, scope: !4445)
!4448 = !DILocation(line: 2500, column: 7, scope: !4431)
!4449 = !DILocation(line: 2501, column: 22, scope: !4445)
!4450 = !DILocation(line: 2501, column: 25, scope: !4445)
!4451 = !DILocation(line: 2501, column: 13, scope: !4445)
!4452 = !DILocation(line: 2501, column: 28, scope: !4445)
!4453 = !DILocation(line: 2501, column: 5, scope: !4445)
!4454 = !DILocation(line: 2503, column: 13, scope: !4431)
!4455 = !DILocation(line: 2503, column: 3, scope: !4431)
!4456 = !DILocation(line: 2504, column: 12, scope: !4431)
!4457 = !DILocation(line: 2504, column: 15, scope: !4431)
!4458 = !DILocation(line: 2504, column: 18, scope: !4431)
!4459 = !DILocation(line: 2504, column: 3, scope: !4431)
!4460 = !DILocation(line: 2505, column: 26, scope: !4431)
!4461 = !DILocation(line: 2505, column: 29, scope: !4431)
!4462 = !DILocation(line: 2505, column: 9, scope: !4431)
!4463 = !DILocation(line: 2505, column: 7, scope: !4431)
!4464 = !DILocation(line: 2506, column: 14, scope: !4431)
!4465 = !DILocation(line: 2506, column: 3, scope: !4431)
!4466 = !DILocation(line: 2508, column: 10, scope: !4431)
!4467 = !DILocation(line: 2508, column: 3, scope: !4431)
!4468 = !DILocation(line: 2509, column: 1, scope: !4431)
!4469 = distinct !DISubprogram(name: "mpz_cdiv_qr_ui", scope: !3, file: !3, line: 2568, type: !4470, scopeLine: 2569, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4470 = !DISubroutineType(types: !4471)
!4471 = !{!29, !1838, !1838, !1950, !29}
!4472 = !DILocalVariable(name: "q", arg: 1, scope: !4469, file: !3, line: 2568, type: !1838)
!4473 = !DILocation(line: 2568, column: 23, scope: !4469)
!4474 = !DILocalVariable(name: "r", arg: 2, scope: !4469, file: !3, line: 2568, type: !1838)
!4475 = !DILocation(line: 2568, column: 32, scope: !4469)
!4476 = !DILocalVariable(name: "n", arg: 3, scope: !4469, file: !3, line: 2568, type: !1950)
!4477 = !DILocation(line: 2568, column: 47, scope: !4469)
!4478 = !DILocalVariable(name: "d", arg: 4, scope: !4469, file: !3, line: 2568, type: !29)
!4479 = !DILocation(line: 2568, column: 64, scope: !4469)
!4480 = !DILocation(line: 2570, column: 25, scope: !4469)
!4481 = !DILocation(line: 2570, column: 28, scope: !4469)
!4482 = !DILocation(line: 2570, column: 31, scope: !4469)
!4483 = !DILocation(line: 2570, column: 34, scope: !4469)
!4484 = !DILocation(line: 2570, column: 10, scope: !4469)
!4485 = !DILocation(line: 2570, column: 3, scope: !4469)
!4486 = distinct !DISubprogram(name: "mpz_div_qr_ui", scope: !3, file: !3, line: 2512, type: !4487, scopeLine: 2514, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4487 = !DISubroutineType(types: !4488)
!4488 = !{!29, !1838, !1838, !1950, !29, !5}
!4489 = !DILocalVariable(name: "q", arg: 1, scope: !4486, file: !3, line: 2512, type: !1838)
!4490 = !DILocation(line: 2512, column: 22, scope: !4486)
!4491 = !DILocalVariable(name: "r", arg: 2, scope: !4486, file: !3, line: 2512, type: !1838)
!4492 = !DILocation(line: 2512, column: 31, scope: !4486)
!4493 = !DILocalVariable(name: "n", arg: 3, scope: !4486, file: !3, line: 2513, type: !1950)
!4494 = !DILocation(line: 2513, column: 21, scope: !4486)
!4495 = !DILocalVariable(name: "d", arg: 4, scope: !4486, file: !3, line: 2513, type: !29)
!4496 = !DILocation(line: 2513, column: 38, scope: !4486)
!4497 = !DILocalVariable(name: "mode", arg: 5, scope: !4486, file: !3, line: 2513, type: !5)
!4498 = !DILocation(line: 2513, column: 65, scope: !4486)
!4499 = !DILocalVariable(name: "ns", scope: !4486, file: !3, line: 2515, type: !184)
!4500 = !DILocation(line: 2515, column: 13, scope: !4486)
!4501 = !DILocalVariable(name: "qn", scope: !4486, file: !3, line: 2515, type: !184)
!4502 = !DILocation(line: 2515, column: 17, scope: !4486)
!4503 = !DILocalVariable(name: "qp", scope: !4486, file: !3, line: 2516, type: !31)
!4504 = !DILocation(line: 2516, column: 10, scope: !4486)
!4505 = !DILocalVariable(name: "rl", scope: !4486, file: !3, line: 2517, type: !27)
!4506 = !DILocation(line: 2517, column: 13, scope: !4486)
!4507 = !DILocalVariable(name: "rs", scope: !4486, file: !3, line: 2518, type: !184)
!4508 = !DILocation(line: 2518, column: 13, scope: !4486)
!4509 = !DILocation(line: 2520, column: 8, scope: !4486)
!4510 = !DILocation(line: 2520, column: 11, scope: !4486)
!4511 = !DILocation(line: 2520, column: 6, scope: !4486)
!4512 = !DILocation(line: 2521, column: 7, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 2521, column: 7)
!4514 = !DILocation(line: 2521, column: 10, scope: !4513)
!4515 = !DILocation(line: 2521, column: 7, scope: !4486)
!4516 = !DILocation(line: 2523, column: 11, scope: !4517)
!4517 = distinct !DILexicalBlock(scope: !4518, file: !3, line: 2523, column: 11)
!4518 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 2522, column: 5)
!4519 = !DILocation(line: 2523, column: 11, scope: !4518)
!4520 = !DILocation(line: 2524, column: 2, scope: !4517)
!4521 = !DILocation(line: 2524, column: 5, scope: !4517)
!4522 = !DILocation(line: 2524, column: 14, scope: !4517)
!4523 = !DILocation(line: 2525, column: 11, scope: !4524)
!4524 = distinct !DILexicalBlock(scope: !4518, file: !3, line: 2525, column: 11)
!4525 = !DILocation(line: 2525, column: 11, scope: !4518)
!4526 = !DILocation(line: 2526, column: 2, scope: !4524)
!4527 = !DILocation(line: 2526, column: 5, scope: !4524)
!4528 = !DILocation(line: 2526, column: 14, scope: !4524)
!4529 = !DILocation(line: 2527, column: 7, scope: !4518)
!4530 = !DILocation(line: 2530, column: 8, scope: !4486)
!4531 = !DILocation(line: 2530, column: 6, scope: !4486)
!4532 = !DILocation(line: 2531, column: 7, scope: !4533)
!4533 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 2531, column: 7)
!4534 = !DILocation(line: 2531, column: 7, scope: !4486)
!4535 = !DILocation(line: 2532, column: 10, scope: !4533)
!4536 = !DILocation(line: 2532, column: 8, scope: !4533)
!4537 = !DILocation(line: 2532, column: 5, scope: !4533)
!4538 = !DILocation(line: 2534, column: 8, scope: !4533)
!4539 = !DILocation(line: 2536, column: 22, scope: !4486)
!4540 = !DILocation(line: 2536, column: 26, scope: !4486)
!4541 = !DILocation(line: 2536, column: 29, scope: !4486)
!4542 = !DILocation(line: 2536, column: 36, scope: !4486)
!4543 = !DILocation(line: 2536, column: 40, scope: !4486)
!4544 = !DILocation(line: 2536, column: 8, scope: !4486)
!4545 = !DILocation(line: 2536, column: 6, scope: !4486)
!4546 = !DILocation(line: 2539, column: 8, scope: !4486)
!4547 = !DILocation(line: 2539, column: 11, scope: !4486)
!4548 = !DILocation(line: 2539, column: 6, scope: !4486)
!4549 = !DILocation(line: 2540, column: 9, scope: !4486)
!4550 = !DILocation(line: 2540, column: 12, scope: !4486)
!4551 = !DILocation(line: 2540, column: 8, scope: !4486)
!4552 = !DILocation(line: 2540, column: 20, scope: !4486)
!4553 = !DILocation(line: 2540, column: 19, scope: !4486)
!4554 = !DILocation(line: 2540, column: 25, scope: !4486)
!4555 = !DILocation(line: 2540, column: 6, scope: !4486)
!4556 = !DILocation(line: 2542, column: 7, scope: !4557)
!4557 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 2542, column: 7)
!4558 = !DILocation(line: 2542, column: 10, scope: !4557)
!4559 = !DILocation(line: 2542, column: 14, scope: !4557)
!4560 = !DILocation(line: 2542, column: 20, scope: !4557)
!4561 = !DILocation(line: 2542, column: 25, scope: !4557)
!4562 = !DILocation(line: 2542, column: 42, scope: !4557)
!4563 = !DILocation(line: 2542, column: 45, scope: !4557)
!4564 = !DILocation(line: 2542, column: 48, scope: !4557)
!4565 = !DILocation(line: 2543, column: 5, scope: !4557)
!4566 = !DILocation(line: 2543, column: 9, scope: !4557)
!4567 = !DILocation(line: 2543, column: 14, scope: !4557)
!4568 = !DILocation(line: 2543, column: 30, scope: !4557)
!4569 = !DILocation(line: 2543, column: 33, scope: !4557)
!4570 = !DILocation(line: 2543, column: 36, scope: !4557)
!4571 = !DILocation(line: 2542, column: 7, scope: !4486)
!4572 = !DILocation(line: 2545, column: 11, scope: !4573)
!4573 = distinct !DILexicalBlock(scope: !4574, file: !3, line: 2545, column: 11)
!4574 = distinct !DILexicalBlock(scope: !4557, file: !3, line: 2544, column: 5)
!4575 = !DILocation(line: 2545, column: 11, scope: !4574)
!4576 = !DILocation(line: 2546, column: 2, scope: !4573)
!4577 = !DILocalVariable(name: "__cy", scope: !4578, file: !3, line: 2546, type: !27)
!4578 = distinct !DILexicalBlock(scope: !4573, file: !3, line: 2546, column: 2)
!4579 = !DILocation(line: 2546, column: 2, scope: !4578)
!4580 = !DILocation(line: 2547, column: 12, scope: !4574)
!4581 = !DILocation(line: 2547, column: 16, scope: !4574)
!4582 = !DILocation(line: 2547, column: 14, scope: !4574)
!4583 = !DILocation(line: 2547, column: 10, scope: !4574)
!4584 = !DILocation(line: 2548, column: 13, scope: !4574)
!4585 = !DILocation(line: 2548, column: 12, scope: !4574)
!4586 = !DILocation(line: 2548, column: 10, scope: !4574)
!4587 = !DILocation(line: 2549, column: 5, scope: !4574)
!4588 = !DILocation(line: 2551, column: 7, scope: !4589)
!4589 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 2551, column: 7)
!4590 = !DILocation(line: 2551, column: 7, scope: !4486)
!4591 = !DILocation(line: 2553, column: 21, scope: !4592)
!4592 = distinct !DILexicalBlock(scope: !4589, file: !3, line: 2552, column: 5)
!4593 = !DILocation(line: 2553, column: 7, scope: !4592)
!4594 = !DILocation(line: 2553, column: 10, scope: !4592)
!4595 = !DILocation(line: 2553, column: 19, scope: !4592)
!4596 = !DILocation(line: 2554, column: 21, scope: !4592)
!4597 = !DILocation(line: 2554, column: 7, scope: !4592)
!4598 = !DILocation(line: 2554, column: 10, scope: !4592)
!4599 = !DILocation(line: 2554, column: 19, scope: !4592)
!4600 = !DILocation(line: 2555, column: 5, scope: !4592)
!4601 = !DILocation(line: 2556, column: 7, scope: !4602)
!4602 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 2556, column: 7)
!4603 = !DILocation(line: 2556, column: 7, scope: !4486)
!4604 = !DILocation(line: 2558, column: 14, scope: !4605)
!4605 = distinct !DILexicalBlock(scope: !4602, file: !3, line: 2557, column: 5)
!4606 = !DILocation(line: 2558, column: 17, scope: !4605)
!4607 = !DILocation(line: 2558, column: 19, scope: !4605)
!4608 = !DILocation(line: 2558, column: 23, scope: !4605)
!4609 = !DILocation(line: 2558, column: 13, scope: !4605)
!4610 = !DILocation(line: 2558, column: 10, scope: !4605)
!4611 = !DILocation(line: 2561, column: 22, scope: !4605)
!4612 = !DILocation(line: 2561, column: 25, scope: !4605)
!4613 = !DILocation(line: 2561, column: 21, scope: !4605)
!4614 = !DILocation(line: 2561, column: 34, scope: !4605)
!4615 = !DILocation(line: 2561, column: 32, scope: !4605)
!4616 = !DILocation(line: 2561, column: 39, scope: !4605)
!4617 = !DILocation(line: 2561, column: 7, scope: !4605)
!4618 = !DILocation(line: 2561, column: 10, scope: !4605)
!4619 = !DILocation(line: 2561, column: 19, scope: !4605)
!4620 = !DILocation(line: 2562, column: 5, scope: !4605)
!4621 = !DILocation(line: 2564, column: 10, scope: !4486)
!4622 = !DILocation(line: 2564, column: 3, scope: !4486)
!4623 = !DILocation(line: 2565, column: 1, scope: !4486)
!4624 = distinct !DISubprogram(name: "mpz_fdiv_qr_ui", scope: !3, file: !3, line: 2574, type: !4470, scopeLine: 2575, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4625 = !DILocalVariable(name: "q", arg: 1, scope: !4624, file: !3, line: 2574, type: !1838)
!4626 = !DILocation(line: 2574, column: 23, scope: !4624)
!4627 = !DILocalVariable(name: "r", arg: 2, scope: !4624, file: !3, line: 2574, type: !1838)
!4628 = !DILocation(line: 2574, column: 32, scope: !4624)
!4629 = !DILocalVariable(name: "n", arg: 3, scope: !4624, file: !3, line: 2574, type: !1950)
!4630 = !DILocation(line: 2574, column: 47, scope: !4624)
!4631 = !DILocalVariable(name: "d", arg: 4, scope: !4624, file: !3, line: 2574, type: !29)
!4632 = !DILocation(line: 2574, column: 64, scope: !4624)
!4633 = !DILocation(line: 2576, column: 25, scope: !4624)
!4634 = !DILocation(line: 2576, column: 28, scope: !4624)
!4635 = !DILocation(line: 2576, column: 31, scope: !4624)
!4636 = !DILocation(line: 2576, column: 34, scope: !4624)
!4637 = !DILocation(line: 2576, column: 10, scope: !4624)
!4638 = !DILocation(line: 2576, column: 3, scope: !4624)
!4639 = distinct !DISubprogram(name: "mpz_tdiv_qr_ui", scope: !3, file: !3, line: 2580, type: !4470, scopeLine: 2581, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4640 = !DILocalVariable(name: "q", arg: 1, scope: !4639, file: !3, line: 2580, type: !1838)
!4641 = !DILocation(line: 2580, column: 23, scope: !4639)
!4642 = !DILocalVariable(name: "r", arg: 2, scope: !4639, file: !3, line: 2580, type: !1838)
!4643 = !DILocation(line: 2580, column: 32, scope: !4639)
!4644 = !DILocalVariable(name: "n", arg: 3, scope: !4639, file: !3, line: 2580, type: !1950)
!4645 = !DILocation(line: 2580, column: 47, scope: !4639)
!4646 = !DILocalVariable(name: "d", arg: 4, scope: !4639, file: !3, line: 2580, type: !29)
!4647 = !DILocation(line: 2580, column: 64, scope: !4639)
!4648 = !DILocation(line: 2582, column: 25, scope: !4639)
!4649 = !DILocation(line: 2582, column: 28, scope: !4639)
!4650 = !DILocation(line: 2582, column: 31, scope: !4639)
!4651 = !DILocation(line: 2582, column: 34, scope: !4639)
!4652 = !DILocation(line: 2582, column: 10, scope: !4639)
!4653 = !DILocation(line: 2582, column: 3, scope: !4639)
!4654 = distinct !DISubprogram(name: "mpz_cdiv_q_ui", scope: !3, file: !3, line: 2586, type: !4655, scopeLine: 2587, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4655 = !DISubroutineType(types: !4656)
!4656 = !{!29, !1838, !1950, !29}
!4657 = !DILocalVariable(name: "q", arg: 1, scope: !4654, file: !3, line: 2586, type: !1838)
!4658 = !DILocation(line: 2586, column: 22, scope: !4654)
!4659 = !DILocalVariable(name: "n", arg: 2, scope: !4654, file: !3, line: 2586, type: !1950)
!4660 = !DILocation(line: 2586, column: 37, scope: !4654)
!4661 = !DILocalVariable(name: "d", arg: 3, scope: !4654, file: !3, line: 2586, type: !29)
!4662 = !DILocation(line: 2586, column: 54, scope: !4654)
!4663 = !DILocation(line: 2588, column: 25, scope: !4654)
!4664 = !DILocation(line: 2588, column: 34, scope: !4654)
!4665 = !DILocation(line: 2588, column: 37, scope: !4654)
!4666 = !DILocation(line: 2588, column: 10, scope: !4654)
!4667 = !DILocation(line: 2588, column: 3, scope: !4654)
!4668 = distinct !DISubprogram(name: "mpz_fdiv_q_ui", scope: !3, file: !3, line: 2592, type: !4655, scopeLine: 2593, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4669 = !DILocalVariable(name: "q", arg: 1, scope: !4668, file: !3, line: 2592, type: !1838)
!4670 = !DILocation(line: 2592, column: 22, scope: !4668)
!4671 = !DILocalVariable(name: "n", arg: 2, scope: !4668, file: !3, line: 2592, type: !1950)
!4672 = !DILocation(line: 2592, column: 37, scope: !4668)
!4673 = !DILocalVariable(name: "d", arg: 3, scope: !4668, file: !3, line: 2592, type: !29)
!4674 = !DILocation(line: 2592, column: 54, scope: !4668)
!4675 = !DILocation(line: 2594, column: 25, scope: !4668)
!4676 = !DILocation(line: 2594, column: 34, scope: !4668)
!4677 = !DILocation(line: 2594, column: 37, scope: !4668)
!4678 = !DILocation(line: 2594, column: 10, scope: !4668)
!4679 = !DILocation(line: 2594, column: 3, scope: !4668)
!4680 = distinct !DISubprogram(name: "mpz_tdiv_q_ui", scope: !3, file: !3, line: 2598, type: !4655, scopeLine: 2599, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4681 = !DILocalVariable(name: "q", arg: 1, scope: !4680, file: !3, line: 2598, type: !1838)
!4682 = !DILocation(line: 2598, column: 22, scope: !4680)
!4683 = !DILocalVariable(name: "n", arg: 2, scope: !4680, file: !3, line: 2598, type: !1950)
!4684 = !DILocation(line: 2598, column: 37, scope: !4680)
!4685 = !DILocalVariable(name: "d", arg: 3, scope: !4680, file: !3, line: 2598, type: !29)
!4686 = !DILocation(line: 2598, column: 54, scope: !4680)
!4687 = !DILocation(line: 2600, column: 25, scope: !4680)
!4688 = !DILocation(line: 2600, column: 34, scope: !4680)
!4689 = !DILocation(line: 2600, column: 37, scope: !4680)
!4690 = !DILocation(line: 2600, column: 10, scope: !4680)
!4691 = !DILocation(line: 2600, column: 3, scope: !4680)
!4692 = distinct !DISubprogram(name: "mpz_cdiv_r_ui", scope: !3, file: !3, line: 2604, type: !4655, scopeLine: 2605, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4693 = !DILocalVariable(name: "r", arg: 1, scope: !4692, file: !3, line: 2604, type: !1838)
!4694 = !DILocation(line: 2604, column: 22, scope: !4692)
!4695 = !DILocalVariable(name: "n", arg: 2, scope: !4692, file: !3, line: 2604, type: !1950)
!4696 = !DILocation(line: 2604, column: 37, scope: !4692)
!4697 = !DILocalVariable(name: "d", arg: 3, scope: !4692, file: !3, line: 2604, type: !29)
!4698 = !DILocation(line: 2604, column: 54, scope: !4692)
!4699 = !DILocation(line: 2606, column: 31, scope: !4692)
!4700 = !DILocation(line: 2606, column: 34, scope: !4692)
!4701 = !DILocation(line: 2606, column: 37, scope: !4692)
!4702 = !DILocation(line: 2606, column: 10, scope: !4692)
!4703 = !DILocation(line: 2606, column: 3, scope: !4692)
!4704 = distinct !DISubprogram(name: "mpz_fdiv_r_ui", scope: !3, file: !3, line: 2609, type: !4655, scopeLine: 2610, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4705 = !DILocalVariable(name: "r", arg: 1, scope: !4704, file: !3, line: 2609, type: !1838)
!4706 = !DILocation(line: 2609, column: 22, scope: !4704)
!4707 = !DILocalVariable(name: "n", arg: 2, scope: !4704, file: !3, line: 2609, type: !1950)
!4708 = !DILocation(line: 2609, column: 37, scope: !4704)
!4709 = !DILocalVariable(name: "d", arg: 3, scope: !4704, file: !3, line: 2609, type: !29)
!4710 = !DILocation(line: 2609, column: 54, scope: !4704)
!4711 = !DILocation(line: 2611, column: 31, scope: !4704)
!4712 = !DILocation(line: 2611, column: 34, scope: !4704)
!4713 = !DILocation(line: 2611, column: 37, scope: !4704)
!4714 = !DILocation(line: 2611, column: 10, scope: !4704)
!4715 = !DILocation(line: 2611, column: 3, scope: !4704)
!4716 = distinct !DISubprogram(name: "mpz_tdiv_r_ui", scope: !3, file: !3, line: 2614, type: !4655, scopeLine: 2615, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4717 = !DILocalVariable(name: "r", arg: 1, scope: !4716, file: !3, line: 2614, type: !1838)
!4718 = !DILocation(line: 2614, column: 22, scope: !4716)
!4719 = !DILocalVariable(name: "n", arg: 2, scope: !4716, file: !3, line: 2614, type: !1950)
!4720 = !DILocation(line: 2614, column: 37, scope: !4716)
!4721 = !DILocalVariable(name: "d", arg: 3, scope: !4716, file: !3, line: 2614, type: !29)
!4722 = !DILocation(line: 2614, column: 54, scope: !4716)
!4723 = !DILocation(line: 2616, column: 31, scope: !4716)
!4724 = !DILocation(line: 2616, column: 34, scope: !4716)
!4725 = !DILocation(line: 2616, column: 37, scope: !4716)
!4726 = !DILocation(line: 2616, column: 10, scope: !4716)
!4727 = !DILocation(line: 2616, column: 3, scope: !4716)
!4728 = distinct !DISubprogram(name: "mpz_cdiv_ui", scope: !3, file: !3, line: 2620, type: !4729, scopeLine: 2621, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4729 = !DISubroutineType(types: !4730)
!4730 = !{!29, !1950, !29}
!4731 = !DILocalVariable(name: "n", arg: 1, scope: !4728, file: !3, line: 2620, type: !1950)
!4732 = !DILocation(line: 2620, column: 26, scope: !4728)
!4733 = !DILocalVariable(name: "d", arg: 2, scope: !4728, file: !3, line: 2620, type: !29)
!4734 = !DILocation(line: 2620, column: 43, scope: !4728)
!4735 = !DILocation(line: 2622, column: 37, scope: !4728)
!4736 = !DILocation(line: 2622, column: 40, scope: !4728)
!4737 = !DILocation(line: 2622, column: 10, scope: !4728)
!4738 = !DILocation(line: 2622, column: 3, scope: !4728)
!4739 = distinct !DISubprogram(name: "mpz_fdiv_ui", scope: !3, file: !3, line: 2626, type: !4729, scopeLine: 2627, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4740 = !DILocalVariable(name: "n", arg: 1, scope: !4739, file: !3, line: 2626, type: !1950)
!4741 = !DILocation(line: 2626, column: 26, scope: !4739)
!4742 = !DILocalVariable(name: "d", arg: 2, scope: !4739, file: !3, line: 2626, type: !29)
!4743 = !DILocation(line: 2626, column: 43, scope: !4739)
!4744 = !DILocation(line: 2628, column: 37, scope: !4739)
!4745 = !DILocation(line: 2628, column: 40, scope: !4739)
!4746 = !DILocation(line: 2628, column: 10, scope: !4739)
!4747 = !DILocation(line: 2628, column: 3, scope: !4739)
!4748 = distinct !DISubprogram(name: "mpz_tdiv_ui", scope: !3, file: !3, line: 2632, type: !4729, scopeLine: 2633, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4749 = !DILocalVariable(name: "n", arg: 1, scope: !4748, file: !3, line: 2632, type: !1950)
!4750 = !DILocation(line: 2632, column: 26, scope: !4748)
!4751 = !DILocalVariable(name: "d", arg: 2, scope: !4748, file: !3, line: 2632, type: !29)
!4752 = !DILocation(line: 2632, column: 43, scope: !4748)
!4753 = !DILocation(line: 2634, column: 37, scope: !4748)
!4754 = !DILocation(line: 2634, column: 40, scope: !4748)
!4755 = !DILocation(line: 2634, column: 10, scope: !4748)
!4756 = !DILocation(line: 2634, column: 3, scope: !4748)
!4757 = distinct !DISubprogram(name: "mpz_mod_ui", scope: !3, file: !3, line: 2638, type: !4655, scopeLine: 2639, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4758 = !DILocalVariable(name: "r", arg: 1, scope: !4757, file: !3, line: 2638, type: !1838)
!4759 = !DILocation(line: 2638, column: 19, scope: !4757)
!4760 = !DILocalVariable(name: "n", arg: 2, scope: !4757, file: !3, line: 2638, type: !1950)
!4761 = !DILocation(line: 2638, column: 34, scope: !4757)
!4762 = !DILocalVariable(name: "d", arg: 3, scope: !4757, file: !3, line: 2638, type: !29)
!4763 = !DILocation(line: 2638, column: 51, scope: !4757)
!4764 = !DILocation(line: 2640, column: 31, scope: !4757)
!4765 = !DILocation(line: 2640, column: 34, scope: !4757)
!4766 = !DILocation(line: 2640, column: 37, scope: !4757)
!4767 = !DILocation(line: 2640, column: 10, scope: !4757)
!4768 = !DILocation(line: 2640, column: 3, scope: !4757)
!4769 = distinct !DISubprogram(name: "mpz_divexact_ui", scope: !3, file: !3, line: 2644, type: !2842, scopeLine: 2645, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4770 = !DILocalVariable(name: "q", arg: 1, scope: !4769, file: !3, line: 2644, type: !1838)
!4771 = !DILocation(line: 2644, column: 24, scope: !4769)
!4772 = !DILocalVariable(name: "n", arg: 2, scope: !4769, file: !3, line: 2644, type: !1950)
!4773 = !DILocation(line: 2644, column: 39, scope: !4769)
!4774 = !DILocalVariable(name: "d", arg: 3, scope: !4769, file: !3, line: 2644, type: !29)
!4775 = !DILocation(line: 2644, column: 56, scope: !4769)
!4776 = !DILocation(line: 2646, column: 3, scope: !4769)
!4777 = !DILocalVariable(name: "__cy", scope: !4778, file: !3, line: 2646, type: !27)
!4778 = distinct !DILexicalBlock(scope: !4769, file: !3, line: 2646, column: 3)
!4779 = !DILocation(line: 2646, column: 3, scope: !4778)
!4780 = !DILocation(line: 2647, column: 1, scope: !4769)
!4781 = distinct !DISubprogram(name: "mpz_divisible_ui_p", scope: !3, file: !3, line: 2650, type: !2632, scopeLine: 2651, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4782 = !DILocalVariable(name: "n", arg: 1, scope: !4781, file: !3, line: 2650, type: !1950)
!4783 = !DILocation(line: 2650, column: 33, scope: !4781)
!4784 = !DILocalVariable(name: "d", arg: 2, scope: !4781, file: !3, line: 2650, type: !29)
!4785 = !DILocation(line: 2650, column: 50, scope: !4781)
!4786 = !DILocation(line: 2652, column: 37, scope: !4781)
!4787 = !DILocation(line: 2652, column: 40, scope: !4781)
!4788 = !DILocation(line: 2652, column: 10, scope: !4781)
!4789 = !DILocation(line: 2652, column: 58, scope: !4781)
!4790 = !DILocation(line: 2652, column: 3, scope: !4781)
!4791 = distinct !DISubprogram(name: "mpz_gcd_ui", scope: !3, file: !3, line: 2701, type: !4655, scopeLine: 2702, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4792 = !DILocalVariable(name: "g", arg: 1, scope: !4791, file: !3, line: 2701, type: !1838)
!4793 = !DILocation(line: 2701, column: 19, scope: !4791)
!4794 = !DILocalVariable(name: "u", arg: 2, scope: !4791, file: !3, line: 2701, type: !1950)
!4795 = !DILocation(line: 2701, column: 34, scope: !4791)
!4796 = !DILocalVariable(name: "v", arg: 3, scope: !4791, file: !3, line: 2701, type: !29)
!4797 = !DILocation(line: 2701, column: 51, scope: !4791)
!4798 = !DILocalVariable(name: "un", scope: !4791, file: !3, line: 2703, type: !184)
!4799 = !DILocation(line: 2703, column: 13, scope: !4791)
!4800 = !DILocation(line: 2705, column: 7, scope: !4801)
!4801 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 2705, column: 7)
!4802 = !DILocation(line: 2705, column: 9, scope: !4801)
!4803 = !DILocation(line: 2705, column: 7, scope: !4791)
!4804 = !DILocation(line: 2707, column: 11, scope: !4805)
!4805 = distinct !DILexicalBlock(scope: !4806, file: !3, line: 2707, column: 11)
!4806 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 2706, column: 5)
!4807 = !DILocation(line: 2707, column: 11, scope: !4806)
!4808 = !DILocation(line: 2708, column: 11, scope: !4805)
!4809 = !DILocation(line: 2708, column: 14, scope: !4805)
!4810 = !DILocation(line: 2708, column: 2, scope: !4805)
!4811 = !DILocation(line: 2709, column: 5, scope: !4806)
!4812 = !DILocation(line: 2712, column: 12, scope: !4813)
!4813 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 2711, column: 5)
!4814 = !DILocation(line: 2712, column: 10, scope: !4813)
!4815 = !DILocation(line: 2713, column: 11, scope: !4816)
!4816 = distinct !DILexicalBlock(scope: !4813, file: !3, line: 2713, column: 11)
!4817 = !DILocation(line: 2713, column: 14, scope: !4816)
!4818 = !DILocation(line: 2713, column: 11, scope: !4813)
!4819 = !DILocation(line: 2714, column: 38, scope: !4816)
!4820 = !DILocation(line: 2714, column: 41, scope: !4816)
!4821 = !DILocation(line: 2714, column: 48, scope: !4816)
!4822 = !DILocation(line: 2714, column: 52, scope: !4816)
!4823 = !DILocation(line: 2714, column: 18, scope: !4816)
!4824 = !DILocation(line: 2714, column: 56, scope: !4816)
!4825 = !DILocation(line: 2714, column: 6, scope: !4816)
!4826 = !DILocation(line: 2714, column: 4, scope: !4816)
!4827 = !DILocation(line: 2714, column: 2, scope: !4816)
!4828 = !DILocation(line: 2716, column: 11, scope: !4829)
!4829 = distinct !DILexicalBlock(scope: !4813, file: !3, line: 2716, column: 11)
!4830 = !DILocation(line: 2716, column: 11, scope: !4813)
!4831 = !DILocation(line: 2717, column: 14, scope: !4829)
!4832 = !DILocation(line: 2717, column: 17, scope: !4829)
!4833 = !DILocation(line: 2717, column: 2, scope: !4829)
!4834 = !DILocation(line: 2720, column: 10, scope: !4791)
!4835 = !DILocation(line: 2720, column: 3, scope: !4791)
!4836 = distinct !DISubprogram(name: "mpn_gcd_11", scope: !3, file: !3, line: 2658, type: !1080, scopeLine: 2659, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4837 = !DILocalVariable(name: "u", arg: 1, scope: !4836, file: !3, line: 2658, type: !27)
!4838 = !DILocation(line: 2658, column: 23, scope: !4836)
!4839 = !DILocalVariable(name: "v", arg: 2, scope: !4836, file: !3, line: 2658, type: !27)
!4840 = !DILocation(line: 2658, column: 36, scope: !4836)
!4841 = !DILocalVariable(name: "shift", scope: !4836, file: !3, line: 2660, type: !6)
!4842 = !DILocation(line: 2660, column: 12, scope: !4836)
!4843 = !DILocation(line: 2664, column: 7, scope: !4844)
!4844 = distinct !DILexicalBlock(scope: !4836, file: !3, line: 2664, column: 7)
!4845 = !DILocation(line: 2664, column: 9, scope: !4844)
!4846 = !DILocation(line: 2664, column: 7, scope: !4836)
!4847 = !DILocation(line: 2665, column: 12, scope: !4844)
!4848 = !DILocation(line: 2665, column: 5, scope: !4844)
!4849 = !DILocation(line: 2666, column: 12, scope: !4850)
!4850 = distinct !DILexicalBlock(scope: !4844, file: !3, line: 2666, column: 12)
!4851 = !DILocation(line: 2666, column: 14, scope: !4850)
!4852 = !DILocation(line: 2666, column: 12, scope: !4844)
!4853 = !DILocation(line: 2667, column: 12, scope: !4850)
!4854 = !DILocation(line: 2667, column: 5, scope: !4850)
!4855 = !DILocation(line: 2669, column: 3, scope: !4836)
!4856 = !DILocalVariable(name: "__ctz_x", scope: !4857, file: !3, line: 2669, type: !27)
!4857 = distinct !DILexicalBlock(scope: !4836, file: !3, line: 2669, column: 3)
!4858 = !DILocation(line: 2669, column: 3, scope: !4857)
!4859 = !DILocalVariable(name: "__ctz_c", scope: !4857, file: !3, line: 2669, type: !6)
!4860 = !DILocalVariable(name: "__clz_x", scope: !4861, file: !3, line: 2669, type: !27)
!4861 = distinct !DILexicalBlock(scope: !4857, file: !3, line: 2669, column: 3)
!4862 = !DILocation(line: 2669, column: 3, scope: !4861)
!4863 = !DILocalVariable(name: "__clz_c", scope: !4861, file: !3, line: 2669, type: !6)
!4864 = !DILocation(line: 2669, column: 3, scope: !4865)
!4865 = distinct !DILexicalBlock(scope: !4861, file: !3, line: 2669, column: 3)
!4866 = !DILocation(line: 2669, column: 3, scope: !4867)
!4867 = distinct !DILexicalBlock(scope: !4865, file: !3, line: 2669, column: 3)
!4868 = distinct !{!4868, !4864, !4864}
!4869 = !DILocation(line: 2669, column: 3, scope: !4870)
!4870 = distinct !DILexicalBlock(scope: !4871, file: !3, line: 2669, column: 3)
!4871 = distinct !DILexicalBlock(scope: !4861, file: !3, line: 2669, column: 3)
!4872 = !DILocation(line: 2669, column: 3, scope: !4871)
!4873 = distinct !{!4873, !4872, !4872}
!4874 = !DILocation(line: 2671, column: 9, scope: !4836)
!4875 = !DILocation(line: 2671, column: 5, scope: !4836)
!4876 = !DILocation(line: 2672, column: 9, scope: !4836)
!4877 = !DILocation(line: 2672, column: 5, scope: !4836)
!4878 = !DILocation(line: 2674, column: 9, scope: !4879)
!4879 = distinct !DILexicalBlock(scope: !4836, file: !3, line: 2674, column: 8)
!4880 = !DILocation(line: 2674, column: 11, scope: !4879)
!4881 = !DILocation(line: 2674, column: 16, scope: !4879)
!4882 = !DILocation(line: 2674, column: 8, scope: !4836)
!4883 = !DILocation(line: 2675, column: 5, scope: !4879)
!4884 = !DILocalVariable(name: "__mp_limb_t_swap__tmp", scope: !4885, file: !3, line: 2675, type: !27)
!4885 = distinct !DILexicalBlock(scope: !4879, file: !3, line: 2675, column: 5)
!4886 = !DILocation(line: 2675, column: 5, scope: !4885)
!4887 = !DILocation(line: 2677, column: 3, scope: !4836)
!4888 = !DILocation(line: 2677, column: 12, scope: !4836)
!4889 = !DILocation(line: 2677, column: 14, scope: !4836)
!4890 = !DILocation(line: 2677, column: 19, scope: !4836)
!4891 = !DILocation(line: 2678, column: 7, scope: !4836)
!4892 = distinct !{!4892, !4887, !4893}
!4893 = !DILocation(line: 2678, column: 11, scope: !4836)
!4894 = !DILocation(line: 2680, column: 3, scope: !4836)
!4895 = !DILocation(line: 2680, column: 10, scope: !4836)
!4896 = !DILocation(line: 2680, column: 15, scope: !4836)
!4897 = !DILocation(line: 2680, column: 12, scope: !4836)
!4898 = !DILocation(line: 2682, column: 11, scope: !4899)
!4899 = distinct !DILexicalBlock(scope: !4900, file: !3, line: 2682, column: 11)
!4900 = distinct !DILexicalBlock(scope: !4836, file: !3, line: 2681, column: 5)
!4901 = !DILocation(line: 2682, column: 15, scope: !4899)
!4902 = !DILocation(line: 2682, column: 13, scope: !4899)
!4903 = !DILocation(line: 2682, column: 11, scope: !4900)
!4904 = !DILocation(line: 2684, column: 9, scope: !4905)
!4905 = distinct !DILexicalBlock(scope: !4899, file: !3, line: 2683, column: 2)
!4906 = !DILocation(line: 2684, column: 6, scope: !4905)
!4907 = !DILocation(line: 2685, column: 4, scope: !4905)
!4908 = !DILocation(line: 2686, column: 8, scope: !4905)
!4909 = !DILocation(line: 2686, column: 6, scope: !4905)
!4910 = !DILocation(line: 2687, column: 13, scope: !4905)
!4911 = !DILocation(line: 2687, column: 15, scope: !4905)
!4912 = !DILocation(line: 2687, column: 20, scope: !4905)
!4913 = distinct !{!4913, !4907, !4914}
!4914 = !DILocation(line: 2687, column: 24, scope: !4905)
!4915 = !DILocation(line: 2688, column: 2, scope: !4905)
!4916 = !DILocation(line: 2691, column: 9, scope: !4917)
!4917 = distinct !DILexicalBlock(scope: !4899, file: !3, line: 2690, column: 2)
!4918 = !DILocation(line: 2691, column: 6, scope: !4917)
!4919 = !DILocation(line: 2692, column: 4, scope: !4917)
!4920 = !DILocation(line: 2693, column: 8, scope: !4917)
!4921 = !DILocation(line: 2693, column: 6, scope: !4917)
!4922 = !DILocation(line: 2694, column: 13, scope: !4917)
!4923 = !DILocation(line: 2694, column: 15, scope: !4917)
!4924 = !DILocation(line: 2694, column: 20, scope: !4917)
!4925 = distinct !{!4925, !4919, !4926}
!4926 = !DILocation(line: 2694, column: 24, scope: !4917)
!4927 = distinct !{!4927, !4894, !4928}
!4928 = !DILocation(line: 2696, column: 5, scope: !4836)
!4929 = !DILocation(line: 2697, column: 10, scope: !4836)
!4930 = !DILocation(line: 2697, column: 15, scope: !4836)
!4931 = !DILocation(line: 2697, column: 12, scope: !4836)
!4932 = !DILocation(line: 2697, column: 3, scope: !4836)
!4933 = !DILocation(line: 2698, column: 1, scope: !4836)
!4934 = distinct !DISubprogram(name: "mpn_div_qr_1", scope: !3, file: !3, line: 894, type: !285, scopeLine: 895, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!4935 = !DILocalVariable(name: "qp", arg: 1, scope: !4934, file: !3, line: 894, type: !31)
!4936 = !DILocation(line: 894, column: 22, scope: !4934)
!4937 = !DILocalVariable(name: "np", arg: 2, scope: !4934, file: !3, line: 894, type: !181)
!4938 = !DILocation(line: 894, column: 36, scope: !4934)
!4939 = !DILocalVariable(name: "nn", arg: 3, scope: !4934, file: !3, line: 894, type: !184)
!4940 = !DILocation(line: 894, column: 50, scope: !4934)
!4941 = !DILocalVariable(name: "d", arg: 4, scope: !4934, file: !3, line: 894, type: !27)
!4942 = !DILocation(line: 894, column: 64, scope: !4934)
!4943 = !DILocation(line: 899, column: 8, scope: !4944)
!4944 = distinct !DILexicalBlock(scope: !4934, file: !3, line: 899, column: 7)
!4945 = !DILocation(line: 899, column: 13, scope: !4944)
!4946 = !DILocation(line: 899, column: 14, scope: !4944)
!4947 = !DILocation(line: 899, column: 10, scope: !4944)
!4948 = !DILocation(line: 899, column: 19, scope: !4944)
!4949 = !DILocation(line: 899, column: 7, scope: !4934)
!4950 = !DILocalVariable(name: "r", scope: !4951, file: !3, line: 901, type: !27)
!4951 = distinct !DILexicalBlock(scope: !4944, file: !3, line: 900, column: 5)
!4952 = !DILocation(line: 901, column: 17, scope: !4951)
!4953 = !DILocation(line: 901, column: 21, scope: !4951)
!4954 = !DILocation(line: 901, column: 30, scope: !4951)
!4955 = !DILocation(line: 901, column: 31, scope: !4951)
!4956 = !DILocation(line: 901, column: 27, scope: !4951)
!4957 = !DILocation(line: 902, column: 11, scope: !4958)
!4958 = distinct !DILexicalBlock(scope: !4951, file: !3, line: 902, column: 11)
!4959 = !DILocation(line: 902, column: 11, scope: !4951)
!4960 = !DILocation(line: 904, column: 8, scope: !4961)
!4961 = distinct !DILexicalBlock(scope: !4962, file: !3, line: 904, column: 8)
!4962 = distinct !DILexicalBlock(scope: !4958, file: !3, line: 903, column: 2)
!4963 = !DILocation(line: 904, column: 10, scope: !4961)
!4964 = !DILocation(line: 904, column: 8, scope: !4962)
!4965 = !DILocation(line: 905, column: 17, scope: !4961)
!4966 = !DILocation(line: 905, column: 21, scope: !4961)
!4967 = !DILocation(line: 905, column: 25, scope: !4961)
!4968 = !DILocation(line: 905, column: 6, scope: !4961)
!4969 = !DILocalVariable(name: "shift", scope: !4970, file: !3, line: 908, type: !6)
!4970 = distinct !DILexicalBlock(scope: !4961, file: !3, line: 907, column: 6)
!4971 = !DILocation(line: 908, column: 17, scope: !4970)
!4972 = !DILocation(line: 909, column: 8, scope: !4970)
!4973 = !DILocalVariable(name: "__ctz_x", scope: !4974, file: !3, line: 909, type: !27)
!4974 = distinct !DILexicalBlock(scope: !4970, file: !3, line: 909, column: 8)
!4975 = !DILocation(line: 909, column: 8, scope: !4974)
!4976 = !DILocalVariable(name: "__ctz_c", scope: !4974, file: !3, line: 909, type: !6)
!4977 = !DILocalVariable(name: "__clz_x", scope: !4978, file: !3, line: 909, type: !27)
!4978 = distinct !DILexicalBlock(scope: !4974, file: !3, line: 909, column: 8)
!4979 = !DILocation(line: 909, column: 8, scope: !4978)
!4980 = !DILocalVariable(name: "__clz_c", scope: !4978, file: !3, line: 909, type: !6)
!4981 = !DILocation(line: 909, column: 8, scope: !4982)
!4982 = distinct !DILexicalBlock(scope: !4978, file: !3, line: 909, column: 8)
!4983 = !DILocation(line: 909, column: 8, scope: !4984)
!4984 = distinct !DILexicalBlock(scope: !4982, file: !3, line: 909, column: 8)
!4985 = distinct !{!4985, !4981, !4981}
!4986 = !DILocation(line: 909, column: 8, scope: !4987)
!4987 = distinct !DILexicalBlock(scope: !4988, file: !3, line: 909, column: 8)
!4988 = distinct !DILexicalBlock(scope: !4978, file: !3, line: 909, column: 8)
!4989 = !DILocation(line: 909, column: 8, scope: !4988)
!4990 = distinct !{!4990, !4989, !4989}
!4991 = !DILocation(line: 910, column: 20, scope: !4970)
!4992 = !DILocation(line: 910, column: 24, scope: !4970)
!4993 = !DILocation(line: 910, column: 28, scope: !4970)
!4994 = !DILocation(line: 910, column: 32, scope: !4970)
!4995 = !DILocation(line: 910, column: 8, scope: !4970)
!4996 = !DILocation(line: 912, column: 2, scope: !4962)
!4997 = !DILocation(line: 913, column: 14, scope: !4951)
!4998 = !DILocation(line: 913, column: 7, scope: !4951)
!4999 = !DILocalVariable(name: "inv", scope: !5000, file: !3, line: 917, type: !1481)
!5000 = distinct !DILexicalBlock(scope: !4944, file: !3, line: 916, column: 5)
!5001 = !DILocation(line: 917, column: 30, scope: !5000)
!5002 = !DILocation(line: 918, column: 34, scope: !5000)
!5003 = !DILocation(line: 918, column: 7, scope: !5000)
!5004 = !DILocation(line: 919, column: 35, scope: !5000)
!5005 = !DILocation(line: 919, column: 39, scope: !5000)
!5006 = !DILocation(line: 919, column: 43, scope: !5000)
!5007 = !DILocation(line: 919, column: 14, scope: !5000)
!5008 = !DILocation(line: 919, column: 7, scope: !5000)
!5009 = !DILocation(line: 921, column: 1, scope: !4934)
!5010 = distinct !DISubprogram(name: "mpz_gcd", scope: !3, file: !3, line: 2737, type: !3029, scopeLine: 2738, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!5011 = !DILocalVariable(name: "g", arg: 1, scope: !5010, file: !3, line: 2737, type: !1838)
!5012 = !DILocation(line: 2737, column: 16, scope: !5010)
!5013 = !DILocalVariable(name: "u", arg: 2, scope: !5010, file: !3, line: 2737, type: !1950)
!5014 = !DILocation(line: 2737, column: 31, scope: !5010)
!5015 = !DILocalVariable(name: "v", arg: 3, scope: !5010, file: !3, line: 2737, type: !1950)
!5016 = !DILocation(line: 2737, column: 46, scope: !5010)
!5017 = !DILocalVariable(name: "tu", scope: !5010, file: !3, line: 2739, type: !3319)
!5018 = !DILocation(line: 2739, column: 9, scope: !5010)
!5019 = !DILocalVariable(name: "tv", scope: !5010, file: !3, line: 2739, type: !3319)
!5020 = !DILocation(line: 2739, column: 13, scope: !5010)
!5021 = !DILocalVariable(name: "uz", scope: !5010, file: !3, line: 2740, type: !35)
!5022 = !DILocation(line: 2740, column: 15, scope: !5010)
!5023 = !DILocalVariable(name: "vz", scope: !5010, file: !3, line: 2740, type: !35)
!5024 = !DILocation(line: 2740, column: 19, scope: !5010)
!5025 = !DILocalVariable(name: "gz", scope: !5010, file: !3, line: 2740, type: !35)
!5026 = !DILocation(line: 2740, column: 23, scope: !5010)
!5027 = !DILocation(line: 2742, column: 7, scope: !5028)
!5028 = distinct !DILexicalBlock(scope: !5010, file: !3, line: 2742, column: 7)
!5029 = !DILocation(line: 2742, column: 10, scope: !5028)
!5030 = !DILocation(line: 2742, column: 19, scope: !5028)
!5031 = !DILocation(line: 2742, column: 7, scope: !5010)
!5032 = !DILocation(line: 2744, column: 16, scope: !5033)
!5033 = distinct !DILexicalBlock(scope: !5028, file: !3, line: 2743, column: 5)
!5034 = !DILocation(line: 2744, column: 19, scope: !5033)
!5035 = !DILocation(line: 2744, column: 7, scope: !5033)
!5036 = !DILocation(line: 2745, column: 7, scope: !5033)
!5037 = !DILocation(line: 2747, column: 7, scope: !5038)
!5038 = distinct !DILexicalBlock(scope: !5010, file: !3, line: 2747, column: 7)
!5039 = !DILocation(line: 2747, column: 10, scope: !5038)
!5040 = !DILocation(line: 2747, column: 19, scope: !5038)
!5041 = !DILocation(line: 2747, column: 7, scope: !5010)
!5042 = !DILocation(line: 2749, column: 16, scope: !5043)
!5043 = distinct !DILexicalBlock(scope: !5038, file: !3, line: 2748, column: 5)
!5044 = !DILocation(line: 2749, column: 19, scope: !5043)
!5045 = !DILocation(line: 2749, column: 7, scope: !5043)
!5046 = !DILocation(line: 2750, column: 7, scope: !5043)
!5047 = !DILocation(line: 2753, column: 13, scope: !5010)
!5048 = !DILocation(line: 2753, column: 3, scope: !5010)
!5049 = !DILocation(line: 2754, column: 13, scope: !5010)
!5050 = !DILocation(line: 2754, column: 3, scope: !5010)
!5051 = !DILocation(line: 2756, column: 12, scope: !5010)
!5052 = !DILocation(line: 2756, column: 16, scope: !5010)
!5053 = !DILocation(line: 2756, column: 3, scope: !5010)
!5054 = !DILocation(line: 2757, column: 22, scope: !5010)
!5055 = !DILocation(line: 2757, column: 8, scope: !5010)
!5056 = !DILocation(line: 2757, column: 6, scope: !5010)
!5057 = !DILocation(line: 2758, column: 12, scope: !5010)
!5058 = !DILocation(line: 2758, column: 16, scope: !5010)
!5059 = !DILocation(line: 2758, column: 3, scope: !5010)
!5060 = !DILocation(line: 2759, column: 22, scope: !5010)
!5061 = !DILocation(line: 2759, column: 8, scope: !5010)
!5062 = !DILocation(line: 2759, column: 6, scope: !5010)
!5063 = !DILocation(line: 2760, column: 8, scope: !5010)
!5064 = !DILocation(line: 2760, column: 6, scope: !5010)
!5065 = !DILocation(line: 2762, column: 11, scope: !5066)
!5066 = distinct !DILexicalBlock(scope: !5010, file: !3, line: 2762, column: 7)
!5067 = !DILocation(line: 2762, column: 26, scope: !5066)
!5068 = !DILocation(line: 2762, column: 20, scope: !5066)
!5069 = !DILocation(line: 2762, column: 7, scope: !5010)
!5070 = !DILocation(line: 2763, column: 15, scope: !5066)
!5071 = !DILocation(line: 2763, column: 19, scope: !5066)
!5072 = !DILocation(line: 2763, column: 5, scope: !5066)
!5073 = !DILocation(line: 2765, column: 15, scope: !5010)
!5074 = !DILocation(line: 2765, column: 19, scope: !5010)
!5075 = !DILocation(line: 2765, column: 23, scope: !5010)
!5076 = !DILocation(line: 2765, column: 3, scope: !5010)
!5077 = !DILocation(line: 2766, column: 11, scope: !5078)
!5078 = distinct !DILexicalBlock(scope: !5010, file: !3, line: 2766, column: 7)
!5079 = !DILocation(line: 2766, column: 20, scope: !5078)
!5080 = !DILocation(line: 2766, column: 7, scope: !5010)
!5081 = !DILocation(line: 2768, column: 17, scope: !5082)
!5082 = distinct !DILexicalBlock(scope: !5078, file: !3, line: 2767, column: 5)
!5083 = !DILocation(line: 2768, column: 20, scope: !5082)
!5084 = !DILocation(line: 2768, column: 7, scope: !5082)
!5085 = !DILocation(line: 2769, column: 5, scope: !5082)
!5086 = !DILocation(line: 2771, column: 5, scope: !5078)
!5087 = !DILocalVariable(name: "c", scope: !5088, file: !3, line: 2773, type: !34)
!5088 = distinct !DILexicalBlock(scope: !5089, file: !3, line: 2772, column: 7)
!5089 = distinct !DILexicalBlock(scope: !5090, file: !3, line: 2771, column: 5)
!5090 = distinct !DILexicalBlock(scope: !5078, file: !3, line: 2771, column: 5)
!5091 = !DILocation(line: 2773, column: 6, scope: !5088)
!5092 = !DILocation(line: 2775, column: 16, scope: !5088)
!5093 = !DILocation(line: 2775, column: 2, scope: !5088)
!5094 = !DILocation(line: 2776, column: 15, scope: !5088)
!5095 = !DILocation(line: 2776, column: 19, scope: !5088)
!5096 = !DILocation(line: 2776, column: 6, scope: !5088)
!5097 = !DILocation(line: 2776, column: 4, scope: !5088)
!5098 = !DILocation(line: 2777, column: 6, scope: !5099)
!5099 = distinct !DILexicalBlock(scope: !5088, file: !3, line: 2777, column: 6)
!5100 = !DILocation(line: 2777, column: 8, scope: !5099)
!5101 = !DILocation(line: 2777, column: 6, scope: !5088)
!5102 = !DILocation(line: 2779, column: 16, scope: !5103)
!5103 = distinct !DILexicalBlock(scope: !5099, file: !3, line: 2778, column: 4)
!5104 = !DILocation(line: 2779, column: 19, scope: !5103)
!5105 = !DILocation(line: 2779, column: 6, scope: !5103)
!5106 = !DILocation(line: 2780, column: 6, scope: !5103)
!5107 = !DILocation(line: 2782, column: 6, scope: !5108)
!5108 = distinct !DILexicalBlock(scope: !5088, file: !3, line: 2782, column: 6)
!5109 = !DILocation(line: 2782, column: 8, scope: !5108)
!5110 = !DILocation(line: 2782, column: 6, scope: !5088)
!5111 = !DILocation(line: 2783, column: 14, scope: !5108)
!5112 = !DILocation(line: 2783, column: 18, scope: !5108)
!5113 = !DILocation(line: 2783, column: 4, scope: !5108)
!5114 = !DILocation(line: 2785, column: 10, scope: !5115)
!5115 = distinct !DILexicalBlock(scope: !5088, file: !3, line: 2785, column: 6)
!5116 = !DILocation(line: 2785, column: 19, scope: !5115)
!5117 = !DILocation(line: 2785, column: 6, scope: !5088)
!5118 = !DILocalVariable(name: "vl", scope: !5119, file: !3, line: 2787, type: !27)
!5119 = distinct !DILexicalBlock(scope: !5115, file: !3, line: 2786, column: 4)
!5120 = !DILocation(line: 2787, column: 16, scope: !5119)
!5121 = !DILocation(line: 2787, column: 25, scope: !5119)
!5122 = !DILocation(line: 2787, column: 21, scope: !5119)
!5123 = !DILocalVariable(name: "ul", scope: !5119, file: !3, line: 2788, type: !27)
!5124 = !DILocation(line: 2788, column: 16, scope: !5119)
!5125 = !DILocation(line: 2788, column: 34, scope: !5119)
!5126 = !DILocation(line: 2788, column: 38, scope: !5119)
!5127 = !DILocation(line: 2788, column: 21, scope: !5119)
!5128 = !DILocation(line: 2789, column: 18, scope: !5119)
!5129 = !DILocation(line: 2789, column: 33, scope: !5119)
!5130 = !DILocation(line: 2789, column: 37, scope: !5119)
!5131 = !DILocation(line: 2789, column: 21, scope: !5119)
!5132 = !DILocation(line: 2789, column: 6, scope: !5119)
!5133 = !DILocation(line: 2790, column: 6, scope: !5119)
!5134 = !DILocation(line: 2792, column: 11, scope: !5088)
!5135 = !DILocation(line: 2792, column: 15, scope: !5088)
!5136 = !DILocation(line: 2792, column: 19, scope: !5088)
!5137 = !DILocation(line: 2792, column: 2, scope: !5088)
!5138 = !DILocation(line: 2771, column: 5, scope: !5089)
!5139 = distinct !{!5139, !5140, !5141}
!5140 = !DILocation(line: 2771, column: 5, scope: !5090)
!5141 = !DILocation(line: 2793, column: 7, scope: !5090)
!5142 = !DILocation(line: 2794, column: 14, scope: !5010)
!5143 = !DILocation(line: 2794, column: 3, scope: !5010)
!5144 = !DILocation(line: 2795, column: 14, scope: !5010)
!5145 = !DILocation(line: 2795, column: 3, scope: !5010)
!5146 = !DILocation(line: 2796, column: 17, scope: !5010)
!5147 = !DILocation(line: 2796, column: 20, scope: !5010)
!5148 = !DILocation(line: 2796, column: 23, scope: !5010)
!5149 = !DILocation(line: 2796, column: 3, scope: !5010)
!5150 = !DILocation(line: 2797, column: 1, scope: !5010)
!5151 = distinct !DISubprogram(name: "mpz_make_odd", scope: !3, file: !3, line: 2724, type: !5152, scopeLine: 2725, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!5152 = !DISubroutineType(types: !5153)
!5153 = !{!35, !1838}
!5154 = !DILocalVariable(name: "r", arg: 1, scope: !5151, file: !3, line: 2724, type: !1838)
!5155 = !DILocation(line: 2724, column: 21, scope: !5151)
!5156 = !DILocalVariable(name: "shift", scope: !5151, file: !3, line: 2726, type: !35)
!5157 = !DILocation(line: 2726, column: 15, scope: !5151)
!5158 = !DILocation(line: 2730, column: 28, scope: !5151)
!5159 = !DILocation(line: 2730, column: 31, scope: !5151)
!5160 = !DILocation(line: 2730, column: 44, scope: !5151)
!5161 = !DILocation(line: 2730, column: 47, scope: !5151)
!5162 = !DILocation(line: 2730, column: 11, scope: !5151)
!5163 = !DILocation(line: 2730, column: 9, scope: !5151)
!5164 = !DILocation(line: 2731, column: 20, scope: !5151)
!5165 = !DILocation(line: 2731, column: 23, scope: !5151)
!5166 = !DILocation(line: 2731, column: 26, scope: !5151)
!5167 = !DILocation(line: 2731, column: 3, scope: !5151)
!5168 = !DILocation(line: 2733, column: 10, scope: !5151)
!5169 = !DILocation(line: 2733, column: 3, scope: !5151)
!5170 = distinct !DISubprogram(name: "mpz_gcdext", scope: !3, file: !3, line: 2800, type: !5171, scopeLine: 2801, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!5171 = !DISubroutineType(types: !5172)
!5172 = !{null, !1838, !1838, !1838, !1950, !1950}
!5173 = !DILocalVariable(name: "g", arg: 1, scope: !5170, file: !3, line: 2800, type: !1838)
!5174 = !DILocation(line: 2800, column: 19, scope: !5170)
!5175 = !DILocalVariable(name: "s", arg: 2, scope: !5170, file: !3, line: 2800, type: !1838)
!5176 = !DILocation(line: 2800, column: 28, scope: !5170)
!5177 = !DILocalVariable(name: "t", arg: 3, scope: !5170, file: !3, line: 2800, type: !1838)
!5178 = !DILocation(line: 2800, column: 37, scope: !5170)
!5179 = !DILocalVariable(name: "u", arg: 4, scope: !5170, file: !3, line: 2800, type: !1950)
!5180 = !DILocation(line: 2800, column: 52, scope: !5170)
!5181 = !DILocalVariable(name: "v", arg: 5, scope: !5170, file: !3, line: 2800, type: !1950)
!5182 = !DILocation(line: 2800, column: 67, scope: !5170)
!5183 = !DILocalVariable(name: "tu", scope: !5170, file: !3, line: 2802, type: !3319)
!5184 = !DILocation(line: 2802, column: 9, scope: !5170)
!5185 = !DILocalVariable(name: "tv", scope: !5170, file: !3, line: 2802, type: !3319)
!5186 = !DILocation(line: 2802, column: 13, scope: !5170)
!5187 = !DILocalVariable(name: "s0", scope: !5170, file: !3, line: 2802, type: !3319)
!5188 = !DILocation(line: 2802, column: 17, scope: !5170)
!5189 = !DILocalVariable(name: "s1", scope: !5170, file: !3, line: 2802, type: !3319)
!5190 = !DILocation(line: 2802, column: 21, scope: !5170)
!5191 = !DILocalVariable(name: "t0", scope: !5170, file: !3, line: 2802, type: !3319)
!5192 = !DILocation(line: 2802, column: 25, scope: !5170)
!5193 = !DILocalVariable(name: "t1", scope: !5170, file: !3, line: 2802, type: !3319)
!5194 = !DILocation(line: 2802, column: 29, scope: !5170)
!5195 = !DILocalVariable(name: "uz", scope: !5170, file: !3, line: 2803, type: !35)
!5196 = !DILocation(line: 2803, column: 15, scope: !5170)
!5197 = !DILocalVariable(name: "vz", scope: !5170, file: !3, line: 2803, type: !35)
!5198 = !DILocation(line: 2803, column: 19, scope: !5170)
!5199 = !DILocalVariable(name: "gz", scope: !5170, file: !3, line: 2803, type: !35)
!5200 = !DILocation(line: 2803, column: 23, scope: !5170)
!5201 = !DILocalVariable(name: "power", scope: !5170, file: !3, line: 2804, type: !35)
!5202 = !DILocation(line: 2804, column: 15, scope: !5170)
!5203 = !DILocation(line: 2806, column: 7, scope: !5204)
!5204 = distinct !DILexicalBlock(scope: !5170, file: !3, line: 2806, column: 7)
!5205 = !DILocation(line: 2806, column: 10, scope: !5204)
!5206 = !DILocation(line: 2806, column: 19, scope: !5204)
!5207 = !DILocation(line: 2806, column: 7, scope: !5170)
!5208 = !DILocalVariable(name: "sign", scope: !5209, file: !3, line: 2809, type: !30)
!5209 = distinct !DILexicalBlock(scope: !5204, file: !3, line: 2807, column: 5)
!5210 = !DILocation(line: 2809, column: 19, scope: !5209)
!5211 = !DILocation(line: 2809, column: 35, scope: !5209)
!5212 = !DILocation(line: 2809, column: 26, scope: !5209)
!5213 = !DILocation(line: 2810, column: 16, scope: !5209)
!5214 = !DILocation(line: 2810, column: 19, scope: !5209)
!5215 = !DILocation(line: 2810, column: 7, scope: !5209)
!5216 = !DILocation(line: 2811, column: 11, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !5209, file: !3, line: 2811, column: 11)
!5218 = !DILocation(line: 2811, column: 11, scope: !5209)
!5219 = !DILocation(line: 2812, column: 14, scope: !5217)
!5220 = !DILocation(line: 2812, column: 2, scope: !5217)
!5221 = !DILocation(line: 2813, column: 11, scope: !5222)
!5222 = distinct !DILexicalBlock(scope: !5209, file: !3, line: 2813, column: 11)
!5223 = !DILocation(line: 2813, column: 11, scope: !5209)
!5224 = !DILocation(line: 2814, column: 14, scope: !5222)
!5225 = !DILocation(line: 2814, column: 17, scope: !5222)
!5226 = !DILocation(line: 2814, column: 2, scope: !5222)
!5227 = !DILocation(line: 2815, column: 7, scope: !5209)
!5228 = !DILocation(line: 2818, column: 7, scope: !5229)
!5229 = distinct !DILexicalBlock(scope: !5170, file: !3, line: 2818, column: 7)
!5230 = !DILocation(line: 2818, column: 10, scope: !5229)
!5231 = !DILocation(line: 2818, column: 19, scope: !5229)
!5232 = !DILocation(line: 2818, column: 7, scope: !5170)
!5233 = !DILocalVariable(name: "sign", scope: !5234, file: !3, line: 2821, type: !30)
!5234 = distinct !DILexicalBlock(scope: !5229, file: !3, line: 2819, column: 5)
!5235 = !DILocation(line: 2821, column: 19, scope: !5234)
!5236 = !DILocation(line: 2821, column: 35, scope: !5234)
!5237 = !DILocation(line: 2821, column: 26, scope: !5234)
!5238 = !DILocation(line: 2822, column: 16, scope: !5234)
!5239 = !DILocation(line: 2822, column: 19, scope: !5234)
!5240 = !DILocation(line: 2822, column: 7, scope: !5234)
!5241 = !DILocation(line: 2823, column: 11, scope: !5242)
!5242 = distinct !DILexicalBlock(scope: !5234, file: !3, line: 2823, column: 11)
!5243 = !DILocation(line: 2823, column: 11, scope: !5234)
!5244 = !DILocation(line: 2824, column: 14, scope: !5242)
!5245 = !DILocation(line: 2824, column: 17, scope: !5242)
!5246 = !DILocation(line: 2824, column: 2, scope: !5242)
!5247 = !DILocation(line: 2825, column: 11, scope: !5248)
!5248 = distinct !DILexicalBlock(scope: !5234, file: !3, line: 2825, column: 11)
!5249 = !DILocation(line: 2825, column: 11, scope: !5234)
!5250 = !DILocation(line: 2826, column: 14, scope: !5248)
!5251 = !DILocation(line: 2826, column: 2, scope: !5248)
!5252 = !DILocation(line: 2827, column: 7, scope: !5234)
!5253 = !DILocation(line: 2830, column: 13, scope: !5170)
!5254 = !DILocation(line: 2830, column: 3, scope: !5170)
!5255 = !DILocation(line: 2831, column: 13, scope: !5170)
!5256 = !DILocation(line: 2831, column: 3, scope: !5170)
!5257 = !DILocation(line: 2832, column: 13, scope: !5170)
!5258 = !DILocation(line: 2832, column: 3, scope: !5170)
!5259 = !DILocation(line: 2833, column: 13, scope: !5170)
!5260 = !DILocation(line: 2833, column: 3, scope: !5170)
!5261 = !DILocation(line: 2834, column: 13, scope: !5170)
!5262 = !DILocation(line: 2834, column: 3, scope: !5170)
!5263 = !DILocation(line: 2835, column: 13, scope: !5170)
!5264 = !DILocation(line: 2835, column: 3, scope: !5170)
!5265 = !DILocation(line: 2837, column: 12, scope: !5170)
!5266 = !DILocation(line: 2837, column: 16, scope: !5170)
!5267 = !DILocation(line: 2837, column: 3, scope: !5170)
!5268 = !DILocation(line: 2838, column: 22, scope: !5170)
!5269 = !DILocation(line: 2838, column: 8, scope: !5170)
!5270 = !DILocation(line: 2838, column: 6, scope: !5170)
!5271 = !DILocation(line: 2839, column: 12, scope: !5170)
!5272 = !DILocation(line: 2839, column: 16, scope: !5170)
!5273 = !DILocation(line: 2839, column: 3, scope: !5170)
!5274 = !DILocation(line: 2840, column: 22, scope: !5170)
!5275 = !DILocation(line: 2840, column: 8, scope: !5170)
!5276 = !DILocation(line: 2840, column: 6, scope: !5170)
!5277 = !DILocation(line: 2841, column: 8, scope: !5170)
!5278 = !DILocation(line: 2841, column: 6, scope: !5170)
!5279 = !DILocation(line: 2843, column: 9, scope: !5170)
!5280 = !DILocation(line: 2843, column: 6, scope: !5170)
!5281 = !DILocation(line: 2844, column: 9, scope: !5170)
!5282 = !DILocation(line: 2844, column: 6, scope: !5170)
!5283 = !DILocation(line: 2847, column: 11, scope: !5284)
!5284 = distinct !DILexicalBlock(scope: !5170, file: !3, line: 2847, column: 7)
!5285 = !DILocation(line: 2847, column: 26, scope: !5284)
!5286 = !DILocation(line: 2847, column: 20, scope: !5284)
!5287 = !DILocation(line: 2847, column: 7, scope: !5170)
!5288 = !DILocation(line: 2849, column: 17, scope: !5289)
!5289 = distinct !DILexicalBlock(scope: !5284, file: !3, line: 2848, column: 5)
!5290 = !DILocation(line: 2849, column: 21, scope: !5289)
!5291 = !DILocation(line: 2849, column: 7, scope: !5289)
!5292 = !DILocation(line: 2850, column: 7, scope: !5289)
!5293 = !DILocalVariable(name: "__mpz_srcptr_swap__tmp", scope: !5294, file: !3, line: 2850, type: !2176)
!5294 = distinct !DILexicalBlock(scope: !5289, file: !3, line: 2850, column: 7)
!5295 = !DILocation(line: 2850, column: 7, scope: !5294)
!5296 = !DILocation(line: 2851, column: 7, scope: !5289)
!5297 = !DILocalVariable(name: "__mpz_ptr_swap__tmp", scope: !5298, file: !3, line: 2851, type: !5299)
!5298 = distinct !DILexicalBlock(scope: !5289, file: !3, line: 2851, column: 7)
!5299 = !DIDerivedType(tag: DW_TAG_typedef, name: "mpz_ptr", file: !28, line: 75, baseType: !1838)
!5300 = !DILocation(line: 2851, column: 7, scope: !5298)
!5301 = !DILocation(line: 2852, column: 7, scope: !5289)
!5302 = !DILocalVariable(name: "__mp_bitcnt_t_swap__tmp", scope: !5303, file: !3, line: 2852, type: !35)
!5303 = distinct !DILexicalBlock(scope: !5289, file: !3, line: 2852, column: 7)
!5304 = !DILocation(line: 2852, column: 7, scope: !5303)
!5305 = !DILocation(line: 2853, column: 5, scope: !5289)
!5306 = !DILocation(line: 2878, column: 15, scope: !5170)
!5307 = !DILocation(line: 2878, column: 19, scope: !5170)
!5308 = !DILocation(line: 2878, column: 3, scope: !5170)
!5309 = !DILocation(line: 2879, column: 16, scope: !5170)
!5310 = !DILocation(line: 2879, column: 20, scope: !5170)
!5311 = !DILocation(line: 2879, column: 24, scope: !5170)
!5312 = !DILocation(line: 2879, column: 28, scope: !5170)
!5313 = !DILocation(line: 2879, column: 3, scope: !5170)
!5314 = !DILocation(line: 2880, column: 17, scope: !5170)
!5315 = !DILocation(line: 2880, column: 21, scope: !5170)
!5316 = !DILocation(line: 2880, column: 25, scope: !5170)
!5317 = !DILocation(line: 2880, column: 3, scope: !5170)
!5318 = !DILocation(line: 2882, column: 15, scope: !5170)
!5319 = !DILocation(line: 2882, column: 19, scope: !5170)
!5320 = !DILocation(line: 2882, column: 3, scope: !5170)
!5321 = !DILocation(line: 2883, column: 11, scope: !5170)
!5322 = !DILocation(line: 2883, column: 16, scope: !5170)
!5323 = !DILocation(line: 2883, column: 14, scope: !5170)
!5324 = !DILocation(line: 2883, column: 9, scope: !5170)
!5325 = !DILocation(line: 2885, column: 11, scope: !5326)
!5326 = distinct !DILexicalBlock(scope: !5170, file: !3, line: 2885, column: 7)
!5327 = !DILocation(line: 2885, column: 20, scope: !5326)
!5328 = !DILocation(line: 2885, column: 7, scope: !5170)
!5329 = !DILocalVariable(name: "shift", scope: !5330, file: !3, line: 2887, type: !35)
!5330 = distinct !DILexicalBlock(scope: !5326, file: !3, line: 2886, column: 5)
!5331 = !DILocation(line: 2887, column: 19, scope: !5330)
!5332 = !DILocation(line: 2888, column: 29, scope: !5330)
!5333 = !DILocation(line: 2888, column: 15, scope: !5330)
!5334 = !DILocation(line: 2888, column: 13, scope: !5330)
!5335 = !DILocation(line: 2889, column: 21, scope: !5330)
!5336 = !DILocation(line: 2889, column: 25, scope: !5330)
!5337 = !DILocation(line: 2889, column: 29, scope: !5330)
!5338 = !DILocation(line: 2889, column: 7, scope: !5330)
!5339 = !DILocation(line: 2890, column: 21, scope: !5330)
!5340 = !DILocation(line: 2890, column: 25, scope: !5330)
!5341 = !DILocation(line: 2890, column: 29, scope: !5330)
!5342 = !DILocation(line: 2890, column: 7, scope: !5330)
!5343 = !DILocation(line: 2891, column: 16, scope: !5330)
!5344 = !DILocation(line: 2891, column: 13, scope: !5330)
!5345 = !DILocation(line: 2893, column: 7, scope: !5330)
!5346 = !DILocalVariable(name: "c", scope: !5347, file: !3, line: 2895, type: !34)
!5347 = distinct !DILexicalBlock(scope: !5348, file: !3, line: 2894, column: 2)
!5348 = distinct !DILexicalBlock(scope: !5349, file: !3, line: 2893, column: 7)
!5349 = distinct !DILexicalBlock(scope: !5330, file: !3, line: 2893, column: 7)
!5350 = !DILocation(line: 2895, column: 8, scope: !5347)
!5351 = !DILocation(line: 2896, column: 17, scope: !5347)
!5352 = !DILocation(line: 2896, column: 21, scope: !5347)
!5353 = !DILocation(line: 2896, column: 8, scope: !5347)
!5354 = !DILocation(line: 2896, column: 6, scope: !5347)
!5355 = !DILocation(line: 2897, column: 8, scope: !5356)
!5356 = distinct !DILexicalBlock(scope: !5347, file: !3, line: 2897, column: 8)
!5357 = !DILocation(line: 2897, column: 10, scope: !5356)
!5358 = !DILocation(line: 2897, column: 8, scope: !5347)
!5359 = !DILocation(line: 2898, column: 6, scope: !5356)
!5360 = !DILocation(line: 2900, column: 8, scope: !5361)
!5361 = distinct !DILexicalBlock(scope: !5347, file: !3, line: 2900, column: 8)
!5362 = !DILocation(line: 2900, column: 10, scope: !5361)
!5363 = !DILocation(line: 2900, column: 8, scope: !5347)
!5364 = !DILocation(line: 2907, column: 17, scope: !5365)
!5365 = distinct !DILexicalBlock(scope: !5361, file: !3, line: 2901, column: 6)
!5366 = !DILocation(line: 2907, column: 21, scope: !5365)
!5367 = !DILocation(line: 2907, column: 25, scope: !5365)
!5368 = !DILocation(line: 2907, column: 8, scope: !5365)
!5369 = !DILocation(line: 2908, column: 17, scope: !5365)
!5370 = !DILocation(line: 2908, column: 21, scope: !5365)
!5371 = !DILocation(line: 2908, column: 25, scope: !5365)
!5372 = !DILocation(line: 2908, column: 8, scope: !5365)
!5373 = !DILocation(line: 2909, column: 17, scope: !5365)
!5374 = !DILocation(line: 2909, column: 21, scope: !5365)
!5375 = !DILocation(line: 2909, column: 25, scope: !5365)
!5376 = !DILocation(line: 2909, column: 8, scope: !5365)
!5377 = !DILocation(line: 2911, column: 30, scope: !5365)
!5378 = !DILocation(line: 2911, column: 16, scope: !5365)
!5379 = !DILocation(line: 2911, column: 14, scope: !5365)
!5380 = !DILocation(line: 2912, column: 22, scope: !5365)
!5381 = !DILocation(line: 2912, column: 26, scope: !5365)
!5382 = !DILocation(line: 2912, column: 30, scope: !5365)
!5383 = !DILocation(line: 2912, column: 8, scope: !5365)
!5384 = !DILocation(line: 2913, column: 22, scope: !5365)
!5385 = !DILocation(line: 2913, column: 26, scope: !5365)
!5386 = !DILocation(line: 2913, column: 30, scope: !5365)
!5387 = !DILocation(line: 2913, column: 8, scope: !5365)
!5388 = !DILocation(line: 2914, column: 6, scope: !5365)
!5389 = !DILocation(line: 2917, column: 17, scope: !5390)
!5390 = distinct !DILexicalBlock(scope: !5361, file: !3, line: 2916, column: 6)
!5391 = !DILocation(line: 2917, column: 21, scope: !5390)
!5392 = !DILocation(line: 2917, column: 25, scope: !5390)
!5393 = !DILocation(line: 2917, column: 8, scope: !5390)
!5394 = !DILocation(line: 2918, column: 17, scope: !5390)
!5395 = !DILocation(line: 2918, column: 21, scope: !5390)
!5396 = !DILocation(line: 2918, column: 25, scope: !5390)
!5397 = !DILocation(line: 2918, column: 8, scope: !5390)
!5398 = !DILocation(line: 2919, column: 17, scope: !5390)
!5399 = !DILocation(line: 2919, column: 21, scope: !5390)
!5400 = !DILocation(line: 2919, column: 25, scope: !5390)
!5401 = !DILocation(line: 2919, column: 8, scope: !5390)
!5402 = !DILocation(line: 2921, column: 30, scope: !5390)
!5403 = !DILocation(line: 2921, column: 16, scope: !5390)
!5404 = !DILocation(line: 2921, column: 14, scope: !5390)
!5405 = !DILocation(line: 2922, column: 22, scope: !5390)
!5406 = !DILocation(line: 2922, column: 26, scope: !5390)
!5407 = !DILocation(line: 2922, column: 30, scope: !5390)
!5408 = !DILocation(line: 2922, column: 8, scope: !5390)
!5409 = !DILocation(line: 2923, column: 22, scope: !5390)
!5410 = !DILocation(line: 2923, column: 26, scope: !5390)
!5411 = !DILocation(line: 2923, column: 30, scope: !5390)
!5412 = !DILocation(line: 2923, column: 8, scope: !5390)
!5413 = !DILocation(line: 2925, column: 13, scope: !5347)
!5414 = !DILocation(line: 2925, column: 10, scope: !5347)
!5415 = !DILocation(line: 2893, column: 7, scope: !5348)
!5416 = distinct !{!5416, !5417, !5418}
!5417 = !DILocation(line: 2893, column: 7, scope: !5349)
!5418 = !DILocation(line: 2926, column: 2, scope: !5349)
!5419 = !DILocation(line: 2927, column: 5, scope: !5330)
!5420 = !DILocation(line: 2932, column: 17, scope: !5170)
!5421 = !DILocation(line: 2932, column: 21, scope: !5170)
!5422 = !DILocation(line: 2932, column: 25, scope: !5170)
!5423 = !DILocation(line: 2932, column: 3, scope: !5170)
!5424 = !DILocation(line: 2933, column: 12, scope: !5170)
!5425 = !DILocation(line: 2933, column: 16, scope: !5170)
!5426 = !DILocation(line: 2933, column: 3, scope: !5170)
!5427 = !DILocation(line: 2938, column: 17, scope: !5170)
!5428 = !DILocation(line: 2938, column: 21, scope: !5170)
!5429 = !DILocation(line: 2938, column: 24, scope: !5170)
!5430 = !DILocation(line: 2938, column: 3, scope: !5170)
!5431 = !DILocation(line: 2939, column: 12, scope: !5170)
!5432 = !DILocation(line: 2939, column: 16, scope: !5170)
!5433 = !DILocation(line: 2939, column: 3, scope: !5170)
!5434 = !DILocation(line: 2940, column: 17, scope: !5170)
!5435 = !DILocation(line: 2940, column: 21, scope: !5170)
!5436 = !DILocation(line: 2940, column: 24, scope: !5170)
!5437 = !DILocation(line: 2940, column: 3, scope: !5170)
!5438 = !DILocation(line: 2941, column: 12, scope: !5170)
!5439 = !DILocation(line: 2941, column: 16, scope: !5170)
!5440 = !DILocation(line: 2941, column: 3, scope: !5170)
!5441 = !DILocation(line: 2943, column: 3, scope: !5170)
!5442 = !DILocation(line: 2943, column: 15, scope: !5170)
!5443 = !DILocation(line: 2943, column: 18, scope: !5170)
!5444 = !DILocation(line: 2946, column: 11, scope: !5445)
!5445 = distinct !DILexicalBlock(scope: !5446, file: !3, line: 2946, column: 11)
!5446 = distinct !DILexicalBlock(scope: !5170, file: !3, line: 2944, column: 5)
!5447 = !DILocation(line: 2946, column: 26, scope: !5445)
!5448 = !DILocation(line: 2946, column: 29, scope: !5445)
!5449 = !DILocation(line: 2946, column: 11, scope: !5446)
!5450 = !DILocation(line: 2948, column: 13, scope: !5451)
!5451 = distinct !DILexicalBlock(scope: !5445, file: !3, line: 2947, column: 2)
!5452 = !DILocation(line: 2948, column: 17, scope: !5451)
!5453 = !DILocation(line: 2948, column: 21, scope: !5451)
!5454 = !DILocation(line: 2948, column: 4, scope: !5451)
!5455 = !DILocation(line: 2949, column: 13, scope: !5451)
!5456 = !DILocation(line: 2949, column: 17, scope: !5451)
!5457 = !DILocation(line: 2949, column: 21, scope: !5451)
!5458 = !DILocation(line: 2949, column: 4, scope: !5451)
!5459 = !DILocation(line: 2950, column: 2, scope: !5451)
!5460 = !DILocation(line: 2951, column: 24, scope: !5446)
!5461 = !DILocation(line: 2951, column: 28, scope: !5446)
!5462 = !DILocation(line: 2951, column: 7, scope: !5446)
!5463 = !DILocation(line: 2952, column: 24, scope: !5446)
!5464 = !DILocation(line: 2952, column: 28, scope: !5446)
!5465 = !DILocation(line: 2952, column: 7, scope: !5446)
!5466 = distinct !{!5466, !5441, !5467}
!5467 = !DILocation(line: 2953, column: 5, scope: !5170)
!5468 = !DILocation(line: 2956, column: 12, scope: !5170)
!5469 = !DILocation(line: 2956, column: 16, scope: !5170)
!5470 = !DILocation(line: 2956, column: 20, scope: !5170)
!5471 = !DILocation(line: 2956, column: 3, scope: !5170)
!5472 = !DILocation(line: 2957, column: 19, scope: !5473)
!5473 = distinct !DILexicalBlock(scope: !5170, file: !3, line: 2957, column: 7)
!5474 = !DILocation(line: 2957, column: 23, scope: !5473)
!5475 = !DILocation(line: 2957, column: 7, scope: !5473)
!5476 = !DILocation(line: 2957, column: 27, scope: !5473)
!5477 = !DILocation(line: 2957, column: 7, scope: !5170)
!5478 = !DILocation(line: 2959, column: 17, scope: !5479)
!5479 = distinct !DILexicalBlock(scope: !5473, file: !3, line: 2958, column: 5)
!5480 = !DILocation(line: 2959, column: 21, scope: !5479)
!5481 = !DILocation(line: 2959, column: 7, scope: !5479)
!5482 = !DILocation(line: 2960, column: 16, scope: !5479)
!5483 = !DILocation(line: 2960, column: 20, scope: !5479)
!5484 = !DILocation(line: 2960, column: 24, scope: !5479)
!5485 = !DILocation(line: 2960, column: 7, scope: !5479)
!5486 = !DILocation(line: 2961, column: 5, scope: !5479)
!5487 = !DILocation(line: 2962, column: 7, scope: !5488)
!5488 = distinct !DILexicalBlock(scope: !5170, file: !3, line: 2962, column: 7)
!5489 = !DILocation(line: 2962, column: 10, scope: !5488)
!5490 = !DILocation(line: 2962, column: 19, scope: !5488)
!5491 = !DILocation(line: 2962, column: 7, scope: !5170)
!5492 = !DILocation(line: 2963, column: 14, scope: !5488)
!5493 = !DILocation(line: 2963, column: 18, scope: !5488)
!5494 = !DILocation(line: 2963, column: 5, scope: !5488)
!5495 = !DILocation(line: 2964, column: 7, scope: !5496)
!5496 = distinct !DILexicalBlock(scope: !5170, file: !3, line: 2964, column: 7)
!5497 = !DILocation(line: 2964, column: 10, scope: !5496)
!5498 = !DILocation(line: 2964, column: 19, scope: !5496)
!5499 = !DILocation(line: 2964, column: 7, scope: !5170)
!5500 = !DILocation(line: 2965, column: 14, scope: !5496)
!5501 = !DILocation(line: 2965, column: 18, scope: !5496)
!5502 = !DILocation(line: 2965, column: 5, scope: !5496)
!5503 = !DILocation(line: 2967, column: 13, scope: !5170)
!5504 = !DILocation(line: 2967, column: 16, scope: !5170)
!5505 = !DILocation(line: 2967, column: 3, scope: !5170)
!5506 = !DILocation(line: 2968, column: 7, scope: !5507)
!5507 = distinct !DILexicalBlock(scope: !5170, file: !3, line: 2968, column: 7)
!5508 = !DILocation(line: 2968, column: 7, scope: !5170)
!5509 = !DILocation(line: 2969, column: 15, scope: !5507)
!5510 = !DILocation(line: 2969, column: 18, scope: !5507)
!5511 = !DILocation(line: 2969, column: 5, scope: !5507)
!5512 = !DILocation(line: 2970, column: 7, scope: !5513)
!5513 = distinct !DILexicalBlock(scope: !5170, file: !3, line: 2970, column: 7)
!5514 = !DILocation(line: 2970, column: 7, scope: !5170)
!5515 = !DILocation(line: 2971, column: 15, scope: !5513)
!5516 = !DILocation(line: 2971, column: 18, scope: !5513)
!5517 = !DILocation(line: 2971, column: 5, scope: !5513)
!5518 = !DILocation(line: 2973, column: 14, scope: !5170)
!5519 = !DILocation(line: 2973, column: 3, scope: !5170)
!5520 = !DILocation(line: 2974, column: 14, scope: !5170)
!5521 = !DILocation(line: 2974, column: 3, scope: !5170)
!5522 = !DILocation(line: 2975, column: 14, scope: !5170)
!5523 = !DILocation(line: 2975, column: 3, scope: !5170)
!5524 = !DILocation(line: 2976, column: 14, scope: !5170)
!5525 = !DILocation(line: 2976, column: 3, scope: !5170)
!5526 = !DILocation(line: 2977, column: 14, scope: !5170)
!5527 = !DILocation(line: 2977, column: 3, scope: !5170)
!5528 = !DILocation(line: 2978, column: 14, scope: !5170)
!5529 = !DILocation(line: 2978, column: 3, scope: !5170)
!5530 = !DILocation(line: 2979, column: 1, scope: !5170)
!5531 = distinct !DISubprogram(name: "mpz_setbit", scope: !3, file: !3, line: 3577, type: !1866, scopeLine: 3578, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!5532 = !DILocalVariable(name: "d", arg: 1, scope: !5531, file: !3, line: 3577, type: !1838)
!5533 = !DILocation(line: 3577, column: 19, scope: !5531)
!5534 = !DILocalVariable(name: "bit_index", arg: 2, scope: !5531, file: !3, line: 3577, type: !35)
!5535 = !DILocation(line: 3577, column: 34, scope: !5531)
!5536 = !DILocation(line: 3579, column: 20, scope: !5537)
!5537 = distinct !DILexicalBlock(scope: !5531, file: !3, line: 3579, column: 7)
!5538 = !DILocation(line: 3579, column: 23, scope: !5537)
!5539 = !DILocation(line: 3579, column: 8, scope: !5537)
!5540 = !DILocation(line: 3579, column: 7, scope: !5531)
!5541 = !DILocation(line: 3581, column: 11, scope: !5542)
!5542 = distinct !DILexicalBlock(scope: !5543, file: !3, line: 3581, column: 11)
!5543 = distinct !DILexicalBlock(scope: !5537, file: !3, line: 3580, column: 5)
!5544 = !DILocation(line: 3581, column: 14, scope: !5542)
!5545 = !DILocation(line: 3581, column: 23, scope: !5542)
!5546 = !DILocation(line: 3581, column: 11, scope: !5543)
!5547 = !DILocation(line: 3582, column: 19, scope: !5542)
!5548 = !DILocation(line: 3582, column: 22, scope: !5542)
!5549 = !DILocation(line: 3582, column: 2, scope: !5542)
!5550 = !DILocation(line: 3584, column: 19, scope: !5542)
!5551 = !DILocation(line: 3584, column: 22, scope: !5542)
!5552 = !DILocation(line: 3584, column: 2, scope: !5542)
!5553 = !DILocation(line: 3585, column: 5, scope: !5543)
!5554 = !DILocation(line: 3586, column: 1, scope: !5531)
!5555 = distinct !DISubprogram(name: "mpz_lcm", scope: !3, file: !3, line: 2982, type: !3029, scopeLine: 2983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!5556 = !DILocalVariable(name: "r", arg: 1, scope: !5555, file: !3, line: 2982, type: !1838)
!5557 = !DILocation(line: 2982, column: 16, scope: !5555)
!5558 = !DILocalVariable(name: "u", arg: 2, scope: !5555, file: !3, line: 2982, type: !1950)
!5559 = !DILocation(line: 2982, column: 31, scope: !5555)
!5560 = !DILocalVariable(name: "v", arg: 3, scope: !5555, file: !3, line: 2982, type: !1950)
!5561 = !DILocation(line: 2982, column: 46, scope: !5555)
!5562 = !DILocalVariable(name: "g", scope: !5555, file: !3, line: 2984, type: !3319)
!5563 = !DILocation(line: 2984, column: 9, scope: !5555)
!5564 = !DILocation(line: 2986, column: 7, scope: !5565)
!5565 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 2986, column: 7)
!5566 = !DILocation(line: 2986, column: 10, scope: !5565)
!5567 = !DILocation(line: 2986, column: 19, scope: !5565)
!5568 = !DILocation(line: 2986, column: 24, scope: !5565)
!5569 = !DILocation(line: 2986, column: 27, scope: !5565)
!5570 = !DILocation(line: 2986, column: 30, scope: !5565)
!5571 = !DILocation(line: 2986, column: 39, scope: !5565)
!5572 = !DILocation(line: 2986, column: 7, scope: !5555)
!5573 = !DILocation(line: 2988, column: 7, scope: !5574)
!5574 = distinct !DILexicalBlock(scope: !5565, file: !3, line: 2987, column: 5)
!5575 = !DILocation(line: 2988, column: 10, scope: !5574)
!5576 = !DILocation(line: 2988, column: 19, scope: !5574)
!5577 = !DILocation(line: 2989, column: 7, scope: !5574)
!5578 = !DILocation(line: 2992, column: 13, scope: !5555)
!5579 = !DILocation(line: 2992, column: 3, scope: !5555)
!5580 = !DILocation(line: 2994, column: 12, scope: !5555)
!5581 = !DILocation(line: 2994, column: 15, scope: !5555)
!5582 = !DILocation(line: 2994, column: 18, scope: !5555)
!5583 = !DILocation(line: 2994, column: 3, scope: !5555)
!5584 = !DILocation(line: 2995, column: 17, scope: !5555)
!5585 = !DILocation(line: 2995, column: 20, scope: !5555)
!5586 = !DILocation(line: 2995, column: 23, scope: !5555)
!5587 = !DILocation(line: 2995, column: 3, scope: !5555)
!5588 = !DILocation(line: 2996, column: 12, scope: !5555)
!5589 = !DILocation(line: 2996, column: 15, scope: !5555)
!5590 = !DILocation(line: 2996, column: 18, scope: !5555)
!5591 = !DILocation(line: 2996, column: 3, scope: !5555)
!5592 = !DILocation(line: 2998, column: 14, scope: !5555)
!5593 = !DILocation(line: 2998, column: 3, scope: !5555)
!5594 = !DILocation(line: 2999, column: 12, scope: !5555)
!5595 = !DILocation(line: 2999, column: 15, scope: !5555)
!5596 = !DILocation(line: 2999, column: 3, scope: !5555)
!5597 = !DILocation(line: 3000, column: 1, scope: !5555)
!5598 = distinct !DISubprogram(name: "mpz_lcm_ui", scope: !3, file: !3, line: 3003, type: !2842, scopeLine: 3004, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!5599 = !DILocalVariable(name: "r", arg: 1, scope: !5598, file: !3, line: 3003, type: !1838)
!5600 = !DILocation(line: 3003, column: 19, scope: !5598)
!5601 = !DILocalVariable(name: "u", arg: 2, scope: !5598, file: !3, line: 3003, type: !1950)
!5602 = !DILocation(line: 3003, column: 34, scope: !5598)
!5603 = !DILocalVariable(name: "v", arg: 3, scope: !5598, file: !3, line: 3003, type: !29)
!5604 = !DILocation(line: 3003, column: 51, scope: !5598)
!5605 = !DILocation(line: 3005, column: 7, scope: !5606)
!5606 = distinct !DILexicalBlock(scope: !5598, file: !3, line: 3005, column: 7)
!5607 = !DILocation(line: 3005, column: 9, scope: !5606)
!5608 = !DILocation(line: 3005, column: 14, scope: !5606)
!5609 = !DILocation(line: 3005, column: 17, scope: !5606)
!5610 = !DILocation(line: 3005, column: 20, scope: !5606)
!5611 = !DILocation(line: 3005, column: 29, scope: !5606)
!5612 = !DILocation(line: 3005, column: 7, scope: !5598)
!5613 = !DILocation(line: 3007, column: 7, scope: !5614)
!5614 = distinct !DILexicalBlock(scope: !5606, file: !3, line: 3006, column: 5)
!5615 = !DILocation(line: 3007, column: 10, scope: !5614)
!5616 = !DILocation(line: 3007, column: 19, scope: !5614)
!5617 = !DILocation(line: 3008, column: 7, scope: !5614)
!5618 = !DILocation(line: 3011, column: 26, scope: !5598)
!5619 = !DILocation(line: 3011, column: 29, scope: !5598)
!5620 = !DILocation(line: 3011, column: 8, scope: !5598)
!5621 = !DILocation(line: 3011, column: 5, scope: !5598)
!5622 = !DILocation(line: 3012, column: 15, scope: !5598)
!5623 = !DILocation(line: 3012, column: 18, scope: !5598)
!5624 = !DILocation(line: 3012, column: 21, scope: !5598)
!5625 = !DILocation(line: 3012, column: 3, scope: !5598)
!5626 = !DILocation(line: 3014, column: 12, scope: !5598)
!5627 = !DILocation(line: 3014, column: 15, scope: !5598)
!5628 = !DILocation(line: 3014, column: 3, scope: !5598)
!5629 = !DILocation(line: 3015, column: 1, scope: !5598)
!5630 = distinct !DISubprogram(name: "mpz_invert", scope: !3, file: !3, line: 3018, type: !5631, scopeLine: 3019, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!5631 = !DISubroutineType(types: !5632)
!5632 = !{!34, !1838, !1950, !1950}
!5633 = !DILocalVariable(name: "r", arg: 1, scope: !5630, file: !3, line: 3018, type: !1838)
!5634 = !DILocation(line: 3018, column: 19, scope: !5630)
!5635 = !DILocalVariable(name: "u", arg: 2, scope: !5630, file: !3, line: 3018, type: !1950)
!5636 = !DILocation(line: 3018, column: 34, scope: !5630)
!5637 = !DILocalVariable(name: "m", arg: 3, scope: !5630, file: !3, line: 3018, type: !1950)
!5638 = !DILocation(line: 3018, column: 49, scope: !5630)
!5639 = !DILocalVariable(name: "g", scope: !5630, file: !3, line: 3020, type: !3319)
!5640 = !DILocation(line: 3020, column: 9, scope: !5630)
!5641 = !DILocalVariable(name: "tr", scope: !5630, file: !3, line: 3020, type: !3319)
!5642 = !DILocation(line: 3020, column: 12, scope: !5630)
!5643 = !DILocalVariable(name: "invertible", scope: !5630, file: !3, line: 3021, type: !34)
!5644 = !DILocation(line: 3021, column: 7, scope: !5630)
!5645 = !DILocation(line: 3023, column: 7, scope: !5646)
!5646 = distinct !DILexicalBlock(scope: !5630, file: !3, line: 3023, column: 7)
!5647 = !DILocation(line: 3023, column: 10, scope: !5646)
!5648 = !DILocation(line: 3023, column: 19, scope: !5646)
!5649 = !DILocation(line: 3023, column: 24, scope: !5646)
!5650 = !DILocation(line: 3023, column: 42, scope: !5646)
!5651 = !DILocation(line: 3023, column: 27, scope: !5646)
!5652 = !DILocation(line: 3023, column: 48, scope: !5646)
!5653 = !DILocation(line: 3023, column: 7, scope: !5630)
!5654 = !DILocation(line: 3024, column: 5, scope: !5646)
!5655 = !DILocation(line: 3026, column: 13, scope: !5630)
!5656 = !DILocation(line: 3026, column: 3, scope: !5630)
!5657 = !DILocation(line: 3027, column: 13, scope: !5630)
!5658 = !DILocation(line: 3027, column: 3, scope: !5630)
!5659 = !DILocation(line: 3029, column: 15, scope: !5630)
!5660 = !DILocation(line: 3029, column: 18, scope: !5630)
!5661 = !DILocation(line: 3029, column: 28, scope: !5630)
!5662 = !DILocation(line: 3029, column: 31, scope: !5630)
!5663 = !DILocation(line: 3029, column: 3, scope: !5630)
!5664 = !DILocation(line: 3030, column: 29, scope: !5630)
!5665 = !DILocation(line: 3030, column: 17, scope: !5630)
!5666 = !DILocation(line: 3030, column: 35, scope: !5630)
!5667 = !DILocation(line: 3030, column: 14, scope: !5630)
!5668 = !DILocation(line: 3032, column: 7, scope: !5669)
!5669 = distinct !DILexicalBlock(scope: !5630, file: !3, line: 3032, column: 7)
!5670 = !DILocation(line: 3032, column: 7, scope: !5630)
!5671 = !DILocation(line: 3034, column: 15, scope: !5672)
!5672 = distinct !DILexicalBlock(scope: !5673, file: !3, line: 3034, column: 11)
!5673 = distinct !DILexicalBlock(scope: !5669, file: !3, line: 3033, column: 5)
!5674 = !DILocation(line: 3034, column: 24, scope: !5672)
!5675 = !DILocation(line: 3034, column: 11, scope: !5673)
!5676 = !DILocation(line: 3036, column: 8, scope: !5677)
!5677 = distinct !DILexicalBlock(scope: !5678, file: !3, line: 3036, column: 8)
!5678 = distinct !DILexicalBlock(scope: !5672, file: !3, line: 3035, column: 2)
!5679 = !DILocation(line: 3036, column: 11, scope: !5677)
!5680 = !DILocation(line: 3036, column: 20, scope: !5677)
!5681 = !DILocation(line: 3036, column: 8, scope: !5678)
!5682 = !DILocation(line: 3037, column: 15, scope: !5677)
!5683 = !DILocation(line: 3037, column: 19, scope: !5677)
!5684 = !DILocation(line: 3037, column: 23, scope: !5677)
!5685 = !DILocation(line: 3037, column: 6, scope: !5677)
!5686 = !DILocation(line: 3039, column: 15, scope: !5677)
!5687 = !DILocation(line: 3039, column: 19, scope: !5677)
!5688 = !DILocation(line: 3039, column: 23, scope: !5677)
!5689 = !DILocation(line: 3039, column: 6, scope: !5677)
!5690 = !DILocation(line: 3040, column: 2, scope: !5678)
!5691 = !DILocation(line: 3041, column: 17, scope: !5673)
!5692 = !DILocation(line: 3041, column: 20, scope: !5673)
!5693 = !DILocation(line: 3041, column: 7, scope: !5673)
!5694 = !DILocation(line: 3042, column: 5, scope: !5673)
!5695 = !DILocation(line: 3044, column: 14, scope: !5630)
!5696 = !DILocation(line: 3044, column: 3, scope: !5630)
!5697 = !DILocation(line: 3045, column: 14, scope: !5630)
!5698 = !DILocation(line: 3045, column: 3, scope: !5630)
!5699 = !DILocation(line: 3046, column: 10, scope: !5630)
!5700 = !DILocation(line: 3046, column: 3, scope: !5630)
!5701 = !DILocation(line: 3047, column: 1, scope: !5630)
!5702 = distinct !DISubprogram(name: "mpz_pow_ui", scope: !3, file: !3, line: 3053, type: !2842, scopeLine: 3054, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!5703 = !DILocalVariable(name: "r", arg: 1, scope: !5702, file: !3, line: 3053, type: !1838)
!5704 = !DILocation(line: 3053, column: 19, scope: !5702)
!5705 = !DILocalVariable(name: "b", arg: 2, scope: !5702, file: !3, line: 3053, type: !1950)
!5706 = !DILocation(line: 3053, column: 34, scope: !5702)
!5707 = !DILocalVariable(name: "e", arg: 3, scope: !5702, file: !3, line: 3053, type: !29)
!5708 = !DILocation(line: 3053, column: 51, scope: !5702)
!5709 = !DILocalVariable(name: "bit", scope: !5702, file: !3, line: 3055, type: !29)
!5710 = !DILocation(line: 3055, column: 17, scope: !5702)
!5711 = !DILocalVariable(name: "tr", scope: !5702, file: !3, line: 3056, type: !3319)
!5712 = !DILocation(line: 3056, column: 9, scope: !5702)
!5713 = !DILocation(line: 3057, column: 20, scope: !5702)
!5714 = !DILocation(line: 3057, column: 3, scope: !5702)
!5715 = !DILocation(line: 3059, column: 7, scope: !5702)
!5716 = !DILocation(line: 3060, column: 3, scope: !5702)
!5717 = !DILocation(line: 3062, column: 16, scope: !5718)
!5718 = distinct !DILexicalBlock(scope: !5702, file: !3, line: 3061, column: 5)
!5719 = !DILocation(line: 3062, column: 20, scope: !5718)
!5720 = !DILocation(line: 3062, column: 24, scope: !5718)
!5721 = !DILocation(line: 3062, column: 7, scope: !5718)
!5722 = !DILocation(line: 3063, column: 11, scope: !5723)
!5723 = distinct !DILexicalBlock(scope: !5718, file: !3, line: 3063, column: 11)
!5724 = !DILocation(line: 3063, column: 15, scope: !5723)
!5725 = !DILocation(line: 3063, column: 13, scope: !5723)
!5726 = !DILocation(line: 3063, column: 11, scope: !5718)
!5727 = !DILocation(line: 3064, column: 11, scope: !5723)
!5728 = !DILocation(line: 3064, column: 15, scope: !5723)
!5729 = !DILocation(line: 3064, column: 19, scope: !5723)
!5730 = !DILocation(line: 3064, column: 2, scope: !5723)
!5731 = !DILocation(line: 3065, column: 11, scope: !5718)
!5732 = !DILocation(line: 3066, column: 5, scope: !5718)
!5733 = !DILocation(line: 3067, column: 10, scope: !5702)
!5734 = !DILocation(line: 3067, column: 14, scope: !5702)
!5735 = distinct !{!5735, !5716, !5736}
!5736 = !DILocation(line: 3067, column: 17, scope: !5702)
!5737 = !DILocation(line: 3069, column: 13, scope: !5702)
!5738 = !DILocation(line: 3069, column: 16, scope: !5702)
!5739 = !DILocation(line: 3069, column: 3, scope: !5702)
!5740 = !DILocation(line: 3070, column: 14, scope: !5702)
!5741 = !DILocation(line: 3070, column: 3, scope: !5702)
!5742 = !DILocation(line: 3071, column: 1, scope: !5702)
!5743 = distinct !DISubprogram(name: "mpz_ui_pow_ui", scope: !3, file: !3, line: 3074, type: !5744, scopeLine: 3075, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!5744 = !DISubroutineType(types: !5745)
!5745 = !{null, !1838, !29, !29}
!5746 = !DILocalVariable(name: "r", arg: 1, scope: !5743, file: !3, line: 3074, type: !1838)
!5747 = !DILocation(line: 3074, column: 22, scope: !5743)
!5748 = !DILocalVariable(name: "blimb", arg: 2, scope: !5743, file: !3, line: 3074, type: !29)
!5749 = !DILocation(line: 3074, column: 39, scope: !5743)
!5750 = !DILocalVariable(name: "e", arg: 3, scope: !5743, file: !3, line: 3074, type: !29)
!5751 = !DILocation(line: 3074, column: 60, scope: !5743)
!5752 = !DILocalVariable(name: "b", scope: !5743, file: !3, line: 3076, type: !3319)
!5753 = !DILocation(line: 3076, column: 9, scope: !5743)
!5754 = !DILocation(line: 3077, column: 20, scope: !5743)
!5755 = !DILocation(line: 3077, column: 23, scope: !5743)
!5756 = !DILocation(line: 3077, column: 3, scope: !5743)
!5757 = !DILocation(line: 3078, column: 15, scope: !5743)
!5758 = !DILocation(line: 3078, column: 18, scope: !5743)
!5759 = !DILocation(line: 3078, column: 21, scope: !5743)
!5760 = !DILocation(line: 3078, column: 3, scope: !5743)
!5761 = !DILocation(line: 3079, column: 14, scope: !5743)
!5762 = !DILocation(line: 3079, column: 3, scope: !5743)
!5763 = !DILocation(line: 3080, column: 1, scope: !5743)
!5764 = distinct !DISubprogram(name: "mpz_powm", scope: !3, file: !3, line: 3083, type: !5765, scopeLine: 3084, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!5765 = !DISubroutineType(types: !5766)
!5766 = !{null, !1838, !1950, !1950, !1950}
!5767 = !DILocalVariable(name: "r", arg: 1, scope: !5764, file: !3, line: 3083, type: !1838)
!5768 = !DILocation(line: 3083, column: 17, scope: !5764)
!5769 = !DILocalVariable(name: "b", arg: 2, scope: !5764, file: !3, line: 3083, type: !1950)
!5770 = !DILocation(line: 3083, column: 32, scope: !5764)
!5771 = !DILocalVariable(name: "e", arg: 3, scope: !5764, file: !3, line: 3083, type: !1950)
!5772 = !DILocation(line: 3083, column: 47, scope: !5764)
!5773 = !DILocalVariable(name: "m", arg: 4, scope: !5764, file: !3, line: 3083, type: !1950)
!5774 = !DILocation(line: 3083, column: 62, scope: !5764)
!5775 = !DILocalVariable(name: "tr", scope: !5764, file: !3, line: 3085, type: !3319)
!5776 = !DILocation(line: 3085, column: 9, scope: !5764)
!5777 = !DILocalVariable(name: "base", scope: !5764, file: !3, line: 3086, type: !3319)
!5778 = !DILocation(line: 3086, column: 9, scope: !5764)
!5779 = !DILocalVariable(name: "en", scope: !5764, file: !3, line: 3087, type: !184)
!5780 = !DILocation(line: 3087, column: 13, scope: !5764)
!5781 = !DILocalVariable(name: "mn", scope: !5764, file: !3, line: 3087, type: !184)
!5782 = !DILocation(line: 3087, column: 17, scope: !5764)
!5783 = !DILocalVariable(name: "mp", scope: !5764, file: !3, line: 3088, type: !181)
!5784 = !DILocation(line: 3088, column: 13, scope: !5764)
!5785 = !DILocalVariable(name: "minv", scope: !5764, file: !3, line: 3089, type: !1481)
!5786 = !DILocation(line: 3089, column: 26, scope: !5764)
!5787 = !DILocalVariable(name: "shift", scope: !5764, file: !3, line: 3090, type: !6)
!5788 = !DILocation(line: 3090, column: 12, scope: !5764)
!5789 = !DILocalVariable(name: "tp", scope: !5764, file: !3, line: 3091, type: !31)
!5790 = !DILocation(line: 3091, column: 10, scope: !5764)
!5791 = !DILocation(line: 3093, column: 8, scope: !5764)
!5792 = !DILocation(line: 3093, column: 6, scope: !5764)
!5793 = !DILocation(line: 3094, column: 8, scope: !5764)
!5794 = !DILocation(line: 3094, column: 6, scope: !5764)
!5795 = !DILocation(line: 3095, column: 7, scope: !5796)
!5796 = distinct !DILexicalBlock(scope: !5764, file: !3, line: 3095, column: 7)
!5797 = !DILocation(line: 3095, column: 10, scope: !5796)
!5798 = !DILocation(line: 3095, column: 7, scope: !5764)
!5799 = !DILocation(line: 3096, column: 5, scope: !5796)
!5800 = !DILocation(line: 3098, column: 7, scope: !5801)
!5801 = distinct !DILexicalBlock(scope: !5764, file: !3, line: 3098, column: 7)
!5802 = !DILocation(line: 3098, column: 10, scope: !5801)
!5803 = !DILocation(line: 3098, column: 7, scope: !5764)
!5804 = !DILocation(line: 3100, column: 19, scope: !5805)
!5805 = distinct !DILexicalBlock(scope: !5801, file: !3, line: 3099, column: 5)
!5806 = !DILocation(line: 3100, column: 7, scope: !5805)
!5807 = !DILocation(line: 3101, column: 7, scope: !5805)
!5808 = !DILocation(line: 3104, column: 8, scope: !5764)
!5809 = !DILocation(line: 3104, column: 11, scope: !5764)
!5810 = !DILocation(line: 3104, column: 6, scope: !5764)
!5811 = !DILocation(line: 3105, column: 29, scope: !5764)
!5812 = !DILocation(line: 3105, column: 33, scope: !5764)
!5813 = !DILocation(line: 3105, column: 3, scope: !5764)
!5814 = !DILocation(line: 3106, column: 16, scope: !5764)
!5815 = !DILocation(line: 3106, column: 9, scope: !5764)
!5816 = !DILocation(line: 3108, column: 7, scope: !5817)
!5817 = distinct !DILexicalBlock(scope: !5764, file: !3, line: 3108, column: 7)
!5818 = !DILocation(line: 3108, column: 13, scope: !5817)
!5819 = !DILocation(line: 3108, column: 7, scope: !5764)
!5820 = !DILocation(line: 3112, column: 12, scope: !5821)
!5821 = distinct !DILexicalBlock(scope: !5817, file: !3, line: 3109, column: 5)
!5822 = !DILocation(line: 3112, column: 18, scope: !5821)
!5823 = !DILocation(line: 3114, column: 30, scope: !5821)
!5824 = !DILocation(line: 3114, column: 12, scope: !5821)
!5825 = !DILocation(line: 3114, column: 10, scope: !5821)
!5826 = !DILocation(line: 3115, column: 7, scope: !5821)
!5827 = !DILocalVariable(name: "__cy", scope: !5828, file: !3, line: 3115, type: !27)
!5828 = distinct !DILexicalBlock(scope: !5821, file: !3, line: 3115, column: 7)
!5829 = !DILocation(line: 3115, column: 7, scope: !5828)
!5830 = !DILocation(line: 3116, column: 12, scope: !5821)
!5831 = !DILocation(line: 3116, column: 10, scope: !5821)
!5832 = !DILocation(line: 3117, column: 5, scope: !5821)
!5833 = !DILocation(line: 3119, column: 13, scope: !5764)
!5834 = !DILocation(line: 3119, column: 3, scope: !5764)
!5835 = !DILocation(line: 3121, column: 7, scope: !5836)
!5836 = distinct !DILexicalBlock(scope: !5764, file: !3, line: 3121, column: 7)
!5837 = !DILocation(line: 3121, column: 10, scope: !5836)
!5838 = !DILocation(line: 3121, column: 19, scope: !5836)
!5839 = !DILocation(line: 3121, column: 7, scope: !5764)
!5840 = !DILocation(line: 3123, column: 24, scope: !5841)
!5841 = distinct !DILexicalBlock(scope: !5842, file: !3, line: 3123, column: 11)
!5842 = distinct !DILexicalBlock(scope: !5836, file: !3, line: 3122, column: 5)
!5843 = !DILocation(line: 3123, column: 30, scope: !5841)
!5844 = !DILocation(line: 3123, column: 33, scope: !5841)
!5845 = !DILocation(line: 3123, column: 12, scope: !5841)
!5846 = !DILocation(line: 3123, column: 11, scope: !5842)
!5847 = !DILocation(line: 3124, column: 2, scope: !5841)
!5848 = !DILocation(line: 3125, column: 5, scope: !5842)
!5849 = !DILocalVariable(name: "bn", scope: !5850, file: !3, line: 3128, type: !184)
!5850 = distinct !DILexicalBlock(scope: !5836, file: !3, line: 3127, column: 5)
!5851 = !DILocation(line: 3128, column: 17, scope: !5850)
!5852 = !DILocation(line: 3129, column: 16, scope: !5850)
!5853 = !DILocation(line: 3129, column: 22, scope: !5850)
!5854 = !DILocation(line: 3129, column: 7, scope: !5850)
!5855 = !DILocation(line: 3131, column: 18, scope: !5850)
!5856 = !DILocation(line: 3131, column: 12, scope: !5850)
!5857 = !DILocation(line: 3131, column: 10, scope: !5850)
!5858 = !DILocation(line: 3132, column: 11, scope: !5859)
!5859 = distinct !DILexicalBlock(scope: !5850, file: !3, line: 3132, column: 11)
!5860 = !DILocation(line: 3132, column: 17, scope: !5859)
!5861 = !DILocation(line: 3132, column: 14, scope: !5859)
!5862 = !DILocation(line: 3132, column: 11, scope: !5850)
!5863 = !DILocation(line: 3134, column: 35, scope: !5864)
!5864 = distinct !DILexicalBlock(scope: !5859, file: !3, line: 3133, column: 2)
!5865 = !DILocation(line: 3134, column: 48, scope: !5864)
!5866 = !DILocation(line: 3134, column: 42, scope: !5864)
!5867 = !DILocation(line: 3134, column: 58, scope: !5864)
!5868 = !DILocation(line: 3134, column: 62, scope: !5864)
!5869 = !DILocation(line: 3134, column: 4, scope: !5864)
!5870 = !DILocation(line: 3135, column: 9, scope: !5864)
!5871 = !DILocation(line: 3135, column: 7, scope: !5864)
!5872 = !DILocation(line: 3136, column: 2, scope: !5864)
!5873 = !DILocation(line: 3141, column: 11, scope: !5874)
!5874 = distinct !DILexicalBlock(scope: !5850, file: !3, line: 3141, column: 11)
!5875 = !DILocation(line: 3141, column: 14, scope: !5874)
!5876 = !DILocation(line: 3141, column: 23, scope: !5874)
!5877 = !DILocation(line: 3141, column: 11, scope: !5850)
!5878 = !DILocalVariable(name: "bp", scope: !5879, file: !3, line: 3143, type: !31)
!5879 = distinct !DILexicalBlock(scope: !5874, file: !3, line: 3142, column: 2)
!5880 = !DILocation(line: 3143, column: 11, scope: !5879)
!5881 = !DILocation(line: 3143, column: 16, scope: !5879)
!5882 = !DILocation(line: 3144, column: 4, scope: !5879)
!5883 = !DILocalVariable(name: "__cy", scope: !5884, file: !3, line: 3144, type: !27)
!5884 = distinct !DILexicalBlock(scope: !5879, file: !3, line: 3144, column: 4)
!5885 = !DILocation(line: 3144, column: 4, scope: !5884)
!5886 = !DILocation(line: 3145, column: 9, scope: !5879)
!5887 = !DILocation(line: 3145, column: 7, scope: !5879)
!5888 = !DILocation(line: 3146, column: 2, scope: !5879)
!5889 = !DILocation(line: 3147, column: 51, scope: !5850)
!5890 = !DILocation(line: 3147, column: 58, scope: !5850)
!5891 = !DILocation(line: 3147, column: 24, scope: !5850)
!5892 = !DILocation(line: 3147, column: 13, scope: !5850)
!5893 = !DILocation(line: 3147, column: 22, scope: !5850)
!5894 = !DILocation(line: 3149, column: 20, scope: !5764)
!5895 = !DILocation(line: 3149, column: 3, scope: !5764)
!5896 = !DILocation(line: 3151, column: 3, scope: !5764)
!5897 = !DILocation(line: 3151, column: 12, scope: !5764)
!5898 = !DILocation(line: 3151, column: 15, scope: !5764)
!5899 = !DILocalVariable(name: "w", scope: !5900, file: !3, line: 3153, type: !27)
!5900 = distinct !DILexicalBlock(scope: !5764, file: !3, line: 3152, column: 5)
!5901 = !DILocation(line: 3153, column: 17, scope: !5900)
!5902 = !DILocation(line: 3153, column: 21, scope: !5900)
!5903 = !DILocation(line: 3153, column: 24, scope: !5900)
!5904 = !DILocation(line: 3153, column: 30, scope: !5900)
!5905 = !DILocalVariable(name: "bit", scope: !5900, file: !3, line: 3154, type: !27)
!5906 = !DILocation(line: 3154, column: 17, scope: !5900)
!5907 = !DILocation(line: 3156, column: 11, scope: !5900)
!5908 = !DILocation(line: 3157, column: 7, scope: !5900)
!5909 = !DILocation(line: 3159, column: 13, scope: !5910)
!5910 = distinct !DILexicalBlock(scope: !5900, file: !3, line: 3158, column: 2)
!5911 = !DILocation(line: 3159, column: 17, scope: !5910)
!5912 = !DILocation(line: 3159, column: 21, scope: !5910)
!5913 = !DILocation(line: 3159, column: 4, scope: !5910)
!5914 = !DILocation(line: 3160, column: 8, scope: !5915)
!5915 = distinct !DILexicalBlock(scope: !5910, file: !3, line: 3160, column: 8)
!5916 = !DILocation(line: 3160, column: 12, scope: !5915)
!5917 = !DILocation(line: 3160, column: 10, scope: !5915)
!5918 = !DILocation(line: 3160, column: 8, scope: !5910)
!5919 = !DILocation(line: 3161, column: 15, scope: !5915)
!5920 = !DILocation(line: 3161, column: 19, scope: !5915)
!5921 = !DILocation(line: 3161, column: 23, scope: !5915)
!5922 = !DILocation(line: 3161, column: 6, scope: !5915)
!5923 = !DILocation(line: 3162, column: 12, scope: !5924)
!5924 = distinct !DILexicalBlock(scope: !5910, file: !3, line: 3162, column: 8)
!5925 = !DILocation(line: 3162, column: 8, scope: !5924)
!5926 = !DILocation(line: 3162, column: 23, scope: !5924)
!5927 = !DILocation(line: 3162, column: 21, scope: !5924)
!5928 = !DILocation(line: 3162, column: 8, scope: !5910)
!5929 = !DILocation(line: 3164, column: 37, scope: !5930)
!5930 = distinct !DILexicalBlock(scope: !5924, file: !3, line: 3163, column: 6)
!5931 = !DILocation(line: 3164, column: 48, scope: !5930)
!5932 = !DILocation(line: 3164, column: 44, scope: !5930)
!5933 = !DILocation(line: 3164, column: 58, scope: !5930)
!5934 = !DILocation(line: 3164, column: 62, scope: !5930)
!5935 = !DILocation(line: 3164, column: 8, scope: !5930)
!5936 = !DILocation(line: 3165, column: 48, scope: !5930)
!5937 = !DILocation(line: 3165, column: 55, scope: !5930)
!5938 = !DILocation(line: 3165, column: 23, scope: !5930)
!5939 = !DILocation(line: 3165, column: 12, scope: !5930)
!5940 = !DILocation(line: 3165, column: 21, scope: !5930)
!5941 = !DILocation(line: 3166, column: 6, scope: !5930)
!5942 = !DILocation(line: 3167, column: 8, scope: !5910)
!5943 = !DILocation(line: 3168, column: 2, scope: !5910)
!5944 = !DILocation(line: 3169, column: 14, scope: !5900)
!5945 = !DILocation(line: 3169, column: 18, scope: !5900)
!5946 = distinct !{!5946, !5908, !5947}
!5947 = !DILocation(line: 3169, column: 21, scope: !5900)
!5948 = distinct !{!5948, !5896, !5949}
!5949 = !DILocation(line: 3170, column: 5, scope: !5764)
!5950 = !DILocation(line: 3173, column: 11, scope: !5951)
!5951 = distinct !DILexicalBlock(scope: !5764, file: !3, line: 3173, column: 7)
!5952 = !DILocation(line: 3173, column: 7, scope: !5951)
!5953 = !DILocation(line: 3173, column: 23, scope: !5951)
!5954 = !DILocation(line: 3173, column: 20, scope: !5951)
!5955 = !DILocation(line: 3173, column: 7, scope: !5764)
!5956 = !DILocation(line: 3175, column: 20, scope: !5957)
!5957 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 3174, column: 5)
!5958 = !DILocation(line: 3175, column: 12, scope: !5957)
!5959 = !DILocation(line: 3175, column: 18, scope: !5957)
!5960 = !DILocation(line: 3176, column: 36, scope: !5957)
!5961 = !DILocation(line: 3176, column: 47, scope: !5957)
!5962 = !DILocation(line: 3176, column: 43, scope: !5957)
!5963 = !DILocation(line: 3176, column: 57, scope: !5957)
!5964 = !DILocation(line: 3176, column: 61, scope: !5957)
!5965 = !DILocation(line: 3176, column: 7, scope: !5957)
!5966 = !DILocation(line: 3177, column: 47, scope: !5957)
!5967 = !DILocation(line: 3177, column: 54, scope: !5957)
!5968 = !DILocation(line: 3177, column: 22, scope: !5957)
!5969 = !DILocation(line: 3177, column: 11, scope: !5957)
!5970 = !DILocation(line: 3177, column: 20, scope: !5957)
!5971 = !DILocation(line: 3178, column: 5, scope: !5957)
!5972 = !DILocation(line: 3179, column: 7, scope: !5973)
!5973 = distinct !DILexicalBlock(scope: !5764, file: !3, line: 3179, column: 7)
!5974 = !DILocation(line: 3179, column: 7, scope: !5764)
!5975 = !DILocation(line: 3180, column: 5, scope: !5973)
!5976 = !DILocation(line: 3182, column: 13, scope: !5764)
!5977 = !DILocation(line: 3182, column: 16, scope: !5764)
!5978 = !DILocation(line: 3182, column: 3, scope: !5764)
!5979 = !DILocation(line: 3183, column: 14, scope: !5764)
!5980 = !DILocation(line: 3183, column: 3, scope: !5764)
!5981 = !DILocation(line: 3184, column: 14, scope: !5764)
!5982 = !DILocation(line: 3184, column: 3, scope: !5764)
!5983 = !DILocation(line: 3185, column: 1, scope: !5764)
!5984 = distinct !DISubprogram(name: "gmp_die", scope: !3, file: !3, line: 244, type: !5985, scopeLine: 245, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!5985 = !DISubroutineType(types: !5986)
!5986 = !{null, !5987}
!5987 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5988, size: 64)
!5988 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5989)
!5989 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5990 = !DILocalVariable(name: "msg", arg: 1, scope: !5984, file: !3, line: 244, type: !5987)
!5991 = !DILocation(line: 244, column: 22, scope: !5984)
!5992 = !DILocation(line: 246, column: 12, scope: !5984)
!5993 = !DILocation(line: 246, column: 28, scope: !5984)
!5994 = !DILocation(line: 246, column: 3, scope: !5984)
!5995 = !DILocation(line: 247, column: 3, scope: !5984)
!5996 = distinct !DISubprogram(name: "mpn_div_qr_invert", scope: !3, file: !3, line: 828, type: !5997, scopeLine: 830, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!5997 = !DISubroutineType(types: !5998)
!5998 = !{null, !5999, !181, !184}
!5999 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1481, size: 64)
!6000 = !DILocalVariable(name: "inv", arg: 1, scope: !5996, file: !3, line: 828, type: !5999)
!6001 = !DILocation(line: 828, column: 44, scope: !5996)
!6002 = !DILocalVariable(name: "dp", arg: 2, scope: !5996, file: !3, line: 829, type: !181)
!6003 = !DILocation(line: 829, column: 16, scope: !5996)
!6004 = !DILocalVariable(name: "dn", arg: 3, scope: !5996, file: !3, line: 829, type: !184)
!6005 = !DILocation(line: 829, column: 30, scope: !5996)
!6006 = !DILocation(line: 833, column: 7, scope: !6007)
!6007 = distinct !DILexicalBlock(scope: !5996, file: !3, line: 833, column: 7)
!6008 = !DILocation(line: 833, column: 10, scope: !6007)
!6009 = !DILocation(line: 833, column: 7, scope: !5996)
!6010 = !DILocation(line: 834, column: 26, scope: !6007)
!6011 = !DILocation(line: 834, column: 31, scope: !6007)
!6012 = !DILocation(line: 834, column: 5, scope: !6007)
!6013 = !DILocation(line: 835, column: 12, scope: !6014)
!6014 = distinct !DILexicalBlock(scope: !6007, file: !3, line: 835, column: 12)
!6015 = !DILocation(line: 835, column: 15, scope: !6014)
!6016 = !DILocation(line: 835, column: 12, scope: !6007)
!6017 = !DILocation(line: 836, column: 26, scope: !6014)
!6018 = !DILocation(line: 836, column: 31, scope: !6014)
!6019 = !DILocation(line: 836, column: 38, scope: !6014)
!6020 = !DILocation(line: 836, column: 5, scope: !6014)
!6021 = !DILocalVariable(name: "shift", scope: !6022, file: !3, line: 839, type: !6)
!6022 = distinct !DILexicalBlock(scope: !6014, file: !3, line: 838, column: 5)
!6023 = !DILocation(line: 839, column: 16, scope: !6022)
!6024 = !DILocalVariable(name: "d1", scope: !6022, file: !3, line: 840, type: !27)
!6025 = !DILocation(line: 840, column: 17, scope: !6022)
!6026 = !DILocalVariable(name: "d0", scope: !6022, file: !3, line: 840, type: !27)
!6027 = !DILocation(line: 840, column: 21, scope: !6022)
!6028 = !DILocation(line: 842, column: 12, scope: !6022)
!6029 = !DILocation(line: 842, column: 15, scope: !6022)
!6030 = !DILocation(line: 842, column: 17, scope: !6022)
!6031 = !DILocation(line: 842, column: 10, scope: !6022)
!6032 = !DILocation(line: 843, column: 12, scope: !6022)
!6033 = !DILocation(line: 843, column: 15, scope: !6022)
!6034 = !DILocation(line: 843, column: 17, scope: !6022)
!6035 = !DILocation(line: 843, column: 10, scope: !6022)
!6036 = !DILocation(line: 845, column: 7, scope: !6022)
!6037 = !DILocalVariable(name: "__clz_x", scope: !6038, file: !3, line: 845, type: !27)
!6038 = distinct !DILexicalBlock(scope: !6022, file: !3, line: 845, column: 7)
!6039 = !DILocation(line: 845, column: 7, scope: !6038)
!6040 = !DILocalVariable(name: "__clz_c", scope: !6038, file: !3, line: 845, type: !6)
!6041 = !DILocation(line: 845, column: 7, scope: !6042)
!6042 = distinct !DILexicalBlock(scope: !6038, file: !3, line: 845, column: 7)
!6043 = !DILocation(line: 845, column: 7, scope: !6044)
!6044 = distinct !DILexicalBlock(scope: !6042, file: !3, line: 845, column: 7)
!6045 = distinct !{!6045, !6041, !6041}
!6046 = !DILocation(line: 845, column: 7, scope: !6047)
!6047 = distinct !DILexicalBlock(scope: !6048, file: !3, line: 845, column: 7)
!6048 = distinct !DILexicalBlock(scope: !6038, file: !3, line: 845, column: 7)
!6049 = !DILocation(line: 845, column: 7, scope: !6048)
!6050 = distinct !{!6050, !6049, !6049}
!6051 = !DILocation(line: 846, column: 20, scope: !6022)
!6052 = !DILocation(line: 846, column: 7, scope: !6022)
!6053 = !DILocation(line: 846, column: 12, scope: !6022)
!6054 = !DILocation(line: 846, column: 18, scope: !6022)
!6055 = !DILocation(line: 847, column: 11, scope: !6056)
!6056 = distinct !DILexicalBlock(scope: !6022, file: !3, line: 847, column: 11)
!6057 = !DILocation(line: 847, column: 17, scope: !6056)
!6058 = !DILocation(line: 847, column: 11, scope: !6022)
!6059 = !DILocation(line: 849, column: 10, scope: !6060)
!6060 = distinct !DILexicalBlock(scope: !6056, file: !3, line: 848, column: 2)
!6061 = !DILocation(line: 849, column: 16, scope: !6060)
!6062 = !DILocation(line: 849, column: 13, scope: !6060)
!6063 = !DILocation(line: 849, column: 26, scope: !6060)
!6064 = !DILocation(line: 849, column: 49, scope: !6060)
!6065 = !DILocation(line: 849, column: 47, scope: !6060)
!6066 = !DILocation(line: 849, column: 29, scope: !6060)
!6067 = !DILocation(line: 849, column: 23, scope: !6060)
!6068 = !DILocation(line: 849, column: 7, scope: !6060)
!6069 = !DILocation(line: 850, column: 10, scope: !6060)
!6070 = !DILocation(line: 850, column: 16, scope: !6060)
!6071 = !DILocation(line: 850, column: 13, scope: !6060)
!6072 = !DILocation(line: 850, column: 26, scope: !6060)
!6073 = !DILocation(line: 850, column: 29, scope: !6060)
!6074 = !DILocation(line: 850, column: 31, scope: !6060)
!6075 = !DILocation(line: 850, column: 55, scope: !6060)
!6076 = !DILocation(line: 850, column: 53, scope: !6060)
!6077 = !DILocation(line: 850, column: 35, scope: !6060)
!6078 = !DILocation(line: 850, column: 23, scope: !6060)
!6079 = !DILocation(line: 850, column: 7, scope: !6060)
!6080 = !DILocation(line: 851, column: 2, scope: !6060)
!6081 = !DILocation(line: 852, column: 17, scope: !6022)
!6082 = !DILocation(line: 852, column: 7, scope: !6022)
!6083 = !DILocation(line: 852, column: 12, scope: !6022)
!6084 = !DILocation(line: 852, column: 15, scope: !6022)
!6085 = !DILocation(line: 853, column: 17, scope: !6022)
!6086 = !DILocation(line: 853, column: 7, scope: !6022)
!6087 = !DILocation(line: 853, column: 12, scope: !6022)
!6088 = !DILocation(line: 853, column: 15, scope: !6022)
!6089 = !DILocation(line: 854, column: 34, scope: !6022)
!6090 = !DILocation(line: 854, column: 38, scope: !6022)
!6091 = !DILocation(line: 854, column: 17, scope: !6022)
!6092 = !DILocation(line: 854, column: 7, scope: !6022)
!6093 = !DILocation(line: 854, column: 12, scope: !6022)
!6094 = !DILocation(line: 854, column: 15, scope: !6022)
!6095 = !DILocation(line: 856, column: 1, scope: !5996)
!6096 = distinct !DISubprogram(name: "mpn_div_qr_preinv", scope: !3, file: !3, line: 1051, type: !6097, scopeLine: 1054, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6097 = !DISubroutineType(types: !6098)
!6098 = !{null, !31, !31, !184, !181, !184, !6099}
!6099 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6100, size: 64)
!6100 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1481)
!6101 = !DILocalVariable(name: "qp", arg: 1, scope: !6096, file: !3, line: 1051, type: !31)
!6102 = !DILocation(line: 1051, column: 27, scope: !6096)
!6103 = !DILocalVariable(name: "np", arg: 2, scope: !6096, file: !3, line: 1051, type: !31)
!6104 = !DILocation(line: 1051, column: 38, scope: !6096)
!6105 = !DILocalVariable(name: "nn", arg: 3, scope: !6096, file: !3, line: 1051, type: !184)
!6106 = !DILocation(line: 1051, column: 52, scope: !6096)
!6107 = !DILocalVariable(name: "dp", arg: 4, scope: !6096, file: !3, line: 1052, type: !181)
!6108 = !DILocation(line: 1052, column: 16, scope: !6096)
!6109 = !DILocalVariable(name: "dn", arg: 5, scope: !6096, file: !3, line: 1052, type: !184)
!6110 = !DILocation(line: 1052, column: 30, scope: !6096)
!6111 = !DILocalVariable(name: "inv", arg: 6, scope: !6096, file: !3, line: 1053, type: !6099)
!6112 = !DILocation(line: 1053, column: 36, scope: !6096)
!6113 = !DILocation(line: 1058, column: 7, scope: !6114)
!6114 = distinct !DILexicalBlock(scope: !6096, file: !3, line: 1058, column: 7)
!6115 = !DILocation(line: 1058, column: 10, scope: !6114)
!6116 = !DILocation(line: 1058, column: 7, scope: !6096)
!6117 = !DILocation(line: 1059, column: 34, scope: !6114)
!6118 = !DILocation(line: 1059, column: 38, scope: !6114)
!6119 = !DILocation(line: 1059, column: 42, scope: !6114)
!6120 = !DILocation(line: 1059, column: 46, scope: !6114)
!6121 = !DILocation(line: 1059, column: 13, scope: !6114)
!6122 = !DILocation(line: 1059, column: 5, scope: !6114)
!6123 = !DILocation(line: 1059, column: 11, scope: !6114)
!6124 = !DILocation(line: 1060, column: 12, scope: !6125)
!6125 = distinct !DILexicalBlock(scope: !6114, file: !3, line: 1060, column: 12)
!6126 = !DILocation(line: 1060, column: 15, scope: !6125)
!6127 = !DILocation(line: 1060, column: 12, scope: !6114)
!6128 = !DILocation(line: 1061, column: 26, scope: !6125)
!6129 = !DILocation(line: 1061, column: 30, scope: !6125)
!6130 = !DILocation(line: 1061, column: 34, scope: !6125)
!6131 = !DILocation(line: 1061, column: 38, scope: !6125)
!6132 = !DILocation(line: 1061, column: 42, scope: !6125)
!6133 = !DILocation(line: 1061, column: 5, scope: !6125)
!6134 = !DILocalVariable(name: "nh", scope: !6135, file: !3, line: 1064, type: !27)
!6135 = distinct !DILexicalBlock(scope: !6125, file: !3, line: 1063, column: 5)
!6136 = !DILocation(line: 1064, column: 17, scope: !6135)
!6137 = !DILocalVariable(name: "shift", scope: !6135, file: !3, line: 1065, type: !6)
!6138 = !DILocation(line: 1065, column: 16, scope: !6135)
!6139 = !DILocation(line: 1071, column: 15, scope: !6135)
!6140 = !DILocation(line: 1071, column: 20, scope: !6135)
!6141 = !DILocation(line: 1071, column: 13, scope: !6135)
!6142 = !DILocation(line: 1072, column: 11, scope: !6143)
!6143 = distinct !DILexicalBlock(scope: !6135, file: !3, line: 1072, column: 11)
!6144 = !DILocation(line: 1072, column: 17, scope: !6143)
!6145 = !DILocation(line: 1072, column: 11, scope: !6135)
!6146 = !DILocation(line: 1073, column: 19, scope: !6143)
!6147 = !DILocation(line: 1073, column: 23, scope: !6143)
!6148 = !DILocation(line: 1073, column: 27, scope: !6143)
!6149 = !DILocation(line: 1073, column: 31, scope: !6143)
!6150 = !DILocation(line: 1073, column: 7, scope: !6143)
!6151 = !DILocation(line: 1073, column: 5, scope: !6143)
!6152 = !DILocation(line: 1073, column: 2, scope: !6143)
!6153 = !DILocation(line: 1075, column: 5, scope: !6143)
!6154 = !DILocation(line: 1077, column: 23, scope: !6135)
!6155 = !DILocation(line: 1077, column: 27, scope: !6135)
!6156 = !DILocation(line: 1077, column: 31, scope: !6135)
!6157 = !DILocation(line: 1077, column: 35, scope: !6135)
!6158 = !DILocation(line: 1077, column: 39, scope: !6135)
!6159 = !DILocation(line: 1077, column: 43, scope: !6135)
!6160 = !DILocation(line: 1077, column: 47, scope: !6135)
!6161 = !DILocation(line: 1077, column: 52, scope: !6135)
!6162 = !DILocation(line: 1077, column: 7, scope: !6135)
!6163 = !DILocation(line: 1079, column: 11, scope: !6164)
!6164 = distinct !DILexicalBlock(scope: !6135, file: !3, line: 1079, column: 11)
!6165 = !DILocation(line: 1079, column: 17, scope: !6164)
!6166 = !DILocation(line: 1079, column: 11, scope: !6135)
!6167 = !DILocation(line: 1080, column: 2, scope: !6164)
!6168 = !DILocalVariable(name: "__cy", scope: !6169, file: !3, line: 1080, type: !27)
!6169 = distinct !DILexicalBlock(scope: !6164, file: !3, line: 1080, column: 2)
!6170 = !DILocation(line: 1080, column: 2, scope: !6169)
!6171 = !DILocation(line: 1082, column: 1, scope: !6096)
!6172 = distinct !DISubprogram(name: "mpz_powm_ui", scope: !3, file: !3, line: 3188, type: !6173, scopeLine: 3189, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6173 = !DISubroutineType(types: !6174)
!6174 = !{null, !1838, !1950, !29, !1950}
!6175 = !DILocalVariable(name: "r", arg: 1, scope: !6172, file: !3, line: 3188, type: !1838)
!6176 = !DILocation(line: 3188, column: 20, scope: !6172)
!6177 = !DILocalVariable(name: "b", arg: 2, scope: !6172, file: !3, line: 3188, type: !1950)
!6178 = !DILocation(line: 3188, column: 35, scope: !6172)
!6179 = !DILocalVariable(name: "elimb", arg: 3, scope: !6172, file: !3, line: 3188, type: !29)
!6180 = !DILocation(line: 3188, column: 52, scope: !6172)
!6181 = !DILocalVariable(name: "m", arg: 4, scope: !6172, file: !3, line: 3188, type: !1950)
!6182 = !DILocation(line: 3188, column: 71, scope: !6172)
!6183 = !DILocalVariable(name: "e", scope: !6172, file: !3, line: 3190, type: !3319)
!6184 = !DILocation(line: 3190, column: 9, scope: !6172)
!6185 = !DILocation(line: 3191, column: 20, scope: !6172)
!6186 = !DILocation(line: 3191, column: 23, scope: !6172)
!6187 = !DILocation(line: 3191, column: 3, scope: !6172)
!6188 = !DILocation(line: 3192, column: 13, scope: !6172)
!6189 = !DILocation(line: 3192, column: 16, scope: !6172)
!6190 = !DILocation(line: 3192, column: 19, scope: !6172)
!6191 = !DILocation(line: 3192, column: 22, scope: !6172)
!6192 = !DILocation(line: 3192, column: 3, scope: !6172)
!6193 = !DILocation(line: 3193, column: 14, scope: !6172)
!6194 = !DILocation(line: 3193, column: 3, scope: !6172)
!6195 = !DILocation(line: 3194, column: 1, scope: !6172)
!6196 = distinct !DISubprogram(name: "mpz_rootrem", scope: !3, file: !3, line: 3198, type: !6197, scopeLine: 3199, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6197 = !DISubroutineType(types: !6198)
!6198 = !{null, !1838, !1838, !1950, !29}
!6199 = !DILocalVariable(name: "x", arg: 1, scope: !6196, file: !3, line: 3198, type: !1838)
!6200 = !DILocation(line: 3198, column: 20, scope: !6196)
!6201 = !DILocalVariable(name: "r", arg: 2, scope: !6196, file: !3, line: 3198, type: !1838)
!6202 = !DILocation(line: 3198, column: 29, scope: !6196)
!6203 = !DILocalVariable(name: "y", arg: 3, scope: !6196, file: !3, line: 3198, type: !1950)
!6204 = !DILocation(line: 3198, column: 44, scope: !6196)
!6205 = !DILocalVariable(name: "z", arg: 4, scope: !6196, file: !3, line: 3198, type: !29)
!6206 = !DILocation(line: 3198, column: 61, scope: !6196)
!6207 = !DILocalVariable(name: "sgn", scope: !6196, file: !3, line: 3200, type: !34)
!6208 = !DILocation(line: 3200, column: 7, scope: !6196)
!6209 = !DILocalVariable(name: "t", scope: !6196, file: !3, line: 3201, type: !3319)
!6210 = !DILocation(line: 3201, column: 9, scope: !6196)
!6211 = !DILocalVariable(name: "u", scope: !6196, file: !3, line: 3201, type: !3319)
!6212 = !DILocation(line: 3201, column: 12, scope: !6196)
!6213 = !DILocation(line: 3203, column: 9, scope: !6196)
!6214 = !DILocation(line: 3203, column: 12, scope: !6196)
!6215 = !DILocation(line: 3203, column: 21, scope: !6196)
!6216 = !DILocation(line: 3203, column: 7, scope: !6196)
!6217 = !DILocation(line: 3204, column: 9, scope: !6218)
!6218 = distinct !DILexicalBlock(scope: !6196, file: !3, line: 3204, column: 7)
!6219 = !DILocation(line: 3204, column: 8, scope: !6218)
!6220 = !DILocation(line: 3204, column: 13, scope: !6218)
!6221 = !DILocation(line: 3204, column: 11, scope: !6218)
!6222 = !DILocation(line: 3204, column: 18, scope: !6218)
!6223 = !DILocation(line: 3204, column: 7, scope: !6196)
!6224 = !DILocation(line: 3205, column: 5, scope: !6218)
!6225 = !DILocation(line: 3206, column: 7, scope: !6226)
!6226 = distinct !DILexicalBlock(scope: !6196, file: !3, line: 3206, column: 7)
!6227 = !DILocation(line: 3206, column: 9, scope: !6226)
!6228 = !DILocation(line: 3206, column: 7, scope: !6196)
!6229 = !DILocation(line: 3207, column: 5, scope: !6226)
!6230 = !DILocation(line: 3209, column: 22, scope: !6231)
!6231 = distinct !DILexicalBlock(scope: !6196, file: !3, line: 3209, column: 7)
!6232 = !DILocation(line: 3209, column: 7, scope: !6231)
!6233 = !DILocation(line: 3209, column: 28, scope: !6231)
!6234 = !DILocation(line: 3209, column: 7, scope: !6196)
!6235 = !DILocation(line: 3210, column: 9, scope: !6236)
!6236 = distinct !DILexicalBlock(scope: !6237, file: !3, line: 3210, column: 9)
!6237 = distinct !DILexicalBlock(scope: !6231, file: !3, line: 3209, column: 34)
!6238 = !DILocation(line: 3210, column: 9, scope: !6237)
!6239 = !DILocation(line: 3211, column: 16, scope: !6236)
!6240 = !DILocation(line: 3211, column: 19, scope: !6236)
!6241 = !DILocation(line: 3211, column: 7, scope: !6236)
!6242 = !DILocation(line: 3212, column: 9, scope: !6243)
!6243 = distinct !DILexicalBlock(scope: !6237, file: !3, line: 3212, column: 9)
!6244 = !DILocation(line: 3212, column: 9, scope: !6237)
!6245 = !DILocation(line: 3213, column: 7, scope: !6243)
!6246 = !DILocation(line: 3213, column: 10, scope: !6243)
!6247 = !DILocation(line: 3213, column: 19, scope: !6243)
!6248 = !DILocation(line: 3214, column: 5, scope: !6237)
!6249 = !DILocation(line: 3217, column: 13, scope: !6196)
!6250 = !DILocation(line: 3217, column: 3, scope: !6196)
!6251 = !DILocalVariable(name: "tb", scope: !6252, file: !3, line: 3219, type: !35)
!6252 = distinct !DILexicalBlock(scope: !6196, file: !3, line: 3218, column: 3)
!6253 = !DILocation(line: 3219, column: 17, scope: !6252)
!6254 = !DILocation(line: 3220, column: 26, scope: !6252)
!6255 = !DILocation(line: 3220, column: 10, scope: !6252)
!6256 = !DILocation(line: 3220, column: 34, scope: !6252)
!6257 = !DILocation(line: 3220, column: 32, scope: !6252)
!6258 = !DILocation(line: 3220, column: 36, scope: !6252)
!6259 = !DILocation(line: 3220, column: 8, scope: !6252)
!6260 = !DILocation(line: 3221, column: 16, scope: !6252)
!6261 = !DILocation(line: 3221, column: 19, scope: !6252)
!6262 = !DILocation(line: 3221, column: 5, scope: !6252)
!6263 = !DILocation(line: 3222, column: 17, scope: !6252)
!6264 = !DILocation(line: 3222, column: 20, scope: !6252)
!6265 = !DILocation(line: 3222, column: 5, scope: !6252)
!6266 = !DILocation(line: 3225, column: 7, scope: !6267)
!6267 = distinct !DILexicalBlock(scope: !6196, file: !3, line: 3225, column: 7)
!6268 = !DILocation(line: 3225, column: 9, scope: !6267)
!6269 = !DILocation(line: 3225, column: 7, scope: !6196)
!6270 = !DILocation(line: 3226, column: 5, scope: !6267)
!6271 = !DILocation(line: 3227, column: 17, scope: !6272)
!6272 = distinct !DILexicalBlock(scope: !6267, file: !3, line: 3226, column: 8)
!6273 = !DILocation(line: 3227, column: 20, scope: !6272)
!6274 = !DILocation(line: 3227, column: 7, scope: !6272)
!6275 = !DILocation(line: 3228, column: 19, scope: !6272)
!6276 = !DILocation(line: 3228, column: 22, scope: !6272)
!6277 = !DILocation(line: 3228, column: 25, scope: !6272)
!6278 = !DILocation(line: 3228, column: 7, scope: !6272)
!6279 = !DILocation(line: 3229, column: 16, scope: !6272)
!6280 = !DILocation(line: 3229, column: 19, scope: !6272)
!6281 = !DILocation(line: 3229, column: 22, scope: !6272)
!6282 = !DILocation(line: 3229, column: 7, scope: !6272)
!6283 = !DILocation(line: 3230, column: 24, scope: !6272)
!6284 = !DILocation(line: 3230, column: 27, scope: !6272)
!6285 = !DILocation(line: 3230, column: 7, scope: !6272)
!6286 = !DILocation(line: 3231, column: 5, scope: !6272)
!6287 = !DILocation(line: 3231, column: 26, scope: !6267)
!6288 = !DILocation(line: 3231, column: 29, scope: !6267)
!6289 = !DILocation(line: 3231, column: 14, scope: !6267)
!6290 = !DILocation(line: 3231, column: 32, scope: !6267)
!6291 = distinct !{!6291, !6270, !6292}
!6292 = !DILocation(line: 3231, column: 35, scope: !6267)
!6293 = !DILocalVariable(name: "v", scope: !6294, file: !3, line: 3233, type: !3319)
!6294 = distinct !DILexicalBlock(scope: !6267, file: !3, line: 3232, column: 21)
!6295 = !DILocation(line: 3233, column: 11, scope: !6294)
!6296 = !DILocation(line: 3235, column: 15, scope: !6294)
!6297 = !DILocation(line: 3235, column: 5, scope: !6294)
!6298 = !DILocation(line: 3236, column: 9, scope: !6299)
!6299 = distinct !DILexicalBlock(scope: !6294, file: !3, line: 3236, column: 9)
!6300 = !DILocation(line: 3236, column: 9, scope: !6294)
!6301 = !DILocation(line: 3237, column: 16, scope: !6299)
!6302 = !DILocation(line: 3237, column: 19, scope: !6299)
!6303 = !DILocation(line: 3237, column: 7, scope: !6299)
!6304 = !DILocation(line: 3239, column: 5, scope: !6294)
!6305 = !DILocation(line: 3240, column: 17, scope: !6306)
!6306 = distinct !DILexicalBlock(scope: !6294, file: !3, line: 3239, column: 8)
!6307 = !DILocation(line: 3240, column: 20, scope: !6306)
!6308 = !DILocation(line: 3240, column: 7, scope: !6306)
!6309 = !DILocation(line: 3241, column: 19, scope: !6306)
!6310 = !DILocation(line: 3241, column: 22, scope: !6306)
!6311 = !DILocation(line: 3241, column: 25, scope: !6306)
!6312 = !DILocation(line: 3241, column: 27, scope: !6306)
!6313 = !DILocation(line: 3241, column: 7, scope: !6306)
!6314 = !DILocation(line: 3242, column: 19, scope: !6306)
!6315 = !DILocation(line: 3242, column: 22, scope: !6306)
!6316 = !DILocation(line: 3242, column: 25, scope: !6306)
!6317 = !DILocation(line: 3242, column: 7, scope: !6306)
!6318 = !DILocation(line: 3243, column: 19, scope: !6306)
!6319 = !DILocation(line: 3243, column: 22, scope: !6306)
!6320 = !DILocation(line: 3243, column: 25, scope: !6306)
!6321 = !DILocation(line: 3243, column: 27, scope: !6306)
!6322 = !DILocation(line: 3243, column: 7, scope: !6306)
!6323 = !DILocation(line: 3244, column: 16, scope: !6306)
!6324 = !DILocation(line: 3244, column: 19, scope: !6306)
!6325 = !DILocation(line: 3244, column: 22, scope: !6306)
!6326 = !DILocation(line: 3244, column: 7, scope: !6306)
!6327 = !DILocation(line: 3245, column: 22, scope: !6306)
!6328 = !DILocation(line: 3245, column: 25, scope: !6306)
!6329 = !DILocation(line: 3245, column: 28, scope: !6306)
!6330 = !DILocation(line: 3245, column: 7, scope: !6306)
!6331 = !DILocation(line: 3246, column: 5, scope: !6306)
!6332 = !DILocation(line: 3246, column: 26, scope: !6294)
!6333 = !DILocation(line: 3246, column: 29, scope: !6294)
!6334 = !DILocation(line: 3246, column: 14, scope: !6294)
!6335 = !DILocation(line: 3246, column: 32, scope: !6294)
!6336 = distinct !{!6336, !6304, !6337}
!6337 = !DILocation(line: 3246, column: 35, scope: !6294)
!6338 = !DILocation(line: 3248, column: 16, scope: !6294)
!6339 = !DILocation(line: 3248, column: 5, scope: !6294)
!6340 = !DILocation(line: 3251, column: 7, scope: !6341)
!6341 = distinct !DILexicalBlock(scope: !6196, file: !3, line: 3251, column: 7)
!6342 = !DILocation(line: 3251, column: 7, scope: !6196)
!6343 = !DILocation(line: 3252, column: 17, scope: !6344)
!6344 = distinct !DILexicalBlock(scope: !6341, file: !3, line: 3251, column: 10)
!6345 = !DILocation(line: 3252, column: 20, scope: !6344)
!6346 = !DILocation(line: 3252, column: 23, scope: !6344)
!6347 = !DILocation(line: 3252, column: 5, scope: !6344)
!6348 = !DILocation(line: 3253, column: 14, scope: !6344)
!6349 = !DILocation(line: 3253, column: 17, scope: !6344)
!6350 = !DILocation(line: 3253, column: 20, scope: !6344)
!6351 = !DILocation(line: 3253, column: 5, scope: !6344)
!6352 = !DILocation(line: 3254, column: 3, scope: !6344)
!6353 = !DILocation(line: 3255, column: 7, scope: !6354)
!6354 = distinct !DILexicalBlock(scope: !6196, file: !3, line: 3255, column: 7)
!6355 = !DILocation(line: 3255, column: 7, scope: !6196)
!6356 = !DILocation(line: 3256, column: 15, scope: !6354)
!6357 = !DILocation(line: 3256, column: 18, scope: !6354)
!6358 = !DILocation(line: 3256, column: 5, scope: !6354)
!6359 = !DILocation(line: 3257, column: 14, scope: !6196)
!6360 = !DILocation(line: 3257, column: 3, scope: !6196)
!6361 = !DILocation(line: 3258, column: 14, scope: !6196)
!6362 = !DILocation(line: 3258, column: 3, scope: !6196)
!6363 = !DILocation(line: 3259, column: 1, scope: !6196)
!6364 = distinct !DISubprogram(name: "mpz_sizeinbase", scope: !3, file: !3, line: 3992, type: !6365, scopeLine: 3993, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6365 = !DISubroutineType(types: !6366)
!6366 = !{!50, !1950, !34}
!6367 = !DILocalVariable(name: "u", arg: 1, scope: !6364, file: !3, line: 3992, type: !1950)
!6368 = !DILocation(line: 3992, column: 29, scope: !6364)
!6369 = !DILocalVariable(name: "base", arg: 2, scope: !6364, file: !3, line: 3992, type: !34)
!6370 = !DILocation(line: 3992, column: 36, scope: !6364)
!6371 = !DILocalVariable(name: "un", scope: !6364, file: !3, line: 3994, type: !184)
!6372 = !DILocation(line: 3994, column: 13, scope: !6364)
!6373 = !DILocalVariable(name: "up", scope: !6364, file: !3, line: 3995, type: !181)
!6374 = !DILocation(line: 3995, column: 13, scope: !6364)
!6375 = !DILocalVariable(name: "tp", scope: !6364, file: !3, line: 3996, type: !31)
!6376 = !DILocation(line: 3996, column: 10, scope: !6364)
!6377 = !DILocalVariable(name: "bits", scope: !6364, file: !3, line: 3997, type: !35)
!6378 = !DILocation(line: 3997, column: 15, scope: !6364)
!6379 = !DILocalVariable(name: "bi", scope: !6364, file: !3, line: 3998, type: !1481)
!6380 = !DILocation(line: 3998, column: 26, scope: !6364)
!6381 = !DILocalVariable(name: "ndigits", scope: !6364, file: !3, line: 3999, type: !50)
!6382 = !DILocation(line: 3999, column: 10, scope: !6364)
!6383 = !DILocation(line: 4004, column: 8, scope: !6364)
!6384 = !DILocation(line: 4004, column: 6, scope: !6364)
!6385 = !DILocation(line: 4005, column: 7, scope: !6386)
!6386 = distinct !DILexicalBlock(scope: !6364, file: !3, line: 4005, column: 7)
!6387 = !DILocation(line: 4005, column: 10, scope: !6386)
!6388 = !DILocation(line: 4005, column: 7, scope: !6364)
!6389 = !DILocation(line: 4006, column: 5, scope: !6386)
!6390 = !DILocation(line: 4008, column: 8, scope: !6364)
!6391 = !DILocation(line: 4008, column: 11, scope: !6364)
!6392 = !DILocation(line: 4008, column: 6, scope: !6364)
!6393 = !DILocation(line: 4010, column: 11, scope: !6364)
!6394 = !DILocation(line: 4010, column: 14, scope: !6364)
!6395 = !DILocation(line: 4010, column: 19, scope: !6364)
!6396 = !DILocation(line: 4010, column: 62, scope: !6364)
!6397 = !DILocation(line: 4010, column: 65, scope: !6364)
!6398 = !DILocation(line: 4010, column: 67, scope: !6364)
!6399 = !DILocation(line: 4010, column: 37, scope: !6364)
!6400 = !DILocation(line: 4010, column: 35, scope: !6364)
!6401 = !DILocation(line: 4010, column: 8, scope: !6364)
!6402 = !DILocation(line: 4011, column: 11, scope: !6364)
!6403 = !DILocation(line: 4011, column: 3, scope: !6364)
!6404 = !DILocation(line: 4014, column: 14, scope: !6405)
!6405 = distinct !DILexicalBlock(scope: !6364, file: !3, line: 4012, column: 5)
!6406 = !DILocation(line: 4014, column: 7, scope: !6405)
!6407 = !DILocation(line: 4016, column: 15, scope: !6405)
!6408 = !DILocation(line: 4016, column: 20, scope: !6405)
!6409 = !DILocation(line: 4016, column: 25, scope: !6405)
!6410 = !DILocation(line: 4016, column: 7, scope: !6405)
!6411 = !DILocation(line: 4018, column: 15, scope: !6405)
!6412 = !DILocation(line: 4018, column: 20, scope: !6405)
!6413 = !DILocation(line: 4018, column: 25, scope: !6405)
!6414 = !DILocation(line: 4018, column: 7, scope: !6405)
!6415 = !DILocation(line: 4020, column: 15, scope: !6405)
!6416 = !DILocation(line: 4020, column: 20, scope: !6405)
!6417 = !DILocation(line: 4020, column: 25, scope: !6405)
!6418 = !DILocation(line: 4020, column: 7, scope: !6405)
!6419 = !DILocation(line: 4022, column: 15, scope: !6405)
!6420 = !DILocation(line: 4022, column: 20, scope: !6405)
!6421 = !DILocation(line: 4022, column: 25, scope: !6405)
!6422 = !DILocation(line: 4022, column: 7, scope: !6405)
!6423 = !DILocation(line: 4027, column: 26, scope: !6364)
!6424 = !DILocation(line: 4027, column: 8, scope: !6364)
!6425 = !DILocation(line: 4027, column: 6, scope: !6364)
!6426 = !DILocation(line: 4028, column: 14, scope: !6364)
!6427 = !DILocation(line: 4028, column: 18, scope: !6364)
!6428 = !DILocation(line: 4028, column: 22, scope: !6364)
!6429 = !DILocation(line: 4028, column: 3, scope: !6364)
!6430 = !DILocation(line: 4029, column: 29, scope: !6364)
!6431 = !DILocation(line: 4029, column: 3, scope: !6364)
!6432 = !DILocation(line: 4031, column: 11, scope: !6364)
!6433 = !DILocation(line: 4032, column: 3, scope: !6364)
!6434 = !DILocation(line: 4034, column: 14, scope: !6435)
!6435 = distinct !DILexicalBlock(scope: !6364, file: !3, line: 4033, column: 5)
!6436 = !DILocation(line: 4035, column: 28, scope: !6435)
!6437 = !DILocation(line: 4035, column: 32, scope: !6435)
!6438 = !DILocation(line: 4035, column: 36, scope: !6435)
!6439 = !DILocation(line: 4035, column: 7, scope: !6435)
!6440 = !DILocation(line: 4036, column: 14, scope: !6435)
!6441 = !DILocation(line: 4036, column: 17, scope: !6435)
!6442 = !DILocation(line: 4036, column: 19, scope: !6435)
!6443 = !DILocation(line: 4036, column: 23, scope: !6435)
!6444 = !DILocation(line: 4036, column: 13, scope: !6435)
!6445 = !DILocation(line: 4036, column: 10, scope: !6435)
!6446 = !DILocation(line: 4037, column: 5, scope: !6435)
!6447 = !DILocation(line: 4038, column: 10, scope: !6364)
!6448 = !DILocation(line: 4038, column: 13, scope: !6364)
!6449 = distinct !{!6449, !6433, !6450}
!6450 = !DILocation(line: 4038, column: 16, scope: !6364)
!6451 = !DILocation(line: 4040, column: 3, scope: !6364)
!6452 = !DILocation(line: 4041, column: 10, scope: !6364)
!6453 = !DILocation(line: 4041, column: 3, scope: !6364)
!6454 = !DILocation(line: 4042, column: 1, scope: !6364)
!6455 = distinct !DISubprogram(name: "mpz_root", scope: !3, file: !3, line: 3262, type: !6456, scopeLine: 3263, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6456 = !DISubroutineType(types: !6457)
!6457 = !{!34, !1838, !1950, !29}
!6458 = !DILocalVariable(name: "x", arg: 1, scope: !6455, file: !3, line: 3262, type: !1838)
!6459 = !DILocation(line: 3262, column: 17, scope: !6455)
!6460 = !DILocalVariable(name: "y", arg: 2, scope: !6455, file: !3, line: 3262, type: !1950)
!6461 = !DILocation(line: 3262, column: 32, scope: !6455)
!6462 = !DILocalVariable(name: "z", arg: 3, scope: !6455, file: !3, line: 3262, type: !29)
!6463 = !DILocation(line: 3262, column: 49, scope: !6455)
!6464 = !DILocalVariable(name: "res", scope: !6455, file: !3, line: 3264, type: !34)
!6465 = !DILocation(line: 3264, column: 7, scope: !6455)
!6466 = !DILocalVariable(name: "r", scope: !6455, file: !3, line: 3265, type: !3319)
!6467 = !DILocation(line: 3265, column: 9, scope: !6455)
!6468 = !DILocation(line: 3267, column: 13, scope: !6455)
!6469 = !DILocation(line: 3267, column: 3, scope: !6455)
!6470 = !DILocation(line: 3268, column: 16, scope: !6455)
!6471 = !DILocation(line: 3268, column: 19, scope: !6455)
!6472 = !DILocation(line: 3268, column: 22, scope: !6455)
!6473 = !DILocation(line: 3268, column: 25, scope: !6455)
!6474 = !DILocation(line: 3268, column: 3, scope: !6455)
!6475 = !DILocation(line: 3269, column: 12, scope: !6455)
!6476 = !DILocation(line: 3269, column: 21, scope: !6455)
!6477 = !DILocation(line: 3269, column: 7, scope: !6455)
!6478 = !DILocation(line: 3270, column: 14, scope: !6455)
!6479 = !DILocation(line: 3270, column: 3, scope: !6455)
!6480 = !DILocation(line: 3272, column: 10, scope: !6455)
!6481 = !DILocation(line: 3272, column: 3, scope: !6455)
!6482 = distinct !DISubprogram(name: "mpz_sqrtrem", scope: !3, file: !3, line: 3277, type: !6483, scopeLine: 3278, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6483 = !DISubroutineType(types: !6484)
!6484 = !{null, !1838, !1838, !1950}
!6485 = !DILocalVariable(name: "s", arg: 1, scope: !6482, file: !3, line: 3277, type: !1838)
!6486 = !DILocation(line: 3277, column: 20, scope: !6482)
!6487 = !DILocalVariable(name: "r", arg: 2, scope: !6482, file: !3, line: 3277, type: !1838)
!6488 = !DILocation(line: 3277, column: 29, scope: !6482)
!6489 = !DILocalVariable(name: "u", arg: 3, scope: !6482, file: !3, line: 3277, type: !1950)
!6490 = !DILocation(line: 3277, column: 44, scope: !6482)
!6491 = !DILocation(line: 3279, column: 16, scope: !6482)
!6492 = !DILocation(line: 3279, column: 19, scope: !6482)
!6493 = !DILocation(line: 3279, column: 22, scope: !6482)
!6494 = !DILocation(line: 3279, column: 3, scope: !6482)
!6495 = !DILocation(line: 3280, column: 1, scope: !6482)
!6496 = distinct !DISubprogram(name: "mpz_sqrt", scope: !3, file: !3, line: 3283, type: !1948, scopeLine: 3284, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6497 = !DILocalVariable(name: "s", arg: 1, scope: !6496, file: !3, line: 3283, type: !1838)
!6498 = !DILocation(line: 3283, column: 17, scope: !6496)
!6499 = !DILocalVariable(name: "u", arg: 2, scope: !6496, file: !3, line: 3283, type: !1950)
!6500 = !DILocation(line: 3283, column: 32, scope: !6496)
!6501 = !DILocation(line: 3285, column: 16, scope: !6496)
!6502 = !DILocation(line: 3285, column: 25, scope: !6496)
!6503 = !DILocation(line: 3285, column: 3, scope: !6496)
!6504 = !DILocation(line: 3286, column: 1, scope: !6496)
!6505 = distinct !DISubprogram(name: "mpz_perfect_square_p", scope: !3, file: !3, line: 3289, type: !2047, scopeLine: 3290, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6506 = !DILocalVariable(name: "u", arg: 1, scope: !6505, file: !3, line: 3289, type: !1950)
!6507 = !DILocation(line: 3289, column: 35, scope: !6505)
!6508 = !DILocation(line: 3291, column: 7, scope: !6509)
!6509 = distinct !DILexicalBlock(scope: !6505, file: !3, line: 3291, column: 7)
!6510 = !DILocation(line: 3291, column: 10, scope: !6509)
!6511 = !DILocation(line: 3291, column: 19, scope: !6509)
!6512 = !DILocation(line: 3291, column: 7, scope: !6505)
!6513 = !DILocation(line: 3292, column: 13, scope: !6509)
!6514 = !DILocation(line: 3292, column: 16, scope: !6509)
!6515 = !DILocation(line: 3292, column: 25, scope: !6509)
!6516 = !DILocation(line: 3292, column: 5, scope: !6509)
!6517 = !DILocation(line: 3294, column: 28, scope: !6509)
!6518 = !DILocation(line: 3294, column: 12, scope: !6509)
!6519 = !DILocation(line: 3294, column: 5, scope: !6509)
!6520 = !DILocation(line: 3295, column: 1, scope: !6505)
!6521 = distinct !DISubprogram(name: "mpn_perfect_square_p", scope: !3, file: !3, line: 3298, type: !6522, scopeLine: 3299, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6522 = !DISubroutineType(types: !6523)
!6523 = !{!34, !181, !184}
!6524 = !DILocalVariable(name: "p", arg: 1, scope: !6521, file: !3, line: 3298, type: !181)
!6525 = !DILocation(line: 3298, column: 33, scope: !6521)
!6526 = !DILocalVariable(name: "n", arg: 2, scope: !6521, file: !3, line: 3298, type: !184)
!6527 = !DILocation(line: 3298, column: 46, scope: !6521)
!6528 = !DILocalVariable(name: "t", scope: !6521, file: !3, line: 3300, type: !3319)
!6529 = !DILocation(line: 3300, column: 9, scope: !6521)
!6530 = !DILocation(line: 3304, column: 40, scope: !6521)
!6531 = !DILocation(line: 3304, column: 43, scope: !6521)
!6532 = !DILocation(line: 3304, column: 46, scope: !6521)
!6533 = !DILocation(line: 3304, column: 26, scope: !6521)
!6534 = !DILocation(line: 3304, column: 10, scope: !6521)
!6535 = !DILocation(line: 3304, column: 3, scope: !6521)
!6536 = distinct !DISubprogram(name: "mpn_sqrtrem", scope: !3, file: !3, line: 3308, type: !6537, scopeLine: 3309, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6537 = !DISubroutineType(types: !6538)
!6538 = !{!184, !31, !31, !181, !184}
!6539 = !DILocalVariable(name: "sp", arg: 1, scope: !6536, file: !3, line: 3308, type: !31)
!6540 = !DILocation(line: 3308, column: 21, scope: !6536)
!6541 = !DILocalVariable(name: "rp", arg: 2, scope: !6536, file: !3, line: 3308, type: !31)
!6542 = !DILocation(line: 3308, column: 32, scope: !6536)
!6543 = !DILocalVariable(name: "p", arg: 3, scope: !6536, file: !3, line: 3308, type: !181)
!6544 = !DILocation(line: 3308, column: 46, scope: !6536)
!6545 = !DILocalVariable(name: "n", arg: 4, scope: !6536, file: !3, line: 3308, type: !184)
!6546 = !DILocation(line: 3308, column: 59, scope: !6536)
!6547 = !DILocalVariable(name: "s", scope: !6536, file: !3, line: 3310, type: !3319)
!6548 = !DILocation(line: 3310, column: 9, scope: !6536)
!6549 = !DILocalVariable(name: "r", scope: !6536, file: !3, line: 3310, type: !3319)
!6550 = !DILocation(line: 3310, column: 12, scope: !6536)
!6551 = !DILocalVariable(name: "u", scope: !6536, file: !3, line: 3310, type: !3319)
!6552 = !DILocation(line: 3310, column: 15, scope: !6536)
!6553 = !DILocalVariable(name: "res", scope: !6536, file: !3, line: 3311, type: !184)
!6554 = !DILocation(line: 3311, column: 13, scope: !6536)
!6555 = !DILocation(line: 3316, column: 13, scope: !6536)
!6556 = !DILocation(line: 3316, column: 3, scope: !6536)
!6557 = !DILocation(line: 3317, column: 13, scope: !6536)
!6558 = !DILocation(line: 3317, column: 3, scope: !6536)
!6559 = !DILocation(line: 3318, column: 16, scope: !6536)
!6560 = !DILocation(line: 3318, column: 19, scope: !6536)
!6561 = !DILocation(line: 3318, column: 36, scope: !6536)
!6562 = !DILocation(line: 3318, column: 39, scope: !6536)
!6563 = !DILocation(line: 3318, column: 42, scope: !6536)
!6564 = !DILocation(line: 3318, column: 22, scope: !6536)
!6565 = !DILocation(line: 3318, column: 3, scope: !6536)
!6566 = !DILocation(line: 3321, column: 14, scope: !6536)
!6567 = !DILocation(line: 3321, column: 21, scope: !6536)
!6568 = !DILocation(line: 3321, column: 31, scope: !6536)
!6569 = !DILocation(line: 3321, column: 28, scope: !6536)
!6570 = !DILocation(line: 3321, column: 3, scope: !6536)
!6571 = !DILocation(line: 3322, column: 14, scope: !6536)
!6572 = !DILocation(line: 3322, column: 3, scope: !6536)
!6573 = !DILocation(line: 3323, column: 12, scope: !6536)
!6574 = !DILocation(line: 3323, column: 9, scope: !6536)
!6575 = !DILocation(line: 3323, column: 7, scope: !6536)
!6576 = !DILocation(line: 3324, column: 7, scope: !6577)
!6577 = distinct !DILexicalBlock(scope: !6536, file: !3, line: 3324, column: 7)
!6578 = !DILocation(line: 3324, column: 7, scope: !6536)
!6579 = !DILocation(line: 3325, column: 16, scope: !6577)
!6580 = !DILocation(line: 3325, column: 23, scope: !6577)
!6581 = !DILocation(line: 3325, column: 30, scope: !6577)
!6582 = !DILocation(line: 3325, column: 5, scope: !6577)
!6583 = !DILocation(line: 3326, column: 14, scope: !6536)
!6584 = !DILocation(line: 3326, column: 3, scope: !6536)
!6585 = !DILocation(line: 3327, column: 10, scope: !6536)
!6586 = !DILocation(line: 3327, column: 3, scope: !6536)
!6587 = distinct !DISubprogram(name: "mpz_fac_ui", scope: !3, file: !3, line: 3333, type: !1924, scopeLine: 3334, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6588 = !DILocalVariable(name: "x", arg: 1, scope: !6587, file: !3, line: 3333, type: !1838)
!6589 = !DILocation(line: 3333, column: 19, scope: !6587)
!6590 = !DILocalVariable(name: "n", arg: 2, scope: !6587, file: !3, line: 3333, type: !29)
!6591 = !DILocation(line: 3333, column: 36, scope: !6587)
!6592 = !DILocation(line: 3335, column: 15, scope: !6587)
!6593 = !DILocation(line: 3335, column: 18, scope: !6587)
!6594 = !DILocation(line: 3335, column: 23, scope: !6587)
!6595 = !DILocation(line: 3335, column: 25, scope: !6587)
!6596 = !DILocation(line: 3335, column: 22, scope: !6587)
!6597 = !DILocation(line: 3335, column: 20, scope: !6587)
!6598 = !DILocation(line: 3335, column: 3, scope: !6587)
!6599 = !DILocation(line: 3336, column: 3, scope: !6587)
!6600 = !DILocation(line: 3336, column: 9, scope: !6601)
!6601 = distinct !DILexicalBlock(scope: !6602, file: !3, line: 3336, column: 3)
!6602 = distinct !DILexicalBlock(scope: !6587, file: !3, line: 3336, column: 3)
!6603 = !DILocation(line: 3336, column: 11, scope: !6601)
!6604 = !DILocation(line: 3336, column: 3, scope: !6602)
!6605 = !DILocation(line: 3337, column: 17, scope: !6601)
!6606 = !DILocation(line: 3337, column: 20, scope: !6601)
!6607 = !DILocation(line: 3337, column: 23, scope: !6601)
!6608 = !DILocation(line: 3337, column: 5, scope: !6601)
!6609 = !DILocation(line: 3336, column: 3, scope: !6601)
!6610 = distinct !{!6610, !6604, !6611}
!6611 = !DILocation(line: 3337, column: 26, scope: !6602)
!6612 = !DILocation(line: 3338, column: 1, scope: !6587)
!6613 = distinct !DISubprogram(name: "mpz_bin_uiui", scope: !3, file: !3, line: 3341, type: !5744, scopeLine: 3342, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6614 = !DILocalVariable(name: "r", arg: 1, scope: !6613, file: !3, line: 3341, type: !1838)
!6615 = !DILocation(line: 3341, column: 21, scope: !6613)
!6616 = !DILocalVariable(name: "n", arg: 2, scope: !6613, file: !3, line: 3341, type: !29)
!6617 = !DILocation(line: 3341, column: 38, scope: !6613)
!6618 = !DILocalVariable(name: "k", arg: 3, scope: !6613, file: !3, line: 3341, type: !29)
!6619 = !DILocation(line: 3341, column: 55, scope: !6613)
!6620 = !DILocalVariable(name: "t", scope: !6613, file: !3, line: 3343, type: !3319)
!6621 = !DILocation(line: 3343, column: 9, scope: !6613)
!6622 = !DILocation(line: 3345, column: 15, scope: !6613)
!6623 = !DILocation(line: 3345, column: 18, scope: !6613)
!6624 = !DILocation(line: 3345, column: 23, scope: !6613)
!6625 = !DILocation(line: 3345, column: 20, scope: !6613)
!6626 = !DILocation(line: 3345, column: 3, scope: !6613)
!6627 = !DILocation(line: 3347, column: 7, scope: !6628)
!6628 = distinct !DILexicalBlock(scope: !6613, file: !3, line: 3347, column: 7)
!6629 = !DILocation(line: 3347, column: 12, scope: !6628)
!6630 = !DILocation(line: 3347, column: 14, scope: !6628)
!6631 = !DILocation(line: 3347, column: 9, scope: !6628)
!6632 = !DILocation(line: 3347, column: 7, scope: !6613)
!6633 = !DILocation(line: 3348, column: 10, scope: !6628)
!6634 = !DILocation(line: 3348, column: 15, scope: !6628)
!6635 = !DILocation(line: 3348, column: 12, scope: !6628)
!6636 = !DILocation(line: 3348, column: 9, scope: !6628)
!6637 = !DILocation(line: 3348, column: 20, scope: !6628)
!6638 = !DILocation(line: 3348, column: 24, scope: !6628)
!6639 = !DILocation(line: 3348, column: 22, scope: !6628)
!6640 = !DILocation(line: 3348, column: 7, scope: !6628)
!6641 = !DILocation(line: 3348, column: 5, scope: !6628)
!6642 = !DILocation(line: 3350, column: 13, scope: !6613)
!6643 = !DILocation(line: 3350, column: 3, scope: !6613)
!6644 = !DILocation(line: 3351, column: 15, scope: !6613)
!6645 = !DILocation(line: 3351, column: 18, scope: !6613)
!6646 = !DILocation(line: 3351, column: 3, scope: !6613)
!6647 = !DILocation(line: 3353, column: 3, scope: !6613)
!6648 = !DILocation(line: 3353, column: 10, scope: !6649)
!6649 = distinct !DILexicalBlock(scope: !6650, file: !3, line: 3353, column: 3)
!6650 = distinct !DILexicalBlock(scope: !6613, file: !3, line: 3353, column: 3)
!6651 = !DILocation(line: 3353, column: 12, scope: !6649)
!6652 = !DILocation(line: 3353, column: 3, scope: !6650)
!6653 = !DILocation(line: 3354, column: 19, scope: !6649)
!6654 = !DILocation(line: 3354, column: 22, scope: !6649)
!6655 = !DILocation(line: 3354, column: 26, scope: !6649)
!6656 = !DILocation(line: 3354, column: 7, scope: !6649)
!6657 = !DILocation(line: 3353, column: 18, scope: !6649)
!6658 = !DILocation(line: 3353, column: 3, scope: !6649)
!6659 = distinct !{!6659, !6652, !6660}
!6660 = !DILocation(line: 3354, column: 28, scope: !6650)
!6661 = !DILocation(line: 3356, column: 17, scope: !6613)
!6662 = !DILocation(line: 3356, column: 20, scope: !6613)
!6663 = !DILocation(line: 3356, column: 23, scope: !6613)
!6664 = !DILocation(line: 3356, column: 3, scope: !6613)
!6665 = !DILocation(line: 3357, column: 14, scope: !6613)
!6666 = !DILocation(line: 3357, column: 3, scope: !6613)
!6667 = !DILocation(line: 3358, column: 1, scope: !6613)
!6668 = distinct !DISubprogram(name: "mpz_probab_prime_p", scope: !3, file: !3, line: 3396, type: !6669, scopeLine: 3397, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6669 = !DISubroutineType(types: !6670)
!6670 = !{!34, !1950, !34}
!6671 = !DILocalVariable(name: "n", arg: 1, scope: !6668, file: !3, line: 3396, type: !1950)
!6672 = !DILocation(line: 3396, column: 33, scope: !6668)
!6673 = !DILocalVariable(name: "reps", arg: 2, scope: !6668, file: !3, line: 3396, type: !34)
!6674 = !DILocation(line: 3396, column: 40, scope: !6668)
!6675 = !DILocalVariable(name: "nm1", scope: !6668, file: !3, line: 3398, type: !3319)
!6676 = !DILocation(line: 3398, column: 9, scope: !6668)
!6677 = !DILocalVariable(name: "q", scope: !6668, file: !3, line: 3399, type: !3319)
!6678 = !DILocation(line: 3399, column: 9, scope: !6668)
!6679 = !DILocalVariable(name: "y", scope: !6668, file: !3, line: 3400, type: !3319)
!6680 = !DILocation(line: 3400, column: 9, scope: !6668)
!6681 = !DILocalVariable(name: "k", scope: !6668, file: !3, line: 3401, type: !35)
!6682 = !DILocation(line: 3401, column: 15, scope: !6668)
!6683 = !DILocalVariable(name: "is_prime", scope: !6668, file: !3, line: 3402, type: !34)
!6684 = !DILocation(line: 3402, column: 7, scope: !6668)
!6685 = !DILocalVariable(name: "j", scope: !6668, file: !3, line: 3403, type: !34)
!6686 = !DILocation(line: 3403, column: 7, scope: !6668)
!6687 = !DILocation(line: 3407, column: 7, scope: !6688)
!6688 = distinct !DILexicalBlock(scope: !6668, file: !3, line: 3407, column: 7)
!6689 = !DILocation(line: 3407, column: 7, scope: !6668)
!6690 = !DILocation(line: 3408, column: 28, scope: !6688)
!6691 = !DILocation(line: 3408, column: 13, scope: !6688)
!6692 = !DILocation(line: 3408, column: 34, scope: !6688)
!6693 = !DILocation(line: 3408, column: 12, scope: !6688)
!6694 = !DILocation(line: 3408, column: 5, scope: !6688)
!6695 = !DILocation(line: 3413, column: 22, scope: !6696)
!6696 = distinct !DILexicalBlock(scope: !6668, file: !3, line: 3413, column: 7)
!6697 = !DILocation(line: 3413, column: 7, scope: !6696)
!6698 = !DILocation(line: 3413, column: 29, scope: !6696)
!6699 = !DILocation(line: 3413, column: 7, scope: !6668)
!6700 = !DILocation(line: 3414, column: 32, scope: !6696)
!6701 = !DILocation(line: 3414, column: 35, scope: !6696)
!6702 = !DILocation(line: 3414, column: 44, scope: !6696)
!6703 = !DILocation(line: 3414, column: 28, scope: !6696)
!6704 = !DILocation(line: 3414, column: 51, scope: !6696)
!6705 = !DILocation(line: 3414, column: 12, scope: !6696)
!6706 = !DILocation(line: 3414, column: 5, scope: !6696)
!6707 = !DILocation(line: 3416, column: 25, scope: !6708)
!6708 = distinct !DILexicalBlock(scope: !6668, file: !3, line: 3416, column: 7)
!6709 = !DILocation(line: 3416, column: 7, scope: !6708)
!6710 = !DILocation(line: 3416, column: 47, scope: !6708)
!6711 = !DILocation(line: 3416, column: 7, scope: !6668)
!6712 = !DILocation(line: 3417, column: 5, scope: !6708)
!6713 = !DILocation(line: 3420, column: 22, scope: !6714)
!6714 = distinct !DILexicalBlock(scope: !6668, file: !3, line: 3420, column: 7)
!6715 = !DILocation(line: 3420, column: 7, scope: !6714)
!6716 = !DILocation(line: 3420, column: 32, scope: !6714)
!6717 = !DILocation(line: 3420, column: 7, scope: !6668)
!6718 = !DILocation(line: 3421, column: 5, scope: !6714)
!6719 = !DILocation(line: 3428, column: 13, scope: !6668)
!6720 = !DILocation(line: 3428, column: 3, scope: !6668)
!6721 = !DILocation(line: 3429, column: 13, scope: !6668)
!6722 = !DILocation(line: 3429, column: 3, scope: !6668)
!6723 = !DILocation(line: 3430, column: 13, scope: !6668)
!6724 = !DILocation(line: 3430, column: 3, scope: !6668)
!6725 = !DILocation(line: 3433, column: 35, scope: !6668)
!6726 = !DILocation(line: 3433, column: 40, scope: !6668)
!6727 = !DILocation(line: 3433, column: 19, scope: !6668)
!6728 = !DILocation(line: 3433, column: 8, scope: !6668)
!6729 = !DILocation(line: 3433, column: 17, scope: !6668)
!6730 = !DILocation(line: 3434, column: 18, scope: !6668)
!6731 = !DILocation(line: 3434, column: 7, scope: !6668)
!6732 = !DILocation(line: 3434, column: 5, scope: !6668)
!6733 = !DILocation(line: 3435, column: 20, scope: !6668)
!6734 = !DILocation(line: 3435, column: 23, scope: !6668)
!6735 = !DILocation(line: 3435, column: 28, scope: !6668)
!6736 = !DILocation(line: 3435, column: 3, scope: !6668)
!6737 = !DILocation(line: 3437, column: 10, scope: !6738)
!6738 = distinct !DILexicalBlock(scope: !6668, file: !3, line: 3437, column: 3)
!6739 = !DILocation(line: 3437, column: 24, scope: !6738)
!6740 = !DILocation(line: 3437, column: 8, scope: !6738)
!6741 = !DILocation(line: 3437, column: 29, scope: !6742)
!6742 = distinct !DILexicalBlock(scope: !6738, file: !3, line: 3437, column: 3)
!6743 = !DILocation(line: 3437, column: 41, scope: !6742)
!6744 = !DILocation(line: 3437, column: 45, scope: !6742)
!6745 = !DILocation(line: 3437, column: 43, scope: !6742)
!6746 = !DILocation(line: 3437, column: 38, scope: !6742)
!6747 = !DILocation(line: 3437, column: 3, scope: !6738)
!6748 = !DILocation(line: 3439, column: 19, scope: !6749)
!6749 = distinct !DILexicalBlock(scope: !6742, file: !3, line: 3438, column: 5)
!6750 = !DILocation(line: 3439, column: 38, scope: !6749)
!6751 = !DILocation(line: 3439, column: 22, scope: !6749)
!6752 = !DILocation(line: 3439, column: 40, scope: !6749)
!6753 = !DILocation(line: 3439, column: 39, scope: !6749)
!6754 = !DILocation(line: 3439, column: 42, scope: !6749)
!6755 = !DILocation(line: 3439, column: 41, scope: !6749)
!6756 = !DILocation(line: 3439, column: 43, scope: !6749)
!6757 = !DILocation(line: 3439, column: 7, scope: !6749)
!6758 = !DILocation(line: 3440, column: 20, scope: !6759)
!6759 = distinct !DILexicalBlock(scope: !6749, file: !3, line: 3440, column: 11)
!6760 = !DILocation(line: 3440, column: 23, scope: !6759)
!6761 = !DILocation(line: 3440, column: 11, scope: !6759)
!6762 = !DILocation(line: 3440, column: 28, scope: !6759)
!6763 = !DILocation(line: 3440, column: 11, scope: !6749)
!6764 = !DILocation(line: 3445, column: 4, scope: !6765)
!6765 = distinct !DILexicalBlock(scope: !6759, file: !3, line: 3441, column: 2)
!6766 = !DILocation(line: 3447, column: 35, scope: !6749)
!6767 = !DILocation(line: 3447, column: 38, scope: !6749)
!6768 = !DILocation(line: 3447, column: 43, scope: !6749)
!6769 = !DILocation(line: 3447, column: 46, scope: !6749)
!6770 = !DILocation(line: 3447, column: 49, scope: !6749)
!6771 = !DILocation(line: 3447, column: 18, scope: !6749)
!6772 = !DILocation(line: 3447, column: 16, scope: !6749)
!6773 = !DILocation(line: 3448, column: 5, scope: !6749)
!6774 = !DILocation(line: 3437, column: 53, scope: !6742)
!6775 = !DILocation(line: 3437, column: 3, scope: !6742)
!6776 = distinct !{!6776, !6747, !6777}
!6777 = !DILocation(line: 3448, column: 5, scope: !6738)
!6778 = !DILocation(line: 3449, column: 14, scope: !6668)
!6779 = !DILocation(line: 3449, column: 3, scope: !6668)
!6780 = !DILocation(line: 3450, column: 14, scope: !6668)
!6781 = !DILocation(line: 3450, column: 3, scope: !6668)
!6782 = !DILocation(line: 3451, column: 14, scope: !6668)
!6783 = !DILocation(line: 3451, column: 3, scope: !6668)
!6784 = !DILocation(line: 3453, column: 10, scope: !6668)
!6785 = !DILocation(line: 3453, column: 3, scope: !6668)
!6786 = !DILocation(line: 3454, column: 1, scope: !6668)
!6787 = distinct !DISubprogram(name: "mpz_scan1", scope: !3, file: !3, line: 3924, type: !6788, scopeLine: 3925, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6788 = !DISubroutineType(types: !6789)
!6789 = !{!35, !1950, !35}
!6790 = !DILocalVariable(name: "u", arg: 1, scope: !6787, file: !3, line: 3924, type: !1950)
!6791 = !DILocation(line: 3924, column: 24, scope: !6787)
!6792 = !DILocalVariable(name: "starting_bit", arg: 2, scope: !6787, file: !3, line: 3924, type: !35)
!6793 = !DILocation(line: 3924, column: 39, scope: !6787)
!6794 = !DILocalVariable(name: "up", scope: !6787, file: !3, line: 3926, type: !31)
!6795 = !DILocation(line: 3926, column: 10, scope: !6787)
!6796 = !DILocalVariable(name: "us", scope: !6787, file: !3, line: 3927, type: !184)
!6797 = !DILocation(line: 3927, column: 13, scope: !6787)
!6798 = !DILocalVariable(name: "un", scope: !6787, file: !3, line: 3927, type: !184)
!6799 = !DILocation(line: 3927, column: 17, scope: !6787)
!6800 = !DILocalVariable(name: "i", scope: !6787, file: !3, line: 3927, type: !184)
!6801 = !DILocation(line: 3927, column: 21, scope: !6787)
!6802 = !DILocalVariable(name: "limb", scope: !6787, file: !3, line: 3928, type: !27)
!6803 = !DILocation(line: 3928, column: 13, scope: !6787)
!6804 = !DILocalVariable(name: "ux", scope: !6787, file: !3, line: 3928, type: !27)
!6805 = !DILocation(line: 3928, column: 19, scope: !6787)
!6806 = !DILocation(line: 3930, column: 8, scope: !6787)
!6807 = !DILocation(line: 3930, column: 11, scope: !6787)
!6808 = !DILocation(line: 3930, column: 6, scope: !6787)
!6809 = !DILocation(line: 3931, column: 8, scope: !6787)
!6810 = !DILocation(line: 3931, column: 6, scope: !6787)
!6811 = !DILocation(line: 3932, column: 7, scope: !6787)
!6812 = !DILocation(line: 3932, column: 20, scope: !6787)
!6813 = !DILocation(line: 3932, column: 5, scope: !6787)
!6814 = !DILocation(line: 3936, column: 7, scope: !6815)
!6815 = distinct !DILexicalBlock(scope: !6787, file: !3, line: 3936, column: 7)
!6816 = !DILocation(line: 3936, column: 12, scope: !6815)
!6817 = !DILocation(line: 3936, column: 9, scope: !6815)
!6818 = !DILocation(line: 3936, column: 7, scope: !6787)
!6819 = !DILocation(line: 3937, column: 13, scope: !6815)
!6820 = !DILocation(line: 3937, column: 16, scope: !6815)
!6821 = !DILocation(line: 3937, column: 42, scope: !6815)
!6822 = !DILocation(line: 3937, column: 5, scope: !6815)
!6823 = !DILocation(line: 3939, column: 8, scope: !6787)
!6824 = !DILocation(line: 3939, column: 11, scope: !6787)
!6825 = !DILocation(line: 3939, column: 6, scope: !6787)
!6826 = !DILocation(line: 3940, column: 6, scope: !6787)
!6827 = !DILocation(line: 3941, column: 10, scope: !6787)
!6828 = !DILocation(line: 3941, column: 13, scope: !6787)
!6829 = !DILocation(line: 3941, column: 8, scope: !6787)
!6830 = !DILocation(line: 3943, column: 7, scope: !6831)
!6831 = distinct !DILexicalBlock(scope: !6787, file: !3, line: 3943, column: 7)
!6832 = !DILocation(line: 3943, column: 20, scope: !6831)
!6833 = !DILocation(line: 3943, column: 7, scope: !6787)
!6834 = !DILocation(line: 3945, column: 11, scope: !6835)
!6835 = distinct !DILexicalBlock(scope: !6836, file: !3, line: 3945, column: 11)
!6836 = distinct !DILexicalBlock(scope: !6831, file: !3, line: 3944, column: 5)
!6837 = !DILocation(line: 3945, column: 14, scope: !6835)
!6838 = !DILocation(line: 3945, column: 11, scope: !6836)
!6839 = !DILocation(line: 3947, column: 9, scope: !6840)
!6840 = distinct !DILexicalBlock(scope: !6835, file: !3, line: 3946, column: 2)
!6841 = !DILocation(line: 3947, column: 7, scope: !6840)
!6842 = !DILocation(line: 3948, column: 13, scope: !6840)
!6843 = !DILocation(line: 3948, column: 11, scope: !6840)
!6844 = !DILocation(line: 3948, column: 20, scope: !6840)
!6845 = !DILocation(line: 3948, column: 18, scope: !6840)
!6846 = !DILocation(line: 3948, column: 9, scope: !6840)
!6847 = !DILocation(line: 3949, column: 24, scope: !6840)
!6848 = !DILocation(line: 3949, column: 32, scope: !6840)
!6849 = !DILocation(line: 3949, column: 29, scope: !6840)
!6850 = !DILocation(line: 3949, column: 11, scope: !6840)
!6851 = !DILocation(line: 3949, column: 9, scope: !6840)
!6852 = !DILocation(line: 3949, column: 7, scope: !6840)
!6853 = !DILocation(line: 3950, column: 2, scope: !6840)
!6854 = !DILocation(line: 3953, column: 33, scope: !6836)
!6855 = !DILocation(line: 3953, column: 46, scope: !6836)
!6856 = !DILocation(line: 3953, column: 29, scope: !6836)
!6857 = !DILocation(line: 3953, column: 12, scope: !6836)
!6858 = !DILocation(line: 3954, column: 5, scope: !6836)
!6859 = !DILocation(line: 3956, column: 27, scope: !6787)
!6860 = !DILocation(line: 3956, column: 33, scope: !6787)
!6861 = !DILocation(line: 3956, column: 36, scope: !6787)
!6862 = !DILocation(line: 3956, column: 40, scope: !6787)
!6863 = !DILocation(line: 3956, column: 44, scope: !6787)
!6864 = !DILocation(line: 3956, column: 10, scope: !6787)
!6865 = !DILocation(line: 3956, column: 3, scope: !6787)
!6866 = !DILocation(line: 3957, column: 1, scope: !6787)
!6867 = distinct !DISubprogram(name: "gmp_millerrabin", scope: !3, file: !3, line: 3363, type: !6868, scopeLine: 3365, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6868 = !DISubroutineType(types: !6869)
!6869 = !{!34, !1950, !1950, !1838, !1950, !35}
!6870 = !DILocalVariable(name: "n", arg: 1, scope: !6867, file: !3, line: 3363, type: !1950)
!6871 = !DILocation(line: 3363, column: 30, scope: !6867)
!6872 = !DILocalVariable(name: "nm1", arg: 2, scope: !6867, file: !3, line: 3363, type: !1950)
!6873 = !DILocation(line: 3363, column: 45, scope: !6867)
!6874 = !DILocalVariable(name: "y", arg: 3, scope: !6867, file: !3, line: 3363, type: !1838)
!6875 = !DILocation(line: 3363, column: 56, scope: !6867)
!6876 = !DILocalVariable(name: "q", arg: 4, scope: !6867, file: !3, line: 3364, type: !1950)
!6877 = !DILocation(line: 3364, column: 16, scope: !6867)
!6878 = !DILocalVariable(name: "k", arg: 5, scope: !6867, file: !3, line: 3364, type: !35)
!6879 = !DILocation(line: 3364, column: 31, scope: !6867)
!6880 = !DILocation(line: 3369, column: 13, scope: !6867)
!6881 = !DILocation(line: 3369, column: 16, scope: !6867)
!6882 = !DILocation(line: 3369, column: 19, scope: !6867)
!6883 = !DILocation(line: 3369, column: 22, scope: !6867)
!6884 = !DILocation(line: 3369, column: 3, scope: !6867)
!6885 = !DILocation(line: 3371, column: 19, scope: !6886)
!6886 = distinct !DILexicalBlock(scope: !6867, file: !3, line: 3371, column: 7)
!6887 = !DILocation(line: 3371, column: 7, scope: !6886)
!6888 = !DILocation(line: 3371, column: 25, scope: !6886)
!6889 = !DILocation(line: 3371, column: 30, scope: !6886)
!6890 = !DILocation(line: 3371, column: 42, scope: !6886)
!6891 = !DILocation(line: 3371, column: 45, scope: !6886)
!6892 = !DILocation(line: 3371, column: 33, scope: !6886)
!6893 = !DILocation(line: 3371, column: 50, scope: !6886)
!6894 = !DILocation(line: 3371, column: 7, scope: !6867)
!6895 = !DILocation(line: 3372, column: 5, scope: !6886)
!6896 = !DILocation(line: 3374, column: 3, scope: !6867)
!6897 = !DILocation(line: 3374, column: 10, scope: !6867)
!6898 = !DILocation(line: 3374, column: 14, scope: !6867)
!6899 = !DILocation(line: 3376, column: 20, scope: !6900)
!6900 = distinct !DILexicalBlock(scope: !6867, file: !3, line: 3375, column: 5)
!6901 = !DILocation(line: 3376, column: 23, scope: !6900)
!6902 = !DILocation(line: 3376, column: 29, scope: !6900)
!6903 = !DILocation(line: 3376, column: 7, scope: !6900)
!6904 = !DILocation(line: 3377, column: 20, scope: !6905)
!6905 = distinct !DILexicalBlock(scope: !6900, file: !3, line: 3377, column: 11)
!6906 = !DILocation(line: 3377, column: 23, scope: !6905)
!6907 = !DILocation(line: 3377, column: 11, scope: !6905)
!6908 = !DILocation(line: 3377, column: 28, scope: !6905)
!6909 = !DILocation(line: 3377, column: 11, scope: !6900)
!6910 = !DILocation(line: 3378, column: 2, scope: !6905)
!6911 = !DILocation(line: 3382, column: 23, scope: !6912)
!6912 = distinct !DILexicalBlock(scope: !6900, file: !3, line: 3382, column: 11)
!6913 = !DILocation(line: 3382, column: 11, scope: !6912)
!6914 = !DILocation(line: 3382, column: 29, scope: !6912)
!6915 = !DILocation(line: 3382, column: 11, scope: !6900)
!6916 = !DILocation(line: 3383, column: 2, scope: !6912)
!6917 = distinct !{!6917, !6896, !6918}
!6918 = !DILocation(line: 3384, column: 5, scope: !6867)
!6919 = !DILocation(line: 3385, column: 3, scope: !6867)
!6920 = !DILocation(line: 3386, column: 1, scope: !6867)
!6921 = distinct !DISubprogram(name: "mpz_tstbit", scope: !3, file: !3, line: 3482, type: !6922, scopeLine: 3483, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!6922 = !DISubroutineType(types: !6923)
!6923 = !{!34, !1950, !35}
!6924 = !DILocalVariable(name: "d", arg: 1, scope: !6921, file: !3, line: 3482, type: !1950)
!6925 = !DILocation(line: 3482, column: 25, scope: !6921)
!6926 = !DILocalVariable(name: "bit_index", arg: 2, scope: !6921, file: !3, line: 3482, type: !35)
!6927 = !DILocation(line: 3482, column: 40, scope: !6921)
!6928 = !DILocalVariable(name: "limb_index", scope: !6921, file: !3, line: 3484, type: !184)
!6929 = !DILocation(line: 3484, column: 13, scope: !6921)
!6930 = !DILocalVariable(name: "shift", scope: !6921, file: !3, line: 3485, type: !6)
!6931 = !DILocation(line: 3485, column: 12, scope: !6921)
!6932 = !DILocalVariable(name: "ds", scope: !6921, file: !3, line: 3486, type: !184)
!6933 = !DILocation(line: 3486, column: 13, scope: !6921)
!6934 = !DILocalVariable(name: "dn", scope: !6921, file: !3, line: 3487, type: !184)
!6935 = !DILocation(line: 3487, column: 13, scope: !6921)
!6936 = !DILocalVariable(name: "w", scope: !6921, file: !3, line: 3488, type: !27)
!6937 = !DILocation(line: 3488, column: 13, scope: !6921)
!6938 = !DILocalVariable(name: "bit", scope: !6921, file: !3, line: 3489, type: !34)
!6939 = !DILocation(line: 3489, column: 7, scope: !6921)
!6940 = !DILocation(line: 3491, column: 8, scope: !6921)
!6941 = !DILocation(line: 3491, column: 11, scope: !6921)
!6942 = !DILocation(line: 3491, column: 6, scope: !6921)
!6943 = !DILocation(line: 3492, column: 8, scope: !6921)
!6944 = !DILocation(line: 3492, column: 6, scope: !6921)
!6945 = !DILocation(line: 3493, column: 16, scope: !6921)
!6946 = !DILocation(line: 3493, column: 26, scope: !6921)
!6947 = !DILocation(line: 3493, column: 14, scope: !6921)
!6948 = !DILocation(line: 3494, column: 7, scope: !6949)
!6949 = distinct !DILexicalBlock(scope: !6921, file: !3, line: 3494, column: 7)
!6950 = !DILocation(line: 3494, column: 21, scope: !6949)
!6951 = !DILocation(line: 3494, column: 18, scope: !6949)
!6952 = !DILocation(line: 3494, column: 7, scope: !6921)
!6953 = !DILocation(line: 3495, column: 12, scope: !6949)
!6954 = !DILocation(line: 3495, column: 15, scope: !6949)
!6955 = !DILocation(line: 3495, column: 5, scope: !6949)
!6956 = !DILocation(line: 3497, column: 11, scope: !6921)
!6957 = !DILocation(line: 3497, column: 21, scope: !6921)
!6958 = !DILocation(line: 3497, column: 9, scope: !6921)
!6959 = !DILocation(line: 3498, column: 7, scope: !6921)
!6960 = !DILocation(line: 3498, column: 10, scope: !6921)
!6961 = !DILocation(line: 3498, column: 16, scope: !6921)
!6962 = !DILocation(line: 3498, column: 5, scope: !6921)
!6963 = !DILocation(line: 3499, column: 10, scope: !6921)
!6964 = !DILocation(line: 3499, column: 15, scope: !6921)
!6965 = !DILocation(line: 3499, column: 12, scope: !6921)
!6966 = !DILocation(line: 3499, column: 22, scope: !6921)
!6967 = !DILocation(line: 3499, column: 9, scope: !6921)
!6968 = !DILocation(line: 3499, column: 7, scope: !6921)
!6969 = !DILocation(line: 3501, column: 7, scope: !6970)
!6970 = distinct !DILexicalBlock(scope: !6921, file: !3, line: 3501, column: 7)
!6971 = !DILocation(line: 3501, column: 10, scope: !6970)
!6972 = !DILocation(line: 3501, column: 7, scope: !6921)
!6973 = !DILocation(line: 3505, column: 11, scope: !6974)
!6974 = distinct !DILexicalBlock(scope: !6975, file: !3, line: 3505, column: 11)
!6975 = distinct !DILexicalBlock(scope: !6970, file: !3, line: 3502, column: 5)
!6976 = !DILocation(line: 3505, column: 17, scope: !6974)
!6977 = !DILocation(line: 3505, column: 21, scope: !6974)
!6978 = !DILocation(line: 3505, column: 25, scope: !6974)
!6979 = !DILocation(line: 3505, column: 47, scope: !6974)
!6980 = !DILocation(line: 3505, column: 45, scope: !6974)
!6981 = !DILocation(line: 3505, column: 27, scope: !6974)
!6982 = !DILocation(line: 3505, column: 55, scope: !6974)
!6983 = !DILocation(line: 3505, column: 11, scope: !6975)
!6984 = !DILocation(line: 3506, column: 9, scope: !6974)
!6985 = !DILocation(line: 3506, column: 13, scope: !6974)
!6986 = !DILocation(line: 3506, column: 2, scope: !6974)
!6987 = !DILocation(line: 3507, column: 7, scope: !6975)
!6988 = !DILocation(line: 3507, column: 24, scope: !6975)
!6989 = !DILocation(line: 3507, column: 27, scope: !6975)
!6990 = !DILocation(line: 3508, column: 6, scope: !6991)
!6991 = distinct !DILexicalBlock(scope: !6975, file: !3, line: 3508, column: 6)
!6992 = !DILocation(line: 3508, column: 9, scope: !6991)
!6993 = !DILocation(line: 3508, column: 15, scope: !6991)
!6994 = !DILocation(line: 3508, column: 27, scope: !6991)
!6995 = !DILocation(line: 3508, column: 6, scope: !6975)
!6996 = !DILocation(line: 3509, column: 11, scope: !6991)
!6997 = !DILocation(line: 3509, column: 15, scope: !6991)
!6998 = !DILocation(line: 3509, column: 4, scope: !6991)
!6999 = distinct !{!6999, !6987, !7000}
!7000 = !DILocation(line: 3509, column: 17, scope: !6975)
!7001 = !DILocation(line: 3510, column: 5, scope: !6975)
!7002 = !DILocation(line: 3511, column: 10, scope: !6921)
!7003 = !DILocation(line: 3511, column: 3, scope: !6921)
!7004 = !DILocation(line: 3512, column: 1, scope: !6921)
!7005 = distinct !DISubprogram(name: "mpz_abs_add_bit", scope: !3, file: !3, line: 3515, type: !1866, scopeLine: 3516, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!7006 = !DILocalVariable(name: "d", arg: 1, scope: !7005, file: !3, line: 3515, type: !1838)
!7007 = !DILocation(line: 3515, column: 24, scope: !7005)
!7008 = !DILocalVariable(name: "bit_index", arg: 2, scope: !7005, file: !3, line: 3515, type: !35)
!7009 = !DILocation(line: 3515, column: 39, scope: !7005)
!7010 = !DILocalVariable(name: "dn", scope: !7005, file: !3, line: 3517, type: !184)
!7011 = !DILocation(line: 3517, column: 13, scope: !7005)
!7012 = !DILocalVariable(name: "limb_index", scope: !7005, file: !3, line: 3517, type: !184)
!7013 = !DILocation(line: 3517, column: 17, scope: !7005)
!7014 = !DILocalVariable(name: "bit", scope: !7005, file: !3, line: 3518, type: !27)
!7015 = !DILocation(line: 3518, column: 13, scope: !7005)
!7016 = !DILocalVariable(name: "dp", scope: !7005, file: !3, line: 3519, type: !31)
!7017 = !DILocation(line: 3519, column: 10, scope: !7005)
!7018 = !DILocation(line: 3521, column: 8, scope: !7005)
!7019 = !DILocation(line: 3521, column: 6, scope: !7005)
!7020 = !DILocation(line: 3523, column: 16, scope: !7005)
!7021 = !DILocation(line: 3523, column: 26, scope: !7005)
!7022 = !DILocation(line: 3523, column: 14, scope: !7005)
!7023 = !DILocation(line: 3524, column: 27, scope: !7005)
!7024 = !DILocation(line: 3524, column: 37, scope: !7005)
!7025 = !DILocation(line: 3524, column: 23, scope: !7005)
!7026 = !DILocation(line: 3524, column: 7, scope: !7005)
!7027 = !DILocation(line: 3526, column: 7, scope: !7028)
!7028 = distinct !DILexicalBlock(scope: !7005, file: !3, line: 3526, column: 7)
!7029 = !DILocation(line: 3526, column: 21, scope: !7028)
!7030 = !DILocation(line: 3526, column: 18, scope: !7028)
!7031 = !DILocation(line: 3526, column: 7, scope: !7005)
!7032 = !DILocalVariable(name: "i", scope: !7033, file: !3, line: 3528, type: !184)
!7033 = distinct !DILexicalBlock(scope: !7028, file: !3, line: 3527, column: 5)
!7034 = !DILocation(line: 3528, column: 17, scope: !7033)
!7035 = !DILocation(line: 3531, column: 12, scope: !7033)
!7036 = !DILocation(line: 3531, column: 10, scope: !7033)
!7037 = !DILocation(line: 3533, column: 24, scope: !7033)
!7038 = !DILocation(line: 3533, column: 7, scope: !7033)
!7039 = !DILocation(line: 3533, column: 10, scope: !7033)
!7040 = !DILocation(line: 3533, column: 22, scope: !7033)
!7041 = !DILocation(line: 3534, column: 16, scope: !7042)
!7042 = distinct !DILexicalBlock(scope: !7033, file: !3, line: 3534, column: 7)
!7043 = !DILocation(line: 3534, column: 14, scope: !7042)
!7044 = !DILocation(line: 3534, column: 12, scope: !7042)
!7045 = !DILocation(line: 3534, column: 20, scope: !7046)
!7046 = distinct !DILexicalBlock(scope: !7042, file: !3, line: 3534, column: 7)
!7047 = !DILocation(line: 3534, column: 24, scope: !7046)
!7048 = !DILocation(line: 3534, column: 22, scope: !7046)
!7049 = !DILocation(line: 3534, column: 7, scope: !7042)
!7050 = !DILocation(line: 3535, column: 2, scope: !7046)
!7051 = !DILocation(line: 3535, column: 5, scope: !7046)
!7052 = !DILocation(line: 3535, column: 8, scope: !7046)
!7053 = !DILocation(line: 3534, column: 37, scope: !7046)
!7054 = !DILocation(line: 3534, column: 7, scope: !7046)
!7055 = distinct !{!7055, !7049, !7056}
!7056 = !DILocation(line: 3535, column: 10, scope: !7042)
!7057 = !DILocation(line: 3536, column: 12, scope: !7033)
!7058 = !DILocation(line: 3536, column: 23, scope: !7033)
!7059 = !DILocation(line: 3536, column: 10, scope: !7033)
!7060 = !DILocation(line: 3537, column: 5, scope: !7033)
!7061 = !DILocalVariable(name: "cy", scope: !7062, file: !3, line: 3540, type: !27)
!7062 = distinct !DILexicalBlock(scope: !7028, file: !3, line: 3539, column: 5)
!7063 = !DILocation(line: 3540, column: 17, scope: !7062)
!7064 = !DILocation(line: 3542, column: 12, scope: !7062)
!7065 = !DILocation(line: 3542, column: 15, scope: !7062)
!7066 = !DILocation(line: 3542, column: 10, scope: !7062)
!7067 = !DILocation(line: 3544, column: 23, scope: !7062)
!7068 = !DILocation(line: 3544, column: 28, scope: !7062)
!7069 = !DILocation(line: 3544, column: 26, scope: !7062)
!7070 = !DILocation(line: 3544, column: 40, scope: !7062)
!7071 = !DILocation(line: 3544, column: 45, scope: !7062)
!7072 = !DILocation(line: 3544, column: 43, scope: !7062)
!7073 = !DILocation(line: 3544, column: 57, scope: !7062)
!7074 = !DILocation(line: 3544, column: 62, scope: !7062)
!7075 = !DILocation(line: 3544, column: 60, scope: !7062)
!7076 = !DILocation(line: 3544, column: 74, scope: !7062)
!7077 = !DILocation(line: 3544, column: 12, scope: !7062)
!7078 = !DILocation(line: 3544, column: 10, scope: !7062)
!7079 = !DILocation(line: 3545, column: 11, scope: !7080)
!7080 = distinct !DILexicalBlock(scope: !7062, file: !3, line: 3545, column: 11)
!7081 = !DILocation(line: 3545, column: 14, scope: !7080)
!7082 = !DILocation(line: 3545, column: 11, scope: !7062)
!7083 = !DILocation(line: 3547, column: 9, scope: !7084)
!7084 = distinct !DILexicalBlock(scope: !7080, file: !3, line: 3546, column: 2)
!7085 = !DILocation(line: 3547, column: 7, scope: !7084)
!7086 = !DILocation(line: 3548, column: 15, scope: !7084)
!7087 = !DILocation(line: 3548, column: 4, scope: !7084)
!7088 = !DILocation(line: 3548, column: 9, scope: !7084)
!7089 = !DILocation(line: 3548, column: 13, scope: !7084)
!7090 = !DILocation(line: 3549, column: 2, scope: !7084)
!7091 = !DILocation(line: 3552, column: 18, scope: !7005)
!7092 = !DILocation(line: 3552, column: 21, scope: !7005)
!7093 = !DILocation(line: 3552, column: 30, scope: !7005)
!7094 = !DILocation(line: 3552, column: 17, scope: !7005)
!7095 = !DILocation(line: 3552, column: 39, scope: !7005)
!7096 = !DILocation(line: 3552, column: 37, scope: !7005)
!7097 = !DILocation(line: 3552, column: 44, scope: !7005)
!7098 = !DILocation(line: 3552, column: 3, scope: !7005)
!7099 = !DILocation(line: 3552, column: 6, scope: !7005)
!7100 = !DILocation(line: 3552, column: 15, scope: !7005)
!7101 = !DILocation(line: 3553, column: 1, scope: !7005)
!7102 = distinct !DISubprogram(name: "mpz_abs_sub_bit", scope: !3, file: !3, line: 3556, type: !1866, scopeLine: 3557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!7103 = !DILocalVariable(name: "d", arg: 1, scope: !7102, file: !3, line: 3556, type: !1838)
!7104 = !DILocation(line: 3556, column: 24, scope: !7102)
!7105 = !DILocalVariable(name: "bit_index", arg: 2, scope: !7102, file: !3, line: 3556, type: !35)
!7106 = !DILocation(line: 3556, column: 39, scope: !7102)
!7107 = !DILocalVariable(name: "dn", scope: !7102, file: !3, line: 3558, type: !184)
!7108 = !DILocation(line: 3558, column: 13, scope: !7102)
!7109 = !DILocalVariable(name: "limb_index", scope: !7102, file: !3, line: 3558, type: !184)
!7110 = !DILocation(line: 3558, column: 17, scope: !7102)
!7111 = !DILocalVariable(name: "dp", scope: !7102, file: !3, line: 3559, type: !31)
!7112 = !DILocation(line: 3559, column: 10, scope: !7102)
!7113 = !DILocalVariable(name: "bit", scope: !7102, file: !3, line: 3560, type: !27)
!7114 = !DILocation(line: 3560, column: 13, scope: !7102)
!7115 = !DILocation(line: 3562, column: 8, scope: !7102)
!7116 = !DILocation(line: 3562, column: 6, scope: !7102)
!7117 = !DILocation(line: 3563, column: 8, scope: !7102)
!7118 = !DILocation(line: 3563, column: 11, scope: !7102)
!7119 = !DILocation(line: 3563, column: 6, scope: !7102)
!7120 = !DILocation(line: 3565, column: 16, scope: !7102)
!7121 = !DILocation(line: 3565, column: 26, scope: !7102)
!7122 = !DILocation(line: 3565, column: 14, scope: !7102)
!7123 = !DILocation(line: 3566, column: 27, scope: !7102)
!7124 = !DILocation(line: 3566, column: 37, scope: !7102)
!7125 = !DILocation(line: 3566, column: 23, scope: !7102)
!7126 = !DILocation(line: 3566, column: 7, scope: !7102)
!7127 = !DILocation(line: 3570, column: 3, scope: !7102)
!7128 = !DILocalVariable(name: "__cy", scope: !7129, file: !3, line: 3570, type: !27)
!7129 = distinct !DILexicalBlock(scope: !7102, file: !3, line: 3570, column: 3)
!7130 = !DILocation(line: 3570, column: 3, scope: !7129)
!7131 = !DILocation(line: 3572, column: 10, scope: !7102)
!7132 = !DILocation(line: 3572, column: 13, scope: !7102)
!7133 = !DILocation(line: 3572, column: 15, scope: !7102)
!7134 = !DILocation(line: 3572, column: 19, scope: !7102)
!7135 = !DILocation(line: 3572, column: 9, scope: !7102)
!7136 = !DILocation(line: 3572, column: 6, scope: !7102)
!7137 = !DILocation(line: 3573, column: 18, scope: !7102)
!7138 = !DILocation(line: 3573, column: 21, scope: !7102)
!7139 = !DILocation(line: 3573, column: 30, scope: !7102)
!7140 = !DILocation(line: 3573, column: 17, scope: !7102)
!7141 = !DILocation(line: 3573, column: 39, scope: !7102)
!7142 = !DILocation(line: 3573, column: 37, scope: !7102)
!7143 = !DILocation(line: 3573, column: 44, scope: !7102)
!7144 = !DILocation(line: 3573, column: 3, scope: !7102)
!7145 = !DILocation(line: 3573, column: 6, scope: !7102)
!7146 = !DILocation(line: 3573, column: 15, scope: !7102)
!7147 = !DILocation(line: 3574, column: 1, scope: !7102)
!7148 = distinct !DISubprogram(name: "mpz_clrbit", scope: !3, file: !3, line: 3589, type: !1866, scopeLine: 3590, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!7149 = !DILocalVariable(name: "d", arg: 1, scope: !7148, file: !3, line: 3589, type: !1838)
!7150 = !DILocation(line: 3589, column: 19, scope: !7148)
!7151 = !DILocalVariable(name: "bit_index", arg: 2, scope: !7148, file: !3, line: 3589, type: !35)
!7152 = !DILocation(line: 3589, column: 34, scope: !7148)
!7153 = !DILocation(line: 3591, column: 19, scope: !7154)
!7154 = distinct !DILexicalBlock(scope: !7148, file: !3, line: 3591, column: 7)
!7155 = !DILocation(line: 3591, column: 22, scope: !7154)
!7156 = !DILocation(line: 3591, column: 7, scope: !7154)
!7157 = !DILocation(line: 3591, column: 7, scope: !7148)
!7158 = !DILocation(line: 3593, column: 11, scope: !7159)
!7159 = distinct !DILexicalBlock(scope: !7160, file: !3, line: 3593, column: 11)
!7160 = distinct !DILexicalBlock(scope: !7154, file: !3, line: 3592, column: 5)
!7161 = !DILocation(line: 3593, column: 14, scope: !7159)
!7162 = !DILocation(line: 3593, column: 23, scope: !7159)
!7163 = !DILocation(line: 3593, column: 11, scope: !7160)
!7164 = !DILocation(line: 3594, column: 19, scope: !7159)
!7165 = !DILocation(line: 3594, column: 22, scope: !7159)
!7166 = !DILocation(line: 3594, column: 2, scope: !7159)
!7167 = !DILocation(line: 3596, column: 19, scope: !7159)
!7168 = !DILocation(line: 3596, column: 22, scope: !7159)
!7169 = !DILocation(line: 3596, column: 2, scope: !7159)
!7170 = !DILocation(line: 3597, column: 5, scope: !7160)
!7171 = !DILocation(line: 3598, column: 1, scope: !7148)
!7172 = distinct !DISubprogram(name: "mpz_combit", scope: !3, file: !3, line: 3601, type: !1866, scopeLine: 3602, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!7173 = !DILocalVariable(name: "d", arg: 1, scope: !7172, file: !3, line: 3601, type: !1838)
!7174 = !DILocation(line: 3601, column: 19, scope: !7172)
!7175 = !DILocalVariable(name: "bit_index", arg: 2, scope: !7172, file: !3, line: 3601, type: !35)
!7176 = !DILocation(line: 3601, column: 34, scope: !7172)
!7177 = !DILocation(line: 3603, column: 19, scope: !7178)
!7178 = distinct !DILexicalBlock(scope: !7172, file: !3, line: 3603, column: 7)
!7179 = !DILocation(line: 3603, column: 22, scope: !7178)
!7180 = !DILocation(line: 3603, column: 7, scope: !7178)
!7181 = !DILocation(line: 3603, column: 36, scope: !7178)
!7182 = !DILocation(line: 3603, column: 39, scope: !7178)
!7183 = !DILocation(line: 3603, column: 48, scope: !7178)
!7184 = !DILocation(line: 3603, column: 33, scope: !7178)
!7185 = !DILocation(line: 3603, column: 7, scope: !7172)
!7186 = !DILocation(line: 3604, column: 22, scope: !7178)
!7187 = !DILocation(line: 3604, column: 25, scope: !7178)
!7188 = !DILocation(line: 3604, column: 5, scope: !7178)
!7189 = !DILocation(line: 3606, column: 22, scope: !7178)
!7190 = !DILocation(line: 3606, column: 25, scope: !7178)
!7191 = !DILocation(line: 3606, column: 5, scope: !7178)
!7192 = !DILocation(line: 3607, column: 1, scope: !7172)
!7193 = distinct !DISubprogram(name: "mpz_com", scope: !3, file: !3, line: 3610, type: !1948, scopeLine: 3611, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!7194 = !DILocalVariable(name: "r", arg: 1, scope: !7193, file: !3, line: 3610, type: !1838)
!7195 = !DILocation(line: 3610, column: 16, scope: !7193)
!7196 = !DILocalVariable(name: "u", arg: 2, scope: !7193, file: !3, line: 3610, type: !1950)
!7197 = !DILocation(line: 3610, column: 31, scope: !7193)
!7198 = !DILocation(line: 3612, column: 12, scope: !7193)
!7199 = !DILocation(line: 3612, column: 15, scope: !7193)
!7200 = !DILocation(line: 3612, column: 3, scope: !7193)
!7201 = !DILocation(line: 3613, column: 15, scope: !7193)
!7202 = !DILocation(line: 3613, column: 18, scope: !7193)
!7203 = !DILocation(line: 3613, column: 3, scope: !7193)
!7204 = !DILocation(line: 3614, column: 1, scope: !7193)
!7205 = distinct !DISubprogram(name: "mpz_and", scope: !3, file: !3, line: 3617, type: !3029, scopeLine: 3618, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!7206 = !DILocalVariable(name: "r", arg: 1, scope: !7205, file: !3, line: 3617, type: !1838)
!7207 = !DILocation(line: 3617, column: 16, scope: !7205)
!7208 = !DILocalVariable(name: "u", arg: 2, scope: !7205, file: !3, line: 3617, type: !1950)
!7209 = !DILocation(line: 3617, column: 31, scope: !7205)
!7210 = !DILocalVariable(name: "v", arg: 3, scope: !7205, file: !3, line: 3617, type: !1950)
!7211 = !DILocation(line: 3617, column: 46, scope: !7205)
!7212 = !DILocalVariable(name: "un", scope: !7205, file: !3, line: 3619, type: !184)
!7213 = !DILocation(line: 3619, column: 13, scope: !7205)
!7214 = !DILocalVariable(name: "vn", scope: !7205, file: !3, line: 3619, type: !184)
!7215 = !DILocation(line: 3619, column: 17, scope: !7205)
!7216 = !DILocalVariable(name: "rn", scope: !7205, file: !3, line: 3619, type: !184)
!7217 = !DILocation(line: 3619, column: 21, scope: !7205)
!7218 = !DILocalVariable(name: "i", scope: !7205, file: !3, line: 3619, type: !184)
!7219 = !DILocation(line: 3619, column: 25, scope: !7205)
!7220 = !DILocalVariable(name: "up", scope: !7205, file: !3, line: 3620, type: !31)
!7221 = !DILocation(line: 3620, column: 10, scope: !7205)
!7222 = !DILocalVariable(name: "vp", scope: !7205, file: !3, line: 3620, type: !31)
!7223 = !DILocation(line: 3620, column: 14, scope: !7205)
!7224 = !DILocalVariable(name: "rp", scope: !7205, file: !3, line: 3620, type: !31)
!7225 = !DILocation(line: 3620, column: 18, scope: !7205)
!7226 = !DILocalVariable(name: "ux", scope: !7205, file: !3, line: 3622, type: !27)
!7227 = !DILocation(line: 3622, column: 13, scope: !7205)
!7228 = !DILocalVariable(name: "vx", scope: !7205, file: !3, line: 3622, type: !27)
!7229 = !DILocation(line: 3622, column: 17, scope: !7205)
!7230 = !DILocalVariable(name: "rx", scope: !7205, file: !3, line: 3622, type: !27)
!7231 = !DILocation(line: 3622, column: 21, scope: !7205)
!7232 = !DILocalVariable(name: "uc", scope: !7205, file: !3, line: 3623, type: !27)
!7233 = !DILocation(line: 3623, column: 13, scope: !7205)
!7234 = !DILocalVariable(name: "vc", scope: !7205, file: !3, line: 3623, type: !27)
!7235 = !DILocation(line: 3623, column: 17, scope: !7205)
!7236 = !DILocalVariable(name: "rc", scope: !7205, file: !3, line: 3623, type: !27)
!7237 = !DILocation(line: 3623, column: 21, scope: !7205)
!7238 = !DILocalVariable(name: "ul", scope: !7205, file: !3, line: 3624, type: !27)
!7239 = !DILocation(line: 3624, column: 13, scope: !7205)
!7240 = !DILocalVariable(name: "vl", scope: !7205, file: !3, line: 3624, type: !27)
!7241 = !DILocation(line: 3624, column: 17, scope: !7205)
!7242 = !DILocalVariable(name: "rl", scope: !7205, file: !3, line: 3624, type: !27)
!7243 = !DILocation(line: 3624, column: 21, scope: !7205)
!7244 = !DILocation(line: 3626, column: 8, scope: !7205)
!7245 = !DILocation(line: 3626, column: 6, scope: !7205)
!7246 = !DILocation(line: 3627, column: 8, scope: !7205)
!7247 = !DILocation(line: 3627, column: 6, scope: !7205)
!7248 = !DILocation(line: 3628, column: 7, scope: !7249)
!7249 = distinct !DILexicalBlock(scope: !7205, file: !3, line: 3628, column: 7)
!7250 = !DILocation(line: 3628, column: 12, scope: !7249)
!7251 = !DILocation(line: 3628, column: 10, scope: !7249)
!7252 = !DILocation(line: 3628, column: 7, scope: !7205)
!7253 = !DILocation(line: 3630, column: 7, scope: !7254)
!7254 = distinct !DILexicalBlock(scope: !7249, file: !3, line: 3629, column: 5)
!7255 = !DILocalVariable(name: "__mpz_srcptr_swap__tmp", scope: !7256, file: !3, line: 3630, type: !2176)
!7256 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 3630, column: 7)
!7257 = !DILocation(line: 3630, column: 7, scope: !7256)
!7258 = !DILocation(line: 3631, column: 7, scope: !7254)
!7259 = !DILocalVariable(name: "__mp_size_t_swap__tmp", scope: !7260, file: !3, line: 3631, type: !184)
!7260 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 3631, column: 7)
!7261 = !DILocation(line: 3631, column: 7, scope: !7260)
!7262 = !DILocation(line: 3632, column: 5, scope: !7254)
!7263 = !DILocation(line: 3633, column: 7, scope: !7264)
!7264 = distinct !DILexicalBlock(scope: !7205, file: !3, line: 3633, column: 7)
!7265 = !DILocation(line: 3633, column: 10, scope: !7264)
!7266 = !DILocation(line: 3633, column: 7, scope: !7205)
!7267 = !DILocation(line: 3635, column: 7, scope: !7268)
!7268 = distinct !DILexicalBlock(scope: !7264, file: !3, line: 3634, column: 5)
!7269 = !DILocation(line: 3635, column: 10, scope: !7268)
!7270 = !DILocation(line: 3635, column: 19, scope: !7268)
!7271 = !DILocation(line: 3636, column: 7, scope: !7268)
!7272 = !DILocation(line: 3639, column: 8, scope: !7205)
!7273 = !DILocation(line: 3639, column: 11, scope: !7205)
!7274 = !DILocation(line: 3639, column: 20, scope: !7205)
!7275 = !DILocation(line: 3639, column: 6, scope: !7205)
!7276 = !DILocation(line: 3640, column: 8, scope: !7205)
!7277 = !DILocation(line: 3640, column: 11, scope: !7205)
!7278 = !DILocation(line: 3640, column: 20, scope: !7205)
!7279 = !DILocation(line: 3640, column: 6, scope: !7205)
!7280 = !DILocation(line: 3641, column: 8, scope: !7205)
!7281 = !DILocation(line: 3641, column: 13, scope: !7205)
!7282 = !DILocation(line: 3641, column: 11, scope: !7205)
!7283 = !DILocation(line: 3641, column: 6, scope: !7205)
!7284 = !DILocation(line: 3643, column: 9, scope: !7205)
!7285 = !DILocation(line: 3643, column: 8, scope: !7205)
!7286 = !DILocation(line: 3643, column: 6, scope: !7205)
!7287 = !DILocation(line: 3644, column: 9, scope: !7205)
!7288 = !DILocation(line: 3644, column: 8, scope: !7205)
!7289 = !DILocation(line: 3644, column: 6, scope: !7205)
!7290 = !DILocation(line: 3645, column: 9, scope: !7205)
!7291 = !DILocation(line: 3645, column: 8, scope: !7205)
!7292 = !DILocation(line: 3645, column: 6, scope: !7205)
!7293 = !DILocation(line: 3648, column: 8, scope: !7205)
!7294 = !DILocation(line: 3648, column: 13, scope: !7205)
!7295 = !DILocation(line: 3648, column: 18, scope: !7205)
!7296 = !DILocation(line: 3648, column: 6, scope: !7205)
!7297 = !DILocation(line: 3650, column: 8, scope: !7205)
!7298 = !DILocation(line: 3650, column: 6, scope: !7205)
!7299 = !DILocation(line: 3652, column: 8, scope: !7205)
!7300 = !DILocation(line: 3652, column: 11, scope: !7205)
!7301 = !DILocation(line: 3652, column: 6, scope: !7205)
!7302 = !DILocation(line: 3653, column: 8, scope: !7205)
!7303 = !DILocation(line: 3653, column: 11, scope: !7205)
!7304 = !DILocation(line: 3653, column: 6, scope: !7205)
!7305 = !DILocation(line: 3655, column: 5, scope: !7205)
!7306 = !DILocation(line: 3656, column: 3, scope: !7205)
!7307 = !DILocation(line: 3658, column: 13, scope: !7308)
!7308 = distinct !DILexicalBlock(scope: !7205, file: !3, line: 3657, column: 5)
!7309 = !DILocation(line: 3658, column: 16, scope: !7308)
!7310 = !DILocation(line: 3658, column: 21, scope: !7308)
!7311 = !DILocation(line: 3658, column: 19, scope: !7308)
!7312 = !DILocation(line: 3658, column: 27, scope: !7308)
!7313 = !DILocation(line: 3658, column: 25, scope: !7308)
!7314 = !DILocation(line: 3658, column: 10, scope: !7308)
!7315 = !DILocation(line: 3659, column: 12, scope: !7308)
!7316 = !DILocation(line: 3659, column: 17, scope: !7308)
!7317 = !DILocation(line: 3659, column: 15, scope: !7308)
!7318 = !DILocation(line: 3659, column: 10, scope: !7308)
!7319 = !DILocation(line: 3661, column: 13, scope: !7308)
!7320 = !DILocation(line: 3661, column: 16, scope: !7308)
!7321 = !DILocation(line: 3661, column: 21, scope: !7308)
!7322 = !DILocation(line: 3661, column: 19, scope: !7308)
!7323 = !DILocation(line: 3661, column: 27, scope: !7308)
!7324 = !DILocation(line: 3661, column: 25, scope: !7308)
!7325 = !DILocation(line: 3661, column: 10, scope: !7308)
!7326 = !DILocation(line: 3662, column: 12, scope: !7308)
!7327 = !DILocation(line: 3662, column: 17, scope: !7308)
!7328 = !DILocation(line: 3662, column: 15, scope: !7308)
!7329 = !DILocation(line: 3662, column: 10, scope: !7308)
!7330 = !DILocation(line: 3664, column: 15, scope: !7308)
!7331 = !DILocation(line: 3664, column: 20, scope: !7308)
!7332 = !DILocation(line: 3664, column: 18, scope: !7308)
!7333 = !DILocation(line: 3664, column: 26, scope: !7308)
!7334 = !DILocation(line: 3664, column: 24, scope: !7308)
!7335 = !DILocation(line: 3664, column: 32, scope: !7308)
!7336 = !DILocation(line: 3664, column: 30, scope: !7308)
!7337 = !DILocation(line: 3664, column: 10, scope: !7308)
!7338 = !DILocation(line: 3665, column: 12, scope: !7308)
!7339 = !DILocation(line: 3665, column: 17, scope: !7308)
!7340 = !DILocation(line: 3665, column: 15, scope: !7308)
!7341 = !DILocation(line: 3665, column: 10, scope: !7308)
!7342 = !DILocation(line: 3666, column: 15, scope: !7308)
!7343 = !DILocation(line: 3666, column: 7, scope: !7308)
!7344 = !DILocation(line: 3666, column: 10, scope: !7308)
!7345 = !DILocation(line: 3666, column: 13, scope: !7308)
!7346 = !DILocation(line: 3667, column: 5, scope: !7308)
!7347 = !DILocation(line: 3668, column: 10, scope: !7205)
!7348 = !DILocation(line: 3668, column: 16, scope: !7205)
!7349 = !DILocation(line: 3668, column: 14, scope: !7205)
!7350 = distinct !{!7350, !7306, !7351}
!7351 = !DILocation(line: 3668, column: 18, scope: !7205)
!7352 = !DILocation(line: 3671, column: 3, scope: !7205)
!7353 = !DILocation(line: 3671, column: 10, scope: !7354)
!7354 = distinct !DILexicalBlock(scope: !7355, file: !3, line: 3671, column: 3)
!7355 = distinct !DILexicalBlock(scope: !7205, file: !3, line: 3671, column: 3)
!7356 = !DILocation(line: 3671, column: 14, scope: !7354)
!7357 = !DILocation(line: 3671, column: 12, scope: !7354)
!7358 = !DILocation(line: 3671, column: 3, scope: !7355)
!7359 = !DILocation(line: 3673, column: 13, scope: !7360)
!7360 = distinct !DILexicalBlock(scope: !7354, file: !3, line: 3672, column: 5)
!7361 = !DILocation(line: 3673, column: 16, scope: !7360)
!7362 = !DILocation(line: 3673, column: 21, scope: !7360)
!7363 = !DILocation(line: 3673, column: 19, scope: !7360)
!7364 = !DILocation(line: 3673, column: 27, scope: !7360)
!7365 = !DILocation(line: 3673, column: 25, scope: !7360)
!7366 = !DILocation(line: 3673, column: 10, scope: !7360)
!7367 = !DILocation(line: 3674, column: 12, scope: !7360)
!7368 = !DILocation(line: 3674, column: 17, scope: !7360)
!7369 = !DILocation(line: 3674, column: 15, scope: !7360)
!7370 = !DILocation(line: 3674, column: 10, scope: !7360)
!7371 = !DILocation(line: 3676, column: 15, scope: !7360)
!7372 = !DILocation(line: 3676, column: 20, scope: !7360)
!7373 = !DILocation(line: 3676, column: 18, scope: !7360)
!7374 = !DILocation(line: 3676, column: 26, scope: !7360)
!7375 = !DILocation(line: 3676, column: 24, scope: !7360)
!7376 = !DILocation(line: 3676, column: 32, scope: !7360)
!7377 = !DILocation(line: 3676, column: 30, scope: !7360)
!7378 = !DILocation(line: 3676, column: 10, scope: !7360)
!7379 = !DILocation(line: 3677, column: 12, scope: !7360)
!7380 = !DILocation(line: 3677, column: 17, scope: !7360)
!7381 = !DILocation(line: 3677, column: 15, scope: !7360)
!7382 = !DILocation(line: 3677, column: 10, scope: !7360)
!7383 = !DILocation(line: 3678, column: 15, scope: !7360)
!7384 = !DILocation(line: 3678, column: 7, scope: !7360)
!7385 = !DILocation(line: 3678, column: 10, scope: !7360)
!7386 = !DILocation(line: 3678, column: 13, scope: !7360)
!7387 = !DILocation(line: 3679, column: 5, scope: !7360)
!7388 = !DILocation(line: 3671, column: 19, scope: !7354)
!7389 = !DILocation(line: 3671, column: 3, scope: !7354)
!7390 = distinct !{!7390, !7358, !7391}
!7391 = !DILocation(line: 3679, column: 5, scope: !7355)
!7392 = !DILocation(line: 3680, column: 7, scope: !7393)
!7393 = distinct !DILexicalBlock(scope: !7205, file: !3, line: 3680, column: 7)
!7394 = !DILocation(line: 3680, column: 7, scope: !7205)
!7395 = !DILocation(line: 3681, column: 16, scope: !7393)
!7396 = !DILocation(line: 3681, column: 5, scope: !7393)
!7397 = !DILocation(line: 3681, column: 10, scope: !7393)
!7398 = !DILocation(line: 3681, column: 14, scope: !7393)
!7399 = !DILocation(line: 3683, column: 31, scope: !7393)
!7400 = !DILocation(line: 3683, column: 35, scope: !7393)
!7401 = !DILocation(line: 3683, column: 10, scope: !7393)
!7402 = !DILocation(line: 3683, column: 8, scope: !7393)
!7403 = !DILocation(line: 3685, column: 17, scope: !7205)
!7404 = !DILocation(line: 3685, column: 23, scope: !7205)
!7405 = !DILocation(line: 3685, column: 22, scope: !7205)
!7406 = !DILocation(line: 3685, column: 28, scope: !7205)
!7407 = !DILocation(line: 3685, column: 3, scope: !7205)
!7408 = !DILocation(line: 3685, column: 6, scope: !7205)
!7409 = !DILocation(line: 3685, column: 15, scope: !7205)
!7410 = !DILocation(line: 3686, column: 1, scope: !7205)
!7411 = distinct !DISubprogram(name: "mpz_ior", scope: !3, file: !3, line: 3689, type: !3029, scopeLine: 3690, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!7412 = !DILocalVariable(name: "r", arg: 1, scope: !7411, file: !3, line: 3689, type: !1838)
!7413 = !DILocation(line: 3689, column: 16, scope: !7411)
!7414 = !DILocalVariable(name: "u", arg: 2, scope: !7411, file: !3, line: 3689, type: !1950)
!7415 = !DILocation(line: 3689, column: 31, scope: !7411)
!7416 = !DILocalVariable(name: "v", arg: 3, scope: !7411, file: !3, line: 3689, type: !1950)
!7417 = !DILocation(line: 3689, column: 46, scope: !7411)
!7418 = !DILocalVariable(name: "un", scope: !7411, file: !3, line: 3691, type: !184)
!7419 = !DILocation(line: 3691, column: 13, scope: !7411)
!7420 = !DILocalVariable(name: "vn", scope: !7411, file: !3, line: 3691, type: !184)
!7421 = !DILocation(line: 3691, column: 17, scope: !7411)
!7422 = !DILocalVariable(name: "rn", scope: !7411, file: !3, line: 3691, type: !184)
!7423 = !DILocation(line: 3691, column: 21, scope: !7411)
!7424 = !DILocalVariable(name: "i", scope: !7411, file: !3, line: 3691, type: !184)
!7425 = !DILocation(line: 3691, column: 25, scope: !7411)
!7426 = !DILocalVariable(name: "up", scope: !7411, file: !3, line: 3692, type: !31)
!7427 = !DILocation(line: 3692, column: 10, scope: !7411)
!7428 = !DILocalVariable(name: "vp", scope: !7411, file: !3, line: 3692, type: !31)
!7429 = !DILocation(line: 3692, column: 14, scope: !7411)
!7430 = !DILocalVariable(name: "rp", scope: !7411, file: !3, line: 3692, type: !31)
!7431 = !DILocation(line: 3692, column: 18, scope: !7411)
!7432 = !DILocalVariable(name: "ux", scope: !7411, file: !3, line: 3694, type: !27)
!7433 = !DILocation(line: 3694, column: 13, scope: !7411)
!7434 = !DILocalVariable(name: "vx", scope: !7411, file: !3, line: 3694, type: !27)
!7435 = !DILocation(line: 3694, column: 17, scope: !7411)
!7436 = !DILocalVariable(name: "rx", scope: !7411, file: !3, line: 3694, type: !27)
!7437 = !DILocation(line: 3694, column: 21, scope: !7411)
!7438 = !DILocalVariable(name: "uc", scope: !7411, file: !3, line: 3695, type: !27)
!7439 = !DILocation(line: 3695, column: 13, scope: !7411)
!7440 = !DILocalVariable(name: "vc", scope: !7411, file: !3, line: 3695, type: !27)
!7441 = !DILocation(line: 3695, column: 17, scope: !7411)
!7442 = !DILocalVariable(name: "rc", scope: !7411, file: !3, line: 3695, type: !27)
!7443 = !DILocation(line: 3695, column: 21, scope: !7411)
!7444 = !DILocalVariable(name: "ul", scope: !7411, file: !3, line: 3696, type: !27)
!7445 = !DILocation(line: 3696, column: 13, scope: !7411)
!7446 = !DILocalVariable(name: "vl", scope: !7411, file: !3, line: 3696, type: !27)
!7447 = !DILocation(line: 3696, column: 17, scope: !7411)
!7448 = !DILocalVariable(name: "rl", scope: !7411, file: !3, line: 3696, type: !27)
!7449 = !DILocation(line: 3696, column: 21, scope: !7411)
!7450 = !DILocation(line: 3698, column: 8, scope: !7411)
!7451 = !DILocation(line: 3698, column: 6, scope: !7411)
!7452 = !DILocation(line: 3699, column: 8, scope: !7411)
!7453 = !DILocation(line: 3699, column: 6, scope: !7411)
!7454 = !DILocation(line: 3700, column: 7, scope: !7455)
!7455 = distinct !DILexicalBlock(scope: !7411, file: !3, line: 3700, column: 7)
!7456 = !DILocation(line: 3700, column: 12, scope: !7455)
!7457 = !DILocation(line: 3700, column: 10, scope: !7455)
!7458 = !DILocation(line: 3700, column: 7, scope: !7411)
!7459 = !DILocation(line: 3702, column: 7, scope: !7460)
!7460 = distinct !DILexicalBlock(scope: !7455, file: !3, line: 3701, column: 5)
!7461 = !DILocalVariable(name: "__mpz_srcptr_swap__tmp", scope: !7462, file: !3, line: 3702, type: !2176)
!7462 = distinct !DILexicalBlock(scope: !7460, file: !3, line: 3702, column: 7)
!7463 = !DILocation(line: 3702, column: 7, scope: !7462)
!7464 = !DILocation(line: 3703, column: 7, scope: !7460)
!7465 = !DILocalVariable(name: "__mp_size_t_swap__tmp", scope: !7466, file: !3, line: 3703, type: !184)
!7466 = distinct !DILexicalBlock(scope: !7460, file: !3, line: 3703, column: 7)
!7467 = !DILocation(line: 3703, column: 7, scope: !7466)
!7468 = !DILocation(line: 3704, column: 5, scope: !7460)
!7469 = !DILocation(line: 3705, column: 7, scope: !7470)
!7470 = distinct !DILexicalBlock(scope: !7411, file: !3, line: 3705, column: 7)
!7471 = !DILocation(line: 3705, column: 10, scope: !7470)
!7472 = !DILocation(line: 3705, column: 7, scope: !7411)
!7473 = !DILocation(line: 3707, column: 16, scope: !7474)
!7474 = distinct !DILexicalBlock(scope: !7470, file: !3, line: 3706, column: 5)
!7475 = !DILocation(line: 3707, column: 19, scope: !7474)
!7476 = !DILocation(line: 3707, column: 7, scope: !7474)
!7477 = !DILocation(line: 3708, column: 7, scope: !7474)
!7478 = !DILocation(line: 3711, column: 8, scope: !7411)
!7479 = !DILocation(line: 3711, column: 11, scope: !7411)
!7480 = !DILocation(line: 3711, column: 20, scope: !7411)
!7481 = !DILocation(line: 3711, column: 6, scope: !7411)
!7482 = !DILocation(line: 3712, column: 8, scope: !7411)
!7483 = !DILocation(line: 3712, column: 11, scope: !7411)
!7484 = !DILocation(line: 3712, column: 20, scope: !7411)
!7485 = !DILocation(line: 3712, column: 6, scope: !7411)
!7486 = !DILocation(line: 3713, column: 8, scope: !7411)
!7487 = !DILocation(line: 3713, column: 13, scope: !7411)
!7488 = !DILocation(line: 3713, column: 11, scope: !7411)
!7489 = !DILocation(line: 3713, column: 6, scope: !7411)
!7490 = !DILocation(line: 3715, column: 9, scope: !7411)
!7491 = !DILocation(line: 3715, column: 8, scope: !7411)
!7492 = !DILocation(line: 3715, column: 6, scope: !7411)
!7493 = !DILocation(line: 3716, column: 9, scope: !7411)
!7494 = !DILocation(line: 3716, column: 8, scope: !7411)
!7495 = !DILocation(line: 3716, column: 6, scope: !7411)
!7496 = !DILocation(line: 3717, column: 9, scope: !7411)
!7497 = !DILocation(line: 3717, column: 8, scope: !7411)
!7498 = !DILocation(line: 3717, column: 6, scope: !7411)
!7499 = !DILocation(line: 3721, column: 8, scope: !7411)
!7500 = !DILocation(line: 3721, column: 13, scope: !7411)
!7501 = !DILocation(line: 3721, column: 18, scope: !7411)
!7502 = !DILocation(line: 3721, column: 6, scope: !7411)
!7503 = !DILocation(line: 3723, column: 8, scope: !7411)
!7504 = !DILocation(line: 3723, column: 6, scope: !7411)
!7505 = !DILocation(line: 3725, column: 8, scope: !7411)
!7506 = !DILocation(line: 3725, column: 11, scope: !7411)
!7507 = !DILocation(line: 3725, column: 6, scope: !7411)
!7508 = !DILocation(line: 3726, column: 8, scope: !7411)
!7509 = !DILocation(line: 3726, column: 11, scope: !7411)
!7510 = !DILocation(line: 3726, column: 6, scope: !7411)
!7511 = !DILocation(line: 3728, column: 5, scope: !7411)
!7512 = !DILocation(line: 3729, column: 3, scope: !7411)
!7513 = !DILocation(line: 3731, column: 13, scope: !7514)
!7514 = distinct !DILexicalBlock(scope: !7411, file: !3, line: 3730, column: 5)
!7515 = !DILocation(line: 3731, column: 16, scope: !7514)
!7516 = !DILocation(line: 3731, column: 21, scope: !7514)
!7517 = !DILocation(line: 3731, column: 19, scope: !7514)
!7518 = !DILocation(line: 3731, column: 27, scope: !7514)
!7519 = !DILocation(line: 3731, column: 25, scope: !7514)
!7520 = !DILocation(line: 3731, column: 10, scope: !7514)
!7521 = !DILocation(line: 3732, column: 12, scope: !7514)
!7522 = !DILocation(line: 3732, column: 17, scope: !7514)
!7523 = !DILocation(line: 3732, column: 15, scope: !7514)
!7524 = !DILocation(line: 3732, column: 10, scope: !7514)
!7525 = !DILocation(line: 3734, column: 13, scope: !7514)
!7526 = !DILocation(line: 3734, column: 16, scope: !7514)
!7527 = !DILocation(line: 3734, column: 21, scope: !7514)
!7528 = !DILocation(line: 3734, column: 19, scope: !7514)
!7529 = !DILocation(line: 3734, column: 27, scope: !7514)
!7530 = !DILocation(line: 3734, column: 25, scope: !7514)
!7531 = !DILocation(line: 3734, column: 10, scope: !7514)
!7532 = !DILocation(line: 3735, column: 12, scope: !7514)
!7533 = !DILocation(line: 3735, column: 17, scope: !7514)
!7534 = !DILocation(line: 3735, column: 15, scope: !7514)
!7535 = !DILocation(line: 3735, column: 10, scope: !7514)
!7536 = !DILocation(line: 3737, column: 15, scope: !7514)
!7537 = !DILocation(line: 3737, column: 20, scope: !7514)
!7538 = !DILocation(line: 3737, column: 18, scope: !7514)
!7539 = !DILocation(line: 3737, column: 26, scope: !7514)
!7540 = !DILocation(line: 3737, column: 24, scope: !7514)
!7541 = !DILocation(line: 3737, column: 32, scope: !7514)
!7542 = !DILocation(line: 3737, column: 30, scope: !7514)
!7543 = !DILocation(line: 3737, column: 10, scope: !7514)
!7544 = !DILocation(line: 3738, column: 12, scope: !7514)
!7545 = !DILocation(line: 3738, column: 17, scope: !7514)
!7546 = !DILocation(line: 3738, column: 15, scope: !7514)
!7547 = !DILocation(line: 3738, column: 10, scope: !7514)
!7548 = !DILocation(line: 3739, column: 15, scope: !7514)
!7549 = !DILocation(line: 3739, column: 7, scope: !7514)
!7550 = !DILocation(line: 3739, column: 10, scope: !7514)
!7551 = !DILocation(line: 3739, column: 13, scope: !7514)
!7552 = !DILocation(line: 3740, column: 5, scope: !7514)
!7553 = !DILocation(line: 3741, column: 10, scope: !7411)
!7554 = !DILocation(line: 3741, column: 16, scope: !7411)
!7555 = !DILocation(line: 3741, column: 14, scope: !7411)
!7556 = distinct !{!7556, !7512, !7557}
!7557 = !DILocation(line: 3741, column: 18, scope: !7411)
!7558 = !DILocation(line: 3744, column: 3, scope: !7411)
!7559 = !DILocation(line: 3744, column: 10, scope: !7560)
!7560 = distinct !DILexicalBlock(scope: !7561, file: !3, line: 3744, column: 3)
!7561 = distinct !DILexicalBlock(scope: !7411, file: !3, line: 3744, column: 3)
!7562 = !DILocation(line: 3744, column: 14, scope: !7560)
!7563 = !DILocation(line: 3744, column: 12, scope: !7560)
!7564 = !DILocation(line: 3744, column: 3, scope: !7561)
!7565 = !DILocation(line: 3746, column: 13, scope: !7566)
!7566 = distinct !DILexicalBlock(scope: !7560, file: !3, line: 3745, column: 5)
!7567 = !DILocation(line: 3746, column: 16, scope: !7566)
!7568 = !DILocation(line: 3746, column: 21, scope: !7566)
!7569 = !DILocation(line: 3746, column: 19, scope: !7566)
!7570 = !DILocation(line: 3746, column: 27, scope: !7566)
!7571 = !DILocation(line: 3746, column: 25, scope: !7566)
!7572 = !DILocation(line: 3746, column: 10, scope: !7566)
!7573 = !DILocation(line: 3747, column: 12, scope: !7566)
!7574 = !DILocation(line: 3747, column: 17, scope: !7566)
!7575 = !DILocation(line: 3747, column: 15, scope: !7566)
!7576 = !DILocation(line: 3747, column: 10, scope: !7566)
!7577 = !DILocation(line: 3749, column: 15, scope: !7566)
!7578 = !DILocation(line: 3749, column: 20, scope: !7566)
!7579 = !DILocation(line: 3749, column: 18, scope: !7566)
!7580 = !DILocation(line: 3749, column: 26, scope: !7566)
!7581 = !DILocation(line: 3749, column: 24, scope: !7566)
!7582 = !DILocation(line: 3749, column: 32, scope: !7566)
!7583 = !DILocation(line: 3749, column: 30, scope: !7566)
!7584 = !DILocation(line: 3749, column: 10, scope: !7566)
!7585 = !DILocation(line: 3750, column: 12, scope: !7566)
!7586 = !DILocation(line: 3750, column: 17, scope: !7566)
!7587 = !DILocation(line: 3750, column: 15, scope: !7566)
!7588 = !DILocation(line: 3750, column: 10, scope: !7566)
!7589 = !DILocation(line: 3751, column: 15, scope: !7566)
!7590 = !DILocation(line: 3751, column: 7, scope: !7566)
!7591 = !DILocation(line: 3751, column: 10, scope: !7566)
!7592 = !DILocation(line: 3751, column: 13, scope: !7566)
!7593 = !DILocation(line: 3752, column: 5, scope: !7566)
!7594 = !DILocation(line: 3744, column: 19, scope: !7560)
!7595 = !DILocation(line: 3744, column: 3, scope: !7560)
!7596 = distinct !{!7596, !7564, !7597}
!7597 = !DILocation(line: 3752, column: 5, scope: !7561)
!7598 = !DILocation(line: 3753, column: 7, scope: !7599)
!7599 = distinct !DILexicalBlock(scope: !7411, file: !3, line: 3753, column: 7)
!7600 = !DILocation(line: 3753, column: 7, scope: !7411)
!7601 = !DILocation(line: 3754, column: 16, scope: !7599)
!7602 = !DILocation(line: 3754, column: 5, scope: !7599)
!7603 = !DILocation(line: 3754, column: 10, scope: !7599)
!7604 = !DILocation(line: 3754, column: 14, scope: !7599)
!7605 = !DILocation(line: 3756, column: 31, scope: !7599)
!7606 = !DILocation(line: 3756, column: 35, scope: !7599)
!7607 = !DILocation(line: 3756, column: 10, scope: !7599)
!7608 = !DILocation(line: 3756, column: 8, scope: !7599)
!7609 = !DILocation(line: 3758, column: 17, scope: !7411)
!7610 = !DILocation(line: 3758, column: 23, scope: !7411)
!7611 = !DILocation(line: 3758, column: 22, scope: !7411)
!7612 = !DILocation(line: 3758, column: 28, scope: !7411)
!7613 = !DILocation(line: 3758, column: 3, scope: !7411)
!7614 = !DILocation(line: 3758, column: 6, scope: !7411)
!7615 = !DILocation(line: 3758, column: 15, scope: !7411)
!7616 = !DILocation(line: 3759, column: 1, scope: !7411)
!7617 = distinct !DISubprogram(name: "mpz_xor", scope: !3, file: !3, line: 3762, type: !3029, scopeLine: 3763, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!7618 = !DILocalVariable(name: "r", arg: 1, scope: !7617, file: !3, line: 3762, type: !1838)
!7619 = !DILocation(line: 3762, column: 16, scope: !7617)
!7620 = !DILocalVariable(name: "u", arg: 2, scope: !7617, file: !3, line: 3762, type: !1950)
!7621 = !DILocation(line: 3762, column: 31, scope: !7617)
!7622 = !DILocalVariable(name: "v", arg: 3, scope: !7617, file: !3, line: 3762, type: !1950)
!7623 = !DILocation(line: 3762, column: 46, scope: !7617)
!7624 = !DILocalVariable(name: "un", scope: !7617, file: !3, line: 3764, type: !184)
!7625 = !DILocation(line: 3764, column: 13, scope: !7617)
!7626 = !DILocalVariable(name: "vn", scope: !7617, file: !3, line: 3764, type: !184)
!7627 = !DILocation(line: 3764, column: 17, scope: !7617)
!7628 = !DILocalVariable(name: "i", scope: !7617, file: !3, line: 3764, type: !184)
!7629 = !DILocation(line: 3764, column: 21, scope: !7617)
!7630 = !DILocalVariable(name: "up", scope: !7617, file: !3, line: 3765, type: !31)
!7631 = !DILocation(line: 3765, column: 10, scope: !7617)
!7632 = !DILocalVariable(name: "vp", scope: !7617, file: !3, line: 3765, type: !31)
!7633 = !DILocation(line: 3765, column: 14, scope: !7617)
!7634 = !DILocalVariable(name: "rp", scope: !7617, file: !3, line: 3765, type: !31)
!7635 = !DILocation(line: 3765, column: 18, scope: !7617)
!7636 = !DILocalVariable(name: "ux", scope: !7617, file: !3, line: 3767, type: !27)
!7637 = !DILocation(line: 3767, column: 13, scope: !7617)
!7638 = !DILocalVariable(name: "vx", scope: !7617, file: !3, line: 3767, type: !27)
!7639 = !DILocation(line: 3767, column: 17, scope: !7617)
!7640 = !DILocalVariable(name: "rx", scope: !7617, file: !3, line: 3767, type: !27)
!7641 = !DILocation(line: 3767, column: 21, scope: !7617)
!7642 = !DILocalVariable(name: "uc", scope: !7617, file: !3, line: 3768, type: !27)
!7643 = !DILocation(line: 3768, column: 13, scope: !7617)
!7644 = !DILocalVariable(name: "vc", scope: !7617, file: !3, line: 3768, type: !27)
!7645 = !DILocation(line: 3768, column: 17, scope: !7617)
!7646 = !DILocalVariable(name: "rc", scope: !7617, file: !3, line: 3768, type: !27)
!7647 = !DILocation(line: 3768, column: 21, scope: !7617)
!7648 = !DILocalVariable(name: "ul", scope: !7617, file: !3, line: 3769, type: !27)
!7649 = !DILocation(line: 3769, column: 13, scope: !7617)
!7650 = !DILocalVariable(name: "vl", scope: !7617, file: !3, line: 3769, type: !27)
!7651 = !DILocation(line: 3769, column: 17, scope: !7617)
!7652 = !DILocalVariable(name: "rl", scope: !7617, file: !3, line: 3769, type: !27)
!7653 = !DILocation(line: 3769, column: 21, scope: !7617)
!7654 = !DILocation(line: 3771, column: 8, scope: !7617)
!7655 = !DILocation(line: 3771, column: 6, scope: !7617)
!7656 = !DILocation(line: 3772, column: 8, scope: !7617)
!7657 = !DILocation(line: 3772, column: 6, scope: !7617)
!7658 = !DILocation(line: 3773, column: 7, scope: !7659)
!7659 = distinct !DILexicalBlock(scope: !7617, file: !3, line: 3773, column: 7)
!7660 = !DILocation(line: 3773, column: 12, scope: !7659)
!7661 = !DILocation(line: 3773, column: 10, scope: !7659)
!7662 = !DILocation(line: 3773, column: 7, scope: !7617)
!7663 = !DILocation(line: 3775, column: 7, scope: !7664)
!7664 = distinct !DILexicalBlock(scope: !7659, file: !3, line: 3774, column: 5)
!7665 = !DILocalVariable(name: "__mpz_srcptr_swap__tmp", scope: !7666, file: !3, line: 3775, type: !2176)
!7666 = distinct !DILexicalBlock(scope: !7664, file: !3, line: 3775, column: 7)
!7667 = !DILocation(line: 3775, column: 7, scope: !7666)
!7668 = !DILocation(line: 3776, column: 7, scope: !7664)
!7669 = !DILocalVariable(name: "__mp_size_t_swap__tmp", scope: !7670, file: !3, line: 3776, type: !184)
!7670 = distinct !DILexicalBlock(scope: !7664, file: !3, line: 3776, column: 7)
!7671 = !DILocation(line: 3776, column: 7, scope: !7670)
!7672 = !DILocation(line: 3777, column: 5, scope: !7664)
!7673 = !DILocation(line: 3778, column: 7, scope: !7674)
!7674 = distinct !DILexicalBlock(scope: !7617, file: !3, line: 3778, column: 7)
!7675 = !DILocation(line: 3778, column: 10, scope: !7674)
!7676 = !DILocation(line: 3778, column: 7, scope: !7617)
!7677 = !DILocation(line: 3780, column: 16, scope: !7678)
!7678 = distinct !DILexicalBlock(scope: !7674, file: !3, line: 3779, column: 5)
!7679 = !DILocation(line: 3780, column: 19, scope: !7678)
!7680 = !DILocation(line: 3780, column: 7, scope: !7678)
!7681 = !DILocation(line: 3781, column: 7, scope: !7678)
!7682 = !DILocation(line: 3784, column: 8, scope: !7617)
!7683 = !DILocation(line: 3784, column: 11, scope: !7617)
!7684 = !DILocation(line: 3784, column: 20, scope: !7617)
!7685 = !DILocation(line: 3784, column: 6, scope: !7617)
!7686 = !DILocation(line: 3785, column: 8, scope: !7617)
!7687 = !DILocation(line: 3785, column: 11, scope: !7617)
!7688 = !DILocation(line: 3785, column: 20, scope: !7617)
!7689 = !DILocation(line: 3785, column: 6, scope: !7617)
!7690 = !DILocation(line: 3786, column: 8, scope: !7617)
!7691 = !DILocation(line: 3786, column: 13, scope: !7617)
!7692 = !DILocation(line: 3786, column: 11, scope: !7617)
!7693 = !DILocation(line: 3786, column: 6, scope: !7617)
!7694 = !DILocation(line: 3788, column: 9, scope: !7617)
!7695 = !DILocation(line: 3788, column: 8, scope: !7617)
!7696 = !DILocation(line: 3788, column: 6, scope: !7617)
!7697 = !DILocation(line: 3789, column: 9, scope: !7617)
!7698 = !DILocation(line: 3789, column: 8, scope: !7617)
!7699 = !DILocation(line: 3789, column: 6, scope: !7617)
!7700 = !DILocation(line: 3790, column: 9, scope: !7617)
!7701 = !DILocation(line: 3790, column: 8, scope: !7617)
!7702 = !DILocation(line: 3790, column: 6, scope: !7617)
!7703 = !DILocation(line: 3792, column: 8, scope: !7617)
!7704 = !DILocation(line: 3792, column: 6, scope: !7617)
!7705 = !DILocation(line: 3794, column: 8, scope: !7617)
!7706 = !DILocation(line: 3794, column: 11, scope: !7617)
!7707 = !DILocation(line: 3794, column: 6, scope: !7617)
!7708 = !DILocation(line: 3795, column: 8, scope: !7617)
!7709 = !DILocation(line: 3795, column: 11, scope: !7617)
!7710 = !DILocation(line: 3795, column: 6, scope: !7617)
!7711 = !DILocation(line: 3797, column: 5, scope: !7617)
!7712 = !DILocation(line: 3798, column: 3, scope: !7617)
!7713 = !DILocation(line: 3800, column: 13, scope: !7714)
!7714 = distinct !DILexicalBlock(scope: !7617, file: !3, line: 3799, column: 5)
!7715 = !DILocation(line: 3800, column: 16, scope: !7714)
!7716 = !DILocation(line: 3800, column: 21, scope: !7714)
!7717 = !DILocation(line: 3800, column: 19, scope: !7714)
!7718 = !DILocation(line: 3800, column: 27, scope: !7714)
!7719 = !DILocation(line: 3800, column: 25, scope: !7714)
!7720 = !DILocation(line: 3800, column: 10, scope: !7714)
!7721 = !DILocation(line: 3801, column: 12, scope: !7714)
!7722 = !DILocation(line: 3801, column: 17, scope: !7714)
!7723 = !DILocation(line: 3801, column: 15, scope: !7714)
!7724 = !DILocation(line: 3801, column: 10, scope: !7714)
!7725 = !DILocation(line: 3803, column: 13, scope: !7714)
!7726 = !DILocation(line: 3803, column: 16, scope: !7714)
!7727 = !DILocation(line: 3803, column: 21, scope: !7714)
!7728 = !DILocation(line: 3803, column: 19, scope: !7714)
!7729 = !DILocation(line: 3803, column: 27, scope: !7714)
!7730 = !DILocation(line: 3803, column: 25, scope: !7714)
!7731 = !DILocation(line: 3803, column: 10, scope: !7714)
!7732 = !DILocation(line: 3804, column: 12, scope: !7714)
!7733 = !DILocation(line: 3804, column: 17, scope: !7714)
!7734 = !DILocation(line: 3804, column: 15, scope: !7714)
!7735 = !DILocation(line: 3804, column: 10, scope: !7714)
!7736 = !DILocation(line: 3806, column: 13, scope: !7714)
!7737 = !DILocation(line: 3806, column: 18, scope: !7714)
!7738 = !DILocation(line: 3806, column: 16, scope: !7714)
!7739 = !DILocation(line: 3806, column: 23, scope: !7714)
!7740 = !DILocation(line: 3806, column: 21, scope: !7714)
!7741 = !DILocation(line: 3806, column: 29, scope: !7714)
!7742 = !DILocation(line: 3806, column: 27, scope: !7714)
!7743 = !DILocation(line: 3806, column: 10, scope: !7714)
!7744 = !DILocation(line: 3807, column: 12, scope: !7714)
!7745 = !DILocation(line: 3807, column: 17, scope: !7714)
!7746 = !DILocation(line: 3807, column: 15, scope: !7714)
!7747 = !DILocation(line: 3807, column: 10, scope: !7714)
!7748 = !DILocation(line: 3808, column: 15, scope: !7714)
!7749 = !DILocation(line: 3808, column: 7, scope: !7714)
!7750 = !DILocation(line: 3808, column: 10, scope: !7714)
!7751 = !DILocation(line: 3808, column: 13, scope: !7714)
!7752 = !DILocation(line: 3809, column: 5, scope: !7714)
!7753 = !DILocation(line: 3810, column: 10, scope: !7617)
!7754 = !DILocation(line: 3810, column: 16, scope: !7617)
!7755 = !DILocation(line: 3810, column: 14, scope: !7617)
!7756 = distinct !{!7756, !7712, !7757}
!7757 = !DILocation(line: 3810, column: 18, scope: !7617)
!7758 = !DILocation(line: 3813, column: 3, scope: !7617)
!7759 = !DILocation(line: 3813, column: 10, scope: !7760)
!7760 = distinct !DILexicalBlock(scope: !7761, file: !3, line: 3813, column: 3)
!7761 = distinct !DILexicalBlock(scope: !7617, file: !3, line: 3813, column: 3)
!7762 = !DILocation(line: 3813, column: 14, scope: !7760)
!7763 = !DILocation(line: 3813, column: 12, scope: !7760)
!7764 = !DILocation(line: 3813, column: 3, scope: !7761)
!7765 = !DILocation(line: 3815, column: 13, scope: !7766)
!7766 = distinct !DILexicalBlock(scope: !7760, file: !3, line: 3814, column: 5)
!7767 = !DILocation(line: 3815, column: 16, scope: !7766)
!7768 = !DILocation(line: 3815, column: 21, scope: !7766)
!7769 = !DILocation(line: 3815, column: 19, scope: !7766)
!7770 = !DILocation(line: 3815, column: 27, scope: !7766)
!7771 = !DILocation(line: 3815, column: 25, scope: !7766)
!7772 = !DILocation(line: 3815, column: 10, scope: !7766)
!7773 = !DILocation(line: 3816, column: 12, scope: !7766)
!7774 = !DILocation(line: 3816, column: 17, scope: !7766)
!7775 = !DILocation(line: 3816, column: 15, scope: !7766)
!7776 = !DILocation(line: 3816, column: 10, scope: !7766)
!7777 = !DILocation(line: 3818, column: 13, scope: !7766)
!7778 = !DILocation(line: 3818, column: 18, scope: !7766)
!7779 = !DILocation(line: 3818, column: 16, scope: !7766)
!7780 = !DILocation(line: 3818, column: 24, scope: !7766)
!7781 = !DILocation(line: 3818, column: 22, scope: !7766)
!7782 = !DILocation(line: 3818, column: 10, scope: !7766)
!7783 = !DILocation(line: 3819, column: 12, scope: !7766)
!7784 = !DILocation(line: 3819, column: 17, scope: !7766)
!7785 = !DILocation(line: 3819, column: 15, scope: !7766)
!7786 = !DILocation(line: 3819, column: 10, scope: !7766)
!7787 = !DILocation(line: 3820, column: 15, scope: !7766)
!7788 = !DILocation(line: 3820, column: 7, scope: !7766)
!7789 = !DILocation(line: 3820, column: 10, scope: !7766)
!7790 = !DILocation(line: 3820, column: 13, scope: !7766)
!7791 = !DILocation(line: 3821, column: 5, scope: !7766)
!7792 = !DILocation(line: 3813, column: 19, scope: !7760)
!7793 = !DILocation(line: 3813, column: 3, scope: !7760)
!7794 = distinct !{!7794, !7764, !7795}
!7795 = !DILocation(line: 3821, column: 5, scope: !7761)
!7796 = !DILocation(line: 3822, column: 7, scope: !7797)
!7797 = distinct !DILexicalBlock(scope: !7617, file: !3, line: 3822, column: 7)
!7798 = !DILocation(line: 3822, column: 7, scope: !7617)
!7799 = !DILocation(line: 3823, column: 16, scope: !7797)
!7800 = !DILocation(line: 3823, column: 5, scope: !7797)
!7801 = !DILocation(line: 3823, column: 10, scope: !7797)
!7802 = !DILocation(line: 3823, column: 14, scope: !7797)
!7803 = !DILocation(line: 3825, column: 31, scope: !7797)
!7804 = !DILocation(line: 3825, column: 35, scope: !7797)
!7805 = !DILocation(line: 3825, column: 10, scope: !7797)
!7806 = !DILocation(line: 3825, column: 8, scope: !7797)
!7807 = !DILocation(line: 3827, column: 17, scope: !7617)
!7808 = !DILocation(line: 3827, column: 23, scope: !7617)
!7809 = !DILocation(line: 3827, column: 22, scope: !7617)
!7810 = !DILocation(line: 3827, column: 28, scope: !7617)
!7811 = !DILocation(line: 3827, column: 3, scope: !7617)
!7812 = !DILocation(line: 3827, column: 6, scope: !7617)
!7813 = !DILocation(line: 3827, column: 15, scope: !7617)
!7814 = !DILocation(line: 3828, column: 1, scope: !7617)
!7815 = distinct !DISubprogram(name: "mpn_popcount", scope: !3, file: !3, line: 3848, type: !7816, scopeLine: 3849, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!7816 = !DISubroutineType(types: !7817)
!7817 = !{!35, !181, !184}
!7818 = !DILocalVariable(name: "p", arg: 1, scope: !7815, file: !3, line: 3848, type: !181)
!7819 = !DILocation(line: 3848, column: 25, scope: !7815)
!7820 = !DILocalVariable(name: "n", arg: 2, scope: !7815, file: !3, line: 3848, type: !184)
!7821 = !DILocation(line: 3848, column: 38, scope: !7815)
!7822 = !DILocalVariable(name: "i", scope: !7815, file: !3, line: 3850, type: !184)
!7823 = !DILocation(line: 3850, column: 13, scope: !7815)
!7824 = !DILocalVariable(name: "c", scope: !7815, file: !3, line: 3851, type: !35)
!7825 = !DILocation(line: 3851, column: 15, scope: !7815)
!7826 = !DILocation(line: 3853, column: 10, scope: !7827)
!7827 = distinct !DILexicalBlock(scope: !7815, file: !3, line: 3853, column: 3)
!7828 = !DILocation(line: 3853, column: 17, scope: !7827)
!7829 = !DILocation(line: 3853, column: 8, scope: !7827)
!7830 = !DILocation(line: 3853, column: 22, scope: !7831)
!7831 = distinct !DILexicalBlock(scope: !7827, file: !3, line: 3853, column: 3)
!7832 = !DILocation(line: 3853, column: 26, scope: !7831)
!7833 = !DILocation(line: 3853, column: 24, scope: !7831)
!7834 = !DILocation(line: 3853, column: 3, scope: !7827)
!7835 = !DILocation(line: 3854, column: 29, scope: !7831)
!7836 = !DILocation(line: 3854, column: 31, scope: !7831)
!7837 = !DILocation(line: 3854, column: 10, scope: !7831)
!7838 = !DILocation(line: 3854, column: 7, scope: !7831)
!7839 = !DILocation(line: 3854, column: 5, scope: !7831)
!7840 = !DILocation(line: 3853, column: 30, scope: !7831)
!7841 = !DILocation(line: 3853, column: 3, scope: !7831)
!7842 = distinct !{!7842, !7834, !7843}
!7843 = !DILocation(line: 3854, column: 33, scope: !7827)
!7844 = !DILocation(line: 3856, column: 10, scope: !7815)
!7845 = !DILocation(line: 3856, column: 3, scope: !7815)
!7846 = distinct !DISubprogram(name: "gmp_popcount_limb", scope: !3, file: !3, line: 3831, type: !7847, scopeLine: 3832, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!7847 = !DISubroutineType(types: !7848)
!7848 = !{!6, !27}
!7849 = !DILocalVariable(name: "x", arg: 1, scope: !7846, file: !3, line: 3831, type: !27)
!7850 = !DILocation(line: 3831, column: 30, scope: !7846)
!7851 = !DILocalVariable(name: "c", scope: !7846, file: !3, line: 3833, type: !6)
!7852 = !DILocation(line: 3833, column: 12, scope: !7846)
!7853 = !DILocation(line: 3836, column: 10, scope: !7854)
!7854 = distinct !DILexicalBlock(scope: !7846, file: !3, line: 3836, column: 3)
!7855 = !DILocation(line: 3836, column: 8, scope: !7854)
!7856 = !DILocation(line: 3836, column: 15, scope: !7857)
!7857 = distinct !DILexicalBlock(scope: !7854, file: !3, line: 3836, column: 3)
!7858 = !DILocation(line: 3836, column: 17, scope: !7857)
!7859 = !DILocation(line: 3836, column: 3, scope: !7854)
!7860 = !DILocalVariable(name: "w", scope: !7861, file: !3, line: 3838, type: !6)
!7861 = distinct !DILexicalBlock(scope: !7857, file: !3, line: 3837, column: 5)
!7862 = !DILocation(line: 3838, column: 16, scope: !7861)
!7863 = !DILocation(line: 3838, column: 22, scope: !7861)
!7864 = !DILocation(line: 3838, column: 24, scope: !7861)
!7865 = !DILocation(line: 3838, column: 30, scope: !7861)
!7866 = !DILocation(line: 3838, column: 43, scope: !7861)
!7867 = !DILocation(line: 3838, column: 45, scope: !7861)
!7868 = !DILocation(line: 3838, column: 40, scope: !7861)
!7869 = !DILocation(line: 3838, column: 20, scope: !7861)
!7870 = !DILocation(line: 3839, column: 13, scope: !7861)
!7871 = !DILocation(line: 3839, column: 15, scope: !7861)
!7872 = !DILocation(line: 3839, column: 21, scope: !7861)
!7873 = !DILocation(line: 3839, column: 34, scope: !7861)
!7874 = !DILocation(line: 3839, column: 36, scope: !7861)
!7875 = !DILocation(line: 3839, column: 31, scope: !7861)
!7876 = !DILocation(line: 3839, column: 9, scope: !7861)
!7877 = !DILocation(line: 3840, column: 13, scope: !7861)
!7878 = !DILocation(line: 3840, column: 15, scope: !7861)
!7879 = !DILocation(line: 3840, column: 21, scope: !7861)
!7880 = !DILocation(line: 3840, column: 34, scope: !7861)
!7881 = !DILocation(line: 3840, column: 36, scope: !7861)
!7882 = !DILocation(line: 3840, column: 31, scope: !7861)
!7883 = !DILocation(line: 3840, column: 9, scope: !7861)
!7884 = !DILocation(line: 3841, column: 12, scope: !7861)
!7885 = !DILocation(line: 3841, column: 14, scope: !7861)
!7886 = !DILocation(line: 3841, column: 23, scope: !7861)
!7887 = !DILocation(line: 3841, column: 25, scope: !7861)
!7888 = !DILocation(line: 3841, column: 20, scope: !7861)
!7889 = !DILocation(line: 3841, column: 9, scope: !7861)
!7890 = !DILocation(line: 3842, column: 12, scope: !7861)
!7891 = !DILocation(line: 3842, column: 9, scope: !7861)
!7892 = !DILocation(line: 3843, column: 5, scope: !7861)
!7893 = !DILocation(line: 3836, column: 24, scope: !7857)
!7894 = !DILocation(line: 3836, column: 3, scope: !7857)
!7895 = distinct !{!7895, !7859, !7896}
!7896 = !DILocation(line: 3843, column: 5, scope: !7854)
!7897 = !DILocation(line: 3844, column: 10, scope: !7846)
!7898 = !DILocation(line: 3844, column: 3, scope: !7846)
!7899 = distinct !DISubprogram(name: "mpz_popcount", scope: !3, file: !3, line: 3860, type: !7900, scopeLine: 3861, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!7900 = !DISubroutineType(types: !7901)
!7901 = !{!35, !1950}
!7902 = !DILocalVariable(name: "u", arg: 1, scope: !7899, file: !3, line: 3860, type: !1950)
!7903 = !DILocation(line: 3860, column: 27, scope: !7899)
!7904 = !DILocalVariable(name: "un", scope: !7899, file: !3, line: 3862, type: !184)
!7905 = !DILocation(line: 3862, column: 13, scope: !7899)
!7906 = !DILocation(line: 3864, column: 8, scope: !7899)
!7907 = !DILocation(line: 3864, column: 11, scope: !7899)
!7908 = !DILocation(line: 3864, column: 6, scope: !7899)
!7909 = !DILocation(line: 3866, column: 7, scope: !7910)
!7910 = distinct !DILexicalBlock(scope: !7899, file: !3, line: 3866, column: 7)
!7911 = !DILocation(line: 3866, column: 10, scope: !7910)
!7912 = !DILocation(line: 3866, column: 7, scope: !7899)
!7913 = !DILocation(line: 3867, column: 5, scope: !7910)
!7914 = !DILocation(line: 3869, column: 24, scope: !7899)
!7915 = !DILocation(line: 3869, column: 27, scope: !7899)
!7916 = !DILocation(line: 3869, column: 34, scope: !7899)
!7917 = !DILocation(line: 3869, column: 10, scope: !7899)
!7918 = !DILocation(line: 3869, column: 3, scope: !7899)
!7919 = !DILocation(line: 3870, column: 1, scope: !7899)
!7920 = distinct !DISubprogram(name: "mpz_hamdist", scope: !3, file: !3, line: 3873, type: !7921, scopeLine: 3874, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!7921 = !DISubroutineType(types: !7922)
!7922 = !{!35, !1950, !1950}
!7923 = !DILocalVariable(name: "u", arg: 1, scope: !7920, file: !3, line: 3873, type: !1950)
!7924 = !DILocation(line: 3873, column: 26, scope: !7920)
!7925 = !DILocalVariable(name: "v", arg: 2, scope: !7920, file: !3, line: 3873, type: !1950)
!7926 = !DILocation(line: 3873, column: 41, scope: !7920)
!7927 = !DILocalVariable(name: "un", scope: !7920, file: !3, line: 3875, type: !184)
!7928 = !DILocation(line: 3875, column: 13, scope: !7920)
!7929 = !DILocalVariable(name: "vn", scope: !7920, file: !3, line: 3875, type: !184)
!7930 = !DILocation(line: 3875, column: 17, scope: !7920)
!7931 = !DILocalVariable(name: "i", scope: !7920, file: !3, line: 3875, type: !184)
!7932 = !DILocation(line: 3875, column: 21, scope: !7920)
!7933 = !DILocalVariable(name: "uc", scope: !7920, file: !3, line: 3876, type: !27)
!7934 = !DILocation(line: 3876, column: 13, scope: !7920)
!7935 = !DILocalVariable(name: "vc", scope: !7920, file: !3, line: 3876, type: !27)
!7936 = !DILocation(line: 3876, column: 17, scope: !7920)
!7937 = !DILocalVariable(name: "ul", scope: !7920, file: !3, line: 3876, type: !27)
!7938 = !DILocation(line: 3876, column: 21, scope: !7920)
!7939 = !DILocalVariable(name: "vl", scope: !7920, file: !3, line: 3876, type: !27)
!7940 = !DILocation(line: 3876, column: 25, scope: !7920)
!7941 = !DILocalVariable(name: "comp", scope: !7920, file: !3, line: 3876, type: !27)
!7942 = !DILocation(line: 3876, column: 29, scope: !7920)
!7943 = !DILocalVariable(name: "up", scope: !7920, file: !3, line: 3877, type: !181)
!7944 = !DILocation(line: 3877, column: 13, scope: !7920)
!7945 = !DILocalVariable(name: "vp", scope: !7920, file: !3, line: 3877, type: !181)
!7946 = !DILocation(line: 3877, column: 17, scope: !7920)
!7947 = !DILocalVariable(name: "c", scope: !7920, file: !3, line: 3878, type: !35)
!7948 = !DILocation(line: 3878, column: 15, scope: !7920)
!7949 = !DILocation(line: 3880, column: 8, scope: !7920)
!7950 = !DILocation(line: 3880, column: 11, scope: !7920)
!7951 = !DILocation(line: 3880, column: 6, scope: !7920)
!7952 = !DILocation(line: 3881, column: 8, scope: !7920)
!7953 = !DILocation(line: 3881, column: 11, scope: !7920)
!7954 = !DILocation(line: 3881, column: 6, scope: !7920)
!7955 = !DILocation(line: 3883, column: 9, scope: !7956)
!7956 = distinct !DILexicalBlock(scope: !7920, file: !3, line: 3883, column: 8)
!7957 = !DILocation(line: 3883, column: 14, scope: !7956)
!7958 = !DILocation(line: 3883, column: 12, scope: !7956)
!7959 = !DILocation(line: 3883, column: 18, scope: !7956)
!7960 = !DILocation(line: 3883, column: 8, scope: !7920)
!7961 = !DILocation(line: 3884, column: 5, scope: !7956)
!7962 = !DILocation(line: 3886, column: 24, scope: !7920)
!7963 = !DILocation(line: 3886, column: 27, scope: !7920)
!7964 = !DILocation(line: 3886, column: 23, scope: !7920)
!7965 = !DILocation(line: 3886, column: 21, scope: !7920)
!7966 = !DILocation(line: 3886, column: 16, scope: !7920)
!7967 = !DILocation(line: 3886, column: 10, scope: !7920)
!7968 = !DILocation(line: 3886, column: 8, scope: !7920)
!7969 = !DILocation(line: 3887, column: 7, scope: !7970)
!7970 = distinct !DILexicalBlock(scope: !7920, file: !3, line: 3887, column: 7)
!7971 = !DILocation(line: 3887, column: 7, scope: !7920)
!7972 = !DILocation(line: 3890, column: 13, scope: !7973)
!7973 = distinct !DILexicalBlock(scope: !7970, file: !3, line: 3888, column: 5)
!7974 = !DILocation(line: 3890, column: 12, scope: !7973)
!7975 = !DILocation(line: 3890, column: 10, scope: !7973)
!7976 = !DILocation(line: 3891, column: 13, scope: !7973)
!7977 = !DILocation(line: 3891, column: 12, scope: !7973)
!7978 = !DILocation(line: 3891, column: 10, scope: !7973)
!7979 = !DILocation(line: 3892, column: 5, scope: !7973)
!7980 = !DILocation(line: 3894, column: 8, scope: !7920)
!7981 = !DILocation(line: 3894, column: 11, scope: !7920)
!7982 = !DILocation(line: 3894, column: 6, scope: !7920)
!7983 = !DILocation(line: 3895, column: 8, scope: !7920)
!7984 = !DILocation(line: 3895, column: 11, scope: !7920)
!7985 = !DILocation(line: 3895, column: 6, scope: !7920)
!7986 = !DILocation(line: 3897, column: 7, scope: !7987)
!7987 = distinct !DILexicalBlock(scope: !7920, file: !3, line: 3897, column: 7)
!7988 = !DILocation(line: 3897, column: 12, scope: !7987)
!7989 = !DILocation(line: 3897, column: 10, scope: !7987)
!7990 = !DILocation(line: 3897, column: 7, scope: !7920)
!7991 = !DILocation(line: 3898, column: 5, scope: !7987)
!7992 = !DILocation(line: 3898, column: 5, scope: !7993)
!7993 = distinct !DILexicalBlock(scope: !7987, file: !3, line: 3898, column: 5)
!7994 = !DILocalVariable(name: "__mp_srcptr_swap__tmp", scope: !7995, file: !3, line: 3898, type: !181)
!7995 = distinct !DILexicalBlock(scope: !7993, file: !3, line: 3898, column: 5)
!7996 = !DILocation(line: 3898, column: 5, scope: !7995)
!7997 = !DILocalVariable(name: "__mp_size_t_swap__tmp", scope: !7998, file: !3, line: 3898, type: !184)
!7998 = distinct !DILexicalBlock(scope: !7993, file: !3, line: 3898, column: 5)
!7999 = !DILocation(line: 3898, column: 5, scope: !7998)
!8000 = !DILocation(line: 3900, column: 10, scope: !8001)
!8001 = distinct !DILexicalBlock(scope: !7920, file: !3, line: 3900, column: 3)
!8002 = !DILocation(line: 3900, column: 17, scope: !8001)
!8003 = !DILocation(line: 3900, column: 8, scope: !8001)
!8004 = !DILocation(line: 3900, column: 22, scope: !8005)
!8005 = distinct !DILexicalBlock(scope: !8001, file: !3, line: 3900, column: 3)
!8006 = !DILocation(line: 3900, column: 26, scope: !8005)
!8007 = !DILocation(line: 3900, column: 24, scope: !8005)
!8008 = !DILocation(line: 3900, column: 3, scope: !8001)
!8009 = !DILocation(line: 3902, column: 13, scope: !8010)
!8010 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 3901, column: 5)
!8011 = !DILocation(line: 3902, column: 16, scope: !8010)
!8012 = !DILocation(line: 3902, column: 21, scope: !8010)
!8013 = !DILocation(line: 3902, column: 19, scope: !8010)
!8014 = !DILocation(line: 3902, column: 29, scope: !8010)
!8015 = !DILocation(line: 3902, column: 27, scope: !8010)
!8016 = !DILocation(line: 3902, column: 10, scope: !8010)
!8017 = !DILocation(line: 3903, column: 12, scope: !8010)
!8018 = !DILocation(line: 3903, column: 17, scope: !8010)
!8019 = !DILocation(line: 3903, column: 15, scope: !8010)
!8020 = !DILocation(line: 3903, column: 10, scope: !8010)
!8021 = !DILocation(line: 3905, column: 13, scope: !8010)
!8022 = !DILocation(line: 3905, column: 16, scope: !8010)
!8023 = !DILocation(line: 3905, column: 21, scope: !8010)
!8024 = !DILocation(line: 3905, column: 19, scope: !8010)
!8025 = !DILocation(line: 3905, column: 29, scope: !8010)
!8026 = !DILocation(line: 3905, column: 27, scope: !8010)
!8027 = !DILocation(line: 3905, column: 10, scope: !8010)
!8028 = !DILocation(line: 3906, column: 12, scope: !8010)
!8029 = !DILocation(line: 3906, column: 17, scope: !8010)
!8030 = !DILocation(line: 3906, column: 15, scope: !8010)
!8031 = !DILocation(line: 3906, column: 10, scope: !8010)
!8032 = !DILocation(line: 3908, column: 31, scope: !8010)
!8033 = !DILocation(line: 3908, column: 36, scope: !8010)
!8034 = !DILocation(line: 3908, column: 34, scope: !8010)
!8035 = !DILocation(line: 3908, column: 12, scope: !8010)
!8036 = !DILocation(line: 3908, column: 9, scope: !8010)
!8037 = !DILocation(line: 3909, column: 5, scope: !8010)
!8038 = !DILocation(line: 3900, column: 31, scope: !8005)
!8039 = !DILocation(line: 3900, column: 3, scope: !8005)
!8040 = distinct !{!8040, !8008, !8041}
!8041 = !DILocation(line: 3909, column: 5, scope: !8001)
!8042 = !DILocation(line: 3912, column: 3, scope: !7920)
!8043 = !DILocation(line: 3912, column: 10, scope: !8044)
!8044 = distinct !DILexicalBlock(scope: !8045, file: !3, line: 3912, column: 3)
!8045 = distinct !DILexicalBlock(scope: !7920, file: !3, line: 3912, column: 3)
!8046 = !DILocation(line: 3912, column: 14, scope: !8044)
!8047 = !DILocation(line: 3912, column: 12, scope: !8044)
!8048 = !DILocation(line: 3912, column: 3, scope: !8045)
!8049 = !DILocation(line: 3914, column: 13, scope: !8050)
!8050 = distinct !DILexicalBlock(scope: !8044, file: !3, line: 3913, column: 5)
!8051 = !DILocation(line: 3914, column: 16, scope: !8050)
!8052 = !DILocation(line: 3914, column: 21, scope: !8050)
!8053 = !DILocation(line: 3914, column: 19, scope: !8050)
!8054 = !DILocation(line: 3914, column: 29, scope: !8050)
!8055 = !DILocation(line: 3914, column: 27, scope: !8050)
!8056 = !DILocation(line: 3914, column: 10, scope: !8050)
!8057 = !DILocation(line: 3915, column: 12, scope: !8050)
!8058 = !DILocation(line: 3915, column: 17, scope: !8050)
!8059 = !DILocation(line: 3915, column: 15, scope: !8050)
!8060 = !DILocation(line: 3915, column: 10, scope: !8050)
!8061 = !DILocation(line: 3917, column: 31, scope: !8050)
!8062 = !DILocation(line: 3917, column: 36, scope: !8050)
!8063 = !DILocation(line: 3917, column: 34, scope: !8050)
!8064 = !DILocation(line: 3917, column: 12, scope: !8050)
!8065 = !DILocation(line: 3917, column: 9, scope: !8050)
!8066 = !DILocation(line: 3918, column: 5, scope: !8050)
!8067 = !DILocation(line: 3912, column: 19, scope: !8044)
!8068 = !DILocation(line: 3912, column: 3, scope: !8044)
!8069 = distinct !{!8069, !8048, !8070}
!8070 = !DILocation(line: 3918, column: 5, scope: !8045)
!8071 = !DILocation(line: 3920, column: 10, scope: !7920)
!8072 = !DILocation(line: 3920, column: 3, scope: !7920)
!8073 = !DILocation(line: 3921, column: 1, scope: !7920)
!8074 = distinct !DISubprogram(name: "mpz_scan0", scope: !3, file: !3, line: 3960, type: !6788, scopeLine: 3961, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!8075 = !DILocalVariable(name: "u", arg: 1, scope: !8074, file: !3, line: 3960, type: !1950)
!8076 = !DILocation(line: 3960, column: 24, scope: !8074)
!8077 = !DILocalVariable(name: "starting_bit", arg: 2, scope: !8074, file: !3, line: 3960, type: !35)
!8078 = !DILocation(line: 3960, column: 39, scope: !8074)
!8079 = !DILocalVariable(name: "up", scope: !8074, file: !3, line: 3962, type: !31)
!8080 = !DILocation(line: 3962, column: 10, scope: !8074)
!8081 = !DILocalVariable(name: "us", scope: !8074, file: !3, line: 3963, type: !184)
!8082 = !DILocation(line: 3963, column: 13, scope: !8074)
!8083 = !DILocalVariable(name: "un", scope: !8074, file: !3, line: 3963, type: !184)
!8084 = !DILocation(line: 3963, column: 17, scope: !8074)
!8085 = !DILocalVariable(name: "i", scope: !8074, file: !3, line: 3963, type: !184)
!8086 = !DILocation(line: 3963, column: 21, scope: !8074)
!8087 = !DILocalVariable(name: "limb", scope: !8074, file: !3, line: 3964, type: !27)
!8088 = !DILocation(line: 3964, column: 13, scope: !8074)
!8089 = !DILocalVariable(name: "ux", scope: !8074, file: !3, line: 3964, type: !27)
!8090 = !DILocation(line: 3964, column: 19, scope: !8074)
!8091 = !DILocation(line: 3966, column: 8, scope: !8074)
!8092 = !DILocation(line: 3966, column: 11, scope: !8074)
!8093 = !DILocation(line: 3966, column: 6, scope: !8074)
!8094 = !DILocation(line: 3967, column: 23, scope: !8074)
!8095 = !DILocation(line: 3967, column: 26, scope: !8074)
!8096 = !DILocation(line: 3967, column: 10, scope: !8074)
!8097 = !DILocation(line: 3967, column: 8, scope: !8074)
!8098 = !DILocation(line: 3967, column: 6, scope: !8074)
!8099 = !DILocation(line: 3968, column: 8, scope: !8074)
!8100 = !DILocation(line: 3968, column: 6, scope: !8074)
!8101 = !DILocation(line: 3969, column: 7, scope: !8074)
!8102 = !DILocation(line: 3969, column: 20, scope: !8074)
!8103 = !DILocation(line: 3969, column: 5, scope: !8074)
!8104 = !DILocation(line: 3973, column: 7, scope: !8105)
!8105 = distinct !DILexicalBlock(scope: !8074, file: !3, line: 3973, column: 7)
!8106 = !DILocation(line: 3973, column: 12, scope: !8105)
!8107 = !DILocation(line: 3973, column: 9, scope: !8105)
!8108 = !DILocation(line: 3973, column: 7, scope: !8074)
!8109 = !DILocation(line: 3974, column: 13, scope: !8105)
!8110 = !DILocation(line: 3974, column: 18, scope: !8105)
!8111 = !DILocation(line: 3974, column: 5, scope: !8105)
!8112 = !DILocation(line: 3976, column: 8, scope: !8074)
!8113 = !DILocation(line: 3976, column: 11, scope: !8074)
!8114 = !DILocation(line: 3976, column: 6, scope: !8074)
!8115 = !DILocation(line: 3977, column: 10, scope: !8074)
!8116 = !DILocation(line: 3977, column: 13, scope: !8074)
!8117 = !DILocation(line: 3977, column: 18, scope: !8074)
!8118 = !DILocation(line: 3977, column: 16, scope: !8074)
!8119 = !DILocation(line: 3977, column: 8, scope: !8074)
!8120 = !DILocation(line: 3979, column: 7, scope: !8121)
!8121 = distinct !DILexicalBlock(scope: !8074, file: !3, line: 3979, column: 7)
!8122 = !DILocation(line: 3979, column: 10, scope: !8121)
!8123 = !DILocation(line: 3979, column: 7, scope: !8074)
!8124 = !DILocation(line: 3980, column: 13, scope: !8121)
!8125 = !DILocation(line: 3980, column: 10, scope: !8121)
!8126 = !DILocation(line: 3980, column: 5, scope: !8121)
!8127 = !DILocation(line: 3983, column: 29, scope: !8074)
!8128 = !DILocation(line: 3983, column: 42, scope: !8074)
!8129 = !DILocation(line: 3983, column: 25, scope: !8074)
!8130 = !DILocation(line: 3983, column: 8, scope: !8074)
!8131 = !DILocation(line: 3985, column: 27, scope: !8074)
!8132 = !DILocation(line: 3985, column: 33, scope: !8074)
!8133 = !DILocation(line: 3985, column: 36, scope: !8074)
!8134 = !DILocation(line: 3985, column: 40, scope: !8074)
!8135 = !DILocation(line: 3985, column: 44, scope: !8074)
!8136 = !DILocation(line: 3985, column: 10, scope: !8074)
!8137 = !DILocation(line: 3985, column: 3, scope: !8074)
!8138 = !DILocation(line: 3986, column: 1, scope: !8074)
!8139 = distinct !DISubprogram(name: "mpn_limb_size_in_base_2", scope: !3, file: !3, line: 1148, type: !8140, scopeLine: 1149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!8140 = !DISubroutineType(types: !8141)
!8141 = !{!35, !27}
!8142 = !DILocalVariable(name: "u", arg: 1, scope: !8139, file: !3, line: 1148, type: !27)
!8143 = !DILocation(line: 1148, column: 36, scope: !8139)
!8144 = !DILocalVariable(name: "shift", scope: !8139, file: !3, line: 1150, type: !6)
!8145 = !DILocation(line: 1150, column: 12, scope: !8139)
!8146 = !DILocation(line: 1153, column: 3, scope: !8139)
!8147 = !DILocalVariable(name: "__clz_x", scope: !8148, file: !3, line: 1153, type: !27)
!8148 = distinct !DILexicalBlock(scope: !8139, file: !3, line: 1153, column: 3)
!8149 = !DILocation(line: 1153, column: 3, scope: !8148)
!8150 = !DILocalVariable(name: "__clz_c", scope: !8148, file: !3, line: 1153, type: !6)
!8151 = !DILocation(line: 1153, column: 3, scope: !8152)
!8152 = distinct !DILexicalBlock(scope: !8148, file: !3, line: 1153, column: 3)
!8153 = !DILocation(line: 1153, column: 3, scope: !8154)
!8154 = distinct !DILexicalBlock(scope: !8152, file: !3, line: 1153, column: 3)
!8155 = distinct !{!8155, !8151, !8151}
!8156 = !DILocation(line: 1153, column: 3, scope: !8157)
!8157 = distinct !DILexicalBlock(scope: !8158, file: !3, line: 1153, column: 3)
!8158 = distinct !DILexicalBlock(scope: !8148, file: !3, line: 1153, column: 3)
!8159 = !DILocation(line: 1153, column: 3, scope: !8158)
!8160 = distinct !{!8160, !8159, !8159}
!8161 = !DILocation(line: 1154, column: 26, scope: !8139)
!8162 = !DILocation(line: 1154, column: 24, scope: !8139)
!8163 = !DILocation(line: 1154, column: 3, scope: !8139)
!8164 = distinct !DISubprogram(name: "mpn_div_qr_1_invert", scope: !3, file: !3, line: 797, type: !8165, scopeLine: 798, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!8165 = !DISubroutineType(types: !8166)
!8166 = !{null, !5999, !27}
!8167 = !DILocalVariable(name: "inv", arg: 1, scope: !8164, file: !3, line: 797, type: !5999)
!8168 = !DILocation(line: 797, column: 46, scope: !8164)
!8169 = !DILocalVariable(name: "d", arg: 2, scope: !8164, file: !3, line: 797, type: !27)
!8170 = !DILocation(line: 797, column: 61, scope: !8164)
!8171 = !DILocalVariable(name: "shift", scope: !8164, file: !3, line: 799, type: !6)
!8172 = !DILocation(line: 799, column: 12, scope: !8164)
!8173 = !DILocation(line: 802, column: 3, scope: !8164)
!8174 = !DILocalVariable(name: "__clz_x", scope: !8175, file: !3, line: 802, type: !27)
!8175 = distinct !DILexicalBlock(scope: !8164, file: !3, line: 802, column: 3)
!8176 = !DILocation(line: 802, column: 3, scope: !8175)
!8177 = !DILocalVariable(name: "__clz_c", scope: !8175, file: !3, line: 802, type: !6)
!8178 = !DILocation(line: 802, column: 3, scope: !8179)
!8179 = distinct !DILexicalBlock(scope: !8175, file: !3, line: 802, column: 3)
!8180 = !DILocation(line: 802, column: 3, scope: !8181)
!8181 = distinct !DILexicalBlock(scope: !8179, file: !3, line: 802, column: 3)
!8182 = distinct !{!8182, !8178, !8178}
!8183 = !DILocation(line: 802, column: 3, scope: !8184)
!8184 = distinct !DILexicalBlock(scope: !8185, file: !3, line: 802, column: 3)
!8185 = distinct !DILexicalBlock(scope: !8175, file: !3, line: 802, column: 3)
!8186 = !DILocation(line: 802, column: 3, scope: !8185)
!8187 = distinct !{!8187, !8186, !8186}
!8188 = !DILocation(line: 803, column: 16, scope: !8164)
!8189 = !DILocation(line: 803, column: 3, scope: !8164)
!8190 = !DILocation(line: 803, column: 8, scope: !8164)
!8191 = !DILocation(line: 803, column: 14, scope: !8164)
!8192 = !DILocation(line: 804, column: 13, scope: !8164)
!8193 = !DILocation(line: 804, column: 18, scope: !8164)
!8194 = !DILocation(line: 804, column: 15, scope: !8164)
!8195 = !DILocation(line: 804, column: 3, scope: !8164)
!8196 = !DILocation(line: 804, column: 8, scope: !8164)
!8197 = !DILocation(line: 804, column: 11, scope: !8164)
!8198 = !DILocation(line: 805, column: 13, scope: !8164)
!8199 = !DILocation(line: 805, column: 3, scope: !8164)
!8200 = !DILocation(line: 805, column: 8, scope: !8164)
!8201 = !DILocation(line: 805, column: 11, scope: !8164)
!8202 = !DILocation(line: 806, column: 1, scope: !8164)
!8203 = distinct !DISubprogram(name: "mpn_div_qr_1_preinv", scope: !3, file: !3, line: 861, type: !8204, scopeLine: 863, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!8204 = !DISubroutineType(types: !8205)
!8205 = !{!27, !31, !181, !184, !6099}
!8206 = !DILocalVariable(name: "qp", arg: 1, scope: !8203, file: !3, line: 861, type: !31)
!8207 = !DILocation(line: 861, column: 29, scope: !8203)
!8208 = !DILocalVariable(name: "np", arg: 2, scope: !8203, file: !3, line: 861, type: !181)
!8209 = !DILocation(line: 861, column: 43, scope: !8203)
!8210 = !DILocalVariable(name: "nn", arg: 3, scope: !8203, file: !3, line: 861, type: !184)
!8211 = !DILocation(line: 861, column: 57, scope: !8203)
!8212 = !DILocalVariable(name: "inv", arg: 4, scope: !8203, file: !3, line: 862, type: !6099)
!8213 = !DILocation(line: 862, column: 38, scope: !8203)
!8214 = !DILocalVariable(name: "d", scope: !8203, file: !3, line: 864, type: !27)
!8215 = !DILocation(line: 864, column: 13, scope: !8203)
!8216 = !DILocalVariable(name: "di", scope: !8203, file: !3, line: 864, type: !27)
!8217 = !DILocation(line: 864, column: 16, scope: !8203)
!8218 = !DILocalVariable(name: "r", scope: !8203, file: !3, line: 865, type: !27)
!8219 = !DILocation(line: 865, column: 13, scope: !8203)
!8220 = !DILocalVariable(name: "tp", scope: !8203, file: !3, line: 866, type: !31)
!8221 = !DILocation(line: 866, column: 10, scope: !8203)
!8222 = !DILocation(line: 868, column: 7, scope: !8223)
!8223 = distinct !DILexicalBlock(scope: !8203, file: !3, line: 868, column: 7)
!8224 = !DILocation(line: 868, column: 12, scope: !8223)
!8225 = !DILocation(line: 868, column: 18, scope: !8223)
!8226 = !DILocation(line: 868, column: 7, scope: !8203)
!8227 = !DILocation(line: 870, column: 30, scope: !8228)
!8228 = distinct !DILexicalBlock(scope: !8223, file: !3, line: 869, column: 5)
!8229 = !DILocation(line: 870, column: 12, scope: !8228)
!8230 = !DILocation(line: 870, column: 10, scope: !8228)
!8231 = !DILocation(line: 871, column: 23, scope: !8228)
!8232 = !DILocation(line: 871, column: 27, scope: !8228)
!8233 = !DILocation(line: 871, column: 31, scope: !8228)
!8234 = !DILocation(line: 871, column: 35, scope: !8228)
!8235 = !DILocation(line: 871, column: 40, scope: !8228)
!8236 = !DILocation(line: 871, column: 11, scope: !8228)
!8237 = !DILocation(line: 871, column: 9, scope: !8228)
!8238 = !DILocation(line: 872, column: 12, scope: !8228)
!8239 = !DILocation(line: 872, column: 10, scope: !8228)
!8240 = !DILocation(line: 873, column: 5, scope: !8228)
!8241 = !DILocation(line: 875, column: 7, scope: !8223)
!8242 = !DILocation(line: 877, column: 7, scope: !8203)
!8243 = !DILocation(line: 877, column: 12, scope: !8203)
!8244 = !DILocation(line: 877, column: 5, scope: !8203)
!8245 = !DILocation(line: 878, column: 8, scope: !8203)
!8246 = !DILocation(line: 878, column: 13, scope: !8203)
!8247 = !DILocation(line: 878, column: 6, scope: !8203)
!8248 = !DILocation(line: 879, column: 3, scope: !8203)
!8249 = !DILocation(line: 879, column: 12, scope: !8203)
!8250 = !DILocation(line: 879, column: 15, scope: !8203)
!8251 = !DILocalVariable(name: "q", scope: !8252, file: !3, line: 881, type: !27)
!8252 = distinct !DILexicalBlock(scope: !8203, file: !3, line: 880, column: 5)
!8253 = !DILocation(line: 881, column: 17, scope: !8252)
!8254 = !DILocation(line: 883, column: 7, scope: !8252)
!8255 = !DILocalVariable(name: "_qh", scope: !8256, file: !3, line: 883, type: !27)
!8256 = distinct !DILexicalBlock(scope: !8252, file: !3, line: 883, column: 7)
!8257 = !DILocation(line: 883, column: 7, scope: !8256)
!8258 = !DILocalVariable(name: "_ql", scope: !8256, file: !3, line: 883, type: !27)
!8259 = !DILocalVariable(name: "_r", scope: !8256, file: !3, line: 883, type: !27)
!8260 = !DILocalVariable(name: "_mask", scope: !8256, file: !3, line: 883, type: !27)
!8261 = !DILocalVariable(name: "__x0", scope: !8262, file: !3, line: 883, type: !27)
!8262 = distinct !DILexicalBlock(scope: !8256, file: !3, line: 883, column: 7)
!8263 = !DILocation(line: 883, column: 7, scope: !8262)
!8264 = !DILocalVariable(name: "__x1", scope: !8262, file: !3, line: 883, type: !27)
!8265 = !DILocalVariable(name: "__x2", scope: !8262, file: !3, line: 883, type: !27)
!8266 = !DILocalVariable(name: "__x3", scope: !8262, file: !3, line: 883, type: !27)
!8267 = !DILocalVariable(name: "__ul", scope: !8262, file: !3, line: 883, type: !6)
!8268 = !DILocalVariable(name: "__vl", scope: !8262, file: !3, line: 883, type: !6)
!8269 = !DILocalVariable(name: "__uh", scope: !8262, file: !3, line: 883, type: !6)
!8270 = !DILocalVariable(name: "__vh", scope: !8262, file: !3, line: 883, type: !6)
!8271 = !DILocalVariable(name: "__u", scope: !8262, file: !3, line: 883, type: !27)
!8272 = !DILocalVariable(name: "__v", scope: !8262, file: !3, line: 883, type: !27)
!8273 = !DILocation(line: 883, column: 7, scope: !8274)
!8274 = distinct !DILexicalBlock(scope: !8262, file: !3, line: 883, column: 7)
!8275 = !DILocalVariable(name: "__x", scope: !8276, file: !3, line: 883, type: !27)
!8276 = distinct !DILexicalBlock(scope: !8256, file: !3, line: 883, column: 7)
!8277 = !DILocation(line: 883, column: 7, scope: !8276)
!8278 = !DILocation(line: 883, column: 7, scope: !8279)
!8279 = distinct !DILexicalBlock(scope: !8256, file: !3, line: 883, column: 7)
!8280 = !DILocation(line: 883, column: 7, scope: !8281)
!8281 = distinct !DILexicalBlock(scope: !8279, file: !3, line: 883, column: 7)
!8282 = !DILocation(line: 884, column: 11, scope: !8283)
!8283 = distinct !DILexicalBlock(scope: !8252, file: !3, line: 884, column: 11)
!8284 = !DILocation(line: 884, column: 11, scope: !8252)
!8285 = !DILocation(line: 885, column: 11, scope: !8283)
!8286 = !DILocation(line: 885, column: 2, scope: !8283)
!8287 = !DILocation(line: 885, column: 5, scope: !8283)
!8288 = !DILocation(line: 885, column: 9, scope: !8283)
!8289 = distinct !{!8289, !8248, !8290}
!8290 = !DILocation(line: 886, column: 5, scope: !8203)
!8291 = !DILocation(line: 887, column: 7, scope: !8292)
!8292 = distinct !DILexicalBlock(scope: !8203, file: !3, line: 887, column: 7)
!8293 = !DILocation(line: 887, column: 12, scope: !8292)
!8294 = !DILocation(line: 887, column: 18, scope: !8292)
!8295 = !DILocation(line: 887, column: 7, scope: !8203)
!8296 = !DILocation(line: 888, column: 5, scope: !8292)
!8297 = !DILocation(line: 890, column: 10, scope: !8203)
!8298 = !DILocation(line: 890, column: 15, scope: !8203)
!8299 = !DILocation(line: 890, column: 20, scope: !8203)
!8300 = !DILocation(line: 890, column: 12, scope: !8203)
!8301 = !DILocation(line: 890, column: 3, scope: !8203)
!8302 = distinct !DISubprogram(name: "mpz_get_str", scope: !3, file: !3, line: 4045, type: !8303, scopeLine: 4046, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!8303 = !DISubroutineType(types: !8304)
!8304 = !{!8305, !8305, !34, !1950}
!8305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5989, size: 64)
!8306 = !DILocalVariable(name: "sp", arg: 1, scope: !8302, file: !3, line: 4045, type: !8305)
!8307 = !DILocation(line: 4045, column: 20, scope: !8302)
!8308 = !DILocalVariable(name: "base", arg: 2, scope: !8302, file: !3, line: 4045, type: !34)
!8309 = !DILocation(line: 4045, column: 28, scope: !8302)
!8310 = !DILocalVariable(name: "u", arg: 3, scope: !8302, file: !3, line: 4045, type: !1950)
!8311 = !DILocation(line: 4045, column: 46, scope: !8302)
!8312 = !DILocalVariable(name: "bits", scope: !8302, file: !3, line: 4047, type: !6)
!8313 = !DILocation(line: 4047, column: 12, scope: !8302)
!8314 = !DILocalVariable(name: "digits", scope: !8302, file: !3, line: 4048, type: !5987)
!8315 = !DILocation(line: 4048, column: 15, scope: !8302)
!8316 = !DILocalVariable(name: "un", scope: !8302, file: !3, line: 4049, type: !184)
!8317 = !DILocation(line: 4049, column: 13, scope: !8302)
!8318 = !DILocalVariable(name: "i", scope: !8302, file: !3, line: 4050, type: !50)
!8319 = !DILocation(line: 4050, column: 10, scope: !8302)
!8320 = !DILocalVariable(name: "sn", scope: !8302, file: !3, line: 4050, type: !50)
!8321 = !DILocation(line: 4050, column: 13, scope: !8302)
!8322 = !DILocation(line: 4052, column: 7, scope: !8323)
!8323 = distinct !DILexicalBlock(scope: !8302, file: !3, line: 4052, column: 7)
!8324 = !DILocation(line: 4052, column: 12, scope: !8323)
!8325 = !DILocation(line: 4052, column: 7, scope: !8302)
!8326 = !DILocation(line: 4054, column: 14, scope: !8327)
!8327 = distinct !DILexicalBlock(scope: !8323, file: !3, line: 4053, column: 5)
!8328 = !DILocation(line: 4055, column: 5, scope: !8327)
!8329 = !DILocation(line: 4058, column: 15, scope: !8330)
!8330 = distinct !DILexicalBlock(scope: !8323, file: !3, line: 4057, column: 5)
!8331 = !DILocation(line: 4058, column: 14, scope: !8330)
!8332 = !DILocation(line: 4058, column: 12, scope: !8330)
!8333 = !DILocation(line: 4059, column: 14, scope: !8330)
!8334 = !DILocation(line: 4061, column: 7, scope: !8335)
!8335 = distinct !DILexicalBlock(scope: !8302, file: !3, line: 4061, column: 7)
!8336 = !DILocation(line: 4061, column: 12, scope: !8335)
!8337 = !DILocation(line: 4061, column: 7, scope: !8302)
!8338 = !DILocation(line: 4062, column: 10, scope: !8335)
!8339 = !DILocation(line: 4062, column: 5, scope: !8335)
!8340 = !DILocation(line: 4063, column: 7, scope: !8341)
!8341 = distinct !DILexicalBlock(scope: !8302, file: !3, line: 4063, column: 7)
!8342 = !DILocation(line: 4063, column: 12, scope: !8341)
!8343 = !DILocation(line: 4063, column: 7, scope: !8302)
!8344 = !DILocation(line: 4064, column: 5, scope: !8341)
!8345 = !DILocation(line: 4066, column: 28, scope: !8302)
!8346 = !DILocation(line: 4066, column: 31, scope: !8302)
!8347 = !DILocation(line: 4066, column: 12, scope: !8302)
!8348 = !DILocation(line: 4066, column: 10, scope: !8302)
!8349 = !DILocation(line: 4066, column: 6, scope: !8302)
!8350 = !DILocation(line: 4067, column: 8, scope: !8351)
!8351 = distinct !DILexicalBlock(scope: !8302, file: !3, line: 4067, column: 7)
!8352 = !DILocation(line: 4067, column: 7, scope: !8302)
!8353 = !DILocation(line: 4068, column: 10, scope: !8351)
!8354 = !DILocation(line: 4068, column: 8, scope: !8351)
!8355 = !DILocation(line: 4068, column: 5, scope: !8351)
!8356 = !DILocation(line: 4070, column: 8, scope: !8302)
!8357 = !DILocation(line: 4070, column: 6, scope: !8302)
!8358 = !DILocation(line: 4072, column: 7, scope: !8359)
!8359 = distinct !DILexicalBlock(scope: !8302, file: !3, line: 4072, column: 7)
!8360 = !DILocation(line: 4072, column: 10, scope: !8359)
!8361 = !DILocation(line: 4072, column: 7, scope: !8302)
!8362 = !DILocation(line: 4074, column: 7, scope: !8363)
!8363 = distinct !DILexicalBlock(scope: !8359, file: !3, line: 4073, column: 5)
!8364 = !DILocation(line: 4074, column: 13, scope: !8363)
!8365 = !DILocation(line: 4075, column: 7, scope: !8363)
!8366 = !DILocation(line: 4075, column: 13, scope: !8363)
!8367 = !DILocation(line: 4076, column: 14, scope: !8363)
!8368 = !DILocation(line: 4076, column: 7, scope: !8363)
!8369 = !DILocation(line: 4079, column: 5, scope: !8302)
!8370 = !DILocation(line: 4081, column: 7, scope: !8371)
!8371 = distinct !DILexicalBlock(scope: !8302, file: !3, line: 4081, column: 7)
!8372 = !DILocation(line: 4081, column: 10, scope: !8371)
!8373 = !DILocation(line: 4081, column: 19, scope: !8371)
!8374 = !DILocation(line: 4081, column: 7, scope: !8302)
!8375 = !DILocation(line: 4082, column: 5, scope: !8371)
!8376 = !DILocation(line: 4082, column: 9, scope: !8371)
!8377 = !DILocation(line: 4082, column: 13, scope: !8371)
!8378 = !DILocation(line: 4084, column: 35, scope: !8302)
!8379 = !DILocation(line: 4084, column: 10, scope: !8302)
!8380 = !DILocation(line: 4084, column: 8, scope: !8302)
!8381 = !DILocation(line: 4086, column: 7, scope: !8382)
!8382 = distinct !DILexicalBlock(scope: !8302, file: !3, line: 4086, column: 7)
!8383 = !DILocation(line: 4086, column: 7, scope: !8302)
!8384 = !DILocation(line: 4088, column: 10, scope: !8382)
!8385 = !DILocation(line: 4088, column: 50, scope: !8382)
!8386 = !DILocation(line: 4088, column: 55, scope: !8382)
!8387 = !DILocation(line: 4088, column: 53, scope: !8382)
!8388 = !DILocation(line: 4088, column: 58, scope: !8382)
!8389 = !DILocation(line: 4088, column: 64, scope: !8382)
!8390 = !DILocation(line: 4088, column: 67, scope: !8382)
!8391 = !DILocation(line: 4088, column: 74, scope: !8382)
!8392 = !DILocation(line: 4088, column: 14, scope: !8382)
!8393 = !DILocation(line: 4088, column: 12, scope: !8382)
!8394 = !DILocation(line: 4088, column: 8, scope: !8382)
!8395 = !DILocation(line: 4088, column: 5, scope: !8382)
!8396 = !DILocalVariable(name: "info", scope: !8397, file: !3, line: 4091, type: !1302)
!8397 = distinct !DILexicalBlock(scope: !8382, file: !3, line: 4090, column: 5)
!8398 = !DILocation(line: 4091, column: 28, scope: !8397)
!8399 = !DILocalVariable(name: "tp", scope: !8397, file: !3, line: 4092, type: !31)
!8400 = !DILocation(line: 4092, column: 14, scope: !8397)
!8401 = !DILocation(line: 4094, column: 33, scope: !8397)
!8402 = !DILocation(line: 4094, column: 7, scope: !8397)
!8403 = !DILocation(line: 4095, column: 30, scope: !8397)
!8404 = !DILocation(line: 4095, column: 12, scope: !8397)
!8405 = !DILocation(line: 4095, column: 10, scope: !8397)
!8406 = !DILocation(line: 4096, column: 18, scope: !8397)
!8407 = !DILocation(line: 4096, column: 22, scope: !8397)
!8408 = !DILocation(line: 4096, column: 25, scope: !8397)
!8409 = !DILocation(line: 4096, column: 32, scope: !8397)
!8410 = !DILocation(line: 4096, column: 7, scope: !8397)
!8411 = !DILocation(line: 4098, column: 12, scope: !8397)
!8412 = !DILocation(line: 4098, column: 53, scope: !8397)
!8413 = !DILocation(line: 4098, column: 58, scope: !8397)
!8414 = !DILocation(line: 4098, column: 56, scope: !8397)
!8415 = !DILocation(line: 4098, column: 61, scope: !8397)
!8416 = !DILocation(line: 4098, column: 74, scope: !8397)
!8417 = !DILocation(line: 4098, column: 78, scope: !8397)
!8418 = !DILocation(line: 4098, column: 16, scope: !8397)
!8419 = !DILocation(line: 4098, column: 14, scope: !8397)
!8420 = !DILocation(line: 4098, column: 10, scope: !8397)
!8421 = !DILocation(line: 4099, column: 7, scope: !8397)
!8422 = !DILocation(line: 4102, column: 3, scope: !8302)
!8423 = !DILocation(line: 4102, column: 10, scope: !8424)
!8424 = distinct !DILexicalBlock(scope: !8425, file: !3, line: 4102, column: 3)
!8425 = distinct !DILexicalBlock(scope: !8302, file: !3, line: 4102, column: 3)
!8426 = !DILocation(line: 4102, column: 14, scope: !8424)
!8427 = !DILocation(line: 4102, column: 12, scope: !8424)
!8428 = !DILocation(line: 4102, column: 3, scope: !8425)
!8429 = !DILocation(line: 4103, column: 13, scope: !8424)
!8430 = !DILocation(line: 4103, column: 36, scope: !8424)
!8431 = !DILocation(line: 4103, column: 39, scope: !8424)
!8432 = !DILocation(line: 4103, column: 5, scope: !8424)
!8433 = !DILocation(line: 4103, column: 8, scope: !8424)
!8434 = !DILocation(line: 4103, column: 11, scope: !8424)
!8435 = !DILocation(line: 4102, column: 19, scope: !8424)
!8436 = !DILocation(line: 4102, column: 3, scope: !8424)
!8437 = distinct !{!8437, !8428, !8438}
!8438 = !DILocation(line: 4103, column: 41, scope: !8425)
!8439 = !DILocation(line: 4105, column: 3, scope: !8302)
!8440 = !DILocation(line: 4105, column: 6, scope: !8302)
!8441 = !DILocation(line: 4105, column: 10, scope: !8302)
!8442 = !DILocation(line: 4106, column: 10, scope: !8302)
!8443 = !DILocation(line: 4106, column: 3, scope: !8302)
!8444 = !DILocation(line: 4107, column: 1, scope: !8302)
!8445 = distinct !DISubprogram(name: "mpz_set_str", scope: !3, file: !3, line: 4110, type: !8446, scopeLine: 4111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!8446 = !DISubroutineType(types: !8447)
!8447 = !{!34, !1838, !5987, !34}
!8448 = !DILocalVariable(name: "r", arg: 1, scope: !8445, file: !3, line: 4110, type: !1838)
!8449 = !DILocation(line: 4110, column: 20, scope: !8445)
!8450 = !DILocalVariable(name: "sp", arg: 2, scope: !8445, file: !3, line: 4110, type: !5987)
!8451 = !DILocation(line: 4110, column: 35, scope: !8445)
!8452 = !DILocalVariable(name: "base", arg: 3, scope: !8445, file: !3, line: 4110, type: !34)
!8453 = !DILocation(line: 4110, column: 43, scope: !8445)
!8454 = !DILocalVariable(name: "bits", scope: !8445, file: !3, line: 4112, type: !6)
!8455 = !DILocation(line: 4112, column: 12, scope: !8445)
!8456 = !DILocalVariable(name: "rn", scope: !8445, file: !3, line: 4113, type: !184)
!8457 = !DILocation(line: 4113, column: 13, scope: !8445)
!8458 = !DILocalVariable(name: "alloc", scope: !8445, file: !3, line: 4113, type: !184)
!8459 = !DILocation(line: 4113, column: 17, scope: !8445)
!8460 = !DILocalVariable(name: "rp", scope: !8445, file: !3, line: 4114, type: !31)
!8461 = !DILocation(line: 4114, column: 10, scope: !8445)
!8462 = !DILocalVariable(name: "sn", scope: !8445, file: !3, line: 4115, type: !50)
!8463 = !DILocation(line: 4115, column: 10, scope: !8445)
!8464 = !DILocalVariable(name: "sign", scope: !8445, file: !3, line: 4116, type: !34)
!8465 = !DILocation(line: 4116, column: 7, scope: !8445)
!8466 = !DILocalVariable(name: "dp", scope: !8445, file: !3, line: 4117, type: !36)
!8467 = !DILocation(line: 4117, column: 18, scope: !8445)
!8468 = !DILocation(line: 4121, column: 3, scope: !8445)
!8469 = !DILocation(line: 4121, column: 10, scope: !8445)
!8470 = !DILocation(line: 4122, column: 7, scope: !8445)
!8471 = distinct !{!8471, !8468, !8470}
!8472 = !DILocation(line: 4124, column: 12, scope: !8445)
!8473 = !DILocation(line: 4124, column: 11, scope: !8445)
!8474 = !DILocation(line: 4124, column: 15, scope: !8445)
!8475 = !DILocation(line: 4124, column: 8, scope: !8445)
!8476 = !DILocation(line: 4125, column: 9, scope: !8445)
!8477 = !DILocation(line: 4125, column: 6, scope: !8445)
!8478 = !DILocation(line: 4127, column: 7, scope: !8479)
!8479 = distinct !DILexicalBlock(scope: !8445, file: !3, line: 4127, column: 7)
!8480 = !DILocation(line: 4127, column: 12, scope: !8479)
!8481 = !DILocation(line: 4127, column: 7, scope: !8445)
!8482 = !DILocation(line: 4129, column: 12, scope: !8483)
!8483 = distinct !DILexicalBlock(scope: !8484, file: !3, line: 4129, column: 11)
!8484 = distinct !DILexicalBlock(scope: !8479, file: !3, line: 4128, column: 5)
!8485 = !DILocation(line: 4129, column: 11, scope: !8483)
!8486 = !DILocation(line: 4129, column: 15, scope: !8483)
!8487 = !DILocation(line: 4129, column: 11, scope: !8484)
!8488 = !DILocation(line: 4131, column: 6, scope: !8489)
!8489 = distinct !DILexicalBlock(scope: !8483, file: !3, line: 4130, column: 2)
!8490 = !DILocation(line: 4132, column: 9, scope: !8491)
!8491 = distinct !DILexicalBlock(scope: !8489, file: !3, line: 4132, column: 8)
!8492 = !DILocation(line: 4132, column: 8, scope: !8491)
!8493 = !DILocation(line: 4132, column: 12, scope: !8491)
!8494 = !DILocation(line: 4132, column: 19, scope: !8491)
!8495 = !DILocation(line: 4132, column: 23, scope: !8491)
!8496 = !DILocation(line: 4132, column: 22, scope: !8491)
!8497 = !DILocation(line: 4132, column: 26, scope: !8491)
!8498 = !DILocation(line: 4132, column: 8, scope: !8489)
!8499 = !DILocation(line: 4134, column: 13, scope: !8500)
!8500 = distinct !DILexicalBlock(scope: !8491, file: !3, line: 4133, column: 6)
!8501 = !DILocation(line: 4135, column: 10, scope: !8500)
!8502 = !DILocation(line: 4136, column: 6, scope: !8500)
!8503 = !DILocation(line: 4137, column: 14, scope: !8504)
!8504 = distinct !DILexicalBlock(scope: !8491, file: !3, line: 4137, column: 13)
!8505 = !DILocation(line: 4137, column: 13, scope: !8504)
!8506 = !DILocation(line: 4137, column: 17, scope: !8504)
!8507 = !DILocation(line: 4137, column: 24, scope: !8504)
!8508 = !DILocation(line: 4137, column: 28, scope: !8504)
!8509 = !DILocation(line: 4137, column: 27, scope: !8504)
!8510 = !DILocation(line: 4137, column: 31, scope: !8504)
!8511 = !DILocation(line: 4137, column: 13, scope: !8491)
!8512 = !DILocation(line: 4139, column: 13, scope: !8513)
!8513 = distinct !DILexicalBlock(scope: !8504, file: !3, line: 4138, column: 6)
!8514 = !DILocation(line: 4140, column: 10, scope: !8513)
!8515 = !DILocation(line: 4141, column: 6, scope: !8513)
!8516 = !DILocation(line: 4143, column: 11, scope: !8504)
!8517 = !DILocation(line: 4144, column: 2, scope: !8489)
!8518 = !DILocation(line: 4146, column: 7, scope: !8483)
!8519 = !DILocation(line: 4147, column: 5, scope: !8484)
!8520 = !DILocation(line: 4149, column: 16, scope: !8445)
!8521 = !DILocation(line: 4149, column: 8, scope: !8445)
!8522 = !DILocation(line: 4149, column: 6, scope: !8445)
!8523 = !DILocation(line: 4150, column: 8, scope: !8445)
!8524 = !DILocation(line: 4150, column: 6, scope: !8445)
!8525 = !DILocation(line: 4152, column: 11, scope: !8526)
!8526 = distinct !DILexicalBlock(scope: !8445, file: !3, line: 4152, column: 3)
!8527 = !DILocation(line: 4152, column: 8, scope: !8526)
!8528 = !DILocation(line: 4152, column: 17, scope: !8529)
!8529 = distinct !DILexicalBlock(scope: !8526, file: !3, line: 4152, column: 3)
!8530 = !DILocation(line: 4152, column: 16, scope: !8529)
!8531 = !DILocation(line: 4152, column: 3, scope: !8526)
!8532 = !DILocalVariable(name: "digit", scope: !8533, file: !3, line: 4154, type: !6)
!8533 = distinct !DILexicalBlock(scope: !8529, file: !3, line: 4153, column: 5)
!8534 = !DILocation(line: 4154, column: 16, scope: !8533)
!8535 = !DILocation(line: 4156, column: 11, scope: !8536)
!8536 = distinct !DILexicalBlock(scope: !8533, file: !3, line: 4156, column: 11)
!8537 = !DILocation(line: 4156, column: 11, scope: !8533)
!8538 = !DILocation(line: 4157, column: 2, scope: !8536)
!8539 = !DILocation(line: 4158, column: 12, scope: !8540)
!8540 = distinct !DILexicalBlock(scope: !8533, file: !3, line: 4158, column: 11)
!8541 = !DILocation(line: 4158, column: 11, scope: !8540)
!8542 = !DILocation(line: 4158, column: 15, scope: !8540)
!8543 = !DILocation(line: 4158, column: 22, scope: !8540)
!8544 = !DILocation(line: 4158, column: 26, scope: !8540)
!8545 = !DILocation(line: 4158, column: 25, scope: !8540)
!8546 = !DILocation(line: 4158, column: 29, scope: !8540)
!8547 = !DILocation(line: 4158, column: 11, scope: !8533)
!8548 = !DILocation(line: 4159, column: 11, scope: !8540)
!8549 = !DILocation(line: 4159, column: 10, scope: !8540)
!8550 = !DILocation(line: 4159, column: 14, scope: !8540)
!8551 = !DILocation(line: 4159, column: 8, scope: !8540)
!8552 = !DILocation(line: 4159, column: 2, scope: !8540)
!8553 = !DILocation(line: 4160, column: 17, scope: !8554)
!8554 = distinct !DILexicalBlock(scope: !8540, file: !3, line: 4160, column: 16)
!8555 = !DILocation(line: 4160, column: 16, scope: !8554)
!8556 = !DILocation(line: 4160, column: 20, scope: !8554)
!8557 = !DILocation(line: 4160, column: 27, scope: !8554)
!8558 = !DILocation(line: 4160, column: 31, scope: !8554)
!8559 = !DILocation(line: 4160, column: 30, scope: !8554)
!8560 = !DILocation(line: 4160, column: 34, scope: !8554)
!8561 = !DILocation(line: 4160, column: 16, scope: !8540)
!8562 = !DILocation(line: 4161, column: 11, scope: !8554)
!8563 = !DILocation(line: 4161, column: 10, scope: !8554)
!8564 = !DILocation(line: 4161, column: 14, scope: !8554)
!8565 = !DILocation(line: 4161, column: 20, scope: !8554)
!8566 = !DILocation(line: 4161, column: 8, scope: !8554)
!8567 = !DILocation(line: 4161, column: 2, scope: !8554)
!8568 = !DILocation(line: 4162, column: 17, scope: !8569)
!8569 = distinct !DILexicalBlock(scope: !8554, file: !3, line: 4162, column: 16)
!8570 = !DILocation(line: 4162, column: 16, scope: !8569)
!8571 = !DILocation(line: 4162, column: 20, scope: !8569)
!8572 = !DILocation(line: 4162, column: 27, scope: !8569)
!8573 = !DILocation(line: 4162, column: 31, scope: !8569)
!8574 = !DILocation(line: 4162, column: 30, scope: !8569)
!8575 = !DILocation(line: 4162, column: 34, scope: !8569)
!8576 = !DILocation(line: 4162, column: 16, scope: !8554)
!8577 = !DILocation(line: 4163, column: 11, scope: !8569)
!8578 = !DILocation(line: 4163, column: 10, scope: !8569)
!8579 = !DILocation(line: 4163, column: 14, scope: !8569)
!8580 = !DILocation(line: 4163, column: 20, scope: !8569)
!8581 = !DILocation(line: 4163, column: 8, scope: !8569)
!8582 = !DILocation(line: 4163, column: 2, scope: !8569)
!8583 = !DILocation(line: 4165, column: 10, scope: !8569)
!8584 = !DILocation(line: 4165, column: 8, scope: !8569)
!8585 = !DILocation(line: 4167, column: 11, scope: !8586)
!8586 = distinct !DILexicalBlock(scope: !8533, file: !3, line: 4167, column: 11)
!8587 = !DILocation(line: 4167, column: 20, scope: !8586)
!8588 = !DILocation(line: 4167, column: 17, scope: !8586)
!8589 = !DILocation(line: 4167, column: 11, scope: !8533)
!8590 = !DILocation(line: 4169, column: 4, scope: !8591)
!8591 = distinct !DILexicalBlock(scope: !8586, file: !3, line: 4168, column: 2)
!8592 = !DILocation(line: 4170, column: 4, scope: !8591)
!8593 = !DILocation(line: 4170, column: 7, scope: !8591)
!8594 = !DILocation(line: 4170, column: 16, scope: !8591)
!8595 = !DILocation(line: 4171, column: 4, scope: !8591)
!8596 = !DILocation(line: 4174, column: 18, scope: !8533)
!8597 = !DILocation(line: 4174, column: 7, scope: !8533)
!8598 = !DILocation(line: 4174, column: 12, scope: !8533)
!8599 = !DILocation(line: 4174, column: 16, scope: !8533)
!8600 = !DILocation(line: 4175, column: 5, scope: !8533)
!8601 = !DILocation(line: 4152, column: 23, scope: !8529)
!8602 = !DILocation(line: 4152, column: 3, scope: !8529)
!8603 = distinct !{!8603, !8531, !8604}
!8604 = !DILocation(line: 4175, column: 5, scope: !8526)
!8605 = !DILocation(line: 4177, column: 35, scope: !8445)
!8606 = !DILocation(line: 4177, column: 10, scope: !8445)
!8607 = !DILocation(line: 4177, column: 8, scope: !8445)
!8608 = !DILocation(line: 4179, column: 7, scope: !8609)
!8609 = distinct !DILexicalBlock(scope: !8445, file: !3, line: 4179, column: 7)
!8610 = !DILocation(line: 4179, column: 12, scope: !8609)
!8611 = !DILocation(line: 4179, column: 7, scope: !8445)
!8612 = !DILocation(line: 4181, column: 16, scope: !8613)
!8613 = distinct !DILexicalBlock(scope: !8609, file: !3, line: 4180, column: 5)
!8614 = !DILocation(line: 4181, column: 21, scope: !8613)
!8615 = !DILocation(line: 4181, column: 19, scope: !8613)
!8616 = !DILocation(line: 4181, column: 26, scope: !8613)
!8617 = !DILocation(line: 4181, column: 42, scope: !8613)
!8618 = !DILocation(line: 4181, column: 47, scope: !8613)
!8619 = !DILocation(line: 4181, column: 13, scope: !8613)
!8620 = !DILocation(line: 4182, column: 12, scope: !8613)
!8621 = !DILocation(line: 4182, column: 10, scope: !8613)
!8622 = !DILocation(line: 4183, column: 30, scope: !8613)
!8623 = !DILocation(line: 4183, column: 34, scope: !8613)
!8624 = !DILocation(line: 4183, column: 38, scope: !8613)
!8625 = !DILocation(line: 4183, column: 42, scope: !8613)
!8626 = !DILocation(line: 4183, column: 12, scope: !8613)
!8627 = !DILocation(line: 4183, column: 10, scope: !8613)
!8628 = !DILocation(line: 4184, column: 5, scope: !8613)
!8629 = !DILocalVariable(name: "info", scope: !8630, file: !3, line: 4187, type: !1302)
!8630 = distinct !DILexicalBlock(scope: !8609, file: !3, line: 4186, column: 5)
!8631 = !DILocation(line: 4187, column: 28, scope: !8630)
!8632 = !DILocation(line: 4188, column: 33, scope: !8630)
!8633 = !DILocation(line: 4188, column: 7, scope: !8630)
!8634 = !DILocation(line: 4189, column: 16, scope: !8630)
!8635 = !DILocation(line: 4189, column: 26, scope: !8630)
!8636 = !DILocation(line: 4189, column: 21, scope: !8630)
!8637 = !DILocation(line: 4189, column: 19, scope: !8630)
!8638 = !DILocation(line: 4189, column: 30, scope: !8630)
!8639 = !DILocation(line: 4189, column: 42, scope: !8630)
!8640 = !DILocation(line: 4189, column: 37, scope: !8630)
!8641 = !DILocation(line: 4189, column: 35, scope: !8630)
!8642 = !DILocation(line: 4189, column: 13, scope: !8630)
!8643 = !DILocation(line: 4190, column: 12, scope: !8630)
!8644 = !DILocation(line: 4190, column: 10, scope: !8630)
!8645 = !DILocation(line: 4191, column: 31, scope: !8630)
!8646 = !DILocation(line: 4191, column: 35, scope: !8630)
!8647 = !DILocation(line: 4191, column: 39, scope: !8630)
!8648 = !DILocation(line: 4191, column: 43, scope: !8630)
!8649 = !DILocation(line: 4191, column: 12, scope: !8630)
!8650 = !DILocation(line: 4191, column: 10, scope: !8630)
!8651 = !DILocation(line: 4194, column: 3, scope: !8445)
!8652 = !DILocation(line: 4196, column: 17, scope: !8445)
!8653 = !DILocation(line: 4196, column: 26, scope: !8445)
!8654 = !DILocation(line: 4196, column: 24, scope: !8445)
!8655 = !DILocation(line: 4196, column: 31, scope: !8445)
!8656 = !DILocation(line: 4196, column: 3, scope: !8445)
!8657 = !DILocation(line: 4196, column: 6, scope: !8445)
!8658 = !DILocation(line: 4196, column: 15, scope: !8445)
!8659 = !DILocation(line: 4198, column: 3, scope: !8445)
!8660 = !DILocation(line: 4199, column: 1, scope: !8445)
!8661 = distinct !DISubprogram(name: "mpz_init_set_str", scope: !3, file: !3, line: 4202, type: !8446, scopeLine: 4203, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!8662 = !DILocalVariable(name: "r", arg: 1, scope: !8661, file: !3, line: 4202, type: !1838)
!8663 = !DILocation(line: 4202, column: 25, scope: !8661)
!8664 = !DILocalVariable(name: "sp", arg: 2, scope: !8661, file: !3, line: 4202, type: !5987)
!8665 = !DILocation(line: 4202, column: 40, scope: !8661)
!8666 = !DILocalVariable(name: "base", arg: 3, scope: !8661, file: !3, line: 4202, type: !34)
!8667 = !DILocation(line: 4202, column: 48, scope: !8661)
!8668 = !DILocation(line: 4204, column: 13, scope: !8661)
!8669 = !DILocation(line: 4204, column: 3, scope: !8661)
!8670 = !DILocation(line: 4205, column: 23, scope: !8661)
!8671 = !DILocation(line: 4205, column: 26, scope: !8661)
!8672 = !DILocation(line: 4205, column: 30, scope: !8661)
!8673 = !DILocation(line: 4205, column: 10, scope: !8661)
!8674 = !DILocation(line: 4205, column: 3, scope: !8661)
!8675 = distinct !DISubprogram(name: "mpz_out_str", scope: !3, file: !3, line: 4209, type: !8676, scopeLine: 4210, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!8676 = !DISubroutineType(types: !8677)
!8677 = !{!50, !8678, !34, !1950}
!8678 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8679, size: 64)
!8679 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !8680, line: 7, baseType: !8681)
!8680 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!8681 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !8682, line: 49, size: 1728, elements: !8683)
!8682 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!8683 = !{!8684, !8685, !8686, !8687, !8688, !8689, !8690, !8691, !8692, !8693, !8694, !8695, !8696, !8699, !8701, !8702, !8703, !8706, !8707, !8709, !8711, !8714, !8716, !8719, !8722, !8723, !8724, !8725, !8726}
!8684 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !8681, file: !8682, line: 51, baseType: !34, size: 32)
!8685 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !8681, file: !8682, line: 54, baseType: !8305, size: 64, offset: 64)
!8686 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !8681, file: !8682, line: 55, baseType: !8305, size: 64, offset: 128)
!8687 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !8681, file: !8682, line: 56, baseType: !8305, size: 64, offset: 192)
!8688 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !8681, file: !8682, line: 57, baseType: !8305, size: 64, offset: 256)
!8689 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !8681, file: !8682, line: 58, baseType: !8305, size: 64, offset: 320)
!8690 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !8681, file: !8682, line: 59, baseType: !8305, size: 64, offset: 384)
!8691 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !8681, file: !8682, line: 60, baseType: !8305, size: 64, offset: 448)
!8692 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !8681, file: !8682, line: 61, baseType: !8305, size: 64, offset: 512)
!8693 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !8681, file: !8682, line: 64, baseType: !8305, size: 64, offset: 576)
!8694 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !8681, file: !8682, line: 65, baseType: !8305, size: 64, offset: 640)
!8695 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !8681, file: !8682, line: 66, baseType: !8305, size: 64, offset: 704)
!8696 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !8681, file: !8682, line: 68, baseType: !8697, size: 64, offset: 768)
!8697 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8698, size: 64)
!8698 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !8682, line: 36, flags: DIFlagFwdDecl)
!8699 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !8681, file: !8682, line: 70, baseType: !8700, size: 64, offset: 832)
!8700 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8681, size: 64)
!8701 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !8681, file: !8682, line: 72, baseType: !34, size: 32, offset: 896)
!8702 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !8681, file: !8682, line: 73, baseType: !34, size: 32, offset: 928)
!8703 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !8681, file: !8682, line: 74, baseType: !8704, size: 64, offset: 960)
!8704 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !8705, line: 152, baseType: !30)
!8705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!8706 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !8681, file: !8682, line: 77, baseType: !38, size: 16, offset: 1024)
!8707 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !8681, file: !8682, line: 78, baseType: !8708, size: 8, offset: 1040)
!8708 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!8709 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !8681, file: !8682, line: 79, baseType: !8710, size: 8, offset: 1048)
!8710 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5989, size: 8, elements: !3321)
!8711 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !8681, file: !8682, line: 81, baseType: !8712, size: 64, offset: 1088)
!8712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8713, size: 64)
!8713 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !8682, line: 43, baseType: null)
!8714 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !8681, file: !8682, line: 89, baseType: !8715, size: 64, offset: 1152)
!8715 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !8705, line: 153, baseType: !30)
!8716 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !8681, file: !8682, line: 91, baseType: !8717, size: 64, offset: 1216)
!8717 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8718, size: 64)
!8718 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !8682, line: 37, flags: DIFlagFwdDecl)
!8719 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !8681, file: !8682, line: 92, baseType: !8720, size: 64, offset: 1280)
!8720 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8721, size: 64)
!8721 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !8682, line: 38, flags: DIFlagFwdDecl)
!8722 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !8681, file: !8682, line: 93, baseType: !8700, size: 64, offset: 1344)
!8723 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !8681, file: !8682, line: 94, baseType: !49, size: 64, offset: 1408)
!8724 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !8681, file: !8682, line: 95, baseType: !50, size: 64, offset: 1472)
!8725 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !8681, file: !8682, line: 96, baseType: !34, size: 32, offset: 1536)
!8726 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !8681, file: !8682, line: 98, baseType: !8727, size: 160, offset: 1568)
!8727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5989, size: 160, elements: !8728)
!8728 = !{!8729}
!8729 = !DISubrange(count: 20)
!8730 = !DILocalVariable(name: "stream", arg: 1, scope: !8675, file: !3, line: 4209, type: !8678)
!8731 = !DILocation(line: 4209, column: 20, scope: !8675)
!8732 = !DILocalVariable(name: "base", arg: 2, scope: !8675, file: !3, line: 4209, type: !34)
!8733 = !DILocation(line: 4209, column: 32, scope: !8675)
!8734 = !DILocalVariable(name: "x", arg: 3, scope: !8675, file: !3, line: 4209, type: !1950)
!8735 = !DILocation(line: 4209, column: 50, scope: !8675)
!8736 = !DILocalVariable(name: "str", scope: !8675, file: !3, line: 4211, type: !8305)
!8737 = !DILocation(line: 4211, column: 9, scope: !8675)
!8738 = !DILocalVariable(name: "len", scope: !8675, file: !3, line: 4212, type: !50)
!8739 = !DILocation(line: 4212, column: 10, scope: !8675)
!8740 = !DILocation(line: 4214, column: 28, scope: !8675)
!8741 = !DILocation(line: 4214, column: 34, scope: !8675)
!8742 = !DILocation(line: 4214, column: 9, scope: !8675)
!8743 = !DILocation(line: 4214, column: 7, scope: !8675)
!8744 = !DILocation(line: 4215, column: 17, scope: !8675)
!8745 = !DILocation(line: 4215, column: 9, scope: !8675)
!8746 = !DILocation(line: 4215, column: 7, scope: !8675)
!8747 = !DILocation(line: 4216, column: 17, scope: !8675)
!8748 = !DILocation(line: 4216, column: 25, scope: !8675)
!8749 = !DILocation(line: 4216, column: 30, scope: !8675)
!8750 = !DILocation(line: 4216, column: 9, scope: !8675)
!8751 = !DILocation(line: 4216, column: 7, scope: !8675)
!8752 = !DILocation(line: 4217, column: 3, scope: !8675)
!8753 = !DILocation(line: 4218, column: 10, scope: !8675)
!8754 = !DILocation(line: 4218, column: 3, scope: !8675)
!8755 = distinct !DISubprogram(name: "mpz_import", scope: !3, file: !3, line: 4232, type: !8756, scopeLine: 4234, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!8756 = !DISubroutineType(types: !8757)
!8757 = !{null, !1838, !50, !34, !50, !34, !50, !8758}
!8758 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8759, size: 64)
!8759 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!8760 = !DILocalVariable(name: "r", arg: 1, scope: !8755, file: !3, line: 4232, type: !1838)
!8761 = !DILocation(line: 4232, column: 19, scope: !8755)
!8762 = !DILocalVariable(name: "count", arg: 2, scope: !8755, file: !3, line: 4232, type: !50)
!8763 = !DILocation(line: 4232, column: 29, scope: !8755)
!8764 = !DILocalVariable(name: "order", arg: 3, scope: !8755, file: !3, line: 4232, type: !34)
!8765 = !DILocation(line: 4232, column: 40, scope: !8755)
!8766 = !DILocalVariable(name: "size", arg: 4, scope: !8755, file: !3, line: 4232, type: !50)
!8767 = !DILocation(line: 4232, column: 54, scope: !8755)
!8768 = !DILocalVariable(name: "endian", arg: 5, scope: !8755, file: !3, line: 4232, type: !34)
!8769 = !DILocation(line: 4232, column: 64, scope: !8755)
!8770 = !DILocalVariable(name: "nails", arg: 6, scope: !8755, file: !3, line: 4233, type: !50)
!8771 = !DILocation(line: 4233, column: 13, scope: !8755)
!8772 = !DILocalVariable(name: "src", arg: 7, scope: !8755, file: !3, line: 4233, type: !8758)
!8773 = !DILocation(line: 4233, column: 32, scope: !8755)
!8774 = !DILocalVariable(name: "p", scope: !8755, file: !3, line: 4235, type: !41)
!8775 = !DILocation(line: 4235, column: 24, scope: !8755)
!8776 = !DILocalVariable(name: "word_step", scope: !8755, file: !3, line: 4236, type: !39)
!8777 = !DILocation(line: 4236, column: 13, scope: !8755)
!8778 = !DILocalVariable(name: "rp", scope: !8755, file: !3, line: 4237, type: !31)
!8779 = !DILocation(line: 4237, column: 10, scope: !8755)
!8780 = !DILocalVariable(name: "rn", scope: !8755, file: !3, line: 4238, type: !184)
!8781 = !DILocation(line: 4238, column: 13, scope: !8755)
!8782 = !DILocalVariable(name: "limb", scope: !8755, file: !3, line: 4241, type: !27)
!8783 = !DILocation(line: 4241, column: 13, scope: !8755)
!8784 = !DILocalVariable(name: "bytes", scope: !8755, file: !3, line: 4244, type: !50)
!8785 = !DILocation(line: 4244, column: 10, scope: !8755)
!8786 = !DILocalVariable(name: "i", scope: !8755, file: !3, line: 4246, type: !184)
!8787 = !DILocation(line: 4246, column: 13, scope: !8755)
!8788 = !DILocation(line: 4248, column: 7, scope: !8789)
!8789 = distinct !DILexicalBlock(scope: !8755, file: !3, line: 4248, column: 7)
!8790 = !DILocation(line: 4248, column: 13, scope: !8789)
!8791 = !DILocation(line: 4248, column: 7, scope: !8755)
!8792 = !DILocation(line: 4249, column: 5, scope: !8789)
!8793 = !DILocation(line: 4254, column: 7, scope: !8794)
!8794 = distinct !DILexicalBlock(scope: !8755, file: !3, line: 4254, column: 7)
!8795 = !DILocation(line: 4254, column: 14, scope: !8794)
!8796 = !DILocation(line: 4254, column: 7, scope: !8755)
!8797 = !DILocation(line: 4255, column: 14, scope: !8794)
!8798 = !DILocation(line: 4255, column: 12, scope: !8794)
!8799 = !DILocation(line: 4255, column: 5, scope: !8794)
!8800 = !DILocation(line: 4257, column: 25, scope: !8755)
!8801 = !DILocation(line: 4257, column: 5, scope: !8755)
!8802 = !DILocation(line: 4259, column: 16, scope: !8755)
!8803 = !DILocation(line: 4259, column: 25, scope: !8755)
!8804 = !DILocation(line: 4259, column: 22, scope: !8755)
!8805 = !DILocation(line: 4259, column: 15, scope: !8755)
!8806 = !DILocation(line: 4259, column: 39, scope: !8755)
!8807 = !DILocation(line: 4259, column: 37, scope: !8755)
!8808 = !DILocation(line: 4259, column: 13, scope: !8755)
!8809 = !DILocation(line: 4263, column: 7, scope: !8810)
!8810 = distinct !DILexicalBlock(scope: !8755, file: !3, line: 4263, column: 7)
!8811 = !DILocation(line: 4263, column: 13, scope: !8810)
!8812 = !DILocation(line: 4263, column: 7, scope: !8755)
!8813 = !DILocation(line: 4265, column: 12, scope: !8814)
!8814 = distinct !DILexicalBlock(scope: !8810, file: !3, line: 4264, column: 5)
!8815 = !DILocation(line: 4265, column: 20, scope: !8814)
!8816 = !DILocation(line: 4265, column: 26, scope: !8814)
!8817 = !DILocation(line: 4265, column: 17, scope: !8814)
!8818 = !DILocation(line: 4265, column: 9, scope: !8814)
!8819 = !DILocation(line: 4266, column: 21, scope: !8814)
!8820 = !DILocation(line: 4266, column: 19, scope: !8814)
!8821 = !DILocation(line: 4266, column: 17, scope: !8814)
!8822 = !DILocation(line: 4267, column: 5, scope: !8814)
!8823 = !DILocation(line: 4270, column: 7, scope: !8824)
!8824 = distinct !DILexicalBlock(scope: !8755, file: !3, line: 4270, column: 7)
!8825 = !DILocation(line: 4270, column: 14, scope: !8824)
!8826 = !DILocation(line: 4270, column: 7, scope: !8755)
!8827 = !DILocation(line: 4271, column: 11, scope: !8824)
!8828 = !DILocation(line: 4271, column: 16, scope: !8824)
!8829 = !DILocation(line: 4271, column: 7, scope: !8824)
!8830 = !DILocation(line: 4271, column: 5, scope: !8824)
!8831 = !DILocation(line: 4273, column: 9, scope: !8755)
!8832 = !DILocation(line: 4273, column: 16, scope: !8755)
!8833 = !DILocation(line: 4273, column: 14, scope: !8755)
!8834 = !DILocation(line: 4273, column: 22, scope: !8755)
!8835 = !DILocation(line: 4273, column: 42, scope: !8755)
!8836 = !DILocation(line: 4273, column: 47, scope: !8755)
!8837 = !DILocation(line: 4273, column: 6, scope: !8755)
!8838 = !DILocation(line: 4274, column: 8, scope: !8755)
!8839 = !DILocation(line: 4274, column: 6, scope: !8755)
!8840 = !DILocation(line: 4276, column: 13, scope: !8841)
!8841 = distinct !DILexicalBlock(scope: !8755, file: !3, line: 4276, column: 3)
!8842 = !DILocation(line: 4276, column: 24, scope: !8841)
!8843 = !DILocation(line: 4276, column: 31, scope: !8841)
!8844 = !DILocation(line: 4276, column: 8, scope: !8841)
!8845 = !DILocation(line: 4276, column: 36, scope: !8846)
!8846 = distinct !DILexicalBlock(scope: !8841, file: !3, line: 4276, column: 3)
!8847 = !DILocation(line: 4276, column: 42, scope: !8846)
!8848 = !DILocation(line: 4276, column: 3, scope: !8841)
!8849 = !DILocalVariable(name: "j", scope: !8850, file: !3, line: 4278, type: !50)
!8850 = distinct !DILexicalBlock(scope: !8846, file: !3, line: 4277, column: 5)
!8851 = !DILocation(line: 4278, column: 14, scope: !8850)
!8852 = !DILocation(line: 4279, column: 14, scope: !8853)
!8853 = distinct !DILexicalBlock(scope: !8850, file: !3, line: 4279, column: 7)
!8854 = !DILocation(line: 4279, column: 12, scope: !8853)
!8855 = !DILocation(line: 4279, column: 19, scope: !8856)
!8856 = distinct !DILexicalBlock(scope: !8853, file: !3, line: 4279, column: 7)
!8857 = !DILocation(line: 4279, column: 23, scope: !8856)
!8858 = !DILocation(line: 4279, column: 21, scope: !8856)
!8859 = !DILocation(line: 4279, column: 7, scope: !8853)
!8860 = !DILocation(line: 4281, column: 25, scope: !8861)
!8861 = distinct !DILexicalBlock(scope: !8856, file: !3, line: 4280, column: 2)
!8862 = !DILocation(line: 4281, column: 24, scope: !8861)
!8863 = !DILocation(line: 4281, column: 12, scope: !8861)
!8864 = !DILocation(line: 4281, column: 36, scope: !8861)
!8865 = !DILocation(line: 4281, column: 39, scope: !8861)
!8866 = !DILocation(line: 4281, column: 27, scope: !8861)
!8867 = !DILocation(line: 4281, column: 9, scope: !8861)
!8868 = !DILocation(line: 4282, column: 8, scope: !8869)
!8869 = distinct !DILexicalBlock(scope: !8861, file: !3, line: 4282, column: 8)
!8870 = !DILocation(line: 4282, column: 14, scope: !8869)
!8871 = !DILocation(line: 4282, column: 8, scope: !8861)
!8872 = !DILocation(line: 4284, column: 18, scope: !8873)
!8873 = distinct !DILexicalBlock(scope: !8869, file: !3, line: 4283, column: 6)
!8874 = !DILocation(line: 4284, column: 8, scope: !8873)
!8875 = !DILocation(line: 4284, column: 12, scope: !8873)
!8876 = !DILocation(line: 4284, column: 16, scope: !8873)
!8877 = !DILocation(line: 4285, column: 14, scope: !8873)
!8878 = !DILocation(line: 4286, column: 13, scope: !8873)
!8879 = !DILocation(line: 4287, column: 6, scope: !8873)
!8880 = !DILocation(line: 4288, column: 2, scope: !8861)
!8881 = !DILocation(line: 4279, column: 30, scope: !8856)
!8882 = !DILocation(line: 4279, column: 51, scope: !8856)
!8883 = !DILocation(line: 4279, column: 39, scope: !8856)
!8884 = !DILocation(line: 4279, column: 36, scope: !8856)
!8885 = !DILocation(line: 4279, column: 7, scope: !8856)
!8886 = distinct !{!8886, !8859, !8887}
!8887 = !DILocation(line: 4288, column: 2, scope: !8853)
!8888 = !DILocation(line: 4289, column: 5, scope: !8850)
!8889 = !DILocation(line: 4276, column: 52, scope: !8846)
!8890 = !DILocation(line: 4276, column: 61, scope: !8846)
!8891 = !DILocation(line: 4276, column: 58, scope: !8846)
!8892 = !DILocation(line: 4276, column: 3, scope: !8846)
!8893 = distinct !{!8893, !8848, !8894}
!8894 = !DILocation(line: 4289, column: 5, scope: !8841)
!8895 = !DILocation(line: 4291, column: 7, scope: !8896)
!8896 = distinct !DILexicalBlock(scope: !8755, file: !3, line: 4291, column: 7)
!8897 = !DILocation(line: 4291, column: 12, scope: !8896)
!8898 = !DILocation(line: 4291, column: 7, scope: !8755)
!8899 = !DILocation(line: 4292, column: 15, scope: !8896)
!8900 = !DILocation(line: 4292, column: 5, scope: !8896)
!8901 = !DILocation(line: 4292, column: 9, scope: !8896)
!8902 = !DILocation(line: 4292, column: 13, scope: !8896)
!8903 = !DILocation(line: 4294, column: 30, scope: !8896)
!8904 = !DILocation(line: 4294, column: 34, scope: !8896)
!8905 = !DILocation(line: 4294, column: 9, scope: !8896)
!8906 = !DILocation(line: 4294, column: 7, scope: !8896)
!8907 = !DILocation(line: 4296, column: 17, scope: !8755)
!8908 = !DILocation(line: 4296, column: 3, scope: !8755)
!8909 = !DILocation(line: 4296, column: 6, scope: !8755)
!8910 = !DILocation(line: 4296, column: 15, scope: !8755)
!8911 = !DILocation(line: 4297, column: 1, scope: !8755)
!8912 = !DILocalVariable(name: "p", scope: !63, file: !3, line: 4226, type: !41)
!8913 = !DILocation(line: 4226, column: 24, scope: !63)
!8914 = !DILocation(line: 4227, column: 15, scope: !63)
!8915 = !DILocation(line: 4227, column: 14, scope: !63)
!8916 = !DILocation(line: 4227, column: 12, scope: !63)
!8917 = !DILocation(line: 4227, column: 3, scope: !63)
!8918 = distinct !DISubprogram(name: "mpz_export", scope: !3, file: !3, line: 4300, type: !8919, scopeLine: 4302, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !66)
!8919 = !DISubroutineType(types: !8920)
!8920 = !{!49, !49, !8921, !34, !50, !34, !50, !1950}
!8921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !50, size: 64)
!8922 = !DILocalVariable(name: "r", arg: 1, scope: !8918, file: !3, line: 4300, type: !49)
!8923 = !DILocation(line: 4300, column: 19, scope: !8918)
!8924 = !DILocalVariable(name: "countp", arg: 2, scope: !8918, file: !3, line: 4300, type: !8921)
!8925 = !DILocation(line: 4300, column: 30, scope: !8918)
!8926 = !DILocalVariable(name: "order", arg: 3, scope: !8918, file: !3, line: 4300, type: !34)
!8927 = !DILocation(line: 4300, column: 42, scope: !8918)
!8928 = !DILocalVariable(name: "size", arg: 4, scope: !8918, file: !3, line: 4300, type: !50)
!8929 = !DILocation(line: 4300, column: 56, scope: !8918)
!8930 = !DILocalVariable(name: "endian", arg: 5, scope: !8918, file: !3, line: 4300, type: !34)
!8931 = !DILocation(line: 4300, column: 66, scope: !8918)
!8932 = !DILocalVariable(name: "nails", arg: 6, scope: !8918, file: !3, line: 4301, type: !50)
!8933 = !DILocation(line: 4301, column: 13, scope: !8918)
!8934 = !DILocalVariable(name: "u", arg: 7, scope: !8918, file: !3, line: 4301, type: !1950)
!8935 = !DILocation(line: 4301, column: 32, scope: !8918)
!8936 = !DILocalVariable(name: "count", scope: !8918, file: !3, line: 4303, type: !50)
!8937 = !DILocation(line: 4303, column: 10, scope: !8918)
!8938 = !DILocalVariable(name: "un", scope: !8918, file: !3, line: 4304, type: !184)
!8939 = !DILocation(line: 4304, column: 13, scope: !8918)
!8940 = !DILocation(line: 4306, column: 7, scope: !8941)
!8941 = distinct !DILexicalBlock(scope: !8918, file: !3, line: 4306, column: 7)
!8942 = !DILocation(line: 4306, column: 13, scope: !8941)
!8943 = !DILocation(line: 4306, column: 7, scope: !8918)
!8944 = !DILocation(line: 4307, column: 5, scope: !8941)
!8945 = !DILocation(line: 4313, column: 8, scope: !8918)
!8946 = !DILocation(line: 4313, column: 11, scope: !8918)
!8947 = !DILocation(line: 4313, column: 6, scope: !8918)
!8948 = !DILocation(line: 4314, column: 9, scope: !8918)
!8949 = !DILocation(line: 4315, column: 7, scope: !8950)
!8950 = distinct !DILexicalBlock(scope: !8918, file: !3, line: 4315, column: 7)
!8951 = !DILocation(line: 4315, column: 10, scope: !8950)
!8952 = !DILocation(line: 4315, column: 7, scope: !8918)
!8953 = !DILocalVariable(name: "k", scope: !8954, file: !3, line: 4317, type: !50)
!8954 = distinct !DILexicalBlock(scope: !8950, file: !3, line: 4316, column: 5)
!8955 = !DILocation(line: 4317, column: 14, scope: !8954)
!8956 = !DILocalVariable(name: "p", scope: !8954, file: !3, line: 4318, type: !36)
!8957 = !DILocation(line: 4318, column: 22, scope: !8954)
!8958 = !DILocalVariable(name: "word_step", scope: !8954, file: !3, line: 4319, type: !39)
!8959 = !DILocation(line: 4319, column: 17, scope: !8954)
!8960 = !DILocalVariable(name: "limb", scope: !8954, file: !3, line: 4321, type: !27)
!8961 = !DILocation(line: 4321, column: 17, scope: !8954)
!8962 = !DILocalVariable(name: "bytes", scope: !8954, file: !3, line: 4323, type: !50)
!8963 = !DILocation(line: 4323, column: 14, scope: !8954)
!8964 = !DILocalVariable(name: "i", scope: !8954, file: !3, line: 4325, type: !184)
!8965 = !DILocation(line: 4325, column: 17, scope: !8954)
!8966 = !DILocation(line: 4327, column: 12, scope: !8954)
!8967 = !DILocation(line: 4327, column: 10, scope: !8954)
!8968 = !DILocation(line: 4330, column: 14, scope: !8954)
!8969 = !DILocation(line: 4330, column: 17, scope: !8954)
!8970 = !DILocation(line: 4330, column: 23, scope: !8954)
!8971 = !DILocation(line: 4330, column: 25, scope: !8954)
!8972 = !DILocation(line: 4330, column: 12, scope: !8954)
!8973 = !DILocation(line: 4333, column: 9, scope: !8954)
!8974 = !DILocation(line: 4334, column: 7, scope: !8954)
!8975 = !DILocation(line: 4335, column: 3, scope: !8976)
!8976 = distinct !DILexicalBlock(scope: !8954, file: !3, line: 4334, column: 10)
!8977 = !DILocation(line: 4335, column: 12, scope: !8976)
!8978 = !DILocation(line: 4336, column: 7, scope: !8976)
!8979 = !DILocation(line: 4336, column: 16, scope: !8954)
!8980 = !DILocation(line: 4336, column: 21, scope: !8954)
!8981 = distinct !{!8981, !8974, !8982}
!8982 = !DILocation(line: 4336, column: 25, scope: !8954)
!8983 = !DILocation(line: 4338, column: 16, scope: !8954)
!8984 = !DILocation(line: 4338, column: 21, scope: !8954)
!8985 = !DILocation(line: 4338, column: 23, scope: !8954)
!8986 = !DILocation(line: 4338, column: 27, scope: !8954)
!8987 = !DILocation(line: 4338, column: 18, scope: !8954)
!8988 = !DILocation(line: 4338, column: 50, scope: !8954)
!8989 = !DILocation(line: 4338, column: 48, scope: !8954)
!8990 = !DILocation(line: 4338, column: 55, scope: !8954)
!8991 = !DILocation(line: 4338, column: 62, scope: !8954)
!8992 = !DILocation(line: 4338, column: 60, scope: !8954)
!8993 = !DILocation(line: 4338, column: 13, scope: !8954)
!8994 = !DILocation(line: 4340, column: 12, scope: !8995)
!8995 = distinct !DILexicalBlock(scope: !8954, file: !3, line: 4340, column: 11)
!8996 = !DILocation(line: 4340, column: 11, scope: !8954)
!8997 = !DILocation(line: 4341, column: 6, scope: !8995)
!8998 = !DILocation(line: 4341, column: 4, scope: !8995)
!8999 = !DILocation(line: 4341, column: 2, scope: !8995)
!9000 = !DILocation(line: 4343, column: 11, scope: !9001)
!9001 = distinct !DILexicalBlock(scope: !8954, file: !3, line: 4343, column: 11)
!9002 = !DILocation(line: 4343, column: 18, scope: !9001)
!9003 = !DILocation(line: 4343, column: 11, scope: !8954)
!9004 = !DILocation(line: 4344, column: 11, scope: !9001)
!9005 = !DILocation(line: 4344, column: 9, scope: !9001)
!9006 = !DILocation(line: 4344, column: 2, scope: !9001)
!9007 = !DILocation(line: 4346, column: 29, scope: !8954)
!9008 = !DILocation(line: 4346, column: 9, scope: !8954)
!9009 = !DILocation(line: 4348, column: 20, scope: !8954)
!9010 = !DILocation(line: 4348, column: 29, scope: !8954)
!9011 = !DILocation(line: 4348, column: 26, scope: !8954)
!9012 = !DILocation(line: 4348, column: 19, scope: !8954)
!9013 = !DILocation(line: 4348, column: 43, scope: !8954)
!9014 = !DILocation(line: 4348, column: 41, scope: !8954)
!9015 = !DILocation(line: 4348, column: 17, scope: !8954)
!9016 = !DILocation(line: 4352, column: 11, scope: !9017)
!9017 = distinct !DILexicalBlock(scope: !8954, file: !3, line: 4352, column: 11)
!9018 = !DILocation(line: 4352, column: 17, scope: !9017)
!9019 = !DILocation(line: 4352, column: 11, scope: !8954)
!9020 = !DILocation(line: 4354, column: 9, scope: !9021)
!9021 = distinct !DILexicalBlock(scope: !9017, file: !3, line: 4353, column: 2)
!9022 = !DILocation(line: 4354, column: 17, scope: !9021)
!9023 = !DILocation(line: 4354, column: 23, scope: !9021)
!9024 = !DILocation(line: 4354, column: 14, scope: !9021)
!9025 = !DILocation(line: 4354, column: 6, scope: !9021)
!9026 = !DILocation(line: 4355, column: 18, scope: !9021)
!9027 = !DILocation(line: 4355, column: 16, scope: !9021)
!9028 = !DILocation(line: 4355, column: 14, scope: !9021)
!9029 = !DILocation(line: 4356, column: 2, scope: !9021)
!9030 = !DILocation(line: 4359, column: 11, scope: !9031)
!9031 = distinct !DILexicalBlock(scope: !8954, file: !3, line: 4359, column: 11)
!9032 = !DILocation(line: 4359, column: 18, scope: !9031)
!9033 = !DILocation(line: 4359, column: 11, scope: !8954)
!9034 = !DILocation(line: 4360, column: 8, scope: !9031)
!9035 = !DILocation(line: 4360, column: 13, scope: !9031)
!9036 = !DILocation(line: 4360, column: 4, scope: !9031)
!9037 = !DILocation(line: 4360, column: 2, scope: !9031)
!9038 = !DILocation(line: 4362, column: 18, scope: !9039)
!9039 = distinct !DILexicalBlock(scope: !8954, file: !3, line: 4362, column: 7)
!9040 = !DILocation(line: 4362, column: 25, scope: !9039)
!9041 = !DILocation(line: 4362, column: 32, scope: !9039)
!9042 = !DILocation(line: 4362, column: 12, scope: !9039)
!9043 = !DILocation(line: 4362, column: 37, scope: !9044)
!9044 = distinct !DILexicalBlock(scope: !9039, file: !3, line: 4362, column: 7)
!9045 = !DILocation(line: 4362, column: 41, scope: !9044)
!9046 = !DILocation(line: 4362, column: 39, scope: !9044)
!9047 = !DILocation(line: 4362, column: 7, scope: !9039)
!9048 = !DILocalVariable(name: "j", scope: !9049, file: !3, line: 4364, type: !50)
!9049 = distinct !DILexicalBlock(scope: !9044, file: !3, line: 4363, column: 2)
!9050 = !DILocation(line: 4364, column: 11, scope: !9049)
!9051 = !DILocation(line: 4365, column: 11, scope: !9052)
!9052 = distinct !DILexicalBlock(scope: !9049, file: !3, line: 4365, column: 4)
!9053 = !DILocation(line: 4365, column: 9, scope: !9052)
!9054 = !DILocation(line: 4365, column: 16, scope: !9055)
!9055 = distinct !DILexicalBlock(scope: !9052, file: !3, line: 4365, column: 4)
!9056 = !DILocation(line: 4365, column: 20, scope: !9055)
!9057 = !DILocation(line: 4365, column: 18, scope: !9055)
!9058 = !DILocation(line: 4365, column: 4, scope: !9052)
!9059 = !DILocation(line: 4367, column: 12, scope: !9060)
!9060 = distinct !DILexicalBlock(scope: !9061, file: !3, line: 4367, column: 12)
!9061 = distinct !DILexicalBlock(scope: !9055, file: !3, line: 4366, column: 6)
!9062 = !DILocation(line: 4367, column: 18, scope: !9060)
!9063 = !DILocation(line: 4367, column: 12, scope: !9061)
!9064 = !DILocation(line: 4369, column: 9, scope: !9065)
!9065 = distinct !DILexicalBlock(scope: !9066, file: !3, line: 4369, column: 9)
!9066 = distinct !DILexicalBlock(scope: !9060, file: !3, line: 4368, column: 3)
!9067 = !DILocation(line: 4369, column: 13, scope: !9065)
!9068 = !DILocation(line: 4369, column: 11, scope: !9065)
!9069 = !DILocation(line: 4369, column: 9, scope: !9066)
!9070 = !DILocation(line: 4370, column: 14, scope: !9065)
!9071 = !DILocation(line: 4370, column: 17, scope: !9065)
!9072 = !DILocation(line: 4370, column: 24, scope: !9065)
!9073 = !DILocation(line: 4370, column: 12, scope: !9065)
!9074 = !DILocation(line: 4370, column: 7, scope: !9065)
!9075 = !DILocation(line: 4371, column: 11, scope: !9066)
!9076 = !DILocation(line: 4372, column: 3, scope: !9066)
!9077 = !DILocation(line: 4373, column: 13, scope: !9061)
!9078 = !DILocation(line: 4373, column: 9, scope: !9061)
!9079 = !DILocation(line: 4373, column: 11, scope: !9061)
!9080 = !DILocation(line: 4374, column: 13, scope: !9061)
!9081 = !DILocation(line: 4375, column: 13, scope: !9061)
!9082 = !DILocation(line: 4376, column: 6, scope: !9061)
!9083 = !DILocation(line: 4365, column: 27, scope: !9055)
!9084 = !DILocation(line: 4365, column: 48, scope: !9055)
!9085 = !DILocation(line: 4365, column: 36, scope: !9055)
!9086 = !DILocation(line: 4365, column: 33, scope: !9055)
!9087 = !DILocation(line: 4365, column: 4, scope: !9055)
!9088 = distinct !{!9088, !9058, !9089}
!9089 = !DILocation(line: 4376, column: 6, scope: !9052)
!9090 = !DILocation(line: 4377, column: 2, scope: !9049)
!9091 = !DILocation(line: 4362, column: 49, scope: !9044)
!9092 = !DILocation(line: 4362, column: 58, scope: !9044)
!9093 = !DILocation(line: 4362, column: 55, scope: !9044)
!9094 = !DILocation(line: 4362, column: 7, scope: !9044)
!9095 = distinct !{!9095, !9047, !9096}
!9096 = !DILocation(line: 4377, column: 2, scope: !9039)
!9097 = !DILocation(line: 4380, column: 5, scope: !8954)
!9098 = !DILocation(line: 4382, column: 7, scope: !9099)
!9099 = distinct !DILexicalBlock(scope: !8918, file: !3, line: 4382, column: 7)
!9100 = !DILocation(line: 4382, column: 7, scope: !8918)
!9101 = !DILocation(line: 4383, column: 15, scope: !9099)
!9102 = !DILocation(line: 4383, column: 6, scope: !9099)
!9103 = !DILocation(line: 4383, column: 13, scope: !9099)
!9104 = !DILocation(line: 4383, column: 5, scope: !9099)
!9105 = !DILocation(line: 4385, column: 10, scope: !8918)
!9106 = !DILocation(line: 4385, column: 3, scope: !8918)
!9107 = distinct !DISubprogram(name: "mpn_limb_get_str", scope: !3, file: !3, line: 1189, type: !9108, scopeLine: 1191, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!9108 = !DISubroutineType(types: !9109)
!9109 = !{!50, !36, !27, !6099}
!9110 = !DILocalVariable(name: "sp", arg: 1, scope: !9107, file: !3, line: 1189, type: !36)
!9111 = !DILocation(line: 1189, column: 34, scope: !9107)
!9112 = !DILocalVariable(name: "w", arg: 2, scope: !9107, file: !3, line: 1189, type: !27)
!9113 = !DILocation(line: 1189, column: 48, scope: !9107)
!9114 = !DILocalVariable(name: "binv", arg: 3, scope: !9107, file: !3, line: 1190, type: !6099)
!9115 = !DILocation(line: 1190, column: 35, scope: !9107)
!9116 = !DILocalVariable(name: "i", scope: !9107, file: !3, line: 1192, type: !184)
!9117 = !DILocation(line: 1192, column: 13, scope: !9107)
!9118 = !DILocation(line: 1193, column: 10, scope: !9119)
!9119 = distinct !DILexicalBlock(scope: !9107, file: !3, line: 1193, column: 3)
!9120 = !DILocation(line: 1193, column: 8, scope: !9119)
!9121 = !DILocation(line: 1193, column: 15, scope: !9122)
!9122 = distinct !DILexicalBlock(scope: !9119, file: !3, line: 1193, column: 3)
!9123 = !DILocation(line: 1193, column: 17, scope: !9122)
!9124 = !DILocation(line: 1193, column: 3, scope: !9119)
!9125 = !DILocalVariable(name: "h", scope: !9126, file: !3, line: 1195, type: !27)
!9126 = distinct !DILexicalBlock(scope: !9122, file: !3, line: 1194, column: 5)
!9127 = !DILocation(line: 1195, column: 17, scope: !9126)
!9128 = !DILocalVariable(name: "l", scope: !9126, file: !3, line: 1195, type: !27)
!9129 = !DILocation(line: 1195, column: 20, scope: !9126)
!9130 = !DILocalVariable(name: "r", scope: !9126, file: !3, line: 1195, type: !27)
!9131 = !DILocation(line: 1195, column: 23, scope: !9126)
!9132 = !DILocation(line: 1197, column: 11, scope: !9126)
!9133 = !DILocation(line: 1197, column: 33, scope: !9126)
!9134 = !DILocation(line: 1197, column: 39, scope: !9126)
!9135 = !DILocation(line: 1197, column: 31, scope: !9126)
!9136 = !DILocation(line: 1197, column: 13, scope: !9126)
!9137 = !DILocation(line: 1197, column: 9, scope: !9126)
!9138 = !DILocation(line: 1198, column: 11, scope: !9126)
!9139 = !DILocation(line: 1198, column: 16, scope: !9126)
!9140 = !DILocation(line: 1198, column: 22, scope: !9126)
!9141 = !DILocation(line: 1198, column: 13, scope: !9126)
!9142 = !DILocation(line: 1198, column: 9, scope: !9126)
!9143 = !DILocation(line: 1200, column: 7, scope: !9126)
!9144 = !DILocalVariable(name: "_qh", scope: !9145, file: !3, line: 1200, type: !27)
!9145 = distinct !DILexicalBlock(scope: !9126, file: !3, line: 1200, column: 7)
!9146 = !DILocation(line: 1200, column: 7, scope: !9145)
!9147 = !DILocalVariable(name: "_ql", scope: !9145, file: !3, line: 1200, type: !27)
!9148 = !DILocalVariable(name: "_r", scope: !9145, file: !3, line: 1200, type: !27)
!9149 = !DILocalVariable(name: "_mask", scope: !9145, file: !3, line: 1200, type: !27)
!9150 = !DILocalVariable(name: "__x0", scope: !9151, file: !3, line: 1200, type: !27)
!9151 = distinct !DILexicalBlock(scope: !9145, file: !3, line: 1200, column: 7)
!9152 = !DILocation(line: 1200, column: 7, scope: !9151)
!9153 = !DILocalVariable(name: "__x1", scope: !9151, file: !3, line: 1200, type: !27)
!9154 = !DILocalVariable(name: "__x2", scope: !9151, file: !3, line: 1200, type: !27)
!9155 = !DILocalVariable(name: "__x3", scope: !9151, file: !3, line: 1200, type: !27)
!9156 = !DILocalVariable(name: "__ul", scope: !9151, file: !3, line: 1200, type: !6)
!9157 = !DILocalVariable(name: "__vl", scope: !9151, file: !3, line: 1200, type: !6)
!9158 = !DILocalVariable(name: "__uh", scope: !9151, file: !3, line: 1200, type: !6)
!9159 = !DILocalVariable(name: "__vh", scope: !9151, file: !3, line: 1200, type: !6)
!9160 = !DILocalVariable(name: "__u", scope: !9151, file: !3, line: 1200, type: !27)
!9161 = !DILocalVariable(name: "__v", scope: !9151, file: !3, line: 1200, type: !27)
!9162 = !DILocation(line: 1200, column: 7, scope: !9163)
!9163 = distinct !DILexicalBlock(scope: !9151, file: !3, line: 1200, column: 7)
!9164 = !DILocalVariable(name: "__x", scope: !9165, file: !3, line: 1200, type: !27)
!9165 = distinct !DILexicalBlock(scope: !9145, file: !3, line: 1200, column: 7)
!9166 = !DILocation(line: 1200, column: 7, scope: !9165)
!9167 = !DILocation(line: 1200, column: 7, scope: !9168)
!9168 = distinct !DILexicalBlock(scope: !9145, file: !3, line: 1200, column: 7)
!9169 = !DILocation(line: 1200, column: 7, scope: !9170)
!9170 = distinct !DILexicalBlock(scope: !9168, file: !3, line: 1200, column: 7)
!9171 = !DILocation(line: 1202, column: 13, scope: !9126)
!9172 = !DILocation(line: 1202, column: 19, scope: !9126)
!9173 = !DILocation(line: 1202, column: 9, scope: !9126)
!9174 = !DILocation(line: 1204, column: 15, scope: !9126)
!9175 = !DILocation(line: 1204, column: 7, scope: !9126)
!9176 = !DILocation(line: 1204, column: 10, scope: !9126)
!9177 = !DILocation(line: 1204, column: 13, scope: !9126)
!9178 = !DILocation(line: 1205, column: 5, scope: !9126)
!9179 = !DILocation(line: 1193, column: 23, scope: !9122)
!9180 = !DILocation(line: 1193, column: 3, scope: !9122)
!9181 = distinct !{!9181, !9124, !9182}
!9182 = !DILocation(line: 1205, column: 5, scope: !9119)
!9183 = !DILocation(line: 1206, column: 10, scope: !9107)
!9184 = !DILocation(line: 1206, column: 3, scope: !9107)
!9185 = distinct !DISubprogram(name: "gmp_xrealloc_limbs", scope: !3, file: !3, line: 329, type: !9186, scopeLine: 330, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!9186 = !DISubroutineType(types: !9187)
!9187 = !{!31, !31, !184}
!9188 = !DILocalVariable(name: "old", arg: 1, scope: !9185, file: !3, line: 329, type: !31)
!9189 = !DILocation(line: 329, column: 28, scope: !9185)
!9190 = !DILocalVariable(name: "size", arg: 2, scope: !9185, file: !3, line: 329, type: !184)
!9191 = !DILocation(line: 329, column: 43, scope: !9185)
!9192 = !DILocation(line: 332, column: 12, scope: !9185)
!9193 = !DILocation(line: 332, column: 34, scope: !9185)
!9194 = !DILocation(line: 332, column: 42, scope: !9185)
!9195 = !DILocation(line: 332, column: 47, scope: !9185)
!9196 = !DILocation(line: 332, column: 10, scope: !9185)
!9197 = !DILocation(line: 332, column: 3, scope: !9185)
!9198 = distinct !DISubprogram(name: "mpn_div_qr", scope: !3, file: !3, line: 1085, type: !9199, scopeLine: 1086, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!9199 = !DISubroutineType(types: !9200)
!9200 = !{null, !31, !31, !184, !181, !184}
!9201 = !DILocalVariable(name: "qp", arg: 1, scope: !9198, file: !3, line: 1085, type: !31)
!9202 = !DILocation(line: 1085, column: 20, scope: !9198)
!9203 = !DILocalVariable(name: "np", arg: 2, scope: !9198, file: !3, line: 1085, type: !31)
!9204 = !DILocation(line: 1085, column: 31, scope: !9198)
!9205 = !DILocalVariable(name: "nn", arg: 3, scope: !9198, file: !3, line: 1085, type: !184)
!9206 = !DILocation(line: 1085, column: 45, scope: !9198)
!9207 = !DILocalVariable(name: "dp", arg: 4, scope: !9198, file: !3, line: 1085, type: !181)
!9208 = !DILocation(line: 1085, column: 59, scope: !9198)
!9209 = !DILocalVariable(name: "dn", arg: 5, scope: !9198, file: !3, line: 1085, type: !184)
!9210 = !DILocation(line: 1085, column: 73, scope: !9198)
!9211 = !DILocalVariable(name: "inv", scope: !9198, file: !3, line: 1087, type: !1481)
!9212 = !DILocation(line: 1087, column: 26, scope: !9198)
!9213 = !DILocalVariable(name: "tp", scope: !9198, file: !3, line: 1088, type: !31)
!9214 = !DILocation(line: 1088, column: 10, scope: !9198)
!9215 = !DILocation(line: 1093, column: 28, scope: !9198)
!9216 = !DILocation(line: 1093, column: 32, scope: !9198)
!9217 = !DILocation(line: 1093, column: 3, scope: !9198)
!9218 = !DILocation(line: 1094, column: 7, scope: !9219)
!9219 = distinct !DILexicalBlock(scope: !9198, file: !3, line: 1094, column: 7)
!9220 = !DILocation(line: 1094, column: 10, scope: !9219)
!9221 = !DILocation(line: 1094, column: 14, scope: !9219)
!9222 = !DILocation(line: 1094, column: 21, scope: !9219)
!9223 = !DILocation(line: 1094, column: 27, scope: !9219)
!9224 = !DILocation(line: 1094, column: 7, scope: !9198)
!9225 = !DILocation(line: 1096, column: 30, scope: !9226)
!9226 = distinct !DILexicalBlock(scope: !9219, file: !3, line: 1095, column: 5)
!9227 = !DILocation(line: 1096, column: 12, scope: !9226)
!9228 = !DILocation(line: 1096, column: 10, scope: !9226)
!9229 = !DILocation(line: 1097, column: 7, scope: !9226)
!9230 = !DILocalVariable(name: "__cy", scope: !9231, file: !3, line: 1097, type: !27)
!9231 = distinct !DILexicalBlock(scope: !9226, file: !3, line: 1097, column: 7)
!9232 = !DILocation(line: 1097, column: 7, scope: !9231)
!9233 = !DILocation(line: 1098, column: 12, scope: !9226)
!9234 = !DILocation(line: 1098, column: 10, scope: !9226)
!9235 = !DILocation(line: 1099, column: 5, scope: !9226)
!9236 = !DILocation(line: 1100, column: 22, scope: !9198)
!9237 = !DILocation(line: 1100, column: 26, scope: !9198)
!9238 = !DILocation(line: 1100, column: 30, scope: !9198)
!9239 = !DILocation(line: 1100, column: 34, scope: !9198)
!9240 = !DILocation(line: 1100, column: 38, scope: !9198)
!9241 = !DILocation(line: 1100, column: 3, scope: !9198)
!9242 = !DILocation(line: 1101, column: 7, scope: !9243)
!9243 = distinct !DILexicalBlock(scope: !9198, file: !3, line: 1101, column: 7)
!9244 = !DILocation(line: 1101, column: 7, scope: !9198)
!9245 = !DILocation(line: 1102, column: 5, scope: !9243)
!9246 = !DILocation(line: 1103, column: 1, scope: !9198)
!9247 = distinct !DISubprogram(name: "mpn_div_qr_2_invert", scope: !3, file: !3, line: 809, type: !9248, scopeLine: 811, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!9248 = !DISubroutineType(types: !9249)
!9249 = !{null, !5999, !27, !27}
!9250 = !DILocalVariable(name: "inv", arg: 1, scope: !9247, file: !3, line: 809, type: !5999)
!9251 = !DILocation(line: 809, column: 46, scope: !9247)
!9252 = !DILocalVariable(name: "d1", arg: 2, scope: !9247, file: !3, line: 810, type: !27)
!9253 = !DILocation(line: 810, column: 18, scope: !9247)
!9254 = !DILocalVariable(name: "d0", arg: 3, scope: !9247, file: !3, line: 810, type: !27)
!9255 = !DILocation(line: 810, column: 32, scope: !9247)
!9256 = !DILocalVariable(name: "shift", scope: !9247, file: !3, line: 812, type: !6)
!9257 = !DILocation(line: 812, column: 12, scope: !9247)
!9258 = !DILocation(line: 815, column: 3, scope: !9247)
!9259 = !DILocalVariable(name: "__clz_x", scope: !9260, file: !3, line: 815, type: !27)
!9260 = distinct !DILexicalBlock(scope: !9247, file: !3, line: 815, column: 3)
!9261 = !DILocation(line: 815, column: 3, scope: !9260)
!9262 = !DILocalVariable(name: "__clz_c", scope: !9260, file: !3, line: 815, type: !6)
!9263 = !DILocation(line: 815, column: 3, scope: !9264)
!9264 = distinct !DILexicalBlock(scope: !9260, file: !3, line: 815, column: 3)
!9265 = !DILocation(line: 815, column: 3, scope: !9266)
!9266 = distinct !DILexicalBlock(scope: !9264, file: !3, line: 815, column: 3)
!9267 = distinct !{!9267, !9263, !9263}
!9268 = !DILocation(line: 815, column: 3, scope: !9269)
!9269 = distinct !DILexicalBlock(scope: !9270, file: !3, line: 815, column: 3)
!9270 = distinct !DILexicalBlock(scope: !9260, file: !3, line: 815, column: 3)
!9271 = !DILocation(line: 815, column: 3, scope: !9270)
!9272 = distinct !{!9272, !9271, !9271}
!9273 = !DILocation(line: 816, column: 16, scope: !9247)
!9274 = !DILocation(line: 816, column: 3, scope: !9247)
!9275 = !DILocation(line: 816, column: 8, scope: !9247)
!9276 = !DILocation(line: 816, column: 14, scope: !9247)
!9277 = !DILocation(line: 817, column: 7, scope: !9278)
!9278 = distinct !DILexicalBlock(scope: !9247, file: !3, line: 817, column: 7)
!9279 = !DILocation(line: 817, column: 13, scope: !9278)
!9280 = !DILocation(line: 817, column: 7, scope: !9247)
!9281 = !DILocation(line: 819, column: 13, scope: !9282)
!9282 = distinct !DILexicalBlock(scope: !9278, file: !3, line: 818, column: 5)
!9283 = !DILocation(line: 819, column: 19, scope: !9282)
!9284 = !DILocation(line: 819, column: 16, scope: !9282)
!9285 = !DILocation(line: 819, column: 29, scope: !9282)
!9286 = !DILocation(line: 819, column: 52, scope: !9282)
!9287 = !DILocation(line: 819, column: 50, scope: !9282)
!9288 = !DILocation(line: 819, column: 32, scope: !9282)
!9289 = !DILocation(line: 819, column: 26, scope: !9282)
!9290 = !DILocation(line: 819, column: 10, scope: !9282)
!9291 = !DILocation(line: 820, column: 14, scope: !9282)
!9292 = !DILocation(line: 820, column: 10, scope: !9282)
!9293 = !DILocation(line: 821, column: 5, scope: !9282)
!9294 = !DILocation(line: 822, column: 13, scope: !9247)
!9295 = !DILocation(line: 822, column: 3, scope: !9247)
!9296 = !DILocation(line: 822, column: 8, scope: !9247)
!9297 = !DILocation(line: 822, column: 11, scope: !9247)
!9298 = !DILocation(line: 823, column: 13, scope: !9247)
!9299 = !DILocation(line: 823, column: 3, scope: !9247)
!9300 = !DILocation(line: 823, column: 8, scope: !9247)
!9301 = !DILocation(line: 823, column: 11, scope: !9247)
!9302 = !DILocation(line: 824, column: 30, scope: !9247)
!9303 = !DILocation(line: 824, column: 34, scope: !9247)
!9304 = !DILocation(line: 824, column: 13, scope: !9247)
!9305 = !DILocation(line: 824, column: 3, scope: !9247)
!9306 = !DILocation(line: 824, column: 8, scope: !9247)
!9307 = !DILocation(line: 824, column: 11, scope: !9247)
!9308 = !DILocation(line: 825, column: 1, scope: !9247)
!9309 = distinct !DISubprogram(name: "mpn_div_qr_2_preinv", scope: !3, file: !3, line: 924, type: !9310, scopeLine: 926, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!9310 = !DISubroutineType(types: !9311)
!9311 = !{null, !31, !31, !181, !184, !6099}
!9312 = !DILocalVariable(name: "qp", arg: 1, scope: !9309, file: !3, line: 924, type: !31)
!9313 = !DILocation(line: 924, column: 29, scope: !9309)
!9314 = !DILocalVariable(name: "rp", arg: 2, scope: !9309, file: !3, line: 924, type: !31)
!9315 = !DILocation(line: 924, column: 40, scope: !9309)
!9316 = !DILocalVariable(name: "np", arg: 3, scope: !9309, file: !3, line: 924, type: !181)
!9317 = !DILocation(line: 924, column: 54, scope: !9309)
!9318 = !DILocalVariable(name: "nn", arg: 4, scope: !9309, file: !3, line: 924, type: !184)
!9319 = !DILocation(line: 924, column: 68, scope: !9309)
!9320 = !DILocalVariable(name: "inv", arg: 5, scope: !9309, file: !3, line: 925, type: !6099)
!9321 = !DILocation(line: 925, column: 38, scope: !9309)
!9322 = !DILocalVariable(name: "shift", scope: !9309, file: !3, line: 927, type: !6)
!9323 = !DILocation(line: 927, column: 12, scope: !9309)
!9324 = !DILocalVariable(name: "i", scope: !9309, file: !3, line: 928, type: !184)
!9325 = !DILocation(line: 928, column: 13, scope: !9309)
!9326 = !DILocalVariable(name: "d1", scope: !9309, file: !3, line: 929, type: !27)
!9327 = !DILocation(line: 929, column: 13, scope: !9309)
!9328 = !DILocalVariable(name: "d0", scope: !9309, file: !3, line: 929, type: !27)
!9329 = !DILocation(line: 929, column: 17, scope: !9309)
!9330 = !DILocalVariable(name: "di", scope: !9309, file: !3, line: 929, type: !27)
!9331 = !DILocation(line: 929, column: 21, scope: !9309)
!9332 = !DILocalVariable(name: "r1", scope: !9309, file: !3, line: 929, type: !27)
!9333 = !DILocation(line: 929, column: 25, scope: !9309)
!9334 = !DILocalVariable(name: "r0", scope: !9309, file: !3, line: 929, type: !27)
!9335 = !DILocation(line: 929, column: 29, scope: !9309)
!9336 = !DILocalVariable(name: "tp", scope: !9309, file: !3, line: 930, type: !31)
!9337 = !DILocation(line: 930, column: 10, scope: !9309)
!9338 = !DILocation(line: 933, column: 11, scope: !9309)
!9339 = !DILocation(line: 933, column: 16, scope: !9309)
!9340 = !DILocation(line: 933, column: 9, scope: !9309)
!9341 = !DILocation(line: 934, column: 8, scope: !9309)
!9342 = !DILocation(line: 934, column: 13, scope: !9309)
!9343 = !DILocation(line: 934, column: 6, scope: !9309)
!9344 = !DILocation(line: 935, column: 8, scope: !9309)
!9345 = !DILocation(line: 935, column: 13, scope: !9309)
!9346 = !DILocation(line: 935, column: 6, scope: !9309)
!9347 = !DILocation(line: 936, column: 8, scope: !9309)
!9348 = !DILocation(line: 936, column: 13, scope: !9309)
!9349 = !DILocation(line: 936, column: 6, scope: !9309)
!9350 = !DILocation(line: 938, column: 7, scope: !9351)
!9351 = distinct !DILexicalBlock(scope: !9309, file: !3, line: 938, column: 7)
!9352 = !DILocation(line: 938, column: 13, scope: !9351)
!9353 = !DILocation(line: 938, column: 7, scope: !9309)
!9354 = !DILocation(line: 940, column: 30, scope: !9355)
!9355 = distinct !DILexicalBlock(scope: !9351, file: !3, line: 939, column: 5)
!9356 = !DILocation(line: 940, column: 12, scope: !9355)
!9357 = !DILocation(line: 940, column: 10, scope: !9355)
!9358 = !DILocation(line: 941, column: 24, scope: !9355)
!9359 = !DILocation(line: 941, column: 28, scope: !9355)
!9360 = !DILocation(line: 941, column: 32, scope: !9355)
!9361 = !DILocation(line: 941, column: 36, scope: !9355)
!9362 = !DILocation(line: 941, column: 12, scope: !9355)
!9363 = !DILocation(line: 941, column: 10, scope: !9355)
!9364 = !DILocation(line: 942, column: 12, scope: !9355)
!9365 = !DILocation(line: 942, column: 10, scope: !9355)
!9366 = !DILocation(line: 943, column: 5, scope: !9355)
!9367 = !DILocation(line: 945, column: 8, scope: !9351)
!9368 = !DILocation(line: 947, column: 8, scope: !9309)
!9369 = !DILocation(line: 947, column: 11, scope: !9309)
!9370 = !DILocation(line: 947, column: 14, scope: !9309)
!9371 = !DILocation(line: 947, column: 6, scope: !9309)
!9372 = !DILocation(line: 949, column: 7, scope: !9309)
!9373 = !DILocation(line: 949, column: 10, scope: !9309)
!9374 = !DILocation(line: 949, column: 5, scope: !9309)
!9375 = !DILocation(line: 950, column: 3, scope: !9309)
!9376 = !DILocalVariable(name: "n0", scope: !9377, file: !3, line: 952, type: !27)
!9377 = distinct !DILexicalBlock(scope: !9309, file: !3, line: 951, column: 5)
!9378 = !DILocation(line: 952, column: 17, scope: !9377)
!9379 = !DILocalVariable(name: "q", scope: !9377, file: !3, line: 952, type: !27)
!9380 = !DILocation(line: 952, column: 21, scope: !9377)
!9381 = !DILocation(line: 953, column: 12, scope: !9377)
!9382 = !DILocation(line: 953, column: 15, scope: !9377)
!9383 = !DILocation(line: 953, column: 10, scope: !9377)
!9384 = !DILocation(line: 954, column: 7, scope: !9377)
!9385 = !DILocalVariable(name: "_q0", scope: !9386, file: !3, line: 954, type: !27)
!9386 = distinct !DILexicalBlock(scope: !9377, file: !3, line: 954, column: 7)
!9387 = !DILocation(line: 954, column: 7, scope: !9386)
!9388 = !DILocalVariable(name: "_t1", scope: !9386, file: !3, line: 954, type: !27)
!9389 = !DILocalVariable(name: "_t0", scope: !9386, file: !3, line: 954, type: !27)
!9390 = !DILocalVariable(name: "_mask", scope: !9386, file: !3, line: 954, type: !27)
!9391 = !DILocalVariable(name: "__x0", scope: !9392, file: !3, line: 954, type: !27)
!9392 = distinct !DILexicalBlock(scope: !9386, file: !3, line: 954, column: 7)
!9393 = !DILocation(line: 954, column: 7, scope: !9392)
!9394 = !DILocalVariable(name: "__x1", scope: !9392, file: !3, line: 954, type: !27)
!9395 = !DILocalVariable(name: "__x2", scope: !9392, file: !3, line: 954, type: !27)
!9396 = !DILocalVariable(name: "__x3", scope: !9392, file: !3, line: 954, type: !27)
!9397 = !DILocalVariable(name: "__ul", scope: !9392, file: !3, line: 954, type: !6)
!9398 = !DILocalVariable(name: "__vl", scope: !9392, file: !3, line: 954, type: !6)
!9399 = !DILocalVariable(name: "__uh", scope: !9392, file: !3, line: 954, type: !6)
!9400 = !DILocalVariable(name: "__vh", scope: !9392, file: !3, line: 954, type: !6)
!9401 = !DILocalVariable(name: "__u", scope: !9392, file: !3, line: 954, type: !27)
!9402 = !DILocalVariable(name: "__v", scope: !9392, file: !3, line: 954, type: !27)
!9403 = !DILocation(line: 954, column: 7, scope: !9404)
!9404 = distinct !DILexicalBlock(scope: !9392, file: !3, line: 954, column: 7)
!9405 = !DILocalVariable(name: "__x", scope: !9406, file: !3, line: 954, type: !27)
!9406 = distinct !DILexicalBlock(scope: !9386, file: !3, line: 954, column: 7)
!9407 = !DILocation(line: 954, column: 7, scope: !9406)
!9408 = !DILocalVariable(name: "__x", scope: !9409, file: !3, line: 954, type: !27)
!9409 = distinct !DILexicalBlock(scope: !9386, file: !3, line: 954, column: 7)
!9410 = !DILocation(line: 954, column: 7, scope: !9409)
!9411 = !DILocalVariable(name: "__x0", scope: !9412, file: !3, line: 954, type: !27)
!9412 = distinct !DILexicalBlock(scope: !9386, file: !3, line: 954, column: 7)
!9413 = !DILocation(line: 954, column: 7, scope: !9412)
!9414 = !DILocalVariable(name: "__x1", scope: !9412, file: !3, line: 954, type: !27)
!9415 = !DILocalVariable(name: "__x2", scope: !9412, file: !3, line: 954, type: !27)
!9416 = !DILocalVariable(name: "__x3", scope: !9412, file: !3, line: 954, type: !27)
!9417 = !DILocalVariable(name: "__ul", scope: !9412, file: !3, line: 954, type: !6)
!9418 = !DILocalVariable(name: "__vl", scope: !9412, file: !3, line: 954, type: !6)
!9419 = !DILocalVariable(name: "__uh", scope: !9412, file: !3, line: 954, type: !6)
!9420 = !DILocalVariable(name: "__vh", scope: !9412, file: !3, line: 954, type: !6)
!9421 = !DILocalVariable(name: "__u", scope: !9412, file: !3, line: 954, type: !27)
!9422 = !DILocalVariable(name: "__v", scope: !9412, file: !3, line: 954, type: !27)
!9423 = !DILocation(line: 954, column: 7, scope: !9424)
!9424 = distinct !DILexicalBlock(scope: !9412, file: !3, line: 954, column: 7)
!9425 = !DILocalVariable(name: "__x", scope: !9426, file: !3, line: 954, type: !27)
!9426 = distinct !DILexicalBlock(scope: !9386, file: !3, line: 954, column: 7)
!9427 = !DILocation(line: 954, column: 7, scope: !9426)
!9428 = !DILocalVariable(name: "__x", scope: !9429, file: !3, line: 954, type: !27)
!9429 = distinct !DILexicalBlock(scope: !9386, file: !3, line: 954, column: 7)
!9430 = !DILocation(line: 954, column: 7, scope: !9429)
!9431 = !DILocation(line: 954, column: 7, scope: !9432)
!9432 = distinct !DILexicalBlock(scope: !9386, file: !3, line: 954, column: 7)
!9433 = !DILocation(line: 954, column: 7, scope: !9434)
!9434 = distinct !DILexicalBlock(scope: !9435, file: !3, line: 954, column: 7)
!9435 = distinct !DILexicalBlock(scope: !9432, file: !3, line: 954, column: 7)
!9436 = !DILocation(line: 954, column: 7, scope: !9435)
!9437 = !DILocation(line: 954, column: 7, scope: !9438)
!9438 = distinct !DILexicalBlock(scope: !9434, file: !3, line: 954, column: 7)
!9439 = !DILocalVariable(name: "__x", scope: !9440, file: !3, line: 954, type: !27)
!9440 = distinct !DILexicalBlock(scope: !9438, file: !3, line: 954, column: 7)
!9441 = !DILocation(line: 954, column: 7, scope: !9440)
!9442 = !DILocation(line: 956, column: 11, scope: !9443)
!9443 = distinct !DILexicalBlock(scope: !9377, file: !3, line: 956, column: 11)
!9444 = !DILocation(line: 956, column: 11, scope: !9377)
!9445 = !DILocation(line: 957, column: 10, scope: !9443)
!9446 = !DILocation(line: 957, column: 2, scope: !9443)
!9447 = !DILocation(line: 957, column: 5, scope: !9443)
!9448 = !DILocation(line: 957, column: 8, scope: !9443)
!9449 = !DILocation(line: 958, column: 5, scope: !9377)
!9450 = !DILocation(line: 959, column: 10, scope: !9309)
!9451 = !DILocation(line: 959, column: 14, scope: !9309)
!9452 = distinct !{!9452, !9375, !9453}
!9453 = !DILocation(line: 959, column: 18, scope: !9309)
!9454 = !DILocation(line: 961, column: 7, scope: !9455)
!9455 = distinct !DILexicalBlock(scope: !9309, file: !3, line: 961, column: 7)
!9456 = !DILocation(line: 961, column: 13, scope: !9455)
!9457 = !DILocation(line: 961, column: 7, scope: !9309)
!9458 = !DILocation(line: 964, column: 13, scope: !9459)
!9459 = distinct !DILexicalBlock(scope: !9455, file: !3, line: 962, column: 5)
!9460 = !DILocation(line: 964, column: 19, scope: !9459)
!9461 = !DILocation(line: 964, column: 16, scope: !9459)
!9462 = !DILocation(line: 964, column: 29, scope: !9459)
!9463 = !DILocation(line: 964, column: 52, scope: !9459)
!9464 = !DILocation(line: 964, column: 50, scope: !9459)
!9465 = !DILocation(line: 964, column: 32, scope: !9459)
!9466 = !DILocation(line: 964, column: 26, scope: !9459)
!9467 = !DILocation(line: 964, column: 10, scope: !9459)
!9468 = !DILocation(line: 965, column: 14, scope: !9459)
!9469 = !DILocation(line: 965, column: 10, scope: !9459)
!9470 = !DILocation(line: 967, column: 7, scope: !9459)
!9471 = !DILocation(line: 968, column: 5, scope: !9459)
!9472 = !DILocation(line: 970, column: 11, scope: !9309)
!9473 = !DILocation(line: 970, column: 3, scope: !9309)
!9474 = !DILocation(line: 970, column: 9, scope: !9309)
!9475 = !DILocation(line: 971, column: 11, scope: !9309)
!9476 = !DILocation(line: 971, column: 3, scope: !9309)
!9477 = !DILocation(line: 971, column: 9, scope: !9309)
!9478 = !DILocation(line: 972, column: 1, scope: !9309)
!9479 = distinct !DISubprogram(name: "mpn_div_qr_pi1", scope: !3, file: !3, line: 988, type: !9480, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !66)
!9480 = !DISubroutineType(types: !9481)
!9481 = !{null, !31, !31, !184, !27, !181, !184, !27}
!9482 = !DILocalVariable(name: "qp", arg: 1, scope: !9479, file: !3, line: 988, type: !31)
!9483 = !DILocation(line: 988, column: 24, scope: !9479)
!9484 = !DILocalVariable(name: "np", arg: 2, scope: !9479, file: !3, line: 989, type: !31)
!9485 = !DILocation(line: 989, column: 10, scope: !9479)
!9486 = !DILocalVariable(name: "nn", arg: 3, scope: !9479, file: !3, line: 989, type: !184)
!9487 = !DILocation(line: 989, column: 24, scope: !9479)
!9488 = !DILocalVariable(name: "n1", arg: 4, scope: !9479, file: !3, line: 989, type: !27)
!9489 = !DILocation(line: 989, column: 38, scope: !9479)
!9490 = !DILocalVariable(name: "dp", arg: 5, scope: !9479, file: !3, line: 990, type: !181)
!9491 = !DILocation(line: 990, column: 13, scope: !9479)
!9492 = !DILocalVariable(name: "dn", arg: 6, scope: !9479, file: !3, line: 990, type: !184)
!9493 = !DILocation(line: 990, column: 27, scope: !9479)
!9494 = !DILocalVariable(name: "dinv", arg: 7, scope: !9479, file: !3, line: 991, type: !27)
!9495 = !DILocation(line: 991, column: 13, scope: !9479)
!9496 = !DILocalVariable(name: "i", scope: !9479, file: !3, line: 993, type: !184)
!9497 = !DILocation(line: 993, column: 13, scope: !9479)
!9498 = !DILocalVariable(name: "d1", scope: !9479, file: !3, line: 995, type: !27)
!9499 = !DILocation(line: 995, column: 13, scope: !9479)
!9500 = !DILocalVariable(name: "d0", scope: !9479, file: !3, line: 995, type: !27)
!9501 = !DILocation(line: 995, column: 17, scope: !9479)
!9502 = !DILocalVariable(name: "cy", scope: !9479, file: !3, line: 996, type: !27)
!9503 = !DILocation(line: 996, column: 13, scope: !9479)
!9504 = !DILocalVariable(name: "cy1", scope: !9479, file: !3, line: 996, type: !27)
!9505 = !DILocation(line: 996, column: 17, scope: !9479)
!9506 = !DILocalVariable(name: "q", scope: !9479, file: !3, line: 997, type: !27)
!9507 = !DILocation(line: 997, column: 13, scope: !9479)
!9508 = !DILocation(line: 1002, column: 8, scope: !9479)
!9509 = !DILocation(line: 1002, column: 11, scope: !9479)
!9510 = !DILocation(line: 1002, column: 14, scope: !9479)
!9511 = !DILocation(line: 1002, column: 6, scope: !9479)
!9512 = !DILocation(line: 1003, column: 8, scope: !9479)
!9513 = !DILocation(line: 1003, column: 11, scope: !9479)
!9514 = !DILocation(line: 1003, column: 14, scope: !9479)
!9515 = !DILocation(line: 1003, column: 6, scope: !9479)
!9516 = !DILocation(line: 1012, column: 7, scope: !9479)
!9517 = !DILocation(line: 1012, column: 12, scope: !9479)
!9518 = !DILocation(line: 1012, column: 10, scope: !9479)
!9519 = !DILocation(line: 1012, column: 5, scope: !9479)
!9520 = !DILocation(line: 1013, column: 3, scope: !9479)
!9521 = !DILocalVariable(name: "n0", scope: !9522, file: !3, line: 1015, type: !27)
!9522 = distinct !DILexicalBlock(scope: !9479, file: !3, line: 1014, column: 5)
!9523 = !DILocation(line: 1015, column: 17, scope: !9522)
!9524 = !DILocation(line: 1015, column: 22, scope: !9522)
!9525 = !DILocation(line: 1015, column: 25, scope: !9522)
!9526 = !DILocation(line: 1015, column: 27, scope: !9522)
!9527 = !DILocation(line: 1015, column: 30, scope: !9522)
!9528 = !DILocation(line: 1015, column: 29, scope: !9522)
!9529 = !DILocation(line: 1017, column: 11, scope: !9530)
!9530 = distinct !DILexicalBlock(scope: !9522, file: !3, line: 1017, column: 11)
!9531 = !DILocation(line: 1017, column: 17, scope: !9530)
!9532 = !DILocation(line: 1017, column: 14, scope: !9530)
!9533 = !DILocation(line: 1017, column: 20, scope: !9530)
!9534 = !DILocation(line: 1017, column: 23, scope: !9530)
!9535 = !DILocation(line: 1017, column: 29, scope: !9530)
!9536 = !DILocation(line: 1017, column: 26, scope: !9530)
!9537 = !DILocation(line: 1017, column: 11, scope: !9522)
!9538 = !DILocation(line: 1019, column: 6, scope: !9539)
!9539 = distinct !DILexicalBlock(scope: !9530, file: !3, line: 1018, column: 2)
!9540 = !DILocation(line: 1020, column: 18, scope: !9539)
!9541 = !DILocation(line: 1020, column: 21, scope: !9539)
!9542 = !DILocation(line: 1020, column: 20, scope: !9539)
!9543 = !DILocation(line: 1020, column: 24, scope: !9539)
!9544 = !DILocation(line: 1020, column: 28, scope: !9539)
!9545 = !DILocation(line: 1020, column: 32, scope: !9539)
!9546 = !DILocation(line: 1020, column: 4, scope: !9539)
!9547 = !DILocation(line: 1021, column: 9, scope: !9539)
!9548 = !DILocation(line: 1021, column: 12, scope: !9539)
!9549 = !DILocation(line: 1021, column: 14, scope: !9539)
!9550 = !DILocation(line: 1021, column: 17, scope: !9539)
!9551 = !DILocation(line: 1021, column: 16, scope: !9539)
!9552 = !DILocation(line: 1021, column: 7, scope: !9539)
!9553 = !DILocation(line: 1022, column: 2, scope: !9539)
!9554 = !DILocation(line: 1025, column: 4, scope: !9555)
!9555 = distinct !DILexicalBlock(scope: !9530, file: !3, line: 1024, column: 2)
!9556 = !DILocalVariable(name: "_q0", scope: !9557, file: !3, line: 1025, type: !27)
!9557 = distinct !DILexicalBlock(scope: !9555, file: !3, line: 1025, column: 4)
!9558 = !DILocation(line: 1025, column: 4, scope: !9557)
!9559 = !DILocalVariable(name: "_t1", scope: !9557, file: !3, line: 1025, type: !27)
!9560 = !DILocalVariable(name: "_t0", scope: !9557, file: !3, line: 1025, type: !27)
!9561 = !DILocalVariable(name: "_mask", scope: !9557, file: !3, line: 1025, type: !27)
!9562 = !DILocalVariable(name: "__x0", scope: !9563, file: !3, line: 1025, type: !27)
!9563 = distinct !DILexicalBlock(scope: !9557, file: !3, line: 1025, column: 4)
!9564 = !DILocation(line: 1025, column: 4, scope: !9563)
!9565 = !DILocalVariable(name: "__x1", scope: !9563, file: !3, line: 1025, type: !27)
!9566 = !DILocalVariable(name: "__x2", scope: !9563, file: !3, line: 1025, type: !27)
!9567 = !DILocalVariable(name: "__x3", scope: !9563, file: !3, line: 1025, type: !27)
!9568 = !DILocalVariable(name: "__ul", scope: !9563, file: !3, line: 1025, type: !6)
!9569 = !DILocalVariable(name: "__vl", scope: !9563, file: !3, line: 1025, type: !6)
!9570 = !DILocalVariable(name: "__uh", scope: !9563, file: !3, line: 1025, type: !6)
!9571 = !DILocalVariable(name: "__vh", scope: !9563, file: !3, line: 1025, type: !6)
!9572 = !DILocalVariable(name: "__u", scope: !9563, file: !3, line: 1025, type: !27)
!9573 = !DILocalVariable(name: "__v", scope: !9563, file: !3, line: 1025, type: !27)
!9574 = !DILocation(line: 1025, column: 4, scope: !9575)
!9575 = distinct !DILexicalBlock(scope: !9563, file: !3, line: 1025, column: 4)
!9576 = !DILocalVariable(name: "__x", scope: !9577, file: !3, line: 1025, type: !27)
!9577 = distinct !DILexicalBlock(scope: !9557, file: !3, line: 1025, column: 4)
!9578 = !DILocation(line: 1025, column: 4, scope: !9577)
!9579 = !DILocalVariable(name: "__x", scope: !9580, file: !3, line: 1025, type: !27)
!9580 = distinct !DILexicalBlock(scope: !9557, file: !3, line: 1025, column: 4)
!9581 = !DILocation(line: 1025, column: 4, scope: !9580)
!9582 = !DILocalVariable(name: "__x0", scope: !9583, file: !3, line: 1025, type: !27)
!9583 = distinct !DILexicalBlock(scope: !9557, file: !3, line: 1025, column: 4)
!9584 = !DILocation(line: 1025, column: 4, scope: !9583)
!9585 = !DILocalVariable(name: "__x1", scope: !9583, file: !3, line: 1025, type: !27)
!9586 = !DILocalVariable(name: "__x2", scope: !9583, file: !3, line: 1025, type: !27)
!9587 = !DILocalVariable(name: "__x3", scope: !9583, file: !3, line: 1025, type: !27)
!9588 = !DILocalVariable(name: "__ul", scope: !9583, file: !3, line: 1025, type: !6)
!9589 = !DILocalVariable(name: "__vl", scope: !9583, file: !3, line: 1025, type: !6)
!9590 = !DILocalVariable(name: "__uh", scope: !9583, file: !3, line: 1025, type: !6)
!9591 = !DILocalVariable(name: "__vh", scope: !9583, file: !3, line: 1025, type: !6)
!9592 = !DILocalVariable(name: "__u", scope: !9583, file: !3, line: 1025, type: !27)
!9593 = !DILocalVariable(name: "__v", scope: !9583, file: !3, line: 1025, type: !27)
!9594 = !DILocation(line: 1025, column: 4, scope: !9595)
!9595 = distinct !DILexicalBlock(scope: !9583, file: !3, line: 1025, column: 4)
!9596 = !DILocalVariable(name: "__x", scope: !9597, file: !3, line: 1025, type: !27)
!9597 = distinct !DILexicalBlock(scope: !9557, file: !3, line: 1025, column: 4)
!9598 = !DILocation(line: 1025, column: 4, scope: !9597)
!9599 = !DILocalVariable(name: "__x", scope: !9600, file: !3, line: 1025, type: !27)
!9600 = distinct !DILexicalBlock(scope: !9557, file: !3, line: 1025, column: 4)
!9601 = !DILocation(line: 1025, column: 4, scope: !9600)
!9602 = !DILocation(line: 1025, column: 4, scope: !9603)
!9603 = distinct !DILexicalBlock(scope: !9557, file: !3, line: 1025, column: 4)
!9604 = !DILocation(line: 1025, column: 4, scope: !9605)
!9605 = distinct !DILexicalBlock(scope: !9606, file: !3, line: 1025, column: 4)
!9606 = distinct !DILexicalBlock(scope: !9603, file: !3, line: 1025, column: 4)
!9607 = !DILocation(line: 1025, column: 4, scope: !9606)
!9608 = !DILocation(line: 1025, column: 4, scope: !9609)
!9609 = distinct !DILexicalBlock(scope: !9605, file: !3, line: 1025, column: 4)
!9610 = !DILocalVariable(name: "__x", scope: !9611, file: !3, line: 1025, type: !27)
!9611 = distinct !DILexicalBlock(scope: !9609, file: !3, line: 1025, column: 4)
!9612 = !DILocation(line: 1025, column: 4, scope: !9611)
!9613 = !DILocation(line: 1027, column: 23, scope: !9555)
!9614 = !DILocation(line: 1027, column: 28, scope: !9555)
!9615 = !DILocation(line: 1027, column: 26, scope: !9555)
!9616 = !DILocation(line: 1027, column: 31, scope: !9555)
!9617 = !DILocation(line: 1027, column: 35, scope: !9555)
!9618 = !DILocation(line: 1027, column: 37, scope: !9555)
!9619 = !DILocation(line: 1027, column: 41, scope: !9555)
!9620 = !DILocation(line: 1027, column: 9, scope: !9555)
!9621 = !DILocation(line: 1027, column: 7, scope: !9555)
!9622 = !DILocation(line: 1029, column: 10, scope: !9555)
!9623 = !DILocation(line: 1029, column: 15, scope: !9555)
!9624 = !DILocation(line: 1029, column: 13, scope: !9555)
!9625 = !DILocation(line: 1029, column: 8, scope: !9555)
!9626 = !DILocation(line: 1030, column: 9, scope: !9555)
!9627 = !DILocation(line: 1030, column: 14, scope: !9555)
!9628 = !DILocation(line: 1030, column: 12, scope: !9555)
!9629 = !DILocation(line: 1030, column: 7, scope: !9555)
!9630 = !DILocation(line: 1031, column: 9, scope: !9555)
!9631 = !DILocation(line: 1031, column: 14, scope: !9555)
!9632 = !DILocation(line: 1031, column: 12, scope: !9555)
!9633 = !DILocation(line: 1031, column: 7, scope: !9555)
!9634 = !DILocation(line: 1032, column: 9, scope: !9555)
!9635 = !DILocation(line: 1032, column: 14, scope: !9555)
!9636 = !DILocation(line: 1032, column: 12, scope: !9555)
!9637 = !DILocation(line: 1032, column: 7, scope: !9555)
!9638 = !DILocation(line: 1033, column: 17, scope: !9555)
!9639 = !DILocation(line: 1033, column: 4, scope: !9555)
!9640 = !DILocation(line: 1033, column: 7, scope: !9555)
!9641 = !DILocation(line: 1033, column: 9, scope: !9555)
!9642 = !DILocation(line: 1033, column: 12, scope: !9555)
!9643 = !DILocation(line: 1033, column: 11, scope: !9555)
!9644 = !DILocation(line: 1033, column: 15, scope: !9555)
!9645 = !DILocation(line: 1035, column: 8, scope: !9646)
!9646 = distinct !DILexicalBlock(scope: !9555, file: !3, line: 1035, column: 8)
!9647 = !DILocation(line: 1035, column: 11, scope: !9646)
!9648 = !DILocation(line: 1035, column: 8, scope: !9555)
!9649 = !DILocation(line: 1037, column: 14, scope: !9650)
!9650 = distinct !DILexicalBlock(scope: !9646, file: !3, line: 1036, column: 6)
!9651 = !DILocation(line: 1037, column: 30, scope: !9650)
!9652 = !DILocation(line: 1037, column: 35, scope: !9650)
!9653 = !DILocation(line: 1037, column: 33, scope: !9650)
!9654 = !DILocation(line: 1037, column: 38, scope: !9650)
!9655 = !DILocation(line: 1037, column: 43, scope: !9650)
!9656 = !DILocation(line: 1037, column: 41, scope: !9650)
!9657 = !DILocation(line: 1037, column: 46, scope: !9650)
!9658 = !DILocation(line: 1037, column: 50, scope: !9650)
!9659 = !DILocation(line: 1037, column: 53, scope: !9650)
!9660 = !DILocation(line: 1037, column: 19, scope: !9650)
!9661 = !DILocation(line: 1037, column: 17, scope: !9650)
!9662 = !DILocation(line: 1037, column: 11, scope: !9650)
!9663 = !DILocation(line: 1038, column: 9, scope: !9650)
!9664 = !DILocation(line: 1039, column: 6, scope: !9650)
!9665 = !DILocation(line: 1042, column: 11, scope: !9666)
!9666 = distinct !DILexicalBlock(scope: !9522, file: !3, line: 1042, column: 11)
!9667 = !DILocation(line: 1042, column: 11, scope: !9522)
!9668 = !DILocation(line: 1043, column: 10, scope: !9666)
!9669 = !DILocation(line: 1043, column: 2, scope: !9666)
!9670 = !DILocation(line: 1043, column: 5, scope: !9666)
!9671 = !DILocation(line: 1043, column: 8, scope: !9666)
!9672 = !DILocation(line: 1044, column: 5, scope: !9522)
!9673 = !DILocation(line: 1045, column: 10, scope: !9479)
!9674 = !DILocation(line: 1045, column: 14, scope: !9479)
!9675 = distinct !{!9675, !9520, !9676}
!9676 = !DILocation(line: 1045, column: 18, scope: !9479)
!9677 = !DILocation(line: 1047, column: 16, scope: !9479)
!9678 = !DILocation(line: 1047, column: 3, scope: !9479)
!9679 = !DILocation(line: 1047, column: 6, scope: !9479)
!9680 = !DILocation(line: 1047, column: 9, scope: !9479)
!9681 = !DILocation(line: 1047, column: 14, scope: !9479)
!9682 = !DILocation(line: 1048, column: 1, scope: !9479)
